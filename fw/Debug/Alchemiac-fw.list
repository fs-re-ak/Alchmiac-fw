
Alchemiac-fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d18c  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001758  0800d2cc  0800d2cc  0000e2cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800ea24  0800ea24  0000fa24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800ea2c  0800ea2c  0000fa2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800ea30  0800ea30  0000fa30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000088  20000008  0800ea34  00010008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 00000025  20000090  0800eabc  00010090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  200000b8  0800eae1  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000021d4  200000cc  0800eaf2  000100cc  2**2
                  ALLOC
 10 ._user_heap_stack 00001400  200022a0  0800eaf2  000102a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010a67  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  00011000  2**2
                  ALLOC
 13 MB_MEM1       000001bb  20030028  20030028  00011000  2**2
                  ALLOC
 14 .MB_MEM2      00000883  200301e4  0800eaf2  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 15 .debug_info   00032781  00000000  00000000  00010a97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00006a36  00000000  00000000  00043218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002e00  00000000  00000000  00049c50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00002389  00000000  00000000  0004ca50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002e6c2  00000000  00000000  0004edd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00035a0f  00000000  00000000  0007d49b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    00106ef9  00000000  00000000  000b2eaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  001b9da3  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000ccf0  00000000  00000000  001b9de8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 0000005a  00000000  00000000  001c6ad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200000cc 	.word	0x200000cc
 800015c:	00000000 	.word	0x00000000
 8000160:	0800d2b4 	.word	0x0800d2b4

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200000d0 	.word	0x200000d0
 800017c:	0800d2b4 	.word	0x0800d2b4

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_dmul>:
 8000230:	b570      	push	{r4, r5, r6, lr}
 8000232:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000236:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800023a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800023e:	bf1d      	ittte	ne
 8000240:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000244:	ea94 0f0c 	teqne	r4, ip
 8000248:	ea95 0f0c 	teqne	r5, ip
 800024c:	f000 f8de 	bleq	800040c <__aeabi_dmul+0x1dc>
 8000250:	442c      	add	r4, r5
 8000252:	ea81 0603 	eor.w	r6, r1, r3
 8000256:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800025a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800025e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000262:	bf18      	it	ne
 8000264:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000268:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800026c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000270:	d038      	beq.n	80002e4 <__aeabi_dmul+0xb4>
 8000272:	fba0 ce02 	umull	ip, lr, r0, r2
 8000276:	f04f 0500 	mov.w	r5, #0
 800027a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800027e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000282:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000286:	f04f 0600 	mov.w	r6, #0
 800028a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800028e:	f09c 0f00 	teq	ip, #0
 8000292:	bf18      	it	ne
 8000294:	f04e 0e01 	orrne.w	lr, lr, #1
 8000298:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800029c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80002a0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80002a4:	d204      	bcs.n	80002b0 <__aeabi_dmul+0x80>
 80002a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002aa:	416d      	adcs	r5, r5
 80002ac:	eb46 0606 	adc.w	r6, r6, r6
 80002b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002c4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80002c8:	bf88      	it	hi
 80002ca:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80002ce:	d81e      	bhi.n	800030e <__aeabi_dmul+0xde>
 80002d0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80002d4:	bf08      	it	eq
 80002d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002da:	f150 0000 	adcs.w	r0, r0, #0
 80002de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002e2:	bd70      	pop	{r4, r5, r6, pc}
 80002e4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80002e8:	ea46 0101 	orr.w	r1, r6, r1
 80002ec:	ea40 0002 	orr.w	r0, r0, r2
 80002f0:	ea81 0103 	eor.w	r1, r1, r3
 80002f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002f8:	bfc2      	ittt	gt
 80002fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000302:	bd70      	popgt	{r4, r5, r6, pc}
 8000304:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000308:	f04f 0e00 	mov.w	lr, #0
 800030c:	3c01      	subs	r4, #1
 800030e:	f300 80ab 	bgt.w	8000468 <__aeabi_dmul+0x238>
 8000312:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000316:	bfde      	ittt	le
 8000318:	2000      	movle	r0, #0
 800031a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800031e:	bd70      	pople	{r4, r5, r6, pc}
 8000320:	f1c4 0400 	rsb	r4, r4, #0
 8000324:	3c20      	subs	r4, #32
 8000326:	da35      	bge.n	8000394 <__aeabi_dmul+0x164>
 8000328:	340c      	adds	r4, #12
 800032a:	dc1b      	bgt.n	8000364 <__aeabi_dmul+0x134>
 800032c:	f104 0414 	add.w	r4, r4, #20
 8000330:	f1c4 0520 	rsb	r5, r4, #32
 8000334:	fa00 f305 	lsl.w	r3, r0, r5
 8000338:	fa20 f004 	lsr.w	r0, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea40 0002 	orr.w	r0, r0, r2
 8000344:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000348:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800034c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000350:	fa21 f604 	lsr.w	r6, r1, r4
 8000354:	eb42 0106 	adc.w	r1, r2, r6
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f1c4 040c 	rsb	r4, r4, #12
 8000368:	f1c4 0520 	rsb	r5, r4, #32
 800036c:	fa00 f304 	lsl.w	r3, r0, r4
 8000370:	fa20 f005 	lsr.w	r0, r0, r5
 8000374:	fa01 f204 	lsl.w	r2, r1, r4
 8000378:	ea40 0002 	orr.w	r0, r0, r2
 800037c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000380:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000384:	f141 0100 	adc.w	r1, r1, #0
 8000388:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800038c:	bf08      	it	eq
 800038e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000392:	bd70      	pop	{r4, r5, r6, pc}
 8000394:	f1c4 0520 	rsb	r5, r4, #32
 8000398:	fa00 f205 	lsl.w	r2, r0, r5
 800039c:	ea4e 0e02 	orr.w	lr, lr, r2
 80003a0:	fa20 f304 	lsr.w	r3, r0, r4
 80003a4:	fa01 f205 	lsl.w	r2, r1, r5
 80003a8:	ea43 0302 	orr.w	r3, r3, r2
 80003ac:	fa21 f004 	lsr.w	r0, r1, r4
 80003b0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003b4:	fa21 f204 	lsr.w	r2, r1, r4
 80003b8:	ea20 0002 	bic.w	r0, r0, r2
 80003bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003c4:	bf08      	it	eq
 80003c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003ca:	bd70      	pop	{r4, r5, r6, pc}
 80003cc:	f094 0f00 	teq	r4, #0
 80003d0:	d10f      	bne.n	80003f2 <__aeabi_dmul+0x1c2>
 80003d2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80003d6:	0040      	lsls	r0, r0, #1
 80003d8:	eb41 0101 	adc.w	r1, r1, r1
 80003dc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80003e0:	bf08      	it	eq
 80003e2:	3c01      	subeq	r4, #1
 80003e4:	d0f7      	beq.n	80003d6 <__aeabi_dmul+0x1a6>
 80003e6:	ea41 0106 	orr.w	r1, r1, r6
 80003ea:	f095 0f00 	teq	r5, #0
 80003ee:	bf18      	it	ne
 80003f0:	4770      	bxne	lr
 80003f2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80003f6:	0052      	lsls	r2, r2, #1
 80003f8:	eb43 0303 	adc.w	r3, r3, r3
 80003fc:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000400:	bf08      	it	eq
 8000402:	3d01      	subeq	r5, #1
 8000404:	d0f7      	beq.n	80003f6 <__aeabi_dmul+0x1c6>
 8000406:	ea43 0306 	orr.w	r3, r3, r6
 800040a:	4770      	bx	lr
 800040c:	ea94 0f0c 	teq	r4, ip
 8000410:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000414:	bf18      	it	ne
 8000416:	ea95 0f0c 	teqne	r5, ip
 800041a:	d00c      	beq.n	8000436 <__aeabi_dmul+0x206>
 800041c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000420:	bf18      	it	ne
 8000422:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000426:	d1d1      	bne.n	80003cc <__aeabi_dmul+0x19c>
 8000428:	ea81 0103 	eor.w	r1, r1, r3
 800042c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000430:	f04f 0000 	mov.w	r0, #0
 8000434:	bd70      	pop	{r4, r5, r6, pc}
 8000436:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800043a:	bf06      	itte	eq
 800043c:	4610      	moveq	r0, r2
 800043e:	4619      	moveq	r1, r3
 8000440:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000444:	d019      	beq.n	800047a <__aeabi_dmul+0x24a>
 8000446:	ea94 0f0c 	teq	r4, ip
 800044a:	d102      	bne.n	8000452 <__aeabi_dmul+0x222>
 800044c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000450:	d113      	bne.n	800047a <__aeabi_dmul+0x24a>
 8000452:	ea95 0f0c 	teq	r5, ip
 8000456:	d105      	bne.n	8000464 <__aeabi_dmul+0x234>
 8000458:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800045c:	bf1c      	itt	ne
 800045e:	4610      	movne	r0, r2
 8000460:	4619      	movne	r1, r3
 8000462:	d10a      	bne.n	800047a <__aeabi_dmul+0x24a>
 8000464:	ea81 0103 	eor.w	r1, r1, r3
 8000468:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800046c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000470:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000474:	f04f 0000 	mov.w	r0, #0
 8000478:	bd70      	pop	{r4, r5, r6, pc}
 800047a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800047e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000482:	bd70      	pop	{r4, r5, r6, pc}

08000484 <__aeabi_drsub>:
 8000484:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000488:	e002      	b.n	8000490 <__adddf3>
 800048a:	bf00      	nop

0800048c <__aeabi_dsub>:
 800048c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000490 <__adddf3>:
 8000490:	b530      	push	{r4, r5, lr}
 8000492:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000496:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800049a:	ea94 0f05 	teq	r4, r5
 800049e:	bf08      	it	eq
 80004a0:	ea90 0f02 	teqeq	r0, r2
 80004a4:	bf1f      	itttt	ne
 80004a6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004aa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004ae:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004b2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b6:	f000 80e2 	beq.w	800067e <__adddf3+0x1ee>
 80004ba:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004be:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004c2:	bfb8      	it	lt
 80004c4:	426d      	neglt	r5, r5
 80004c6:	dd0c      	ble.n	80004e2 <__adddf3+0x52>
 80004c8:	442c      	add	r4, r5
 80004ca:	ea80 0202 	eor.w	r2, r0, r2
 80004ce:	ea81 0303 	eor.w	r3, r1, r3
 80004d2:	ea82 0000 	eor.w	r0, r2, r0
 80004d6:	ea83 0101 	eor.w	r1, r3, r1
 80004da:	ea80 0202 	eor.w	r2, r0, r2
 80004de:	ea81 0303 	eor.w	r3, r1, r3
 80004e2:	2d36      	cmp	r5, #54	@ 0x36
 80004e4:	bf88      	it	hi
 80004e6:	bd30      	pophi	{r4, r5, pc}
 80004e8:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80004ec:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004f0:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80004f4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004f8:	d002      	beq.n	8000500 <__adddf3+0x70>
 80004fa:	4240      	negs	r0, r0
 80004fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000500:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000504:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000508:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800050c:	d002      	beq.n	8000514 <__adddf3+0x84>
 800050e:	4252      	negs	r2, r2
 8000510:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000514:	ea94 0f05 	teq	r4, r5
 8000518:	f000 80a7 	beq.w	800066a <__adddf3+0x1da>
 800051c:	f1a4 0401 	sub.w	r4, r4, #1
 8000520:	f1d5 0e20 	rsbs	lr, r5, #32
 8000524:	db0d      	blt.n	8000542 <__adddf3+0xb2>
 8000526:	fa02 fc0e 	lsl.w	ip, r2, lr
 800052a:	fa22 f205 	lsr.w	r2, r2, r5
 800052e:	1880      	adds	r0, r0, r2
 8000530:	f141 0100 	adc.w	r1, r1, #0
 8000534:	fa03 f20e 	lsl.w	r2, r3, lr
 8000538:	1880      	adds	r0, r0, r2
 800053a:	fa43 f305 	asr.w	r3, r3, r5
 800053e:	4159      	adcs	r1, r3
 8000540:	e00e      	b.n	8000560 <__adddf3+0xd0>
 8000542:	f1a5 0520 	sub.w	r5, r5, #32
 8000546:	f10e 0e20 	add.w	lr, lr, #32
 800054a:	2a01      	cmp	r2, #1
 800054c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000550:	bf28      	it	cs
 8000552:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000556:	fa43 f305 	asr.w	r3, r3, r5
 800055a:	18c0      	adds	r0, r0, r3
 800055c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000560:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000564:	d507      	bpl.n	8000576 <__adddf3+0xe6>
 8000566:	f04f 0e00 	mov.w	lr, #0
 800056a:	f1dc 0c00 	rsbs	ip, ip, #0
 800056e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000572:	eb6e 0101 	sbc.w	r1, lr, r1
 8000576:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800057a:	d31b      	bcc.n	80005b4 <__adddf3+0x124>
 800057c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000580:	d30c      	bcc.n	800059c <__adddf3+0x10c>
 8000582:	0849      	lsrs	r1, r1, #1
 8000584:	ea5f 0030 	movs.w	r0, r0, rrx
 8000588:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800058c:	f104 0401 	add.w	r4, r4, #1
 8000590:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000594:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000598:	f080 809a 	bcs.w	80006d0 <__adddf3+0x240>
 800059c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80005a0:	bf08      	it	eq
 80005a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005a6:	f150 0000 	adcs.w	r0, r0, #0
 80005aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ae:	ea41 0105 	orr.w	r1, r1, r5
 80005b2:	bd30      	pop	{r4, r5, pc}
 80005b4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005b8:	4140      	adcs	r0, r0
 80005ba:	eb41 0101 	adc.w	r1, r1, r1
 80005be:	3c01      	subs	r4, #1
 80005c0:	bf28      	it	cs
 80005c2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80005c6:	d2e9      	bcs.n	800059c <__adddf3+0x10c>
 80005c8:	f091 0f00 	teq	r1, #0
 80005cc:	bf04      	itt	eq
 80005ce:	4601      	moveq	r1, r0
 80005d0:	2000      	moveq	r0, #0
 80005d2:	fab1 f381 	clz	r3, r1
 80005d6:	bf08      	it	eq
 80005d8:	3320      	addeq	r3, #32
 80005da:	f1a3 030b 	sub.w	r3, r3, #11
 80005de:	f1b3 0220 	subs.w	r2, r3, #32
 80005e2:	da0c      	bge.n	80005fe <__adddf3+0x16e>
 80005e4:	320c      	adds	r2, #12
 80005e6:	dd08      	ble.n	80005fa <__adddf3+0x16a>
 80005e8:	f102 0c14 	add.w	ip, r2, #20
 80005ec:	f1c2 020c 	rsb	r2, r2, #12
 80005f0:	fa01 f00c 	lsl.w	r0, r1, ip
 80005f4:	fa21 f102 	lsr.w	r1, r1, r2
 80005f8:	e00c      	b.n	8000614 <__adddf3+0x184>
 80005fa:	f102 0214 	add.w	r2, r2, #20
 80005fe:	bfd8      	it	le
 8000600:	f1c2 0c20 	rsble	ip, r2, #32
 8000604:	fa01 f102 	lsl.w	r1, r1, r2
 8000608:	fa20 fc0c 	lsr.w	ip, r0, ip
 800060c:	bfdc      	itt	le
 800060e:	ea41 010c 	orrle.w	r1, r1, ip
 8000612:	4090      	lslle	r0, r2
 8000614:	1ae4      	subs	r4, r4, r3
 8000616:	bfa2      	ittt	ge
 8000618:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800061c:	4329      	orrge	r1, r5
 800061e:	bd30      	popge	{r4, r5, pc}
 8000620:	ea6f 0404 	mvn.w	r4, r4
 8000624:	3c1f      	subs	r4, #31
 8000626:	da1c      	bge.n	8000662 <__adddf3+0x1d2>
 8000628:	340c      	adds	r4, #12
 800062a:	dc0e      	bgt.n	800064a <__adddf3+0x1ba>
 800062c:	f104 0414 	add.w	r4, r4, #20
 8000630:	f1c4 0220 	rsb	r2, r4, #32
 8000634:	fa20 f004 	lsr.w	r0, r0, r4
 8000638:	fa01 f302 	lsl.w	r3, r1, r2
 800063c:	ea40 0003 	orr.w	r0, r0, r3
 8000640:	fa21 f304 	lsr.w	r3, r1, r4
 8000644:	ea45 0103 	orr.w	r1, r5, r3
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	f1c4 040c 	rsb	r4, r4, #12
 800064e:	f1c4 0220 	rsb	r2, r4, #32
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 f304 	lsl.w	r3, r1, r4
 800065a:	ea40 0003 	orr.w	r0, r0, r3
 800065e:	4629      	mov	r1, r5
 8000660:	bd30      	pop	{r4, r5, pc}
 8000662:	fa21 f004 	lsr.w	r0, r1, r4
 8000666:	4629      	mov	r1, r5
 8000668:	bd30      	pop	{r4, r5, pc}
 800066a:	f094 0f00 	teq	r4, #0
 800066e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000672:	bf06      	itte	eq
 8000674:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000678:	3401      	addeq	r4, #1
 800067a:	3d01      	subne	r5, #1
 800067c:	e74e      	b.n	800051c <__adddf3+0x8c>
 800067e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000682:	bf18      	it	ne
 8000684:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000688:	d029      	beq.n	80006de <__adddf3+0x24e>
 800068a:	ea94 0f05 	teq	r4, r5
 800068e:	bf08      	it	eq
 8000690:	ea90 0f02 	teqeq	r0, r2
 8000694:	d005      	beq.n	80006a2 <__adddf3+0x212>
 8000696:	ea54 0c00 	orrs.w	ip, r4, r0
 800069a:	bf04      	itt	eq
 800069c:	4619      	moveq	r1, r3
 800069e:	4610      	moveq	r0, r2
 80006a0:	bd30      	pop	{r4, r5, pc}
 80006a2:	ea91 0f03 	teq	r1, r3
 80006a6:	bf1e      	ittt	ne
 80006a8:	2100      	movne	r1, #0
 80006aa:	2000      	movne	r0, #0
 80006ac:	bd30      	popne	{r4, r5, pc}
 80006ae:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006b2:	d105      	bne.n	80006c0 <__adddf3+0x230>
 80006b4:	0040      	lsls	r0, r0, #1
 80006b6:	4149      	adcs	r1, r1
 80006b8:	bf28      	it	cs
 80006ba:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80006be:	bd30      	pop	{r4, r5, pc}
 80006c0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80006c4:	bf3c      	itt	cc
 80006c6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80006ca:	bd30      	popcc	{r4, r5, pc}
 80006cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006d0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80006d4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd30      	pop	{r4, r5, pc}
 80006de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006e2:	bf1a      	itte	ne
 80006e4:	4619      	movne	r1, r3
 80006e6:	4610      	movne	r0, r2
 80006e8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006ec:	bf1c      	itt	ne
 80006ee:	460b      	movne	r3, r1
 80006f0:	4602      	movne	r2, r0
 80006f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006f6:	bf06      	itte	eq
 80006f8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006fc:	ea91 0f03 	teqeq	r1, r3
 8000700:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000704:	bd30      	pop	{r4, r5, pc}
 8000706:	bf00      	nop

08000708 <__aeabi_ui2d>:
 8000708:	f090 0f00 	teq	r0, #0
 800070c:	bf04      	itt	eq
 800070e:	2100      	moveq	r1, #0
 8000710:	4770      	bxeq	lr
 8000712:	b530      	push	{r4, r5, lr}
 8000714:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000718:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800071c:	f04f 0500 	mov.w	r5, #0
 8000720:	f04f 0100 	mov.w	r1, #0
 8000724:	e750      	b.n	80005c8 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_i2d>:
 8000728:	f090 0f00 	teq	r0, #0
 800072c:	bf04      	itt	eq
 800072e:	2100      	moveq	r1, #0
 8000730:	4770      	bxeq	lr
 8000732:	b530      	push	{r4, r5, lr}
 8000734:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000738:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800073c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000740:	bf48      	it	mi
 8000742:	4240      	negmi	r0, r0
 8000744:	f04f 0100 	mov.w	r1, #0
 8000748:	e73e      	b.n	80005c8 <__adddf3+0x138>
 800074a:	bf00      	nop

0800074c <__aeabi_f2d>:
 800074c:	0042      	lsls	r2, r0, #1
 800074e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000752:	ea4f 0131 	mov.w	r1, r1, rrx
 8000756:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800075a:	bf1f      	itttt	ne
 800075c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000760:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000764:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000768:	4770      	bxne	lr
 800076a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800076e:	bf08      	it	eq
 8000770:	4770      	bxeq	lr
 8000772:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000776:	bf04      	itt	eq
 8000778:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800077c:	4770      	bxeq	lr
 800077e:	b530      	push	{r4, r5, lr}
 8000780:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000784:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000788:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	e71c      	b.n	80005c8 <__adddf3+0x138>
 800078e:	bf00      	nop

08000790 <__aeabi_ul2d>:
 8000790:	ea50 0201 	orrs.w	r2, r0, r1
 8000794:	bf08      	it	eq
 8000796:	4770      	bxeq	lr
 8000798:	b530      	push	{r4, r5, lr}
 800079a:	f04f 0500 	mov.w	r5, #0
 800079e:	e00a      	b.n	80007b6 <__aeabi_l2d+0x16>

080007a0 <__aeabi_l2d>:
 80007a0:	ea50 0201 	orrs.w	r2, r0, r1
 80007a4:	bf08      	it	eq
 80007a6:	4770      	bxeq	lr
 80007a8:	b530      	push	{r4, r5, lr}
 80007aa:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80007ae:	d502      	bpl.n	80007b6 <__aeabi_l2d+0x16>
 80007b0:	4240      	negs	r0, r0
 80007b2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007b6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007ba:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007be:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007c2:	f43f aed8 	beq.w	8000576 <__adddf3+0xe6>
 80007c6:	f04f 0203 	mov.w	r2, #3
 80007ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007ce:	bf18      	it	ne
 80007d0:	3203      	addne	r2, #3
 80007d2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007d6:	bf18      	it	ne
 80007d8:	3203      	addne	r2, #3
 80007da:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007de:	f1c2 0320 	rsb	r3, r2, #32
 80007e2:	fa00 fc03 	lsl.w	ip, r0, r3
 80007e6:	fa20 f002 	lsr.w	r0, r0, r2
 80007ea:	fa01 fe03 	lsl.w	lr, r1, r3
 80007ee:	ea40 000e 	orr.w	r0, r0, lr
 80007f2:	fa21 f102 	lsr.w	r1, r1, r2
 80007f6:	4414      	add	r4, r2
 80007f8:	e6bd      	b.n	8000576 <__adddf3+0xe6>
 80007fa:	bf00      	nop

080007fc <__aeabi_uldivmod>:
 80007fc:	b953      	cbnz	r3, 8000814 <__aeabi_uldivmod+0x18>
 80007fe:	b94a      	cbnz	r2, 8000814 <__aeabi_uldivmod+0x18>
 8000800:	2900      	cmp	r1, #0
 8000802:	bf08      	it	eq
 8000804:	2800      	cmpeq	r0, #0
 8000806:	bf1c      	itt	ne
 8000808:	f04f 31ff 	movne.w	r1, #4294967295
 800080c:	f04f 30ff 	movne.w	r0, #4294967295
 8000810:	f000 b96a 	b.w	8000ae8 <__aeabi_idiv0>
 8000814:	f1ad 0c08 	sub.w	ip, sp, #8
 8000818:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800081c:	f000 f806 	bl	800082c <__udivmoddi4>
 8000820:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000824:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000828:	b004      	add	sp, #16
 800082a:	4770      	bx	lr

0800082c <__udivmoddi4>:
 800082c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000830:	9d08      	ldr	r5, [sp, #32]
 8000832:	460c      	mov	r4, r1
 8000834:	2b00      	cmp	r3, #0
 8000836:	d14e      	bne.n	80008d6 <__udivmoddi4+0xaa>
 8000838:	4694      	mov	ip, r2
 800083a:	458c      	cmp	ip, r1
 800083c:	4686      	mov	lr, r0
 800083e:	fab2 f282 	clz	r2, r2
 8000842:	d962      	bls.n	800090a <__udivmoddi4+0xde>
 8000844:	b14a      	cbz	r2, 800085a <__udivmoddi4+0x2e>
 8000846:	f1c2 0320 	rsb	r3, r2, #32
 800084a:	4091      	lsls	r1, r2
 800084c:	fa20 f303 	lsr.w	r3, r0, r3
 8000850:	fa0c fc02 	lsl.w	ip, ip, r2
 8000854:	4319      	orrs	r1, r3
 8000856:	fa00 fe02 	lsl.w	lr, r0, r2
 800085a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800085e:	fa1f f68c 	uxth.w	r6, ip
 8000862:	fbb1 f4f7 	udiv	r4, r1, r7
 8000866:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800086a:	fb07 1114 	mls	r1, r7, r4, r1
 800086e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000872:	fb04 f106 	mul.w	r1, r4, r6
 8000876:	4299      	cmp	r1, r3
 8000878:	d90a      	bls.n	8000890 <__udivmoddi4+0x64>
 800087a:	eb1c 0303 	adds.w	r3, ip, r3
 800087e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000882:	f080 8112 	bcs.w	8000aaa <__udivmoddi4+0x27e>
 8000886:	4299      	cmp	r1, r3
 8000888:	f240 810f 	bls.w	8000aaa <__udivmoddi4+0x27e>
 800088c:	3c02      	subs	r4, #2
 800088e:	4463      	add	r3, ip
 8000890:	1a59      	subs	r1, r3, r1
 8000892:	fa1f f38e 	uxth.w	r3, lr
 8000896:	fbb1 f0f7 	udiv	r0, r1, r7
 800089a:	fb07 1110 	mls	r1, r7, r0, r1
 800089e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008a2:	fb00 f606 	mul.w	r6, r0, r6
 80008a6:	429e      	cmp	r6, r3
 80008a8:	d90a      	bls.n	80008c0 <__udivmoddi4+0x94>
 80008aa:	eb1c 0303 	adds.w	r3, ip, r3
 80008ae:	f100 31ff 	add.w	r1, r0, #4294967295
 80008b2:	f080 80fc 	bcs.w	8000aae <__udivmoddi4+0x282>
 80008b6:	429e      	cmp	r6, r3
 80008b8:	f240 80f9 	bls.w	8000aae <__udivmoddi4+0x282>
 80008bc:	4463      	add	r3, ip
 80008be:	3802      	subs	r0, #2
 80008c0:	1b9b      	subs	r3, r3, r6
 80008c2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80008c6:	2100      	movs	r1, #0
 80008c8:	b11d      	cbz	r5, 80008d2 <__udivmoddi4+0xa6>
 80008ca:	40d3      	lsrs	r3, r2
 80008cc:	2200      	movs	r2, #0
 80008ce:	e9c5 3200 	strd	r3, r2, [r5]
 80008d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008d6:	428b      	cmp	r3, r1
 80008d8:	d905      	bls.n	80008e6 <__udivmoddi4+0xba>
 80008da:	b10d      	cbz	r5, 80008e0 <__udivmoddi4+0xb4>
 80008dc:	e9c5 0100 	strd	r0, r1, [r5]
 80008e0:	2100      	movs	r1, #0
 80008e2:	4608      	mov	r0, r1
 80008e4:	e7f5      	b.n	80008d2 <__udivmoddi4+0xa6>
 80008e6:	fab3 f183 	clz	r1, r3
 80008ea:	2900      	cmp	r1, #0
 80008ec:	d146      	bne.n	800097c <__udivmoddi4+0x150>
 80008ee:	42a3      	cmp	r3, r4
 80008f0:	d302      	bcc.n	80008f8 <__udivmoddi4+0xcc>
 80008f2:	4290      	cmp	r0, r2
 80008f4:	f0c0 80f0 	bcc.w	8000ad8 <__udivmoddi4+0x2ac>
 80008f8:	1a86      	subs	r6, r0, r2
 80008fa:	eb64 0303 	sbc.w	r3, r4, r3
 80008fe:	2001      	movs	r0, #1
 8000900:	2d00      	cmp	r5, #0
 8000902:	d0e6      	beq.n	80008d2 <__udivmoddi4+0xa6>
 8000904:	e9c5 6300 	strd	r6, r3, [r5]
 8000908:	e7e3      	b.n	80008d2 <__udivmoddi4+0xa6>
 800090a:	2a00      	cmp	r2, #0
 800090c:	f040 8090 	bne.w	8000a30 <__udivmoddi4+0x204>
 8000910:	eba1 040c 	sub.w	r4, r1, ip
 8000914:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000918:	fa1f f78c 	uxth.w	r7, ip
 800091c:	2101      	movs	r1, #1
 800091e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000922:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000926:	fb08 4416 	mls	r4, r8, r6, r4
 800092a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800092e:	fb07 f006 	mul.w	r0, r7, r6
 8000932:	4298      	cmp	r0, r3
 8000934:	d908      	bls.n	8000948 <__udivmoddi4+0x11c>
 8000936:	eb1c 0303 	adds.w	r3, ip, r3
 800093a:	f106 34ff 	add.w	r4, r6, #4294967295
 800093e:	d202      	bcs.n	8000946 <__udivmoddi4+0x11a>
 8000940:	4298      	cmp	r0, r3
 8000942:	f200 80cd 	bhi.w	8000ae0 <__udivmoddi4+0x2b4>
 8000946:	4626      	mov	r6, r4
 8000948:	1a1c      	subs	r4, r3, r0
 800094a:	fa1f f38e 	uxth.w	r3, lr
 800094e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000952:	fb08 4410 	mls	r4, r8, r0, r4
 8000956:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800095a:	fb00 f707 	mul.w	r7, r0, r7
 800095e:	429f      	cmp	r7, r3
 8000960:	d908      	bls.n	8000974 <__udivmoddi4+0x148>
 8000962:	eb1c 0303 	adds.w	r3, ip, r3
 8000966:	f100 34ff 	add.w	r4, r0, #4294967295
 800096a:	d202      	bcs.n	8000972 <__udivmoddi4+0x146>
 800096c:	429f      	cmp	r7, r3
 800096e:	f200 80b0 	bhi.w	8000ad2 <__udivmoddi4+0x2a6>
 8000972:	4620      	mov	r0, r4
 8000974:	1bdb      	subs	r3, r3, r7
 8000976:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800097a:	e7a5      	b.n	80008c8 <__udivmoddi4+0x9c>
 800097c:	f1c1 0620 	rsb	r6, r1, #32
 8000980:	408b      	lsls	r3, r1
 8000982:	fa22 f706 	lsr.w	r7, r2, r6
 8000986:	431f      	orrs	r7, r3
 8000988:	fa20 fc06 	lsr.w	ip, r0, r6
 800098c:	fa04 f301 	lsl.w	r3, r4, r1
 8000990:	ea43 030c 	orr.w	r3, r3, ip
 8000994:	40f4      	lsrs	r4, r6
 8000996:	fa00 f801 	lsl.w	r8, r0, r1
 800099a:	0c38      	lsrs	r0, r7, #16
 800099c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80009a0:	fbb4 fef0 	udiv	lr, r4, r0
 80009a4:	fa1f fc87 	uxth.w	ip, r7
 80009a8:	fb00 441e 	mls	r4, r0, lr, r4
 80009ac:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80009b0:	fb0e f90c 	mul.w	r9, lr, ip
 80009b4:	45a1      	cmp	r9, r4
 80009b6:	fa02 f201 	lsl.w	r2, r2, r1
 80009ba:	d90a      	bls.n	80009d2 <__udivmoddi4+0x1a6>
 80009bc:	193c      	adds	r4, r7, r4
 80009be:	f10e 3aff 	add.w	sl, lr, #4294967295
 80009c2:	f080 8084 	bcs.w	8000ace <__udivmoddi4+0x2a2>
 80009c6:	45a1      	cmp	r9, r4
 80009c8:	f240 8081 	bls.w	8000ace <__udivmoddi4+0x2a2>
 80009cc:	f1ae 0e02 	sub.w	lr, lr, #2
 80009d0:	443c      	add	r4, r7
 80009d2:	eba4 0409 	sub.w	r4, r4, r9
 80009d6:	fa1f f983 	uxth.w	r9, r3
 80009da:	fbb4 f3f0 	udiv	r3, r4, r0
 80009de:	fb00 4413 	mls	r4, r0, r3, r4
 80009e2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80009e6:	fb03 fc0c 	mul.w	ip, r3, ip
 80009ea:	45a4      	cmp	ip, r4
 80009ec:	d907      	bls.n	80009fe <__udivmoddi4+0x1d2>
 80009ee:	193c      	adds	r4, r7, r4
 80009f0:	f103 30ff 	add.w	r0, r3, #4294967295
 80009f4:	d267      	bcs.n	8000ac6 <__udivmoddi4+0x29a>
 80009f6:	45a4      	cmp	ip, r4
 80009f8:	d965      	bls.n	8000ac6 <__udivmoddi4+0x29a>
 80009fa:	3b02      	subs	r3, #2
 80009fc:	443c      	add	r4, r7
 80009fe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000a02:	fba0 9302 	umull	r9, r3, r0, r2
 8000a06:	eba4 040c 	sub.w	r4, r4, ip
 8000a0a:	429c      	cmp	r4, r3
 8000a0c:	46ce      	mov	lr, r9
 8000a0e:	469c      	mov	ip, r3
 8000a10:	d351      	bcc.n	8000ab6 <__udivmoddi4+0x28a>
 8000a12:	d04e      	beq.n	8000ab2 <__udivmoddi4+0x286>
 8000a14:	b155      	cbz	r5, 8000a2c <__udivmoddi4+0x200>
 8000a16:	ebb8 030e 	subs.w	r3, r8, lr
 8000a1a:	eb64 040c 	sbc.w	r4, r4, ip
 8000a1e:	fa04 f606 	lsl.w	r6, r4, r6
 8000a22:	40cb      	lsrs	r3, r1
 8000a24:	431e      	orrs	r6, r3
 8000a26:	40cc      	lsrs	r4, r1
 8000a28:	e9c5 6400 	strd	r6, r4, [r5]
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	e750      	b.n	80008d2 <__udivmoddi4+0xa6>
 8000a30:	f1c2 0320 	rsb	r3, r2, #32
 8000a34:	fa20 f103 	lsr.w	r1, r0, r3
 8000a38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a3c:	fa24 f303 	lsr.w	r3, r4, r3
 8000a40:	4094      	lsls	r4, r2
 8000a42:	430c      	orrs	r4, r1
 8000a44:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a48:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a4c:	fa1f f78c 	uxth.w	r7, ip
 8000a50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a54:	fb08 3110 	mls	r1, r8, r0, r3
 8000a58:	0c23      	lsrs	r3, r4, #16
 8000a5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a5e:	fb00 f107 	mul.w	r1, r0, r7
 8000a62:	4299      	cmp	r1, r3
 8000a64:	d908      	bls.n	8000a78 <__udivmoddi4+0x24c>
 8000a66:	eb1c 0303 	adds.w	r3, ip, r3
 8000a6a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000a6e:	d22c      	bcs.n	8000aca <__udivmoddi4+0x29e>
 8000a70:	4299      	cmp	r1, r3
 8000a72:	d92a      	bls.n	8000aca <__udivmoddi4+0x29e>
 8000a74:	3802      	subs	r0, #2
 8000a76:	4463      	add	r3, ip
 8000a78:	1a5b      	subs	r3, r3, r1
 8000a7a:	b2a4      	uxth	r4, r4
 8000a7c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000a80:	fb08 3311 	mls	r3, r8, r1, r3
 8000a84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a88:	fb01 f307 	mul.w	r3, r1, r7
 8000a8c:	42a3      	cmp	r3, r4
 8000a8e:	d908      	bls.n	8000aa2 <__udivmoddi4+0x276>
 8000a90:	eb1c 0404 	adds.w	r4, ip, r4
 8000a94:	f101 36ff 	add.w	r6, r1, #4294967295
 8000a98:	d213      	bcs.n	8000ac2 <__udivmoddi4+0x296>
 8000a9a:	42a3      	cmp	r3, r4
 8000a9c:	d911      	bls.n	8000ac2 <__udivmoddi4+0x296>
 8000a9e:	3902      	subs	r1, #2
 8000aa0:	4464      	add	r4, ip
 8000aa2:	1ae4      	subs	r4, r4, r3
 8000aa4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000aa8:	e739      	b.n	800091e <__udivmoddi4+0xf2>
 8000aaa:	4604      	mov	r4, r0
 8000aac:	e6f0      	b.n	8000890 <__udivmoddi4+0x64>
 8000aae:	4608      	mov	r0, r1
 8000ab0:	e706      	b.n	80008c0 <__udivmoddi4+0x94>
 8000ab2:	45c8      	cmp	r8, r9
 8000ab4:	d2ae      	bcs.n	8000a14 <__udivmoddi4+0x1e8>
 8000ab6:	ebb9 0e02 	subs.w	lr, r9, r2
 8000aba:	eb63 0c07 	sbc.w	ip, r3, r7
 8000abe:	3801      	subs	r0, #1
 8000ac0:	e7a8      	b.n	8000a14 <__udivmoddi4+0x1e8>
 8000ac2:	4631      	mov	r1, r6
 8000ac4:	e7ed      	b.n	8000aa2 <__udivmoddi4+0x276>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	e799      	b.n	80009fe <__udivmoddi4+0x1d2>
 8000aca:	4630      	mov	r0, r6
 8000acc:	e7d4      	b.n	8000a78 <__udivmoddi4+0x24c>
 8000ace:	46d6      	mov	lr, sl
 8000ad0:	e77f      	b.n	80009d2 <__udivmoddi4+0x1a6>
 8000ad2:	4463      	add	r3, ip
 8000ad4:	3802      	subs	r0, #2
 8000ad6:	e74d      	b.n	8000974 <__udivmoddi4+0x148>
 8000ad8:	4606      	mov	r6, r0
 8000ada:	4623      	mov	r3, r4
 8000adc:	4608      	mov	r0, r1
 8000ade:	e70f      	b.n	8000900 <__udivmoddi4+0xd4>
 8000ae0:	3e02      	subs	r6, #2
 8000ae2:	4463      	add	r3, ip
 8000ae4:	e730      	b.n	8000948 <__udivmoddi4+0x11c>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_idiv0>:
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 8000aec:	b5b0      	push	{r4, r5, r7, lr}
 8000aee:	b088      	sub	sp, #32
 8000af0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8000af2:	4b0b      	ldr	r3, [pc, #44]	@ (8000b20 <APPD_EnableCPU2+0x34>)
 8000af4:	1d3c      	adds	r4, r7, #4
 8000af6:	461d      	mov	r5, r3
 8000af8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000afa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000afc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b00:	c403      	stmia	r4!, {r0, r1}
 8000b02:	8022      	strh	r2, [r4, #0]
 8000b04:	3402      	adds	r4, #2
 8000b06:	0c13      	lsrs	r3, r2, #16
 8000b08:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8000b0a:	f008 fd7d 	bl	8009608 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8000b0e:	1d3b      	adds	r3, r7, #4
 8000b10:	4618      	mov	r0, r3
 8000b12:	f008 f80e 	bl	8008b32 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 8000b16:	bf00      	nop
}
 8000b18:	3720      	adds	r7, #32
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bdb0      	pop	{r4, r5, r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	0800d2cc 	.word	0x0800d2cc

08000b24 <DbgOutputTraces>:
/* USER CODE END DbgOutputInit */
  return;
}

void DbgOutputTraces(  uint8_t *p_data, uint16_t size, void (*cb)(void) )
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b084      	sub	sp, #16
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	60f8      	str	r0, [r7, #12]
 8000b2c:	460b      	mov	r3, r1
 8000b2e:	607a      	str	r2, [r7, #4]
 8000b30:	817b      	strh	r3, [r7, #10]
/* USER CODE END DbgOutputTraces */
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 8000b32:	897a      	ldrh	r2, [r7, #10]
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	68f9      	ldr	r1, [r7, #12]
 8000b38:	2000      	movs	r0, #0
 8000b3a:	f001 f97f 	bl	8001e3c <HW_UART_Transmit_DMA>

/* USER CODE END DbgOutputTraces */
  return;
 8000b3e:	bf00      	nop
}
 8000b40:	3710      	adds	r7, #16
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
	...

08000b48 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b083      	sub	sp, #12
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8000b50:	4b07      	ldr	r3, [pc, #28]	@ (8000b70 <LL_C2_PWR_SetPowerMode+0x28>)
 8000b52:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000b56:	f023 0207 	bic.w	r2, r3, #7
 8000b5a:	4905      	ldr	r1, [pc, #20]	@ (8000b70 <LL_C2_PWR_SetPowerMode+0x28>)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	4313      	orrs	r3, r2
 8000b60:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8000b64:	bf00      	nop
 8000b66:	370c      	adds	r7, #12
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr
 8000b70:	58000400 	.word	0x58000400

08000b74 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b083      	sub	sp, #12
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000b7c:	4b06      	ldr	r3, [pc, #24]	@ (8000b98 <LL_EXTI_EnableIT_32_63+0x24>)
 8000b7e:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8000b82:	4905      	ldr	r1, [pc, #20]	@ (8000b98 <LL_EXTI_EnableIT_32_63+0x24>)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	4313      	orrs	r3, r2
 8000b88:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8000b8c:	bf00      	nop
 8000b8e:	370c      	adds	r7, #12
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr
 8000b98:	58000800 	.word	0x58000800

08000b9c <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8000ba4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ba8:	4a0a      	ldr	r2, [pc, #40]	@ (8000bd4 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8000baa:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8000bae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000bb2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000bb6:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	021b      	lsls	r3, r3, #8
 8000bbe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000bc2:	4313      	orrs	r3, r2
 8000bc4:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
}
 8000bc8:	bf00      	nop
 8000bca:	370c      	adds	r7, #12
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr
 8000bd4:	cafecafe 	.word	0xcafecafe

08000bd8 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000be0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000be4:	689b      	ldr	r3, [r3, #8]
 8000be6:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8000bea:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	4313      	orrs	r3, r2
 8000bf2:	608b      	str	r3, [r1, #8]
}
 8000bf4:	bf00      	nop
 8000bf6:	370c      	adds	r7, #12
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr

08000c00 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 8000c04:	4b04      	ldr	r3, [pc, #16]	@ (8000c18 <LL_DBGMCU_GetDeviceID+0x18>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	e0042000 	.word	0xe0042000

08000c1c <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8000c20:	4b04      	ldr	r3, [pc, #16]	@ (8000c34 <LL_DBGMCU_GetRevisionID+0x18>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	0c1b      	lsrs	r3, r3, #16
 8000c26:	b29b      	uxth	r3, r3
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	e0042000 	.word	0xe0042000

08000c38 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8000c3c:	4b05      	ldr	r3, [pc, #20]	@ (8000c54 <LL_LPM_EnableSleep+0x1c>)
 8000c3e:	691b      	ldr	r3, [r3, #16]
 8000c40:	4a04      	ldr	r2, [pc, #16]	@ (8000c54 <LL_LPM_EnableSleep+0x1c>)
 8000c42:	f023 0304 	bic.w	r3, r3, #4
 8000c46:	6113      	str	r3, [r2, #16]
}
 8000c48:	bf00      	nop
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	e000ed00 	.word	0xe000ed00

08000c58 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	22ff      	movs	r2, #255	@ 0xff
 8000c64:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000c66:	bf00      	nop
 8000c68:	370c      	adds	r7, #12
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr

08000c72 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8000c72:	b480      	push	{r7}
 8000c74:	b083      	sub	sp, #12
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	22ca      	movs	r2, #202	@ 0xca
 8000c7e:	625a      	str	r2, [r3, #36]	@ 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	2253      	movs	r2, #83	@ 0x53
 8000c84:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000c86:	bf00      	nop
 8000c88:	370c      	adds	r7, #12
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr

08000c92 <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8000c92:	b480      	push	{r7}
 8000c94:	b083      	sub	sp, #12
 8000c96:	af00      	add	r7, sp, #0
 8000c98:	6078      	str	r0, [r7, #4]
 8000c9a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	689b      	ldr	r3, [r3, #8]
 8000ca0:	f023 0207 	bic.w	r2, r3, #7
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	431a      	orrs	r2, r3
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	609a      	str	r2, [r3, #8]
}
 8000cac:	bf00      	nop
 8000cae:	370c      	adds	r7, #12
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr

08000cb8 <MX_APPE_Config>:
static void UartCmdExecute(void);
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000cbc:	4b04      	ldr	r3, [pc, #16]	@ (8000cd0 <MX_APPE_Config+0x18>)
 8000cbe:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000cc2:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8000cc4:	f000 f828 	bl	8000d18 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8000cc8:	f000 f82d 	bl	8000d26 <Config_HSE>

  return;
 8000ccc:	bf00      	nop
}
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	58004000 	.word	0x58004000

08000cd4 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8000cd8:	f000 f839 	bl	8000d4e <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8000cdc:	f000 f852 	bl	8000d84 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8000ce0:	4905      	ldr	r1, [pc, #20]	@ (8000cf8 <MX_APPE_Init+0x24>)
 8000ce2:	2000      	movs	r0, #0
 8000ce4:	f000 fe3e 	bl	8001964 <HW_TS_Init>
  
  /**
   * The Standby mode should not be entered before the initialization is over
   * The default state of the Low Power Manager is to allow the Standby Mode so an request is needed here
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 8000ce8:	2101      	movs	r1, #1
 8000cea:	2001      	movs	r0, #1
 8000cec:	f00a fec8 	bl	800ba80 <UTIL_LPM_SetOffMode>
  //Button_Init();

  //RxUART_Init();

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000cf0:	f000 f856 	bl	8000da0 <appe_Tl_Init>
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */

   return;
 8000cf4:	bf00      	nop
}
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	200001c8 	.word	0x200001c8

08000cfc <Init_Smps>:

void Init_Smps(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 8000d00:	bf00      	nop
}
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr

08000d0a <Init_Exti>:

void Init_Exti(void)
{
 8000d0a:	b580      	push	{r7, lr}
 8000d0c:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 8000d0e:	2050      	movs	r0, #80	@ 0x50
 8000d10:	f7ff ff30 	bl	8000b74 <LL_EXTI_EnableIT_32_63>

  return;
 8000d14:	bf00      	nop
}
 8000d16:	bd80      	pop	{r7, pc}

08000d18 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  Reset_BackupDomain();

  Reset_IPCC();
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 8000d1c:	bf00      	nop
}
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr

08000d26 <Config_HSE>:
  return;
}
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8000d26:	b580      	push	{r7, lr}
 8000d28:	b082      	sub	sp, #8
 8000d2a:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8000d2c:	2000      	movs	r0, #0
 8000d2e:	f008 fd97 	bl	8009860 <OTP_Read>
 8000d32:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d005      	beq.n	8000d46 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	799b      	ldrb	r3, [r3, #6]
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f7ff ff2c 	bl	8000b9c <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8000d44:	bf00      	nop
 8000d46:	bf00      	nop
}
 8000d48:	3708      	adds	r7, #8
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}

08000d4e <System_Init>:

static void System_Init(void)
{
 8000d4e:	b580      	push	{r7, lr}
 8000d50:	af00      	add	r7, sp, #0
  Init_Smps();
 8000d52:	f7ff ffd3 	bl	8000cfc <Init_Smps>

  Init_Exti();
 8000d56:	f7ff ffd8 	bl	8000d0a <Init_Exti>

  Init_Rtc();
 8000d5a:	f000 f803 	bl	8000d64 <Init_Rtc>

  return;
 8000d5e:	bf00      	nop
}
 8000d60:	bd80      	pop	{r7, pc}
	...

08000d64 <Init_Rtc>:

static void Init_Rtc(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8000d68:	4805      	ldr	r0, [pc, #20]	@ (8000d80 <Init_Rtc+0x1c>)
 8000d6a:	f7ff ff82 	bl	8000c72 <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8000d6e:	2100      	movs	r1, #0
 8000d70:	4803      	ldr	r0, [pc, #12]	@ (8000d80 <Init_Rtc+0x1c>)
 8000d72:	f7ff ff8e 	bl	8000c92 <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8000d76:	4802      	ldr	r0, [pc, #8]	@ (8000d80 <Init_Rtc+0x1c>)
 8000d78:	f7ff ff6e 	bl	8000c58 <LL_RTC_EnableWriteProtection>

  return;
 8000d7c:	bf00      	nop
}
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	40002800 	.word	0x40002800

08000d84 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8000d88:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8000d8c:	f7ff ff24 	bl	8000bd8 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8000d90:	f00a fe64 	bl	800ba5c <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8000d94:	2004      	movs	r0, #4
 8000d96:	f7ff fed7 	bl	8000b48 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 8000d9a:	bf00      	nop
}
 8000d9c:	bd80      	pop	{r7, pc}
	...

08000da0 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b088      	sub	sp, #32
 8000da4:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8000da6:	f008 fa79 	bl	800929c <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 8000daa:	4a11      	ldr	r2, [pc, #68]	@ (8000df0 <appe_Tl_Init+0x50>)
 8000dac:	2100      	movs	r1, #0
 8000dae:	2010      	movs	r0, #16
 8000db0:	f00a ff92 	bl	800bcd8 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8000db4:	4b0f      	ldr	r3, [pc, #60]	@ (8000df4 <appe_Tl_Init+0x54>)
 8000db6:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8000db8:	4b0f      	ldr	r3, [pc, #60]	@ (8000df8 <appe_Tl_Init+0x58>)
 8000dba:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8000dbc:	463b      	mov	r3, r7
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	480e      	ldr	r0, [pc, #56]	@ (8000dfc <appe_Tl_Init+0x5c>)
 8000dc2:	f008 f92d 	bl	8009020 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8000dc6:	4b0e      	ldr	r3, [pc, #56]	@ (8000e00 <appe_Tl_Init+0x60>)
 8000dc8:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8000dca:	4b0e      	ldr	r3, [pc, #56]	@ (8000e04 <appe_Tl_Init+0x64>)
 8000dcc:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8000dce:	4b0e      	ldr	r3, [pc, #56]	@ (8000e08 <appe_Tl_Init+0x68>)
 8000dd0:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8000dd2:	f240 533c 	movw	r3, #1340	@ 0x53c
 8000dd6:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8000dd8:	f107 0308 	add.w	r3, r7, #8
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f008 fb9f 	bl	8009520 <TL_MM_Init>

  TL_Enable();
 8000de2:	f008 fa55 	bl	8009290 <TL_Enable>

  return;
 8000de6:	bf00      	nop
}
 8000de8:	3720      	adds	r7, #32
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	08009059 	.word	0x08009059
 8000df4:	20030734 	.word	0x20030734
 8000df8:	08000e0d 	.word	0x08000e0d
 8000dfc:	08000e25 	.word	0x08000e25
 8000e00:	2003094c 	.word	0x2003094c
 8000e04:	20030840 	.word	0x20030840
 8000e08:	200301f8 	.word	0x200301f8

08000e0c <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b083      	sub	sp, #12
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	4603      	mov	r3, r0
 8000e14:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8000e16:	bf00      	nop
}
 8000e18:	370c      	adds	r7, #12
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
	...

08000e24 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b088      	sub	sp, #32
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	330b      	adds	r3, #11
 8000e32:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 8000e34:	69fb      	ldr	r3, [r7, #28]
 8000e36:	881b      	ldrh	r3, [r3, #0]
 8000e38:	b29b      	uxth	r3, r3
 8000e3a:	f5a3 4312 	sub.w	r3, r3, #37376	@ 0x9200
 8000e3e:	2b07      	cmp	r3, #7
 8000e40:	d860      	bhi.n	8000f04 <APPE_SysUserEvtRx+0xe0>
 8000e42:	a201      	add	r2, pc, #4	@ (adr r2, 8000e48 <APPE_SysUserEvtRx+0x24>)
 8000e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e48:	08000e69 	.word	0x08000e69
 8000e4c:	08000eab 	.word	0x08000eab
 8000e50:	08000eb9 	.word	0x08000eb9
 8000e54:	08000f05 	.word	0x08000f05
 8000e58:	08000ed5 	.word	0x08000ed5
 8000e5c:	08000ee5 	.word	0x08000ee5
 8000e60:	08000eed 	.word	0x08000eed
 8000e64:	08000efd 	.word	0x08000efd
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 8000e68:	f107 030c 	add.w	r3, r7, #12
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f007 fe8d 	bl	8008b8c <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
 8000e72:	7b3b      	ldrb	r3, [r7, #12]
 8000e74:	4619      	mov	r1, r3
 8000e76:	7b7b      	ldrb	r3, [r7, #13]
 8000e78:	461a      	mov	r2, r3
 8000e7a:	7bbb      	ldrb	r3, [r7, #14]
 8000e7c:	4824      	ldr	r0, [pc, #144]	@ (8000f10 <APPE_SysUserEvtRx+0xec>)
 8000e7e:	f00b f90b 	bl	800c098 <iprintf>
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
 8000e82:	7c3b      	ldrb	r3, [r7, #16]
 8000e84:	4619      	mov	r1, r3
 8000e86:	4823      	ldr	r0, [pc, #140]	@ (8000f14 <APPE_SysUserEvtRx+0xf0>)
 8000e88:	f00b f906 	bl	800c098 <iprintf>
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);
 8000e8c:	7dbb      	ldrb	r3, [r7, #22]
 8000e8e:	4619      	mov	r1, r3
 8000e90:	7dfb      	ldrb	r3, [r7, #23]
 8000e92:	461a      	mov	r2, r3
 8000e94:	7e3b      	ldrb	r3, [r7, #24]
 8000e96:	4820      	ldr	r0, [pc, #128]	@ (8000f18 <APPE_SysUserEvtRx+0xf4>)
 8000e98:	f00b f8fe 	bl	800c098 <iprintf>

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
 8000e9c:	481f      	ldr	r0, [pc, #124]	@ (8000f1c <APPE_SysUserEvtRx+0xf8>)
 8000e9e:	f00b f8fb 	bl	800c098 <iprintf>
    APPE_SysEvtReadyProcessing(pPayload);
 8000ea2:	6878      	ldr	r0, [r7, #4]
 8000ea4:	f000 f870 	bl	8000f88 <APPE_SysEvtReadyProcessing>
    break;
 8000ea8:	e02d      	b.n	8000f06 <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
 8000eaa:	481d      	ldr	r0, [pc, #116]	@ (8000f20 <APPE_SysUserEvtRx+0xfc>)
 8000eac:	f00b f8f4 	bl	800c098 <iprintf>
    APPE_SysEvtError(pPayload);
 8000eb0:	6878      	ldr	r0, [r7, #4]
 8000eb2:	f000 f843 	bl	8000f3c <APPE_SysEvtError>
    break;
 8000eb6:	e026      	b.n	8000f06 <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE -- BLE NVM RAM HAS BEEN UPDATED BY CPU2 \n");
 8000eb8:	481a      	ldr	r0, [pc, #104]	@ (8000f24 <APPE_SysUserEvtRx+0x100>)
 8000eba:	f00b f95d 	bl	800c178 <puts>
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->StartAddress,
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	3302      	adds	r3, #2
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
 8000ec2:	6819      	ldr	r1, [r3, #0]
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->Size);
 8000ec4:	69fb      	ldr	r3, [r7, #28]
 8000ec6:	3302      	adds	r3, #2
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	461a      	mov	r2, r3
 8000ecc:	4816      	ldr	r0, [pc, #88]	@ (8000f28 <APPE_SysUserEvtRx+0x104>)
 8000ece:	f00b f8e3 	bl	800c098 <iprintf>
    break;
 8000ed2:	e018      	b.n	8000f06 <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_START_WRITE:
    APP_DBG_MSG("==>> SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
                ((SHCI_C2_NvmStartWrite_Evt_t*)p_sys_event->payload)->NumberOfWords);
 8000ed4:	69fb      	ldr	r3, [r7, #28]
 8000ed6:	3302      	adds	r3, #2
    APP_DBG_MSG("==>> SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4619      	mov	r1, r3
 8000edc:	4813      	ldr	r0, [pc, #76]	@ (8000f2c <APPE_SysUserEvtRx+0x108>)
 8000ede:	f00b f8db 	bl	800c098 <iprintf>
    break;
 8000ee2:	e010      	b.n	8000f06 <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_END_WRITE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_WRITE\n\r");
 8000ee4:	4812      	ldr	r0, [pc, #72]	@ (8000f30 <APPE_SysUserEvtRx+0x10c>)
 8000ee6:	f00b f8d7 	bl	800c098 <iprintf>
    break;
 8000eea:	e00c      	b.n	8000f06 <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_START_ERASE:
    APP_DBG_MSG("==>>SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
                ((SHCI_C2_NvmStartErase_Evt_t*)p_sys_event->payload)->NumberOfSectors);
 8000eec:	69fb      	ldr	r3, [r7, #28]
 8000eee:	3302      	adds	r3, #2
    APP_DBG_MSG("==>>SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	480f      	ldr	r0, [pc, #60]	@ (8000f34 <APPE_SysUserEvtRx+0x110>)
 8000ef6:	f00b f8cf 	bl	800c098 <iprintf>
    break;
 8000efa:	e004      	b.n	8000f06 <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
 8000efc:	480e      	ldr	r0, [pc, #56]	@ (8000f38 <APPE_SysUserEvtRx+0x114>)
 8000efe:	f00b f8cb 	bl	800c098 <iprintf>
    break;
 8000f02:	e000      	b.n	8000f06 <APPE_SysUserEvtRx+0xe2>

  default:
    break;
 8000f04:	bf00      	nop
  }

  return;
 8000f06:	bf00      	nop
}
 8000f08:	3720      	adds	r7, #32
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	0800d2e8 	.word	0x0800d2e8
 8000f14:	0800d30c 	.word	0x0800d30c
 8000f18:	0800d328 	.word	0x0800d328
 8000f1c:	0800d340 	.word	0x0800d340
 8000f20:	0800d360 	.word	0x0800d360
 8000f24:	0800d384 	.word	0x0800d384
 8000f28:	0800d3d4 	.word	0x0800d3d4
 8000f2c:	0800d3fc 	.word	0x0800d3fc
 8000f30:	0800d438 	.word	0x0800d438
 8000f34:	0800d45c 	.word	0x0800d45c
 8000f38:	0800d498 	.word	0x0800d498

08000f3c <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b084      	sub	sp, #16
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	330b      	adds	r3, #11
 8000f4a:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	3302      	adds	r3, #2
 8000f50:	60bb      	str	r3, [r7, #8]

  APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON %x \n\r",(*p_sys_error_code));
 8000f52:	68bb      	ldr	r3, [r7, #8]
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	4619      	mov	r1, r3
 8000f58:	4808      	ldr	r0, [pc, #32]	@ (8000f7c <APPE_SysEvtError+0x40>)
 8000f5a:	f00b f89d 	bl	800c098 <iprintf>

  if ((*p_sys_error_code) == ERR_BLE_INIT)
 8000f5e:	68bb      	ldr	r3, [r7, #8]
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d103      	bne.n	8000f6e <APPE_SysEvtError+0x32>
  {
    /* Error during BLE stack initialization */
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - ERR_BLE_INIT \n");
 8000f66:	4806      	ldr	r0, [pc, #24]	@ (8000f80 <APPE_SysEvtError+0x44>)
 8000f68:	f00b f906 	bl	800c178 <puts>
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 8000f6c:	e003      	b.n	8000f76 <APPE_SysEvtError+0x3a>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
 8000f6e:	4805      	ldr	r0, [pc, #20]	@ (8000f84 <APPE_SysEvtError+0x48>)
 8000f70:	f00b f902 	bl	800c178 <puts>
  return;
 8000f74:	bf00      	nop
}
 8000f76:	3710      	adds	r7, #16
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	0800d4bc 	.word	0x0800d4bc
 8000f80:	0800d4ec 	.word	0x0800d4ec
 8000f84:	0800d528 	.word	0x0800d528

08000f88 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b08a      	sub	sp, #40	@ 0x28
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 8000f90:	f107 0308 	add.w	r3, r7, #8
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	605a      	str	r2, [r3, #4]
 8000f9a:	609a      	str	r2, [r3, #8]
 8000f9c:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t DeviceID=0;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	330b      	adds	r3, #11
 8000fac:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	3302      	adds	r3, #2
 8000fb2:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 8000fb4:	69bb      	ldr	r3, [r7, #24]
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d128      	bne.n	800100e <APPE_SysEvtReadyProcessing+0x86>
  {
    /**
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");
 8000fbc:	481d      	ldr	r0, [pc, #116]	@ (8001034 <APPE_SysEvtReadyProcessing+0xac>)
 8000fbe:	f00b f8db 	bl	800c178 <puts>

    /* Traces channel initialization */
    APPD_EnableCPU2();
 8000fc2:	f7ff fd93 	bl	8000aec <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 8000fc6:	230f      	movs	r3, #15
 8000fc8:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 8000fca:	237f      	movs	r3, #127	@ 0x7f
 8000fcc:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 8000fce:	f7ff fe25 	bl	8000c1c <LL_DBGMCU_GetRevisionID>
 8000fd2:	6278      	str	r0, [r7, #36]	@ 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);
 8000fd4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000fd6:	4818      	ldr	r0, [pc, #96]	@ (8001038 <APPE_SysEvtReadyProcessing+0xb0>)
 8000fd8:	f00b f85e 	bl	800c098 <iprintf>

    config_param.RevisionID = (uint16_t)RevisionID;
 8000fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fde:	b29b      	uxth	r3, r3
 8000fe0:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 8000fe2:	f7ff fe0d 	bl	8000c00 <LL_DBGMCU_GetDeviceID>
 8000fe6:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
 8000fe8:	6a39      	ldr	r1, [r7, #32]
 8000fea:	4814      	ldr	r0, [pc, #80]	@ (800103c <APPE_SysEvtReadyProcessing+0xb4>)
 8000fec:	f00b f854 	bl	800c098 <iprintf>
    config_param.DeviceID = (uint16_t)DeviceID;
 8000ff0:	6a3b      	ldr	r3, [r7, #32]
 8000ff2:	b29b      	uxth	r3, r3
 8000ff4:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 8000ff6:	f107 0308 	add.w	r3, r7, #8
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f007 fdb0 	bl	8008b60 <SHCI_C2_Config>

    APP_BLE_Init();
 8001000:	f009 f902 	bl	800a208 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8001004:	2100      	movs	r1, #0
 8001006:	2001      	movs	r0, #1
 8001008:	f00a fd3a 	bl	800ba80 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 800100c:	e00e      	b.n	800102c <APPE_SysEvtReadyProcessing+0xa4>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 800100e:	69bb      	ldr	r3, [r7, #24]
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	2b01      	cmp	r3, #1
 8001014:	d106      	bne.n	8001024 <APPE_SysEvtReadyProcessing+0x9c>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - FUS_FW_RUNNING \n\r");
 8001016:	480a      	ldr	r0, [pc, #40]	@ (8001040 <APPE_SysEvtReadyProcessing+0xb8>)
 8001018:	f00b f83e 	bl	800c098 <iprintf>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2200      	movs	r2, #0
 8001020:	701a      	strb	r2, [r3, #0]
  return;
 8001022:	e003      	b.n	800102c <APPE_SysEvtReadyProcessing+0xa4>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
 8001024:	4807      	ldr	r0, [pc, #28]	@ (8001044 <APPE_SysEvtReadyProcessing+0xbc>)
 8001026:	f00b f837 	bl	800c098 <iprintf>
  return;
 800102a:	bf00      	nop
}
 800102c:	3728      	adds	r7, #40	@ 0x28
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	0800d560 	.word	0x0800d560
 8001038:	0800d57c 	.word	0x0800d57c
 800103c:	0800d5a0 	.word	0x0800d5a0
 8001040:	0800d5c0 	.word	0x0800d5c0
 8001044:	0800d5f4 	.word	0x0800d5f4

08001048 <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001050:	f001 fcf4 	bl	8002a3c <HAL_GetTick>
 8001054:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001060:	d00a      	beq.n	8001078 <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 8001062:	f001 fd03 	bl	8002a6c <HAL_GetTickFreq>
 8001066:	4603      	mov	r3, r0
 8001068:	461a      	mov	r2, r3
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	4413      	add	r3, r2
 800106e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001070:	e002      	b.n	8001078 <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8001072:	f7ff fde1 	bl	8000c38 <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM) || defined (__ARMCC_VERSION)
    __force_stores();
  #endif /* __ARMCC_VERSION */

    __WFI();
 8001076:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 8001078:	f001 fce0 	bl	8002a3c <HAL_GetTick>
 800107c:	4602      	mov	r2, r0
 800107e:	68bb      	ldr	r3, [r7, #8]
 8001080:	1ad3      	subs	r3, r2, r3
 8001082:	68fa      	ldr	r2, [r7, #12]
 8001084:	429a      	cmp	r2, r3
 8001086:	d8f4      	bhi.n	8001072 <HAL_Delay+0x2a>
  }
}
 8001088:	bf00      	nop
 800108a:	bf00      	nop
 800108c:	3710      	adds	r7, #16
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}

08001092 <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 8001092:	b580      	push	{r7, lr}
 8001094:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001096:	f04f 30ff 	mov.w	r0, #4294967295
 800109a:	f00a fd21 	bl	800bae0 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 800109e:	bf00      	nop
 80010a0:	bd80      	pop	{r7, pc}

080010a2 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 80010a2:	b480      	push	{r7}
 80010a4:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 80010a6:	bf00      	nop
}
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr

080010b0 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80010ba:	f04f 30ff 	mov.w	r0, #4294967295
 80010be:	f00a fd0f 	bl	800bae0 <UTIL_SEQ_Run>
  return;
 80010c2:	bf00      	nop
}
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}

080010ca <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 80010ca:	b580      	push	{r7, lr}
 80010cc:	b082      	sub	sp, #8
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80010d2:	2100      	movs	r1, #0
 80010d4:	2010      	movs	r0, #16
 80010d6:	f00a fe21 	bl	800bd1c <UTIL_SEQ_SetTask>
  return;
 80010da:	bf00      	nop
}
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}

080010e2 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 80010e2:	b580      	push	{r7, lr}
 80010e4:	b082      	sub	sp, #8
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80010ea:	2002      	movs	r0, #2
 80010ec:	f00a fe82 	bl	800bdf4 <UTIL_SEQ_SetEvt>
  return;
 80010f0:	bf00      	nop
}
 80010f2:	3708      	adds	r7, #8
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}

080010f8 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8001100:	2002      	movs	r0, #2
 8001102:	f00a fe97 	bl	800be34 <UTIL_SEQ_WaitEvt>
  return;
 8001106:	bf00      	nop
}
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}

0800110e <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN FD_WRAP_FUNCTIONS */
void HAL_GPIO_EXTI_Callback( uint16_t GPIO_Pin )
{
 800110e:	b580      	push	{r7, lr}
 8001110:	b082      	sub	sp, #8
 8001112:	af00      	add	r7, sp, #0
 8001114:	4603      	mov	r3, r0
 8001116:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 8001118:	88fb      	ldrh	r3, [r7, #6]
 800111a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800111e:	d003      	beq.n	8001128 <HAL_GPIO_EXTI_Callback+0x1a>
 8001120:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001124:	d003      	beq.n	800112e <HAL_GPIO_EXTI_Callback+0x20>
  case GPIO_PIN_13:
    /* SW button 2 */
    APP_BLE_Key_Button2_Action();
    break; 
  default:
    break;
 8001126:	e005      	b.n	8001134 <HAL_GPIO_EXTI_Callback+0x26>
    APP_BLE_Key_Button1_Action();
 8001128:	f009 fd0c 	bl	800ab44 <APP_BLE_Key_Button1_Action>
    break; 
 800112c:	e002      	b.n	8001134 <HAL_GPIO_EXTI_Callback+0x26>
    APP_BLE_Key_Button2_Action();
 800112e:	f009 fd0f 	bl	800ab50 <APP_BLE_Key_Button2_Action>
    break; 
 8001132:	bf00      	nop
  }
  return;
 8001134:	bf00      	nop
}
 8001136:	3708      	adds	r7, #8
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}

0800113c <LL_EXTI_EnableIT_0_31>:
{
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001144:	4b06      	ldr	r3, [pc, #24]	@ (8001160 <LL_EXTI_EnableIT_0_31+0x24>)
 8001146:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 800114a:	4905      	ldr	r1, [pc, #20]	@ (8001160 <LL_EXTI_EnableIT_0_31+0x24>)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	4313      	orrs	r3, r2
 8001150:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8001154:	bf00      	nop
 8001156:	370c      	adds	r7, #12
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr
 8001160:	58000800 	.word	0x58000800

08001164 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001164:	b480      	push	{r7}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800116c:	4b05      	ldr	r3, [pc, #20]	@ (8001184 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	4904      	ldr	r1, [pc, #16]	@ (8001184 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4313      	orrs	r3, r2
 8001176:	600b      	str	r3, [r1, #0]

}
 8001178:	bf00      	nop
 800117a:	370c      	adds	r7, #12
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr
 8001184:	58000800 	.word	0x58000800

08001188 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800118e:	4b0d      	ldr	r3, [pc, #52]	@ (80011c4 <ReadRtcSsrValue+0x3c>)
 8001190:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001192:	b29b      	uxth	r3, r3
 8001194:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001196:	4b0b      	ldr	r3, [pc, #44]	@ (80011c4 <ReadRtcSsrValue+0x3c>)
 8001198:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800119a:	b29b      	uxth	r3, r3
 800119c:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 800119e:	e005      	b.n	80011ac <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80011a4:	4b07      	ldr	r3, [pc, #28]	@ (80011c4 <ReadRtcSsrValue+0x3c>)
 80011a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011a8:	b29b      	uxth	r3, r3
 80011aa:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 80011ac:	687a      	ldr	r2, [r7, #4]
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	429a      	cmp	r2, r3
 80011b2:	d1f5      	bne.n	80011a0 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 80011b4:	683b      	ldr	r3, [r7, #0]
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	370c      	adds	r7, #12
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	40002800 	.word	0x40002800

080011c8 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b085      	sub	sp, #20
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	4603      	mov	r3, r0
 80011d0:	460a      	mov	r2, r1
 80011d2:	71fb      	strb	r3, [r7, #7]
 80011d4:	4613      	mov	r3, r2
 80011d6:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 80011d8:	79ba      	ldrb	r2, [r7, #6]
 80011da:	491d      	ldr	r1, [pc, #116]	@ (8001250 <LinkTimerAfter+0x88>)
 80011dc:	4613      	mov	r3, r2
 80011de:	005b      	lsls	r3, r3, #1
 80011e0:	4413      	add	r3, r2
 80011e2:	00db      	lsls	r3, r3, #3
 80011e4:	440b      	add	r3, r1
 80011e6:	3315      	adds	r3, #21
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80011ec:	7bfb      	ldrb	r3, [r7, #15]
 80011ee:	2b06      	cmp	r3, #6
 80011f0:	d009      	beq.n	8001206 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 80011f2:	7bfa      	ldrb	r2, [r7, #15]
 80011f4:	4916      	ldr	r1, [pc, #88]	@ (8001250 <LinkTimerAfter+0x88>)
 80011f6:	4613      	mov	r3, r2
 80011f8:	005b      	lsls	r3, r3, #1
 80011fa:	4413      	add	r3, r2
 80011fc:	00db      	lsls	r3, r3, #3
 80011fe:	440b      	add	r3, r1
 8001200:	3314      	adds	r3, #20
 8001202:	79fa      	ldrb	r2, [r7, #7]
 8001204:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8001206:	79fa      	ldrb	r2, [r7, #7]
 8001208:	4911      	ldr	r1, [pc, #68]	@ (8001250 <LinkTimerAfter+0x88>)
 800120a:	4613      	mov	r3, r2
 800120c:	005b      	lsls	r3, r3, #1
 800120e:	4413      	add	r3, r2
 8001210:	00db      	lsls	r3, r3, #3
 8001212:	440b      	add	r3, r1
 8001214:	3315      	adds	r3, #21
 8001216:	7bfa      	ldrb	r2, [r7, #15]
 8001218:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 800121a:	79fa      	ldrb	r2, [r7, #7]
 800121c:	490c      	ldr	r1, [pc, #48]	@ (8001250 <LinkTimerAfter+0x88>)
 800121e:	4613      	mov	r3, r2
 8001220:	005b      	lsls	r3, r3, #1
 8001222:	4413      	add	r3, r2
 8001224:	00db      	lsls	r3, r3, #3
 8001226:	440b      	add	r3, r1
 8001228:	3314      	adds	r3, #20
 800122a:	79ba      	ldrb	r2, [r7, #6]
 800122c:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 800122e:	79ba      	ldrb	r2, [r7, #6]
 8001230:	4907      	ldr	r1, [pc, #28]	@ (8001250 <LinkTimerAfter+0x88>)
 8001232:	4613      	mov	r3, r2
 8001234:	005b      	lsls	r3, r3, #1
 8001236:	4413      	add	r3, r2
 8001238:	00db      	lsls	r3, r3, #3
 800123a:	440b      	add	r3, r1
 800123c:	3315      	adds	r3, #21
 800123e:	79fa      	ldrb	r2, [r7, #7]
 8001240:	701a      	strb	r2, [r3, #0]

  return;
 8001242:	bf00      	nop
}
 8001244:	3714      	adds	r7, #20
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	200000e8 	.word	0x200000e8

08001254 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8001254:	b480      	push	{r7}
 8001256:	b085      	sub	sp, #20
 8001258:	af00      	add	r7, sp, #0
 800125a:	4603      	mov	r3, r0
 800125c:	460a      	mov	r2, r1
 800125e:	71fb      	strb	r3, [r7, #7]
 8001260:	4613      	mov	r3, r2
 8001262:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8001264:	4b29      	ldr	r3, [pc, #164]	@ (800130c <LinkTimerBefore+0xb8>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	b2db      	uxtb	r3, r3
 800126a:	79ba      	ldrb	r2, [r7, #6]
 800126c:	429a      	cmp	r2, r3
 800126e:	d032      	beq.n	80012d6 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8001270:	79ba      	ldrb	r2, [r7, #6]
 8001272:	4927      	ldr	r1, [pc, #156]	@ (8001310 <LinkTimerBefore+0xbc>)
 8001274:	4613      	mov	r3, r2
 8001276:	005b      	lsls	r3, r3, #1
 8001278:	4413      	add	r3, r2
 800127a:	00db      	lsls	r3, r3, #3
 800127c:	440b      	add	r3, r1
 800127e:	3314      	adds	r3, #20
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8001284:	7bfa      	ldrb	r2, [r7, #15]
 8001286:	4922      	ldr	r1, [pc, #136]	@ (8001310 <LinkTimerBefore+0xbc>)
 8001288:	4613      	mov	r3, r2
 800128a:	005b      	lsls	r3, r3, #1
 800128c:	4413      	add	r3, r2
 800128e:	00db      	lsls	r3, r3, #3
 8001290:	440b      	add	r3, r1
 8001292:	3315      	adds	r3, #21
 8001294:	79fa      	ldrb	r2, [r7, #7]
 8001296:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8001298:	79fa      	ldrb	r2, [r7, #7]
 800129a:	491d      	ldr	r1, [pc, #116]	@ (8001310 <LinkTimerBefore+0xbc>)
 800129c:	4613      	mov	r3, r2
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	4413      	add	r3, r2
 80012a2:	00db      	lsls	r3, r3, #3
 80012a4:	440b      	add	r3, r1
 80012a6:	3315      	adds	r3, #21
 80012a8:	79ba      	ldrb	r2, [r7, #6]
 80012aa:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 80012ac:	79fa      	ldrb	r2, [r7, #7]
 80012ae:	4918      	ldr	r1, [pc, #96]	@ (8001310 <LinkTimerBefore+0xbc>)
 80012b0:	4613      	mov	r3, r2
 80012b2:	005b      	lsls	r3, r3, #1
 80012b4:	4413      	add	r3, r2
 80012b6:	00db      	lsls	r3, r3, #3
 80012b8:	440b      	add	r3, r1
 80012ba:	3314      	adds	r3, #20
 80012bc:	7bfa      	ldrb	r2, [r7, #15]
 80012be:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80012c0:	79ba      	ldrb	r2, [r7, #6]
 80012c2:	4913      	ldr	r1, [pc, #76]	@ (8001310 <LinkTimerBefore+0xbc>)
 80012c4:	4613      	mov	r3, r2
 80012c6:	005b      	lsls	r3, r3, #1
 80012c8:	4413      	add	r3, r2
 80012ca:	00db      	lsls	r3, r3, #3
 80012cc:	440b      	add	r3, r1
 80012ce:	3314      	adds	r3, #20
 80012d0:	79fa      	ldrb	r2, [r7, #7]
 80012d2:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 80012d4:	e014      	b.n	8001300 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 80012d6:	79fa      	ldrb	r2, [r7, #7]
 80012d8:	490d      	ldr	r1, [pc, #52]	@ (8001310 <LinkTimerBefore+0xbc>)
 80012da:	4613      	mov	r3, r2
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	4413      	add	r3, r2
 80012e0:	00db      	lsls	r3, r3, #3
 80012e2:	440b      	add	r3, r1
 80012e4:	3315      	adds	r3, #21
 80012e6:	79ba      	ldrb	r2, [r7, #6]
 80012e8:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80012ea:	79ba      	ldrb	r2, [r7, #6]
 80012ec:	4908      	ldr	r1, [pc, #32]	@ (8001310 <LinkTimerBefore+0xbc>)
 80012ee:	4613      	mov	r3, r2
 80012f0:	005b      	lsls	r3, r3, #1
 80012f2:	4413      	add	r3, r2
 80012f4:	00db      	lsls	r3, r3, #3
 80012f6:	440b      	add	r3, r1
 80012f8:	3314      	adds	r3, #20
 80012fa:	79fa      	ldrb	r2, [r7, #7]
 80012fc:	701a      	strb	r2, [r3, #0]
  return;
 80012fe:	bf00      	nop
}
 8001300:	3714      	adds	r7, #20
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	20000178 	.word	0x20000178
 8001310:	200000e8 	.word	0x200000e8

08001314 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0
 800131a:	4603      	mov	r3, r0
 800131c:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800131e:	4b4e      	ldr	r3, [pc, #312]	@ (8001458 <linkTimer+0x144>)
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	b2db      	uxtb	r3, r3
 8001324:	2b06      	cmp	r3, #6
 8001326:	d118      	bne.n	800135a <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001328:	4b4b      	ldr	r3, [pc, #300]	@ (8001458 <linkTimer+0x144>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	b2da      	uxtb	r2, r3
 800132e:	4b4b      	ldr	r3, [pc, #300]	@ (800145c <linkTimer+0x148>)
 8001330:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8001332:	4a49      	ldr	r2, [pc, #292]	@ (8001458 <linkTimer+0x144>)
 8001334:	79fb      	ldrb	r3, [r7, #7]
 8001336:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8001338:	79fa      	ldrb	r2, [r7, #7]
 800133a:	4949      	ldr	r1, [pc, #292]	@ (8001460 <linkTimer+0x14c>)
 800133c:	4613      	mov	r3, r2
 800133e:	005b      	lsls	r3, r3, #1
 8001340:	4413      	add	r3, r2
 8001342:	00db      	lsls	r3, r3, #3
 8001344:	440b      	add	r3, r1
 8001346:	3315      	adds	r3, #21
 8001348:	2206      	movs	r2, #6
 800134a:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 800134c:	4b45      	ldr	r3, [pc, #276]	@ (8001464 <linkTimer+0x150>)
 800134e:	f04f 32ff 	mov.w	r2, #4294967295
 8001352:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8001354:	2300      	movs	r3, #0
 8001356:	81fb      	strh	r3, [r7, #14]
 8001358:	e078      	b.n	800144c <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 800135a:	f000 f909 	bl	8001570 <ReturnTimeElapsed>
 800135e:	4603      	mov	r3, r0
 8001360:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8001362:	79fa      	ldrb	r2, [r7, #7]
 8001364:	493e      	ldr	r1, [pc, #248]	@ (8001460 <linkTimer+0x14c>)
 8001366:	4613      	mov	r3, r2
 8001368:	005b      	lsls	r3, r3, #1
 800136a:	4413      	add	r3, r2
 800136c:	00db      	lsls	r3, r3, #3
 800136e:	440b      	add	r3, r1
 8001370:	3308      	adds	r3, #8
 8001372:	6819      	ldr	r1, [r3, #0]
 8001374:	89fb      	ldrh	r3, [r7, #14]
 8001376:	79fa      	ldrb	r2, [r7, #7]
 8001378:	4419      	add	r1, r3
 800137a:	4839      	ldr	r0, [pc, #228]	@ (8001460 <linkTimer+0x14c>)
 800137c:	4613      	mov	r3, r2
 800137e:	005b      	lsls	r3, r3, #1
 8001380:	4413      	add	r3, r2
 8001382:	00db      	lsls	r3, r3, #3
 8001384:	4403      	add	r3, r0
 8001386:	3308      	adds	r3, #8
 8001388:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 800138a:	79fa      	ldrb	r2, [r7, #7]
 800138c:	4934      	ldr	r1, [pc, #208]	@ (8001460 <linkTimer+0x14c>)
 800138e:	4613      	mov	r3, r2
 8001390:	005b      	lsls	r3, r3, #1
 8001392:	4413      	add	r3, r2
 8001394:	00db      	lsls	r3, r3, #3
 8001396:	440b      	add	r3, r1
 8001398:	3308      	adds	r3, #8
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 800139e:	4b2e      	ldr	r3, [pc, #184]	@ (8001458 <linkTimer+0x144>)
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	4619      	mov	r1, r3
 80013a6:	4a2e      	ldr	r2, [pc, #184]	@ (8001460 <linkTimer+0x14c>)
 80013a8:	460b      	mov	r3, r1
 80013aa:	005b      	lsls	r3, r3, #1
 80013ac:	440b      	add	r3, r1
 80013ae:	00db      	lsls	r3, r3, #3
 80013b0:	4413      	add	r3, r2
 80013b2:	3308      	adds	r3, #8
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	68ba      	ldr	r2, [r7, #8]
 80013b8:	429a      	cmp	r2, r3
 80013ba:	d337      	bcc.n	800142c <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 80013bc:	4b26      	ldr	r3, [pc, #152]	@ (8001458 <linkTimer+0x144>)
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 80013c2:	7b7a      	ldrb	r2, [r7, #13]
 80013c4:	4926      	ldr	r1, [pc, #152]	@ (8001460 <linkTimer+0x14c>)
 80013c6:	4613      	mov	r3, r2
 80013c8:	005b      	lsls	r3, r3, #1
 80013ca:	4413      	add	r3, r2
 80013cc:	00db      	lsls	r3, r3, #3
 80013ce:	440b      	add	r3, r1
 80013d0:	3315      	adds	r3, #21
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 80013d6:	e013      	b.n	8001400 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 80013d8:	7b7a      	ldrb	r2, [r7, #13]
 80013da:	4921      	ldr	r1, [pc, #132]	@ (8001460 <linkTimer+0x14c>)
 80013dc:	4613      	mov	r3, r2
 80013de:	005b      	lsls	r3, r3, #1
 80013e0:	4413      	add	r3, r2
 80013e2:	00db      	lsls	r3, r3, #3
 80013e4:	440b      	add	r3, r1
 80013e6:	3315      	adds	r3, #21
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 80013ec:	7b7a      	ldrb	r2, [r7, #13]
 80013ee:	491c      	ldr	r1, [pc, #112]	@ (8001460 <linkTimer+0x14c>)
 80013f0:	4613      	mov	r3, r2
 80013f2:	005b      	lsls	r3, r3, #1
 80013f4:	4413      	add	r3, r2
 80013f6:	00db      	lsls	r3, r3, #3
 80013f8:	440b      	add	r3, r1
 80013fa:	3315      	adds	r3, #21
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001400:	7b3b      	ldrb	r3, [r7, #12]
 8001402:	2b06      	cmp	r3, #6
 8001404:	d00b      	beq.n	800141e <linkTimer+0x10a>
 8001406:	7b3a      	ldrb	r2, [r7, #12]
 8001408:	4915      	ldr	r1, [pc, #84]	@ (8001460 <linkTimer+0x14c>)
 800140a:	4613      	mov	r3, r2
 800140c:	005b      	lsls	r3, r3, #1
 800140e:	4413      	add	r3, r2
 8001410:	00db      	lsls	r3, r3, #3
 8001412:	440b      	add	r3, r1
 8001414:	3308      	adds	r3, #8
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	68ba      	ldr	r2, [r7, #8]
 800141a:	429a      	cmp	r2, r3
 800141c:	d2dc      	bcs.n	80013d8 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 800141e:	7b7a      	ldrb	r2, [r7, #13]
 8001420:	79fb      	ldrb	r3, [r7, #7]
 8001422:	4611      	mov	r1, r2
 8001424:	4618      	mov	r0, r3
 8001426:	f7ff fecf 	bl	80011c8 <LinkTimerAfter>
 800142a:	e00f      	b.n	800144c <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 800142c:	4b0a      	ldr	r3, [pc, #40]	@ (8001458 <linkTimer+0x144>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	b2da      	uxtb	r2, r3
 8001432:	79fb      	ldrb	r3, [r7, #7]
 8001434:	4611      	mov	r1, r2
 8001436:	4618      	mov	r0, r3
 8001438:	f7ff ff0c 	bl	8001254 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 800143c:	4b06      	ldr	r3, [pc, #24]	@ (8001458 <linkTimer+0x144>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	b2da      	uxtb	r2, r3
 8001442:	4b06      	ldr	r3, [pc, #24]	@ (800145c <linkTimer+0x148>)
 8001444:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8001446:	4a04      	ldr	r2, [pc, #16]	@ (8001458 <linkTimer+0x144>)
 8001448:	79fb      	ldrb	r3, [r7, #7]
 800144a:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 800144c:	89fb      	ldrh	r3, [r7, #14]
}
 800144e:	4618      	mov	r0, r3
 8001450:	3710      	adds	r7, #16
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	20000178 	.word	0x20000178
 800145c:	20000179 	.word	0x20000179
 8001460:	200000e8 	.word	0x200000e8
 8001464:	2000017c 	.word	0x2000017c

08001468 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8001468:	b480      	push	{r7}
 800146a:	b085      	sub	sp, #20
 800146c:	af00      	add	r7, sp, #0
 800146e:	4603      	mov	r3, r0
 8001470:	460a      	mov	r2, r1
 8001472:	71fb      	strb	r3, [r7, #7]
 8001474:	4613      	mov	r3, r2
 8001476:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8001478:	4b39      	ldr	r3, [pc, #228]	@ (8001560 <UnlinkTimer+0xf8>)
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	b2db      	uxtb	r3, r3
 800147e:	79fa      	ldrb	r2, [r7, #7]
 8001480:	429a      	cmp	r2, r3
 8001482:	d111      	bne.n	80014a8 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001484:	4b36      	ldr	r3, [pc, #216]	@ (8001560 <UnlinkTimer+0xf8>)
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	b2da      	uxtb	r2, r3
 800148a:	4b36      	ldr	r3, [pc, #216]	@ (8001564 <UnlinkTimer+0xfc>)
 800148c:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 800148e:	79fa      	ldrb	r2, [r7, #7]
 8001490:	4935      	ldr	r1, [pc, #212]	@ (8001568 <UnlinkTimer+0x100>)
 8001492:	4613      	mov	r3, r2
 8001494:	005b      	lsls	r3, r3, #1
 8001496:	4413      	add	r3, r2
 8001498:	00db      	lsls	r3, r3, #3
 800149a:	440b      	add	r3, r1
 800149c:	3315      	adds	r3, #21
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	b2da      	uxtb	r2, r3
 80014a2:	4b2f      	ldr	r3, [pc, #188]	@ (8001560 <UnlinkTimer+0xf8>)
 80014a4:	701a      	strb	r2, [r3, #0]
 80014a6:	e03e      	b.n	8001526 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 80014a8:	79fa      	ldrb	r2, [r7, #7]
 80014aa:	492f      	ldr	r1, [pc, #188]	@ (8001568 <UnlinkTimer+0x100>)
 80014ac:	4613      	mov	r3, r2
 80014ae:	005b      	lsls	r3, r3, #1
 80014b0:	4413      	add	r3, r2
 80014b2:	00db      	lsls	r3, r3, #3
 80014b4:	440b      	add	r3, r1
 80014b6:	3314      	adds	r3, #20
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 80014bc:	79fa      	ldrb	r2, [r7, #7]
 80014be:	492a      	ldr	r1, [pc, #168]	@ (8001568 <UnlinkTimer+0x100>)
 80014c0:	4613      	mov	r3, r2
 80014c2:	005b      	lsls	r3, r3, #1
 80014c4:	4413      	add	r3, r2
 80014c6:	00db      	lsls	r3, r3, #3
 80014c8:	440b      	add	r3, r1
 80014ca:	3315      	adds	r3, #21
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 80014d0:	79f9      	ldrb	r1, [r7, #7]
 80014d2:	7bfa      	ldrb	r2, [r7, #15]
 80014d4:	4824      	ldr	r0, [pc, #144]	@ (8001568 <UnlinkTimer+0x100>)
 80014d6:	460b      	mov	r3, r1
 80014d8:	005b      	lsls	r3, r3, #1
 80014da:	440b      	add	r3, r1
 80014dc:	00db      	lsls	r3, r3, #3
 80014de:	4403      	add	r3, r0
 80014e0:	3315      	adds	r3, #21
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	b2d8      	uxtb	r0, r3
 80014e6:	4920      	ldr	r1, [pc, #128]	@ (8001568 <UnlinkTimer+0x100>)
 80014e8:	4613      	mov	r3, r2
 80014ea:	005b      	lsls	r3, r3, #1
 80014ec:	4413      	add	r3, r2
 80014ee:	00db      	lsls	r3, r3, #3
 80014f0:	440b      	add	r3, r1
 80014f2:	3315      	adds	r3, #21
 80014f4:	4602      	mov	r2, r0
 80014f6:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80014f8:	7bbb      	ldrb	r3, [r7, #14]
 80014fa:	2b06      	cmp	r3, #6
 80014fc:	d013      	beq.n	8001526 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 80014fe:	79f9      	ldrb	r1, [r7, #7]
 8001500:	7bba      	ldrb	r2, [r7, #14]
 8001502:	4819      	ldr	r0, [pc, #100]	@ (8001568 <UnlinkTimer+0x100>)
 8001504:	460b      	mov	r3, r1
 8001506:	005b      	lsls	r3, r3, #1
 8001508:	440b      	add	r3, r1
 800150a:	00db      	lsls	r3, r3, #3
 800150c:	4403      	add	r3, r0
 800150e:	3314      	adds	r3, #20
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	b2d8      	uxtb	r0, r3
 8001514:	4914      	ldr	r1, [pc, #80]	@ (8001568 <UnlinkTimer+0x100>)
 8001516:	4613      	mov	r3, r2
 8001518:	005b      	lsls	r3, r3, #1
 800151a:	4413      	add	r3, r2
 800151c:	00db      	lsls	r3, r3, #3
 800151e:	440b      	add	r3, r1
 8001520:	3314      	adds	r3, #20
 8001522:	4602      	mov	r2, r0
 8001524:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8001526:	79fa      	ldrb	r2, [r7, #7]
 8001528:	490f      	ldr	r1, [pc, #60]	@ (8001568 <UnlinkTimer+0x100>)
 800152a:	4613      	mov	r3, r2
 800152c:	005b      	lsls	r3, r3, #1
 800152e:	4413      	add	r3, r2
 8001530:	00db      	lsls	r3, r3, #3
 8001532:	440b      	add	r3, r1
 8001534:	330c      	adds	r3, #12
 8001536:	2201      	movs	r2, #1
 8001538:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 800153a:	4b09      	ldr	r3, [pc, #36]	@ (8001560 <UnlinkTimer+0xf8>)
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	b2db      	uxtb	r3, r3
 8001540:	2b06      	cmp	r3, #6
 8001542:	d107      	bne.n	8001554 <UnlinkTimer+0xec>
 8001544:	79bb      	ldrb	r3, [r7, #6]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d104      	bne.n	8001554 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 800154a:	4b08      	ldr	r3, [pc, #32]	@ (800156c <UnlinkTimer+0x104>)
 800154c:	f04f 32ff 	mov.w	r2, #4294967295
 8001550:	601a      	str	r2, [r3, #0]
  }

  return;
 8001552:	bf00      	nop
 8001554:	bf00      	nop
}
 8001556:	3714      	adds	r7, #20
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr
 8001560:	20000178 	.word	0x20000178
 8001564:	20000179 	.word	0x20000179
 8001568:	200000e8 	.word	0x200000e8
 800156c:	2000017c 	.word	0x2000017c

08001570 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8001576:	4b1a      	ldr	r3, [pc, #104]	@ (80015e0 <ReturnTimeElapsed+0x70>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800157e:	d026      	beq.n	80015ce <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8001580:	f7ff fe02 	bl	8001188 <ReadRtcSsrValue>
 8001584:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8001586:	4b16      	ldr	r3, [pc, #88]	@ (80015e0 <ReturnTimeElapsed+0x70>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	687a      	ldr	r2, [r7, #4]
 800158c:	429a      	cmp	r2, r3
 800158e:	d805      	bhi.n	800159c <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8001590:	4b13      	ldr	r3, [pc, #76]	@ (80015e0 <ReturnTimeElapsed+0x70>)
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	1ad3      	subs	r3, r2, r3
 8001598:	607b      	str	r3, [r7, #4]
 800159a:	e00a      	b.n	80015b2 <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 800159c:	4b11      	ldr	r3, [pc, #68]	@ (80015e4 <ReturnTimeElapsed+0x74>)
 800159e:	881b      	ldrh	r3, [r3, #0]
 80015a0:	461a      	mov	r2, r3
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 80015a8:	4b0d      	ldr	r3, [pc, #52]	@ (80015e0 <ReturnTimeElapsed+0x70>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	683a      	ldr	r2, [r7, #0]
 80015ae:	4413      	add	r3, r2
 80015b0:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 80015b2:	4b0d      	ldr	r3, [pc, #52]	@ (80015e8 <ReturnTimeElapsed+0x78>)
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	461a      	mov	r2, r3
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	fb02 f303 	mul.w	r3, r2, r3
 80015be:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 80015c0:	4b0a      	ldr	r3, [pc, #40]	@ (80015ec <ReturnTimeElapsed+0x7c>)
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	461a      	mov	r2, r3
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	40d3      	lsrs	r3, r2
 80015ca:	607b      	str	r3, [r7, #4]
 80015cc:	e001      	b.n	80015d2 <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 80015ce:	2300      	movs	r3, #0
 80015d0:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	b29b      	uxth	r3, r3
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3708      	adds	r7, #8
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	2000017c 	.word	0x2000017c
 80015e4:	20000184 	.word	0x20000184
 80015e8:	20000182 	.word	0x20000182
 80015ec:	20000181 	.word	0x20000181

080015f0 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	4603      	mov	r3, r0
 80015f8:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 80015fa:	88fb      	ldrh	r3, [r7, #6]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d108      	bne.n	8001612 <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001600:	f7ff fdc2 	bl	8001188 <ReadRtcSsrValue>
 8001604:	4603      	mov	r3, r0
 8001606:	4a21      	ldr	r2, [pc, #132]	@ (800168c <RestartWakeupCounter+0x9c>)
 8001608:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 800160a:	2003      	movs	r0, #3
 800160c:	f001 fbb7 	bl	8002d7e <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8001610:	e039      	b.n	8001686 <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8001612:	88fb      	ldrh	r3, [r7, #6]
 8001614:	2b01      	cmp	r3, #1
 8001616:	d803      	bhi.n	8001620 <RestartWakeupCounter+0x30>
 8001618:	4b1d      	ldr	r3, [pc, #116]	@ (8001690 <RestartWakeupCounter+0xa0>)
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	2b01      	cmp	r3, #1
 800161e:	d002      	beq.n	8001626 <RestartWakeupCounter+0x36>
      Value -= 1;
 8001620:	88fb      	ldrh	r3, [r7, #6]
 8001622:	3b01      	subs	r3, #1
 8001624:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001626:	bf00      	nop
 8001628:	4b1a      	ldr	r3, [pc, #104]	@ (8001694 <RestartWakeupCounter+0xa4>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	68db      	ldr	r3, [r3, #12]
 800162e:	f003 0304 	and.w	r3, r3, #4
 8001632:	2b00      	cmp	r3, #0
 8001634:	d0f8      	beq.n	8001628 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001636:	4b17      	ldr	r3, [pc, #92]	@ (8001694 <RestartWakeupCounter+0xa4>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	68db      	ldr	r3, [r3, #12]
 800163c:	b2da      	uxtb	r2, r3
 800163e:	4b15      	ldr	r3, [pc, #84]	@ (8001694 <RestartWakeupCounter+0xa4>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8001646:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001648:	4b13      	ldr	r3, [pc, #76]	@ (8001698 <RestartWakeupCounter+0xa8>)
 800164a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800164e:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001650:	2003      	movs	r0, #3
 8001652:	f001 fba2 	bl	8002d9a <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8001656:	4b11      	ldr	r3, [pc, #68]	@ (800169c <RestartWakeupCounter+0xac>)
 8001658:	695b      	ldr	r3, [r3, #20]
 800165a:	0c1b      	lsrs	r3, r3, #16
 800165c:	041b      	lsls	r3, r3, #16
 800165e:	88fa      	ldrh	r2, [r7, #6]
 8001660:	490e      	ldr	r1, [pc, #56]	@ (800169c <RestartWakeupCounter+0xac>)
 8001662:	4313      	orrs	r3, r2
 8001664:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001666:	f7ff fd8f 	bl	8001188 <ReadRtcSsrValue>
 800166a:	4603      	mov	r3, r0
 800166c:	4a07      	ldr	r2, [pc, #28]	@ (800168c <RestartWakeupCounter+0x9c>)
 800166e:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8001670:	4b08      	ldr	r3, [pc, #32]	@ (8001694 <RestartWakeupCounter+0xa4>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	689a      	ldr	r2, [r3, #8]
 8001676:	4b07      	ldr	r3, [pc, #28]	@ (8001694 <RestartWakeupCounter+0xa4>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800167e:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8001680:	f3af 8000 	nop.w
  return ;
 8001684:	bf00      	nop
}
 8001686:	3708      	adds	r7, #8
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	2000017c 	.word	0x2000017c
 8001690:	20000181 	.word	0x20000181
 8001694:	200001c8 	.word	0x200001c8
 8001698:	58000800 	.word	0x58000800
 800169c:	40002800 	.word	0x40002800

080016a0 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b084      	sub	sp, #16
 80016a4:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80016a6:	4b45      	ldr	r3, [pc, #276]	@ (80017bc <RescheduleTimerList+0x11c>)
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80016b2:	d107      	bne.n	80016c4 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 80016b4:	bf00      	nop
 80016b6:	4b42      	ldr	r3, [pc, #264]	@ (80017c0 <RescheduleTimerList+0x120>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	f003 0304 	and.w	r3, r3, #4
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d1f8      	bne.n	80016b6 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 80016c4:	4b3e      	ldr	r3, [pc, #248]	@ (80017c0 <RescheduleTimerList+0x120>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	689a      	ldr	r2, [r3, #8]
 80016ca:	4b3d      	ldr	r3, [pc, #244]	@ (80017c0 <RescheduleTimerList+0x120>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80016d2:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 80016d4:	4b3b      	ldr	r3, [pc, #236]	@ (80017c4 <RescheduleTimerList+0x124>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 80016da:	7bfa      	ldrb	r2, [r7, #15]
 80016dc:	493a      	ldr	r1, [pc, #232]	@ (80017c8 <RescheduleTimerList+0x128>)
 80016de:	4613      	mov	r3, r2
 80016e0:	005b      	lsls	r3, r3, #1
 80016e2:	4413      	add	r3, r2
 80016e4:	00db      	lsls	r3, r3, #3
 80016e6:	440b      	add	r3, r1
 80016e8:	3308      	adds	r3, #8
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 80016ee:	f7ff ff3f 	bl	8001570 <ReturnTimeElapsed>
 80016f2:	4603      	mov	r3, r0
 80016f4:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 80016f6:	88fb      	ldrh	r3, [r7, #6]
 80016f8:	68ba      	ldr	r2, [r7, #8]
 80016fa:	429a      	cmp	r2, r3
 80016fc:	d205      	bcs.n	800170a <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 80016fe:	2300      	movs	r3, #0
 8001700:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001702:	4b32      	ldr	r3, [pc, #200]	@ (80017cc <RescheduleTimerList+0x12c>)
 8001704:	2201      	movs	r2, #1
 8001706:	701a      	strb	r2, [r3, #0]
 8001708:	e04d      	b.n	80017a6 <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 800170a:	88fb      	ldrh	r3, [r7, #6]
 800170c:	4a30      	ldr	r2, [pc, #192]	@ (80017d0 <RescheduleTimerList+0x130>)
 800170e:	8812      	ldrh	r2, [r2, #0]
 8001710:	b292      	uxth	r2, r2
 8001712:	4413      	add	r3, r2
 8001714:	461a      	mov	r2, r3
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	4293      	cmp	r3, r2
 800171a:	d906      	bls.n	800172a <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 800171c:	4b2c      	ldr	r3, [pc, #176]	@ (80017d0 <RescheduleTimerList+0x130>)
 800171e:	881b      	ldrh	r3, [r3, #0]
 8001720:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8001722:	4b2a      	ldr	r3, [pc, #168]	@ (80017cc <RescheduleTimerList+0x12c>)
 8001724:	2200      	movs	r2, #0
 8001726:	701a      	strb	r2, [r3, #0]
 8001728:	e03d      	b.n	80017a6 <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 800172a:	68bb      	ldr	r3, [r7, #8]
 800172c:	b29a      	uxth	r2, r3
 800172e:	88fb      	ldrh	r3, [r7, #6]
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001734:	4b25      	ldr	r3, [pc, #148]	@ (80017cc <RescheduleTimerList+0x12c>)
 8001736:	2201      	movs	r2, #1
 8001738:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800173a:	e034      	b.n	80017a6 <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 800173c:	7bfa      	ldrb	r2, [r7, #15]
 800173e:	4922      	ldr	r1, [pc, #136]	@ (80017c8 <RescheduleTimerList+0x128>)
 8001740:	4613      	mov	r3, r2
 8001742:	005b      	lsls	r3, r3, #1
 8001744:	4413      	add	r3, r2
 8001746:	00db      	lsls	r3, r3, #3
 8001748:	440b      	add	r3, r1
 800174a:	3308      	adds	r3, #8
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	88fb      	ldrh	r3, [r7, #6]
 8001750:	429a      	cmp	r2, r3
 8001752:	d20a      	bcs.n	800176a <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8001754:	7bfa      	ldrb	r2, [r7, #15]
 8001756:	491c      	ldr	r1, [pc, #112]	@ (80017c8 <RescheduleTimerList+0x128>)
 8001758:	4613      	mov	r3, r2
 800175a:	005b      	lsls	r3, r3, #1
 800175c:	4413      	add	r3, r2
 800175e:	00db      	lsls	r3, r3, #3
 8001760:	440b      	add	r3, r1
 8001762:	3308      	adds	r3, #8
 8001764:	2200      	movs	r2, #0
 8001766:	601a      	str	r2, [r3, #0]
 8001768:	e013      	b.n	8001792 <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 800176a:	7bfa      	ldrb	r2, [r7, #15]
 800176c:	4916      	ldr	r1, [pc, #88]	@ (80017c8 <RescheduleTimerList+0x128>)
 800176e:	4613      	mov	r3, r2
 8001770:	005b      	lsls	r3, r3, #1
 8001772:	4413      	add	r3, r2
 8001774:	00db      	lsls	r3, r3, #3
 8001776:	440b      	add	r3, r1
 8001778:	3308      	adds	r3, #8
 800177a:	6819      	ldr	r1, [r3, #0]
 800177c:	88fb      	ldrh	r3, [r7, #6]
 800177e:	7bfa      	ldrb	r2, [r7, #15]
 8001780:	1ac9      	subs	r1, r1, r3
 8001782:	4811      	ldr	r0, [pc, #68]	@ (80017c8 <RescheduleTimerList+0x128>)
 8001784:	4613      	mov	r3, r2
 8001786:	005b      	lsls	r3, r3, #1
 8001788:	4413      	add	r3, r2
 800178a:	00db      	lsls	r3, r3, #3
 800178c:	4403      	add	r3, r0
 800178e:	3308      	adds	r3, #8
 8001790:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8001792:	7bfa      	ldrb	r2, [r7, #15]
 8001794:	490c      	ldr	r1, [pc, #48]	@ (80017c8 <RescheduleTimerList+0x128>)
 8001796:	4613      	mov	r3, r2
 8001798:	005b      	lsls	r3, r3, #1
 800179a:	4413      	add	r3, r2
 800179c:	00db      	lsls	r3, r3, #3
 800179e:	440b      	add	r3, r1
 80017a0:	3315      	adds	r3, #21
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80017a6:	7bfb      	ldrb	r3, [r7, #15]
 80017a8:	2b06      	cmp	r3, #6
 80017aa:	d1c7      	bne.n	800173c <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 80017ac:	89bb      	ldrh	r3, [r7, #12]
 80017ae:	4618      	mov	r0, r3
 80017b0:	f7ff ff1e 	bl	80015f0 <RestartWakeupCounter>

  return ;
 80017b4:	bf00      	nop
}
 80017b6:	3710      	adds	r7, #16
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	40002800 	.word	0x40002800
 80017c0:	200001c8 	.word	0x200001c8
 80017c4:	20000178 	.word	0x20000178
 80017c8:	200000e8 	.word	0x200000e8
 80017cc:	20000180 	.word	0x20000180
 80017d0:	20000186 	.word	0x20000186

080017d4 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b08a      	sub	sp, #40	@ 0x28
 80017d8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80017da:	f3ef 8310 	mrs	r3, PRIMASK
 80017de:	617b      	str	r3, [r7, #20]
  return(result);
 80017e0:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80017e2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 80017e4:	b672      	cpsid	i
}
 80017e6:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80017e8:	4b59      	ldr	r3, [pc, #356]	@ (8001950 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	22ca      	movs	r2, #202	@ 0xca
 80017ee:	625a      	str	r2, [r3, #36]	@ 0x24
 80017f0:	4b57      	ldr	r3, [pc, #348]	@ (8001950 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	2253      	movs	r2, #83	@ 0x53
 80017f6:	625a      	str	r2, [r3, #36]	@ 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 80017f8:	4b55      	ldr	r3, [pc, #340]	@ (8001950 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	689a      	ldr	r2, [r3, #8]
 80017fe:	4b54      	ldr	r3, [pc, #336]	@ (8001950 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001806:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8001808:	4b52      	ldr	r3, [pc, #328]	@ (8001954 <HW_TS_RTC_Wakeup_Handler+0x180>)
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8001810:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001814:	4950      	ldr	r1, [pc, #320]	@ (8001958 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001816:	4613      	mov	r3, r2
 8001818:	005b      	lsls	r3, r3, #1
 800181a:	4413      	add	r3, r2
 800181c:	00db      	lsls	r3, r3, #3
 800181e:	440b      	add	r3, r1
 8001820:	330c      	adds	r3, #12
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	b2db      	uxtb	r3, r3
 8001826:	2b02      	cmp	r3, #2
 8001828:	d16e      	bne.n	8001908 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 800182a:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800182e:	494a      	ldr	r1, [pc, #296]	@ (8001958 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001830:	4613      	mov	r3, r2
 8001832:	005b      	lsls	r3, r3, #1
 8001834:	4413      	add	r3, r2
 8001836:	00db      	lsls	r3, r3, #3
 8001838:	440b      	add	r3, r1
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 800183e:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001842:	4945      	ldr	r1, [pc, #276]	@ (8001958 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001844:	4613      	mov	r3, r2
 8001846:	005b      	lsls	r3, r3, #1
 8001848:	4413      	add	r3, r2
 800184a:	00db      	lsls	r3, r3, #3
 800184c:	440b      	add	r3, r1
 800184e:	3310      	adds	r3, #16
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8001854:	4b41      	ldr	r3, [pc, #260]	@ (800195c <HW_TS_RTC_Wakeup_Handler+0x188>)
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	b2db      	uxtb	r3, r3
 800185a:	2b00      	cmp	r3, #0
 800185c:	d04c      	beq.n	80018f8 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 800185e:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001862:	493d      	ldr	r1, [pc, #244]	@ (8001958 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001864:	4613      	mov	r3, r2
 8001866:	005b      	lsls	r3, r3, #1
 8001868:	4413      	add	r3, r2
 800186a:	00db      	lsls	r3, r3, #3
 800186c:	440b      	add	r3, r1
 800186e:	330d      	adds	r3, #13
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	b2db      	uxtb	r3, r3
 8001874:	2b01      	cmp	r3, #1
 8001876:	d124      	bne.n	80018c2 <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8001878:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800187c:	2101      	movs	r1, #1
 800187e:	4618      	mov	r0, r3
 8001880:	f7ff fdf2 	bl	8001468 <UnlinkTimer>
 8001884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001886:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	f383 8810 	msr	PRIMASK, r3
}
 800188e:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8001890:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001894:	4930      	ldr	r1, [pc, #192]	@ (8001958 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001896:	4613      	mov	r3, r2
 8001898:	005b      	lsls	r3, r3, #1
 800189a:	4413      	add	r3, r2
 800189c:	00db      	lsls	r3, r3, #3
 800189e:	440b      	add	r3, r1
 80018a0:	3304      	adds	r3, #4
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80018a8:	4611      	mov	r1, r2
 80018aa:	4618      	mov	r0, r3
 80018ac:	f000 fa32 	bl	8001d14 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80018b0:	4b27      	ldr	r3, [pc, #156]	@ (8001950 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	22ca      	movs	r2, #202	@ 0xca
 80018b6:	625a      	str	r2, [r3, #36]	@ 0x24
 80018b8:	4b25      	ldr	r3, [pc, #148]	@ (8001950 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	2253      	movs	r2, #83	@ 0x53
 80018be:	625a      	str	r2, [r3, #36]	@ 0x24
 80018c0:	e012      	b.n	80018e8 <HW_TS_RTC_Wakeup_Handler+0x114>
 80018c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018c4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	f383 8810 	msr	PRIMASK, r3
}
 80018cc:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 80018ce:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80018d2:	4618      	mov	r0, r3
 80018d4:	f000 f99a 	bl	8001c0c <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80018d8:	4b1d      	ldr	r3, [pc, #116]	@ (8001950 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	22ca      	movs	r2, #202	@ 0xca
 80018de:	625a      	str	r2, [r3, #36]	@ 0x24
 80018e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001950 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	2253      	movs	r2, #83	@ 0x53
 80018e6:	625a      	str	r2, [r3, #36]	@ 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 80018e8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80018ec:	69fa      	ldr	r2, [r7, #28]
 80018ee:	4619      	mov	r1, r3
 80018f0:	69b8      	ldr	r0, [r7, #24]
 80018f2:	f000 fa95 	bl	8001e20 <HW_TS_RTC_Int_AppNot>
 80018f6:	e022      	b.n	800193e <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 80018f8:	f7ff fed2 	bl	80016a0 <RescheduleTimerList>
 80018fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018fe:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	f383 8810 	msr	PRIMASK, r3
}
 8001906:	e01a      	b.n	800193e <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001908:	bf00      	nop
 800190a:	4b11      	ldr	r3, [pc, #68]	@ (8001950 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	f003 0304 	and.w	r3, r3, #4
 8001914:	2b00      	cmp	r3, #0
 8001916:	d0f8      	beq.n	800190a <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001918:	4b0d      	ldr	r3, [pc, #52]	@ (8001950 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	68db      	ldr	r3, [r3, #12]
 800191e:	b2da      	uxtb	r2, r3
 8001920:	4b0b      	ldr	r3, [pc, #44]	@ (8001950 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8001928:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 800192a:	4b0d      	ldr	r3, [pc, #52]	@ (8001960 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 800192c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001930:	60da      	str	r2, [r3, #12]
 8001932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001934:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	f383 8810 	msr	PRIMASK, r3
}
 800193c:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800193e:	4b04      	ldr	r3, [pc, #16]	@ (8001950 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	22ff      	movs	r2, #255	@ 0xff
 8001944:	625a      	str	r2, [r3, #36]	@ 0x24

  return;
 8001946:	bf00      	nop
}
 8001948:	3728      	adds	r7, #40	@ 0x28
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	200001c8 	.word	0x200001c8
 8001954:	20000178 	.word	0x20000178
 8001958:	200000e8 	.word	0x200000e8
 800195c:	20000180 	.word	0x20000180
 8001960:	58000800 	.word	0x58000800

08001964 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b088      	sub	sp, #32
 8001968:	af00      	add	r7, sp, #0
 800196a:	4603      	mov	r3, r0
 800196c:	6039      	str	r1, [r7, #0]
 800196e:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001970:	4b5e      	ldr	r3, [pc, #376]	@ (8001aec <HW_TS_Init+0x188>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	22ca      	movs	r2, #202	@ 0xca
 8001976:	625a      	str	r2, [r3, #36]	@ 0x24
 8001978:	4b5c      	ldr	r3, [pc, #368]	@ (8001aec <HW_TS_Init+0x188>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	2253      	movs	r2, #83	@ 0x53
 800197e:	625a      	str	r2, [r3, #36]	@ 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001980:	4b5b      	ldr	r3, [pc, #364]	@ (8001af0 <HW_TS_Init+0x18c>)
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	4a5a      	ldr	r2, [pc, #360]	@ (8001af0 <HW_TS_Init+0x18c>)
 8001986:	f043 0320 	orr.w	r3, r3, #32
 800198a:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 800198c:	4b58      	ldr	r3, [pc, #352]	@ (8001af0 <HW_TS_Init+0x18c>)
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	b2db      	uxtb	r3, r3
 8001992:	f003 0307 	and.w	r3, r3, #7
 8001996:	b2db      	uxtb	r3, r3
 8001998:	f1c3 0304 	rsb	r3, r3, #4
 800199c:	b2da      	uxtb	r2, r3
 800199e:	4b55      	ldr	r3, [pc, #340]	@ (8001af4 <HW_TS_Init+0x190>)
 80019a0:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 80019a2:	4b53      	ldr	r3, [pc, #332]	@ (8001af0 <HW_TS_Init+0x18c>)
 80019a4:	691b      	ldr	r3, [r3, #16]
 80019a6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80019aa:	f44f 02fe 	mov.w	r2, #8323072	@ 0x7f0000
 80019ae:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019b0:	693a      	ldr	r2, [r7, #16]
 80019b2:	fa92 f2a2 	rbit	r2, r2
 80019b6:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80019b8:	68fa      	ldr	r2, [r7, #12]
 80019ba:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80019bc:	697a      	ldr	r2, [r7, #20]
 80019be:	2a00      	cmp	r2, #0
 80019c0:	d101      	bne.n	80019c6 <HW_TS_Init+0x62>
  {
    return 32U;
 80019c2:	2220      	movs	r2, #32
 80019c4:	e003      	b.n	80019ce <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 80019c6:	697a      	ldr	r2, [r7, #20]
 80019c8:	fab2 f282 	clz	r2, r2
 80019cc:	b2d2      	uxtb	r2, r2
 80019ce:	40d3      	lsrs	r3, r2
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	3301      	adds	r3, #1
 80019d4:	b2da      	uxtb	r2, r3
 80019d6:	4b48      	ldr	r3, [pc, #288]	@ (8001af8 <HW_TS_Init+0x194>)
 80019d8:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 80019da:	4b45      	ldr	r3, [pc, #276]	@ (8001af0 <HW_TS_Init+0x18c>)
 80019dc:	691b      	ldr	r3, [r3, #16]
 80019de:	b29b      	uxth	r3, r3
 80019e0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80019e4:	b29b      	uxth	r3, r3
 80019e6:	3301      	adds	r3, #1
 80019e8:	b29a      	uxth	r2, r3
 80019ea:	4b44      	ldr	r3, [pc, #272]	@ (8001afc <HW_TS_Init+0x198>)
 80019ec:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 80019ee:	4b43      	ldr	r3, [pc, #268]	@ (8001afc <HW_TS_Init+0x198>)
 80019f0:	881b      	ldrh	r3, [r3, #0]
 80019f2:	3b01      	subs	r3, #1
 80019f4:	4a40      	ldr	r2, [pc, #256]	@ (8001af8 <HW_TS_Init+0x194>)
 80019f6:	7812      	ldrb	r2, [r2, #0]
 80019f8:	fb02 f303 	mul.w	r3, r2, r3
 80019fc:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001a00:	4a3c      	ldr	r2, [pc, #240]	@ (8001af4 <HW_TS_Init+0x190>)
 8001a02:	7812      	ldrb	r2, [r2, #0]
 8001a04:	40d3      	lsrs	r3, r2
 8001a06:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8001a08:	69bb      	ldr	r3, [r7, #24]
 8001a0a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d904      	bls.n	8001a1c <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8001a12:	4b3b      	ldr	r3, [pc, #236]	@ (8001b00 <HW_TS_Init+0x19c>)
 8001a14:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001a18:	801a      	strh	r2, [r3, #0]
 8001a1a:	e003      	b.n	8001a24 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8001a1c:	69bb      	ldr	r3, [r7, #24]
 8001a1e:	b29a      	uxth	r2, r3
 8001a20:	4b37      	ldr	r3, [pc, #220]	@ (8001b00 <HW_TS_Init+0x19c>)
 8001a22:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001a24:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8001a28:	f7ff fb9c 	bl	8001164 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001a2c:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8001a30:	f7ff fb84 	bl	800113c <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8001a34:	79fb      	ldrb	r3, [r7, #7]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d13d      	bne.n	8001ab6 <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001a3a:	4b32      	ldr	r3, [pc, #200]	@ (8001b04 <HW_TS_Init+0x1a0>)
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001a40:	4b31      	ldr	r3, [pc, #196]	@ (8001b08 <HW_TS_Init+0x1a4>)
 8001a42:	f04f 32ff 	mov.w	r2, #4294967295
 8001a46:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001a48:	2300      	movs	r3, #0
 8001a4a:	77fb      	strb	r3, [r7, #31]
 8001a4c:	e00c      	b.n	8001a68 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8001a4e:	7ffa      	ldrb	r2, [r7, #31]
 8001a50:	492e      	ldr	r1, [pc, #184]	@ (8001b0c <HW_TS_Init+0x1a8>)
 8001a52:	4613      	mov	r3, r2
 8001a54:	005b      	lsls	r3, r3, #1
 8001a56:	4413      	add	r3, r2
 8001a58:	00db      	lsls	r3, r3, #3
 8001a5a:	440b      	add	r3, r1
 8001a5c:	330c      	adds	r3, #12
 8001a5e:	2200      	movs	r2, #0
 8001a60:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001a62:	7ffb      	ldrb	r3, [r7, #31]
 8001a64:	3301      	adds	r3, #1
 8001a66:	77fb      	strb	r3, [r7, #31]
 8001a68:	7ffb      	ldrb	r3, [r7, #31]
 8001a6a:	2b05      	cmp	r3, #5
 8001a6c:	d9ef      	bls.n	8001a4e <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8001a6e:	4b28      	ldr	r3, [pc, #160]	@ (8001b10 <HW_TS_Init+0x1ac>)
 8001a70:	2206      	movs	r2, #6
 8001a72:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8001a74:	4b1d      	ldr	r3, [pc, #116]	@ (8001aec <HW_TS_Init+0x188>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	689a      	ldr	r2, [r3, #8]
 8001a7a:	4b1c      	ldr	r3, [pc, #112]	@ (8001aec <HW_TS_Init+0x188>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001a82:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8001a84:	4b19      	ldr	r3, [pc, #100]	@ (8001aec <HW_TS_Init+0x188>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	68db      	ldr	r3, [r3, #12]
 8001a8a:	b2da      	uxtb	r2, r3
 8001a8c:	4b17      	ldr	r3, [pc, #92]	@ (8001aec <HW_TS_Init+0x188>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8001a94:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8001a96:	4b1f      	ldr	r3, [pc, #124]	@ (8001b14 <HW_TS_Init+0x1b0>)
 8001a98:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001a9c:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8001a9e:	2003      	movs	r0, #3
 8001aa0:	f001 f97b 	bl	8002d9a <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8001aa4:	4b11      	ldr	r3, [pc, #68]	@ (8001aec <HW_TS_Init+0x188>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	689a      	ldr	r2, [r3, #8]
 8001aaa:	4b10      	ldr	r3, [pc, #64]	@ (8001aec <HW_TS_Init+0x188>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001ab2:	609a      	str	r2, [r3, #8]
 8001ab4:	e009      	b.n	8001aca <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 8001ab6:	4b0d      	ldr	r3, [pc, #52]	@ (8001aec <HW_TS_Init+0x188>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d002      	beq.n	8001aca <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001ac4:	2003      	movs	r0, #3
 8001ac6:	f001 f95a 	bl	8002d7e <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001aca:	4b08      	ldr	r3, [pc, #32]	@ (8001aec <HW_TS_Init+0x188>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	22ff      	movs	r2, #255	@ 0xff
 8001ad0:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	2103      	movs	r1, #3
 8001ad6:	2003      	movs	r0, #3
 8001ad8:	f001 f90f 	bl	8002cfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001adc:	2003      	movs	r0, #3
 8001ade:	f001 f926 	bl	8002d2e <HAL_NVIC_EnableIRQ>

  return;
 8001ae2:	bf00      	nop
}
 8001ae4:	3720      	adds	r7, #32
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	200001c8 	.word	0x200001c8
 8001af0:	40002800 	.word	0x40002800
 8001af4:	20000181 	.word	0x20000181
 8001af8:	20000182 	.word	0x20000182
 8001afc:	20000184 	.word	0x20000184
 8001b00:	20000186 	.word	0x20000186
 8001b04:	20000180 	.word	0x20000180
 8001b08:	2000017c 	.word	0x2000017c
 8001b0c:	200000e8 	.word	0x200000e8
 8001b10:	20000178 	.word	0x20000178
 8001b14:	58000800 	.word	0x58000800

08001b18 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b08b      	sub	sp, #44	@ 0x2c
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	60f8      	str	r0, [r7, #12]
 8001b20:	60b9      	str	r1, [r7, #8]
 8001b22:	603b      	str	r3, [r7, #0]
 8001b24:	4613      	mov	r3, r2
 8001b26:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001b2e:	f3ef 8310 	mrs	r3, PRIMASK
 8001b32:	61fb      	str	r3, [r7, #28]
  return(result);
 8001b34:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001b36:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8001b38:	b672      	cpsid	i
}
 8001b3a:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8001b3c:	e004      	b.n	8001b48 <HW_TS_Create+0x30>
  {
    loop++;
 8001b3e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001b42:	3301      	adds	r3, #1
 8001b44:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8001b48:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001b4c:	2b05      	cmp	r3, #5
 8001b4e:	d80c      	bhi.n	8001b6a <HW_TS_Create+0x52>
 8001b50:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8001b54:	492c      	ldr	r1, [pc, #176]	@ (8001c08 <HW_TS_Create+0xf0>)
 8001b56:	4613      	mov	r3, r2
 8001b58:	005b      	lsls	r3, r3, #1
 8001b5a:	4413      	add	r3, r2
 8001b5c:	00db      	lsls	r3, r3, #3
 8001b5e:	440b      	add	r3, r1
 8001b60:	330c      	adds	r3, #12
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d1e9      	bne.n	8001b3e <HW_TS_Create+0x26>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001b6a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001b6e:	2b06      	cmp	r3, #6
 8001b70:	d038      	beq.n	8001be4 <HW_TS_Create+0xcc>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 8001b72:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8001b76:	4924      	ldr	r1, [pc, #144]	@ (8001c08 <HW_TS_Create+0xf0>)
 8001b78:	4613      	mov	r3, r2
 8001b7a:	005b      	lsls	r3, r3, #1
 8001b7c:	4413      	add	r3, r2
 8001b7e:	00db      	lsls	r3, r3, #3
 8001b80:	440b      	add	r3, r1
 8001b82:	330c      	adds	r3, #12
 8001b84:	2201      	movs	r2, #1
 8001b86:	701a      	strb	r2, [r3, #0]
 8001b88:	6a3b      	ldr	r3, [r7, #32]
 8001b8a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001b8c:	69bb      	ldr	r3, [r7, #24]
 8001b8e:	f383 8810 	msr	PRIMASK, r3
}
 8001b92:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 8001b94:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8001b98:	491b      	ldr	r1, [pc, #108]	@ (8001c08 <HW_TS_Create+0xf0>)
 8001b9a:	4613      	mov	r3, r2
 8001b9c:	005b      	lsls	r3, r3, #1
 8001b9e:	4413      	add	r3, r2
 8001ba0:	00db      	lsls	r3, r3, #3
 8001ba2:	440b      	add	r3, r1
 8001ba4:	3310      	adds	r3, #16
 8001ba6:	68fa      	ldr	r2, [r7, #12]
 8001ba8:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 8001baa:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8001bae:	4916      	ldr	r1, [pc, #88]	@ (8001c08 <HW_TS_Create+0xf0>)
 8001bb0:	4613      	mov	r3, r2
 8001bb2:	005b      	lsls	r3, r3, #1
 8001bb4:	4413      	add	r3, r2
 8001bb6:	00db      	lsls	r3, r3, #3
 8001bb8:	440b      	add	r3, r1
 8001bba:	330d      	adds	r3, #13
 8001bbc:	79fa      	ldrb	r2, [r7, #7]
 8001bbe:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 8001bc0:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8001bc4:	4910      	ldr	r1, [pc, #64]	@ (8001c08 <HW_TS_Create+0xf0>)
 8001bc6:	4613      	mov	r3, r2
 8001bc8:	005b      	lsls	r3, r3, #1
 8001bca:	4413      	add	r3, r2
 8001bcc:	00db      	lsls	r3, r3, #3
 8001bce:	440b      	add	r3, r1
 8001bd0:	683a      	ldr	r2, [r7, #0]
 8001bd2:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8001bda:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001be2:	e008      	b.n	8001bf6 <HW_TS_Create+0xde>
 8001be4:	6a3b      	ldr	r3, [r7, #32]
 8001be6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	f383 8810 	msr	PRIMASK, r3
}
 8001bee:	bf00      	nop
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  return(localreturnstatus);
 8001bf6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	372c      	adds	r7, #44	@ 0x2c
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	200000e8 	.word	0x200000e8

08001c0c <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b086      	sub	sp, #24
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	4603      	mov	r3, r0
 8001c14:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001c16:	f3ef 8310 	mrs	r3, PRIMASK
 8001c1a:	60fb      	str	r3, [r7, #12]
  return(result);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001c1e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001c20:	b672      	cpsid	i
}
 8001c22:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001c24:	2003      	movs	r0, #3
 8001c26:	f001 f890 	bl	8002d4a <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001c2a:	4b34      	ldr	r3, [pc, #208]	@ (8001cfc <HW_TS_Stop+0xf0>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	22ca      	movs	r2, #202	@ 0xca
 8001c30:	625a      	str	r2, [r3, #36]	@ 0x24
 8001c32:	4b32      	ldr	r3, [pc, #200]	@ (8001cfc <HW_TS_Stop+0xf0>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	2253      	movs	r2, #83	@ 0x53
 8001c38:	625a      	str	r2, [r3, #36]	@ 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001c3a:	79fa      	ldrb	r2, [r7, #7]
 8001c3c:	4930      	ldr	r1, [pc, #192]	@ (8001d00 <HW_TS_Stop+0xf4>)
 8001c3e:	4613      	mov	r3, r2
 8001c40:	005b      	lsls	r3, r3, #1
 8001c42:	4413      	add	r3, r2
 8001c44:	00db      	lsls	r3, r3, #3
 8001c46:	440b      	add	r3, r1
 8001c48:	330c      	adds	r3, #12
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	2b02      	cmp	r3, #2
 8001c50:	d142      	bne.n	8001cd8 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8001c52:	79fb      	ldrb	r3, [r7, #7]
 8001c54:	2100      	movs	r1, #0
 8001c56:	4618      	mov	r0, r3
 8001c58:	f7ff fc06 	bl	8001468 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8001c5c:	4b29      	ldr	r3, [pc, #164]	@ (8001d04 <HW_TS_Stop+0xf8>)
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001c62:	7cfb      	ldrb	r3, [r7, #19]
 8001c64:	2b06      	cmp	r3, #6
 8001c66:	d12f      	bne.n	8001cc8 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001c68:	4b27      	ldr	r3, [pc, #156]	@ (8001d08 <HW_TS_Stop+0xfc>)
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c70:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c74:	d107      	bne.n	8001c86 <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8001c76:	bf00      	nop
 8001c78:	4b20      	ldr	r3, [pc, #128]	@ (8001cfc <HW_TS_Stop+0xf0>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	68db      	ldr	r3, [r3, #12]
 8001c7e:	f003 0304 	and.w	r3, r3, #4
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d1f8      	bne.n	8001c78 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8001c86:	4b1d      	ldr	r3, [pc, #116]	@ (8001cfc <HW_TS_Stop+0xf0>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	689a      	ldr	r2, [r3, #8]
 8001c8c:	4b1b      	ldr	r3, [pc, #108]	@ (8001cfc <HW_TS_Stop+0xf0>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001c94:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001c96:	bf00      	nop
 8001c98:	4b18      	ldr	r3, [pc, #96]	@ (8001cfc <HW_TS_Stop+0xf0>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	68db      	ldr	r3, [r3, #12]
 8001c9e:	f003 0304 	and.w	r3, r3, #4
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d0f8      	beq.n	8001c98 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001ca6:	4b15      	ldr	r3, [pc, #84]	@ (8001cfc <HW_TS_Stop+0xf0>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	b2da      	uxtb	r2, r3
 8001cae:	4b13      	ldr	r3, [pc, #76]	@ (8001cfc <HW_TS_Stop+0xf0>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8001cb6:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001cb8:	4b14      	ldr	r3, [pc, #80]	@ (8001d0c <HW_TS_Stop+0x100>)
 8001cba:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001cbe:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001cc0:	2003      	movs	r0, #3
 8001cc2:	f001 f86a 	bl	8002d9a <HAL_NVIC_ClearPendingIRQ>
 8001cc6:	e007      	b.n	8001cd8 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001cc8:	4b11      	ldr	r3, [pc, #68]	@ (8001d10 <HW_TS_Stop+0x104>)
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	7cfa      	ldrb	r2, [r7, #19]
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d001      	beq.n	8001cd8 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 8001cd4:	f7ff fce4 	bl	80016a0 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001cd8:	4b08      	ldr	r3, [pc, #32]	@ (8001cfc <HW_TS_Stop+0xf0>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	22ff      	movs	r2, #255	@ 0xff
 8001cde:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001ce0:	2003      	movs	r0, #3
 8001ce2:	f001 f824 	bl	8002d2e <HAL_NVIC_EnableIRQ>
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	f383 8810 	msr	PRIMASK, r3
}
 8001cf0:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001cf2:	bf00      	nop
}
 8001cf4:	3718      	adds	r7, #24
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	200001c8 	.word	0x200001c8
 8001d00:	200000e8 	.word	0x200000e8
 8001d04:	20000178 	.word	0x20000178
 8001d08:	40002800 	.word	0x40002800
 8001d0c:	58000800 	.word	0x58000800
 8001d10:	20000179 	.word	0x20000179

08001d14 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b086      	sub	sp, #24
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	6039      	str	r1, [r7, #0]
 8001d1e:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001d20:	79fa      	ldrb	r2, [r7, #7]
 8001d22:	493b      	ldr	r1, [pc, #236]	@ (8001e10 <HW_TS_Start+0xfc>)
 8001d24:	4613      	mov	r3, r2
 8001d26:	005b      	lsls	r3, r3, #1
 8001d28:	4413      	add	r3, r2
 8001d2a:	00db      	lsls	r3, r3, #3
 8001d2c:	440b      	add	r3, r1
 8001d2e:	330c      	adds	r3, #12
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	2b02      	cmp	r3, #2
 8001d36:	d103      	bne.n	8001d40 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8001d38:	79fb      	ldrb	r3, [r7, #7]
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f7ff ff66 	bl	8001c0c <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001d40:	f3ef 8310 	mrs	r3, PRIMASK
 8001d44:	60fb      	str	r3, [r7, #12]
  return(result);
 8001d46:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001d48:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001d4a:	b672      	cpsid	i
}
 8001d4c:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001d4e:	2003      	movs	r0, #3
 8001d50:	f000 fffb 	bl	8002d4a <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001d54:	4b2f      	ldr	r3, [pc, #188]	@ (8001e14 <HW_TS_Start+0x100>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	22ca      	movs	r2, #202	@ 0xca
 8001d5a:	625a      	str	r2, [r3, #36]	@ 0x24
 8001d5c:	4b2d      	ldr	r3, [pc, #180]	@ (8001e14 <HW_TS_Start+0x100>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	2253      	movs	r2, #83	@ 0x53
 8001d62:	625a      	str	r2, [r3, #36]	@ 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8001d64:	79fa      	ldrb	r2, [r7, #7]
 8001d66:	492a      	ldr	r1, [pc, #168]	@ (8001e10 <HW_TS_Start+0xfc>)
 8001d68:	4613      	mov	r3, r2
 8001d6a:	005b      	lsls	r3, r3, #1
 8001d6c:	4413      	add	r3, r2
 8001d6e:	00db      	lsls	r3, r3, #3
 8001d70:	440b      	add	r3, r1
 8001d72:	330c      	adds	r3, #12
 8001d74:	2202      	movs	r2, #2
 8001d76:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8001d78:	79fa      	ldrb	r2, [r7, #7]
 8001d7a:	4925      	ldr	r1, [pc, #148]	@ (8001e10 <HW_TS_Start+0xfc>)
 8001d7c:	4613      	mov	r3, r2
 8001d7e:	005b      	lsls	r3, r3, #1
 8001d80:	4413      	add	r3, r2
 8001d82:	00db      	lsls	r3, r3, #3
 8001d84:	440b      	add	r3, r1
 8001d86:	3308      	adds	r3, #8
 8001d88:	683a      	ldr	r2, [r7, #0]
 8001d8a:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8001d8c:	79fa      	ldrb	r2, [r7, #7]
 8001d8e:	4920      	ldr	r1, [pc, #128]	@ (8001e10 <HW_TS_Start+0xfc>)
 8001d90:	4613      	mov	r3, r2
 8001d92:	005b      	lsls	r3, r3, #1
 8001d94:	4413      	add	r3, r2
 8001d96:	00db      	lsls	r3, r3, #3
 8001d98:	440b      	add	r3, r1
 8001d9a:	3304      	adds	r3, #4
 8001d9c:	683a      	ldr	r2, [r7, #0]
 8001d9e:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8001da0:	79fb      	ldrb	r3, [r7, #7]
 8001da2:	4618      	mov	r0, r3
 8001da4:	f7ff fab6 	bl	8001314 <linkTimer>
 8001da8:	4603      	mov	r3, r0
 8001daa:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8001dac:	4b1a      	ldr	r3, [pc, #104]	@ (8001e18 <HW_TS_Start+0x104>)
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001db2:	4b1a      	ldr	r3, [pc, #104]	@ (8001e1c <HW_TS_Start+0x108>)
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	7c7a      	ldrb	r2, [r7, #17]
 8001dba:	429a      	cmp	r2, r3
 8001dbc:	d002      	beq.n	8001dc4 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 8001dbe:	f7ff fc6f 	bl	80016a0 <RescheduleTimerList>
 8001dc2:	e013      	b.n	8001dec <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8001dc4:	79fa      	ldrb	r2, [r7, #7]
 8001dc6:	4912      	ldr	r1, [pc, #72]	@ (8001e10 <HW_TS_Start+0xfc>)
 8001dc8:	4613      	mov	r3, r2
 8001dca:	005b      	lsls	r3, r3, #1
 8001dcc:	4413      	add	r3, r2
 8001dce:	00db      	lsls	r3, r3, #3
 8001dd0:	440b      	add	r3, r1
 8001dd2:	3308      	adds	r3, #8
 8001dd4:	6819      	ldr	r1, [r3, #0]
 8001dd6:	8a7b      	ldrh	r3, [r7, #18]
 8001dd8:	79fa      	ldrb	r2, [r7, #7]
 8001dda:	1ac9      	subs	r1, r1, r3
 8001ddc:	480c      	ldr	r0, [pc, #48]	@ (8001e10 <HW_TS_Start+0xfc>)
 8001dde:	4613      	mov	r3, r2
 8001de0:	005b      	lsls	r3, r3, #1
 8001de2:	4413      	add	r3, r2
 8001de4:	00db      	lsls	r3, r3, #3
 8001de6:	4403      	add	r3, r0
 8001de8:	3308      	adds	r3, #8
 8001dea:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001dec:	4b09      	ldr	r3, [pc, #36]	@ (8001e14 <HW_TS_Start+0x100>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	22ff      	movs	r2, #255	@ 0xff
 8001df2:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001df4:	2003      	movs	r0, #3
 8001df6:	f000 ff9a 	bl	8002d2e <HAL_NVIC_EnableIRQ>
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	f383 8810 	msr	PRIMASK, r3
}
 8001e04:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001e06:	bf00      	nop
}
 8001e08:	3718      	adds	r7, #24
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	200000e8 	.word	0x200000e8
 8001e14:	200001c8 	.word	0x200001c8
 8001e18:	20000178 	.word	0x20000178
 8001e1c:	20000179 	.word	0x20000179

08001e20 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b084      	sub	sp, #16
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	60f8      	str	r0, [r7, #12]
 8001e28:	460b      	mov	r3, r1
 8001e2a:	607a      	str	r2, [r7, #4]
 8001e2c:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4798      	blx	r3

  return;
 8001e32:	bf00      	nop
}
 8001e34:	3710      	adds	r7, #16
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
	...

08001e3c <HW_UART_Transmit_DMA>:

    return hw_status;
}

hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b086      	sub	sp, #24
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	60b9      	str	r1, [r7, #8]
 8001e44:	607b      	str	r3, [r7, #4]
 8001e46:	4603      	mov	r3, r0
 8001e48:	73fb      	strb	r3, [r7, #15]
 8001e4a:	4613      	mov	r3, r2
 8001e4c:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef hal_status = HAL_OK;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	75fb      	strb	r3, [r7, #23]
    hw_status_t hw_status = hw_uart_ok;
 8001e52:	2300      	movs	r3, #0
 8001e54:	75bb      	strb	r3, [r7, #22]

    switch (hw_uart_id)
 8001e56:	7bfb      	ldrb	r3, [r7, #15]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d10e      	bne.n	8001e7a <HW_UART_Transmit_DMA+0x3e>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case hw_uart1:
            HW_huart1TxCb = cb;
 8001e5c:	4a17      	ldr	r2, [pc, #92]	@ (8001ebc <HW_UART_Transmit_DMA+0x80>)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6013      	str	r3, [r2, #0]
            huart1.Instance = USART1;
 8001e62:	4b17      	ldr	r3, [pc, #92]	@ (8001ec0 <HW_UART_Transmit_DMA+0x84>)
 8001e64:	4a17      	ldr	r2, [pc, #92]	@ (8001ec4 <HW_UART_Transmit_DMA+0x88>)
 8001e66:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8001e68:	89bb      	ldrh	r3, [r7, #12]
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	68b9      	ldr	r1, [r7, #8]
 8001e6e:	4814      	ldr	r0, [pc, #80]	@ (8001ec0 <HW_UART_Transmit_DMA+0x84>)
 8001e70:	f003 fefe 	bl	8005c70 <HAL_UART_Transmit_DMA>
 8001e74:	4603      	mov	r3, r0
 8001e76:	75fb      	strb	r3, [r7, #23]
            break;
 8001e78:	e000      	b.n	8001e7c <HW_UART_Transmit_DMA+0x40>
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
            break;
#endif

        default:
            break;
 8001e7a:	bf00      	nop
    }

    switch (hal_status)
 8001e7c:	7dfb      	ldrb	r3, [r7, #23]
 8001e7e:	2b03      	cmp	r3, #3
 8001e80:	d816      	bhi.n	8001eb0 <HW_UART_Transmit_DMA+0x74>
 8001e82:	a201      	add	r2, pc, #4	@ (adr r2, 8001e88 <HW_UART_Transmit_DMA+0x4c>)
 8001e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e88:	08001e99 	.word	0x08001e99
 8001e8c:	08001e9f 	.word	0x08001e9f
 8001e90:	08001ea5 	.word	0x08001ea5
 8001e94:	08001eab 	.word	0x08001eab
    {
        case HAL_OK:
            hw_status = hw_uart_ok;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	75bb      	strb	r3, [r7, #22]
            break;
 8001e9c:	e009      	b.n	8001eb2 <HW_UART_Transmit_DMA+0x76>

        case HAL_ERROR:
            hw_status = hw_uart_error;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	75bb      	strb	r3, [r7, #22]
            break;
 8001ea2:	e006      	b.n	8001eb2 <HW_UART_Transmit_DMA+0x76>

        case HAL_BUSY:
            hw_status = hw_uart_busy;
 8001ea4:	2302      	movs	r3, #2
 8001ea6:	75bb      	strb	r3, [r7, #22]
            break;
 8001ea8:	e003      	b.n	8001eb2 <HW_UART_Transmit_DMA+0x76>

        case HAL_TIMEOUT:
            hw_status = hw_uart_to;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	75bb      	strb	r3, [r7, #22]
            break;
 8001eae:	e000      	b.n	8001eb2 <HW_UART_Transmit_DMA+0x76>

        default:
            break;
 8001eb0:	bf00      	nop
    }

    return hw_status;
 8001eb2:	7dbb      	ldrb	r3, [r7, #22]
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	3718      	adds	r7, #24
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	20000188 	.word	0x20000188
 8001ec0:	200001ec 	.word	0x200001ec
 8001ec4:	40013800 	.word	0x40013800

08001ec8 <HAL_UART_TxCpltCallback>:

    return;
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	4b09      	ldr	r3, [pc, #36]	@ (8001efc <HAL_UART_TxCpltCallback+0x34>)
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d107      	bne.n	8001eec <HAL_UART_TxCpltCallback+0x24>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1TxCb)
 8001edc:	4b08      	ldr	r3, [pc, #32]	@ (8001f00 <HAL_UART_TxCpltCallback+0x38>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d005      	beq.n	8001ef0 <HAL_UART_TxCpltCallback+0x28>
            {
                HW_huart1TxCb();
 8001ee4:	4b06      	ldr	r3, [pc, #24]	@ (8001f00 <HAL_UART_TxCpltCallback+0x38>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4798      	blx	r3
            }
            break;
 8001eea:	e001      	b.n	8001ef0 <HAL_UART_TxCpltCallback+0x28>
            }
            break;
#endif

        default:
            break;
 8001eec:	bf00      	nop
 8001eee:	e000      	b.n	8001ef2 <HAL_UART_TxCpltCallback+0x2a>
            break;
 8001ef0:	bf00      	nop
    }

    return;
 8001ef2:	bf00      	nop
}
 8001ef4:	3708      	adds	r7, #8
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	40013800 	.word	0x40013800
 8001f00:	20000188 	.word	0x20000188

08001f04 <LL_RCC_LSE_SetDriveCapability>:
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001f0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f14:	f023 0218 	bic.w	r2, r3, #24
 8001f18:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8001f24:	bf00      	nop
 8001f26:	370c      	adds	r7, #12
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr

08001f30 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b085      	sub	sp, #20
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001f38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f3c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001f3e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4313      	orrs	r3, r2
 8001f46:	648b      	str	r3, [r1, #72]	@ 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001f48:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f4c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4013      	ands	r3, r2
 8001f52:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001f54:	68fb      	ldr	r3, [r7, #12]
}
 8001f56:	bf00      	nop
 8001f58:	3714      	adds	r7, #20
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr

08001f62 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001f62:	b480      	push	{r7}
 8001f64:	b085      	sub	sp, #20
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001f6a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f6e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001f70:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	4313      	orrs	r3, r2
 8001f78:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001f7a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f7e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	4013      	ands	r3, r2
 8001f84:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001f86:	68fb      	ldr	r3, [r7, #12]
}
 8001f88:	bf00      	nop
 8001f8a:	3714      	adds	r7, #20
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr

08001f94 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b085      	sub	sp, #20
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001f9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001fa0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001fa2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001fac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001fb0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
}
 8001fba:	bf00      	nop
 8001fbc:	3714      	adds	r7, #20
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr

08001fc6 <LL_RTC_EnableWriteProtection>:
{
 8001fc6:	b480      	push	{r7}
 8001fc8:	b083      	sub	sp, #12
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	22ff      	movs	r2, #255	@ 0xff
 8001fd2:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001fd4:	bf00      	nop
 8001fd6:	370c      	adds	r7, #12
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr

08001fe0 <LL_RTC_DisableWriteProtection>:
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	22ca      	movs	r2, #202	@ 0xca
 8001fec:	625a      	str	r2, [r3, #36]	@ 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2253      	movs	r2, #83	@ 0x53
 8001ff2:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001ff4:	bf00      	nop
 8001ff6:	370c      	adds	r7, #12
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr

08002000 <LL_RTC_WAKEUP_SetClock>:
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	f023 0207 	bic.w	r2, r3, #7
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	431a      	orrs	r2, r3
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	609a      	str	r2, [r3, #8]
}
 800201a:	bf00      	nop
 800201c:	370c      	adds	r7, #12
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr

08002026 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002026:	b580      	push	{r7, lr}
 8002028:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800202a:	f000 fc99 	bl	8002960 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 800202e:	f7fe fe43 	bl	8000cb8 <MX_APPE_Config>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002032:	f000 f817 	bl	8002064 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8002036:	f000 f871 	bl	800211c <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 800203a:	f000 f88f 	bl	800215c <MX_IPCC_Init>

  /* USER CODE BEGIN SysInit */
  PeriphClock_Config();
 800203e:	f000 fa0b 	bl	8002458 <PeriphClock_Config>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002042:	f000 f93b 	bl	80022bc <MX_GPIO_Init>
  MX_DMA_Init();
 8002046:	f000 f927 	bl	8002298 <MX_DMA_Init>
  MX_RTC_Init();
 800204a:	f000 f8a3 	bl	8002194 <MX_RTC_Init>
  MX_USART1_UART_Init();
 800204e:	f000 f8d5 	bl	80021fc <MX_USART1_UART_Init>
  MX_RF_Init();
 8002052:	f000 f897 	bl	8002184 <MX_RF_Init>
  /* USER CODE BEGIN 2 */
  MX_TIM2_Init();
 8002056:	f000 fa07 	bl	8002468 <MX_TIM2_Init>

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 800205a:	f7fe fe3b 	bl	8000cd4 <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while(1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 800205e:	f7ff f818 	bl	8001092 <MX_APPE_Process>
 8002062:	e7fc      	b.n	800205e <main+0x38>

08002064 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b09a      	sub	sp, #104	@ 0x68
 8002068:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800206a:	f107 0320 	add.w	r3, r7, #32
 800206e:	2248      	movs	r2, #72	@ 0x48
 8002070:	2100      	movs	r1, #0
 8002072:	4618      	mov	r0, r3
 8002074:	f00a f980 	bl	800c378 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002078:	1d3b      	adds	r3, r7, #4
 800207a:	2200      	movs	r2, #0
 800207c:	601a      	str	r2, [r3, #0]
 800207e:	605a      	str	r2, [r3, #4]
 8002080:	609a      	str	r2, [r3, #8]
 8002082:	60da      	str	r2, [r3, #12]
 8002084:	611a      	str	r2, [r3, #16]
 8002086:	615a      	str	r2, [r3, #20]
 8002088:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800208a:	f001 fc11 	bl	80038b0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 800208e:	2010      	movs	r0, #16
 8002090:	f7ff ff38 	bl	8001f04 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002094:	4b20      	ldr	r3, [pc, #128]	@ (8002118 <SystemClock_Config+0xb4>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800209c:	4a1e      	ldr	r2, [pc, #120]	@ (8002118 <SystemClock_Config+0xb4>)
 800209e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80020a2:	6013      	str	r3, [r2, #0]
 80020a4:	4b1c      	ldr	r3, [pc, #112]	@ (8002118 <SystemClock_Config+0xb4>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80020ac:	603b      	str	r3, [r7, #0]
 80020ae:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 80020b0:	2307      	movs	r3, #7
 80020b2:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80020b4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80020b8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80020ba:	2301      	movs	r3, #1
 80020bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80020be:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80020c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80020c4:	2340      	movs	r3, #64	@ 0x40
 80020c6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80020c8:	2300      	movs	r3, #0
 80020ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020cc:	f107 0320 	add.w	r3, r7, #32
 80020d0:	4618      	mov	r0, r3
 80020d2:	f001 ff81 	bl	8003fd8 <HAL_RCC_OscConfig>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d001      	beq.n	80020e0 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80020dc:	f000 fa11 	bl	8002502 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80020e0:	236f      	movs	r3, #111	@ 0x6f
 80020e2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80020e4:	2302      	movs	r3, #2
 80020e6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80020e8:	2300      	movs	r3, #0
 80020ea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80020ec:	2300      	movs	r3, #0
 80020ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80020f0:	2300      	movs	r3, #0
 80020f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80020f4:	2300      	movs	r3, #0
 80020f6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80020f8:	2300      	movs	r3, #0
 80020fa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80020fc:	1d3b      	adds	r3, r7, #4
 80020fe:	2101      	movs	r1, #1
 8002100:	4618      	mov	r0, r3
 8002102:	f002 fadd 	bl	80046c0 <HAL_RCC_ClockConfig>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d001      	beq.n	8002110 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800210c:	f000 f9f9 	bl	8002502 <Error_Handler>
  }
}
 8002110:	bf00      	nop
 8002112:	3768      	adds	r7, #104	@ 0x68
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}
 8002118:	58000400 	.word	0x58000400

0800211c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b094      	sub	sp, #80	@ 0x50
 8002120:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002122:	463b      	mov	r3, r7
 8002124:	2250      	movs	r2, #80	@ 0x50
 8002126:	2100      	movs	r1, #0
 8002128:	4618      	mov	r0, r3
 800212a:	f00a f925 	bl	800c378 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 800212e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002132:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8002134:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002138:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 800213a:	2302      	movs	r3, #2
 800213c:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 800213e:	2300      	movs	r3, #0
 8002140:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002142:	463b      	mov	r3, r7
 8002144:	4618      	mov	r0, r3
 8002146:	f002 fef8 	bl	8004f3a <HAL_RCCEx_PeriphCLKConfig>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d001      	beq.n	8002154 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8002150:	f000 f9d7 	bl	8002502 <Error_Handler>
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif

  /* USER CODE END Smps */
}
 8002154:	bf00      	nop
 8002156:	3750      	adds	r7, #80	@ 0x50
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}

0800215c <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8002160:	4b06      	ldr	r3, [pc, #24]	@ (800217c <MX_IPCC_Init+0x20>)
 8002162:	4a07      	ldr	r2, [pc, #28]	@ (8002180 <MX_IPCC_Init+0x24>)
 8002164:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8002166:	4805      	ldr	r0, [pc, #20]	@ (800217c <MX_IPCC_Init+0x20>)
 8002168:	f001 fb1c 	bl	80037a4 <HAL_IPCC_Init>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d001      	beq.n	8002176 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8002172:	f000 f9c6 	bl	8002502 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8002176:	bf00      	nop
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	2000018c 	.word	0x2000018c
 8002180:	58000c00 	.word	0x58000c00

08002184 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8002188:	bf00      	nop
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
	...

08002194 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002198:	4b16      	ldr	r3, [pc, #88]	@ (80021f4 <MX_RTC_Init+0x60>)
 800219a:	4a17      	ldr	r2, [pc, #92]	@ (80021f8 <MX_RTC_Init+0x64>)
 800219c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800219e:	4b15      	ldr	r3, [pc, #84]	@ (80021f4 <MX_RTC_Init+0x60>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 80021a4:	4b13      	ldr	r3, [pc, #76]	@ (80021f4 <MX_RTC_Init+0x60>)
 80021a6:	220f      	movs	r2, #15
 80021a8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 80021aa:	4b12      	ldr	r3, [pc, #72]	@ (80021f4 <MX_RTC_Init+0x60>)
 80021ac:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80021b0:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80021b2:	4b10      	ldr	r3, [pc, #64]	@ (80021f4 <MX_RTC_Init+0x60>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80021b8:	4b0e      	ldr	r3, [pc, #56]	@ (80021f4 <MX_RTC_Init+0x60>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80021be:	4b0d      	ldr	r3, [pc, #52]	@ (80021f4 <MX_RTC_Init+0x60>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80021c4:	4b0b      	ldr	r3, [pc, #44]	@ (80021f4 <MX_RTC_Init+0x60>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80021ca:	480a      	ldr	r0, [pc, #40]	@ (80021f4 <MX_RTC_Init+0x60>)
 80021cc:	f003 f93c 	bl	8005448 <HAL_RTC_Init>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d001      	beq.n	80021da <MX_RTC_Init+0x46>
  {
    Error_Handler();
 80021d6:	f000 f994 	bl	8002502 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 80021da:	4807      	ldr	r0, [pc, #28]	@ (80021f8 <MX_RTC_Init+0x64>)
 80021dc:	f7ff ff00 	bl	8001fe0 <LL_RTC_DisableWriteProtection>
  
  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 80021e0:	2100      	movs	r1, #0
 80021e2:	4805      	ldr	r0, [pc, #20]	@ (80021f8 <MX_RTC_Init+0x64>)
 80021e4:	f7ff ff0c 	bl	8002000 <LL_RTC_WAKEUP_SetClock>
  
  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 80021e8:	4803      	ldr	r0, [pc, #12]	@ (80021f8 <MX_RTC_Init+0x64>)
 80021ea:	f7ff feec 	bl	8001fc6 <LL_RTC_EnableWriteProtection>
  /* USER CODE END RTC_Init 2 */

}
 80021ee:	bf00      	nop
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	200001c8 	.word	0x200001c8
 80021f8:	40002800 	.word	0x40002800

080021fc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002200:	4b23      	ldr	r3, [pc, #140]	@ (8002290 <MX_USART1_UART_Init+0x94>)
 8002202:	4a24      	ldr	r2, [pc, #144]	@ (8002294 <MX_USART1_UART_Init+0x98>)
 8002204:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002206:	4b22      	ldr	r3, [pc, #136]	@ (8002290 <MX_USART1_UART_Init+0x94>)
 8002208:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800220c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800220e:	4b20      	ldr	r3, [pc, #128]	@ (8002290 <MX_USART1_UART_Init+0x94>)
 8002210:	2200      	movs	r2, #0
 8002212:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002214:	4b1e      	ldr	r3, [pc, #120]	@ (8002290 <MX_USART1_UART_Init+0x94>)
 8002216:	2200      	movs	r2, #0
 8002218:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800221a:	4b1d      	ldr	r3, [pc, #116]	@ (8002290 <MX_USART1_UART_Init+0x94>)
 800221c:	2200      	movs	r2, #0
 800221e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002220:	4b1b      	ldr	r3, [pc, #108]	@ (8002290 <MX_USART1_UART_Init+0x94>)
 8002222:	220c      	movs	r2, #12
 8002224:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002226:	4b1a      	ldr	r3, [pc, #104]	@ (8002290 <MX_USART1_UART_Init+0x94>)
 8002228:	2200      	movs	r2, #0
 800222a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 800222c:	4b18      	ldr	r3, [pc, #96]	@ (8002290 <MX_USART1_UART_Init+0x94>)
 800222e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002232:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002234:	4b16      	ldr	r3, [pc, #88]	@ (8002290 <MX_USART1_UART_Init+0x94>)
 8002236:	2200      	movs	r2, #0
 8002238:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800223a:	4b15      	ldr	r3, [pc, #84]	@ (8002290 <MX_USART1_UART_Init+0x94>)
 800223c:	2200      	movs	r2, #0
 800223e:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002240:	4b13      	ldr	r3, [pc, #76]	@ (8002290 <MX_USART1_UART_Init+0x94>)
 8002242:	2200      	movs	r2, #0
 8002244:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002246:	4812      	ldr	r0, [pc, #72]	@ (8002290 <MX_USART1_UART_Init+0x94>)
 8002248:	f003 fcc2 	bl	8005bd0 <HAL_UART_Init>
 800224c:	4603      	mov	r3, r0
 800224e:	2b00      	cmp	r3, #0
 8002250:	d001      	beq.n	8002256 <MX_USART1_UART_Init+0x5a>
  {
	Error_Handler();
 8002252:	f000 f956 	bl	8002502 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002256:	2100      	movs	r1, #0
 8002258:	480d      	ldr	r0, [pc, #52]	@ (8002290 <MX_USART1_UART_Init+0x94>)
 800225a:	f004 fea6 	bl	8006faa <HAL_UARTEx_SetTxFifoThreshold>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d001      	beq.n	8002268 <MX_USART1_UART_Init+0x6c>
  {
	Error_Handler();
 8002264:	f000 f94d 	bl	8002502 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002268:	2100      	movs	r1, #0
 800226a:	4809      	ldr	r0, [pc, #36]	@ (8002290 <MX_USART1_UART_Init+0x94>)
 800226c:	f004 fedb 	bl	8007026 <HAL_UARTEx_SetRxFifoThreshold>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d001      	beq.n	800227a <MX_USART1_UART_Init+0x7e>
  {
	Error_Handler();
 8002276:	f000 f944 	bl	8002502 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800227a:	4805      	ldr	r0, [pc, #20]	@ (8002290 <MX_USART1_UART_Init+0x94>)
 800227c:	f004 fe5c 	bl	8006f38 <HAL_UARTEx_DisableFifoMode>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d001      	beq.n	800228a <MX_USART1_UART_Init+0x8e>
  {
	Error_Handler();
 8002286:	f000 f93c 	bl	8002502 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800228a:	bf00      	nop
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	200001ec 	.word	0x200001ec
 8002294:	40013800 	.word	0x40013800

08002298 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800229c:	2004      	movs	r0, #4
 800229e:	f7ff fe47 	bl	8001f30 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA2_CLK_ENABLE();
 80022a2:	2002      	movs	r0, #2
 80022a4:	f7ff fe44 	bl	8001f30 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 15, 0);
 80022a8:	2200      	movs	r2, #0
 80022aa:	210f      	movs	r1, #15
 80022ac:	203a      	movs	r0, #58	@ 0x3a
 80022ae:	f000 fd24 	bl	8002cfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 80022b2:	203a      	movs	r0, #58	@ 0x3a
 80022b4:	f000 fd3b 	bl	8002d2e <HAL_NVIC_EnableIRQ>

}
 80022b8:	bf00      	nop
 80022ba:	bd80      	pop	{r7, pc}

080022bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b086      	sub	sp, #24
 80022c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022c2:	1d3b      	adds	r3, r7, #4
 80022c4:	2200      	movs	r2, #0
 80022c6:	601a      	str	r2, [r3, #0]
 80022c8:	605a      	str	r2, [r3, #4]
 80022ca:	609a      	str	r2, [r3, #8]
 80022cc:	60da      	str	r2, [r3, #12]
 80022ce:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022d0:	2001      	movs	r0, #1
 80022d2:	f7ff fe46 	bl	8001f62 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80022d6:	2004      	movs	r0, #4
 80022d8:	f7ff fe43 	bl	8001f62 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022dc:	2002      	movs	r0, #2
 80022de:	f7ff fe40 	bl	8001f62 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80022e2:	2008      	movs	r0, #8
 80022e4:	f7ff fe3d 	bl	8001f62 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80022e8:	2010      	movs	r0, #16
 80022ea:	f7ff fe3a 	bl	8001f62 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80022ee:	2080      	movs	r0, #128	@ 0x80
 80022f0:	f7ff fe37 	bl	8001f62 <LL_AHB2_GRP1_EnableClock>


	/* Configure PC12 and PC13 as external interrupt inputs */
	/* Configure GPIO pins : PC12 and PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13;
 80022f4:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80022f8:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;  // Interrupt on falling edge
 80022fa:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80022fe:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;           // No pull-up or pull-down resistors
 8002300:	2300      	movs	r3, #0
 8002302:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002304:	1d3b      	adds	r3, r7, #4
 8002306:	4619      	mov	r1, r3
 8002308:	4851      	ldr	r0, [pc, #324]	@ (8002450 <MX_GPIO_Init+0x194>)
 800230a:	f001 f887 	bl	800341c <HAL_GPIO_Init>

	/* Enable and set EXTI line interrupt priority */
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);   // Priority level 2
 800230e:	2200      	movs	r2, #0
 8002310:	2102      	movs	r1, #2
 8002312:	2028      	movs	r0, #40	@ 0x28
 8002314:	f000 fcf1 	bl	8002cfa <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);          // Enable the interrupt
 8002318:	2028      	movs	r0, #40	@ 0x28
 800231a:	f000 fd08 	bl	8002d2e <HAL_NVIC_EnableIRQ>

	GPIO_InitStruct.Pin = LED_A_Pin;
 800231e:	2301      	movs	r3, #1
 8002320:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002322:	2301      	movs	r3, #1
 8002324:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002326:	2300      	movs	r3, #0
 8002328:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800232a:	2300      	movs	r3, #0
 800232c:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(LED_A_GPIO_Port, &GPIO_InitStruct);
 800232e:	1d3b      	adds	r3, r7, #4
 8002330:	4619      	mov	r1, r3
 8002332:	4848      	ldr	r0, [pc, #288]	@ (8002454 <MX_GPIO_Init+0x198>)
 8002334:	f001 f872 	bl	800341c <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = ADS1118_CS_Pin;
 8002338:	2340      	movs	r3, #64	@ 0x40
 800233a:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800233c:	2301      	movs	r3, #1
 800233e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002340:	2301      	movs	r3, #1
 8002342:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002344:	2302      	movs	r3, #2
 8002346:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(ADS1118_CS_GPIO_Port, &GPIO_InitStruct);
 8002348:	1d3b      	adds	r3, r7, #4
 800234a:	4619      	mov	r1, r3
 800234c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002350:	f001 f864 	bl	800341c <HAL_GPIO_Init>

	// Configure GPIO pin for DRDY (interrupt from ADS1299)
	GPIO_InitStruct.Pin = ADS1299_nDRDY_Pin;
 8002354:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002358:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;  // Interrupt on falling edge
 800235a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800235e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002360:	2300      	movs	r3, #0
 8002362:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(ADS1299_nDRDY_GPIO_Port, &GPIO_InitStruct);
 8002364:	1d3b      	adds	r3, r7, #4
 8002366:	4619      	mov	r1, r3
 8002368:	4839      	ldr	r0, [pc, #228]	@ (8002450 <MX_GPIO_Init+0x194>)
 800236a:	f001 f857 	bl	800341c <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = ADS1299_CS_Pin;
 800236e:	2310      	movs	r3, #16
 8002370:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002372:	2301      	movs	r3, #1
 8002374:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002376:	2301      	movs	r3, #1
 8002378:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800237a:	2302      	movs	r3, #2
 800237c:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(ADS1299_CS_GPIO_Port, &GPIO_InitStruct);
 800237e:	1d3b      	adds	r3, r7, #4
 8002380:	4619      	mov	r1, r3
 8002382:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002386:	f001 f849 	bl	800341c <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = ADS1299_nRESET_Pin|ADS1299_nPWDN_Pin;
 800238a:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800238e:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002390:	2301      	movs	r3, #1
 8002392:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002394:	2300      	movs	r3, #0
 8002396:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002398:	2300      	movs	r3, #0
 800239a:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(ADS1299_nRESET_GPIO_Port, &GPIO_InitStruct);
 800239c:	1d3b      	adds	r3, r7, #4
 800239e:	4619      	mov	r1, r3
 80023a0:	482b      	ldr	r0, [pc, #172]	@ (8002450 <MX_GPIO_Init+0x194>)
 80023a2:	f001 f83b 	bl	800341c <HAL_GPIO_Init>

	/*Configure GPIO pins : PCPin PCPin PCPin */
	GPIO_InitStruct.Pin = ADS1299_START_Pin;
 80023a6:	2340      	movs	r3, #64	@ 0x40
 80023a8:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023aa:	2301      	movs	r3, #1
 80023ac:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80023ae:	2302      	movs	r3, #2
 80023b0:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023b2:	2300      	movs	r3, #0
 80023b4:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(ADS1299_START_GPIO_Port, &GPIO_InitStruct);
 80023b6:	1d3b      	adds	r3, r7, #4
 80023b8:	4619      	mov	r1, r3
 80023ba:	4825      	ldr	r0, [pc, #148]	@ (8002450 <MX_GPIO_Init+0x194>)
 80023bc:	f001 f82e 	bl	800341c <HAL_GPIO_Init>

	/**SPI1 GPIO Configuration */
	GPIO_InitStruct.Pin = SPI1_SCLK_Pin|SPI1_MOSI_Pin;
 80023c0:	2382      	movs	r3, #130	@ 0x82
 80023c2:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023c4:	2302      	movs	r3, #2
 80023c6:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c8:	2300      	movs	r3, #0
 80023ca:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023cc:	2302      	movs	r3, #2
 80023ce:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80023d0:	2305      	movs	r3, #5
 80023d2:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(SPI1_SCLK_GPIO_Port, &GPIO_InitStruct);
 80023d4:	1d3b      	adds	r3, r7, #4
 80023d6:	4619      	mov	r1, r3
 80023d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80023dc:	f001 f81e 	bl	800341c <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = SPI1_MISO_Pin;
 80023e0:	2310      	movs	r3, #16
 80023e2:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023e4:	2302      	movs	r3, #2
 80023e6:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e8:	2300      	movs	r3, #0
 80023ea:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023ec:	2302      	movs	r3, #2
 80023ee:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80023f0:	2305      	movs	r3, #5
 80023f2:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(SPI1_MISO_GPIO_Port, &GPIO_InitStruct);
 80023f4:	1d3b      	adds	r3, r7, #4
 80023f6:	4619      	mov	r1, r3
 80023f8:	4816      	ldr	r0, [pc, #88]	@ (8002454 <MX_GPIO_Init+0x198>)
 80023fa:	f001 f80f 	bl	800341c <HAL_GPIO_Init>

	HAL_GPIO_WritePin(ADS1299_CS_GPIO_Port, ADS1299_CS_Pin, GPIO_PIN_SET);
 80023fe:	2201      	movs	r2, #1
 8002400:	2110      	movs	r1, #16
 8002402:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002406:	f001 f979 	bl	80036fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ADS1118_CS_GPIO_Port, ADS1118_CS_Pin, GPIO_PIN_SET);
 800240a:	2201      	movs	r2, #1
 800240c:	2140      	movs	r1, #64	@ 0x40
 800240e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002412:	f001 f973 	bl	80036fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ADS1299_nRESET_GPIO_Port, ADS1299_nRESET_Pin|ADS1299_nPWDN_Pin, GPIO_PIN_RESET);
 8002416:	2200      	movs	r2, #0
 8002418:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 800241c:	480c      	ldr	r0, [pc, #48]	@ (8002450 <MX_GPIO_Init+0x194>)
 800241e:	f001 f96d 	bl	80036fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ADS1299_START_GPIO_Port, ADS1299_START_Pin, GPIO_PIN_SET);
 8002422:	2201      	movs	r2, #1
 8002424:	2140      	movs	r1, #64	@ 0x40
 8002426:	480a      	ldr	r0, [pc, #40]	@ (8002450 <MX_GPIO_Init+0x194>)
 8002428:	f001 f968 	bl	80036fc <HAL_GPIO_WritePin>

	/* Enable and set EXTI line interrupt priority */
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 2, 0);   // Priority level 2
 800242c:	2200      	movs	r2, #0
 800242e:	2102      	movs	r1, #2
 8002430:	2017      	movs	r0, #23
 8002432:	f000 fc62 	bl	8002cfa <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);          // Enable the interrupt
 8002436:	2017      	movs	r0, #23
 8002438:	f000 fc79 	bl	8002d2e <HAL_NVIC_EnableIRQ>

	HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_RESET);
 800243c:	2200      	movs	r2, #0
 800243e:	2101      	movs	r1, #1
 8002440:	4804      	ldr	r0, [pc, #16]	@ (8002454 <MX_GPIO_Init+0x198>)
 8002442:	f001 f95b 	bl	80036fc <HAL_GPIO_WritePin>
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
#endif

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002446:	bf00      	nop
 8002448:	3718      	adds	r7, #24
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	48000800 	.word	0x48000800
 8002454:	48000400 	.word	0x48000400

08002458 <PeriphClock_Config>:



/* USER CODE BEGIN 4 */
void PeriphClock_Config(void)
{
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0

	/* Start automatic synchronization */
	HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
#endif

	return;
 800245c:	bf00      	nop
}
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr
	...

08002468 <MX_TIM2_Init>:

//uint8_t  APP_BLE_Send_EEGData_Notification(uint8_t* payload, uint8_t length);


static void MX_TIM2_Init(void)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	af00      	add	r7, sp, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 800246c:	2001      	movs	r0, #1
 800246e:	f7ff fd91 	bl	8001f94 <LL_APB1_GRP1_EnableClock>

    htim2.Instance = TIM2;
 8002472:	4b1a      	ldr	r3, [pc, #104]	@ (80024dc <MX_TIM2_Init+0x74>)
 8002474:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002478:	601a      	str	r2, [r3, #0]
    htim2.Init.Prescaler = (uint32_t)(HAL_RCC_GetPCLK1Freq() / 1000) - 1;
 800247a:	f002 fae1 	bl	8004a40 <HAL_RCC_GetPCLK1Freq>
 800247e:	4603      	mov	r3, r0
 8002480:	4a17      	ldr	r2, [pc, #92]	@ (80024e0 <MX_TIM2_Init+0x78>)
 8002482:	fba2 2303 	umull	r2, r3, r2, r3
 8002486:	099b      	lsrs	r3, r3, #6
 8002488:	3b01      	subs	r3, #1
 800248a:	4a14      	ldr	r2, [pc, #80]	@ (80024dc <MX_TIM2_Init+0x74>)
 800248c:	6053      	str	r3, [r2, #4]
    htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800248e:	4b13      	ldr	r3, [pc, #76]	@ (80024dc <MX_TIM2_Init+0x74>)
 8002490:	2200      	movs	r2, #0
 8002492:	609a      	str	r2, [r3, #8]
    htim2.Init.Period = 39 - 1;
 8002494:	4b11      	ldr	r3, [pc, #68]	@ (80024dc <MX_TIM2_Init+0x74>)
 8002496:	2226      	movs	r2, #38	@ 0x26
 8002498:	60da      	str	r2, [r3, #12]
    htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800249a:	4b10      	ldr	r3, [pc, #64]	@ (80024dc <MX_TIM2_Init+0x74>)
 800249c:	2200      	movs	r2, #0
 800249e:	611a      	str	r2, [r3, #16]
    htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024a0:	4b0e      	ldr	r3, [pc, #56]	@ (80024dc <MX_TIM2_Init+0x74>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	619a      	str	r2, [r3, #24]

    if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80024a6:	480d      	ldr	r0, [pc, #52]	@ (80024dc <MX_TIM2_Init+0x74>)
 80024a8:	f003 f904 	bl	80056b4 <HAL_TIM_Base_Init>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d001      	beq.n	80024b6 <MX_TIM2_Init+0x4e>
    {
        Error_Handler(); // Handle initialization error
 80024b2:	f000 f826 	bl	8002502 <Error_Handler>
    }

    HAL_NVIC_SetPriority(TIM2_IRQn, 15, 0);
 80024b6:	2200      	movs	r2, #0
 80024b8:	210f      	movs	r1, #15
 80024ba:	201c      	movs	r0, #28
 80024bc:	f000 fc1d 	bl	8002cfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80024c0:	201c      	movs	r0, #28
 80024c2:	f000 fc34 	bl	8002d2e <HAL_NVIC_EnableIRQ>

        // Start the timer interrupt
    if (HAL_TIM_Base_Start_IT(&htim2) != HAL_OK)
 80024c6:	4805      	ldr	r0, [pc, #20]	@ (80024dc <MX_TIM2_Init+0x74>)
 80024c8:	f003 f956 	bl	8005778 <HAL_TIM_Base_Start_IT>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d001      	beq.n	80024d6 <MX_TIM2_Init+0x6e>
    {
        Error_Handler(); // Handle start error
 80024d2:	f000 f816 	bl	8002502 <Error_Handler>
    }
}
 80024d6:	bf00      	nop
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	200002e0 	.word	0x200002e0
 80024e0:	10624dd3 	.word	0x10624dd3

080024e4 <HAL_TIM_PeriodElapsedCallback>:



// Timer interrupt handler
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b082      	sub	sp, #8
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
    if(htim->Instance == TIM2)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024f4:	d101      	bne.n	80024fa <HAL_TIM_PeriodElapsedCallback+0x16>
    {
    	fill_and_send_packet();
 80024f6:	f008 ffc5 	bl	800b484 <fill_and_send_packet>
    }
}
 80024fa:	bf00      	nop
 80024fc:	3708      	adds	r7, #8
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}

08002502 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002502:	b480      	push	{r7}
 8002504:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002506:	b672      	cpsid	i
}
 8002508:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800250a:	bf00      	nop
 800250c:	e7fd      	b.n	800250a <Error_Handler+0x8>

0800250e <LL_RCC_SetRTCClockSource>:
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_LSI
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_HSE_DIV32
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetRTCClockSource(uint32_t Source)
{
 800250e:	b480      	push	{r7}
 8002510:	b083      	sub	sp, #12
 8002512:	af00      	add	r7, sp, #0
 8002514:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002516:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800251a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800251e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002522:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4313      	orrs	r3, r2
 800252a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800252e:	bf00      	nop
 8002530:	370c      	adds	r7, #12
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr

0800253a <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 800253a:	b480      	push	{r7}
 800253c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 800253e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002542:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002546:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800254a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800254e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002552:	bf00      	nop
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr

0800255c <LL_AHB2_GRP1_EnableClock>:
{
 800255c:	b480      	push	{r7}
 800255e:	b085      	sub	sp, #20
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002564:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002568:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800256a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	4313      	orrs	r3, r2
 8002572:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002574:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002578:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4013      	ands	r3, r2
 800257e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002580:	68fb      	ldr	r3, [r7, #12]
}
 8002582:	bf00      	nop
 8002584:	3714      	adds	r7, #20
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr

0800258e <LL_AHB3_GRP1_EnableClock>:
{
 800258e:	b480      	push	{r7}
 8002590:	b085      	sub	sp, #20
 8002592:	af00      	add	r7, sp, #0
 8002594:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8002596:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800259a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800259c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	4313      	orrs	r3, r2
 80025a4:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80025a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025aa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	4013      	ands	r3, r2
 80025b0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80025b2:	68fb      	ldr	r3, [r7, #12]
}
 80025b4:	bf00      	nop
 80025b6:	3714      	adds	r7, #20
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr

080025c0 <LL_APB1_GRP1_EnableClock>:
{
 80025c0:	b480      	push	{r7}
 80025c2:	b085      	sub	sp, #20
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80025c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025cc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80025ce:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4313      	orrs	r3, r2
 80025d6:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80025d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025dc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4013      	ands	r3, r2
 80025e2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80025e4:	68fb      	ldr	r3, [r7, #12]
}
 80025e6:	bf00      	nop
 80025e8:	3714      	adds	r7, #20
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr

080025f2 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80025f2:	b480      	push	{r7}
 80025f4:	b085      	sub	sp, #20
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80025fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025fe:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002600:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	4313      	orrs	r3, r2
 8002608:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800260a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800260e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	4013      	ands	r3, r2
 8002614:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002616:	68fb      	ldr	r3, [r7, #12]
}
 8002618:	bf00      	nop
 800261a:	3714      	adds	r7, #20
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr

08002624 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8002628:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800262c:	f7ff ffaf 	bl	800258e <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8002630:	2200      	movs	r2, #0
 8002632:	2100      	movs	r1, #0
 8002634:	202e      	movs	r0, #46	@ 0x2e
 8002636:	f000 fb60 	bl	8002cfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 800263a:	202e      	movs	r0, #46	@ 0x2e
 800263c:	f000 fb77 	bl	8002d2e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002640:	bf00      	nop
 8002642:	bd80      	pop	{r7, pc}

08002644 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b082      	sub	sp, #8
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a05      	ldr	r2, [pc, #20]	@ (8002668 <HAL_IPCC_MspInit+0x24>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d103      	bne.n	800265e <HAL_IPCC_MspInit+0x1a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8002656:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800265a:	f7ff ff98 	bl	800258e <LL_AHB3_GRP1_EnableClock>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 800265e:	bf00      	nop
 8002660:	3708      	adds	r7, #8
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	58000c00 	.word	0x58000c00

0800266c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b096      	sub	sp, #88	@ 0x58
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002674:	f107 0308 	add.w	r3, r7, #8
 8002678:	2250      	movs	r2, #80	@ 0x50
 800267a:	2100      	movs	r1, #0
 800267c:	4618      	mov	r0, r3
 800267e:	f009 fe7b 	bl	800c378 <memset>
  if(hrtc->Instance==RTC)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a14      	ldr	r2, [pc, #80]	@ (80026d8 <HAL_RTC_MspInit+0x6c>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d120      	bne.n	80026ce <HAL_RTC_MspInit+0x62>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */
  HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 800268c:	f001 f910 	bl	80038b0 <HAL_PWR_EnableBkUpAccess>

  /**
  *  Write twice the value to flush the APB-AHB bridge
  *  This bit shall be written in the register before writing the next one
  */
  HAL_PWR_EnableBkUpAccess();
 8002690:	f001 f90e 	bl	80038b0 <HAL_PWR_EnableBkUpAccess>

  __HAL_RCC_RTC_CONFIG(RCC_RTCCLKSOURCE_LSE); /**< Select LSI as RTC Input */
 8002694:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8002698:	f7ff ff39 	bl	800250e <LL_RCC_SetRTCClockSource>
  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800269c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80026a0:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80026a2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80026a6:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80026a8:	f107 0308 	add.w	r3, r7, #8
 80026ac:	4618      	mov	r0, r3
 80026ae:	f002 fc44 	bl	8004f3a <HAL_RCCEx_PeriphCLKConfig>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d001      	beq.n	80026bc <HAL_RTC_MspInit+0x50>
    {
      Error_Handler();
 80026b8:	f7ff ff23 	bl	8002502 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80026bc:	f7ff ff3d 	bl	800253a <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80026c0:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80026c4:	f7ff ff7c 	bl	80025c0 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */
  HAL_RTCEx_EnableBypassShadow(hrtc);
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	f002 ffbd 	bl	8005648 <HAL_RTCEx_EnableBypassShadow>
  /* USER CODE END RTC_MspInit 1 */
  }

}
 80026ce:	bf00      	nop
 80026d0:	3758      	adds	r7, #88	@ 0x58
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	40002800 	.word	0x40002800

080026dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b09c      	sub	sp, #112	@ 0x70
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026e4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80026e8:	2200      	movs	r2, #0
 80026ea:	601a      	str	r2, [r3, #0]
 80026ec:	605a      	str	r2, [r3, #4]
 80026ee:	609a      	str	r2, [r3, #8]
 80026f0:	60da      	str	r2, [r3, #12]
 80026f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80026f4:	f107 030c 	add.w	r3, r7, #12
 80026f8:	2250      	movs	r2, #80	@ 0x50
 80026fa:	2100      	movs	r1, #0
 80026fc:	4618      	mov	r0, r3
 80026fe:	f009 fe3b 	bl	800c378 <memset>
  if(huart->Instance==USART1)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a2e      	ldr	r2, [pc, #184]	@ (80027c0 <HAL_UART_MspInit+0xe4>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d155      	bne.n	80027b8 <HAL_UART_MspInit+0xdc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800270c:	2301      	movs	r3, #1
 800270e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002710:	2300      	movs	r3, #0
 8002712:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002714:	f107 030c 	add.w	r3, r7, #12
 8002718:	4618      	mov	r0, r3
 800271a:	f002 fc0e 	bl	8004f3a <HAL_RCCEx_PeriphCLKConfig>
 800271e:	4603      	mov	r3, r0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d001      	beq.n	8002728 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002724:	f7ff feed 	bl	8002502 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002728:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800272c:	f7ff ff61 	bl	80025f2 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002730:	2002      	movs	r0, #2
 8002732:	f7ff ff13 	bl	800255c <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin|VCP_TX_Pin;
 8002736:	23c0      	movs	r3, #192	@ 0xc0
 8002738:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800273a:	2302      	movs	r3, #2
 800273c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800273e:	2301      	movs	r3, #1
 8002740:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002742:	2303      	movs	r3, #3
 8002744:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002746:	2307      	movs	r3, #7
 8002748:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800274a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800274e:	4619      	mov	r1, r3
 8002750:	481c      	ldr	r0, [pc, #112]	@ (80027c4 <HAL_UART_MspInit+0xe8>)
 8002752:	f000 fe63 	bl	800341c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Channel4;
 8002756:	4b1c      	ldr	r3, [pc, #112]	@ (80027c8 <HAL_UART_MspInit+0xec>)
 8002758:	4a1c      	ldr	r2, [pc, #112]	@ (80027cc <HAL_UART_MspInit+0xf0>)
 800275a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 800275c:	4b1a      	ldr	r3, [pc, #104]	@ (80027c8 <HAL_UART_MspInit+0xec>)
 800275e:	220f      	movs	r2, #15
 8002760:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002762:	4b19      	ldr	r3, [pc, #100]	@ (80027c8 <HAL_UART_MspInit+0xec>)
 8002764:	2210      	movs	r2, #16
 8002766:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002768:	4b17      	ldr	r3, [pc, #92]	@ (80027c8 <HAL_UART_MspInit+0xec>)
 800276a:	2200      	movs	r2, #0
 800276c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800276e:	4b16      	ldr	r3, [pc, #88]	@ (80027c8 <HAL_UART_MspInit+0xec>)
 8002770:	2280      	movs	r2, #128	@ 0x80
 8002772:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002774:	4b14      	ldr	r3, [pc, #80]	@ (80027c8 <HAL_UART_MspInit+0xec>)
 8002776:	2200      	movs	r2, #0
 8002778:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800277a:	4b13      	ldr	r3, [pc, #76]	@ (80027c8 <HAL_UART_MspInit+0xec>)
 800277c:	2200      	movs	r2, #0
 800277e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002780:	4b11      	ldr	r3, [pc, #68]	@ (80027c8 <HAL_UART_MspInit+0xec>)
 8002782:	2200      	movs	r2, #0
 8002784:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002786:	4b10      	ldr	r3, [pc, #64]	@ (80027c8 <HAL_UART_MspInit+0xec>)
 8002788:	2200      	movs	r2, #0
 800278a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800278c:	480e      	ldr	r0, [pc, #56]	@ (80027c8 <HAL_UART_MspInit+0xec>)
 800278e:	f000 fb13 	bl	8002db8 <HAL_DMA_Init>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d001      	beq.n	800279c <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8002798:	f7ff feb3 	bl	8002502 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	4a0a      	ldr	r2, [pc, #40]	@ (80027c8 <HAL_UART_MspInit+0xec>)
 80027a0:	67da      	str	r2, [r3, #124]	@ 0x7c
 80027a2:	4a09      	ldr	r2, [pc, #36]	@ (80027c8 <HAL_UART_MspInit+0xec>)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80027a8:	2200      	movs	r2, #0
 80027aa:	2100      	movs	r1, #0
 80027ac:	2024      	movs	r0, #36	@ 0x24
 80027ae:	f000 faa4 	bl	8002cfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80027b2:	2024      	movs	r0, #36	@ 0x24
 80027b4:	f000 fabb 	bl	8002d2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80027b8:	bf00      	nop
 80027ba:	3770      	adds	r7, #112	@ 0x70
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	40013800 	.word	0x40013800
 80027c4:	48000400 	.word	0x48000400
 80027c8:	20000280 	.word	0x20000280
 80027cc:	40020444 	.word	0x40020444

080027d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027d0:	b480      	push	{r7}
 80027d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80027d4:	bf00      	nop
 80027d6:	e7fd      	b.n	80027d4 <NMI_Handler+0x4>

080027d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027d8:	b480      	push	{r7}
 80027da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027dc:	bf00      	nop
 80027de:	e7fd      	b.n	80027dc <HardFault_Handler+0x4>

080027e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027e0:	b480      	push	{r7}
 80027e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027e4:	bf00      	nop
 80027e6:	e7fd      	b.n	80027e4 <MemManage_Handler+0x4>

080027e8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027e8:	b480      	push	{r7}
 80027ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027ec:	bf00      	nop
 80027ee:	e7fd      	b.n	80027ec <BusFault_Handler+0x4>

080027f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027f0:	b480      	push	{r7}
 80027f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027f4:	bf00      	nop
 80027f6:	e7fd      	b.n	80027f4 <UsageFault_Handler+0x4>

080027f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027f8:	b480      	push	{r7}
 80027fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027fc:	bf00      	nop
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr

08002806 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002806:	b480      	push	{r7}
 8002808:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800280a:	bf00      	nop
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr

08002814 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002814:	b480      	push	{r7}
 8002816:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002818:	bf00      	nop
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr

08002822 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002822:	b580      	push	{r7, lr}
 8002824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002826:	f000 f8f5 	bl	8002a14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800282a:	bf00      	nop
 800282c:	bd80      	pop	{r7, pc}
	...

08002830 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002834:	4802      	ldr	r0, [pc, #8]	@ (8002840 <USART1_IRQHandler+0x10>)
 8002836:	f003 fa9b 	bl	8005d70 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800283a:	bf00      	nop
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	200001ec 	.word	0x200001ec

08002844 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8002848:	f000 ff88 	bl	800375c <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 800284c:	bf00      	nop
 800284e:	bd80      	pop	{r7, pc}

08002850 <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002854:	4802      	ldr	r0, [pc, #8]	@ (8002860 <DMA2_Channel4_IRQHandler+0x10>)
 8002856:	f000 fc90 	bl	800317a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 800285a:	bf00      	nop
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	20000280 	.word	0x20000280

08002864 <IPCC_C1_RX_IRQHandler>:
/* USER CODE BEGIN 1 */
/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8002868:	f008 ffba 	bl	800b7e0 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 800286c:	bf00      	nop
 800286e:	bd80      	pop	{r7, pc}

08002870 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8002874:	f008 ffea 	bl	800b84c <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8002878:	bf00      	nop
 800287a:	bd80      	pop	{r7, pc}

0800287c <EXTI15_10_IRQHandler>:
 *         interrupt request.
 * @param  None
 * @retval None
 */
void PUSH_BUTTON_SW_EXTI_IRQHandler(void)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8002880:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8002884:	f000 ff52 	bl	800372c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002888:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800288c:	f000 ff4e 	bl	800372c <HAL_GPIO_EXTI_IRQHandler>
}
 8002890:	bf00      	nop
 8002892:	bd80      	pop	{r7, pc}

08002894 <RTC_WKUP_IRQHandler>:

void RTC_WKUP_IRQHandler(void)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	af00      	add	r7, sp, #0
  HAL_RTCEx_WakeUpTimerIRQHandler();
 8002898:	f7fe ff9c 	bl	80017d4 <HW_TS_RTC_Wakeup_Handler>
}
 800289c:	bf00      	nop
 800289e:	bd80      	pop	{r7, pc}

080028a0 <TIM1_TRG_COM_TIM17_IRQHandler>:
  * @brief  This function handles TIM17 IRQ Handler.
  * @param  None
  * @retval None
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 80028a0:	b480      	push	{r7}
 80028a2:	af00      	add	r7, sp, #0

}
 80028a4:	bf00      	nop
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr
	...

080028b0 <TIM2_IRQHandler>:


void TIM2_IRQHandler(void)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	af00      	add	r7, sp, #0
    HAL_TIM_IRQHandler(&htim2);
 80028b4:	4802      	ldr	r0, [pc, #8]	@ (80028c0 <TIM2_IRQHandler+0x10>)
 80028b6:	f002 ffad 	bl	8005814 <HAL_TIM_IRQHandler>
}
 80028ba:	bf00      	nop
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	200002e0 	.word	0x200002e0

080028c4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80028c4:	b480      	push	{r7}
 80028c6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 80028c8:	4b07      	ldr	r3, [pc, #28]	@ (80028e8 <SystemInit+0x24>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 80028ce:	4b06      	ldr	r3, [pc, #24]	@ (80028e8 <SystemInit+0x24>)
 80028d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028d4:	4a04      	ldr	r2, [pc, #16]	@ (80028e8 <SystemInit+0x24>)
 80028d6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80028da:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  RCC->CR &= 0xFFFBFFFFU;

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
#endif
}
 80028de:	bf00      	nop
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr
 80028e8:	e000ed00 	.word	0xe000ed00

080028ec <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80028ec:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028ee:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028f0:	3304      	adds	r3, #4

080028f2 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028f2:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028f4:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80028f6:	d3f9      	bcc.n	80028ec <CopyDataInit>
  bx lr
 80028f8:	4770      	bx	lr

080028fa <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80028fa:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80028fc:	3004      	adds	r0, #4

080028fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80028fe:	4288      	cmp	r0, r1
  bcc FillZerobss
 8002900:	d3fb      	bcc.n	80028fa <FillZerobss>
  bx lr
 8002902:	4770      	bx	lr

08002904 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002904:	480c      	ldr	r0, [pc, #48]	@ (8002938 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002906:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002908:	f7ff ffdc 	bl	80028c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 800290c:	480b      	ldr	r0, [pc, #44]	@ (800293c <LoopForever+0x6>)
 800290e:	490c      	ldr	r1, [pc, #48]	@ (8002940 <LoopForever+0xa>)
 8002910:	4a0c      	ldr	r2, [pc, #48]	@ (8002944 <LoopForever+0xe>)
 8002912:	2300      	movs	r3, #0
 8002914:	f7ff ffed 	bl	80028f2 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8002918:	480b      	ldr	r0, [pc, #44]	@ (8002948 <LoopForever+0x12>)
 800291a:	490c      	ldr	r1, [pc, #48]	@ (800294c <LoopForever+0x16>)
 800291c:	4a0c      	ldr	r2, [pc, #48]	@ (8002950 <LoopForever+0x1a>)
 800291e:	2300      	movs	r3, #0
 8002920:	f7ff ffe7 	bl	80028f2 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8002924:	480b      	ldr	r0, [pc, #44]	@ (8002954 <LoopForever+0x1e>)
 8002926:	490c      	ldr	r1, [pc, #48]	@ (8002958 <LoopForever+0x22>)
 8002928:	2300      	movs	r3, #0
 800292a:	f7ff ffe8 	bl	80028fe <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800292e:	f009 fd71 	bl	800c414 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8002932:	f7ff fb78 	bl	8002026 <main>

08002936 <LoopForever>:

LoopForever:
  b LoopForever
 8002936:	e7fe      	b.n	8002936 <LoopForever>
  ldr   r0, =_estack
 8002938:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 800293c:	20000008 	.word	0x20000008
 8002940:	20000090 	.word	0x20000090
 8002944:	0800ea34 	.word	0x0800ea34
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8002948:	200301e4 	.word	0x200301e4
 800294c:	20030a67 	.word	0x20030a67
 8002950:	0800eaf2 	.word	0x0800eaf2
  INIT_BSS _sbss, _ebss
 8002954:	200000cc 	.word	0x200000cc
 8002958:	200022a0 	.word	0x200022a0

0800295c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800295c:	e7fe      	b.n	800295c <ADC1_IRQHandler>
	...

08002960 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b082      	sub	sp, #8
 8002964:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002966:	2300      	movs	r3, #0
 8002968:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800296a:	4b0c      	ldr	r3, [pc, #48]	@ (800299c <HAL_Init+0x3c>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a0b      	ldr	r2, [pc, #44]	@ (800299c <HAL_Init+0x3c>)
 8002970:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002974:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002976:	2003      	movs	r0, #3
 8002978:	f000 f9b4 	bl	8002ce4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800297c:	2000      	movs	r0, #0
 800297e:	f000 f80f 	bl	80029a0 <HAL_InitTick>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d002      	beq.n	800298e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	71fb      	strb	r3, [r7, #7]
 800298c:	e001      	b.n	8002992 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800298e:	f7ff fe49 	bl	8002624 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002992:	79fb      	ldrb	r3, [r7, #7]
}
 8002994:	4618      	mov	r0, r3
 8002996:	3708      	adds	r7, #8
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}
 800299c:	58004000 	.word	0x58004000

080029a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b084      	sub	sp, #16
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80029a8:	2300      	movs	r3, #0
 80029aa:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80029ac:	4b17      	ldr	r3, [pc, #92]	@ (8002a0c <HAL_InitTick+0x6c>)
 80029ae:	781b      	ldrb	r3, [r3, #0]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d024      	beq.n	80029fe <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80029b4:	f002 f830 	bl	8004a18 <HAL_RCC_GetHCLKFreq>
 80029b8:	4602      	mov	r2, r0
 80029ba:	4b14      	ldr	r3, [pc, #80]	@ (8002a0c <HAL_InitTick+0x6c>)
 80029bc:	781b      	ldrb	r3, [r3, #0]
 80029be:	4619      	mov	r1, r3
 80029c0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80029c4:	fbb3 f3f1 	udiv	r3, r3, r1
 80029c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80029cc:	4618      	mov	r0, r3
 80029ce:	f000 f9ca 	bl	8002d66 <HAL_SYSTICK_Config>
 80029d2:	4603      	mov	r3, r0
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d10f      	bne.n	80029f8 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2b0f      	cmp	r3, #15
 80029dc:	d809      	bhi.n	80029f2 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029de:	2200      	movs	r2, #0
 80029e0:	6879      	ldr	r1, [r7, #4]
 80029e2:	f04f 30ff 	mov.w	r0, #4294967295
 80029e6:	f000 f988 	bl	8002cfa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80029ea:	4a09      	ldr	r2, [pc, #36]	@ (8002a10 <HAL_InitTick+0x70>)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6013      	str	r3, [r2, #0]
 80029f0:	e007      	b.n	8002a02 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	73fb      	strb	r3, [r7, #15]
 80029f6:	e004      	b.n	8002a02 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	73fb      	strb	r3, [r7, #15]
 80029fc:	e001      	b.n	8002a02 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002a02:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3710      	adds	r7, #16
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	20000010 	.word	0x20000010
 8002a10:	2000000c 	.word	0x2000000c

08002a14 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a14:	b480      	push	{r7}
 8002a16:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002a18:	4b06      	ldr	r3, [pc, #24]	@ (8002a34 <HAL_IncTick+0x20>)
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	461a      	mov	r2, r3
 8002a1e:	4b06      	ldr	r3, [pc, #24]	@ (8002a38 <HAL_IncTick+0x24>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4413      	add	r3, r2
 8002a24:	4a04      	ldr	r2, [pc, #16]	@ (8002a38 <HAL_IncTick+0x24>)
 8002a26:	6013      	str	r3, [r2, #0]
}
 8002a28:	bf00      	nop
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr
 8002a32:	bf00      	nop
 8002a34:	20000010 	.word	0x20000010
 8002a38:	2000032c 	.word	0x2000032c

08002a3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	af00      	add	r7, sp, #0
  return uwTick;
 8002a40:	4b03      	ldr	r3, [pc, #12]	@ (8002a50 <HAL_GetTick+0x14>)
 8002a42:	681b      	ldr	r3, [r3, #0]
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr
 8002a4e:	bf00      	nop
 8002a50:	2000032c 	.word	0x2000032c

08002a54 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8002a54:	b480      	push	{r7}
 8002a56:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8002a58:	4b03      	ldr	r3, [pc, #12]	@ (8002a68 <HAL_GetTickPrio+0x14>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr
 8002a66:	bf00      	nop
 8002a68:	2000000c 	.word	0x2000000c

08002a6c <HAL_GetTickFreq>:
  * @brief Return tick frequency.
  * @retval Tick frequency.
  *         Value of @ref HAL_TickFreqTypeDef.
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8002a70:	4b03      	ldr	r3, [pc, #12]	@ (8002a80 <HAL_GetTickFreq+0x14>)
 8002a72:	781b      	ldrb	r3, [r3, #0]
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr
 8002a7e:	bf00      	nop
 8002a80:	20000010 	.word	0x20000010

08002a84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b085      	sub	sp, #20
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	f003 0307 	and.w	r3, r3, #7
 8002a92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a94:	4b0c      	ldr	r3, [pc, #48]	@ (8002ac8 <__NVIC_SetPriorityGrouping+0x44>)
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a9a:	68ba      	ldr	r2, [r7, #8]
 8002a9c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002aac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002ab0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ab4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ab6:	4a04      	ldr	r2, [pc, #16]	@ (8002ac8 <__NVIC_SetPriorityGrouping+0x44>)
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	60d3      	str	r3, [r2, #12]
}
 8002abc:	bf00      	nop
 8002abe:	3714      	adds	r7, #20
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr
 8002ac8:	e000ed00 	.word	0xe000ed00

08002acc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002acc:	b480      	push	{r7}
 8002ace:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ad0:	4b04      	ldr	r3, [pc, #16]	@ (8002ae4 <__NVIC_GetPriorityGrouping+0x18>)
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	0a1b      	lsrs	r3, r3, #8
 8002ad6:	f003 0307 	and.w	r3, r3, #7
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr
 8002ae4:	e000ed00 	.word	0xe000ed00

08002ae8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b083      	sub	sp, #12
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	4603      	mov	r3, r0
 8002af0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	db0b      	blt.n	8002b12 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002afa:	79fb      	ldrb	r3, [r7, #7]
 8002afc:	f003 021f 	and.w	r2, r3, #31
 8002b00:	4907      	ldr	r1, [pc, #28]	@ (8002b20 <__NVIC_EnableIRQ+0x38>)
 8002b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b06:	095b      	lsrs	r3, r3, #5
 8002b08:	2001      	movs	r0, #1
 8002b0a:	fa00 f202 	lsl.w	r2, r0, r2
 8002b0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002b12:	bf00      	nop
 8002b14:	370c      	adds	r7, #12
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr
 8002b1e:	bf00      	nop
 8002b20:	e000e100 	.word	0xe000e100

08002b24 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b083      	sub	sp, #12
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	db12      	blt.n	8002b5c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b36:	79fb      	ldrb	r3, [r7, #7]
 8002b38:	f003 021f 	and.w	r2, r3, #31
 8002b3c:	490a      	ldr	r1, [pc, #40]	@ (8002b68 <__NVIC_DisableIRQ+0x44>)
 8002b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b42:	095b      	lsrs	r3, r3, #5
 8002b44:	2001      	movs	r0, #1
 8002b46:	fa00 f202 	lsl.w	r2, r0, r2
 8002b4a:	3320      	adds	r3, #32
 8002b4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002b50:	f3bf 8f4f 	dsb	sy
}
 8002b54:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002b56:	f3bf 8f6f 	isb	sy
}
 8002b5a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002b5c:	bf00      	nop
 8002b5e:	370c      	adds	r7, #12
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr
 8002b68:	e000e100 	.word	0xe000e100

08002b6c <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b083      	sub	sp, #12
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	4603      	mov	r3, r0
 8002b74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	db0c      	blt.n	8002b98 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b7e:	79fb      	ldrb	r3, [r7, #7]
 8002b80:	f003 021f 	and.w	r2, r3, #31
 8002b84:	4907      	ldr	r1, [pc, #28]	@ (8002ba4 <__NVIC_SetPendingIRQ+0x38>)
 8002b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b8a:	095b      	lsrs	r3, r3, #5
 8002b8c:	2001      	movs	r0, #1
 8002b8e:	fa00 f202 	lsl.w	r2, r0, r2
 8002b92:	3340      	adds	r3, #64	@ 0x40
 8002b94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b98:	bf00      	nop
 8002b9a:	370c      	adds	r7, #12
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr
 8002ba4:	e000e100 	.word	0xe000e100

08002ba8 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b083      	sub	sp, #12
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	4603      	mov	r3, r0
 8002bb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	db0c      	blt.n	8002bd4 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bba:	79fb      	ldrb	r3, [r7, #7]
 8002bbc:	f003 021f 	and.w	r2, r3, #31
 8002bc0:	4907      	ldr	r1, [pc, #28]	@ (8002be0 <__NVIC_ClearPendingIRQ+0x38>)
 8002bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bc6:	095b      	lsrs	r3, r3, #5
 8002bc8:	2001      	movs	r0, #1
 8002bca:	fa00 f202 	lsl.w	r2, r0, r2
 8002bce:	3360      	adds	r3, #96	@ 0x60
 8002bd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002bd4:	bf00      	nop
 8002bd6:	370c      	adds	r7, #12
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr
 8002be0:	e000e100 	.word	0xe000e100

08002be4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b083      	sub	sp, #12
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	4603      	mov	r3, r0
 8002bec:	6039      	str	r1, [r7, #0]
 8002bee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	db0a      	blt.n	8002c0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	b2da      	uxtb	r2, r3
 8002bfc:	490c      	ldr	r1, [pc, #48]	@ (8002c30 <__NVIC_SetPriority+0x4c>)
 8002bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c02:	0112      	lsls	r2, r2, #4
 8002c04:	b2d2      	uxtb	r2, r2
 8002c06:	440b      	add	r3, r1
 8002c08:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c0c:	e00a      	b.n	8002c24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	b2da      	uxtb	r2, r3
 8002c12:	4908      	ldr	r1, [pc, #32]	@ (8002c34 <__NVIC_SetPriority+0x50>)
 8002c14:	79fb      	ldrb	r3, [r7, #7]
 8002c16:	f003 030f 	and.w	r3, r3, #15
 8002c1a:	3b04      	subs	r3, #4
 8002c1c:	0112      	lsls	r2, r2, #4
 8002c1e:	b2d2      	uxtb	r2, r2
 8002c20:	440b      	add	r3, r1
 8002c22:	761a      	strb	r2, [r3, #24]
}
 8002c24:	bf00      	nop
 8002c26:	370c      	adds	r7, #12
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr
 8002c30:	e000e100 	.word	0xe000e100
 8002c34:	e000ed00 	.word	0xe000ed00

08002c38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b089      	sub	sp, #36	@ 0x24
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	60f8      	str	r0, [r7, #12]
 8002c40:	60b9      	str	r1, [r7, #8]
 8002c42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	f003 0307 	and.w	r3, r3, #7
 8002c4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	f1c3 0307 	rsb	r3, r3, #7
 8002c52:	2b04      	cmp	r3, #4
 8002c54:	bf28      	it	cs
 8002c56:	2304      	movcs	r3, #4
 8002c58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	3304      	adds	r3, #4
 8002c5e:	2b06      	cmp	r3, #6
 8002c60:	d902      	bls.n	8002c68 <NVIC_EncodePriority+0x30>
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	3b03      	subs	r3, #3
 8002c66:	e000      	b.n	8002c6a <NVIC_EncodePriority+0x32>
 8002c68:	2300      	movs	r3, #0
 8002c6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c6c:	f04f 32ff 	mov.w	r2, #4294967295
 8002c70:	69bb      	ldr	r3, [r7, #24]
 8002c72:	fa02 f303 	lsl.w	r3, r2, r3
 8002c76:	43da      	mvns	r2, r3
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	401a      	ands	r2, r3
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c80:	f04f 31ff 	mov.w	r1, #4294967295
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	fa01 f303 	lsl.w	r3, r1, r3
 8002c8a:	43d9      	mvns	r1, r3
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c90:	4313      	orrs	r3, r2
         );
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3724      	adds	r7, #36	@ 0x24
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr
	...

08002ca0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b082      	sub	sp, #8
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	3b01      	subs	r3, #1
 8002cac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002cb0:	d301      	bcc.n	8002cb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e00f      	b.n	8002cd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002cb6:	4a0a      	ldr	r2, [pc, #40]	@ (8002ce0 <SysTick_Config+0x40>)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	3b01      	subs	r3, #1
 8002cbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002cbe:	210f      	movs	r1, #15
 8002cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8002cc4:	f7ff ff8e 	bl	8002be4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002cc8:	4b05      	ldr	r3, [pc, #20]	@ (8002ce0 <SysTick_Config+0x40>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002cce:	4b04      	ldr	r3, [pc, #16]	@ (8002ce0 <SysTick_Config+0x40>)
 8002cd0:	2207      	movs	r2, #7
 8002cd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002cd4:	2300      	movs	r3, #0
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3708      	adds	r7, #8
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	e000e010 	.word	0xe000e010

08002ce4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b082      	sub	sp, #8
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cec:	6878      	ldr	r0, [r7, #4]
 8002cee:	f7ff fec9 	bl	8002a84 <__NVIC_SetPriorityGrouping>
}
 8002cf2:	bf00      	nop
 8002cf4:	3708      	adds	r7, #8
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}

08002cfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cfa:	b580      	push	{r7, lr}
 8002cfc:	b086      	sub	sp, #24
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	4603      	mov	r3, r0
 8002d02:	60b9      	str	r1, [r7, #8]
 8002d04:	607a      	str	r2, [r7, #4]
 8002d06:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002d08:	f7ff fee0 	bl	8002acc <__NVIC_GetPriorityGrouping>
 8002d0c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d0e:	687a      	ldr	r2, [r7, #4]
 8002d10:	68b9      	ldr	r1, [r7, #8]
 8002d12:	6978      	ldr	r0, [r7, #20]
 8002d14:	f7ff ff90 	bl	8002c38 <NVIC_EncodePriority>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d1e:	4611      	mov	r1, r2
 8002d20:	4618      	mov	r0, r3
 8002d22:	f7ff ff5f 	bl	8002be4 <__NVIC_SetPriority>
}
 8002d26:	bf00      	nop
 8002d28:	3718      	adds	r7, #24
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}

08002d2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d2e:	b580      	push	{r7, lr}
 8002d30:	b082      	sub	sp, #8
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	4603      	mov	r3, r0
 8002d36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f7ff fed3 	bl	8002ae8 <__NVIC_EnableIRQ>
}
 8002d42:	bf00      	nop
 8002d44:	3708      	adds	r7, #8
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}

08002d4a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002d4a:	b580      	push	{r7, lr}
 8002d4c:	b082      	sub	sp, #8
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	4603      	mov	r3, r0
 8002d52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002d54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f7ff fee3 	bl	8002b24 <__NVIC_DisableIRQ>
}
 8002d5e:	bf00      	nop
 8002d60:	3708      	adds	r7, #8
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}

08002d66 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d66:	b580      	push	{r7, lr}
 8002d68:	b082      	sub	sp, #8
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f7ff ff96 	bl	8002ca0 <SysTick_Config>
 8002d74:	4603      	mov	r3, r0
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3708      	adds	r7, #8
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}

08002d7e <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8002d7e:	b580      	push	{r7, lr}
 8002d80:	b082      	sub	sp, #8
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	4603      	mov	r3, r0
 8002d86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8002d88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f7ff feed 	bl	8002b6c <__NVIC_SetPendingIRQ>
}
 8002d92:	bf00      	nop
 8002d94:	3708      	adds	r7, #8
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}

08002d9a <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002d9a:	b580      	push	{r7, lr}
 8002d9c:	b082      	sub	sp, #8
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	4603      	mov	r3, r0
 8002da2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8002da4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002da8:	4618      	mov	r0, r3
 8002daa:	f7ff fefd 	bl	8002ba8 <__NVIC_ClearPendingIRQ>
}
 8002dae:	bf00      	nop
 8002db0:	3708      	adds	r7, #8
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
	...

08002db8 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b084      	sub	sp, #16
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d101      	bne.n	8002dca <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e08e      	b.n	8002ee8 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	461a      	mov	r2, r3
 8002dd0:	4b47      	ldr	r3, [pc, #284]	@ (8002ef0 <HAL_DMA_Init+0x138>)
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d80f      	bhi.n	8002df6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	461a      	mov	r2, r3
 8002ddc:	4b45      	ldr	r3, [pc, #276]	@ (8002ef4 <HAL_DMA_Init+0x13c>)
 8002dde:	4413      	add	r3, r2
 8002de0:	4a45      	ldr	r2, [pc, #276]	@ (8002ef8 <HAL_DMA_Init+0x140>)
 8002de2:	fba2 2303 	umull	r2, r3, r2, r3
 8002de6:	091b      	lsrs	r3, r3, #4
 8002de8:	009a      	lsls	r2, r3, #2
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	4a42      	ldr	r2, [pc, #264]	@ (8002efc <HAL_DMA_Init+0x144>)
 8002df2:	641a      	str	r2, [r3, #64]	@ 0x40
 8002df4:	e00e      	b.n	8002e14 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	4b40      	ldr	r3, [pc, #256]	@ (8002f00 <HAL_DMA_Init+0x148>)
 8002dfe:	4413      	add	r3, r2
 8002e00:	4a3d      	ldr	r2, [pc, #244]	@ (8002ef8 <HAL_DMA_Init+0x140>)
 8002e02:	fba2 2303 	umull	r2, r3, r2, r3
 8002e06:	091b      	lsrs	r3, r3, #4
 8002e08:	009a      	lsls	r2, r3, #2
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	4a3c      	ldr	r2, [pc, #240]	@ (8002f04 <HAL_DMA_Init+0x14c>)
 8002e12:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2202      	movs	r2, #2
 8002e18:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002e2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e2e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002e38:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	691b      	ldr	r3, [r3, #16]
 8002e3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e44:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	699b      	ldr	r3, [r3, #24]
 8002e4a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e50:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6a1b      	ldr	r3, [r3, #32]
 8002e56:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002e58:	68fa      	ldr	r2, [r7, #12]
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	68fa      	ldr	r2, [r7, #12]
 8002e64:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f000 fa74 	bl	8003354 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002e74:	d102      	bne.n	8002e7c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	685a      	ldr	r2, [r3, #4]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e84:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8002e88:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e8e:	687a      	ldr	r2, [r7, #4]
 8002e90:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002e92:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d010      	beq.n	8002ebe <HAL_DMA_Init+0x106>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	2b04      	cmp	r3, #4
 8002ea2:	d80c      	bhi.n	8002ebe <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f000 fa93 	bl	80033d0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002eae:	2200      	movs	r2, #0
 8002eb0:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002eba:	605a      	str	r2, [r3, #4]
 8002ebc:	e008      	b.n	8002ed0 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2201      	movs	r2, #1
 8002eda:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002ee6:	2300      	movs	r3, #0
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3710      	adds	r7, #16
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}
 8002ef0:	40020407 	.word	0x40020407
 8002ef4:	bffdfff8 	.word	0xbffdfff8
 8002ef8:	cccccccd 	.word	0xcccccccd
 8002efc:	40020000 	.word	0x40020000
 8002f00:	bffdfbf8 	.word	0xbffdfbf8
 8002f04:	40020400 	.word	0x40020400

08002f08 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b086      	sub	sp, #24
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	60f8      	str	r0, [r7, #12]
 8002f10:	60b9      	str	r1, [r7, #8]
 8002f12:	607a      	str	r2, [r7, #4]
 8002f14:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f16:	2300      	movs	r3, #0
 8002f18:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d101      	bne.n	8002f28 <HAL_DMA_Start_IT+0x20>
 8002f24:	2302      	movs	r3, #2
 8002f26:	e066      	b.n	8002ff6 <HAL_DMA_Start_IT+0xee>
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d155      	bne.n	8002fe8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2202      	movs	r2, #2
 8002f40:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2200      	movs	r2, #0
 8002f48:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f022 0201 	bic.w	r2, r2, #1
 8002f58:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	687a      	ldr	r2, [r7, #4]
 8002f5e:	68b9      	ldr	r1, [r7, #8]
 8002f60:	68f8      	ldr	r0, [r7, #12]
 8002f62:	f000 f9b9 	bl	80032d8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d008      	beq.n	8002f80 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f042 020e 	orr.w	r2, r2, #14
 8002f7c:	601a      	str	r2, [r3, #0]
 8002f7e:	e00f      	b.n	8002fa0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f022 0204 	bic.w	r2, r2, #4
 8002f8e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f042 020a 	orr.w	r2, r2, #10
 8002f9e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d007      	beq.n	8002fbe <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fb8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002fbc:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d007      	beq.n	8002fd6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fd0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002fd4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f042 0201 	orr.w	r2, r2, #1
 8002fe4:	601a      	str	r2, [r3, #0]
 8002fe6:	e005      	b.n	8002ff4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2200      	movs	r2, #0
 8002fec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002ff0:	2302      	movs	r3, #2
 8002ff2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002ff4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3718      	adds	r7, #24
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}

08002ffe <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002ffe:	b480      	push	{r7}
 8003000:	b083      	sub	sp, #12
 8003002:	af00      	add	r7, sp, #0
 8003004:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d101      	bne.n	8003010 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	e04f      	b.n	80030b0 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003016:	b2db      	uxtb	r3, r3
 8003018:	2b02      	cmp	r3, #2
 800301a:	d008      	beq.n	800302e <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2204      	movs	r2, #4
 8003020:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2200      	movs	r2, #0
 8003026:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e040      	b.n	80030b0 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f022 020e 	bic.w	r2, r2, #14
 800303c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003048:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800304c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f022 0201 	bic.w	r2, r2, #1
 800305c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003062:	f003 021c 	and.w	r2, r3, #28
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800306a:	2101      	movs	r1, #1
 800306c:	fa01 f202 	lsl.w	r2, r1, r2
 8003070:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800307a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003080:	2b00      	cmp	r3, #0
 8003082:	d00c      	beq.n	800309e <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800308e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003092:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003098:	687a      	ldr	r2, [r7, #4]
 800309a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800309c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2201      	movs	r2, #1
 80030a2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2200      	movs	r2, #0
 80030aa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 80030ae:	2300      	movs	r3, #0
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	370c      	adds	r7, #12
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr

080030bc <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b084      	sub	sp, #16
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030c4:	2300      	movs	r3, #0
 80030c6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	2b02      	cmp	r3, #2
 80030d2:	d005      	beq.n	80030e0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2204      	movs	r2, #4
 80030d8:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	73fb      	strb	r3, [r7, #15]
 80030de:	e047      	b.n	8003170 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f022 020e 	bic.w	r2, r2, #14
 80030ee:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f022 0201 	bic.w	r2, r2, #1
 80030fe:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800310a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800310e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003114:	f003 021c 	and.w	r2, r3, #28
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800311c:	2101      	movs	r1, #1
 800311e:	fa01 f202 	lsl.w	r2, r1, r2
 8003122:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003128:	687a      	ldr	r2, [r7, #4]
 800312a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800312c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003132:	2b00      	cmp	r3, #0
 8003134:	d00c      	beq.n	8003150 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003140:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003144:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800314e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2201      	movs	r2, #1
 8003154:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2200      	movs	r2, #0
 800315c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003164:	2b00      	cmp	r3, #0
 8003166:	d003      	beq.n	8003170 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800316c:	6878      	ldr	r0, [r7, #4]
 800316e:	4798      	blx	r3
    }
  }
  return status;
 8003170:	7bfb      	ldrb	r3, [r7, #15]
}
 8003172:	4618      	mov	r0, r3
 8003174:	3710      	adds	r7, #16
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}

0800317a <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800317a:	b580      	push	{r7, lr}
 800317c:	b084      	sub	sp, #16
 800317e:	af00      	add	r7, sp, #0
 8003180:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003196:	f003 031c 	and.w	r3, r3, #28
 800319a:	2204      	movs	r2, #4
 800319c:	409a      	lsls	r2, r3
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	4013      	ands	r3, r2
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d026      	beq.n	80031f4 <HAL_DMA_IRQHandler+0x7a>
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	f003 0304 	and.w	r3, r3, #4
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d021      	beq.n	80031f4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 0320 	and.w	r3, r3, #32
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d107      	bne.n	80031ce <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f022 0204 	bic.w	r2, r2, #4
 80031cc:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031d2:	f003 021c 	and.w	r2, r3, #28
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031da:	2104      	movs	r1, #4
 80031dc:	fa01 f202 	lsl.w	r2, r1, r2
 80031e0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d071      	beq.n	80032ce <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80031f2:	e06c      	b.n	80032ce <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031f8:	f003 031c 	and.w	r3, r3, #28
 80031fc:	2202      	movs	r2, #2
 80031fe:	409a      	lsls	r2, r3
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	4013      	ands	r3, r2
 8003204:	2b00      	cmp	r3, #0
 8003206:	d02e      	beq.n	8003266 <HAL_DMA_IRQHandler+0xec>
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	f003 0302 	and.w	r3, r3, #2
 800320e:	2b00      	cmp	r3, #0
 8003210:	d029      	beq.n	8003266 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 0320 	and.w	r3, r3, #32
 800321c:	2b00      	cmp	r3, #0
 800321e:	d10b      	bne.n	8003238 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f022 020a 	bic.w	r2, r2, #10
 800322e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2201      	movs	r2, #1
 8003234:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800323c:	f003 021c 	and.w	r2, r3, #28
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003244:	2102      	movs	r1, #2
 8003246:	fa01 f202 	lsl.w	r2, r1, r2
 800324a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2200      	movs	r2, #0
 8003250:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003258:	2b00      	cmp	r3, #0
 800325a:	d038      	beq.n	80032ce <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003264:	e033      	b.n	80032ce <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800326a:	f003 031c 	and.w	r3, r3, #28
 800326e:	2208      	movs	r2, #8
 8003270:	409a      	lsls	r2, r3
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	4013      	ands	r3, r2
 8003276:	2b00      	cmp	r3, #0
 8003278:	d02a      	beq.n	80032d0 <HAL_DMA_IRQHandler+0x156>
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	f003 0308 	and.w	r3, r3, #8
 8003280:	2b00      	cmp	r3, #0
 8003282:	d025      	beq.n	80032d0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f022 020e 	bic.w	r2, r2, #14
 8003292:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003298:	f003 021c 	and.w	r2, r3, #28
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032a0:	2101      	movs	r1, #1
 80032a2:	fa01 f202 	lsl.w	r2, r1, r2
 80032a6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2201      	movs	r2, #1
 80032ac:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2201      	movs	r2, #1
 80032b2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2200      	movs	r2, #0
 80032ba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d004      	beq.n	80032d0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80032ce:	bf00      	nop
 80032d0:	bf00      	nop
}
 80032d2:	3710      	adds	r7, #16
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}

080032d8 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80032d8:	b480      	push	{r7}
 80032da:	b085      	sub	sp, #20
 80032dc:	af00      	add	r7, sp, #0
 80032de:	60f8      	str	r0, [r7, #12]
 80032e0:	60b9      	str	r1, [r7, #8]
 80032e2:	607a      	str	r2, [r7, #4]
 80032e4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032ea:	68fa      	ldr	r2, [r7, #12]
 80032ec:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80032ee:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d004      	beq.n	8003302 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032fc:	68fa      	ldr	r2, [r7, #12]
 80032fe:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003300:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003306:	f003 021c 	and.w	r2, r3, #28
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800330e:	2101      	movs	r1, #1
 8003310:	fa01 f202 	lsl.w	r2, r1, r2
 8003314:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	683a      	ldr	r2, [r7, #0]
 800331c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	2b10      	cmp	r3, #16
 8003324:	d108      	bne.n	8003338 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	68ba      	ldr	r2, [r7, #8]
 8003334:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003336:	e007      	b.n	8003348 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	68ba      	ldr	r2, [r7, #8]
 800333e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	687a      	ldr	r2, [r7, #4]
 8003346:	60da      	str	r2, [r3, #12]
}
 8003348:	bf00      	nop
 800334a:	3714      	adds	r7, #20
 800334c:	46bd      	mov	sp, r7
 800334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003352:	4770      	bx	lr

08003354 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003354:	b480      	push	{r7}
 8003356:	b085      	sub	sp, #20
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	461a      	mov	r2, r3
 8003362:	4b17      	ldr	r3, [pc, #92]	@ (80033c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003364:	429a      	cmp	r2, r3
 8003366:	d80a      	bhi.n	800337e <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800336c:	089b      	lsrs	r3, r3, #2
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003374:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8003378:	687a      	ldr	r2, [r7, #4]
 800337a:	6493      	str	r3, [r2, #72]	@ 0x48
 800337c:	e007      	b.n	800338e <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003382:	089b      	lsrs	r3, r3, #2
 8003384:	009a      	lsls	r2, r3, #2
 8003386:	4b0f      	ldr	r3, [pc, #60]	@ (80033c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003388:	4413      	add	r3, r2
 800338a:	687a      	ldr	r2, [r7, #4]
 800338c:	6493      	str	r3, [r2, #72]	@ 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	b2db      	uxtb	r3, r3
 8003394:	3b08      	subs	r3, #8
 8003396:	4a0c      	ldr	r2, [pc, #48]	@ (80033c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003398:	fba2 2303 	umull	r2, r3, r2, r3
 800339c:	091b      	lsrs	r3, r3, #4
 800339e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	4a0a      	ldr	r2, [pc, #40]	@ (80033cc <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80033a4:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	f003 031f 	and.w	r3, r3, #31
 80033ac:	2201      	movs	r2, #1
 80033ae:	409a      	lsls	r2, r3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80033b4:	bf00      	nop
 80033b6:	3714      	adds	r7, #20
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr
 80033c0:	40020407 	.word	0x40020407
 80033c4:	4002081c 	.word	0x4002081c
 80033c8:	cccccccd 	.word	0xcccccccd
 80033cc:	40020880 	.word	0x40020880

080033d0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b085      	sub	sp, #20
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80033e0:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80033e2:	68fa      	ldr	r2, [r7, #12]
 80033e4:	4b0b      	ldr	r3, [pc, #44]	@ (8003414 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80033e6:	4413      	add	r3, r2
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	461a      	mov	r2, r3
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	4a09      	ldr	r2, [pc, #36]	@ (8003418 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 80033f4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	3b01      	subs	r3, #1
 80033fa:	f003 0303 	and.w	r3, r3, #3
 80033fe:	2201      	movs	r2, #1
 8003400:	409a      	lsls	r2, r3
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8003406:	bf00      	nop
 8003408:	3714      	adds	r7, #20
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr
 8003412:	bf00      	nop
 8003414:	1000823f 	.word	0x1000823f
 8003418:	40020940 	.word	0x40020940

0800341c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800341c:	b480      	push	{r7}
 800341e:	b087      	sub	sp, #28
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003426:	2300      	movs	r3, #0
 8003428:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800342a:	e14c      	b.n	80036c6 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	681a      	ldr	r2, [r3, #0]
 8003430:	2101      	movs	r1, #1
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	fa01 f303 	lsl.w	r3, r1, r3
 8003438:	4013      	ands	r3, r2
 800343a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2b00      	cmp	r3, #0
 8003440:	f000 813e 	beq.w	80036c0 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	f003 0303 	and.w	r3, r3, #3
 800344c:	2b01      	cmp	r3, #1
 800344e:	d005      	beq.n	800345c <HAL_GPIO_Init+0x40>
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	f003 0303 	and.w	r3, r3, #3
 8003458:	2b02      	cmp	r3, #2
 800345a:	d130      	bne.n	80034be <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	005b      	lsls	r3, r3, #1
 8003466:	2203      	movs	r2, #3
 8003468:	fa02 f303 	lsl.w	r3, r2, r3
 800346c:	43db      	mvns	r3, r3
 800346e:	693a      	ldr	r2, [r7, #16]
 8003470:	4013      	ands	r3, r2
 8003472:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	68da      	ldr	r2, [r3, #12]
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	005b      	lsls	r3, r3, #1
 800347c:	fa02 f303 	lsl.w	r3, r2, r3
 8003480:	693a      	ldr	r2, [r7, #16]
 8003482:	4313      	orrs	r3, r2
 8003484:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	693a      	ldr	r2, [r7, #16]
 800348a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003492:	2201      	movs	r2, #1
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	fa02 f303 	lsl.w	r3, r2, r3
 800349a:	43db      	mvns	r3, r3
 800349c:	693a      	ldr	r2, [r7, #16]
 800349e:	4013      	ands	r3, r2
 80034a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	091b      	lsrs	r3, r3, #4
 80034a8:	f003 0201 	and.w	r2, r3, #1
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	fa02 f303 	lsl.w	r3, r2, r3
 80034b2:	693a      	ldr	r2, [r7, #16]
 80034b4:	4313      	orrs	r3, r2
 80034b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	693a      	ldr	r2, [r7, #16]
 80034bc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	f003 0303 	and.w	r3, r3, #3
 80034c6:	2b03      	cmp	r3, #3
 80034c8:	d017      	beq.n	80034fa <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	68db      	ldr	r3, [r3, #12]
 80034ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	005b      	lsls	r3, r3, #1
 80034d4:	2203      	movs	r2, #3
 80034d6:	fa02 f303 	lsl.w	r3, r2, r3
 80034da:	43db      	mvns	r3, r3
 80034dc:	693a      	ldr	r2, [r7, #16]
 80034de:	4013      	ands	r3, r2
 80034e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	689a      	ldr	r2, [r3, #8]
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	005b      	lsls	r3, r3, #1
 80034ea:	fa02 f303 	lsl.w	r3, r2, r3
 80034ee:	693a      	ldr	r2, [r7, #16]
 80034f0:	4313      	orrs	r3, r2
 80034f2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	693a      	ldr	r2, [r7, #16]
 80034f8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	f003 0303 	and.w	r3, r3, #3
 8003502:	2b02      	cmp	r3, #2
 8003504:	d123      	bne.n	800354e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	08da      	lsrs	r2, r3, #3
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	3208      	adds	r2, #8
 800350e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003512:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	f003 0307 	and.w	r3, r3, #7
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	220f      	movs	r2, #15
 800351e:	fa02 f303 	lsl.w	r3, r2, r3
 8003522:	43db      	mvns	r3, r3
 8003524:	693a      	ldr	r2, [r7, #16]
 8003526:	4013      	ands	r3, r2
 8003528:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	691a      	ldr	r2, [r3, #16]
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	f003 0307 	and.w	r3, r3, #7
 8003534:	009b      	lsls	r3, r3, #2
 8003536:	fa02 f303 	lsl.w	r3, r2, r3
 800353a:	693a      	ldr	r2, [r7, #16]
 800353c:	4313      	orrs	r3, r2
 800353e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	08da      	lsrs	r2, r3, #3
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	3208      	adds	r2, #8
 8003548:	6939      	ldr	r1, [r7, #16]
 800354a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	005b      	lsls	r3, r3, #1
 8003558:	2203      	movs	r2, #3
 800355a:	fa02 f303 	lsl.w	r3, r2, r3
 800355e:	43db      	mvns	r3, r3
 8003560:	693a      	ldr	r2, [r7, #16]
 8003562:	4013      	ands	r3, r2
 8003564:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	f003 0203 	and.w	r2, r3, #3
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	005b      	lsls	r3, r3, #1
 8003572:	fa02 f303 	lsl.w	r3, r2, r3
 8003576:	693a      	ldr	r2, [r7, #16]
 8003578:	4313      	orrs	r3, r2
 800357a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	693a      	ldr	r2, [r7, #16]
 8003580:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800358a:	2b00      	cmp	r3, #0
 800358c:	f000 8098 	beq.w	80036c0 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8003590:	4a54      	ldr	r2, [pc, #336]	@ (80036e4 <HAL_GPIO_Init+0x2c8>)
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	089b      	lsrs	r3, r3, #2
 8003596:	3302      	adds	r3, #2
 8003598:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800359c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	f003 0303 	and.w	r3, r3, #3
 80035a4:	009b      	lsls	r3, r3, #2
 80035a6:	220f      	movs	r2, #15
 80035a8:	fa02 f303 	lsl.w	r3, r2, r3
 80035ac:	43db      	mvns	r3, r3
 80035ae:	693a      	ldr	r2, [r7, #16]
 80035b0:	4013      	ands	r3, r2
 80035b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80035ba:	d019      	beq.n	80035f0 <HAL_GPIO_Init+0x1d4>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	4a4a      	ldr	r2, [pc, #296]	@ (80036e8 <HAL_GPIO_Init+0x2cc>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d013      	beq.n	80035ec <HAL_GPIO_Init+0x1d0>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	4a49      	ldr	r2, [pc, #292]	@ (80036ec <HAL_GPIO_Init+0x2d0>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d00d      	beq.n	80035e8 <HAL_GPIO_Init+0x1cc>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	4a48      	ldr	r2, [pc, #288]	@ (80036f0 <HAL_GPIO_Init+0x2d4>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d007      	beq.n	80035e4 <HAL_GPIO_Init+0x1c8>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	4a47      	ldr	r2, [pc, #284]	@ (80036f4 <HAL_GPIO_Init+0x2d8>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d101      	bne.n	80035e0 <HAL_GPIO_Init+0x1c4>
 80035dc:	2304      	movs	r3, #4
 80035de:	e008      	b.n	80035f2 <HAL_GPIO_Init+0x1d6>
 80035e0:	2307      	movs	r3, #7
 80035e2:	e006      	b.n	80035f2 <HAL_GPIO_Init+0x1d6>
 80035e4:	2303      	movs	r3, #3
 80035e6:	e004      	b.n	80035f2 <HAL_GPIO_Init+0x1d6>
 80035e8:	2302      	movs	r3, #2
 80035ea:	e002      	b.n	80035f2 <HAL_GPIO_Init+0x1d6>
 80035ec:	2301      	movs	r3, #1
 80035ee:	e000      	b.n	80035f2 <HAL_GPIO_Init+0x1d6>
 80035f0:	2300      	movs	r3, #0
 80035f2:	697a      	ldr	r2, [r7, #20]
 80035f4:	f002 0203 	and.w	r2, r2, #3
 80035f8:	0092      	lsls	r2, r2, #2
 80035fa:	4093      	lsls	r3, r2
 80035fc:	693a      	ldr	r2, [r7, #16]
 80035fe:	4313      	orrs	r3, r2
 8003600:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003602:	4938      	ldr	r1, [pc, #224]	@ (80036e4 <HAL_GPIO_Init+0x2c8>)
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	089b      	lsrs	r3, r3, #2
 8003608:	3302      	adds	r3, #2
 800360a:	693a      	ldr	r2, [r7, #16]
 800360c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003610:	4b39      	ldr	r3, [pc, #228]	@ (80036f8 <HAL_GPIO_Init+0x2dc>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	43db      	mvns	r3, r3
 800361a:	693a      	ldr	r2, [r7, #16]
 800361c:	4013      	ands	r3, r2
 800361e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003628:	2b00      	cmp	r3, #0
 800362a:	d003      	beq.n	8003634 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800362c:	693a      	ldr	r2, [r7, #16]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	4313      	orrs	r3, r2
 8003632:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003634:	4a30      	ldr	r2, [pc, #192]	@ (80036f8 <HAL_GPIO_Init+0x2dc>)
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800363a:	4b2f      	ldr	r3, [pc, #188]	@ (80036f8 <HAL_GPIO_Init+0x2dc>)
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	43db      	mvns	r3, r3
 8003644:	693a      	ldr	r2, [r7, #16]
 8003646:	4013      	ands	r3, r2
 8003648:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003652:	2b00      	cmp	r3, #0
 8003654:	d003      	beq.n	800365e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8003656:	693a      	ldr	r2, [r7, #16]
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	4313      	orrs	r3, r2
 800365c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800365e:	4a26      	ldr	r2, [pc, #152]	@ (80036f8 <HAL_GPIO_Init+0x2dc>)
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003664:	4b24      	ldr	r3, [pc, #144]	@ (80036f8 <HAL_GPIO_Init+0x2dc>)
 8003666:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800366a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	43db      	mvns	r3, r3
 8003670:	693a      	ldr	r2, [r7, #16]
 8003672:	4013      	ands	r3, r2
 8003674:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800367e:	2b00      	cmp	r3, #0
 8003680:	d003      	beq.n	800368a <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8003682:	693a      	ldr	r2, [r7, #16]
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	4313      	orrs	r3, r2
 8003688:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800368a:	4a1b      	ldr	r2, [pc, #108]	@ (80036f8 <HAL_GPIO_Init+0x2dc>)
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 8003692:	4b19      	ldr	r3, [pc, #100]	@ (80036f8 <HAL_GPIO_Init+0x2dc>)
 8003694:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003698:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	43db      	mvns	r3, r3
 800369e:	693a      	ldr	r2, [r7, #16]
 80036a0:	4013      	ands	r3, r2
 80036a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d003      	beq.n	80036b8 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80036b0:	693a      	ldr	r2, [r7, #16]
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	4313      	orrs	r3, r2
 80036b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80036b8:	4a0f      	ldr	r2, [pc, #60]	@ (80036f8 <HAL_GPIO_Init+0x2dc>)
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	3301      	adds	r3, #1
 80036c4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	fa22 f303 	lsr.w	r3, r2, r3
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	f47f aeab 	bne.w	800342c <HAL_GPIO_Init+0x10>
  }
}
 80036d6:	bf00      	nop
 80036d8:	bf00      	nop
 80036da:	371c      	adds	r7, #28
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr
 80036e4:	40010000 	.word	0x40010000
 80036e8:	48000400 	.word	0x48000400
 80036ec:	48000800 	.word	0x48000800
 80036f0:	48000c00 	.word	0x48000c00
 80036f4:	48001000 	.word	0x48001000
 80036f8:	58000800 	.word	0x58000800

080036fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b083      	sub	sp, #12
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	460b      	mov	r3, r1
 8003706:	807b      	strh	r3, [r7, #2]
 8003708:	4613      	mov	r3, r2
 800370a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800370c:	787b      	ldrb	r3, [r7, #1]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d003      	beq.n	800371a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003712:	887a      	ldrh	r2, [r7, #2]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003718:	e002      	b.n	8003720 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800371a:	887a      	ldrh	r2, [r7, #2]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003720:	bf00      	nop
 8003722:	370c      	adds	r7, #12
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr

0800372c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b082      	sub	sp, #8
 8003730:	af00      	add	r7, sp, #0
 8003732:	4603      	mov	r3, r0
 8003734:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003736:	4b08      	ldr	r3, [pc, #32]	@ (8003758 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003738:	68da      	ldr	r2, [r3, #12]
 800373a:	88fb      	ldrh	r3, [r7, #6]
 800373c:	4013      	ands	r3, r2
 800373e:	2b00      	cmp	r3, #0
 8003740:	d006      	beq.n	8003750 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003742:	4a05      	ldr	r2, [pc, #20]	@ (8003758 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003744:	88fb      	ldrh	r3, [r7, #6]
 8003746:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003748:	88fb      	ldrh	r3, [r7, #6]
 800374a:	4618      	mov	r0, r3
 800374c:	f7fd fcdf 	bl	800110e <HAL_GPIO_EXTI_Callback>
  }
}
 8003750:	bf00      	nop
 8003752:	3708      	adds	r7, #8
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}
 8003758:	58000800 	.word	0x58000800

0800375c <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b082      	sub	sp, #8
 8003760:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8003762:	4b0a      	ldr	r3, [pc, #40]	@ (800378c <HAL_HSEM_IRQHandler+0x30>)
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8003768:	4b08      	ldr	r3, [pc, #32]	@ (800378c <HAL_HSEM_IRQHandler+0x30>)
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	43db      	mvns	r3, r3
 8003770:	4906      	ldr	r1, [pc, #24]	@ (800378c <HAL_HSEM_IRQHandler+0x30>)
 8003772:	4013      	ands	r3, r2
 8003774:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8003776:	4a05      	ldr	r2, [pc, #20]	@ (800378c <HAL_HSEM_IRQHandler+0x30>)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	f000 f807 	bl	8003790 <HAL_HSEM_FreeCallback>
}
 8003782:	bf00      	nop
 8003784:	3708      	adds	r7, #8
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	58001500 	.word	0x58001500

08003790 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8003790:	b480      	push	{r7}
 8003792:	b083      	sub	sp, #12
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8003798:	bf00      	nop
 800379a:	370c      	adds	r7, #12
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr

080037a4 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b084      	sub	sp, #16
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 80037ac:	2300      	movs	r3, #0
 80037ae:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d01e      	beq.n	80037f4 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 80037b6:	4b13      	ldr	r3, [pc, #76]	@ (8003804 <HAL_IPCC_Init+0x60>)
 80037b8:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d102      	bne.n	80037cc <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f7fe ff3c 	bl	8002644 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 80037cc:	68b8      	ldr	r0, [r7, #8]
 80037ce:	f000 f85b 	bl	8003888 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f043 1201 	orr.w	r2, r3, #65537	@ 0x10001
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	f000 f82c 	bl	800383c <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	635a      	str	r2, [r3, #52]	@ 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2201      	movs	r2, #1
 80037ee:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 80037f2:	e001      	b.n	80037f8 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 80037f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3710      	adds	r7, #16
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
 8003802:	bf00      	nop
 8003804:	58000c00 	.word	0x58000c00

08003808 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8003808:	b480      	push	{r7}
 800380a:	b085      	sub	sp, #20
 800380c:	af00      	add	r7, sp, #0
 800380e:	60f8      	str	r0, [r7, #12]
 8003810:	60b9      	str	r1, [r7, #8]
 8003812:	4613      	mov	r3, r2
 8003814:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8003816:	bf00      	nop
 8003818:	3714      	adds	r7, #20
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr

08003822 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8003822:	b480      	push	{r7}
 8003824:	b085      	sub	sp, #20
 8003826:	af00      	add	r7, sp, #0
 8003828:	60f8      	str	r0, [r7, #12]
 800382a:	60b9      	str	r1, [r7, #8]
 800382c:	4613      	mov	r3, r2
 800382e:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8003830:	bf00      	nop
 8003832:	3714      	adds	r7, #20
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr

0800383c <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 800383c:	b480      	push	{r7}
 800383e:	b085      	sub	sp, #20
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8003844:	2300      	movs	r3, #0
 8003846:	60fb      	str	r3, [r7, #12]
 8003848:	e00f      	b.n	800386a <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	4413      	add	r3, r2
 8003852:	4a0b      	ldr	r2, [pc, #44]	@ (8003880 <IPCC_SetDefaultCallbacks+0x44>)
 8003854:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	3306      	adds	r3, #6
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	4413      	add	r3, r2
 8003860:	4a08      	ldr	r2, [pc, #32]	@ (8003884 <IPCC_SetDefaultCallbacks+0x48>)
 8003862:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	3301      	adds	r3, #1
 8003868:	60fb      	str	r3, [r7, #12]
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2b05      	cmp	r3, #5
 800386e:	d9ec      	bls.n	800384a <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8003870:	bf00      	nop
 8003872:	bf00      	nop
 8003874:	3714      	adds	r7, #20
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr
 800387e:	bf00      	nop
 8003880:	08003809 	.word	0x08003809
 8003884:	08003823 	.word	0x08003823

08003888 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8003888:	b480      	push	{r7}
 800388a:	b083      	sub	sp, #12
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2200      	movs	r2, #0
 8003894:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	f04f 123f 	mov.w	r2, #4128831	@ 0x3f003f
 800389c:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	223f      	movs	r2, #63	@ 0x3f
 80038a2:	609a      	str	r2, [r3, #8]
}
 80038a4:	bf00      	nop
 80038a6:	370c      	adds	r7, #12
 80038a8:	46bd      	mov	sp, r7
 80038aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ae:	4770      	bx	lr

080038b0 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80038b0:	b480      	push	{r7}
 80038b2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80038b4:	4b05      	ldr	r3, [pc, #20]	@ (80038cc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a04      	ldr	r2, [pc, #16]	@ (80038cc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80038ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038be:	6013      	str	r3, [r2, #0]
}
 80038c0:	bf00      	nop
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr
 80038ca:	bf00      	nop
 80038cc:	58000400 	.word	0x58000400

080038d0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80038d0:	b480      	push	{r7}
 80038d2:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80038d4:	4b04      	ldr	r3, [pc, #16]	@ (80038e8 <HAL_PWREx_GetVoltageRange+0x18>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 80038dc:	4618      	mov	r0, r3
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr
 80038e6:	bf00      	nop
 80038e8:	58000400 	.word	0x58000400

080038ec <LL_RCC_HSE_IsEnabledDiv2>:
{
 80038ec:	b480      	push	{r7}
 80038ee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80038f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80038fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80038fe:	d101      	bne.n	8003904 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8003900:	2301      	movs	r3, #1
 8003902:	e000      	b.n	8003906 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8003904:	2300      	movs	r3, #0
}
 8003906:	4618      	mov	r0, r3
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr

08003910 <LL_RCC_HSE_Enable>:
{
 8003910:	b480      	push	{r7}
 8003912:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8003914:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800391e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003922:	6013      	str	r3, [r2, #0]
}
 8003924:	bf00      	nop
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr

0800392e <LL_RCC_HSE_Disable>:
{
 800392e:	b480      	push	{r7}
 8003930:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8003932:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800393c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003940:	6013      	str	r3, [r2, #0]
}
 8003942:	bf00      	nop
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr

0800394c <LL_RCC_HSE_IsReady>:
{
 800394c:	b480      	push	{r7}
 800394e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003950:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800395a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800395e:	d101      	bne.n	8003964 <LL_RCC_HSE_IsReady+0x18>
 8003960:	2301      	movs	r3, #1
 8003962:	e000      	b.n	8003966 <LL_RCC_HSE_IsReady+0x1a>
 8003964:	2300      	movs	r3, #0
}
 8003966:	4618      	mov	r0, r3
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr

08003970 <LL_RCC_HSI_Enable>:
{
 8003970:	b480      	push	{r7}
 8003972:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003974:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800397e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003982:	6013      	str	r3, [r2, #0]
}
 8003984:	bf00      	nop
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr

0800398e <LL_RCC_HSI_Disable>:
{
 800398e:	b480      	push	{r7}
 8003990:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8003992:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800399c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80039a0:	6013      	str	r3, [r2, #0]
}
 80039a2:	bf00      	nop
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr

080039ac <LL_RCC_HSI_IsReady>:
{
 80039ac:	b480      	push	{r7}
 80039ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80039b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039be:	d101      	bne.n	80039c4 <LL_RCC_HSI_IsReady+0x18>
 80039c0:	2301      	movs	r3, #1
 80039c2:	e000      	b.n	80039c6 <LL_RCC_HSI_IsReady+0x1a>
 80039c4:	2300      	movs	r3, #0
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	46bd      	mov	sp, r7
 80039ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ce:	4770      	bx	lr

080039d0 <LL_RCC_HSI_SetCalibTrimming>:
{
 80039d0:	b480      	push	{r7}
 80039d2:	b083      	sub	sp, #12
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80039d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	061b      	lsls	r3, r3, #24
 80039e6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80039ea:	4313      	orrs	r3, r2
 80039ec:	604b      	str	r3, [r1, #4]
}
 80039ee:	bf00      	nop
 80039f0:	370c      	adds	r7, #12
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr

080039fa <LL_RCC_HSI48_Enable>:
{
 80039fa:	b480      	push	{r7}
 80039fc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80039fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a02:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003a06:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003a0a:	f043 0301 	orr.w	r3, r3, #1
 8003a0e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8003a12:	bf00      	nop
 8003a14:	46bd      	mov	sp, r7
 8003a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1a:	4770      	bx	lr

08003a1c <LL_RCC_HSI48_Disable>:
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003a20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a24:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003a28:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003a2c:	f023 0301 	bic.w	r3, r3, #1
 8003a30:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8003a34:	bf00      	nop
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr

08003a3e <LL_RCC_HSI48_IsReady>:
{
 8003a3e:	b480      	push	{r7}
 8003a40:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8003a42:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a46:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003a4a:	f003 0302 	and.w	r3, r3, #2
 8003a4e:	2b02      	cmp	r3, #2
 8003a50:	d101      	bne.n	8003a56 <LL_RCC_HSI48_IsReady+0x18>
 8003a52:	2301      	movs	r3, #1
 8003a54:	e000      	b.n	8003a58 <LL_RCC_HSI48_IsReady+0x1a>
 8003a56:	2300      	movs	r3, #0
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr

08003a62 <LL_RCC_LSE_Enable>:
{
 8003a62:	b480      	push	{r7}
 8003a64:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003a66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a6e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003a72:	f043 0301 	orr.w	r3, r3, #1
 8003a76:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003a7a:	bf00      	nop
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr

08003a84 <LL_RCC_LSE_Disable>:
{
 8003a84:	b480      	push	{r7}
 8003a86:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003a88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a90:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003a94:	f023 0301 	bic.w	r3, r3, #1
 8003a98:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003a9c:	bf00      	nop
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa4:	4770      	bx	lr

08003aa6 <LL_RCC_LSE_EnableBypass>:
{
 8003aa6:	b480      	push	{r7}
 8003aa8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003aaa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003aae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ab2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003ab6:	f043 0304 	orr.w	r3, r3, #4
 8003aba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003abe:	bf00      	nop
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr

08003ac8 <LL_RCC_LSE_DisableBypass>:
{
 8003ac8:	b480      	push	{r7}
 8003aca:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003acc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ad0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ad4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003ad8:	f023 0304 	bic.w	r3, r3, #4
 8003adc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003ae0:	bf00      	nop
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae8:	4770      	bx	lr

08003aea <LL_RCC_LSE_IsReady>:
{
 8003aea:	b480      	push	{r7}
 8003aec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003aee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003af2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003af6:	f003 0302 	and.w	r3, r3, #2
 8003afa:	2b02      	cmp	r3, #2
 8003afc:	d101      	bne.n	8003b02 <LL_RCC_LSE_IsReady+0x18>
 8003afe:	2301      	movs	r3, #1
 8003b00:	e000      	b.n	8003b04 <LL_RCC_LSE_IsReady+0x1a>
 8003b02:	2300      	movs	r3, #0
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr

08003b0e <LL_RCC_LSI1_Enable>:
{
 8003b0e:	b480      	push	{r7}
 8003b10:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003b12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b16:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b1a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003b1e:	f043 0301 	orr.w	r3, r3, #1
 8003b22:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8003b26:	bf00      	nop
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2e:	4770      	bx	lr

08003b30 <LL_RCC_LSI1_Disable>:
{
 8003b30:	b480      	push	{r7}
 8003b32:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003b34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b38:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b3c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003b40:	f023 0301 	bic.w	r3, r3, #1
 8003b44:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8003b48:	bf00      	nop
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b50:	4770      	bx	lr

08003b52 <LL_RCC_LSI1_IsReady>:
{
 8003b52:	b480      	push	{r7}
 8003b54:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8003b56:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b5e:	f003 0302 	and.w	r3, r3, #2
 8003b62:	2b02      	cmp	r3, #2
 8003b64:	d101      	bne.n	8003b6a <LL_RCC_LSI1_IsReady+0x18>
 8003b66:	2301      	movs	r3, #1
 8003b68:	e000      	b.n	8003b6c <LL_RCC_LSI1_IsReady+0x1a>
 8003b6a:	2300      	movs	r3, #0
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr

08003b76 <LL_RCC_LSI2_Enable>:
{
 8003b76:	b480      	push	{r7}
 8003b78:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003b7a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b82:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003b86:	f043 0304 	orr.w	r3, r3, #4
 8003b8a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8003b8e:	bf00      	nop
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr

08003b98 <LL_RCC_LSI2_Disable>:
{
 8003b98:	b480      	push	{r7}
 8003b9a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003b9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ba0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ba4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003ba8:	f023 0304 	bic.w	r3, r3, #4
 8003bac:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8003bb0:	bf00      	nop
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr

08003bba <LL_RCC_LSI2_IsReady>:
{
 8003bba:	b480      	push	{r7}
 8003bbc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8003bbe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003bc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003bc6:	f003 0308 	and.w	r3, r3, #8
 8003bca:	2b08      	cmp	r3, #8
 8003bcc:	d101      	bne.n	8003bd2 <LL_RCC_LSI2_IsReady+0x18>
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e000      	b.n	8003bd4 <LL_RCC_LSI2_IsReady+0x1a>
 8003bd2:	2300      	movs	r3, #0
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bdc:	4770      	bx	lr

08003bde <LL_RCC_LSI2_SetTrimming>:
{
 8003bde:	b480      	push	{r7}
 8003be0:	b083      	sub	sp, #12
 8003be2:	af00      	add	r7, sp, #0
 8003be4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8003be6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003bea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003bee:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	021b      	lsls	r3, r3, #8
 8003bf6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8003c00:	bf00      	nop
 8003c02:	370c      	adds	r7, #12
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr

08003c0c <LL_RCC_MSI_Enable>:
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8003c10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003c1a:	f043 0301 	orr.w	r3, r3, #1
 8003c1e:	6013      	str	r3, [r2, #0]
}
 8003c20:	bf00      	nop
 8003c22:	46bd      	mov	sp, r7
 8003c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c28:	4770      	bx	lr

08003c2a <LL_RCC_MSI_Disable>:
{
 8003c2a:	b480      	push	{r7}
 8003c2c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8003c2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003c38:	f023 0301 	bic.w	r3, r3, #1
 8003c3c:	6013      	str	r3, [r2, #0]
}
 8003c3e:	bf00      	nop
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr

08003c48 <LL_RCC_MSI_IsReady>:
{
 8003c48:	b480      	push	{r7}
 8003c4a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8003c4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 0302 	and.w	r3, r3, #2
 8003c56:	2b02      	cmp	r3, #2
 8003c58:	d101      	bne.n	8003c5e <LL_RCC_MSI_IsReady+0x16>
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e000      	b.n	8003c60 <LL_RCC_MSI_IsReady+0x18>
 8003c5e:	2300      	movs	r3, #0
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	46bd      	mov	sp, r7
 8003c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c68:	4770      	bx	lr

08003c6a <LL_RCC_MSI_SetRange>:
{
 8003c6a:	b480      	push	{r7}
 8003c6c:	b083      	sub	sp, #12
 8003c6e:	af00      	add	r7, sp, #0
 8003c70:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8003c72:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c7c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	4313      	orrs	r3, r2
 8003c84:	600b      	str	r3, [r1, #0]
}
 8003c86:	bf00      	nop
 8003c88:	370c      	adds	r7, #12
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr

08003c92 <LL_RCC_MSI_GetRange>:
{
 8003c92:	b480      	push	{r7}
 8003c94:	b083      	sub	sp, #12
 8003c96:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8003c98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003ca2:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2bb0      	cmp	r3, #176	@ 0xb0
 8003ca8:	d901      	bls.n	8003cae <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8003caa:	23b0      	movs	r3, #176	@ 0xb0
 8003cac:	607b      	str	r3, [r7, #4]
  return msiRange;
 8003cae:	687b      	ldr	r3, [r7, #4]
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	370c      	adds	r7, #12
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr

08003cbc <LL_RCC_MSI_SetCalibTrimming>:
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b083      	sub	sp, #12
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8003cc4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	021b      	lsls	r3, r3, #8
 8003cd2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	604b      	str	r3, [r1, #4]
}
 8003cda:	bf00      	nop
 8003cdc:	370c      	adds	r7, #12
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce4:	4770      	bx	lr

08003ce6 <LL_RCC_SetSysClkSource>:
{
 8003ce6:	b480      	push	{r7}
 8003ce8:	b083      	sub	sp, #12
 8003cea:	af00      	add	r7, sp, #0
 8003cec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8003cee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	f023 0203 	bic.w	r2, r3, #3
 8003cf8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	608b      	str	r3, [r1, #8]
}
 8003d02:	bf00      	nop
 8003d04:	370c      	adds	r7, #12
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr

08003d0e <LL_RCC_GetSysClkSource>:
{
 8003d0e:	b480      	push	{r7}
 8003d10:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003d12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	f003 030c 	and.w	r3, r3, #12
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d24:	4770      	bx	lr

08003d26 <LL_RCC_SetAHBPrescaler>:
{
 8003d26:	b480      	push	{r7}
 8003d28:	b083      	sub	sp, #12
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8003d2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d38:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	608b      	str	r3, [r1, #8]
}
 8003d42:	bf00      	nop
 8003d44:	370c      	adds	r7, #12
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr

08003d4e <LL_C2_RCC_SetAHBPrescaler>:
{
 8003d4e:	b480      	push	{r7}
 8003d50:	b083      	sub	sp, #12
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8003d56:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d5a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8003d5e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d62:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8003d6e:	bf00      	nop
 8003d70:	370c      	adds	r7, #12
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr

08003d7a <LL_RCC_SetAHB4Prescaler>:
{
 8003d7a:	b480      	push	{r7}
 8003d7c:	b083      	sub	sp, #12
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8003d82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d86:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8003d8a:	f023 020f 	bic.w	r2, r3, #15
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	091b      	lsrs	r3, r3, #4
 8003d92:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003d96:	4313      	orrs	r3, r2
 8003d98:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8003d9c:	bf00      	nop
 8003d9e:	370c      	adds	r7, #12
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr

08003da8 <LL_RCC_SetAPB1Prescaler>:
{
 8003da8:	b480      	push	{r7}
 8003daa:	b083      	sub	sp, #12
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8003db0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003dba:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	608b      	str	r3, [r1, #8]
}
 8003dc4:	bf00      	nop
 8003dc6:	370c      	adds	r7, #12
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dce:	4770      	bx	lr

08003dd0 <LL_RCC_SetAPB2Prescaler>:
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b083      	sub	sp, #12
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8003dd8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003de2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	4313      	orrs	r3, r2
 8003dea:	608b      	str	r3, [r1, #8]
}
 8003dec:	bf00      	nop
 8003dee:	370c      	adds	r7, #12
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr

08003df8 <LL_RCC_GetAHBPrescaler>:
{
 8003df8:	b480      	push	{r7}
 8003dfa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003dfc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0e:	4770      	bx	lr

08003e10 <LL_RCC_GetAHB4Prescaler>:
{
 8003e10:	b480      	push	{r7}
 8003e12:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8003e14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e18:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8003e1c:	011b      	lsls	r3, r3, #4
 8003e1e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr

08003e2c <LL_RCC_GetAPB1Prescaler>:
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003e30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr

08003e44 <LL_RCC_GetAPB2Prescaler>:
{
 8003e44:	b480      	push	{r7}
 8003e46:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003e48:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr

08003e5c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8003e60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003e6a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003e6e:	6013      	str	r3, [r2, #0]
}
 8003e70:	bf00      	nop
 8003e72:	46bd      	mov	sp, r7
 8003e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e78:	4770      	bx	lr

08003e7a <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8003e7a:	b480      	push	{r7}
 8003e7c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003e7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003e88:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003e8c:	6013      	str	r3, [r2, #0]
}
 8003e8e:	bf00      	nop
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr

08003e98 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8003e9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ea6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003eaa:	d101      	bne.n	8003eb0 <LL_RCC_PLL_IsReady+0x18>
 8003eac:	2301      	movs	r3, #1
 8003eae:	e000      	b.n	8003eb2 <LL_RCC_PLL_IsReady+0x1a>
 8003eb0:	2300      	movs	r3, #0
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr

08003ebc <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003ec0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ec4:	68db      	ldr	r3, [r3, #12]
 8003ec6:	0a1b      	lsrs	r3, r3, #8
 8003ec8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed4:	4770      	bx	lr

08003ed6 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8003ed6:	b480      	push	{r7}
 8003ed8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8003eda:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr

08003eee <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8003eee:	b480      	push	{r7}
 8003ef0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003ef2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr

08003f06 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8003f06:	b480      	push	{r7}
 8003f08:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003f0a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f0e:	68db      	ldr	r3, [r3, #12]
 8003f10:	f003 0303 	and.w	r3, r3, #3
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	46bd      	mov	sp, r7
 8003f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1c:	4770      	bx	lr

08003f1e <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8003f1e:	b480      	push	{r7}
 8003f20:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8003f22:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f30:	d101      	bne.n	8003f36 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8003f32:	2301      	movs	r3, #1
 8003f34:	e000      	b.n	8003f38 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8003f36:	2300      	movs	r3, #0
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr

08003f42 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8003f42:	b480      	push	{r7}
 8003f44:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8003f46:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f4a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8003f4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f52:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003f56:	d101      	bne.n	8003f5c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8003f58:	2301      	movs	r3, #1
 8003f5a:	e000      	b.n	8003f5e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8003f5c:	2300      	movs	r3, #0
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	46bd      	mov	sp, r7
 8003f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f66:	4770      	bx	lr

08003f68 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8003f6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f70:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8003f74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f7c:	d101      	bne.n	8003f82 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e000      	b.n	8003f84 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8003f82:	2300      	movs	r3, #0
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr

08003f8e <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8003f8e:	b480      	push	{r7}
 8003f90:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8003f92:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f9c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003fa0:	d101      	bne.n	8003fa6 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e000      	b.n	8003fa8 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8003fa6:	2300      	movs	r3, #0
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr

08003fb2 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8003fb2:	b480      	push	{r7}
 8003fb4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8003fb6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003fc0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003fc4:	d101      	bne.n	8003fca <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e000      	b.n	8003fcc <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8003fca:	2300      	movs	r3, #0
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr
	...

08003fd8 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003fd8:	b590      	push	{r4, r7, lr}
 8003fda:	b08d      	sub	sp, #52	@ 0x34
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d101      	bne.n	8003fea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e363      	b.n	80046b2 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 0320 	and.w	r3, r3, #32
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	f000 808d 	beq.w	8004112 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ff8:	f7ff fe89 	bl	8003d0e <LL_RCC_GetSysClkSource>
 8003ffc:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ffe:	f7ff ff82 	bl	8003f06 <LL_RCC_PLL_GetMainSource>
 8004002:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004004:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004006:	2b00      	cmp	r3, #0
 8004008:	d005      	beq.n	8004016 <HAL_RCC_OscConfig+0x3e>
 800400a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800400c:	2b0c      	cmp	r3, #12
 800400e:	d147      	bne.n	80040a0 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8004010:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004012:	2b01      	cmp	r3, #1
 8004014:	d144      	bne.n	80040a0 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	69db      	ldr	r3, [r3, #28]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d101      	bne.n	8004022 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	e347      	b.n	80046b2 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8004026:	f7ff fe34 	bl	8003c92 <LL_RCC_MSI_GetRange>
 800402a:	4603      	mov	r3, r0
 800402c:	429c      	cmp	r4, r3
 800402e:	d914      	bls.n	800405a <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004034:	4618      	mov	r0, r3
 8004036:	f000 fd2f 	bl	8004a98 <RCC_SetFlashLatencyFromMSIRange>
 800403a:	4603      	mov	r3, r0
 800403c:	2b00      	cmp	r3, #0
 800403e:	d001      	beq.n	8004044 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	e336      	b.n	80046b2 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004048:	4618      	mov	r0, r3
 800404a:	f7ff fe0e 	bl	8003c6a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6a1b      	ldr	r3, [r3, #32]
 8004052:	4618      	mov	r0, r3
 8004054:	f7ff fe32 	bl	8003cbc <LL_RCC_MSI_SetCalibTrimming>
 8004058:	e013      	b.n	8004082 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800405e:	4618      	mov	r0, r3
 8004060:	f7ff fe03 	bl	8003c6a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6a1b      	ldr	r3, [r3, #32]
 8004068:	4618      	mov	r0, r3
 800406a:	f7ff fe27 	bl	8003cbc <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004072:	4618      	mov	r0, r3
 8004074:	f000 fd10 	bl	8004a98 <RCC_SetFlashLatencyFromMSIRange>
 8004078:	4603      	mov	r3, r0
 800407a:	2b00      	cmp	r3, #0
 800407c:	d001      	beq.n	8004082 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e317      	b.n	80046b2 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004082:	f000 fcc9 	bl	8004a18 <HAL_RCC_GetHCLKFreq>
 8004086:	4603      	mov	r3, r0
 8004088:	4aa4      	ldr	r2, [pc, #656]	@ (800431c <HAL_RCC_OscConfig+0x344>)
 800408a:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800408c:	4ba4      	ldr	r3, [pc, #656]	@ (8004320 <HAL_RCC_OscConfig+0x348>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4618      	mov	r0, r3
 8004092:	f7fe fc85 	bl	80029a0 <HAL_InitTick>
 8004096:	4603      	mov	r3, r0
 8004098:	2b00      	cmp	r3, #0
 800409a:	d039      	beq.n	8004110 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	e308      	b.n	80046b2 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	69db      	ldr	r3, [r3, #28]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d01e      	beq.n	80040e6 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80040a8:	f7ff fdb0 	bl	8003c0c <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80040ac:	f7fe fcc6 	bl	8002a3c <HAL_GetTick>
 80040b0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80040b2:	e008      	b.n	80040c6 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80040b4:	f7fe fcc2 	bl	8002a3c <HAL_GetTick>
 80040b8:	4602      	mov	r2, r0
 80040ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040bc:	1ad3      	subs	r3, r2, r3
 80040be:	2b02      	cmp	r3, #2
 80040c0:	d901      	bls.n	80040c6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80040c2:	2303      	movs	r3, #3
 80040c4:	e2f5      	b.n	80046b2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 80040c6:	f7ff fdbf 	bl	8003c48 <LL_RCC_MSI_IsReady>
 80040ca:	4603      	mov	r3, r0
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d0f1      	beq.n	80040b4 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040d4:	4618      	mov	r0, r3
 80040d6:	f7ff fdc8 	bl	8003c6a <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6a1b      	ldr	r3, [r3, #32]
 80040de:	4618      	mov	r0, r3
 80040e0:	f7ff fdec 	bl	8003cbc <LL_RCC_MSI_SetCalibTrimming>
 80040e4:	e015      	b.n	8004112 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80040e6:	f7ff fda0 	bl	8003c2a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80040ea:	f7fe fca7 	bl	8002a3c <HAL_GetTick>
 80040ee:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80040f0:	e008      	b.n	8004104 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80040f2:	f7fe fca3 	bl	8002a3c <HAL_GetTick>
 80040f6:	4602      	mov	r2, r0
 80040f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040fa:	1ad3      	subs	r3, r2, r3
 80040fc:	2b02      	cmp	r3, #2
 80040fe:	d901      	bls.n	8004104 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004100:	2303      	movs	r3, #3
 8004102:	e2d6      	b.n	80046b2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8004104:	f7ff fda0 	bl	8003c48 <LL_RCC_MSI_IsReady>
 8004108:	4603      	mov	r3, r0
 800410a:	2b00      	cmp	r3, #0
 800410c:	d1f1      	bne.n	80040f2 <HAL_RCC_OscConfig+0x11a>
 800410e:	e000      	b.n	8004112 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004110:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 0301 	and.w	r3, r3, #1
 800411a:	2b00      	cmp	r3, #0
 800411c:	d047      	beq.n	80041ae <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800411e:	f7ff fdf6 	bl	8003d0e <LL_RCC_GetSysClkSource>
 8004122:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004124:	f7ff feef 	bl	8003f06 <LL_RCC_PLL_GetMainSource>
 8004128:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800412a:	6a3b      	ldr	r3, [r7, #32]
 800412c:	2b08      	cmp	r3, #8
 800412e:	d005      	beq.n	800413c <HAL_RCC_OscConfig+0x164>
 8004130:	6a3b      	ldr	r3, [r7, #32]
 8004132:	2b0c      	cmp	r3, #12
 8004134:	d108      	bne.n	8004148 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8004136:	69fb      	ldr	r3, [r7, #28]
 8004138:	2b03      	cmp	r3, #3
 800413a:	d105      	bne.n	8004148 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d134      	bne.n	80041ae <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	e2b4      	b.n	80046b2 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004150:	d102      	bne.n	8004158 <HAL_RCC_OscConfig+0x180>
 8004152:	f7ff fbdd 	bl	8003910 <LL_RCC_HSE_Enable>
 8004156:	e001      	b.n	800415c <HAL_RCC_OscConfig+0x184>
 8004158:	f7ff fbe9 	bl	800392e <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d012      	beq.n	800418a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004164:	f7fe fc6a 	bl	8002a3c <HAL_GetTick>
 8004168:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800416a:	e008      	b.n	800417e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800416c:	f7fe fc66 	bl	8002a3c <HAL_GetTick>
 8004170:	4602      	mov	r2, r0
 8004172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004174:	1ad3      	subs	r3, r2, r3
 8004176:	2b64      	cmp	r3, #100	@ 0x64
 8004178:	d901      	bls.n	800417e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800417a:	2303      	movs	r3, #3
 800417c:	e299      	b.n	80046b2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800417e:	f7ff fbe5 	bl	800394c <LL_RCC_HSE_IsReady>
 8004182:	4603      	mov	r3, r0
 8004184:	2b00      	cmp	r3, #0
 8004186:	d0f1      	beq.n	800416c <HAL_RCC_OscConfig+0x194>
 8004188:	e011      	b.n	80041ae <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800418a:	f7fe fc57 	bl	8002a3c <HAL_GetTick>
 800418e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8004190:	e008      	b.n	80041a4 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004192:	f7fe fc53 	bl	8002a3c <HAL_GetTick>
 8004196:	4602      	mov	r2, r0
 8004198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800419a:	1ad3      	subs	r3, r2, r3
 800419c:	2b64      	cmp	r3, #100	@ 0x64
 800419e:	d901      	bls.n	80041a4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80041a0:	2303      	movs	r3, #3
 80041a2:	e286      	b.n	80046b2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 80041a4:	f7ff fbd2 	bl	800394c <LL_RCC_HSE_IsReady>
 80041a8:	4603      	mov	r3, r0
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d1f1      	bne.n	8004192 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f003 0302 	and.w	r3, r3, #2
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d04c      	beq.n	8004254 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041ba:	f7ff fda8 	bl	8003d0e <LL_RCC_GetSysClkSource>
 80041be:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80041c0:	f7ff fea1 	bl	8003f06 <LL_RCC_PLL_GetMainSource>
 80041c4:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80041c6:	69bb      	ldr	r3, [r7, #24]
 80041c8:	2b04      	cmp	r3, #4
 80041ca:	d005      	beq.n	80041d8 <HAL_RCC_OscConfig+0x200>
 80041cc:	69bb      	ldr	r3, [r7, #24]
 80041ce:	2b0c      	cmp	r3, #12
 80041d0:	d10e      	bne.n	80041f0 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	2b02      	cmp	r3, #2
 80041d6:	d10b      	bne.n	80041f0 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d101      	bne.n	80041e4 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	e266      	b.n	80046b2 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	691b      	ldr	r3, [r3, #16]
 80041e8:	4618      	mov	r0, r3
 80041ea:	f7ff fbf1 	bl	80039d0 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80041ee:	e031      	b.n	8004254 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	68db      	ldr	r3, [r3, #12]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d019      	beq.n	800422c <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041f8:	f7ff fbba 	bl	8003970 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041fc:	f7fe fc1e 	bl	8002a3c <HAL_GetTick>
 8004200:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8004202:	e008      	b.n	8004216 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004204:	f7fe fc1a 	bl	8002a3c <HAL_GetTick>
 8004208:	4602      	mov	r2, r0
 800420a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800420c:	1ad3      	subs	r3, r2, r3
 800420e:	2b02      	cmp	r3, #2
 8004210:	d901      	bls.n	8004216 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004212:	2303      	movs	r3, #3
 8004214:	e24d      	b.n	80046b2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8004216:	f7ff fbc9 	bl	80039ac <LL_RCC_HSI_IsReady>
 800421a:	4603      	mov	r3, r0
 800421c:	2b00      	cmp	r3, #0
 800421e:	d0f1      	beq.n	8004204 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	691b      	ldr	r3, [r3, #16]
 8004224:	4618      	mov	r0, r3
 8004226:	f7ff fbd3 	bl	80039d0 <LL_RCC_HSI_SetCalibTrimming>
 800422a:	e013      	b.n	8004254 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800422c:	f7ff fbaf 	bl	800398e <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004230:	f7fe fc04 	bl	8002a3c <HAL_GetTick>
 8004234:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8004236:	e008      	b.n	800424a <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004238:	f7fe fc00 	bl	8002a3c <HAL_GetTick>
 800423c:	4602      	mov	r2, r0
 800423e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004240:	1ad3      	subs	r3, r2, r3
 8004242:	2b02      	cmp	r3, #2
 8004244:	d901      	bls.n	800424a <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8004246:	2303      	movs	r3, #3
 8004248:	e233      	b.n	80046b2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800424a:	f7ff fbaf 	bl	80039ac <LL_RCC_HSI_IsReady>
 800424e:	4603      	mov	r3, r0
 8004250:	2b00      	cmp	r3, #0
 8004252:	d1f1      	bne.n	8004238 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 0308 	and.w	r3, r3, #8
 800425c:	2b00      	cmp	r3, #0
 800425e:	d106      	bne.n	800426e <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004268:	2b00      	cmp	r3, #0
 800426a:	f000 80a3 	beq.w	80043b4 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	695b      	ldr	r3, [r3, #20]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d076      	beq.n	8004364 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 0310 	and.w	r3, r3, #16
 800427e:	2b00      	cmp	r3, #0
 8004280:	d046      	beq.n	8004310 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8004282:	f7ff fc66 	bl	8003b52 <LL_RCC_LSI1_IsReady>
 8004286:	4603      	mov	r3, r0
 8004288:	2b00      	cmp	r3, #0
 800428a:	d113      	bne.n	80042b4 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800428c:	f7ff fc3f 	bl	8003b0e <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004290:	f7fe fbd4 	bl	8002a3c <HAL_GetTick>
 8004294:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004296:	e008      	b.n	80042aa <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004298:	f7fe fbd0 	bl	8002a3c <HAL_GetTick>
 800429c:	4602      	mov	r2, r0
 800429e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042a0:	1ad3      	subs	r3, r2, r3
 80042a2:	2b02      	cmp	r3, #2
 80042a4:	d901      	bls.n	80042aa <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 80042a6:	2303      	movs	r3, #3
 80042a8:	e203      	b.n	80046b2 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80042aa:	f7ff fc52 	bl	8003b52 <LL_RCC_LSI1_IsReady>
 80042ae:	4603      	mov	r3, r0
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d0f1      	beq.n	8004298 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80042b4:	f7ff fc5f 	bl	8003b76 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042b8:	f7fe fbc0 	bl	8002a3c <HAL_GetTick>
 80042bc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80042be:	e008      	b.n	80042d2 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80042c0:	f7fe fbbc 	bl	8002a3c <HAL_GetTick>
 80042c4:	4602      	mov	r2, r0
 80042c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042c8:	1ad3      	subs	r3, r2, r3
 80042ca:	2b03      	cmp	r3, #3
 80042cc:	d901      	bls.n	80042d2 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 80042ce:	2303      	movs	r3, #3
 80042d0:	e1ef      	b.n	80046b2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80042d2:	f7ff fc72 	bl	8003bba <LL_RCC_LSI2_IsReady>
 80042d6:	4603      	mov	r3, r0
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d0f1      	beq.n	80042c0 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	699b      	ldr	r3, [r3, #24]
 80042e0:	4618      	mov	r0, r3
 80042e2:	f7ff fc7c 	bl	8003bde <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80042e6:	f7ff fc23 	bl	8003b30 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042ea:	f7fe fba7 	bl	8002a3c <HAL_GetTick>
 80042ee:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80042f0:	e008      	b.n	8004304 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80042f2:	f7fe fba3 	bl	8002a3c <HAL_GetTick>
 80042f6:	4602      	mov	r2, r0
 80042f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042fa:	1ad3      	subs	r3, r2, r3
 80042fc:	2b02      	cmp	r3, #2
 80042fe:	d901      	bls.n	8004304 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8004300:	2303      	movs	r3, #3
 8004302:	e1d6      	b.n	80046b2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004304:	f7ff fc25 	bl	8003b52 <LL_RCC_LSI1_IsReady>
 8004308:	4603      	mov	r3, r0
 800430a:	2b00      	cmp	r3, #0
 800430c:	d1f1      	bne.n	80042f2 <HAL_RCC_OscConfig+0x31a>
 800430e:	e051      	b.n	80043b4 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8004310:	f7ff fbfd 	bl	8003b0e <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004314:	f7fe fb92 	bl	8002a3c <HAL_GetTick>
 8004318:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800431a:	e00c      	b.n	8004336 <HAL_RCC_OscConfig+0x35e>
 800431c:	20000008 	.word	0x20000008
 8004320:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004324:	f7fe fb8a 	bl	8002a3c <HAL_GetTick>
 8004328:	4602      	mov	r2, r0
 800432a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800432c:	1ad3      	subs	r3, r2, r3
 800432e:	2b02      	cmp	r3, #2
 8004330:	d901      	bls.n	8004336 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8004332:	2303      	movs	r3, #3
 8004334:	e1bd      	b.n	80046b2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004336:	f7ff fc0c 	bl	8003b52 <LL_RCC_LSI1_IsReady>
 800433a:	4603      	mov	r3, r0
 800433c:	2b00      	cmp	r3, #0
 800433e:	d0f1      	beq.n	8004324 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8004340:	f7ff fc2a 	bl	8003b98 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004344:	e008      	b.n	8004358 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004346:	f7fe fb79 	bl	8002a3c <HAL_GetTick>
 800434a:	4602      	mov	r2, r0
 800434c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800434e:	1ad3      	subs	r3, r2, r3
 8004350:	2b03      	cmp	r3, #3
 8004352:	d901      	bls.n	8004358 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8004354:	2303      	movs	r3, #3
 8004356:	e1ac      	b.n	80046b2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004358:	f7ff fc2f 	bl	8003bba <LL_RCC_LSI2_IsReady>
 800435c:	4603      	mov	r3, r0
 800435e:	2b00      	cmp	r3, #0
 8004360:	d1f1      	bne.n	8004346 <HAL_RCC_OscConfig+0x36e>
 8004362:	e027      	b.n	80043b4 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8004364:	f7ff fc18 	bl	8003b98 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004368:	f7fe fb68 	bl	8002a3c <HAL_GetTick>
 800436c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800436e:	e008      	b.n	8004382 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004370:	f7fe fb64 	bl	8002a3c <HAL_GetTick>
 8004374:	4602      	mov	r2, r0
 8004376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004378:	1ad3      	subs	r3, r2, r3
 800437a:	2b03      	cmp	r3, #3
 800437c:	d901      	bls.n	8004382 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800437e:	2303      	movs	r3, #3
 8004380:	e197      	b.n	80046b2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004382:	f7ff fc1a 	bl	8003bba <LL_RCC_LSI2_IsReady>
 8004386:	4603      	mov	r3, r0
 8004388:	2b00      	cmp	r3, #0
 800438a:	d1f1      	bne.n	8004370 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800438c:	f7ff fbd0 	bl	8003b30 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004390:	f7fe fb54 	bl	8002a3c <HAL_GetTick>
 8004394:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004396:	e008      	b.n	80043aa <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004398:	f7fe fb50 	bl	8002a3c <HAL_GetTick>
 800439c:	4602      	mov	r2, r0
 800439e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043a0:	1ad3      	subs	r3, r2, r3
 80043a2:	2b02      	cmp	r3, #2
 80043a4:	d901      	bls.n	80043aa <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 80043a6:	2303      	movs	r3, #3
 80043a8:	e183      	b.n	80046b2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80043aa:	f7ff fbd2 	bl	8003b52 <LL_RCC_LSI1_IsReady>
 80043ae:	4603      	mov	r3, r0
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d1f1      	bne.n	8004398 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f003 0304 	and.w	r3, r3, #4
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d05b      	beq.n	8004478 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043c0:	4ba7      	ldr	r3, [pc, #668]	@ (8004660 <HAL_RCC_OscConfig+0x688>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d114      	bne.n	80043f6 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80043cc:	f7ff fa70 	bl	80038b0 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043d0:	f7fe fb34 	bl	8002a3c <HAL_GetTick>
 80043d4:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043d6:	e008      	b.n	80043ea <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043d8:	f7fe fb30 	bl	8002a3c <HAL_GetTick>
 80043dc:	4602      	mov	r2, r0
 80043de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043e0:	1ad3      	subs	r3, r2, r3
 80043e2:	2b02      	cmp	r3, #2
 80043e4:	d901      	bls.n	80043ea <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 80043e6:	2303      	movs	r3, #3
 80043e8:	e163      	b.n	80046b2 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043ea:	4b9d      	ldr	r3, [pc, #628]	@ (8004660 <HAL_RCC_OscConfig+0x688>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d0f0      	beq.n	80043d8 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d102      	bne.n	8004404 <HAL_RCC_OscConfig+0x42c>
 80043fe:	f7ff fb30 	bl	8003a62 <LL_RCC_LSE_Enable>
 8004402:	e00c      	b.n	800441e <HAL_RCC_OscConfig+0x446>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	2b05      	cmp	r3, #5
 800440a:	d104      	bne.n	8004416 <HAL_RCC_OscConfig+0x43e>
 800440c:	f7ff fb4b 	bl	8003aa6 <LL_RCC_LSE_EnableBypass>
 8004410:	f7ff fb27 	bl	8003a62 <LL_RCC_LSE_Enable>
 8004414:	e003      	b.n	800441e <HAL_RCC_OscConfig+0x446>
 8004416:	f7ff fb35 	bl	8003a84 <LL_RCC_LSE_Disable>
 800441a:	f7ff fb55 	bl	8003ac8 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d014      	beq.n	8004450 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004426:	f7fe fb09 	bl	8002a3c <HAL_GetTick>
 800442a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800442c:	e00a      	b.n	8004444 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800442e:	f7fe fb05 	bl	8002a3c <HAL_GetTick>
 8004432:	4602      	mov	r2, r0
 8004434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004436:	1ad3      	subs	r3, r2, r3
 8004438:	f241 3288 	movw	r2, #5000	@ 0x1388
 800443c:	4293      	cmp	r3, r2
 800443e:	d901      	bls.n	8004444 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8004440:	2303      	movs	r3, #3
 8004442:	e136      	b.n	80046b2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8004444:	f7ff fb51 	bl	8003aea <LL_RCC_LSE_IsReady>
 8004448:	4603      	mov	r3, r0
 800444a:	2b00      	cmp	r3, #0
 800444c:	d0ef      	beq.n	800442e <HAL_RCC_OscConfig+0x456>
 800444e:	e013      	b.n	8004478 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004450:	f7fe faf4 	bl	8002a3c <HAL_GetTick>
 8004454:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8004456:	e00a      	b.n	800446e <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004458:	f7fe faf0 	bl	8002a3c <HAL_GetTick>
 800445c:	4602      	mov	r2, r0
 800445e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004460:	1ad3      	subs	r3, r2, r3
 8004462:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004466:	4293      	cmp	r3, r2
 8004468:	d901      	bls.n	800446e <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800446a:	2303      	movs	r3, #3
 800446c:	e121      	b.n	80046b2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800446e:	f7ff fb3c 	bl	8003aea <LL_RCC_LSE_IsReady>
 8004472:	4603      	mov	r3, r0
 8004474:	2b00      	cmp	r3, #0
 8004476:	d1ef      	bne.n	8004458 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004480:	2b00      	cmp	r3, #0
 8004482:	d02c      	beq.n	80044de <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004488:	2b00      	cmp	r3, #0
 800448a:	d014      	beq.n	80044b6 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800448c:	f7ff fab5 	bl	80039fa <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004490:	f7fe fad4 	bl	8002a3c <HAL_GetTick>
 8004494:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8004496:	e008      	b.n	80044aa <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004498:	f7fe fad0 	bl	8002a3c <HAL_GetTick>
 800449c:	4602      	mov	r2, r0
 800449e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044a0:	1ad3      	subs	r3, r2, r3
 80044a2:	2b02      	cmp	r3, #2
 80044a4:	d901      	bls.n	80044aa <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 80044a6:	2303      	movs	r3, #3
 80044a8:	e103      	b.n	80046b2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80044aa:	f7ff fac8 	bl	8003a3e <LL_RCC_HSI48_IsReady>
 80044ae:	4603      	mov	r3, r0
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d0f1      	beq.n	8004498 <HAL_RCC_OscConfig+0x4c0>
 80044b4:	e013      	b.n	80044de <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80044b6:	f7ff fab1 	bl	8003a1c <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044ba:	f7fe fabf 	bl	8002a3c <HAL_GetTick>
 80044be:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80044c0:	e008      	b.n	80044d4 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80044c2:	f7fe fabb 	bl	8002a3c <HAL_GetTick>
 80044c6:	4602      	mov	r2, r0
 80044c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044ca:	1ad3      	subs	r3, r2, r3
 80044cc:	2b02      	cmp	r3, #2
 80044ce:	d901      	bls.n	80044d4 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 80044d0:	2303      	movs	r3, #3
 80044d2:	e0ee      	b.n	80046b2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80044d4:	f7ff fab3 	bl	8003a3e <LL_RCC_HSI48_IsReady>
 80044d8:	4603      	mov	r3, r0
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d1f1      	bne.n	80044c2 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	f000 80e4 	beq.w	80046b0 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80044e8:	f7ff fc11 	bl	8003d0e <LL_RCC_GetSysClkSource>
 80044ec:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80044ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80044f2:	68db      	ldr	r3, [r3, #12]
 80044f4:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044fa:	2b02      	cmp	r3, #2
 80044fc:	f040 80b4 	bne.w	8004668 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	f003 0203 	and.w	r2, r3, #3
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800450a:	429a      	cmp	r2, r3
 800450c:	d123      	bne.n	8004556 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004518:	429a      	cmp	r2, r3
 800451a:	d11c      	bne.n	8004556 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	0a1b      	lsrs	r3, r3, #8
 8004520:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004528:	429a      	cmp	r2, r3
 800452a:	d114      	bne.n	8004556 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004536:	429a      	cmp	r2, r3
 8004538:	d10d      	bne.n	8004556 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004544:	429a      	cmp	r2, r3
 8004546:	d106      	bne.n	8004556 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004552:	429a      	cmp	r2, r3
 8004554:	d05d      	beq.n	8004612 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	2b0c      	cmp	r3, #12
 800455a:	d058      	beq.n	800460e <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800455c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004566:	2b00      	cmp	r3, #0
 8004568:	d001      	beq.n	800456e <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	e0a1      	b.n	80046b2 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800456e:	f7ff fc84 	bl	8003e7a <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004572:	f7fe fa63 	bl	8002a3c <HAL_GetTick>
 8004576:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004578:	e008      	b.n	800458c <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800457a:	f7fe fa5f 	bl	8002a3c <HAL_GetTick>
 800457e:	4602      	mov	r2, r0
 8004580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004582:	1ad3      	subs	r3, r2, r3
 8004584:	2b02      	cmp	r3, #2
 8004586:	d901      	bls.n	800458c <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8004588:	2303      	movs	r3, #3
 800458a:	e092      	b.n	80046b2 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800458c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004596:	2b00      	cmp	r3, #0
 8004598:	d1ef      	bne.n	800457a <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800459a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800459e:	68da      	ldr	r2, [r3, #12]
 80045a0:	4b30      	ldr	r3, [pc, #192]	@ (8004664 <HAL_RCC_OscConfig+0x68c>)
 80045a2:	4013      	ands	r3, r2
 80045a4:	687a      	ldr	r2, [r7, #4]
 80045a6:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 80045a8:	687a      	ldr	r2, [r7, #4]
 80045aa:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80045ac:	4311      	orrs	r1, r2
 80045ae:	687a      	ldr	r2, [r7, #4]
 80045b0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80045b2:	0212      	lsls	r2, r2, #8
 80045b4:	4311      	orrs	r1, r2
 80045b6:	687a      	ldr	r2, [r7, #4]
 80045b8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80045ba:	4311      	orrs	r1, r2
 80045bc:	687a      	ldr	r2, [r7, #4]
 80045be:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80045c0:	4311      	orrs	r1, r2
 80045c2:	687a      	ldr	r2, [r7, #4]
 80045c4:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80045c6:	430a      	orrs	r2, r1
 80045c8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80045cc:	4313      	orrs	r3, r2
 80045ce:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80045d0:	f7ff fc44 	bl	8003e5c <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80045d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80045d8:	68db      	ldr	r3, [r3, #12]
 80045da:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80045de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80045e2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80045e4:	f7fe fa2a 	bl	8002a3c <HAL_GetTick>
 80045e8:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045ea:	e008      	b.n	80045fe <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045ec:	f7fe fa26 	bl	8002a3c <HAL_GetTick>
 80045f0:	4602      	mov	r2, r0
 80045f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045f4:	1ad3      	subs	r3, r2, r3
 80045f6:	2b02      	cmp	r3, #2
 80045f8:	d901      	bls.n	80045fe <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 80045fa:	2303      	movs	r3, #3
 80045fc:	e059      	b.n	80046b2 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004608:	2b00      	cmp	r3, #0
 800460a:	d0ef      	beq.n	80045ec <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800460c:	e050      	b.n	80046b0 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	e04f      	b.n	80046b2 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004612:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800461c:	2b00      	cmp	r3, #0
 800461e:	d147      	bne.n	80046b0 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004620:	f7ff fc1c 	bl	8003e5c <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004624:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004628:	68db      	ldr	r3, [r3, #12]
 800462a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800462e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004632:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004634:	f7fe fa02 	bl	8002a3c <HAL_GetTick>
 8004638:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800463a:	e008      	b.n	800464e <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800463c:	f7fe f9fe 	bl	8002a3c <HAL_GetTick>
 8004640:	4602      	mov	r2, r0
 8004642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004644:	1ad3      	subs	r3, r2, r3
 8004646:	2b02      	cmp	r3, #2
 8004648:	d901      	bls.n	800464e <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800464a:	2303      	movs	r3, #3
 800464c:	e031      	b.n	80046b2 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800464e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004658:	2b00      	cmp	r3, #0
 800465a:	d0ef      	beq.n	800463c <HAL_RCC_OscConfig+0x664>
 800465c:	e028      	b.n	80046b0 <HAL_RCC_OscConfig+0x6d8>
 800465e:	bf00      	nop
 8004660:	58000400 	.word	0x58000400
 8004664:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	2b0c      	cmp	r3, #12
 800466c:	d01e      	beq.n	80046ac <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800466e:	f7ff fc04 	bl	8003e7a <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004672:	f7fe f9e3 	bl	8002a3c <HAL_GetTick>
 8004676:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004678:	e008      	b.n	800468c <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800467a:	f7fe f9df 	bl	8002a3c <HAL_GetTick>
 800467e:	4602      	mov	r2, r0
 8004680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004682:	1ad3      	subs	r3, r2, r3
 8004684:	2b02      	cmp	r3, #2
 8004686:	d901      	bls.n	800468c <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8004688:	2303      	movs	r3, #3
 800468a:	e012      	b.n	80046b2 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800468c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004696:	2b00      	cmp	r3, #0
 8004698:	d1ef      	bne.n	800467a <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800469a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800469e:	68da      	ldr	r2, [r3, #12]
 80046a0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80046a4:	4b05      	ldr	r3, [pc, #20]	@ (80046bc <HAL_RCC_OscConfig+0x6e4>)
 80046a6:	4013      	ands	r3, r2
 80046a8:	60cb      	str	r3, [r1, #12]
 80046aa:	e001      	b.n	80046b0 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80046ac:	2301      	movs	r3, #1
 80046ae:	e000      	b.n	80046b2 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 80046b0:	2300      	movs	r3, #0
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3734      	adds	r7, #52	@ 0x34
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd90      	pop	{r4, r7, pc}
 80046ba:	bf00      	nop
 80046bc:	eefefffc 	.word	0xeefefffc

080046c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b084      	sub	sp, #16
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d101      	bne.n	80046d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	e12d      	b.n	8004930 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80046d4:	4b98      	ldr	r3, [pc, #608]	@ (8004938 <HAL_RCC_ClockConfig+0x278>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f003 0307 	and.w	r3, r3, #7
 80046dc:	683a      	ldr	r2, [r7, #0]
 80046de:	429a      	cmp	r2, r3
 80046e0:	d91b      	bls.n	800471a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046e2:	4b95      	ldr	r3, [pc, #596]	@ (8004938 <HAL_RCC_ClockConfig+0x278>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f023 0207 	bic.w	r2, r3, #7
 80046ea:	4993      	ldr	r1, [pc, #588]	@ (8004938 <HAL_RCC_ClockConfig+0x278>)
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	4313      	orrs	r3, r2
 80046f0:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046f2:	f7fe f9a3 	bl	8002a3c <HAL_GetTick>
 80046f6:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046f8:	e008      	b.n	800470c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80046fa:	f7fe f99f 	bl	8002a3c <HAL_GetTick>
 80046fe:	4602      	mov	r2, r0
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	1ad3      	subs	r3, r2, r3
 8004704:	2b02      	cmp	r3, #2
 8004706:	d901      	bls.n	800470c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8004708:	2303      	movs	r3, #3
 800470a:	e111      	b.n	8004930 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800470c:	4b8a      	ldr	r3, [pc, #552]	@ (8004938 <HAL_RCC_ClockConfig+0x278>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f003 0307 	and.w	r3, r3, #7
 8004714:	683a      	ldr	r2, [r7, #0]
 8004716:	429a      	cmp	r2, r3
 8004718:	d1ef      	bne.n	80046fa <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f003 0302 	and.w	r3, r3, #2
 8004722:	2b00      	cmp	r3, #0
 8004724:	d016      	beq.n	8004754 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	4618      	mov	r0, r3
 800472c:	f7ff fafb 	bl	8003d26 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004730:	f7fe f984 	bl	8002a3c <HAL_GetTick>
 8004734:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004736:	e008      	b.n	800474a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004738:	f7fe f980 	bl	8002a3c <HAL_GetTick>
 800473c:	4602      	mov	r2, r0
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	1ad3      	subs	r3, r2, r3
 8004742:	2b02      	cmp	r3, #2
 8004744:	d901      	bls.n	800474a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8004746:	2303      	movs	r3, #3
 8004748:	e0f2      	b.n	8004930 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800474a:	f7ff fbe8 	bl	8003f1e <LL_RCC_IsActiveFlag_HPRE>
 800474e:	4603      	mov	r3, r0
 8004750:	2b00      	cmp	r3, #0
 8004752:	d0f1      	beq.n	8004738 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f003 0320 	and.w	r3, r3, #32
 800475c:	2b00      	cmp	r3, #0
 800475e:	d016      	beq.n	800478e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	695b      	ldr	r3, [r3, #20]
 8004764:	4618      	mov	r0, r3
 8004766:	f7ff faf2 	bl	8003d4e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800476a:	f7fe f967 	bl	8002a3c <HAL_GetTick>
 800476e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004770:	e008      	b.n	8004784 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004772:	f7fe f963 	bl	8002a3c <HAL_GetTick>
 8004776:	4602      	mov	r2, r0
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	1ad3      	subs	r3, r2, r3
 800477c:	2b02      	cmp	r3, #2
 800477e:	d901      	bls.n	8004784 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8004780:	2303      	movs	r3, #3
 8004782:	e0d5      	b.n	8004930 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004784:	f7ff fbdd 	bl	8003f42 <LL_RCC_IsActiveFlag_C2HPRE>
 8004788:	4603      	mov	r3, r0
 800478a:	2b00      	cmp	r3, #0
 800478c:	d0f1      	beq.n	8004772 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004796:	2b00      	cmp	r3, #0
 8004798:	d016      	beq.n	80047c8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	699b      	ldr	r3, [r3, #24]
 800479e:	4618      	mov	r0, r3
 80047a0:	f7ff faeb 	bl	8003d7a <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80047a4:	f7fe f94a 	bl	8002a3c <HAL_GetTick>
 80047a8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80047aa:	e008      	b.n	80047be <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80047ac:	f7fe f946 	bl	8002a3c <HAL_GetTick>
 80047b0:	4602      	mov	r2, r0
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	1ad3      	subs	r3, r2, r3
 80047b6:	2b02      	cmp	r3, #2
 80047b8:	d901      	bls.n	80047be <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80047ba:	2303      	movs	r3, #3
 80047bc:	e0b8      	b.n	8004930 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80047be:	f7ff fbd3 	bl	8003f68 <LL_RCC_IsActiveFlag_SHDHPRE>
 80047c2:	4603      	mov	r3, r0
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d0f1      	beq.n	80047ac <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f003 0304 	and.w	r3, r3, #4
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d016      	beq.n	8004802 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	68db      	ldr	r3, [r3, #12]
 80047d8:	4618      	mov	r0, r3
 80047da:	f7ff fae5 	bl	8003da8 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80047de:	f7fe f92d 	bl	8002a3c <HAL_GetTick>
 80047e2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80047e4:	e008      	b.n	80047f8 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80047e6:	f7fe f929 	bl	8002a3c <HAL_GetTick>
 80047ea:	4602      	mov	r2, r0
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	1ad3      	subs	r3, r2, r3
 80047f0:	2b02      	cmp	r3, #2
 80047f2:	d901      	bls.n	80047f8 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80047f4:	2303      	movs	r3, #3
 80047f6:	e09b      	b.n	8004930 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80047f8:	f7ff fbc9 	bl	8003f8e <LL_RCC_IsActiveFlag_PPRE1>
 80047fc:	4603      	mov	r3, r0
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d0f1      	beq.n	80047e6 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 0308 	and.w	r3, r3, #8
 800480a:	2b00      	cmp	r3, #0
 800480c:	d017      	beq.n	800483e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	691b      	ldr	r3, [r3, #16]
 8004812:	00db      	lsls	r3, r3, #3
 8004814:	4618      	mov	r0, r3
 8004816:	f7ff fadb 	bl	8003dd0 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800481a:	f7fe f90f 	bl	8002a3c <HAL_GetTick>
 800481e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004820:	e008      	b.n	8004834 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004822:	f7fe f90b 	bl	8002a3c <HAL_GetTick>
 8004826:	4602      	mov	r2, r0
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	1ad3      	subs	r3, r2, r3
 800482c:	2b02      	cmp	r3, #2
 800482e:	d901      	bls.n	8004834 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8004830:	2303      	movs	r3, #3
 8004832:	e07d      	b.n	8004930 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004834:	f7ff fbbd 	bl	8003fb2 <LL_RCC_IsActiveFlag_PPRE2>
 8004838:	4603      	mov	r3, r0
 800483a:	2b00      	cmp	r3, #0
 800483c:	d0f1      	beq.n	8004822 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 0301 	and.w	r3, r3, #1
 8004846:	2b00      	cmp	r3, #0
 8004848:	d043      	beq.n	80048d2 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	2b02      	cmp	r3, #2
 8004850:	d106      	bne.n	8004860 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8004852:	f7ff f87b 	bl	800394c <LL_RCC_HSE_IsReady>
 8004856:	4603      	mov	r3, r0
 8004858:	2b00      	cmp	r3, #0
 800485a:	d11e      	bne.n	800489a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	e067      	b.n	8004930 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	2b03      	cmp	r3, #3
 8004866:	d106      	bne.n	8004876 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8004868:	f7ff fb16 	bl	8003e98 <LL_RCC_PLL_IsReady>
 800486c:	4603      	mov	r3, r0
 800486e:	2b00      	cmp	r3, #0
 8004870:	d113      	bne.n	800489a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	e05c      	b.n	8004930 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d106      	bne.n	800488c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800487e:	f7ff f9e3 	bl	8003c48 <LL_RCC_MSI_IsReady>
 8004882:	4603      	mov	r3, r0
 8004884:	2b00      	cmp	r3, #0
 8004886:	d108      	bne.n	800489a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004888:	2301      	movs	r3, #1
 800488a:	e051      	b.n	8004930 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800488c:	f7ff f88e 	bl	80039ac <LL_RCC_HSI_IsReady>
 8004890:	4603      	mov	r3, r0
 8004892:	2b00      	cmp	r3, #0
 8004894:	d101      	bne.n	800489a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	e04a      	b.n	8004930 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	4618      	mov	r0, r3
 80048a0:	f7ff fa21 	bl	8003ce6 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048a4:	f7fe f8ca 	bl	8002a3c <HAL_GetTick>
 80048a8:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048aa:	e00a      	b.n	80048c2 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048ac:	f7fe f8c6 	bl	8002a3c <HAL_GetTick>
 80048b0:	4602      	mov	r2, r0
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	1ad3      	subs	r3, r2, r3
 80048b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d901      	bls.n	80048c2 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80048be:	2303      	movs	r3, #3
 80048c0:	e036      	b.n	8004930 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048c2:	f7ff fa24 	bl	8003d0e <LL_RCC_GetSysClkSource>
 80048c6:	4602      	mov	r2, r0
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	009b      	lsls	r3, r3, #2
 80048ce:	429a      	cmp	r2, r3
 80048d0:	d1ec      	bne.n	80048ac <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80048d2:	4b19      	ldr	r3, [pc, #100]	@ (8004938 <HAL_RCC_ClockConfig+0x278>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 0307 	and.w	r3, r3, #7
 80048da:	683a      	ldr	r2, [r7, #0]
 80048dc:	429a      	cmp	r2, r3
 80048de:	d21b      	bcs.n	8004918 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048e0:	4b15      	ldr	r3, [pc, #84]	@ (8004938 <HAL_RCC_ClockConfig+0x278>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f023 0207 	bic.w	r2, r3, #7
 80048e8:	4913      	ldr	r1, [pc, #76]	@ (8004938 <HAL_RCC_ClockConfig+0x278>)
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	4313      	orrs	r3, r2
 80048ee:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048f0:	f7fe f8a4 	bl	8002a3c <HAL_GetTick>
 80048f4:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048f6:	e008      	b.n	800490a <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80048f8:	f7fe f8a0 	bl	8002a3c <HAL_GetTick>
 80048fc:	4602      	mov	r2, r0
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	1ad3      	subs	r3, r2, r3
 8004902:	2b02      	cmp	r3, #2
 8004904:	d901      	bls.n	800490a <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8004906:	2303      	movs	r3, #3
 8004908:	e012      	b.n	8004930 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800490a:	4b0b      	ldr	r3, [pc, #44]	@ (8004938 <HAL_RCC_ClockConfig+0x278>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f003 0307 	and.w	r3, r3, #7
 8004912:	683a      	ldr	r2, [r7, #0]
 8004914:	429a      	cmp	r2, r3
 8004916:	d1ef      	bne.n	80048f8 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004918:	f000 f87e 	bl	8004a18 <HAL_RCC_GetHCLKFreq>
 800491c:	4603      	mov	r3, r0
 800491e:	4a07      	ldr	r2, [pc, #28]	@ (800493c <HAL_RCC_ClockConfig+0x27c>)
 8004920:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8004922:	f7fe f897 	bl	8002a54 <HAL_GetTickPrio>
 8004926:	4603      	mov	r3, r0
 8004928:	4618      	mov	r0, r3
 800492a:	f7fe f839 	bl	80029a0 <HAL_InitTick>
 800492e:	4603      	mov	r3, r0
}
 8004930:	4618      	mov	r0, r3
 8004932:	3710      	adds	r7, #16
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}
 8004938:	58004000 	.word	0x58004000
 800493c:	20000008 	.word	0x20000008

08004940 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004940:	b590      	push	{r4, r7, lr}
 8004942:	b085      	sub	sp, #20
 8004944:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004946:	f7ff f9e2 	bl	8003d0e <LL_RCC_GetSysClkSource>
 800494a:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d10a      	bne.n	8004968 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004952:	f7ff f99e 	bl	8003c92 <LL_RCC_MSI_GetRange>
 8004956:	4603      	mov	r3, r0
 8004958:	091b      	lsrs	r3, r3, #4
 800495a:	f003 030f 	and.w	r3, r3, #15
 800495e:	4a2b      	ldr	r2, [pc, #172]	@ (8004a0c <HAL_RCC_GetSysClockFreq+0xcc>)
 8004960:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004964:	60fb      	str	r3, [r7, #12]
 8004966:	e04b      	b.n	8004a00 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2b04      	cmp	r3, #4
 800496c:	d102      	bne.n	8004974 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800496e:	4b28      	ldr	r3, [pc, #160]	@ (8004a10 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004970:	60fb      	str	r3, [r7, #12]
 8004972:	e045      	b.n	8004a00 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2b08      	cmp	r3, #8
 8004978:	d10a      	bne.n	8004990 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800497a:	f7fe ffb7 	bl	80038ec <LL_RCC_HSE_IsEnabledDiv2>
 800497e:	4603      	mov	r3, r0
 8004980:	2b01      	cmp	r3, #1
 8004982:	d102      	bne.n	800498a <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8004984:	4b22      	ldr	r3, [pc, #136]	@ (8004a10 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004986:	60fb      	str	r3, [r7, #12]
 8004988:	e03a      	b.n	8004a00 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800498a:	4b22      	ldr	r3, [pc, #136]	@ (8004a14 <HAL_RCC_GetSysClockFreq+0xd4>)
 800498c:	60fb      	str	r3, [r7, #12]
 800498e:	e037      	b.n	8004a00 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8004990:	f7ff fab9 	bl	8003f06 <LL_RCC_PLL_GetMainSource>
 8004994:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	2b02      	cmp	r3, #2
 800499a:	d003      	beq.n	80049a4 <HAL_RCC_GetSysClockFreq+0x64>
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	2b03      	cmp	r3, #3
 80049a0:	d003      	beq.n	80049aa <HAL_RCC_GetSysClockFreq+0x6a>
 80049a2:	e00d      	b.n	80049c0 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80049a4:	4b1a      	ldr	r3, [pc, #104]	@ (8004a10 <HAL_RCC_GetSysClockFreq+0xd0>)
 80049a6:	60bb      	str	r3, [r7, #8]
        break;
 80049a8:	e015      	b.n	80049d6 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80049aa:	f7fe ff9f 	bl	80038ec <LL_RCC_HSE_IsEnabledDiv2>
 80049ae:	4603      	mov	r3, r0
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	d102      	bne.n	80049ba <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80049b4:	4b16      	ldr	r3, [pc, #88]	@ (8004a10 <HAL_RCC_GetSysClockFreq+0xd0>)
 80049b6:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80049b8:	e00d      	b.n	80049d6 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 80049ba:	4b16      	ldr	r3, [pc, #88]	@ (8004a14 <HAL_RCC_GetSysClockFreq+0xd4>)
 80049bc:	60bb      	str	r3, [r7, #8]
        break;
 80049be:	e00a      	b.n	80049d6 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80049c0:	f7ff f967 	bl	8003c92 <LL_RCC_MSI_GetRange>
 80049c4:	4603      	mov	r3, r0
 80049c6:	091b      	lsrs	r3, r3, #4
 80049c8:	f003 030f 	and.w	r3, r3, #15
 80049cc:	4a0f      	ldr	r2, [pc, #60]	@ (8004a0c <HAL_RCC_GetSysClockFreq+0xcc>)
 80049ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049d2:	60bb      	str	r3, [r7, #8]
        break;
 80049d4:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 80049d6:	f7ff fa71 	bl	8003ebc <LL_RCC_PLL_GetN>
 80049da:	4602      	mov	r2, r0
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	fb03 f402 	mul.w	r4, r3, r2
 80049e2:	f7ff fa84 	bl	8003eee <LL_RCC_PLL_GetDivider>
 80049e6:	4603      	mov	r3, r0
 80049e8:	091b      	lsrs	r3, r3, #4
 80049ea:	3301      	adds	r3, #1
 80049ec:	fbb4 f4f3 	udiv	r4, r4, r3
 80049f0:	f7ff fa71 	bl	8003ed6 <LL_RCC_PLL_GetR>
 80049f4:	4603      	mov	r3, r0
 80049f6:	0f5b      	lsrs	r3, r3, #29
 80049f8:	3301      	adds	r3, #1
 80049fa:	fbb4 f3f3 	udiv	r3, r4, r3
 80049fe:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8004a00:	68fb      	ldr	r3, [r7, #12]
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	3714      	adds	r7, #20
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd90      	pop	{r4, r7, pc}
 8004a0a:	bf00      	nop
 8004a0c:	0800e954 	.word	0x0800e954
 8004a10:	00f42400 	.word	0x00f42400
 8004a14:	01e84800 	.word	0x01e84800

08004a18 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a18:	b598      	push	{r3, r4, r7, lr}
 8004a1a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8004a1c:	f7ff ff90 	bl	8004940 <HAL_RCC_GetSysClockFreq>
 8004a20:	4604      	mov	r4, r0
 8004a22:	f7ff f9e9 	bl	8003df8 <LL_RCC_GetAHBPrescaler>
 8004a26:	4603      	mov	r3, r0
 8004a28:	091b      	lsrs	r3, r3, #4
 8004a2a:	f003 030f 	and.w	r3, r3, #15
 8004a2e:	4a03      	ldr	r2, [pc, #12]	@ (8004a3c <HAL_RCC_GetHCLKFreq+0x24>)
 8004a30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a34:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	bd98      	pop	{r3, r4, r7, pc}
 8004a3c:	0800e8f4 	.word	0x0800e8f4

08004a40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a40:	b598      	push	{r3, r4, r7, lr}
 8004a42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004a44:	f7ff ffe8 	bl	8004a18 <HAL_RCC_GetHCLKFreq>
 8004a48:	4604      	mov	r4, r0
 8004a4a:	f7ff f9ef 	bl	8003e2c <LL_RCC_GetAPB1Prescaler>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	0a1b      	lsrs	r3, r3, #8
 8004a52:	f003 0307 	and.w	r3, r3, #7
 8004a56:	4a04      	ldr	r2, [pc, #16]	@ (8004a68 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004a58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a5c:	f003 031f 	and.w	r3, r3, #31
 8004a60:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	bd98      	pop	{r3, r4, r7, pc}
 8004a68:	0800e934 	.word	0x0800e934

08004a6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a6c:	b598      	push	{r3, r4, r7, lr}
 8004a6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8004a70:	f7ff ffd2 	bl	8004a18 <HAL_RCC_GetHCLKFreq>
 8004a74:	4604      	mov	r4, r0
 8004a76:	f7ff f9e5 	bl	8003e44 <LL_RCC_GetAPB2Prescaler>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	0adb      	lsrs	r3, r3, #11
 8004a7e:	f003 0307 	and.w	r3, r3, #7
 8004a82:	4a04      	ldr	r2, [pc, #16]	@ (8004a94 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004a84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a88:	f003 031f 	and.w	r3, r3, #31
 8004a8c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	bd98      	pop	{r3, r4, r7, pc}
 8004a94:	0800e934 	.word	0x0800e934

08004a98 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8004a98:	b590      	push	{r4, r7, lr}
 8004a9a:	b085      	sub	sp, #20
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2bb0      	cmp	r3, #176	@ 0xb0
 8004aa4:	d903      	bls.n	8004aae <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8004aa6:	4b15      	ldr	r3, [pc, #84]	@ (8004afc <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004aa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004aaa:	60fb      	str	r3, [r7, #12]
 8004aac:	e007      	b.n	8004abe <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	091b      	lsrs	r3, r3, #4
 8004ab2:	f003 030f 	and.w	r3, r3, #15
 8004ab6:	4a11      	ldr	r2, [pc, #68]	@ (8004afc <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004ab8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004abc:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8004abe:	f7ff f9a7 	bl	8003e10 <LL_RCC_GetAHB4Prescaler>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	091b      	lsrs	r3, r3, #4
 8004ac6:	f003 030f 	and.w	r3, r3, #15
 8004aca:	4a0d      	ldr	r2, [pc, #52]	@ (8004b00 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8004acc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ad0:	68fa      	ldr	r2, [r7, #12]
 8004ad2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ad6:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	4a0a      	ldr	r2, [pc, #40]	@ (8004b04 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8004adc:	fba2 2303 	umull	r2, r3, r2, r3
 8004ae0:	0c9c      	lsrs	r4, r3, #18
 8004ae2:	f7fe fef5 	bl	80038d0 <HAL_PWREx_GetVoltageRange>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	4619      	mov	r1, r3
 8004aea:	4620      	mov	r0, r4
 8004aec:	f000 f80c 	bl	8004b08 <RCC_SetFlashLatency>
 8004af0:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	3714      	adds	r7, #20
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd90      	pop	{r4, r7, pc}
 8004afa:	bf00      	nop
 8004afc:	0800e954 	.word	0x0800e954
 8004b00:	0800e8f4 	.word	0x0800e8f4
 8004b04:	431bde83 	.word	0x431bde83

08004b08 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8004b08:	b590      	push	{r4, r7, lr}
 8004b0a:	b093      	sub	sp, #76	@ 0x4c
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8004b12:	4b37      	ldr	r3, [pc, #220]	@ (8004bf0 <RCC_SetFlashLatency+0xe8>)
 8004b14:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8004b18:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004b1a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8004b1e:	4a35      	ldr	r2, [pc, #212]	@ (8004bf4 <RCC_SetFlashLatency+0xec>)
 8004b20:	f107 031c 	add.w	r3, r7, #28
 8004b24:	ca07      	ldmia	r2, {r0, r1, r2}
 8004b26:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8004b2a:	4b33      	ldr	r3, [pc, #204]	@ (8004bf8 <RCC_SetFlashLatency+0xf0>)
 8004b2c:	f107 040c 	add.w	r4, r7, #12
 8004b30:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004b32:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8004b36:	2300      	movs	r3, #0
 8004b38:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b40:	d11a      	bne.n	8004b78 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004b42:	2300      	movs	r3, #0
 8004b44:	643b      	str	r3, [r7, #64]	@ 0x40
 8004b46:	e013      	b.n	8004b70 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8004b48:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b4a:	009b      	lsls	r3, r3, #2
 8004b4c:	3348      	adds	r3, #72	@ 0x48
 8004b4e:	443b      	add	r3, r7
 8004b50:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8004b54:	687a      	ldr	r2, [r7, #4]
 8004b56:	429a      	cmp	r2, r3
 8004b58:	d807      	bhi.n	8004b6a <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004b5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b5c:	009b      	lsls	r3, r3, #2
 8004b5e:	3348      	adds	r3, #72	@ 0x48
 8004b60:	443b      	add	r3, r7
 8004b62:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8004b66:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8004b68:	e020      	b.n	8004bac <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004b6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b6c:	3301      	adds	r3, #1
 8004b6e:	643b      	str	r3, [r7, #64]	@ 0x40
 8004b70:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b72:	2b03      	cmp	r3, #3
 8004b74:	d9e8      	bls.n	8004b48 <RCC_SetFlashLatency+0x40>
 8004b76:	e019      	b.n	8004bac <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004b78:	2300      	movs	r3, #0
 8004b7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004b7c:	e013      	b.n	8004ba6 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8004b7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b80:	009b      	lsls	r3, r3, #2
 8004b82:	3348      	adds	r3, #72	@ 0x48
 8004b84:	443b      	add	r3, r7
 8004b86:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8004b8a:	687a      	ldr	r2, [r7, #4]
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	d807      	bhi.n	8004ba0 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004b90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b92:	009b      	lsls	r3, r3, #2
 8004b94:	3348      	adds	r3, #72	@ 0x48
 8004b96:	443b      	add	r3, r7
 8004b98:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8004b9c:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8004b9e:	e005      	b.n	8004bac <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004ba0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ba2:	3301      	adds	r3, #1
 8004ba4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004ba6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ba8:	2b02      	cmp	r3, #2
 8004baa:	d9e8      	bls.n	8004b7e <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8004bac:	4b13      	ldr	r3, [pc, #76]	@ (8004bfc <RCC_SetFlashLatency+0xf4>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f023 0207 	bic.w	r2, r3, #7
 8004bb4:	4911      	ldr	r1, [pc, #68]	@ (8004bfc <RCC_SetFlashLatency+0xf4>)
 8004bb6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004bbc:	f7fd ff3e 	bl	8002a3c <HAL_GetTick>
 8004bc0:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004bc2:	e008      	b.n	8004bd6 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004bc4:	f7fd ff3a 	bl	8002a3c <HAL_GetTick>
 8004bc8:	4602      	mov	r2, r0
 8004bca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bcc:	1ad3      	subs	r3, r2, r3
 8004bce:	2b02      	cmp	r3, #2
 8004bd0:	d901      	bls.n	8004bd6 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8004bd2:	2303      	movs	r3, #3
 8004bd4:	e007      	b.n	8004be6 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004bd6:	4b09      	ldr	r3, [pc, #36]	@ (8004bfc <RCC_SetFlashLatency+0xf4>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f003 0307 	and.w	r3, r3, #7
 8004bde:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004be0:	429a      	cmp	r2, r3
 8004be2:	d1ef      	bne.n	8004bc4 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8004be4:	2300      	movs	r3, #0
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	374c      	adds	r7, #76	@ 0x4c
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd90      	pop	{r4, r7, pc}
 8004bee:	bf00      	nop
 8004bf0:	0800d670 	.word	0x0800d670
 8004bf4:	0800d680 	.word	0x0800d680
 8004bf8:	0800d68c 	.word	0x0800d68c
 8004bfc:	58004000 	.word	0x58004000

08004c00 <LL_RCC_LSE_IsEnabled>:
{
 8004c00:	b480      	push	{r7}
 8004c02:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8004c04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004c08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c0c:	f003 0301 	and.w	r3, r3, #1
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	d101      	bne.n	8004c18 <LL_RCC_LSE_IsEnabled+0x18>
 8004c14:	2301      	movs	r3, #1
 8004c16:	e000      	b.n	8004c1a <LL_RCC_LSE_IsEnabled+0x1a>
 8004c18:	2300      	movs	r3, #0
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c22:	4770      	bx	lr

08004c24 <LL_RCC_LSE_IsReady>:
{
 8004c24:	b480      	push	{r7}
 8004c26:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004c28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004c2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c30:	f003 0302 	and.w	r3, r3, #2
 8004c34:	2b02      	cmp	r3, #2
 8004c36:	d101      	bne.n	8004c3c <LL_RCC_LSE_IsReady+0x18>
 8004c38:	2301      	movs	r3, #1
 8004c3a:	e000      	b.n	8004c3e <LL_RCC_LSE_IsReady+0x1a>
 8004c3c:	2300      	movs	r3, #0
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	46bd      	mov	sp, r7
 8004c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c46:	4770      	bx	lr

08004c48 <LL_RCC_SetRFWKPClockSource>:
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b083      	sub	sp, #12
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8004c50:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004c54:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c58:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004c5c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	4313      	orrs	r3, r2
 8004c64:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8004c68:	bf00      	nop
 8004c6a:	370c      	adds	r7, #12
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c72:	4770      	bx	lr

08004c74 <LL_RCC_SetSMPSClockSource>:
{
 8004c74:	b480      	push	{r7}
 8004c76:	b083      	sub	sp, #12
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8004c7c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004c80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c82:	f023 0203 	bic.w	r2, r3, #3
 8004c86:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8004c90:	bf00      	nop
 8004c92:	370c      	adds	r7, #12
 8004c94:	46bd      	mov	sp, r7
 8004c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9a:	4770      	bx	lr

08004c9c <LL_RCC_SetSMPSPrescaler>:
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b083      	sub	sp, #12
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8004ca4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ca8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004caa:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004cae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8004cb8:	bf00      	nop
 8004cba:	370c      	adds	r7, #12
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc2:	4770      	bx	lr

08004cc4 <LL_RCC_SetUSARTClockSource>:
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b083      	sub	sp, #12
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8004ccc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004cd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cd4:	f023 0203 	bic.w	r2, r3, #3
 8004cd8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004ce4:	bf00      	nop
 8004ce6:	370c      	adds	r7, #12
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cee:	4770      	bx	lr

08004cf0 <LL_RCC_SetLPUARTClockSource>:
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b083      	sub	sp, #12
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8004cf8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004cfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d00:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004d04:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004d10:	bf00      	nop
 8004d12:	370c      	adds	r7, #12
 8004d14:	46bd      	mov	sp, r7
 8004d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1a:	4770      	bx	lr

08004d1c <LL_RCC_SetI2CClockSource>:
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b083      	sub	sp, #12
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8004d24:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d28:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	091b      	lsrs	r3, r3, #4
 8004d30:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8004d34:	43db      	mvns	r3, r3
 8004d36:	401a      	ands	r2, r3
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	011b      	lsls	r3, r3, #4
 8004d3c:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8004d40:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004d44:	4313      	orrs	r3, r2
 8004d46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004d4a:	bf00      	nop
 8004d4c:	370c      	adds	r7, #12
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d54:	4770      	bx	lr

08004d56 <LL_RCC_SetLPTIMClockSource>:
{
 8004d56:	b480      	push	{r7}
 8004d58:	b083      	sub	sp, #12
 8004d5a:	af00      	add	r7, sp, #0
 8004d5c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8004d5e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d62:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	0c1b      	lsrs	r3, r3, #16
 8004d6a:	041b      	lsls	r3, r3, #16
 8004d6c:	43db      	mvns	r3, r3
 8004d6e:	401a      	ands	r2, r3
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	041b      	lsls	r3, r3, #16
 8004d74:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004d7e:	bf00      	nop
 8004d80:	370c      	adds	r7, #12
 8004d82:	46bd      	mov	sp, r7
 8004d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d88:	4770      	bx	lr

08004d8a <LL_RCC_SetSAIClockSource>:
{
 8004d8a:	b480      	push	{r7}
 8004d8c:	b083      	sub	sp, #12
 8004d8e:	af00      	add	r7, sp, #0
 8004d90:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8004d92:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d9a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004d9e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	4313      	orrs	r3, r2
 8004da6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004daa:	bf00      	nop
 8004dac:	370c      	adds	r7, #12
 8004dae:	46bd      	mov	sp, r7
 8004db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db4:	4770      	bx	lr

08004db6 <LL_RCC_SetRNGClockSource>:
{
 8004db6:	b480      	push	{r7}
 8004db8:	b083      	sub	sp, #12
 8004dba:	af00      	add	r7, sp, #0
 8004dbc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8004dbe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dc6:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8004dca:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004dd6:	bf00      	nop
 8004dd8:	370c      	adds	r7, #12
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr

08004de2 <LL_RCC_SetCLK48ClockSource>:
{
 8004de2:	b480      	push	{r7}
 8004de4:	b083      	sub	sp, #12
 8004de6:	af00      	add	r7, sp, #0
 8004de8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8004dea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004df2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004df6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004e02:	bf00      	nop
 8004e04:	370c      	adds	r7, #12
 8004e06:	46bd      	mov	sp, r7
 8004e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0c:	4770      	bx	lr

08004e0e <LL_RCC_SetUSBClockSource>:
{
 8004e0e:	b580      	push	{r7, lr}
 8004e10:	b082      	sub	sp, #8
 8004e12:	af00      	add	r7, sp, #0
 8004e14:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f7ff ffe3 	bl	8004de2 <LL_RCC_SetCLK48ClockSource>
}
 8004e1c:	bf00      	nop
 8004e1e:	3708      	adds	r7, #8
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd80      	pop	{r7, pc}

08004e24 <LL_RCC_SetADCClockSource>:
{
 8004e24:	b480      	push	{r7}
 8004e26:	b083      	sub	sp, #12
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8004e2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e34:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004e38:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004e44:	bf00      	nop
 8004e46:	370c      	adds	r7, #12
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4e:	4770      	bx	lr

08004e50 <LL_RCC_SetRTCClockSource>:
{
 8004e50:	b480      	push	{r7}
 8004e52:	b083      	sub	sp, #12
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8004e58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e60:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004e64:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8004e70:	bf00      	nop
 8004e72:	370c      	adds	r7, #12
 8004e74:	46bd      	mov	sp, r7
 8004e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7a:	4770      	bx	lr

08004e7c <LL_RCC_GetRTCClockSource>:
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8004e80:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e88:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e94:	4770      	bx	lr

08004e96 <LL_RCC_ForceBackupDomainReset>:
{
 8004e96:	b480      	push	{r7}
 8004e98:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004e9a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ea2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004ea6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004eaa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8004eae:	bf00      	nop
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb6:	4770      	bx	lr

08004eb8 <LL_RCC_ReleaseBackupDomainReset>:
{
 8004eb8:	b480      	push	{r7}
 8004eba:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004ebc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ec0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ec4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004ec8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ecc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8004ed0:	bf00      	nop
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed8:	4770      	bx	lr

08004eda <LL_RCC_PLLSAI1_Enable>:
{
 8004eda:	b480      	push	{r7}
 8004edc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8004ede:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004ee8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004eec:	6013      	str	r3, [r2, #0]
}
 8004eee:	bf00      	nop
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef6:	4770      	bx	lr

08004ef8 <LL_RCC_PLLSAI1_Disable>:
{
 8004ef8:	b480      	push	{r7}
 8004efa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8004efc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004f06:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004f0a:	6013      	str	r3, [r2, #0]
}
 8004f0c:	bf00      	nop
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f14:	4770      	bx	lr

08004f16 <LL_RCC_PLLSAI1_IsReady>:
{
 8004f16:	b480      	push	{r7}
 8004f18:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8004f1a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f24:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004f28:	d101      	bne.n	8004f2e <LL_RCC_PLLSAI1_IsReady+0x18>
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	e000      	b.n	8004f30 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8004f2e:	2300      	movs	r3, #0
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	46bd      	mov	sp, r7
 8004f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f38:	4770      	bx	lr

08004f3a <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f3a:	b580      	push	{r7, lr}
 8004f3c:	b088      	sub	sp, #32
 8004f3e:	af00      	add	r7, sp, #0
 8004f40:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8004f42:	2300      	movs	r3, #0
 8004f44:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8004f46:	2300      	movs	r3, #0
 8004f48:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d034      	beq.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f5a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004f5e:	d021      	beq.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8004f60:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004f64:	d81b      	bhi.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004f66:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004f6a:	d01d      	beq.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8004f6c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004f70:	d815      	bhi.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d00b      	beq.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x54>
 8004f76:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004f7a:	d110      	bne.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8004f7c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f80:	68db      	ldr	r3, [r3, #12]
 8004f82:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004f86:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f8a:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8004f8c:	e00d      	b.n	8004faa <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	3304      	adds	r3, #4
 8004f92:	4618      	mov	r0, r3
 8004f94:	f000 f947 	bl	8005226 <RCCEx_PLLSAI1_ConfigNP>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004f9c:	e005      	b.n	8004faa <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	77fb      	strb	r3, [r7, #31]
        break;
 8004fa2:	e002      	b.n	8004faa <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8004fa4:	bf00      	nop
 8004fa6:	e000      	b.n	8004faa <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8004fa8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004faa:	7ffb      	ldrb	r3, [r7, #31]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d105      	bne.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	f7ff fee8 	bl	8004d8a <LL_RCC_SetSAIClockSource>
 8004fba:	e001      	b.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fbc:	7ffb      	ldrb	r3, [r7, #31]
 8004fbe:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d046      	beq.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8004fcc:	f7ff ff56 	bl	8004e7c <LL_RCC_GetRTCClockSource>
 8004fd0:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fd6:	69ba      	ldr	r2, [r7, #24]
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	d03c      	beq.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004fdc:	f7fe fc68 	bl	80038b0 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8004fe0:	69bb      	ldr	r3, [r7, #24]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d105      	bne.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fea:	4618      	mov	r0, r3
 8004fec:	f7ff ff30 	bl	8004e50 <LL_RCC_SetRTCClockSource>
 8004ff0:	e02e      	b.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8004ff2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ff6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ffa:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8004ffc:	f7ff ff4b 	bl	8004e96 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8005000:	f7ff ff5a 	bl	8004eb8 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800500e:	4313      	orrs	r3, r2
 8005010:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8005012:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800501c:	f7ff fdf0 	bl	8004c00 <LL_RCC_LSE_IsEnabled>
 8005020:	4603      	mov	r3, r0
 8005022:	2b01      	cmp	r3, #1
 8005024:	d114      	bne.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005026:	f7fd fd09 	bl	8002a3c <HAL_GetTick>
 800502a:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800502c:	e00b      	b.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800502e:	f7fd fd05 	bl	8002a3c <HAL_GetTick>
 8005032:	4602      	mov	r2, r0
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	1ad3      	subs	r3, r2, r3
 8005038:	f241 3288 	movw	r2, #5000	@ 0x1388
 800503c:	4293      	cmp	r3, r2
 800503e:	d902      	bls.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8005040:	2303      	movs	r3, #3
 8005042:	77fb      	strb	r3, [r7, #31]
              break;
 8005044:	e004      	b.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8005046:	f7ff fded 	bl	8004c24 <LL_RCC_LSE_IsReady>
 800504a:	4603      	mov	r3, r0
 800504c:	2b01      	cmp	r3, #1
 800504e:	d1ee      	bne.n	800502e <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8005050:	7ffb      	ldrb	r3, [r7, #31]
 8005052:	77bb      	strb	r3, [r7, #30]
 8005054:	e001      	b.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005056:	7ffb      	ldrb	r3, [r7, #31]
 8005058:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f003 0301 	and.w	r3, r3, #1
 8005062:	2b00      	cmp	r3, #0
 8005064:	d004      	beq.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	699b      	ldr	r3, [r3, #24]
 800506a:	4618      	mov	r0, r3
 800506c:	f7ff fe2a 	bl	8004cc4 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f003 0302 	and.w	r3, r3, #2
 8005078:	2b00      	cmp	r3, #0
 800507a:	d004      	beq.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	69db      	ldr	r3, [r3, #28]
 8005080:	4618      	mov	r0, r3
 8005082:	f7ff fe35 	bl	8004cf0 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f003 0310 	and.w	r3, r3, #16
 800508e:	2b00      	cmp	r3, #0
 8005090:	d004      	beq.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005096:	4618      	mov	r0, r3
 8005098:	f7ff fe5d 	bl	8004d56 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f003 0320 	and.w	r3, r3, #32
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d004      	beq.n	80050b2 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050ac:	4618      	mov	r0, r3
 80050ae:	f7ff fe52 	bl	8004d56 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f003 0304 	and.w	r3, r3, #4
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d004      	beq.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6a1b      	ldr	r3, [r3, #32]
 80050c2:	4618      	mov	r0, r3
 80050c4:	f7ff fe2a 	bl	8004d1c <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f003 0308 	and.w	r3, r3, #8
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d004      	beq.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050d8:	4618      	mov	r0, r3
 80050da:	f7ff fe1f 	bl	8004d1c <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d022      	beq.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050ee:	4618      	mov	r0, r3
 80050f0:	f7ff fe8d 	bl	8004e0e <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050f8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80050fc:	d107      	bne.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80050fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005102:	68db      	ldr	r3, [r3, #12]
 8005104:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005108:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800510c:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005112:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005116:	d10b      	bne.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	3304      	adds	r3, #4
 800511c:	4618      	mov	r0, r3
 800511e:	f000 f8dd 	bl	80052dc <RCCEx_PLLSAI1_ConfigNQ>
 8005122:	4603      	mov	r3, r0
 8005124:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005126:	7ffb      	ldrb	r3, [r7, #31]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d001      	beq.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 800512c:	7ffb      	ldrb	r3, [r7, #31]
 800512e:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005138:	2b00      	cmp	r3, #0
 800513a:	d02b      	beq.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005140:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005144:	d008      	beq.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800514a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800514e:	d003      	beq.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005154:	2b00      	cmp	r3, #0
 8005156:	d105      	bne.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800515c:	4618      	mov	r0, r3
 800515e:	f7ff fe2a 	bl	8004db6 <LL_RCC_SetRNGClockSource>
 8005162:	e00a      	b.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x240>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005168:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800516c:	60fb      	str	r3, [r7, #12]
 800516e:	2000      	movs	r0, #0
 8005170:	f7ff fe21 	bl	8004db6 <LL_RCC_SetRNGClockSource>
 8005174:	68f8      	ldr	r0, [r7, #12]
 8005176:	f7ff fe34 	bl	8004de2 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800517e:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8005182:	d107      	bne.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8005184:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005188:	68db      	ldr	r3, [r3, #12]
 800518a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800518e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005192:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800519c:	2b00      	cmp	r3, #0
 800519e:	d022      	beq.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051a4:	4618      	mov	r0, r3
 80051a6:	f7ff fe3d 	bl	8004e24 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80051b2:	d107      	bne.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80051b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80051b8:	68db      	ldr	r3, [r3, #12]
 80051ba:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80051be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80051c2:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051c8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80051cc:	d10b      	bne.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	3304      	adds	r3, #4
 80051d2:	4618      	mov	r0, r3
 80051d4:	f000 f8dd 	bl	8005392 <RCCEx_PLLSAI1_ConfigNR>
 80051d8:	4603      	mov	r3, r0
 80051da:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80051dc:	7ffb      	ldrb	r3, [r7, #31]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d001      	beq.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 80051e2:	7ffb      	ldrb	r3, [r7, #31]
 80051e4:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d004      	beq.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051f6:	4618      	mov	r0, r3
 80051f8:	f7ff fd26 	bl	8004c48 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005204:	2b00      	cmp	r3, #0
 8005206:	d009      	beq.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800520c:	4618      	mov	r0, r3
 800520e:	f7ff fd45 	bl	8004c9c <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005216:	4618      	mov	r0, r3
 8005218:	f7ff fd2c 	bl	8004c74 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 800521c:	7fbb      	ldrb	r3, [r7, #30]
}
 800521e:	4618      	mov	r0, r3
 8005220:	3720      	adds	r7, #32
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}

08005226 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005226:	b580      	push	{r7, lr}
 8005228:	b084      	sub	sp, #16
 800522a:	af00      	add	r7, sp, #0
 800522c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800522e:	2300      	movs	r3, #0
 8005230:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005232:	f7ff fe61 	bl	8004ef8 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005236:	f7fd fc01 	bl	8002a3c <HAL_GetTick>
 800523a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800523c:	e009      	b.n	8005252 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800523e:	f7fd fbfd 	bl	8002a3c <HAL_GetTick>
 8005242:	4602      	mov	r2, r0
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	1ad3      	subs	r3, r2, r3
 8005248:	2b02      	cmp	r3, #2
 800524a:	d902      	bls.n	8005252 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800524c:	2303      	movs	r3, #3
 800524e:	73fb      	strb	r3, [r7, #15]
      break;
 8005250:	e004      	b.n	800525c <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005252:	f7ff fe60 	bl	8004f16 <LL_RCC_PLLSAI1_IsReady>
 8005256:	4603      	mov	r3, r0
 8005258:	2b00      	cmp	r3, #0
 800525a:	d1f0      	bne.n	800523e <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800525c:	7bfb      	ldrb	r3, [r7, #15]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d137      	bne.n	80052d2 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005262:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005266:	691b      	ldr	r3, [r3, #16]
 8005268:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	021b      	lsls	r3, r3, #8
 8005272:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005276:	4313      	orrs	r3, r2
 8005278:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800527a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800527e:	691b      	ldr	r3, [r3, #16]
 8005280:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800528c:	4313      	orrs	r3, r2
 800528e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005290:	f7ff fe23 	bl	8004eda <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005294:	f7fd fbd2 	bl	8002a3c <HAL_GetTick>
 8005298:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800529a:	e009      	b.n	80052b0 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800529c:	f7fd fbce 	bl	8002a3c <HAL_GetTick>
 80052a0:	4602      	mov	r2, r0
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	1ad3      	subs	r3, r2, r3
 80052a6:	2b02      	cmp	r3, #2
 80052a8:	d902      	bls.n	80052b0 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80052aa:	2303      	movs	r3, #3
 80052ac:	73fb      	strb	r3, [r7, #15]
        break;
 80052ae:	e004      	b.n	80052ba <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80052b0:	f7ff fe31 	bl	8004f16 <LL_RCC_PLLSAI1_IsReady>
 80052b4:	4603      	mov	r3, r0
 80052b6:	2b01      	cmp	r3, #1
 80052b8:	d1f0      	bne.n	800529c <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80052ba:	7bfb      	ldrb	r3, [r7, #15]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d108      	bne.n	80052d2 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80052c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80052c4:	691a      	ldr	r2, [r3, #16]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	691b      	ldr	r3, [r3, #16]
 80052ca:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80052ce:	4313      	orrs	r3, r2
 80052d0:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80052d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	3710      	adds	r7, #16
 80052d8:	46bd      	mov	sp, r7
 80052da:	bd80      	pop	{r7, pc}

080052dc <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b084      	sub	sp, #16
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80052e4:	2300      	movs	r3, #0
 80052e6:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80052e8:	f7ff fe06 	bl	8004ef8 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80052ec:	f7fd fba6 	bl	8002a3c <HAL_GetTick>
 80052f0:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80052f2:	e009      	b.n	8005308 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80052f4:	f7fd fba2 	bl	8002a3c <HAL_GetTick>
 80052f8:	4602      	mov	r2, r0
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	1ad3      	subs	r3, r2, r3
 80052fe:	2b02      	cmp	r3, #2
 8005300:	d902      	bls.n	8005308 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8005302:	2303      	movs	r3, #3
 8005304:	73fb      	strb	r3, [r7, #15]
      break;
 8005306:	e004      	b.n	8005312 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005308:	f7ff fe05 	bl	8004f16 <LL_RCC_PLLSAI1_IsReady>
 800530c:	4603      	mov	r3, r0
 800530e:	2b00      	cmp	r3, #0
 8005310:	d1f0      	bne.n	80052f4 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8005312:	7bfb      	ldrb	r3, [r7, #15]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d137      	bne.n	8005388 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005318:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800531c:	691b      	ldr	r3, [r3, #16]
 800531e:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	021b      	lsls	r3, r3, #8
 8005328:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800532c:	4313      	orrs	r3, r2
 800532e:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8005330:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005334:	691b      	ldr	r3, [r3, #16]
 8005336:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005342:	4313      	orrs	r3, r2
 8005344:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005346:	f7ff fdc8 	bl	8004eda <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800534a:	f7fd fb77 	bl	8002a3c <HAL_GetTick>
 800534e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005350:	e009      	b.n	8005366 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005352:	f7fd fb73 	bl	8002a3c <HAL_GetTick>
 8005356:	4602      	mov	r2, r0
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	1ad3      	subs	r3, r2, r3
 800535c:	2b02      	cmp	r3, #2
 800535e:	d902      	bls.n	8005366 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8005360:	2303      	movs	r3, #3
 8005362:	73fb      	strb	r3, [r7, #15]
        break;
 8005364:	e004      	b.n	8005370 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005366:	f7ff fdd6 	bl	8004f16 <LL_RCC_PLLSAI1_IsReady>
 800536a:	4603      	mov	r3, r0
 800536c:	2b01      	cmp	r3, #1
 800536e:	d1f0      	bne.n	8005352 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8005370:	7bfb      	ldrb	r3, [r7, #15]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d108      	bne.n	8005388 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005376:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800537a:	691a      	ldr	r2, [r3, #16]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	691b      	ldr	r3, [r3, #16]
 8005380:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005384:	4313      	orrs	r3, r2
 8005386:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005388:	7bfb      	ldrb	r3, [r7, #15]
}
 800538a:	4618      	mov	r0, r3
 800538c:	3710      	adds	r7, #16
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}

08005392 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005392:	b580      	push	{r7, lr}
 8005394:	b084      	sub	sp, #16
 8005396:	af00      	add	r7, sp, #0
 8005398:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800539a:	2300      	movs	r3, #0
 800539c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800539e:	f7ff fdab 	bl	8004ef8 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80053a2:	f7fd fb4b 	bl	8002a3c <HAL_GetTick>
 80053a6:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80053a8:	e009      	b.n	80053be <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80053aa:	f7fd fb47 	bl	8002a3c <HAL_GetTick>
 80053ae:	4602      	mov	r2, r0
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	1ad3      	subs	r3, r2, r3
 80053b4:	2b02      	cmp	r3, #2
 80053b6:	d902      	bls.n	80053be <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80053b8:	2303      	movs	r3, #3
 80053ba:	73fb      	strb	r3, [r7, #15]
      break;
 80053bc:	e004      	b.n	80053c8 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80053be:	f7ff fdaa 	bl	8004f16 <LL_RCC_PLLSAI1_IsReady>
 80053c2:	4603      	mov	r3, r0
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d1f0      	bne.n	80053aa <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80053c8:	7bfb      	ldrb	r3, [r7, #15]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d137      	bne.n	800543e <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80053ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80053d2:	691b      	ldr	r3, [r3, #16]
 80053d4:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	021b      	lsls	r3, r3, #8
 80053de:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80053e2:	4313      	orrs	r3, r2
 80053e4:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80053e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80053ea:	691b      	ldr	r3, [r3, #16]
 80053ec:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	68db      	ldr	r3, [r3, #12]
 80053f4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80053f8:	4313      	orrs	r3, r2
 80053fa:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80053fc:	f7ff fd6d 	bl	8004eda <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005400:	f7fd fb1c 	bl	8002a3c <HAL_GetTick>
 8005404:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005406:	e009      	b.n	800541c <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005408:	f7fd fb18 	bl	8002a3c <HAL_GetTick>
 800540c:	4602      	mov	r2, r0
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	1ad3      	subs	r3, r2, r3
 8005412:	2b02      	cmp	r3, #2
 8005414:	d902      	bls.n	800541c <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8005416:	2303      	movs	r3, #3
 8005418:	73fb      	strb	r3, [r7, #15]
        break;
 800541a:	e004      	b.n	8005426 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800541c:	f7ff fd7b 	bl	8004f16 <LL_RCC_PLLSAI1_IsReady>
 8005420:	4603      	mov	r3, r0
 8005422:	2b01      	cmp	r3, #1
 8005424:	d1f0      	bne.n	8005408 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8005426:	7bfb      	ldrb	r3, [r7, #15]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d108      	bne.n	800543e <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800542c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005430:	691a      	ldr	r2, [r3, #16]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	691b      	ldr	r3, [r3, #16]
 8005436:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800543a:	4313      	orrs	r3, r2
 800543c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800543e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005440:	4618      	mov	r0, r3
 8005442:	3710      	adds	r7, #16
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}

08005448 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b084      	sub	sp, #16
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d101      	bne.n	800545a <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8005456:	2301      	movs	r3, #1
 8005458:	e09f      	b.n	800559a <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8005460:	b2db      	uxtb	r3, r3
 8005462:	2b00      	cmp	r3, #0
 8005464:	d106      	bne.n	8005474 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2200      	movs	r2, #0
 800546a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f7fd f8fc 	bl	800266c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2202      	movs	r2, #2
 8005478:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800547c:	4b49      	ldr	r3, [pc, #292]	@ (80055a4 <HAL_RTC_Init+0x15c>)
 800547e:	68db      	ldr	r3, [r3, #12]
 8005480:	f003 0310 	and.w	r3, r3, #16
 8005484:	2b10      	cmp	r3, #16
 8005486:	d07e      	beq.n	8005586 <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	22ca      	movs	r2, #202	@ 0xca
 800548e:	625a      	str	r2, [r3, #36]	@ 0x24
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	2253      	movs	r2, #83	@ 0x53
 8005496:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005498:	6878      	ldr	r0, [r7, #4]
 800549a:	f000 f8ab 	bl	80055f4 <RTC_EnterInitMode>
 800549e:	4603      	mov	r3, r0
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d00a      	beq.n	80054ba <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	22ff      	movs	r2, #255	@ 0xff
 80054aa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2204      	movs	r2, #4
 80054b0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      status = HAL_ERROR;
 80054b4:	2301      	movs	r3, #1
 80054b6:	73fb      	strb	r3, [r7, #15]
 80054b8:	e067      	b.n	800558a <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	689b      	ldr	r3, [r3, #8]
 80054c0:	687a      	ldr	r2, [r7, #4]
 80054c2:	6812      	ldr	r2, [r2, #0]
 80054c4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80054c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80054cc:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	6899      	ldr	r1, [r3, #8]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	685a      	ldr	r2, [r3, #4]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	691b      	ldr	r3, [r3, #16]
 80054dc:	431a      	orrs	r2, r3
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	699b      	ldr	r3, [r3, #24]
 80054e2:	431a      	orrs	r2, r3
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	430a      	orrs	r2, r1
 80054ea:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	687a      	ldr	r2, [r7, #4]
 80054f2:	68d2      	ldr	r2, [r2, #12]
 80054f4:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	6919      	ldr	r1, [r3, #16]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	689b      	ldr	r3, [r3, #8]
 8005500:	041a      	lsls	r2, r3, #16
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	430a      	orrs	r2, r1
 8005508:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	68da      	ldr	r2, [r3, #12]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005518:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f022 0203 	bic.w	r2, r2, #3
 8005528:	64da      	str	r2, [r3, #76]	@ 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	69da      	ldr	r2, [r3, #28]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	695b      	ldr	r3, [r3, #20]
 8005538:	431a      	orrs	r2, r3
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	430a      	orrs	r2, r1
 8005540:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	689b      	ldr	r3, [r3, #8]
 8005548:	f003 0320 	and.w	r3, r3, #32
 800554c:	2b00      	cmp	r3, #0
 800554e:	d113      	bne.n	8005578 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005550:	6878      	ldr	r0, [r7, #4]
 8005552:	f000 f829 	bl	80055a8 <HAL_RTC_WaitForSynchro>
 8005556:	4603      	mov	r3, r0
 8005558:	2b00      	cmp	r3, #0
 800555a:	d00d      	beq.n	8005578 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	22ff      	movs	r2, #255	@ 0xff
 8005562:	625a      	str	r2, [r3, #36]	@ 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2204      	movs	r2, #4
 8005568:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2200      	movs	r2, #0
 8005570:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 8005574:	2301      	movs	r3, #1
 8005576:	e010      	b.n	800559a <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	22ff      	movs	r2, #255	@ 0xff
 800557e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      status = HAL_OK;
 8005580:	2300      	movs	r3, #0
 8005582:	73fb      	strb	r3, [r7, #15]
 8005584:	e001      	b.n	800558a <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 8005586:	2300      	movs	r3, #0
 8005588:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800558a:	7bfb      	ldrb	r3, [r7, #15]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d103      	bne.n	8005598 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2201      	movs	r2, #1
 8005594:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  return status;
 8005598:	7bfb      	ldrb	r3, [r7, #15]
}
 800559a:	4618      	mov	r0, r3
 800559c:	3710      	adds	r7, #16
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}
 80055a2:	bf00      	nop
 80055a4:	40002800 	.word	0x40002800

080055a8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b084      	sub	sp, #16
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	68da      	ldr	r2, [r3, #12]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80055be:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80055c0:	f7fd fa3c 	bl	8002a3c <HAL_GetTick>
 80055c4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80055c6:	e009      	b.n	80055dc <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80055c8:	f7fd fa38 	bl	8002a3c <HAL_GetTick>
 80055cc:	4602      	mov	r2, r0
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	1ad3      	subs	r3, r2, r3
 80055d2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80055d6:	d901      	bls.n	80055dc <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80055d8:	2303      	movs	r3, #3
 80055da:	e007      	b.n	80055ec <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	68db      	ldr	r3, [r3, #12]
 80055e2:	f003 0320 	and.w	r3, r3, #32
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d0ee      	beq.n	80055c8 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80055ea:	2300      	movs	r3, #0
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	3710      	adds	r7, #16
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bd80      	pop	{r7, pc}

080055f4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b084      	sub	sp, #16
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	68db      	ldr	r3, [r3, #12]
 8005602:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005606:	2b00      	cmp	r3, #0
 8005608:	d119      	bne.n	800563e <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f04f 32ff 	mov.w	r2, #4294967295
 8005612:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005614:	f7fd fa12 	bl	8002a3c <HAL_GetTick>
 8005618:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800561a:	e009      	b.n	8005630 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800561c:	f7fd fa0e 	bl	8002a3c <HAL_GetTick>
 8005620:	4602      	mov	r2, r0
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	1ad3      	subs	r3, r2, r3
 8005626:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800562a:	d901      	bls.n	8005630 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 800562c:	2303      	movs	r3, #3
 800562e:	e007      	b.n	8005640 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	68db      	ldr	r3, [r3, #12]
 8005636:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800563a:	2b00      	cmp	r3, #0
 800563c:	d0ee      	beq.n	800561c <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800563e:	2300      	movs	r3, #0
}
 8005640:	4618      	mov	r0, r3
 8005642:	3710      	adds	r7, #16
 8005644:	46bd      	mov	sp, r7
 8005646:	bd80      	pop	{r7, pc}

08005648 <HAL_RTCEx_EnableBypassShadow>:
  * @note   When the Bypass Shadow is enabled the calendar value are taken
  *         directly from the Calendar counter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 8005648:	b480      	push	{r7}
 800564a:	b083      	sub	sp, #12
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005656:	2b01      	cmp	r3, #1
 8005658:	d101      	bne.n	800565e <HAL_RTCEx_EnableBypassShadow+0x16>
 800565a:	2302      	movs	r3, #2
 800565c:	e024      	b.n	80056a8 <HAL_RTCEx_EnableBypassShadow+0x60>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2201      	movs	r2, #1
 8005662:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2202      	movs	r2, #2
 800566a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	22ca      	movs	r2, #202	@ 0xca
 8005674:	625a      	str	r2, [r3, #36]	@ 0x24
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	2253      	movs	r2, #83	@ 0x53
 800567c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	689a      	ldr	r2, [r3, #8]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f042 0220 	orr.w	r2, r2, #32
 800568c:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	22ff      	movs	r2, #255	@ 0xff
 8005694:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2201      	movs	r2, #1
 800569a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2200      	movs	r2, #0
 80056a2:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80056a6:	2300      	movs	r3, #0
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	370c      	adds	r7, #12
 80056ac:	46bd      	mov	sp, r7
 80056ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b2:	4770      	bx	lr

080056b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b082      	sub	sp, #8
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d101      	bne.n	80056c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80056c2:	2301      	movs	r3, #1
 80056c4:	e049      	b.n	800575a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80056cc:	b2db      	uxtb	r3, r3
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d106      	bne.n	80056e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2200      	movs	r2, #0
 80056d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f000 f841 	bl	8005762 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2202      	movs	r2, #2
 80056e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681a      	ldr	r2, [r3, #0]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	3304      	adds	r3, #4
 80056f0:	4619      	mov	r1, r3
 80056f2:	4610      	mov	r0, r2
 80056f4:	f000 f9be 	bl	8005a74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2201      	movs	r2, #1
 80056fc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2201      	movs	r2, #1
 8005704:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2201      	movs	r2, #1
 800570c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2201      	movs	r2, #1
 8005714:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2201      	movs	r2, #1
 800571c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2201      	movs	r2, #1
 8005724:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2201      	movs	r2, #1
 800572c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2201      	movs	r2, #1
 8005734:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2201      	movs	r2, #1
 800573c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2201      	movs	r2, #1
 8005744:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2201      	movs	r2, #1
 800574c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2201      	movs	r2, #1
 8005754:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005758:	2300      	movs	r3, #0
}
 800575a:	4618      	mov	r0, r3
 800575c:	3708      	adds	r7, #8
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}

08005762 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005762:	b480      	push	{r7}
 8005764:	b083      	sub	sp, #12
 8005766:	af00      	add	r7, sp, #0
 8005768:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800576a:	bf00      	nop
 800576c:	370c      	adds	r7, #12
 800576e:	46bd      	mov	sp, r7
 8005770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005774:	4770      	bx	lr
	...

08005778 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005778:	b480      	push	{r7}
 800577a:	b085      	sub	sp, #20
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005786:	b2db      	uxtb	r3, r3
 8005788:	2b01      	cmp	r3, #1
 800578a:	d001      	beq.n	8005790 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800578c:	2301      	movs	r3, #1
 800578e:	e036      	b.n	80057fe <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2202      	movs	r2, #2
 8005794:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	68da      	ldr	r2, [r3, #12]
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f042 0201 	orr.w	r2, r2, #1
 80057a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a17      	ldr	r2, [pc, #92]	@ (800580c <HAL_TIM_Base_Start_IT+0x94>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d004      	beq.n	80057bc <HAL_TIM_Base_Start_IT+0x44>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057ba:	d115      	bne.n	80057e8 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	689a      	ldr	r2, [r3, #8]
 80057c2:	4b13      	ldr	r3, [pc, #76]	@ (8005810 <HAL_TIM_Base_Start_IT+0x98>)
 80057c4:	4013      	ands	r3, r2
 80057c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2b06      	cmp	r3, #6
 80057cc:	d015      	beq.n	80057fa <HAL_TIM_Base_Start_IT+0x82>
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80057d4:	d011      	beq.n	80057fa <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	681a      	ldr	r2, [r3, #0]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f042 0201 	orr.w	r2, r2, #1
 80057e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057e6:	e008      	b.n	80057fa <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	681a      	ldr	r2, [r3, #0]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f042 0201 	orr.w	r2, r2, #1
 80057f6:	601a      	str	r2, [r3, #0]
 80057f8:	e000      	b.n	80057fc <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057fa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80057fc:	2300      	movs	r3, #0
}
 80057fe:	4618      	mov	r0, r3
 8005800:	3714      	adds	r7, #20
 8005802:	46bd      	mov	sp, r7
 8005804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005808:	4770      	bx	lr
 800580a:	bf00      	nop
 800580c:	40012c00 	.word	0x40012c00
 8005810:	00010007 	.word	0x00010007

08005814 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b084      	sub	sp, #16
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	68db      	ldr	r3, [r3, #12]
 8005822:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	691b      	ldr	r3, [r3, #16]
 800582a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	f003 0302 	and.w	r3, r3, #2
 8005832:	2b00      	cmp	r3, #0
 8005834:	d020      	beq.n	8005878 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	f003 0302 	and.w	r3, r3, #2
 800583c:	2b00      	cmp	r3, #0
 800583e:	d01b      	beq.n	8005878 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f06f 0202 	mvn.w	r2, #2
 8005848:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2201      	movs	r2, #1
 800584e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	699b      	ldr	r3, [r3, #24]
 8005856:	f003 0303 	and.w	r3, r3, #3
 800585a:	2b00      	cmp	r3, #0
 800585c:	d003      	beq.n	8005866 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	f000 f8e9 	bl	8005a36 <HAL_TIM_IC_CaptureCallback>
 8005864:	e005      	b.n	8005872 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f000 f8db 	bl	8005a22 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800586c:	6878      	ldr	r0, [r7, #4]
 800586e:	f000 f8ec 	bl	8005a4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2200      	movs	r2, #0
 8005876:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	f003 0304 	and.w	r3, r3, #4
 800587e:	2b00      	cmp	r3, #0
 8005880:	d020      	beq.n	80058c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	f003 0304 	and.w	r3, r3, #4
 8005888:	2b00      	cmp	r3, #0
 800588a:	d01b      	beq.n	80058c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f06f 0204 	mvn.w	r2, #4
 8005894:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2202      	movs	r2, #2
 800589a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	699b      	ldr	r3, [r3, #24]
 80058a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d003      	beq.n	80058b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f000 f8c3 	bl	8005a36 <HAL_TIM_IC_CaptureCallback>
 80058b0:	e005      	b.n	80058be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f000 f8b5 	bl	8005a22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058b8:	6878      	ldr	r0, [r7, #4]
 80058ba:	f000 f8c6 	bl	8005a4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2200      	movs	r2, #0
 80058c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	f003 0308 	and.w	r3, r3, #8
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d020      	beq.n	8005910 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	f003 0308 	and.w	r3, r3, #8
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d01b      	beq.n	8005910 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f06f 0208 	mvn.w	r2, #8
 80058e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2204      	movs	r2, #4
 80058e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	69db      	ldr	r3, [r3, #28]
 80058ee:	f003 0303 	and.w	r3, r3, #3
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d003      	beq.n	80058fe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f000 f89d 	bl	8005a36 <HAL_TIM_IC_CaptureCallback>
 80058fc:	e005      	b.n	800590a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f000 f88f 	bl	8005a22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005904:	6878      	ldr	r0, [r7, #4]
 8005906:	f000 f8a0 	bl	8005a4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2200      	movs	r2, #0
 800590e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	f003 0310 	and.w	r3, r3, #16
 8005916:	2b00      	cmp	r3, #0
 8005918:	d020      	beq.n	800595c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	f003 0310 	and.w	r3, r3, #16
 8005920:	2b00      	cmp	r3, #0
 8005922:	d01b      	beq.n	800595c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f06f 0210 	mvn.w	r2, #16
 800592c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2208      	movs	r2, #8
 8005932:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	69db      	ldr	r3, [r3, #28]
 800593a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800593e:	2b00      	cmp	r3, #0
 8005940:	d003      	beq.n	800594a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f000 f877 	bl	8005a36 <HAL_TIM_IC_CaptureCallback>
 8005948:	e005      	b.n	8005956 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	f000 f869 	bl	8005a22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005950:	6878      	ldr	r0, [r7, #4]
 8005952:	f000 f87a 	bl	8005a4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2200      	movs	r2, #0
 800595a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	f003 0301 	and.w	r3, r3, #1
 8005962:	2b00      	cmp	r3, #0
 8005964:	d00c      	beq.n	8005980 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	f003 0301 	and.w	r3, r3, #1
 800596c:	2b00      	cmp	r3, #0
 800596e:	d007      	beq.n	8005980 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f06f 0201 	mvn.w	r2, #1
 8005978:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f7fc fdb2 	bl	80024e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005986:	2b00      	cmp	r3, #0
 8005988:	d104      	bne.n	8005994 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005990:	2b00      	cmp	r3, #0
 8005992:	d00c      	beq.n	80059ae <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800599a:	2b00      	cmp	r3, #0
 800599c:	d007      	beq.n	80059ae <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80059a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80059a8:	6878      	ldr	r0, [r7, #4]
 80059aa:	f000 f8dd 	bl	8005b68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d00c      	beq.n	80059d2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d007      	beq.n	80059d2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80059ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	f000 f8d5 	bl	8005b7c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d00c      	beq.n	80059f6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d007      	beq.n	80059f6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80059ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80059f0:	6878      	ldr	r0, [r7, #4]
 80059f2:	f000 f834 	bl	8005a5e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	f003 0320 	and.w	r3, r3, #32
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d00c      	beq.n	8005a1a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	f003 0320 	and.w	r3, r3, #32
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d007      	beq.n	8005a1a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f06f 0220 	mvn.w	r2, #32
 8005a12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	f000 f89d 	bl	8005b54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005a1a:	bf00      	nop
 8005a1c:	3710      	adds	r7, #16
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}

08005a22 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a22:	b480      	push	{r7}
 8005a24:	b083      	sub	sp, #12
 8005a26:	af00      	add	r7, sp, #0
 8005a28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005a2a:	bf00      	nop
 8005a2c:	370c      	adds	r7, #12
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a34:	4770      	bx	lr

08005a36 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005a36:	b480      	push	{r7}
 8005a38:	b083      	sub	sp, #12
 8005a3a:	af00      	add	r7, sp, #0
 8005a3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005a3e:	bf00      	nop
 8005a40:	370c      	adds	r7, #12
 8005a42:	46bd      	mov	sp, r7
 8005a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a48:	4770      	bx	lr

08005a4a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005a4a:	b480      	push	{r7}
 8005a4c:	b083      	sub	sp, #12
 8005a4e:	af00      	add	r7, sp, #0
 8005a50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005a52:	bf00      	nop
 8005a54:	370c      	adds	r7, #12
 8005a56:	46bd      	mov	sp, r7
 8005a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5c:	4770      	bx	lr

08005a5e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005a5e:	b480      	push	{r7}
 8005a60:	b083      	sub	sp, #12
 8005a62:	af00      	add	r7, sp, #0
 8005a64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005a66:	bf00      	nop
 8005a68:	370c      	adds	r7, #12
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a70:	4770      	bx	lr
	...

08005a74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005a74:	b480      	push	{r7}
 8005a76:	b085      	sub	sp, #20
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
 8005a7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	4a30      	ldr	r2, [pc, #192]	@ (8005b48 <TIM_Base_SetConfig+0xd4>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d003      	beq.n	8005a94 <TIM_Base_SetConfig+0x20>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a92:	d108      	bne.n	8005aa6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	68fa      	ldr	r2, [r7, #12]
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	4a27      	ldr	r2, [pc, #156]	@ (8005b48 <TIM_Base_SetConfig+0xd4>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d00b      	beq.n	8005ac6 <TIM_Base_SetConfig+0x52>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ab4:	d007      	beq.n	8005ac6 <TIM_Base_SetConfig+0x52>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	4a24      	ldr	r2, [pc, #144]	@ (8005b4c <TIM_Base_SetConfig+0xd8>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d003      	beq.n	8005ac6 <TIM_Base_SetConfig+0x52>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	4a23      	ldr	r2, [pc, #140]	@ (8005b50 <TIM_Base_SetConfig+0xdc>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d108      	bne.n	8005ad8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005acc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	68db      	ldr	r3, [r3, #12]
 8005ad2:	68fa      	ldr	r2, [r7, #12]
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	695b      	ldr	r3, [r3, #20]
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	68fa      	ldr	r2, [r7, #12]
 8005aea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	689a      	ldr	r2, [r3, #8]
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	681a      	ldr	r2, [r3, #0]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	4a12      	ldr	r2, [pc, #72]	@ (8005b48 <TIM_Base_SetConfig+0xd4>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d007      	beq.n	8005b14 <TIM_Base_SetConfig+0xa0>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	4a11      	ldr	r2, [pc, #68]	@ (8005b4c <TIM_Base_SetConfig+0xd8>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d003      	beq.n	8005b14 <TIM_Base_SetConfig+0xa0>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	4a10      	ldr	r2, [pc, #64]	@ (8005b50 <TIM_Base_SetConfig+0xdc>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d103      	bne.n	8005b1c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	691a      	ldr	r2, [r3, #16]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2201      	movs	r2, #1
 8005b20:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	691b      	ldr	r3, [r3, #16]
 8005b26:	f003 0301 	and.w	r3, r3, #1
 8005b2a:	2b01      	cmp	r3, #1
 8005b2c:	d105      	bne.n	8005b3a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	691b      	ldr	r3, [r3, #16]
 8005b32:	f023 0201 	bic.w	r2, r3, #1
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	611a      	str	r2, [r3, #16]
  }
}
 8005b3a:	bf00      	nop
 8005b3c:	3714      	adds	r7, #20
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b44:	4770      	bx	lr
 8005b46:	bf00      	nop
 8005b48:	40012c00 	.word	0x40012c00
 8005b4c:	40014400 	.word	0x40014400
 8005b50:	40014800 	.word	0x40014800

08005b54 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b083      	sub	sp, #12
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005b5c:	bf00      	nop
 8005b5e:	370c      	adds	r7, #12
 8005b60:	46bd      	mov	sp, r7
 8005b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b66:	4770      	bx	lr

08005b68 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b083      	sub	sp, #12
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005b70:	bf00      	nop
 8005b72:	370c      	adds	r7, #12
 8005b74:	46bd      	mov	sp, r7
 8005b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7a:	4770      	bx	lr

08005b7c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b083      	sub	sp, #12
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005b84:	bf00      	nop
 8005b86:	370c      	adds	r7, #12
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8e:	4770      	bx	lr

08005b90 <LL_RCC_GetUSARTClockSource>:
{
 8005b90:	b480      	push	{r7}
 8005b92:	b083      	sub	sp, #12
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8005b98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b9c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	4013      	ands	r3, r2
}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	370c      	adds	r7, #12
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bae:	4770      	bx	lr

08005bb0 <LL_RCC_GetLPUARTClockSource>:
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b083      	sub	sp, #12
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8005bb8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005bbc:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	4013      	ands	r3, r2
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	370c      	adds	r7, #12
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bce:	4770      	bx	lr

08005bd0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b082      	sub	sp, #8
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d101      	bne.n	8005be2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005bde:	2301      	movs	r3, #1
 8005be0:	e042      	b.n	8005c68 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d106      	bne.n	8005bfa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005bf4:	6878      	ldr	r0, [r7, #4]
 8005bf6:	f7fc fd71 	bl	80026dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2224      	movs	r2, #36	@ 0x24
 8005bfe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	681a      	ldr	r2, [r3, #0]
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f022 0201 	bic.w	r2, r2, #1
 8005c10:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d002      	beq.n	8005c20 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f000 fe32 	bl	8006884 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	f000 fc07 	bl	8006434 <UART_SetConfig>
 8005c26:	4603      	mov	r3, r0
 8005c28:	2b01      	cmp	r3, #1
 8005c2a:	d101      	bne.n	8005c30 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	e01b      	b.n	8005c68 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	685a      	ldr	r2, [r3, #4]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005c3e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	689a      	ldr	r2, [r3, #8]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005c4e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	681a      	ldr	r2, [r3, #0]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f042 0201 	orr.w	r2, r2, #1
 8005c5e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005c60:	6878      	ldr	r0, [r7, #4]
 8005c62:	f000 feb1 	bl	80069c8 <UART_CheckIdleState>
 8005c66:	4603      	mov	r3, r0
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	3708      	adds	r7, #8
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bd80      	pop	{r7, pc}

08005c70 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b08a      	sub	sp, #40	@ 0x28
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	60f8      	str	r0, [r7, #12]
 8005c78:	60b9      	str	r1, [r7, #8]
 8005c7a:	4613      	mov	r3, r2
 8005c7c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c84:	2b20      	cmp	r3, #32
 8005c86:	d167      	bne.n	8005d58 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d002      	beq.n	8005c94 <HAL_UART_Transmit_DMA+0x24>
 8005c8e:	88fb      	ldrh	r3, [r7, #6]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d101      	bne.n	8005c98 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8005c94:	2301      	movs	r3, #1
 8005c96:	e060      	b.n	8005d5a <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	68ba      	ldr	r2, [r7, #8]
 8005c9c:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	88fa      	ldrh	r2, [r7, #6]
 8005ca2:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	88fa      	ldrh	r2, [r7, #6]
 8005caa:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2221      	movs	r2, #33	@ 0x21
 8005cba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d028      	beq.n	8005d18 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005cca:	4a26      	ldr	r2, [pc, #152]	@ (8005d64 <HAL_UART_Transmit_DMA+0xf4>)
 8005ccc:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005cd2:	4a25      	ldr	r2, [pc, #148]	@ (8005d68 <HAL_UART_Transmit_DMA+0xf8>)
 8005cd4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005cda:	4a24      	ldr	r2, [pc, #144]	@ (8005d6c <HAL_UART_Transmit_DMA+0xfc>)
 8005cdc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005cee:	4619      	mov	r1, r3
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	3328      	adds	r3, #40	@ 0x28
 8005cf6:	461a      	mov	r2, r3
 8005cf8:	88fb      	ldrh	r3, [r7, #6]
 8005cfa:	f7fd f905 	bl	8002f08 <HAL_DMA_Start_IT>
 8005cfe:	4603      	mov	r3, r0
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d009      	beq.n	8005d18 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	2210      	movs	r2, #16
 8005d08:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	2220      	movs	r2, #32
 8005d10:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8005d14:	2301      	movs	r3, #1
 8005d16:	e020      	b.n	8005d5a <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	2240      	movs	r2, #64	@ 0x40
 8005d1e:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	3308      	adds	r3, #8
 8005d26:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	e853 3f00 	ldrex	r3, [r3]
 8005d2e:	613b      	str	r3, [r7, #16]
   return(result);
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d36:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	3308      	adds	r3, #8
 8005d3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d40:	623a      	str	r2, [r7, #32]
 8005d42:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d44:	69f9      	ldr	r1, [r7, #28]
 8005d46:	6a3a      	ldr	r2, [r7, #32]
 8005d48:	e841 2300 	strex	r3, r2, [r1]
 8005d4c:	61bb      	str	r3, [r7, #24]
   return(result);
 8005d4e:	69bb      	ldr	r3, [r7, #24]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d1e5      	bne.n	8005d20 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8005d54:	2300      	movs	r3, #0
 8005d56:	e000      	b.n	8005d5a <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8005d58:	2302      	movs	r3, #2
  }
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	3728      	adds	r7, #40	@ 0x28
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}
 8005d62:	bf00      	nop
 8005d64:	08006d45 	.word	0x08006d45
 8005d68:	08006ddf 	.word	0x08006ddf
 8005d6c:	08006dfb 	.word	0x08006dfb

08005d70 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b0ba      	sub	sp, #232	@ 0xe8
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	69db      	ldr	r3, [r3, #28]
 8005d7e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	689b      	ldr	r3, [r3, #8]
 8005d92:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005d96:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005d9a:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005d9e:	4013      	ands	r3, r2
 8005da0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005da4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d11b      	bne.n	8005de4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005dac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005db0:	f003 0320 	and.w	r3, r3, #32
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d015      	beq.n	8005de4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005db8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005dbc:	f003 0320 	and.w	r3, r3, #32
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d105      	bne.n	8005dd0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005dc4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005dc8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d009      	beq.n	8005de4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	f000 8300 	beq.w	80063da <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	4798      	blx	r3
      }
      return;
 8005de2:	e2fa      	b.n	80063da <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005de4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	f000 8123 	beq.w	8006034 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005dee:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005df2:	4b8d      	ldr	r3, [pc, #564]	@ (8006028 <HAL_UART_IRQHandler+0x2b8>)
 8005df4:	4013      	ands	r3, r2
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d106      	bne.n	8005e08 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005dfa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005dfe:	4b8b      	ldr	r3, [pc, #556]	@ (800602c <HAL_UART_IRQHandler+0x2bc>)
 8005e00:	4013      	ands	r3, r2
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	f000 8116 	beq.w	8006034 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005e08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e0c:	f003 0301 	and.w	r3, r3, #1
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d011      	beq.n	8005e38 <HAL_UART_IRQHandler+0xc8>
 8005e14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d00b      	beq.n	8005e38 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	2201      	movs	r2, #1
 8005e26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e2e:	f043 0201 	orr.w	r2, r3, #1
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005e38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e3c:	f003 0302 	and.w	r3, r3, #2
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d011      	beq.n	8005e68 <HAL_UART_IRQHandler+0xf8>
 8005e44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005e48:	f003 0301 	and.w	r3, r3, #1
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d00b      	beq.n	8005e68 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	2202      	movs	r2, #2
 8005e56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e5e:	f043 0204 	orr.w	r2, r3, #4
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005e68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e6c:	f003 0304 	and.w	r3, r3, #4
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d011      	beq.n	8005e98 <HAL_UART_IRQHandler+0x128>
 8005e74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005e78:	f003 0301 	and.w	r3, r3, #1
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d00b      	beq.n	8005e98 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	2204      	movs	r2, #4
 8005e86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e8e:	f043 0202 	orr.w	r2, r3, #2
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005e98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e9c:	f003 0308 	and.w	r3, r3, #8
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d017      	beq.n	8005ed4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005ea4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ea8:	f003 0320 	and.w	r3, r3, #32
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d105      	bne.n	8005ebc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005eb0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005eb4:	4b5c      	ldr	r3, [pc, #368]	@ (8006028 <HAL_UART_IRQHandler+0x2b8>)
 8005eb6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d00b      	beq.n	8005ed4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	2208      	movs	r2, #8
 8005ec2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005eca:	f043 0208 	orr.w	r2, r3, #8
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005ed4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ed8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d012      	beq.n	8005f06 <HAL_UART_IRQHandler+0x196>
 8005ee0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ee4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d00c      	beq.n	8005f06 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005ef4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005efc:	f043 0220 	orr.w	r2, r3, #32
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	f000 8266 	beq.w	80063de <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005f12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f16:	f003 0320 	and.w	r3, r3, #32
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d013      	beq.n	8005f46 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005f1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f22:	f003 0320 	and.w	r3, r3, #32
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d105      	bne.n	8005f36 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005f2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005f2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d007      	beq.n	8005f46 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d003      	beq.n	8005f46 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f4c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	689b      	ldr	r3, [r3, #8]
 8005f56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f5a:	2b40      	cmp	r3, #64	@ 0x40
 8005f5c:	d005      	beq.n	8005f6a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005f5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005f62:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d054      	beq.n	8006014 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f000 fe84 	bl	8006c78 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	689b      	ldr	r3, [r3, #8]
 8005f76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f7a:	2b40      	cmp	r3, #64	@ 0x40
 8005f7c:	d146      	bne.n	800600c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	3308      	adds	r3, #8
 8005f84:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f88:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005f8c:	e853 3f00 	ldrex	r3, [r3]
 8005f90:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005f94:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005f98:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005f9c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	3308      	adds	r3, #8
 8005fa6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005faa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005fae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fb2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005fb6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005fba:	e841 2300 	strex	r3, r2, [r1]
 8005fbe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005fc2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d1d9      	bne.n	8005f7e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d017      	beq.n	8006004 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005fda:	4a15      	ldr	r2, [pc, #84]	@ (8006030 <HAL_UART_IRQHandler+0x2c0>)
 8005fdc:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	f7fd f869 	bl	80030bc <HAL_DMA_Abort_IT>
 8005fea:	4603      	mov	r3, r0
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d019      	beq.n	8006024 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ff6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ff8:	687a      	ldr	r2, [r7, #4]
 8005ffa:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8005ffe:	4610      	mov	r0, r2
 8006000:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006002:	e00f      	b.n	8006024 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f000 f9ff 	bl	8006408 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800600a:	e00b      	b.n	8006024 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800600c:	6878      	ldr	r0, [r7, #4]
 800600e:	f000 f9fb 	bl	8006408 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006012:	e007      	b.n	8006024 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	f000 f9f7 	bl	8006408 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2200      	movs	r2, #0
 800601e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8006022:	e1dc      	b.n	80063de <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006024:	bf00      	nop
    return;
 8006026:	e1da      	b.n	80063de <HAL_UART_IRQHandler+0x66e>
 8006028:	10000001 	.word	0x10000001
 800602c:	04000120 	.word	0x04000120
 8006030:	08006e7b 	.word	0x08006e7b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006038:	2b01      	cmp	r3, #1
 800603a:	f040 8170 	bne.w	800631e <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800603e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006042:	f003 0310 	and.w	r3, r3, #16
 8006046:	2b00      	cmp	r3, #0
 8006048:	f000 8169 	beq.w	800631e <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800604c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006050:	f003 0310 	and.w	r3, r3, #16
 8006054:	2b00      	cmp	r3, #0
 8006056:	f000 8162 	beq.w	800631e <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	2210      	movs	r2, #16
 8006060:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	689b      	ldr	r3, [r3, #8]
 8006068:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800606c:	2b40      	cmp	r3, #64	@ 0x40
 800606e:	f040 80d8 	bne.w	8006222 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006080:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006084:	2b00      	cmp	r3, #0
 8006086:	f000 80af 	beq.w	80061e8 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006090:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006094:	429a      	cmp	r2, r3
 8006096:	f080 80a7 	bcs.w	80061e8 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80060a0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f003 0320 	and.w	r3, r3, #32
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	f040 8087 	bne.w	80061c6 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80060c4:	e853 3f00 	ldrex	r3, [r3]
 80060c8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80060cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80060d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80060d4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	461a      	mov	r2, r3
 80060de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80060e2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80060e6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ea:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80060ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80060f2:	e841 2300 	strex	r3, r2, [r1]
 80060f6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80060fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d1da      	bne.n	80060b8 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	3308      	adds	r3, #8
 8006108:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800610a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800610c:	e853 3f00 	ldrex	r3, [r3]
 8006110:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006112:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006114:	f023 0301 	bic.w	r3, r3, #1
 8006118:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	3308      	adds	r3, #8
 8006122:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006126:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800612a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800612c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800612e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006132:	e841 2300 	strex	r3, r2, [r1]
 8006136:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006138:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800613a:	2b00      	cmp	r3, #0
 800613c:	d1e1      	bne.n	8006102 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	3308      	adds	r3, #8
 8006144:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006146:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006148:	e853 3f00 	ldrex	r3, [r3]
 800614c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800614e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006150:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006154:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	3308      	adds	r3, #8
 800615e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006162:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006164:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006166:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006168:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800616a:	e841 2300 	strex	r3, r2, [r1]
 800616e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006170:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006172:	2b00      	cmp	r3, #0
 8006174:	d1e3      	bne.n	800613e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2220      	movs	r2, #32
 800617a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2200      	movs	r2, #0
 8006182:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800618a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800618c:	e853 3f00 	ldrex	r3, [r3]
 8006190:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006192:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006194:	f023 0310 	bic.w	r3, r3, #16
 8006198:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	461a      	mov	r2, r3
 80061a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80061a6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80061a8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061aa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80061ac:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80061ae:	e841 2300 	strex	r3, r2, [r1]
 80061b2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80061b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d1e4      	bne.n	8006184 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80061c0:	4618      	mov	r0, r3
 80061c2:	f7fc ff1c 	bl	8002ffe <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2202      	movs	r2, #2
 80061ca:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80061d8:	b29b      	uxth	r3, r3
 80061da:	1ad3      	subs	r3, r2, r3
 80061dc:	b29b      	uxth	r3, r3
 80061de:	4619      	mov	r1, r3
 80061e0:	6878      	ldr	r0, [r7, #4]
 80061e2:	f000 f91b 	bl	800641c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80061e6:	e0fc      	b.n	80063e2 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80061ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80061f2:	429a      	cmp	r2, r3
 80061f4:	f040 80f5 	bne.w	80063e2 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f003 0320 	and.w	r3, r3, #32
 8006206:	2b20      	cmp	r3, #32
 8006208:	f040 80eb 	bne.w	80063e2 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2202      	movs	r2, #2
 8006210:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006218:	4619      	mov	r1, r3
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f000 f8fe 	bl	800641c <HAL_UARTEx_RxEventCallback>
      return;
 8006220:	e0df      	b.n	80063e2 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800622e:	b29b      	uxth	r3, r3
 8006230:	1ad3      	subs	r3, r2, r3
 8006232:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800623c:	b29b      	uxth	r3, r3
 800623e:	2b00      	cmp	r3, #0
 8006240:	f000 80d1 	beq.w	80063e6 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8006244:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006248:	2b00      	cmp	r3, #0
 800624a:	f000 80cc 	beq.w	80063e6 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006254:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006256:	e853 3f00 	ldrex	r3, [r3]
 800625a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800625c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800625e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006262:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	461a      	mov	r2, r3
 800626c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006270:	647b      	str	r3, [r7, #68]	@ 0x44
 8006272:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006274:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006276:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006278:	e841 2300 	strex	r3, r2, [r1]
 800627c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800627e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006280:	2b00      	cmp	r3, #0
 8006282:	d1e4      	bne.n	800624e <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	3308      	adds	r3, #8
 800628a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800628c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800628e:	e853 3f00 	ldrex	r3, [r3]
 8006292:	623b      	str	r3, [r7, #32]
   return(result);
 8006294:	6a3b      	ldr	r3, [r7, #32]
 8006296:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800629a:	f023 0301 	bic.w	r3, r3, #1
 800629e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	3308      	adds	r3, #8
 80062a8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80062ac:	633a      	str	r2, [r7, #48]	@ 0x30
 80062ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062b0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80062b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80062b4:	e841 2300 	strex	r3, r2, [r1]
 80062b8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80062ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d1e1      	bne.n	8006284 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2220      	movs	r2, #32
 80062c4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2200      	movs	r2, #0
 80062cc:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2200      	movs	r2, #0
 80062d2:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062da:	693b      	ldr	r3, [r7, #16]
 80062dc:	e853 3f00 	ldrex	r3, [r3]
 80062e0:	60fb      	str	r3, [r7, #12]
   return(result);
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	f023 0310 	bic.w	r3, r3, #16
 80062e8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	461a      	mov	r2, r3
 80062f2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80062f6:	61fb      	str	r3, [r7, #28]
 80062f8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062fa:	69b9      	ldr	r1, [r7, #24]
 80062fc:	69fa      	ldr	r2, [r7, #28]
 80062fe:	e841 2300 	strex	r3, r2, [r1]
 8006302:	617b      	str	r3, [r7, #20]
   return(result);
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d1e4      	bne.n	80062d4 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2202      	movs	r2, #2
 800630e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006310:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006314:	4619      	mov	r1, r3
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	f000 f880 	bl	800641c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800631c:	e063      	b.n	80063e6 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800631e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006322:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006326:	2b00      	cmp	r3, #0
 8006328:	d00e      	beq.n	8006348 <HAL_UART_IRQHandler+0x5d8>
 800632a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800632e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006332:	2b00      	cmp	r3, #0
 8006334:	d008      	beq.n	8006348 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800633e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006340:	6878      	ldr	r0, [r7, #4]
 8006342:	f000 fddb 	bl	8006efc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006346:	e051      	b.n	80063ec <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006348:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800634c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006350:	2b00      	cmp	r3, #0
 8006352:	d014      	beq.n	800637e <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006354:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006358:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800635c:	2b00      	cmp	r3, #0
 800635e:	d105      	bne.n	800636c <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006360:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006364:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006368:	2b00      	cmp	r3, #0
 800636a:	d008      	beq.n	800637e <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006370:	2b00      	cmp	r3, #0
 8006372:	d03a      	beq.n	80063ea <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006378:	6878      	ldr	r0, [r7, #4]
 800637a:	4798      	blx	r3
    }
    return;
 800637c:	e035      	b.n	80063ea <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800637e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006382:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006386:	2b00      	cmp	r3, #0
 8006388:	d009      	beq.n	800639e <HAL_UART_IRQHandler+0x62e>
 800638a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800638e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006392:	2b00      	cmp	r3, #0
 8006394:	d003      	beq.n	800639e <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f000 fd85 	bl	8006ea6 <UART_EndTransmit_IT>
    return;
 800639c:	e026      	b.n	80063ec <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800639e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d009      	beq.n	80063be <HAL_UART_IRQHandler+0x64e>
 80063aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80063ae:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d003      	beq.n	80063be <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f000 fdb4 	bl	8006f24 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80063bc:	e016      	b.n	80063ec <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80063be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063c2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d010      	beq.n	80063ec <HAL_UART_IRQHandler+0x67c>
 80063ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	da0c      	bge.n	80063ec <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f000 fd9c 	bl	8006f10 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80063d8:	e008      	b.n	80063ec <HAL_UART_IRQHandler+0x67c>
      return;
 80063da:	bf00      	nop
 80063dc:	e006      	b.n	80063ec <HAL_UART_IRQHandler+0x67c>
    return;
 80063de:	bf00      	nop
 80063e0:	e004      	b.n	80063ec <HAL_UART_IRQHandler+0x67c>
      return;
 80063e2:	bf00      	nop
 80063e4:	e002      	b.n	80063ec <HAL_UART_IRQHandler+0x67c>
      return;
 80063e6:	bf00      	nop
 80063e8:	e000      	b.n	80063ec <HAL_UART_IRQHandler+0x67c>
    return;
 80063ea:	bf00      	nop
  }
}
 80063ec:	37e8      	adds	r7, #232	@ 0xe8
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bd80      	pop	{r7, pc}
 80063f2:	bf00      	nop

080063f4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80063f4:	b480      	push	{r7}
 80063f6:	b083      	sub	sp, #12
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80063fc:	bf00      	nop
 80063fe:	370c      	adds	r7, #12
 8006400:	46bd      	mov	sp, r7
 8006402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006406:	4770      	bx	lr

08006408 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006408:	b480      	push	{r7}
 800640a:	b083      	sub	sp, #12
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006410:	bf00      	nop
 8006412:	370c      	adds	r7, #12
 8006414:	46bd      	mov	sp, r7
 8006416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641a:	4770      	bx	lr

0800641c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800641c:	b480      	push	{r7}
 800641e:	b083      	sub	sp, #12
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
 8006424:	460b      	mov	r3, r1
 8006426:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006428:	bf00      	nop
 800642a:	370c      	adds	r7, #12
 800642c:	46bd      	mov	sp, r7
 800642e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006432:	4770      	bx	lr

08006434 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006434:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006438:	b08c      	sub	sp, #48	@ 0x30
 800643a:	af00      	add	r7, sp, #0
 800643c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800643e:	2300      	movs	r3, #0
 8006440:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006444:	697b      	ldr	r3, [r7, #20]
 8006446:	689a      	ldr	r2, [r3, #8]
 8006448:	697b      	ldr	r3, [r7, #20]
 800644a:	691b      	ldr	r3, [r3, #16]
 800644c:	431a      	orrs	r2, r3
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	695b      	ldr	r3, [r3, #20]
 8006452:	431a      	orrs	r2, r3
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	69db      	ldr	r3, [r3, #28]
 8006458:	4313      	orrs	r3, r2
 800645a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800645c:	697b      	ldr	r3, [r7, #20]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	681a      	ldr	r2, [r3, #0]
 8006462:	4baf      	ldr	r3, [pc, #700]	@ (8006720 <UART_SetConfig+0x2ec>)
 8006464:	4013      	ands	r3, r2
 8006466:	697a      	ldr	r2, [r7, #20]
 8006468:	6812      	ldr	r2, [r2, #0]
 800646a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800646c:	430b      	orrs	r3, r1
 800646e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006470:	697b      	ldr	r3, [r7, #20]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	685b      	ldr	r3, [r3, #4]
 8006476:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	68da      	ldr	r2, [r3, #12]
 800647e:	697b      	ldr	r3, [r7, #20]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	430a      	orrs	r2, r1
 8006484:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	699b      	ldr	r3, [r3, #24]
 800648a:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800648c:	697b      	ldr	r3, [r7, #20]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4aa4      	ldr	r2, [pc, #656]	@ (8006724 <UART_SetConfig+0x2f0>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d004      	beq.n	80064a0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006496:	697b      	ldr	r3, [r7, #20]
 8006498:	6a1b      	ldr	r3, [r3, #32]
 800649a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800649c:	4313      	orrs	r3, r2
 800649e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80064a0:	697b      	ldr	r3, [r7, #20]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	689b      	ldr	r3, [r3, #8]
 80064a6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80064aa:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80064ae:	697a      	ldr	r2, [r7, #20]
 80064b0:	6812      	ldr	r2, [r2, #0]
 80064b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80064b4:	430b      	orrs	r3, r1
 80064b6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80064b8:	697b      	ldr	r3, [r7, #20]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064be:	f023 010f 	bic.w	r1, r3, #15
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	430a      	orrs	r2, r1
 80064cc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a95      	ldr	r2, [pc, #596]	@ (8006728 <UART_SetConfig+0x2f4>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d125      	bne.n	8006524 <UART_SetConfig+0xf0>
 80064d8:	2003      	movs	r0, #3
 80064da:	f7ff fb59 	bl	8005b90 <LL_RCC_GetUSARTClockSource>
 80064de:	4603      	mov	r3, r0
 80064e0:	2b03      	cmp	r3, #3
 80064e2:	d81b      	bhi.n	800651c <UART_SetConfig+0xe8>
 80064e4:	a201      	add	r2, pc, #4	@ (adr r2, 80064ec <UART_SetConfig+0xb8>)
 80064e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064ea:	bf00      	nop
 80064ec:	080064fd 	.word	0x080064fd
 80064f0:	0800650d 	.word	0x0800650d
 80064f4:	08006505 	.word	0x08006505
 80064f8:	08006515 	.word	0x08006515
 80064fc:	2301      	movs	r3, #1
 80064fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006502:	e042      	b.n	800658a <UART_SetConfig+0x156>
 8006504:	2302      	movs	r3, #2
 8006506:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800650a:	e03e      	b.n	800658a <UART_SetConfig+0x156>
 800650c:	2304      	movs	r3, #4
 800650e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006512:	e03a      	b.n	800658a <UART_SetConfig+0x156>
 8006514:	2308      	movs	r3, #8
 8006516:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800651a:	e036      	b.n	800658a <UART_SetConfig+0x156>
 800651c:	2310      	movs	r3, #16
 800651e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006522:	e032      	b.n	800658a <UART_SetConfig+0x156>
 8006524:	697b      	ldr	r3, [r7, #20]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4a7e      	ldr	r2, [pc, #504]	@ (8006724 <UART_SetConfig+0x2f0>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d12a      	bne.n	8006584 <UART_SetConfig+0x150>
 800652e:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8006532:	f7ff fb3d 	bl	8005bb0 <LL_RCC_GetLPUARTClockSource>
 8006536:	4603      	mov	r3, r0
 8006538:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800653c:	d01a      	beq.n	8006574 <UART_SetConfig+0x140>
 800653e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006542:	d81b      	bhi.n	800657c <UART_SetConfig+0x148>
 8006544:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006548:	d00c      	beq.n	8006564 <UART_SetConfig+0x130>
 800654a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800654e:	d815      	bhi.n	800657c <UART_SetConfig+0x148>
 8006550:	2b00      	cmp	r3, #0
 8006552:	d003      	beq.n	800655c <UART_SetConfig+0x128>
 8006554:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006558:	d008      	beq.n	800656c <UART_SetConfig+0x138>
 800655a:	e00f      	b.n	800657c <UART_SetConfig+0x148>
 800655c:	2300      	movs	r3, #0
 800655e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006562:	e012      	b.n	800658a <UART_SetConfig+0x156>
 8006564:	2302      	movs	r3, #2
 8006566:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800656a:	e00e      	b.n	800658a <UART_SetConfig+0x156>
 800656c:	2304      	movs	r3, #4
 800656e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006572:	e00a      	b.n	800658a <UART_SetConfig+0x156>
 8006574:	2308      	movs	r3, #8
 8006576:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800657a:	e006      	b.n	800658a <UART_SetConfig+0x156>
 800657c:	2310      	movs	r3, #16
 800657e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006582:	e002      	b.n	800658a <UART_SetConfig+0x156>
 8006584:	2310      	movs	r3, #16
 8006586:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a65      	ldr	r2, [pc, #404]	@ (8006724 <UART_SetConfig+0x2f0>)
 8006590:	4293      	cmp	r3, r2
 8006592:	f040 8097 	bne.w	80066c4 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006596:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800659a:	2b08      	cmp	r3, #8
 800659c:	d823      	bhi.n	80065e6 <UART_SetConfig+0x1b2>
 800659e:	a201      	add	r2, pc, #4	@ (adr r2, 80065a4 <UART_SetConfig+0x170>)
 80065a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065a4:	080065c9 	.word	0x080065c9
 80065a8:	080065e7 	.word	0x080065e7
 80065ac:	080065d1 	.word	0x080065d1
 80065b0:	080065e7 	.word	0x080065e7
 80065b4:	080065d7 	.word	0x080065d7
 80065b8:	080065e7 	.word	0x080065e7
 80065bc:	080065e7 	.word	0x080065e7
 80065c0:	080065e7 	.word	0x080065e7
 80065c4:	080065df 	.word	0x080065df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80065c8:	f7fe fa3a 	bl	8004a40 <HAL_RCC_GetPCLK1Freq>
 80065cc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80065ce:	e010      	b.n	80065f2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80065d0:	4b56      	ldr	r3, [pc, #344]	@ (800672c <UART_SetConfig+0x2f8>)
 80065d2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80065d4:	e00d      	b.n	80065f2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80065d6:	f7fe f9b3 	bl	8004940 <HAL_RCC_GetSysClockFreq>
 80065da:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80065dc:	e009      	b.n	80065f2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065de:	f248 0306 	movw	r3, #32774	@ 0x8006
 80065e2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80065e4:	e005      	b.n	80065f2 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 80065e6:	2300      	movs	r3, #0
 80065e8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80065ea:	2301      	movs	r3, #1
 80065ec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80065f0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80065f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	f000 812b 	beq.w	8006850 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065fe:	4a4c      	ldr	r2, [pc, #304]	@ (8006730 <UART_SetConfig+0x2fc>)
 8006600:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006604:	461a      	mov	r2, r3
 8006606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006608:	fbb3 f3f2 	udiv	r3, r3, r2
 800660c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	685a      	ldr	r2, [r3, #4]
 8006612:	4613      	mov	r3, r2
 8006614:	005b      	lsls	r3, r3, #1
 8006616:	4413      	add	r3, r2
 8006618:	69ba      	ldr	r2, [r7, #24]
 800661a:	429a      	cmp	r2, r3
 800661c:	d305      	bcc.n	800662a <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	685b      	ldr	r3, [r3, #4]
 8006622:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006624:	69ba      	ldr	r2, [r7, #24]
 8006626:	429a      	cmp	r2, r3
 8006628:	d903      	bls.n	8006632 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 800662a:	2301      	movs	r3, #1
 800662c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006630:	e10e      	b.n	8006850 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006634:	2200      	movs	r2, #0
 8006636:	60bb      	str	r3, [r7, #8]
 8006638:	60fa      	str	r2, [r7, #12]
 800663a:	697b      	ldr	r3, [r7, #20]
 800663c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800663e:	4a3c      	ldr	r2, [pc, #240]	@ (8006730 <UART_SetConfig+0x2fc>)
 8006640:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006644:	b29b      	uxth	r3, r3
 8006646:	2200      	movs	r2, #0
 8006648:	603b      	str	r3, [r7, #0]
 800664a:	607a      	str	r2, [r7, #4]
 800664c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006650:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006654:	f7fa f8d2 	bl	80007fc <__aeabi_uldivmod>
 8006658:	4602      	mov	r2, r0
 800665a:	460b      	mov	r3, r1
 800665c:	4610      	mov	r0, r2
 800665e:	4619      	mov	r1, r3
 8006660:	f04f 0200 	mov.w	r2, #0
 8006664:	f04f 0300 	mov.w	r3, #0
 8006668:	020b      	lsls	r3, r1, #8
 800666a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800666e:	0202      	lsls	r2, r0, #8
 8006670:	6979      	ldr	r1, [r7, #20]
 8006672:	6849      	ldr	r1, [r1, #4]
 8006674:	0849      	lsrs	r1, r1, #1
 8006676:	2000      	movs	r0, #0
 8006678:	460c      	mov	r4, r1
 800667a:	4605      	mov	r5, r0
 800667c:	eb12 0804 	adds.w	r8, r2, r4
 8006680:	eb43 0905 	adc.w	r9, r3, r5
 8006684:	697b      	ldr	r3, [r7, #20]
 8006686:	685b      	ldr	r3, [r3, #4]
 8006688:	2200      	movs	r2, #0
 800668a:	469a      	mov	sl, r3
 800668c:	4693      	mov	fp, r2
 800668e:	4652      	mov	r2, sl
 8006690:	465b      	mov	r3, fp
 8006692:	4640      	mov	r0, r8
 8006694:	4649      	mov	r1, r9
 8006696:	f7fa f8b1 	bl	80007fc <__aeabi_uldivmod>
 800669a:	4602      	mov	r2, r0
 800669c:	460b      	mov	r3, r1
 800669e:	4613      	mov	r3, r2
 80066a0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80066a2:	6a3b      	ldr	r3, [r7, #32]
 80066a4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80066a8:	d308      	bcc.n	80066bc <UART_SetConfig+0x288>
 80066aa:	6a3b      	ldr	r3, [r7, #32]
 80066ac:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80066b0:	d204      	bcs.n	80066bc <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	6a3a      	ldr	r2, [r7, #32]
 80066b8:	60da      	str	r2, [r3, #12]
 80066ba:	e0c9      	b.n	8006850 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 80066bc:	2301      	movs	r3, #1
 80066be:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80066c2:	e0c5      	b.n	8006850 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80066c4:	697b      	ldr	r3, [r7, #20]
 80066c6:	69db      	ldr	r3, [r3, #28]
 80066c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80066cc:	d16d      	bne.n	80067aa <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 80066ce:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80066d2:	3b01      	subs	r3, #1
 80066d4:	2b07      	cmp	r3, #7
 80066d6:	d82d      	bhi.n	8006734 <UART_SetConfig+0x300>
 80066d8:	a201      	add	r2, pc, #4	@ (adr r2, 80066e0 <UART_SetConfig+0x2ac>)
 80066da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066de:	bf00      	nop
 80066e0:	08006701 	.word	0x08006701
 80066e4:	08006709 	.word	0x08006709
 80066e8:	08006735 	.word	0x08006735
 80066ec:	0800670f 	.word	0x0800670f
 80066f0:	08006735 	.word	0x08006735
 80066f4:	08006735 	.word	0x08006735
 80066f8:	08006735 	.word	0x08006735
 80066fc:	08006717 	.word	0x08006717
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006700:	f7fe f9b4 	bl	8004a6c <HAL_RCC_GetPCLK2Freq>
 8006704:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006706:	e01b      	b.n	8006740 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006708:	4b08      	ldr	r3, [pc, #32]	@ (800672c <UART_SetConfig+0x2f8>)
 800670a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800670c:	e018      	b.n	8006740 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800670e:	f7fe f917 	bl	8004940 <HAL_RCC_GetSysClockFreq>
 8006712:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006714:	e014      	b.n	8006740 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006716:	f248 0306 	movw	r3, #32774	@ 0x8006
 800671a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800671c:	e010      	b.n	8006740 <UART_SetConfig+0x30c>
 800671e:	bf00      	nop
 8006720:	cfff69f3 	.word	0xcfff69f3
 8006724:	40008000 	.word	0x40008000
 8006728:	40013800 	.word	0x40013800
 800672c:	00f42400 	.word	0x00f42400
 8006730:	0800e994 	.word	0x0800e994
      default:
        pclk = 0U;
 8006734:	2300      	movs	r3, #0
 8006736:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006738:	2301      	movs	r3, #1
 800673a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800673e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006742:	2b00      	cmp	r3, #0
 8006744:	f000 8084 	beq.w	8006850 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006748:	697b      	ldr	r3, [r7, #20]
 800674a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800674c:	4a4b      	ldr	r2, [pc, #300]	@ (800687c <UART_SetConfig+0x448>)
 800674e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006752:	461a      	mov	r2, r3
 8006754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006756:	fbb3 f3f2 	udiv	r3, r3, r2
 800675a:	005a      	lsls	r2, r3, #1
 800675c:	697b      	ldr	r3, [r7, #20]
 800675e:	685b      	ldr	r3, [r3, #4]
 8006760:	085b      	lsrs	r3, r3, #1
 8006762:	441a      	add	r2, r3
 8006764:	697b      	ldr	r3, [r7, #20]
 8006766:	685b      	ldr	r3, [r3, #4]
 8006768:	fbb2 f3f3 	udiv	r3, r2, r3
 800676c:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800676e:	6a3b      	ldr	r3, [r7, #32]
 8006770:	2b0f      	cmp	r3, #15
 8006772:	d916      	bls.n	80067a2 <UART_SetConfig+0x36e>
 8006774:	6a3b      	ldr	r3, [r7, #32]
 8006776:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800677a:	d212      	bcs.n	80067a2 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800677c:	6a3b      	ldr	r3, [r7, #32]
 800677e:	b29b      	uxth	r3, r3
 8006780:	f023 030f 	bic.w	r3, r3, #15
 8006784:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006786:	6a3b      	ldr	r3, [r7, #32]
 8006788:	085b      	lsrs	r3, r3, #1
 800678a:	b29b      	uxth	r3, r3
 800678c:	f003 0307 	and.w	r3, r3, #7
 8006790:	b29a      	uxth	r2, r3
 8006792:	8bfb      	ldrh	r3, [r7, #30]
 8006794:	4313      	orrs	r3, r2
 8006796:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006798:	697b      	ldr	r3, [r7, #20]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	8bfa      	ldrh	r2, [r7, #30]
 800679e:	60da      	str	r2, [r3, #12]
 80067a0:	e056      	b.n	8006850 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 80067a2:	2301      	movs	r3, #1
 80067a4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80067a8:	e052      	b.n	8006850 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80067aa:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80067ae:	3b01      	subs	r3, #1
 80067b0:	2b07      	cmp	r3, #7
 80067b2:	d822      	bhi.n	80067fa <UART_SetConfig+0x3c6>
 80067b4:	a201      	add	r2, pc, #4	@ (adr r2, 80067bc <UART_SetConfig+0x388>)
 80067b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067ba:	bf00      	nop
 80067bc:	080067dd 	.word	0x080067dd
 80067c0:	080067e5 	.word	0x080067e5
 80067c4:	080067fb 	.word	0x080067fb
 80067c8:	080067eb 	.word	0x080067eb
 80067cc:	080067fb 	.word	0x080067fb
 80067d0:	080067fb 	.word	0x080067fb
 80067d4:	080067fb 	.word	0x080067fb
 80067d8:	080067f3 	.word	0x080067f3
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80067dc:	f7fe f946 	bl	8004a6c <HAL_RCC_GetPCLK2Freq>
 80067e0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80067e2:	e010      	b.n	8006806 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80067e4:	4b26      	ldr	r3, [pc, #152]	@ (8006880 <UART_SetConfig+0x44c>)
 80067e6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80067e8:	e00d      	b.n	8006806 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80067ea:	f7fe f8a9 	bl	8004940 <HAL_RCC_GetSysClockFreq>
 80067ee:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80067f0:	e009      	b.n	8006806 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80067f2:	f248 0306 	movw	r3, #32774	@ 0x8006
 80067f6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80067f8:	e005      	b.n	8006806 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 80067fa:	2300      	movs	r3, #0
 80067fc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80067fe:	2301      	movs	r3, #1
 8006800:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006804:	bf00      	nop
    }

    if (pclk != 0U)
 8006806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006808:	2b00      	cmp	r3, #0
 800680a:	d021      	beq.n	8006850 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800680c:	697b      	ldr	r3, [r7, #20]
 800680e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006810:	4a1a      	ldr	r2, [pc, #104]	@ (800687c <UART_SetConfig+0x448>)
 8006812:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006816:	461a      	mov	r2, r3
 8006818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800681a:	fbb3 f2f2 	udiv	r2, r3, r2
 800681e:	697b      	ldr	r3, [r7, #20]
 8006820:	685b      	ldr	r3, [r3, #4]
 8006822:	085b      	lsrs	r3, r3, #1
 8006824:	441a      	add	r2, r3
 8006826:	697b      	ldr	r3, [r7, #20]
 8006828:	685b      	ldr	r3, [r3, #4]
 800682a:	fbb2 f3f3 	udiv	r3, r2, r3
 800682e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006830:	6a3b      	ldr	r3, [r7, #32]
 8006832:	2b0f      	cmp	r3, #15
 8006834:	d909      	bls.n	800684a <UART_SetConfig+0x416>
 8006836:	6a3b      	ldr	r3, [r7, #32]
 8006838:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800683c:	d205      	bcs.n	800684a <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800683e:	6a3b      	ldr	r3, [r7, #32]
 8006840:	b29a      	uxth	r2, r3
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	60da      	str	r2, [r3, #12]
 8006848:	e002      	b.n	8006850 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800684a:	2301      	movs	r3, #1
 800684c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006850:	697b      	ldr	r3, [r7, #20]
 8006852:	2201      	movs	r2, #1
 8006854:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006858:	697b      	ldr	r3, [r7, #20]
 800685a:	2201      	movs	r2, #1
 800685c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006860:	697b      	ldr	r3, [r7, #20]
 8006862:	2200      	movs	r2, #0
 8006864:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006866:	697b      	ldr	r3, [r7, #20]
 8006868:	2200      	movs	r2, #0
 800686a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800686c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8006870:	4618      	mov	r0, r3
 8006872:	3730      	adds	r7, #48	@ 0x30
 8006874:	46bd      	mov	sp, r7
 8006876:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800687a:	bf00      	nop
 800687c:	0800e994 	.word	0x0800e994
 8006880:	00f42400 	.word	0x00f42400

08006884 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006884:	b480      	push	{r7}
 8006886:	b083      	sub	sp, #12
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006890:	f003 0308 	and.w	r3, r3, #8
 8006894:	2b00      	cmp	r3, #0
 8006896:	d00a      	beq.n	80068ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	685b      	ldr	r3, [r3, #4]
 800689e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	430a      	orrs	r2, r1
 80068ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068b2:	f003 0301 	and.w	r3, r3, #1
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d00a      	beq.n	80068d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	685b      	ldr	r3, [r3, #4]
 80068c0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	430a      	orrs	r2, r1
 80068ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068d4:	f003 0302 	and.w	r3, r3, #2
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d00a      	beq.n	80068f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	685b      	ldr	r3, [r3, #4]
 80068e2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	430a      	orrs	r2, r1
 80068f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068f6:	f003 0304 	and.w	r3, r3, #4
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d00a      	beq.n	8006914 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	430a      	orrs	r2, r1
 8006912:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006918:	f003 0310 	and.w	r3, r3, #16
 800691c:	2b00      	cmp	r3, #0
 800691e:	d00a      	beq.n	8006936 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	689b      	ldr	r3, [r3, #8]
 8006926:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	430a      	orrs	r2, r1
 8006934:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800693a:	f003 0320 	and.w	r3, r3, #32
 800693e:	2b00      	cmp	r3, #0
 8006940:	d00a      	beq.n	8006958 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	689b      	ldr	r3, [r3, #8]
 8006948:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	430a      	orrs	r2, r1
 8006956:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800695c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006960:	2b00      	cmp	r3, #0
 8006962:	d01a      	beq.n	800699a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	685b      	ldr	r3, [r3, #4]
 800696a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	430a      	orrs	r2, r1
 8006978:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800697e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006982:	d10a      	bne.n	800699a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	685b      	ldr	r3, [r3, #4]
 800698a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	430a      	orrs	r2, r1
 8006998:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800699e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d00a      	beq.n	80069bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	685b      	ldr	r3, [r3, #4]
 80069ac:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	430a      	orrs	r2, r1
 80069ba:	605a      	str	r2, [r3, #4]
  }
}
 80069bc:	bf00      	nop
 80069be:	370c      	adds	r7, #12
 80069c0:	46bd      	mov	sp, r7
 80069c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c6:	4770      	bx	lr

080069c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b098      	sub	sp, #96	@ 0x60
 80069cc:	af02      	add	r7, sp, #8
 80069ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2200      	movs	r2, #0
 80069d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80069d8:	f7fc f830 	bl	8002a3c <HAL_GetTick>
 80069dc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f003 0308 	and.w	r3, r3, #8
 80069e8:	2b08      	cmp	r3, #8
 80069ea:	d12f      	bne.n	8006a4c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80069ec:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80069f0:	9300      	str	r3, [sp, #0]
 80069f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80069f4:	2200      	movs	r2, #0
 80069f6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f000 f88e 	bl	8006b1c <UART_WaitOnFlagUntilTimeout>
 8006a00:	4603      	mov	r3, r0
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d022      	beq.n	8006a4c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a0e:	e853 3f00 	ldrex	r3, [r3]
 8006a12:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006a14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a16:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006a1a:	653b      	str	r3, [r7, #80]	@ 0x50
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	461a      	mov	r2, r3
 8006a22:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006a24:	647b      	str	r3, [r7, #68]	@ 0x44
 8006a26:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a28:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006a2a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006a2c:	e841 2300 	strex	r3, r2, [r1]
 8006a30:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006a32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d1e6      	bne.n	8006a06 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2220      	movs	r2, #32
 8006a3c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2200      	movs	r2, #0
 8006a44:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a48:	2303      	movs	r3, #3
 8006a4a:	e063      	b.n	8006b14 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f003 0304 	and.w	r3, r3, #4
 8006a56:	2b04      	cmp	r3, #4
 8006a58:	d149      	bne.n	8006aee <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a5a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006a5e:	9300      	str	r3, [sp, #0]
 8006a60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a62:	2200      	movs	r2, #0
 8006a64:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f000 f857 	bl	8006b1c <UART_WaitOnFlagUntilTimeout>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d03c      	beq.n	8006aee <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a7c:	e853 3f00 	ldrex	r3, [r3]
 8006a80:	623b      	str	r3, [r7, #32]
   return(result);
 8006a82:	6a3b      	ldr	r3, [r7, #32]
 8006a84:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006a88:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	461a      	mov	r2, r3
 8006a90:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a92:	633b      	str	r3, [r7, #48]	@ 0x30
 8006a94:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a96:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006a98:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a9a:	e841 2300 	strex	r3, r2, [r1]
 8006a9e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006aa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d1e6      	bne.n	8006a74 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	3308      	adds	r3, #8
 8006aac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aae:	693b      	ldr	r3, [r7, #16]
 8006ab0:	e853 3f00 	ldrex	r3, [r3]
 8006ab4:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	f023 0301 	bic.w	r3, r3, #1
 8006abc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	3308      	adds	r3, #8
 8006ac4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006ac6:	61fa      	str	r2, [r7, #28]
 8006ac8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aca:	69b9      	ldr	r1, [r7, #24]
 8006acc:	69fa      	ldr	r2, [r7, #28]
 8006ace:	e841 2300 	strex	r3, r2, [r1]
 8006ad2:	617b      	str	r3, [r7, #20]
   return(result);
 8006ad4:	697b      	ldr	r3, [r7, #20]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d1e5      	bne.n	8006aa6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2220      	movs	r2, #32
 8006ade:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006aea:	2303      	movs	r3, #3
 8006aec:	e012      	b.n	8006b14 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2220      	movs	r2, #32
 8006af2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2220      	movs	r2, #32
 8006afa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2200      	movs	r2, #0
 8006b02:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2200      	movs	r2, #0
 8006b08:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006b12:	2300      	movs	r3, #0
}
 8006b14:	4618      	mov	r0, r3
 8006b16:	3758      	adds	r7, #88	@ 0x58
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	bd80      	pop	{r7, pc}

08006b1c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b084      	sub	sp, #16
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	60f8      	str	r0, [r7, #12]
 8006b24:	60b9      	str	r1, [r7, #8]
 8006b26:	603b      	str	r3, [r7, #0]
 8006b28:	4613      	mov	r3, r2
 8006b2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b2c:	e04f      	b.n	8006bce <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b2e:	69bb      	ldr	r3, [r7, #24]
 8006b30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b34:	d04b      	beq.n	8006bce <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b36:	f7fb ff81 	bl	8002a3c <HAL_GetTick>
 8006b3a:	4602      	mov	r2, r0
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	1ad3      	subs	r3, r2, r3
 8006b40:	69ba      	ldr	r2, [r7, #24]
 8006b42:	429a      	cmp	r2, r3
 8006b44:	d302      	bcc.n	8006b4c <UART_WaitOnFlagUntilTimeout+0x30>
 8006b46:	69bb      	ldr	r3, [r7, #24]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d101      	bne.n	8006b50 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006b4c:	2303      	movs	r3, #3
 8006b4e:	e04e      	b.n	8006bee <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f003 0304 	and.w	r3, r3, #4
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d037      	beq.n	8006bce <UART_WaitOnFlagUntilTimeout+0xb2>
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	2b80      	cmp	r3, #128	@ 0x80
 8006b62:	d034      	beq.n	8006bce <UART_WaitOnFlagUntilTimeout+0xb2>
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	2b40      	cmp	r3, #64	@ 0x40
 8006b68:	d031      	beq.n	8006bce <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	69db      	ldr	r3, [r3, #28]
 8006b70:	f003 0308 	and.w	r3, r3, #8
 8006b74:	2b08      	cmp	r3, #8
 8006b76:	d110      	bne.n	8006b9a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	2208      	movs	r2, #8
 8006b7e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006b80:	68f8      	ldr	r0, [r7, #12]
 8006b82:	f000 f879 	bl	8006c78 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	2208      	movs	r2, #8
 8006b8a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	2200      	movs	r2, #0
 8006b92:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006b96:	2301      	movs	r3, #1
 8006b98:	e029      	b.n	8006bee <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	69db      	ldr	r3, [r3, #28]
 8006ba0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006ba4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006ba8:	d111      	bne.n	8006bce <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006bb2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006bb4:	68f8      	ldr	r0, [r7, #12]
 8006bb6:	f000 f85f 	bl	8006c78 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	2220      	movs	r2, #32
 8006bbe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006bca:	2303      	movs	r3, #3
 8006bcc:	e00f      	b.n	8006bee <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	69da      	ldr	r2, [r3, #28]
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	4013      	ands	r3, r2
 8006bd8:	68ba      	ldr	r2, [r7, #8]
 8006bda:	429a      	cmp	r2, r3
 8006bdc:	bf0c      	ite	eq
 8006bde:	2301      	moveq	r3, #1
 8006be0:	2300      	movne	r3, #0
 8006be2:	b2db      	uxtb	r3, r3
 8006be4:	461a      	mov	r2, r3
 8006be6:	79fb      	ldrb	r3, [r7, #7]
 8006be8:	429a      	cmp	r2, r3
 8006bea:	d0a0      	beq.n	8006b2e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006bec:	2300      	movs	r3, #0
}
 8006bee:	4618      	mov	r0, r3
 8006bf0:	3710      	adds	r7, #16
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	bd80      	pop	{r7, pc}

08006bf6 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006bf6:	b480      	push	{r7}
 8006bf8:	b08f      	sub	sp, #60	@ 0x3c
 8006bfa:	af00      	add	r7, sp, #0
 8006bfc:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c04:	6a3b      	ldr	r3, [r7, #32]
 8006c06:	e853 3f00 	ldrex	r3, [r3]
 8006c0a:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c0c:	69fb      	ldr	r3, [r7, #28]
 8006c0e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006c12:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	461a      	mov	r2, r3
 8006c1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006c1e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c20:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006c22:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006c24:	e841 2300 	strex	r3, r2, [r1]
 8006c28:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d1e6      	bne.n	8006bfe <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	3308      	adds	r3, #8
 8006c36:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	e853 3f00 	ldrex	r3, [r3]
 8006c3e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8006c46:	633b      	str	r3, [r7, #48]	@ 0x30
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	3308      	adds	r3, #8
 8006c4e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c50:	61ba      	str	r2, [r7, #24]
 8006c52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c54:	6979      	ldr	r1, [r7, #20]
 8006c56:	69ba      	ldr	r2, [r7, #24]
 8006c58:	e841 2300 	strex	r3, r2, [r1]
 8006c5c:	613b      	str	r3, [r7, #16]
   return(result);
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d1e5      	bne.n	8006c30 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2220      	movs	r2, #32
 8006c68:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8006c6c:	bf00      	nop
 8006c6e:	373c      	adds	r7, #60	@ 0x3c
 8006c70:	46bd      	mov	sp, r7
 8006c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c76:	4770      	bx	lr

08006c78 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b095      	sub	sp, #84	@ 0x54
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c88:	e853 3f00 	ldrex	r3, [r3]
 8006c8c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006c8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c90:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006c94:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	461a      	mov	r2, r3
 8006c9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c9e:	643b      	str	r3, [r7, #64]	@ 0x40
 8006ca0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ca2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006ca4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006ca6:	e841 2300 	strex	r3, r2, [r1]
 8006caa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006cac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d1e6      	bne.n	8006c80 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	3308      	adds	r3, #8
 8006cb8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cba:	6a3b      	ldr	r3, [r7, #32]
 8006cbc:	e853 3f00 	ldrex	r3, [r3]
 8006cc0:	61fb      	str	r3, [r7, #28]
   return(result);
 8006cc2:	69fb      	ldr	r3, [r7, #28]
 8006cc4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006cc8:	f023 0301 	bic.w	r3, r3, #1
 8006ccc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	3308      	adds	r3, #8
 8006cd4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006cd6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006cd8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cda:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006cdc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006cde:	e841 2300 	strex	r3, r2, [r1]
 8006ce2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d1e3      	bne.n	8006cb2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006cee:	2b01      	cmp	r3, #1
 8006cf0:	d118      	bne.n	8006d24 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	e853 3f00 	ldrex	r3, [r3]
 8006cfe:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	f023 0310 	bic.w	r3, r3, #16
 8006d06:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	461a      	mov	r2, r3
 8006d0e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d10:	61bb      	str	r3, [r7, #24]
 8006d12:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d14:	6979      	ldr	r1, [r7, #20]
 8006d16:	69ba      	ldr	r2, [r7, #24]
 8006d18:	e841 2300 	strex	r3, r2, [r1]
 8006d1c:	613b      	str	r3, [r7, #16]
   return(result);
 8006d1e:	693b      	ldr	r3, [r7, #16]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d1e6      	bne.n	8006cf2 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2220      	movs	r2, #32
 8006d28:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2200      	movs	r2, #0
 8006d36:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006d38:	bf00      	nop
 8006d3a:	3754      	adds	r7, #84	@ 0x54
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d42:	4770      	bx	lr

08006d44 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b090      	sub	sp, #64	@ 0x40
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d50:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f003 0320 	and.w	r3, r3, #32
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d137      	bne.n	8006dd0 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8006d60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d62:	2200      	movs	r2, #0
 8006d64:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006d68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	3308      	adds	r3, #8
 8006d6e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d72:	e853 3f00 	ldrex	r3, [r3]
 8006d76:	623b      	str	r3, [r7, #32]
   return(result);
 8006d78:	6a3b      	ldr	r3, [r7, #32]
 8006d7a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006d7e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006d80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	3308      	adds	r3, #8
 8006d86:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006d88:	633a      	str	r2, [r7, #48]	@ 0x30
 8006d8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d8c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006d8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d90:	e841 2300 	strex	r3, r2, [r1]
 8006d94:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006d96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d1e5      	bne.n	8006d68 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006d9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006da2:	693b      	ldr	r3, [r7, #16]
 8006da4:	e853 3f00 	ldrex	r3, [r3]
 8006da8:	60fb      	str	r3, [r7, #12]
   return(result);
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006db0:	637b      	str	r3, [r7, #52]	@ 0x34
 8006db2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	461a      	mov	r2, r3
 8006db8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006dba:	61fb      	str	r3, [r7, #28]
 8006dbc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dbe:	69b9      	ldr	r1, [r7, #24]
 8006dc0:	69fa      	ldr	r2, [r7, #28]
 8006dc2:	e841 2300 	strex	r3, r2, [r1]
 8006dc6:	617b      	str	r3, [r7, #20]
   return(result);
 8006dc8:	697b      	ldr	r3, [r7, #20]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d1e6      	bne.n	8006d9c <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006dce:	e002      	b.n	8006dd6 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006dd0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8006dd2:	f7fb f879 	bl	8001ec8 <HAL_UART_TxCpltCallback>
}
 8006dd6:	bf00      	nop
 8006dd8:	3740      	adds	r7, #64	@ 0x40
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bd80      	pop	{r7, pc}

08006dde <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006dde:	b580      	push	{r7, lr}
 8006de0:	b084      	sub	sp, #16
 8006de2:	af00      	add	r7, sp, #0
 8006de4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dea:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006dec:	68f8      	ldr	r0, [r7, #12]
 8006dee:	f7ff fb01 	bl	80063f4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006df2:	bf00      	nop
 8006df4:	3710      	adds	r7, #16
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}

08006dfa <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006dfa:	b580      	push	{r7, lr}
 8006dfc:	b086      	sub	sp, #24
 8006dfe:	af00      	add	r7, sp, #0
 8006e00:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e06:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006e08:	697b      	ldr	r3, [r7, #20]
 8006e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e0e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006e10:	697b      	ldr	r3, [r7, #20]
 8006e12:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006e16:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006e18:	697b      	ldr	r3, [r7, #20]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	689b      	ldr	r3, [r3, #8]
 8006e1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e22:	2b80      	cmp	r3, #128	@ 0x80
 8006e24:	d109      	bne.n	8006e3a <UART_DMAError+0x40>
 8006e26:	693b      	ldr	r3, [r7, #16]
 8006e28:	2b21      	cmp	r3, #33	@ 0x21
 8006e2a:	d106      	bne.n	8006e3a <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006e2c:	697b      	ldr	r3, [r7, #20]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8006e34:	6978      	ldr	r0, [r7, #20]
 8006e36:	f7ff fede 	bl	8006bf6 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006e3a:	697b      	ldr	r3, [r7, #20]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	689b      	ldr	r3, [r3, #8]
 8006e40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e44:	2b40      	cmp	r3, #64	@ 0x40
 8006e46:	d109      	bne.n	8006e5c <UART_DMAError+0x62>
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	2b22      	cmp	r3, #34	@ 0x22
 8006e4c:	d106      	bne.n	8006e5c <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006e4e:	697b      	ldr	r3, [r7, #20]
 8006e50:	2200      	movs	r2, #0
 8006e52:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8006e56:	6978      	ldr	r0, [r7, #20]
 8006e58:	f7ff ff0e 	bl	8006c78 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006e5c:	697b      	ldr	r3, [r7, #20]
 8006e5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e62:	f043 0210 	orr.w	r2, r3, #16
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006e6c:	6978      	ldr	r0, [r7, #20]
 8006e6e:	f7ff facb 	bl	8006408 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e72:	bf00      	nop
 8006e74:	3718      	adds	r7, #24
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bd80      	pop	{r7, pc}

08006e7a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006e7a:	b580      	push	{r7, lr}
 8006e7c:	b084      	sub	sp, #16
 8006e7e:	af00      	add	r7, sp, #0
 8006e80:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e86:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	2200      	movs	r2, #0
 8006e94:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006e98:	68f8      	ldr	r0, [r7, #12]
 8006e9a:	f7ff fab5 	bl	8006408 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e9e:	bf00      	nop
 8006ea0:	3710      	adds	r7, #16
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bd80      	pop	{r7, pc}

08006ea6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006ea6:	b580      	push	{r7, lr}
 8006ea8:	b088      	sub	sp, #32
 8006eaa:	af00      	add	r7, sp, #0
 8006eac:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	e853 3f00 	ldrex	r3, [r3]
 8006eba:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006ec2:	61fb      	str	r3, [r7, #28]
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	461a      	mov	r2, r3
 8006eca:	69fb      	ldr	r3, [r7, #28]
 8006ecc:	61bb      	str	r3, [r7, #24]
 8006ece:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ed0:	6979      	ldr	r1, [r7, #20]
 8006ed2:	69ba      	ldr	r2, [r7, #24]
 8006ed4:	e841 2300 	strex	r3, r2, [r1]
 8006ed8:	613b      	str	r3, [r7, #16]
   return(result);
 8006eda:	693b      	ldr	r3, [r7, #16]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d1e6      	bne.n	8006eae <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2220      	movs	r2, #32
 8006ee4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2200      	movs	r2, #0
 8006eec:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f7fa ffea 	bl	8001ec8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ef4:	bf00      	nop
 8006ef6:	3720      	adds	r7, #32
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bd80      	pop	{r7, pc}

08006efc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006efc:	b480      	push	{r7}
 8006efe:	b083      	sub	sp, #12
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006f04:	bf00      	nop
 8006f06:	370c      	adds	r7, #12
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0e:	4770      	bx	lr

08006f10 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006f10:	b480      	push	{r7}
 8006f12:	b083      	sub	sp, #12
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006f18:	bf00      	nop
 8006f1a:	370c      	adds	r7, #12
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f22:	4770      	bx	lr

08006f24 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006f24:	b480      	push	{r7}
 8006f26:	b083      	sub	sp, #12
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006f2c:	bf00      	nop
 8006f2e:	370c      	adds	r7, #12
 8006f30:	46bd      	mov	sp, r7
 8006f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f36:	4770      	bx	lr

08006f38 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006f38:	b480      	push	{r7}
 8006f3a:	b085      	sub	sp, #20
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006f46:	2b01      	cmp	r3, #1
 8006f48:	d101      	bne.n	8006f4e <HAL_UARTEx_DisableFifoMode+0x16>
 8006f4a:	2302      	movs	r3, #2
 8006f4c:	e027      	b.n	8006f9e <HAL_UARTEx_DisableFifoMode+0x66>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2201      	movs	r2, #1
 8006f52:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2224      	movs	r2, #36	@ 0x24
 8006f5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	681a      	ldr	r2, [r3, #0]
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f022 0201 	bic.w	r2, r2, #1
 8006f74:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006f7c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2200      	movs	r2, #0
 8006f82:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	68fa      	ldr	r2, [r7, #12]
 8006f8a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2220      	movs	r2, #32
 8006f90:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2200      	movs	r2, #0
 8006f98:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006f9c:	2300      	movs	r3, #0
}
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	3714      	adds	r7, #20
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa8:	4770      	bx	lr

08006faa <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006faa:	b580      	push	{r7, lr}
 8006fac:	b084      	sub	sp, #16
 8006fae:	af00      	add	r7, sp, #0
 8006fb0:	6078      	str	r0, [r7, #4]
 8006fb2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006fba:	2b01      	cmp	r3, #1
 8006fbc:	d101      	bne.n	8006fc2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006fbe:	2302      	movs	r3, #2
 8006fc0:	e02d      	b.n	800701e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2201      	movs	r2, #1
 8006fc6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2224      	movs	r2, #36	@ 0x24
 8006fce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	681a      	ldr	r2, [r3, #0]
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f022 0201 	bic.w	r2, r2, #1
 8006fe8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	689b      	ldr	r3, [r3, #8]
 8006ff0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	683a      	ldr	r2, [r7, #0]
 8006ffa:	430a      	orrs	r2, r1
 8006ffc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f000 f850 	bl	80070a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	68fa      	ldr	r2, [r7, #12]
 800700a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2220      	movs	r2, #32
 8007010:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2200      	movs	r2, #0
 8007018:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800701c:	2300      	movs	r3, #0
}
 800701e:	4618      	mov	r0, r3
 8007020:	3710      	adds	r7, #16
 8007022:	46bd      	mov	sp, r7
 8007024:	bd80      	pop	{r7, pc}

08007026 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007026:	b580      	push	{r7, lr}
 8007028:	b084      	sub	sp, #16
 800702a:	af00      	add	r7, sp, #0
 800702c:	6078      	str	r0, [r7, #4]
 800702e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007036:	2b01      	cmp	r3, #1
 8007038:	d101      	bne.n	800703e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800703a:	2302      	movs	r3, #2
 800703c:	e02d      	b.n	800709a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2201      	movs	r2, #1
 8007042:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2224      	movs	r2, #36	@ 0x24
 800704a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	681a      	ldr	r2, [r3, #0]
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f022 0201 	bic.w	r2, r2, #1
 8007064:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	689b      	ldr	r3, [r3, #8]
 800706c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	683a      	ldr	r2, [r7, #0]
 8007076:	430a      	orrs	r2, r1
 8007078:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	f000 f812 	bl	80070a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	68fa      	ldr	r2, [r7, #12]
 8007086:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2220      	movs	r2, #32
 800708c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2200      	movs	r2, #0
 8007094:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007098:	2300      	movs	r3, #0
}
 800709a:	4618      	mov	r0, r3
 800709c:	3710      	adds	r7, #16
 800709e:	46bd      	mov	sp, r7
 80070a0:	bd80      	pop	{r7, pc}
	...

080070a4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80070a4:	b480      	push	{r7}
 80070a6:	b085      	sub	sp, #20
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d108      	bne.n	80070c6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2201      	movs	r2, #1
 80070b8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2201      	movs	r2, #1
 80070c0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80070c4:	e031      	b.n	800712a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80070c6:	2308      	movs	r3, #8
 80070c8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80070ca:	2308      	movs	r3, #8
 80070cc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	689b      	ldr	r3, [r3, #8]
 80070d4:	0e5b      	lsrs	r3, r3, #25
 80070d6:	b2db      	uxtb	r3, r3
 80070d8:	f003 0307 	and.w	r3, r3, #7
 80070dc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	689b      	ldr	r3, [r3, #8]
 80070e4:	0f5b      	lsrs	r3, r3, #29
 80070e6:	b2db      	uxtb	r3, r3
 80070e8:	f003 0307 	and.w	r3, r3, #7
 80070ec:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80070ee:	7bbb      	ldrb	r3, [r7, #14]
 80070f0:	7b3a      	ldrb	r2, [r7, #12]
 80070f2:	4911      	ldr	r1, [pc, #68]	@ (8007138 <UARTEx_SetNbDataToProcess+0x94>)
 80070f4:	5c8a      	ldrb	r2, [r1, r2]
 80070f6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80070fa:	7b3a      	ldrb	r2, [r7, #12]
 80070fc:	490f      	ldr	r1, [pc, #60]	@ (800713c <UARTEx_SetNbDataToProcess+0x98>)
 80070fe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007100:	fb93 f3f2 	sdiv	r3, r3, r2
 8007104:	b29a      	uxth	r2, r3
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800710c:	7bfb      	ldrb	r3, [r7, #15]
 800710e:	7b7a      	ldrb	r2, [r7, #13]
 8007110:	4909      	ldr	r1, [pc, #36]	@ (8007138 <UARTEx_SetNbDataToProcess+0x94>)
 8007112:	5c8a      	ldrb	r2, [r1, r2]
 8007114:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007118:	7b7a      	ldrb	r2, [r7, #13]
 800711a:	4908      	ldr	r1, [pc, #32]	@ (800713c <UARTEx_SetNbDataToProcess+0x98>)
 800711c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800711e:	fb93 f3f2 	sdiv	r3, r3, r2
 8007122:	b29a      	uxth	r2, r3
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800712a:	bf00      	nop
 800712c:	3714      	adds	r7, #20
 800712e:	46bd      	mov	sp, r7
 8007130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007134:	4770      	bx	lr
 8007136:	bf00      	nop
 8007138:	0800e9ac 	.word	0x0800e9ac
 800713c:	0800e9b4 	.word	0x0800e9b4

08007140 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b088      	sub	sp, #32
 8007144:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8007146:	2300      	movs	r3, #0
 8007148:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800714a:	f107 0308 	add.w	r3, r7, #8
 800714e:	2218      	movs	r2, #24
 8007150:	2100      	movs	r1, #0
 8007152:	4618      	mov	r0, r3
 8007154:	f001 fa9e 	bl	8008694 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007158:	233f      	movs	r3, #63	@ 0x3f
 800715a:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 800715c:	2381      	movs	r3, #129	@ 0x81
 800715e:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8007160:	1dfb      	adds	r3, r7, #7
 8007162:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8007164:	2301      	movs	r3, #1
 8007166:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007168:	f107 0308 	add.w	r3, r7, #8
 800716c:	2100      	movs	r1, #0
 800716e:	4618      	mov	r0, r3
 8007170:	f001 fe24 	bl	8008dbc <hci_send_req>
 8007174:	4603      	mov	r3, r0
 8007176:	2b00      	cmp	r3, #0
 8007178:	da01      	bge.n	800717e <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 800717a:	23ff      	movs	r3, #255	@ 0xff
 800717c:	e000      	b.n	8007180 <aci_gap_set_non_discoverable+0x40>
  return status;
 800717e:	79fb      	ldrb	r3, [r7, #7]
}
 8007180:	4618      	mov	r0, r3
 8007182:	3720      	adds	r7, #32
 8007184:	46bd      	mov	sp, r7
 8007186:	bd80      	pop	{r7, pc}

08007188 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 8007188:	b5b0      	push	{r4, r5, r7, lr}
 800718a:	b0ce      	sub	sp, #312	@ 0x138
 800718c:	af00      	add	r7, sp, #0
 800718e:	4605      	mov	r5, r0
 8007190:	460c      	mov	r4, r1
 8007192:	4610      	mov	r0, r2
 8007194:	4619      	mov	r1, r3
 8007196:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800719a:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800719e:	462a      	mov	r2, r5
 80071a0:	701a      	strb	r2, [r3, #0]
 80071a2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80071a6:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80071aa:	4622      	mov	r2, r4
 80071ac:	801a      	strh	r2, [r3, #0]
 80071ae:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80071b2:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 80071b6:	4602      	mov	r2, r0
 80071b8:	801a      	strh	r2, [r3, #0]
 80071ba:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80071be:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 80071c2:	460a      	mov	r2, r1
 80071c4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 80071c6:	f107 0310 	add.w	r3, r7, #16
 80071ca:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 80071ce:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 80071d2:	3308      	adds	r3, #8
 80071d4:	f107 0210 	add.w	r2, r7, #16
 80071d8:	4413      	add	r3, r2
 80071da:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 80071de:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 80071e2:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 80071e6:	4413      	add	r3, r2
 80071e8:	3309      	adds	r3, #9
 80071ea:	f107 0210 	add.w	r2, r7, #16
 80071ee:	4413      	add	r3, r2
 80071f0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80071f4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80071f8:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80071fc:	2200      	movs	r2, #0
 80071fe:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007200:	2300      	movs	r3, #0
 8007202:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Type = Advertising_Type;
 8007206:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800720a:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800720e:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 8007212:	7812      	ldrb	r2, [r2, #0]
 8007214:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007216:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800721a:	3301      	adds	r3, #1
 800721c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 8007220:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007224:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8007228:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 800722c:	8812      	ldrh	r2, [r2, #0]
 800722e:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8007232:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007236:	3302      	adds	r3, #2
 8007238:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 800723c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007240:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8007244:	f5a2 729b 	sub.w	r2, r2, #310	@ 0x136
 8007248:	8812      	ldrh	r2, [r2, #0]
 800724a:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 800724e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007252:	3302      	adds	r3, #2
 8007254:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 8007258:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800725c:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8007260:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8007264:	7812      	ldrb	r2, [r2, #0]
 8007266:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8007268:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800726c:	3301      	adds	r3, #1
 800726e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 8007272:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007276:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 800727a:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800727c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007280:	3301      	adds	r3, #1
 8007282:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 8007286:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800728a:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 800728e:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8007290:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007294:	3301      	adds	r3, #1
 8007296:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 800729a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800729e:	3308      	adds	r3, #8
 80072a0:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 80072a4:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 80072a8:	4618      	mov	r0, r3
 80072aa:	f001 f9e3 	bl	8008674 <Osal_MemCpy>
    index_input += Local_Name_Length;
 80072ae:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 80072b2:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 80072b6:	4413      	add	r3, r2
 80072b8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 80072bc:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80072c0:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 80072c4:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 80072c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80072ca:	3301      	adds	r3, #1
 80072cc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 80072d0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80072d4:	3301      	adds	r3, #1
 80072d6:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 80072da:	f8d7 1158 	ldr.w	r1, [r7, #344]	@ 0x158
 80072de:	4618      	mov	r0, r3
 80072e0:	f001 f9c8 	bl	8008674 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 80072e4:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 80072e8:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 80072ec:	4413      	add	r3, r2
 80072ee:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 80072f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80072f6:	f8b7 215c 	ldrh.w	r2, [r7, #348]	@ 0x15c
 80072fa:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 80072fc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007300:	3302      	adds	r3, #2
 8007302:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 8007306:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800730a:	f8b7 2160 	ldrh.w	r2, [r7, #352]	@ 0x160
 800730e:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8007310:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007314:	3302      	adds	r3, #2
 8007316:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800731a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800731e:	2218      	movs	r2, #24
 8007320:	2100      	movs	r1, #0
 8007322:	4618      	mov	r0, r3
 8007324:	f001 f9b6 	bl	8008694 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007328:	233f      	movs	r3, #63	@ 0x3f
 800732a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x083;
 800732e:	2383      	movs	r3, #131	@ 0x83
 8007330:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8007334:	f107 0310 	add.w	r3, r7, #16
 8007338:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800733c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007340:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8007344:	f107 030f 	add.w	r3, r7, #15
 8007348:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800734c:	2301      	movs	r3, #1
 800734e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007352:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007356:	2100      	movs	r1, #0
 8007358:	4618      	mov	r0, r3
 800735a:	f001 fd2f 	bl	8008dbc <hci_send_req>
 800735e:	4603      	mov	r3, r0
 8007360:	2b00      	cmp	r3, #0
 8007362:	da01      	bge.n	8007368 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 8007364:	23ff      	movs	r3, #255	@ 0xff
 8007366:	e004      	b.n	8007372 <aci_gap_set_discoverable+0x1ea>
  return status;
 8007368:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800736c:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8007370:	781b      	ldrb	r3, [r3, #0]
}
 8007372:	4618      	mov	r0, r3
 8007374:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 8007378:	46bd      	mov	sp, r7
 800737a:	bdb0      	pop	{r4, r5, r7, pc}

0800737c <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b0cc      	sub	sp, #304	@ 0x130
 8007380:	af00      	add	r7, sp, #0
 8007382:	4602      	mov	r2, r0
 8007384:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007388:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800738c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 800738e:	f107 0310 	add.w	r3, r7, #16
 8007392:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8007396:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800739a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800739e:	2200      	movs	r2, #0
 80073a0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80073a2:	2300      	movs	r3, #0
 80073a4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->IO_Capability = IO_Capability;
 80073a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80073ac:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80073b0:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 80073b4:	7812      	ldrb	r2, [r2, #0]
 80073b6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80073b8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80073bc:	3301      	adds	r3, #1
 80073be:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80073c2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80073c6:	2218      	movs	r2, #24
 80073c8:	2100      	movs	r1, #0
 80073ca:	4618      	mov	r0, r3
 80073cc:	f001 f962 	bl	8008694 <Osal_MemSet>
  rq.ogf = 0x3f;
 80073d0:	233f      	movs	r3, #63	@ 0x3f
 80073d2:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x085;
 80073d6:	2385      	movs	r3, #133	@ 0x85
 80073d8:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80073dc:	f107 0310 	add.w	r3, r7, #16
 80073e0:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80073e4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80073e8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80073ec:	f107 030f 	add.w	r3, r7, #15
 80073f0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80073f4:	2301      	movs	r3, #1
 80073f6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80073fa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80073fe:	2100      	movs	r1, #0
 8007400:	4618      	mov	r0, r3
 8007402:	f001 fcdb 	bl	8008dbc <hci_send_req>
 8007406:	4603      	mov	r3, r0
 8007408:	2b00      	cmp	r3, #0
 800740a:	da01      	bge.n	8007410 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 800740c:	23ff      	movs	r3, #255	@ 0xff
 800740e:	e004      	b.n	800741a <aci_gap_set_io_capability+0x9e>
  return status;
 8007410:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007414:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8007418:	781b      	ldrb	r3, [r3, #0]
}
 800741a:	4618      	mov	r0, r3
 800741c:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8007420:	46bd      	mov	sp, r7
 8007422:	bd80      	pop	{r7, pc}

08007424 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 8007424:	b5b0      	push	{r4, r5, r7, lr}
 8007426:	b0cc      	sub	sp, #304	@ 0x130
 8007428:	af00      	add	r7, sp, #0
 800742a:	4605      	mov	r5, r0
 800742c:	460c      	mov	r4, r1
 800742e:	4610      	mov	r0, r2
 8007430:	4619      	mov	r1, r3
 8007432:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007436:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800743a:	462a      	mov	r2, r5
 800743c:	701a      	strb	r2, [r3, #0]
 800743e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007442:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8007446:	4622      	mov	r2, r4
 8007448:	701a      	strb	r2, [r3, #0]
 800744a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800744e:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8007452:	4602      	mov	r2, r0
 8007454:	701a      	strb	r2, [r3, #0]
 8007456:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800745a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800745e:	460a      	mov	r2, r1
 8007460:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 8007462:	f107 0310 	add.w	r3, r7, #16
 8007466:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800746a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800746e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8007472:	2200      	movs	r2, #0
 8007474:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007476:	2300      	movs	r3, #0
 8007478:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 800747c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007480:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8007484:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8007488:	7812      	ldrb	r2, [r2, #0]
 800748a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800748c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007490:	3301      	adds	r3, #1
 8007492:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->MITM_Mode = MITM_Mode;
 8007496:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800749a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800749e:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80074a2:	7812      	ldrb	r2, [r2, #0]
 80074a4:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80074a6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80074aa:	3301      	adds	r3, #1
 80074ac:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->SC_Support = SC_Support;
 80074b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80074b4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80074b8:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 80074bc:	7812      	ldrb	r2, [r2, #0]
 80074be:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80074c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80074c4:	3301      	adds	r3, #1
 80074c6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 80074ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80074ce:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80074d2:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 80074d6:	7812      	ldrb	r2, [r2, #0]
 80074d8:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 80074da:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80074de:	3301      	adds	r3, #1
 80074e0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 80074e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80074e8:	f897 2140 	ldrb.w	r2, [r7, #320]	@ 0x140
 80074ec:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80074ee:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80074f2:	3301      	adds	r3, #1
 80074f4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 80074f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80074fc:	f897 2144 	ldrb.w	r2, [r7, #324]	@ 0x144
 8007500:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8007502:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007506:	3301      	adds	r3, #1
 8007508:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 800750c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007510:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 8007514:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8007516:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800751a:	3301      	adds	r3, #1
 800751c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 8007520:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007524:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8007528:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 800752c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007530:	3304      	adds	r3, #4
 8007532:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 8007536:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800753a:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 800753e:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8007540:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007544:	3301      	adds	r3, #1
 8007546:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800754a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800754e:	2218      	movs	r2, #24
 8007550:	2100      	movs	r1, #0
 8007552:	4618      	mov	r0, r3
 8007554:	f001 f89e 	bl	8008694 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007558:	233f      	movs	r3, #63	@ 0x3f
 800755a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x086;
 800755e:	2386      	movs	r3, #134	@ 0x86
 8007560:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8007564:	f107 0310 	add.w	r3, r7, #16
 8007568:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800756c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007570:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8007574:	f107 030f 	add.w	r3, r7, #15
 8007578:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800757c:	2301      	movs	r3, #1
 800757e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007582:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007586:	2100      	movs	r1, #0
 8007588:	4618      	mov	r0, r3
 800758a:	f001 fc17 	bl	8008dbc <hci_send_req>
 800758e:	4603      	mov	r3, r0
 8007590:	2b00      	cmp	r3, #0
 8007592:	da01      	bge.n	8007598 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 8007594:	23ff      	movs	r3, #255	@ 0xff
 8007596:	e004      	b.n	80075a2 <aci_gap_set_authentication_requirement+0x17e>
  return status;
 8007598:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800759c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80075a0:	781b      	ldrb	r3, [r3, #0]
}
 80075a2:	4618      	mov	r0, r3
 80075a4:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bdb0      	pop	{r4, r5, r7, pc}

080075ac <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b0cc      	sub	sp, #304	@ 0x130
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	4602      	mov	r2, r0
 80075b4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80075b8:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80075bc:	6019      	str	r1, [r3, #0]
 80075be:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80075c2:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80075c6:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 80075c8:	f107 0310 	add.w	r3, r7, #16
 80075cc:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80075d0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80075d4:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80075d8:	2200      	movs	r2, #0
 80075da:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80075dc:	2300      	movs	r3, #0
 80075de:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 80075e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80075e6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80075ea:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80075ee:	8812      	ldrh	r2, [r2, #0]
 80075f0:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80075f2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80075f6:	3302      	adds	r3, #2
 80075f8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Pass_Key = Pass_Key;
 80075fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007600:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8007604:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 8007608:	6812      	ldr	r2, [r2, #0]
 800760a:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 800760e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007612:	3304      	adds	r3, #4
 8007614:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007618:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800761c:	2218      	movs	r2, #24
 800761e:	2100      	movs	r1, #0
 8007620:	4618      	mov	r0, r3
 8007622:	f001 f837 	bl	8008694 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007626:	233f      	movs	r3, #63	@ 0x3f
 8007628:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x088;
 800762c:	2388      	movs	r3, #136	@ 0x88
 800762e:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8007632:	f107 0310 	add.w	r3, r7, #16
 8007636:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800763a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800763e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8007642:	f107 030f 	add.w	r3, r7, #15
 8007646:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800764a:	2301      	movs	r3, #1
 800764c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007650:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007654:	2100      	movs	r1, #0
 8007656:	4618      	mov	r0, r3
 8007658:	f001 fbb0 	bl	8008dbc <hci_send_req>
 800765c:	4603      	mov	r3, r0
 800765e:	2b00      	cmp	r3, #0
 8007660:	da01      	bge.n	8007666 <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 8007662:	23ff      	movs	r3, #255	@ 0xff
 8007664:	e004      	b.n	8007670 <aci_gap_pass_key_resp+0xc4>
  return status;
 8007666:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800766a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800766e:	781b      	ldrb	r3, [r3, #0]
}
 8007670:	4618      	mov	r0, r3
 8007672:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8007676:	46bd      	mov	sp, r7
 8007678:	bd80      	pop	{r7, pc}

0800767a <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 800767a:	b590      	push	{r4, r7, lr}
 800767c:	b0cd      	sub	sp, #308	@ 0x134
 800767e:	af00      	add	r7, sp, #0
 8007680:	4604      	mov	r4, r0
 8007682:	4608      	mov	r0, r1
 8007684:	4611      	mov	r1, r2
 8007686:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800768a:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 800768e:	6013      	str	r3, [r2, #0]
 8007690:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007694:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8007698:	4622      	mov	r2, r4
 800769a:	701a      	strb	r2, [r3, #0]
 800769c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80076a0:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80076a4:	4602      	mov	r2, r0
 80076a6:	701a      	strb	r2, [r3, #0]
 80076a8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80076ac:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 80076b0:	460a      	mov	r2, r1
 80076b2:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 80076b4:	f107 0310 	add.w	r3, r7, #16
 80076b8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80076bc:	f107 0308 	add.w	r3, r7, #8
 80076c0:	2207      	movs	r2, #7
 80076c2:	2100      	movs	r1, #0
 80076c4:	4618      	mov	r0, r3
 80076c6:	f000 ffe5 	bl	8008694 <Osal_MemSet>
  int index_input = 0;
 80076ca:	2300      	movs	r3, #0
 80076cc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Role = Role;
 80076d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80076d4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80076d8:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 80076dc:	7812      	ldrb	r2, [r2, #0]
 80076de:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80076e0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80076e4:	3301      	adds	r3, #1
 80076e6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->privacy_enabled = privacy_enabled;
 80076ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80076ee:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80076f2:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80076f6:	7812      	ldrb	r2, [r2, #0]
 80076f8:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80076fa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80076fe:	3301      	adds	r3, #1
 8007700:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->device_name_char_len = device_name_char_len;
 8007704:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007708:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800770c:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8007710:	7812      	ldrb	r2, [r2, #0]
 8007712:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8007714:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007718:	3301      	adds	r3, #1
 800771a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800771e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007722:	2218      	movs	r2, #24
 8007724:	2100      	movs	r1, #0
 8007726:	4618      	mov	r0, r3
 8007728:	f000 ffb4 	bl	8008694 <Osal_MemSet>
  rq.ogf = 0x3f;
 800772c:	233f      	movs	r3, #63	@ 0x3f
 800772e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08a;
 8007732:	238a      	movs	r3, #138	@ 0x8a
 8007734:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8007738:	f107 0310 	add.w	r3, r7, #16
 800773c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8007740:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007744:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 8007748:	f107 0308 	add.w	r3, r7, #8
 800774c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 8007750:	2307      	movs	r3, #7
 8007752:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007756:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800775a:	2100      	movs	r1, #0
 800775c:	4618      	mov	r0, r3
 800775e:	f001 fb2d 	bl	8008dbc <hci_send_req>
 8007762:	4603      	mov	r3, r0
 8007764:	2b00      	cmp	r3, #0
 8007766:	da01      	bge.n	800776c <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 8007768:	23ff      	movs	r3, #255	@ 0xff
 800776a:	e02e      	b.n	80077ca <aci_gap_init+0x150>
  if ( resp.Status )
 800776c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007770:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8007774:	781b      	ldrb	r3, [r3, #0]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d005      	beq.n	8007786 <aci_gap_init+0x10c>
    return resp.Status;
 800777a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800777e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8007782:	781b      	ldrb	r3, [r3, #0]
 8007784:	e021      	b.n	80077ca <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 8007786:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800778a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800778e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007792:	b29a      	uxth	r2, r3
 8007794:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007798:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 80077a0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80077a4:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80077a8:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80077ac:	b29a      	uxth	r2, r3
 80077ae:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80077b2:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 80077b4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80077b8:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80077bc:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80077c0:	b29a      	uxth	r2, r3
 80077c2:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80077c6:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80077c8:	2300      	movs	r3, #0
}
 80077ca:	4618      	mov	r0, r3
 80077cc:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 80077d0:	46bd      	mov	sp, r7
 80077d2:	bd90      	pop	{r4, r7, pc}

080077d4 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b0cc      	sub	sp, #304	@ 0x130
 80077d8:	af00      	add	r7, sp, #0
 80077da:	4602      	mov	r2, r0
 80077dc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80077e0:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80077e4:	6019      	str	r1, [r3, #0]
 80077e6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80077ea:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80077ee:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 80077f0:	f107 0310 	add.w	r3, r7, #16
 80077f4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80077f8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80077fc:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8007800:	2200      	movs	r2, #0
 8007802:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007804:	2300      	movs	r3, #0
 8007806:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->AdvDataLen = AdvDataLen;
 800780a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800780e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8007812:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8007816:	7812      	ldrb	r2, [r2, #0]
 8007818:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800781a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800781e:	3301      	adds	r3, #1
 8007820:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 8007824:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007828:	1c58      	adds	r0, r3, #1
 800782a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800782e:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8007832:	781a      	ldrb	r2, [r3, #0]
 8007834:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007838:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800783c:	6819      	ldr	r1, [r3, #0]
 800783e:	f000 ff19 	bl	8008674 <Osal_MemCpy>
  index_input += AdvDataLen;
 8007842:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007846:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800784a:	781b      	ldrb	r3, [r3, #0]
 800784c:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8007850:	4413      	add	r3, r2
 8007852:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007856:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800785a:	2218      	movs	r2, #24
 800785c:	2100      	movs	r1, #0
 800785e:	4618      	mov	r0, r3
 8007860:	f000 ff18 	bl	8008694 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007864:	233f      	movs	r3, #63	@ 0x3f
 8007866:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08e;
 800786a:	238e      	movs	r3, #142	@ 0x8e
 800786c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8007870:	f107 0310 	add.w	r3, r7, #16
 8007874:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8007878:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800787c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8007880:	f107 030f 	add.w	r3, r7, #15
 8007884:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8007888:	2301      	movs	r3, #1
 800788a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800788e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007892:	2100      	movs	r1, #0
 8007894:	4618      	mov	r0, r3
 8007896:	f001 fa91 	bl	8008dbc <hci_send_req>
 800789a:	4603      	mov	r3, r0
 800789c:	2b00      	cmp	r3, #0
 800789e:	da01      	bge.n	80078a4 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 80078a0:	23ff      	movs	r3, #255	@ 0xff
 80078a2:	e004      	b.n	80078ae <aci_gap_update_adv_data+0xda>
  return status;
 80078a4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80078a8:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80078ac:	781b      	ldrb	r3, [r3, #0]
}
 80078ae:	4618      	mov	r0, r3
 80078b0:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80078b4:	46bd      	mov	sp, r7
 80078b6:	bd80      	pop	{r7, pc}

080078b8 <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b088      	sub	sp, #32
 80078bc:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80078be:	2300      	movs	r3, #0
 80078c0:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80078c2:	f107 0308 	add.w	r3, r7, #8
 80078c6:	2218      	movs	r2, #24
 80078c8:	2100      	movs	r1, #0
 80078ca:	4618      	mov	r0, r3
 80078cc:	f000 fee2 	bl	8008694 <Osal_MemSet>
  rq.ogf = 0x3f;
 80078d0:	233f      	movs	r3, #63	@ 0x3f
 80078d2:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 80078d4:	2392      	movs	r3, #146	@ 0x92
 80078d6:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80078d8:	1dfb      	adds	r3, r7, #7
 80078da:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80078dc:	2301      	movs	r3, #1
 80078de:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80078e0:	f107 0308 	add.w	r3, r7, #8
 80078e4:	2100      	movs	r1, #0
 80078e6:	4618      	mov	r0, r3
 80078e8:	f001 fa68 	bl	8008dbc <hci_send_req>
 80078ec:	4603      	mov	r3, r0
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	da01      	bge.n	80078f6 <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 80078f2:	23ff      	movs	r3, #255	@ 0xff
 80078f4:	e000      	b.n	80078f8 <aci_gap_configure_filter_accept_list+0x40>
  return status;
 80078f6:	79fb      	ldrb	r3, [r7, #7]
}
 80078f8:	4618      	mov	r0, r3
 80078fa:	3720      	adds	r7, #32
 80078fc:	46bd      	mov	sp, r7
 80078fe:	bd80      	pop	{r7, pc}

08007900 <aci_gap_allow_rebond>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_allow_rebond( uint16_t Connection_Handle )
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b0cc      	sub	sp, #304	@ 0x130
 8007904:	af00      	add	r7, sp, #0
 8007906:	4602      	mov	r2, r0
 8007908:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800790c:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8007910:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_allow_rebond_cp0 *cp0 = (aci_gap_allow_rebond_cp0*)(cmd_buffer);
 8007912:	f107 0310 	add.w	r3, r7, #16
 8007916:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800791a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800791e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8007922:	2200      	movs	r2, #0
 8007924:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007926:	2300      	movs	r3, #0
 8007928:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 800792c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007930:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8007934:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8007938:	8812      	ldrh	r2, [r2, #0]
 800793a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800793c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007940:	3302      	adds	r3, #2
 8007942:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007946:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800794a:	2218      	movs	r2, #24
 800794c:	2100      	movs	r1, #0
 800794e:	4618      	mov	r0, r3
 8007950:	f000 fea0 	bl	8008694 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007954:	233f      	movs	r3, #63	@ 0x3f
 8007956:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x095;
 800795a:	2395      	movs	r3, #149	@ 0x95
 800795c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8007960:	f107 0310 	add.w	r3, r7, #16
 8007964:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8007968:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800796c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8007970:	f107 030f 	add.w	r3, r7, #15
 8007974:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8007978:	2301      	movs	r3, #1
 800797a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800797e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007982:	2100      	movs	r1, #0
 8007984:	4618      	mov	r0, r3
 8007986:	f001 fa19 	bl	8008dbc <hci_send_req>
 800798a:	4603      	mov	r3, r0
 800798c:	2b00      	cmp	r3, #0
 800798e:	da01      	bge.n	8007994 <aci_gap_allow_rebond+0x94>
    return BLE_STATUS_TIMEOUT;
 8007990:	23ff      	movs	r3, #255	@ 0xff
 8007992:	e004      	b.n	800799e <aci_gap_allow_rebond+0x9e>
  return status;
 8007994:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007998:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800799c:	781b      	ldrb	r3, [r3, #0]
}
 800799e:	4618      	mov	r0, r3
 80079a0:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80079a4:	46bd      	mov	sp, r7
 80079a6:	bd80      	pop	{r7, pc}

080079a8 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b0cc      	sub	sp, #304	@ 0x130
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	4602      	mov	r2, r0
 80079b0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80079b4:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80079b8:	801a      	strh	r2, [r3, #0]
 80079ba:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80079be:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 80079c2:	460a      	mov	r2, r1
 80079c4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 80079c6:	f107 0310 	add.w	r3, r7, #16
 80079ca:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80079ce:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80079d2:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80079d6:	2200      	movs	r2, #0
 80079d8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80079da:	2300      	movs	r3, #0
 80079dc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 80079e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80079e4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80079e8:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80079ec:	8812      	ldrh	r2, [r2, #0]
 80079ee:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80079f0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80079f4:	3302      	adds	r3, #2
 80079f6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 80079fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80079fe:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8007a02:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8007a06:	7812      	ldrb	r2, [r2, #0]
 8007a08:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8007a0a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007a0e:	3301      	adds	r3, #1
 8007a10:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007a14:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007a18:	2218      	movs	r2, #24
 8007a1a:	2100      	movs	r1, #0
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	f000 fe39 	bl	8008694 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007a22:	233f      	movs	r3, #63	@ 0x3f
 8007a24:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x0a5;
 8007a28:	23a5      	movs	r3, #165	@ 0xa5
 8007a2a:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8007a2e:	f107 0310 	add.w	r3, r7, #16
 8007a32:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8007a36:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007a3a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8007a3e:	f107 030f 	add.w	r3, r7, #15
 8007a42:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8007a46:	2301      	movs	r3, #1
 8007a48:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007a4c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007a50:	2100      	movs	r1, #0
 8007a52:	4618      	mov	r0, r3
 8007a54:	f001 f9b2 	bl	8008dbc <hci_send_req>
 8007a58:	4603      	mov	r3, r0
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	da01      	bge.n	8007a62 <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 8007a5e:	23ff      	movs	r3, #255	@ 0xff
 8007a60:	e004      	b.n	8007a6c <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 8007a62:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007a66:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8007a6a:	781b      	ldrb	r3, [r3, #0]
}
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bd80      	pop	{r7, pc}

08007a76 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 8007a76:	b580      	push	{r7, lr}
 8007a78:	b088      	sub	sp, #32
 8007a7a:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007a80:	f107 0308 	add.w	r3, r7, #8
 8007a84:	2218      	movs	r2, #24
 8007a86:	2100      	movs	r1, #0
 8007a88:	4618      	mov	r0, r3
 8007a8a:	f000 fe03 	bl	8008694 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007a8e:	233f      	movs	r3, #63	@ 0x3f
 8007a90:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8007a92:	f240 1301 	movw	r3, #257	@ 0x101
 8007a96:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8007a98:	1dfb      	adds	r3, r7, #7
 8007a9a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8007a9c:	2301      	movs	r3, #1
 8007a9e:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007aa0:	f107 0308 	add.w	r3, r7, #8
 8007aa4:	2100      	movs	r1, #0
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	f001 f988 	bl	8008dbc <hci_send_req>
 8007aac:	4603      	mov	r3, r0
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	da01      	bge.n	8007ab6 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8007ab2:	23ff      	movs	r3, #255	@ 0xff
 8007ab4:	e000      	b.n	8007ab8 <aci_gatt_init+0x42>
  return status;
 8007ab6:	79fb      	ldrb	r3, [r7, #7]
}
 8007ab8:	4618      	mov	r0, r3
 8007aba:	3720      	adds	r7, #32
 8007abc:	46bd      	mov	sp, r7
 8007abe:	bd80      	pop	{r7, pc}

08007ac0 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 8007ac0:	b590      	push	{r4, r7, lr}
 8007ac2:	b0cf      	sub	sp, #316	@ 0x13c
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	4604      	mov	r4, r0
 8007ac8:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 8007acc:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 8007ad0:	6001      	str	r1, [r0, #0]
 8007ad2:	4610      	mov	r0, r2
 8007ad4:	4619      	mov	r1, r3
 8007ad6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007ada:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8007ade:	4622      	mov	r2, r4
 8007ae0:	701a      	strb	r2, [r3, #0]
 8007ae2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007ae6:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8007aea:	4602      	mov	r2, r0
 8007aec:	701a      	strb	r2, [r3, #0]
 8007aee:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007af2:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8007af6:	460a      	mov	r2, r1
 8007af8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 8007afa:	f107 0310 	add.w	r3, r7, #16
 8007afe:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8007b02:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007b06:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8007b0a:	781b      	ldrb	r3, [r3, #0]
 8007b0c:	2b01      	cmp	r3, #1
 8007b0e:	d00a      	beq.n	8007b26 <aci_gatt_add_service+0x66>
 8007b10:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007b14:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8007b18:	781b      	ldrb	r3, [r3, #0]
 8007b1a:	2b02      	cmp	r3, #2
 8007b1c:	d101      	bne.n	8007b22 <aci_gatt_add_service+0x62>
 8007b1e:	2311      	movs	r3, #17
 8007b20:	e002      	b.n	8007b28 <aci_gatt_add_service+0x68>
 8007b22:	2301      	movs	r3, #1
 8007b24:	e000      	b.n	8007b28 <aci_gatt_add_service+0x68>
 8007b26:	2303      	movs	r3, #3
 8007b28:	f107 0210 	add.w	r2, r7, #16
 8007b2c:	4413      	add	r3, r2
 8007b2e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8007b32:	f107 030c 	add.w	r3, r7, #12
 8007b36:	2203      	movs	r2, #3
 8007b38:	2100      	movs	r1, #0
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	f000 fdaa 	bl	8008694 <Osal_MemSet>
  int index_input = 0;
 8007b40:	2300      	movs	r3, #0
 8007b42:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 8007b46:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8007b4a:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8007b4e:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 8007b52:	7812      	ldrb	r2, [r2, #0]
 8007b54:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007b56:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007b5a:	3301      	adds	r3, #1
 8007b5c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 8007b60:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007b64:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8007b68:	781b      	ldrb	r3, [r3, #0]
 8007b6a:	2b01      	cmp	r3, #1
 8007b6c:	d002      	beq.n	8007b74 <aci_gatt_add_service+0xb4>
 8007b6e:	2b02      	cmp	r3, #2
 8007b70:	d004      	beq.n	8007b7c <aci_gatt_add_service+0xbc>
 8007b72:	e007      	b.n	8007b84 <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 8007b74:	2302      	movs	r3, #2
 8007b76:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 8007b7a:	e005      	b.n	8007b88 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 8007b7c:	2310      	movs	r3, #16
 8007b7e:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 8007b82:	e001      	b.n	8007b88 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 8007b84:	2397      	movs	r3, #151	@ 0x97
 8007b86:	e06c      	b.n	8007c62 <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 8007b88:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8007b8c:	1c58      	adds	r0, r3, #1
 8007b8e:	f897 2137 	ldrb.w	r2, [r7, #311]	@ 0x137
 8007b92:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007b96:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8007b9a:	6819      	ldr	r1, [r3, #0]
 8007b9c:	f000 fd6a 	bl	8008674 <Osal_MemCpy>
    index_input += size;
 8007ba0:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 8007ba4:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8007ba8:	4413      	add	r3, r2
 8007baa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Type = Service_Type;
 8007bae:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007bb2:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8007bb6:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8007bba:	7812      	ldrb	r2, [r2, #0]
 8007bbc:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8007bbe:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007bc2:	3301      	adds	r3, #1
 8007bc4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 8007bc8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007bcc:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8007bd0:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 8007bd4:	7812      	ldrb	r2, [r2, #0]
 8007bd6:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8007bd8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007bdc:	3301      	adds	r3, #1
 8007bde:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007be2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007be6:	2218      	movs	r2, #24
 8007be8:	2100      	movs	r1, #0
 8007bea:	4618      	mov	r0, r3
 8007bec:	f000 fd52 	bl	8008694 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007bf0:	233f      	movs	r3, #63	@ 0x3f
 8007bf2:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x102;
 8007bf6:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8007bfa:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8007bfe:	f107 0310 	add.w	r3, r7, #16
 8007c02:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8007c06:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007c0a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 8007c0e:	f107 030c 	add.w	r3, r7, #12
 8007c12:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 8007c16:	2303      	movs	r3, #3
 8007c18:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007c1c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007c20:	2100      	movs	r1, #0
 8007c22:	4618      	mov	r0, r3
 8007c24:	f001 f8ca 	bl	8008dbc <hci_send_req>
 8007c28:	4603      	mov	r3, r0
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	da01      	bge.n	8007c32 <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 8007c2e:	23ff      	movs	r3, #255	@ 0xff
 8007c30:	e017      	b.n	8007c62 <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 8007c32:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007c36:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007c3a:	781b      	ldrb	r3, [r3, #0]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d005      	beq.n	8007c4c <aci_gatt_add_service+0x18c>
    return resp.Status;
 8007c40:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007c44:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007c48:	781b      	ldrb	r3, [r3, #0]
 8007c4a:	e00a      	b.n	8007c62 <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 8007c4c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007c50:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007c54:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007c58:	b29a      	uxth	r2, r3
 8007c5a:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8007c5e:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8007c60:	2300      	movs	r3, #0
}
 8007c62:	4618      	mov	r0, r3
 8007c64:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	bd90      	pop	{r4, r7, pc}

08007c6c <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 8007c6c:	b590      	push	{r4, r7, lr}
 8007c6e:	b0d1      	sub	sp, #324	@ 0x144
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	4604      	mov	r4, r0
 8007c74:	4608      	mov	r0, r1
 8007c76:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 8007c7a:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 8007c7e:	600a      	str	r2, [r1, #0]
 8007c80:	4619      	mov	r1, r3
 8007c82:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8007c86:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8007c8a:	4622      	mov	r2, r4
 8007c8c:	801a      	strh	r2, [r3, #0]
 8007c8e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8007c92:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8007c96:	4602      	mov	r2, r0
 8007c98:	701a      	strb	r2, [r3, #0]
 8007c9a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8007c9e:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 8007ca2:	460a      	mov	r2, r1
 8007ca4:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 8007ca6:	f107 0318 	add.w	r3, r7, #24
 8007caa:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8007cae:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8007cb2:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8007cb6:	781b      	ldrb	r3, [r3, #0]
 8007cb8:	2b01      	cmp	r3, #1
 8007cba:	d00a      	beq.n	8007cd2 <aci_gatt_add_char+0x66>
 8007cbc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8007cc0:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8007cc4:	781b      	ldrb	r3, [r3, #0]
 8007cc6:	2b02      	cmp	r3, #2
 8007cc8:	d101      	bne.n	8007cce <aci_gatt_add_char+0x62>
 8007cca:	2313      	movs	r3, #19
 8007ccc:	e002      	b.n	8007cd4 <aci_gatt_add_char+0x68>
 8007cce:	2303      	movs	r3, #3
 8007cd0:	e000      	b.n	8007cd4 <aci_gatt_add_char+0x68>
 8007cd2:	2305      	movs	r3, #5
 8007cd4:	f107 0218 	add.w	r2, r7, #24
 8007cd8:	4413      	add	r3, r2
 8007cda:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8007cde:	f107 0314 	add.w	r3, r7, #20
 8007ce2:	2203      	movs	r2, #3
 8007ce4:	2100      	movs	r1, #0
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	f000 fcd4 	bl	8008694 <Osal_MemSet>
  int index_input = 0;
 8007cec:	2300      	movs	r3, #0
 8007cee:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Service_Handle = Service_Handle;
 8007cf2:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8007cf6:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8007cfa:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8007cfe:	8812      	ldrh	r2, [r2, #0]
 8007d00:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007d02:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8007d06:	3302      	adds	r3, #2
 8007d08:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 8007d0c:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8007d10:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8007d14:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 8007d18:	7812      	ldrb	r2, [r2, #0]
 8007d1a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8007d1c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8007d20:	3301      	adds	r3, #1
 8007d22:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 8007d26:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8007d2a:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8007d2e:	781b      	ldrb	r3, [r3, #0]
 8007d30:	2b01      	cmp	r3, #1
 8007d32:	d002      	beq.n	8007d3a <aci_gatt_add_char+0xce>
 8007d34:	2b02      	cmp	r3, #2
 8007d36:	d004      	beq.n	8007d42 <aci_gatt_add_char+0xd6>
 8007d38:	e007      	b.n	8007d4a <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 8007d3a:	2302      	movs	r3, #2
 8007d3c:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 8007d40:	e005      	b.n	8007d4e <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 8007d42:	2310      	movs	r3, #16
 8007d44:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 8007d48:	e001      	b.n	8007d4e <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 8007d4a:	2397      	movs	r3, #151	@ 0x97
 8007d4c:	e091      	b.n	8007e72 <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 8007d4e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8007d52:	1cd8      	adds	r0, r3, #3
 8007d54:	f897 213f 	ldrb.w	r2, [r7, #319]	@ 0x13f
 8007d58:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8007d5c:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8007d60:	6819      	ldr	r1, [r3, #0]
 8007d62:	f000 fc87 	bl	8008674 <Osal_MemCpy>
    index_input += size;
 8007d66:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 8007d6a:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8007d6e:	4413      	add	r3, r2
 8007d70:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 8007d74:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007d78:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8007d7c:	f5a2 729d 	sub.w	r2, r2, #314	@ 0x13a
 8007d80:	8812      	ldrh	r2, [r2, #0]
 8007d82:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8007d84:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8007d88:	3302      	adds	r3, #2
 8007d8a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Properties = Char_Properties;
 8007d8e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007d92:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 8007d96:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8007d98:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8007d9c:	3301      	adds	r3, #1
 8007d9e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 8007da2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007da6:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8007daa:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8007dac:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8007db0:	3301      	adds	r3, #1
 8007db2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 8007db6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007dba:	f897 2158 	ldrb.w	r2, [r7, #344]	@ 0x158
 8007dbe:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8007dc0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8007dc4:	3301      	adds	r3, #1
 8007dc6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 8007dca:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007dce:	f897 215c 	ldrb.w	r2, [r7, #348]	@ 0x15c
 8007dd2:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 8007dd4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8007dd8:	3301      	adds	r3, #1
 8007dda:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Is_Variable = Is_Variable;
 8007dde:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007de2:	f897 2160 	ldrb.w	r2, [r7, #352]	@ 0x160
 8007de6:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8007de8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8007dec:	3301      	adds	r3, #1
 8007dee:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007df2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8007df6:	2218      	movs	r2, #24
 8007df8:	2100      	movs	r1, #0
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	f000 fc4a 	bl	8008694 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007e00:	233f      	movs	r3, #63	@ 0x3f
 8007e02:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x104;
 8007e06:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8007e0a:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.cparam = cmd_buffer;
 8007e0e:	f107 0318 	add.w	r3, r7, #24
 8007e12:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 8007e16:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8007e1a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &resp;
 8007e1e:	f107 0314 	add.w	r3, r7, #20
 8007e22:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = sizeof(resp);
 8007e26:	2303      	movs	r3, #3
 8007e28:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007e2c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8007e30:	2100      	movs	r1, #0
 8007e32:	4618      	mov	r0, r3
 8007e34:	f000 ffc2 	bl	8008dbc <hci_send_req>
 8007e38:	4603      	mov	r3, r0
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	da01      	bge.n	8007e42 <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 8007e3e:	23ff      	movs	r3, #255	@ 0xff
 8007e40:	e017      	b.n	8007e72 <aci_gatt_add_char+0x206>
  if ( resp.Status )
 8007e42:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8007e46:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007e4a:	781b      	ldrb	r3, [r3, #0]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d005      	beq.n	8007e5c <aci_gatt_add_char+0x1f0>
    return resp.Status;
 8007e50:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8007e54:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007e58:	781b      	ldrb	r3, [r3, #0]
 8007e5a:	e00a      	b.n	8007e72 <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 8007e5c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8007e60:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007e64:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007e68:	b29a      	uxth	r2, r3
 8007e6a:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8007e6e:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8007e70:	2300      	movs	r3, #0
}
 8007e72:	4618      	mov	r0, r3
 8007e74:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	bd90      	pop	{r4, r7, pc}

08007e7c <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8007e7c:	b5b0      	push	{r4, r5, r7, lr}
 8007e7e:	b0cc      	sub	sp, #304	@ 0x130
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	4605      	mov	r5, r0
 8007e84:	460c      	mov	r4, r1
 8007e86:	4610      	mov	r0, r2
 8007e88:	4619      	mov	r1, r3
 8007e8a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007e8e:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8007e92:	462a      	mov	r2, r5
 8007e94:	801a      	strh	r2, [r3, #0]
 8007e96:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007e9a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007e9e:	4622      	mov	r2, r4
 8007ea0:	801a      	strh	r2, [r3, #0]
 8007ea2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007ea6:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 8007eaa:	4602      	mov	r2, r0
 8007eac:	701a      	strb	r2, [r3, #0]
 8007eae:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007eb2:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8007eb6:	460a      	mov	r2, r1
 8007eb8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8007eba:	f107 0310 	add.w	r3, r7, #16
 8007ebe:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8007ec2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007ec6:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8007eca:	2200      	movs	r2, #0
 8007ecc:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007ece:	2300      	movs	r3, #0
 8007ed0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_Handle = Service_Handle;
 8007ed4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007ed8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8007edc:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8007ee0:	8812      	ldrh	r2, [r2, #0]
 8007ee2:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007ee4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007ee8:	3302      	adds	r3, #2
 8007eea:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Handle = Char_Handle;
 8007eee:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007ef2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8007ef6:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 8007efa:	8812      	ldrh	r2, [r2, #0]
 8007efc:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8007efe:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007f02:	3302      	adds	r3, #2
 8007f04:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Val_Offset = Val_Offset;
 8007f08:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007f0c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8007f10:	f2a2 122d 	subw	r2, r2, #301	@ 0x12d
 8007f14:	7812      	ldrb	r2, [r2, #0]
 8007f16:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8007f18:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007f1c:	3301      	adds	r3, #1
 8007f1e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 8007f22:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007f26:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8007f2a:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 8007f2e:	7812      	ldrb	r2, [r2, #0]
 8007f30:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8007f32:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007f36:	3301      	adds	r3, #1
 8007f38:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 8007f3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007f40:	1d98      	adds	r0, r3, #6
 8007f42:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007f46:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8007f4a:	781b      	ldrb	r3, [r3, #0]
 8007f4c:	461a      	mov	r2, r3
 8007f4e:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8007f52:	f000 fb8f 	bl	8008674 <Osal_MemCpy>
  index_input += Char_Value_Length;
 8007f56:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007f5a:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8007f5e:	781b      	ldrb	r3, [r3, #0]
 8007f60:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8007f64:	4413      	add	r3, r2
 8007f66:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007f6a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007f6e:	2218      	movs	r2, #24
 8007f70:	2100      	movs	r1, #0
 8007f72:	4618      	mov	r0, r3
 8007f74:	f000 fb8e 	bl	8008694 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007f78:	233f      	movs	r3, #63	@ 0x3f
 8007f7a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x106;
 8007f7e:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8007f82:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8007f86:	f107 0310 	add.w	r3, r7, #16
 8007f8a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8007f8e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007f92:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8007f96:	f107 030f 	add.w	r3, r7, #15
 8007f9a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8007f9e:	2301      	movs	r3, #1
 8007fa0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007fa4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007fa8:	2100      	movs	r1, #0
 8007faa:	4618      	mov	r0, r3
 8007fac:	f000 ff06 	bl	8008dbc <hci_send_req>
 8007fb0:	4603      	mov	r3, r0
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	da01      	bge.n	8007fba <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 8007fb6:	23ff      	movs	r3, #255	@ 0xff
 8007fb8:	e004      	b.n	8007fc4 <aci_gatt_update_char_value+0x148>
  return status;
 8007fba:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007fbe:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8007fc2:	781b      	ldrb	r3, [r3, #0]
}
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	bdb0      	pop	{r4, r5, r7, pc}

08007fce <aci_gatt_confirm_indication>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_confirm_indication( uint16_t Connection_Handle )
{
 8007fce:	b580      	push	{r7, lr}
 8007fd0:	b0cc      	sub	sp, #304	@ 0x130
 8007fd2:	af00      	add	r7, sp, #0
 8007fd4:	4602      	mov	r2, r0
 8007fd6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007fda:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8007fde:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_confirm_indication_cp0 *cp0 = (aci_gatt_confirm_indication_cp0*)(cmd_buffer);
 8007fe0:	f107 0310 	add.w	r3, r7, #16
 8007fe4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8007fe8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007fec:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8007ffa:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007ffe:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8008002:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8008006:	8812      	ldrh	r2, [r2, #0]
 8008008:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800800a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800800e:	3302      	adds	r3, #2
 8008010:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008014:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008018:	2218      	movs	r2, #24
 800801a:	2100      	movs	r1, #0
 800801c:	4618      	mov	r0, r3
 800801e:	f000 fb39 	bl	8008694 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008022:	233f      	movs	r3, #63	@ 0x3f
 8008024:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x125;
 8008028:	f240 1325 	movw	r3, #293	@ 0x125
 800802c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8008030:	f107 0310 	add.w	r3, r7, #16
 8008034:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8008038:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800803c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8008040:	f107 030f 	add.w	r3, r7, #15
 8008044:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8008048:	2301      	movs	r3, #1
 800804a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800804e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008052:	2100      	movs	r1, #0
 8008054:	4618      	mov	r0, r3
 8008056:	f000 feb1 	bl	8008dbc <hci_send_req>
 800805a:	4603      	mov	r3, r0
 800805c:	2b00      	cmp	r3, #0
 800805e:	da01      	bge.n	8008064 <aci_gatt_confirm_indication+0x96>
    return BLE_STATUS_TIMEOUT;
 8008060:	23ff      	movs	r3, #255	@ 0xff
 8008062:	e004      	b.n	800806e <aci_gatt_confirm_indication+0xa0>
  return status;
 8008064:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008068:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800806c:	781b      	ldrb	r3, [r3, #0]
}
 800806e:	4618      	mov	r0, r3
 8008070:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8008074:	46bd      	mov	sp, r7
 8008076:	bd80      	pop	{r7, pc}

08008078 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b0cc      	sub	sp, #304	@ 0x130
 800807c:	af00      	add	r7, sp, #0
 800807e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008082:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8008086:	601a      	str	r2, [r3, #0]
 8008088:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800808c:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8008090:	4602      	mov	r2, r0
 8008092:	701a      	strb	r2, [r3, #0]
 8008094:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008098:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800809c:	460a      	mov	r2, r1
 800809e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 80080a0:	f107 0310 	add.w	r3, r7, #16
 80080a4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80080a8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80080ac:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80080b0:	2200      	movs	r2, #0
 80080b2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80080b4:	2300      	movs	r3, #0
 80080b6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Offset = Offset;
 80080ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80080be:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80080c2:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 80080c6:	7812      	ldrb	r2, [r2, #0]
 80080c8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80080ca:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80080ce:	3301      	adds	r3, #1
 80080d0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Length = Length;
 80080d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80080d8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80080dc:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80080e0:	7812      	ldrb	r2, [r2, #0]
 80080e2:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80080e4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80080e8:	3301      	adds	r3, #1
 80080ea:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 80080ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80080f2:	1c98      	adds	r0, r3, #2
 80080f4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80080f8:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80080fc:	781a      	ldrb	r2, [r3, #0]
 80080fe:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008102:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8008106:	6819      	ldr	r1, [r3, #0]
 8008108:	f000 fab4 	bl	8008674 <Osal_MemCpy>
  index_input += Length;
 800810c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008110:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8008114:	781b      	ldrb	r3, [r3, #0]
 8008116:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800811a:	4413      	add	r3, r2
 800811c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008120:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008124:	2218      	movs	r2, #24
 8008126:	2100      	movs	r1, #0
 8008128:	4618      	mov	r0, r3
 800812a:	f000 fab3 	bl	8008694 <Osal_MemSet>
  rq.ogf = 0x3f;
 800812e:	233f      	movs	r3, #63	@ 0x3f
 8008130:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00c;
 8008134:	230c      	movs	r3, #12
 8008136:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800813a:	f107 0310 	add.w	r3, r7, #16
 800813e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8008142:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008146:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800814a:	f107 030f 	add.w	r3, r7, #15
 800814e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8008152:	2301      	movs	r3, #1
 8008154:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008158:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800815c:	2100      	movs	r1, #0
 800815e:	4618      	mov	r0, r3
 8008160:	f000 fe2c 	bl	8008dbc <hci_send_req>
 8008164:	4603      	mov	r3, r0
 8008166:	2b00      	cmp	r3, #0
 8008168:	da01      	bge.n	800816e <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 800816a:	23ff      	movs	r3, #255	@ 0xff
 800816c:	e004      	b.n	8008178 <aci_hal_write_config_data+0x100>
  return status;
 800816e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008172:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8008176:	781b      	ldrb	r3, [r3, #0]
}
 8008178:	4618      	mov	r0, r3
 800817a:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800817e:	46bd      	mov	sp, r7
 8008180:	bd80      	pop	{r7, pc}

08008182 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 8008182:	b580      	push	{r7, lr}
 8008184:	b0cc      	sub	sp, #304	@ 0x130
 8008186:	af00      	add	r7, sp, #0
 8008188:	4602      	mov	r2, r0
 800818a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800818e:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8008192:	701a      	strb	r2, [r3, #0]
 8008194:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008198:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800819c:	460a      	mov	r2, r1
 800819e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 80081a0:	f107 0310 	add.w	r3, r7, #16
 80081a4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80081a8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80081ac:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80081b0:	2200      	movs	r2, #0
 80081b2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80081b4:	2300      	movs	r3, #0
 80081b6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->En_High_Power = En_High_Power;
 80081ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80081be:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80081c2:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 80081c6:	7812      	ldrb	r2, [r2, #0]
 80081c8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80081ca:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80081ce:	3301      	adds	r3, #1
 80081d0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->PA_Level = PA_Level;
 80081d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80081d8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80081dc:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80081e0:	7812      	ldrb	r2, [r2, #0]
 80081e2:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80081e4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80081e8:	3301      	adds	r3, #1
 80081ea:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80081ee:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80081f2:	2218      	movs	r2, #24
 80081f4:	2100      	movs	r1, #0
 80081f6:	4618      	mov	r0, r3
 80081f8:	f000 fa4c 	bl	8008694 <Osal_MemSet>
  rq.ogf = 0x3f;
 80081fc:	233f      	movs	r3, #63	@ 0x3f
 80081fe:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00f;
 8008202:	230f      	movs	r3, #15
 8008204:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8008208:	f107 0310 	add.w	r3, r7, #16
 800820c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8008210:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008214:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8008218:	f107 030f 	add.w	r3, r7, #15
 800821c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8008220:	2301      	movs	r3, #1
 8008222:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008226:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800822a:	2100      	movs	r1, #0
 800822c:	4618      	mov	r0, r3
 800822e:	f000 fdc5 	bl	8008dbc <hci_send_req>
 8008232:	4603      	mov	r3, r0
 8008234:	2b00      	cmp	r3, #0
 8008236:	da01      	bge.n	800823c <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 8008238:	23ff      	movs	r3, #255	@ 0xff
 800823a:	e004      	b.n	8008246 <aci_hal_set_tx_power_level+0xc4>
  return status;
 800823c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008240:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8008244:	781b      	ldrb	r3, [r3, #0]
}
 8008246:	4618      	mov	r0, r3
 8008248:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800824c:	46bd      	mov	sp, r7
 800824e:	bd80      	pop	{r7, pc}

08008250 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b0cc      	sub	sp, #304	@ 0x130
 8008254:	af00      	add	r7, sp, #0
 8008256:	4602      	mov	r2, r0
 8008258:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800825c:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8008260:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 8008262:	f107 0310 	add.w	r3, r7, #16
 8008266:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800826a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800826e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8008272:	2200      	movs	r2, #0
 8008274:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008276:	2300      	movs	r3, #0
 8008278:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 800827c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008280:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8008284:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8008288:	8812      	ldrh	r2, [r2, #0]
 800828a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800828c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008290:	3302      	adds	r3, #2
 8008292:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008296:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800829a:	2218      	movs	r2, #24
 800829c:	2100      	movs	r1, #0
 800829e:	4618      	mov	r0, r3
 80082a0:	f000 f9f8 	bl	8008694 <Osal_MemSet>
  rq.ogf = 0x3f;
 80082a4:	233f      	movs	r3, #63	@ 0x3f
 80082a6:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x018;
 80082aa:	2318      	movs	r3, #24
 80082ac:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80082b0:	f107 0310 	add.w	r3, r7, #16
 80082b4:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80082b8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80082bc:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80082c0:	f107 030f 	add.w	r3, r7, #15
 80082c4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80082c8:	2301      	movs	r3, #1
 80082ca:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80082ce:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80082d2:	2100      	movs	r1, #0
 80082d4:	4618      	mov	r0, r3
 80082d6:	f000 fd71 	bl	8008dbc <hci_send_req>
 80082da:	4603      	mov	r3, r0
 80082dc:	2b00      	cmp	r3, #0
 80082de:	da01      	bge.n	80082e4 <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 80082e0:	23ff      	movs	r3, #255	@ 0xff
 80082e2:	e004      	b.n	80082ee <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 80082e4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80082e8:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80082ec:	781b      	ldrb	r3, [r3, #0]
}
 80082ee:	4618      	mov	r0, r3
 80082f0:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80082f4:	46bd      	mov	sp, r7
 80082f6:	bd80      	pop	{r7, pc}

080082f8 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b088      	sub	sp, #32
 80082fc:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80082fe:	2300      	movs	r3, #0
 8008300:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008302:	f107 0308 	add.w	r3, r7, #8
 8008306:	2218      	movs	r2, #24
 8008308:	2100      	movs	r1, #0
 800830a:	4618      	mov	r0, r3
 800830c:	f000 f9c2 	bl	8008694 <Osal_MemSet>
  rq.ogf = 0x03;
 8008310:	2303      	movs	r3, #3
 8008312:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8008314:	2303      	movs	r3, #3
 8008316:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8008318:	1dfb      	adds	r3, r7, #7
 800831a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800831c:	2301      	movs	r3, #1
 800831e:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008320:	f107 0308 	add.w	r3, r7, #8
 8008324:	2100      	movs	r1, #0
 8008326:	4618      	mov	r0, r3
 8008328:	f000 fd48 	bl	8008dbc <hci_send_req>
 800832c:	4603      	mov	r3, r0
 800832e:	2b00      	cmp	r3, #0
 8008330:	da01      	bge.n	8008336 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8008332:	23ff      	movs	r3, #255	@ 0xff
 8008334:	e000      	b.n	8008338 <hci_reset+0x40>
  return status;
 8008336:	79fb      	ldrb	r3, [r7, #7]
}
 8008338:	4618      	mov	r0, r3
 800833a:	3720      	adds	r7, #32
 800833c:	46bd      	mov	sp, r7
 800833e:	bd80      	pop	{r7, pc}

08008340 <hci_le_read_phy>:
}

tBleStatus hci_le_read_phy( uint16_t Connection_Handle,
                            uint8_t* TX_PHY,
                            uint8_t* RX_PHY )
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b0ce      	sub	sp, #312	@ 0x138
 8008344:	af00      	add	r7, sp, #0
 8008346:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800834a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800834e:	6019      	str	r1, [r3, #0]
 8008350:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008354:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8008358:	601a      	str	r2, [r3, #0]
 800835a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800835e:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8008362:	4602      	mov	r2, r0
 8008364:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_read_phy_cp0 *cp0 = (hci_le_read_phy_cp0*)(cmd_buffer);
 8008366:	f107 0318 	add.w	r3, r7, #24
 800836a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  hci_le_read_phy_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800836e:	f107 0310 	add.w	r3, r7, #16
 8008372:	2205      	movs	r2, #5
 8008374:	2100      	movs	r1, #0
 8008376:	4618      	mov	r0, r3
 8008378:	f000 f98c 	bl	8008694 <Osal_MemSet>
  int index_input = 0;
 800837c:	2300      	movs	r3, #0
 800837e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Connection_Handle = Connection_Handle;
 8008382:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008386:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800838a:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800838e:	8812      	ldrh	r2, [r2, #0]
 8008390:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008392:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8008396:	3302      	adds	r3, #2
 8008398:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800839c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80083a0:	2218      	movs	r2, #24
 80083a2:	2100      	movs	r1, #0
 80083a4:	4618      	mov	r0, r3
 80083a6:	f000 f975 	bl	8008694 <Osal_MemSet>
  rq.ogf = 0x08;
 80083aa:	2308      	movs	r3, #8
 80083ac:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x030;
 80083b0:	2330      	movs	r3, #48	@ 0x30
 80083b2:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.cparam = cmd_buffer;
 80083b6:	f107 0318 	add.w	r3, r7, #24
 80083ba:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 80083be:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80083c2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &resp;
 80083c6:	f107 0310 	add.w	r3, r7, #16
 80083ca:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = sizeof(resp);
 80083ce:	2305      	movs	r3, #5
 80083d0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 80083d4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80083d8:	2100      	movs	r1, #0
 80083da:	4618      	mov	r0, r3
 80083dc:	f000 fcee 	bl	8008dbc <hci_send_req>
 80083e0:	4603      	mov	r3, r0
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	da01      	bge.n	80083ea <hci_le_read_phy+0xaa>
    return BLE_STATUS_TIMEOUT;
 80083e6:	23ff      	movs	r3, #255	@ 0xff
 80083e8:	e023      	b.n	8008432 <hci_le_read_phy+0xf2>
  if ( resp.Status )
 80083ea:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80083ee:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80083f2:	781b      	ldrb	r3, [r3, #0]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d005      	beq.n	8008404 <hci_le_read_phy+0xc4>
    return resp.Status;
 80083f8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80083fc:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8008400:	781b      	ldrb	r3, [r3, #0]
 8008402:	e016      	b.n	8008432 <hci_le_read_phy+0xf2>
  *TX_PHY = resp.TX_PHY;
 8008404:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008408:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800840c:	78da      	ldrb	r2, [r3, #3]
 800840e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008412:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	701a      	strb	r2, [r3, #0]
  *RX_PHY = resp.RX_PHY;
 800841a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800841e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8008422:	791a      	ldrb	r2, [r3, #4]
 8008424:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008428:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	701a      	strb	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8008430:	2300      	movs	r3, #0
}
 8008432:	4618      	mov	r0, r3
 8008434:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 8008438:	46bd      	mov	sp, r7
 800843a:	bd80      	pop	{r7, pc}

0800843c <hci_le_set_default_phy>:

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 800843c:	b590      	push	{r4, r7, lr}
 800843e:	b0cd      	sub	sp, #308	@ 0x134
 8008440:	af00      	add	r7, sp, #0
 8008442:	4604      	mov	r4, r0
 8008444:	4608      	mov	r0, r1
 8008446:	4611      	mov	r1, r2
 8008448:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800844c:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8008450:	4622      	mov	r2, r4
 8008452:	701a      	strb	r2, [r3, #0]
 8008454:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008458:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800845c:	4602      	mov	r2, r0
 800845e:	701a      	strb	r2, [r3, #0]
 8008460:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008464:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8008468:	460a      	mov	r2, r1
 800846a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 800846c:	f107 0310 	add.w	r3, r7, #16
 8008470:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8008474:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008478:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800847c:	2200      	movs	r2, #0
 800847e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008480:	2300      	movs	r3, #0
 8008482:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 8008486:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800848a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800848e:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8008492:	7812      	ldrb	r2, [r2, #0]
 8008494:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008496:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800849a:	3301      	adds	r3, #1
 800849c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->TX_PHYS = TX_PHYS;
 80084a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80084a4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80084a8:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80084ac:	7812      	ldrb	r2, [r2, #0]
 80084ae:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80084b0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80084b4:	3301      	adds	r3, #1
 80084b6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->RX_PHYS = RX_PHYS;
 80084ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80084be:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80084c2:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 80084c6:	7812      	ldrb	r2, [r2, #0]
 80084c8:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80084ca:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80084ce:	3301      	adds	r3, #1
 80084d0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80084d4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80084d8:	2218      	movs	r2, #24
 80084da:	2100      	movs	r1, #0
 80084dc:	4618      	mov	r0, r3
 80084de:	f000 f8d9 	bl	8008694 <Osal_MemSet>
  rq.ogf = 0x08;
 80084e2:	2308      	movs	r3, #8
 80084e4:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x031;
 80084e8:	2331      	movs	r3, #49	@ 0x31
 80084ea:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80084ee:	f107 0310 	add.w	r3, r7, #16
 80084f2:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80084f6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80084fa:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80084fe:	f107 030f 	add.w	r3, r7, #15
 8008502:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8008506:	2301      	movs	r3, #1
 8008508:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800850c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008510:	2100      	movs	r1, #0
 8008512:	4618      	mov	r0, r3
 8008514:	f000 fc52 	bl	8008dbc <hci_send_req>
 8008518:	4603      	mov	r3, r0
 800851a:	2b00      	cmp	r3, #0
 800851c:	da01      	bge.n	8008522 <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 800851e:	23ff      	movs	r3, #255	@ 0xff
 8008520:	e004      	b.n	800852c <hci_le_set_default_phy+0xf0>
  return status;
 8008522:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008526:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800852a:	781b      	ldrb	r3, [r3, #0]
}
 800852c:	4618      	mov	r0, r3
 800852e:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 8008532:	46bd      	mov	sp, r7
 8008534:	bd90      	pop	{r4, r7, pc}

08008536 <aci_l2cap_connection_parameter_update_req>:
tBleStatus aci_l2cap_connection_parameter_update_req( uint16_t Connection_Handle,
                                                      uint16_t Conn_Interval_Min,
                                                      uint16_t Conn_Interval_Max,
                                                      uint16_t Latency,
                                                      uint16_t Timeout_Multiplier )
{
 8008536:	b5b0      	push	{r4, r5, r7, lr}
 8008538:	b0cc      	sub	sp, #304	@ 0x130
 800853a:	af00      	add	r7, sp, #0
 800853c:	4605      	mov	r5, r0
 800853e:	460c      	mov	r4, r1
 8008540:	4610      	mov	r0, r2
 8008542:	4619      	mov	r1, r3
 8008544:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008548:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800854c:	462a      	mov	r2, r5
 800854e:	801a      	strh	r2, [r3, #0]
 8008550:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008554:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008558:	4622      	mov	r2, r4
 800855a:	801a      	strh	r2, [r3, #0]
 800855c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008560:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8008564:	4602      	mov	r2, r0
 8008566:	801a      	strh	r2, [r3, #0]
 8008568:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800856c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8008570:	460a      	mov	r2, r1
 8008572:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_l2cap_connection_parameter_update_req_cp0 *cp0 = (aci_l2cap_connection_parameter_update_req_cp0*)(cmd_buffer);
 8008574:	f107 0310 	add.w	r3, r7, #16
 8008578:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800857c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008580:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8008584:	2200      	movs	r2, #0
 8008586:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008588:	2300      	movs	r3, #0
 800858a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 800858e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008592:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8008596:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800859a:	8812      	ldrh	r2, [r2, #0]
 800859c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800859e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80085a2:	3302      	adds	r3, #2
 80085a4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Conn_Interval_Min = Conn_Interval_Min;
 80085a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80085ac:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80085b0:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 80085b4:	8812      	ldrh	r2, [r2, #0]
 80085b6:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 80085b8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80085bc:	3302      	adds	r3, #2
 80085be:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Conn_Interval_Max = Conn_Interval_Max;
 80085c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80085c6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80085ca:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 80085ce:	8812      	ldrh	r2, [r2, #0]
 80085d0:	809a      	strh	r2, [r3, #4]
  index_input += 2;
 80085d2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80085d6:	3302      	adds	r3, #2
 80085d8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Latency = Latency;
 80085dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80085e0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80085e4:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 80085e8:	8812      	ldrh	r2, [r2, #0]
 80085ea:	80da      	strh	r2, [r3, #6]
  index_input += 2;
 80085ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80085f0:	3302      	adds	r3, #2
 80085f2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Timeout_Multiplier = Timeout_Multiplier;
 80085f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80085fa:	f8b7 2140 	ldrh.w	r2, [r7, #320]	@ 0x140
 80085fe:	811a      	strh	r2, [r3, #8]
  index_input += 2;
 8008600:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008604:	3302      	adds	r3, #2
 8008606:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800860a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800860e:	2218      	movs	r2, #24
 8008610:	2100      	movs	r1, #0
 8008612:	4618      	mov	r0, r3
 8008614:	f000 f83e 	bl	8008694 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008618:	233f      	movs	r3, #63	@ 0x3f
 800861a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x181;
 800861e:	f240 1381 	movw	r3, #385	@ 0x181
 8008622:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.event = 0x0F;
 8008626:	230f      	movs	r3, #15
 8008628:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  rq.cparam = cmd_buffer;
 800862c:	f107 0310 	add.w	r3, r7, #16
 8008630:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8008634:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008638:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800863c:	f107 030f 	add.w	r3, r7, #15
 8008640:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8008644:	2301      	movs	r3, #1
 8008646:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800864a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800864e:	2100      	movs	r1, #0
 8008650:	4618      	mov	r0, r3
 8008652:	f000 fbb3 	bl	8008dbc <hci_send_req>
 8008656:	4603      	mov	r3, r0
 8008658:	2b00      	cmp	r3, #0
 800865a:	da01      	bge.n	8008660 <aci_l2cap_connection_parameter_update_req+0x12a>
    return BLE_STATUS_TIMEOUT;
 800865c:	23ff      	movs	r3, #255	@ 0xff
 800865e:	e004      	b.n	800866a <aci_l2cap_connection_parameter_update_req+0x134>
  return status;
 8008660:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008664:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8008668:	781b      	ldrb	r3, [r3, #0]
}
 800866a:	4618      	mov	r0, r3
 800866c:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8008670:	46bd      	mov	sp, r7
 8008672:	bdb0      	pop	{r4, r5, r7, pc}

08008674 <Osal_MemCpy>:
 * Osal_MemCpy
 *
 */

void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b084      	sub	sp, #16
 8008678:	af00      	add	r7, sp, #0
 800867a:	60f8      	str	r0, [r7, #12]
 800867c:	60b9      	str	r1, [r7, #8]
 800867e:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size );
 8008680:	687a      	ldr	r2, [r7, #4]
 8008682:	68b9      	ldr	r1, [r7, #8]
 8008684:	68f8      	ldr	r0, [r7, #12]
 8008686:	f003 feec 	bl	800c462 <memcpy>
 800868a:	4603      	mov	r3, r0
}
 800868c:	4618      	mov	r0, r3
 800868e:	3710      	adds	r7, #16
 8008690:	46bd      	mov	sp, r7
 8008692:	bd80      	pop	{r7, pc}

08008694 <Osal_MemSet>:
 * Osal_MemSet
 *
 */

void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 8008694:	b580      	push	{r7, lr}
 8008696:	b084      	sub	sp, #16
 8008698:	af00      	add	r7, sp, #0
 800869a:	60f8      	str	r0, [r7, #12]
 800869c:	60b9      	str	r1, [r7, #8]
 800869e:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 80086a0:	687a      	ldr	r2, [r7, #4]
 80086a2:	68b9      	ldr	r1, [r7, #8]
 80086a4:	68f8      	ldr	r0, [r7, #12]
 80086a6:	f003 fe67 	bl	800c378 <memset>
 80086aa:	4603      	mov	r3, r0
}
 80086ac:	4618      	mov	r0, r3
 80086ae:	3710      	adds	r7, #16
 80086b0:	46bd      	mov	sp, r7
 80086b2:	bd80      	pop	{r7, pc}

080086b4 <PeerToPeer_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t PeerToPeer_Event_Handler(void *Event)
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b08a      	sub	sp, #40	@ 0x28
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_blecore_aci *blecore_evt;
  aci_gatt_attribute_modified_event_rp0    * attribute_modified;
  P2PS_STM_App_Notification_evt_t Notification;

  return_value = SVCCTL_EvtNotAck;
 80086bc:	2300      	movs	r3, #0
 80086be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	3301      	adds	r3, #1
 80086c6:	623b      	str	r3, [r7, #32]

  switch(event_pckt->evt)
 80086c8:	6a3b      	ldr	r3, [r7, #32]
 80086ca:	781b      	ldrb	r3, [r3, #0]
 80086cc:	2bff      	cmp	r3, #255	@ 0xff
 80086ce:	d14f      	bne.n	8008770 <PeerToPeer_Event_Handler+0xbc>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 80086d0:	6a3b      	ldr	r3, [r7, #32]
 80086d2:	3302      	adds	r3, #2
 80086d4:	61fb      	str	r3, [r7, #28]
      switch(blecore_evt->ecode)
 80086d6:	69fb      	ldr	r3, [r7, #28]
 80086d8:	881b      	ldrh	r3, [r3, #0]
 80086da:	b29b      	uxth	r3, r3
 80086dc:	461a      	mov	r2, r3
 80086de:	f640 4301 	movw	r3, #3073	@ 0xc01
 80086e2:	429a      	cmp	r2, r3
 80086e4:	d140      	bne.n	8008768 <PeerToPeer_Event_Handler+0xb4>
      {
        case ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE:
       {
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 80086e6:	69fb      	ldr	r3, [r7, #28]
 80086e8:	3302      	adds	r3, #2
 80086ea:	61bb      	str	r3, [r7, #24]
            if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PNotifyServerToClientCharHdle + 2))
 80086ec:	69bb      	ldr	r3, [r7, #24]
 80086ee:	885b      	ldrh	r3, [r3, #2]
 80086f0:	b29b      	uxth	r3, r3
 80086f2:	461a      	mov	r2, r3
 80086f4:	4b22      	ldr	r3, [pc, #136]	@ (8008780 <PeerToPeer_Event_Handler+0xcc>)
 80086f6:	889b      	ldrh	r3, [r3, #4]
 80086f8:	3302      	adds	r3, #2
 80086fa:	429a      	cmp	r2, r3
 80086fc:	d118      	bne.n	8008730 <PeerToPeer_Event_Handler+0x7c>
            {
              /**
               * Descriptor handle
               */
              return_value = SVCCTL_EvtAckFlowEnable;
 80086fe:	2301      	movs	r3, #1
 8008700:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
              /**
               * Notify to application
               */
              if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 8008704:	69bb      	ldr	r3, [r7, #24]
 8008706:	7a1b      	ldrb	r3, [r3, #8]
 8008708:	f003 0301 	and.w	r3, r3, #1
 800870c:	2b00      	cmp	r3, #0
 800870e:	d007      	beq.n	8008720 <PeerToPeer_Event_Handler+0x6c>
              {
                Notification.P2P_Evt_Opcode = P2PS_STM__NOTIFY_ENABLED_EVT;
 8008710:	2300      	movs	r3, #0
 8008712:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 8008714:	f107 0308 	add.w	r3, r7, #8
 8008718:	4618      	mov	r0, r3
 800871a:	f002 fe09 	bl	800b330 <P2PS_STM_App_Notification>
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
              P2PS_STM_App_Notification(&Notification);
            }
#endif
        }
        break;
 800871e:	e025      	b.n	800876c <PeerToPeer_Event_Handler+0xb8>
                Notification.P2P_Evt_Opcode = P2PS_STM_NOTIFY_DISABLED_EVT;
 8008720:	2301      	movs	r3, #1
 8008722:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 8008724:	f107 0308 	add.w	r3, r7, #8
 8008728:	4618      	mov	r0, r3
 800872a:	f002 fe01 	bl	800b330 <P2PS_STM_App_Notification>
        break;
 800872e:	e01d      	b.n	800876c <PeerToPeer_Event_Handler+0xb8>
            else if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PWriteClientToServerCharHdle + 1))
 8008730:	69bb      	ldr	r3, [r7, #24]
 8008732:	885b      	ldrh	r3, [r3, #2]
 8008734:	b29b      	uxth	r3, r3
 8008736:	461a      	mov	r2, r3
 8008738:	4b11      	ldr	r3, [pc, #68]	@ (8008780 <PeerToPeer_Event_Handler+0xcc>)
 800873a:	885b      	ldrh	r3, [r3, #2]
 800873c:	3301      	adds	r3, #1
 800873e:	429a      	cmp	r2, r3
 8008740:	d114      	bne.n	800876c <PeerToPeer_Event_Handler+0xb8>
              BLE_DBG_P2P_STM_MSG("-- GATT : LED CONFIGURATION RECEIVED\n");
 8008742:	4810      	ldr	r0, [pc, #64]	@ (8008784 <PeerToPeer_Event_Handler+0xd0>)
 8008744:	f003 fd18 	bl	800c178 <puts>
              Notification.P2P_Evt_Opcode = P2PS_STM_WRITE_EVT;
 8008748:	2303      	movs	r3, #3
 800874a:	723b      	strb	r3, [r7, #8]
              Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 800874c:	69bb      	ldr	r3, [r7, #24]
 800874e:	88db      	ldrh	r3, [r3, #6]
 8008750:	b29b      	uxth	r3, r3
 8008752:	b2db      	uxtb	r3, r3
 8008754:	743b      	strb	r3, [r7, #16]
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 8008756:	69bb      	ldr	r3, [r7, #24]
 8008758:	3308      	adds	r3, #8
 800875a:	60fb      	str	r3, [r7, #12]
              P2PS_STM_App_Notification(&Notification);  
 800875c:	f107 0308 	add.w	r3, r7, #8
 8008760:	4618      	mov	r0, r3
 8008762:	f002 fde5 	bl	800b330 <P2PS_STM_App_Notification>
        break;
 8008766:	e001      	b.n	800876c <PeerToPeer_Event_Handler+0xb8>

        default:
          break;
 8008768:	bf00      	nop
 800876a:	e002      	b.n	8008772 <PeerToPeer_Event_Handler+0xbe>
        break;
 800876c:	bf00      	nop
      }
    }
    break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 800876e:	e000      	b.n	8008772 <PeerToPeer_Event_Handler+0xbe>

    default:
      break;
 8008770:	bf00      	nop
  }

  return(return_value);
 8008772:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}/* end SVCCTL_EvtAckStatus_t */
 8008776:	4618      	mov	r0, r3
 8008778:	3728      	adds	r7, #40	@ 0x28
 800877a:	46bd      	mov	sp, r7
 800877c:	bd80      	pop	{r7, pc}
 800877e:	bf00      	nop
 8008780:	20000090 	.word	0x20000090
 8008784:	0800d69c 	.word	0x0800d69c

08008788 <P2PS_STM_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void P2PS_STM_Init(void)
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b08a      	sub	sp, #40	@ 0x28
 800878c:	af06      	add	r7, sp, #24
  Char_UUID_t  uuid16;

  /**
   *	Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(PeerToPeer_Event_Handler);
 800878e:	484a      	ldr	r0, [pc, #296]	@ (80088b8 <P2PS_STM_Init+0x130>)
 8008790:	f000 f94a 	bl	8008a28 <SVCCTL_RegisterSvcHandler>
     *                                2 for P2P Write characteristic +
     *                                2 for P2P Notify characteristic +
     *                                1 for client char configuration descriptor +
     *                                
     */
    COPY_P2P_SERVICE_UUID(uuid16.Char_UUID_128);
 8008794:	238f      	movs	r3, #143	@ 0x8f
 8008796:	703b      	strb	r3, [r7, #0]
 8008798:	23e5      	movs	r3, #229	@ 0xe5
 800879a:	707b      	strb	r3, [r7, #1]
 800879c:	23b3      	movs	r3, #179	@ 0xb3
 800879e:	70bb      	strb	r3, [r7, #2]
 80087a0:	23d5      	movs	r3, #213	@ 0xd5
 80087a2:	70fb      	strb	r3, [r7, #3]
 80087a4:	232e      	movs	r3, #46	@ 0x2e
 80087a6:	713b      	strb	r3, [r7, #4]
 80087a8:	237f      	movs	r3, #127	@ 0x7f
 80087aa:	717b      	strb	r3, [r7, #5]
 80087ac:	234a      	movs	r3, #74	@ 0x4a
 80087ae:	71bb      	strb	r3, [r7, #6]
 80087b0:	2398      	movs	r3, #152	@ 0x98
 80087b2:	71fb      	strb	r3, [r7, #7]
 80087b4:	232a      	movs	r3, #42	@ 0x2a
 80087b6:	723b      	strb	r3, [r7, #8]
 80087b8:	2348      	movs	r3, #72	@ 0x48
 80087ba:	727b      	strb	r3, [r7, #9]
 80087bc:	237a      	movs	r3, #122	@ 0x7a
 80087be:	72bb      	strb	r3, [r7, #10]
 80087c0:	23cc      	movs	r3, #204	@ 0xcc
 80087c2:	72fb      	strb	r3, [r7, #11]
 80087c4:	2340      	movs	r3, #64	@ 0x40
 80087c6:	733b      	strb	r3, [r7, #12]
 80087c8:	23fe      	movs	r3, #254	@ 0xfe
 80087ca:	737b      	strb	r3, [r7, #13]
 80087cc:	2300      	movs	r3, #0
 80087ce:	73bb      	strb	r3, [r7, #14]
 80087d0:	2300      	movs	r3, #0
 80087d2:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_service(UUID_TYPE_128,
 80087d4:	4639      	mov	r1, r7
 80087d6:	4b39      	ldr	r3, [pc, #228]	@ (80088bc <P2PS_STM_Init+0x134>)
 80087d8:	9300      	str	r3, [sp, #0]
 80087da:	2306      	movs	r3, #6
 80087dc:	2201      	movs	r2, #1
 80087de:	2002      	movs	r0, #2
 80087e0:	f7ff f96e 	bl	8007ac0 <aci_gatt_add_service>
                      &(aPeerToPeerContext.PeerToPeerSvcHdle));

    /**
     *  Add LED Characteristic
     */
    COPY_P2P_WRITE_CHAR_UUID(uuid16.Char_UUID_128);
 80087e4:	2319      	movs	r3, #25
 80087e6:	703b      	strb	r3, [r7, #0]
 80087e8:	23ed      	movs	r3, #237	@ 0xed
 80087ea:	707b      	strb	r3, [r7, #1]
 80087ec:	2382      	movs	r3, #130	@ 0x82
 80087ee:	70bb      	strb	r3, [r7, #2]
 80087f0:	23ae      	movs	r3, #174	@ 0xae
 80087f2:	70fb      	strb	r3, [r7, #3]
 80087f4:	23ed      	movs	r3, #237	@ 0xed
 80087f6:	713b      	strb	r3, [r7, #4]
 80087f8:	2321      	movs	r3, #33	@ 0x21
 80087fa:	717b      	strb	r3, [r7, #5]
 80087fc:	234c      	movs	r3, #76	@ 0x4c
 80087fe:	71bb      	strb	r3, [r7, #6]
 8008800:	239d      	movs	r3, #157	@ 0x9d
 8008802:	71fb      	strb	r3, [r7, #7]
 8008804:	2341      	movs	r3, #65	@ 0x41
 8008806:	723b      	strb	r3, [r7, #8]
 8008808:	2345      	movs	r3, #69	@ 0x45
 800880a:	727b      	strb	r3, [r7, #9]
 800880c:	2322      	movs	r3, #34	@ 0x22
 800880e:	72bb      	strb	r3, [r7, #10]
 8008810:	238e      	movs	r3, #142	@ 0x8e
 8008812:	72fb      	strb	r3, [r7, #11]
 8008814:	2341      	movs	r3, #65	@ 0x41
 8008816:	733b      	strb	r3, [r7, #12]
 8008818:	23fe      	movs	r3, #254	@ 0xfe
 800881a:	737b      	strb	r3, [r7, #13]
 800881c:	2300      	movs	r3, #0
 800881e:	73bb      	strb	r3, [r7, #14]
 8008820:	2300      	movs	r3, #0
 8008822:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 8008824:	4b25      	ldr	r3, [pc, #148]	@ (80088bc <P2PS_STM_Init+0x134>)
 8008826:	8818      	ldrh	r0, [r3, #0]
 8008828:	463a      	mov	r2, r7
 800882a:	4b25      	ldr	r3, [pc, #148]	@ (80088c0 <P2PS_STM_Init+0x138>)
 800882c:	9305      	str	r3, [sp, #20]
 800882e:	2301      	movs	r3, #1
 8008830:	9304      	str	r3, [sp, #16]
 8008832:	230a      	movs	r3, #10
 8008834:	9303      	str	r3, [sp, #12]
 8008836:	2301      	movs	r3, #1
 8008838:	9302      	str	r3, [sp, #8]
 800883a:	2300      	movs	r3, #0
 800883c:	9301      	str	r3, [sp, #4]
 800883e:	2306      	movs	r3, #6
 8008840:	9300      	str	r3, [sp, #0]
 8008842:	2302      	movs	r3, #2
 8008844:	2102      	movs	r1, #2
 8008846:	f7ff fa11 	bl	8007c6c <aci_gatt_add_char>
                      &(aPeerToPeerContext.P2PWriteClientToServerCharHdle));

    /**
     *   Add Button Characteristic
     */
    COPY_P2P_NOTIFY_UUID(uuid16.Char_UUID_128);
 800884a:	2319      	movs	r3, #25
 800884c:	703b      	strb	r3, [r7, #0]
 800884e:	23ed      	movs	r3, #237	@ 0xed
 8008850:	707b      	strb	r3, [r7, #1]
 8008852:	2382      	movs	r3, #130	@ 0x82
 8008854:	70bb      	strb	r3, [r7, #2]
 8008856:	23ae      	movs	r3, #174	@ 0xae
 8008858:	70fb      	strb	r3, [r7, #3]
 800885a:	23ed      	movs	r3, #237	@ 0xed
 800885c:	713b      	strb	r3, [r7, #4]
 800885e:	2321      	movs	r3, #33	@ 0x21
 8008860:	717b      	strb	r3, [r7, #5]
 8008862:	234c      	movs	r3, #76	@ 0x4c
 8008864:	71bb      	strb	r3, [r7, #6]
 8008866:	239d      	movs	r3, #157	@ 0x9d
 8008868:	71fb      	strb	r3, [r7, #7]
 800886a:	2341      	movs	r3, #65	@ 0x41
 800886c:	723b      	strb	r3, [r7, #8]
 800886e:	2345      	movs	r3, #69	@ 0x45
 8008870:	727b      	strb	r3, [r7, #9]
 8008872:	2322      	movs	r3, #34	@ 0x22
 8008874:	72bb      	strb	r3, [r7, #10]
 8008876:	238e      	movs	r3, #142	@ 0x8e
 8008878:	72fb      	strb	r3, [r7, #11]
 800887a:	2342      	movs	r3, #66	@ 0x42
 800887c:	733b      	strb	r3, [r7, #12]
 800887e:	23fe      	movs	r3, #254	@ 0xfe
 8008880:	737b      	strb	r3, [r7, #13]
 8008882:	2300      	movs	r3, #0
 8008884:	73bb      	strb	r3, [r7, #14]
 8008886:	2300      	movs	r3, #0
 8008888:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 800888a:	4b0c      	ldr	r3, [pc, #48]	@ (80088bc <P2PS_STM_Init+0x134>)
 800888c:	8818      	ldrh	r0, [r3, #0]
 800888e:	463a      	mov	r2, r7
 8008890:	4b0c      	ldr	r3, [pc, #48]	@ (80088c4 <P2PS_STM_Init+0x13c>)
 8008892:	9305      	str	r3, [sp, #20]
 8008894:	2301      	movs	r3, #1
 8008896:	9304      	str	r3, [sp, #16]
 8008898:	230a      	movs	r3, #10
 800889a:	9303      	str	r3, [sp, #12]
 800889c:	2301      	movs	r3, #1
 800889e:	9302      	str	r3, [sp, #8]
 80088a0:	2300      	movs	r3, #0
 80088a2:	9301      	str	r3, [sp, #4]
 80088a4:	2310      	movs	r3, #16
 80088a6:	9300      	str	r3, [sp, #0]
 80088a8:	2302      	movs	r3, #2
 80088aa:	2102      	movs	r1, #2
 80088ac:	f7ff f9de 	bl	8007c6c <aci_gatt_add_char>
                      0,
                      &(aPeerToPeerContext.RebootReqCharHdle));
#endif    

    
  return;
 80088b0:	bf00      	nop
}
 80088b2:	3710      	adds	r7, #16
 80088b4:	46bd      	mov	sp, r7
 80088b6:	bd80      	pop	{r7, pc}
 80088b8:	080086b5 	.word	0x080086b5
 80088bc:	20000090 	.word	0x20000090
 80088c0:	20000092 	.word	0x20000092
 80088c4:	20000094 	.word	0x20000094

080088c8 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 80088c8:	b480      	push	{r7}
 80088ca:	af00      	add	r7, sp, #0
  return;
 80088cc:	bf00      	nop
}
 80088ce:	46bd      	mov	sp, r7
 80088d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d4:	4770      	bx	lr

080088d6 <BLS_Init>:

__WEAK void BLS_Init( void )
{
 80088d6:	b480      	push	{r7}
 80088d8:	af00      	add	r7, sp, #0
  return;
 80088da:	bf00      	nop
}
 80088dc:	46bd      	mov	sp, r7
 80088de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e2:	4770      	bx	lr

080088e4 <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 80088e4:	b480      	push	{r7}
 80088e6:	af00      	add	r7, sp, #0
  return;
 80088e8:	bf00      	nop
}
 80088ea:	46bd      	mov	sp, r7
 80088ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f0:	4770      	bx	lr

080088f2 <DIS_Init>:
__WEAK void DIS_Init( void )
{
 80088f2:	b480      	push	{r7}
 80088f4:	af00      	add	r7, sp, #0
  return;
 80088f6:	bf00      	nop
}
 80088f8:	46bd      	mov	sp, r7
 80088fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fe:	4770      	bx	lr

08008900 <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 8008900:	b480      	push	{r7}
 8008902:	af00      	add	r7, sp, #0
  return;
 8008904:	bf00      	nop
}
 8008906:	46bd      	mov	sp, r7
 8008908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890c:	4770      	bx	lr

0800890e <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 800890e:	b480      	push	{r7}
 8008910:	af00      	add	r7, sp, #0
  return;
 8008912:	bf00      	nop
}
 8008914:	46bd      	mov	sp, r7
 8008916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891a:	4770      	bx	lr

0800891c <HRS_Init>:
__WEAK void HRS_Init( void )
{
 800891c:	b480      	push	{r7}
 800891e:	af00      	add	r7, sp, #0
  return;
 8008920:	bf00      	nop
}
 8008922:	46bd      	mov	sp, r7
 8008924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008928:	4770      	bx	lr

0800892a <HTS_Init>:
__WEAK void HTS_Init( void )
{
 800892a:	b480      	push	{r7}
 800892c:	af00      	add	r7, sp, #0
  return;
 800892e:	bf00      	nop
}
 8008930:	46bd      	mov	sp, r7
 8008932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008936:	4770      	bx	lr

08008938 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 8008938:	b480      	push	{r7}
 800893a:	af00      	add	r7, sp, #0
  return;
 800893c:	bf00      	nop
}
 800893e:	46bd      	mov	sp, r7
 8008940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008944:	4770      	bx	lr

08008946 <LLS_Init>:
__WEAK void LLS_Init( void )
{
 8008946:	b480      	push	{r7}
 8008948:	af00      	add	r7, sp, #0
  return;
 800894a:	bf00      	nop
}
 800894c:	46bd      	mov	sp, r7
 800894e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008952:	4770      	bx	lr

08008954 <TPS_Init>:
__WEAK void TPS_Init( void )
{
 8008954:	b480      	push	{r7}
 8008956:	af00      	add	r7, sp, #0
  return;
 8008958:	bf00      	nop
}
 800895a:	46bd      	mov	sp, r7
 800895c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008960:	4770      	bx	lr

08008962 <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 8008962:	b480      	push	{r7}
 8008964:	af00      	add	r7, sp, #0
  return;
 8008966:	bf00      	nop
}
 8008968:	46bd      	mov	sp, r7
 800896a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896e:	4770      	bx	lr

08008970 <ZDD_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
  return;
}
__WEAK void ZDD_STM_Init( void )
{
 8008970:	b480      	push	{r7}
 8008972:	af00      	add	r7, sp, #0
  return;
 8008974:	bf00      	nop
}
 8008976:	46bd      	mov	sp, r7
 8008978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897c:	4770      	bx	lr

0800897e <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 800897e:	b480      	push	{r7}
 8008980:	af00      	add	r7, sp, #0
  return;
 8008982:	bf00      	nop
}
 8008984:	46bd      	mov	sp, r7
 8008986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898a:	4770      	bx	lr

0800898c <MESH_Init>:
__WEAK void MESH_Init( void )
{
 800898c:	b480      	push	{r7}
 800898e:	af00      	add	r7, sp, #0
  return;
 8008990:	bf00      	nop
}
 8008992:	46bd      	mov	sp, r7
 8008994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008998:	4770      	bx	lr

0800899a <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 800899a:	b480      	push	{r7}
 800899c:	af00      	add	r7, sp, #0
  return;
 800899e:	bf00      	nop
}
 80089a0:	46bd      	mov	sp, r7
 80089a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a6:	4770      	bx	lr

080089a8 <SVCCTL_InitCustomSvc>:
__WEAK void SVCCTL_InitCustomSvc( void )
{
 80089a8:	b480      	push	{r7}
 80089aa:	af00      	add	r7, sp, #0
  return;
 80089ac:	bf00      	nop
}
 80089ae:	46bd      	mov	sp, r7
 80089b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b4:	4770      	bx	lr
	...

080089b8 <SVCCTL_Init>:

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 80089bc:	4b04      	ldr	r3, [pc, #16]	@ (80089d0 <SVCCTL_Init+0x18>)
 80089be:	2200      	movs	r2, #0
 80089c0:	711a      	strb	r2, [r3, #4]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 80089c2:	4b04      	ldr	r3, [pc, #16]	@ (80089d4 <SVCCTL_Init+0x1c>)
 80089c4:	2200      	movs	r2, #0
 80089c6:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 80089c8:	f000 f806 	bl	80089d8 <SVCCTL_SvcInit>

  return;
 80089cc:	bf00      	nop
}
 80089ce:	bd80      	pop	{r7, pc}
 80089d0:	20000098 	.word	0x20000098
 80089d4:	200000a0 	.word	0x200000a0

080089d8 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	af00      	add	r7, sp, #0
  BAS_Init();
 80089dc:	f7ff ff74 	bl	80088c8 <BAS_Init>

  BLS_Init();
 80089e0:	f7ff ff79 	bl	80088d6 <BLS_Init>

  CRS_STM_Init();
 80089e4:	f7ff ff7e 	bl	80088e4 <CRS_STM_Init>

  DIS_Init();
 80089e8:	f7ff ff83 	bl	80088f2 <DIS_Init>

  EDS_STM_Init();
 80089ec:	f7ff ff88 	bl	8008900 <EDS_STM_Init>

  HIDS_Init();
 80089f0:	f7ff ff8d 	bl	800890e <HIDS_Init>

  HRS_Init();
 80089f4:	f7ff ff92 	bl	800891c <HRS_Init>

  HTS_Init();
 80089f8:	f7ff ff97 	bl	800892a <HTS_Init>

  IAS_Init();
 80089fc:	f7ff ff9c 	bl	8008938 <IAS_Init>

  LLS_Init();
 8008a00:	f7ff ffa1 	bl	8008946 <LLS_Init>

  TPS_Init();
 8008a04:	f7ff ffa6 	bl	8008954 <TPS_Init>

  MOTENV_STM_Init();
 8008a08:	f7ff ffab 	bl	8008962 <MOTENV_STM_Init>

  P2PS_STM_Init();
 8008a0c:	f7ff febc 	bl	8008788 <P2PS_STM_Init>

  ZDD_STM_Init();
 8008a10:	f7ff ffae 	bl	8008970 <ZDD_STM_Init>

  OTAS_STM_Init();
 8008a14:	f7ff ffb3 	bl	800897e <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 8008a18:	f7ff ffbf 	bl	800899a <BVOPUS_STM_Init>

  MESH_Init();
 8008a1c:	f7ff ffb6 	bl	800898c <MESH_Init>

  SVCCTL_InitCustomSvc();
 8008a20:	f7ff ffc2 	bl	80089a8 <SVCCTL_InitCustomSvc>
  
  return;
 8008a24:	bf00      	nop
}
 8008a26:	bd80      	pop	{r7, pc}

08008a28 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 8008a28:	b480      	push	{r7}
 8008a2a:	b083      	sub	sp, #12
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 8008a30:	4b09      	ldr	r3, [pc, #36]	@ (8008a58 <SVCCTL_RegisterSvcHandler+0x30>)
 8008a32:	791b      	ldrb	r3, [r3, #4]
 8008a34:	4619      	mov	r1, r3
 8008a36:	4a08      	ldr	r2, [pc, #32]	@ (8008a58 <SVCCTL_RegisterSvcHandler+0x30>)
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 8008a3e:	4b06      	ldr	r3, [pc, #24]	@ (8008a58 <SVCCTL_RegisterSvcHandler+0x30>)
 8008a40:	791b      	ldrb	r3, [r3, #4]
 8008a42:	3301      	adds	r3, #1
 8008a44:	b2da      	uxtb	r2, r3
 8008a46:	4b04      	ldr	r3, [pc, #16]	@ (8008a58 <SVCCTL_RegisterSvcHandler+0x30>)
 8008a48:	711a      	strb	r2, [r3, #4]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 8008a4a:	bf00      	nop
}
 8008a4c:	370c      	adds	r7, #12
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a54:	4770      	bx	lr
 8008a56:	bf00      	nop
 8008a58:	20000098 	.word	0x20000098

08008a5c <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b086      	sub	sp, #24
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	3301      	adds	r3, #1
 8008a68:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 8008a6e:	693b      	ldr	r3, [r7, #16]
 8008a70:	781b      	ldrb	r3, [r3, #0]
 8008a72:	2bff      	cmp	r3, #255	@ 0xff
 8008a74:	d125      	bne.n	8008ac2 <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 8008a76:	693b      	ldr	r3, [r7, #16]
 8008a78:	3302      	adds	r3, #2
 8008a7a:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	881b      	ldrh	r3, [r3, #0]
 8008a80:	b29b      	uxth	r3, r3
 8008a82:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8008a86:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008a8a:	d118      	bne.n	8008abe <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	757b      	strb	r3, [r7, #21]
 8008a90:	e00d      	b.n	8008aae <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 8008a92:	7d7b      	ldrb	r3, [r7, #21]
 8008a94:	4a1a      	ldr	r2, [pc, #104]	@ (8008b00 <SVCCTL_UserEvtRx+0xa4>)
 8008a96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a9a:	6878      	ldr	r0, [r7, #4]
 8008a9c:	4798      	blx	r3
 8008a9e:	4603      	mov	r3, r0
 8008aa0:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 8008aa2:	7dfb      	ldrb	r3, [r7, #23]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d108      	bne.n	8008aba <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8008aa8:	7d7b      	ldrb	r3, [r7, #21]
 8008aaa:	3301      	adds	r3, #1
 8008aac:	757b      	strb	r3, [r7, #21]
 8008aae:	4b14      	ldr	r3, [pc, #80]	@ (8008b00 <SVCCTL_UserEvtRx+0xa4>)
 8008ab0:	791b      	ldrb	r3, [r3, #4]
 8008ab2:	7d7a      	ldrb	r2, [r7, #21]
 8008ab4:	429a      	cmp	r2, r3
 8008ab6:	d3ec      	bcc.n	8008a92 <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 8008ab8:	e002      	b.n	8008ac0 <SVCCTL_UserEvtRx+0x64>
              break;
 8008aba:	bf00      	nop
          break;
 8008abc:	e000      	b.n	8008ac0 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 8008abe:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 8008ac0:	e000      	b.n	8008ac4 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 8008ac2:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 8008ac4:	7dfb      	ldrb	r3, [r7, #23]
 8008ac6:	2b02      	cmp	r3, #2
 8008ac8:	d00f      	beq.n	8008aea <SVCCTL_UserEvtRx+0x8e>
 8008aca:	2b02      	cmp	r3, #2
 8008acc:	dc10      	bgt.n	8008af0 <SVCCTL_UserEvtRx+0x94>
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d002      	beq.n	8008ad8 <SVCCTL_UserEvtRx+0x7c>
 8008ad2:	2b01      	cmp	r3, #1
 8008ad4:	d006      	beq.n	8008ae4 <SVCCTL_UserEvtRx+0x88>
 8008ad6:	e00b      	b.n	8008af0 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 8008ad8:	6878      	ldr	r0, [r7, #4]
 8008ada:	f001 fd73 	bl	800a5c4 <SVCCTL_App_Notification>
 8008ade:	4603      	mov	r3, r0
 8008ae0:	75bb      	strb	r3, [r7, #22]
      break;
 8008ae2:	e008      	b.n	8008af6 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 8008ae4:	2301      	movs	r3, #1
 8008ae6:	75bb      	strb	r3, [r7, #22]
      break;
 8008ae8:	e005      	b.n	8008af6 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 8008aea:	2300      	movs	r3, #0
 8008aec:	75bb      	strb	r3, [r7, #22]
      break;
 8008aee:	e002      	b.n	8008af6 <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 8008af0:	2301      	movs	r3, #1
 8008af2:	75bb      	strb	r3, [r7, #22]
      break;
 8008af4:	bf00      	nop
  }

  return (return_status);
 8008af6:	7dbb      	ldrb	r3, [r7, #22]
}
 8008af8:	4618      	mov	r0, r3
 8008afa:	3718      	adds	r7, #24
 8008afc:	46bd      	mov	sp, r7
 8008afe:	bd80      	pop	{r7, pc}
 8008b00:	20000098 	.word	0x20000098

08008b04 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b088      	sub	sp, #32
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8008b0c:	f107 030c 	add.w	r3, r7, #12
 8008b10:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 8008b18:	69fb      	ldr	r3, [r7, #28]
 8008b1a:	212e      	movs	r1, #46	@ 0x2e
 8008b1c:	f64f 4066 	movw	r0, #64614	@ 0xfc66
 8008b20:	f000 fae8 	bl	80090f4 <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8008b24:	69fb      	ldr	r3, [r7, #28]
 8008b26:	330b      	adds	r3, #11
 8008b28:	78db      	ldrb	r3, [r3, #3]
}
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	3720      	adds	r7, #32
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	bd80      	pop	{r7, pc}

08008b32 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 8008b32:	b580      	push	{r7, lr}
 8008b34:	b088      	sub	sp, #32
 8008b36:	af00      	add	r7, sp, #0
 8008b38:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8008b3a:	f107 030c 	add.w	r3, r7, #12
 8008b3e:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 8008b46:	69fb      	ldr	r3, [r7, #28]
 8008b48:	210f      	movs	r1, #15
 8008b4a:	f64f 4068 	movw	r0, #64616	@ 0xfc68
 8008b4e:	f000 fad1 	bl	80090f4 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8008b52:	69fb      	ldr	r3, [r7, #28]
 8008b54:	330b      	adds	r3, #11
 8008b56:	78db      	ldrb	r3, [r3, #3]
}
 8008b58:	4618      	mov	r0, r3
 8008b5a:	3720      	adds	r7, #32
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	bd80      	pop	{r7, pc}

08008b60 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b088      	sub	sp, #32
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8008b68:	f107 030c 	add.w	r3, r7, #12
 8008b6c:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 8008b6e:	69fb      	ldr	r3, [r7, #28]
 8008b70:	687a      	ldr	r2, [r7, #4]
 8008b72:	2110      	movs	r1, #16
 8008b74:	f64f 4075 	movw	r0, #64629	@ 0xfc75
 8008b78:	f000 fabc 	bl	80090f4 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8008b7c:	69fb      	ldr	r3, [r7, #28]
 8008b7e:	330b      	adds	r3, #11
 8008b80:	78db      	ldrb	r3, [r3, #3]
}
 8008b82:	4618      	mov	r0, r3
 8008b84:	3720      	adds	r7, #32
 8008b86:	46bd      	mov	sp, r7
 8008b88:	bd80      	pop	{r7, pc}
	...

08008b8c <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8008b8c:	b480      	push	{r7}
 8008b8e:	b08b      	sub	sp, #44	@ 0x2c
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8008b94:	2300      	movs	r3, #0
 8008b96:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 8008b98:	2300      	movs	r3, #0
 8008b9a:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t wireless_firmware_memorySize = 0;
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 8008ba8:	2300      	movs	r3, #0
 8008baa:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 8008bac:	2300      	movs	r3, #0
 8008bae:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8008bb4:	4b4a      	ldr	r3, [pc, #296]	@ (8008ce0 <SHCI_GetWirelessFwInfo+0x154>)
 8008bb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008bb8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8008bbc:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 8008bbe:	693b      	ldr	r3, [r7, #16]
 8008bc0:	009b      	lsls	r3, r3, #2
 8008bc2:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8008bc6:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 8008bce:	68bb      	ldr	r3, [r7, #8]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	4a44      	ldr	r2, [pc, #272]	@ (8008ce4 <SHCI_GetWirelessFwInfo+0x158>)
 8008bd4:	4293      	cmp	r3, r2
 8008bd6:	d10f      	bne.n	8008bf8 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 8008bd8:	68bb      	ldr	r3, [r7, #8]
 8008bda:	695b      	ldr	r3, [r3, #20]
 8008bdc:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 8008bde:	68bb      	ldr	r3, [r7, #8]
 8008be0:	699b      	ldr	r3, [r3, #24]
 8008be2:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 8008be4:	68bb      	ldr	r3, [r7, #8]
 8008be6:	69db      	ldr	r3, [r3, #28]
 8008be8:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 8008bea:	68bb      	ldr	r3, [r7, #8]
 8008bec:	68db      	ldr	r3, [r3, #12]
 8008bee:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 8008bf0:	68bb      	ldr	r3, [r7, #8]
 8008bf2:	691b      	ldr	r3, [r3, #16]
 8008bf4:	617b      	str	r3, [r7, #20]
 8008bf6:	e01a      	b.n	8008c2e <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 8008bf8:	693b      	ldr	r3, [r7, #16]
 8008bfa:	009b      	lsls	r3, r3, #2
 8008bfc:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8008c00:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 8008c04:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	691b      	ldr	r3, [r3, #16]
 8008c0c:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	695b      	ldr	r3, [r3, #20]
 8008c14:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	699b      	ldr	r3, [r3, #24]
 8008c1c:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	685b      	ldr	r3, [r3, #4]
 8008c24:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	689b      	ldr	r3, [r3, #8]
 8008c2c:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8008c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c30:	0e1b      	lsrs	r3, r3, #24
 8008c32:	b2da      	uxtb	r2, r3
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8008c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c3a:	0c1b      	lsrs	r3, r3, #16
 8008c3c:	b2da      	uxtb	r2, r3
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8008c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c44:	0a1b      	lsrs	r3, r3, #8
 8008c46:	b2da      	uxtb	r2, r3
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8008c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c4e:	091b      	lsrs	r3, r3, #4
 8008c50:	b2db      	uxtb	r3, r3
 8008c52:	f003 030f 	and.w	r3, r3, #15
 8008c56:	b2da      	uxtb	r2, r3
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 8008c5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c5e:	b2db      	uxtb	r3, r3
 8008c60:	f003 030f 	and.w	r3, r3, #15
 8008c64:	b2da      	uxtb	r2, r3
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8008c6a:	6a3b      	ldr	r3, [r7, #32]
 8008c6c:	0e1b      	lsrs	r3, r3, #24
 8008c6e:	b2da      	uxtb	r2, r3
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8008c74:	6a3b      	ldr	r3, [r7, #32]
 8008c76:	0c1b      	lsrs	r3, r3, #16
 8008c78:	b2da      	uxtb	r2, r3
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 8008c7e:	6a3b      	ldr	r3, [r7, #32]
 8008c80:	0a1b      	lsrs	r3, r3, #8
 8008c82:	b2da      	uxtb	r2, r3
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8008c88:	6a3b      	ldr	r3, [r7, #32]
 8008c8a:	b2da      	uxtb	r2, r3
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 8008c90:	69fb      	ldr	r3, [r7, #28]
 8008c92:	b2da      	uxtb	r2, r3
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8008c98:	69bb      	ldr	r3, [r7, #24]
 8008c9a:	0e1b      	lsrs	r3, r3, #24
 8008c9c:	b2da      	uxtb	r2, r3
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8008ca2:	69bb      	ldr	r3, [r7, #24]
 8008ca4:	0c1b      	lsrs	r3, r3, #16
 8008ca6:	b2da      	uxtb	r2, r3
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8008cac:	69bb      	ldr	r3, [r7, #24]
 8008cae:	0a1b      	lsrs	r3, r3, #8
 8008cb0:	b2da      	uxtb	r2, r3
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8008cb6:	697b      	ldr	r3, [r7, #20]
 8008cb8:	0e1b      	lsrs	r3, r3, #24
 8008cba:	b2da      	uxtb	r2, r3
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8008cc0:	697b      	ldr	r3, [r7, #20]
 8008cc2:	0c1b      	lsrs	r3, r3, #16
 8008cc4:	b2da      	uxtb	r2, r3
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8008cca:	697b      	ldr	r3, [r7, #20]
 8008ccc:	b2da      	uxtb	r2, r3
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 8008cd2:	2300      	movs	r3, #0
}
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	372c      	adds	r7, #44	@ 0x2c
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cde:	4770      	bx	lr
 8008ce0:	58004000 	.word	0x58004000
 8008ce4:	a94656b9 	.word	0xa94656b9

08008ce8 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b082      	sub	sp, #8
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
 8008cf0:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	685b      	ldr	r3, [r3, #4]
 8008cf6:	4a08      	ldr	r2, [pc, #32]	@ (8008d18 <hci_init+0x30>)
 8008cf8:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 8008cfa:	4a08      	ldr	r2, [pc, #32]	@ (8008d1c <hci_init+0x34>)
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 8008d00:	4806      	ldr	r0, [pc, #24]	@ (8008d1c <hci_init+0x34>)
 8008d02:	f000 f979 	bl	8008ff8 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	f000 f8da 	bl	8008ec4 <TlInit>

  return;
 8008d10:	bf00      	nop
}
 8008d12:	3708      	adds	r7, #8
 8008d14:	46bd      	mov	sp, r7
 8008d16:	bd80      	pop	{r7, pc}
 8008d18:	20000358 	.word	0x20000358
 8008d1c:	20000330 	.word	0x20000330

08008d20 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b084      	sub	sp, #16
 8008d24:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8008d26:	4822      	ldr	r0, [pc, #136]	@ (8008db0 <hci_user_evt_proc+0x90>)
 8008d28:	f000 fdd2 	bl	80098d0 <LST_is_empty>
 8008d2c:	4603      	mov	r3, r0
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d12b      	bne.n	8008d8a <hci_user_evt_proc+0x6a>
 8008d32:	4b20      	ldr	r3, [pc, #128]	@ (8008db4 <hci_user_evt_proc+0x94>)
 8008d34:	781b      	ldrb	r3, [r3, #0]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d027      	beq.n	8008d8a <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8008d3a:	f107 030c 	add.w	r3, r7, #12
 8008d3e:	4619      	mov	r1, r3
 8008d40:	481b      	ldr	r0, [pc, #108]	@ (8008db0 <hci_user_evt_proc+0x90>)
 8008d42:	f000 fe54 	bl	80099ee <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 8008d46:	4b1c      	ldr	r3, [pc, #112]	@ (8008db8 <hci_user_evt_proc+0x98>)
 8008d48:	69db      	ldr	r3, [r3, #28]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d00c      	beq.n	8008d68 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 8008d52:	2301      	movs	r3, #1
 8008d54:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 8008d56:	4b18      	ldr	r3, [pc, #96]	@ (8008db8 <hci_user_evt_proc+0x98>)
 8008d58:	69db      	ldr	r3, [r3, #28]
 8008d5a:	1d3a      	adds	r2, r7, #4
 8008d5c:	4610      	mov	r0, r2
 8008d5e:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8008d60:	793a      	ldrb	r2, [r7, #4]
 8008d62:	4b14      	ldr	r3, [pc, #80]	@ (8008db4 <hci_user_evt_proc+0x94>)
 8008d64:	701a      	strb	r2, [r3, #0]
 8008d66:	e002      	b.n	8008d6e <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8008d68:	4b12      	ldr	r3, [pc, #72]	@ (8008db4 <hci_user_evt_proc+0x94>)
 8008d6a:	2201      	movs	r2, #1
 8008d6c:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 8008d6e:	4b11      	ldr	r3, [pc, #68]	@ (8008db4 <hci_user_evt_proc+0x94>)
 8008d70:	781b      	ldrb	r3, [r3, #0]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d004      	beq.n	8008d80 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	4618      	mov	r0, r3
 8008d7a:	f000 fc0d 	bl	8009598 <TL_MM_EvtDone>
 8008d7e:	e004      	b.n	8008d8a <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	4619      	mov	r1, r3
 8008d84:	480a      	ldr	r0, [pc, #40]	@ (8008db0 <hci_user_evt_proc+0x90>)
 8008d86:	f000 fdc5 	bl	8009914 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8008d8a:	4809      	ldr	r0, [pc, #36]	@ (8008db0 <hci_user_evt_proc+0x90>)
 8008d8c:	f000 fda0 	bl	80098d0 <LST_is_empty>
 8008d90:	4603      	mov	r3, r0
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d107      	bne.n	8008da6 <hci_user_evt_proc+0x86>
 8008d96:	4b07      	ldr	r3, [pc, #28]	@ (8008db4 <hci_user_evt_proc+0x94>)
 8008d98:	781b      	ldrb	r3, [r3, #0]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d003      	beq.n	8008da6 <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 8008d9e:	4804      	ldr	r0, [pc, #16]	@ (8008db0 <hci_user_evt_proc+0x90>)
 8008da0:	f002 fa6c 	bl	800b27c <hci_notify_asynch_evt>
  }


  return;
 8008da4:	bf00      	nop
 8008da6:	bf00      	nop
}
 8008da8:	3710      	adds	r7, #16
 8008daa:	46bd      	mov	sp, r7
 8008dac:	bd80      	pop	{r7, pc}
 8008dae:	bf00      	nop
 8008db0:	200000a8 	.word	0x200000a8
 8008db4:	200000b4 	.word	0x200000b4
 8008db8:	20000330 	.word	0x20000330

08008dbc <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b088      	sub	sp, #32
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
 8008dc4:	460b      	mov	r3, r1
 8008dc6:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 8008dc8:	2000      	movs	r0, #0
 8008dca:	f000 f8d1 	bl	8008f70 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 8008dce:	2300      	movs	r3, #0
 8008dd0:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	885b      	ldrh	r3, [r3, #2]
 8008dd6:	b21b      	sxth	r3, r3
 8008dd8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008ddc:	b21a      	sxth	r2, r3
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	881b      	ldrh	r3, [r3, #0]
 8008de2:	029b      	lsls	r3, r3, #10
 8008de4:	b21b      	sxth	r3, r3
 8008de6:	4313      	orrs	r3, r2
 8008de8:	b21b      	sxth	r3, r3
 8008dea:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 8008dec:	4b33      	ldr	r3, [pc, #204]	@ (8008ebc <hci_send_req+0x100>)
 8008dee:	2201      	movs	r2, #1
 8008df0:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	68db      	ldr	r3, [r3, #12]
 8008df6:	b2d9      	uxtb	r1, r3
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	689a      	ldr	r2, [r3, #8]
 8008dfc:	8bbb      	ldrh	r3, [r7, #28]
 8008dfe:	4618      	mov	r0, r3
 8008e00:	f000 f890 	bl	8008f24 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 8008e04:	e04e      	b.n	8008ea4 <hci_send_req+0xe8>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 8008e06:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 8008e0a:	f002 fa4e 	bl	800b2aa <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8008e0e:	e043      	b.n	8008e98 <hci_send_req+0xdc>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 8008e10:	f107 030c 	add.w	r3, r7, #12
 8008e14:	4619      	mov	r1, r3
 8008e16:	482a      	ldr	r0, [pc, #168]	@ (8008ec0 <hci_send_req+0x104>)
 8008e18:	f000 fde9 	bl	80099ee <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	7a5b      	ldrb	r3, [r3, #9]
 8008e20:	2b0f      	cmp	r3, #15
 8008e22:	d114      	bne.n	8008e4e <hci_send_req+0x92>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	330b      	adds	r3, #11
 8008e28:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 8008e2a:	693b      	ldr	r3, [r7, #16]
 8008e2c:	885b      	ldrh	r3, [r3, #2]
 8008e2e:	b29b      	uxth	r3, r3
 8008e30:	8bba      	ldrh	r2, [r7, #28]
 8008e32:	429a      	cmp	r2, r3
 8008e34:	d104      	bne.n	8008e40 <hci_send_req+0x84>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	691b      	ldr	r3, [r3, #16]
 8008e3a:	693a      	ldr	r2, [r7, #16]
 8008e3c:	7812      	ldrb	r2, [r2, #0]
 8008e3e:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 8008e40:	693b      	ldr	r3, [r7, #16]
 8008e42:	785b      	ldrb	r3, [r3, #1]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d027      	beq.n	8008e98 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8008e48:	2301      	movs	r3, #1
 8008e4a:	77fb      	strb	r3, [r7, #31]
 8008e4c:	e024      	b.n	8008e98 <hci_send_req+0xdc>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	330b      	adds	r3, #11
 8008e52:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 8008e54:	69bb      	ldr	r3, [r7, #24]
 8008e56:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008e5a:	b29b      	uxth	r3, r3
 8008e5c:	8bba      	ldrh	r2, [r7, #28]
 8008e5e:	429a      	cmp	r2, r3
 8008e60:	d114      	bne.n	8008e8c <hci_send_req+0xd0>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	7a9b      	ldrb	r3, [r3, #10]
 8008e66:	3b03      	subs	r3, #3
 8008e68:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	695a      	ldr	r2, [r3, #20]
 8008e6e:	7dfb      	ldrb	r3, [r7, #23]
 8008e70:	429a      	cmp	r2, r3
 8008e72:	bfa8      	it	ge
 8008e74:	461a      	movge	r2, r3
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	6918      	ldr	r0, [r3, #16]
 8008e7e:	69bb      	ldr	r3, [r7, #24]
 8008e80:	1cd9      	adds	r1, r3, #3
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	695b      	ldr	r3, [r3, #20]
 8008e86:	461a      	mov	r2, r3
 8008e88:	f003 faeb 	bl	800c462 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 8008e8c:	69bb      	ldr	r3, [r7, #24]
 8008e8e:	781b      	ldrb	r3, [r3, #0]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d001      	beq.n	8008e98 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8008e94:	2301      	movs	r3, #1
 8008e96:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8008e98:	4809      	ldr	r0, [pc, #36]	@ (8008ec0 <hci_send_req+0x104>)
 8008e9a:	f000 fd19 	bl	80098d0 <LST_is_empty>
 8008e9e:	4603      	mov	r3, r0
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d0b5      	beq.n	8008e10 <hci_send_req+0x54>
  while(local_cmd_status == HCI_TL_CmdBusy)
 8008ea4:	7ffb      	ldrb	r3, [r7, #31]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d0ad      	beq.n	8008e06 <hci_send_req+0x4a>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 8008eaa:	2001      	movs	r0, #1
 8008eac:	f000 f860 	bl	8008f70 <NotifyCmdStatus>

  return 0;
 8008eb0:	2300      	movs	r3, #0
}
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	3720      	adds	r7, #32
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	bd80      	pop	{r7, pc}
 8008eba:	bf00      	nop
 8008ebc:	2000035c 	.word	0x2000035c
 8008ec0:	20000350 	.word	0x20000350

08008ec4 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b086      	sub	sp, #24
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8008ecc:	480f      	ldr	r0, [pc, #60]	@ (8008f0c <TlInit+0x48>)
 8008ece:	f000 fcef 	bl	80098b0 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 8008ed2:	4a0f      	ldr	r2, [pc, #60]	@ (8008f10 <TlInit+0x4c>)
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 8008ed8:	480e      	ldr	r0, [pc, #56]	@ (8008f14 <TlInit+0x50>)
 8008eda:	f000 fce9 	bl	80098b0 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8008ede:	4b0e      	ldr	r3, [pc, #56]	@ (8008f18 <TlInit+0x54>)
 8008ee0:	2201      	movs	r2, #1
 8008ee2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 8008ee4:	4b0d      	ldr	r3, [pc, #52]	@ (8008f1c <TlInit+0x58>)
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d00a      	beq.n	8008f02 <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8008ef0:	4b0b      	ldr	r3, [pc, #44]	@ (8008f20 <TlInit+0x5c>)
 8008ef2:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 8008ef4:	4b09      	ldr	r3, [pc, #36]	@ (8008f1c <TlInit+0x58>)
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	f107 0208 	add.w	r2, r7, #8
 8008efc:	4610      	mov	r0, r2
 8008efe:	4798      	blx	r3
  }

  return;
 8008f00:	bf00      	nop
 8008f02:	bf00      	nop
}
 8008f04:	3718      	adds	r7, #24
 8008f06:	46bd      	mov	sp, r7
 8008f08:	bd80      	pop	{r7, pc}
 8008f0a:	bf00      	nop
 8008f0c:	20000350 	.word	0x20000350
 8008f10:	200000b0 	.word	0x200000b0
 8008f14:	200000a8 	.word	0x200000a8
 8008f18:	200000b4 	.word	0x200000b4
 8008f1c:	20000330 	.word	0x20000330
 8008f20:	08008fb1 	.word	0x08008fb1

08008f24 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b082      	sub	sp, #8
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	4603      	mov	r3, r0
 8008f2c:	603a      	str	r2, [r7, #0]
 8008f2e:	80fb      	strh	r3, [r7, #6]
 8008f30:	460b      	mov	r3, r1
 8008f32:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8008f34:	4b0c      	ldr	r3, [pc, #48]	@ (8008f68 <SendCmd+0x44>)
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	88fa      	ldrh	r2, [r7, #6]
 8008f3a:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 8008f3e:	4b0a      	ldr	r3, [pc, #40]	@ (8008f68 <SendCmd+0x44>)
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	797a      	ldrb	r2, [r7, #5]
 8008f44:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 8008f46:	4b08      	ldr	r3, [pc, #32]	@ (8008f68 <SendCmd+0x44>)
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	330c      	adds	r3, #12
 8008f4c:	797a      	ldrb	r2, [r7, #5]
 8008f4e:	6839      	ldr	r1, [r7, #0]
 8008f50:	4618      	mov	r0, r3
 8008f52:	f003 fa86 	bl	800c462 <memcpy>

  hciContext.io.Send(0,0);
 8008f56:	4b05      	ldr	r3, [pc, #20]	@ (8008f6c <SendCmd+0x48>)
 8008f58:	691b      	ldr	r3, [r3, #16]
 8008f5a:	2100      	movs	r1, #0
 8008f5c:	2000      	movs	r0, #0
 8008f5e:	4798      	blx	r3

  return;
 8008f60:	bf00      	nop
}
 8008f62:	3708      	adds	r7, #8
 8008f64:	46bd      	mov	sp, r7
 8008f66:	bd80      	pop	{r7, pc}
 8008f68:	200000b0 	.word	0x200000b0
 8008f6c:	20000330 	.word	0x20000330

08008f70 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b082      	sub	sp, #8
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	4603      	mov	r3, r0
 8008f78:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 8008f7a:	79fb      	ldrb	r3, [r7, #7]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d108      	bne.n	8008f92 <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 8008f80:	4b0a      	ldr	r3, [pc, #40]	@ (8008fac <NotifyCmdStatus+0x3c>)
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d00d      	beq.n	8008fa4 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8008f88:	4b08      	ldr	r3, [pc, #32]	@ (8008fac <NotifyCmdStatus+0x3c>)
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	2000      	movs	r0, #0
 8008f8e:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 8008f90:	e008      	b.n	8008fa4 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 8008f92:	4b06      	ldr	r3, [pc, #24]	@ (8008fac <NotifyCmdStatus+0x3c>)
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d004      	beq.n	8008fa4 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 8008f9a:	4b04      	ldr	r3, [pc, #16]	@ (8008fac <NotifyCmdStatus+0x3c>)
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	2001      	movs	r0, #1
 8008fa0:	4798      	blx	r3
  return;
 8008fa2:	bf00      	nop
 8008fa4:	bf00      	nop
}
 8008fa6:	3708      	adds	r7, #8
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	bd80      	pop	{r7, pc}
 8008fac:	20000358 	.word	0x20000358

08008fb0 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b082      	sub	sp, #8
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	7a5b      	ldrb	r3, [r3, #9]
 8008fbc:	2b0f      	cmp	r3, #15
 8008fbe:	d003      	beq.n	8008fc8 <TlEvtReceived+0x18>
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	7a5b      	ldrb	r3, [r3, #9]
 8008fc4:	2b0e      	cmp	r3, #14
 8008fc6:	d107      	bne.n	8008fd8 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8008fc8:	6879      	ldr	r1, [r7, #4]
 8008fca:	4809      	ldr	r0, [pc, #36]	@ (8008ff0 <TlEvtReceived+0x40>)
 8008fcc:	f000 fcc8 	bl	8009960 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8008fd0:	2000      	movs	r0, #0
 8008fd2:	f002 f95f 	bl	800b294 <hci_cmd_resp_release>
 8008fd6:	e006      	b.n	8008fe6 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8008fd8:	6879      	ldr	r1, [r7, #4]
 8008fda:	4806      	ldr	r0, [pc, #24]	@ (8008ff4 <TlEvtReceived+0x44>)
 8008fdc:	f000 fcc0 	bl	8009960 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8008fe0:	4804      	ldr	r0, [pc, #16]	@ (8008ff4 <TlEvtReceived+0x44>)
 8008fe2:	f002 f94b 	bl	800b27c <hci_notify_asynch_evt>
  }

  return;
 8008fe6:	bf00      	nop
}
 8008fe8:	3708      	adds	r7, #8
 8008fea:	46bd      	mov	sp, r7
 8008fec:	bd80      	pop	{r7, pc}
 8008fee:	bf00      	nop
 8008ff0:	20000350 	.word	0x20000350
 8008ff4:	200000a8 	.word	0x200000a8

08008ff8 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 8008ff8:	b480      	push	{r7}
 8008ffa:	b083      	sub	sp, #12
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	4a05      	ldr	r2, [pc, #20]	@ (8009018 <hci_register_io_bus+0x20>)
 8009004:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	4a04      	ldr	r2, [pc, #16]	@ (800901c <hci_register_io_bus+0x24>)
 800900a:	611a      	str	r2, [r3, #16]

  return;
 800900c:	bf00      	nop
}
 800900e:	370c      	adds	r7, #12
 8009010:	46bd      	mov	sp, r7
 8009012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009016:	4770      	bx	lr
 8009018:	08009311 	.word	0x08009311
 800901c:	08009379 	.word	0x08009379

08009020 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8009020:	b580      	push	{r7, lr}
 8009022:	b082      	sub	sp, #8
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
 8009028:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800902a:	683b      	ldr	r3, [r7, #0]
 800902c:	685b      	ldr	r3, [r3, #4]
 800902e:	4a08      	ldr	r2, [pc, #32]	@ (8009050 <shci_init+0x30>)
 8009030:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8009032:	4a08      	ldr	r2, [pc, #32]	@ (8009054 <shci_init+0x34>)
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8009038:	4806      	ldr	r0, [pc, #24]	@ (8009054 <shci_init+0x34>)
 800903a:	f000 f915 	bl	8009268 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	4618      	mov	r0, r3
 8009044:	f000 f898 	bl	8009178 <TlInit>

  return;
 8009048:	bf00      	nop
}
 800904a:	3708      	adds	r7, #8
 800904c:	46bd      	mov	sp, r7
 800904e:	bd80      	pop	{r7, pc}
 8009050:	20000380 	.word	0x20000380
 8009054:	20000360 	.word	0x20000360

08009058 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8009058:	b580      	push	{r7, lr}
 800905a:	b084      	sub	sp, #16
 800905c:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800905e:	4822      	ldr	r0, [pc, #136]	@ (80090e8 <shci_user_evt_proc+0x90>)
 8009060:	f000 fc36 	bl	80098d0 <LST_is_empty>
 8009064:	4603      	mov	r3, r0
 8009066:	2b00      	cmp	r3, #0
 8009068:	d12b      	bne.n	80090c2 <shci_user_evt_proc+0x6a>
 800906a:	4b20      	ldr	r3, [pc, #128]	@ (80090ec <shci_user_evt_proc+0x94>)
 800906c:	781b      	ldrb	r3, [r3, #0]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d027      	beq.n	80090c2 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8009072:	f107 030c 	add.w	r3, r7, #12
 8009076:	4619      	mov	r1, r3
 8009078:	481b      	ldr	r0, [pc, #108]	@ (80090e8 <shci_user_evt_proc+0x90>)
 800907a:	f000 fcb8 	bl	80099ee <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 800907e:	4b1c      	ldr	r3, [pc, #112]	@ (80090f0 <shci_user_evt_proc+0x98>)
 8009080:	69db      	ldr	r3, [r3, #28]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d00c      	beq.n	80090a0 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800908a:	2301      	movs	r3, #1
 800908c:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800908e:	4b18      	ldr	r3, [pc, #96]	@ (80090f0 <shci_user_evt_proc+0x98>)
 8009090:	69db      	ldr	r3, [r3, #28]
 8009092:	1d3a      	adds	r2, r7, #4
 8009094:	4610      	mov	r0, r2
 8009096:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8009098:	793a      	ldrb	r2, [r7, #4]
 800909a:	4b14      	ldr	r3, [pc, #80]	@ (80090ec <shci_user_evt_proc+0x94>)
 800909c:	701a      	strb	r2, [r3, #0]
 800909e:	e002      	b.n	80090a6 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 80090a0:	4b12      	ldr	r3, [pc, #72]	@ (80090ec <shci_user_evt_proc+0x94>)
 80090a2:	2201      	movs	r2, #1
 80090a4:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 80090a6:	4b11      	ldr	r3, [pc, #68]	@ (80090ec <shci_user_evt_proc+0x94>)
 80090a8:	781b      	ldrb	r3, [r3, #0]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d004      	beq.n	80090b8 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	4618      	mov	r0, r3
 80090b2:	f000 fa71 	bl	8009598 <TL_MM_EvtDone>
 80090b6:	e004      	b.n	80090c2 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	4619      	mov	r1, r3
 80090bc:	480a      	ldr	r0, [pc, #40]	@ (80090e8 <shci_user_evt_proc+0x90>)
 80090be:	f000 fc29 	bl	8009914 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 80090c2:	4809      	ldr	r0, [pc, #36]	@ (80090e8 <shci_user_evt_proc+0x90>)
 80090c4:	f000 fc04 	bl	80098d0 <LST_is_empty>
 80090c8:	4603      	mov	r3, r0
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d107      	bne.n	80090de <shci_user_evt_proc+0x86>
 80090ce:	4b07      	ldr	r3, [pc, #28]	@ (80090ec <shci_user_evt_proc+0x94>)
 80090d0:	781b      	ldrb	r3, [r3, #0]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d003      	beq.n	80090de <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 80090d6:	4804      	ldr	r0, [pc, #16]	@ (80090e8 <shci_user_evt_proc+0x90>)
 80090d8:	f7f7 fff7 	bl	80010ca <shci_notify_asynch_evt>
  }


  return;
 80090dc:	bf00      	nop
 80090de:	bf00      	nop
}
 80090e0:	3710      	adds	r7, #16
 80090e2:	46bd      	mov	sp, r7
 80090e4:	bd80      	pop	{r7, pc}
 80090e6:	bf00      	nop
 80090e8:	200000b8 	.word	0x200000b8
 80090ec:	200000c8 	.word	0x200000c8
 80090f0:	20000360 	.word	0x20000360

080090f4 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b084      	sub	sp, #16
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	60ba      	str	r2, [r7, #8]
 80090fc:	607b      	str	r3, [r7, #4]
 80090fe:	4603      	mov	r3, r0
 8009100:	81fb      	strh	r3, [r7, #14]
 8009102:	460b      	mov	r3, r1
 8009104:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 8009106:	2000      	movs	r0, #0
 8009108:	f000 f868 	bl	80091dc <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800910c:	4b17      	ldr	r3, [pc, #92]	@ (800916c <shci_send+0x78>)
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	89fa      	ldrh	r2, [r7, #14]
 8009112:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8009116:	4b15      	ldr	r3, [pc, #84]	@ (800916c <shci_send+0x78>)
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	7b7a      	ldrb	r2, [r7, #13]
 800911c:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800911e:	4b13      	ldr	r3, [pc, #76]	@ (800916c <shci_send+0x78>)
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	330c      	adds	r3, #12
 8009124:	7b7a      	ldrb	r2, [r7, #13]
 8009126:	68b9      	ldr	r1, [r7, #8]
 8009128:	4618      	mov	r0, r3
 800912a:	f003 f99a 	bl	800c462 <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 800912e:	4b10      	ldr	r3, [pc, #64]	@ (8009170 <shci_send+0x7c>)
 8009130:	2201      	movs	r2, #1
 8009132:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 8009134:	4b0f      	ldr	r3, [pc, #60]	@ (8009174 <shci_send+0x80>)
 8009136:	691b      	ldr	r3, [r3, #16]
 8009138:	2100      	movs	r1, #0
 800913a:	2000      	movs	r0, #0
 800913c:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800913e:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 8009142:	f7f7 ffd9 	bl	80010f8 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	f103 0008 	add.w	r0, r3, #8
 800914c:	4b07      	ldr	r3, [pc, #28]	@ (800916c <shci_send+0x78>)
 800914e:	6819      	ldr	r1, [r3, #0]
 8009150:	4b06      	ldr	r3, [pc, #24]	@ (800916c <shci_send+0x78>)
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	789b      	ldrb	r3, [r3, #2]
 8009156:	3303      	adds	r3, #3
 8009158:	461a      	mov	r2, r3
 800915a:	f003 f982 	bl	800c462 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800915e:	2001      	movs	r0, #1
 8009160:	f000 f83c 	bl	80091dc <Cmd_SetStatus>

  return;
 8009164:	bf00      	nop
}
 8009166:	3710      	adds	r7, #16
 8009168:	46bd      	mov	sp, r7
 800916a:	bd80      	pop	{r7, pc}
 800916c:	200000c4 	.word	0x200000c4
 8009170:	20000384 	.word	0x20000384
 8009174:	20000360 	.word	0x20000360

08009178 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8009178:	b580      	push	{r7, lr}
 800917a:	b086      	sub	sp, #24
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8009180:	4a10      	ldr	r2, [pc, #64]	@ (80091c4 <TlInit+0x4c>)
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 8009186:	4810      	ldr	r0, [pc, #64]	@ (80091c8 <TlInit+0x50>)
 8009188:	f000 fb92 	bl	80098b0 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800918c:	2001      	movs	r0, #1
 800918e:	f000 f825 	bl	80091dc <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8009192:	4b0e      	ldr	r3, [pc, #56]	@ (80091cc <TlInit+0x54>)
 8009194:	2201      	movs	r2, #1
 8009196:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8009198:	4b0d      	ldr	r3, [pc, #52]	@ (80091d0 <TlInit+0x58>)
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	2b00      	cmp	r3, #0
 800919e:	d00c      	beq.n	80091ba <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 80091a4:	4b0b      	ldr	r3, [pc, #44]	@ (80091d4 <TlInit+0x5c>)
 80091a6:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 80091a8:	4b0b      	ldr	r3, [pc, #44]	@ (80091d8 <TlInit+0x60>)
 80091aa:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 80091ac:	4b08      	ldr	r3, [pc, #32]	@ (80091d0 <TlInit+0x58>)
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	f107 020c 	add.w	r2, r7, #12
 80091b4:	4610      	mov	r0, r2
 80091b6:	4798      	blx	r3
  }

  return;
 80091b8:	bf00      	nop
 80091ba:	bf00      	nop
}
 80091bc:	3718      	adds	r7, #24
 80091be:	46bd      	mov	sp, r7
 80091c0:	bd80      	pop	{r7, pc}
 80091c2:	bf00      	nop
 80091c4:	200000c4 	.word	0x200000c4
 80091c8:	200000b8 	.word	0x200000b8
 80091cc:	200000c8 	.word	0x200000c8
 80091d0:	20000360 	.word	0x20000360
 80091d4:	0800922d 	.word	0x0800922d
 80091d8:	08009245 	.word	0x08009245

080091dc <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b082      	sub	sp, #8
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	4603      	mov	r3, r0
 80091e4:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 80091e6:	79fb      	ldrb	r3, [r7, #7]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d10b      	bne.n	8009204 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 80091ec:	4b0d      	ldr	r3, [pc, #52]	@ (8009224 <Cmd_SetStatus+0x48>)
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d003      	beq.n	80091fc <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 80091f4:	4b0b      	ldr	r3, [pc, #44]	@ (8009224 <Cmd_SetStatus+0x48>)
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	2000      	movs	r0, #0
 80091fa:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 80091fc:	4b0a      	ldr	r3, [pc, #40]	@ (8009228 <Cmd_SetStatus+0x4c>)
 80091fe:	2200      	movs	r2, #0
 8009200:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 8009202:	e00b      	b.n	800921c <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8009204:	4b08      	ldr	r3, [pc, #32]	@ (8009228 <Cmd_SetStatus+0x4c>)
 8009206:	2201      	movs	r2, #1
 8009208:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800920a:	4b06      	ldr	r3, [pc, #24]	@ (8009224 <Cmd_SetStatus+0x48>)
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d004      	beq.n	800921c <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8009212:	4b04      	ldr	r3, [pc, #16]	@ (8009224 <Cmd_SetStatus+0x48>)
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	2001      	movs	r0, #1
 8009218:	4798      	blx	r3
  return;
 800921a:	bf00      	nop
 800921c:	bf00      	nop
}
 800921e:	3708      	adds	r7, #8
 8009220:	46bd      	mov	sp, r7
 8009222:	bd80      	pop	{r7, pc}
 8009224:	20000380 	.word	0x20000380
 8009228:	200000c0 	.word	0x200000c0

0800922c <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800922c:	b580      	push	{r7, lr}
 800922e:	b082      	sub	sp, #8
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8009234:	2000      	movs	r0, #0
 8009236:	f7f7 ff54 	bl	80010e2 <shci_cmd_resp_release>

  return;
 800923a:	bf00      	nop
}
 800923c:	3708      	adds	r7, #8
 800923e:	46bd      	mov	sp, r7
 8009240:	bd80      	pop	{r7, pc}
	...

08009244 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8009244:	b580      	push	{r7, lr}
 8009246:	b082      	sub	sp, #8
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800924c:	6879      	ldr	r1, [r7, #4]
 800924e:	4805      	ldr	r0, [pc, #20]	@ (8009264 <TlUserEvtReceived+0x20>)
 8009250:	f000 fb86 	bl	8009960 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8009254:	4803      	ldr	r0, [pc, #12]	@ (8009264 <TlUserEvtReceived+0x20>)
 8009256:	f7f7 ff38 	bl	80010ca <shci_notify_asynch_evt>

  return;
 800925a:	bf00      	nop
}
 800925c:	3708      	adds	r7, #8
 800925e:	46bd      	mov	sp, r7
 8009260:	bd80      	pop	{r7, pc}
 8009262:	bf00      	nop
 8009264:	200000b8 	.word	0x200000b8

08009268 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 8009268:	b480      	push	{r7}
 800926a:	b083      	sub	sp, #12
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	4a05      	ldr	r2, [pc, #20]	@ (8009288 <shci_register_io_bus+0x20>)
 8009274:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	4a04      	ldr	r2, [pc, #16]	@ (800928c <shci_register_io_bus+0x24>)
 800927a:	611a      	str	r2, [r3, #16]

  return;
 800927c:	bf00      	nop
}
 800927e:	370c      	adds	r7, #12
 8009280:	46bd      	mov	sp, r7
 8009282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009286:	4770      	bx	lr
 8009288:	08009425 	.word	0x08009425
 800928c:	08009479 	.word	0x08009479

08009290 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 8009290:	b580      	push	{r7, lr}
 8009292:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 8009294:	f002 fb10 	bl	800b8b8 <HW_IPCC_Enable>

  return;
 8009298:	bf00      	nop
}
 800929a:	bd80      	pop	{r7, pc}

0800929c <TL_Init>:


void TL_Init( void )
{
 800929c:	b580      	push	{r7, lr}
 800929e:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 80092a0:	4b10      	ldr	r3, [pc, #64]	@ (80092e4 <TL_Init+0x48>)
 80092a2:	4a11      	ldr	r2, [pc, #68]	@ (80092e8 <TL_Init+0x4c>)
 80092a4:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 80092a6:	4b0f      	ldr	r3, [pc, #60]	@ (80092e4 <TL_Init+0x48>)
 80092a8:	4a10      	ldr	r2, [pc, #64]	@ (80092ec <TL_Init+0x50>)
 80092aa:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 80092ac:	4b0d      	ldr	r3, [pc, #52]	@ (80092e4 <TL_Init+0x48>)
 80092ae:	4a10      	ldr	r2, [pc, #64]	@ (80092f0 <TL_Init+0x54>)
 80092b0:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 80092b2:	4b0c      	ldr	r3, [pc, #48]	@ (80092e4 <TL_Init+0x48>)
 80092b4:	4a0f      	ldr	r2, [pc, #60]	@ (80092f4 <TL_Init+0x58>)
 80092b6:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 80092b8:	4b0a      	ldr	r3, [pc, #40]	@ (80092e4 <TL_Init+0x48>)
 80092ba:	4a0f      	ldr	r2, [pc, #60]	@ (80092f8 <TL_Init+0x5c>)
 80092bc:	625a      	str	r2, [r3, #36]	@ 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 80092be:	4b09      	ldr	r3, [pc, #36]	@ (80092e4 <TL_Init+0x48>)
 80092c0:	4a0e      	ldr	r2, [pc, #56]	@ (80092fc <TL_Init+0x60>)
 80092c2:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 80092c4:	4b07      	ldr	r3, [pc, #28]	@ (80092e4 <TL_Init+0x48>)
 80092c6:	4a0e      	ldr	r2, [pc, #56]	@ (8009300 <TL_Init+0x64>)
 80092c8:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 80092ca:	4b06      	ldr	r3, [pc, #24]	@ (80092e4 <TL_Init+0x48>)
 80092cc:	4a0d      	ldr	r2, [pc, #52]	@ (8009304 <TL_Init+0x68>)
 80092ce:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 80092d0:	4b04      	ldr	r3, [pc, #16]	@ (80092e4 <TL_Init+0x48>)
 80092d2:	4a0d      	ldr	r2, [pc, #52]	@ (8009308 <TL_Init+0x6c>)
 80092d4:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 80092d6:	4b03      	ldr	r3, [pc, #12]	@ (80092e4 <TL_Init+0x48>)
 80092d8:	4a0c      	ldr	r2, [pc, #48]	@ (800930c <TL_Init+0x70>)
 80092da:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 80092dc:	f002 fb00 	bl	800b8e0 <HW_IPCC_Init>

  return;
 80092e0:	bf00      	nop
}
 80092e2:	bd80      	pop	{r7, pc}
 80092e4:	20030000 	.word	0x20030000
 80092e8:	20030028 	.word	0x20030028
 80092ec:	20030048 	.word	0x20030048
 80092f0:	20030058 	.word	0x20030058
 80092f4:	20030068 	.word	0x20030068
 80092f8:	20030070 	.word	0x20030070
 80092fc:	20030078 	.word	0x20030078
 8009300:	20030080 	.word	0x20030080
 8009304:	2003009c 	.word	0x2003009c
 8009308:	200300a0 	.word	0x200300a0
 800930c:	200300ac 	.word	0x200300ac

08009310 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b084      	sub	sp, #16
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 800931c:	4811      	ldr	r0, [pc, #68]	@ (8009364 <TL_BLE_Init+0x54>)
 800931e:	f000 fac7 	bl	80098b0 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 8009322:	4b11      	ldr	r3, [pc, #68]	@ (8009368 <TL_BLE_Init+0x58>)
 8009324:	685b      	ldr	r3, [r3, #4]
 8009326:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	689a      	ldr	r2, [r3, #8]
 800932c:	68bb      	ldr	r3, [r7, #8]
 800932e:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	68da      	ldr	r2, [r3, #12]
 8009334:	68bb      	ldr	r3, [r7, #8]
 8009336:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 8009338:	68bb      	ldr	r3, [r7, #8]
 800933a:	4a0c      	ldr	r2, [pc, #48]	@ (800936c <TL_BLE_Init+0x5c>)
 800933c:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800933e:	68bb      	ldr	r3, [r7, #8]
 8009340:	4a08      	ldr	r2, [pc, #32]	@ (8009364 <TL_BLE_Init+0x54>)
 8009342:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 8009344:	f002 fae2 	bl	800b90c <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	4a08      	ldr	r2, [pc, #32]	@ (8009370 <TL_BLE_Init+0x60>)
 800934e:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	685b      	ldr	r3, [r3, #4]
 8009354:	4a07      	ldr	r2, [pc, #28]	@ (8009374 <TL_BLE_Init+0x64>)
 8009356:	6013      	str	r3, [r2, #0]

  return 0;
 8009358:	2300      	movs	r3, #0
}
 800935a:	4618      	mov	r0, r3
 800935c:	3710      	adds	r7, #16
 800935e:	46bd      	mov	sp, r7
 8009360:	bd80      	pop	{r7, pc}
 8009362:	bf00      	nop
 8009364:	200300c8 	.word	0x200300c8
 8009368:	20030000 	.word	0x20030000
 800936c:	20030a58 	.word	0x20030a58
 8009370:	20000390 	.word	0x20000390
 8009374:	20000394 	.word	0x20000394

08009378 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b082      	sub	sp, #8
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
 8009380:	460b      	mov	r3, r1
 8009382:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 8009384:	4b09      	ldr	r3, [pc, #36]	@ (80093ac <TL_BLE_SendCmd+0x34>)
 8009386:	685b      	ldr	r3, [r3, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	2201      	movs	r2, #1
 800938c:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 800938e:	4b07      	ldr	r3, [pc, #28]	@ (80093ac <TL_BLE_SendCmd+0x34>)
 8009390:	685b      	ldr	r3, [r3, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	4619      	mov	r1, r3
 8009396:	2001      	movs	r0, #1
 8009398:	f000 f96c 	bl	8009674 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 800939c:	f002 fac0 	bl	800b920 <HW_IPCC_BLE_SendCmd>

  return 0;
 80093a0:	2300      	movs	r3, #0
}
 80093a2:	4618      	mov	r0, r3
 80093a4:	3708      	adds	r7, #8
 80093a6:	46bd      	mov	sp, r7
 80093a8:	bd80      	pop	{r7, pc}
 80093aa:	bf00      	nop
 80093ac:	20030000 	.word	0x20030000

080093b0 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b082      	sub	sp, #8
 80093b4:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 80093b6:	e01c      	b.n	80093f2 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 80093b8:	1d3b      	adds	r3, r7, #4
 80093ba:	4619      	mov	r1, r3
 80093bc:	4812      	ldr	r0, [pc, #72]	@ (8009408 <HW_IPCC_BLE_RxEvtNot+0x58>)
 80093be:	f000 fb16 	bl	80099ee <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	7a5b      	ldrb	r3, [r3, #9]
 80093c6:	2b0f      	cmp	r3, #15
 80093c8:	d003      	beq.n	80093d2 <HW_IPCC_BLE_RxEvtNot+0x22>
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	7a5b      	ldrb	r3, [r3, #9]
 80093ce:	2b0e      	cmp	r3, #14
 80093d0:	d105      	bne.n	80093de <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	4619      	mov	r1, r3
 80093d6:	2002      	movs	r0, #2
 80093d8:	f000 f94c 	bl	8009674 <OutputDbgTrace>
 80093dc:	e004      	b.n	80093e8 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	4619      	mov	r1, r3
 80093e2:	2003      	movs	r0, #3
 80093e4:	f000 f946 	bl	8009674 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 80093e8:	4b08      	ldr	r3, [pc, #32]	@ (800940c <HW_IPCC_BLE_RxEvtNot+0x5c>)
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	687a      	ldr	r2, [r7, #4]
 80093ee:	4610      	mov	r0, r2
 80093f0:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 80093f2:	4805      	ldr	r0, [pc, #20]	@ (8009408 <HW_IPCC_BLE_RxEvtNot+0x58>)
 80093f4:	f000 fa6c 	bl	80098d0 <LST_is_empty>
 80093f8:	4603      	mov	r3, r0
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d0dc      	beq.n	80093b8 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 80093fe:	bf00      	nop
}
 8009400:	3708      	adds	r7, #8
 8009402:	46bd      	mov	sp, r7
 8009404:	bd80      	pop	{r7, pc}
 8009406:	bf00      	nop
 8009408:	200300c8 	.word	0x200300c8
 800940c:	20000390 	.word	0x20000390

08009410 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8009410:	b580      	push	{r7, lr}
 8009412:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8009414:	4b02      	ldr	r3, [pc, #8]	@ (8009420 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	4798      	blx	r3

  return;
 800941a:	bf00      	nop
}
 800941c:	bd80      	pop	{r7, pc}
 800941e:	bf00      	nop
 8009420:	20000394 	.word	0x20000394

08009424 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8009424:	b580      	push	{r7, lr}
 8009426:	b084      	sub	sp, #16
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8009430:	480d      	ldr	r0, [pc, #52]	@ (8009468 <TL_SYS_Init+0x44>)
 8009432:	f000 fa3d 	bl	80098b0 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 8009436:	4b0d      	ldr	r3, [pc, #52]	@ (800946c <TL_SYS_Init+0x48>)
 8009438:	68db      	ldr	r3, [r3, #12]
 800943a:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	689a      	ldr	r2, [r3, #8]
 8009440:	68bb      	ldr	r3, [r7, #8]
 8009442:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8009444:	68bb      	ldr	r3, [r7, #8]
 8009446:	4a08      	ldr	r2, [pc, #32]	@ (8009468 <TL_SYS_Init+0x44>)
 8009448:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800944a:	f002 fa8b 	bl	800b964 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	4a07      	ldr	r2, [pc, #28]	@ (8009470 <TL_SYS_Init+0x4c>)
 8009454:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	685b      	ldr	r3, [r3, #4]
 800945a:	4a06      	ldr	r2, [pc, #24]	@ (8009474 <TL_SYS_Init+0x50>)
 800945c:	6013      	str	r3, [r2, #0]

  return 0;
 800945e:	2300      	movs	r3, #0
}
 8009460:	4618      	mov	r0, r3
 8009462:	3710      	adds	r7, #16
 8009464:	46bd      	mov	sp, r7
 8009466:	bd80      	pop	{r7, pc}
 8009468:	200300d0 	.word	0x200300d0
 800946c:	20030000 	.word	0x20030000
 8009470:	20000398 	.word	0x20000398
 8009474:	2000039c 	.word	0x2000039c

08009478 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b082      	sub	sp, #8
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
 8009480:	460b      	mov	r3, r1
 8009482:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8009484:	4b09      	ldr	r3, [pc, #36]	@ (80094ac <TL_SYS_SendCmd+0x34>)
 8009486:	68db      	ldr	r3, [r3, #12]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	2210      	movs	r2, #16
 800948c:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800948e:	4b07      	ldr	r3, [pc, #28]	@ (80094ac <TL_SYS_SendCmd+0x34>)
 8009490:	68db      	ldr	r3, [r3, #12]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	4619      	mov	r1, r3
 8009496:	2004      	movs	r0, #4
 8009498:	f000 f8ec 	bl	8009674 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 800949c:	f002 fa6c 	bl	800b978 <HW_IPCC_SYS_SendCmd>

  return 0;
 80094a0:	2300      	movs	r3, #0
}
 80094a2:	4618      	mov	r0, r3
 80094a4:	3708      	adds	r7, #8
 80094a6:	46bd      	mov	sp, r7
 80094a8:	bd80      	pop	{r7, pc}
 80094aa:	bf00      	nop
 80094ac:	20030000 	.word	0x20030000

080094b0 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 80094b0:	b580      	push	{r7, lr}
 80094b2:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 80094b4:	4b07      	ldr	r3, [pc, #28]	@ (80094d4 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 80094b6:	68db      	ldr	r3, [r3, #12]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	4619      	mov	r1, r3
 80094bc:	2005      	movs	r0, #5
 80094be:	f000 f8d9 	bl	8009674 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 80094c2:	4b05      	ldr	r3, [pc, #20]	@ (80094d8 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	4a03      	ldr	r2, [pc, #12]	@ (80094d4 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 80094c8:	68d2      	ldr	r2, [r2, #12]
 80094ca:	6812      	ldr	r2, [r2, #0]
 80094cc:	4610      	mov	r0, r2
 80094ce:	4798      	blx	r3

  return;
 80094d0:	bf00      	nop
}
 80094d2:	bd80      	pop	{r7, pc}
 80094d4:	20030000 	.word	0x20030000
 80094d8:	20000398 	.word	0x20000398

080094dc <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b082      	sub	sp, #8
 80094e0:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 80094e2:	e00e      	b.n	8009502 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 80094e4:	1d3b      	adds	r3, r7, #4
 80094e6:	4619      	mov	r1, r3
 80094e8:	480b      	ldr	r0, [pc, #44]	@ (8009518 <HW_IPCC_SYS_EvtNot+0x3c>)
 80094ea:	f000 fa80 	bl	80099ee <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	4619      	mov	r1, r3
 80094f2:	2006      	movs	r0, #6
 80094f4:	f000 f8be 	bl	8009674 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 80094f8:	4b08      	ldr	r3, [pc, #32]	@ (800951c <HW_IPCC_SYS_EvtNot+0x40>)
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	687a      	ldr	r2, [r7, #4]
 80094fe:	4610      	mov	r0, r2
 8009500:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8009502:	4805      	ldr	r0, [pc, #20]	@ (8009518 <HW_IPCC_SYS_EvtNot+0x3c>)
 8009504:	f000 f9e4 	bl	80098d0 <LST_is_empty>
 8009508:	4603      	mov	r3, r0
 800950a:	2b00      	cmp	r3, #0
 800950c:	d0ea      	beq.n	80094e4 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800950e:	bf00      	nop
}
 8009510:	3708      	adds	r7, #8
 8009512:	46bd      	mov	sp, r7
 8009514:	bd80      	pop	{r7, pc}
 8009516:	bf00      	nop
 8009518:	200300d0 	.word	0x200300d0
 800951c:	2000039c 	.word	0x2000039c

08009520 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8009520:	b580      	push	{r7, lr}
 8009522:	b082      	sub	sp, #8
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8009528:	4817      	ldr	r0, [pc, #92]	@ (8009588 <TL_MM_Init+0x68>)
 800952a:	f000 f9c1 	bl	80098b0 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800952e:	4817      	ldr	r0, [pc, #92]	@ (800958c <TL_MM_Init+0x6c>)
 8009530:	f000 f9be 	bl	80098b0 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8009534:	4b16      	ldr	r3, [pc, #88]	@ (8009590 <TL_MM_Init+0x70>)
 8009536:	691b      	ldr	r3, [r3, #16]
 8009538:	4a16      	ldr	r2, [pc, #88]	@ (8009594 <TL_MM_Init+0x74>)
 800953a:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800953c:	4b15      	ldr	r3, [pc, #84]	@ (8009594 <TL_MM_Init+0x74>)
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	687a      	ldr	r2, [r7, #4]
 8009542:	6892      	ldr	r2, [r2, #8]
 8009544:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 8009546:	4b13      	ldr	r3, [pc, #76]	@ (8009594 <TL_MM_Init+0x74>)
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	687a      	ldr	r2, [r7, #4]
 800954c:	68d2      	ldr	r2, [r2, #12]
 800954e:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8009550:	4b10      	ldr	r3, [pc, #64]	@ (8009594 <TL_MM_Init+0x74>)
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	4a0c      	ldr	r2, [pc, #48]	@ (8009588 <TL_MM_Init+0x68>)
 8009556:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8009558:	4b0e      	ldr	r3, [pc, #56]	@ (8009594 <TL_MM_Init+0x74>)
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	687a      	ldr	r2, [r7, #4]
 800955e:	6812      	ldr	r2, [r2, #0]
 8009560:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 8009562:	4b0c      	ldr	r3, [pc, #48]	@ (8009594 <TL_MM_Init+0x74>)
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	687a      	ldr	r2, [r7, #4]
 8009568:	6852      	ldr	r2, [r2, #4]
 800956a:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800956c:	4b09      	ldr	r3, [pc, #36]	@ (8009594 <TL_MM_Init+0x74>)
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	687a      	ldr	r2, [r7, #4]
 8009572:	6912      	ldr	r2, [r2, #16]
 8009574:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 8009576:	4b07      	ldr	r3, [pc, #28]	@ (8009594 <TL_MM_Init+0x74>)
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	687a      	ldr	r2, [r7, #4]
 800957c:	6952      	ldr	r2, [r2, #20]
 800957e:	619a      	str	r2, [r3, #24]

  return;
 8009580:	bf00      	nop
}
 8009582:	3708      	adds	r7, #8
 8009584:	46bd      	mov	sp, r7
 8009586:	bd80      	pop	{r7, pc}
 8009588:	200300b8 	.word	0x200300b8
 800958c:	20000388 	.word	0x20000388
 8009590:	20030000 	.word	0x20030000
 8009594:	200003a0 	.word	0x200003a0

08009598 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b082      	sub	sp, #8
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 80095a0:	6879      	ldr	r1, [r7, #4]
 80095a2:	4807      	ldr	r0, [pc, #28]	@ (80095c0 <TL_MM_EvtDone+0x28>)
 80095a4:	f000 f9dc 	bl	8009960 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 80095a8:	6879      	ldr	r1, [r7, #4]
 80095aa:	2000      	movs	r0, #0
 80095ac:	f000 f862 	bl	8009674 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 80095b0:	4804      	ldr	r0, [pc, #16]	@ (80095c4 <TL_MM_EvtDone+0x2c>)
 80095b2:	f002 fa07 	bl	800b9c4 <HW_IPCC_MM_SendFreeBuf>

  return;
 80095b6:	bf00      	nop
}
 80095b8:	3708      	adds	r7, #8
 80095ba:	46bd      	mov	sp, r7
 80095bc:	bd80      	pop	{r7, pc}
 80095be:	bf00      	nop
 80095c0:	20000388 	.word	0x20000388
 80095c4:	080095c9 	.word	0x080095c9

080095c8 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b082      	sub	sp, #8
 80095cc:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 80095ce:	e00c      	b.n	80095ea <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 80095d0:	1d3b      	adds	r3, r7, #4
 80095d2:	4619      	mov	r1, r3
 80095d4:	480a      	ldr	r0, [pc, #40]	@ (8009600 <SendFreeBuf+0x38>)
 80095d6:	f000 fa0a 	bl	80099ee <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 80095da:	4b0a      	ldr	r3, [pc, #40]	@ (8009604 <SendFreeBuf+0x3c>)
 80095dc:	691b      	ldr	r3, [r3, #16]
 80095de:	691b      	ldr	r3, [r3, #16]
 80095e0:	687a      	ldr	r2, [r7, #4]
 80095e2:	4611      	mov	r1, r2
 80095e4:	4618      	mov	r0, r3
 80095e6:	f000 f9bb 	bl	8009960 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 80095ea:	4805      	ldr	r0, [pc, #20]	@ (8009600 <SendFreeBuf+0x38>)
 80095ec:	f000 f970 	bl	80098d0 <LST_is_empty>
 80095f0:	4603      	mov	r3, r0
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d0ec      	beq.n	80095d0 <SendFreeBuf+0x8>
  }

  return;
 80095f6:	bf00      	nop
}
 80095f8:	3708      	adds	r7, #8
 80095fa:	46bd      	mov	sp, r7
 80095fc:	bd80      	pop	{r7, pc}
 80095fe:	bf00      	nop
 8009600:	20000388 	.word	0x20000388
 8009604:	20030000 	.word	0x20030000

08009608 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8009608:	b580      	push	{r7, lr}
 800960a:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800960c:	4805      	ldr	r0, [pc, #20]	@ (8009624 <TL_TRACES_Init+0x1c>)
 800960e:	f000 f94f 	bl	80098b0 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 8009612:	4b05      	ldr	r3, [pc, #20]	@ (8009628 <TL_TRACES_Init+0x20>)
 8009614:	695b      	ldr	r3, [r3, #20]
 8009616:	4a03      	ldr	r2, [pc, #12]	@ (8009624 <TL_TRACES_Init+0x1c>)
 8009618:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800961a:	f002 fa09 	bl	800ba30 <HW_IPCC_TRACES_Init>

  return;
 800961e:	bf00      	nop
}
 8009620:	bd80      	pop	{r7, pc}
 8009622:	bf00      	nop
 8009624:	200300c0 	.word	0x200300c0
 8009628:	20030000 	.word	0x20030000

0800962c <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b082      	sub	sp, #8
 8009630:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8009632:	e008      	b.n	8009646 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8009634:	1d3b      	adds	r3, r7, #4
 8009636:	4619      	mov	r1, r3
 8009638:	4808      	ldr	r0, [pc, #32]	@ (800965c <HW_IPCC_TRACES_EvtNot+0x30>)
 800963a:	f000 f9d8 	bl	80099ee <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	4618      	mov	r0, r3
 8009642:	f000 f80d 	bl	8009660 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8009646:	4805      	ldr	r0, [pc, #20]	@ (800965c <HW_IPCC_TRACES_EvtNot+0x30>)
 8009648:	f000 f942 	bl	80098d0 <LST_is_empty>
 800964c:	4603      	mov	r3, r0
 800964e:	2b00      	cmp	r3, #0
 8009650:	d0f0      	beq.n	8009634 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 8009652:	bf00      	nop
}
 8009654:	3708      	adds	r7, #8
 8009656:	46bd      	mov	sp, r7
 8009658:	bd80      	pop	{r7, pc}
 800965a:	bf00      	nop
 800965c:	200300c0 	.word	0x200300c0

08009660 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8009660:	b480      	push	{r7}
 8009662:	b083      	sub	sp, #12
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 8009668:	bf00      	nop
 800966a:	370c      	adds	r7, #12
 800966c:	46bd      	mov	sp, r7
 800966e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009672:	4770      	bx	lr

08009674 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 8009674:	b480      	push	{r7}
 8009676:	b085      	sub	sp, #20
 8009678:	af00      	add	r7, sp, #0
 800967a:	4603      	mov	r3, r0
 800967c:	6039      	str	r1, [r7, #0]
 800967e:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 8009680:	79fb      	ldrb	r3, [r7, #7]
 8009682:	2b06      	cmp	r3, #6
 8009684:	d845      	bhi.n	8009712 <OutputDbgTrace+0x9e>
 8009686:	a201      	add	r2, pc, #4	@ (adr r2, 800968c <OutputDbgTrace+0x18>)
 8009688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800968c:	080096a9 	.word	0x080096a9
 8009690:	080096cd 	.word	0x080096cd
 8009694:	080096d3 	.word	0x080096d3
 8009698:	080096e7 	.word	0x080096e7
 800969c:	080096f3 	.word	0x080096f3
 80096a0:	080096f9 	.word	0x080096f9
 80096a4:	08009707 	.word	0x08009707
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	7a5b      	ldrb	r3, [r3, #9]
 80096b0:	2bff      	cmp	r3, #255	@ 0xff
 80096b2:	d005      	beq.n	80096c0 <OutputDbgTrace+0x4c>
 80096b4:	2bff      	cmp	r3, #255	@ 0xff
 80096b6:	dc05      	bgt.n	80096c4 <OutputDbgTrace+0x50>
 80096b8:	2b0e      	cmp	r3, #14
 80096ba:	d005      	beq.n	80096c8 <OutputDbgTrace+0x54>
 80096bc:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 80096be:	e001      	b.n	80096c4 <OutputDbgTrace+0x50>
          break;
 80096c0:	bf00      	nop
 80096c2:	e027      	b.n	8009714 <OutputDbgTrace+0xa0>
          break;
 80096c4:	bf00      	nop
 80096c6:	e025      	b.n	8009714 <OutputDbgTrace+0xa0>
          break;
 80096c8:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 80096ca:	e023      	b.n	8009714 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 80096cc:	683b      	ldr	r3, [r7, #0]
 80096ce:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 80096d0:	e020      	b.n	8009714 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80096d2:	683b      	ldr	r3, [r7, #0]
 80096d4:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	7a5b      	ldrb	r3, [r3, #9]
 80096da:	2b0e      	cmp	r3, #14
 80096dc:	d001      	beq.n	80096e2 <OutputDbgTrace+0x6e>
 80096de:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 80096e0:	e000      	b.n	80096e4 <OutputDbgTrace+0x70>
          break;
 80096e2:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80096e4:	e016      	b.n	8009714 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80096e6:	683b      	ldr	r3, [r7, #0]
 80096e8:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	7a5b      	ldrb	r3, [r3, #9]
 80096ee:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80096f0:	e010      	b.n	8009714 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 80096f2:	683b      	ldr	r3, [r7, #0]
 80096f4:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 80096f6:	e00d      	b.n	8009714 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80096f8:	683b      	ldr	r3, [r7, #0]
 80096fa:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	7a5b      	ldrb	r3, [r3, #9]
 8009700:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8009702:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8009704:	e006      	b.n	8009714 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8009706:	683b      	ldr	r3, [r7, #0]
 8009708:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	7a5b      	ldrb	r3, [r3, #9]
 800970e:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8009710:	e000      	b.n	8009714 <OutputDbgTrace+0xa0>

    default:
      break;
 8009712:	bf00      	nop
  }

  return;
 8009714:	bf00      	nop
}
 8009716:	3714      	adds	r7, #20
 8009718:	46bd      	mov	sp, r7
 800971a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971e:	4770      	bx	lr

08009720 <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 8009720:	b580      	push	{r7, lr}
 8009722:	b086      	sub	sp, #24
 8009724:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009726:	f3ef 8310 	mrs	r3, PRIMASK
 800972a:	60fb      	str	r3, [r7, #12]
  return(result);
 800972c:	68fb      	ldr	r3, [r7, #12]
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  uint8_t* buf;
  uint16_t bufSize;

  BACKUP_PRIMASK();
 800972e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009730:	b672      	cpsid	i
}
 8009732:	bf00      	nop

  DISABLE_IRQ();			/**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  CircularQueue_Remove(&MsgDbgTraceQueue,&bufSize);
 8009734:	1cbb      	adds	r3, r7, #2
 8009736:	4619      	mov	r1, r3
 8009738:	4812      	ldr	r0, [pc, #72]	@ (8009784 <DbgTrace_TxCpltCallback+0x64>)
 800973a:	f000 fb9d 	bl	8009e78 <CircularQueue_Remove>

  /* Sense if new data to be sent */
  buf=CircularQueue_Sense(&MsgDbgTraceQueue,&bufSize);
 800973e:	1cbb      	adds	r3, r7, #2
 8009740:	4619      	mov	r1, r3
 8009742:	4810      	ldr	r0, [pc, #64]	@ (8009784 <DbgTrace_TxCpltCallback+0x64>)
 8009744:	f000 fc87 	bl	800a056 <CircularQueue_Sense>
 8009748:	6138      	str	r0, [r7, #16]


  if ( buf != NULL) 
 800974a:	693b      	ldr	r3, [r7, #16]
 800974c:	2b00      	cmp	r3, #0
 800974e:	d00c      	beq.n	800976a <DbgTrace_TxCpltCallback+0x4a>
 8009750:	697b      	ldr	r3, [r7, #20]
 8009752:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009754:	68bb      	ldr	r3, [r7, #8]
 8009756:	f383 8810 	msr	PRIMASK, r3
}
 800975a:	bf00      	nop
  {
    RESTORE_PRIMASK();
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 800975c:	887b      	ldrh	r3, [r7, #2]
 800975e:	4a0a      	ldr	r2, [pc, #40]	@ (8009788 <DbgTrace_TxCpltCallback+0x68>)
 8009760:	4619      	mov	r1, r3
 8009762:	6938      	ldr	r0, [r7, #16]
 8009764:	f7f7 f9de 	bl	8000b24 <DbgOutputTraces>

  DbgTracePeripheralReady = SET;

  RESTORE_PRIMASK();
#endif
}
 8009768:	e008      	b.n	800977c <DbgTrace_TxCpltCallback+0x5c>
    DbgTracePeripheralReady = SET;
 800976a:	4b08      	ldr	r3, [pc, #32]	@ (800978c <DbgTrace_TxCpltCallback+0x6c>)
 800976c:	2201      	movs	r2, #1
 800976e:	701a      	strb	r2, [r3, #0]
 8009770:	697b      	ldr	r3, [r7, #20]
 8009772:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	f383 8810 	msr	PRIMASK, r3
}
 800977a:	bf00      	nop
}
 800977c:	bf00      	nop
 800977e:	3718      	adds	r7, #24
 8009780:	46bd      	mov	sp, r7
 8009782:	bd80      	pop	{r7, pc}
 8009784:	200003a4 	.word	0x200003a4
 8009788:	08009721 	.word	0x08009721
 800978c:	20000011 	.word	0x20000011

08009790 <_write>:
 * @param	bufsize buffer size
 * @param	...: arguments to be formatted in format string
 * @retval none
 */
size_t _write(int handle, const unsigned char * buf, size_t bufSize)
{
 8009790:	b580      	push	{r7, lr}
 8009792:	b084      	sub	sp, #16
 8009794:	af00      	add	r7, sp, #0
 8009796:	60f8      	str	r0, [r7, #12]
 8009798:	60b9      	str	r1, [r7, #8]
 800979a:	607a      	str	r2, [r7, #4]
  return ( DbgTraceWrite(handle, buf, bufSize) );
 800979c:	687a      	ldr	r2, [r7, #4]
 800979e:	68b9      	ldr	r1, [r7, #8]
 80097a0:	68f8      	ldr	r0, [r7, #12]
 80097a2:	f000 f805 	bl	80097b0 <DbgTraceWrite>
 80097a6:	4603      	mov	r3, r0
}
 80097a8:	4618      	mov	r0, r3
 80097aa:	3710      	adds	r7, #16
 80097ac:	46bd      	mov	sp, r7
 80097ae:	bd80      	pop	{r7, pc}

080097b0 <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b08a      	sub	sp, #40	@ 0x28
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	60f8      	str	r0, [r7, #12]
 80097b8:	60b9      	str	r1, [r7, #8]
 80097ba:	607a      	str	r2, [r7, #4]
  size_t chars_written = 0;
 80097bc:	2300      	movs	r3, #0
 80097be:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80097c0:	f3ef 8310 	mrs	r3, PRIMASK
 80097c4:	61bb      	str	r3, [r7, #24]
  return(result);
 80097c6:	69bb      	ldr	r3, [r7, #24]
  uint8_t* buffer;

  BACKUP_PRIMASK();
 80097c8:	623b      	str	r3, [r7, #32]

  /* Ignore flushes */
  if ( handle == -1 )
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097d0:	d102      	bne.n	80097d8 <DbgTraceWrite+0x28>
  {
    chars_written = ( size_t ) 0;
 80097d2:	2300      	movs	r3, #0
 80097d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80097d6:	e037      	b.n	8009848 <DbgTraceWrite+0x98>
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	2b01      	cmp	r3, #1
 80097dc:	d006      	beq.n	80097ec <DbgTraceWrite+0x3c>
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	2b02      	cmp	r3, #2
 80097e2:	d003      	beq.n	80097ec <DbgTraceWrite+0x3c>
  {
    chars_written = ( size_t ) - 1;
 80097e4:	f04f 33ff 	mov.w	r3, #4294967295
 80097e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80097ea:	e02d      	b.n	8009848 <DbgTraceWrite+0x98>
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d02a      	beq.n	8009848 <DbgTraceWrite+0x98>
  {
    chars_written = bufSize;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 80097f6:	b672      	cpsid	i
}
 80097f8:	bf00      	nop
    /* If queue emepty and TX free, send directly */
    /* CS Start */

#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
    DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
    buffer=CircularQueue_Add(&MsgDbgTraceQueue,(uint8_t*)buf, bufSize,1);
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	b29a      	uxth	r2, r3
 80097fe:	2301      	movs	r3, #1
 8009800:	68b9      	ldr	r1, [r7, #8]
 8009802:	4814      	ldr	r0, [pc, #80]	@ (8009854 <DbgTraceWrite+0xa4>)
 8009804:	f000 f912 	bl	8009a2c <CircularQueue_Add>
 8009808:	61f8      	str	r0, [r7, #28]
    if (buffer && DbgTracePeripheralReady)
 800980a:	69fb      	ldr	r3, [r7, #28]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d015      	beq.n	800983c <DbgTraceWrite+0x8c>
 8009810:	4b11      	ldr	r3, [pc, #68]	@ (8009858 <DbgTraceWrite+0xa8>)
 8009812:	781b      	ldrb	r3, [r3, #0]
 8009814:	b2db      	uxtb	r3, r3
 8009816:	2b00      	cmp	r3, #0
 8009818:	d010      	beq.n	800983c <DbgTraceWrite+0x8c>
    {
      DbgTracePeripheralReady = RESET;
 800981a:	4b0f      	ldr	r3, [pc, #60]	@ (8009858 <DbgTraceWrite+0xa8>)
 800981c:	2200      	movs	r2, #0
 800981e:	701a      	strb	r2, [r3, #0]
 8009820:	6a3b      	ldr	r3, [r7, #32]
 8009822:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009824:	697b      	ldr	r3, [r7, #20]
 8009826:	f383 8810 	msr	PRIMASK, r3
}
 800982a:	bf00      	nop
      RESTORE_PRIMASK();
      DbgOutputTraces((uint8_t*)buffer, bufSize, DbgTrace_TxCpltCallback);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	b29b      	uxth	r3, r3
 8009830:	4a0a      	ldr	r2, [pc, #40]	@ (800985c <DbgTraceWrite+0xac>)
 8009832:	4619      	mov	r1, r3
 8009834:	69f8      	ldr	r0, [r7, #28]
 8009836:	f7f7 f975 	bl	8000b24 <DbgOutputTraces>
 800983a:	e005      	b.n	8009848 <DbgTraceWrite+0x98>
 800983c:	6a3b      	ldr	r3, [r7, #32]
 800983e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009840:	693b      	ldr	r3, [r7, #16]
 8009842:	f383 8810 	msr	PRIMASK, r3
}
 8009846:	bf00      	nop
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
    while (!DbgTracePeripheralReady);
#endif
    /* CS END */
  }
  return ( chars_written );
 8009848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800984a:	4618      	mov	r0, r3
 800984c:	3728      	adds	r7, #40	@ 0x28
 800984e:	46bd      	mov	sp, r7
 8009850:	bd80      	pop	{r7, pc}
 8009852:	bf00      	nop
 8009854:	200003a4 	.word	0x200003a4
 8009858:	20000011 	.word	0x20000011
 800985c:	08009721 	.word	0x08009721

08009860 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8009860:	b480      	push	{r7}
 8009862:	b085      	sub	sp, #20
 8009864:	af00      	add	r7, sp, #0
 8009866:	4603      	mov	r3, r0
 8009868:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800986a:	4b0f      	ldr	r3, [pc, #60]	@ (80098a8 <OTP_Read+0x48>)
 800986c:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800986e:	e002      	b.n	8009876 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	3b08      	subs	r3, #8
 8009874:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	3307      	adds	r3, #7
 800987a:	781b      	ldrb	r3, [r3, #0]
 800987c:	79fa      	ldrb	r2, [r7, #7]
 800987e:	429a      	cmp	r2, r3
 8009880:	d003      	beq.n	800988a <OTP_Read+0x2a>
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	4a09      	ldr	r2, [pc, #36]	@ (80098ac <OTP_Read+0x4c>)
 8009886:	4293      	cmp	r3, r2
 8009888:	d1f2      	bne.n	8009870 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	3307      	adds	r3, #7
 800988e:	781b      	ldrb	r3, [r3, #0]
 8009890:	79fa      	ldrb	r2, [r7, #7]
 8009892:	429a      	cmp	r2, r3
 8009894:	d001      	beq.n	800989a <OTP_Read+0x3a>
  {
    p_id = 0 ;
 8009896:	2300      	movs	r3, #0
 8009898:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800989a:	68fb      	ldr	r3, [r7, #12]
}
 800989c:	4618      	mov	r0, r3
 800989e:	3714      	adds	r7, #20
 80098a0:	46bd      	mov	sp, r7
 80098a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a6:	4770      	bx	lr
 80098a8:	1fff73f8 	.word	0x1fff73f8
 80098ac:	1fff7000 	.word	0x1fff7000

080098b0 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 80098b0:	b480      	push	{r7}
 80098b2:	b083      	sub	sp, #12
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	687a      	ldr	r2, [r7, #4]
 80098bc:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	687a      	ldr	r2, [r7, #4]
 80098c2:	605a      	str	r2, [r3, #4]
}
 80098c4:	bf00      	nop
 80098c6:	370c      	adds	r7, #12
 80098c8:	46bd      	mov	sp, r7
 80098ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ce:	4770      	bx	lr

080098d0 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 80098d0:	b480      	push	{r7}
 80098d2:	b087      	sub	sp, #28
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80098d8:	f3ef 8310 	mrs	r3, PRIMASK
 80098dc:	60fb      	str	r3, [r7, #12]
  return(result);
 80098de:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80098e0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80098e2:	b672      	cpsid	i
}
 80098e4:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	687a      	ldr	r2, [r7, #4]
 80098ec:	429a      	cmp	r2, r3
 80098ee:	d102      	bne.n	80098f6 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 80098f0:	2301      	movs	r3, #1
 80098f2:	75fb      	strb	r3, [r7, #23]
 80098f4:	e001      	b.n	80098fa <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 80098f6:	2300      	movs	r3, #0
 80098f8:	75fb      	strb	r3, [r7, #23]
 80098fa:	693b      	ldr	r3, [r7, #16]
 80098fc:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80098fe:	68bb      	ldr	r3, [r7, #8]
 8009900:	f383 8810 	msr	PRIMASK, r3
}
 8009904:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 8009906:	7dfb      	ldrb	r3, [r7, #23]
}
 8009908:	4618      	mov	r0, r3
 800990a:	371c      	adds	r7, #28
 800990c:	46bd      	mov	sp, r7
 800990e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009912:	4770      	bx	lr

08009914 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8009914:	b480      	push	{r7}
 8009916:	b087      	sub	sp, #28
 8009918:	af00      	add	r7, sp, #0
 800991a:	6078      	str	r0, [r7, #4]
 800991c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800991e:	f3ef 8310 	mrs	r3, PRIMASK
 8009922:	60fb      	str	r3, [r7, #12]
  return(result);
 8009924:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009926:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009928:	b672      	cpsid	i
}
 800992a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681a      	ldr	r2, [r3, #0]
 8009930:	683b      	ldr	r3, [r7, #0]
 8009932:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8009934:	683b      	ldr	r3, [r7, #0]
 8009936:	687a      	ldr	r2, [r7, #4]
 8009938:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	683a      	ldr	r2, [r7, #0]
 800993e:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8009940:	683b      	ldr	r3, [r7, #0]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	683a      	ldr	r2, [r7, #0]
 8009946:	605a      	str	r2, [r3, #4]
 8009948:	697b      	ldr	r3, [r7, #20]
 800994a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800994c:	693b      	ldr	r3, [r7, #16]
 800994e:	f383 8810 	msr	PRIMASK, r3
}
 8009952:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8009954:	bf00      	nop
 8009956:	371c      	adds	r7, #28
 8009958:	46bd      	mov	sp, r7
 800995a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995e:	4770      	bx	lr

08009960 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 8009960:	b480      	push	{r7}
 8009962:	b087      	sub	sp, #28
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]
 8009968:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800996a:	f3ef 8310 	mrs	r3, PRIMASK
 800996e:	60fb      	str	r3, [r7, #12]
  return(result);
 8009970:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009972:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009974:	b672      	cpsid	i
}
 8009976:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8009978:	683b      	ldr	r3, [r7, #0]
 800997a:	687a      	ldr	r2, [r7, #4]
 800997c:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	685a      	ldr	r2, [r3, #4]
 8009982:	683b      	ldr	r3, [r7, #0]
 8009984:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	683a      	ldr	r2, [r7, #0]
 800998a:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800998c:	683b      	ldr	r3, [r7, #0]
 800998e:	685b      	ldr	r3, [r3, #4]
 8009990:	683a      	ldr	r2, [r7, #0]
 8009992:	601a      	str	r2, [r3, #0]
 8009994:	697b      	ldr	r3, [r7, #20]
 8009996:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009998:	693b      	ldr	r3, [r7, #16]
 800999a:	f383 8810 	msr	PRIMASK, r3
}
 800999e:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80099a0:	bf00      	nop
 80099a2:	371c      	adds	r7, #28
 80099a4:	46bd      	mov	sp, r7
 80099a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099aa:	4770      	bx	lr

080099ac <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 80099ac:	b480      	push	{r7}
 80099ae:	b087      	sub	sp, #28
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80099b4:	f3ef 8310 	mrs	r3, PRIMASK
 80099b8:	60fb      	str	r3, [r7, #12]
  return(result);
 80099ba:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80099bc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80099be:	b672      	cpsid	i
}
 80099c0:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	685b      	ldr	r3, [r3, #4]
 80099c6:	687a      	ldr	r2, [r7, #4]
 80099c8:	6812      	ldr	r2, [r2, #0]
 80099ca:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	687a      	ldr	r2, [r7, #4]
 80099d2:	6852      	ldr	r2, [r2, #4]
 80099d4:	605a      	str	r2, [r3, #4]
 80099d6:	697b      	ldr	r3, [r7, #20]
 80099d8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80099da:	693b      	ldr	r3, [r7, #16]
 80099dc:	f383 8810 	msr	PRIMASK, r3
}
 80099e0:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80099e2:	bf00      	nop
 80099e4:	371c      	adds	r7, #28
 80099e6:	46bd      	mov	sp, r7
 80099e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ec:	4770      	bx	lr

080099ee <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 80099ee:	b580      	push	{r7, lr}
 80099f0:	b086      	sub	sp, #24
 80099f2:	af00      	add	r7, sp, #0
 80099f4:	6078      	str	r0, [r7, #4]
 80099f6:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80099f8:	f3ef 8310 	mrs	r3, PRIMASK
 80099fc:	60fb      	str	r3, [r7, #12]
  return(result);
 80099fe:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009a00:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009a02:	b672      	cpsid	i
}
 8009a04:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681a      	ldr	r2, [r3, #0]
 8009a0a:	683b      	ldr	r3, [r7, #0]
 8009a0c:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	4618      	mov	r0, r3
 8009a14:	f7ff ffca 	bl	80099ac <LST_remove_node>
 8009a18:	697b      	ldr	r3, [r7, #20]
 8009a1a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009a1c:	693b      	ldr	r3, [r7, #16]
 8009a1e:	f383 8810 	msr	PRIMASK, r3
}
 8009a22:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8009a24:	bf00      	nop
 8009a26:	3718      	adds	r7, #24
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	bd80      	pop	{r7, pc}

08009a2c <CircularQueue_Add>:
  * @param  elementSize:  Size of element to be added to the queue. Only used if the queue manage variable size elements
  * @param  nbElements:  number of elements in the in buffer pointed by x
  * @retval  pointer on last element just added to the queue, NULL if the element to be added do not fit in the queue (too big)
  */
uint8_t* CircularQueue_Add(queue_t *q, uint8_t* x, uint16_t elementSize, uint32_t nbElements)
{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b08e      	sub	sp, #56	@ 0x38
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	60f8      	str	r0, [r7, #12]
 8009a34:	60b9      	str	r1, [r7, #8]
 8009a36:	603b      	str	r3, [r7, #0]
 8009a38:	4613      	mov	r3, r2
 8009a3a:	80fb      	strh	r3, [r7, #6]

  uint8_t* ptr = NULL;                      /* fct return ptr to the element freshly added, if no room fct return NULL */
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	623b      	str	r3, [r7, #32]
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 8009a40:	2300      	movs	r3, #0
 8009a42:	86fb      	strh	r3, [r7, #54]	@ 0x36
  uint8_t  elemSizeStorageRoom  = 0 ;       /* Indicate the header (which contain only size) of element in case of varaibale size element (q->elementsize == 0) */
 8009a44:	2300      	movs	r3, #0
 8009a46:	77fb      	strb	r3, [r7, #31]
  uint32_t curBuffPosition;                  /* the current position in the queue buffer */
  uint32_t i;                               /* loop counter */
  uint32_t NbBytesToCopy = 0, NbCopiedBytes = 0 ; /* Indicators for copying bytes in queue */
 8009a48:	2300      	movs	r3, #0
 8009a4a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t eob_free_size;                         /* Eof End of Quque Buffer Free Size */
  uint8_t  wrap_will_occur = 0;                   /* indicate if a wrap around will occurs */
 8009a50:	2300      	movs	r3, #0
 8009a52:	77bb      	strb	r3, [r7, #30]
  uint8_t  wrapped_element_eob_size;              /* In case of Wrap around, indicate size of parta of element that fit at thened of the queuue  buffer */
  uint16_t overhead = 0;                          /* In case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG or CIRCULAR_QUEUE_NO_WRAP_FLAG options, 
 8009a54:	2300      	movs	r3, #0
 8009a56:	83bb      	strh	r3, [r7, #28]
                                                     indcate the size overhead that will be generated by adding the element with wrap management (split or no wrap ) */ 
  
  
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	891b      	ldrh	r3, [r3, #8]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d101      	bne.n	8009a64 <CircularQueue_Add+0x38>
 8009a60:	2302      	movs	r3, #2
 8009a62:	e000      	b.n	8009a66 <CircularQueue_Add+0x3a>
 8009a64:	2300      	movs	r3, #0
 8009a66:	77fb      	strb	r3, [r7, #31]
  /* retrieve the size of last element sored: the value stored at the beginning of the queue element if element size is variable otherwise take it from fixed element Size member */
  if (q->byteCount)
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	695b      	ldr	r3, [r3, #20]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d029      	beq.n	8009ac4 <CircularQueue_Add+0x98>
  {
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	891b      	ldrh	r3, [r3, #8]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d122      	bne.n	8009abe <CircularQueue_Add+0x92>
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	681a      	ldr	r2, [r3, #0]
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	691b      	ldr	r3, [r3, #16]
 8009a80:	4413      	add	r3, r2
 8009a82:	781b      	ldrb	r3, [r3, #0]
 8009a84:	4618      	mov	r0, r3
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	681a      	ldr	r2, [r3, #0]
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	691b      	ldr	r3, [r3, #16]
 8009a8e:	1c59      	adds	r1, r3, #1
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	685b      	ldr	r3, [r3, #4]
 8009a94:	4299      	cmp	r1, r3
 8009a96:	d306      	bcc.n	8009aa6 <CircularQueue_Add+0x7a>
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	6919      	ldr	r1, [r3, #16]
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	685b      	ldr	r3, [r3, #4]
 8009aa0:	1acb      	subs	r3, r1, r3
 8009aa2:	3301      	adds	r3, #1
 8009aa4:	e002      	b.n	8009aac <CircularQueue_Add+0x80>
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	691b      	ldr	r3, [r3, #16]
 8009aaa:	3301      	adds	r3, #1
 8009aac:	4413      	add	r3, r2
 8009aae:	781b      	ldrb	r3, [r3, #0]
 8009ab0:	021b      	lsls	r3, r3, #8
 8009ab2:	b29b      	uxth	r3, r3
 8009ab4:	4403      	add	r3, r0
 8009ab6:	b29b      	uxth	r3, r3
 8009ab8:	3302      	adds	r3, #2
 8009aba:	b29b      	uxth	r3, r3
 8009abc:	e001      	b.n	8009ac2 <CircularQueue_Add+0x96>
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	891b      	ldrh	r3, [r3, #8]
 8009ac2:	86fb      	strh	r3, [r7, #54]	@ 0x36
  }
  /* if queue element have fixed size , reset the elementSize arg with fixed element size value */
  if (q->elementSize > 0)               
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	891b      	ldrh	r3, [r3, #8]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d002      	beq.n	8009ad2 <CircularQueue_Add+0xa6>
  {
    elementSize = q->elementSize;
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	891b      	ldrh	r3, [r3, #8]
 8009ad0:	80fb      	strh	r3, [r7, #6]
  }

   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	691a      	ldr	r2, [r3, #16]
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	68db      	ldr	r3, [r3, #12]
 8009ada:	429a      	cmp	r2, r3
 8009adc:	d307      	bcc.n	8009aee <CircularQueue_Add+0xc2>
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	685a      	ldr	r2, [r3, #4]
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	6919      	ldr	r1, [r3, #16]
 8009ae6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009ae8:	440b      	add	r3, r1
 8009aea:	1ad3      	subs	r3, r2, r3
 8009aec:	e000      	b.n	8009af0 <CircularQueue_Add+0xc4>
 8009aee:	2300      	movs	r3, #0
 8009af0:	61bb      	str	r3, [r7, #24]

   /* check how many bytes of wrapped element (if anay) are at end of buffer */
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 8009af2:	88fa      	ldrh	r2, [r7, #6]
 8009af4:	7ffb      	ldrb	r3, [r7, #31]
 8009af6:	4413      	add	r3, r2
 8009af8:	461a      	mov	r2, r3
 8009afa:	683b      	ldr	r3, [r7, #0]
 8009afc:	fb02 f303 	mul.w	r3, r2, r3
 8009b00:	69ba      	ldr	r2, [r7, #24]
 8009b02:	429a      	cmp	r2, r3
 8009b04:	d80b      	bhi.n	8009b1e <CircularQueue_Add+0xf2>
 8009b06:	88fa      	ldrh	r2, [r7, #6]
 8009b08:	7ffb      	ldrb	r3, [r7, #31]
 8009b0a:	4413      	add	r3, r2
 8009b0c:	461a      	mov	r2, r3
 8009b0e:	69bb      	ldr	r3, [r7, #24]
 8009b10:	fbb3 f1f2 	udiv	r1, r3, r2
 8009b14:	fb01 f202 	mul.w	r2, r1, r2
 8009b18:	1a9b      	subs	r3, r3, r2
 8009b1a:	b2db      	uxtb	r3, r3
 8009b1c:	e000      	b.n	8009b20 <CircularQueue_Add+0xf4>
 8009b1e:	2300      	movs	r3, #0
 8009b20:	75fb      	strb	r3, [r7, #23]
   wrap_will_occur  = wrapped_element_eob_size > elemSizeStorageRoom;
 8009b22:	7dfa      	ldrb	r2, [r7, #23]
 8009b24:	7ffb      	ldrb	r3, [r7, #31]
 8009b26:	429a      	cmp	r2, r3
 8009b28:	bf8c      	ite	hi
 8009b2a:	2301      	movhi	r3, #1
 8009b2c:	2300      	movls	r3, #0
 8009b2e:	b2db      	uxtb	r3, r3
 8009b30:	77bb      	strb	r3, [r7, #30]

   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 8009b32:	7fbb      	ldrb	r3, [r7, #30]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d008      	beq.n	8009b4a <CircularQueue_Add+0x11e>
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	7f1b      	ldrb	r3, [r3, #28]
 8009b3c:	f003 0301 	and.w	r3, r3, #1
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d002      	beq.n	8009b4a <CircularQueue_Add+0x11e>
 8009b44:	7dfb      	ldrb	r3, [r7, #23]
 8009b46:	b29b      	uxth	r3, r3
 8009b48:	e000      	b.n	8009b4c <CircularQueue_Add+0x120>
 8009b4a:	8bbb      	ldrh	r3, [r7, #28]
 8009b4c:	83bb      	strh	r3, [r7, #28]
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ? elemSizeStorageRoom  : overhead;
 8009b4e:	7fbb      	ldrb	r3, [r7, #30]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d008      	beq.n	8009b66 <CircularQueue_Add+0x13a>
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	7f1b      	ldrb	r3, [r3, #28]
 8009b58:	f003 0302 	and.w	r3, r3, #2
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d002      	beq.n	8009b66 <CircularQueue_Add+0x13a>
 8009b60:	7ffb      	ldrb	r3, [r7, #31]
 8009b62:	b29b      	uxth	r3, r3
 8009b64:	e000      	b.n	8009b68 <CircularQueue_Add+0x13c>
 8009b66:	8bbb      	ldrh	r3, [r7, #28]
 8009b68:	83bb      	strh	r3, [r7, #28]
   
   
  /* Store now the elements if ennough room for all elements */
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 8009b6a:	88fb      	ldrh	r3, [r7, #6]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	f000 817e 	beq.w	8009e6e <CircularQueue_Add+0x442>
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	695a      	ldr	r2, [r3, #20]
 8009b76:	88f9      	ldrh	r1, [r7, #6]
 8009b78:	7ffb      	ldrb	r3, [r7, #31]
 8009b7a:	440b      	add	r3, r1
 8009b7c:	4619      	mov	r1, r3
 8009b7e:	683b      	ldr	r3, [r7, #0]
 8009b80:	fb01 f303 	mul.w	r3, r1, r3
 8009b84:	441a      	add	r2, r3
 8009b86:	8bbb      	ldrh	r3, [r7, #28]
 8009b88:	441a      	add	r2, r3
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	685b      	ldr	r3, [r3, #4]
 8009b8e:	429a      	cmp	r2, r3
 8009b90:	f200 816d 	bhi.w	8009e6e <CircularQueue_Add+0x442>
  { 
    /* loop to add all elements  */
    for (i=0; i < nbElements; i++) 
 8009b94:	2300      	movs	r3, #0
 8009b96:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009b98:	e14a      	b.n	8009e30 <CircularQueue_Add+0x404>
    {
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	691a      	ldr	r2, [r3, #16]
 8009b9e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009ba0:	441a      	add	r2, r3
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	685b      	ldr	r3, [r3, #4]
 8009ba6:	429a      	cmp	r2, r3
 8009ba8:	d307      	bcc.n	8009bba <CircularQueue_Add+0x18e>
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	691a      	ldr	r2, [r3, #16]
 8009bae:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009bb0:	441a      	add	r2, r3
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	685b      	ldr	r3, [r3, #4]
 8009bb6:	1ad3      	subs	r3, r2, r3
 8009bb8:	e003      	b.n	8009bc2 <CircularQueue_Add+0x196>
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	691a      	ldr	r2, [r3, #16]
 8009bbe:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009bc0:	4413      	add	r3, r2
 8009bc2:	68fa      	ldr	r2, [r7, #12]
 8009bc4:	6113      	str	r3, [r2, #16]
      curBuffPosition = q->last;
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	691b      	ldr	r3, [r3, #16]
 8009bca:	633b      	str	r3, [r7, #48]	@ 0x30
      
      /* store the element  */
      /* store first the element size if element size is variable */
      if (q->elementSize == 0) 
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	891b      	ldrh	r3, [r3, #8]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d130      	bne.n	8009c36 <CircularQueue_Add+0x20a>
      {
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	681a      	ldr	r2, [r3, #0]
 8009bd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bda:	1c59      	adds	r1, r3, #1
 8009bdc:	6339      	str	r1, [r7, #48]	@ 0x30
 8009bde:	4413      	add	r3, r2
 8009be0:	88fa      	ldrh	r2, [r7, #6]
 8009be2:	b2d2      	uxtb	r2, r2
 8009be4:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	685b      	ldr	r3, [r3, #4]
 8009bea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009bec:	429a      	cmp	r2, r3
 8009bee:	d304      	bcc.n	8009bfa <CircularQueue_Add+0x1ce>
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	685b      	ldr	r3, [r3, #4]
 8009bf4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009bf6:	1ad3      	subs	r3, r2, r3
 8009bf8:	e000      	b.n	8009bfc <CircularQueue_Add+0x1d0>
 8009bfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bfc:	633b      	str	r3, [r7, #48]	@ 0x30
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 8009bfe:	88fb      	ldrh	r3, [r7, #6]
 8009c00:	0a1b      	lsrs	r3, r3, #8
 8009c02:	b298      	uxth	r0, r3
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	681a      	ldr	r2, [r3, #0]
 8009c08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c0a:	1c59      	adds	r1, r3, #1
 8009c0c:	6339      	str	r1, [r7, #48]	@ 0x30
 8009c0e:	4413      	add	r3, r2
 8009c10:	b2c2      	uxtb	r2, r0
 8009c12:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	685b      	ldr	r3, [r3, #4]
 8009c18:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009c1a:	429a      	cmp	r2, r3
 8009c1c:	d304      	bcc.n	8009c28 <CircularQueue_Add+0x1fc>
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	685b      	ldr	r3, [r3, #4]
 8009c22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009c24:	1ad3      	subs	r3, r2, r3
 8009c26:	e000      	b.n	8009c2a <CircularQueue_Add+0x1fe>
 8009c28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c2a:	633b      	str	r3, [r7, #48]	@ 0x30
        q->byteCount += 2;
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	695b      	ldr	r3, [r3, #20]
 8009c30:	1c9a      	adds	r2, r3, #2
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	615a      	str	r2, [r3, #20]
      }
      
      /* Identify number of bytes of copy takeing account possible wrap, in this case NbBytesToCopy will contains size that fit at end of the queue buffer */
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 8009c36:	88fa      	ldrh	r2, [r7, #6]
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	6859      	ldr	r1, [r3, #4]
 8009c3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c3e:	1acb      	subs	r3, r1, r3
 8009c40:	4293      	cmp	r3, r2
 8009c42:	bf28      	it	cs
 8009c44:	4613      	movcs	r3, r2
 8009c46:	62bb      	str	r3, [r7, #40]	@ 0x28
      /* check if no wrap (NbBytesToCopy == elementSize) or if Wrap and no spsicf option; 
         In this case part of data will copied at the end of the buffer and the rest a the beginning */
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
 8009c48:	88fb      	ldrh	r3, [r7, #6]
 8009c4a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009c4c:	429a      	cmp	r2, r3
 8009c4e:	d007      	beq.n	8009c60 <CircularQueue_Add+0x234>
 8009c50:	88fb      	ldrh	r3, [r7, #6]
 8009c52:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009c54:	429a      	cmp	r2, r3
 8009c56:	d225      	bcs.n	8009ca4 <CircularQueue_Add+0x278>
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	7f1b      	ldrb	r3, [r3, #28]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d121      	bne.n	8009ca4 <CircularQueue_Add+0x278>
      {
        /* Copy First part (or emtire buffer ) from current position up to the end of the buffer queue (or before if enough room)  */
        memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	681a      	ldr	r2, [r3, #0]
 8009c64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c66:	18d0      	adds	r0, r2, r3
 8009c68:	88fb      	ldrh	r3, [r7, #6]
 8009c6a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009c6c:	fb02 f303 	mul.w	r3, r2, r3
 8009c70:	68ba      	ldr	r2, [r7, #8]
 8009c72:	4413      	add	r3, r2
 8009c74:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009c76:	4619      	mov	r1, r3
 8009c78:	f002 fbf3 	bl	800c462 <memcpy>
        /* Adjust bytes count */
        q->byteCount += NbBytesToCopy;
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	695a      	ldr	r2, [r3, #20]
 8009c80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c82:	441a      	add	r2, r3
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	615a      	str	r2, [r3, #20]
        /* Wrap */
        curBuffPosition = 0; 
 8009c88:	2300      	movs	r3, #0
 8009c8a:	633b      	str	r3, [r7, #48]	@ 0x30
        /* set NbCopiedBytes bytes with  ampount copied */
        NbCopiedBytes = NbBytesToCopy;
 8009c8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c8e:	627b      	str	r3, [r7, #36]	@ 0x24
        /* set the rest to copy if wrao , if no wrap will be 0 */
        NbBytesToCopy = elementSize - NbBytesToCopy;
 8009c90:	88fa      	ldrh	r2, [r7, #6]
 8009c92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c94:	1ad3      	subs	r3, r2, r3
 8009c96:	62bb      	str	r3, [r7, #40]	@ 0x28
        /* set the current element Size, will be used to calaculate next last position at beginning of loop */
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 8009c98:	7ffb      	ldrb	r3, [r7, #31]
 8009c9a:	b29a      	uxth	r2, r3
 8009c9c:	88fb      	ldrh	r3, [r7, #6]
 8009c9e:	4413      	add	r3, r2
 8009ca0:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8009ca2:	e0a4      	b.n	8009dee <CircularQueue_Add+0x3c2>
      }
      else if (NbBytesToCopy)  /* We have a wrap  to manage */
 8009ca4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	f000 80a1 	beq.w	8009dee <CircularQueue_Add+0x3c2>
      {
       /* case of CIRCULAR_QUEUE_NO_WRAP_FLAG option */
         if (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	7f1b      	ldrb	r3, [r3, #28]
 8009cb0:	f003 0301 	and.w	r3, r3, #1
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d03a      	beq.n	8009d2e <CircularQueue_Add+0x302>
        {
          /* if element size are variable and NO_WRAP option, Invalidate end of buffer setting 0xFFFF size*/
          if (q->elementSize == 0)
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	891b      	ldrh	r3, [r3, #8]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d10d      	bne.n	8009cdc <CircularQueue_Add+0x2b0>
          {
             q->qBuff[curBuffPosition-2] = 0xFF;
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	681a      	ldr	r2, [r3, #0]
 8009cc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cc6:	3b02      	subs	r3, #2
 8009cc8:	4413      	add	r3, r2
 8009cca:	22ff      	movs	r2, #255	@ 0xff
 8009ccc:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = 0xFF;
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	681a      	ldr	r2, [r3, #0]
 8009cd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cd4:	3b01      	subs	r3, #1
 8009cd6:	4413      	add	r3, r2
 8009cd8:	22ff      	movs	r2, #255	@ 0xff
 8009cda:	701a      	strb	r2, [r3, #0]
          }
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	695a      	ldr	r2, [r3, #20]
 8009ce0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ce2:	441a      	add	r2, r3
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	615a      	str	r2, [r3, #20]
          /* No bytes coped a the end of buffer */
          NbCopiedBytes = 0;
 8009ce8:	2300      	movs	r3, #0
 8009cea:	627b      	str	r3, [r7, #36]	@ 0x24
          /* all element to be copied at the begnning of buffer */
          NbBytesToCopy = elementSize; 
 8009cec:	88fb      	ldrh	r3, [r7, #6]
 8009cee:	62bb      	str	r3, [r7, #40]	@ 0x28
          /* Wrap */
          curBuffPosition = 0; 
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	633b      	str	r3, [r7, #48]	@ 0x30
          /* if variable size element, invalidate end of buffer setting OxFFFF in element header (size) */
          if (q->elementSize == 0)
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	891b      	ldrh	r3, [r3, #8]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d16f      	bne.n	8009ddc <CircularQueue_Add+0x3b0>
          {
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	681a      	ldr	r2, [r3, #0]
 8009d00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d02:	1c59      	adds	r1, r3, #1
 8009d04:	6339      	str	r1, [r7, #48]	@ 0x30
 8009d06:	4413      	add	r3, r2
 8009d08:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009d0a:	b2d2      	uxtb	r2, r2
 8009d0c:	701a      	strb	r2, [r3, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 8009d0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d10:	0a18      	lsrs	r0, r3, #8
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	681a      	ldr	r2, [r3, #0]
 8009d16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d18:	1c59      	adds	r1, r3, #1
 8009d1a:	6339      	str	r1, [r7, #48]	@ 0x30
 8009d1c:	4413      	add	r3, r2
 8009d1e:	b2c2      	uxtb	r2, r0
 8009d20:	701a      	strb	r2, [r3, #0]
            q->byteCount += 2;   
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	695b      	ldr	r3, [r3, #20]
 8009d26:	1c9a      	adds	r2, r3, #2
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	615a      	str	r2, [r3, #20]
 8009d2c:	e056      	b.n	8009ddc <CircularQueue_Add+0x3b0>
          } 
           
        }
        /* case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG option */
        else if (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	7f1b      	ldrb	r3, [r3, #28]
 8009d32:	f003 0302 	and.w	r3, r3, #2
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d050      	beq.n	8009ddc <CircularQueue_Add+0x3b0>
        {
          if (q->elementSize == 0)
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	891b      	ldrh	r3, [r3, #8]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d14a      	bne.n	8009dd8 <CircularQueue_Add+0x3ac>
          {
            /* reset the size of current element to the nb bytes fitting at the end of buffer */
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	681a      	ldr	r2, [r3, #0]
 8009d46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d48:	3b02      	subs	r3, #2
 8009d4a:	4413      	add	r3, r2
 8009d4c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009d4e:	b2d2      	uxtb	r2, r2
 8009d50:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 8009d52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d54:	0a19      	lsrs	r1, r3, #8
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	681a      	ldr	r2, [r3, #0]
 8009d5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d5c:	3b01      	subs	r3, #1
 8009d5e:	4413      	add	r3, r2
 8009d60:	b2ca      	uxtb	r2, r1
 8009d62:	701a      	strb	r2, [r3, #0]
             /* copy the bytes */ 
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	681a      	ldr	r2, [r3, #0]
 8009d68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d6a:	18d0      	adds	r0, r2, r3
 8009d6c:	88fb      	ldrh	r3, [r7, #6]
 8009d6e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009d70:	fb02 f303 	mul.w	r3, r2, r3
 8009d74:	68ba      	ldr	r2, [r7, #8]
 8009d76:	4413      	add	r3, r2
 8009d78:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009d7a:	4619      	mov	r1, r3
 8009d7c:	f002 fb71 	bl	800c462 <memcpy>
             q->byteCount += NbBytesToCopy; 
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	695a      	ldr	r2, [r3, #20]
 8009d84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d86:	441a      	add	r2, r3
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	615a      	str	r2, [r3, #20]
             /* set the number of copied bytes */
             NbCopiedBytes = NbBytesToCopy;             
 8009d8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d8e:	627b      	str	r3, [r7, #36]	@ 0x24
             /* set rest of data to be copied to begnning of buffer */
             NbBytesToCopy = elementSize - NbBytesToCopy;
 8009d90:	88fa      	ldrh	r2, [r7, #6]
 8009d92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d94:	1ad3      	subs	r3, r2, r3
 8009d96:	62bb      	str	r3, [r7, #40]	@ 0x28
             /* one element more dur to split in 2 elements */
             q->elementCount++;
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	699b      	ldr	r3, [r3, #24]
 8009d9c:	1c5a      	adds	r2, r3, #1
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	619a      	str	r2, [r3, #24]
             /* Wrap */
             curBuffPosition = 0; 
 8009da2:	2300      	movs	r3, #0
 8009da4:	633b      	str	r3, [r7, #48]	@ 0x30
             /* Set new size for rest of data */
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	681a      	ldr	r2, [r3, #0]
 8009daa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dac:	1c59      	adds	r1, r3, #1
 8009dae:	6339      	str	r1, [r7, #48]	@ 0x30
 8009db0:	4413      	add	r3, r2
 8009db2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009db4:	b2d2      	uxtb	r2, r2
 8009db6:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 8009db8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dba:	0a18      	lsrs	r0, r3, #8
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	681a      	ldr	r2, [r3, #0]
 8009dc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dc2:	1c59      	adds	r1, r3, #1
 8009dc4:	6339      	str	r1, [r7, #48]	@ 0x30
 8009dc6:	4413      	add	r3, r2
 8009dc8:	b2c2      	uxtb	r2, r0
 8009dca:	701a      	strb	r2, [r3, #0]
             q->byteCount += 2;              
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	695b      	ldr	r3, [r3, #20]
 8009dd0:	1c9a      	adds	r2, r3, #2
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	615a      	str	r2, [r3, #20]
 8009dd6:	e001      	b.n	8009ddc <CircularQueue_Add+0x3b0>
          else
          {
            /* Should not occur */
            /* can not manage split Flag on Fixed size element */
            /* Buffer is corrupted */
            return NULL;
 8009dd8:	2300      	movs	r3, #0
 8009dda:	e049      	b.n	8009e70 <CircularQueue_Add+0x444>
          }
        }
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 8009ddc:	7ffb      	ldrb	r3, [r7, #31]
 8009dde:	b29a      	uxth	r2, r3
 8009de0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009de2:	b29b      	uxth	r3, r3
 8009de4:	4413      	add	r3, r2
 8009de6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        q->last = 0;        
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	2200      	movs	r2, #0
 8009dec:	611a      	str	r2, [r3, #16]
      }  
      
      /* some remaining byte to copy */
      if (NbBytesToCopy)      
 8009dee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d015      	beq.n	8009e20 <CircularQueue_Add+0x3f4>
      {
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	681a      	ldr	r2, [r3, #0]
 8009df8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dfa:	18d0      	adds	r0, r2, r3
 8009dfc:	88fb      	ldrh	r3, [r7, #6]
 8009dfe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009e00:	fb03 f202 	mul.w	r2, r3, r2
 8009e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e06:	4413      	add	r3, r2
 8009e08:	68ba      	ldr	r2, [r7, #8]
 8009e0a:	4413      	add	r3, r2
 8009e0c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009e0e:	4619      	mov	r1, r3
 8009e10:	f002 fb27 	bl	800c462 <memcpy>
        q->byteCount += NbBytesToCopy;
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	695a      	ldr	r2, [r3, #20]
 8009e18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e1a:	441a      	add	r2, r3
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	615a      	str	r2, [r3, #20]
      }      
      
      /* One more element */
      q->elementCount++;
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	699b      	ldr	r3, [r3, #24]
 8009e24:	1c5a      	adds	r2, r3, #1
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	619a      	str	r2, [r3, #24]
    for (i=0; i < nbElements; i++) 
 8009e2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e2c:	3301      	adds	r3, #1
 8009e2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009e30:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009e32:	683b      	ldr	r3, [r7, #0]
 8009e34:	429a      	cmp	r2, r3
 8009e36:	f4ff aeb0 	bcc.w	8009b9a <CircularQueue_Add+0x16e>
    }
    
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	681a      	ldr	r2, [r3, #0]
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	6919      	ldr	r1, [r3, #16]
 8009e42:	7ffb      	ldrb	r3, [r7, #31]
 8009e44:	4419      	add	r1, r3
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	685b      	ldr	r3, [r3, #4]
 8009e4a:	4299      	cmp	r1, r3
 8009e4c:	d307      	bcc.n	8009e5e <CircularQueue_Add+0x432>
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	6919      	ldr	r1, [r3, #16]
 8009e52:	7ffb      	ldrb	r3, [r7, #31]
 8009e54:	4419      	add	r1, r3
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	685b      	ldr	r3, [r3, #4]
 8009e5a:	1acb      	subs	r3, r1, r3
 8009e5c:	e003      	b.n	8009e66 <CircularQueue_Add+0x43a>
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	6919      	ldr	r1, [r3, #16]
 8009e62:	7ffb      	ldrb	r3, [r7, #31]
 8009e64:	440b      	add	r3, r1
 8009e66:	4413      	add	r3, r2
 8009e68:	623b      	str	r3, [r7, #32]
  /* for Breakpoint only...to remove */
  else
  {
    return NULL;
  }
  return ptr;
 8009e6a:	6a3b      	ldr	r3, [r7, #32]
 8009e6c:	e000      	b.n	8009e70 <CircularQueue_Add+0x444>
    return NULL;
 8009e6e:	2300      	movs	r3, #0
}
 8009e70:	4618      	mov	r0, r3
 8009e72:	3738      	adds	r7, #56	@ 0x38
 8009e74:	46bd      	mov	sp, r7
 8009e76:	bd80      	pop	{r7, pc}

08009e78 <CircularQueue_Remove>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize: Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on removed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Remove(queue_t *q, uint16_t* elementSize)
{
 8009e78:	b480      	push	{r7}
 8009e7a:	b085      	sub	sp, #20
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
 8009e80:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 8009e82:	2300      	movs	r3, #0
 8009e84:	727b      	strb	r3, [r7, #9]
  uint8_t* ptr= NULL;
 8009e86:	2300      	movs	r3, #0
 8009e88:	60fb      	str	r3, [r7, #12]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	891b      	ldrh	r3, [r3, #8]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d101      	bne.n	8009e96 <CircularQueue_Remove+0x1e>
 8009e92:	2302      	movs	r3, #2
 8009e94:	e000      	b.n	8009e98 <CircularQueue_Remove+0x20>
 8009e96:	2300      	movs	r3, #0
 8009e98:	727b      	strb	r3, [r7, #9]
  uint16_t eltSize = 0;
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	817b      	strh	r3, [r7, #10]
  if (q->byteCount > 0) 
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	695b      	ldr	r3, [r3, #20]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	f000 80ca 	beq.w	800a03c <CircularQueue_Remove+0x1c4>
  {
    /* retrieve element Size */
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	891b      	ldrh	r3, [r3, #8]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d120      	bne.n	8009ef2 <CircularQueue_Remove+0x7a>
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681a      	ldr	r2, [r3, #0]
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	68db      	ldr	r3, [r3, #12]
 8009eb8:	4413      	add	r3, r2
 8009eba:	781b      	ldrb	r3, [r3, #0]
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681a      	ldr	r2, [r3, #0]
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	68db      	ldr	r3, [r3, #12]
 8009ec6:	1c59      	adds	r1, r3, #1
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	685b      	ldr	r3, [r3, #4]
 8009ecc:	4299      	cmp	r1, r3
 8009ece:	d306      	bcc.n	8009ede <CircularQueue_Remove+0x66>
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	68d9      	ldr	r1, [r3, #12]
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	685b      	ldr	r3, [r3, #4]
 8009ed8:	1acb      	subs	r3, r1, r3
 8009eda:	3301      	adds	r3, #1
 8009edc:	e002      	b.n	8009ee4 <CircularQueue_Remove+0x6c>
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	68db      	ldr	r3, [r3, #12]
 8009ee2:	3301      	adds	r3, #1
 8009ee4:	4413      	add	r3, r2
 8009ee6:	781b      	ldrb	r3, [r3, #0]
 8009ee8:	021b      	lsls	r3, r3, #8
 8009eea:	b29b      	uxth	r3, r3
 8009eec:	4403      	add	r3, r0
 8009eee:	b29b      	uxth	r3, r3
 8009ef0:	e001      	b.n	8009ef6 <CircularQueue_Remove+0x7e>
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	891b      	ldrh	r3, [r3, #8]
 8009ef6:	817b      	strh	r3, [r7, #10]

     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	7f1b      	ldrb	r3, [r3, #28]
 8009efc:	f003 0301 	and.w	r3, r3, #1
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d056      	beq.n	8009fb2 <CircularQueue_Remove+0x13a>
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	7f1b      	ldrb	r3, [r3, #28]
 8009f08:	f003 0302 	and.w	r3, r3, #2
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d150      	bne.n	8009fb2 <CircularQueue_Remove+0x13a>
     {
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 8009f10:	897b      	ldrh	r3, [r7, #10]
 8009f12:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009f16:	4293      	cmp	r3, r2
 8009f18:	d103      	bne.n	8009f22 <CircularQueue_Remove+0xaa>
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	891b      	ldrh	r3, [r3, #8]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d012      	beq.n	8009f48 <CircularQueue_Remove+0xd0>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	68da      	ldr	r2, [r3, #12]
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	691b      	ldr	r3, [r3, #16]
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 8009f2a:	429a      	cmp	r2, r3
 8009f2c:	d941      	bls.n	8009fb2 <CircularQueue_Remove+0x13a>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	891b      	ldrh	r3, [r3, #8]
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d03d      	beq.n	8009fb2 <CircularQueue_Remove+0x13a>
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	685a      	ldr	r2, [r3, #4]
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	68db      	ldr	r3, [r3, #12]
 8009f3e:	1ad3      	subs	r3, r2, r3
 8009f40:	687a      	ldr	r2, [r7, #4]
 8009f42:	8912      	ldrh	r2, [r2, #8]
 8009f44:	4293      	cmp	r3, r2
 8009f46:	d234      	bcs.n	8009fb2 <CircularQueue_Remove+0x13a>
       {
          /* all data from current position up to the end of buffer are invalid */
          q->byteCount -= (q->queueMaxSize - q->first);
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	695a      	ldr	r2, [r3, #20]
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	68d9      	ldr	r1, [r3, #12]
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	685b      	ldr	r3, [r3, #4]
 8009f54:	1acb      	subs	r3, r1, r3
 8009f56:	441a      	add	r2, r3
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	615a      	str	r2, [r3, #20]
          /* Adjust first element pos */
          q->first = 0;
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	2200      	movs	r2, #0
 8009f60:	60da      	str	r2, [r3, #12]
          /* retrieve the right size after the wrap [if variable size element] */
          eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	891b      	ldrh	r3, [r3, #8]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d120      	bne.n	8009fac <CircularQueue_Remove+0x134>
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681a      	ldr	r2, [r3, #0]
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	68db      	ldr	r3, [r3, #12]
 8009f72:	4413      	add	r3, r2
 8009f74:	781b      	ldrb	r3, [r3, #0]
 8009f76:	4618      	mov	r0, r3
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681a      	ldr	r2, [r3, #0]
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	68db      	ldr	r3, [r3, #12]
 8009f80:	1c59      	adds	r1, r3, #1
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	685b      	ldr	r3, [r3, #4]
 8009f86:	4299      	cmp	r1, r3
 8009f88:	d306      	bcc.n	8009f98 <CircularQueue_Remove+0x120>
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	68d9      	ldr	r1, [r3, #12]
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	685b      	ldr	r3, [r3, #4]
 8009f92:	1acb      	subs	r3, r1, r3
 8009f94:	3301      	adds	r3, #1
 8009f96:	e002      	b.n	8009f9e <CircularQueue_Remove+0x126>
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	68db      	ldr	r3, [r3, #12]
 8009f9c:	3301      	adds	r3, #1
 8009f9e:	4413      	add	r3, r2
 8009fa0:	781b      	ldrb	r3, [r3, #0]
 8009fa2:	021b      	lsls	r3, r3, #8
 8009fa4:	b29b      	uxth	r3, r3
 8009fa6:	4403      	add	r3, r0
 8009fa8:	b29b      	uxth	r3, r3
 8009faa:	e001      	b.n	8009fb0 <CircularQueue_Remove+0x138>
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	891b      	ldrh	r3, [r3, #8]
 8009fb0:	817b      	strh	r3, [r7, #10]
       }
     }

    /* retrieve element */
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681a      	ldr	r2, [r3, #0]
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	68d9      	ldr	r1, [r3, #12]
 8009fba:	7a7b      	ldrb	r3, [r7, #9]
 8009fbc:	4419      	add	r1, r3
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	685b      	ldr	r3, [r3, #4]
 8009fc2:	4299      	cmp	r1, r3
 8009fc4:	d307      	bcc.n	8009fd6 <CircularQueue_Remove+0x15e>
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	68d9      	ldr	r1, [r3, #12]
 8009fca:	7a7b      	ldrb	r3, [r7, #9]
 8009fcc:	4419      	add	r1, r3
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	685b      	ldr	r3, [r3, #4]
 8009fd2:	1acb      	subs	r3, r1, r3
 8009fd4:	e003      	b.n	8009fde <CircularQueue_Remove+0x166>
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	68d9      	ldr	r1, [r3, #12]
 8009fda:	7a7b      	ldrb	r3, [r7, #9]
 8009fdc:	440b      	add	r3, r1
 8009fde:	4413      	add	r3, r2
 8009fe0:	60fb      	str	r3, [r7, #12]

    /* adjust byte count */
    q->byteCount -= (eltSize + elemSizeStorageRoom) ;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	695b      	ldr	r3, [r3, #20]
 8009fe6:	8979      	ldrh	r1, [r7, #10]
 8009fe8:	7a7a      	ldrb	r2, [r7, #9]
 8009fea:	440a      	add	r2, r1
 8009fec:	1a9a      	subs	r2, r3, r2
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	615a      	str	r2, [r3, #20]
    
    /* Adjust q->first */
    if (q->byteCount > 0)
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	695b      	ldr	r3, [r3, #20]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d01b      	beq.n	800a032 <CircularQueue_Remove+0x1ba>
    {
      q->first = MOD((q->first+ eltSize + elemSizeStorageRoom ), q->queueMaxSize);
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	68da      	ldr	r2, [r3, #12]
 8009ffe:	897b      	ldrh	r3, [r7, #10]
 800a000:	441a      	add	r2, r3
 800a002:	7a7b      	ldrb	r3, [r7, #9]
 800a004:	441a      	add	r2, r3
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	685b      	ldr	r3, [r3, #4]
 800a00a:	429a      	cmp	r2, r3
 800a00c:	d309      	bcc.n	800a022 <CircularQueue_Remove+0x1aa>
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	68da      	ldr	r2, [r3, #12]
 800a012:	897b      	ldrh	r3, [r7, #10]
 800a014:	441a      	add	r2, r3
 800a016:	7a7b      	ldrb	r3, [r7, #9]
 800a018:	441a      	add	r2, r3
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	685b      	ldr	r3, [r3, #4]
 800a01e:	1ad3      	subs	r3, r2, r3
 800a020:	e005      	b.n	800a02e <CircularQueue_Remove+0x1b6>
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	68da      	ldr	r2, [r3, #12]
 800a026:	897b      	ldrh	r3, [r7, #10]
 800a028:	441a      	add	r2, r3
 800a02a:	7a7b      	ldrb	r3, [r7, #9]
 800a02c:	4413      	add	r3, r2
 800a02e:	687a      	ldr	r2, [r7, #4]
 800a030:	60d3      	str	r3, [r2, #12]
    }    
    /* adjust element count */    
    --q->elementCount;    
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	699b      	ldr	r3, [r3, #24]
 800a036:	1e5a      	subs	r2, r3, #1
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	619a      	str	r2, [r3, #24]
  }
  if (elementSize != NULL)
 800a03c:	683b      	ldr	r3, [r7, #0]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d002      	beq.n	800a048 <CircularQueue_Remove+0x1d0>
  {
    *elementSize = eltSize;
 800a042:	683b      	ldr	r3, [r7, #0]
 800a044:	897a      	ldrh	r2, [r7, #10]
 800a046:	801a      	strh	r2, [r3, #0]
  }
  return ptr;
 800a048:	68fb      	ldr	r3, [r7, #12]
}
 800a04a:	4618      	mov	r0, r3
 800a04c:	3714      	adds	r7, #20
 800a04e:	46bd      	mov	sp, r7
 800a050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a054:	4770      	bx	lr

0800a056 <CircularQueue_Sense>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize:  Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on sensed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Sense(queue_t *q, uint16_t* elementSize)
{
 800a056:	b480      	push	{r7}
 800a058:	b087      	sub	sp, #28
 800a05a:	af00      	add	r7, sp, #0
 800a05c:	6078      	str	r0, [r7, #4]
 800a05e:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800a060:	2300      	movs	r3, #0
 800a062:	72fb      	strb	r3, [r7, #11]
  uint8_t* x= NULL;
 800a064:	2300      	movs	r3, #0
 800a066:	617b      	str	r3, [r7, #20]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	891b      	ldrh	r3, [r3, #8]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d101      	bne.n	800a074 <CircularQueue_Sense+0x1e>
 800a070:	2302      	movs	r3, #2
 800a072:	e000      	b.n	800a076 <CircularQueue_Sense+0x20>
 800a074:	2300      	movs	r3, #0
 800a076:	72fb      	strb	r3, [r7, #11]
  uint16_t eltSize = 0;
 800a078:	2300      	movs	r3, #0
 800a07a:	827b      	strh	r3, [r7, #18]
  uint32_t FirstElemetPos = 0;
 800a07c:	2300      	movs	r3, #0
 800a07e:	60fb      	str	r3, [r7, #12]
    
  if (q->byteCount > 0) 
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	695b      	ldr	r3, [r3, #20]
 800a084:	2b00      	cmp	r3, #0
 800a086:	f000 808e 	beq.w	800a1a6 <CircularQueue_Sense+0x150>
  {
    FirstElemetPos = q->first;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	68db      	ldr	r3, [r3, #12]
 800a08e:	60fb      	str	r3, [r7, #12]
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	891b      	ldrh	r3, [r3, #8]
 800a094:	2b00      	cmp	r3, #0
 800a096:	d120      	bne.n	800a0da <CircularQueue_Sense+0x84>
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681a      	ldr	r2, [r3, #0]
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	68db      	ldr	r3, [r3, #12]
 800a0a0:	4413      	add	r3, r2
 800a0a2:	781b      	ldrb	r3, [r3, #0]
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681a      	ldr	r2, [r3, #0]
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	68db      	ldr	r3, [r3, #12]
 800a0ae:	1c59      	adds	r1, r3, #1
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	685b      	ldr	r3, [r3, #4]
 800a0b4:	4299      	cmp	r1, r3
 800a0b6:	d306      	bcc.n	800a0c6 <CircularQueue_Sense+0x70>
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	68d9      	ldr	r1, [r3, #12]
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	685b      	ldr	r3, [r3, #4]
 800a0c0:	1acb      	subs	r3, r1, r3
 800a0c2:	3301      	adds	r3, #1
 800a0c4:	e002      	b.n	800a0cc <CircularQueue_Sense+0x76>
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	68db      	ldr	r3, [r3, #12]
 800a0ca:	3301      	adds	r3, #1
 800a0cc:	4413      	add	r3, r2
 800a0ce:	781b      	ldrb	r3, [r3, #0]
 800a0d0:	021b      	lsls	r3, r3, #8
 800a0d2:	b29b      	uxth	r3, r3
 800a0d4:	4403      	add	r3, r0
 800a0d6:	b29b      	uxth	r3, r3
 800a0d8:	e001      	b.n	800a0de <CircularQueue_Sense+0x88>
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	891b      	ldrh	r3, [r3, #8]
 800a0de:	827b      	strh	r3, [r7, #18]
    
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	7f1b      	ldrb	r3, [r3, #28]
 800a0e4:	f003 0301 	and.w	r3, r3, #1
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d047      	beq.n	800a17c <CircularQueue_Sense+0x126>
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	7f1b      	ldrb	r3, [r3, #28]
 800a0f0:	f003 0302 	and.w	r3, r3, #2
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d141      	bne.n	800a17c <CircularQueue_Sense+0x126>
    { 
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800a0f8:	8a7b      	ldrh	r3, [r7, #18]
 800a0fa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a0fe:	4293      	cmp	r3, r2
 800a100:	d103      	bne.n	800a10a <CircularQueue_Sense+0xb4>
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	891b      	ldrh	r3, [r3, #8]
 800a106:	2b00      	cmp	r3, #0
 800a108:	d012      	beq.n	800a130 <CircularQueue_Sense+0xda>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	68da      	ldr	r2, [r3, #12]
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	691b      	ldr	r3, [r3, #16]
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800a112:	429a      	cmp	r2, r3
 800a114:	d932      	bls.n	800a17c <CircularQueue_Sense+0x126>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	891b      	ldrh	r3, [r3, #8]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d02e      	beq.n	800a17c <CircularQueue_Sense+0x126>
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	685a      	ldr	r2, [r3, #4]
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	68db      	ldr	r3, [r3, #12]
 800a126:	1ad3      	subs	r3, r2, r3
 800a128:	687a      	ldr	r2, [r7, #4]
 800a12a:	8912      	ldrh	r2, [r2, #8]
 800a12c:	4293      	cmp	r3, r2
 800a12e:	d225      	bcs.n	800a17c <CircularQueue_Sense+0x126>

      {
        /* all data from current position up to the end of buffer are invalid */
        FirstElemetPos = 0; /* wrap to the begiining of buffer */
 800a130:	2300      	movs	r3, #0
 800a132:	60fb      	str	r3, [r7, #12]

        /* retrieve the right size after the wrap [if variable size element] */
        eltSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	891b      	ldrh	r3, [r3, #8]
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d11c      	bne.n	800a176 <CircularQueue_Sense+0x120>
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681a      	ldr	r2, [r3, #0]
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	4413      	add	r3, r2
 800a144:	781b      	ldrb	r3, [r3, #0]
 800a146:	4618      	mov	r0, r3
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681a      	ldr	r2, [r3, #0]
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	1c59      	adds	r1, r3, #1
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	685b      	ldr	r3, [r3, #4]
 800a154:	4299      	cmp	r1, r3
 800a156:	d305      	bcc.n	800a164 <CircularQueue_Sense+0x10e>
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	685b      	ldr	r3, [r3, #4]
 800a15c:	68f9      	ldr	r1, [r7, #12]
 800a15e:	1acb      	subs	r3, r1, r3
 800a160:	3301      	adds	r3, #1
 800a162:	e001      	b.n	800a168 <CircularQueue_Sense+0x112>
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	3301      	adds	r3, #1
 800a168:	4413      	add	r3, r2
 800a16a:	781b      	ldrb	r3, [r3, #0]
 800a16c:	021b      	lsls	r3, r3, #8
 800a16e:	b29b      	uxth	r3, r3
 800a170:	4403      	add	r3, r0
 800a172:	b29b      	uxth	r3, r3
 800a174:	e001      	b.n	800a17a <CircularQueue_Sense+0x124>
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	891b      	ldrh	r3, [r3, #8]
 800a17a:	827b      	strh	r3, [r7, #18]
      }
   }
   /* retrieve element */
    x = q->qBuff + (MOD((FirstElemetPos + elemSizeStorageRoom), q->queueMaxSize));
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681a      	ldr	r2, [r3, #0]
 800a180:	7af9      	ldrb	r1, [r7, #11]
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	4419      	add	r1, r3
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	685b      	ldr	r3, [r3, #4]
 800a18a:	4299      	cmp	r1, r3
 800a18c:	d306      	bcc.n	800a19c <CircularQueue_Sense+0x146>
 800a18e:	7af9      	ldrb	r1, [r7, #11]
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	4419      	add	r1, r3
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	685b      	ldr	r3, [r3, #4]
 800a198:	1acb      	subs	r3, r1, r3
 800a19a:	e002      	b.n	800a1a2 <CircularQueue_Sense+0x14c>
 800a19c:	7af9      	ldrb	r1, [r7, #11]
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	440b      	add	r3, r1
 800a1a2:	4413      	add	r3, r2
 800a1a4:	617b      	str	r3, [r7, #20]
  }
  if (elementSize != NULL)
 800a1a6:	683b      	ldr	r3, [r7, #0]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d002      	beq.n	800a1b2 <CircularQueue_Sense+0x15c>
  {
    *elementSize = eltSize;
 800a1ac:	683b      	ldr	r3, [r7, #0]
 800a1ae:	8a7a      	ldrh	r2, [r7, #18]
 800a1b0:	801a      	strh	r2, [r3, #0]
  }
  return x;
 800a1b2:	697b      	ldr	r3, [r7, #20]
}
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	371c      	adds	r7, #28
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1be:	4770      	bx	lr

0800a1c0 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 800a1c0:	b480      	push	{r7}
 800a1c2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 800a1c4:	4b03      	ldr	r3, [pc, #12]	@ (800a1d4 <LL_FLASH_GetUDN+0x14>)
 800a1c6:	681b      	ldr	r3, [r3, #0]
}
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d0:	4770      	bx	lr
 800a1d2:	bf00      	nop
 800a1d4:	1fff7580 	.word	0x1fff7580

0800a1d8 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 800a1d8:	b480      	push	{r7}
 800a1da:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 800a1dc:	4b03      	ldr	r3, [pc, #12]	@ (800a1ec <LL_FLASH_GetDeviceID+0x14>)
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	b2db      	uxtb	r3, r3
}
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ea:	4770      	bx	lr
 800a1ec:	1fff7584 	.word	0x1fff7584

0800a1f0 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 800a1f0:	b480      	push	{r7}
 800a1f2:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 800a1f4:	4b03      	ldr	r3, [pc, #12]	@ (800a204 <LL_FLASH_GetSTCompanyID+0x14>)
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	0a1b      	lsrs	r3, r3, #8
}
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a202:	4770      	bx	lr
 800a204:	1fff7584 	.word	0x1fff7584

0800a208 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 800a208:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a20a:	b0b1      	sub	sp, #196	@ 0xc4
 800a20c:	af04      	add	r7, sp, #16
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800a20e:	2392      	movs	r3, #146	@ 0x92
 800a210:	f887 30ab 	strb.w	r3, [r7, #171]	@ 0xab
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */
  WirelessFwInfo_t wireless_info_instance;
  WirelessFwInfo_t *p_wireless_info = &wireless_info_instance;  
 800a214:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800a218:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  char BdAddress[20];
  char StackVersion[23];
  char StackBranch[20];
  char FusVersion[20];
  const uint8_t *bdaddr=0;  
 800a21c:	2300      	movs	r3, #0
 800a21e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 800a222:	4b87      	ldr	r3, [pc, #540]	@ (800a440 <APP_BLE_Init+0x238>)
 800a224:	463c      	mov	r4, r7
 800a226:	461d      	mov	r5, r3
 800a228:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a22a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a22c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a22e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a230:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a232:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a234:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a238:	c403      	stmia	r4!, {r0, r1}
 800a23a:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 800a23c:	f000 fcb2 	bl	800aba4 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 800a240:	2101      	movs	r1, #1
 800a242:	2002      	movs	r0, #2
 800a244:	f001 fc1c 	bl	800ba80 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 800a248:	4a7e      	ldr	r2, [pc, #504]	@ (800a444 <APP_BLE_Init+0x23c>)
 800a24a:	2100      	movs	r1, #0
 800a24c:	2004      	movs	r0, #4
 800a24e:	f001 fd43 	bl	800bcd8 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 800a252:	463b      	mov	r3, r7
 800a254:	4618      	mov	r0, r3
 800a256:	f7fe fc55 	bl	8008b04 <SHCI_C2_BLE_Init>
 800a25a:	4603      	mov	r3, r0
 800a25c:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
  if (status != SHCI_Success)
 800a260:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800a264:	2b00      	cmp	r3, #0
 800a266:	d008      	beq.n	800a27a <APP_BLE_Init+0x72>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
 800a268:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800a26c:	4619      	mov	r1, r3
 800a26e:	4876      	ldr	r0, [pc, #472]	@ (800a448 <APP_BLE_Init+0x240>)
 800a270:	f001 ff12 	bl	800c098 <iprintf>
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 800a274:	f7f8 f945 	bl	8002502 <Error_Handler>
 800a278:	e002      	b.n	800a280 <APP_BLE_Init+0x78>
  }
  else
  {
    APP_DBG_MSG("  Success: SHCI_C2_BLE_Init command\n\r");
 800a27a:	4874      	ldr	r0, [pc, #464]	@ (800a44c <APP_BLE_Init+0x244>)
 800a27c:	f001 ff0c 	bl	800c098 <iprintf>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 800a280:	f000 fca6 	bl	800abd0 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 800a284:	f7fe fb98 	bl	80089b8 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800a288:	4b71      	ldr	r3, [pc, #452]	@ (800a450 <APP_BLE_Init+0x248>)
 800a28a:	2200      	movs	r2, #0
 800a28c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 800a290:	4b6f      	ldr	r3, [pc, #444]	@ (800a450 <APP_BLE_Init+0x248>)
 800a292:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a296:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 800a298:	4a6e      	ldr	r2, [pc, #440]	@ (800a454 <APP_BLE_Init+0x24c>)
 800a29a:	2100      	movs	r1, #0
 800a29c:	2001      	movs	r0, #1
 800a29e:	f001 fd1b 	bl	800bcd8 <UTIL_SEQ_RegTask>
#if (L2CAP_REQUEST_NEW_CONN_PARAM != 0)
  UTIL_SEQ_RegTask(1<<CFG_TASK_CONN_UPDATE_REG_ID, UTIL_SEQ_RFU, Connection_Interval_Update_Req);
 800a2a2:	4a6d      	ldr	r2, [pc, #436]	@ (800a458 <APP_BLE_Init+0x250>)
 800a2a4:	2100      	movs	r1, #0
 800a2a6:	2002      	movs	r0, #2
 800a2a8:	f001 fd16 	bl	800bcd8 <UTIL_SEQ_RegTask>
#if (BLE_CFG_OTA_REBOOT_CHAR != 0)
  a_ManufData[sizeof(a_ManufData)-8] = CFG_FEATURE_OTA_REBOOT;
#endif /* BLE_CFG_OTA_REBOOT_CHAR != 0 */

#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 800a2ac:	2006      	movs	r0, #6
 800a2ae:	f7fd ffcf 	bl	8008250 <aci_hal_set_radio_activity_mask>
 800a2b2:	4603      	mov	r3, r0
 800a2b4:	f887 30ab 	strb.w	r3, [r7, #171]	@ 0xab
  if (ret != BLE_STATUS_SUCCESS)
 800a2b8:	f897 30ab 	ldrb.w	r3, [r7, #171]	@ 0xab
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d006      	beq.n	800a2ce <APP_BLE_Init+0xc6>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_radio_activity_mask command, result: 0x%x \n\r", ret);
 800a2c0:	f897 30ab 	ldrb.w	r3, [r7, #171]	@ 0xab
 800a2c4:	4619      	mov	r1, r3
 800a2c6:	4865      	ldr	r0, [pc, #404]	@ (800a45c <APP_BLE_Init+0x254>)
 800a2c8:	f001 fee6 	bl	800c098 <iprintf>
 800a2cc:	e002      	b.n	800a2d4 <APP_BLE_Init+0xcc>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_radio_activity_mask command\n\r");
 800a2ce:	4864      	ldr	r0, [pc, #400]	@ (800a460 <APP_BLE_Init+0x258>)
 800a2d0:	f001 fee2 	bl	800c098 <iprintf>
  }
#endif /* RADIO_ACTIVITY_EVENT != 0 */

#if (L2CAP_REQUEST_NEW_CONN_PARAM != 0)
  index_con_int = 0;
 800a2d4:	4b63      	ldr	r3, [pc, #396]	@ (800a464 <APP_BLE_Init+0x25c>)
 800a2d6:	2200      	movs	r2, #0
 800a2d8:	701a      	strb	r2, [r3, #0]
  mutex = 1;
 800a2da:	4b63      	ldr	r3, [pc, #396]	@ (800a468 <APP_BLE_Init+0x260>)
 800a2dc:	2201      	movs	r2, #1
 800a2de:	701a      	strb	r2, [r3, #0]
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize P2P Server Application
   */
  P2PS_APP_Init();
 800a2e0:	f001 f8bc 	bl	800b45c <P2PS_APP_Init>

  /* USER CODE BEGIN APP_BLE_Init_3 */
  Add_EEG_Stream_Notify_Service();
 800a2e4:	f000 f8d6 	bl	800a494 <Add_EEG_Stream_Notify_Service>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Create timer to handle the Advertising Stop
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.Advertising_mgr_timer_Id), hw_ts_SingleShot, Adv_Cancel_Req);
 800a2e8:	4b60      	ldr	r3, [pc, #384]	@ (800a46c <APP_BLE_Init+0x264>)
 800a2ea:	2200      	movs	r2, #0
 800a2ec:	4960      	ldr	r1, [pc, #384]	@ (800a470 <APP_BLE_Init+0x268>)
 800a2ee:	2000      	movs	r0, #0
 800a2f0:	f7f7 fc12 	bl	8001b18 <HW_TS_Create>
  /**
   * Create timer to handle the Led Switch OFF
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.SwitchOffGPIO_timer_Id), hw_ts_SingleShot, Switch_OFF_GPIO);
 800a2f4:	4b5f      	ldr	r3, [pc, #380]	@ (800a474 <APP_BLE_Init+0x26c>)
 800a2f6:	2200      	movs	r2, #0
 800a2f8:	495f      	ldr	r1, [pc, #380]	@ (800a478 <APP_BLE_Init+0x270>)
 800a2fa:	2000      	movs	r0, #0
 800a2fc:	f7f7 fc0c 	bl	8001b18 <HW_TS_Create>

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 800a300:	4b53      	ldr	r3, [pc, #332]	@ (800a450 <APP_BLE_Init+0x248>)
 800a302:	2200      	movs	r2, #0
 800a304:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 800a306:	4b52      	ldr	r3, [pc, #328]	@ (800a450 <APP_BLE_Init+0x248>)
 800a308:	2200      	movs	r2, #0
 800a30a:	761a      	strb	r2, [r3, #24]

  /* Initialize intervals for reconnexion without intervals update */
  AdvIntervalMin = CFG_FAST_CONN_ADV_INTERVAL_MIN;
 800a30c:	4b5b      	ldr	r3, [pc, #364]	@ (800a47c <APP_BLE_Init+0x274>)
 800a30e:	2280      	movs	r2, #128	@ 0x80
 800a310:	801a      	strh	r2, [r3, #0]
  AdvIntervalMax = CFG_FAST_CONN_ADV_INTERVAL_MAX;
 800a312:	4b5b      	ldr	r3, [pc, #364]	@ (800a480 <APP_BLE_Init+0x278>)
 800a314:	22a0      	movs	r2, #160	@ 0xa0
 800a316:	801a      	strh	r2, [r3, #0]

  /**
   * Start to Advertise to be connected by P2P Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 800a318:	2001      	movs	r0, #1
 800a31a:	f000 fe09 	bl	800af30 <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */
   /* Displays the board information: MAC Address, Stack version, FUS version*/ 
   if (SHCI_GetWirelessFwInfo(p_wireless_info) != SHCI_Success)
 800a31e:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 800a322:	f7fe fc33 	bl	8008b8c <SHCI_GetWirelessFwInfo>
 800a326:	4603      	mov	r3, r0
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d15a      	bne.n	800a3e2 <APP_BLE_Init+0x1da>
   {
     // Error
   }
   else
   {
     bdaddr= BleGetBdAddress();
 800a32c:	f000 feac 	bl	800b088 <BleGetBdAddress>
 800a330:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
     sprintf(BdAddress, "BD_ad=%02x%02x%02x%02x%02x%02x", bdaddr[5],bdaddr[4],bdaddr[3],bdaddr[2],bdaddr[1],bdaddr[0]);
 800a334:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a338:	3305      	adds	r3, #5
 800a33a:	781b      	ldrb	r3, [r3, #0]
 800a33c:	461d      	mov	r5, r3
 800a33e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a342:	3304      	adds	r3, #4
 800a344:	781b      	ldrb	r3, [r3, #0]
 800a346:	461e      	mov	r6, r3
 800a348:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a34c:	3303      	adds	r3, #3
 800a34e:	781b      	ldrb	r3, [r3, #0]
 800a350:	461a      	mov	r2, r3
 800a352:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a356:	3302      	adds	r3, #2
 800a358:	781b      	ldrb	r3, [r3, #0]
 800a35a:	4619      	mov	r1, r3
 800a35c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a360:	3301      	adds	r3, #1
 800a362:	781b      	ldrb	r3, [r3, #0]
 800a364:	461c      	mov	r4, r3
 800a366:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a36a:	781b      	ldrb	r3, [r3, #0]
 800a36c:	f107 007c 	add.w	r0, r7, #124	@ 0x7c
 800a370:	9303      	str	r3, [sp, #12]
 800a372:	9402      	str	r4, [sp, #8]
 800a374:	9101      	str	r1, [sp, #4]
 800a376:	9200      	str	r2, [sp, #0]
 800a378:	4633      	mov	r3, r6
 800a37a:	462a      	mov	r2, r5
 800a37c:	4941      	ldr	r1, [pc, #260]	@ (800a484 <APP_BLE_Init+0x27c>)
 800a37e:	f001 ff03 	bl	800c188 <siprintf>
     sprintf(StackVersion, "BLE Stack=v%d.%d.%d", p_wireless_info->VersionMajor, p_wireless_info->VersionMinor, p_wireless_info->VersionSub);
 800a382:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a386:	781b      	ldrb	r3, [r3, #0]
 800a388:	461a      	mov	r2, r3
 800a38a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a38e:	785b      	ldrb	r3, [r3, #1]
 800a390:	4619      	mov	r1, r3
 800a392:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a396:	789b      	ldrb	r3, [r3, #2]
 800a398:	f107 0064 	add.w	r0, r7, #100	@ 0x64
 800a39c:	9300      	str	r3, [sp, #0]
 800a39e:	460b      	mov	r3, r1
 800a3a0:	4939      	ldr	r1, [pc, #228]	@ (800a488 <APP_BLE_Init+0x280>)
 800a3a2:	f001 fef1 	bl	800c188 <siprintf>
     sprintf(StackBranch, "Branch=%d Type=%d", p_wireless_info->VersionBranch, p_wireless_info->VersionReleaseType);
 800a3a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a3aa:	78db      	ldrb	r3, [r3, #3]
 800a3ac:	461a      	mov	r2, r3
 800a3ae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a3b2:	791b      	ldrb	r3, [r3, #4]
 800a3b4:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 800a3b8:	4934      	ldr	r1, [pc, #208]	@ (800a48c <APP_BLE_Init+0x284>)
 800a3ba:	f001 fee5 	bl	800c188 <siprintf>
     sprintf(FusVersion, "FUS v%d.%d.%d", p_wireless_info->FusVersionMajor, p_wireless_info->FusVersionMinor, p_wireless_info->FusVersionSub);
 800a3be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a3c2:	7a9b      	ldrb	r3, [r3, #10]
 800a3c4:	461a      	mov	r2, r3
 800a3c6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a3ca:	7adb      	ldrb	r3, [r3, #11]
 800a3cc:	4619      	mov	r1, r3
 800a3ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a3d2:	7b1b      	ldrb	r3, [r3, #12]
 800a3d4:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 800a3d8:	9300      	str	r3, [sp, #0]
 800a3da:	460b      	mov	r3, r1
 800a3dc:	492c      	ldr	r1, [pc, #176]	@ (800a490 <APP_BLE_Init+0x288>)
 800a3de:	f001 fed3 	bl	800c188 <siprintf>
     
   }
   HAL_Delay(4000);
 800a3e2:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 800a3e6:	f7f6 fe2f 	bl	8001048 <HAL_Delay>
   /* Displays Application */
   
   sprintf(BdAddress, "BD_ad=%02x%02x%02x%02x%02x%02x", bdaddr[5],bdaddr[4],bdaddr[3],bdaddr[2],bdaddr[1],bdaddr[0]);
 800a3ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a3ee:	3305      	adds	r3, #5
 800a3f0:	781b      	ldrb	r3, [r3, #0]
 800a3f2:	461d      	mov	r5, r3
 800a3f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a3f8:	3304      	adds	r3, #4
 800a3fa:	781b      	ldrb	r3, [r3, #0]
 800a3fc:	461e      	mov	r6, r3
 800a3fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a402:	3303      	adds	r3, #3
 800a404:	781b      	ldrb	r3, [r3, #0]
 800a406:	461a      	mov	r2, r3
 800a408:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a40c:	3302      	adds	r3, #2
 800a40e:	781b      	ldrb	r3, [r3, #0]
 800a410:	4619      	mov	r1, r3
 800a412:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a416:	3301      	adds	r3, #1
 800a418:	781b      	ldrb	r3, [r3, #0]
 800a41a:	461c      	mov	r4, r3
 800a41c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a420:	781b      	ldrb	r3, [r3, #0]
 800a422:	f107 007c 	add.w	r0, r7, #124	@ 0x7c
 800a426:	9303      	str	r3, [sp, #12]
 800a428:	9402      	str	r4, [sp, #8]
 800a42a:	9101      	str	r1, [sp, #4]
 800a42c:	9200      	str	r2, [sp, #0]
 800a42e:	4633      	mov	r3, r6
 800a430:	462a      	mov	r2, r5
 800a432:	4914      	ldr	r1, [pc, #80]	@ (800a484 <APP_BLE_Init+0x27c>)
 800a434:	f001 fea8 	bl	800c188 <siprintf>

  /* USER CODE END APP_BLE_Init_2 */

  return;
 800a438:	bf00      	nop
}
 800a43a:	37b4      	adds	r7, #180	@ 0xb4
 800a43c:	46bd      	mov	sp, r7
 800a43e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a440:	0800d7f8 	.word	0x0800d7f8
 800a444:	08008d21 	.word	0x08008d21
 800a448:	0800d6c4 	.word	0x0800d6c4
 800a44c:	0800d6fc 	.word	0x0800d6fc
 800a450:	200003cc 	.word	0x200003cc
 800a454:	0800b111 	.word	0x0800b111
 800a458:	0800b251 	.word	0x0800b251
 800a45c:	0800d724 	.word	0x0800d724
 800a460:	0800d768 	.word	0x0800d768
 800a464:	2000045c 	.word	0x2000045c
 800a468:	2000045d 	.word	0x2000045d
 800a46c:	0800b169 	.word	0x0800b169
 800a470:	2000044d 	.word	0x2000044d
 800a474:	0800b179 	.word	0x0800b179
 800a478:	2000044e 	.word	0x2000044e
 800a47c:	20000454 	.word	0x20000454
 800a480:	20000456 	.word	0x20000456
 800a484:	0800d7a0 	.word	0x0800d7a0
 800a488:	0800d7c0 	.word	0x0800d7c0
 800a48c:	0800d7d4 	.word	0x0800d7d4
 800a490:	0800d7e8 	.word	0x0800d7e8

0800a494 <Add_EEG_Stream_Notify_Service>:




static tBleStatus Add_EEG_Stream_Notify_Service(void)
{
 800a494:	b580      	push	{r7, lr}
 800a496:	b090      	sub	sp, #64	@ 0x40
 800a498:	af06      	add	r7, sp, #24
    tBleStatus ret = BLE_STATUS_SUCCESS;
 800a49a:	2300      	movs	r3, #0
 800a49c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    uint8_t eeg_service_uuid[16];
    uint8_t eeg_stream_char_uuid[16];

    // Add service
    COPY_EEG_SERVICE_UUID(eeg_service_uuid);
 800a4a0:	231b      	movs	r3, #27
 800a4a2:	753b      	strb	r3, [r7, #20]
 800a4a4:	23c5      	movs	r3, #197	@ 0xc5
 800a4a6:	757b      	strb	r3, [r7, #21]
 800a4a8:	23d5      	movs	r3, #213	@ 0xd5
 800a4aa:	75bb      	strb	r3, [r7, #22]
 800a4ac:	23a5      	movs	r3, #165	@ 0xa5
 800a4ae:	75fb      	strb	r3, [r7, #23]
 800a4b0:	2302      	movs	r3, #2
 800a4b2:	763b      	strb	r3, [r7, #24]
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	767b      	strb	r3, [r7, #25]
 800a4b8:	2351      	movs	r3, #81	@ 0x51
 800a4ba:	76bb      	strb	r3, [r7, #26]
 800a4bc:	23a1      	movs	r3, #161	@ 0xa1
 800a4be:	76fb      	strb	r3, [r7, #27]
 800a4c0:	23e5      	movs	r3, #229	@ 0xe5
 800a4c2:	773b      	strb	r3, [r7, #28]
 800a4c4:	2311      	movs	r3, #17
 800a4c6:	777b      	strb	r3, [r7, #29]
 800a4c8:	2367      	movs	r3, #103	@ 0x67
 800a4ca:	77bb      	strb	r3, [r7, #30]
 800a4cc:	2349      	movs	r3, #73	@ 0x49
 800a4ce:	77fb      	strb	r3, [r7, #31]
 800a4d0:	23e0      	movs	r3, #224	@ 0xe0
 800a4d2:	f887 3020 	strb.w	r3, [r7, #32]
 800a4d6:	2380      	movs	r3, #128	@ 0x80
 800a4d8:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
 800a4dc:	23a4      	movs	r3, #164	@ 0xa4
 800a4de:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800a4e2:	239f      	movs	r3, #159	@ 0x9f
 800a4e4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    ret = aci_gatt_add_service(UUID_TYPE_128,
 800a4e8:	f107 0114 	add.w	r1, r7, #20
 800a4ec:	4b30      	ldr	r3, [pc, #192]	@ (800a5b0 <Add_EEG_Stream_Notify_Service+0x11c>)
 800a4ee:	9300      	str	r3, [sp, #0]
 800a4f0:	2305      	movs	r3, #5
 800a4f2:	2201      	movs	r2, #1
 800a4f4:	2002      	movs	r0, #2
 800a4f6:	f7fd fae3 	bl	8007ac0 <aci_gatt_add_service>
 800a4fa:	4603      	mov	r3, r0
 800a4fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                              (Service_UUID_t *) eeg_service_uuid,
                              PRIMARY_SERVICE,
                              2 + 3, /* 2 for service + 3 for characteristic */
                              &(BleApplicationContext.BleApplicationContext_legacy.eeg_service_handle));

    if (ret != BLE_STATUS_SUCCESS)
 800a500:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a504:	2b00      	cmp	r3, #0
 800a506:	d008      	beq.n	800a51a <Add_EEG_Stream_Notify_Service+0x86>
    {
        APP_DBG_MSG("Error adding New Notify Service - ret=0x%x\n", ret);
 800a508:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a50c:	4619      	mov	r1, r3
 800a50e:	4829      	ldr	r0, [pc, #164]	@ (800a5b4 <Add_EEG_Stream_Notify_Service+0x120>)
 800a510:	f001 fdc2 	bl	800c098 <iprintf>
        return ret;
 800a514:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a518:	e045      	b.n	800a5a6 <Add_EEG_Stream_Notify_Service+0x112>
    }

    // Add characteristic
    COPY_EEG_DATA_UUID(eeg_stream_char_uuid);
 800a51a:	231b      	movs	r3, #27
 800a51c:	713b      	strb	r3, [r7, #4]
 800a51e:	23c5      	movs	r3, #197	@ 0xc5
 800a520:	717b      	strb	r3, [r7, #5]
 800a522:	23d5      	movs	r3, #213	@ 0xd5
 800a524:	71bb      	strb	r3, [r7, #6]
 800a526:	23a5      	movs	r3, #165	@ 0xa5
 800a528:	71fb      	strb	r3, [r7, #7]
 800a52a:	2302      	movs	r3, #2
 800a52c:	723b      	strb	r3, [r7, #8]
 800a52e:	2300      	movs	r3, #0
 800a530:	727b      	strb	r3, [r7, #9]
 800a532:	2351      	movs	r3, #81	@ 0x51
 800a534:	72bb      	strb	r3, [r7, #10]
 800a536:	23a1      	movs	r3, #161	@ 0xa1
 800a538:	72fb      	strb	r3, [r7, #11]
 800a53a:	23e5      	movs	r3, #229	@ 0xe5
 800a53c:	733b      	strb	r3, [r7, #12]
 800a53e:	2311      	movs	r3, #17
 800a540:	737b      	strb	r3, [r7, #13]
 800a542:	2367      	movs	r3, #103	@ 0x67
 800a544:	73bb      	strb	r3, [r7, #14]
 800a546:	2349      	movs	r3, #73	@ 0x49
 800a548:	73fb      	strb	r3, [r7, #15]
 800a54a:	23e1      	movs	r3, #225	@ 0xe1
 800a54c:	743b      	strb	r3, [r7, #16]
 800a54e:	2380      	movs	r3, #128	@ 0x80
 800a550:	747b      	strb	r3, [r7, #17]
 800a552:	23a4      	movs	r3, #164	@ 0xa4
 800a554:	74bb      	strb	r3, [r7, #18]
 800a556:	239f      	movs	r3, #159	@ 0x9f
 800a558:	74fb      	strb	r3, [r7, #19]
    ret = aci_gatt_add_char(BleApplicationContext.BleApplicationContext_legacy.eeg_service_handle,
 800a55a:	4b17      	ldr	r3, [pc, #92]	@ (800a5b8 <Add_EEG_Stream_Notify_Service+0x124>)
 800a55c:	f8b3 007e 	ldrh.w	r0, [r3, #126]	@ 0x7e
 800a560:	1d3a      	adds	r2, r7, #4
 800a562:	4b16      	ldr	r3, [pc, #88]	@ (800a5bc <Add_EEG_Stream_Notify_Service+0x128>)
 800a564:	9305      	str	r3, [sp, #20]
 800a566:	2301      	movs	r3, #1
 800a568:	9304      	str	r3, [sp, #16]
 800a56a:	230a      	movs	r3, #10
 800a56c:	9303      	str	r3, [sp, #12]
 800a56e:	2301      	movs	r3, #1
 800a570:	9302      	str	r3, [sp, #8]
 800a572:	2300      	movs	r3, #0
 800a574:	9301      	str	r3, [sp, #4]
 800a576:	2310      	movs	r3, #16
 800a578:	9300      	str	r3, [sp, #0]
 800a57a:	23f1      	movs	r3, #241	@ 0xf1
 800a57c:	2102      	movs	r1, #2
 800a57e:	f7fd fb75 	bl	8007c6c <aci_gatt_add_char>
 800a582:	4603      	mov	r3, r0
 800a584:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                           GATT_NOTIFY_ATTRIBUTE_WRITE,
                           10,
                           CHAR_VALUE_LEN_VARIABLE,
                           &(BleApplicationContext.eeg_data_char_handle));

    if (ret != BLE_STATUS_SUCCESS)
 800a588:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d008      	beq.n	800a5a2 <Add_EEG_Stream_Notify_Service+0x10e>
    {
        APP_DBG_MSG("Error adding New Notify Characteristic - ret=0x%x\n", ret);
 800a590:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a594:	4619      	mov	r1, r3
 800a596:	480a      	ldr	r0, [pc, #40]	@ (800a5c0 <Add_EEG_Stream_Notify_Service+0x12c>)
 800a598:	f001 fd7e 	bl	800c098 <iprintf>
        return ret;
 800a59c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a5a0:	e001      	b.n	800a5a6 <Add_EEG_Stream_Notify_Service+0x112>
    }


    return ret;
 800a5a2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	3728      	adds	r7, #40	@ 0x28
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	bd80      	pop	{r7, pc}
 800a5ae:	bf00      	nop
 800a5b0:	2000044a 	.word	0x2000044a
 800a5b4:	0800d834 	.word	0x0800d834
 800a5b8:	200003cc 	.word	0x200003cc
 800a5bc:	20000450 	.word	0x20000450
 800a5c0:	0800d860 	.word	0x0800d860

0800a5c4 <SVCCTL_App_Notification>:




SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 800a5c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a5c6:	b097      	sub	sp, #92	@ 0x5c
 800a5c8:	af04      	add	r7, sp, #16
 800a5ca:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  uint8_t           Tx_phy, Rx_phy;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 800a5cc:	2392      	movs	r3, #146	@ 0x92
 800a5ce:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  /* USER CODE BEGIN SVCCTL_App_Notification */
    char BdAddress[20];
    const uint8_t *bdaddr; 
  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	3301      	adds	r3, #1
 800a5d6:	643b      	str	r3, [r7, #64]	@ 0x40

  switch (p_event_pckt->evt)
 800a5d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a5da:	781b      	ldrb	r3, [r3, #0]
 800a5dc:	2bff      	cmp	r3, #255	@ 0xff
 800a5de:	f000 8189 	beq.w	800a8f4 <SVCCTL_App_Notification+0x330>
 800a5e2:	2bff      	cmp	r3, #255	@ 0xff
 800a5e4:	f300 8275 	bgt.w	800aad2 <SVCCTL_App_Notification+0x50e>
 800a5e8:	2b05      	cmp	r3, #5
 800a5ea:	d002      	beq.n	800a5f2 <SVCCTL_App_Notification+0x2e>
 800a5ec:	2b3e      	cmp	r3, #62	@ 0x3e
 800a5ee:	d052      	beq.n	800a696 <SVCCTL_App_Notification+0xd2>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 800a5f0:	e26f      	b.n	800aad2 <SVCCTL_App_Notification+0x50e>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 800a5f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a5f4:	3302      	adds	r3, #2
 800a5f6:	623b      	str	r3, [r7, #32]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 800a5f8:	6a3b      	ldr	r3, [r7, #32]
 800a5fa:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800a5fe:	b29a      	uxth	r2, r3
 800a600:	4bac      	ldr	r3, [pc, #688]	@ (800a8b4 <SVCCTL_App_Notification+0x2f0>)
 800a602:	8adb      	ldrh	r3, [r3, #22]
 800a604:	429a      	cmp	r2, r3
 800a606:	d114      	bne.n	800a632 <SVCCTL_App_Notification+0x6e>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 800a608:	4baa      	ldr	r3, [pc, #680]	@ (800a8b4 <SVCCTL_App_Notification+0x2f0>)
 800a60a:	2200      	movs	r2, #0
 800a60c:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800a60e:	4ba9      	ldr	r3, [pc, #676]	@ (800a8b4 <SVCCTL_App_Notification+0x2f0>)
 800a610:	2200      	movs	r2, #0
 800a612:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
        APP_DBG_MSG(">>== HCI_DISCONNECTION_COMPLETE_EVT_CODE\n");
 800a616:	48a8      	ldr	r0, [pc, #672]	@ (800a8b8 <SVCCTL_App_Notification+0x2f4>)
 800a618:	f001 fdae 	bl	800c178 <puts>
                    p_disconnection_complete_event->Connection_Handle,
 800a61c:	6a3b      	ldr	r3, [r7, #32]
 800a61e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800a622:	b29b      	uxth	r3, r3
        APP_DBG_MSG("     - Connection Handle:   0x%x\n     - Reason:    0x%x\n\r",
 800a624:	4619      	mov	r1, r3
                    p_disconnection_complete_event->Reason);
 800a626:	6a3b      	ldr	r3, [r7, #32]
 800a628:	78db      	ldrb	r3, [r3, #3]
        APP_DBG_MSG("     - Connection Handle:   0x%x\n     - Reason:    0x%x\n\r",
 800a62a:	461a      	mov	r2, r3
 800a62c:	48a3      	ldr	r0, [pc, #652]	@ (800a8bc <SVCCTL_App_Notification+0x2f8>)
 800a62e:	f001 fd33 	bl	800c098 <iprintf>
      Adv_Request(APP_BLE_FAST_ADV);
 800a632:	2001      	movs	r0, #1
 800a634:	f000 fc7c 	bl	800af30 <Adv_Request>
      HandleNotification.P2P_Evt_Opcode = PEER_DISCON_HANDLE_EVT;
 800a638:	4ba1      	ldr	r3, [pc, #644]	@ (800a8c0 <SVCCTL_App_Notification+0x2fc>)
 800a63a:	2201      	movs	r2, #1
 800a63c:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800a63e:	4b9d      	ldr	r3, [pc, #628]	@ (800a8b4 <SVCCTL_App_Notification+0x2f0>)
 800a640:	8ada      	ldrh	r2, [r3, #22]
 800a642:	4b9f      	ldr	r3, [pc, #636]	@ (800a8c0 <SVCCTL_App_Notification+0x2fc>)
 800a644:	805a      	strh	r2, [r3, #2]
      P2PS_APP_Notification(&HandleNotification);
 800a646:	489e      	ldr	r0, [pc, #632]	@ (800a8c0 <SVCCTL_App_Notification+0x2fc>)
 800a648:	f000 fef4 	bl	800b434 <P2PS_APP_Notification>
      bdaddr= BleGetBdAddress();
 800a64c:	f000 fd1c 	bl	800b088 <BleGetBdAddress>
 800a650:	6278      	str	r0, [r7, #36]	@ 0x24
      sprintf(BdAddress, "BD_ad=%02x%02x%02x%02x%02x%02x", bdaddr[5], bdaddr[4], bdaddr[3], bdaddr[2], bdaddr[1], bdaddr[0]);
 800a652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a654:	3305      	adds	r3, #5
 800a656:	781b      	ldrb	r3, [r3, #0]
 800a658:	461d      	mov	r5, r3
 800a65a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a65c:	3304      	adds	r3, #4
 800a65e:	781b      	ldrb	r3, [r3, #0]
 800a660:	461e      	mov	r6, r3
 800a662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a664:	3303      	adds	r3, #3
 800a666:	781b      	ldrb	r3, [r3, #0]
 800a668:	461a      	mov	r2, r3
 800a66a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a66c:	3302      	adds	r3, #2
 800a66e:	781b      	ldrb	r3, [r3, #0]
 800a670:	4619      	mov	r1, r3
 800a672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a674:	3301      	adds	r3, #1
 800a676:	781b      	ldrb	r3, [r3, #0]
 800a678:	461c      	mov	r4, r3
 800a67a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a67c:	781b      	ldrb	r3, [r3, #0]
 800a67e:	f107 0008 	add.w	r0, r7, #8
 800a682:	9303      	str	r3, [sp, #12]
 800a684:	9402      	str	r4, [sp, #8]
 800a686:	9101      	str	r1, [sp, #4]
 800a688:	9200      	str	r2, [sp, #0]
 800a68a:	4633      	mov	r3, r6
 800a68c:	462a      	mov	r2, r5
 800a68e:	498d      	ldr	r1, [pc, #564]	@ (800a8c4 <SVCCTL_App_Notification+0x300>)
 800a690:	f001 fd7a 	bl	800c188 <siprintf>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 800a694:	e220      	b.n	800aad8 <SVCCTL_App_Notification+0x514>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 800a696:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a698:	3302      	adds	r3, #2
 800a69a:	637b      	str	r3, [r7, #52]	@ 0x34
      switch (p_meta_evt->subevent)
 800a69c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a69e:	781b      	ldrb	r3, [r3, #0]
 800a6a0:	2b0c      	cmp	r3, #12
 800a6a2:	d033      	beq.n	800a70c <SVCCTL_App_Notification+0x148>
 800a6a4:	2b0c      	cmp	r3, #12
 800a6a6:	f300 8102 	bgt.w	800a8ae <SVCCTL_App_Notification+0x2ea>
 800a6aa:	2b01      	cmp	r3, #1
 800a6ac:	d06c      	beq.n	800a788 <SVCCTL_App_Notification+0x1c4>
 800a6ae:	2b03      	cmp	r3, #3
 800a6b0:	f040 80fd 	bne.w	800a8ae <SVCCTL_App_Notification+0x2ea>
          p_connection_update_complete_event = (hci_le_connection_update_complete_event_rp0 *) p_meta_evt->data;
 800a6b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6b6:	3301      	adds	r3, #1
 800a6b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_UPDATE_COMPLETE_SUBEVT_CODE\n");
 800a6ba:	4883      	ldr	r0, [pc, #524]	@ (800a8c8 <SVCCTL_App_Notification+0x304>)
 800a6bc:	f001 fd5c 	bl	800c178 <puts>
                       p_connection_update_complete_event->Conn_Interval*1.25,
 800a6c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6c2:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800a6c6:	b29b      	uxth	r3, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	f7f6 f82d 	bl	8000728 <__aeabi_i2d>
 800a6ce:	f04f 0200 	mov.w	r2, #0
 800a6d2:	4b7e      	ldr	r3, [pc, #504]	@ (800a8cc <SVCCTL_App_Notification+0x308>)
 800a6d4:	f7f5 fdac 	bl	8000230 <__aeabi_dmul>
 800a6d8:	4602      	mov	r2, r0
 800a6da:	460b      	mov	r3, r1
 800a6dc:	4610      	mov	r0, r2
 800a6de:	4619      	mov	r1, r3
                       p_connection_update_complete_event->Conn_Latency,
 800a6e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6e2:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800a6e6:	b29b      	uxth	r3, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800a6e8:	461c      	mov	r4, r3
                       p_connection_update_complete_event->Supervision_Timeout*10);
 800a6ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6ec:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800a6f0:	b29b      	uxth	r3, r3
 800a6f2:	461a      	mov	r2, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800a6f4:	4613      	mov	r3, r2
 800a6f6:	009b      	lsls	r3, r3, #2
 800a6f8:	4413      	add	r3, r2
 800a6fa:	005b      	lsls	r3, r3, #1
 800a6fc:	9301      	str	r3, [sp, #4]
 800a6fe:	9400      	str	r4, [sp, #0]
 800a700:	4602      	mov	r2, r0
 800a702:	460b      	mov	r3, r1
 800a704:	4872      	ldr	r0, [pc, #456]	@ (800a8d0 <SVCCTL_App_Notification+0x30c>)
 800a706:	f001 fcc7 	bl	800c098 <iprintf>
          break;
 800a70a:	e0d1      	b.n	800a8b0 <SVCCTL_App_Notification+0x2ec>
          p_evt_le_phy_update_complete = (hci_le_phy_update_complete_event_rp0*)p_meta_evt->data;
 800a70c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a70e:	3301      	adds	r3, #1
 800a710:	633b      	str	r3, [r7, #48]	@ 0x30
          APP_DBG_MSG("==>> HCI_LE_PHY_UPDATE_COMPLETE_SUBEVT_CODE - ");
 800a712:	4870      	ldr	r0, [pc, #448]	@ (800a8d4 <SVCCTL_App_Notification+0x310>)
 800a714:	f001 fcc0 	bl	800c098 <iprintf>
          if (p_evt_le_phy_update_complete->Status == 0)
 800a718:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a71a:	781b      	ldrb	r3, [r3, #0]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d103      	bne.n	800a728 <SVCCTL_App_Notification+0x164>
            APP_DBG_MSG("status ok \n");
 800a720:	486d      	ldr	r0, [pc, #436]	@ (800a8d8 <SVCCTL_App_Notification+0x314>)
 800a722:	f001 fd29 	bl	800c178 <puts>
 800a726:	e002      	b.n	800a72e <SVCCTL_App_Notification+0x16a>
            APP_DBG_MSG("status nok \n");
 800a728:	486c      	ldr	r0, [pc, #432]	@ (800a8dc <SVCCTL_App_Notification+0x318>)
 800a72a:	f001 fd25 	bl	800c178 <puts>
          ret = hci_le_read_phy(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, &Tx_phy, &Rx_phy);
 800a72e:	4b61      	ldr	r3, [pc, #388]	@ (800a8b4 <SVCCTL_App_Notification+0x2f0>)
 800a730:	8adb      	ldrh	r3, [r3, #22]
 800a732:	f107 021e 	add.w	r2, r7, #30
 800a736:	f107 011f 	add.w	r1, r7, #31
 800a73a:	4618      	mov	r0, r3
 800a73c:	f7fd fe00 	bl	8008340 <hci_le_read_phy>
 800a740:	4603      	mov	r3, r0
 800a742:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
          if (ret != BLE_STATUS_SUCCESS)
 800a746:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d003      	beq.n	800a756 <SVCCTL_App_Notification+0x192>
            APP_DBG_MSG("==>> hci_le_read_phy : fail\n\r");
 800a74e:	4864      	ldr	r0, [pc, #400]	@ (800a8e0 <SVCCTL_App_Notification+0x31c>)
 800a750:	f001 fca2 	bl	800c098 <iprintf>
          break;
 800a754:	e0ac      	b.n	800a8b0 <SVCCTL_App_Notification+0x2ec>
            APP_DBG_MSG("==>> hci_le_read_phy - Success \n");
 800a756:	4863      	ldr	r0, [pc, #396]	@ (800a8e4 <SVCCTL_App_Notification+0x320>)
 800a758:	f001 fd0e 	bl	800c178 <puts>
            if ((Tx_phy == TX_2M) && (Rx_phy == RX_2M))
 800a75c:	7ffb      	ldrb	r3, [r7, #31]
 800a75e:	2b02      	cmp	r3, #2
 800a760:	d10a      	bne.n	800a778 <SVCCTL_App_Notification+0x1b4>
 800a762:	7fbb      	ldrb	r3, [r7, #30]
 800a764:	2b02      	cmp	r3, #2
 800a766:	d107      	bne.n	800a778 <SVCCTL_App_Notification+0x1b4>
              APP_DBG_MSG("==>> PHY Param  TX= %d, RX= %d \n\r", Tx_phy, Rx_phy);
 800a768:	7ffb      	ldrb	r3, [r7, #31]
 800a76a:	4619      	mov	r1, r3
 800a76c:	7fbb      	ldrb	r3, [r7, #30]
 800a76e:	461a      	mov	r2, r3
 800a770:	485d      	ldr	r0, [pc, #372]	@ (800a8e8 <SVCCTL_App_Notification+0x324>)
 800a772:	f001 fc91 	bl	800c098 <iprintf>
          break;
 800a776:	e09b      	b.n	800a8b0 <SVCCTL_App_Notification+0x2ec>
              APP_DBG_MSG("==>> PHY Param  TX= %d, RX= %d \n\r", Tx_phy, Rx_phy);
 800a778:	7ffb      	ldrb	r3, [r7, #31]
 800a77a:	4619      	mov	r1, r3
 800a77c:	7fbb      	ldrb	r3, [r7, #30]
 800a77e:	461a      	mov	r2, r3
 800a780:	4859      	ldr	r0, [pc, #356]	@ (800a8e8 <SVCCTL_App_Notification+0x324>)
 800a782:	f001 fc89 	bl	800c098 <iprintf>
          break;
 800a786:	e093      	b.n	800a8b0 <SVCCTL_App_Notification+0x2ec>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 800a788:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a78a:	3301      	adds	r3, #1
 800a78c:	62bb      	str	r3, [r7, #40]	@ 0x28
          HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 800a78e:	4b49      	ldr	r3, [pc, #292]	@ (800a8b4 <SVCCTL_App_Notification+0x2f0>)
 800a790:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a794:	4618      	mov	r0, r3
 800a796:	f7f7 fa39 	bl	8001c0c <HW_TS_Stop>
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE - Connection handle: 0x%x\n", p_connection_complete_event->Connection_Handle);
 800a79a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a79c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800a7a0:	b29b      	uxth	r3, r3
 800a7a2:	4619      	mov	r1, r3
 800a7a4:	4851      	ldr	r0, [pc, #324]	@ (800a8ec <SVCCTL_App_Notification+0x328>)
 800a7a6:	f001 fc77 	bl	800c098 <iprintf>
                      p_connection_complete_event->Peer_Address[5],
 800a7aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7ac:	7a9b      	ldrb	r3, [r3, #10]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 800a7ae:	4618      	mov	r0, r3
                      p_connection_complete_event->Peer_Address[4],
 800a7b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7b2:	7a5b      	ldrb	r3, [r3, #9]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 800a7b4:	461c      	mov	r4, r3
                      p_connection_complete_event->Peer_Address[3],
 800a7b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7b8:	7a1b      	ldrb	r3, [r3, #8]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 800a7ba:	461d      	mov	r5, r3
                      p_connection_complete_event->Peer_Address[2],
 800a7bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7be:	79db      	ldrb	r3, [r3, #7]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 800a7c0:	461a      	mov	r2, r3
                      p_connection_complete_event->Peer_Address[1],
 800a7c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7c4:	799b      	ldrb	r3, [r3, #6]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 800a7c6:	4619      	mov	r1, r3
                      p_connection_complete_event->Peer_Address[0]);
 800a7c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7ca:	795b      	ldrb	r3, [r3, #5]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 800a7cc:	9302      	str	r3, [sp, #8]
 800a7ce:	9101      	str	r1, [sp, #4]
 800a7d0:	9200      	str	r2, [sp, #0]
 800a7d2:	462b      	mov	r3, r5
 800a7d4:	4622      	mov	r2, r4
 800a7d6:	4601      	mov	r1, r0
 800a7d8:	4845      	ldr	r0, [pc, #276]	@ (800a8f0 <SVCCTL_App_Notification+0x32c>)
 800a7da:	f001 fc5d 	bl	800c098 <iprintf>
                      p_connection_complete_event->Conn_Interval*1.25,
 800a7de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7e0:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 800a7e4:	b29b      	uxth	r3, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	f7f5 ff9e 	bl	8000728 <__aeabi_i2d>
 800a7ec:	f04f 0200 	mov.w	r2, #0
 800a7f0:	4b36      	ldr	r3, [pc, #216]	@ (800a8cc <SVCCTL_App_Notification+0x308>)
 800a7f2:	f7f5 fd1d 	bl	8000230 <__aeabi_dmul>
 800a7f6:	4602      	mov	r2, r0
 800a7f8:	460b      	mov	r3, r1
 800a7fa:	4610      	mov	r0, r2
 800a7fc:	4619      	mov	r1, r3
                      p_connection_complete_event->Conn_Latency,
 800a7fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a800:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 800a804:	b29b      	uxth	r3, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800a806:	461c      	mov	r4, r3
                      p_connection_complete_event->Supervision_Timeout*10
 800a808:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a80a:	f8b3 300f 	ldrh.w	r3, [r3, #15]
 800a80e:	b29b      	uxth	r3, r3
 800a810:	461a      	mov	r2, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800a812:	4613      	mov	r3, r2
 800a814:	009b      	lsls	r3, r3, #2
 800a816:	4413      	add	r3, r2
 800a818:	005b      	lsls	r3, r3, #1
 800a81a:	9301      	str	r3, [sp, #4]
 800a81c:	9400      	str	r4, [sp, #0]
 800a81e:	4602      	mov	r2, r0
 800a820:	460b      	mov	r3, r1
 800a822:	482b      	ldr	r0, [pc, #172]	@ (800a8d0 <SVCCTL_App_Notification+0x30c>)
 800a824:	f001 fc38 	bl	800c098 <iprintf>
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 800a828:	4b22      	ldr	r3, [pc, #136]	@ (800a8b4 <SVCCTL_App_Notification+0x2f0>)
 800a82a:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800a82e:	2b04      	cmp	r3, #4
 800a830:	d104      	bne.n	800a83c <SVCCTL_App_Notification+0x278>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 800a832:	4b20      	ldr	r3, [pc, #128]	@ (800a8b4 <SVCCTL_App_Notification+0x2f0>)
 800a834:	2206      	movs	r2, #6
 800a836:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 800a83a:	e003      	b.n	800a844 <SVCCTL_App_Notification+0x280>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 800a83c:	4b1d      	ldr	r3, [pc, #116]	@ (800a8b4 <SVCCTL_App_Notification+0x2f0>)
 800a83e:	2205      	movs	r2, #5
 800a840:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 800a844:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a846:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800a84a:	b29a      	uxth	r2, r3
 800a84c:	4b19      	ldr	r3, [pc, #100]	@ (800a8b4 <SVCCTL_App_Notification+0x2f0>)
 800a84e:	82da      	strh	r2, [r3, #22]
          HandleNotification.P2P_Evt_Opcode = PEER_CONN_HANDLE_EVT;
 800a850:	4b1b      	ldr	r3, [pc, #108]	@ (800a8c0 <SVCCTL_App_Notification+0x2fc>)
 800a852:	2200      	movs	r2, #0
 800a854:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800a856:	4b17      	ldr	r3, [pc, #92]	@ (800a8b4 <SVCCTL_App_Notification+0x2f0>)
 800a858:	8ada      	ldrh	r2, [r3, #22]
 800a85a:	4b19      	ldr	r3, [pc, #100]	@ (800a8c0 <SVCCTL_App_Notification+0x2fc>)
 800a85c:	805a      	strh	r2, [r3, #2]
          P2PS_APP_Notification(&HandleNotification);
 800a85e:	4818      	ldr	r0, [pc, #96]	@ (800a8c0 <SVCCTL_App_Notification+0x2fc>)
 800a860:	f000 fde8 	bl	800b434 <P2PS_APP_Notification>
          bdaddr= BleGetBdAddress();
 800a864:	f000 fc10 	bl	800b088 <BleGetBdAddress>
 800a868:	6278      	str	r0, [r7, #36]	@ 0x24
          sprintf(BdAddress, "BD_ad=%02x%02x%02x%02x%02x%02x", bdaddr[5],bdaddr[4],bdaddr[3],bdaddr[2],bdaddr[1],bdaddr[0]);
 800a86a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a86c:	3305      	adds	r3, #5
 800a86e:	781b      	ldrb	r3, [r3, #0]
 800a870:	461d      	mov	r5, r3
 800a872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a874:	3304      	adds	r3, #4
 800a876:	781b      	ldrb	r3, [r3, #0]
 800a878:	461e      	mov	r6, r3
 800a87a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a87c:	3303      	adds	r3, #3
 800a87e:	781b      	ldrb	r3, [r3, #0]
 800a880:	461a      	mov	r2, r3
 800a882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a884:	3302      	adds	r3, #2
 800a886:	781b      	ldrb	r3, [r3, #0]
 800a888:	4619      	mov	r1, r3
 800a88a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a88c:	3301      	adds	r3, #1
 800a88e:	781b      	ldrb	r3, [r3, #0]
 800a890:	461c      	mov	r4, r3
 800a892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a894:	781b      	ldrb	r3, [r3, #0]
 800a896:	f107 0008 	add.w	r0, r7, #8
 800a89a:	9303      	str	r3, [sp, #12]
 800a89c:	9402      	str	r4, [sp, #8]
 800a89e:	9101      	str	r1, [sp, #4]
 800a8a0:	9200      	str	r2, [sp, #0]
 800a8a2:	4633      	mov	r3, r6
 800a8a4:	462a      	mov	r2, r5
 800a8a6:	4907      	ldr	r1, [pc, #28]	@ (800a8c4 <SVCCTL_App_Notification+0x300>)
 800a8a8:	f001 fc6e 	bl	800c188 <siprintf>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 800a8ac:	e000      	b.n	800a8b0 <SVCCTL_App_Notification+0x2ec>
          break;
 800a8ae:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 800a8b0:	e112      	b.n	800aad8 <SVCCTL_App_Notification+0x514>
 800a8b2:	bf00      	nop
 800a8b4:	200003cc 	.word	0x200003cc
 800a8b8:	0800d894 	.word	0x0800d894
 800a8bc:	0800d8c0 	.word	0x0800d8c0
 800a8c0:	20000458 	.word	0x20000458
 800a8c4:	0800d7a0 	.word	0x0800d7a0
 800a8c8:	0800d8fc 	.word	0x0800d8fc
 800a8cc:	3ff40000 	.word	0x3ff40000
 800a8d0:	0800d930 	.word	0x0800d930
 800a8d4:	0800d99c 	.word	0x0800d99c
 800a8d8:	0800d9cc 	.word	0x0800d9cc
 800a8dc:	0800d9d8 	.word	0x0800d9d8
 800a8e0:	0800d9e4 	.word	0x0800d9e4
 800a8e4:	0800da04 	.word	0x0800da04
 800a8e8:	0800da24 	.word	0x0800da24
 800a8ec:	0800da48 	.word	0x0800da48
 800a8f0:	0800da90 	.word	0x0800da90
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 800a8f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a8f6:	3302      	adds	r3, #2
 800a8f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
      switch (p_blecore_evt->ecode)
 800a8fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a8fc:	881b      	ldrh	r3, [r3, #0]
 800a8fe:	b29b      	uxth	r3, r3
 800a900:	f640 420e 	movw	r2, #3086	@ 0xc0e
 800a904:	4293      	cmp	r3, r2
 800a906:	f000 80da 	beq.w	800aabe <SVCCTL_App_Notification+0x4fa>
 800a90a:	f640 420e 	movw	r2, #3086	@ 0xc0e
 800a90e:	4293      	cmp	r3, r2
 800a910:	f300 80e1 	bgt.w	800aad6 <SVCCTL_App_Notification+0x512>
 800a914:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a918:	f000 80c1 	beq.w	800aa9e <SVCCTL_App_Notification+0x4da>
 800a91c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a920:	f300 80d9 	bgt.w	800aad6 <SVCCTL_App_Notification+0x512>
 800a924:	2b04      	cmp	r3, #4
 800a926:	f000 80c2 	beq.w	800aaae <SVCCTL_App_Notification+0x4ea>
 800a92a:	2b04      	cmp	r3, #4
 800a92c:	f2c0 80d3 	blt.w	800aad6 <SVCCTL_App_Notification+0x512>
 800a930:	f240 420a 	movw	r2, #1034	@ 0x40a
 800a934:	4293      	cmp	r3, r2
 800a936:	f300 80ce 	bgt.w	800aad6 <SVCCTL_App_Notification+0x512>
 800a93a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a93e:	f2c0 80ca 	blt.w	800aad6 <SVCCTL_App_Notification+0x512>
 800a942:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 800a946:	2b0a      	cmp	r3, #10
 800a948:	f200 80c5 	bhi.w	800aad6 <SVCCTL_App_Notification+0x512>
 800a94c:	a201      	add	r2, pc, #4	@ (adr r2, 800a954 <SVCCTL_App_Notification+0x390>)
 800a94e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a952:	bf00      	nop
 800a954:	0800a981 	.word	0x0800a981
 800a958:	0800aa69 	.word	0x0800aa69
 800a95c:	0800a989 	.word	0x0800a989
 800a960:	0800a9bf 	.word	0x0800a9bf
 800a964:	0800a9c7 	.word	0x0800a9c7
 800a968:	0800a9cf 	.word	0x0800a9cf
 800a96c:	0800aad7 	.word	0x0800aad7
 800a970:	0800aaa7 	.word	0x0800aaa7
 800a974:	0800aa03 	.word	0x0800aa03
 800a978:	0800aa13 	.word	0x0800aa13
 800a97c:	0800aa0b 	.word	0x0800aa0b
          APP_DBG_MSG(">>== ACI_GAP_LIMITED_DISCOVERABLE_VSEVT_CODE \n");
 800a980:	4858      	ldr	r0, [pc, #352]	@ (800aae4 <SVCCTL_App_Notification+0x520>)
 800a982:	f001 fbf9 	bl	800c178 <puts>
          break; /* ACI_GAP_LIMITED_DISCOVERABLE_VSEVT_CODE */
 800a986:	e0a3      	b.n	800aad0 <SVCCTL_App_Notification+0x50c>
          APP_DBG_MSG(">>== ACI_GAP_PASS_KEY_REQ_VSEVT_CODE \n");
 800a988:	4857      	ldr	r0, [pc, #348]	@ (800aae8 <SVCCTL_App_Notification+0x524>)
 800a98a:	f001 fbf5 	bl	800c178 <puts>
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,123456);
 800a98e:	4b57      	ldr	r3, [pc, #348]	@ (800aaec <SVCCTL_App_Notification+0x528>)
 800a990:	8adb      	ldrh	r3, [r3, #22]
 800a992:	4957      	ldr	r1, [pc, #348]	@ (800aaf0 <SVCCTL_App_Notification+0x52c>)
 800a994:	4618      	mov	r0, r3
 800a996:	f7fc fe09 	bl	80075ac <aci_gap_pass_key_resp>
 800a99a:	4603      	mov	r3, r0
 800a99c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
          if (ret != BLE_STATUS_SUCCESS)
 800a9a0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d006      	beq.n	800a9b6 <SVCCTL_App_Notification+0x3f2>
            APP_DBG_MSG("==>> aci_gap_pass_key_resp : Fail, reason: 0x%x\n", ret);
 800a9a8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a9ac:	4619      	mov	r1, r3
 800a9ae:	4851      	ldr	r0, [pc, #324]	@ (800aaf4 <SVCCTL_App_Notification+0x530>)
 800a9b0:	f001 fb72 	bl	800c098 <iprintf>
          break; /* ACI_GAP_PASS_KEY_REQ_VSEVT_CODE */
 800a9b4:	e08c      	b.n	800aad0 <SVCCTL_App_Notification+0x50c>
            APP_DBG_MSG("==>> aci_gap_pass_key_resp : Success \n");
 800a9b6:	4850      	ldr	r0, [pc, #320]	@ (800aaf8 <SVCCTL_App_Notification+0x534>)
 800a9b8:	f001 fbde 	bl	800c178 <puts>
          break; /* ACI_GAP_PASS_KEY_REQ_VSEVT_CODE */
 800a9bc:	e088      	b.n	800aad0 <SVCCTL_App_Notification+0x50c>
          APP_DBG_MSG(">>== ACI_GAP_AUTHORIZATION_REQ_VSEVT_CODE\n");
 800a9be:	484f      	ldr	r0, [pc, #316]	@ (800aafc <SVCCTL_App_Notification+0x538>)
 800a9c0:	f001 fbda 	bl	800c178 <puts>
          break; /* ACI_GAP_AUTHORIZATION_REQ_VSEVT_CODE */
 800a9c4:	e084      	b.n	800aad0 <SVCCTL_App_Notification+0x50c>
          APP_DBG_MSG("==>> ACI_GAP_PERIPHERAL_SECURITY_INITIATED_VSEVT_CODE \n");
 800a9c6:	484e      	ldr	r0, [pc, #312]	@ (800ab00 <SVCCTL_App_Notification+0x53c>)
 800a9c8:	f001 fbd6 	bl	800c178 <puts>
          break; /* ACI_GAP_PERIPHERAL_SECURITY_INITIATED_VSEVT_CODE */
 800a9cc:	e080      	b.n	800aad0 <SVCCTL_App_Notification+0x50c>
          APP_DBG_MSG("==>> ACI_GAP_BOND_LOST_VSEVT_CODE \n");
 800a9ce:	484d      	ldr	r0, [pc, #308]	@ (800ab04 <SVCCTL_App_Notification+0x540>)
 800a9d0:	f001 fbd2 	bl	800c178 <puts>
          ret = aci_gap_allow_rebond(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 800a9d4:	4b45      	ldr	r3, [pc, #276]	@ (800aaec <SVCCTL_App_Notification+0x528>)
 800a9d6:	8adb      	ldrh	r3, [r3, #22]
 800a9d8:	4618      	mov	r0, r3
 800a9da:	f7fc ff91 	bl	8007900 <aci_gap_allow_rebond>
 800a9de:	4603      	mov	r3, r0
 800a9e0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
          if (ret != BLE_STATUS_SUCCESS)
 800a9e4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d006      	beq.n	800a9fa <SVCCTL_App_Notification+0x436>
            APP_DBG_MSG("==>> aci_gap_allow_rebond : Fail, reason: 0x%x\n", ret);
 800a9ec:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a9f0:	4619      	mov	r1, r3
 800a9f2:	4845      	ldr	r0, [pc, #276]	@ (800ab08 <SVCCTL_App_Notification+0x544>)
 800a9f4:	f001 fb50 	bl	800c098 <iprintf>
          break; /* ACI_GAP_BOND_LOST_VSEVT_CODE */
 800a9f8:	e06a      	b.n	800aad0 <SVCCTL_App_Notification+0x50c>
            APP_DBG_MSG("==>> aci_gap_allow_rebond : Success \n");
 800a9fa:	4844      	ldr	r0, [pc, #272]	@ (800ab0c <SVCCTL_App_Notification+0x548>)
 800a9fc:	f001 fbbc 	bl	800c178 <puts>
          break; /* ACI_GAP_BOND_LOST_VSEVT_CODE */
 800aa00:	e066      	b.n	800aad0 <SVCCTL_App_Notification+0x50c>
          APP_DBG_MSG(">>== ACI_GAP_ADDR_NOT_RESOLVED_VSEVT_CODE \n");
 800aa02:	4843      	ldr	r0, [pc, #268]	@ (800ab10 <SVCCTL_App_Notification+0x54c>)
 800aa04:	f001 fbb8 	bl	800c178 <puts>
          break; /* ACI_GAP_ADDR_NOT_RESOLVED_VSEVT_CODE */
 800aa08:	e062      	b.n	800aad0 <SVCCTL_App_Notification+0x50c>
          APP_DBG_MSG(">>== ACI_GAP_KEYPRESS_NOTIFICATION_VSEVT_CODE\n");
 800aa0a:	4842      	ldr	r0, [pc, #264]	@ (800ab14 <SVCCTL_App_Notification+0x550>)
 800aa0c:	f001 fbb4 	bl	800c178 <puts>
          break; /* ACI_GAP_KEYPRESS_NOTIFICATION_VSEVT_CODE */    
 800aa10:	e05e      	b.n	800aad0 <SVCCTL_App_Notification+0x50c>
          APP_DBG_MSG(">>== ACI_GAP_NUMERIC_COMPARISON_VALUE_VSEVT_CODE\n");
 800aa12:	4841      	ldr	r0, [pc, #260]	@ (800ab18 <SVCCTL_App_Notification+0x554>)
 800aa14:	f001 fbb0 	bl	800c178 <puts>
                      ((aci_gap_numeric_comparison_value_event_rp0 *)(p_blecore_evt->data))->Numeric_Value);
 800aa18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa1a:	3302      	adds	r3, #2
          APP_DBG_MSG("     - numeric_value = %ld\n",
 800aa1c:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800aa20:	4619      	mov	r1, r3
 800aa22:	483e      	ldr	r0, [pc, #248]	@ (800ab1c <SVCCTL_App_Notification+0x558>)
 800aa24:	f001 fb38 	bl	800c098 <iprintf>
                      ((aci_gap_numeric_comparison_value_event_rp0 *)(p_blecore_evt->data))->Numeric_Value);
 800aa28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa2a:	3302      	adds	r3, #2
          APP_DBG_MSG("     - Hex_value = %lx\n",
 800aa2c:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800aa30:	4619      	mov	r1, r3
 800aa32:	483b      	ldr	r0, [pc, #236]	@ (800ab20 <SVCCTL_App_Notification+0x55c>)
 800aa34:	f001 fb30 	bl	800c098 <iprintf>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES); /* CONFIRM_YES = 1 */
 800aa38:	4b2c      	ldr	r3, [pc, #176]	@ (800aaec <SVCCTL_App_Notification+0x528>)
 800aa3a:	8adb      	ldrh	r3, [r3, #22]
 800aa3c:	2101      	movs	r1, #1
 800aa3e:	4618      	mov	r0, r3
 800aa40:	f7fc ffb2 	bl	80079a8 <aci_gap_numeric_comparison_value_confirm_yesno>
 800aa44:	4603      	mov	r3, r0
 800aa46:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
          if (ret != BLE_STATUS_SUCCESS)
 800aa4a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d006      	beq.n	800aa60 <SVCCTL_App_Notification+0x49c>
            APP_DBG_MSG("==>> aci_gap_numeric_comparison_value_confirm_yesno-->YES : Fail, reason: 0x%x\n", ret);
 800aa52:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800aa56:	4619      	mov	r1, r3
 800aa58:	4832      	ldr	r0, [pc, #200]	@ (800ab24 <SVCCTL_App_Notification+0x560>)
 800aa5a:	f001 fb1d 	bl	800c098 <iprintf>
          break;
 800aa5e:	e037      	b.n	800aad0 <SVCCTL_App_Notification+0x50c>
            APP_DBG_MSG("==>> aci_gap_numeric_comparison_value_confirm_yesno-->YES : Success \n");
 800aa60:	4831      	ldr	r0, [pc, #196]	@ (800ab28 <SVCCTL_App_Notification+0x564>)
 800aa62:	f001 fb89 	bl	800c178 <puts>
          break;
 800aa66:	e033      	b.n	800aad0 <SVCCTL_App_Notification+0x50c>
          pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 800aa68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa6a:	3302      	adds	r3, #2
 800aa6c:	63bb      	str	r3, [r7, #56]	@ 0x38
          APP_DBG_MSG(">>== ACI_GAP_PAIRING_COMPLETE_VSEVT_CODE\n");
 800aa6e:	482f      	ldr	r0, [pc, #188]	@ (800ab2c <SVCCTL_App_Notification+0x568>)
 800aa70:	f001 fb82 	bl	800c178 <puts>
          if (pairing_complete->Status == 0)
 800aa74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa76:	789b      	ldrb	r3, [r3, #2]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d103      	bne.n	800aa84 <SVCCTL_App_Notification+0x4c0>
            APP_DBG_MSG("     - Pairing Success\n");
 800aa7c:	482c      	ldr	r0, [pc, #176]	@ (800ab30 <SVCCTL_App_Notification+0x56c>)
 800aa7e:	f001 fb7b 	bl	800c178 <puts>
 800aa82:	e008      	b.n	800aa96 <SVCCTL_App_Notification+0x4d2>
            APP_DBG_MSG("     - Pairing KO \n     - Status: 0x%x\n     - Reason: 0x%x\n",pairing_complete->Status, pairing_complete->Reason);
 800aa84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa86:	789b      	ldrb	r3, [r3, #2]
 800aa88:	4619      	mov	r1, r3
 800aa8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa8c:	78db      	ldrb	r3, [r3, #3]
 800aa8e:	461a      	mov	r2, r3
 800aa90:	4828      	ldr	r0, [pc, #160]	@ (800ab34 <SVCCTL_App_Notification+0x570>)
 800aa92:	f001 fb01 	bl	800c098 <iprintf>
          APP_DBG_MSG("\n");
 800aa96:	200a      	movs	r0, #10
 800aa98:	f001 fb10 	bl	800c0bc <putchar>
          break;    
 800aa9c:	e018      	b.n	800aad0 <SVCCTL_App_Notification+0x50c>
          mutex = 1;
 800aa9e:	4b26      	ldr	r3, [pc, #152]	@ (800ab38 <SVCCTL_App_Notification+0x574>)
 800aaa0:	2201      	movs	r2, #1
 800aaa2:	701a      	strb	r2, [r3, #0]
          break;
 800aaa4:	e014      	b.n	800aad0 <SVCCTL_App_Notification+0x50c>
          APP_DBG_MSG(">>== ACI_GAP_PROC_COMPLETE_VSEVT_CODE \r");
 800aaa6:	4825      	ldr	r0, [pc, #148]	@ (800ab3c <SVCCTL_App_Notification+0x578>)
 800aaa8:	f001 faf6 	bl	800c098 <iprintf>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 800aaac:	e010      	b.n	800aad0 <SVCCTL_App_Notification+0x50c>
          HW_TS_Start(BleApplicationContext.SwitchOffGPIO_timer_Id, (uint32_t)LED_ON_TIMEOUT);
 800aaae:	4b0f      	ldr	r3, [pc, #60]	@ (800aaec <SVCCTL_App_Notification+0x528>)
 800aab0:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 800aab4:	210a      	movs	r1, #10
 800aab6:	4618      	mov	r0, r3
 800aab8:	f7f7 f92c 	bl	8001d14 <HW_TS_Start>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 800aabc:	e008      	b.n	800aad0 <SVCCTL_App_Notification+0x50c>
          APP_DBG_MSG(">>== ACI_GATT_INDICATION_VSEVT_CODE \r");
 800aabe:	4820      	ldr	r0, [pc, #128]	@ (800ab40 <SVCCTL_App_Notification+0x57c>)
 800aac0:	f001 faea 	bl	800c098 <iprintf>
          aci_gatt_confirm_indication(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 800aac4:	4b09      	ldr	r3, [pc, #36]	@ (800aaec <SVCCTL_App_Notification+0x528>)
 800aac6:	8adb      	ldrh	r3, [r3, #22]
 800aac8:	4618      	mov	r0, r3
 800aaca:	f7fd fa80 	bl	8007fce <aci_gatt_confirm_indication>
        break;
 800aace:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800aad0:	e001      	b.n	800aad6 <SVCCTL_App_Notification+0x512>
      break;
 800aad2:	bf00      	nop
 800aad4:	e000      	b.n	800aad8 <SVCCTL_App_Notification+0x514>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800aad6:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 800aad8:	2301      	movs	r3, #1
}
 800aada:	4618      	mov	r0, r3
 800aadc:	374c      	adds	r7, #76	@ 0x4c
 800aade:	46bd      	mov	sp, r7
 800aae0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aae2:	bf00      	nop
 800aae4:	0800dae0 	.word	0x0800dae0
 800aae8:	0800db10 	.word	0x0800db10
 800aaec:	200003cc 	.word	0x200003cc
 800aaf0:	0001e240 	.word	0x0001e240
 800aaf4:	0800db38 	.word	0x0800db38
 800aaf8:	0800db6c 	.word	0x0800db6c
 800aafc:	0800db94 	.word	0x0800db94
 800ab00:	0800dbc0 	.word	0x0800dbc0
 800ab04:	0800dbf8 	.word	0x0800dbf8
 800ab08:	0800dc1c 	.word	0x0800dc1c
 800ab0c:	0800dc4c 	.word	0x0800dc4c
 800ab10:	0800dc74 	.word	0x0800dc74
 800ab14:	0800dca0 	.word	0x0800dca0
 800ab18:	0800dcd0 	.word	0x0800dcd0
 800ab1c:	0800dd04 	.word	0x0800dd04
 800ab20:	0800dd20 	.word	0x0800dd20
 800ab24:	0800dd38 	.word	0x0800dd38
 800ab28:	0800dd88 	.word	0x0800dd88
 800ab2c:	0800ddd0 	.word	0x0800ddd0
 800ab30:	0800ddfc 	.word	0x0800ddfc
 800ab34:	0800de14 	.word	0x0800de14
 800ab38:	2000045d 	.word	0x2000045d
 800ab3c:	0800de50 	.word	0x0800de50
 800ab40:	0800de78 	.word	0x0800de78

0800ab44 <APP_BLE_Key_Button1_Action>:
  return BleApplicationContext.Device_Connection_Status;
}

/* USER CODE BEGIN FD*/
void APP_BLE_Key_Button1_Action(void)
{
 800ab44:	b580      	push	{r7, lr}
 800ab46:	af00      	add	r7, sp, #0
  P2PS_APP_SW1_Button_Action();
 800ab48:	f000 fc94 	bl	800b474 <P2PS_APP_SW1_Button_Action>
}
 800ab4c:	bf00      	nop
 800ab4e:	bd80      	pop	{r7, pc}

0800ab50 <APP_BLE_Key_Button2_Action>:

void APP_BLE_Key_Button2_Action(void)
{
 800ab50:	b580      	push	{r7, lr}
 800ab52:	af00      	add	r7, sp, #0
#if (L2CAP_REQUEST_NEW_CONN_PARAM != 0 )    
  UTIL_SEQ_SetTask( 1<<CFG_TASK_CONN_UPDATE_REG_ID, CFG_SCH_PRIO_0);
 800ab54:	2100      	movs	r1, #0
 800ab56:	2002      	movs	r0, #2
 800ab58:	f001 f8e0 	bl	800bd1c <UTIL_SEQ_SetTask>
#endif
  
  return;
 800ab5c:	bf00      	nop
}
 800ab5e:	bd80      	pop	{r7, pc}

0800ab60 <APP_BLE_Send_EEGData_Notification>:
 *
 * Hermes Characteristics notifications
 *
 **/
uint8_t  APP_BLE_Send_EEGData_Notification(uint8_t* payload, uint8_t length)
{
 800ab60:	b580      	push	{r7, lr}
 800ab62:	b086      	sub	sp, #24
 800ab64:	af02      	add	r7, sp, #8
 800ab66:	6078      	str	r0, [r7, #4]
 800ab68:	460b      	mov	r3, r1
 800ab6a:	70fb      	strb	r3, [r7, #3]
    uint8_t  ret = BLE_STATUS_INVALID_PARAMS;
 800ab6c:	2392      	movs	r3, #146	@ 0x92
 800ab6e:	73fb      	strb	r3, [r7, #15]

    if(length <= NEW_NOTIFY_CHAR_VALUE_LENGTH)
 800ab70:	78fb      	ldrb	r3, [r7, #3]
 800ab72:	2bf1      	cmp	r3, #241	@ 0xf1
 800ab74:	d80e      	bhi.n	800ab94 <APP_BLE_Send_EEGData_Notification+0x34>
    {
        ret = aci_gatt_update_char_value(BleApplicationContext.BleApplicationContext_legacy.eeg_service_handle,
 800ab76:	4b0a      	ldr	r3, [pc, #40]	@ (800aba0 <APP_BLE_Send_EEGData_Notification+0x40>)
 800ab78:	f8b3 007e 	ldrh.w	r0, [r3, #126]	@ 0x7e
 800ab7c:	4b08      	ldr	r3, [pc, #32]	@ (800aba0 <APP_BLE_Send_EEGData_Notification+0x40>)
 800ab7e:	f8b3 1084 	ldrh.w	r1, [r3, #132]	@ 0x84
 800ab82:	78fa      	ldrb	r2, [r7, #3]
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	9300      	str	r3, [sp, #0]
 800ab88:	4613      	mov	r3, r2
 800ab8a:	2200      	movs	r2, #0
 800ab8c:	f7fd f976 	bl	8007e7c <aci_gatt_update_char_value>
 800ab90:	4603      	mov	r3, r0
 800ab92:	73fb      	strb	r3, [r7, #15]
                                        0, /* offset */
                                        length, /* data length */
                                        payload);
    }

    return ret;
 800ab94:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab96:	4618      	mov	r0, r3
 800ab98:	3710      	adds	r7, #16
 800ab9a:	46bd      	mov	sp, r7
 800ab9c:	bd80      	pop	{r7, pc}
 800ab9e:	bf00      	nop
 800aba0:	200003cc 	.word	0x200003cc

0800aba4 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 800aba4:	b580      	push	{r7, lr}
 800aba6:	b082      	sub	sp, #8
 800aba8:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800abaa:	4b06      	ldr	r3, [pc, #24]	@ (800abc4 <Ble_Tl_Init+0x20>)
 800abac:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800abae:	4b06      	ldr	r3, [pc, #24]	@ (800abc8 <Ble_Tl_Init+0x24>)
 800abb0:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800abb2:	463b      	mov	r3, r7
 800abb4:	4619      	mov	r1, r3
 800abb6:	4805      	ldr	r0, [pc, #20]	@ (800abcc <Ble_Tl_Init+0x28>)
 800abb8:	f7fe f896 	bl	8008ce8 <hci_init>

  return;
 800abbc:	bf00      	nop
}
 800abbe:	3708      	adds	r7, #8
 800abc0:	46bd      	mov	sp, r7
 800abc2:	bd80      	pop	{r7, pc}
 800abc4:	200300d8 	.word	0x200300d8
 800abc8:	0800b2f9 	.word	0x0800b2f9
 800abcc:	0800b2c1 	.word	0x0800b2c1

0800abd0 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 800abd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800abd2:	b08d      	sub	sp, #52	@ 0x34
 800abd4:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 800abd6:	2300      	movs	r3, #0
 800abd8:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800abda:	2392      	movs	r3, #146	@ 0x92
 800abdc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init*/

  APP_DBG_MSG("==>> Start Ble_Hci_Gap_Gatt_Init function\n");
 800abde:	48a5      	ldr	r0, [pc, #660]	@ (800ae74 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800abe0:	f001 faca 	bl	800c178 <puts>

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 800abe4:	f7fd fb88 	bl	80082f8 <hci_reset>
 800abe8:	4603      	mov	r3, r0
 800abea:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800abec:	7dfb      	ldrb	r3, [r7, #23]
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d005      	beq.n	800abfe <Ble_Hci_Gap_Gatt_Init+0x2e>
  {
    APP_DBG_MSG("  Fail   : hci_reset command, result: 0x%x \n", ret);
 800abf2:	7dfb      	ldrb	r3, [r7, #23]
 800abf4:	4619      	mov	r1, r3
 800abf6:	48a0      	ldr	r0, [pc, #640]	@ (800ae78 <Ble_Hci_Gap_Gatt_Init+0x2a8>)
 800abf8:	f001 fa4e 	bl	800c098 <iprintf>
 800abfc:	e002      	b.n	800ac04 <Ble_Hci_Gap_Gatt_Init+0x34>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_reset command\n");
 800abfe:	489f      	ldr	r0, [pc, #636]	@ (800ae7c <Ble_Hci_Gap_Gatt_Init+0x2ac>)
 800ac00:	f001 faba 	bl	800c178 <puts>
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 800ac04:	f000 fa40 	bl	800b088 <BleGetBdAddress>
 800ac08:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 800ac0a:	693a      	ldr	r2, [r7, #16]
 800ac0c:	2106      	movs	r1, #6
 800ac0e:	2000      	movs	r0, #0
 800ac10:	f7fd fa32 	bl	8008078 <aci_hal_write_config_data>
 800ac14:	4603      	mov	r3, r0
 800ac16:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800ac18:	7dfb      	ldrb	r3, [r7, #23]
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d005      	beq.n	800ac2a <Ble_Hci_Gap_Gatt_Init+0x5a>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET, result: 0x%x \n", ret);
 800ac1e:	7dfb      	ldrb	r3, [r7, #23]
 800ac20:	4619      	mov	r1, r3
 800ac22:	4897      	ldr	r0, [pc, #604]	@ (800ae80 <Ble_Hci_Gap_Gatt_Init+0x2b0>)
 800ac24:	f001 fa38 	bl	800c098 <iprintf>
 800ac28:	e021      	b.n	800ac6e <Ble_Hci_Gap_Gatt_Init+0x9e>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET\n");
 800ac2a:	4896      	ldr	r0, [pc, #600]	@ (800ae84 <Ble_Hci_Gap_Gatt_Init+0x2b4>)
 800ac2c:	f001 faa4 	bl	800c178 <puts>
    APP_DBG_MSG("  Public Bluetooth Address: %02x:%02x:%02x:%02x:%02x:%02x\n",p_bd_addr[5],p_bd_addr[4],p_bd_addr[3],p_bd_addr[2],p_bd_addr[1],p_bd_addr[0]);
 800ac30:	693b      	ldr	r3, [r7, #16]
 800ac32:	3305      	adds	r3, #5
 800ac34:	781b      	ldrb	r3, [r3, #0]
 800ac36:	4618      	mov	r0, r3
 800ac38:	693b      	ldr	r3, [r7, #16]
 800ac3a:	3304      	adds	r3, #4
 800ac3c:	781b      	ldrb	r3, [r3, #0]
 800ac3e:	461c      	mov	r4, r3
 800ac40:	693b      	ldr	r3, [r7, #16]
 800ac42:	3303      	adds	r3, #3
 800ac44:	781b      	ldrb	r3, [r3, #0]
 800ac46:	461d      	mov	r5, r3
 800ac48:	693b      	ldr	r3, [r7, #16]
 800ac4a:	3302      	adds	r3, #2
 800ac4c:	781b      	ldrb	r3, [r3, #0]
 800ac4e:	461a      	mov	r2, r3
 800ac50:	693b      	ldr	r3, [r7, #16]
 800ac52:	3301      	adds	r3, #1
 800ac54:	781b      	ldrb	r3, [r3, #0]
 800ac56:	4619      	mov	r1, r3
 800ac58:	693b      	ldr	r3, [r7, #16]
 800ac5a:	781b      	ldrb	r3, [r3, #0]
 800ac5c:	9302      	str	r3, [sp, #8]
 800ac5e:	9101      	str	r1, [sp, #4]
 800ac60:	9200      	str	r2, [sp, #0]
 800ac62:	462b      	mov	r3, r5
 800ac64:	4622      	mov	r2, r4
 800ac66:	4601      	mov	r1, r0
 800ac68:	4887      	ldr	r0, [pc, #540]	@ (800ae88 <Ble_Hci_Gap_Gatt_Init+0x2b8>)
 800ac6a:	f001 fa15 	bl	800c098 <iprintf>
  }

#if (CFG_BLE_ADDRESS_TYPE == GAP_PUBLIC_ADDR)
  /* BLE MAC in ADV Packet */
  a_ManufData[ sizeof(a_ManufData)-6] = p_bd_addr[5];
 800ac6e:	693b      	ldr	r3, [r7, #16]
 800ac70:	3305      	adds	r3, #5
 800ac72:	781a      	ldrb	r2, [r3, #0]
 800ac74:	4b85      	ldr	r3, [pc, #532]	@ (800ae8c <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 800ac76:	721a      	strb	r2, [r3, #8]
  a_ManufData[ sizeof(a_ManufData)-5] = p_bd_addr[4];
 800ac78:	693b      	ldr	r3, [r7, #16]
 800ac7a:	3304      	adds	r3, #4
 800ac7c:	781a      	ldrb	r2, [r3, #0]
 800ac7e:	4b83      	ldr	r3, [pc, #524]	@ (800ae8c <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 800ac80:	725a      	strb	r2, [r3, #9]
  a_ManufData[ sizeof(a_ManufData)-4] = p_bd_addr[3];
 800ac82:	693b      	ldr	r3, [r7, #16]
 800ac84:	3303      	adds	r3, #3
 800ac86:	781a      	ldrb	r2, [r3, #0]
 800ac88:	4b80      	ldr	r3, [pc, #512]	@ (800ae8c <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 800ac8a:	729a      	strb	r2, [r3, #10]
  a_ManufData[ sizeof(a_ManufData)-3] = p_bd_addr[2];
 800ac8c:	693b      	ldr	r3, [r7, #16]
 800ac8e:	3302      	adds	r3, #2
 800ac90:	781a      	ldrb	r2, [r3, #0]
 800ac92:	4b7e      	ldr	r3, [pc, #504]	@ (800ae8c <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 800ac94:	72da      	strb	r2, [r3, #11]
  a_ManufData[ sizeof(a_ManufData)-2] = p_bd_addr[1];
 800ac96:	693b      	ldr	r3, [r7, #16]
 800ac98:	3301      	adds	r3, #1
 800ac9a:	781a      	ldrb	r2, [r3, #0]
 800ac9c:	4b7b      	ldr	r3, [pc, #492]	@ (800ae8c <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 800ac9e:	731a      	strb	r2, [r3, #12]
  a_ManufData[ sizeof(a_ManufData)-1] = p_bd_addr[0];
 800aca0:	693b      	ldr	r3, [r7, #16]
 800aca2:	781a      	ldrb	r2, [r3, #0]
 800aca4:	4b79      	ldr	r3, [pc, #484]	@ (800ae8c <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 800aca6:	735a      	strb	r2, [r3, #13]
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive IRK and DHK(Legacy)
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 800aca8:	4a79      	ldr	r2, [pc, #484]	@ (800ae90 <Ble_Hci_Gap_Gatt_Init+0x2c0>)
 800acaa:	2110      	movs	r1, #16
 800acac:	2018      	movs	r0, #24
 800acae:	f7fd f9e3 	bl	8008078 <aci_hal_write_config_data>
 800acb2:	4603      	mov	r3, r0
 800acb4:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800acb6:	7dfb      	ldrb	r3, [r7, #23]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d005      	beq.n	800acc8 <Ble_Hci_Gap_Gatt_Init+0xf8>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET, result: 0x%x \n", ret);
 800acbc:	7dfb      	ldrb	r3, [r7, #23]
 800acbe:	4619      	mov	r1, r3
 800acc0:	4874      	ldr	r0, [pc, #464]	@ (800ae94 <Ble_Hci_Gap_Gatt_Init+0x2c4>)
 800acc2:	f001 f9e9 	bl	800c098 <iprintf>
 800acc6:	e002      	b.n	800acce <Ble_Hci_Gap_Gatt_Init+0xfe>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET\n");
 800acc8:	4873      	ldr	r0, [pc, #460]	@ (800ae98 <Ble_Hci_Gap_Gatt_Init+0x2c8>)
 800acca:	f001 fa55 	bl	800c178 <puts>
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 800acce:	4a73      	ldr	r2, [pc, #460]	@ (800ae9c <Ble_Hci_Gap_Gatt_Init+0x2cc>)
 800acd0:	2110      	movs	r1, #16
 800acd2:	2008      	movs	r0, #8
 800acd4:	f7fd f9d0 	bl	8008078 <aci_hal_write_config_data>
 800acd8:	4603      	mov	r3, r0
 800acda:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800acdc:	7dfb      	ldrb	r3, [r7, #23]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d005      	beq.n	800acee <Ble_Hci_Gap_Gatt_Init+0x11e>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET, result: 0x%x \n", ret);
 800ace2:	7dfb      	ldrb	r3, [r7, #23]
 800ace4:	4619      	mov	r1, r3
 800ace6:	486e      	ldr	r0, [pc, #440]	@ (800aea0 <Ble_Hci_Gap_Gatt_Init+0x2d0>)
 800ace8:	f001 f9d6 	bl	800c098 <iprintf>
 800acec:	e002      	b.n	800acf4 <Ble_Hci_Gap_Gatt_Init+0x124>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET\n");
 800acee:	486d      	ldr	r0, [pc, #436]	@ (800aea4 <Ble_Hci_Gap_Gatt_Init+0x2d4>)
 800acf0:	f001 fa42 	bl	800c178 <puts>
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 800acf4:	2118      	movs	r1, #24
 800acf6:	2001      	movs	r0, #1
 800acf8:	f7fd fa43 	bl	8008182 <aci_hal_set_tx_power_level>
 800acfc:	4603      	mov	r3, r0
 800acfe:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800ad00:	7dfb      	ldrb	r3, [r7, #23]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d005      	beq.n	800ad12 <Ble_Hci_Gap_Gatt_Init+0x142>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_tx_power_level command, result: 0x%x \n", ret);
 800ad06:	7dfb      	ldrb	r3, [r7, #23]
 800ad08:	4619      	mov	r1, r3
 800ad0a:	4867      	ldr	r0, [pc, #412]	@ (800aea8 <Ble_Hci_Gap_Gatt_Init+0x2d8>)
 800ad0c:	f001 f9c4 	bl	800c098 <iprintf>
 800ad10:	e002      	b.n	800ad18 <Ble_Hci_Gap_Gatt_Init+0x148>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_tx_power_level command\n");
 800ad12:	4866      	ldr	r0, [pc, #408]	@ (800aeac <Ble_Hci_Gap_Gatt_Init+0x2dc>)
 800ad14:	f001 fa30 	bl	800c178 <puts>
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 800ad18:	f7fc fead 	bl	8007a76 <aci_gatt_init>
 800ad1c:	4603      	mov	r3, r0
 800ad1e:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800ad20:	7dfb      	ldrb	r3, [r7, #23]
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d005      	beq.n	800ad32 <Ble_Hci_Gap_Gatt_Init+0x162>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_init command, result: 0x%x \n", ret);
 800ad26:	7dfb      	ldrb	r3, [r7, #23]
 800ad28:	4619      	mov	r1, r3
 800ad2a:	4861      	ldr	r0, [pc, #388]	@ (800aeb0 <Ble_Hci_Gap_Gatt_Init+0x2e0>)
 800ad2c:	f001 f9b4 	bl	800c098 <iprintf>
 800ad30:	e002      	b.n	800ad38 <Ble_Hci_Gap_Gatt_Init+0x168>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_init command\n");
 800ad32:	4860      	ldr	r0, [pc, #384]	@ (800aeb4 <Ble_Hci_Gap_Gatt_Init+0x2e4>)
 800ad34:	f001 fa20 	bl	800c178 <puts>
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 800ad38:	2300      	movs	r3, #0
 800ad3a:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 800ad3c:	7bfb      	ldrb	r3, [r7, #15]
 800ad3e:	f043 0301 	orr.w	r3, r3, #1
 800ad42:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 800ad44:	7bfb      	ldrb	r3, [r7, #15]
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d02b      	beq.n	800ada2 <Ble_Hci_Gap_Gatt_Init+0x1d2>
  {
    const char *name = "Hermes V1";
 800ad4a:	4b5b      	ldr	r3, [pc, #364]	@ (800aeb8 <Ble_Hci_Gap_Gatt_Init+0x2e8>)
 800ad4c:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 800ad4e:	1dba      	adds	r2, r7, #6
 800ad50:	7bf8      	ldrb	r0, [r7, #15]
 800ad52:	1cbb      	adds	r3, r7, #2
 800ad54:	9301      	str	r3, [sp, #4]
 800ad56:	1d3b      	adds	r3, r7, #4
 800ad58:	9300      	str	r3, [sp, #0]
 800ad5a:	4613      	mov	r3, r2
 800ad5c:	2207      	movs	r2, #7
 800ad5e:	2100      	movs	r1, #0
 800ad60:	f7fc fc8b 	bl	800767a <aci_gap_init>
 800ad64:	4603      	mov	r3, r0
 800ad66:	75fb      	strb	r3, [r7, #23]
                       APPBLE_GAP_DEVICE_NAME_LENGTH,
                       &gap_service_handle,
                       &gap_dev_name_char_handle,
                       &gap_appearance_char_handle);

    if (ret != BLE_STATUS_SUCCESS)
 800ad68:	7dfb      	ldrb	r3, [r7, #23]
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d005      	beq.n	800ad7a <Ble_Hci_Gap_Gatt_Init+0x1aa>
    {
      APP_DBG_MSG("  Fail   : aci_gap_init command, result: 0x%x \n", ret);
 800ad6e:	7dfb      	ldrb	r3, [r7, #23]
 800ad70:	4619      	mov	r1, r3
 800ad72:	4852      	ldr	r0, [pc, #328]	@ (800aebc <Ble_Hci_Gap_Gatt_Init+0x2ec>)
 800ad74:	f001 f990 	bl	800c098 <iprintf>
 800ad78:	e002      	b.n	800ad80 <Ble_Hci_Gap_Gatt_Init+0x1b0>
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
 800ad7a:	4851      	ldr	r0, [pc, #324]	@ (800aec0 <Ble_Hci_Gap_Gatt_Init+0x2f0>)
 800ad7c:	f001 f9fc 	bl	800c178 <puts>
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 800ad80:	88fc      	ldrh	r4, [r7, #6]
 800ad82:	88bd      	ldrh	r5, [r7, #4]
 800ad84:	68b8      	ldr	r0, [r7, #8]
 800ad86:	f7f5 f9fb 	bl	8000180 <strlen>
 800ad8a:	4603      	mov	r3, r0
 800ad8c:	b2da      	uxtb	r2, r3
 800ad8e:	68bb      	ldr	r3, [r7, #8]
 800ad90:	9300      	str	r3, [sp, #0]
 800ad92:	4613      	mov	r3, r2
 800ad94:	2200      	movs	r2, #0
 800ad96:	4629      	mov	r1, r5
 800ad98:	4620      	mov	r0, r4
 800ad9a:	f7fd f86f 	bl	8007e7c <aci_gatt_update_char_value>
 800ad9e:	4603      	mov	r3, r0
 800ada0:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 800ada2:	88f8      	ldrh	r0, [r7, #6]
 800ada4:	8879      	ldrh	r1, [r7, #2]
 800ada6:	463b      	mov	r3, r7
 800ada8:	9300      	str	r3, [sp, #0]
 800adaa:	2302      	movs	r3, #2
 800adac:	2200      	movs	r2, #0
 800adae:	f7fd f865 	bl	8007e7c <aci_gatt_update_char_value>
 800adb2:	4603      	mov	r3, r0
 800adb4:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 800adb6:	2202      	movs	r2, #2
 800adb8:	2102      	movs	r1, #2
 800adba:	2000      	movs	r0, #0
 800adbc:	f7fd fb3e 	bl	800843c <hci_le_set_default_phy>
 800adc0:	4603      	mov	r3, r0
 800adc2:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800adc4:	7dfb      	ldrb	r3, [r7, #23]
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d005      	beq.n	800add6 <Ble_Hci_Gap_Gatt_Init+0x206>
  {
    APP_DBG_MSG("  Fail   : hci_le_set_default_phy command, result: 0x%x \n", ret);
 800adca:	7dfb      	ldrb	r3, [r7, #23]
 800adcc:	4619      	mov	r1, r3
 800adce:	483d      	ldr	r0, [pc, #244]	@ (800aec4 <Ble_Hci_Gap_Gatt_Init+0x2f4>)
 800add0:	f001 f962 	bl	800c098 <iprintf>
 800add4:	e002      	b.n	800addc <Ble_Hci_Gap_Gatt_Init+0x20c>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_le_set_default_phy command\n");
 800add6:	483c      	ldr	r0, [pc, #240]	@ (800aec8 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 800add8:	f001 f9ce 	bl	800c178 <puts>
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 800addc:	4b3b      	ldr	r3, [pc, #236]	@ (800aecc <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800adde:	2201      	movs	r2, #1
 800ade0:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 800ade2:	4b3a      	ldr	r3, [pc, #232]	@ (800aecc <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800ade4:	781b      	ldrb	r3, [r3, #0]
 800ade6:	4618      	mov	r0, r3
 800ade8:	f7fc fac8 	bl	800737c <aci_gap_set_io_capability>
 800adec:	4603      	mov	r3, r0
 800adee:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800adf0:	7dfb      	ldrb	r3, [r7, #23]
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d005      	beq.n	800ae02 <Ble_Hci_Gap_Gatt_Init+0x232>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_io_capability command, result: 0x%x \n", ret);
 800adf6:	7dfb      	ldrb	r3, [r7, #23]
 800adf8:	4619      	mov	r1, r3
 800adfa:	4835      	ldr	r0, [pc, #212]	@ (800aed0 <Ble_Hci_Gap_Gatt_Init+0x300>)
 800adfc:	f001 f94c 	bl	800c098 <iprintf>
 800ae00:	e002      	b.n	800ae08 <Ble_Hci_Gap_Gatt_Init+0x238>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_io_capability command\n");
 800ae02:	4834      	ldr	r0, [pc, #208]	@ (800aed4 <Ble_Hci_Gap_Gatt_Init+0x304>)
 800ae04:	f001 f9b8 	bl	800c178 <puts>
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 800ae08:	4b30      	ldr	r3, [pc, #192]	@ (800aecc <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800ae0a:	2201      	movs	r2, #1
 800ae0c:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 800ae0e:	4b2f      	ldr	r3, [pc, #188]	@ (800aecc <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800ae10:	2208      	movs	r2, #8
 800ae12:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 800ae14:	4b2d      	ldr	r3, [pc, #180]	@ (800aecc <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800ae16:	2210      	movs	r2, #16
 800ae18:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 800ae1a:	4b2c      	ldr	r3, [pc, #176]	@ (800aecc <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800ae1c:	2200      	movs	r2, #0
 800ae1e:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 800ae20:	4b2a      	ldr	r3, [pc, #168]	@ (800aecc <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800ae22:	4a2d      	ldr	r2, [pc, #180]	@ (800aed8 <Ble_Hci_Gap_Gatt_Init+0x308>)
 800ae24:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 800ae26:	4b29      	ldr	r3, [pc, #164]	@ (800aecc <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800ae28:	2201      	movs	r2, #1
 800ae2a:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 800ae2c:	4b27      	ldr	r3, [pc, #156]	@ (800aecc <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800ae2e:	789c      	ldrb	r4, [r3, #2]
 800ae30:	4b26      	ldr	r3, [pc, #152]	@ (800aecc <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800ae32:	785d      	ldrb	r5, [r3, #1]
 800ae34:	4b25      	ldr	r3, [pc, #148]	@ (800aecc <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800ae36:	791b      	ldrb	r3, [r3, #4]
 800ae38:	4a24      	ldr	r2, [pc, #144]	@ (800aecc <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800ae3a:	7952      	ldrb	r2, [r2, #5]
 800ae3c:	4923      	ldr	r1, [pc, #140]	@ (800aecc <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800ae3e:	78c9      	ldrb	r1, [r1, #3]
 800ae40:	4822      	ldr	r0, [pc, #136]	@ (800aecc <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800ae42:	6880      	ldr	r0, [r0, #8]
 800ae44:	2600      	movs	r6, #0
 800ae46:	9604      	str	r6, [sp, #16]
 800ae48:	9003      	str	r0, [sp, #12]
 800ae4a:	9102      	str	r1, [sp, #8]
 800ae4c:	9201      	str	r2, [sp, #4]
 800ae4e:	9300      	str	r3, [sp, #0]
 800ae50:	2300      	movs	r3, #0
 800ae52:	2201      	movs	r2, #1
 800ae54:	4629      	mov	r1, r5
 800ae56:	4620      	mov	r0, r4
 800ae58:	f7fc fae4 	bl	8007424 <aci_gap_set_authentication_requirement>
 800ae5c:	4603      	mov	r3, r0
 800ae5e:	75fb      	strb	r3, [r7, #23]
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin,
                                               CFG_IDENTITY_ADDRESS);
  if (ret != BLE_STATUS_SUCCESS)
 800ae60:	7dfb      	ldrb	r3, [r7, #23]
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d03c      	beq.n	800aee0 <Ble_Hci_Gap_Gatt_Init+0x310>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_authentication_requirement command, result: 0x%x \n", ret);
 800ae66:	7dfb      	ldrb	r3, [r7, #23]
 800ae68:	4619      	mov	r1, r3
 800ae6a:	481c      	ldr	r0, [pc, #112]	@ (800aedc <Ble_Hci_Gap_Gatt_Init+0x30c>)
 800ae6c:	f001 f914 	bl	800c098 <iprintf>
 800ae70:	e039      	b.n	800aee6 <Ble_Hci_Gap_Gatt_Init+0x316>
 800ae72:	bf00      	nop
 800ae74:	0800dea0 	.word	0x0800dea0
 800ae78:	0800decc 	.word	0x0800decc
 800ae7c:	0800defc 	.word	0x0800defc
 800ae80:	0800df1c 	.word	0x0800df1c
 800ae84:	0800df78 	.word	0x0800df78
 800ae88:	0800dfc4 	.word	0x0800dfc4
 800ae8c:	2000001c 	.word	0x2000001c
 800ae90:	0800e9c4 	.word	0x0800e9c4
 800ae94:	0800e000 	.word	0x0800e000
 800ae98:	0800e058 	.word	0x0800e058
 800ae9c:	0800e9d4 	.word	0x0800e9d4
 800aea0:	0800e0a0 	.word	0x0800e0a0
 800aea4:	0800e0f8 	.word	0x0800e0f8
 800aea8:	0800e140 	.word	0x0800e140
 800aeac:	0800e180 	.word	0x0800e180
 800aeb0:	0800e1b0 	.word	0x0800e1b0
 800aeb4:	0800e1e4 	.word	0x0800e1e4
 800aeb8:	0800e208 	.word	0x0800e208
 800aebc:	0800e214 	.word	0x0800e214
 800aec0:	0800e244 	.word	0x0800e244
 800aec4:	0800e264 	.word	0x0800e264
 800aec8:	0800e2a0 	.word	0x0800e2a0
 800aecc:	200003cc 	.word	0x200003cc
 800aed0:	0800e2cc 	.word	0x0800e2cc
 800aed4:	0800e30c 	.word	0x0800e30c
 800aed8:	0001b207 	.word	0x0001b207
 800aedc:	0800e33c 	.word	0x0800e33c
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_authentication_requirement command\n");
 800aee0:	480e      	ldr	r0, [pc, #56]	@ (800af1c <Ble_Hci_Gap_Gatt_Init+0x34c>)
 800aee2:	f001 f949 	bl	800c178 <puts>
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 800aee6:	4b0e      	ldr	r3, [pc, #56]	@ (800af20 <Ble_Hci_Gap_Gatt_Init+0x350>)
 800aee8:	789b      	ldrb	r3, [r3, #2]
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d00f      	beq.n	800af0e <Ble_Hci_Gap_Gatt_Init+0x33e>
  {
    ret = aci_gap_configure_whitelist();
 800aeee:	f7fc fce3 	bl	80078b8 <aci_gap_configure_filter_accept_list>
 800aef2:	4603      	mov	r3, r0
 800aef4:	75fb      	strb	r3, [r7, #23]
    if (ret != BLE_STATUS_SUCCESS)
 800aef6:	7dfb      	ldrb	r3, [r7, #23]
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d005      	beq.n	800af08 <Ble_Hci_Gap_Gatt_Init+0x338>
    {
      APP_DBG_MSG("  Fail   : aci_gap_configure_whitelist command, result: 0x%x \n", ret);
 800aefc:	7dfb      	ldrb	r3, [r7, #23]
 800aefe:	4619      	mov	r1, r3
 800af00:	4808      	ldr	r0, [pc, #32]	@ (800af24 <Ble_Hci_Gap_Gatt_Init+0x354>)
 800af02:	f001 f8c9 	bl	800c098 <iprintf>
 800af06:	e002      	b.n	800af0e <Ble_Hci_Gap_Gatt_Init+0x33e>
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
 800af08:	4807      	ldr	r0, [pc, #28]	@ (800af28 <Ble_Hci_Gap_Gatt_Init+0x358>)
 800af0a:	f001 f935 	bl	800c178 <puts>
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
 800af0e:	4807      	ldr	r0, [pc, #28]	@ (800af2c <Ble_Hci_Gap_Gatt_Init+0x35c>)
 800af10:	f001 f8c2 	bl	800c098 <iprintf>
}
 800af14:	bf00      	nop
 800af16:	371c      	adds	r7, #28
 800af18:	46bd      	mov	sp, r7
 800af1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af1c:	0800e388 	.word	0x0800e388
 800af20:	200003cc 	.word	0x200003cc
 800af24:	0800e3c4 	.word	0x0800e3c4
 800af28:	0800e404 	.word	0x0800e404
 800af2c:	0800e434 	.word	0x0800e434

0800af30 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 800af30:	b580      	push	{r7, lr}
 800af32:	b08c      	sub	sp, #48	@ 0x30
 800af34:	af08      	add	r7, sp, #32
 800af36:	4603      	mov	r3, r0
 800af38:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800af3a:	2392      	movs	r3, #146	@ 0x92
 800af3c:	72fb      	strb	r3, [r7, #11]
  uint16_t Min_Inter, Max_Inter;

  if (NewStatus == APP_BLE_FAST_ADV)
 800af3e:	79fb      	ldrb	r3, [r7, #7]
 800af40:	2b01      	cmp	r3, #1
 800af42:	d106      	bne.n	800af52 <Adv_Request+0x22>
  {
    Min_Inter = AdvIntervalMin;
 800af44:	4b41      	ldr	r3, [pc, #260]	@ (800b04c <Adv_Request+0x11c>)
 800af46:	881b      	ldrh	r3, [r3, #0]
 800af48:	81fb      	strh	r3, [r7, #14]
    Max_Inter = AdvIntervalMax;
 800af4a:	4b41      	ldr	r3, [pc, #260]	@ (800b050 <Adv_Request+0x120>)
 800af4c:	881b      	ldrh	r3, [r3, #0]
 800af4e:	81bb      	strh	r3, [r7, #12]
 800af50:	e005      	b.n	800af5e <Adv_Request+0x2e>
  }
  else
  {
    Min_Inter = CFG_LP_CONN_ADV_INTERVAL_MIN;
 800af52:	f44f 63c8 	mov.w	r3, #1600	@ 0x640
 800af56:	81fb      	strh	r3, [r7, #14]
    Max_Inter = CFG_LP_CONN_ADV_INTERVAL_MAX;
 800af58:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 800af5c:	81bb      	strh	r3, [r7, #12]

  /**
   * Stop the timer, it will be restarted for a new shot
   * It does not hurt if the timer was not running
   */
  HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 800af5e:	4b3d      	ldr	r3, [pc, #244]	@ (800b054 <Adv_Request+0x124>)
 800af60:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800af64:	4618      	mov	r0, r3
 800af66:	f7f6 fe51 	bl	8001c0c <HW_TS_Stop>

  if ((NewStatus == APP_BLE_LP_ADV)
 800af6a:	79fb      	ldrb	r3, [r7, #7]
 800af6c:	2b02      	cmp	r3, #2
 800af6e:	d119      	bne.n	800afa4 <Adv_Request+0x74>
      && ((BleApplicationContext.Device_Connection_Status == APP_BLE_FAST_ADV)
 800af70:	4b38      	ldr	r3, [pc, #224]	@ (800b054 <Adv_Request+0x124>)
 800af72:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800af76:	2b01      	cmp	r3, #1
 800af78:	d004      	beq.n	800af84 <Adv_Request+0x54>
          || (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_ADV)))
 800af7a:	4b36      	ldr	r3, [pc, #216]	@ (800b054 <Adv_Request+0x124>)
 800af7c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800af80:	2b02      	cmp	r3, #2
 800af82:	d10f      	bne.n	800afa4 <Adv_Request+0x74>
  {
    /* Connection in ADVERTISE mode have to stop the current advertising */
    ret = aci_gap_set_non_discoverable();
 800af84:	f7fc f8dc 	bl	8007140 <aci_gap_set_non_discoverable>
 800af88:	4603      	mov	r3, r0
 800af8a:	72fb      	strb	r3, [r7, #11]
    if (ret != BLE_STATUS_SUCCESS)
 800af8c:	7afb      	ldrb	r3, [r7, #11]
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d005      	beq.n	800af9e <Adv_Request+0x6e>
    {
      APP_DBG_MSG("==>> aci_gap_set_non_discoverable - Stop Advertising Failed , result: %d \n", ret);
 800af92:	7afb      	ldrb	r3, [r7, #11]
 800af94:	4619      	mov	r1, r3
 800af96:	4830      	ldr	r0, [pc, #192]	@ (800b058 <Adv_Request+0x128>)
 800af98:	f001 f87e 	bl	800c098 <iprintf>
 800af9c:	e002      	b.n	800afa4 <Adv_Request+0x74>
    }
    else
    {
      APP_DBG_MSG("==>> aci_gap_set_non_discoverable - Successfully Stopped Advertising \n");
 800af9e:	482f      	ldr	r0, [pc, #188]	@ (800b05c <Adv_Request+0x12c>)
 800afa0:	f001 f8ea 	bl	800c178 <puts>
    }
  }

  BleApplicationContext.Device_Connection_Status = NewStatus;
 800afa4:	4a2b      	ldr	r2, [pc, #172]	@ (800b054 <Adv_Request+0x124>)
 800afa6:	79fb      	ldrb	r3, [r7, #7]
 800afa8:	f882 3080 	strb.w	r3, [r2, #128]	@ 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_IND,
 800afac:	4b29      	ldr	r3, [pc, #164]	@ (800b054 <Adv_Request+0x124>)
 800afae:	7e1b      	ldrb	r3, [r3, #24]
 800afb0:	89ba      	ldrh	r2, [r7, #12]
 800afb2:	89f9      	ldrh	r1, [r7, #14]
 800afb4:	2000      	movs	r0, #0
 800afb6:	9006      	str	r0, [sp, #24]
 800afb8:	2000      	movs	r0, #0
 800afba:	9005      	str	r0, [sp, #20]
 800afbc:	4828      	ldr	r0, [pc, #160]	@ (800b060 <Adv_Request+0x130>)
 800afbe:	9004      	str	r0, [sp, #16]
 800afc0:	9303      	str	r3, [sp, #12]
 800afc2:	4b28      	ldr	r3, [pc, #160]	@ (800b064 <Adv_Request+0x134>)
 800afc4:	9302      	str	r3, [sp, #8]
 800afc6:	230a      	movs	r3, #10
 800afc8:	9301      	str	r3, [sp, #4]
 800afca:	2300      	movs	r3, #0
 800afcc:	9300      	str	r3, [sp, #0]
 800afce:	2300      	movs	r3, #0
 800afd0:	2000      	movs	r0, #0
 800afd2:	f7fc f8d9 	bl	8007188 <aci_gap_set_discoverable>
 800afd6:	4603      	mov	r3, r0
 800afd8:	72fb      	strb	r3, [r7, #11]
                                 (uint8_t*) &a_LocalName,
                                 BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen,
                                 BleApplicationContext.BleApplicationContext_legacy.advtServUUID,
                                 0,
                                 0);
  if (ret != BLE_STATUS_SUCCESS)
 800afda:	7afb      	ldrb	r3, [r7, #11]
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d005      	beq.n	800afec <Adv_Request+0xbc>
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - fail, result: 0x%x \n", ret);
 800afe0:	7afb      	ldrb	r3, [r7, #11]
 800afe2:	4619      	mov	r1, r3
 800afe4:	4820      	ldr	r0, [pc, #128]	@ (800b068 <Adv_Request+0x138>)
 800afe6:	f001 f857 	bl	800c098 <iprintf>
 800afea:	e002      	b.n	800aff2 <Adv_Request+0xc2>
  }
  else
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - Success\n");
 800afec:	481f      	ldr	r0, [pc, #124]	@ (800b06c <Adv_Request+0x13c>)
 800afee:	f001 f8c3 	bl	800c178 <puts>
  }

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_ManufData), (uint8_t*) a_ManufData);
 800aff2:	491f      	ldr	r1, [pc, #124]	@ (800b070 <Adv_Request+0x140>)
 800aff4:	200e      	movs	r0, #14
 800aff6:	f7fc fbed 	bl	80077d4 <aci_gap_update_adv_data>
 800affa:	4603      	mov	r3, r0
 800affc:	72fb      	strb	r3, [r7, #11]
  if (ret != BLE_STATUS_SUCCESS)
 800affe:	7afb      	ldrb	r3, [r7, #11]
 800b000:	2b00      	cmp	r3, #0
 800b002:	d00e      	beq.n	800b022 <Adv_Request+0xf2>
  {
    if (NewStatus == APP_BLE_FAST_ADV)
 800b004:	79fb      	ldrb	r3, [r7, #7]
 800b006:	2b01      	cmp	r3, #1
 800b008:	d105      	bne.n	800b016 <Adv_Request+0xe6>
    {
      APP_DBG_MSG("==>> Start Fast Advertising Failed , result: %d \n\r", ret);
 800b00a:	7afb      	ldrb	r3, [r7, #11]
 800b00c:	4619      	mov	r1, r3
 800b00e:	4819      	ldr	r0, [pc, #100]	@ (800b074 <Adv_Request+0x144>)
 800b010:	f001 f842 	bl	800c098 <iprintf>
    {
      APP_DBG_MSG("==>> Success: Start Low Power Advertising \n\r");
    }
  }

  return;
 800b014:	e017      	b.n	800b046 <Adv_Request+0x116>
      APP_DBG_MSG("==>> Start Low Power Advertising Failed , result: %d \n\r", ret);
 800b016:	7afb      	ldrb	r3, [r7, #11]
 800b018:	4619      	mov	r1, r3
 800b01a:	4817      	ldr	r0, [pc, #92]	@ (800b078 <Adv_Request+0x148>)
 800b01c:	f001 f83c 	bl	800c098 <iprintf>
  return;
 800b020:	e011      	b.n	800b046 <Adv_Request+0x116>
    if (NewStatus == APP_BLE_FAST_ADV)
 800b022:	79fb      	ldrb	r3, [r7, #7]
 800b024:	2b01      	cmp	r3, #1
 800b026:	d10a      	bne.n	800b03e <Adv_Request+0x10e>
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
 800b028:	4814      	ldr	r0, [pc, #80]	@ (800b07c <Adv_Request+0x14c>)
 800b02a:	f001 f835 	bl	800c098 <iprintf>
      HW_TS_Start(BleApplicationContext.Advertising_mgr_timer_Id, INITIAL_ADV_TIMEOUT);
 800b02e:	4b09      	ldr	r3, [pc, #36]	@ (800b054 <Adv_Request+0x124>)
 800b030:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b034:	4912      	ldr	r1, [pc, #72]	@ (800b080 <Adv_Request+0x150>)
 800b036:	4618      	mov	r0, r3
 800b038:	f7f6 fe6c 	bl	8001d14 <HW_TS_Start>
  return;
 800b03c:	e003      	b.n	800b046 <Adv_Request+0x116>
      APP_DBG_MSG("==>> Success: Start Low Power Advertising \n\r");
 800b03e:	4811      	ldr	r0, [pc, #68]	@ (800b084 <Adv_Request+0x154>)
 800b040:	f001 f82a 	bl	800c098 <iprintf>
  return;
 800b044:	bf00      	nop
}
 800b046:	3710      	adds	r7, #16
 800b048:	46bd      	mov	sp, r7
 800b04a:	bd80      	pop	{r7, pc}
 800b04c:	20000454 	.word	0x20000454
 800b050:	20000456 	.word	0x20000456
 800b054:	200003cc 	.word	0x200003cc
 800b058:	0800e460 	.word	0x0800e460
 800b05c:	0800e4ac 	.word	0x0800e4ac
 800b060:	200003e5 	.word	0x200003e5
 800b064:	0800e9e4 	.word	0x0800e9e4
 800b068:	0800e4f4 	.word	0x0800e4f4
 800b06c:	0800e52c 	.word	0x0800e52c
 800b070:	2000001c 	.word	0x2000001c
 800b074:	0800e554 	.word	0x0800e554
 800b078:	0800e588 	.word	0x0800e588
 800b07c:	0800e5c0 	.word	0x0800e5c0
 800b080:	0001e046 	.word	0x0001e046
 800b084:	0800e5e8 	.word	0x0800e5e8

0800b088 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 800b088:	b580      	push	{r7, lr}
 800b08a:	b086      	sub	sp, #24
 800b08c:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 800b08e:	f7ff f897 	bl	800a1c0 <LL_FLASH_GetUDN>
 800b092:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 800b094:	693b      	ldr	r3, [r7, #16]
 800b096:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b09a:	d023      	beq.n	800b0e4 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 800b09c:	f7ff f8a8 	bl	800a1f0 <LL_FLASH_GetSTCompanyID>
 800b0a0:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 800b0a2:	f7ff f899 	bl	800a1d8 <LL_FLASH_GetDeviceID>
 800b0a6:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 800b0a8:	693b      	ldr	r3, [r7, #16]
 800b0aa:	b2da      	uxtb	r2, r3
 800b0ac:	4b16      	ldr	r3, [pc, #88]	@ (800b108 <BleGetBdAddress+0x80>)
 800b0ae:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 800b0b0:	693b      	ldr	r3, [r7, #16]
 800b0b2:	0a1b      	lsrs	r3, r3, #8
 800b0b4:	b2da      	uxtb	r2, r3
 800b0b6:	4b14      	ldr	r3, [pc, #80]	@ (800b108 <BleGetBdAddress+0x80>)
 800b0b8:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	b2da      	uxtb	r2, r3
 800b0be:	4b12      	ldr	r3, [pc, #72]	@ (800b108 <BleGetBdAddress+0x80>)
 800b0c0:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 800b0c2:	68bb      	ldr	r3, [r7, #8]
 800b0c4:	b2da      	uxtb	r2, r3
 800b0c6:	4b10      	ldr	r3, [pc, #64]	@ (800b108 <BleGetBdAddress+0x80>)
 800b0c8:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 800b0ca:	68bb      	ldr	r3, [r7, #8]
 800b0cc:	0a1b      	lsrs	r3, r3, #8
 800b0ce:	b2da      	uxtb	r2, r3
 800b0d0:	4b0d      	ldr	r3, [pc, #52]	@ (800b108 <BleGetBdAddress+0x80>)
 800b0d2:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 800b0d4:	68bb      	ldr	r3, [r7, #8]
 800b0d6:	0c1b      	lsrs	r3, r3, #16
 800b0d8:	b2da      	uxtb	r2, r3
 800b0da:	4b0b      	ldr	r3, [pc, #44]	@ (800b108 <BleGetBdAddress+0x80>)
 800b0dc:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 800b0de:	4b0a      	ldr	r3, [pc, #40]	@ (800b108 <BleGetBdAddress+0x80>)
 800b0e0:	617b      	str	r3, [r7, #20]
 800b0e2:	e00b      	b.n	800b0fc <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 800b0e4:	2000      	movs	r0, #0
 800b0e6:	f7fe fbbb 	bl	8009860 <OTP_Read>
 800b0ea:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d002      	beq.n	800b0f8 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	617b      	str	r3, [r7, #20]
 800b0f6:	e001      	b.n	800b0fc <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 800b0f8:	4b04      	ldr	r3, [pc, #16]	@ (800b10c <BleGetBdAddress+0x84>)
 800b0fa:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 800b0fc:	697b      	ldr	r3, [r7, #20]
}
 800b0fe:	4618      	mov	r0, r3
 800b100:	3718      	adds	r7, #24
 800b102:	46bd      	mov	sp, r7
 800b104:	bd80      	pop	{r7, pc}
 800b106:	bf00      	nop
 800b108:	200003c4 	.word	0x200003c4
 800b10c:	0800e9bc 	.word	0x0800e9bc

0800b110 <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR P2P SERVER
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 800b110:	b580      	push	{r7, lr}
 800b112:	b082      	sub	sp, #8
 800b114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 800b116:	4b10      	ldr	r3, [pc, #64]	@ (800b158 <Adv_Cancel+0x48>)
 800b118:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800b11c:	2b05      	cmp	r3, #5
 800b11e:	d017      	beq.n	800b150 <Adv_Cancel+0x40>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800b120:	2392      	movs	r3, #146	@ 0x92
 800b122:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 800b124:	f7fc f80c 	bl	8007140 <aci_gap_set_non_discoverable>
 800b128:	4603      	mov	r3, r0
 800b12a:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800b12c:	4b0a      	ldr	r3, [pc, #40]	@ (800b158 <Adv_Cancel+0x48>)
 800b12e:	2200      	movs	r2, #0
 800b130:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    if (ret != BLE_STATUS_SUCCESS)
 800b134:	79fb      	ldrb	r3, [r7, #7]
 800b136:	2b00      	cmp	r3, #0
 800b138:	d003      	beq.n	800b142 <Adv_Cancel+0x32>
    {
      APP_DBG_MSG("** STOP ADVERTISING **  Failed \r\n\r");
 800b13a:	4808      	ldr	r0, [pc, #32]	@ (800b15c <Adv_Cancel+0x4c>)
 800b13c:	f000 ffac 	bl	800c098 <iprintf>

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 800b140:	e006      	b.n	800b150 <Adv_Cancel+0x40>
      APP_DBG_MSG("  \r\n\r");
 800b142:	4807      	ldr	r0, [pc, #28]	@ (800b160 <Adv_Cancel+0x50>)
 800b144:	f000 ffa8 	bl	800c098 <iprintf>
      APP_DBG_MSG("** STOP ADVERTISING **  \r\n\r");
 800b148:	4806      	ldr	r0, [pc, #24]	@ (800b164 <Adv_Cancel+0x54>)
 800b14a:	f000 ffa5 	bl	800c098 <iprintf>
  return;
 800b14e:	bf00      	nop
 800b150:	bf00      	nop
}
 800b152:	3708      	adds	r7, #8
 800b154:	46bd      	mov	sp, r7
 800b156:	bd80      	pop	{r7, pc}
 800b158:	200003cc 	.word	0x200003cc
 800b15c:	0800e618 	.word	0x0800e618
 800b160:	0800e63c 	.word	0x0800e63c
 800b164:	0800e644 	.word	0x0800e644

0800b168 <Adv_Cancel_Req>:

static void Adv_Cancel_Req(void)
{
 800b168:	b580      	push	{r7, lr}
 800b16a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_Req_1 */

  /* USER CODE END Adv_Cancel_Req_1 */

  UTIL_SEQ_SetTask(1 << CFG_TASK_ADV_CANCEL_ID, CFG_SCH_PRIO_0);
 800b16c:	2100      	movs	r1, #0
 800b16e:	2001      	movs	r0, #1
 800b170:	f000 fdd4 	bl	800bd1c <UTIL_SEQ_SetTask>

  /* USER CODE BEGIN Adv_Cancel_Req_2 */

  /* USER CODE END Adv_Cancel_Req_2 */

  return;
 800b174:	bf00      	nop
}
 800b176:	bd80      	pop	{r7, pc}

0800b178 <Switch_OFF_GPIO>:

static void Switch_OFF_GPIO()
{
 800b178:	b480      	push	{r7}
 800b17a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Switch_OFF_GPIO */

  /* USER CODE END Switch_OFF_GPIO */
}
 800b17c:	bf00      	nop
 800b17e:	46bd      	mov	sp, r7
 800b180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b184:	4770      	bx	lr
	...

0800b188 <BLE_SVC_L2CAP_Conn_Update>:

#if (L2CAP_REQUEST_NEW_CONN_PARAM != 0)
void BLE_SVC_L2CAP_Conn_Update(uint16_t ConnectionHandle)
{
 800b188:	b590      	push	{r4, r7, lr}
 800b18a:	b089      	sub	sp, #36	@ 0x24
 800b18c:	af02      	add	r7, sp, #8
 800b18e:	4603      	mov	r3, r0
 800b190:	80fb      	strh	r3, [r7, #6]
  /* USER CODE BEGIN BLE_SVC_L2CAP_Conn_Update_1 */

  /* USER CODE END BLE_SVC_L2CAP_Conn_Update_1 */

  if (mutex == 1)
 800b192:	4b29      	ldr	r3, [pc, #164]	@ (800b238 <BLE_SVC_L2CAP_Conn_Update+0xb0>)
 800b194:	781b      	ldrb	r3, [r3, #0]
 800b196:	2b01      	cmp	r3, #1
 800b198:	d149      	bne.n	800b22e <BLE_SVC_L2CAP_Conn_Update+0xa6>
  {
    mutex = 0;
 800b19a:	4b27      	ldr	r3, [pc, #156]	@ (800b238 <BLE_SVC_L2CAP_Conn_Update+0xb0>)
 800b19c:	2200      	movs	r2, #0
 800b19e:	701a      	strb	r2, [r3, #0]
    index_con_int = (index_con_int + 1)%SIZE_TAB_CONN_INT;
 800b1a0:	4b26      	ldr	r3, [pc, #152]	@ (800b23c <BLE_SVC_L2CAP_Conn_Update+0xb4>)
 800b1a2:	781b      	ldrb	r3, [r3, #0]
 800b1a4:	3301      	adds	r3, #1
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	f003 0301 	and.w	r3, r3, #1
 800b1ac:	bfb8      	it	lt
 800b1ae:	425b      	neglt	r3, r3
 800b1b0:	b2da      	uxtb	r2, r3
 800b1b2:	4b22      	ldr	r3, [pc, #136]	@ (800b23c <BLE_SVC_L2CAP_Conn_Update+0xb4>)
 800b1b4:	701a      	strb	r2, [r3, #0]
    uint16_t interval_min = CONN_P(a_ConnInterval[index_con_int]);
 800b1b6:	4b21      	ldr	r3, [pc, #132]	@ (800b23c <BLE_SVC_L2CAP_Conn_Update+0xb4>)
 800b1b8:	781b      	ldrb	r3, [r3, #0]
 800b1ba:	4a21      	ldr	r2, [pc, #132]	@ (800b240 <BLE_SVC_L2CAP_Conn_Update+0xb8>)
 800b1bc:	009b      	lsls	r3, r3, #2
 800b1be:	4413      	add	r3, r2
 800b1c0:	ed93 7a00 	vldr	s14, [r3]
 800b1c4:	eef7 6a04 	vmov.f32	s13, #116	@ 0x3fa00000  1.250
 800b1c8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b1cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b1d0:	ee17 3a90 	vmov	r3, s15
 800b1d4:	82fb      	strh	r3, [r7, #22]
    uint16_t interval_max = CONN_P(a_ConnInterval[index_con_int]);
 800b1d6:	4b19      	ldr	r3, [pc, #100]	@ (800b23c <BLE_SVC_L2CAP_Conn_Update+0xb4>)
 800b1d8:	781b      	ldrb	r3, [r3, #0]
 800b1da:	4a19      	ldr	r2, [pc, #100]	@ (800b240 <BLE_SVC_L2CAP_Conn_Update+0xb8>)
 800b1dc:	009b      	lsls	r3, r3, #2
 800b1de:	4413      	add	r3, r2
 800b1e0:	ed93 7a00 	vldr	s14, [r3]
 800b1e4:	eef7 6a04 	vmov.f32	s13, #116	@ 0x3fa00000  1.250
 800b1e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b1ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b1f0:	ee17 3a90 	vmov	r3, s15
 800b1f4:	82bb      	strh	r3, [r7, #20]
    uint16_t peripheral_latency = L2CAP_PERIPHERAL_LATENCY;
 800b1f6:	2300      	movs	r3, #0
 800b1f8:	827b      	strh	r3, [r7, #18]
    uint16_t timeout_multiplier = L2CAP_TIMEOUT_MULTIPLIER;
 800b1fa:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800b1fe:	823b      	strh	r3, [r7, #16]
    tBleStatus ret;

    ret = aci_l2cap_connection_parameter_update_req(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,
 800b200:	4b10      	ldr	r3, [pc, #64]	@ (800b244 <BLE_SVC_L2CAP_Conn_Update+0xbc>)
 800b202:	8ad8      	ldrh	r0, [r3, #22]
 800b204:	8a7c      	ldrh	r4, [r7, #18]
 800b206:	8aba      	ldrh	r2, [r7, #20]
 800b208:	8af9      	ldrh	r1, [r7, #22]
 800b20a:	8a3b      	ldrh	r3, [r7, #16]
 800b20c:	9300      	str	r3, [sp, #0]
 800b20e:	4623      	mov	r3, r4
 800b210:	f7fd f991 	bl	8008536 <aci_l2cap_connection_parameter_update_req>
 800b214:	4603      	mov	r3, r0
 800b216:	73fb      	strb	r3, [r7, #15]
                                                    interval_min, interval_max,
                                                    peripheral_latency, timeout_multiplier);
    if (ret != BLE_STATUS_SUCCESS)
 800b218:	7bfb      	ldrb	r3, [r7, #15]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d003      	beq.n	800b226 <BLE_SVC_L2CAP_Conn_Update+0x9e>
    {
      APP_DBG_MSG("BLE_SVC_L2CAP_Conn_Update(), Failed \r\n\r");
 800b21e:	480a      	ldr	r0, [pc, #40]	@ (800b248 <BLE_SVC_L2CAP_Conn_Update+0xc0>)
 800b220:	f000 ff3a 	bl	800c098 <iprintf>
  }

  /* USER CODE BEGIN BLE_SVC_L2CAP_Conn_Update_2 */
  /* USER CODE END BLE_SVC_L2CAP_Conn_Update_2 */

  return;
 800b224:	e003      	b.n	800b22e <BLE_SVC_L2CAP_Conn_Update+0xa6>
      APP_DBG_MSG("BLE_SVC_L2CAP_Conn_Update(), Successfully \r\n\r");
 800b226:	4809      	ldr	r0, [pc, #36]	@ (800b24c <BLE_SVC_L2CAP_Conn_Update+0xc4>)
 800b228:	f000 ff36 	bl	800c098 <iprintf>
  return;
 800b22c:	bf00      	nop
 800b22e:	bf00      	nop
}
 800b230:	371c      	adds	r7, #28
 800b232:	46bd      	mov	sp, r7
 800b234:	bd90      	pop	{r4, r7, pc}
 800b236:	bf00      	nop
 800b238:	2000045d 	.word	0x2000045d
 800b23c:	2000045c 	.word	0x2000045c
 800b240:	20000014 	.word	0x20000014
 800b244:	200003cc 	.word	0x200003cc
 800b248:	0800e660 	.word	0x0800e660
 800b24c:	0800e688 	.word	0x0800e688

0800b250 <Connection_Interval_Update_Req>:
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

#if (L2CAP_REQUEST_NEW_CONN_PARAM != 0)
static void Connection_Interval_Update_Req(void)
{
 800b250:	b580      	push	{r7, lr}
 800b252:	af00      	add	r7, sp, #0
  if (BleApplicationContext.Device_Connection_Status != APP_BLE_FAST_ADV && BleApplicationContext.Device_Connection_Status != APP_BLE_IDLE)
 800b254:	4b08      	ldr	r3, [pc, #32]	@ (800b278 <Connection_Interval_Update_Req+0x28>)
 800b256:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800b25a:	2b01      	cmp	r3, #1
 800b25c:	d00a      	beq.n	800b274 <Connection_Interval_Update_Req+0x24>
 800b25e:	4b06      	ldr	r3, [pc, #24]	@ (800b278 <Connection_Interval_Update_Req+0x28>)
 800b260:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800b264:	2b00      	cmp	r3, #0
 800b266:	d005      	beq.n	800b274 <Connection_Interval_Update_Req+0x24>
  {
    BLE_SVC_L2CAP_Conn_Update(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 800b268:	4b03      	ldr	r3, [pc, #12]	@ (800b278 <Connection_Interval_Update_Req+0x28>)
 800b26a:	8adb      	ldrh	r3, [r3, #22]
 800b26c:	4618      	mov	r0, r3
 800b26e:	f7ff ff8b 	bl	800b188 <BLE_SVC_L2CAP_Conn_Update>
  }

  return;
 800b272:	bf00      	nop
 800b274:	bf00      	nop
}
 800b276:	bd80      	pop	{r7, pc}
 800b278:	200003cc 	.word	0x200003cc

0800b27c <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 800b27c:	b580      	push	{r7, lr}
 800b27e:	b082      	sub	sp, #8
 800b280:	af00      	add	r7, sp, #0
 800b282:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800b284:	2100      	movs	r1, #0
 800b286:	2004      	movs	r0, #4
 800b288:	f000 fd48 	bl	800bd1c <UTIL_SEQ_SetTask>

  return;
 800b28c:	bf00      	nop
}
 800b28e:	3708      	adds	r7, #8
 800b290:	46bd      	mov	sp, r7
 800b292:	bd80      	pop	{r7, pc}

0800b294 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 800b294:	b580      	push	{r7, lr}
 800b296:	b082      	sub	sp, #8
 800b298:	af00      	add	r7, sp, #0
 800b29a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800b29c:	2001      	movs	r0, #1
 800b29e:	f000 fda9 	bl	800bdf4 <UTIL_SEQ_SetEvt>

  return;
 800b2a2:	bf00      	nop
}
 800b2a4:	3708      	adds	r7, #8
 800b2a6:	46bd      	mov	sp, r7
 800b2a8:	bd80      	pop	{r7, pc}

0800b2aa <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 800b2aa:	b580      	push	{r7, lr}
 800b2ac:	b082      	sub	sp, #8
 800b2ae:	af00      	add	r7, sp, #0
 800b2b0:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800b2b2:	2001      	movs	r0, #1
 800b2b4:	f000 fdbe 	bl	800be34 <UTIL_SEQ_WaitEvt>

  return;
 800b2b8:	bf00      	nop
}
 800b2ba:	3708      	adds	r7, #8
 800b2bc:	46bd      	mov	sp, r7
 800b2be:	bd80      	pop	{r7, pc}

0800b2c0 <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 800b2c0:	b580      	push	{r7, lr}
 800b2c2:	b084      	sub	sp, #16
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	685b      	ldr	r3, [r3, #4]
 800b2d0:	3308      	adds	r3, #8
 800b2d2:	4618      	mov	r0, r3
 800b2d4:	f7fd fbc2 	bl	8008a5c <SVCCTL_UserEvtRx>
 800b2d8:	4603      	mov	r3, r0
 800b2da:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 800b2dc:	7afb      	ldrb	r3, [r7, #11]
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d003      	beq.n	800b2ea <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	2201      	movs	r2, #1
 800b2e6:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 800b2e8:	e003      	b.n	800b2f2 <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	2200      	movs	r2, #0
 800b2ee:	701a      	strb	r2, [r3, #0]
  return;
 800b2f0:	bf00      	nop
}
 800b2f2:	3710      	adds	r7, #16
 800b2f4:	46bd      	mov	sp, r7
 800b2f6:	bd80      	pop	{r7, pc}

0800b2f8 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 800b2f8:	b580      	push	{r7, lr}
 800b2fa:	b084      	sub	sp, #16
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	4603      	mov	r3, r0
 800b300:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 800b302:	79fb      	ldrb	r3, [r7, #7]
 800b304:	2b00      	cmp	r3, #0
 800b306:	d002      	beq.n	800b30e <BLE_StatusNot+0x16>
 800b308:	2b01      	cmp	r3, #1
 800b30a:	d006      	beq.n	800b31a <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 800b30c:	e00b      	b.n	800b326 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800b30e:	230f      	movs	r3, #15
 800b310:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 800b312:	68f8      	ldr	r0, [r7, #12]
 800b314:	f000 fd2e 	bl	800bd74 <UTIL_SEQ_PauseTask>
      break;
 800b318:	e005      	b.n	800b326 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800b31a:	230f      	movs	r3, #15
 800b31c:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 800b31e:	68f8      	ldr	r0, [r7, #12]
 800b320:	f000 fd48 	bl	800bdb4 <UTIL_SEQ_ResumeTask>
      break;
 800b324:	bf00      	nop
  }

  return;
 800b326:	bf00      	nop
}
 800b328:	3710      	adds	r7, #16
 800b32a:	46bd      	mov	sp, r7
 800b32c:	bd80      	pop	{r7, pc}
	...

0800b330 <P2PS_STM_App_Notification>:
//static void P2PS_APP_LED_BUTTON_context_Init(void);
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void P2PS_STM_App_Notification(P2PS_STM_App_Notification_evt_t *pNotification)
{
 800b330:	b580      	push	{r7, lr}
 800b332:	b082      	sub	sp, #8
 800b334:	af00      	add	r7, sp, #0
 800b336:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_STM_App_Notification_1 */
/* USER CODE END P2PS_STM_App_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	781b      	ldrb	r3, [r3, #0]
 800b33c:	2b03      	cmp	r3, #3
 800b33e:	d01a      	beq.n	800b376 <P2PS_STM_App_Notification+0x46>
 800b340:	2b03      	cmp	r3, #3
 800b342:	dc5f      	bgt.n	800b404 <P2PS_STM_App_Notification+0xd4>
 800b344:	2b00      	cmp	r3, #0
 800b346:	d002      	beq.n	800b34e <P2PS_STM_App_Notification+0x1e>
 800b348:	2b01      	cmp	r3, #1
 800b34a:	d00a      	beq.n	800b362 <P2PS_STM_App_Notification+0x32>

    default:
/* USER CODE BEGIN P2PS_STM_App_Notification_default */
      
/* USER CODE END P2PS_STM_App_Notification_default */
      break;
 800b34c:	e05a      	b.n	800b404 <P2PS_STM_App_Notification+0xd4>
      P2P_Server_App_Context.Notification_Status = 1;
 800b34e:	4b31      	ldr	r3, [pc, #196]	@ (800b414 <P2PS_STM_App_Notification+0xe4>)
 800b350:	2201      	movs	r2, #1
 800b352:	701a      	strb	r2, [r3, #0]
      APP_DBG_MSG("-- P2P APPLICATION SERVER : NOTIFICATION ENABLED\n"); 
 800b354:	4830      	ldr	r0, [pc, #192]	@ (800b418 <P2PS_STM_App_Notification+0xe8>)
 800b356:	f000 ff0f 	bl	800c178 <puts>
      APP_DBG_MSG(" \n\r");
 800b35a:	4830      	ldr	r0, [pc, #192]	@ (800b41c <P2PS_STM_App_Notification+0xec>)
 800b35c:	f000 fe9c 	bl	800c098 <iprintf>
      break;
 800b360:	e053      	b.n	800b40a <P2PS_STM_App_Notification+0xda>
      P2P_Server_App_Context.Notification_Status = 0;
 800b362:	4b2c      	ldr	r3, [pc, #176]	@ (800b414 <P2PS_STM_App_Notification+0xe4>)
 800b364:	2200      	movs	r2, #0
 800b366:	701a      	strb	r2, [r3, #0]
      APP_DBG_MSG("-- P2P APPLICATION SERVER : NOTIFICATION DISABLED\n");
 800b368:	482d      	ldr	r0, [pc, #180]	@ (800b420 <P2PS_STM_App_Notification+0xf0>)
 800b36a:	f000 ff05 	bl	800c178 <puts>
      APP_DBG_MSG(" \n\r");
 800b36e:	482b      	ldr	r0, [pc, #172]	@ (800b41c <P2PS_STM_App_Notification+0xec>)
 800b370:	f000 fe92 	bl	800c098 <iprintf>
      break;
 800b374:	e049      	b.n	800b40a <P2PS_STM_App_Notification+0xda>
      if(pNotification->DataTransfered.pPayload[0] == 0x00){ /* ALL Deviceselected - may be necessary as LB Routeur informs all connection */
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	685b      	ldr	r3, [r3, #4]
 800b37a:	781b      	ldrb	r3, [r3, #0]
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d11d      	bne.n	800b3bc <P2PS_STM_App_Notification+0x8c>
        if(pNotification->DataTransfered.pPayload[1] == 0x01)
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	685b      	ldr	r3, [r3, #4]
 800b384:	3301      	adds	r3, #1
 800b386:	781b      	ldrb	r3, [r3, #0]
 800b388:	2b01      	cmp	r3, #1
 800b38a:	d108      	bne.n	800b39e <P2PS_STM_App_Notification+0x6e>
          APP_DBG_MSG("-- P2P APPLICATION SERVER  : LED1 ON\n"); 
 800b38c:	4825      	ldr	r0, [pc, #148]	@ (800b424 <P2PS_STM_App_Notification+0xf4>)
 800b38e:	f000 fef3 	bl	800c178 <puts>
          APP_DBG_MSG(" \n\r");
 800b392:	4822      	ldr	r0, [pc, #136]	@ (800b41c <P2PS_STM_App_Notification+0xec>)
 800b394:	f000 fe80 	bl	800c098 <iprintf>
          P2P_Server_App_Context.LedControl.Led1=0x01; /* LED1 ON */
 800b398:	4b1e      	ldr	r3, [pc, #120]	@ (800b414 <P2PS_STM_App_Notification+0xe4>)
 800b39a:	2201      	movs	r2, #1
 800b39c:	709a      	strb	r2, [r3, #2]
        if(pNotification->DataTransfered.pPayload[1] == 0x00)
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	685b      	ldr	r3, [r3, #4]
 800b3a2:	3301      	adds	r3, #1
 800b3a4:	781b      	ldrb	r3, [r3, #0]
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d108      	bne.n	800b3bc <P2PS_STM_App_Notification+0x8c>
          APP_DBG_MSG("-- P2P APPLICATION SERVER  : LED1 OFF\n"); 
 800b3aa:	481f      	ldr	r0, [pc, #124]	@ (800b428 <P2PS_STM_App_Notification+0xf8>)
 800b3ac:	f000 fee4 	bl	800c178 <puts>
          APP_DBG_MSG(" \n\r");
 800b3b0:	481a      	ldr	r0, [pc, #104]	@ (800b41c <P2PS_STM_App_Notification+0xec>)
 800b3b2:	f000 fe71 	bl	800c098 <iprintf>
          P2P_Server_App_Context.LedControl.Led1=0x00; /* LED1 OFF */
 800b3b6:	4b17      	ldr	r3, [pc, #92]	@ (800b414 <P2PS_STM_App_Notification+0xe4>)
 800b3b8:	2200      	movs	r2, #0
 800b3ba:	709a      	strb	r2, [r3, #2]
      if(pNotification->DataTransfered.pPayload[0] == 0x01){ /* end device 1 selected - may be necessary as LB Routeur informs all connection */
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	685b      	ldr	r3, [r3, #4]
 800b3c0:	781b      	ldrb	r3, [r3, #0]
 800b3c2:	2b01      	cmp	r3, #1
 800b3c4:	d120      	bne.n	800b408 <P2PS_STM_App_Notification+0xd8>
        if(pNotification->DataTransfered.pPayload[1] == 0x01)
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	685b      	ldr	r3, [r3, #4]
 800b3ca:	3301      	adds	r3, #1
 800b3cc:	781b      	ldrb	r3, [r3, #0]
 800b3ce:	2b01      	cmp	r3, #1
 800b3d0:	d108      	bne.n	800b3e4 <P2PS_STM_App_Notification+0xb4>
          APP_DBG_MSG("-- P2P APPLICATION SERVER 1 : LED1 ON\n"); 
 800b3d2:	4816      	ldr	r0, [pc, #88]	@ (800b42c <P2PS_STM_App_Notification+0xfc>)
 800b3d4:	f000 fed0 	bl	800c178 <puts>
          APP_DBG_MSG(" \n\r");
 800b3d8:	4810      	ldr	r0, [pc, #64]	@ (800b41c <P2PS_STM_App_Notification+0xec>)
 800b3da:	f000 fe5d 	bl	800c098 <iprintf>
          P2P_Server_App_Context.LedControl.Led1=0x01; /* LED1 ON */
 800b3de:	4b0d      	ldr	r3, [pc, #52]	@ (800b414 <P2PS_STM_App_Notification+0xe4>)
 800b3e0:	2201      	movs	r2, #1
 800b3e2:	709a      	strb	r2, [r3, #2]
        if(pNotification->DataTransfered.pPayload[1] == 0x00)
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	685b      	ldr	r3, [r3, #4]
 800b3e8:	3301      	adds	r3, #1
 800b3ea:	781b      	ldrb	r3, [r3, #0]
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d10b      	bne.n	800b408 <P2PS_STM_App_Notification+0xd8>
          APP_DBG_MSG("-- P2P APPLICATION SERVER 1 : LED1 OFF\n"); 
 800b3f0:	480f      	ldr	r0, [pc, #60]	@ (800b430 <P2PS_STM_App_Notification+0x100>)
 800b3f2:	f000 fec1 	bl	800c178 <puts>
          APP_DBG_MSG(" \n\r");
 800b3f6:	4809      	ldr	r0, [pc, #36]	@ (800b41c <P2PS_STM_App_Notification+0xec>)
 800b3f8:	f000 fe4e 	bl	800c098 <iprintf>
          P2P_Server_App_Context.LedControl.Led1=0x00; /* LED1 OFF */
 800b3fc:	4b05      	ldr	r3, [pc, #20]	@ (800b414 <P2PS_STM_App_Notification+0xe4>)
 800b3fe:	2200      	movs	r2, #0
 800b400:	709a      	strb	r2, [r3, #2]
      break;
 800b402:	e001      	b.n	800b408 <P2PS_STM_App_Notification+0xd8>
      break;
 800b404:	bf00      	nop
 800b406:	e000      	b.n	800b40a <P2PS_STM_App_Notification+0xda>
      break;
 800b408:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_STM_App_Notification_2 */

/* USER CODE END P2PS_STM_App_Notification_2 */
  return;
 800b40a:	bf00      	nop
}
 800b40c:	3708      	adds	r7, #8
 800b40e:	46bd      	mov	sp, r7
 800b410:	bd80      	pop	{r7, pc}
 800b412:	bf00      	nop
 800b414:	200020a4 	.word	0x200020a4
 800b418:	0800e6b8 	.word	0x0800e6b8
 800b41c:	0800e6ec 	.word	0x0800e6ec
 800b420:	0800e6f0 	.word	0x0800e6f0
 800b424:	0800e724 	.word	0x0800e724
 800b428:	0800e74c 	.word	0x0800e74c
 800b42c:	0800e774 	.word	0x0800e774
 800b430:	0800e79c 	.word	0x0800e79c

0800b434 <P2PS_APP_Notification>:

void P2PS_APP_Notification(P2PS_APP_ConnHandle_Not_evt_t *pNotification)
{
 800b434:	b480      	push	{r7}
 800b436:	b083      	sub	sp, #12
 800b438:	af00      	add	r7, sp, #0
 800b43a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_APP_Notification_1 */

/* USER CODE END P2PS_APP_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	781b      	ldrb	r3, [r3, #0]
 800b440:	2b00      	cmp	r3, #0
 800b442:	d002      	beq.n	800b44a <P2PS_APP_Notification+0x16>
 800b444:	2b01      	cmp	r3, #1
 800b446:	d002      	beq.n	800b44e <P2PS_APP_Notification+0x1a>

    default:
/* USER CODE BEGIN P2PS_APP_Notification_default */

/* USER CODE END P2PS_APP_Notification_default */
      break;
 800b448:	e002      	b.n	800b450 <P2PS_APP_Notification+0x1c>
    break;
 800b44a:	bf00      	nop
 800b44c:	e000      	b.n	800b450 <P2PS_APP_Notification+0x1c>
    break;
 800b44e:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_APP_Notification_2 */

/* USER CODE END P2PS_APP_Notification_2 */
  return;
 800b450:	bf00      	nop
}
 800b452:	370c      	adds	r7, #12
 800b454:	46bd      	mov	sp, r7
 800b456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b45a:	4770      	bx	lr

0800b45c <P2PS_APP_Init>:

void P2PS_APP_Init(void)
{
 800b45c:	b480      	push	{r7}
 800b45e:	af00      	add	r7, sp, #0
//(FS) Need to attach whatever user function here

  /**
   * Initialize LedButton Service
   */
  P2P_Server_App_Context.Notification_Status=0; 
 800b460:	4b03      	ldr	r3, [pc, #12]	@ (800b470 <P2PS_APP_Init+0x14>)
 800b462:	2200      	movs	r2, #0
 800b464:	701a      	strb	r2, [r3, #0]


  //P2PS_APP_LED_BUTTON_context_Init();
/* USER CODE END P2PS_APP_Init */
  return;
 800b466:	bf00      	nop
}
 800b468:	46bd      	mov	sp, r7
 800b46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b46e:	4770      	bx	lr
 800b470:	200020a4 	.word	0x200020a4

0800b474 <P2PS_APP_SW1_Button_Action>:

}
#endif

void P2PS_APP_SW1_Button_Action(void)
{
 800b474:	b580      	push	{r7, lr}
 800b476:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetTask( 1<<CFG_TASK_SW1_BUTTON_PUSHED_ID, CFG_SCH_PRIO_0);
 800b478:	2100      	movs	r1, #0
 800b47a:	2008      	movs	r0, #8
 800b47c:	f000 fc4e 	bl	800bd1c <UTIL_SEQ_SetTask>

  return;
 800b480:	bf00      	nop
}
 800b482:	bd80      	pop	{r7, pc}

0800b484 <fill_and_send_packet>:




void fill_and_send_packet(void)
{
 800b484:	b590      	push	{r4, r7, lr}
 800b486:	b083      	sub	sp, #12
 800b488:	af00      	add	r7, sp, #0

  // are we streaming ?
  if(P2P_Server_App_Context.Notification_Status){
 800b48a:	4b49      	ldr	r3, [pc, #292]	@ (800b5b0 <fill_and_send_packet+0x12c>)
 800b48c:	781b      	ldrb	r3, [r3, #0]
 800b48e:	2b00      	cmp	r3, #0
 800b490:	f000 8089 	beq.w	800b5a6 <fill_and_send_packet+0x122>

	HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_SET);
 800b494:	2201      	movs	r2, #1
 800b496:	2101      	movs	r1, #1
 800b498:	4846      	ldr	r0, [pc, #280]	@ (800b5b4 <fill_and_send_packet+0x130>)
 800b49a:	f7f8 f92f 	bl	80036fc <HAL_GPIO_WritePin>

    // add a new packet to the buffer
    buffered_packets_array[buffer_index][0] = packet_counter;
 800b49e:	4b46      	ldr	r3, [pc, #280]	@ (800b5b8 <fill_and_send_packet+0x134>)
 800b4a0:	781b      	ldrb	r3, [r3, #0]
 800b4a2:	461a      	mov	r2, r3
 800b4a4:	4b45      	ldr	r3, [pc, #276]	@ (800b5bc <fill_and_send_packet+0x138>)
 800b4a6:	7818      	ldrb	r0, [r3, #0]
 800b4a8:	4945      	ldr	r1, [pc, #276]	@ (800b5c0 <fill_and_send_packet+0x13c>)
 800b4aa:	4613      	mov	r3, r2
 800b4ac:	011b      	lsls	r3, r3, #4
 800b4ae:	1a9b      	subs	r3, r3, r2
 800b4b0:	011b      	lsls	r3, r3, #4
 800b4b2:	4413      	add	r3, r2
 800b4b4:	440b      	add	r3, r1
 800b4b6:	4602      	mov	r2, r0
 800b4b8:	701a      	strb	r2, [r3, #0]

    // index is adjusted to add packet counter at start of packet
    for(int i = 1; i < PACKET_SIZE; i += 3)
 800b4ba:	2301      	movs	r3, #1
 800b4bc:	607b      	str	r3, [r7, #4]
 800b4be:	e042      	b.n	800b546 <fill_and_send_packet+0xc2>
    {
        uint16_t index = i;
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	807b      	strh	r3, [r7, #2]
        // Split 24-bit counter into 3 bytes
        buffered_packets_array[buffer_index][index]     = (sample_counter >> 16) & 0xFF;  // Most significant byte
 800b4c4:	4b3f      	ldr	r3, [pc, #252]	@ (800b5c4 <fill_and_send_packet+0x140>)
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	0c18      	lsrs	r0, r3, #16
 800b4ca:	4b3b      	ldr	r3, [pc, #236]	@ (800b5b8 <fill_and_send_packet+0x134>)
 800b4cc:	781b      	ldrb	r3, [r3, #0]
 800b4ce:	461a      	mov	r2, r3
 800b4d0:	8879      	ldrh	r1, [r7, #2]
 800b4d2:	b2c4      	uxtb	r4, r0
 800b4d4:	483a      	ldr	r0, [pc, #232]	@ (800b5c0 <fill_and_send_packet+0x13c>)
 800b4d6:	4613      	mov	r3, r2
 800b4d8:	011b      	lsls	r3, r3, #4
 800b4da:	1a9b      	subs	r3, r3, r2
 800b4dc:	011b      	lsls	r3, r3, #4
 800b4de:	4413      	add	r3, r2
 800b4e0:	4403      	add	r3, r0
 800b4e2:	440b      	add	r3, r1
 800b4e4:	4622      	mov	r2, r4
 800b4e6:	701a      	strb	r2, [r3, #0]
        buffered_packets_array[buffer_index][index + 1] = (sample_counter >> 8) & 0xFF;   // Middle byte
 800b4e8:	4b36      	ldr	r3, [pc, #216]	@ (800b5c4 <fill_and_send_packet+0x140>)
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	0a18      	lsrs	r0, r3, #8
 800b4ee:	4b32      	ldr	r3, [pc, #200]	@ (800b5b8 <fill_and_send_packet+0x134>)
 800b4f0:	781b      	ldrb	r3, [r3, #0]
 800b4f2:	461a      	mov	r2, r3
 800b4f4:	887b      	ldrh	r3, [r7, #2]
 800b4f6:	1c59      	adds	r1, r3, #1
 800b4f8:	b2c4      	uxtb	r4, r0
 800b4fa:	4831      	ldr	r0, [pc, #196]	@ (800b5c0 <fill_and_send_packet+0x13c>)
 800b4fc:	4613      	mov	r3, r2
 800b4fe:	011b      	lsls	r3, r3, #4
 800b500:	1a9b      	subs	r3, r3, r2
 800b502:	011b      	lsls	r3, r3, #4
 800b504:	4413      	add	r3, r2
 800b506:	4403      	add	r3, r0
 800b508:	440b      	add	r3, r1
 800b50a:	4622      	mov	r2, r4
 800b50c:	701a      	strb	r2, [r3, #0]
        buffered_packets_array[buffer_index][index + 2] = sample_counter & 0xFF;          // Least significant byte
 800b50e:	4b2d      	ldr	r3, [pc, #180]	@ (800b5c4 <fill_and_send_packet+0x140>)
 800b510:	6818      	ldr	r0, [r3, #0]
 800b512:	4b29      	ldr	r3, [pc, #164]	@ (800b5b8 <fill_and_send_packet+0x134>)
 800b514:	781b      	ldrb	r3, [r3, #0]
 800b516:	461a      	mov	r2, r3
 800b518:	887b      	ldrh	r3, [r7, #2]
 800b51a:	1c99      	adds	r1, r3, #2
 800b51c:	b2c4      	uxtb	r4, r0
 800b51e:	4828      	ldr	r0, [pc, #160]	@ (800b5c0 <fill_and_send_packet+0x13c>)
 800b520:	4613      	mov	r3, r2
 800b522:	011b      	lsls	r3, r3, #4
 800b524:	1a9b      	subs	r3, r3, r2
 800b526:	011b      	lsls	r3, r3, #4
 800b528:	4413      	add	r3, r2
 800b52a:	4403      	add	r3, r0
 800b52c:	440b      	add	r3, r1
 800b52e:	4622      	mov	r2, r4
 800b530:	701a      	strb	r2, [r3, #0]

        sample_counter = (sample_counter + 1) & MAX_24BIT_VALUE;
 800b532:	4b24      	ldr	r3, [pc, #144]	@ (800b5c4 <fill_and_send_packet+0x140>)
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	3301      	adds	r3, #1
 800b538:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800b53c:	4a21      	ldr	r2, [pc, #132]	@ (800b5c4 <fill_and_send_packet+0x140>)
 800b53e:	6013      	str	r3, [r2, #0]
    for(int i = 1; i < PACKET_SIZE; i += 3)
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	3303      	adds	r3, #3
 800b544:	607b      	str	r3, [r7, #4]
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	2bf0      	cmp	r3, #240	@ 0xf0
 800b54a:	ddb9      	ble.n	800b4c0 <fill_and_send_packet+0x3c>
    }

    APP_BLE_Send_EEGData_Notification(buffered_packets_array[buffer_index], PACKET_SIZE);
 800b54c:	4b1a      	ldr	r3, [pc, #104]	@ (800b5b8 <fill_and_send_packet+0x134>)
 800b54e:	781b      	ldrb	r3, [r3, #0]
 800b550:	461a      	mov	r2, r3
 800b552:	4613      	mov	r3, r2
 800b554:	011b      	lsls	r3, r3, #4
 800b556:	1a9b      	subs	r3, r3, r2
 800b558:	011b      	lsls	r3, r3, #4
 800b55a:	4413      	add	r3, r2
 800b55c:	4a18      	ldr	r2, [pc, #96]	@ (800b5c0 <fill_and_send_packet+0x13c>)
 800b55e:	4413      	add	r3, r2
 800b560:	21f1      	movs	r1, #241	@ 0xf1
 800b562:	4618      	mov	r0, r3
 800b564:	f7ff fafc 	bl	800ab60 <APP_BLE_Send_EEGData_Notification>

    // increment the buffer index
    buffer_index = (buffer_index + 1) % PACKETBUFFER_DEPTH;
 800b568:	4b13      	ldr	r3, [pc, #76]	@ (800b5b8 <fill_and_send_packet+0x134>)
 800b56a:	781b      	ldrb	r3, [r3, #0]
 800b56c:	1c5a      	adds	r2, r3, #1
 800b56e:	4b16      	ldr	r3, [pc, #88]	@ (800b5c8 <fill_and_send_packet+0x144>)
 800b570:	fb83 1302 	smull	r1, r3, r3, r2
 800b574:	4413      	add	r3, r2
 800b576:	1119      	asrs	r1, r3, #4
 800b578:	17d3      	asrs	r3, r2, #31
 800b57a:	1ac9      	subs	r1, r1, r3
 800b57c:	460b      	mov	r3, r1
 800b57e:	011b      	lsls	r3, r3, #4
 800b580:	1a5b      	subs	r3, r3, r1
 800b582:	005b      	lsls	r3, r3, #1
 800b584:	1ad1      	subs	r1, r2, r3
 800b586:	b2ca      	uxtb	r2, r1
 800b588:	4b0b      	ldr	r3, [pc, #44]	@ (800b5b8 <fill_and_send_packet+0x134>)
 800b58a:	701a      	strb	r2, [r3, #0]
    packet_counter = (packet_counter + 1) % 128;
 800b58c:	4b0b      	ldr	r3, [pc, #44]	@ (800b5bc <fill_and_send_packet+0x138>)
 800b58e:	781b      	ldrb	r3, [r3, #0]
 800b590:	3301      	adds	r3, #1
 800b592:	425a      	negs	r2, r3
 800b594:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b598:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800b59c:	bf58      	it	pl
 800b59e:	4253      	negpl	r3, r2
 800b5a0:	b2da      	uxtb	r2, r3
 800b5a2:	4b06      	ldr	r3, [pc, #24]	@ (800b5bc <fill_and_send_packet+0x138>)
 800b5a4:	701a      	strb	r2, [r3, #0]

  }

}
 800b5a6:	bf00      	nop
 800b5a8:	370c      	adds	r7, #12
 800b5aa:	46bd      	mov	sp, r7
 800b5ac:	bd90      	pop	{r4, r7, pc}
 800b5ae:	bf00      	nop
 800b5b0:	200020a4 	.word	0x200020a4
 800b5b4:	48000400 	.word	0x48000400
 800b5b8:	2000209e 	.word	0x2000209e
 800b5bc:	2000209f 	.word	0x2000209f
 800b5c0:	20000460 	.word	0x20000460
 800b5c4:	200020a0 	.word	0x200020a0
 800b5c8:	88888889 	.word	0x88888889

0800b5cc <LL_PWR_EnableBootC2>:
{
 800b5cc:	b480      	push	{r7}
 800b5ce:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800b5d0:	4b05      	ldr	r3, [pc, #20]	@ (800b5e8 <LL_PWR_EnableBootC2+0x1c>)
 800b5d2:	68db      	ldr	r3, [r3, #12]
 800b5d4:	4a04      	ldr	r2, [pc, #16]	@ (800b5e8 <LL_PWR_EnableBootC2+0x1c>)
 800b5d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b5da:	60d3      	str	r3, [r2, #12]
}
 800b5dc:	bf00      	nop
 800b5de:	46bd      	mov	sp, r7
 800b5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e4:	4770      	bx	lr
 800b5e6:	bf00      	nop
 800b5e8:	58000400 	.word	0x58000400

0800b5ec <LL_C2_EXTI_EnableEvent_32_63>:
{
 800b5ec:	b480      	push	{r7}
 800b5ee:	b083      	sub	sp, #12
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 800b5f4:	4b06      	ldr	r3, [pc, #24]	@ (800b610 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800b5f6:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 800b5fa:	4905      	ldr	r1, [pc, #20]	@ (800b610 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	4313      	orrs	r3, r2
 800b600:	f8c1 30d4 	str.w	r3, [r1, #212]	@ 0xd4
}
 800b604:	bf00      	nop
 800b606:	370c      	adds	r7, #12
 800b608:	46bd      	mov	sp, r7
 800b60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60e:	4770      	bx	lr
 800b610:	58000800 	.word	0x58000800

0800b614 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 800b614:	b480      	push	{r7}
 800b616:	b083      	sub	sp, #12
 800b618:	af00      	add	r7, sp, #0
 800b61a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800b61c:	4b05      	ldr	r3, [pc, #20]	@ (800b634 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800b61e:	6a1a      	ldr	r2, [r3, #32]
 800b620:	4904      	ldr	r1, [pc, #16]	@ (800b634 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	4313      	orrs	r3, r2
 800b626:	620b      	str	r3, [r1, #32]
}
 800b628:	bf00      	nop
 800b62a:	370c      	adds	r7, #12
 800b62c:	46bd      	mov	sp, r7
 800b62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b632:	4770      	bx	lr
 800b634:	58000800 	.word	0x58000800

0800b638 <LL_AHB3_GRP1_EnableClock>:
{
 800b638:	b480      	push	{r7}
 800b63a:	b085      	sub	sp, #20
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800b640:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b644:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b646:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	4313      	orrs	r3, r2
 800b64e:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800b650:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b654:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	4013      	ands	r3, r2
 800b65a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800b65c:	68fb      	ldr	r3, [r7, #12]
}
 800b65e:	bf00      	nop
 800b660:	3714      	adds	r7, #20
 800b662:	46bd      	mov	sp, r7
 800b664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b668:	4770      	bx	lr

0800b66a <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800b66a:	b480      	push	{r7}
 800b66c:	b085      	sub	sp, #20
 800b66e:	af00      	add	r7, sp, #0
 800b670:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 800b672:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b676:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 800b67a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	4313      	orrs	r3, r2
 800b682:	f8c1 3150 	str.w	r3, [r1, #336]	@ 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 800b686:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b68a:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	4013      	ands	r3, r2
 800b692:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800b694:	68fb      	ldr	r3, [r7, #12]
}
 800b696:	bf00      	nop
 800b698:	3714      	adds	r7, #20
 800b69a:	46bd      	mov	sp, r7
 800b69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a0:	4770      	bx	lr

0800b6a2 <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 800b6a2:	b480      	push	{r7}
 800b6a4:	b083      	sub	sp, #12
 800b6a6:	af00      	add	r7, sp, #0
 800b6a8:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	601a      	str	r2, [r3, #0]
}
 800b6b6:	bf00      	nop
 800b6b8:	370c      	adds	r7, #12
 800b6ba:	46bd      	mov	sp, r7
 800b6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c0:	4770      	bx	lr

0800b6c2 <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 800b6c2:	b480      	push	{r7}
 800b6c4:	b083      	sub	sp, #12
 800b6c6:	af00      	add	r7, sp, #0
 800b6c8:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	f043 0201 	orr.w	r2, r3, #1
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	601a      	str	r2, [r3, #0]
}
 800b6d6:	bf00      	nop
 800b6d8:	370c      	adds	r7, #12
 800b6da:	46bd      	mov	sp, r7
 800b6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e0:	4770      	bx	lr

0800b6e2 <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800b6e2:	b480      	push	{r7}
 800b6e4:	b083      	sub	sp, #12
 800b6e6:	af00      	add	r7, sp, #0
 800b6e8:	6078      	str	r0, [r7, #4]
 800b6ea:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	685a      	ldr	r2, [r3, #4]
 800b6f0:	683b      	ldr	r3, [r7, #0]
 800b6f2:	041b      	lsls	r3, r3, #16
 800b6f4:	43db      	mvns	r3, r3
 800b6f6:	401a      	ands	r2, r3
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	605a      	str	r2, [r3, #4]
}
 800b6fc:	bf00      	nop
 800b6fe:	370c      	adds	r7, #12
 800b700:	46bd      	mov	sp, r7
 800b702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b706:	4770      	bx	lr

0800b708 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800b708:	b480      	push	{r7}
 800b70a:	b083      	sub	sp, #12
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	6078      	str	r0, [r7, #4]
 800b710:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	685a      	ldr	r2, [r3, #4]
 800b716:	683b      	ldr	r3, [r7, #0]
 800b718:	041b      	lsls	r3, r3, #16
 800b71a:	431a      	orrs	r2, r3
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	605a      	str	r2, [r3, #4]
}
 800b720:	bf00      	nop
 800b722:	370c      	adds	r7, #12
 800b724:	46bd      	mov	sp, r7
 800b726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b72a:	4770      	bx	lr

0800b72c <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800b72c:	b480      	push	{r7}
 800b72e:	b083      	sub	sp, #12
 800b730:	af00      	add	r7, sp, #0
 800b732:	6078      	str	r0, [r7, #4]
 800b734:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	685a      	ldr	r2, [r3, #4]
 800b73a:	683b      	ldr	r3, [r7, #0]
 800b73c:	43db      	mvns	r3, r3
 800b73e:	401a      	ands	r2, r3
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	605a      	str	r2, [r3, #4]
}
 800b744:	bf00      	nop
 800b746:	370c      	adds	r7, #12
 800b748:	46bd      	mov	sp, r7
 800b74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b74e:	4770      	bx	lr

0800b750 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800b750:	b480      	push	{r7}
 800b752:	b083      	sub	sp, #12
 800b754:	af00      	add	r7, sp, #0
 800b756:	6078      	str	r0, [r7, #4]
 800b758:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	683a      	ldr	r2, [r7, #0]
 800b75e:	609a      	str	r2, [r3, #8]
}
 800b760:	bf00      	nop
 800b762:	370c      	adds	r7, #12
 800b764:	46bd      	mov	sp, r7
 800b766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b76a:	4770      	bx	lr

0800b76c <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800b76c:	b480      	push	{r7}
 800b76e:	b083      	sub	sp, #12
 800b770:	af00      	add	r7, sp, #0
 800b772:	6078      	str	r0, [r7, #4]
 800b774:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800b776:	683b      	ldr	r3, [r7, #0]
 800b778:	041a      	lsls	r2, r3, #16
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	609a      	str	r2, [r3, #8]
}
 800b77e:	bf00      	nop
 800b780:	370c      	adds	r7, #12
 800b782:	46bd      	mov	sp, r7
 800b784:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b788:	4770      	bx	lr

0800b78a <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800b78a:	b480      	push	{r7}
 800b78c:	b083      	sub	sp, #12
 800b78e:	af00      	add	r7, sp, #0
 800b790:	6078      	str	r0, [r7, #4]
 800b792:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	68da      	ldr	r2, [r3, #12]
 800b798:	683b      	ldr	r3, [r7, #0]
 800b79a:	4013      	ands	r3, r2
 800b79c:	683a      	ldr	r2, [r7, #0]
 800b79e:	429a      	cmp	r2, r3
 800b7a0:	d101      	bne.n	800b7a6 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800b7a2:	2301      	movs	r3, #1
 800b7a4:	e000      	b.n	800b7a8 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800b7a6:	2300      	movs	r3, #0
}
 800b7a8:	4618      	mov	r0, r3
 800b7aa:	370c      	adds	r7, #12
 800b7ac:	46bd      	mov	sp, r7
 800b7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b2:	4770      	bx	lr

0800b7b4 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800b7b4:	b480      	push	{r7}
 800b7b6:	b083      	sub	sp, #12
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	6078      	str	r0, [r7, #4]
 800b7bc:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	69da      	ldr	r2, [r3, #28]
 800b7c2:	683b      	ldr	r3, [r7, #0]
 800b7c4:	4013      	ands	r3, r2
 800b7c6:	683a      	ldr	r2, [r7, #0]
 800b7c8:	429a      	cmp	r2, r3
 800b7ca:	d101      	bne.n	800b7d0 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 800b7cc:	2301      	movs	r3, #1
 800b7ce:	e000      	b.n	800b7d2 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 800b7d0:	2300      	movs	r3, #0
}
 800b7d2:	4618      	mov	r0, r3
 800b7d4:	370c      	adds	r7, #12
 800b7d6:	46bd      	mov	sp, r7
 800b7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7dc:	4770      	bx	lr
	...

0800b7e0 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 800b7e0:	b580      	push	{r7, lr}
 800b7e2:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 800b7e4:	2102      	movs	r1, #2
 800b7e6:	4818      	ldr	r0, [pc, #96]	@ (800b848 <HW_IPCC_Rx_Handler+0x68>)
 800b7e8:	f7ff ffe4 	bl	800b7b4 <LL_C2_IPCC_IsActiveFlag_CHx>
 800b7ec:	4603      	mov	r3, r0
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d008      	beq.n	800b804 <HW_IPCC_Rx_Handler+0x24>
 800b7f2:	4b15      	ldr	r3, [pc, #84]	@ (800b848 <HW_IPCC_Rx_Handler+0x68>)
 800b7f4:	685b      	ldr	r3, [r3, #4]
 800b7f6:	f003 0302 	and.w	r3, r3, #2
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d102      	bne.n	800b804 <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 800b7fe:	f000 f8d5 	bl	800b9ac <HW_IPCC_SYS_EvtHandler>
 800b802:	e01e      	b.n	800b842 <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800b804:	2101      	movs	r1, #1
 800b806:	4810      	ldr	r0, [pc, #64]	@ (800b848 <HW_IPCC_Rx_Handler+0x68>)
 800b808:	f7ff ffd4 	bl	800b7b4 <LL_C2_IPCC_IsActiveFlag_CHx>
 800b80c:	4603      	mov	r3, r0
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d008      	beq.n	800b824 <HW_IPCC_Rx_Handler+0x44>
 800b812:	4b0d      	ldr	r3, [pc, #52]	@ (800b848 <HW_IPCC_Rx_Handler+0x68>)
 800b814:	685b      	ldr	r3, [r3, #4]
 800b816:	f003 0301 	and.w	r3, r3, #1
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d102      	bne.n	800b824 <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 800b81e:	f000 f889 	bl	800b934 <HW_IPCC_BLE_EvtHandler>
 800b822:	e00e      	b.n	800b842 <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 800b824:	2108      	movs	r1, #8
 800b826:	4808      	ldr	r0, [pc, #32]	@ (800b848 <HW_IPCC_Rx_Handler+0x68>)
 800b828:	f7ff ffc4 	bl	800b7b4 <LL_C2_IPCC_IsActiveFlag_CHx>
 800b82c:	4603      	mov	r3, r0
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d008      	beq.n	800b844 <HW_IPCC_Rx_Handler+0x64>
 800b832:	4b05      	ldr	r3, [pc, #20]	@ (800b848 <HW_IPCC_Rx_Handler+0x68>)
 800b834:	685b      	ldr	r3, [r3, #4]
 800b836:	f003 0308 	and.w	r3, r3, #8
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d102      	bne.n	800b844 <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 800b83e:	f000 f901 	bl	800ba44 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 800b842:	bf00      	nop
 800b844:	bf00      	nop
}
 800b846:	bd80      	pop	{r7, pc}
 800b848:	58000c00 	.word	0x58000c00

0800b84c <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 800b84c:	b580      	push	{r7, lr}
 800b84e:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800b850:	2102      	movs	r1, #2
 800b852:	4818      	ldr	r0, [pc, #96]	@ (800b8b4 <HW_IPCC_Tx_Handler+0x68>)
 800b854:	f7ff ff99 	bl	800b78a <LL_C1_IPCC_IsActiveFlag_CHx>
 800b858:	4603      	mov	r3, r0
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d108      	bne.n	800b870 <HW_IPCC_Tx_Handler+0x24>
 800b85e:	4b15      	ldr	r3, [pc, #84]	@ (800b8b4 <HW_IPCC_Tx_Handler+0x68>)
 800b860:	685b      	ldr	r3, [r3, #4]
 800b862:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b866:	2b00      	cmp	r3, #0
 800b868:	d102      	bne.n	800b870 <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800b86a:	f000 f893 	bl	800b994 <HW_IPCC_SYS_CmdEvtHandler>
 800b86e:	e01e      	b.n	800b8ae <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800b870:	2108      	movs	r1, #8
 800b872:	4810      	ldr	r0, [pc, #64]	@ (800b8b4 <HW_IPCC_Tx_Handler+0x68>)
 800b874:	f7ff ff89 	bl	800b78a <LL_C1_IPCC_IsActiveFlag_CHx>
 800b878:	4603      	mov	r3, r0
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d108      	bne.n	800b890 <HW_IPCC_Tx_Handler+0x44>
 800b87e:	4b0d      	ldr	r3, [pc, #52]	@ (800b8b4 <HW_IPCC_Tx_Handler+0x68>)
 800b880:	685b      	ldr	r3, [r3, #4]
 800b882:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800b886:	2b00      	cmp	r3, #0
 800b888:	d102      	bne.n	800b890 <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 800b88a:	f000 f8bd 	bl	800ba08 <HW_IPCC_MM_FreeBufHandler>
 800b88e:	e00e      	b.n	800b8ae <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800b890:	2120      	movs	r1, #32
 800b892:	4808      	ldr	r0, [pc, #32]	@ (800b8b4 <HW_IPCC_Tx_Handler+0x68>)
 800b894:	f7ff ff79 	bl	800b78a <LL_C1_IPCC_IsActiveFlag_CHx>
 800b898:	4603      	mov	r3, r0
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d108      	bne.n	800b8b0 <HW_IPCC_Tx_Handler+0x64>
 800b89e:	4b05      	ldr	r3, [pc, #20]	@ (800b8b4 <HW_IPCC_Tx_Handler+0x68>)
 800b8a0:	685b      	ldr	r3, [r3, #4]
 800b8a2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d102      	bne.n	800b8b0 <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 800b8aa:	f000 f84f 	bl	800b94c <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800b8ae:	bf00      	nop
 800b8b0:	bf00      	nop
}
 800b8b2:	bd80      	pop	{r7, pc}
 800b8b4:	58000c00 	.word	0x58000c00

0800b8b8 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 800b8b8:	b580      	push	{r7, lr}
 800b8ba:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 800b8bc:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800b8c0:	f7ff fed3 	bl	800b66a <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 800b8c4:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800b8c8:	f7ff fea4 	bl	800b614 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 800b8cc:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800b8d0:	f7ff fe8c 	bl	800b5ec <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 800b8d4:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800b8d6:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 800b8d8:	f7ff fe78 	bl	800b5cc <LL_PWR_EnableBootC2>

  return;
 800b8dc:	bf00      	nop
}
 800b8de:	bd80      	pop	{r7, pc}

0800b8e0 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 800b8e0:	b580      	push	{r7, lr}
 800b8e2:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 800b8e4:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800b8e8:	f7ff fea6 	bl	800b638 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 800b8ec:	4806      	ldr	r0, [pc, #24]	@ (800b908 <HW_IPCC_Init+0x28>)
 800b8ee:	f7ff fee8 	bl	800b6c2 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800b8f2:	4805      	ldr	r0, [pc, #20]	@ (800b908 <HW_IPCC_Init+0x28>)
 800b8f4:	f7ff fed5 	bl	800b6a2 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800b8f8:	202c      	movs	r0, #44	@ 0x2c
 800b8fa:	f7f7 fa18 	bl	8002d2e <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800b8fe:	202d      	movs	r0, #45	@ 0x2d
 800b900:	f7f7 fa15 	bl	8002d2e <HAL_NVIC_EnableIRQ>

  return;
 800b904:	bf00      	nop
}
 800b906:	bd80      	pop	{r7, pc}
 800b908:	58000c00 	.word	0x58000c00

0800b90c <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 800b90c:	b580      	push	{r7, lr}
 800b90e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800b910:	2101      	movs	r1, #1
 800b912:	4802      	ldr	r0, [pc, #8]	@ (800b91c <HW_IPCC_BLE_Init+0x10>)
 800b914:	f7ff ff0a 	bl	800b72c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800b918:	bf00      	nop
}
 800b91a:	bd80      	pop	{r7, pc}
 800b91c:	58000c00 	.word	0x58000c00

0800b920 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 800b920:	b580      	push	{r7, lr}
 800b922:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 800b924:	2101      	movs	r1, #1
 800b926:	4802      	ldr	r0, [pc, #8]	@ (800b930 <HW_IPCC_BLE_SendCmd+0x10>)
 800b928:	f7ff ff20 	bl	800b76c <LL_C1_IPCC_SetFlag_CHx>

  return;
 800b92c:	bf00      	nop
}
 800b92e:	bd80      	pop	{r7, pc}
 800b930:	58000c00 	.word	0x58000c00

0800b934 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 800b934:	b580      	push	{r7, lr}
 800b936:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 800b938:	f7fd fd3a 	bl	80093b0 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800b93c:	2101      	movs	r1, #1
 800b93e:	4802      	ldr	r0, [pc, #8]	@ (800b948 <HW_IPCC_BLE_EvtHandler+0x14>)
 800b940:	f7ff ff06 	bl	800b750 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800b944:	bf00      	nop
}
 800b946:	bd80      	pop	{r7, pc}
 800b948:	58000c00 	.word	0x58000c00

0800b94c <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 800b94c:	b580      	push	{r7, lr}
 800b94e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 800b950:	2120      	movs	r1, #32
 800b952:	4803      	ldr	r0, [pc, #12]	@ (800b960 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 800b954:	f7ff fed8 	bl	800b708 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 800b958:	f7fd fd5a 	bl	8009410 <HW_IPCC_BLE_AclDataAckNot>

  return;
 800b95c:	bf00      	nop
}
 800b95e:	bd80      	pop	{r7, pc}
 800b960:	58000c00 	.word	0x58000c00

0800b964 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 800b964:	b580      	push	{r7, lr}
 800b966:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800b968:	2102      	movs	r1, #2
 800b96a:	4802      	ldr	r0, [pc, #8]	@ (800b974 <HW_IPCC_SYS_Init+0x10>)
 800b96c:	f7ff fede 	bl	800b72c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800b970:	bf00      	nop
}
 800b972:	bd80      	pop	{r7, pc}
 800b974:	58000c00 	.word	0x58000c00

0800b978 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 800b978:	b580      	push	{r7, lr}
 800b97a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800b97c:	2102      	movs	r1, #2
 800b97e:	4804      	ldr	r0, [pc, #16]	@ (800b990 <HW_IPCC_SYS_SendCmd+0x18>)
 800b980:	f7ff fef4 	bl	800b76c <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800b984:	2102      	movs	r1, #2
 800b986:	4802      	ldr	r0, [pc, #8]	@ (800b990 <HW_IPCC_SYS_SendCmd+0x18>)
 800b988:	f7ff feab 	bl	800b6e2 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 800b98c:	bf00      	nop
}
 800b98e:	bd80      	pop	{r7, pc}
 800b990:	58000c00 	.word	0x58000c00

0800b994 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 800b994:	b580      	push	{r7, lr}
 800b996:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800b998:	2102      	movs	r1, #2
 800b99a:	4803      	ldr	r0, [pc, #12]	@ (800b9a8 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 800b99c:	f7ff feb4 	bl	800b708 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 800b9a0:	f7fd fd86 	bl	80094b0 <HW_IPCC_SYS_CmdEvtNot>

  return;
 800b9a4:	bf00      	nop
}
 800b9a6:	bd80      	pop	{r7, pc}
 800b9a8:	58000c00 	.word	0x58000c00

0800b9ac <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 800b9ac:	b580      	push	{r7, lr}
 800b9ae:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 800b9b0:	f7fd fd94 	bl	80094dc <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800b9b4:	2102      	movs	r1, #2
 800b9b6:	4802      	ldr	r0, [pc, #8]	@ (800b9c0 <HW_IPCC_SYS_EvtHandler+0x14>)
 800b9b8:	f7ff feca 	bl	800b750 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800b9bc:	bf00      	nop
}
 800b9be:	bd80      	pop	{r7, pc}
 800b9c0:	58000c00 	.word	0x58000c00

0800b9c4 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 800b9c4:	b580      	push	{r7, lr}
 800b9c6:	b082      	sub	sp, #8
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 800b9cc:	2108      	movs	r1, #8
 800b9ce:	480c      	ldr	r0, [pc, #48]	@ (800ba00 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800b9d0:	f7ff fedb 	bl	800b78a <LL_C1_IPCC_IsActiveFlag_CHx>
 800b9d4:	4603      	mov	r3, r0
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d007      	beq.n	800b9ea <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 800b9da:	4a0a      	ldr	r2, [pc, #40]	@ (800ba04 <HW_IPCC_MM_SendFreeBuf+0x40>)
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800b9e0:	2108      	movs	r1, #8
 800b9e2:	4807      	ldr	r0, [pc, #28]	@ (800ba00 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800b9e4:	f7ff fe7d 	bl	800b6e2 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 800b9e8:	e006      	b.n	800b9f8 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800b9ee:	2108      	movs	r1, #8
 800b9f0:	4803      	ldr	r0, [pc, #12]	@ (800ba00 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800b9f2:	f7ff febb 	bl	800b76c <LL_C1_IPCC_SetFlag_CHx>
  return;
 800b9f6:	bf00      	nop
}
 800b9f8:	3708      	adds	r7, #8
 800b9fa:	46bd      	mov	sp, r7
 800b9fc:	bd80      	pop	{r7, pc}
 800b9fe:	bf00      	nop
 800ba00:	58000c00 	.word	0x58000c00
 800ba04:	200020ac 	.word	0x200020ac

0800ba08 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 800ba08:	b580      	push	{r7, lr}
 800ba0a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800ba0c:	2108      	movs	r1, #8
 800ba0e:	4806      	ldr	r0, [pc, #24]	@ (800ba28 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800ba10:	f7ff fe7a 	bl	800b708 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 800ba14:	4b05      	ldr	r3, [pc, #20]	@ (800ba2c <HW_IPCC_MM_FreeBufHandler+0x24>)
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800ba1a:	2108      	movs	r1, #8
 800ba1c:	4802      	ldr	r0, [pc, #8]	@ (800ba28 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800ba1e:	f7ff fea5 	bl	800b76c <LL_C1_IPCC_SetFlag_CHx>

  return;
 800ba22:	bf00      	nop
}
 800ba24:	bd80      	pop	{r7, pc}
 800ba26:	bf00      	nop
 800ba28:	58000c00 	.word	0x58000c00
 800ba2c:	200020ac 	.word	0x200020ac

0800ba30 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 800ba30:	b580      	push	{r7, lr}
 800ba32:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 800ba34:	2108      	movs	r1, #8
 800ba36:	4802      	ldr	r0, [pc, #8]	@ (800ba40 <HW_IPCC_TRACES_Init+0x10>)
 800ba38:	f7ff fe78 	bl	800b72c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800ba3c:	bf00      	nop
}
 800ba3e:	bd80      	pop	{r7, pc}
 800ba40:	58000c00 	.word	0x58000c00

0800ba44 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 800ba44:	b580      	push	{r7, lr}
 800ba46:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 800ba48:	f7fd fdf0 	bl	800962c <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 800ba4c:	2108      	movs	r1, #8
 800ba4e:	4802      	ldr	r0, [pc, #8]	@ (800ba58 <HW_IPCC_TRACES_EvtHandler+0x14>)
 800ba50:	f7ff fe7e 	bl	800b750 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800ba54:	bf00      	nop
}
 800ba56:	bd80      	pop	{r7, pc}
 800ba58:	58000c00 	.word	0x58000c00

0800ba5c <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800ba5c:	b480      	push	{r7}
 800ba5e:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800ba60:	4b05      	ldr	r3, [pc, #20]	@ (800ba78 <UTIL_LPM_Init+0x1c>)
 800ba62:	2200      	movs	r2, #0
 800ba64:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800ba66:	4b05      	ldr	r3, [pc, #20]	@ (800ba7c <UTIL_LPM_Init+0x20>)
 800ba68:	2200      	movs	r2, #0
 800ba6a:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800ba6c:	bf00      	nop
 800ba6e:	46bd      	mov	sp, r7
 800ba70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba74:	4770      	bx	lr
 800ba76:	bf00      	nop
 800ba78:	200020b0 	.word	0x200020b0
 800ba7c:	200020b4 	.word	0x200020b4

0800ba80 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800ba80:	b480      	push	{r7}
 800ba82:	b087      	sub	sp, #28
 800ba84:	af00      	add	r7, sp, #0
 800ba86:	6078      	str	r0, [r7, #4]
 800ba88:	460b      	mov	r3, r1
 800ba8a:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ba8c:	f3ef 8310 	mrs	r3, PRIMASK
 800ba90:	613b      	str	r3, [r7, #16]
  return(result);
 800ba92:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800ba94:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ba96:	b672      	cpsid	i
}
 800ba98:	bf00      	nop
  
  switch(state)
 800ba9a:	78fb      	ldrb	r3, [r7, #3]
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d008      	beq.n	800bab2 <UTIL_LPM_SetOffMode+0x32>
 800baa0:	2b01      	cmp	r3, #1
 800baa2:	d10e      	bne.n	800bac2 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800baa4:	4b0d      	ldr	r3, [pc, #52]	@ (800badc <UTIL_LPM_SetOffMode+0x5c>)
 800baa6:	681a      	ldr	r2, [r3, #0]
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	4313      	orrs	r3, r2
 800baac:	4a0b      	ldr	r2, [pc, #44]	@ (800badc <UTIL_LPM_SetOffMode+0x5c>)
 800baae:	6013      	str	r3, [r2, #0]
      break;
 800bab0:	e008      	b.n	800bac4 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	43da      	mvns	r2, r3
 800bab6:	4b09      	ldr	r3, [pc, #36]	@ (800badc <UTIL_LPM_SetOffMode+0x5c>)
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	4013      	ands	r3, r2
 800babc:	4a07      	ldr	r2, [pc, #28]	@ (800badc <UTIL_LPM_SetOffMode+0x5c>)
 800babe:	6013      	str	r3, [r2, #0]
      break;
 800bac0:	e000      	b.n	800bac4 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800bac2:	bf00      	nop
 800bac4:	697b      	ldr	r3, [r7, #20]
 800bac6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	f383 8810 	msr	PRIMASK, r3
}
 800bace:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800bad0:	bf00      	nop
 800bad2:	371c      	adds	r7, #28
 800bad4:	46bd      	mov	sp, r7
 800bad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bada:	4770      	bx	lr
 800badc:	200020b4 	.word	0x200020b4

0800bae0 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800bae0:	b580      	push	{r7, lr}
 800bae2:	b090      	sub	sp, #64	@ 0x40
 800bae4:	af00      	add	r7, sp, #0
 800bae6:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800bae8:	4b73      	ldr	r3, [pc, #460]	@ (800bcb8 <UTIL_SEQ_Run+0x1d8>)
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 800baee:	4b72      	ldr	r3, [pc, #456]	@ (800bcb8 <UTIL_SEQ_Run+0x1d8>)
 800baf0:	681a      	ldr	r2, [r3, #0]
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	4013      	ands	r3, r2
 800baf6:	4a70      	ldr	r2, [pc, #448]	@ (800bcb8 <UTIL_SEQ_Run+0x1d8>)
 800baf8:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800bafa:	4b70      	ldr	r3, [pc, #448]	@ (800bcbc <UTIL_SEQ_Run+0x1dc>)
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 800bb00:	4b6f      	ldr	r3, [pc, #444]	@ (800bcc0 <UTIL_SEQ_Run+0x1e0>)
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 800bb06:	4b6f      	ldr	r3, [pc, #444]	@ (800bcc4 <UTIL_SEQ_Run+0x1e4>)
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 800bb0c:	4b6e      	ldr	r3, [pc, #440]	@ (800bcc8 <UTIL_SEQ_Run+0x1e8>)
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800bb12:	e08d      	b.n	800bc30 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 800bb14:	2300      	movs	r3, #0
 800bb16:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800bb18:	e002      	b.n	800bb20 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 800bb1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb1c:	3301      	adds	r3, #1
 800bb1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800bb20:	4a6a      	ldr	r2, [pc, #424]	@ (800bccc <UTIL_SEQ_Run+0x1ec>)
 800bb22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb24:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800bb28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb2a:	401a      	ands	r2, r3
 800bb2c:	4b62      	ldr	r3, [pc, #392]	@ (800bcb8 <UTIL_SEQ_Run+0x1d8>)
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	4013      	ands	r3, r2
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d0f1      	beq.n	800bb1a <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800bb36:	4a65      	ldr	r2, [pc, #404]	@ (800bccc <UTIL_SEQ_Run+0x1ec>)
 800bb38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb3a:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800bb3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb40:	401a      	ands	r2, r3
 800bb42:	4b5d      	ldr	r3, [pc, #372]	@ (800bcb8 <UTIL_SEQ_Run+0x1d8>)
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	4013      	ands	r3, r2
 800bb48:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800bb4a:	4a60      	ldr	r2, [pc, #384]	@ (800bccc <UTIL_SEQ_Run+0x1ec>)
 800bb4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb4e:	00db      	lsls	r3, r3, #3
 800bb50:	4413      	add	r3, r2
 800bb52:	685a      	ldr	r2, [r3, #4]
 800bb54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb56:	4013      	ands	r3, r2
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d106      	bne.n	800bb6a <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800bb5c:	4a5b      	ldr	r2, [pc, #364]	@ (800bccc <UTIL_SEQ_Run+0x1ec>)
 800bb5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb60:	00db      	lsls	r3, r3, #3
 800bb62:	4413      	add	r3, r2
 800bb64:	f04f 32ff 	mov.w	r2, #4294967295
 800bb68:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800bb6a:	4a58      	ldr	r2, [pc, #352]	@ (800bccc <UTIL_SEQ_Run+0x1ec>)
 800bb6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb6e:	00db      	lsls	r3, r3, #3
 800bb70:	4413      	add	r3, r2
 800bb72:	685a      	ldr	r2, [r3, #4]
 800bb74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb76:	4013      	ands	r3, r2
 800bb78:	4618      	mov	r0, r3
 800bb7a:	f000 f9b3 	bl	800bee4 <SEQ_BitPosition>
 800bb7e:	4603      	mov	r3, r0
 800bb80:	461a      	mov	r2, r3
 800bb82:	4b53      	ldr	r3, [pc, #332]	@ (800bcd0 <UTIL_SEQ_Run+0x1f0>)
 800bb84:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800bb86:	4a51      	ldr	r2, [pc, #324]	@ (800bccc <UTIL_SEQ_Run+0x1ec>)
 800bb88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb8a:	00db      	lsls	r3, r3, #3
 800bb8c:	4413      	add	r3, r2
 800bb8e:	685a      	ldr	r2, [r3, #4]
 800bb90:	4b4f      	ldr	r3, [pc, #316]	@ (800bcd0 <UTIL_SEQ_Run+0x1f0>)
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	2101      	movs	r1, #1
 800bb96:	fa01 f303 	lsl.w	r3, r1, r3
 800bb9a:	43db      	mvns	r3, r3
 800bb9c:	401a      	ands	r2, r3
 800bb9e:	494b      	ldr	r1, [pc, #300]	@ (800bccc <UTIL_SEQ_Run+0x1ec>)
 800bba0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bba2:	00db      	lsls	r3, r3, #3
 800bba4:	440b      	add	r3, r1
 800bba6:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bba8:	f3ef 8310 	mrs	r3, PRIMASK
 800bbac:	61bb      	str	r3, [r7, #24]
  return(result);
 800bbae:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800bbb0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800bbb2:	b672      	cpsid	i
}
 800bbb4:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800bbb6:	4b46      	ldr	r3, [pc, #280]	@ (800bcd0 <UTIL_SEQ_Run+0x1f0>)
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	2201      	movs	r2, #1
 800bbbc:	fa02 f303 	lsl.w	r3, r2, r3
 800bbc0:	43da      	mvns	r2, r3
 800bbc2:	4b3e      	ldr	r3, [pc, #248]	@ (800bcbc <UTIL_SEQ_Run+0x1dc>)
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	4013      	ands	r3, r2
 800bbc8:	4a3c      	ldr	r2, [pc, #240]	@ (800bcbc <UTIL_SEQ_Run+0x1dc>)
 800bbca:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800bbcc:	2301      	movs	r3, #1
 800bbce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bbd0:	e013      	b.n	800bbfa <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800bbd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bbd4:	3b01      	subs	r3, #1
 800bbd6:	4a3d      	ldr	r2, [pc, #244]	@ (800bccc <UTIL_SEQ_Run+0x1ec>)
 800bbd8:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800bbdc:	4b3c      	ldr	r3, [pc, #240]	@ (800bcd0 <UTIL_SEQ_Run+0x1f0>)
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	2201      	movs	r2, #1
 800bbe2:	fa02 f303 	lsl.w	r3, r2, r3
 800bbe6:	43da      	mvns	r2, r3
 800bbe8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bbea:	3b01      	subs	r3, #1
 800bbec:	400a      	ands	r2, r1
 800bbee:	4937      	ldr	r1, [pc, #220]	@ (800bccc <UTIL_SEQ_Run+0x1ec>)
 800bbf0:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800bbf4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bbf6:	3b01      	subs	r3, #1
 800bbf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bbfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d1e8      	bne.n	800bbd2 <UTIL_SEQ_Run+0xf2>
 800bc00:	6a3b      	ldr	r3, [r7, #32]
 800bc02:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bc04:	697b      	ldr	r3, [r7, #20]
 800bc06:	f383 8810 	msr	PRIMASK, r3
}
 800bc0a:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800bc0c:	4b30      	ldr	r3, [pc, #192]	@ (800bcd0 <UTIL_SEQ_Run+0x1f0>)
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	4a30      	ldr	r2, [pc, #192]	@ (800bcd4 <UTIL_SEQ_Run+0x1f4>)
 800bc12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bc16:	4798      	blx	r3

    local_taskset = TaskSet;
 800bc18:	4b28      	ldr	r3, [pc, #160]	@ (800bcbc <UTIL_SEQ_Run+0x1dc>)
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 800bc1e:	4b28      	ldr	r3, [pc, #160]	@ (800bcc0 <UTIL_SEQ_Run+0x1e0>)
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 800bc24:	4b27      	ldr	r3, [pc, #156]	@ (800bcc4 <UTIL_SEQ_Run+0x1e4>)
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 800bc2a:	4b27      	ldr	r3, [pc, #156]	@ (800bcc8 <UTIL_SEQ_Run+0x1e8>)
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800bc30:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bc32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc34:	401a      	ands	r2, r3
 800bc36:	4b20      	ldr	r3, [pc, #128]	@ (800bcb8 <UTIL_SEQ_Run+0x1d8>)
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	4013      	ands	r3, r2
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d005      	beq.n	800bc4c <UTIL_SEQ_Run+0x16c>
 800bc40:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bc42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc44:	4013      	ands	r3, r2
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	f43f af64 	beq.w	800bb14 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800bc4c:	4b20      	ldr	r3, [pc, #128]	@ (800bcd0 <UTIL_SEQ_Run+0x1f0>)
 800bc4e:	f04f 32ff 	mov.w	r2, #4294967295
 800bc52:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800bc54:	f000 f938 	bl	800bec8 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bc58:	f3ef 8310 	mrs	r3, PRIMASK
 800bc5c:	613b      	str	r3, [r7, #16]
  return(result);
 800bc5e:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800bc60:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800bc62:	b672      	cpsid	i
}
 800bc64:	bf00      	nop
  local_taskset = TaskSet;
 800bc66:	4b15      	ldr	r3, [pc, #84]	@ (800bcbc <UTIL_SEQ_Run+0x1dc>)
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 800bc6c:	4b14      	ldr	r3, [pc, #80]	@ (800bcc0 <UTIL_SEQ_Run+0x1e0>)
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 800bc72:	4b14      	ldr	r3, [pc, #80]	@ (800bcc4 <UTIL_SEQ_Run+0x1e4>)
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800bc78:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bc7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc7c:	401a      	ands	r2, r3
 800bc7e:	4b0e      	ldr	r3, [pc, #56]	@ (800bcb8 <UTIL_SEQ_Run+0x1d8>)
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	4013      	ands	r3, r2
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d107      	bne.n	800bc98 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 800bc88:	4b0f      	ldr	r3, [pc, #60]	@ (800bcc8 <UTIL_SEQ_Run+0x1e8>)
 800bc8a:	681a      	ldr	r2, [r3, #0]
 800bc8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc8e:	4013      	ands	r3, r2
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d101      	bne.n	800bc98 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 800bc94:	f7f5 fa05 	bl	80010a2 <UTIL_SEQ_Idle>
 800bc98:	69fb      	ldr	r3, [r7, #28]
 800bc9a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	f383 8810 	msr	PRIMASK, r3
}
 800bca2:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 800bca4:	f000 f917 	bl	800bed6 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800bca8:	4a03      	ldr	r2, [pc, #12]	@ (800bcb8 <UTIL_SEQ_Run+0x1d8>)
 800bcaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bcac:	6013      	str	r3, [r2, #0]

  return;
 800bcae:	bf00      	nop
}
 800bcb0:	3740      	adds	r7, #64	@ 0x40
 800bcb2:	46bd      	mov	sp, r7
 800bcb4:	bd80      	pop	{r7, pc}
 800bcb6:	bf00      	nop
 800bcb8:	20000030 	.word	0x20000030
 800bcbc:	200020b8 	.word	0x200020b8
 800bcc0:	200020bc 	.word	0x200020bc
 800bcc4:	2000002c 	.word	0x2000002c
 800bcc8:	200020c0 	.word	0x200020c0
 800bccc:	20002148 	.word	0x20002148
 800bcd0:	200020c4 	.word	0x200020c4
 800bcd4:	200020c8 	.word	0x200020c8

0800bcd8 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800bcd8:	b580      	push	{r7, lr}
 800bcda:	b088      	sub	sp, #32
 800bcdc:	af00      	add	r7, sp, #0
 800bcde:	60f8      	str	r0, [r7, #12]
 800bce0:	60b9      	str	r1, [r7, #8]
 800bce2:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bce4:	f3ef 8310 	mrs	r3, PRIMASK
 800bce8:	617b      	str	r3, [r7, #20]
  return(result);
 800bcea:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800bcec:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800bcee:	b672      	cpsid	i
}
 800bcf0:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800bcf2:	68f8      	ldr	r0, [r7, #12]
 800bcf4:	f000 f8f6 	bl	800bee4 <SEQ_BitPosition>
 800bcf8:	4603      	mov	r3, r0
 800bcfa:	4619      	mov	r1, r3
 800bcfc:	4a06      	ldr	r2, [pc, #24]	@ (800bd18 <UTIL_SEQ_RegTask+0x40>)
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800bd04:	69fb      	ldr	r3, [r7, #28]
 800bd06:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bd08:	69bb      	ldr	r3, [r7, #24]
 800bd0a:	f383 8810 	msr	PRIMASK, r3
}
 800bd0e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800bd10:	bf00      	nop
}
 800bd12:	3720      	adds	r7, #32
 800bd14:	46bd      	mov	sp, r7
 800bd16:	bd80      	pop	{r7, pc}
 800bd18:	200020c8 	.word	0x200020c8

0800bd1c <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800bd1c:	b480      	push	{r7}
 800bd1e:	b087      	sub	sp, #28
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	6078      	str	r0, [r7, #4]
 800bd24:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bd26:	f3ef 8310 	mrs	r3, PRIMASK
 800bd2a:	60fb      	str	r3, [r7, #12]
  return(result);
 800bd2c:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800bd2e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800bd30:	b672      	cpsid	i
}
 800bd32:	bf00      	nop

  TaskSet |= TaskId_bm;
 800bd34:	4b0d      	ldr	r3, [pc, #52]	@ (800bd6c <UTIL_SEQ_SetTask+0x50>)
 800bd36:	681a      	ldr	r2, [r3, #0]
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	4313      	orrs	r3, r2
 800bd3c:	4a0b      	ldr	r2, [pc, #44]	@ (800bd6c <UTIL_SEQ_SetTask+0x50>)
 800bd3e:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800bd40:	4a0b      	ldr	r2, [pc, #44]	@ (800bd70 <UTIL_SEQ_SetTask+0x54>)
 800bd42:	683b      	ldr	r3, [r7, #0]
 800bd44:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	431a      	orrs	r2, r3
 800bd4c:	4908      	ldr	r1, [pc, #32]	@ (800bd70 <UTIL_SEQ_SetTask+0x54>)
 800bd4e:	683b      	ldr	r3, [r7, #0]
 800bd50:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800bd54:	697b      	ldr	r3, [r7, #20]
 800bd56:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bd58:	693b      	ldr	r3, [r7, #16]
 800bd5a:	f383 8810 	msr	PRIMASK, r3
}
 800bd5e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800bd60:	bf00      	nop
}
 800bd62:	371c      	adds	r7, #28
 800bd64:	46bd      	mov	sp, r7
 800bd66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd6a:	4770      	bx	lr
 800bd6c:	200020b8 	.word	0x200020b8
 800bd70:	20002148 	.word	0x20002148

0800bd74 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800bd74:	b480      	push	{r7}
 800bd76:	b087      	sub	sp, #28
 800bd78:	af00      	add	r7, sp, #0
 800bd7a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bd7c:	f3ef 8310 	mrs	r3, PRIMASK
 800bd80:	60fb      	str	r3, [r7, #12]
  return(result);
 800bd82:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800bd84:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800bd86:	b672      	cpsid	i
}
 800bd88:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	43da      	mvns	r2, r3
 800bd8e:	4b08      	ldr	r3, [pc, #32]	@ (800bdb0 <UTIL_SEQ_PauseTask+0x3c>)
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	4013      	ands	r3, r2
 800bd94:	4a06      	ldr	r2, [pc, #24]	@ (800bdb0 <UTIL_SEQ_PauseTask+0x3c>)
 800bd96:	6013      	str	r3, [r2, #0]
 800bd98:	697b      	ldr	r3, [r7, #20]
 800bd9a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bd9c:	693b      	ldr	r3, [r7, #16]
 800bd9e:	f383 8810 	msr	PRIMASK, r3
}
 800bda2:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800bda4:	bf00      	nop
}
 800bda6:	371c      	adds	r7, #28
 800bda8:	46bd      	mov	sp, r7
 800bdaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdae:	4770      	bx	lr
 800bdb0:	2000002c 	.word	0x2000002c

0800bdb4 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800bdb4:	b480      	push	{r7}
 800bdb6:	b087      	sub	sp, #28
 800bdb8:	af00      	add	r7, sp, #0
 800bdba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bdbc:	f3ef 8310 	mrs	r3, PRIMASK
 800bdc0:	60fb      	str	r3, [r7, #12]
  return(result);
 800bdc2:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800bdc4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800bdc6:	b672      	cpsid	i
}
 800bdc8:	bf00      	nop

  TaskMask |= TaskId_bm;
 800bdca:	4b09      	ldr	r3, [pc, #36]	@ (800bdf0 <UTIL_SEQ_ResumeTask+0x3c>)
 800bdcc:	681a      	ldr	r2, [r3, #0]
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	4313      	orrs	r3, r2
 800bdd2:	4a07      	ldr	r2, [pc, #28]	@ (800bdf0 <UTIL_SEQ_ResumeTask+0x3c>)
 800bdd4:	6013      	str	r3, [r2, #0]
 800bdd6:	697b      	ldr	r3, [r7, #20]
 800bdd8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bdda:	693b      	ldr	r3, [r7, #16]
 800bddc:	f383 8810 	msr	PRIMASK, r3
}
 800bde0:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800bde2:	bf00      	nop
}
 800bde4:	371c      	adds	r7, #28
 800bde6:	46bd      	mov	sp, r7
 800bde8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdec:	4770      	bx	lr
 800bdee:	bf00      	nop
 800bdf0:	2000002c 	.word	0x2000002c

0800bdf4 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800bdf4:	b480      	push	{r7}
 800bdf6:	b087      	sub	sp, #28
 800bdf8:	af00      	add	r7, sp, #0
 800bdfa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bdfc:	f3ef 8310 	mrs	r3, PRIMASK
 800be00:	60fb      	str	r3, [r7, #12]
  return(result);
 800be02:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800be04:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800be06:	b672      	cpsid	i
}
 800be08:	bf00      	nop

  EvtSet |= EvtId_bm;
 800be0a:	4b09      	ldr	r3, [pc, #36]	@ (800be30 <UTIL_SEQ_SetEvt+0x3c>)
 800be0c:	681a      	ldr	r2, [r3, #0]
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	4313      	orrs	r3, r2
 800be12:	4a07      	ldr	r2, [pc, #28]	@ (800be30 <UTIL_SEQ_SetEvt+0x3c>)
 800be14:	6013      	str	r3, [r2, #0]
 800be16:	697b      	ldr	r3, [r7, #20]
 800be18:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800be1a:	693b      	ldr	r3, [r7, #16]
 800be1c:	f383 8810 	msr	PRIMASK, r3
}
 800be20:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800be22:	bf00      	nop
}
 800be24:	371c      	adds	r7, #28
 800be26:	46bd      	mov	sp, r7
 800be28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be2c:	4770      	bx	lr
 800be2e:	bf00      	nop
 800be30:	200020bc 	.word	0x200020bc

0800be34 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800be34:	b580      	push	{r7, lr}
 800be36:	b088      	sub	sp, #32
 800be38:	af00      	add	r7, sp, #0
 800be3a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800be3c:	4b1f      	ldr	r3, [pc, #124]	@ (800bebc <UTIL_SEQ_WaitEvt+0x88>)
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800be42:	4b1e      	ldr	r3, [pc, #120]	@ (800bebc <UTIL_SEQ_WaitEvt+0x88>)
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be4a:	d102      	bne.n	800be52 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 800be4c:	2300      	movs	r3, #0
 800be4e:	61fb      	str	r3, [r7, #28]
 800be50:	e005      	b.n	800be5e <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 800be52:	4b1a      	ldr	r3, [pc, #104]	@ (800bebc <UTIL_SEQ_WaitEvt+0x88>)
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	2201      	movs	r2, #1
 800be58:	fa02 f303 	lsl.w	r3, r2, r3
 800be5c:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800be5e:	4b18      	ldr	r3, [pc, #96]	@ (800bec0 <UTIL_SEQ_WaitEvt+0x8c>)
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 800be64:	4a16      	ldr	r2, [pc, #88]	@ (800bec0 <UTIL_SEQ_WaitEvt+0x8c>)
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 800be6a:	e003      	b.n	800be74 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 800be6c:	6879      	ldr	r1, [r7, #4]
 800be6e:	69f8      	ldr	r0, [r7, #28]
 800be70:	f7f5 f91e 	bl	80010b0 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 800be74:	4b13      	ldr	r3, [pc, #76]	@ (800bec4 <UTIL_SEQ_WaitEvt+0x90>)
 800be76:	681a      	ldr	r2, [r3, #0]
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	4013      	ands	r3, r2
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d0f5      	beq.n	800be6c <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 800be80:	4a0e      	ldr	r2, [pc, #56]	@ (800bebc <UTIL_SEQ_WaitEvt+0x88>)
 800be82:	69bb      	ldr	r3, [r7, #24]
 800be84:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800be86:	f3ef 8310 	mrs	r3, PRIMASK
 800be8a:	60bb      	str	r3, [r7, #8]
  return(result);
 800be8c:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800be8e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800be90:	b672      	cpsid	i
}
 800be92:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	43da      	mvns	r2, r3
 800be98:	4b0a      	ldr	r3, [pc, #40]	@ (800bec4 <UTIL_SEQ_WaitEvt+0x90>)
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	4013      	ands	r3, r2
 800be9e:	4a09      	ldr	r2, [pc, #36]	@ (800bec4 <UTIL_SEQ_WaitEvt+0x90>)
 800bea0:	6013      	str	r3, [r2, #0]
 800bea2:	693b      	ldr	r3, [r7, #16]
 800bea4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	f383 8810 	msr	PRIMASK, r3
}
 800beac:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 800beae:	4a04      	ldr	r2, [pc, #16]	@ (800bec0 <UTIL_SEQ_WaitEvt+0x8c>)
 800beb0:	697b      	ldr	r3, [r7, #20]
 800beb2:	6013      	str	r3, [r2, #0]
  return;
 800beb4:	bf00      	nop
}
 800beb6:	3720      	adds	r7, #32
 800beb8:	46bd      	mov	sp, r7
 800beba:	bd80      	pop	{r7, pc}
 800bebc:	200020c4 	.word	0x200020c4
 800bec0:	200020c0 	.word	0x200020c0
 800bec4:	200020bc 	.word	0x200020bc

0800bec8 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800bec8:	b480      	push	{r7}
 800beca:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800becc:	bf00      	nop
}
 800bece:	46bd      	mov	sp, r7
 800bed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed4:	4770      	bx	lr

0800bed6 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800bed6:	b480      	push	{r7}
 800bed8:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800beda:	bf00      	nop
}
 800bedc:	46bd      	mov	sp, r7
 800bede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee2:	4770      	bx	lr

0800bee4 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800bee4:	b480      	push	{r7}
 800bee6:	b085      	sub	sp, #20
 800bee8:	af00      	add	r7, sp, #0
 800beea:	6078      	str	r0, [r7, #4]
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	60fb      	str	r3, [r7, #12]
  if (value == 0U)
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d101      	bne.n	800befa <SEQ_BitPosition+0x16>
    return 32U;
 800bef6:	2320      	movs	r3, #32
 800bef8:	e003      	b.n	800bf02 <SEQ_BitPosition+0x1e>
  return __builtin_clz(value);
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	fab3 f383 	clz	r3, r3
 800bf00:	b2db      	uxtb	r3, r3
  return (uint8_t)(31 -__CLZ( Value ));
 800bf02:	f1c3 031f 	rsb	r3, r3, #31
 800bf06:	b2db      	uxtb	r3, r3
}
 800bf08:	4618      	mov	r0, r3
 800bf0a:	3714      	adds	r7, #20
 800bf0c:	46bd      	mov	sp, r7
 800bf0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf12:	4770      	bx	lr

0800bf14 <std>:
 800bf14:	2300      	movs	r3, #0
 800bf16:	b510      	push	{r4, lr}
 800bf18:	4604      	mov	r4, r0
 800bf1a:	e9c0 3300 	strd	r3, r3, [r0]
 800bf1e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bf22:	6083      	str	r3, [r0, #8]
 800bf24:	8181      	strh	r1, [r0, #12]
 800bf26:	6643      	str	r3, [r0, #100]	@ 0x64
 800bf28:	81c2      	strh	r2, [r0, #14]
 800bf2a:	6183      	str	r3, [r0, #24]
 800bf2c:	4619      	mov	r1, r3
 800bf2e:	2208      	movs	r2, #8
 800bf30:	305c      	adds	r0, #92	@ 0x5c
 800bf32:	f000 fa21 	bl	800c378 <memset>
 800bf36:	4b0d      	ldr	r3, [pc, #52]	@ (800bf6c <std+0x58>)
 800bf38:	6263      	str	r3, [r4, #36]	@ 0x24
 800bf3a:	4b0d      	ldr	r3, [pc, #52]	@ (800bf70 <std+0x5c>)
 800bf3c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800bf3e:	4b0d      	ldr	r3, [pc, #52]	@ (800bf74 <std+0x60>)
 800bf40:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800bf42:	4b0d      	ldr	r3, [pc, #52]	@ (800bf78 <std+0x64>)
 800bf44:	6323      	str	r3, [r4, #48]	@ 0x30
 800bf46:	4b0d      	ldr	r3, [pc, #52]	@ (800bf7c <std+0x68>)
 800bf48:	6224      	str	r4, [r4, #32]
 800bf4a:	429c      	cmp	r4, r3
 800bf4c:	d006      	beq.n	800bf5c <std+0x48>
 800bf4e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800bf52:	4294      	cmp	r4, r2
 800bf54:	d002      	beq.n	800bf5c <std+0x48>
 800bf56:	33d0      	adds	r3, #208	@ 0xd0
 800bf58:	429c      	cmp	r4, r3
 800bf5a:	d105      	bne.n	800bf68 <std+0x54>
 800bf5c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800bf60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bf64:	f000 ba7a 	b.w	800c45c <__retarget_lock_init_recursive>
 800bf68:	bd10      	pop	{r4, pc}
 800bf6a:	bf00      	nop
 800bf6c:	0800c1c9 	.word	0x0800c1c9
 800bf70:	0800c1eb 	.word	0x0800c1eb
 800bf74:	0800c223 	.word	0x0800c223
 800bf78:	0800c247 	.word	0x0800c247
 800bf7c:	20002150 	.word	0x20002150

0800bf80 <stdio_exit_handler>:
 800bf80:	4a02      	ldr	r2, [pc, #8]	@ (800bf8c <stdio_exit_handler+0xc>)
 800bf82:	4903      	ldr	r1, [pc, #12]	@ (800bf90 <stdio_exit_handler+0x10>)
 800bf84:	4803      	ldr	r0, [pc, #12]	@ (800bf94 <stdio_exit_handler+0x14>)
 800bf86:	f000 b869 	b.w	800c05c <_fwalk_sglue>
 800bf8a:	bf00      	nop
 800bf8c:	20000034 	.word	0x20000034
 800bf90:	0800cfc9 	.word	0x0800cfc9
 800bf94:	20000044 	.word	0x20000044

0800bf98 <cleanup_stdio>:
 800bf98:	6841      	ldr	r1, [r0, #4]
 800bf9a:	4b0c      	ldr	r3, [pc, #48]	@ (800bfcc <cleanup_stdio+0x34>)
 800bf9c:	4299      	cmp	r1, r3
 800bf9e:	b510      	push	{r4, lr}
 800bfa0:	4604      	mov	r4, r0
 800bfa2:	d001      	beq.n	800bfa8 <cleanup_stdio+0x10>
 800bfa4:	f001 f810 	bl	800cfc8 <_fflush_r>
 800bfa8:	68a1      	ldr	r1, [r4, #8]
 800bfaa:	4b09      	ldr	r3, [pc, #36]	@ (800bfd0 <cleanup_stdio+0x38>)
 800bfac:	4299      	cmp	r1, r3
 800bfae:	d002      	beq.n	800bfb6 <cleanup_stdio+0x1e>
 800bfb0:	4620      	mov	r0, r4
 800bfb2:	f001 f809 	bl	800cfc8 <_fflush_r>
 800bfb6:	68e1      	ldr	r1, [r4, #12]
 800bfb8:	4b06      	ldr	r3, [pc, #24]	@ (800bfd4 <cleanup_stdio+0x3c>)
 800bfba:	4299      	cmp	r1, r3
 800bfbc:	d004      	beq.n	800bfc8 <cleanup_stdio+0x30>
 800bfbe:	4620      	mov	r0, r4
 800bfc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bfc4:	f001 b800 	b.w	800cfc8 <_fflush_r>
 800bfc8:	bd10      	pop	{r4, pc}
 800bfca:	bf00      	nop
 800bfcc:	20002150 	.word	0x20002150
 800bfd0:	200021b8 	.word	0x200021b8
 800bfd4:	20002220 	.word	0x20002220

0800bfd8 <global_stdio_init.part.0>:
 800bfd8:	b510      	push	{r4, lr}
 800bfda:	4b0b      	ldr	r3, [pc, #44]	@ (800c008 <global_stdio_init.part.0+0x30>)
 800bfdc:	4c0b      	ldr	r4, [pc, #44]	@ (800c00c <global_stdio_init.part.0+0x34>)
 800bfde:	4a0c      	ldr	r2, [pc, #48]	@ (800c010 <global_stdio_init.part.0+0x38>)
 800bfe0:	601a      	str	r2, [r3, #0]
 800bfe2:	4620      	mov	r0, r4
 800bfe4:	2200      	movs	r2, #0
 800bfe6:	2104      	movs	r1, #4
 800bfe8:	f7ff ff94 	bl	800bf14 <std>
 800bfec:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800bff0:	2201      	movs	r2, #1
 800bff2:	2109      	movs	r1, #9
 800bff4:	f7ff ff8e 	bl	800bf14 <std>
 800bff8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800bffc:	2202      	movs	r2, #2
 800bffe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c002:	2112      	movs	r1, #18
 800c004:	f7ff bf86 	b.w	800bf14 <std>
 800c008:	20002288 	.word	0x20002288
 800c00c:	20002150 	.word	0x20002150
 800c010:	0800bf81 	.word	0x0800bf81

0800c014 <__sfp_lock_acquire>:
 800c014:	4801      	ldr	r0, [pc, #4]	@ (800c01c <__sfp_lock_acquire+0x8>)
 800c016:	f000 ba22 	b.w	800c45e <__retarget_lock_acquire_recursive>
 800c01a:	bf00      	nop
 800c01c:	20002291 	.word	0x20002291

0800c020 <__sfp_lock_release>:
 800c020:	4801      	ldr	r0, [pc, #4]	@ (800c028 <__sfp_lock_release+0x8>)
 800c022:	f000 ba1d 	b.w	800c460 <__retarget_lock_release_recursive>
 800c026:	bf00      	nop
 800c028:	20002291 	.word	0x20002291

0800c02c <__sinit>:
 800c02c:	b510      	push	{r4, lr}
 800c02e:	4604      	mov	r4, r0
 800c030:	f7ff fff0 	bl	800c014 <__sfp_lock_acquire>
 800c034:	6a23      	ldr	r3, [r4, #32]
 800c036:	b11b      	cbz	r3, 800c040 <__sinit+0x14>
 800c038:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c03c:	f7ff bff0 	b.w	800c020 <__sfp_lock_release>
 800c040:	4b04      	ldr	r3, [pc, #16]	@ (800c054 <__sinit+0x28>)
 800c042:	6223      	str	r3, [r4, #32]
 800c044:	4b04      	ldr	r3, [pc, #16]	@ (800c058 <__sinit+0x2c>)
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d1f5      	bne.n	800c038 <__sinit+0xc>
 800c04c:	f7ff ffc4 	bl	800bfd8 <global_stdio_init.part.0>
 800c050:	e7f2      	b.n	800c038 <__sinit+0xc>
 800c052:	bf00      	nop
 800c054:	0800bf99 	.word	0x0800bf99
 800c058:	20002288 	.word	0x20002288

0800c05c <_fwalk_sglue>:
 800c05c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c060:	4607      	mov	r7, r0
 800c062:	4688      	mov	r8, r1
 800c064:	4614      	mov	r4, r2
 800c066:	2600      	movs	r6, #0
 800c068:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c06c:	f1b9 0901 	subs.w	r9, r9, #1
 800c070:	d505      	bpl.n	800c07e <_fwalk_sglue+0x22>
 800c072:	6824      	ldr	r4, [r4, #0]
 800c074:	2c00      	cmp	r4, #0
 800c076:	d1f7      	bne.n	800c068 <_fwalk_sglue+0xc>
 800c078:	4630      	mov	r0, r6
 800c07a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c07e:	89ab      	ldrh	r3, [r5, #12]
 800c080:	2b01      	cmp	r3, #1
 800c082:	d907      	bls.n	800c094 <_fwalk_sglue+0x38>
 800c084:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c088:	3301      	adds	r3, #1
 800c08a:	d003      	beq.n	800c094 <_fwalk_sglue+0x38>
 800c08c:	4629      	mov	r1, r5
 800c08e:	4638      	mov	r0, r7
 800c090:	47c0      	blx	r8
 800c092:	4306      	orrs	r6, r0
 800c094:	3568      	adds	r5, #104	@ 0x68
 800c096:	e7e9      	b.n	800c06c <_fwalk_sglue+0x10>

0800c098 <iprintf>:
 800c098:	b40f      	push	{r0, r1, r2, r3}
 800c09a:	b507      	push	{r0, r1, r2, lr}
 800c09c:	4906      	ldr	r1, [pc, #24]	@ (800c0b8 <iprintf+0x20>)
 800c09e:	ab04      	add	r3, sp, #16
 800c0a0:	6808      	ldr	r0, [r1, #0]
 800c0a2:	f853 2b04 	ldr.w	r2, [r3], #4
 800c0a6:	6881      	ldr	r1, [r0, #8]
 800c0a8:	9301      	str	r3, [sp, #4]
 800c0aa:	f000 fc63 	bl	800c974 <_vfiprintf_r>
 800c0ae:	b003      	add	sp, #12
 800c0b0:	f85d eb04 	ldr.w	lr, [sp], #4
 800c0b4:	b004      	add	sp, #16
 800c0b6:	4770      	bx	lr
 800c0b8:	20000040 	.word	0x20000040

0800c0bc <putchar>:
 800c0bc:	4b02      	ldr	r3, [pc, #8]	@ (800c0c8 <putchar+0xc>)
 800c0be:	4601      	mov	r1, r0
 800c0c0:	6818      	ldr	r0, [r3, #0]
 800c0c2:	6882      	ldr	r2, [r0, #8]
 800c0c4:	f001 b80a 	b.w	800d0dc <_putc_r>
 800c0c8:	20000040 	.word	0x20000040

0800c0cc <_puts_r>:
 800c0cc:	6a03      	ldr	r3, [r0, #32]
 800c0ce:	b570      	push	{r4, r5, r6, lr}
 800c0d0:	6884      	ldr	r4, [r0, #8]
 800c0d2:	4605      	mov	r5, r0
 800c0d4:	460e      	mov	r6, r1
 800c0d6:	b90b      	cbnz	r3, 800c0dc <_puts_r+0x10>
 800c0d8:	f7ff ffa8 	bl	800c02c <__sinit>
 800c0dc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c0de:	07db      	lsls	r3, r3, #31
 800c0e0:	d405      	bmi.n	800c0ee <_puts_r+0x22>
 800c0e2:	89a3      	ldrh	r3, [r4, #12]
 800c0e4:	0598      	lsls	r0, r3, #22
 800c0e6:	d402      	bmi.n	800c0ee <_puts_r+0x22>
 800c0e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c0ea:	f000 f9b8 	bl	800c45e <__retarget_lock_acquire_recursive>
 800c0ee:	89a3      	ldrh	r3, [r4, #12]
 800c0f0:	0719      	lsls	r1, r3, #28
 800c0f2:	d502      	bpl.n	800c0fa <_puts_r+0x2e>
 800c0f4:	6923      	ldr	r3, [r4, #16]
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d135      	bne.n	800c166 <_puts_r+0x9a>
 800c0fa:	4621      	mov	r1, r4
 800c0fc:	4628      	mov	r0, r5
 800c0fe:	f000 f8e5 	bl	800c2cc <__swsetup_r>
 800c102:	b380      	cbz	r0, 800c166 <_puts_r+0x9a>
 800c104:	f04f 35ff 	mov.w	r5, #4294967295
 800c108:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c10a:	07da      	lsls	r2, r3, #31
 800c10c:	d405      	bmi.n	800c11a <_puts_r+0x4e>
 800c10e:	89a3      	ldrh	r3, [r4, #12]
 800c110:	059b      	lsls	r3, r3, #22
 800c112:	d402      	bmi.n	800c11a <_puts_r+0x4e>
 800c114:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c116:	f000 f9a3 	bl	800c460 <__retarget_lock_release_recursive>
 800c11a:	4628      	mov	r0, r5
 800c11c:	bd70      	pop	{r4, r5, r6, pc}
 800c11e:	2b00      	cmp	r3, #0
 800c120:	da04      	bge.n	800c12c <_puts_r+0x60>
 800c122:	69a2      	ldr	r2, [r4, #24]
 800c124:	429a      	cmp	r2, r3
 800c126:	dc17      	bgt.n	800c158 <_puts_r+0x8c>
 800c128:	290a      	cmp	r1, #10
 800c12a:	d015      	beq.n	800c158 <_puts_r+0x8c>
 800c12c:	6823      	ldr	r3, [r4, #0]
 800c12e:	1c5a      	adds	r2, r3, #1
 800c130:	6022      	str	r2, [r4, #0]
 800c132:	7019      	strb	r1, [r3, #0]
 800c134:	68a3      	ldr	r3, [r4, #8]
 800c136:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c13a:	3b01      	subs	r3, #1
 800c13c:	60a3      	str	r3, [r4, #8]
 800c13e:	2900      	cmp	r1, #0
 800c140:	d1ed      	bne.n	800c11e <_puts_r+0x52>
 800c142:	2b00      	cmp	r3, #0
 800c144:	da11      	bge.n	800c16a <_puts_r+0x9e>
 800c146:	4622      	mov	r2, r4
 800c148:	210a      	movs	r1, #10
 800c14a:	4628      	mov	r0, r5
 800c14c:	f000 f87f 	bl	800c24e <__swbuf_r>
 800c150:	3001      	adds	r0, #1
 800c152:	d0d7      	beq.n	800c104 <_puts_r+0x38>
 800c154:	250a      	movs	r5, #10
 800c156:	e7d7      	b.n	800c108 <_puts_r+0x3c>
 800c158:	4622      	mov	r2, r4
 800c15a:	4628      	mov	r0, r5
 800c15c:	f000 f877 	bl	800c24e <__swbuf_r>
 800c160:	3001      	adds	r0, #1
 800c162:	d1e7      	bne.n	800c134 <_puts_r+0x68>
 800c164:	e7ce      	b.n	800c104 <_puts_r+0x38>
 800c166:	3e01      	subs	r6, #1
 800c168:	e7e4      	b.n	800c134 <_puts_r+0x68>
 800c16a:	6823      	ldr	r3, [r4, #0]
 800c16c:	1c5a      	adds	r2, r3, #1
 800c16e:	6022      	str	r2, [r4, #0]
 800c170:	220a      	movs	r2, #10
 800c172:	701a      	strb	r2, [r3, #0]
 800c174:	e7ee      	b.n	800c154 <_puts_r+0x88>
	...

0800c178 <puts>:
 800c178:	4b02      	ldr	r3, [pc, #8]	@ (800c184 <puts+0xc>)
 800c17a:	4601      	mov	r1, r0
 800c17c:	6818      	ldr	r0, [r3, #0]
 800c17e:	f7ff bfa5 	b.w	800c0cc <_puts_r>
 800c182:	bf00      	nop
 800c184:	20000040 	.word	0x20000040

0800c188 <siprintf>:
 800c188:	b40e      	push	{r1, r2, r3}
 800c18a:	b500      	push	{lr}
 800c18c:	b09c      	sub	sp, #112	@ 0x70
 800c18e:	ab1d      	add	r3, sp, #116	@ 0x74
 800c190:	9002      	str	r0, [sp, #8]
 800c192:	9006      	str	r0, [sp, #24]
 800c194:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800c198:	4809      	ldr	r0, [pc, #36]	@ (800c1c0 <siprintf+0x38>)
 800c19a:	9107      	str	r1, [sp, #28]
 800c19c:	9104      	str	r1, [sp, #16]
 800c19e:	4909      	ldr	r1, [pc, #36]	@ (800c1c4 <siprintf+0x3c>)
 800c1a0:	f853 2b04 	ldr.w	r2, [r3], #4
 800c1a4:	9105      	str	r1, [sp, #20]
 800c1a6:	6800      	ldr	r0, [r0, #0]
 800c1a8:	9301      	str	r3, [sp, #4]
 800c1aa:	a902      	add	r1, sp, #8
 800c1ac:	f000 fabc 	bl	800c728 <_svfiprintf_r>
 800c1b0:	9b02      	ldr	r3, [sp, #8]
 800c1b2:	2200      	movs	r2, #0
 800c1b4:	701a      	strb	r2, [r3, #0]
 800c1b6:	b01c      	add	sp, #112	@ 0x70
 800c1b8:	f85d eb04 	ldr.w	lr, [sp], #4
 800c1bc:	b003      	add	sp, #12
 800c1be:	4770      	bx	lr
 800c1c0:	20000040 	.word	0x20000040
 800c1c4:	ffff0208 	.word	0xffff0208

0800c1c8 <__sread>:
 800c1c8:	b510      	push	{r4, lr}
 800c1ca:	460c      	mov	r4, r1
 800c1cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c1d0:	f000 f8fc 	bl	800c3cc <_read_r>
 800c1d4:	2800      	cmp	r0, #0
 800c1d6:	bfab      	itete	ge
 800c1d8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c1da:	89a3      	ldrhlt	r3, [r4, #12]
 800c1dc:	181b      	addge	r3, r3, r0
 800c1de:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c1e2:	bfac      	ite	ge
 800c1e4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c1e6:	81a3      	strhlt	r3, [r4, #12]
 800c1e8:	bd10      	pop	{r4, pc}

0800c1ea <__swrite>:
 800c1ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1ee:	461f      	mov	r7, r3
 800c1f0:	898b      	ldrh	r3, [r1, #12]
 800c1f2:	05db      	lsls	r3, r3, #23
 800c1f4:	4605      	mov	r5, r0
 800c1f6:	460c      	mov	r4, r1
 800c1f8:	4616      	mov	r6, r2
 800c1fa:	d505      	bpl.n	800c208 <__swrite+0x1e>
 800c1fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c200:	2302      	movs	r3, #2
 800c202:	2200      	movs	r2, #0
 800c204:	f000 f8d0 	bl	800c3a8 <_lseek_r>
 800c208:	89a3      	ldrh	r3, [r4, #12]
 800c20a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c20e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c212:	81a3      	strh	r3, [r4, #12]
 800c214:	4632      	mov	r2, r6
 800c216:	463b      	mov	r3, r7
 800c218:	4628      	mov	r0, r5
 800c21a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c21e:	f000 b8e7 	b.w	800c3f0 <_write_r>

0800c222 <__sseek>:
 800c222:	b510      	push	{r4, lr}
 800c224:	460c      	mov	r4, r1
 800c226:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c22a:	f000 f8bd 	bl	800c3a8 <_lseek_r>
 800c22e:	1c43      	adds	r3, r0, #1
 800c230:	89a3      	ldrh	r3, [r4, #12]
 800c232:	bf15      	itete	ne
 800c234:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c236:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c23a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c23e:	81a3      	strheq	r3, [r4, #12]
 800c240:	bf18      	it	ne
 800c242:	81a3      	strhne	r3, [r4, #12]
 800c244:	bd10      	pop	{r4, pc}

0800c246 <__sclose>:
 800c246:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c24a:	f000 b89d 	b.w	800c388 <_close_r>

0800c24e <__swbuf_r>:
 800c24e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c250:	460e      	mov	r6, r1
 800c252:	4614      	mov	r4, r2
 800c254:	4605      	mov	r5, r0
 800c256:	b118      	cbz	r0, 800c260 <__swbuf_r+0x12>
 800c258:	6a03      	ldr	r3, [r0, #32]
 800c25a:	b90b      	cbnz	r3, 800c260 <__swbuf_r+0x12>
 800c25c:	f7ff fee6 	bl	800c02c <__sinit>
 800c260:	69a3      	ldr	r3, [r4, #24]
 800c262:	60a3      	str	r3, [r4, #8]
 800c264:	89a3      	ldrh	r3, [r4, #12]
 800c266:	071a      	lsls	r2, r3, #28
 800c268:	d501      	bpl.n	800c26e <__swbuf_r+0x20>
 800c26a:	6923      	ldr	r3, [r4, #16]
 800c26c:	b943      	cbnz	r3, 800c280 <__swbuf_r+0x32>
 800c26e:	4621      	mov	r1, r4
 800c270:	4628      	mov	r0, r5
 800c272:	f000 f82b 	bl	800c2cc <__swsetup_r>
 800c276:	b118      	cbz	r0, 800c280 <__swbuf_r+0x32>
 800c278:	f04f 37ff 	mov.w	r7, #4294967295
 800c27c:	4638      	mov	r0, r7
 800c27e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c280:	6823      	ldr	r3, [r4, #0]
 800c282:	6922      	ldr	r2, [r4, #16]
 800c284:	1a98      	subs	r0, r3, r2
 800c286:	6963      	ldr	r3, [r4, #20]
 800c288:	b2f6      	uxtb	r6, r6
 800c28a:	4283      	cmp	r3, r0
 800c28c:	4637      	mov	r7, r6
 800c28e:	dc05      	bgt.n	800c29c <__swbuf_r+0x4e>
 800c290:	4621      	mov	r1, r4
 800c292:	4628      	mov	r0, r5
 800c294:	f000 fe98 	bl	800cfc8 <_fflush_r>
 800c298:	2800      	cmp	r0, #0
 800c29a:	d1ed      	bne.n	800c278 <__swbuf_r+0x2a>
 800c29c:	68a3      	ldr	r3, [r4, #8]
 800c29e:	3b01      	subs	r3, #1
 800c2a0:	60a3      	str	r3, [r4, #8]
 800c2a2:	6823      	ldr	r3, [r4, #0]
 800c2a4:	1c5a      	adds	r2, r3, #1
 800c2a6:	6022      	str	r2, [r4, #0]
 800c2a8:	701e      	strb	r6, [r3, #0]
 800c2aa:	6962      	ldr	r2, [r4, #20]
 800c2ac:	1c43      	adds	r3, r0, #1
 800c2ae:	429a      	cmp	r2, r3
 800c2b0:	d004      	beq.n	800c2bc <__swbuf_r+0x6e>
 800c2b2:	89a3      	ldrh	r3, [r4, #12]
 800c2b4:	07db      	lsls	r3, r3, #31
 800c2b6:	d5e1      	bpl.n	800c27c <__swbuf_r+0x2e>
 800c2b8:	2e0a      	cmp	r6, #10
 800c2ba:	d1df      	bne.n	800c27c <__swbuf_r+0x2e>
 800c2bc:	4621      	mov	r1, r4
 800c2be:	4628      	mov	r0, r5
 800c2c0:	f000 fe82 	bl	800cfc8 <_fflush_r>
 800c2c4:	2800      	cmp	r0, #0
 800c2c6:	d0d9      	beq.n	800c27c <__swbuf_r+0x2e>
 800c2c8:	e7d6      	b.n	800c278 <__swbuf_r+0x2a>
	...

0800c2cc <__swsetup_r>:
 800c2cc:	b538      	push	{r3, r4, r5, lr}
 800c2ce:	4b29      	ldr	r3, [pc, #164]	@ (800c374 <__swsetup_r+0xa8>)
 800c2d0:	4605      	mov	r5, r0
 800c2d2:	6818      	ldr	r0, [r3, #0]
 800c2d4:	460c      	mov	r4, r1
 800c2d6:	b118      	cbz	r0, 800c2e0 <__swsetup_r+0x14>
 800c2d8:	6a03      	ldr	r3, [r0, #32]
 800c2da:	b90b      	cbnz	r3, 800c2e0 <__swsetup_r+0x14>
 800c2dc:	f7ff fea6 	bl	800c02c <__sinit>
 800c2e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c2e4:	0719      	lsls	r1, r3, #28
 800c2e6:	d422      	bmi.n	800c32e <__swsetup_r+0x62>
 800c2e8:	06da      	lsls	r2, r3, #27
 800c2ea:	d407      	bmi.n	800c2fc <__swsetup_r+0x30>
 800c2ec:	2209      	movs	r2, #9
 800c2ee:	602a      	str	r2, [r5, #0]
 800c2f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c2f4:	81a3      	strh	r3, [r4, #12]
 800c2f6:	f04f 30ff 	mov.w	r0, #4294967295
 800c2fa:	e033      	b.n	800c364 <__swsetup_r+0x98>
 800c2fc:	0758      	lsls	r0, r3, #29
 800c2fe:	d512      	bpl.n	800c326 <__swsetup_r+0x5a>
 800c300:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c302:	b141      	cbz	r1, 800c316 <__swsetup_r+0x4a>
 800c304:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c308:	4299      	cmp	r1, r3
 800c30a:	d002      	beq.n	800c312 <__swsetup_r+0x46>
 800c30c:	4628      	mov	r0, r5
 800c30e:	f000 f8b7 	bl	800c480 <_free_r>
 800c312:	2300      	movs	r3, #0
 800c314:	6363      	str	r3, [r4, #52]	@ 0x34
 800c316:	89a3      	ldrh	r3, [r4, #12]
 800c318:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c31c:	81a3      	strh	r3, [r4, #12]
 800c31e:	2300      	movs	r3, #0
 800c320:	6063      	str	r3, [r4, #4]
 800c322:	6923      	ldr	r3, [r4, #16]
 800c324:	6023      	str	r3, [r4, #0]
 800c326:	89a3      	ldrh	r3, [r4, #12]
 800c328:	f043 0308 	orr.w	r3, r3, #8
 800c32c:	81a3      	strh	r3, [r4, #12]
 800c32e:	6923      	ldr	r3, [r4, #16]
 800c330:	b94b      	cbnz	r3, 800c346 <__swsetup_r+0x7a>
 800c332:	89a3      	ldrh	r3, [r4, #12]
 800c334:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c338:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c33c:	d003      	beq.n	800c346 <__swsetup_r+0x7a>
 800c33e:	4621      	mov	r1, r4
 800c340:	4628      	mov	r0, r5
 800c342:	f000 fe8f 	bl	800d064 <__smakebuf_r>
 800c346:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c34a:	f013 0201 	ands.w	r2, r3, #1
 800c34e:	d00a      	beq.n	800c366 <__swsetup_r+0x9a>
 800c350:	2200      	movs	r2, #0
 800c352:	60a2      	str	r2, [r4, #8]
 800c354:	6962      	ldr	r2, [r4, #20]
 800c356:	4252      	negs	r2, r2
 800c358:	61a2      	str	r2, [r4, #24]
 800c35a:	6922      	ldr	r2, [r4, #16]
 800c35c:	b942      	cbnz	r2, 800c370 <__swsetup_r+0xa4>
 800c35e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c362:	d1c5      	bne.n	800c2f0 <__swsetup_r+0x24>
 800c364:	bd38      	pop	{r3, r4, r5, pc}
 800c366:	0799      	lsls	r1, r3, #30
 800c368:	bf58      	it	pl
 800c36a:	6962      	ldrpl	r2, [r4, #20]
 800c36c:	60a2      	str	r2, [r4, #8]
 800c36e:	e7f4      	b.n	800c35a <__swsetup_r+0x8e>
 800c370:	2000      	movs	r0, #0
 800c372:	e7f7      	b.n	800c364 <__swsetup_r+0x98>
 800c374:	20000040 	.word	0x20000040

0800c378 <memset>:
 800c378:	4402      	add	r2, r0
 800c37a:	4603      	mov	r3, r0
 800c37c:	4293      	cmp	r3, r2
 800c37e:	d100      	bne.n	800c382 <memset+0xa>
 800c380:	4770      	bx	lr
 800c382:	f803 1b01 	strb.w	r1, [r3], #1
 800c386:	e7f9      	b.n	800c37c <memset+0x4>

0800c388 <_close_r>:
 800c388:	b538      	push	{r3, r4, r5, lr}
 800c38a:	4d06      	ldr	r5, [pc, #24]	@ (800c3a4 <_close_r+0x1c>)
 800c38c:	2300      	movs	r3, #0
 800c38e:	4604      	mov	r4, r0
 800c390:	4608      	mov	r0, r1
 800c392:	602b      	str	r3, [r5, #0]
 800c394:	f000 ff58 	bl	800d248 <_close>
 800c398:	1c43      	adds	r3, r0, #1
 800c39a:	d102      	bne.n	800c3a2 <_close_r+0x1a>
 800c39c:	682b      	ldr	r3, [r5, #0]
 800c39e:	b103      	cbz	r3, 800c3a2 <_close_r+0x1a>
 800c3a0:	6023      	str	r3, [r4, #0]
 800c3a2:	bd38      	pop	{r3, r4, r5, pc}
 800c3a4:	2000228c 	.word	0x2000228c

0800c3a8 <_lseek_r>:
 800c3a8:	b538      	push	{r3, r4, r5, lr}
 800c3aa:	4d07      	ldr	r5, [pc, #28]	@ (800c3c8 <_lseek_r+0x20>)
 800c3ac:	4604      	mov	r4, r0
 800c3ae:	4608      	mov	r0, r1
 800c3b0:	4611      	mov	r1, r2
 800c3b2:	2200      	movs	r2, #0
 800c3b4:	602a      	str	r2, [r5, #0]
 800c3b6:	461a      	mov	r2, r3
 800c3b8:	f000 ff5e 	bl	800d278 <_lseek>
 800c3bc:	1c43      	adds	r3, r0, #1
 800c3be:	d102      	bne.n	800c3c6 <_lseek_r+0x1e>
 800c3c0:	682b      	ldr	r3, [r5, #0]
 800c3c2:	b103      	cbz	r3, 800c3c6 <_lseek_r+0x1e>
 800c3c4:	6023      	str	r3, [r4, #0]
 800c3c6:	bd38      	pop	{r3, r4, r5, pc}
 800c3c8:	2000228c 	.word	0x2000228c

0800c3cc <_read_r>:
 800c3cc:	b538      	push	{r3, r4, r5, lr}
 800c3ce:	4d07      	ldr	r5, [pc, #28]	@ (800c3ec <_read_r+0x20>)
 800c3d0:	4604      	mov	r4, r0
 800c3d2:	4608      	mov	r0, r1
 800c3d4:	4611      	mov	r1, r2
 800c3d6:	2200      	movs	r2, #0
 800c3d8:	602a      	str	r2, [r5, #0]
 800c3da:	461a      	mov	r2, r3
 800c3dc:	f000 ff54 	bl	800d288 <_read>
 800c3e0:	1c43      	adds	r3, r0, #1
 800c3e2:	d102      	bne.n	800c3ea <_read_r+0x1e>
 800c3e4:	682b      	ldr	r3, [r5, #0]
 800c3e6:	b103      	cbz	r3, 800c3ea <_read_r+0x1e>
 800c3e8:	6023      	str	r3, [r4, #0]
 800c3ea:	bd38      	pop	{r3, r4, r5, pc}
 800c3ec:	2000228c 	.word	0x2000228c

0800c3f0 <_write_r>:
 800c3f0:	b538      	push	{r3, r4, r5, lr}
 800c3f2:	4d07      	ldr	r5, [pc, #28]	@ (800c410 <_write_r+0x20>)
 800c3f4:	4604      	mov	r4, r0
 800c3f6:	4608      	mov	r0, r1
 800c3f8:	4611      	mov	r1, r2
 800c3fa:	2200      	movs	r2, #0
 800c3fc:	602a      	str	r2, [r5, #0]
 800c3fe:	461a      	mov	r2, r3
 800c400:	f7fd f9c6 	bl	8009790 <_write>
 800c404:	1c43      	adds	r3, r0, #1
 800c406:	d102      	bne.n	800c40e <_write_r+0x1e>
 800c408:	682b      	ldr	r3, [r5, #0]
 800c40a:	b103      	cbz	r3, 800c40e <_write_r+0x1e>
 800c40c:	6023      	str	r3, [r4, #0]
 800c40e:	bd38      	pop	{r3, r4, r5, pc}
 800c410:	2000228c 	.word	0x2000228c

0800c414 <__libc_init_array>:
 800c414:	b570      	push	{r4, r5, r6, lr}
 800c416:	4d0d      	ldr	r5, [pc, #52]	@ (800c44c <__libc_init_array+0x38>)
 800c418:	4c0d      	ldr	r4, [pc, #52]	@ (800c450 <__libc_init_array+0x3c>)
 800c41a:	1b64      	subs	r4, r4, r5
 800c41c:	10a4      	asrs	r4, r4, #2
 800c41e:	2600      	movs	r6, #0
 800c420:	42a6      	cmp	r6, r4
 800c422:	d109      	bne.n	800c438 <__libc_init_array+0x24>
 800c424:	4d0b      	ldr	r5, [pc, #44]	@ (800c454 <__libc_init_array+0x40>)
 800c426:	4c0c      	ldr	r4, [pc, #48]	@ (800c458 <__libc_init_array+0x44>)
 800c428:	f000 ff44 	bl	800d2b4 <_init>
 800c42c:	1b64      	subs	r4, r4, r5
 800c42e:	10a4      	asrs	r4, r4, #2
 800c430:	2600      	movs	r6, #0
 800c432:	42a6      	cmp	r6, r4
 800c434:	d105      	bne.n	800c442 <__libc_init_array+0x2e>
 800c436:	bd70      	pop	{r4, r5, r6, pc}
 800c438:	f855 3b04 	ldr.w	r3, [r5], #4
 800c43c:	4798      	blx	r3
 800c43e:	3601      	adds	r6, #1
 800c440:	e7ee      	b.n	800c420 <__libc_init_array+0xc>
 800c442:	f855 3b04 	ldr.w	r3, [r5], #4
 800c446:	4798      	blx	r3
 800c448:	3601      	adds	r6, #1
 800c44a:	e7f2      	b.n	800c432 <__libc_init_array+0x1e>
 800c44c:	0800ea2c 	.word	0x0800ea2c
 800c450:	0800ea2c 	.word	0x0800ea2c
 800c454:	0800ea2c 	.word	0x0800ea2c
 800c458:	0800ea30 	.word	0x0800ea30

0800c45c <__retarget_lock_init_recursive>:
 800c45c:	4770      	bx	lr

0800c45e <__retarget_lock_acquire_recursive>:
 800c45e:	4770      	bx	lr

0800c460 <__retarget_lock_release_recursive>:
 800c460:	4770      	bx	lr

0800c462 <memcpy>:
 800c462:	440a      	add	r2, r1
 800c464:	4291      	cmp	r1, r2
 800c466:	f100 33ff 	add.w	r3, r0, #4294967295
 800c46a:	d100      	bne.n	800c46e <memcpy+0xc>
 800c46c:	4770      	bx	lr
 800c46e:	b510      	push	{r4, lr}
 800c470:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c474:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c478:	4291      	cmp	r1, r2
 800c47a:	d1f9      	bne.n	800c470 <memcpy+0xe>
 800c47c:	bd10      	pop	{r4, pc}
	...

0800c480 <_free_r>:
 800c480:	b538      	push	{r3, r4, r5, lr}
 800c482:	4605      	mov	r5, r0
 800c484:	2900      	cmp	r1, #0
 800c486:	d041      	beq.n	800c50c <_free_r+0x8c>
 800c488:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c48c:	1f0c      	subs	r4, r1, #4
 800c48e:	2b00      	cmp	r3, #0
 800c490:	bfb8      	it	lt
 800c492:	18e4      	addlt	r4, r4, r3
 800c494:	f000 f8e0 	bl	800c658 <__malloc_lock>
 800c498:	4a1d      	ldr	r2, [pc, #116]	@ (800c510 <_free_r+0x90>)
 800c49a:	6813      	ldr	r3, [r2, #0]
 800c49c:	b933      	cbnz	r3, 800c4ac <_free_r+0x2c>
 800c49e:	6063      	str	r3, [r4, #4]
 800c4a0:	6014      	str	r4, [r2, #0]
 800c4a2:	4628      	mov	r0, r5
 800c4a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c4a8:	f000 b8dc 	b.w	800c664 <__malloc_unlock>
 800c4ac:	42a3      	cmp	r3, r4
 800c4ae:	d908      	bls.n	800c4c2 <_free_r+0x42>
 800c4b0:	6820      	ldr	r0, [r4, #0]
 800c4b2:	1821      	adds	r1, r4, r0
 800c4b4:	428b      	cmp	r3, r1
 800c4b6:	bf01      	itttt	eq
 800c4b8:	6819      	ldreq	r1, [r3, #0]
 800c4ba:	685b      	ldreq	r3, [r3, #4]
 800c4bc:	1809      	addeq	r1, r1, r0
 800c4be:	6021      	streq	r1, [r4, #0]
 800c4c0:	e7ed      	b.n	800c49e <_free_r+0x1e>
 800c4c2:	461a      	mov	r2, r3
 800c4c4:	685b      	ldr	r3, [r3, #4]
 800c4c6:	b10b      	cbz	r3, 800c4cc <_free_r+0x4c>
 800c4c8:	42a3      	cmp	r3, r4
 800c4ca:	d9fa      	bls.n	800c4c2 <_free_r+0x42>
 800c4cc:	6811      	ldr	r1, [r2, #0]
 800c4ce:	1850      	adds	r0, r2, r1
 800c4d0:	42a0      	cmp	r0, r4
 800c4d2:	d10b      	bne.n	800c4ec <_free_r+0x6c>
 800c4d4:	6820      	ldr	r0, [r4, #0]
 800c4d6:	4401      	add	r1, r0
 800c4d8:	1850      	adds	r0, r2, r1
 800c4da:	4283      	cmp	r3, r0
 800c4dc:	6011      	str	r1, [r2, #0]
 800c4de:	d1e0      	bne.n	800c4a2 <_free_r+0x22>
 800c4e0:	6818      	ldr	r0, [r3, #0]
 800c4e2:	685b      	ldr	r3, [r3, #4]
 800c4e4:	6053      	str	r3, [r2, #4]
 800c4e6:	4408      	add	r0, r1
 800c4e8:	6010      	str	r0, [r2, #0]
 800c4ea:	e7da      	b.n	800c4a2 <_free_r+0x22>
 800c4ec:	d902      	bls.n	800c4f4 <_free_r+0x74>
 800c4ee:	230c      	movs	r3, #12
 800c4f0:	602b      	str	r3, [r5, #0]
 800c4f2:	e7d6      	b.n	800c4a2 <_free_r+0x22>
 800c4f4:	6820      	ldr	r0, [r4, #0]
 800c4f6:	1821      	adds	r1, r4, r0
 800c4f8:	428b      	cmp	r3, r1
 800c4fa:	bf04      	itt	eq
 800c4fc:	6819      	ldreq	r1, [r3, #0]
 800c4fe:	685b      	ldreq	r3, [r3, #4]
 800c500:	6063      	str	r3, [r4, #4]
 800c502:	bf04      	itt	eq
 800c504:	1809      	addeq	r1, r1, r0
 800c506:	6021      	streq	r1, [r4, #0]
 800c508:	6054      	str	r4, [r2, #4]
 800c50a:	e7ca      	b.n	800c4a2 <_free_r+0x22>
 800c50c:	bd38      	pop	{r3, r4, r5, pc}
 800c50e:	bf00      	nop
 800c510:	20002298 	.word	0x20002298

0800c514 <sbrk_aligned>:
 800c514:	b570      	push	{r4, r5, r6, lr}
 800c516:	4e0f      	ldr	r6, [pc, #60]	@ (800c554 <sbrk_aligned+0x40>)
 800c518:	460c      	mov	r4, r1
 800c51a:	6831      	ldr	r1, [r6, #0]
 800c51c:	4605      	mov	r5, r0
 800c51e:	b911      	cbnz	r1, 800c526 <sbrk_aligned+0x12>
 800c520:	f000 fe4c 	bl	800d1bc <_sbrk_r>
 800c524:	6030      	str	r0, [r6, #0]
 800c526:	4621      	mov	r1, r4
 800c528:	4628      	mov	r0, r5
 800c52a:	f000 fe47 	bl	800d1bc <_sbrk_r>
 800c52e:	1c43      	adds	r3, r0, #1
 800c530:	d103      	bne.n	800c53a <sbrk_aligned+0x26>
 800c532:	f04f 34ff 	mov.w	r4, #4294967295
 800c536:	4620      	mov	r0, r4
 800c538:	bd70      	pop	{r4, r5, r6, pc}
 800c53a:	1cc4      	adds	r4, r0, #3
 800c53c:	f024 0403 	bic.w	r4, r4, #3
 800c540:	42a0      	cmp	r0, r4
 800c542:	d0f8      	beq.n	800c536 <sbrk_aligned+0x22>
 800c544:	1a21      	subs	r1, r4, r0
 800c546:	4628      	mov	r0, r5
 800c548:	f000 fe38 	bl	800d1bc <_sbrk_r>
 800c54c:	3001      	adds	r0, #1
 800c54e:	d1f2      	bne.n	800c536 <sbrk_aligned+0x22>
 800c550:	e7ef      	b.n	800c532 <sbrk_aligned+0x1e>
 800c552:	bf00      	nop
 800c554:	20002294 	.word	0x20002294

0800c558 <_malloc_r>:
 800c558:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c55c:	1ccd      	adds	r5, r1, #3
 800c55e:	f025 0503 	bic.w	r5, r5, #3
 800c562:	3508      	adds	r5, #8
 800c564:	2d0c      	cmp	r5, #12
 800c566:	bf38      	it	cc
 800c568:	250c      	movcc	r5, #12
 800c56a:	2d00      	cmp	r5, #0
 800c56c:	4606      	mov	r6, r0
 800c56e:	db01      	blt.n	800c574 <_malloc_r+0x1c>
 800c570:	42a9      	cmp	r1, r5
 800c572:	d904      	bls.n	800c57e <_malloc_r+0x26>
 800c574:	230c      	movs	r3, #12
 800c576:	6033      	str	r3, [r6, #0]
 800c578:	2000      	movs	r0, #0
 800c57a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c57e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c654 <_malloc_r+0xfc>
 800c582:	f000 f869 	bl	800c658 <__malloc_lock>
 800c586:	f8d8 3000 	ldr.w	r3, [r8]
 800c58a:	461c      	mov	r4, r3
 800c58c:	bb44      	cbnz	r4, 800c5e0 <_malloc_r+0x88>
 800c58e:	4629      	mov	r1, r5
 800c590:	4630      	mov	r0, r6
 800c592:	f7ff ffbf 	bl	800c514 <sbrk_aligned>
 800c596:	1c43      	adds	r3, r0, #1
 800c598:	4604      	mov	r4, r0
 800c59a:	d158      	bne.n	800c64e <_malloc_r+0xf6>
 800c59c:	f8d8 4000 	ldr.w	r4, [r8]
 800c5a0:	4627      	mov	r7, r4
 800c5a2:	2f00      	cmp	r7, #0
 800c5a4:	d143      	bne.n	800c62e <_malloc_r+0xd6>
 800c5a6:	2c00      	cmp	r4, #0
 800c5a8:	d04b      	beq.n	800c642 <_malloc_r+0xea>
 800c5aa:	6823      	ldr	r3, [r4, #0]
 800c5ac:	4639      	mov	r1, r7
 800c5ae:	4630      	mov	r0, r6
 800c5b0:	eb04 0903 	add.w	r9, r4, r3
 800c5b4:	f000 fe02 	bl	800d1bc <_sbrk_r>
 800c5b8:	4581      	cmp	r9, r0
 800c5ba:	d142      	bne.n	800c642 <_malloc_r+0xea>
 800c5bc:	6821      	ldr	r1, [r4, #0]
 800c5be:	1a6d      	subs	r5, r5, r1
 800c5c0:	4629      	mov	r1, r5
 800c5c2:	4630      	mov	r0, r6
 800c5c4:	f7ff ffa6 	bl	800c514 <sbrk_aligned>
 800c5c8:	3001      	adds	r0, #1
 800c5ca:	d03a      	beq.n	800c642 <_malloc_r+0xea>
 800c5cc:	6823      	ldr	r3, [r4, #0]
 800c5ce:	442b      	add	r3, r5
 800c5d0:	6023      	str	r3, [r4, #0]
 800c5d2:	f8d8 3000 	ldr.w	r3, [r8]
 800c5d6:	685a      	ldr	r2, [r3, #4]
 800c5d8:	bb62      	cbnz	r2, 800c634 <_malloc_r+0xdc>
 800c5da:	f8c8 7000 	str.w	r7, [r8]
 800c5de:	e00f      	b.n	800c600 <_malloc_r+0xa8>
 800c5e0:	6822      	ldr	r2, [r4, #0]
 800c5e2:	1b52      	subs	r2, r2, r5
 800c5e4:	d420      	bmi.n	800c628 <_malloc_r+0xd0>
 800c5e6:	2a0b      	cmp	r2, #11
 800c5e8:	d917      	bls.n	800c61a <_malloc_r+0xc2>
 800c5ea:	1961      	adds	r1, r4, r5
 800c5ec:	42a3      	cmp	r3, r4
 800c5ee:	6025      	str	r5, [r4, #0]
 800c5f0:	bf18      	it	ne
 800c5f2:	6059      	strne	r1, [r3, #4]
 800c5f4:	6863      	ldr	r3, [r4, #4]
 800c5f6:	bf08      	it	eq
 800c5f8:	f8c8 1000 	streq.w	r1, [r8]
 800c5fc:	5162      	str	r2, [r4, r5]
 800c5fe:	604b      	str	r3, [r1, #4]
 800c600:	4630      	mov	r0, r6
 800c602:	f000 f82f 	bl	800c664 <__malloc_unlock>
 800c606:	f104 000b 	add.w	r0, r4, #11
 800c60a:	1d23      	adds	r3, r4, #4
 800c60c:	f020 0007 	bic.w	r0, r0, #7
 800c610:	1ac2      	subs	r2, r0, r3
 800c612:	bf1c      	itt	ne
 800c614:	1a1b      	subne	r3, r3, r0
 800c616:	50a3      	strne	r3, [r4, r2]
 800c618:	e7af      	b.n	800c57a <_malloc_r+0x22>
 800c61a:	6862      	ldr	r2, [r4, #4]
 800c61c:	42a3      	cmp	r3, r4
 800c61e:	bf0c      	ite	eq
 800c620:	f8c8 2000 	streq.w	r2, [r8]
 800c624:	605a      	strne	r2, [r3, #4]
 800c626:	e7eb      	b.n	800c600 <_malloc_r+0xa8>
 800c628:	4623      	mov	r3, r4
 800c62a:	6864      	ldr	r4, [r4, #4]
 800c62c:	e7ae      	b.n	800c58c <_malloc_r+0x34>
 800c62e:	463c      	mov	r4, r7
 800c630:	687f      	ldr	r7, [r7, #4]
 800c632:	e7b6      	b.n	800c5a2 <_malloc_r+0x4a>
 800c634:	461a      	mov	r2, r3
 800c636:	685b      	ldr	r3, [r3, #4]
 800c638:	42a3      	cmp	r3, r4
 800c63a:	d1fb      	bne.n	800c634 <_malloc_r+0xdc>
 800c63c:	2300      	movs	r3, #0
 800c63e:	6053      	str	r3, [r2, #4]
 800c640:	e7de      	b.n	800c600 <_malloc_r+0xa8>
 800c642:	230c      	movs	r3, #12
 800c644:	6033      	str	r3, [r6, #0]
 800c646:	4630      	mov	r0, r6
 800c648:	f000 f80c 	bl	800c664 <__malloc_unlock>
 800c64c:	e794      	b.n	800c578 <_malloc_r+0x20>
 800c64e:	6005      	str	r5, [r0, #0]
 800c650:	e7d6      	b.n	800c600 <_malloc_r+0xa8>
 800c652:	bf00      	nop
 800c654:	20002298 	.word	0x20002298

0800c658 <__malloc_lock>:
 800c658:	4801      	ldr	r0, [pc, #4]	@ (800c660 <__malloc_lock+0x8>)
 800c65a:	f7ff bf00 	b.w	800c45e <__retarget_lock_acquire_recursive>
 800c65e:	bf00      	nop
 800c660:	20002290 	.word	0x20002290

0800c664 <__malloc_unlock>:
 800c664:	4801      	ldr	r0, [pc, #4]	@ (800c66c <__malloc_unlock+0x8>)
 800c666:	f7ff befb 	b.w	800c460 <__retarget_lock_release_recursive>
 800c66a:	bf00      	nop
 800c66c:	20002290 	.word	0x20002290

0800c670 <__ssputs_r>:
 800c670:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c674:	688e      	ldr	r6, [r1, #8]
 800c676:	461f      	mov	r7, r3
 800c678:	42be      	cmp	r6, r7
 800c67a:	680b      	ldr	r3, [r1, #0]
 800c67c:	4682      	mov	sl, r0
 800c67e:	460c      	mov	r4, r1
 800c680:	4690      	mov	r8, r2
 800c682:	d82d      	bhi.n	800c6e0 <__ssputs_r+0x70>
 800c684:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c688:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c68c:	d026      	beq.n	800c6dc <__ssputs_r+0x6c>
 800c68e:	6965      	ldr	r5, [r4, #20]
 800c690:	6909      	ldr	r1, [r1, #16]
 800c692:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c696:	eba3 0901 	sub.w	r9, r3, r1
 800c69a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c69e:	1c7b      	adds	r3, r7, #1
 800c6a0:	444b      	add	r3, r9
 800c6a2:	106d      	asrs	r5, r5, #1
 800c6a4:	429d      	cmp	r5, r3
 800c6a6:	bf38      	it	cc
 800c6a8:	461d      	movcc	r5, r3
 800c6aa:	0553      	lsls	r3, r2, #21
 800c6ac:	d527      	bpl.n	800c6fe <__ssputs_r+0x8e>
 800c6ae:	4629      	mov	r1, r5
 800c6b0:	f7ff ff52 	bl	800c558 <_malloc_r>
 800c6b4:	4606      	mov	r6, r0
 800c6b6:	b360      	cbz	r0, 800c712 <__ssputs_r+0xa2>
 800c6b8:	6921      	ldr	r1, [r4, #16]
 800c6ba:	464a      	mov	r2, r9
 800c6bc:	f7ff fed1 	bl	800c462 <memcpy>
 800c6c0:	89a3      	ldrh	r3, [r4, #12]
 800c6c2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c6c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c6ca:	81a3      	strh	r3, [r4, #12]
 800c6cc:	6126      	str	r6, [r4, #16]
 800c6ce:	6165      	str	r5, [r4, #20]
 800c6d0:	444e      	add	r6, r9
 800c6d2:	eba5 0509 	sub.w	r5, r5, r9
 800c6d6:	6026      	str	r6, [r4, #0]
 800c6d8:	60a5      	str	r5, [r4, #8]
 800c6da:	463e      	mov	r6, r7
 800c6dc:	42be      	cmp	r6, r7
 800c6de:	d900      	bls.n	800c6e2 <__ssputs_r+0x72>
 800c6e0:	463e      	mov	r6, r7
 800c6e2:	6820      	ldr	r0, [r4, #0]
 800c6e4:	4632      	mov	r2, r6
 800c6e6:	4641      	mov	r1, r8
 800c6e8:	f000 fd2c 	bl	800d144 <memmove>
 800c6ec:	68a3      	ldr	r3, [r4, #8]
 800c6ee:	1b9b      	subs	r3, r3, r6
 800c6f0:	60a3      	str	r3, [r4, #8]
 800c6f2:	6823      	ldr	r3, [r4, #0]
 800c6f4:	4433      	add	r3, r6
 800c6f6:	6023      	str	r3, [r4, #0]
 800c6f8:	2000      	movs	r0, #0
 800c6fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c6fe:	462a      	mov	r2, r5
 800c700:	f000 fd6c 	bl	800d1dc <_realloc_r>
 800c704:	4606      	mov	r6, r0
 800c706:	2800      	cmp	r0, #0
 800c708:	d1e0      	bne.n	800c6cc <__ssputs_r+0x5c>
 800c70a:	6921      	ldr	r1, [r4, #16]
 800c70c:	4650      	mov	r0, sl
 800c70e:	f7ff feb7 	bl	800c480 <_free_r>
 800c712:	230c      	movs	r3, #12
 800c714:	f8ca 3000 	str.w	r3, [sl]
 800c718:	89a3      	ldrh	r3, [r4, #12]
 800c71a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c71e:	81a3      	strh	r3, [r4, #12]
 800c720:	f04f 30ff 	mov.w	r0, #4294967295
 800c724:	e7e9      	b.n	800c6fa <__ssputs_r+0x8a>
	...

0800c728 <_svfiprintf_r>:
 800c728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c72c:	4698      	mov	r8, r3
 800c72e:	898b      	ldrh	r3, [r1, #12]
 800c730:	061b      	lsls	r3, r3, #24
 800c732:	b09d      	sub	sp, #116	@ 0x74
 800c734:	4607      	mov	r7, r0
 800c736:	460d      	mov	r5, r1
 800c738:	4614      	mov	r4, r2
 800c73a:	d510      	bpl.n	800c75e <_svfiprintf_r+0x36>
 800c73c:	690b      	ldr	r3, [r1, #16]
 800c73e:	b973      	cbnz	r3, 800c75e <_svfiprintf_r+0x36>
 800c740:	2140      	movs	r1, #64	@ 0x40
 800c742:	f7ff ff09 	bl	800c558 <_malloc_r>
 800c746:	6028      	str	r0, [r5, #0]
 800c748:	6128      	str	r0, [r5, #16]
 800c74a:	b930      	cbnz	r0, 800c75a <_svfiprintf_r+0x32>
 800c74c:	230c      	movs	r3, #12
 800c74e:	603b      	str	r3, [r7, #0]
 800c750:	f04f 30ff 	mov.w	r0, #4294967295
 800c754:	b01d      	add	sp, #116	@ 0x74
 800c756:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c75a:	2340      	movs	r3, #64	@ 0x40
 800c75c:	616b      	str	r3, [r5, #20]
 800c75e:	2300      	movs	r3, #0
 800c760:	9309      	str	r3, [sp, #36]	@ 0x24
 800c762:	2320      	movs	r3, #32
 800c764:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c768:	f8cd 800c 	str.w	r8, [sp, #12]
 800c76c:	2330      	movs	r3, #48	@ 0x30
 800c76e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c90c <_svfiprintf_r+0x1e4>
 800c772:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c776:	f04f 0901 	mov.w	r9, #1
 800c77a:	4623      	mov	r3, r4
 800c77c:	469a      	mov	sl, r3
 800c77e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c782:	b10a      	cbz	r2, 800c788 <_svfiprintf_r+0x60>
 800c784:	2a25      	cmp	r2, #37	@ 0x25
 800c786:	d1f9      	bne.n	800c77c <_svfiprintf_r+0x54>
 800c788:	ebba 0b04 	subs.w	fp, sl, r4
 800c78c:	d00b      	beq.n	800c7a6 <_svfiprintf_r+0x7e>
 800c78e:	465b      	mov	r3, fp
 800c790:	4622      	mov	r2, r4
 800c792:	4629      	mov	r1, r5
 800c794:	4638      	mov	r0, r7
 800c796:	f7ff ff6b 	bl	800c670 <__ssputs_r>
 800c79a:	3001      	adds	r0, #1
 800c79c:	f000 80a7 	beq.w	800c8ee <_svfiprintf_r+0x1c6>
 800c7a0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c7a2:	445a      	add	r2, fp
 800c7a4:	9209      	str	r2, [sp, #36]	@ 0x24
 800c7a6:	f89a 3000 	ldrb.w	r3, [sl]
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	f000 809f 	beq.w	800c8ee <_svfiprintf_r+0x1c6>
 800c7b0:	2300      	movs	r3, #0
 800c7b2:	f04f 32ff 	mov.w	r2, #4294967295
 800c7b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c7ba:	f10a 0a01 	add.w	sl, sl, #1
 800c7be:	9304      	str	r3, [sp, #16]
 800c7c0:	9307      	str	r3, [sp, #28]
 800c7c2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c7c6:	931a      	str	r3, [sp, #104]	@ 0x68
 800c7c8:	4654      	mov	r4, sl
 800c7ca:	2205      	movs	r2, #5
 800c7cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7d0:	484e      	ldr	r0, [pc, #312]	@ (800c90c <_svfiprintf_r+0x1e4>)
 800c7d2:	f7f3 fcdd 	bl	8000190 <memchr>
 800c7d6:	9a04      	ldr	r2, [sp, #16]
 800c7d8:	b9d8      	cbnz	r0, 800c812 <_svfiprintf_r+0xea>
 800c7da:	06d0      	lsls	r0, r2, #27
 800c7dc:	bf44      	itt	mi
 800c7de:	2320      	movmi	r3, #32
 800c7e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c7e4:	0711      	lsls	r1, r2, #28
 800c7e6:	bf44      	itt	mi
 800c7e8:	232b      	movmi	r3, #43	@ 0x2b
 800c7ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c7ee:	f89a 3000 	ldrb.w	r3, [sl]
 800c7f2:	2b2a      	cmp	r3, #42	@ 0x2a
 800c7f4:	d015      	beq.n	800c822 <_svfiprintf_r+0xfa>
 800c7f6:	9a07      	ldr	r2, [sp, #28]
 800c7f8:	4654      	mov	r4, sl
 800c7fa:	2000      	movs	r0, #0
 800c7fc:	f04f 0c0a 	mov.w	ip, #10
 800c800:	4621      	mov	r1, r4
 800c802:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c806:	3b30      	subs	r3, #48	@ 0x30
 800c808:	2b09      	cmp	r3, #9
 800c80a:	d94b      	bls.n	800c8a4 <_svfiprintf_r+0x17c>
 800c80c:	b1b0      	cbz	r0, 800c83c <_svfiprintf_r+0x114>
 800c80e:	9207      	str	r2, [sp, #28]
 800c810:	e014      	b.n	800c83c <_svfiprintf_r+0x114>
 800c812:	eba0 0308 	sub.w	r3, r0, r8
 800c816:	fa09 f303 	lsl.w	r3, r9, r3
 800c81a:	4313      	orrs	r3, r2
 800c81c:	9304      	str	r3, [sp, #16]
 800c81e:	46a2      	mov	sl, r4
 800c820:	e7d2      	b.n	800c7c8 <_svfiprintf_r+0xa0>
 800c822:	9b03      	ldr	r3, [sp, #12]
 800c824:	1d19      	adds	r1, r3, #4
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	9103      	str	r1, [sp, #12]
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	bfbb      	ittet	lt
 800c82e:	425b      	neglt	r3, r3
 800c830:	f042 0202 	orrlt.w	r2, r2, #2
 800c834:	9307      	strge	r3, [sp, #28]
 800c836:	9307      	strlt	r3, [sp, #28]
 800c838:	bfb8      	it	lt
 800c83a:	9204      	strlt	r2, [sp, #16]
 800c83c:	7823      	ldrb	r3, [r4, #0]
 800c83e:	2b2e      	cmp	r3, #46	@ 0x2e
 800c840:	d10a      	bne.n	800c858 <_svfiprintf_r+0x130>
 800c842:	7863      	ldrb	r3, [r4, #1]
 800c844:	2b2a      	cmp	r3, #42	@ 0x2a
 800c846:	d132      	bne.n	800c8ae <_svfiprintf_r+0x186>
 800c848:	9b03      	ldr	r3, [sp, #12]
 800c84a:	1d1a      	adds	r2, r3, #4
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	9203      	str	r2, [sp, #12]
 800c850:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c854:	3402      	adds	r4, #2
 800c856:	9305      	str	r3, [sp, #20]
 800c858:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c91c <_svfiprintf_r+0x1f4>
 800c85c:	7821      	ldrb	r1, [r4, #0]
 800c85e:	2203      	movs	r2, #3
 800c860:	4650      	mov	r0, sl
 800c862:	f7f3 fc95 	bl	8000190 <memchr>
 800c866:	b138      	cbz	r0, 800c878 <_svfiprintf_r+0x150>
 800c868:	9b04      	ldr	r3, [sp, #16]
 800c86a:	eba0 000a 	sub.w	r0, r0, sl
 800c86e:	2240      	movs	r2, #64	@ 0x40
 800c870:	4082      	lsls	r2, r0
 800c872:	4313      	orrs	r3, r2
 800c874:	3401      	adds	r4, #1
 800c876:	9304      	str	r3, [sp, #16]
 800c878:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c87c:	4824      	ldr	r0, [pc, #144]	@ (800c910 <_svfiprintf_r+0x1e8>)
 800c87e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c882:	2206      	movs	r2, #6
 800c884:	f7f3 fc84 	bl	8000190 <memchr>
 800c888:	2800      	cmp	r0, #0
 800c88a:	d036      	beq.n	800c8fa <_svfiprintf_r+0x1d2>
 800c88c:	4b21      	ldr	r3, [pc, #132]	@ (800c914 <_svfiprintf_r+0x1ec>)
 800c88e:	bb1b      	cbnz	r3, 800c8d8 <_svfiprintf_r+0x1b0>
 800c890:	9b03      	ldr	r3, [sp, #12]
 800c892:	3307      	adds	r3, #7
 800c894:	f023 0307 	bic.w	r3, r3, #7
 800c898:	3308      	adds	r3, #8
 800c89a:	9303      	str	r3, [sp, #12]
 800c89c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c89e:	4433      	add	r3, r6
 800c8a0:	9309      	str	r3, [sp, #36]	@ 0x24
 800c8a2:	e76a      	b.n	800c77a <_svfiprintf_r+0x52>
 800c8a4:	fb0c 3202 	mla	r2, ip, r2, r3
 800c8a8:	460c      	mov	r4, r1
 800c8aa:	2001      	movs	r0, #1
 800c8ac:	e7a8      	b.n	800c800 <_svfiprintf_r+0xd8>
 800c8ae:	2300      	movs	r3, #0
 800c8b0:	3401      	adds	r4, #1
 800c8b2:	9305      	str	r3, [sp, #20]
 800c8b4:	4619      	mov	r1, r3
 800c8b6:	f04f 0c0a 	mov.w	ip, #10
 800c8ba:	4620      	mov	r0, r4
 800c8bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c8c0:	3a30      	subs	r2, #48	@ 0x30
 800c8c2:	2a09      	cmp	r2, #9
 800c8c4:	d903      	bls.n	800c8ce <_svfiprintf_r+0x1a6>
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d0c6      	beq.n	800c858 <_svfiprintf_r+0x130>
 800c8ca:	9105      	str	r1, [sp, #20]
 800c8cc:	e7c4      	b.n	800c858 <_svfiprintf_r+0x130>
 800c8ce:	fb0c 2101 	mla	r1, ip, r1, r2
 800c8d2:	4604      	mov	r4, r0
 800c8d4:	2301      	movs	r3, #1
 800c8d6:	e7f0      	b.n	800c8ba <_svfiprintf_r+0x192>
 800c8d8:	ab03      	add	r3, sp, #12
 800c8da:	9300      	str	r3, [sp, #0]
 800c8dc:	462a      	mov	r2, r5
 800c8de:	4b0e      	ldr	r3, [pc, #56]	@ (800c918 <_svfiprintf_r+0x1f0>)
 800c8e0:	a904      	add	r1, sp, #16
 800c8e2:	4638      	mov	r0, r7
 800c8e4:	f3af 8000 	nop.w
 800c8e8:	1c42      	adds	r2, r0, #1
 800c8ea:	4606      	mov	r6, r0
 800c8ec:	d1d6      	bne.n	800c89c <_svfiprintf_r+0x174>
 800c8ee:	89ab      	ldrh	r3, [r5, #12]
 800c8f0:	065b      	lsls	r3, r3, #25
 800c8f2:	f53f af2d 	bmi.w	800c750 <_svfiprintf_r+0x28>
 800c8f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c8f8:	e72c      	b.n	800c754 <_svfiprintf_r+0x2c>
 800c8fa:	ab03      	add	r3, sp, #12
 800c8fc:	9300      	str	r3, [sp, #0]
 800c8fe:	462a      	mov	r2, r5
 800c900:	4b05      	ldr	r3, [pc, #20]	@ (800c918 <_svfiprintf_r+0x1f0>)
 800c902:	a904      	add	r1, sp, #16
 800c904:	4638      	mov	r0, r7
 800c906:	f000 f9bb 	bl	800cc80 <_printf_i>
 800c90a:	e7ed      	b.n	800c8e8 <_svfiprintf_r+0x1c0>
 800c90c:	0800e9ee 	.word	0x0800e9ee
 800c910:	0800e9f8 	.word	0x0800e9f8
 800c914:	00000000 	.word	0x00000000
 800c918:	0800c671 	.word	0x0800c671
 800c91c:	0800e9f4 	.word	0x0800e9f4

0800c920 <__sfputc_r>:
 800c920:	6893      	ldr	r3, [r2, #8]
 800c922:	3b01      	subs	r3, #1
 800c924:	2b00      	cmp	r3, #0
 800c926:	b410      	push	{r4}
 800c928:	6093      	str	r3, [r2, #8]
 800c92a:	da08      	bge.n	800c93e <__sfputc_r+0x1e>
 800c92c:	6994      	ldr	r4, [r2, #24]
 800c92e:	42a3      	cmp	r3, r4
 800c930:	db01      	blt.n	800c936 <__sfputc_r+0x16>
 800c932:	290a      	cmp	r1, #10
 800c934:	d103      	bne.n	800c93e <__sfputc_r+0x1e>
 800c936:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c93a:	f7ff bc88 	b.w	800c24e <__swbuf_r>
 800c93e:	6813      	ldr	r3, [r2, #0]
 800c940:	1c58      	adds	r0, r3, #1
 800c942:	6010      	str	r0, [r2, #0]
 800c944:	7019      	strb	r1, [r3, #0]
 800c946:	4608      	mov	r0, r1
 800c948:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c94c:	4770      	bx	lr

0800c94e <__sfputs_r>:
 800c94e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c950:	4606      	mov	r6, r0
 800c952:	460f      	mov	r7, r1
 800c954:	4614      	mov	r4, r2
 800c956:	18d5      	adds	r5, r2, r3
 800c958:	42ac      	cmp	r4, r5
 800c95a:	d101      	bne.n	800c960 <__sfputs_r+0x12>
 800c95c:	2000      	movs	r0, #0
 800c95e:	e007      	b.n	800c970 <__sfputs_r+0x22>
 800c960:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c964:	463a      	mov	r2, r7
 800c966:	4630      	mov	r0, r6
 800c968:	f7ff ffda 	bl	800c920 <__sfputc_r>
 800c96c:	1c43      	adds	r3, r0, #1
 800c96e:	d1f3      	bne.n	800c958 <__sfputs_r+0xa>
 800c970:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c974 <_vfiprintf_r>:
 800c974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c978:	460d      	mov	r5, r1
 800c97a:	b09d      	sub	sp, #116	@ 0x74
 800c97c:	4614      	mov	r4, r2
 800c97e:	4698      	mov	r8, r3
 800c980:	4606      	mov	r6, r0
 800c982:	b118      	cbz	r0, 800c98c <_vfiprintf_r+0x18>
 800c984:	6a03      	ldr	r3, [r0, #32]
 800c986:	b90b      	cbnz	r3, 800c98c <_vfiprintf_r+0x18>
 800c988:	f7ff fb50 	bl	800c02c <__sinit>
 800c98c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c98e:	07d9      	lsls	r1, r3, #31
 800c990:	d405      	bmi.n	800c99e <_vfiprintf_r+0x2a>
 800c992:	89ab      	ldrh	r3, [r5, #12]
 800c994:	059a      	lsls	r2, r3, #22
 800c996:	d402      	bmi.n	800c99e <_vfiprintf_r+0x2a>
 800c998:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c99a:	f7ff fd60 	bl	800c45e <__retarget_lock_acquire_recursive>
 800c99e:	89ab      	ldrh	r3, [r5, #12]
 800c9a0:	071b      	lsls	r3, r3, #28
 800c9a2:	d501      	bpl.n	800c9a8 <_vfiprintf_r+0x34>
 800c9a4:	692b      	ldr	r3, [r5, #16]
 800c9a6:	b99b      	cbnz	r3, 800c9d0 <_vfiprintf_r+0x5c>
 800c9a8:	4629      	mov	r1, r5
 800c9aa:	4630      	mov	r0, r6
 800c9ac:	f7ff fc8e 	bl	800c2cc <__swsetup_r>
 800c9b0:	b170      	cbz	r0, 800c9d0 <_vfiprintf_r+0x5c>
 800c9b2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c9b4:	07dc      	lsls	r4, r3, #31
 800c9b6:	d504      	bpl.n	800c9c2 <_vfiprintf_r+0x4e>
 800c9b8:	f04f 30ff 	mov.w	r0, #4294967295
 800c9bc:	b01d      	add	sp, #116	@ 0x74
 800c9be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9c2:	89ab      	ldrh	r3, [r5, #12]
 800c9c4:	0598      	lsls	r0, r3, #22
 800c9c6:	d4f7      	bmi.n	800c9b8 <_vfiprintf_r+0x44>
 800c9c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c9ca:	f7ff fd49 	bl	800c460 <__retarget_lock_release_recursive>
 800c9ce:	e7f3      	b.n	800c9b8 <_vfiprintf_r+0x44>
 800c9d0:	2300      	movs	r3, #0
 800c9d2:	9309      	str	r3, [sp, #36]	@ 0x24
 800c9d4:	2320      	movs	r3, #32
 800c9d6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c9da:	f8cd 800c 	str.w	r8, [sp, #12]
 800c9de:	2330      	movs	r3, #48	@ 0x30
 800c9e0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800cb90 <_vfiprintf_r+0x21c>
 800c9e4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c9e8:	f04f 0901 	mov.w	r9, #1
 800c9ec:	4623      	mov	r3, r4
 800c9ee:	469a      	mov	sl, r3
 800c9f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c9f4:	b10a      	cbz	r2, 800c9fa <_vfiprintf_r+0x86>
 800c9f6:	2a25      	cmp	r2, #37	@ 0x25
 800c9f8:	d1f9      	bne.n	800c9ee <_vfiprintf_r+0x7a>
 800c9fa:	ebba 0b04 	subs.w	fp, sl, r4
 800c9fe:	d00b      	beq.n	800ca18 <_vfiprintf_r+0xa4>
 800ca00:	465b      	mov	r3, fp
 800ca02:	4622      	mov	r2, r4
 800ca04:	4629      	mov	r1, r5
 800ca06:	4630      	mov	r0, r6
 800ca08:	f7ff ffa1 	bl	800c94e <__sfputs_r>
 800ca0c:	3001      	adds	r0, #1
 800ca0e:	f000 80a7 	beq.w	800cb60 <_vfiprintf_r+0x1ec>
 800ca12:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ca14:	445a      	add	r2, fp
 800ca16:	9209      	str	r2, [sp, #36]	@ 0x24
 800ca18:	f89a 3000 	ldrb.w	r3, [sl]
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	f000 809f 	beq.w	800cb60 <_vfiprintf_r+0x1ec>
 800ca22:	2300      	movs	r3, #0
 800ca24:	f04f 32ff 	mov.w	r2, #4294967295
 800ca28:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ca2c:	f10a 0a01 	add.w	sl, sl, #1
 800ca30:	9304      	str	r3, [sp, #16]
 800ca32:	9307      	str	r3, [sp, #28]
 800ca34:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ca38:	931a      	str	r3, [sp, #104]	@ 0x68
 800ca3a:	4654      	mov	r4, sl
 800ca3c:	2205      	movs	r2, #5
 800ca3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca42:	4853      	ldr	r0, [pc, #332]	@ (800cb90 <_vfiprintf_r+0x21c>)
 800ca44:	f7f3 fba4 	bl	8000190 <memchr>
 800ca48:	9a04      	ldr	r2, [sp, #16]
 800ca4a:	b9d8      	cbnz	r0, 800ca84 <_vfiprintf_r+0x110>
 800ca4c:	06d1      	lsls	r1, r2, #27
 800ca4e:	bf44      	itt	mi
 800ca50:	2320      	movmi	r3, #32
 800ca52:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ca56:	0713      	lsls	r3, r2, #28
 800ca58:	bf44      	itt	mi
 800ca5a:	232b      	movmi	r3, #43	@ 0x2b
 800ca5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ca60:	f89a 3000 	ldrb.w	r3, [sl]
 800ca64:	2b2a      	cmp	r3, #42	@ 0x2a
 800ca66:	d015      	beq.n	800ca94 <_vfiprintf_r+0x120>
 800ca68:	9a07      	ldr	r2, [sp, #28]
 800ca6a:	4654      	mov	r4, sl
 800ca6c:	2000      	movs	r0, #0
 800ca6e:	f04f 0c0a 	mov.w	ip, #10
 800ca72:	4621      	mov	r1, r4
 800ca74:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ca78:	3b30      	subs	r3, #48	@ 0x30
 800ca7a:	2b09      	cmp	r3, #9
 800ca7c:	d94b      	bls.n	800cb16 <_vfiprintf_r+0x1a2>
 800ca7e:	b1b0      	cbz	r0, 800caae <_vfiprintf_r+0x13a>
 800ca80:	9207      	str	r2, [sp, #28]
 800ca82:	e014      	b.n	800caae <_vfiprintf_r+0x13a>
 800ca84:	eba0 0308 	sub.w	r3, r0, r8
 800ca88:	fa09 f303 	lsl.w	r3, r9, r3
 800ca8c:	4313      	orrs	r3, r2
 800ca8e:	9304      	str	r3, [sp, #16]
 800ca90:	46a2      	mov	sl, r4
 800ca92:	e7d2      	b.n	800ca3a <_vfiprintf_r+0xc6>
 800ca94:	9b03      	ldr	r3, [sp, #12]
 800ca96:	1d19      	adds	r1, r3, #4
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	9103      	str	r1, [sp, #12]
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	bfbb      	ittet	lt
 800caa0:	425b      	neglt	r3, r3
 800caa2:	f042 0202 	orrlt.w	r2, r2, #2
 800caa6:	9307      	strge	r3, [sp, #28]
 800caa8:	9307      	strlt	r3, [sp, #28]
 800caaa:	bfb8      	it	lt
 800caac:	9204      	strlt	r2, [sp, #16]
 800caae:	7823      	ldrb	r3, [r4, #0]
 800cab0:	2b2e      	cmp	r3, #46	@ 0x2e
 800cab2:	d10a      	bne.n	800caca <_vfiprintf_r+0x156>
 800cab4:	7863      	ldrb	r3, [r4, #1]
 800cab6:	2b2a      	cmp	r3, #42	@ 0x2a
 800cab8:	d132      	bne.n	800cb20 <_vfiprintf_r+0x1ac>
 800caba:	9b03      	ldr	r3, [sp, #12]
 800cabc:	1d1a      	adds	r2, r3, #4
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	9203      	str	r2, [sp, #12]
 800cac2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cac6:	3402      	adds	r4, #2
 800cac8:	9305      	str	r3, [sp, #20]
 800caca:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800cba0 <_vfiprintf_r+0x22c>
 800cace:	7821      	ldrb	r1, [r4, #0]
 800cad0:	2203      	movs	r2, #3
 800cad2:	4650      	mov	r0, sl
 800cad4:	f7f3 fb5c 	bl	8000190 <memchr>
 800cad8:	b138      	cbz	r0, 800caea <_vfiprintf_r+0x176>
 800cada:	9b04      	ldr	r3, [sp, #16]
 800cadc:	eba0 000a 	sub.w	r0, r0, sl
 800cae0:	2240      	movs	r2, #64	@ 0x40
 800cae2:	4082      	lsls	r2, r0
 800cae4:	4313      	orrs	r3, r2
 800cae6:	3401      	adds	r4, #1
 800cae8:	9304      	str	r3, [sp, #16]
 800caea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800caee:	4829      	ldr	r0, [pc, #164]	@ (800cb94 <_vfiprintf_r+0x220>)
 800caf0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800caf4:	2206      	movs	r2, #6
 800caf6:	f7f3 fb4b 	bl	8000190 <memchr>
 800cafa:	2800      	cmp	r0, #0
 800cafc:	d03f      	beq.n	800cb7e <_vfiprintf_r+0x20a>
 800cafe:	4b26      	ldr	r3, [pc, #152]	@ (800cb98 <_vfiprintf_r+0x224>)
 800cb00:	bb1b      	cbnz	r3, 800cb4a <_vfiprintf_r+0x1d6>
 800cb02:	9b03      	ldr	r3, [sp, #12]
 800cb04:	3307      	adds	r3, #7
 800cb06:	f023 0307 	bic.w	r3, r3, #7
 800cb0a:	3308      	adds	r3, #8
 800cb0c:	9303      	str	r3, [sp, #12]
 800cb0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cb10:	443b      	add	r3, r7
 800cb12:	9309      	str	r3, [sp, #36]	@ 0x24
 800cb14:	e76a      	b.n	800c9ec <_vfiprintf_r+0x78>
 800cb16:	fb0c 3202 	mla	r2, ip, r2, r3
 800cb1a:	460c      	mov	r4, r1
 800cb1c:	2001      	movs	r0, #1
 800cb1e:	e7a8      	b.n	800ca72 <_vfiprintf_r+0xfe>
 800cb20:	2300      	movs	r3, #0
 800cb22:	3401      	adds	r4, #1
 800cb24:	9305      	str	r3, [sp, #20]
 800cb26:	4619      	mov	r1, r3
 800cb28:	f04f 0c0a 	mov.w	ip, #10
 800cb2c:	4620      	mov	r0, r4
 800cb2e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cb32:	3a30      	subs	r2, #48	@ 0x30
 800cb34:	2a09      	cmp	r2, #9
 800cb36:	d903      	bls.n	800cb40 <_vfiprintf_r+0x1cc>
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d0c6      	beq.n	800caca <_vfiprintf_r+0x156>
 800cb3c:	9105      	str	r1, [sp, #20]
 800cb3e:	e7c4      	b.n	800caca <_vfiprintf_r+0x156>
 800cb40:	fb0c 2101 	mla	r1, ip, r1, r2
 800cb44:	4604      	mov	r4, r0
 800cb46:	2301      	movs	r3, #1
 800cb48:	e7f0      	b.n	800cb2c <_vfiprintf_r+0x1b8>
 800cb4a:	ab03      	add	r3, sp, #12
 800cb4c:	9300      	str	r3, [sp, #0]
 800cb4e:	462a      	mov	r2, r5
 800cb50:	4b12      	ldr	r3, [pc, #72]	@ (800cb9c <_vfiprintf_r+0x228>)
 800cb52:	a904      	add	r1, sp, #16
 800cb54:	4630      	mov	r0, r6
 800cb56:	f3af 8000 	nop.w
 800cb5a:	4607      	mov	r7, r0
 800cb5c:	1c78      	adds	r0, r7, #1
 800cb5e:	d1d6      	bne.n	800cb0e <_vfiprintf_r+0x19a>
 800cb60:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cb62:	07d9      	lsls	r1, r3, #31
 800cb64:	d405      	bmi.n	800cb72 <_vfiprintf_r+0x1fe>
 800cb66:	89ab      	ldrh	r3, [r5, #12]
 800cb68:	059a      	lsls	r2, r3, #22
 800cb6a:	d402      	bmi.n	800cb72 <_vfiprintf_r+0x1fe>
 800cb6c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cb6e:	f7ff fc77 	bl	800c460 <__retarget_lock_release_recursive>
 800cb72:	89ab      	ldrh	r3, [r5, #12]
 800cb74:	065b      	lsls	r3, r3, #25
 800cb76:	f53f af1f 	bmi.w	800c9b8 <_vfiprintf_r+0x44>
 800cb7a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cb7c:	e71e      	b.n	800c9bc <_vfiprintf_r+0x48>
 800cb7e:	ab03      	add	r3, sp, #12
 800cb80:	9300      	str	r3, [sp, #0]
 800cb82:	462a      	mov	r2, r5
 800cb84:	4b05      	ldr	r3, [pc, #20]	@ (800cb9c <_vfiprintf_r+0x228>)
 800cb86:	a904      	add	r1, sp, #16
 800cb88:	4630      	mov	r0, r6
 800cb8a:	f000 f879 	bl	800cc80 <_printf_i>
 800cb8e:	e7e4      	b.n	800cb5a <_vfiprintf_r+0x1e6>
 800cb90:	0800e9ee 	.word	0x0800e9ee
 800cb94:	0800e9f8 	.word	0x0800e9f8
 800cb98:	00000000 	.word	0x00000000
 800cb9c:	0800c94f 	.word	0x0800c94f
 800cba0:	0800e9f4 	.word	0x0800e9f4

0800cba4 <_printf_common>:
 800cba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cba8:	4616      	mov	r6, r2
 800cbaa:	4698      	mov	r8, r3
 800cbac:	688a      	ldr	r2, [r1, #8]
 800cbae:	690b      	ldr	r3, [r1, #16]
 800cbb0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800cbb4:	4293      	cmp	r3, r2
 800cbb6:	bfb8      	it	lt
 800cbb8:	4613      	movlt	r3, r2
 800cbba:	6033      	str	r3, [r6, #0]
 800cbbc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800cbc0:	4607      	mov	r7, r0
 800cbc2:	460c      	mov	r4, r1
 800cbc4:	b10a      	cbz	r2, 800cbca <_printf_common+0x26>
 800cbc6:	3301      	adds	r3, #1
 800cbc8:	6033      	str	r3, [r6, #0]
 800cbca:	6823      	ldr	r3, [r4, #0]
 800cbcc:	0699      	lsls	r1, r3, #26
 800cbce:	bf42      	ittt	mi
 800cbd0:	6833      	ldrmi	r3, [r6, #0]
 800cbd2:	3302      	addmi	r3, #2
 800cbd4:	6033      	strmi	r3, [r6, #0]
 800cbd6:	6825      	ldr	r5, [r4, #0]
 800cbd8:	f015 0506 	ands.w	r5, r5, #6
 800cbdc:	d106      	bne.n	800cbec <_printf_common+0x48>
 800cbde:	f104 0a19 	add.w	sl, r4, #25
 800cbe2:	68e3      	ldr	r3, [r4, #12]
 800cbe4:	6832      	ldr	r2, [r6, #0]
 800cbe6:	1a9b      	subs	r3, r3, r2
 800cbe8:	42ab      	cmp	r3, r5
 800cbea:	dc26      	bgt.n	800cc3a <_printf_common+0x96>
 800cbec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800cbf0:	6822      	ldr	r2, [r4, #0]
 800cbf2:	3b00      	subs	r3, #0
 800cbf4:	bf18      	it	ne
 800cbf6:	2301      	movne	r3, #1
 800cbf8:	0692      	lsls	r2, r2, #26
 800cbfa:	d42b      	bmi.n	800cc54 <_printf_common+0xb0>
 800cbfc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800cc00:	4641      	mov	r1, r8
 800cc02:	4638      	mov	r0, r7
 800cc04:	47c8      	blx	r9
 800cc06:	3001      	adds	r0, #1
 800cc08:	d01e      	beq.n	800cc48 <_printf_common+0xa4>
 800cc0a:	6823      	ldr	r3, [r4, #0]
 800cc0c:	6922      	ldr	r2, [r4, #16]
 800cc0e:	f003 0306 	and.w	r3, r3, #6
 800cc12:	2b04      	cmp	r3, #4
 800cc14:	bf02      	ittt	eq
 800cc16:	68e5      	ldreq	r5, [r4, #12]
 800cc18:	6833      	ldreq	r3, [r6, #0]
 800cc1a:	1aed      	subeq	r5, r5, r3
 800cc1c:	68a3      	ldr	r3, [r4, #8]
 800cc1e:	bf0c      	ite	eq
 800cc20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cc24:	2500      	movne	r5, #0
 800cc26:	4293      	cmp	r3, r2
 800cc28:	bfc4      	itt	gt
 800cc2a:	1a9b      	subgt	r3, r3, r2
 800cc2c:	18ed      	addgt	r5, r5, r3
 800cc2e:	2600      	movs	r6, #0
 800cc30:	341a      	adds	r4, #26
 800cc32:	42b5      	cmp	r5, r6
 800cc34:	d11a      	bne.n	800cc6c <_printf_common+0xc8>
 800cc36:	2000      	movs	r0, #0
 800cc38:	e008      	b.n	800cc4c <_printf_common+0xa8>
 800cc3a:	2301      	movs	r3, #1
 800cc3c:	4652      	mov	r2, sl
 800cc3e:	4641      	mov	r1, r8
 800cc40:	4638      	mov	r0, r7
 800cc42:	47c8      	blx	r9
 800cc44:	3001      	adds	r0, #1
 800cc46:	d103      	bne.n	800cc50 <_printf_common+0xac>
 800cc48:	f04f 30ff 	mov.w	r0, #4294967295
 800cc4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc50:	3501      	adds	r5, #1
 800cc52:	e7c6      	b.n	800cbe2 <_printf_common+0x3e>
 800cc54:	18e1      	adds	r1, r4, r3
 800cc56:	1c5a      	adds	r2, r3, #1
 800cc58:	2030      	movs	r0, #48	@ 0x30
 800cc5a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800cc5e:	4422      	add	r2, r4
 800cc60:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800cc64:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800cc68:	3302      	adds	r3, #2
 800cc6a:	e7c7      	b.n	800cbfc <_printf_common+0x58>
 800cc6c:	2301      	movs	r3, #1
 800cc6e:	4622      	mov	r2, r4
 800cc70:	4641      	mov	r1, r8
 800cc72:	4638      	mov	r0, r7
 800cc74:	47c8      	blx	r9
 800cc76:	3001      	adds	r0, #1
 800cc78:	d0e6      	beq.n	800cc48 <_printf_common+0xa4>
 800cc7a:	3601      	adds	r6, #1
 800cc7c:	e7d9      	b.n	800cc32 <_printf_common+0x8e>
	...

0800cc80 <_printf_i>:
 800cc80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cc84:	7e0f      	ldrb	r7, [r1, #24]
 800cc86:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800cc88:	2f78      	cmp	r7, #120	@ 0x78
 800cc8a:	4691      	mov	r9, r2
 800cc8c:	4680      	mov	r8, r0
 800cc8e:	460c      	mov	r4, r1
 800cc90:	469a      	mov	sl, r3
 800cc92:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800cc96:	d807      	bhi.n	800cca8 <_printf_i+0x28>
 800cc98:	2f62      	cmp	r7, #98	@ 0x62
 800cc9a:	d80a      	bhi.n	800ccb2 <_printf_i+0x32>
 800cc9c:	2f00      	cmp	r7, #0
 800cc9e:	f000 80d2 	beq.w	800ce46 <_printf_i+0x1c6>
 800cca2:	2f58      	cmp	r7, #88	@ 0x58
 800cca4:	f000 80b9 	beq.w	800ce1a <_printf_i+0x19a>
 800cca8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ccac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ccb0:	e03a      	b.n	800cd28 <_printf_i+0xa8>
 800ccb2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ccb6:	2b15      	cmp	r3, #21
 800ccb8:	d8f6      	bhi.n	800cca8 <_printf_i+0x28>
 800ccba:	a101      	add	r1, pc, #4	@ (adr r1, 800ccc0 <_printf_i+0x40>)
 800ccbc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ccc0:	0800cd19 	.word	0x0800cd19
 800ccc4:	0800cd2d 	.word	0x0800cd2d
 800ccc8:	0800cca9 	.word	0x0800cca9
 800cccc:	0800cca9 	.word	0x0800cca9
 800ccd0:	0800cca9 	.word	0x0800cca9
 800ccd4:	0800cca9 	.word	0x0800cca9
 800ccd8:	0800cd2d 	.word	0x0800cd2d
 800ccdc:	0800cca9 	.word	0x0800cca9
 800cce0:	0800cca9 	.word	0x0800cca9
 800cce4:	0800cca9 	.word	0x0800cca9
 800cce8:	0800cca9 	.word	0x0800cca9
 800ccec:	0800ce2d 	.word	0x0800ce2d
 800ccf0:	0800cd57 	.word	0x0800cd57
 800ccf4:	0800cde7 	.word	0x0800cde7
 800ccf8:	0800cca9 	.word	0x0800cca9
 800ccfc:	0800cca9 	.word	0x0800cca9
 800cd00:	0800ce4f 	.word	0x0800ce4f
 800cd04:	0800cca9 	.word	0x0800cca9
 800cd08:	0800cd57 	.word	0x0800cd57
 800cd0c:	0800cca9 	.word	0x0800cca9
 800cd10:	0800cca9 	.word	0x0800cca9
 800cd14:	0800cdef 	.word	0x0800cdef
 800cd18:	6833      	ldr	r3, [r6, #0]
 800cd1a:	1d1a      	adds	r2, r3, #4
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	6032      	str	r2, [r6, #0]
 800cd20:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cd24:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800cd28:	2301      	movs	r3, #1
 800cd2a:	e09d      	b.n	800ce68 <_printf_i+0x1e8>
 800cd2c:	6833      	ldr	r3, [r6, #0]
 800cd2e:	6820      	ldr	r0, [r4, #0]
 800cd30:	1d19      	adds	r1, r3, #4
 800cd32:	6031      	str	r1, [r6, #0]
 800cd34:	0606      	lsls	r6, r0, #24
 800cd36:	d501      	bpl.n	800cd3c <_printf_i+0xbc>
 800cd38:	681d      	ldr	r5, [r3, #0]
 800cd3a:	e003      	b.n	800cd44 <_printf_i+0xc4>
 800cd3c:	0645      	lsls	r5, r0, #25
 800cd3e:	d5fb      	bpl.n	800cd38 <_printf_i+0xb8>
 800cd40:	f9b3 5000 	ldrsh.w	r5, [r3]
 800cd44:	2d00      	cmp	r5, #0
 800cd46:	da03      	bge.n	800cd50 <_printf_i+0xd0>
 800cd48:	232d      	movs	r3, #45	@ 0x2d
 800cd4a:	426d      	negs	r5, r5
 800cd4c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cd50:	4859      	ldr	r0, [pc, #356]	@ (800ceb8 <_printf_i+0x238>)
 800cd52:	230a      	movs	r3, #10
 800cd54:	e011      	b.n	800cd7a <_printf_i+0xfa>
 800cd56:	6821      	ldr	r1, [r4, #0]
 800cd58:	6833      	ldr	r3, [r6, #0]
 800cd5a:	0608      	lsls	r0, r1, #24
 800cd5c:	f853 5b04 	ldr.w	r5, [r3], #4
 800cd60:	d402      	bmi.n	800cd68 <_printf_i+0xe8>
 800cd62:	0649      	lsls	r1, r1, #25
 800cd64:	bf48      	it	mi
 800cd66:	b2ad      	uxthmi	r5, r5
 800cd68:	2f6f      	cmp	r7, #111	@ 0x6f
 800cd6a:	4853      	ldr	r0, [pc, #332]	@ (800ceb8 <_printf_i+0x238>)
 800cd6c:	6033      	str	r3, [r6, #0]
 800cd6e:	bf14      	ite	ne
 800cd70:	230a      	movne	r3, #10
 800cd72:	2308      	moveq	r3, #8
 800cd74:	2100      	movs	r1, #0
 800cd76:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800cd7a:	6866      	ldr	r6, [r4, #4]
 800cd7c:	60a6      	str	r6, [r4, #8]
 800cd7e:	2e00      	cmp	r6, #0
 800cd80:	bfa2      	ittt	ge
 800cd82:	6821      	ldrge	r1, [r4, #0]
 800cd84:	f021 0104 	bicge.w	r1, r1, #4
 800cd88:	6021      	strge	r1, [r4, #0]
 800cd8a:	b90d      	cbnz	r5, 800cd90 <_printf_i+0x110>
 800cd8c:	2e00      	cmp	r6, #0
 800cd8e:	d04b      	beq.n	800ce28 <_printf_i+0x1a8>
 800cd90:	4616      	mov	r6, r2
 800cd92:	fbb5 f1f3 	udiv	r1, r5, r3
 800cd96:	fb03 5711 	mls	r7, r3, r1, r5
 800cd9a:	5dc7      	ldrb	r7, [r0, r7]
 800cd9c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800cda0:	462f      	mov	r7, r5
 800cda2:	42bb      	cmp	r3, r7
 800cda4:	460d      	mov	r5, r1
 800cda6:	d9f4      	bls.n	800cd92 <_printf_i+0x112>
 800cda8:	2b08      	cmp	r3, #8
 800cdaa:	d10b      	bne.n	800cdc4 <_printf_i+0x144>
 800cdac:	6823      	ldr	r3, [r4, #0]
 800cdae:	07df      	lsls	r7, r3, #31
 800cdb0:	d508      	bpl.n	800cdc4 <_printf_i+0x144>
 800cdb2:	6923      	ldr	r3, [r4, #16]
 800cdb4:	6861      	ldr	r1, [r4, #4]
 800cdb6:	4299      	cmp	r1, r3
 800cdb8:	bfde      	ittt	le
 800cdba:	2330      	movle	r3, #48	@ 0x30
 800cdbc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800cdc0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800cdc4:	1b92      	subs	r2, r2, r6
 800cdc6:	6122      	str	r2, [r4, #16]
 800cdc8:	f8cd a000 	str.w	sl, [sp]
 800cdcc:	464b      	mov	r3, r9
 800cdce:	aa03      	add	r2, sp, #12
 800cdd0:	4621      	mov	r1, r4
 800cdd2:	4640      	mov	r0, r8
 800cdd4:	f7ff fee6 	bl	800cba4 <_printf_common>
 800cdd8:	3001      	adds	r0, #1
 800cdda:	d14a      	bne.n	800ce72 <_printf_i+0x1f2>
 800cddc:	f04f 30ff 	mov.w	r0, #4294967295
 800cde0:	b004      	add	sp, #16
 800cde2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cde6:	6823      	ldr	r3, [r4, #0]
 800cde8:	f043 0320 	orr.w	r3, r3, #32
 800cdec:	6023      	str	r3, [r4, #0]
 800cdee:	4833      	ldr	r0, [pc, #204]	@ (800cebc <_printf_i+0x23c>)
 800cdf0:	2778      	movs	r7, #120	@ 0x78
 800cdf2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800cdf6:	6823      	ldr	r3, [r4, #0]
 800cdf8:	6831      	ldr	r1, [r6, #0]
 800cdfa:	061f      	lsls	r7, r3, #24
 800cdfc:	f851 5b04 	ldr.w	r5, [r1], #4
 800ce00:	d402      	bmi.n	800ce08 <_printf_i+0x188>
 800ce02:	065f      	lsls	r7, r3, #25
 800ce04:	bf48      	it	mi
 800ce06:	b2ad      	uxthmi	r5, r5
 800ce08:	6031      	str	r1, [r6, #0]
 800ce0a:	07d9      	lsls	r1, r3, #31
 800ce0c:	bf44      	itt	mi
 800ce0e:	f043 0320 	orrmi.w	r3, r3, #32
 800ce12:	6023      	strmi	r3, [r4, #0]
 800ce14:	b11d      	cbz	r5, 800ce1e <_printf_i+0x19e>
 800ce16:	2310      	movs	r3, #16
 800ce18:	e7ac      	b.n	800cd74 <_printf_i+0xf4>
 800ce1a:	4827      	ldr	r0, [pc, #156]	@ (800ceb8 <_printf_i+0x238>)
 800ce1c:	e7e9      	b.n	800cdf2 <_printf_i+0x172>
 800ce1e:	6823      	ldr	r3, [r4, #0]
 800ce20:	f023 0320 	bic.w	r3, r3, #32
 800ce24:	6023      	str	r3, [r4, #0]
 800ce26:	e7f6      	b.n	800ce16 <_printf_i+0x196>
 800ce28:	4616      	mov	r6, r2
 800ce2a:	e7bd      	b.n	800cda8 <_printf_i+0x128>
 800ce2c:	6833      	ldr	r3, [r6, #0]
 800ce2e:	6825      	ldr	r5, [r4, #0]
 800ce30:	6961      	ldr	r1, [r4, #20]
 800ce32:	1d18      	adds	r0, r3, #4
 800ce34:	6030      	str	r0, [r6, #0]
 800ce36:	062e      	lsls	r6, r5, #24
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	d501      	bpl.n	800ce40 <_printf_i+0x1c0>
 800ce3c:	6019      	str	r1, [r3, #0]
 800ce3e:	e002      	b.n	800ce46 <_printf_i+0x1c6>
 800ce40:	0668      	lsls	r0, r5, #25
 800ce42:	d5fb      	bpl.n	800ce3c <_printf_i+0x1bc>
 800ce44:	8019      	strh	r1, [r3, #0]
 800ce46:	2300      	movs	r3, #0
 800ce48:	6123      	str	r3, [r4, #16]
 800ce4a:	4616      	mov	r6, r2
 800ce4c:	e7bc      	b.n	800cdc8 <_printf_i+0x148>
 800ce4e:	6833      	ldr	r3, [r6, #0]
 800ce50:	1d1a      	adds	r2, r3, #4
 800ce52:	6032      	str	r2, [r6, #0]
 800ce54:	681e      	ldr	r6, [r3, #0]
 800ce56:	6862      	ldr	r2, [r4, #4]
 800ce58:	2100      	movs	r1, #0
 800ce5a:	4630      	mov	r0, r6
 800ce5c:	f7f3 f998 	bl	8000190 <memchr>
 800ce60:	b108      	cbz	r0, 800ce66 <_printf_i+0x1e6>
 800ce62:	1b80      	subs	r0, r0, r6
 800ce64:	6060      	str	r0, [r4, #4]
 800ce66:	6863      	ldr	r3, [r4, #4]
 800ce68:	6123      	str	r3, [r4, #16]
 800ce6a:	2300      	movs	r3, #0
 800ce6c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ce70:	e7aa      	b.n	800cdc8 <_printf_i+0x148>
 800ce72:	6923      	ldr	r3, [r4, #16]
 800ce74:	4632      	mov	r2, r6
 800ce76:	4649      	mov	r1, r9
 800ce78:	4640      	mov	r0, r8
 800ce7a:	47d0      	blx	sl
 800ce7c:	3001      	adds	r0, #1
 800ce7e:	d0ad      	beq.n	800cddc <_printf_i+0x15c>
 800ce80:	6823      	ldr	r3, [r4, #0]
 800ce82:	079b      	lsls	r3, r3, #30
 800ce84:	d413      	bmi.n	800ceae <_printf_i+0x22e>
 800ce86:	68e0      	ldr	r0, [r4, #12]
 800ce88:	9b03      	ldr	r3, [sp, #12]
 800ce8a:	4298      	cmp	r0, r3
 800ce8c:	bfb8      	it	lt
 800ce8e:	4618      	movlt	r0, r3
 800ce90:	e7a6      	b.n	800cde0 <_printf_i+0x160>
 800ce92:	2301      	movs	r3, #1
 800ce94:	4632      	mov	r2, r6
 800ce96:	4649      	mov	r1, r9
 800ce98:	4640      	mov	r0, r8
 800ce9a:	47d0      	blx	sl
 800ce9c:	3001      	adds	r0, #1
 800ce9e:	d09d      	beq.n	800cddc <_printf_i+0x15c>
 800cea0:	3501      	adds	r5, #1
 800cea2:	68e3      	ldr	r3, [r4, #12]
 800cea4:	9903      	ldr	r1, [sp, #12]
 800cea6:	1a5b      	subs	r3, r3, r1
 800cea8:	42ab      	cmp	r3, r5
 800ceaa:	dcf2      	bgt.n	800ce92 <_printf_i+0x212>
 800ceac:	e7eb      	b.n	800ce86 <_printf_i+0x206>
 800ceae:	2500      	movs	r5, #0
 800ceb0:	f104 0619 	add.w	r6, r4, #25
 800ceb4:	e7f5      	b.n	800cea2 <_printf_i+0x222>
 800ceb6:	bf00      	nop
 800ceb8:	0800e9ff 	.word	0x0800e9ff
 800cebc:	0800ea10 	.word	0x0800ea10

0800cec0 <__sflush_r>:
 800cec0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cec4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cec8:	0716      	lsls	r6, r2, #28
 800ceca:	4605      	mov	r5, r0
 800cecc:	460c      	mov	r4, r1
 800cece:	d454      	bmi.n	800cf7a <__sflush_r+0xba>
 800ced0:	684b      	ldr	r3, [r1, #4]
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	dc02      	bgt.n	800cedc <__sflush_r+0x1c>
 800ced6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	dd48      	ble.n	800cf6e <__sflush_r+0xae>
 800cedc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cede:	2e00      	cmp	r6, #0
 800cee0:	d045      	beq.n	800cf6e <__sflush_r+0xae>
 800cee2:	2300      	movs	r3, #0
 800cee4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800cee8:	682f      	ldr	r7, [r5, #0]
 800ceea:	6a21      	ldr	r1, [r4, #32]
 800ceec:	602b      	str	r3, [r5, #0]
 800ceee:	d030      	beq.n	800cf52 <__sflush_r+0x92>
 800cef0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800cef2:	89a3      	ldrh	r3, [r4, #12]
 800cef4:	0759      	lsls	r1, r3, #29
 800cef6:	d505      	bpl.n	800cf04 <__sflush_r+0x44>
 800cef8:	6863      	ldr	r3, [r4, #4]
 800cefa:	1ad2      	subs	r2, r2, r3
 800cefc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800cefe:	b10b      	cbz	r3, 800cf04 <__sflush_r+0x44>
 800cf00:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800cf02:	1ad2      	subs	r2, r2, r3
 800cf04:	2300      	movs	r3, #0
 800cf06:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cf08:	6a21      	ldr	r1, [r4, #32]
 800cf0a:	4628      	mov	r0, r5
 800cf0c:	47b0      	blx	r6
 800cf0e:	1c43      	adds	r3, r0, #1
 800cf10:	89a3      	ldrh	r3, [r4, #12]
 800cf12:	d106      	bne.n	800cf22 <__sflush_r+0x62>
 800cf14:	6829      	ldr	r1, [r5, #0]
 800cf16:	291d      	cmp	r1, #29
 800cf18:	d82b      	bhi.n	800cf72 <__sflush_r+0xb2>
 800cf1a:	4a2a      	ldr	r2, [pc, #168]	@ (800cfc4 <__sflush_r+0x104>)
 800cf1c:	410a      	asrs	r2, r1
 800cf1e:	07d6      	lsls	r6, r2, #31
 800cf20:	d427      	bmi.n	800cf72 <__sflush_r+0xb2>
 800cf22:	2200      	movs	r2, #0
 800cf24:	6062      	str	r2, [r4, #4]
 800cf26:	04d9      	lsls	r1, r3, #19
 800cf28:	6922      	ldr	r2, [r4, #16]
 800cf2a:	6022      	str	r2, [r4, #0]
 800cf2c:	d504      	bpl.n	800cf38 <__sflush_r+0x78>
 800cf2e:	1c42      	adds	r2, r0, #1
 800cf30:	d101      	bne.n	800cf36 <__sflush_r+0x76>
 800cf32:	682b      	ldr	r3, [r5, #0]
 800cf34:	b903      	cbnz	r3, 800cf38 <__sflush_r+0x78>
 800cf36:	6560      	str	r0, [r4, #84]	@ 0x54
 800cf38:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cf3a:	602f      	str	r7, [r5, #0]
 800cf3c:	b1b9      	cbz	r1, 800cf6e <__sflush_r+0xae>
 800cf3e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cf42:	4299      	cmp	r1, r3
 800cf44:	d002      	beq.n	800cf4c <__sflush_r+0x8c>
 800cf46:	4628      	mov	r0, r5
 800cf48:	f7ff fa9a 	bl	800c480 <_free_r>
 800cf4c:	2300      	movs	r3, #0
 800cf4e:	6363      	str	r3, [r4, #52]	@ 0x34
 800cf50:	e00d      	b.n	800cf6e <__sflush_r+0xae>
 800cf52:	2301      	movs	r3, #1
 800cf54:	4628      	mov	r0, r5
 800cf56:	47b0      	blx	r6
 800cf58:	4602      	mov	r2, r0
 800cf5a:	1c50      	adds	r0, r2, #1
 800cf5c:	d1c9      	bne.n	800cef2 <__sflush_r+0x32>
 800cf5e:	682b      	ldr	r3, [r5, #0]
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d0c6      	beq.n	800cef2 <__sflush_r+0x32>
 800cf64:	2b1d      	cmp	r3, #29
 800cf66:	d001      	beq.n	800cf6c <__sflush_r+0xac>
 800cf68:	2b16      	cmp	r3, #22
 800cf6a:	d11e      	bne.n	800cfaa <__sflush_r+0xea>
 800cf6c:	602f      	str	r7, [r5, #0]
 800cf6e:	2000      	movs	r0, #0
 800cf70:	e022      	b.n	800cfb8 <__sflush_r+0xf8>
 800cf72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cf76:	b21b      	sxth	r3, r3
 800cf78:	e01b      	b.n	800cfb2 <__sflush_r+0xf2>
 800cf7a:	690f      	ldr	r7, [r1, #16]
 800cf7c:	2f00      	cmp	r7, #0
 800cf7e:	d0f6      	beq.n	800cf6e <__sflush_r+0xae>
 800cf80:	0793      	lsls	r3, r2, #30
 800cf82:	680e      	ldr	r6, [r1, #0]
 800cf84:	bf08      	it	eq
 800cf86:	694b      	ldreq	r3, [r1, #20]
 800cf88:	600f      	str	r7, [r1, #0]
 800cf8a:	bf18      	it	ne
 800cf8c:	2300      	movne	r3, #0
 800cf8e:	eba6 0807 	sub.w	r8, r6, r7
 800cf92:	608b      	str	r3, [r1, #8]
 800cf94:	f1b8 0f00 	cmp.w	r8, #0
 800cf98:	dde9      	ble.n	800cf6e <__sflush_r+0xae>
 800cf9a:	6a21      	ldr	r1, [r4, #32]
 800cf9c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800cf9e:	4643      	mov	r3, r8
 800cfa0:	463a      	mov	r2, r7
 800cfa2:	4628      	mov	r0, r5
 800cfa4:	47b0      	blx	r6
 800cfa6:	2800      	cmp	r0, #0
 800cfa8:	dc08      	bgt.n	800cfbc <__sflush_r+0xfc>
 800cfaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cfae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cfb2:	81a3      	strh	r3, [r4, #12]
 800cfb4:	f04f 30ff 	mov.w	r0, #4294967295
 800cfb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cfbc:	4407      	add	r7, r0
 800cfbe:	eba8 0800 	sub.w	r8, r8, r0
 800cfc2:	e7e7      	b.n	800cf94 <__sflush_r+0xd4>
 800cfc4:	dfbffffe 	.word	0xdfbffffe

0800cfc8 <_fflush_r>:
 800cfc8:	b538      	push	{r3, r4, r5, lr}
 800cfca:	690b      	ldr	r3, [r1, #16]
 800cfcc:	4605      	mov	r5, r0
 800cfce:	460c      	mov	r4, r1
 800cfd0:	b913      	cbnz	r3, 800cfd8 <_fflush_r+0x10>
 800cfd2:	2500      	movs	r5, #0
 800cfd4:	4628      	mov	r0, r5
 800cfd6:	bd38      	pop	{r3, r4, r5, pc}
 800cfd8:	b118      	cbz	r0, 800cfe2 <_fflush_r+0x1a>
 800cfda:	6a03      	ldr	r3, [r0, #32]
 800cfdc:	b90b      	cbnz	r3, 800cfe2 <_fflush_r+0x1a>
 800cfde:	f7ff f825 	bl	800c02c <__sinit>
 800cfe2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d0f3      	beq.n	800cfd2 <_fflush_r+0xa>
 800cfea:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800cfec:	07d0      	lsls	r0, r2, #31
 800cfee:	d404      	bmi.n	800cffa <_fflush_r+0x32>
 800cff0:	0599      	lsls	r1, r3, #22
 800cff2:	d402      	bmi.n	800cffa <_fflush_r+0x32>
 800cff4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cff6:	f7ff fa32 	bl	800c45e <__retarget_lock_acquire_recursive>
 800cffa:	4628      	mov	r0, r5
 800cffc:	4621      	mov	r1, r4
 800cffe:	f7ff ff5f 	bl	800cec0 <__sflush_r>
 800d002:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d004:	07da      	lsls	r2, r3, #31
 800d006:	4605      	mov	r5, r0
 800d008:	d4e4      	bmi.n	800cfd4 <_fflush_r+0xc>
 800d00a:	89a3      	ldrh	r3, [r4, #12]
 800d00c:	059b      	lsls	r3, r3, #22
 800d00e:	d4e1      	bmi.n	800cfd4 <_fflush_r+0xc>
 800d010:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d012:	f7ff fa25 	bl	800c460 <__retarget_lock_release_recursive>
 800d016:	e7dd      	b.n	800cfd4 <_fflush_r+0xc>

0800d018 <__swhatbuf_r>:
 800d018:	b570      	push	{r4, r5, r6, lr}
 800d01a:	460c      	mov	r4, r1
 800d01c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d020:	2900      	cmp	r1, #0
 800d022:	b096      	sub	sp, #88	@ 0x58
 800d024:	4615      	mov	r5, r2
 800d026:	461e      	mov	r6, r3
 800d028:	da0d      	bge.n	800d046 <__swhatbuf_r+0x2e>
 800d02a:	89a3      	ldrh	r3, [r4, #12]
 800d02c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d030:	f04f 0100 	mov.w	r1, #0
 800d034:	bf14      	ite	ne
 800d036:	2340      	movne	r3, #64	@ 0x40
 800d038:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d03c:	2000      	movs	r0, #0
 800d03e:	6031      	str	r1, [r6, #0]
 800d040:	602b      	str	r3, [r5, #0]
 800d042:	b016      	add	sp, #88	@ 0x58
 800d044:	bd70      	pop	{r4, r5, r6, pc}
 800d046:	466a      	mov	r2, sp
 800d048:	f000 f896 	bl	800d178 <_fstat_r>
 800d04c:	2800      	cmp	r0, #0
 800d04e:	dbec      	blt.n	800d02a <__swhatbuf_r+0x12>
 800d050:	9901      	ldr	r1, [sp, #4]
 800d052:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d056:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d05a:	4259      	negs	r1, r3
 800d05c:	4159      	adcs	r1, r3
 800d05e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d062:	e7eb      	b.n	800d03c <__swhatbuf_r+0x24>

0800d064 <__smakebuf_r>:
 800d064:	898b      	ldrh	r3, [r1, #12]
 800d066:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d068:	079d      	lsls	r5, r3, #30
 800d06a:	4606      	mov	r6, r0
 800d06c:	460c      	mov	r4, r1
 800d06e:	d507      	bpl.n	800d080 <__smakebuf_r+0x1c>
 800d070:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d074:	6023      	str	r3, [r4, #0]
 800d076:	6123      	str	r3, [r4, #16]
 800d078:	2301      	movs	r3, #1
 800d07a:	6163      	str	r3, [r4, #20]
 800d07c:	b003      	add	sp, #12
 800d07e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d080:	ab01      	add	r3, sp, #4
 800d082:	466a      	mov	r2, sp
 800d084:	f7ff ffc8 	bl	800d018 <__swhatbuf_r>
 800d088:	9f00      	ldr	r7, [sp, #0]
 800d08a:	4605      	mov	r5, r0
 800d08c:	4639      	mov	r1, r7
 800d08e:	4630      	mov	r0, r6
 800d090:	f7ff fa62 	bl	800c558 <_malloc_r>
 800d094:	b948      	cbnz	r0, 800d0aa <__smakebuf_r+0x46>
 800d096:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d09a:	059a      	lsls	r2, r3, #22
 800d09c:	d4ee      	bmi.n	800d07c <__smakebuf_r+0x18>
 800d09e:	f023 0303 	bic.w	r3, r3, #3
 800d0a2:	f043 0302 	orr.w	r3, r3, #2
 800d0a6:	81a3      	strh	r3, [r4, #12]
 800d0a8:	e7e2      	b.n	800d070 <__smakebuf_r+0xc>
 800d0aa:	89a3      	ldrh	r3, [r4, #12]
 800d0ac:	6020      	str	r0, [r4, #0]
 800d0ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d0b2:	81a3      	strh	r3, [r4, #12]
 800d0b4:	9b01      	ldr	r3, [sp, #4]
 800d0b6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d0ba:	b15b      	cbz	r3, 800d0d4 <__smakebuf_r+0x70>
 800d0bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d0c0:	4630      	mov	r0, r6
 800d0c2:	f000 f86b 	bl	800d19c <_isatty_r>
 800d0c6:	b128      	cbz	r0, 800d0d4 <__smakebuf_r+0x70>
 800d0c8:	89a3      	ldrh	r3, [r4, #12]
 800d0ca:	f023 0303 	bic.w	r3, r3, #3
 800d0ce:	f043 0301 	orr.w	r3, r3, #1
 800d0d2:	81a3      	strh	r3, [r4, #12]
 800d0d4:	89a3      	ldrh	r3, [r4, #12]
 800d0d6:	431d      	orrs	r5, r3
 800d0d8:	81a5      	strh	r5, [r4, #12]
 800d0da:	e7cf      	b.n	800d07c <__smakebuf_r+0x18>

0800d0dc <_putc_r>:
 800d0dc:	b570      	push	{r4, r5, r6, lr}
 800d0de:	460d      	mov	r5, r1
 800d0e0:	4614      	mov	r4, r2
 800d0e2:	4606      	mov	r6, r0
 800d0e4:	b118      	cbz	r0, 800d0ee <_putc_r+0x12>
 800d0e6:	6a03      	ldr	r3, [r0, #32]
 800d0e8:	b90b      	cbnz	r3, 800d0ee <_putc_r+0x12>
 800d0ea:	f7fe ff9f 	bl	800c02c <__sinit>
 800d0ee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d0f0:	07d8      	lsls	r0, r3, #31
 800d0f2:	d405      	bmi.n	800d100 <_putc_r+0x24>
 800d0f4:	89a3      	ldrh	r3, [r4, #12]
 800d0f6:	0599      	lsls	r1, r3, #22
 800d0f8:	d402      	bmi.n	800d100 <_putc_r+0x24>
 800d0fa:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d0fc:	f7ff f9af 	bl	800c45e <__retarget_lock_acquire_recursive>
 800d100:	68a3      	ldr	r3, [r4, #8]
 800d102:	3b01      	subs	r3, #1
 800d104:	2b00      	cmp	r3, #0
 800d106:	60a3      	str	r3, [r4, #8]
 800d108:	da05      	bge.n	800d116 <_putc_r+0x3a>
 800d10a:	69a2      	ldr	r2, [r4, #24]
 800d10c:	4293      	cmp	r3, r2
 800d10e:	db12      	blt.n	800d136 <_putc_r+0x5a>
 800d110:	b2eb      	uxtb	r3, r5
 800d112:	2b0a      	cmp	r3, #10
 800d114:	d00f      	beq.n	800d136 <_putc_r+0x5a>
 800d116:	6823      	ldr	r3, [r4, #0]
 800d118:	1c5a      	adds	r2, r3, #1
 800d11a:	6022      	str	r2, [r4, #0]
 800d11c:	701d      	strb	r5, [r3, #0]
 800d11e:	b2ed      	uxtb	r5, r5
 800d120:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d122:	07da      	lsls	r2, r3, #31
 800d124:	d405      	bmi.n	800d132 <_putc_r+0x56>
 800d126:	89a3      	ldrh	r3, [r4, #12]
 800d128:	059b      	lsls	r3, r3, #22
 800d12a:	d402      	bmi.n	800d132 <_putc_r+0x56>
 800d12c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d12e:	f7ff f997 	bl	800c460 <__retarget_lock_release_recursive>
 800d132:	4628      	mov	r0, r5
 800d134:	bd70      	pop	{r4, r5, r6, pc}
 800d136:	4629      	mov	r1, r5
 800d138:	4622      	mov	r2, r4
 800d13a:	4630      	mov	r0, r6
 800d13c:	f7ff f887 	bl	800c24e <__swbuf_r>
 800d140:	4605      	mov	r5, r0
 800d142:	e7ed      	b.n	800d120 <_putc_r+0x44>

0800d144 <memmove>:
 800d144:	4288      	cmp	r0, r1
 800d146:	b510      	push	{r4, lr}
 800d148:	eb01 0402 	add.w	r4, r1, r2
 800d14c:	d902      	bls.n	800d154 <memmove+0x10>
 800d14e:	4284      	cmp	r4, r0
 800d150:	4623      	mov	r3, r4
 800d152:	d807      	bhi.n	800d164 <memmove+0x20>
 800d154:	1e43      	subs	r3, r0, #1
 800d156:	42a1      	cmp	r1, r4
 800d158:	d008      	beq.n	800d16c <memmove+0x28>
 800d15a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d15e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d162:	e7f8      	b.n	800d156 <memmove+0x12>
 800d164:	4402      	add	r2, r0
 800d166:	4601      	mov	r1, r0
 800d168:	428a      	cmp	r2, r1
 800d16a:	d100      	bne.n	800d16e <memmove+0x2a>
 800d16c:	bd10      	pop	{r4, pc}
 800d16e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d172:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d176:	e7f7      	b.n	800d168 <memmove+0x24>

0800d178 <_fstat_r>:
 800d178:	b538      	push	{r3, r4, r5, lr}
 800d17a:	4d07      	ldr	r5, [pc, #28]	@ (800d198 <_fstat_r+0x20>)
 800d17c:	2300      	movs	r3, #0
 800d17e:	4604      	mov	r4, r0
 800d180:	4608      	mov	r0, r1
 800d182:	4611      	mov	r1, r2
 800d184:	602b      	str	r3, [r5, #0]
 800d186:	f000 f867 	bl	800d258 <_fstat>
 800d18a:	1c43      	adds	r3, r0, #1
 800d18c:	d102      	bne.n	800d194 <_fstat_r+0x1c>
 800d18e:	682b      	ldr	r3, [r5, #0]
 800d190:	b103      	cbz	r3, 800d194 <_fstat_r+0x1c>
 800d192:	6023      	str	r3, [r4, #0]
 800d194:	bd38      	pop	{r3, r4, r5, pc}
 800d196:	bf00      	nop
 800d198:	2000228c 	.word	0x2000228c

0800d19c <_isatty_r>:
 800d19c:	b538      	push	{r3, r4, r5, lr}
 800d19e:	4d06      	ldr	r5, [pc, #24]	@ (800d1b8 <_isatty_r+0x1c>)
 800d1a0:	2300      	movs	r3, #0
 800d1a2:	4604      	mov	r4, r0
 800d1a4:	4608      	mov	r0, r1
 800d1a6:	602b      	str	r3, [r5, #0]
 800d1a8:	f000 f85e 	bl	800d268 <_isatty>
 800d1ac:	1c43      	adds	r3, r0, #1
 800d1ae:	d102      	bne.n	800d1b6 <_isatty_r+0x1a>
 800d1b0:	682b      	ldr	r3, [r5, #0]
 800d1b2:	b103      	cbz	r3, 800d1b6 <_isatty_r+0x1a>
 800d1b4:	6023      	str	r3, [r4, #0]
 800d1b6:	bd38      	pop	{r3, r4, r5, pc}
 800d1b8:	2000228c 	.word	0x2000228c

0800d1bc <_sbrk_r>:
 800d1bc:	b538      	push	{r3, r4, r5, lr}
 800d1be:	4d06      	ldr	r5, [pc, #24]	@ (800d1d8 <_sbrk_r+0x1c>)
 800d1c0:	2300      	movs	r3, #0
 800d1c2:	4604      	mov	r4, r0
 800d1c4:	4608      	mov	r0, r1
 800d1c6:	602b      	str	r3, [r5, #0]
 800d1c8:	f000 f866 	bl	800d298 <_sbrk>
 800d1cc:	1c43      	adds	r3, r0, #1
 800d1ce:	d102      	bne.n	800d1d6 <_sbrk_r+0x1a>
 800d1d0:	682b      	ldr	r3, [r5, #0]
 800d1d2:	b103      	cbz	r3, 800d1d6 <_sbrk_r+0x1a>
 800d1d4:	6023      	str	r3, [r4, #0]
 800d1d6:	bd38      	pop	{r3, r4, r5, pc}
 800d1d8:	2000228c 	.word	0x2000228c

0800d1dc <_realloc_r>:
 800d1dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1e0:	4680      	mov	r8, r0
 800d1e2:	4615      	mov	r5, r2
 800d1e4:	460c      	mov	r4, r1
 800d1e6:	b921      	cbnz	r1, 800d1f2 <_realloc_r+0x16>
 800d1e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d1ec:	4611      	mov	r1, r2
 800d1ee:	f7ff b9b3 	b.w	800c558 <_malloc_r>
 800d1f2:	b92a      	cbnz	r2, 800d200 <_realloc_r+0x24>
 800d1f4:	f7ff f944 	bl	800c480 <_free_r>
 800d1f8:	2400      	movs	r4, #0
 800d1fa:	4620      	mov	r0, r4
 800d1fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d200:	f000 f81a 	bl	800d238 <_malloc_usable_size_r>
 800d204:	4285      	cmp	r5, r0
 800d206:	4606      	mov	r6, r0
 800d208:	d802      	bhi.n	800d210 <_realloc_r+0x34>
 800d20a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d20e:	d8f4      	bhi.n	800d1fa <_realloc_r+0x1e>
 800d210:	4629      	mov	r1, r5
 800d212:	4640      	mov	r0, r8
 800d214:	f7ff f9a0 	bl	800c558 <_malloc_r>
 800d218:	4607      	mov	r7, r0
 800d21a:	2800      	cmp	r0, #0
 800d21c:	d0ec      	beq.n	800d1f8 <_realloc_r+0x1c>
 800d21e:	42b5      	cmp	r5, r6
 800d220:	462a      	mov	r2, r5
 800d222:	4621      	mov	r1, r4
 800d224:	bf28      	it	cs
 800d226:	4632      	movcs	r2, r6
 800d228:	f7ff f91b 	bl	800c462 <memcpy>
 800d22c:	4621      	mov	r1, r4
 800d22e:	4640      	mov	r0, r8
 800d230:	f7ff f926 	bl	800c480 <_free_r>
 800d234:	463c      	mov	r4, r7
 800d236:	e7e0      	b.n	800d1fa <_realloc_r+0x1e>

0800d238 <_malloc_usable_size_r>:
 800d238:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d23c:	1f18      	subs	r0, r3, #4
 800d23e:	2b00      	cmp	r3, #0
 800d240:	bfbc      	itt	lt
 800d242:	580b      	ldrlt	r3, [r1, r0]
 800d244:	18c0      	addlt	r0, r0, r3
 800d246:	4770      	bx	lr

0800d248 <_close>:
 800d248:	4b02      	ldr	r3, [pc, #8]	@ (800d254 <_close+0xc>)
 800d24a:	2258      	movs	r2, #88	@ 0x58
 800d24c:	601a      	str	r2, [r3, #0]
 800d24e:	f04f 30ff 	mov.w	r0, #4294967295
 800d252:	4770      	bx	lr
 800d254:	2000228c 	.word	0x2000228c

0800d258 <_fstat>:
 800d258:	4b02      	ldr	r3, [pc, #8]	@ (800d264 <_fstat+0xc>)
 800d25a:	2258      	movs	r2, #88	@ 0x58
 800d25c:	601a      	str	r2, [r3, #0]
 800d25e:	f04f 30ff 	mov.w	r0, #4294967295
 800d262:	4770      	bx	lr
 800d264:	2000228c 	.word	0x2000228c

0800d268 <_isatty>:
 800d268:	4b02      	ldr	r3, [pc, #8]	@ (800d274 <_isatty+0xc>)
 800d26a:	2258      	movs	r2, #88	@ 0x58
 800d26c:	601a      	str	r2, [r3, #0]
 800d26e:	2000      	movs	r0, #0
 800d270:	4770      	bx	lr
 800d272:	bf00      	nop
 800d274:	2000228c 	.word	0x2000228c

0800d278 <_lseek>:
 800d278:	4b02      	ldr	r3, [pc, #8]	@ (800d284 <_lseek+0xc>)
 800d27a:	2258      	movs	r2, #88	@ 0x58
 800d27c:	601a      	str	r2, [r3, #0]
 800d27e:	f04f 30ff 	mov.w	r0, #4294967295
 800d282:	4770      	bx	lr
 800d284:	2000228c 	.word	0x2000228c

0800d288 <_read>:
 800d288:	4b02      	ldr	r3, [pc, #8]	@ (800d294 <_read+0xc>)
 800d28a:	2258      	movs	r2, #88	@ 0x58
 800d28c:	601a      	str	r2, [r3, #0]
 800d28e:	f04f 30ff 	mov.w	r0, #4294967295
 800d292:	4770      	bx	lr
 800d294:	2000228c 	.word	0x2000228c

0800d298 <_sbrk>:
 800d298:	4a04      	ldr	r2, [pc, #16]	@ (800d2ac <_sbrk+0x14>)
 800d29a:	6811      	ldr	r1, [r2, #0]
 800d29c:	4603      	mov	r3, r0
 800d29e:	b909      	cbnz	r1, 800d2a4 <_sbrk+0xc>
 800d2a0:	4903      	ldr	r1, [pc, #12]	@ (800d2b0 <_sbrk+0x18>)
 800d2a2:	6011      	str	r1, [r2, #0]
 800d2a4:	6810      	ldr	r0, [r2, #0]
 800d2a6:	4403      	add	r3, r0
 800d2a8:	6013      	str	r3, [r2, #0]
 800d2aa:	4770      	bx	lr
 800d2ac:	2000229c 	.word	0x2000229c
 800d2b0:	200022a0 	.word	0x200022a0

0800d2b4 <_init>:
 800d2b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2b6:	bf00      	nop
 800d2b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d2ba:	bc08      	pop	{r3}
 800d2bc:	469e      	mov	lr, r3
 800d2be:	4770      	bx	lr

0800d2c0 <_fini>:
 800d2c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2c2:	bf00      	nop
 800d2c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d2c6:	bc08      	pop	{r3}
 800d2c8:	469e      	mov	lr, r3
 800d2ca:	4770      	bx	lr
