
Alchemiac-fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f618  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001638  0800f758  0800f758  00010758  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08010d90  08010d90  00011d90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08010d98  08010d98  00011d98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08010d9c  08010d9c  00011d9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000080  20000008  08010da0  00012008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 0000001d  20000088  08010e20  00012088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  200000a8  08010e3d  000120a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002304  200000bc  08010e4e  000120bc  2**2
                  ALLOC
 10 ._user_heap_stack 00001400  200023c0  08010e4e  000123c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00012d8b  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  00013000  2**2
                  ALLOC
 13 MB_MEM1       000001bb  20030028  20030028  00013000  2**2
                  ALLOC
 14 .MB_MEM2      00000ba7  200301e4  08010e4e  000121e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 15 .debug_info   00037a78  00000000  00000000  00012dbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 000071df  00000000  00000000  0004a833  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00003348  00000000  00000000  00051a18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 000027b3  00000000  00000000  00054d60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002f348  00000000  00000000  00057513  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0003c6a3  00000000  00000000  0008685b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0010922f  00000000  00000000  000c2efe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  001cc12d  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000e45c  00000000  00000000  001cc170  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 0000005a  00000000  00000000  001da5cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200000bc 	.word	0x200000bc
 800015c:	00000000 	.word	0x00000000
 8000160:	0800f740 	.word	0x0800f740

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200000c0 	.word	0x200000c0
 800017c:	0800f740 	.word	0x0800f740

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_dmul>:
 8000230:	b570      	push	{r4, r5, r6, lr}
 8000232:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000236:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800023a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800023e:	bf1d      	ittte	ne
 8000240:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000244:	ea94 0f0c 	teqne	r4, ip
 8000248:	ea95 0f0c 	teqne	r5, ip
 800024c:	f000 f8de 	bleq	800040c <__aeabi_dmul+0x1dc>
 8000250:	442c      	add	r4, r5
 8000252:	ea81 0603 	eor.w	r6, r1, r3
 8000256:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800025a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800025e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000262:	bf18      	it	ne
 8000264:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000268:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800026c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000270:	d038      	beq.n	80002e4 <__aeabi_dmul+0xb4>
 8000272:	fba0 ce02 	umull	ip, lr, r0, r2
 8000276:	f04f 0500 	mov.w	r5, #0
 800027a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800027e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000282:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000286:	f04f 0600 	mov.w	r6, #0
 800028a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800028e:	f09c 0f00 	teq	ip, #0
 8000292:	bf18      	it	ne
 8000294:	f04e 0e01 	orrne.w	lr, lr, #1
 8000298:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800029c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80002a0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80002a4:	d204      	bcs.n	80002b0 <__aeabi_dmul+0x80>
 80002a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002aa:	416d      	adcs	r5, r5
 80002ac:	eb46 0606 	adc.w	r6, r6, r6
 80002b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002c4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80002c8:	bf88      	it	hi
 80002ca:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80002ce:	d81e      	bhi.n	800030e <__aeabi_dmul+0xde>
 80002d0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80002d4:	bf08      	it	eq
 80002d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002da:	f150 0000 	adcs.w	r0, r0, #0
 80002de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002e2:	bd70      	pop	{r4, r5, r6, pc}
 80002e4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80002e8:	ea46 0101 	orr.w	r1, r6, r1
 80002ec:	ea40 0002 	orr.w	r0, r0, r2
 80002f0:	ea81 0103 	eor.w	r1, r1, r3
 80002f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002f8:	bfc2      	ittt	gt
 80002fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000302:	bd70      	popgt	{r4, r5, r6, pc}
 8000304:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000308:	f04f 0e00 	mov.w	lr, #0
 800030c:	3c01      	subs	r4, #1
 800030e:	f300 80ab 	bgt.w	8000468 <__aeabi_dmul+0x238>
 8000312:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000316:	bfde      	ittt	le
 8000318:	2000      	movle	r0, #0
 800031a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800031e:	bd70      	pople	{r4, r5, r6, pc}
 8000320:	f1c4 0400 	rsb	r4, r4, #0
 8000324:	3c20      	subs	r4, #32
 8000326:	da35      	bge.n	8000394 <__aeabi_dmul+0x164>
 8000328:	340c      	adds	r4, #12
 800032a:	dc1b      	bgt.n	8000364 <__aeabi_dmul+0x134>
 800032c:	f104 0414 	add.w	r4, r4, #20
 8000330:	f1c4 0520 	rsb	r5, r4, #32
 8000334:	fa00 f305 	lsl.w	r3, r0, r5
 8000338:	fa20 f004 	lsr.w	r0, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea40 0002 	orr.w	r0, r0, r2
 8000344:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000348:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800034c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000350:	fa21 f604 	lsr.w	r6, r1, r4
 8000354:	eb42 0106 	adc.w	r1, r2, r6
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f1c4 040c 	rsb	r4, r4, #12
 8000368:	f1c4 0520 	rsb	r5, r4, #32
 800036c:	fa00 f304 	lsl.w	r3, r0, r4
 8000370:	fa20 f005 	lsr.w	r0, r0, r5
 8000374:	fa01 f204 	lsl.w	r2, r1, r4
 8000378:	ea40 0002 	orr.w	r0, r0, r2
 800037c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000380:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000384:	f141 0100 	adc.w	r1, r1, #0
 8000388:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800038c:	bf08      	it	eq
 800038e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000392:	bd70      	pop	{r4, r5, r6, pc}
 8000394:	f1c4 0520 	rsb	r5, r4, #32
 8000398:	fa00 f205 	lsl.w	r2, r0, r5
 800039c:	ea4e 0e02 	orr.w	lr, lr, r2
 80003a0:	fa20 f304 	lsr.w	r3, r0, r4
 80003a4:	fa01 f205 	lsl.w	r2, r1, r5
 80003a8:	ea43 0302 	orr.w	r3, r3, r2
 80003ac:	fa21 f004 	lsr.w	r0, r1, r4
 80003b0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003b4:	fa21 f204 	lsr.w	r2, r1, r4
 80003b8:	ea20 0002 	bic.w	r0, r0, r2
 80003bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003c4:	bf08      	it	eq
 80003c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003ca:	bd70      	pop	{r4, r5, r6, pc}
 80003cc:	f094 0f00 	teq	r4, #0
 80003d0:	d10f      	bne.n	80003f2 <__aeabi_dmul+0x1c2>
 80003d2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80003d6:	0040      	lsls	r0, r0, #1
 80003d8:	eb41 0101 	adc.w	r1, r1, r1
 80003dc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80003e0:	bf08      	it	eq
 80003e2:	3c01      	subeq	r4, #1
 80003e4:	d0f7      	beq.n	80003d6 <__aeabi_dmul+0x1a6>
 80003e6:	ea41 0106 	orr.w	r1, r1, r6
 80003ea:	f095 0f00 	teq	r5, #0
 80003ee:	bf18      	it	ne
 80003f0:	4770      	bxne	lr
 80003f2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80003f6:	0052      	lsls	r2, r2, #1
 80003f8:	eb43 0303 	adc.w	r3, r3, r3
 80003fc:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000400:	bf08      	it	eq
 8000402:	3d01      	subeq	r5, #1
 8000404:	d0f7      	beq.n	80003f6 <__aeabi_dmul+0x1c6>
 8000406:	ea43 0306 	orr.w	r3, r3, r6
 800040a:	4770      	bx	lr
 800040c:	ea94 0f0c 	teq	r4, ip
 8000410:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000414:	bf18      	it	ne
 8000416:	ea95 0f0c 	teqne	r5, ip
 800041a:	d00c      	beq.n	8000436 <__aeabi_dmul+0x206>
 800041c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000420:	bf18      	it	ne
 8000422:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000426:	d1d1      	bne.n	80003cc <__aeabi_dmul+0x19c>
 8000428:	ea81 0103 	eor.w	r1, r1, r3
 800042c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000430:	f04f 0000 	mov.w	r0, #0
 8000434:	bd70      	pop	{r4, r5, r6, pc}
 8000436:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800043a:	bf06      	itte	eq
 800043c:	4610      	moveq	r0, r2
 800043e:	4619      	moveq	r1, r3
 8000440:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000444:	d019      	beq.n	800047a <__aeabi_dmul+0x24a>
 8000446:	ea94 0f0c 	teq	r4, ip
 800044a:	d102      	bne.n	8000452 <__aeabi_dmul+0x222>
 800044c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000450:	d113      	bne.n	800047a <__aeabi_dmul+0x24a>
 8000452:	ea95 0f0c 	teq	r5, ip
 8000456:	d105      	bne.n	8000464 <__aeabi_dmul+0x234>
 8000458:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800045c:	bf1c      	itt	ne
 800045e:	4610      	movne	r0, r2
 8000460:	4619      	movne	r1, r3
 8000462:	d10a      	bne.n	800047a <__aeabi_dmul+0x24a>
 8000464:	ea81 0103 	eor.w	r1, r1, r3
 8000468:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800046c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000470:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000474:	f04f 0000 	mov.w	r0, #0
 8000478:	bd70      	pop	{r4, r5, r6, pc}
 800047a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800047e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000482:	bd70      	pop	{r4, r5, r6, pc}

08000484 <__aeabi_drsub>:
 8000484:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000488:	e002      	b.n	8000490 <__adddf3>
 800048a:	bf00      	nop

0800048c <__aeabi_dsub>:
 800048c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000490 <__adddf3>:
 8000490:	b530      	push	{r4, r5, lr}
 8000492:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000496:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800049a:	ea94 0f05 	teq	r4, r5
 800049e:	bf08      	it	eq
 80004a0:	ea90 0f02 	teqeq	r0, r2
 80004a4:	bf1f      	itttt	ne
 80004a6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004aa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004ae:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004b2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b6:	f000 80e2 	beq.w	800067e <__adddf3+0x1ee>
 80004ba:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004be:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004c2:	bfb8      	it	lt
 80004c4:	426d      	neglt	r5, r5
 80004c6:	dd0c      	ble.n	80004e2 <__adddf3+0x52>
 80004c8:	442c      	add	r4, r5
 80004ca:	ea80 0202 	eor.w	r2, r0, r2
 80004ce:	ea81 0303 	eor.w	r3, r1, r3
 80004d2:	ea82 0000 	eor.w	r0, r2, r0
 80004d6:	ea83 0101 	eor.w	r1, r3, r1
 80004da:	ea80 0202 	eor.w	r2, r0, r2
 80004de:	ea81 0303 	eor.w	r3, r1, r3
 80004e2:	2d36      	cmp	r5, #54	@ 0x36
 80004e4:	bf88      	it	hi
 80004e6:	bd30      	pophi	{r4, r5, pc}
 80004e8:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80004ec:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004f0:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80004f4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004f8:	d002      	beq.n	8000500 <__adddf3+0x70>
 80004fa:	4240      	negs	r0, r0
 80004fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000500:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000504:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000508:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800050c:	d002      	beq.n	8000514 <__adddf3+0x84>
 800050e:	4252      	negs	r2, r2
 8000510:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000514:	ea94 0f05 	teq	r4, r5
 8000518:	f000 80a7 	beq.w	800066a <__adddf3+0x1da>
 800051c:	f1a4 0401 	sub.w	r4, r4, #1
 8000520:	f1d5 0e20 	rsbs	lr, r5, #32
 8000524:	db0d      	blt.n	8000542 <__adddf3+0xb2>
 8000526:	fa02 fc0e 	lsl.w	ip, r2, lr
 800052a:	fa22 f205 	lsr.w	r2, r2, r5
 800052e:	1880      	adds	r0, r0, r2
 8000530:	f141 0100 	adc.w	r1, r1, #0
 8000534:	fa03 f20e 	lsl.w	r2, r3, lr
 8000538:	1880      	adds	r0, r0, r2
 800053a:	fa43 f305 	asr.w	r3, r3, r5
 800053e:	4159      	adcs	r1, r3
 8000540:	e00e      	b.n	8000560 <__adddf3+0xd0>
 8000542:	f1a5 0520 	sub.w	r5, r5, #32
 8000546:	f10e 0e20 	add.w	lr, lr, #32
 800054a:	2a01      	cmp	r2, #1
 800054c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000550:	bf28      	it	cs
 8000552:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000556:	fa43 f305 	asr.w	r3, r3, r5
 800055a:	18c0      	adds	r0, r0, r3
 800055c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000560:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000564:	d507      	bpl.n	8000576 <__adddf3+0xe6>
 8000566:	f04f 0e00 	mov.w	lr, #0
 800056a:	f1dc 0c00 	rsbs	ip, ip, #0
 800056e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000572:	eb6e 0101 	sbc.w	r1, lr, r1
 8000576:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800057a:	d31b      	bcc.n	80005b4 <__adddf3+0x124>
 800057c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000580:	d30c      	bcc.n	800059c <__adddf3+0x10c>
 8000582:	0849      	lsrs	r1, r1, #1
 8000584:	ea5f 0030 	movs.w	r0, r0, rrx
 8000588:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800058c:	f104 0401 	add.w	r4, r4, #1
 8000590:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000594:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000598:	f080 809a 	bcs.w	80006d0 <__adddf3+0x240>
 800059c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80005a0:	bf08      	it	eq
 80005a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005a6:	f150 0000 	adcs.w	r0, r0, #0
 80005aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ae:	ea41 0105 	orr.w	r1, r1, r5
 80005b2:	bd30      	pop	{r4, r5, pc}
 80005b4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005b8:	4140      	adcs	r0, r0
 80005ba:	eb41 0101 	adc.w	r1, r1, r1
 80005be:	3c01      	subs	r4, #1
 80005c0:	bf28      	it	cs
 80005c2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80005c6:	d2e9      	bcs.n	800059c <__adddf3+0x10c>
 80005c8:	f091 0f00 	teq	r1, #0
 80005cc:	bf04      	itt	eq
 80005ce:	4601      	moveq	r1, r0
 80005d0:	2000      	moveq	r0, #0
 80005d2:	fab1 f381 	clz	r3, r1
 80005d6:	bf08      	it	eq
 80005d8:	3320      	addeq	r3, #32
 80005da:	f1a3 030b 	sub.w	r3, r3, #11
 80005de:	f1b3 0220 	subs.w	r2, r3, #32
 80005e2:	da0c      	bge.n	80005fe <__adddf3+0x16e>
 80005e4:	320c      	adds	r2, #12
 80005e6:	dd08      	ble.n	80005fa <__adddf3+0x16a>
 80005e8:	f102 0c14 	add.w	ip, r2, #20
 80005ec:	f1c2 020c 	rsb	r2, r2, #12
 80005f0:	fa01 f00c 	lsl.w	r0, r1, ip
 80005f4:	fa21 f102 	lsr.w	r1, r1, r2
 80005f8:	e00c      	b.n	8000614 <__adddf3+0x184>
 80005fa:	f102 0214 	add.w	r2, r2, #20
 80005fe:	bfd8      	it	le
 8000600:	f1c2 0c20 	rsble	ip, r2, #32
 8000604:	fa01 f102 	lsl.w	r1, r1, r2
 8000608:	fa20 fc0c 	lsr.w	ip, r0, ip
 800060c:	bfdc      	itt	le
 800060e:	ea41 010c 	orrle.w	r1, r1, ip
 8000612:	4090      	lslle	r0, r2
 8000614:	1ae4      	subs	r4, r4, r3
 8000616:	bfa2      	ittt	ge
 8000618:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800061c:	4329      	orrge	r1, r5
 800061e:	bd30      	popge	{r4, r5, pc}
 8000620:	ea6f 0404 	mvn.w	r4, r4
 8000624:	3c1f      	subs	r4, #31
 8000626:	da1c      	bge.n	8000662 <__adddf3+0x1d2>
 8000628:	340c      	adds	r4, #12
 800062a:	dc0e      	bgt.n	800064a <__adddf3+0x1ba>
 800062c:	f104 0414 	add.w	r4, r4, #20
 8000630:	f1c4 0220 	rsb	r2, r4, #32
 8000634:	fa20 f004 	lsr.w	r0, r0, r4
 8000638:	fa01 f302 	lsl.w	r3, r1, r2
 800063c:	ea40 0003 	orr.w	r0, r0, r3
 8000640:	fa21 f304 	lsr.w	r3, r1, r4
 8000644:	ea45 0103 	orr.w	r1, r5, r3
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	f1c4 040c 	rsb	r4, r4, #12
 800064e:	f1c4 0220 	rsb	r2, r4, #32
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 f304 	lsl.w	r3, r1, r4
 800065a:	ea40 0003 	orr.w	r0, r0, r3
 800065e:	4629      	mov	r1, r5
 8000660:	bd30      	pop	{r4, r5, pc}
 8000662:	fa21 f004 	lsr.w	r0, r1, r4
 8000666:	4629      	mov	r1, r5
 8000668:	bd30      	pop	{r4, r5, pc}
 800066a:	f094 0f00 	teq	r4, #0
 800066e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000672:	bf06      	itte	eq
 8000674:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000678:	3401      	addeq	r4, #1
 800067a:	3d01      	subne	r5, #1
 800067c:	e74e      	b.n	800051c <__adddf3+0x8c>
 800067e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000682:	bf18      	it	ne
 8000684:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000688:	d029      	beq.n	80006de <__adddf3+0x24e>
 800068a:	ea94 0f05 	teq	r4, r5
 800068e:	bf08      	it	eq
 8000690:	ea90 0f02 	teqeq	r0, r2
 8000694:	d005      	beq.n	80006a2 <__adddf3+0x212>
 8000696:	ea54 0c00 	orrs.w	ip, r4, r0
 800069a:	bf04      	itt	eq
 800069c:	4619      	moveq	r1, r3
 800069e:	4610      	moveq	r0, r2
 80006a0:	bd30      	pop	{r4, r5, pc}
 80006a2:	ea91 0f03 	teq	r1, r3
 80006a6:	bf1e      	ittt	ne
 80006a8:	2100      	movne	r1, #0
 80006aa:	2000      	movne	r0, #0
 80006ac:	bd30      	popne	{r4, r5, pc}
 80006ae:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006b2:	d105      	bne.n	80006c0 <__adddf3+0x230>
 80006b4:	0040      	lsls	r0, r0, #1
 80006b6:	4149      	adcs	r1, r1
 80006b8:	bf28      	it	cs
 80006ba:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80006be:	bd30      	pop	{r4, r5, pc}
 80006c0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80006c4:	bf3c      	itt	cc
 80006c6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80006ca:	bd30      	popcc	{r4, r5, pc}
 80006cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006d0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80006d4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd30      	pop	{r4, r5, pc}
 80006de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006e2:	bf1a      	itte	ne
 80006e4:	4619      	movne	r1, r3
 80006e6:	4610      	movne	r0, r2
 80006e8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006ec:	bf1c      	itt	ne
 80006ee:	460b      	movne	r3, r1
 80006f0:	4602      	movne	r2, r0
 80006f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006f6:	bf06      	itte	eq
 80006f8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006fc:	ea91 0f03 	teqeq	r1, r3
 8000700:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000704:	bd30      	pop	{r4, r5, pc}
 8000706:	bf00      	nop

08000708 <__aeabi_ui2d>:
 8000708:	f090 0f00 	teq	r0, #0
 800070c:	bf04      	itt	eq
 800070e:	2100      	moveq	r1, #0
 8000710:	4770      	bxeq	lr
 8000712:	b530      	push	{r4, r5, lr}
 8000714:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000718:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800071c:	f04f 0500 	mov.w	r5, #0
 8000720:	f04f 0100 	mov.w	r1, #0
 8000724:	e750      	b.n	80005c8 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_i2d>:
 8000728:	f090 0f00 	teq	r0, #0
 800072c:	bf04      	itt	eq
 800072e:	2100      	moveq	r1, #0
 8000730:	4770      	bxeq	lr
 8000732:	b530      	push	{r4, r5, lr}
 8000734:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000738:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800073c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000740:	bf48      	it	mi
 8000742:	4240      	negmi	r0, r0
 8000744:	f04f 0100 	mov.w	r1, #0
 8000748:	e73e      	b.n	80005c8 <__adddf3+0x138>
 800074a:	bf00      	nop

0800074c <__aeabi_f2d>:
 800074c:	0042      	lsls	r2, r0, #1
 800074e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000752:	ea4f 0131 	mov.w	r1, r1, rrx
 8000756:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800075a:	bf1f      	itttt	ne
 800075c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000760:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000764:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000768:	4770      	bxne	lr
 800076a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800076e:	bf08      	it	eq
 8000770:	4770      	bxeq	lr
 8000772:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000776:	bf04      	itt	eq
 8000778:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800077c:	4770      	bxeq	lr
 800077e:	b530      	push	{r4, r5, lr}
 8000780:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000784:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000788:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	e71c      	b.n	80005c8 <__adddf3+0x138>
 800078e:	bf00      	nop

08000790 <__aeabi_ul2d>:
 8000790:	ea50 0201 	orrs.w	r2, r0, r1
 8000794:	bf08      	it	eq
 8000796:	4770      	bxeq	lr
 8000798:	b530      	push	{r4, r5, lr}
 800079a:	f04f 0500 	mov.w	r5, #0
 800079e:	e00a      	b.n	80007b6 <__aeabi_l2d+0x16>

080007a0 <__aeabi_l2d>:
 80007a0:	ea50 0201 	orrs.w	r2, r0, r1
 80007a4:	bf08      	it	eq
 80007a6:	4770      	bxeq	lr
 80007a8:	b530      	push	{r4, r5, lr}
 80007aa:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80007ae:	d502      	bpl.n	80007b6 <__aeabi_l2d+0x16>
 80007b0:	4240      	negs	r0, r0
 80007b2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007b6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007ba:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007be:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007c2:	f43f aed8 	beq.w	8000576 <__adddf3+0xe6>
 80007c6:	f04f 0203 	mov.w	r2, #3
 80007ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007ce:	bf18      	it	ne
 80007d0:	3203      	addne	r2, #3
 80007d2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007d6:	bf18      	it	ne
 80007d8:	3203      	addne	r2, #3
 80007da:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007de:	f1c2 0320 	rsb	r3, r2, #32
 80007e2:	fa00 fc03 	lsl.w	ip, r0, r3
 80007e6:	fa20 f002 	lsr.w	r0, r0, r2
 80007ea:	fa01 fe03 	lsl.w	lr, r1, r3
 80007ee:	ea40 000e 	orr.w	r0, r0, lr
 80007f2:	fa21 f102 	lsr.w	r1, r1, r2
 80007f6:	4414      	add	r4, r2
 80007f8:	e6bd      	b.n	8000576 <__adddf3+0xe6>
 80007fa:	bf00      	nop

080007fc <__aeabi_uldivmod>:
 80007fc:	b953      	cbnz	r3, 8000814 <__aeabi_uldivmod+0x18>
 80007fe:	b94a      	cbnz	r2, 8000814 <__aeabi_uldivmod+0x18>
 8000800:	2900      	cmp	r1, #0
 8000802:	bf08      	it	eq
 8000804:	2800      	cmpeq	r0, #0
 8000806:	bf1c      	itt	ne
 8000808:	f04f 31ff 	movne.w	r1, #4294967295
 800080c:	f04f 30ff 	movne.w	r0, #4294967295
 8000810:	f000 b96a 	b.w	8000ae8 <__aeabi_idiv0>
 8000814:	f1ad 0c08 	sub.w	ip, sp, #8
 8000818:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800081c:	f000 f806 	bl	800082c <__udivmoddi4>
 8000820:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000824:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000828:	b004      	add	sp, #16
 800082a:	4770      	bx	lr

0800082c <__udivmoddi4>:
 800082c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000830:	9d08      	ldr	r5, [sp, #32]
 8000832:	460c      	mov	r4, r1
 8000834:	2b00      	cmp	r3, #0
 8000836:	d14e      	bne.n	80008d6 <__udivmoddi4+0xaa>
 8000838:	4694      	mov	ip, r2
 800083a:	458c      	cmp	ip, r1
 800083c:	4686      	mov	lr, r0
 800083e:	fab2 f282 	clz	r2, r2
 8000842:	d962      	bls.n	800090a <__udivmoddi4+0xde>
 8000844:	b14a      	cbz	r2, 800085a <__udivmoddi4+0x2e>
 8000846:	f1c2 0320 	rsb	r3, r2, #32
 800084a:	4091      	lsls	r1, r2
 800084c:	fa20 f303 	lsr.w	r3, r0, r3
 8000850:	fa0c fc02 	lsl.w	ip, ip, r2
 8000854:	4319      	orrs	r1, r3
 8000856:	fa00 fe02 	lsl.w	lr, r0, r2
 800085a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800085e:	fa1f f68c 	uxth.w	r6, ip
 8000862:	fbb1 f4f7 	udiv	r4, r1, r7
 8000866:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800086a:	fb07 1114 	mls	r1, r7, r4, r1
 800086e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000872:	fb04 f106 	mul.w	r1, r4, r6
 8000876:	4299      	cmp	r1, r3
 8000878:	d90a      	bls.n	8000890 <__udivmoddi4+0x64>
 800087a:	eb1c 0303 	adds.w	r3, ip, r3
 800087e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000882:	f080 8112 	bcs.w	8000aaa <__udivmoddi4+0x27e>
 8000886:	4299      	cmp	r1, r3
 8000888:	f240 810f 	bls.w	8000aaa <__udivmoddi4+0x27e>
 800088c:	3c02      	subs	r4, #2
 800088e:	4463      	add	r3, ip
 8000890:	1a59      	subs	r1, r3, r1
 8000892:	fa1f f38e 	uxth.w	r3, lr
 8000896:	fbb1 f0f7 	udiv	r0, r1, r7
 800089a:	fb07 1110 	mls	r1, r7, r0, r1
 800089e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008a2:	fb00 f606 	mul.w	r6, r0, r6
 80008a6:	429e      	cmp	r6, r3
 80008a8:	d90a      	bls.n	80008c0 <__udivmoddi4+0x94>
 80008aa:	eb1c 0303 	adds.w	r3, ip, r3
 80008ae:	f100 31ff 	add.w	r1, r0, #4294967295
 80008b2:	f080 80fc 	bcs.w	8000aae <__udivmoddi4+0x282>
 80008b6:	429e      	cmp	r6, r3
 80008b8:	f240 80f9 	bls.w	8000aae <__udivmoddi4+0x282>
 80008bc:	4463      	add	r3, ip
 80008be:	3802      	subs	r0, #2
 80008c0:	1b9b      	subs	r3, r3, r6
 80008c2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80008c6:	2100      	movs	r1, #0
 80008c8:	b11d      	cbz	r5, 80008d2 <__udivmoddi4+0xa6>
 80008ca:	40d3      	lsrs	r3, r2
 80008cc:	2200      	movs	r2, #0
 80008ce:	e9c5 3200 	strd	r3, r2, [r5]
 80008d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008d6:	428b      	cmp	r3, r1
 80008d8:	d905      	bls.n	80008e6 <__udivmoddi4+0xba>
 80008da:	b10d      	cbz	r5, 80008e0 <__udivmoddi4+0xb4>
 80008dc:	e9c5 0100 	strd	r0, r1, [r5]
 80008e0:	2100      	movs	r1, #0
 80008e2:	4608      	mov	r0, r1
 80008e4:	e7f5      	b.n	80008d2 <__udivmoddi4+0xa6>
 80008e6:	fab3 f183 	clz	r1, r3
 80008ea:	2900      	cmp	r1, #0
 80008ec:	d146      	bne.n	800097c <__udivmoddi4+0x150>
 80008ee:	42a3      	cmp	r3, r4
 80008f0:	d302      	bcc.n	80008f8 <__udivmoddi4+0xcc>
 80008f2:	4290      	cmp	r0, r2
 80008f4:	f0c0 80f0 	bcc.w	8000ad8 <__udivmoddi4+0x2ac>
 80008f8:	1a86      	subs	r6, r0, r2
 80008fa:	eb64 0303 	sbc.w	r3, r4, r3
 80008fe:	2001      	movs	r0, #1
 8000900:	2d00      	cmp	r5, #0
 8000902:	d0e6      	beq.n	80008d2 <__udivmoddi4+0xa6>
 8000904:	e9c5 6300 	strd	r6, r3, [r5]
 8000908:	e7e3      	b.n	80008d2 <__udivmoddi4+0xa6>
 800090a:	2a00      	cmp	r2, #0
 800090c:	f040 8090 	bne.w	8000a30 <__udivmoddi4+0x204>
 8000910:	eba1 040c 	sub.w	r4, r1, ip
 8000914:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000918:	fa1f f78c 	uxth.w	r7, ip
 800091c:	2101      	movs	r1, #1
 800091e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000922:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000926:	fb08 4416 	mls	r4, r8, r6, r4
 800092a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800092e:	fb07 f006 	mul.w	r0, r7, r6
 8000932:	4298      	cmp	r0, r3
 8000934:	d908      	bls.n	8000948 <__udivmoddi4+0x11c>
 8000936:	eb1c 0303 	adds.w	r3, ip, r3
 800093a:	f106 34ff 	add.w	r4, r6, #4294967295
 800093e:	d202      	bcs.n	8000946 <__udivmoddi4+0x11a>
 8000940:	4298      	cmp	r0, r3
 8000942:	f200 80cd 	bhi.w	8000ae0 <__udivmoddi4+0x2b4>
 8000946:	4626      	mov	r6, r4
 8000948:	1a1c      	subs	r4, r3, r0
 800094a:	fa1f f38e 	uxth.w	r3, lr
 800094e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000952:	fb08 4410 	mls	r4, r8, r0, r4
 8000956:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800095a:	fb00 f707 	mul.w	r7, r0, r7
 800095e:	429f      	cmp	r7, r3
 8000960:	d908      	bls.n	8000974 <__udivmoddi4+0x148>
 8000962:	eb1c 0303 	adds.w	r3, ip, r3
 8000966:	f100 34ff 	add.w	r4, r0, #4294967295
 800096a:	d202      	bcs.n	8000972 <__udivmoddi4+0x146>
 800096c:	429f      	cmp	r7, r3
 800096e:	f200 80b0 	bhi.w	8000ad2 <__udivmoddi4+0x2a6>
 8000972:	4620      	mov	r0, r4
 8000974:	1bdb      	subs	r3, r3, r7
 8000976:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800097a:	e7a5      	b.n	80008c8 <__udivmoddi4+0x9c>
 800097c:	f1c1 0620 	rsb	r6, r1, #32
 8000980:	408b      	lsls	r3, r1
 8000982:	fa22 f706 	lsr.w	r7, r2, r6
 8000986:	431f      	orrs	r7, r3
 8000988:	fa20 fc06 	lsr.w	ip, r0, r6
 800098c:	fa04 f301 	lsl.w	r3, r4, r1
 8000990:	ea43 030c 	orr.w	r3, r3, ip
 8000994:	40f4      	lsrs	r4, r6
 8000996:	fa00 f801 	lsl.w	r8, r0, r1
 800099a:	0c38      	lsrs	r0, r7, #16
 800099c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80009a0:	fbb4 fef0 	udiv	lr, r4, r0
 80009a4:	fa1f fc87 	uxth.w	ip, r7
 80009a8:	fb00 441e 	mls	r4, r0, lr, r4
 80009ac:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80009b0:	fb0e f90c 	mul.w	r9, lr, ip
 80009b4:	45a1      	cmp	r9, r4
 80009b6:	fa02 f201 	lsl.w	r2, r2, r1
 80009ba:	d90a      	bls.n	80009d2 <__udivmoddi4+0x1a6>
 80009bc:	193c      	adds	r4, r7, r4
 80009be:	f10e 3aff 	add.w	sl, lr, #4294967295
 80009c2:	f080 8084 	bcs.w	8000ace <__udivmoddi4+0x2a2>
 80009c6:	45a1      	cmp	r9, r4
 80009c8:	f240 8081 	bls.w	8000ace <__udivmoddi4+0x2a2>
 80009cc:	f1ae 0e02 	sub.w	lr, lr, #2
 80009d0:	443c      	add	r4, r7
 80009d2:	eba4 0409 	sub.w	r4, r4, r9
 80009d6:	fa1f f983 	uxth.w	r9, r3
 80009da:	fbb4 f3f0 	udiv	r3, r4, r0
 80009de:	fb00 4413 	mls	r4, r0, r3, r4
 80009e2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80009e6:	fb03 fc0c 	mul.w	ip, r3, ip
 80009ea:	45a4      	cmp	ip, r4
 80009ec:	d907      	bls.n	80009fe <__udivmoddi4+0x1d2>
 80009ee:	193c      	adds	r4, r7, r4
 80009f0:	f103 30ff 	add.w	r0, r3, #4294967295
 80009f4:	d267      	bcs.n	8000ac6 <__udivmoddi4+0x29a>
 80009f6:	45a4      	cmp	ip, r4
 80009f8:	d965      	bls.n	8000ac6 <__udivmoddi4+0x29a>
 80009fa:	3b02      	subs	r3, #2
 80009fc:	443c      	add	r4, r7
 80009fe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000a02:	fba0 9302 	umull	r9, r3, r0, r2
 8000a06:	eba4 040c 	sub.w	r4, r4, ip
 8000a0a:	429c      	cmp	r4, r3
 8000a0c:	46ce      	mov	lr, r9
 8000a0e:	469c      	mov	ip, r3
 8000a10:	d351      	bcc.n	8000ab6 <__udivmoddi4+0x28a>
 8000a12:	d04e      	beq.n	8000ab2 <__udivmoddi4+0x286>
 8000a14:	b155      	cbz	r5, 8000a2c <__udivmoddi4+0x200>
 8000a16:	ebb8 030e 	subs.w	r3, r8, lr
 8000a1a:	eb64 040c 	sbc.w	r4, r4, ip
 8000a1e:	fa04 f606 	lsl.w	r6, r4, r6
 8000a22:	40cb      	lsrs	r3, r1
 8000a24:	431e      	orrs	r6, r3
 8000a26:	40cc      	lsrs	r4, r1
 8000a28:	e9c5 6400 	strd	r6, r4, [r5]
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	e750      	b.n	80008d2 <__udivmoddi4+0xa6>
 8000a30:	f1c2 0320 	rsb	r3, r2, #32
 8000a34:	fa20 f103 	lsr.w	r1, r0, r3
 8000a38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a3c:	fa24 f303 	lsr.w	r3, r4, r3
 8000a40:	4094      	lsls	r4, r2
 8000a42:	430c      	orrs	r4, r1
 8000a44:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a48:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a4c:	fa1f f78c 	uxth.w	r7, ip
 8000a50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a54:	fb08 3110 	mls	r1, r8, r0, r3
 8000a58:	0c23      	lsrs	r3, r4, #16
 8000a5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a5e:	fb00 f107 	mul.w	r1, r0, r7
 8000a62:	4299      	cmp	r1, r3
 8000a64:	d908      	bls.n	8000a78 <__udivmoddi4+0x24c>
 8000a66:	eb1c 0303 	adds.w	r3, ip, r3
 8000a6a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000a6e:	d22c      	bcs.n	8000aca <__udivmoddi4+0x29e>
 8000a70:	4299      	cmp	r1, r3
 8000a72:	d92a      	bls.n	8000aca <__udivmoddi4+0x29e>
 8000a74:	3802      	subs	r0, #2
 8000a76:	4463      	add	r3, ip
 8000a78:	1a5b      	subs	r3, r3, r1
 8000a7a:	b2a4      	uxth	r4, r4
 8000a7c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000a80:	fb08 3311 	mls	r3, r8, r1, r3
 8000a84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a88:	fb01 f307 	mul.w	r3, r1, r7
 8000a8c:	42a3      	cmp	r3, r4
 8000a8e:	d908      	bls.n	8000aa2 <__udivmoddi4+0x276>
 8000a90:	eb1c 0404 	adds.w	r4, ip, r4
 8000a94:	f101 36ff 	add.w	r6, r1, #4294967295
 8000a98:	d213      	bcs.n	8000ac2 <__udivmoddi4+0x296>
 8000a9a:	42a3      	cmp	r3, r4
 8000a9c:	d911      	bls.n	8000ac2 <__udivmoddi4+0x296>
 8000a9e:	3902      	subs	r1, #2
 8000aa0:	4464      	add	r4, ip
 8000aa2:	1ae4      	subs	r4, r4, r3
 8000aa4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000aa8:	e739      	b.n	800091e <__udivmoddi4+0xf2>
 8000aaa:	4604      	mov	r4, r0
 8000aac:	e6f0      	b.n	8000890 <__udivmoddi4+0x64>
 8000aae:	4608      	mov	r0, r1
 8000ab0:	e706      	b.n	80008c0 <__udivmoddi4+0x94>
 8000ab2:	45c8      	cmp	r8, r9
 8000ab4:	d2ae      	bcs.n	8000a14 <__udivmoddi4+0x1e8>
 8000ab6:	ebb9 0e02 	subs.w	lr, r9, r2
 8000aba:	eb63 0c07 	sbc.w	ip, r3, r7
 8000abe:	3801      	subs	r0, #1
 8000ac0:	e7a8      	b.n	8000a14 <__udivmoddi4+0x1e8>
 8000ac2:	4631      	mov	r1, r6
 8000ac4:	e7ed      	b.n	8000aa2 <__udivmoddi4+0x276>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	e799      	b.n	80009fe <__udivmoddi4+0x1d2>
 8000aca:	4630      	mov	r0, r6
 8000acc:	e7d4      	b.n	8000a78 <__udivmoddi4+0x24c>
 8000ace:	46d6      	mov	lr, sl
 8000ad0:	e77f      	b.n	80009d2 <__udivmoddi4+0x1a6>
 8000ad2:	4463      	add	r3, ip
 8000ad4:	3802      	subs	r0, #2
 8000ad6:	e74d      	b.n	8000974 <__udivmoddi4+0x148>
 8000ad8:	4606      	mov	r6, r0
 8000ada:	4623      	mov	r3, r4
 8000adc:	4608      	mov	r0, r1
 8000ade:	e70f      	b.n	8000900 <__udivmoddi4+0xd4>
 8000ae0:	3e02      	subs	r6, #2
 8000ae2:	4463      	add	r3, ip
 8000ae4:	e730      	b.n	8000948 <__udivmoddi4+0x11c>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_idiv0>:
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <ADS1299_Init>:
static void PowerUpSequence();
void EEGRecordingSequence();



void ADS1299_Init(){
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0

    //send_ads1299_command(ADS1299_SDATAC);
	PowerUpSequence();
 8000af0:	f000 f802 	bl	8000af8 <PowerUpSequence>

}
 8000af4:	bf00      	nop
 8000af6:	bd80      	pop	{r7, pc}

08000af8 <PowerUpSequence>:



static void PowerUpSequence(){
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b084      	sub	sp, #16
 8000afc:	af00      	add	r7, sp, #0

	uint8_t i = 0;
 8000afe:	2300      	movs	r3, #0
 8000b00:	73fb      	strb	r3, [r7, #15]
	uint8_t register_value = 0x00;
 8000b02:	2300      	movs	r3, #0
 8000b04:	73bb      	strb	r3, [r7, #14]
	uint8_t channset_value[ADS1299_CHANNELS] = {0};
 8000b06:	2300      	movs	r3, #0
 8000b08:	607b      	str	r3, [r7, #4]
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	60bb      	str	r3, [r7, #8]

	setnReset(GPIO_PIN_RESET);
 8000b0e:	2000      	movs	r0, #0
 8000b10:	f000 f908 	bl	8000d24 <setnReset>
	setnPWRdown(GPIO_PIN_RESET);
 8000b14:	2000      	movs	r0, #0
 8000b16:	f000 f917 	bl	8000d48 <setnPWRdown>
	setADS1299Start(GPIO_PIN_RESET);
 8000b1a:	2000      	movs	r0, #0
 8000b1c:	f000 f926 	bl	8000d6c <setADS1299Start>
	setADS1299CS(GPIO_PIN_SET);
 8000b20:	2001      	movs	r0, #1
 8000b22:	f000 f935 	bl	8000d90 <setADS1299CS>

	// Minimum delay after power on.
	HAL_Delay(POWER_UP_DELAY_MS);
 8000b26:	20c8      	movs	r0, #200	@ 0xc8
 8000b28:	f000 fcb4 	bl	8001494 <HAL_Delay>

	setnReset(GPIO_PIN_SET);
 8000b2c:	2001      	movs	r0, #1
 8000b2e:	f000 f8f9 	bl	8000d24 <setnReset>
	setnPWRdown(GPIO_PIN_SET);
 8000b32:	2001      	movs	r0, #1
 8000b34:	f000 f908 	bl	8000d48 <setnPWRdown>
	HAL_Delay(1);
 8000b38:	2001      	movs	r0, #1
 8000b3a:	f000 fcab 	bl	8001494 <HAL_Delay>

	setnReset(GPIO_PIN_RESET);
 8000b3e:	2000      	movs	r0, #0
 8000b40:	f000 f8f0 	bl	8000d24 <setnReset>
	HAL_Delay(1);
 8000b44:	2001      	movs	r0, #1
 8000b46:	f000 fca5 	bl	8001494 <HAL_Delay>
	setnReset(GPIO_PIN_SET);
 8000b4a:	2001      	movs	r0, #1
 8000b4c:	f000 f8ea 	bl	8000d24 <setnReset>

	// Minimum delay after power on.
	HAL_Delay(POWER_UP_DELAY_MS);
 8000b50:	20c8      	movs	r0, #200	@ 0xc8
 8000b52:	f000 fc9f 	bl	8001494 <HAL_Delay>

	send_ads1299_command(ADS1299_SDATAC);
 8000b56:	2011      	movs	r0, #17
 8000b58:	f000 f92a 	bl	8000db0 <send_ads1299_command>

	register_value = 0x96;
 8000b5c:	2396      	movs	r3, #150	@ 0x96
 8000b5e:	73bb      	strb	r3, [r7, #14]
	write_ads1299_register(ADS1299_REG_CONFIG1, 1, &register_value);
 8000b60:	f107 030e 	add.w	r3, r7, #14
 8000b64:	461a      	mov	r2, r3
 8000b66:	2101      	movs	r1, #1
 8000b68:	2001      	movs	r0, #1
 8000b6a:	f000 f943 	bl	8000df4 <write_ads1299_register>
	HAL_Delay(1);
 8000b6e:	2001      	movs	r0, #1
 8000b70:	f000 fc90 	bl	8001494 <HAL_Delay>
	register_value = 0xC0;
 8000b74:	23c0      	movs	r3, #192	@ 0xc0
 8000b76:	73bb      	strb	r3, [r7, #14]
	write_ads1299_register(ADS1299_REG_CONFIG2, 1, &register_value);
 8000b78:	f107 030e 	add.w	r3, r7, #14
 8000b7c:	461a      	mov	r2, r3
 8000b7e:	2101      	movs	r1, #1
 8000b80:	2002      	movs	r0, #2
 8000b82:	f000 f937 	bl	8000df4 <write_ads1299_register>
	HAL_Delay(1);
 8000b86:	2001      	movs	r0, #1
 8000b88:	f000 fc84 	bl	8001494 <HAL_Delay>
	register_value = 0xE0;
 8000b8c:	23e0      	movs	r3, #224	@ 0xe0
 8000b8e:	73bb      	strb	r3, [r7, #14]
	write_ads1299_register(ADS1299_REG_CONFIG3, 1, &register_value);
 8000b90:	f107 030e 	add.w	r3, r7, #14
 8000b94:	461a      	mov	r2, r3
 8000b96:	2101      	movs	r1, #1
 8000b98:	2003      	movs	r0, #3
 8000b9a:	f000 f92b 	bl	8000df4 <write_ads1299_register>
	HAL_Delay(1);
 8000b9e:	2001      	movs	r0, #1
 8000ba0:	f000 fc78 	bl	8001494 <HAL_Delay>

	for(i=0;i<ADS1299_CHANNELS;i++){
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	73fb      	strb	r3, [r7, #15]
 8000ba8:	e008      	b.n	8000bbc <PowerUpSequence+0xc4>
		channset_value[i] = 0x01;
 8000baa:	7bfb      	ldrb	r3, [r7, #15]
 8000bac:	3310      	adds	r3, #16
 8000bae:	443b      	add	r3, r7
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(i=0;i<ADS1299_CHANNELS;i++){
 8000bb6:	7bfb      	ldrb	r3, [r7, #15]
 8000bb8:	3301      	adds	r3, #1
 8000bba:	73fb      	strb	r3, [r7, #15]
 8000bbc:	7bfb      	ldrb	r3, [r7, #15]
 8000bbe:	2b07      	cmp	r3, #7
 8000bc0:	d9f3      	bls.n	8000baa <PowerUpSequence+0xb2>
	}

	write_ads1299_register(ADS1299_REG_CH1SET, ADS1299_CHANNELS, channset_value);
 8000bc2:	1d3b      	adds	r3, r7, #4
 8000bc4:	461a      	mov	r2, r3
 8000bc6:	2108      	movs	r1, #8
 8000bc8:	2005      	movs	r0, #5
 8000bca:	f000 f913 	bl	8000df4 <write_ads1299_register>
	HAL_Delay(1);
 8000bce:	2001      	movs	r0, #1
 8000bd0:	f000 fc60 	bl	8001494 <HAL_Delay>

	setADS1299Start(GPIO_PIN_SET);
 8000bd4:	2001      	movs	r0, #1
 8000bd6:	f000 f8c9 	bl	8000d6c <setADS1299Start>

	// Wait 1ms.
	HAL_Delay(1);
 8000bda:	2001      	movs	r0, #1
 8000bdc:	f000 fc5a 	bl	8001494 <HAL_Delay>

	send_ads1299_command(ADS1299_RDATAC);
 8000be0:	2010      	movs	r0, #16
 8000be2:	f000 f8e5 	bl	8000db0 <send_ads1299_command>

	// Wait 1ms.
	HAL_Delay(20);
 8000be6:	2014      	movs	r0, #20
 8000be8:	f000 fc54 	bl	8001494 <HAL_Delay>

	send_ads1299_command(ADS1299_SDATAC);
 8000bec:	2011      	movs	r0, #17
 8000bee:	f000 f8df 	bl	8000db0 <send_ads1299_command>
	register_value = 0xD0;
 8000bf2:	23d0      	movs	r3, #208	@ 0xd0
 8000bf4:	73bb      	strb	r3, [r7, #14]
	write_ads1299_register(ADS1299_REG_CONFIG2, 1, &register_value);
 8000bf6:	f107 030e 	add.w	r3, r7, #14
 8000bfa:	461a      	mov	r2, r3
 8000bfc:	2101      	movs	r1, #1
 8000bfe:	2002      	movs	r0, #2
 8000c00:	f000 f8f8 	bl	8000df4 <write_ads1299_register>
	HAL_Delay(1);
 8000c04:	2001      	movs	r0, #1
 8000c06:	f000 fc45 	bl	8001494 <HAL_Delay>

	for(i=0;i<ADS1299_CHANNELS;i++){
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	73fb      	strb	r3, [r7, #15]
 8000c0e:	e008      	b.n	8000c22 <PowerUpSequence+0x12a>
		channset_value[i] = 0x55;
 8000c10:	7bfb      	ldrb	r3, [r7, #15]
 8000c12:	3310      	adds	r3, #16
 8000c14:	443b      	add	r3, r7
 8000c16:	2255      	movs	r2, #85	@ 0x55
 8000c18:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(i=0;i<ADS1299_CHANNELS;i++){
 8000c1c:	7bfb      	ldrb	r3, [r7, #15]
 8000c1e:	3301      	adds	r3, #1
 8000c20:	73fb      	strb	r3, [r7, #15]
 8000c22:	7bfb      	ldrb	r3, [r7, #15]
 8000c24:	2b07      	cmp	r3, #7
 8000c26:	d9f3      	bls.n	8000c10 <PowerUpSequence+0x118>
	}

	write_ads1299_register(ADS1299_REG_CH1SET, ADS1299_CHANNELS, channset_value);
 8000c28:	1d3b      	adds	r3, r7, #4
 8000c2a:	461a      	mov	r2, r3
 8000c2c:	2108      	movs	r1, #8
 8000c2e:	2005      	movs	r0, #5
 8000c30:	f000 f8e0 	bl	8000df4 <write_ads1299_register>

	HAL_Delay(1);
 8000c34:	2001      	movs	r0, #1
 8000c36:	f000 fc2d 	bl	8001494 <HAL_Delay>


	EEGRecordingSequence();
 8000c3a:	f000 f807 	bl	8000c4c <EEGRecordingSequence>

	send_ads1299_command(ADS1299_RDATAC);
 8000c3e:	2010      	movs	r0, #16
 8000c40:	f000 f8b6 	bl	8000db0 <send_ads1299_command>

}
 8000c44:	bf00      	nop
 8000c46:	3710      	adds	r7, #16
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}

08000c4c <EEGRecordingSequence>:





void EEGRecordingSequence(){
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b084      	sub	sp, #16
 8000c50:	af00      	add	r7, sp, #0

	uint8_t i = 0;
 8000c52:	2300      	movs	r3, #0
 8000c54:	73fb      	strb	r3, [r7, #15]
	uint8_t register_value = 0x00;
 8000c56:	2300      	movs	r3, #0
 8000c58:	73bb      	strb	r3, [r7, #14]
	uint8_t channset_value[ADS1299_CHANNELS] = {0};
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	607b      	str	r3, [r7, #4]
 8000c5e:	2300      	movs	r3, #0
 8000c60:	60bb      	str	r3, [r7, #8]

	// Wait 1ms.
	HAL_Delay(20);
 8000c62:	2014      	movs	r0, #20
 8000c64:	f000 fc16 	bl	8001494 <HAL_Delay>

	send_ads1299_command(ADS1299_SDATAC);
 8000c68:	2011      	movs	r0, #17
 8000c6a:	f000 f8a1 	bl	8000db0 <send_ads1299_command>
	register_value = 0xC0;
 8000c6e:	23c0      	movs	r3, #192	@ 0xc0
 8000c70:	73bb      	strb	r3, [r7, #14]
	write_ads1299_register(ADS1299_REG_CONFIG2, 1, &register_value);
 8000c72:	f107 030e 	add.w	r3, r7, #14
 8000c76:	461a      	mov	r2, r3
 8000c78:	2101      	movs	r1, #1
 8000c7a:	2002      	movs	r0, #2
 8000c7c:	f000 f8ba 	bl	8000df4 <write_ads1299_register>
	HAL_Delay(1);
 8000c80:	2001      	movs	r0, #1
 8000c82:	f000 fc07 	bl	8001494 <HAL_Delay>


	register_value = 0xEC; //BIAS-enabled
 8000c86:	23ec      	movs	r3, #236	@ 0xec
 8000c88:	73bb      	strb	r3, [r7, #14]
	//register_value = 0xE0; //BIAS-disabled
	write_ads1299_register(ADS1299_REG_CONFIG3, 1, &register_value);
 8000c8a:	f107 030e 	add.w	r3, r7, #14
 8000c8e:	461a      	mov	r2, r3
 8000c90:	2101      	movs	r1, #1
 8000c92:	2003      	movs	r0, #3
 8000c94:	f000 f8ae 	bl	8000df4 <write_ads1299_register>
	HAL_Delay(1);
 8000c98:	2001      	movs	r0, #1
 8000c9a:	f000 fbfb 	bl	8001494 <HAL_Delay>
	//register_value = 0x00; //BIAS-disabled
	register_value = 0xFF; //BIAS-enabled
 8000c9e:	23ff      	movs	r3, #255	@ 0xff
 8000ca0:	73bb      	strb	r3, [r7, #14]
	write_ads1299_register(ADS1299_REG_BIAS_SENSP, 1, &register_value);
 8000ca2:	f107 030e 	add.w	r3, r7, #14
 8000ca6:	461a      	mov	r2, r3
 8000ca8:	2101      	movs	r1, #1
 8000caa:	200d      	movs	r0, #13
 8000cac:	f000 f8a2 	bl	8000df4 <write_ads1299_register>
	HAL_Delay(1);
 8000cb0:	2001      	movs	r0, #1
 8000cb2:	f000 fbef 	bl	8001494 <HAL_Delay>
	register_value = 0x00;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	73bb      	strb	r3, [r7, #14]
	write_ads1299_register(ADS1299_REG_BIAS_SENSN, 1, &register_value);
 8000cba:	f107 030e 	add.w	r3, r7, #14
 8000cbe:	461a      	mov	r2, r3
 8000cc0:	2101      	movs	r1, #1
 8000cc2:	200e      	movs	r0, #14
 8000cc4:	f000 f896 	bl	8000df4 <write_ads1299_register>
	HAL_Delay(1);
 8000cc8:	2001      	movs	r0, #1
 8000cca:	f000 fbe3 	bl	8001494 <HAL_Delay>
	register_value = 0x20;
 8000cce:	2320      	movs	r3, #32
 8000cd0:	73bb      	strb	r3, [r7, #14]
	write_ads1299_register(ADS1299_REG_MISC1, 1, &register_value);
 8000cd2:	f107 030e 	add.w	r3, r7, #14
 8000cd6:	461a      	mov	r2, r3
 8000cd8:	2101      	movs	r1, #1
 8000cda:	2015      	movs	r0, #21
 8000cdc:	f000 f88a 	bl	8000df4 <write_ads1299_register>
	HAL_Delay(1);
 8000ce0:	2001      	movs	r0, #1
 8000ce2:	f000 fbd7 	bl	8001494 <HAL_Delay>

	for(i=0;i<ADS1299_CHANNELS;i++){
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	73fb      	strb	r3, [r7, #15]
 8000cea:	e008      	b.n	8000cfe <EEGRecordingSequence+0xb2>
		channset_value[i] = 0x50;
 8000cec:	7bfb      	ldrb	r3, [r7, #15]
 8000cee:	3310      	adds	r3, #16
 8000cf0:	443b      	add	r3, r7
 8000cf2:	2250      	movs	r2, #80	@ 0x50
 8000cf4:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(i=0;i<ADS1299_CHANNELS;i++){
 8000cf8:	7bfb      	ldrb	r3, [r7, #15]
 8000cfa:	3301      	adds	r3, #1
 8000cfc:	73fb      	strb	r3, [r7, #15]
 8000cfe:	7bfb      	ldrb	r3, [r7, #15]
 8000d00:	2b07      	cmp	r3, #7
 8000d02:	d9f3      	bls.n	8000cec <EEGRecordingSequence+0xa0>

	//for(i=4;i<ADS1299_CHANNELS;i++){
	//	channset_value[i] = 0x01;
	//}

	write_ads1299_register(ADS1299_REG_CH1SET, ADS1299_CHANNELS, channset_value);
 8000d04:	1d3b      	adds	r3, r7, #4
 8000d06:	461a      	mov	r2, r3
 8000d08:	2108      	movs	r1, #8
 8000d0a:	2005      	movs	r0, #5
 8000d0c:	f000 f872 	bl	8000df4 <write_ads1299_register>

	HAL_Delay(1);
 8000d10:	2001      	movs	r0, #1
 8000d12:	f000 fbbf 	bl	8001494 <HAL_Delay>

	send_ads1299_command(ADS1299_RDATAC);
 8000d16:	2010      	movs	r0, #16
 8000d18:	f000 f84a 	bl	8000db0 <send_ads1299_command>

}
 8000d1c:	bf00      	nop
 8000d1e:	3710      	adds	r7, #16
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}

08000d24 <setnReset>:
}*/




static void setnReset(uint8_t value){
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ADS1299_nRESET_GPIO_Port, ADS1299_nRESET_Pin, value);
 8000d2e:	79fb      	ldrb	r3, [r7, #7]
 8000d30:	461a      	mov	r2, r3
 8000d32:	2180      	movs	r1, #128	@ 0x80
 8000d34:	4803      	ldr	r0, [pc, #12]	@ (8000d44 <setnReset+0x20>)
 8000d36:	f003 f983 	bl	8004040 <HAL_GPIO_WritePin>
}
 8000d3a:	bf00      	nop
 8000d3c:	3708      	adds	r7, #8
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	48000800 	.word	0x48000800

08000d48 <setnPWRdown>:

static void setnPWRdown(uint8_t value){
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	4603      	mov	r3, r0
 8000d50:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ADS1299_nPWDN_GPIO_Port, ADS1299_nPWDN_Pin, value);
 8000d52:	79fb      	ldrb	r3, [r7, #7]
 8000d54:	461a      	mov	r2, r3
 8000d56:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d5a:	4803      	ldr	r0, [pc, #12]	@ (8000d68 <setnPWRdown+0x20>)
 8000d5c:	f003 f970 	bl	8004040 <HAL_GPIO_WritePin>
}
 8000d60:	bf00      	nop
 8000d62:	3708      	adds	r7, #8
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	48000800 	.word	0x48000800

08000d6c <setADS1299Start>:

static void setADS1299Start(uint8_t value){
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	4603      	mov	r3, r0
 8000d74:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ADS1299_START_GPIO_Port, ADS1299_START_Pin, value);
 8000d76:	79fb      	ldrb	r3, [r7, #7]
 8000d78:	461a      	mov	r2, r3
 8000d7a:	2140      	movs	r1, #64	@ 0x40
 8000d7c:	4803      	ldr	r0, [pc, #12]	@ (8000d8c <setADS1299Start+0x20>)
 8000d7e:	f003 f95f 	bl	8004040 <HAL_GPIO_WritePin>
}
 8000d82:	bf00      	nop
 8000d84:	3708      	adds	r7, #8
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	48000800 	.word	0x48000800

08000d90 <setADS1299CS>:

static void setADS1299CS(uint8_t value){
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	4603      	mov	r3, r0
 8000d98:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ADS1299_CS_GPIO_Port, ADS1299_CS_Pin, value);
 8000d9a:	79fb      	ldrb	r3, [r7, #7]
 8000d9c:	461a      	mov	r2, r3
 8000d9e:	2110      	movs	r1, #16
 8000da0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000da4:	f003 f94c 	bl	8004040 <HAL_GPIO_WritePin>
}
 8000da8:	bf00      	nop
 8000daa:	3708      	adds	r7, #8
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}

08000db0 <send_ads1299_command>:

static uint8_t send_ads1299_command(uint8_t command)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	4603      	mov	r3, r0
 8000db8:	71fb      	strb	r3, [r7, #7]
    // Pull CS (Chip Select) low to begin the SPI communication
	setADS1299CS(GPIO_PIN_RESET);  // Assuming CS is on GPIOA pin 4
 8000dba:	2000      	movs	r0, #0
 8000dbc:	f7ff ffe8 	bl	8000d90 <setADS1299CS>

    // Transmit the command to ADS1299
    if (HAL_SPI_Transmit(&hspi1, &command, 1, HAL_MAX_DELAY) != HAL_OK)
 8000dc0:	1df9      	adds	r1, r7, #7
 8000dc2:	f04f 33ff 	mov.w	r3, #4294967295
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	4809      	ldr	r0, [pc, #36]	@ (8000df0 <send_ads1299_command+0x40>)
 8000dca:	f005 ff58 	bl	8006c7e <HAL_SPI_Transmit>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d004      	beq.n	8000dde <send_ads1299_command+0x2e>
    {
    	setADS1299CS(GPIO_PIN_SET);
 8000dd4:	2001      	movs	r0, #1
 8000dd6:	f7ff ffdb 	bl	8000d90 <setADS1299CS>
        return HAL_ERROR;  // Return error if transmission fails
 8000dda:	2301      	movs	r3, #1
 8000ddc:	e003      	b.n	8000de6 <send_ads1299_command+0x36>
    }

    // Pull CS (Chip Select) high to end the SPI communication
    setADS1299CS(GPIO_PIN_SET);
 8000dde:	2001      	movs	r0, #1
 8000de0:	f7ff ffd6 	bl	8000d90 <setADS1299CS>

    return HAL_OK;  // Return success
 8000de4:	2300      	movs	r3, #0
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3708      	adds	r7, #8
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	200002e4 	.word	0x200002e4

08000df4 <write_ads1299_register>:
}



static uint8_t write_ads1299_register(uint8_t start_addr, uint8_t num_regs, uint8_t *data)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b084      	sub	sp, #16
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	603a      	str	r2, [r7, #0]
 8000dfe:	71fb      	strb	r3, [r7, #7]
 8000e00:	460b      	mov	r3, r1
 8000e02:	71bb      	strb	r3, [r7, #6]
    // Buffer to hold the command sequence
    uint8_t tx_buffer[2];
    tx_buffer[0] = ADS1299_WREG | start_addr;  // Write command with starting register address
 8000e04:	79fb      	ldrb	r3, [r7, #7]
 8000e06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e0a:	b2db      	uxtb	r3, r3
 8000e0c:	733b      	strb	r3, [r7, #12]
    tx_buffer[1] = num_regs - 1;                        // Number of registers to write (0-indexed)
 8000e0e:	79bb      	ldrb	r3, [r7, #6]
 8000e10:	3b01      	subs	r3, #1
 8000e12:	b2db      	uxtb	r3, r3
 8000e14:	737b      	strb	r3, [r7, #13]

    // Pull CS (Chip Select) low to begin the SPI communication
    setADS1299CS(GPIO_PIN_RESET);  // Assuming CS is on GPIOA pin 4
 8000e16:	2000      	movs	r0, #0
 8000e18:	f7ff ffba 	bl	8000d90 <setADS1299CS>

    // Transmit the write command and register address
    if (HAL_SPI_Transmit(&hspi1, tx_buffer, 2, HAL_MAX_DELAY) != HAL_OK)
 8000e1c:	f107 010c 	add.w	r1, r7, #12
 8000e20:	f04f 33ff 	mov.w	r3, #4294967295
 8000e24:	2202      	movs	r2, #2
 8000e26:	4814      	ldr	r0, [pc, #80]	@ (8000e78 <write_ads1299_register+0x84>)
 8000e28:	f005 ff29 	bl	8006c7e <HAL_SPI_Transmit>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d007      	beq.n	8000e42 <write_ads1299_register+0x4e>
    {
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);  // End SPI communication
 8000e32:	2201      	movs	r2, #1
 8000e34:	2110      	movs	r1, #16
 8000e36:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e3a:	f003 f901 	bl	8004040 <HAL_GPIO_WritePin>
        return HAL_ERROR;  // Return error if transmission fails
 8000e3e:	2301      	movs	r3, #1
 8000e40:	e016      	b.n	8000e70 <write_ads1299_register+0x7c>
    }

    // Transmit the data to be written to the registers
    if (HAL_SPI_Transmit(&hspi1, data, num_regs, HAL_MAX_DELAY) != HAL_OK)
 8000e42:	79bb      	ldrb	r3, [r7, #6]
 8000e44:	b29a      	uxth	r2, r3
 8000e46:	f04f 33ff 	mov.w	r3, #4294967295
 8000e4a:	6839      	ldr	r1, [r7, #0]
 8000e4c:	480a      	ldr	r0, [pc, #40]	@ (8000e78 <write_ads1299_register+0x84>)
 8000e4e:	f005 ff16 	bl	8006c7e <HAL_SPI_Transmit>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d007      	beq.n	8000e68 <write_ads1299_register+0x74>
    {
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);  // End SPI communication
 8000e58:	2201      	movs	r2, #1
 8000e5a:	2110      	movs	r1, #16
 8000e5c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e60:	f003 f8ee 	bl	8004040 <HAL_GPIO_WritePin>
        return HAL_ERROR;  // Return error if data transmission fails
 8000e64:	2301      	movs	r3, #1
 8000e66:	e003      	b.n	8000e70 <write_ads1299_register+0x7c>
    }

    setADS1299CS(GPIO_PIN_SET);
 8000e68:	2001      	movs	r0, #1
 8000e6a:	f7ff ff91 	bl	8000d90 <setADS1299CS>

    return HAL_OK;  // Return success
 8000e6e:	2300      	movs	r3, #0
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	3710      	adds	r7, #16
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	200002e4 	.word	0x200002e4

08000e7c <ADS1299_ReadSamples>:
 * @brief Reads samples from the ADS1299 via SPI.
 * @param statusBuffer Pointer to a buffer to store the 3 status bytes.
 * @param dataBuffer Pointer to a buffer to store the 24 data bytes (8 channels x 3 bytes each).
 * @retval HAL_StatusTypeDef HAL status indicating success or error.
 */
HAL_StatusTypeDef ADS1299_ReadSamples(uint8_t *statusBuffer, uint8_t *dataBuffer) {
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b08c      	sub	sp, #48	@ 0x30
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
 8000e84:	6039      	str	r1, [r7, #0]

    uint8_t spiRxBuffer[27] = {0}; // Buffer to store all received bytes (3 status + 24 data)
 8000e86:	2300      	movs	r3, #0
 8000e88:	60fb      	str	r3, [r7, #12]
 8000e8a:	f107 0310 	add.w	r3, r7, #16
 8000e8e:	2200      	movs	r2, #0
 8000e90:	601a      	str	r2, [r3, #0]
 8000e92:	605a      	str	r2, [r3, #4]
 8000e94:	609a      	str	r2, [r3, #8]
 8000e96:	60da      	str	r2, [r3, #12]
 8000e98:	611a      	str	r2, [r3, #16]
 8000e9a:	f8c3 2013 	str.w	r2, [r3, #19]
    HAL_StatusTypeDef result;

    // Ensure that statusBuffer and dataBuffer are not NULL
    if (statusBuffer == NULL || dataBuffer == NULL) {
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d002      	beq.n	8000eaa <ADS1299_ReadSamples+0x2e>
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d101      	bne.n	8000eae <ADS1299_ReadSamples+0x32>
        return HAL_ERROR;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	e03d      	b.n	8000f2a <ADS1299_ReadSamples+0xae>
    }

    setADS1299CS(GPIO_PIN_RESET);
 8000eae:	2000      	movs	r0, #0
 8000eb0:	f7ff ff6e 	bl	8000d90 <setADS1299CS>

    // Perform SPI reception of 27 bytes
    result = HAL_SPI_Receive(&hspi1, spiRxBuffer, 27, HAL_MAX_DELAY);
 8000eb4:	f107 010c 	add.w	r1, r7, #12
 8000eb8:	f04f 33ff 	mov.w	r3, #4294967295
 8000ebc:	221b      	movs	r2, #27
 8000ebe:	481d      	ldr	r0, [pc, #116]	@ (8000f34 <ADS1299_ReadSamples+0xb8>)
 8000ec0:	f006 f852 	bl	8006f68 <HAL_SPI_Receive>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    setADS1299CS(GPIO_PIN_SET);
 8000eca:	2001      	movs	r0, #1
 8000ecc:	f7ff ff60 	bl	8000d90 <setADS1299CS>

    if (result != HAL_OK) {
 8000ed0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d002      	beq.n	8000ede <ADS1299_ReadSamples+0x62>
        return result; // Return if there is an SPI error
 8000ed8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000edc:	e025      	b.n	8000f2a <ADS1299_ReadSamples+0xae>
    }

    // Copy the first 3 bytes to the status buffer
    for (int i = 0; i < 3; i++) {
 8000ede:	2300      	movs	r3, #0
 8000ee0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000ee2:	e00b      	b.n	8000efc <ADS1299_ReadSamples+0x80>
        statusBuffer[i] = spiRxBuffer[i];
 8000ee4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ee6:	687a      	ldr	r2, [r7, #4]
 8000ee8:	4413      	add	r3, r2
 8000eea:	f107 010c 	add.w	r1, r7, #12
 8000eee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000ef0:	440a      	add	r2, r1
 8000ef2:	7812      	ldrb	r2, [r2, #0]
 8000ef4:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 3; i++) {
 8000ef6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ef8:	3301      	adds	r3, #1
 8000efa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000efc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000efe:	2b02      	cmp	r3, #2
 8000f00:	ddf0      	ble.n	8000ee4 <ADS1299_ReadSamples+0x68>
    }

    // Copy the next 24 bytes to the data buffer
    for (int i = 0; i < 24; i++) {
 8000f02:	2300      	movs	r3, #0
 8000f04:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000f06:	e00c      	b.n	8000f22 <ADS1299_ReadSamples+0xa6>
        dataBuffer[i] = spiRxBuffer[i + 3];
 8000f08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f0a:	1cda      	adds	r2, r3, #3
 8000f0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f0e:	6839      	ldr	r1, [r7, #0]
 8000f10:	440b      	add	r3, r1
 8000f12:	3230      	adds	r2, #48	@ 0x30
 8000f14:	443a      	add	r2, r7
 8000f16:	f812 2c24 	ldrb.w	r2, [r2, #-36]
 8000f1a:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 24; i++) {
 8000f1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f1e:	3301      	adds	r3, #1
 8000f20:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000f22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f24:	2b17      	cmp	r3, #23
 8000f26:	ddef      	ble.n	8000f08 <ADS1299_ReadSamples+0x8c>
    }

    return HAL_OK;
 8000f28:	2300      	movs	r3, #0
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3730      	adds	r7, #48	@ 0x30
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	200002e4 	.word	0x200002e4

08000f38 <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 8000f38:	b5b0      	push	{r4, r5, r7, lr}
 8000f3a:	b088      	sub	sp, #32
 8000f3c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8000f3e:	4b0b      	ldr	r3, [pc, #44]	@ (8000f6c <APPD_EnableCPU2+0x34>)
 8000f40:	1d3c      	adds	r4, r7, #4
 8000f42:	461d      	mov	r5, r3
 8000f44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f48:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f4c:	c403      	stmia	r4!, {r0, r1}
 8000f4e:	8022      	strh	r2, [r4, #0]
 8000f50:	3402      	adds	r4, #2
 8000f52:	0c13      	lsrs	r3, r2, #16
 8000f54:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8000f56:	f00a fb1d 	bl	800b594 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8000f5a:	1d3b      	adds	r3, r7, #4
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f009 fdae 	bl	800aabe <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 8000f62:	bf00      	nop
}
 8000f64:	3720      	adds	r7, #32
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bdb0      	pop	{r4, r5, r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	0800f758 	.word	0x0800f758

08000f70 <DbgOutputTraces>:
/* USER CODE END DbgOutputInit */
  return;
}

void DbgOutputTraces(  uint8_t *p_data, uint16_t size, void (*cb)(void) )
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b084      	sub	sp, #16
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	60f8      	str	r0, [r7, #12]
 8000f78:	460b      	mov	r3, r1
 8000f7a:	607a      	str	r2, [r7, #4]
 8000f7c:	817b      	strh	r3, [r7, #10]
/* USER CODE END DbgOutputTraces */
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 8000f7e:	897a      	ldrh	r2, [r7, #10]
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	68f9      	ldr	r1, [r7, #12]
 8000f84:	2000      	movs	r0, #0
 8000f86:	f001 f989 	bl	800229c <HW_UART_Transmit_DMA>

/* USER CODE END DbgOutputTraces */
  return;
 8000f8a:	bf00      	nop
}
 8000f8c:	3710      	adds	r7, #16
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
	...

08000f94 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8000f9c:	4b07      	ldr	r3, [pc, #28]	@ (8000fbc <LL_C2_PWR_SetPowerMode+0x28>)
 8000f9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000fa2:	f023 0207 	bic.w	r2, r3, #7
 8000fa6:	4905      	ldr	r1, [pc, #20]	@ (8000fbc <LL_C2_PWR_SetPowerMode+0x28>)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	4313      	orrs	r3, r2
 8000fac:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8000fb0:	bf00      	nop
 8000fb2:	370c      	adds	r7, #12
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr
 8000fbc:	58000400 	.word	0x58000400

08000fc0 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000fc8:	4b06      	ldr	r3, [pc, #24]	@ (8000fe4 <LL_EXTI_EnableIT_32_63+0x24>)
 8000fca:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8000fce:	4905      	ldr	r1, [pc, #20]	@ (8000fe4 <LL_EXTI_EnableIT_32_63+0x24>)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8000fd8:	bf00      	nop
 8000fda:	370c      	adds	r7, #12
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr
 8000fe4:	58000800 	.word	0x58000800

08000fe8 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8000ff0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ff4:	4a0a      	ldr	r2, [pc, #40]	@ (8001020 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8000ff6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8000ffa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ffe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001002:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	021b      	lsls	r3, r3, #8
 800100a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800100e:	4313      	orrs	r3, r2
 8001010:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
}
 8001014:	bf00      	nop
 8001016:	370c      	adds	r7, #12
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr
 8001020:	cafecafe 	.word	0xcafecafe

08001024 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 800102c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001030:	689b      	ldr	r3, [r3, #8]
 8001032:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8001036:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4313      	orrs	r3, r2
 800103e:	608b      	str	r3, [r1, #8]
}
 8001040:	bf00      	nop
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr

0800104c <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 8001050:	4b04      	ldr	r3, [pc, #16]	@ (8001064 <LL_DBGMCU_GetDeviceID+0x18>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8001058:	4618      	mov	r0, r3
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	e0042000 	.word	0xe0042000

08001068 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 800106c:	4b04      	ldr	r3, [pc, #16]	@ (8001080 <LL_DBGMCU_GetRevisionID+0x18>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	0c1b      	lsrs	r3, r3, #16
 8001072:	b29b      	uxth	r3, r3
}
 8001074:	4618      	mov	r0, r3
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	e0042000 	.word	0xe0042000

08001084 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001088:	4b05      	ldr	r3, [pc, #20]	@ (80010a0 <LL_LPM_EnableSleep+0x1c>)
 800108a:	691b      	ldr	r3, [r3, #16]
 800108c:	4a04      	ldr	r2, [pc, #16]	@ (80010a0 <LL_LPM_EnableSleep+0x1c>)
 800108e:	f023 0304 	bic.w	r3, r3, #4
 8001092:	6113      	str	r3, [r2, #16]
}
 8001094:	bf00      	nop
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	e000ed00 	.word	0xe000ed00

080010a4 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	22ff      	movs	r2, #255	@ 0xff
 80010b0:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80010b2:	bf00      	nop
 80010b4:	370c      	adds	r7, #12
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr

080010be <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 80010be:	b480      	push	{r7}
 80010c0:	b083      	sub	sp, #12
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	22ca      	movs	r2, #202	@ 0xca
 80010ca:	625a      	str	r2, [r3, #36]	@ 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2253      	movs	r2, #83	@ 0x53
 80010d0:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80010d2:	bf00      	nop
 80010d4:	370c      	adds	r7, #12
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr

080010de <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 80010de:	b480      	push	{r7}
 80010e0:	b083      	sub	sp, #12
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	6078      	str	r0, [r7, #4]
 80010e6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	689b      	ldr	r3, [r3, #8]
 80010ec:	f023 0207 	bic.w	r2, r3, #7
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	431a      	orrs	r2, r3
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	609a      	str	r2, [r3, #8]
}
 80010f8:	bf00      	nop
 80010fa:	370c      	adds	r7, #12
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr

08001104 <MX_APPE_Config>:
static void UartCmdExecute(void);
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001108:	4b04      	ldr	r3, [pc, #16]	@ (800111c <MX_APPE_Config+0x18>)
 800110a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800110e:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8001110:	f000 f828 	bl	8001164 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8001114:	f000 f82d 	bl	8001172 <Config_HSE>

  return;
 8001118:	bf00      	nop
}
 800111a:	bd80      	pop	{r7, pc}
 800111c:	58004000 	.word	0x58004000

08001120 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8001124:	f000 f839 	bl	800119a <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8001128:	f000 f852 	bl	80011d0 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 800112c:	4905      	ldr	r1, [pc, #20]	@ (8001144 <MX_APPE_Init+0x24>)
 800112e:	2000      	movs	r0, #0
 8001130:	f000 fe48 	bl	8001dc4 <HW_TS_Init>
  
  /**
   * The Standby mode should not be entered before the initialization is over
   * The default state of the Low Power Manager is to allow the Standby Mode so an request is needed here
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 8001134:	2101      	movs	r1, #1
 8001136:	2001      	movs	r0, #1
 8001138:	f00c fee8 	bl	800df0c <UTIL_LPM_SetOffMode>
  //Button_Init();

  //RxUART_Init();

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 800113c:	f000 f856 	bl	80011ec <appe_Tl_Init>
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */

   return;
 8001140:	bf00      	nop
}
 8001142:	bd80      	pop	{r7, pc}
 8001144:	200001cc 	.word	0x200001cc

08001148 <Init_Smps>:

void Init_Smps(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 800114c:	bf00      	nop
}
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr

08001156 <Init_Exti>:

void Init_Exti(void)
{
 8001156:	b580      	push	{r7, lr}
 8001158:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 800115a:	2050      	movs	r0, #80	@ 0x50
 800115c:	f7ff ff30 	bl	8000fc0 <LL_EXTI_EnableIT_32_63>

  return;
 8001160:	bf00      	nop
}
 8001162:	bd80      	pop	{r7, pc}

08001164 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  Reset_BackupDomain();

  Reset_IPCC();
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 8001168:	bf00      	nop
}
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr

08001172 <Config_HSE>:
  return;
}
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8001172:	b580      	push	{r7, lr}
 8001174:	b082      	sub	sp, #8
 8001176:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8001178:	2000      	movs	r0, #0
 800117a:	f00a fb37 	bl	800b7ec <OTP_Read>
 800117e:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d005      	beq.n	8001192 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	799b      	ldrb	r3, [r3, #6]
 800118a:	4618      	mov	r0, r3
 800118c:	f7ff ff2c 	bl	8000fe8 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8001190:	bf00      	nop
 8001192:	bf00      	nop
}
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}

0800119a <System_Init>:

static void System_Init(void)
{
 800119a:	b580      	push	{r7, lr}
 800119c:	af00      	add	r7, sp, #0
  Init_Smps();
 800119e:	f7ff ffd3 	bl	8001148 <Init_Smps>

  Init_Exti();
 80011a2:	f7ff ffd8 	bl	8001156 <Init_Exti>

  Init_Rtc();
 80011a6:	f000 f803 	bl	80011b0 <Init_Rtc>

  return;
 80011aa:	bf00      	nop
}
 80011ac:	bd80      	pop	{r7, pc}
	...

080011b0 <Init_Rtc>:

static void Init_Rtc(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 80011b4:	4805      	ldr	r0, [pc, #20]	@ (80011cc <Init_Rtc+0x1c>)
 80011b6:	f7ff ff82 	bl	80010be <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 80011ba:	2100      	movs	r1, #0
 80011bc:	4803      	ldr	r0, [pc, #12]	@ (80011cc <Init_Rtc+0x1c>)
 80011be:	f7ff ff8e 	bl	80010de <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 80011c2:	4802      	ldr	r0, [pc, #8]	@ (80011cc <Init_Rtc+0x1c>)
 80011c4:	f7ff ff6e 	bl	80010a4 <LL_RTC_EnableWriteProtection>

  return;
 80011c8:	bf00      	nop
}
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	40002800 	.word	0x40002800

080011d0 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 80011d4:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80011d8:	f7ff ff24 	bl	8001024 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 80011dc:	f00c fe84 	bl	800dee8 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 80011e0:	2004      	movs	r0, #4
 80011e2:	f7ff fed7 	bl	8000f94 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 80011e6:	bf00      	nop
}
 80011e8:	bd80      	pop	{r7, pc}
	...

080011ec <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b088      	sub	sp, #32
 80011f0:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 80011f2:	f00a f819 	bl	800b228 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 80011f6:	4a11      	ldr	r2, [pc, #68]	@ (800123c <appe_Tl_Init+0x50>)
 80011f8:	2100      	movs	r1, #0
 80011fa:	2020      	movs	r0, #32
 80011fc:	f00c ffb2 	bl	800e164 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8001200:	4b0f      	ldr	r3, [pc, #60]	@ (8001240 <appe_Tl_Init+0x54>)
 8001202:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8001204:	4b0f      	ldr	r3, [pc, #60]	@ (8001244 <appe_Tl_Init+0x58>)
 8001206:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8001208:	463b      	mov	r3, r7
 800120a:	4619      	mov	r1, r3
 800120c:	480e      	ldr	r0, [pc, #56]	@ (8001248 <appe_Tl_Init+0x5c>)
 800120e:	f009 fecd 	bl	800afac <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8001212:	4b0e      	ldr	r3, [pc, #56]	@ (800124c <appe_Tl_Init+0x60>)
 8001214:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8001216:	4b0e      	ldr	r3, [pc, #56]	@ (8001250 <appe_Tl_Init+0x64>)
 8001218:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 800121a:	4b0e      	ldr	r3, [pc, #56]	@ (8001254 <appe_Tl_Init+0x68>)
 800121c:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 800121e:	f44f 6306 	mov.w	r3, #2144	@ 0x860
 8001222:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8001224:	f107 0308 	add.w	r3, r7, #8
 8001228:	4618      	mov	r0, r3
 800122a:	f00a f93f 	bl	800b4ac <TL_MM_Init>

  TL_Enable();
 800122e:	f009 fff5 	bl	800b21c <TL_Enable>

  return;
 8001232:	bf00      	nop
}
 8001234:	3720      	adds	r7, #32
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	0800afe5 	.word	0x0800afe5
 8001240:	20030a58 	.word	0x20030a58
 8001244:	08001259 	.word	0x08001259
 8001248:	08001271 	.word	0x08001271
 800124c:	20030c70 	.word	0x20030c70
 8001250:	20030b64 	.word	0x20030b64
 8001254:	200301f8 	.word	0x200301f8

08001258 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	4603      	mov	r3, r0
 8001260:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8001262:	bf00      	nop
}
 8001264:	370c      	adds	r7, #12
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
	...

08001270 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b088      	sub	sp, #32
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	330b      	adds	r3, #11
 800127e:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 8001280:	69fb      	ldr	r3, [r7, #28]
 8001282:	881b      	ldrh	r3, [r3, #0]
 8001284:	b29b      	uxth	r3, r3
 8001286:	f5a3 4312 	sub.w	r3, r3, #37376	@ 0x9200
 800128a:	2b07      	cmp	r3, #7
 800128c:	d860      	bhi.n	8001350 <APPE_SysUserEvtRx+0xe0>
 800128e:	a201      	add	r2, pc, #4	@ (adr r2, 8001294 <APPE_SysUserEvtRx+0x24>)
 8001290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001294:	080012b5 	.word	0x080012b5
 8001298:	080012f7 	.word	0x080012f7
 800129c:	08001305 	.word	0x08001305
 80012a0:	08001351 	.word	0x08001351
 80012a4:	08001321 	.word	0x08001321
 80012a8:	08001331 	.word	0x08001331
 80012ac:	08001339 	.word	0x08001339
 80012b0:	08001349 	.word	0x08001349
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 80012b4:	f107 030c 	add.w	r3, r7, #12
 80012b8:	4618      	mov	r0, r3
 80012ba:	f009 fc2d 	bl	800ab18 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
 80012be:	7b3b      	ldrb	r3, [r7, #12]
 80012c0:	4619      	mov	r1, r3
 80012c2:	7b7b      	ldrb	r3, [r7, #13]
 80012c4:	461a      	mov	r2, r3
 80012c6:	7bbb      	ldrb	r3, [r7, #14]
 80012c8:	4824      	ldr	r0, [pc, #144]	@ (800135c <APPE_SysUserEvtRx+0xec>)
 80012ca:	f00d f92b 	bl	800e524 <iprintf>
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
 80012ce:	7c3b      	ldrb	r3, [r7, #16]
 80012d0:	4619      	mov	r1, r3
 80012d2:	4823      	ldr	r0, [pc, #140]	@ (8001360 <APPE_SysUserEvtRx+0xf0>)
 80012d4:	f00d f926 	bl	800e524 <iprintf>
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);
 80012d8:	7dbb      	ldrb	r3, [r7, #22]
 80012da:	4619      	mov	r1, r3
 80012dc:	7dfb      	ldrb	r3, [r7, #23]
 80012de:	461a      	mov	r2, r3
 80012e0:	7e3b      	ldrb	r3, [r7, #24]
 80012e2:	4820      	ldr	r0, [pc, #128]	@ (8001364 <APPE_SysUserEvtRx+0xf4>)
 80012e4:	f00d f91e 	bl	800e524 <iprintf>

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
 80012e8:	481f      	ldr	r0, [pc, #124]	@ (8001368 <APPE_SysUserEvtRx+0xf8>)
 80012ea:	f00d f91b 	bl	800e524 <iprintf>
    APPE_SysEvtReadyProcessing(pPayload);
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f000 f870 	bl	80013d4 <APPE_SysEvtReadyProcessing>
    break;
 80012f4:	e02d      	b.n	8001352 <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
 80012f6:	481d      	ldr	r0, [pc, #116]	@ (800136c <APPE_SysUserEvtRx+0xfc>)
 80012f8:	f00d f914 	bl	800e524 <iprintf>
    APPE_SysEvtError(pPayload);
 80012fc:	6878      	ldr	r0, [r7, #4]
 80012fe:	f000 f843 	bl	8001388 <APPE_SysEvtError>
    break;
 8001302:	e026      	b.n	8001352 <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE -- BLE NVM RAM HAS BEEN UPDATED BY CPU2 \n");
 8001304:	481a      	ldr	r0, [pc, #104]	@ (8001370 <APPE_SysUserEvtRx+0x100>)
 8001306:	f00d f97d 	bl	800e604 <puts>
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->StartAddress,
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	3302      	adds	r3, #2
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
 800130e:	6819      	ldr	r1, [r3, #0]
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->Size);
 8001310:	69fb      	ldr	r3, [r7, #28]
 8001312:	3302      	adds	r3, #2
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	461a      	mov	r2, r3
 8001318:	4816      	ldr	r0, [pc, #88]	@ (8001374 <APPE_SysUserEvtRx+0x104>)
 800131a:	f00d f903 	bl	800e524 <iprintf>
    break;
 800131e:	e018      	b.n	8001352 <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_START_WRITE:
    APP_DBG_MSG("==>> SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
                ((SHCI_C2_NvmStartWrite_Evt_t*)p_sys_event->payload)->NumberOfWords);
 8001320:	69fb      	ldr	r3, [r7, #28]
 8001322:	3302      	adds	r3, #2
    APP_DBG_MSG("==>> SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4619      	mov	r1, r3
 8001328:	4813      	ldr	r0, [pc, #76]	@ (8001378 <APPE_SysUserEvtRx+0x108>)
 800132a:	f00d f8fb 	bl	800e524 <iprintf>
    break;
 800132e:	e010      	b.n	8001352 <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_END_WRITE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_WRITE\n\r");
 8001330:	4812      	ldr	r0, [pc, #72]	@ (800137c <APPE_SysUserEvtRx+0x10c>)
 8001332:	f00d f8f7 	bl	800e524 <iprintf>
    break;
 8001336:	e00c      	b.n	8001352 <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_START_ERASE:
    APP_DBG_MSG("==>>SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
                ((SHCI_C2_NvmStartErase_Evt_t*)p_sys_event->payload)->NumberOfSectors);
 8001338:	69fb      	ldr	r3, [r7, #28]
 800133a:	3302      	adds	r3, #2
    APP_DBG_MSG("==>>SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4619      	mov	r1, r3
 8001340:	480f      	ldr	r0, [pc, #60]	@ (8001380 <APPE_SysUserEvtRx+0x110>)
 8001342:	f00d f8ef 	bl	800e524 <iprintf>
    break;
 8001346:	e004      	b.n	8001352 <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
 8001348:	480e      	ldr	r0, [pc, #56]	@ (8001384 <APPE_SysUserEvtRx+0x114>)
 800134a:	f00d f8eb 	bl	800e524 <iprintf>
    break;
 800134e:	e000      	b.n	8001352 <APPE_SysUserEvtRx+0xe2>

  default:
    break;
 8001350:	bf00      	nop
  }

  return;
 8001352:	bf00      	nop
}
 8001354:	3720      	adds	r7, #32
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	0800f774 	.word	0x0800f774
 8001360:	0800f798 	.word	0x0800f798
 8001364:	0800f7b4 	.word	0x0800f7b4
 8001368:	0800f7cc 	.word	0x0800f7cc
 800136c:	0800f7ec 	.word	0x0800f7ec
 8001370:	0800f810 	.word	0x0800f810
 8001374:	0800f860 	.word	0x0800f860
 8001378:	0800f888 	.word	0x0800f888
 800137c:	0800f8c4 	.word	0x0800f8c4
 8001380:	0800f8e8 	.word	0x0800f8e8
 8001384:	0800f924 	.word	0x0800f924

08001388 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	330b      	adds	r3, #11
 8001396:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	3302      	adds	r3, #2
 800139c:	60bb      	str	r3, [r7, #8]

  APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON %x \n\r",(*p_sys_error_code));
 800139e:	68bb      	ldr	r3, [r7, #8]
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	4619      	mov	r1, r3
 80013a4:	4808      	ldr	r0, [pc, #32]	@ (80013c8 <APPE_SysEvtError+0x40>)
 80013a6:	f00d f8bd 	bl	800e524 <iprintf>

  if ((*p_sys_error_code) == ERR_BLE_INIT)
 80013aa:	68bb      	ldr	r3, [r7, #8]
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d103      	bne.n	80013ba <APPE_SysEvtError+0x32>
  {
    /* Error during BLE stack initialization */
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - ERR_BLE_INIT \n");
 80013b2:	4806      	ldr	r0, [pc, #24]	@ (80013cc <APPE_SysEvtError+0x44>)
 80013b4:	f00d f926 	bl	800e604 <puts>
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 80013b8:	e003      	b.n	80013c2 <APPE_SysEvtError+0x3a>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
 80013ba:	4805      	ldr	r0, [pc, #20]	@ (80013d0 <APPE_SysEvtError+0x48>)
 80013bc:	f00d f922 	bl	800e604 <puts>
  return;
 80013c0:	bf00      	nop
}
 80013c2:	3710      	adds	r7, #16
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	0800f948 	.word	0x0800f948
 80013cc:	0800f978 	.word	0x0800f978
 80013d0:	0800f9b4 	.word	0x0800f9b4

080013d4 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b08a      	sub	sp, #40	@ 0x28
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 80013dc:	f107 0308 	add.w	r3, r7, #8
 80013e0:	2200      	movs	r2, #0
 80013e2:	601a      	str	r2, [r3, #0]
 80013e4:	605a      	str	r2, [r3, #4]
 80013e6:	609a      	str	r2, [r3, #8]
 80013e8:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 80013ea:	2300      	movs	r3, #0
 80013ec:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t DeviceID=0;
 80013ee:	2300      	movs	r3, #0
 80013f0:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	330b      	adds	r3, #11
 80013f8:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	3302      	adds	r3, #2
 80013fe:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 8001400:	69bb      	ldr	r3, [r7, #24]
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d128      	bne.n	800145a <APPE_SysEvtReadyProcessing+0x86>
  {
    /**
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");
 8001408:	481d      	ldr	r0, [pc, #116]	@ (8001480 <APPE_SysEvtReadyProcessing+0xac>)
 800140a:	f00d f8fb 	bl	800e604 <puts>

    /* Traces channel initialization */
    APPD_EnableCPU2();
 800140e:	f7ff fd93 	bl	8000f38 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 8001412:	230f      	movs	r3, #15
 8001414:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 8001416:	237f      	movs	r3, #127	@ 0x7f
 8001418:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 800141a:	f7ff fe25 	bl	8001068 <LL_DBGMCU_GetRevisionID>
 800141e:	6278      	str	r0, [r7, #36]	@ 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);
 8001420:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001422:	4818      	ldr	r0, [pc, #96]	@ (8001484 <APPE_SysEvtReadyProcessing+0xb0>)
 8001424:	f00d f87e 	bl	800e524 <iprintf>

    config_param.RevisionID = (uint16_t)RevisionID;
 8001428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800142a:	b29b      	uxth	r3, r3
 800142c:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 800142e:	f7ff fe0d 	bl	800104c <LL_DBGMCU_GetDeviceID>
 8001432:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
 8001434:	6a39      	ldr	r1, [r7, #32]
 8001436:	4814      	ldr	r0, [pc, #80]	@ (8001488 <APPE_SysEvtReadyProcessing+0xb4>)
 8001438:	f00d f874 	bl	800e524 <iprintf>
    config_param.DeviceID = (uint16_t)DeviceID;
 800143c:	6a3b      	ldr	r3, [r7, #32]
 800143e:	b29b      	uxth	r3, r3
 8001440:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 8001442:	f107 0308 	add.w	r3, r7, #8
 8001446:	4618      	mov	r0, r3
 8001448:	f009 fb50 	bl	800aaec <SHCI_C2_Config>

    APP_BLE_Init();
 800144c:	f00a fea2 	bl	800c194 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8001450:	2100      	movs	r1, #0
 8001452:	2001      	movs	r0, #1
 8001454:	f00c fd5a 	bl	800df0c <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 8001458:	e00e      	b.n	8001478 <APPE_SysEvtReadyProcessing+0xa4>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 800145a:	69bb      	ldr	r3, [r7, #24]
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	2b01      	cmp	r3, #1
 8001460:	d106      	bne.n	8001470 <APPE_SysEvtReadyProcessing+0x9c>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - FUS_FW_RUNNING \n\r");
 8001462:	480a      	ldr	r0, [pc, #40]	@ (800148c <APPE_SysEvtReadyProcessing+0xb8>)
 8001464:	f00d f85e 	bl	800e524 <iprintf>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2200      	movs	r2, #0
 800146c:	701a      	strb	r2, [r3, #0]
  return;
 800146e:	e003      	b.n	8001478 <APPE_SysEvtReadyProcessing+0xa4>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
 8001470:	4807      	ldr	r0, [pc, #28]	@ (8001490 <APPE_SysEvtReadyProcessing+0xbc>)
 8001472:	f00d f857 	bl	800e524 <iprintf>
  return;
 8001476:	bf00      	nop
}
 8001478:	3728      	adds	r7, #40	@ 0x28
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	0800f9ec 	.word	0x0800f9ec
 8001484:	0800fa08 	.word	0x0800fa08
 8001488:	0800fa2c 	.word	0x0800fa2c
 800148c:	0800fa4c 	.word	0x0800fa4c
 8001490:	0800fa80 	.word	0x0800fa80

08001494 <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b084      	sub	sp, #16
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800149c:	f001 ff70 	bl	8003380 <HAL_GetTick>
 80014a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014ac:	d00a      	beq.n	80014c4 <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 80014ae:	f001 ff7f 	bl	80033b0 <HAL_GetTickFreq>
 80014b2:	4603      	mov	r3, r0
 80014b4:	461a      	mov	r2, r3
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	4413      	add	r3, r2
 80014ba:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014bc:	e002      	b.n	80014c4 <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 80014be:	f7ff fde1 	bl	8001084 <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM) || defined (__ARMCC_VERSION)
    __force_stores();
  #endif /* __ARMCC_VERSION */

    __WFI();
 80014c2:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 80014c4:	f001 ff5c 	bl	8003380 <HAL_GetTick>
 80014c8:	4602      	mov	r2, r0
 80014ca:	68bb      	ldr	r3, [r7, #8]
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	68fa      	ldr	r2, [r7, #12]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d8f4      	bhi.n	80014be <HAL_Delay+0x2a>
  }
}
 80014d4:	bf00      	nop
 80014d6:	bf00      	nop
 80014d8:	3710      	adds	r7, #16
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}

080014de <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 80014de:	b580      	push	{r7, lr}
 80014e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80014e2:	f04f 30ff 	mov.w	r0, #4294967295
 80014e6:	f00c fd41 	bl	800df6c <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 80014ea:	bf00      	nop
 80014ec:	bd80      	pop	{r7, pc}

080014ee <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 80014ee:	b480      	push	{r7}
 80014f0:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 80014f2:	bf00      	nop
}
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr

080014fc <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
 8001504:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001506:	f04f 30ff 	mov.w	r0, #4294967295
 800150a:	f00c fd2f 	bl	800df6c <UTIL_SEQ_Run>
  return;
 800150e:	bf00      	nop
}
 8001510:	3708      	adds	r7, #8
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}

08001516 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8001516:	b580      	push	{r7, lr}
 8001518:	b082      	sub	sp, #8
 800151a:	af00      	add	r7, sp, #0
 800151c:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800151e:	2100      	movs	r1, #0
 8001520:	2020      	movs	r0, #32
 8001522:	f00c fe41 	bl	800e1a8 <UTIL_SEQ_SetTask>
  return;
 8001526:	bf00      	nop
}
 8001528:	3708      	adds	r7, #8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}

0800152e <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 800152e:	b580      	push	{r7, lr}
 8001530:	b082      	sub	sp, #8
 8001532:	af00      	add	r7, sp, #0
 8001534:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8001536:	2002      	movs	r0, #2
 8001538:	f00c fea2 	bl	800e280 <UTIL_SEQ_SetEvt>
  return;
 800153c:	bf00      	nop
}
 800153e:	3708      	adds	r7, #8
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}

08001544 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 800154c:	2002      	movs	r0, #2
 800154e:	f00c feb7 	bl	800e2c0 <UTIL_SEQ_WaitEvt>
  return;
 8001552:	bf00      	nop
}
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}

0800155a <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN FD_WRAP_FUNCTIONS */
void HAL_GPIO_EXTI_Callback( uint16_t GPIO_Pin )
{
 800155a:	b580      	push	{r7, lr}
 800155c:	b082      	sub	sp, #8
 800155e:	af00      	add	r7, sp, #0
 8001560:	4603      	mov	r3, r0
 8001562:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 8001564:	88fb      	ldrh	r3, [r7, #6]
 8001566:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800156a:	d00b      	beq.n	8001584 <HAL_GPIO_EXTI_Callback+0x2a>
 800156c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001570:	dc0e      	bgt.n	8001590 <HAL_GPIO_EXTI_Callback+0x36>
 8001572:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001576:	d008      	beq.n	800158a <HAL_GPIO_EXTI_Callback+0x30>
 8001578:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800157c:	d108      	bne.n	8001590 <HAL_GPIO_EXTI_Callback+0x36>
  {
  case GPIO_PIN_12:
    /* SW button 1 */
    APP_SWA_Button_Action();
 800157e:	f00c f969 	bl	800d854 <APP_SWA_Button_Action>
    break; 
 8001582:	e006      	b.n	8001592 <HAL_GPIO_EXTI_Callback+0x38>
    
  case GPIO_PIN_13:
    /* SW button 2 */
	APP_SWB_Button_Action();
 8001584:	f00c f96e 	bl	800d864 <APP_SWB_Button_Action>
    break;
 8001588:	e003      	b.n	8001592 <HAL_GPIO_EXTI_Callback+0x38>

  case ADS1299_nDRDY_Pin:
    APP_BLE_Manage_ADS1299_event();
 800158a:	f00c f9d1 	bl	800d930 <APP_BLE_Manage_ADS1299_event>
    break; 
 800158e:	e000      	b.n	8001592 <HAL_GPIO_EXTI_Callback+0x38>

  default:
    break;
 8001590:	bf00      	nop
  }
  return;
 8001592:	bf00      	nop
}
 8001594:	3708      	adds	r7, #8
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
	...

0800159c <LL_EXTI_EnableIT_0_31>:
{
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80015a4:	4b06      	ldr	r3, [pc, #24]	@ (80015c0 <LL_EXTI_EnableIT_0_31+0x24>)
 80015a6:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80015aa:	4905      	ldr	r1, [pc, #20]	@ (80015c0 <LL_EXTI_EnableIT_0_31+0x24>)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	4313      	orrs	r3, r2
 80015b0:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 80015b4:	bf00      	nop
 80015b6:	370c      	adds	r7, #12
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr
 80015c0:	58000800 	.word	0x58000800

080015c4 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80015cc:	4b05      	ldr	r3, [pc, #20]	@ (80015e4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	4904      	ldr	r1, [pc, #16]	@ (80015e4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4313      	orrs	r3, r2
 80015d6:	600b      	str	r3, [r1, #0]

}
 80015d8:	bf00      	nop
 80015da:	370c      	adds	r7, #12
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr
 80015e4:	58000800 	.word	0x58000800

080015e8 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80015ee:	4b0d      	ldr	r3, [pc, #52]	@ (8001624 <ReadRtcSsrValue+0x3c>)
 80015f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015f2:	b29b      	uxth	r3, r3
 80015f4:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80015f6:	4b0b      	ldr	r3, [pc, #44]	@ (8001624 <ReadRtcSsrValue+0x3c>)
 80015f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015fa:	b29b      	uxth	r3, r3
 80015fc:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 80015fe:	e005      	b.n	800160c <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001604:	4b07      	ldr	r3, [pc, #28]	@ (8001624 <ReadRtcSsrValue+0x3c>)
 8001606:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001608:	b29b      	uxth	r3, r3
 800160a:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 800160c:	687a      	ldr	r2, [r7, #4]
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	429a      	cmp	r2, r3
 8001612:	d1f5      	bne.n	8001600 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8001614:	683b      	ldr	r3, [r7, #0]
}
 8001616:	4618      	mov	r0, r3
 8001618:	370c      	adds	r7, #12
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop
 8001624:	40002800 	.word	0x40002800

08001628 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8001628:	b480      	push	{r7}
 800162a:	b085      	sub	sp, #20
 800162c:	af00      	add	r7, sp, #0
 800162e:	4603      	mov	r3, r0
 8001630:	460a      	mov	r2, r1
 8001632:	71fb      	strb	r3, [r7, #7]
 8001634:	4613      	mov	r3, r2
 8001636:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8001638:	79ba      	ldrb	r2, [r7, #6]
 800163a:	491d      	ldr	r1, [pc, #116]	@ (80016b0 <LinkTimerAfter+0x88>)
 800163c:	4613      	mov	r3, r2
 800163e:	005b      	lsls	r3, r3, #1
 8001640:	4413      	add	r3, r2
 8001642:	00db      	lsls	r3, r3, #3
 8001644:	440b      	add	r3, r1
 8001646:	3315      	adds	r3, #21
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800164c:	7bfb      	ldrb	r3, [r7, #15]
 800164e:	2b06      	cmp	r3, #6
 8001650:	d009      	beq.n	8001666 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8001652:	7bfa      	ldrb	r2, [r7, #15]
 8001654:	4916      	ldr	r1, [pc, #88]	@ (80016b0 <LinkTimerAfter+0x88>)
 8001656:	4613      	mov	r3, r2
 8001658:	005b      	lsls	r3, r3, #1
 800165a:	4413      	add	r3, r2
 800165c:	00db      	lsls	r3, r3, #3
 800165e:	440b      	add	r3, r1
 8001660:	3314      	adds	r3, #20
 8001662:	79fa      	ldrb	r2, [r7, #7]
 8001664:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8001666:	79fa      	ldrb	r2, [r7, #7]
 8001668:	4911      	ldr	r1, [pc, #68]	@ (80016b0 <LinkTimerAfter+0x88>)
 800166a:	4613      	mov	r3, r2
 800166c:	005b      	lsls	r3, r3, #1
 800166e:	4413      	add	r3, r2
 8001670:	00db      	lsls	r3, r3, #3
 8001672:	440b      	add	r3, r1
 8001674:	3315      	adds	r3, #21
 8001676:	7bfa      	ldrb	r2, [r7, #15]
 8001678:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 800167a:	79fa      	ldrb	r2, [r7, #7]
 800167c:	490c      	ldr	r1, [pc, #48]	@ (80016b0 <LinkTimerAfter+0x88>)
 800167e:	4613      	mov	r3, r2
 8001680:	005b      	lsls	r3, r3, #1
 8001682:	4413      	add	r3, r2
 8001684:	00db      	lsls	r3, r3, #3
 8001686:	440b      	add	r3, r1
 8001688:	3314      	adds	r3, #20
 800168a:	79ba      	ldrb	r2, [r7, #6]
 800168c:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 800168e:	79ba      	ldrb	r2, [r7, #6]
 8001690:	4907      	ldr	r1, [pc, #28]	@ (80016b0 <LinkTimerAfter+0x88>)
 8001692:	4613      	mov	r3, r2
 8001694:	005b      	lsls	r3, r3, #1
 8001696:	4413      	add	r3, r2
 8001698:	00db      	lsls	r3, r3, #3
 800169a:	440b      	add	r3, r1
 800169c:	3315      	adds	r3, #21
 800169e:	79fa      	ldrb	r2, [r7, #7]
 80016a0:	701a      	strb	r2, [r3, #0]

  return;
 80016a2:	bf00      	nop
}
 80016a4:	3714      	adds	r7, #20
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop
 80016b0:	200000d8 	.word	0x200000d8

080016b4 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b085      	sub	sp, #20
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	4603      	mov	r3, r0
 80016bc:	460a      	mov	r2, r1
 80016be:	71fb      	strb	r3, [r7, #7]
 80016c0:	4613      	mov	r3, r2
 80016c2:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 80016c4:	4b29      	ldr	r3, [pc, #164]	@ (800176c <LinkTimerBefore+0xb8>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	79ba      	ldrb	r2, [r7, #6]
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d032      	beq.n	8001736 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 80016d0:	79ba      	ldrb	r2, [r7, #6]
 80016d2:	4927      	ldr	r1, [pc, #156]	@ (8001770 <LinkTimerBefore+0xbc>)
 80016d4:	4613      	mov	r3, r2
 80016d6:	005b      	lsls	r3, r3, #1
 80016d8:	4413      	add	r3, r2
 80016da:	00db      	lsls	r3, r3, #3
 80016dc:	440b      	add	r3, r1
 80016de:	3314      	adds	r3, #20
 80016e0:	781b      	ldrb	r3, [r3, #0]
 80016e2:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 80016e4:	7bfa      	ldrb	r2, [r7, #15]
 80016e6:	4922      	ldr	r1, [pc, #136]	@ (8001770 <LinkTimerBefore+0xbc>)
 80016e8:	4613      	mov	r3, r2
 80016ea:	005b      	lsls	r3, r3, #1
 80016ec:	4413      	add	r3, r2
 80016ee:	00db      	lsls	r3, r3, #3
 80016f0:	440b      	add	r3, r1
 80016f2:	3315      	adds	r3, #21
 80016f4:	79fa      	ldrb	r2, [r7, #7]
 80016f6:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 80016f8:	79fa      	ldrb	r2, [r7, #7]
 80016fa:	491d      	ldr	r1, [pc, #116]	@ (8001770 <LinkTimerBefore+0xbc>)
 80016fc:	4613      	mov	r3, r2
 80016fe:	005b      	lsls	r3, r3, #1
 8001700:	4413      	add	r3, r2
 8001702:	00db      	lsls	r3, r3, #3
 8001704:	440b      	add	r3, r1
 8001706:	3315      	adds	r3, #21
 8001708:	79ba      	ldrb	r2, [r7, #6]
 800170a:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 800170c:	79fa      	ldrb	r2, [r7, #7]
 800170e:	4918      	ldr	r1, [pc, #96]	@ (8001770 <LinkTimerBefore+0xbc>)
 8001710:	4613      	mov	r3, r2
 8001712:	005b      	lsls	r3, r3, #1
 8001714:	4413      	add	r3, r2
 8001716:	00db      	lsls	r3, r3, #3
 8001718:	440b      	add	r3, r1
 800171a:	3314      	adds	r3, #20
 800171c:	7bfa      	ldrb	r2, [r7, #15]
 800171e:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001720:	79ba      	ldrb	r2, [r7, #6]
 8001722:	4913      	ldr	r1, [pc, #76]	@ (8001770 <LinkTimerBefore+0xbc>)
 8001724:	4613      	mov	r3, r2
 8001726:	005b      	lsls	r3, r3, #1
 8001728:	4413      	add	r3, r2
 800172a:	00db      	lsls	r3, r3, #3
 800172c:	440b      	add	r3, r1
 800172e:	3314      	adds	r3, #20
 8001730:	79fa      	ldrb	r2, [r7, #7]
 8001732:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8001734:	e014      	b.n	8001760 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8001736:	79fa      	ldrb	r2, [r7, #7]
 8001738:	490d      	ldr	r1, [pc, #52]	@ (8001770 <LinkTimerBefore+0xbc>)
 800173a:	4613      	mov	r3, r2
 800173c:	005b      	lsls	r3, r3, #1
 800173e:	4413      	add	r3, r2
 8001740:	00db      	lsls	r3, r3, #3
 8001742:	440b      	add	r3, r1
 8001744:	3315      	adds	r3, #21
 8001746:	79ba      	ldrb	r2, [r7, #6]
 8001748:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 800174a:	79ba      	ldrb	r2, [r7, #6]
 800174c:	4908      	ldr	r1, [pc, #32]	@ (8001770 <LinkTimerBefore+0xbc>)
 800174e:	4613      	mov	r3, r2
 8001750:	005b      	lsls	r3, r3, #1
 8001752:	4413      	add	r3, r2
 8001754:	00db      	lsls	r3, r3, #3
 8001756:	440b      	add	r3, r1
 8001758:	3314      	adds	r3, #20
 800175a:	79fa      	ldrb	r2, [r7, #7]
 800175c:	701a      	strb	r2, [r3, #0]
  return;
 800175e:	bf00      	nop
}
 8001760:	3714      	adds	r7, #20
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	20000168 	.word	0x20000168
 8001770:	200000d8 	.word	0x200000d8

08001774 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0
 800177a:	4603      	mov	r3, r0
 800177c:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800177e:	4b4e      	ldr	r3, [pc, #312]	@ (80018b8 <linkTimer+0x144>)
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	b2db      	uxtb	r3, r3
 8001784:	2b06      	cmp	r3, #6
 8001786:	d118      	bne.n	80017ba <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001788:	4b4b      	ldr	r3, [pc, #300]	@ (80018b8 <linkTimer+0x144>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	b2da      	uxtb	r2, r3
 800178e:	4b4b      	ldr	r3, [pc, #300]	@ (80018bc <linkTimer+0x148>)
 8001790:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8001792:	4a49      	ldr	r2, [pc, #292]	@ (80018b8 <linkTimer+0x144>)
 8001794:	79fb      	ldrb	r3, [r7, #7]
 8001796:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8001798:	79fa      	ldrb	r2, [r7, #7]
 800179a:	4949      	ldr	r1, [pc, #292]	@ (80018c0 <linkTimer+0x14c>)
 800179c:	4613      	mov	r3, r2
 800179e:	005b      	lsls	r3, r3, #1
 80017a0:	4413      	add	r3, r2
 80017a2:	00db      	lsls	r3, r3, #3
 80017a4:	440b      	add	r3, r1
 80017a6:	3315      	adds	r3, #21
 80017a8:	2206      	movs	r2, #6
 80017aa:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80017ac:	4b45      	ldr	r3, [pc, #276]	@ (80018c4 <linkTimer+0x150>)
 80017ae:	f04f 32ff 	mov.w	r2, #4294967295
 80017b2:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 80017b4:	2300      	movs	r3, #0
 80017b6:	81fb      	strh	r3, [r7, #14]
 80017b8:	e078      	b.n	80018ac <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 80017ba:	f000 f909 	bl	80019d0 <ReturnTimeElapsed>
 80017be:	4603      	mov	r3, r0
 80017c0:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 80017c2:	79fa      	ldrb	r2, [r7, #7]
 80017c4:	493e      	ldr	r1, [pc, #248]	@ (80018c0 <linkTimer+0x14c>)
 80017c6:	4613      	mov	r3, r2
 80017c8:	005b      	lsls	r3, r3, #1
 80017ca:	4413      	add	r3, r2
 80017cc:	00db      	lsls	r3, r3, #3
 80017ce:	440b      	add	r3, r1
 80017d0:	3308      	adds	r3, #8
 80017d2:	6819      	ldr	r1, [r3, #0]
 80017d4:	89fb      	ldrh	r3, [r7, #14]
 80017d6:	79fa      	ldrb	r2, [r7, #7]
 80017d8:	4419      	add	r1, r3
 80017da:	4839      	ldr	r0, [pc, #228]	@ (80018c0 <linkTimer+0x14c>)
 80017dc:	4613      	mov	r3, r2
 80017de:	005b      	lsls	r3, r3, #1
 80017e0:	4413      	add	r3, r2
 80017e2:	00db      	lsls	r3, r3, #3
 80017e4:	4403      	add	r3, r0
 80017e6:	3308      	adds	r3, #8
 80017e8:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 80017ea:	79fa      	ldrb	r2, [r7, #7]
 80017ec:	4934      	ldr	r1, [pc, #208]	@ (80018c0 <linkTimer+0x14c>)
 80017ee:	4613      	mov	r3, r2
 80017f0:	005b      	lsls	r3, r3, #1
 80017f2:	4413      	add	r3, r2
 80017f4:	00db      	lsls	r3, r3, #3
 80017f6:	440b      	add	r3, r1
 80017f8:	3308      	adds	r3, #8
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 80017fe:	4b2e      	ldr	r3, [pc, #184]	@ (80018b8 <linkTimer+0x144>)
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	b2db      	uxtb	r3, r3
 8001804:	4619      	mov	r1, r3
 8001806:	4a2e      	ldr	r2, [pc, #184]	@ (80018c0 <linkTimer+0x14c>)
 8001808:	460b      	mov	r3, r1
 800180a:	005b      	lsls	r3, r3, #1
 800180c:	440b      	add	r3, r1
 800180e:	00db      	lsls	r3, r3, #3
 8001810:	4413      	add	r3, r2
 8001812:	3308      	adds	r3, #8
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	68ba      	ldr	r2, [r7, #8]
 8001818:	429a      	cmp	r2, r3
 800181a:	d337      	bcc.n	800188c <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 800181c:	4b26      	ldr	r3, [pc, #152]	@ (80018b8 <linkTimer+0x144>)
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8001822:	7b7a      	ldrb	r2, [r7, #13]
 8001824:	4926      	ldr	r1, [pc, #152]	@ (80018c0 <linkTimer+0x14c>)
 8001826:	4613      	mov	r3, r2
 8001828:	005b      	lsls	r3, r3, #1
 800182a:	4413      	add	r3, r2
 800182c:	00db      	lsls	r3, r3, #3
 800182e:	440b      	add	r3, r1
 8001830:	3315      	adds	r3, #21
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001836:	e013      	b.n	8001860 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8001838:	7b7a      	ldrb	r2, [r7, #13]
 800183a:	4921      	ldr	r1, [pc, #132]	@ (80018c0 <linkTimer+0x14c>)
 800183c:	4613      	mov	r3, r2
 800183e:	005b      	lsls	r3, r3, #1
 8001840:	4413      	add	r3, r2
 8001842:	00db      	lsls	r3, r3, #3
 8001844:	440b      	add	r3, r1
 8001846:	3315      	adds	r3, #21
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 800184c:	7b7a      	ldrb	r2, [r7, #13]
 800184e:	491c      	ldr	r1, [pc, #112]	@ (80018c0 <linkTimer+0x14c>)
 8001850:	4613      	mov	r3, r2
 8001852:	005b      	lsls	r3, r3, #1
 8001854:	4413      	add	r3, r2
 8001856:	00db      	lsls	r3, r3, #3
 8001858:	440b      	add	r3, r1
 800185a:	3315      	adds	r3, #21
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001860:	7b3b      	ldrb	r3, [r7, #12]
 8001862:	2b06      	cmp	r3, #6
 8001864:	d00b      	beq.n	800187e <linkTimer+0x10a>
 8001866:	7b3a      	ldrb	r2, [r7, #12]
 8001868:	4915      	ldr	r1, [pc, #84]	@ (80018c0 <linkTimer+0x14c>)
 800186a:	4613      	mov	r3, r2
 800186c:	005b      	lsls	r3, r3, #1
 800186e:	4413      	add	r3, r2
 8001870:	00db      	lsls	r3, r3, #3
 8001872:	440b      	add	r3, r1
 8001874:	3308      	adds	r3, #8
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	68ba      	ldr	r2, [r7, #8]
 800187a:	429a      	cmp	r2, r3
 800187c:	d2dc      	bcs.n	8001838 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 800187e:	7b7a      	ldrb	r2, [r7, #13]
 8001880:	79fb      	ldrb	r3, [r7, #7]
 8001882:	4611      	mov	r1, r2
 8001884:	4618      	mov	r0, r3
 8001886:	f7ff fecf 	bl	8001628 <LinkTimerAfter>
 800188a:	e00f      	b.n	80018ac <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 800188c:	4b0a      	ldr	r3, [pc, #40]	@ (80018b8 <linkTimer+0x144>)
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	b2da      	uxtb	r2, r3
 8001892:	79fb      	ldrb	r3, [r7, #7]
 8001894:	4611      	mov	r1, r2
 8001896:	4618      	mov	r0, r3
 8001898:	f7ff ff0c 	bl	80016b4 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 800189c:	4b06      	ldr	r3, [pc, #24]	@ (80018b8 <linkTimer+0x144>)
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	b2da      	uxtb	r2, r3
 80018a2:	4b06      	ldr	r3, [pc, #24]	@ (80018bc <linkTimer+0x148>)
 80018a4:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 80018a6:	4a04      	ldr	r2, [pc, #16]	@ (80018b8 <linkTimer+0x144>)
 80018a8:	79fb      	ldrb	r3, [r7, #7]
 80018aa:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 80018ac:	89fb      	ldrh	r3, [r7, #14]
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3710      	adds	r7, #16
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	20000168 	.word	0x20000168
 80018bc:	20000169 	.word	0x20000169
 80018c0:	200000d8 	.word	0x200000d8
 80018c4:	2000016c 	.word	0x2000016c

080018c8 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b085      	sub	sp, #20
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	4603      	mov	r3, r0
 80018d0:	460a      	mov	r2, r1
 80018d2:	71fb      	strb	r3, [r7, #7]
 80018d4:	4613      	mov	r3, r2
 80018d6:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 80018d8:	4b39      	ldr	r3, [pc, #228]	@ (80019c0 <UnlinkTimer+0xf8>)
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	79fa      	ldrb	r2, [r7, #7]
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d111      	bne.n	8001908 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 80018e4:	4b36      	ldr	r3, [pc, #216]	@ (80019c0 <UnlinkTimer+0xf8>)
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	b2da      	uxtb	r2, r3
 80018ea:	4b36      	ldr	r3, [pc, #216]	@ (80019c4 <UnlinkTimer+0xfc>)
 80018ec:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 80018ee:	79fa      	ldrb	r2, [r7, #7]
 80018f0:	4935      	ldr	r1, [pc, #212]	@ (80019c8 <UnlinkTimer+0x100>)
 80018f2:	4613      	mov	r3, r2
 80018f4:	005b      	lsls	r3, r3, #1
 80018f6:	4413      	add	r3, r2
 80018f8:	00db      	lsls	r3, r3, #3
 80018fa:	440b      	add	r3, r1
 80018fc:	3315      	adds	r3, #21
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	b2da      	uxtb	r2, r3
 8001902:	4b2f      	ldr	r3, [pc, #188]	@ (80019c0 <UnlinkTimer+0xf8>)
 8001904:	701a      	strb	r2, [r3, #0]
 8001906:	e03e      	b.n	8001986 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8001908:	79fa      	ldrb	r2, [r7, #7]
 800190a:	492f      	ldr	r1, [pc, #188]	@ (80019c8 <UnlinkTimer+0x100>)
 800190c:	4613      	mov	r3, r2
 800190e:	005b      	lsls	r3, r3, #1
 8001910:	4413      	add	r3, r2
 8001912:	00db      	lsls	r3, r3, #3
 8001914:	440b      	add	r3, r1
 8001916:	3314      	adds	r3, #20
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 800191c:	79fa      	ldrb	r2, [r7, #7]
 800191e:	492a      	ldr	r1, [pc, #168]	@ (80019c8 <UnlinkTimer+0x100>)
 8001920:	4613      	mov	r3, r2
 8001922:	005b      	lsls	r3, r3, #1
 8001924:	4413      	add	r3, r2
 8001926:	00db      	lsls	r3, r3, #3
 8001928:	440b      	add	r3, r1
 800192a:	3315      	adds	r3, #21
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8001930:	79f9      	ldrb	r1, [r7, #7]
 8001932:	7bfa      	ldrb	r2, [r7, #15]
 8001934:	4824      	ldr	r0, [pc, #144]	@ (80019c8 <UnlinkTimer+0x100>)
 8001936:	460b      	mov	r3, r1
 8001938:	005b      	lsls	r3, r3, #1
 800193a:	440b      	add	r3, r1
 800193c:	00db      	lsls	r3, r3, #3
 800193e:	4403      	add	r3, r0
 8001940:	3315      	adds	r3, #21
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	b2d8      	uxtb	r0, r3
 8001946:	4920      	ldr	r1, [pc, #128]	@ (80019c8 <UnlinkTimer+0x100>)
 8001948:	4613      	mov	r3, r2
 800194a:	005b      	lsls	r3, r3, #1
 800194c:	4413      	add	r3, r2
 800194e:	00db      	lsls	r3, r3, #3
 8001950:	440b      	add	r3, r1
 8001952:	3315      	adds	r3, #21
 8001954:	4602      	mov	r2, r0
 8001956:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001958:	7bbb      	ldrb	r3, [r7, #14]
 800195a:	2b06      	cmp	r3, #6
 800195c:	d013      	beq.n	8001986 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 800195e:	79f9      	ldrb	r1, [r7, #7]
 8001960:	7bba      	ldrb	r2, [r7, #14]
 8001962:	4819      	ldr	r0, [pc, #100]	@ (80019c8 <UnlinkTimer+0x100>)
 8001964:	460b      	mov	r3, r1
 8001966:	005b      	lsls	r3, r3, #1
 8001968:	440b      	add	r3, r1
 800196a:	00db      	lsls	r3, r3, #3
 800196c:	4403      	add	r3, r0
 800196e:	3314      	adds	r3, #20
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	b2d8      	uxtb	r0, r3
 8001974:	4914      	ldr	r1, [pc, #80]	@ (80019c8 <UnlinkTimer+0x100>)
 8001976:	4613      	mov	r3, r2
 8001978:	005b      	lsls	r3, r3, #1
 800197a:	4413      	add	r3, r2
 800197c:	00db      	lsls	r3, r3, #3
 800197e:	440b      	add	r3, r1
 8001980:	3314      	adds	r3, #20
 8001982:	4602      	mov	r2, r0
 8001984:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8001986:	79fa      	ldrb	r2, [r7, #7]
 8001988:	490f      	ldr	r1, [pc, #60]	@ (80019c8 <UnlinkTimer+0x100>)
 800198a:	4613      	mov	r3, r2
 800198c:	005b      	lsls	r3, r3, #1
 800198e:	4413      	add	r3, r2
 8001990:	00db      	lsls	r3, r3, #3
 8001992:	440b      	add	r3, r1
 8001994:	330c      	adds	r3, #12
 8001996:	2201      	movs	r2, #1
 8001998:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 800199a:	4b09      	ldr	r3, [pc, #36]	@ (80019c0 <UnlinkTimer+0xf8>)
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	2b06      	cmp	r3, #6
 80019a2:	d107      	bne.n	80019b4 <UnlinkTimer+0xec>
 80019a4:	79bb      	ldrb	r3, [r7, #6]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d104      	bne.n	80019b4 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80019aa:	4b08      	ldr	r3, [pc, #32]	@ (80019cc <UnlinkTimer+0x104>)
 80019ac:	f04f 32ff 	mov.w	r2, #4294967295
 80019b0:	601a      	str	r2, [r3, #0]
  }

  return;
 80019b2:	bf00      	nop
 80019b4:	bf00      	nop
}
 80019b6:	3714      	adds	r7, #20
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr
 80019c0:	20000168 	.word	0x20000168
 80019c4:	20000169 	.word	0x20000169
 80019c8:	200000d8 	.word	0x200000d8
 80019cc:	2000016c 	.word	0x2000016c

080019d0 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 80019d6:	4b1a      	ldr	r3, [pc, #104]	@ (8001a40 <ReturnTimeElapsed+0x70>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019de:	d026      	beq.n	8001a2e <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 80019e0:	f7ff fe02 	bl	80015e8 <ReadRtcSsrValue>
 80019e4:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 80019e6:	4b16      	ldr	r3, [pc, #88]	@ (8001a40 <ReturnTimeElapsed+0x70>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d805      	bhi.n	80019fc <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 80019f0:	4b13      	ldr	r3, [pc, #76]	@ (8001a40 <ReturnTimeElapsed+0x70>)
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	1ad3      	subs	r3, r2, r3
 80019f8:	607b      	str	r3, [r7, #4]
 80019fa:	e00a      	b.n	8001a12 <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 80019fc:	4b11      	ldr	r3, [pc, #68]	@ (8001a44 <ReturnTimeElapsed+0x74>)
 80019fe:	881b      	ldrh	r3, [r3, #0]
 8001a00:	461a      	mov	r2, r3
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8001a08:	4b0d      	ldr	r3, [pc, #52]	@ (8001a40 <ReturnTimeElapsed+0x70>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	683a      	ldr	r2, [r7, #0]
 8001a0e:	4413      	add	r3, r2
 8001a10:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8001a12:	4b0d      	ldr	r3, [pc, #52]	@ (8001a48 <ReturnTimeElapsed+0x78>)
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	461a      	mov	r2, r3
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	fb02 f303 	mul.w	r3, r2, r3
 8001a1e:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8001a20:	4b0a      	ldr	r3, [pc, #40]	@ (8001a4c <ReturnTimeElapsed+0x7c>)
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	461a      	mov	r2, r3
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	40d3      	lsrs	r3, r2
 8001a2a:	607b      	str	r3, [r7, #4]
 8001a2c:	e001      	b.n	8001a32 <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	b29b      	uxth	r3, r3
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3708      	adds	r7, #8
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	2000016c 	.word	0x2000016c
 8001a44:	20000174 	.word	0x20000174
 8001a48:	20000172 	.word	0x20000172
 8001a4c:	20000171 	.word	0x20000171

08001a50 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	4603      	mov	r3, r0
 8001a58:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 8001a5a:	88fb      	ldrh	r3, [r7, #6]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d108      	bne.n	8001a72 <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001a60:	f7ff fdc2 	bl	80015e8 <ReadRtcSsrValue>
 8001a64:	4603      	mov	r3, r0
 8001a66:	4a21      	ldr	r2, [pc, #132]	@ (8001aec <RestartWakeupCounter+0x9c>)
 8001a68:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001a6a:	2003      	movs	r0, #3
 8001a6c:	f001 fe29 	bl	80036c2 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8001a70:	e039      	b.n	8001ae6 <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8001a72:	88fb      	ldrh	r3, [r7, #6]
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d803      	bhi.n	8001a80 <RestartWakeupCounter+0x30>
 8001a78:	4b1d      	ldr	r3, [pc, #116]	@ (8001af0 <RestartWakeupCounter+0xa0>)
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d002      	beq.n	8001a86 <RestartWakeupCounter+0x36>
      Value -= 1;
 8001a80:	88fb      	ldrh	r3, [r7, #6]
 8001a82:	3b01      	subs	r3, #1
 8001a84:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001a86:	bf00      	nop
 8001a88:	4b1a      	ldr	r3, [pc, #104]	@ (8001af4 <RestartWakeupCounter+0xa4>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	68db      	ldr	r3, [r3, #12]
 8001a8e:	f003 0304 	and.w	r3, r3, #4
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d0f8      	beq.n	8001a88 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001a96:	4b17      	ldr	r3, [pc, #92]	@ (8001af4 <RestartWakeupCounter+0xa4>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	b2da      	uxtb	r2, r3
 8001a9e:	4b15      	ldr	r3, [pc, #84]	@ (8001af4 <RestartWakeupCounter+0xa4>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8001aa6:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001aa8:	4b13      	ldr	r3, [pc, #76]	@ (8001af8 <RestartWakeupCounter+0xa8>)
 8001aaa:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001aae:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001ab0:	2003      	movs	r0, #3
 8001ab2:	f001 fe14 	bl	80036de <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8001ab6:	4b11      	ldr	r3, [pc, #68]	@ (8001afc <RestartWakeupCounter+0xac>)
 8001ab8:	695b      	ldr	r3, [r3, #20]
 8001aba:	0c1b      	lsrs	r3, r3, #16
 8001abc:	041b      	lsls	r3, r3, #16
 8001abe:	88fa      	ldrh	r2, [r7, #6]
 8001ac0:	490e      	ldr	r1, [pc, #56]	@ (8001afc <RestartWakeupCounter+0xac>)
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001ac6:	f7ff fd8f 	bl	80015e8 <ReadRtcSsrValue>
 8001aca:	4603      	mov	r3, r0
 8001acc:	4a07      	ldr	r2, [pc, #28]	@ (8001aec <RestartWakeupCounter+0x9c>)
 8001ace:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8001ad0:	4b08      	ldr	r3, [pc, #32]	@ (8001af4 <RestartWakeupCounter+0xa4>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	689a      	ldr	r2, [r3, #8]
 8001ad6:	4b07      	ldr	r3, [pc, #28]	@ (8001af4 <RestartWakeupCounter+0xa4>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001ade:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8001ae0:	f3af 8000 	nop.w
  return ;
 8001ae4:	bf00      	nop
}
 8001ae6:	3708      	adds	r7, #8
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	2000016c 	.word	0x2000016c
 8001af0:	20000171 	.word	0x20000171
 8001af4:	200001cc 	.word	0x200001cc
 8001af8:	58000800 	.word	0x58000800
 8001afc:	40002800 	.word	0x40002800

08001b00 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b084      	sub	sp, #16
 8001b04:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001b06:	4b45      	ldr	r3, [pc, #276]	@ (8001c1c <RescheduleTimerList+0x11c>)
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b12:	d107      	bne.n	8001b24 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8001b14:	bf00      	nop
 8001b16:	4b42      	ldr	r3, [pc, #264]	@ (8001c20 <RescheduleTimerList+0x120>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	f003 0304 	and.w	r3, r3, #4
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d1f8      	bne.n	8001b16 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8001b24:	4b3e      	ldr	r3, [pc, #248]	@ (8001c20 <RescheduleTimerList+0x120>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	689a      	ldr	r2, [r3, #8]
 8001b2a:	4b3d      	ldr	r3, [pc, #244]	@ (8001c20 <RescheduleTimerList+0x120>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001b32:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8001b34:	4b3b      	ldr	r3, [pc, #236]	@ (8001c24 <RescheduleTimerList+0x124>)
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8001b3a:	7bfa      	ldrb	r2, [r7, #15]
 8001b3c:	493a      	ldr	r1, [pc, #232]	@ (8001c28 <RescheduleTimerList+0x128>)
 8001b3e:	4613      	mov	r3, r2
 8001b40:	005b      	lsls	r3, r3, #1
 8001b42:	4413      	add	r3, r2
 8001b44:	00db      	lsls	r3, r3, #3
 8001b46:	440b      	add	r3, r1
 8001b48:	3308      	adds	r3, #8
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8001b4e:	f7ff ff3f 	bl	80019d0 <ReturnTimeElapsed>
 8001b52:	4603      	mov	r3, r0
 8001b54:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8001b56:	88fb      	ldrh	r3, [r7, #6]
 8001b58:	68ba      	ldr	r2, [r7, #8]
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	d205      	bcs.n	8001b6a <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001b62:	4b32      	ldr	r3, [pc, #200]	@ (8001c2c <RescheduleTimerList+0x12c>)
 8001b64:	2201      	movs	r2, #1
 8001b66:	701a      	strb	r2, [r3, #0]
 8001b68:	e04d      	b.n	8001c06 <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8001b6a:	88fb      	ldrh	r3, [r7, #6]
 8001b6c:	4a30      	ldr	r2, [pc, #192]	@ (8001c30 <RescheduleTimerList+0x130>)
 8001b6e:	8812      	ldrh	r2, [r2, #0]
 8001b70:	b292      	uxth	r2, r2
 8001b72:	4413      	add	r3, r2
 8001b74:	461a      	mov	r2, r3
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d906      	bls.n	8001b8a <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8001b7c:	4b2c      	ldr	r3, [pc, #176]	@ (8001c30 <RescheduleTimerList+0x130>)
 8001b7e:	881b      	ldrh	r3, [r3, #0]
 8001b80:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8001b82:	4b2a      	ldr	r3, [pc, #168]	@ (8001c2c <RescheduleTimerList+0x12c>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	701a      	strb	r2, [r3, #0]
 8001b88:	e03d      	b.n	8001c06 <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	b29a      	uxth	r2, r3
 8001b8e:	88fb      	ldrh	r3, [r7, #6]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001b94:	4b25      	ldr	r3, [pc, #148]	@ (8001c2c <RescheduleTimerList+0x12c>)
 8001b96:	2201      	movs	r2, #1
 8001b98:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001b9a:	e034      	b.n	8001c06 <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8001b9c:	7bfa      	ldrb	r2, [r7, #15]
 8001b9e:	4922      	ldr	r1, [pc, #136]	@ (8001c28 <RescheduleTimerList+0x128>)
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	005b      	lsls	r3, r3, #1
 8001ba4:	4413      	add	r3, r2
 8001ba6:	00db      	lsls	r3, r3, #3
 8001ba8:	440b      	add	r3, r1
 8001baa:	3308      	adds	r3, #8
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	88fb      	ldrh	r3, [r7, #6]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d20a      	bcs.n	8001bca <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8001bb4:	7bfa      	ldrb	r2, [r7, #15]
 8001bb6:	491c      	ldr	r1, [pc, #112]	@ (8001c28 <RescheduleTimerList+0x128>)
 8001bb8:	4613      	mov	r3, r2
 8001bba:	005b      	lsls	r3, r3, #1
 8001bbc:	4413      	add	r3, r2
 8001bbe:	00db      	lsls	r3, r3, #3
 8001bc0:	440b      	add	r3, r1
 8001bc2:	3308      	adds	r3, #8
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	601a      	str	r2, [r3, #0]
 8001bc8:	e013      	b.n	8001bf2 <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8001bca:	7bfa      	ldrb	r2, [r7, #15]
 8001bcc:	4916      	ldr	r1, [pc, #88]	@ (8001c28 <RescheduleTimerList+0x128>)
 8001bce:	4613      	mov	r3, r2
 8001bd0:	005b      	lsls	r3, r3, #1
 8001bd2:	4413      	add	r3, r2
 8001bd4:	00db      	lsls	r3, r3, #3
 8001bd6:	440b      	add	r3, r1
 8001bd8:	3308      	adds	r3, #8
 8001bda:	6819      	ldr	r1, [r3, #0]
 8001bdc:	88fb      	ldrh	r3, [r7, #6]
 8001bde:	7bfa      	ldrb	r2, [r7, #15]
 8001be0:	1ac9      	subs	r1, r1, r3
 8001be2:	4811      	ldr	r0, [pc, #68]	@ (8001c28 <RescheduleTimerList+0x128>)
 8001be4:	4613      	mov	r3, r2
 8001be6:	005b      	lsls	r3, r3, #1
 8001be8:	4413      	add	r3, r2
 8001bea:	00db      	lsls	r3, r3, #3
 8001bec:	4403      	add	r3, r0
 8001bee:	3308      	adds	r3, #8
 8001bf0:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8001bf2:	7bfa      	ldrb	r2, [r7, #15]
 8001bf4:	490c      	ldr	r1, [pc, #48]	@ (8001c28 <RescheduleTimerList+0x128>)
 8001bf6:	4613      	mov	r3, r2
 8001bf8:	005b      	lsls	r3, r3, #1
 8001bfa:	4413      	add	r3, r2
 8001bfc:	00db      	lsls	r3, r3, #3
 8001bfe:	440b      	add	r3, r1
 8001c00:	3315      	adds	r3, #21
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001c06:	7bfb      	ldrb	r3, [r7, #15]
 8001c08:	2b06      	cmp	r3, #6
 8001c0a:	d1c7      	bne.n	8001b9c <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8001c0c:	89bb      	ldrh	r3, [r7, #12]
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f7ff ff1e 	bl	8001a50 <RestartWakeupCounter>

  return ;
 8001c14:	bf00      	nop
}
 8001c16:	3710      	adds	r7, #16
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	40002800 	.word	0x40002800
 8001c20:	200001cc 	.word	0x200001cc
 8001c24:	20000168 	.word	0x20000168
 8001c28:	200000d8 	.word	0x200000d8
 8001c2c:	20000170 	.word	0x20000170
 8001c30:	20000176 	.word	0x20000176

08001c34 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b08a      	sub	sp, #40	@ 0x28
 8001c38:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001c3a:	f3ef 8310 	mrs	r3, PRIMASK
 8001c3e:	617b      	str	r3, [r7, #20]
  return(result);
 8001c40:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001c42:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8001c44:	b672      	cpsid	i
}
 8001c46:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001c48:	4b59      	ldr	r3, [pc, #356]	@ (8001db0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	22ca      	movs	r2, #202	@ 0xca
 8001c4e:	625a      	str	r2, [r3, #36]	@ 0x24
 8001c50:	4b57      	ldr	r3, [pc, #348]	@ (8001db0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	2253      	movs	r2, #83	@ 0x53
 8001c56:	625a      	str	r2, [r3, #36]	@ 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8001c58:	4b55      	ldr	r3, [pc, #340]	@ (8001db0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	689a      	ldr	r2, [r3, #8]
 8001c5e:	4b54      	ldr	r3, [pc, #336]	@ (8001db0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001c66:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8001c68:	4b52      	ldr	r3, [pc, #328]	@ (8001db4 <HW_TS_RTC_Wakeup_Handler+0x180>)
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8001c70:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001c74:	4950      	ldr	r1, [pc, #320]	@ (8001db8 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001c76:	4613      	mov	r3, r2
 8001c78:	005b      	lsls	r3, r3, #1
 8001c7a:	4413      	add	r3, r2
 8001c7c:	00db      	lsls	r3, r3, #3
 8001c7e:	440b      	add	r3, r1
 8001c80:	330c      	adds	r3, #12
 8001c82:	781b      	ldrb	r3, [r3, #0]
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	d16e      	bne.n	8001d68 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8001c8a:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001c8e:	494a      	ldr	r1, [pc, #296]	@ (8001db8 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001c90:	4613      	mov	r3, r2
 8001c92:	005b      	lsls	r3, r3, #1
 8001c94:	4413      	add	r3, r2
 8001c96:	00db      	lsls	r3, r3, #3
 8001c98:	440b      	add	r3, r1
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8001c9e:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001ca2:	4945      	ldr	r1, [pc, #276]	@ (8001db8 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001ca4:	4613      	mov	r3, r2
 8001ca6:	005b      	lsls	r3, r3, #1
 8001ca8:	4413      	add	r3, r2
 8001caa:	00db      	lsls	r3, r3, #3
 8001cac:	440b      	add	r3, r1
 8001cae:	3310      	adds	r3, #16
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8001cb4:	4b41      	ldr	r3, [pc, #260]	@ (8001dbc <HW_TS_RTC_Wakeup_Handler+0x188>)
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d04c      	beq.n	8001d58 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8001cbe:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001cc2:	493d      	ldr	r1, [pc, #244]	@ (8001db8 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	005b      	lsls	r3, r3, #1
 8001cc8:	4413      	add	r3, r2
 8001cca:	00db      	lsls	r3, r3, #3
 8001ccc:	440b      	add	r3, r1
 8001cce:	330d      	adds	r3, #13
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d124      	bne.n	8001d22 <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8001cd8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001cdc:	2101      	movs	r1, #1
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f7ff fdf2 	bl	80018c8 <UnlinkTimer>
 8001ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ce6:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	f383 8810 	msr	PRIMASK, r3
}
 8001cee:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8001cf0:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001cf4:	4930      	ldr	r1, [pc, #192]	@ (8001db8 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001cf6:	4613      	mov	r3, r2
 8001cf8:	005b      	lsls	r3, r3, #1
 8001cfa:	4413      	add	r3, r2
 8001cfc:	00db      	lsls	r3, r3, #3
 8001cfe:	440b      	add	r3, r1
 8001d00:	3304      	adds	r3, #4
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001d08:	4611      	mov	r1, r2
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f000 fa32 	bl	8002174 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001d10:	4b27      	ldr	r3, [pc, #156]	@ (8001db0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	22ca      	movs	r2, #202	@ 0xca
 8001d16:	625a      	str	r2, [r3, #36]	@ 0x24
 8001d18:	4b25      	ldr	r3, [pc, #148]	@ (8001db0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	2253      	movs	r2, #83	@ 0x53
 8001d1e:	625a      	str	r2, [r3, #36]	@ 0x24
 8001d20:	e012      	b.n	8001d48 <HW_TS_RTC_Wakeup_Handler+0x114>
 8001d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d24:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	f383 8810 	msr	PRIMASK, r3
}
 8001d2c:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8001d2e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001d32:	4618      	mov	r0, r3
 8001d34:	f000 f99a 	bl	800206c <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001d38:	4b1d      	ldr	r3, [pc, #116]	@ (8001db0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	22ca      	movs	r2, #202	@ 0xca
 8001d3e:	625a      	str	r2, [r3, #36]	@ 0x24
 8001d40:	4b1b      	ldr	r3, [pc, #108]	@ (8001db0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	2253      	movs	r2, #83	@ 0x53
 8001d46:	625a      	str	r2, [r3, #36]	@ 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8001d48:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001d4c:	69fa      	ldr	r2, [r7, #28]
 8001d4e:	4619      	mov	r1, r3
 8001d50:	69b8      	ldr	r0, [r7, #24]
 8001d52:	f000 fa95 	bl	8002280 <HW_TS_RTC_Int_AppNot>
 8001d56:	e022      	b.n	8001d9e <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 8001d58:	f7ff fed2 	bl	8001b00 <RescheduleTimerList>
 8001d5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d5e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	f383 8810 	msr	PRIMASK, r3
}
 8001d66:	e01a      	b.n	8001d9e <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001d68:	bf00      	nop
 8001d6a:	4b11      	ldr	r3, [pc, #68]	@ (8001db0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	f003 0304 	and.w	r3, r3, #4
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d0f8      	beq.n	8001d6a <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001d78:	4b0d      	ldr	r3, [pc, #52]	@ (8001db0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	68db      	ldr	r3, [r3, #12]
 8001d7e:	b2da      	uxtb	r2, r3
 8001d80:	4b0b      	ldr	r3, [pc, #44]	@ (8001db0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8001d88:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001d8a:	4b0d      	ldr	r3, [pc, #52]	@ (8001dc0 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001d8c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001d90:	60da      	str	r2, [r3, #12]
 8001d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d94:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	f383 8810 	msr	PRIMASK, r3
}
 8001d9c:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001d9e:	4b04      	ldr	r3, [pc, #16]	@ (8001db0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	22ff      	movs	r2, #255	@ 0xff
 8001da4:	625a      	str	r2, [r3, #36]	@ 0x24

  return;
 8001da6:	bf00      	nop
}
 8001da8:	3728      	adds	r7, #40	@ 0x28
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	200001cc 	.word	0x200001cc
 8001db4:	20000168 	.word	0x20000168
 8001db8:	200000d8 	.word	0x200000d8
 8001dbc:	20000170 	.word	0x20000170
 8001dc0:	58000800 	.word	0x58000800

08001dc4 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b088      	sub	sp, #32
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	4603      	mov	r3, r0
 8001dcc:	6039      	str	r1, [r7, #0]
 8001dce:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001dd0:	4b5e      	ldr	r3, [pc, #376]	@ (8001f4c <HW_TS_Init+0x188>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	22ca      	movs	r2, #202	@ 0xca
 8001dd6:	625a      	str	r2, [r3, #36]	@ 0x24
 8001dd8:	4b5c      	ldr	r3, [pc, #368]	@ (8001f4c <HW_TS_Init+0x188>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	2253      	movs	r2, #83	@ 0x53
 8001dde:	625a      	str	r2, [r3, #36]	@ 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001de0:	4b5b      	ldr	r3, [pc, #364]	@ (8001f50 <HW_TS_Init+0x18c>)
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	4a5a      	ldr	r2, [pc, #360]	@ (8001f50 <HW_TS_Init+0x18c>)
 8001de6:	f043 0320 	orr.w	r3, r3, #32
 8001dea:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8001dec:	4b58      	ldr	r3, [pc, #352]	@ (8001f50 <HW_TS_Init+0x18c>)
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	f003 0307 	and.w	r3, r3, #7
 8001df6:	b2db      	uxtb	r3, r3
 8001df8:	f1c3 0304 	rsb	r3, r3, #4
 8001dfc:	b2da      	uxtb	r2, r3
 8001dfe:	4b55      	ldr	r3, [pc, #340]	@ (8001f54 <HW_TS_Init+0x190>)
 8001e00:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8001e02:	4b53      	ldr	r3, [pc, #332]	@ (8001f50 <HW_TS_Init+0x18c>)
 8001e04:	691b      	ldr	r3, [r3, #16]
 8001e06:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001e0a:	f44f 02fe 	mov.w	r2, #8323072	@ 0x7f0000
 8001e0e:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e10:	693a      	ldr	r2, [r7, #16]
 8001e12:	fa92 f2a2 	rbit	r2, r2
 8001e16:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001e18:	68fa      	ldr	r2, [r7, #12]
 8001e1a:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001e1c:	697a      	ldr	r2, [r7, #20]
 8001e1e:	2a00      	cmp	r2, #0
 8001e20:	d101      	bne.n	8001e26 <HW_TS_Init+0x62>
  {
    return 32U;
 8001e22:	2220      	movs	r2, #32
 8001e24:	e003      	b.n	8001e2e <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 8001e26:	697a      	ldr	r2, [r7, #20]
 8001e28:	fab2 f282 	clz	r2, r2
 8001e2c:	b2d2      	uxtb	r2, r2
 8001e2e:	40d3      	lsrs	r3, r2
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	3301      	adds	r3, #1
 8001e34:	b2da      	uxtb	r2, r3
 8001e36:	4b48      	ldr	r3, [pc, #288]	@ (8001f58 <HW_TS_Init+0x194>)
 8001e38:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8001e3a:	4b45      	ldr	r3, [pc, #276]	@ (8001f50 <HW_TS_Init+0x18c>)
 8001e3c:	691b      	ldr	r3, [r3, #16]
 8001e3e:	b29b      	uxth	r3, r3
 8001e40:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001e44:	b29b      	uxth	r3, r3
 8001e46:	3301      	adds	r3, #1
 8001e48:	b29a      	uxth	r2, r3
 8001e4a:	4b44      	ldr	r3, [pc, #272]	@ (8001f5c <HW_TS_Init+0x198>)
 8001e4c:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8001e4e:	4b43      	ldr	r3, [pc, #268]	@ (8001f5c <HW_TS_Init+0x198>)
 8001e50:	881b      	ldrh	r3, [r3, #0]
 8001e52:	3b01      	subs	r3, #1
 8001e54:	4a40      	ldr	r2, [pc, #256]	@ (8001f58 <HW_TS_Init+0x194>)
 8001e56:	7812      	ldrb	r2, [r2, #0]
 8001e58:	fb02 f303 	mul.w	r3, r2, r3
 8001e5c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001e60:	4a3c      	ldr	r2, [pc, #240]	@ (8001f54 <HW_TS_Init+0x190>)
 8001e62:	7812      	ldrb	r2, [r2, #0]
 8001e64:	40d3      	lsrs	r3, r2
 8001e66:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8001e68:	69bb      	ldr	r3, [r7, #24]
 8001e6a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d904      	bls.n	8001e7c <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8001e72:	4b3b      	ldr	r3, [pc, #236]	@ (8001f60 <HW_TS_Init+0x19c>)
 8001e74:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001e78:	801a      	strh	r2, [r3, #0]
 8001e7a:	e003      	b.n	8001e84 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8001e7c:	69bb      	ldr	r3, [r7, #24]
 8001e7e:	b29a      	uxth	r2, r3
 8001e80:	4b37      	ldr	r3, [pc, #220]	@ (8001f60 <HW_TS_Init+0x19c>)
 8001e82:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001e84:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8001e88:	f7ff fb9c 	bl	80015c4 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001e8c:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8001e90:	f7ff fb84 	bl	800159c <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8001e94:	79fb      	ldrb	r3, [r7, #7]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d13d      	bne.n	8001f16 <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001e9a:	4b32      	ldr	r3, [pc, #200]	@ (8001f64 <HW_TS_Init+0x1a0>)
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001ea0:	4b31      	ldr	r3, [pc, #196]	@ (8001f68 <HW_TS_Init+0x1a4>)
 8001ea2:	f04f 32ff 	mov.w	r2, #4294967295
 8001ea6:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	77fb      	strb	r3, [r7, #31]
 8001eac:	e00c      	b.n	8001ec8 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8001eae:	7ffa      	ldrb	r2, [r7, #31]
 8001eb0:	492e      	ldr	r1, [pc, #184]	@ (8001f6c <HW_TS_Init+0x1a8>)
 8001eb2:	4613      	mov	r3, r2
 8001eb4:	005b      	lsls	r3, r3, #1
 8001eb6:	4413      	add	r3, r2
 8001eb8:	00db      	lsls	r3, r3, #3
 8001eba:	440b      	add	r3, r1
 8001ebc:	330c      	adds	r3, #12
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001ec2:	7ffb      	ldrb	r3, [r7, #31]
 8001ec4:	3301      	adds	r3, #1
 8001ec6:	77fb      	strb	r3, [r7, #31]
 8001ec8:	7ffb      	ldrb	r3, [r7, #31]
 8001eca:	2b05      	cmp	r3, #5
 8001ecc:	d9ef      	bls.n	8001eae <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8001ece:	4b28      	ldr	r3, [pc, #160]	@ (8001f70 <HW_TS_Init+0x1ac>)
 8001ed0:	2206      	movs	r2, #6
 8001ed2:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8001ed4:	4b1d      	ldr	r3, [pc, #116]	@ (8001f4c <HW_TS_Init+0x188>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	689a      	ldr	r2, [r3, #8]
 8001eda:	4b1c      	ldr	r3, [pc, #112]	@ (8001f4c <HW_TS_Init+0x188>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001ee2:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8001ee4:	4b19      	ldr	r3, [pc, #100]	@ (8001f4c <HW_TS_Init+0x188>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	68db      	ldr	r3, [r3, #12]
 8001eea:	b2da      	uxtb	r2, r3
 8001eec:	4b17      	ldr	r3, [pc, #92]	@ (8001f4c <HW_TS_Init+0x188>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8001ef4:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8001ef6:	4b1f      	ldr	r3, [pc, #124]	@ (8001f74 <HW_TS_Init+0x1b0>)
 8001ef8:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001efc:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8001efe:	2003      	movs	r0, #3
 8001f00:	f001 fbed 	bl	80036de <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8001f04:	4b11      	ldr	r3, [pc, #68]	@ (8001f4c <HW_TS_Init+0x188>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	689a      	ldr	r2, [r3, #8]
 8001f0a:	4b10      	ldr	r3, [pc, #64]	@ (8001f4c <HW_TS_Init+0x188>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001f12:	609a      	str	r2, [r3, #8]
 8001f14:	e009      	b.n	8001f2a <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 8001f16:	4b0d      	ldr	r3, [pc, #52]	@ (8001f4c <HW_TS_Init+0x188>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d002      	beq.n	8001f2a <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001f24:	2003      	movs	r0, #3
 8001f26:	f001 fbcc 	bl	80036c2 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001f2a:	4b08      	ldr	r3, [pc, #32]	@ (8001f4c <HW_TS_Init+0x188>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	22ff      	movs	r2, #255	@ 0xff
 8001f30:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8001f32:	2200      	movs	r2, #0
 8001f34:	2103      	movs	r1, #3
 8001f36:	2003      	movs	r0, #3
 8001f38:	f001 fb81 	bl	800363e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001f3c:	2003      	movs	r0, #3
 8001f3e:	f001 fb98 	bl	8003672 <HAL_NVIC_EnableIRQ>

  return;
 8001f42:	bf00      	nop
}
 8001f44:	3720      	adds	r7, #32
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	200001cc 	.word	0x200001cc
 8001f50:	40002800 	.word	0x40002800
 8001f54:	20000171 	.word	0x20000171
 8001f58:	20000172 	.word	0x20000172
 8001f5c:	20000174 	.word	0x20000174
 8001f60:	20000176 	.word	0x20000176
 8001f64:	20000170 	.word	0x20000170
 8001f68:	2000016c 	.word	0x2000016c
 8001f6c:	200000d8 	.word	0x200000d8
 8001f70:	20000168 	.word	0x20000168
 8001f74:	58000800 	.word	0x58000800

08001f78 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b08b      	sub	sp, #44	@ 0x2c
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	60f8      	str	r0, [r7, #12]
 8001f80:	60b9      	str	r1, [r7, #8]
 8001f82:	603b      	str	r3, [r7, #0]
 8001f84:	4613      	mov	r3, r2
 8001f86:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001f8e:	f3ef 8310 	mrs	r3, PRIMASK
 8001f92:	61fb      	str	r3, [r7, #28]
  return(result);
 8001f94:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001f96:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8001f98:	b672      	cpsid	i
}
 8001f9a:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8001f9c:	e004      	b.n	8001fa8 <HW_TS_Create+0x30>
  {
    loop++;
 8001f9e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8001fa8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001fac:	2b05      	cmp	r3, #5
 8001fae:	d80c      	bhi.n	8001fca <HW_TS_Create+0x52>
 8001fb0:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8001fb4:	492c      	ldr	r1, [pc, #176]	@ (8002068 <HW_TS_Create+0xf0>)
 8001fb6:	4613      	mov	r3, r2
 8001fb8:	005b      	lsls	r3, r3, #1
 8001fba:	4413      	add	r3, r2
 8001fbc:	00db      	lsls	r3, r3, #3
 8001fbe:	440b      	add	r3, r1
 8001fc0:	330c      	adds	r3, #12
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d1e9      	bne.n	8001f9e <HW_TS_Create+0x26>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001fca:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001fce:	2b06      	cmp	r3, #6
 8001fd0:	d038      	beq.n	8002044 <HW_TS_Create+0xcc>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 8001fd2:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8001fd6:	4924      	ldr	r1, [pc, #144]	@ (8002068 <HW_TS_Create+0xf0>)
 8001fd8:	4613      	mov	r3, r2
 8001fda:	005b      	lsls	r3, r3, #1
 8001fdc:	4413      	add	r3, r2
 8001fde:	00db      	lsls	r3, r3, #3
 8001fe0:	440b      	add	r3, r1
 8001fe2:	330c      	adds	r3, #12
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	701a      	strb	r2, [r3, #0]
 8001fe8:	6a3b      	ldr	r3, [r7, #32]
 8001fea:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001fec:	69bb      	ldr	r3, [r7, #24]
 8001fee:	f383 8810 	msr	PRIMASK, r3
}
 8001ff2:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 8001ff4:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8001ff8:	491b      	ldr	r1, [pc, #108]	@ (8002068 <HW_TS_Create+0xf0>)
 8001ffa:	4613      	mov	r3, r2
 8001ffc:	005b      	lsls	r3, r3, #1
 8001ffe:	4413      	add	r3, r2
 8002000:	00db      	lsls	r3, r3, #3
 8002002:	440b      	add	r3, r1
 8002004:	3310      	adds	r3, #16
 8002006:	68fa      	ldr	r2, [r7, #12]
 8002008:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 800200a:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800200e:	4916      	ldr	r1, [pc, #88]	@ (8002068 <HW_TS_Create+0xf0>)
 8002010:	4613      	mov	r3, r2
 8002012:	005b      	lsls	r3, r3, #1
 8002014:	4413      	add	r3, r2
 8002016:	00db      	lsls	r3, r3, #3
 8002018:	440b      	add	r3, r1
 800201a:	330d      	adds	r3, #13
 800201c:	79fa      	ldrb	r2, [r7, #7]
 800201e:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 8002020:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8002024:	4910      	ldr	r1, [pc, #64]	@ (8002068 <HW_TS_Create+0xf0>)
 8002026:	4613      	mov	r3, r2
 8002028:	005b      	lsls	r3, r3, #1
 800202a:	4413      	add	r3, r2
 800202c:	00db      	lsls	r3, r3, #3
 800202e:	440b      	add	r3, r1
 8002030:	683a      	ldr	r2, [r7, #0]
 8002032:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800203a:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 800203c:	2300      	movs	r3, #0
 800203e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002042:	e008      	b.n	8002056 <HW_TS_Create+0xde>
 8002044:	6a3b      	ldr	r3, [r7, #32]
 8002046:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	f383 8810 	msr	PRIMASK, r3
}
 800204e:	bf00      	nop
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 8002050:	2301      	movs	r3, #1
 8002052:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  return(localreturnstatus);
 8002056:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800205a:	4618      	mov	r0, r3
 800205c:	372c      	adds	r7, #44	@ 0x2c
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
 8002066:	bf00      	nop
 8002068:	200000d8 	.word	0x200000d8

0800206c <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b086      	sub	sp, #24
 8002070:	af00      	add	r7, sp, #0
 8002072:	4603      	mov	r3, r0
 8002074:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002076:	f3ef 8310 	mrs	r3, PRIMASK
 800207a:	60fb      	str	r3, [r7, #12]
  return(result);
 800207c:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800207e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002080:	b672      	cpsid	i
}
 8002082:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8002084:	2003      	movs	r0, #3
 8002086:	f001 fb02 	bl	800368e <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800208a:	4b34      	ldr	r3, [pc, #208]	@ (800215c <HW_TS_Stop+0xf0>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	22ca      	movs	r2, #202	@ 0xca
 8002090:	625a      	str	r2, [r3, #36]	@ 0x24
 8002092:	4b32      	ldr	r3, [pc, #200]	@ (800215c <HW_TS_Stop+0xf0>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	2253      	movs	r2, #83	@ 0x53
 8002098:	625a      	str	r2, [r3, #36]	@ 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800209a:	79fa      	ldrb	r2, [r7, #7]
 800209c:	4930      	ldr	r1, [pc, #192]	@ (8002160 <HW_TS_Stop+0xf4>)
 800209e:	4613      	mov	r3, r2
 80020a0:	005b      	lsls	r3, r3, #1
 80020a2:	4413      	add	r3, r2
 80020a4:	00db      	lsls	r3, r3, #3
 80020a6:	440b      	add	r3, r1
 80020a8:	330c      	adds	r3, #12
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d142      	bne.n	8002138 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 80020b2:	79fb      	ldrb	r3, [r7, #7]
 80020b4:	2100      	movs	r1, #0
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7ff fc06 	bl	80018c8 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 80020bc:	4b29      	ldr	r3, [pc, #164]	@ (8002164 <HW_TS_Stop+0xf8>)
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80020c2:	7cfb      	ldrb	r3, [r7, #19]
 80020c4:	2b06      	cmp	r3, #6
 80020c6:	d12f      	bne.n	8002128 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80020c8:	4b27      	ldr	r3, [pc, #156]	@ (8002168 <HW_TS_Stop+0xfc>)
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020d4:	d107      	bne.n	80020e6 <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 80020d6:	bf00      	nop
 80020d8:	4b20      	ldr	r3, [pc, #128]	@ (800215c <HW_TS_Stop+0xf0>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	68db      	ldr	r3, [r3, #12]
 80020de:	f003 0304 	and.w	r3, r3, #4
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d1f8      	bne.n	80020d8 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 80020e6:	4b1d      	ldr	r3, [pc, #116]	@ (800215c <HW_TS_Stop+0xf0>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	689a      	ldr	r2, [r3, #8]
 80020ec:	4b1b      	ldr	r3, [pc, #108]	@ (800215c <HW_TS_Stop+0xf0>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80020f4:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80020f6:	bf00      	nop
 80020f8:	4b18      	ldr	r3, [pc, #96]	@ (800215c <HW_TS_Stop+0xf0>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	68db      	ldr	r3, [r3, #12]
 80020fe:	f003 0304 	and.w	r3, r3, #4
 8002102:	2b00      	cmp	r3, #0
 8002104:	d0f8      	beq.n	80020f8 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8002106:	4b15      	ldr	r3, [pc, #84]	@ (800215c <HW_TS_Stop+0xf0>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	b2da      	uxtb	r2, r3
 800210e:	4b13      	ldr	r3, [pc, #76]	@ (800215c <HW_TS_Stop+0xf0>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8002116:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8002118:	4b14      	ldr	r3, [pc, #80]	@ (800216c <HW_TS_Stop+0x100>)
 800211a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800211e:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8002120:	2003      	movs	r0, #3
 8002122:	f001 fadc 	bl	80036de <HAL_NVIC_ClearPendingIRQ>
 8002126:	e007      	b.n	8002138 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8002128:	4b11      	ldr	r3, [pc, #68]	@ (8002170 <HW_TS_Stop+0x104>)
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	b2db      	uxtb	r3, r3
 800212e:	7cfa      	ldrb	r2, [r7, #19]
 8002130:	429a      	cmp	r2, r3
 8002132:	d001      	beq.n	8002138 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 8002134:	f7ff fce4 	bl	8001b00 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002138:	4b08      	ldr	r3, [pc, #32]	@ (800215c <HW_TS_Stop+0xf0>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	22ff      	movs	r2, #255	@ 0xff
 800213e:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002140:	2003      	movs	r0, #3
 8002142:	f001 fa96 	bl	8003672 <HAL_NVIC_EnableIRQ>
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	f383 8810 	msr	PRIMASK, r3
}
 8002150:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8002152:	bf00      	nop
}
 8002154:	3718      	adds	r7, #24
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	200001cc 	.word	0x200001cc
 8002160:	200000d8 	.word	0x200000d8
 8002164:	20000168 	.word	0x20000168
 8002168:	40002800 	.word	0x40002800
 800216c:	58000800 	.word	0x58000800
 8002170:	20000169 	.word	0x20000169

08002174 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b086      	sub	sp, #24
 8002178:	af00      	add	r7, sp, #0
 800217a:	4603      	mov	r3, r0
 800217c:	6039      	str	r1, [r7, #0]
 800217e:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8002180:	79fa      	ldrb	r2, [r7, #7]
 8002182:	493b      	ldr	r1, [pc, #236]	@ (8002270 <HW_TS_Start+0xfc>)
 8002184:	4613      	mov	r3, r2
 8002186:	005b      	lsls	r3, r3, #1
 8002188:	4413      	add	r3, r2
 800218a:	00db      	lsls	r3, r3, #3
 800218c:	440b      	add	r3, r1
 800218e:	330c      	adds	r3, #12
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	b2db      	uxtb	r3, r3
 8002194:	2b02      	cmp	r3, #2
 8002196:	d103      	bne.n	80021a0 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8002198:	79fb      	ldrb	r3, [r7, #7]
 800219a:	4618      	mov	r0, r3
 800219c:	f7ff ff66 	bl	800206c <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80021a0:	f3ef 8310 	mrs	r3, PRIMASK
 80021a4:	60fb      	str	r3, [r7, #12]
  return(result);
 80021a6:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80021a8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80021aa:	b672      	cpsid	i
}
 80021ac:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80021ae:	2003      	movs	r0, #3
 80021b0:	f001 fa6d 	bl	800368e <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80021b4:	4b2f      	ldr	r3, [pc, #188]	@ (8002274 <HW_TS_Start+0x100>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	22ca      	movs	r2, #202	@ 0xca
 80021ba:	625a      	str	r2, [r3, #36]	@ 0x24
 80021bc:	4b2d      	ldr	r3, [pc, #180]	@ (8002274 <HW_TS_Start+0x100>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	2253      	movs	r2, #83	@ 0x53
 80021c2:	625a      	str	r2, [r3, #36]	@ 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 80021c4:	79fa      	ldrb	r2, [r7, #7]
 80021c6:	492a      	ldr	r1, [pc, #168]	@ (8002270 <HW_TS_Start+0xfc>)
 80021c8:	4613      	mov	r3, r2
 80021ca:	005b      	lsls	r3, r3, #1
 80021cc:	4413      	add	r3, r2
 80021ce:	00db      	lsls	r3, r3, #3
 80021d0:	440b      	add	r3, r1
 80021d2:	330c      	adds	r3, #12
 80021d4:	2202      	movs	r2, #2
 80021d6:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 80021d8:	79fa      	ldrb	r2, [r7, #7]
 80021da:	4925      	ldr	r1, [pc, #148]	@ (8002270 <HW_TS_Start+0xfc>)
 80021dc:	4613      	mov	r3, r2
 80021de:	005b      	lsls	r3, r3, #1
 80021e0:	4413      	add	r3, r2
 80021e2:	00db      	lsls	r3, r3, #3
 80021e4:	440b      	add	r3, r1
 80021e6:	3308      	adds	r3, #8
 80021e8:	683a      	ldr	r2, [r7, #0]
 80021ea:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 80021ec:	79fa      	ldrb	r2, [r7, #7]
 80021ee:	4920      	ldr	r1, [pc, #128]	@ (8002270 <HW_TS_Start+0xfc>)
 80021f0:	4613      	mov	r3, r2
 80021f2:	005b      	lsls	r3, r3, #1
 80021f4:	4413      	add	r3, r2
 80021f6:	00db      	lsls	r3, r3, #3
 80021f8:	440b      	add	r3, r1
 80021fa:	3304      	adds	r3, #4
 80021fc:	683a      	ldr	r2, [r7, #0]
 80021fe:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8002200:	79fb      	ldrb	r3, [r7, #7]
 8002202:	4618      	mov	r0, r3
 8002204:	f7ff fab6 	bl	8001774 <linkTimer>
 8002208:	4603      	mov	r3, r0
 800220a:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 800220c:	4b1a      	ldr	r3, [pc, #104]	@ (8002278 <HW_TS_Start+0x104>)
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8002212:	4b1a      	ldr	r3, [pc, #104]	@ (800227c <HW_TS_Start+0x108>)
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	b2db      	uxtb	r3, r3
 8002218:	7c7a      	ldrb	r2, [r7, #17]
 800221a:	429a      	cmp	r2, r3
 800221c:	d002      	beq.n	8002224 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 800221e:	f7ff fc6f 	bl	8001b00 <RescheduleTimerList>
 8002222:	e013      	b.n	800224c <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8002224:	79fa      	ldrb	r2, [r7, #7]
 8002226:	4912      	ldr	r1, [pc, #72]	@ (8002270 <HW_TS_Start+0xfc>)
 8002228:	4613      	mov	r3, r2
 800222a:	005b      	lsls	r3, r3, #1
 800222c:	4413      	add	r3, r2
 800222e:	00db      	lsls	r3, r3, #3
 8002230:	440b      	add	r3, r1
 8002232:	3308      	adds	r3, #8
 8002234:	6819      	ldr	r1, [r3, #0]
 8002236:	8a7b      	ldrh	r3, [r7, #18]
 8002238:	79fa      	ldrb	r2, [r7, #7]
 800223a:	1ac9      	subs	r1, r1, r3
 800223c:	480c      	ldr	r0, [pc, #48]	@ (8002270 <HW_TS_Start+0xfc>)
 800223e:	4613      	mov	r3, r2
 8002240:	005b      	lsls	r3, r3, #1
 8002242:	4413      	add	r3, r2
 8002244:	00db      	lsls	r3, r3, #3
 8002246:	4403      	add	r3, r0
 8002248:	3308      	adds	r3, #8
 800224a:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800224c:	4b09      	ldr	r3, [pc, #36]	@ (8002274 <HW_TS_Start+0x100>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	22ff      	movs	r2, #255	@ 0xff
 8002252:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002254:	2003      	movs	r0, #3
 8002256:	f001 fa0c 	bl	8003672 <HAL_NVIC_EnableIRQ>
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	f383 8810 	msr	PRIMASK, r3
}
 8002264:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8002266:	bf00      	nop
}
 8002268:	3718      	adds	r7, #24
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	200000d8 	.word	0x200000d8
 8002274:	200001cc 	.word	0x200001cc
 8002278:	20000168 	.word	0x20000168
 800227c:	20000169 	.word	0x20000169

08002280 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b084      	sub	sp, #16
 8002284:	af00      	add	r7, sp, #0
 8002286:	60f8      	str	r0, [r7, #12]
 8002288:	460b      	mov	r3, r1
 800228a:	607a      	str	r2, [r7, #4]
 800228c:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4798      	blx	r3

  return;
 8002292:	bf00      	nop
}
 8002294:	3710      	adds	r7, #16
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
	...

0800229c <HW_UART_Transmit_DMA>:

    return hw_status;
}

hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b086      	sub	sp, #24
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	60b9      	str	r1, [r7, #8]
 80022a4:	607b      	str	r3, [r7, #4]
 80022a6:	4603      	mov	r3, r0
 80022a8:	73fb      	strb	r3, [r7, #15]
 80022aa:	4613      	mov	r3, r2
 80022ac:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef hal_status = HAL_OK;
 80022ae:	2300      	movs	r3, #0
 80022b0:	75fb      	strb	r3, [r7, #23]
    hw_status_t hw_status = hw_uart_ok;
 80022b2:	2300      	movs	r3, #0
 80022b4:	75bb      	strb	r3, [r7, #22]

    switch (hw_uart_id)
 80022b6:	7bfb      	ldrb	r3, [r7, #15]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d10e      	bne.n	80022da <HW_UART_Transmit_DMA+0x3e>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case hw_uart1:
            HW_huart1TxCb = cb;
 80022bc:	4a17      	ldr	r2, [pc, #92]	@ (800231c <HW_UART_Transmit_DMA+0x80>)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6013      	str	r3, [r2, #0]
            huart1.Instance = USART1;
 80022c2:	4b17      	ldr	r3, [pc, #92]	@ (8002320 <HW_UART_Transmit_DMA+0x84>)
 80022c4:	4a17      	ldr	r2, [pc, #92]	@ (8002324 <HW_UART_Transmit_DMA+0x88>)
 80022c6:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&huart1, p_data, size);
 80022c8:	89bb      	ldrh	r3, [r7, #12]
 80022ca:	461a      	mov	r2, r3
 80022cc:	68b9      	ldr	r1, [r7, #8]
 80022ce:	4814      	ldr	r0, [pc, #80]	@ (8002320 <HW_UART_Transmit_DMA+0x84>)
 80022d0:	f005 fe3e 	bl	8007f50 <HAL_UART_Transmit_DMA>
 80022d4:	4603      	mov	r3, r0
 80022d6:	75fb      	strb	r3, [r7, #23]
            break;
 80022d8:	e000      	b.n	80022dc <HW_UART_Transmit_DMA+0x40>
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
            break;
#endif

        default:
            break;
 80022da:	bf00      	nop
    }

    switch (hal_status)
 80022dc:	7dfb      	ldrb	r3, [r7, #23]
 80022de:	2b03      	cmp	r3, #3
 80022e0:	d816      	bhi.n	8002310 <HW_UART_Transmit_DMA+0x74>
 80022e2:	a201      	add	r2, pc, #4	@ (adr r2, 80022e8 <HW_UART_Transmit_DMA+0x4c>)
 80022e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022e8:	080022f9 	.word	0x080022f9
 80022ec:	080022ff 	.word	0x080022ff
 80022f0:	08002305 	.word	0x08002305
 80022f4:	0800230b 	.word	0x0800230b
    {
        case HAL_OK:
            hw_status = hw_uart_ok;
 80022f8:	2300      	movs	r3, #0
 80022fa:	75bb      	strb	r3, [r7, #22]
            break;
 80022fc:	e009      	b.n	8002312 <HW_UART_Transmit_DMA+0x76>

        case HAL_ERROR:
            hw_status = hw_uart_error;
 80022fe:	2301      	movs	r3, #1
 8002300:	75bb      	strb	r3, [r7, #22]
            break;
 8002302:	e006      	b.n	8002312 <HW_UART_Transmit_DMA+0x76>

        case HAL_BUSY:
            hw_status = hw_uart_busy;
 8002304:	2302      	movs	r3, #2
 8002306:	75bb      	strb	r3, [r7, #22]
            break;
 8002308:	e003      	b.n	8002312 <HW_UART_Transmit_DMA+0x76>

        case HAL_TIMEOUT:
            hw_status = hw_uart_to;
 800230a:	2303      	movs	r3, #3
 800230c:	75bb      	strb	r3, [r7, #22]
            break;
 800230e:	e000      	b.n	8002312 <HW_UART_Transmit_DMA+0x76>

        default:
            break;
 8002310:	bf00      	nop
    }

    return hw_status;
 8002312:	7dbb      	ldrb	r3, [r7, #22]
}
 8002314:	4618      	mov	r0, r3
 8002316:	3718      	adds	r7, #24
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}
 800231c:	20000178 	.word	0x20000178
 8002320:	200001f0 	.word	0x200001f0
 8002324:	40013800 	.word	0x40013800

08002328 <HAL_UART_TxCpltCallback>:

    return;
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	461a      	mov	r2, r3
 8002336:	4b09      	ldr	r3, [pc, #36]	@ (800235c <HAL_UART_TxCpltCallback+0x34>)
 8002338:	429a      	cmp	r2, r3
 800233a:	d107      	bne.n	800234c <HAL_UART_TxCpltCallback+0x24>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1TxCb)
 800233c:	4b08      	ldr	r3, [pc, #32]	@ (8002360 <HAL_UART_TxCpltCallback+0x38>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d005      	beq.n	8002350 <HAL_UART_TxCpltCallback+0x28>
            {
                HW_huart1TxCb();
 8002344:	4b06      	ldr	r3, [pc, #24]	@ (8002360 <HAL_UART_TxCpltCallback+0x38>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4798      	blx	r3
            }
            break;
 800234a:	e001      	b.n	8002350 <HAL_UART_TxCpltCallback+0x28>
            }
            break;
#endif

        default:
            break;
 800234c:	bf00      	nop
 800234e:	e000      	b.n	8002352 <HAL_UART_TxCpltCallback+0x2a>
            break;
 8002350:	bf00      	nop
    }

    return;
 8002352:	bf00      	nop
}
 8002354:	3708      	adds	r7, #8
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	40013800 	.word	0x40013800
 8002360:	20000178 	.word	0x20000178

08002364 <ism330_Init>:

extern I2C_HandleTypeDef hi2c3;


HAL_StatusTypeDef ism330_Init(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b086      	sub	sp, #24
 8002368:	af04      	add	r7, sp, #16
    HAL_StatusTypeDef ret;

    // CTRL3_C: Enable Block Data Update (BDU) and auto-increment
    uint8_t ctrl3_c = 0x44;  // BDU = 1 (bit6), IF_INC = 1 (bit2)
 800236a:	2344      	movs	r3, #68	@ 0x44
 800236c:	71bb      	strb	r3, [r7, #6]
    ret = HAL_I2C_Mem_Write(&hi2c3, ISM330_I2C_ADD, ISM330_CTRL3_C,
 800236e:	2364      	movs	r3, #100	@ 0x64
 8002370:	9302      	str	r3, [sp, #8]
 8002372:	2301      	movs	r3, #1
 8002374:	9301      	str	r3, [sp, #4]
 8002376:	1dbb      	adds	r3, r7, #6
 8002378:	9300      	str	r3, [sp, #0]
 800237a:	2301      	movs	r3, #1
 800237c:	2212      	movs	r2, #18
 800237e:	21d7      	movs	r1, #215	@ 0xd7
 8002380:	481c      	ldr	r0, [pc, #112]	@ (80023f4 <ism330_Init+0x90>)
 8002382:	f001 ff57 	bl	8004234 <HAL_I2C_Mem_Write>
 8002386:	4603      	mov	r3, r0
 8002388:	71fb      	strb	r3, [r7, #7]
                            I2C_MEMADD_SIZE_8BIT, &ctrl3_c, 1, 100);
    if (ret != HAL_OK) return ret;
 800238a:	79fb      	ldrb	r3, [r7, #7]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d001      	beq.n	8002394 <ism330_Init+0x30>
 8002390:	79fb      	ldrb	r3, [r7, #7]
 8002392:	e02a      	b.n	80023ea <ism330_Init+0x86>

    // CTRL1_XL: Accelerometer ODR = 104 Hz, FS = ±2g
    uint8_t ctrl1_xl = 0x40; // ODR_XL = 104 Hz (0100), FS = ±2g (00)
 8002394:	2340      	movs	r3, #64	@ 0x40
 8002396:	717b      	strb	r3, [r7, #5]
    ret = HAL_I2C_Mem_Write(&hi2c3, ISM330_I2C_ADD, ISM330_CTRL1_XL,
 8002398:	2364      	movs	r3, #100	@ 0x64
 800239a:	9302      	str	r3, [sp, #8]
 800239c:	2301      	movs	r3, #1
 800239e:	9301      	str	r3, [sp, #4]
 80023a0:	1d7b      	adds	r3, r7, #5
 80023a2:	9300      	str	r3, [sp, #0]
 80023a4:	2301      	movs	r3, #1
 80023a6:	2210      	movs	r2, #16
 80023a8:	21d7      	movs	r1, #215	@ 0xd7
 80023aa:	4812      	ldr	r0, [pc, #72]	@ (80023f4 <ism330_Init+0x90>)
 80023ac:	f001 ff42 	bl	8004234 <HAL_I2C_Mem_Write>
 80023b0:	4603      	mov	r3, r0
 80023b2:	71fb      	strb	r3, [r7, #7]
                            I2C_MEMADD_SIZE_8BIT, &ctrl1_xl, 1, 100);
    if (ret != HAL_OK) return ret;
 80023b4:	79fb      	ldrb	r3, [r7, #7]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d001      	beq.n	80023be <ism330_Init+0x5a>
 80023ba:	79fb      	ldrb	r3, [r7, #7]
 80023bc:	e015      	b.n	80023ea <ism330_Init+0x86>

    // CTRL2_G: Gyroscope ODR = 104 Hz, FS = ±250 dps
    uint8_t ctrl2_g = 0x40;  // ODR_G = 104 Hz (0100), FS = ±250 dps (00)
 80023be:	2340      	movs	r3, #64	@ 0x40
 80023c0:	713b      	strb	r3, [r7, #4]
    ret = HAL_I2C_Mem_Write(&hi2c3, ISM330_I2C_ADD, ISM330_CTRL2_G,
 80023c2:	2364      	movs	r3, #100	@ 0x64
 80023c4:	9302      	str	r3, [sp, #8]
 80023c6:	2301      	movs	r3, #1
 80023c8:	9301      	str	r3, [sp, #4]
 80023ca:	1d3b      	adds	r3, r7, #4
 80023cc:	9300      	str	r3, [sp, #0]
 80023ce:	2301      	movs	r3, #1
 80023d0:	2211      	movs	r2, #17
 80023d2:	21d7      	movs	r1, #215	@ 0xd7
 80023d4:	4807      	ldr	r0, [pc, #28]	@ (80023f4 <ism330_Init+0x90>)
 80023d6:	f001 ff2d 	bl	8004234 <HAL_I2C_Mem_Write>
 80023da:	4603      	mov	r3, r0
 80023dc:	71fb      	strb	r3, [r7, #7]
                            I2C_MEMADD_SIZE_8BIT, &ctrl2_g, 1, 100);
    if (ret != HAL_OK) return ret;
 80023de:	79fb      	ldrb	r3, [r7, #7]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d001      	beq.n	80023e8 <ism330_Init+0x84>
 80023e4:	79fb      	ldrb	r3, [r7, #7]
 80023e6:	e000      	b.n	80023ea <ism330_Init+0x86>

    return HAL_OK;
 80023e8:	2300      	movs	r3, #0
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3708      	adds	r7, #8
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	20000348 	.word	0x20000348

080023f8 <ism330_ReadIMU>:
}


// Buffer to hold raw IMU data
int16_t* ism330_ReadIMU(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b088      	sub	sp, #32
 80023fc:	af04      	add	r7, sp, #16
    static int16_t imu_data[6];  // [accX, accY, accZ, gyroX, gyroY, gyroZ]
    uint8_t raw_data[12];        // 6 bytes each for gyro and accel
    HAL_StatusTypeDef ret;

    // Read 12 bytes starting from OUTX_L_G (gyro) to OUTZ_H_A (accel)
    ret = HAL_I2C_Mem_Read(&hi2c3, ISM330_I2C_ADD, ISM330_OUTX_L_G,
 80023fe:	2364      	movs	r3, #100	@ 0x64
 8002400:	9302      	str	r3, [sp, #8]
 8002402:	230c      	movs	r3, #12
 8002404:	9301      	str	r3, [sp, #4]
 8002406:	463b      	mov	r3, r7
 8002408:	9300      	str	r3, [sp, #0]
 800240a:	2301      	movs	r3, #1
 800240c:	2222      	movs	r2, #34	@ 0x22
 800240e:	21d7      	movs	r1, #215	@ 0xd7
 8002410:	4822      	ldr	r0, [pc, #136]	@ (800249c <ism330_ReadIMU+0xa4>)
 8002412:	f002 f823 	bl	800445c <HAL_I2C_Mem_Read>
 8002416:	4603      	mov	r3, r0
 8002418:	73fb      	strb	r3, [r7, #15]
                           I2C_MEMADD_SIZE_8BIT, raw_data, 12, 100);
    if (ret != HAL_OK) {
 800241a:	7bfb      	ldrb	r3, [r7, #15]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d001      	beq.n	8002424 <ism330_ReadIMU+0x2c>
        return NULL;  // Error reading IMU
 8002420:	2300      	movs	r3, #0
 8002422:	e036      	b.n	8002492 <ism330_ReadIMU+0x9a>
    }

    // Parse gyro data (first 6 bytes)
    imu_data[3] = (int16_t)(raw_data[1] << 8 | raw_data[0]);  // gyroX
 8002424:	787b      	ldrb	r3, [r7, #1]
 8002426:	021b      	lsls	r3, r3, #8
 8002428:	b21a      	sxth	r2, r3
 800242a:	783b      	ldrb	r3, [r7, #0]
 800242c:	b21b      	sxth	r3, r3
 800242e:	4313      	orrs	r3, r2
 8002430:	b21a      	sxth	r2, r3
 8002432:	4b1b      	ldr	r3, [pc, #108]	@ (80024a0 <ism330_ReadIMU+0xa8>)
 8002434:	80da      	strh	r2, [r3, #6]
    imu_data[4] = (int16_t)(raw_data[3] << 8 | raw_data[2]);  // gyroY
 8002436:	78fb      	ldrb	r3, [r7, #3]
 8002438:	021b      	lsls	r3, r3, #8
 800243a:	b21a      	sxth	r2, r3
 800243c:	78bb      	ldrb	r3, [r7, #2]
 800243e:	b21b      	sxth	r3, r3
 8002440:	4313      	orrs	r3, r2
 8002442:	b21a      	sxth	r2, r3
 8002444:	4b16      	ldr	r3, [pc, #88]	@ (80024a0 <ism330_ReadIMU+0xa8>)
 8002446:	811a      	strh	r2, [r3, #8]
    imu_data[5] = (int16_t)(raw_data[5] << 8 | raw_data[4]);  // gyroZ
 8002448:	797b      	ldrb	r3, [r7, #5]
 800244a:	021b      	lsls	r3, r3, #8
 800244c:	b21a      	sxth	r2, r3
 800244e:	793b      	ldrb	r3, [r7, #4]
 8002450:	b21b      	sxth	r3, r3
 8002452:	4313      	orrs	r3, r2
 8002454:	b21a      	sxth	r2, r3
 8002456:	4b12      	ldr	r3, [pc, #72]	@ (80024a0 <ism330_ReadIMU+0xa8>)
 8002458:	815a      	strh	r2, [r3, #10]

    // Parse accel data (next 6 bytes)
    imu_data[0] = (int16_t)(raw_data[7] << 8 | raw_data[6]);  // accX
 800245a:	79fb      	ldrb	r3, [r7, #7]
 800245c:	021b      	lsls	r3, r3, #8
 800245e:	b21a      	sxth	r2, r3
 8002460:	79bb      	ldrb	r3, [r7, #6]
 8002462:	b21b      	sxth	r3, r3
 8002464:	4313      	orrs	r3, r2
 8002466:	b21a      	sxth	r2, r3
 8002468:	4b0d      	ldr	r3, [pc, #52]	@ (80024a0 <ism330_ReadIMU+0xa8>)
 800246a:	801a      	strh	r2, [r3, #0]
    imu_data[1] = (int16_t)(raw_data[9] << 8 | raw_data[8]);  // accY
 800246c:	7a7b      	ldrb	r3, [r7, #9]
 800246e:	021b      	lsls	r3, r3, #8
 8002470:	b21a      	sxth	r2, r3
 8002472:	7a3b      	ldrb	r3, [r7, #8]
 8002474:	b21b      	sxth	r3, r3
 8002476:	4313      	orrs	r3, r2
 8002478:	b21a      	sxth	r2, r3
 800247a:	4b09      	ldr	r3, [pc, #36]	@ (80024a0 <ism330_ReadIMU+0xa8>)
 800247c:	805a      	strh	r2, [r3, #2]
    imu_data[2] = (int16_t)(raw_data[11] << 8 | raw_data[10]); // accZ
 800247e:	7afb      	ldrb	r3, [r7, #11]
 8002480:	021b      	lsls	r3, r3, #8
 8002482:	b21a      	sxth	r2, r3
 8002484:	7abb      	ldrb	r3, [r7, #10]
 8002486:	b21b      	sxth	r3, r3
 8002488:	4313      	orrs	r3, r2
 800248a:	b21a      	sxth	r2, r3
 800248c:	4b04      	ldr	r3, [pc, #16]	@ (80024a0 <ism330_ReadIMU+0xa8>)
 800248e:	809a      	strh	r2, [r3, #4]

    return imu_data;
 8002490:	4b03      	ldr	r3, [pc, #12]	@ (80024a0 <ism330_ReadIMU+0xa8>)
}
 8002492:	4618      	mov	r0, r3
 8002494:	3710      	adds	r7, #16
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	20000348 	.word	0x20000348
 80024a0:	2000017c 	.word	0x2000017c

080024a4 <lis3mdl_Init>:


extern I2C_HandleTypeDef hi2c3;

HAL_StatusTypeDef lis3mdl_Init(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b086      	sub	sp, #24
 80024a8:	af04      	add	r7, sp, #16
    HAL_StatusTypeDef ret;

    // CTRL_REG1: Temp enable = 0, Ultra-high-performance XY, ODR = 80 Hz
    uint8_t ctrl_reg1 = 0x70;  // 0b01110000
 80024aa:	2370      	movs	r3, #112	@ 0x70
 80024ac:	71bb      	strb	r3, [r7, #6]
    ret = HAL_I2C_Mem_Write(&hi2c3, LIS3MDL_I2C_ADD, LIS3MDL_CTRL_REG1,
 80024ae:	2364      	movs	r3, #100	@ 0x64
 80024b0:	9302      	str	r3, [sp, #8]
 80024b2:	2301      	movs	r3, #1
 80024b4:	9301      	str	r3, [sp, #4]
 80024b6:	1dbb      	adds	r3, r7, #6
 80024b8:	9300      	str	r3, [sp, #0]
 80024ba:	2301      	movs	r3, #1
 80024bc:	2220      	movs	r2, #32
 80024be:	213c      	movs	r1, #60	@ 0x3c
 80024c0:	481c      	ldr	r0, [pc, #112]	@ (8002534 <lis3mdl_Init+0x90>)
 80024c2:	f001 feb7 	bl	8004234 <HAL_I2C_Mem_Write>
 80024c6:	4603      	mov	r3, r0
 80024c8:	71fb      	strb	r3, [r7, #7]
                            I2C_MEMADD_SIZE_8BIT, &ctrl_reg1, 1, 100);
    if (ret != HAL_OK) return ret;
 80024ca:	79fb      	ldrb	r3, [r7, #7]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d001      	beq.n	80024d4 <lis3mdl_Init+0x30>
 80024d0:	79fb      	ldrb	r3, [r7, #7]
 80024d2:	e02a      	b.n	800252a <lis3mdl_Init+0x86>

    // CTRL_REG2: FS = ±4 gauss (00)
    uint8_t ctrl_reg2 = 0x00;
 80024d4:	2300      	movs	r3, #0
 80024d6:	717b      	strb	r3, [r7, #5]
    ret = HAL_I2C_Mem_Write(&hi2c3, LIS3MDL_I2C_ADD, LIS3MDL_CTRL_REG2,
 80024d8:	2364      	movs	r3, #100	@ 0x64
 80024da:	9302      	str	r3, [sp, #8]
 80024dc:	2301      	movs	r3, #1
 80024de:	9301      	str	r3, [sp, #4]
 80024e0:	1d7b      	adds	r3, r7, #5
 80024e2:	9300      	str	r3, [sp, #0]
 80024e4:	2301      	movs	r3, #1
 80024e6:	2221      	movs	r2, #33	@ 0x21
 80024e8:	213c      	movs	r1, #60	@ 0x3c
 80024ea:	4812      	ldr	r0, [pc, #72]	@ (8002534 <lis3mdl_Init+0x90>)
 80024ec:	f001 fea2 	bl	8004234 <HAL_I2C_Mem_Write>
 80024f0:	4603      	mov	r3, r0
 80024f2:	71fb      	strb	r3, [r7, #7]
                            I2C_MEMADD_SIZE_8BIT, &ctrl_reg2, 1, 100);
    if (ret != HAL_OK) return ret;
 80024f4:	79fb      	ldrb	r3, [r7, #7]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d001      	beq.n	80024fe <lis3mdl_Init+0x5a>
 80024fa:	79fb      	ldrb	r3, [r7, #7]
 80024fc:	e015      	b.n	800252a <lis3mdl_Init+0x86>

    // CTRL_REG3: Continuous-conversion mode
    uint8_t ctrl_reg3 = 0x00;
 80024fe:	2300      	movs	r3, #0
 8002500:	713b      	strb	r3, [r7, #4]
    ret = HAL_I2C_Mem_Write(&hi2c3, LIS3MDL_I2C_ADD, LIS3MDL_CTRL_REG3,
 8002502:	2364      	movs	r3, #100	@ 0x64
 8002504:	9302      	str	r3, [sp, #8]
 8002506:	2301      	movs	r3, #1
 8002508:	9301      	str	r3, [sp, #4]
 800250a:	1d3b      	adds	r3, r7, #4
 800250c:	9300      	str	r3, [sp, #0]
 800250e:	2301      	movs	r3, #1
 8002510:	2222      	movs	r2, #34	@ 0x22
 8002512:	213c      	movs	r1, #60	@ 0x3c
 8002514:	4807      	ldr	r0, [pc, #28]	@ (8002534 <lis3mdl_Init+0x90>)
 8002516:	f001 fe8d 	bl	8004234 <HAL_I2C_Mem_Write>
 800251a:	4603      	mov	r3, r0
 800251c:	71fb      	strb	r3, [r7, #7]
                            I2C_MEMADD_SIZE_8BIT, &ctrl_reg3, 1, 100);
    if (ret != HAL_OK) return ret;
 800251e:	79fb      	ldrb	r3, [r7, #7]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d001      	beq.n	8002528 <lis3mdl_Init+0x84>
 8002524:	79fb      	ldrb	r3, [r7, #7]
 8002526:	e000      	b.n	800252a <lis3mdl_Init+0x86>

    return HAL_OK;
 8002528:	2300      	movs	r3, #0
}
 800252a:	4618      	mov	r0, r3
 800252c:	3708      	adds	r7, #8
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	20000348 	.word	0x20000348

08002538 <lis3mdl_ReadMag>:

    return (int32_t)id;  // Should return 0x3D
}

int16_t* lis3mdl_ReadMag(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b086      	sub	sp, #24
 800253c:	af04      	add	r7, sp, #16
    static int16_t mag_data[3];  // [magX, magY, magZ]
    uint8_t raw_data[6];
    HAL_StatusTypeDef ret;

    // Read 6 bytes starting from OUTX_L
    ret = HAL_I2C_Mem_Read(&hi2c3, LIS3MDL_I2C_ADD, LIS3MDL_OUTX_L,
 800253e:	2364      	movs	r3, #100	@ 0x64
 8002540:	9302      	str	r3, [sp, #8]
 8002542:	2306      	movs	r3, #6
 8002544:	9301      	str	r3, [sp, #4]
 8002546:	463b      	mov	r3, r7
 8002548:	9300      	str	r3, [sp, #0]
 800254a:	2301      	movs	r3, #1
 800254c:	2228      	movs	r2, #40	@ 0x28
 800254e:	213c      	movs	r1, #60	@ 0x3c
 8002550:	4814      	ldr	r0, [pc, #80]	@ (80025a4 <lis3mdl_ReadMag+0x6c>)
 8002552:	f001 ff83 	bl	800445c <HAL_I2C_Mem_Read>
 8002556:	4603      	mov	r3, r0
 8002558:	71fb      	strb	r3, [r7, #7]
                           I2C_MEMADD_SIZE_8BIT, raw_data, 6, 100);
    if (ret != HAL_OK) {
 800255a:	79fb      	ldrb	r3, [r7, #7]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d001      	beq.n	8002564 <lis3mdl_ReadMag+0x2c>
        return NULL;
 8002560:	2300      	movs	r3, #0
 8002562:	e01b      	b.n	800259c <lis3mdl_ReadMag+0x64>
    }

    mag_data[0] = (int16_t)(raw_data[1] << 8 | raw_data[0]);  // X
 8002564:	787b      	ldrb	r3, [r7, #1]
 8002566:	021b      	lsls	r3, r3, #8
 8002568:	b21a      	sxth	r2, r3
 800256a:	783b      	ldrb	r3, [r7, #0]
 800256c:	b21b      	sxth	r3, r3
 800256e:	4313      	orrs	r3, r2
 8002570:	b21a      	sxth	r2, r3
 8002572:	4b0d      	ldr	r3, [pc, #52]	@ (80025a8 <lis3mdl_ReadMag+0x70>)
 8002574:	801a      	strh	r2, [r3, #0]
    mag_data[1] = (int16_t)(raw_data[3] << 8 | raw_data[2]);  // Y
 8002576:	78fb      	ldrb	r3, [r7, #3]
 8002578:	021b      	lsls	r3, r3, #8
 800257a:	b21a      	sxth	r2, r3
 800257c:	78bb      	ldrb	r3, [r7, #2]
 800257e:	b21b      	sxth	r3, r3
 8002580:	4313      	orrs	r3, r2
 8002582:	b21a      	sxth	r2, r3
 8002584:	4b08      	ldr	r3, [pc, #32]	@ (80025a8 <lis3mdl_ReadMag+0x70>)
 8002586:	805a      	strh	r2, [r3, #2]
    mag_data[2] = (int16_t)(raw_data[5] << 8 | raw_data[4]);  // Z
 8002588:	797b      	ldrb	r3, [r7, #5]
 800258a:	021b      	lsls	r3, r3, #8
 800258c:	b21a      	sxth	r2, r3
 800258e:	793b      	ldrb	r3, [r7, #4]
 8002590:	b21b      	sxth	r3, r3
 8002592:	4313      	orrs	r3, r2
 8002594:	b21a      	sxth	r2, r3
 8002596:	4b04      	ldr	r3, [pc, #16]	@ (80025a8 <lis3mdl_ReadMag+0x70>)
 8002598:	809a      	strh	r2, [r3, #4]

    return mag_data;
 800259a:	4b03      	ldr	r3, [pc, #12]	@ (80025a8 <lis3mdl_ReadMag+0x70>)
}
 800259c:	4618      	mov	r0, r3
 800259e:	3708      	adds	r7, #8
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	20000348 	.word	0x20000348
 80025a8:	20000188 	.word	0x20000188

080025ac <LL_RCC_LSE_SetDriveCapability>:
{
 80025ac:	b480      	push	{r7}
 80025ae:	b083      	sub	sp, #12
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80025b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025bc:	f023 0218 	bic.w	r2, r3, #24
 80025c0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	4313      	orrs	r3, r2
 80025c8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80025cc:	bf00      	nop
 80025ce:	370c      	adds	r7, #12
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr

080025d8 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80025d8:	b480      	push	{r7}
 80025da:	b085      	sub	sp, #20
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80025e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025e4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80025e6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4313      	orrs	r3, r2
 80025ee:	648b      	str	r3, [r1, #72]	@ 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80025f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025f4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4013      	ands	r3, r2
 80025fa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80025fc:	68fb      	ldr	r3, [r7, #12]
}
 80025fe:	bf00      	nop
 8002600:	3714      	adds	r7, #20
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr

0800260a <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800260a:	b480      	push	{r7}
 800260c:	b085      	sub	sp, #20
 800260e:	af00      	add	r7, sp, #0
 8002610:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002612:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002616:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002618:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	4313      	orrs	r3, r2
 8002620:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002622:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002626:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	4013      	ands	r3, r2
 800262c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800262e:	68fb      	ldr	r3, [r7, #12]
}
 8002630:	bf00      	nop
 8002632:	3714      	adds	r7, #20
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr

0800263c <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800263c:	b480      	push	{r7}
 800263e:	b085      	sub	sp, #20
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002644:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002648:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800264a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4313      	orrs	r3, r2
 8002652:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002654:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002658:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4013      	ands	r3, r2
 800265e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002660:	68fb      	ldr	r3, [r7, #12]
}
 8002662:	bf00      	nop
 8002664:	3714      	adds	r7, #20
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr

0800266e <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800266e:	b480      	push	{r7}
 8002670:	b085      	sub	sp, #20
 8002672:	af00      	add	r7, sp, #0
 8002674:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8002676:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800267a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800267c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	4313      	orrs	r3, r2
 8002684:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002686:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800268a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	4013      	ands	r3, r2
 8002690:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002692:	68fb      	ldr	r3, [r7, #12]
}
 8002694:	bf00      	nop
 8002696:	3714      	adds	r7, #20
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr

080026a0 <LL_RTC_EnableWriteProtection>:
{
 80026a0:	b480      	push	{r7}
 80026a2:	b083      	sub	sp, #12
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	22ff      	movs	r2, #255	@ 0xff
 80026ac:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80026ae:	bf00      	nop
 80026b0:	370c      	adds	r7, #12
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr

080026ba <LL_RTC_DisableWriteProtection>:
{
 80026ba:	b480      	push	{r7}
 80026bc:	b083      	sub	sp, #12
 80026be:	af00      	add	r7, sp, #0
 80026c0:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	22ca      	movs	r2, #202	@ 0xca
 80026c6:	625a      	str	r2, [r3, #36]	@ 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2253      	movs	r2, #83	@ 0x53
 80026cc:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80026ce:	bf00      	nop
 80026d0:	370c      	adds	r7, #12
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr

080026da <LL_RTC_WAKEUP_SetClock>:
{
 80026da:	b480      	push	{r7}
 80026dc:	b083      	sub	sp, #12
 80026de:	af00      	add	r7, sp, #0
 80026e0:	6078      	str	r0, [r7, #4]
 80026e2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	f023 0207 	bic.w	r2, r3, #7
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	431a      	orrs	r2, r3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	609a      	str	r2, [r3, #8]
}
 80026f4:	bf00      	nop
 80026f6:	370c      	adds	r7, #12
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr

08002700 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002704:	f000 fdce 	bl	80032a4 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8002708:	f7fe fcfc 	bl	8001104 <MX_APPE_Config>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800270c:	f000 f824 	bl	8002758 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8002710:	f000 f87e 	bl	8002810 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 8002714:	f000 f89c 	bl	8002850 <MX_IPCC_Init>

  /* USER CODE BEGIN SysInit */
  PeriphClock_Config();
 8002718:	f000 faae 	bl	8002c78 <PeriphClock_Config>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800271c:	f000 f9bc 	bl	8002a98 <MX_GPIO_Init>
  my_MX_SPI1_Init();
 8002720:	f000 f966 	bl	80029f0 <my_MX_SPI1_Init>
  MX_I2C3_Init();
 8002724:	f000 f932 	bl	800298c <MX_I2C3_Init>
  MX_DMA_Init();
 8002728:	f000 f9a4 	bl	8002a74 <MX_DMA_Init>
  MX_RTC_Init();
 800272c:	f000 f8ac 	bl	8002888 <MX_RTC_Init>
  MX_USART1_UART_Init();
 8002730:	f000 f8de 	bl	80028f0 <MX_USART1_UART_Init>
  MX_RF_Init();
 8002734:	f000 f8a0 	bl	8002878 <MX_RF_Init>
  /* USER CODE BEGIN 2 */
  MX_TIM2_Init();
 8002738:	f000 faa6 	bl	8002c88 <MX_TIM2_Init>
  MX_TIM17_Init();
 800273c:	f000 fb34 	bl	8002da8 <MX_TIM17_Init>

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8002740:	f7fe fcee 	bl	8001120 <MX_APPE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  ADS1299_Init();
 8002744:	f7fe f9d2 	bl	8000aec <ADS1299_Init>
  ism330_Init();
 8002748:	f7ff fe0c 	bl	8002364 <ism330_Init>
  lis3mdl_Init();
 800274c:	f7ff feaa 	bl	80024a4 <lis3mdl_Init>

  while(1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 8002750:	f7fe fec5 	bl	80014de <MX_APPE_Process>
 8002754:	e7fc      	b.n	8002750 <main+0x50>
	...

08002758 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b09a      	sub	sp, #104	@ 0x68
 800275c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800275e:	f107 0320 	add.w	r3, r7, #32
 8002762:	2248      	movs	r2, #72	@ 0x48
 8002764:	2100      	movs	r1, #0
 8002766:	4618      	mov	r0, r3
 8002768:	f00c f84c 	bl	800e804 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800276c:	1d3b      	adds	r3, r7, #4
 800276e:	2200      	movs	r2, #0
 8002770:	601a      	str	r2, [r3, #0]
 8002772:	605a      	str	r2, [r3, #4]
 8002774:	609a      	str	r2, [r3, #8]
 8002776:	60da      	str	r2, [r3, #12]
 8002778:	611a      	str	r2, [r3, #16]
 800277a:	615a      	str	r2, [r3, #20]
 800277c:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800277e:	f002 facf 	bl	8004d20 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 8002782:	2010      	movs	r0, #16
 8002784:	f7ff ff12 	bl	80025ac <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002788:	4b20      	ldr	r3, [pc, #128]	@ (800280c <SystemClock_Config+0xb4>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002790:	4a1e      	ldr	r2, [pc, #120]	@ (800280c <SystemClock_Config+0xb4>)
 8002792:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002796:	6013      	str	r3, [r2, #0]
 8002798:	4b1c      	ldr	r3, [pc, #112]	@ (800280c <SystemClock_Config+0xb4>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80027a0:	603b      	str	r3, [r7, #0]
 80027a2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 80027a4:	2307      	movs	r3, #7
 80027a6:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80027a8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80027ac:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80027ae:	2301      	movs	r3, #1
 80027b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80027b2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80027b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80027b8:	2340      	movs	r3, #64	@ 0x40
 80027ba:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80027bc:	2300      	movs	r3, #0
 80027be:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80027c0:	f107 0320 	add.w	r3, r7, #32
 80027c4:	4618      	mov	r0, r3
 80027c6:	f002 fe3f 	bl	8005448 <HAL_RCC_OscConfig>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d001      	beq.n	80027d4 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80027d0:	f000 fb2e 	bl	8002e30 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80027d4:	236f      	movs	r3, #111	@ 0x6f
 80027d6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80027d8:	2302      	movs	r3, #2
 80027da:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80027dc:	2300      	movs	r3, #0
 80027de:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80027e0:	2300      	movs	r3, #0
 80027e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80027e4:	2300      	movs	r3, #0
 80027e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80027e8:	2300      	movs	r3, #0
 80027ea:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80027ec:	2300      	movs	r3, #0
 80027ee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80027f0:	1d3b      	adds	r3, r7, #4
 80027f2:	2101      	movs	r1, #1
 80027f4:	4618      	mov	r0, r3
 80027f6:	f003 f99b 	bl	8005b30 <HAL_RCC_ClockConfig>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d001      	beq.n	8002804 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8002800:	f000 fb16 	bl	8002e30 <Error_Handler>
  }
}
 8002804:	bf00      	nop
 8002806:	3768      	adds	r7, #104	@ 0x68
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}
 800280c:	58000400 	.word	0x58000400

08002810 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b094      	sub	sp, #80	@ 0x50
 8002814:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002816:	463b      	mov	r3, r7
 8002818:	2250      	movs	r2, #80	@ 0x50
 800281a:	2100      	movs	r1, #0
 800281c:	4618      	mov	r0, r3
 800281e:	f00b fff1 	bl	800e804 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 8002822:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002826:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8002828:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800282c:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 800282e:	2302      	movs	r3, #2
 8002830:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8002832:	2300      	movs	r3, #0
 8002834:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002836:	463b      	mov	r3, r7
 8002838:	4618      	mov	r0, r3
 800283a:	f003 fdb6 	bl	80063aa <HAL_RCCEx_PeriphCLKConfig>
 800283e:	4603      	mov	r3, r0
 8002840:	2b00      	cmp	r3, #0
 8002842:	d001      	beq.n	8002848 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8002844:	f000 faf4 	bl	8002e30 <Error_Handler>
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif

  /* USER CODE END Smps */
}
 8002848:	bf00      	nop
 800284a:	3750      	adds	r7, #80	@ 0x50
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}

08002850 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8002854:	4b06      	ldr	r3, [pc, #24]	@ (8002870 <MX_IPCC_Init+0x20>)
 8002856:	4a07      	ldr	r2, [pc, #28]	@ (8002874 <MX_IPCC_Init+0x24>)
 8002858:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 800285a:	4805      	ldr	r0, [pc, #20]	@ (8002870 <MX_IPCC_Init+0x20>)
 800285c:	f002 f9da 	bl	8004c14 <HAL_IPCC_Init>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d001      	beq.n	800286a <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8002866:	f000 fae3 	bl	8002e30 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 800286a:	bf00      	nop
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	20000190 	.word	0x20000190
 8002874:	58000c00 	.word	0x58000c00

08002878 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8002878:	b480      	push	{r7}
 800287a:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 800287c:	bf00      	nop
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr
	...

08002888 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800288c:	4b16      	ldr	r3, [pc, #88]	@ (80028e8 <MX_RTC_Init+0x60>)
 800288e:	4a17      	ldr	r2, [pc, #92]	@ (80028ec <MX_RTC_Init+0x64>)
 8002890:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002892:	4b15      	ldr	r3, [pc, #84]	@ (80028e8 <MX_RTC_Init+0x60>)
 8002894:	2200      	movs	r2, #0
 8002896:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8002898:	4b13      	ldr	r3, [pc, #76]	@ (80028e8 <MX_RTC_Init+0x60>)
 800289a:	220f      	movs	r2, #15
 800289c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 800289e:	4b12      	ldr	r3, [pc, #72]	@ (80028e8 <MX_RTC_Init+0x60>)
 80028a0:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80028a4:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80028a6:	4b10      	ldr	r3, [pc, #64]	@ (80028e8 <MX_RTC_Init+0x60>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80028ac:	4b0e      	ldr	r3, [pc, #56]	@ (80028e8 <MX_RTC_Init+0x60>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80028b2:	4b0d      	ldr	r3, [pc, #52]	@ (80028e8 <MX_RTC_Init+0x60>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80028b8:	4b0b      	ldr	r3, [pc, #44]	@ (80028e8 <MX_RTC_Init+0x60>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80028be:	480a      	ldr	r0, [pc, #40]	@ (80028e8 <MX_RTC_Init+0x60>)
 80028c0:	f003 fffa 	bl	80068b8 <HAL_RTC_Init>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d001      	beq.n	80028ce <MX_RTC_Init+0x46>
  {
    Error_Handler();
 80028ca:	f000 fab1 	bl	8002e30 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 80028ce:	4807      	ldr	r0, [pc, #28]	@ (80028ec <MX_RTC_Init+0x64>)
 80028d0:	f7ff fef3 	bl	80026ba <LL_RTC_DisableWriteProtection>
  
  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 80028d4:	2100      	movs	r1, #0
 80028d6:	4805      	ldr	r0, [pc, #20]	@ (80028ec <MX_RTC_Init+0x64>)
 80028d8:	f7ff feff 	bl	80026da <LL_RTC_WAKEUP_SetClock>
  
  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 80028dc:	4803      	ldr	r0, [pc, #12]	@ (80028ec <MX_RTC_Init+0x64>)
 80028de:	f7ff fedf 	bl	80026a0 <LL_RTC_EnableWriteProtection>
  /* USER CODE END RTC_Init 2 */

}
 80028e2:	bf00      	nop
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	200001cc 	.word	0x200001cc
 80028ec:	40002800 	.word	0x40002800

080028f0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80028f4:	4b23      	ldr	r3, [pc, #140]	@ (8002984 <MX_USART1_UART_Init+0x94>)
 80028f6:	4a24      	ldr	r2, [pc, #144]	@ (8002988 <MX_USART1_UART_Init+0x98>)
 80028f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80028fa:	4b22      	ldr	r3, [pc, #136]	@ (8002984 <MX_USART1_UART_Init+0x94>)
 80028fc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002900:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002902:	4b20      	ldr	r3, [pc, #128]	@ (8002984 <MX_USART1_UART_Init+0x94>)
 8002904:	2200      	movs	r2, #0
 8002906:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002908:	4b1e      	ldr	r3, [pc, #120]	@ (8002984 <MX_USART1_UART_Init+0x94>)
 800290a:	2200      	movs	r2, #0
 800290c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800290e:	4b1d      	ldr	r3, [pc, #116]	@ (8002984 <MX_USART1_UART_Init+0x94>)
 8002910:	2200      	movs	r2, #0
 8002912:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002914:	4b1b      	ldr	r3, [pc, #108]	@ (8002984 <MX_USART1_UART_Init+0x94>)
 8002916:	220c      	movs	r2, #12
 8002918:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800291a:	4b1a      	ldr	r3, [pc, #104]	@ (8002984 <MX_USART1_UART_Init+0x94>)
 800291c:	2200      	movs	r2, #0
 800291e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8002920:	4b18      	ldr	r3, [pc, #96]	@ (8002984 <MX_USART1_UART_Init+0x94>)
 8002922:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002926:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002928:	4b16      	ldr	r3, [pc, #88]	@ (8002984 <MX_USART1_UART_Init+0x94>)
 800292a:	2200      	movs	r2, #0
 800292c:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800292e:	4b15      	ldr	r3, [pc, #84]	@ (8002984 <MX_USART1_UART_Init+0x94>)
 8002930:	2200      	movs	r2, #0
 8002932:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002934:	4b13      	ldr	r3, [pc, #76]	@ (8002984 <MX_USART1_UART_Init+0x94>)
 8002936:	2200      	movs	r2, #0
 8002938:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800293a:	4812      	ldr	r0, [pc, #72]	@ (8002984 <MX_USART1_UART_Init+0x94>)
 800293c:	f005 fab8 	bl	8007eb0 <HAL_UART_Init>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d001      	beq.n	800294a <MX_USART1_UART_Init+0x5a>
  {
	Error_Handler();
 8002946:	f000 fa73 	bl	8002e30 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800294a:	2100      	movs	r1, #0
 800294c:	480d      	ldr	r0, [pc, #52]	@ (8002984 <MX_USART1_UART_Init+0x94>)
 800294e:	f006 fc9c 	bl	800928a <HAL_UARTEx_SetTxFifoThreshold>
 8002952:	4603      	mov	r3, r0
 8002954:	2b00      	cmp	r3, #0
 8002956:	d001      	beq.n	800295c <MX_USART1_UART_Init+0x6c>
  {
	Error_Handler();
 8002958:	f000 fa6a 	bl	8002e30 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800295c:	2100      	movs	r1, #0
 800295e:	4809      	ldr	r0, [pc, #36]	@ (8002984 <MX_USART1_UART_Init+0x94>)
 8002960:	f006 fcd1 	bl	8009306 <HAL_UARTEx_SetRxFifoThreshold>
 8002964:	4603      	mov	r3, r0
 8002966:	2b00      	cmp	r3, #0
 8002968:	d001      	beq.n	800296e <MX_USART1_UART_Init+0x7e>
  {
	Error_Handler();
 800296a:	f000 fa61 	bl	8002e30 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800296e:	4805      	ldr	r0, [pc, #20]	@ (8002984 <MX_USART1_UART_Init+0x94>)
 8002970:	f006 fc52 	bl	8009218 <HAL_UARTEx_DisableFifoMode>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d001      	beq.n	800297e <MX_USART1_UART_Init+0x8e>
  {
	Error_Handler();
 800297a:	f000 fa59 	bl	8002e30 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800297e:	bf00      	nop
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	200001f0 	.word	0x200001f0
 8002988:	40013800 	.word	0x40013800

0800298c <MX_I2C3_Init>:

// I2C3 initialization function
void MX_I2C3_Init(void)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	af00      	add	r7, sp, #0

	/* SPI1 clock enable */
	__HAL_RCC_I2C3_CLK_ENABLE();
 8002990:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8002994:	f7ff fe52 	bl	800263c <LL_APB1_GRP1_EnableClock>


	hi2c3.Instance = I2C3;
 8002998:	4b12      	ldr	r3, [pc, #72]	@ (80029e4 <MX_I2C3_Init+0x58>)
 800299a:	4a13      	ldr	r2, [pc, #76]	@ (80029e8 <MX_I2C3_Init+0x5c>)
 800299c:	601a      	str	r2, [r3, #0]
	  hi2c3.Init.Timing = 0x00707CBB;
 800299e:	4b11      	ldr	r3, [pc, #68]	@ (80029e4 <MX_I2C3_Init+0x58>)
 80029a0:	4a12      	ldr	r2, [pc, #72]	@ (80029ec <MX_I2C3_Init+0x60>)
 80029a2:	605a      	str	r2, [r3, #4]
	  hi2c3.Init.OwnAddress1 = 0;
 80029a4:	4b0f      	ldr	r3, [pc, #60]	@ (80029e4 <MX_I2C3_Init+0x58>)
 80029a6:	2200      	movs	r2, #0
 80029a8:	609a      	str	r2, [r3, #8]
	  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80029aa:	4b0e      	ldr	r3, [pc, #56]	@ (80029e4 <MX_I2C3_Init+0x58>)
 80029ac:	2201      	movs	r2, #1
 80029ae:	60da      	str	r2, [r3, #12]
	  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80029b0:	4b0c      	ldr	r3, [pc, #48]	@ (80029e4 <MX_I2C3_Init+0x58>)
 80029b2:	2200      	movs	r2, #0
 80029b4:	611a      	str	r2, [r3, #16]
	  hi2c3.Init.OwnAddress2 = 0;
 80029b6:	4b0b      	ldr	r3, [pc, #44]	@ (80029e4 <MX_I2C3_Init+0x58>)
 80029b8:	2200      	movs	r2, #0
 80029ba:	615a      	str	r2, [r3, #20]
	  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80029bc:	4b09      	ldr	r3, [pc, #36]	@ (80029e4 <MX_I2C3_Init+0x58>)
 80029be:	2200      	movs	r2, #0
 80029c0:	619a      	str	r2, [r3, #24]
	  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80029c2:	4b08      	ldr	r3, [pc, #32]	@ (80029e4 <MX_I2C3_Init+0x58>)
 80029c4:	2200      	movs	r2, #0
 80029c6:	61da      	str	r2, [r3, #28]
	  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80029c8:	4b06      	ldr	r3, [pc, #24]	@ (80029e4 <MX_I2C3_Init+0x58>)
 80029ca:	2200      	movs	r2, #0
 80029cc:	621a      	str	r2, [r3, #32]

    if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80029ce:	4805      	ldr	r0, [pc, #20]	@ (80029e4 <MX_I2C3_Init+0x58>)
 80029d0:	f001 fb8a 	bl	80040e8 <HAL_I2C_Init>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d001      	beq.n	80029de <MX_I2C3_Init+0x52>
    {
        // Initialization error
        Error_Handler();
 80029da:	f000 fa29 	bl	8002e30 <Error_Handler>
    }
}
 80029de:	bf00      	nop
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	20000348 	.word	0x20000348
 80029e8:	40005c00 	.word	0x40005c00
 80029ec:	00707cbb 	.word	0x00707cbb

080029f0 <my_MX_SPI1_Init>:



// SPI1 initialization function
void my_MX_SPI1_Init(void)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	af00      	add	r7, sp, #0

	/* SPI1 clock enable */
	__HAL_RCC_SPI1_CLK_ENABLE();
 80029f4:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80029f8:	f7ff fe39 	bl	800266e <LL_APB2_GRP1_EnableClock>


	  hspi1.Instance = SPI1;
 80029fc:	4b1b      	ldr	r3, [pc, #108]	@ (8002a6c <my_MX_SPI1_Init+0x7c>)
 80029fe:	4a1c      	ldr	r2, [pc, #112]	@ (8002a70 <my_MX_SPI1_Init+0x80>)
 8002a00:	601a      	str	r2, [r3, #0]
	  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002a02:	4b1a      	ldr	r3, [pc, #104]	@ (8002a6c <my_MX_SPI1_Init+0x7c>)
 8002a04:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002a08:	605a      	str	r2, [r3, #4]
	  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002a0a:	4b18      	ldr	r3, [pc, #96]	@ (8002a6c <my_MX_SPI1_Init+0x7c>)
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	609a      	str	r2, [r3, #8]
	  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002a10:	4b16      	ldr	r3, [pc, #88]	@ (8002a6c <my_MX_SPI1_Init+0x7c>)
 8002a12:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002a16:	60da      	str	r2, [r3, #12]
	  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a18:	4b14      	ldr	r3, [pc, #80]	@ (8002a6c <my_MX_SPI1_Init+0x7c>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	611a      	str	r2, [r3, #16]
	  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002a1e:	4b13      	ldr	r3, [pc, #76]	@ (8002a6c <my_MX_SPI1_Init+0x7c>)
 8002a20:	2201      	movs	r2, #1
 8002a22:	615a      	str	r2, [r3, #20]
	  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002a24:	4b11      	ldr	r3, [pc, #68]	@ (8002a6c <my_MX_SPI1_Init+0x7c>)
 8002a26:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a2a:	619a      	str	r2, [r3, #24]
	  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002a2c:	4b0f      	ldr	r3, [pc, #60]	@ (8002a6c <my_MX_SPI1_Init+0x7c>)
 8002a2e:	2218      	movs	r2, #24
 8002a30:	61da      	str	r2, [r3, #28]
	  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002a32:	4b0e      	ldr	r3, [pc, #56]	@ (8002a6c <my_MX_SPI1_Init+0x7c>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	621a      	str	r2, [r3, #32]
	  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002a38:	4b0c      	ldr	r3, [pc, #48]	@ (8002a6c <my_MX_SPI1_Init+0x7c>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	625a      	str	r2, [r3, #36]	@ 0x24
	  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a3e:	4b0b      	ldr	r3, [pc, #44]	@ (8002a6c <my_MX_SPI1_Init+0x7c>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	629a      	str	r2, [r3, #40]	@ 0x28
	  hspi1.Init.CRCPolynomial = 7;
 8002a44:	4b09      	ldr	r3, [pc, #36]	@ (8002a6c <my_MX_SPI1_Init+0x7c>)
 8002a46:	2207      	movs	r2, #7
 8002a48:	62da      	str	r2, [r3, #44]	@ 0x2c
	  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002a4a:	4b08      	ldr	r3, [pc, #32]	@ (8002a6c <my_MX_SPI1_Init+0x7c>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	631a      	str	r2, [r3, #48]	@ 0x30
	  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002a50:	4b06      	ldr	r3, [pc, #24]	@ (8002a6c <my_MX_SPI1_Init+0x7c>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002a56:	4805      	ldr	r0, [pc, #20]	@ (8002a6c <my_MX_SPI1_Init+0x7c>)
 8002a58:	f004 f864 	bl	8006b24 <HAL_SPI_Init>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d001      	beq.n	8002a66 <my_MX_SPI1_Init+0x76>
    {
        // Initialization error
        Error_Handler();
 8002a62:	f000 f9e5 	bl	8002e30 <Error_Handler>
    }
}
 8002a66:	bf00      	nop
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	200002e4 	.word	0x200002e4
 8002a70:	40013000 	.word	0x40013000

08002a74 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002a78:	2004      	movs	r0, #4
 8002a7a:	f7ff fdad 	bl	80025d8 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002a7e:	2002      	movs	r0, #2
 8002a80:	f7ff fdaa 	bl	80025d8 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 15, 0);
 8002a84:	2200      	movs	r2, #0
 8002a86:	210f      	movs	r1, #15
 8002a88:	203a      	movs	r0, #58	@ 0x3a
 8002a8a:	f000 fdd8 	bl	800363e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 8002a8e:	203a      	movs	r0, #58	@ 0x3a
 8002a90:	f000 fdef 	bl	8003672 <HAL_NVIC_EnableIRQ>

}
 8002a94:	bf00      	nop
 8002a96:	bd80      	pop	{r7, pc}

08002a98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b086      	sub	sp, #24
 8002a9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a9e:	1d3b      	adds	r3, r7, #4
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	601a      	str	r2, [r3, #0]
 8002aa4:	605a      	str	r2, [r3, #4]
 8002aa6:	609a      	str	r2, [r3, #8]
 8002aa8:	60da      	str	r2, [r3, #12]
 8002aaa:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aac:	2001      	movs	r0, #1
 8002aae:	f7ff fdac 	bl	800260a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ab2:	2004      	movs	r0, #4
 8002ab4:	f7ff fda9 	bl	800260a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ab8:	2002      	movs	r0, #2
 8002aba:	f7ff fda6 	bl	800260a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002abe:	2008      	movs	r0, #8
 8002ac0:	f7ff fda3 	bl	800260a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002ac4:	2010      	movs	r0, #16
 8002ac6:	f7ff fda0 	bl	800260a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002aca:	2080      	movs	r0, #128	@ 0x80
 8002acc:	f7ff fd9d 	bl	800260a <LL_AHB2_GRP1_EnableClock>


	/* Configure PC12 and PC13 as external interrupt inputs */
	/* Configure GPIO pins : PC12 and PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13;
 8002ad0:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002ad4:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;  // Interrupt on falling edge
 8002ad6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002ada:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;           // No pull-up or pull-down resistors
 8002adc:	2300      	movs	r3, #0
 8002ade:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ae0:	1d3b      	adds	r3, r7, #4
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	4862      	ldr	r0, [pc, #392]	@ (8002c70 <MX_GPIO_Init+0x1d8>)
 8002ae6:	f001 f93b 	bl	8003d60 <HAL_GPIO_Init>

	/* Enable and set EXTI line interrupt priority */
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);   // Priority level 2
 8002aea:	2200      	movs	r2, #0
 8002aec:	2102      	movs	r1, #2
 8002aee:	2028      	movs	r0, #40	@ 0x28
 8002af0:	f000 fda5 	bl	800363e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);          // Enable the interrupt
 8002af4:	2028      	movs	r0, #40	@ 0x28
 8002af6:	f000 fdbc 	bl	8003672 <HAL_NVIC_EnableIRQ>

	GPIO_InitStruct.Pin = LED_A_Pin;
 8002afa:	2301      	movs	r3, #1
 8002afc:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002afe:	2301      	movs	r3, #1
 8002b00:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b02:	2300      	movs	r3, #0
 8002b04:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b06:	2300      	movs	r3, #0
 8002b08:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(LED_A_GPIO_Port, &GPIO_InitStruct);
 8002b0a:	1d3b      	adds	r3, r7, #4
 8002b0c:	4619      	mov	r1, r3
 8002b0e:	4859      	ldr	r0, [pc, #356]	@ (8002c74 <MX_GPIO_Init+0x1dc>)
 8002b10:	f001 f926 	bl	8003d60 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = LED_B_Pin;
 8002b14:	2302      	movs	r3, #2
 8002b16:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b20:	2300      	movs	r3, #0
 8002b22:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(LED_B_GPIO_Port, &GPIO_InitStruct);
 8002b24:	1d3b      	adds	r3, r7, #4
 8002b26:	4619      	mov	r1, r3
 8002b28:	4852      	ldr	r0, [pc, #328]	@ (8002c74 <MX_GPIO_Init+0x1dc>)
 8002b2a:	f001 f919 	bl	8003d60 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = ADS1118_CS_Pin;
 8002b2e:	2340      	movs	r3, #64	@ 0x40
 8002b30:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b32:	2301      	movs	r3, #1
 8002b34:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b36:	2301      	movs	r3, #1
 8002b38:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b3a:	2302      	movs	r3, #2
 8002b3c:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(ADS1118_CS_GPIO_Port, &GPIO_InitStruct);
 8002b3e:	1d3b      	adds	r3, r7, #4
 8002b40:	4619      	mov	r1, r3
 8002b42:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002b46:	f001 f90b 	bl	8003d60 <HAL_GPIO_Init>

	// Configure GPIO pin for DRDY (interrupt from ADS1299)
	GPIO_InitStruct.Pin = ADS1299_nDRDY_Pin;
 8002b4a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002b4e:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;  // Interrupt on falling edge
 8002b50:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002b54:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b56:	2300      	movs	r3, #0
 8002b58:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(ADS1299_nDRDY_GPIO_Port, &GPIO_InitStruct);
 8002b5a:	1d3b      	adds	r3, r7, #4
 8002b5c:	4619      	mov	r1, r3
 8002b5e:	4844      	ldr	r0, [pc, #272]	@ (8002c70 <MX_GPIO_Init+0x1d8>)
 8002b60:	f001 f8fe 	bl	8003d60 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = ADS1299_CS_Pin;
 8002b64:	2310      	movs	r3, #16
 8002b66:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b70:	2302      	movs	r3, #2
 8002b72:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(ADS1299_CS_GPIO_Port, &GPIO_InitStruct);
 8002b74:	1d3b      	adds	r3, r7, #4
 8002b76:	4619      	mov	r1, r3
 8002b78:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002b7c:	f001 f8f0 	bl	8003d60 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = ADS1299_nRESET_Pin|ADS1299_nPWDN_Pin;
 8002b80:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8002b84:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b86:	2301      	movs	r3, #1
 8002b88:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(ADS1299_nRESET_GPIO_Port, &GPIO_InitStruct);
 8002b92:	1d3b      	adds	r3, r7, #4
 8002b94:	4619      	mov	r1, r3
 8002b96:	4836      	ldr	r0, [pc, #216]	@ (8002c70 <MX_GPIO_Init+0x1d8>)
 8002b98:	f001 f8e2 	bl	8003d60 <HAL_GPIO_Init>

	/*Configure GPIO pins : PCPin PCPin PCPin */
	GPIO_InitStruct.Pin = ADS1299_START_Pin;
 8002b9c:	2340      	movs	r3, #64	@ 0x40
 8002b9e:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002ba4:	2302      	movs	r3, #2
 8002ba6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(ADS1299_START_GPIO_Port, &GPIO_InitStruct);
 8002bac:	1d3b      	adds	r3, r7, #4
 8002bae:	4619      	mov	r1, r3
 8002bb0:	482f      	ldr	r0, [pc, #188]	@ (8002c70 <MX_GPIO_Init+0x1d8>)
 8002bb2:	f001 f8d5 	bl	8003d60 <HAL_GPIO_Init>

	/**SPI1 GPIO Configuration */
	GPIO_InitStruct.Pin = SPI1_SCLK_Pin|SPI1_MOSI_Pin;
 8002bb6:	2382      	movs	r3, #130	@ 0x82
 8002bb8:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bba:	2302      	movs	r3, #2
 8002bbc:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002bc2:	2302      	movs	r3, #2
 8002bc4:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002bc6:	2305      	movs	r3, #5
 8002bc8:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(SPI1_SCLK_GPIO_Port, &GPIO_InitStruct);
 8002bca:	1d3b      	adds	r3, r7, #4
 8002bcc:	4619      	mov	r1, r3
 8002bce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002bd2:	f001 f8c5 	bl	8003d60 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = SPI1_MISO_Pin;
 8002bd6:	2310      	movs	r3, #16
 8002bd8:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bda:	2302      	movs	r3, #2
 8002bdc:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bde:	2300      	movs	r3, #0
 8002be0:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002be2:	2302      	movs	r3, #2
 8002be4:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002be6:	2305      	movs	r3, #5
 8002be8:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(SPI1_MISO_GPIO_Port, &GPIO_InitStruct);
 8002bea:	1d3b      	adds	r3, r7, #4
 8002bec:	4619      	mov	r1, r3
 8002bee:	4821      	ldr	r0, [pc, #132]	@ (8002c74 <MX_GPIO_Init+0x1dc>)
 8002bf0:	f001 f8b6 	bl	8003d60 <HAL_GPIO_Init>

	/* Configure I2C3 SDA (PB11) and SCL (PB13) */
	GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_13;
 8002bf4:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8002bf8:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002bfa:	2312      	movs	r3, #18
 8002bfc:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c02:	2303      	movs	r3, #3
 8002c04:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002c06:	2304      	movs	r3, #4
 8002c08:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c0a:	1d3b      	adds	r3, r7, #4
 8002c0c:	4619      	mov	r1, r3
 8002c0e:	4819      	ldr	r0, [pc, #100]	@ (8002c74 <MX_GPIO_Init+0x1dc>)
 8002c10:	f001 f8a6 	bl	8003d60 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(ADS1299_CS_GPIO_Port, ADS1299_CS_Pin, GPIO_PIN_SET);
 8002c14:	2201      	movs	r2, #1
 8002c16:	2110      	movs	r1, #16
 8002c18:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002c1c:	f001 fa10 	bl	8004040 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ADS1118_CS_GPIO_Port, ADS1118_CS_Pin, GPIO_PIN_SET);
 8002c20:	2201      	movs	r2, #1
 8002c22:	2140      	movs	r1, #64	@ 0x40
 8002c24:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002c28:	f001 fa0a 	bl	8004040 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ADS1299_nRESET_GPIO_Port, ADS1299_nRESET_Pin|ADS1299_nPWDN_Pin, GPIO_PIN_RESET);
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 8002c32:	480f      	ldr	r0, [pc, #60]	@ (8002c70 <MX_GPIO_Init+0x1d8>)
 8002c34:	f001 fa04 	bl	8004040 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ADS1299_START_GPIO_Port, ADS1299_START_Pin, GPIO_PIN_SET);
 8002c38:	2201      	movs	r2, #1
 8002c3a:	2140      	movs	r1, #64	@ 0x40
 8002c3c:	480c      	ldr	r0, [pc, #48]	@ (8002c70 <MX_GPIO_Init+0x1d8>)
 8002c3e:	f001 f9ff 	bl	8004040 <HAL_GPIO_WritePin>

	/* Enable and set EXTI line interrupt priority */
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 2, 0);   // Priority level 2
 8002c42:	2200      	movs	r2, #0
 8002c44:	2102      	movs	r1, #2
 8002c46:	2017      	movs	r0, #23
 8002c48:	f000 fcf9 	bl	800363e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);          // Enable the interrupt
 8002c4c:	2017      	movs	r0, #23
 8002c4e:	f000 fd10 	bl	8003672 <HAL_NVIC_EnableIRQ>

	HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_RESET);
 8002c52:	2200      	movs	r2, #0
 8002c54:	2101      	movs	r1, #1
 8002c56:	4807      	ldr	r0, [pc, #28]	@ (8002c74 <MX_GPIO_Init+0x1dc>)
 8002c58:	f001 f9f2 	bl	8004040 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_RESET);
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	2102      	movs	r1, #2
 8002c60:	4804      	ldr	r0, [pc, #16]	@ (8002c74 <MX_GPIO_Init+0x1dc>)
 8002c62:	f001 f9ed 	bl	8004040 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
#endif

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002c66:	bf00      	nop
 8002c68:	3718      	adds	r7, #24
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	48000800 	.word	0x48000800
 8002c74:	48000400 	.word	0x48000400

08002c78 <PeriphClock_Config>:



/* USER CODE BEGIN 4 */
void PeriphClock_Config(void)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	af00      	add	r7, sp, #0

	/* Start automatic synchronization */
	HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
#endif

	return;
 8002c7c:	bf00      	nop
}
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr
	...

08002c88 <MX_TIM2_Init>:




static void MX_TIM2_Init(void)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	af00      	add	r7, sp, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002c8c:	2001      	movs	r0, #1
 8002c8e:	f7ff fcd5 	bl	800263c <LL_APB1_GRP1_EnableClock>

    htim2.Instance = TIM2;
 8002c92:	4b1a      	ldr	r3, [pc, #104]	@ (8002cfc <MX_TIM2_Init+0x74>)
 8002c94:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002c98:	601a      	str	r2, [r3, #0]
    htim2.Init.Prescaler = (uint32_t)(HAL_RCC_GetPCLK1Freq() / 2000) - 1;
 8002c9a:	f003 f909 	bl	8005eb0 <HAL_RCC_GetPCLK1Freq>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	4a17      	ldr	r2, [pc, #92]	@ (8002d00 <MX_TIM2_Init+0x78>)
 8002ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ca6:	09db      	lsrs	r3, r3, #7
 8002ca8:	3b01      	subs	r3, #1
 8002caa:	4a14      	ldr	r2, [pc, #80]	@ (8002cfc <MX_TIM2_Init+0x74>)
 8002cac:	6053      	str	r3, [r2, #4]
    htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cae:	4b13      	ldr	r3, [pc, #76]	@ (8002cfc <MX_TIM2_Init+0x74>)
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	609a      	str	r2, [r3, #8]
    htim2.Init.Period = 500;
 8002cb4:	4b11      	ldr	r3, [pc, #68]	@ (8002cfc <MX_TIM2_Init+0x74>)
 8002cb6:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8002cba:	60da      	str	r2, [r3, #12]
    htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cbc:	4b0f      	ldr	r3, [pc, #60]	@ (8002cfc <MX_TIM2_Init+0x74>)
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	611a      	str	r2, [r3, #16]
    htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cc2:	4b0e      	ldr	r3, [pc, #56]	@ (8002cfc <MX_TIM2_Init+0x74>)
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	619a      	str	r2, [r3, #24]

    if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002cc8:	480c      	ldr	r0, [pc, #48]	@ (8002cfc <MX_TIM2_Init+0x74>)
 8002cca:	f004 fe63 	bl	8007994 <HAL_TIM_Base_Init>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d001      	beq.n	8002cd8 <MX_TIM2_Init+0x50>
    {
        Error_Handler(); // Handle initialization error
 8002cd4:	f000 f8ac 	bl	8002e30 <Error_Handler>
    }

    HAL_NVIC_SetPriority(TIM2_IRQn, 15, 0);
 8002cd8:	2200      	movs	r2, #0
 8002cda:	210f      	movs	r1, #15
 8002cdc:	201c      	movs	r0, #28
 8002cde:	f000 fcae 	bl	800363e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002ce2:	201c      	movs	r0, #28
 8002ce4:	f000 fcc5 	bl	8003672 <HAL_NVIC_EnableIRQ>

        // Start the timer interrupt
    if (HAL_TIM_Base_Start_IT(&htim2) != HAL_OK)
 8002ce8:	4804      	ldr	r0, [pc, #16]	@ (8002cfc <MX_TIM2_Init+0x74>)
 8002cea:	f004 feb5 	bl	8007a58 <HAL_TIM_Base_Start_IT>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d001      	beq.n	8002cf8 <MX_TIM2_Init+0x70>
    {
        Error_Handler(); // Handle start error
 8002cf4:	f000 f89c 	bl	8002e30 <Error_Handler>
    }
}
 8002cf8:	bf00      	nop
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	2000039c 	.word	0x2000039c
 8002d00:	10624dd3 	.word	0x10624dd3

08002d04 <HAL_TIM_PeriodElapsedCallback>:



// Timer interrupt handler
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b082      	sub	sp, #8
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d14:	d12e      	bne.n	8002d74 <HAL_TIM_PeriodElapsedCallback+0x70>
    {
        led_counter += 1; // Each interrupt = 1ms (from timer settings)
 8002d16:	4b20      	ldr	r3, [pc, #128]	@ (8002d98 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	3301      	adds	r3, #1
 8002d1c:	4a1e      	ldr	r2, [pc, #120]	@ (8002d98 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8002d1e:	6013      	str	r3, [r2, #0]

        if (is_connected())
 8002d20:	f00a fe8a 	bl	800da38 <is_connected>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d00b      	beq.n	8002d42 <HAL_TIM_PeriodElapsedCallback+0x3e>
        {
            // Force LED ON and reset state/counter
            HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_SET);
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	2102      	movs	r1, #2
 8002d2e:	481b      	ldr	r0, [pc, #108]	@ (8002d9c <HAL_TIM_PeriodElapsedCallback+0x98>)
 8002d30:	f001 f986 	bl	8004040 <HAL_GPIO_WritePin>
            led_state = GPIO_PIN_SET;
 8002d34:	4b1a      	ldr	r3, [pc, #104]	@ (8002da0 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8002d36:	2201      	movs	r2, #1
 8002d38:	701a      	strb	r2, [r3, #0]
            led_counter = 0;
 8002d3a:	4b17      	ldr	r3, [pc, #92]	@ (8002d98 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	601a      	str	r2, [r3, #0]
    	if(is_connected()){
    		UTIL_SEQ_SetTask( 1<<CFG_TASK_IMU_SAMPLE_ID, CFG_SCH_PRIO_0);
    	}

    }
}
 8002d40:	e026      	b.n	8002d90 <HAL_TIM_PeriodElapsedCallback+0x8c>
            if (led_counter >= 1) // 2 seconds
 8002d42:	4b15      	ldr	r3, [pc, #84]	@ (8002d98 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d022      	beq.n	8002d90 <HAL_TIM_PeriodElapsedCallback+0x8c>
                led_counter = 0;
 8002d4a:	4b13      	ldr	r3, [pc, #76]	@ (8002d98 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	601a      	str	r2, [r3, #0]
                led_state = (led_state == GPIO_PIN_SET) ? GPIO_PIN_RESET : GPIO_PIN_SET;
 8002d50:	4b13      	ldr	r3, [pc, #76]	@ (8002da0 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8002d52:	781b      	ldrb	r3, [r3, #0]
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	bf14      	ite	ne
 8002d58:	2301      	movne	r3, #1
 8002d5a:	2300      	moveq	r3, #0
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	461a      	mov	r2, r3
 8002d60:	4b0f      	ldr	r3, [pc, #60]	@ (8002da0 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8002d62:	701a      	strb	r2, [r3, #0]
                HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, led_state);
 8002d64:	4b0e      	ldr	r3, [pc, #56]	@ (8002da0 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	461a      	mov	r2, r3
 8002d6a:	2102      	movs	r1, #2
 8002d6c:	480b      	ldr	r0, [pc, #44]	@ (8002d9c <HAL_TIM_PeriodElapsedCallback+0x98>)
 8002d6e:	f001 f967 	bl	8004040 <HAL_GPIO_WritePin>
}
 8002d72:	e00d      	b.n	8002d90 <HAL_TIM_PeriodElapsedCallback+0x8c>
    else if (htim->Instance == TIM17){
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a0a      	ldr	r2, [pc, #40]	@ (8002da4 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d108      	bne.n	8002d90 <HAL_TIM_PeriodElapsedCallback+0x8c>
    	if(is_connected()){
 8002d7e:	f00a fe5b 	bl	800da38 <is_connected>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d003      	beq.n	8002d90 <HAL_TIM_PeriodElapsedCallback+0x8c>
    		UTIL_SEQ_SetTask( 1<<CFG_TASK_IMU_SAMPLE_ID, CFG_SCH_PRIO_0);
 8002d88:	2100      	movs	r1, #0
 8002d8a:	2010      	movs	r0, #16
 8002d8c:	f00b fa0c 	bl	800e1a8 <UTIL_SEQ_SetTask>
}
 8002d90:	bf00      	nop
 8002d92:	3708      	adds	r7, #8
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	20000434 	.word	0x20000434
 8002d9c:	48000400 	.word	0x48000400
 8002da0:	20000438 	.word	0x20000438
 8002da4:	40014800 	.word	0x40014800

08002da8 <MX_TIM17_Init>:




void MX_TIM17_Init(void)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	af00      	add	r7, sp, #0
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002dac:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8002db0:	f7ff fc5d 	bl	800266e <LL_APB2_GRP1_EnableClock>

    htim17.Instance = TIM17;
 8002db4:	4b1b      	ldr	r3, [pc, #108]	@ (8002e24 <MX_TIM17_Init+0x7c>)
 8002db6:	4a1c      	ldr	r2, [pc, #112]	@ (8002e28 <MX_TIM17_Init+0x80>)
 8002db8:	601a      	str	r2, [r3, #0]
    htim17.Init.Prescaler = (uint32_t)(HAL_RCC_GetPCLK2Freq() / 1000) - 1;  // TIM17 is on APB2
 8002dba:	f003 f88f 	bl	8005edc <HAL_RCC_GetPCLK2Freq>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	4a1a      	ldr	r2, [pc, #104]	@ (8002e2c <MX_TIM17_Init+0x84>)
 8002dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8002dc6:	099b      	lsrs	r3, r3, #6
 8002dc8:	3b01      	subs	r3, #1
 8002dca:	4a16      	ldr	r2, [pc, #88]	@ (8002e24 <MX_TIM17_Init+0x7c>)
 8002dcc:	6053      	str	r3, [r2, #4]
    htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dce:	4b15      	ldr	r3, [pc, #84]	@ (8002e24 <MX_TIM17_Init+0x7c>)
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	609a      	str	r2, [r3, #8]
    htim17.Init.Period = 1000 - 1;
 8002dd4:	4b13      	ldr	r3, [pc, #76]	@ (8002e24 <MX_TIM17_Init+0x7c>)
 8002dd6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002dda:	60da      	str	r2, [r3, #12]
    htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ddc:	4b11      	ldr	r3, [pc, #68]	@ (8002e24 <MX_TIM17_Init+0x7c>)
 8002dde:	2200      	movs	r2, #0
 8002de0:	611a      	str	r2, [r3, #16]
    htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002de2:	4b10      	ldr	r3, [pc, #64]	@ (8002e24 <MX_TIM17_Init+0x7c>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	619a      	str	r2, [r3, #24]
    htim17.Init.RepetitionCounter = 0;
 8002de8:	4b0e      	ldr	r3, [pc, #56]	@ (8002e24 <MX_TIM17_Init+0x7c>)
 8002dea:	2200      	movs	r2, #0
 8002dec:	615a      	str	r2, [r3, #20]

    if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8002dee:	480d      	ldr	r0, [pc, #52]	@ (8002e24 <MX_TIM17_Init+0x7c>)
 8002df0:	f004 fdd0 	bl	8007994 <HAL_TIM_Base_Init>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d001      	beq.n	8002dfe <MX_TIM17_Init+0x56>
    {
        Error_Handler();
 8002dfa:	f000 f819 	bl	8002e30 <Error_Handler>
    }

    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 5, 0);  // Different interrupt for TIM17
 8002dfe:	2200      	movs	r2, #0
 8002e00:	2105      	movs	r1, #5
 8002e02:	201a      	movs	r0, #26
 8002e04:	f000 fc1b 	bl	800363e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8002e08:	201a      	movs	r0, #26
 8002e0a:	f000 fc32 	bl	8003672 <HAL_NVIC_EnableIRQ>

    if (HAL_TIM_Base_Start_IT(&htim17) != HAL_OK)
 8002e0e:	4805      	ldr	r0, [pc, #20]	@ (8002e24 <MX_TIM17_Init+0x7c>)
 8002e10:	f004 fe22 	bl	8007a58 <HAL_TIM_Base_Start_IT>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d001      	beq.n	8002e1e <MX_TIM17_Init+0x76>
    {
        Error_Handler();
 8002e1a:	f000 f809 	bl	8002e30 <Error_Handler>
    }
}
 8002e1e:	bf00      	nop
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	200003e8 	.word	0x200003e8
 8002e28:	40014800 	.word	0x40014800
 8002e2c:	10624dd3 	.word	0x10624dd3

08002e30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002e30:	b480      	push	{r7}
 8002e32:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002e34:	b672      	cpsid	i
}
 8002e36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002e38:	bf00      	nop
 8002e3a:	e7fd      	b.n	8002e38 <Error_Handler+0x8>

08002e3c <LL_RCC_SetRTCClockSource>:
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_LSI
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_HSE_DIV32
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetRTCClockSource(uint32_t Source)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b083      	sub	sp, #12
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002e44:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e4c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002e50:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8002e5c:	bf00      	nop
 8002e5e:	370c      	adds	r7, #12
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr

08002e68 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8002e6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e74:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002e78:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002e7c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002e80:	bf00      	nop
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr

08002e8a <LL_AHB2_GRP1_EnableClock>:
{
 8002e8a:	b480      	push	{r7}
 8002e8c:	b085      	sub	sp, #20
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002e92:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e96:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002e98:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002ea2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ea6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	4013      	ands	r3, r2
 8002eac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002eae:	68fb      	ldr	r3, [r7, #12]
}
 8002eb0:	bf00      	nop
 8002eb2:	3714      	adds	r7, #20
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr

08002ebc <LL_AHB3_GRP1_EnableClock>:
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b085      	sub	sp, #20
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8002ec4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ec8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002eca:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8002ed4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ed8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4013      	ands	r3, r2
 8002ede:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
}
 8002ee2:	bf00      	nop
 8002ee4:	3714      	adds	r7, #20
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr

08002eee <LL_APB1_GRP1_EnableClock>:
{
 8002eee:	b480      	push	{r7}
 8002ef0:	b085      	sub	sp, #20
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002ef6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002efa:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002efc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002f06:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f0a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	4013      	ands	r3, r2
 8002f10:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002f12:	68fb      	ldr	r3, [r7, #12]
}
 8002f14:	bf00      	nop
 8002f16:	3714      	adds	r7, #20
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr

08002f20 <LL_APB2_GRP1_EnableClock>:
{
 8002f20:	b480      	push	{r7}
 8002f22:	b085      	sub	sp, #20
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002f28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f2c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002f2e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	4313      	orrs	r3, r2
 8002f36:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002f38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f3c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4013      	ands	r3, r2
 8002f42:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002f44:	68fb      	ldr	r3, [r7, #12]
}
 8002f46:	bf00      	nop
 8002f48:	3714      	adds	r7, #20
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr

08002f52 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f52:	b580      	push	{r7, lr}
 8002f54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8002f56:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002f5a:	f7ff ffaf 	bl	8002ebc <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8002f5e:	2200      	movs	r2, #0
 8002f60:	2100      	movs	r1, #0
 8002f62:	202e      	movs	r0, #46	@ 0x2e
 8002f64:	f000 fb6b 	bl	800363e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8002f68:	202e      	movs	r0, #46	@ 0x2e
 8002f6a:	f000 fb82 	bl	8003672 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f6e:	bf00      	nop
 8002f70:	bd80      	pop	{r7, pc}
	...

08002f74 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b082      	sub	sp, #8
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a05      	ldr	r2, [pc, #20]	@ (8002f98 <HAL_IPCC_MspInit+0x24>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d103      	bne.n	8002f8e <HAL_IPCC_MspInit+0x1a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8002f86:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8002f8a:	f7ff ff97 	bl	8002ebc <LL_AHB3_GRP1_EnableClock>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 8002f8e:	bf00      	nop
 8002f90:	3708      	adds	r7, #8
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop
 8002f98:	58000c00 	.word	0x58000c00

08002f9c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b096      	sub	sp, #88	@ 0x58
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002fa4:	f107 0308 	add.w	r3, r7, #8
 8002fa8:	2250      	movs	r2, #80	@ 0x50
 8002faa:	2100      	movs	r1, #0
 8002fac:	4618      	mov	r0, r3
 8002fae:	f00b fc29 	bl	800e804 <memset>
  if(hrtc->Instance==RTC)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a14      	ldr	r2, [pc, #80]	@ (8003008 <HAL_RTC_MspInit+0x6c>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d120      	bne.n	8002ffe <HAL_RTC_MspInit+0x62>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */
  HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8002fbc:	f001 feb0 	bl	8004d20 <HAL_PWR_EnableBkUpAccess>

  /**
  *  Write twice the value to flush the APB-AHB bridge
  *  This bit shall be written in the register before writing the next one
  */
  HAL_PWR_EnableBkUpAccess();
 8002fc0:	f001 feae 	bl	8004d20 <HAL_PWR_EnableBkUpAccess>

  __HAL_RCC_RTC_CONFIG(RCC_RTCCLKSOURCE_LSE); /**< Select LSI as RTC Input */
 8002fc4:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8002fc8:	f7ff ff38 	bl	8002e3c <LL_RCC_SetRTCClockSource>
  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002fcc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002fd0:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002fd2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002fd6:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002fd8:	f107 0308 	add.w	r3, r7, #8
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f003 f9e4 	bl	80063aa <HAL_RCCEx_PeriphCLKConfig>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d001      	beq.n	8002fec <HAL_RTC_MspInit+0x50>
    {
      Error_Handler();
 8002fe8:	f7ff ff22 	bl	8002e30 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002fec:	f7ff ff3c 	bl	8002e68 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002ff0:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8002ff4:	f7ff ff7b 	bl	8002eee <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */
  HAL_RTCEx_EnableBypassShadow(hrtc);
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f003 fd5d 	bl	8006ab8 <HAL_RTCEx_EnableBypassShadow>
  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002ffe:	bf00      	nop
 8003000:	3758      	adds	r7, #88	@ 0x58
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
 8003006:	bf00      	nop
 8003008:	40002800 	.word	0x40002800

0800300c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b09c      	sub	sp, #112	@ 0x70
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003014:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8003018:	2200      	movs	r2, #0
 800301a:	601a      	str	r2, [r3, #0]
 800301c:	605a      	str	r2, [r3, #4]
 800301e:	609a      	str	r2, [r3, #8]
 8003020:	60da      	str	r2, [r3, #12]
 8003022:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003024:	f107 030c 	add.w	r3, r7, #12
 8003028:	2250      	movs	r2, #80	@ 0x50
 800302a:	2100      	movs	r1, #0
 800302c:	4618      	mov	r0, r3
 800302e:	f00b fbe9 	bl	800e804 <memset>
  if(huart->Instance==USART1)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a2e      	ldr	r2, [pc, #184]	@ (80030f0 <HAL_UART_MspInit+0xe4>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d155      	bne.n	80030e8 <HAL_UART_MspInit+0xdc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800303c:	2301      	movs	r3, #1
 800303e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003040:	2300      	movs	r3, #0
 8003042:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003044:	f107 030c 	add.w	r3, r7, #12
 8003048:	4618      	mov	r0, r3
 800304a:	f003 f9ae 	bl	80063aa <HAL_RCCEx_PeriphCLKConfig>
 800304e:	4603      	mov	r3, r0
 8003050:	2b00      	cmp	r3, #0
 8003052:	d001      	beq.n	8003058 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003054:	f7ff feec 	bl	8002e30 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003058:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800305c:	f7ff ff60 	bl	8002f20 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003060:	2002      	movs	r0, #2
 8003062:	f7ff ff12 	bl	8002e8a <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin|VCP_TX_Pin;
 8003066:	23c0      	movs	r3, #192	@ 0xc0
 8003068:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800306a:	2302      	movs	r3, #2
 800306c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800306e:	2301      	movs	r3, #1
 8003070:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003072:	2303      	movs	r3, #3
 8003074:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003076:	2307      	movs	r3, #7
 8003078:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800307a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800307e:	4619      	mov	r1, r3
 8003080:	481c      	ldr	r0, [pc, #112]	@ (80030f4 <HAL_UART_MspInit+0xe8>)
 8003082:	f000 fe6d 	bl	8003d60 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Channel4;
 8003086:	4b1c      	ldr	r3, [pc, #112]	@ (80030f8 <HAL_UART_MspInit+0xec>)
 8003088:	4a1c      	ldr	r2, [pc, #112]	@ (80030fc <HAL_UART_MspInit+0xf0>)
 800308a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 800308c:	4b1a      	ldr	r3, [pc, #104]	@ (80030f8 <HAL_UART_MspInit+0xec>)
 800308e:	220f      	movs	r2, #15
 8003090:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003092:	4b19      	ldr	r3, [pc, #100]	@ (80030f8 <HAL_UART_MspInit+0xec>)
 8003094:	2210      	movs	r2, #16
 8003096:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003098:	4b17      	ldr	r3, [pc, #92]	@ (80030f8 <HAL_UART_MspInit+0xec>)
 800309a:	2200      	movs	r2, #0
 800309c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800309e:	4b16      	ldr	r3, [pc, #88]	@ (80030f8 <HAL_UART_MspInit+0xec>)
 80030a0:	2280      	movs	r2, #128	@ 0x80
 80030a2:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80030a4:	4b14      	ldr	r3, [pc, #80]	@ (80030f8 <HAL_UART_MspInit+0xec>)
 80030a6:	2200      	movs	r2, #0
 80030a8:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80030aa:	4b13      	ldr	r3, [pc, #76]	@ (80030f8 <HAL_UART_MspInit+0xec>)
 80030ac:	2200      	movs	r2, #0
 80030ae:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80030b0:	4b11      	ldr	r3, [pc, #68]	@ (80030f8 <HAL_UART_MspInit+0xec>)
 80030b2:	2200      	movs	r2, #0
 80030b4:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80030b6:	4b10      	ldr	r3, [pc, #64]	@ (80030f8 <HAL_UART_MspInit+0xec>)
 80030b8:	2200      	movs	r2, #0
 80030ba:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80030bc:	480e      	ldr	r0, [pc, #56]	@ (80030f8 <HAL_UART_MspInit+0xec>)
 80030be:	f000 fb1d 	bl	80036fc <HAL_DMA_Init>
 80030c2:	4603      	mov	r3, r0
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d001      	beq.n	80030cc <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 80030c8:	f7ff feb2 	bl	8002e30 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	4a0a      	ldr	r2, [pc, #40]	@ (80030f8 <HAL_UART_MspInit+0xec>)
 80030d0:	67da      	str	r2, [r3, #124]	@ 0x7c
 80030d2:	4a09      	ldr	r2, [pc, #36]	@ (80030f8 <HAL_UART_MspInit+0xec>)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80030d8:	2200      	movs	r2, #0
 80030da:	2100      	movs	r1, #0
 80030dc:	2024      	movs	r0, #36	@ 0x24
 80030de:	f000 faae 	bl	800363e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80030e2:	2024      	movs	r0, #36	@ 0x24
 80030e4:	f000 fac5 	bl	8003672 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80030e8:	bf00      	nop
 80030ea:	3770      	adds	r7, #112	@ 0x70
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}
 80030f0:	40013800 	.word	0x40013800
 80030f4:	48000400 	.word	0x48000400
 80030f8:	20000284 	.word	0x20000284
 80030fc:	40020444 	.word	0x40020444

08003100 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003100:	b480      	push	{r7}
 8003102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003104:	bf00      	nop
 8003106:	e7fd      	b.n	8003104 <NMI_Handler+0x4>

08003108 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003108:	b480      	push	{r7}
 800310a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800310c:	bf00      	nop
 800310e:	e7fd      	b.n	800310c <HardFault_Handler+0x4>

08003110 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003110:	b480      	push	{r7}
 8003112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003114:	bf00      	nop
 8003116:	e7fd      	b.n	8003114 <MemManage_Handler+0x4>

08003118 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003118:	b480      	push	{r7}
 800311a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800311c:	bf00      	nop
 800311e:	e7fd      	b.n	800311c <BusFault_Handler+0x4>

08003120 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003120:	b480      	push	{r7}
 8003122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003124:	bf00      	nop
 8003126:	e7fd      	b.n	8003124 <UsageFault_Handler+0x4>

08003128 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003128:	b480      	push	{r7}
 800312a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800312c:	bf00      	nop
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr

08003136 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003136:	b480      	push	{r7}
 8003138:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800313a:	bf00      	nop
 800313c:	46bd      	mov	sp, r7
 800313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003142:	4770      	bx	lr

08003144 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003144:	b480      	push	{r7}
 8003146:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003148:	bf00      	nop
 800314a:	46bd      	mov	sp, r7
 800314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003150:	4770      	bx	lr

08003152 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003152:	b580      	push	{r7, lr}
 8003154:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003156:	f000 f8ff 	bl	8003358 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800315a:	bf00      	nop
 800315c:	bd80      	pop	{r7, pc}
	...

08003160 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003164:	4802      	ldr	r0, [pc, #8]	@ (8003170 <USART1_IRQHandler+0x10>)
 8003166:	f004 ff73 	bl	8008050 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800316a:	bf00      	nop
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	200001f0 	.word	0x200001f0

08003174 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8003178:	f000 ff92 	bl	80040a0 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 800317c:	bf00      	nop
 800317e:	bd80      	pop	{r7, pc}

08003180 <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003184:	4802      	ldr	r0, [pc, #8]	@ (8003190 <DMA2_Channel4_IRQHandler+0x10>)
 8003186:	f000 fc9a 	bl	8003abe <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 800318a:	bf00      	nop
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	20000284 	.word	0x20000284

08003194 <IPCC_C1_RX_IRQHandler>:
/* USER CODE BEGIN 1 */
/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8003198:	f00a fd68 	bl	800dc6c <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 800319c:	bf00      	nop
 800319e:	bd80      	pop	{r7, pc}

080031a0 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 80031a4:	f00a fd98 	bl	800dcd8 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 80031a8:	bf00      	nop
 80031aa:	bd80      	pop	{r7, pc}

080031ac <EXTI15_10_IRQHandler>:
 *         interrupt request.
 * @param  None
 * @retval None
 */
void PUSH_BUTTON_SW_EXTI_IRQHandler(void)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80031b0:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80031b4:	f000 ff5c 	bl	8004070 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80031b8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80031bc:	f000 ff58 	bl	8004070 <HAL_GPIO_EXTI_IRQHandler>
}
 80031c0:	bf00      	nop
 80031c2:	bd80      	pop	{r7, pc}

080031c4 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(ADS1299_nDRDY_Pin);
 80031c8:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80031cc:	f000 ff50 	bl	8004070 <HAL_GPIO_EXTI_IRQHandler>
}
 80031d0:	bf00      	nop
 80031d2:	bd80      	pop	{r7, pc}

080031d4 <RTC_WKUP_IRQHandler>:

void RTC_WKUP_IRQHandler(void)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	af00      	add	r7, sp, #0
  HAL_RTCEx_WakeUpTimerIRQHandler();
 80031d8:	f7fe fd2c 	bl	8001c34 <HW_TS_RTC_Wakeup_Handler>
}
 80031dc:	bf00      	nop
 80031de:	bd80      	pop	{r7, pc}

080031e0 <TIM1_TRG_COM_TIM17_IRQHandler>:
  * @brief  This function handles TIM17 IRQ Handler.
  * @param  None
  * @retval None
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	af00      	add	r7, sp, #0
    HAL_TIM_IRQHandler(&htim17);
 80031e4:	4802      	ldr	r0, [pc, #8]	@ (80031f0 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 80031e6:	f004 fc85 	bl	8007af4 <HAL_TIM_IRQHandler>
}
 80031ea:	bf00      	nop
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	200003e8 	.word	0x200003e8

080031f4 <TIM2_IRQHandler>:


void TIM2_IRQHandler(void)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	af00      	add	r7, sp, #0
    HAL_TIM_IRQHandler(&htim2);
 80031f8:	4802      	ldr	r0, [pc, #8]	@ (8003204 <TIM2_IRQHandler+0x10>)
 80031fa:	f004 fc7b 	bl	8007af4 <HAL_TIM_IRQHandler>
}
 80031fe:	bf00      	nop
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	2000039c 	.word	0x2000039c

08003208 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003208:	b480      	push	{r7}
 800320a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 800320c:	4b07      	ldr	r3, [pc, #28]	@ (800322c <SystemInit+0x24>)
 800320e:	2200      	movs	r2, #0
 8003210:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8003212:	4b06      	ldr	r3, [pc, #24]	@ (800322c <SystemInit+0x24>)
 8003214:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003218:	4a04      	ldr	r2, [pc, #16]	@ (800322c <SystemInit+0x24>)
 800321a:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800321e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  RCC->CR &= 0xFFFBFFFFU;

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
#endif
}
 8003222:	bf00      	nop
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr
 800322c:	e000ed00 	.word	0xe000ed00

08003230 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8003230:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003232:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003234:	3304      	adds	r3, #4

08003236 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003236:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003238:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800323a:	d3f9      	bcc.n	8003230 <CopyDataInit>
  bx lr
 800323c:	4770      	bx	lr

0800323e <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800323e:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8003240:	3004      	adds	r0, #4

08003242 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8003242:	4288      	cmp	r0, r1
  bcc FillZerobss
 8003244:	d3fb      	bcc.n	800323e <FillZerobss>
  bx lr
 8003246:	4770      	bx	lr

08003248 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003248:	480c      	ldr	r0, [pc, #48]	@ (800327c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800324a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800324c:	f7ff ffdc 	bl	8003208 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8003250:	480b      	ldr	r0, [pc, #44]	@ (8003280 <LoopForever+0x6>)
 8003252:	490c      	ldr	r1, [pc, #48]	@ (8003284 <LoopForever+0xa>)
 8003254:	4a0c      	ldr	r2, [pc, #48]	@ (8003288 <LoopForever+0xe>)
 8003256:	2300      	movs	r3, #0
 8003258:	f7ff ffed 	bl	8003236 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 800325c:	480b      	ldr	r0, [pc, #44]	@ (800328c <LoopForever+0x12>)
 800325e:	490c      	ldr	r1, [pc, #48]	@ (8003290 <LoopForever+0x16>)
 8003260:	4a0c      	ldr	r2, [pc, #48]	@ (8003294 <LoopForever+0x1a>)
 8003262:	2300      	movs	r3, #0
 8003264:	f7ff ffe7 	bl	8003236 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8003268:	480b      	ldr	r0, [pc, #44]	@ (8003298 <LoopForever+0x1e>)
 800326a:	490c      	ldr	r1, [pc, #48]	@ (800329c <LoopForever+0x22>)
 800326c:	2300      	movs	r3, #0
 800326e:	f7ff ffe8 	bl	8003242 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003272:	f00b fb15 	bl	800e8a0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8003276:	f7ff fa43 	bl	8002700 <main>

0800327a <LoopForever>:

LoopForever:
  b LoopForever
 800327a:	e7fe      	b.n	800327a <LoopForever>
  ldr   r0, =_estack
 800327c:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8003280:	20000008 	.word	0x20000008
 8003284:	20000088 	.word	0x20000088
 8003288:	08010da0 	.word	0x08010da0
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 800328c:	200301e4 	.word	0x200301e4
 8003290:	20030d8b 	.word	0x20030d8b
 8003294:	08010e4e 	.word	0x08010e4e
  INIT_BSS _sbss, _ebss
 8003298:	200000bc 	.word	0x200000bc
 800329c:	200023c0 	.word	0x200023c0

080032a0 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80032a0:	e7fe      	b.n	80032a0 <ADC1_IRQHandler>
	...

080032a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b082      	sub	sp, #8
 80032a8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80032aa:	2300      	movs	r3, #0
 80032ac:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80032ae:	4b0c      	ldr	r3, [pc, #48]	@ (80032e0 <HAL_Init+0x3c>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a0b      	ldr	r2, [pc, #44]	@ (80032e0 <HAL_Init+0x3c>)
 80032b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032b8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80032ba:	2003      	movs	r0, #3
 80032bc:	f000 f9b4 	bl	8003628 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80032c0:	2000      	movs	r0, #0
 80032c2:	f000 f80f 	bl	80032e4 <HAL_InitTick>
 80032c6:	4603      	mov	r3, r0
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d002      	beq.n	80032d2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	71fb      	strb	r3, [r7, #7]
 80032d0:	e001      	b.n	80032d6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80032d2:	f7ff fe3e 	bl	8002f52 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80032d6:	79fb      	ldrb	r3, [r7, #7]
}
 80032d8:	4618      	mov	r0, r3
 80032da:	3708      	adds	r7, #8
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	58004000 	.word	0x58004000

080032e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b084      	sub	sp, #16
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80032ec:	2300      	movs	r3, #0
 80032ee:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80032f0:	4b17      	ldr	r3, [pc, #92]	@ (8003350 <HAL_InitTick+0x6c>)
 80032f2:	781b      	ldrb	r3, [r3, #0]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d024      	beq.n	8003342 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80032f8:	f002 fdc6 	bl	8005e88 <HAL_RCC_GetHCLKFreq>
 80032fc:	4602      	mov	r2, r0
 80032fe:	4b14      	ldr	r3, [pc, #80]	@ (8003350 <HAL_InitTick+0x6c>)
 8003300:	781b      	ldrb	r3, [r3, #0]
 8003302:	4619      	mov	r1, r3
 8003304:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003308:	fbb3 f3f1 	udiv	r3, r3, r1
 800330c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003310:	4618      	mov	r0, r3
 8003312:	f000 f9ca 	bl	80036aa <HAL_SYSTICK_Config>
 8003316:	4603      	mov	r3, r0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d10f      	bne.n	800333c <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2b0f      	cmp	r3, #15
 8003320:	d809      	bhi.n	8003336 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003322:	2200      	movs	r2, #0
 8003324:	6879      	ldr	r1, [r7, #4]
 8003326:	f04f 30ff 	mov.w	r0, #4294967295
 800332a:	f000 f988 	bl	800363e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800332e:	4a09      	ldr	r2, [pc, #36]	@ (8003354 <HAL_InitTick+0x70>)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6013      	str	r3, [r2, #0]
 8003334:	e007      	b.n	8003346 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	73fb      	strb	r3, [r7, #15]
 800333a:	e004      	b.n	8003346 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	73fb      	strb	r3, [r7, #15]
 8003340:	e001      	b.n	8003346 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003346:	7bfb      	ldrb	r3, [r7, #15]
}
 8003348:	4618      	mov	r0, r3
 800334a:	3710      	adds	r7, #16
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}
 8003350:	20000010 	.word	0x20000010
 8003354:	2000000c 	.word	0x2000000c

08003358 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003358:	b480      	push	{r7}
 800335a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800335c:	4b06      	ldr	r3, [pc, #24]	@ (8003378 <HAL_IncTick+0x20>)
 800335e:	781b      	ldrb	r3, [r3, #0]
 8003360:	461a      	mov	r2, r3
 8003362:	4b06      	ldr	r3, [pc, #24]	@ (800337c <HAL_IncTick+0x24>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4413      	add	r3, r2
 8003368:	4a04      	ldr	r2, [pc, #16]	@ (800337c <HAL_IncTick+0x24>)
 800336a:	6013      	str	r3, [r2, #0]
}
 800336c:	bf00      	nop
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr
 8003376:	bf00      	nop
 8003378:	20000010 	.word	0x20000010
 800337c:	2000043c 	.word	0x2000043c

08003380 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003380:	b480      	push	{r7}
 8003382:	af00      	add	r7, sp, #0
  return uwTick;
 8003384:	4b03      	ldr	r3, [pc, #12]	@ (8003394 <HAL_GetTick+0x14>)
 8003386:	681b      	ldr	r3, [r3, #0]
}
 8003388:	4618      	mov	r0, r3
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr
 8003392:	bf00      	nop
 8003394:	2000043c 	.word	0x2000043c

08003398 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8003398:	b480      	push	{r7}
 800339a:	af00      	add	r7, sp, #0
  return uwTickPrio;
 800339c:	4b03      	ldr	r3, [pc, #12]	@ (80033ac <HAL_GetTickPrio+0x14>)
 800339e:	681b      	ldr	r3, [r3, #0]
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr
 80033aa:	bf00      	nop
 80033ac:	2000000c 	.word	0x2000000c

080033b0 <HAL_GetTickFreq>:
  * @brief Return tick frequency.
  * @retval Tick frequency.
  *         Value of @ref HAL_TickFreqTypeDef.
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 80033b0:	b480      	push	{r7}
 80033b2:	af00      	add	r7, sp, #0
  return uwTickFreq;
 80033b4:	4b03      	ldr	r3, [pc, #12]	@ (80033c4 <HAL_GetTickFreq+0x14>)
 80033b6:	781b      	ldrb	r3, [r3, #0]
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr
 80033c2:	bf00      	nop
 80033c4:	20000010 	.word	0x20000010

080033c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b085      	sub	sp, #20
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	f003 0307 	and.w	r3, r3, #7
 80033d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033d8:	4b0c      	ldr	r3, [pc, #48]	@ (800340c <__NVIC_SetPriorityGrouping+0x44>)
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033de:	68ba      	ldr	r2, [r7, #8]
 80033e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80033e4:	4013      	ands	r3, r2
 80033e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80033f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033fa:	4a04      	ldr	r2, [pc, #16]	@ (800340c <__NVIC_SetPriorityGrouping+0x44>)
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	60d3      	str	r3, [r2, #12]
}
 8003400:	bf00      	nop
 8003402:	3714      	adds	r7, #20
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr
 800340c:	e000ed00 	.word	0xe000ed00

08003410 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003410:	b480      	push	{r7}
 8003412:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003414:	4b04      	ldr	r3, [pc, #16]	@ (8003428 <__NVIC_GetPriorityGrouping+0x18>)
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	0a1b      	lsrs	r3, r3, #8
 800341a:	f003 0307 	and.w	r3, r3, #7
}
 800341e:	4618      	mov	r0, r3
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr
 8003428:	e000ed00 	.word	0xe000ed00

0800342c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800342c:	b480      	push	{r7}
 800342e:	b083      	sub	sp, #12
 8003430:	af00      	add	r7, sp, #0
 8003432:	4603      	mov	r3, r0
 8003434:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800343a:	2b00      	cmp	r3, #0
 800343c:	db0b      	blt.n	8003456 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800343e:	79fb      	ldrb	r3, [r7, #7]
 8003440:	f003 021f 	and.w	r2, r3, #31
 8003444:	4907      	ldr	r1, [pc, #28]	@ (8003464 <__NVIC_EnableIRQ+0x38>)
 8003446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800344a:	095b      	lsrs	r3, r3, #5
 800344c:	2001      	movs	r0, #1
 800344e:	fa00 f202 	lsl.w	r2, r0, r2
 8003452:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003456:	bf00      	nop
 8003458:	370c      	adds	r7, #12
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr
 8003462:	bf00      	nop
 8003464:	e000e100 	.word	0xe000e100

08003468 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003468:	b480      	push	{r7}
 800346a:	b083      	sub	sp, #12
 800346c:	af00      	add	r7, sp, #0
 800346e:	4603      	mov	r3, r0
 8003470:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003476:	2b00      	cmp	r3, #0
 8003478:	db12      	blt.n	80034a0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800347a:	79fb      	ldrb	r3, [r7, #7]
 800347c:	f003 021f 	and.w	r2, r3, #31
 8003480:	490a      	ldr	r1, [pc, #40]	@ (80034ac <__NVIC_DisableIRQ+0x44>)
 8003482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003486:	095b      	lsrs	r3, r3, #5
 8003488:	2001      	movs	r0, #1
 800348a:	fa00 f202 	lsl.w	r2, r0, r2
 800348e:	3320      	adds	r3, #32
 8003490:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003494:	f3bf 8f4f 	dsb	sy
}
 8003498:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800349a:	f3bf 8f6f 	isb	sy
}
 800349e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80034a0:	bf00      	nop
 80034a2:	370c      	adds	r7, #12
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr
 80034ac:	e000e100 	.word	0xe000e100

080034b0 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b083      	sub	sp, #12
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	4603      	mov	r3, r0
 80034b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	db0c      	blt.n	80034dc <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034c2:	79fb      	ldrb	r3, [r7, #7]
 80034c4:	f003 021f 	and.w	r2, r3, #31
 80034c8:	4907      	ldr	r1, [pc, #28]	@ (80034e8 <__NVIC_SetPendingIRQ+0x38>)
 80034ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034ce:	095b      	lsrs	r3, r3, #5
 80034d0:	2001      	movs	r0, #1
 80034d2:	fa00 f202 	lsl.w	r2, r0, r2
 80034d6:	3340      	adds	r3, #64	@ 0x40
 80034d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80034dc:	bf00      	nop
 80034de:	370c      	adds	r7, #12
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr
 80034e8:	e000e100 	.word	0xe000e100

080034ec <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b083      	sub	sp, #12
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	4603      	mov	r3, r0
 80034f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	db0c      	blt.n	8003518 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034fe:	79fb      	ldrb	r3, [r7, #7]
 8003500:	f003 021f 	and.w	r2, r3, #31
 8003504:	4907      	ldr	r1, [pc, #28]	@ (8003524 <__NVIC_ClearPendingIRQ+0x38>)
 8003506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800350a:	095b      	lsrs	r3, r3, #5
 800350c:	2001      	movs	r0, #1
 800350e:	fa00 f202 	lsl.w	r2, r0, r2
 8003512:	3360      	adds	r3, #96	@ 0x60
 8003514:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003518:	bf00      	nop
 800351a:	370c      	adds	r7, #12
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr
 8003524:	e000e100 	.word	0xe000e100

08003528 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003528:	b480      	push	{r7}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
 800352e:	4603      	mov	r3, r0
 8003530:	6039      	str	r1, [r7, #0]
 8003532:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003534:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003538:	2b00      	cmp	r3, #0
 800353a:	db0a      	blt.n	8003552 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	b2da      	uxtb	r2, r3
 8003540:	490c      	ldr	r1, [pc, #48]	@ (8003574 <__NVIC_SetPriority+0x4c>)
 8003542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003546:	0112      	lsls	r2, r2, #4
 8003548:	b2d2      	uxtb	r2, r2
 800354a:	440b      	add	r3, r1
 800354c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003550:	e00a      	b.n	8003568 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	b2da      	uxtb	r2, r3
 8003556:	4908      	ldr	r1, [pc, #32]	@ (8003578 <__NVIC_SetPriority+0x50>)
 8003558:	79fb      	ldrb	r3, [r7, #7]
 800355a:	f003 030f 	and.w	r3, r3, #15
 800355e:	3b04      	subs	r3, #4
 8003560:	0112      	lsls	r2, r2, #4
 8003562:	b2d2      	uxtb	r2, r2
 8003564:	440b      	add	r3, r1
 8003566:	761a      	strb	r2, [r3, #24]
}
 8003568:	bf00      	nop
 800356a:	370c      	adds	r7, #12
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr
 8003574:	e000e100 	.word	0xe000e100
 8003578:	e000ed00 	.word	0xe000ed00

0800357c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800357c:	b480      	push	{r7}
 800357e:	b089      	sub	sp, #36	@ 0x24
 8003580:	af00      	add	r7, sp, #0
 8003582:	60f8      	str	r0, [r7, #12]
 8003584:	60b9      	str	r1, [r7, #8]
 8003586:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f003 0307 	and.w	r3, r3, #7
 800358e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003590:	69fb      	ldr	r3, [r7, #28]
 8003592:	f1c3 0307 	rsb	r3, r3, #7
 8003596:	2b04      	cmp	r3, #4
 8003598:	bf28      	it	cs
 800359a:	2304      	movcs	r3, #4
 800359c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800359e:	69fb      	ldr	r3, [r7, #28]
 80035a0:	3304      	adds	r3, #4
 80035a2:	2b06      	cmp	r3, #6
 80035a4:	d902      	bls.n	80035ac <NVIC_EncodePriority+0x30>
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	3b03      	subs	r3, #3
 80035aa:	e000      	b.n	80035ae <NVIC_EncodePriority+0x32>
 80035ac:	2300      	movs	r3, #0
 80035ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035b0:	f04f 32ff 	mov.w	r2, #4294967295
 80035b4:	69bb      	ldr	r3, [r7, #24]
 80035b6:	fa02 f303 	lsl.w	r3, r2, r3
 80035ba:	43da      	mvns	r2, r3
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	401a      	ands	r2, r3
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035c4:	f04f 31ff 	mov.w	r1, #4294967295
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	fa01 f303 	lsl.w	r3, r1, r3
 80035ce:	43d9      	mvns	r1, r3
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035d4:	4313      	orrs	r3, r2
         );
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3724      	adds	r7, #36	@ 0x24
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr
	...

080035e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b082      	sub	sp, #8
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	3b01      	subs	r3, #1
 80035f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80035f4:	d301      	bcc.n	80035fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80035f6:	2301      	movs	r3, #1
 80035f8:	e00f      	b.n	800361a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80035fa:	4a0a      	ldr	r2, [pc, #40]	@ (8003624 <SysTick_Config+0x40>)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	3b01      	subs	r3, #1
 8003600:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003602:	210f      	movs	r1, #15
 8003604:	f04f 30ff 	mov.w	r0, #4294967295
 8003608:	f7ff ff8e 	bl	8003528 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800360c:	4b05      	ldr	r3, [pc, #20]	@ (8003624 <SysTick_Config+0x40>)
 800360e:	2200      	movs	r2, #0
 8003610:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003612:	4b04      	ldr	r3, [pc, #16]	@ (8003624 <SysTick_Config+0x40>)
 8003614:	2207      	movs	r2, #7
 8003616:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003618:	2300      	movs	r3, #0
}
 800361a:	4618      	mov	r0, r3
 800361c:	3708      	adds	r7, #8
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}
 8003622:	bf00      	nop
 8003624:	e000e010 	.word	0xe000e010

08003628 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b082      	sub	sp, #8
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	f7ff fec9 	bl	80033c8 <__NVIC_SetPriorityGrouping>
}
 8003636:	bf00      	nop
 8003638:	3708      	adds	r7, #8
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}

0800363e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800363e:	b580      	push	{r7, lr}
 8003640:	b086      	sub	sp, #24
 8003642:	af00      	add	r7, sp, #0
 8003644:	4603      	mov	r3, r0
 8003646:	60b9      	str	r1, [r7, #8]
 8003648:	607a      	str	r2, [r7, #4]
 800364a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800364c:	f7ff fee0 	bl	8003410 <__NVIC_GetPriorityGrouping>
 8003650:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003652:	687a      	ldr	r2, [r7, #4]
 8003654:	68b9      	ldr	r1, [r7, #8]
 8003656:	6978      	ldr	r0, [r7, #20]
 8003658:	f7ff ff90 	bl	800357c <NVIC_EncodePriority>
 800365c:	4602      	mov	r2, r0
 800365e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003662:	4611      	mov	r1, r2
 8003664:	4618      	mov	r0, r3
 8003666:	f7ff ff5f 	bl	8003528 <__NVIC_SetPriority>
}
 800366a:	bf00      	nop
 800366c:	3718      	adds	r7, #24
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}

08003672 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003672:	b580      	push	{r7, lr}
 8003674:	b082      	sub	sp, #8
 8003676:	af00      	add	r7, sp, #0
 8003678:	4603      	mov	r3, r0
 800367a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800367c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003680:	4618      	mov	r0, r3
 8003682:	f7ff fed3 	bl	800342c <__NVIC_EnableIRQ>
}
 8003686:	bf00      	nop
 8003688:	3708      	adds	r7, #8
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}

0800368e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800368e:	b580      	push	{r7, lr}
 8003690:	b082      	sub	sp, #8
 8003692:	af00      	add	r7, sp, #0
 8003694:	4603      	mov	r3, r0
 8003696:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003698:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800369c:	4618      	mov	r0, r3
 800369e:	f7ff fee3 	bl	8003468 <__NVIC_DisableIRQ>
}
 80036a2:	bf00      	nop
 80036a4:	3708      	adds	r7, #8
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}

080036aa <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80036aa:	b580      	push	{r7, lr}
 80036ac:	b082      	sub	sp, #8
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f7ff ff96 	bl	80035e4 <SysTick_Config>
 80036b8:	4603      	mov	r3, r0
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3708      	adds	r7, #8
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}

080036c2 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80036c2:	b580      	push	{r7, lr}
 80036c4:	b082      	sub	sp, #8
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	4603      	mov	r3, r0
 80036ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 80036cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036d0:	4618      	mov	r0, r3
 80036d2:	f7ff feed 	bl	80034b0 <__NVIC_SetPendingIRQ>
}
 80036d6:	bf00      	nop
 80036d8:	3708      	adds	r7, #8
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}

080036de <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80036de:	b580      	push	{r7, lr}
 80036e0:	b082      	sub	sp, #8
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	4603      	mov	r3, r0
 80036e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80036e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036ec:	4618      	mov	r0, r3
 80036ee:	f7ff fefd 	bl	80034ec <__NVIC_ClearPendingIRQ>
}
 80036f2:	bf00      	nop
 80036f4:	3708      	adds	r7, #8
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}
	...

080036fc <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b084      	sub	sp, #16
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d101      	bne.n	800370e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e08e      	b.n	800382c <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	461a      	mov	r2, r3
 8003714:	4b47      	ldr	r3, [pc, #284]	@ (8003834 <HAL_DMA_Init+0x138>)
 8003716:	429a      	cmp	r2, r3
 8003718:	d80f      	bhi.n	800373a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	461a      	mov	r2, r3
 8003720:	4b45      	ldr	r3, [pc, #276]	@ (8003838 <HAL_DMA_Init+0x13c>)
 8003722:	4413      	add	r3, r2
 8003724:	4a45      	ldr	r2, [pc, #276]	@ (800383c <HAL_DMA_Init+0x140>)
 8003726:	fba2 2303 	umull	r2, r3, r2, r3
 800372a:	091b      	lsrs	r3, r3, #4
 800372c:	009a      	lsls	r2, r3, #2
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	4a42      	ldr	r2, [pc, #264]	@ (8003840 <HAL_DMA_Init+0x144>)
 8003736:	641a      	str	r2, [r3, #64]	@ 0x40
 8003738:	e00e      	b.n	8003758 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	461a      	mov	r2, r3
 8003740:	4b40      	ldr	r3, [pc, #256]	@ (8003844 <HAL_DMA_Init+0x148>)
 8003742:	4413      	add	r3, r2
 8003744:	4a3d      	ldr	r2, [pc, #244]	@ (800383c <HAL_DMA_Init+0x140>)
 8003746:	fba2 2303 	umull	r2, r3, r2, r3
 800374a:	091b      	lsrs	r3, r3, #4
 800374c:	009a      	lsls	r2, r3, #2
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	4a3c      	ldr	r2, [pc, #240]	@ (8003848 <HAL_DMA_Init+0x14c>)
 8003756:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2202      	movs	r2, #2
 800375c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800376e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003772:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800377c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	691b      	ldr	r3, [r3, #16]
 8003782:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003788:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	699b      	ldr	r3, [r3, #24]
 800378e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003794:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6a1b      	ldr	r3, [r3, #32]
 800379a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800379c:	68fa      	ldr	r2, [r7, #12]
 800379e:	4313      	orrs	r3, r2
 80037a0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	68fa      	ldr	r2, [r7, #12]
 80037a8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f000 fa74 	bl	8003c98 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80037b8:	d102      	bne.n	80037c0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2200      	movs	r2, #0
 80037be:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	685a      	ldr	r2, [r3, #4]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037c8:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80037cc:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037d2:	687a      	ldr	r2, [r7, #4]
 80037d4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80037d6:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d010      	beq.n	8003802 <HAL_DMA_Init+0x106>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	2b04      	cmp	r3, #4
 80037e6:	d80c      	bhi.n	8003802 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f000 fa93 	bl	8003d14 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037f2:	2200      	movs	r2, #0
 80037f4:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037fa:	687a      	ldr	r2, [r7, #4]
 80037fc:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80037fe:	605a      	str	r2, [r3, #4]
 8003800:	e008      	b.n	8003814 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2200      	movs	r2, #0
 8003806:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2200      	movs	r2, #0
 800380c:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2200      	movs	r2, #0
 8003812:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2201      	movs	r2, #1
 800381e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800382a:	2300      	movs	r3, #0
}
 800382c:	4618      	mov	r0, r3
 800382e:	3710      	adds	r7, #16
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}
 8003834:	40020407 	.word	0x40020407
 8003838:	bffdfff8 	.word	0xbffdfff8
 800383c:	cccccccd 	.word	0xcccccccd
 8003840:	40020000 	.word	0x40020000
 8003844:	bffdfbf8 	.word	0xbffdfbf8
 8003848:	40020400 	.word	0x40020400

0800384c <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b086      	sub	sp, #24
 8003850:	af00      	add	r7, sp, #0
 8003852:	60f8      	str	r0, [r7, #12]
 8003854:	60b9      	str	r1, [r7, #8]
 8003856:	607a      	str	r2, [r7, #4]
 8003858:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800385a:	2300      	movs	r3, #0
 800385c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003864:	2b01      	cmp	r3, #1
 8003866:	d101      	bne.n	800386c <HAL_DMA_Start_IT+0x20>
 8003868:	2302      	movs	r3, #2
 800386a:	e066      	b.n	800393a <HAL_DMA_Start_IT+0xee>
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2201      	movs	r2, #1
 8003870:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800387a:	b2db      	uxtb	r3, r3
 800387c:	2b01      	cmp	r3, #1
 800387e:	d155      	bne.n	800392c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2202      	movs	r2, #2
 8003884:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2200      	movs	r2, #0
 800388c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f022 0201 	bic.w	r2, r2, #1
 800389c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	687a      	ldr	r2, [r7, #4]
 80038a2:	68b9      	ldr	r1, [r7, #8]
 80038a4:	68f8      	ldr	r0, [r7, #12]
 80038a6:	f000 f9b9 	bl	8003c1c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d008      	beq.n	80038c4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f042 020e 	orr.w	r2, r2, #14
 80038c0:	601a      	str	r2, [r3, #0]
 80038c2:	e00f      	b.n	80038e4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f022 0204 	bic.w	r2, r2, #4
 80038d2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f042 020a 	orr.w	r2, r2, #10
 80038e2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d007      	beq.n	8003902 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038fc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003900:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003906:	2b00      	cmp	r3, #0
 8003908:	d007      	beq.n	800391a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003914:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003918:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f042 0201 	orr.w	r2, r2, #1
 8003928:	601a      	str	r2, [r3, #0]
 800392a:	e005      	b.n	8003938 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2200      	movs	r2, #0
 8003930:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003934:	2302      	movs	r3, #2
 8003936:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003938:	7dfb      	ldrb	r3, [r7, #23]
}
 800393a:	4618      	mov	r0, r3
 800393c:	3718      	adds	r7, #24
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}

08003942 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003942:	b480      	push	{r7}
 8003944:	b083      	sub	sp, #12
 8003946:	af00      	add	r7, sp, #0
 8003948:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d101      	bne.n	8003954 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	e04f      	b.n	80039f4 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800395a:	b2db      	uxtb	r3, r3
 800395c:	2b02      	cmp	r3, #2
 800395e:	d008      	beq.n	8003972 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2204      	movs	r2, #4
 8003964:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2200      	movs	r2, #0
 800396a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e040      	b.n	80039f4 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f022 020e 	bic.w	r2, r2, #14
 8003980:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800398c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003990:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f022 0201 	bic.w	r2, r2, #1
 80039a0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039a6:	f003 021c 	and.w	r2, r3, #28
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ae:	2101      	movs	r1, #1
 80039b0:	fa01 f202 	lsl.w	r2, r1, r2
 80039b4:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80039be:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d00c      	beq.n	80039e2 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039d2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80039d6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039dc:	687a      	ldr	r2, [r7, #4]
 80039de:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80039e0:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2201      	movs	r2, #1
 80039e6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2200      	movs	r2, #0
 80039ee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 80039f2:	2300      	movs	r3, #0
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	370c      	adds	r7, #12
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr

08003a00 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b084      	sub	sp, #16
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003a12:	b2db      	uxtb	r3, r3
 8003a14:	2b02      	cmp	r3, #2
 8003a16:	d005      	beq.n	8003a24 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2204      	movs	r2, #4
 8003a1c:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	73fb      	strb	r3, [r7, #15]
 8003a22:	e047      	b.n	8003ab4 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	681a      	ldr	r2, [r3, #0]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f022 020e 	bic.w	r2, r2, #14
 8003a32:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f022 0201 	bic.w	r2, r2, #1
 8003a42:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a4e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003a52:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a58:	f003 021c 	and.w	r2, r3, #28
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a60:	2101      	movs	r1, #1
 8003a62:	fa01 f202 	lsl.w	r2, r1, r2
 8003a66:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a6c:	687a      	ldr	r2, [r7, #4]
 8003a6e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003a70:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d00c      	beq.n	8003a94 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a84:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003a88:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003a92:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2201      	movs	r2, #1
 8003a98:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d003      	beq.n	8003ab4 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	4798      	blx	r3
    }
  }
  return status;
 8003ab4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3710      	adds	r7, #16
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}

08003abe <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003abe:	b580      	push	{r7, lr}
 8003ac0:	b084      	sub	sp, #16
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ada:	f003 031c 	and.w	r3, r3, #28
 8003ade:	2204      	movs	r2, #4
 8003ae0:	409a      	lsls	r2, r3
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d026      	beq.n	8003b38 <HAL_DMA_IRQHandler+0x7a>
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	f003 0304 	and.w	r3, r3, #4
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d021      	beq.n	8003b38 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 0320 	and.w	r3, r3, #32
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d107      	bne.n	8003b12 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f022 0204 	bic.w	r2, r2, #4
 8003b10:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b16:	f003 021c 	and.w	r2, r3, #28
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b1e:	2104      	movs	r1, #4
 8003b20:	fa01 f202 	lsl.w	r2, r1, r2
 8003b24:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d071      	beq.n	8003c12 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003b36:	e06c      	b.n	8003c12 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b3c:	f003 031c 	and.w	r3, r3, #28
 8003b40:	2202      	movs	r2, #2
 8003b42:	409a      	lsls	r2, r3
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	4013      	ands	r3, r2
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d02e      	beq.n	8003baa <HAL_DMA_IRQHandler+0xec>
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	f003 0302 	and.w	r3, r3, #2
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d029      	beq.n	8003baa <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 0320 	and.w	r3, r3, #32
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d10b      	bne.n	8003b7c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f022 020a 	bic.w	r2, r2, #10
 8003b72:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2201      	movs	r2, #1
 8003b78:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b80:	f003 021c 	and.w	r2, r3, #28
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b88:	2102      	movs	r1, #2
 8003b8a:	fa01 f202 	lsl.w	r2, r1, r2
 8003b8e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d038      	beq.n	8003c12 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003ba8:	e033      	b.n	8003c12 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bae:	f003 031c 	and.w	r3, r3, #28
 8003bb2:	2208      	movs	r2, #8
 8003bb4:	409a      	lsls	r2, r3
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	4013      	ands	r3, r2
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d02a      	beq.n	8003c14 <HAL_DMA_IRQHandler+0x156>
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	f003 0308 	and.w	r3, r3, #8
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d025      	beq.n	8003c14 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f022 020e 	bic.w	r2, r2, #14
 8003bd6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bdc:	f003 021c 	and.w	r2, r3, #28
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003be4:	2101      	movs	r1, #1
 8003be6:	fa01 f202 	lsl.w	r2, r1, r2
 8003bea:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2201      	movs	r2, #1
 8003bf0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d004      	beq.n	8003c14 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003c12:	bf00      	nop
 8003c14:	bf00      	nop
}
 8003c16:	3710      	adds	r7, #16
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}

08003c1c <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b085      	sub	sp, #20
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	60f8      	str	r0, [r7, #12]
 8003c24:	60b9      	str	r1, [r7, #8]
 8003c26:	607a      	str	r2, [r7, #4]
 8003c28:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c2e:	68fa      	ldr	r2, [r7, #12]
 8003c30:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003c32:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d004      	beq.n	8003c46 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c40:	68fa      	ldr	r2, [r7, #12]
 8003c42:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003c44:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c4a:	f003 021c 	and.w	r2, r3, #28
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c52:	2101      	movs	r1, #1
 8003c54:	fa01 f202 	lsl.w	r2, r1, r2
 8003c58:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	683a      	ldr	r2, [r7, #0]
 8003c60:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	2b10      	cmp	r3, #16
 8003c68:	d108      	bne.n	8003c7c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	687a      	ldr	r2, [r7, #4]
 8003c70:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	68ba      	ldr	r2, [r7, #8]
 8003c78:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003c7a:	e007      	b.n	8003c8c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	68ba      	ldr	r2, [r7, #8]
 8003c82:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	687a      	ldr	r2, [r7, #4]
 8003c8a:	60da      	str	r2, [r3, #12]
}
 8003c8c:	bf00      	nop
 8003c8e:	3714      	adds	r7, #20
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr

08003c98 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b085      	sub	sp, #20
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	4b17      	ldr	r3, [pc, #92]	@ (8003d04 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d80a      	bhi.n	8003cc2 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cb0:	089b      	lsrs	r3, r3, #2
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003cb8:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8003cbc:	687a      	ldr	r2, [r7, #4]
 8003cbe:	6493      	str	r3, [r2, #72]	@ 0x48
 8003cc0:	e007      	b.n	8003cd2 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cc6:	089b      	lsrs	r3, r3, #2
 8003cc8:	009a      	lsls	r2, r3, #2
 8003cca:	4b0f      	ldr	r3, [pc, #60]	@ (8003d08 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003ccc:	4413      	add	r3, r2
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	6493      	str	r3, [r2, #72]	@ 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	b2db      	uxtb	r3, r3
 8003cd8:	3b08      	subs	r3, #8
 8003cda:	4a0c      	ldr	r2, [pc, #48]	@ (8003d0c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003cdc:	fba2 2303 	umull	r2, r3, r2, r3
 8003ce0:	091b      	lsrs	r3, r3, #4
 8003ce2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	4a0a      	ldr	r2, [pc, #40]	@ (8003d10 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003ce8:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	f003 031f 	and.w	r3, r3, #31
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	409a      	lsls	r2, r3
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003cf8:	bf00      	nop
 8003cfa:	3714      	adds	r7, #20
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr
 8003d04:	40020407 	.word	0x40020407
 8003d08:	4002081c 	.word	0x4002081c
 8003d0c:	cccccccd 	.word	0xcccccccd
 8003d10:	40020880 	.word	0x40020880

08003d14 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b085      	sub	sp, #20
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003d24:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003d26:	68fa      	ldr	r2, [r7, #12]
 8003d28:	4b0b      	ldr	r3, [pc, #44]	@ (8003d58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003d2a:	4413      	add	r3, r2
 8003d2c:	009b      	lsls	r3, r3, #2
 8003d2e:	461a      	mov	r2, r3
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	4a09      	ldr	r2, [pc, #36]	@ (8003d5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8003d38:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	3b01      	subs	r3, #1
 8003d3e:	f003 0303 	and.w	r3, r3, #3
 8003d42:	2201      	movs	r2, #1
 8003d44:	409a      	lsls	r2, r3
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8003d4a:	bf00      	nop
 8003d4c:	3714      	adds	r7, #20
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d54:	4770      	bx	lr
 8003d56:	bf00      	nop
 8003d58:	1000823f 	.word	0x1000823f
 8003d5c:	40020940 	.word	0x40020940

08003d60 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b087      	sub	sp, #28
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
 8003d68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d6e:	e14c      	b.n	800400a <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	2101      	movs	r1, #1
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	fa01 f303 	lsl.w	r3, r1, r3
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	f000 813e 	beq.w	8004004 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	f003 0303 	and.w	r3, r3, #3
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d005      	beq.n	8003da0 <HAL_GPIO_Init+0x40>
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	f003 0303 	and.w	r3, r3, #3
 8003d9c:	2b02      	cmp	r3, #2
 8003d9e:	d130      	bne.n	8003e02 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	005b      	lsls	r3, r3, #1
 8003daa:	2203      	movs	r2, #3
 8003dac:	fa02 f303 	lsl.w	r3, r2, r3
 8003db0:	43db      	mvns	r3, r3
 8003db2:	693a      	ldr	r2, [r7, #16]
 8003db4:	4013      	ands	r3, r2
 8003db6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	68da      	ldr	r2, [r3, #12]
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	005b      	lsls	r3, r3, #1
 8003dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc4:	693a      	ldr	r2, [r7, #16]
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	693a      	ldr	r2, [r7, #16]
 8003dce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	fa02 f303 	lsl.w	r3, r2, r3
 8003dde:	43db      	mvns	r3, r3
 8003de0:	693a      	ldr	r2, [r7, #16]
 8003de2:	4013      	ands	r3, r2
 8003de4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	091b      	lsrs	r3, r3, #4
 8003dec:	f003 0201 	and.w	r2, r3, #1
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	fa02 f303 	lsl.w	r3, r2, r3
 8003df6:	693a      	ldr	r2, [r7, #16]
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	693a      	ldr	r2, [r7, #16]
 8003e00:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	f003 0303 	and.w	r3, r3, #3
 8003e0a:	2b03      	cmp	r3, #3
 8003e0c:	d017      	beq.n	8003e3e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	005b      	lsls	r3, r3, #1
 8003e18:	2203      	movs	r2, #3
 8003e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e1e:	43db      	mvns	r3, r3
 8003e20:	693a      	ldr	r2, [r7, #16]
 8003e22:	4013      	ands	r3, r2
 8003e24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	689a      	ldr	r2, [r3, #8]
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	005b      	lsls	r3, r3, #1
 8003e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e32:	693a      	ldr	r2, [r7, #16]
 8003e34:	4313      	orrs	r3, r2
 8003e36:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	693a      	ldr	r2, [r7, #16]
 8003e3c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	f003 0303 	and.w	r3, r3, #3
 8003e46:	2b02      	cmp	r3, #2
 8003e48:	d123      	bne.n	8003e92 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	08da      	lsrs	r2, r3, #3
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	3208      	adds	r2, #8
 8003e52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e56:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	f003 0307 	and.w	r3, r3, #7
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	220f      	movs	r2, #15
 8003e62:	fa02 f303 	lsl.w	r3, r2, r3
 8003e66:	43db      	mvns	r3, r3
 8003e68:	693a      	ldr	r2, [r7, #16]
 8003e6a:	4013      	ands	r3, r2
 8003e6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	691a      	ldr	r2, [r3, #16]
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	f003 0307 	and.w	r3, r3, #7
 8003e78:	009b      	lsls	r3, r3, #2
 8003e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e7e:	693a      	ldr	r2, [r7, #16]
 8003e80:	4313      	orrs	r3, r2
 8003e82:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	08da      	lsrs	r2, r3, #3
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	3208      	adds	r2, #8
 8003e8c:	6939      	ldr	r1, [r7, #16]
 8003e8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	005b      	lsls	r3, r3, #1
 8003e9c:	2203      	movs	r2, #3
 8003e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea2:	43db      	mvns	r3, r3
 8003ea4:	693a      	ldr	r2, [r7, #16]
 8003ea6:	4013      	ands	r3, r2
 8003ea8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	f003 0203 	and.w	r2, r3, #3
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	005b      	lsls	r3, r3, #1
 8003eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eba:	693a      	ldr	r2, [r7, #16]
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	693a      	ldr	r2, [r7, #16]
 8003ec4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	f000 8098 	beq.w	8004004 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8003ed4:	4a54      	ldr	r2, [pc, #336]	@ (8004028 <HAL_GPIO_Init+0x2c8>)
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	089b      	lsrs	r3, r3, #2
 8003eda:	3302      	adds	r3, #2
 8003edc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ee0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	f003 0303 	and.w	r3, r3, #3
 8003ee8:	009b      	lsls	r3, r3, #2
 8003eea:	220f      	movs	r2, #15
 8003eec:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef0:	43db      	mvns	r3, r3
 8003ef2:	693a      	ldr	r2, [r7, #16]
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003efe:	d019      	beq.n	8003f34 <HAL_GPIO_Init+0x1d4>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	4a4a      	ldr	r2, [pc, #296]	@ (800402c <HAL_GPIO_Init+0x2cc>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d013      	beq.n	8003f30 <HAL_GPIO_Init+0x1d0>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	4a49      	ldr	r2, [pc, #292]	@ (8004030 <HAL_GPIO_Init+0x2d0>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d00d      	beq.n	8003f2c <HAL_GPIO_Init+0x1cc>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	4a48      	ldr	r2, [pc, #288]	@ (8004034 <HAL_GPIO_Init+0x2d4>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d007      	beq.n	8003f28 <HAL_GPIO_Init+0x1c8>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	4a47      	ldr	r2, [pc, #284]	@ (8004038 <HAL_GPIO_Init+0x2d8>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d101      	bne.n	8003f24 <HAL_GPIO_Init+0x1c4>
 8003f20:	2304      	movs	r3, #4
 8003f22:	e008      	b.n	8003f36 <HAL_GPIO_Init+0x1d6>
 8003f24:	2307      	movs	r3, #7
 8003f26:	e006      	b.n	8003f36 <HAL_GPIO_Init+0x1d6>
 8003f28:	2303      	movs	r3, #3
 8003f2a:	e004      	b.n	8003f36 <HAL_GPIO_Init+0x1d6>
 8003f2c:	2302      	movs	r3, #2
 8003f2e:	e002      	b.n	8003f36 <HAL_GPIO_Init+0x1d6>
 8003f30:	2301      	movs	r3, #1
 8003f32:	e000      	b.n	8003f36 <HAL_GPIO_Init+0x1d6>
 8003f34:	2300      	movs	r3, #0
 8003f36:	697a      	ldr	r2, [r7, #20]
 8003f38:	f002 0203 	and.w	r2, r2, #3
 8003f3c:	0092      	lsls	r2, r2, #2
 8003f3e:	4093      	lsls	r3, r2
 8003f40:	693a      	ldr	r2, [r7, #16]
 8003f42:	4313      	orrs	r3, r2
 8003f44:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003f46:	4938      	ldr	r1, [pc, #224]	@ (8004028 <HAL_GPIO_Init+0x2c8>)
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	089b      	lsrs	r3, r3, #2
 8003f4c:	3302      	adds	r3, #2
 8003f4e:	693a      	ldr	r2, [r7, #16]
 8003f50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003f54:	4b39      	ldr	r3, [pc, #228]	@ (800403c <HAL_GPIO_Init+0x2dc>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	43db      	mvns	r3, r3
 8003f5e:	693a      	ldr	r2, [r7, #16]
 8003f60:	4013      	ands	r3, r2
 8003f62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d003      	beq.n	8003f78 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003f70:	693a      	ldr	r2, [r7, #16]
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	4313      	orrs	r3, r2
 8003f76:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003f78:	4a30      	ldr	r2, [pc, #192]	@ (800403c <HAL_GPIO_Init+0x2dc>)
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003f7e:	4b2f      	ldr	r3, [pc, #188]	@ (800403c <HAL_GPIO_Init+0x2dc>)
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	43db      	mvns	r3, r3
 8003f88:	693a      	ldr	r2, [r7, #16]
 8003f8a:	4013      	ands	r3, r2
 8003f8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d003      	beq.n	8003fa2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8003f9a:	693a      	ldr	r2, [r7, #16]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003fa2:	4a26      	ldr	r2, [pc, #152]	@ (800403c <HAL_GPIO_Init+0x2dc>)
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003fa8:	4b24      	ldr	r3, [pc, #144]	@ (800403c <HAL_GPIO_Init+0x2dc>)
 8003faa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003fae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	43db      	mvns	r3, r3
 8003fb4:	693a      	ldr	r2, [r7, #16]
 8003fb6:	4013      	ands	r3, r2
 8003fb8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d003      	beq.n	8003fce <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8003fc6:	693a      	ldr	r2, [r7, #16]
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003fce:	4a1b      	ldr	r2, [pc, #108]	@ (800403c <HAL_GPIO_Init+0x2dc>)
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 8003fd6:	4b19      	ldr	r3, [pc, #100]	@ (800403c <HAL_GPIO_Init+0x2dc>)
 8003fd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003fdc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	43db      	mvns	r3, r3
 8003fe2:	693a      	ldr	r2, [r7, #16]
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d003      	beq.n	8003ffc <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8003ff4:	693a      	ldr	r2, [r7, #16]
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003ffc:	4a0f      	ldr	r2, [pc, #60]	@ (800403c <HAL_GPIO_Init+0x2dc>)
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	3301      	adds	r3, #1
 8004008:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	fa22 f303 	lsr.w	r3, r2, r3
 8004014:	2b00      	cmp	r3, #0
 8004016:	f47f aeab 	bne.w	8003d70 <HAL_GPIO_Init+0x10>
  }
}
 800401a:	bf00      	nop
 800401c:	bf00      	nop
 800401e:	371c      	adds	r7, #28
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr
 8004028:	40010000 	.word	0x40010000
 800402c:	48000400 	.word	0x48000400
 8004030:	48000800 	.word	0x48000800
 8004034:	48000c00 	.word	0x48000c00
 8004038:	48001000 	.word	0x48001000
 800403c:	58000800 	.word	0x58000800

08004040 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004040:	b480      	push	{r7}
 8004042:	b083      	sub	sp, #12
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
 8004048:	460b      	mov	r3, r1
 800404a:	807b      	strh	r3, [r7, #2]
 800404c:	4613      	mov	r3, r2
 800404e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004050:	787b      	ldrb	r3, [r7, #1]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d003      	beq.n	800405e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004056:	887a      	ldrh	r2, [r7, #2]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800405c:	e002      	b.n	8004064 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800405e:	887a      	ldrh	r2, [r7, #2]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004064:	bf00      	nop
 8004066:	370c      	adds	r7, #12
 8004068:	46bd      	mov	sp, r7
 800406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406e:	4770      	bx	lr

08004070 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b082      	sub	sp, #8
 8004074:	af00      	add	r7, sp, #0
 8004076:	4603      	mov	r3, r0
 8004078:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800407a:	4b08      	ldr	r3, [pc, #32]	@ (800409c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800407c:	68da      	ldr	r2, [r3, #12]
 800407e:	88fb      	ldrh	r3, [r7, #6]
 8004080:	4013      	ands	r3, r2
 8004082:	2b00      	cmp	r3, #0
 8004084:	d006      	beq.n	8004094 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004086:	4a05      	ldr	r2, [pc, #20]	@ (800409c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004088:	88fb      	ldrh	r3, [r7, #6]
 800408a:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800408c:	88fb      	ldrh	r3, [r7, #6]
 800408e:	4618      	mov	r0, r3
 8004090:	f7fd fa63 	bl	800155a <HAL_GPIO_EXTI_Callback>
  }
}
 8004094:	bf00      	nop
 8004096:	3708      	adds	r7, #8
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}
 800409c:	58000800 	.word	0x58000800

080040a0 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b082      	sub	sp, #8
 80040a4:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 80040a6:	4b0a      	ldr	r3, [pc, #40]	@ (80040d0 <HAL_HSEM_IRQHandler+0x30>)
 80040a8:	68db      	ldr	r3, [r3, #12]
 80040aa:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 80040ac:	4b08      	ldr	r3, [pc, #32]	@ (80040d0 <HAL_HSEM_IRQHandler+0x30>)
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	43db      	mvns	r3, r3
 80040b4:	4906      	ldr	r1, [pc, #24]	@ (80040d0 <HAL_HSEM_IRQHandler+0x30>)
 80040b6:	4013      	ands	r3, r2
 80040b8:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 80040ba:	4a05      	ldr	r2, [pc, #20]	@ (80040d0 <HAL_HSEM_IRQHandler+0x30>)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	f000 f807 	bl	80040d4 <HAL_HSEM_FreeCallback>
}
 80040c6:	bf00      	nop
 80040c8:	3708      	adds	r7, #8
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}
 80040ce:	bf00      	nop
 80040d0:	58001500 	.word	0x58001500

080040d4 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b083      	sub	sp, #12
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 80040dc:	bf00      	nop
 80040de:	370c      	adds	r7, #12
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr

080040e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b082      	sub	sp, #8
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d101      	bne.n	80040fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	e08d      	b.n	8004216 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004100:	b2db      	uxtb	r3, r3
 8004102:	2b00      	cmp	r3, #0
 8004104:	d106      	bne.n	8004114 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2200      	movs	r2, #0
 800410a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f000 f885 	bl	800421e <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2224      	movs	r2, #36	@ 0x24
 8004118:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f022 0201 	bic.w	r2, r2, #1
 800412a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	685a      	ldr	r2, [r3, #4]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004138:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	689a      	ldr	r2, [r3, #8]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004148:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	68db      	ldr	r3, [r3, #12]
 800414e:	2b01      	cmp	r3, #1
 8004150:	d107      	bne.n	8004162 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	689a      	ldr	r2, [r3, #8]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800415e:	609a      	str	r2, [r3, #8]
 8004160:	e006      	b.n	8004170 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	689a      	ldr	r2, [r3, #8]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800416e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	68db      	ldr	r3, [r3, #12]
 8004174:	2b02      	cmp	r3, #2
 8004176:	d108      	bne.n	800418a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	685a      	ldr	r2, [r3, #4]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004186:	605a      	str	r2, [r3, #4]
 8004188:	e007      	b.n	800419a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	685a      	ldr	r2, [r3, #4]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004198:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	687a      	ldr	r2, [r7, #4]
 80041a2:	6812      	ldr	r2, [r2, #0]
 80041a4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80041a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80041ac:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	68da      	ldr	r2, [r3, #12]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80041bc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	691a      	ldr	r2, [r3, #16]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	695b      	ldr	r3, [r3, #20]
 80041c6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	699b      	ldr	r3, [r3, #24]
 80041ce:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	430a      	orrs	r2, r1
 80041d6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	69d9      	ldr	r1, [r3, #28]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6a1a      	ldr	r2, [r3, #32]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	430a      	orrs	r2, r1
 80041e6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f042 0201 	orr.w	r2, r2, #1
 80041f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2200      	movs	r2, #0
 80041fc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2220      	movs	r2, #32
 8004202:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2200      	movs	r2, #0
 8004210:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004214:	2300      	movs	r3, #0
}
 8004216:	4618      	mov	r0, r3
 8004218:	3708      	adds	r7, #8
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}

0800421e <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800421e:	b480      	push	{r7}
 8004220:	b083      	sub	sp, #12
 8004222:	af00      	add	r7, sp, #0
 8004224:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8004226:	bf00      	nop
 8004228:	370c      	adds	r7, #12
 800422a:	46bd      	mov	sp, r7
 800422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004230:	4770      	bx	lr
	...

08004234 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b088      	sub	sp, #32
 8004238:	af02      	add	r7, sp, #8
 800423a:	60f8      	str	r0, [r7, #12]
 800423c:	4608      	mov	r0, r1
 800423e:	4611      	mov	r1, r2
 8004240:	461a      	mov	r2, r3
 8004242:	4603      	mov	r3, r0
 8004244:	817b      	strh	r3, [r7, #10]
 8004246:	460b      	mov	r3, r1
 8004248:	813b      	strh	r3, [r7, #8]
 800424a:	4613      	mov	r3, r2
 800424c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004254:	b2db      	uxtb	r3, r3
 8004256:	2b20      	cmp	r3, #32
 8004258:	f040 80f9 	bne.w	800444e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800425c:	6a3b      	ldr	r3, [r7, #32]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d002      	beq.n	8004268 <HAL_I2C_Mem_Write+0x34>
 8004262:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004264:	2b00      	cmp	r3, #0
 8004266:	d105      	bne.n	8004274 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800426e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	e0ed      	b.n	8004450 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800427a:	2b01      	cmp	r3, #1
 800427c:	d101      	bne.n	8004282 <HAL_I2C_Mem_Write+0x4e>
 800427e:	2302      	movs	r3, #2
 8004280:	e0e6      	b.n	8004450 <HAL_I2C_Mem_Write+0x21c>
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2201      	movs	r2, #1
 8004286:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800428a:	f7ff f879 	bl	8003380 <HAL_GetTick>
 800428e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	9300      	str	r3, [sp, #0]
 8004294:	2319      	movs	r3, #25
 8004296:	2201      	movs	r2, #1
 8004298:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800429c:	68f8      	ldr	r0, [r7, #12]
 800429e:	f000 fac3 	bl	8004828 <I2C_WaitOnFlagUntilTimeout>
 80042a2:	4603      	mov	r3, r0
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d001      	beq.n	80042ac <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	e0d1      	b.n	8004450 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2221      	movs	r2, #33	@ 0x21
 80042b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2240      	movs	r2, #64	@ 0x40
 80042b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2200      	movs	r2, #0
 80042c0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	6a3a      	ldr	r2, [r7, #32]
 80042c6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80042cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2200      	movs	r2, #0
 80042d2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80042d4:	88f8      	ldrh	r0, [r7, #6]
 80042d6:	893a      	ldrh	r2, [r7, #8]
 80042d8:	8979      	ldrh	r1, [r7, #10]
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	9301      	str	r3, [sp, #4]
 80042de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042e0:	9300      	str	r3, [sp, #0]
 80042e2:	4603      	mov	r3, r0
 80042e4:	68f8      	ldr	r0, [r7, #12]
 80042e6:	f000 f9d3 	bl	8004690 <I2C_RequestMemoryWrite>
 80042ea:	4603      	mov	r3, r0
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d005      	beq.n	80042fc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2200      	movs	r2, #0
 80042f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	e0a9      	b.n	8004450 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004300:	b29b      	uxth	r3, r3
 8004302:	2bff      	cmp	r3, #255	@ 0xff
 8004304:	d90e      	bls.n	8004324 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	22ff      	movs	r2, #255	@ 0xff
 800430a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004310:	b2da      	uxtb	r2, r3
 8004312:	8979      	ldrh	r1, [r7, #10]
 8004314:	2300      	movs	r3, #0
 8004316:	9300      	str	r3, [sp, #0]
 8004318:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800431c:	68f8      	ldr	r0, [r7, #12]
 800431e:	f000 fc47 	bl	8004bb0 <I2C_TransferConfig>
 8004322:	e00f      	b.n	8004344 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004328:	b29a      	uxth	r2, r3
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004332:	b2da      	uxtb	r2, r3
 8004334:	8979      	ldrh	r1, [r7, #10]
 8004336:	2300      	movs	r3, #0
 8004338:	9300      	str	r3, [sp, #0]
 800433a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800433e:	68f8      	ldr	r0, [r7, #12]
 8004340:	f000 fc36 	bl	8004bb0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004344:	697a      	ldr	r2, [r7, #20]
 8004346:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004348:	68f8      	ldr	r0, [r7, #12]
 800434a:	f000 fac6 	bl	80048da <I2C_WaitOnTXISFlagUntilTimeout>
 800434e:	4603      	mov	r3, r0
 8004350:	2b00      	cmp	r3, #0
 8004352:	d001      	beq.n	8004358 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	e07b      	b.n	8004450 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800435c:	781a      	ldrb	r2, [r3, #0]
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004368:	1c5a      	adds	r2, r3, #1
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004372:	b29b      	uxth	r3, r3
 8004374:	3b01      	subs	r3, #1
 8004376:	b29a      	uxth	r2, r3
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004380:	3b01      	subs	r3, #1
 8004382:	b29a      	uxth	r2, r3
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800438c:	b29b      	uxth	r3, r3
 800438e:	2b00      	cmp	r3, #0
 8004390:	d034      	beq.n	80043fc <HAL_I2C_Mem_Write+0x1c8>
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004396:	2b00      	cmp	r3, #0
 8004398:	d130      	bne.n	80043fc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	9300      	str	r3, [sp, #0]
 800439e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043a0:	2200      	movs	r2, #0
 80043a2:	2180      	movs	r1, #128	@ 0x80
 80043a4:	68f8      	ldr	r0, [r7, #12]
 80043a6:	f000 fa3f 	bl	8004828 <I2C_WaitOnFlagUntilTimeout>
 80043aa:	4603      	mov	r3, r0
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d001      	beq.n	80043b4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	e04d      	b.n	8004450 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043b8:	b29b      	uxth	r3, r3
 80043ba:	2bff      	cmp	r3, #255	@ 0xff
 80043bc:	d90e      	bls.n	80043dc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	22ff      	movs	r2, #255	@ 0xff
 80043c2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043c8:	b2da      	uxtb	r2, r3
 80043ca:	8979      	ldrh	r1, [r7, #10]
 80043cc:	2300      	movs	r3, #0
 80043ce:	9300      	str	r3, [sp, #0]
 80043d0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80043d4:	68f8      	ldr	r0, [r7, #12]
 80043d6:	f000 fbeb 	bl	8004bb0 <I2C_TransferConfig>
 80043da:	e00f      	b.n	80043fc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043e0:	b29a      	uxth	r2, r3
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043ea:	b2da      	uxtb	r2, r3
 80043ec:	8979      	ldrh	r1, [r7, #10]
 80043ee:	2300      	movs	r3, #0
 80043f0:	9300      	str	r3, [sp, #0]
 80043f2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80043f6:	68f8      	ldr	r0, [r7, #12]
 80043f8:	f000 fbda 	bl	8004bb0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004400:	b29b      	uxth	r3, r3
 8004402:	2b00      	cmp	r3, #0
 8004404:	d19e      	bne.n	8004344 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004406:	697a      	ldr	r2, [r7, #20]
 8004408:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800440a:	68f8      	ldr	r0, [r7, #12]
 800440c:	f000 faac 	bl	8004968 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004410:	4603      	mov	r3, r0
 8004412:	2b00      	cmp	r3, #0
 8004414:	d001      	beq.n	800441a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e01a      	b.n	8004450 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	2220      	movs	r2, #32
 8004420:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	6859      	ldr	r1, [r3, #4]
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	4b0a      	ldr	r3, [pc, #40]	@ (8004458 <HAL_I2C_Mem_Write+0x224>)
 800442e:	400b      	ands	r3, r1
 8004430:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2220      	movs	r2, #32
 8004436:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2200      	movs	r2, #0
 800443e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2200      	movs	r2, #0
 8004446:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800444a:	2300      	movs	r3, #0
 800444c:	e000      	b.n	8004450 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800444e:	2302      	movs	r3, #2
  }
}
 8004450:	4618      	mov	r0, r3
 8004452:	3718      	adds	r7, #24
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}
 8004458:	fe00e800 	.word	0xfe00e800

0800445c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b088      	sub	sp, #32
 8004460:	af02      	add	r7, sp, #8
 8004462:	60f8      	str	r0, [r7, #12]
 8004464:	4608      	mov	r0, r1
 8004466:	4611      	mov	r1, r2
 8004468:	461a      	mov	r2, r3
 800446a:	4603      	mov	r3, r0
 800446c:	817b      	strh	r3, [r7, #10]
 800446e:	460b      	mov	r3, r1
 8004470:	813b      	strh	r3, [r7, #8]
 8004472:	4613      	mov	r3, r2
 8004474:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800447c:	b2db      	uxtb	r3, r3
 800447e:	2b20      	cmp	r3, #32
 8004480:	f040 80fd 	bne.w	800467e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004484:	6a3b      	ldr	r3, [r7, #32]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d002      	beq.n	8004490 <HAL_I2C_Mem_Read+0x34>
 800448a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800448c:	2b00      	cmp	r3, #0
 800448e:	d105      	bne.n	800449c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004496:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	e0f1      	b.n	8004680 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	d101      	bne.n	80044aa <HAL_I2C_Mem_Read+0x4e>
 80044a6:	2302      	movs	r3, #2
 80044a8:	e0ea      	b.n	8004680 <HAL_I2C_Mem_Read+0x224>
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2201      	movs	r2, #1
 80044ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80044b2:	f7fe ff65 	bl	8003380 <HAL_GetTick>
 80044b6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	9300      	str	r3, [sp, #0]
 80044bc:	2319      	movs	r3, #25
 80044be:	2201      	movs	r2, #1
 80044c0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80044c4:	68f8      	ldr	r0, [r7, #12]
 80044c6:	f000 f9af 	bl	8004828 <I2C_WaitOnFlagUntilTimeout>
 80044ca:	4603      	mov	r3, r0
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d001      	beq.n	80044d4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80044d0:	2301      	movs	r3, #1
 80044d2:	e0d5      	b.n	8004680 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2222      	movs	r2, #34	@ 0x22
 80044d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2240      	movs	r2, #64	@ 0x40
 80044e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2200      	movs	r2, #0
 80044e8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	6a3a      	ldr	r2, [r7, #32]
 80044ee:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80044f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2200      	movs	r2, #0
 80044fa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80044fc:	88f8      	ldrh	r0, [r7, #6]
 80044fe:	893a      	ldrh	r2, [r7, #8]
 8004500:	8979      	ldrh	r1, [r7, #10]
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	9301      	str	r3, [sp, #4]
 8004506:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004508:	9300      	str	r3, [sp, #0]
 800450a:	4603      	mov	r3, r0
 800450c:	68f8      	ldr	r0, [r7, #12]
 800450e:	f000 f913 	bl	8004738 <I2C_RequestMemoryRead>
 8004512:	4603      	mov	r3, r0
 8004514:	2b00      	cmp	r3, #0
 8004516:	d005      	beq.n	8004524 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2200      	movs	r2, #0
 800451c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004520:	2301      	movs	r3, #1
 8004522:	e0ad      	b.n	8004680 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004528:	b29b      	uxth	r3, r3
 800452a:	2bff      	cmp	r3, #255	@ 0xff
 800452c:	d90e      	bls.n	800454c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	22ff      	movs	r2, #255	@ 0xff
 8004532:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004538:	b2da      	uxtb	r2, r3
 800453a:	8979      	ldrh	r1, [r7, #10]
 800453c:	4b52      	ldr	r3, [pc, #328]	@ (8004688 <HAL_I2C_Mem_Read+0x22c>)
 800453e:	9300      	str	r3, [sp, #0]
 8004540:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004544:	68f8      	ldr	r0, [r7, #12]
 8004546:	f000 fb33 	bl	8004bb0 <I2C_TransferConfig>
 800454a:	e00f      	b.n	800456c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004550:	b29a      	uxth	r2, r3
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800455a:	b2da      	uxtb	r2, r3
 800455c:	8979      	ldrh	r1, [r7, #10]
 800455e:	4b4a      	ldr	r3, [pc, #296]	@ (8004688 <HAL_I2C_Mem_Read+0x22c>)
 8004560:	9300      	str	r3, [sp, #0]
 8004562:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004566:	68f8      	ldr	r0, [r7, #12]
 8004568:	f000 fb22 	bl	8004bb0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	9300      	str	r3, [sp, #0]
 8004570:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004572:	2200      	movs	r2, #0
 8004574:	2104      	movs	r1, #4
 8004576:	68f8      	ldr	r0, [r7, #12]
 8004578:	f000 f956 	bl	8004828 <I2C_WaitOnFlagUntilTimeout>
 800457c:	4603      	mov	r3, r0
 800457e:	2b00      	cmp	r3, #0
 8004580:	d001      	beq.n	8004586 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	e07c      	b.n	8004680 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004590:	b2d2      	uxtb	r2, r2
 8004592:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004598:	1c5a      	adds	r2, r3, #1
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045a2:	3b01      	subs	r3, #1
 80045a4:	b29a      	uxth	r2, r3
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045ae:	b29b      	uxth	r3, r3
 80045b0:	3b01      	subs	r3, #1
 80045b2:	b29a      	uxth	r2, r3
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045bc:	b29b      	uxth	r3, r3
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d034      	beq.n	800462c <HAL_I2C_Mem_Read+0x1d0>
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d130      	bne.n	800462c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	9300      	str	r3, [sp, #0]
 80045ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045d0:	2200      	movs	r2, #0
 80045d2:	2180      	movs	r1, #128	@ 0x80
 80045d4:	68f8      	ldr	r0, [r7, #12]
 80045d6:	f000 f927 	bl	8004828 <I2C_WaitOnFlagUntilTimeout>
 80045da:	4603      	mov	r3, r0
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d001      	beq.n	80045e4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80045e0:	2301      	movs	r3, #1
 80045e2:	e04d      	b.n	8004680 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045e8:	b29b      	uxth	r3, r3
 80045ea:	2bff      	cmp	r3, #255	@ 0xff
 80045ec:	d90e      	bls.n	800460c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	22ff      	movs	r2, #255	@ 0xff
 80045f2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045f8:	b2da      	uxtb	r2, r3
 80045fa:	8979      	ldrh	r1, [r7, #10]
 80045fc:	2300      	movs	r3, #0
 80045fe:	9300      	str	r3, [sp, #0]
 8004600:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004604:	68f8      	ldr	r0, [r7, #12]
 8004606:	f000 fad3 	bl	8004bb0 <I2C_TransferConfig>
 800460a:	e00f      	b.n	800462c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004610:	b29a      	uxth	r2, r3
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800461a:	b2da      	uxtb	r2, r3
 800461c:	8979      	ldrh	r1, [r7, #10]
 800461e:	2300      	movs	r3, #0
 8004620:	9300      	str	r3, [sp, #0]
 8004622:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004626:	68f8      	ldr	r0, [r7, #12]
 8004628:	f000 fac2 	bl	8004bb0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004630:	b29b      	uxth	r3, r3
 8004632:	2b00      	cmp	r3, #0
 8004634:	d19a      	bne.n	800456c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004636:	697a      	ldr	r2, [r7, #20]
 8004638:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800463a:	68f8      	ldr	r0, [r7, #12]
 800463c:	f000 f994 	bl	8004968 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004640:	4603      	mov	r3, r0
 8004642:	2b00      	cmp	r3, #0
 8004644:	d001      	beq.n	800464a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	e01a      	b.n	8004680 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	2220      	movs	r2, #32
 8004650:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	6859      	ldr	r1, [r3, #4]
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	4b0b      	ldr	r3, [pc, #44]	@ (800468c <HAL_I2C_Mem_Read+0x230>)
 800465e:	400b      	ands	r3, r1
 8004660:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2220      	movs	r2, #32
 8004666:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2200      	movs	r2, #0
 800466e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2200      	movs	r2, #0
 8004676:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800467a:	2300      	movs	r3, #0
 800467c:	e000      	b.n	8004680 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800467e:	2302      	movs	r3, #2
  }
}
 8004680:	4618      	mov	r0, r3
 8004682:	3718      	adds	r7, #24
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}
 8004688:	80002400 	.word	0x80002400
 800468c:	fe00e800 	.word	0xfe00e800

08004690 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b086      	sub	sp, #24
 8004694:	af02      	add	r7, sp, #8
 8004696:	60f8      	str	r0, [r7, #12]
 8004698:	4608      	mov	r0, r1
 800469a:	4611      	mov	r1, r2
 800469c:	461a      	mov	r2, r3
 800469e:	4603      	mov	r3, r0
 80046a0:	817b      	strh	r3, [r7, #10]
 80046a2:	460b      	mov	r3, r1
 80046a4:	813b      	strh	r3, [r7, #8]
 80046a6:	4613      	mov	r3, r2
 80046a8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80046aa:	88fb      	ldrh	r3, [r7, #6]
 80046ac:	b2da      	uxtb	r2, r3
 80046ae:	8979      	ldrh	r1, [r7, #10]
 80046b0:	4b20      	ldr	r3, [pc, #128]	@ (8004734 <I2C_RequestMemoryWrite+0xa4>)
 80046b2:	9300      	str	r3, [sp, #0]
 80046b4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80046b8:	68f8      	ldr	r0, [r7, #12]
 80046ba:	f000 fa79 	bl	8004bb0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80046be:	69fa      	ldr	r2, [r7, #28]
 80046c0:	69b9      	ldr	r1, [r7, #24]
 80046c2:	68f8      	ldr	r0, [r7, #12]
 80046c4:	f000 f909 	bl	80048da <I2C_WaitOnTXISFlagUntilTimeout>
 80046c8:	4603      	mov	r3, r0
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d001      	beq.n	80046d2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	e02c      	b.n	800472c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80046d2:	88fb      	ldrh	r3, [r7, #6]
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d105      	bne.n	80046e4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80046d8:	893b      	ldrh	r3, [r7, #8]
 80046da:	b2da      	uxtb	r2, r3
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	629a      	str	r2, [r3, #40]	@ 0x28
 80046e2:	e015      	b.n	8004710 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80046e4:	893b      	ldrh	r3, [r7, #8]
 80046e6:	0a1b      	lsrs	r3, r3, #8
 80046e8:	b29b      	uxth	r3, r3
 80046ea:	b2da      	uxtb	r2, r3
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80046f2:	69fa      	ldr	r2, [r7, #28]
 80046f4:	69b9      	ldr	r1, [r7, #24]
 80046f6:	68f8      	ldr	r0, [r7, #12]
 80046f8:	f000 f8ef 	bl	80048da <I2C_WaitOnTXISFlagUntilTimeout>
 80046fc:	4603      	mov	r3, r0
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d001      	beq.n	8004706 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	e012      	b.n	800472c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004706:	893b      	ldrh	r3, [r7, #8]
 8004708:	b2da      	uxtb	r2, r3
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004710:	69fb      	ldr	r3, [r7, #28]
 8004712:	9300      	str	r3, [sp, #0]
 8004714:	69bb      	ldr	r3, [r7, #24]
 8004716:	2200      	movs	r2, #0
 8004718:	2180      	movs	r1, #128	@ 0x80
 800471a:	68f8      	ldr	r0, [r7, #12]
 800471c:	f000 f884 	bl	8004828 <I2C_WaitOnFlagUntilTimeout>
 8004720:	4603      	mov	r3, r0
 8004722:	2b00      	cmp	r3, #0
 8004724:	d001      	beq.n	800472a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	e000      	b.n	800472c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800472a:	2300      	movs	r3, #0
}
 800472c:	4618      	mov	r0, r3
 800472e:	3710      	adds	r7, #16
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}
 8004734:	80002000 	.word	0x80002000

08004738 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b086      	sub	sp, #24
 800473c:	af02      	add	r7, sp, #8
 800473e:	60f8      	str	r0, [r7, #12]
 8004740:	4608      	mov	r0, r1
 8004742:	4611      	mov	r1, r2
 8004744:	461a      	mov	r2, r3
 8004746:	4603      	mov	r3, r0
 8004748:	817b      	strh	r3, [r7, #10]
 800474a:	460b      	mov	r3, r1
 800474c:	813b      	strh	r3, [r7, #8]
 800474e:	4613      	mov	r3, r2
 8004750:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004752:	88fb      	ldrh	r3, [r7, #6]
 8004754:	b2da      	uxtb	r2, r3
 8004756:	8979      	ldrh	r1, [r7, #10]
 8004758:	4b20      	ldr	r3, [pc, #128]	@ (80047dc <I2C_RequestMemoryRead+0xa4>)
 800475a:	9300      	str	r3, [sp, #0]
 800475c:	2300      	movs	r3, #0
 800475e:	68f8      	ldr	r0, [r7, #12]
 8004760:	f000 fa26 	bl	8004bb0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004764:	69fa      	ldr	r2, [r7, #28]
 8004766:	69b9      	ldr	r1, [r7, #24]
 8004768:	68f8      	ldr	r0, [r7, #12]
 800476a:	f000 f8b6 	bl	80048da <I2C_WaitOnTXISFlagUntilTimeout>
 800476e:	4603      	mov	r3, r0
 8004770:	2b00      	cmp	r3, #0
 8004772:	d001      	beq.n	8004778 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	e02c      	b.n	80047d2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004778:	88fb      	ldrh	r3, [r7, #6]
 800477a:	2b01      	cmp	r3, #1
 800477c:	d105      	bne.n	800478a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800477e:	893b      	ldrh	r3, [r7, #8]
 8004780:	b2da      	uxtb	r2, r3
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	629a      	str	r2, [r3, #40]	@ 0x28
 8004788:	e015      	b.n	80047b6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800478a:	893b      	ldrh	r3, [r7, #8]
 800478c:	0a1b      	lsrs	r3, r3, #8
 800478e:	b29b      	uxth	r3, r3
 8004790:	b2da      	uxtb	r2, r3
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004798:	69fa      	ldr	r2, [r7, #28]
 800479a:	69b9      	ldr	r1, [r7, #24]
 800479c:	68f8      	ldr	r0, [r7, #12]
 800479e:	f000 f89c 	bl	80048da <I2C_WaitOnTXISFlagUntilTimeout>
 80047a2:	4603      	mov	r3, r0
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d001      	beq.n	80047ac <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	e012      	b.n	80047d2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80047ac:	893b      	ldrh	r3, [r7, #8]
 80047ae:	b2da      	uxtb	r2, r3
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80047b6:	69fb      	ldr	r3, [r7, #28]
 80047b8:	9300      	str	r3, [sp, #0]
 80047ba:	69bb      	ldr	r3, [r7, #24]
 80047bc:	2200      	movs	r2, #0
 80047be:	2140      	movs	r1, #64	@ 0x40
 80047c0:	68f8      	ldr	r0, [r7, #12]
 80047c2:	f000 f831 	bl	8004828 <I2C_WaitOnFlagUntilTimeout>
 80047c6:	4603      	mov	r3, r0
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d001      	beq.n	80047d0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	e000      	b.n	80047d2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80047d0:	2300      	movs	r3, #0
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3710      	adds	r7, #16
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}
 80047da:	bf00      	nop
 80047dc:	80002000 	.word	0x80002000

080047e0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b083      	sub	sp, #12
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	699b      	ldr	r3, [r3, #24]
 80047ee:	f003 0302 	and.w	r3, r3, #2
 80047f2:	2b02      	cmp	r3, #2
 80047f4:	d103      	bne.n	80047fe <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	2200      	movs	r2, #0
 80047fc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	699b      	ldr	r3, [r3, #24]
 8004804:	f003 0301 	and.w	r3, r3, #1
 8004808:	2b01      	cmp	r3, #1
 800480a:	d007      	beq.n	800481c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	699a      	ldr	r2, [r3, #24]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f042 0201 	orr.w	r2, r2, #1
 800481a:	619a      	str	r2, [r3, #24]
  }
}
 800481c:	bf00      	nop
 800481e:	370c      	adds	r7, #12
 8004820:	46bd      	mov	sp, r7
 8004822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004826:	4770      	bx	lr

08004828 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b084      	sub	sp, #16
 800482c:	af00      	add	r7, sp, #0
 800482e:	60f8      	str	r0, [r7, #12]
 8004830:	60b9      	str	r1, [r7, #8]
 8004832:	603b      	str	r3, [r7, #0]
 8004834:	4613      	mov	r3, r2
 8004836:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004838:	e03b      	b.n	80048b2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800483a:	69ba      	ldr	r2, [r7, #24]
 800483c:	6839      	ldr	r1, [r7, #0]
 800483e:	68f8      	ldr	r0, [r7, #12]
 8004840:	f000 f8d6 	bl	80049f0 <I2C_IsErrorOccurred>
 8004844:	4603      	mov	r3, r0
 8004846:	2b00      	cmp	r3, #0
 8004848:	d001      	beq.n	800484e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	e041      	b.n	80048d2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004854:	d02d      	beq.n	80048b2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004856:	f7fe fd93 	bl	8003380 <HAL_GetTick>
 800485a:	4602      	mov	r2, r0
 800485c:	69bb      	ldr	r3, [r7, #24]
 800485e:	1ad3      	subs	r3, r2, r3
 8004860:	683a      	ldr	r2, [r7, #0]
 8004862:	429a      	cmp	r2, r3
 8004864:	d302      	bcc.n	800486c <I2C_WaitOnFlagUntilTimeout+0x44>
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d122      	bne.n	80048b2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	699a      	ldr	r2, [r3, #24]
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	4013      	ands	r3, r2
 8004876:	68ba      	ldr	r2, [r7, #8]
 8004878:	429a      	cmp	r2, r3
 800487a:	bf0c      	ite	eq
 800487c:	2301      	moveq	r3, #1
 800487e:	2300      	movne	r3, #0
 8004880:	b2db      	uxtb	r3, r3
 8004882:	461a      	mov	r2, r3
 8004884:	79fb      	ldrb	r3, [r7, #7]
 8004886:	429a      	cmp	r2, r3
 8004888:	d113      	bne.n	80048b2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800488e:	f043 0220 	orr.w	r2, r3, #32
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2220      	movs	r2, #32
 800489a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2200      	movs	r2, #0
 80048a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2200      	movs	r2, #0
 80048aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	e00f      	b.n	80048d2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	699a      	ldr	r2, [r3, #24]
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	4013      	ands	r3, r2
 80048bc:	68ba      	ldr	r2, [r7, #8]
 80048be:	429a      	cmp	r2, r3
 80048c0:	bf0c      	ite	eq
 80048c2:	2301      	moveq	r3, #1
 80048c4:	2300      	movne	r3, #0
 80048c6:	b2db      	uxtb	r3, r3
 80048c8:	461a      	mov	r2, r3
 80048ca:	79fb      	ldrb	r3, [r7, #7]
 80048cc:	429a      	cmp	r2, r3
 80048ce:	d0b4      	beq.n	800483a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80048d0:	2300      	movs	r3, #0
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3710      	adds	r7, #16
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}

080048da <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80048da:	b580      	push	{r7, lr}
 80048dc:	b084      	sub	sp, #16
 80048de:	af00      	add	r7, sp, #0
 80048e0:	60f8      	str	r0, [r7, #12]
 80048e2:	60b9      	str	r1, [r7, #8]
 80048e4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80048e6:	e033      	b.n	8004950 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80048e8:	687a      	ldr	r2, [r7, #4]
 80048ea:	68b9      	ldr	r1, [r7, #8]
 80048ec:	68f8      	ldr	r0, [r7, #12]
 80048ee:	f000 f87f 	bl	80049f0 <I2C_IsErrorOccurred>
 80048f2:	4603      	mov	r3, r0
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d001      	beq.n	80048fc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	e031      	b.n	8004960 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004902:	d025      	beq.n	8004950 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004904:	f7fe fd3c 	bl	8003380 <HAL_GetTick>
 8004908:	4602      	mov	r2, r0
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	1ad3      	subs	r3, r2, r3
 800490e:	68ba      	ldr	r2, [r7, #8]
 8004910:	429a      	cmp	r2, r3
 8004912:	d302      	bcc.n	800491a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d11a      	bne.n	8004950 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	699b      	ldr	r3, [r3, #24]
 8004920:	f003 0302 	and.w	r3, r3, #2
 8004924:	2b02      	cmp	r3, #2
 8004926:	d013      	beq.n	8004950 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800492c:	f043 0220 	orr.w	r2, r3, #32
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2220      	movs	r2, #32
 8004938:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2200      	movs	r2, #0
 8004940:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2200      	movs	r2, #0
 8004948:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800494c:	2301      	movs	r3, #1
 800494e:	e007      	b.n	8004960 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	699b      	ldr	r3, [r3, #24]
 8004956:	f003 0302 	and.w	r3, r3, #2
 800495a:	2b02      	cmp	r3, #2
 800495c:	d1c4      	bne.n	80048e8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800495e:	2300      	movs	r3, #0
}
 8004960:	4618      	mov	r0, r3
 8004962:	3710      	adds	r7, #16
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}

08004968 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b084      	sub	sp, #16
 800496c:	af00      	add	r7, sp, #0
 800496e:	60f8      	str	r0, [r7, #12]
 8004970:	60b9      	str	r1, [r7, #8]
 8004972:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004974:	e02f      	b.n	80049d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004976:	687a      	ldr	r2, [r7, #4]
 8004978:	68b9      	ldr	r1, [r7, #8]
 800497a:	68f8      	ldr	r0, [r7, #12]
 800497c:	f000 f838 	bl	80049f0 <I2C_IsErrorOccurred>
 8004980:	4603      	mov	r3, r0
 8004982:	2b00      	cmp	r3, #0
 8004984:	d001      	beq.n	800498a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	e02d      	b.n	80049e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800498a:	f7fe fcf9 	bl	8003380 <HAL_GetTick>
 800498e:	4602      	mov	r2, r0
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	1ad3      	subs	r3, r2, r3
 8004994:	68ba      	ldr	r2, [r7, #8]
 8004996:	429a      	cmp	r2, r3
 8004998:	d302      	bcc.n	80049a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d11a      	bne.n	80049d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	699b      	ldr	r3, [r3, #24]
 80049a6:	f003 0320 	and.w	r3, r3, #32
 80049aa:	2b20      	cmp	r3, #32
 80049ac:	d013      	beq.n	80049d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049b2:	f043 0220 	orr.w	r2, r3, #32
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2220      	movs	r2, #32
 80049be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2200      	movs	r2, #0
 80049c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2200      	movs	r2, #0
 80049ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	e007      	b.n	80049e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	699b      	ldr	r3, [r3, #24]
 80049dc:	f003 0320 	and.w	r3, r3, #32
 80049e0:	2b20      	cmp	r3, #32
 80049e2:	d1c8      	bne.n	8004976 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80049e4:	2300      	movs	r3, #0
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	3710      	adds	r7, #16
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}
	...

080049f0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b08a      	sub	sp, #40	@ 0x28
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	60f8      	str	r0, [r7, #12]
 80049f8:	60b9      	str	r1, [r7, #8]
 80049fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049fc:	2300      	movs	r3, #0
 80049fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	699b      	ldr	r3, [r3, #24]
 8004a08:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004a12:	69bb      	ldr	r3, [r7, #24]
 8004a14:	f003 0310 	and.w	r3, r3, #16
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d068      	beq.n	8004aee <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	2210      	movs	r2, #16
 8004a22:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004a24:	e049      	b.n	8004aba <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a2c:	d045      	beq.n	8004aba <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004a2e:	f7fe fca7 	bl	8003380 <HAL_GetTick>
 8004a32:	4602      	mov	r2, r0
 8004a34:	69fb      	ldr	r3, [r7, #28]
 8004a36:	1ad3      	subs	r3, r2, r3
 8004a38:	68ba      	ldr	r2, [r7, #8]
 8004a3a:	429a      	cmp	r2, r3
 8004a3c:	d302      	bcc.n	8004a44 <I2C_IsErrorOccurred+0x54>
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d13a      	bne.n	8004aba <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004a4e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004a56:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	699b      	ldr	r3, [r3, #24]
 8004a5e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004a62:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a66:	d121      	bne.n	8004aac <I2C_IsErrorOccurred+0xbc>
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004a6e:	d01d      	beq.n	8004aac <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004a70:	7cfb      	ldrb	r3, [r7, #19]
 8004a72:	2b20      	cmp	r3, #32
 8004a74:	d01a      	beq.n	8004aac <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	685a      	ldr	r2, [r3, #4]
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004a84:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004a86:	f7fe fc7b 	bl	8003380 <HAL_GetTick>
 8004a8a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004a8c:	e00e      	b.n	8004aac <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004a8e:	f7fe fc77 	bl	8003380 <HAL_GetTick>
 8004a92:	4602      	mov	r2, r0
 8004a94:	69fb      	ldr	r3, [r7, #28]
 8004a96:	1ad3      	subs	r3, r2, r3
 8004a98:	2b19      	cmp	r3, #25
 8004a9a:	d907      	bls.n	8004aac <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004a9c:	6a3b      	ldr	r3, [r7, #32]
 8004a9e:	f043 0320 	orr.w	r3, r3, #32
 8004aa2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8004aaa:	e006      	b.n	8004aba <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	699b      	ldr	r3, [r3, #24]
 8004ab2:	f003 0320 	and.w	r3, r3, #32
 8004ab6:	2b20      	cmp	r3, #32
 8004ab8:	d1e9      	bne.n	8004a8e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	699b      	ldr	r3, [r3, #24]
 8004ac0:	f003 0320 	and.w	r3, r3, #32
 8004ac4:	2b20      	cmp	r3, #32
 8004ac6:	d003      	beq.n	8004ad0 <I2C_IsErrorOccurred+0xe0>
 8004ac8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d0aa      	beq.n	8004a26 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004ad0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d103      	bne.n	8004ae0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	2220      	movs	r2, #32
 8004ade:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004ae0:	6a3b      	ldr	r3, [r7, #32]
 8004ae2:	f043 0304 	orr.w	r3, r3, #4
 8004ae6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	699b      	ldr	r3, [r3, #24]
 8004af4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004af6:	69bb      	ldr	r3, [r7, #24]
 8004af8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d00b      	beq.n	8004b18 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004b00:	6a3b      	ldr	r3, [r7, #32]
 8004b02:	f043 0301 	orr.w	r3, r3, #1
 8004b06:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004b10:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004b12:	2301      	movs	r3, #1
 8004b14:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004b18:	69bb      	ldr	r3, [r7, #24]
 8004b1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d00b      	beq.n	8004b3a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004b22:	6a3b      	ldr	r3, [r7, #32]
 8004b24:	f043 0308 	orr.w	r3, r3, #8
 8004b28:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004b32:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004b3a:	69bb      	ldr	r3, [r7, #24]
 8004b3c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d00b      	beq.n	8004b5c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004b44:	6a3b      	ldr	r3, [r7, #32]
 8004b46:	f043 0302 	orr.w	r3, r3, #2
 8004b4a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004b54:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8004b5c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d01c      	beq.n	8004b9e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004b64:	68f8      	ldr	r0, [r7, #12]
 8004b66:	f7ff fe3b 	bl	80047e0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	6859      	ldr	r1, [r3, #4]
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681a      	ldr	r2, [r3, #0]
 8004b74:	4b0d      	ldr	r3, [pc, #52]	@ (8004bac <I2C_IsErrorOccurred+0x1bc>)
 8004b76:	400b      	ands	r3, r1
 8004b78:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004b7e:	6a3b      	ldr	r3, [r7, #32]
 8004b80:	431a      	orrs	r2, r3
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2220      	movs	r2, #32
 8004b8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2200      	movs	r2, #0
 8004b92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8004b9e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	3728      	adds	r7, #40	@ 0x28
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}
 8004baa:	bf00      	nop
 8004bac:	fe00e800 	.word	0xfe00e800

08004bb0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b087      	sub	sp, #28
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	60f8      	str	r0, [r7, #12]
 8004bb8:	607b      	str	r3, [r7, #4]
 8004bba:	460b      	mov	r3, r1
 8004bbc:	817b      	strh	r3, [r7, #10]
 8004bbe:	4613      	mov	r3, r2
 8004bc0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004bc2:	897b      	ldrh	r3, [r7, #10]
 8004bc4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004bc8:	7a7b      	ldrb	r3, [r7, #9]
 8004bca:	041b      	lsls	r3, r3, #16
 8004bcc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004bd0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004bd6:	6a3b      	ldr	r3, [r7, #32]
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004bde:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	685a      	ldr	r2, [r3, #4]
 8004be6:	6a3b      	ldr	r3, [r7, #32]
 8004be8:	0d5b      	lsrs	r3, r3, #21
 8004bea:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8004bee:	4b08      	ldr	r3, [pc, #32]	@ (8004c10 <I2C_TransferConfig+0x60>)
 8004bf0:	430b      	orrs	r3, r1
 8004bf2:	43db      	mvns	r3, r3
 8004bf4:	ea02 0103 	and.w	r1, r2, r3
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	697a      	ldr	r2, [r7, #20]
 8004bfe:	430a      	orrs	r2, r1
 8004c00:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004c02:	bf00      	nop
 8004c04:	371c      	adds	r7, #28
 8004c06:	46bd      	mov	sp, r7
 8004c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0c:	4770      	bx	lr
 8004c0e:	bf00      	nop
 8004c10:	03ff63ff 	.word	0x03ff63ff

08004c14 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b084      	sub	sp, #16
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d01e      	beq.n	8004c64 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8004c26:	4b13      	ldr	r3, [pc, #76]	@ (8004c74 <HAL_IPCC_Init+0x60>)
 8004c28:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004c30:	b2db      	uxtb	r3, r3
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d102      	bne.n	8004c3c <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f7fe f99c 	bl	8002f74 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8004c3c:	68b8      	ldr	r0, [r7, #8]
 8004c3e:	f000 f85b 	bl	8004cf8 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f043 1201 	orr.w	r2, r3, #65537	@ 0x10001
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f000 f82c 	bl	8004cac <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2200      	movs	r2, #0
 8004c58:	635a      	str	r2, [r3, #52]	@ 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2201      	movs	r2, #1
 8004c5e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 8004c62:	e001      	b.n	8004c68 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8004c64:	2301      	movs	r3, #1
 8004c66:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8004c68:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3710      	adds	r7, #16
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}
 8004c72:	bf00      	nop
 8004c74:	58000c00 	.word	0x58000c00

08004c78 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b085      	sub	sp, #20
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	60f8      	str	r0, [r7, #12]
 8004c80:	60b9      	str	r1, [r7, #8]
 8004c82:	4613      	mov	r3, r2
 8004c84:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8004c86:	bf00      	nop
 8004c88:	3714      	adds	r7, #20
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c90:	4770      	bx	lr

08004c92 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8004c92:	b480      	push	{r7}
 8004c94:	b085      	sub	sp, #20
 8004c96:	af00      	add	r7, sp, #0
 8004c98:	60f8      	str	r0, [r7, #12]
 8004c9a:	60b9      	str	r1, [r7, #8]
 8004c9c:	4613      	mov	r3, r2
 8004c9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8004ca0:	bf00      	nop
 8004ca2:	3714      	adds	r7, #20
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004caa:	4770      	bx	lr

08004cac <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b085      	sub	sp, #20
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	60fb      	str	r3, [r7, #12]
 8004cb8:	e00f      	b.n	8004cda <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8004cba:	687a      	ldr	r2, [r7, #4]
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	009b      	lsls	r3, r3, #2
 8004cc0:	4413      	add	r3, r2
 8004cc2:	4a0b      	ldr	r2, [pc, #44]	@ (8004cf0 <IPCC_SetDefaultCallbacks+0x44>)
 8004cc4:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8004cc6:	687a      	ldr	r2, [r7, #4]
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	3306      	adds	r3, #6
 8004ccc:	009b      	lsls	r3, r3, #2
 8004cce:	4413      	add	r3, r2
 8004cd0:	4a08      	ldr	r2, [pc, #32]	@ (8004cf4 <IPCC_SetDefaultCallbacks+0x48>)
 8004cd2:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	3301      	adds	r3, #1
 8004cd8:	60fb      	str	r3, [r7, #12]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2b05      	cmp	r3, #5
 8004cde:	d9ec      	bls.n	8004cba <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8004ce0:	bf00      	nop
 8004ce2:	bf00      	nop
 8004ce4:	3714      	adds	r7, #20
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cec:	4770      	bx	lr
 8004cee:	bf00      	nop
 8004cf0:	08004c79 	.word	0x08004c79
 8004cf4:	08004c93 	.word	0x08004c93

08004cf8 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b083      	sub	sp, #12
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2200      	movs	r2, #0
 8004d04:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	f04f 123f 	mov.w	r2, #4128831	@ 0x3f003f
 8004d0c:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	223f      	movs	r2, #63	@ 0x3f
 8004d12:	609a      	str	r2, [r3, #8]
}
 8004d14:	bf00      	nop
 8004d16:	370c      	adds	r7, #12
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1e:	4770      	bx	lr

08004d20 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004d20:	b480      	push	{r7}
 8004d22:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d24:	4b05      	ldr	r3, [pc, #20]	@ (8004d3c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a04      	ldr	r2, [pc, #16]	@ (8004d3c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004d2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d2e:	6013      	str	r3, [r2, #0]
}
 8004d30:	bf00      	nop
 8004d32:	46bd      	mov	sp, r7
 8004d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d38:	4770      	bx	lr
 8004d3a:	bf00      	nop
 8004d3c:	58000400 	.word	0x58000400

08004d40 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004d40:	b480      	push	{r7}
 8004d42:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8004d44:	4b04      	ldr	r3, [pc, #16]	@ (8004d58 <HAL_PWREx_GetVoltageRange+0x18>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d54:	4770      	bx	lr
 8004d56:	bf00      	nop
 8004d58:	58000400 	.word	0x58000400

08004d5c <LL_RCC_HSE_IsEnabledDiv2>:
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8004d60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004d6a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004d6e:	d101      	bne.n	8004d74 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8004d70:	2301      	movs	r3, #1
 8004d72:	e000      	b.n	8004d76 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8004d74:	2300      	movs	r3, #0
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7e:	4770      	bx	lr

08004d80 <LL_RCC_HSE_Enable>:
{
 8004d80:	b480      	push	{r7}
 8004d82:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8004d84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004d8e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d92:	6013      	str	r3, [r2, #0]
}
 8004d94:	bf00      	nop
 8004d96:	46bd      	mov	sp, r7
 8004d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9c:	4770      	bx	lr

08004d9e <LL_RCC_HSE_Disable>:
{
 8004d9e:	b480      	push	{r7}
 8004da0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8004da2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004dac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004db0:	6013      	str	r3, [r2, #0]
}
 8004db2:	bf00      	nop
 8004db4:	46bd      	mov	sp, r7
 8004db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dba:	4770      	bx	lr

08004dbc <LL_RCC_HSE_IsReady>:
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004dc0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004dce:	d101      	bne.n	8004dd4 <LL_RCC_HSE_IsReady+0x18>
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	e000      	b.n	8004dd6 <LL_RCC_HSE_IsReady+0x1a>
 8004dd4:	2300      	movs	r3, #0
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr

08004de0 <LL_RCC_HSI_Enable>:
{
 8004de0:	b480      	push	{r7}
 8004de2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004de4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004dee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004df2:	6013      	str	r3, [r2, #0]
}
 8004df4:	bf00      	nop
 8004df6:	46bd      	mov	sp, r7
 8004df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfc:	4770      	bx	lr

08004dfe <LL_RCC_HSI_Disable>:
{
 8004dfe:	b480      	push	{r7}
 8004e00:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8004e02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004e0c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004e10:	6013      	str	r3, [r2, #0]
}
 8004e12:	bf00      	nop
 8004e14:	46bd      	mov	sp, r7
 8004e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1a:	4770      	bx	lr

08004e1c <LL_RCC_HSI_IsReady>:
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004e20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e2e:	d101      	bne.n	8004e34 <LL_RCC_HSI_IsReady+0x18>
 8004e30:	2301      	movs	r3, #1
 8004e32:	e000      	b.n	8004e36 <LL_RCC_HSI_IsReady+0x1a>
 8004e34:	2300      	movs	r3, #0
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3e:	4770      	bx	lr

08004e40 <LL_RCC_HSI_SetCalibTrimming>:
{
 8004e40:	b480      	push	{r7}
 8004e42:	b083      	sub	sp, #12
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8004e48:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	061b      	lsls	r3, r3, #24
 8004e56:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	604b      	str	r3, [r1, #4]
}
 8004e5e:	bf00      	nop
 8004e60:	370c      	adds	r7, #12
 8004e62:	46bd      	mov	sp, r7
 8004e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e68:	4770      	bx	lr

08004e6a <LL_RCC_HSI48_Enable>:
{
 8004e6a:	b480      	push	{r7}
 8004e6c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8004e6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e72:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004e76:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004e7a:	f043 0301 	orr.w	r3, r3, #1
 8004e7e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8004e82:	bf00      	nop
 8004e84:	46bd      	mov	sp, r7
 8004e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8a:	4770      	bx	lr

08004e8c <LL_RCC_HSI48_Disable>:
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8004e90:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e94:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004e98:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004e9c:	f023 0301 	bic.w	r3, r3, #1
 8004ea0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8004ea4:	bf00      	nop
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eac:	4770      	bx	lr

08004eae <LL_RCC_HSI48_IsReady>:
{
 8004eae:	b480      	push	{r7}
 8004eb0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8004eb2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004eb6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004eba:	f003 0302 	and.w	r3, r3, #2
 8004ebe:	2b02      	cmp	r3, #2
 8004ec0:	d101      	bne.n	8004ec6 <LL_RCC_HSI48_IsReady+0x18>
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	e000      	b.n	8004ec8 <LL_RCC_HSI48_IsReady+0x1a>
 8004ec6:	2300      	movs	r3, #0
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed0:	4770      	bx	lr

08004ed2 <LL_RCC_LSE_Enable>:
{
 8004ed2:	b480      	push	{r7}
 8004ed4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004ed6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004eda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ede:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004ee2:	f043 0301 	orr.w	r3, r3, #1
 8004ee6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8004eea:	bf00      	nop
 8004eec:	46bd      	mov	sp, r7
 8004eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef2:	4770      	bx	lr

08004ef4 <LL_RCC_LSE_Disable>:
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004ef8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004efc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f00:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004f04:	f023 0301 	bic.w	r3, r3, #1
 8004f08:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8004f0c:	bf00      	nop
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f14:	4770      	bx	lr

08004f16 <LL_RCC_LSE_EnableBypass>:
{
 8004f16:	b480      	push	{r7}
 8004f18:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004f1a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f22:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004f26:	f043 0304 	orr.w	r3, r3, #4
 8004f2a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8004f2e:	bf00      	nop
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr

08004f38 <LL_RCC_LSE_DisableBypass>:
{
 8004f38:	b480      	push	{r7}
 8004f3a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004f3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f44:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004f48:	f023 0304 	bic.w	r3, r3, #4
 8004f4c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8004f50:	bf00      	nop
 8004f52:	46bd      	mov	sp, r7
 8004f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f58:	4770      	bx	lr

08004f5a <LL_RCC_LSE_IsReady>:
{
 8004f5a:	b480      	push	{r7}
 8004f5c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004f5e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f66:	f003 0302 	and.w	r3, r3, #2
 8004f6a:	2b02      	cmp	r3, #2
 8004f6c:	d101      	bne.n	8004f72 <LL_RCC_LSE_IsReady+0x18>
 8004f6e:	2301      	movs	r3, #1
 8004f70:	e000      	b.n	8004f74 <LL_RCC_LSE_IsReady+0x1a>
 8004f72:	2300      	movs	r3, #0
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	46bd      	mov	sp, r7
 8004f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7c:	4770      	bx	lr

08004f7e <LL_RCC_LSI1_Enable>:
{
 8004f7e:	b480      	push	{r7}
 8004f80:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004f82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f86:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f8a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004f8e:	f043 0301 	orr.w	r3, r3, #1
 8004f92:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8004f96:	bf00      	nop
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9e:	4770      	bx	lr

08004fa0 <LL_RCC_LSI1_Disable>:
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004fa4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004fa8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004fac:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004fb0:	f023 0301 	bic.w	r3, r3, #1
 8004fb4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8004fb8:	bf00      	nop
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc0:	4770      	bx	lr

08004fc2 <LL_RCC_LSI1_IsReady>:
{
 8004fc2:	b480      	push	{r7}
 8004fc4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8004fc6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004fca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004fce:	f003 0302 	and.w	r3, r3, #2
 8004fd2:	2b02      	cmp	r3, #2
 8004fd4:	d101      	bne.n	8004fda <LL_RCC_LSI1_IsReady+0x18>
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	e000      	b.n	8004fdc <LL_RCC_LSI1_IsReady+0x1a>
 8004fda:	2300      	movs	r3, #0
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe4:	4770      	bx	lr

08004fe6 <LL_RCC_LSI2_Enable>:
{
 8004fe6:	b480      	push	{r7}
 8004fe8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004fea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004fee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ff2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004ff6:	f043 0304 	orr.w	r3, r3, #4
 8004ffa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8004ffe:	bf00      	nop
 8005000:	46bd      	mov	sp, r7
 8005002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005006:	4770      	bx	lr

08005008 <LL_RCC_LSI2_Disable>:
{
 8005008:	b480      	push	{r7}
 800500a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800500c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005010:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005014:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005018:	f023 0304 	bic.w	r3, r3, #4
 800501c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8005020:	bf00      	nop
 8005022:	46bd      	mov	sp, r7
 8005024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005028:	4770      	bx	lr

0800502a <LL_RCC_LSI2_IsReady>:
{
 800502a:	b480      	push	{r7}
 800502c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800502e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005032:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005036:	f003 0308 	and.w	r3, r3, #8
 800503a:	2b08      	cmp	r3, #8
 800503c:	d101      	bne.n	8005042 <LL_RCC_LSI2_IsReady+0x18>
 800503e:	2301      	movs	r3, #1
 8005040:	e000      	b.n	8005044 <LL_RCC_LSI2_IsReady+0x1a>
 8005042:	2300      	movs	r3, #0
}
 8005044:	4618      	mov	r0, r3
 8005046:	46bd      	mov	sp, r7
 8005048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504c:	4770      	bx	lr

0800504e <LL_RCC_LSI2_SetTrimming>:
{
 800504e:	b480      	push	{r7}
 8005050:	b083      	sub	sp, #12
 8005052:	af00      	add	r7, sp, #0
 8005054:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8005056:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800505a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800505e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	021b      	lsls	r3, r3, #8
 8005066:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800506a:	4313      	orrs	r3, r2
 800506c:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8005070:	bf00      	nop
 8005072:	370c      	adds	r7, #12
 8005074:	46bd      	mov	sp, r7
 8005076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507a:	4770      	bx	lr

0800507c <LL_RCC_MSI_Enable>:
{
 800507c:	b480      	push	{r7}
 800507e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8005080:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800508a:	f043 0301 	orr.w	r3, r3, #1
 800508e:	6013      	str	r3, [r2, #0]
}
 8005090:	bf00      	nop
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr

0800509a <LL_RCC_MSI_Disable>:
{
 800509a:	b480      	push	{r7}
 800509c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800509e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80050a8:	f023 0301 	bic.w	r3, r3, #1
 80050ac:	6013      	str	r3, [r2, #0]
}
 80050ae:	bf00      	nop
 80050b0:	46bd      	mov	sp, r7
 80050b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b6:	4770      	bx	lr

080050b8 <LL_RCC_MSI_IsReady>:
{
 80050b8:	b480      	push	{r7}
 80050ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80050bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f003 0302 	and.w	r3, r3, #2
 80050c6:	2b02      	cmp	r3, #2
 80050c8:	d101      	bne.n	80050ce <LL_RCC_MSI_IsReady+0x16>
 80050ca:	2301      	movs	r3, #1
 80050cc:	e000      	b.n	80050d0 <LL_RCC_MSI_IsReady+0x18>
 80050ce:	2300      	movs	r3, #0
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	46bd      	mov	sp, r7
 80050d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d8:	4770      	bx	lr

080050da <LL_RCC_MSI_SetRange>:
{
 80050da:	b480      	push	{r7}
 80050dc:	b083      	sub	sp, #12
 80050de:	af00      	add	r7, sp, #0
 80050e0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80050e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80050ec:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	4313      	orrs	r3, r2
 80050f4:	600b      	str	r3, [r1, #0]
}
 80050f6:	bf00      	nop
 80050f8:	370c      	adds	r7, #12
 80050fa:	46bd      	mov	sp, r7
 80050fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005100:	4770      	bx	lr

08005102 <LL_RCC_MSI_GetRange>:
{
 8005102:	b480      	push	{r7}
 8005104:	b083      	sub	sp, #12
 8005106:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8005108:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005112:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2bb0      	cmp	r3, #176	@ 0xb0
 8005118:	d901      	bls.n	800511e <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 800511a:	23b0      	movs	r3, #176	@ 0xb0
 800511c:	607b      	str	r3, [r7, #4]
  return msiRange;
 800511e:	687b      	ldr	r3, [r7, #4]
}
 8005120:	4618      	mov	r0, r3
 8005122:	370c      	adds	r7, #12
 8005124:	46bd      	mov	sp, r7
 8005126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512a:	4770      	bx	lr

0800512c <LL_RCC_MSI_SetCalibTrimming>:
{
 800512c:	b480      	push	{r7}
 800512e:	b083      	sub	sp, #12
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8005134:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	021b      	lsls	r3, r3, #8
 8005142:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005146:	4313      	orrs	r3, r2
 8005148:	604b      	str	r3, [r1, #4]
}
 800514a:	bf00      	nop
 800514c:	370c      	adds	r7, #12
 800514e:	46bd      	mov	sp, r7
 8005150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005154:	4770      	bx	lr

08005156 <LL_RCC_SetSysClkSource>:
{
 8005156:	b480      	push	{r7}
 8005158:	b083      	sub	sp, #12
 800515a:	af00      	add	r7, sp, #0
 800515c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800515e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	f023 0203 	bic.w	r2, r3, #3
 8005168:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	4313      	orrs	r3, r2
 8005170:	608b      	str	r3, [r1, #8]
}
 8005172:	bf00      	nop
 8005174:	370c      	adds	r7, #12
 8005176:	46bd      	mov	sp, r7
 8005178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517c:	4770      	bx	lr

0800517e <LL_RCC_GetSysClkSource>:
{
 800517e:	b480      	push	{r7}
 8005180:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005182:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	f003 030c 	and.w	r3, r3, #12
}
 800518c:	4618      	mov	r0, r3
 800518e:	46bd      	mov	sp, r7
 8005190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005194:	4770      	bx	lr

08005196 <LL_RCC_SetAHBPrescaler>:
{
 8005196:	b480      	push	{r7}
 8005198:	b083      	sub	sp, #12
 800519a:	af00      	add	r7, sp, #0
 800519c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800519e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80051a8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	4313      	orrs	r3, r2
 80051b0:	608b      	str	r3, [r1, #8]
}
 80051b2:	bf00      	nop
 80051b4:	370c      	adds	r7, #12
 80051b6:	46bd      	mov	sp, r7
 80051b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051bc:	4770      	bx	lr

080051be <LL_C2_RCC_SetAHBPrescaler>:
{
 80051be:	b480      	push	{r7}
 80051c0:	b083      	sub	sp, #12
 80051c2:	af00      	add	r7, sp, #0
 80051c4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80051c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80051ca:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80051ce:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80051d2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	4313      	orrs	r3, r2
 80051da:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 80051de:	bf00      	nop
 80051e0:	370c      	adds	r7, #12
 80051e2:	46bd      	mov	sp, r7
 80051e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e8:	4770      	bx	lr

080051ea <LL_RCC_SetAHB4Prescaler>:
{
 80051ea:	b480      	push	{r7}
 80051ec:	b083      	sub	sp, #12
 80051ee:	af00      	add	r7, sp, #0
 80051f0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80051f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80051f6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80051fa:	f023 020f 	bic.w	r2, r3, #15
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	091b      	lsrs	r3, r3, #4
 8005202:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005206:	4313      	orrs	r3, r2
 8005208:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800520c:	bf00      	nop
 800520e:	370c      	adds	r7, #12
 8005210:	46bd      	mov	sp, r7
 8005212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005216:	4770      	bx	lr

08005218 <LL_RCC_SetAPB1Prescaler>:
{
 8005218:	b480      	push	{r7}
 800521a:	b083      	sub	sp, #12
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8005220:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005224:	689b      	ldr	r3, [r3, #8]
 8005226:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800522a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	4313      	orrs	r3, r2
 8005232:	608b      	str	r3, [r1, #8]
}
 8005234:	bf00      	nop
 8005236:	370c      	adds	r7, #12
 8005238:	46bd      	mov	sp, r7
 800523a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523e:	4770      	bx	lr

08005240 <LL_RCC_SetAPB2Prescaler>:
{
 8005240:	b480      	push	{r7}
 8005242:	b083      	sub	sp, #12
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8005248:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800524c:	689b      	ldr	r3, [r3, #8]
 800524e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005252:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	4313      	orrs	r3, r2
 800525a:	608b      	str	r3, [r1, #8]
}
 800525c:	bf00      	nop
 800525e:	370c      	adds	r7, #12
 8005260:	46bd      	mov	sp, r7
 8005262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005266:	4770      	bx	lr

08005268 <LL_RCC_GetAHBPrescaler>:
{
 8005268:	b480      	push	{r7}
 800526a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800526c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8005276:	4618      	mov	r0, r3
 8005278:	46bd      	mov	sp, r7
 800527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527e:	4770      	bx	lr

08005280 <LL_RCC_GetAHB4Prescaler>:
{
 8005280:	b480      	push	{r7}
 8005282:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8005284:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005288:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800528c:	011b      	lsls	r3, r3, #4
 800528e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8005292:	4618      	mov	r0, r3
 8005294:	46bd      	mov	sp, r7
 8005296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529a:	4770      	bx	lr

0800529c <LL_RCC_GetAPB1Prescaler>:
{
 800529c:	b480      	push	{r7}
 800529e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80052a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	46bd      	mov	sp, r7
 80052ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b2:	4770      	bx	lr

080052b4 <LL_RCC_GetAPB2Prescaler>:
{
 80052b4:	b480      	push	{r7}
 80052b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80052b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80052bc:	689b      	ldr	r3, [r3, #8]
 80052be:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	46bd      	mov	sp, r7
 80052c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ca:	4770      	bx	lr

080052cc <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80052cc:	b480      	push	{r7}
 80052ce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80052d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80052da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80052de:	6013      	str	r3, [r2, #0]
}
 80052e0:	bf00      	nop
 80052e2:	46bd      	mov	sp, r7
 80052e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e8:	4770      	bx	lr

080052ea <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80052ea:	b480      	push	{r7}
 80052ec:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80052ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80052f8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80052fc:	6013      	str	r3, [r2, #0]
}
 80052fe:	bf00      	nop
 8005300:	46bd      	mov	sp, r7
 8005302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005306:	4770      	bx	lr

08005308 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8005308:	b480      	push	{r7}
 800530a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800530c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005316:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800531a:	d101      	bne.n	8005320 <LL_RCC_PLL_IsReady+0x18>
 800531c:	2301      	movs	r3, #1
 800531e:	e000      	b.n	8005322 <LL_RCC_PLL_IsReady+0x1a>
 8005320:	2300      	movs	r3, #0
}
 8005322:	4618      	mov	r0, r3
 8005324:	46bd      	mov	sp, r7
 8005326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532a:	4770      	bx	lr

0800532c <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800532c:	b480      	push	{r7}
 800532e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005330:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005334:	68db      	ldr	r3, [r3, #12]
 8005336:	0a1b      	lsrs	r3, r3, #8
 8005338:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 800533c:	4618      	mov	r0, r3
 800533e:	46bd      	mov	sp, r7
 8005340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005344:	4770      	bx	lr

08005346 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8005346:	b480      	push	{r7}
 8005348:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800534a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800534e:	68db      	ldr	r3, [r3, #12]
 8005350:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8005354:	4618      	mov	r0, r3
 8005356:	46bd      	mov	sp, r7
 8005358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535c:	4770      	bx	lr

0800535e <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800535e:	b480      	push	{r7}
 8005360:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8005362:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005366:	68db      	ldr	r3, [r3, #12]
 8005368:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 800536c:	4618      	mov	r0, r3
 800536e:	46bd      	mov	sp, r7
 8005370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005374:	4770      	bx	lr

08005376 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8005376:	b480      	push	{r7}
 8005378:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800537a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800537e:	68db      	ldr	r3, [r3, #12]
 8005380:	f003 0303 	and.w	r3, r3, #3
}
 8005384:	4618      	mov	r0, r3
 8005386:	46bd      	mov	sp, r7
 8005388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538c:	4770      	bx	lr

0800538e <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800538e:	b480      	push	{r7}
 8005390:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8005392:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005396:	689b      	ldr	r3, [r3, #8]
 8005398:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800539c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80053a0:	d101      	bne.n	80053a6 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80053a2:	2301      	movs	r3, #1
 80053a4:	e000      	b.n	80053a8 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80053a6:	2300      	movs	r3, #0
}
 80053a8:	4618      	mov	r0, r3
 80053aa:	46bd      	mov	sp, r7
 80053ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b0:	4770      	bx	lr

080053b2 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80053b2:	b480      	push	{r7}
 80053b4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80053b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80053ba:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80053be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053c2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80053c6:	d101      	bne.n	80053cc <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80053c8:	2301      	movs	r3, #1
 80053ca:	e000      	b.n	80053ce <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80053cc:	2300      	movs	r3, #0
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	46bd      	mov	sp, r7
 80053d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d6:	4770      	bx	lr

080053d8 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80053d8:	b480      	push	{r7}
 80053da:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80053dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80053e0:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80053e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80053e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80053ec:	d101      	bne.n	80053f2 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80053ee:	2301      	movs	r3, #1
 80053f0:	e000      	b.n	80053f4 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80053f2:	2300      	movs	r3, #0
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	46bd      	mov	sp, r7
 80053f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fc:	4770      	bx	lr

080053fe <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80053fe:	b480      	push	{r7}
 8005400:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8005402:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005406:	689b      	ldr	r3, [r3, #8]
 8005408:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800540c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005410:	d101      	bne.n	8005416 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8005412:	2301      	movs	r3, #1
 8005414:	e000      	b.n	8005418 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8005416:	2300      	movs	r3, #0
}
 8005418:	4618      	mov	r0, r3
 800541a:	46bd      	mov	sp, r7
 800541c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005420:	4770      	bx	lr

08005422 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8005422:	b480      	push	{r7}
 8005424:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8005426:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005430:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005434:	d101      	bne.n	800543a <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8005436:	2301      	movs	r3, #1
 8005438:	e000      	b.n	800543c <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800543a:	2300      	movs	r3, #0
}
 800543c:	4618      	mov	r0, r3
 800543e:	46bd      	mov	sp, r7
 8005440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005444:	4770      	bx	lr
	...

08005448 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005448:	b590      	push	{r4, r7, lr}
 800544a:	b08d      	sub	sp, #52	@ 0x34
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d101      	bne.n	800545a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005456:	2301      	movs	r3, #1
 8005458:	e363      	b.n	8005b22 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f003 0320 	and.w	r3, r3, #32
 8005462:	2b00      	cmp	r3, #0
 8005464:	f000 808d 	beq.w	8005582 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005468:	f7ff fe89 	bl	800517e <LL_RCC_GetSysClkSource>
 800546c:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800546e:	f7ff ff82 	bl	8005376 <LL_RCC_PLL_GetMainSource>
 8005472:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005474:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005476:	2b00      	cmp	r3, #0
 8005478:	d005      	beq.n	8005486 <HAL_RCC_OscConfig+0x3e>
 800547a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800547c:	2b0c      	cmp	r3, #12
 800547e:	d147      	bne.n	8005510 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8005480:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005482:	2b01      	cmp	r3, #1
 8005484:	d144      	bne.n	8005510 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	69db      	ldr	r3, [r3, #28]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d101      	bne.n	8005492 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800548e:	2301      	movs	r3, #1
 8005490:	e347      	b.n	8005b22 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8005496:	f7ff fe34 	bl	8005102 <LL_RCC_MSI_GetRange>
 800549a:	4603      	mov	r3, r0
 800549c:	429c      	cmp	r4, r3
 800549e:	d914      	bls.n	80054ca <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054a4:	4618      	mov	r0, r3
 80054a6:	f000 fd2f 	bl	8005f08 <RCC_SetFlashLatencyFromMSIRange>
 80054aa:	4603      	mov	r3, r0
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d001      	beq.n	80054b4 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 80054b0:	2301      	movs	r3, #1
 80054b2:	e336      	b.n	8005b22 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054b8:	4618      	mov	r0, r3
 80054ba:	f7ff fe0e 	bl	80050da <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6a1b      	ldr	r3, [r3, #32]
 80054c2:	4618      	mov	r0, r3
 80054c4:	f7ff fe32 	bl	800512c <LL_RCC_MSI_SetCalibTrimming>
 80054c8:	e013      	b.n	80054f2 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054ce:	4618      	mov	r0, r3
 80054d0:	f7ff fe03 	bl	80050da <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6a1b      	ldr	r3, [r3, #32]
 80054d8:	4618      	mov	r0, r3
 80054da:	f7ff fe27 	bl	800512c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054e2:	4618      	mov	r0, r3
 80054e4:	f000 fd10 	bl	8005f08 <RCC_SetFlashLatencyFromMSIRange>
 80054e8:	4603      	mov	r3, r0
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d001      	beq.n	80054f2 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 80054ee:	2301      	movs	r3, #1
 80054f0:	e317      	b.n	8005b22 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80054f2:	f000 fcc9 	bl	8005e88 <HAL_RCC_GetHCLKFreq>
 80054f6:	4603      	mov	r3, r0
 80054f8:	4aa4      	ldr	r2, [pc, #656]	@ (800578c <HAL_RCC_OscConfig+0x344>)
 80054fa:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80054fc:	4ba4      	ldr	r3, [pc, #656]	@ (8005790 <HAL_RCC_OscConfig+0x348>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4618      	mov	r0, r3
 8005502:	f7fd feef 	bl	80032e4 <HAL_InitTick>
 8005506:	4603      	mov	r3, r0
 8005508:	2b00      	cmp	r3, #0
 800550a:	d039      	beq.n	8005580 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 800550c:	2301      	movs	r3, #1
 800550e:	e308      	b.n	8005b22 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	69db      	ldr	r3, [r3, #28]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d01e      	beq.n	8005556 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005518:	f7ff fdb0 	bl	800507c <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800551c:	f7fd ff30 	bl	8003380 <HAL_GetTick>
 8005520:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8005522:	e008      	b.n	8005536 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005524:	f7fd ff2c 	bl	8003380 <HAL_GetTick>
 8005528:	4602      	mov	r2, r0
 800552a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800552c:	1ad3      	subs	r3, r2, r3
 800552e:	2b02      	cmp	r3, #2
 8005530:	d901      	bls.n	8005536 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005532:	2303      	movs	r3, #3
 8005534:	e2f5      	b.n	8005b22 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8005536:	f7ff fdbf 	bl	80050b8 <LL_RCC_MSI_IsReady>
 800553a:	4603      	mov	r3, r0
 800553c:	2b00      	cmp	r3, #0
 800553e:	d0f1      	beq.n	8005524 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005544:	4618      	mov	r0, r3
 8005546:	f7ff fdc8 	bl	80050da <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6a1b      	ldr	r3, [r3, #32]
 800554e:	4618      	mov	r0, r3
 8005550:	f7ff fdec 	bl	800512c <LL_RCC_MSI_SetCalibTrimming>
 8005554:	e015      	b.n	8005582 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005556:	f7ff fda0 	bl	800509a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800555a:	f7fd ff11 	bl	8003380 <HAL_GetTick>
 800555e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8005560:	e008      	b.n	8005574 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005562:	f7fd ff0d 	bl	8003380 <HAL_GetTick>
 8005566:	4602      	mov	r2, r0
 8005568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800556a:	1ad3      	subs	r3, r2, r3
 800556c:	2b02      	cmp	r3, #2
 800556e:	d901      	bls.n	8005574 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005570:	2303      	movs	r3, #3
 8005572:	e2d6      	b.n	8005b22 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8005574:	f7ff fda0 	bl	80050b8 <LL_RCC_MSI_IsReady>
 8005578:	4603      	mov	r3, r0
 800557a:	2b00      	cmp	r3, #0
 800557c:	d1f1      	bne.n	8005562 <HAL_RCC_OscConfig+0x11a>
 800557e:	e000      	b.n	8005582 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8005580:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f003 0301 	and.w	r3, r3, #1
 800558a:	2b00      	cmp	r3, #0
 800558c:	d047      	beq.n	800561e <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800558e:	f7ff fdf6 	bl	800517e <LL_RCC_GetSysClkSource>
 8005592:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005594:	f7ff feef 	bl	8005376 <LL_RCC_PLL_GetMainSource>
 8005598:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800559a:	6a3b      	ldr	r3, [r7, #32]
 800559c:	2b08      	cmp	r3, #8
 800559e:	d005      	beq.n	80055ac <HAL_RCC_OscConfig+0x164>
 80055a0:	6a3b      	ldr	r3, [r7, #32]
 80055a2:	2b0c      	cmp	r3, #12
 80055a4:	d108      	bne.n	80055b8 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80055a6:	69fb      	ldr	r3, [r7, #28]
 80055a8:	2b03      	cmp	r3, #3
 80055aa:	d105      	bne.n	80055b8 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d134      	bne.n	800561e <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80055b4:	2301      	movs	r3, #1
 80055b6:	e2b4      	b.n	8005b22 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80055c0:	d102      	bne.n	80055c8 <HAL_RCC_OscConfig+0x180>
 80055c2:	f7ff fbdd 	bl	8004d80 <LL_RCC_HSE_Enable>
 80055c6:	e001      	b.n	80055cc <HAL_RCC_OscConfig+0x184>
 80055c8:	f7ff fbe9 	bl	8004d9e <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d012      	beq.n	80055fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055d4:	f7fd fed4 	bl	8003380 <HAL_GetTick>
 80055d8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80055da:	e008      	b.n	80055ee <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80055dc:	f7fd fed0 	bl	8003380 <HAL_GetTick>
 80055e0:	4602      	mov	r2, r0
 80055e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055e4:	1ad3      	subs	r3, r2, r3
 80055e6:	2b64      	cmp	r3, #100	@ 0x64
 80055e8:	d901      	bls.n	80055ee <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80055ea:	2303      	movs	r3, #3
 80055ec:	e299      	b.n	8005b22 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 80055ee:	f7ff fbe5 	bl	8004dbc <LL_RCC_HSE_IsReady>
 80055f2:	4603      	mov	r3, r0
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d0f1      	beq.n	80055dc <HAL_RCC_OscConfig+0x194>
 80055f8:	e011      	b.n	800561e <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055fa:	f7fd fec1 	bl	8003380 <HAL_GetTick>
 80055fe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8005600:	e008      	b.n	8005614 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005602:	f7fd febd 	bl	8003380 <HAL_GetTick>
 8005606:	4602      	mov	r2, r0
 8005608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800560a:	1ad3      	subs	r3, r2, r3
 800560c:	2b64      	cmp	r3, #100	@ 0x64
 800560e:	d901      	bls.n	8005614 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8005610:	2303      	movs	r3, #3
 8005612:	e286      	b.n	8005b22 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8005614:	f7ff fbd2 	bl	8004dbc <LL_RCC_HSE_IsReady>
 8005618:	4603      	mov	r3, r0
 800561a:	2b00      	cmp	r3, #0
 800561c:	d1f1      	bne.n	8005602 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f003 0302 	and.w	r3, r3, #2
 8005626:	2b00      	cmp	r3, #0
 8005628:	d04c      	beq.n	80056c4 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800562a:	f7ff fda8 	bl	800517e <LL_RCC_GetSysClkSource>
 800562e:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005630:	f7ff fea1 	bl	8005376 <LL_RCC_PLL_GetMainSource>
 8005634:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8005636:	69bb      	ldr	r3, [r7, #24]
 8005638:	2b04      	cmp	r3, #4
 800563a:	d005      	beq.n	8005648 <HAL_RCC_OscConfig+0x200>
 800563c:	69bb      	ldr	r3, [r7, #24]
 800563e:	2b0c      	cmp	r3, #12
 8005640:	d10e      	bne.n	8005660 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	2b02      	cmp	r3, #2
 8005646:	d10b      	bne.n	8005660 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	68db      	ldr	r3, [r3, #12]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d101      	bne.n	8005654 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8005650:	2301      	movs	r3, #1
 8005652:	e266      	b.n	8005b22 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	691b      	ldr	r3, [r3, #16]
 8005658:	4618      	mov	r0, r3
 800565a:	f7ff fbf1 	bl	8004e40 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800565e:	e031      	b.n	80056c4 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	68db      	ldr	r3, [r3, #12]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d019      	beq.n	800569c <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005668:	f7ff fbba 	bl	8004de0 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800566c:	f7fd fe88 	bl	8003380 <HAL_GetTick>
 8005670:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8005672:	e008      	b.n	8005686 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005674:	f7fd fe84 	bl	8003380 <HAL_GetTick>
 8005678:	4602      	mov	r2, r0
 800567a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800567c:	1ad3      	subs	r3, r2, r3
 800567e:	2b02      	cmp	r3, #2
 8005680:	d901      	bls.n	8005686 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8005682:	2303      	movs	r3, #3
 8005684:	e24d      	b.n	8005b22 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8005686:	f7ff fbc9 	bl	8004e1c <LL_RCC_HSI_IsReady>
 800568a:	4603      	mov	r3, r0
 800568c:	2b00      	cmp	r3, #0
 800568e:	d0f1      	beq.n	8005674 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	691b      	ldr	r3, [r3, #16]
 8005694:	4618      	mov	r0, r3
 8005696:	f7ff fbd3 	bl	8004e40 <LL_RCC_HSI_SetCalibTrimming>
 800569a:	e013      	b.n	80056c4 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800569c:	f7ff fbaf 	bl	8004dfe <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056a0:	f7fd fe6e 	bl	8003380 <HAL_GetTick>
 80056a4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80056a6:	e008      	b.n	80056ba <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056a8:	f7fd fe6a 	bl	8003380 <HAL_GetTick>
 80056ac:	4602      	mov	r2, r0
 80056ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056b0:	1ad3      	subs	r3, r2, r3
 80056b2:	2b02      	cmp	r3, #2
 80056b4:	d901      	bls.n	80056ba <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80056b6:	2303      	movs	r3, #3
 80056b8:	e233      	b.n	8005b22 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 80056ba:	f7ff fbaf 	bl	8004e1c <LL_RCC_HSI_IsReady>
 80056be:	4603      	mov	r3, r0
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d1f1      	bne.n	80056a8 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f003 0308 	and.w	r3, r3, #8
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d106      	bne.n	80056de <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80056d8:	2b00      	cmp	r3, #0
 80056da:	f000 80a3 	beq.w	8005824 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	695b      	ldr	r3, [r3, #20]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d076      	beq.n	80057d4 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f003 0310 	and.w	r3, r3, #16
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d046      	beq.n	8005780 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80056f2:	f7ff fc66 	bl	8004fc2 <LL_RCC_LSI1_IsReady>
 80056f6:	4603      	mov	r3, r0
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d113      	bne.n	8005724 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80056fc:	f7ff fc3f 	bl	8004f7e <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005700:	f7fd fe3e 	bl	8003380 <HAL_GetTick>
 8005704:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8005706:	e008      	b.n	800571a <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005708:	f7fd fe3a 	bl	8003380 <HAL_GetTick>
 800570c:	4602      	mov	r2, r0
 800570e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005710:	1ad3      	subs	r3, r2, r3
 8005712:	2b02      	cmp	r3, #2
 8005714:	d901      	bls.n	800571a <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8005716:	2303      	movs	r3, #3
 8005718:	e203      	b.n	8005b22 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800571a:	f7ff fc52 	bl	8004fc2 <LL_RCC_LSI1_IsReady>
 800571e:	4603      	mov	r3, r0
 8005720:	2b00      	cmp	r3, #0
 8005722:	d0f1      	beq.n	8005708 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8005724:	f7ff fc5f 	bl	8004fe6 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005728:	f7fd fe2a 	bl	8003380 <HAL_GetTick>
 800572c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800572e:	e008      	b.n	8005742 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005730:	f7fd fe26 	bl	8003380 <HAL_GetTick>
 8005734:	4602      	mov	r2, r0
 8005736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005738:	1ad3      	subs	r3, r2, r3
 800573a:	2b03      	cmp	r3, #3
 800573c:	d901      	bls.n	8005742 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800573e:	2303      	movs	r3, #3
 8005740:	e1ef      	b.n	8005b22 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8005742:	f7ff fc72 	bl	800502a <LL_RCC_LSI2_IsReady>
 8005746:	4603      	mov	r3, r0
 8005748:	2b00      	cmp	r3, #0
 800574a:	d0f1      	beq.n	8005730 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	699b      	ldr	r3, [r3, #24]
 8005750:	4618      	mov	r0, r3
 8005752:	f7ff fc7c 	bl	800504e <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8005756:	f7ff fc23 	bl	8004fa0 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800575a:	f7fd fe11 	bl	8003380 <HAL_GetTick>
 800575e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8005760:	e008      	b.n	8005774 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005762:	f7fd fe0d 	bl	8003380 <HAL_GetTick>
 8005766:	4602      	mov	r2, r0
 8005768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800576a:	1ad3      	subs	r3, r2, r3
 800576c:	2b02      	cmp	r3, #2
 800576e:	d901      	bls.n	8005774 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8005770:	2303      	movs	r3, #3
 8005772:	e1d6      	b.n	8005b22 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8005774:	f7ff fc25 	bl	8004fc2 <LL_RCC_LSI1_IsReady>
 8005778:	4603      	mov	r3, r0
 800577a:	2b00      	cmp	r3, #0
 800577c:	d1f1      	bne.n	8005762 <HAL_RCC_OscConfig+0x31a>
 800577e:	e051      	b.n	8005824 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8005780:	f7ff fbfd 	bl	8004f7e <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005784:	f7fd fdfc 	bl	8003380 <HAL_GetTick>
 8005788:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800578a:	e00c      	b.n	80057a6 <HAL_RCC_OscConfig+0x35e>
 800578c:	20000008 	.word	0x20000008
 8005790:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005794:	f7fd fdf4 	bl	8003380 <HAL_GetTick>
 8005798:	4602      	mov	r2, r0
 800579a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800579c:	1ad3      	subs	r3, r2, r3
 800579e:	2b02      	cmp	r3, #2
 80057a0:	d901      	bls.n	80057a6 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80057a2:	2303      	movs	r3, #3
 80057a4:	e1bd      	b.n	8005b22 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80057a6:	f7ff fc0c 	bl	8004fc2 <LL_RCC_LSI1_IsReady>
 80057aa:	4603      	mov	r3, r0
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d0f1      	beq.n	8005794 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80057b0:	f7ff fc2a 	bl	8005008 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80057b4:	e008      	b.n	80057c8 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80057b6:	f7fd fde3 	bl	8003380 <HAL_GetTick>
 80057ba:	4602      	mov	r2, r0
 80057bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057be:	1ad3      	subs	r3, r2, r3
 80057c0:	2b03      	cmp	r3, #3
 80057c2:	d901      	bls.n	80057c8 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 80057c4:	2303      	movs	r3, #3
 80057c6:	e1ac      	b.n	8005b22 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80057c8:	f7ff fc2f 	bl	800502a <LL_RCC_LSI2_IsReady>
 80057cc:	4603      	mov	r3, r0
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d1f1      	bne.n	80057b6 <HAL_RCC_OscConfig+0x36e>
 80057d2:	e027      	b.n	8005824 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80057d4:	f7ff fc18 	bl	8005008 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057d8:	f7fd fdd2 	bl	8003380 <HAL_GetTick>
 80057dc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80057de:	e008      	b.n	80057f2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80057e0:	f7fd fdce 	bl	8003380 <HAL_GetTick>
 80057e4:	4602      	mov	r2, r0
 80057e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057e8:	1ad3      	subs	r3, r2, r3
 80057ea:	2b03      	cmp	r3, #3
 80057ec:	d901      	bls.n	80057f2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80057ee:	2303      	movs	r3, #3
 80057f0:	e197      	b.n	8005b22 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80057f2:	f7ff fc1a 	bl	800502a <LL_RCC_LSI2_IsReady>
 80057f6:	4603      	mov	r3, r0
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d1f1      	bne.n	80057e0 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80057fc:	f7ff fbd0 	bl	8004fa0 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005800:	f7fd fdbe 	bl	8003380 <HAL_GetTick>
 8005804:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8005806:	e008      	b.n	800581a <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005808:	f7fd fdba 	bl	8003380 <HAL_GetTick>
 800580c:	4602      	mov	r2, r0
 800580e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005810:	1ad3      	subs	r3, r2, r3
 8005812:	2b02      	cmp	r3, #2
 8005814:	d901      	bls.n	800581a <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8005816:	2303      	movs	r3, #3
 8005818:	e183      	b.n	8005b22 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800581a:	f7ff fbd2 	bl	8004fc2 <LL_RCC_LSI1_IsReady>
 800581e:	4603      	mov	r3, r0
 8005820:	2b00      	cmp	r3, #0
 8005822:	d1f1      	bne.n	8005808 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f003 0304 	and.w	r3, r3, #4
 800582c:	2b00      	cmp	r3, #0
 800582e:	d05b      	beq.n	80058e8 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005830:	4ba7      	ldr	r3, [pc, #668]	@ (8005ad0 <HAL_RCC_OscConfig+0x688>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005838:	2b00      	cmp	r3, #0
 800583a:	d114      	bne.n	8005866 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800583c:	f7ff fa70 	bl	8004d20 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005840:	f7fd fd9e 	bl	8003380 <HAL_GetTick>
 8005844:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005846:	e008      	b.n	800585a <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005848:	f7fd fd9a 	bl	8003380 <HAL_GetTick>
 800584c:	4602      	mov	r2, r0
 800584e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005850:	1ad3      	subs	r3, r2, r3
 8005852:	2b02      	cmp	r3, #2
 8005854:	d901      	bls.n	800585a <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8005856:	2303      	movs	r3, #3
 8005858:	e163      	b.n	8005b22 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800585a:	4b9d      	ldr	r3, [pc, #628]	@ (8005ad0 <HAL_RCC_OscConfig+0x688>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005862:	2b00      	cmp	r3, #0
 8005864:	d0f0      	beq.n	8005848 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	689b      	ldr	r3, [r3, #8]
 800586a:	2b01      	cmp	r3, #1
 800586c:	d102      	bne.n	8005874 <HAL_RCC_OscConfig+0x42c>
 800586e:	f7ff fb30 	bl	8004ed2 <LL_RCC_LSE_Enable>
 8005872:	e00c      	b.n	800588e <HAL_RCC_OscConfig+0x446>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	689b      	ldr	r3, [r3, #8]
 8005878:	2b05      	cmp	r3, #5
 800587a:	d104      	bne.n	8005886 <HAL_RCC_OscConfig+0x43e>
 800587c:	f7ff fb4b 	bl	8004f16 <LL_RCC_LSE_EnableBypass>
 8005880:	f7ff fb27 	bl	8004ed2 <LL_RCC_LSE_Enable>
 8005884:	e003      	b.n	800588e <HAL_RCC_OscConfig+0x446>
 8005886:	f7ff fb35 	bl	8004ef4 <LL_RCC_LSE_Disable>
 800588a:	f7ff fb55 	bl	8004f38 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	689b      	ldr	r3, [r3, #8]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d014      	beq.n	80058c0 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005896:	f7fd fd73 	bl	8003380 <HAL_GetTick>
 800589a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800589c:	e00a      	b.n	80058b4 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800589e:	f7fd fd6f 	bl	8003380 <HAL_GetTick>
 80058a2:	4602      	mov	r2, r0
 80058a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058a6:	1ad3      	subs	r3, r2, r3
 80058a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d901      	bls.n	80058b4 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80058b0:	2303      	movs	r3, #3
 80058b2:	e136      	b.n	8005b22 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 80058b4:	f7ff fb51 	bl	8004f5a <LL_RCC_LSE_IsReady>
 80058b8:	4603      	mov	r3, r0
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d0ef      	beq.n	800589e <HAL_RCC_OscConfig+0x456>
 80058be:	e013      	b.n	80058e8 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058c0:	f7fd fd5e 	bl	8003380 <HAL_GetTick>
 80058c4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80058c6:	e00a      	b.n	80058de <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058c8:	f7fd fd5a 	bl	8003380 <HAL_GetTick>
 80058cc:	4602      	mov	r2, r0
 80058ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058d0:	1ad3      	subs	r3, r2, r3
 80058d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d901      	bls.n	80058de <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 80058da:	2303      	movs	r3, #3
 80058dc:	e121      	b.n	8005b22 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 80058de:	f7ff fb3c 	bl	8004f5a <LL_RCC_LSE_IsReady>
 80058e2:	4603      	mov	r3, r0
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d1ef      	bne.n	80058c8 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d02c      	beq.n	800594e <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d014      	beq.n	8005926 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80058fc:	f7ff fab5 	bl	8004e6a <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005900:	f7fd fd3e 	bl	8003380 <HAL_GetTick>
 8005904:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8005906:	e008      	b.n	800591a <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005908:	f7fd fd3a 	bl	8003380 <HAL_GetTick>
 800590c:	4602      	mov	r2, r0
 800590e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005910:	1ad3      	subs	r3, r2, r3
 8005912:	2b02      	cmp	r3, #2
 8005914:	d901      	bls.n	800591a <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8005916:	2303      	movs	r3, #3
 8005918:	e103      	b.n	8005b22 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800591a:	f7ff fac8 	bl	8004eae <LL_RCC_HSI48_IsReady>
 800591e:	4603      	mov	r3, r0
 8005920:	2b00      	cmp	r3, #0
 8005922:	d0f1      	beq.n	8005908 <HAL_RCC_OscConfig+0x4c0>
 8005924:	e013      	b.n	800594e <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005926:	f7ff fab1 	bl	8004e8c <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800592a:	f7fd fd29 	bl	8003380 <HAL_GetTick>
 800592e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8005930:	e008      	b.n	8005944 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005932:	f7fd fd25 	bl	8003380 <HAL_GetTick>
 8005936:	4602      	mov	r2, r0
 8005938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800593a:	1ad3      	subs	r3, r2, r3
 800593c:	2b02      	cmp	r3, #2
 800593e:	d901      	bls.n	8005944 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8005940:	2303      	movs	r3, #3
 8005942:	e0ee      	b.n	8005b22 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8005944:	f7ff fab3 	bl	8004eae <LL_RCC_HSI48_IsReady>
 8005948:	4603      	mov	r3, r0
 800594a:	2b00      	cmp	r3, #0
 800594c:	d1f1      	bne.n	8005932 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005952:	2b00      	cmp	r3, #0
 8005954:	f000 80e4 	beq.w	8005b20 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005958:	f7ff fc11 	bl	800517e <LL_RCC_GetSysClkSource>
 800595c:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800595e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005962:	68db      	ldr	r3, [r3, #12]
 8005964:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800596a:	2b02      	cmp	r3, #2
 800596c:	f040 80b4 	bne.w	8005ad8 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	f003 0203 	and.w	r2, r3, #3
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800597a:	429a      	cmp	r2, r3
 800597c:	d123      	bne.n	80059c6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005988:	429a      	cmp	r2, r3
 800598a:	d11c      	bne.n	80059c6 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	0a1b      	lsrs	r3, r3, #8
 8005990:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005998:	429a      	cmp	r2, r3
 800599a:	d114      	bne.n	80059c6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80059a6:	429a      	cmp	r2, r3
 80059a8:	d10d      	bne.n	80059c6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80059b4:	429a      	cmp	r2, r3
 80059b6:	d106      	bne.n	80059c6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80059c2:	429a      	cmp	r2, r3
 80059c4:	d05d      	beq.n	8005a82 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	2b0c      	cmp	r3, #12
 80059ca:	d058      	beq.n	8005a7e <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80059cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d001      	beq.n	80059de <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 80059da:	2301      	movs	r3, #1
 80059dc:	e0a1      	b.n	8005b22 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80059de:	f7ff fc84 	bl	80052ea <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80059e2:	f7fd fccd 	bl	8003380 <HAL_GetTick>
 80059e6:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80059e8:	e008      	b.n	80059fc <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059ea:	f7fd fcc9 	bl	8003380 <HAL_GetTick>
 80059ee:	4602      	mov	r2, r0
 80059f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059f2:	1ad3      	subs	r3, r2, r3
 80059f4:	2b02      	cmp	r3, #2
 80059f6:	d901      	bls.n	80059fc <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 80059f8:	2303      	movs	r3, #3
 80059fa:	e092      	b.n	8005b22 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80059fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d1ef      	bne.n	80059ea <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005a0a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a0e:	68da      	ldr	r2, [r3, #12]
 8005a10:	4b30      	ldr	r3, [pc, #192]	@ (8005ad4 <HAL_RCC_OscConfig+0x68c>)
 8005a12:	4013      	ands	r3, r2
 8005a14:	687a      	ldr	r2, [r7, #4]
 8005a16:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8005a18:	687a      	ldr	r2, [r7, #4]
 8005a1a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005a1c:	4311      	orrs	r1, r2
 8005a1e:	687a      	ldr	r2, [r7, #4]
 8005a20:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005a22:	0212      	lsls	r2, r2, #8
 8005a24:	4311      	orrs	r1, r2
 8005a26:	687a      	ldr	r2, [r7, #4]
 8005a28:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005a2a:	4311      	orrs	r1, r2
 8005a2c:	687a      	ldr	r2, [r7, #4]
 8005a2e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005a30:	4311      	orrs	r1, r2
 8005a32:	687a      	ldr	r2, [r7, #4]
 8005a34:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8005a36:	430a      	orrs	r2, r1
 8005a38:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005a40:	f7ff fc44 	bl	80052cc <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005a44:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a48:	68db      	ldr	r3, [r3, #12]
 8005a4a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005a4e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a52:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005a54:	f7fd fc94 	bl	8003380 <HAL_GetTick>
 8005a58:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a5a:	e008      	b.n	8005a6e <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a5c:	f7fd fc90 	bl	8003380 <HAL_GetTick>
 8005a60:	4602      	mov	r2, r0
 8005a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a64:	1ad3      	subs	r3, r2, r3
 8005a66:	2b02      	cmp	r3, #2
 8005a68:	d901      	bls.n	8005a6e <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8005a6a:	2303      	movs	r3, #3
 8005a6c:	e059      	b.n	8005b22 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d0ef      	beq.n	8005a5c <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005a7c:	e050      	b.n	8005b20 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	e04f      	b.n	8005b22 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d147      	bne.n	8005b20 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005a90:	f7ff fc1c 	bl	80052cc <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005a94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a98:	68db      	ldr	r3, [r3, #12]
 8005a9a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005a9e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005aa2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005aa4:	f7fd fc6c 	bl	8003380 <HAL_GetTick>
 8005aa8:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005aaa:	e008      	b.n	8005abe <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005aac:	f7fd fc68 	bl	8003380 <HAL_GetTick>
 8005ab0:	4602      	mov	r2, r0
 8005ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ab4:	1ad3      	subs	r3, r2, r3
 8005ab6:	2b02      	cmp	r3, #2
 8005ab8:	d901      	bls.n	8005abe <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8005aba:	2303      	movs	r3, #3
 8005abc:	e031      	b.n	8005b22 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005abe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d0ef      	beq.n	8005aac <HAL_RCC_OscConfig+0x664>
 8005acc:	e028      	b.n	8005b20 <HAL_RCC_OscConfig+0x6d8>
 8005ace:	bf00      	nop
 8005ad0:	58000400 	.word	0x58000400
 8005ad4:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	2b0c      	cmp	r3, #12
 8005adc:	d01e      	beq.n	8005b1c <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ade:	f7ff fc04 	bl	80052ea <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ae2:	f7fd fc4d 	bl	8003380 <HAL_GetTick>
 8005ae6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005ae8:	e008      	b.n	8005afc <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005aea:	f7fd fc49 	bl	8003380 <HAL_GetTick>
 8005aee:	4602      	mov	r2, r0
 8005af0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005af2:	1ad3      	subs	r3, r2, r3
 8005af4:	2b02      	cmp	r3, #2
 8005af6:	d901      	bls.n	8005afc <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8005af8:	2303      	movs	r3, #3
 8005afa:	e012      	b.n	8005b22 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005afc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d1ef      	bne.n	8005aea <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8005b0a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b0e:	68da      	ldr	r2, [r3, #12]
 8005b10:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005b14:	4b05      	ldr	r3, [pc, #20]	@ (8005b2c <HAL_RCC_OscConfig+0x6e4>)
 8005b16:	4013      	ands	r3, r2
 8005b18:	60cb      	str	r3, [r1, #12]
 8005b1a:	e001      	b.n	8005b20 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	e000      	b.n	8005b22 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8005b20:	2300      	movs	r3, #0
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	3734      	adds	r7, #52	@ 0x34
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd90      	pop	{r4, r7, pc}
 8005b2a:	bf00      	nop
 8005b2c:	eefefffc 	.word	0xeefefffc

08005b30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b084      	sub	sp, #16
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
 8005b38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d101      	bne.n	8005b44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005b40:	2301      	movs	r3, #1
 8005b42:	e12d      	b.n	8005da0 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005b44:	4b98      	ldr	r3, [pc, #608]	@ (8005da8 <HAL_RCC_ClockConfig+0x278>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f003 0307 	and.w	r3, r3, #7
 8005b4c:	683a      	ldr	r2, [r7, #0]
 8005b4e:	429a      	cmp	r2, r3
 8005b50:	d91b      	bls.n	8005b8a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b52:	4b95      	ldr	r3, [pc, #596]	@ (8005da8 <HAL_RCC_ClockConfig+0x278>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f023 0207 	bic.w	r2, r3, #7
 8005b5a:	4993      	ldr	r1, [pc, #588]	@ (8005da8 <HAL_RCC_ClockConfig+0x278>)
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b62:	f7fd fc0d 	bl	8003380 <HAL_GetTick>
 8005b66:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b68:	e008      	b.n	8005b7c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005b6a:	f7fd fc09 	bl	8003380 <HAL_GetTick>
 8005b6e:	4602      	mov	r2, r0
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	1ad3      	subs	r3, r2, r3
 8005b74:	2b02      	cmp	r3, #2
 8005b76:	d901      	bls.n	8005b7c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8005b78:	2303      	movs	r3, #3
 8005b7a:	e111      	b.n	8005da0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b7c:	4b8a      	ldr	r3, [pc, #552]	@ (8005da8 <HAL_RCC_ClockConfig+0x278>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f003 0307 	and.w	r3, r3, #7
 8005b84:	683a      	ldr	r2, [r7, #0]
 8005b86:	429a      	cmp	r2, r3
 8005b88:	d1ef      	bne.n	8005b6a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f003 0302 	and.w	r3, r3, #2
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d016      	beq.n	8005bc4 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	689b      	ldr	r3, [r3, #8]
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f7ff fafb 	bl	8005196 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005ba0:	f7fd fbee 	bl	8003380 <HAL_GetTick>
 8005ba4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005ba6:	e008      	b.n	8005bba <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005ba8:	f7fd fbea 	bl	8003380 <HAL_GetTick>
 8005bac:	4602      	mov	r2, r0
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	1ad3      	subs	r3, r2, r3
 8005bb2:	2b02      	cmp	r3, #2
 8005bb4:	d901      	bls.n	8005bba <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8005bb6:	2303      	movs	r3, #3
 8005bb8:	e0f2      	b.n	8005da0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005bba:	f7ff fbe8 	bl	800538e <LL_RCC_IsActiveFlag_HPRE>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d0f1      	beq.n	8005ba8 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f003 0320 	and.w	r3, r3, #32
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d016      	beq.n	8005bfe <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	695b      	ldr	r3, [r3, #20]
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	f7ff faf2 	bl	80051be <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005bda:	f7fd fbd1 	bl	8003380 <HAL_GetTick>
 8005bde:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005be0:	e008      	b.n	8005bf4 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005be2:	f7fd fbcd 	bl	8003380 <HAL_GetTick>
 8005be6:	4602      	mov	r2, r0
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	1ad3      	subs	r3, r2, r3
 8005bec:	2b02      	cmp	r3, #2
 8005bee:	d901      	bls.n	8005bf4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8005bf0:	2303      	movs	r3, #3
 8005bf2:	e0d5      	b.n	8005da0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005bf4:	f7ff fbdd 	bl	80053b2 <LL_RCC_IsActiveFlag_C2HPRE>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d0f1      	beq.n	8005be2 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d016      	beq.n	8005c38 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	699b      	ldr	r3, [r3, #24]
 8005c0e:	4618      	mov	r0, r3
 8005c10:	f7ff faeb 	bl	80051ea <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005c14:	f7fd fbb4 	bl	8003380 <HAL_GetTick>
 8005c18:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005c1a:	e008      	b.n	8005c2e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005c1c:	f7fd fbb0 	bl	8003380 <HAL_GetTick>
 8005c20:	4602      	mov	r2, r0
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	1ad3      	subs	r3, r2, r3
 8005c26:	2b02      	cmp	r3, #2
 8005c28:	d901      	bls.n	8005c2e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8005c2a:	2303      	movs	r3, #3
 8005c2c:	e0b8      	b.n	8005da0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005c2e:	f7ff fbd3 	bl	80053d8 <LL_RCC_IsActiveFlag_SHDHPRE>
 8005c32:	4603      	mov	r3, r0
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d0f1      	beq.n	8005c1c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f003 0304 	and.w	r3, r3, #4
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d016      	beq.n	8005c72 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	68db      	ldr	r3, [r3, #12]
 8005c48:	4618      	mov	r0, r3
 8005c4a:	f7ff fae5 	bl	8005218 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005c4e:	f7fd fb97 	bl	8003380 <HAL_GetTick>
 8005c52:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005c54:	e008      	b.n	8005c68 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005c56:	f7fd fb93 	bl	8003380 <HAL_GetTick>
 8005c5a:	4602      	mov	r2, r0
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	1ad3      	subs	r3, r2, r3
 8005c60:	2b02      	cmp	r3, #2
 8005c62:	d901      	bls.n	8005c68 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8005c64:	2303      	movs	r3, #3
 8005c66:	e09b      	b.n	8005da0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005c68:	f7ff fbc9 	bl	80053fe <LL_RCC_IsActiveFlag_PPRE1>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d0f1      	beq.n	8005c56 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f003 0308 	and.w	r3, r3, #8
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d017      	beq.n	8005cae <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	691b      	ldr	r3, [r3, #16]
 8005c82:	00db      	lsls	r3, r3, #3
 8005c84:	4618      	mov	r0, r3
 8005c86:	f7ff fadb 	bl	8005240 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005c8a:	f7fd fb79 	bl	8003380 <HAL_GetTick>
 8005c8e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005c90:	e008      	b.n	8005ca4 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005c92:	f7fd fb75 	bl	8003380 <HAL_GetTick>
 8005c96:	4602      	mov	r2, r0
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	1ad3      	subs	r3, r2, r3
 8005c9c:	2b02      	cmp	r3, #2
 8005c9e:	d901      	bls.n	8005ca4 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8005ca0:	2303      	movs	r3, #3
 8005ca2:	e07d      	b.n	8005da0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005ca4:	f7ff fbbd 	bl	8005422 <LL_RCC_IsActiveFlag_PPRE2>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d0f1      	beq.n	8005c92 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f003 0301 	and.w	r3, r3, #1
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d043      	beq.n	8005d42 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	2b02      	cmp	r3, #2
 8005cc0:	d106      	bne.n	8005cd0 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8005cc2:	f7ff f87b 	bl	8004dbc <LL_RCC_HSE_IsReady>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d11e      	bne.n	8005d0a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005ccc:	2301      	movs	r3, #1
 8005cce:	e067      	b.n	8005da0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	2b03      	cmp	r3, #3
 8005cd6:	d106      	bne.n	8005ce6 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8005cd8:	f7ff fb16 	bl	8005308 <LL_RCC_PLL_IsReady>
 8005cdc:	4603      	mov	r3, r0
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d113      	bne.n	8005d0a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	e05c      	b.n	8005da0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d106      	bne.n	8005cfc <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8005cee:	f7ff f9e3 	bl	80050b8 <LL_RCC_MSI_IsReady>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d108      	bne.n	8005d0a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	e051      	b.n	8005da0 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8005cfc:	f7ff f88e 	bl	8004e1c <LL_RCC_HSI_IsReady>
 8005d00:	4603      	mov	r3, r0
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d101      	bne.n	8005d0a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005d06:	2301      	movs	r3, #1
 8005d08:	e04a      	b.n	8005da0 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f7ff fa21 	bl	8005156 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d14:	f7fd fb34 	bl	8003380 <HAL_GetTick>
 8005d18:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d1a:	e00a      	b.n	8005d32 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d1c:	f7fd fb30 	bl	8003380 <HAL_GetTick>
 8005d20:	4602      	mov	r2, r0
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	1ad3      	subs	r3, r2, r3
 8005d26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d901      	bls.n	8005d32 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8005d2e:	2303      	movs	r3, #3
 8005d30:	e036      	b.n	8005da0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d32:	f7ff fa24 	bl	800517e <LL_RCC_GetSysClkSource>
 8005d36:	4602      	mov	r2, r0
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	009b      	lsls	r3, r3, #2
 8005d3e:	429a      	cmp	r2, r3
 8005d40:	d1ec      	bne.n	8005d1c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005d42:	4b19      	ldr	r3, [pc, #100]	@ (8005da8 <HAL_RCC_ClockConfig+0x278>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f003 0307 	and.w	r3, r3, #7
 8005d4a:	683a      	ldr	r2, [r7, #0]
 8005d4c:	429a      	cmp	r2, r3
 8005d4e:	d21b      	bcs.n	8005d88 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d50:	4b15      	ldr	r3, [pc, #84]	@ (8005da8 <HAL_RCC_ClockConfig+0x278>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f023 0207 	bic.w	r2, r3, #7
 8005d58:	4913      	ldr	r1, [pc, #76]	@ (8005da8 <HAL_RCC_ClockConfig+0x278>)
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d60:	f7fd fb0e 	bl	8003380 <HAL_GetTick>
 8005d64:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d66:	e008      	b.n	8005d7a <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005d68:	f7fd fb0a 	bl	8003380 <HAL_GetTick>
 8005d6c:	4602      	mov	r2, r0
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	1ad3      	subs	r3, r2, r3
 8005d72:	2b02      	cmp	r3, #2
 8005d74:	d901      	bls.n	8005d7a <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8005d76:	2303      	movs	r3, #3
 8005d78:	e012      	b.n	8005da0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d7a:	4b0b      	ldr	r3, [pc, #44]	@ (8005da8 <HAL_RCC_ClockConfig+0x278>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f003 0307 	and.w	r3, r3, #7
 8005d82:	683a      	ldr	r2, [r7, #0]
 8005d84:	429a      	cmp	r2, r3
 8005d86:	d1ef      	bne.n	8005d68 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005d88:	f000 f87e 	bl	8005e88 <HAL_RCC_GetHCLKFreq>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	4a07      	ldr	r2, [pc, #28]	@ (8005dac <HAL_RCC_ClockConfig+0x27c>)
 8005d90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8005d92:	f7fd fb01 	bl	8003398 <HAL_GetTickPrio>
 8005d96:	4603      	mov	r3, r0
 8005d98:	4618      	mov	r0, r3
 8005d9a:	f7fd faa3 	bl	80032e4 <HAL_InitTick>
 8005d9e:	4603      	mov	r3, r0
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	3710      	adds	r7, #16
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd80      	pop	{r7, pc}
 8005da8:	58004000 	.word	0x58004000
 8005dac:	20000008 	.word	0x20000008

08005db0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005db0:	b590      	push	{r4, r7, lr}
 8005db2:	b085      	sub	sp, #20
 8005db4:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005db6:	f7ff f9e2 	bl	800517e <LL_RCC_GetSysClkSource>
 8005dba:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d10a      	bne.n	8005dd8 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005dc2:	f7ff f99e 	bl	8005102 <LL_RCC_MSI_GetRange>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	091b      	lsrs	r3, r3, #4
 8005dca:	f003 030f 	and.w	r3, r3, #15
 8005dce:	4a2b      	ldr	r2, [pc, #172]	@ (8005e7c <HAL_RCC_GetSysClockFreq+0xcc>)
 8005dd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005dd4:	60fb      	str	r3, [r7, #12]
 8005dd6:	e04b      	b.n	8005e70 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2b04      	cmp	r3, #4
 8005ddc:	d102      	bne.n	8005de4 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005dde:	4b28      	ldr	r3, [pc, #160]	@ (8005e80 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005de0:	60fb      	str	r3, [r7, #12]
 8005de2:	e045      	b.n	8005e70 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2b08      	cmp	r3, #8
 8005de8:	d10a      	bne.n	8005e00 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005dea:	f7fe ffb7 	bl	8004d5c <LL_RCC_HSE_IsEnabledDiv2>
 8005dee:	4603      	mov	r3, r0
 8005df0:	2b01      	cmp	r3, #1
 8005df2:	d102      	bne.n	8005dfa <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8005df4:	4b22      	ldr	r3, [pc, #136]	@ (8005e80 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005df6:	60fb      	str	r3, [r7, #12]
 8005df8:	e03a      	b.n	8005e70 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8005dfa:	4b22      	ldr	r3, [pc, #136]	@ (8005e84 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005dfc:	60fb      	str	r3, [r7, #12]
 8005dfe:	e037      	b.n	8005e70 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8005e00:	f7ff fab9 	bl	8005376 <LL_RCC_PLL_GetMainSource>
 8005e04:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	2b02      	cmp	r3, #2
 8005e0a:	d003      	beq.n	8005e14 <HAL_RCC_GetSysClockFreq+0x64>
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	2b03      	cmp	r3, #3
 8005e10:	d003      	beq.n	8005e1a <HAL_RCC_GetSysClockFreq+0x6a>
 8005e12:	e00d      	b.n	8005e30 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8005e14:	4b1a      	ldr	r3, [pc, #104]	@ (8005e80 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005e16:	60bb      	str	r3, [r7, #8]
        break;
 8005e18:	e015      	b.n	8005e46 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005e1a:	f7fe ff9f 	bl	8004d5c <LL_RCC_HSE_IsEnabledDiv2>
 8005e1e:	4603      	mov	r3, r0
 8005e20:	2b01      	cmp	r3, #1
 8005e22:	d102      	bne.n	8005e2a <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8005e24:	4b16      	ldr	r3, [pc, #88]	@ (8005e80 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005e26:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8005e28:	e00d      	b.n	8005e46 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8005e2a:	4b16      	ldr	r3, [pc, #88]	@ (8005e84 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005e2c:	60bb      	str	r3, [r7, #8]
        break;
 8005e2e:	e00a      	b.n	8005e46 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005e30:	f7ff f967 	bl	8005102 <LL_RCC_MSI_GetRange>
 8005e34:	4603      	mov	r3, r0
 8005e36:	091b      	lsrs	r3, r3, #4
 8005e38:	f003 030f 	and.w	r3, r3, #15
 8005e3c:	4a0f      	ldr	r2, [pc, #60]	@ (8005e7c <HAL_RCC_GetSysClockFreq+0xcc>)
 8005e3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e42:	60bb      	str	r3, [r7, #8]
        break;
 8005e44:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8005e46:	f7ff fa71 	bl	800532c <LL_RCC_PLL_GetN>
 8005e4a:	4602      	mov	r2, r0
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	fb03 f402 	mul.w	r4, r3, r2
 8005e52:	f7ff fa84 	bl	800535e <LL_RCC_PLL_GetDivider>
 8005e56:	4603      	mov	r3, r0
 8005e58:	091b      	lsrs	r3, r3, #4
 8005e5a:	3301      	adds	r3, #1
 8005e5c:	fbb4 f4f3 	udiv	r4, r4, r3
 8005e60:	f7ff fa71 	bl	8005346 <LL_RCC_PLL_GetR>
 8005e64:	4603      	mov	r3, r0
 8005e66:	0f5b      	lsrs	r3, r3, #29
 8005e68:	3301      	adds	r3, #1
 8005e6a:	fbb4 f3f3 	udiv	r3, r4, r3
 8005e6e:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8005e70:	68fb      	ldr	r3, [r7, #12]
}
 8005e72:	4618      	mov	r0, r3
 8005e74:	3714      	adds	r7, #20
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bd90      	pop	{r4, r7, pc}
 8005e7a:	bf00      	nop
 8005e7c:	08010cc0 	.word	0x08010cc0
 8005e80:	00f42400 	.word	0x00f42400
 8005e84:	01e84800 	.word	0x01e84800

08005e88 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005e88:	b598      	push	{r3, r4, r7, lr}
 8005e8a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8005e8c:	f7ff ff90 	bl	8005db0 <HAL_RCC_GetSysClockFreq>
 8005e90:	4604      	mov	r4, r0
 8005e92:	f7ff f9e9 	bl	8005268 <LL_RCC_GetAHBPrescaler>
 8005e96:	4603      	mov	r3, r0
 8005e98:	091b      	lsrs	r3, r3, #4
 8005e9a:	f003 030f 	and.w	r3, r3, #15
 8005e9e:	4a03      	ldr	r2, [pc, #12]	@ (8005eac <HAL_RCC_GetHCLKFreq+0x24>)
 8005ea0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ea4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	bd98      	pop	{r3, r4, r7, pc}
 8005eac:	08010c60 	.word	0x08010c60

08005eb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005eb0:	b598      	push	{r3, r4, r7, lr}
 8005eb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005eb4:	f7ff ffe8 	bl	8005e88 <HAL_RCC_GetHCLKFreq>
 8005eb8:	4604      	mov	r4, r0
 8005eba:	f7ff f9ef 	bl	800529c <LL_RCC_GetAPB1Prescaler>
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	0a1b      	lsrs	r3, r3, #8
 8005ec2:	f003 0307 	and.w	r3, r3, #7
 8005ec6:	4a04      	ldr	r2, [pc, #16]	@ (8005ed8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005ec8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ecc:	f003 031f 	and.w	r3, r3, #31
 8005ed0:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	bd98      	pop	{r3, r4, r7, pc}
 8005ed8:	08010ca0 	.word	0x08010ca0

08005edc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005edc:	b598      	push	{r3, r4, r7, lr}
 8005ede:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8005ee0:	f7ff ffd2 	bl	8005e88 <HAL_RCC_GetHCLKFreq>
 8005ee4:	4604      	mov	r4, r0
 8005ee6:	f7ff f9e5 	bl	80052b4 <LL_RCC_GetAPB2Prescaler>
 8005eea:	4603      	mov	r3, r0
 8005eec:	0adb      	lsrs	r3, r3, #11
 8005eee:	f003 0307 	and.w	r3, r3, #7
 8005ef2:	4a04      	ldr	r2, [pc, #16]	@ (8005f04 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005ef4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ef8:	f003 031f 	and.w	r3, r3, #31
 8005efc:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	bd98      	pop	{r3, r4, r7, pc}
 8005f04:	08010ca0 	.word	0x08010ca0

08005f08 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8005f08:	b590      	push	{r4, r7, lr}
 8005f0a:	b085      	sub	sp, #20
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2bb0      	cmp	r3, #176	@ 0xb0
 8005f14:	d903      	bls.n	8005f1e <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8005f16:	4b15      	ldr	r3, [pc, #84]	@ (8005f6c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005f18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f1a:	60fb      	str	r3, [r7, #12]
 8005f1c:	e007      	b.n	8005f2e <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	091b      	lsrs	r3, r3, #4
 8005f22:	f003 030f 	and.w	r3, r3, #15
 8005f26:	4a11      	ldr	r2, [pc, #68]	@ (8005f6c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005f28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f2c:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8005f2e:	f7ff f9a7 	bl	8005280 <LL_RCC_GetAHB4Prescaler>
 8005f32:	4603      	mov	r3, r0
 8005f34:	091b      	lsrs	r3, r3, #4
 8005f36:	f003 030f 	and.w	r3, r3, #15
 8005f3a:	4a0d      	ldr	r2, [pc, #52]	@ (8005f70 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8005f3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f40:	68fa      	ldr	r2, [r7, #12]
 8005f42:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f46:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	4a0a      	ldr	r2, [pc, #40]	@ (8005f74 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8005f4c:	fba2 2303 	umull	r2, r3, r2, r3
 8005f50:	0c9c      	lsrs	r4, r3, #18
 8005f52:	f7fe fef5 	bl	8004d40 <HAL_PWREx_GetVoltageRange>
 8005f56:	4603      	mov	r3, r0
 8005f58:	4619      	mov	r1, r3
 8005f5a:	4620      	mov	r0, r4
 8005f5c:	f000 f80c 	bl	8005f78 <RCC_SetFlashLatency>
 8005f60:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	3714      	adds	r7, #20
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd90      	pop	{r4, r7, pc}
 8005f6a:	bf00      	nop
 8005f6c:	08010cc0 	.word	0x08010cc0
 8005f70:	08010c60 	.word	0x08010c60
 8005f74:	431bde83 	.word	0x431bde83

08005f78 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8005f78:	b590      	push	{r4, r7, lr}
 8005f7a:	b093      	sub	sp, #76	@ 0x4c
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
 8005f80:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8005f82:	4b37      	ldr	r3, [pc, #220]	@ (8006060 <RCC_SetFlashLatency+0xe8>)
 8005f84:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8005f88:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005f8a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8005f8e:	4a35      	ldr	r2, [pc, #212]	@ (8006064 <RCC_SetFlashLatency+0xec>)
 8005f90:	f107 031c 	add.w	r3, r7, #28
 8005f94:	ca07      	ldmia	r2, {r0, r1, r2}
 8005f96:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8005f9a:	4b33      	ldr	r3, [pc, #204]	@ (8006068 <RCC_SetFlashLatency+0xf0>)
 8005f9c:	f107 040c 	add.w	r4, r7, #12
 8005fa0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005fa2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005fb0:	d11a      	bne.n	8005fe8 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	643b      	str	r3, [r7, #64]	@ 0x40
 8005fb6:	e013      	b.n	8005fe0 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8005fb8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005fba:	009b      	lsls	r3, r3, #2
 8005fbc:	3348      	adds	r3, #72	@ 0x48
 8005fbe:	443b      	add	r3, r7
 8005fc0:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8005fc4:	687a      	ldr	r2, [r7, #4]
 8005fc6:	429a      	cmp	r2, r3
 8005fc8:	d807      	bhi.n	8005fda <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005fca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005fcc:	009b      	lsls	r3, r3, #2
 8005fce:	3348      	adds	r3, #72	@ 0x48
 8005fd0:	443b      	add	r3, r7
 8005fd2:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005fd6:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8005fd8:	e020      	b.n	800601c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005fda:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005fdc:	3301      	adds	r3, #1
 8005fde:	643b      	str	r3, [r7, #64]	@ 0x40
 8005fe0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005fe2:	2b03      	cmp	r3, #3
 8005fe4:	d9e8      	bls.n	8005fb8 <RCC_SetFlashLatency+0x40>
 8005fe6:	e019      	b.n	800601c <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005fe8:	2300      	movs	r3, #0
 8005fea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005fec:	e013      	b.n	8006016 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8005fee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ff0:	009b      	lsls	r3, r3, #2
 8005ff2:	3348      	adds	r3, #72	@ 0x48
 8005ff4:	443b      	add	r3, r7
 8005ff6:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8005ffa:	687a      	ldr	r2, [r7, #4]
 8005ffc:	429a      	cmp	r2, r3
 8005ffe:	d807      	bhi.n	8006010 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006000:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006002:	009b      	lsls	r3, r3, #2
 8006004:	3348      	adds	r3, #72	@ 0x48
 8006006:	443b      	add	r3, r7
 8006008:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800600c:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800600e:	e005      	b.n	800601c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006010:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006012:	3301      	adds	r3, #1
 8006014:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006016:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006018:	2b02      	cmp	r3, #2
 800601a:	d9e8      	bls.n	8005fee <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 800601c:	4b13      	ldr	r3, [pc, #76]	@ (800606c <RCC_SetFlashLatency+0xf4>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f023 0207 	bic.w	r2, r3, #7
 8006024:	4911      	ldr	r1, [pc, #68]	@ (800606c <RCC_SetFlashLatency+0xf4>)
 8006026:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006028:	4313      	orrs	r3, r2
 800602a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800602c:	f7fd f9a8 	bl	8003380 <HAL_GetTick>
 8006030:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006032:	e008      	b.n	8006046 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006034:	f7fd f9a4 	bl	8003380 <HAL_GetTick>
 8006038:	4602      	mov	r2, r0
 800603a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800603c:	1ad3      	subs	r3, r2, r3
 800603e:	2b02      	cmp	r3, #2
 8006040:	d901      	bls.n	8006046 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8006042:	2303      	movs	r3, #3
 8006044:	e007      	b.n	8006056 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006046:	4b09      	ldr	r3, [pc, #36]	@ (800606c <RCC_SetFlashLatency+0xf4>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f003 0307 	and.w	r3, r3, #7
 800604e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006050:	429a      	cmp	r2, r3
 8006052:	d1ef      	bne.n	8006034 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8006054:	2300      	movs	r3, #0
}
 8006056:	4618      	mov	r0, r3
 8006058:	374c      	adds	r7, #76	@ 0x4c
 800605a:	46bd      	mov	sp, r7
 800605c:	bd90      	pop	{r4, r7, pc}
 800605e:	bf00      	nop
 8006060:	0800fafc 	.word	0x0800fafc
 8006064:	0800fb0c 	.word	0x0800fb0c
 8006068:	0800fb18 	.word	0x0800fb18
 800606c:	58004000 	.word	0x58004000

08006070 <LL_RCC_LSE_IsEnabled>:
{
 8006070:	b480      	push	{r7}
 8006072:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8006074:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006078:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800607c:	f003 0301 	and.w	r3, r3, #1
 8006080:	2b01      	cmp	r3, #1
 8006082:	d101      	bne.n	8006088 <LL_RCC_LSE_IsEnabled+0x18>
 8006084:	2301      	movs	r3, #1
 8006086:	e000      	b.n	800608a <LL_RCC_LSE_IsEnabled+0x1a>
 8006088:	2300      	movs	r3, #0
}
 800608a:	4618      	mov	r0, r3
 800608c:	46bd      	mov	sp, r7
 800608e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006092:	4770      	bx	lr

08006094 <LL_RCC_LSE_IsReady>:
{
 8006094:	b480      	push	{r7}
 8006096:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006098:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800609c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060a0:	f003 0302 	and.w	r3, r3, #2
 80060a4:	2b02      	cmp	r3, #2
 80060a6:	d101      	bne.n	80060ac <LL_RCC_LSE_IsReady+0x18>
 80060a8:	2301      	movs	r3, #1
 80060aa:	e000      	b.n	80060ae <LL_RCC_LSE_IsReady+0x1a>
 80060ac:	2300      	movs	r3, #0
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	46bd      	mov	sp, r7
 80060b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b6:	4770      	bx	lr

080060b8 <LL_RCC_SetRFWKPClockSource>:
{
 80060b8:	b480      	push	{r7}
 80060ba:	b083      	sub	sp, #12
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80060c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80060c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80060c8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80060cc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	4313      	orrs	r3, r2
 80060d4:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 80060d8:	bf00      	nop
 80060da:	370c      	adds	r7, #12
 80060dc:	46bd      	mov	sp, r7
 80060de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e2:	4770      	bx	lr

080060e4 <LL_RCC_SetSMPSClockSource>:
{
 80060e4:	b480      	push	{r7}
 80060e6:	b083      	sub	sp, #12
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80060ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80060f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060f2:	f023 0203 	bic.w	r2, r3, #3
 80060f6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	4313      	orrs	r3, r2
 80060fe:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8006100:	bf00      	nop
 8006102:	370c      	adds	r7, #12
 8006104:	46bd      	mov	sp, r7
 8006106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610a:	4770      	bx	lr

0800610c <LL_RCC_SetSMPSPrescaler>:
{
 800610c:	b480      	push	{r7}
 800610e:	b083      	sub	sp, #12
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8006114:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800611a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800611e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	4313      	orrs	r3, r2
 8006126:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8006128:	bf00      	nop
 800612a:	370c      	adds	r7, #12
 800612c:	46bd      	mov	sp, r7
 800612e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006132:	4770      	bx	lr

08006134 <LL_RCC_SetUSARTClockSource>:
{
 8006134:	b480      	push	{r7}
 8006136:	b083      	sub	sp, #12
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800613c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006140:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006144:	f023 0203 	bic.w	r2, r3, #3
 8006148:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	4313      	orrs	r3, r2
 8006150:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006154:	bf00      	nop
 8006156:	370c      	adds	r7, #12
 8006158:	46bd      	mov	sp, r7
 800615a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615e:	4770      	bx	lr

08006160 <LL_RCC_SetLPUARTClockSource>:
{
 8006160:	b480      	push	{r7}
 8006162:	b083      	sub	sp, #12
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8006168:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800616c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006170:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006174:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	4313      	orrs	r3, r2
 800617c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006180:	bf00      	nop
 8006182:	370c      	adds	r7, #12
 8006184:	46bd      	mov	sp, r7
 8006186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618a:	4770      	bx	lr

0800618c <LL_RCC_SetI2CClockSource>:
{
 800618c:	b480      	push	{r7}
 800618e:	b083      	sub	sp, #12
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8006194:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006198:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	091b      	lsrs	r3, r3, #4
 80061a0:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 80061a4:	43db      	mvns	r3, r3
 80061a6:	401a      	ands	r2, r3
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	011b      	lsls	r3, r3, #4
 80061ac:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 80061b0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80061b4:	4313      	orrs	r3, r2
 80061b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80061ba:	bf00      	nop
 80061bc:	370c      	adds	r7, #12
 80061be:	46bd      	mov	sp, r7
 80061c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c4:	4770      	bx	lr

080061c6 <LL_RCC_SetLPTIMClockSource>:
{
 80061c6:	b480      	push	{r7}
 80061c8:	b083      	sub	sp, #12
 80061ca:	af00      	add	r7, sp, #0
 80061cc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80061ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80061d2:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	0c1b      	lsrs	r3, r3, #16
 80061da:	041b      	lsls	r3, r3, #16
 80061dc:	43db      	mvns	r3, r3
 80061de:	401a      	ands	r2, r3
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	041b      	lsls	r3, r3, #16
 80061e4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80061e8:	4313      	orrs	r3, r2
 80061ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80061ee:	bf00      	nop
 80061f0:	370c      	adds	r7, #12
 80061f2:	46bd      	mov	sp, r7
 80061f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f8:	4770      	bx	lr

080061fa <LL_RCC_SetSAIClockSource>:
{
 80061fa:	b480      	push	{r7}
 80061fc:	b083      	sub	sp, #12
 80061fe:	af00      	add	r7, sp, #0
 8006200:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8006202:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006206:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800620a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800620e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	4313      	orrs	r3, r2
 8006216:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800621a:	bf00      	nop
 800621c:	370c      	adds	r7, #12
 800621e:	46bd      	mov	sp, r7
 8006220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006224:	4770      	bx	lr

08006226 <LL_RCC_SetRNGClockSource>:
{
 8006226:	b480      	push	{r7}
 8006228:	b083      	sub	sp, #12
 800622a:	af00      	add	r7, sp, #0
 800622c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800622e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006232:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006236:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800623a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	4313      	orrs	r3, r2
 8006242:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006246:	bf00      	nop
 8006248:	370c      	adds	r7, #12
 800624a:	46bd      	mov	sp, r7
 800624c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006250:	4770      	bx	lr

08006252 <LL_RCC_SetCLK48ClockSource>:
{
 8006252:	b480      	push	{r7}
 8006254:	b083      	sub	sp, #12
 8006256:	af00      	add	r7, sp, #0
 8006258:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800625a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800625e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006262:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006266:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	4313      	orrs	r3, r2
 800626e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006272:	bf00      	nop
 8006274:	370c      	adds	r7, #12
 8006276:	46bd      	mov	sp, r7
 8006278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627c:	4770      	bx	lr

0800627e <LL_RCC_SetUSBClockSource>:
{
 800627e:	b580      	push	{r7, lr}
 8006280:	b082      	sub	sp, #8
 8006282:	af00      	add	r7, sp, #0
 8006284:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f7ff ffe3 	bl	8006252 <LL_RCC_SetCLK48ClockSource>
}
 800628c:	bf00      	nop
 800628e:	3708      	adds	r7, #8
 8006290:	46bd      	mov	sp, r7
 8006292:	bd80      	pop	{r7, pc}

08006294 <LL_RCC_SetADCClockSource>:
{
 8006294:	b480      	push	{r7}
 8006296:	b083      	sub	sp, #12
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800629c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80062a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062a4:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80062a8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	4313      	orrs	r3, r2
 80062b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80062b4:	bf00      	nop
 80062b6:	370c      	adds	r7, #12
 80062b8:	46bd      	mov	sp, r7
 80062ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062be:	4770      	bx	lr

080062c0 <LL_RCC_SetRTCClockSource>:
{
 80062c0:	b480      	push	{r7}
 80062c2:	b083      	sub	sp, #12
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80062c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80062cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062d0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80062d4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	4313      	orrs	r3, r2
 80062dc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80062e0:	bf00      	nop
 80062e2:	370c      	adds	r7, #12
 80062e4:	46bd      	mov	sp, r7
 80062e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ea:	4770      	bx	lr

080062ec <LL_RCC_GetRTCClockSource>:
{
 80062ec:	b480      	push	{r7}
 80062ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80062f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80062f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062f8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	46bd      	mov	sp, r7
 8006300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006304:	4770      	bx	lr

08006306 <LL_RCC_ForceBackupDomainReset>:
{
 8006306:	b480      	push	{r7}
 8006308:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800630a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800630e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006312:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006316:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800631a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800631e:	bf00      	nop
 8006320:	46bd      	mov	sp, r7
 8006322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006326:	4770      	bx	lr

08006328 <LL_RCC_ReleaseBackupDomainReset>:
{
 8006328:	b480      	push	{r7}
 800632a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800632c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006330:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006334:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006338:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800633c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8006340:	bf00      	nop
 8006342:	46bd      	mov	sp, r7
 8006344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006348:	4770      	bx	lr

0800634a <LL_RCC_PLLSAI1_Enable>:
{
 800634a:	b480      	push	{r7}
 800634c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800634e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006358:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800635c:	6013      	str	r3, [r2, #0]
}
 800635e:	bf00      	nop
 8006360:	46bd      	mov	sp, r7
 8006362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006366:	4770      	bx	lr

08006368 <LL_RCC_PLLSAI1_Disable>:
{
 8006368:	b480      	push	{r7}
 800636a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800636c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006376:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800637a:	6013      	str	r3, [r2, #0]
}
 800637c:	bf00      	nop
 800637e:	46bd      	mov	sp, r7
 8006380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006384:	4770      	bx	lr

08006386 <LL_RCC_PLLSAI1_IsReady>:
{
 8006386:	b480      	push	{r7}
 8006388:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800638a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006394:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006398:	d101      	bne.n	800639e <LL_RCC_PLLSAI1_IsReady+0x18>
 800639a:	2301      	movs	r3, #1
 800639c:	e000      	b.n	80063a0 <LL_RCC_PLLSAI1_IsReady+0x1a>
 800639e:	2300      	movs	r3, #0
}
 80063a0:	4618      	mov	r0, r3
 80063a2:	46bd      	mov	sp, r7
 80063a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a8:	4770      	bx	lr

080063aa <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80063aa:	b580      	push	{r7, lr}
 80063ac:	b088      	sub	sp, #32
 80063ae:	af00      	add	r7, sp, #0
 80063b0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80063b2:	2300      	movs	r3, #0
 80063b4:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80063b6:	2300      	movs	r3, #0
 80063b8:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d034      	beq.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063ca:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80063ce:	d021      	beq.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80063d0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80063d4:	d81b      	bhi.n	800640e <HAL_RCCEx_PeriphCLKConfig+0x64>
 80063d6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80063da:	d01d      	beq.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80063dc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80063e0:	d815      	bhi.n	800640e <HAL_RCCEx_PeriphCLKConfig+0x64>
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d00b      	beq.n	80063fe <HAL_RCCEx_PeriphCLKConfig+0x54>
 80063e6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80063ea:	d110      	bne.n	800640e <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 80063ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80063f0:	68db      	ldr	r3, [r3, #12]
 80063f2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80063f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80063fa:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 80063fc:	e00d      	b.n	800641a <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	3304      	adds	r3, #4
 8006402:	4618      	mov	r0, r3
 8006404:	f000 f947 	bl	8006696 <RCCEx_PLLSAI1_ConfigNP>
 8006408:	4603      	mov	r3, r0
 800640a:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800640c:	e005      	b.n	800641a <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800640e:	2301      	movs	r3, #1
 8006410:	77fb      	strb	r3, [r7, #31]
        break;
 8006412:	e002      	b.n	800641a <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8006414:	bf00      	nop
 8006416:	e000      	b.n	800641a <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8006418:	bf00      	nop
    }

    if (ret == HAL_OK)
 800641a:	7ffb      	ldrb	r3, [r7, #31]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d105      	bne.n	800642c <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006424:	4618      	mov	r0, r3
 8006426:	f7ff fee8 	bl	80061fa <LL_RCC_SetSAIClockSource>
 800642a:	e001      	b.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800642c:	7ffb      	ldrb	r3, [r7, #31]
 800642e:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006438:	2b00      	cmp	r3, #0
 800643a:	d046      	beq.n	80064ca <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800643c:	f7ff ff56 	bl	80062ec <LL_RCC_GetRTCClockSource>
 8006440:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006446:	69ba      	ldr	r2, [r7, #24]
 8006448:	429a      	cmp	r2, r3
 800644a:	d03c      	beq.n	80064c6 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800644c:	f7fe fc68 	bl	8004d20 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8006450:	69bb      	ldr	r3, [r7, #24]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d105      	bne.n	8006462 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800645a:	4618      	mov	r0, r3
 800645c:	f7ff ff30 	bl	80062c0 <LL_RCC_SetRTCClockSource>
 8006460:	e02e      	b.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8006462:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006466:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800646a:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800646c:	f7ff ff4b 	bl	8006306 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8006470:	f7ff ff5a 	bl	8006328 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800647e:	4313      	orrs	r3, r2
 8006480:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8006482:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800648c:	f7ff fdf0 	bl	8006070 <LL_RCC_LSE_IsEnabled>
 8006490:	4603      	mov	r3, r0
 8006492:	2b01      	cmp	r3, #1
 8006494:	d114      	bne.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006496:	f7fc ff73 	bl	8003380 <HAL_GetTick>
 800649a:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800649c:	e00b      	b.n	80064b6 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800649e:	f7fc ff6f 	bl	8003380 <HAL_GetTick>
 80064a2:	4602      	mov	r2, r0
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	1ad3      	subs	r3, r2, r3
 80064a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d902      	bls.n	80064b6 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 80064b0:	2303      	movs	r3, #3
 80064b2:	77fb      	strb	r3, [r7, #31]
              break;
 80064b4:	e004      	b.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80064b6:	f7ff fded 	bl	8006094 <LL_RCC_LSE_IsReady>
 80064ba:	4603      	mov	r3, r0
 80064bc:	2b01      	cmp	r3, #1
 80064be:	d1ee      	bne.n	800649e <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80064c0:	7ffb      	ldrb	r3, [r7, #31]
 80064c2:	77bb      	strb	r3, [r7, #30]
 80064c4:	e001      	b.n	80064ca <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064c6:	7ffb      	ldrb	r3, [r7, #31]
 80064c8:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f003 0301 	and.w	r3, r3, #1
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d004      	beq.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	699b      	ldr	r3, [r3, #24]
 80064da:	4618      	mov	r0, r3
 80064dc:	f7ff fe2a 	bl	8006134 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f003 0302 	and.w	r3, r3, #2
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d004      	beq.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	69db      	ldr	r3, [r3, #28]
 80064f0:	4618      	mov	r0, r3
 80064f2:	f7ff fe35 	bl	8006160 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f003 0310 	and.w	r3, r3, #16
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d004      	beq.n	800650c <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006506:	4618      	mov	r0, r3
 8006508:	f7ff fe5d 	bl	80061c6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f003 0320 	and.w	r3, r3, #32
 8006514:	2b00      	cmp	r3, #0
 8006516:	d004      	beq.n	8006522 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800651c:	4618      	mov	r0, r3
 800651e:	f7ff fe52 	bl	80061c6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f003 0304 	and.w	r3, r3, #4
 800652a:	2b00      	cmp	r3, #0
 800652c:	d004      	beq.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6a1b      	ldr	r3, [r3, #32]
 8006532:	4618      	mov	r0, r3
 8006534:	f7ff fe2a 	bl	800618c <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f003 0308 	and.w	r3, r3, #8
 8006540:	2b00      	cmp	r3, #0
 8006542:	d004      	beq.n	800654e <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006548:	4618      	mov	r0, r3
 800654a:	f7ff fe1f 	bl	800618c <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006556:	2b00      	cmp	r3, #0
 8006558:	d022      	beq.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800655e:	4618      	mov	r0, r3
 8006560:	f7ff fe8d 	bl	800627e <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006568:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800656c:	d107      	bne.n	800657e <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800656e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006572:	68db      	ldr	r3, [r3, #12]
 8006574:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006578:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800657c:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006582:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006586:	d10b      	bne.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	3304      	adds	r3, #4
 800658c:	4618      	mov	r0, r3
 800658e:	f000 f8dd 	bl	800674c <RCCEx_PLLSAI1_ConfigNQ>
 8006592:	4603      	mov	r3, r0
 8006594:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8006596:	7ffb      	ldrb	r3, [r7, #31]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d001      	beq.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 800659c:	7ffb      	ldrb	r3, [r7, #31]
 800659e:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d02b      	beq.n	8006604 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065b4:	d008      	beq.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065ba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80065be:	d003      	beq.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d105      	bne.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065cc:	4618      	mov	r0, r3
 80065ce:	f7ff fe2a 	bl	8006226 <LL_RCC_SetRNGClockSource>
 80065d2:	e00a      	b.n	80065ea <HAL_RCCEx_PeriphCLKConfig+0x240>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065d8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80065dc:	60fb      	str	r3, [r7, #12]
 80065de:	2000      	movs	r0, #0
 80065e0:	f7ff fe21 	bl	8006226 <LL_RCC_SetRNGClockSource>
 80065e4:	68f8      	ldr	r0, [r7, #12]
 80065e6:	f7ff fe34 	bl	8006252 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065ee:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 80065f2:	d107      	bne.n	8006604 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80065f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80065f8:	68db      	ldr	r3, [r3, #12]
 80065fa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80065fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006602:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800660c:	2b00      	cmp	r3, #0
 800660e:	d022      	beq.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006614:	4618      	mov	r0, r3
 8006616:	f7ff fe3d 	bl	8006294 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800661e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006622:	d107      	bne.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006624:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006628:	68db      	ldr	r3, [r3, #12]
 800662a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800662e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006632:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006638:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800663c:	d10b      	bne.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	3304      	adds	r3, #4
 8006642:	4618      	mov	r0, r3
 8006644:	f000 f8dd 	bl	8006802 <RCCEx_PLLSAI1_ConfigNR>
 8006648:	4603      	mov	r3, r0
 800664a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800664c:	7ffb      	ldrb	r3, [r7, #31]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d001      	beq.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8006652:	7ffb      	ldrb	r3, [r7, #31]
 8006654:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800665e:	2b00      	cmp	r3, #0
 8006660:	d004      	beq.n	800666c <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006666:	4618      	mov	r0, r3
 8006668:	f7ff fd26 	bl	80060b8 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006674:	2b00      	cmp	r3, #0
 8006676:	d009      	beq.n	800668c <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800667c:	4618      	mov	r0, r3
 800667e:	f7ff fd45 	bl	800610c <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006686:	4618      	mov	r0, r3
 8006688:	f7ff fd2c 	bl	80060e4 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 800668c:	7fbb      	ldrb	r3, [r7, #30]
}
 800668e:	4618      	mov	r0, r3
 8006690:	3720      	adds	r7, #32
 8006692:	46bd      	mov	sp, r7
 8006694:	bd80      	pop	{r7, pc}

08006696 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8006696:	b580      	push	{r7, lr}
 8006698:	b084      	sub	sp, #16
 800669a:	af00      	add	r7, sp, #0
 800669c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800669e:	2300      	movs	r3, #0
 80066a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80066a2:	f7ff fe61 	bl	8006368 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80066a6:	f7fc fe6b 	bl	8003380 <HAL_GetTick>
 80066aa:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80066ac:	e009      	b.n	80066c2 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80066ae:	f7fc fe67 	bl	8003380 <HAL_GetTick>
 80066b2:	4602      	mov	r2, r0
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	1ad3      	subs	r3, r2, r3
 80066b8:	2b02      	cmp	r3, #2
 80066ba:	d902      	bls.n	80066c2 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80066bc:	2303      	movs	r3, #3
 80066be:	73fb      	strb	r3, [r7, #15]
      break;
 80066c0:	e004      	b.n	80066cc <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80066c2:	f7ff fe60 	bl	8006386 <LL_RCC_PLLSAI1_IsReady>
 80066c6:	4603      	mov	r3, r0
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d1f0      	bne.n	80066ae <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80066cc:	7bfb      	ldrb	r3, [r7, #15]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d137      	bne.n	8006742 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80066d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80066d6:	691b      	ldr	r3, [r3, #16]
 80066d8:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	021b      	lsls	r3, r3, #8
 80066e2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80066e6:	4313      	orrs	r3, r2
 80066e8:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80066ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80066ee:	691b      	ldr	r3, [r3, #16]
 80066f0:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	685b      	ldr	r3, [r3, #4]
 80066f8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80066fc:	4313      	orrs	r3, r2
 80066fe:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8006700:	f7ff fe23 	bl	800634a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006704:	f7fc fe3c 	bl	8003380 <HAL_GetTick>
 8006708:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800670a:	e009      	b.n	8006720 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800670c:	f7fc fe38 	bl	8003380 <HAL_GetTick>
 8006710:	4602      	mov	r2, r0
 8006712:	68bb      	ldr	r3, [r7, #8]
 8006714:	1ad3      	subs	r3, r2, r3
 8006716:	2b02      	cmp	r3, #2
 8006718:	d902      	bls.n	8006720 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800671a:	2303      	movs	r3, #3
 800671c:	73fb      	strb	r3, [r7, #15]
        break;
 800671e:	e004      	b.n	800672a <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006720:	f7ff fe31 	bl	8006386 <LL_RCC_PLLSAI1_IsReady>
 8006724:	4603      	mov	r3, r0
 8006726:	2b01      	cmp	r3, #1
 8006728:	d1f0      	bne.n	800670c <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800672a:	7bfb      	ldrb	r3, [r7, #15]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d108      	bne.n	8006742 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006730:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006734:	691a      	ldr	r2, [r3, #16]
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	691b      	ldr	r3, [r3, #16]
 800673a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800673e:	4313      	orrs	r3, r2
 8006740:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8006742:	7bfb      	ldrb	r3, [r7, #15]
}
 8006744:	4618      	mov	r0, r3
 8006746:	3710      	adds	r7, #16
 8006748:	46bd      	mov	sp, r7
 800674a:	bd80      	pop	{r7, pc}

0800674c <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b084      	sub	sp, #16
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006754:	2300      	movs	r3, #0
 8006756:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8006758:	f7ff fe06 	bl	8006368 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800675c:	f7fc fe10 	bl	8003380 <HAL_GetTick>
 8006760:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006762:	e009      	b.n	8006778 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006764:	f7fc fe0c 	bl	8003380 <HAL_GetTick>
 8006768:	4602      	mov	r2, r0
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	1ad3      	subs	r3, r2, r3
 800676e:	2b02      	cmp	r3, #2
 8006770:	d902      	bls.n	8006778 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8006772:	2303      	movs	r3, #3
 8006774:	73fb      	strb	r3, [r7, #15]
      break;
 8006776:	e004      	b.n	8006782 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006778:	f7ff fe05 	bl	8006386 <LL_RCC_PLLSAI1_IsReady>
 800677c:	4603      	mov	r3, r0
 800677e:	2b00      	cmp	r3, #0
 8006780:	d1f0      	bne.n	8006764 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8006782:	7bfb      	ldrb	r3, [r7, #15]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d137      	bne.n	80067f8 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8006788:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800678c:	691b      	ldr	r3, [r3, #16]
 800678e:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	021b      	lsls	r3, r3, #8
 8006798:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800679c:	4313      	orrs	r3, r2
 800679e:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80067a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80067a4:	691b      	ldr	r3, [r3, #16]
 80067a6:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	689b      	ldr	r3, [r3, #8]
 80067ae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80067b2:	4313      	orrs	r3, r2
 80067b4:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80067b6:	f7ff fdc8 	bl	800634a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80067ba:	f7fc fde1 	bl	8003380 <HAL_GetTick>
 80067be:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80067c0:	e009      	b.n	80067d6 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80067c2:	f7fc fddd 	bl	8003380 <HAL_GetTick>
 80067c6:	4602      	mov	r2, r0
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	1ad3      	subs	r3, r2, r3
 80067cc:	2b02      	cmp	r3, #2
 80067ce:	d902      	bls.n	80067d6 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80067d0:	2303      	movs	r3, #3
 80067d2:	73fb      	strb	r3, [r7, #15]
        break;
 80067d4:	e004      	b.n	80067e0 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80067d6:	f7ff fdd6 	bl	8006386 <LL_RCC_PLLSAI1_IsReady>
 80067da:	4603      	mov	r3, r0
 80067dc:	2b01      	cmp	r3, #1
 80067de:	d1f0      	bne.n	80067c2 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80067e0:	7bfb      	ldrb	r3, [r7, #15]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d108      	bne.n	80067f8 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80067e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80067ea:	691a      	ldr	r2, [r3, #16]
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	691b      	ldr	r3, [r3, #16]
 80067f0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80067f4:	4313      	orrs	r3, r2
 80067f6:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80067f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80067fa:	4618      	mov	r0, r3
 80067fc:	3710      	adds	r7, #16
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}

08006802 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8006802:	b580      	push	{r7, lr}
 8006804:	b084      	sub	sp, #16
 8006806:	af00      	add	r7, sp, #0
 8006808:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800680a:	2300      	movs	r3, #0
 800680c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800680e:	f7ff fdab 	bl	8006368 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006812:	f7fc fdb5 	bl	8003380 <HAL_GetTick>
 8006816:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006818:	e009      	b.n	800682e <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800681a:	f7fc fdb1 	bl	8003380 <HAL_GetTick>
 800681e:	4602      	mov	r2, r0
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	1ad3      	subs	r3, r2, r3
 8006824:	2b02      	cmp	r3, #2
 8006826:	d902      	bls.n	800682e <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8006828:	2303      	movs	r3, #3
 800682a:	73fb      	strb	r3, [r7, #15]
      break;
 800682c:	e004      	b.n	8006838 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800682e:	f7ff fdaa 	bl	8006386 <LL_RCC_PLLSAI1_IsReady>
 8006832:	4603      	mov	r3, r0
 8006834:	2b00      	cmp	r3, #0
 8006836:	d1f0      	bne.n	800681a <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8006838:	7bfb      	ldrb	r3, [r7, #15]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d137      	bne.n	80068ae <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800683e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006842:	691b      	ldr	r3, [r3, #16]
 8006844:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	021b      	lsls	r3, r3, #8
 800684e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006852:	4313      	orrs	r3, r2
 8006854:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8006856:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800685a:	691b      	ldr	r3, [r3, #16]
 800685c:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	68db      	ldr	r3, [r3, #12]
 8006864:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006868:	4313      	orrs	r3, r2
 800686a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800686c:	f7ff fd6d 	bl	800634a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006870:	f7fc fd86 	bl	8003380 <HAL_GetTick>
 8006874:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006876:	e009      	b.n	800688c <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006878:	f7fc fd82 	bl	8003380 <HAL_GetTick>
 800687c:	4602      	mov	r2, r0
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	1ad3      	subs	r3, r2, r3
 8006882:	2b02      	cmp	r3, #2
 8006884:	d902      	bls.n	800688c <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8006886:	2303      	movs	r3, #3
 8006888:	73fb      	strb	r3, [r7, #15]
        break;
 800688a:	e004      	b.n	8006896 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800688c:	f7ff fd7b 	bl	8006386 <LL_RCC_PLLSAI1_IsReady>
 8006890:	4603      	mov	r3, r0
 8006892:	2b01      	cmp	r3, #1
 8006894:	d1f0      	bne.n	8006878 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8006896:	7bfb      	ldrb	r3, [r7, #15]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d108      	bne.n	80068ae <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800689c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80068a0:	691a      	ldr	r2, [r3, #16]
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	691b      	ldr	r3, [r3, #16]
 80068a6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80068aa:	4313      	orrs	r3, r2
 80068ac:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80068ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80068b0:	4618      	mov	r0, r3
 80068b2:	3710      	adds	r7, #16
 80068b4:	46bd      	mov	sp, r7
 80068b6:	bd80      	pop	{r7, pc}

080068b8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b084      	sub	sp, #16
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d101      	bne.n	80068ca <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80068c6:	2301      	movs	r3, #1
 80068c8:	e09f      	b.n	8006a0a <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80068d0:	b2db      	uxtb	r3, r3
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d106      	bne.n	80068e4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2200      	movs	r2, #0
 80068da:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	f7fc fb5c 	bl	8002f9c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2202      	movs	r2, #2
 80068e8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80068ec:	4b49      	ldr	r3, [pc, #292]	@ (8006a14 <HAL_RTC_Init+0x15c>)
 80068ee:	68db      	ldr	r3, [r3, #12]
 80068f0:	f003 0310 	and.w	r3, r3, #16
 80068f4:	2b10      	cmp	r3, #16
 80068f6:	d07e      	beq.n	80069f6 <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	22ca      	movs	r2, #202	@ 0xca
 80068fe:	625a      	str	r2, [r3, #36]	@ 0x24
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	2253      	movs	r2, #83	@ 0x53
 8006906:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	f000 f8ab 	bl	8006a64 <RTC_EnterInitMode>
 800690e:	4603      	mov	r3, r0
 8006910:	2b00      	cmp	r3, #0
 8006912:	d00a      	beq.n	800692a <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	22ff      	movs	r2, #255	@ 0xff
 800691a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2204      	movs	r2, #4
 8006920:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      status = HAL_ERROR;
 8006924:	2301      	movs	r3, #1
 8006926:	73fb      	strb	r3, [r7, #15]
 8006928:	e067      	b.n	80069fa <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	689b      	ldr	r3, [r3, #8]
 8006930:	687a      	ldr	r2, [r7, #4]
 8006932:	6812      	ldr	r2, [r2, #0]
 8006934:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8006938:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800693c:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	6899      	ldr	r1, [r3, #8]
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	685a      	ldr	r2, [r3, #4]
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	691b      	ldr	r3, [r3, #16]
 800694c:	431a      	orrs	r2, r3
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	699b      	ldr	r3, [r3, #24]
 8006952:	431a      	orrs	r2, r3
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	430a      	orrs	r2, r1
 800695a:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	687a      	ldr	r2, [r7, #4]
 8006962:	68d2      	ldr	r2, [r2, #12]
 8006964:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	6919      	ldr	r1, [r3, #16]
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	689b      	ldr	r3, [r3, #8]
 8006970:	041a      	lsls	r2, r3, #16
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	430a      	orrs	r2, r1
 8006978:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	68da      	ldr	r2, [r3, #12]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006988:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f022 0203 	bic.w	r2, r2, #3
 8006998:	64da      	str	r2, [r3, #76]	@ 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	69da      	ldr	r2, [r3, #28]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	695b      	ldr	r3, [r3, #20]
 80069a8:	431a      	orrs	r2, r3
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	430a      	orrs	r2, r1
 80069b0:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	689b      	ldr	r3, [r3, #8]
 80069b8:	f003 0320 	and.w	r3, r3, #32
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d113      	bne.n	80069e8 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	f000 f829 	bl	8006a18 <HAL_RTC_WaitForSynchro>
 80069c6:	4603      	mov	r3, r0
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d00d      	beq.n	80069e8 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	22ff      	movs	r2, #255	@ 0xff
 80069d2:	625a      	str	r2, [r3, #36]	@ 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2204      	movs	r2, #4
 80069d8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2200      	movs	r2, #0
 80069e0:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 80069e4:	2301      	movs	r3, #1
 80069e6:	e010      	b.n	8006a0a <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	22ff      	movs	r2, #255	@ 0xff
 80069ee:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      status = HAL_OK;
 80069f0:	2300      	movs	r3, #0
 80069f2:	73fb      	strb	r3, [r7, #15]
 80069f4:	e001      	b.n	80069fa <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 80069f6:	2300      	movs	r3, #0
 80069f8:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80069fa:	7bfb      	ldrb	r3, [r7, #15]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d103      	bne.n	8006a08 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2201      	movs	r2, #1
 8006a04:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  return status;
 8006a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	3710      	adds	r7, #16
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bd80      	pop	{r7, pc}
 8006a12:	bf00      	nop
 8006a14:	40002800 	.word	0x40002800

08006a18 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b084      	sub	sp, #16
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	68da      	ldr	r2, [r3, #12]
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006a2e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8006a30:	f7fc fca6 	bl	8003380 <HAL_GetTick>
 8006a34:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006a36:	e009      	b.n	8006a4c <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006a38:	f7fc fca2 	bl	8003380 <HAL_GetTick>
 8006a3c:	4602      	mov	r2, r0
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	1ad3      	subs	r3, r2, r3
 8006a42:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006a46:	d901      	bls.n	8006a4c <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8006a48:	2303      	movs	r3, #3
 8006a4a:	e007      	b.n	8006a5c <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	68db      	ldr	r3, [r3, #12]
 8006a52:	f003 0320 	and.w	r3, r3, #32
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d0ee      	beq.n	8006a38 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8006a5a:	2300      	movs	r3, #0
}
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	3710      	adds	r7, #16
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd80      	pop	{r7, pc}

08006a64 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b084      	sub	sp, #16
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	68db      	ldr	r3, [r3, #12]
 8006a72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d119      	bne.n	8006aae <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f04f 32ff 	mov.w	r2, #4294967295
 8006a82:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006a84:	f7fc fc7c 	bl	8003380 <HAL_GetTick>
 8006a88:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006a8a:	e009      	b.n	8006aa0 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006a8c:	f7fc fc78 	bl	8003380 <HAL_GetTick>
 8006a90:	4602      	mov	r2, r0
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	1ad3      	subs	r3, r2, r3
 8006a96:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006a9a:	d901      	bls.n	8006aa0 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8006a9c:	2303      	movs	r3, #3
 8006a9e:	e007      	b.n	8006ab0 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	68db      	ldr	r3, [r3, #12]
 8006aa6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d0ee      	beq.n	8006a8c <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8006aae:	2300      	movs	r3, #0
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	3710      	adds	r7, #16
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bd80      	pop	{r7, pc}

08006ab8 <HAL_RTCEx_EnableBypassShadow>:
  * @note   When the Bypass Shadow is enabled the calendar value are taken
  *         directly from the Calendar counter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 8006ab8:	b480      	push	{r7}
 8006aba:	b083      	sub	sp, #12
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006ac6:	2b01      	cmp	r3, #1
 8006ac8:	d101      	bne.n	8006ace <HAL_RTCEx_EnableBypassShadow+0x16>
 8006aca:	2302      	movs	r3, #2
 8006acc:	e024      	b.n	8006b18 <HAL_RTCEx_EnableBypassShadow+0x60>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2201      	movs	r2, #1
 8006ad2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2202      	movs	r2, #2
 8006ada:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	22ca      	movs	r2, #202	@ 0xca
 8006ae4:	625a      	str	r2, [r3, #36]	@ 0x24
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	2253      	movs	r2, #83	@ 0x53
 8006aec:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	689a      	ldr	r2, [r3, #8]
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f042 0220 	orr.w	r2, r2, #32
 8006afc:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	22ff      	movs	r2, #255	@ 0xff
 8006b04:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2201      	movs	r2, #1
 8006b0a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2200      	movs	r2, #0
 8006b12:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8006b16:	2300      	movs	r3, #0
}
 8006b18:	4618      	mov	r0, r3
 8006b1a:	370c      	adds	r7, #12
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b22:	4770      	bx	lr

08006b24 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b084      	sub	sp, #16
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d101      	bne.n	8006b36 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006b32:	2301      	movs	r3, #1
 8006b34:	e095      	b.n	8006c62 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d108      	bne.n	8006b50 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	685b      	ldr	r3, [r3, #4]
 8006b42:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006b46:	d009      	beq.n	8006b5c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	61da      	str	r2, [r3, #28]
 8006b4e:	e005      	b.n	8006b5c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2200      	movs	r2, #0
 8006b54:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006b68:	b2db      	uxtb	r3, r3
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d106      	bne.n	8006b7c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2200      	movs	r2, #0
 8006b72:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f000 f877 	bl	8006c6a <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2202      	movs	r2, #2
 8006b80:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	681a      	ldr	r2, [r3, #0]
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006b92:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	68db      	ldr	r3, [r3, #12]
 8006b98:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006b9c:	d902      	bls.n	8006ba4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	60fb      	str	r3, [r7, #12]
 8006ba2:	e002      	b.n	8006baa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006ba4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006ba8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	68db      	ldr	r3, [r3, #12]
 8006bae:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8006bb2:	d007      	beq.n	8006bc4 <HAL_SPI_Init+0xa0>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	68db      	ldr	r3, [r3, #12]
 8006bb8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006bbc:	d002      	beq.n	8006bc4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	685b      	ldr	r3, [r3, #4]
 8006bc8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	689b      	ldr	r3, [r3, #8]
 8006bd0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006bd4:	431a      	orrs	r2, r3
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	691b      	ldr	r3, [r3, #16]
 8006bda:	f003 0302 	and.w	r3, r3, #2
 8006bde:	431a      	orrs	r2, r3
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	695b      	ldr	r3, [r3, #20]
 8006be4:	f003 0301 	and.w	r3, r3, #1
 8006be8:	431a      	orrs	r2, r3
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	699b      	ldr	r3, [r3, #24]
 8006bee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006bf2:	431a      	orrs	r2, r3
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	69db      	ldr	r3, [r3, #28]
 8006bf8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006bfc:	431a      	orrs	r2, r3
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6a1b      	ldr	r3, [r3, #32]
 8006c02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c06:	ea42 0103 	orr.w	r1, r2, r3
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c0e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	430a      	orrs	r2, r1
 8006c18:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	699b      	ldr	r3, [r3, #24]
 8006c1e:	0c1b      	lsrs	r3, r3, #16
 8006c20:	f003 0204 	and.w	r2, r3, #4
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c28:	f003 0310 	and.w	r3, r3, #16
 8006c2c:	431a      	orrs	r2, r3
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c32:	f003 0308 	and.w	r3, r3, #8
 8006c36:	431a      	orrs	r2, r3
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	68db      	ldr	r3, [r3, #12]
 8006c3c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8006c40:	ea42 0103 	orr.w	r1, r2, r3
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	430a      	orrs	r2, r1
 8006c50:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2200      	movs	r2, #0
 8006c56:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2201      	movs	r2, #1
 8006c5c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8006c60:	2300      	movs	r3, #0
}
 8006c62:	4618      	mov	r0, r3
 8006c64:	3710      	adds	r7, #16
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bd80      	pop	{r7, pc}

08006c6a <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8006c6a:	b480      	push	{r7}
 8006c6c:	b083      	sub	sp, #12
 8006c6e:	af00      	add	r7, sp, #0
 8006c70:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8006c72:	bf00      	nop
 8006c74:	370c      	adds	r7, #12
 8006c76:	46bd      	mov	sp, r7
 8006c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7c:	4770      	bx	lr

08006c7e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c7e:	b580      	push	{r7, lr}
 8006c80:	b088      	sub	sp, #32
 8006c82:	af00      	add	r7, sp, #0
 8006c84:	60f8      	str	r0, [r7, #12]
 8006c86:	60b9      	str	r1, [r7, #8]
 8006c88:	603b      	str	r3, [r7, #0]
 8006c8a:	4613      	mov	r3, r2
 8006c8c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006c8e:	2300      	movs	r3, #0
 8006c90:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006c98:	2b01      	cmp	r3, #1
 8006c9a:	d101      	bne.n	8006ca0 <HAL_SPI_Transmit+0x22>
 8006c9c:	2302      	movs	r3, #2
 8006c9e:	e15f      	b.n	8006f60 <HAL_SPI_Transmit+0x2e2>
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	2201      	movs	r2, #1
 8006ca4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006ca8:	f7fc fb6a 	bl	8003380 <HAL_GetTick>
 8006cac:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006cae:	88fb      	ldrh	r3, [r7, #6]
 8006cb0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006cb8:	b2db      	uxtb	r3, r3
 8006cba:	2b01      	cmp	r3, #1
 8006cbc:	d002      	beq.n	8006cc4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006cbe:	2302      	movs	r3, #2
 8006cc0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006cc2:	e148      	b.n	8006f56 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d002      	beq.n	8006cd0 <HAL_SPI_Transmit+0x52>
 8006cca:	88fb      	ldrh	r3, [r7, #6]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d102      	bne.n	8006cd6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006cd4:	e13f      	b.n	8006f56 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	2203      	movs	r2, #3
 8006cda:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	68ba      	ldr	r2, [r7, #8]
 8006ce8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	88fa      	ldrh	r2, [r7, #6]
 8006cee:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	88fa      	ldrh	r2, [r7, #6]
 8006cf4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	2200      	movs	r2, #0
 8006d08:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	2200      	movs	r2, #0
 8006d16:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	689b      	ldr	r3, [r3, #8]
 8006d1c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006d20:	d10f      	bne.n	8006d42 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	681a      	ldr	r2, [r3, #0]
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006d30:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	681a      	ldr	r2, [r3, #0]
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006d40:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d4c:	2b40      	cmp	r3, #64	@ 0x40
 8006d4e:	d007      	beq.n	8006d60 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	681a      	ldr	r2, [r3, #0]
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006d5e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	68db      	ldr	r3, [r3, #12]
 8006d64:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006d68:	d94f      	bls.n	8006e0a <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	685b      	ldr	r3, [r3, #4]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d002      	beq.n	8006d78 <HAL_SPI_Transmit+0xfa>
 8006d72:	8afb      	ldrh	r3, [r7, #22]
 8006d74:	2b01      	cmp	r3, #1
 8006d76:	d142      	bne.n	8006dfe <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d7c:	881a      	ldrh	r2, [r3, #0]
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d88:	1c9a      	adds	r2, r3, #2
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006d92:	b29b      	uxth	r3, r3
 8006d94:	3b01      	subs	r3, #1
 8006d96:	b29a      	uxth	r2, r3
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006d9c:	e02f      	b.n	8006dfe <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	689b      	ldr	r3, [r3, #8]
 8006da4:	f003 0302 	and.w	r3, r3, #2
 8006da8:	2b02      	cmp	r3, #2
 8006daa:	d112      	bne.n	8006dd2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006db0:	881a      	ldrh	r2, [r3, #0]
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dbc:	1c9a      	adds	r2, r3, #2
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006dc6:	b29b      	uxth	r3, r3
 8006dc8:	3b01      	subs	r3, #1
 8006dca:	b29a      	uxth	r2, r3
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006dd0:	e015      	b.n	8006dfe <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006dd2:	f7fc fad5 	bl	8003380 <HAL_GetTick>
 8006dd6:	4602      	mov	r2, r0
 8006dd8:	69bb      	ldr	r3, [r7, #24]
 8006dda:	1ad3      	subs	r3, r2, r3
 8006ddc:	683a      	ldr	r2, [r7, #0]
 8006dde:	429a      	cmp	r2, r3
 8006de0:	d803      	bhi.n	8006dea <HAL_SPI_Transmit+0x16c>
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006de8:	d102      	bne.n	8006df0 <HAL_SPI_Transmit+0x172>
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d106      	bne.n	8006dfe <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8006df0:	2303      	movs	r3, #3
 8006df2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	2201      	movs	r2, #1
 8006df8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8006dfc:	e0ab      	b.n	8006f56 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e02:	b29b      	uxth	r3, r3
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d1ca      	bne.n	8006d9e <HAL_SPI_Transmit+0x120>
 8006e08:	e080      	b.n	8006f0c <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	685b      	ldr	r3, [r3, #4]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d002      	beq.n	8006e18 <HAL_SPI_Transmit+0x19a>
 8006e12:	8afb      	ldrh	r3, [r7, #22]
 8006e14:	2b01      	cmp	r3, #1
 8006e16:	d174      	bne.n	8006f02 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e1c:	b29b      	uxth	r3, r3
 8006e1e:	2b01      	cmp	r3, #1
 8006e20:	d912      	bls.n	8006e48 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e26:	881a      	ldrh	r2, [r3, #0]
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e32:	1c9a      	adds	r2, r3, #2
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e3c:	b29b      	uxth	r3, r3
 8006e3e:	3b02      	subs	r3, #2
 8006e40:	b29a      	uxth	r2, r3
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006e46:	e05c      	b.n	8006f02 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	330c      	adds	r3, #12
 8006e52:	7812      	ldrb	r2, [r2, #0]
 8006e54:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e5a:	1c5a      	adds	r2, r3, #1
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e64:	b29b      	uxth	r3, r3
 8006e66:	3b01      	subs	r3, #1
 8006e68:	b29a      	uxth	r2, r3
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006e6e:	e048      	b.n	8006f02 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	689b      	ldr	r3, [r3, #8]
 8006e76:	f003 0302 	and.w	r3, r3, #2
 8006e7a:	2b02      	cmp	r3, #2
 8006e7c:	d12b      	bne.n	8006ed6 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e82:	b29b      	uxth	r3, r3
 8006e84:	2b01      	cmp	r3, #1
 8006e86:	d912      	bls.n	8006eae <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e8c:	881a      	ldrh	r2, [r3, #0]
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e98:	1c9a      	adds	r2, r3, #2
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ea2:	b29b      	uxth	r3, r3
 8006ea4:	3b02      	subs	r3, #2
 8006ea6:	b29a      	uxth	r2, r3
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006eac:	e029      	b.n	8006f02 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	330c      	adds	r3, #12
 8006eb8:	7812      	ldrb	r2, [r2, #0]
 8006eba:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ec0:	1c5a      	adds	r2, r3, #1
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006eca:	b29b      	uxth	r3, r3
 8006ecc:	3b01      	subs	r3, #1
 8006ece:	b29a      	uxth	r2, r3
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006ed4:	e015      	b.n	8006f02 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006ed6:	f7fc fa53 	bl	8003380 <HAL_GetTick>
 8006eda:	4602      	mov	r2, r0
 8006edc:	69bb      	ldr	r3, [r7, #24]
 8006ede:	1ad3      	subs	r3, r2, r3
 8006ee0:	683a      	ldr	r2, [r7, #0]
 8006ee2:	429a      	cmp	r2, r3
 8006ee4:	d803      	bhi.n	8006eee <HAL_SPI_Transmit+0x270>
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006eec:	d102      	bne.n	8006ef4 <HAL_SPI_Transmit+0x276>
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d106      	bne.n	8006f02 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8006ef4:	2303      	movs	r3, #3
 8006ef6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	2201      	movs	r2, #1
 8006efc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8006f00:	e029      	b.n	8006f56 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f06:	b29b      	uxth	r3, r3
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d1b1      	bne.n	8006e70 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006f0c:	69ba      	ldr	r2, [r7, #24]
 8006f0e:	6839      	ldr	r1, [r7, #0]
 8006f10:	68f8      	ldr	r0, [r7, #12]
 8006f12:	f000 fcf9 	bl	8007908 <SPI_EndRxTxTransaction>
 8006f16:	4603      	mov	r3, r0
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d002      	beq.n	8006f22 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	2220      	movs	r2, #32
 8006f20:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	689b      	ldr	r3, [r3, #8]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d10a      	bne.n	8006f40 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	613b      	str	r3, [r7, #16]
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	68db      	ldr	r3, [r3, #12]
 8006f34:	613b      	str	r3, [r7, #16]
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	689b      	ldr	r3, [r3, #8]
 8006f3c:	613b      	str	r3, [r7, #16]
 8006f3e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d002      	beq.n	8006f4e <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8006f48:	2301      	movs	r3, #1
 8006f4a:	77fb      	strb	r3, [r7, #31]
 8006f4c:	e003      	b.n	8006f56 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	2201      	movs	r2, #1
 8006f52:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8006f5e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006f60:	4618      	mov	r0, r3
 8006f62:	3720      	adds	r7, #32
 8006f64:	46bd      	mov	sp, r7
 8006f66:	bd80      	pop	{r7, pc}

08006f68 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b088      	sub	sp, #32
 8006f6c:	af02      	add	r7, sp, #8
 8006f6e:	60f8      	str	r0, [r7, #12]
 8006f70:	60b9      	str	r1, [r7, #8]
 8006f72:	603b      	str	r3, [r7, #0]
 8006f74:	4613      	mov	r3, r2
 8006f76:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006f78:	2300      	movs	r3, #0
 8006f7a:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006f82:	b2db      	uxtb	r3, r3
 8006f84:	2b01      	cmp	r3, #1
 8006f86:	d002      	beq.n	8006f8e <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8006f88:	2302      	movs	r3, #2
 8006f8a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006f8c:	e11a      	b.n	80071c4 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	685b      	ldr	r3, [r3, #4]
 8006f92:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006f96:	d112      	bne.n	8006fbe <HAL_SPI_Receive+0x56>
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	689b      	ldr	r3, [r3, #8]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d10e      	bne.n	8006fbe <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	2204      	movs	r2, #4
 8006fa4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006fa8:	88fa      	ldrh	r2, [r7, #6]
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	9300      	str	r3, [sp, #0]
 8006fae:	4613      	mov	r3, r2
 8006fb0:	68ba      	ldr	r2, [r7, #8]
 8006fb2:	68b9      	ldr	r1, [r7, #8]
 8006fb4:	68f8      	ldr	r0, [r7, #12]
 8006fb6:	f000 f90e 	bl	80071d6 <HAL_SPI_TransmitReceive>
 8006fba:	4603      	mov	r3, r0
 8006fbc:	e107      	b.n	80071ce <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006fc4:	2b01      	cmp	r3, #1
 8006fc6:	d101      	bne.n	8006fcc <HAL_SPI_Receive+0x64>
 8006fc8:	2302      	movs	r3, #2
 8006fca:	e100      	b.n	80071ce <HAL_SPI_Receive+0x266>
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	2201      	movs	r2, #1
 8006fd0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006fd4:	f7fc f9d4 	bl	8003380 <HAL_GetTick>
 8006fd8:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d002      	beq.n	8006fe6 <HAL_SPI_Receive+0x7e>
 8006fe0:	88fb      	ldrh	r3, [r7, #6]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d102      	bne.n	8006fec <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006fea:	e0eb      	b.n	80071c4 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	2204      	movs	r2, #4
 8006ff0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	68ba      	ldr	r2, [r7, #8]
 8006ffe:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	88fa      	ldrh	r2, [r7, #6]
 8007004:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	88fa      	ldrh	r2, [r7, #6]
 800700c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	2200      	movs	r2, #0
 8007014:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	2200      	movs	r2, #0
 800701a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	2200      	movs	r2, #0
 8007020:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	2200      	movs	r2, #0
 8007026:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	2200      	movs	r2, #0
 800702c:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	68db      	ldr	r3, [r3, #12]
 8007032:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007036:	d908      	bls.n	800704a <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	685a      	ldr	r2, [r3, #4]
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007046:	605a      	str	r2, [r3, #4]
 8007048:	e007      	b.n	800705a <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	685a      	ldr	r2, [r3, #4]
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007058:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	689b      	ldr	r3, [r3, #8]
 800705e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007062:	d10f      	bne.n	8007084 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	681a      	ldr	r2, [r3, #0]
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007072:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	681a      	ldr	r2, [r3, #0]
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007082:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800708e:	2b40      	cmp	r3, #64	@ 0x40
 8007090:	d007      	beq.n	80070a2 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	681a      	ldr	r2, [r3, #0]
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80070a0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	68db      	ldr	r3, [r3, #12]
 80070a6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80070aa:	d86f      	bhi.n	800718c <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80070ac:	e034      	b.n	8007118 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	689b      	ldr	r3, [r3, #8]
 80070b4:	f003 0301 	and.w	r3, r3, #1
 80070b8:	2b01      	cmp	r3, #1
 80070ba:	d117      	bne.n	80070ec <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f103 020c 	add.w	r2, r3, #12
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070c8:	7812      	ldrb	r2, [r2, #0]
 80070ca:	b2d2      	uxtb	r2, r2
 80070cc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070d2:	1c5a      	adds	r2, r3, #1
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80070de:	b29b      	uxth	r3, r3
 80070e0:	3b01      	subs	r3, #1
 80070e2:	b29a      	uxth	r2, r3
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80070ea:	e015      	b.n	8007118 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80070ec:	f7fc f948 	bl	8003380 <HAL_GetTick>
 80070f0:	4602      	mov	r2, r0
 80070f2:	693b      	ldr	r3, [r7, #16]
 80070f4:	1ad3      	subs	r3, r2, r3
 80070f6:	683a      	ldr	r2, [r7, #0]
 80070f8:	429a      	cmp	r2, r3
 80070fa:	d803      	bhi.n	8007104 <HAL_SPI_Receive+0x19c>
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007102:	d102      	bne.n	800710a <HAL_SPI_Receive+0x1a2>
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d106      	bne.n	8007118 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 800710a:	2303      	movs	r3, #3
 800710c:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	2201      	movs	r2, #1
 8007112:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8007116:	e055      	b.n	80071c4 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800711e:	b29b      	uxth	r3, r3
 8007120:	2b00      	cmp	r3, #0
 8007122:	d1c4      	bne.n	80070ae <HAL_SPI_Receive+0x146>
 8007124:	e038      	b.n	8007198 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	689b      	ldr	r3, [r3, #8]
 800712c:	f003 0301 	and.w	r3, r3, #1
 8007130:	2b01      	cmp	r3, #1
 8007132:	d115      	bne.n	8007160 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	68da      	ldr	r2, [r3, #12]
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800713e:	b292      	uxth	r2, r2
 8007140:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007146:	1c9a      	adds	r2, r3, #2
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007152:	b29b      	uxth	r3, r3
 8007154:	3b01      	subs	r3, #1
 8007156:	b29a      	uxth	r2, r3
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800715e:	e015      	b.n	800718c <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007160:	f7fc f90e 	bl	8003380 <HAL_GetTick>
 8007164:	4602      	mov	r2, r0
 8007166:	693b      	ldr	r3, [r7, #16]
 8007168:	1ad3      	subs	r3, r2, r3
 800716a:	683a      	ldr	r2, [r7, #0]
 800716c:	429a      	cmp	r2, r3
 800716e:	d803      	bhi.n	8007178 <HAL_SPI_Receive+0x210>
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007176:	d102      	bne.n	800717e <HAL_SPI_Receive+0x216>
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d106      	bne.n	800718c <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 800717e:	2303      	movs	r3, #3
 8007180:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	2201      	movs	r2, #1
 8007186:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800718a:	e01b      	b.n	80071c4 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007192:	b29b      	uxth	r3, r3
 8007194:	2b00      	cmp	r3, #0
 8007196:	d1c6      	bne.n	8007126 <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007198:	693a      	ldr	r2, [r7, #16]
 800719a:	6839      	ldr	r1, [r7, #0]
 800719c:	68f8      	ldr	r0, [r7, #12]
 800719e:	f000 fb5b 	bl	8007858 <SPI_EndRxTransaction>
 80071a2:	4603      	mov	r3, r0
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d002      	beq.n	80071ae <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	2220      	movs	r2, #32
 80071ac:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d002      	beq.n	80071bc <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 80071b6:	2301      	movs	r3, #1
 80071b8:	75fb      	strb	r3, [r7, #23]
 80071ba:	e003      	b.n	80071c4 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	2201      	movs	r2, #1
 80071c0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	2200      	movs	r2, #0
 80071c8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80071cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80071ce:	4618      	mov	r0, r3
 80071d0:	3718      	adds	r7, #24
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd80      	pop	{r7, pc}

080071d6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80071d6:	b580      	push	{r7, lr}
 80071d8:	b08a      	sub	sp, #40	@ 0x28
 80071da:	af00      	add	r7, sp, #0
 80071dc:	60f8      	str	r0, [r7, #12]
 80071de:	60b9      	str	r1, [r7, #8]
 80071e0:	607a      	str	r2, [r7, #4]
 80071e2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80071e4:	2301      	movs	r3, #1
 80071e6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80071e8:	2300      	movs	r3, #0
 80071ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80071f4:	2b01      	cmp	r3, #1
 80071f6:	d101      	bne.n	80071fc <HAL_SPI_TransmitReceive+0x26>
 80071f8:	2302      	movs	r3, #2
 80071fa:	e20a      	b.n	8007612 <HAL_SPI_TransmitReceive+0x43c>
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	2201      	movs	r2, #1
 8007200:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007204:	f7fc f8bc 	bl	8003380 <HAL_GetTick>
 8007208:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007210:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	685b      	ldr	r3, [r3, #4]
 8007216:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8007218:	887b      	ldrh	r3, [r7, #2]
 800721a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800721c:	887b      	ldrh	r3, [r7, #2]
 800721e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007220:	7efb      	ldrb	r3, [r7, #27]
 8007222:	2b01      	cmp	r3, #1
 8007224:	d00e      	beq.n	8007244 <HAL_SPI_TransmitReceive+0x6e>
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800722c:	d106      	bne.n	800723c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	689b      	ldr	r3, [r3, #8]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d102      	bne.n	800723c <HAL_SPI_TransmitReceive+0x66>
 8007236:	7efb      	ldrb	r3, [r7, #27]
 8007238:	2b04      	cmp	r3, #4
 800723a:	d003      	beq.n	8007244 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800723c:	2302      	movs	r3, #2
 800723e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8007242:	e1e0      	b.n	8007606 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d005      	beq.n	8007256 <HAL_SPI_TransmitReceive+0x80>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d002      	beq.n	8007256 <HAL_SPI_TransmitReceive+0x80>
 8007250:	887b      	ldrh	r3, [r7, #2]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d103      	bne.n	800725e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8007256:	2301      	movs	r3, #1
 8007258:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800725c:	e1d3      	b.n	8007606 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007264:	b2db      	uxtb	r3, r3
 8007266:	2b04      	cmp	r3, #4
 8007268:	d003      	beq.n	8007272 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	2205      	movs	r2, #5
 800726e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	2200      	movs	r2, #0
 8007276:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	687a      	ldr	r2, [r7, #4]
 800727c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	887a      	ldrh	r2, [r7, #2]
 8007282:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	887a      	ldrh	r2, [r7, #2]
 800728a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	68ba      	ldr	r2, [r7, #8]
 8007292:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	887a      	ldrh	r2, [r7, #2]
 8007298:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	887a      	ldrh	r2, [r7, #2]
 800729e:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	2200      	movs	r2, #0
 80072a4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	2200      	movs	r2, #0
 80072aa:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	68db      	ldr	r3, [r3, #12]
 80072b0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80072b4:	d802      	bhi.n	80072bc <HAL_SPI_TransmitReceive+0xe6>
 80072b6:	8a3b      	ldrh	r3, [r7, #16]
 80072b8:	2b01      	cmp	r3, #1
 80072ba:	d908      	bls.n	80072ce <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	685a      	ldr	r2, [r3, #4]
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80072ca:	605a      	str	r2, [r3, #4]
 80072cc:	e007      	b.n	80072de <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	685a      	ldr	r2, [r3, #4]
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80072dc:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072e8:	2b40      	cmp	r3, #64	@ 0x40
 80072ea:	d007      	beq.n	80072fc <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	681a      	ldr	r2, [r3, #0]
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80072fa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	68db      	ldr	r3, [r3, #12]
 8007300:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007304:	f240 8081 	bls.w	800740a <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	685b      	ldr	r3, [r3, #4]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d002      	beq.n	8007316 <HAL_SPI_TransmitReceive+0x140>
 8007310:	8a7b      	ldrh	r3, [r7, #18]
 8007312:	2b01      	cmp	r3, #1
 8007314:	d16d      	bne.n	80073f2 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800731a:	881a      	ldrh	r2, [r3, #0]
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007326:	1c9a      	adds	r2, r3, #2
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007330:	b29b      	uxth	r3, r3
 8007332:	3b01      	subs	r3, #1
 8007334:	b29a      	uxth	r2, r3
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800733a:	e05a      	b.n	80073f2 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	689b      	ldr	r3, [r3, #8]
 8007342:	f003 0302 	and.w	r3, r3, #2
 8007346:	2b02      	cmp	r3, #2
 8007348:	d11b      	bne.n	8007382 <HAL_SPI_TransmitReceive+0x1ac>
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800734e:	b29b      	uxth	r3, r3
 8007350:	2b00      	cmp	r3, #0
 8007352:	d016      	beq.n	8007382 <HAL_SPI_TransmitReceive+0x1ac>
 8007354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007356:	2b01      	cmp	r3, #1
 8007358:	d113      	bne.n	8007382 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800735e:	881a      	ldrh	r2, [r3, #0]
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800736a:	1c9a      	adds	r2, r3, #2
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007374:	b29b      	uxth	r3, r3
 8007376:	3b01      	subs	r3, #1
 8007378:	b29a      	uxth	r2, r3
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800737e:	2300      	movs	r3, #0
 8007380:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	689b      	ldr	r3, [r3, #8]
 8007388:	f003 0301 	and.w	r3, r3, #1
 800738c:	2b01      	cmp	r3, #1
 800738e:	d11c      	bne.n	80073ca <HAL_SPI_TransmitReceive+0x1f4>
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007396:	b29b      	uxth	r3, r3
 8007398:	2b00      	cmp	r3, #0
 800739a:	d016      	beq.n	80073ca <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	68da      	ldr	r2, [r3, #12]
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073a6:	b292      	uxth	r2, r2
 80073a8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073ae:	1c9a      	adds	r2, r3, #2
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80073ba:	b29b      	uxth	r3, r3
 80073bc:	3b01      	subs	r3, #1
 80073be:	b29a      	uxth	r2, r3
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80073c6:	2301      	movs	r3, #1
 80073c8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80073ca:	f7fb ffd9 	bl	8003380 <HAL_GetTick>
 80073ce:	4602      	mov	r2, r0
 80073d0:	69fb      	ldr	r3, [r7, #28]
 80073d2:	1ad3      	subs	r3, r2, r3
 80073d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80073d6:	429a      	cmp	r2, r3
 80073d8:	d80b      	bhi.n	80073f2 <HAL_SPI_TransmitReceive+0x21c>
 80073da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073e0:	d007      	beq.n	80073f2 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 80073e2:	2303      	movs	r3, #3
 80073e4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	2201      	movs	r2, #1
 80073ec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80073f0:	e109      	b.n	8007606 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80073f6:	b29b      	uxth	r3, r3
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d19f      	bne.n	800733c <HAL_SPI_TransmitReceive+0x166>
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007402:	b29b      	uxth	r3, r3
 8007404:	2b00      	cmp	r3, #0
 8007406:	d199      	bne.n	800733c <HAL_SPI_TransmitReceive+0x166>
 8007408:	e0e3      	b.n	80075d2 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	685b      	ldr	r3, [r3, #4]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d003      	beq.n	800741a <HAL_SPI_TransmitReceive+0x244>
 8007412:	8a7b      	ldrh	r3, [r7, #18]
 8007414:	2b01      	cmp	r3, #1
 8007416:	f040 80cf 	bne.w	80075b8 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800741e:	b29b      	uxth	r3, r3
 8007420:	2b01      	cmp	r3, #1
 8007422:	d912      	bls.n	800744a <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007428:	881a      	ldrh	r2, [r3, #0]
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007434:	1c9a      	adds	r2, r3, #2
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800743e:	b29b      	uxth	r3, r3
 8007440:	3b02      	subs	r3, #2
 8007442:	b29a      	uxth	r2, r3
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007448:	e0b6      	b.n	80075b8 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	330c      	adds	r3, #12
 8007454:	7812      	ldrb	r2, [r2, #0]
 8007456:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800745c:	1c5a      	adds	r2, r3, #1
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007466:	b29b      	uxth	r3, r3
 8007468:	3b01      	subs	r3, #1
 800746a:	b29a      	uxth	r2, r3
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007470:	e0a2      	b.n	80075b8 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	689b      	ldr	r3, [r3, #8]
 8007478:	f003 0302 	and.w	r3, r3, #2
 800747c:	2b02      	cmp	r3, #2
 800747e:	d134      	bne.n	80074ea <HAL_SPI_TransmitReceive+0x314>
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007484:	b29b      	uxth	r3, r3
 8007486:	2b00      	cmp	r3, #0
 8007488:	d02f      	beq.n	80074ea <HAL_SPI_TransmitReceive+0x314>
 800748a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800748c:	2b01      	cmp	r3, #1
 800748e:	d12c      	bne.n	80074ea <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007494:	b29b      	uxth	r3, r3
 8007496:	2b01      	cmp	r3, #1
 8007498:	d912      	bls.n	80074c0 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800749e:	881a      	ldrh	r2, [r3, #0]
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074aa:	1c9a      	adds	r2, r3, #2
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80074b4:	b29b      	uxth	r3, r3
 80074b6:	3b02      	subs	r3, #2
 80074b8:	b29a      	uxth	r2, r3
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80074be:	e012      	b.n	80074e6 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	330c      	adds	r3, #12
 80074ca:	7812      	ldrb	r2, [r2, #0]
 80074cc:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074d2:	1c5a      	adds	r2, r3, #1
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80074dc:	b29b      	uxth	r3, r3
 80074de:	3b01      	subs	r3, #1
 80074e0:	b29a      	uxth	r2, r3
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80074e6:	2300      	movs	r3, #0
 80074e8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	689b      	ldr	r3, [r3, #8]
 80074f0:	f003 0301 	and.w	r3, r3, #1
 80074f4:	2b01      	cmp	r3, #1
 80074f6:	d148      	bne.n	800758a <HAL_SPI_TransmitReceive+0x3b4>
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80074fe:	b29b      	uxth	r3, r3
 8007500:	2b00      	cmp	r3, #0
 8007502:	d042      	beq.n	800758a <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800750a:	b29b      	uxth	r3, r3
 800750c:	2b01      	cmp	r3, #1
 800750e:	d923      	bls.n	8007558 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	68da      	ldr	r2, [r3, #12]
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800751a:	b292      	uxth	r2, r2
 800751c:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007522:	1c9a      	adds	r2, r3, #2
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800752e:	b29b      	uxth	r3, r3
 8007530:	3b02      	subs	r3, #2
 8007532:	b29a      	uxth	r2, r3
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007540:	b29b      	uxth	r3, r3
 8007542:	2b01      	cmp	r3, #1
 8007544:	d81f      	bhi.n	8007586 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	685a      	ldr	r2, [r3, #4]
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007554:	605a      	str	r2, [r3, #4]
 8007556:	e016      	b.n	8007586 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f103 020c 	add.w	r2, r3, #12
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007564:	7812      	ldrb	r2, [r2, #0]
 8007566:	b2d2      	uxtb	r2, r2
 8007568:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800756e:	1c5a      	adds	r2, r3, #1
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800757a:	b29b      	uxth	r3, r3
 800757c:	3b01      	subs	r3, #1
 800757e:	b29a      	uxth	r2, r3
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007586:	2301      	movs	r3, #1
 8007588:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800758a:	f7fb fef9 	bl	8003380 <HAL_GetTick>
 800758e:	4602      	mov	r2, r0
 8007590:	69fb      	ldr	r3, [r7, #28]
 8007592:	1ad3      	subs	r3, r2, r3
 8007594:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007596:	429a      	cmp	r2, r3
 8007598:	d803      	bhi.n	80075a2 <HAL_SPI_TransmitReceive+0x3cc>
 800759a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800759c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075a0:	d102      	bne.n	80075a8 <HAL_SPI_TransmitReceive+0x3d2>
 80075a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d107      	bne.n	80075b8 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 80075a8:	2303      	movs	r3, #3
 80075aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	2201      	movs	r2, #1
 80075b2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80075b6:	e026      	b.n	8007606 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80075bc:	b29b      	uxth	r3, r3
 80075be:	2b00      	cmp	r3, #0
 80075c0:	f47f af57 	bne.w	8007472 <HAL_SPI_TransmitReceive+0x29c>
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80075ca:	b29b      	uxth	r3, r3
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	f47f af50 	bne.w	8007472 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80075d2:	69fa      	ldr	r2, [r7, #28]
 80075d4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80075d6:	68f8      	ldr	r0, [r7, #12]
 80075d8:	f000 f996 	bl	8007908 <SPI_EndRxTxTransaction>
 80075dc:	4603      	mov	r3, r0
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d005      	beq.n	80075ee <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 80075e2:	2301      	movs	r3, #1
 80075e4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	2220      	movs	r2, #32
 80075ec:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d003      	beq.n	80075fe <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 80075f6:	2301      	movs	r3, #1
 80075f8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80075fc:	e003      	b.n	8007606 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	2201      	movs	r2, #1
 8007602:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	2200      	movs	r2, #0
 800760a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800760e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8007612:	4618      	mov	r0, r3
 8007614:	3728      	adds	r7, #40	@ 0x28
 8007616:	46bd      	mov	sp, r7
 8007618:	bd80      	pop	{r7, pc}
	...

0800761c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b088      	sub	sp, #32
 8007620:	af00      	add	r7, sp, #0
 8007622:	60f8      	str	r0, [r7, #12]
 8007624:	60b9      	str	r1, [r7, #8]
 8007626:	603b      	str	r3, [r7, #0]
 8007628:	4613      	mov	r3, r2
 800762a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800762c:	f7fb fea8 	bl	8003380 <HAL_GetTick>
 8007630:	4602      	mov	r2, r0
 8007632:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007634:	1a9b      	subs	r3, r3, r2
 8007636:	683a      	ldr	r2, [r7, #0]
 8007638:	4413      	add	r3, r2
 800763a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800763c:	f7fb fea0 	bl	8003380 <HAL_GetTick>
 8007640:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007642:	4b39      	ldr	r3, [pc, #228]	@ (8007728 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	015b      	lsls	r3, r3, #5
 8007648:	0d1b      	lsrs	r3, r3, #20
 800764a:	69fa      	ldr	r2, [r7, #28]
 800764c:	fb02 f303 	mul.w	r3, r2, r3
 8007650:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007652:	e054      	b.n	80076fe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	f1b3 3fff 	cmp.w	r3, #4294967295
 800765a:	d050      	beq.n	80076fe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800765c:	f7fb fe90 	bl	8003380 <HAL_GetTick>
 8007660:	4602      	mov	r2, r0
 8007662:	69bb      	ldr	r3, [r7, #24]
 8007664:	1ad3      	subs	r3, r2, r3
 8007666:	69fa      	ldr	r2, [r7, #28]
 8007668:	429a      	cmp	r2, r3
 800766a:	d902      	bls.n	8007672 <SPI_WaitFlagStateUntilTimeout+0x56>
 800766c:	69fb      	ldr	r3, [r7, #28]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d13d      	bne.n	80076ee <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	685a      	ldr	r2, [r3, #4]
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007680:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	685b      	ldr	r3, [r3, #4]
 8007686:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800768a:	d111      	bne.n	80076b0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	689b      	ldr	r3, [r3, #8]
 8007690:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007694:	d004      	beq.n	80076a0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	689b      	ldr	r3, [r3, #8]
 800769a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800769e:	d107      	bne.n	80076b0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	681a      	ldr	r2, [r3, #0]
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80076ae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80076b8:	d10f      	bne.n	80076da <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	681a      	ldr	r2, [r3, #0]
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80076c8:	601a      	str	r2, [r3, #0]
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	681a      	ldr	r2, [r3, #0]
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80076d8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	2201      	movs	r2, #1
 80076de:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	2200      	movs	r2, #0
 80076e6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80076ea:	2303      	movs	r3, #3
 80076ec:	e017      	b.n	800771e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80076ee:	697b      	ldr	r3, [r7, #20]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d101      	bne.n	80076f8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80076f4:	2300      	movs	r3, #0
 80076f6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80076f8:	697b      	ldr	r3, [r7, #20]
 80076fa:	3b01      	subs	r3, #1
 80076fc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	689a      	ldr	r2, [r3, #8]
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	4013      	ands	r3, r2
 8007708:	68ba      	ldr	r2, [r7, #8]
 800770a:	429a      	cmp	r2, r3
 800770c:	bf0c      	ite	eq
 800770e:	2301      	moveq	r3, #1
 8007710:	2300      	movne	r3, #0
 8007712:	b2db      	uxtb	r3, r3
 8007714:	461a      	mov	r2, r3
 8007716:	79fb      	ldrb	r3, [r7, #7]
 8007718:	429a      	cmp	r2, r3
 800771a:	d19b      	bne.n	8007654 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800771c:	2300      	movs	r3, #0
}
 800771e:	4618      	mov	r0, r3
 8007720:	3720      	adds	r7, #32
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}
 8007726:	bf00      	nop
 8007728:	20000008 	.word	0x20000008

0800772c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b08a      	sub	sp, #40	@ 0x28
 8007730:	af00      	add	r7, sp, #0
 8007732:	60f8      	str	r0, [r7, #12]
 8007734:	60b9      	str	r1, [r7, #8]
 8007736:	607a      	str	r2, [r7, #4]
 8007738:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800773a:	2300      	movs	r3, #0
 800773c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800773e:	f7fb fe1f 	bl	8003380 <HAL_GetTick>
 8007742:	4602      	mov	r2, r0
 8007744:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007746:	1a9b      	subs	r3, r3, r2
 8007748:	683a      	ldr	r2, [r7, #0]
 800774a:	4413      	add	r3, r2
 800774c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800774e:	f7fb fe17 	bl	8003380 <HAL_GetTick>
 8007752:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	330c      	adds	r3, #12
 800775a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800775c:	4b3d      	ldr	r3, [pc, #244]	@ (8007854 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800775e:	681a      	ldr	r2, [r3, #0]
 8007760:	4613      	mov	r3, r2
 8007762:	009b      	lsls	r3, r3, #2
 8007764:	4413      	add	r3, r2
 8007766:	00da      	lsls	r2, r3, #3
 8007768:	1ad3      	subs	r3, r2, r3
 800776a:	0d1b      	lsrs	r3, r3, #20
 800776c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800776e:	fb02 f303 	mul.w	r3, r2, r3
 8007772:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007774:	e060      	b.n	8007838 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007776:	68bb      	ldr	r3, [r7, #8]
 8007778:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800777c:	d107      	bne.n	800778e <SPI_WaitFifoStateUntilTimeout+0x62>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d104      	bne.n	800778e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007784:	69fb      	ldr	r3, [r7, #28]
 8007786:	781b      	ldrb	r3, [r3, #0]
 8007788:	b2db      	uxtb	r3, r3
 800778a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800778c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007794:	d050      	beq.n	8007838 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007796:	f7fb fdf3 	bl	8003380 <HAL_GetTick>
 800779a:	4602      	mov	r2, r0
 800779c:	6a3b      	ldr	r3, [r7, #32]
 800779e:	1ad3      	subs	r3, r2, r3
 80077a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80077a2:	429a      	cmp	r2, r3
 80077a4:	d902      	bls.n	80077ac <SPI_WaitFifoStateUntilTimeout+0x80>
 80077a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d13d      	bne.n	8007828 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	685a      	ldr	r2, [r3, #4]
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80077ba:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	685b      	ldr	r3, [r3, #4]
 80077c0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80077c4:	d111      	bne.n	80077ea <SPI_WaitFifoStateUntilTimeout+0xbe>
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	689b      	ldr	r3, [r3, #8]
 80077ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80077ce:	d004      	beq.n	80077da <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	689b      	ldr	r3, [r3, #8]
 80077d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80077d8:	d107      	bne.n	80077ea <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	681a      	ldr	r2, [r3, #0]
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80077e8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80077f2:	d10f      	bne.n	8007814 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	681a      	ldr	r2, [r3, #0]
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007802:	601a      	str	r2, [r3, #0]
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	681a      	ldr	r2, [r3, #0]
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007812:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	2201      	movs	r2, #1
 8007818:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	2200      	movs	r2, #0
 8007820:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8007824:	2303      	movs	r3, #3
 8007826:	e010      	b.n	800784a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007828:	69bb      	ldr	r3, [r7, #24]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d101      	bne.n	8007832 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800782e:	2300      	movs	r3, #0
 8007830:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8007832:	69bb      	ldr	r3, [r7, #24]
 8007834:	3b01      	subs	r3, #1
 8007836:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	689a      	ldr	r2, [r3, #8]
 800783e:	68bb      	ldr	r3, [r7, #8]
 8007840:	4013      	ands	r3, r2
 8007842:	687a      	ldr	r2, [r7, #4]
 8007844:	429a      	cmp	r2, r3
 8007846:	d196      	bne.n	8007776 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007848:	2300      	movs	r3, #0
}
 800784a:	4618      	mov	r0, r3
 800784c:	3728      	adds	r7, #40	@ 0x28
 800784e:	46bd      	mov	sp, r7
 8007850:	bd80      	pop	{r7, pc}
 8007852:	bf00      	nop
 8007854:	20000008 	.word	0x20000008

08007858 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b086      	sub	sp, #24
 800785c:	af02      	add	r7, sp, #8
 800785e:	60f8      	str	r0, [r7, #12]
 8007860:	60b9      	str	r1, [r7, #8]
 8007862:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	685b      	ldr	r3, [r3, #4]
 8007868:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800786c:	d111      	bne.n	8007892 <SPI_EndRxTransaction+0x3a>
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	689b      	ldr	r3, [r3, #8]
 8007872:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007876:	d004      	beq.n	8007882 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	689b      	ldr	r3, [r3, #8]
 800787c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007880:	d107      	bne.n	8007892 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	681a      	ldr	r2, [r3, #0]
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007890:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	9300      	str	r3, [sp, #0]
 8007896:	68bb      	ldr	r3, [r7, #8]
 8007898:	2200      	movs	r2, #0
 800789a:	2180      	movs	r1, #128	@ 0x80
 800789c:	68f8      	ldr	r0, [r7, #12]
 800789e:	f7ff febd 	bl	800761c <SPI_WaitFlagStateUntilTimeout>
 80078a2:	4603      	mov	r3, r0
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d007      	beq.n	80078b8 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80078ac:	f043 0220 	orr.w	r2, r3, #32
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80078b4:	2303      	movs	r3, #3
 80078b6:	e023      	b.n	8007900 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	685b      	ldr	r3, [r3, #4]
 80078bc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80078c0:	d11d      	bne.n	80078fe <SPI_EndRxTransaction+0xa6>
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	689b      	ldr	r3, [r3, #8]
 80078c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80078ca:	d004      	beq.n	80078d6 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	689b      	ldr	r3, [r3, #8]
 80078d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80078d4:	d113      	bne.n	80078fe <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	9300      	str	r3, [sp, #0]
 80078da:	68bb      	ldr	r3, [r7, #8]
 80078dc:	2200      	movs	r2, #0
 80078de:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80078e2:	68f8      	ldr	r0, [r7, #12]
 80078e4:	f7ff ff22 	bl	800772c <SPI_WaitFifoStateUntilTimeout>
 80078e8:	4603      	mov	r3, r0
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d007      	beq.n	80078fe <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80078f2:	f043 0220 	orr.w	r2, r3, #32
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80078fa:	2303      	movs	r3, #3
 80078fc:	e000      	b.n	8007900 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80078fe:	2300      	movs	r3, #0
}
 8007900:	4618      	mov	r0, r3
 8007902:	3710      	adds	r7, #16
 8007904:	46bd      	mov	sp, r7
 8007906:	bd80      	pop	{r7, pc}

08007908 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b086      	sub	sp, #24
 800790c:	af02      	add	r7, sp, #8
 800790e:	60f8      	str	r0, [r7, #12]
 8007910:	60b9      	str	r1, [r7, #8]
 8007912:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	9300      	str	r3, [sp, #0]
 8007918:	68bb      	ldr	r3, [r7, #8]
 800791a:	2200      	movs	r2, #0
 800791c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8007920:	68f8      	ldr	r0, [r7, #12]
 8007922:	f7ff ff03 	bl	800772c <SPI_WaitFifoStateUntilTimeout>
 8007926:	4603      	mov	r3, r0
 8007928:	2b00      	cmp	r3, #0
 800792a:	d007      	beq.n	800793c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007930:	f043 0220 	orr.w	r2, r3, #32
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007938:	2303      	movs	r3, #3
 800793a:	e027      	b.n	800798c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	9300      	str	r3, [sp, #0]
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	2200      	movs	r2, #0
 8007944:	2180      	movs	r1, #128	@ 0x80
 8007946:	68f8      	ldr	r0, [r7, #12]
 8007948:	f7ff fe68 	bl	800761c <SPI_WaitFlagStateUntilTimeout>
 800794c:	4603      	mov	r3, r0
 800794e:	2b00      	cmp	r3, #0
 8007950:	d007      	beq.n	8007962 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007956:	f043 0220 	orr.w	r2, r3, #32
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800795e:	2303      	movs	r3, #3
 8007960:	e014      	b.n	800798c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	9300      	str	r3, [sp, #0]
 8007966:	68bb      	ldr	r3, [r7, #8]
 8007968:	2200      	movs	r2, #0
 800796a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800796e:	68f8      	ldr	r0, [r7, #12]
 8007970:	f7ff fedc 	bl	800772c <SPI_WaitFifoStateUntilTimeout>
 8007974:	4603      	mov	r3, r0
 8007976:	2b00      	cmp	r3, #0
 8007978:	d007      	beq.n	800798a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800797e:	f043 0220 	orr.w	r2, r3, #32
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007986:	2303      	movs	r3, #3
 8007988:	e000      	b.n	800798c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800798a:	2300      	movs	r3, #0
}
 800798c:	4618      	mov	r0, r3
 800798e:	3710      	adds	r7, #16
 8007990:	46bd      	mov	sp, r7
 8007992:	bd80      	pop	{r7, pc}

08007994 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b082      	sub	sp, #8
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d101      	bne.n	80079a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80079a2:	2301      	movs	r3, #1
 80079a4:	e049      	b.n	8007a3a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80079ac:	b2db      	uxtb	r3, r3
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d106      	bne.n	80079c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2200      	movs	r2, #0
 80079b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	f000 f841 	bl	8007a42 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2202      	movs	r2, #2
 80079c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681a      	ldr	r2, [r3, #0]
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	3304      	adds	r3, #4
 80079d0:	4619      	mov	r1, r3
 80079d2:	4610      	mov	r0, r2
 80079d4:	f000 f9be 	bl	8007d54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2201      	movs	r2, #1
 80079dc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2201      	movs	r2, #1
 80079e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2201      	movs	r2, #1
 80079ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2201      	movs	r2, #1
 80079f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2201      	movs	r2, #1
 80079fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2201      	movs	r2, #1
 8007a04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2201      	movs	r2, #1
 8007a0c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2201      	movs	r2, #1
 8007a14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2201      	movs	r2, #1
 8007a1c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2201      	movs	r2, #1
 8007a24:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2201      	movs	r2, #1
 8007a2c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2201      	movs	r2, #1
 8007a34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007a38:	2300      	movs	r3, #0
}
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	3708      	adds	r7, #8
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	bd80      	pop	{r7, pc}

08007a42 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007a42:	b480      	push	{r7}
 8007a44:	b083      	sub	sp, #12
 8007a46:	af00      	add	r7, sp, #0
 8007a48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007a4a:	bf00      	nop
 8007a4c:	370c      	adds	r7, #12
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a54:	4770      	bx	lr
	...

08007a58 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007a58:	b480      	push	{r7}
 8007a5a:	b085      	sub	sp, #20
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007a66:	b2db      	uxtb	r3, r3
 8007a68:	2b01      	cmp	r3, #1
 8007a6a:	d001      	beq.n	8007a70 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007a6c:	2301      	movs	r3, #1
 8007a6e:	e036      	b.n	8007ade <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2202      	movs	r2, #2
 8007a74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	68da      	ldr	r2, [r3, #12]
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f042 0201 	orr.w	r2, r2, #1
 8007a86:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	4a17      	ldr	r2, [pc, #92]	@ (8007aec <HAL_TIM_Base_Start_IT+0x94>)
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d004      	beq.n	8007a9c <HAL_TIM_Base_Start_IT+0x44>
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a9a:	d115      	bne.n	8007ac8 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	689a      	ldr	r2, [r3, #8]
 8007aa2:	4b13      	ldr	r3, [pc, #76]	@ (8007af0 <HAL_TIM_Base_Start_IT+0x98>)
 8007aa4:	4013      	ands	r3, r2
 8007aa6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	2b06      	cmp	r3, #6
 8007aac:	d015      	beq.n	8007ada <HAL_TIM_Base_Start_IT+0x82>
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ab4:	d011      	beq.n	8007ada <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	681a      	ldr	r2, [r3, #0]
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f042 0201 	orr.w	r2, r2, #1
 8007ac4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ac6:	e008      	b.n	8007ada <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	681a      	ldr	r2, [r3, #0]
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f042 0201 	orr.w	r2, r2, #1
 8007ad6:	601a      	str	r2, [r3, #0]
 8007ad8:	e000      	b.n	8007adc <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ada:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007adc:	2300      	movs	r3, #0
}
 8007ade:	4618      	mov	r0, r3
 8007ae0:	3714      	adds	r7, #20
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae8:	4770      	bx	lr
 8007aea:	bf00      	nop
 8007aec:	40012c00 	.word	0x40012c00
 8007af0:	00010007 	.word	0x00010007

08007af4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b084      	sub	sp, #16
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	68db      	ldr	r3, [r3, #12]
 8007b02:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	691b      	ldr	r3, [r3, #16]
 8007b0a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	f003 0302 	and.w	r3, r3, #2
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d020      	beq.n	8007b58 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	f003 0302 	and.w	r3, r3, #2
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d01b      	beq.n	8007b58 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f06f 0202 	mvn.w	r2, #2
 8007b28:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2201      	movs	r2, #1
 8007b2e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	699b      	ldr	r3, [r3, #24]
 8007b36:	f003 0303 	and.w	r3, r3, #3
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d003      	beq.n	8007b46 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f000 f8e9 	bl	8007d16 <HAL_TIM_IC_CaptureCallback>
 8007b44:	e005      	b.n	8007b52 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b46:	6878      	ldr	r0, [r7, #4]
 8007b48:	f000 f8db 	bl	8007d02 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b4c:	6878      	ldr	r0, [r7, #4]
 8007b4e:	f000 f8ec 	bl	8007d2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2200      	movs	r2, #0
 8007b56:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	f003 0304 	and.w	r3, r3, #4
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d020      	beq.n	8007ba4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	f003 0304 	and.w	r3, r3, #4
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d01b      	beq.n	8007ba4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f06f 0204 	mvn.w	r2, #4
 8007b74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2202      	movs	r2, #2
 8007b7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	699b      	ldr	r3, [r3, #24]
 8007b82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d003      	beq.n	8007b92 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b8a:	6878      	ldr	r0, [r7, #4]
 8007b8c:	f000 f8c3 	bl	8007d16 <HAL_TIM_IC_CaptureCallback>
 8007b90:	e005      	b.n	8007b9e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	f000 f8b5 	bl	8007d02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b98:	6878      	ldr	r0, [r7, #4]
 8007b9a:	f000 f8c6 	bl	8007d2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	f003 0308 	and.w	r3, r3, #8
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d020      	beq.n	8007bf0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	f003 0308 	and.w	r3, r3, #8
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d01b      	beq.n	8007bf0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f06f 0208 	mvn.w	r2, #8
 8007bc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2204      	movs	r2, #4
 8007bc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	69db      	ldr	r3, [r3, #28]
 8007bce:	f003 0303 	and.w	r3, r3, #3
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d003      	beq.n	8007bde <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007bd6:	6878      	ldr	r0, [r7, #4]
 8007bd8:	f000 f89d 	bl	8007d16 <HAL_TIM_IC_CaptureCallback>
 8007bdc:	e005      	b.n	8007bea <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007bde:	6878      	ldr	r0, [r7, #4]
 8007be0:	f000 f88f 	bl	8007d02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007be4:	6878      	ldr	r0, [r7, #4]
 8007be6:	f000 f8a0 	bl	8007d2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2200      	movs	r2, #0
 8007bee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	f003 0310 	and.w	r3, r3, #16
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d020      	beq.n	8007c3c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	f003 0310 	and.w	r3, r3, #16
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d01b      	beq.n	8007c3c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	f06f 0210 	mvn.w	r2, #16
 8007c0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2208      	movs	r2, #8
 8007c12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	69db      	ldr	r3, [r3, #28]
 8007c1a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d003      	beq.n	8007c2a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	f000 f877 	bl	8007d16 <HAL_TIM_IC_CaptureCallback>
 8007c28:	e005      	b.n	8007c36 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	f000 f869 	bl	8007d02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c30:	6878      	ldr	r0, [r7, #4]
 8007c32:	f000 f87a 	bl	8007d2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2200      	movs	r2, #0
 8007c3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	f003 0301 	and.w	r3, r3, #1
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d00c      	beq.n	8007c60 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	f003 0301 	and.w	r3, r3, #1
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d007      	beq.n	8007c60 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f06f 0201 	mvn.w	r2, #1
 8007c58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	f7fb f852 	bl	8002d04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d104      	bne.n	8007c74 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007c6a:	68bb      	ldr	r3, [r7, #8]
 8007c6c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d00c      	beq.n	8007c8e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d007      	beq.n	8007c8e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007c86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007c88:	6878      	ldr	r0, [r7, #4]
 8007c8a:	f000 f8dd 	bl	8007e48 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007c8e:	68bb      	ldr	r3, [r7, #8]
 8007c90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d00c      	beq.n	8007cb2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d007      	beq.n	8007cb2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007caa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007cac:	6878      	ldr	r0, [r7, #4]
 8007cae:	f000 f8d5 	bl	8007e5c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007cb2:	68bb      	ldr	r3, [r7, #8]
 8007cb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d00c      	beq.n	8007cd6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d007      	beq.n	8007cd6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007cce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007cd0:	6878      	ldr	r0, [r7, #4]
 8007cd2:	f000 f834 	bl	8007d3e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007cd6:	68bb      	ldr	r3, [r7, #8]
 8007cd8:	f003 0320 	and.w	r3, r3, #32
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d00c      	beq.n	8007cfa <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	f003 0320 	and.w	r3, r3, #32
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d007      	beq.n	8007cfa <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f06f 0220 	mvn.w	r2, #32
 8007cf2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007cf4:	6878      	ldr	r0, [r7, #4]
 8007cf6:	f000 f89d 	bl	8007e34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007cfa:	bf00      	nop
 8007cfc:	3710      	adds	r7, #16
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bd80      	pop	{r7, pc}

08007d02 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007d02:	b480      	push	{r7}
 8007d04:	b083      	sub	sp, #12
 8007d06:	af00      	add	r7, sp, #0
 8007d08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007d0a:	bf00      	nop
 8007d0c:	370c      	adds	r7, #12
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d14:	4770      	bx	lr

08007d16 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007d16:	b480      	push	{r7}
 8007d18:	b083      	sub	sp, #12
 8007d1a:	af00      	add	r7, sp, #0
 8007d1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007d1e:	bf00      	nop
 8007d20:	370c      	adds	r7, #12
 8007d22:	46bd      	mov	sp, r7
 8007d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d28:	4770      	bx	lr

08007d2a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007d2a:	b480      	push	{r7}
 8007d2c:	b083      	sub	sp, #12
 8007d2e:	af00      	add	r7, sp, #0
 8007d30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007d32:	bf00      	nop
 8007d34:	370c      	adds	r7, #12
 8007d36:	46bd      	mov	sp, r7
 8007d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3c:	4770      	bx	lr

08007d3e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007d3e:	b480      	push	{r7}
 8007d40:	b083      	sub	sp, #12
 8007d42:	af00      	add	r7, sp, #0
 8007d44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007d46:	bf00      	nop
 8007d48:	370c      	adds	r7, #12
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d50:	4770      	bx	lr
	...

08007d54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007d54:	b480      	push	{r7}
 8007d56:	b085      	sub	sp, #20
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
 8007d5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	4a30      	ldr	r2, [pc, #192]	@ (8007e28 <TIM_Base_SetConfig+0xd4>)
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	d003      	beq.n	8007d74 <TIM_Base_SetConfig+0x20>
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d72:	d108      	bne.n	8007d86 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	685b      	ldr	r3, [r3, #4]
 8007d80:	68fa      	ldr	r2, [r7, #12]
 8007d82:	4313      	orrs	r3, r2
 8007d84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	4a27      	ldr	r2, [pc, #156]	@ (8007e28 <TIM_Base_SetConfig+0xd4>)
 8007d8a:	4293      	cmp	r3, r2
 8007d8c:	d00b      	beq.n	8007da6 <TIM_Base_SetConfig+0x52>
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d94:	d007      	beq.n	8007da6 <TIM_Base_SetConfig+0x52>
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	4a24      	ldr	r2, [pc, #144]	@ (8007e2c <TIM_Base_SetConfig+0xd8>)
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	d003      	beq.n	8007da6 <TIM_Base_SetConfig+0x52>
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	4a23      	ldr	r2, [pc, #140]	@ (8007e30 <TIM_Base_SetConfig+0xdc>)
 8007da2:	4293      	cmp	r3, r2
 8007da4:	d108      	bne.n	8007db8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007dac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	68db      	ldr	r3, [r3, #12]
 8007db2:	68fa      	ldr	r2, [r7, #12]
 8007db4:	4313      	orrs	r3, r2
 8007db6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	695b      	ldr	r3, [r3, #20]
 8007dc2:	4313      	orrs	r3, r2
 8007dc4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	68fa      	ldr	r2, [r7, #12]
 8007dca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	689a      	ldr	r2, [r3, #8]
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	681a      	ldr	r2, [r3, #0]
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	4a12      	ldr	r2, [pc, #72]	@ (8007e28 <TIM_Base_SetConfig+0xd4>)
 8007de0:	4293      	cmp	r3, r2
 8007de2:	d007      	beq.n	8007df4 <TIM_Base_SetConfig+0xa0>
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	4a11      	ldr	r2, [pc, #68]	@ (8007e2c <TIM_Base_SetConfig+0xd8>)
 8007de8:	4293      	cmp	r3, r2
 8007dea:	d003      	beq.n	8007df4 <TIM_Base_SetConfig+0xa0>
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	4a10      	ldr	r2, [pc, #64]	@ (8007e30 <TIM_Base_SetConfig+0xdc>)
 8007df0:	4293      	cmp	r3, r2
 8007df2:	d103      	bne.n	8007dfc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	691a      	ldr	r2, [r3, #16]
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2201      	movs	r2, #1
 8007e00:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	691b      	ldr	r3, [r3, #16]
 8007e06:	f003 0301 	and.w	r3, r3, #1
 8007e0a:	2b01      	cmp	r3, #1
 8007e0c:	d105      	bne.n	8007e1a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	691b      	ldr	r3, [r3, #16]
 8007e12:	f023 0201 	bic.w	r2, r3, #1
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	611a      	str	r2, [r3, #16]
  }
}
 8007e1a:	bf00      	nop
 8007e1c:	3714      	adds	r7, #20
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e24:	4770      	bx	lr
 8007e26:	bf00      	nop
 8007e28:	40012c00 	.word	0x40012c00
 8007e2c:	40014400 	.word	0x40014400
 8007e30:	40014800 	.word	0x40014800

08007e34 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007e34:	b480      	push	{r7}
 8007e36:	b083      	sub	sp, #12
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007e3c:	bf00      	nop
 8007e3e:	370c      	adds	r7, #12
 8007e40:	46bd      	mov	sp, r7
 8007e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e46:	4770      	bx	lr

08007e48 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007e48:	b480      	push	{r7}
 8007e4a:	b083      	sub	sp, #12
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007e50:	bf00      	nop
 8007e52:	370c      	adds	r7, #12
 8007e54:	46bd      	mov	sp, r7
 8007e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5a:	4770      	bx	lr

08007e5c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007e5c:	b480      	push	{r7}
 8007e5e:	b083      	sub	sp, #12
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007e64:	bf00      	nop
 8007e66:	370c      	adds	r7, #12
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6e:	4770      	bx	lr

08007e70 <LL_RCC_GetUSARTClockSource>:
{
 8007e70:	b480      	push	{r7}
 8007e72:	b083      	sub	sp, #12
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8007e78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007e7c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	4013      	ands	r3, r2
}
 8007e84:	4618      	mov	r0, r3
 8007e86:	370c      	adds	r7, #12
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8e:	4770      	bx	lr

08007e90 <LL_RCC_GetLPUARTClockSource>:
{
 8007e90:	b480      	push	{r7}
 8007e92:	b083      	sub	sp, #12
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8007e98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007e9c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	4013      	ands	r3, r2
}
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	370c      	adds	r7, #12
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eae:	4770      	bx	lr

08007eb0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b082      	sub	sp, #8
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d101      	bne.n	8007ec2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007ebe:	2301      	movs	r3, #1
 8007ec0:	e042      	b.n	8007f48 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d106      	bne.n	8007eda <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2200      	movs	r2, #0
 8007ed0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	f7fb f899 	bl	800300c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2224      	movs	r2, #36	@ 0x24
 8007ede:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	681a      	ldr	r2, [r3, #0]
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	f022 0201 	bic.w	r2, r2, #1
 8007ef0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d002      	beq.n	8007f00 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007efa:	6878      	ldr	r0, [r7, #4]
 8007efc:	f000 fe32 	bl	8008b64 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007f00:	6878      	ldr	r0, [r7, #4]
 8007f02:	f000 fc07 	bl	8008714 <UART_SetConfig>
 8007f06:	4603      	mov	r3, r0
 8007f08:	2b01      	cmp	r3, #1
 8007f0a:	d101      	bne.n	8007f10 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007f0c:	2301      	movs	r3, #1
 8007f0e:	e01b      	b.n	8007f48 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	685a      	ldr	r2, [r3, #4]
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007f1e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	689a      	ldr	r2, [r3, #8]
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007f2e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	681a      	ldr	r2, [r3, #0]
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f042 0201 	orr.w	r2, r2, #1
 8007f3e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007f40:	6878      	ldr	r0, [r7, #4]
 8007f42:	f000 feb1 	bl	8008ca8 <UART_CheckIdleState>
 8007f46:	4603      	mov	r3, r0
}
 8007f48:	4618      	mov	r0, r3
 8007f4a:	3708      	adds	r7, #8
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	bd80      	pop	{r7, pc}

08007f50 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b08a      	sub	sp, #40	@ 0x28
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	60f8      	str	r0, [r7, #12]
 8007f58:	60b9      	str	r1, [r7, #8]
 8007f5a:	4613      	mov	r3, r2
 8007f5c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f64:	2b20      	cmp	r3, #32
 8007f66:	d167      	bne.n	8008038 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d002      	beq.n	8007f74 <HAL_UART_Transmit_DMA+0x24>
 8007f6e:	88fb      	ldrh	r3, [r7, #6]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d101      	bne.n	8007f78 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8007f74:	2301      	movs	r3, #1
 8007f76:	e060      	b.n	800803a <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	68ba      	ldr	r2, [r7, #8]
 8007f7c:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	88fa      	ldrh	r2, [r7, #6]
 8007f82:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	88fa      	ldrh	r2, [r7, #6]
 8007f8a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	2200      	movs	r2, #0
 8007f92:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	2221      	movs	r2, #33	@ 0x21
 8007f9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d028      	beq.n	8007ff8 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007faa:	4a26      	ldr	r2, [pc, #152]	@ (8008044 <HAL_UART_Transmit_DMA+0xf4>)
 8007fac:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007fb2:	4a25      	ldr	r2, [pc, #148]	@ (8008048 <HAL_UART_Transmit_DMA+0xf8>)
 8007fb4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007fba:	4a24      	ldr	r2, [pc, #144]	@ (800804c <HAL_UART_Transmit_DMA+0xfc>)
 8007fbc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007fce:	4619      	mov	r1, r3
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	3328      	adds	r3, #40	@ 0x28
 8007fd6:	461a      	mov	r2, r3
 8007fd8:	88fb      	ldrh	r3, [r7, #6]
 8007fda:	f7fb fc37 	bl	800384c <HAL_DMA_Start_IT>
 8007fde:	4603      	mov	r3, r0
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d009      	beq.n	8007ff8 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	2210      	movs	r2, #16
 8007fe8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	2220      	movs	r2, #32
 8007ff0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8007ff4:	2301      	movs	r3, #1
 8007ff6:	e020      	b.n	800803a <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	2240      	movs	r2, #64	@ 0x40
 8007ffe:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	3308      	adds	r3, #8
 8008006:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008008:	697b      	ldr	r3, [r7, #20]
 800800a:	e853 3f00 	ldrex	r3, [r3]
 800800e:	613b      	str	r3, [r7, #16]
   return(result);
 8008010:	693b      	ldr	r3, [r7, #16]
 8008012:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008016:	627b      	str	r3, [r7, #36]	@ 0x24
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	3308      	adds	r3, #8
 800801e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008020:	623a      	str	r2, [r7, #32]
 8008022:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008024:	69f9      	ldr	r1, [r7, #28]
 8008026:	6a3a      	ldr	r2, [r7, #32]
 8008028:	e841 2300 	strex	r3, r2, [r1]
 800802c:	61bb      	str	r3, [r7, #24]
   return(result);
 800802e:	69bb      	ldr	r3, [r7, #24]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d1e5      	bne.n	8008000 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8008034:	2300      	movs	r3, #0
 8008036:	e000      	b.n	800803a <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8008038:	2302      	movs	r3, #2
  }
}
 800803a:	4618      	mov	r0, r3
 800803c:	3728      	adds	r7, #40	@ 0x28
 800803e:	46bd      	mov	sp, r7
 8008040:	bd80      	pop	{r7, pc}
 8008042:	bf00      	nop
 8008044:	08009025 	.word	0x08009025
 8008048:	080090bf 	.word	0x080090bf
 800804c:	080090db 	.word	0x080090db

08008050 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b0ba      	sub	sp, #232	@ 0xe8
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	69db      	ldr	r3, [r3, #28]
 800805e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	689b      	ldr	r3, [r3, #8]
 8008072:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008076:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800807a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800807e:	4013      	ands	r3, r2
 8008080:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008084:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008088:	2b00      	cmp	r3, #0
 800808a:	d11b      	bne.n	80080c4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800808c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008090:	f003 0320 	and.w	r3, r3, #32
 8008094:	2b00      	cmp	r3, #0
 8008096:	d015      	beq.n	80080c4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008098:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800809c:	f003 0320 	and.w	r3, r3, #32
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d105      	bne.n	80080b0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80080a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80080a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d009      	beq.n	80080c4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	f000 8300 	beq.w	80086ba <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80080be:	6878      	ldr	r0, [r7, #4]
 80080c0:	4798      	blx	r3
      }
      return;
 80080c2:	e2fa      	b.n	80086ba <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80080c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	f000 8123 	beq.w	8008314 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80080ce:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80080d2:	4b8d      	ldr	r3, [pc, #564]	@ (8008308 <HAL_UART_IRQHandler+0x2b8>)
 80080d4:	4013      	ands	r3, r2
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d106      	bne.n	80080e8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80080da:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80080de:	4b8b      	ldr	r3, [pc, #556]	@ (800830c <HAL_UART_IRQHandler+0x2bc>)
 80080e0:	4013      	ands	r3, r2
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	f000 8116 	beq.w	8008314 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80080e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80080ec:	f003 0301 	and.w	r3, r3, #1
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d011      	beq.n	8008118 <HAL_UART_IRQHandler+0xc8>
 80080f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80080f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d00b      	beq.n	8008118 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	2201      	movs	r2, #1
 8008106:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800810e:	f043 0201 	orr.w	r2, r3, #1
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008118:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800811c:	f003 0302 	and.w	r3, r3, #2
 8008120:	2b00      	cmp	r3, #0
 8008122:	d011      	beq.n	8008148 <HAL_UART_IRQHandler+0xf8>
 8008124:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008128:	f003 0301 	and.w	r3, r3, #1
 800812c:	2b00      	cmp	r3, #0
 800812e:	d00b      	beq.n	8008148 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	2202      	movs	r2, #2
 8008136:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800813e:	f043 0204 	orr.w	r2, r3, #4
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008148:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800814c:	f003 0304 	and.w	r3, r3, #4
 8008150:	2b00      	cmp	r3, #0
 8008152:	d011      	beq.n	8008178 <HAL_UART_IRQHandler+0x128>
 8008154:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008158:	f003 0301 	and.w	r3, r3, #1
 800815c:	2b00      	cmp	r3, #0
 800815e:	d00b      	beq.n	8008178 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	2204      	movs	r2, #4
 8008166:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800816e:	f043 0202 	orr.w	r2, r3, #2
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008178:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800817c:	f003 0308 	and.w	r3, r3, #8
 8008180:	2b00      	cmp	r3, #0
 8008182:	d017      	beq.n	80081b4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008184:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008188:	f003 0320 	and.w	r3, r3, #32
 800818c:	2b00      	cmp	r3, #0
 800818e:	d105      	bne.n	800819c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008190:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008194:	4b5c      	ldr	r3, [pc, #368]	@ (8008308 <HAL_UART_IRQHandler+0x2b8>)
 8008196:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008198:	2b00      	cmp	r3, #0
 800819a:	d00b      	beq.n	80081b4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	2208      	movs	r2, #8
 80081a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081aa:	f043 0208 	orr.w	r2, r3, #8
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80081b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80081b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d012      	beq.n	80081e6 <HAL_UART_IRQHandler+0x196>
 80081c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80081c4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d00c      	beq.n	80081e6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80081d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081dc:	f043 0220 	orr.w	r2, r3, #32
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	f000 8266 	beq.w	80086be <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80081f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80081f6:	f003 0320 	and.w	r3, r3, #32
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d013      	beq.n	8008226 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80081fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008202:	f003 0320 	and.w	r3, r3, #32
 8008206:	2b00      	cmp	r3, #0
 8008208:	d105      	bne.n	8008216 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800820a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800820e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008212:	2b00      	cmp	r3, #0
 8008214:	d007      	beq.n	8008226 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800821a:	2b00      	cmp	r3, #0
 800821c:	d003      	beq.n	8008226 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008222:	6878      	ldr	r0, [r7, #4]
 8008224:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800822c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	689b      	ldr	r3, [r3, #8]
 8008236:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800823a:	2b40      	cmp	r3, #64	@ 0x40
 800823c:	d005      	beq.n	800824a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800823e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008242:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008246:	2b00      	cmp	r3, #0
 8008248:	d054      	beq.n	80082f4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800824a:	6878      	ldr	r0, [r7, #4]
 800824c:	f000 fe84 	bl	8008f58 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	689b      	ldr	r3, [r3, #8]
 8008256:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800825a:	2b40      	cmp	r3, #64	@ 0x40
 800825c:	d146      	bne.n	80082ec <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	3308      	adds	r3, #8
 8008264:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008268:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800826c:	e853 3f00 	ldrex	r3, [r3]
 8008270:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008274:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008278:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800827c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	3308      	adds	r3, #8
 8008286:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800828a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800828e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008292:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008296:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800829a:	e841 2300 	strex	r3, r2, [r1]
 800829e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80082a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d1d9      	bne.n	800825e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d017      	beq.n	80082e4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80082ba:	4a15      	ldr	r2, [pc, #84]	@ (8008310 <HAL_UART_IRQHandler+0x2c0>)
 80082bc:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80082c4:	4618      	mov	r0, r3
 80082c6:	f7fb fb9b 	bl	8003a00 <HAL_DMA_Abort_IT>
 80082ca:	4603      	mov	r3, r0
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d019      	beq.n	8008304 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80082d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082d8:	687a      	ldr	r2, [r7, #4]
 80082da:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80082de:	4610      	mov	r0, r2
 80082e0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082e2:	e00f      	b.n	8008304 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80082e4:	6878      	ldr	r0, [r7, #4]
 80082e6:	f000 f9ff 	bl	80086e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082ea:	e00b      	b.n	8008304 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80082ec:	6878      	ldr	r0, [r7, #4]
 80082ee:	f000 f9fb 	bl	80086e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082f2:	e007      	b.n	8008304 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	f000 f9f7 	bl	80086e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	2200      	movs	r2, #0
 80082fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8008302:	e1dc      	b.n	80086be <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008304:	bf00      	nop
    return;
 8008306:	e1da      	b.n	80086be <HAL_UART_IRQHandler+0x66e>
 8008308:	10000001 	.word	0x10000001
 800830c:	04000120 	.word	0x04000120
 8008310:	0800915b 	.word	0x0800915b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008318:	2b01      	cmp	r3, #1
 800831a:	f040 8170 	bne.w	80085fe <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800831e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008322:	f003 0310 	and.w	r3, r3, #16
 8008326:	2b00      	cmp	r3, #0
 8008328:	f000 8169 	beq.w	80085fe <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800832c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008330:	f003 0310 	and.w	r3, r3, #16
 8008334:	2b00      	cmp	r3, #0
 8008336:	f000 8162 	beq.w	80085fe <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	2210      	movs	r2, #16
 8008340:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	689b      	ldr	r3, [r3, #8]
 8008348:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800834c:	2b40      	cmp	r3, #64	@ 0x40
 800834e:	f040 80d8 	bne.w	8008502 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	685b      	ldr	r3, [r3, #4]
 800835c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008360:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008364:	2b00      	cmp	r3, #0
 8008366:	f000 80af 	beq.w	80084c8 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008370:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008374:	429a      	cmp	r2, r3
 8008376:	f080 80a7 	bcs.w	80084c8 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008380:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	f003 0320 	and.w	r3, r3, #32
 8008392:	2b00      	cmp	r3, #0
 8008394:	f040 8087 	bne.w	80084a6 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80083a4:	e853 3f00 	ldrex	r3, [r3]
 80083a8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80083ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80083b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80083b4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	461a      	mov	r2, r3
 80083be:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80083c2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80083c6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083ca:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80083ce:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80083d2:	e841 2300 	strex	r3, r2, [r1]
 80083d6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80083da:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d1da      	bne.n	8008398 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	3308      	adds	r3, #8
 80083e8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083ea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80083ec:	e853 3f00 	ldrex	r3, [r3]
 80083f0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80083f2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80083f4:	f023 0301 	bic.w	r3, r3, #1
 80083f8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	3308      	adds	r3, #8
 8008402:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008406:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800840a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800840c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800840e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008412:	e841 2300 	strex	r3, r2, [r1]
 8008416:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008418:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800841a:	2b00      	cmp	r3, #0
 800841c:	d1e1      	bne.n	80083e2 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	3308      	adds	r3, #8
 8008424:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008426:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008428:	e853 3f00 	ldrex	r3, [r3]
 800842c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800842e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008430:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008434:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	3308      	adds	r3, #8
 800843e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008442:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008444:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008446:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008448:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800844a:	e841 2300 	strex	r3, r2, [r1]
 800844e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008450:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008452:	2b00      	cmp	r3, #0
 8008454:	d1e3      	bne.n	800841e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2220      	movs	r2, #32
 800845a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	2200      	movs	r2, #0
 8008462:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800846a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800846c:	e853 3f00 	ldrex	r3, [r3]
 8008470:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008472:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008474:	f023 0310 	bic.w	r3, r3, #16
 8008478:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	461a      	mov	r2, r3
 8008482:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008486:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008488:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800848a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800848c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800848e:	e841 2300 	strex	r3, r2, [r1]
 8008492:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008494:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008496:	2b00      	cmp	r3, #0
 8008498:	d1e4      	bne.n	8008464 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80084a0:	4618      	mov	r0, r3
 80084a2:	f7fb fa4e 	bl	8003942 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	2202      	movs	r2, #2
 80084aa:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80084b8:	b29b      	uxth	r3, r3
 80084ba:	1ad3      	subs	r3, r2, r3
 80084bc:	b29b      	uxth	r3, r3
 80084be:	4619      	mov	r1, r3
 80084c0:	6878      	ldr	r0, [r7, #4]
 80084c2:	f000 f91b 	bl	80086fc <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80084c6:	e0fc      	b.n	80086c2 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80084ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80084d2:	429a      	cmp	r2, r3
 80084d4:	f040 80f5 	bne.w	80086c2 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	f003 0320 	and.w	r3, r3, #32
 80084e6:	2b20      	cmp	r3, #32
 80084e8:	f040 80eb 	bne.w	80086c2 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2202      	movs	r2, #2
 80084f0:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80084f8:	4619      	mov	r1, r3
 80084fa:	6878      	ldr	r0, [r7, #4]
 80084fc:	f000 f8fe 	bl	80086fc <HAL_UARTEx_RxEventCallback>
      return;
 8008500:	e0df      	b.n	80086c2 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800850e:	b29b      	uxth	r3, r3
 8008510:	1ad3      	subs	r3, r2, r3
 8008512:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800851c:	b29b      	uxth	r3, r3
 800851e:	2b00      	cmp	r3, #0
 8008520:	f000 80d1 	beq.w	80086c6 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8008524:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008528:	2b00      	cmp	r3, #0
 800852a:	f000 80cc 	beq.w	80086c6 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008534:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008536:	e853 3f00 	ldrex	r3, [r3]
 800853a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800853c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800853e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008542:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	461a      	mov	r2, r3
 800854c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008550:	647b      	str	r3, [r7, #68]	@ 0x44
 8008552:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008554:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008556:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008558:	e841 2300 	strex	r3, r2, [r1]
 800855c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800855e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008560:	2b00      	cmp	r3, #0
 8008562:	d1e4      	bne.n	800852e <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	3308      	adds	r3, #8
 800856a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800856c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800856e:	e853 3f00 	ldrex	r3, [r3]
 8008572:	623b      	str	r3, [r7, #32]
   return(result);
 8008574:	6a3b      	ldr	r3, [r7, #32]
 8008576:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800857a:	f023 0301 	bic.w	r3, r3, #1
 800857e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	3308      	adds	r3, #8
 8008588:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800858c:	633a      	str	r2, [r7, #48]	@ 0x30
 800858e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008590:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008592:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008594:	e841 2300 	strex	r3, r2, [r1]
 8008598:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800859a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800859c:	2b00      	cmp	r3, #0
 800859e:	d1e1      	bne.n	8008564 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2220      	movs	r2, #32
 80085a4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2200      	movs	r2, #0
 80085ac:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	2200      	movs	r2, #0
 80085b2:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085ba:	693b      	ldr	r3, [r7, #16]
 80085bc:	e853 3f00 	ldrex	r3, [r3]
 80085c0:	60fb      	str	r3, [r7, #12]
   return(result);
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	f023 0310 	bic.w	r3, r3, #16
 80085c8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	461a      	mov	r2, r3
 80085d2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80085d6:	61fb      	str	r3, [r7, #28]
 80085d8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085da:	69b9      	ldr	r1, [r7, #24]
 80085dc:	69fa      	ldr	r2, [r7, #28]
 80085de:	e841 2300 	strex	r3, r2, [r1]
 80085e2:	617b      	str	r3, [r7, #20]
   return(result);
 80085e4:	697b      	ldr	r3, [r7, #20]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d1e4      	bne.n	80085b4 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	2202      	movs	r2, #2
 80085ee:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80085f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80085f4:	4619      	mov	r1, r3
 80085f6:	6878      	ldr	r0, [r7, #4]
 80085f8:	f000 f880 	bl	80086fc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80085fc:	e063      	b.n	80086c6 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80085fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008602:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008606:	2b00      	cmp	r3, #0
 8008608:	d00e      	beq.n	8008628 <HAL_UART_IRQHandler+0x5d8>
 800860a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800860e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008612:	2b00      	cmp	r3, #0
 8008614:	d008      	beq.n	8008628 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800861e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008620:	6878      	ldr	r0, [r7, #4]
 8008622:	f000 fddb 	bl	80091dc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008626:	e051      	b.n	80086cc <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008628:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800862c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008630:	2b00      	cmp	r3, #0
 8008632:	d014      	beq.n	800865e <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008634:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008638:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800863c:	2b00      	cmp	r3, #0
 800863e:	d105      	bne.n	800864c <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008640:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008644:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008648:	2b00      	cmp	r3, #0
 800864a:	d008      	beq.n	800865e <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008650:	2b00      	cmp	r3, #0
 8008652:	d03a      	beq.n	80086ca <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008658:	6878      	ldr	r0, [r7, #4]
 800865a:	4798      	blx	r3
    }
    return;
 800865c:	e035      	b.n	80086ca <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800865e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008662:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008666:	2b00      	cmp	r3, #0
 8008668:	d009      	beq.n	800867e <HAL_UART_IRQHandler+0x62e>
 800866a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800866e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008672:	2b00      	cmp	r3, #0
 8008674:	d003      	beq.n	800867e <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8008676:	6878      	ldr	r0, [r7, #4]
 8008678:	f000 fd85 	bl	8009186 <UART_EndTransmit_IT>
    return;
 800867c:	e026      	b.n	80086cc <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800867e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008682:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008686:	2b00      	cmp	r3, #0
 8008688:	d009      	beq.n	800869e <HAL_UART_IRQHandler+0x64e>
 800868a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800868e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008692:	2b00      	cmp	r3, #0
 8008694:	d003      	beq.n	800869e <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008696:	6878      	ldr	r0, [r7, #4]
 8008698:	f000 fdb4 	bl	8009204 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800869c:	e016      	b.n	80086cc <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800869e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80086a2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d010      	beq.n	80086cc <HAL_UART_IRQHandler+0x67c>
 80086aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	da0c      	bge.n	80086cc <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80086b2:	6878      	ldr	r0, [r7, #4]
 80086b4:	f000 fd9c 	bl	80091f0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80086b8:	e008      	b.n	80086cc <HAL_UART_IRQHandler+0x67c>
      return;
 80086ba:	bf00      	nop
 80086bc:	e006      	b.n	80086cc <HAL_UART_IRQHandler+0x67c>
    return;
 80086be:	bf00      	nop
 80086c0:	e004      	b.n	80086cc <HAL_UART_IRQHandler+0x67c>
      return;
 80086c2:	bf00      	nop
 80086c4:	e002      	b.n	80086cc <HAL_UART_IRQHandler+0x67c>
      return;
 80086c6:	bf00      	nop
 80086c8:	e000      	b.n	80086cc <HAL_UART_IRQHandler+0x67c>
    return;
 80086ca:	bf00      	nop
  }
}
 80086cc:	37e8      	adds	r7, #232	@ 0xe8
 80086ce:	46bd      	mov	sp, r7
 80086d0:	bd80      	pop	{r7, pc}
 80086d2:	bf00      	nop

080086d4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80086d4:	b480      	push	{r7}
 80086d6:	b083      	sub	sp, #12
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80086dc:	bf00      	nop
 80086de:	370c      	adds	r7, #12
 80086e0:	46bd      	mov	sp, r7
 80086e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e6:	4770      	bx	lr

080086e8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80086e8:	b480      	push	{r7}
 80086ea:	b083      	sub	sp, #12
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80086f0:	bf00      	nop
 80086f2:	370c      	adds	r7, #12
 80086f4:	46bd      	mov	sp, r7
 80086f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fa:	4770      	bx	lr

080086fc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80086fc:	b480      	push	{r7}
 80086fe:	b083      	sub	sp, #12
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
 8008704:	460b      	mov	r3, r1
 8008706:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008708:	bf00      	nop
 800870a:	370c      	adds	r7, #12
 800870c:	46bd      	mov	sp, r7
 800870e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008712:	4770      	bx	lr

08008714 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008714:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008718:	b08c      	sub	sp, #48	@ 0x30
 800871a:	af00      	add	r7, sp, #0
 800871c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800871e:	2300      	movs	r3, #0
 8008720:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008724:	697b      	ldr	r3, [r7, #20]
 8008726:	689a      	ldr	r2, [r3, #8]
 8008728:	697b      	ldr	r3, [r7, #20]
 800872a:	691b      	ldr	r3, [r3, #16]
 800872c:	431a      	orrs	r2, r3
 800872e:	697b      	ldr	r3, [r7, #20]
 8008730:	695b      	ldr	r3, [r3, #20]
 8008732:	431a      	orrs	r2, r3
 8008734:	697b      	ldr	r3, [r7, #20]
 8008736:	69db      	ldr	r3, [r3, #28]
 8008738:	4313      	orrs	r3, r2
 800873a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800873c:	697b      	ldr	r3, [r7, #20]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	681a      	ldr	r2, [r3, #0]
 8008742:	4baf      	ldr	r3, [pc, #700]	@ (8008a00 <UART_SetConfig+0x2ec>)
 8008744:	4013      	ands	r3, r2
 8008746:	697a      	ldr	r2, [r7, #20]
 8008748:	6812      	ldr	r2, [r2, #0]
 800874a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800874c:	430b      	orrs	r3, r1
 800874e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008750:	697b      	ldr	r3, [r7, #20]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	685b      	ldr	r3, [r3, #4]
 8008756:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800875a:	697b      	ldr	r3, [r7, #20]
 800875c:	68da      	ldr	r2, [r3, #12]
 800875e:	697b      	ldr	r3, [r7, #20]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	430a      	orrs	r2, r1
 8008764:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008766:	697b      	ldr	r3, [r7, #20]
 8008768:	699b      	ldr	r3, [r3, #24]
 800876a:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800876c:	697b      	ldr	r3, [r7, #20]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	4aa4      	ldr	r2, [pc, #656]	@ (8008a04 <UART_SetConfig+0x2f0>)
 8008772:	4293      	cmp	r3, r2
 8008774:	d004      	beq.n	8008780 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008776:	697b      	ldr	r3, [r7, #20]
 8008778:	6a1b      	ldr	r3, [r3, #32]
 800877a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800877c:	4313      	orrs	r3, r2
 800877e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008780:	697b      	ldr	r3, [r7, #20]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	689b      	ldr	r3, [r3, #8]
 8008786:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800878a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800878e:	697a      	ldr	r2, [r7, #20]
 8008790:	6812      	ldr	r2, [r2, #0]
 8008792:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008794:	430b      	orrs	r3, r1
 8008796:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008798:	697b      	ldr	r3, [r7, #20]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800879e:	f023 010f 	bic.w	r1, r3, #15
 80087a2:	697b      	ldr	r3, [r7, #20]
 80087a4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80087a6:	697b      	ldr	r3, [r7, #20]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	430a      	orrs	r2, r1
 80087ac:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80087ae:	697b      	ldr	r3, [r7, #20]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	4a95      	ldr	r2, [pc, #596]	@ (8008a08 <UART_SetConfig+0x2f4>)
 80087b4:	4293      	cmp	r3, r2
 80087b6:	d125      	bne.n	8008804 <UART_SetConfig+0xf0>
 80087b8:	2003      	movs	r0, #3
 80087ba:	f7ff fb59 	bl	8007e70 <LL_RCC_GetUSARTClockSource>
 80087be:	4603      	mov	r3, r0
 80087c0:	2b03      	cmp	r3, #3
 80087c2:	d81b      	bhi.n	80087fc <UART_SetConfig+0xe8>
 80087c4:	a201      	add	r2, pc, #4	@ (adr r2, 80087cc <UART_SetConfig+0xb8>)
 80087c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087ca:	bf00      	nop
 80087cc:	080087dd 	.word	0x080087dd
 80087d0:	080087ed 	.word	0x080087ed
 80087d4:	080087e5 	.word	0x080087e5
 80087d8:	080087f5 	.word	0x080087f5
 80087dc:	2301      	movs	r3, #1
 80087de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80087e2:	e042      	b.n	800886a <UART_SetConfig+0x156>
 80087e4:	2302      	movs	r3, #2
 80087e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80087ea:	e03e      	b.n	800886a <UART_SetConfig+0x156>
 80087ec:	2304      	movs	r3, #4
 80087ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80087f2:	e03a      	b.n	800886a <UART_SetConfig+0x156>
 80087f4:	2308      	movs	r3, #8
 80087f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80087fa:	e036      	b.n	800886a <UART_SetConfig+0x156>
 80087fc:	2310      	movs	r3, #16
 80087fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008802:	e032      	b.n	800886a <UART_SetConfig+0x156>
 8008804:	697b      	ldr	r3, [r7, #20]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	4a7e      	ldr	r2, [pc, #504]	@ (8008a04 <UART_SetConfig+0x2f0>)
 800880a:	4293      	cmp	r3, r2
 800880c:	d12a      	bne.n	8008864 <UART_SetConfig+0x150>
 800880e:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8008812:	f7ff fb3d 	bl	8007e90 <LL_RCC_GetLPUARTClockSource>
 8008816:	4603      	mov	r3, r0
 8008818:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800881c:	d01a      	beq.n	8008854 <UART_SetConfig+0x140>
 800881e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008822:	d81b      	bhi.n	800885c <UART_SetConfig+0x148>
 8008824:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008828:	d00c      	beq.n	8008844 <UART_SetConfig+0x130>
 800882a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800882e:	d815      	bhi.n	800885c <UART_SetConfig+0x148>
 8008830:	2b00      	cmp	r3, #0
 8008832:	d003      	beq.n	800883c <UART_SetConfig+0x128>
 8008834:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008838:	d008      	beq.n	800884c <UART_SetConfig+0x138>
 800883a:	e00f      	b.n	800885c <UART_SetConfig+0x148>
 800883c:	2300      	movs	r3, #0
 800883e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008842:	e012      	b.n	800886a <UART_SetConfig+0x156>
 8008844:	2302      	movs	r3, #2
 8008846:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800884a:	e00e      	b.n	800886a <UART_SetConfig+0x156>
 800884c:	2304      	movs	r3, #4
 800884e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008852:	e00a      	b.n	800886a <UART_SetConfig+0x156>
 8008854:	2308      	movs	r3, #8
 8008856:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800885a:	e006      	b.n	800886a <UART_SetConfig+0x156>
 800885c:	2310      	movs	r3, #16
 800885e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008862:	e002      	b.n	800886a <UART_SetConfig+0x156>
 8008864:	2310      	movs	r3, #16
 8008866:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800886a:	697b      	ldr	r3, [r7, #20]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	4a65      	ldr	r2, [pc, #404]	@ (8008a04 <UART_SetConfig+0x2f0>)
 8008870:	4293      	cmp	r3, r2
 8008872:	f040 8097 	bne.w	80089a4 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008876:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800887a:	2b08      	cmp	r3, #8
 800887c:	d823      	bhi.n	80088c6 <UART_SetConfig+0x1b2>
 800887e:	a201      	add	r2, pc, #4	@ (adr r2, 8008884 <UART_SetConfig+0x170>)
 8008880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008884:	080088a9 	.word	0x080088a9
 8008888:	080088c7 	.word	0x080088c7
 800888c:	080088b1 	.word	0x080088b1
 8008890:	080088c7 	.word	0x080088c7
 8008894:	080088b7 	.word	0x080088b7
 8008898:	080088c7 	.word	0x080088c7
 800889c:	080088c7 	.word	0x080088c7
 80088a0:	080088c7 	.word	0x080088c7
 80088a4:	080088bf 	.word	0x080088bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80088a8:	f7fd fb02 	bl	8005eb0 <HAL_RCC_GetPCLK1Freq>
 80088ac:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80088ae:	e010      	b.n	80088d2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80088b0:	4b56      	ldr	r3, [pc, #344]	@ (8008a0c <UART_SetConfig+0x2f8>)
 80088b2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80088b4:	e00d      	b.n	80088d2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80088b6:	f7fd fa7b 	bl	8005db0 <HAL_RCC_GetSysClockFreq>
 80088ba:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80088bc:	e009      	b.n	80088d2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80088be:	f248 0306 	movw	r3, #32774	@ 0x8006
 80088c2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80088c4:	e005      	b.n	80088d2 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 80088c6:	2300      	movs	r3, #0
 80088c8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80088ca:	2301      	movs	r3, #1
 80088cc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80088d0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80088d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	f000 812b 	beq.w	8008b30 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80088da:	697b      	ldr	r3, [r7, #20]
 80088dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088de:	4a4c      	ldr	r2, [pc, #304]	@ (8008a10 <UART_SetConfig+0x2fc>)
 80088e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80088e4:	461a      	mov	r2, r3
 80088e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80088ec:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80088ee:	697b      	ldr	r3, [r7, #20]
 80088f0:	685a      	ldr	r2, [r3, #4]
 80088f2:	4613      	mov	r3, r2
 80088f4:	005b      	lsls	r3, r3, #1
 80088f6:	4413      	add	r3, r2
 80088f8:	69ba      	ldr	r2, [r7, #24]
 80088fa:	429a      	cmp	r2, r3
 80088fc:	d305      	bcc.n	800890a <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80088fe:	697b      	ldr	r3, [r7, #20]
 8008900:	685b      	ldr	r3, [r3, #4]
 8008902:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008904:	69ba      	ldr	r2, [r7, #24]
 8008906:	429a      	cmp	r2, r3
 8008908:	d903      	bls.n	8008912 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 800890a:	2301      	movs	r3, #1
 800890c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008910:	e10e      	b.n	8008b30 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008914:	2200      	movs	r2, #0
 8008916:	60bb      	str	r3, [r7, #8]
 8008918:	60fa      	str	r2, [r7, #12]
 800891a:	697b      	ldr	r3, [r7, #20]
 800891c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800891e:	4a3c      	ldr	r2, [pc, #240]	@ (8008a10 <UART_SetConfig+0x2fc>)
 8008920:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008924:	b29b      	uxth	r3, r3
 8008926:	2200      	movs	r2, #0
 8008928:	603b      	str	r3, [r7, #0]
 800892a:	607a      	str	r2, [r7, #4]
 800892c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008930:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008934:	f7f7 ff62 	bl	80007fc <__aeabi_uldivmod>
 8008938:	4602      	mov	r2, r0
 800893a:	460b      	mov	r3, r1
 800893c:	4610      	mov	r0, r2
 800893e:	4619      	mov	r1, r3
 8008940:	f04f 0200 	mov.w	r2, #0
 8008944:	f04f 0300 	mov.w	r3, #0
 8008948:	020b      	lsls	r3, r1, #8
 800894a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800894e:	0202      	lsls	r2, r0, #8
 8008950:	6979      	ldr	r1, [r7, #20]
 8008952:	6849      	ldr	r1, [r1, #4]
 8008954:	0849      	lsrs	r1, r1, #1
 8008956:	2000      	movs	r0, #0
 8008958:	460c      	mov	r4, r1
 800895a:	4605      	mov	r5, r0
 800895c:	eb12 0804 	adds.w	r8, r2, r4
 8008960:	eb43 0905 	adc.w	r9, r3, r5
 8008964:	697b      	ldr	r3, [r7, #20]
 8008966:	685b      	ldr	r3, [r3, #4]
 8008968:	2200      	movs	r2, #0
 800896a:	469a      	mov	sl, r3
 800896c:	4693      	mov	fp, r2
 800896e:	4652      	mov	r2, sl
 8008970:	465b      	mov	r3, fp
 8008972:	4640      	mov	r0, r8
 8008974:	4649      	mov	r1, r9
 8008976:	f7f7 ff41 	bl	80007fc <__aeabi_uldivmod>
 800897a:	4602      	mov	r2, r0
 800897c:	460b      	mov	r3, r1
 800897e:	4613      	mov	r3, r2
 8008980:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008982:	6a3b      	ldr	r3, [r7, #32]
 8008984:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008988:	d308      	bcc.n	800899c <UART_SetConfig+0x288>
 800898a:	6a3b      	ldr	r3, [r7, #32]
 800898c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008990:	d204      	bcs.n	800899c <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8008992:	697b      	ldr	r3, [r7, #20]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	6a3a      	ldr	r2, [r7, #32]
 8008998:	60da      	str	r2, [r3, #12]
 800899a:	e0c9      	b.n	8008b30 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 800899c:	2301      	movs	r3, #1
 800899e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80089a2:	e0c5      	b.n	8008b30 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80089a4:	697b      	ldr	r3, [r7, #20]
 80089a6:	69db      	ldr	r3, [r3, #28]
 80089a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80089ac:	d16d      	bne.n	8008a8a <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 80089ae:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80089b2:	3b01      	subs	r3, #1
 80089b4:	2b07      	cmp	r3, #7
 80089b6:	d82d      	bhi.n	8008a14 <UART_SetConfig+0x300>
 80089b8:	a201      	add	r2, pc, #4	@ (adr r2, 80089c0 <UART_SetConfig+0x2ac>)
 80089ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089be:	bf00      	nop
 80089c0:	080089e1 	.word	0x080089e1
 80089c4:	080089e9 	.word	0x080089e9
 80089c8:	08008a15 	.word	0x08008a15
 80089cc:	080089ef 	.word	0x080089ef
 80089d0:	08008a15 	.word	0x08008a15
 80089d4:	08008a15 	.word	0x08008a15
 80089d8:	08008a15 	.word	0x08008a15
 80089dc:	080089f7 	.word	0x080089f7
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80089e0:	f7fd fa7c 	bl	8005edc <HAL_RCC_GetPCLK2Freq>
 80089e4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80089e6:	e01b      	b.n	8008a20 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80089e8:	4b08      	ldr	r3, [pc, #32]	@ (8008a0c <UART_SetConfig+0x2f8>)
 80089ea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80089ec:	e018      	b.n	8008a20 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80089ee:	f7fd f9df 	bl	8005db0 <HAL_RCC_GetSysClockFreq>
 80089f2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80089f4:	e014      	b.n	8008a20 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80089f6:	f248 0306 	movw	r3, #32774	@ 0x8006
 80089fa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80089fc:	e010      	b.n	8008a20 <UART_SetConfig+0x30c>
 80089fe:	bf00      	nop
 8008a00:	cfff69f3 	.word	0xcfff69f3
 8008a04:	40008000 	.word	0x40008000
 8008a08:	40013800 	.word	0x40013800
 8008a0c:	00f42400 	.word	0x00f42400
 8008a10:	08010d00 	.word	0x08010d00
      default:
        pclk = 0U;
 8008a14:	2300      	movs	r3, #0
 8008a16:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008a18:	2301      	movs	r3, #1
 8008a1a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008a1e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008a20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	f000 8084 	beq.w	8008b30 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008a28:	697b      	ldr	r3, [r7, #20]
 8008a2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a2c:	4a4b      	ldr	r2, [pc, #300]	@ (8008b5c <UART_SetConfig+0x448>)
 8008a2e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a32:	461a      	mov	r2, r3
 8008a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a36:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a3a:	005a      	lsls	r2, r3, #1
 8008a3c:	697b      	ldr	r3, [r7, #20]
 8008a3e:	685b      	ldr	r3, [r3, #4]
 8008a40:	085b      	lsrs	r3, r3, #1
 8008a42:	441a      	add	r2, r3
 8008a44:	697b      	ldr	r3, [r7, #20]
 8008a46:	685b      	ldr	r3, [r3, #4]
 8008a48:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a4c:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008a4e:	6a3b      	ldr	r3, [r7, #32]
 8008a50:	2b0f      	cmp	r3, #15
 8008a52:	d916      	bls.n	8008a82 <UART_SetConfig+0x36e>
 8008a54:	6a3b      	ldr	r3, [r7, #32]
 8008a56:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008a5a:	d212      	bcs.n	8008a82 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008a5c:	6a3b      	ldr	r3, [r7, #32]
 8008a5e:	b29b      	uxth	r3, r3
 8008a60:	f023 030f 	bic.w	r3, r3, #15
 8008a64:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008a66:	6a3b      	ldr	r3, [r7, #32]
 8008a68:	085b      	lsrs	r3, r3, #1
 8008a6a:	b29b      	uxth	r3, r3
 8008a6c:	f003 0307 	and.w	r3, r3, #7
 8008a70:	b29a      	uxth	r2, r3
 8008a72:	8bfb      	ldrh	r3, [r7, #30]
 8008a74:	4313      	orrs	r3, r2
 8008a76:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008a78:	697b      	ldr	r3, [r7, #20]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	8bfa      	ldrh	r2, [r7, #30]
 8008a7e:	60da      	str	r2, [r3, #12]
 8008a80:	e056      	b.n	8008b30 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8008a82:	2301      	movs	r3, #1
 8008a84:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008a88:	e052      	b.n	8008b30 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008a8a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008a8e:	3b01      	subs	r3, #1
 8008a90:	2b07      	cmp	r3, #7
 8008a92:	d822      	bhi.n	8008ada <UART_SetConfig+0x3c6>
 8008a94:	a201      	add	r2, pc, #4	@ (adr r2, 8008a9c <UART_SetConfig+0x388>)
 8008a96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a9a:	bf00      	nop
 8008a9c:	08008abd 	.word	0x08008abd
 8008aa0:	08008ac5 	.word	0x08008ac5
 8008aa4:	08008adb 	.word	0x08008adb
 8008aa8:	08008acb 	.word	0x08008acb
 8008aac:	08008adb 	.word	0x08008adb
 8008ab0:	08008adb 	.word	0x08008adb
 8008ab4:	08008adb 	.word	0x08008adb
 8008ab8:	08008ad3 	.word	0x08008ad3
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008abc:	f7fd fa0e 	bl	8005edc <HAL_RCC_GetPCLK2Freq>
 8008ac0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008ac2:	e010      	b.n	8008ae6 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008ac4:	4b26      	ldr	r3, [pc, #152]	@ (8008b60 <UART_SetConfig+0x44c>)
 8008ac6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008ac8:	e00d      	b.n	8008ae6 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008aca:	f7fd f971 	bl	8005db0 <HAL_RCC_GetSysClockFreq>
 8008ace:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008ad0:	e009      	b.n	8008ae6 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008ad2:	f248 0306 	movw	r3, #32774	@ 0x8006
 8008ad6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008ad8:	e005      	b.n	8008ae6 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8008ada:	2300      	movs	r3, #0
 8008adc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008ade:	2301      	movs	r3, #1
 8008ae0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008ae4:	bf00      	nop
    }

    if (pclk != 0U)
 8008ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d021      	beq.n	8008b30 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008aec:	697b      	ldr	r3, [r7, #20]
 8008aee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008af0:	4a1a      	ldr	r2, [pc, #104]	@ (8008b5c <UART_SetConfig+0x448>)
 8008af2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008af6:	461a      	mov	r2, r3
 8008af8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008afa:	fbb3 f2f2 	udiv	r2, r3, r2
 8008afe:	697b      	ldr	r3, [r7, #20]
 8008b00:	685b      	ldr	r3, [r3, #4]
 8008b02:	085b      	lsrs	r3, r3, #1
 8008b04:	441a      	add	r2, r3
 8008b06:	697b      	ldr	r3, [r7, #20]
 8008b08:	685b      	ldr	r3, [r3, #4]
 8008b0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b0e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008b10:	6a3b      	ldr	r3, [r7, #32]
 8008b12:	2b0f      	cmp	r3, #15
 8008b14:	d909      	bls.n	8008b2a <UART_SetConfig+0x416>
 8008b16:	6a3b      	ldr	r3, [r7, #32]
 8008b18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008b1c:	d205      	bcs.n	8008b2a <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008b1e:	6a3b      	ldr	r3, [r7, #32]
 8008b20:	b29a      	uxth	r2, r3
 8008b22:	697b      	ldr	r3, [r7, #20]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	60da      	str	r2, [r3, #12]
 8008b28:	e002      	b.n	8008b30 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8008b2a:	2301      	movs	r3, #1
 8008b2c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008b30:	697b      	ldr	r3, [r7, #20]
 8008b32:	2201      	movs	r2, #1
 8008b34:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008b38:	697b      	ldr	r3, [r7, #20]
 8008b3a:	2201      	movs	r2, #1
 8008b3c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008b40:	697b      	ldr	r3, [r7, #20]
 8008b42:	2200      	movs	r2, #0
 8008b44:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008b46:	697b      	ldr	r3, [r7, #20]
 8008b48:	2200      	movs	r2, #0
 8008b4a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008b4c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8008b50:	4618      	mov	r0, r3
 8008b52:	3730      	adds	r7, #48	@ 0x30
 8008b54:	46bd      	mov	sp, r7
 8008b56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008b5a:	bf00      	nop
 8008b5c:	08010d00 	.word	0x08010d00
 8008b60:	00f42400 	.word	0x00f42400

08008b64 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008b64:	b480      	push	{r7}
 8008b66:	b083      	sub	sp, #12
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b70:	f003 0308 	and.w	r3, r3, #8
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d00a      	beq.n	8008b8e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	685b      	ldr	r3, [r3, #4]
 8008b7e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	430a      	orrs	r2, r1
 8008b8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b92:	f003 0301 	and.w	r3, r3, #1
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d00a      	beq.n	8008bb0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	685b      	ldr	r3, [r3, #4]
 8008ba0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	430a      	orrs	r2, r1
 8008bae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bb4:	f003 0302 	and.w	r3, r3, #2
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d00a      	beq.n	8008bd2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	685b      	ldr	r3, [r3, #4]
 8008bc2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	430a      	orrs	r2, r1
 8008bd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bd6:	f003 0304 	and.w	r3, r3, #4
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d00a      	beq.n	8008bf4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	685b      	ldr	r3, [r3, #4]
 8008be4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	430a      	orrs	r2, r1
 8008bf2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bf8:	f003 0310 	and.w	r3, r3, #16
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d00a      	beq.n	8008c16 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	689b      	ldr	r3, [r3, #8]
 8008c06:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	430a      	orrs	r2, r1
 8008c14:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c1a:	f003 0320 	and.w	r3, r3, #32
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d00a      	beq.n	8008c38 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	689b      	ldr	r3, [r3, #8]
 8008c28:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	430a      	orrs	r2, r1
 8008c36:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d01a      	beq.n	8008c7a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	685b      	ldr	r3, [r3, #4]
 8008c4a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	430a      	orrs	r2, r1
 8008c58:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c5e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008c62:	d10a      	bne.n	8008c7a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	685b      	ldr	r3, [r3, #4]
 8008c6a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	430a      	orrs	r2, r1
 8008c78:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d00a      	beq.n	8008c9c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	685b      	ldr	r3, [r3, #4]
 8008c8c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	430a      	orrs	r2, r1
 8008c9a:	605a      	str	r2, [r3, #4]
  }
}
 8008c9c:	bf00      	nop
 8008c9e:	370c      	adds	r7, #12
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca6:	4770      	bx	lr

08008ca8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b098      	sub	sp, #96	@ 0x60
 8008cac:	af02      	add	r7, sp, #8
 8008cae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008cb8:	f7fa fb62 	bl	8003380 <HAL_GetTick>
 8008cbc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	f003 0308 	and.w	r3, r3, #8
 8008cc8:	2b08      	cmp	r3, #8
 8008cca:	d12f      	bne.n	8008d2c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008ccc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008cd0:	9300      	str	r3, [sp, #0]
 8008cd2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008cda:	6878      	ldr	r0, [r7, #4]
 8008cdc:	f000 f88e 	bl	8008dfc <UART_WaitOnFlagUntilTimeout>
 8008ce0:	4603      	mov	r3, r0
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d022      	beq.n	8008d2c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cee:	e853 3f00 	ldrex	r3, [r3]
 8008cf2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008cf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008cf6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008cfa:	653b      	str	r3, [r7, #80]	@ 0x50
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	461a      	mov	r2, r3
 8008d02:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008d04:	647b      	str	r3, [r7, #68]	@ 0x44
 8008d06:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d08:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008d0a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008d0c:	e841 2300 	strex	r3, r2, [r1]
 8008d10:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008d12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d1e6      	bne.n	8008ce6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2220      	movs	r2, #32
 8008d1c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2200      	movs	r2, #0
 8008d24:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008d28:	2303      	movs	r3, #3
 8008d2a:	e063      	b.n	8008df4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	f003 0304 	and.w	r3, r3, #4
 8008d36:	2b04      	cmp	r3, #4
 8008d38:	d149      	bne.n	8008dce <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008d3a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008d3e:	9300      	str	r3, [sp, #0]
 8008d40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008d42:	2200      	movs	r2, #0
 8008d44:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008d48:	6878      	ldr	r0, [r7, #4]
 8008d4a:	f000 f857 	bl	8008dfc <UART_WaitOnFlagUntilTimeout>
 8008d4e:	4603      	mov	r3, r0
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d03c      	beq.n	8008dce <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d5c:	e853 3f00 	ldrex	r3, [r3]
 8008d60:	623b      	str	r3, [r7, #32]
   return(result);
 8008d62:	6a3b      	ldr	r3, [r7, #32]
 8008d64:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008d68:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	461a      	mov	r2, r3
 8008d70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008d72:	633b      	str	r3, [r7, #48]	@ 0x30
 8008d74:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d76:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008d78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008d7a:	e841 2300 	strex	r3, r2, [r1]
 8008d7e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008d80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d1e6      	bne.n	8008d54 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	3308      	adds	r3, #8
 8008d8c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d8e:	693b      	ldr	r3, [r7, #16]
 8008d90:	e853 3f00 	ldrex	r3, [r3]
 8008d94:	60fb      	str	r3, [r7, #12]
   return(result);
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	f023 0301 	bic.w	r3, r3, #1
 8008d9c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	3308      	adds	r3, #8
 8008da4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008da6:	61fa      	str	r2, [r7, #28]
 8008da8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008daa:	69b9      	ldr	r1, [r7, #24]
 8008dac:	69fa      	ldr	r2, [r7, #28]
 8008dae:	e841 2300 	strex	r3, r2, [r1]
 8008db2:	617b      	str	r3, [r7, #20]
   return(result);
 8008db4:	697b      	ldr	r3, [r7, #20]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d1e5      	bne.n	8008d86 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	2220      	movs	r2, #32
 8008dbe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008dca:	2303      	movs	r3, #3
 8008dcc:	e012      	b.n	8008df4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	2220      	movs	r2, #32
 8008dd2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	2220      	movs	r2, #32
 8008dda:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	2200      	movs	r2, #0
 8008de2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	2200      	movs	r2, #0
 8008de8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	2200      	movs	r2, #0
 8008dee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008df2:	2300      	movs	r3, #0
}
 8008df4:	4618      	mov	r0, r3
 8008df6:	3758      	adds	r7, #88	@ 0x58
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	bd80      	pop	{r7, pc}

08008dfc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b084      	sub	sp, #16
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	60f8      	str	r0, [r7, #12]
 8008e04:	60b9      	str	r1, [r7, #8]
 8008e06:	603b      	str	r3, [r7, #0]
 8008e08:	4613      	mov	r3, r2
 8008e0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e0c:	e04f      	b.n	8008eae <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008e0e:	69bb      	ldr	r3, [r7, #24]
 8008e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e14:	d04b      	beq.n	8008eae <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008e16:	f7fa fab3 	bl	8003380 <HAL_GetTick>
 8008e1a:	4602      	mov	r2, r0
 8008e1c:	683b      	ldr	r3, [r7, #0]
 8008e1e:	1ad3      	subs	r3, r2, r3
 8008e20:	69ba      	ldr	r2, [r7, #24]
 8008e22:	429a      	cmp	r2, r3
 8008e24:	d302      	bcc.n	8008e2c <UART_WaitOnFlagUntilTimeout+0x30>
 8008e26:	69bb      	ldr	r3, [r7, #24]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d101      	bne.n	8008e30 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008e2c:	2303      	movs	r3, #3
 8008e2e:	e04e      	b.n	8008ece <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	f003 0304 	and.w	r3, r3, #4
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d037      	beq.n	8008eae <UART_WaitOnFlagUntilTimeout+0xb2>
 8008e3e:	68bb      	ldr	r3, [r7, #8]
 8008e40:	2b80      	cmp	r3, #128	@ 0x80
 8008e42:	d034      	beq.n	8008eae <UART_WaitOnFlagUntilTimeout+0xb2>
 8008e44:	68bb      	ldr	r3, [r7, #8]
 8008e46:	2b40      	cmp	r3, #64	@ 0x40
 8008e48:	d031      	beq.n	8008eae <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	69db      	ldr	r3, [r3, #28]
 8008e50:	f003 0308 	and.w	r3, r3, #8
 8008e54:	2b08      	cmp	r3, #8
 8008e56:	d110      	bne.n	8008e7a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	2208      	movs	r2, #8
 8008e5e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008e60:	68f8      	ldr	r0, [r7, #12]
 8008e62:	f000 f879 	bl	8008f58 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	2208      	movs	r2, #8
 8008e6a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	2200      	movs	r2, #0
 8008e72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008e76:	2301      	movs	r3, #1
 8008e78:	e029      	b.n	8008ece <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	69db      	ldr	r3, [r3, #28]
 8008e80:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008e84:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008e88:	d111      	bne.n	8008eae <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008e92:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008e94:	68f8      	ldr	r0, [r7, #12]
 8008e96:	f000 f85f 	bl	8008f58 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	2220      	movs	r2, #32
 8008e9e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008eaa:	2303      	movs	r3, #3
 8008eac:	e00f      	b.n	8008ece <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	69da      	ldr	r2, [r3, #28]
 8008eb4:	68bb      	ldr	r3, [r7, #8]
 8008eb6:	4013      	ands	r3, r2
 8008eb8:	68ba      	ldr	r2, [r7, #8]
 8008eba:	429a      	cmp	r2, r3
 8008ebc:	bf0c      	ite	eq
 8008ebe:	2301      	moveq	r3, #1
 8008ec0:	2300      	movne	r3, #0
 8008ec2:	b2db      	uxtb	r3, r3
 8008ec4:	461a      	mov	r2, r3
 8008ec6:	79fb      	ldrb	r3, [r7, #7]
 8008ec8:	429a      	cmp	r2, r3
 8008eca:	d0a0      	beq.n	8008e0e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008ecc:	2300      	movs	r3, #0
}
 8008ece:	4618      	mov	r0, r3
 8008ed0:	3710      	adds	r7, #16
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	bd80      	pop	{r7, pc}

08008ed6 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008ed6:	b480      	push	{r7}
 8008ed8:	b08f      	sub	sp, #60	@ 0x3c
 8008eda:	af00      	add	r7, sp, #0
 8008edc:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ee4:	6a3b      	ldr	r3, [r7, #32]
 8008ee6:	e853 3f00 	ldrex	r3, [r3]
 8008eea:	61fb      	str	r3, [r7, #28]
   return(result);
 8008eec:	69fb      	ldr	r3, [r7, #28]
 8008eee:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8008ef2:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	461a      	mov	r2, r3
 8008efa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008efc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008efe:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f00:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008f02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008f04:	e841 2300 	strex	r3, r2, [r1]
 8008f08:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d1e6      	bne.n	8008ede <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	3308      	adds	r3, #8
 8008f16:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	e853 3f00 	ldrex	r3, [r3]
 8008f1e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008f20:	68bb      	ldr	r3, [r7, #8]
 8008f22:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8008f26:	633b      	str	r3, [r7, #48]	@ 0x30
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	3308      	adds	r3, #8
 8008f2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008f30:	61ba      	str	r2, [r7, #24]
 8008f32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f34:	6979      	ldr	r1, [r7, #20]
 8008f36:	69ba      	ldr	r2, [r7, #24]
 8008f38:	e841 2300 	strex	r3, r2, [r1]
 8008f3c:	613b      	str	r3, [r7, #16]
   return(result);
 8008f3e:	693b      	ldr	r3, [r7, #16]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d1e5      	bne.n	8008f10 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	2220      	movs	r2, #32
 8008f48:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8008f4c:	bf00      	nop
 8008f4e:	373c      	adds	r7, #60	@ 0x3c
 8008f50:	46bd      	mov	sp, r7
 8008f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f56:	4770      	bx	lr

08008f58 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008f58:	b480      	push	{r7}
 8008f5a:	b095      	sub	sp, #84	@ 0x54
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f68:	e853 3f00 	ldrex	r3, [r3]
 8008f6c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008f6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f70:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008f74:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	461a      	mov	r2, r3
 8008f7c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008f7e:	643b      	str	r3, [r7, #64]	@ 0x40
 8008f80:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f82:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008f84:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008f86:	e841 2300 	strex	r3, r2, [r1]
 8008f8a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008f8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d1e6      	bne.n	8008f60 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	3308      	adds	r3, #8
 8008f98:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f9a:	6a3b      	ldr	r3, [r7, #32]
 8008f9c:	e853 3f00 	ldrex	r3, [r3]
 8008fa0:	61fb      	str	r3, [r7, #28]
   return(result);
 8008fa2:	69fb      	ldr	r3, [r7, #28]
 8008fa4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008fa8:	f023 0301 	bic.w	r3, r3, #1
 8008fac:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	3308      	adds	r3, #8
 8008fb4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008fb6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008fb8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008fbc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008fbe:	e841 2300 	strex	r3, r2, [r1]
 8008fc2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d1e3      	bne.n	8008f92 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008fce:	2b01      	cmp	r3, #1
 8008fd0:	d118      	bne.n	8009004 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	e853 3f00 	ldrex	r3, [r3]
 8008fde:	60bb      	str	r3, [r7, #8]
   return(result);
 8008fe0:	68bb      	ldr	r3, [r7, #8]
 8008fe2:	f023 0310 	bic.w	r3, r3, #16
 8008fe6:	647b      	str	r3, [r7, #68]	@ 0x44
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	461a      	mov	r2, r3
 8008fee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008ff0:	61bb      	str	r3, [r7, #24]
 8008ff2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ff4:	6979      	ldr	r1, [r7, #20]
 8008ff6:	69ba      	ldr	r2, [r7, #24]
 8008ff8:	e841 2300 	strex	r3, r2, [r1]
 8008ffc:	613b      	str	r3, [r7, #16]
   return(result);
 8008ffe:	693b      	ldr	r3, [r7, #16]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d1e6      	bne.n	8008fd2 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2220      	movs	r2, #32
 8009008:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2200      	movs	r2, #0
 8009010:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	2200      	movs	r2, #0
 8009016:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009018:	bf00      	nop
 800901a:	3754      	adds	r7, #84	@ 0x54
 800901c:	46bd      	mov	sp, r7
 800901e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009022:	4770      	bx	lr

08009024 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009024:	b580      	push	{r7, lr}
 8009026:	b090      	sub	sp, #64	@ 0x40
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009030:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	f003 0320 	and.w	r3, r3, #32
 800903c:	2b00      	cmp	r3, #0
 800903e:	d137      	bne.n	80090b0 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8009040:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009042:	2200      	movs	r2, #0
 8009044:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009048:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	3308      	adds	r3, #8
 800904e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009052:	e853 3f00 	ldrex	r3, [r3]
 8009056:	623b      	str	r3, [r7, #32]
   return(result);
 8009058:	6a3b      	ldr	r3, [r7, #32]
 800905a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800905e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009060:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	3308      	adds	r3, #8
 8009066:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009068:	633a      	str	r2, [r7, #48]	@ 0x30
 800906a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800906c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800906e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009070:	e841 2300 	strex	r3, r2, [r1]
 8009074:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009076:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009078:	2b00      	cmp	r3, #0
 800907a:	d1e5      	bne.n	8009048 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800907c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009082:	693b      	ldr	r3, [r7, #16]
 8009084:	e853 3f00 	ldrex	r3, [r3]
 8009088:	60fb      	str	r3, [r7, #12]
   return(result);
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009090:	637b      	str	r3, [r7, #52]	@ 0x34
 8009092:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	461a      	mov	r2, r3
 8009098:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800909a:	61fb      	str	r3, [r7, #28]
 800909c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800909e:	69b9      	ldr	r1, [r7, #24]
 80090a0:	69fa      	ldr	r2, [r7, #28]
 80090a2:	e841 2300 	strex	r3, r2, [r1]
 80090a6:	617b      	str	r3, [r7, #20]
   return(result);
 80090a8:	697b      	ldr	r3, [r7, #20]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d1e6      	bne.n	800907c <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80090ae:	e002      	b.n	80090b6 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80090b0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80090b2:	f7f9 f939 	bl	8002328 <HAL_UART_TxCpltCallback>
}
 80090b6:	bf00      	nop
 80090b8:	3740      	adds	r7, #64	@ 0x40
 80090ba:	46bd      	mov	sp, r7
 80090bc:	bd80      	pop	{r7, pc}

080090be <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80090be:	b580      	push	{r7, lr}
 80090c0:	b084      	sub	sp, #16
 80090c2:	af00      	add	r7, sp, #0
 80090c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090ca:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80090cc:	68f8      	ldr	r0, [r7, #12]
 80090ce:	f7ff fb01 	bl	80086d4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80090d2:	bf00      	nop
 80090d4:	3710      	adds	r7, #16
 80090d6:	46bd      	mov	sp, r7
 80090d8:	bd80      	pop	{r7, pc}

080090da <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80090da:	b580      	push	{r7, lr}
 80090dc:	b086      	sub	sp, #24
 80090de:	af00      	add	r7, sp, #0
 80090e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090e6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80090e8:	697b      	ldr	r3, [r7, #20]
 80090ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80090ee:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80090f0:	697b      	ldr	r3, [r7, #20]
 80090f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80090f6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80090f8:	697b      	ldr	r3, [r7, #20]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	689b      	ldr	r3, [r3, #8]
 80090fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009102:	2b80      	cmp	r3, #128	@ 0x80
 8009104:	d109      	bne.n	800911a <UART_DMAError+0x40>
 8009106:	693b      	ldr	r3, [r7, #16]
 8009108:	2b21      	cmp	r3, #33	@ 0x21
 800910a:	d106      	bne.n	800911a <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800910c:	697b      	ldr	r3, [r7, #20]
 800910e:	2200      	movs	r2, #0
 8009110:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8009114:	6978      	ldr	r0, [r7, #20]
 8009116:	f7ff fede 	bl	8008ed6 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800911a:	697b      	ldr	r3, [r7, #20]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	689b      	ldr	r3, [r3, #8]
 8009120:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009124:	2b40      	cmp	r3, #64	@ 0x40
 8009126:	d109      	bne.n	800913c <UART_DMAError+0x62>
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	2b22      	cmp	r3, #34	@ 0x22
 800912c:	d106      	bne.n	800913c <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800912e:	697b      	ldr	r3, [r7, #20]
 8009130:	2200      	movs	r2, #0
 8009132:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8009136:	6978      	ldr	r0, [r7, #20]
 8009138:	f7ff ff0e 	bl	8008f58 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800913c:	697b      	ldr	r3, [r7, #20]
 800913e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009142:	f043 0210 	orr.w	r2, r3, #16
 8009146:	697b      	ldr	r3, [r7, #20]
 8009148:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800914c:	6978      	ldr	r0, [r7, #20]
 800914e:	f7ff facb 	bl	80086e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009152:	bf00      	nop
 8009154:	3718      	adds	r7, #24
 8009156:	46bd      	mov	sp, r7
 8009158:	bd80      	pop	{r7, pc}

0800915a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800915a:	b580      	push	{r7, lr}
 800915c:	b084      	sub	sp, #16
 800915e:	af00      	add	r7, sp, #0
 8009160:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009166:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	2200      	movs	r2, #0
 800916c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	2200      	movs	r2, #0
 8009174:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009178:	68f8      	ldr	r0, [r7, #12]
 800917a:	f7ff fab5 	bl	80086e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800917e:	bf00      	nop
 8009180:	3710      	adds	r7, #16
 8009182:	46bd      	mov	sp, r7
 8009184:	bd80      	pop	{r7, pc}

08009186 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009186:	b580      	push	{r7, lr}
 8009188:	b088      	sub	sp, #32
 800918a:	af00      	add	r7, sp, #0
 800918c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	e853 3f00 	ldrex	r3, [r3]
 800919a:	60bb      	str	r3, [r7, #8]
   return(result);
 800919c:	68bb      	ldr	r3, [r7, #8]
 800919e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80091a2:	61fb      	str	r3, [r7, #28]
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	461a      	mov	r2, r3
 80091aa:	69fb      	ldr	r3, [r7, #28]
 80091ac:	61bb      	str	r3, [r7, #24]
 80091ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091b0:	6979      	ldr	r1, [r7, #20]
 80091b2:	69ba      	ldr	r2, [r7, #24]
 80091b4:	e841 2300 	strex	r3, r2, [r1]
 80091b8:	613b      	str	r3, [r7, #16]
   return(result);
 80091ba:	693b      	ldr	r3, [r7, #16]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d1e6      	bne.n	800918e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	2220      	movs	r2, #32
 80091c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	2200      	movs	r2, #0
 80091cc:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80091ce:	6878      	ldr	r0, [r7, #4]
 80091d0:	f7f9 f8aa 	bl	8002328 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80091d4:	bf00      	nop
 80091d6:	3720      	adds	r7, #32
 80091d8:	46bd      	mov	sp, r7
 80091da:	bd80      	pop	{r7, pc}

080091dc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80091dc:	b480      	push	{r7}
 80091de:	b083      	sub	sp, #12
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80091e4:	bf00      	nop
 80091e6:	370c      	adds	r7, #12
 80091e8:	46bd      	mov	sp, r7
 80091ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ee:	4770      	bx	lr

080091f0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80091f0:	b480      	push	{r7}
 80091f2:	b083      	sub	sp, #12
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80091f8:	bf00      	nop
 80091fa:	370c      	adds	r7, #12
 80091fc:	46bd      	mov	sp, r7
 80091fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009202:	4770      	bx	lr

08009204 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009204:	b480      	push	{r7}
 8009206:	b083      	sub	sp, #12
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800920c:	bf00      	nop
 800920e:	370c      	adds	r7, #12
 8009210:	46bd      	mov	sp, r7
 8009212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009216:	4770      	bx	lr

08009218 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009218:	b480      	push	{r7}
 800921a:	b085      	sub	sp, #20
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009226:	2b01      	cmp	r3, #1
 8009228:	d101      	bne.n	800922e <HAL_UARTEx_DisableFifoMode+0x16>
 800922a:	2302      	movs	r3, #2
 800922c:	e027      	b.n	800927e <HAL_UARTEx_DisableFifoMode+0x66>
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	2201      	movs	r2, #1
 8009232:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	2224      	movs	r2, #36	@ 0x24
 800923a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	681a      	ldr	r2, [r3, #0]
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	f022 0201 	bic.w	r2, r2, #1
 8009254:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800925c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	2200      	movs	r2, #0
 8009262:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	68fa      	ldr	r2, [r7, #12]
 800926a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	2220      	movs	r2, #32
 8009270:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	2200      	movs	r2, #0
 8009278:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800927c:	2300      	movs	r3, #0
}
 800927e:	4618      	mov	r0, r3
 8009280:	3714      	adds	r7, #20
 8009282:	46bd      	mov	sp, r7
 8009284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009288:	4770      	bx	lr

0800928a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800928a:	b580      	push	{r7, lr}
 800928c:	b084      	sub	sp, #16
 800928e:	af00      	add	r7, sp, #0
 8009290:	6078      	str	r0, [r7, #4]
 8009292:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800929a:	2b01      	cmp	r3, #1
 800929c:	d101      	bne.n	80092a2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800929e:	2302      	movs	r3, #2
 80092a0:	e02d      	b.n	80092fe <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	2201      	movs	r2, #1
 80092a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	2224      	movs	r2, #36	@ 0x24
 80092ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	681a      	ldr	r2, [r3, #0]
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	f022 0201 	bic.w	r2, r2, #1
 80092c8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	689b      	ldr	r3, [r3, #8]
 80092d0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	683a      	ldr	r2, [r7, #0]
 80092da:	430a      	orrs	r2, r1
 80092dc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80092de:	6878      	ldr	r0, [r7, #4]
 80092e0:	f000 f850 	bl	8009384 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	68fa      	ldr	r2, [r7, #12]
 80092ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	2220      	movs	r2, #32
 80092f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	2200      	movs	r2, #0
 80092f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80092fc:	2300      	movs	r3, #0
}
 80092fe:	4618      	mov	r0, r3
 8009300:	3710      	adds	r7, #16
 8009302:	46bd      	mov	sp, r7
 8009304:	bd80      	pop	{r7, pc}

08009306 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009306:	b580      	push	{r7, lr}
 8009308:	b084      	sub	sp, #16
 800930a:	af00      	add	r7, sp, #0
 800930c:	6078      	str	r0, [r7, #4]
 800930e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009316:	2b01      	cmp	r3, #1
 8009318:	d101      	bne.n	800931e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800931a:	2302      	movs	r3, #2
 800931c:	e02d      	b.n	800937a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	2201      	movs	r2, #1
 8009322:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	2224      	movs	r2, #36	@ 0x24
 800932a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	681a      	ldr	r2, [r3, #0]
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	f022 0201 	bic.w	r2, r2, #1
 8009344:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	689b      	ldr	r3, [r3, #8]
 800934c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	683a      	ldr	r2, [r7, #0]
 8009356:	430a      	orrs	r2, r1
 8009358:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800935a:	6878      	ldr	r0, [r7, #4]
 800935c:	f000 f812 	bl	8009384 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	68fa      	ldr	r2, [r7, #12]
 8009366:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	2220      	movs	r2, #32
 800936c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	2200      	movs	r2, #0
 8009374:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009378:	2300      	movs	r3, #0
}
 800937a:	4618      	mov	r0, r3
 800937c:	3710      	adds	r7, #16
 800937e:	46bd      	mov	sp, r7
 8009380:	bd80      	pop	{r7, pc}
	...

08009384 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009384:	b480      	push	{r7}
 8009386:	b085      	sub	sp, #20
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009390:	2b00      	cmp	r3, #0
 8009392:	d108      	bne.n	80093a6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	2201      	movs	r2, #1
 8009398:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	2201      	movs	r2, #1
 80093a0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80093a4:	e031      	b.n	800940a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80093a6:	2308      	movs	r3, #8
 80093a8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80093aa:	2308      	movs	r3, #8
 80093ac:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	689b      	ldr	r3, [r3, #8]
 80093b4:	0e5b      	lsrs	r3, r3, #25
 80093b6:	b2db      	uxtb	r3, r3
 80093b8:	f003 0307 	and.w	r3, r3, #7
 80093bc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	689b      	ldr	r3, [r3, #8]
 80093c4:	0f5b      	lsrs	r3, r3, #29
 80093c6:	b2db      	uxtb	r3, r3
 80093c8:	f003 0307 	and.w	r3, r3, #7
 80093cc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80093ce:	7bbb      	ldrb	r3, [r7, #14]
 80093d0:	7b3a      	ldrb	r2, [r7, #12]
 80093d2:	4911      	ldr	r1, [pc, #68]	@ (8009418 <UARTEx_SetNbDataToProcess+0x94>)
 80093d4:	5c8a      	ldrb	r2, [r1, r2]
 80093d6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80093da:	7b3a      	ldrb	r2, [r7, #12]
 80093dc:	490f      	ldr	r1, [pc, #60]	@ (800941c <UARTEx_SetNbDataToProcess+0x98>)
 80093de:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80093e0:	fb93 f3f2 	sdiv	r3, r3, r2
 80093e4:	b29a      	uxth	r2, r3
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80093ec:	7bfb      	ldrb	r3, [r7, #15]
 80093ee:	7b7a      	ldrb	r2, [r7, #13]
 80093f0:	4909      	ldr	r1, [pc, #36]	@ (8009418 <UARTEx_SetNbDataToProcess+0x94>)
 80093f2:	5c8a      	ldrb	r2, [r1, r2]
 80093f4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80093f8:	7b7a      	ldrb	r2, [r7, #13]
 80093fa:	4908      	ldr	r1, [pc, #32]	@ (800941c <UARTEx_SetNbDataToProcess+0x98>)
 80093fc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80093fe:	fb93 f3f2 	sdiv	r3, r3, r2
 8009402:	b29a      	uxth	r2, r3
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800940a:	bf00      	nop
 800940c:	3714      	adds	r7, #20
 800940e:	46bd      	mov	sp, r7
 8009410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009414:	4770      	bx	lr
 8009416:	bf00      	nop
 8009418:	08010d18 	.word	0x08010d18
 800941c:	08010d20 	.word	0x08010d20

08009420 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b088      	sub	sp, #32
 8009424:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8009426:	2300      	movs	r3, #0
 8009428:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800942a:	f107 0308 	add.w	r3, r7, #8
 800942e:	2218      	movs	r2, #24
 8009430:	2100      	movs	r1, #0
 8009432:	4618      	mov	r0, r3
 8009434:	f001 f9ff 	bl	800a836 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009438:	233f      	movs	r3, #63	@ 0x3f
 800943a:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 800943c:	2381      	movs	r3, #129	@ 0x81
 800943e:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8009440:	1dfb      	adds	r3, r7, #7
 8009442:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8009444:	2301      	movs	r3, #1
 8009446:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009448:	f107 0308 	add.w	r3, r7, #8
 800944c:	2100      	movs	r1, #0
 800944e:	4618      	mov	r0, r3
 8009450:	f001 fc7a 	bl	800ad48 <hci_send_req>
 8009454:	4603      	mov	r3, r0
 8009456:	2b00      	cmp	r3, #0
 8009458:	da01      	bge.n	800945e <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 800945a:	23ff      	movs	r3, #255	@ 0xff
 800945c:	e000      	b.n	8009460 <aci_gap_set_non_discoverable+0x40>
  return status;
 800945e:	79fb      	ldrb	r3, [r7, #7]
}
 8009460:	4618      	mov	r0, r3
 8009462:	3720      	adds	r7, #32
 8009464:	46bd      	mov	sp, r7
 8009466:	bd80      	pop	{r7, pc}

08009468 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 8009468:	b5b0      	push	{r4, r5, r7, lr}
 800946a:	b0ce      	sub	sp, #312	@ 0x138
 800946c:	af00      	add	r7, sp, #0
 800946e:	4605      	mov	r5, r0
 8009470:	460c      	mov	r4, r1
 8009472:	4610      	mov	r0, r2
 8009474:	4619      	mov	r1, r3
 8009476:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800947a:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800947e:	462a      	mov	r2, r5
 8009480:	701a      	strb	r2, [r3, #0]
 8009482:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009486:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800948a:	4622      	mov	r2, r4
 800948c:	801a      	strh	r2, [r3, #0]
 800948e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009492:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 8009496:	4602      	mov	r2, r0
 8009498:	801a      	strh	r2, [r3, #0]
 800949a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800949e:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 80094a2:	460a      	mov	r2, r1
 80094a4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 80094a6:	f107 0310 	add.w	r3, r7, #16
 80094aa:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 80094ae:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 80094b2:	3308      	adds	r3, #8
 80094b4:	f107 0210 	add.w	r2, r7, #16
 80094b8:	4413      	add	r3, r2
 80094ba:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 80094be:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 80094c2:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 80094c6:	4413      	add	r3, r2
 80094c8:	3309      	adds	r3, #9
 80094ca:	f107 0210 	add.w	r2, r7, #16
 80094ce:	4413      	add	r3, r2
 80094d0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80094d4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80094d8:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80094dc:	2200      	movs	r2, #0
 80094de:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80094e0:	2300      	movs	r3, #0
 80094e2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Type = Advertising_Type;
 80094e6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80094ea:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80094ee:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 80094f2:	7812      	ldrb	r2, [r2, #0]
 80094f4:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80094f6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80094fa:	3301      	adds	r3, #1
 80094fc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 8009500:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8009504:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8009508:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 800950c:	8812      	ldrh	r2, [r2, #0]
 800950e:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8009512:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009516:	3302      	adds	r3, #2
 8009518:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 800951c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8009520:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8009524:	f5a2 729b 	sub.w	r2, r2, #310	@ 0x136
 8009528:	8812      	ldrh	r2, [r2, #0]
 800952a:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 800952e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009532:	3302      	adds	r3, #2
 8009534:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 8009538:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800953c:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8009540:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8009544:	7812      	ldrb	r2, [r2, #0]
 8009546:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8009548:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800954c:	3301      	adds	r3, #1
 800954e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 8009552:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8009556:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 800955a:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800955c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009560:	3301      	adds	r3, #1
 8009562:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 8009566:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800956a:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 800956e:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8009570:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009574:	3301      	adds	r3, #1
 8009576:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 800957a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800957e:	3308      	adds	r3, #8
 8009580:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8009584:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 8009588:	4618      	mov	r0, r3
 800958a:	f001 f944 	bl	800a816 <Osal_MemCpy>
    index_input += Local_Name_Length;
 800958e:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 8009592:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8009596:	4413      	add	r3, r2
 8009598:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 800959c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80095a0:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 80095a4:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 80095a6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80095aa:	3301      	adds	r3, #1
 80095ac:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 80095b0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80095b4:	3301      	adds	r3, #1
 80095b6:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 80095ba:	f8d7 1158 	ldr.w	r1, [r7, #344]	@ 0x158
 80095be:	4618      	mov	r0, r3
 80095c0:	f001 f929 	bl	800a816 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 80095c4:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 80095c8:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 80095cc:	4413      	add	r3, r2
 80095ce:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 80095d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80095d6:	f8b7 215c 	ldrh.w	r2, [r7, #348]	@ 0x15c
 80095da:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 80095dc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80095e0:	3302      	adds	r3, #2
 80095e2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 80095e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80095ea:	f8b7 2160 	ldrh.w	r2, [r7, #352]	@ 0x160
 80095ee:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 80095f0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80095f4:	3302      	adds	r3, #2
 80095f6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80095fa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80095fe:	2218      	movs	r2, #24
 8009600:	2100      	movs	r1, #0
 8009602:	4618      	mov	r0, r3
 8009604:	f001 f917 	bl	800a836 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009608:	233f      	movs	r3, #63	@ 0x3f
 800960a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x083;
 800960e:	2383      	movs	r3, #131	@ 0x83
 8009610:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8009614:	f107 0310 	add.w	r3, r7, #16
 8009618:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800961c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009620:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8009624:	f107 030f 	add.w	r3, r7, #15
 8009628:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800962c:	2301      	movs	r3, #1
 800962e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009632:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009636:	2100      	movs	r1, #0
 8009638:	4618      	mov	r0, r3
 800963a:	f001 fb85 	bl	800ad48 <hci_send_req>
 800963e:	4603      	mov	r3, r0
 8009640:	2b00      	cmp	r3, #0
 8009642:	da01      	bge.n	8009648 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 8009644:	23ff      	movs	r3, #255	@ 0xff
 8009646:	e004      	b.n	8009652 <aci_gap_set_discoverable+0x1ea>
  return status;
 8009648:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800964c:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8009650:	781b      	ldrb	r3, [r3, #0]
}
 8009652:	4618      	mov	r0, r3
 8009654:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 8009658:	46bd      	mov	sp, r7
 800965a:	bdb0      	pop	{r4, r5, r7, pc}

0800965c <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b0cc      	sub	sp, #304	@ 0x130
 8009660:	af00      	add	r7, sp, #0
 8009662:	4602      	mov	r2, r0
 8009664:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009668:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800966c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 800966e:	f107 0310 	add.w	r3, r7, #16
 8009672:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8009676:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800967a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800967e:	2200      	movs	r2, #0
 8009680:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009682:	2300      	movs	r3, #0
 8009684:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->IO_Capability = IO_Capability;
 8009688:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800968c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009690:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8009694:	7812      	ldrb	r2, [r2, #0]
 8009696:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009698:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800969c:	3301      	adds	r3, #1
 800969e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80096a2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80096a6:	2218      	movs	r2, #24
 80096a8:	2100      	movs	r1, #0
 80096aa:	4618      	mov	r0, r3
 80096ac:	f001 f8c3 	bl	800a836 <Osal_MemSet>
  rq.ogf = 0x3f;
 80096b0:	233f      	movs	r3, #63	@ 0x3f
 80096b2:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x085;
 80096b6:	2385      	movs	r3, #133	@ 0x85
 80096b8:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80096bc:	f107 0310 	add.w	r3, r7, #16
 80096c0:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80096c4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80096c8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80096cc:	f107 030f 	add.w	r3, r7, #15
 80096d0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80096d4:	2301      	movs	r3, #1
 80096d6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80096da:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80096de:	2100      	movs	r1, #0
 80096e0:	4618      	mov	r0, r3
 80096e2:	f001 fb31 	bl	800ad48 <hci_send_req>
 80096e6:	4603      	mov	r3, r0
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	da01      	bge.n	80096f0 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 80096ec:	23ff      	movs	r3, #255	@ 0xff
 80096ee:	e004      	b.n	80096fa <aci_gap_set_io_capability+0x9e>
  return status;
 80096f0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80096f4:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80096f8:	781b      	ldrb	r3, [r3, #0]
}
 80096fa:	4618      	mov	r0, r3
 80096fc:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8009700:	46bd      	mov	sp, r7
 8009702:	bd80      	pop	{r7, pc}

08009704 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 8009704:	b5b0      	push	{r4, r5, r7, lr}
 8009706:	b0cc      	sub	sp, #304	@ 0x130
 8009708:	af00      	add	r7, sp, #0
 800970a:	4605      	mov	r5, r0
 800970c:	460c      	mov	r4, r1
 800970e:	4610      	mov	r0, r2
 8009710:	4619      	mov	r1, r3
 8009712:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009716:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800971a:	462a      	mov	r2, r5
 800971c:	701a      	strb	r2, [r3, #0]
 800971e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009722:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8009726:	4622      	mov	r2, r4
 8009728:	701a      	strb	r2, [r3, #0]
 800972a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800972e:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8009732:	4602      	mov	r2, r0
 8009734:	701a      	strb	r2, [r3, #0]
 8009736:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800973a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800973e:	460a      	mov	r2, r1
 8009740:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 8009742:	f107 0310 	add.w	r3, r7, #16
 8009746:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800974a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800974e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009752:	2200      	movs	r2, #0
 8009754:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009756:	2300      	movs	r3, #0
 8009758:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 800975c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009760:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009764:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8009768:	7812      	ldrb	r2, [r2, #0]
 800976a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800976c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009770:	3301      	adds	r3, #1
 8009772:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->MITM_Mode = MITM_Mode;
 8009776:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800977a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800977e:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8009782:	7812      	ldrb	r2, [r2, #0]
 8009784:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8009786:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800978a:	3301      	adds	r3, #1
 800978c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->SC_Support = SC_Support;
 8009790:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009794:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009798:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800979c:	7812      	ldrb	r2, [r2, #0]
 800979e:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80097a0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80097a4:	3301      	adds	r3, #1
 80097a6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 80097aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80097ae:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80097b2:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 80097b6:	7812      	ldrb	r2, [r2, #0]
 80097b8:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 80097ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80097be:	3301      	adds	r3, #1
 80097c0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 80097c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80097c8:	f897 2140 	ldrb.w	r2, [r7, #320]	@ 0x140
 80097cc:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80097ce:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80097d2:	3301      	adds	r3, #1
 80097d4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 80097d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80097dc:	f897 2144 	ldrb.w	r2, [r7, #324]	@ 0x144
 80097e0:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80097e2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80097e6:	3301      	adds	r3, #1
 80097e8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 80097ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80097f0:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 80097f4:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 80097f6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80097fa:	3301      	adds	r3, #1
 80097fc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 8009800:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009804:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8009808:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 800980c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009810:	3304      	adds	r3, #4
 8009812:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 8009816:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800981a:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 800981e:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8009820:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009824:	3301      	adds	r3, #1
 8009826:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800982a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800982e:	2218      	movs	r2, #24
 8009830:	2100      	movs	r1, #0
 8009832:	4618      	mov	r0, r3
 8009834:	f000 ffff 	bl	800a836 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009838:	233f      	movs	r3, #63	@ 0x3f
 800983a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x086;
 800983e:	2386      	movs	r3, #134	@ 0x86
 8009840:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8009844:	f107 0310 	add.w	r3, r7, #16
 8009848:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800984c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009850:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8009854:	f107 030f 	add.w	r3, r7, #15
 8009858:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800985c:	2301      	movs	r3, #1
 800985e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009862:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009866:	2100      	movs	r1, #0
 8009868:	4618      	mov	r0, r3
 800986a:	f001 fa6d 	bl	800ad48 <hci_send_req>
 800986e:	4603      	mov	r3, r0
 8009870:	2b00      	cmp	r3, #0
 8009872:	da01      	bge.n	8009878 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 8009874:	23ff      	movs	r3, #255	@ 0xff
 8009876:	e004      	b.n	8009882 <aci_gap_set_authentication_requirement+0x17e>
  return status;
 8009878:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800987c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009880:	781b      	ldrb	r3, [r3, #0]
}
 8009882:	4618      	mov	r0, r3
 8009884:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8009888:	46bd      	mov	sp, r7
 800988a:	bdb0      	pop	{r4, r5, r7, pc}

0800988c <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 800988c:	b580      	push	{r7, lr}
 800988e:	b0cc      	sub	sp, #304	@ 0x130
 8009890:	af00      	add	r7, sp, #0
 8009892:	4602      	mov	r2, r0
 8009894:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009898:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800989c:	6019      	str	r1, [r3, #0]
 800989e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80098a2:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80098a6:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 80098a8:	f107 0310 	add.w	r3, r7, #16
 80098ac:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80098b0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80098b4:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80098b8:	2200      	movs	r2, #0
 80098ba:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80098bc:	2300      	movs	r3, #0
 80098be:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 80098c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80098c6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80098ca:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80098ce:	8812      	ldrh	r2, [r2, #0]
 80098d0:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80098d2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80098d6:	3302      	adds	r3, #2
 80098d8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Pass_Key = Pass_Key;
 80098dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80098e0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80098e4:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 80098e8:	6812      	ldr	r2, [r2, #0]
 80098ea:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 80098ee:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80098f2:	3304      	adds	r3, #4
 80098f4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80098f8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80098fc:	2218      	movs	r2, #24
 80098fe:	2100      	movs	r1, #0
 8009900:	4618      	mov	r0, r3
 8009902:	f000 ff98 	bl	800a836 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009906:	233f      	movs	r3, #63	@ 0x3f
 8009908:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x088;
 800990c:	2388      	movs	r3, #136	@ 0x88
 800990e:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8009912:	f107 0310 	add.w	r3, r7, #16
 8009916:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800991a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800991e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8009922:	f107 030f 	add.w	r3, r7, #15
 8009926:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800992a:	2301      	movs	r3, #1
 800992c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009930:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009934:	2100      	movs	r1, #0
 8009936:	4618      	mov	r0, r3
 8009938:	f001 fa06 	bl	800ad48 <hci_send_req>
 800993c:	4603      	mov	r3, r0
 800993e:	2b00      	cmp	r3, #0
 8009940:	da01      	bge.n	8009946 <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 8009942:	23ff      	movs	r3, #255	@ 0xff
 8009944:	e004      	b.n	8009950 <aci_gap_pass_key_resp+0xc4>
  return status;
 8009946:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800994a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800994e:	781b      	ldrb	r3, [r3, #0]
}
 8009950:	4618      	mov	r0, r3
 8009952:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8009956:	46bd      	mov	sp, r7
 8009958:	bd80      	pop	{r7, pc}

0800995a <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 800995a:	b590      	push	{r4, r7, lr}
 800995c:	b0cd      	sub	sp, #308	@ 0x134
 800995e:	af00      	add	r7, sp, #0
 8009960:	4604      	mov	r4, r0
 8009962:	4608      	mov	r0, r1
 8009964:	4611      	mov	r1, r2
 8009966:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800996a:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 800996e:	6013      	str	r3, [r2, #0]
 8009970:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009974:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8009978:	4622      	mov	r2, r4
 800997a:	701a      	strb	r2, [r3, #0]
 800997c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009980:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8009984:	4602      	mov	r2, r0
 8009986:	701a      	strb	r2, [r3, #0]
 8009988:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800998c:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8009990:	460a      	mov	r2, r1
 8009992:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8009994:	f107 0310 	add.w	r3, r7, #16
 8009998:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800999c:	f107 0308 	add.w	r3, r7, #8
 80099a0:	2207      	movs	r2, #7
 80099a2:	2100      	movs	r1, #0
 80099a4:	4618      	mov	r0, r3
 80099a6:	f000 ff46 	bl	800a836 <Osal_MemSet>
  int index_input = 0;
 80099aa:	2300      	movs	r3, #0
 80099ac:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Role = Role;
 80099b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80099b4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80099b8:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 80099bc:	7812      	ldrb	r2, [r2, #0]
 80099be:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80099c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80099c4:	3301      	adds	r3, #1
 80099c6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->privacy_enabled = privacy_enabled;
 80099ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80099ce:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80099d2:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80099d6:	7812      	ldrb	r2, [r2, #0]
 80099d8:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80099da:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80099de:	3301      	adds	r3, #1
 80099e0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->device_name_char_len = device_name_char_len;
 80099e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80099e8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80099ec:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 80099f0:	7812      	ldrb	r2, [r2, #0]
 80099f2:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80099f4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80099f8:	3301      	adds	r3, #1
 80099fa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80099fe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009a02:	2218      	movs	r2, #24
 8009a04:	2100      	movs	r1, #0
 8009a06:	4618      	mov	r0, r3
 8009a08:	f000 ff15 	bl	800a836 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009a0c:	233f      	movs	r3, #63	@ 0x3f
 8009a0e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08a;
 8009a12:	238a      	movs	r3, #138	@ 0x8a
 8009a14:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8009a18:	f107 0310 	add.w	r3, r7, #16
 8009a1c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8009a20:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009a24:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 8009a28:	f107 0308 	add.w	r3, r7, #8
 8009a2c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 8009a30:	2307      	movs	r3, #7
 8009a32:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009a36:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009a3a:	2100      	movs	r1, #0
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	f001 f983 	bl	800ad48 <hci_send_req>
 8009a42:	4603      	mov	r3, r0
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	da01      	bge.n	8009a4c <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 8009a48:	23ff      	movs	r3, #255	@ 0xff
 8009a4a:	e02e      	b.n	8009aaa <aci_gap_init+0x150>
  if ( resp.Status )
 8009a4c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009a50:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8009a54:	781b      	ldrb	r3, [r3, #0]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d005      	beq.n	8009a66 <aci_gap_init+0x10c>
    return resp.Status;
 8009a5a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009a5e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8009a62:	781b      	ldrb	r3, [r3, #0]
 8009a64:	e021      	b.n	8009aaa <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 8009a66:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009a6a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8009a6e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009a72:	b29a      	uxth	r2, r3
 8009a74:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009a78:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 8009a80:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009a84:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8009a88:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8009a8c:	b29a      	uxth	r2, r3
 8009a8e:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8009a92:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8009a94:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009a98:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8009a9c:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8009aa0:	b29a      	uxth	r2, r3
 8009aa2:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8009aa6:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8009aa8:	2300      	movs	r3, #0
}
 8009aaa:	4618      	mov	r0, r3
 8009aac:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	bd90      	pop	{r4, r7, pc}

08009ab4 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b0cc      	sub	sp, #304	@ 0x130
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	4602      	mov	r2, r0
 8009abc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009ac0:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8009ac4:	6019      	str	r1, [r3, #0]
 8009ac6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009aca:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8009ace:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 8009ad0:	f107 0310 	add.w	r3, r7, #16
 8009ad4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8009ad8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009adc:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->AdvDataLen = AdvDataLen;
 8009aea:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009aee:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009af2:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8009af6:	7812      	ldrb	r2, [r2, #0]
 8009af8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009afa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009afe:	3301      	adds	r3, #1
 8009b00:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 8009b04:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009b08:	1c58      	adds	r0, r3, #1
 8009b0a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009b0e:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8009b12:	781a      	ldrb	r2, [r3, #0]
 8009b14:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009b18:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8009b1c:	6819      	ldr	r1, [r3, #0]
 8009b1e:	f000 fe7a 	bl	800a816 <Osal_MemCpy>
  index_input += AdvDataLen;
 8009b22:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009b26:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8009b2a:	781b      	ldrb	r3, [r3, #0]
 8009b2c:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8009b30:	4413      	add	r3, r2
 8009b32:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009b36:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009b3a:	2218      	movs	r2, #24
 8009b3c:	2100      	movs	r1, #0
 8009b3e:	4618      	mov	r0, r3
 8009b40:	f000 fe79 	bl	800a836 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009b44:	233f      	movs	r3, #63	@ 0x3f
 8009b46:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08e;
 8009b4a:	238e      	movs	r3, #142	@ 0x8e
 8009b4c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8009b50:	f107 0310 	add.w	r3, r7, #16
 8009b54:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8009b58:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009b5c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8009b60:	f107 030f 	add.w	r3, r7, #15
 8009b64:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8009b68:	2301      	movs	r3, #1
 8009b6a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009b6e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009b72:	2100      	movs	r1, #0
 8009b74:	4618      	mov	r0, r3
 8009b76:	f001 f8e7 	bl	800ad48 <hci_send_req>
 8009b7a:	4603      	mov	r3, r0
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	da01      	bge.n	8009b84 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 8009b80:	23ff      	movs	r3, #255	@ 0xff
 8009b82:	e004      	b.n	8009b8e <aci_gap_update_adv_data+0xda>
  return status;
 8009b84:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009b88:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009b8c:	781b      	ldrb	r3, [r3, #0]
}
 8009b8e:	4618      	mov	r0, r3
 8009b90:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8009b94:	46bd      	mov	sp, r7
 8009b96:	bd80      	pop	{r7, pc}

08009b98 <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b088      	sub	sp, #32
 8009b9c:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009ba2:	f107 0308 	add.w	r3, r7, #8
 8009ba6:	2218      	movs	r2, #24
 8009ba8:	2100      	movs	r1, #0
 8009baa:	4618      	mov	r0, r3
 8009bac:	f000 fe43 	bl	800a836 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009bb0:	233f      	movs	r3, #63	@ 0x3f
 8009bb2:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 8009bb4:	2392      	movs	r3, #146	@ 0x92
 8009bb6:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8009bb8:	1dfb      	adds	r3, r7, #7
 8009bba:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8009bbc:	2301      	movs	r3, #1
 8009bbe:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009bc0:	f107 0308 	add.w	r3, r7, #8
 8009bc4:	2100      	movs	r1, #0
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	f001 f8be 	bl	800ad48 <hci_send_req>
 8009bcc:	4603      	mov	r3, r0
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	da01      	bge.n	8009bd6 <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 8009bd2:	23ff      	movs	r3, #255	@ 0xff
 8009bd4:	e000      	b.n	8009bd8 <aci_gap_configure_filter_accept_list+0x40>
  return status;
 8009bd6:	79fb      	ldrb	r3, [r7, #7]
}
 8009bd8:	4618      	mov	r0, r3
 8009bda:	3720      	adds	r7, #32
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	bd80      	pop	{r7, pc}

08009be0 <aci_gap_allow_rebond>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_allow_rebond( uint16_t Connection_Handle )
{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b0cc      	sub	sp, #304	@ 0x130
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	4602      	mov	r2, r0
 8009be8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009bec:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8009bf0:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_allow_rebond_cp0 *cp0 = (aci_gap_allow_rebond_cp0*)(cmd_buffer);
 8009bf2:	f107 0310 	add.w	r3, r7, #16
 8009bf6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8009bfa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009bfe:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009c02:	2200      	movs	r2, #0
 8009c04:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009c06:	2300      	movs	r3, #0
 8009c08:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8009c0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009c10:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009c14:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8009c18:	8812      	ldrh	r2, [r2, #0]
 8009c1a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009c1c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009c20:	3302      	adds	r3, #2
 8009c22:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009c26:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009c2a:	2218      	movs	r2, #24
 8009c2c:	2100      	movs	r1, #0
 8009c2e:	4618      	mov	r0, r3
 8009c30:	f000 fe01 	bl	800a836 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009c34:	233f      	movs	r3, #63	@ 0x3f
 8009c36:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x095;
 8009c3a:	2395      	movs	r3, #149	@ 0x95
 8009c3c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8009c40:	f107 0310 	add.w	r3, r7, #16
 8009c44:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8009c48:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009c4c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8009c50:	f107 030f 	add.w	r3, r7, #15
 8009c54:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8009c58:	2301      	movs	r3, #1
 8009c5a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009c5e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009c62:	2100      	movs	r1, #0
 8009c64:	4618      	mov	r0, r3
 8009c66:	f001 f86f 	bl	800ad48 <hci_send_req>
 8009c6a:	4603      	mov	r3, r0
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	da01      	bge.n	8009c74 <aci_gap_allow_rebond+0x94>
    return BLE_STATUS_TIMEOUT;
 8009c70:	23ff      	movs	r3, #255	@ 0xff
 8009c72:	e004      	b.n	8009c7e <aci_gap_allow_rebond+0x9e>
  return status;
 8009c74:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009c78:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009c7c:	781b      	ldrb	r3, [r3, #0]
}
 8009c7e:	4618      	mov	r0, r3
 8009c80:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8009c84:	46bd      	mov	sp, r7
 8009c86:	bd80      	pop	{r7, pc}

08009c88 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b0cc      	sub	sp, #304	@ 0x130
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	4602      	mov	r2, r0
 8009c90:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009c94:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8009c98:	801a      	strh	r2, [r3, #0]
 8009c9a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009c9e:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8009ca2:	460a      	mov	r2, r1
 8009ca4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 8009ca6:	f107 0310 	add.w	r3, r7, #16
 8009caa:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8009cae:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009cb2:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009cba:	2300      	movs	r3, #0
 8009cbc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8009cc0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009cc4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009cc8:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8009ccc:	8812      	ldrh	r2, [r2, #0]
 8009cce:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009cd0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009cd4:	3302      	adds	r3, #2
 8009cd6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 8009cda:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009cde:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009ce2:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8009ce6:	7812      	ldrb	r2, [r2, #0]
 8009ce8:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8009cea:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009cee:	3301      	adds	r3, #1
 8009cf0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009cf4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009cf8:	2218      	movs	r2, #24
 8009cfa:	2100      	movs	r1, #0
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	f000 fd9a 	bl	800a836 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009d02:	233f      	movs	r3, #63	@ 0x3f
 8009d04:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x0a5;
 8009d08:	23a5      	movs	r3, #165	@ 0xa5
 8009d0a:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8009d0e:	f107 0310 	add.w	r3, r7, #16
 8009d12:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8009d16:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009d1a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8009d1e:	f107 030f 	add.w	r3, r7, #15
 8009d22:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8009d26:	2301      	movs	r3, #1
 8009d28:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009d2c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009d30:	2100      	movs	r1, #0
 8009d32:	4618      	mov	r0, r3
 8009d34:	f001 f808 	bl	800ad48 <hci_send_req>
 8009d38:	4603      	mov	r3, r0
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	da01      	bge.n	8009d42 <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 8009d3e:	23ff      	movs	r3, #255	@ 0xff
 8009d40:	e004      	b.n	8009d4c <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 8009d42:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009d46:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009d4a:	781b      	ldrb	r3, [r3, #0]
}
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8009d52:	46bd      	mov	sp, r7
 8009d54:	bd80      	pop	{r7, pc}

08009d56 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 8009d56:	b580      	push	{r7, lr}
 8009d58:	b088      	sub	sp, #32
 8009d5a:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009d60:	f107 0308 	add.w	r3, r7, #8
 8009d64:	2218      	movs	r2, #24
 8009d66:	2100      	movs	r1, #0
 8009d68:	4618      	mov	r0, r3
 8009d6a:	f000 fd64 	bl	800a836 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009d6e:	233f      	movs	r3, #63	@ 0x3f
 8009d70:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8009d72:	f240 1301 	movw	r3, #257	@ 0x101
 8009d76:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8009d78:	1dfb      	adds	r3, r7, #7
 8009d7a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8009d7c:	2301      	movs	r3, #1
 8009d7e:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009d80:	f107 0308 	add.w	r3, r7, #8
 8009d84:	2100      	movs	r1, #0
 8009d86:	4618      	mov	r0, r3
 8009d88:	f000 ffde 	bl	800ad48 <hci_send_req>
 8009d8c:	4603      	mov	r3, r0
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	da01      	bge.n	8009d96 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8009d92:	23ff      	movs	r3, #255	@ 0xff
 8009d94:	e000      	b.n	8009d98 <aci_gatt_init+0x42>
  return status;
 8009d96:	79fb      	ldrb	r3, [r7, #7]
}
 8009d98:	4618      	mov	r0, r3
 8009d9a:	3720      	adds	r7, #32
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	bd80      	pop	{r7, pc}

08009da0 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 8009da0:	b590      	push	{r4, r7, lr}
 8009da2:	b0cf      	sub	sp, #316	@ 0x13c
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	4604      	mov	r4, r0
 8009da8:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 8009dac:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 8009db0:	6001      	str	r1, [r0, #0]
 8009db2:	4610      	mov	r0, r2
 8009db4:	4619      	mov	r1, r3
 8009db6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009dba:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8009dbe:	4622      	mov	r2, r4
 8009dc0:	701a      	strb	r2, [r3, #0]
 8009dc2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009dc6:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8009dca:	4602      	mov	r2, r0
 8009dcc:	701a      	strb	r2, [r3, #0]
 8009dce:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009dd2:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8009dd6:	460a      	mov	r2, r1
 8009dd8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 8009dda:	f107 0310 	add.w	r3, r7, #16
 8009dde:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8009de2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009de6:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8009dea:	781b      	ldrb	r3, [r3, #0]
 8009dec:	2b01      	cmp	r3, #1
 8009dee:	d00a      	beq.n	8009e06 <aci_gatt_add_service+0x66>
 8009df0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009df4:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8009df8:	781b      	ldrb	r3, [r3, #0]
 8009dfa:	2b02      	cmp	r3, #2
 8009dfc:	d101      	bne.n	8009e02 <aci_gatt_add_service+0x62>
 8009dfe:	2311      	movs	r3, #17
 8009e00:	e002      	b.n	8009e08 <aci_gatt_add_service+0x68>
 8009e02:	2301      	movs	r3, #1
 8009e04:	e000      	b.n	8009e08 <aci_gatt_add_service+0x68>
 8009e06:	2303      	movs	r3, #3
 8009e08:	f107 0210 	add.w	r2, r7, #16
 8009e0c:	4413      	add	r3, r2
 8009e0e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8009e12:	f107 030c 	add.w	r3, r7, #12
 8009e16:	2203      	movs	r2, #3
 8009e18:	2100      	movs	r1, #0
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	f000 fd0b 	bl	800a836 <Osal_MemSet>
  int index_input = 0;
 8009e20:	2300      	movs	r3, #0
 8009e22:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 8009e26:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8009e2a:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8009e2e:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 8009e32:	7812      	ldrb	r2, [r2, #0]
 8009e34:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009e36:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009e3a:	3301      	adds	r3, #1
 8009e3c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 8009e40:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009e44:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8009e48:	781b      	ldrb	r3, [r3, #0]
 8009e4a:	2b01      	cmp	r3, #1
 8009e4c:	d002      	beq.n	8009e54 <aci_gatt_add_service+0xb4>
 8009e4e:	2b02      	cmp	r3, #2
 8009e50:	d004      	beq.n	8009e5c <aci_gatt_add_service+0xbc>
 8009e52:	e007      	b.n	8009e64 <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 8009e54:	2302      	movs	r3, #2
 8009e56:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 8009e5a:	e005      	b.n	8009e68 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 8009e5c:	2310      	movs	r3, #16
 8009e5e:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 8009e62:	e001      	b.n	8009e68 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 8009e64:	2397      	movs	r3, #151	@ 0x97
 8009e66:	e06c      	b.n	8009f42 <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 8009e68:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8009e6c:	1c58      	adds	r0, r3, #1
 8009e6e:	f897 2137 	ldrb.w	r2, [r7, #311]	@ 0x137
 8009e72:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009e76:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8009e7a:	6819      	ldr	r1, [r3, #0]
 8009e7c:	f000 fccb 	bl	800a816 <Osal_MemCpy>
    index_input += size;
 8009e80:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 8009e84:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8009e88:	4413      	add	r3, r2
 8009e8a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Type = Service_Type;
 8009e8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009e92:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8009e96:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8009e9a:	7812      	ldrb	r2, [r2, #0]
 8009e9c:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8009e9e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009ea2:	3301      	adds	r3, #1
 8009ea4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 8009ea8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009eac:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8009eb0:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 8009eb4:	7812      	ldrb	r2, [r2, #0]
 8009eb6:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8009eb8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009ebc:	3301      	adds	r3, #1
 8009ebe:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009ec2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009ec6:	2218      	movs	r2, #24
 8009ec8:	2100      	movs	r1, #0
 8009eca:	4618      	mov	r0, r3
 8009ecc:	f000 fcb3 	bl	800a836 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009ed0:	233f      	movs	r3, #63	@ 0x3f
 8009ed2:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x102;
 8009ed6:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8009eda:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8009ede:	f107 0310 	add.w	r3, r7, #16
 8009ee2:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8009ee6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009eea:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 8009eee:	f107 030c 	add.w	r3, r7, #12
 8009ef2:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 8009ef6:	2303      	movs	r3, #3
 8009ef8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009efc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009f00:	2100      	movs	r1, #0
 8009f02:	4618      	mov	r0, r3
 8009f04:	f000 ff20 	bl	800ad48 <hci_send_req>
 8009f08:	4603      	mov	r3, r0
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	da01      	bge.n	8009f12 <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 8009f0e:	23ff      	movs	r3, #255	@ 0xff
 8009f10:	e017      	b.n	8009f42 <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 8009f12:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009f16:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8009f1a:	781b      	ldrb	r3, [r3, #0]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d005      	beq.n	8009f2c <aci_gatt_add_service+0x18c>
    return resp.Status;
 8009f20:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009f24:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8009f28:	781b      	ldrb	r3, [r3, #0]
 8009f2a:	e00a      	b.n	8009f42 <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 8009f2c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009f30:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8009f34:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009f38:	b29a      	uxth	r2, r3
 8009f3a:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8009f3e:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8009f40:	2300      	movs	r3, #0
}
 8009f42:	4618      	mov	r0, r3
 8009f44:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 8009f48:	46bd      	mov	sp, r7
 8009f4a:	bd90      	pop	{r4, r7, pc}

08009f4c <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 8009f4c:	b590      	push	{r4, r7, lr}
 8009f4e:	b0d1      	sub	sp, #324	@ 0x144
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	4604      	mov	r4, r0
 8009f54:	4608      	mov	r0, r1
 8009f56:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 8009f5a:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 8009f5e:	600a      	str	r2, [r1, #0]
 8009f60:	4619      	mov	r1, r3
 8009f62:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8009f66:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8009f6a:	4622      	mov	r2, r4
 8009f6c:	801a      	strh	r2, [r3, #0]
 8009f6e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8009f72:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8009f76:	4602      	mov	r2, r0
 8009f78:	701a      	strb	r2, [r3, #0]
 8009f7a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8009f7e:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 8009f82:	460a      	mov	r2, r1
 8009f84:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 8009f86:	f107 0318 	add.w	r3, r7, #24
 8009f8a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8009f8e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8009f92:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8009f96:	781b      	ldrb	r3, [r3, #0]
 8009f98:	2b01      	cmp	r3, #1
 8009f9a:	d00a      	beq.n	8009fb2 <aci_gatt_add_char+0x66>
 8009f9c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8009fa0:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8009fa4:	781b      	ldrb	r3, [r3, #0]
 8009fa6:	2b02      	cmp	r3, #2
 8009fa8:	d101      	bne.n	8009fae <aci_gatt_add_char+0x62>
 8009faa:	2313      	movs	r3, #19
 8009fac:	e002      	b.n	8009fb4 <aci_gatt_add_char+0x68>
 8009fae:	2303      	movs	r3, #3
 8009fb0:	e000      	b.n	8009fb4 <aci_gatt_add_char+0x68>
 8009fb2:	2305      	movs	r3, #5
 8009fb4:	f107 0218 	add.w	r2, r7, #24
 8009fb8:	4413      	add	r3, r2
 8009fba:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8009fbe:	f107 0314 	add.w	r3, r7, #20
 8009fc2:	2203      	movs	r2, #3
 8009fc4:	2100      	movs	r1, #0
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	f000 fc35 	bl	800a836 <Osal_MemSet>
  int index_input = 0;
 8009fcc:	2300      	movs	r3, #0
 8009fce:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Service_Handle = Service_Handle;
 8009fd2:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8009fd6:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8009fda:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8009fde:	8812      	ldrh	r2, [r2, #0]
 8009fe0:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009fe2:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8009fe6:	3302      	adds	r3, #2
 8009fe8:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 8009fec:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8009ff0:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8009ff4:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 8009ff8:	7812      	ldrb	r2, [r2, #0]
 8009ffa:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8009ffc:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800a000:	3301      	adds	r3, #1
 800a002:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 800a006:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800a00a:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800a00e:	781b      	ldrb	r3, [r3, #0]
 800a010:	2b01      	cmp	r3, #1
 800a012:	d002      	beq.n	800a01a <aci_gatt_add_char+0xce>
 800a014:	2b02      	cmp	r3, #2
 800a016:	d004      	beq.n	800a022 <aci_gatt_add_char+0xd6>
 800a018:	e007      	b.n	800a02a <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 800a01a:	2302      	movs	r3, #2
 800a01c:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 800a020:	e005      	b.n	800a02e <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 800a022:	2310      	movs	r3, #16
 800a024:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 800a028:	e001      	b.n	800a02e <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 800a02a:	2397      	movs	r3, #151	@ 0x97
 800a02c:	e091      	b.n	800a152 <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 800a02e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800a032:	1cd8      	adds	r0, r3, #3
 800a034:	f897 213f 	ldrb.w	r2, [r7, #319]	@ 0x13f
 800a038:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800a03c:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800a040:	6819      	ldr	r1, [r3, #0]
 800a042:	f000 fbe8 	bl	800a816 <Osal_MemCpy>
    index_input += size;
 800a046:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 800a04a:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 800a04e:	4413      	add	r3, r2
 800a050:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 800a054:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800a058:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800a05c:	f5a2 729d 	sub.w	r2, r2, #314	@ 0x13a
 800a060:	8812      	ldrh	r2, [r2, #0]
 800a062:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800a064:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800a068:	3302      	adds	r3, #2
 800a06a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Properties = Char_Properties;
 800a06e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800a072:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 800a076:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 800a078:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800a07c:	3301      	adds	r3, #1
 800a07e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 800a082:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800a086:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 800a08a:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 800a08c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800a090:	3301      	adds	r3, #1
 800a092:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 800a096:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800a09a:	f897 2158 	ldrb.w	r2, [r7, #344]	@ 0x158
 800a09e:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 800a0a0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800a0a4:	3301      	adds	r3, #1
 800a0a6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 800a0aa:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800a0ae:	f897 215c 	ldrb.w	r2, [r7, #348]	@ 0x15c
 800a0b2:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 800a0b4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800a0b8:	3301      	adds	r3, #1
 800a0ba:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Is_Variable = Is_Variable;
 800a0be:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800a0c2:	f897 2160 	ldrb.w	r2, [r7, #352]	@ 0x160
 800a0c6:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 800a0c8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800a0cc:	3301      	adds	r3, #1
 800a0ce:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a0d2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800a0d6:	2218      	movs	r2, #24
 800a0d8:	2100      	movs	r1, #0
 800a0da:	4618      	mov	r0, r3
 800a0dc:	f000 fbab 	bl	800a836 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a0e0:	233f      	movs	r3, #63	@ 0x3f
 800a0e2:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x104;
 800a0e6:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800a0ea:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.cparam = cmd_buffer;
 800a0ee:	f107 0318 	add.w	r3, r7, #24
 800a0f2:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 800a0f6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800a0fa:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &resp;
 800a0fe:	f107 0314 	add.w	r3, r7, #20
 800a102:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = sizeof(resp);
 800a106:	2303      	movs	r3, #3
 800a108:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a10c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800a110:	2100      	movs	r1, #0
 800a112:	4618      	mov	r0, r3
 800a114:	f000 fe18 	bl	800ad48 <hci_send_req>
 800a118:	4603      	mov	r3, r0
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	da01      	bge.n	800a122 <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 800a11e:	23ff      	movs	r3, #255	@ 0xff
 800a120:	e017      	b.n	800a152 <aci_gatt_add_char+0x206>
  if ( resp.Status )
 800a122:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800a126:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800a12a:	781b      	ldrb	r3, [r3, #0]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d005      	beq.n	800a13c <aci_gatt_add_char+0x1f0>
    return resp.Status;
 800a130:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800a134:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800a138:	781b      	ldrb	r3, [r3, #0]
 800a13a:	e00a      	b.n	800a152 <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 800a13c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800a140:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800a144:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800a148:	b29a      	uxth	r2, r3
 800a14a:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 800a14e:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800a150:	2300      	movs	r3, #0
}
 800a152:	4618      	mov	r0, r3
 800a154:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 800a158:	46bd      	mov	sp, r7
 800a15a:	bd90      	pop	{r4, r7, pc}

0800a15c <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 800a15c:	b5b0      	push	{r4, r5, r7, lr}
 800a15e:	b0cc      	sub	sp, #304	@ 0x130
 800a160:	af00      	add	r7, sp, #0
 800a162:	4605      	mov	r5, r0
 800a164:	460c      	mov	r4, r1
 800a166:	4610      	mov	r0, r2
 800a168:	4619      	mov	r1, r3
 800a16a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a16e:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800a172:	462a      	mov	r2, r5
 800a174:	801a      	strh	r2, [r3, #0]
 800a176:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a17a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800a17e:	4622      	mov	r2, r4
 800a180:	801a      	strh	r2, [r3, #0]
 800a182:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a186:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 800a18a:	4602      	mov	r2, r0
 800a18c:	701a      	strb	r2, [r3, #0]
 800a18e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a192:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800a196:	460a      	mov	r2, r1
 800a198:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 800a19a:	f107 0310 	add.w	r3, r7, #16
 800a19e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800a1a2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a1a6:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a1aa:	2200      	movs	r2, #0
 800a1ac:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_Handle = Service_Handle;
 800a1b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a1b8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a1bc:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800a1c0:	8812      	ldrh	r2, [r2, #0]
 800a1c2:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800a1c4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a1c8:	3302      	adds	r3, #2
 800a1ca:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Handle = Char_Handle;
 800a1ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a1d2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a1d6:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 800a1da:	8812      	ldrh	r2, [r2, #0]
 800a1dc:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800a1de:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a1e2:	3302      	adds	r3, #2
 800a1e4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Val_Offset = Val_Offset;
 800a1e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a1ec:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a1f0:	f2a2 122d 	subw	r2, r2, #301	@ 0x12d
 800a1f4:	7812      	ldrb	r2, [r2, #0]
 800a1f6:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800a1f8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a1fc:	3301      	adds	r3, #1
 800a1fe:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 800a202:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a206:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a20a:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 800a20e:	7812      	ldrb	r2, [r2, #0]
 800a210:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800a212:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a216:	3301      	adds	r3, #1
 800a218:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 800a21c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a220:	1d98      	adds	r0, r3, #6
 800a222:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a226:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800a22a:	781b      	ldrb	r3, [r3, #0]
 800a22c:	461a      	mov	r2, r3
 800a22e:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800a232:	f000 faf0 	bl	800a816 <Osal_MemCpy>
  index_input += Char_Value_Length;
 800a236:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a23a:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800a23e:	781b      	ldrb	r3, [r3, #0]
 800a240:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800a244:	4413      	add	r3, r2
 800a246:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a24a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a24e:	2218      	movs	r2, #24
 800a250:	2100      	movs	r1, #0
 800a252:	4618      	mov	r0, r3
 800a254:	f000 faef 	bl	800a836 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a258:	233f      	movs	r3, #63	@ 0x3f
 800a25a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x106;
 800a25e:	f44f 7383 	mov.w	r3, #262	@ 0x106
 800a262:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800a266:	f107 0310 	add.w	r3, r7, #16
 800a26a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800a26e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a272:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800a276:	f107 030f 	add.w	r3, r7, #15
 800a27a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800a27e:	2301      	movs	r3, #1
 800a280:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a284:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a288:	2100      	movs	r1, #0
 800a28a:	4618      	mov	r0, r3
 800a28c:	f000 fd5c 	bl	800ad48 <hci_send_req>
 800a290:	4603      	mov	r3, r0
 800a292:	2b00      	cmp	r3, #0
 800a294:	da01      	bge.n	800a29a <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 800a296:	23ff      	movs	r3, #255	@ 0xff
 800a298:	e004      	b.n	800a2a4 <aci_gatt_update_char_value+0x148>
  return status;
 800a29a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a29e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a2a2:	781b      	ldrb	r3, [r3, #0]
}
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800a2aa:	46bd      	mov	sp, r7
 800a2ac:	bdb0      	pop	{r4, r5, r7, pc}

0800a2ae <aci_gatt_confirm_indication>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_confirm_indication( uint16_t Connection_Handle )
{
 800a2ae:	b580      	push	{r7, lr}
 800a2b0:	b0cc      	sub	sp, #304	@ 0x130
 800a2b2:	af00      	add	r7, sp, #0
 800a2b4:	4602      	mov	r2, r0
 800a2b6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a2ba:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800a2be:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_confirm_indication_cp0 *cp0 = (aci_gatt_confirm_indication_cp0*)(cmd_buffer);
 800a2c0:	f107 0310 	add.w	r3, r7, #16
 800a2c4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800a2c8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a2cc:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 800a2da:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a2de:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a2e2:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800a2e6:	8812      	ldrh	r2, [r2, #0]
 800a2e8:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800a2ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a2ee:	3302      	adds	r3, #2
 800a2f0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a2f4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a2f8:	2218      	movs	r2, #24
 800a2fa:	2100      	movs	r1, #0
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	f000 fa9a 	bl	800a836 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a302:	233f      	movs	r3, #63	@ 0x3f
 800a304:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x125;
 800a308:	f240 1325 	movw	r3, #293	@ 0x125
 800a30c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800a310:	f107 0310 	add.w	r3, r7, #16
 800a314:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800a318:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a31c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800a320:	f107 030f 	add.w	r3, r7, #15
 800a324:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800a328:	2301      	movs	r3, #1
 800a32a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a32e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a332:	2100      	movs	r1, #0
 800a334:	4618      	mov	r0, r3
 800a336:	f000 fd07 	bl	800ad48 <hci_send_req>
 800a33a:	4603      	mov	r3, r0
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	da01      	bge.n	800a344 <aci_gatt_confirm_indication+0x96>
    return BLE_STATUS_TIMEOUT;
 800a340:	23ff      	movs	r3, #255	@ 0xff
 800a342:	e004      	b.n	800a34e <aci_gatt_confirm_indication+0xa0>
  return status;
 800a344:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a348:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a34c:	781b      	ldrb	r3, [r3, #0]
}
 800a34e:	4618      	mov	r0, r3
 800a350:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800a354:	46bd      	mov	sp, r7
 800a356:	bd80      	pop	{r7, pc}

0800a358 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 800a358:	b580      	push	{r7, lr}
 800a35a:	b0cc      	sub	sp, #304	@ 0x130
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a362:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800a366:	601a      	str	r2, [r3, #0]
 800a368:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a36c:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800a370:	4602      	mov	r2, r0
 800a372:	701a      	strb	r2, [r3, #0]
 800a374:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a378:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800a37c:	460a      	mov	r2, r1
 800a37e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 800a380:	f107 0310 	add.w	r3, r7, #16
 800a384:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800a388:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a38c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a390:	2200      	movs	r2, #0
 800a392:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a394:	2300      	movs	r3, #0
 800a396:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Offset = Offset;
 800a39a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a39e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a3a2:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800a3a6:	7812      	ldrb	r2, [r2, #0]
 800a3a8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800a3aa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a3ae:	3301      	adds	r3, #1
 800a3b0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Length = Length;
 800a3b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a3b8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a3bc:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800a3c0:	7812      	ldrb	r2, [r2, #0]
 800a3c2:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800a3c4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a3c8:	3301      	adds	r3, #1
 800a3ca:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 800a3ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a3d2:	1c98      	adds	r0, r3, #2
 800a3d4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a3d8:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800a3dc:	781a      	ldrb	r2, [r3, #0]
 800a3de:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a3e2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800a3e6:	6819      	ldr	r1, [r3, #0]
 800a3e8:	f000 fa15 	bl	800a816 <Osal_MemCpy>
  index_input += Length;
 800a3ec:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a3f0:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800a3f4:	781b      	ldrb	r3, [r3, #0]
 800a3f6:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800a3fa:	4413      	add	r3, r2
 800a3fc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a400:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a404:	2218      	movs	r2, #24
 800a406:	2100      	movs	r1, #0
 800a408:	4618      	mov	r0, r3
 800a40a:	f000 fa14 	bl	800a836 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a40e:	233f      	movs	r3, #63	@ 0x3f
 800a410:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00c;
 800a414:	230c      	movs	r3, #12
 800a416:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800a41a:	f107 0310 	add.w	r3, r7, #16
 800a41e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800a422:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a426:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800a42a:	f107 030f 	add.w	r3, r7, #15
 800a42e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800a432:	2301      	movs	r3, #1
 800a434:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a438:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a43c:	2100      	movs	r1, #0
 800a43e:	4618      	mov	r0, r3
 800a440:	f000 fc82 	bl	800ad48 <hci_send_req>
 800a444:	4603      	mov	r3, r0
 800a446:	2b00      	cmp	r3, #0
 800a448:	da01      	bge.n	800a44e <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 800a44a:	23ff      	movs	r3, #255	@ 0xff
 800a44c:	e004      	b.n	800a458 <aci_hal_write_config_data+0x100>
  return status;
 800a44e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a452:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a456:	781b      	ldrb	r3, [r3, #0]
}
 800a458:	4618      	mov	r0, r3
 800a45a:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800a45e:	46bd      	mov	sp, r7
 800a460:	bd80      	pop	{r7, pc}

0800a462 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 800a462:	b580      	push	{r7, lr}
 800a464:	b0cc      	sub	sp, #304	@ 0x130
 800a466:	af00      	add	r7, sp, #0
 800a468:	4602      	mov	r2, r0
 800a46a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a46e:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800a472:	701a      	strb	r2, [r3, #0]
 800a474:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a478:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800a47c:	460a      	mov	r2, r1
 800a47e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 800a480:	f107 0310 	add.w	r3, r7, #16
 800a484:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800a488:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a48c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a490:	2200      	movs	r2, #0
 800a492:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a494:	2300      	movs	r3, #0
 800a496:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->En_High_Power = En_High_Power;
 800a49a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a49e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a4a2:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800a4a6:	7812      	ldrb	r2, [r2, #0]
 800a4a8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800a4aa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a4ae:	3301      	adds	r3, #1
 800a4b0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->PA_Level = PA_Level;
 800a4b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a4b8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a4bc:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800a4c0:	7812      	ldrb	r2, [r2, #0]
 800a4c2:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800a4c4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a4c8:	3301      	adds	r3, #1
 800a4ca:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a4ce:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a4d2:	2218      	movs	r2, #24
 800a4d4:	2100      	movs	r1, #0
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	f000 f9ad 	bl	800a836 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a4dc:	233f      	movs	r3, #63	@ 0x3f
 800a4de:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00f;
 800a4e2:	230f      	movs	r3, #15
 800a4e4:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800a4e8:	f107 0310 	add.w	r3, r7, #16
 800a4ec:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800a4f0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a4f4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800a4f8:	f107 030f 	add.w	r3, r7, #15
 800a4fc:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800a500:	2301      	movs	r3, #1
 800a502:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a506:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a50a:	2100      	movs	r1, #0
 800a50c:	4618      	mov	r0, r3
 800a50e:	f000 fc1b 	bl	800ad48 <hci_send_req>
 800a512:	4603      	mov	r3, r0
 800a514:	2b00      	cmp	r3, #0
 800a516:	da01      	bge.n	800a51c <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 800a518:	23ff      	movs	r3, #255	@ 0xff
 800a51a:	e004      	b.n	800a526 <aci_hal_set_tx_power_level+0xc4>
  return status;
 800a51c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a520:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a524:	781b      	ldrb	r3, [r3, #0]
}
 800a526:	4618      	mov	r0, r3
 800a528:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800a52c:	46bd      	mov	sp, r7
 800a52e:	bd80      	pop	{r7, pc}

0800a530 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 800a530:	b580      	push	{r7, lr}
 800a532:	b0cc      	sub	sp, #304	@ 0x130
 800a534:	af00      	add	r7, sp, #0
 800a536:	4602      	mov	r2, r0
 800a538:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a53c:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800a540:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 800a542:	f107 0310 	add.w	r3, r7, #16
 800a546:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800a54a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a54e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a552:	2200      	movs	r2, #0
 800a554:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a556:	2300      	movs	r3, #0
 800a558:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 800a55c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a560:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a564:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800a568:	8812      	ldrh	r2, [r2, #0]
 800a56a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800a56c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a570:	3302      	adds	r3, #2
 800a572:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a576:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a57a:	2218      	movs	r2, #24
 800a57c:	2100      	movs	r1, #0
 800a57e:	4618      	mov	r0, r3
 800a580:	f000 f959 	bl	800a836 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a584:	233f      	movs	r3, #63	@ 0x3f
 800a586:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x018;
 800a58a:	2318      	movs	r3, #24
 800a58c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800a590:	f107 0310 	add.w	r3, r7, #16
 800a594:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800a598:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a59c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800a5a0:	f107 030f 	add.w	r3, r7, #15
 800a5a4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800a5a8:	2301      	movs	r3, #1
 800a5aa:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a5ae:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a5b2:	2100      	movs	r1, #0
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	f000 fbc7 	bl	800ad48 <hci_send_req>
 800a5ba:	4603      	mov	r3, r0
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	da01      	bge.n	800a5c4 <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 800a5c0:	23ff      	movs	r3, #255	@ 0xff
 800a5c2:	e004      	b.n	800a5ce <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 800a5c4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a5c8:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a5cc:	781b      	ldrb	r3, [r3, #0]
}
 800a5ce:	4618      	mov	r0, r3
 800a5d0:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	bd80      	pop	{r7, pc}

0800a5d8 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 800a5d8:	b580      	push	{r7, lr}
 800a5da:	b088      	sub	sp, #32
 800a5dc:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800a5de:	2300      	movs	r3, #0
 800a5e0:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a5e2:	f107 0308 	add.w	r3, r7, #8
 800a5e6:	2218      	movs	r2, #24
 800a5e8:	2100      	movs	r1, #0
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	f000 f923 	bl	800a836 <Osal_MemSet>
  rq.ogf = 0x03;
 800a5f0:	2303      	movs	r3, #3
 800a5f2:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 800a5f4:	2303      	movs	r3, #3
 800a5f6:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800a5f8:	1dfb      	adds	r3, r7, #7
 800a5fa:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800a5fc:	2301      	movs	r3, #1
 800a5fe:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a600:	f107 0308 	add.w	r3, r7, #8
 800a604:	2100      	movs	r1, #0
 800a606:	4618      	mov	r0, r3
 800a608:	f000 fb9e 	bl	800ad48 <hci_send_req>
 800a60c:	4603      	mov	r3, r0
 800a60e:	2b00      	cmp	r3, #0
 800a610:	da01      	bge.n	800a616 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 800a612:	23ff      	movs	r3, #255	@ 0xff
 800a614:	e000      	b.n	800a618 <hci_reset+0x40>
  return status;
 800a616:	79fb      	ldrb	r3, [r7, #7]
}
 800a618:	4618      	mov	r0, r3
 800a61a:	3720      	adds	r7, #32
 800a61c:	46bd      	mov	sp, r7
 800a61e:	bd80      	pop	{r7, pc}

0800a620 <hci_le_read_phy>:
}

tBleStatus hci_le_read_phy( uint16_t Connection_Handle,
                            uint8_t* TX_PHY,
                            uint8_t* RX_PHY )
{
 800a620:	b580      	push	{r7, lr}
 800a622:	b0ce      	sub	sp, #312	@ 0x138
 800a624:	af00      	add	r7, sp, #0
 800a626:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800a62a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800a62e:	6019      	str	r1, [r3, #0]
 800a630:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800a634:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800a638:	601a      	str	r2, [r3, #0]
 800a63a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800a63e:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800a642:	4602      	mov	r2, r0
 800a644:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_read_phy_cp0 *cp0 = (hci_le_read_phy_cp0*)(cmd_buffer);
 800a646:	f107 0318 	add.w	r3, r7, #24
 800a64a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  hci_le_read_phy_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800a64e:	f107 0310 	add.w	r3, r7, #16
 800a652:	2205      	movs	r2, #5
 800a654:	2100      	movs	r1, #0
 800a656:	4618      	mov	r0, r3
 800a658:	f000 f8ed 	bl	800a836 <Osal_MemSet>
  int index_input = 0;
 800a65c:	2300      	movs	r3, #0
 800a65e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Connection_Handle = Connection_Handle;
 800a662:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800a666:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800a66a:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800a66e:	8812      	ldrh	r2, [r2, #0]
 800a670:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800a672:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800a676:	3302      	adds	r3, #2
 800a678:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a67c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800a680:	2218      	movs	r2, #24
 800a682:	2100      	movs	r1, #0
 800a684:	4618      	mov	r0, r3
 800a686:	f000 f8d6 	bl	800a836 <Osal_MemSet>
  rq.ogf = 0x08;
 800a68a:	2308      	movs	r3, #8
 800a68c:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x030;
 800a690:	2330      	movs	r3, #48	@ 0x30
 800a692:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.cparam = cmd_buffer;
 800a696:	f107 0318 	add.w	r3, r7, #24
 800a69a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 800a69e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800a6a2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &resp;
 800a6a6:	f107 0310 	add.w	r3, r7, #16
 800a6aa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = sizeof(resp);
 800a6ae:	2305      	movs	r3, #5
 800a6b0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a6b4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800a6b8:	2100      	movs	r1, #0
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	f000 fb44 	bl	800ad48 <hci_send_req>
 800a6c0:	4603      	mov	r3, r0
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	da01      	bge.n	800a6ca <hci_le_read_phy+0xaa>
    return BLE_STATUS_TIMEOUT;
 800a6c6:	23ff      	movs	r3, #255	@ 0xff
 800a6c8:	e023      	b.n	800a712 <hci_le_read_phy+0xf2>
  if ( resp.Status )
 800a6ca:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800a6ce:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800a6d2:	781b      	ldrb	r3, [r3, #0]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d005      	beq.n	800a6e4 <hci_le_read_phy+0xc4>
    return resp.Status;
 800a6d8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800a6dc:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800a6e0:	781b      	ldrb	r3, [r3, #0]
 800a6e2:	e016      	b.n	800a712 <hci_le_read_phy+0xf2>
  *TX_PHY = resp.TX_PHY;
 800a6e4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800a6e8:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800a6ec:	78da      	ldrb	r2, [r3, #3]
 800a6ee:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800a6f2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	701a      	strb	r2, [r3, #0]
  *RX_PHY = resp.RX_PHY;
 800a6fa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800a6fe:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800a702:	791a      	ldrb	r2, [r3, #4]
 800a704:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800a708:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	701a      	strb	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800a710:	2300      	movs	r3, #0
}
 800a712:	4618      	mov	r0, r3
 800a714:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 800a718:	46bd      	mov	sp, r7
 800a71a:	bd80      	pop	{r7, pc}

0800a71c <hci_le_set_default_phy>:

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 800a71c:	b590      	push	{r4, r7, lr}
 800a71e:	b0cd      	sub	sp, #308	@ 0x134
 800a720:	af00      	add	r7, sp, #0
 800a722:	4604      	mov	r4, r0
 800a724:	4608      	mov	r0, r1
 800a726:	4611      	mov	r1, r2
 800a728:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a72c:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800a730:	4622      	mov	r2, r4
 800a732:	701a      	strb	r2, [r3, #0]
 800a734:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a738:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800a73c:	4602      	mov	r2, r0
 800a73e:	701a      	strb	r2, [r3, #0]
 800a740:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a744:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800a748:	460a      	mov	r2, r1
 800a74a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 800a74c:	f107 0310 	add.w	r3, r7, #16
 800a750:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800a754:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a758:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a75c:	2200      	movs	r2, #0
 800a75e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a760:	2300      	movs	r3, #0
 800a762:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 800a766:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a76a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a76e:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800a772:	7812      	ldrb	r2, [r2, #0]
 800a774:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800a776:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a77a:	3301      	adds	r3, #1
 800a77c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->TX_PHYS = TX_PHYS;
 800a780:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a784:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a788:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800a78c:	7812      	ldrb	r2, [r2, #0]
 800a78e:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800a790:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a794:	3301      	adds	r3, #1
 800a796:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->RX_PHYS = RX_PHYS;
 800a79a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a79e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a7a2:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800a7a6:	7812      	ldrb	r2, [r2, #0]
 800a7a8:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800a7aa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a7ae:	3301      	adds	r3, #1
 800a7b0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a7b4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a7b8:	2218      	movs	r2, #24
 800a7ba:	2100      	movs	r1, #0
 800a7bc:	4618      	mov	r0, r3
 800a7be:	f000 f83a 	bl	800a836 <Osal_MemSet>
  rq.ogf = 0x08;
 800a7c2:	2308      	movs	r3, #8
 800a7c4:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x031;
 800a7c8:	2331      	movs	r3, #49	@ 0x31
 800a7ca:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800a7ce:	f107 0310 	add.w	r3, r7, #16
 800a7d2:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800a7d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a7da:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800a7de:	f107 030f 	add.w	r3, r7, #15
 800a7e2:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800a7e6:	2301      	movs	r3, #1
 800a7e8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a7ec:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a7f0:	2100      	movs	r1, #0
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	f000 faa8 	bl	800ad48 <hci_send_req>
 800a7f8:	4603      	mov	r3, r0
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	da01      	bge.n	800a802 <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 800a7fe:	23ff      	movs	r3, #255	@ 0xff
 800a800:	e004      	b.n	800a80c <hci_le_set_default_phy+0xf0>
  return status;
 800a802:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a806:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a80a:	781b      	ldrb	r3, [r3, #0]
}
 800a80c:	4618      	mov	r0, r3
 800a80e:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 800a812:	46bd      	mov	sp, r7
 800a814:	bd90      	pop	{r4, r7, pc}

0800a816 <Osal_MemCpy>:
 * Osal_MemCpy
 *
 */

void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 800a816:	b580      	push	{r7, lr}
 800a818:	b084      	sub	sp, #16
 800a81a:	af00      	add	r7, sp, #0
 800a81c:	60f8      	str	r0, [r7, #12]
 800a81e:	60b9      	str	r1, [r7, #8]
 800a820:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size );
 800a822:	687a      	ldr	r2, [r7, #4]
 800a824:	68b9      	ldr	r1, [r7, #8]
 800a826:	68f8      	ldr	r0, [r7, #12]
 800a828:	f004 f861 	bl	800e8ee <memcpy>
 800a82c:	4603      	mov	r3, r0
}
 800a82e:	4618      	mov	r0, r3
 800a830:	3710      	adds	r7, #16
 800a832:	46bd      	mov	sp, r7
 800a834:	bd80      	pop	{r7, pc}

0800a836 <Osal_MemSet>:
 * Osal_MemSet
 *
 */

void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 800a836:	b580      	push	{r7, lr}
 800a838:	b084      	sub	sp, #16
 800a83a:	af00      	add	r7, sp, #0
 800a83c:	60f8      	str	r0, [r7, #12]
 800a83e:	60b9      	str	r1, [r7, #8]
 800a840:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 800a842:	687a      	ldr	r2, [r7, #4]
 800a844:	68b9      	ldr	r1, [r7, #8]
 800a846:	68f8      	ldr	r0, [r7, #12]
 800a848:	f003 ffdc 	bl	800e804 <memset>
 800a84c:	4603      	mov	r3, r0
}
 800a84e:	4618      	mov	r0, r3
 800a850:	3710      	adds	r7, #16
 800a852:	46bd      	mov	sp, r7
 800a854:	bd80      	pop	{r7, pc}

0800a856 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 800a856:	b480      	push	{r7}
 800a858:	af00      	add	r7, sp, #0
  return;
 800a85a:	bf00      	nop
}
 800a85c:	46bd      	mov	sp, r7
 800a85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a862:	4770      	bx	lr

0800a864 <BLS_Init>:

__WEAK void BLS_Init( void )
{
 800a864:	b480      	push	{r7}
 800a866:	af00      	add	r7, sp, #0
  return;
 800a868:	bf00      	nop
}
 800a86a:	46bd      	mov	sp, r7
 800a86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a870:	4770      	bx	lr

0800a872 <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 800a872:	b480      	push	{r7}
 800a874:	af00      	add	r7, sp, #0
  return;
 800a876:	bf00      	nop
}
 800a878:	46bd      	mov	sp, r7
 800a87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87e:	4770      	bx	lr

0800a880 <DIS_Init>:
__WEAK void DIS_Init( void )
{
 800a880:	b480      	push	{r7}
 800a882:	af00      	add	r7, sp, #0
  return;
 800a884:	bf00      	nop
}
 800a886:	46bd      	mov	sp, r7
 800a888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88c:	4770      	bx	lr

0800a88e <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 800a88e:	b480      	push	{r7}
 800a890:	af00      	add	r7, sp, #0
  return;
 800a892:	bf00      	nop
}
 800a894:	46bd      	mov	sp, r7
 800a896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a89a:	4770      	bx	lr

0800a89c <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 800a89c:	b480      	push	{r7}
 800a89e:	af00      	add	r7, sp, #0
  return;
 800a8a0:	bf00      	nop
}
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a8:	4770      	bx	lr

0800a8aa <HRS_Init>:
__WEAK void HRS_Init( void )
{
 800a8aa:	b480      	push	{r7}
 800a8ac:	af00      	add	r7, sp, #0
  return;
 800a8ae:	bf00      	nop
}
 800a8b0:	46bd      	mov	sp, r7
 800a8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b6:	4770      	bx	lr

0800a8b8 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 800a8b8:	b480      	push	{r7}
 800a8ba:	af00      	add	r7, sp, #0
  return;
 800a8bc:	bf00      	nop
}
 800a8be:	46bd      	mov	sp, r7
 800a8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c4:	4770      	bx	lr

0800a8c6 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 800a8c6:	b480      	push	{r7}
 800a8c8:	af00      	add	r7, sp, #0
  return;
 800a8ca:	bf00      	nop
}
 800a8cc:	46bd      	mov	sp, r7
 800a8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d2:	4770      	bx	lr

0800a8d4 <LLS_Init>:
__WEAK void LLS_Init( void )
{
 800a8d4:	b480      	push	{r7}
 800a8d6:	af00      	add	r7, sp, #0
  return;
 800a8d8:	bf00      	nop
}
 800a8da:	46bd      	mov	sp, r7
 800a8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e0:	4770      	bx	lr

0800a8e2 <TPS_Init>:
__WEAK void TPS_Init( void )
{
 800a8e2:	b480      	push	{r7}
 800a8e4:	af00      	add	r7, sp, #0
  return;
 800a8e6:	bf00      	nop
}
 800a8e8:	46bd      	mov	sp, r7
 800a8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ee:	4770      	bx	lr

0800a8f0 <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 800a8f0:	b480      	push	{r7}
 800a8f2:	af00      	add	r7, sp, #0
  return;
 800a8f4:	bf00      	nop
}
 800a8f6:	46bd      	mov	sp, r7
 800a8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8fc:	4770      	bx	lr

0800a8fe <ZDD_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
  return;
}
__WEAK void ZDD_STM_Init( void )
{
 800a8fe:	b480      	push	{r7}
 800a900:	af00      	add	r7, sp, #0
  return;
 800a902:	bf00      	nop
}
 800a904:	46bd      	mov	sp, r7
 800a906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a90a:	4770      	bx	lr

0800a90c <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 800a90c:	b480      	push	{r7}
 800a90e:	af00      	add	r7, sp, #0
  return;
 800a910:	bf00      	nop
}
 800a912:	46bd      	mov	sp, r7
 800a914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a918:	4770      	bx	lr

0800a91a <MESH_Init>:
__WEAK void MESH_Init( void )
{
 800a91a:	b480      	push	{r7}
 800a91c:	af00      	add	r7, sp, #0
  return;
 800a91e:	bf00      	nop
}
 800a920:	46bd      	mov	sp, r7
 800a922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a926:	4770      	bx	lr

0800a928 <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 800a928:	b480      	push	{r7}
 800a92a:	af00      	add	r7, sp, #0
  return;
 800a92c:	bf00      	nop
}
 800a92e:	46bd      	mov	sp, r7
 800a930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a934:	4770      	bx	lr

0800a936 <SVCCTL_InitCustomSvc>:
__WEAK void SVCCTL_InitCustomSvc( void )
{
 800a936:	b480      	push	{r7}
 800a938:	af00      	add	r7, sp, #0
  return;
 800a93a:	bf00      	nop
}
 800a93c:	46bd      	mov	sp, r7
 800a93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a942:	4770      	bx	lr

0800a944 <SVCCTL_Init>:

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 800a944:	b580      	push	{r7, lr}
 800a946:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 800a948:	4b04      	ldr	r3, [pc, #16]	@ (800a95c <SVCCTL_Init+0x18>)
 800a94a:	2200      	movs	r2, #0
 800a94c:	711a      	strb	r2, [r3, #4]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800a94e:	4b04      	ldr	r3, [pc, #16]	@ (800a960 <SVCCTL_Init+0x1c>)
 800a950:	2200      	movs	r2, #0
 800a952:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 800a954:	f000 f806 	bl	800a964 <SVCCTL_SvcInit>

  return;
 800a958:	bf00      	nop
}
 800a95a:	bd80      	pop	{r7, pc}
 800a95c:	20000088 	.word	0x20000088
 800a960:	20000090 	.word	0x20000090

0800a964 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 800a964:	b580      	push	{r7, lr}
 800a966:	af00      	add	r7, sp, #0
  BAS_Init();
 800a968:	f7ff ff75 	bl	800a856 <BAS_Init>

  BLS_Init();
 800a96c:	f7ff ff7a 	bl	800a864 <BLS_Init>

  CRS_STM_Init();
 800a970:	f7ff ff7f 	bl	800a872 <CRS_STM_Init>

  DIS_Init();
 800a974:	f7ff ff84 	bl	800a880 <DIS_Init>

  EDS_STM_Init();
 800a978:	f7ff ff89 	bl	800a88e <EDS_STM_Init>

  HIDS_Init();
 800a97c:	f7ff ff8e 	bl	800a89c <HIDS_Init>

  HRS_Init();
 800a980:	f7ff ff93 	bl	800a8aa <HRS_Init>

  HTS_Init();
 800a984:	f7ff ff98 	bl	800a8b8 <HTS_Init>

  IAS_Init();
 800a988:	f7ff ff9d 	bl	800a8c6 <IAS_Init>

  LLS_Init();
 800a98c:	f7ff ffa2 	bl	800a8d4 <LLS_Init>

  TPS_Init();
 800a990:	f7ff ffa7 	bl	800a8e2 <TPS_Init>

  MOTENV_STM_Init();
 800a994:	f7ff ffac 	bl	800a8f0 <MOTENV_STM_Init>


  //P2PS_STM_Init();
  Hermes_App_Init();
 800a998:	f001 fd36 	bl	800c408 <Hermes_App_Init>

  ZDD_STM_Init();
 800a99c:	f7ff ffaf 	bl	800a8fe <ZDD_STM_Init>

  OTAS_STM_Init();
 800a9a0:	f7ff ffb4 	bl	800a90c <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 800a9a4:	f7ff ffc0 	bl	800a928 <BVOPUS_STM_Init>

  MESH_Init();
 800a9a8:	f7ff ffb7 	bl	800a91a <MESH_Init>

  SVCCTL_InitCustomSvc();
 800a9ac:	f7ff ffc3 	bl	800a936 <SVCCTL_InitCustomSvc>
  
  return;
 800a9b0:	bf00      	nop
}
 800a9b2:	bd80      	pop	{r7, pc}

0800a9b4 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 800a9b4:	b480      	push	{r7}
 800a9b6:	b083      	sub	sp, #12
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 800a9bc:	4b09      	ldr	r3, [pc, #36]	@ (800a9e4 <SVCCTL_RegisterSvcHandler+0x30>)
 800a9be:	791b      	ldrb	r3, [r3, #4]
 800a9c0:	4619      	mov	r1, r3
 800a9c2:	4a08      	ldr	r2, [pc, #32]	@ (800a9e4 <SVCCTL_RegisterSvcHandler+0x30>)
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 800a9ca:	4b06      	ldr	r3, [pc, #24]	@ (800a9e4 <SVCCTL_RegisterSvcHandler+0x30>)
 800a9cc:	791b      	ldrb	r3, [r3, #4]
 800a9ce:	3301      	adds	r3, #1
 800a9d0:	b2da      	uxtb	r2, r3
 800a9d2:	4b04      	ldr	r3, [pc, #16]	@ (800a9e4 <SVCCTL_RegisterSvcHandler+0x30>)
 800a9d4:	711a      	strb	r2, [r3, #4]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 800a9d6:	bf00      	nop
}
 800a9d8:	370c      	adds	r7, #12
 800a9da:	46bd      	mov	sp, r7
 800a9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e0:	4770      	bx	lr
 800a9e2:	bf00      	nop
 800a9e4:	20000088 	.word	0x20000088

0800a9e8 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 800a9e8:	b580      	push	{r7, lr}
 800a9ea:	b086      	sub	sp, #24
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	3301      	adds	r3, #1
 800a9f4:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800a9f6:	2300      	movs	r3, #0
 800a9f8:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 800a9fa:	693b      	ldr	r3, [r7, #16]
 800a9fc:	781b      	ldrb	r3, [r3, #0]
 800a9fe:	2bff      	cmp	r3, #255	@ 0xff
 800aa00:	d125      	bne.n	800aa4e <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 800aa02:	693b      	ldr	r3, [r7, #16]
 800aa04:	3302      	adds	r3, #2
 800aa06:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	881b      	ldrh	r3, [r3, #0]
 800aa0c:	b29b      	uxth	r3, r3
 800aa0e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800aa12:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800aa16:	d118      	bne.n	800aa4a <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800aa18:	2300      	movs	r3, #0
 800aa1a:	757b      	strb	r3, [r7, #21]
 800aa1c:	e00d      	b.n	800aa3a <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800aa1e:	7d7b      	ldrb	r3, [r7, #21]
 800aa20:	4a1a      	ldr	r2, [pc, #104]	@ (800aa8c <SVCCTL_UserEvtRx+0xa4>)
 800aa22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aa26:	6878      	ldr	r0, [r7, #4]
 800aa28:	4798      	blx	r3
 800aa2a:	4603      	mov	r3, r0
 800aa2c:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 800aa2e:	7dfb      	ldrb	r3, [r7, #23]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d108      	bne.n	800aa46 <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800aa34:	7d7b      	ldrb	r3, [r7, #21]
 800aa36:	3301      	adds	r3, #1
 800aa38:	757b      	strb	r3, [r7, #21]
 800aa3a:	4b14      	ldr	r3, [pc, #80]	@ (800aa8c <SVCCTL_UserEvtRx+0xa4>)
 800aa3c:	791b      	ldrb	r3, [r3, #4]
 800aa3e:	7d7a      	ldrb	r2, [r7, #21]
 800aa40:	429a      	cmp	r2, r3
 800aa42:	d3ec      	bcc.n	800aa1e <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 800aa44:	e002      	b.n	800aa4c <SVCCTL_UserEvtRx+0x64>
              break;
 800aa46:	bf00      	nop
          break;
 800aa48:	e000      	b.n	800aa4c <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 800aa4a:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 800aa4c:	e000      	b.n	800aa50 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 800aa4e:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 800aa50:	7dfb      	ldrb	r3, [r7, #23]
 800aa52:	2b02      	cmp	r3, #2
 800aa54:	d00f      	beq.n	800aa76 <SVCCTL_UserEvtRx+0x8e>
 800aa56:	2b02      	cmp	r3, #2
 800aa58:	dc10      	bgt.n	800aa7c <SVCCTL_UserEvtRx+0x94>
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d002      	beq.n	800aa64 <SVCCTL_UserEvtRx+0x7c>
 800aa5e:	2b01      	cmp	r3, #1
 800aa60:	d006      	beq.n	800aa70 <SVCCTL_UserEvtRx+0x88>
 800aa62:	e00b      	b.n	800aa7c <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 800aa64:	6878      	ldr	r0, [r7, #4]
 800aa66:	f001 ffa5 	bl	800c9b4 <SVCCTL_App_Notification>
 800aa6a:	4603      	mov	r3, r0
 800aa6c:	75bb      	strb	r3, [r7, #22]
      break;
 800aa6e:	e008      	b.n	800aa82 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 800aa70:	2301      	movs	r3, #1
 800aa72:	75bb      	strb	r3, [r7, #22]
      break;
 800aa74:	e005      	b.n	800aa82 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 800aa76:	2300      	movs	r3, #0
 800aa78:	75bb      	strb	r3, [r7, #22]
      break;
 800aa7a:	e002      	b.n	800aa82 <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 800aa7c:	2301      	movs	r3, #1
 800aa7e:	75bb      	strb	r3, [r7, #22]
      break;
 800aa80:	bf00      	nop
  }

  return (return_status);
 800aa82:	7dbb      	ldrb	r3, [r7, #22]
}
 800aa84:	4618      	mov	r0, r3
 800aa86:	3718      	adds	r7, #24
 800aa88:	46bd      	mov	sp, r7
 800aa8a:	bd80      	pop	{r7, pc}
 800aa8c:	20000088 	.word	0x20000088

0800aa90 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 800aa90:	b580      	push	{r7, lr}
 800aa92:	b088      	sub	sp, #32
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800aa98:	f107 030c 	add.w	r3, r7, #12
 800aa9c:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 800aaa4:	69fb      	ldr	r3, [r7, #28]
 800aaa6:	212e      	movs	r1, #46	@ 0x2e
 800aaa8:	f64f 4066 	movw	r0, #64614	@ 0xfc66
 800aaac:	f000 fae8 	bl	800b080 <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800aab0:	69fb      	ldr	r3, [r7, #28]
 800aab2:	330b      	adds	r3, #11
 800aab4:	78db      	ldrb	r3, [r3, #3]
}
 800aab6:	4618      	mov	r0, r3
 800aab8:	3720      	adds	r7, #32
 800aaba:	46bd      	mov	sp, r7
 800aabc:	bd80      	pop	{r7, pc}

0800aabe <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 800aabe:	b580      	push	{r7, lr}
 800aac0:	b088      	sub	sp, #32
 800aac2:	af00      	add	r7, sp, #0
 800aac4:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800aac6:	f107 030c 	add.w	r3, r7, #12
 800aaca:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 800aad2:	69fb      	ldr	r3, [r7, #28]
 800aad4:	210f      	movs	r1, #15
 800aad6:	f64f 4068 	movw	r0, #64616	@ 0xfc68
 800aada:	f000 fad1 	bl	800b080 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800aade:	69fb      	ldr	r3, [r7, #28]
 800aae0:	330b      	adds	r3, #11
 800aae2:	78db      	ldrb	r3, [r3, #3]
}
 800aae4:	4618      	mov	r0, r3
 800aae6:	3720      	adds	r7, #32
 800aae8:	46bd      	mov	sp, r7
 800aaea:	bd80      	pop	{r7, pc}

0800aaec <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 800aaec:	b580      	push	{r7, lr}
 800aaee:	b088      	sub	sp, #32
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800aaf4:	f107 030c 	add.w	r3, r7, #12
 800aaf8:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 800aafa:	69fb      	ldr	r3, [r7, #28]
 800aafc:	687a      	ldr	r2, [r7, #4]
 800aafe:	2110      	movs	r1, #16
 800ab00:	f64f 4075 	movw	r0, #64629	@ 0xfc75
 800ab04:	f000 fabc 	bl	800b080 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800ab08:	69fb      	ldr	r3, [r7, #28]
 800ab0a:	330b      	adds	r3, #11
 800ab0c:	78db      	ldrb	r3, [r3, #3]
}
 800ab0e:	4618      	mov	r0, r3
 800ab10:	3720      	adds	r7, #32
 800ab12:	46bd      	mov	sp, r7
 800ab14:	bd80      	pop	{r7, pc}
	...

0800ab18 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 800ab18:	b480      	push	{r7}
 800ab1a:	b08b      	sub	sp, #44	@ 0x2c
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 800ab20:	2300      	movs	r3, #0
 800ab22:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 800ab24:	2300      	movs	r3, #0
 800ab26:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 800ab28:	2300      	movs	r3, #0
 800ab2a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t wireless_firmware_memorySize = 0;
 800ab2c:	2300      	movs	r3, #0
 800ab2e:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 800ab30:	2300      	movs	r3, #0
 800ab32:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 800ab34:	2300      	movs	r3, #0
 800ab36:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 800ab38:	2300      	movs	r3, #0
 800ab3a:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 800ab40:	4b4a      	ldr	r3, [pc, #296]	@ (800ac6c <SHCI_GetWirelessFwInfo+0x154>)
 800ab42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ab44:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800ab48:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 800ab4a:	693b      	ldr	r3, [r7, #16]
 800ab4c:	009b      	lsls	r3, r3, #2
 800ab4e:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 800ab52:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 800ab5a:	68bb      	ldr	r3, [r7, #8]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	4a44      	ldr	r2, [pc, #272]	@ (800ac70 <SHCI_GetWirelessFwInfo+0x158>)
 800ab60:	4293      	cmp	r3, r2
 800ab62:	d10f      	bne.n	800ab84 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 800ab64:	68bb      	ldr	r3, [r7, #8]
 800ab66:	695b      	ldr	r3, [r3, #20]
 800ab68:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 800ab6a:	68bb      	ldr	r3, [r7, #8]
 800ab6c:	699b      	ldr	r3, [r3, #24]
 800ab6e:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 800ab70:	68bb      	ldr	r3, [r7, #8]
 800ab72:	69db      	ldr	r3, [r3, #28]
 800ab74:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 800ab76:	68bb      	ldr	r3, [r7, #8]
 800ab78:	68db      	ldr	r3, [r3, #12]
 800ab7a:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 800ab7c:	68bb      	ldr	r3, [r7, #8]
 800ab7e:	691b      	ldr	r3, [r3, #16]
 800ab80:	617b      	str	r3, [r7, #20]
 800ab82:	e01a      	b.n	800abba <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 800ab84:	693b      	ldr	r3, [r7, #16]
 800ab86:	009b      	lsls	r3, r3, #2
 800ab88:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 800ab8c:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 800ab90:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	691b      	ldr	r3, [r3, #16]
 800ab98:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	695b      	ldr	r3, [r3, #20]
 800aba0:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	699b      	ldr	r3, [r3, #24]
 800aba8:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	685b      	ldr	r3, [r3, #4]
 800abb0:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	689b      	ldr	r3, [r3, #8]
 800abb8:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800abba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abbc:	0e1b      	lsrs	r3, r3, #24
 800abbe:	b2da      	uxtb	r2, r3
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800abc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abc6:	0c1b      	lsrs	r3, r3, #16
 800abc8:	b2da      	uxtb	r2, r3
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800abce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abd0:	0a1b      	lsrs	r3, r3, #8
 800abd2:	b2da      	uxtb	r2, r3
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 800abd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abda:	091b      	lsrs	r3, r3, #4
 800abdc:	b2db      	uxtb	r3, r3
 800abde:	f003 030f 	and.w	r3, r3, #15
 800abe2:	b2da      	uxtb	r2, r3
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 800abe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abea:	b2db      	uxtb	r3, r3
 800abec:	f003 030f 	and.w	r3, r3, #15
 800abf0:	b2da      	uxtb	r2, r3
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800abf6:	6a3b      	ldr	r3, [r7, #32]
 800abf8:	0e1b      	lsrs	r3, r3, #24
 800abfa:	b2da      	uxtb	r2, r3
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800ac00:	6a3b      	ldr	r3, [r7, #32]
 800ac02:	0c1b      	lsrs	r3, r3, #16
 800ac04:	b2da      	uxtb	r2, r3
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 800ac0a:	6a3b      	ldr	r3, [r7, #32]
 800ac0c:	0a1b      	lsrs	r3, r3, #8
 800ac0e:	b2da      	uxtb	r2, r3
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800ac14:	6a3b      	ldr	r3, [r7, #32]
 800ac16:	b2da      	uxtb	r2, r3
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 800ac1c:	69fb      	ldr	r3, [r7, #28]
 800ac1e:	b2da      	uxtb	r2, r3
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800ac24:	69bb      	ldr	r3, [r7, #24]
 800ac26:	0e1b      	lsrs	r3, r3, #24
 800ac28:	b2da      	uxtb	r2, r3
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800ac2e:	69bb      	ldr	r3, [r7, #24]
 800ac30:	0c1b      	lsrs	r3, r3, #16
 800ac32:	b2da      	uxtb	r2, r3
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800ac38:	69bb      	ldr	r3, [r7, #24]
 800ac3a:	0a1b      	lsrs	r3, r3, #8
 800ac3c:	b2da      	uxtb	r2, r3
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800ac42:	697b      	ldr	r3, [r7, #20]
 800ac44:	0e1b      	lsrs	r3, r3, #24
 800ac46:	b2da      	uxtb	r2, r3
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800ac4c:	697b      	ldr	r3, [r7, #20]
 800ac4e:	0c1b      	lsrs	r3, r3, #16
 800ac50:	b2da      	uxtb	r2, r3
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800ac56:	697b      	ldr	r3, [r7, #20]
 800ac58:	b2da      	uxtb	r2, r3
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 800ac5e:	2300      	movs	r3, #0
}
 800ac60:	4618      	mov	r0, r3
 800ac62:	372c      	adds	r7, #44	@ 0x2c
 800ac64:	46bd      	mov	sp, r7
 800ac66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6a:	4770      	bx	lr
 800ac6c:	58004000 	.word	0x58004000
 800ac70:	a94656b9 	.word	0xa94656b9

0800ac74 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800ac74:	b580      	push	{r7, lr}
 800ac76:	b082      	sub	sp, #8
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	6078      	str	r0, [r7, #4]
 800ac7c:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800ac7e:	683b      	ldr	r3, [r7, #0]
 800ac80:	685b      	ldr	r3, [r3, #4]
 800ac82:	4a08      	ldr	r2, [pc, #32]	@ (800aca4 <hci_init+0x30>)
 800ac84:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 800ac86:	4a08      	ldr	r2, [pc, #32]	@ (800aca8 <hci_init+0x34>)
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 800ac8c:	4806      	ldr	r0, [pc, #24]	@ (800aca8 <hci_init+0x34>)
 800ac8e:	f000 f979 	bl	800af84 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800ac92:	683b      	ldr	r3, [r7, #0]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	4618      	mov	r0, r3
 800ac98:	f000 f8da 	bl	800ae50 <TlInit>

  return;
 800ac9c:	bf00      	nop
}
 800ac9e:	3708      	adds	r7, #8
 800aca0:	46bd      	mov	sp, r7
 800aca2:	bd80      	pop	{r7, pc}
 800aca4:	20000468 	.word	0x20000468
 800aca8:	20000440 	.word	0x20000440

0800acac <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800acac:	b580      	push	{r7, lr}
 800acae:	b084      	sub	sp, #16
 800acb0:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800acb2:	4822      	ldr	r0, [pc, #136]	@ (800ad3c <hci_user_evt_proc+0x90>)
 800acb4:	f000 fdd2 	bl	800b85c <LST_is_empty>
 800acb8:	4603      	mov	r3, r0
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d12b      	bne.n	800ad16 <hci_user_evt_proc+0x6a>
 800acbe:	4b20      	ldr	r3, [pc, #128]	@ (800ad40 <hci_user_evt_proc+0x94>)
 800acc0:	781b      	ldrb	r3, [r3, #0]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d027      	beq.n	800ad16 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800acc6:	f107 030c 	add.w	r3, r7, #12
 800acca:	4619      	mov	r1, r3
 800accc:	481b      	ldr	r0, [pc, #108]	@ (800ad3c <hci_user_evt_proc+0x90>)
 800acce:	f000 fe54 	bl	800b97a <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800acd2:	4b1c      	ldr	r3, [pc, #112]	@ (800ad44 <hci_user_evt_proc+0x98>)
 800acd4:	69db      	ldr	r3, [r3, #28]
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d00c      	beq.n	800acf4 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 800acde:	2301      	movs	r3, #1
 800ace0:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800ace2:	4b18      	ldr	r3, [pc, #96]	@ (800ad44 <hci_user_evt_proc+0x98>)
 800ace4:	69db      	ldr	r3, [r3, #28]
 800ace6:	1d3a      	adds	r2, r7, #4
 800ace8:	4610      	mov	r0, r2
 800acea:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 800acec:	793a      	ldrb	r2, [r7, #4]
 800acee:	4b14      	ldr	r3, [pc, #80]	@ (800ad40 <hci_user_evt_proc+0x94>)
 800acf0:	701a      	strb	r2, [r3, #0]
 800acf2:	e002      	b.n	800acfa <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800acf4:	4b12      	ldr	r3, [pc, #72]	@ (800ad40 <hci_user_evt_proc+0x94>)
 800acf6:	2201      	movs	r2, #1
 800acf8:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 800acfa:	4b11      	ldr	r3, [pc, #68]	@ (800ad40 <hci_user_evt_proc+0x94>)
 800acfc:	781b      	ldrb	r3, [r3, #0]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d004      	beq.n	800ad0c <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	4618      	mov	r0, r3
 800ad06:	f000 fc0d 	bl	800b524 <TL_MM_EvtDone>
 800ad0a:	e004      	b.n	800ad16 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	4619      	mov	r1, r3
 800ad10:	480a      	ldr	r0, [pc, #40]	@ (800ad3c <hci_user_evt_proc+0x90>)
 800ad12:	f000 fdc5 	bl	800b8a0 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800ad16:	4809      	ldr	r0, [pc, #36]	@ (800ad3c <hci_user_evt_proc+0x90>)
 800ad18:	f000 fda0 	bl	800b85c <LST_is_empty>
 800ad1c:	4603      	mov	r3, r0
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d107      	bne.n	800ad32 <hci_user_evt_proc+0x86>
 800ad22:	4b07      	ldr	r3, [pc, #28]	@ (800ad40 <hci_user_evt_proc+0x94>)
 800ad24:	781b      	ldrb	r3, [r3, #0]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d003      	beq.n	800ad32 <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 800ad2a:	4804      	ldr	r0, [pc, #16]	@ (800ad3c <hci_user_evt_proc+0x90>)
 800ad2c:	f002 fc71 	bl	800d612 <hci_notify_asynch_evt>
  }


  return;
 800ad30:	bf00      	nop
 800ad32:	bf00      	nop
}
 800ad34:	3710      	adds	r7, #16
 800ad36:	46bd      	mov	sp, r7
 800ad38:	bd80      	pop	{r7, pc}
 800ad3a:	bf00      	nop
 800ad3c:	20000098 	.word	0x20000098
 800ad40:	200000a4 	.word	0x200000a4
 800ad44:	20000440 	.word	0x20000440

0800ad48 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 800ad48:	b580      	push	{r7, lr}
 800ad4a:	b088      	sub	sp, #32
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	6078      	str	r0, [r7, #4]
 800ad50:	460b      	mov	r3, r1
 800ad52:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 800ad54:	2000      	movs	r0, #0
 800ad56:	f000 f8d1 	bl	800aefc <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 800ad5a:	2300      	movs	r3, #0
 800ad5c:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	885b      	ldrh	r3, [r3, #2]
 800ad62:	b21b      	sxth	r3, r3
 800ad64:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ad68:	b21a      	sxth	r2, r3
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	881b      	ldrh	r3, [r3, #0]
 800ad6e:	029b      	lsls	r3, r3, #10
 800ad70:	b21b      	sxth	r3, r3
 800ad72:	4313      	orrs	r3, r2
 800ad74:	b21b      	sxth	r3, r3
 800ad76:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 800ad78:	4b33      	ldr	r3, [pc, #204]	@ (800ae48 <hci_send_req+0x100>)
 800ad7a:	2201      	movs	r2, #1
 800ad7c:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	68db      	ldr	r3, [r3, #12]
 800ad82:	b2d9      	uxtb	r1, r3
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	689a      	ldr	r2, [r3, #8]
 800ad88:	8bbb      	ldrh	r3, [r7, #28]
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	f000 f890 	bl	800aeb0 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 800ad90:	e04e      	b.n	800ae30 <hci_send_req+0xe8>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 800ad92:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 800ad96:	f002 fc53 	bl	800d640 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800ad9a:	e043      	b.n	800ae24 <hci_send_req+0xdc>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 800ad9c:	f107 030c 	add.w	r3, r7, #12
 800ada0:	4619      	mov	r1, r3
 800ada2:	482a      	ldr	r0, [pc, #168]	@ (800ae4c <hci_send_req+0x104>)
 800ada4:	f000 fde9 	bl	800b97a <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	7a5b      	ldrb	r3, [r3, #9]
 800adac:	2b0f      	cmp	r3, #15
 800adae:	d114      	bne.n	800adda <hci_send_req+0x92>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	330b      	adds	r3, #11
 800adb4:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 800adb6:	693b      	ldr	r3, [r7, #16]
 800adb8:	885b      	ldrh	r3, [r3, #2]
 800adba:	b29b      	uxth	r3, r3
 800adbc:	8bba      	ldrh	r2, [r7, #28]
 800adbe:	429a      	cmp	r2, r3
 800adc0:	d104      	bne.n	800adcc <hci_send_req+0x84>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	691b      	ldr	r3, [r3, #16]
 800adc6:	693a      	ldr	r2, [r7, #16]
 800adc8:	7812      	ldrb	r2, [r2, #0]
 800adca:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 800adcc:	693b      	ldr	r3, [r7, #16]
 800adce:	785b      	ldrb	r3, [r3, #1]
 800add0:	2b00      	cmp	r3, #0
 800add2:	d027      	beq.n	800ae24 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800add4:	2301      	movs	r3, #1
 800add6:	77fb      	strb	r3, [r7, #31]
 800add8:	e024      	b.n	800ae24 <hci_send_req+0xdc>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	330b      	adds	r3, #11
 800adde:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 800ade0:	69bb      	ldr	r3, [r7, #24]
 800ade2:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800ade6:	b29b      	uxth	r3, r3
 800ade8:	8bba      	ldrh	r2, [r7, #28]
 800adea:	429a      	cmp	r2, r3
 800adec:	d114      	bne.n	800ae18 <hci_send_req+0xd0>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	7a9b      	ldrb	r3, [r3, #10]
 800adf2:	3b03      	subs	r3, #3
 800adf4:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	695a      	ldr	r2, [r3, #20]
 800adfa:	7dfb      	ldrb	r3, [r7, #23]
 800adfc:	429a      	cmp	r2, r3
 800adfe:	bfa8      	it	ge
 800ae00:	461a      	movge	r2, r3
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	6918      	ldr	r0, [r3, #16]
 800ae0a:	69bb      	ldr	r3, [r7, #24]
 800ae0c:	1cd9      	adds	r1, r3, #3
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	695b      	ldr	r3, [r3, #20]
 800ae12:	461a      	mov	r2, r3
 800ae14:	f003 fd6b 	bl	800e8ee <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 800ae18:	69bb      	ldr	r3, [r7, #24]
 800ae1a:	781b      	ldrb	r3, [r3, #0]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d001      	beq.n	800ae24 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800ae20:	2301      	movs	r3, #1
 800ae22:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800ae24:	4809      	ldr	r0, [pc, #36]	@ (800ae4c <hci_send_req+0x104>)
 800ae26:	f000 fd19 	bl	800b85c <LST_is_empty>
 800ae2a:	4603      	mov	r3, r0
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d0b5      	beq.n	800ad9c <hci_send_req+0x54>
  while(local_cmd_status == HCI_TL_CmdBusy)
 800ae30:	7ffb      	ldrb	r3, [r7, #31]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d0ad      	beq.n	800ad92 <hci_send_req+0x4a>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 800ae36:	2001      	movs	r0, #1
 800ae38:	f000 f860 	bl	800aefc <NotifyCmdStatus>

  return 0;
 800ae3c:	2300      	movs	r3, #0
}
 800ae3e:	4618      	mov	r0, r3
 800ae40:	3720      	adds	r7, #32
 800ae42:	46bd      	mov	sp, r7
 800ae44:	bd80      	pop	{r7, pc}
 800ae46:	bf00      	nop
 800ae48:	2000046c 	.word	0x2000046c
 800ae4c:	20000460 	.word	0x20000460

0800ae50 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800ae50:	b580      	push	{r7, lr}
 800ae52:	b086      	sub	sp, #24
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 800ae58:	480f      	ldr	r0, [pc, #60]	@ (800ae98 <TlInit+0x48>)
 800ae5a:	f000 fcef 	bl	800b83c <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 800ae5e:	4a0f      	ldr	r2, [pc, #60]	@ (800ae9c <TlInit+0x4c>)
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 800ae64:	480e      	ldr	r0, [pc, #56]	@ (800aea0 <TlInit+0x50>)
 800ae66:	f000 fce9 	bl	800b83c <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800ae6a:	4b0e      	ldr	r3, [pc, #56]	@ (800aea4 <TlInit+0x54>)
 800ae6c:	2201      	movs	r2, #1
 800ae6e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 800ae70:	4b0d      	ldr	r3, [pc, #52]	@ (800aea8 <TlInit+0x58>)
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d00a      	beq.n	800ae8e <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 800ae7c:	4b0b      	ldr	r3, [pc, #44]	@ (800aeac <TlInit+0x5c>)
 800ae7e:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 800ae80:	4b09      	ldr	r3, [pc, #36]	@ (800aea8 <TlInit+0x58>)
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	f107 0208 	add.w	r2, r7, #8
 800ae88:	4610      	mov	r0, r2
 800ae8a:	4798      	blx	r3
  }

  return;
 800ae8c:	bf00      	nop
 800ae8e:	bf00      	nop
}
 800ae90:	3718      	adds	r7, #24
 800ae92:	46bd      	mov	sp, r7
 800ae94:	bd80      	pop	{r7, pc}
 800ae96:	bf00      	nop
 800ae98:	20000460 	.word	0x20000460
 800ae9c:	200000a0 	.word	0x200000a0
 800aea0:	20000098 	.word	0x20000098
 800aea4:	200000a4 	.word	0x200000a4
 800aea8:	20000440 	.word	0x20000440
 800aeac:	0800af3d 	.word	0x0800af3d

0800aeb0 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 800aeb0:	b580      	push	{r7, lr}
 800aeb2:	b082      	sub	sp, #8
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	4603      	mov	r3, r0
 800aeb8:	603a      	str	r2, [r7, #0]
 800aeba:	80fb      	strh	r3, [r7, #6]
 800aebc:	460b      	mov	r3, r1
 800aebe:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 800aec0:	4b0c      	ldr	r3, [pc, #48]	@ (800aef4 <SendCmd+0x44>)
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	88fa      	ldrh	r2, [r7, #6]
 800aec6:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 800aeca:	4b0a      	ldr	r3, [pc, #40]	@ (800aef4 <SendCmd+0x44>)
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	797a      	ldrb	r2, [r7, #5]
 800aed0:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 800aed2:	4b08      	ldr	r3, [pc, #32]	@ (800aef4 <SendCmd+0x44>)
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	330c      	adds	r3, #12
 800aed8:	797a      	ldrb	r2, [r7, #5]
 800aeda:	6839      	ldr	r1, [r7, #0]
 800aedc:	4618      	mov	r0, r3
 800aede:	f003 fd06 	bl	800e8ee <memcpy>

  hciContext.io.Send(0,0);
 800aee2:	4b05      	ldr	r3, [pc, #20]	@ (800aef8 <SendCmd+0x48>)
 800aee4:	691b      	ldr	r3, [r3, #16]
 800aee6:	2100      	movs	r1, #0
 800aee8:	2000      	movs	r0, #0
 800aeea:	4798      	blx	r3

  return;
 800aeec:	bf00      	nop
}
 800aeee:	3708      	adds	r7, #8
 800aef0:	46bd      	mov	sp, r7
 800aef2:	bd80      	pop	{r7, pc}
 800aef4:	200000a0 	.word	0x200000a0
 800aef8:	20000440 	.word	0x20000440

0800aefc <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 800aefc:	b580      	push	{r7, lr}
 800aefe:	b082      	sub	sp, #8
 800af00:	af00      	add	r7, sp, #0
 800af02:	4603      	mov	r3, r0
 800af04:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 800af06:	79fb      	ldrb	r3, [r7, #7]
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d108      	bne.n	800af1e <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 800af0c:	4b0a      	ldr	r3, [pc, #40]	@ (800af38 <NotifyCmdStatus+0x3c>)
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	2b00      	cmp	r3, #0
 800af12:	d00d      	beq.n	800af30 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 800af14:	4b08      	ldr	r3, [pc, #32]	@ (800af38 <NotifyCmdStatus+0x3c>)
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	2000      	movs	r0, #0
 800af1a:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 800af1c:	e008      	b.n	800af30 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 800af1e:	4b06      	ldr	r3, [pc, #24]	@ (800af38 <NotifyCmdStatus+0x3c>)
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	2b00      	cmp	r3, #0
 800af24:	d004      	beq.n	800af30 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 800af26:	4b04      	ldr	r3, [pc, #16]	@ (800af38 <NotifyCmdStatus+0x3c>)
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	2001      	movs	r0, #1
 800af2c:	4798      	blx	r3
  return;
 800af2e:	bf00      	nop
 800af30:	bf00      	nop
}
 800af32:	3708      	adds	r7, #8
 800af34:	46bd      	mov	sp, r7
 800af36:	bd80      	pop	{r7, pc}
 800af38:	20000468 	.word	0x20000468

0800af3c <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b082      	sub	sp, #8
 800af40:	af00      	add	r7, sp, #0
 800af42:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	7a5b      	ldrb	r3, [r3, #9]
 800af48:	2b0f      	cmp	r3, #15
 800af4a:	d003      	beq.n	800af54 <TlEvtReceived+0x18>
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	7a5b      	ldrb	r3, [r3, #9]
 800af50:	2b0e      	cmp	r3, #14
 800af52:	d107      	bne.n	800af64 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 800af54:	6879      	ldr	r1, [r7, #4]
 800af56:	4809      	ldr	r0, [pc, #36]	@ (800af7c <TlEvtReceived+0x40>)
 800af58:	f000 fcc8 	bl	800b8ec <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 800af5c:	2000      	movs	r0, #0
 800af5e:	f002 fb64 	bl	800d62a <hci_cmd_resp_release>
 800af62:	e006      	b.n	800af72 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 800af64:	6879      	ldr	r1, [r7, #4]
 800af66:	4806      	ldr	r0, [pc, #24]	@ (800af80 <TlEvtReceived+0x44>)
 800af68:	f000 fcc0 	bl	800b8ec <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800af6c:	4804      	ldr	r0, [pc, #16]	@ (800af80 <TlEvtReceived+0x44>)
 800af6e:	f002 fb50 	bl	800d612 <hci_notify_asynch_evt>
  }

  return;
 800af72:	bf00      	nop
}
 800af74:	3708      	adds	r7, #8
 800af76:	46bd      	mov	sp, r7
 800af78:	bd80      	pop	{r7, pc}
 800af7a:	bf00      	nop
 800af7c:	20000460 	.word	0x20000460
 800af80:	20000098 	.word	0x20000098

0800af84 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 800af84:	b480      	push	{r7}
 800af86:	b083      	sub	sp, #12
 800af88:	af00      	add	r7, sp, #0
 800af8a:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	4a05      	ldr	r2, [pc, #20]	@ (800afa4 <hci_register_io_bus+0x20>)
 800af90:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	4a04      	ldr	r2, [pc, #16]	@ (800afa8 <hci_register_io_bus+0x24>)
 800af96:	611a      	str	r2, [r3, #16]

  return;
 800af98:	bf00      	nop
}
 800af9a:	370c      	adds	r7, #12
 800af9c:	46bd      	mov	sp, r7
 800af9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa2:	4770      	bx	lr
 800afa4:	0800b29d 	.word	0x0800b29d
 800afa8:	0800b305 	.word	0x0800b305

0800afac <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800afac:	b580      	push	{r7, lr}
 800afae:	b082      	sub	sp, #8
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	6078      	str	r0, [r7, #4]
 800afb4:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800afb6:	683b      	ldr	r3, [r7, #0]
 800afb8:	685b      	ldr	r3, [r3, #4]
 800afba:	4a08      	ldr	r2, [pc, #32]	@ (800afdc <shci_init+0x30>)
 800afbc:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800afbe:	4a08      	ldr	r2, [pc, #32]	@ (800afe0 <shci_init+0x34>)
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800afc4:	4806      	ldr	r0, [pc, #24]	@ (800afe0 <shci_init+0x34>)
 800afc6:	f000 f915 	bl	800b1f4 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800afca:	683b      	ldr	r3, [r7, #0]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	4618      	mov	r0, r3
 800afd0:	f000 f898 	bl	800b104 <TlInit>

  return;
 800afd4:	bf00      	nop
}
 800afd6:	3708      	adds	r7, #8
 800afd8:	46bd      	mov	sp, r7
 800afda:	bd80      	pop	{r7, pc}
 800afdc:	20000490 	.word	0x20000490
 800afe0:	20000470 	.word	0x20000470

0800afe4 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800afe4:	b580      	push	{r7, lr}
 800afe6:	b084      	sub	sp, #16
 800afe8:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800afea:	4822      	ldr	r0, [pc, #136]	@ (800b074 <shci_user_evt_proc+0x90>)
 800afec:	f000 fc36 	bl	800b85c <LST_is_empty>
 800aff0:	4603      	mov	r3, r0
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d12b      	bne.n	800b04e <shci_user_evt_proc+0x6a>
 800aff6:	4b20      	ldr	r3, [pc, #128]	@ (800b078 <shci_user_evt_proc+0x94>)
 800aff8:	781b      	ldrb	r3, [r3, #0]
 800affa:	2b00      	cmp	r3, #0
 800affc:	d027      	beq.n	800b04e <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800affe:	f107 030c 	add.w	r3, r7, #12
 800b002:	4619      	mov	r1, r3
 800b004:	481b      	ldr	r0, [pc, #108]	@ (800b074 <shci_user_evt_proc+0x90>)
 800b006:	f000 fcb8 	bl	800b97a <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 800b00a:	4b1c      	ldr	r3, [pc, #112]	@ (800b07c <shci_user_evt_proc+0x98>)
 800b00c:	69db      	ldr	r3, [r3, #28]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d00c      	beq.n	800b02c <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800b016:	2301      	movs	r3, #1
 800b018:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800b01a:	4b18      	ldr	r3, [pc, #96]	@ (800b07c <shci_user_evt_proc+0x98>)
 800b01c:	69db      	ldr	r3, [r3, #28]
 800b01e:	1d3a      	adds	r2, r7, #4
 800b020:	4610      	mov	r0, r2
 800b022:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800b024:	793a      	ldrb	r2, [r7, #4]
 800b026:	4b14      	ldr	r3, [pc, #80]	@ (800b078 <shci_user_evt_proc+0x94>)
 800b028:	701a      	strb	r2, [r3, #0]
 800b02a:	e002      	b.n	800b032 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800b02c:	4b12      	ldr	r3, [pc, #72]	@ (800b078 <shci_user_evt_proc+0x94>)
 800b02e:	2201      	movs	r2, #1
 800b030:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800b032:	4b11      	ldr	r3, [pc, #68]	@ (800b078 <shci_user_evt_proc+0x94>)
 800b034:	781b      	ldrb	r3, [r3, #0]
 800b036:	2b00      	cmp	r3, #0
 800b038:	d004      	beq.n	800b044 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	4618      	mov	r0, r3
 800b03e:	f000 fa71 	bl	800b524 <TL_MM_EvtDone>
 800b042:	e004      	b.n	800b04e <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	4619      	mov	r1, r3
 800b048:	480a      	ldr	r0, [pc, #40]	@ (800b074 <shci_user_evt_proc+0x90>)
 800b04a:	f000 fc29 	bl	800b8a0 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800b04e:	4809      	ldr	r0, [pc, #36]	@ (800b074 <shci_user_evt_proc+0x90>)
 800b050:	f000 fc04 	bl	800b85c <LST_is_empty>
 800b054:	4603      	mov	r3, r0
 800b056:	2b00      	cmp	r3, #0
 800b058:	d107      	bne.n	800b06a <shci_user_evt_proc+0x86>
 800b05a:	4b07      	ldr	r3, [pc, #28]	@ (800b078 <shci_user_evt_proc+0x94>)
 800b05c:	781b      	ldrb	r3, [r3, #0]
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d003      	beq.n	800b06a <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800b062:	4804      	ldr	r0, [pc, #16]	@ (800b074 <shci_user_evt_proc+0x90>)
 800b064:	f7f6 fa57 	bl	8001516 <shci_notify_asynch_evt>
  }


  return;
 800b068:	bf00      	nop
 800b06a:	bf00      	nop
}
 800b06c:	3710      	adds	r7, #16
 800b06e:	46bd      	mov	sp, r7
 800b070:	bd80      	pop	{r7, pc}
 800b072:	bf00      	nop
 800b074:	200000a8 	.word	0x200000a8
 800b078:	200000b8 	.word	0x200000b8
 800b07c:	20000470 	.word	0x20000470

0800b080 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800b080:	b580      	push	{r7, lr}
 800b082:	b084      	sub	sp, #16
 800b084:	af00      	add	r7, sp, #0
 800b086:	60ba      	str	r2, [r7, #8]
 800b088:	607b      	str	r3, [r7, #4]
 800b08a:	4603      	mov	r3, r0
 800b08c:	81fb      	strh	r3, [r7, #14]
 800b08e:	460b      	mov	r3, r1
 800b090:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800b092:	2000      	movs	r0, #0
 800b094:	f000 f868 	bl	800b168 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800b098:	4b17      	ldr	r3, [pc, #92]	@ (800b0f8 <shci_send+0x78>)
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	89fa      	ldrh	r2, [r7, #14]
 800b09e:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800b0a2:	4b15      	ldr	r3, [pc, #84]	@ (800b0f8 <shci_send+0x78>)
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	7b7a      	ldrb	r2, [r7, #13]
 800b0a8:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800b0aa:	4b13      	ldr	r3, [pc, #76]	@ (800b0f8 <shci_send+0x78>)
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	330c      	adds	r3, #12
 800b0b0:	7b7a      	ldrb	r2, [r7, #13]
 800b0b2:	68b9      	ldr	r1, [r7, #8]
 800b0b4:	4618      	mov	r0, r3
 800b0b6:	f003 fc1a 	bl	800e8ee <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 800b0ba:	4b10      	ldr	r3, [pc, #64]	@ (800b0fc <shci_send+0x7c>)
 800b0bc:	2201      	movs	r2, #1
 800b0be:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 800b0c0:	4b0f      	ldr	r3, [pc, #60]	@ (800b100 <shci_send+0x80>)
 800b0c2:	691b      	ldr	r3, [r3, #16]
 800b0c4:	2100      	movs	r1, #0
 800b0c6:	2000      	movs	r0, #0
 800b0c8:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800b0ca:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 800b0ce:	f7f6 fa39 	bl	8001544 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	f103 0008 	add.w	r0, r3, #8
 800b0d8:	4b07      	ldr	r3, [pc, #28]	@ (800b0f8 <shci_send+0x78>)
 800b0da:	6819      	ldr	r1, [r3, #0]
 800b0dc:	4b06      	ldr	r3, [pc, #24]	@ (800b0f8 <shci_send+0x78>)
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	789b      	ldrb	r3, [r3, #2]
 800b0e2:	3303      	adds	r3, #3
 800b0e4:	461a      	mov	r2, r3
 800b0e6:	f003 fc02 	bl	800e8ee <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800b0ea:	2001      	movs	r0, #1
 800b0ec:	f000 f83c 	bl	800b168 <Cmd_SetStatus>

  return;
 800b0f0:	bf00      	nop
}
 800b0f2:	3710      	adds	r7, #16
 800b0f4:	46bd      	mov	sp, r7
 800b0f6:	bd80      	pop	{r7, pc}
 800b0f8:	200000b4 	.word	0x200000b4
 800b0fc:	20000494 	.word	0x20000494
 800b100:	20000470 	.word	0x20000470

0800b104 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800b104:	b580      	push	{r7, lr}
 800b106:	b086      	sub	sp, #24
 800b108:	af00      	add	r7, sp, #0
 800b10a:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800b10c:	4a10      	ldr	r2, [pc, #64]	@ (800b150 <TlInit+0x4c>)
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800b112:	4810      	ldr	r0, [pc, #64]	@ (800b154 <TlInit+0x50>)
 800b114:	f000 fb92 	bl	800b83c <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800b118:	2001      	movs	r0, #1
 800b11a:	f000 f825 	bl	800b168 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800b11e:	4b0e      	ldr	r3, [pc, #56]	@ (800b158 <TlInit+0x54>)
 800b120:	2201      	movs	r2, #1
 800b122:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800b124:	4b0d      	ldr	r3, [pc, #52]	@ (800b15c <TlInit+0x58>)
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d00c      	beq.n	800b146 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800b130:	4b0b      	ldr	r3, [pc, #44]	@ (800b160 <TlInit+0x5c>)
 800b132:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800b134:	4b0b      	ldr	r3, [pc, #44]	@ (800b164 <TlInit+0x60>)
 800b136:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800b138:	4b08      	ldr	r3, [pc, #32]	@ (800b15c <TlInit+0x58>)
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	f107 020c 	add.w	r2, r7, #12
 800b140:	4610      	mov	r0, r2
 800b142:	4798      	blx	r3
  }

  return;
 800b144:	bf00      	nop
 800b146:	bf00      	nop
}
 800b148:	3718      	adds	r7, #24
 800b14a:	46bd      	mov	sp, r7
 800b14c:	bd80      	pop	{r7, pc}
 800b14e:	bf00      	nop
 800b150:	200000b4 	.word	0x200000b4
 800b154:	200000a8 	.word	0x200000a8
 800b158:	200000b8 	.word	0x200000b8
 800b15c:	20000470 	.word	0x20000470
 800b160:	0800b1b9 	.word	0x0800b1b9
 800b164:	0800b1d1 	.word	0x0800b1d1

0800b168 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800b168:	b580      	push	{r7, lr}
 800b16a:	b082      	sub	sp, #8
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	4603      	mov	r3, r0
 800b170:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800b172:	79fb      	ldrb	r3, [r7, #7]
 800b174:	2b00      	cmp	r3, #0
 800b176:	d10b      	bne.n	800b190 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800b178:	4b0d      	ldr	r3, [pc, #52]	@ (800b1b0 <Cmd_SetStatus+0x48>)
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d003      	beq.n	800b188 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800b180:	4b0b      	ldr	r3, [pc, #44]	@ (800b1b0 <Cmd_SetStatus+0x48>)
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	2000      	movs	r0, #0
 800b186:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800b188:	4b0a      	ldr	r3, [pc, #40]	@ (800b1b4 <Cmd_SetStatus+0x4c>)
 800b18a:	2200      	movs	r2, #0
 800b18c:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800b18e:	e00b      	b.n	800b1a8 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800b190:	4b08      	ldr	r3, [pc, #32]	@ (800b1b4 <Cmd_SetStatus+0x4c>)
 800b192:	2201      	movs	r2, #1
 800b194:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800b196:	4b06      	ldr	r3, [pc, #24]	@ (800b1b0 <Cmd_SetStatus+0x48>)
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d004      	beq.n	800b1a8 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800b19e:	4b04      	ldr	r3, [pc, #16]	@ (800b1b0 <Cmd_SetStatus+0x48>)
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	2001      	movs	r0, #1
 800b1a4:	4798      	blx	r3
  return;
 800b1a6:	bf00      	nop
 800b1a8:	bf00      	nop
}
 800b1aa:	3708      	adds	r7, #8
 800b1ac:	46bd      	mov	sp, r7
 800b1ae:	bd80      	pop	{r7, pc}
 800b1b0:	20000490 	.word	0x20000490
 800b1b4:	200000b0 	.word	0x200000b0

0800b1b8 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800b1b8:	b580      	push	{r7, lr}
 800b1ba:	b082      	sub	sp, #8
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800b1c0:	2000      	movs	r0, #0
 800b1c2:	f7f6 f9b4 	bl	800152e <shci_cmd_resp_release>

  return;
 800b1c6:	bf00      	nop
}
 800b1c8:	3708      	adds	r7, #8
 800b1ca:	46bd      	mov	sp, r7
 800b1cc:	bd80      	pop	{r7, pc}
	...

0800b1d0 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800b1d0:	b580      	push	{r7, lr}
 800b1d2:	b082      	sub	sp, #8
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800b1d8:	6879      	ldr	r1, [r7, #4]
 800b1da:	4805      	ldr	r0, [pc, #20]	@ (800b1f0 <TlUserEvtReceived+0x20>)
 800b1dc:	f000 fb86 	bl	800b8ec <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800b1e0:	4803      	ldr	r0, [pc, #12]	@ (800b1f0 <TlUserEvtReceived+0x20>)
 800b1e2:	f7f6 f998 	bl	8001516 <shci_notify_asynch_evt>

  return;
 800b1e6:	bf00      	nop
}
 800b1e8:	3708      	adds	r7, #8
 800b1ea:	46bd      	mov	sp, r7
 800b1ec:	bd80      	pop	{r7, pc}
 800b1ee:	bf00      	nop
 800b1f0:	200000a8 	.word	0x200000a8

0800b1f4 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800b1f4:	b480      	push	{r7}
 800b1f6:	b083      	sub	sp, #12
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	4a05      	ldr	r2, [pc, #20]	@ (800b214 <shci_register_io_bus+0x20>)
 800b200:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	4a04      	ldr	r2, [pc, #16]	@ (800b218 <shci_register_io_bus+0x24>)
 800b206:	611a      	str	r2, [r3, #16]

  return;
 800b208:	bf00      	nop
}
 800b20a:	370c      	adds	r7, #12
 800b20c:	46bd      	mov	sp, r7
 800b20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b212:	4770      	bx	lr
 800b214:	0800b3b1 	.word	0x0800b3b1
 800b218:	0800b405 	.word	0x0800b405

0800b21c <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 800b21c:	b580      	push	{r7, lr}
 800b21e:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800b220:	f002 fd90 	bl	800dd44 <HW_IPCC_Enable>

  return;
 800b224:	bf00      	nop
}
 800b226:	bd80      	pop	{r7, pc}

0800b228 <TL_Init>:


void TL_Init( void )
{
 800b228:	b580      	push	{r7, lr}
 800b22a:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800b22c:	4b10      	ldr	r3, [pc, #64]	@ (800b270 <TL_Init+0x48>)
 800b22e:	4a11      	ldr	r2, [pc, #68]	@ (800b274 <TL_Init+0x4c>)
 800b230:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800b232:	4b0f      	ldr	r3, [pc, #60]	@ (800b270 <TL_Init+0x48>)
 800b234:	4a10      	ldr	r2, [pc, #64]	@ (800b278 <TL_Init+0x50>)
 800b236:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800b238:	4b0d      	ldr	r3, [pc, #52]	@ (800b270 <TL_Init+0x48>)
 800b23a:	4a10      	ldr	r2, [pc, #64]	@ (800b27c <TL_Init+0x54>)
 800b23c:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800b23e:	4b0c      	ldr	r3, [pc, #48]	@ (800b270 <TL_Init+0x48>)
 800b240:	4a0f      	ldr	r2, [pc, #60]	@ (800b280 <TL_Init+0x58>)
 800b242:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 800b244:	4b0a      	ldr	r3, [pc, #40]	@ (800b270 <TL_Init+0x48>)
 800b246:	4a0f      	ldr	r2, [pc, #60]	@ (800b284 <TL_Init+0x5c>)
 800b248:	625a      	str	r2, [r3, #36]	@ 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800b24a:	4b09      	ldr	r3, [pc, #36]	@ (800b270 <TL_Init+0x48>)
 800b24c:	4a0e      	ldr	r2, [pc, #56]	@ (800b288 <TL_Init+0x60>)
 800b24e:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800b250:	4b07      	ldr	r3, [pc, #28]	@ (800b270 <TL_Init+0x48>)
 800b252:	4a0e      	ldr	r2, [pc, #56]	@ (800b28c <TL_Init+0x64>)
 800b254:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800b256:	4b06      	ldr	r3, [pc, #24]	@ (800b270 <TL_Init+0x48>)
 800b258:	4a0d      	ldr	r2, [pc, #52]	@ (800b290 <TL_Init+0x68>)
 800b25a:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800b25c:	4b04      	ldr	r3, [pc, #16]	@ (800b270 <TL_Init+0x48>)
 800b25e:	4a0d      	ldr	r2, [pc, #52]	@ (800b294 <TL_Init+0x6c>)
 800b260:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800b262:	4b03      	ldr	r3, [pc, #12]	@ (800b270 <TL_Init+0x48>)
 800b264:	4a0c      	ldr	r2, [pc, #48]	@ (800b298 <TL_Init+0x70>)
 800b266:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800b268:	f002 fd80 	bl	800dd6c <HW_IPCC_Init>

  return;
 800b26c:	bf00      	nop
}
 800b26e:	bd80      	pop	{r7, pc}
 800b270:	20030000 	.word	0x20030000
 800b274:	20030028 	.word	0x20030028
 800b278:	20030048 	.word	0x20030048
 800b27c:	20030058 	.word	0x20030058
 800b280:	20030068 	.word	0x20030068
 800b284:	20030070 	.word	0x20030070
 800b288:	20030078 	.word	0x20030078
 800b28c:	20030080 	.word	0x20030080
 800b290:	2003009c 	.word	0x2003009c
 800b294:	200300a0 	.word	0x200300a0
 800b298:	200300ac 	.word	0x200300ac

0800b29c <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 800b29c:	b580      	push	{r7, lr}
 800b29e:	b084      	sub	sp, #16
 800b2a0:	af00      	add	r7, sp, #0
 800b2a2:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 800b2a8:	4811      	ldr	r0, [pc, #68]	@ (800b2f0 <TL_BLE_Init+0x54>)
 800b2aa:	f000 fac7 	bl	800b83c <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800b2ae:	4b11      	ldr	r3, [pc, #68]	@ (800b2f4 <TL_BLE_Init+0x58>)
 800b2b0:	685b      	ldr	r3, [r3, #4]
 800b2b2:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	689a      	ldr	r2, [r3, #8]
 800b2b8:	68bb      	ldr	r3, [r7, #8]
 800b2ba:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	68da      	ldr	r2, [r3, #12]
 800b2c0:	68bb      	ldr	r3, [r7, #8]
 800b2c2:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800b2c4:	68bb      	ldr	r3, [r7, #8]
 800b2c6:	4a0c      	ldr	r2, [pc, #48]	@ (800b2f8 <TL_BLE_Init+0x5c>)
 800b2c8:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800b2ca:	68bb      	ldr	r3, [r7, #8]
 800b2cc:	4a08      	ldr	r2, [pc, #32]	@ (800b2f0 <TL_BLE_Init+0x54>)
 800b2ce:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 800b2d0:	f002 fd62 	bl	800dd98 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	4a08      	ldr	r2, [pc, #32]	@ (800b2fc <TL_BLE_Init+0x60>)
 800b2da:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	685b      	ldr	r3, [r3, #4]
 800b2e0:	4a07      	ldr	r2, [pc, #28]	@ (800b300 <TL_BLE_Init+0x64>)
 800b2e2:	6013      	str	r3, [r2, #0]

  return 0;
 800b2e4:	2300      	movs	r3, #0
}
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	3710      	adds	r7, #16
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	bd80      	pop	{r7, pc}
 800b2ee:	bf00      	nop
 800b2f0:	200300c8 	.word	0x200300c8
 800b2f4:	20030000 	.word	0x20030000
 800b2f8:	20030d7c 	.word	0x20030d7c
 800b2fc:	200004a0 	.word	0x200004a0
 800b300:	200004a4 	.word	0x200004a4

0800b304 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 800b304:	b580      	push	{r7, lr}
 800b306:	b082      	sub	sp, #8
 800b308:	af00      	add	r7, sp, #0
 800b30a:	6078      	str	r0, [r7, #4]
 800b30c:	460b      	mov	r3, r1
 800b30e:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800b310:	4b09      	ldr	r3, [pc, #36]	@ (800b338 <TL_BLE_SendCmd+0x34>)
 800b312:	685b      	ldr	r3, [r3, #4]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	2201      	movs	r2, #1
 800b318:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 800b31a:	4b07      	ldr	r3, [pc, #28]	@ (800b338 <TL_BLE_SendCmd+0x34>)
 800b31c:	685b      	ldr	r3, [r3, #4]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	4619      	mov	r1, r3
 800b322:	2001      	movs	r0, #1
 800b324:	f000 f96c 	bl	800b600 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 800b328:	f002 fd40 	bl	800ddac <HW_IPCC_BLE_SendCmd>

  return 0;
 800b32c:	2300      	movs	r3, #0
}
 800b32e:	4618      	mov	r0, r3
 800b330:	3708      	adds	r7, #8
 800b332:	46bd      	mov	sp, r7
 800b334:	bd80      	pop	{r7, pc}
 800b336:	bf00      	nop
 800b338:	20030000 	.word	0x20030000

0800b33c <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 800b33c:	b580      	push	{r7, lr}
 800b33e:	b082      	sub	sp, #8
 800b340:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800b342:	e01c      	b.n	800b37e <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800b344:	1d3b      	adds	r3, r7, #4
 800b346:	4619      	mov	r1, r3
 800b348:	4812      	ldr	r0, [pc, #72]	@ (800b394 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800b34a:	f000 fb16 	bl	800b97a <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	7a5b      	ldrb	r3, [r3, #9]
 800b352:	2b0f      	cmp	r3, #15
 800b354:	d003      	beq.n	800b35e <HW_IPCC_BLE_RxEvtNot+0x22>
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	7a5b      	ldrb	r3, [r3, #9]
 800b35a:	2b0e      	cmp	r3, #14
 800b35c:	d105      	bne.n	800b36a <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	4619      	mov	r1, r3
 800b362:	2002      	movs	r0, #2
 800b364:	f000 f94c 	bl	800b600 <OutputDbgTrace>
 800b368:	e004      	b.n	800b374 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	4619      	mov	r1, r3
 800b36e:	2003      	movs	r0, #3
 800b370:	f000 f946 	bl	800b600 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 800b374:	4b08      	ldr	r3, [pc, #32]	@ (800b398 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	687a      	ldr	r2, [r7, #4]
 800b37a:	4610      	mov	r0, r2
 800b37c:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800b37e:	4805      	ldr	r0, [pc, #20]	@ (800b394 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800b380:	f000 fa6c 	bl	800b85c <LST_is_empty>
 800b384:	4603      	mov	r3, r0
 800b386:	2b00      	cmp	r3, #0
 800b388:	d0dc      	beq.n	800b344 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800b38a:	bf00      	nop
}
 800b38c:	3708      	adds	r7, #8
 800b38e:	46bd      	mov	sp, r7
 800b390:	bd80      	pop	{r7, pc}
 800b392:	bf00      	nop
 800b394:	200300c8 	.word	0x200300c8
 800b398:	200004a0 	.word	0x200004a0

0800b39c <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800b39c:	b580      	push	{r7, lr}
 800b39e:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800b3a0:	4b02      	ldr	r3, [pc, #8]	@ (800b3ac <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	4798      	blx	r3

  return;
 800b3a6:	bf00      	nop
}
 800b3a8:	bd80      	pop	{r7, pc}
 800b3aa:	bf00      	nop
 800b3ac:	200004a4 	.word	0x200004a4

0800b3b0 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800b3b0:	b580      	push	{r7, lr}
 800b3b2:	b084      	sub	sp, #16
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800b3bc:	480d      	ldr	r0, [pc, #52]	@ (800b3f4 <TL_SYS_Init+0x44>)
 800b3be:	f000 fa3d 	bl	800b83c <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800b3c2:	4b0d      	ldr	r3, [pc, #52]	@ (800b3f8 <TL_SYS_Init+0x48>)
 800b3c4:	68db      	ldr	r3, [r3, #12]
 800b3c6:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	689a      	ldr	r2, [r3, #8]
 800b3cc:	68bb      	ldr	r3, [r7, #8]
 800b3ce:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800b3d0:	68bb      	ldr	r3, [r7, #8]
 800b3d2:	4a08      	ldr	r2, [pc, #32]	@ (800b3f4 <TL_SYS_Init+0x44>)
 800b3d4:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800b3d6:	f002 fd0b 	bl	800ddf0 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	4a07      	ldr	r2, [pc, #28]	@ (800b3fc <TL_SYS_Init+0x4c>)
 800b3e0:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	685b      	ldr	r3, [r3, #4]
 800b3e6:	4a06      	ldr	r2, [pc, #24]	@ (800b400 <TL_SYS_Init+0x50>)
 800b3e8:	6013      	str	r3, [r2, #0]

  return 0;
 800b3ea:	2300      	movs	r3, #0
}
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	3710      	adds	r7, #16
 800b3f0:	46bd      	mov	sp, r7
 800b3f2:	bd80      	pop	{r7, pc}
 800b3f4:	200300d0 	.word	0x200300d0
 800b3f8:	20030000 	.word	0x20030000
 800b3fc:	200004a8 	.word	0x200004a8
 800b400:	200004ac 	.word	0x200004ac

0800b404 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800b404:	b580      	push	{r7, lr}
 800b406:	b082      	sub	sp, #8
 800b408:	af00      	add	r7, sp, #0
 800b40a:	6078      	str	r0, [r7, #4]
 800b40c:	460b      	mov	r3, r1
 800b40e:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800b410:	4b09      	ldr	r3, [pc, #36]	@ (800b438 <TL_SYS_SendCmd+0x34>)
 800b412:	68db      	ldr	r3, [r3, #12]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	2210      	movs	r2, #16
 800b418:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800b41a:	4b07      	ldr	r3, [pc, #28]	@ (800b438 <TL_SYS_SendCmd+0x34>)
 800b41c:	68db      	ldr	r3, [r3, #12]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	4619      	mov	r1, r3
 800b422:	2004      	movs	r0, #4
 800b424:	f000 f8ec 	bl	800b600 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 800b428:	f002 fcec 	bl	800de04 <HW_IPCC_SYS_SendCmd>

  return 0;
 800b42c:	2300      	movs	r3, #0
}
 800b42e:	4618      	mov	r0, r3
 800b430:	3708      	adds	r7, #8
 800b432:	46bd      	mov	sp, r7
 800b434:	bd80      	pop	{r7, pc}
 800b436:	bf00      	nop
 800b438:	20030000 	.word	0x20030000

0800b43c <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800b43c:	b580      	push	{r7, lr}
 800b43e:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800b440:	4b07      	ldr	r3, [pc, #28]	@ (800b460 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800b442:	68db      	ldr	r3, [r3, #12]
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	4619      	mov	r1, r3
 800b448:	2005      	movs	r0, #5
 800b44a:	f000 f8d9 	bl	800b600 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800b44e:	4b05      	ldr	r3, [pc, #20]	@ (800b464 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	4a03      	ldr	r2, [pc, #12]	@ (800b460 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800b454:	68d2      	ldr	r2, [r2, #12]
 800b456:	6812      	ldr	r2, [r2, #0]
 800b458:	4610      	mov	r0, r2
 800b45a:	4798      	blx	r3

  return;
 800b45c:	bf00      	nop
}
 800b45e:	bd80      	pop	{r7, pc}
 800b460:	20030000 	.word	0x20030000
 800b464:	200004a8 	.word	0x200004a8

0800b468 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800b468:	b580      	push	{r7, lr}
 800b46a:	b082      	sub	sp, #8
 800b46c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800b46e:	e00e      	b.n	800b48e <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800b470:	1d3b      	adds	r3, r7, #4
 800b472:	4619      	mov	r1, r3
 800b474:	480b      	ldr	r0, [pc, #44]	@ (800b4a4 <HW_IPCC_SYS_EvtNot+0x3c>)
 800b476:	f000 fa80 	bl	800b97a <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	4619      	mov	r1, r3
 800b47e:	2006      	movs	r0, #6
 800b480:	f000 f8be 	bl	800b600 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 800b484:	4b08      	ldr	r3, [pc, #32]	@ (800b4a8 <HW_IPCC_SYS_EvtNot+0x40>)
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	687a      	ldr	r2, [r7, #4]
 800b48a:	4610      	mov	r0, r2
 800b48c:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800b48e:	4805      	ldr	r0, [pc, #20]	@ (800b4a4 <HW_IPCC_SYS_EvtNot+0x3c>)
 800b490:	f000 f9e4 	bl	800b85c <LST_is_empty>
 800b494:	4603      	mov	r3, r0
 800b496:	2b00      	cmp	r3, #0
 800b498:	d0ea      	beq.n	800b470 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800b49a:	bf00      	nop
}
 800b49c:	3708      	adds	r7, #8
 800b49e:	46bd      	mov	sp, r7
 800b4a0:	bd80      	pop	{r7, pc}
 800b4a2:	bf00      	nop
 800b4a4:	200300d0 	.word	0x200300d0
 800b4a8:	200004ac 	.word	0x200004ac

0800b4ac <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800b4ac:	b580      	push	{r7, lr}
 800b4ae:	b082      	sub	sp, #8
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800b4b4:	4817      	ldr	r0, [pc, #92]	@ (800b514 <TL_MM_Init+0x68>)
 800b4b6:	f000 f9c1 	bl	800b83c <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800b4ba:	4817      	ldr	r0, [pc, #92]	@ (800b518 <TL_MM_Init+0x6c>)
 800b4bc:	f000 f9be 	bl	800b83c <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800b4c0:	4b16      	ldr	r3, [pc, #88]	@ (800b51c <TL_MM_Init+0x70>)
 800b4c2:	691b      	ldr	r3, [r3, #16]
 800b4c4:	4a16      	ldr	r2, [pc, #88]	@ (800b520 <TL_MM_Init+0x74>)
 800b4c6:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800b4c8:	4b15      	ldr	r3, [pc, #84]	@ (800b520 <TL_MM_Init+0x74>)
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	687a      	ldr	r2, [r7, #4]
 800b4ce:	6892      	ldr	r2, [r2, #8]
 800b4d0:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800b4d2:	4b13      	ldr	r3, [pc, #76]	@ (800b520 <TL_MM_Init+0x74>)
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	687a      	ldr	r2, [r7, #4]
 800b4d8:	68d2      	ldr	r2, [r2, #12]
 800b4da:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800b4dc:	4b10      	ldr	r3, [pc, #64]	@ (800b520 <TL_MM_Init+0x74>)
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	4a0c      	ldr	r2, [pc, #48]	@ (800b514 <TL_MM_Init+0x68>)
 800b4e2:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800b4e4:	4b0e      	ldr	r3, [pc, #56]	@ (800b520 <TL_MM_Init+0x74>)
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	687a      	ldr	r2, [r7, #4]
 800b4ea:	6812      	ldr	r2, [r2, #0]
 800b4ec:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800b4ee:	4b0c      	ldr	r3, [pc, #48]	@ (800b520 <TL_MM_Init+0x74>)
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	687a      	ldr	r2, [r7, #4]
 800b4f4:	6852      	ldr	r2, [r2, #4]
 800b4f6:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800b4f8:	4b09      	ldr	r3, [pc, #36]	@ (800b520 <TL_MM_Init+0x74>)
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	687a      	ldr	r2, [r7, #4]
 800b4fe:	6912      	ldr	r2, [r2, #16]
 800b500:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800b502:	4b07      	ldr	r3, [pc, #28]	@ (800b520 <TL_MM_Init+0x74>)
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	687a      	ldr	r2, [r7, #4]
 800b508:	6952      	ldr	r2, [r2, #20]
 800b50a:	619a      	str	r2, [r3, #24]

  return;
 800b50c:	bf00      	nop
}
 800b50e:	3708      	adds	r7, #8
 800b510:	46bd      	mov	sp, r7
 800b512:	bd80      	pop	{r7, pc}
 800b514:	200300b8 	.word	0x200300b8
 800b518:	20000498 	.word	0x20000498
 800b51c:	20030000 	.word	0x20030000
 800b520:	200004b0 	.word	0x200004b0

0800b524 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800b524:	b580      	push	{r7, lr}
 800b526:	b082      	sub	sp, #8
 800b528:	af00      	add	r7, sp, #0
 800b52a:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800b52c:	6879      	ldr	r1, [r7, #4]
 800b52e:	4807      	ldr	r0, [pc, #28]	@ (800b54c <TL_MM_EvtDone+0x28>)
 800b530:	f000 f9dc 	bl	800b8ec <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800b534:	6879      	ldr	r1, [r7, #4]
 800b536:	2000      	movs	r0, #0
 800b538:	f000 f862 	bl	800b600 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800b53c:	4804      	ldr	r0, [pc, #16]	@ (800b550 <TL_MM_EvtDone+0x2c>)
 800b53e:	f002 fc87 	bl	800de50 <HW_IPCC_MM_SendFreeBuf>

  return;
 800b542:	bf00      	nop
}
 800b544:	3708      	adds	r7, #8
 800b546:	46bd      	mov	sp, r7
 800b548:	bd80      	pop	{r7, pc}
 800b54a:	bf00      	nop
 800b54c:	20000498 	.word	0x20000498
 800b550:	0800b555 	.word	0x0800b555

0800b554 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800b554:	b580      	push	{r7, lr}
 800b556:	b082      	sub	sp, #8
 800b558:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800b55a:	e00c      	b.n	800b576 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800b55c:	1d3b      	adds	r3, r7, #4
 800b55e:	4619      	mov	r1, r3
 800b560:	480a      	ldr	r0, [pc, #40]	@ (800b58c <SendFreeBuf+0x38>)
 800b562:	f000 fa0a 	bl	800b97a <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800b566:	4b0a      	ldr	r3, [pc, #40]	@ (800b590 <SendFreeBuf+0x3c>)
 800b568:	691b      	ldr	r3, [r3, #16]
 800b56a:	691b      	ldr	r3, [r3, #16]
 800b56c:	687a      	ldr	r2, [r7, #4]
 800b56e:	4611      	mov	r1, r2
 800b570:	4618      	mov	r0, r3
 800b572:	f000 f9bb 	bl	800b8ec <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800b576:	4805      	ldr	r0, [pc, #20]	@ (800b58c <SendFreeBuf+0x38>)
 800b578:	f000 f970 	bl	800b85c <LST_is_empty>
 800b57c:	4603      	mov	r3, r0
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d0ec      	beq.n	800b55c <SendFreeBuf+0x8>
  }

  return;
 800b582:	bf00      	nop
}
 800b584:	3708      	adds	r7, #8
 800b586:	46bd      	mov	sp, r7
 800b588:	bd80      	pop	{r7, pc}
 800b58a:	bf00      	nop
 800b58c:	20000498 	.word	0x20000498
 800b590:	20030000 	.word	0x20030000

0800b594 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800b594:	b580      	push	{r7, lr}
 800b596:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800b598:	4805      	ldr	r0, [pc, #20]	@ (800b5b0 <TL_TRACES_Init+0x1c>)
 800b59a:	f000 f94f 	bl	800b83c <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800b59e:	4b05      	ldr	r3, [pc, #20]	@ (800b5b4 <TL_TRACES_Init+0x20>)
 800b5a0:	695b      	ldr	r3, [r3, #20]
 800b5a2:	4a03      	ldr	r2, [pc, #12]	@ (800b5b0 <TL_TRACES_Init+0x1c>)
 800b5a4:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800b5a6:	f002 fc89 	bl	800debc <HW_IPCC_TRACES_Init>

  return;
 800b5aa:	bf00      	nop
}
 800b5ac:	bd80      	pop	{r7, pc}
 800b5ae:	bf00      	nop
 800b5b0:	200300c0 	.word	0x200300c0
 800b5b4:	20030000 	.word	0x20030000

0800b5b8 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800b5b8:	b580      	push	{r7, lr}
 800b5ba:	b082      	sub	sp, #8
 800b5bc:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800b5be:	e008      	b.n	800b5d2 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800b5c0:	1d3b      	adds	r3, r7, #4
 800b5c2:	4619      	mov	r1, r3
 800b5c4:	4808      	ldr	r0, [pc, #32]	@ (800b5e8 <HW_IPCC_TRACES_EvtNot+0x30>)
 800b5c6:	f000 f9d8 	bl	800b97a <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	4618      	mov	r0, r3
 800b5ce:	f000 f80d 	bl	800b5ec <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800b5d2:	4805      	ldr	r0, [pc, #20]	@ (800b5e8 <HW_IPCC_TRACES_EvtNot+0x30>)
 800b5d4:	f000 f942 	bl	800b85c <LST_is_empty>
 800b5d8:	4603      	mov	r3, r0
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d0f0      	beq.n	800b5c0 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800b5de:	bf00      	nop
}
 800b5e0:	3708      	adds	r7, #8
 800b5e2:	46bd      	mov	sp, r7
 800b5e4:	bd80      	pop	{r7, pc}
 800b5e6:	bf00      	nop
 800b5e8:	200300c0 	.word	0x200300c0

0800b5ec <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 800b5ec:	b480      	push	{r7}
 800b5ee:	b083      	sub	sp, #12
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 800b5f4:	bf00      	nop
 800b5f6:	370c      	adds	r7, #12
 800b5f8:	46bd      	mov	sp, r7
 800b5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5fe:	4770      	bx	lr

0800b600 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800b600:	b480      	push	{r7}
 800b602:	b085      	sub	sp, #20
 800b604:	af00      	add	r7, sp, #0
 800b606:	4603      	mov	r3, r0
 800b608:	6039      	str	r1, [r7, #0]
 800b60a:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 800b60c:	79fb      	ldrb	r3, [r7, #7]
 800b60e:	2b06      	cmp	r3, #6
 800b610:	d845      	bhi.n	800b69e <OutputDbgTrace+0x9e>
 800b612:	a201      	add	r2, pc, #4	@ (adr r2, 800b618 <OutputDbgTrace+0x18>)
 800b614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b618:	0800b635 	.word	0x0800b635
 800b61c:	0800b659 	.word	0x0800b659
 800b620:	0800b65f 	.word	0x0800b65f
 800b624:	0800b673 	.word	0x0800b673
 800b628:	0800b67f 	.word	0x0800b67f
 800b62c:	0800b685 	.word	0x0800b685
 800b630:	0800b693 	.word	0x0800b693
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800b634:	683b      	ldr	r3, [r7, #0]
 800b636:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	7a5b      	ldrb	r3, [r3, #9]
 800b63c:	2bff      	cmp	r3, #255	@ 0xff
 800b63e:	d005      	beq.n	800b64c <OutputDbgTrace+0x4c>
 800b640:	2bff      	cmp	r3, #255	@ 0xff
 800b642:	dc05      	bgt.n	800b650 <OutputDbgTrace+0x50>
 800b644:	2b0e      	cmp	r3, #14
 800b646:	d005      	beq.n	800b654 <OutputDbgTrace+0x54>
 800b648:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800b64a:	e001      	b.n	800b650 <OutputDbgTrace+0x50>
          break;
 800b64c:	bf00      	nop
 800b64e:	e027      	b.n	800b6a0 <OutputDbgTrace+0xa0>
          break;
 800b650:	bf00      	nop
 800b652:	e025      	b.n	800b6a0 <OutputDbgTrace+0xa0>
          break;
 800b654:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800b656:	e023      	b.n	800b6a0 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800b658:	683b      	ldr	r3, [r7, #0]
 800b65a:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800b65c:	e020      	b.n	800b6a0 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800b65e:	683b      	ldr	r3, [r7, #0]
 800b660:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	7a5b      	ldrb	r3, [r3, #9]
 800b666:	2b0e      	cmp	r3, #14
 800b668:	d001      	beq.n	800b66e <OutputDbgTrace+0x6e>
 800b66a:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800b66c:	e000      	b.n	800b670 <OutputDbgTrace+0x70>
          break;
 800b66e:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800b670:	e016      	b.n	800b6a0 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800b672:	683b      	ldr	r3, [r7, #0]
 800b674:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	7a5b      	ldrb	r3, [r3, #9]
 800b67a:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800b67c:	e010      	b.n	800b6a0 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800b67e:	683b      	ldr	r3, [r7, #0]
 800b680:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800b682:	e00d      	b.n	800b6a0 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800b684:	683b      	ldr	r3, [r7, #0]
 800b686:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	7a5b      	ldrb	r3, [r3, #9]
 800b68c:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800b68e:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800b690:	e006      	b.n	800b6a0 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800b692:	683b      	ldr	r3, [r7, #0]
 800b694:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	7a5b      	ldrb	r3, [r3, #9]
 800b69a:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800b69c:	e000      	b.n	800b6a0 <OutputDbgTrace+0xa0>

    default:
      break;
 800b69e:	bf00      	nop
  }

  return;
 800b6a0:	bf00      	nop
}
 800b6a2:	3714      	adds	r7, #20
 800b6a4:	46bd      	mov	sp, r7
 800b6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6aa:	4770      	bx	lr

0800b6ac <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 800b6ac:	b580      	push	{r7, lr}
 800b6ae:	b086      	sub	sp, #24
 800b6b0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b6b2:	f3ef 8310 	mrs	r3, PRIMASK
 800b6b6:	60fb      	str	r3, [r7, #12]
  return(result);
 800b6b8:	68fb      	ldr	r3, [r7, #12]
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  uint8_t* buf;
  uint16_t bufSize;

  BACKUP_PRIMASK();
 800b6ba:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b6bc:	b672      	cpsid	i
}
 800b6be:	bf00      	nop

  DISABLE_IRQ();			/**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  CircularQueue_Remove(&MsgDbgTraceQueue,&bufSize);
 800b6c0:	1cbb      	adds	r3, r7, #2
 800b6c2:	4619      	mov	r1, r3
 800b6c4:	4812      	ldr	r0, [pc, #72]	@ (800b710 <DbgTrace_TxCpltCallback+0x64>)
 800b6c6:	f000 fb9d 	bl	800be04 <CircularQueue_Remove>

  /* Sense if new data to be sent */
  buf=CircularQueue_Sense(&MsgDbgTraceQueue,&bufSize);
 800b6ca:	1cbb      	adds	r3, r7, #2
 800b6cc:	4619      	mov	r1, r3
 800b6ce:	4810      	ldr	r0, [pc, #64]	@ (800b710 <DbgTrace_TxCpltCallback+0x64>)
 800b6d0:	f000 fc87 	bl	800bfe2 <CircularQueue_Sense>
 800b6d4:	6138      	str	r0, [r7, #16]


  if ( buf != NULL) 
 800b6d6:	693b      	ldr	r3, [r7, #16]
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d00c      	beq.n	800b6f6 <DbgTrace_TxCpltCallback+0x4a>
 800b6dc:	697b      	ldr	r3, [r7, #20]
 800b6de:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b6e0:	68bb      	ldr	r3, [r7, #8]
 800b6e2:	f383 8810 	msr	PRIMASK, r3
}
 800b6e6:	bf00      	nop
  {
    RESTORE_PRIMASK();
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 800b6e8:	887b      	ldrh	r3, [r7, #2]
 800b6ea:	4a0a      	ldr	r2, [pc, #40]	@ (800b714 <DbgTrace_TxCpltCallback+0x68>)
 800b6ec:	4619      	mov	r1, r3
 800b6ee:	6938      	ldr	r0, [r7, #16]
 800b6f0:	f7f5 fc3e 	bl	8000f70 <DbgOutputTraces>

  DbgTracePeripheralReady = SET;

  RESTORE_PRIMASK();
#endif
}
 800b6f4:	e008      	b.n	800b708 <DbgTrace_TxCpltCallback+0x5c>
    DbgTracePeripheralReady = SET;
 800b6f6:	4b08      	ldr	r3, [pc, #32]	@ (800b718 <DbgTrace_TxCpltCallback+0x6c>)
 800b6f8:	2201      	movs	r2, #1
 800b6fa:	701a      	strb	r2, [r3, #0]
 800b6fc:	697b      	ldr	r3, [r7, #20]
 800b6fe:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	f383 8810 	msr	PRIMASK, r3
}
 800b706:	bf00      	nop
}
 800b708:	bf00      	nop
 800b70a:	3718      	adds	r7, #24
 800b70c:	46bd      	mov	sp, r7
 800b70e:	bd80      	pop	{r7, pc}
 800b710:	200004b4 	.word	0x200004b4
 800b714:	0800b6ad 	.word	0x0800b6ad
 800b718:	20000011 	.word	0x20000011

0800b71c <_write>:
 * @param	bufsize buffer size
 * @param	...: arguments to be formatted in format string
 * @retval none
 */
size_t _write(int handle, const unsigned char * buf, size_t bufSize)
{
 800b71c:	b580      	push	{r7, lr}
 800b71e:	b084      	sub	sp, #16
 800b720:	af00      	add	r7, sp, #0
 800b722:	60f8      	str	r0, [r7, #12]
 800b724:	60b9      	str	r1, [r7, #8]
 800b726:	607a      	str	r2, [r7, #4]
  return ( DbgTraceWrite(handle, buf, bufSize) );
 800b728:	687a      	ldr	r2, [r7, #4]
 800b72a:	68b9      	ldr	r1, [r7, #8]
 800b72c:	68f8      	ldr	r0, [r7, #12]
 800b72e:	f000 f805 	bl	800b73c <DbgTraceWrite>
 800b732:	4603      	mov	r3, r0
}
 800b734:	4618      	mov	r0, r3
 800b736:	3710      	adds	r7, #16
 800b738:	46bd      	mov	sp, r7
 800b73a:	bd80      	pop	{r7, pc}

0800b73c <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 800b73c:	b580      	push	{r7, lr}
 800b73e:	b08a      	sub	sp, #40	@ 0x28
 800b740:	af00      	add	r7, sp, #0
 800b742:	60f8      	str	r0, [r7, #12]
 800b744:	60b9      	str	r1, [r7, #8]
 800b746:	607a      	str	r2, [r7, #4]
  size_t chars_written = 0;
 800b748:	2300      	movs	r3, #0
 800b74a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b74c:	f3ef 8310 	mrs	r3, PRIMASK
 800b750:	61bb      	str	r3, [r7, #24]
  return(result);
 800b752:	69bb      	ldr	r3, [r7, #24]
  uint8_t* buffer;

  BACKUP_PRIMASK();
 800b754:	623b      	str	r3, [r7, #32]

  /* Ignore flushes */
  if ( handle == -1 )
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b75c:	d102      	bne.n	800b764 <DbgTraceWrite+0x28>
  {
    chars_written = ( size_t ) 0;
 800b75e:	2300      	movs	r3, #0
 800b760:	627b      	str	r3, [r7, #36]	@ 0x24
 800b762:	e037      	b.n	800b7d4 <DbgTraceWrite+0x98>
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	2b01      	cmp	r3, #1
 800b768:	d006      	beq.n	800b778 <DbgTraceWrite+0x3c>
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	2b02      	cmp	r3, #2
 800b76e:	d003      	beq.n	800b778 <DbgTraceWrite+0x3c>
  {
    chars_written = ( size_t ) - 1;
 800b770:	f04f 33ff 	mov.w	r3, #4294967295
 800b774:	627b      	str	r3, [r7, #36]	@ 0x24
 800b776:	e02d      	b.n	800b7d4 <DbgTraceWrite+0x98>
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d02a      	beq.n	800b7d4 <DbgTraceWrite+0x98>
  {
    chars_written = bufSize;
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 800b782:	b672      	cpsid	i
}
 800b784:	bf00      	nop
    /* If queue emepty and TX free, send directly */
    /* CS Start */

#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
    DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
    buffer=CircularQueue_Add(&MsgDbgTraceQueue,(uint8_t*)buf, bufSize,1);
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	b29a      	uxth	r2, r3
 800b78a:	2301      	movs	r3, #1
 800b78c:	68b9      	ldr	r1, [r7, #8]
 800b78e:	4814      	ldr	r0, [pc, #80]	@ (800b7e0 <DbgTraceWrite+0xa4>)
 800b790:	f000 f912 	bl	800b9b8 <CircularQueue_Add>
 800b794:	61f8      	str	r0, [r7, #28]
    if (buffer && DbgTracePeripheralReady)
 800b796:	69fb      	ldr	r3, [r7, #28]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d015      	beq.n	800b7c8 <DbgTraceWrite+0x8c>
 800b79c:	4b11      	ldr	r3, [pc, #68]	@ (800b7e4 <DbgTraceWrite+0xa8>)
 800b79e:	781b      	ldrb	r3, [r3, #0]
 800b7a0:	b2db      	uxtb	r3, r3
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d010      	beq.n	800b7c8 <DbgTraceWrite+0x8c>
    {
      DbgTracePeripheralReady = RESET;
 800b7a6:	4b0f      	ldr	r3, [pc, #60]	@ (800b7e4 <DbgTraceWrite+0xa8>)
 800b7a8:	2200      	movs	r2, #0
 800b7aa:	701a      	strb	r2, [r3, #0]
 800b7ac:	6a3b      	ldr	r3, [r7, #32]
 800b7ae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b7b0:	697b      	ldr	r3, [r7, #20]
 800b7b2:	f383 8810 	msr	PRIMASK, r3
}
 800b7b6:	bf00      	nop
      RESTORE_PRIMASK();
      DbgOutputTraces((uint8_t*)buffer, bufSize, DbgTrace_TxCpltCallback);
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	b29b      	uxth	r3, r3
 800b7bc:	4a0a      	ldr	r2, [pc, #40]	@ (800b7e8 <DbgTraceWrite+0xac>)
 800b7be:	4619      	mov	r1, r3
 800b7c0:	69f8      	ldr	r0, [r7, #28]
 800b7c2:	f7f5 fbd5 	bl	8000f70 <DbgOutputTraces>
 800b7c6:	e005      	b.n	800b7d4 <DbgTraceWrite+0x98>
 800b7c8:	6a3b      	ldr	r3, [r7, #32]
 800b7ca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b7cc:	693b      	ldr	r3, [r7, #16]
 800b7ce:	f383 8810 	msr	PRIMASK, r3
}
 800b7d2:	bf00      	nop
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
    while (!DbgTracePeripheralReady);
#endif
    /* CS END */
  }
  return ( chars_written );
 800b7d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b7d6:	4618      	mov	r0, r3
 800b7d8:	3728      	adds	r7, #40	@ 0x28
 800b7da:	46bd      	mov	sp, r7
 800b7dc:	bd80      	pop	{r7, pc}
 800b7de:	bf00      	nop
 800b7e0:	200004b4 	.word	0x200004b4
 800b7e4:	20000011 	.word	0x20000011
 800b7e8:	0800b6ad 	.word	0x0800b6ad

0800b7ec <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800b7ec:	b480      	push	{r7}
 800b7ee:	b085      	sub	sp, #20
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	4603      	mov	r3, r0
 800b7f4:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800b7f6:	4b0f      	ldr	r3, [pc, #60]	@ (800b834 <OTP_Read+0x48>)
 800b7f8:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800b7fa:	e002      	b.n	800b802 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	3b08      	subs	r3, #8
 800b800:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	3307      	adds	r3, #7
 800b806:	781b      	ldrb	r3, [r3, #0]
 800b808:	79fa      	ldrb	r2, [r7, #7]
 800b80a:	429a      	cmp	r2, r3
 800b80c:	d003      	beq.n	800b816 <OTP_Read+0x2a>
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	4a09      	ldr	r2, [pc, #36]	@ (800b838 <OTP_Read+0x4c>)
 800b812:	4293      	cmp	r3, r2
 800b814:	d1f2      	bne.n	800b7fc <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	3307      	adds	r3, #7
 800b81a:	781b      	ldrb	r3, [r3, #0]
 800b81c:	79fa      	ldrb	r2, [r7, #7]
 800b81e:	429a      	cmp	r2, r3
 800b820:	d001      	beq.n	800b826 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800b822:	2300      	movs	r3, #0
 800b824:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800b826:	68fb      	ldr	r3, [r7, #12]
}
 800b828:	4618      	mov	r0, r3
 800b82a:	3714      	adds	r7, #20
 800b82c:	46bd      	mov	sp, r7
 800b82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b832:	4770      	bx	lr
 800b834:	1fff73f8 	.word	0x1fff73f8
 800b838:	1fff7000 	.word	0x1fff7000

0800b83c <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800b83c:	b480      	push	{r7}
 800b83e:	b083      	sub	sp, #12
 800b840:	af00      	add	r7, sp, #0
 800b842:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	687a      	ldr	r2, [r7, #4]
 800b848:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	687a      	ldr	r2, [r7, #4]
 800b84e:	605a      	str	r2, [r3, #4]
}
 800b850:	bf00      	nop
 800b852:	370c      	adds	r7, #12
 800b854:	46bd      	mov	sp, r7
 800b856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b85a:	4770      	bx	lr

0800b85c <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800b85c:	b480      	push	{r7}
 800b85e:	b087      	sub	sp, #28
 800b860:	af00      	add	r7, sp, #0
 800b862:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b864:	f3ef 8310 	mrs	r3, PRIMASK
 800b868:	60fb      	str	r3, [r7, #12]
  return(result);
 800b86a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b86c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800b86e:	b672      	cpsid	i
}
 800b870:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	687a      	ldr	r2, [r7, #4]
 800b878:	429a      	cmp	r2, r3
 800b87a:	d102      	bne.n	800b882 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 800b87c:	2301      	movs	r3, #1
 800b87e:	75fb      	strb	r3, [r7, #23]
 800b880:	e001      	b.n	800b886 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 800b882:	2300      	movs	r3, #0
 800b884:	75fb      	strb	r3, [r7, #23]
 800b886:	693b      	ldr	r3, [r7, #16]
 800b888:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b88a:	68bb      	ldr	r3, [r7, #8]
 800b88c:	f383 8810 	msr	PRIMASK, r3
}
 800b890:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800b892:	7dfb      	ldrb	r3, [r7, #23]
}
 800b894:	4618      	mov	r0, r3
 800b896:	371c      	adds	r7, #28
 800b898:	46bd      	mov	sp, r7
 800b89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b89e:	4770      	bx	lr

0800b8a0 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800b8a0:	b480      	push	{r7}
 800b8a2:	b087      	sub	sp, #28
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	6078      	str	r0, [r7, #4]
 800b8a8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b8aa:	f3ef 8310 	mrs	r3, PRIMASK
 800b8ae:	60fb      	str	r3, [r7, #12]
  return(result);
 800b8b0:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b8b2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b8b4:	b672      	cpsid	i
}
 800b8b6:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	681a      	ldr	r2, [r3, #0]
 800b8bc:	683b      	ldr	r3, [r7, #0]
 800b8be:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800b8c0:	683b      	ldr	r3, [r7, #0]
 800b8c2:	687a      	ldr	r2, [r7, #4]
 800b8c4:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	683a      	ldr	r2, [r7, #0]
 800b8ca:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800b8cc:	683b      	ldr	r3, [r7, #0]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	683a      	ldr	r2, [r7, #0]
 800b8d2:	605a      	str	r2, [r3, #4]
 800b8d4:	697b      	ldr	r3, [r7, #20]
 800b8d6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b8d8:	693b      	ldr	r3, [r7, #16]
 800b8da:	f383 8810 	msr	PRIMASK, r3
}
 800b8de:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800b8e0:	bf00      	nop
 800b8e2:	371c      	adds	r7, #28
 800b8e4:	46bd      	mov	sp, r7
 800b8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ea:	4770      	bx	lr

0800b8ec <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800b8ec:	b480      	push	{r7}
 800b8ee:	b087      	sub	sp, #28
 800b8f0:	af00      	add	r7, sp, #0
 800b8f2:	6078      	str	r0, [r7, #4]
 800b8f4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b8f6:	f3ef 8310 	mrs	r3, PRIMASK
 800b8fa:	60fb      	str	r3, [r7, #12]
  return(result);
 800b8fc:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b8fe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b900:	b672      	cpsid	i
}
 800b902:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800b904:	683b      	ldr	r3, [r7, #0]
 800b906:	687a      	ldr	r2, [r7, #4]
 800b908:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	685a      	ldr	r2, [r3, #4]
 800b90e:	683b      	ldr	r3, [r7, #0]
 800b910:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	683a      	ldr	r2, [r7, #0]
 800b916:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800b918:	683b      	ldr	r3, [r7, #0]
 800b91a:	685b      	ldr	r3, [r3, #4]
 800b91c:	683a      	ldr	r2, [r7, #0]
 800b91e:	601a      	str	r2, [r3, #0]
 800b920:	697b      	ldr	r3, [r7, #20]
 800b922:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b924:	693b      	ldr	r3, [r7, #16]
 800b926:	f383 8810 	msr	PRIMASK, r3
}
 800b92a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800b92c:	bf00      	nop
 800b92e:	371c      	adds	r7, #28
 800b930:	46bd      	mov	sp, r7
 800b932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b936:	4770      	bx	lr

0800b938 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800b938:	b480      	push	{r7}
 800b93a:	b087      	sub	sp, #28
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b940:	f3ef 8310 	mrs	r3, PRIMASK
 800b944:	60fb      	str	r3, [r7, #12]
  return(result);
 800b946:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b948:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b94a:	b672      	cpsid	i
}
 800b94c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	685b      	ldr	r3, [r3, #4]
 800b952:	687a      	ldr	r2, [r7, #4]
 800b954:	6812      	ldr	r2, [r2, #0]
 800b956:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	687a      	ldr	r2, [r7, #4]
 800b95e:	6852      	ldr	r2, [r2, #4]
 800b960:	605a      	str	r2, [r3, #4]
 800b962:	697b      	ldr	r3, [r7, #20]
 800b964:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b966:	693b      	ldr	r3, [r7, #16]
 800b968:	f383 8810 	msr	PRIMASK, r3
}
 800b96c:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800b96e:	bf00      	nop
 800b970:	371c      	adds	r7, #28
 800b972:	46bd      	mov	sp, r7
 800b974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b978:	4770      	bx	lr

0800b97a <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800b97a:	b580      	push	{r7, lr}
 800b97c:	b086      	sub	sp, #24
 800b97e:	af00      	add	r7, sp, #0
 800b980:	6078      	str	r0, [r7, #4]
 800b982:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b984:	f3ef 8310 	mrs	r3, PRIMASK
 800b988:	60fb      	str	r3, [r7, #12]
  return(result);
 800b98a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b98c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b98e:	b672      	cpsid	i
}
 800b990:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	681a      	ldr	r2, [r3, #0]
 800b996:	683b      	ldr	r3, [r7, #0]
 800b998:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	4618      	mov	r0, r3
 800b9a0:	f7ff ffca 	bl	800b938 <LST_remove_node>
 800b9a4:	697b      	ldr	r3, [r7, #20]
 800b9a6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b9a8:	693b      	ldr	r3, [r7, #16]
 800b9aa:	f383 8810 	msr	PRIMASK, r3
}
 800b9ae:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800b9b0:	bf00      	nop
 800b9b2:	3718      	adds	r7, #24
 800b9b4:	46bd      	mov	sp, r7
 800b9b6:	bd80      	pop	{r7, pc}

0800b9b8 <CircularQueue_Add>:
  * @param  elementSize:  Size of element to be added to the queue. Only used if the queue manage variable size elements
  * @param  nbElements:  number of elements in the in buffer pointed by x
  * @retval  pointer on last element just added to the queue, NULL if the element to be added do not fit in the queue (too big)
  */
uint8_t* CircularQueue_Add(queue_t *q, uint8_t* x, uint16_t elementSize, uint32_t nbElements)
{
 800b9b8:	b580      	push	{r7, lr}
 800b9ba:	b08e      	sub	sp, #56	@ 0x38
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	60f8      	str	r0, [r7, #12]
 800b9c0:	60b9      	str	r1, [r7, #8]
 800b9c2:	603b      	str	r3, [r7, #0]
 800b9c4:	4613      	mov	r3, r2
 800b9c6:	80fb      	strh	r3, [r7, #6]

  uint8_t* ptr = NULL;                      /* fct return ptr to the element freshly added, if no room fct return NULL */
 800b9c8:	2300      	movs	r3, #0
 800b9ca:	623b      	str	r3, [r7, #32]
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 800b9cc:	2300      	movs	r3, #0
 800b9ce:	86fb      	strh	r3, [r7, #54]	@ 0x36
  uint8_t  elemSizeStorageRoom  = 0 ;       /* Indicate the header (which contain only size) of element in case of varaibale size element (q->elementsize == 0) */
 800b9d0:	2300      	movs	r3, #0
 800b9d2:	77fb      	strb	r3, [r7, #31]
  uint32_t curBuffPosition;                  /* the current position in the queue buffer */
  uint32_t i;                               /* loop counter */
  uint32_t NbBytesToCopy = 0, NbCopiedBytes = 0 ; /* Indicators for copying bytes in queue */
 800b9d4:	2300      	movs	r3, #0
 800b9d6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b9d8:	2300      	movs	r3, #0
 800b9da:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t eob_free_size;                         /* Eof End of Quque Buffer Free Size */
  uint8_t  wrap_will_occur = 0;                   /* indicate if a wrap around will occurs */
 800b9dc:	2300      	movs	r3, #0
 800b9de:	77bb      	strb	r3, [r7, #30]
  uint8_t  wrapped_element_eob_size;              /* In case of Wrap around, indicate size of parta of element that fit at thened of the queuue  buffer */
  uint16_t overhead = 0;                          /* In case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG or CIRCULAR_QUEUE_NO_WRAP_FLAG options, 
 800b9e0:	2300      	movs	r3, #0
 800b9e2:	83bb      	strh	r3, [r7, #28]
                                                     indcate the size overhead that will be generated by adding the element with wrap management (split or no wrap ) */ 
  
  
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	891b      	ldrh	r3, [r3, #8]
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d101      	bne.n	800b9f0 <CircularQueue_Add+0x38>
 800b9ec:	2302      	movs	r3, #2
 800b9ee:	e000      	b.n	800b9f2 <CircularQueue_Add+0x3a>
 800b9f0:	2300      	movs	r3, #0
 800b9f2:	77fb      	strb	r3, [r7, #31]
  /* retrieve the size of last element sored: the value stored at the beginning of the queue element if element size is variable otherwise take it from fixed element Size member */
  if (q->byteCount)
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	695b      	ldr	r3, [r3, #20]
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d029      	beq.n	800ba50 <CircularQueue_Add+0x98>
  {
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	891b      	ldrh	r3, [r3, #8]
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d122      	bne.n	800ba4a <CircularQueue_Add+0x92>
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	681a      	ldr	r2, [r3, #0]
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	691b      	ldr	r3, [r3, #16]
 800ba0c:	4413      	add	r3, r2
 800ba0e:	781b      	ldrb	r3, [r3, #0]
 800ba10:	4618      	mov	r0, r3
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	681a      	ldr	r2, [r3, #0]
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	691b      	ldr	r3, [r3, #16]
 800ba1a:	1c59      	adds	r1, r3, #1
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	685b      	ldr	r3, [r3, #4]
 800ba20:	4299      	cmp	r1, r3
 800ba22:	d306      	bcc.n	800ba32 <CircularQueue_Add+0x7a>
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	6919      	ldr	r1, [r3, #16]
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	685b      	ldr	r3, [r3, #4]
 800ba2c:	1acb      	subs	r3, r1, r3
 800ba2e:	3301      	adds	r3, #1
 800ba30:	e002      	b.n	800ba38 <CircularQueue_Add+0x80>
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	691b      	ldr	r3, [r3, #16]
 800ba36:	3301      	adds	r3, #1
 800ba38:	4413      	add	r3, r2
 800ba3a:	781b      	ldrb	r3, [r3, #0]
 800ba3c:	021b      	lsls	r3, r3, #8
 800ba3e:	b29b      	uxth	r3, r3
 800ba40:	4403      	add	r3, r0
 800ba42:	b29b      	uxth	r3, r3
 800ba44:	3302      	adds	r3, #2
 800ba46:	b29b      	uxth	r3, r3
 800ba48:	e001      	b.n	800ba4e <CircularQueue_Add+0x96>
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	891b      	ldrh	r3, [r3, #8]
 800ba4e:	86fb      	strh	r3, [r7, #54]	@ 0x36
  }
  /* if queue element have fixed size , reset the elementSize arg with fixed element size value */
  if (q->elementSize > 0)               
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	891b      	ldrh	r3, [r3, #8]
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d002      	beq.n	800ba5e <CircularQueue_Add+0xa6>
  {
    elementSize = q->elementSize;
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	891b      	ldrh	r3, [r3, #8]
 800ba5c:	80fb      	strh	r3, [r7, #6]
  }

   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	691a      	ldr	r2, [r3, #16]
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	68db      	ldr	r3, [r3, #12]
 800ba66:	429a      	cmp	r2, r3
 800ba68:	d307      	bcc.n	800ba7a <CircularQueue_Add+0xc2>
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	685a      	ldr	r2, [r3, #4]
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	6919      	ldr	r1, [r3, #16]
 800ba72:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800ba74:	440b      	add	r3, r1
 800ba76:	1ad3      	subs	r3, r2, r3
 800ba78:	e000      	b.n	800ba7c <CircularQueue_Add+0xc4>
 800ba7a:	2300      	movs	r3, #0
 800ba7c:	61bb      	str	r3, [r7, #24]

   /* check how many bytes of wrapped element (if anay) are at end of buffer */
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 800ba7e:	88fa      	ldrh	r2, [r7, #6]
 800ba80:	7ffb      	ldrb	r3, [r7, #31]
 800ba82:	4413      	add	r3, r2
 800ba84:	461a      	mov	r2, r3
 800ba86:	683b      	ldr	r3, [r7, #0]
 800ba88:	fb02 f303 	mul.w	r3, r2, r3
 800ba8c:	69ba      	ldr	r2, [r7, #24]
 800ba8e:	429a      	cmp	r2, r3
 800ba90:	d80b      	bhi.n	800baaa <CircularQueue_Add+0xf2>
 800ba92:	88fa      	ldrh	r2, [r7, #6]
 800ba94:	7ffb      	ldrb	r3, [r7, #31]
 800ba96:	4413      	add	r3, r2
 800ba98:	461a      	mov	r2, r3
 800ba9a:	69bb      	ldr	r3, [r7, #24]
 800ba9c:	fbb3 f1f2 	udiv	r1, r3, r2
 800baa0:	fb01 f202 	mul.w	r2, r1, r2
 800baa4:	1a9b      	subs	r3, r3, r2
 800baa6:	b2db      	uxtb	r3, r3
 800baa8:	e000      	b.n	800baac <CircularQueue_Add+0xf4>
 800baaa:	2300      	movs	r3, #0
 800baac:	75fb      	strb	r3, [r7, #23]
   wrap_will_occur  = wrapped_element_eob_size > elemSizeStorageRoom;
 800baae:	7dfa      	ldrb	r2, [r7, #23]
 800bab0:	7ffb      	ldrb	r3, [r7, #31]
 800bab2:	429a      	cmp	r2, r3
 800bab4:	bf8c      	ite	hi
 800bab6:	2301      	movhi	r3, #1
 800bab8:	2300      	movls	r3, #0
 800baba:	b2db      	uxtb	r3, r3
 800babc:	77bb      	strb	r3, [r7, #30]

   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 800babe:	7fbb      	ldrb	r3, [r7, #30]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d008      	beq.n	800bad6 <CircularQueue_Add+0x11e>
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	7f1b      	ldrb	r3, [r3, #28]
 800bac8:	f003 0301 	and.w	r3, r3, #1
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d002      	beq.n	800bad6 <CircularQueue_Add+0x11e>
 800bad0:	7dfb      	ldrb	r3, [r7, #23]
 800bad2:	b29b      	uxth	r3, r3
 800bad4:	e000      	b.n	800bad8 <CircularQueue_Add+0x120>
 800bad6:	8bbb      	ldrh	r3, [r7, #28]
 800bad8:	83bb      	strh	r3, [r7, #28]
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ? elemSizeStorageRoom  : overhead;
 800bada:	7fbb      	ldrb	r3, [r7, #30]
 800badc:	2b00      	cmp	r3, #0
 800bade:	d008      	beq.n	800baf2 <CircularQueue_Add+0x13a>
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	7f1b      	ldrb	r3, [r3, #28]
 800bae4:	f003 0302 	and.w	r3, r3, #2
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d002      	beq.n	800baf2 <CircularQueue_Add+0x13a>
 800baec:	7ffb      	ldrb	r3, [r7, #31]
 800baee:	b29b      	uxth	r3, r3
 800baf0:	e000      	b.n	800baf4 <CircularQueue_Add+0x13c>
 800baf2:	8bbb      	ldrh	r3, [r7, #28]
 800baf4:	83bb      	strh	r3, [r7, #28]
   
   
  /* Store now the elements if ennough room for all elements */
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 800baf6:	88fb      	ldrh	r3, [r7, #6]
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	f000 817e 	beq.w	800bdfa <CircularQueue_Add+0x442>
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	695a      	ldr	r2, [r3, #20]
 800bb02:	88f9      	ldrh	r1, [r7, #6]
 800bb04:	7ffb      	ldrb	r3, [r7, #31]
 800bb06:	440b      	add	r3, r1
 800bb08:	4619      	mov	r1, r3
 800bb0a:	683b      	ldr	r3, [r7, #0]
 800bb0c:	fb01 f303 	mul.w	r3, r1, r3
 800bb10:	441a      	add	r2, r3
 800bb12:	8bbb      	ldrh	r3, [r7, #28]
 800bb14:	441a      	add	r2, r3
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	685b      	ldr	r3, [r3, #4]
 800bb1a:	429a      	cmp	r2, r3
 800bb1c:	f200 816d 	bhi.w	800bdfa <CircularQueue_Add+0x442>
  { 
    /* loop to add all elements  */
    for (i=0; i < nbElements; i++) 
 800bb20:	2300      	movs	r3, #0
 800bb22:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bb24:	e14a      	b.n	800bdbc <CircularQueue_Add+0x404>
    {
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	691a      	ldr	r2, [r3, #16]
 800bb2a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800bb2c:	441a      	add	r2, r3
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	685b      	ldr	r3, [r3, #4]
 800bb32:	429a      	cmp	r2, r3
 800bb34:	d307      	bcc.n	800bb46 <CircularQueue_Add+0x18e>
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	691a      	ldr	r2, [r3, #16]
 800bb3a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800bb3c:	441a      	add	r2, r3
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	685b      	ldr	r3, [r3, #4]
 800bb42:	1ad3      	subs	r3, r2, r3
 800bb44:	e003      	b.n	800bb4e <CircularQueue_Add+0x196>
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	691a      	ldr	r2, [r3, #16]
 800bb4a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800bb4c:	4413      	add	r3, r2
 800bb4e:	68fa      	ldr	r2, [r7, #12]
 800bb50:	6113      	str	r3, [r2, #16]
      curBuffPosition = q->last;
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	691b      	ldr	r3, [r3, #16]
 800bb56:	633b      	str	r3, [r7, #48]	@ 0x30
      
      /* store the element  */
      /* store first the element size if element size is variable */
      if (q->elementSize == 0) 
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	891b      	ldrh	r3, [r3, #8]
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d130      	bne.n	800bbc2 <CircularQueue_Add+0x20a>
      {
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	681a      	ldr	r2, [r3, #0]
 800bb64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb66:	1c59      	adds	r1, r3, #1
 800bb68:	6339      	str	r1, [r7, #48]	@ 0x30
 800bb6a:	4413      	add	r3, r2
 800bb6c:	88fa      	ldrh	r2, [r7, #6]
 800bb6e:	b2d2      	uxtb	r2, r2
 800bb70:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	685b      	ldr	r3, [r3, #4]
 800bb76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bb78:	429a      	cmp	r2, r3
 800bb7a:	d304      	bcc.n	800bb86 <CircularQueue_Add+0x1ce>
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	685b      	ldr	r3, [r3, #4]
 800bb80:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bb82:	1ad3      	subs	r3, r2, r3
 800bb84:	e000      	b.n	800bb88 <CircularQueue_Add+0x1d0>
 800bb86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb88:	633b      	str	r3, [r7, #48]	@ 0x30
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 800bb8a:	88fb      	ldrh	r3, [r7, #6]
 800bb8c:	0a1b      	lsrs	r3, r3, #8
 800bb8e:	b298      	uxth	r0, r3
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	681a      	ldr	r2, [r3, #0]
 800bb94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb96:	1c59      	adds	r1, r3, #1
 800bb98:	6339      	str	r1, [r7, #48]	@ 0x30
 800bb9a:	4413      	add	r3, r2
 800bb9c:	b2c2      	uxtb	r2, r0
 800bb9e:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	685b      	ldr	r3, [r3, #4]
 800bba4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bba6:	429a      	cmp	r2, r3
 800bba8:	d304      	bcc.n	800bbb4 <CircularQueue_Add+0x1fc>
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	685b      	ldr	r3, [r3, #4]
 800bbae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bbb0:	1ad3      	subs	r3, r2, r3
 800bbb2:	e000      	b.n	800bbb6 <CircularQueue_Add+0x1fe>
 800bbb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbb6:	633b      	str	r3, [r7, #48]	@ 0x30
        q->byteCount += 2;
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	695b      	ldr	r3, [r3, #20]
 800bbbc:	1c9a      	adds	r2, r3, #2
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	615a      	str	r2, [r3, #20]
      }
      
      /* Identify number of bytes of copy takeing account possible wrap, in this case NbBytesToCopy will contains size that fit at end of the queue buffer */
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 800bbc2:	88fa      	ldrh	r2, [r7, #6]
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	6859      	ldr	r1, [r3, #4]
 800bbc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbca:	1acb      	subs	r3, r1, r3
 800bbcc:	4293      	cmp	r3, r2
 800bbce:	bf28      	it	cs
 800bbd0:	4613      	movcs	r3, r2
 800bbd2:	62bb      	str	r3, [r7, #40]	@ 0x28
      /* check if no wrap (NbBytesToCopy == elementSize) or if Wrap and no spsicf option; 
         In this case part of data will copied at the end of the buffer and the rest a the beginning */
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
 800bbd4:	88fb      	ldrh	r3, [r7, #6]
 800bbd6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bbd8:	429a      	cmp	r2, r3
 800bbda:	d007      	beq.n	800bbec <CircularQueue_Add+0x234>
 800bbdc:	88fb      	ldrh	r3, [r7, #6]
 800bbde:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bbe0:	429a      	cmp	r2, r3
 800bbe2:	d225      	bcs.n	800bc30 <CircularQueue_Add+0x278>
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	7f1b      	ldrb	r3, [r3, #28]
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d121      	bne.n	800bc30 <CircularQueue_Add+0x278>
      {
        /* Copy First part (or emtire buffer ) from current position up to the end of the buffer queue (or before if enough room)  */
        memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	681a      	ldr	r2, [r3, #0]
 800bbf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbf2:	18d0      	adds	r0, r2, r3
 800bbf4:	88fb      	ldrh	r3, [r7, #6]
 800bbf6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bbf8:	fb02 f303 	mul.w	r3, r2, r3
 800bbfc:	68ba      	ldr	r2, [r7, #8]
 800bbfe:	4413      	add	r3, r2
 800bc00:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bc02:	4619      	mov	r1, r3
 800bc04:	f002 fe73 	bl	800e8ee <memcpy>
        /* Adjust bytes count */
        q->byteCount += NbBytesToCopy;
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	695a      	ldr	r2, [r3, #20]
 800bc0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc0e:	441a      	add	r2, r3
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	615a      	str	r2, [r3, #20]
        /* Wrap */
        curBuffPosition = 0; 
 800bc14:	2300      	movs	r3, #0
 800bc16:	633b      	str	r3, [r7, #48]	@ 0x30
        /* set NbCopiedBytes bytes with  ampount copied */
        NbCopiedBytes = NbBytesToCopy;
 800bc18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc1a:	627b      	str	r3, [r7, #36]	@ 0x24
        /* set the rest to copy if wrao , if no wrap will be 0 */
        NbBytesToCopy = elementSize - NbBytesToCopy;
 800bc1c:	88fa      	ldrh	r2, [r7, #6]
 800bc1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc20:	1ad3      	subs	r3, r2, r3
 800bc22:	62bb      	str	r3, [r7, #40]	@ 0x28
        /* set the current element Size, will be used to calaculate next last position at beginning of loop */
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 800bc24:	7ffb      	ldrb	r3, [r7, #31]
 800bc26:	b29a      	uxth	r2, r3
 800bc28:	88fb      	ldrh	r3, [r7, #6]
 800bc2a:	4413      	add	r3, r2
 800bc2c:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800bc2e:	e0a4      	b.n	800bd7a <CircularQueue_Add+0x3c2>
      }
      else if (NbBytesToCopy)  /* We have a wrap  to manage */
 800bc30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	f000 80a1 	beq.w	800bd7a <CircularQueue_Add+0x3c2>
      {
       /* case of CIRCULAR_QUEUE_NO_WRAP_FLAG option */
         if (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	7f1b      	ldrb	r3, [r3, #28]
 800bc3c:	f003 0301 	and.w	r3, r3, #1
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d03a      	beq.n	800bcba <CircularQueue_Add+0x302>
        {
          /* if element size are variable and NO_WRAP option, Invalidate end of buffer setting 0xFFFF size*/
          if (q->elementSize == 0)
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	891b      	ldrh	r3, [r3, #8]
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d10d      	bne.n	800bc68 <CircularQueue_Add+0x2b0>
          {
             q->qBuff[curBuffPosition-2] = 0xFF;
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	681a      	ldr	r2, [r3, #0]
 800bc50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc52:	3b02      	subs	r3, #2
 800bc54:	4413      	add	r3, r2
 800bc56:	22ff      	movs	r2, #255	@ 0xff
 800bc58:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = 0xFF;
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	681a      	ldr	r2, [r3, #0]
 800bc5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc60:	3b01      	subs	r3, #1
 800bc62:	4413      	add	r3, r2
 800bc64:	22ff      	movs	r2, #255	@ 0xff
 800bc66:	701a      	strb	r2, [r3, #0]
          }
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	695a      	ldr	r2, [r3, #20]
 800bc6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc6e:	441a      	add	r2, r3
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	615a      	str	r2, [r3, #20]
          /* No bytes coped a the end of buffer */
          NbCopiedBytes = 0;
 800bc74:	2300      	movs	r3, #0
 800bc76:	627b      	str	r3, [r7, #36]	@ 0x24
          /* all element to be copied at the begnning of buffer */
          NbBytesToCopy = elementSize; 
 800bc78:	88fb      	ldrh	r3, [r7, #6]
 800bc7a:	62bb      	str	r3, [r7, #40]	@ 0x28
          /* Wrap */
          curBuffPosition = 0; 
 800bc7c:	2300      	movs	r3, #0
 800bc7e:	633b      	str	r3, [r7, #48]	@ 0x30
          /* if variable size element, invalidate end of buffer setting OxFFFF in element header (size) */
          if (q->elementSize == 0)
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	891b      	ldrh	r3, [r3, #8]
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d16f      	bne.n	800bd68 <CircularQueue_Add+0x3b0>
          {
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	681a      	ldr	r2, [r3, #0]
 800bc8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc8e:	1c59      	adds	r1, r3, #1
 800bc90:	6339      	str	r1, [r7, #48]	@ 0x30
 800bc92:	4413      	add	r3, r2
 800bc94:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bc96:	b2d2      	uxtb	r2, r2
 800bc98:	701a      	strb	r2, [r3, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800bc9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc9c:	0a18      	lsrs	r0, r3, #8
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	681a      	ldr	r2, [r3, #0]
 800bca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bca4:	1c59      	adds	r1, r3, #1
 800bca6:	6339      	str	r1, [r7, #48]	@ 0x30
 800bca8:	4413      	add	r3, r2
 800bcaa:	b2c2      	uxtb	r2, r0
 800bcac:	701a      	strb	r2, [r3, #0]
            q->byteCount += 2;   
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	695b      	ldr	r3, [r3, #20]
 800bcb2:	1c9a      	adds	r2, r3, #2
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	615a      	str	r2, [r3, #20]
 800bcb8:	e056      	b.n	800bd68 <CircularQueue_Add+0x3b0>
          } 
           
        }
        /* case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG option */
        else if (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	7f1b      	ldrb	r3, [r3, #28]
 800bcbe:	f003 0302 	and.w	r3, r3, #2
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d050      	beq.n	800bd68 <CircularQueue_Add+0x3b0>
        {
          if (q->elementSize == 0)
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	891b      	ldrh	r3, [r3, #8]
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d14a      	bne.n	800bd64 <CircularQueue_Add+0x3ac>
          {
            /* reset the size of current element to the nb bytes fitting at the end of buffer */
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	681a      	ldr	r2, [r3, #0]
 800bcd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcd4:	3b02      	subs	r3, #2
 800bcd6:	4413      	add	r3, r2
 800bcd8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bcda:	b2d2      	uxtb	r2, r2
 800bcdc:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800bcde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bce0:	0a19      	lsrs	r1, r3, #8
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	681a      	ldr	r2, [r3, #0]
 800bce6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bce8:	3b01      	subs	r3, #1
 800bcea:	4413      	add	r3, r2
 800bcec:	b2ca      	uxtb	r2, r1
 800bcee:	701a      	strb	r2, [r3, #0]
             /* copy the bytes */ 
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	681a      	ldr	r2, [r3, #0]
 800bcf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcf6:	18d0      	adds	r0, r2, r3
 800bcf8:	88fb      	ldrh	r3, [r7, #6]
 800bcfa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bcfc:	fb02 f303 	mul.w	r3, r2, r3
 800bd00:	68ba      	ldr	r2, [r7, #8]
 800bd02:	4413      	add	r3, r2
 800bd04:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bd06:	4619      	mov	r1, r3
 800bd08:	f002 fdf1 	bl	800e8ee <memcpy>
             q->byteCount += NbBytesToCopy; 
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	695a      	ldr	r2, [r3, #20]
 800bd10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd12:	441a      	add	r2, r3
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	615a      	str	r2, [r3, #20]
             /* set the number of copied bytes */
             NbCopiedBytes = NbBytesToCopy;             
 800bd18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd1a:	627b      	str	r3, [r7, #36]	@ 0x24
             /* set rest of data to be copied to begnning of buffer */
             NbBytesToCopy = elementSize - NbBytesToCopy;
 800bd1c:	88fa      	ldrh	r2, [r7, #6]
 800bd1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd20:	1ad3      	subs	r3, r2, r3
 800bd22:	62bb      	str	r3, [r7, #40]	@ 0x28
             /* one element more dur to split in 2 elements */
             q->elementCount++;
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	699b      	ldr	r3, [r3, #24]
 800bd28:	1c5a      	adds	r2, r3, #1
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	619a      	str	r2, [r3, #24]
             /* Wrap */
             curBuffPosition = 0; 
 800bd2e:	2300      	movs	r3, #0
 800bd30:	633b      	str	r3, [r7, #48]	@ 0x30
             /* Set new size for rest of data */
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	681a      	ldr	r2, [r3, #0]
 800bd36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd38:	1c59      	adds	r1, r3, #1
 800bd3a:	6339      	str	r1, [r7, #48]	@ 0x30
 800bd3c:	4413      	add	r3, r2
 800bd3e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bd40:	b2d2      	uxtb	r2, r2
 800bd42:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800bd44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd46:	0a18      	lsrs	r0, r3, #8
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	681a      	ldr	r2, [r3, #0]
 800bd4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd4e:	1c59      	adds	r1, r3, #1
 800bd50:	6339      	str	r1, [r7, #48]	@ 0x30
 800bd52:	4413      	add	r3, r2
 800bd54:	b2c2      	uxtb	r2, r0
 800bd56:	701a      	strb	r2, [r3, #0]
             q->byteCount += 2;              
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	695b      	ldr	r3, [r3, #20]
 800bd5c:	1c9a      	adds	r2, r3, #2
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	615a      	str	r2, [r3, #20]
 800bd62:	e001      	b.n	800bd68 <CircularQueue_Add+0x3b0>
          else
          {
            /* Should not occur */
            /* can not manage split Flag on Fixed size element */
            /* Buffer is corrupted */
            return NULL;
 800bd64:	2300      	movs	r3, #0
 800bd66:	e049      	b.n	800bdfc <CircularQueue_Add+0x444>
          }
        }
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 800bd68:	7ffb      	ldrb	r3, [r7, #31]
 800bd6a:	b29a      	uxth	r2, r3
 800bd6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd6e:	b29b      	uxth	r3, r3
 800bd70:	4413      	add	r3, r2
 800bd72:	86fb      	strh	r3, [r7, #54]	@ 0x36
        q->last = 0;        
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	2200      	movs	r2, #0
 800bd78:	611a      	str	r2, [r3, #16]
      }  
      
      /* some remaining byte to copy */
      if (NbBytesToCopy)      
 800bd7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d015      	beq.n	800bdac <CircularQueue_Add+0x3f4>
      {
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	681a      	ldr	r2, [r3, #0]
 800bd84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd86:	18d0      	adds	r0, r2, r3
 800bd88:	88fb      	ldrh	r3, [r7, #6]
 800bd8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bd8c:	fb03 f202 	mul.w	r2, r3, r2
 800bd90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd92:	4413      	add	r3, r2
 800bd94:	68ba      	ldr	r2, [r7, #8]
 800bd96:	4413      	add	r3, r2
 800bd98:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bd9a:	4619      	mov	r1, r3
 800bd9c:	f002 fda7 	bl	800e8ee <memcpy>
        q->byteCount += NbBytesToCopy;
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	695a      	ldr	r2, [r3, #20]
 800bda4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bda6:	441a      	add	r2, r3
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	615a      	str	r2, [r3, #20]
      }      
      
      /* One more element */
      q->elementCount++;
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	699b      	ldr	r3, [r3, #24]
 800bdb0:	1c5a      	adds	r2, r3, #1
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	619a      	str	r2, [r3, #24]
    for (i=0; i < nbElements; i++) 
 800bdb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdb8:	3301      	adds	r3, #1
 800bdba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bdbc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bdbe:	683b      	ldr	r3, [r7, #0]
 800bdc0:	429a      	cmp	r2, r3
 800bdc2:	f4ff aeb0 	bcc.w	800bb26 <CircularQueue_Add+0x16e>
    }
    
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	681a      	ldr	r2, [r3, #0]
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	6919      	ldr	r1, [r3, #16]
 800bdce:	7ffb      	ldrb	r3, [r7, #31]
 800bdd0:	4419      	add	r1, r3
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	685b      	ldr	r3, [r3, #4]
 800bdd6:	4299      	cmp	r1, r3
 800bdd8:	d307      	bcc.n	800bdea <CircularQueue_Add+0x432>
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	6919      	ldr	r1, [r3, #16]
 800bdde:	7ffb      	ldrb	r3, [r7, #31]
 800bde0:	4419      	add	r1, r3
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	685b      	ldr	r3, [r3, #4]
 800bde6:	1acb      	subs	r3, r1, r3
 800bde8:	e003      	b.n	800bdf2 <CircularQueue_Add+0x43a>
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	6919      	ldr	r1, [r3, #16]
 800bdee:	7ffb      	ldrb	r3, [r7, #31]
 800bdf0:	440b      	add	r3, r1
 800bdf2:	4413      	add	r3, r2
 800bdf4:	623b      	str	r3, [r7, #32]
  /* for Breakpoint only...to remove */
  else
  {
    return NULL;
  }
  return ptr;
 800bdf6:	6a3b      	ldr	r3, [r7, #32]
 800bdf8:	e000      	b.n	800bdfc <CircularQueue_Add+0x444>
    return NULL;
 800bdfa:	2300      	movs	r3, #0
}
 800bdfc:	4618      	mov	r0, r3
 800bdfe:	3738      	adds	r7, #56	@ 0x38
 800be00:	46bd      	mov	sp, r7
 800be02:	bd80      	pop	{r7, pc}

0800be04 <CircularQueue_Remove>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize: Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on removed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Remove(queue_t *q, uint16_t* elementSize)
{
 800be04:	b480      	push	{r7}
 800be06:	b085      	sub	sp, #20
 800be08:	af00      	add	r7, sp, #0
 800be0a:	6078      	str	r0, [r7, #4]
 800be0c:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800be0e:	2300      	movs	r3, #0
 800be10:	727b      	strb	r3, [r7, #9]
  uint8_t* ptr= NULL;
 800be12:	2300      	movs	r3, #0
 800be14:	60fb      	str	r3, [r7, #12]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	891b      	ldrh	r3, [r3, #8]
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d101      	bne.n	800be22 <CircularQueue_Remove+0x1e>
 800be1e:	2302      	movs	r3, #2
 800be20:	e000      	b.n	800be24 <CircularQueue_Remove+0x20>
 800be22:	2300      	movs	r3, #0
 800be24:	727b      	strb	r3, [r7, #9]
  uint16_t eltSize = 0;
 800be26:	2300      	movs	r3, #0
 800be28:	817b      	strh	r3, [r7, #10]
  if (q->byteCount > 0) 
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	695b      	ldr	r3, [r3, #20]
 800be2e:	2b00      	cmp	r3, #0
 800be30:	f000 80ca 	beq.w	800bfc8 <CircularQueue_Remove+0x1c4>
  {
    /* retrieve element Size */
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	891b      	ldrh	r3, [r3, #8]
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d120      	bne.n	800be7e <CircularQueue_Remove+0x7a>
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	681a      	ldr	r2, [r3, #0]
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	68db      	ldr	r3, [r3, #12]
 800be44:	4413      	add	r3, r2
 800be46:	781b      	ldrb	r3, [r3, #0]
 800be48:	4618      	mov	r0, r3
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	681a      	ldr	r2, [r3, #0]
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	68db      	ldr	r3, [r3, #12]
 800be52:	1c59      	adds	r1, r3, #1
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	685b      	ldr	r3, [r3, #4]
 800be58:	4299      	cmp	r1, r3
 800be5a:	d306      	bcc.n	800be6a <CircularQueue_Remove+0x66>
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	68d9      	ldr	r1, [r3, #12]
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	685b      	ldr	r3, [r3, #4]
 800be64:	1acb      	subs	r3, r1, r3
 800be66:	3301      	adds	r3, #1
 800be68:	e002      	b.n	800be70 <CircularQueue_Remove+0x6c>
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	68db      	ldr	r3, [r3, #12]
 800be6e:	3301      	adds	r3, #1
 800be70:	4413      	add	r3, r2
 800be72:	781b      	ldrb	r3, [r3, #0]
 800be74:	021b      	lsls	r3, r3, #8
 800be76:	b29b      	uxth	r3, r3
 800be78:	4403      	add	r3, r0
 800be7a:	b29b      	uxth	r3, r3
 800be7c:	e001      	b.n	800be82 <CircularQueue_Remove+0x7e>
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	891b      	ldrh	r3, [r3, #8]
 800be82:	817b      	strh	r3, [r7, #10]

     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	7f1b      	ldrb	r3, [r3, #28]
 800be88:	f003 0301 	and.w	r3, r3, #1
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d056      	beq.n	800bf3e <CircularQueue_Remove+0x13a>
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	7f1b      	ldrb	r3, [r3, #28]
 800be94:	f003 0302 	and.w	r3, r3, #2
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d150      	bne.n	800bf3e <CircularQueue_Remove+0x13a>
     {
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800be9c:	897b      	ldrh	r3, [r7, #10]
 800be9e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800bea2:	4293      	cmp	r3, r2
 800bea4:	d103      	bne.n	800beae <CircularQueue_Remove+0xaa>
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	891b      	ldrh	r3, [r3, #8]
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d012      	beq.n	800bed4 <CircularQueue_Remove+0xd0>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	68da      	ldr	r2, [r3, #12]
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	691b      	ldr	r3, [r3, #16]
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800beb6:	429a      	cmp	r2, r3
 800beb8:	d941      	bls.n	800bf3e <CircularQueue_Remove+0x13a>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	891b      	ldrh	r3, [r3, #8]
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d03d      	beq.n	800bf3e <CircularQueue_Remove+0x13a>
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	685a      	ldr	r2, [r3, #4]
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	68db      	ldr	r3, [r3, #12]
 800beca:	1ad3      	subs	r3, r2, r3
 800becc:	687a      	ldr	r2, [r7, #4]
 800bece:	8912      	ldrh	r2, [r2, #8]
 800bed0:	4293      	cmp	r3, r2
 800bed2:	d234      	bcs.n	800bf3e <CircularQueue_Remove+0x13a>
       {
          /* all data from current position up to the end of buffer are invalid */
          q->byteCount -= (q->queueMaxSize - q->first);
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	695a      	ldr	r2, [r3, #20]
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	68d9      	ldr	r1, [r3, #12]
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	685b      	ldr	r3, [r3, #4]
 800bee0:	1acb      	subs	r3, r1, r3
 800bee2:	441a      	add	r2, r3
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	615a      	str	r2, [r3, #20]
          /* Adjust first element pos */
          q->first = 0;
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	2200      	movs	r2, #0
 800beec:	60da      	str	r2, [r3, #12]
          /* retrieve the right size after the wrap [if variable size element] */
          eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	891b      	ldrh	r3, [r3, #8]
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d120      	bne.n	800bf38 <CircularQueue_Remove+0x134>
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	681a      	ldr	r2, [r3, #0]
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	68db      	ldr	r3, [r3, #12]
 800befe:	4413      	add	r3, r2
 800bf00:	781b      	ldrb	r3, [r3, #0]
 800bf02:	4618      	mov	r0, r3
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	681a      	ldr	r2, [r3, #0]
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	68db      	ldr	r3, [r3, #12]
 800bf0c:	1c59      	adds	r1, r3, #1
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	685b      	ldr	r3, [r3, #4]
 800bf12:	4299      	cmp	r1, r3
 800bf14:	d306      	bcc.n	800bf24 <CircularQueue_Remove+0x120>
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	68d9      	ldr	r1, [r3, #12]
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	685b      	ldr	r3, [r3, #4]
 800bf1e:	1acb      	subs	r3, r1, r3
 800bf20:	3301      	adds	r3, #1
 800bf22:	e002      	b.n	800bf2a <CircularQueue_Remove+0x126>
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	68db      	ldr	r3, [r3, #12]
 800bf28:	3301      	adds	r3, #1
 800bf2a:	4413      	add	r3, r2
 800bf2c:	781b      	ldrb	r3, [r3, #0]
 800bf2e:	021b      	lsls	r3, r3, #8
 800bf30:	b29b      	uxth	r3, r3
 800bf32:	4403      	add	r3, r0
 800bf34:	b29b      	uxth	r3, r3
 800bf36:	e001      	b.n	800bf3c <CircularQueue_Remove+0x138>
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	891b      	ldrh	r3, [r3, #8]
 800bf3c:	817b      	strh	r3, [r7, #10]
       }
     }

    /* retrieve element */
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	681a      	ldr	r2, [r3, #0]
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	68d9      	ldr	r1, [r3, #12]
 800bf46:	7a7b      	ldrb	r3, [r7, #9]
 800bf48:	4419      	add	r1, r3
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	685b      	ldr	r3, [r3, #4]
 800bf4e:	4299      	cmp	r1, r3
 800bf50:	d307      	bcc.n	800bf62 <CircularQueue_Remove+0x15e>
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	68d9      	ldr	r1, [r3, #12]
 800bf56:	7a7b      	ldrb	r3, [r7, #9]
 800bf58:	4419      	add	r1, r3
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	685b      	ldr	r3, [r3, #4]
 800bf5e:	1acb      	subs	r3, r1, r3
 800bf60:	e003      	b.n	800bf6a <CircularQueue_Remove+0x166>
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	68d9      	ldr	r1, [r3, #12]
 800bf66:	7a7b      	ldrb	r3, [r7, #9]
 800bf68:	440b      	add	r3, r1
 800bf6a:	4413      	add	r3, r2
 800bf6c:	60fb      	str	r3, [r7, #12]

    /* adjust byte count */
    q->byteCount -= (eltSize + elemSizeStorageRoom) ;
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	695b      	ldr	r3, [r3, #20]
 800bf72:	8979      	ldrh	r1, [r7, #10]
 800bf74:	7a7a      	ldrb	r2, [r7, #9]
 800bf76:	440a      	add	r2, r1
 800bf78:	1a9a      	subs	r2, r3, r2
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	615a      	str	r2, [r3, #20]
    
    /* Adjust q->first */
    if (q->byteCount > 0)
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	695b      	ldr	r3, [r3, #20]
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d01b      	beq.n	800bfbe <CircularQueue_Remove+0x1ba>
    {
      q->first = MOD((q->first+ eltSize + elemSizeStorageRoom ), q->queueMaxSize);
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	68da      	ldr	r2, [r3, #12]
 800bf8a:	897b      	ldrh	r3, [r7, #10]
 800bf8c:	441a      	add	r2, r3
 800bf8e:	7a7b      	ldrb	r3, [r7, #9]
 800bf90:	441a      	add	r2, r3
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	685b      	ldr	r3, [r3, #4]
 800bf96:	429a      	cmp	r2, r3
 800bf98:	d309      	bcc.n	800bfae <CircularQueue_Remove+0x1aa>
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	68da      	ldr	r2, [r3, #12]
 800bf9e:	897b      	ldrh	r3, [r7, #10]
 800bfa0:	441a      	add	r2, r3
 800bfa2:	7a7b      	ldrb	r3, [r7, #9]
 800bfa4:	441a      	add	r2, r3
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	685b      	ldr	r3, [r3, #4]
 800bfaa:	1ad3      	subs	r3, r2, r3
 800bfac:	e005      	b.n	800bfba <CircularQueue_Remove+0x1b6>
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	68da      	ldr	r2, [r3, #12]
 800bfb2:	897b      	ldrh	r3, [r7, #10]
 800bfb4:	441a      	add	r2, r3
 800bfb6:	7a7b      	ldrb	r3, [r7, #9]
 800bfb8:	4413      	add	r3, r2
 800bfba:	687a      	ldr	r2, [r7, #4]
 800bfbc:	60d3      	str	r3, [r2, #12]
    }    
    /* adjust element count */    
    --q->elementCount;    
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	699b      	ldr	r3, [r3, #24]
 800bfc2:	1e5a      	subs	r2, r3, #1
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	619a      	str	r2, [r3, #24]
  }
  if (elementSize != NULL)
 800bfc8:	683b      	ldr	r3, [r7, #0]
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d002      	beq.n	800bfd4 <CircularQueue_Remove+0x1d0>
  {
    *elementSize = eltSize;
 800bfce:	683b      	ldr	r3, [r7, #0]
 800bfd0:	897a      	ldrh	r2, [r7, #10]
 800bfd2:	801a      	strh	r2, [r3, #0]
  }
  return ptr;
 800bfd4:	68fb      	ldr	r3, [r7, #12]
}
 800bfd6:	4618      	mov	r0, r3
 800bfd8:	3714      	adds	r7, #20
 800bfda:	46bd      	mov	sp, r7
 800bfdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfe0:	4770      	bx	lr

0800bfe2 <CircularQueue_Sense>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize:  Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on sensed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Sense(queue_t *q, uint16_t* elementSize)
{
 800bfe2:	b480      	push	{r7}
 800bfe4:	b087      	sub	sp, #28
 800bfe6:	af00      	add	r7, sp, #0
 800bfe8:	6078      	str	r0, [r7, #4]
 800bfea:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800bfec:	2300      	movs	r3, #0
 800bfee:	72fb      	strb	r3, [r7, #11]
  uint8_t* x= NULL;
 800bff0:	2300      	movs	r3, #0
 800bff2:	617b      	str	r3, [r7, #20]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	891b      	ldrh	r3, [r3, #8]
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d101      	bne.n	800c000 <CircularQueue_Sense+0x1e>
 800bffc:	2302      	movs	r3, #2
 800bffe:	e000      	b.n	800c002 <CircularQueue_Sense+0x20>
 800c000:	2300      	movs	r3, #0
 800c002:	72fb      	strb	r3, [r7, #11]
  uint16_t eltSize = 0;
 800c004:	2300      	movs	r3, #0
 800c006:	827b      	strh	r3, [r7, #18]
  uint32_t FirstElemetPos = 0;
 800c008:	2300      	movs	r3, #0
 800c00a:	60fb      	str	r3, [r7, #12]
    
  if (q->byteCount > 0) 
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	695b      	ldr	r3, [r3, #20]
 800c010:	2b00      	cmp	r3, #0
 800c012:	f000 808e 	beq.w	800c132 <CircularQueue_Sense+0x150>
  {
    FirstElemetPos = q->first;
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	68db      	ldr	r3, [r3, #12]
 800c01a:	60fb      	str	r3, [r7, #12]
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	891b      	ldrh	r3, [r3, #8]
 800c020:	2b00      	cmp	r3, #0
 800c022:	d120      	bne.n	800c066 <CircularQueue_Sense+0x84>
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	681a      	ldr	r2, [r3, #0]
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	68db      	ldr	r3, [r3, #12]
 800c02c:	4413      	add	r3, r2
 800c02e:	781b      	ldrb	r3, [r3, #0]
 800c030:	4618      	mov	r0, r3
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	681a      	ldr	r2, [r3, #0]
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	68db      	ldr	r3, [r3, #12]
 800c03a:	1c59      	adds	r1, r3, #1
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	685b      	ldr	r3, [r3, #4]
 800c040:	4299      	cmp	r1, r3
 800c042:	d306      	bcc.n	800c052 <CircularQueue_Sense+0x70>
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	68d9      	ldr	r1, [r3, #12]
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	685b      	ldr	r3, [r3, #4]
 800c04c:	1acb      	subs	r3, r1, r3
 800c04e:	3301      	adds	r3, #1
 800c050:	e002      	b.n	800c058 <CircularQueue_Sense+0x76>
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	68db      	ldr	r3, [r3, #12]
 800c056:	3301      	adds	r3, #1
 800c058:	4413      	add	r3, r2
 800c05a:	781b      	ldrb	r3, [r3, #0]
 800c05c:	021b      	lsls	r3, r3, #8
 800c05e:	b29b      	uxth	r3, r3
 800c060:	4403      	add	r3, r0
 800c062:	b29b      	uxth	r3, r3
 800c064:	e001      	b.n	800c06a <CircularQueue_Sense+0x88>
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	891b      	ldrh	r3, [r3, #8]
 800c06a:	827b      	strh	r3, [r7, #18]
    
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	7f1b      	ldrb	r3, [r3, #28]
 800c070:	f003 0301 	and.w	r3, r3, #1
 800c074:	2b00      	cmp	r3, #0
 800c076:	d047      	beq.n	800c108 <CircularQueue_Sense+0x126>
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	7f1b      	ldrb	r3, [r3, #28]
 800c07c:	f003 0302 	and.w	r3, r3, #2
 800c080:	2b00      	cmp	r3, #0
 800c082:	d141      	bne.n	800c108 <CircularQueue_Sense+0x126>
    { 
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800c084:	8a7b      	ldrh	r3, [r7, #18]
 800c086:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c08a:	4293      	cmp	r3, r2
 800c08c:	d103      	bne.n	800c096 <CircularQueue_Sense+0xb4>
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	891b      	ldrh	r3, [r3, #8]
 800c092:	2b00      	cmp	r3, #0
 800c094:	d012      	beq.n	800c0bc <CircularQueue_Sense+0xda>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	68da      	ldr	r2, [r3, #12]
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	691b      	ldr	r3, [r3, #16]
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800c09e:	429a      	cmp	r2, r3
 800c0a0:	d932      	bls.n	800c108 <CircularQueue_Sense+0x126>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	891b      	ldrh	r3, [r3, #8]
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d02e      	beq.n	800c108 <CircularQueue_Sense+0x126>
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	685a      	ldr	r2, [r3, #4]
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	68db      	ldr	r3, [r3, #12]
 800c0b2:	1ad3      	subs	r3, r2, r3
 800c0b4:	687a      	ldr	r2, [r7, #4]
 800c0b6:	8912      	ldrh	r2, [r2, #8]
 800c0b8:	4293      	cmp	r3, r2
 800c0ba:	d225      	bcs.n	800c108 <CircularQueue_Sense+0x126>

      {
        /* all data from current position up to the end of buffer are invalid */
        FirstElemetPos = 0; /* wrap to the begiining of buffer */
 800c0bc:	2300      	movs	r3, #0
 800c0be:	60fb      	str	r3, [r7, #12]

        /* retrieve the right size after the wrap [if variable size element] */
        eltSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	891b      	ldrh	r3, [r3, #8]
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d11c      	bne.n	800c102 <CircularQueue_Sense+0x120>
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	681a      	ldr	r2, [r3, #0]
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	4413      	add	r3, r2
 800c0d0:	781b      	ldrb	r3, [r3, #0]
 800c0d2:	4618      	mov	r0, r3
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	681a      	ldr	r2, [r3, #0]
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	1c59      	adds	r1, r3, #1
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	685b      	ldr	r3, [r3, #4]
 800c0e0:	4299      	cmp	r1, r3
 800c0e2:	d305      	bcc.n	800c0f0 <CircularQueue_Sense+0x10e>
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	685b      	ldr	r3, [r3, #4]
 800c0e8:	68f9      	ldr	r1, [r7, #12]
 800c0ea:	1acb      	subs	r3, r1, r3
 800c0ec:	3301      	adds	r3, #1
 800c0ee:	e001      	b.n	800c0f4 <CircularQueue_Sense+0x112>
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	3301      	adds	r3, #1
 800c0f4:	4413      	add	r3, r2
 800c0f6:	781b      	ldrb	r3, [r3, #0]
 800c0f8:	021b      	lsls	r3, r3, #8
 800c0fa:	b29b      	uxth	r3, r3
 800c0fc:	4403      	add	r3, r0
 800c0fe:	b29b      	uxth	r3, r3
 800c100:	e001      	b.n	800c106 <CircularQueue_Sense+0x124>
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	891b      	ldrh	r3, [r3, #8]
 800c106:	827b      	strh	r3, [r7, #18]
      }
   }
   /* retrieve element */
    x = q->qBuff + (MOD((FirstElemetPos + elemSizeStorageRoom), q->queueMaxSize));
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	681a      	ldr	r2, [r3, #0]
 800c10c:	7af9      	ldrb	r1, [r7, #11]
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	4419      	add	r1, r3
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	685b      	ldr	r3, [r3, #4]
 800c116:	4299      	cmp	r1, r3
 800c118:	d306      	bcc.n	800c128 <CircularQueue_Sense+0x146>
 800c11a:	7af9      	ldrb	r1, [r7, #11]
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	4419      	add	r1, r3
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	685b      	ldr	r3, [r3, #4]
 800c124:	1acb      	subs	r3, r1, r3
 800c126:	e002      	b.n	800c12e <CircularQueue_Sense+0x14c>
 800c128:	7af9      	ldrb	r1, [r7, #11]
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	440b      	add	r3, r1
 800c12e:	4413      	add	r3, r2
 800c130:	617b      	str	r3, [r7, #20]
  }
  if (elementSize != NULL)
 800c132:	683b      	ldr	r3, [r7, #0]
 800c134:	2b00      	cmp	r3, #0
 800c136:	d002      	beq.n	800c13e <CircularQueue_Sense+0x15c>
  {
    *elementSize = eltSize;
 800c138:	683b      	ldr	r3, [r7, #0]
 800c13a:	8a7a      	ldrh	r2, [r7, #18]
 800c13c:	801a      	strh	r2, [r3, #0]
  }
  return x;
 800c13e:	697b      	ldr	r3, [r7, #20]
}
 800c140:	4618      	mov	r0, r3
 800c142:	371c      	adds	r7, #28
 800c144:	46bd      	mov	sp, r7
 800c146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c14a:	4770      	bx	lr

0800c14c <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 800c14c:	b480      	push	{r7}
 800c14e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 800c150:	4b03      	ldr	r3, [pc, #12]	@ (800c160 <LL_FLASH_GetUDN+0x14>)
 800c152:	681b      	ldr	r3, [r3, #0]
}
 800c154:	4618      	mov	r0, r3
 800c156:	46bd      	mov	sp, r7
 800c158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c15c:	4770      	bx	lr
 800c15e:	bf00      	nop
 800c160:	1fff7580 	.word	0x1fff7580

0800c164 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 800c164:	b480      	push	{r7}
 800c166:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 800c168:	4b03      	ldr	r3, [pc, #12]	@ (800c178 <LL_FLASH_GetDeviceID+0x14>)
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	b2db      	uxtb	r3, r3
}
 800c16e:	4618      	mov	r0, r3
 800c170:	46bd      	mov	sp, r7
 800c172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c176:	4770      	bx	lr
 800c178:	1fff7584 	.word	0x1fff7584

0800c17c <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 800c17c:	b480      	push	{r7}
 800c17e:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 800c180:	4b03      	ldr	r3, [pc, #12]	@ (800c190 <LL_FLASH_GetSTCompanyID+0x14>)
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	0a1b      	lsrs	r3, r3, #8
}
 800c186:	4618      	mov	r0, r3
 800c188:	46bd      	mov	sp, r7
 800c18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c18e:	4770      	bx	lr
 800c190:	1fff7584 	.word	0x1fff7584

0800c194 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 800c194:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c196:	b0b1      	sub	sp, #196	@ 0xc4
 800c198:	af04      	add	r7, sp, #16
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800c19a:	2392      	movs	r3, #146	@ 0x92
 800c19c:	f887 30ab 	strb.w	r3, [r7, #171]	@ 0xab
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */
  WirelessFwInfo_t wireless_info_instance;
  WirelessFwInfo_t *p_wireless_info = &wireless_info_instance;  
 800c1a0:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800c1a4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  char BdAddress[20];
  char StackVersion[23];
  char StackBranch[20];
  char FusVersion[20];
  const uint8_t *bdaddr=0;  
 800c1a8:	2300      	movs	r3, #0
 800c1aa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 800c1ae:	4b84      	ldr	r3, [pc, #528]	@ (800c3c0 <APP_BLE_Init+0x22c>)
 800c1b0:	463c      	mov	r4, r7
 800c1b2:	461d      	mov	r5, r3
 800c1b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c1b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c1b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c1ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c1bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c1be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c1c0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800c1c4:	c403      	stmia	r4!, {r0, r1}
 800c1c6:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 800c1c8:	f000 ff32 	bl	800d030 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 800c1cc:	2101      	movs	r1, #1
 800c1ce:	2002      	movs	r0, #2
 800c1d0:	f001 fe9c 	bl	800df0c <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 800c1d4:	4a7b      	ldr	r2, [pc, #492]	@ (800c3c4 <APP_BLE_Init+0x230>)
 800c1d6:	2100      	movs	r1, #0
 800c1d8:	2002      	movs	r0, #2
 800c1da:	f001 ffc3 	bl	800e164 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 800c1de:	463b      	mov	r3, r7
 800c1e0:	4618      	mov	r0, r3
 800c1e2:	f7fe fc55 	bl	800aa90 <SHCI_C2_BLE_Init>
 800c1e6:	4603      	mov	r3, r0
 800c1e8:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
  if (status != SHCI_Success)
 800c1ec:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d008      	beq.n	800c206 <APP_BLE_Init+0x72>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
 800c1f4:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800c1f8:	4619      	mov	r1, r3
 800c1fa:	4873      	ldr	r0, [pc, #460]	@ (800c3c8 <APP_BLE_Init+0x234>)
 800c1fc:	f002 f992 	bl	800e524 <iprintf>
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 800c200:	f7f6 fe16 	bl	8002e30 <Error_Handler>
 800c204:	e002      	b.n	800c20c <APP_BLE_Init+0x78>
  }
  else
  {
    APP_DBG_MSG("  Success: SHCI_C2_BLE_Init command\n\r");
 800c206:	4871      	ldr	r0, [pc, #452]	@ (800c3cc <APP_BLE_Init+0x238>)
 800c208:	f002 f98c 	bl	800e524 <iprintf>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 800c20c:	f000 ff26 	bl	800d05c <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 800c210:	f7fe fb98 	bl	800a944 <SVCCTL_Init>


  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800c214:	4b6e      	ldr	r3, [pc, #440]	@ (800c3d0 <APP_BLE_Init+0x23c>)
 800c216:	2200      	movs	r2, #0
 800c218:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 800c21c:	4b6c      	ldr	r3, [pc, #432]	@ (800c3d0 <APP_BLE_Init+0x23c>)
 800c21e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c222:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 800c224:	4a6b      	ldr	r2, [pc, #428]	@ (800c3d4 <APP_BLE_Init+0x240>)
 800c226:	2100      	movs	r1, #0
 800c228:	2001      	movs	r0, #1
 800c22a:	f001 ff9b 	bl	800e164 <UTIL_SEQ_RegTask>
#if (BLE_CFG_OTA_REBOOT_CHAR != 0)
  a_ManufData[sizeof(a_ManufData)-8] = CFG_FEATURE_OTA_REBOOT;
#endif /* BLE_CFG_OTA_REBOOT_CHAR != 0 */

#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 800c22e:	2006      	movs	r0, #6
 800c230:	f7fe f97e 	bl	800a530 <aci_hal_set_radio_activity_mask>
 800c234:	4603      	mov	r3, r0
 800c236:	f887 30ab 	strb.w	r3, [r7, #171]	@ 0xab
  if (ret != BLE_STATUS_SUCCESS)
 800c23a:	f897 30ab 	ldrb.w	r3, [r7, #171]	@ 0xab
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d006      	beq.n	800c250 <APP_BLE_Init+0xbc>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_radio_activity_mask command, result: 0x%x \n\r", ret);
 800c242:	f897 30ab 	ldrb.w	r3, [r7, #171]	@ 0xab
 800c246:	4619      	mov	r1, r3
 800c248:	4863      	ldr	r0, [pc, #396]	@ (800c3d8 <APP_BLE_Init+0x244>)
 800c24a:	f002 f96b 	bl	800e524 <iprintf>
 800c24e:	e002      	b.n	800c256 <APP_BLE_Init+0xc2>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_radio_activity_mask command\n\r");
 800c250:	4862      	ldr	r0, [pc, #392]	@ (800c3dc <APP_BLE_Init+0x248>)
 800c252:	f002 f967 	bl	800e524 <iprintf>
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize P2P Server Application
   */
  P2PS_APP_Init();
 800c256:	f001 fadf 	bl	800d818 <P2PS_APP_Init>

  /* USER CODE BEGIN APP_BLE_Init_3 */
  Add_EEG_Stream_Notify_Service();
 800c25a:	f000 f8df 	bl	800c41c <Add_EEG_Stream_Notify_Service>
  Add_Event_Notify_Service();
 800c25e:	f000 f9cb 	bl	800c5f8 <Add_Event_Notify_Service>
  Add_Motion_Notify_Service();
 800c262:	f000 fa61 	bl	800c728 <Add_Motion_Notify_Service>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Create timer to handle the Advertising Stop
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.Advertising_mgr_timer_Id), hw_ts_SingleShot, Adv_Cancel_Req);
 800c266:	4b5e      	ldr	r3, [pc, #376]	@ (800c3e0 <APP_BLE_Init+0x24c>)
 800c268:	2200      	movs	r2, #0
 800c26a:	495e      	ldr	r1, [pc, #376]	@ (800c3e4 <APP_BLE_Init+0x250>)
 800c26c:	2000      	movs	r0, #0
 800c26e:	f7f5 fe83 	bl	8001f78 <HW_TS_Create>
  /**
   * Create timer to handle the Led Switch OFF
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.SwitchOffGPIO_timer_Id), hw_ts_SingleShot, Switch_OFF_GPIO);
 800c272:	4b5d      	ldr	r3, [pc, #372]	@ (800c3e8 <APP_BLE_Init+0x254>)
 800c274:	2200      	movs	r2, #0
 800c276:	495d      	ldr	r1, [pc, #372]	@ (800c3ec <APP_BLE_Init+0x258>)
 800c278:	2000      	movs	r0, #0
 800c27a:	f7f5 fe7d 	bl	8001f78 <HW_TS_Create>

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 800c27e:	4b54      	ldr	r3, [pc, #336]	@ (800c3d0 <APP_BLE_Init+0x23c>)
 800c280:	2200      	movs	r2, #0
 800c282:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 800c284:	4b52      	ldr	r3, [pc, #328]	@ (800c3d0 <APP_BLE_Init+0x23c>)
 800c286:	2200      	movs	r2, #0
 800c288:	761a      	strb	r2, [r3, #24]

  /* Initialize intervals for reconnexion without intervals update */
  AdvIntervalMin = CFG_FAST_CONN_ADV_INTERVAL_MIN;
 800c28a:	4b59      	ldr	r3, [pc, #356]	@ (800c3f0 <APP_BLE_Init+0x25c>)
 800c28c:	2280      	movs	r2, #128	@ 0x80
 800c28e:	801a      	strh	r2, [r3, #0]
  AdvIntervalMax = CFG_FAST_CONN_ADV_INTERVAL_MAX;
 800c290:	4b58      	ldr	r3, [pc, #352]	@ (800c3f4 <APP_BLE_Init+0x260>)
 800c292:	22a0      	movs	r2, #160	@ 0xa0
 800c294:	801a      	strh	r2, [r3, #0]

  /**
   * Start to Advertise to be connected by P2P Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 800c296:	2001      	movs	r0, #1
 800c298:	f001 f890 	bl	800d3bc <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */
   /* Displays the board information: MAC Address, Stack version, FUS version*/ 
   if (SHCI_GetWirelessFwInfo(p_wireless_info) != SHCI_Success)
 800c29c:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 800c2a0:	f7fe fc3a 	bl	800ab18 <SHCI_GetWirelessFwInfo>
 800c2a4:	4603      	mov	r3, r0
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d15a      	bne.n	800c360 <APP_BLE_Init+0x1cc>
   {
     // Error
   }
   else
   {
     bdaddr= BleGetBdAddress();
 800c2aa:	f001 f933 	bl	800d514 <BleGetBdAddress>
 800c2ae:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
     sprintf(BdAddress, "BD_ad=%02x%02x%02x%02x%02x%02x", bdaddr[5],bdaddr[4],bdaddr[3],bdaddr[2],bdaddr[1],bdaddr[0]);
 800c2b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c2b6:	3305      	adds	r3, #5
 800c2b8:	781b      	ldrb	r3, [r3, #0]
 800c2ba:	461d      	mov	r5, r3
 800c2bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c2c0:	3304      	adds	r3, #4
 800c2c2:	781b      	ldrb	r3, [r3, #0]
 800c2c4:	461e      	mov	r6, r3
 800c2c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c2ca:	3303      	adds	r3, #3
 800c2cc:	781b      	ldrb	r3, [r3, #0]
 800c2ce:	461a      	mov	r2, r3
 800c2d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c2d4:	3302      	adds	r3, #2
 800c2d6:	781b      	ldrb	r3, [r3, #0]
 800c2d8:	4619      	mov	r1, r3
 800c2da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c2de:	3301      	adds	r3, #1
 800c2e0:	781b      	ldrb	r3, [r3, #0]
 800c2e2:	461c      	mov	r4, r3
 800c2e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c2e8:	781b      	ldrb	r3, [r3, #0]
 800c2ea:	f107 007c 	add.w	r0, r7, #124	@ 0x7c
 800c2ee:	9303      	str	r3, [sp, #12]
 800c2f0:	9402      	str	r4, [sp, #8]
 800c2f2:	9101      	str	r1, [sp, #4]
 800c2f4:	9200      	str	r2, [sp, #0]
 800c2f6:	4633      	mov	r3, r6
 800c2f8:	462a      	mov	r2, r5
 800c2fa:	493f      	ldr	r1, [pc, #252]	@ (800c3f8 <APP_BLE_Init+0x264>)
 800c2fc:	f002 f98a 	bl	800e614 <siprintf>
     sprintf(StackVersion, "BLE Stack=v%d.%d.%d", p_wireless_info->VersionMajor, p_wireless_info->VersionMinor, p_wireless_info->VersionSub);
 800c300:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c304:	781b      	ldrb	r3, [r3, #0]
 800c306:	461a      	mov	r2, r3
 800c308:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c30c:	785b      	ldrb	r3, [r3, #1]
 800c30e:	4619      	mov	r1, r3
 800c310:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c314:	789b      	ldrb	r3, [r3, #2]
 800c316:	f107 0064 	add.w	r0, r7, #100	@ 0x64
 800c31a:	9300      	str	r3, [sp, #0]
 800c31c:	460b      	mov	r3, r1
 800c31e:	4937      	ldr	r1, [pc, #220]	@ (800c3fc <APP_BLE_Init+0x268>)
 800c320:	f002 f978 	bl	800e614 <siprintf>
     sprintf(StackBranch, "Branch=%d Type=%d", p_wireless_info->VersionBranch, p_wireless_info->VersionReleaseType);
 800c324:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c328:	78db      	ldrb	r3, [r3, #3]
 800c32a:	461a      	mov	r2, r3
 800c32c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c330:	791b      	ldrb	r3, [r3, #4]
 800c332:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 800c336:	4932      	ldr	r1, [pc, #200]	@ (800c400 <APP_BLE_Init+0x26c>)
 800c338:	f002 f96c 	bl	800e614 <siprintf>
     sprintf(FusVersion, "FUS v%d.%d.%d", p_wireless_info->FusVersionMajor, p_wireless_info->FusVersionMinor, p_wireless_info->FusVersionSub);
 800c33c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c340:	7a9b      	ldrb	r3, [r3, #10]
 800c342:	461a      	mov	r2, r3
 800c344:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c348:	7adb      	ldrb	r3, [r3, #11]
 800c34a:	4619      	mov	r1, r3
 800c34c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c350:	7b1b      	ldrb	r3, [r3, #12]
 800c352:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 800c356:	9300      	str	r3, [sp, #0]
 800c358:	460b      	mov	r3, r1
 800c35a:	492a      	ldr	r1, [pc, #168]	@ (800c404 <APP_BLE_Init+0x270>)
 800c35c:	f002 f95a 	bl	800e614 <siprintf>
     
   }
   HAL_Delay(4000);
 800c360:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 800c364:	f7f5 f896 	bl	8001494 <HAL_Delay>
   /* Displays Application */
   
   sprintf(BdAddress, "BD_ad=%02x%02x%02x%02x%02x%02x", bdaddr[5],bdaddr[4],bdaddr[3],bdaddr[2],bdaddr[1],bdaddr[0]);
 800c368:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c36c:	3305      	adds	r3, #5
 800c36e:	781b      	ldrb	r3, [r3, #0]
 800c370:	461d      	mov	r5, r3
 800c372:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c376:	3304      	adds	r3, #4
 800c378:	781b      	ldrb	r3, [r3, #0]
 800c37a:	461e      	mov	r6, r3
 800c37c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c380:	3303      	adds	r3, #3
 800c382:	781b      	ldrb	r3, [r3, #0]
 800c384:	461a      	mov	r2, r3
 800c386:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c38a:	3302      	adds	r3, #2
 800c38c:	781b      	ldrb	r3, [r3, #0]
 800c38e:	4619      	mov	r1, r3
 800c390:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c394:	3301      	adds	r3, #1
 800c396:	781b      	ldrb	r3, [r3, #0]
 800c398:	461c      	mov	r4, r3
 800c39a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c39e:	781b      	ldrb	r3, [r3, #0]
 800c3a0:	f107 007c 	add.w	r0, r7, #124	@ 0x7c
 800c3a4:	9303      	str	r3, [sp, #12]
 800c3a6:	9402      	str	r4, [sp, #8]
 800c3a8:	9101      	str	r1, [sp, #4]
 800c3aa:	9200      	str	r2, [sp, #0]
 800c3ac:	4633      	mov	r3, r6
 800c3ae:	462a      	mov	r2, r5
 800c3b0:	4911      	ldr	r1, [pc, #68]	@ (800c3f8 <APP_BLE_Init+0x264>)
 800c3b2:	f002 f92f 	bl	800e614 <siprintf>

  /* USER CODE END APP_BLE_Init_2 */

  return;
 800c3b6:	bf00      	nop
}
 800c3b8:	37b4      	adds	r7, #180	@ 0xb4
 800c3ba:	46bd      	mov	sp, r7
 800c3bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c3be:	bf00      	nop
 800c3c0:	0800fc5c 	.word	0x0800fc5c
 800c3c4:	0800acad 	.word	0x0800acad
 800c3c8:	0800fb28 	.word	0x0800fb28
 800c3cc:	0800fb60 	.word	0x0800fb60
 800c3d0:	200004dc 	.word	0x200004dc
 800c3d4:	0800d59d 	.word	0x0800d59d
 800c3d8:	0800fb88 	.word	0x0800fb88
 800c3dc:	0800fbcc 	.word	0x0800fbcc
 800c3e0:	0800d5f5 	.word	0x0800d5f5
 800c3e4:	20000561 	.word	0x20000561
 800c3e8:	0800d605 	.word	0x0800d605
 800c3ec:	20000562 	.word	0x20000562
 800c3f0:	20000570 	.word	0x20000570
 800c3f4:	20000572 	.word	0x20000572
 800c3f8:	0800fc04 	.word	0x0800fc04
 800c3fc:	0800fc24 	.word	0x0800fc24
 800c400:	0800fc38 	.word	0x0800fc38
 800c404:	0800fc4c 	.word	0x0800fc4c

0800c408 <Hermes_App_Init>:



void Hermes_App_Init(void){
 800c408:	b580      	push	{r7, lr}
 800c40a:	af00      	add	r7, sp, #0

	  SVCCTL_RegisterSvcHandler(Hermes_Event_Handler);
 800c40c:	4802      	ldr	r0, [pc, #8]	@ (800c418 <Hermes_App_Init+0x10>)
 800c40e:	f7fe fad1 	bl	800a9b4 <SVCCTL_RegisterSvcHandler>

}
 800c412:	bf00      	nop
 800c414:	bd80      	pop	{r7, pc}
 800c416:	bf00      	nop
 800c418:	0800d6c5 	.word	0x0800d6c5

0800c41c <Add_EEG_Stream_Notify_Service>:



static tBleStatus Add_EEG_Stream_Notify_Service(void)
{
 800c41c:	b580      	push	{r7, lr}
 800c41e:	b094      	sub	sp, #80	@ 0x50
 800c420:	af06      	add	r7, sp, #24
    tBleStatus ret = BLE_STATUS_SUCCESS;
 800c422:	2300      	movs	r3, #0
 800c424:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    uint8_t eeg_service_uuid[16];
    uint8_t eeg_stream_char_uuid[16];
    uint8_t eeg_config_char_uuid[16];

    // Add service
    COPY_EEG_SERVICE_UUID(eeg_service_uuid);
 800c428:	231b      	movs	r3, #27
 800c42a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 800c42e:	23c5      	movs	r3, #197	@ 0xc5
 800c430:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800c434:	23d5      	movs	r3, #213	@ 0xd5
 800c436:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800c43a:	23a5      	movs	r3, #165	@ 0xa5
 800c43c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c440:	2302      	movs	r3, #2
 800c442:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 800c446:	2300      	movs	r3, #0
 800c448:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 800c44c:	2351      	movs	r3, #81	@ 0x51
 800c44e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800c452:	23a1      	movs	r3, #161	@ 0xa1
 800c454:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c458:	23e5      	movs	r3, #229	@ 0xe5
 800c45a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 800c45e:	2311      	movs	r3, #17
 800c460:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 800c464:	2367      	movs	r3, #103	@ 0x67
 800c466:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800c46a:	2349      	movs	r3, #73	@ 0x49
 800c46c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800c470:	23e0      	movs	r3, #224	@ 0xe0
 800c472:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
 800c476:	2380      	movs	r3, #128	@ 0x80
 800c478:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
 800c47c:	23a4      	movs	r3, #164	@ 0xa4
 800c47e:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
 800c482:	239f      	movs	r3, #159	@ 0x9f
 800c484:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    ret = aci_gatt_add_service(UUID_TYPE_128,
 800c488:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 800c48c:	4b54      	ldr	r3, [pc, #336]	@ (800c5e0 <Add_EEG_Stream_Notify_Service+0x1c4>)
 800c48e:	9300      	str	r3, [sp, #0]
 800c490:	2308      	movs	r3, #8
 800c492:	2201      	movs	r2, #1
 800c494:	2002      	movs	r0, #2
 800c496:	f7fd fc83 	bl	8009da0 <aci_gatt_add_service>
 800c49a:	4603      	mov	r3, r0
 800c49c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                              (Service_UUID_t *) eeg_service_uuid,
                              PRIMARY_SERVICE,
							  2 + 3 + 3, /* 2 for service + 3 + 3 for 2 characteristic */
                              &(BleApplicationContext.BleApplicationContext_legacy.eeg_service_handle));

    if (ret != BLE_STATUS_SUCCESS)
 800c4a0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d008      	beq.n	800c4ba <Add_EEG_Stream_Notify_Service+0x9e>
    {
        APP_DBG_MSG("Error adding New Notify Service - ret=0x%x\n", ret);
 800c4a8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c4ac:	4619      	mov	r1, r3
 800c4ae:	484d      	ldr	r0, [pc, #308]	@ (800c5e4 <Add_EEG_Stream_Notify_Service+0x1c8>)
 800c4b0:	f002 f838 	bl	800e524 <iprintf>
        return ret;
 800c4b4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c4b8:	e08e      	b.n	800c5d8 <Add_EEG_Stream_Notify_Service+0x1bc>
    }

    // Add characteristic
    COPY_EEG_DATA_UUID(eeg_stream_char_uuid);
 800c4ba:	231b      	movs	r3, #27
 800c4bc:	753b      	strb	r3, [r7, #20]
 800c4be:	23c5      	movs	r3, #197	@ 0xc5
 800c4c0:	757b      	strb	r3, [r7, #21]
 800c4c2:	23d5      	movs	r3, #213	@ 0xd5
 800c4c4:	75bb      	strb	r3, [r7, #22]
 800c4c6:	23a5      	movs	r3, #165	@ 0xa5
 800c4c8:	75fb      	strb	r3, [r7, #23]
 800c4ca:	2302      	movs	r3, #2
 800c4cc:	763b      	strb	r3, [r7, #24]
 800c4ce:	2300      	movs	r3, #0
 800c4d0:	767b      	strb	r3, [r7, #25]
 800c4d2:	2351      	movs	r3, #81	@ 0x51
 800c4d4:	76bb      	strb	r3, [r7, #26]
 800c4d6:	23a1      	movs	r3, #161	@ 0xa1
 800c4d8:	76fb      	strb	r3, [r7, #27]
 800c4da:	23e5      	movs	r3, #229	@ 0xe5
 800c4dc:	773b      	strb	r3, [r7, #28]
 800c4de:	2311      	movs	r3, #17
 800c4e0:	777b      	strb	r3, [r7, #29]
 800c4e2:	2367      	movs	r3, #103	@ 0x67
 800c4e4:	77bb      	strb	r3, [r7, #30]
 800c4e6:	2349      	movs	r3, #73	@ 0x49
 800c4e8:	77fb      	strb	r3, [r7, #31]
 800c4ea:	23e1      	movs	r3, #225	@ 0xe1
 800c4ec:	f887 3020 	strb.w	r3, [r7, #32]
 800c4f0:	2380      	movs	r3, #128	@ 0x80
 800c4f2:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
 800c4f6:	23a4      	movs	r3, #164	@ 0xa4
 800c4f8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800c4fc:	239f      	movs	r3, #159	@ 0x9f
 800c4fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    ret = aci_gatt_add_char(BleApplicationContext.BleApplicationContext_legacy.eeg_service_handle,
 800c502:	4b39      	ldr	r3, [pc, #228]	@ (800c5e8 <Add_EEG_Stream_Notify_Service+0x1cc>)
 800c504:	f8b3 007e 	ldrh.w	r0, [r3, #126]	@ 0x7e
 800c508:	f107 0214 	add.w	r2, r7, #20
 800c50c:	4b37      	ldr	r3, [pc, #220]	@ (800c5ec <Add_EEG_Stream_Notify_Service+0x1d0>)
 800c50e:	9305      	str	r3, [sp, #20]
 800c510:	2301      	movs	r3, #1
 800c512:	9304      	str	r3, [sp, #16]
 800c514:	230a      	movs	r3, #10
 800c516:	9303      	str	r3, [sp, #12]
 800c518:	2301      	movs	r3, #1
 800c51a:	9302      	str	r3, [sp, #8]
 800c51c:	2300      	movs	r3, #0
 800c51e:	9301      	str	r3, [sp, #4]
 800c520:	2310      	movs	r3, #16
 800c522:	9300      	str	r3, [sp, #0]
 800c524:	23f1      	movs	r3, #241	@ 0xf1
 800c526:	2102      	movs	r1, #2
 800c528:	f7fd fd10 	bl	8009f4c <aci_gatt_add_char>
 800c52c:	4603      	mov	r3, r0
 800c52e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
						   GATT_NOTIFY_ATTRIBUTE_WRITE,
                           10,
                           CHAR_VALUE_LEN_VARIABLE,
                           &(BleApplicationContext.eeg_data_char_handle));

    if (ret != BLE_STATUS_SUCCESS)
 800c532:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c536:	2b00      	cmp	r3, #0
 800c538:	d008      	beq.n	800c54c <Add_EEG_Stream_Notify_Service+0x130>
    {
        APP_DBG_MSG("Error adding New Notify Characteristic - ret=0x%x\n", ret);
 800c53a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c53e:	4619      	mov	r1, r3
 800c540:	482b      	ldr	r0, [pc, #172]	@ (800c5f0 <Add_EEG_Stream_Notify_Service+0x1d4>)
 800c542:	f001 ffef 	bl	800e524 <iprintf>
        return ret;
 800c546:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c54a:	e045      	b.n	800c5d8 <Add_EEG_Stream_Notify_Service+0x1bc>
    }

    // Add characteristic
    COPY_EEG_CONFIG_UUID(eeg_config_char_uuid);
 800c54c:	231b      	movs	r3, #27
 800c54e:	713b      	strb	r3, [r7, #4]
 800c550:	23c5      	movs	r3, #197	@ 0xc5
 800c552:	717b      	strb	r3, [r7, #5]
 800c554:	23d5      	movs	r3, #213	@ 0xd5
 800c556:	71bb      	strb	r3, [r7, #6]
 800c558:	23a5      	movs	r3, #165	@ 0xa5
 800c55a:	71fb      	strb	r3, [r7, #7]
 800c55c:	2302      	movs	r3, #2
 800c55e:	723b      	strb	r3, [r7, #8]
 800c560:	2300      	movs	r3, #0
 800c562:	727b      	strb	r3, [r7, #9]
 800c564:	2351      	movs	r3, #81	@ 0x51
 800c566:	72bb      	strb	r3, [r7, #10]
 800c568:	23a1      	movs	r3, #161	@ 0xa1
 800c56a:	72fb      	strb	r3, [r7, #11]
 800c56c:	23e5      	movs	r3, #229	@ 0xe5
 800c56e:	733b      	strb	r3, [r7, #12]
 800c570:	2311      	movs	r3, #17
 800c572:	737b      	strb	r3, [r7, #13]
 800c574:	2367      	movs	r3, #103	@ 0x67
 800c576:	73bb      	strb	r3, [r7, #14]
 800c578:	2349      	movs	r3, #73	@ 0x49
 800c57a:	73fb      	strb	r3, [r7, #15]
 800c57c:	23e2      	movs	r3, #226	@ 0xe2
 800c57e:	743b      	strb	r3, [r7, #16]
 800c580:	2380      	movs	r3, #128	@ 0x80
 800c582:	747b      	strb	r3, [r7, #17]
 800c584:	23a4      	movs	r3, #164	@ 0xa4
 800c586:	74bb      	strb	r3, [r7, #18]
 800c588:	239f      	movs	r3, #159	@ 0x9f
 800c58a:	74fb      	strb	r3, [r7, #19]
    ret = aci_gatt_add_char(BleApplicationContext.BleApplicationContext_legacy.eeg_service_handle,
 800c58c:	4b16      	ldr	r3, [pc, #88]	@ (800c5e8 <Add_EEG_Stream_Notify_Service+0x1cc>)
 800c58e:	f8b3 007e 	ldrh.w	r0, [r3, #126]	@ 0x7e
 800c592:	1d3a      	adds	r2, r7, #4
 800c594:	4b17      	ldr	r3, [pc, #92]	@ (800c5f4 <Add_EEG_Stream_Notify_Service+0x1d8>)
 800c596:	9305      	str	r3, [sp, #20]
 800c598:	2301      	movs	r3, #1
 800c59a:	9304      	str	r3, [sp, #16]
 800c59c:	230a      	movs	r3, #10
 800c59e:	9303      	str	r3, [sp, #12]
 800c5a0:	2301      	movs	r3, #1
 800c5a2:	9302      	str	r3, [sp, #8]
 800c5a4:	2300      	movs	r3, #0
 800c5a6:	9301      	str	r3, [sp, #4]
 800c5a8:	2306      	movs	r3, #6
 800c5aa:	9300      	str	r3, [sp, #0]
 800c5ac:	2303      	movs	r3, #3
 800c5ae:	2102      	movs	r1, #2
 800c5b0:	f7fd fccc 	bl	8009f4c <aci_gatt_add_char>
 800c5b4:	4603      	mov	r3, r0
 800c5b6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
						   GATT_NOTIFY_ATTRIBUTE_WRITE,
                           10,
                           CHAR_VALUE_LEN_VARIABLE,
                           &(BleApplicationContext.eeg_config_char_handle));

    if (ret != BLE_STATUS_SUCCESS)
 800c5ba:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d008      	beq.n	800c5d4 <Add_EEG_Stream_Notify_Service+0x1b8>
    {
        APP_DBG_MSG("Error adding New Notify Characteristic - ret=0x%x\n", ret);
 800c5c2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c5c6:	4619      	mov	r1, r3
 800c5c8:	4809      	ldr	r0, [pc, #36]	@ (800c5f0 <Add_EEG_Stream_Notify_Service+0x1d4>)
 800c5ca:	f001 ffab 	bl	800e524 <iprintf>
        return ret;
 800c5ce:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c5d2:	e001      	b.n	800c5d8 <Add_EEG_Stream_Notify_Service+0x1bc>
    }

    return ret;
 800c5d4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 800c5d8:	4618      	mov	r0, r3
 800c5da:	3738      	adds	r7, #56	@ 0x38
 800c5dc:	46bd      	mov	sp, r7
 800c5de:	bd80      	pop	{r7, pc}
 800c5e0:	2000055a 	.word	0x2000055a
 800c5e4:	0800fc98 	.word	0x0800fc98
 800c5e8:	200004dc 	.word	0x200004dc
 800c5ec:	20000564 	.word	0x20000564
 800c5f0:	0800fcc4 	.word	0x0800fcc4
 800c5f4:	2000056e 	.word	0x2000056e

0800c5f8 <Add_Event_Notify_Service>:



static tBleStatus Add_Event_Notify_Service(void)
{
 800c5f8:	b580      	push	{r7, lr}
 800c5fa:	b090      	sub	sp, #64	@ 0x40
 800c5fc:	af06      	add	r7, sp, #24
    tBleStatus ret = BLE_STATUS_SUCCESS;
 800c5fe:	2300      	movs	r3, #0
 800c600:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    uint8_t event_service_uuid[16];
    uint8_t event_char_uuid[16];

    // Add service
    COPY_EVENT_SERVICE_UUID(event_service_uuid);
 800c604:	231b      	movs	r3, #27
 800c606:	753b      	strb	r3, [r7, #20]
 800c608:	23c5      	movs	r3, #197	@ 0xc5
 800c60a:	757b      	strb	r3, [r7, #21]
 800c60c:	23d5      	movs	r3, #213	@ 0xd5
 800c60e:	75bb      	strb	r3, [r7, #22]
 800c610:	23a5      	movs	r3, #165	@ 0xa5
 800c612:	75fb      	strb	r3, [r7, #23]
 800c614:	2302      	movs	r3, #2
 800c616:	763b      	strb	r3, [r7, #24]
 800c618:	2300      	movs	r3, #0
 800c61a:	767b      	strb	r3, [r7, #25]
 800c61c:	2351      	movs	r3, #81	@ 0x51
 800c61e:	76bb      	strb	r3, [r7, #26]
 800c620:	23a1      	movs	r3, #161	@ 0xa1
 800c622:	76fb      	strb	r3, [r7, #27]
 800c624:	23e5      	movs	r3, #229	@ 0xe5
 800c626:	773b      	strb	r3, [r7, #28]
 800c628:	2311      	movs	r3, #17
 800c62a:	777b      	strb	r3, [r7, #29]
 800c62c:	2367      	movs	r3, #103	@ 0x67
 800c62e:	77bb      	strb	r3, [r7, #30]
 800c630:	2349      	movs	r3, #73	@ 0x49
 800c632:	77fb      	strb	r3, [r7, #31]
 800c634:	2300      	movs	r3, #0
 800c636:	f887 3020 	strb.w	r3, [r7, #32]
 800c63a:	2383      	movs	r3, #131	@ 0x83
 800c63c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
 800c640:	23a4      	movs	r3, #164	@ 0xa4
 800c642:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800c646:	239f      	movs	r3, #159	@ 0x9f
 800c648:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    ret = aci_gatt_add_service(UUID_TYPE_128,
 800c64c:	f107 0114 	add.w	r1, r7, #20
 800c650:	4b30      	ldr	r3, [pc, #192]	@ (800c714 <Add_Event_Notify_Service+0x11c>)
 800c652:	9300      	str	r3, [sp, #0]
 800c654:	2305      	movs	r3, #5
 800c656:	2201      	movs	r2, #1
 800c658:	2002      	movs	r0, #2
 800c65a:	f7fd fba1 	bl	8009da0 <aci_gatt_add_service>
 800c65e:	4603      	mov	r3, r0
 800c660:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                              (Service_UUID_t *) event_service_uuid,
                              PRIMARY_SERVICE,
                              2 + 3, /* 2 for service + 3 for 1 characteristic */
                              &(BleApplicationContext.BleApplicationContext_legacy.event_service_handle));

    if (ret != BLE_STATUS_SUCCESS)
 800c664:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d008      	beq.n	800c67e <Add_Event_Notify_Service+0x86>
    {
        APP_DBG_MSG("Error adding New Notify Service - ret=0x%x\n", ret);
 800c66c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c670:	4619      	mov	r1, r3
 800c672:	4829      	ldr	r0, [pc, #164]	@ (800c718 <Add_Event_Notify_Service+0x120>)
 800c674:	f001 ff56 	bl	800e524 <iprintf>
        return ret;
 800c678:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c67c:	e045      	b.n	800c70a <Add_Event_Notify_Service+0x112>
    }

    // Add characteristic
    COPY_EVENT_UUID(event_char_uuid);
 800c67e:	231b      	movs	r3, #27
 800c680:	713b      	strb	r3, [r7, #4]
 800c682:	23c5      	movs	r3, #197	@ 0xc5
 800c684:	717b      	strb	r3, [r7, #5]
 800c686:	23d5      	movs	r3, #213	@ 0xd5
 800c688:	71bb      	strb	r3, [r7, #6]
 800c68a:	23a5      	movs	r3, #165	@ 0xa5
 800c68c:	71fb      	strb	r3, [r7, #7]
 800c68e:	2302      	movs	r3, #2
 800c690:	723b      	strb	r3, [r7, #8]
 800c692:	2300      	movs	r3, #0
 800c694:	727b      	strb	r3, [r7, #9]
 800c696:	2351      	movs	r3, #81	@ 0x51
 800c698:	72bb      	strb	r3, [r7, #10]
 800c69a:	23a1      	movs	r3, #161	@ 0xa1
 800c69c:	72fb      	strb	r3, [r7, #11]
 800c69e:	23e5      	movs	r3, #229	@ 0xe5
 800c6a0:	733b      	strb	r3, [r7, #12]
 800c6a2:	2311      	movs	r3, #17
 800c6a4:	737b      	strb	r3, [r7, #13]
 800c6a6:	2367      	movs	r3, #103	@ 0x67
 800c6a8:	73bb      	strb	r3, [r7, #14]
 800c6aa:	2349      	movs	r3, #73	@ 0x49
 800c6ac:	73fb      	strb	r3, [r7, #15]
 800c6ae:	2301      	movs	r3, #1
 800c6b0:	743b      	strb	r3, [r7, #16]
 800c6b2:	2383      	movs	r3, #131	@ 0x83
 800c6b4:	747b      	strb	r3, [r7, #17]
 800c6b6:	23a4      	movs	r3, #164	@ 0xa4
 800c6b8:	74bb      	strb	r3, [r7, #18]
 800c6ba:	239f      	movs	r3, #159	@ 0x9f
 800c6bc:	74fb      	strb	r3, [r7, #19]
    ret = aci_gatt_add_char(BleApplicationContext.BleApplicationContext_legacy.event_service_handle,
 800c6be:	4b17      	ldr	r3, [pc, #92]	@ (800c71c <Add_Event_Notify_Service+0x124>)
 800c6c0:	f8b3 0080 	ldrh.w	r0, [r3, #128]	@ 0x80
 800c6c4:	1d3a      	adds	r2, r7, #4
 800c6c6:	4b16      	ldr	r3, [pc, #88]	@ (800c720 <Add_Event_Notify_Service+0x128>)
 800c6c8:	9305      	str	r3, [sp, #20]
 800c6ca:	2301      	movs	r3, #1
 800c6cc:	9304      	str	r3, [sp, #16]
 800c6ce:	230a      	movs	r3, #10
 800c6d0:	9303      	str	r3, [sp, #12]
 800c6d2:	2301      	movs	r3, #1
 800c6d4:	9302      	str	r3, [sp, #8]
 800c6d6:	2300      	movs	r3, #0
 800c6d8:	9301      	str	r3, [sp, #4]
 800c6da:	2310      	movs	r3, #16
 800c6dc:	9300      	str	r3, [sp, #0]
 800c6de:	2304      	movs	r3, #4
 800c6e0:	2102      	movs	r1, #2
 800c6e2:	f7fd fc33 	bl	8009f4c <aci_gatt_add_char>
 800c6e6:	4603      	mov	r3, r0
 800c6e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
						   GATT_NOTIFY_ATTRIBUTE_WRITE,
                           10,
                           CHAR_VALUE_LEN_VARIABLE,
                           &(BleApplicationContext.event_char_handle));

    if (ret != BLE_STATUS_SUCCESS)
 800c6ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d008      	beq.n	800c706 <Add_Event_Notify_Service+0x10e>
    {
        APP_DBG_MSG("Error adding New Notify Characteristic - ret=0x%x\n", ret);
 800c6f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c6f8:	4619      	mov	r1, r3
 800c6fa:	480a      	ldr	r0, [pc, #40]	@ (800c724 <Add_Event_Notify_Service+0x12c>)
 800c6fc:	f001 ff12 	bl	800e524 <iprintf>
        return ret;
 800c700:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c704:	e001      	b.n	800c70a <Add_Event_Notify_Service+0x112>
    }


    return ret;
 800c706:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800c70a:	4618      	mov	r0, r3
 800c70c:	3728      	adds	r7, #40	@ 0x28
 800c70e:	46bd      	mov	sp, r7
 800c710:	bd80      	pop	{r7, pc}
 800c712:	bf00      	nop
 800c714:	2000055c 	.word	0x2000055c
 800c718:	0800fc98 	.word	0x0800fc98
 800c71c:	200004dc 	.word	0x200004dc
 800c720:	20000566 	.word	0x20000566
 800c724:	0800fcc4 	.word	0x0800fcc4

0800c728 <Add_Motion_Notify_Service>:



static tBleStatus Add_Motion_Notify_Service(void)
{
 800c728:	b580      	push	{r7, lr}
 800c72a:	b098      	sub	sp, #96	@ 0x60
 800c72c:	af06      	add	r7, sp, #24
    tBleStatus ret = BLE_STATUS_SUCCESS;
 800c72e:	2300      	movs	r3, #0
 800c730:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    uint8_t accel_char_uuid[16];
    uint8_t gyro_char_uuid[16];
    uint8_t compass_char_uuid[16];

    // Add service
    COPY_MOTION_SERVICE_UUID(motion_service_uuid);
 800c734:	231b      	movs	r3, #27
 800c736:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
 800c73a:	23c5      	movs	r3, #197	@ 0xc5
 800c73c:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 800c740:	23d5      	movs	r3, #213	@ 0xd5
 800c742:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 800c746:	23a5      	movs	r3, #165	@ 0xa5
 800c748:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c74c:	2302      	movs	r3, #2
 800c74e:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
 800c752:	2300      	movs	r3, #0
 800c754:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
 800c758:	2351      	movs	r3, #81	@ 0x51
 800c75a:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
 800c75e:	23a1      	movs	r3, #161	@ 0xa1
 800c760:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 800c764:	23e5      	movs	r3, #229	@ 0xe5
 800c766:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
 800c76a:	2311      	movs	r3, #17
 800c76c:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
 800c770:	2367      	movs	r3, #103	@ 0x67
 800c772:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 800c776:	2349      	movs	r3, #73	@ 0x49
 800c778:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800c77c:	2300      	movs	r3, #0
 800c77e:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
 800c782:	2382      	movs	r3, #130	@ 0x82
 800c784:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
 800c788:	23a4      	movs	r3, #164	@ 0xa4
 800c78a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c78e:	239f      	movs	r3, #159	@ 0x9f
 800c790:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
    ret = aci_gatt_add_service(UUID_TYPE_128,
 800c794:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 800c798:	4b7f      	ldr	r3, [pc, #508]	@ (800c998 <Add_Motion_Notify_Service+0x270>)
 800c79a:	9300      	str	r3, [sp, #0]
 800c79c:	230b      	movs	r3, #11
 800c79e:	2201      	movs	r2, #1
 800c7a0:	2002      	movs	r0, #2
 800c7a2:	f7fd fafd 	bl	8009da0 <aci_gatt_add_service>
 800c7a6:	4603      	mov	r3, r0
 800c7a8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
                              (Service_UUID_t *) motion_service_uuid,
                              PRIMARY_SERVICE,
                              2 + 3 + 3 + 3, /* 2 for service + 6 for 2 characteristic */
                              &(BleApplicationContext.BleApplicationContext_legacy.motion_service_handle));

    if (ret != BLE_STATUS_SUCCESS)
 800c7ac:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d008      	beq.n	800c7c6 <Add_Motion_Notify_Service+0x9e>
    {
        APP_DBG_MSG("Error adding New Notify Service - ret=0x%x\n", ret);
 800c7b4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800c7b8:	4619      	mov	r1, r3
 800c7ba:	4878      	ldr	r0, [pc, #480]	@ (800c99c <Add_Motion_Notify_Service+0x274>)
 800c7bc:	f001 feb2 	bl	800e524 <iprintf>
        return ret;
 800c7c0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800c7c4:	e0e3      	b.n	800c98e <Add_Motion_Notify_Service+0x266>
    }

    // Add characteristic
    COPY_ACCEL_UUID(accel_char_uuid);
 800c7c6:	231b      	movs	r3, #27
 800c7c8:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 800c7cc:	23c5      	movs	r3, #197	@ 0xc5
 800c7ce:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800c7d2:	23d5      	movs	r3, #213	@ 0xd5
 800c7d4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800c7d8:	23a5      	movs	r3, #165	@ 0xa5
 800c7da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c7de:	2302      	movs	r3, #2
 800c7e0:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 800c7e4:	2300      	movs	r3, #0
 800c7e6:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 800c7ea:	2351      	movs	r3, #81	@ 0x51
 800c7ec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800c7f0:	23a1      	movs	r3, #161	@ 0xa1
 800c7f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c7f6:	23e5      	movs	r3, #229	@ 0xe5
 800c7f8:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 800c7fc:	2311      	movs	r3, #17
 800c7fe:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 800c802:	2367      	movs	r3, #103	@ 0x67
 800c804:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800c808:	2349      	movs	r3, #73	@ 0x49
 800c80a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800c80e:	2301      	movs	r3, #1
 800c810:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
 800c814:	2382      	movs	r3, #130	@ 0x82
 800c816:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
 800c81a:	23a4      	movs	r3, #164	@ 0xa4
 800c81c:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
 800c820:	239f      	movs	r3, #159	@ 0x9f
 800c822:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    ret = aci_gatt_add_char(BleApplicationContext.BleApplicationContext_legacy.motion_service_handle,
 800c826:	4b5e      	ldr	r3, [pc, #376]	@ (800c9a0 <Add_Motion_Notify_Service+0x278>)
 800c828:	f8b3 0082 	ldrh.w	r0, [r3, #130]	@ 0x82
 800c82c:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800c830:	4b5c      	ldr	r3, [pc, #368]	@ (800c9a4 <Add_Motion_Notify_Service+0x27c>)
 800c832:	9305      	str	r3, [sp, #20]
 800c834:	2301      	movs	r3, #1
 800c836:	9304      	str	r3, [sp, #16]
 800c838:	230a      	movs	r3, #10
 800c83a:	9303      	str	r3, [sp, #12]
 800c83c:	2301      	movs	r3, #1
 800c83e:	9302      	str	r3, [sp, #8]
 800c840:	2300      	movs	r3, #0
 800c842:	9301      	str	r3, [sp, #4]
 800c844:	2310      	movs	r3, #16
 800c846:	9300      	str	r3, [sp, #0]
 800c848:	2306      	movs	r3, #6
 800c84a:	2102      	movs	r1, #2
 800c84c:	f7fd fb7e 	bl	8009f4c <aci_gatt_add_char>
 800c850:	4603      	mov	r3, r0
 800c852:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
						   GATT_NOTIFY_ATTRIBUTE_WRITE,
                           10,
                           CHAR_VALUE_LEN_VARIABLE,
                           &(BleApplicationContext.accel_char_handle));

    if (ret != BLE_STATUS_SUCCESS)
 800c856:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d008      	beq.n	800c870 <Add_Motion_Notify_Service+0x148>
    {
        APP_DBG_MSG("Error adding New Notify Characteristic - ret=0x%x\n", ret);
 800c85e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800c862:	4619      	mov	r1, r3
 800c864:	4850      	ldr	r0, [pc, #320]	@ (800c9a8 <Add_Motion_Notify_Service+0x280>)
 800c866:	f001 fe5d 	bl	800e524 <iprintf>
        return ret;
 800c86a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800c86e:	e08e      	b.n	800c98e <Add_Motion_Notify_Service+0x266>
    }


    // Add characteristic
    COPY_GYRO_UUID(gyro_char_uuid);
 800c870:	231b      	movs	r3, #27
 800c872:	753b      	strb	r3, [r7, #20]
 800c874:	23c5      	movs	r3, #197	@ 0xc5
 800c876:	757b      	strb	r3, [r7, #21]
 800c878:	23d5      	movs	r3, #213	@ 0xd5
 800c87a:	75bb      	strb	r3, [r7, #22]
 800c87c:	23a5      	movs	r3, #165	@ 0xa5
 800c87e:	75fb      	strb	r3, [r7, #23]
 800c880:	2302      	movs	r3, #2
 800c882:	763b      	strb	r3, [r7, #24]
 800c884:	2300      	movs	r3, #0
 800c886:	767b      	strb	r3, [r7, #25]
 800c888:	2351      	movs	r3, #81	@ 0x51
 800c88a:	76bb      	strb	r3, [r7, #26]
 800c88c:	23a1      	movs	r3, #161	@ 0xa1
 800c88e:	76fb      	strb	r3, [r7, #27]
 800c890:	23e5      	movs	r3, #229	@ 0xe5
 800c892:	773b      	strb	r3, [r7, #28]
 800c894:	2311      	movs	r3, #17
 800c896:	777b      	strb	r3, [r7, #29]
 800c898:	2367      	movs	r3, #103	@ 0x67
 800c89a:	77bb      	strb	r3, [r7, #30]
 800c89c:	2349      	movs	r3, #73	@ 0x49
 800c89e:	77fb      	strb	r3, [r7, #31]
 800c8a0:	2302      	movs	r3, #2
 800c8a2:	f887 3020 	strb.w	r3, [r7, #32]
 800c8a6:	2382      	movs	r3, #130	@ 0x82
 800c8a8:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
 800c8ac:	23a4      	movs	r3, #164	@ 0xa4
 800c8ae:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800c8b2:	239f      	movs	r3, #159	@ 0x9f
 800c8b4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    ret = aci_gatt_add_char(BleApplicationContext.BleApplicationContext_legacy.motion_service_handle,
 800c8b8:	4b39      	ldr	r3, [pc, #228]	@ (800c9a0 <Add_Motion_Notify_Service+0x278>)
 800c8ba:	f8b3 0082 	ldrh.w	r0, [r3, #130]	@ 0x82
 800c8be:	f107 0214 	add.w	r2, r7, #20
 800c8c2:	4b3a      	ldr	r3, [pc, #232]	@ (800c9ac <Add_Motion_Notify_Service+0x284>)
 800c8c4:	9305      	str	r3, [sp, #20]
 800c8c6:	2301      	movs	r3, #1
 800c8c8:	9304      	str	r3, [sp, #16]
 800c8ca:	230a      	movs	r3, #10
 800c8cc:	9303      	str	r3, [sp, #12]
 800c8ce:	2301      	movs	r3, #1
 800c8d0:	9302      	str	r3, [sp, #8]
 800c8d2:	2300      	movs	r3, #0
 800c8d4:	9301      	str	r3, [sp, #4]
 800c8d6:	2310      	movs	r3, #16
 800c8d8:	9300      	str	r3, [sp, #0]
 800c8da:	2306      	movs	r3, #6
 800c8dc:	2102      	movs	r1, #2
 800c8de:	f7fd fb35 	bl	8009f4c <aci_gatt_add_char>
 800c8e2:	4603      	mov	r3, r0
 800c8e4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
						   GATT_NOTIFY_ATTRIBUTE_WRITE,
                           10,
                           CHAR_VALUE_LEN_VARIABLE,
                           &(BleApplicationContext.gyro_char_handle));

    if (ret != BLE_STATUS_SUCCESS)
 800c8e8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d008      	beq.n	800c902 <Add_Motion_Notify_Service+0x1da>
    {
        APP_DBG_MSG("Error adding New Notify Characteristic - ret=0x%x\n", ret);
 800c8f0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800c8f4:	4619      	mov	r1, r3
 800c8f6:	482c      	ldr	r0, [pc, #176]	@ (800c9a8 <Add_Motion_Notify_Service+0x280>)
 800c8f8:	f001 fe14 	bl	800e524 <iprintf>
        return ret;
 800c8fc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800c900:	e045      	b.n	800c98e <Add_Motion_Notify_Service+0x266>
    }


    // Add characteristic
    COPY_COMPASS_UUID(compass_char_uuid);
 800c902:	231b      	movs	r3, #27
 800c904:	713b      	strb	r3, [r7, #4]
 800c906:	23c5      	movs	r3, #197	@ 0xc5
 800c908:	717b      	strb	r3, [r7, #5]
 800c90a:	23d5      	movs	r3, #213	@ 0xd5
 800c90c:	71bb      	strb	r3, [r7, #6]
 800c90e:	23a5      	movs	r3, #165	@ 0xa5
 800c910:	71fb      	strb	r3, [r7, #7]
 800c912:	2302      	movs	r3, #2
 800c914:	723b      	strb	r3, [r7, #8]
 800c916:	2300      	movs	r3, #0
 800c918:	727b      	strb	r3, [r7, #9]
 800c91a:	2351      	movs	r3, #81	@ 0x51
 800c91c:	72bb      	strb	r3, [r7, #10]
 800c91e:	23a1      	movs	r3, #161	@ 0xa1
 800c920:	72fb      	strb	r3, [r7, #11]
 800c922:	23e5      	movs	r3, #229	@ 0xe5
 800c924:	733b      	strb	r3, [r7, #12]
 800c926:	2311      	movs	r3, #17
 800c928:	737b      	strb	r3, [r7, #13]
 800c92a:	2367      	movs	r3, #103	@ 0x67
 800c92c:	73bb      	strb	r3, [r7, #14]
 800c92e:	2349      	movs	r3, #73	@ 0x49
 800c930:	73fb      	strb	r3, [r7, #15]
 800c932:	2303      	movs	r3, #3
 800c934:	743b      	strb	r3, [r7, #16]
 800c936:	2382      	movs	r3, #130	@ 0x82
 800c938:	747b      	strb	r3, [r7, #17]
 800c93a:	23a4      	movs	r3, #164	@ 0xa4
 800c93c:	74bb      	strb	r3, [r7, #18]
 800c93e:	239f      	movs	r3, #159	@ 0x9f
 800c940:	74fb      	strb	r3, [r7, #19]
    ret = aci_gatt_add_char(BleApplicationContext.BleApplicationContext_legacy.motion_service_handle,
 800c942:	4b17      	ldr	r3, [pc, #92]	@ (800c9a0 <Add_Motion_Notify_Service+0x278>)
 800c944:	f8b3 0082 	ldrh.w	r0, [r3, #130]	@ 0x82
 800c948:	1d3a      	adds	r2, r7, #4
 800c94a:	4b19      	ldr	r3, [pc, #100]	@ (800c9b0 <Add_Motion_Notify_Service+0x288>)
 800c94c:	9305      	str	r3, [sp, #20]
 800c94e:	2301      	movs	r3, #1
 800c950:	9304      	str	r3, [sp, #16]
 800c952:	230a      	movs	r3, #10
 800c954:	9303      	str	r3, [sp, #12]
 800c956:	2301      	movs	r3, #1
 800c958:	9302      	str	r3, [sp, #8]
 800c95a:	2300      	movs	r3, #0
 800c95c:	9301      	str	r3, [sp, #4]
 800c95e:	2310      	movs	r3, #16
 800c960:	9300      	str	r3, [sp, #0]
 800c962:	2306      	movs	r3, #6
 800c964:	2102      	movs	r1, #2
 800c966:	f7fd faf1 	bl	8009f4c <aci_gatt_add_char>
 800c96a:	4603      	mov	r3, r0
 800c96c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
						   GATT_NOTIFY_ATTRIBUTE_WRITE,
                           10,
                           CHAR_VALUE_LEN_VARIABLE,
                           &(BleApplicationContext.compass_char_handle));

    if (ret != BLE_STATUS_SUCCESS)
 800c970:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800c974:	2b00      	cmp	r3, #0
 800c976:	d008      	beq.n	800c98a <Add_Motion_Notify_Service+0x262>
    {
        APP_DBG_MSG("Error adding New Notify Characteristic - ret=0x%x\n", ret);
 800c978:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800c97c:	4619      	mov	r1, r3
 800c97e:	480a      	ldr	r0, [pc, #40]	@ (800c9a8 <Add_Motion_Notify_Service+0x280>)
 800c980:	f001 fdd0 	bl	800e524 <iprintf>
        return ret;
 800c984:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800c988:	e001      	b.n	800c98e <Add_Motion_Notify_Service+0x266>
    }




    return ret;
 800c98a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800c98e:	4618      	mov	r0, r3
 800c990:	3748      	adds	r7, #72	@ 0x48
 800c992:	46bd      	mov	sp, r7
 800c994:	bd80      	pop	{r7, pc}
 800c996:	bf00      	nop
 800c998:	2000055e 	.word	0x2000055e
 800c99c:	0800fc98 	.word	0x0800fc98
 800c9a0:	200004dc 	.word	0x200004dc
 800c9a4:	20000568 	.word	0x20000568
 800c9a8:	0800fcc4 	.word	0x0800fcc4
 800c9ac:	2000056a 	.word	0x2000056a
 800c9b0:	2000056c 	.word	0x2000056c

0800c9b4 <SVCCTL_App_Notification>:




SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 800c9b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c9b6:	b097      	sub	sp, #92	@ 0x5c
 800c9b8:	af04      	add	r7, sp, #16
 800c9ba:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  uint8_t           Tx_phy, Rx_phy;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 800c9bc:	2392      	movs	r3, #146	@ 0x92
 800c9be:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  /* USER CODE BEGIN SVCCTL_App_Notification */
    char BdAddress[20];
    const uint8_t *bdaddr; 
  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	3301      	adds	r3, #1
 800c9c6:	643b      	str	r3, [r7, #64]	@ 0x40

  switch (p_event_pckt->evt)
 800c9c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c9ca:	781b      	ldrb	r3, [r3, #0]
 800c9cc:	2bff      	cmp	r3, #255	@ 0xff
 800c9ce:	f000 8189 	beq.w	800cce4 <SVCCTL_App_Notification+0x330>
 800c9d2:	2bff      	cmp	r3, #255	@ 0xff
 800c9d4:	f300 8272 	bgt.w	800cebc <SVCCTL_App_Notification+0x508>
 800c9d8:	2b05      	cmp	r3, #5
 800c9da:	d002      	beq.n	800c9e2 <SVCCTL_App_Notification+0x2e>
 800c9dc:	2b3e      	cmp	r3, #62	@ 0x3e
 800c9de:	d052      	beq.n	800ca86 <SVCCTL_App_Notification+0xd2>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 800c9e0:	e26c      	b.n	800cebc <SVCCTL_App_Notification+0x508>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 800c9e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c9e4:	3302      	adds	r3, #2
 800c9e6:	623b      	str	r3, [r7, #32]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 800c9e8:	6a3b      	ldr	r3, [r7, #32]
 800c9ea:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800c9ee:	b29a      	uxth	r2, r3
 800c9f0:	4bac      	ldr	r3, [pc, #688]	@ (800cca4 <SVCCTL_App_Notification+0x2f0>)
 800c9f2:	8adb      	ldrh	r3, [r3, #22]
 800c9f4:	429a      	cmp	r2, r3
 800c9f6:	d114      	bne.n	800ca22 <SVCCTL_App_Notification+0x6e>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 800c9f8:	4baa      	ldr	r3, [pc, #680]	@ (800cca4 <SVCCTL_App_Notification+0x2f0>)
 800c9fa:	2200      	movs	r2, #0
 800c9fc:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800c9fe:	4ba9      	ldr	r3, [pc, #676]	@ (800cca4 <SVCCTL_App_Notification+0x2f0>)
 800ca00:	2200      	movs	r2, #0
 800ca02:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
        APP_DBG_MSG(">>== HCI_DISCONNECTION_COMPLETE_EVT_CODE\n");
 800ca06:	48a8      	ldr	r0, [pc, #672]	@ (800cca8 <SVCCTL_App_Notification+0x2f4>)
 800ca08:	f001 fdfc 	bl	800e604 <puts>
                    p_disconnection_complete_event->Connection_Handle,
 800ca0c:	6a3b      	ldr	r3, [r7, #32]
 800ca0e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800ca12:	b29b      	uxth	r3, r3
        APP_DBG_MSG("     - Connection Handle:   0x%x\n     - Reason:    0x%x\n\r",
 800ca14:	4619      	mov	r1, r3
                    p_disconnection_complete_event->Reason);
 800ca16:	6a3b      	ldr	r3, [r7, #32]
 800ca18:	78db      	ldrb	r3, [r3, #3]
        APP_DBG_MSG("     - Connection Handle:   0x%x\n     - Reason:    0x%x\n\r",
 800ca1a:	461a      	mov	r2, r3
 800ca1c:	48a3      	ldr	r0, [pc, #652]	@ (800ccac <SVCCTL_App_Notification+0x2f8>)
 800ca1e:	f001 fd81 	bl	800e524 <iprintf>
      Adv_Request(APP_BLE_FAST_ADV);
 800ca22:	2001      	movs	r0, #1
 800ca24:	f000 fcca 	bl	800d3bc <Adv_Request>
      HandleNotification.P2P_Evt_Opcode = PEER_DISCON_HANDLE_EVT;
 800ca28:	4ba1      	ldr	r3, [pc, #644]	@ (800ccb0 <SVCCTL_App_Notification+0x2fc>)
 800ca2a:	2201      	movs	r2, #1
 800ca2c:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800ca2e:	4b9d      	ldr	r3, [pc, #628]	@ (800cca4 <SVCCTL_App_Notification+0x2f0>)
 800ca30:	8ada      	ldrh	r2, [r3, #22]
 800ca32:	4b9f      	ldr	r3, [pc, #636]	@ (800ccb0 <SVCCTL_App_Notification+0x2fc>)
 800ca34:	805a      	strh	r2, [r3, #2]
      P2PS_APP_Notification(&HandleNotification);
 800ca36:	489e      	ldr	r0, [pc, #632]	@ (800ccb0 <SVCCTL_App_Notification+0x2fc>)
 800ca38:	f000 feda 	bl	800d7f0 <P2PS_APP_Notification>
      bdaddr= BleGetBdAddress();
 800ca3c:	f000 fd6a 	bl	800d514 <BleGetBdAddress>
 800ca40:	6278      	str	r0, [r7, #36]	@ 0x24
      sprintf(BdAddress, "BD_ad=%02x%02x%02x%02x%02x%02x", bdaddr[5], bdaddr[4], bdaddr[3], bdaddr[2], bdaddr[1], bdaddr[0]);
 800ca42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca44:	3305      	adds	r3, #5
 800ca46:	781b      	ldrb	r3, [r3, #0]
 800ca48:	461d      	mov	r5, r3
 800ca4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca4c:	3304      	adds	r3, #4
 800ca4e:	781b      	ldrb	r3, [r3, #0]
 800ca50:	461e      	mov	r6, r3
 800ca52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca54:	3303      	adds	r3, #3
 800ca56:	781b      	ldrb	r3, [r3, #0]
 800ca58:	461a      	mov	r2, r3
 800ca5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca5c:	3302      	adds	r3, #2
 800ca5e:	781b      	ldrb	r3, [r3, #0]
 800ca60:	4619      	mov	r1, r3
 800ca62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca64:	3301      	adds	r3, #1
 800ca66:	781b      	ldrb	r3, [r3, #0]
 800ca68:	461c      	mov	r4, r3
 800ca6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca6c:	781b      	ldrb	r3, [r3, #0]
 800ca6e:	f107 0008 	add.w	r0, r7, #8
 800ca72:	9303      	str	r3, [sp, #12]
 800ca74:	9402      	str	r4, [sp, #8]
 800ca76:	9101      	str	r1, [sp, #4]
 800ca78:	9200      	str	r2, [sp, #0]
 800ca7a:	4633      	mov	r3, r6
 800ca7c:	462a      	mov	r2, r5
 800ca7e:	498d      	ldr	r1, [pc, #564]	@ (800ccb4 <SVCCTL_App_Notification+0x300>)
 800ca80:	f001 fdc8 	bl	800e614 <siprintf>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 800ca84:	e21d      	b.n	800cec2 <SVCCTL_App_Notification+0x50e>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 800ca86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ca88:	3302      	adds	r3, #2
 800ca8a:	637b      	str	r3, [r7, #52]	@ 0x34
      switch (p_meta_evt->subevent)
 800ca8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca8e:	781b      	ldrb	r3, [r3, #0]
 800ca90:	2b0c      	cmp	r3, #12
 800ca92:	d033      	beq.n	800cafc <SVCCTL_App_Notification+0x148>
 800ca94:	2b0c      	cmp	r3, #12
 800ca96:	f300 8102 	bgt.w	800cc9e <SVCCTL_App_Notification+0x2ea>
 800ca9a:	2b01      	cmp	r3, #1
 800ca9c:	d06c      	beq.n	800cb78 <SVCCTL_App_Notification+0x1c4>
 800ca9e:	2b03      	cmp	r3, #3
 800caa0:	f040 80fd 	bne.w	800cc9e <SVCCTL_App_Notification+0x2ea>
          p_connection_update_complete_event = (hci_le_connection_update_complete_event_rp0 *) p_meta_evt->data;
 800caa4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800caa6:	3301      	adds	r3, #1
 800caa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_UPDATE_COMPLETE_SUBEVT_CODE\n");
 800caaa:	4883      	ldr	r0, [pc, #524]	@ (800ccb8 <SVCCTL_App_Notification+0x304>)
 800caac:	f001 fdaa 	bl	800e604 <puts>
                       p_connection_update_complete_event->Conn_Interval*1.25,
 800cab0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cab2:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800cab6:	b29b      	uxth	r3, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800cab8:	4618      	mov	r0, r3
 800caba:	f7f3 fe35 	bl	8000728 <__aeabi_i2d>
 800cabe:	f04f 0200 	mov.w	r2, #0
 800cac2:	4b7e      	ldr	r3, [pc, #504]	@ (800ccbc <SVCCTL_App_Notification+0x308>)
 800cac4:	f7f3 fbb4 	bl	8000230 <__aeabi_dmul>
 800cac8:	4602      	mov	r2, r0
 800caca:	460b      	mov	r3, r1
 800cacc:	4610      	mov	r0, r2
 800cace:	4619      	mov	r1, r3
                       p_connection_update_complete_event->Conn_Latency,
 800cad0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cad2:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800cad6:	b29b      	uxth	r3, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800cad8:	461c      	mov	r4, r3
                       p_connection_update_complete_event->Supervision_Timeout*10);
 800cada:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cadc:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800cae0:	b29b      	uxth	r3, r3
 800cae2:	461a      	mov	r2, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800cae4:	4613      	mov	r3, r2
 800cae6:	009b      	lsls	r3, r3, #2
 800cae8:	4413      	add	r3, r2
 800caea:	005b      	lsls	r3, r3, #1
 800caec:	9301      	str	r3, [sp, #4]
 800caee:	9400      	str	r4, [sp, #0]
 800caf0:	4602      	mov	r2, r0
 800caf2:	460b      	mov	r3, r1
 800caf4:	4872      	ldr	r0, [pc, #456]	@ (800ccc0 <SVCCTL_App_Notification+0x30c>)
 800caf6:	f001 fd15 	bl	800e524 <iprintf>
          break;
 800cafa:	e0d1      	b.n	800cca0 <SVCCTL_App_Notification+0x2ec>
          p_evt_le_phy_update_complete = (hci_le_phy_update_complete_event_rp0*)p_meta_evt->data;
 800cafc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cafe:	3301      	adds	r3, #1
 800cb00:	633b      	str	r3, [r7, #48]	@ 0x30
          APP_DBG_MSG("==>> HCI_LE_PHY_UPDATE_COMPLETE_SUBEVT_CODE - ");
 800cb02:	4870      	ldr	r0, [pc, #448]	@ (800ccc4 <SVCCTL_App_Notification+0x310>)
 800cb04:	f001 fd0e 	bl	800e524 <iprintf>
          if (p_evt_le_phy_update_complete->Status == 0)
 800cb08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb0a:	781b      	ldrb	r3, [r3, #0]
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d103      	bne.n	800cb18 <SVCCTL_App_Notification+0x164>
            APP_DBG_MSG("status ok \n");
 800cb10:	486d      	ldr	r0, [pc, #436]	@ (800ccc8 <SVCCTL_App_Notification+0x314>)
 800cb12:	f001 fd77 	bl	800e604 <puts>
 800cb16:	e002      	b.n	800cb1e <SVCCTL_App_Notification+0x16a>
            APP_DBG_MSG("status nok \n");
 800cb18:	486c      	ldr	r0, [pc, #432]	@ (800cccc <SVCCTL_App_Notification+0x318>)
 800cb1a:	f001 fd73 	bl	800e604 <puts>
          ret = hci_le_read_phy(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, &Tx_phy, &Rx_phy);
 800cb1e:	4b61      	ldr	r3, [pc, #388]	@ (800cca4 <SVCCTL_App_Notification+0x2f0>)
 800cb20:	8adb      	ldrh	r3, [r3, #22]
 800cb22:	f107 021e 	add.w	r2, r7, #30
 800cb26:	f107 011f 	add.w	r1, r7, #31
 800cb2a:	4618      	mov	r0, r3
 800cb2c:	f7fd fd78 	bl	800a620 <hci_le_read_phy>
 800cb30:	4603      	mov	r3, r0
 800cb32:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
          if (ret != BLE_STATUS_SUCCESS)
 800cb36:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d003      	beq.n	800cb46 <SVCCTL_App_Notification+0x192>
            APP_DBG_MSG("==>> hci_le_read_phy : fail\n\r");
 800cb3e:	4864      	ldr	r0, [pc, #400]	@ (800ccd0 <SVCCTL_App_Notification+0x31c>)
 800cb40:	f001 fcf0 	bl	800e524 <iprintf>
          break;
 800cb44:	e0ac      	b.n	800cca0 <SVCCTL_App_Notification+0x2ec>
            APP_DBG_MSG("==>> hci_le_read_phy - Success \n");
 800cb46:	4863      	ldr	r0, [pc, #396]	@ (800ccd4 <SVCCTL_App_Notification+0x320>)
 800cb48:	f001 fd5c 	bl	800e604 <puts>
            if ((Tx_phy == TX_2M) && (Rx_phy == RX_2M))
 800cb4c:	7ffb      	ldrb	r3, [r7, #31]
 800cb4e:	2b02      	cmp	r3, #2
 800cb50:	d10a      	bne.n	800cb68 <SVCCTL_App_Notification+0x1b4>
 800cb52:	7fbb      	ldrb	r3, [r7, #30]
 800cb54:	2b02      	cmp	r3, #2
 800cb56:	d107      	bne.n	800cb68 <SVCCTL_App_Notification+0x1b4>
              APP_DBG_MSG("==>> PHY Param  TX= %d, RX= %d \n\r", Tx_phy, Rx_phy);
 800cb58:	7ffb      	ldrb	r3, [r7, #31]
 800cb5a:	4619      	mov	r1, r3
 800cb5c:	7fbb      	ldrb	r3, [r7, #30]
 800cb5e:	461a      	mov	r2, r3
 800cb60:	485d      	ldr	r0, [pc, #372]	@ (800ccd8 <SVCCTL_App_Notification+0x324>)
 800cb62:	f001 fcdf 	bl	800e524 <iprintf>
          break;
 800cb66:	e09b      	b.n	800cca0 <SVCCTL_App_Notification+0x2ec>
              APP_DBG_MSG("==>> PHY Param  TX= %d, RX= %d \n\r", Tx_phy, Rx_phy);
 800cb68:	7ffb      	ldrb	r3, [r7, #31]
 800cb6a:	4619      	mov	r1, r3
 800cb6c:	7fbb      	ldrb	r3, [r7, #30]
 800cb6e:	461a      	mov	r2, r3
 800cb70:	4859      	ldr	r0, [pc, #356]	@ (800ccd8 <SVCCTL_App_Notification+0x324>)
 800cb72:	f001 fcd7 	bl	800e524 <iprintf>
          break;
 800cb76:	e093      	b.n	800cca0 <SVCCTL_App_Notification+0x2ec>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 800cb78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb7a:	3301      	adds	r3, #1
 800cb7c:	62bb      	str	r3, [r7, #40]	@ 0x28
          HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 800cb7e:	4b49      	ldr	r3, [pc, #292]	@ (800cca4 <SVCCTL_App_Notification+0x2f0>)
 800cb80:	f893 3085 	ldrb.w	r3, [r3, #133]	@ 0x85
 800cb84:	4618      	mov	r0, r3
 800cb86:	f7f5 fa71 	bl	800206c <HW_TS_Stop>
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE - Connection handle: 0x%x\n", p_connection_complete_event->Connection_Handle);
 800cb8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb8c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800cb90:	b29b      	uxth	r3, r3
 800cb92:	4619      	mov	r1, r3
 800cb94:	4851      	ldr	r0, [pc, #324]	@ (800ccdc <SVCCTL_App_Notification+0x328>)
 800cb96:	f001 fcc5 	bl	800e524 <iprintf>
                      p_connection_complete_event->Peer_Address[5],
 800cb9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb9c:	7a9b      	ldrb	r3, [r3, #10]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 800cb9e:	4618      	mov	r0, r3
                      p_connection_complete_event->Peer_Address[4],
 800cba0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cba2:	7a5b      	ldrb	r3, [r3, #9]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 800cba4:	461c      	mov	r4, r3
                      p_connection_complete_event->Peer_Address[3],
 800cba6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cba8:	7a1b      	ldrb	r3, [r3, #8]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 800cbaa:	461d      	mov	r5, r3
                      p_connection_complete_event->Peer_Address[2],
 800cbac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbae:	79db      	ldrb	r3, [r3, #7]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 800cbb0:	461a      	mov	r2, r3
                      p_connection_complete_event->Peer_Address[1],
 800cbb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbb4:	799b      	ldrb	r3, [r3, #6]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 800cbb6:	4619      	mov	r1, r3
                      p_connection_complete_event->Peer_Address[0]);
 800cbb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbba:	795b      	ldrb	r3, [r3, #5]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 800cbbc:	9302      	str	r3, [sp, #8]
 800cbbe:	9101      	str	r1, [sp, #4]
 800cbc0:	9200      	str	r2, [sp, #0]
 800cbc2:	462b      	mov	r3, r5
 800cbc4:	4622      	mov	r2, r4
 800cbc6:	4601      	mov	r1, r0
 800cbc8:	4845      	ldr	r0, [pc, #276]	@ (800cce0 <SVCCTL_App_Notification+0x32c>)
 800cbca:	f001 fcab 	bl	800e524 <iprintf>
                      p_connection_complete_event->Conn_Interval*1.25,
 800cbce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbd0:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 800cbd4:	b29b      	uxth	r3, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800cbd6:	4618      	mov	r0, r3
 800cbd8:	f7f3 fda6 	bl	8000728 <__aeabi_i2d>
 800cbdc:	f04f 0200 	mov.w	r2, #0
 800cbe0:	4b36      	ldr	r3, [pc, #216]	@ (800ccbc <SVCCTL_App_Notification+0x308>)
 800cbe2:	f7f3 fb25 	bl	8000230 <__aeabi_dmul>
 800cbe6:	4602      	mov	r2, r0
 800cbe8:	460b      	mov	r3, r1
 800cbea:	4610      	mov	r0, r2
 800cbec:	4619      	mov	r1, r3
                      p_connection_complete_event->Conn_Latency,
 800cbee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbf0:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 800cbf4:	b29b      	uxth	r3, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800cbf6:	461c      	mov	r4, r3
                      p_connection_complete_event->Supervision_Timeout*10
 800cbf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbfa:	f8b3 300f 	ldrh.w	r3, [r3, #15]
 800cbfe:	b29b      	uxth	r3, r3
 800cc00:	461a      	mov	r2, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800cc02:	4613      	mov	r3, r2
 800cc04:	009b      	lsls	r3, r3, #2
 800cc06:	4413      	add	r3, r2
 800cc08:	005b      	lsls	r3, r3, #1
 800cc0a:	9301      	str	r3, [sp, #4]
 800cc0c:	9400      	str	r4, [sp, #0]
 800cc0e:	4602      	mov	r2, r0
 800cc10:	460b      	mov	r3, r1
 800cc12:	482b      	ldr	r0, [pc, #172]	@ (800ccc0 <SVCCTL_App_Notification+0x30c>)
 800cc14:	f001 fc86 	bl	800e524 <iprintf>
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 800cc18:	4b22      	ldr	r3, [pc, #136]	@ (800cca4 <SVCCTL_App_Notification+0x2f0>)
 800cc1a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800cc1e:	2b04      	cmp	r3, #4
 800cc20:	d104      	bne.n	800cc2c <SVCCTL_App_Notification+0x278>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 800cc22:	4b20      	ldr	r3, [pc, #128]	@ (800cca4 <SVCCTL_App_Notification+0x2f0>)
 800cc24:	2206      	movs	r2, #6
 800cc26:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 800cc2a:	e003      	b.n	800cc34 <SVCCTL_App_Notification+0x280>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 800cc2c:	4b1d      	ldr	r3, [pc, #116]	@ (800cca4 <SVCCTL_App_Notification+0x2f0>)
 800cc2e:	2205      	movs	r2, #5
 800cc30:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 800cc34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc36:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800cc3a:	b29a      	uxth	r2, r3
 800cc3c:	4b19      	ldr	r3, [pc, #100]	@ (800cca4 <SVCCTL_App_Notification+0x2f0>)
 800cc3e:	82da      	strh	r2, [r3, #22]
          HandleNotification.P2P_Evt_Opcode = PEER_CONN_HANDLE_EVT;
 800cc40:	4b1b      	ldr	r3, [pc, #108]	@ (800ccb0 <SVCCTL_App_Notification+0x2fc>)
 800cc42:	2200      	movs	r2, #0
 800cc44:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800cc46:	4b17      	ldr	r3, [pc, #92]	@ (800cca4 <SVCCTL_App_Notification+0x2f0>)
 800cc48:	8ada      	ldrh	r2, [r3, #22]
 800cc4a:	4b19      	ldr	r3, [pc, #100]	@ (800ccb0 <SVCCTL_App_Notification+0x2fc>)
 800cc4c:	805a      	strh	r2, [r3, #2]
          P2PS_APP_Notification(&HandleNotification);
 800cc4e:	4818      	ldr	r0, [pc, #96]	@ (800ccb0 <SVCCTL_App_Notification+0x2fc>)
 800cc50:	f000 fdce 	bl	800d7f0 <P2PS_APP_Notification>
          bdaddr= BleGetBdAddress();
 800cc54:	f000 fc5e 	bl	800d514 <BleGetBdAddress>
 800cc58:	6278      	str	r0, [r7, #36]	@ 0x24
          sprintf(BdAddress, "BD_ad=%02x%02x%02x%02x%02x%02x", bdaddr[5],bdaddr[4],bdaddr[3],bdaddr[2],bdaddr[1],bdaddr[0]);
 800cc5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc5c:	3305      	adds	r3, #5
 800cc5e:	781b      	ldrb	r3, [r3, #0]
 800cc60:	461d      	mov	r5, r3
 800cc62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc64:	3304      	adds	r3, #4
 800cc66:	781b      	ldrb	r3, [r3, #0]
 800cc68:	461e      	mov	r6, r3
 800cc6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc6c:	3303      	adds	r3, #3
 800cc6e:	781b      	ldrb	r3, [r3, #0]
 800cc70:	461a      	mov	r2, r3
 800cc72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc74:	3302      	adds	r3, #2
 800cc76:	781b      	ldrb	r3, [r3, #0]
 800cc78:	4619      	mov	r1, r3
 800cc7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc7c:	3301      	adds	r3, #1
 800cc7e:	781b      	ldrb	r3, [r3, #0]
 800cc80:	461c      	mov	r4, r3
 800cc82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc84:	781b      	ldrb	r3, [r3, #0]
 800cc86:	f107 0008 	add.w	r0, r7, #8
 800cc8a:	9303      	str	r3, [sp, #12]
 800cc8c:	9402      	str	r4, [sp, #8]
 800cc8e:	9101      	str	r1, [sp, #4]
 800cc90:	9200      	str	r2, [sp, #0]
 800cc92:	4633      	mov	r3, r6
 800cc94:	462a      	mov	r2, r5
 800cc96:	4907      	ldr	r1, [pc, #28]	@ (800ccb4 <SVCCTL_App_Notification+0x300>)
 800cc98:	f001 fcbc 	bl	800e614 <siprintf>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 800cc9c:	e000      	b.n	800cca0 <SVCCTL_App_Notification+0x2ec>
          break;
 800cc9e:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 800cca0:	e10f      	b.n	800cec2 <SVCCTL_App_Notification+0x50e>
 800cca2:	bf00      	nop
 800cca4:	200004dc 	.word	0x200004dc
 800cca8:	0800fcf8 	.word	0x0800fcf8
 800ccac:	0800fd24 	.word	0x0800fd24
 800ccb0:	20000574 	.word	0x20000574
 800ccb4:	0800fc04 	.word	0x0800fc04
 800ccb8:	0800fd60 	.word	0x0800fd60
 800ccbc:	3ff40000 	.word	0x3ff40000
 800ccc0:	0800fd94 	.word	0x0800fd94
 800ccc4:	0800fe00 	.word	0x0800fe00
 800ccc8:	0800fe30 	.word	0x0800fe30
 800cccc:	0800fe3c 	.word	0x0800fe3c
 800ccd0:	0800fe48 	.word	0x0800fe48
 800ccd4:	0800fe68 	.word	0x0800fe68
 800ccd8:	0800fe88 	.word	0x0800fe88
 800ccdc:	0800feac 	.word	0x0800feac
 800cce0:	0800fef4 	.word	0x0800fef4
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 800cce4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cce6:	3302      	adds	r3, #2
 800cce8:	63fb      	str	r3, [r7, #60]	@ 0x3c
      switch (p_blecore_evt->ecode)
 800ccea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ccec:	881b      	ldrh	r3, [r3, #0]
 800ccee:	b29b      	uxth	r3, r3
 800ccf0:	f640 420e 	movw	r2, #3086	@ 0xc0e
 800ccf4:	4293      	cmp	r3, r2
 800ccf6:	f000 80d6 	beq.w	800cea6 <SVCCTL_App_Notification+0x4f2>
 800ccfa:	f640 420e 	movw	r2, #3086	@ 0xc0e
 800ccfe:	4293      	cmp	r3, r2
 800cd00:	f300 80de 	bgt.w	800cec0 <SVCCTL_App_Notification+0x50c>
 800cd04:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800cd08:	f000 80d6 	beq.w	800ceb8 <SVCCTL_App_Notification+0x504>
 800cd0c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800cd10:	f300 80d6 	bgt.w	800cec0 <SVCCTL_App_Notification+0x50c>
 800cd14:	2b04      	cmp	r3, #4
 800cd16:	f000 80be 	beq.w	800ce96 <SVCCTL_App_Notification+0x4e2>
 800cd1a:	2b04      	cmp	r3, #4
 800cd1c:	f2c0 80d0 	blt.w	800cec0 <SVCCTL_App_Notification+0x50c>
 800cd20:	f240 420a 	movw	r2, #1034	@ 0x40a
 800cd24:	4293      	cmp	r3, r2
 800cd26:	f300 80cb 	bgt.w	800cec0 <SVCCTL_App_Notification+0x50c>
 800cd2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cd2e:	f2c0 80c7 	blt.w	800cec0 <SVCCTL_App_Notification+0x50c>
 800cd32:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 800cd36:	2b0a      	cmp	r3, #10
 800cd38:	f200 80c2 	bhi.w	800cec0 <SVCCTL_App_Notification+0x50c>
 800cd3c:	a201      	add	r2, pc, #4	@ (adr r2, 800cd44 <SVCCTL_App_Notification+0x390>)
 800cd3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd42:	bf00      	nop
 800cd44:	0800cd71 	.word	0x0800cd71
 800cd48:	0800ce59 	.word	0x0800ce59
 800cd4c:	0800cd79 	.word	0x0800cd79
 800cd50:	0800cdaf 	.word	0x0800cdaf
 800cd54:	0800cdb7 	.word	0x0800cdb7
 800cd58:	0800cdbf 	.word	0x0800cdbf
 800cd5c:	0800cec1 	.word	0x0800cec1
 800cd60:	0800ce8f 	.word	0x0800ce8f
 800cd64:	0800cdf3 	.word	0x0800cdf3
 800cd68:	0800ce03 	.word	0x0800ce03
 800cd6c:	0800cdfb 	.word	0x0800cdfb
          APP_DBG_MSG(">>== ACI_GAP_LIMITED_DISCOVERABLE_VSEVT_CODE \n");
 800cd70:	4856      	ldr	r0, [pc, #344]	@ (800cecc <SVCCTL_App_Notification+0x518>)
 800cd72:	f001 fc47 	bl	800e604 <puts>
          break; /* ACI_GAP_LIMITED_DISCOVERABLE_VSEVT_CODE */
 800cd76:	e0a0      	b.n	800ceba <SVCCTL_App_Notification+0x506>
          APP_DBG_MSG(">>== ACI_GAP_PASS_KEY_REQ_VSEVT_CODE \n");
 800cd78:	4855      	ldr	r0, [pc, #340]	@ (800ced0 <SVCCTL_App_Notification+0x51c>)
 800cd7a:	f001 fc43 	bl	800e604 <puts>
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,123456);
 800cd7e:	4b55      	ldr	r3, [pc, #340]	@ (800ced4 <SVCCTL_App_Notification+0x520>)
 800cd80:	8adb      	ldrh	r3, [r3, #22]
 800cd82:	4955      	ldr	r1, [pc, #340]	@ (800ced8 <SVCCTL_App_Notification+0x524>)
 800cd84:	4618      	mov	r0, r3
 800cd86:	f7fc fd81 	bl	800988c <aci_gap_pass_key_resp>
 800cd8a:	4603      	mov	r3, r0
 800cd8c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
          if (ret != BLE_STATUS_SUCCESS)
 800cd90:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d006      	beq.n	800cda6 <SVCCTL_App_Notification+0x3f2>
            APP_DBG_MSG("==>> aci_gap_pass_key_resp : Fail, reason: 0x%x\n", ret);
 800cd98:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800cd9c:	4619      	mov	r1, r3
 800cd9e:	484f      	ldr	r0, [pc, #316]	@ (800cedc <SVCCTL_App_Notification+0x528>)
 800cda0:	f001 fbc0 	bl	800e524 <iprintf>
          break; /* ACI_GAP_PASS_KEY_REQ_VSEVT_CODE */
 800cda4:	e089      	b.n	800ceba <SVCCTL_App_Notification+0x506>
            APP_DBG_MSG("==>> aci_gap_pass_key_resp : Success \n");
 800cda6:	484e      	ldr	r0, [pc, #312]	@ (800cee0 <SVCCTL_App_Notification+0x52c>)
 800cda8:	f001 fc2c 	bl	800e604 <puts>
          break; /* ACI_GAP_PASS_KEY_REQ_VSEVT_CODE */
 800cdac:	e085      	b.n	800ceba <SVCCTL_App_Notification+0x506>
          APP_DBG_MSG(">>== ACI_GAP_AUTHORIZATION_REQ_VSEVT_CODE\n");
 800cdae:	484d      	ldr	r0, [pc, #308]	@ (800cee4 <SVCCTL_App_Notification+0x530>)
 800cdb0:	f001 fc28 	bl	800e604 <puts>
          break; /* ACI_GAP_AUTHORIZATION_REQ_VSEVT_CODE */
 800cdb4:	e081      	b.n	800ceba <SVCCTL_App_Notification+0x506>
          APP_DBG_MSG("==>> ACI_GAP_PERIPHERAL_SECURITY_INITIATED_VSEVT_CODE \n");
 800cdb6:	484c      	ldr	r0, [pc, #304]	@ (800cee8 <SVCCTL_App_Notification+0x534>)
 800cdb8:	f001 fc24 	bl	800e604 <puts>
          break; /* ACI_GAP_PERIPHERAL_SECURITY_INITIATED_VSEVT_CODE */
 800cdbc:	e07d      	b.n	800ceba <SVCCTL_App_Notification+0x506>
          APP_DBG_MSG("==>> ACI_GAP_BOND_LOST_VSEVT_CODE \n");
 800cdbe:	484b      	ldr	r0, [pc, #300]	@ (800ceec <SVCCTL_App_Notification+0x538>)
 800cdc0:	f001 fc20 	bl	800e604 <puts>
          ret = aci_gap_allow_rebond(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 800cdc4:	4b43      	ldr	r3, [pc, #268]	@ (800ced4 <SVCCTL_App_Notification+0x520>)
 800cdc6:	8adb      	ldrh	r3, [r3, #22]
 800cdc8:	4618      	mov	r0, r3
 800cdca:	f7fc ff09 	bl	8009be0 <aci_gap_allow_rebond>
 800cdce:	4603      	mov	r3, r0
 800cdd0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
          if (ret != BLE_STATUS_SUCCESS)
 800cdd4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d006      	beq.n	800cdea <SVCCTL_App_Notification+0x436>
            APP_DBG_MSG("==>> aci_gap_allow_rebond : Fail, reason: 0x%x\n", ret);
 800cddc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800cde0:	4619      	mov	r1, r3
 800cde2:	4843      	ldr	r0, [pc, #268]	@ (800cef0 <SVCCTL_App_Notification+0x53c>)
 800cde4:	f001 fb9e 	bl	800e524 <iprintf>
          break; /* ACI_GAP_BOND_LOST_VSEVT_CODE */
 800cde8:	e067      	b.n	800ceba <SVCCTL_App_Notification+0x506>
            APP_DBG_MSG("==>> aci_gap_allow_rebond : Success \n");
 800cdea:	4842      	ldr	r0, [pc, #264]	@ (800cef4 <SVCCTL_App_Notification+0x540>)
 800cdec:	f001 fc0a 	bl	800e604 <puts>
          break; /* ACI_GAP_BOND_LOST_VSEVT_CODE */
 800cdf0:	e063      	b.n	800ceba <SVCCTL_App_Notification+0x506>
          APP_DBG_MSG(">>== ACI_GAP_ADDR_NOT_RESOLVED_VSEVT_CODE \n");
 800cdf2:	4841      	ldr	r0, [pc, #260]	@ (800cef8 <SVCCTL_App_Notification+0x544>)
 800cdf4:	f001 fc06 	bl	800e604 <puts>
          break; /* ACI_GAP_ADDR_NOT_RESOLVED_VSEVT_CODE */
 800cdf8:	e05f      	b.n	800ceba <SVCCTL_App_Notification+0x506>
          APP_DBG_MSG(">>== ACI_GAP_KEYPRESS_NOTIFICATION_VSEVT_CODE\n");
 800cdfa:	4840      	ldr	r0, [pc, #256]	@ (800cefc <SVCCTL_App_Notification+0x548>)
 800cdfc:	f001 fc02 	bl	800e604 <puts>
          break; /* ACI_GAP_KEYPRESS_NOTIFICATION_VSEVT_CODE */    
 800ce00:	e05b      	b.n	800ceba <SVCCTL_App_Notification+0x506>
          APP_DBG_MSG(">>== ACI_GAP_NUMERIC_COMPARISON_VALUE_VSEVT_CODE\n");
 800ce02:	483f      	ldr	r0, [pc, #252]	@ (800cf00 <SVCCTL_App_Notification+0x54c>)
 800ce04:	f001 fbfe 	bl	800e604 <puts>
                      ((aci_gap_numeric_comparison_value_event_rp0 *)(p_blecore_evt->data))->Numeric_Value);
 800ce08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ce0a:	3302      	adds	r3, #2
          APP_DBG_MSG("     - numeric_value = %ld\n",
 800ce0c:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800ce10:	4619      	mov	r1, r3
 800ce12:	483c      	ldr	r0, [pc, #240]	@ (800cf04 <SVCCTL_App_Notification+0x550>)
 800ce14:	f001 fb86 	bl	800e524 <iprintf>
                      ((aci_gap_numeric_comparison_value_event_rp0 *)(p_blecore_evt->data))->Numeric_Value);
 800ce18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ce1a:	3302      	adds	r3, #2
          APP_DBG_MSG("     - Hex_value = %lx\n",
 800ce1c:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800ce20:	4619      	mov	r1, r3
 800ce22:	4839      	ldr	r0, [pc, #228]	@ (800cf08 <SVCCTL_App_Notification+0x554>)
 800ce24:	f001 fb7e 	bl	800e524 <iprintf>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES); /* CONFIRM_YES = 1 */
 800ce28:	4b2a      	ldr	r3, [pc, #168]	@ (800ced4 <SVCCTL_App_Notification+0x520>)
 800ce2a:	8adb      	ldrh	r3, [r3, #22]
 800ce2c:	2101      	movs	r1, #1
 800ce2e:	4618      	mov	r0, r3
 800ce30:	f7fc ff2a 	bl	8009c88 <aci_gap_numeric_comparison_value_confirm_yesno>
 800ce34:	4603      	mov	r3, r0
 800ce36:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
          if (ret != BLE_STATUS_SUCCESS)
 800ce3a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d006      	beq.n	800ce50 <SVCCTL_App_Notification+0x49c>
            APP_DBG_MSG("==>> aci_gap_numeric_comparison_value_confirm_yesno-->YES : Fail, reason: 0x%x\n", ret);
 800ce42:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800ce46:	4619      	mov	r1, r3
 800ce48:	4830      	ldr	r0, [pc, #192]	@ (800cf0c <SVCCTL_App_Notification+0x558>)
 800ce4a:	f001 fb6b 	bl	800e524 <iprintf>
          break;
 800ce4e:	e034      	b.n	800ceba <SVCCTL_App_Notification+0x506>
            APP_DBG_MSG("==>> aci_gap_numeric_comparison_value_confirm_yesno-->YES : Success \n");
 800ce50:	482f      	ldr	r0, [pc, #188]	@ (800cf10 <SVCCTL_App_Notification+0x55c>)
 800ce52:	f001 fbd7 	bl	800e604 <puts>
          break;
 800ce56:	e030      	b.n	800ceba <SVCCTL_App_Notification+0x506>
          pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 800ce58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ce5a:	3302      	adds	r3, #2
 800ce5c:	63bb      	str	r3, [r7, #56]	@ 0x38
          APP_DBG_MSG(">>== ACI_GAP_PAIRING_COMPLETE_VSEVT_CODE\n");
 800ce5e:	482d      	ldr	r0, [pc, #180]	@ (800cf14 <SVCCTL_App_Notification+0x560>)
 800ce60:	f001 fbd0 	bl	800e604 <puts>
          if (pairing_complete->Status == 0)
 800ce64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce66:	789b      	ldrb	r3, [r3, #2]
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d103      	bne.n	800ce74 <SVCCTL_App_Notification+0x4c0>
            APP_DBG_MSG("     - Pairing Success\n");
 800ce6c:	482a      	ldr	r0, [pc, #168]	@ (800cf18 <SVCCTL_App_Notification+0x564>)
 800ce6e:	f001 fbc9 	bl	800e604 <puts>
 800ce72:	e008      	b.n	800ce86 <SVCCTL_App_Notification+0x4d2>
            APP_DBG_MSG("     - Pairing KO \n     - Status: 0x%x\n     - Reason: 0x%x\n",pairing_complete->Status, pairing_complete->Reason);
 800ce74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce76:	789b      	ldrb	r3, [r3, #2]
 800ce78:	4619      	mov	r1, r3
 800ce7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce7c:	78db      	ldrb	r3, [r3, #3]
 800ce7e:	461a      	mov	r2, r3
 800ce80:	4826      	ldr	r0, [pc, #152]	@ (800cf1c <SVCCTL_App_Notification+0x568>)
 800ce82:	f001 fb4f 	bl	800e524 <iprintf>
          APP_DBG_MSG("\n");
 800ce86:	200a      	movs	r0, #10
 800ce88:	f001 fb5e 	bl	800e548 <putchar>
          break;    
 800ce8c:	e015      	b.n	800ceba <SVCCTL_App_Notification+0x506>
          APP_DBG_MSG(">>== ACI_GAP_PROC_COMPLETE_VSEVT_CODE \r");
 800ce8e:	4824      	ldr	r0, [pc, #144]	@ (800cf20 <SVCCTL_App_Notification+0x56c>)
 800ce90:	f001 fb48 	bl	800e524 <iprintf>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 800ce94:	e011      	b.n	800ceba <SVCCTL_App_Notification+0x506>
          HW_TS_Start(BleApplicationContext.SwitchOffGPIO_timer_Id, (uint32_t)LED_ON_TIMEOUT);
 800ce96:	4b0f      	ldr	r3, [pc, #60]	@ (800ced4 <SVCCTL_App_Notification+0x520>)
 800ce98:	f893 3086 	ldrb.w	r3, [r3, #134]	@ 0x86
 800ce9c:	210a      	movs	r1, #10
 800ce9e:	4618      	mov	r0, r3
 800cea0:	f7f5 f968 	bl	8002174 <HW_TS_Start>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 800cea4:	e009      	b.n	800ceba <SVCCTL_App_Notification+0x506>
          APP_DBG_MSG(">>== ACI_GATT_INDICATION_VSEVT_CODE \r");
 800cea6:	481f      	ldr	r0, [pc, #124]	@ (800cf24 <SVCCTL_App_Notification+0x570>)
 800cea8:	f001 fb3c 	bl	800e524 <iprintf>
          aci_gatt_confirm_indication(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 800ceac:	4b09      	ldr	r3, [pc, #36]	@ (800ced4 <SVCCTL_App_Notification+0x520>)
 800ceae:	8adb      	ldrh	r3, [r3, #22]
 800ceb0:	4618      	mov	r0, r3
 800ceb2:	f7fd f9fc 	bl	800a2ae <aci_gatt_confirm_indication>
        break;
 800ceb6:	e000      	b.n	800ceba <SVCCTL_App_Notification+0x506>
          break;
 800ceb8:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800ceba:	e001      	b.n	800cec0 <SVCCTL_App_Notification+0x50c>
      break;
 800cebc:	bf00      	nop
 800cebe:	e000      	b.n	800cec2 <SVCCTL_App_Notification+0x50e>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800cec0:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 800cec2:	2301      	movs	r3, #1
}
 800cec4:	4618      	mov	r0, r3
 800cec6:	374c      	adds	r7, #76	@ 0x4c
 800cec8:	46bd      	mov	sp, r7
 800ceca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cecc:	0800ff44 	.word	0x0800ff44
 800ced0:	0800ff74 	.word	0x0800ff74
 800ced4:	200004dc 	.word	0x200004dc
 800ced8:	0001e240 	.word	0x0001e240
 800cedc:	0800ff9c 	.word	0x0800ff9c
 800cee0:	0800ffd0 	.word	0x0800ffd0
 800cee4:	0800fff8 	.word	0x0800fff8
 800cee8:	08010024 	.word	0x08010024
 800ceec:	0801005c 	.word	0x0801005c
 800cef0:	08010080 	.word	0x08010080
 800cef4:	080100b0 	.word	0x080100b0
 800cef8:	080100d8 	.word	0x080100d8
 800cefc:	08010104 	.word	0x08010104
 800cf00:	08010134 	.word	0x08010134
 800cf04:	08010168 	.word	0x08010168
 800cf08:	08010184 	.word	0x08010184
 800cf0c:	0801019c 	.word	0x0801019c
 800cf10:	080101ec 	.word	0x080101ec
 800cf14:	08010234 	.word	0x08010234
 800cf18:	08010260 	.word	0x08010260
 800cf1c:	08010278 	.word	0x08010278
 800cf20:	080102b4 	.word	0x080102b4
 800cf24:	080102dc 	.word	0x080102dc

0800cf28 <APP_BLE_Send_EEGData_Notification>:
 *
 * Hermes Characteristics notifications
 *
 **/
uint8_t  APP_BLE_Send_EEGData_Notification(uint8_t* payload, uint8_t length)
{
 800cf28:	b580      	push	{r7, lr}
 800cf2a:	b086      	sub	sp, #24
 800cf2c:	af02      	add	r7, sp, #8
 800cf2e:	6078      	str	r0, [r7, #4]
 800cf30:	460b      	mov	r3, r1
 800cf32:	70fb      	strb	r3, [r7, #3]
    uint8_t  ret = BLE_STATUS_INVALID_PARAMS;
 800cf34:	2392      	movs	r3, #146	@ 0x92
 800cf36:	73fb      	strb	r3, [r7, #15]

    if(length <= NEW_NOTIFY_CHAR_VALUE_LENGTH)
 800cf38:	78fb      	ldrb	r3, [r7, #3]
 800cf3a:	2bf1      	cmp	r3, #241	@ 0xf1
 800cf3c:	d80e      	bhi.n	800cf5c <APP_BLE_Send_EEGData_Notification+0x34>
    {
        ret = aci_gatt_update_char_value(BleApplicationContext.BleApplicationContext_legacy.eeg_service_handle,
 800cf3e:	4b0a      	ldr	r3, [pc, #40]	@ (800cf68 <APP_BLE_Send_EEGData_Notification+0x40>)
 800cf40:	f8b3 007e 	ldrh.w	r0, [r3, #126]	@ 0x7e
 800cf44:	4b08      	ldr	r3, [pc, #32]	@ (800cf68 <APP_BLE_Send_EEGData_Notification+0x40>)
 800cf46:	f8b3 1088 	ldrh.w	r1, [r3, #136]	@ 0x88
 800cf4a:	78fa      	ldrb	r2, [r7, #3]
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	9300      	str	r3, [sp, #0]
 800cf50:	4613      	mov	r3, r2
 800cf52:	2200      	movs	r2, #0
 800cf54:	f7fd f902 	bl	800a15c <aci_gatt_update_char_value>
 800cf58:	4603      	mov	r3, r0
 800cf5a:	73fb      	strb	r3, [r7, #15]
                                        0, /* offset */
                                        length, /* data length */
                                        payload);
    }

    return ret;
 800cf5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf5e:	4618      	mov	r0, r3
 800cf60:	3710      	adds	r7, #16
 800cf62:	46bd      	mov	sp, r7
 800cf64:	bd80      	pop	{r7, pc}
 800cf66:	bf00      	nop
 800cf68:	200004dc 	.word	0x200004dc

0800cf6c <APP_BLE_Send_Event_Notification>:


uint8_t  APP_BLE_Send_Event_Notification(event_packet_t* payload)
{
 800cf6c:	b580      	push	{r7, lr}
 800cf6e:	b086      	sub	sp, #24
 800cf70:	af02      	add	r7, sp, #8
 800cf72:	6078      	str	r0, [r7, #4]
    uint8_t  ret = BLE_STATUS_INVALID_PARAMS;
 800cf74:	2392      	movs	r3, #146	@ 0x92
 800cf76:	73fb      	strb	r3, [r7, #15]

	ret = aci_gatt_update_char_value(BleApplicationContext.BleApplicationContext_legacy.event_service_handle,
 800cf78:	4b09      	ldr	r3, [pc, #36]	@ (800cfa0 <APP_BLE_Send_Event_Notification+0x34>)
 800cf7a:	f8b3 0080 	ldrh.w	r0, [r3, #128]	@ 0x80
 800cf7e:	4b08      	ldr	r3, [pc, #32]	@ (800cfa0 <APP_BLE_Send_Event_Notification+0x34>)
 800cf80:	f8b3 108a 	ldrh.w	r1, [r3, #138]	@ 0x8a
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	9300      	str	r3, [sp, #0]
 800cf88:	2303      	movs	r3, #3
 800cf8a:	2200      	movs	r2, #0
 800cf8c:	f7fd f8e6 	bl	800a15c <aci_gatt_update_char_value>
 800cf90:	4603      	mov	r3, r0
 800cf92:	73fb      	strb	r3, [r7, #15]
									BleApplicationContext.event_char_handle,
									0, /* offset */
									sizeof(event_packet_t), /* data length */
									(uint8_t*)payload);

    return ret;
 800cf94:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf96:	4618      	mov	r0, r3
 800cf98:	3710      	adds	r7, #16
 800cf9a:	46bd      	mov	sp, r7
 800cf9c:	bd80      	pop	{r7, pc}
 800cf9e:	bf00      	nop
 800cfa0:	200004dc 	.word	0x200004dc

0800cfa4 <APP_BLE_Send_IMU_Notification>:



uint8_t  APP_BLE_Send_IMU_Notification(uint8_t* accel, uint8_t* gyro)
{
 800cfa4:	b580      	push	{r7, lr}
 800cfa6:	b086      	sub	sp, #24
 800cfa8:	af02      	add	r7, sp, #8
 800cfaa:	6078      	str	r0, [r7, #4]
 800cfac:	6039      	str	r1, [r7, #0]
    uint8_t  ret = BLE_STATUS_INVALID_PARAMS;
 800cfae:	2392      	movs	r3, #146	@ 0x92
 800cfb0:	73fb      	strb	r3, [r7, #15]

	ret = aci_gatt_update_char_value(BleApplicationContext.BleApplicationContext_legacy.motion_service_handle,
 800cfb2:	4b10      	ldr	r3, [pc, #64]	@ (800cff4 <APP_BLE_Send_IMU_Notification+0x50>)
 800cfb4:	f8b3 0082 	ldrh.w	r0, [r3, #130]	@ 0x82
 800cfb8:	4b0e      	ldr	r3, [pc, #56]	@ (800cff4 <APP_BLE_Send_IMU_Notification+0x50>)
 800cfba:	f8b3 108c 	ldrh.w	r1, [r3, #140]	@ 0x8c
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	9300      	str	r3, [sp, #0]
 800cfc2:	2306      	movs	r3, #6
 800cfc4:	2200      	movs	r2, #0
 800cfc6:	f7fd f8c9 	bl	800a15c <aci_gatt_update_char_value>
 800cfca:	4603      	mov	r3, r0
 800cfcc:	73fb      	strb	r3, [r7, #15]
									0, /* offset */
									6, /* data length */
									accel);


	ret = aci_gatt_update_char_value(BleApplicationContext.BleApplicationContext_legacy.motion_service_handle,
 800cfce:	4b09      	ldr	r3, [pc, #36]	@ (800cff4 <APP_BLE_Send_IMU_Notification+0x50>)
 800cfd0:	f8b3 0082 	ldrh.w	r0, [r3, #130]	@ 0x82
 800cfd4:	4b07      	ldr	r3, [pc, #28]	@ (800cff4 <APP_BLE_Send_IMU_Notification+0x50>)
 800cfd6:	f8b3 108e 	ldrh.w	r1, [r3, #142]	@ 0x8e
 800cfda:	683b      	ldr	r3, [r7, #0]
 800cfdc:	9300      	str	r3, [sp, #0]
 800cfde:	2306      	movs	r3, #6
 800cfe0:	2200      	movs	r2, #0
 800cfe2:	f7fd f8bb 	bl	800a15c <aci_gatt_update_char_value>
 800cfe6:	4603      	mov	r3, r0
 800cfe8:	73fb      	strb	r3, [r7, #15]
									BleApplicationContext.gyro_char_handle,
									0, /* offset */
									6, /* data length */
									gyro);

    return ret;
 800cfea:	7bfb      	ldrb	r3, [r7, #15]
}
 800cfec:	4618      	mov	r0, r3
 800cfee:	3710      	adds	r7, #16
 800cff0:	46bd      	mov	sp, r7
 800cff2:	bd80      	pop	{r7, pc}
 800cff4:	200004dc 	.word	0x200004dc

0800cff8 <APP_BLE_Send_Compass_Notification>:


uint8_t  APP_BLE_Send_Compass_Notification(uint8_t* compass)
{
 800cff8:	b580      	push	{r7, lr}
 800cffa:	b086      	sub	sp, #24
 800cffc:	af02      	add	r7, sp, #8
 800cffe:	6078      	str	r0, [r7, #4]
    uint8_t  ret = BLE_STATUS_INVALID_PARAMS;
 800d000:	2392      	movs	r3, #146	@ 0x92
 800d002:	73fb      	strb	r3, [r7, #15]

	ret = aci_gatt_update_char_value(BleApplicationContext.BleApplicationContext_legacy.motion_service_handle,
 800d004:	4b09      	ldr	r3, [pc, #36]	@ (800d02c <APP_BLE_Send_Compass_Notification+0x34>)
 800d006:	f8b3 0082 	ldrh.w	r0, [r3, #130]	@ 0x82
 800d00a:	4b08      	ldr	r3, [pc, #32]	@ (800d02c <APP_BLE_Send_Compass_Notification+0x34>)
 800d00c:	f8b3 1090 	ldrh.w	r1, [r3, #144]	@ 0x90
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	9300      	str	r3, [sp, #0]
 800d014:	2306      	movs	r3, #6
 800d016:	2200      	movs	r2, #0
 800d018:	f7fd f8a0 	bl	800a15c <aci_gatt_update_char_value>
 800d01c:	4603      	mov	r3, r0
 800d01e:	73fb      	strb	r3, [r7, #15]
									BleApplicationContext.compass_char_handle,
									0, /* offset */
									6, /* data length */
									compass);

    return ret;
 800d020:	7bfb      	ldrb	r3, [r7, #15]
}
 800d022:	4618      	mov	r0, r3
 800d024:	3710      	adds	r7, #16
 800d026:	46bd      	mov	sp, r7
 800d028:	bd80      	pop	{r7, pc}
 800d02a:	bf00      	nop
 800d02c:	200004dc 	.word	0x200004dc

0800d030 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 800d030:	b580      	push	{r7, lr}
 800d032:	b082      	sub	sp, #8
 800d034:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800d036:	4b06      	ldr	r3, [pc, #24]	@ (800d050 <Ble_Tl_Init+0x20>)
 800d038:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800d03a:	4b06      	ldr	r3, [pc, #24]	@ (800d054 <Ble_Tl_Init+0x24>)
 800d03c:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800d03e:	463b      	mov	r3, r7
 800d040:	4619      	mov	r1, r3
 800d042:	4805      	ldr	r0, [pc, #20]	@ (800d058 <Ble_Tl_Init+0x28>)
 800d044:	f7fd fe16 	bl	800ac74 <hci_init>

  return;
 800d048:	bf00      	nop
}
 800d04a:	3708      	adds	r7, #8
 800d04c:	46bd      	mov	sp, r7
 800d04e:	bd80      	pop	{r7, pc}
 800d050:	200300d8 	.word	0x200300d8
 800d054:	0800d68f 	.word	0x0800d68f
 800d058:	0800d657 	.word	0x0800d657

0800d05c <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 800d05c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d05e:	b08d      	sub	sp, #52	@ 0x34
 800d060:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 800d062:	2300      	movs	r3, #0
 800d064:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800d066:	2392      	movs	r3, #146	@ 0x92
 800d068:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init*/

  APP_DBG_MSG("==>> Start Ble_Hci_Gap_Gatt_Init function\n");
 800d06a:	48a5      	ldr	r0, [pc, #660]	@ (800d300 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800d06c:	f001 faca 	bl	800e604 <puts>

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 800d070:	f7fd fab2 	bl	800a5d8 <hci_reset>
 800d074:	4603      	mov	r3, r0
 800d076:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800d078:	7dfb      	ldrb	r3, [r7, #23]
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d005      	beq.n	800d08a <Ble_Hci_Gap_Gatt_Init+0x2e>
  {
    APP_DBG_MSG("  Fail   : hci_reset command, result: 0x%x \n", ret);
 800d07e:	7dfb      	ldrb	r3, [r7, #23]
 800d080:	4619      	mov	r1, r3
 800d082:	48a0      	ldr	r0, [pc, #640]	@ (800d304 <Ble_Hci_Gap_Gatt_Init+0x2a8>)
 800d084:	f001 fa4e 	bl	800e524 <iprintf>
 800d088:	e002      	b.n	800d090 <Ble_Hci_Gap_Gatt_Init+0x34>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_reset command\n");
 800d08a:	489f      	ldr	r0, [pc, #636]	@ (800d308 <Ble_Hci_Gap_Gatt_Init+0x2ac>)
 800d08c:	f001 faba 	bl	800e604 <puts>
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 800d090:	f000 fa40 	bl	800d514 <BleGetBdAddress>
 800d094:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 800d096:	693a      	ldr	r2, [r7, #16]
 800d098:	2106      	movs	r1, #6
 800d09a:	2000      	movs	r0, #0
 800d09c:	f7fd f95c 	bl	800a358 <aci_hal_write_config_data>
 800d0a0:	4603      	mov	r3, r0
 800d0a2:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800d0a4:	7dfb      	ldrb	r3, [r7, #23]
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d005      	beq.n	800d0b6 <Ble_Hci_Gap_Gatt_Init+0x5a>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET, result: 0x%x \n", ret);
 800d0aa:	7dfb      	ldrb	r3, [r7, #23]
 800d0ac:	4619      	mov	r1, r3
 800d0ae:	4897      	ldr	r0, [pc, #604]	@ (800d30c <Ble_Hci_Gap_Gatt_Init+0x2b0>)
 800d0b0:	f001 fa38 	bl	800e524 <iprintf>
 800d0b4:	e021      	b.n	800d0fa <Ble_Hci_Gap_Gatt_Init+0x9e>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET\n");
 800d0b6:	4896      	ldr	r0, [pc, #600]	@ (800d310 <Ble_Hci_Gap_Gatt_Init+0x2b4>)
 800d0b8:	f001 faa4 	bl	800e604 <puts>
    APP_DBG_MSG("  Public Bluetooth Address: %02x:%02x:%02x:%02x:%02x:%02x\n",p_bd_addr[5],p_bd_addr[4],p_bd_addr[3],p_bd_addr[2],p_bd_addr[1],p_bd_addr[0]);
 800d0bc:	693b      	ldr	r3, [r7, #16]
 800d0be:	3305      	adds	r3, #5
 800d0c0:	781b      	ldrb	r3, [r3, #0]
 800d0c2:	4618      	mov	r0, r3
 800d0c4:	693b      	ldr	r3, [r7, #16]
 800d0c6:	3304      	adds	r3, #4
 800d0c8:	781b      	ldrb	r3, [r3, #0]
 800d0ca:	461c      	mov	r4, r3
 800d0cc:	693b      	ldr	r3, [r7, #16]
 800d0ce:	3303      	adds	r3, #3
 800d0d0:	781b      	ldrb	r3, [r3, #0]
 800d0d2:	461d      	mov	r5, r3
 800d0d4:	693b      	ldr	r3, [r7, #16]
 800d0d6:	3302      	adds	r3, #2
 800d0d8:	781b      	ldrb	r3, [r3, #0]
 800d0da:	461a      	mov	r2, r3
 800d0dc:	693b      	ldr	r3, [r7, #16]
 800d0de:	3301      	adds	r3, #1
 800d0e0:	781b      	ldrb	r3, [r3, #0]
 800d0e2:	4619      	mov	r1, r3
 800d0e4:	693b      	ldr	r3, [r7, #16]
 800d0e6:	781b      	ldrb	r3, [r3, #0]
 800d0e8:	9302      	str	r3, [sp, #8]
 800d0ea:	9101      	str	r1, [sp, #4]
 800d0ec:	9200      	str	r2, [sp, #0]
 800d0ee:	462b      	mov	r3, r5
 800d0f0:	4622      	mov	r2, r4
 800d0f2:	4601      	mov	r1, r0
 800d0f4:	4887      	ldr	r0, [pc, #540]	@ (800d314 <Ble_Hci_Gap_Gatt_Init+0x2b8>)
 800d0f6:	f001 fa15 	bl	800e524 <iprintf>
  }

#if (CFG_BLE_ADDRESS_TYPE == GAP_PUBLIC_ADDR)
  /* BLE MAC in ADV Packet */
  a_ManufData[ sizeof(a_ManufData)-6] = p_bd_addr[5];
 800d0fa:	693b      	ldr	r3, [r7, #16]
 800d0fc:	3305      	adds	r3, #5
 800d0fe:	781a      	ldrb	r2, [r3, #0]
 800d100:	4b85      	ldr	r3, [pc, #532]	@ (800d318 <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 800d102:	721a      	strb	r2, [r3, #8]
  a_ManufData[ sizeof(a_ManufData)-5] = p_bd_addr[4];
 800d104:	693b      	ldr	r3, [r7, #16]
 800d106:	3304      	adds	r3, #4
 800d108:	781a      	ldrb	r2, [r3, #0]
 800d10a:	4b83      	ldr	r3, [pc, #524]	@ (800d318 <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 800d10c:	725a      	strb	r2, [r3, #9]
  a_ManufData[ sizeof(a_ManufData)-4] = p_bd_addr[3];
 800d10e:	693b      	ldr	r3, [r7, #16]
 800d110:	3303      	adds	r3, #3
 800d112:	781a      	ldrb	r2, [r3, #0]
 800d114:	4b80      	ldr	r3, [pc, #512]	@ (800d318 <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 800d116:	729a      	strb	r2, [r3, #10]
  a_ManufData[ sizeof(a_ManufData)-3] = p_bd_addr[2];
 800d118:	693b      	ldr	r3, [r7, #16]
 800d11a:	3302      	adds	r3, #2
 800d11c:	781a      	ldrb	r2, [r3, #0]
 800d11e:	4b7e      	ldr	r3, [pc, #504]	@ (800d318 <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 800d120:	72da      	strb	r2, [r3, #11]
  a_ManufData[ sizeof(a_ManufData)-2] = p_bd_addr[1];
 800d122:	693b      	ldr	r3, [r7, #16]
 800d124:	3301      	adds	r3, #1
 800d126:	781a      	ldrb	r2, [r3, #0]
 800d128:	4b7b      	ldr	r3, [pc, #492]	@ (800d318 <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 800d12a:	731a      	strb	r2, [r3, #12]
  a_ManufData[ sizeof(a_ManufData)-1] = p_bd_addr[0];
 800d12c:	693b      	ldr	r3, [r7, #16]
 800d12e:	781a      	ldrb	r2, [r3, #0]
 800d130:	4b79      	ldr	r3, [pc, #484]	@ (800d318 <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 800d132:	735a      	strb	r2, [r3, #13]
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive IRK and DHK(Legacy)
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 800d134:	4a79      	ldr	r2, [pc, #484]	@ (800d31c <Ble_Hci_Gap_Gatt_Init+0x2c0>)
 800d136:	2110      	movs	r1, #16
 800d138:	2018      	movs	r0, #24
 800d13a:	f7fd f90d 	bl	800a358 <aci_hal_write_config_data>
 800d13e:	4603      	mov	r3, r0
 800d140:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800d142:	7dfb      	ldrb	r3, [r7, #23]
 800d144:	2b00      	cmp	r3, #0
 800d146:	d005      	beq.n	800d154 <Ble_Hci_Gap_Gatt_Init+0xf8>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET, result: 0x%x \n", ret);
 800d148:	7dfb      	ldrb	r3, [r7, #23]
 800d14a:	4619      	mov	r1, r3
 800d14c:	4874      	ldr	r0, [pc, #464]	@ (800d320 <Ble_Hci_Gap_Gatt_Init+0x2c4>)
 800d14e:	f001 f9e9 	bl	800e524 <iprintf>
 800d152:	e002      	b.n	800d15a <Ble_Hci_Gap_Gatt_Init+0xfe>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET\n");
 800d154:	4873      	ldr	r0, [pc, #460]	@ (800d324 <Ble_Hci_Gap_Gatt_Init+0x2c8>)
 800d156:	f001 fa55 	bl	800e604 <puts>
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 800d15a:	4a73      	ldr	r2, [pc, #460]	@ (800d328 <Ble_Hci_Gap_Gatt_Init+0x2cc>)
 800d15c:	2110      	movs	r1, #16
 800d15e:	2008      	movs	r0, #8
 800d160:	f7fd f8fa 	bl	800a358 <aci_hal_write_config_data>
 800d164:	4603      	mov	r3, r0
 800d166:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800d168:	7dfb      	ldrb	r3, [r7, #23]
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d005      	beq.n	800d17a <Ble_Hci_Gap_Gatt_Init+0x11e>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET, result: 0x%x \n", ret);
 800d16e:	7dfb      	ldrb	r3, [r7, #23]
 800d170:	4619      	mov	r1, r3
 800d172:	486e      	ldr	r0, [pc, #440]	@ (800d32c <Ble_Hci_Gap_Gatt_Init+0x2d0>)
 800d174:	f001 f9d6 	bl	800e524 <iprintf>
 800d178:	e002      	b.n	800d180 <Ble_Hci_Gap_Gatt_Init+0x124>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET\n");
 800d17a:	486d      	ldr	r0, [pc, #436]	@ (800d330 <Ble_Hci_Gap_Gatt_Init+0x2d4>)
 800d17c:	f001 fa42 	bl	800e604 <puts>
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 800d180:	211f      	movs	r1, #31
 800d182:	2001      	movs	r0, #1
 800d184:	f7fd f96d 	bl	800a462 <aci_hal_set_tx_power_level>
 800d188:	4603      	mov	r3, r0
 800d18a:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800d18c:	7dfb      	ldrb	r3, [r7, #23]
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d005      	beq.n	800d19e <Ble_Hci_Gap_Gatt_Init+0x142>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_tx_power_level command, result: 0x%x \n", ret);
 800d192:	7dfb      	ldrb	r3, [r7, #23]
 800d194:	4619      	mov	r1, r3
 800d196:	4867      	ldr	r0, [pc, #412]	@ (800d334 <Ble_Hci_Gap_Gatt_Init+0x2d8>)
 800d198:	f001 f9c4 	bl	800e524 <iprintf>
 800d19c:	e002      	b.n	800d1a4 <Ble_Hci_Gap_Gatt_Init+0x148>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_tx_power_level command\n");
 800d19e:	4866      	ldr	r0, [pc, #408]	@ (800d338 <Ble_Hci_Gap_Gatt_Init+0x2dc>)
 800d1a0:	f001 fa30 	bl	800e604 <puts>
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 800d1a4:	f7fc fdd7 	bl	8009d56 <aci_gatt_init>
 800d1a8:	4603      	mov	r3, r0
 800d1aa:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800d1ac:	7dfb      	ldrb	r3, [r7, #23]
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d005      	beq.n	800d1be <Ble_Hci_Gap_Gatt_Init+0x162>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_init command, result: 0x%x \n", ret);
 800d1b2:	7dfb      	ldrb	r3, [r7, #23]
 800d1b4:	4619      	mov	r1, r3
 800d1b6:	4861      	ldr	r0, [pc, #388]	@ (800d33c <Ble_Hci_Gap_Gatt_Init+0x2e0>)
 800d1b8:	f001 f9b4 	bl	800e524 <iprintf>
 800d1bc:	e002      	b.n	800d1c4 <Ble_Hci_Gap_Gatt_Init+0x168>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_init command\n");
 800d1be:	4860      	ldr	r0, [pc, #384]	@ (800d340 <Ble_Hci_Gap_Gatt_Init+0x2e4>)
 800d1c0:	f001 fa20 	bl	800e604 <puts>
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 800d1c4:	2300      	movs	r3, #0
 800d1c6:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 800d1c8:	7bfb      	ldrb	r3, [r7, #15]
 800d1ca:	f043 0301 	orr.w	r3, r3, #1
 800d1ce:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 800d1d0:	7bfb      	ldrb	r3, [r7, #15]
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d02b      	beq.n	800d22e <Ble_Hci_Gap_Gatt_Init+0x1d2>
  {
    const char *name = "Hermes V1";
 800d1d6:	4b5b      	ldr	r3, [pc, #364]	@ (800d344 <Ble_Hci_Gap_Gatt_Init+0x2e8>)
 800d1d8:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 800d1da:	1dba      	adds	r2, r7, #6
 800d1dc:	7bf8      	ldrb	r0, [r7, #15]
 800d1de:	1cbb      	adds	r3, r7, #2
 800d1e0:	9301      	str	r3, [sp, #4]
 800d1e2:	1d3b      	adds	r3, r7, #4
 800d1e4:	9300      	str	r3, [sp, #0]
 800d1e6:	4613      	mov	r3, r2
 800d1e8:	2207      	movs	r2, #7
 800d1ea:	2100      	movs	r1, #0
 800d1ec:	f7fc fbb5 	bl	800995a <aci_gap_init>
 800d1f0:	4603      	mov	r3, r0
 800d1f2:	75fb      	strb	r3, [r7, #23]
                       APPBLE_GAP_DEVICE_NAME_LENGTH,
                       &gap_service_handle,
                       &gap_dev_name_char_handle,
                       &gap_appearance_char_handle);

    if (ret != BLE_STATUS_SUCCESS)
 800d1f4:	7dfb      	ldrb	r3, [r7, #23]
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d005      	beq.n	800d206 <Ble_Hci_Gap_Gatt_Init+0x1aa>
    {
      APP_DBG_MSG("  Fail   : aci_gap_init command, result: 0x%x \n", ret);
 800d1fa:	7dfb      	ldrb	r3, [r7, #23]
 800d1fc:	4619      	mov	r1, r3
 800d1fe:	4852      	ldr	r0, [pc, #328]	@ (800d348 <Ble_Hci_Gap_Gatt_Init+0x2ec>)
 800d200:	f001 f990 	bl	800e524 <iprintf>
 800d204:	e002      	b.n	800d20c <Ble_Hci_Gap_Gatt_Init+0x1b0>
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
 800d206:	4851      	ldr	r0, [pc, #324]	@ (800d34c <Ble_Hci_Gap_Gatt_Init+0x2f0>)
 800d208:	f001 f9fc 	bl	800e604 <puts>
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 800d20c:	88fc      	ldrh	r4, [r7, #6]
 800d20e:	88bd      	ldrh	r5, [r7, #4]
 800d210:	68b8      	ldr	r0, [r7, #8]
 800d212:	f7f2 ffb5 	bl	8000180 <strlen>
 800d216:	4603      	mov	r3, r0
 800d218:	b2da      	uxtb	r2, r3
 800d21a:	68bb      	ldr	r3, [r7, #8]
 800d21c:	9300      	str	r3, [sp, #0]
 800d21e:	4613      	mov	r3, r2
 800d220:	2200      	movs	r2, #0
 800d222:	4629      	mov	r1, r5
 800d224:	4620      	mov	r0, r4
 800d226:	f7fc ff99 	bl	800a15c <aci_gatt_update_char_value>
 800d22a:	4603      	mov	r3, r0
 800d22c:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 800d22e:	88f8      	ldrh	r0, [r7, #6]
 800d230:	8879      	ldrh	r1, [r7, #2]
 800d232:	463b      	mov	r3, r7
 800d234:	9300      	str	r3, [sp, #0]
 800d236:	2302      	movs	r3, #2
 800d238:	2200      	movs	r2, #0
 800d23a:	f7fc ff8f 	bl	800a15c <aci_gatt_update_char_value>
 800d23e:	4603      	mov	r3, r0
 800d240:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 800d242:	2202      	movs	r2, #2
 800d244:	2102      	movs	r1, #2
 800d246:	2000      	movs	r0, #0
 800d248:	f7fd fa68 	bl	800a71c <hci_le_set_default_phy>
 800d24c:	4603      	mov	r3, r0
 800d24e:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800d250:	7dfb      	ldrb	r3, [r7, #23]
 800d252:	2b00      	cmp	r3, #0
 800d254:	d005      	beq.n	800d262 <Ble_Hci_Gap_Gatt_Init+0x206>
  {
    APP_DBG_MSG("  Fail   : hci_le_set_default_phy command, result: 0x%x \n", ret);
 800d256:	7dfb      	ldrb	r3, [r7, #23]
 800d258:	4619      	mov	r1, r3
 800d25a:	483d      	ldr	r0, [pc, #244]	@ (800d350 <Ble_Hci_Gap_Gatt_Init+0x2f4>)
 800d25c:	f001 f962 	bl	800e524 <iprintf>
 800d260:	e002      	b.n	800d268 <Ble_Hci_Gap_Gatt_Init+0x20c>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_le_set_default_phy command\n");
 800d262:	483c      	ldr	r0, [pc, #240]	@ (800d354 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 800d264:	f001 f9ce 	bl	800e604 <puts>
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 800d268:	4b3b      	ldr	r3, [pc, #236]	@ (800d358 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800d26a:	2201      	movs	r2, #1
 800d26c:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 800d26e:	4b3a      	ldr	r3, [pc, #232]	@ (800d358 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800d270:	781b      	ldrb	r3, [r3, #0]
 800d272:	4618      	mov	r0, r3
 800d274:	f7fc f9f2 	bl	800965c <aci_gap_set_io_capability>
 800d278:	4603      	mov	r3, r0
 800d27a:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800d27c:	7dfb      	ldrb	r3, [r7, #23]
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d005      	beq.n	800d28e <Ble_Hci_Gap_Gatt_Init+0x232>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_io_capability command, result: 0x%x \n", ret);
 800d282:	7dfb      	ldrb	r3, [r7, #23]
 800d284:	4619      	mov	r1, r3
 800d286:	4835      	ldr	r0, [pc, #212]	@ (800d35c <Ble_Hci_Gap_Gatt_Init+0x300>)
 800d288:	f001 f94c 	bl	800e524 <iprintf>
 800d28c:	e002      	b.n	800d294 <Ble_Hci_Gap_Gatt_Init+0x238>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_io_capability command\n");
 800d28e:	4834      	ldr	r0, [pc, #208]	@ (800d360 <Ble_Hci_Gap_Gatt_Init+0x304>)
 800d290:	f001 f9b8 	bl	800e604 <puts>
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 800d294:	4b30      	ldr	r3, [pc, #192]	@ (800d358 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800d296:	2201      	movs	r2, #1
 800d298:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 800d29a:	4b2f      	ldr	r3, [pc, #188]	@ (800d358 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800d29c:	2208      	movs	r2, #8
 800d29e:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 800d2a0:	4b2d      	ldr	r3, [pc, #180]	@ (800d358 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800d2a2:	2210      	movs	r2, #16
 800d2a4:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 800d2a6:	4b2c      	ldr	r3, [pc, #176]	@ (800d358 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800d2a8:	2200      	movs	r2, #0
 800d2aa:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 800d2ac:	4b2a      	ldr	r3, [pc, #168]	@ (800d358 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800d2ae:	4a2d      	ldr	r2, [pc, #180]	@ (800d364 <Ble_Hci_Gap_Gatt_Init+0x308>)
 800d2b0:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 800d2b2:	4b29      	ldr	r3, [pc, #164]	@ (800d358 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800d2b4:	2201      	movs	r2, #1
 800d2b6:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 800d2b8:	4b27      	ldr	r3, [pc, #156]	@ (800d358 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800d2ba:	789c      	ldrb	r4, [r3, #2]
 800d2bc:	4b26      	ldr	r3, [pc, #152]	@ (800d358 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800d2be:	785d      	ldrb	r5, [r3, #1]
 800d2c0:	4b25      	ldr	r3, [pc, #148]	@ (800d358 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800d2c2:	791b      	ldrb	r3, [r3, #4]
 800d2c4:	4a24      	ldr	r2, [pc, #144]	@ (800d358 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800d2c6:	7952      	ldrb	r2, [r2, #5]
 800d2c8:	4923      	ldr	r1, [pc, #140]	@ (800d358 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800d2ca:	78c9      	ldrb	r1, [r1, #3]
 800d2cc:	4822      	ldr	r0, [pc, #136]	@ (800d358 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800d2ce:	6880      	ldr	r0, [r0, #8]
 800d2d0:	2600      	movs	r6, #0
 800d2d2:	9604      	str	r6, [sp, #16]
 800d2d4:	9003      	str	r0, [sp, #12]
 800d2d6:	9102      	str	r1, [sp, #8]
 800d2d8:	9201      	str	r2, [sp, #4]
 800d2da:	9300      	str	r3, [sp, #0]
 800d2dc:	2300      	movs	r3, #0
 800d2de:	2201      	movs	r2, #1
 800d2e0:	4629      	mov	r1, r5
 800d2e2:	4620      	mov	r0, r4
 800d2e4:	f7fc fa0e 	bl	8009704 <aci_gap_set_authentication_requirement>
 800d2e8:	4603      	mov	r3, r0
 800d2ea:	75fb      	strb	r3, [r7, #23]
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin,
                                               CFG_IDENTITY_ADDRESS);
  if (ret != BLE_STATUS_SUCCESS)
 800d2ec:	7dfb      	ldrb	r3, [r7, #23]
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d03c      	beq.n	800d36c <Ble_Hci_Gap_Gatt_Init+0x310>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_authentication_requirement command, result: 0x%x \n", ret);
 800d2f2:	7dfb      	ldrb	r3, [r7, #23]
 800d2f4:	4619      	mov	r1, r3
 800d2f6:	481c      	ldr	r0, [pc, #112]	@ (800d368 <Ble_Hci_Gap_Gatt_Init+0x30c>)
 800d2f8:	f001 f914 	bl	800e524 <iprintf>
 800d2fc:	e039      	b.n	800d372 <Ble_Hci_Gap_Gatt_Init+0x316>
 800d2fe:	bf00      	nop
 800d300:	08010304 	.word	0x08010304
 800d304:	08010330 	.word	0x08010330
 800d308:	08010360 	.word	0x08010360
 800d30c:	08010380 	.word	0x08010380
 800d310:	080103dc 	.word	0x080103dc
 800d314:	08010428 	.word	0x08010428
 800d318:	20000014 	.word	0x20000014
 800d31c:	08010d30 	.word	0x08010d30
 800d320:	08010464 	.word	0x08010464
 800d324:	080104bc 	.word	0x080104bc
 800d328:	08010d40 	.word	0x08010d40
 800d32c:	08010504 	.word	0x08010504
 800d330:	0801055c 	.word	0x0801055c
 800d334:	080105a4 	.word	0x080105a4
 800d338:	080105e4 	.word	0x080105e4
 800d33c:	08010614 	.word	0x08010614
 800d340:	08010648 	.word	0x08010648
 800d344:	0801066c 	.word	0x0801066c
 800d348:	08010678 	.word	0x08010678
 800d34c:	080106a8 	.word	0x080106a8
 800d350:	080106c8 	.word	0x080106c8
 800d354:	08010704 	.word	0x08010704
 800d358:	200004dc 	.word	0x200004dc
 800d35c:	08010730 	.word	0x08010730
 800d360:	08010770 	.word	0x08010770
 800d364:	0001b207 	.word	0x0001b207
 800d368:	080107a0 	.word	0x080107a0
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_authentication_requirement command\n");
 800d36c:	480e      	ldr	r0, [pc, #56]	@ (800d3a8 <Ble_Hci_Gap_Gatt_Init+0x34c>)
 800d36e:	f001 f949 	bl	800e604 <puts>
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 800d372:	4b0e      	ldr	r3, [pc, #56]	@ (800d3ac <Ble_Hci_Gap_Gatt_Init+0x350>)
 800d374:	789b      	ldrb	r3, [r3, #2]
 800d376:	2b00      	cmp	r3, #0
 800d378:	d00f      	beq.n	800d39a <Ble_Hci_Gap_Gatt_Init+0x33e>
  {
    ret = aci_gap_configure_whitelist();
 800d37a:	f7fc fc0d 	bl	8009b98 <aci_gap_configure_filter_accept_list>
 800d37e:	4603      	mov	r3, r0
 800d380:	75fb      	strb	r3, [r7, #23]
    if (ret != BLE_STATUS_SUCCESS)
 800d382:	7dfb      	ldrb	r3, [r7, #23]
 800d384:	2b00      	cmp	r3, #0
 800d386:	d005      	beq.n	800d394 <Ble_Hci_Gap_Gatt_Init+0x338>
    {
      APP_DBG_MSG("  Fail   : aci_gap_configure_whitelist command, result: 0x%x \n", ret);
 800d388:	7dfb      	ldrb	r3, [r7, #23]
 800d38a:	4619      	mov	r1, r3
 800d38c:	4808      	ldr	r0, [pc, #32]	@ (800d3b0 <Ble_Hci_Gap_Gatt_Init+0x354>)
 800d38e:	f001 f8c9 	bl	800e524 <iprintf>
 800d392:	e002      	b.n	800d39a <Ble_Hci_Gap_Gatt_Init+0x33e>
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
 800d394:	4807      	ldr	r0, [pc, #28]	@ (800d3b4 <Ble_Hci_Gap_Gatt_Init+0x358>)
 800d396:	f001 f935 	bl	800e604 <puts>
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
 800d39a:	4807      	ldr	r0, [pc, #28]	@ (800d3b8 <Ble_Hci_Gap_Gatt_Init+0x35c>)
 800d39c:	f001 f8c2 	bl	800e524 <iprintf>
}
 800d3a0:	bf00      	nop
 800d3a2:	371c      	adds	r7, #28
 800d3a4:	46bd      	mov	sp, r7
 800d3a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d3a8:	080107ec 	.word	0x080107ec
 800d3ac:	200004dc 	.word	0x200004dc
 800d3b0:	08010828 	.word	0x08010828
 800d3b4:	08010868 	.word	0x08010868
 800d3b8:	08010898 	.word	0x08010898

0800d3bc <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 800d3bc:	b580      	push	{r7, lr}
 800d3be:	b08c      	sub	sp, #48	@ 0x30
 800d3c0:	af08      	add	r7, sp, #32
 800d3c2:	4603      	mov	r3, r0
 800d3c4:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800d3c6:	2392      	movs	r3, #146	@ 0x92
 800d3c8:	72fb      	strb	r3, [r7, #11]
  uint16_t Min_Inter, Max_Inter;

  if (NewStatus == APP_BLE_FAST_ADV)
 800d3ca:	79fb      	ldrb	r3, [r7, #7]
 800d3cc:	2b01      	cmp	r3, #1
 800d3ce:	d106      	bne.n	800d3de <Adv_Request+0x22>
  {
    Min_Inter = AdvIntervalMin;
 800d3d0:	4b41      	ldr	r3, [pc, #260]	@ (800d4d8 <Adv_Request+0x11c>)
 800d3d2:	881b      	ldrh	r3, [r3, #0]
 800d3d4:	81fb      	strh	r3, [r7, #14]
    Max_Inter = AdvIntervalMax;
 800d3d6:	4b41      	ldr	r3, [pc, #260]	@ (800d4dc <Adv_Request+0x120>)
 800d3d8:	881b      	ldrh	r3, [r3, #0]
 800d3da:	81bb      	strh	r3, [r7, #12]
 800d3dc:	e005      	b.n	800d3ea <Adv_Request+0x2e>
  }
  else
  {
    Min_Inter = CFG_LP_CONN_ADV_INTERVAL_MIN;
 800d3de:	f44f 63c8 	mov.w	r3, #1600	@ 0x640
 800d3e2:	81fb      	strh	r3, [r7, #14]
    Max_Inter = CFG_LP_CONN_ADV_INTERVAL_MAX;
 800d3e4:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 800d3e8:	81bb      	strh	r3, [r7, #12]

  /**
   * Stop the timer, it will be restarted for a new shot
   * It does not hurt if the timer was not running
   */
  HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 800d3ea:	4b3d      	ldr	r3, [pc, #244]	@ (800d4e0 <Adv_Request+0x124>)
 800d3ec:	f893 3085 	ldrb.w	r3, [r3, #133]	@ 0x85
 800d3f0:	4618      	mov	r0, r3
 800d3f2:	f7f4 fe3b 	bl	800206c <HW_TS_Stop>

  if ((NewStatus == APP_BLE_LP_ADV)
 800d3f6:	79fb      	ldrb	r3, [r7, #7]
 800d3f8:	2b02      	cmp	r3, #2
 800d3fa:	d119      	bne.n	800d430 <Adv_Request+0x74>
      && ((BleApplicationContext.Device_Connection_Status == APP_BLE_FAST_ADV)
 800d3fc:	4b38      	ldr	r3, [pc, #224]	@ (800d4e0 <Adv_Request+0x124>)
 800d3fe:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d402:	2b01      	cmp	r3, #1
 800d404:	d004      	beq.n	800d410 <Adv_Request+0x54>
          || (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_ADV)))
 800d406:	4b36      	ldr	r3, [pc, #216]	@ (800d4e0 <Adv_Request+0x124>)
 800d408:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d40c:	2b02      	cmp	r3, #2
 800d40e:	d10f      	bne.n	800d430 <Adv_Request+0x74>
  {
    /* Connection in ADVERTISE mode have to stop the current advertising */
    ret = aci_gap_set_non_discoverable();
 800d410:	f7fc f806 	bl	8009420 <aci_gap_set_non_discoverable>
 800d414:	4603      	mov	r3, r0
 800d416:	72fb      	strb	r3, [r7, #11]
    if (ret != BLE_STATUS_SUCCESS)
 800d418:	7afb      	ldrb	r3, [r7, #11]
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d005      	beq.n	800d42a <Adv_Request+0x6e>
    {
      APP_DBG_MSG("==>> aci_gap_set_non_discoverable - Stop Advertising Failed , result: %d \n", ret);
 800d41e:	7afb      	ldrb	r3, [r7, #11]
 800d420:	4619      	mov	r1, r3
 800d422:	4830      	ldr	r0, [pc, #192]	@ (800d4e4 <Adv_Request+0x128>)
 800d424:	f001 f87e 	bl	800e524 <iprintf>
 800d428:	e002      	b.n	800d430 <Adv_Request+0x74>
    }
    else
    {
      APP_DBG_MSG("==>> aci_gap_set_non_discoverable - Successfully Stopped Advertising \n");
 800d42a:	482f      	ldr	r0, [pc, #188]	@ (800d4e8 <Adv_Request+0x12c>)
 800d42c:	f001 f8ea 	bl	800e604 <puts>
    }
  }

  BleApplicationContext.Device_Connection_Status = NewStatus;
 800d430:	4a2b      	ldr	r2, [pc, #172]	@ (800d4e0 <Adv_Request+0x124>)
 800d432:	79fb      	ldrb	r3, [r7, #7]
 800d434:	f882 3084 	strb.w	r3, [r2, #132]	@ 0x84
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_IND,
 800d438:	4b29      	ldr	r3, [pc, #164]	@ (800d4e0 <Adv_Request+0x124>)
 800d43a:	7e1b      	ldrb	r3, [r3, #24]
 800d43c:	89ba      	ldrh	r2, [r7, #12]
 800d43e:	89f9      	ldrh	r1, [r7, #14]
 800d440:	2000      	movs	r0, #0
 800d442:	9006      	str	r0, [sp, #24]
 800d444:	2000      	movs	r0, #0
 800d446:	9005      	str	r0, [sp, #20]
 800d448:	4828      	ldr	r0, [pc, #160]	@ (800d4ec <Adv_Request+0x130>)
 800d44a:	9004      	str	r0, [sp, #16]
 800d44c:	9303      	str	r3, [sp, #12]
 800d44e:	4b28      	ldr	r3, [pc, #160]	@ (800d4f0 <Adv_Request+0x134>)
 800d450:	9302      	str	r3, [sp, #8]
 800d452:	230a      	movs	r3, #10
 800d454:	9301      	str	r3, [sp, #4]
 800d456:	2300      	movs	r3, #0
 800d458:	9300      	str	r3, [sp, #0]
 800d45a:	2300      	movs	r3, #0
 800d45c:	2000      	movs	r0, #0
 800d45e:	f7fc f803 	bl	8009468 <aci_gap_set_discoverable>
 800d462:	4603      	mov	r3, r0
 800d464:	72fb      	strb	r3, [r7, #11]
                                 (uint8_t*) &a_LocalName,
                                 BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen,
                                 BleApplicationContext.BleApplicationContext_legacy.advtServUUID,
                                 0,
                                 0);
  if (ret != BLE_STATUS_SUCCESS)
 800d466:	7afb      	ldrb	r3, [r7, #11]
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d005      	beq.n	800d478 <Adv_Request+0xbc>
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - fail, result: 0x%x \n", ret);
 800d46c:	7afb      	ldrb	r3, [r7, #11]
 800d46e:	4619      	mov	r1, r3
 800d470:	4820      	ldr	r0, [pc, #128]	@ (800d4f4 <Adv_Request+0x138>)
 800d472:	f001 f857 	bl	800e524 <iprintf>
 800d476:	e002      	b.n	800d47e <Adv_Request+0xc2>
  }
  else
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - Success\n");
 800d478:	481f      	ldr	r0, [pc, #124]	@ (800d4f8 <Adv_Request+0x13c>)
 800d47a:	f001 f8c3 	bl	800e604 <puts>
  }

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_ManufData), (uint8_t*) a_ManufData);
 800d47e:	491f      	ldr	r1, [pc, #124]	@ (800d4fc <Adv_Request+0x140>)
 800d480:	200e      	movs	r0, #14
 800d482:	f7fc fb17 	bl	8009ab4 <aci_gap_update_adv_data>
 800d486:	4603      	mov	r3, r0
 800d488:	72fb      	strb	r3, [r7, #11]
  if (ret != BLE_STATUS_SUCCESS)
 800d48a:	7afb      	ldrb	r3, [r7, #11]
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d00e      	beq.n	800d4ae <Adv_Request+0xf2>
  {
    if (NewStatus == APP_BLE_FAST_ADV)
 800d490:	79fb      	ldrb	r3, [r7, #7]
 800d492:	2b01      	cmp	r3, #1
 800d494:	d105      	bne.n	800d4a2 <Adv_Request+0xe6>
    {
      APP_DBG_MSG("==>> Start Fast Advertising Failed , result: %d \n\r", ret);
 800d496:	7afb      	ldrb	r3, [r7, #11]
 800d498:	4619      	mov	r1, r3
 800d49a:	4819      	ldr	r0, [pc, #100]	@ (800d500 <Adv_Request+0x144>)
 800d49c:	f001 f842 	bl	800e524 <iprintf>
    {
      APP_DBG_MSG("==>> Success: Start Low Power Advertising \n\r");
    }
  }

  return;
 800d4a0:	e017      	b.n	800d4d2 <Adv_Request+0x116>
      APP_DBG_MSG("==>> Start Low Power Advertising Failed , result: %d \n\r", ret);
 800d4a2:	7afb      	ldrb	r3, [r7, #11]
 800d4a4:	4619      	mov	r1, r3
 800d4a6:	4817      	ldr	r0, [pc, #92]	@ (800d504 <Adv_Request+0x148>)
 800d4a8:	f001 f83c 	bl	800e524 <iprintf>
  return;
 800d4ac:	e011      	b.n	800d4d2 <Adv_Request+0x116>
    if (NewStatus == APP_BLE_FAST_ADV)
 800d4ae:	79fb      	ldrb	r3, [r7, #7]
 800d4b0:	2b01      	cmp	r3, #1
 800d4b2:	d10a      	bne.n	800d4ca <Adv_Request+0x10e>
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
 800d4b4:	4814      	ldr	r0, [pc, #80]	@ (800d508 <Adv_Request+0x14c>)
 800d4b6:	f001 f835 	bl	800e524 <iprintf>
      HW_TS_Start(BleApplicationContext.Advertising_mgr_timer_Id, INITIAL_ADV_TIMEOUT);
 800d4ba:	4b09      	ldr	r3, [pc, #36]	@ (800d4e0 <Adv_Request+0x124>)
 800d4bc:	f893 3085 	ldrb.w	r3, [r3, #133]	@ 0x85
 800d4c0:	4912      	ldr	r1, [pc, #72]	@ (800d50c <Adv_Request+0x150>)
 800d4c2:	4618      	mov	r0, r3
 800d4c4:	f7f4 fe56 	bl	8002174 <HW_TS_Start>
  return;
 800d4c8:	e003      	b.n	800d4d2 <Adv_Request+0x116>
      APP_DBG_MSG("==>> Success: Start Low Power Advertising \n\r");
 800d4ca:	4811      	ldr	r0, [pc, #68]	@ (800d510 <Adv_Request+0x154>)
 800d4cc:	f001 f82a 	bl	800e524 <iprintf>
  return;
 800d4d0:	bf00      	nop
}
 800d4d2:	3710      	adds	r7, #16
 800d4d4:	46bd      	mov	sp, r7
 800d4d6:	bd80      	pop	{r7, pc}
 800d4d8:	20000570 	.word	0x20000570
 800d4dc:	20000572 	.word	0x20000572
 800d4e0:	200004dc 	.word	0x200004dc
 800d4e4:	080108c4 	.word	0x080108c4
 800d4e8:	08010910 	.word	0x08010910
 800d4ec:	200004f5 	.word	0x200004f5
 800d4f0:	08010d50 	.word	0x08010d50
 800d4f4:	08010958 	.word	0x08010958
 800d4f8:	08010990 	.word	0x08010990
 800d4fc:	20000014 	.word	0x20000014
 800d500:	080109b8 	.word	0x080109b8
 800d504:	080109ec 	.word	0x080109ec
 800d508:	08010a24 	.word	0x08010a24
 800d50c:	0001e046 	.word	0x0001e046
 800d510:	08010a4c 	.word	0x08010a4c

0800d514 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 800d514:	b580      	push	{r7, lr}
 800d516:	b086      	sub	sp, #24
 800d518:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 800d51a:	f7fe fe17 	bl	800c14c <LL_FLASH_GetUDN>
 800d51e:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 800d520:	693b      	ldr	r3, [r7, #16]
 800d522:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d526:	d023      	beq.n	800d570 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 800d528:	f7fe fe28 	bl	800c17c <LL_FLASH_GetSTCompanyID>
 800d52c:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 800d52e:	f7fe fe19 	bl	800c164 <LL_FLASH_GetDeviceID>
 800d532:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 800d534:	693b      	ldr	r3, [r7, #16]
 800d536:	b2da      	uxtb	r2, r3
 800d538:	4b16      	ldr	r3, [pc, #88]	@ (800d594 <BleGetBdAddress+0x80>)
 800d53a:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 800d53c:	693b      	ldr	r3, [r7, #16]
 800d53e:	0a1b      	lsrs	r3, r3, #8
 800d540:	b2da      	uxtb	r2, r3
 800d542:	4b14      	ldr	r3, [pc, #80]	@ (800d594 <BleGetBdAddress+0x80>)
 800d544:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	b2da      	uxtb	r2, r3
 800d54a:	4b12      	ldr	r3, [pc, #72]	@ (800d594 <BleGetBdAddress+0x80>)
 800d54c:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 800d54e:	68bb      	ldr	r3, [r7, #8]
 800d550:	b2da      	uxtb	r2, r3
 800d552:	4b10      	ldr	r3, [pc, #64]	@ (800d594 <BleGetBdAddress+0x80>)
 800d554:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 800d556:	68bb      	ldr	r3, [r7, #8]
 800d558:	0a1b      	lsrs	r3, r3, #8
 800d55a:	b2da      	uxtb	r2, r3
 800d55c:	4b0d      	ldr	r3, [pc, #52]	@ (800d594 <BleGetBdAddress+0x80>)
 800d55e:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 800d560:	68bb      	ldr	r3, [r7, #8]
 800d562:	0c1b      	lsrs	r3, r3, #16
 800d564:	b2da      	uxtb	r2, r3
 800d566:	4b0b      	ldr	r3, [pc, #44]	@ (800d594 <BleGetBdAddress+0x80>)
 800d568:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 800d56a:	4b0a      	ldr	r3, [pc, #40]	@ (800d594 <BleGetBdAddress+0x80>)
 800d56c:	617b      	str	r3, [r7, #20]
 800d56e:	e00b      	b.n	800d588 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 800d570:	2000      	movs	r0, #0
 800d572:	f7fe f93b 	bl	800b7ec <OTP_Read>
 800d576:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d002      	beq.n	800d584 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	617b      	str	r3, [r7, #20]
 800d582:	e001      	b.n	800d588 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 800d584:	4b04      	ldr	r3, [pc, #16]	@ (800d598 <BleGetBdAddress+0x84>)
 800d586:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 800d588:	697b      	ldr	r3, [r7, #20]
}
 800d58a:	4618      	mov	r0, r3
 800d58c:	3718      	adds	r7, #24
 800d58e:	46bd      	mov	sp, r7
 800d590:	bd80      	pop	{r7, pc}
 800d592:	bf00      	nop
 800d594:	200004d4 	.word	0x200004d4
 800d598:	08010d28 	.word	0x08010d28

0800d59c <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR P2P SERVER
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 800d59c:	b580      	push	{r7, lr}
 800d59e:	b082      	sub	sp, #8
 800d5a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 800d5a2:	4b10      	ldr	r3, [pc, #64]	@ (800d5e4 <Adv_Cancel+0x48>)
 800d5a4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d5a8:	2b05      	cmp	r3, #5
 800d5aa:	d017      	beq.n	800d5dc <Adv_Cancel+0x40>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800d5ac:	2392      	movs	r3, #146	@ 0x92
 800d5ae:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 800d5b0:	f7fb ff36 	bl	8009420 <aci_gap_set_non_discoverable>
 800d5b4:	4603      	mov	r3, r0
 800d5b6:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800d5b8:	4b0a      	ldr	r3, [pc, #40]	@ (800d5e4 <Adv_Cancel+0x48>)
 800d5ba:	2200      	movs	r2, #0
 800d5bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
    if (ret != BLE_STATUS_SUCCESS)
 800d5c0:	79fb      	ldrb	r3, [r7, #7]
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d003      	beq.n	800d5ce <Adv_Cancel+0x32>
    {
      APP_DBG_MSG("** STOP ADVERTISING **  Failed \r\n\r");
 800d5c6:	4808      	ldr	r0, [pc, #32]	@ (800d5e8 <Adv_Cancel+0x4c>)
 800d5c8:	f000 ffac 	bl	800e524 <iprintf>

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 800d5cc:	e006      	b.n	800d5dc <Adv_Cancel+0x40>
      APP_DBG_MSG("  \r\n\r");
 800d5ce:	4807      	ldr	r0, [pc, #28]	@ (800d5ec <Adv_Cancel+0x50>)
 800d5d0:	f000 ffa8 	bl	800e524 <iprintf>
      APP_DBG_MSG("** STOP ADVERTISING **  \r\n\r");
 800d5d4:	4806      	ldr	r0, [pc, #24]	@ (800d5f0 <Adv_Cancel+0x54>)
 800d5d6:	f000 ffa5 	bl	800e524 <iprintf>
  return;
 800d5da:	bf00      	nop
 800d5dc:	bf00      	nop
}
 800d5de:	3708      	adds	r7, #8
 800d5e0:	46bd      	mov	sp, r7
 800d5e2:	bd80      	pop	{r7, pc}
 800d5e4:	200004dc 	.word	0x200004dc
 800d5e8:	08010a7c 	.word	0x08010a7c
 800d5ec:	08010aa0 	.word	0x08010aa0
 800d5f0:	08010aa8 	.word	0x08010aa8

0800d5f4 <Adv_Cancel_Req>:

static void Adv_Cancel_Req(void)
{
 800d5f4:	b580      	push	{r7, lr}
 800d5f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_Req_1 */

  /* USER CODE END Adv_Cancel_Req_1 */

  UTIL_SEQ_SetTask(1 << CFG_TASK_ADV_CANCEL_ID, CFG_SCH_PRIO_0);
 800d5f8:	2100      	movs	r1, #0
 800d5fa:	2001      	movs	r0, #1
 800d5fc:	f000 fdd4 	bl	800e1a8 <UTIL_SEQ_SetTask>

  /* USER CODE BEGIN Adv_Cancel_Req_2 */

  /* USER CODE END Adv_Cancel_Req_2 */

  return;
 800d600:	bf00      	nop
}
 800d602:	bd80      	pop	{r7, pc}

0800d604 <Switch_OFF_GPIO>:

static void Switch_OFF_GPIO()
{
 800d604:	b480      	push	{r7}
 800d606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Switch_OFF_GPIO */

  /* USER CODE END Switch_OFF_GPIO */
}
 800d608:	bf00      	nop
 800d60a:	46bd      	mov	sp, r7
 800d60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d610:	4770      	bx	lr

0800d612 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 800d612:	b580      	push	{r7, lr}
 800d614:	b082      	sub	sp, #8
 800d616:	af00      	add	r7, sp, #0
 800d618:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800d61a:	2100      	movs	r1, #0
 800d61c:	2002      	movs	r0, #2
 800d61e:	f000 fdc3 	bl	800e1a8 <UTIL_SEQ_SetTask>

  return;
 800d622:	bf00      	nop
}
 800d624:	3708      	adds	r7, #8
 800d626:	46bd      	mov	sp, r7
 800d628:	bd80      	pop	{r7, pc}

0800d62a <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 800d62a:	b580      	push	{r7, lr}
 800d62c:	b082      	sub	sp, #8
 800d62e:	af00      	add	r7, sp, #0
 800d630:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800d632:	2001      	movs	r0, #1
 800d634:	f000 fe24 	bl	800e280 <UTIL_SEQ_SetEvt>

  return;
 800d638:	bf00      	nop
}
 800d63a:	3708      	adds	r7, #8
 800d63c:	46bd      	mov	sp, r7
 800d63e:	bd80      	pop	{r7, pc}

0800d640 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 800d640:	b580      	push	{r7, lr}
 800d642:	b082      	sub	sp, #8
 800d644:	af00      	add	r7, sp, #0
 800d646:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800d648:	2001      	movs	r0, #1
 800d64a:	f000 fe39 	bl	800e2c0 <UTIL_SEQ_WaitEvt>

  return;
 800d64e:	bf00      	nop
}
 800d650:	3708      	adds	r7, #8
 800d652:	46bd      	mov	sp, r7
 800d654:	bd80      	pop	{r7, pc}

0800d656 <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 800d656:	b580      	push	{r7, lr}
 800d658:	b084      	sub	sp, #16
 800d65a:	af00      	add	r7, sp, #0
 800d65c:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 800d662:	68fb      	ldr	r3, [r7, #12]
 800d664:	685b      	ldr	r3, [r3, #4]
 800d666:	3308      	adds	r3, #8
 800d668:	4618      	mov	r0, r3
 800d66a:	f7fd f9bd 	bl	800a9e8 <SVCCTL_UserEvtRx>
 800d66e:	4603      	mov	r3, r0
 800d670:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 800d672:	7afb      	ldrb	r3, [r7, #11]
 800d674:	2b00      	cmp	r3, #0
 800d676:	d003      	beq.n	800d680 <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	2201      	movs	r2, #1
 800d67c:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 800d67e:	e003      	b.n	800d688 <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	2200      	movs	r2, #0
 800d684:	701a      	strb	r2, [r3, #0]
  return;
 800d686:	bf00      	nop
}
 800d688:	3710      	adds	r7, #16
 800d68a:	46bd      	mov	sp, r7
 800d68c:	bd80      	pop	{r7, pc}

0800d68e <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 800d68e:	b580      	push	{r7, lr}
 800d690:	b084      	sub	sp, #16
 800d692:	af00      	add	r7, sp, #0
 800d694:	4603      	mov	r3, r0
 800d696:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 800d698:	79fb      	ldrb	r3, [r7, #7]
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d002      	beq.n	800d6a4 <BLE_StatusNot+0x16>
 800d69e:	2b01      	cmp	r3, #1
 800d6a0:	d006      	beq.n	800d6b0 <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 800d6a2:	e00b      	b.n	800d6bc <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800d6a4:	231f      	movs	r3, #31
 800d6a6:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 800d6a8:	68f8      	ldr	r0, [r7, #12]
 800d6aa:	f000 fda9 	bl	800e200 <UTIL_SEQ_PauseTask>
      break;
 800d6ae:	e005      	b.n	800d6bc <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800d6b0:	231f      	movs	r3, #31
 800d6b2:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 800d6b4:	68f8      	ldr	r0, [r7, #12]
 800d6b6:	f000 fdc3 	bl	800e240 <UTIL_SEQ_ResumeTask>
      break;
 800d6ba:	bf00      	nop
  }

  return;
 800d6bc:	bf00      	nop
}
 800d6be:	3710      	adds	r7, #16
 800d6c0:	46bd      	mov	sp, r7
 800d6c2:	bd80      	pop	{r7, pc}

0800d6c4 <Hermes_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Hermes_Event_Handler(void *Event)
{
 800d6c4:	b580      	push	{r7, lr}
 800d6c6:	b08a      	sub	sp, #40	@ 0x28
 800d6c8:	af00      	add	r7, sp, #0
 800d6ca:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_blecore_aci *blecore_evt;
  aci_gatt_attribute_modified_event_rp0    * attribute_modified;
  P2PS_STM_App_Notification_evt_t Notification;

  return_value = SVCCTL_EvtNotAck;
 800d6cc:	2300      	movs	r3, #0
 800d6ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	3301      	adds	r3, #1
 800d6d6:	623b      	str	r3, [r7, #32]

  switch(event_pckt->evt)
 800d6d8:	6a3b      	ldr	r3, [r7, #32]
 800d6da:	781b      	ldrb	r3, [r3, #0]
 800d6dc:	2bff      	cmp	r3, #255	@ 0xff
 800d6de:	d14f      	bne.n	800d780 <Hermes_Event_Handler+0xbc>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 800d6e0:	6a3b      	ldr	r3, [r7, #32]
 800d6e2:	3302      	adds	r3, #2
 800d6e4:	61fb      	str	r3, [r7, #28]
      switch(blecore_evt->ecode)
 800d6e6:	69fb      	ldr	r3, [r7, #28]
 800d6e8:	881b      	ldrh	r3, [r3, #0]
 800d6ea:	b29b      	uxth	r3, r3
 800d6ec:	461a      	mov	r2, r3
 800d6ee:	f640 4301 	movw	r3, #3073	@ 0xc01
 800d6f2:	429a      	cmp	r2, r3
 800d6f4:	d140      	bne.n	800d778 <Hermes_Event_Handler+0xb4>
      {
        case ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE:
       {
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 800d6f6:	69fb      	ldr	r3, [r7, #28]
 800d6f8:	3302      	adds	r3, #2
 800d6fa:	61bb      	str	r3, [r7, #24]
            if(attribute_modified->Attr_Handle == (BleApplicationContext.eeg_data_char_handle + 2))
 800d6fc:	69bb      	ldr	r3, [r7, #24]
 800d6fe:	885b      	ldrh	r3, [r3, #2]
 800d700:	b29b      	uxth	r3, r3
 800d702:	461a      	mov	r2, r3
 800d704:	4b22      	ldr	r3, [pc, #136]	@ (800d790 <Hermes_Event_Handler+0xcc>)
 800d706:	f8b3 3088 	ldrh.w	r3, [r3, #136]	@ 0x88
 800d70a:	3302      	adds	r3, #2
 800d70c:	429a      	cmp	r2, r3
 800d70e:	d118      	bne.n	800d742 <Hermes_Event_Handler+0x7e>
            {
              /**
               * Descriptor handle
               */
              return_value = SVCCTL_EvtAckFlowEnable;
 800d710:	2301      	movs	r3, #1
 800d712:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
              /**
               * Notify to application
               */
              if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 800d716:	69bb      	ldr	r3, [r7, #24]
 800d718:	7a1b      	ldrb	r3, [r3, #8]
 800d71a:	f003 0301 	and.w	r3, r3, #1
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d007      	beq.n	800d732 <Hermes_Event_Handler+0x6e>
              {
                Notification.P2P_Evt_Opcode = P2PS_STM__NOTIFY_ENABLED_EVT;
 800d722:	2300      	movs	r3, #0
 800d724:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 800d726:	f107 0308 	add.w	r3, r7, #8
 800d72a:	4618      	mov	r0, r3
 800d72c:	f000 f834 	bl	800d798 <P2PS_STM_App_Notification>
            		HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, attribute_modified->Attr_Data[1]!=0);
                }
            }

        }
        break;
 800d730:	e024      	b.n	800d77c <Hermes_Event_Handler+0xb8>
                Notification.P2P_Evt_Opcode = P2PS_STM_NOTIFY_DISABLED_EVT;
 800d732:	2301      	movs	r3, #1
 800d734:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 800d736:	f107 0308 	add.w	r3, r7, #8
 800d73a:	4618      	mov	r0, r3
 800d73c:	f000 f82c 	bl	800d798 <P2PS_STM_App_Notification>
        break;
 800d740:	e01c      	b.n	800d77c <Hermes_Event_Handler+0xb8>
            else if(attribute_modified->Attr_Handle == (BleApplicationContext.eeg_config_char_handle + 1))
 800d742:	69bb      	ldr	r3, [r7, #24]
 800d744:	885b      	ldrh	r3, [r3, #2]
 800d746:	b29b      	uxth	r3, r3
 800d748:	461a      	mov	r2, r3
 800d74a:	4b11      	ldr	r3, [pc, #68]	@ (800d790 <Hermes_Event_Handler+0xcc>)
 800d74c:	f8b3 3092 	ldrh.w	r3, [r3, #146]	@ 0x92
 800d750:	3301      	adds	r3, #1
 800d752:	429a      	cmp	r2, r3
 800d754:	d112      	bne.n	800d77c <Hermes_Event_Handler+0xb8>
            	if(attribute_modified->Attr_Data[0]==0x02){
 800d756:	69bb      	ldr	r3, [r7, #24]
 800d758:	7a1b      	ldrb	r3, [r3, #8]
 800d75a:	2b02      	cmp	r3, #2
 800d75c:	d10e      	bne.n	800d77c <Hermes_Event_Handler+0xb8>
            		HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, attribute_modified->Attr_Data[1]!=0);
 800d75e:	69bb      	ldr	r3, [r7, #24]
 800d760:	7a5b      	ldrb	r3, [r3, #9]
 800d762:	2b00      	cmp	r3, #0
 800d764:	bf14      	ite	ne
 800d766:	2301      	movne	r3, #1
 800d768:	2300      	moveq	r3, #0
 800d76a:	b2db      	uxtb	r3, r3
 800d76c:	461a      	mov	r2, r3
 800d76e:	2101      	movs	r1, #1
 800d770:	4808      	ldr	r0, [pc, #32]	@ (800d794 <Hermes_Event_Handler+0xd0>)
 800d772:	f7f6 fc65 	bl	8004040 <HAL_GPIO_WritePin>
        break;
 800d776:	e001      	b.n	800d77c <Hermes_Event_Handler+0xb8>

        default:
          break;
 800d778:	bf00      	nop
 800d77a:	e002      	b.n	800d782 <Hermes_Event_Handler+0xbe>
        break;
 800d77c:	bf00      	nop
      }
    }
    break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 800d77e:	e000      	b.n	800d782 <Hermes_Event_Handler+0xbe>

    default:
      break;
 800d780:	bf00      	nop
  }

  return(return_value);
 800d782:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}/* end SVCCTL_EvtAckStatus_t */
 800d786:	4618      	mov	r0, r3
 800d788:	3728      	adds	r7, #40	@ 0x28
 800d78a:	46bd      	mov	sp, r7
 800d78c:	bd80      	pop	{r7, pc}
 800d78e:	bf00      	nop
 800d790:	200004dc 	.word	0x200004dc
 800d794:	48000400 	.word	0x48000400

0800d798 <P2PS_STM_App_Notification>:
//static void P2PS_APP_LED_BUTTON_context_Init(void);
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void P2PS_STM_App_Notification(P2PS_STM_App_Notification_evt_t *pNotification)
{
 800d798:	b580      	push	{r7, lr}
 800d79a:	b082      	sub	sp, #8
 800d79c:	af00      	add	r7, sp, #0
 800d79e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_STM_App_Notification_1 */
/* USER CODE END P2PS_STM_App_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	781b      	ldrb	r3, [r3, #0]
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d002      	beq.n	800d7ae <P2PS_STM_App_Notification+0x16>
 800d7a8:	2b01      	cmp	r3, #1
 800d7aa:	d00a      	beq.n	800d7c2 <P2PS_STM_App_Notification+0x2a>

    default:
/* USER CODE BEGIN P2PS_STM_App_Notification_default */
      
/* USER CODE END P2PS_STM_App_Notification_default */
      break;
 800d7ac:	e013      	b.n	800d7d6 <P2PS_STM_App_Notification+0x3e>
      P2P_Server_App_Context.Notification_Status = 1;
 800d7ae:	4b0c      	ldr	r3, [pc, #48]	@ (800d7e0 <P2PS_STM_App_Notification+0x48>)
 800d7b0:	2201      	movs	r2, #1
 800d7b2:	701a      	strb	r2, [r3, #0]
      APP_DBG_MSG("-- P2P APPLICATION SERVER : NOTIFICATION ENABLED\n"); 
 800d7b4:	480b      	ldr	r0, [pc, #44]	@ (800d7e4 <P2PS_STM_App_Notification+0x4c>)
 800d7b6:	f000 ff25 	bl	800e604 <puts>
      APP_DBG_MSG(" \n\r");
 800d7ba:	480b      	ldr	r0, [pc, #44]	@ (800d7e8 <P2PS_STM_App_Notification+0x50>)
 800d7bc:	f000 feb2 	bl	800e524 <iprintf>
      break;
 800d7c0:	e009      	b.n	800d7d6 <P2PS_STM_App_Notification+0x3e>
      P2P_Server_App_Context.Notification_Status = 0;
 800d7c2:	4b07      	ldr	r3, [pc, #28]	@ (800d7e0 <P2PS_STM_App_Notification+0x48>)
 800d7c4:	2200      	movs	r2, #0
 800d7c6:	701a      	strb	r2, [r3, #0]
      APP_DBG_MSG("-- P2P APPLICATION SERVER : NOTIFICATION DISABLED\n");
 800d7c8:	4808      	ldr	r0, [pc, #32]	@ (800d7ec <P2PS_STM_App_Notification+0x54>)
 800d7ca:	f000 ff1b 	bl	800e604 <puts>
      APP_DBG_MSG(" \n\r");
 800d7ce:	4806      	ldr	r0, [pc, #24]	@ (800d7e8 <P2PS_STM_App_Notification+0x50>)
 800d7d0:	f000 fea8 	bl	800e524 <iprintf>
      break;
 800d7d4:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_STM_App_Notification_2 */

/* USER CODE END P2PS_STM_App_Notification_2 */
  return;
 800d7d6:	bf00      	nop
}
 800d7d8:	3708      	adds	r7, #8
 800d7da:	46bd      	mov	sp, r7
 800d7dc:	bd80      	pop	{r7, pc}
 800d7de:	bf00      	nop
 800d7e0:	200021c4 	.word	0x200021c4
 800d7e4:	08010ac4 	.word	0x08010ac4
 800d7e8:	08010af8 	.word	0x08010af8
 800d7ec:	08010afc 	.word	0x08010afc

0800d7f0 <P2PS_APP_Notification>:

void P2PS_APP_Notification(P2PS_APP_ConnHandle_Not_evt_t *pNotification)
{
 800d7f0:	b480      	push	{r7}
 800d7f2:	b083      	sub	sp, #12
 800d7f4:	af00      	add	r7, sp, #0
 800d7f6:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_APP_Notification_1 */

/* USER CODE END P2PS_APP_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	781b      	ldrb	r3, [r3, #0]
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d002      	beq.n	800d806 <P2PS_APP_Notification+0x16>
 800d800:	2b01      	cmp	r3, #1
 800d802:	d002      	beq.n	800d80a <P2PS_APP_Notification+0x1a>

    default:
/* USER CODE BEGIN P2PS_APP_Notification_default */

/* USER CODE END P2PS_APP_Notification_default */
      break;
 800d804:	e002      	b.n	800d80c <P2PS_APP_Notification+0x1c>
    break;
 800d806:	bf00      	nop
 800d808:	e000      	b.n	800d80c <P2PS_APP_Notification+0x1c>
    break;
 800d80a:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_APP_Notification_2 */

/* USER CODE END P2PS_APP_Notification_2 */
  return;
 800d80c:	bf00      	nop
}
 800d80e:	370c      	adds	r7, #12
 800d810:	46bd      	mov	sp, r7
 800d812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d816:	4770      	bx	lr

0800d818 <P2PS_APP_Init>:

void P2PS_APP_Init(void)
{
 800d818:	b580      	push	{r7, lr}
 800d81a:	af00      	add	r7, sp, #0
/* USER CODE BEGIN P2PS_APP_Init */


#ifdef BLE_BUTTON_EVENTS
	UTIL_SEQ_RegTask( 1<< CFG_TASK_SWA_BUTTON_PUSHED_ID, UTIL_SEQ_RFU, SWA_Send_Notification ); //
 800d81c:	4a09      	ldr	r2, [pc, #36]	@ (800d844 <P2PS_APP_Init+0x2c>)
 800d81e:	2100      	movs	r1, #0
 800d820:	2004      	movs	r0, #4
 800d822:	f000 fc9f 	bl	800e164 <UTIL_SEQ_RegTask>
	UTIL_SEQ_RegTask( 1<< CFG_TASK_SWB_BUTTON_PUSHED_ID, UTIL_SEQ_RFU, SWB_Send_Notification ); //
 800d826:	4a08      	ldr	r2, [pc, #32]	@ (800d848 <P2PS_APP_Init+0x30>)
 800d828:	2100      	movs	r1, #0
 800d82a:	2008      	movs	r0, #8
 800d82c:	f000 fc9a 	bl	800e164 <UTIL_SEQ_RegTask>
	UTIL_SEQ_RegTask( 1<< CFG_TASK_IMU_SAMPLE_ID, UTIL_SEQ_RFU, get_and_send_motion_samples ); //
 800d830:	4a06      	ldr	r2, [pc, #24]	@ (800d84c <P2PS_APP_Init+0x34>)
 800d832:	2100      	movs	r1, #0
 800d834:	2010      	movs	r0, #16
 800d836:	f000 fc95 	bl	800e164 <UTIL_SEQ_RegTask>
//(FS) Need to attach whatever user function here

  /**
   * Initialize LedButton Service
   */
  P2P_Server_App_Context.Notification_Status=0; 
 800d83a:	4b05      	ldr	r3, [pc, #20]	@ (800d850 <P2PS_APP_Init+0x38>)
 800d83c:	2200      	movs	r2, #0
 800d83e:	701a      	strb	r2, [r3, #0]


  //P2PS_APP_LED_BUTTON_context_Init();
/* USER CODE END P2PS_APP_Init */
  return;
 800d840:	bf00      	nop
}
 800d842:	bd80      	pop	{r7, pc}
 800d844:	0800d875 	.word	0x0800d875
 800d848:	0800d8a1 	.word	0x0800d8a1
 800d84c:	0800d8cd 	.word	0x0800d8cd
 800d850:	200021c4 	.word	0x200021c4

0800d854 <APP_SWA_Button_Action>:

}
#endif

void APP_SWA_Button_Action(void)
{
 800d854:	b580      	push	{r7, lr}
 800d856:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetTask( 1<<CFG_TASK_SWA_BUTTON_PUSHED_ID, CFG_SCH_PRIO_0);
 800d858:	2100      	movs	r1, #0
 800d85a:	2004      	movs	r0, #4
 800d85c:	f000 fca4 	bl	800e1a8 <UTIL_SEQ_SetTask>
  return;
 800d860:	bf00      	nop
}
 800d862:	bd80      	pop	{r7, pc}

0800d864 <APP_SWB_Button_Action>:

void APP_SWB_Button_Action(void)
{
 800d864:	b580      	push	{r7, lr}
 800d866:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetTask( 1<<CFG_TASK_SWB_BUTTON_PUSHED_ID, CFG_SCH_PRIO_0);
 800d868:	2100      	movs	r1, #0
 800d86a:	2008      	movs	r0, #8
 800d86c:	f000 fc9c 	bl	800e1a8 <UTIL_SEQ_SetTask>
  return;
 800d870:	bf00      	nop
}
 800d872:	bd80      	pop	{r7, pc}

0800d874 <SWA_Send_Notification>:
	// insert local button management here
}


void SWA_Send_Notification(void)
{
 800d874:	b580      	push	{r7, lr}
 800d876:	af00      	add	r7, sp, #0
	current_event_payload.event_type = EVENT_TYPE_BUTTON_PRESSED;
 800d878:	4b07      	ldr	r3, [pc, #28]	@ (800d898 <SWA_Send_Notification+0x24>)
 800d87a:	2201      	movs	r2, #1
 800d87c:	701a      	strb	r2, [r3, #0]
	current_event_payload.source_id = BUTTON_ID_A;
 800d87e:	4b06      	ldr	r3, [pc, #24]	@ (800d898 <SWA_Send_Notification+0x24>)
 800d880:	2201      	movs	r2, #1
 800d882:	705a      	strb	r2, [r3, #1]
	current_event_payload.packet_id = packet_counter;
 800d884:	4b05      	ldr	r3, [pc, #20]	@ (800d89c <SWA_Send_Notification+0x28>)
 800d886:	781a      	ldrb	r2, [r3, #0]
 800d888:	4b03      	ldr	r3, [pc, #12]	@ (800d898 <SWA_Send_Notification+0x24>)
 800d88a:	709a      	strb	r2, [r3, #2]

	APP_BLE_Send_Event_Notification(&current_event_payload);
 800d88c:	4802      	ldr	r0, [pc, #8]	@ (800d898 <SWA_Send_Notification+0x24>)
 800d88e:	f7ff fb6d 	bl	800cf6c <APP_BLE_Send_Event_Notification>
}
 800d892:	bf00      	nop
 800d894:	bd80      	pop	{r7, pc}
 800d896:	bf00      	nop
 800d898:	200021c0 	.word	0x200021c0
 800d89c:	200021b8 	.word	0x200021b8

0800d8a0 <SWB_Send_Notification>:


void SWB_Send_Notification(void)
{
 800d8a0:	b480      	push	{r7}
 800d8a2:	af00      	add	r7, sp, #0
	current_event_payload.event_type = EVENT_TYPE_BUTTON_PRESSED;
 800d8a4:	4b07      	ldr	r3, [pc, #28]	@ (800d8c4 <SWB_Send_Notification+0x24>)
 800d8a6:	2201      	movs	r2, #1
 800d8a8:	701a      	strb	r2, [r3, #0]
	current_event_payload.source_id = BUTTON_ID_B;
 800d8aa:	4b06      	ldr	r3, [pc, #24]	@ (800d8c4 <SWB_Send_Notification+0x24>)
 800d8ac:	2202      	movs	r2, #2
 800d8ae:	705a      	strb	r2, [r3, #1]
	current_event_payload.packet_id = packet_counter;
 800d8b0:	4b05      	ldr	r3, [pc, #20]	@ (800d8c8 <SWB_Send_Notification+0x28>)
 800d8b2:	781a      	ldrb	r2, [r3, #0]
 800d8b4:	4b03      	ldr	r3, [pc, #12]	@ (800d8c4 <SWB_Send_Notification+0x24>)
 800d8b6:	709a      	strb	r2, [r3, #2]

	//APP_BLE_Send_Event_Notification(&current_event_payload);
}
 800d8b8:	bf00      	nop
 800d8ba:	46bd      	mov	sp, r7
 800d8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8c0:	4770      	bx	lr
 800d8c2:	bf00      	nop
 800d8c4:	200021c0 	.word	0x200021c0
 800d8c8:	200021b8 	.word	0x200021b8

0800d8cc <get_and_send_motion_samples>:

void get_and_send_motion_samples(void){
 800d8cc:	b580      	push	{r7, lr}
 800d8ce:	af00      	add	r7, sp, #0
	get_and_send_imu_sample();
 800d8d0:	f000 f804 	bl	800d8dc <get_and_send_imu_sample>
	get_and_send_compass_sample();
 800d8d4:	f000 f818 	bl	800d908 <get_and_send_compass_sample>
}
 800d8d8:	bf00      	nop
 800d8da:	bd80      	pop	{r7, pc}

0800d8dc <get_and_send_imu_sample>:

void get_and_send_imu_sample(void){
 800d8dc:	b580      	push	{r7, lr}
 800d8de:	b082      	sub	sp, #8
 800d8e0:	af00      	add	r7, sp, #0

	if(P2P_Server_App_Context.Notification_Status==1){
 800d8e2:	4b08      	ldr	r3, [pc, #32]	@ (800d904 <get_and_send_imu_sample+0x28>)
 800d8e4:	781b      	ldrb	r3, [r3, #0]
 800d8e6:	2b01      	cmp	r3, #1
 800d8e8:	d108      	bne.n	800d8fc <get_and_send_imu_sample+0x20>
		int16_t* imu_sample = ism330_ReadIMU();
 800d8ea:	f7f4 fd85 	bl	80023f8 <ism330_ReadIMU>
 800d8ee:	6078      	str	r0, [r7, #4]
		APP_BLE_Send_IMU_Notification((uint8_t*)imu_sample, (uint8_t*)&imu_sample[3]);
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	3306      	adds	r3, #6
 800d8f4:	4619      	mov	r1, r3
 800d8f6:	6878      	ldr	r0, [r7, #4]
 800d8f8:	f7ff fb54 	bl	800cfa4 <APP_BLE_Send_IMU_Notification>
	}
}
 800d8fc:	bf00      	nop
 800d8fe:	3708      	adds	r7, #8
 800d900:	46bd      	mov	sp, r7
 800d902:	bd80      	pop	{r7, pc}
 800d904:	200021c4 	.word	0x200021c4

0800d908 <get_and_send_compass_sample>:


void get_and_send_compass_sample(void){
 800d908:	b580      	push	{r7, lr}
 800d90a:	b082      	sub	sp, #8
 800d90c:	af00      	add	r7, sp, #0

	if(P2P_Server_App_Context.Notification_Status==1){
 800d90e:	4b07      	ldr	r3, [pc, #28]	@ (800d92c <get_and_send_compass_sample+0x24>)
 800d910:	781b      	ldrb	r3, [r3, #0]
 800d912:	2b01      	cmp	r3, #1
 800d914:	d105      	bne.n	800d922 <get_and_send_compass_sample+0x1a>
		int16_t* compass_sample = lis3mdl_ReadMag();
 800d916:	f7f4 fe0f 	bl	8002538 <lis3mdl_ReadMag>
 800d91a:	6078      	str	r0, [r7, #4]
		APP_BLE_Send_Compass_Notification((uint8_t*)compass_sample);
 800d91c:	6878      	ldr	r0, [r7, #4]
 800d91e:	f7ff fb6b 	bl	800cff8 <APP_BLE_Send_Compass_Notification>
	}
}
 800d922:	bf00      	nop
 800d924:	3708      	adds	r7, #8
 800d926:	46bd      	mov	sp, r7
 800d928:	bd80      	pop	{r7, pc}
 800d92a:	bf00      	nop
 800d92c:	200021c4 	.word	0x200021c4

0800d930 <APP_BLE_Manage_ADS1299_event>:




void APP_BLE_Manage_ADS1299_event(void)
{
 800d930:	b580      	push	{r7, lr}
 800d932:	af00      	add	r7, sp, #0
	if(P2P_Server_App_Context.Notification_Status){
 800d934:	4b38      	ldr	r3, [pc, #224]	@ (800da18 <APP_BLE_Manage_ADS1299_event+0xe8>)
 800d936:	781b      	ldrb	r3, [r3, #0]
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d06a      	beq.n	800da12 <APP_BLE_Manage_ADS1299_event+0xe2>

		if(sample_index==0){
 800d93c:	4b37      	ldr	r3, [pc, #220]	@ (800da1c <APP_BLE_Manage_ADS1299_event+0xec>)
 800d93e:	781b      	ldrb	r3, [r3, #0]
 800d940:	2b00      	cmp	r3, #0
 800d942:	d10d      	bne.n	800d960 <APP_BLE_Manage_ADS1299_event+0x30>
			buffered_packets_array[buffer_index][0] = packet_counter;
 800d944:	4b36      	ldr	r3, [pc, #216]	@ (800da20 <APP_BLE_Manage_ADS1299_event+0xf0>)
 800d946:	781b      	ldrb	r3, [r3, #0]
 800d948:	461a      	mov	r2, r3
 800d94a:	4b36      	ldr	r3, [pc, #216]	@ (800da24 <APP_BLE_Manage_ADS1299_event+0xf4>)
 800d94c:	7818      	ldrb	r0, [r3, #0]
 800d94e:	4936      	ldr	r1, [pc, #216]	@ (800da28 <APP_BLE_Manage_ADS1299_event+0xf8>)
 800d950:	4613      	mov	r3, r2
 800d952:	011b      	lsls	r3, r3, #4
 800d954:	1a9b      	subs	r3, r3, r2
 800d956:	011b      	lsls	r3, r3, #4
 800d958:	4413      	add	r3, r2
 800d95a:	440b      	add	r3, r1
 800d95c:	4602      	mov	r2, r0
 800d95e:	701a      	strb	r2, [r3, #0]
		}

		ADS1299_ReadSamples(statusBuffer, &buffered_packets_array[buffer_index][sample_index*SAMPLE_SIZE+1]);
 800d960:	4b2f      	ldr	r3, [pc, #188]	@ (800da20 <APP_BLE_Manage_ADS1299_event+0xf0>)
 800d962:	781b      	ldrb	r3, [r3, #0]
 800d964:	461a      	mov	r2, r3
 800d966:	4b2d      	ldr	r3, [pc, #180]	@ (800da1c <APP_BLE_Manage_ADS1299_event+0xec>)
 800d968:	781b      	ldrb	r3, [r3, #0]
 800d96a:	4619      	mov	r1, r3
 800d96c:	460b      	mov	r3, r1
 800d96e:	005b      	lsls	r3, r3, #1
 800d970:	440b      	add	r3, r1
 800d972:	00db      	lsls	r3, r3, #3
 800d974:	1c59      	adds	r1, r3, #1
 800d976:	4613      	mov	r3, r2
 800d978:	011b      	lsls	r3, r3, #4
 800d97a:	1a9b      	subs	r3, r3, r2
 800d97c:	011b      	lsls	r3, r3, #4
 800d97e:	4413      	add	r3, r2
 800d980:	440b      	add	r3, r1
 800d982:	4a29      	ldr	r2, [pc, #164]	@ (800da28 <APP_BLE_Manage_ADS1299_event+0xf8>)
 800d984:	4413      	add	r3, r2
 800d986:	4619      	mov	r1, r3
 800d988:	4828      	ldr	r0, [pc, #160]	@ (800da2c <APP_BLE_Manage_ADS1299_event+0xfc>)
 800d98a:	f7f3 fa77 	bl	8000e7c <ADS1299_ReadSamples>
		sample_index++;
 800d98e:	4b23      	ldr	r3, [pc, #140]	@ (800da1c <APP_BLE_Manage_ADS1299_event+0xec>)
 800d990:	781b      	ldrb	r3, [r3, #0]
 800d992:	3301      	adds	r3, #1
 800d994:	b2da      	uxtb	r2, r3
 800d996:	4b21      	ldr	r3, [pc, #132]	@ (800da1c <APP_BLE_Manage_ADS1299_event+0xec>)
 800d998:	701a      	strb	r2, [r3, #0]

		if(sample_index >= NB_SAMPLES_PER_PACKET){
 800d99a:	4b20      	ldr	r3, [pc, #128]	@ (800da1c <APP_BLE_Manage_ADS1299_event+0xec>)
 800d99c:	781b      	ldrb	r3, [r3, #0]
 800d99e:	2b09      	cmp	r3, #9
 800d9a0:	d937      	bls.n	800da12 <APP_BLE_Manage_ADS1299_event+0xe2>
			if(APP_BLE_Send_EEGData_Notification(buffered_packets_array[buffer_index], PACKET_SIZE)!=0){
 800d9a2:	4b1f      	ldr	r3, [pc, #124]	@ (800da20 <APP_BLE_Manage_ADS1299_event+0xf0>)
 800d9a4:	781b      	ldrb	r3, [r3, #0]
 800d9a6:	461a      	mov	r2, r3
 800d9a8:	4613      	mov	r3, r2
 800d9aa:	011b      	lsls	r3, r3, #4
 800d9ac:	1a9b      	subs	r3, r3, r2
 800d9ae:	011b      	lsls	r3, r3, #4
 800d9b0:	4413      	add	r3, r2
 800d9b2:	4a1d      	ldr	r2, [pc, #116]	@ (800da28 <APP_BLE_Manage_ADS1299_event+0xf8>)
 800d9b4:	4413      	add	r3, r2
 800d9b6:	21f1      	movs	r1, #241	@ 0xf1
 800d9b8:	4618      	mov	r0, r3
 800d9ba:	f7ff fab5 	bl	800cf28 <APP_BLE_Send_EEGData_Notification>
 800d9be:	4603      	mov	r3, r0
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d004      	beq.n	800d9ce <APP_BLE_Manage_ADS1299_event+0x9e>
				HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_SET);
 800d9c4:	2201      	movs	r2, #1
 800d9c6:	2101      	movs	r1, #1
 800d9c8:	4819      	ldr	r0, [pc, #100]	@ (800da30 <APP_BLE_Manage_ADS1299_event+0x100>)
 800d9ca:	f7f6 fb39 	bl	8004040 <HAL_GPIO_WritePin>
			}

			buffer_index = (buffer_index + 1) % PACKETBUFFER_DEPTH;
 800d9ce:	4b14      	ldr	r3, [pc, #80]	@ (800da20 <APP_BLE_Manage_ADS1299_event+0xf0>)
 800d9d0:	781b      	ldrb	r3, [r3, #0]
 800d9d2:	1c5a      	adds	r2, r3, #1
 800d9d4:	4b17      	ldr	r3, [pc, #92]	@ (800da34 <APP_BLE_Manage_ADS1299_event+0x104>)
 800d9d6:	fb83 1302 	smull	r1, r3, r3, r2
 800d9da:	4413      	add	r3, r2
 800d9dc:	1119      	asrs	r1, r3, #4
 800d9de:	17d3      	asrs	r3, r2, #31
 800d9e0:	1ac9      	subs	r1, r1, r3
 800d9e2:	460b      	mov	r3, r1
 800d9e4:	011b      	lsls	r3, r3, #4
 800d9e6:	1a5b      	subs	r3, r3, r1
 800d9e8:	005b      	lsls	r3, r3, #1
 800d9ea:	1ad1      	subs	r1, r2, r3
 800d9ec:	b2ca      	uxtb	r2, r1
 800d9ee:	4b0c      	ldr	r3, [pc, #48]	@ (800da20 <APP_BLE_Manage_ADS1299_event+0xf0>)
 800d9f0:	701a      	strb	r2, [r3, #0]
			packet_counter = (packet_counter + 1) % 128;
 800d9f2:	4b0c      	ldr	r3, [pc, #48]	@ (800da24 <APP_BLE_Manage_ADS1299_event+0xf4>)
 800d9f4:	781b      	ldrb	r3, [r3, #0]
 800d9f6:	3301      	adds	r3, #1
 800d9f8:	425a      	negs	r2, r3
 800d9fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d9fe:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800da02:	bf58      	it	pl
 800da04:	4253      	negpl	r3, r2
 800da06:	b2da      	uxtb	r2, r3
 800da08:	4b06      	ldr	r3, [pc, #24]	@ (800da24 <APP_BLE_Manage_ADS1299_event+0xf4>)
 800da0a:	701a      	strb	r2, [r3, #0]
			sample_index = 0;
 800da0c:	4b03      	ldr	r3, [pc, #12]	@ (800da1c <APP_BLE_Manage_ADS1299_event+0xec>)
 800da0e:	2200      	movs	r2, #0
 800da10:	701a      	strb	r2, [r3, #0]
		}
	}
}
 800da12:	bf00      	nop
 800da14:	bd80      	pop	{r7, pc}
 800da16:	bf00      	nop
 800da18:	200021c4 	.word	0x200021c4
 800da1c:	200021b7 	.word	0x200021b7
 800da20:	200021b6 	.word	0x200021b6
 800da24:	200021b8 	.word	0x200021b8
 800da28:	20000578 	.word	0x20000578
 800da2c:	200021bc 	.word	0x200021bc
 800da30:	48000400 	.word	0x48000400
 800da34:	88888889 	.word	0x88888889

0800da38 <is_connected>:



uint8_t is_connected(void){
 800da38:	b480      	push	{r7}
 800da3a:	af00      	add	r7, sp, #0
	return P2P_Server_App_Context.Notification_Status == 1;
 800da3c:	4b05      	ldr	r3, [pc, #20]	@ (800da54 <is_connected+0x1c>)
 800da3e:	781b      	ldrb	r3, [r3, #0]
 800da40:	2b01      	cmp	r3, #1
 800da42:	bf0c      	ite	eq
 800da44:	2301      	moveq	r3, #1
 800da46:	2300      	movne	r3, #0
 800da48:	b2db      	uxtb	r3, r3
}
 800da4a:	4618      	mov	r0, r3
 800da4c:	46bd      	mov	sp, r7
 800da4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da52:	4770      	bx	lr
 800da54:	200021c4 	.word	0x200021c4

0800da58 <LL_PWR_EnableBootC2>:
{
 800da58:	b480      	push	{r7}
 800da5a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800da5c:	4b05      	ldr	r3, [pc, #20]	@ (800da74 <LL_PWR_EnableBootC2+0x1c>)
 800da5e:	68db      	ldr	r3, [r3, #12]
 800da60:	4a04      	ldr	r2, [pc, #16]	@ (800da74 <LL_PWR_EnableBootC2+0x1c>)
 800da62:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800da66:	60d3      	str	r3, [r2, #12]
}
 800da68:	bf00      	nop
 800da6a:	46bd      	mov	sp, r7
 800da6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da70:	4770      	bx	lr
 800da72:	bf00      	nop
 800da74:	58000400 	.word	0x58000400

0800da78 <LL_C2_EXTI_EnableEvent_32_63>:
{
 800da78:	b480      	push	{r7}
 800da7a:	b083      	sub	sp, #12
 800da7c:	af00      	add	r7, sp, #0
 800da7e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 800da80:	4b06      	ldr	r3, [pc, #24]	@ (800da9c <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800da82:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 800da86:	4905      	ldr	r1, [pc, #20]	@ (800da9c <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	4313      	orrs	r3, r2
 800da8c:	f8c1 30d4 	str.w	r3, [r1, #212]	@ 0xd4
}
 800da90:	bf00      	nop
 800da92:	370c      	adds	r7, #12
 800da94:	46bd      	mov	sp, r7
 800da96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da9a:	4770      	bx	lr
 800da9c:	58000800 	.word	0x58000800

0800daa0 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 800daa0:	b480      	push	{r7}
 800daa2:	b083      	sub	sp, #12
 800daa4:	af00      	add	r7, sp, #0
 800daa6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800daa8:	4b05      	ldr	r3, [pc, #20]	@ (800dac0 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800daaa:	6a1a      	ldr	r2, [r3, #32]
 800daac:	4904      	ldr	r1, [pc, #16]	@ (800dac0 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	4313      	orrs	r3, r2
 800dab2:	620b      	str	r3, [r1, #32]
}
 800dab4:	bf00      	nop
 800dab6:	370c      	adds	r7, #12
 800dab8:	46bd      	mov	sp, r7
 800daba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dabe:	4770      	bx	lr
 800dac0:	58000800 	.word	0x58000800

0800dac4 <LL_AHB3_GRP1_EnableClock>:
{
 800dac4:	b480      	push	{r7}
 800dac6:	b085      	sub	sp, #20
 800dac8:	af00      	add	r7, sp, #0
 800daca:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800dacc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800dad0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800dad2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	4313      	orrs	r3, r2
 800dada:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800dadc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800dae0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	4013      	ands	r3, r2
 800dae6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800dae8:	68fb      	ldr	r3, [r7, #12]
}
 800daea:	bf00      	nop
 800daec:	3714      	adds	r7, #20
 800daee:	46bd      	mov	sp, r7
 800daf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daf4:	4770      	bx	lr

0800daf6 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800daf6:	b480      	push	{r7}
 800daf8:	b085      	sub	sp, #20
 800dafa:	af00      	add	r7, sp, #0
 800dafc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 800dafe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800db02:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 800db06:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	4313      	orrs	r3, r2
 800db0e:	f8c1 3150 	str.w	r3, [r1, #336]	@ 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 800db12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800db16:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	4013      	ands	r3, r2
 800db1e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800db20:	68fb      	ldr	r3, [r7, #12]
}
 800db22:	bf00      	nop
 800db24:	3714      	adds	r7, #20
 800db26:	46bd      	mov	sp, r7
 800db28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db2c:	4770      	bx	lr

0800db2e <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 800db2e:	b480      	push	{r7}
 800db30:	b083      	sub	sp, #12
 800db32:	af00      	add	r7, sp, #0
 800db34:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	601a      	str	r2, [r3, #0]
}
 800db42:	bf00      	nop
 800db44:	370c      	adds	r7, #12
 800db46:	46bd      	mov	sp, r7
 800db48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db4c:	4770      	bx	lr

0800db4e <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 800db4e:	b480      	push	{r7}
 800db50:	b083      	sub	sp, #12
 800db52:	af00      	add	r7, sp, #0
 800db54:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	f043 0201 	orr.w	r2, r3, #1
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	601a      	str	r2, [r3, #0]
}
 800db62:	bf00      	nop
 800db64:	370c      	adds	r7, #12
 800db66:	46bd      	mov	sp, r7
 800db68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db6c:	4770      	bx	lr

0800db6e <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800db6e:	b480      	push	{r7}
 800db70:	b083      	sub	sp, #12
 800db72:	af00      	add	r7, sp, #0
 800db74:	6078      	str	r0, [r7, #4]
 800db76:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	685a      	ldr	r2, [r3, #4]
 800db7c:	683b      	ldr	r3, [r7, #0]
 800db7e:	041b      	lsls	r3, r3, #16
 800db80:	43db      	mvns	r3, r3
 800db82:	401a      	ands	r2, r3
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	605a      	str	r2, [r3, #4]
}
 800db88:	bf00      	nop
 800db8a:	370c      	adds	r7, #12
 800db8c:	46bd      	mov	sp, r7
 800db8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db92:	4770      	bx	lr

0800db94 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800db94:	b480      	push	{r7}
 800db96:	b083      	sub	sp, #12
 800db98:	af00      	add	r7, sp, #0
 800db9a:	6078      	str	r0, [r7, #4]
 800db9c:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	685a      	ldr	r2, [r3, #4]
 800dba2:	683b      	ldr	r3, [r7, #0]
 800dba4:	041b      	lsls	r3, r3, #16
 800dba6:	431a      	orrs	r2, r3
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	605a      	str	r2, [r3, #4]
}
 800dbac:	bf00      	nop
 800dbae:	370c      	adds	r7, #12
 800dbb0:	46bd      	mov	sp, r7
 800dbb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbb6:	4770      	bx	lr

0800dbb8 <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800dbb8:	b480      	push	{r7}
 800dbba:	b083      	sub	sp, #12
 800dbbc:	af00      	add	r7, sp, #0
 800dbbe:	6078      	str	r0, [r7, #4]
 800dbc0:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	685a      	ldr	r2, [r3, #4]
 800dbc6:	683b      	ldr	r3, [r7, #0]
 800dbc8:	43db      	mvns	r3, r3
 800dbca:	401a      	ands	r2, r3
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	605a      	str	r2, [r3, #4]
}
 800dbd0:	bf00      	nop
 800dbd2:	370c      	adds	r7, #12
 800dbd4:	46bd      	mov	sp, r7
 800dbd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbda:	4770      	bx	lr

0800dbdc <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800dbdc:	b480      	push	{r7}
 800dbde:	b083      	sub	sp, #12
 800dbe0:	af00      	add	r7, sp, #0
 800dbe2:	6078      	str	r0, [r7, #4]
 800dbe4:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	683a      	ldr	r2, [r7, #0]
 800dbea:	609a      	str	r2, [r3, #8]
}
 800dbec:	bf00      	nop
 800dbee:	370c      	adds	r7, #12
 800dbf0:	46bd      	mov	sp, r7
 800dbf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbf6:	4770      	bx	lr

0800dbf8 <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800dbf8:	b480      	push	{r7}
 800dbfa:	b083      	sub	sp, #12
 800dbfc:	af00      	add	r7, sp, #0
 800dbfe:	6078      	str	r0, [r7, #4]
 800dc00:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800dc02:	683b      	ldr	r3, [r7, #0]
 800dc04:	041a      	lsls	r2, r3, #16
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	609a      	str	r2, [r3, #8]
}
 800dc0a:	bf00      	nop
 800dc0c:	370c      	adds	r7, #12
 800dc0e:	46bd      	mov	sp, r7
 800dc10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc14:	4770      	bx	lr

0800dc16 <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800dc16:	b480      	push	{r7}
 800dc18:	b083      	sub	sp, #12
 800dc1a:	af00      	add	r7, sp, #0
 800dc1c:	6078      	str	r0, [r7, #4]
 800dc1e:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	68da      	ldr	r2, [r3, #12]
 800dc24:	683b      	ldr	r3, [r7, #0]
 800dc26:	4013      	ands	r3, r2
 800dc28:	683a      	ldr	r2, [r7, #0]
 800dc2a:	429a      	cmp	r2, r3
 800dc2c:	d101      	bne.n	800dc32 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800dc2e:	2301      	movs	r3, #1
 800dc30:	e000      	b.n	800dc34 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800dc32:	2300      	movs	r3, #0
}
 800dc34:	4618      	mov	r0, r3
 800dc36:	370c      	adds	r7, #12
 800dc38:	46bd      	mov	sp, r7
 800dc3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc3e:	4770      	bx	lr

0800dc40 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800dc40:	b480      	push	{r7}
 800dc42:	b083      	sub	sp, #12
 800dc44:	af00      	add	r7, sp, #0
 800dc46:	6078      	str	r0, [r7, #4]
 800dc48:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	69da      	ldr	r2, [r3, #28]
 800dc4e:	683b      	ldr	r3, [r7, #0]
 800dc50:	4013      	ands	r3, r2
 800dc52:	683a      	ldr	r2, [r7, #0]
 800dc54:	429a      	cmp	r2, r3
 800dc56:	d101      	bne.n	800dc5c <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 800dc58:	2301      	movs	r3, #1
 800dc5a:	e000      	b.n	800dc5e <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 800dc5c:	2300      	movs	r3, #0
}
 800dc5e:	4618      	mov	r0, r3
 800dc60:	370c      	adds	r7, #12
 800dc62:	46bd      	mov	sp, r7
 800dc64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc68:	4770      	bx	lr
	...

0800dc6c <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 800dc6c:	b580      	push	{r7, lr}
 800dc6e:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 800dc70:	2102      	movs	r1, #2
 800dc72:	4818      	ldr	r0, [pc, #96]	@ (800dcd4 <HW_IPCC_Rx_Handler+0x68>)
 800dc74:	f7ff ffe4 	bl	800dc40 <LL_C2_IPCC_IsActiveFlag_CHx>
 800dc78:	4603      	mov	r3, r0
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d008      	beq.n	800dc90 <HW_IPCC_Rx_Handler+0x24>
 800dc7e:	4b15      	ldr	r3, [pc, #84]	@ (800dcd4 <HW_IPCC_Rx_Handler+0x68>)
 800dc80:	685b      	ldr	r3, [r3, #4]
 800dc82:	f003 0302 	and.w	r3, r3, #2
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d102      	bne.n	800dc90 <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 800dc8a:	f000 f8d5 	bl	800de38 <HW_IPCC_SYS_EvtHandler>
 800dc8e:	e01e      	b.n	800dcce <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800dc90:	2101      	movs	r1, #1
 800dc92:	4810      	ldr	r0, [pc, #64]	@ (800dcd4 <HW_IPCC_Rx_Handler+0x68>)
 800dc94:	f7ff ffd4 	bl	800dc40 <LL_C2_IPCC_IsActiveFlag_CHx>
 800dc98:	4603      	mov	r3, r0
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d008      	beq.n	800dcb0 <HW_IPCC_Rx_Handler+0x44>
 800dc9e:	4b0d      	ldr	r3, [pc, #52]	@ (800dcd4 <HW_IPCC_Rx_Handler+0x68>)
 800dca0:	685b      	ldr	r3, [r3, #4]
 800dca2:	f003 0301 	and.w	r3, r3, #1
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d102      	bne.n	800dcb0 <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 800dcaa:	f000 f889 	bl	800ddc0 <HW_IPCC_BLE_EvtHandler>
 800dcae:	e00e      	b.n	800dcce <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 800dcb0:	2108      	movs	r1, #8
 800dcb2:	4808      	ldr	r0, [pc, #32]	@ (800dcd4 <HW_IPCC_Rx_Handler+0x68>)
 800dcb4:	f7ff ffc4 	bl	800dc40 <LL_C2_IPCC_IsActiveFlag_CHx>
 800dcb8:	4603      	mov	r3, r0
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d008      	beq.n	800dcd0 <HW_IPCC_Rx_Handler+0x64>
 800dcbe:	4b05      	ldr	r3, [pc, #20]	@ (800dcd4 <HW_IPCC_Rx_Handler+0x68>)
 800dcc0:	685b      	ldr	r3, [r3, #4]
 800dcc2:	f003 0308 	and.w	r3, r3, #8
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d102      	bne.n	800dcd0 <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 800dcca:	f000 f901 	bl	800ded0 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 800dcce:	bf00      	nop
 800dcd0:	bf00      	nop
}
 800dcd2:	bd80      	pop	{r7, pc}
 800dcd4:	58000c00 	.word	0x58000c00

0800dcd8 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 800dcd8:	b580      	push	{r7, lr}
 800dcda:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800dcdc:	2102      	movs	r1, #2
 800dcde:	4818      	ldr	r0, [pc, #96]	@ (800dd40 <HW_IPCC_Tx_Handler+0x68>)
 800dce0:	f7ff ff99 	bl	800dc16 <LL_C1_IPCC_IsActiveFlag_CHx>
 800dce4:	4603      	mov	r3, r0
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	d108      	bne.n	800dcfc <HW_IPCC_Tx_Handler+0x24>
 800dcea:	4b15      	ldr	r3, [pc, #84]	@ (800dd40 <HW_IPCC_Tx_Handler+0x68>)
 800dcec:	685b      	ldr	r3, [r3, #4]
 800dcee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d102      	bne.n	800dcfc <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800dcf6:	f000 f893 	bl	800de20 <HW_IPCC_SYS_CmdEvtHandler>
 800dcfa:	e01e      	b.n	800dd3a <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800dcfc:	2108      	movs	r1, #8
 800dcfe:	4810      	ldr	r0, [pc, #64]	@ (800dd40 <HW_IPCC_Tx_Handler+0x68>)
 800dd00:	f7ff ff89 	bl	800dc16 <LL_C1_IPCC_IsActiveFlag_CHx>
 800dd04:	4603      	mov	r3, r0
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d108      	bne.n	800dd1c <HW_IPCC_Tx_Handler+0x44>
 800dd0a:	4b0d      	ldr	r3, [pc, #52]	@ (800dd40 <HW_IPCC_Tx_Handler+0x68>)
 800dd0c:	685b      	ldr	r3, [r3, #4]
 800dd0e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d102      	bne.n	800dd1c <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 800dd16:	f000 f8bd 	bl	800de94 <HW_IPCC_MM_FreeBufHandler>
 800dd1a:	e00e      	b.n	800dd3a <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800dd1c:	2120      	movs	r1, #32
 800dd1e:	4808      	ldr	r0, [pc, #32]	@ (800dd40 <HW_IPCC_Tx_Handler+0x68>)
 800dd20:	f7ff ff79 	bl	800dc16 <LL_C1_IPCC_IsActiveFlag_CHx>
 800dd24:	4603      	mov	r3, r0
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d108      	bne.n	800dd3c <HW_IPCC_Tx_Handler+0x64>
 800dd2a:	4b05      	ldr	r3, [pc, #20]	@ (800dd40 <HW_IPCC_Tx_Handler+0x68>)
 800dd2c:	685b      	ldr	r3, [r3, #4]
 800dd2e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d102      	bne.n	800dd3c <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 800dd36:	f000 f84f 	bl	800ddd8 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800dd3a:	bf00      	nop
 800dd3c:	bf00      	nop
}
 800dd3e:	bd80      	pop	{r7, pc}
 800dd40:	58000c00 	.word	0x58000c00

0800dd44 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 800dd44:	b580      	push	{r7, lr}
 800dd46:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 800dd48:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800dd4c:	f7ff fed3 	bl	800daf6 <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 800dd50:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800dd54:	f7ff fea4 	bl	800daa0 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 800dd58:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800dd5c:	f7ff fe8c 	bl	800da78 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 800dd60:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800dd62:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 800dd64:	f7ff fe78 	bl	800da58 <LL_PWR_EnableBootC2>

  return;
 800dd68:	bf00      	nop
}
 800dd6a:	bd80      	pop	{r7, pc}

0800dd6c <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 800dd6c:	b580      	push	{r7, lr}
 800dd6e:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 800dd70:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800dd74:	f7ff fea6 	bl	800dac4 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 800dd78:	4806      	ldr	r0, [pc, #24]	@ (800dd94 <HW_IPCC_Init+0x28>)
 800dd7a:	f7ff fee8 	bl	800db4e <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800dd7e:	4805      	ldr	r0, [pc, #20]	@ (800dd94 <HW_IPCC_Init+0x28>)
 800dd80:	f7ff fed5 	bl	800db2e <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800dd84:	202c      	movs	r0, #44	@ 0x2c
 800dd86:	f7f5 fc74 	bl	8003672 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800dd8a:	202d      	movs	r0, #45	@ 0x2d
 800dd8c:	f7f5 fc71 	bl	8003672 <HAL_NVIC_EnableIRQ>

  return;
 800dd90:	bf00      	nop
}
 800dd92:	bd80      	pop	{r7, pc}
 800dd94:	58000c00 	.word	0x58000c00

0800dd98 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 800dd98:	b580      	push	{r7, lr}
 800dd9a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800dd9c:	2101      	movs	r1, #1
 800dd9e:	4802      	ldr	r0, [pc, #8]	@ (800dda8 <HW_IPCC_BLE_Init+0x10>)
 800dda0:	f7ff ff0a 	bl	800dbb8 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800dda4:	bf00      	nop
}
 800dda6:	bd80      	pop	{r7, pc}
 800dda8:	58000c00 	.word	0x58000c00

0800ddac <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 800ddac:	b580      	push	{r7, lr}
 800ddae:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 800ddb0:	2101      	movs	r1, #1
 800ddb2:	4802      	ldr	r0, [pc, #8]	@ (800ddbc <HW_IPCC_BLE_SendCmd+0x10>)
 800ddb4:	f7ff ff20 	bl	800dbf8 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800ddb8:	bf00      	nop
}
 800ddba:	bd80      	pop	{r7, pc}
 800ddbc:	58000c00 	.word	0x58000c00

0800ddc0 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 800ddc0:	b580      	push	{r7, lr}
 800ddc2:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 800ddc4:	f7fd faba 	bl	800b33c <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800ddc8:	2101      	movs	r1, #1
 800ddca:	4802      	ldr	r0, [pc, #8]	@ (800ddd4 <HW_IPCC_BLE_EvtHandler+0x14>)
 800ddcc:	f7ff ff06 	bl	800dbdc <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800ddd0:	bf00      	nop
}
 800ddd2:	bd80      	pop	{r7, pc}
 800ddd4:	58000c00 	.word	0x58000c00

0800ddd8 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 800ddd8:	b580      	push	{r7, lr}
 800ddda:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 800dddc:	2120      	movs	r1, #32
 800ddde:	4803      	ldr	r0, [pc, #12]	@ (800ddec <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 800dde0:	f7ff fed8 	bl	800db94 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 800dde4:	f7fd fada 	bl	800b39c <HW_IPCC_BLE_AclDataAckNot>

  return;
 800dde8:	bf00      	nop
}
 800ddea:	bd80      	pop	{r7, pc}
 800ddec:	58000c00 	.word	0x58000c00

0800ddf0 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 800ddf0:	b580      	push	{r7, lr}
 800ddf2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800ddf4:	2102      	movs	r1, #2
 800ddf6:	4802      	ldr	r0, [pc, #8]	@ (800de00 <HW_IPCC_SYS_Init+0x10>)
 800ddf8:	f7ff fede 	bl	800dbb8 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800ddfc:	bf00      	nop
}
 800ddfe:	bd80      	pop	{r7, pc}
 800de00:	58000c00 	.word	0x58000c00

0800de04 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 800de04:	b580      	push	{r7, lr}
 800de06:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800de08:	2102      	movs	r1, #2
 800de0a:	4804      	ldr	r0, [pc, #16]	@ (800de1c <HW_IPCC_SYS_SendCmd+0x18>)
 800de0c:	f7ff fef4 	bl	800dbf8 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800de10:	2102      	movs	r1, #2
 800de12:	4802      	ldr	r0, [pc, #8]	@ (800de1c <HW_IPCC_SYS_SendCmd+0x18>)
 800de14:	f7ff feab 	bl	800db6e <LL_C1_IPCC_EnableTransmitChannel>

  return;
 800de18:	bf00      	nop
}
 800de1a:	bd80      	pop	{r7, pc}
 800de1c:	58000c00 	.word	0x58000c00

0800de20 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 800de20:	b580      	push	{r7, lr}
 800de22:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800de24:	2102      	movs	r1, #2
 800de26:	4803      	ldr	r0, [pc, #12]	@ (800de34 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 800de28:	f7ff feb4 	bl	800db94 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 800de2c:	f7fd fb06 	bl	800b43c <HW_IPCC_SYS_CmdEvtNot>

  return;
 800de30:	bf00      	nop
}
 800de32:	bd80      	pop	{r7, pc}
 800de34:	58000c00 	.word	0x58000c00

0800de38 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 800de38:	b580      	push	{r7, lr}
 800de3a:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 800de3c:	f7fd fb14 	bl	800b468 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800de40:	2102      	movs	r1, #2
 800de42:	4802      	ldr	r0, [pc, #8]	@ (800de4c <HW_IPCC_SYS_EvtHandler+0x14>)
 800de44:	f7ff feca 	bl	800dbdc <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800de48:	bf00      	nop
}
 800de4a:	bd80      	pop	{r7, pc}
 800de4c:	58000c00 	.word	0x58000c00

0800de50 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 800de50:	b580      	push	{r7, lr}
 800de52:	b082      	sub	sp, #8
 800de54:	af00      	add	r7, sp, #0
 800de56:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 800de58:	2108      	movs	r1, #8
 800de5a:	480c      	ldr	r0, [pc, #48]	@ (800de8c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800de5c:	f7ff fedb 	bl	800dc16 <LL_C1_IPCC_IsActiveFlag_CHx>
 800de60:	4603      	mov	r3, r0
 800de62:	2b00      	cmp	r3, #0
 800de64:	d007      	beq.n	800de76 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 800de66:	4a0a      	ldr	r2, [pc, #40]	@ (800de90 <HW_IPCC_MM_SendFreeBuf+0x40>)
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800de6c:	2108      	movs	r1, #8
 800de6e:	4807      	ldr	r0, [pc, #28]	@ (800de8c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800de70:	f7ff fe7d 	bl	800db6e <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 800de74:	e006      	b.n	800de84 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800de7a:	2108      	movs	r1, #8
 800de7c:	4803      	ldr	r0, [pc, #12]	@ (800de8c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800de7e:	f7ff febb 	bl	800dbf8 <LL_C1_IPCC_SetFlag_CHx>
  return;
 800de82:	bf00      	nop
}
 800de84:	3708      	adds	r7, #8
 800de86:	46bd      	mov	sp, r7
 800de88:	bd80      	pop	{r7, pc}
 800de8a:	bf00      	nop
 800de8c:	58000c00 	.word	0x58000c00
 800de90:	200021cc 	.word	0x200021cc

0800de94 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 800de94:	b580      	push	{r7, lr}
 800de96:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800de98:	2108      	movs	r1, #8
 800de9a:	4806      	ldr	r0, [pc, #24]	@ (800deb4 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800de9c:	f7ff fe7a 	bl	800db94 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 800dea0:	4b05      	ldr	r3, [pc, #20]	@ (800deb8 <HW_IPCC_MM_FreeBufHandler+0x24>)
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800dea6:	2108      	movs	r1, #8
 800dea8:	4802      	ldr	r0, [pc, #8]	@ (800deb4 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800deaa:	f7ff fea5 	bl	800dbf8 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800deae:	bf00      	nop
}
 800deb0:	bd80      	pop	{r7, pc}
 800deb2:	bf00      	nop
 800deb4:	58000c00 	.word	0x58000c00
 800deb8:	200021cc 	.word	0x200021cc

0800debc <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 800debc:	b580      	push	{r7, lr}
 800debe:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 800dec0:	2108      	movs	r1, #8
 800dec2:	4802      	ldr	r0, [pc, #8]	@ (800decc <HW_IPCC_TRACES_Init+0x10>)
 800dec4:	f7ff fe78 	bl	800dbb8 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800dec8:	bf00      	nop
}
 800deca:	bd80      	pop	{r7, pc}
 800decc:	58000c00 	.word	0x58000c00

0800ded0 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 800ded0:	b580      	push	{r7, lr}
 800ded2:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 800ded4:	f7fd fb70 	bl	800b5b8 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 800ded8:	2108      	movs	r1, #8
 800deda:	4802      	ldr	r0, [pc, #8]	@ (800dee4 <HW_IPCC_TRACES_EvtHandler+0x14>)
 800dedc:	f7ff fe7e 	bl	800dbdc <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800dee0:	bf00      	nop
}
 800dee2:	bd80      	pop	{r7, pc}
 800dee4:	58000c00 	.word	0x58000c00

0800dee8 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800dee8:	b480      	push	{r7}
 800deea:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800deec:	4b05      	ldr	r3, [pc, #20]	@ (800df04 <UTIL_LPM_Init+0x1c>)
 800deee:	2200      	movs	r2, #0
 800def0:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800def2:	4b05      	ldr	r3, [pc, #20]	@ (800df08 <UTIL_LPM_Init+0x20>)
 800def4:	2200      	movs	r2, #0
 800def6:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800def8:	bf00      	nop
 800defa:	46bd      	mov	sp, r7
 800defc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df00:	4770      	bx	lr
 800df02:	bf00      	nop
 800df04:	200021d0 	.word	0x200021d0
 800df08:	200021d4 	.word	0x200021d4

0800df0c <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800df0c:	b480      	push	{r7}
 800df0e:	b087      	sub	sp, #28
 800df10:	af00      	add	r7, sp, #0
 800df12:	6078      	str	r0, [r7, #4]
 800df14:	460b      	mov	r3, r1
 800df16:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800df18:	f3ef 8310 	mrs	r3, PRIMASK
 800df1c:	613b      	str	r3, [r7, #16]
  return(result);
 800df1e:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800df20:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800df22:	b672      	cpsid	i
}
 800df24:	bf00      	nop
  
  switch(state)
 800df26:	78fb      	ldrb	r3, [r7, #3]
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d008      	beq.n	800df3e <UTIL_LPM_SetOffMode+0x32>
 800df2c:	2b01      	cmp	r3, #1
 800df2e:	d10e      	bne.n	800df4e <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800df30:	4b0d      	ldr	r3, [pc, #52]	@ (800df68 <UTIL_LPM_SetOffMode+0x5c>)
 800df32:	681a      	ldr	r2, [r3, #0]
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	4313      	orrs	r3, r2
 800df38:	4a0b      	ldr	r2, [pc, #44]	@ (800df68 <UTIL_LPM_SetOffMode+0x5c>)
 800df3a:	6013      	str	r3, [r2, #0]
      break;
 800df3c:	e008      	b.n	800df50 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	43da      	mvns	r2, r3
 800df42:	4b09      	ldr	r3, [pc, #36]	@ (800df68 <UTIL_LPM_SetOffMode+0x5c>)
 800df44:	681b      	ldr	r3, [r3, #0]
 800df46:	4013      	ands	r3, r2
 800df48:	4a07      	ldr	r2, [pc, #28]	@ (800df68 <UTIL_LPM_SetOffMode+0x5c>)
 800df4a:	6013      	str	r3, [r2, #0]
      break;
 800df4c:	e000      	b.n	800df50 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800df4e:	bf00      	nop
 800df50:	697b      	ldr	r3, [r7, #20]
 800df52:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	f383 8810 	msr	PRIMASK, r3
}
 800df5a:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800df5c:	bf00      	nop
 800df5e:	371c      	adds	r7, #28
 800df60:	46bd      	mov	sp, r7
 800df62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df66:	4770      	bx	lr
 800df68:	200021d4 	.word	0x200021d4

0800df6c <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800df6c:	b580      	push	{r7, lr}
 800df6e:	b090      	sub	sp, #64	@ 0x40
 800df70:	af00      	add	r7, sp, #0
 800df72:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800df74:	4b73      	ldr	r3, [pc, #460]	@ (800e144 <UTIL_SEQ_Run+0x1d8>)
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 800df7a:	4b72      	ldr	r3, [pc, #456]	@ (800e144 <UTIL_SEQ_Run+0x1d8>)
 800df7c:	681a      	ldr	r2, [r3, #0]
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	4013      	ands	r3, r2
 800df82:	4a70      	ldr	r2, [pc, #448]	@ (800e144 <UTIL_SEQ_Run+0x1d8>)
 800df84:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800df86:	4b70      	ldr	r3, [pc, #448]	@ (800e148 <UTIL_SEQ_Run+0x1dc>)
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 800df8c:	4b6f      	ldr	r3, [pc, #444]	@ (800e14c <UTIL_SEQ_Run+0x1e0>)
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 800df92:	4b6f      	ldr	r3, [pc, #444]	@ (800e150 <UTIL_SEQ_Run+0x1e4>)
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 800df98:	4b6e      	ldr	r3, [pc, #440]	@ (800e154 <UTIL_SEQ_Run+0x1e8>)
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800df9e:	e08d      	b.n	800e0bc <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 800dfa0:	2300      	movs	r3, #0
 800dfa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800dfa4:	e002      	b.n	800dfac <UTIL_SEQ_Run+0x40>
    {
      counter++;
 800dfa6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dfa8:	3301      	adds	r3, #1
 800dfaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800dfac:	4a6a      	ldr	r2, [pc, #424]	@ (800e158 <UTIL_SEQ_Run+0x1ec>)
 800dfae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dfb0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800dfb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dfb6:	401a      	ands	r2, r3
 800dfb8:	4b62      	ldr	r3, [pc, #392]	@ (800e144 <UTIL_SEQ_Run+0x1d8>)
 800dfba:	681b      	ldr	r3, [r3, #0]
 800dfbc:	4013      	ands	r3, r2
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d0f1      	beq.n	800dfa6 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800dfc2:	4a65      	ldr	r2, [pc, #404]	@ (800e158 <UTIL_SEQ_Run+0x1ec>)
 800dfc4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dfc6:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800dfca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dfcc:	401a      	ands	r2, r3
 800dfce:	4b5d      	ldr	r3, [pc, #372]	@ (800e144 <UTIL_SEQ_Run+0x1d8>)
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	4013      	ands	r3, r2
 800dfd4:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800dfd6:	4a60      	ldr	r2, [pc, #384]	@ (800e158 <UTIL_SEQ_Run+0x1ec>)
 800dfd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dfda:	00db      	lsls	r3, r3, #3
 800dfdc:	4413      	add	r3, r2
 800dfde:	685a      	ldr	r2, [r3, #4]
 800dfe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dfe2:	4013      	ands	r3, r2
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d106      	bne.n	800dff6 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800dfe8:	4a5b      	ldr	r2, [pc, #364]	@ (800e158 <UTIL_SEQ_Run+0x1ec>)
 800dfea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dfec:	00db      	lsls	r3, r3, #3
 800dfee:	4413      	add	r3, r2
 800dff0:	f04f 32ff 	mov.w	r2, #4294967295
 800dff4:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800dff6:	4a58      	ldr	r2, [pc, #352]	@ (800e158 <UTIL_SEQ_Run+0x1ec>)
 800dff8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dffa:	00db      	lsls	r3, r3, #3
 800dffc:	4413      	add	r3, r2
 800dffe:	685a      	ldr	r2, [r3, #4]
 800e000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e002:	4013      	ands	r3, r2
 800e004:	4618      	mov	r0, r3
 800e006:	f000 f9b3 	bl	800e370 <SEQ_BitPosition>
 800e00a:	4603      	mov	r3, r0
 800e00c:	461a      	mov	r2, r3
 800e00e:	4b53      	ldr	r3, [pc, #332]	@ (800e15c <UTIL_SEQ_Run+0x1f0>)
 800e010:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800e012:	4a51      	ldr	r2, [pc, #324]	@ (800e158 <UTIL_SEQ_Run+0x1ec>)
 800e014:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e016:	00db      	lsls	r3, r3, #3
 800e018:	4413      	add	r3, r2
 800e01a:	685a      	ldr	r2, [r3, #4]
 800e01c:	4b4f      	ldr	r3, [pc, #316]	@ (800e15c <UTIL_SEQ_Run+0x1f0>)
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	2101      	movs	r1, #1
 800e022:	fa01 f303 	lsl.w	r3, r1, r3
 800e026:	43db      	mvns	r3, r3
 800e028:	401a      	ands	r2, r3
 800e02a:	494b      	ldr	r1, [pc, #300]	@ (800e158 <UTIL_SEQ_Run+0x1ec>)
 800e02c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e02e:	00db      	lsls	r3, r3, #3
 800e030:	440b      	add	r3, r1
 800e032:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e034:	f3ef 8310 	mrs	r3, PRIMASK
 800e038:	61bb      	str	r3, [r7, #24]
  return(result);
 800e03a:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800e03c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800e03e:	b672      	cpsid	i
}
 800e040:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800e042:	4b46      	ldr	r3, [pc, #280]	@ (800e15c <UTIL_SEQ_Run+0x1f0>)
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	2201      	movs	r2, #1
 800e048:	fa02 f303 	lsl.w	r3, r2, r3
 800e04c:	43da      	mvns	r2, r3
 800e04e:	4b3e      	ldr	r3, [pc, #248]	@ (800e148 <UTIL_SEQ_Run+0x1dc>)
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	4013      	ands	r3, r2
 800e054:	4a3c      	ldr	r2, [pc, #240]	@ (800e148 <UTIL_SEQ_Run+0x1dc>)
 800e056:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800e058:	2301      	movs	r3, #1
 800e05a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e05c:	e013      	b.n	800e086 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800e05e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e060:	3b01      	subs	r3, #1
 800e062:	4a3d      	ldr	r2, [pc, #244]	@ (800e158 <UTIL_SEQ_Run+0x1ec>)
 800e064:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800e068:	4b3c      	ldr	r3, [pc, #240]	@ (800e15c <UTIL_SEQ_Run+0x1f0>)
 800e06a:	681b      	ldr	r3, [r3, #0]
 800e06c:	2201      	movs	r2, #1
 800e06e:	fa02 f303 	lsl.w	r3, r2, r3
 800e072:	43da      	mvns	r2, r3
 800e074:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e076:	3b01      	subs	r3, #1
 800e078:	400a      	ands	r2, r1
 800e07a:	4937      	ldr	r1, [pc, #220]	@ (800e158 <UTIL_SEQ_Run+0x1ec>)
 800e07c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800e080:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e082:	3b01      	subs	r3, #1
 800e084:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e086:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d1e8      	bne.n	800e05e <UTIL_SEQ_Run+0xf2>
 800e08c:	6a3b      	ldr	r3, [r7, #32]
 800e08e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e090:	697b      	ldr	r3, [r7, #20]
 800e092:	f383 8810 	msr	PRIMASK, r3
}
 800e096:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800e098:	4b30      	ldr	r3, [pc, #192]	@ (800e15c <UTIL_SEQ_Run+0x1f0>)
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	4a30      	ldr	r2, [pc, #192]	@ (800e160 <UTIL_SEQ_Run+0x1f4>)
 800e09e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e0a2:	4798      	blx	r3

    local_taskset = TaskSet;
 800e0a4:	4b28      	ldr	r3, [pc, #160]	@ (800e148 <UTIL_SEQ_Run+0x1dc>)
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 800e0aa:	4b28      	ldr	r3, [pc, #160]	@ (800e14c <UTIL_SEQ_Run+0x1e0>)
 800e0ac:	681b      	ldr	r3, [r3, #0]
 800e0ae:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 800e0b0:	4b27      	ldr	r3, [pc, #156]	@ (800e150 <UTIL_SEQ_Run+0x1e4>)
 800e0b2:	681b      	ldr	r3, [r3, #0]
 800e0b4:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 800e0b6:	4b27      	ldr	r3, [pc, #156]	@ (800e154 <UTIL_SEQ_Run+0x1e8>)
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800e0bc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e0be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0c0:	401a      	ands	r2, r3
 800e0c2:	4b20      	ldr	r3, [pc, #128]	@ (800e144 <UTIL_SEQ_Run+0x1d8>)
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	4013      	ands	r3, r2
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d005      	beq.n	800e0d8 <UTIL_SEQ_Run+0x16c>
 800e0cc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e0ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0d0:	4013      	ands	r3, r2
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	f43f af64 	beq.w	800dfa0 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800e0d8:	4b20      	ldr	r3, [pc, #128]	@ (800e15c <UTIL_SEQ_Run+0x1f0>)
 800e0da:	f04f 32ff 	mov.w	r2, #4294967295
 800e0de:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800e0e0:	f000 f938 	bl	800e354 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e0e4:	f3ef 8310 	mrs	r3, PRIMASK
 800e0e8:	613b      	str	r3, [r7, #16]
  return(result);
 800e0ea:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800e0ec:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800e0ee:	b672      	cpsid	i
}
 800e0f0:	bf00      	nop
  local_taskset = TaskSet;
 800e0f2:	4b15      	ldr	r3, [pc, #84]	@ (800e148 <UTIL_SEQ_Run+0x1dc>)
 800e0f4:	681b      	ldr	r3, [r3, #0]
 800e0f6:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 800e0f8:	4b14      	ldr	r3, [pc, #80]	@ (800e14c <UTIL_SEQ_Run+0x1e0>)
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 800e0fe:	4b14      	ldr	r3, [pc, #80]	@ (800e150 <UTIL_SEQ_Run+0x1e4>)
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800e104:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e106:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e108:	401a      	ands	r2, r3
 800e10a:	4b0e      	ldr	r3, [pc, #56]	@ (800e144 <UTIL_SEQ_Run+0x1d8>)
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	4013      	ands	r3, r2
 800e110:	2b00      	cmp	r3, #0
 800e112:	d107      	bne.n	800e124 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 800e114:	4b0f      	ldr	r3, [pc, #60]	@ (800e154 <UTIL_SEQ_Run+0x1e8>)
 800e116:	681a      	ldr	r2, [r3, #0]
 800e118:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e11a:	4013      	ands	r3, r2
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d101      	bne.n	800e124 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 800e120:	f7f3 f9e5 	bl	80014ee <UTIL_SEQ_Idle>
 800e124:	69fb      	ldr	r3, [r7, #28]
 800e126:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	f383 8810 	msr	PRIMASK, r3
}
 800e12e:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 800e130:	f000 f917 	bl	800e362 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800e134:	4a03      	ldr	r2, [pc, #12]	@ (800e144 <UTIL_SEQ_Run+0x1d8>)
 800e136:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e138:	6013      	str	r3, [r2, #0]

  return;
 800e13a:	bf00      	nop
}
 800e13c:	3740      	adds	r7, #64	@ 0x40
 800e13e:	46bd      	mov	sp, r7
 800e140:	bd80      	pop	{r7, pc}
 800e142:	bf00      	nop
 800e144:	20000028 	.word	0x20000028
 800e148:	200021d8 	.word	0x200021d8
 800e14c:	200021dc 	.word	0x200021dc
 800e150:	20000024 	.word	0x20000024
 800e154:	200021e0 	.word	0x200021e0
 800e158:	20002268 	.word	0x20002268
 800e15c:	200021e4 	.word	0x200021e4
 800e160:	200021e8 	.word	0x200021e8

0800e164 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800e164:	b580      	push	{r7, lr}
 800e166:	b088      	sub	sp, #32
 800e168:	af00      	add	r7, sp, #0
 800e16a:	60f8      	str	r0, [r7, #12]
 800e16c:	60b9      	str	r1, [r7, #8]
 800e16e:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e170:	f3ef 8310 	mrs	r3, PRIMASK
 800e174:	617b      	str	r3, [r7, #20]
  return(result);
 800e176:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800e178:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800e17a:	b672      	cpsid	i
}
 800e17c:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800e17e:	68f8      	ldr	r0, [r7, #12]
 800e180:	f000 f8f6 	bl	800e370 <SEQ_BitPosition>
 800e184:	4603      	mov	r3, r0
 800e186:	4619      	mov	r1, r3
 800e188:	4a06      	ldr	r2, [pc, #24]	@ (800e1a4 <UTIL_SEQ_RegTask+0x40>)
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800e190:	69fb      	ldr	r3, [r7, #28]
 800e192:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e194:	69bb      	ldr	r3, [r7, #24]
 800e196:	f383 8810 	msr	PRIMASK, r3
}
 800e19a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800e19c:	bf00      	nop
}
 800e19e:	3720      	adds	r7, #32
 800e1a0:	46bd      	mov	sp, r7
 800e1a2:	bd80      	pop	{r7, pc}
 800e1a4:	200021e8 	.word	0x200021e8

0800e1a8 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800e1a8:	b480      	push	{r7}
 800e1aa:	b087      	sub	sp, #28
 800e1ac:	af00      	add	r7, sp, #0
 800e1ae:	6078      	str	r0, [r7, #4]
 800e1b0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e1b2:	f3ef 8310 	mrs	r3, PRIMASK
 800e1b6:	60fb      	str	r3, [r7, #12]
  return(result);
 800e1b8:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800e1ba:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800e1bc:	b672      	cpsid	i
}
 800e1be:	bf00      	nop

  TaskSet |= TaskId_bm;
 800e1c0:	4b0d      	ldr	r3, [pc, #52]	@ (800e1f8 <UTIL_SEQ_SetTask+0x50>)
 800e1c2:	681a      	ldr	r2, [r3, #0]
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	4313      	orrs	r3, r2
 800e1c8:	4a0b      	ldr	r2, [pc, #44]	@ (800e1f8 <UTIL_SEQ_SetTask+0x50>)
 800e1ca:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800e1cc:	4a0b      	ldr	r2, [pc, #44]	@ (800e1fc <UTIL_SEQ_SetTask+0x54>)
 800e1ce:	683b      	ldr	r3, [r7, #0]
 800e1d0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	431a      	orrs	r2, r3
 800e1d8:	4908      	ldr	r1, [pc, #32]	@ (800e1fc <UTIL_SEQ_SetTask+0x54>)
 800e1da:	683b      	ldr	r3, [r7, #0]
 800e1dc:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800e1e0:	697b      	ldr	r3, [r7, #20]
 800e1e2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e1e4:	693b      	ldr	r3, [r7, #16]
 800e1e6:	f383 8810 	msr	PRIMASK, r3
}
 800e1ea:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800e1ec:	bf00      	nop
}
 800e1ee:	371c      	adds	r7, #28
 800e1f0:	46bd      	mov	sp, r7
 800e1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1f6:	4770      	bx	lr
 800e1f8:	200021d8 	.word	0x200021d8
 800e1fc:	20002268 	.word	0x20002268

0800e200 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800e200:	b480      	push	{r7}
 800e202:	b087      	sub	sp, #28
 800e204:	af00      	add	r7, sp, #0
 800e206:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e208:	f3ef 8310 	mrs	r3, PRIMASK
 800e20c:	60fb      	str	r3, [r7, #12]
  return(result);
 800e20e:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800e210:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800e212:	b672      	cpsid	i
}
 800e214:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	43da      	mvns	r2, r3
 800e21a:	4b08      	ldr	r3, [pc, #32]	@ (800e23c <UTIL_SEQ_PauseTask+0x3c>)
 800e21c:	681b      	ldr	r3, [r3, #0]
 800e21e:	4013      	ands	r3, r2
 800e220:	4a06      	ldr	r2, [pc, #24]	@ (800e23c <UTIL_SEQ_PauseTask+0x3c>)
 800e222:	6013      	str	r3, [r2, #0]
 800e224:	697b      	ldr	r3, [r7, #20]
 800e226:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e228:	693b      	ldr	r3, [r7, #16]
 800e22a:	f383 8810 	msr	PRIMASK, r3
}
 800e22e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800e230:	bf00      	nop
}
 800e232:	371c      	adds	r7, #28
 800e234:	46bd      	mov	sp, r7
 800e236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e23a:	4770      	bx	lr
 800e23c:	20000024 	.word	0x20000024

0800e240 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800e240:	b480      	push	{r7}
 800e242:	b087      	sub	sp, #28
 800e244:	af00      	add	r7, sp, #0
 800e246:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e248:	f3ef 8310 	mrs	r3, PRIMASK
 800e24c:	60fb      	str	r3, [r7, #12]
  return(result);
 800e24e:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800e250:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800e252:	b672      	cpsid	i
}
 800e254:	bf00      	nop

  TaskMask |= TaskId_bm;
 800e256:	4b09      	ldr	r3, [pc, #36]	@ (800e27c <UTIL_SEQ_ResumeTask+0x3c>)
 800e258:	681a      	ldr	r2, [r3, #0]
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	4313      	orrs	r3, r2
 800e25e:	4a07      	ldr	r2, [pc, #28]	@ (800e27c <UTIL_SEQ_ResumeTask+0x3c>)
 800e260:	6013      	str	r3, [r2, #0]
 800e262:	697b      	ldr	r3, [r7, #20]
 800e264:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e266:	693b      	ldr	r3, [r7, #16]
 800e268:	f383 8810 	msr	PRIMASK, r3
}
 800e26c:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800e26e:	bf00      	nop
}
 800e270:	371c      	adds	r7, #28
 800e272:	46bd      	mov	sp, r7
 800e274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e278:	4770      	bx	lr
 800e27a:	bf00      	nop
 800e27c:	20000024 	.word	0x20000024

0800e280 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800e280:	b480      	push	{r7}
 800e282:	b087      	sub	sp, #28
 800e284:	af00      	add	r7, sp, #0
 800e286:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e288:	f3ef 8310 	mrs	r3, PRIMASK
 800e28c:	60fb      	str	r3, [r7, #12]
  return(result);
 800e28e:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800e290:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800e292:	b672      	cpsid	i
}
 800e294:	bf00      	nop

  EvtSet |= EvtId_bm;
 800e296:	4b09      	ldr	r3, [pc, #36]	@ (800e2bc <UTIL_SEQ_SetEvt+0x3c>)
 800e298:	681a      	ldr	r2, [r3, #0]
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	4313      	orrs	r3, r2
 800e29e:	4a07      	ldr	r2, [pc, #28]	@ (800e2bc <UTIL_SEQ_SetEvt+0x3c>)
 800e2a0:	6013      	str	r3, [r2, #0]
 800e2a2:	697b      	ldr	r3, [r7, #20]
 800e2a4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e2a6:	693b      	ldr	r3, [r7, #16]
 800e2a8:	f383 8810 	msr	PRIMASK, r3
}
 800e2ac:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800e2ae:	bf00      	nop
}
 800e2b0:	371c      	adds	r7, #28
 800e2b2:	46bd      	mov	sp, r7
 800e2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2b8:	4770      	bx	lr
 800e2ba:	bf00      	nop
 800e2bc:	200021dc 	.word	0x200021dc

0800e2c0 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800e2c0:	b580      	push	{r7, lr}
 800e2c2:	b088      	sub	sp, #32
 800e2c4:	af00      	add	r7, sp, #0
 800e2c6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800e2c8:	4b1f      	ldr	r3, [pc, #124]	@ (800e348 <UTIL_SEQ_WaitEvt+0x88>)
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800e2ce:	4b1e      	ldr	r3, [pc, #120]	@ (800e348 <UTIL_SEQ_WaitEvt+0x88>)
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2d6:	d102      	bne.n	800e2de <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 800e2d8:	2300      	movs	r3, #0
 800e2da:	61fb      	str	r3, [r7, #28]
 800e2dc:	e005      	b.n	800e2ea <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 800e2de:	4b1a      	ldr	r3, [pc, #104]	@ (800e348 <UTIL_SEQ_WaitEvt+0x88>)
 800e2e0:	681b      	ldr	r3, [r3, #0]
 800e2e2:	2201      	movs	r2, #1
 800e2e4:	fa02 f303 	lsl.w	r3, r2, r3
 800e2e8:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800e2ea:	4b18      	ldr	r3, [pc, #96]	@ (800e34c <UTIL_SEQ_WaitEvt+0x8c>)
 800e2ec:	681b      	ldr	r3, [r3, #0]
 800e2ee:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 800e2f0:	4a16      	ldr	r2, [pc, #88]	@ (800e34c <UTIL_SEQ_WaitEvt+0x8c>)
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 800e2f6:	e003      	b.n	800e300 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 800e2f8:	6879      	ldr	r1, [r7, #4]
 800e2fa:	69f8      	ldr	r0, [r7, #28]
 800e2fc:	f7f3 f8fe 	bl	80014fc <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 800e300:	4b13      	ldr	r3, [pc, #76]	@ (800e350 <UTIL_SEQ_WaitEvt+0x90>)
 800e302:	681a      	ldr	r2, [r3, #0]
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	4013      	ands	r3, r2
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d0f5      	beq.n	800e2f8 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 800e30c:	4a0e      	ldr	r2, [pc, #56]	@ (800e348 <UTIL_SEQ_WaitEvt+0x88>)
 800e30e:	69bb      	ldr	r3, [r7, #24]
 800e310:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e312:	f3ef 8310 	mrs	r3, PRIMASK
 800e316:	60bb      	str	r3, [r7, #8]
  return(result);
 800e318:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800e31a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800e31c:	b672      	cpsid	i
}
 800e31e:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	43da      	mvns	r2, r3
 800e324:	4b0a      	ldr	r3, [pc, #40]	@ (800e350 <UTIL_SEQ_WaitEvt+0x90>)
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	4013      	ands	r3, r2
 800e32a:	4a09      	ldr	r2, [pc, #36]	@ (800e350 <UTIL_SEQ_WaitEvt+0x90>)
 800e32c:	6013      	str	r3, [r2, #0]
 800e32e:	693b      	ldr	r3, [r7, #16]
 800e330:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	f383 8810 	msr	PRIMASK, r3
}
 800e338:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 800e33a:	4a04      	ldr	r2, [pc, #16]	@ (800e34c <UTIL_SEQ_WaitEvt+0x8c>)
 800e33c:	697b      	ldr	r3, [r7, #20]
 800e33e:	6013      	str	r3, [r2, #0]
  return;
 800e340:	bf00      	nop
}
 800e342:	3720      	adds	r7, #32
 800e344:	46bd      	mov	sp, r7
 800e346:	bd80      	pop	{r7, pc}
 800e348:	200021e4 	.word	0x200021e4
 800e34c:	200021e0 	.word	0x200021e0
 800e350:	200021dc 	.word	0x200021dc

0800e354 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800e354:	b480      	push	{r7}
 800e356:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800e358:	bf00      	nop
}
 800e35a:	46bd      	mov	sp, r7
 800e35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e360:	4770      	bx	lr

0800e362 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800e362:	b480      	push	{r7}
 800e364:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800e366:	bf00      	nop
}
 800e368:	46bd      	mov	sp, r7
 800e36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e36e:	4770      	bx	lr

0800e370 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800e370:	b480      	push	{r7}
 800e372:	b085      	sub	sp, #20
 800e374:	af00      	add	r7, sp, #0
 800e376:	6078      	str	r0, [r7, #4]
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	60fb      	str	r3, [r7, #12]
  if (value == 0U)
 800e37c:	68fb      	ldr	r3, [r7, #12]
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d101      	bne.n	800e386 <SEQ_BitPosition+0x16>
    return 32U;
 800e382:	2320      	movs	r3, #32
 800e384:	e003      	b.n	800e38e <SEQ_BitPosition+0x1e>
  return __builtin_clz(value);
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	fab3 f383 	clz	r3, r3
 800e38c:	b2db      	uxtb	r3, r3
  return (uint8_t)(31 -__CLZ( Value ));
 800e38e:	f1c3 031f 	rsb	r3, r3, #31
 800e392:	b2db      	uxtb	r3, r3
}
 800e394:	4618      	mov	r0, r3
 800e396:	3714      	adds	r7, #20
 800e398:	46bd      	mov	sp, r7
 800e39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e39e:	4770      	bx	lr

0800e3a0 <std>:
 800e3a0:	2300      	movs	r3, #0
 800e3a2:	b510      	push	{r4, lr}
 800e3a4:	4604      	mov	r4, r0
 800e3a6:	e9c0 3300 	strd	r3, r3, [r0]
 800e3aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e3ae:	6083      	str	r3, [r0, #8]
 800e3b0:	8181      	strh	r1, [r0, #12]
 800e3b2:	6643      	str	r3, [r0, #100]	@ 0x64
 800e3b4:	81c2      	strh	r2, [r0, #14]
 800e3b6:	6183      	str	r3, [r0, #24]
 800e3b8:	4619      	mov	r1, r3
 800e3ba:	2208      	movs	r2, #8
 800e3bc:	305c      	adds	r0, #92	@ 0x5c
 800e3be:	f000 fa21 	bl	800e804 <memset>
 800e3c2:	4b0d      	ldr	r3, [pc, #52]	@ (800e3f8 <std+0x58>)
 800e3c4:	6263      	str	r3, [r4, #36]	@ 0x24
 800e3c6:	4b0d      	ldr	r3, [pc, #52]	@ (800e3fc <std+0x5c>)
 800e3c8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800e3ca:	4b0d      	ldr	r3, [pc, #52]	@ (800e400 <std+0x60>)
 800e3cc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800e3ce:	4b0d      	ldr	r3, [pc, #52]	@ (800e404 <std+0x64>)
 800e3d0:	6323      	str	r3, [r4, #48]	@ 0x30
 800e3d2:	4b0d      	ldr	r3, [pc, #52]	@ (800e408 <std+0x68>)
 800e3d4:	6224      	str	r4, [r4, #32]
 800e3d6:	429c      	cmp	r4, r3
 800e3d8:	d006      	beq.n	800e3e8 <std+0x48>
 800e3da:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800e3de:	4294      	cmp	r4, r2
 800e3e0:	d002      	beq.n	800e3e8 <std+0x48>
 800e3e2:	33d0      	adds	r3, #208	@ 0xd0
 800e3e4:	429c      	cmp	r4, r3
 800e3e6:	d105      	bne.n	800e3f4 <std+0x54>
 800e3e8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800e3ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e3f0:	f000 ba7a 	b.w	800e8e8 <__retarget_lock_init_recursive>
 800e3f4:	bd10      	pop	{r4, pc}
 800e3f6:	bf00      	nop
 800e3f8:	0800e655 	.word	0x0800e655
 800e3fc:	0800e677 	.word	0x0800e677
 800e400:	0800e6af 	.word	0x0800e6af
 800e404:	0800e6d3 	.word	0x0800e6d3
 800e408:	20002270 	.word	0x20002270

0800e40c <stdio_exit_handler>:
 800e40c:	4a02      	ldr	r2, [pc, #8]	@ (800e418 <stdio_exit_handler+0xc>)
 800e40e:	4903      	ldr	r1, [pc, #12]	@ (800e41c <stdio_exit_handler+0x10>)
 800e410:	4803      	ldr	r0, [pc, #12]	@ (800e420 <stdio_exit_handler+0x14>)
 800e412:	f000 b869 	b.w	800e4e8 <_fwalk_sglue>
 800e416:	bf00      	nop
 800e418:	2000002c 	.word	0x2000002c
 800e41c:	0800f455 	.word	0x0800f455
 800e420:	2000003c 	.word	0x2000003c

0800e424 <cleanup_stdio>:
 800e424:	6841      	ldr	r1, [r0, #4]
 800e426:	4b0c      	ldr	r3, [pc, #48]	@ (800e458 <cleanup_stdio+0x34>)
 800e428:	4299      	cmp	r1, r3
 800e42a:	b510      	push	{r4, lr}
 800e42c:	4604      	mov	r4, r0
 800e42e:	d001      	beq.n	800e434 <cleanup_stdio+0x10>
 800e430:	f001 f810 	bl	800f454 <_fflush_r>
 800e434:	68a1      	ldr	r1, [r4, #8]
 800e436:	4b09      	ldr	r3, [pc, #36]	@ (800e45c <cleanup_stdio+0x38>)
 800e438:	4299      	cmp	r1, r3
 800e43a:	d002      	beq.n	800e442 <cleanup_stdio+0x1e>
 800e43c:	4620      	mov	r0, r4
 800e43e:	f001 f809 	bl	800f454 <_fflush_r>
 800e442:	68e1      	ldr	r1, [r4, #12]
 800e444:	4b06      	ldr	r3, [pc, #24]	@ (800e460 <cleanup_stdio+0x3c>)
 800e446:	4299      	cmp	r1, r3
 800e448:	d004      	beq.n	800e454 <cleanup_stdio+0x30>
 800e44a:	4620      	mov	r0, r4
 800e44c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e450:	f001 b800 	b.w	800f454 <_fflush_r>
 800e454:	bd10      	pop	{r4, pc}
 800e456:	bf00      	nop
 800e458:	20002270 	.word	0x20002270
 800e45c:	200022d8 	.word	0x200022d8
 800e460:	20002340 	.word	0x20002340

0800e464 <global_stdio_init.part.0>:
 800e464:	b510      	push	{r4, lr}
 800e466:	4b0b      	ldr	r3, [pc, #44]	@ (800e494 <global_stdio_init.part.0+0x30>)
 800e468:	4c0b      	ldr	r4, [pc, #44]	@ (800e498 <global_stdio_init.part.0+0x34>)
 800e46a:	4a0c      	ldr	r2, [pc, #48]	@ (800e49c <global_stdio_init.part.0+0x38>)
 800e46c:	601a      	str	r2, [r3, #0]
 800e46e:	4620      	mov	r0, r4
 800e470:	2200      	movs	r2, #0
 800e472:	2104      	movs	r1, #4
 800e474:	f7ff ff94 	bl	800e3a0 <std>
 800e478:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800e47c:	2201      	movs	r2, #1
 800e47e:	2109      	movs	r1, #9
 800e480:	f7ff ff8e 	bl	800e3a0 <std>
 800e484:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800e488:	2202      	movs	r2, #2
 800e48a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e48e:	2112      	movs	r1, #18
 800e490:	f7ff bf86 	b.w	800e3a0 <std>
 800e494:	200023a8 	.word	0x200023a8
 800e498:	20002270 	.word	0x20002270
 800e49c:	0800e40d 	.word	0x0800e40d

0800e4a0 <__sfp_lock_acquire>:
 800e4a0:	4801      	ldr	r0, [pc, #4]	@ (800e4a8 <__sfp_lock_acquire+0x8>)
 800e4a2:	f000 ba22 	b.w	800e8ea <__retarget_lock_acquire_recursive>
 800e4a6:	bf00      	nop
 800e4a8:	200023b1 	.word	0x200023b1

0800e4ac <__sfp_lock_release>:
 800e4ac:	4801      	ldr	r0, [pc, #4]	@ (800e4b4 <__sfp_lock_release+0x8>)
 800e4ae:	f000 ba1d 	b.w	800e8ec <__retarget_lock_release_recursive>
 800e4b2:	bf00      	nop
 800e4b4:	200023b1 	.word	0x200023b1

0800e4b8 <__sinit>:
 800e4b8:	b510      	push	{r4, lr}
 800e4ba:	4604      	mov	r4, r0
 800e4bc:	f7ff fff0 	bl	800e4a0 <__sfp_lock_acquire>
 800e4c0:	6a23      	ldr	r3, [r4, #32]
 800e4c2:	b11b      	cbz	r3, 800e4cc <__sinit+0x14>
 800e4c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e4c8:	f7ff bff0 	b.w	800e4ac <__sfp_lock_release>
 800e4cc:	4b04      	ldr	r3, [pc, #16]	@ (800e4e0 <__sinit+0x28>)
 800e4ce:	6223      	str	r3, [r4, #32]
 800e4d0:	4b04      	ldr	r3, [pc, #16]	@ (800e4e4 <__sinit+0x2c>)
 800e4d2:	681b      	ldr	r3, [r3, #0]
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d1f5      	bne.n	800e4c4 <__sinit+0xc>
 800e4d8:	f7ff ffc4 	bl	800e464 <global_stdio_init.part.0>
 800e4dc:	e7f2      	b.n	800e4c4 <__sinit+0xc>
 800e4de:	bf00      	nop
 800e4e0:	0800e425 	.word	0x0800e425
 800e4e4:	200023a8 	.word	0x200023a8

0800e4e8 <_fwalk_sglue>:
 800e4e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e4ec:	4607      	mov	r7, r0
 800e4ee:	4688      	mov	r8, r1
 800e4f0:	4614      	mov	r4, r2
 800e4f2:	2600      	movs	r6, #0
 800e4f4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e4f8:	f1b9 0901 	subs.w	r9, r9, #1
 800e4fc:	d505      	bpl.n	800e50a <_fwalk_sglue+0x22>
 800e4fe:	6824      	ldr	r4, [r4, #0]
 800e500:	2c00      	cmp	r4, #0
 800e502:	d1f7      	bne.n	800e4f4 <_fwalk_sglue+0xc>
 800e504:	4630      	mov	r0, r6
 800e506:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e50a:	89ab      	ldrh	r3, [r5, #12]
 800e50c:	2b01      	cmp	r3, #1
 800e50e:	d907      	bls.n	800e520 <_fwalk_sglue+0x38>
 800e510:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e514:	3301      	adds	r3, #1
 800e516:	d003      	beq.n	800e520 <_fwalk_sglue+0x38>
 800e518:	4629      	mov	r1, r5
 800e51a:	4638      	mov	r0, r7
 800e51c:	47c0      	blx	r8
 800e51e:	4306      	orrs	r6, r0
 800e520:	3568      	adds	r5, #104	@ 0x68
 800e522:	e7e9      	b.n	800e4f8 <_fwalk_sglue+0x10>

0800e524 <iprintf>:
 800e524:	b40f      	push	{r0, r1, r2, r3}
 800e526:	b507      	push	{r0, r1, r2, lr}
 800e528:	4906      	ldr	r1, [pc, #24]	@ (800e544 <iprintf+0x20>)
 800e52a:	ab04      	add	r3, sp, #16
 800e52c:	6808      	ldr	r0, [r1, #0]
 800e52e:	f853 2b04 	ldr.w	r2, [r3], #4
 800e532:	6881      	ldr	r1, [r0, #8]
 800e534:	9301      	str	r3, [sp, #4]
 800e536:	f000 fc63 	bl	800ee00 <_vfiprintf_r>
 800e53a:	b003      	add	sp, #12
 800e53c:	f85d eb04 	ldr.w	lr, [sp], #4
 800e540:	b004      	add	sp, #16
 800e542:	4770      	bx	lr
 800e544:	20000038 	.word	0x20000038

0800e548 <putchar>:
 800e548:	4b02      	ldr	r3, [pc, #8]	@ (800e554 <putchar+0xc>)
 800e54a:	4601      	mov	r1, r0
 800e54c:	6818      	ldr	r0, [r3, #0]
 800e54e:	6882      	ldr	r2, [r0, #8]
 800e550:	f001 b80a 	b.w	800f568 <_putc_r>
 800e554:	20000038 	.word	0x20000038

0800e558 <_puts_r>:
 800e558:	6a03      	ldr	r3, [r0, #32]
 800e55a:	b570      	push	{r4, r5, r6, lr}
 800e55c:	6884      	ldr	r4, [r0, #8]
 800e55e:	4605      	mov	r5, r0
 800e560:	460e      	mov	r6, r1
 800e562:	b90b      	cbnz	r3, 800e568 <_puts_r+0x10>
 800e564:	f7ff ffa8 	bl	800e4b8 <__sinit>
 800e568:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e56a:	07db      	lsls	r3, r3, #31
 800e56c:	d405      	bmi.n	800e57a <_puts_r+0x22>
 800e56e:	89a3      	ldrh	r3, [r4, #12]
 800e570:	0598      	lsls	r0, r3, #22
 800e572:	d402      	bmi.n	800e57a <_puts_r+0x22>
 800e574:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e576:	f000 f9b8 	bl	800e8ea <__retarget_lock_acquire_recursive>
 800e57a:	89a3      	ldrh	r3, [r4, #12]
 800e57c:	0719      	lsls	r1, r3, #28
 800e57e:	d502      	bpl.n	800e586 <_puts_r+0x2e>
 800e580:	6923      	ldr	r3, [r4, #16]
 800e582:	2b00      	cmp	r3, #0
 800e584:	d135      	bne.n	800e5f2 <_puts_r+0x9a>
 800e586:	4621      	mov	r1, r4
 800e588:	4628      	mov	r0, r5
 800e58a:	f000 f8e5 	bl	800e758 <__swsetup_r>
 800e58e:	b380      	cbz	r0, 800e5f2 <_puts_r+0x9a>
 800e590:	f04f 35ff 	mov.w	r5, #4294967295
 800e594:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e596:	07da      	lsls	r2, r3, #31
 800e598:	d405      	bmi.n	800e5a6 <_puts_r+0x4e>
 800e59a:	89a3      	ldrh	r3, [r4, #12]
 800e59c:	059b      	lsls	r3, r3, #22
 800e59e:	d402      	bmi.n	800e5a6 <_puts_r+0x4e>
 800e5a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e5a2:	f000 f9a3 	bl	800e8ec <__retarget_lock_release_recursive>
 800e5a6:	4628      	mov	r0, r5
 800e5a8:	bd70      	pop	{r4, r5, r6, pc}
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	da04      	bge.n	800e5b8 <_puts_r+0x60>
 800e5ae:	69a2      	ldr	r2, [r4, #24]
 800e5b0:	429a      	cmp	r2, r3
 800e5b2:	dc17      	bgt.n	800e5e4 <_puts_r+0x8c>
 800e5b4:	290a      	cmp	r1, #10
 800e5b6:	d015      	beq.n	800e5e4 <_puts_r+0x8c>
 800e5b8:	6823      	ldr	r3, [r4, #0]
 800e5ba:	1c5a      	adds	r2, r3, #1
 800e5bc:	6022      	str	r2, [r4, #0]
 800e5be:	7019      	strb	r1, [r3, #0]
 800e5c0:	68a3      	ldr	r3, [r4, #8]
 800e5c2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800e5c6:	3b01      	subs	r3, #1
 800e5c8:	60a3      	str	r3, [r4, #8]
 800e5ca:	2900      	cmp	r1, #0
 800e5cc:	d1ed      	bne.n	800e5aa <_puts_r+0x52>
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	da11      	bge.n	800e5f6 <_puts_r+0x9e>
 800e5d2:	4622      	mov	r2, r4
 800e5d4:	210a      	movs	r1, #10
 800e5d6:	4628      	mov	r0, r5
 800e5d8:	f000 f87f 	bl	800e6da <__swbuf_r>
 800e5dc:	3001      	adds	r0, #1
 800e5de:	d0d7      	beq.n	800e590 <_puts_r+0x38>
 800e5e0:	250a      	movs	r5, #10
 800e5e2:	e7d7      	b.n	800e594 <_puts_r+0x3c>
 800e5e4:	4622      	mov	r2, r4
 800e5e6:	4628      	mov	r0, r5
 800e5e8:	f000 f877 	bl	800e6da <__swbuf_r>
 800e5ec:	3001      	adds	r0, #1
 800e5ee:	d1e7      	bne.n	800e5c0 <_puts_r+0x68>
 800e5f0:	e7ce      	b.n	800e590 <_puts_r+0x38>
 800e5f2:	3e01      	subs	r6, #1
 800e5f4:	e7e4      	b.n	800e5c0 <_puts_r+0x68>
 800e5f6:	6823      	ldr	r3, [r4, #0]
 800e5f8:	1c5a      	adds	r2, r3, #1
 800e5fa:	6022      	str	r2, [r4, #0]
 800e5fc:	220a      	movs	r2, #10
 800e5fe:	701a      	strb	r2, [r3, #0]
 800e600:	e7ee      	b.n	800e5e0 <_puts_r+0x88>
	...

0800e604 <puts>:
 800e604:	4b02      	ldr	r3, [pc, #8]	@ (800e610 <puts+0xc>)
 800e606:	4601      	mov	r1, r0
 800e608:	6818      	ldr	r0, [r3, #0]
 800e60a:	f7ff bfa5 	b.w	800e558 <_puts_r>
 800e60e:	bf00      	nop
 800e610:	20000038 	.word	0x20000038

0800e614 <siprintf>:
 800e614:	b40e      	push	{r1, r2, r3}
 800e616:	b500      	push	{lr}
 800e618:	b09c      	sub	sp, #112	@ 0x70
 800e61a:	ab1d      	add	r3, sp, #116	@ 0x74
 800e61c:	9002      	str	r0, [sp, #8]
 800e61e:	9006      	str	r0, [sp, #24]
 800e620:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800e624:	4809      	ldr	r0, [pc, #36]	@ (800e64c <siprintf+0x38>)
 800e626:	9107      	str	r1, [sp, #28]
 800e628:	9104      	str	r1, [sp, #16]
 800e62a:	4909      	ldr	r1, [pc, #36]	@ (800e650 <siprintf+0x3c>)
 800e62c:	f853 2b04 	ldr.w	r2, [r3], #4
 800e630:	9105      	str	r1, [sp, #20]
 800e632:	6800      	ldr	r0, [r0, #0]
 800e634:	9301      	str	r3, [sp, #4]
 800e636:	a902      	add	r1, sp, #8
 800e638:	f000 fabc 	bl	800ebb4 <_svfiprintf_r>
 800e63c:	9b02      	ldr	r3, [sp, #8]
 800e63e:	2200      	movs	r2, #0
 800e640:	701a      	strb	r2, [r3, #0]
 800e642:	b01c      	add	sp, #112	@ 0x70
 800e644:	f85d eb04 	ldr.w	lr, [sp], #4
 800e648:	b003      	add	sp, #12
 800e64a:	4770      	bx	lr
 800e64c:	20000038 	.word	0x20000038
 800e650:	ffff0208 	.word	0xffff0208

0800e654 <__sread>:
 800e654:	b510      	push	{r4, lr}
 800e656:	460c      	mov	r4, r1
 800e658:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e65c:	f000 f8fc 	bl	800e858 <_read_r>
 800e660:	2800      	cmp	r0, #0
 800e662:	bfab      	itete	ge
 800e664:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800e666:	89a3      	ldrhlt	r3, [r4, #12]
 800e668:	181b      	addge	r3, r3, r0
 800e66a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800e66e:	bfac      	ite	ge
 800e670:	6563      	strge	r3, [r4, #84]	@ 0x54
 800e672:	81a3      	strhlt	r3, [r4, #12]
 800e674:	bd10      	pop	{r4, pc}

0800e676 <__swrite>:
 800e676:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e67a:	461f      	mov	r7, r3
 800e67c:	898b      	ldrh	r3, [r1, #12]
 800e67e:	05db      	lsls	r3, r3, #23
 800e680:	4605      	mov	r5, r0
 800e682:	460c      	mov	r4, r1
 800e684:	4616      	mov	r6, r2
 800e686:	d505      	bpl.n	800e694 <__swrite+0x1e>
 800e688:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e68c:	2302      	movs	r3, #2
 800e68e:	2200      	movs	r2, #0
 800e690:	f000 f8d0 	bl	800e834 <_lseek_r>
 800e694:	89a3      	ldrh	r3, [r4, #12]
 800e696:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e69a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e69e:	81a3      	strh	r3, [r4, #12]
 800e6a0:	4632      	mov	r2, r6
 800e6a2:	463b      	mov	r3, r7
 800e6a4:	4628      	mov	r0, r5
 800e6a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e6aa:	f000 b8e7 	b.w	800e87c <_write_r>

0800e6ae <__sseek>:
 800e6ae:	b510      	push	{r4, lr}
 800e6b0:	460c      	mov	r4, r1
 800e6b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e6b6:	f000 f8bd 	bl	800e834 <_lseek_r>
 800e6ba:	1c43      	adds	r3, r0, #1
 800e6bc:	89a3      	ldrh	r3, [r4, #12]
 800e6be:	bf15      	itete	ne
 800e6c0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800e6c2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800e6c6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800e6ca:	81a3      	strheq	r3, [r4, #12]
 800e6cc:	bf18      	it	ne
 800e6ce:	81a3      	strhne	r3, [r4, #12]
 800e6d0:	bd10      	pop	{r4, pc}

0800e6d2 <__sclose>:
 800e6d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e6d6:	f000 b89d 	b.w	800e814 <_close_r>

0800e6da <__swbuf_r>:
 800e6da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e6dc:	460e      	mov	r6, r1
 800e6de:	4614      	mov	r4, r2
 800e6e0:	4605      	mov	r5, r0
 800e6e2:	b118      	cbz	r0, 800e6ec <__swbuf_r+0x12>
 800e6e4:	6a03      	ldr	r3, [r0, #32]
 800e6e6:	b90b      	cbnz	r3, 800e6ec <__swbuf_r+0x12>
 800e6e8:	f7ff fee6 	bl	800e4b8 <__sinit>
 800e6ec:	69a3      	ldr	r3, [r4, #24]
 800e6ee:	60a3      	str	r3, [r4, #8]
 800e6f0:	89a3      	ldrh	r3, [r4, #12]
 800e6f2:	071a      	lsls	r2, r3, #28
 800e6f4:	d501      	bpl.n	800e6fa <__swbuf_r+0x20>
 800e6f6:	6923      	ldr	r3, [r4, #16]
 800e6f8:	b943      	cbnz	r3, 800e70c <__swbuf_r+0x32>
 800e6fa:	4621      	mov	r1, r4
 800e6fc:	4628      	mov	r0, r5
 800e6fe:	f000 f82b 	bl	800e758 <__swsetup_r>
 800e702:	b118      	cbz	r0, 800e70c <__swbuf_r+0x32>
 800e704:	f04f 37ff 	mov.w	r7, #4294967295
 800e708:	4638      	mov	r0, r7
 800e70a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e70c:	6823      	ldr	r3, [r4, #0]
 800e70e:	6922      	ldr	r2, [r4, #16]
 800e710:	1a98      	subs	r0, r3, r2
 800e712:	6963      	ldr	r3, [r4, #20]
 800e714:	b2f6      	uxtb	r6, r6
 800e716:	4283      	cmp	r3, r0
 800e718:	4637      	mov	r7, r6
 800e71a:	dc05      	bgt.n	800e728 <__swbuf_r+0x4e>
 800e71c:	4621      	mov	r1, r4
 800e71e:	4628      	mov	r0, r5
 800e720:	f000 fe98 	bl	800f454 <_fflush_r>
 800e724:	2800      	cmp	r0, #0
 800e726:	d1ed      	bne.n	800e704 <__swbuf_r+0x2a>
 800e728:	68a3      	ldr	r3, [r4, #8]
 800e72a:	3b01      	subs	r3, #1
 800e72c:	60a3      	str	r3, [r4, #8]
 800e72e:	6823      	ldr	r3, [r4, #0]
 800e730:	1c5a      	adds	r2, r3, #1
 800e732:	6022      	str	r2, [r4, #0]
 800e734:	701e      	strb	r6, [r3, #0]
 800e736:	6962      	ldr	r2, [r4, #20]
 800e738:	1c43      	adds	r3, r0, #1
 800e73a:	429a      	cmp	r2, r3
 800e73c:	d004      	beq.n	800e748 <__swbuf_r+0x6e>
 800e73e:	89a3      	ldrh	r3, [r4, #12]
 800e740:	07db      	lsls	r3, r3, #31
 800e742:	d5e1      	bpl.n	800e708 <__swbuf_r+0x2e>
 800e744:	2e0a      	cmp	r6, #10
 800e746:	d1df      	bne.n	800e708 <__swbuf_r+0x2e>
 800e748:	4621      	mov	r1, r4
 800e74a:	4628      	mov	r0, r5
 800e74c:	f000 fe82 	bl	800f454 <_fflush_r>
 800e750:	2800      	cmp	r0, #0
 800e752:	d0d9      	beq.n	800e708 <__swbuf_r+0x2e>
 800e754:	e7d6      	b.n	800e704 <__swbuf_r+0x2a>
	...

0800e758 <__swsetup_r>:
 800e758:	b538      	push	{r3, r4, r5, lr}
 800e75a:	4b29      	ldr	r3, [pc, #164]	@ (800e800 <__swsetup_r+0xa8>)
 800e75c:	4605      	mov	r5, r0
 800e75e:	6818      	ldr	r0, [r3, #0]
 800e760:	460c      	mov	r4, r1
 800e762:	b118      	cbz	r0, 800e76c <__swsetup_r+0x14>
 800e764:	6a03      	ldr	r3, [r0, #32]
 800e766:	b90b      	cbnz	r3, 800e76c <__swsetup_r+0x14>
 800e768:	f7ff fea6 	bl	800e4b8 <__sinit>
 800e76c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e770:	0719      	lsls	r1, r3, #28
 800e772:	d422      	bmi.n	800e7ba <__swsetup_r+0x62>
 800e774:	06da      	lsls	r2, r3, #27
 800e776:	d407      	bmi.n	800e788 <__swsetup_r+0x30>
 800e778:	2209      	movs	r2, #9
 800e77a:	602a      	str	r2, [r5, #0]
 800e77c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e780:	81a3      	strh	r3, [r4, #12]
 800e782:	f04f 30ff 	mov.w	r0, #4294967295
 800e786:	e033      	b.n	800e7f0 <__swsetup_r+0x98>
 800e788:	0758      	lsls	r0, r3, #29
 800e78a:	d512      	bpl.n	800e7b2 <__swsetup_r+0x5a>
 800e78c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e78e:	b141      	cbz	r1, 800e7a2 <__swsetup_r+0x4a>
 800e790:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e794:	4299      	cmp	r1, r3
 800e796:	d002      	beq.n	800e79e <__swsetup_r+0x46>
 800e798:	4628      	mov	r0, r5
 800e79a:	f000 f8b7 	bl	800e90c <_free_r>
 800e79e:	2300      	movs	r3, #0
 800e7a0:	6363      	str	r3, [r4, #52]	@ 0x34
 800e7a2:	89a3      	ldrh	r3, [r4, #12]
 800e7a4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e7a8:	81a3      	strh	r3, [r4, #12]
 800e7aa:	2300      	movs	r3, #0
 800e7ac:	6063      	str	r3, [r4, #4]
 800e7ae:	6923      	ldr	r3, [r4, #16]
 800e7b0:	6023      	str	r3, [r4, #0]
 800e7b2:	89a3      	ldrh	r3, [r4, #12]
 800e7b4:	f043 0308 	orr.w	r3, r3, #8
 800e7b8:	81a3      	strh	r3, [r4, #12]
 800e7ba:	6923      	ldr	r3, [r4, #16]
 800e7bc:	b94b      	cbnz	r3, 800e7d2 <__swsetup_r+0x7a>
 800e7be:	89a3      	ldrh	r3, [r4, #12]
 800e7c0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e7c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e7c8:	d003      	beq.n	800e7d2 <__swsetup_r+0x7a>
 800e7ca:	4621      	mov	r1, r4
 800e7cc:	4628      	mov	r0, r5
 800e7ce:	f000 fe8f 	bl	800f4f0 <__smakebuf_r>
 800e7d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e7d6:	f013 0201 	ands.w	r2, r3, #1
 800e7da:	d00a      	beq.n	800e7f2 <__swsetup_r+0x9a>
 800e7dc:	2200      	movs	r2, #0
 800e7de:	60a2      	str	r2, [r4, #8]
 800e7e0:	6962      	ldr	r2, [r4, #20]
 800e7e2:	4252      	negs	r2, r2
 800e7e4:	61a2      	str	r2, [r4, #24]
 800e7e6:	6922      	ldr	r2, [r4, #16]
 800e7e8:	b942      	cbnz	r2, 800e7fc <__swsetup_r+0xa4>
 800e7ea:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e7ee:	d1c5      	bne.n	800e77c <__swsetup_r+0x24>
 800e7f0:	bd38      	pop	{r3, r4, r5, pc}
 800e7f2:	0799      	lsls	r1, r3, #30
 800e7f4:	bf58      	it	pl
 800e7f6:	6962      	ldrpl	r2, [r4, #20]
 800e7f8:	60a2      	str	r2, [r4, #8]
 800e7fa:	e7f4      	b.n	800e7e6 <__swsetup_r+0x8e>
 800e7fc:	2000      	movs	r0, #0
 800e7fe:	e7f7      	b.n	800e7f0 <__swsetup_r+0x98>
 800e800:	20000038 	.word	0x20000038

0800e804 <memset>:
 800e804:	4402      	add	r2, r0
 800e806:	4603      	mov	r3, r0
 800e808:	4293      	cmp	r3, r2
 800e80a:	d100      	bne.n	800e80e <memset+0xa>
 800e80c:	4770      	bx	lr
 800e80e:	f803 1b01 	strb.w	r1, [r3], #1
 800e812:	e7f9      	b.n	800e808 <memset+0x4>

0800e814 <_close_r>:
 800e814:	b538      	push	{r3, r4, r5, lr}
 800e816:	4d06      	ldr	r5, [pc, #24]	@ (800e830 <_close_r+0x1c>)
 800e818:	2300      	movs	r3, #0
 800e81a:	4604      	mov	r4, r0
 800e81c:	4608      	mov	r0, r1
 800e81e:	602b      	str	r3, [r5, #0]
 800e820:	f000 ff58 	bl	800f6d4 <_close>
 800e824:	1c43      	adds	r3, r0, #1
 800e826:	d102      	bne.n	800e82e <_close_r+0x1a>
 800e828:	682b      	ldr	r3, [r5, #0]
 800e82a:	b103      	cbz	r3, 800e82e <_close_r+0x1a>
 800e82c:	6023      	str	r3, [r4, #0]
 800e82e:	bd38      	pop	{r3, r4, r5, pc}
 800e830:	200023ac 	.word	0x200023ac

0800e834 <_lseek_r>:
 800e834:	b538      	push	{r3, r4, r5, lr}
 800e836:	4d07      	ldr	r5, [pc, #28]	@ (800e854 <_lseek_r+0x20>)
 800e838:	4604      	mov	r4, r0
 800e83a:	4608      	mov	r0, r1
 800e83c:	4611      	mov	r1, r2
 800e83e:	2200      	movs	r2, #0
 800e840:	602a      	str	r2, [r5, #0]
 800e842:	461a      	mov	r2, r3
 800e844:	f000 ff5e 	bl	800f704 <_lseek>
 800e848:	1c43      	adds	r3, r0, #1
 800e84a:	d102      	bne.n	800e852 <_lseek_r+0x1e>
 800e84c:	682b      	ldr	r3, [r5, #0]
 800e84e:	b103      	cbz	r3, 800e852 <_lseek_r+0x1e>
 800e850:	6023      	str	r3, [r4, #0]
 800e852:	bd38      	pop	{r3, r4, r5, pc}
 800e854:	200023ac 	.word	0x200023ac

0800e858 <_read_r>:
 800e858:	b538      	push	{r3, r4, r5, lr}
 800e85a:	4d07      	ldr	r5, [pc, #28]	@ (800e878 <_read_r+0x20>)
 800e85c:	4604      	mov	r4, r0
 800e85e:	4608      	mov	r0, r1
 800e860:	4611      	mov	r1, r2
 800e862:	2200      	movs	r2, #0
 800e864:	602a      	str	r2, [r5, #0]
 800e866:	461a      	mov	r2, r3
 800e868:	f000 ff54 	bl	800f714 <_read>
 800e86c:	1c43      	adds	r3, r0, #1
 800e86e:	d102      	bne.n	800e876 <_read_r+0x1e>
 800e870:	682b      	ldr	r3, [r5, #0]
 800e872:	b103      	cbz	r3, 800e876 <_read_r+0x1e>
 800e874:	6023      	str	r3, [r4, #0]
 800e876:	bd38      	pop	{r3, r4, r5, pc}
 800e878:	200023ac 	.word	0x200023ac

0800e87c <_write_r>:
 800e87c:	b538      	push	{r3, r4, r5, lr}
 800e87e:	4d07      	ldr	r5, [pc, #28]	@ (800e89c <_write_r+0x20>)
 800e880:	4604      	mov	r4, r0
 800e882:	4608      	mov	r0, r1
 800e884:	4611      	mov	r1, r2
 800e886:	2200      	movs	r2, #0
 800e888:	602a      	str	r2, [r5, #0]
 800e88a:	461a      	mov	r2, r3
 800e88c:	f7fc ff46 	bl	800b71c <_write>
 800e890:	1c43      	adds	r3, r0, #1
 800e892:	d102      	bne.n	800e89a <_write_r+0x1e>
 800e894:	682b      	ldr	r3, [r5, #0]
 800e896:	b103      	cbz	r3, 800e89a <_write_r+0x1e>
 800e898:	6023      	str	r3, [r4, #0]
 800e89a:	bd38      	pop	{r3, r4, r5, pc}
 800e89c:	200023ac 	.word	0x200023ac

0800e8a0 <__libc_init_array>:
 800e8a0:	b570      	push	{r4, r5, r6, lr}
 800e8a2:	4d0d      	ldr	r5, [pc, #52]	@ (800e8d8 <__libc_init_array+0x38>)
 800e8a4:	4c0d      	ldr	r4, [pc, #52]	@ (800e8dc <__libc_init_array+0x3c>)
 800e8a6:	1b64      	subs	r4, r4, r5
 800e8a8:	10a4      	asrs	r4, r4, #2
 800e8aa:	2600      	movs	r6, #0
 800e8ac:	42a6      	cmp	r6, r4
 800e8ae:	d109      	bne.n	800e8c4 <__libc_init_array+0x24>
 800e8b0:	4d0b      	ldr	r5, [pc, #44]	@ (800e8e0 <__libc_init_array+0x40>)
 800e8b2:	4c0c      	ldr	r4, [pc, #48]	@ (800e8e4 <__libc_init_array+0x44>)
 800e8b4:	f000 ff44 	bl	800f740 <_init>
 800e8b8:	1b64      	subs	r4, r4, r5
 800e8ba:	10a4      	asrs	r4, r4, #2
 800e8bc:	2600      	movs	r6, #0
 800e8be:	42a6      	cmp	r6, r4
 800e8c0:	d105      	bne.n	800e8ce <__libc_init_array+0x2e>
 800e8c2:	bd70      	pop	{r4, r5, r6, pc}
 800e8c4:	f855 3b04 	ldr.w	r3, [r5], #4
 800e8c8:	4798      	blx	r3
 800e8ca:	3601      	adds	r6, #1
 800e8cc:	e7ee      	b.n	800e8ac <__libc_init_array+0xc>
 800e8ce:	f855 3b04 	ldr.w	r3, [r5], #4
 800e8d2:	4798      	blx	r3
 800e8d4:	3601      	adds	r6, #1
 800e8d6:	e7f2      	b.n	800e8be <__libc_init_array+0x1e>
 800e8d8:	08010d98 	.word	0x08010d98
 800e8dc:	08010d98 	.word	0x08010d98
 800e8e0:	08010d98 	.word	0x08010d98
 800e8e4:	08010d9c 	.word	0x08010d9c

0800e8e8 <__retarget_lock_init_recursive>:
 800e8e8:	4770      	bx	lr

0800e8ea <__retarget_lock_acquire_recursive>:
 800e8ea:	4770      	bx	lr

0800e8ec <__retarget_lock_release_recursive>:
 800e8ec:	4770      	bx	lr

0800e8ee <memcpy>:
 800e8ee:	440a      	add	r2, r1
 800e8f0:	4291      	cmp	r1, r2
 800e8f2:	f100 33ff 	add.w	r3, r0, #4294967295
 800e8f6:	d100      	bne.n	800e8fa <memcpy+0xc>
 800e8f8:	4770      	bx	lr
 800e8fa:	b510      	push	{r4, lr}
 800e8fc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e900:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e904:	4291      	cmp	r1, r2
 800e906:	d1f9      	bne.n	800e8fc <memcpy+0xe>
 800e908:	bd10      	pop	{r4, pc}
	...

0800e90c <_free_r>:
 800e90c:	b538      	push	{r3, r4, r5, lr}
 800e90e:	4605      	mov	r5, r0
 800e910:	2900      	cmp	r1, #0
 800e912:	d041      	beq.n	800e998 <_free_r+0x8c>
 800e914:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e918:	1f0c      	subs	r4, r1, #4
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	bfb8      	it	lt
 800e91e:	18e4      	addlt	r4, r4, r3
 800e920:	f000 f8e0 	bl	800eae4 <__malloc_lock>
 800e924:	4a1d      	ldr	r2, [pc, #116]	@ (800e99c <_free_r+0x90>)
 800e926:	6813      	ldr	r3, [r2, #0]
 800e928:	b933      	cbnz	r3, 800e938 <_free_r+0x2c>
 800e92a:	6063      	str	r3, [r4, #4]
 800e92c:	6014      	str	r4, [r2, #0]
 800e92e:	4628      	mov	r0, r5
 800e930:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e934:	f000 b8dc 	b.w	800eaf0 <__malloc_unlock>
 800e938:	42a3      	cmp	r3, r4
 800e93a:	d908      	bls.n	800e94e <_free_r+0x42>
 800e93c:	6820      	ldr	r0, [r4, #0]
 800e93e:	1821      	adds	r1, r4, r0
 800e940:	428b      	cmp	r3, r1
 800e942:	bf01      	itttt	eq
 800e944:	6819      	ldreq	r1, [r3, #0]
 800e946:	685b      	ldreq	r3, [r3, #4]
 800e948:	1809      	addeq	r1, r1, r0
 800e94a:	6021      	streq	r1, [r4, #0]
 800e94c:	e7ed      	b.n	800e92a <_free_r+0x1e>
 800e94e:	461a      	mov	r2, r3
 800e950:	685b      	ldr	r3, [r3, #4]
 800e952:	b10b      	cbz	r3, 800e958 <_free_r+0x4c>
 800e954:	42a3      	cmp	r3, r4
 800e956:	d9fa      	bls.n	800e94e <_free_r+0x42>
 800e958:	6811      	ldr	r1, [r2, #0]
 800e95a:	1850      	adds	r0, r2, r1
 800e95c:	42a0      	cmp	r0, r4
 800e95e:	d10b      	bne.n	800e978 <_free_r+0x6c>
 800e960:	6820      	ldr	r0, [r4, #0]
 800e962:	4401      	add	r1, r0
 800e964:	1850      	adds	r0, r2, r1
 800e966:	4283      	cmp	r3, r0
 800e968:	6011      	str	r1, [r2, #0]
 800e96a:	d1e0      	bne.n	800e92e <_free_r+0x22>
 800e96c:	6818      	ldr	r0, [r3, #0]
 800e96e:	685b      	ldr	r3, [r3, #4]
 800e970:	6053      	str	r3, [r2, #4]
 800e972:	4408      	add	r0, r1
 800e974:	6010      	str	r0, [r2, #0]
 800e976:	e7da      	b.n	800e92e <_free_r+0x22>
 800e978:	d902      	bls.n	800e980 <_free_r+0x74>
 800e97a:	230c      	movs	r3, #12
 800e97c:	602b      	str	r3, [r5, #0]
 800e97e:	e7d6      	b.n	800e92e <_free_r+0x22>
 800e980:	6820      	ldr	r0, [r4, #0]
 800e982:	1821      	adds	r1, r4, r0
 800e984:	428b      	cmp	r3, r1
 800e986:	bf04      	itt	eq
 800e988:	6819      	ldreq	r1, [r3, #0]
 800e98a:	685b      	ldreq	r3, [r3, #4]
 800e98c:	6063      	str	r3, [r4, #4]
 800e98e:	bf04      	itt	eq
 800e990:	1809      	addeq	r1, r1, r0
 800e992:	6021      	streq	r1, [r4, #0]
 800e994:	6054      	str	r4, [r2, #4]
 800e996:	e7ca      	b.n	800e92e <_free_r+0x22>
 800e998:	bd38      	pop	{r3, r4, r5, pc}
 800e99a:	bf00      	nop
 800e99c:	200023b8 	.word	0x200023b8

0800e9a0 <sbrk_aligned>:
 800e9a0:	b570      	push	{r4, r5, r6, lr}
 800e9a2:	4e0f      	ldr	r6, [pc, #60]	@ (800e9e0 <sbrk_aligned+0x40>)
 800e9a4:	460c      	mov	r4, r1
 800e9a6:	6831      	ldr	r1, [r6, #0]
 800e9a8:	4605      	mov	r5, r0
 800e9aa:	b911      	cbnz	r1, 800e9b2 <sbrk_aligned+0x12>
 800e9ac:	f000 fe4c 	bl	800f648 <_sbrk_r>
 800e9b0:	6030      	str	r0, [r6, #0]
 800e9b2:	4621      	mov	r1, r4
 800e9b4:	4628      	mov	r0, r5
 800e9b6:	f000 fe47 	bl	800f648 <_sbrk_r>
 800e9ba:	1c43      	adds	r3, r0, #1
 800e9bc:	d103      	bne.n	800e9c6 <sbrk_aligned+0x26>
 800e9be:	f04f 34ff 	mov.w	r4, #4294967295
 800e9c2:	4620      	mov	r0, r4
 800e9c4:	bd70      	pop	{r4, r5, r6, pc}
 800e9c6:	1cc4      	adds	r4, r0, #3
 800e9c8:	f024 0403 	bic.w	r4, r4, #3
 800e9cc:	42a0      	cmp	r0, r4
 800e9ce:	d0f8      	beq.n	800e9c2 <sbrk_aligned+0x22>
 800e9d0:	1a21      	subs	r1, r4, r0
 800e9d2:	4628      	mov	r0, r5
 800e9d4:	f000 fe38 	bl	800f648 <_sbrk_r>
 800e9d8:	3001      	adds	r0, #1
 800e9da:	d1f2      	bne.n	800e9c2 <sbrk_aligned+0x22>
 800e9dc:	e7ef      	b.n	800e9be <sbrk_aligned+0x1e>
 800e9de:	bf00      	nop
 800e9e0:	200023b4 	.word	0x200023b4

0800e9e4 <_malloc_r>:
 800e9e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e9e8:	1ccd      	adds	r5, r1, #3
 800e9ea:	f025 0503 	bic.w	r5, r5, #3
 800e9ee:	3508      	adds	r5, #8
 800e9f0:	2d0c      	cmp	r5, #12
 800e9f2:	bf38      	it	cc
 800e9f4:	250c      	movcc	r5, #12
 800e9f6:	2d00      	cmp	r5, #0
 800e9f8:	4606      	mov	r6, r0
 800e9fa:	db01      	blt.n	800ea00 <_malloc_r+0x1c>
 800e9fc:	42a9      	cmp	r1, r5
 800e9fe:	d904      	bls.n	800ea0a <_malloc_r+0x26>
 800ea00:	230c      	movs	r3, #12
 800ea02:	6033      	str	r3, [r6, #0]
 800ea04:	2000      	movs	r0, #0
 800ea06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ea0a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800eae0 <_malloc_r+0xfc>
 800ea0e:	f000 f869 	bl	800eae4 <__malloc_lock>
 800ea12:	f8d8 3000 	ldr.w	r3, [r8]
 800ea16:	461c      	mov	r4, r3
 800ea18:	bb44      	cbnz	r4, 800ea6c <_malloc_r+0x88>
 800ea1a:	4629      	mov	r1, r5
 800ea1c:	4630      	mov	r0, r6
 800ea1e:	f7ff ffbf 	bl	800e9a0 <sbrk_aligned>
 800ea22:	1c43      	adds	r3, r0, #1
 800ea24:	4604      	mov	r4, r0
 800ea26:	d158      	bne.n	800eada <_malloc_r+0xf6>
 800ea28:	f8d8 4000 	ldr.w	r4, [r8]
 800ea2c:	4627      	mov	r7, r4
 800ea2e:	2f00      	cmp	r7, #0
 800ea30:	d143      	bne.n	800eaba <_malloc_r+0xd6>
 800ea32:	2c00      	cmp	r4, #0
 800ea34:	d04b      	beq.n	800eace <_malloc_r+0xea>
 800ea36:	6823      	ldr	r3, [r4, #0]
 800ea38:	4639      	mov	r1, r7
 800ea3a:	4630      	mov	r0, r6
 800ea3c:	eb04 0903 	add.w	r9, r4, r3
 800ea40:	f000 fe02 	bl	800f648 <_sbrk_r>
 800ea44:	4581      	cmp	r9, r0
 800ea46:	d142      	bne.n	800eace <_malloc_r+0xea>
 800ea48:	6821      	ldr	r1, [r4, #0]
 800ea4a:	1a6d      	subs	r5, r5, r1
 800ea4c:	4629      	mov	r1, r5
 800ea4e:	4630      	mov	r0, r6
 800ea50:	f7ff ffa6 	bl	800e9a0 <sbrk_aligned>
 800ea54:	3001      	adds	r0, #1
 800ea56:	d03a      	beq.n	800eace <_malloc_r+0xea>
 800ea58:	6823      	ldr	r3, [r4, #0]
 800ea5a:	442b      	add	r3, r5
 800ea5c:	6023      	str	r3, [r4, #0]
 800ea5e:	f8d8 3000 	ldr.w	r3, [r8]
 800ea62:	685a      	ldr	r2, [r3, #4]
 800ea64:	bb62      	cbnz	r2, 800eac0 <_malloc_r+0xdc>
 800ea66:	f8c8 7000 	str.w	r7, [r8]
 800ea6a:	e00f      	b.n	800ea8c <_malloc_r+0xa8>
 800ea6c:	6822      	ldr	r2, [r4, #0]
 800ea6e:	1b52      	subs	r2, r2, r5
 800ea70:	d420      	bmi.n	800eab4 <_malloc_r+0xd0>
 800ea72:	2a0b      	cmp	r2, #11
 800ea74:	d917      	bls.n	800eaa6 <_malloc_r+0xc2>
 800ea76:	1961      	adds	r1, r4, r5
 800ea78:	42a3      	cmp	r3, r4
 800ea7a:	6025      	str	r5, [r4, #0]
 800ea7c:	bf18      	it	ne
 800ea7e:	6059      	strne	r1, [r3, #4]
 800ea80:	6863      	ldr	r3, [r4, #4]
 800ea82:	bf08      	it	eq
 800ea84:	f8c8 1000 	streq.w	r1, [r8]
 800ea88:	5162      	str	r2, [r4, r5]
 800ea8a:	604b      	str	r3, [r1, #4]
 800ea8c:	4630      	mov	r0, r6
 800ea8e:	f000 f82f 	bl	800eaf0 <__malloc_unlock>
 800ea92:	f104 000b 	add.w	r0, r4, #11
 800ea96:	1d23      	adds	r3, r4, #4
 800ea98:	f020 0007 	bic.w	r0, r0, #7
 800ea9c:	1ac2      	subs	r2, r0, r3
 800ea9e:	bf1c      	itt	ne
 800eaa0:	1a1b      	subne	r3, r3, r0
 800eaa2:	50a3      	strne	r3, [r4, r2]
 800eaa4:	e7af      	b.n	800ea06 <_malloc_r+0x22>
 800eaa6:	6862      	ldr	r2, [r4, #4]
 800eaa8:	42a3      	cmp	r3, r4
 800eaaa:	bf0c      	ite	eq
 800eaac:	f8c8 2000 	streq.w	r2, [r8]
 800eab0:	605a      	strne	r2, [r3, #4]
 800eab2:	e7eb      	b.n	800ea8c <_malloc_r+0xa8>
 800eab4:	4623      	mov	r3, r4
 800eab6:	6864      	ldr	r4, [r4, #4]
 800eab8:	e7ae      	b.n	800ea18 <_malloc_r+0x34>
 800eaba:	463c      	mov	r4, r7
 800eabc:	687f      	ldr	r7, [r7, #4]
 800eabe:	e7b6      	b.n	800ea2e <_malloc_r+0x4a>
 800eac0:	461a      	mov	r2, r3
 800eac2:	685b      	ldr	r3, [r3, #4]
 800eac4:	42a3      	cmp	r3, r4
 800eac6:	d1fb      	bne.n	800eac0 <_malloc_r+0xdc>
 800eac8:	2300      	movs	r3, #0
 800eaca:	6053      	str	r3, [r2, #4]
 800eacc:	e7de      	b.n	800ea8c <_malloc_r+0xa8>
 800eace:	230c      	movs	r3, #12
 800ead0:	6033      	str	r3, [r6, #0]
 800ead2:	4630      	mov	r0, r6
 800ead4:	f000 f80c 	bl	800eaf0 <__malloc_unlock>
 800ead8:	e794      	b.n	800ea04 <_malloc_r+0x20>
 800eada:	6005      	str	r5, [r0, #0]
 800eadc:	e7d6      	b.n	800ea8c <_malloc_r+0xa8>
 800eade:	bf00      	nop
 800eae0:	200023b8 	.word	0x200023b8

0800eae4 <__malloc_lock>:
 800eae4:	4801      	ldr	r0, [pc, #4]	@ (800eaec <__malloc_lock+0x8>)
 800eae6:	f7ff bf00 	b.w	800e8ea <__retarget_lock_acquire_recursive>
 800eaea:	bf00      	nop
 800eaec:	200023b0 	.word	0x200023b0

0800eaf0 <__malloc_unlock>:
 800eaf0:	4801      	ldr	r0, [pc, #4]	@ (800eaf8 <__malloc_unlock+0x8>)
 800eaf2:	f7ff befb 	b.w	800e8ec <__retarget_lock_release_recursive>
 800eaf6:	bf00      	nop
 800eaf8:	200023b0 	.word	0x200023b0

0800eafc <__ssputs_r>:
 800eafc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eb00:	688e      	ldr	r6, [r1, #8]
 800eb02:	461f      	mov	r7, r3
 800eb04:	42be      	cmp	r6, r7
 800eb06:	680b      	ldr	r3, [r1, #0]
 800eb08:	4682      	mov	sl, r0
 800eb0a:	460c      	mov	r4, r1
 800eb0c:	4690      	mov	r8, r2
 800eb0e:	d82d      	bhi.n	800eb6c <__ssputs_r+0x70>
 800eb10:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800eb14:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800eb18:	d026      	beq.n	800eb68 <__ssputs_r+0x6c>
 800eb1a:	6965      	ldr	r5, [r4, #20]
 800eb1c:	6909      	ldr	r1, [r1, #16]
 800eb1e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800eb22:	eba3 0901 	sub.w	r9, r3, r1
 800eb26:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800eb2a:	1c7b      	adds	r3, r7, #1
 800eb2c:	444b      	add	r3, r9
 800eb2e:	106d      	asrs	r5, r5, #1
 800eb30:	429d      	cmp	r5, r3
 800eb32:	bf38      	it	cc
 800eb34:	461d      	movcc	r5, r3
 800eb36:	0553      	lsls	r3, r2, #21
 800eb38:	d527      	bpl.n	800eb8a <__ssputs_r+0x8e>
 800eb3a:	4629      	mov	r1, r5
 800eb3c:	f7ff ff52 	bl	800e9e4 <_malloc_r>
 800eb40:	4606      	mov	r6, r0
 800eb42:	b360      	cbz	r0, 800eb9e <__ssputs_r+0xa2>
 800eb44:	6921      	ldr	r1, [r4, #16]
 800eb46:	464a      	mov	r2, r9
 800eb48:	f7ff fed1 	bl	800e8ee <memcpy>
 800eb4c:	89a3      	ldrh	r3, [r4, #12]
 800eb4e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800eb52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800eb56:	81a3      	strh	r3, [r4, #12]
 800eb58:	6126      	str	r6, [r4, #16]
 800eb5a:	6165      	str	r5, [r4, #20]
 800eb5c:	444e      	add	r6, r9
 800eb5e:	eba5 0509 	sub.w	r5, r5, r9
 800eb62:	6026      	str	r6, [r4, #0]
 800eb64:	60a5      	str	r5, [r4, #8]
 800eb66:	463e      	mov	r6, r7
 800eb68:	42be      	cmp	r6, r7
 800eb6a:	d900      	bls.n	800eb6e <__ssputs_r+0x72>
 800eb6c:	463e      	mov	r6, r7
 800eb6e:	6820      	ldr	r0, [r4, #0]
 800eb70:	4632      	mov	r2, r6
 800eb72:	4641      	mov	r1, r8
 800eb74:	f000 fd2c 	bl	800f5d0 <memmove>
 800eb78:	68a3      	ldr	r3, [r4, #8]
 800eb7a:	1b9b      	subs	r3, r3, r6
 800eb7c:	60a3      	str	r3, [r4, #8]
 800eb7e:	6823      	ldr	r3, [r4, #0]
 800eb80:	4433      	add	r3, r6
 800eb82:	6023      	str	r3, [r4, #0]
 800eb84:	2000      	movs	r0, #0
 800eb86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb8a:	462a      	mov	r2, r5
 800eb8c:	f000 fd6c 	bl	800f668 <_realloc_r>
 800eb90:	4606      	mov	r6, r0
 800eb92:	2800      	cmp	r0, #0
 800eb94:	d1e0      	bne.n	800eb58 <__ssputs_r+0x5c>
 800eb96:	6921      	ldr	r1, [r4, #16]
 800eb98:	4650      	mov	r0, sl
 800eb9a:	f7ff feb7 	bl	800e90c <_free_r>
 800eb9e:	230c      	movs	r3, #12
 800eba0:	f8ca 3000 	str.w	r3, [sl]
 800eba4:	89a3      	ldrh	r3, [r4, #12]
 800eba6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ebaa:	81a3      	strh	r3, [r4, #12]
 800ebac:	f04f 30ff 	mov.w	r0, #4294967295
 800ebb0:	e7e9      	b.n	800eb86 <__ssputs_r+0x8a>
	...

0800ebb4 <_svfiprintf_r>:
 800ebb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebb8:	4698      	mov	r8, r3
 800ebba:	898b      	ldrh	r3, [r1, #12]
 800ebbc:	061b      	lsls	r3, r3, #24
 800ebbe:	b09d      	sub	sp, #116	@ 0x74
 800ebc0:	4607      	mov	r7, r0
 800ebc2:	460d      	mov	r5, r1
 800ebc4:	4614      	mov	r4, r2
 800ebc6:	d510      	bpl.n	800ebea <_svfiprintf_r+0x36>
 800ebc8:	690b      	ldr	r3, [r1, #16]
 800ebca:	b973      	cbnz	r3, 800ebea <_svfiprintf_r+0x36>
 800ebcc:	2140      	movs	r1, #64	@ 0x40
 800ebce:	f7ff ff09 	bl	800e9e4 <_malloc_r>
 800ebd2:	6028      	str	r0, [r5, #0]
 800ebd4:	6128      	str	r0, [r5, #16]
 800ebd6:	b930      	cbnz	r0, 800ebe6 <_svfiprintf_r+0x32>
 800ebd8:	230c      	movs	r3, #12
 800ebda:	603b      	str	r3, [r7, #0]
 800ebdc:	f04f 30ff 	mov.w	r0, #4294967295
 800ebe0:	b01d      	add	sp, #116	@ 0x74
 800ebe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ebe6:	2340      	movs	r3, #64	@ 0x40
 800ebe8:	616b      	str	r3, [r5, #20]
 800ebea:	2300      	movs	r3, #0
 800ebec:	9309      	str	r3, [sp, #36]	@ 0x24
 800ebee:	2320      	movs	r3, #32
 800ebf0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ebf4:	f8cd 800c 	str.w	r8, [sp, #12]
 800ebf8:	2330      	movs	r3, #48	@ 0x30
 800ebfa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800ed98 <_svfiprintf_r+0x1e4>
 800ebfe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ec02:	f04f 0901 	mov.w	r9, #1
 800ec06:	4623      	mov	r3, r4
 800ec08:	469a      	mov	sl, r3
 800ec0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ec0e:	b10a      	cbz	r2, 800ec14 <_svfiprintf_r+0x60>
 800ec10:	2a25      	cmp	r2, #37	@ 0x25
 800ec12:	d1f9      	bne.n	800ec08 <_svfiprintf_r+0x54>
 800ec14:	ebba 0b04 	subs.w	fp, sl, r4
 800ec18:	d00b      	beq.n	800ec32 <_svfiprintf_r+0x7e>
 800ec1a:	465b      	mov	r3, fp
 800ec1c:	4622      	mov	r2, r4
 800ec1e:	4629      	mov	r1, r5
 800ec20:	4638      	mov	r0, r7
 800ec22:	f7ff ff6b 	bl	800eafc <__ssputs_r>
 800ec26:	3001      	adds	r0, #1
 800ec28:	f000 80a7 	beq.w	800ed7a <_svfiprintf_r+0x1c6>
 800ec2c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ec2e:	445a      	add	r2, fp
 800ec30:	9209      	str	r2, [sp, #36]	@ 0x24
 800ec32:	f89a 3000 	ldrb.w	r3, [sl]
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	f000 809f 	beq.w	800ed7a <_svfiprintf_r+0x1c6>
 800ec3c:	2300      	movs	r3, #0
 800ec3e:	f04f 32ff 	mov.w	r2, #4294967295
 800ec42:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ec46:	f10a 0a01 	add.w	sl, sl, #1
 800ec4a:	9304      	str	r3, [sp, #16]
 800ec4c:	9307      	str	r3, [sp, #28]
 800ec4e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ec52:	931a      	str	r3, [sp, #104]	@ 0x68
 800ec54:	4654      	mov	r4, sl
 800ec56:	2205      	movs	r2, #5
 800ec58:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ec5c:	484e      	ldr	r0, [pc, #312]	@ (800ed98 <_svfiprintf_r+0x1e4>)
 800ec5e:	f7f1 fa97 	bl	8000190 <memchr>
 800ec62:	9a04      	ldr	r2, [sp, #16]
 800ec64:	b9d8      	cbnz	r0, 800ec9e <_svfiprintf_r+0xea>
 800ec66:	06d0      	lsls	r0, r2, #27
 800ec68:	bf44      	itt	mi
 800ec6a:	2320      	movmi	r3, #32
 800ec6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ec70:	0711      	lsls	r1, r2, #28
 800ec72:	bf44      	itt	mi
 800ec74:	232b      	movmi	r3, #43	@ 0x2b
 800ec76:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ec7a:	f89a 3000 	ldrb.w	r3, [sl]
 800ec7e:	2b2a      	cmp	r3, #42	@ 0x2a
 800ec80:	d015      	beq.n	800ecae <_svfiprintf_r+0xfa>
 800ec82:	9a07      	ldr	r2, [sp, #28]
 800ec84:	4654      	mov	r4, sl
 800ec86:	2000      	movs	r0, #0
 800ec88:	f04f 0c0a 	mov.w	ip, #10
 800ec8c:	4621      	mov	r1, r4
 800ec8e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ec92:	3b30      	subs	r3, #48	@ 0x30
 800ec94:	2b09      	cmp	r3, #9
 800ec96:	d94b      	bls.n	800ed30 <_svfiprintf_r+0x17c>
 800ec98:	b1b0      	cbz	r0, 800ecc8 <_svfiprintf_r+0x114>
 800ec9a:	9207      	str	r2, [sp, #28]
 800ec9c:	e014      	b.n	800ecc8 <_svfiprintf_r+0x114>
 800ec9e:	eba0 0308 	sub.w	r3, r0, r8
 800eca2:	fa09 f303 	lsl.w	r3, r9, r3
 800eca6:	4313      	orrs	r3, r2
 800eca8:	9304      	str	r3, [sp, #16]
 800ecaa:	46a2      	mov	sl, r4
 800ecac:	e7d2      	b.n	800ec54 <_svfiprintf_r+0xa0>
 800ecae:	9b03      	ldr	r3, [sp, #12]
 800ecb0:	1d19      	adds	r1, r3, #4
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	9103      	str	r1, [sp, #12]
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	bfbb      	ittet	lt
 800ecba:	425b      	neglt	r3, r3
 800ecbc:	f042 0202 	orrlt.w	r2, r2, #2
 800ecc0:	9307      	strge	r3, [sp, #28]
 800ecc2:	9307      	strlt	r3, [sp, #28]
 800ecc4:	bfb8      	it	lt
 800ecc6:	9204      	strlt	r2, [sp, #16]
 800ecc8:	7823      	ldrb	r3, [r4, #0]
 800ecca:	2b2e      	cmp	r3, #46	@ 0x2e
 800eccc:	d10a      	bne.n	800ece4 <_svfiprintf_r+0x130>
 800ecce:	7863      	ldrb	r3, [r4, #1]
 800ecd0:	2b2a      	cmp	r3, #42	@ 0x2a
 800ecd2:	d132      	bne.n	800ed3a <_svfiprintf_r+0x186>
 800ecd4:	9b03      	ldr	r3, [sp, #12]
 800ecd6:	1d1a      	adds	r2, r3, #4
 800ecd8:	681b      	ldr	r3, [r3, #0]
 800ecda:	9203      	str	r2, [sp, #12]
 800ecdc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ece0:	3402      	adds	r4, #2
 800ece2:	9305      	str	r3, [sp, #20]
 800ece4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800eda8 <_svfiprintf_r+0x1f4>
 800ece8:	7821      	ldrb	r1, [r4, #0]
 800ecea:	2203      	movs	r2, #3
 800ecec:	4650      	mov	r0, sl
 800ecee:	f7f1 fa4f 	bl	8000190 <memchr>
 800ecf2:	b138      	cbz	r0, 800ed04 <_svfiprintf_r+0x150>
 800ecf4:	9b04      	ldr	r3, [sp, #16]
 800ecf6:	eba0 000a 	sub.w	r0, r0, sl
 800ecfa:	2240      	movs	r2, #64	@ 0x40
 800ecfc:	4082      	lsls	r2, r0
 800ecfe:	4313      	orrs	r3, r2
 800ed00:	3401      	adds	r4, #1
 800ed02:	9304      	str	r3, [sp, #16]
 800ed04:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ed08:	4824      	ldr	r0, [pc, #144]	@ (800ed9c <_svfiprintf_r+0x1e8>)
 800ed0a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ed0e:	2206      	movs	r2, #6
 800ed10:	f7f1 fa3e 	bl	8000190 <memchr>
 800ed14:	2800      	cmp	r0, #0
 800ed16:	d036      	beq.n	800ed86 <_svfiprintf_r+0x1d2>
 800ed18:	4b21      	ldr	r3, [pc, #132]	@ (800eda0 <_svfiprintf_r+0x1ec>)
 800ed1a:	bb1b      	cbnz	r3, 800ed64 <_svfiprintf_r+0x1b0>
 800ed1c:	9b03      	ldr	r3, [sp, #12]
 800ed1e:	3307      	adds	r3, #7
 800ed20:	f023 0307 	bic.w	r3, r3, #7
 800ed24:	3308      	adds	r3, #8
 800ed26:	9303      	str	r3, [sp, #12]
 800ed28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ed2a:	4433      	add	r3, r6
 800ed2c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ed2e:	e76a      	b.n	800ec06 <_svfiprintf_r+0x52>
 800ed30:	fb0c 3202 	mla	r2, ip, r2, r3
 800ed34:	460c      	mov	r4, r1
 800ed36:	2001      	movs	r0, #1
 800ed38:	e7a8      	b.n	800ec8c <_svfiprintf_r+0xd8>
 800ed3a:	2300      	movs	r3, #0
 800ed3c:	3401      	adds	r4, #1
 800ed3e:	9305      	str	r3, [sp, #20]
 800ed40:	4619      	mov	r1, r3
 800ed42:	f04f 0c0a 	mov.w	ip, #10
 800ed46:	4620      	mov	r0, r4
 800ed48:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ed4c:	3a30      	subs	r2, #48	@ 0x30
 800ed4e:	2a09      	cmp	r2, #9
 800ed50:	d903      	bls.n	800ed5a <_svfiprintf_r+0x1a6>
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	d0c6      	beq.n	800ece4 <_svfiprintf_r+0x130>
 800ed56:	9105      	str	r1, [sp, #20]
 800ed58:	e7c4      	b.n	800ece4 <_svfiprintf_r+0x130>
 800ed5a:	fb0c 2101 	mla	r1, ip, r1, r2
 800ed5e:	4604      	mov	r4, r0
 800ed60:	2301      	movs	r3, #1
 800ed62:	e7f0      	b.n	800ed46 <_svfiprintf_r+0x192>
 800ed64:	ab03      	add	r3, sp, #12
 800ed66:	9300      	str	r3, [sp, #0]
 800ed68:	462a      	mov	r2, r5
 800ed6a:	4b0e      	ldr	r3, [pc, #56]	@ (800eda4 <_svfiprintf_r+0x1f0>)
 800ed6c:	a904      	add	r1, sp, #16
 800ed6e:	4638      	mov	r0, r7
 800ed70:	f3af 8000 	nop.w
 800ed74:	1c42      	adds	r2, r0, #1
 800ed76:	4606      	mov	r6, r0
 800ed78:	d1d6      	bne.n	800ed28 <_svfiprintf_r+0x174>
 800ed7a:	89ab      	ldrh	r3, [r5, #12]
 800ed7c:	065b      	lsls	r3, r3, #25
 800ed7e:	f53f af2d 	bmi.w	800ebdc <_svfiprintf_r+0x28>
 800ed82:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ed84:	e72c      	b.n	800ebe0 <_svfiprintf_r+0x2c>
 800ed86:	ab03      	add	r3, sp, #12
 800ed88:	9300      	str	r3, [sp, #0]
 800ed8a:	462a      	mov	r2, r5
 800ed8c:	4b05      	ldr	r3, [pc, #20]	@ (800eda4 <_svfiprintf_r+0x1f0>)
 800ed8e:	a904      	add	r1, sp, #16
 800ed90:	4638      	mov	r0, r7
 800ed92:	f000 f9bb 	bl	800f10c <_printf_i>
 800ed96:	e7ed      	b.n	800ed74 <_svfiprintf_r+0x1c0>
 800ed98:	08010d5a 	.word	0x08010d5a
 800ed9c:	08010d64 	.word	0x08010d64
 800eda0:	00000000 	.word	0x00000000
 800eda4:	0800eafd 	.word	0x0800eafd
 800eda8:	08010d60 	.word	0x08010d60

0800edac <__sfputc_r>:
 800edac:	6893      	ldr	r3, [r2, #8]
 800edae:	3b01      	subs	r3, #1
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	b410      	push	{r4}
 800edb4:	6093      	str	r3, [r2, #8]
 800edb6:	da08      	bge.n	800edca <__sfputc_r+0x1e>
 800edb8:	6994      	ldr	r4, [r2, #24]
 800edba:	42a3      	cmp	r3, r4
 800edbc:	db01      	blt.n	800edc2 <__sfputc_r+0x16>
 800edbe:	290a      	cmp	r1, #10
 800edc0:	d103      	bne.n	800edca <__sfputc_r+0x1e>
 800edc2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800edc6:	f7ff bc88 	b.w	800e6da <__swbuf_r>
 800edca:	6813      	ldr	r3, [r2, #0]
 800edcc:	1c58      	adds	r0, r3, #1
 800edce:	6010      	str	r0, [r2, #0]
 800edd0:	7019      	strb	r1, [r3, #0]
 800edd2:	4608      	mov	r0, r1
 800edd4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800edd8:	4770      	bx	lr

0800edda <__sfputs_r>:
 800edda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eddc:	4606      	mov	r6, r0
 800edde:	460f      	mov	r7, r1
 800ede0:	4614      	mov	r4, r2
 800ede2:	18d5      	adds	r5, r2, r3
 800ede4:	42ac      	cmp	r4, r5
 800ede6:	d101      	bne.n	800edec <__sfputs_r+0x12>
 800ede8:	2000      	movs	r0, #0
 800edea:	e007      	b.n	800edfc <__sfputs_r+0x22>
 800edec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800edf0:	463a      	mov	r2, r7
 800edf2:	4630      	mov	r0, r6
 800edf4:	f7ff ffda 	bl	800edac <__sfputc_r>
 800edf8:	1c43      	adds	r3, r0, #1
 800edfa:	d1f3      	bne.n	800ede4 <__sfputs_r+0xa>
 800edfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ee00 <_vfiprintf_r>:
 800ee00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee04:	460d      	mov	r5, r1
 800ee06:	b09d      	sub	sp, #116	@ 0x74
 800ee08:	4614      	mov	r4, r2
 800ee0a:	4698      	mov	r8, r3
 800ee0c:	4606      	mov	r6, r0
 800ee0e:	b118      	cbz	r0, 800ee18 <_vfiprintf_r+0x18>
 800ee10:	6a03      	ldr	r3, [r0, #32]
 800ee12:	b90b      	cbnz	r3, 800ee18 <_vfiprintf_r+0x18>
 800ee14:	f7ff fb50 	bl	800e4b8 <__sinit>
 800ee18:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ee1a:	07d9      	lsls	r1, r3, #31
 800ee1c:	d405      	bmi.n	800ee2a <_vfiprintf_r+0x2a>
 800ee1e:	89ab      	ldrh	r3, [r5, #12]
 800ee20:	059a      	lsls	r2, r3, #22
 800ee22:	d402      	bmi.n	800ee2a <_vfiprintf_r+0x2a>
 800ee24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ee26:	f7ff fd60 	bl	800e8ea <__retarget_lock_acquire_recursive>
 800ee2a:	89ab      	ldrh	r3, [r5, #12]
 800ee2c:	071b      	lsls	r3, r3, #28
 800ee2e:	d501      	bpl.n	800ee34 <_vfiprintf_r+0x34>
 800ee30:	692b      	ldr	r3, [r5, #16]
 800ee32:	b99b      	cbnz	r3, 800ee5c <_vfiprintf_r+0x5c>
 800ee34:	4629      	mov	r1, r5
 800ee36:	4630      	mov	r0, r6
 800ee38:	f7ff fc8e 	bl	800e758 <__swsetup_r>
 800ee3c:	b170      	cbz	r0, 800ee5c <_vfiprintf_r+0x5c>
 800ee3e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ee40:	07dc      	lsls	r4, r3, #31
 800ee42:	d504      	bpl.n	800ee4e <_vfiprintf_r+0x4e>
 800ee44:	f04f 30ff 	mov.w	r0, #4294967295
 800ee48:	b01d      	add	sp, #116	@ 0x74
 800ee4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee4e:	89ab      	ldrh	r3, [r5, #12]
 800ee50:	0598      	lsls	r0, r3, #22
 800ee52:	d4f7      	bmi.n	800ee44 <_vfiprintf_r+0x44>
 800ee54:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ee56:	f7ff fd49 	bl	800e8ec <__retarget_lock_release_recursive>
 800ee5a:	e7f3      	b.n	800ee44 <_vfiprintf_r+0x44>
 800ee5c:	2300      	movs	r3, #0
 800ee5e:	9309      	str	r3, [sp, #36]	@ 0x24
 800ee60:	2320      	movs	r3, #32
 800ee62:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ee66:	f8cd 800c 	str.w	r8, [sp, #12]
 800ee6a:	2330      	movs	r3, #48	@ 0x30
 800ee6c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f01c <_vfiprintf_r+0x21c>
 800ee70:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ee74:	f04f 0901 	mov.w	r9, #1
 800ee78:	4623      	mov	r3, r4
 800ee7a:	469a      	mov	sl, r3
 800ee7c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ee80:	b10a      	cbz	r2, 800ee86 <_vfiprintf_r+0x86>
 800ee82:	2a25      	cmp	r2, #37	@ 0x25
 800ee84:	d1f9      	bne.n	800ee7a <_vfiprintf_r+0x7a>
 800ee86:	ebba 0b04 	subs.w	fp, sl, r4
 800ee8a:	d00b      	beq.n	800eea4 <_vfiprintf_r+0xa4>
 800ee8c:	465b      	mov	r3, fp
 800ee8e:	4622      	mov	r2, r4
 800ee90:	4629      	mov	r1, r5
 800ee92:	4630      	mov	r0, r6
 800ee94:	f7ff ffa1 	bl	800edda <__sfputs_r>
 800ee98:	3001      	adds	r0, #1
 800ee9a:	f000 80a7 	beq.w	800efec <_vfiprintf_r+0x1ec>
 800ee9e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800eea0:	445a      	add	r2, fp
 800eea2:	9209      	str	r2, [sp, #36]	@ 0x24
 800eea4:	f89a 3000 	ldrb.w	r3, [sl]
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	f000 809f 	beq.w	800efec <_vfiprintf_r+0x1ec>
 800eeae:	2300      	movs	r3, #0
 800eeb0:	f04f 32ff 	mov.w	r2, #4294967295
 800eeb4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800eeb8:	f10a 0a01 	add.w	sl, sl, #1
 800eebc:	9304      	str	r3, [sp, #16]
 800eebe:	9307      	str	r3, [sp, #28]
 800eec0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800eec4:	931a      	str	r3, [sp, #104]	@ 0x68
 800eec6:	4654      	mov	r4, sl
 800eec8:	2205      	movs	r2, #5
 800eeca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eece:	4853      	ldr	r0, [pc, #332]	@ (800f01c <_vfiprintf_r+0x21c>)
 800eed0:	f7f1 f95e 	bl	8000190 <memchr>
 800eed4:	9a04      	ldr	r2, [sp, #16]
 800eed6:	b9d8      	cbnz	r0, 800ef10 <_vfiprintf_r+0x110>
 800eed8:	06d1      	lsls	r1, r2, #27
 800eeda:	bf44      	itt	mi
 800eedc:	2320      	movmi	r3, #32
 800eede:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800eee2:	0713      	lsls	r3, r2, #28
 800eee4:	bf44      	itt	mi
 800eee6:	232b      	movmi	r3, #43	@ 0x2b
 800eee8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800eeec:	f89a 3000 	ldrb.w	r3, [sl]
 800eef0:	2b2a      	cmp	r3, #42	@ 0x2a
 800eef2:	d015      	beq.n	800ef20 <_vfiprintf_r+0x120>
 800eef4:	9a07      	ldr	r2, [sp, #28]
 800eef6:	4654      	mov	r4, sl
 800eef8:	2000      	movs	r0, #0
 800eefa:	f04f 0c0a 	mov.w	ip, #10
 800eefe:	4621      	mov	r1, r4
 800ef00:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ef04:	3b30      	subs	r3, #48	@ 0x30
 800ef06:	2b09      	cmp	r3, #9
 800ef08:	d94b      	bls.n	800efa2 <_vfiprintf_r+0x1a2>
 800ef0a:	b1b0      	cbz	r0, 800ef3a <_vfiprintf_r+0x13a>
 800ef0c:	9207      	str	r2, [sp, #28]
 800ef0e:	e014      	b.n	800ef3a <_vfiprintf_r+0x13a>
 800ef10:	eba0 0308 	sub.w	r3, r0, r8
 800ef14:	fa09 f303 	lsl.w	r3, r9, r3
 800ef18:	4313      	orrs	r3, r2
 800ef1a:	9304      	str	r3, [sp, #16]
 800ef1c:	46a2      	mov	sl, r4
 800ef1e:	e7d2      	b.n	800eec6 <_vfiprintf_r+0xc6>
 800ef20:	9b03      	ldr	r3, [sp, #12]
 800ef22:	1d19      	adds	r1, r3, #4
 800ef24:	681b      	ldr	r3, [r3, #0]
 800ef26:	9103      	str	r1, [sp, #12]
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	bfbb      	ittet	lt
 800ef2c:	425b      	neglt	r3, r3
 800ef2e:	f042 0202 	orrlt.w	r2, r2, #2
 800ef32:	9307      	strge	r3, [sp, #28]
 800ef34:	9307      	strlt	r3, [sp, #28]
 800ef36:	bfb8      	it	lt
 800ef38:	9204      	strlt	r2, [sp, #16]
 800ef3a:	7823      	ldrb	r3, [r4, #0]
 800ef3c:	2b2e      	cmp	r3, #46	@ 0x2e
 800ef3e:	d10a      	bne.n	800ef56 <_vfiprintf_r+0x156>
 800ef40:	7863      	ldrb	r3, [r4, #1]
 800ef42:	2b2a      	cmp	r3, #42	@ 0x2a
 800ef44:	d132      	bne.n	800efac <_vfiprintf_r+0x1ac>
 800ef46:	9b03      	ldr	r3, [sp, #12]
 800ef48:	1d1a      	adds	r2, r3, #4
 800ef4a:	681b      	ldr	r3, [r3, #0]
 800ef4c:	9203      	str	r2, [sp, #12]
 800ef4e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ef52:	3402      	adds	r4, #2
 800ef54:	9305      	str	r3, [sp, #20]
 800ef56:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f02c <_vfiprintf_r+0x22c>
 800ef5a:	7821      	ldrb	r1, [r4, #0]
 800ef5c:	2203      	movs	r2, #3
 800ef5e:	4650      	mov	r0, sl
 800ef60:	f7f1 f916 	bl	8000190 <memchr>
 800ef64:	b138      	cbz	r0, 800ef76 <_vfiprintf_r+0x176>
 800ef66:	9b04      	ldr	r3, [sp, #16]
 800ef68:	eba0 000a 	sub.w	r0, r0, sl
 800ef6c:	2240      	movs	r2, #64	@ 0x40
 800ef6e:	4082      	lsls	r2, r0
 800ef70:	4313      	orrs	r3, r2
 800ef72:	3401      	adds	r4, #1
 800ef74:	9304      	str	r3, [sp, #16]
 800ef76:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ef7a:	4829      	ldr	r0, [pc, #164]	@ (800f020 <_vfiprintf_r+0x220>)
 800ef7c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ef80:	2206      	movs	r2, #6
 800ef82:	f7f1 f905 	bl	8000190 <memchr>
 800ef86:	2800      	cmp	r0, #0
 800ef88:	d03f      	beq.n	800f00a <_vfiprintf_r+0x20a>
 800ef8a:	4b26      	ldr	r3, [pc, #152]	@ (800f024 <_vfiprintf_r+0x224>)
 800ef8c:	bb1b      	cbnz	r3, 800efd6 <_vfiprintf_r+0x1d6>
 800ef8e:	9b03      	ldr	r3, [sp, #12]
 800ef90:	3307      	adds	r3, #7
 800ef92:	f023 0307 	bic.w	r3, r3, #7
 800ef96:	3308      	adds	r3, #8
 800ef98:	9303      	str	r3, [sp, #12]
 800ef9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ef9c:	443b      	add	r3, r7
 800ef9e:	9309      	str	r3, [sp, #36]	@ 0x24
 800efa0:	e76a      	b.n	800ee78 <_vfiprintf_r+0x78>
 800efa2:	fb0c 3202 	mla	r2, ip, r2, r3
 800efa6:	460c      	mov	r4, r1
 800efa8:	2001      	movs	r0, #1
 800efaa:	e7a8      	b.n	800eefe <_vfiprintf_r+0xfe>
 800efac:	2300      	movs	r3, #0
 800efae:	3401      	adds	r4, #1
 800efb0:	9305      	str	r3, [sp, #20]
 800efb2:	4619      	mov	r1, r3
 800efb4:	f04f 0c0a 	mov.w	ip, #10
 800efb8:	4620      	mov	r0, r4
 800efba:	f810 2b01 	ldrb.w	r2, [r0], #1
 800efbe:	3a30      	subs	r2, #48	@ 0x30
 800efc0:	2a09      	cmp	r2, #9
 800efc2:	d903      	bls.n	800efcc <_vfiprintf_r+0x1cc>
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	d0c6      	beq.n	800ef56 <_vfiprintf_r+0x156>
 800efc8:	9105      	str	r1, [sp, #20]
 800efca:	e7c4      	b.n	800ef56 <_vfiprintf_r+0x156>
 800efcc:	fb0c 2101 	mla	r1, ip, r1, r2
 800efd0:	4604      	mov	r4, r0
 800efd2:	2301      	movs	r3, #1
 800efd4:	e7f0      	b.n	800efb8 <_vfiprintf_r+0x1b8>
 800efd6:	ab03      	add	r3, sp, #12
 800efd8:	9300      	str	r3, [sp, #0]
 800efda:	462a      	mov	r2, r5
 800efdc:	4b12      	ldr	r3, [pc, #72]	@ (800f028 <_vfiprintf_r+0x228>)
 800efde:	a904      	add	r1, sp, #16
 800efe0:	4630      	mov	r0, r6
 800efe2:	f3af 8000 	nop.w
 800efe6:	4607      	mov	r7, r0
 800efe8:	1c78      	adds	r0, r7, #1
 800efea:	d1d6      	bne.n	800ef9a <_vfiprintf_r+0x19a>
 800efec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800efee:	07d9      	lsls	r1, r3, #31
 800eff0:	d405      	bmi.n	800effe <_vfiprintf_r+0x1fe>
 800eff2:	89ab      	ldrh	r3, [r5, #12]
 800eff4:	059a      	lsls	r2, r3, #22
 800eff6:	d402      	bmi.n	800effe <_vfiprintf_r+0x1fe>
 800eff8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800effa:	f7ff fc77 	bl	800e8ec <__retarget_lock_release_recursive>
 800effe:	89ab      	ldrh	r3, [r5, #12]
 800f000:	065b      	lsls	r3, r3, #25
 800f002:	f53f af1f 	bmi.w	800ee44 <_vfiprintf_r+0x44>
 800f006:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f008:	e71e      	b.n	800ee48 <_vfiprintf_r+0x48>
 800f00a:	ab03      	add	r3, sp, #12
 800f00c:	9300      	str	r3, [sp, #0]
 800f00e:	462a      	mov	r2, r5
 800f010:	4b05      	ldr	r3, [pc, #20]	@ (800f028 <_vfiprintf_r+0x228>)
 800f012:	a904      	add	r1, sp, #16
 800f014:	4630      	mov	r0, r6
 800f016:	f000 f879 	bl	800f10c <_printf_i>
 800f01a:	e7e4      	b.n	800efe6 <_vfiprintf_r+0x1e6>
 800f01c:	08010d5a 	.word	0x08010d5a
 800f020:	08010d64 	.word	0x08010d64
 800f024:	00000000 	.word	0x00000000
 800f028:	0800eddb 	.word	0x0800eddb
 800f02c:	08010d60 	.word	0x08010d60

0800f030 <_printf_common>:
 800f030:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f034:	4616      	mov	r6, r2
 800f036:	4698      	mov	r8, r3
 800f038:	688a      	ldr	r2, [r1, #8]
 800f03a:	690b      	ldr	r3, [r1, #16]
 800f03c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f040:	4293      	cmp	r3, r2
 800f042:	bfb8      	it	lt
 800f044:	4613      	movlt	r3, r2
 800f046:	6033      	str	r3, [r6, #0]
 800f048:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800f04c:	4607      	mov	r7, r0
 800f04e:	460c      	mov	r4, r1
 800f050:	b10a      	cbz	r2, 800f056 <_printf_common+0x26>
 800f052:	3301      	adds	r3, #1
 800f054:	6033      	str	r3, [r6, #0]
 800f056:	6823      	ldr	r3, [r4, #0]
 800f058:	0699      	lsls	r1, r3, #26
 800f05a:	bf42      	ittt	mi
 800f05c:	6833      	ldrmi	r3, [r6, #0]
 800f05e:	3302      	addmi	r3, #2
 800f060:	6033      	strmi	r3, [r6, #0]
 800f062:	6825      	ldr	r5, [r4, #0]
 800f064:	f015 0506 	ands.w	r5, r5, #6
 800f068:	d106      	bne.n	800f078 <_printf_common+0x48>
 800f06a:	f104 0a19 	add.w	sl, r4, #25
 800f06e:	68e3      	ldr	r3, [r4, #12]
 800f070:	6832      	ldr	r2, [r6, #0]
 800f072:	1a9b      	subs	r3, r3, r2
 800f074:	42ab      	cmp	r3, r5
 800f076:	dc26      	bgt.n	800f0c6 <_printf_common+0x96>
 800f078:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800f07c:	6822      	ldr	r2, [r4, #0]
 800f07e:	3b00      	subs	r3, #0
 800f080:	bf18      	it	ne
 800f082:	2301      	movne	r3, #1
 800f084:	0692      	lsls	r2, r2, #26
 800f086:	d42b      	bmi.n	800f0e0 <_printf_common+0xb0>
 800f088:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800f08c:	4641      	mov	r1, r8
 800f08e:	4638      	mov	r0, r7
 800f090:	47c8      	blx	r9
 800f092:	3001      	adds	r0, #1
 800f094:	d01e      	beq.n	800f0d4 <_printf_common+0xa4>
 800f096:	6823      	ldr	r3, [r4, #0]
 800f098:	6922      	ldr	r2, [r4, #16]
 800f09a:	f003 0306 	and.w	r3, r3, #6
 800f09e:	2b04      	cmp	r3, #4
 800f0a0:	bf02      	ittt	eq
 800f0a2:	68e5      	ldreq	r5, [r4, #12]
 800f0a4:	6833      	ldreq	r3, [r6, #0]
 800f0a6:	1aed      	subeq	r5, r5, r3
 800f0a8:	68a3      	ldr	r3, [r4, #8]
 800f0aa:	bf0c      	ite	eq
 800f0ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f0b0:	2500      	movne	r5, #0
 800f0b2:	4293      	cmp	r3, r2
 800f0b4:	bfc4      	itt	gt
 800f0b6:	1a9b      	subgt	r3, r3, r2
 800f0b8:	18ed      	addgt	r5, r5, r3
 800f0ba:	2600      	movs	r6, #0
 800f0bc:	341a      	adds	r4, #26
 800f0be:	42b5      	cmp	r5, r6
 800f0c0:	d11a      	bne.n	800f0f8 <_printf_common+0xc8>
 800f0c2:	2000      	movs	r0, #0
 800f0c4:	e008      	b.n	800f0d8 <_printf_common+0xa8>
 800f0c6:	2301      	movs	r3, #1
 800f0c8:	4652      	mov	r2, sl
 800f0ca:	4641      	mov	r1, r8
 800f0cc:	4638      	mov	r0, r7
 800f0ce:	47c8      	blx	r9
 800f0d0:	3001      	adds	r0, #1
 800f0d2:	d103      	bne.n	800f0dc <_printf_common+0xac>
 800f0d4:	f04f 30ff 	mov.w	r0, #4294967295
 800f0d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f0dc:	3501      	adds	r5, #1
 800f0de:	e7c6      	b.n	800f06e <_printf_common+0x3e>
 800f0e0:	18e1      	adds	r1, r4, r3
 800f0e2:	1c5a      	adds	r2, r3, #1
 800f0e4:	2030      	movs	r0, #48	@ 0x30
 800f0e6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800f0ea:	4422      	add	r2, r4
 800f0ec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800f0f0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800f0f4:	3302      	adds	r3, #2
 800f0f6:	e7c7      	b.n	800f088 <_printf_common+0x58>
 800f0f8:	2301      	movs	r3, #1
 800f0fa:	4622      	mov	r2, r4
 800f0fc:	4641      	mov	r1, r8
 800f0fe:	4638      	mov	r0, r7
 800f100:	47c8      	blx	r9
 800f102:	3001      	adds	r0, #1
 800f104:	d0e6      	beq.n	800f0d4 <_printf_common+0xa4>
 800f106:	3601      	adds	r6, #1
 800f108:	e7d9      	b.n	800f0be <_printf_common+0x8e>
	...

0800f10c <_printf_i>:
 800f10c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f110:	7e0f      	ldrb	r7, [r1, #24]
 800f112:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f114:	2f78      	cmp	r7, #120	@ 0x78
 800f116:	4691      	mov	r9, r2
 800f118:	4680      	mov	r8, r0
 800f11a:	460c      	mov	r4, r1
 800f11c:	469a      	mov	sl, r3
 800f11e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800f122:	d807      	bhi.n	800f134 <_printf_i+0x28>
 800f124:	2f62      	cmp	r7, #98	@ 0x62
 800f126:	d80a      	bhi.n	800f13e <_printf_i+0x32>
 800f128:	2f00      	cmp	r7, #0
 800f12a:	f000 80d2 	beq.w	800f2d2 <_printf_i+0x1c6>
 800f12e:	2f58      	cmp	r7, #88	@ 0x58
 800f130:	f000 80b9 	beq.w	800f2a6 <_printf_i+0x19a>
 800f134:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f138:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800f13c:	e03a      	b.n	800f1b4 <_printf_i+0xa8>
 800f13e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800f142:	2b15      	cmp	r3, #21
 800f144:	d8f6      	bhi.n	800f134 <_printf_i+0x28>
 800f146:	a101      	add	r1, pc, #4	@ (adr r1, 800f14c <_printf_i+0x40>)
 800f148:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f14c:	0800f1a5 	.word	0x0800f1a5
 800f150:	0800f1b9 	.word	0x0800f1b9
 800f154:	0800f135 	.word	0x0800f135
 800f158:	0800f135 	.word	0x0800f135
 800f15c:	0800f135 	.word	0x0800f135
 800f160:	0800f135 	.word	0x0800f135
 800f164:	0800f1b9 	.word	0x0800f1b9
 800f168:	0800f135 	.word	0x0800f135
 800f16c:	0800f135 	.word	0x0800f135
 800f170:	0800f135 	.word	0x0800f135
 800f174:	0800f135 	.word	0x0800f135
 800f178:	0800f2b9 	.word	0x0800f2b9
 800f17c:	0800f1e3 	.word	0x0800f1e3
 800f180:	0800f273 	.word	0x0800f273
 800f184:	0800f135 	.word	0x0800f135
 800f188:	0800f135 	.word	0x0800f135
 800f18c:	0800f2db 	.word	0x0800f2db
 800f190:	0800f135 	.word	0x0800f135
 800f194:	0800f1e3 	.word	0x0800f1e3
 800f198:	0800f135 	.word	0x0800f135
 800f19c:	0800f135 	.word	0x0800f135
 800f1a0:	0800f27b 	.word	0x0800f27b
 800f1a4:	6833      	ldr	r3, [r6, #0]
 800f1a6:	1d1a      	adds	r2, r3, #4
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	6032      	str	r2, [r6, #0]
 800f1ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f1b0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800f1b4:	2301      	movs	r3, #1
 800f1b6:	e09d      	b.n	800f2f4 <_printf_i+0x1e8>
 800f1b8:	6833      	ldr	r3, [r6, #0]
 800f1ba:	6820      	ldr	r0, [r4, #0]
 800f1bc:	1d19      	adds	r1, r3, #4
 800f1be:	6031      	str	r1, [r6, #0]
 800f1c0:	0606      	lsls	r6, r0, #24
 800f1c2:	d501      	bpl.n	800f1c8 <_printf_i+0xbc>
 800f1c4:	681d      	ldr	r5, [r3, #0]
 800f1c6:	e003      	b.n	800f1d0 <_printf_i+0xc4>
 800f1c8:	0645      	lsls	r5, r0, #25
 800f1ca:	d5fb      	bpl.n	800f1c4 <_printf_i+0xb8>
 800f1cc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f1d0:	2d00      	cmp	r5, #0
 800f1d2:	da03      	bge.n	800f1dc <_printf_i+0xd0>
 800f1d4:	232d      	movs	r3, #45	@ 0x2d
 800f1d6:	426d      	negs	r5, r5
 800f1d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f1dc:	4859      	ldr	r0, [pc, #356]	@ (800f344 <_printf_i+0x238>)
 800f1de:	230a      	movs	r3, #10
 800f1e0:	e011      	b.n	800f206 <_printf_i+0xfa>
 800f1e2:	6821      	ldr	r1, [r4, #0]
 800f1e4:	6833      	ldr	r3, [r6, #0]
 800f1e6:	0608      	lsls	r0, r1, #24
 800f1e8:	f853 5b04 	ldr.w	r5, [r3], #4
 800f1ec:	d402      	bmi.n	800f1f4 <_printf_i+0xe8>
 800f1ee:	0649      	lsls	r1, r1, #25
 800f1f0:	bf48      	it	mi
 800f1f2:	b2ad      	uxthmi	r5, r5
 800f1f4:	2f6f      	cmp	r7, #111	@ 0x6f
 800f1f6:	4853      	ldr	r0, [pc, #332]	@ (800f344 <_printf_i+0x238>)
 800f1f8:	6033      	str	r3, [r6, #0]
 800f1fa:	bf14      	ite	ne
 800f1fc:	230a      	movne	r3, #10
 800f1fe:	2308      	moveq	r3, #8
 800f200:	2100      	movs	r1, #0
 800f202:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f206:	6866      	ldr	r6, [r4, #4]
 800f208:	60a6      	str	r6, [r4, #8]
 800f20a:	2e00      	cmp	r6, #0
 800f20c:	bfa2      	ittt	ge
 800f20e:	6821      	ldrge	r1, [r4, #0]
 800f210:	f021 0104 	bicge.w	r1, r1, #4
 800f214:	6021      	strge	r1, [r4, #0]
 800f216:	b90d      	cbnz	r5, 800f21c <_printf_i+0x110>
 800f218:	2e00      	cmp	r6, #0
 800f21a:	d04b      	beq.n	800f2b4 <_printf_i+0x1a8>
 800f21c:	4616      	mov	r6, r2
 800f21e:	fbb5 f1f3 	udiv	r1, r5, r3
 800f222:	fb03 5711 	mls	r7, r3, r1, r5
 800f226:	5dc7      	ldrb	r7, [r0, r7]
 800f228:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f22c:	462f      	mov	r7, r5
 800f22e:	42bb      	cmp	r3, r7
 800f230:	460d      	mov	r5, r1
 800f232:	d9f4      	bls.n	800f21e <_printf_i+0x112>
 800f234:	2b08      	cmp	r3, #8
 800f236:	d10b      	bne.n	800f250 <_printf_i+0x144>
 800f238:	6823      	ldr	r3, [r4, #0]
 800f23a:	07df      	lsls	r7, r3, #31
 800f23c:	d508      	bpl.n	800f250 <_printf_i+0x144>
 800f23e:	6923      	ldr	r3, [r4, #16]
 800f240:	6861      	ldr	r1, [r4, #4]
 800f242:	4299      	cmp	r1, r3
 800f244:	bfde      	ittt	le
 800f246:	2330      	movle	r3, #48	@ 0x30
 800f248:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f24c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f250:	1b92      	subs	r2, r2, r6
 800f252:	6122      	str	r2, [r4, #16]
 800f254:	f8cd a000 	str.w	sl, [sp]
 800f258:	464b      	mov	r3, r9
 800f25a:	aa03      	add	r2, sp, #12
 800f25c:	4621      	mov	r1, r4
 800f25e:	4640      	mov	r0, r8
 800f260:	f7ff fee6 	bl	800f030 <_printf_common>
 800f264:	3001      	adds	r0, #1
 800f266:	d14a      	bne.n	800f2fe <_printf_i+0x1f2>
 800f268:	f04f 30ff 	mov.w	r0, #4294967295
 800f26c:	b004      	add	sp, #16
 800f26e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f272:	6823      	ldr	r3, [r4, #0]
 800f274:	f043 0320 	orr.w	r3, r3, #32
 800f278:	6023      	str	r3, [r4, #0]
 800f27a:	4833      	ldr	r0, [pc, #204]	@ (800f348 <_printf_i+0x23c>)
 800f27c:	2778      	movs	r7, #120	@ 0x78
 800f27e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f282:	6823      	ldr	r3, [r4, #0]
 800f284:	6831      	ldr	r1, [r6, #0]
 800f286:	061f      	lsls	r7, r3, #24
 800f288:	f851 5b04 	ldr.w	r5, [r1], #4
 800f28c:	d402      	bmi.n	800f294 <_printf_i+0x188>
 800f28e:	065f      	lsls	r7, r3, #25
 800f290:	bf48      	it	mi
 800f292:	b2ad      	uxthmi	r5, r5
 800f294:	6031      	str	r1, [r6, #0]
 800f296:	07d9      	lsls	r1, r3, #31
 800f298:	bf44      	itt	mi
 800f29a:	f043 0320 	orrmi.w	r3, r3, #32
 800f29e:	6023      	strmi	r3, [r4, #0]
 800f2a0:	b11d      	cbz	r5, 800f2aa <_printf_i+0x19e>
 800f2a2:	2310      	movs	r3, #16
 800f2a4:	e7ac      	b.n	800f200 <_printf_i+0xf4>
 800f2a6:	4827      	ldr	r0, [pc, #156]	@ (800f344 <_printf_i+0x238>)
 800f2a8:	e7e9      	b.n	800f27e <_printf_i+0x172>
 800f2aa:	6823      	ldr	r3, [r4, #0]
 800f2ac:	f023 0320 	bic.w	r3, r3, #32
 800f2b0:	6023      	str	r3, [r4, #0]
 800f2b2:	e7f6      	b.n	800f2a2 <_printf_i+0x196>
 800f2b4:	4616      	mov	r6, r2
 800f2b6:	e7bd      	b.n	800f234 <_printf_i+0x128>
 800f2b8:	6833      	ldr	r3, [r6, #0]
 800f2ba:	6825      	ldr	r5, [r4, #0]
 800f2bc:	6961      	ldr	r1, [r4, #20]
 800f2be:	1d18      	adds	r0, r3, #4
 800f2c0:	6030      	str	r0, [r6, #0]
 800f2c2:	062e      	lsls	r6, r5, #24
 800f2c4:	681b      	ldr	r3, [r3, #0]
 800f2c6:	d501      	bpl.n	800f2cc <_printf_i+0x1c0>
 800f2c8:	6019      	str	r1, [r3, #0]
 800f2ca:	e002      	b.n	800f2d2 <_printf_i+0x1c6>
 800f2cc:	0668      	lsls	r0, r5, #25
 800f2ce:	d5fb      	bpl.n	800f2c8 <_printf_i+0x1bc>
 800f2d0:	8019      	strh	r1, [r3, #0]
 800f2d2:	2300      	movs	r3, #0
 800f2d4:	6123      	str	r3, [r4, #16]
 800f2d6:	4616      	mov	r6, r2
 800f2d8:	e7bc      	b.n	800f254 <_printf_i+0x148>
 800f2da:	6833      	ldr	r3, [r6, #0]
 800f2dc:	1d1a      	adds	r2, r3, #4
 800f2de:	6032      	str	r2, [r6, #0]
 800f2e0:	681e      	ldr	r6, [r3, #0]
 800f2e2:	6862      	ldr	r2, [r4, #4]
 800f2e4:	2100      	movs	r1, #0
 800f2e6:	4630      	mov	r0, r6
 800f2e8:	f7f0 ff52 	bl	8000190 <memchr>
 800f2ec:	b108      	cbz	r0, 800f2f2 <_printf_i+0x1e6>
 800f2ee:	1b80      	subs	r0, r0, r6
 800f2f0:	6060      	str	r0, [r4, #4]
 800f2f2:	6863      	ldr	r3, [r4, #4]
 800f2f4:	6123      	str	r3, [r4, #16]
 800f2f6:	2300      	movs	r3, #0
 800f2f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f2fc:	e7aa      	b.n	800f254 <_printf_i+0x148>
 800f2fe:	6923      	ldr	r3, [r4, #16]
 800f300:	4632      	mov	r2, r6
 800f302:	4649      	mov	r1, r9
 800f304:	4640      	mov	r0, r8
 800f306:	47d0      	blx	sl
 800f308:	3001      	adds	r0, #1
 800f30a:	d0ad      	beq.n	800f268 <_printf_i+0x15c>
 800f30c:	6823      	ldr	r3, [r4, #0]
 800f30e:	079b      	lsls	r3, r3, #30
 800f310:	d413      	bmi.n	800f33a <_printf_i+0x22e>
 800f312:	68e0      	ldr	r0, [r4, #12]
 800f314:	9b03      	ldr	r3, [sp, #12]
 800f316:	4298      	cmp	r0, r3
 800f318:	bfb8      	it	lt
 800f31a:	4618      	movlt	r0, r3
 800f31c:	e7a6      	b.n	800f26c <_printf_i+0x160>
 800f31e:	2301      	movs	r3, #1
 800f320:	4632      	mov	r2, r6
 800f322:	4649      	mov	r1, r9
 800f324:	4640      	mov	r0, r8
 800f326:	47d0      	blx	sl
 800f328:	3001      	adds	r0, #1
 800f32a:	d09d      	beq.n	800f268 <_printf_i+0x15c>
 800f32c:	3501      	adds	r5, #1
 800f32e:	68e3      	ldr	r3, [r4, #12]
 800f330:	9903      	ldr	r1, [sp, #12]
 800f332:	1a5b      	subs	r3, r3, r1
 800f334:	42ab      	cmp	r3, r5
 800f336:	dcf2      	bgt.n	800f31e <_printf_i+0x212>
 800f338:	e7eb      	b.n	800f312 <_printf_i+0x206>
 800f33a:	2500      	movs	r5, #0
 800f33c:	f104 0619 	add.w	r6, r4, #25
 800f340:	e7f5      	b.n	800f32e <_printf_i+0x222>
 800f342:	bf00      	nop
 800f344:	08010d6b 	.word	0x08010d6b
 800f348:	08010d7c 	.word	0x08010d7c

0800f34c <__sflush_r>:
 800f34c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f350:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f354:	0716      	lsls	r6, r2, #28
 800f356:	4605      	mov	r5, r0
 800f358:	460c      	mov	r4, r1
 800f35a:	d454      	bmi.n	800f406 <__sflush_r+0xba>
 800f35c:	684b      	ldr	r3, [r1, #4]
 800f35e:	2b00      	cmp	r3, #0
 800f360:	dc02      	bgt.n	800f368 <__sflush_r+0x1c>
 800f362:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f364:	2b00      	cmp	r3, #0
 800f366:	dd48      	ble.n	800f3fa <__sflush_r+0xae>
 800f368:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f36a:	2e00      	cmp	r6, #0
 800f36c:	d045      	beq.n	800f3fa <__sflush_r+0xae>
 800f36e:	2300      	movs	r3, #0
 800f370:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f374:	682f      	ldr	r7, [r5, #0]
 800f376:	6a21      	ldr	r1, [r4, #32]
 800f378:	602b      	str	r3, [r5, #0]
 800f37a:	d030      	beq.n	800f3de <__sflush_r+0x92>
 800f37c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f37e:	89a3      	ldrh	r3, [r4, #12]
 800f380:	0759      	lsls	r1, r3, #29
 800f382:	d505      	bpl.n	800f390 <__sflush_r+0x44>
 800f384:	6863      	ldr	r3, [r4, #4]
 800f386:	1ad2      	subs	r2, r2, r3
 800f388:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f38a:	b10b      	cbz	r3, 800f390 <__sflush_r+0x44>
 800f38c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f38e:	1ad2      	subs	r2, r2, r3
 800f390:	2300      	movs	r3, #0
 800f392:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f394:	6a21      	ldr	r1, [r4, #32]
 800f396:	4628      	mov	r0, r5
 800f398:	47b0      	blx	r6
 800f39a:	1c43      	adds	r3, r0, #1
 800f39c:	89a3      	ldrh	r3, [r4, #12]
 800f39e:	d106      	bne.n	800f3ae <__sflush_r+0x62>
 800f3a0:	6829      	ldr	r1, [r5, #0]
 800f3a2:	291d      	cmp	r1, #29
 800f3a4:	d82b      	bhi.n	800f3fe <__sflush_r+0xb2>
 800f3a6:	4a2a      	ldr	r2, [pc, #168]	@ (800f450 <__sflush_r+0x104>)
 800f3a8:	410a      	asrs	r2, r1
 800f3aa:	07d6      	lsls	r6, r2, #31
 800f3ac:	d427      	bmi.n	800f3fe <__sflush_r+0xb2>
 800f3ae:	2200      	movs	r2, #0
 800f3b0:	6062      	str	r2, [r4, #4]
 800f3b2:	04d9      	lsls	r1, r3, #19
 800f3b4:	6922      	ldr	r2, [r4, #16]
 800f3b6:	6022      	str	r2, [r4, #0]
 800f3b8:	d504      	bpl.n	800f3c4 <__sflush_r+0x78>
 800f3ba:	1c42      	adds	r2, r0, #1
 800f3bc:	d101      	bne.n	800f3c2 <__sflush_r+0x76>
 800f3be:	682b      	ldr	r3, [r5, #0]
 800f3c0:	b903      	cbnz	r3, 800f3c4 <__sflush_r+0x78>
 800f3c2:	6560      	str	r0, [r4, #84]	@ 0x54
 800f3c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f3c6:	602f      	str	r7, [r5, #0]
 800f3c8:	b1b9      	cbz	r1, 800f3fa <__sflush_r+0xae>
 800f3ca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f3ce:	4299      	cmp	r1, r3
 800f3d0:	d002      	beq.n	800f3d8 <__sflush_r+0x8c>
 800f3d2:	4628      	mov	r0, r5
 800f3d4:	f7ff fa9a 	bl	800e90c <_free_r>
 800f3d8:	2300      	movs	r3, #0
 800f3da:	6363      	str	r3, [r4, #52]	@ 0x34
 800f3dc:	e00d      	b.n	800f3fa <__sflush_r+0xae>
 800f3de:	2301      	movs	r3, #1
 800f3e0:	4628      	mov	r0, r5
 800f3e2:	47b0      	blx	r6
 800f3e4:	4602      	mov	r2, r0
 800f3e6:	1c50      	adds	r0, r2, #1
 800f3e8:	d1c9      	bne.n	800f37e <__sflush_r+0x32>
 800f3ea:	682b      	ldr	r3, [r5, #0]
 800f3ec:	2b00      	cmp	r3, #0
 800f3ee:	d0c6      	beq.n	800f37e <__sflush_r+0x32>
 800f3f0:	2b1d      	cmp	r3, #29
 800f3f2:	d001      	beq.n	800f3f8 <__sflush_r+0xac>
 800f3f4:	2b16      	cmp	r3, #22
 800f3f6:	d11e      	bne.n	800f436 <__sflush_r+0xea>
 800f3f8:	602f      	str	r7, [r5, #0]
 800f3fa:	2000      	movs	r0, #0
 800f3fc:	e022      	b.n	800f444 <__sflush_r+0xf8>
 800f3fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f402:	b21b      	sxth	r3, r3
 800f404:	e01b      	b.n	800f43e <__sflush_r+0xf2>
 800f406:	690f      	ldr	r7, [r1, #16]
 800f408:	2f00      	cmp	r7, #0
 800f40a:	d0f6      	beq.n	800f3fa <__sflush_r+0xae>
 800f40c:	0793      	lsls	r3, r2, #30
 800f40e:	680e      	ldr	r6, [r1, #0]
 800f410:	bf08      	it	eq
 800f412:	694b      	ldreq	r3, [r1, #20]
 800f414:	600f      	str	r7, [r1, #0]
 800f416:	bf18      	it	ne
 800f418:	2300      	movne	r3, #0
 800f41a:	eba6 0807 	sub.w	r8, r6, r7
 800f41e:	608b      	str	r3, [r1, #8]
 800f420:	f1b8 0f00 	cmp.w	r8, #0
 800f424:	dde9      	ble.n	800f3fa <__sflush_r+0xae>
 800f426:	6a21      	ldr	r1, [r4, #32]
 800f428:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f42a:	4643      	mov	r3, r8
 800f42c:	463a      	mov	r2, r7
 800f42e:	4628      	mov	r0, r5
 800f430:	47b0      	blx	r6
 800f432:	2800      	cmp	r0, #0
 800f434:	dc08      	bgt.n	800f448 <__sflush_r+0xfc>
 800f436:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f43a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f43e:	81a3      	strh	r3, [r4, #12]
 800f440:	f04f 30ff 	mov.w	r0, #4294967295
 800f444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f448:	4407      	add	r7, r0
 800f44a:	eba8 0800 	sub.w	r8, r8, r0
 800f44e:	e7e7      	b.n	800f420 <__sflush_r+0xd4>
 800f450:	dfbffffe 	.word	0xdfbffffe

0800f454 <_fflush_r>:
 800f454:	b538      	push	{r3, r4, r5, lr}
 800f456:	690b      	ldr	r3, [r1, #16]
 800f458:	4605      	mov	r5, r0
 800f45a:	460c      	mov	r4, r1
 800f45c:	b913      	cbnz	r3, 800f464 <_fflush_r+0x10>
 800f45e:	2500      	movs	r5, #0
 800f460:	4628      	mov	r0, r5
 800f462:	bd38      	pop	{r3, r4, r5, pc}
 800f464:	b118      	cbz	r0, 800f46e <_fflush_r+0x1a>
 800f466:	6a03      	ldr	r3, [r0, #32]
 800f468:	b90b      	cbnz	r3, 800f46e <_fflush_r+0x1a>
 800f46a:	f7ff f825 	bl	800e4b8 <__sinit>
 800f46e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f472:	2b00      	cmp	r3, #0
 800f474:	d0f3      	beq.n	800f45e <_fflush_r+0xa>
 800f476:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f478:	07d0      	lsls	r0, r2, #31
 800f47a:	d404      	bmi.n	800f486 <_fflush_r+0x32>
 800f47c:	0599      	lsls	r1, r3, #22
 800f47e:	d402      	bmi.n	800f486 <_fflush_r+0x32>
 800f480:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f482:	f7ff fa32 	bl	800e8ea <__retarget_lock_acquire_recursive>
 800f486:	4628      	mov	r0, r5
 800f488:	4621      	mov	r1, r4
 800f48a:	f7ff ff5f 	bl	800f34c <__sflush_r>
 800f48e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f490:	07da      	lsls	r2, r3, #31
 800f492:	4605      	mov	r5, r0
 800f494:	d4e4      	bmi.n	800f460 <_fflush_r+0xc>
 800f496:	89a3      	ldrh	r3, [r4, #12]
 800f498:	059b      	lsls	r3, r3, #22
 800f49a:	d4e1      	bmi.n	800f460 <_fflush_r+0xc>
 800f49c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f49e:	f7ff fa25 	bl	800e8ec <__retarget_lock_release_recursive>
 800f4a2:	e7dd      	b.n	800f460 <_fflush_r+0xc>

0800f4a4 <__swhatbuf_r>:
 800f4a4:	b570      	push	{r4, r5, r6, lr}
 800f4a6:	460c      	mov	r4, r1
 800f4a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f4ac:	2900      	cmp	r1, #0
 800f4ae:	b096      	sub	sp, #88	@ 0x58
 800f4b0:	4615      	mov	r5, r2
 800f4b2:	461e      	mov	r6, r3
 800f4b4:	da0d      	bge.n	800f4d2 <__swhatbuf_r+0x2e>
 800f4b6:	89a3      	ldrh	r3, [r4, #12]
 800f4b8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f4bc:	f04f 0100 	mov.w	r1, #0
 800f4c0:	bf14      	ite	ne
 800f4c2:	2340      	movne	r3, #64	@ 0x40
 800f4c4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f4c8:	2000      	movs	r0, #0
 800f4ca:	6031      	str	r1, [r6, #0]
 800f4cc:	602b      	str	r3, [r5, #0]
 800f4ce:	b016      	add	sp, #88	@ 0x58
 800f4d0:	bd70      	pop	{r4, r5, r6, pc}
 800f4d2:	466a      	mov	r2, sp
 800f4d4:	f000 f896 	bl	800f604 <_fstat_r>
 800f4d8:	2800      	cmp	r0, #0
 800f4da:	dbec      	blt.n	800f4b6 <__swhatbuf_r+0x12>
 800f4dc:	9901      	ldr	r1, [sp, #4]
 800f4de:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f4e2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f4e6:	4259      	negs	r1, r3
 800f4e8:	4159      	adcs	r1, r3
 800f4ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f4ee:	e7eb      	b.n	800f4c8 <__swhatbuf_r+0x24>

0800f4f0 <__smakebuf_r>:
 800f4f0:	898b      	ldrh	r3, [r1, #12]
 800f4f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f4f4:	079d      	lsls	r5, r3, #30
 800f4f6:	4606      	mov	r6, r0
 800f4f8:	460c      	mov	r4, r1
 800f4fa:	d507      	bpl.n	800f50c <__smakebuf_r+0x1c>
 800f4fc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f500:	6023      	str	r3, [r4, #0]
 800f502:	6123      	str	r3, [r4, #16]
 800f504:	2301      	movs	r3, #1
 800f506:	6163      	str	r3, [r4, #20]
 800f508:	b003      	add	sp, #12
 800f50a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f50c:	ab01      	add	r3, sp, #4
 800f50e:	466a      	mov	r2, sp
 800f510:	f7ff ffc8 	bl	800f4a4 <__swhatbuf_r>
 800f514:	9f00      	ldr	r7, [sp, #0]
 800f516:	4605      	mov	r5, r0
 800f518:	4639      	mov	r1, r7
 800f51a:	4630      	mov	r0, r6
 800f51c:	f7ff fa62 	bl	800e9e4 <_malloc_r>
 800f520:	b948      	cbnz	r0, 800f536 <__smakebuf_r+0x46>
 800f522:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f526:	059a      	lsls	r2, r3, #22
 800f528:	d4ee      	bmi.n	800f508 <__smakebuf_r+0x18>
 800f52a:	f023 0303 	bic.w	r3, r3, #3
 800f52e:	f043 0302 	orr.w	r3, r3, #2
 800f532:	81a3      	strh	r3, [r4, #12]
 800f534:	e7e2      	b.n	800f4fc <__smakebuf_r+0xc>
 800f536:	89a3      	ldrh	r3, [r4, #12]
 800f538:	6020      	str	r0, [r4, #0]
 800f53a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f53e:	81a3      	strh	r3, [r4, #12]
 800f540:	9b01      	ldr	r3, [sp, #4]
 800f542:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f546:	b15b      	cbz	r3, 800f560 <__smakebuf_r+0x70>
 800f548:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f54c:	4630      	mov	r0, r6
 800f54e:	f000 f86b 	bl	800f628 <_isatty_r>
 800f552:	b128      	cbz	r0, 800f560 <__smakebuf_r+0x70>
 800f554:	89a3      	ldrh	r3, [r4, #12]
 800f556:	f023 0303 	bic.w	r3, r3, #3
 800f55a:	f043 0301 	orr.w	r3, r3, #1
 800f55e:	81a3      	strh	r3, [r4, #12]
 800f560:	89a3      	ldrh	r3, [r4, #12]
 800f562:	431d      	orrs	r5, r3
 800f564:	81a5      	strh	r5, [r4, #12]
 800f566:	e7cf      	b.n	800f508 <__smakebuf_r+0x18>

0800f568 <_putc_r>:
 800f568:	b570      	push	{r4, r5, r6, lr}
 800f56a:	460d      	mov	r5, r1
 800f56c:	4614      	mov	r4, r2
 800f56e:	4606      	mov	r6, r0
 800f570:	b118      	cbz	r0, 800f57a <_putc_r+0x12>
 800f572:	6a03      	ldr	r3, [r0, #32]
 800f574:	b90b      	cbnz	r3, 800f57a <_putc_r+0x12>
 800f576:	f7fe ff9f 	bl	800e4b8 <__sinit>
 800f57a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f57c:	07d8      	lsls	r0, r3, #31
 800f57e:	d405      	bmi.n	800f58c <_putc_r+0x24>
 800f580:	89a3      	ldrh	r3, [r4, #12]
 800f582:	0599      	lsls	r1, r3, #22
 800f584:	d402      	bmi.n	800f58c <_putc_r+0x24>
 800f586:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f588:	f7ff f9af 	bl	800e8ea <__retarget_lock_acquire_recursive>
 800f58c:	68a3      	ldr	r3, [r4, #8]
 800f58e:	3b01      	subs	r3, #1
 800f590:	2b00      	cmp	r3, #0
 800f592:	60a3      	str	r3, [r4, #8]
 800f594:	da05      	bge.n	800f5a2 <_putc_r+0x3a>
 800f596:	69a2      	ldr	r2, [r4, #24]
 800f598:	4293      	cmp	r3, r2
 800f59a:	db12      	blt.n	800f5c2 <_putc_r+0x5a>
 800f59c:	b2eb      	uxtb	r3, r5
 800f59e:	2b0a      	cmp	r3, #10
 800f5a0:	d00f      	beq.n	800f5c2 <_putc_r+0x5a>
 800f5a2:	6823      	ldr	r3, [r4, #0]
 800f5a4:	1c5a      	adds	r2, r3, #1
 800f5a6:	6022      	str	r2, [r4, #0]
 800f5a8:	701d      	strb	r5, [r3, #0]
 800f5aa:	b2ed      	uxtb	r5, r5
 800f5ac:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f5ae:	07da      	lsls	r2, r3, #31
 800f5b0:	d405      	bmi.n	800f5be <_putc_r+0x56>
 800f5b2:	89a3      	ldrh	r3, [r4, #12]
 800f5b4:	059b      	lsls	r3, r3, #22
 800f5b6:	d402      	bmi.n	800f5be <_putc_r+0x56>
 800f5b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f5ba:	f7ff f997 	bl	800e8ec <__retarget_lock_release_recursive>
 800f5be:	4628      	mov	r0, r5
 800f5c0:	bd70      	pop	{r4, r5, r6, pc}
 800f5c2:	4629      	mov	r1, r5
 800f5c4:	4622      	mov	r2, r4
 800f5c6:	4630      	mov	r0, r6
 800f5c8:	f7ff f887 	bl	800e6da <__swbuf_r>
 800f5cc:	4605      	mov	r5, r0
 800f5ce:	e7ed      	b.n	800f5ac <_putc_r+0x44>

0800f5d0 <memmove>:
 800f5d0:	4288      	cmp	r0, r1
 800f5d2:	b510      	push	{r4, lr}
 800f5d4:	eb01 0402 	add.w	r4, r1, r2
 800f5d8:	d902      	bls.n	800f5e0 <memmove+0x10>
 800f5da:	4284      	cmp	r4, r0
 800f5dc:	4623      	mov	r3, r4
 800f5de:	d807      	bhi.n	800f5f0 <memmove+0x20>
 800f5e0:	1e43      	subs	r3, r0, #1
 800f5e2:	42a1      	cmp	r1, r4
 800f5e4:	d008      	beq.n	800f5f8 <memmove+0x28>
 800f5e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f5ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f5ee:	e7f8      	b.n	800f5e2 <memmove+0x12>
 800f5f0:	4402      	add	r2, r0
 800f5f2:	4601      	mov	r1, r0
 800f5f4:	428a      	cmp	r2, r1
 800f5f6:	d100      	bne.n	800f5fa <memmove+0x2a>
 800f5f8:	bd10      	pop	{r4, pc}
 800f5fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f5fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f602:	e7f7      	b.n	800f5f4 <memmove+0x24>

0800f604 <_fstat_r>:
 800f604:	b538      	push	{r3, r4, r5, lr}
 800f606:	4d07      	ldr	r5, [pc, #28]	@ (800f624 <_fstat_r+0x20>)
 800f608:	2300      	movs	r3, #0
 800f60a:	4604      	mov	r4, r0
 800f60c:	4608      	mov	r0, r1
 800f60e:	4611      	mov	r1, r2
 800f610:	602b      	str	r3, [r5, #0]
 800f612:	f000 f867 	bl	800f6e4 <_fstat>
 800f616:	1c43      	adds	r3, r0, #1
 800f618:	d102      	bne.n	800f620 <_fstat_r+0x1c>
 800f61a:	682b      	ldr	r3, [r5, #0]
 800f61c:	b103      	cbz	r3, 800f620 <_fstat_r+0x1c>
 800f61e:	6023      	str	r3, [r4, #0]
 800f620:	bd38      	pop	{r3, r4, r5, pc}
 800f622:	bf00      	nop
 800f624:	200023ac 	.word	0x200023ac

0800f628 <_isatty_r>:
 800f628:	b538      	push	{r3, r4, r5, lr}
 800f62a:	4d06      	ldr	r5, [pc, #24]	@ (800f644 <_isatty_r+0x1c>)
 800f62c:	2300      	movs	r3, #0
 800f62e:	4604      	mov	r4, r0
 800f630:	4608      	mov	r0, r1
 800f632:	602b      	str	r3, [r5, #0]
 800f634:	f000 f85e 	bl	800f6f4 <_isatty>
 800f638:	1c43      	adds	r3, r0, #1
 800f63a:	d102      	bne.n	800f642 <_isatty_r+0x1a>
 800f63c:	682b      	ldr	r3, [r5, #0]
 800f63e:	b103      	cbz	r3, 800f642 <_isatty_r+0x1a>
 800f640:	6023      	str	r3, [r4, #0]
 800f642:	bd38      	pop	{r3, r4, r5, pc}
 800f644:	200023ac 	.word	0x200023ac

0800f648 <_sbrk_r>:
 800f648:	b538      	push	{r3, r4, r5, lr}
 800f64a:	4d06      	ldr	r5, [pc, #24]	@ (800f664 <_sbrk_r+0x1c>)
 800f64c:	2300      	movs	r3, #0
 800f64e:	4604      	mov	r4, r0
 800f650:	4608      	mov	r0, r1
 800f652:	602b      	str	r3, [r5, #0]
 800f654:	f000 f866 	bl	800f724 <_sbrk>
 800f658:	1c43      	adds	r3, r0, #1
 800f65a:	d102      	bne.n	800f662 <_sbrk_r+0x1a>
 800f65c:	682b      	ldr	r3, [r5, #0]
 800f65e:	b103      	cbz	r3, 800f662 <_sbrk_r+0x1a>
 800f660:	6023      	str	r3, [r4, #0]
 800f662:	bd38      	pop	{r3, r4, r5, pc}
 800f664:	200023ac 	.word	0x200023ac

0800f668 <_realloc_r>:
 800f668:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f66c:	4680      	mov	r8, r0
 800f66e:	4615      	mov	r5, r2
 800f670:	460c      	mov	r4, r1
 800f672:	b921      	cbnz	r1, 800f67e <_realloc_r+0x16>
 800f674:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f678:	4611      	mov	r1, r2
 800f67a:	f7ff b9b3 	b.w	800e9e4 <_malloc_r>
 800f67e:	b92a      	cbnz	r2, 800f68c <_realloc_r+0x24>
 800f680:	f7ff f944 	bl	800e90c <_free_r>
 800f684:	2400      	movs	r4, #0
 800f686:	4620      	mov	r0, r4
 800f688:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f68c:	f000 f81a 	bl	800f6c4 <_malloc_usable_size_r>
 800f690:	4285      	cmp	r5, r0
 800f692:	4606      	mov	r6, r0
 800f694:	d802      	bhi.n	800f69c <_realloc_r+0x34>
 800f696:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800f69a:	d8f4      	bhi.n	800f686 <_realloc_r+0x1e>
 800f69c:	4629      	mov	r1, r5
 800f69e:	4640      	mov	r0, r8
 800f6a0:	f7ff f9a0 	bl	800e9e4 <_malloc_r>
 800f6a4:	4607      	mov	r7, r0
 800f6a6:	2800      	cmp	r0, #0
 800f6a8:	d0ec      	beq.n	800f684 <_realloc_r+0x1c>
 800f6aa:	42b5      	cmp	r5, r6
 800f6ac:	462a      	mov	r2, r5
 800f6ae:	4621      	mov	r1, r4
 800f6b0:	bf28      	it	cs
 800f6b2:	4632      	movcs	r2, r6
 800f6b4:	f7ff f91b 	bl	800e8ee <memcpy>
 800f6b8:	4621      	mov	r1, r4
 800f6ba:	4640      	mov	r0, r8
 800f6bc:	f7ff f926 	bl	800e90c <_free_r>
 800f6c0:	463c      	mov	r4, r7
 800f6c2:	e7e0      	b.n	800f686 <_realloc_r+0x1e>

0800f6c4 <_malloc_usable_size_r>:
 800f6c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f6c8:	1f18      	subs	r0, r3, #4
 800f6ca:	2b00      	cmp	r3, #0
 800f6cc:	bfbc      	itt	lt
 800f6ce:	580b      	ldrlt	r3, [r1, r0]
 800f6d0:	18c0      	addlt	r0, r0, r3
 800f6d2:	4770      	bx	lr

0800f6d4 <_close>:
 800f6d4:	4b02      	ldr	r3, [pc, #8]	@ (800f6e0 <_close+0xc>)
 800f6d6:	2258      	movs	r2, #88	@ 0x58
 800f6d8:	601a      	str	r2, [r3, #0]
 800f6da:	f04f 30ff 	mov.w	r0, #4294967295
 800f6de:	4770      	bx	lr
 800f6e0:	200023ac 	.word	0x200023ac

0800f6e4 <_fstat>:
 800f6e4:	4b02      	ldr	r3, [pc, #8]	@ (800f6f0 <_fstat+0xc>)
 800f6e6:	2258      	movs	r2, #88	@ 0x58
 800f6e8:	601a      	str	r2, [r3, #0]
 800f6ea:	f04f 30ff 	mov.w	r0, #4294967295
 800f6ee:	4770      	bx	lr
 800f6f0:	200023ac 	.word	0x200023ac

0800f6f4 <_isatty>:
 800f6f4:	4b02      	ldr	r3, [pc, #8]	@ (800f700 <_isatty+0xc>)
 800f6f6:	2258      	movs	r2, #88	@ 0x58
 800f6f8:	601a      	str	r2, [r3, #0]
 800f6fa:	2000      	movs	r0, #0
 800f6fc:	4770      	bx	lr
 800f6fe:	bf00      	nop
 800f700:	200023ac 	.word	0x200023ac

0800f704 <_lseek>:
 800f704:	4b02      	ldr	r3, [pc, #8]	@ (800f710 <_lseek+0xc>)
 800f706:	2258      	movs	r2, #88	@ 0x58
 800f708:	601a      	str	r2, [r3, #0]
 800f70a:	f04f 30ff 	mov.w	r0, #4294967295
 800f70e:	4770      	bx	lr
 800f710:	200023ac 	.word	0x200023ac

0800f714 <_read>:
 800f714:	4b02      	ldr	r3, [pc, #8]	@ (800f720 <_read+0xc>)
 800f716:	2258      	movs	r2, #88	@ 0x58
 800f718:	601a      	str	r2, [r3, #0]
 800f71a:	f04f 30ff 	mov.w	r0, #4294967295
 800f71e:	4770      	bx	lr
 800f720:	200023ac 	.word	0x200023ac

0800f724 <_sbrk>:
 800f724:	4a04      	ldr	r2, [pc, #16]	@ (800f738 <_sbrk+0x14>)
 800f726:	6811      	ldr	r1, [r2, #0]
 800f728:	4603      	mov	r3, r0
 800f72a:	b909      	cbnz	r1, 800f730 <_sbrk+0xc>
 800f72c:	4903      	ldr	r1, [pc, #12]	@ (800f73c <_sbrk+0x18>)
 800f72e:	6011      	str	r1, [r2, #0]
 800f730:	6810      	ldr	r0, [r2, #0]
 800f732:	4403      	add	r3, r0
 800f734:	6013      	str	r3, [r2, #0]
 800f736:	4770      	bx	lr
 800f738:	200023bc 	.word	0x200023bc
 800f73c:	200023c0 	.word	0x200023c0

0800f740 <_init>:
 800f740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f742:	bf00      	nop
 800f744:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f746:	bc08      	pop	{r3}
 800f748:	469e      	mov	lr, r3
 800f74a:	4770      	bx	lr

0800f74c <_fini>:
 800f74c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f74e:	bf00      	nop
 800f750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f752:	bc08      	pop	{r3}
 800f754:	469e      	mov	lr, r3
 800f756:	4770      	bx	lr
