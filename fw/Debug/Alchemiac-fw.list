
Alchemiac-fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bab4  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011e4  0800bbf4  0800bbf4  0000cbf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800cdd8  0800cdd8  0000ddd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800cde0  0800cde0  0000dde0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800cde4  0800cde4  0000dde4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000088  20000008  0800cde8  0000e008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 00000025  20000090  0800ce70  0000e090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  200000b8  0800ce95  0000e0b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000540  200000cc  0800cea6  0000e0cc  2**2
                  ALLOC
 10 ._user_heap_stack 00001404  2000060c  0800cea6  0000e60c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000ea67  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  0000f000  2**2
                  ALLOC
 13 MB_MEM1       000001bb  20030028  20030028  0000f000  2**2
                  ALLOC
 14 .MB_MEM2      00000883  200301e4  0800cea6  0000e1e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 15 .debug_info   0002c7cf  00000000  00000000  0000ea97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00006329  00000000  00000000  0003b266  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002750  00000000  00000000  00041590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00001e11  00000000  00000000  00043ce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002e6a7  00000000  00000000  00045af1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0002e61a  00000000  00000000  00074198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    00106435  00000000  00000000  000a27b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  001a8be7  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000ab60  00000000  00000000  001a8c2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 0000005a  00000000  00000000  001b378c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200000cc 	.word	0x200000cc
 800015c:	00000000 	.word	0x00000000
 8000160:	0800bbdc 	.word	0x0800bbdc

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200000d0 	.word	0x200000d0
 800017c:	0800bbdc 	.word	0x0800bbdc

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_dmul>:
 8000230:	b570      	push	{r4, r5, r6, lr}
 8000232:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000236:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800023a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800023e:	bf1d      	ittte	ne
 8000240:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000244:	ea94 0f0c 	teqne	r4, ip
 8000248:	ea95 0f0c 	teqne	r5, ip
 800024c:	f000 f8de 	bleq	800040c <__aeabi_dmul+0x1dc>
 8000250:	442c      	add	r4, r5
 8000252:	ea81 0603 	eor.w	r6, r1, r3
 8000256:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800025a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800025e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000262:	bf18      	it	ne
 8000264:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000268:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800026c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000270:	d038      	beq.n	80002e4 <__aeabi_dmul+0xb4>
 8000272:	fba0 ce02 	umull	ip, lr, r0, r2
 8000276:	f04f 0500 	mov.w	r5, #0
 800027a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800027e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000282:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000286:	f04f 0600 	mov.w	r6, #0
 800028a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800028e:	f09c 0f00 	teq	ip, #0
 8000292:	bf18      	it	ne
 8000294:	f04e 0e01 	orrne.w	lr, lr, #1
 8000298:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800029c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80002a0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80002a4:	d204      	bcs.n	80002b0 <__aeabi_dmul+0x80>
 80002a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002aa:	416d      	adcs	r5, r5
 80002ac:	eb46 0606 	adc.w	r6, r6, r6
 80002b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002c4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80002c8:	bf88      	it	hi
 80002ca:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80002ce:	d81e      	bhi.n	800030e <__aeabi_dmul+0xde>
 80002d0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80002d4:	bf08      	it	eq
 80002d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002da:	f150 0000 	adcs.w	r0, r0, #0
 80002de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002e2:	bd70      	pop	{r4, r5, r6, pc}
 80002e4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80002e8:	ea46 0101 	orr.w	r1, r6, r1
 80002ec:	ea40 0002 	orr.w	r0, r0, r2
 80002f0:	ea81 0103 	eor.w	r1, r1, r3
 80002f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002f8:	bfc2      	ittt	gt
 80002fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000302:	bd70      	popgt	{r4, r5, r6, pc}
 8000304:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000308:	f04f 0e00 	mov.w	lr, #0
 800030c:	3c01      	subs	r4, #1
 800030e:	f300 80ab 	bgt.w	8000468 <__aeabi_dmul+0x238>
 8000312:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000316:	bfde      	ittt	le
 8000318:	2000      	movle	r0, #0
 800031a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800031e:	bd70      	pople	{r4, r5, r6, pc}
 8000320:	f1c4 0400 	rsb	r4, r4, #0
 8000324:	3c20      	subs	r4, #32
 8000326:	da35      	bge.n	8000394 <__aeabi_dmul+0x164>
 8000328:	340c      	adds	r4, #12
 800032a:	dc1b      	bgt.n	8000364 <__aeabi_dmul+0x134>
 800032c:	f104 0414 	add.w	r4, r4, #20
 8000330:	f1c4 0520 	rsb	r5, r4, #32
 8000334:	fa00 f305 	lsl.w	r3, r0, r5
 8000338:	fa20 f004 	lsr.w	r0, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea40 0002 	orr.w	r0, r0, r2
 8000344:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000348:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800034c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000350:	fa21 f604 	lsr.w	r6, r1, r4
 8000354:	eb42 0106 	adc.w	r1, r2, r6
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f1c4 040c 	rsb	r4, r4, #12
 8000368:	f1c4 0520 	rsb	r5, r4, #32
 800036c:	fa00 f304 	lsl.w	r3, r0, r4
 8000370:	fa20 f005 	lsr.w	r0, r0, r5
 8000374:	fa01 f204 	lsl.w	r2, r1, r4
 8000378:	ea40 0002 	orr.w	r0, r0, r2
 800037c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000380:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000384:	f141 0100 	adc.w	r1, r1, #0
 8000388:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800038c:	bf08      	it	eq
 800038e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000392:	bd70      	pop	{r4, r5, r6, pc}
 8000394:	f1c4 0520 	rsb	r5, r4, #32
 8000398:	fa00 f205 	lsl.w	r2, r0, r5
 800039c:	ea4e 0e02 	orr.w	lr, lr, r2
 80003a0:	fa20 f304 	lsr.w	r3, r0, r4
 80003a4:	fa01 f205 	lsl.w	r2, r1, r5
 80003a8:	ea43 0302 	orr.w	r3, r3, r2
 80003ac:	fa21 f004 	lsr.w	r0, r1, r4
 80003b0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003b4:	fa21 f204 	lsr.w	r2, r1, r4
 80003b8:	ea20 0002 	bic.w	r0, r0, r2
 80003bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003c4:	bf08      	it	eq
 80003c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003ca:	bd70      	pop	{r4, r5, r6, pc}
 80003cc:	f094 0f00 	teq	r4, #0
 80003d0:	d10f      	bne.n	80003f2 <__aeabi_dmul+0x1c2>
 80003d2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80003d6:	0040      	lsls	r0, r0, #1
 80003d8:	eb41 0101 	adc.w	r1, r1, r1
 80003dc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80003e0:	bf08      	it	eq
 80003e2:	3c01      	subeq	r4, #1
 80003e4:	d0f7      	beq.n	80003d6 <__aeabi_dmul+0x1a6>
 80003e6:	ea41 0106 	orr.w	r1, r1, r6
 80003ea:	f095 0f00 	teq	r5, #0
 80003ee:	bf18      	it	ne
 80003f0:	4770      	bxne	lr
 80003f2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80003f6:	0052      	lsls	r2, r2, #1
 80003f8:	eb43 0303 	adc.w	r3, r3, r3
 80003fc:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000400:	bf08      	it	eq
 8000402:	3d01      	subeq	r5, #1
 8000404:	d0f7      	beq.n	80003f6 <__aeabi_dmul+0x1c6>
 8000406:	ea43 0306 	orr.w	r3, r3, r6
 800040a:	4770      	bx	lr
 800040c:	ea94 0f0c 	teq	r4, ip
 8000410:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000414:	bf18      	it	ne
 8000416:	ea95 0f0c 	teqne	r5, ip
 800041a:	d00c      	beq.n	8000436 <__aeabi_dmul+0x206>
 800041c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000420:	bf18      	it	ne
 8000422:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000426:	d1d1      	bne.n	80003cc <__aeabi_dmul+0x19c>
 8000428:	ea81 0103 	eor.w	r1, r1, r3
 800042c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000430:	f04f 0000 	mov.w	r0, #0
 8000434:	bd70      	pop	{r4, r5, r6, pc}
 8000436:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800043a:	bf06      	itte	eq
 800043c:	4610      	moveq	r0, r2
 800043e:	4619      	moveq	r1, r3
 8000440:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000444:	d019      	beq.n	800047a <__aeabi_dmul+0x24a>
 8000446:	ea94 0f0c 	teq	r4, ip
 800044a:	d102      	bne.n	8000452 <__aeabi_dmul+0x222>
 800044c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000450:	d113      	bne.n	800047a <__aeabi_dmul+0x24a>
 8000452:	ea95 0f0c 	teq	r5, ip
 8000456:	d105      	bne.n	8000464 <__aeabi_dmul+0x234>
 8000458:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800045c:	bf1c      	itt	ne
 800045e:	4610      	movne	r0, r2
 8000460:	4619      	movne	r1, r3
 8000462:	d10a      	bne.n	800047a <__aeabi_dmul+0x24a>
 8000464:	ea81 0103 	eor.w	r1, r1, r3
 8000468:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800046c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000470:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000474:	f04f 0000 	mov.w	r0, #0
 8000478:	bd70      	pop	{r4, r5, r6, pc}
 800047a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800047e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000482:	bd70      	pop	{r4, r5, r6, pc}

08000484 <__aeabi_drsub>:
 8000484:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000488:	e002      	b.n	8000490 <__adddf3>
 800048a:	bf00      	nop

0800048c <__aeabi_dsub>:
 800048c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000490 <__adddf3>:
 8000490:	b530      	push	{r4, r5, lr}
 8000492:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000496:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800049a:	ea94 0f05 	teq	r4, r5
 800049e:	bf08      	it	eq
 80004a0:	ea90 0f02 	teqeq	r0, r2
 80004a4:	bf1f      	itttt	ne
 80004a6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004aa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004ae:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004b2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b6:	f000 80e2 	beq.w	800067e <__adddf3+0x1ee>
 80004ba:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004be:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004c2:	bfb8      	it	lt
 80004c4:	426d      	neglt	r5, r5
 80004c6:	dd0c      	ble.n	80004e2 <__adddf3+0x52>
 80004c8:	442c      	add	r4, r5
 80004ca:	ea80 0202 	eor.w	r2, r0, r2
 80004ce:	ea81 0303 	eor.w	r3, r1, r3
 80004d2:	ea82 0000 	eor.w	r0, r2, r0
 80004d6:	ea83 0101 	eor.w	r1, r3, r1
 80004da:	ea80 0202 	eor.w	r2, r0, r2
 80004de:	ea81 0303 	eor.w	r3, r1, r3
 80004e2:	2d36      	cmp	r5, #54	@ 0x36
 80004e4:	bf88      	it	hi
 80004e6:	bd30      	pophi	{r4, r5, pc}
 80004e8:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80004ec:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004f0:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80004f4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004f8:	d002      	beq.n	8000500 <__adddf3+0x70>
 80004fa:	4240      	negs	r0, r0
 80004fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000500:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000504:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000508:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800050c:	d002      	beq.n	8000514 <__adddf3+0x84>
 800050e:	4252      	negs	r2, r2
 8000510:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000514:	ea94 0f05 	teq	r4, r5
 8000518:	f000 80a7 	beq.w	800066a <__adddf3+0x1da>
 800051c:	f1a4 0401 	sub.w	r4, r4, #1
 8000520:	f1d5 0e20 	rsbs	lr, r5, #32
 8000524:	db0d      	blt.n	8000542 <__adddf3+0xb2>
 8000526:	fa02 fc0e 	lsl.w	ip, r2, lr
 800052a:	fa22 f205 	lsr.w	r2, r2, r5
 800052e:	1880      	adds	r0, r0, r2
 8000530:	f141 0100 	adc.w	r1, r1, #0
 8000534:	fa03 f20e 	lsl.w	r2, r3, lr
 8000538:	1880      	adds	r0, r0, r2
 800053a:	fa43 f305 	asr.w	r3, r3, r5
 800053e:	4159      	adcs	r1, r3
 8000540:	e00e      	b.n	8000560 <__adddf3+0xd0>
 8000542:	f1a5 0520 	sub.w	r5, r5, #32
 8000546:	f10e 0e20 	add.w	lr, lr, #32
 800054a:	2a01      	cmp	r2, #1
 800054c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000550:	bf28      	it	cs
 8000552:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000556:	fa43 f305 	asr.w	r3, r3, r5
 800055a:	18c0      	adds	r0, r0, r3
 800055c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000560:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000564:	d507      	bpl.n	8000576 <__adddf3+0xe6>
 8000566:	f04f 0e00 	mov.w	lr, #0
 800056a:	f1dc 0c00 	rsbs	ip, ip, #0
 800056e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000572:	eb6e 0101 	sbc.w	r1, lr, r1
 8000576:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800057a:	d31b      	bcc.n	80005b4 <__adddf3+0x124>
 800057c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000580:	d30c      	bcc.n	800059c <__adddf3+0x10c>
 8000582:	0849      	lsrs	r1, r1, #1
 8000584:	ea5f 0030 	movs.w	r0, r0, rrx
 8000588:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800058c:	f104 0401 	add.w	r4, r4, #1
 8000590:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000594:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000598:	f080 809a 	bcs.w	80006d0 <__adddf3+0x240>
 800059c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80005a0:	bf08      	it	eq
 80005a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005a6:	f150 0000 	adcs.w	r0, r0, #0
 80005aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ae:	ea41 0105 	orr.w	r1, r1, r5
 80005b2:	bd30      	pop	{r4, r5, pc}
 80005b4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005b8:	4140      	adcs	r0, r0
 80005ba:	eb41 0101 	adc.w	r1, r1, r1
 80005be:	3c01      	subs	r4, #1
 80005c0:	bf28      	it	cs
 80005c2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80005c6:	d2e9      	bcs.n	800059c <__adddf3+0x10c>
 80005c8:	f091 0f00 	teq	r1, #0
 80005cc:	bf04      	itt	eq
 80005ce:	4601      	moveq	r1, r0
 80005d0:	2000      	moveq	r0, #0
 80005d2:	fab1 f381 	clz	r3, r1
 80005d6:	bf08      	it	eq
 80005d8:	3320      	addeq	r3, #32
 80005da:	f1a3 030b 	sub.w	r3, r3, #11
 80005de:	f1b3 0220 	subs.w	r2, r3, #32
 80005e2:	da0c      	bge.n	80005fe <__adddf3+0x16e>
 80005e4:	320c      	adds	r2, #12
 80005e6:	dd08      	ble.n	80005fa <__adddf3+0x16a>
 80005e8:	f102 0c14 	add.w	ip, r2, #20
 80005ec:	f1c2 020c 	rsb	r2, r2, #12
 80005f0:	fa01 f00c 	lsl.w	r0, r1, ip
 80005f4:	fa21 f102 	lsr.w	r1, r1, r2
 80005f8:	e00c      	b.n	8000614 <__adddf3+0x184>
 80005fa:	f102 0214 	add.w	r2, r2, #20
 80005fe:	bfd8      	it	le
 8000600:	f1c2 0c20 	rsble	ip, r2, #32
 8000604:	fa01 f102 	lsl.w	r1, r1, r2
 8000608:	fa20 fc0c 	lsr.w	ip, r0, ip
 800060c:	bfdc      	itt	le
 800060e:	ea41 010c 	orrle.w	r1, r1, ip
 8000612:	4090      	lslle	r0, r2
 8000614:	1ae4      	subs	r4, r4, r3
 8000616:	bfa2      	ittt	ge
 8000618:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800061c:	4329      	orrge	r1, r5
 800061e:	bd30      	popge	{r4, r5, pc}
 8000620:	ea6f 0404 	mvn.w	r4, r4
 8000624:	3c1f      	subs	r4, #31
 8000626:	da1c      	bge.n	8000662 <__adddf3+0x1d2>
 8000628:	340c      	adds	r4, #12
 800062a:	dc0e      	bgt.n	800064a <__adddf3+0x1ba>
 800062c:	f104 0414 	add.w	r4, r4, #20
 8000630:	f1c4 0220 	rsb	r2, r4, #32
 8000634:	fa20 f004 	lsr.w	r0, r0, r4
 8000638:	fa01 f302 	lsl.w	r3, r1, r2
 800063c:	ea40 0003 	orr.w	r0, r0, r3
 8000640:	fa21 f304 	lsr.w	r3, r1, r4
 8000644:	ea45 0103 	orr.w	r1, r5, r3
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	f1c4 040c 	rsb	r4, r4, #12
 800064e:	f1c4 0220 	rsb	r2, r4, #32
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 f304 	lsl.w	r3, r1, r4
 800065a:	ea40 0003 	orr.w	r0, r0, r3
 800065e:	4629      	mov	r1, r5
 8000660:	bd30      	pop	{r4, r5, pc}
 8000662:	fa21 f004 	lsr.w	r0, r1, r4
 8000666:	4629      	mov	r1, r5
 8000668:	bd30      	pop	{r4, r5, pc}
 800066a:	f094 0f00 	teq	r4, #0
 800066e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000672:	bf06      	itte	eq
 8000674:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000678:	3401      	addeq	r4, #1
 800067a:	3d01      	subne	r5, #1
 800067c:	e74e      	b.n	800051c <__adddf3+0x8c>
 800067e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000682:	bf18      	it	ne
 8000684:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000688:	d029      	beq.n	80006de <__adddf3+0x24e>
 800068a:	ea94 0f05 	teq	r4, r5
 800068e:	bf08      	it	eq
 8000690:	ea90 0f02 	teqeq	r0, r2
 8000694:	d005      	beq.n	80006a2 <__adddf3+0x212>
 8000696:	ea54 0c00 	orrs.w	ip, r4, r0
 800069a:	bf04      	itt	eq
 800069c:	4619      	moveq	r1, r3
 800069e:	4610      	moveq	r0, r2
 80006a0:	bd30      	pop	{r4, r5, pc}
 80006a2:	ea91 0f03 	teq	r1, r3
 80006a6:	bf1e      	ittt	ne
 80006a8:	2100      	movne	r1, #0
 80006aa:	2000      	movne	r0, #0
 80006ac:	bd30      	popne	{r4, r5, pc}
 80006ae:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006b2:	d105      	bne.n	80006c0 <__adddf3+0x230>
 80006b4:	0040      	lsls	r0, r0, #1
 80006b6:	4149      	adcs	r1, r1
 80006b8:	bf28      	it	cs
 80006ba:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80006be:	bd30      	pop	{r4, r5, pc}
 80006c0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80006c4:	bf3c      	itt	cc
 80006c6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80006ca:	bd30      	popcc	{r4, r5, pc}
 80006cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006d0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80006d4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd30      	pop	{r4, r5, pc}
 80006de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006e2:	bf1a      	itte	ne
 80006e4:	4619      	movne	r1, r3
 80006e6:	4610      	movne	r0, r2
 80006e8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006ec:	bf1c      	itt	ne
 80006ee:	460b      	movne	r3, r1
 80006f0:	4602      	movne	r2, r0
 80006f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006f6:	bf06      	itte	eq
 80006f8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006fc:	ea91 0f03 	teqeq	r1, r3
 8000700:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000704:	bd30      	pop	{r4, r5, pc}
 8000706:	bf00      	nop

08000708 <__aeabi_ui2d>:
 8000708:	f090 0f00 	teq	r0, #0
 800070c:	bf04      	itt	eq
 800070e:	2100      	moveq	r1, #0
 8000710:	4770      	bxeq	lr
 8000712:	b530      	push	{r4, r5, lr}
 8000714:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000718:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800071c:	f04f 0500 	mov.w	r5, #0
 8000720:	f04f 0100 	mov.w	r1, #0
 8000724:	e750      	b.n	80005c8 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_i2d>:
 8000728:	f090 0f00 	teq	r0, #0
 800072c:	bf04      	itt	eq
 800072e:	2100      	moveq	r1, #0
 8000730:	4770      	bxeq	lr
 8000732:	b530      	push	{r4, r5, lr}
 8000734:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000738:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800073c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000740:	bf48      	it	mi
 8000742:	4240      	negmi	r0, r0
 8000744:	f04f 0100 	mov.w	r1, #0
 8000748:	e73e      	b.n	80005c8 <__adddf3+0x138>
 800074a:	bf00      	nop

0800074c <__aeabi_f2d>:
 800074c:	0042      	lsls	r2, r0, #1
 800074e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000752:	ea4f 0131 	mov.w	r1, r1, rrx
 8000756:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800075a:	bf1f      	itttt	ne
 800075c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000760:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000764:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000768:	4770      	bxne	lr
 800076a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800076e:	bf08      	it	eq
 8000770:	4770      	bxeq	lr
 8000772:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000776:	bf04      	itt	eq
 8000778:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800077c:	4770      	bxeq	lr
 800077e:	b530      	push	{r4, r5, lr}
 8000780:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000784:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000788:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	e71c      	b.n	80005c8 <__adddf3+0x138>
 800078e:	bf00      	nop

08000790 <__aeabi_ul2d>:
 8000790:	ea50 0201 	orrs.w	r2, r0, r1
 8000794:	bf08      	it	eq
 8000796:	4770      	bxeq	lr
 8000798:	b530      	push	{r4, r5, lr}
 800079a:	f04f 0500 	mov.w	r5, #0
 800079e:	e00a      	b.n	80007b6 <__aeabi_l2d+0x16>

080007a0 <__aeabi_l2d>:
 80007a0:	ea50 0201 	orrs.w	r2, r0, r1
 80007a4:	bf08      	it	eq
 80007a6:	4770      	bxeq	lr
 80007a8:	b530      	push	{r4, r5, lr}
 80007aa:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80007ae:	d502      	bpl.n	80007b6 <__aeabi_l2d+0x16>
 80007b0:	4240      	negs	r0, r0
 80007b2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007b6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007ba:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007be:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007c2:	f43f aed8 	beq.w	8000576 <__adddf3+0xe6>
 80007c6:	f04f 0203 	mov.w	r2, #3
 80007ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007ce:	bf18      	it	ne
 80007d0:	3203      	addne	r2, #3
 80007d2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007d6:	bf18      	it	ne
 80007d8:	3203      	addne	r2, #3
 80007da:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007de:	f1c2 0320 	rsb	r3, r2, #32
 80007e2:	fa00 fc03 	lsl.w	ip, r0, r3
 80007e6:	fa20 f002 	lsr.w	r0, r0, r2
 80007ea:	fa01 fe03 	lsl.w	lr, r1, r3
 80007ee:	ea40 000e 	orr.w	r0, r0, lr
 80007f2:	fa21 f102 	lsr.w	r1, r1, r2
 80007f6:	4414      	add	r4, r2
 80007f8:	e6bd      	b.n	8000576 <__adddf3+0xe6>
 80007fa:	bf00      	nop

080007fc <__aeabi_uldivmod>:
 80007fc:	b953      	cbnz	r3, 8000814 <__aeabi_uldivmod+0x18>
 80007fe:	b94a      	cbnz	r2, 8000814 <__aeabi_uldivmod+0x18>
 8000800:	2900      	cmp	r1, #0
 8000802:	bf08      	it	eq
 8000804:	2800      	cmpeq	r0, #0
 8000806:	bf1c      	itt	ne
 8000808:	f04f 31ff 	movne.w	r1, #4294967295
 800080c:	f04f 30ff 	movne.w	r0, #4294967295
 8000810:	f000 b96a 	b.w	8000ae8 <__aeabi_idiv0>
 8000814:	f1ad 0c08 	sub.w	ip, sp, #8
 8000818:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800081c:	f000 f806 	bl	800082c <__udivmoddi4>
 8000820:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000824:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000828:	b004      	add	sp, #16
 800082a:	4770      	bx	lr

0800082c <__udivmoddi4>:
 800082c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000830:	9d08      	ldr	r5, [sp, #32]
 8000832:	460c      	mov	r4, r1
 8000834:	2b00      	cmp	r3, #0
 8000836:	d14e      	bne.n	80008d6 <__udivmoddi4+0xaa>
 8000838:	4694      	mov	ip, r2
 800083a:	458c      	cmp	ip, r1
 800083c:	4686      	mov	lr, r0
 800083e:	fab2 f282 	clz	r2, r2
 8000842:	d962      	bls.n	800090a <__udivmoddi4+0xde>
 8000844:	b14a      	cbz	r2, 800085a <__udivmoddi4+0x2e>
 8000846:	f1c2 0320 	rsb	r3, r2, #32
 800084a:	4091      	lsls	r1, r2
 800084c:	fa20 f303 	lsr.w	r3, r0, r3
 8000850:	fa0c fc02 	lsl.w	ip, ip, r2
 8000854:	4319      	orrs	r1, r3
 8000856:	fa00 fe02 	lsl.w	lr, r0, r2
 800085a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800085e:	fa1f f68c 	uxth.w	r6, ip
 8000862:	fbb1 f4f7 	udiv	r4, r1, r7
 8000866:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800086a:	fb07 1114 	mls	r1, r7, r4, r1
 800086e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000872:	fb04 f106 	mul.w	r1, r4, r6
 8000876:	4299      	cmp	r1, r3
 8000878:	d90a      	bls.n	8000890 <__udivmoddi4+0x64>
 800087a:	eb1c 0303 	adds.w	r3, ip, r3
 800087e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000882:	f080 8112 	bcs.w	8000aaa <__udivmoddi4+0x27e>
 8000886:	4299      	cmp	r1, r3
 8000888:	f240 810f 	bls.w	8000aaa <__udivmoddi4+0x27e>
 800088c:	3c02      	subs	r4, #2
 800088e:	4463      	add	r3, ip
 8000890:	1a59      	subs	r1, r3, r1
 8000892:	fa1f f38e 	uxth.w	r3, lr
 8000896:	fbb1 f0f7 	udiv	r0, r1, r7
 800089a:	fb07 1110 	mls	r1, r7, r0, r1
 800089e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008a2:	fb00 f606 	mul.w	r6, r0, r6
 80008a6:	429e      	cmp	r6, r3
 80008a8:	d90a      	bls.n	80008c0 <__udivmoddi4+0x94>
 80008aa:	eb1c 0303 	adds.w	r3, ip, r3
 80008ae:	f100 31ff 	add.w	r1, r0, #4294967295
 80008b2:	f080 80fc 	bcs.w	8000aae <__udivmoddi4+0x282>
 80008b6:	429e      	cmp	r6, r3
 80008b8:	f240 80f9 	bls.w	8000aae <__udivmoddi4+0x282>
 80008bc:	4463      	add	r3, ip
 80008be:	3802      	subs	r0, #2
 80008c0:	1b9b      	subs	r3, r3, r6
 80008c2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80008c6:	2100      	movs	r1, #0
 80008c8:	b11d      	cbz	r5, 80008d2 <__udivmoddi4+0xa6>
 80008ca:	40d3      	lsrs	r3, r2
 80008cc:	2200      	movs	r2, #0
 80008ce:	e9c5 3200 	strd	r3, r2, [r5]
 80008d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008d6:	428b      	cmp	r3, r1
 80008d8:	d905      	bls.n	80008e6 <__udivmoddi4+0xba>
 80008da:	b10d      	cbz	r5, 80008e0 <__udivmoddi4+0xb4>
 80008dc:	e9c5 0100 	strd	r0, r1, [r5]
 80008e0:	2100      	movs	r1, #0
 80008e2:	4608      	mov	r0, r1
 80008e4:	e7f5      	b.n	80008d2 <__udivmoddi4+0xa6>
 80008e6:	fab3 f183 	clz	r1, r3
 80008ea:	2900      	cmp	r1, #0
 80008ec:	d146      	bne.n	800097c <__udivmoddi4+0x150>
 80008ee:	42a3      	cmp	r3, r4
 80008f0:	d302      	bcc.n	80008f8 <__udivmoddi4+0xcc>
 80008f2:	4290      	cmp	r0, r2
 80008f4:	f0c0 80f0 	bcc.w	8000ad8 <__udivmoddi4+0x2ac>
 80008f8:	1a86      	subs	r6, r0, r2
 80008fa:	eb64 0303 	sbc.w	r3, r4, r3
 80008fe:	2001      	movs	r0, #1
 8000900:	2d00      	cmp	r5, #0
 8000902:	d0e6      	beq.n	80008d2 <__udivmoddi4+0xa6>
 8000904:	e9c5 6300 	strd	r6, r3, [r5]
 8000908:	e7e3      	b.n	80008d2 <__udivmoddi4+0xa6>
 800090a:	2a00      	cmp	r2, #0
 800090c:	f040 8090 	bne.w	8000a30 <__udivmoddi4+0x204>
 8000910:	eba1 040c 	sub.w	r4, r1, ip
 8000914:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000918:	fa1f f78c 	uxth.w	r7, ip
 800091c:	2101      	movs	r1, #1
 800091e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000922:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000926:	fb08 4416 	mls	r4, r8, r6, r4
 800092a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800092e:	fb07 f006 	mul.w	r0, r7, r6
 8000932:	4298      	cmp	r0, r3
 8000934:	d908      	bls.n	8000948 <__udivmoddi4+0x11c>
 8000936:	eb1c 0303 	adds.w	r3, ip, r3
 800093a:	f106 34ff 	add.w	r4, r6, #4294967295
 800093e:	d202      	bcs.n	8000946 <__udivmoddi4+0x11a>
 8000940:	4298      	cmp	r0, r3
 8000942:	f200 80cd 	bhi.w	8000ae0 <__udivmoddi4+0x2b4>
 8000946:	4626      	mov	r6, r4
 8000948:	1a1c      	subs	r4, r3, r0
 800094a:	fa1f f38e 	uxth.w	r3, lr
 800094e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000952:	fb08 4410 	mls	r4, r8, r0, r4
 8000956:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800095a:	fb00 f707 	mul.w	r7, r0, r7
 800095e:	429f      	cmp	r7, r3
 8000960:	d908      	bls.n	8000974 <__udivmoddi4+0x148>
 8000962:	eb1c 0303 	adds.w	r3, ip, r3
 8000966:	f100 34ff 	add.w	r4, r0, #4294967295
 800096a:	d202      	bcs.n	8000972 <__udivmoddi4+0x146>
 800096c:	429f      	cmp	r7, r3
 800096e:	f200 80b0 	bhi.w	8000ad2 <__udivmoddi4+0x2a6>
 8000972:	4620      	mov	r0, r4
 8000974:	1bdb      	subs	r3, r3, r7
 8000976:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800097a:	e7a5      	b.n	80008c8 <__udivmoddi4+0x9c>
 800097c:	f1c1 0620 	rsb	r6, r1, #32
 8000980:	408b      	lsls	r3, r1
 8000982:	fa22 f706 	lsr.w	r7, r2, r6
 8000986:	431f      	orrs	r7, r3
 8000988:	fa20 fc06 	lsr.w	ip, r0, r6
 800098c:	fa04 f301 	lsl.w	r3, r4, r1
 8000990:	ea43 030c 	orr.w	r3, r3, ip
 8000994:	40f4      	lsrs	r4, r6
 8000996:	fa00 f801 	lsl.w	r8, r0, r1
 800099a:	0c38      	lsrs	r0, r7, #16
 800099c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80009a0:	fbb4 fef0 	udiv	lr, r4, r0
 80009a4:	fa1f fc87 	uxth.w	ip, r7
 80009a8:	fb00 441e 	mls	r4, r0, lr, r4
 80009ac:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80009b0:	fb0e f90c 	mul.w	r9, lr, ip
 80009b4:	45a1      	cmp	r9, r4
 80009b6:	fa02 f201 	lsl.w	r2, r2, r1
 80009ba:	d90a      	bls.n	80009d2 <__udivmoddi4+0x1a6>
 80009bc:	193c      	adds	r4, r7, r4
 80009be:	f10e 3aff 	add.w	sl, lr, #4294967295
 80009c2:	f080 8084 	bcs.w	8000ace <__udivmoddi4+0x2a2>
 80009c6:	45a1      	cmp	r9, r4
 80009c8:	f240 8081 	bls.w	8000ace <__udivmoddi4+0x2a2>
 80009cc:	f1ae 0e02 	sub.w	lr, lr, #2
 80009d0:	443c      	add	r4, r7
 80009d2:	eba4 0409 	sub.w	r4, r4, r9
 80009d6:	fa1f f983 	uxth.w	r9, r3
 80009da:	fbb4 f3f0 	udiv	r3, r4, r0
 80009de:	fb00 4413 	mls	r4, r0, r3, r4
 80009e2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80009e6:	fb03 fc0c 	mul.w	ip, r3, ip
 80009ea:	45a4      	cmp	ip, r4
 80009ec:	d907      	bls.n	80009fe <__udivmoddi4+0x1d2>
 80009ee:	193c      	adds	r4, r7, r4
 80009f0:	f103 30ff 	add.w	r0, r3, #4294967295
 80009f4:	d267      	bcs.n	8000ac6 <__udivmoddi4+0x29a>
 80009f6:	45a4      	cmp	ip, r4
 80009f8:	d965      	bls.n	8000ac6 <__udivmoddi4+0x29a>
 80009fa:	3b02      	subs	r3, #2
 80009fc:	443c      	add	r4, r7
 80009fe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000a02:	fba0 9302 	umull	r9, r3, r0, r2
 8000a06:	eba4 040c 	sub.w	r4, r4, ip
 8000a0a:	429c      	cmp	r4, r3
 8000a0c:	46ce      	mov	lr, r9
 8000a0e:	469c      	mov	ip, r3
 8000a10:	d351      	bcc.n	8000ab6 <__udivmoddi4+0x28a>
 8000a12:	d04e      	beq.n	8000ab2 <__udivmoddi4+0x286>
 8000a14:	b155      	cbz	r5, 8000a2c <__udivmoddi4+0x200>
 8000a16:	ebb8 030e 	subs.w	r3, r8, lr
 8000a1a:	eb64 040c 	sbc.w	r4, r4, ip
 8000a1e:	fa04 f606 	lsl.w	r6, r4, r6
 8000a22:	40cb      	lsrs	r3, r1
 8000a24:	431e      	orrs	r6, r3
 8000a26:	40cc      	lsrs	r4, r1
 8000a28:	e9c5 6400 	strd	r6, r4, [r5]
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	e750      	b.n	80008d2 <__udivmoddi4+0xa6>
 8000a30:	f1c2 0320 	rsb	r3, r2, #32
 8000a34:	fa20 f103 	lsr.w	r1, r0, r3
 8000a38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a3c:	fa24 f303 	lsr.w	r3, r4, r3
 8000a40:	4094      	lsls	r4, r2
 8000a42:	430c      	orrs	r4, r1
 8000a44:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a48:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a4c:	fa1f f78c 	uxth.w	r7, ip
 8000a50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a54:	fb08 3110 	mls	r1, r8, r0, r3
 8000a58:	0c23      	lsrs	r3, r4, #16
 8000a5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a5e:	fb00 f107 	mul.w	r1, r0, r7
 8000a62:	4299      	cmp	r1, r3
 8000a64:	d908      	bls.n	8000a78 <__udivmoddi4+0x24c>
 8000a66:	eb1c 0303 	adds.w	r3, ip, r3
 8000a6a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000a6e:	d22c      	bcs.n	8000aca <__udivmoddi4+0x29e>
 8000a70:	4299      	cmp	r1, r3
 8000a72:	d92a      	bls.n	8000aca <__udivmoddi4+0x29e>
 8000a74:	3802      	subs	r0, #2
 8000a76:	4463      	add	r3, ip
 8000a78:	1a5b      	subs	r3, r3, r1
 8000a7a:	b2a4      	uxth	r4, r4
 8000a7c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000a80:	fb08 3311 	mls	r3, r8, r1, r3
 8000a84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a88:	fb01 f307 	mul.w	r3, r1, r7
 8000a8c:	42a3      	cmp	r3, r4
 8000a8e:	d908      	bls.n	8000aa2 <__udivmoddi4+0x276>
 8000a90:	eb1c 0404 	adds.w	r4, ip, r4
 8000a94:	f101 36ff 	add.w	r6, r1, #4294967295
 8000a98:	d213      	bcs.n	8000ac2 <__udivmoddi4+0x296>
 8000a9a:	42a3      	cmp	r3, r4
 8000a9c:	d911      	bls.n	8000ac2 <__udivmoddi4+0x296>
 8000a9e:	3902      	subs	r1, #2
 8000aa0:	4464      	add	r4, ip
 8000aa2:	1ae4      	subs	r4, r4, r3
 8000aa4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000aa8:	e739      	b.n	800091e <__udivmoddi4+0xf2>
 8000aaa:	4604      	mov	r4, r0
 8000aac:	e6f0      	b.n	8000890 <__udivmoddi4+0x64>
 8000aae:	4608      	mov	r0, r1
 8000ab0:	e706      	b.n	80008c0 <__udivmoddi4+0x94>
 8000ab2:	45c8      	cmp	r8, r9
 8000ab4:	d2ae      	bcs.n	8000a14 <__udivmoddi4+0x1e8>
 8000ab6:	ebb9 0e02 	subs.w	lr, r9, r2
 8000aba:	eb63 0c07 	sbc.w	ip, r3, r7
 8000abe:	3801      	subs	r0, #1
 8000ac0:	e7a8      	b.n	8000a14 <__udivmoddi4+0x1e8>
 8000ac2:	4631      	mov	r1, r6
 8000ac4:	e7ed      	b.n	8000aa2 <__udivmoddi4+0x276>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	e799      	b.n	80009fe <__udivmoddi4+0x1d2>
 8000aca:	4630      	mov	r0, r6
 8000acc:	e7d4      	b.n	8000a78 <__udivmoddi4+0x24c>
 8000ace:	46d6      	mov	lr, sl
 8000ad0:	e77f      	b.n	80009d2 <__udivmoddi4+0x1a6>
 8000ad2:	4463      	add	r3, ip
 8000ad4:	3802      	subs	r0, #2
 8000ad6:	e74d      	b.n	8000974 <__udivmoddi4+0x148>
 8000ad8:	4606      	mov	r6, r0
 8000ada:	4623      	mov	r3, r4
 8000adc:	4608      	mov	r0, r1
 8000ade:	e70f      	b.n	8000900 <__udivmoddi4+0xd4>
 8000ae0:	3e02      	subs	r6, #2
 8000ae2:	4463      	add	r3, ip
 8000ae4:	e730      	b.n	8000948 <__udivmoddi4+0x11c>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_idiv0>:
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 8000aec:	b5b0      	push	{r4, r5, r7, lr}
 8000aee:	b088      	sub	sp, #32
 8000af0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8000af2:	4b0b      	ldr	r3, [pc, #44]	@ (8000b20 <APPD_EnableCPU2+0x34>)
 8000af4:	1d3c      	adds	r4, r7, #4
 8000af6:	461d      	mov	r5, r3
 8000af8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000afa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000afc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b00:	c403      	stmia	r4!, {r0, r1}
 8000b02:	8022      	strh	r2, [r4, #0]
 8000b04:	3402      	adds	r4, #2
 8000b06:	0c13      	lsrs	r3, r2, #16
 8000b08:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8000b0a:	f008 f8ef 	bl	8008cec <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8000b0e:	1d3b      	adds	r3, r7, #4
 8000b10:	4618      	mov	r0, r3
 8000b12:	f007 fbf2 	bl	80082fa <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 8000b16:	bf00      	nop
}
 8000b18:	3720      	adds	r7, #32
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bdb0      	pop	{r4, r5, r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	0800bbf4 	.word	0x0800bbf4

08000b24 <DbgOutputTraces>:
/* USER CODE END DbgOutputInit */
  return;
}

void DbgOutputTraces(  uint8_t *p_data, uint16_t size, void (*cb)(void) )
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b084      	sub	sp, #16
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	60f8      	str	r0, [r7, #12]
 8000b2c:	460b      	mov	r3, r1
 8000b2e:	607a      	str	r2, [r7, #4]
 8000b30:	817b      	strh	r3, [r7, #10]
/* USER CODE END DbgOutputTraces */
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 8000b32:	897a      	ldrh	r2, [r7, #10]
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	68f9      	ldr	r1, [r7, #12]
 8000b38:	2000      	movs	r0, #0
 8000b3a:	f001 f859 	bl	8001bf0 <HW_UART_Transmit_DMA>

/* USER CODE END DbgOutputTraces */
  return;
 8000b3e:	bf00      	nop
}
 8000b40:	3710      	adds	r7, #16
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
	...

08000b48 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b083      	sub	sp, #12
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8000b50:	4b07      	ldr	r3, [pc, #28]	@ (8000b70 <LL_C2_PWR_SetPowerMode+0x28>)
 8000b52:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000b56:	f023 0207 	bic.w	r2, r3, #7
 8000b5a:	4905      	ldr	r1, [pc, #20]	@ (8000b70 <LL_C2_PWR_SetPowerMode+0x28>)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	4313      	orrs	r3, r2
 8000b60:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8000b64:	bf00      	nop
 8000b66:	370c      	adds	r7, #12
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr
 8000b70:	58000400 	.word	0x58000400

08000b74 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b083      	sub	sp, #12
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000b7c:	4b06      	ldr	r3, [pc, #24]	@ (8000b98 <LL_EXTI_EnableIT_32_63+0x24>)
 8000b7e:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8000b82:	4905      	ldr	r1, [pc, #20]	@ (8000b98 <LL_EXTI_EnableIT_32_63+0x24>)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	4313      	orrs	r3, r2
 8000b88:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8000b8c:	bf00      	nop
 8000b8e:	370c      	adds	r7, #12
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr
 8000b98:	58000800 	.word	0x58000800

08000b9c <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8000ba4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ba8:	4a0a      	ldr	r2, [pc, #40]	@ (8000bd4 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8000baa:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8000bae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000bb2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000bb6:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	021b      	lsls	r3, r3, #8
 8000bbe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000bc2:	4313      	orrs	r3, r2
 8000bc4:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
}
 8000bc8:	bf00      	nop
 8000bca:	370c      	adds	r7, #12
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr
 8000bd4:	cafecafe 	.word	0xcafecafe

08000bd8 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000be0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000be4:	689b      	ldr	r3, [r3, #8]
 8000be6:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8000bea:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	4313      	orrs	r3, r2
 8000bf2:	608b      	str	r3, [r1, #8]
}
 8000bf4:	bf00      	nop
 8000bf6:	370c      	adds	r7, #12
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr

08000c00 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 8000c04:	4b04      	ldr	r3, [pc, #16]	@ (8000c18 <LL_DBGMCU_GetDeviceID+0x18>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	e0042000 	.word	0xe0042000

08000c1c <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8000c20:	4b04      	ldr	r3, [pc, #16]	@ (8000c34 <LL_DBGMCU_GetRevisionID+0x18>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	0c1b      	lsrs	r3, r3, #16
 8000c26:	b29b      	uxth	r3, r3
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	e0042000 	.word	0xe0042000

08000c38 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b083      	sub	sp, #12
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	22ff      	movs	r2, #255	@ 0xff
 8000c44:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000c46:	bf00      	nop
 8000c48:	370c      	adds	r7, #12
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr

08000c52 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8000c52:	b480      	push	{r7}
 8000c54:	b083      	sub	sp, #12
 8000c56:	af00      	add	r7, sp, #0
 8000c58:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	22ca      	movs	r2, #202	@ 0xca
 8000c5e:	625a      	str	r2, [r3, #36]	@ 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	2253      	movs	r2, #83	@ 0x53
 8000c64:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000c66:	bf00      	nop
 8000c68:	370c      	adds	r7, #12
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr

08000c72 <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8000c72:	b480      	push	{r7}
 8000c74:	b083      	sub	sp, #12
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	6078      	str	r0, [r7, #4]
 8000c7a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	689b      	ldr	r3, [r3, #8]
 8000c80:	f023 0207 	bic.w	r2, r3, #7
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	431a      	orrs	r2, r3
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	609a      	str	r2, [r3, #8]
}
 8000c8c:	bf00      	nop
 8000c8e:	370c      	adds	r7, #12
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr

08000c98 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000c9c:	4b04      	ldr	r3, [pc, #16]	@ (8000cb0 <MX_APPE_Config+0x18>)
 8000c9e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000ca2:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8000ca4:	f000 f824 	bl	8000cf0 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8000ca8:	f000 f829 	bl	8000cfe <Config_HSE>

  return;
 8000cac:	bf00      	nop
}
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	58004000 	.word	0x58004000

08000cb4 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8000cb8:	f000 f835 	bl	8000d26 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8000cbc:	f000 f84e 	bl	8000d5c <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8000cc0:	4903      	ldr	r1, [pc, #12]	@ (8000cd0 <MX_APPE_Init+0x1c>)
 8000cc2:	2000      	movs	r0, #0
 8000cc4:	f000 fd36 	bl	8001734 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000cc8:	f000 f856 	bl	8000d78 <appe_Tl_Init>
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */

   return;
 8000ccc:	bf00      	nop
}
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	200001c8 	.word	0x200001c8

08000cd4 <Init_Smps>:

void Init_Smps(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 8000cd8:	bf00      	nop
}
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr

08000ce2 <Init_Exti>:

void Init_Exti(void)
{
 8000ce2:	b580      	push	{r7, lr}
 8000ce4:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 8000ce6:	2050      	movs	r0, #80	@ 0x50
 8000ce8:	f7ff ff44 	bl	8000b74 <LL_EXTI_EnableIT_32_63>

  return;
 8000cec:	bf00      	nop
}
 8000cee:	bd80      	pop	{r7, pc}

08000cf0 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  Reset_BackupDomain();

  Reset_IPCC();
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 8000cf4:	bf00      	nop
}
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr

08000cfe <Config_HSE>:
  return;
}
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8000cfe:	b580      	push	{r7, lr}
 8000d00:	b082      	sub	sp, #8
 8000d02:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8000d04:	2000      	movs	r0, #0
 8000d06:	f008 f8f9 	bl	8008efc <OTP_Read>
 8000d0a:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d005      	beq.n	8000d1e <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	799b      	ldrb	r3, [r3, #6]
 8000d16:	4618      	mov	r0, r3
 8000d18:	f7ff ff40 	bl	8000b9c <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8000d1c:	bf00      	nop
 8000d1e:	bf00      	nop
}
 8000d20:	3708      	adds	r7, #8
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}

08000d26 <System_Init>:

static void System_Init(void)
{
 8000d26:	b580      	push	{r7, lr}
 8000d28:	af00      	add	r7, sp, #0
  Init_Smps();
 8000d2a:	f7ff ffd3 	bl	8000cd4 <Init_Smps>

  Init_Exti();
 8000d2e:	f7ff ffd8 	bl	8000ce2 <Init_Exti>

  Init_Rtc();
 8000d32:	f000 f803 	bl	8000d3c <Init_Rtc>

  return;
 8000d36:	bf00      	nop
}
 8000d38:	bd80      	pop	{r7, pc}
	...

08000d3c <Init_Rtc>:

static void Init_Rtc(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8000d40:	4805      	ldr	r0, [pc, #20]	@ (8000d58 <Init_Rtc+0x1c>)
 8000d42:	f7ff ff86 	bl	8000c52 <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8000d46:	2100      	movs	r1, #0
 8000d48:	4803      	ldr	r0, [pc, #12]	@ (8000d58 <Init_Rtc+0x1c>)
 8000d4a:	f7ff ff92 	bl	8000c72 <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8000d4e:	4802      	ldr	r0, [pc, #8]	@ (8000d58 <Init_Rtc+0x1c>)
 8000d50:	f7ff ff72 	bl	8000c38 <LL_RTC_EnableWriteProtection>

  return;
 8000d54:	bf00      	nop
}
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	40002800 	.word	0x40002800

08000d5c <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8000d60:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8000d64:	f7ff ff38 	bl	8000bd8 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8000d68:	f009 fd20 	bl	800a7ac <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8000d6c:	2004      	movs	r0, #4
 8000d6e:	f7ff feeb 	bl	8000b48 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 8000d72:	bf00      	nop
}
 8000d74:	bd80      	pop	{r7, pc}
	...

08000d78 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b088      	sub	sp, #32
 8000d7c:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8000d7e:	f007 fe71 	bl	8008a64 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 8000d82:	4a11      	ldr	r2, [pc, #68]	@ (8000dc8 <appe_Tl_Init+0x50>)
 8000d84:	2100      	movs	r1, #0
 8000d86:	2008      	movs	r0, #8
 8000d88:	f009 fe4e 	bl	800aa28 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8000d8c:	4b0f      	ldr	r3, [pc, #60]	@ (8000dcc <appe_Tl_Init+0x54>)
 8000d8e:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8000d90:	4b0f      	ldr	r3, [pc, #60]	@ (8000dd0 <appe_Tl_Init+0x58>)
 8000d92:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8000d94:	463b      	mov	r3, r7
 8000d96:	4619      	mov	r1, r3
 8000d98:	480e      	ldr	r0, [pc, #56]	@ (8000dd4 <appe_Tl_Init+0x5c>)
 8000d9a:	f007 fd25 	bl	80087e8 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8000d9e:	4b0e      	ldr	r3, [pc, #56]	@ (8000dd8 <appe_Tl_Init+0x60>)
 8000da0:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8000da2:	4b0e      	ldr	r3, [pc, #56]	@ (8000ddc <appe_Tl_Init+0x64>)
 8000da4:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8000da6:	4b0e      	ldr	r3, [pc, #56]	@ (8000de0 <appe_Tl_Init+0x68>)
 8000da8:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8000daa:	f240 533c 	movw	r3, #1340	@ 0x53c
 8000dae:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8000db0:	f107 0308 	add.w	r3, r7, #8
 8000db4:	4618      	mov	r0, r3
 8000db6:	f007 ff25 	bl	8008c04 <TL_MM_Init>

  TL_Enable();
 8000dba:	f007 fe4d 	bl	8008a58 <TL_Enable>

  return;
 8000dbe:	bf00      	nop
}
 8000dc0:	3720      	adds	r7, #32
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	08008821 	.word	0x08008821
 8000dcc:	20030734 	.word	0x20030734
 8000dd0:	08000de5 	.word	0x08000de5
 8000dd4:	08000dfd 	.word	0x08000dfd
 8000dd8:	2003094c 	.word	0x2003094c
 8000ddc:	20030840 	.word	0x20030840
 8000de0:	200301f8 	.word	0x200301f8

08000de4 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	4603      	mov	r3, r0
 8000dec:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8000dee:	bf00      	nop
}
 8000df0:	370c      	adds	r7, #12
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
	...

08000dfc <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b088      	sub	sp, #32
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	330b      	adds	r3, #11
 8000e0a:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 8000e0c:	69fb      	ldr	r3, [r7, #28]
 8000e0e:	881b      	ldrh	r3, [r3, #0]
 8000e10:	b29b      	uxth	r3, r3
 8000e12:	f5a3 4312 	sub.w	r3, r3, #37376	@ 0x9200
 8000e16:	2b07      	cmp	r3, #7
 8000e18:	d860      	bhi.n	8000edc <APPE_SysUserEvtRx+0xe0>
 8000e1a:	a201      	add	r2, pc, #4	@ (adr r2, 8000e20 <APPE_SysUserEvtRx+0x24>)
 8000e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e20:	08000e41 	.word	0x08000e41
 8000e24:	08000e83 	.word	0x08000e83
 8000e28:	08000e91 	.word	0x08000e91
 8000e2c:	08000edd 	.word	0x08000edd
 8000e30:	08000ead 	.word	0x08000ead
 8000e34:	08000ebd 	.word	0x08000ebd
 8000e38:	08000ec5 	.word	0x08000ec5
 8000e3c:	08000ed5 	.word	0x08000ed5
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 8000e40:	f107 030c 	add.w	r3, r7, #12
 8000e44:	4618      	mov	r0, r3
 8000e46:	f007 fa85 	bl	8008354 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
 8000e4a:	7b3b      	ldrb	r3, [r7, #12]
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	7b7b      	ldrb	r3, [r7, #13]
 8000e50:	461a      	mov	r2, r3
 8000e52:	7bbb      	ldrb	r3, [r7, #14]
 8000e54:	4824      	ldr	r0, [pc, #144]	@ (8000ee8 <APPE_SysUserEvtRx+0xec>)
 8000e56:	f009 ffe7 	bl	800ae28 <iprintf>
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
 8000e5a:	7c3b      	ldrb	r3, [r7, #16]
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	4823      	ldr	r0, [pc, #140]	@ (8000eec <APPE_SysUserEvtRx+0xf0>)
 8000e60:	f009 ffe2 	bl	800ae28 <iprintf>
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);
 8000e64:	7dbb      	ldrb	r3, [r7, #22]
 8000e66:	4619      	mov	r1, r3
 8000e68:	7dfb      	ldrb	r3, [r7, #23]
 8000e6a:	461a      	mov	r2, r3
 8000e6c:	7e3b      	ldrb	r3, [r7, #24]
 8000e6e:	4820      	ldr	r0, [pc, #128]	@ (8000ef0 <APPE_SysUserEvtRx+0xf4>)
 8000e70:	f009 ffda 	bl	800ae28 <iprintf>

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
 8000e74:	481f      	ldr	r0, [pc, #124]	@ (8000ef4 <APPE_SysUserEvtRx+0xf8>)
 8000e76:	f009 ffd7 	bl	800ae28 <iprintf>
    APPE_SysEvtReadyProcessing(pPayload);
 8000e7a:	6878      	ldr	r0, [r7, #4]
 8000e7c:	f000 f870 	bl	8000f60 <APPE_SysEvtReadyProcessing>
    break;
 8000e80:	e02d      	b.n	8000ede <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
 8000e82:	481d      	ldr	r0, [pc, #116]	@ (8000ef8 <APPE_SysUserEvtRx+0xfc>)
 8000e84:	f009 ffd0 	bl	800ae28 <iprintf>
    APPE_SysEvtError(pPayload);
 8000e88:	6878      	ldr	r0, [r7, #4]
 8000e8a:	f000 f843 	bl	8000f14 <APPE_SysEvtError>
    break;
 8000e8e:	e026      	b.n	8000ede <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE -- BLE NVM RAM HAS BEEN UPDATED BY CPU2 \n");
 8000e90:	481a      	ldr	r0, [pc, #104]	@ (8000efc <APPE_SysUserEvtRx+0x100>)
 8000e92:	f00a f831 	bl	800aef8 <puts>
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->StartAddress,
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	3302      	adds	r3, #2
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
 8000e9a:	6819      	ldr	r1, [r3, #0]
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->Size);
 8000e9c:	69fb      	ldr	r3, [r7, #28]
 8000e9e:	3302      	adds	r3, #2
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	461a      	mov	r2, r3
 8000ea4:	4816      	ldr	r0, [pc, #88]	@ (8000f00 <APPE_SysUserEvtRx+0x104>)
 8000ea6:	f009 ffbf 	bl	800ae28 <iprintf>
    break;
 8000eaa:	e018      	b.n	8000ede <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_START_WRITE:
    APP_DBG_MSG("==>> SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
                ((SHCI_C2_NvmStartWrite_Evt_t*)p_sys_event->payload)->NumberOfWords);
 8000eac:	69fb      	ldr	r3, [r7, #28]
 8000eae:	3302      	adds	r3, #2
    APP_DBG_MSG("==>> SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	4813      	ldr	r0, [pc, #76]	@ (8000f04 <APPE_SysUserEvtRx+0x108>)
 8000eb6:	f009 ffb7 	bl	800ae28 <iprintf>
    break;
 8000eba:	e010      	b.n	8000ede <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_END_WRITE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_WRITE\n\r");
 8000ebc:	4812      	ldr	r0, [pc, #72]	@ (8000f08 <APPE_SysUserEvtRx+0x10c>)
 8000ebe:	f009 ffb3 	bl	800ae28 <iprintf>
    break;
 8000ec2:	e00c      	b.n	8000ede <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_START_ERASE:
    APP_DBG_MSG("==>>SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
                ((SHCI_C2_NvmStartErase_Evt_t*)p_sys_event->payload)->NumberOfSectors);
 8000ec4:	69fb      	ldr	r3, [r7, #28]
 8000ec6:	3302      	adds	r3, #2
    APP_DBG_MSG("==>>SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4619      	mov	r1, r3
 8000ecc:	480f      	ldr	r0, [pc, #60]	@ (8000f0c <APPE_SysUserEvtRx+0x110>)
 8000ece:	f009 ffab 	bl	800ae28 <iprintf>
    break;
 8000ed2:	e004      	b.n	8000ede <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
 8000ed4:	480e      	ldr	r0, [pc, #56]	@ (8000f10 <APPE_SysUserEvtRx+0x114>)
 8000ed6:	f009 ffa7 	bl	800ae28 <iprintf>
    break;
 8000eda:	e000      	b.n	8000ede <APPE_SysUserEvtRx+0xe2>

  default:
    break;
 8000edc:	bf00      	nop
  }

  return;
 8000ede:	bf00      	nop
}
 8000ee0:	3720      	adds	r7, #32
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	0800bc10 	.word	0x0800bc10
 8000eec:	0800bc34 	.word	0x0800bc34
 8000ef0:	0800bc50 	.word	0x0800bc50
 8000ef4:	0800bc68 	.word	0x0800bc68
 8000ef8:	0800bc88 	.word	0x0800bc88
 8000efc:	0800bcac 	.word	0x0800bcac
 8000f00:	0800bcfc 	.word	0x0800bcfc
 8000f04:	0800bd24 	.word	0x0800bd24
 8000f08:	0800bd60 	.word	0x0800bd60
 8000f0c:	0800bd84 	.word	0x0800bd84
 8000f10:	0800bdc0 	.word	0x0800bdc0

08000f14 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	330b      	adds	r3, #11
 8000f22:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	3302      	adds	r3, #2
 8000f28:	60bb      	str	r3, [r7, #8]

  APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON %x \n\r",(*p_sys_error_code));
 8000f2a:	68bb      	ldr	r3, [r7, #8]
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	4619      	mov	r1, r3
 8000f30:	4808      	ldr	r0, [pc, #32]	@ (8000f54 <APPE_SysEvtError+0x40>)
 8000f32:	f009 ff79 	bl	800ae28 <iprintf>

  if ((*p_sys_error_code) == ERR_BLE_INIT)
 8000f36:	68bb      	ldr	r3, [r7, #8]
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d103      	bne.n	8000f46 <APPE_SysEvtError+0x32>
  {
    /* Error during BLE stack initialization */
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - ERR_BLE_INIT \n");
 8000f3e:	4806      	ldr	r0, [pc, #24]	@ (8000f58 <APPE_SysEvtError+0x44>)
 8000f40:	f009 ffda 	bl	800aef8 <puts>
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 8000f44:	e003      	b.n	8000f4e <APPE_SysEvtError+0x3a>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
 8000f46:	4805      	ldr	r0, [pc, #20]	@ (8000f5c <APPE_SysEvtError+0x48>)
 8000f48:	f009 ffd6 	bl	800aef8 <puts>
  return;
 8000f4c:	bf00      	nop
}
 8000f4e:	3710      	adds	r7, #16
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	0800bde4 	.word	0x0800bde4
 8000f58:	0800be14 	.word	0x0800be14
 8000f5c:	0800be50 	.word	0x0800be50

08000f60 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b08a      	sub	sp, #40	@ 0x28
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 8000f68:	f107 0308 	add.w	r3, r7, #8
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	605a      	str	r2, [r3, #4]
 8000f72:	609a      	str	r2, [r3, #8]
 8000f74:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 8000f76:	2300      	movs	r3, #0
 8000f78:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t DeviceID=0;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	330b      	adds	r3, #11
 8000f84:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	3302      	adds	r3, #2
 8000f8a:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 8000f8c:	69bb      	ldr	r3, [r7, #24]
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d128      	bne.n	8000fe6 <APPE_SysEvtReadyProcessing+0x86>
  {
    /**
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");
 8000f94:	481d      	ldr	r0, [pc, #116]	@ (800100c <APPE_SysEvtReadyProcessing+0xac>)
 8000f96:	f009 ffaf 	bl	800aef8 <puts>

    /* Traces channel initialization */
    APPD_EnableCPU2();
 8000f9a:	f7ff fda7 	bl	8000aec <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 8000f9e:	230f      	movs	r3, #15
 8000fa0:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 8000fa2:	237f      	movs	r3, #127	@ 0x7f
 8000fa4:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 8000fa6:	f7ff fe39 	bl	8000c1c <LL_DBGMCU_GetRevisionID>
 8000faa:	6278      	str	r0, [r7, #36]	@ 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);
 8000fac:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000fae:	4818      	ldr	r0, [pc, #96]	@ (8001010 <APPE_SysEvtReadyProcessing+0xb0>)
 8000fb0:	f009 ff3a 	bl	800ae28 <iprintf>

    config_param.RevisionID = (uint16_t)RevisionID;
 8000fb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fb6:	b29b      	uxth	r3, r3
 8000fb8:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 8000fba:	f7ff fe21 	bl	8000c00 <LL_DBGMCU_GetDeviceID>
 8000fbe:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
 8000fc0:	6a39      	ldr	r1, [r7, #32]
 8000fc2:	4814      	ldr	r0, [pc, #80]	@ (8001014 <APPE_SysEvtReadyProcessing+0xb4>)
 8000fc4:	f009 ff30 	bl	800ae28 <iprintf>
    config_param.DeviceID = (uint16_t)DeviceID;
 8000fc8:	6a3b      	ldr	r3, [r7, #32]
 8000fca:	b29b      	uxth	r3, r3
 8000fcc:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 8000fce:	f107 0308 	add.w	r3, r7, #8
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f007 f9a8 	bl	8008328 <SHCI_C2_Config>

    APP_BLE_Init();
 8000fd8:	f008 fc64 	bl	80098a4 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8000fdc:	2100      	movs	r1, #0
 8000fde:	2001      	movs	r0, #1
 8000fe0:	f009 fbf6 	bl	800a7d0 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 8000fe4:	e00e      	b.n	8001004 <APPE_SysEvtReadyProcessing+0xa4>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 8000fe6:	69bb      	ldr	r3, [r7, #24]
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	2b01      	cmp	r3, #1
 8000fec:	d106      	bne.n	8000ffc <APPE_SysEvtReadyProcessing+0x9c>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - FUS_FW_RUNNING \n\r");
 8000fee:	480a      	ldr	r0, [pc, #40]	@ (8001018 <APPE_SysEvtReadyProcessing+0xb8>)
 8000ff0:	f009 ff1a 	bl	800ae28 <iprintf>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	701a      	strb	r2, [r3, #0]
  return;
 8000ffa:	e003      	b.n	8001004 <APPE_SysEvtReadyProcessing+0xa4>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
 8000ffc:	4807      	ldr	r0, [pc, #28]	@ (800101c <APPE_SysEvtReadyProcessing+0xbc>)
 8000ffe:	f009 ff13 	bl	800ae28 <iprintf>
  return;
 8001002:	bf00      	nop
}
 8001004:	3728      	adds	r7, #40	@ 0x28
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	0800be88 	.word	0x0800be88
 8001010:	0800bea4 	.word	0x0800bea4
 8001014:	0800bec8 	.word	0x0800bec8
 8001018:	0800bee8 	.word	0x0800bee8
 800101c:	0800bf1c 	.word	0x0800bf1c

08001020 <MX_APPE_Process>:
    __WFI();
  }
}

void MX_APPE_Process(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001024:	f04f 30ff 	mov.w	r0, #4294967295
 8001028:	f009 fc02 	bl	800a830 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 800102c:	bf00      	nop
 800102e:	bd80      	pop	{r7, pc}

08001030 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 8001034:	bf00      	nop
}
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr

0800103e <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 800103e:	b580      	push	{r7, lr}
 8001040:	b082      	sub	sp, #8
 8001042:	af00      	add	r7, sp, #0
 8001044:	6078      	str	r0, [r7, #4]
 8001046:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001048:	f04f 30ff 	mov.w	r0, #4294967295
 800104c:	f009 fbf0 	bl	800a830 <UTIL_SEQ_Run>
  return;
 8001050:	bf00      	nop
}
 8001052:	3708      	adds	r7, #8
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}

08001058 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8001060:	2100      	movs	r1, #0
 8001062:	2008      	movs	r0, #8
 8001064:	f009 fd02 	bl	800aa6c <UTIL_SEQ_SetTask>
  return;
 8001068:	bf00      	nop
}
 800106a:	3708      	adds	r7, #8
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}

08001070 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8001078:	2002      	movs	r0, #2
 800107a:	f009 fd63 	bl	800ab44 <UTIL_SEQ_SetEvt>
  return;
 800107e:	bf00      	nop
}
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}

08001086 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8001086:	b580      	push	{r7, lr}
 8001088:	b082      	sub	sp, #8
 800108a:	af00      	add	r7, sp, #0
 800108c:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 800108e:	2002      	movs	r0, #2
 8001090:	f009 fd78 	bl	800ab84 <UTIL_SEQ_WaitEvt>
  return;
 8001094:	bf00      	nop
}
 8001096:	3708      	adds	r7, #8
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}

0800109c <LL_EXTI_EnableIT_0_31>:
{
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80010a4:	4b06      	ldr	r3, [pc, #24]	@ (80010c0 <LL_EXTI_EnableIT_0_31+0x24>)
 80010a6:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80010aa:	4905      	ldr	r1, [pc, #20]	@ (80010c0 <LL_EXTI_EnableIT_0_31+0x24>)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	4313      	orrs	r3, r2
 80010b0:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 80010b4:	bf00      	nop
 80010b6:	370c      	adds	r7, #12
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr
 80010c0:	58000800 	.word	0x58000800

080010c4 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80010cc:	4b05      	ldr	r3, [pc, #20]	@ (80010e4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	4904      	ldr	r1, [pc, #16]	@ (80010e4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4313      	orrs	r3, r2
 80010d6:	600b      	str	r3, [r1, #0]

}
 80010d8:	bf00      	nop
 80010da:	370c      	adds	r7, #12
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr
 80010e4:	58000800 	.word	0x58000800

080010e8 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80010ee:	4b0d      	ldr	r3, [pc, #52]	@ (8001124 <ReadRtcSsrValue+0x3c>)
 80010f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010f2:	b29b      	uxth	r3, r3
 80010f4:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80010f6:	4b0b      	ldr	r3, [pc, #44]	@ (8001124 <ReadRtcSsrValue+0x3c>)
 80010f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010fa:	b29b      	uxth	r3, r3
 80010fc:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 80010fe:	e005      	b.n	800110c <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001104:	4b07      	ldr	r3, [pc, #28]	@ (8001124 <ReadRtcSsrValue+0x3c>)
 8001106:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001108:	b29b      	uxth	r3, r3
 800110a:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 800110c:	687a      	ldr	r2, [r7, #4]
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	429a      	cmp	r2, r3
 8001112:	d1f5      	bne.n	8001100 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8001114:	683b      	ldr	r3, [r7, #0]
}
 8001116:	4618      	mov	r0, r3
 8001118:	370c      	adds	r7, #12
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	40002800 	.word	0x40002800

08001128 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8001128:	b480      	push	{r7}
 800112a:	b085      	sub	sp, #20
 800112c:	af00      	add	r7, sp, #0
 800112e:	4603      	mov	r3, r0
 8001130:	460a      	mov	r2, r1
 8001132:	71fb      	strb	r3, [r7, #7]
 8001134:	4613      	mov	r3, r2
 8001136:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8001138:	79ba      	ldrb	r2, [r7, #6]
 800113a:	491d      	ldr	r1, [pc, #116]	@ (80011b0 <LinkTimerAfter+0x88>)
 800113c:	4613      	mov	r3, r2
 800113e:	005b      	lsls	r3, r3, #1
 8001140:	4413      	add	r3, r2
 8001142:	00db      	lsls	r3, r3, #3
 8001144:	440b      	add	r3, r1
 8001146:	3315      	adds	r3, #21
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800114c:	7bfb      	ldrb	r3, [r7, #15]
 800114e:	2b06      	cmp	r3, #6
 8001150:	d009      	beq.n	8001166 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8001152:	7bfa      	ldrb	r2, [r7, #15]
 8001154:	4916      	ldr	r1, [pc, #88]	@ (80011b0 <LinkTimerAfter+0x88>)
 8001156:	4613      	mov	r3, r2
 8001158:	005b      	lsls	r3, r3, #1
 800115a:	4413      	add	r3, r2
 800115c:	00db      	lsls	r3, r3, #3
 800115e:	440b      	add	r3, r1
 8001160:	3314      	adds	r3, #20
 8001162:	79fa      	ldrb	r2, [r7, #7]
 8001164:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8001166:	79fa      	ldrb	r2, [r7, #7]
 8001168:	4911      	ldr	r1, [pc, #68]	@ (80011b0 <LinkTimerAfter+0x88>)
 800116a:	4613      	mov	r3, r2
 800116c:	005b      	lsls	r3, r3, #1
 800116e:	4413      	add	r3, r2
 8001170:	00db      	lsls	r3, r3, #3
 8001172:	440b      	add	r3, r1
 8001174:	3315      	adds	r3, #21
 8001176:	7bfa      	ldrb	r2, [r7, #15]
 8001178:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 800117a:	79fa      	ldrb	r2, [r7, #7]
 800117c:	490c      	ldr	r1, [pc, #48]	@ (80011b0 <LinkTimerAfter+0x88>)
 800117e:	4613      	mov	r3, r2
 8001180:	005b      	lsls	r3, r3, #1
 8001182:	4413      	add	r3, r2
 8001184:	00db      	lsls	r3, r3, #3
 8001186:	440b      	add	r3, r1
 8001188:	3314      	adds	r3, #20
 800118a:	79ba      	ldrb	r2, [r7, #6]
 800118c:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 800118e:	79ba      	ldrb	r2, [r7, #6]
 8001190:	4907      	ldr	r1, [pc, #28]	@ (80011b0 <LinkTimerAfter+0x88>)
 8001192:	4613      	mov	r3, r2
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	4413      	add	r3, r2
 8001198:	00db      	lsls	r3, r3, #3
 800119a:	440b      	add	r3, r1
 800119c:	3315      	adds	r3, #21
 800119e:	79fa      	ldrb	r2, [r7, #7]
 80011a0:	701a      	strb	r2, [r3, #0]

  return;
 80011a2:	bf00      	nop
}
 80011a4:	3714      	adds	r7, #20
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	200000e8 	.word	0x200000e8

080011b4 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b085      	sub	sp, #20
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	4603      	mov	r3, r0
 80011bc:	460a      	mov	r2, r1
 80011be:	71fb      	strb	r3, [r7, #7]
 80011c0:	4613      	mov	r3, r2
 80011c2:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 80011c4:	4b29      	ldr	r3, [pc, #164]	@ (800126c <LinkTimerBefore+0xb8>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	79ba      	ldrb	r2, [r7, #6]
 80011cc:	429a      	cmp	r2, r3
 80011ce:	d032      	beq.n	8001236 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 80011d0:	79ba      	ldrb	r2, [r7, #6]
 80011d2:	4927      	ldr	r1, [pc, #156]	@ (8001270 <LinkTimerBefore+0xbc>)
 80011d4:	4613      	mov	r3, r2
 80011d6:	005b      	lsls	r3, r3, #1
 80011d8:	4413      	add	r3, r2
 80011da:	00db      	lsls	r3, r3, #3
 80011dc:	440b      	add	r3, r1
 80011de:	3314      	adds	r3, #20
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 80011e4:	7bfa      	ldrb	r2, [r7, #15]
 80011e6:	4922      	ldr	r1, [pc, #136]	@ (8001270 <LinkTimerBefore+0xbc>)
 80011e8:	4613      	mov	r3, r2
 80011ea:	005b      	lsls	r3, r3, #1
 80011ec:	4413      	add	r3, r2
 80011ee:	00db      	lsls	r3, r3, #3
 80011f0:	440b      	add	r3, r1
 80011f2:	3315      	adds	r3, #21
 80011f4:	79fa      	ldrb	r2, [r7, #7]
 80011f6:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 80011f8:	79fa      	ldrb	r2, [r7, #7]
 80011fa:	491d      	ldr	r1, [pc, #116]	@ (8001270 <LinkTimerBefore+0xbc>)
 80011fc:	4613      	mov	r3, r2
 80011fe:	005b      	lsls	r3, r3, #1
 8001200:	4413      	add	r3, r2
 8001202:	00db      	lsls	r3, r3, #3
 8001204:	440b      	add	r3, r1
 8001206:	3315      	adds	r3, #21
 8001208:	79ba      	ldrb	r2, [r7, #6]
 800120a:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 800120c:	79fa      	ldrb	r2, [r7, #7]
 800120e:	4918      	ldr	r1, [pc, #96]	@ (8001270 <LinkTimerBefore+0xbc>)
 8001210:	4613      	mov	r3, r2
 8001212:	005b      	lsls	r3, r3, #1
 8001214:	4413      	add	r3, r2
 8001216:	00db      	lsls	r3, r3, #3
 8001218:	440b      	add	r3, r1
 800121a:	3314      	adds	r3, #20
 800121c:	7bfa      	ldrb	r2, [r7, #15]
 800121e:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001220:	79ba      	ldrb	r2, [r7, #6]
 8001222:	4913      	ldr	r1, [pc, #76]	@ (8001270 <LinkTimerBefore+0xbc>)
 8001224:	4613      	mov	r3, r2
 8001226:	005b      	lsls	r3, r3, #1
 8001228:	4413      	add	r3, r2
 800122a:	00db      	lsls	r3, r3, #3
 800122c:	440b      	add	r3, r1
 800122e:	3314      	adds	r3, #20
 8001230:	79fa      	ldrb	r2, [r7, #7]
 8001232:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8001234:	e014      	b.n	8001260 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8001236:	79fa      	ldrb	r2, [r7, #7]
 8001238:	490d      	ldr	r1, [pc, #52]	@ (8001270 <LinkTimerBefore+0xbc>)
 800123a:	4613      	mov	r3, r2
 800123c:	005b      	lsls	r3, r3, #1
 800123e:	4413      	add	r3, r2
 8001240:	00db      	lsls	r3, r3, #3
 8001242:	440b      	add	r3, r1
 8001244:	3315      	adds	r3, #21
 8001246:	79ba      	ldrb	r2, [r7, #6]
 8001248:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 800124a:	79ba      	ldrb	r2, [r7, #6]
 800124c:	4908      	ldr	r1, [pc, #32]	@ (8001270 <LinkTimerBefore+0xbc>)
 800124e:	4613      	mov	r3, r2
 8001250:	005b      	lsls	r3, r3, #1
 8001252:	4413      	add	r3, r2
 8001254:	00db      	lsls	r3, r3, #3
 8001256:	440b      	add	r3, r1
 8001258:	3314      	adds	r3, #20
 800125a:	79fa      	ldrb	r2, [r7, #7]
 800125c:	701a      	strb	r2, [r3, #0]
  return;
 800125e:	bf00      	nop
}
 8001260:	3714      	adds	r7, #20
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	20000178 	.word	0x20000178
 8001270:	200000e8 	.word	0x200000e8

08001274 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b084      	sub	sp, #16
 8001278:	af00      	add	r7, sp, #0
 800127a:	4603      	mov	r3, r0
 800127c:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800127e:	4b4e      	ldr	r3, [pc, #312]	@ (80013b8 <linkTimer+0x144>)
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	b2db      	uxtb	r3, r3
 8001284:	2b06      	cmp	r3, #6
 8001286:	d118      	bne.n	80012ba <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001288:	4b4b      	ldr	r3, [pc, #300]	@ (80013b8 <linkTimer+0x144>)
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	b2da      	uxtb	r2, r3
 800128e:	4b4b      	ldr	r3, [pc, #300]	@ (80013bc <linkTimer+0x148>)
 8001290:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8001292:	4a49      	ldr	r2, [pc, #292]	@ (80013b8 <linkTimer+0x144>)
 8001294:	79fb      	ldrb	r3, [r7, #7]
 8001296:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8001298:	79fa      	ldrb	r2, [r7, #7]
 800129a:	4949      	ldr	r1, [pc, #292]	@ (80013c0 <linkTimer+0x14c>)
 800129c:	4613      	mov	r3, r2
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	4413      	add	r3, r2
 80012a2:	00db      	lsls	r3, r3, #3
 80012a4:	440b      	add	r3, r1
 80012a6:	3315      	adds	r3, #21
 80012a8:	2206      	movs	r2, #6
 80012aa:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80012ac:	4b45      	ldr	r3, [pc, #276]	@ (80013c4 <linkTimer+0x150>)
 80012ae:	f04f 32ff 	mov.w	r2, #4294967295
 80012b2:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 80012b4:	2300      	movs	r3, #0
 80012b6:	81fb      	strh	r3, [r7, #14]
 80012b8:	e078      	b.n	80013ac <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 80012ba:	f000 f909 	bl	80014d0 <ReturnTimeElapsed>
 80012be:	4603      	mov	r3, r0
 80012c0:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 80012c2:	79fa      	ldrb	r2, [r7, #7]
 80012c4:	493e      	ldr	r1, [pc, #248]	@ (80013c0 <linkTimer+0x14c>)
 80012c6:	4613      	mov	r3, r2
 80012c8:	005b      	lsls	r3, r3, #1
 80012ca:	4413      	add	r3, r2
 80012cc:	00db      	lsls	r3, r3, #3
 80012ce:	440b      	add	r3, r1
 80012d0:	3308      	adds	r3, #8
 80012d2:	6819      	ldr	r1, [r3, #0]
 80012d4:	89fb      	ldrh	r3, [r7, #14]
 80012d6:	79fa      	ldrb	r2, [r7, #7]
 80012d8:	4419      	add	r1, r3
 80012da:	4839      	ldr	r0, [pc, #228]	@ (80013c0 <linkTimer+0x14c>)
 80012dc:	4613      	mov	r3, r2
 80012de:	005b      	lsls	r3, r3, #1
 80012e0:	4413      	add	r3, r2
 80012e2:	00db      	lsls	r3, r3, #3
 80012e4:	4403      	add	r3, r0
 80012e6:	3308      	adds	r3, #8
 80012e8:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 80012ea:	79fa      	ldrb	r2, [r7, #7]
 80012ec:	4934      	ldr	r1, [pc, #208]	@ (80013c0 <linkTimer+0x14c>)
 80012ee:	4613      	mov	r3, r2
 80012f0:	005b      	lsls	r3, r3, #1
 80012f2:	4413      	add	r3, r2
 80012f4:	00db      	lsls	r3, r3, #3
 80012f6:	440b      	add	r3, r1
 80012f8:	3308      	adds	r3, #8
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 80012fe:	4b2e      	ldr	r3, [pc, #184]	@ (80013b8 <linkTimer+0x144>)
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	b2db      	uxtb	r3, r3
 8001304:	4619      	mov	r1, r3
 8001306:	4a2e      	ldr	r2, [pc, #184]	@ (80013c0 <linkTimer+0x14c>)
 8001308:	460b      	mov	r3, r1
 800130a:	005b      	lsls	r3, r3, #1
 800130c:	440b      	add	r3, r1
 800130e:	00db      	lsls	r3, r3, #3
 8001310:	4413      	add	r3, r2
 8001312:	3308      	adds	r3, #8
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	68ba      	ldr	r2, [r7, #8]
 8001318:	429a      	cmp	r2, r3
 800131a:	d337      	bcc.n	800138c <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 800131c:	4b26      	ldr	r3, [pc, #152]	@ (80013b8 <linkTimer+0x144>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8001322:	7b7a      	ldrb	r2, [r7, #13]
 8001324:	4926      	ldr	r1, [pc, #152]	@ (80013c0 <linkTimer+0x14c>)
 8001326:	4613      	mov	r3, r2
 8001328:	005b      	lsls	r3, r3, #1
 800132a:	4413      	add	r3, r2
 800132c:	00db      	lsls	r3, r3, #3
 800132e:	440b      	add	r3, r1
 8001330:	3315      	adds	r3, #21
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001336:	e013      	b.n	8001360 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8001338:	7b7a      	ldrb	r2, [r7, #13]
 800133a:	4921      	ldr	r1, [pc, #132]	@ (80013c0 <linkTimer+0x14c>)
 800133c:	4613      	mov	r3, r2
 800133e:	005b      	lsls	r3, r3, #1
 8001340:	4413      	add	r3, r2
 8001342:	00db      	lsls	r3, r3, #3
 8001344:	440b      	add	r3, r1
 8001346:	3315      	adds	r3, #21
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 800134c:	7b7a      	ldrb	r2, [r7, #13]
 800134e:	491c      	ldr	r1, [pc, #112]	@ (80013c0 <linkTimer+0x14c>)
 8001350:	4613      	mov	r3, r2
 8001352:	005b      	lsls	r3, r3, #1
 8001354:	4413      	add	r3, r2
 8001356:	00db      	lsls	r3, r3, #3
 8001358:	440b      	add	r3, r1
 800135a:	3315      	adds	r3, #21
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001360:	7b3b      	ldrb	r3, [r7, #12]
 8001362:	2b06      	cmp	r3, #6
 8001364:	d00b      	beq.n	800137e <linkTimer+0x10a>
 8001366:	7b3a      	ldrb	r2, [r7, #12]
 8001368:	4915      	ldr	r1, [pc, #84]	@ (80013c0 <linkTimer+0x14c>)
 800136a:	4613      	mov	r3, r2
 800136c:	005b      	lsls	r3, r3, #1
 800136e:	4413      	add	r3, r2
 8001370:	00db      	lsls	r3, r3, #3
 8001372:	440b      	add	r3, r1
 8001374:	3308      	adds	r3, #8
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	68ba      	ldr	r2, [r7, #8]
 800137a:	429a      	cmp	r2, r3
 800137c:	d2dc      	bcs.n	8001338 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 800137e:	7b7a      	ldrb	r2, [r7, #13]
 8001380:	79fb      	ldrb	r3, [r7, #7]
 8001382:	4611      	mov	r1, r2
 8001384:	4618      	mov	r0, r3
 8001386:	f7ff fecf 	bl	8001128 <LinkTimerAfter>
 800138a:	e00f      	b.n	80013ac <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 800138c:	4b0a      	ldr	r3, [pc, #40]	@ (80013b8 <linkTimer+0x144>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	b2da      	uxtb	r2, r3
 8001392:	79fb      	ldrb	r3, [r7, #7]
 8001394:	4611      	mov	r1, r2
 8001396:	4618      	mov	r0, r3
 8001398:	f7ff ff0c 	bl	80011b4 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 800139c:	4b06      	ldr	r3, [pc, #24]	@ (80013b8 <linkTimer+0x144>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	b2da      	uxtb	r2, r3
 80013a2:	4b06      	ldr	r3, [pc, #24]	@ (80013bc <linkTimer+0x148>)
 80013a4:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 80013a6:	4a04      	ldr	r2, [pc, #16]	@ (80013b8 <linkTimer+0x144>)
 80013a8:	79fb      	ldrb	r3, [r7, #7]
 80013aa:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 80013ac:	89fb      	ldrh	r3, [r7, #14]
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3710      	adds	r7, #16
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	20000178 	.word	0x20000178
 80013bc:	20000179 	.word	0x20000179
 80013c0:	200000e8 	.word	0x200000e8
 80013c4:	2000017c 	.word	0x2000017c

080013c8 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b085      	sub	sp, #20
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	4603      	mov	r3, r0
 80013d0:	460a      	mov	r2, r1
 80013d2:	71fb      	strb	r3, [r7, #7]
 80013d4:	4613      	mov	r3, r2
 80013d6:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 80013d8:	4b39      	ldr	r3, [pc, #228]	@ (80014c0 <UnlinkTimer+0xf8>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	79fa      	ldrb	r2, [r7, #7]
 80013e0:	429a      	cmp	r2, r3
 80013e2:	d111      	bne.n	8001408 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 80013e4:	4b36      	ldr	r3, [pc, #216]	@ (80014c0 <UnlinkTimer+0xf8>)
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	b2da      	uxtb	r2, r3
 80013ea:	4b36      	ldr	r3, [pc, #216]	@ (80014c4 <UnlinkTimer+0xfc>)
 80013ec:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 80013ee:	79fa      	ldrb	r2, [r7, #7]
 80013f0:	4935      	ldr	r1, [pc, #212]	@ (80014c8 <UnlinkTimer+0x100>)
 80013f2:	4613      	mov	r3, r2
 80013f4:	005b      	lsls	r3, r3, #1
 80013f6:	4413      	add	r3, r2
 80013f8:	00db      	lsls	r3, r3, #3
 80013fa:	440b      	add	r3, r1
 80013fc:	3315      	adds	r3, #21
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	b2da      	uxtb	r2, r3
 8001402:	4b2f      	ldr	r3, [pc, #188]	@ (80014c0 <UnlinkTimer+0xf8>)
 8001404:	701a      	strb	r2, [r3, #0]
 8001406:	e03e      	b.n	8001486 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8001408:	79fa      	ldrb	r2, [r7, #7]
 800140a:	492f      	ldr	r1, [pc, #188]	@ (80014c8 <UnlinkTimer+0x100>)
 800140c:	4613      	mov	r3, r2
 800140e:	005b      	lsls	r3, r3, #1
 8001410:	4413      	add	r3, r2
 8001412:	00db      	lsls	r3, r3, #3
 8001414:	440b      	add	r3, r1
 8001416:	3314      	adds	r3, #20
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 800141c:	79fa      	ldrb	r2, [r7, #7]
 800141e:	492a      	ldr	r1, [pc, #168]	@ (80014c8 <UnlinkTimer+0x100>)
 8001420:	4613      	mov	r3, r2
 8001422:	005b      	lsls	r3, r3, #1
 8001424:	4413      	add	r3, r2
 8001426:	00db      	lsls	r3, r3, #3
 8001428:	440b      	add	r3, r1
 800142a:	3315      	adds	r3, #21
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8001430:	79f9      	ldrb	r1, [r7, #7]
 8001432:	7bfa      	ldrb	r2, [r7, #15]
 8001434:	4824      	ldr	r0, [pc, #144]	@ (80014c8 <UnlinkTimer+0x100>)
 8001436:	460b      	mov	r3, r1
 8001438:	005b      	lsls	r3, r3, #1
 800143a:	440b      	add	r3, r1
 800143c:	00db      	lsls	r3, r3, #3
 800143e:	4403      	add	r3, r0
 8001440:	3315      	adds	r3, #21
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	b2d8      	uxtb	r0, r3
 8001446:	4920      	ldr	r1, [pc, #128]	@ (80014c8 <UnlinkTimer+0x100>)
 8001448:	4613      	mov	r3, r2
 800144a:	005b      	lsls	r3, r3, #1
 800144c:	4413      	add	r3, r2
 800144e:	00db      	lsls	r3, r3, #3
 8001450:	440b      	add	r3, r1
 8001452:	3315      	adds	r3, #21
 8001454:	4602      	mov	r2, r0
 8001456:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001458:	7bbb      	ldrb	r3, [r7, #14]
 800145a:	2b06      	cmp	r3, #6
 800145c:	d013      	beq.n	8001486 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 800145e:	79f9      	ldrb	r1, [r7, #7]
 8001460:	7bba      	ldrb	r2, [r7, #14]
 8001462:	4819      	ldr	r0, [pc, #100]	@ (80014c8 <UnlinkTimer+0x100>)
 8001464:	460b      	mov	r3, r1
 8001466:	005b      	lsls	r3, r3, #1
 8001468:	440b      	add	r3, r1
 800146a:	00db      	lsls	r3, r3, #3
 800146c:	4403      	add	r3, r0
 800146e:	3314      	adds	r3, #20
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	b2d8      	uxtb	r0, r3
 8001474:	4914      	ldr	r1, [pc, #80]	@ (80014c8 <UnlinkTimer+0x100>)
 8001476:	4613      	mov	r3, r2
 8001478:	005b      	lsls	r3, r3, #1
 800147a:	4413      	add	r3, r2
 800147c:	00db      	lsls	r3, r3, #3
 800147e:	440b      	add	r3, r1
 8001480:	3314      	adds	r3, #20
 8001482:	4602      	mov	r2, r0
 8001484:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8001486:	79fa      	ldrb	r2, [r7, #7]
 8001488:	490f      	ldr	r1, [pc, #60]	@ (80014c8 <UnlinkTimer+0x100>)
 800148a:	4613      	mov	r3, r2
 800148c:	005b      	lsls	r3, r3, #1
 800148e:	4413      	add	r3, r2
 8001490:	00db      	lsls	r3, r3, #3
 8001492:	440b      	add	r3, r1
 8001494:	330c      	adds	r3, #12
 8001496:	2201      	movs	r2, #1
 8001498:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 800149a:	4b09      	ldr	r3, [pc, #36]	@ (80014c0 <UnlinkTimer+0xf8>)
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	b2db      	uxtb	r3, r3
 80014a0:	2b06      	cmp	r3, #6
 80014a2:	d107      	bne.n	80014b4 <UnlinkTimer+0xec>
 80014a4:	79bb      	ldrb	r3, [r7, #6]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d104      	bne.n	80014b4 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80014aa:	4b08      	ldr	r3, [pc, #32]	@ (80014cc <UnlinkTimer+0x104>)
 80014ac:	f04f 32ff 	mov.w	r2, #4294967295
 80014b0:	601a      	str	r2, [r3, #0]
  }

  return;
 80014b2:	bf00      	nop
 80014b4:	bf00      	nop
}
 80014b6:	3714      	adds	r7, #20
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr
 80014c0:	20000178 	.word	0x20000178
 80014c4:	20000179 	.word	0x20000179
 80014c8:	200000e8 	.word	0x200000e8
 80014cc:	2000017c 	.word	0x2000017c

080014d0 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 80014d6:	4b1a      	ldr	r3, [pc, #104]	@ (8001540 <ReturnTimeElapsed+0x70>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014de:	d026      	beq.n	800152e <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 80014e0:	f7ff fe02 	bl	80010e8 <ReadRtcSsrValue>
 80014e4:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 80014e6:	4b16      	ldr	r3, [pc, #88]	@ (8001540 <ReturnTimeElapsed+0x70>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	687a      	ldr	r2, [r7, #4]
 80014ec:	429a      	cmp	r2, r3
 80014ee:	d805      	bhi.n	80014fc <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 80014f0:	4b13      	ldr	r3, [pc, #76]	@ (8001540 <ReturnTimeElapsed+0x70>)
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	1ad3      	subs	r3, r2, r3
 80014f8:	607b      	str	r3, [r7, #4]
 80014fa:	e00a      	b.n	8001512 <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 80014fc:	4b11      	ldr	r3, [pc, #68]	@ (8001544 <ReturnTimeElapsed+0x74>)
 80014fe:	881b      	ldrh	r3, [r3, #0]
 8001500:	461a      	mov	r2, r3
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8001508:	4b0d      	ldr	r3, [pc, #52]	@ (8001540 <ReturnTimeElapsed+0x70>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	683a      	ldr	r2, [r7, #0]
 800150e:	4413      	add	r3, r2
 8001510:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8001512:	4b0d      	ldr	r3, [pc, #52]	@ (8001548 <ReturnTimeElapsed+0x78>)
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	461a      	mov	r2, r3
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	fb02 f303 	mul.w	r3, r2, r3
 800151e:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8001520:	4b0a      	ldr	r3, [pc, #40]	@ (800154c <ReturnTimeElapsed+0x7c>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	461a      	mov	r2, r3
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	40d3      	lsrs	r3, r2
 800152a:	607b      	str	r3, [r7, #4]
 800152c:	e001      	b.n	8001532 <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 800152e:	2300      	movs	r3, #0
 8001530:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	b29b      	uxth	r3, r3
}
 8001536:	4618      	mov	r0, r3
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	2000017c 	.word	0x2000017c
 8001544:	20000184 	.word	0x20000184
 8001548:	20000182 	.word	0x20000182
 800154c:	20000181 	.word	0x20000181

08001550 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	4603      	mov	r3, r0
 8001558:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 800155a:	88fb      	ldrh	r3, [r7, #6]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d108      	bne.n	8001572 <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001560:	f7ff fdc2 	bl	80010e8 <ReadRtcSsrValue>
 8001564:	4603      	mov	r3, r0
 8001566:	4a21      	ldr	r2, [pc, #132]	@ (80015ec <RestartWakeupCounter+0x9c>)
 8001568:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 800156a:	2003      	movs	r0, #3
 800156c:	f001 fbc9 	bl	8002d02 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8001570:	e039      	b.n	80015e6 <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8001572:	88fb      	ldrh	r3, [r7, #6]
 8001574:	2b01      	cmp	r3, #1
 8001576:	d803      	bhi.n	8001580 <RestartWakeupCounter+0x30>
 8001578:	4b1d      	ldr	r3, [pc, #116]	@ (80015f0 <RestartWakeupCounter+0xa0>)
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	2b01      	cmp	r3, #1
 800157e:	d002      	beq.n	8001586 <RestartWakeupCounter+0x36>
      Value -= 1;
 8001580:	88fb      	ldrh	r3, [r7, #6]
 8001582:	3b01      	subs	r3, #1
 8001584:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001586:	bf00      	nop
 8001588:	4b1a      	ldr	r3, [pc, #104]	@ (80015f4 <RestartWakeupCounter+0xa4>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	68db      	ldr	r3, [r3, #12]
 800158e:	f003 0304 	and.w	r3, r3, #4
 8001592:	2b00      	cmp	r3, #0
 8001594:	d0f8      	beq.n	8001588 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001596:	4b17      	ldr	r3, [pc, #92]	@ (80015f4 <RestartWakeupCounter+0xa4>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	b2da      	uxtb	r2, r3
 800159e:	4b15      	ldr	r3, [pc, #84]	@ (80015f4 <RestartWakeupCounter+0xa4>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 80015a6:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80015a8:	4b13      	ldr	r3, [pc, #76]	@ (80015f8 <RestartWakeupCounter+0xa8>)
 80015aa:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80015ae:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80015b0:	2003      	movs	r0, #3
 80015b2:	f001 fbb4 	bl	8002d1e <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 80015b6:	4b11      	ldr	r3, [pc, #68]	@ (80015fc <RestartWakeupCounter+0xac>)
 80015b8:	695b      	ldr	r3, [r3, #20]
 80015ba:	0c1b      	lsrs	r3, r3, #16
 80015bc:	041b      	lsls	r3, r3, #16
 80015be:	88fa      	ldrh	r2, [r7, #6]
 80015c0:	490e      	ldr	r1, [pc, #56]	@ (80015fc <RestartWakeupCounter+0xac>)
 80015c2:	4313      	orrs	r3, r2
 80015c4:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 80015c6:	f7ff fd8f 	bl	80010e8 <ReadRtcSsrValue>
 80015ca:	4603      	mov	r3, r0
 80015cc:	4a07      	ldr	r2, [pc, #28]	@ (80015ec <RestartWakeupCounter+0x9c>)
 80015ce:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 80015d0:	4b08      	ldr	r3, [pc, #32]	@ (80015f4 <RestartWakeupCounter+0xa4>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	689a      	ldr	r2, [r3, #8]
 80015d6:	4b07      	ldr	r3, [pc, #28]	@ (80015f4 <RestartWakeupCounter+0xa4>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80015de:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 80015e0:	f3af 8000 	nop.w
  return ;
 80015e4:	bf00      	nop
}
 80015e6:	3708      	adds	r7, #8
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	2000017c 	.word	0x2000017c
 80015f0:	20000181 	.word	0x20000181
 80015f4:	200001c8 	.word	0x200001c8
 80015f8:	58000800 	.word	0x58000800
 80015fc:	40002800 	.word	0x40002800

08001600 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b084      	sub	sp, #16
 8001604:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001606:	4b45      	ldr	r3, [pc, #276]	@ (800171c <RescheduleTimerList+0x11c>)
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800160e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001612:	d107      	bne.n	8001624 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8001614:	bf00      	nop
 8001616:	4b42      	ldr	r3, [pc, #264]	@ (8001720 <RescheduleTimerList+0x120>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	f003 0304 	and.w	r3, r3, #4
 8001620:	2b00      	cmp	r3, #0
 8001622:	d1f8      	bne.n	8001616 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8001624:	4b3e      	ldr	r3, [pc, #248]	@ (8001720 <RescheduleTimerList+0x120>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	689a      	ldr	r2, [r3, #8]
 800162a:	4b3d      	ldr	r3, [pc, #244]	@ (8001720 <RescheduleTimerList+0x120>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001632:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8001634:	4b3b      	ldr	r3, [pc, #236]	@ (8001724 <RescheduleTimerList+0x124>)
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 800163a:	7bfa      	ldrb	r2, [r7, #15]
 800163c:	493a      	ldr	r1, [pc, #232]	@ (8001728 <RescheduleTimerList+0x128>)
 800163e:	4613      	mov	r3, r2
 8001640:	005b      	lsls	r3, r3, #1
 8001642:	4413      	add	r3, r2
 8001644:	00db      	lsls	r3, r3, #3
 8001646:	440b      	add	r3, r1
 8001648:	3308      	adds	r3, #8
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 800164e:	f7ff ff3f 	bl	80014d0 <ReturnTimeElapsed>
 8001652:	4603      	mov	r3, r0
 8001654:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8001656:	88fb      	ldrh	r3, [r7, #6]
 8001658:	68ba      	ldr	r2, [r7, #8]
 800165a:	429a      	cmp	r2, r3
 800165c:	d205      	bcs.n	800166a <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 800165e:	2300      	movs	r3, #0
 8001660:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001662:	4b32      	ldr	r3, [pc, #200]	@ (800172c <RescheduleTimerList+0x12c>)
 8001664:	2201      	movs	r2, #1
 8001666:	701a      	strb	r2, [r3, #0]
 8001668:	e04d      	b.n	8001706 <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 800166a:	88fb      	ldrh	r3, [r7, #6]
 800166c:	4a30      	ldr	r2, [pc, #192]	@ (8001730 <RescheduleTimerList+0x130>)
 800166e:	8812      	ldrh	r2, [r2, #0]
 8001670:	b292      	uxth	r2, r2
 8001672:	4413      	add	r3, r2
 8001674:	461a      	mov	r2, r3
 8001676:	68bb      	ldr	r3, [r7, #8]
 8001678:	4293      	cmp	r3, r2
 800167a:	d906      	bls.n	800168a <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 800167c:	4b2c      	ldr	r3, [pc, #176]	@ (8001730 <RescheduleTimerList+0x130>)
 800167e:	881b      	ldrh	r3, [r3, #0]
 8001680:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8001682:	4b2a      	ldr	r3, [pc, #168]	@ (800172c <RescheduleTimerList+0x12c>)
 8001684:	2200      	movs	r2, #0
 8001686:	701a      	strb	r2, [r3, #0]
 8001688:	e03d      	b.n	8001706 <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 800168a:	68bb      	ldr	r3, [r7, #8]
 800168c:	b29a      	uxth	r2, r3
 800168e:	88fb      	ldrh	r3, [r7, #6]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001694:	4b25      	ldr	r3, [pc, #148]	@ (800172c <RescheduleTimerList+0x12c>)
 8001696:	2201      	movs	r2, #1
 8001698:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800169a:	e034      	b.n	8001706 <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 800169c:	7bfa      	ldrb	r2, [r7, #15]
 800169e:	4922      	ldr	r1, [pc, #136]	@ (8001728 <RescheduleTimerList+0x128>)
 80016a0:	4613      	mov	r3, r2
 80016a2:	005b      	lsls	r3, r3, #1
 80016a4:	4413      	add	r3, r2
 80016a6:	00db      	lsls	r3, r3, #3
 80016a8:	440b      	add	r3, r1
 80016aa:	3308      	adds	r3, #8
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	88fb      	ldrh	r3, [r7, #6]
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d20a      	bcs.n	80016ca <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 80016b4:	7bfa      	ldrb	r2, [r7, #15]
 80016b6:	491c      	ldr	r1, [pc, #112]	@ (8001728 <RescheduleTimerList+0x128>)
 80016b8:	4613      	mov	r3, r2
 80016ba:	005b      	lsls	r3, r3, #1
 80016bc:	4413      	add	r3, r2
 80016be:	00db      	lsls	r3, r3, #3
 80016c0:	440b      	add	r3, r1
 80016c2:	3308      	adds	r3, #8
 80016c4:	2200      	movs	r2, #0
 80016c6:	601a      	str	r2, [r3, #0]
 80016c8:	e013      	b.n	80016f2 <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 80016ca:	7bfa      	ldrb	r2, [r7, #15]
 80016cc:	4916      	ldr	r1, [pc, #88]	@ (8001728 <RescheduleTimerList+0x128>)
 80016ce:	4613      	mov	r3, r2
 80016d0:	005b      	lsls	r3, r3, #1
 80016d2:	4413      	add	r3, r2
 80016d4:	00db      	lsls	r3, r3, #3
 80016d6:	440b      	add	r3, r1
 80016d8:	3308      	adds	r3, #8
 80016da:	6819      	ldr	r1, [r3, #0]
 80016dc:	88fb      	ldrh	r3, [r7, #6]
 80016de:	7bfa      	ldrb	r2, [r7, #15]
 80016e0:	1ac9      	subs	r1, r1, r3
 80016e2:	4811      	ldr	r0, [pc, #68]	@ (8001728 <RescheduleTimerList+0x128>)
 80016e4:	4613      	mov	r3, r2
 80016e6:	005b      	lsls	r3, r3, #1
 80016e8:	4413      	add	r3, r2
 80016ea:	00db      	lsls	r3, r3, #3
 80016ec:	4403      	add	r3, r0
 80016ee:	3308      	adds	r3, #8
 80016f0:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 80016f2:	7bfa      	ldrb	r2, [r7, #15]
 80016f4:	490c      	ldr	r1, [pc, #48]	@ (8001728 <RescheduleTimerList+0x128>)
 80016f6:	4613      	mov	r3, r2
 80016f8:	005b      	lsls	r3, r3, #1
 80016fa:	4413      	add	r3, r2
 80016fc:	00db      	lsls	r3, r3, #3
 80016fe:	440b      	add	r3, r1
 8001700:	3315      	adds	r3, #21
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001706:	7bfb      	ldrb	r3, [r7, #15]
 8001708:	2b06      	cmp	r3, #6
 800170a:	d1c7      	bne.n	800169c <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 800170c:	89bb      	ldrh	r3, [r7, #12]
 800170e:	4618      	mov	r0, r3
 8001710:	f7ff ff1e 	bl	8001550 <RestartWakeupCounter>

  return ;
 8001714:	bf00      	nop
}
 8001716:	3710      	adds	r7, #16
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	40002800 	.word	0x40002800
 8001720:	200001c8 	.word	0x200001c8
 8001724:	20000178 	.word	0x20000178
 8001728:	200000e8 	.word	0x200000e8
 800172c:	20000180 	.word	0x20000180
 8001730:	20000186 	.word	0x20000186

08001734 <HW_TS_Init>:

  return;
}

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b088      	sub	sp, #32
 8001738:	af00      	add	r7, sp, #0
 800173a:	4603      	mov	r3, r0
 800173c:	6039      	str	r1, [r7, #0]
 800173e:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001740:	4b5e      	ldr	r3, [pc, #376]	@ (80018bc <HW_TS_Init+0x188>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	22ca      	movs	r2, #202	@ 0xca
 8001746:	625a      	str	r2, [r3, #36]	@ 0x24
 8001748:	4b5c      	ldr	r3, [pc, #368]	@ (80018bc <HW_TS_Init+0x188>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	2253      	movs	r2, #83	@ 0x53
 800174e:	625a      	str	r2, [r3, #36]	@ 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001750:	4b5b      	ldr	r3, [pc, #364]	@ (80018c0 <HW_TS_Init+0x18c>)
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	4a5a      	ldr	r2, [pc, #360]	@ (80018c0 <HW_TS_Init+0x18c>)
 8001756:	f043 0320 	orr.w	r3, r3, #32
 800175a:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 800175c:	4b58      	ldr	r3, [pc, #352]	@ (80018c0 <HW_TS_Init+0x18c>)
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	b2db      	uxtb	r3, r3
 8001762:	f003 0307 	and.w	r3, r3, #7
 8001766:	b2db      	uxtb	r3, r3
 8001768:	f1c3 0304 	rsb	r3, r3, #4
 800176c:	b2da      	uxtb	r2, r3
 800176e:	4b55      	ldr	r3, [pc, #340]	@ (80018c4 <HW_TS_Init+0x190>)
 8001770:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8001772:	4b53      	ldr	r3, [pc, #332]	@ (80018c0 <HW_TS_Init+0x18c>)
 8001774:	691b      	ldr	r3, [r3, #16]
 8001776:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800177a:	f44f 02fe 	mov.w	r2, #8323072	@ 0x7f0000
 800177e:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001780:	693a      	ldr	r2, [r7, #16]
 8001782:	fa92 f2a2 	rbit	r2, r2
 8001786:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001788:	68fa      	ldr	r2, [r7, #12]
 800178a:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800178c:	697a      	ldr	r2, [r7, #20]
 800178e:	2a00      	cmp	r2, #0
 8001790:	d101      	bne.n	8001796 <HW_TS_Init+0x62>
  {
    return 32U;
 8001792:	2220      	movs	r2, #32
 8001794:	e003      	b.n	800179e <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 8001796:	697a      	ldr	r2, [r7, #20]
 8001798:	fab2 f282 	clz	r2, r2
 800179c:	b2d2      	uxtb	r2, r2
 800179e:	40d3      	lsrs	r3, r2
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	3301      	adds	r3, #1
 80017a4:	b2da      	uxtb	r2, r3
 80017a6:	4b48      	ldr	r3, [pc, #288]	@ (80018c8 <HW_TS_Init+0x194>)
 80017a8:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 80017aa:	4b45      	ldr	r3, [pc, #276]	@ (80018c0 <HW_TS_Init+0x18c>)
 80017ac:	691b      	ldr	r3, [r3, #16]
 80017ae:	b29b      	uxth	r3, r3
 80017b0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80017b4:	b29b      	uxth	r3, r3
 80017b6:	3301      	adds	r3, #1
 80017b8:	b29a      	uxth	r2, r3
 80017ba:	4b44      	ldr	r3, [pc, #272]	@ (80018cc <HW_TS_Init+0x198>)
 80017bc:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 80017be:	4b43      	ldr	r3, [pc, #268]	@ (80018cc <HW_TS_Init+0x198>)
 80017c0:	881b      	ldrh	r3, [r3, #0]
 80017c2:	3b01      	subs	r3, #1
 80017c4:	4a40      	ldr	r2, [pc, #256]	@ (80018c8 <HW_TS_Init+0x194>)
 80017c6:	7812      	ldrb	r2, [r2, #0]
 80017c8:	fb02 f303 	mul.w	r3, r2, r3
 80017cc:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80017d0:	4a3c      	ldr	r2, [pc, #240]	@ (80018c4 <HW_TS_Init+0x190>)
 80017d2:	7812      	ldrb	r2, [r2, #0]
 80017d4:	40d3      	lsrs	r3, r2
 80017d6:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 80017d8:	69bb      	ldr	r3, [r7, #24]
 80017da:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80017de:	4293      	cmp	r3, r2
 80017e0:	d904      	bls.n	80017ec <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 80017e2:	4b3b      	ldr	r3, [pc, #236]	@ (80018d0 <HW_TS_Init+0x19c>)
 80017e4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80017e8:	801a      	strh	r2, [r3, #0]
 80017ea:	e003      	b.n	80017f4 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 80017ec:	69bb      	ldr	r3, [r7, #24]
 80017ee:	b29a      	uxth	r2, r3
 80017f0:	4b37      	ldr	r3, [pc, #220]	@ (80018d0 <HW_TS_Init+0x19c>)
 80017f2:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80017f4:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80017f8:	f7ff fc64 	bl	80010c4 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80017fc:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8001800:	f7ff fc4c 	bl	800109c <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8001804:	79fb      	ldrb	r3, [r7, #7]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d13d      	bne.n	8001886 <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800180a:	4b32      	ldr	r3, [pc, #200]	@ (80018d4 <HW_TS_Init+0x1a0>)
 800180c:	2201      	movs	r2, #1
 800180e:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001810:	4b31      	ldr	r3, [pc, #196]	@ (80018d8 <HW_TS_Init+0x1a4>)
 8001812:	f04f 32ff 	mov.w	r2, #4294967295
 8001816:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001818:	2300      	movs	r3, #0
 800181a:	77fb      	strb	r3, [r7, #31]
 800181c:	e00c      	b.n	8001838 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 800181e:	7ffa      	ldrb	r2, [r7, #31]
 8001820:	492e      	ldr	r1, [pc, #184]	@ (80018dc <HW_TS_Init+0x1a8>)
 8001822:	4613      	mov	r3, r2
 8001824:	005b      	lsls	r3, r3, #1
 8001826:	4413      	add	r3, r2
 8001828:	00db      	lsls	r3, r3, #3
 800182a:	440b      	add	r3, r1
 800182c:	330c      	adds	r3, #12
 800182e:	2200      	movs	r2, #0
 8001830:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001832:	7ffb      	ldrb	r3, [r7, #31]
 8001834:	3301      	adds	r3, #1
 8001836:	77fb      	strb	r3, [r7, #31]
 8001838:	7ffb      	ldrb	r3, [r7, #31]
 800183a:	2b05      	cmp	r3, #5
 800183c:	d9ef      	bls.n	800181e <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 800183e:	4b28      	ldr	r3, [pc, #160]	@ (80018e0 <HW_TS_Init+0x1ac>)
 8001840:	2206      	movs	r2, #6
 8001842:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8001844:	4b1d      	ldr	r3, [pc, #116]	@ (80018bc <HW_TS_Init+0x188>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	689a      	ldr	r2, [r3, #8]
 800184a:	4b1c      	ldr	r3, [pc, #112]	@ (80018bc <HW_TS_Init+0x188>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001852:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8001854:	4b19      	ldr	r3, [pc, #100]	@ (80018bc <HW_TS_Init+0x188>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	68db      	ldr	r3, [r3, #12]
 800185a:	b2da      	uxtb	r2, r3
 800185c:	4b17      	ldr	r3, [pc, #92]	@ (80018bc <HW_TS_Init+0x188>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8001864:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8001866:	4b1f      	ldr	r3, [pc, #124]	@ (80018e4 <HW_TS_Init+0x1b0>)
 8001868:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800186c:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 800186e:	2003      	movs	r0, #3
 8001870:	f001 fa55 	bl	8002d1e <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8001874:	4b11      	ldr	r3, [pc, #68]	@ (80018bc <HW_TS_Init+0x188>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	689a      	ldr	r2, [r3, #8]
 800187a:	4b10      	ldr	r3, [pc, #64]	@ (80018bc <HW_TS_Init+0x188>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001882:	609a      	str	r2, [r3, #8]
 8001884:	e009      	b.n	800189a <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 8001886:	4b0d      	ldr	r3, [pc, #52]	@ (80018bc <HW_TS_Init+0x188>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001890:	2b00      	cmp	r3, #0
 8001892:	d002      	beq.n	800189a <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001894:	2003      	movs	r0, #3
 8001896:	f001 fa34 	bl	8002d02 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800189a:	4b08      	ldr	r3, [pc, #32]	@ (80018bc <HW_TS_Init+0x188>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	22ff      	movs	r2, #255	@ 0xff
 80018a0:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 80018a2:	2200      	movs	r2, #0
 80018a4:	2103      	movs	r1, #3
 80018a6:	2003      	movs	r0, #3
 80018a8:	f001 f9e9 	bl	8002c7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80018ac:	2003      	movs	r0, #3
 80018ae:	f001 fa00 	bl	8002cb2 <HAL_NVIC_EnableIRQ>

  return;
 80018b2:	bf00      	nop
}
 80018b4:	3720      	adds	r7, #32
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	200001c8 	.word	0x200001c8
 80018c0:	40002800 	.word	0x40002800
 80018c4:	20000181 	.word	0x20000181
 80018c8:	20000182 	.word	0x20000182
 80018cc:	20000184 	.word	0x20000184
 80018d0:	20000186 	.word	0x20000186
 80018d4:	20000180 	.word	0x20000180
 80018d8:	2000017c 	.word	0x2000017c
 80018dc:	200000e8 	.word	0x200000e8
 80018e0:	20000178 	.word	0x20000178
 80018e4:	58000800 	.word	0x58000800

080018e8 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b08b      	sub	sp, #44	@ 0x2c
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	60f8      	str	r0, [r7, #12]
 80018f0:	60b9      	str	r1, [r7, #8]
 80018f2:	603b      	str	r3, [r7, #0]
 80018f4:	4613      	mov	r3, r2
 80018f6:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 80018f8:	2300      	movs	r3, #0
 80018fa:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80018fe:	f3ef 8310 	mrs	r3, PRIMASK
 8001902:	61fb      	str	r3, [r7, #28]
  return(result);
 8001904:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001906:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8001908:	b672      	cpsid	i
}
 800190a:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 800190c:	e004      	b.n	8001918 <HW_TS_Create+0x30>
  {
    loop++;
 800190e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001912:	3301      	adds	r3, #1
 8001914:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8001918:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800191c:	2b05      	cmp	r3, #5
 800191e:	d80c      	bhi.n	800193a <HW_TS_Create+0x52>
 8001920:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8001924:	492c      	ldr	r1, [pc, #176]	@ (80019d8 <HW_TS_Create+0xf0>)
 8001926:	4613      	mov	r3, r2
 8001928:	005b      	lsls	r3, r3, #1
 800192a:	4413      	add	r3, r2
 800192c:	00db      	lsls	r3, r3, #3
 800192e:	440b      	add	r3, r1
 8001930:	330c      	adds	r3, #12
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	b2db      	uxtb	r3, r3
 8001936:	2b00      	cmp	r3, #0
 8001938:	d1e9      	bne.n	800190e <HW_TS_Create+0x26>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800193a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800193e:	2b06      	cmp	r3, #6
 8001940:	d038      	beq.n	80019b4 <HW_TS_Create+0xcc>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 8001942:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8001946:	4924      	ldr	r1, [pc, #144]	@ (80019d8 <HW_TS_Create+0xf0>)
 8001948:	4613      	mov	r3, r2
 800194a:	005b      	lsls	r3, r3, #1
 800194c:	4413      	add	r3, r2
 800194e:	00db      	lsls	r3, r3, #3
 8001950:	440b      	add	r3, r1
 8001952:	330c      	adds	r3, #12
 8001954:	2201      	movs	r2, #1
 8001956:	701a      	strb	r2, [r3, #0]
 8001958:	6a3b      	ldr	r3, [r7, #32]
 800195a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800195c:	69bb      	ldr	r3, [r7, #24]
 800195e:	f383 8810 	msr	PRIMASK, r3
}
 8001962:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 8001964:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8001968:	491b      	ldr	r1, [pc, #108]	@ (80019d8 <HW_TS_Create+0xf0>)
 800196a:	4613      	mov	r3, r2
 800196c:	005b      	lsls	r3, r3, #1
 800196e:	4413      	add	r3, r2
 8001970:	00db      	lsls	r3, r3, #3
 8001972:	440b      	add	r3, r1
 8001974:	3310      	adds	r3, #16
 8001976:	68fa      	ldr	r2, [r7, #12]
 8001978:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 800197a:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800197e:	4916      	ldr	r1, [pc, #88]	@ (80019d8 <HW_TS_Create+0xf0>)
 8001980:	4613      	mov	r3, r2
 8001982:	005b      	lsls	r3, r3, #1
 8001984:	4413      	add	r3, r2
 8001986:	00db      	lsls	r3, r3, #3
 8001988:	440b      	add	r3, r1
 800198a:	330d      	adds	r3, #13
 800198c:	79fa      	ldrb	r2, [r7, #7]
 800198e:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 8001990:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8001994:	4910      	ldr	r1, [pc, #64]	@ (80019d8 <HW_TS_Create+0xf0>)
 8001996:	4613      	mov	r3, r2
 8001998:	005b      	lsls	r3, r3, #1
 800199a:	4413      	add	r3, r2
 800199c:	00db      	lsls	r3, r3, #3
 800199e:	440b      	add	r3, r1
 80019a0:	683a      	ldr	r2, [r7, #0]
 80019a2:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80019aa:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 80019ac:	2300      	movs	r3, #0
 80019ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80019b2:	e008      	b.n	80019c6 <HW_TS_Create+0xde>
 80019b4:	6a3b      	ldr	r3, [r7, #32]
 80019b6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	f383 8810 	msr	PRIMASK, r3
}
 80019be:	bf00      	nop
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 80019c0:	2301      	movs	r3, #1
 80019c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  return(localreturnstatus);
 80019c6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	372c      	adds	r7, #44	@ 0x2c
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	200000e8 	.word	0x200000e8

080019dc <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b086      	sub	sp, #24
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	4603      	mov	r3, r0
 80019e4:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80019e6:	f3ef 8310 	mrs	r3, PRIMASK
 80019ea:	60fb      	str	r3, [r7, #12]
  return(result);
 80019ec:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80019ee:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80019f0:	b672      	cpsid	i
}
 80019f2:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80019f4:	2003      	movs	r0, #3
 80019f6:	f001 f96a 	bl	8002cce <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80019fa:	4b34      	ldr	r3, [pc, #208]	@ (8001acc <HW_TS_Stop+0xf0>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	22ca      	movs	r2, #202	@ 0xca
 8001a00:	625a      	str	r2, [r3, #36]	@ 0x24
 8001a02:	4b32      	ldr	r3, [pc, #200]	@ (8001acc <HW_TS_Stop+0xf0>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	2253      	movs	r2, #83	@ 0x53
 8001a08:	625a      	str	r2, [r3, #36]	@ 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001a0a:	79fa      	ldrb	r2, [r7, #7]
 8001a0c:	4930      	ldr	r1, [pc, #192]	@ (8001ad0 <HW_TS_Stop+0xf4>)
 8001a0e:	4613      	mov	r3, r2
 8001a10:	005b      	lsls	r3, r3, #1
 8001a12:	4413      	add	r3, r2
 8001a14:	00db      	lsls	r3, r3, #3
 8001a16:	440b      	add	r3, r1
 8001a18:	330c      	adds	r3, #12
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	2b02      	cmp	r3, #2
 8001a20:	d142      	bne.n	8001aa8 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8001a22:	79fb      	ldrb	r3, [r7, #7]
 8001a24:	2100      	movs	r1, #0
 8001a26:	4618      	mov	r0, r3
 8001a28:	f7ff fcce 	bl	80013c8 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8001a2c:	4b29      	ldr	r3, [pc, #164]	@ (8001ad4 <HW_TS_Stop+0xf8>)
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001a32:	7cfb      	ldrb	r3, [r7, #19]
 8001a34:	2b06      	cmp	r3, #6
 8001a36:	d12f      	bne.n	8001a98 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001a38:	4b27      	ldr	r3, [pc, #156]	@ (8001ad8 <HW_TS_Stop+0xfc>)
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a40:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a44:	d107      	bne.n	8001a56 <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8001a46:	bf00      	nop
 8001a48:	4b20      	ldr	r3, [pc, #128]	@ (8001acc <HW_TS_Stop+0xf0>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	68db      	ldr	r3, [r3, #12]
 8001a4e:	f003 0304 	and.w	r3, r3, #4
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d1f8      	bne.n	8001a48 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8001a56:	4b1d      	ldr	r3, [pc, #116]	@ (8001acc <HW_TS_Stop+0xf0>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	689a      	ldr	r2, [r3, #8]
 8001a5c:	4b1b      	ldr	r3, [pc, #108]	@ (8001acc <HW_TS_Stop+0xf0>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001a64:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001a66:	bf00      	nop
 8001a68:	4b18      	ldr	r3, [pc, #96]	@ (8001acc <HW_TS_Stop+0xf0>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	68db      	ldr	r3, [r3, #12]
 8001a6e:	f003 0304 	and.w	r3, r3, #4
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d0f8      	beq.n	8001a68 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001a76:	4b15      	ldr	r3, [pc, #84]	@ (8001acc <HW_TS_Stop+0xf0>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	b2da      	uxtb	r2, r3
 8001a7e:	4b13      	ldr	r3, [pc, #76]	@ (8001acc <HW_TS_Stop+0xf0>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8001a86:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001a88:	4b14      	ldr	r3, [pc, #80]	@ (8001adc <HW_TS_Stop+0x100>)
 8001a8a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001a8e:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001a90:	2003      	movs	r0, #3
 8001a92:	f001 f944 	bl	8002d1e <HAL_NVIC_ClearPendingIRQ>
 8001a96:	e007      	b.n	8001aa8 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001a98:	4b11      	ldr	r3, [pc, #68]	@ (8001ae0 <HW_TS_Stop+0x104>)
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	7cfa      	ldrb	r2, [r7, #19]
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d001      	beq.n	8001aa8 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 8001aa4:	f7ff fdac 	bl	8001600 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001aa8:	4b08      	ldr	r3, [pc, #32]	@ (8001acc <HW_TS_Stop+0xf0>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	22ff      	movs	r2, #255	@ 0xff
 8001aae:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001ab0:	2003      	movs	r0, #3
 8001ab2:	f001 f8fe 	bl	8002cb2 <HAL_NVIC_EnableIRQ>
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	f383 8810 	msr	PRIMASK, r3
}
 8001ac0:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001ac2:	bf00      	nop
}
 8001ac4:	3718      	adds	r7, #24
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	200001c8 	.word	0x200001c8
 8001ad0:	200000e8 	.word	0x200000e8
 8001ad4:	20000178 	.word	0x20000178
 8001ad8:	40002800 	.word	0x40002800
 8001adc:	58000800 	.word	0x58000800
 8001ae0:	20000179 	.word	0x20000179

08001ae4 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b086      	sub	sp, #24
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	4603      	mov	r3, r0
 8001aec:	6039      	str	r1, [r7, #0]
 8001aee:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001af0:	79fa      	ldrb	r2, [r7, #7]
 8001af2:	493b      	ldr	r1, [pc, #236]	@ (8001be0 <HW_TS_Start+0xfc>)
 8001af4:	4613      	mov	r3, r2
 8001af6:	005b      	lsls	r3, r3, #1
 8001af8:	4413      	add	r3, r2
 8001afa:	00db      	lsls	r3, r3, #3
 8001afc:	440b      	add	r3, r1
 8001afe:	330c      	adds	r3, #12
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	2b02      	cmp	r3, #2
 8001b06:	d103      	bne.n	8001b10 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8001b08:	79fb      	ldrb	r3, [r7, #7]
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7ff ff66 	bl	80019dc <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001b10:	f3ef 8310 	mrs	r3, PRIMASK
 8001b14:	60fb      	str	r3, [r7, #12]
  return(result);
 8001b16:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001b18:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001b1a:	b672      	cpsid	i
}
 8001b1c:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001b1e:	2003      	movs	r0, #3
 8001b20:	f001 f8d5 	bl	8002cce <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001b24:	4b2f      	ldr	r3, [pc, #188]	@ (8001be4 <HW_TS_Start+0x100>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	22ca      	movs	r2, #202	@ 0xca
 8001b2a:	625a      	str	r2, [r3, #36]	@ 0x24
 8001b2c:	4b2d      	ldr	r3, [pc, #180]	@ (8001be4 <HW_TS_Start+0x100>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	2253      	movs	r2, #83	@ 0x53
 8001b32:	625a      	str	r2, [r3, #36]	@ 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8001b34:	79fa      	ldrb	r2, [r7, #7]
 8001b36:	492a      	ldr	r1, [pc, #168]	@ (8001be0 <HW_TS_Start+0xfc>)
 8001b38:	4613      	mov	r3, r2
 8001b3a:	005b      	lsls	r3, r3, #1
 8001b3c:	4413      	add	r3, r2
 8001b3e:	00db      	lsls	r3, r3, #3
 8001b40:	440b      	add	r3, r1
 8001b42:	330c      	adds	r3, #12
 8001b44:	2202      	movs	r2, #2
 8001b46:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8001b48:	79fa      	ldrb	r2, [r7, #7]
 8001b4a:	4925      	ldr	r1, [pc, #148]	@ (8001be0 <HW_TS_Start+0xfc>)
 8001b4c:	4613      	mov	r3, r2
 8001b4e:	005b      	lsls	r3, r3, #1
 8001b50:	4413      	add	r3, r2
 8001b52:	00db      	lsls	r3, r3, #3
 8001b54:	440b      	add	r3, r1
 8001b56:	3308      	adds	r3, #8
 8001b58:	683a      	ldr	r2, [r7, #0]
 8001b5a:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8001b5c:	79fa      	ldrb	r2, [r7, #7]
 8001b5e:	4920      	ldr	r1, [pc, #128]	@ (8001be0 <HW_TS_Start+0xfc>)
 8001b60:	4613      	mov	r3, r2
 8001b62:	005b      	lsls	r3, r3, #1
 8001b64:	4413      	add	r3, r2
 8001b66:	00db      	lsls	r3, r3, #3
 8001b68:	440b      	add	r3, r1
 8001b6a:	3304      	adds	r3, #4
 8001b6c:	683a      	ldr	r2, [r7, #0]
 8001b6e:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8001b70:	79fb      	ldrb	r3, [r7, #7]
 8001b72:	4618      	mov	r0, r3
 8001b74:	f7ff fb7e 	bl	8001274 <linkTimer>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8001b7c:	4b1a      	ldr	r3, [pc, #104]	@ (8001be8 <HW_TS_Start+0x104>)
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001b82:	4b1a      	ldr	r3, [pc, #104]	@ (8001bec <HW_TS_Start+0x108>)
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	7c7a      	ldrb	r2, [r7, #17]
 8001b8a:	429a      	cmp	r2, r3
 8001b8c:	d002      	beq.n	8001b94 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 8001b8e:	f7ff fd37 	bl	8001600 <RescheduleTimerList>
 8001b92:	e013      	b.n	8001bbc <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8001b94:	79fa      	ldrb	r2, [r7, #7]
 8001b96:	4912      	ldr	r1, [pc, #72]	@ (8001be0 <HW_TS_Start+0xfc>)
 8001b98:	4613      	mov	r3, r2
 8001b9a:	005b      	lsls	r3, r3, #1
 8001b9c:	4413      	add	r3, r2
 8001b9e:	00db      	lsls	r3, r3, #3
 8001ba0:	440b      	add	r3, r1
 8001ba2:	3308      	adds	r3, #8
 8001ba4:	6819      	ldr	r1, [r3, #0]
 8001ba6:	8a7b      	ldrh	r3, [r7, #18]
 8001ba8:	79fa      	ldrb	r2, [r7, #7]
 8001baa:	1ac9      	subs	r1, r1, r3
 8001bac:	480c      	ldr	r0, [pc, #48]	@ (8001be0 <HW_TS_Start+0xfc>)
 8001bae:	4613      	mov	r3, r2
 8001bb0:	005b      	lsls	r3, r3, #1
 8001bb2:	4413      	add	r3, r2
 8001bb4:	00db      	lsls	r3, r3, #3
 8001bb6:	4403      	add	r3, r0
 8001bb8:	3308      	adds	r3, #8
 8001bba:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001bbc:	4b09      	ldr	r3, [pc, #36]	@ (8001be4 <HW_TS_Start+0x100>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	22ff      	movs	r2, #255	@ 0xff
 8001bc2:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001bc4:	2003      	movs	r0, #3
 8001bc6:	f001 f874 	bl	8002cb2 <HAL_NVIC_EnableIRQ>
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	f383 8810 	msr	PRIMASK, r3
}
 8001bd4:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001bd6:	bf00      	nop
}
 8001bd8:	3718      	adds	r7, #24
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	200000e8 	.word	0x200000e8
 8001be4:	200001c8 	.word	0x200001c8
 8001be8:	20000178 	.word	0x20000178
 8001bec:	20000179 	.word	0x20000179

08001bf0 <HW_UART_Transmit_DMA>:

    return hw_status;
}

hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b086      	sub	sp, #24
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	60b9      	str	r1, [r7, #8]
 8001bf8:	607b      	str	r3, [r7, #4]
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	73fb      	strb	r3, [r7, #15]
 8001bfe:	4613      	mov	r3, r2
 8001c00:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef hal_status = HAL_OK;
 8001c02:	2300      	movs	r3, #0
 8001c04:	75fb      	strb	r3, [r7, #23]
    hw_status_t hw_status = hw_uart_ok;
 8001c06:	2300      	movs	r3, #0
 8001c08:	75bb      	strb	r3, [r7, #22]

    switch (hw_uart_id)
 8001c0a:	7bfb      	ldrb	r3, [r7, #15]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d10e      	bne.n	8001c2e <HW_UART_Transmit_DMA+0x3e>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case hw_uart1:
            HW_huart1TxCb = cb;
 8001c10:	4a17      	ldr	r2, [pc, #92]	@ (8001c70 <HW_UART_Transmit_DMA+0x80>)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6013      	str	r3, [r2, #0]
            huart1.Instance = USART1;
 8001c16:	4b17      	ldr	r3, [pc, #92]	@ (8001c74 <HW_UART_Transmit_DMA+0x84>)
 8001c18:	4a17      	ldr	r2, [pc, #92]	@ (8001c78 <HW_UART_Transmit_DMA+0x88>)
 8001c1a:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8001c1c:	89bb      	ldrh	r3, [r7, #12]
 8001c1e:	461a      	mov	r2, r3
 8001c20:	68b9      	ldr	r1, [r7, #8]
 8001c22:	4814      	ldr	r0, [pc, #80]	@ (8001c74 <HW_UART_Transmit_DMA+0x84>)
 8001c24:	f003 fd2a 	bl	800567c <HAL_UART_Transmit_DMA>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	75fb      	strb	r3, [r7, #23]
            break;
 8001c2c:	e000      	b.n	8001c30 <HW_UART_Transmit_DMA+0x40>
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
            break;
#endif

        default:
            break;
 8001c2e:	bf00      	nop
    }

    switch (hal_status)
 8001c30:	7dfb      	ldrb	r3, [r7, #23]
 8001c32:	2b03      	cmp	r3, #3
 8001c34:	d816      	bhi.n	8001c64 <HW_UART_Transmit_DMA+0x74>
 8001c36:	a201      	add	r2, pc, #4	@ (adr r2, 8001c3c <HW_UART_Transmit_DMA+0x4c>)
 8001c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c3c:	08001c4d 	.word	0x08001c4d
 8001c40:	08001c53 	.word	0x08001c53
 8001c44:	08001c59 	.word	0x08001c59
 8001c48:	08001c5f 	.word	0x08001c5f
    {
        case HAL_OK:
            hw_status = hw_uart_ok;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	75bb      	strb	r3, [r7, #22]
            break;
 8001c50:	e009      	b.n	8001c66 <HW_UART_Transmit_DMA+0x76>

        case HAL_ERROR:
            hw_status = hw_uart_error;
 8001c52:	2301      	movs	r3, #1
 8001c54:	75bb      	strb	r3, [r7, #22]
            break;
 8001c56:	e006      	b.n	8001c66 <HW_UART_Transmit_DMA+0x76>

        case HAL_BUSY:
            hw_status = hw_uart_busy;
 8001c58:	2302      	movs	r3, #2
 8001c5a:	75bb      	strb	r3, [r7, #22]
            break;
 8001c5c:	e003      	b.n	8001c66 <HW_UART_Transmit_DMA+0x76>

        case HAL_TIMEOUT:
            hw_status = hw_uart_to;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	75bb      	strb	r3, [r7, #22]
            break;
 8001c62:	e000      	b.n	8001c66 <HW_UART_Transmit_DMA+0x76>

        default:
            break;
 8001c64:	bf00      	nop
    }

    return hw_status;
 8001c66:	7dbb      	ldrb	r3, [r7, #22]
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3718      	adds	r7, #24
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	20000188 	.word	0x20000188
 8001c74:	200001ec 	.word	0x200001ec
 8001c78:	40013800 	.word	0x40013800

08001c7c <HAL_UART_TxCpltCallback>:

    return;
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	461a      	mov	r2, r3
 8001c8a:	4b09      	ldr	r3, [pc, #36]	@ (8001cb0 <HAL_UART_TxCpltCallback+0x34>)
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d107      	bne.n	8001ca0 <HAL_UART_TxCpltCallback+0x24>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1TxCb)
 8001c90:	4b08      	ldr	r3, [pc, #32]	@ (8001cb4 <HAL_UART_TxCpltCallback+0x38>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d005      	beq.n	8001ca4 <HAL_UART_TxCpltCallback+0x28>
            {
                HW_huart1TxCb();
 8001c98:	4b06      	ldr	r3, [pc, #24]	@ (8001cb4 <HAL_UART_TxCpltCallback+0x38>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4798      	blx	r3
            }
            break;
 8001c9e:	e001      	b.n	8001ca4 <HAL_UART_TxCpltCallback+0x28>
            }
            break;
#endif

        default:
            break;
 8001ca0:	bf00      	nop
 8001ca2:	e000      	b.n	8001ca6 <HAL_UART_TxCpltCallback+0x2a>
            break;
 8001ca4:	bf00      	nop
    }

    return;
 8001ca6:	bf00      	nop
}
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	40013800 	.word	0x40013800
 8001cb4:	20000188 	.word	0x20000188

08001cb8 <LL_RCC_LSE_SetDriveCapability>:
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001cc0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001cc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001cc8:	f023 0218 	bic.w	r2, r3, #24
 8001ccc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8001cd8:	bf00      	nop
 8001cda:	370c      	adds	r7, #12
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr

08001ce4 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b085      	sub	sp, #20
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001cec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001cf0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001cf2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	648b      	str	r3, [r1, #72]	@ 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001cfc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d00:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4013      	ands	r3, r2
 8001d06:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001d08:	68fb      	ldr	r3, [r7, #12]
}
 8001d0a:	bf00      	nop
 8001d0c:	3714      	adds	r7, #20
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr

08001d16 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001d16:	b480      	push	{r7}
 8001d18:	b085      	sub	sp, #20
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001d1e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d22:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001d24:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001d2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d32:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	4013      	ands	r3, r2
 8001d38:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
}
 8001d3c:	bf00      	nop
 8001d3e:	3714      	adds	r7, #20
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr

08001d48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d4c:	f000 fdd6 	bl	80028fc <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8001d50:	f7fe ffa2 	bl	8000c98 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d54:	f000 f814 	bl	8001d80 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001d58:	f000 f86e 	bl	8001e38 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 8001d5c:	f000 f88c 	bl	8001e78 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d60:	f000 f930 	bl	8001fc4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001d64:	f000 f91c 	bl	8001fa0 <MX_DMA_Init>
  MX_RTC_Init();
 8001d68:	f000 f8a2 	bl	8001eb0 <MX_RTC_Init>
  MX_USART1_UART_Init();
 8001d6c:	f000 f8ca 	bl	8001f04 <MX_USART1_UART_Init>
  MX_RF_Init();
 8001d70:	f000 f896 	bl	8001ea0 <MX_RF_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8001d74:	f7fe ff9e 	bl	8000cb4 <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 8001d78:	f7ff f952 	bl	8001020 <MX_APPE_Process>
 8001d7c:	e7fc      	b.n	8001d78 <main+0x30>
	...

08001d80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b09a      	sub	sp, #104	@ 0x68
 8001d84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d86:	f107 0320 	add.w	r3, r7, #32
 8001d8a:	2248      	movs	r2, #72	@ 0x48
 8001d8c:	2100      	movs	r1, #0
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f009 f992 	bl	800b0b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d94:	1d3b      	adds	r3, r7, #4
 8001d96:	2200      	movs	r2, #0
 8001d98:	601a      	str	r2, [r3, #0]
 8001d9a:	605a      	str	r2, [r3, #4]
 8001d9c:	609a      	str	r2, [r3, #8]
 8001d9e:	60da      	str	r2, [r3, #12]
 8001da0:	611a      	str	r2, [r3, #16]
 8001da2:	615a      	str	r2, [r3, #20]
 8001da4:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001da6:	f001 fd2d 	bl	8003804 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 8001daa:	2010      	movs	r0, #16
 8001dac:	f7ff ff84 	bl	8001cb8 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001db0:	4b20      	ldr	r3, [pc, #128]	@ (8001e34 <SystemClock_Config+0xb4>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001db8:	4a1e      	ldr	r2, [pc, #120]	@ (8001e34 <SystemClock_Config+0xb4>)
 8001dba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001dbe:	6013      	str	r3, [r2, #0]
 8001dc0:	4b1c      	ldr	r3, [pc, #112]	@ (8001e34 <SystemClock_Config+0xb4>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001dc8:	603b      	str	r3, [r7, #0]
 8001dca:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8001dcc:	2307      	movs	r3, #7
 8001dce:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001dd0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001dd4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001dda:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001dde:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001de0:	2340      	movs	r3, #64	@ 0x40
 8001de2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001de4:	2300      	movs	r3, #0
 8001de6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001de8:	f107 0320 	add.w	r3, r7, #32
 8001dec:	4618      	mov	r0, r3
 8001dee:	f002 f89d 	bl	8003f2c <HAL_RCC_OscConfig>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d001      	beq.n	8001dfc <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8001df8:	f000 fadc 	bl	80023b4 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001dfc:	236f      	movs	r3, #111	@ 0x6f
 8001dfe:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001e00:	2302      	movs	r3, #2
 8001e02:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e04:	2300      	movs	r3, #0
 8001e06:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8001e10:	2300      	movs	r3, #0
 8001e12:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001e14:	2300      	movs	r3, #0
 8001e16:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001e18:	1d3b      	adds	r3, r7, #4
 8001e1a:	2101      	movs	r1, #1
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f002 fbf9 	bl	8004614 <HAL_RCC_ClockConfig>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d001      	beq.n	8001e2c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001e28:	f000 fac4 	bl	80023b4 <Error_Handler>
  }
}
 8001e2c:	bf00      	nop
 8001e2e:	3768      	adds	r7, #104	@ 0x68
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	58000400 	.word	0x58000400

08001e38 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b094      	sub	sp, #80	@ 0x50
 8001e3c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e3e:	463b      	mov	r3, r7
 8001e40:	2250      	movs	r2, #80	@ 0x50
 8001e42:	2100      	movs	r1, #0
 8001e44:	4618      	mov	r0, r3
 8001e46:	f009 f937 	bl	800b0b8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 8001e4a:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001e4e:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8001e50:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001e54:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 8001e56:	2302      	movs	r3, #2
 8001e58:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e5e:	463b      	mov	r3, r7
 8001e60:	4618      	mov	r0, r3
 8001e62:	f003 f814 	bl	8004e8e <HAL_RCCEx_PeriphCLKConfig>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d001      	beq.n	8001e70 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8001e6c:	f000 faa2 	bl	80023b4 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8001e70:	bf00      	nop
 8001e72:	3750      	adds	r7, #80	@ 0x50
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}

08001e78 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8001e7c:	4b06      	ldr	r3, [pc, #24]	@ (8001e98 <MX_IPCC_Init+0x20>)
 8001e7e:	4a07      	ldr	r2, [pc, #28]	@ (8001e9c <MX_IPCC_Init+0x24>)
 8001e80:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8001e82:	4805      	ldr	r0, [pc, #20]	@ (8001e98 <MX_IPCC_Init+0x20>)
 8001e84:	f001 fc38 	bl	80036f8 <HAL_IPCC_Init>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d001      	beq.n	8001e92 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8001e8e:	f000 fa91 	bl	80023b4 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8001e92:	bf00      	nop
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	2000018c 	.word	0x2000018c
 8001e9c:	58000c00 	.word	0x58000c00

08001ea0 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8001ea4:	bf00      	nop
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
	...

08001eb0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001eb4:	4b11      	ldr	r3, [pc, #68]	@ (8001efc <MX_RTC_Init+0x4c>)
 8001eb6:	4a12      	ldr	r2, [pc, #72]	@ (8001f00 <MX_RTC_Init+0x50>)
 8001eb8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001eba:	4b10      	ldr	r3, [pc, #64]	@ (8001efc <MX_RTC_Init+0x4c>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8001ec0:	4b0e      	ldr	r3, [pc, #56]	@ (8001efc <MX_RTC_Init+0x4c>)
 8001ec2:	220f      	movs	r2, #15
 8001ec4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8001ec6:	4b0d      	ldr	r3, [pc, #52]	@ (8001efc <MX_RTC_Init+0x4c>)
 8001ec8:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8001ecc:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001ece:	4b0b      	ldr	r3, [pc, #44]	@ (8001efc <MX_RTC_Init+0x4c>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001ed4:	4b09      	ldr	r3, [pc, #36]	@ (8001efc <MX_RTC_Init+0x4c>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001eda:	4b08      	ldr	r3, [pc, #32]	@ (8001efc <MX_RTC_Init+0x4c>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001ee0:	4b06      	ldr	r3, [pc, #24]	@ (8001efc <MX_RTC_Init+0x4c>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001ee6:	4805      	ldr	r0, [pc, #20]	@ (8001efc <MX_RTC_Init+0x4c>)
 8001ee8:	f003 fa58 	bl	800539c <HAL_RTC_Init>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d001      	beq.n	8001ef6 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8001ef2:	f000 fa5f 	bl	80023b4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001ef6:	bf00      	nop
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	200001c8 	.word	0x200001c8
 8001f00:	40002800 	.word	0x40002800

08001f04 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001f08:	4b23      	ldr	r3, [pc, #140]	@ (8001f98 <MX_USART1_UART_Init+0x94>)
 8001f0a:	4a24      	ldr	r2, [pc, #144]	@ (8001f9c <MX_USART1_UART_Init+0x98>)
 8001f0c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001f0e:	4b22      	ldr	r3, [pc, #136]	@ (8001f98 <MX_USART1_UART_Init+0x94>)
 8001f10:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001f14:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f16:	4b20      	ldr	r3, [pc, #128]	@ (8001f98 <MX_USART1_UART_Init+0x94>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001f1c:	4b1e      	ldr	r3, [pc, #120]	@ (8001f98 <MX_USART1_UART_Init+0x94>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001f22:	4b1d      	ldr	r3, [pc, #116]	@ (8001f98 <MX_USART1_UART_Init+0x94>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001f28:	4b1b      	ldr	r3, [pc, #108]	@ (8001f98 <MX_USART1_UART_Init+0x94>)
 8001f2a:	220c      	movs	r2, #12
 8001f2c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f2e:	4b1a      	ldr	r3, [pc, #104]	@ (8001f98 <MX_USART1_UART_Init+0x94>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8001f34:	4b18      	ldr	r3, [pc, #96]	@ (8001f98 <MX_USART1_UART_Init+0x94>)
 8001f36:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001f3a:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f3c:	4b16      	ldr	r3, [pc, #88]	@ (8001f98 <MX_USART1_UART_Init+0x94>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001f42:	4b15      	ldr	r3, [pc, #84]	@ (8001f98 <MX_USART1_UART_Init+0x94>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f48:	4b13      	ldr	r3, [pc, #76]	@ (8001f98 <MX_USART1_UART_Init+0x94>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001f4e:	4812      	ldr	r0, [pc, #72]	@ (8001f98 <MX_USART1_UART_Init+0x94>)
 8001f50:	f003 fb44 	bl	80055dc <HAL_UART_Init>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d001      	beq.n	8001f5e <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8001f5a:	f000 fa2b 	bl	80023b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f5e:	2100      	movs	r1, #0
 8001f60:	480d      	ldr	r0, [pc, #52]	@ (8001f98 <MX_USART1_UART_Init+0x94>)
 8001f62:	f004 fd28 	bl	80069b6 <HAL_UARTEx_SetTxFifoThreshold>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d001      	beq.n	8001f70 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8001f6c:	f000 fa22 	bl	80023b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f70:	2100      	movs	r1, #0
 8001f72:	4809      	ldr	r0, [pc, #36]	@ (8001f98 <MX_USART1_UART_Init+0x94>)
 8001f74:	f004 fd5d 	bl	8006a32 <HAL_UARTEx_SetRxFifoThreshold>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d001      	beq.n	8001f82 <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8001f7e:	f000 fa19 	bl	80023b4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001f82:	4805      	ldr	r0, [pc, #20]	@ (8001f98 <MX_USART1_UART_Init+0x94>)
 8001f84:	f004 fcde 	bl	8006944 <HAL_UARTEx_DisableFifoMode>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d001      	beq.n	8001f92 <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8001f8e:	f000 fa11 	bl	80023b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001f92:	bf00      	nop
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	200001ec 	.word	0x200001ec
 8001f9c:	40013800 	.word	0x40013800

08001fa0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001fa4:	2004      	movs	r0, #4
 8001fa6:	f7ff fe9d 	bl	8001ce4 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001faa:	2002      	movs	r0, #2
 8001fac:	f7ff fe9a 	bl	8001ce4 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 15, 0);
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	210f      	movs	r1, #15
 8001fb4:	203a      	movs	r0, #58	@ 0x3a
 8001fb6:	f000 fe62 	bl	8002c7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 8001fba:	203a      	movs	r0, #58	@ 0x3a
 8001fbc:	f000 fe79 	bl	8002cb2 <HAL_NVIC_EnableIRQ>

}
 8001fc0:	bf00      	nop
 8001fc2:	bd80      	pop	{r7, pc}

08001fc4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b086      	sub	sp, #24
 8001fc8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fca:	1d3b      	adds	r3, r7, #4
 8001fcc:	2200      	movs	r2, #0
 8001fce:	601a      	str	r2, [r3, #0]
 8001fd0:	605a      	str	r2, [r3, #4]
 8001fd2:	609a      	str	r2, [r3, #8]
 8001fd4:	60da      	str	r2, [r3, #12]
 8001fd6:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fd8:	2001      	movs	r0, #1
 8001fda:	f7ff fe9c 	bl	8001d16 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fde:	2004      	movs	r0, #4
 8001fe0:	f7ff fe99 	bl	8001d16 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fe4:	2002      	movs	r0, #2
 8001fe6:	f7ff fe96 	bl	8001d16 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fea:	2008      	movs	r0, #8
 8001fec:	f7ff fe93 	bl	8001d16 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ff0:	2010      	movs	r0, #16
 8001ff2:	f7ff fe90 	bl	8001d16 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ff6:	2080      	movs	r0, #128	@ 0x80
 8001ff8:	f7ff fe8d 	bl	8001d16 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, CS_DISP_Pin|GPIO_SELECT2_Pin, GPIO_PIN_RESET);
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	2103      	movs	r1, #3
 8002000:	48bd      	ldr	r0, [pc, #756]	@ (80022f8 <MX_GPIO_Init+0x334>)
 8002002:	f001 fb3d 	bl	8003680 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, D_C_DISP_Pin|RST_DISP_Pin, GPIO_PIN_RESET);
 8002006:	2200      	movs	r2, #0
 8002008:	f44f 7140 	mov.w	r1, #768	@ 0x300
 800200c:	48bb      	ldr	r0, [pc, #748]	@ (80022fc <MX_GPIO_Init+0x338>)
 800200e:	f001 fb37 	bl	8003680 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_RESET);
 8002012:	2200      	movs	r2, #0
 8002014:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002018:	48b9      	ldr	r0, [pc, #740]	@ (8002300 <MX_GPIO_Init+0x33c>)
 800201a:	f001 fb31 	bl	8003680 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_SELECT1_GPIO_Port, GPIO_SELECT1_Pin, GPIO_PIN_RESET);
 800201e:	2200      	movs	r2, #0
 8002020:	2104      	movs	r1, #4
 8002022:	48b8      	ldr	r0, [pc, #736]	@ (8002304 <MX_GPIO_Init+0x340>)
 8002024:	f001 fb2c 	bl	8003680 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA2 PA0 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_5;
 8002028:	2325      	movs	r3, #37	@ 0x25
 800202a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800202c:	2303      	movs	r3, #3
 800202e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002030:	2300      	movs	r3, #0
 8002032:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002034:	1d3b      	adds	r3, r7, #4
 8002036:	4619      	mov	r1, r3
 8002038:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800203c:	f001 f9b0 	bl	80033a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC3 PC1 PC5 PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_4;
 8002040:	233a      	movs	r3, #58	@ 0x3a
 8002042:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002044:	2303      	movs	r3, #3
 8002046:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002048:	2300      	movs	r3, #0
 800204a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800204c:	1d3b      	adds	r3, r7, #4
 800204e:	4619      	mov	r1, r3
 8002050:	48aa      	ldr	r0, [pc, #680]	@ (80022fc <MX_GPIO_Init+0x338>)
 8002052:	f001 f9a5 	bl	80033a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC2 PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11;
 8002056:	f640 4304 	movw	r3, #3076	@ 0xc04
 800205a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800205c:	2300      	movs	r3, #0
 800205e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002060:	2300      	movs	r3, #0
 8002062:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002064:	1d3b      	adds	r3, r7, #4
 8002066:	4619      	mov	r1, r3
 8002068:	48a4      	ldr	r0, [pc, #656]	@ (80022fc <MX_GPIO_Init+0x338>)
 800206a:	f001 f999 	bl	80033a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_BK_IO0_Pin */
  GPIO_InitStruct.Pin = QSPI_BK_IO0_Pin;
 800206e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002072:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002074:	2302      	movs	r3, #2
 8002076:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002078:	2300      	movs	r3, #0
 800207a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800207c:	2300      	movs	r3, #0
 800207e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002080:	230a      	movs	r3, #10
 8002082:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(QSPI_BK_IO0_GPIO_Port, &GPIO_InitStruct);
 8002084:	1d3b      	adds	r3, r7, #4
 8002086:	4619      	mov	r1, r3
 8002088:	489f      	ldr	r0, [pc, #636]	@ (8002308 <MX_GPIO_Init+0x344>)
 800208a:	f001 f989 	bl	80033a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LPUART1_RX_MCU_Pin */
  GPIO_InitStruct.Pin = LPUART1_RX_MCU_Pin;
 800208e:	2301      	movs	r3, #1
 8002090:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002092:	2302      	movs	r3, #2
 8002094:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002096:	2300      	movs	r3, #0
 8002098:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800209a:	2300      	movs	r3, #0
 800209c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800209e:	2308      	movs	r3, #8
 80020a0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LPUART1_RX_MCU_GPIO_Port, &GPIO_InitStruct);
 80020a2:	1d3b      	adds	r3, r7, #4
 80020a4:	4619      	mov	r1, r3
 80020a6:	4895      	ldr	r0, [pc, #596]	@ (80022fc <MX_GPIO_Init+0x338>)
 80020a8:	f001 f97a 	bl	80033a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80020ac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80020b0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020b2:	2312      	movs	r3, #18
 80020b4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b6:	2300      	movs	r3, #0
 80020b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ba:	2300      	movs	r3, #0
 80020bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80020be:	2304      	movs	r3, #4
 80020c0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020c2:	1d3b      	adds	r3, r7, #4
 80020c4:	4619      	mov	r1, r3
 80020c6:	4890      	ldr	r0, [pc, #576]	@ (8002308 <MX_GPIO_Init+0x344>)
 80020c8:	f001 f96a 	bl	80033a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPUART1_TX_MCU_Pin PB12 */
  GPIO_InitStruct.Pin = LPUART1_TX_MCU_Pin|GPIO_PIN_12;
 80020cc:	f44f 5381 	mov.w	r3, #4128	@ 0x1020
 80020d0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020d2:	2302      	movs	r3, #2
 80020d4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d6:	2300      	movs	r3, #0
 80020d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020da:	2300      	movs	r3, #0
 80020dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80020de:	2308      	movs	r3, #8
 80020e0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020e2:	1d3b      	adds	r3, r7, #4
 80020e4:	4619      	mov	r1, r3
 80020e6:	4888      	ldr	r0, [pc, #544]	@ (8002308 <MX_GPIO_Init+0x344>)
 80020e8:	f001 f95a 	bl	80033a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80020ec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80020f0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020f2:	2302      	movs	r3, #2
 80020f4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f6:	2300      	movs	r3, #0
 80020f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020fa:	2300      	movs	r3, #0
 80020fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80020fe:	2301      	movs	r3, #1
 8002100:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002102:	1d3b      	adds	r3, r7, #4
 8002104:	4619      	mov	r1, r3
 8002106:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800210a:	f001 f949 	bl	80033a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800210e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002112:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002114:	2312      	movs	r3, #18
 8002116:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002118:	2300      	movs	r3, #0
 800211a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800211c:	2300      	movs	r3, #0
 800211e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002120:	2304      	movs	r3, #4
 8002122:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002124:	1d3b      	adds	r3, r7, #4
 8002126:	4619      	mov	r1, r3
 8002128:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800212c:	f001 f938 	bl	80033a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_P_Pin USB_N_Pin */
  GPIO_InitStruct.Pin = USB_P_Pin|USB_N_Pin;
 8002130:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002134:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002136:	2302      	movs	r3, #2
 8002138:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213a:	2300      	movs	r3, #0
 800213c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800213e:	2300      	movs	r3, #0
 8002140:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8002142:	230a      	movs	r3, #10
 8002144:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002146:	1d3b      	adds	r3, r7, #4
 8002148:	4619      	mov	r1, r3
 800214a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800214e:	f001 f927 	bl	80033a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002152:	2303      	movs	r3, #3
 8002154:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002156:	2302      	movs	r3, #2
 8002158:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800215a:	2300      	movs	r3, #0
 800215c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800215e:	2300      	movs	r3, #0
 8002160:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002162:	2305      	movs	r3, #5
 8002164:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002166:	1d3b      	adds	r3, r7, #4
 8002168:	4619      	mov	r1, r3
 800216a:	4865      	ldr	r0, [pc, #404]	@ (8002300 <MX_GPIO_Init+0x33c>)
 800216c:	f001 f918 	bl	80033a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : TSC_G4_IO1_Pin TSC_G4_IO2_Pin */
  GPIO_InitStruct.Pin = TSC_G4_IO1_Pin|TSC_G4_IO2_Pin;
 8002170:	23c0      	movs	r3, #192	@ 0xc0
 8002172:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002174:	2302      	movs	r3, #2
 8002176:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002178:	2300      	movs	r3, #0
 800217a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800217c:	2300      	movs	r3, #0
 800217e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF9_TSC;
 8002180:	2309      	movs	r3, #9
 8002182:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002184:	1d3b      	adds	r3, r7, #4
 8002186:	4619      	mov	r1, r3
 8002188:	485c      	ldr	r0, [pc, #368]	@ (80022fc <MX_GPIO_Init+0x338>)
 800218a:	f001 f909 	bl	80033a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800218e:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002192:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002194:	2302      	movs	r3, #2
 8002196:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002198:	2300      	movs	r3, #0
 800219a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800219c:	2300      	movs	r3, #0
 800219e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80021a0:	2305      	movs	r3, #5
 80021a2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021a4:	1d3b      	adds	r3, r7, #4
 80021a6:	4619      	mov	r1, r3
 80021a8:	4857      	ldr	r0, [pc, #348]	@ (8002308 <MX_GPIO_Init+0x344>)
 80021aa:	f001 f8f9 	bl	80033a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE4 DRDY_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|DRDY_Pin;
 80021ae:	2312      	movs	r3, #18
 80021b0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021b2:	2300      	movs	r3, #0
 80021b4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b6:	2300      	movs	r3, #0
 80021b8:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80021ba:	1d3b      	adds	r3, r7, #4
 80021bc:	4619      	mov	r1, r3
 80021be:	4851      	ldr	r0, [pc, #324]	@ (8002304 <MX_GPIO_Init+0x340>)
 80021c0:	f001 f8ee 	bl	80033a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80021c4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80021c8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ca:	2302      	movs	r3, #2
 80021cc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ce:	2300      	movs	r3, #0
 80021d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021d2:	2300      	movs	r3, #0
 80021d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80021d6:	2301      	movs	r3, #1
 80021d8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021da:	1d3b      	adds	r3, r7, #4
 80021dc:	4619      	mov	r1, r3
 80021de:	484a      	ldr	r0, [pc, #296]	@ (8002308 <MX_GPIO_Init+0x344>)
 80021e0:	f001 f8de 	bl	80033a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80021e4:	2304      	movs	r3, #4
 80021e6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021e8:	2300      	movs	r3, #0
 80021ea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ec:	2300      	movs	r3, #0
 80021ee:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021f0:	1d3b      	adds	r3, r7, #4
 80021f2:	4619      	mov	r1, r3
 80021f4:	4844      	ldr	r0, [pc, #272]	@ (8002308 <MX_GPIO_Init+0x344>)
 80021f6:	f001 f8d3 	bl	80033a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI1_CK2_Pin SAI1_D2_Pin */
  GPIO_InitStruct.Pin = SAI1_CK2_Pin|SAI1_D2_Pin;
 80021fa:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80021fe:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002200:	2302      	movs	r3, #2
 8002202:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002204:	2300      	movs	r3, #0
 8002206:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002208:	2300      	movs	r3, #0
 800220a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF3_SAI1;
 800220c:	2303      	movs	r3, #3
 800220e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002210:	1d3b      	adds	r3, r7, #4
 8002212:	4619      	mov	r1, r3
 8002214:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002218:	f001 f8c2 	bl	80033a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800221c:	2340      	movs	r3, #64	@ 0x40
 800221e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002220:	2302      	movs	r3, #2
 8002222:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002224:	2300      	movs	r3, #0
 8002226:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002228:	2300      	movs	r3, #0
 800222a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800222c:	2308      	movs	r3, #8
 800222e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002230:	1d3b      	adds	r3, r7, #4
 8002232:	4619      	mov	r1, r3
 8002234:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002238:	f001 f8b2 	bl	80033a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_BK_SCK_Pin */
  GPIO_InitStruct.Pin = QSPI_BK_SCK_Pin;
 800223c:	2308      	movs	r3, #8
 800223e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002240:	2302      	movs	r3, #2
 8002242:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002244:	2300      	movs	r3, #0
 8002246:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002248:	2300      	movs	r3, #0
 800224a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800224c:	230a      	movs	r3, #10
 800224e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(QSPI_BK_SCK_GPIO_Port, &GPIO_InitStruct);
 8002250:	1d3b      	adds	r3, r7, #4
 8002252:	4619      	mov	r1, r3
 8002254:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002258:	f001 f8a2 	bl	80033a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_DISP_Pin GPIO_SELECT2_Pin */
  GPIO_InitStruct.Pin = CS_DISP_Pin|GPIO_SELECT2_Pin;
 800225c:	2303      	movs	r3, #3
 800225e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002260:	2301      	movs	r3, #1
 8002262:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002264:	2300      	movs	r3, #0
 8002266:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002268:	2300      	movs	r3, #0
 800226a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800226c:	1d3b      	adds	r3, r7, #4
 800226e:	4619      	mov	r1, r3
 8002270:	4821      	ldr	r0, [pc, #132]	@ (80022f8 <MX_GPIO_Init+0x334>)
 8002272:	f001 f895 	bl	80033a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002276:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800227a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800227c:	2302      	movs	r3, #2
 800227e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002280:	2300      	movs	r3, #0
 8002282:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002284:	2300      	movs	r3, #0
 8002286:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002288:	2301      	movs	r3, #1
 800228a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800228c:	1d3b      	adds	r3, r7, #4
 800228e:	4619      	mov	r1, r3
 8002290:	481b      	ldr	r0, [pc, #108]	@ (8002300 <MX_GPIO_Init+0x33c>)
 8002292:	f001 f885 	bl	80033a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD13 PD12 PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12|GPIO_PIN_4;
 8002296:	f243 0310 	movw	r3, #12304	@ 0x3010
 800229a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800229c:	2300      	movs	r3, #0
 800229e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a0:	2300      	movs	r3, #0
 80022a2:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022a4:	1d3b      	adds	r3, r7, #4
 80022a6:	4619      	mov	r1, r3
 80022a8:	4815      	ldr	r0, [pc, #84]	@ (8002300 <MX_GPIO_Init+0x33c>)
 80022aa:	f001 f879 	bl	80033a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin;
 80022ae:	f44f 7301 	mov.w	r3, #516	@ 0x204
 80022b2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80022b4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80022b8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ba:	2300      	movs	r3, #0
 80022bc:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022be:	1d3b      	adds	r3, r7, #4
 80022c0:	4619      	mov	r1, r3
 80022c2:	480f      	ldr	r0, [pc, #60]	@ (8002300 <MX_GPIO_Init+0x33c>)
 80022c4:	f001 f86c 	bl	80033a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : D_C_DISP_Pin RST_DISP_Pin */
  GPIO_InitStruct.Pin = D_C_DISP_Pin|RST_DISP_Pin;
 80022c8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80022cc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022ce:	2301      	movs	r3, #1
 80022d0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d2:	2300      	movs	r3, #0
 80022d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022d6:	2300      	movs	r3, #0
 80022d8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022da:	1d3b      	adds	r3, r7, #4
 80022dc:	4619      	mov	r1, r3
 80022de:	4807      	ldr	r0, [pc, #28]	@ (80022fc <MX_GPIO_Init+0x338>)
 80022e0:	f001 f85e 	bl	80033a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_BK_NCS_Pin QSPI_BK_IO1_Pin QSPI_BK_IO2_Pin */
  GPIO_InitStruct.Pin = QSPI_BK_NCS_Pin|QSPI_BK_IO1_Pin|QSPI_BK_IO2_Pin;
 80022e4:	2368      	movs	r3, #104	@ 0x68
 80022e6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022e8:	2302      	movs	r3, #2
 80022ea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ec:	2300      	movs	r3, #0
 80022ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022f0:	2300      	movs	r3, #0
 80022f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80022f4:	230a      	movs	r3, #10
 80022f6:	e009      	b.n	800230c <MX_GPIO_Init+0x348>
 80022f8:	48001c00 	.word	0x48001c00
 80022fc:	48000800 	.word	0x48000800
 8002300:	48000c00 	.word	0x48000c00
 8002304:	48001000 	.word	0x48001000
 8002308:	48000400 	.word	0x48000400
 800230c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800230e:	1d3b      	adds	r3, r7, #4
 8002310:	4619      	mov	r1, r3
 8002312:	4826      	ldr	r0, [pc, #152]	@ (80023ac <MX_GPIO_Init+0x3e8>)
 8002314:	f001 f844 	bl	80033a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002318:	2308      	movs	r3, #8
 800231a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800231c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002320:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002322:	2300      	movs	r3, #0
 8002324:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002326:	1d3b      	adds	r3, r7, #4
 8002328:	4619      	mov	r1, r3
 800232a:	4821      	ldr	r0, [pc, #132]	@ (80023b0 <MX_GPIO_Init+0x3ec>)
 800232c:	f001 f838 	bl	80033a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002330:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002334:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002336:	2301      	movs	r3, #1
 8002338:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800233a:	2300      	movs	r3, #0
 800233c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800233e:	2300      	movs	r3, #0
 8002340:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002342:	1d3b      	adds	r3, r7, #4
 8002344:	4619      	mov	r1, r3
 8002346:	4819      	ldr	r0, [pc, #100]	@ (80023ac <MX_GPIO_Init+0x3e8>)
 8002348:	f001 f82a 	bl	80033a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : TSC_G6_IO1_Pin TSC_G6_IO2_Pin */
  GPIO_InitStruct.Pin = TSC_G6_IO1_Pin|TSC_G6_IO2_Pin;
 800234c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002350:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002352:	2302      	movs	r3, #2
 8002354:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002356:	2300      	movs	r3, #0
 8002358:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800235a:	2300      	movs	r3, #0
 800235c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF9_TSC;
 800235e:	2309      	movs	r3, #9
 8002360:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002362:	1d3b      	adds	r3, r7, #4
 8002364:	4619      	mov	r1, r3
 8002366:	4811      	ldr	r0, [pc, #68]	@ (80023ac <MX_GPIO_Init+0x3e8>)
 8002368:	f001 f81a 	bl	80033a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_SELECT1_Pin */
  GPIO_InitStruct.Pin = GPIO_SELECT1_Pin;
 800236c:	2304      	movs	r3, #4
 800236e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002370:	2301      	movs	r3, #1
 8002372:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002374:	2300      	movs	r3, #0
 8002376:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002378:	2300      	movs	r3, #0
 800237a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIO_SELECT1_GPIO_Port, &GPIO_InitStruct);
 800237c:	1d3b      	adds	r3, r7, #4
 800237e:	4619      	mov	r1, r3
 8002380:	480b      	ldr	r0, [pc, #44]	@ (80023b0 <MX_GPIO_Init+0x3ec>)
 8002382:	f001 f80d 	bl	80033a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002386:	2301      	movs	r3, #1
 8002388:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800238a:	2302      	movs	r3, #2
 800238c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800238e:	2300      	movs	r3, #0
 8002390:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002392:	2300      	movs	r3, #0
 8002394:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM16;
 8002396:	230e      	movs	r3, #14
 8002398:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800239a:	1d3b      	adds	r3, r7, #4
 800239c:	4619      	mov	r1, r3
 800239e:	4804      	ldr	r0, [pc, #16]	@ (80023b0 <MX_GPIO_Init+0x3ec>)
 80023a0:	f000 fffe 	bl	80033a0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80023a4:	bf00      	nop
 80023a6:	3718      	adds	r7, #24
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	48000c00 	.word	0x48000c00
 80023b0:	48001000 	.word	0x48001000

080023b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023b4:	b480      	push	{r7}
 80023b6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80023b8:	b672      	cpsid	i
}
 80023ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80023bc:	bf00      	nop
 80023be:	e7fd      	b.n	80023bc <Error_Handler+0x8>

080023c0 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 80023c0:	b480      	push	{r7}
 80023c2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80023c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80023c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023cc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80023d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80023d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80023d8:	bf00      	nop
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr

080023e2 <LL_AHB2_GRP1_EnableClock>:
{
 80023e2:	b480      	push	{r7}
 80023e4:	b085      	sub	sp, #20
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80023ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80023ee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80023f0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	4313      	orrs	r3, r2
 80023f8:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80023fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80023fe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	4013      	ands	r3, r2
 8002404:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002406:	68fb      	ldr	r3, [r7, #12]
}
 8002408:	bf00      	nop
 800240a:	3714      	adds	r7, #20
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr

08002414 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8002414:	b480      	push	{r7}
 8002416:	b085      	sub	sp, #20
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 800241c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002420:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002422:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4313      	orrs	r3, r2
 800242a:	650b      	str	r3, [r1, #80]	@ 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800242c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002430:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4013      	ands	r3, r2
 8002436:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002438:	68fb      	ldr	r3, [r7, #12]
}
 800243a:	bf00      	nop
 800243c:	3714      	adds	r7, #20
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr

08002446 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8002446:	b480      	push	{r7}
 8002448:	b085      	sub	sp, #20
 800244a:	af00      	add	r7, sp, #0
 800244c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800244e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002452:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002454:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	4313      	orrs	r3, r2
 800245c:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800245e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002462:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	4013      	ands	r3, r2
 8002468:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800246a:	68fb      	ldr	r3, [r7, #12]
}
 800246c:	bf00      	nop
 800246e:	3714      	adds	r7, #20
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr

08002478 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8002478:	b480      	push	{r7}
 800247a:	b085      	sub	sp, #20
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8002480:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002484:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002486:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4313      	orrs	r3, r2
 800248e:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002490:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002494:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	4013      	ands	r3, r2
 800249a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800249c:	68fb      	ldr	r3, [r7, #12]
}
 800249e:	bf00      	nop
 80024a0:	3714      	adds	r7, #20
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr

080024aa <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024aa:	b580      	push	{r7, lr}
 80024ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 80024ae:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80024b2:	f7ff ffaf 	bl	8002414 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 80024b6:	2200      	movs	r2, #0
 80024b8:	2100      	movs	r1, #0
 80024ba:	202e      	movs	r0, #46	@ 0x2e
 80024bc:	f000 fbdf 	bl	8002c7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 80024c0:	202e      	movs	r0, #46	@ 0x2e
 80024c2:	f000 fbf6 	bl	8002cb2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024c6:	bf00      	nop
 80024c8:	bd80      	pop	{r7, pc}
	...

080024cc <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b082      	sub	sp, #8
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a05      	ldr	r2, [pc, #20]	@ (80024f0 <HAL_IPCC_MspInit+0x24>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d103      	bne.n	80024e6 <HAL_IPCC_MspInit+0x1a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 80024de:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80024e2:	f7ff ff97 	bl	8002414 <LL_AHB3_GRP1_EnableClock>

  /* USER CODE END IPCC_MspInit 1 */

  }

}
 80024e6:	bf00      	nop
 80024e8:	3708      	adds	r7, #8
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	58000c00 	.word	0x58000c00

080024f4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b096      	sub	sp, #88	@ 0x58
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80024fc:	f107 0308 	add.w	r3, r7, #8
 8002500:	2250      	movs	r2, #80	@ 0x50
 8002502:	2100      	movs	r1, #0
 8002504:	4618      	mov	r0, r3
 8002506:	f008 fdd7 	bl	800b0b8 <memset>
  if(hrtc->Instance==RTC)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a0e      	ldr	r2, [pc, #56]	@ (8002548 <HAL_RTC_MspInit+0x54>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d115      	bne.n	8002540 <HAL_RTC_MspInit+0x4c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002514:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002518:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800251a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800251e:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002520:	f107 0308 	add.w	r3, r7, #8
 8002524:	4618      	mov	r0, r3
 8002526:	f002 fcb2 	bl	8004e8e <HAL_RCCEx_PeriphCLKConfig>
 800252a:	4603      	mov	r3, r0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d001      	beq.n	8002534 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8002530:	f7ff ff40 	bl	80023b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002534:	f7ff ff44 	bl	80023c0 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002538:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800253c:	f7ff ff83 	bl	8002446 <LL_APB1_GRP1_EnableClock>

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8002540:	bf00      	nop
 8002542:	3758      	adds	r7, #88	@ 0x58
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}
 8002548:	40002800 	.word	0x40002800

0800254c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b09c      	sub	sp, #112	@ 0x70
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002554:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002558:	2200      	movs	r2, #0
 800255a:	601a      	str	r2, [r3, #0]
 800255c:	605a      	str	r2, [r3, #4]
 800255e:	609a      	str	r2, [r3, #8]
 8002560:	60da      	str	r2, [r3, #12]
 8002562:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002564:	f107 030c 	add.w	r3, r7, #12
 8002568:	2250      	movs	r2, #80	@ 0x50
 800256a:	2100      	movs	r1, #0
 800256c:	4618      	mov	r0, r3
 800256e:	f008 fda3 	bl	800b0b8 <memset>
  if(huart->Instance==USART1)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a2e      	ldr	r2, [pc, #184]	@ (8002630 <HAL_UART_MspInit+0xe4>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d155      	bne.n	8002628 <HAL_UART_MspInit+0xdc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800257c:	2301      	movs	r3, #1
 800257e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002580:	2300      	movs	r3, #0
 8002582:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002584:	f107 030c 	add.w	r3, r7, #12
 8002588:	4618      	mov	r0, r3
 800258a:	f002 fc80 	bl	8004e8e <HAL_RCCEx_PeriphCLKConfig>
 800258e:	4603      	mov	r3, r0
 8002590:	2b00      	cmp	r3, #0
 8002592:	d001      	beq.n	8002598 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002594:	f7ff ff0e 	bl	80023b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002598:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800259c:	f7ff ff6c 	bl	8002478 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025a0:	2002      	movs	r0, #2
 80025a2:	f7ff ff1e 	bl	80023e2 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin|VCP_TX_Pin;
 80025a6:	23c0      	movs	r3, #192	@ 0xc0
 80025a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025aa:	2302      	movs	r3, #2
 80025ac:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025ae:	2301      	movs	r3, #1
 80025b0:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025b2:	2303      	movs	r3, #3
 80025b4:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80025b6:	2307      	movs	r3, #7
 80025b8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025ba:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80025be:	4619      	mov	r1, r3
 80025c0:	481c      	ldr	r0, [pc, #112]	@ (8002634 <HAL_UART_MspInit+0xe8>)
 80025c2:	f000 feed 	bl	80033a0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Channel4;
 80025c6:	4b1c      	ldr	r3, [pc, #112]	@ (8002638 <HAL_UART_MspInit+0xec>)
 80025c8:	4a1c      	ldr	r2, [pc, #112]	@ (800263c <HAL_UART_MspInit+0xf0>)
 80025ca:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80025cc:	4b1a      	ldr	r3, [pc, #104]	@ (8002638 <HAL_UART_MspInit+0xec>)
 80025ce:	220f      	movs	r2, #15
 80025d0:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80025d2:	4b19      	ldr	r3, [pc, #100]	@ (8002638 <HAL_UART_MspInit+0xec>)
 80025d4:	2210      	movs	r2, #16
 80025d6:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80025d8:	4b17      	ldr	r3, [pc, #92]	@ (8002638 <HAL_UART_MspInit+0xec>)
 80025da:	2200      	movs	r2, #0
 80025dc:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80025de:	4b16      	ldr	r3, [pc, #88]	@ (8002638 <HAL_UART_MspInit+0xec>)
 80025e0:	2280      	movs	r2, #128	@ 0x80
 80025e2:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80025e4:	4b14      	ldr	r3, [pc, #80]	@ (8002638 <HAL_UART_MspInit+0xec>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80025ea:	4b13      	ldr	r3, [pc, #76]	@ (8002638 <HAL_UART_MspInit+0xec>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80025f0:	4b11      	ldr	r3, [pc, #68]	@ (8002638 <HAL_UART_MspInit+0xec>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80025f6:	4b10      	ldr	r3, [pc, #64]	@ (8002638 <HAL_UART_MspInit+0xec>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80025fc:	480e      	ldr	r0, [pc, #56]	@ (8002638 <HAL_UART_MspInit+0xec>)
 80025fe:	f000 fb9d 	bl	8002d3c <HAL_DMA_Init>
 8002602:	4603      	mov	r3, r0
 8002604:	2b00      	cmp	r3, #0
 8002606:	d001      	beq.n	800260c <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8002608:	f7ff fed4 	bl	80023b4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	4a0a      	ldr	r2, [pc, #40]	@ (8002638 <HAL_UART_MspInit+0xec>)
 8002610:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002612:	4a09      	ldr	r2, [pc, #36]	@ (8002638 <HAL_UART_MspInit+0xec>)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002618:	2200      	movs	r2, #0
 800261a:	2100      	movs	r1, #0
 800261c:	2024      	movs	r0, #36	@ 0x24
 800261e:	f000 fb2e 	bl	8002c7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002622:	2024      	movs	r0, #36	@ 0x24
 8002624:	f000 fb45 	bl	8002cb2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8002628:	bf00      	nop
 800262a:	3770      	adds	r7, #112	@ 0x70
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}
 8002630:	40013800 	.word	0x40013800
 8002634:	48000400 	.word	0x48000400
 8002638:	20000280 	.word	0x20000280
 800263c:	40020444 	.word	0x40020444

08002640 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002640:	b480      	push	{r7}
 8002642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002644:	bf00      	nop
 8002646:	e7fd      	b.n	8002644 <NMI_Handler+0x4>

08002648 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002648:	b480      	push	{r7}
 800264a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800264c:	bf00      	nop
 800264e:	e7fd      	b.n	800264c <HardFault_Handler+0x4>

08002650 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002650:	b480      	push	{r7}
 8002652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002654:	bf00      	nop
 8002656:	e7fd      	b.n	8002654 <MemManage_Handler+0x4>

08002658 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002658:	b480      	push	{r7}
 800265a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800265c:	bf00      	nop
 800265e:	e7fd      	b.n	800265c <BusFault_Handler+0x4>

08002660 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002660:	b480      	push	{r7}
 8002662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002664:	bf00      	nop
 8002666:	e7fd      	b.n	8002664 <UsageFault_Handler+0x4>

08002668 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002668:	b480      	push	{r7}
 800266a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800266c:	bf00      	nop
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr

08002676 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002676:	b480      	push	{r7}
 8002678:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800267a:	bf00      	nop
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr

08002684 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002684:	b480      	push	{r7}
 8002686:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002688:	bf00      	nop
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr

08002692 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002692:	b580      	push	{r7, lr}
 8002694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002696:	f000 f98b 	bl	80029b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800269a:	bf00      	nop
 800269c:	bd80      	pop	{r7, pc}
	...

080026a0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80026a4:	4802      	ldr	r0, [pc, #8]	@ (80026b0 <USART1_IRQHandler+0x10>)
 80026a6:	f003 f869 	bl	800577c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80026aa:	bf00      	nop
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	200001ec 	.word	0x200001ec

080026b4 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 80026b8:	f000 fffa 	bl	80036b0 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 80026bc:	bf00      	nop
 80026be:	bd80      	pop	{r7, pc}

080026c0 <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80026c4:	4802      	ldr	r0, [pc, #8]	@ (80026d0 <DMA2_Channel4_IRQHandler+0x10>)
 80026c6:	f000 fd1a 	bl	80030fe <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 80026ca:	bf00      	nop
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	20000280 	.word	0x20000280

080026d4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b086      	sub	sp, #24
 80026d8:	af00      	add	r7, sp, #0
 80026da:	60f8      	str	r0, [r7, #12]
 80026dc:	60b9      	str	r1, [r7, #8]
 80026de:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026e0:	2300      	movs	r3, #0
 80026e2:	617b      	str	r3, [r7, #20]
 80026e4:	e00a      	b.n	80026fc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80026e6:	f3af 8000 	nop.w
 80026ea:	4601      	mov	r1, r0
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	1c5a      	adds	r2, r3, #1
 80026f0:	60ba      	str	r2, [r7, #8]
 80026f2:	b2ca      	uxtb	r2, r1
 80026f4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	3301      	adds	r3, #1
 80026fa:	617b      	str	r3, [r7, #20]
 80026fc:	697a      	ldr	r2, [r7, #20]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	429a      	cmp	r2, r3
 8002702:	dbf0      	blt.n	80026e6 <_read+0x12>
  }

  return len;
 8002704:	687b      	ldr	r3, [r7, #4]
}
 8002706:	4618      	mov	r0, r3
 8002708:	3718      	adds	r7, #24
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}

0800270e <_close>:
  }
  return len;
}

int _close(int file)
{
 800270e:	b480      	push	{r7}
 8002710:	b083      	sub	sp, #12
 8002712:	af00      	add	r7, sp, #0
 8002714:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002716:	f04f 33ff 	mov.w	r3, #4294967295
}
 800271a:	4618      	mov	r0, r3
 800271c:	370c      	adds	r7, #12
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr

08002726 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002726:	b480      	push	{r7}
 8002728:	b083      	sub	sp, #12
 800272a:	af00      	add	r7, sp, #0
 800272c:	6078      	str	r0, [r7, #4]
 800272e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002736:	605a      	str	r2, [r3, #4]
  return 0;
 8002738:	2300      	movs	r3, #0
}
 800273a:	4618      	mov	r0, r3
 800273c:	370c      	adds	r7, #12
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr

08002746 <_isatty>:

int _isatty(int file)
{
 8002746:	b480      	push	{r7}
 8002748:	b083      	sub	sp, #12
 800274a:	af00      	add	r7, sp, #0
 800274c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800274e:	2301      	movs	r3, #1
}
 8002750:	4618      	mov	r0, r3
 8002752:	370c      	adds	r7, #12
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr

0800275c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800275c:	b480      	push	{r7}
 800275e:	b085      	sub	sp, #20
 8002760:	af00      	add	r7, sp, #0
 8002762:	60f8      	str	r0, [r7, #12]
 8002764:	60b9      	str	r1, [r7, #8]
 8002766:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002768:	2300      	movs	r3, #0
}
 800276a:	4618      	mov	r0, r3
 800276c:	3714      	adds	r7, #20
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr
	...

08002778 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b086      	sub	sp, #24
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002780:	4a14      	ldr	r2, [pc, #80]	@ (80027d4 <_sbrk+0x5c>)
 8002782:	4b15      	ldr	r3, [pc, #84]	@ (80027d8 <_sbrk+0x60>)
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800278c:	4b13      	ldr	r3, [pc, #76]	@ (80027dc <_sbrk+0x64>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d102      	bne.n	800279a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002794:	4b11      	ldr	r3, [pc, #68]	@ (80027dc <_sbrk+0x64>)
 8002796:	4a12      	ldr	r2, [pc, #72]	@ (80027e0 <_sbrk+0x68>)
 8002798:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800279a:	4b10      	ldr	r3, [pc, #64]	@ (80027dc <_sbrk+0x64>)
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4413      	add	r3, r2
 80027a2:	693a      	ldr	r2, [r7, #16]
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d207      	bcs.n	80027b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80027a8:	f008 fcd4 	bl	800b154 <__errno>
 80027ac:	4603      	mov	r3, r0
 80027ae:	220c      	movs	r2, #12
 80027b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80027b2:	f04f 33ff 	mov.w	r3, #4294967295
 80027b6:	e009      	b.n	80027cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80027b8:	4b08      	ldr	r3, [pc, #32]	@ (80027dc <_sbrk+0x64>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80027be:	4b07      	ldr	r3, [pc, #28]	@ (80027dc <_sbrk+0x64>)
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	4413      	add	r3, r2
 80027c6:	4a05      	ldr	r2, [pc, #20]	@ (80027dc <_sbrk+0x64>)
 80027c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80027ca:	68fb      	ldr	r3, [r7, #12]
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3718      	adds	r7, #24
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	20030000 	.word	0x20030000
 80027d8:	00001000 	.word	0x00001000
 80027dc:	200002e0 	.word	0x200002e0
 80027e0:	20000610 	.word	0x20000610

080027e4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80027e4:	b480      	push	{r7}
 80027e6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 80027e8:	4b24      	ldr	r3, [pc, #144]	@ (800287c <SystemInit+0x98>)
 80027ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027ee:	4a23      	ldr	r2, [pc, #140]	@ (800287c <SystemInit+0x98>)
 80027f0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80027f4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80027f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002802:	f043 0301 	orr.w	r3, r3, #1
 8002806:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8002808:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800280c:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8002810:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8002812:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800281c:	4b18      	ldr	r3, [pc, #96]	@ (8002880 <SystemInit+0x9c>)
 800281e:	4013      	ands	r3, r2
 8002820:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8002822:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002826:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800282a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800282e:	f023 0305 	bic.w	r3, r3, #5
 8002832:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8002836:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800283a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800283e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002842:	f023 0301 	bic.w	r3, r3, #1
 8002846:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800284a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800284e:	4a0d      	ldr	r2, [pc, #52]	@ (8002884 <SystemInit+0xa0>)
 8002850:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8002852:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002856:	4a0b      	ldr	r2, [pc, #44]	@ (8002884 <SystemInit+0xa0>)
 8002858:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800285a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002864:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002868:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800286a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800286e:	2200      	movs	r2, #0
 8002870:	619a      	str	r2, [r3, #24]
}
 8002872:	bf00      	nop
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr
 800287c:	e000ed00 	.word	0xe000ed00
 8002880:	faf6fefb 	.word	0xfaf6fefb
 8002884:	22041000 	.word	0x22041000

08002888 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8002888:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800288a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800288c:	3304      	adds	r3, #4

0800288e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800288e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002890:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8002892:	d3f9      	bcc.n	8002888 <CopyDataInit>
  bx lr
 8002894:	4770      	bx	lr

08002896 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8002896:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8002898:	3004      	adds	r0, #4

0800289a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800289a:	4288      	cmp	r0, r1
  bcc FillZerobss
 800289c:	d3fb      	bcc.n	8002896 <FillZerobss>
  bx lr
 800289e:	4770      	bx	lr

080028a0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80028a0:	480c      	ldr	r0, [pc, #48]	@ (80028d4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80028a2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80028a4:	f7ff ff9e 	bl	80027e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80028a8:	480b      	ldr	r0, [pc, #44]	@ (80028d8 <LoopForever+0x6>)
 80028aa:	490c      	ldr	r1, [pc, #48]	@ (80028dc <LoopForever+0xa>)
 80028ac:	4a0c      	ldr	r2, [pc, #48]	@ (80028e0 <LoopForever+0xe>)
 80028ae:	2300      	movs	r3, #0
 80028b0:	f7ff ffed 	bl	800288e <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80028b4:	480b      	ldr	r0, [pc, #44]	@ (80028e4 <LoopForever+0x12>)
 80028b6:	490c      	ldr	r1, [pc, #48]	@ (80028e8 <LoopForever+0x16>)
 80028b8:	4a0c      	ldr	r2, [pc, #48]	@ (80028ec <LoopForever+0x1a>)
 80028ba:	2300      	movs	r3, #0
 80028bc:	f7ff ffe7 	bl	800288e <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80028c0:	480b      	ldr	r0, [pc, #44]	@ (80028f0 <LoopForever+0x1e>)
 80028c2:	490c      	ldr	r1, [pc, #48]	@ (80028f4 <LoopForever+0x22>)
 80028c4:	2300      	movs	r3, #0
 80028c6:	f7ff ffe8 	bl	800289a <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80028ca:	f008 fc49 	bl	800b160 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80028ce:	f7ff fa3b 	bl	8001d48 <main>

080028d2 <LoopForever>:

LoopForever:
  b LoopForever
 80028d2:	e7fe      	b.n	80028d2 <LoopForever>
  ldr   r0, =_estack
 80028d4:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80028d8:	20000008 	.word	0x20000008
 80028dc:	20000090 	.word	0x20000090
 80028e0:	0800cde8 	.word	0x0800cde8
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80028e4:	200301e4 	.word	0x200301e4
 80028e8:	20030a67 	.word	0x20030a67
 80028ec:	0800cea6 	.word	0x0800cea6
  INIT_BSS _sbss, _ebss
 80028f0:	200000cc 	.word	0x200000cc
 80028f4:	2000060c 	.word	0x2000060c

080028f8 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80028f8:	e7fe      	b.n	80028f8 <ADC1_IRQHandler>
	...

080028fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b082      	sub	sp, #8
 8002900:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002902:	2300      	movs	r3, #0
 8002904:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002906:	4b0c      	ldr	r3, [pc, #48]	@ (8002938 <HAL_Init+0x3c>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a0b      	ldr	r2, [pc, #44]	@ (8002938 <HAL_Init+0x3c>)
 800290c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002910:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002912:	2003      	movs	r0, #3
 8002914:	f000 f9a8 	bl	8002c68 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002918:	2000      	movs	r0, #0
 800291a:	f000 f80f 	bl	800293c <HAL_InitTick>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d002      	beq.n	800292a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	71fb      	strb	r3, [r7, #7]
 8002928:	e001      	b.n	800292e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800292a:	f7ff fdbe 	bl	80024aa <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800292e:	79fb      	ldrb	r3, [r7, #7]
}
 8002930:	4618      	mov	r0, r3
 8002932:	3708      	adds	r7, #8
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}
 8002938:	58004000 	.word	0x58004000

0800293c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002944:	2300      	movs	r3, #0
 8002946:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8002948:	4b17      	ldr	r3, [pc, #92]	@ (80029a8 <HAL_InitTick+0x6c>)
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d024      	beq.n	800299a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002950:	f002 f80c 	bl	800496c <HAL_RCC_GetHCLKFreq>
 8002954:	4602      	mov	r2, r0
 8002956:	4b14      	ldr	r3, [pc, #80]	@ (80029a8 <HAL_InitTick+0x6c>)
 8002958:	781b      	ldrb	r3, [r3, #0]
 800295a:	4619      	mov	r1, r3
 800295c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002960:	fbb3 f3f1 	udiv	r3, r3, r1
 8002964:	fbb2 f3f3 	udiv	r3, r2, r3
 8002968:	4618      	mov	r0, r3
 800296a:	f000 f9be 	bl	8002cea <HAL_SYSTICK_Config>
 800296e:	4603      	mov	r3, r0
 8002970:	2b00      	cmp	r3, #0
 8002972:	d10f      	bne.n	8002994 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2b0f      	cmp	r3, #15
 8002978:	d809      	bhi.n	800298e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800297a:	2200      	movs	r2, #0
 800297c:	6879      	ldr	r1, [r7, #4]
 800297e:	f04f 30ff 	mov.w	r0, #4294967295
 8002982:	f000 f97c 	bl	8002c7e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002986:	4a09      	ldr	r2, [pc, #36]	@ (80029ac <HAL_InitTick+0x70>)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6013      	str	r3, [r2, #0]
 800298c:	e007      	b.n	800299e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	73fb      	strb	r3, [r7, #15]
 8002992:	e004      	b.n	800299e <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	73fb      	strb	r3, [r7, #15]
 8002998:	e001      	b.n	800299e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800299e:	7bfb      	ldrb	r3, [r7, #15]
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	3710      	adds	r7, #16
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	20000010 	.word	0x20000010
 80029ac:	2000000c 	.word	0x2000000c

080029b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029b0:	b480      	push	{r7}
 80029b2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80029b4:	4b06      	ldr	r3, [pc, #24]	@ (80029d0 <HAL_IncTick+0x20>)
 80029b6:	781b      	ldrb	r3, [r3, #0]
 80029b8:	461a      	mov	r2, r3
 80029ba:	4b06      	ldr	r3, [pc, #24]	@ (80029d4 <HAL_IncTick+0x24>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4413      	add	r3, r2
 80029c0:	4a04      	ldr	r2, [pc, #16]	@ (80029d4 <HAL_IncTick+0x24>)
 80029c2:	6013      	str	r3, [r2, #0]
}
 80029c4:	bf00      	nop
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr
 80029ce:	bf00      	nop
 80029d0:	20000010 	.word	0x20000010
 80029d4:	200002e4 	.word	0x200002e4

080029d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029d8:	b480      	push	{r7}
 80029da:	af00      	add	r7, sp, #0
  return uwTick;
 80029dc:	4b03      	ldr	r3, [pc, #12]	@ (80029ec <HAL_GetTick+0x14>)
 80029de:	681b      	ldr	r3, [r3, #0]
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr
 80029ea:	bf00      	nop
 80029ec:	200002e4 	.word	0x200002e4

080029f0 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80029f0:	b480      	push	{r7}
 80029f2:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80029f4:	4b03      	ldr	r3, [pc, #12]	@ (8002a04 <HAL_GetTickPrio+0x14>)
 80029f6:	681b      	ldr	r3, [r3, #0]
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr
 8002a02:	bf00      	nop
 8002a04:	2000000c 	.word	0x2000000c

08002a08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b085      	sub	sp, #20
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	f003 0307 	and.w	r3, r3, #7
 8002a16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a18:	4b0c      	ldr	r3, [pc, #48]	@ (8002a4c <__NVIC_SetPriorityGrouping+0x44>)
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a1e:	68ba      	ldr	r2, [r7, #8]
 8002a20:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002a24:	4013      	ands	r3, r2
 8002a26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a30:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002a34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a3a:	4a04      	ldr	r2, [pc, #16]	@ (8002a4c <__NVIC_SetPriorityGrouping+0x44>)
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	60d3      	str	r3, [r2, #12]
}
 8002a40:	bf00      	nop
 8002a42:	3714      	adds	r7, #20
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr
 8002a4c:	e000ed00 	.word	0xe000ed00

08002a50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a50:	b480      	push	{r7}
 8002a52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a54:	4b04      	ldr	r3, [pc, #16]	@ (8002a68 <__NVIC_GetPriorityGrouping+0x18>)
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	0a1b      	lsrs	r3, r3, #8
 8002a5a:	f003 0307 	and.w	r3, r3, #7
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	46bd      	mov	sp, r7
 8002a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a66:	4770      	bx	lr
 8002a68:	e000ed00 	.word	0xe000ed00

08002a6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	4603      	mov	r3, r0
 8002a74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	db0b      	blt.n	8002a96 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a7e:	79fb      	ldrb	r3, [r7, #7]
 8002a80:	f003 021f 	and.w	r2, r3, #31
 8002a84:	4907      	ldr	r1, [pc, #28]	@ (8002aa4 <__NVIC_EnableIRQ+0x38>)
 8002a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a8a:	095b      	lsrs	r3, r3, #5
 8002a8c:	2001      	movs	r0, #1
 8002a8e:	fa00 f202 	lsl.w	r2, r0, r2
 8002a92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002a96:	bf00      	nop
 8002a98:	370c      	adds	r7, #12
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr
 8002aa2:	bf00      	nop
 8002aa4:	e000e100 	.word	0xe000e100

08002aa8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b083      	sub	sp, #12
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	4603      	mov	r3, r0
 8002ab0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	db12      	blt.n	8002ae0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002aba:	79fb      	ldrb	r3, [r7, #7]
 8002abc:	f003 021f 	and.w	r2, r3, #31
 8002ac0:	490a      	ldr	r1, [pc, #40]	@ (8002aec <__NVIC_DisableIRQ+0x44>)
 8002ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ac6:	095b      	lsrs	r3, r3, #5
 8002ac8:	2001      	movs	r0, #1
 8002aca:	fa00 f202 	lsl.w	r2, r0, r2
 8002ace:	3320      	adds	r3, #32
 8002ad0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002ad4:	f3bf 8f4f 	dsb	sy
}
 8002ad8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002ada:	f3bf 8f6f 	isb	sy
}
 8002ade:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002ae0:	bf00      	nop
 8002ae2:	370c      	adds	r7, #12
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr
 8002aec:	e000e100 	.word	0xe000e100

08002af0 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b083      	sub	sp, #12
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	4603      	mov	r3, r0
 8002af8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	db0c      	blt.n	8002b1c <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b02:	79fb      	ldrb	r3, [r7, #7]
 8002b04:	f003 021f 	and.w	r2, r3, #31
 8002b08:	4907      	ldr	r1, [pc, #28]	@ (8002b28 <__NVIC_SetPendingIRQ+0x38>)
 8002b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b0e:	095b      	lsrs	r3, r3, #5
 8002b10:	2001      	movs	r0, #1
 8002b12:	fa00 f202 	lsl.w	r2, r0, r2
 8002b16:	3340      	adds	r3, #64	@ 0x40
 8002b18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b1c:	bf00      	nop
 8002b1e:	370c      	adds	r7, #12
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr
 8002b28:	e000e100 	.word	0xe000e100

08002b2c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b083      	sub	sp, #12
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	4603      	mov	r3, r0
 8002b34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	db0c      	blt.n	8002b58 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b3e:	79fb      	ldrb	r3, [r7, #7]
 8002b40:	f003 021f 	and.w	r2, r3, #31
 8002b44:	4907      	ldr	r1, [pc, #28]	@ (8002b64 <__NVIC_ClearPendingIRQ+0x38>)
 8002b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b4a:	095b      	lsrs	r3, r3, #5
 8002b4c:	2001      	movs	r0, #1
 8002b4e:	fa00 f202 	lsl.w	r2, r0, r2
 8002b52:	3360      	adds	r3, #96	@ 0x60
 8002b54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b58:	bf00      	nop
 8002b5a:	370c      	adds	r7, #12
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr
 8002b64:	e000e100 	.word	0xe000e100

08002b68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	4603      	mov	r3, r0
 8002b70:	6039      	str	r1, [r7, #0]
 8002b72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	db0a      	blt.n	8002b92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	b2da      	uxtb	r2, r3
 8002b80:	490c      	ldr	r1, [pc, #48]	@ (8002bb4 <__NVIC_SetPriority+0x4c>)
 8002b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b86:	0112      	lsls	r2, r2, #4
 8002b88:	b2d2      	uxtb	r2, r2
 8002b8a:	440b      	add	r3, r1
 8002b8c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b90:	e00a      	b.n	8002ba8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	b2da      	uxtb	r2, r3
 8002b96:	4908      	ldr	r1, [pc, #32]	@ (8002bb8 <__NVIC_SetPriority+0x50>)
 8002b98:	79fb      	ldrb	r3, [r7, #7]
 8002b9a:	f003 030f 	and.w	r3, r3, #15
 8002b9e:	3b04      	subs	r3, #4
 8002ba0:	0112      	lsls	r2, r2, #4
 8002ba2:	b2d2      	uxtb	r2, r2
 8002ba4:	440b      	add	r3, r1
 8002ba6:	761a      	strb	r2, [r3, #24]
}
 8002ba8:	bf00      	nop
 8002baa:	370c      	adds	r7, #12
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr
 8002bb4:	e000e100 	.word	0xe000e100
 8002bb8:	e000ed00 	.word	0xe000ed00

08002bbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b089      	sub	sp, #36	@ 0x24
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	60f8      	str	r0, [r7, #12]
 8002bc4:	60b9      	str	r1, [r7, #8]
 8002bc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	f003 0307 	and.w	r3, r3, #7
 8002bce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bd0:	69fb      	ldr	r3, [r7, #28]
 8002bd2:	f1c3 0307 	rsb	r3, r3, #7
 8002bd6:	2b04      	cmp	r3, #4
 8002bd8:	bf28      	it	cs
 8002bda:	2304      	movcs	r3, #4
 8002bdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	3304      	adds	r3, #4
 8002be2:	2b06      	cmp	r3, #6
 8002be4:	d902      	bls.n	8002bec <NVIC_EncodePriority+0x30>
 8002be6:	69fb      	ldr	r3, [r7, #28]
 8002be8:	3b03      	subs	r3, #3
 8002bea:	e000      	b.n	8002bee <NVIC_EncodePriority+0x32>
 8002bec:	2300      	movs	r3, #0
 8002bee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bf0:	f04f 32ff 	mov.w	r2, #4294967295
 8002bf4:	69bb      	ldr	r3, [r7, #24]
 8002bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfa:	43da      	mvns	r2, r3
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	401a      	ands	r2, r3
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c04:	f04f 31ff 	mov.w	r1, #4294967295
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c0e:	43d9      	mvns	r1, r3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c14:	4313      	orrs	r3, r2
         );
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3724      	adds	r7, #36	@ 0x24
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr
	...

08002c24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b082      	sub	sp, #8
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	3b01      	subs	r3, #1
 8002c30:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c34:	d301      	bcc.n	8002c3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c36:	2301      	movs	r3, #1
 8002c38:	e00f      	b.n	8002c5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c3a:	4a0a      	ldr	r2, [pc, #40]	@ (8002c64 <SysTick_Config+0x40>)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	3b01      	subs	r3, #1
 8002c40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c42:	210f      	movs	r1, #15
 8002c44:	f04f 30ff 	mov.w	r0, #4294967295
 8002c48:	f7ff ff8e 	bl	8002b68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c4c:	4b05      	ldr	r3, [pc, #20]	@ (8002c64 <SysTick_Config+0x40>)
 8002c4e:	2200      	movs	r2, #0
 8002c50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c52:	4b04      	ldr	r3, [pc, #16]	@ (8002c64 <SysTick_Config+0x40>)
 8002c54:	2207      	movs	r2, #7
 8002c56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c58:	2300      	movs	r3, #0
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3708      	adds	r7, #8
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	e000e010 	.word	0xe000e010

08002c68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b082      	sub	sp, #8
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	f7ff fec9 	bl	8002a08 <__NVIC_SetPriorityGrouping>
}
 8002c76:	bf00      	nop
 8002c78:	3708      	adds	r7, #8
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}

08002c7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c7e:	b580      	push	{r7, lr}
 8002c80:	b086      	sub	sp, #24
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	4603      	mov	r3, r0
 8002c86:	60b9      	str	r1, [r7, #8]
 8002c88:	607a      	str	r2, [r7, #4]
 8002c8a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002c8c:	f7ff fee0 	bl	8002a50 <__NVIC_GetPriorityGrouping>
 8002c90:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c92:	687a      	ldr	r2, [r7, #4]
 8002c94:	68b9      	ldr	r1, [r7, #8]
 8002c96:	6978      	ldr	r0, [r7, #20]
 8002c98:	f7ff ff90 	bl	8002bbc <NVIC_EncodePriority>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ca2:	4611      	mov	r1, r2
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f7ff ff5f 	bl	8002b68 <__NVIC_SetPriority>
}
 8002caa:	bf00      	nop
 8002cac:	3718      	adds	r7, #24
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}

08002cb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cb2:	b580      	push	{r7, lr}
 8002cb4:	b082      	sub	sp, #8
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	4603      	mov	r3, r0
 8002cba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f7ff fed3 	bl	8002a6c <__NVIC_EnableIRQ>
}
 8002cc6:	bf00      	nop
 8002cc8:	3708      	adds	r7, #8
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}

08002cce <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002cce:	b580      	push	{r7, lr}
 8002cd0:	b082      	sub	sp, #8
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002cd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f7ff fee3 	bl	8002aa8 <__NVIC_DisableIRQ>
}
 8002ce2:	bf00      	nop
 8002ce4:	3708      	adds	r7, #8
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}

08002cea <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cea:	b580      	push	{r7, lr}
 8002cec:	b082      	sub	sp, #8
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f7ff ff96 	bl	8002c24 <SysTick_Config>
 8002cf8:	4603      	mov	r3, r0
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3708      	adds	r7, #8
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}

08002d02 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8002d02:	b580      	push	{r7, lr}
 8002d04:	b082      	sub	sp, #8
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	4603      	mov	r3, r0
 8002d0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8002d0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d10:	4618      	mov	r0, r3
 8002d12:	f7ff feed 	bl	8002af0 <__NVIC_SetPendingIRQ>
}
 8002d16:	bf00      	nop
 8002d18:	3708      	adds	r7, #8
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}

08002d1e <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002d1e:	b580      	push	{r7, lr}
 8002d20:	b082      	sub	sp, #8
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	4603      	mov	r3, r0
 8002d26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8002d28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f7ff fefd 	bl	8002b2c <__NVIC_ClearPendingIRQ>
}
 8002d32:	bf00      	nop
 8002d34:	3708      	adds	r7, #8
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
	...

08002d3c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b084      	sub	sp, #16
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d101      	bne.n	8002d4e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e08e      	b.n	8002e6c <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	461a      	mov	r2, r3
 8002d54:	4b47      	ldr	r3, [pc, #284]	@ (8002e74 <HAL_DMA_Init+0x138>)
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d80f      	bhi.n	8002d7a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	461a      	mov	r2, r3
 8002d60:	4b45      	ldr	r3, [pc, #276]	@ (8002e78 <HAL_DMA_Init+0x13c>)
 8002d62:	4413      	add	r3, r2
 8002d64:	4a45      	ldr	r2, [pc, #276]	@ (8002e7c <HAL_DMA_Init+0x140>)
 8002d66:	fba2 2303 	umull	r2, r3, r2, r3
 8002d6a:	091b      	lsrs	r3, r3, #4
 8002d6c:	009a      	lsls	r2, r3, #2
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4a42      	ldr	r2, [pc, #264]	@ (8002e80 <HAL_DMA_Init+0x144>)
 8002d76:	641a      	str	r2, [r3, #64]	@ 0x40
 8002d78:	e00e      	b.n	8002d98 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	461a      	mov	r2, r3
 8002d80:	4b40      	ldr	r3, [pc, #256]	@ (8002e84 <HAL_DMA_Init+0x148>)
 8002d82:	4413      	add	r3, r2
 8002d84:	4a3d      	ldr	r2, [pc, #244]	@ (8002e7c <HAL_DMA_Init+0x140>)
 8002d86:	fba2 2303 	umull	r2, r3, r2, r3
 8002d8a:	091b      	lsrs	r3, r3, #4
 8002d8c:	009a      	lsls	r2, r3, #2
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	4a3c      	ldr	r2, [pc, #240]	@ (8002e88 <HAL_DMA_Init+0x14c>)
 8002d96:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2202      	movs	r2, #2
 8002d9c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002dae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002db2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002dbc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	691b      	ldr	r3, [r3, #16]
 8002dc2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002dc8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	699b      	ldr	r3, [r3, #24]
 8002dce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dd4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6a1b      	ldr	r3, [r3, #32]
 8002dda:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002ddc:	68fa      	ldr	r2, [r7, #12]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	68fa      	ldr	r2, [r7, #12]
 8002de8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f000 fa74 	bl	80032d8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002df8:	d102      	bne.n	8002e00 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	685a      	ldr	r2, [r3, #4]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e08:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8002e0c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002e16:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d010      	beq.n	8002e42 <HAL_DMA_Init+0x106>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	2b04      	cmp	r3, #4
 8002e26:	d80c      	bhi.n	8002e42 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002e28:	6878      	ldr	r0, [r7, #4]
 8002e2a:	f000 fa93 	bl	8003354 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e32:	2200      	movs	r2, #0
 8002e34:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002e3e:	605a      	str	r2, [r3, #4]
 8002e40:	e008      	b.n	8002e54 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2200      	movs	r2, #0
 8002e46:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2200      	movs	r2, #0
 8002e58:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002e6a:	2300      	movs	r3, #0
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3710      	adds	r7, #16
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}
 8002e74:	40020407 	.word	0x40020407
 8002e78:	bffdfff8 	.word	0xbffdfff8
 8002e7c:	cccccccd 	.word	0xcccccccd
 8002e80:	40020000 	.word	0x40020000
 8002e84:	bffdfbf8 	.word	0xbffdfbf8
 8002e88:	40020400 	.word	0x40020400

08002e8c <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b086      	sub	sp, #24
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	60f8      	str	r0, [r7, #12]
 8002e94:	60b9      	str	r1, [r7, #8]
 8002e96:	607a      	str	r2, [r7, #4]
 8002e98:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d101      	bne.n	8002eac <HAL_DMA_Start_IT+0x20>
 8002ea8:	2302      	movs	r3, #2
 8002eaa:	e066      	b.n	8002f7a <HAL_DMA_Start_IT+0xee>
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d155      	bne.n	8002f6c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2202      	movs	r2, #2
 8002ec4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f022 0201 	bic.w	r2, r2, #1
 8002edc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	687a      	ldr	r2, [r7, #4]
 8002ee2:	68b9      	ldr	r1, [r7, #8]
 8002ee4:	68f8      	ldr	r0, [r7, #12]
 8002ee6:	f000 f9b9 	bl	800325c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d008      	beq.n	8002f04 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f042 020e 	orr.w	r2, r2, #14
 8002f00:	601a      	str	r2, [r3, #0]
 8002f02:	e00f      	b.n	8002f24 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f022 0204 	bic.w	r2, r2, #4
 8002f12:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f042 020a 	orr.w	r2, r2, #10
 8002f22:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d007      	beq.n	8002f42 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f3c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002f40:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d007      	beq.n	8002f5a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f54:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002f58:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f042 0201 	orr.w	r2, r2, #1
 8002f68:	601a      	str	r2, [r3, #0]
 8002f6a:	e005      	b.n	8002f78 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002f74:	2302      	movs	r3, #2
 8002f76:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002f78:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3718      	adds	r7, #24
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}

08002f82 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002f82:	b480      	push	{r7}
 8002f84:	b083      	sub	sp, #12
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d101      	bne.n	8002f94 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e04f      	b.n	8003034 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	d008      	beq.n	8002fb2 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2204      	movs	r2, #4
 8002fa4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e040      	b.n	8003034 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f022 020e 	bic.w	r2, r2, #14
 8002fc0:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fcc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002fd0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f022 0201 	bic.w	r2, r2, #1
 8002fe0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fe6:	f003 021c 	and.w	r2, r3, #28
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fee:	2101      	movs	r1, #1
 8002ff0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ff4:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ffa:	687a      	ldr	r2, [r7, #4]
 8002ffc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002ffe:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003004:	2b00      	cmp	r3, #0
 8003006:	d00c      	beq.n	8003022 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003012:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003016:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800301c:	687a      	ldr	r2, [r7, #4]
 800301e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003020:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2201      	movs	r2, #1
 8003026:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2200      	movs	r2, #0
 800302e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 8003032:	2300      	movs	r3, #0
}
 8003034:	4618      	mov	r0, r3
 8003036:	370c      	adds	r7, #12
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr

08003040 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b084      	sub	sp, #16
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003048:	2300      	movs	r3, #0
 800304a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003052:	b2db      	uxtb	r3, r3
 8003054:	2b02      	cmp	r3, #2
 8003056:	d005      	beq.n	8003064 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2204      	movs	r2, #4
 800305c:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	73fb      	strb	r3, [r7, #15]
 8003062:	e047      	b.n	80030f4 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f022 020e 	bic.w	r2, r2, #14
 8003072:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f022 0201 	bic.w	r2, r2, #1
 8003082:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800308e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003092:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003098:	f003 021c 	and.w	r2, r3, #28
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030a0:	2101      	movs	r1, #1
 80030a2:	fa01 f202 	lsl.w	r2, r1, r2
 80030a6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030ac:	687a      	ldr	r2, [r7, #4]
 80030ae:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80030b0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d00c      	beq.n	80030d4 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030c4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80030c8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80030d2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2201      	movs	r2, #1
 80030d8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2200      	movs	r2, #0
 80030e0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d003      	beq.n	80030f4 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030f0:	6878      	ldr	r0, [r7, #4]
 80030f2:	4798      	blx	r3
    }
  }
  return status;
 80030f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3710      	adds	r7, #16
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}

080030fe <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80030fe:	b580      	push	{r7, lr}
 8003100:	b084      	sub	sp, #16
 8003102:	af00      	add	r7, sp, #0
 8003104:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800311a:	f003 031c 	and.w	r3, r3, #28
 800311e:	2204      	movs	r2, #4
 8003120:	409a      	lsls	r2, r3
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	4013      	ands	r3, r2
 8003126:	2b00      	cmp	r3, #0
 8003128:	d026      	beq.n	8003178 <HAL_DMA_IRQHandler+0x7a>
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	f003 0304 	and.w	r3, r3, #4
 8003130:	2b00      	cmp	r3, #0
 8003132:	d021      	beq.n	8003178 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 0320 	and.w	r3, r3, #32
 800313e:	2b00      	cmp	r3, #0
 8003140:	d107      	bne.n	8003152 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f022 0204 	bic.w	r2, r2, #4
 8003150:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003156:	f003 021c 	and.w	r2, r3, #28
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800315e:	2104      	movs	r1, #4
 8003160:	fa01 f202 	lsl.w	r2, r1, r2
 8003164:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800316a:	2b00      	cmp	r3, #0
 800316c:	d071      	beq.n	8003252 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003176:	e06c      	b.n	8003252 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800317c:	f003 031c 	and.w	r3, r3, #28
 8003180:	2202      	movs	r2, #2
 8003182:	409a      	lsls	r2, r3
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	4013      	ands	r3, r2
 8003188:	2b00      	cmp	r3, #0
 800318a:	d02e      	beq.n	80031ea <HAL_DMA_IRQHandler+0xec>
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	f003 0302 	and.w	r3, r3, #2
 8003192:	2b00      	cmp	r3, #0
 8003194:	d029      	beq.n	80031ea <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 0320 	and.w	r3, r3, #32
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d10b      	bne.n	80031bc <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f022 020a 	bic.w	r2, r2, #10
 80031b2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2201      	movs	r2, #1
 80031b8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031c0:	f003 021c 	and.w	r2, r3, #28
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031c8:	2102      	movs	r1, #2
 80031ca:	fa01 f202 	lsl.w	r2, r1, r2
 80031ce:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2200      	movs	r2, #0
 80031d4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d038      	beq.n	8003252 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80031e8:	e033      	b.n	8003252 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031ee:	f003 031c 	and.w	r3, r3, #28
 80031f2:	2208      	movs	r2, #8
 80031f4:	409a      	lsls	r2, r3
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	4013      	ands	r3, r2
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d02a      	beq.n	8003254 <HAL_DMA_IRQHandler+0x156>
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	f003 0308 	and.w	r3, r3, #8
 8003204:	2b00      	cmp	r3, #0
 8003206:	d025      	beq.n	8003254 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f022 020e 	bic.w	r2, r2, #14
 8003216:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800321c:	f003 021c 	and.w	r2, r3, #28
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003224:	2101      	movs	r1, #1
 8003226:	fa01 f202 	lsl.w	r2, r1, r2
 800322a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2201      	movs	r2, #1
 8003230:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2201      	movs	r2, #1
 8003236:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2200      	movs	r2, #0
 800323e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003246:	2b00      	cmp	r3, #0
 8003248:	d004      	beq.n	8003254 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003252:	bf00      	nop
 8003254:	bf00      	nop
}
 8003256:	3710      	adds	r7, #16
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}

0800325c <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800325c:	b480      	push	{r7}
 800325e:	b085      	sub	sp, #20
 8003260:	af00      	add	r7, sp, #0
 8003262:	60f8      	str	r0, [r7, #12]
 8003264:	60b9      	str	r1, [r7, #8]
 8003266:	607a      	str	r2, [r7, #4]
 8003268:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800326e:	68fa      	ldr	r2, [r7, #12]
 8003270:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003272:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003278:	2b00      	cmp	r3, #0
 800327a:	d004      	beq.n	8003286 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003280:	68fa      	ldr	r2, [r7, #12]
 8003282:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003284:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800328a:	f003 021c 	and.w	r2, r3, #28
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003292:	2101      	movs	r1, #1
 8003294:	fa01 f202 	lsl.w	r2, r1, r2
 8003298:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	683a      	ldr	r2, [r7, #0]
 80032a0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	2b10      	cmp	r3, #16
 80032a8:	d108      	bne.n	80032bc <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	68ba      	ldr	r2, [r7, #8]
 80032b8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80032ba:	e007      	b.n	80032cc <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	68ba      	ldr	r2, [r7, #8]
 80032c2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	687a      	ldr	r2, [r7, #4]
 80032ca:	60da      	str	r2, [r3, #12]
}
 80032cc:	bf00      	nop
 80032ce:	3714      	adds	r7, #20
 80032d0:	46bd      	mov	sp, r7
 80032d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d6:	4770      	bx	lr

080032d8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80032d8:	b480      	push	{r7}
 80032da:	b085      	sub	sp, #20
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	461a      	mov	r2, r3
 80032e6:	4b17      	ldr	r3, [pc, #92]	@ (8003344 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d80a      	bhi.n	8003302 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032f0:	089b      	lsrs	r3, r3, #2
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80032f8:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 80032fc:	687a      	ldr	r2, [r7, #4]
 80032fe:	6493      	str	r3, [r2, #72]	@ 0x48
 8003300:	e007      	b.n	8003312 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003306:	089b      	lsrs	r3, r3, #2
 8003308:	009a      	lsls	r2, r3, #2
 800330a:	4b0f      	ldr	r3, [pc, #60]	@ (8003348 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800330c:	4413      	add	r3, r2
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	6493      	str	r3, [r2, #72]	@ 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	b2db      	uxtb	r3, r3
 8003318:	3b08      	subs	r3, #8
 800331a:	4a0c      	ldr	r2, [pc, #48]	@ (800334c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800331c:	fba2 2303 	umull	r2, r3, r2, r3
 8003320:	091b      	lsrs	r3, r3, #4
 8003322:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	4a0a      	ldr	r2, [pc, #40]	@ (8003350 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003328:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	f003 031f 	and.w	r3, r3, #31
 8003330:	2201      	movs	r2, #1
 8003332:	409a      	lsls	r2, r3
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003338:	bf00      	nop
 800333a:	3714      	adds	r7, #20
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr
 8003344:	40020407 	.word	0x40020407
 8003348:	4002081c 	.word	0x4002081c
 800334c:	cccccccd 	.word	0xcccccccd
 8003350:	40020880 	.word	0x40020880

08003354 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003354:	b480      	push	{r7}
 8003356:	b085      	sub	sp, #20
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003364:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003366:	68fa      	ldr	r2, [r7, #12]
 8003368:	4b0b      	ldr	r3, [pc, #44]	@ (8003398 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800336a:	4413      	add	r3, r2
 800336c:	009b      	lsls	r3, r3, #2
 800336e:	461a      	mov	r2, r3
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	4a09      	ldr	r2, [pc, #36]	@ (800339c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8003378:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	3b01      	subs	r3, #1
 800337e:	f003 0303 	and.w	r3, r3, #3
 8003382:	2201      	movs	r2, #1
 8003384:	409a      	lsls	r2, r3
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800338a:	bf00      	nop
 800338c:	3714      	adds	r7, #20
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr
 8003396:	bf00      	nop
 8003398:	1000823f 	.word	0x1000823f
 800339c:	40020940 	.word	0x40020940

080033a0 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b087      	sub	sp, #28
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80033aa:	2300      	movs	r3, #0
 80033ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033ae:	e14c      	b.n	800364a <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	2101      	movs	r1, #1
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	fa01 f303 	lsl.w	r3, r1, r3
 80033bc:	4013      	ands	r3, r2
 80033be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	f000 813e 	beq.w	8003644 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	f003 0303 	and.w	r3, r3, #3
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d005      	beq.n	80033e0 <HAL_GPIO_Init+0x40>
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	f003 0303 	and.w	r3, r3, #3
 80033dc:	2b02      	cmp	r3, #2
 80033de:	d130      	bne.n	8003442 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	005b      	lsls	r3, r3, #1
 80033ea:	2203      	movs	r2, #3
 80033ec:	fa02 f303 	lsl.w	r3, r2, r3
 80033f0:	43db      	mvns	r3, r3
 80033f2:	693a      	ldr	r2, [r7, #16]
 80033f4:	4013      	ands	r3, r2
 80033f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	68da      	ldr	r2, [r3, #12]
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	005b      	lsls	r3, r3, #1
 8003400:	fa02 f303 	lsl.w	r3, r2, r3
 8003404:	693a      	ldr	r2, [r7, #16]
 8003406:	4313      	orrs	r3, r2
 8003408:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	693a      	ldr	r2, [r7, #16]
 800340e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003416:	2201      	movs	r2, #1
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	fa02 f303 	lsl.w	r3, r2, r3
 800341e:	43db      	mvns	r3, r3
 8003420:	693a      	ldr	r2, [r7, #16]
 8003422:	4013      	ands	r3, r2
 8003424:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	091b      	lsrs	r3, r3, #4
 800342c:	f003 0201 	and.w	r2, r3, #1
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	fa02 f303 	lsl.w	r3, r2, r3
 8003436:	693a      	ldr	r2, [r7, #16]
 8003438:	4313      	orrs	r3, r2
 800343a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	693a      	ldr	r2, [r7, #16]
 8003440:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	f003 0303 	and.w	r3, r3, #3
 800344a:	2b03      	cmp	r3, #3
 800344c:	d017      	beq.n	800347e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	68db      	ldr	r3, [r3, #12]
 8003452:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	005b      	lsls	r3, r3, #1
 8003458:	2203      	movs	r2, #3
 800345a:	fa02 f303 	lsl.w	r3, r2, r3
 800345e:	43db      	mvns	r3, r3
 8003460:	693a      	ldr	r2, [r7, #16]
 8003462:	4013      	ands	r3, r2
 8003464:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	689a      	ldr	r2, [r3, #8]
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	005b      	lsls	r3, r3, #1
 800346e:	fa02 f303 	lsl.w	r3, r2, r3
 8003472:	693a      	ldr	r2, [r7, #16]
 8003474:	4313      	orrs	r3, r2
 8003476:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	693a      	ldr	r2, [r7, #16]
 800347c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	f003 0303 	and.w	r3, r3, #3
 8003486:	2b02      	cmp	r3, #2
 8003488:	d123      	bne.n	80034d2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	08da      	lsrs	r2, r3, #3
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	3208      	adds	r2, #8
 8003492:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003496:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	f003 0307 	and.w	r3, r3, #7
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	220f      	movs	r2, #15
 80034a2:	fa02 f303 	lsl.w	r3, r2, r3
 80034a6:	43db      	mvns	r3, r3
 80034a8:	693a      	ldr	r2, [r7, #16]
 80034aa:	4013      	ands	r3, r2
 80034ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	691a      	ldr	r2, [r3, #16]
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	f003 0307 	and.w	r3, r3, #7
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	fa02 f303 	lsl.w	r3, r2, r3
 80034be:	693a      	ldr	r2, [r7, #16]
 80034c0:	4313      	orrs	r3, r2
 80034c2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	08da      	lsrs	r2, r3, #3
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	3208      	adds	r2, #8
 80034cc:	6939      	ldr	r1, [r7, #16]
 80034ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	005b      	lsls	r3, r3, #1
 80034dc:	2203      	movs	r2, #3
 80034de:	fa02 f303 	lsl.w	r3, r2, r3
 80034e2:	43db      	mvns	r3, r3
 80034e4:	693a      	ldr	r2, [r7, #16]
 80034e6:	4013      	ands	r3, r2
 80034e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	f003 0203 	and.w	r2, r3, #3
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	005b      	lsls	r3, r3, #1
 80034f6:	fa02 f303 	lsl.w	r3, r2, r3
 80034fa:	693a      	ldr	r2, [r7, #16]
 80034fc:	4313      	orrs	r3, r2
 80034fe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	693a      	ldr	r2, [r7, #16]
 8003504:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800350e:	2b00      	cmp	r3, #0
 8003510:	f000 8098 	beq.w	8003644 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8003514:	4a54      	ldr	r2, [pc, #336]	@ (8003668 <HAL_GPIO_Init+0x2c8>)
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	089b      	lsrs	r3, r3, #2
 800351a:	3302      	adds	r3, #2
 800351c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003520:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	f003 0303 	and.w	r3, r3, #3
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	220f      	movs	r2, #15
 800352c:	fa02 f303 	lsl.w	r3, r2, r3
 8003530:	43db      	mvns	r3, r3
 8003532:	693a      	ldr	r2, [r7, #16]
 8003534:	4013      	ands	r3, r2
 8003536:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800353e:	d019      	beq.n	8003574 <HAL_GPIO_Init+0x1d4>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	4a4a      	ldr	r2, [pc, #296]	@ (800366c <HAL_GPIO_Init+0x2cc>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d013      	beq.n	8003570 <HAL_GPIO_Init+0x1d0>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	4a49      	ldr	r2, [pc, #292]	@ (8003670 <HAL_GPIO_Init+0x2d0>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d00d      	beq.n	800356c <HAL_GPIO_Init+0x1cc>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	4a48      	ldr	r2, [pc, #288]	@ (8003674 <HAL_GPIO_Init+0x2d4>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d007      	beq.n	8003568 <HAL_GPIO_Init+0x1c8>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	4a47      	ldr	r2, [pc, #284]	@ (8003678 <HAL_GPIO_Init+0x2d8>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d101      	bne.n	8003564 <HAL_GPIO_Init+0x1c4>
 8003560:	2304      	movs	r3, #4
 8003562:	e008      	b.n	8003576 <HAL_GPIO_Init+0x1d6>
 8003564:	2307      	movs	r3, #7
 8003566:	e006      	b.n	8003576 <HAL_GPIO_Init+0x1d6>
 8003568:	2303      	movs	r3, #3
 800356a:	e004      	b.n	8003576 <HAL_GPIO_Init+0x1d6>
 800356c:	2302      	movs	r3, #2
 800356e:	e002      	b.n	8003576 <HAL_GPIO_Init+0x1d6>
 8003570:	2301      	movs	r3, #1
 8003572:	e000      	b.n	8003576 <HAL_GPIO_Init+0x1d6>
 8003574:	2300      	movs	r3, #0
 8003576:	697a      	ldr	r2, [r7, #20]
 8003578:	f002 0203 	and.w	r2, r2, #3
 800357c:	0092      	lsls	r2, r2, #2
 800357e:	4093      	lsls	r3, r2
 8003580:	693a      	ldr	r2, [r7, #16]
 8003582:	4313      	orrs	r3, r2
 8003584:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003586:	4938      	ldr	r1, [pc, #224]	@ (8003668 <HAL_GPIO_Init+0x2c8>)
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	089b      	lsrs	r3, r3, #2
 800358c:	3302      	adds	r3, #2
 800358e:	693a      	ldr	r2, [r7, #16]
 8003590:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003594:	4b39      	ldr	r3, [pc, #228]	@ (800367c <HAL_GPIO_Init+0x2dc>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	43db      	mvns	r3, r3
 800359e:	693a      	ldr	r2, [r7, #16]
 80035a0:	4013      	ands	r3, r2
 80035a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d003      	beq.n	80035b8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80035b0:	693a      	ldr	r2, [r7, #16]
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	4313      	orrs	r3, r2
 80035b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80035b8:	4a30      	ldr	r2, [pc, #192]	@ (800367c <HAL_GPIO_Init+0x2dc>)
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80035be:	4b2f      	ldr	r3, [pc, #188]	@ (800367c <HAL_GPIO_Init+0x2dc>)
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	43db      	mvns	r3, r3
 80035c8:	693a      	ldr	r2, [r7, #16]
 80035ca:	4013      	ands	r3, r2
 80035cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d003      	beq.n	80035e2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80035da:	693a      	ldr	r2, [r7, #16]
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	4313      	orrs	r3, r2
 80035e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80035e2:	4a26      	ldr	r2, [pc, #152]	@ (800367c <HAL_GPIO_Init+0x2dc>)
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80035e8:	4b24      	ldr	r3, [pc, #144]	@ (800367c <HAL_GPIO_Init+0x2dc>)
 80035ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80035ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	43db      	mvns	r3, r3
 80035f4:	693a      	ldr	r2, [r7, #16]
 80035f6:	4013      	ands	r3, r2
 80035f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003602:	2b00      	cmp	r3, #0
 8003604:	d003      	beq.n	800360e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8003606:	693a      	ldr	r2, [r7, #16]
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	4313      	orrs	r3, r2
 800360c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800360e:	4a1b      	ldr	r2, [pc, #108]	@ (800367c <HAL_GPIO_Init+0x2dc>)
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 8003616:	4b19      	ldr	r3, [pc, #100]	@ (800367c <HAL_GPIO_Init+0x2dc>)
 8003618:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800361c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	43db      	mvns	r3, r3
 8003622:	693a      	ldr	r2, [r7, #16]
 8003624:	4013      	ands	r3, r2
 8003626:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003630:	2b00      	cmp	r3, #0
 8003632:	d003      	beq.n	800363c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8003634:	693a      	ldr	r2, [r7, #16]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	4313      	orrs	r3, r2
 800363a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800363c:	4a0f      	ldr	r2, [pc, #60]	@ (800367c <HAL_GPIO_Init+0x2dc>)
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	3301      	adds	r3, #1
 8003648:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	fa22 f303 	lsr.w	r3, r2, r3
 8003654:	2b00      	cmp	r3, #0
 8003656:	f47f aeab 	bne.w	80033b0 <HAL_GPIO_Init+0x10>
  }
}
 800365a:	bf00      	nop
 800365c:	bf00      	nop
 800365e:	371c      	adds	r7, #28
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr
 8003668:	40010000 	.word	0x40010000
 800366c:	48000400 	.word	0x48000400
 8003670:	48000800 	.word	0x48000800
 8003674:	48000c00 	.word	0x48000c00
 8003678:	48001000 	.word	0x48001000
 800367c:	58000800 	.word	0x58000800

08003680 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003680:	b480      	push	{r7}
 8003682:	b083      	sub	sp, #12
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
 8003688:	460b      	mov	r3, r1
 800368a:	807b      	strh	r3, [r7, #2]
 800368c:	4613      	mov	r3, r2
 800368e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003690:	787b      	ldrb	r3, [r7, #1]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d003      	beq.n	800369e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003696:	887a      	ldrh	r2, [r7, #2]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800369c:	e002      	b.n	80036a4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800369e:	887a      	ldrh	r2, [r7, #2]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80036a4:	bf00      	nop
 80036a6:	370c      	adds	r7, #12
 80036a8:	46bd      	mov	sp, r7
 80036aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ae:	4770      	bx	lr

080036b0 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b082      	sub	sp, #8
 80036b4:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 80036b6:	4b0a      	ldr	r3, [pc, #40]	@ (80036e0 <HAL_HSEM_IRQHandler+0x30>)
 80036b8:	68db      	ldr	r3, [r3, #12]
 80036ba:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 80036bc:	4b08      	ldr	r3, [pc, #32]	@ (80036e0 <HAL_HSEM_IRQHandler+0x30>)
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	43db      	mvns	r3, r3
 80036c4:	4906      	ldr	r1, [pc, #24]	@ (80036e0 <HAL_HSEM_IRQHandler+0x30>)
 80036c6:	4013      	ands	r3, r2
 80036c8:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 80036ca:	4a05      	ldr	r2, [pc, #20]	@ (80036e0 <HAL_HSEM_IRQHandler+0x30>)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f000 f807 	bl	80036e4 <HAL_HSEM_FreeCallback>
}
 80036d6:	bf00      	nop
 80036d8:	3708      	adds	r7, #8
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	bf00      	nop
 80036e0:	58001500 	.word	0x58001500

080036e4 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b083      	sub	sp, #12
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 80036ec:	bf00      	nop
 80036ee:	370c      	adds	r7, #12
 80036f0:	46bd      	mov	sp, r7
 80036f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f6:	4770      	bx	lr

080036f8 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b084      	sub	sp, #16
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8003700:	2300      	movs	r3, #0
 8003702:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d01e      	beq.n	8003748 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 800370a:	4b13      	ldr	r3, [pc, #76]	@ (8003758 <HAL_IPCC_Init+0x60>)
 800370c:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003714:	b2db      	uxtb	r3, r3
 8003716:	2b00      	cmp	r3, #0
 8003718:	d102      	bne.n	8003720 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f7fe fed6 	bl	80024cc <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8003720:	68b8      	ldr	r0, [r7, #8]
 8003722:	f000 f85b 	bl	80037dc <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f043 1201 	orr.w	r2, r3, #65537	@ 0x10001
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f000 f82c 	bl	8003790 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2200      	movs	r2, #0
 800373c:	635a      	str	r2, [r3, #52]	@ 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2201      	movs	r2, #1
 8003742:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 8003746:	e001      	b.n	800374c <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 800374c:	7bfb      	ldrb	r3, [r7, #15]
}
 800374e:	4618      	mov	r0, r3
 8003750:	3710      	adds	r7, #16
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
 8003756:	bf00      	nop
 8003758:	58000c00 	.word	0x58000c00

0800375c <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 800375c:	b480      	push	{r7}
 800375e:	b085      	sub	sp, #20
 8003760:	af00      	add	r7, sp, #0
 8003762:	60f8      	str	r0, [r7, #12]
 8003764:	60b9      	str	r1, [r7, #8]
 8003766:	4613      	mov	r3, r2
 8003768:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 800376a:	bf00      	nop
 800376c:	3714      	adds	r7, #20
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr

08003776 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8003776:	b480      	push	{r7}
 8003778:	b085      	sub	sp, #20
 800377a:	af00      	add	r7, sp, #0
 800377c:	60f8      	str	r0, [r7, #12]
 800377e:	60b9      	str	r1, [r7, #8]
 8003780:	4613      	mov	r3, r2
 8003782:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8003784:	bf00      	nop
 8003786:	3714      	adds	r7, #20
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr

08003790 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8003790:	b480      	push	{r7}
 8003792:	b085      	sub	sp, #20
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8003798:	2300      	movs	r3, #0
 800379a:	60fb      	str	r3, [r7, #12]
 800379c:	e00f      	b.n	80037be <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	4413      	add	r3, r2
 80037a6:	4a0b      	ldr	r2, [pc, #44]	@ (80037d4 <IPCC_SetDefaultCallbacks+0x44>)
 80037a8:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 80037aa:	687a      	ldr	r2, [r7, #4]
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	3306      	adds	r3, #6
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	4413      	add	r3, r2
 80037b4:	4a08      	ldr	r2, [pc, #32]	@ (80037d8 <IPCC_SetDefaultCallbacks+0x48>)
 80037b6:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	3301      	adds	r3, #1
 80037bc:	60fb      	str	r3, [r7, #12]
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2b05      	cmp	r3, #5
 80037c2:	d9ec      	bls.n	800379e <IPCC_SetDefaultCallbacks+0xe>
  }
}
 80037c4:	bf00      	nop
 80037c6:	bf00      	nop
 80037c8:	3714      	adds	r7, #20
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr
 80037d2:	bf00      	nop
 80037d4:	0800375d 	.word	0x0800375d
 80037d8:	08003777 	.word	0x08003777

080037dc <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 80037dc:	b480      	push	{r7}
 80037de:	b083      	sub	sp, #12
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	f04f 123f 	mov.w	r2, #4128831	@ 0x3f003f
 80037f0:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	223f      	movs	r2, #63	@ 0x3f
 80037f6:	609a      	str	r2, [r3, #8]
}
 80037f8:	bf00      	nop
 80037fa:	370c      	adds	r7, #12
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr

08003804 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003804:	b480      	push	{r7}
 8003806:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003808:	4b05      	ldr	r3, [pc, #20]	@ (8003820 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a04      	ldr	r2, [pc, #16]	@ (8003820 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800380e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003812:	6013      	str	r3, [r2, #0]
}
 8003814:	bf00      	nop
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr
 800381e:	bf00      	nop
 8003820:	58000400 	.word	0x58000400

08003824 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003824:	b480      	push	{r7}
 8003826:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8003828:	4b04      	ldr	r3, [pc, #16]	@ (800383c <HAL_PWREx_GetVoltageRange+0x18>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8003830:	4618      	mov	r0, r3
 8003832:	46bd      	mov	sp, r7
 8003834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003838:	4770      	bx	lr
 800383a:	bf00      	nop
 800383c:	58000400 	.word	0x58000400

08003840 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8003840:	b480      	push	{r7}
 8003842:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8003844:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800384e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003852:	d101      	bne.n	8003858 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8003854:	2301      	movs	r3, #1
 8003856:	e000      	b.n	800385a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8003858:	2300      	movs	r3, #0
}
 800385a:	4618      	mov	r0, r3
 800385c:	46bd      	mov	sp, r7
 800385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003862:	4770      	bx	lr

08003864 <LL_RCC_HSE_Enable>:
{
 8003864:	b480      	push	{r7}
 8003866:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8003868:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003872:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003876:	6013      	str	r3, [r2, #0]
}
 8003878:	bf00      	nop
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr

08003882 <LL_RCC_HSE_Disable>:
{
 8003882:	b480      	push	{r7}
 8003884:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8003886:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003890:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003894:	6013      	str	r3, [r2, #0]
}
 8003896:	bf00      	nop
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr

080038a0 <LL_RCC_HSE_IsReady>:
{
 80038a0:	b480      	push	{r7}
 80038a2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80038a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038ae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80038b2:	d101      	bne.n	80038b8 <LL_RCC_HSE_IsReady+0x18>
 80038b4:	2301      	movs	r3, #1
 80038b6:	e000      	b.n	80038ba <LL_RCC_HSE_IsReady+0x1a>
 80038b8:	2300      	movs	r3, #0
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr

080038c4 <LL_RCC_HSI_Enable>:
{
 80038c4:	b480      	push	{r7}
 80038c6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80038c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80038d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038d6:	6013      	str	r3, [r2, #0]
}
 80038d8:	bf00      	nop
 80038da:	46bd      	mov	sp, r7
 80038dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e0:	4770      	bx	lr

080038e2 <LL_RCC_HSI_Disable>:
{
 80038e2:	b480      	push	{r7}
 80038e4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80038e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80038f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80038f4:	6013      	str	r3, [r2, #0]
}
 80038f6:	bf00      	nop
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr

08003900 <LL_RCC_HSI_IsReady>:
{
 8003900:	b480      	push	{r7}
 8003902:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003904:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800390e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003912:	d101      	bne.n	8003918 <LL_RCC_HSI_IsReady+0x18>
 8003914:	2301      	movs	r3, #1
 8003916:	e000      	b.n	800391a <LL_RCC_HSI_IsReady+0x1a>
 8003918:	2300      	movs	r3, #0
}
 800391a:	4618      	mov	r0, r3
 800391c:	46bd      	mov	sp, r7
 800391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003922:	4770      	bx	lr

08003924 <LL_RCC_HSI_SetCalibTrimming>:
{
 8003924:	b480      	push	{r7}
 8003926:	b083      	sub	sp, #12
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800392c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	061b      	lsls	r3, r3, #24
 800393a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800393e:	4313      	orrs	r3, r2
 8003940:	604b      	str	r3, [r1, #4]
}
 8003942:	bf00      	nop
 8003944:	370c      	adds	r7, #12
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr

0800394e <LL_RCC_HSI48_Enable>:
{
 800394e:	b480      	push	{r7}
 8003950:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003952:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003956:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800395a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800395e:	f043 0301 	orr.w	r3, r3, #1
 8003962:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8003966:	bf00      	nop
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr

08003970 <LL_RCC_HSI48_Disable>:
{
 8003970:	b480      	push	{r7}
 8003972:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003974:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003978:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800397c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003980:	f023 0301 	bic.w	r3, r3, #1
 8003984:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8003988:	bf00      	nop
 800398a:	46bd      	mov	sp, r7
 800398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003990:	4770      	bx	lr

08003992 <LL_RCC_HSI48_IsReady>:
{
 8003992:	b480      	push	{r7}
 8003994:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8003996:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800399a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800399e:	f003 0302 	and.w	r3, r3, #2
 80039a2:	2b02      	cmp	r3, #2
 80039a4:	d101      	bne.n	80039aa <LL_RCC_HSI48_IsReady+0x18>
 80039a6:	2301      	movs	r3, #1
 80039a8:	e000      	b.n	80039ac <LL_RCC_HSI48_IsReady+0x1a>
 80039aa:	2300      	movs	r3, #0
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr

080039b6 <LL_RCC_LSE_Enable>:
{
 80039b6:	b480      	push	{r7}
 80039b8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80039ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80039be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039c2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80039c6:	f043 0301 	orr.w	r3, r3, #1
 80039ca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80039ce:	bf00      	nop
 80039d0:	46bd      	mov	sp, r7
 80039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d6:	4770      	bx	lr

080039d8 <LL_RCC_LSE_Disable>:
{
 80039d8:	b480      	push	{r7}
 80039da:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80039dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80039e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039e4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80039e8:	f023 0301 	bic.w	r3, r3, #1
 80039ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80039f0:	bf00      	nop
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr

080039fa <LL_RCC_LSE_EnableBypass>:
{
 80039fa:	b480      	push	{r7}
 80039fc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80039fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a06:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003a0a:	f043 0304 	orr.w	r3, r3, #4
 8003a0e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003a12:	bf00      	nop
 8003a14:	46bd      	mov	sp, r7
 8003a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1a:	4770      	bx	lr

08003a1c <LL_RCC_LSE_DisableBypass>:
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003a20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a28:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003a2c:	f023 0304 	bic.w	r3, r3, #4
 8003a30:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003a34:	bf00      	nop
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr

08003a3e <LL_RCC_LSE_IsReady>:
{
 8003a3e:	b480      	push	{r7}
 8003a40:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003a42:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a4a:	f003 0302 	and.w	r3, r3, #2
 8003a4e:	2b02      	cmp	r3, #2
 8003a50:	d101      	bne.n	8003a56 <LL_RCC_LSE_IsReady+0x18>
 8003a52:	2301      	movs	r3, #1
 8003a54:	e000      	b.n	8003a58 <LL_RCC_LSE_IsReady+0x1a>
 8003a56:	2300      	movs	r3, #0
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr

08003a62 <LL_RCC_LSI1_Enable>:
{
 8003a62:	b480      	push	{r7}
 8003a64:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003a66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a6e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003a72:	f043 0301 	orr.w	r3, r3, #1
 8003a76:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8003a7a:	bf00      	nop
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr

08003a84 <LL_RCC_LSI1_Disable>:
{
 8003a84:	b480      	push	{r7}
 8003a86:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003a88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a90:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003a94:	f023 0301 	bic.w	r3, r3, #1
 8003a98:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8003a9c:	bf00      	nop
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa4:	4770      	bx	lr

08003aa6 <LL_RCC_LSI1_IsReady>:
{
 8003aa6:	b480      	push	{r7}
 8003aa8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8003aaa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003aae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ab2:	f003 0302 	and.w	r3, r3, #2
 8003ab6:	2b02      	cmp	r3, #2
 8003ab8:	d101      	bne.n	8003abe <LL_RCC_LSI1_IsReady+0x18>
 8003aba:	2301      	movs	r3, #1
 8003abc:	e000      	b.n	8003ac0 <LL_RCC_LSI1_IsReady+0x1a>
 8003abe:	2300      	movs	r3, #0
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr

08003aca <LL_RCC_LSI2_Enable>:
{
 8003aca:	b480      	push	{r7}
 8003acc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003ace:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ad2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ad6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003ada:	f043 0304 	orr.w	r3, r3, #4
 8003ade:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8003ae2:	bf00      	nop
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aea:	4770      	bx	lr

08003aec <LL_RCC_LSI2_Disable>:
{
 8003aec:	b480      	push	{r7}
 8003aee:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003af0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003af4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003af8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003afc:	f023 0304 	bic.w	r3, r3, #4
 8003b00:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8003b04:	bf00      	nop
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr

08003b0e <LL_RCC_LSI2_IsReady>:
{
 8003b0e:	b480      	push	{r7}
 8003b10:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8003b12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b16:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b1a:	f003 0308 	and.w	r3, r3, #8
 8003b1e:	2b08      	cmp	r3, #8
 8003b20:	d101      	bne.n	8003b26 <LL_RCC_LSI2_IsReady+0x18>
 8003b22:	2301      	movs	r3, #1
 8003b24:	e000      	b.n	8003b28 <LL_RCC_LSI2_IsReady+0x1a>
 8003b26:	2300      	movs	r3, #0
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr

08003b32 <LL_RCC_LSI2_SetTrimming>:
{
 8003b32:	b480      	push	{r7}
 8003b34:	b083      	sub	sp, #12
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8003b3a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b42:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	021b      	lsls	r3, r3, #8
 8003b4a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8003b54:	bf00      	nop
 8003b56:	370c      	adds	r7, #12
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr

08003b60 <LL_RCC_MSI_Enable>:
{
 8003b60:	b480      	push	{r7}
 8003b62:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8003b64:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003b6e:	f043 0301 	orr.w	r3, r3, #1
 8003b72:	6013      	str	r3, [r2, #0]
}
 8003b74:	bf00      	nop
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr

08003b7e <LL_RCC_MSI_Disable>:
{
 8003b7e:	b480      	push	{r7}
 8003b80:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8003b82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003b8c:	f023 0301 	bic.w	r3, r3, #1
 8003b90:	6013      	str	r3, [r2, #0]
}
 8003b92:	bf00      	nop
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr

08003b9c <LL_RCC_MSI_IsReady>:
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8003ba0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 0302 	and.w	r3, r3, #2
 8003baa:	2b02      	cmp	r3, #2
 8003bac:	d101      	bne.n	8003bb2 <LL_RCC_MSI_IsReady+0x16>
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e000      	b.n	8003bb4 <LL_RCC_MSI_IsReady+0x18>
 8003bb2:	2300      	movs	r3, #0
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr

08003bbe <LL_RCC_MSI_SetRange>:
{
 8003bbe:	b480      	push	{r7}
 8003bc0:	b083      	sub	sp, #12
 8003bc2:	af00      	add	r7, sp, #0
 8003bc4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8003bc6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003bd0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	600b      	str	r3, [r1, #0]
}
 8003bda:	bf00      	nop
 8003bdc:	370c      	adds	r7, #12
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr

08003be6 <LL_RCC_MSI_GetRange>:
{
 8003be6:	b480      	push	{r7}
 8003be8:	b083      	sub	sp, #12
 8003bea:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8003bec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003bf6:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2bb0      	cmp	r3, #176	@ 0xb0
 8003bfc:	d901      	bls.n	8003c02 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8003bfe:	23b0      	movs	r3, #176	@ 0xb0
 8003c00:	607b      	str	r3, [r7, #4]
  return msiRange;
 8003c02:	687b      	ldr	r3, [r7, #4]
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	370c      	adds	r7, #12
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0e:	4770      	bx	lr

08003c10 <LL_RCC_MSI_SetCalibTrimming>:
{
 8003c10:	b480      	push	{r7}
 8003c12:	b083      	sub	sp, #12
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8003c18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	021b      	lsls	r3, r3, #8
 8003c26:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	604b      	str	r3, [r1, #4]
}
 8003c2e:	bf00      	nop
 8003c30:	370c      	adds	r7, #12
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr

08003c3a <LL_RCC_SetSysClkSource>:
{
 8003c3a:	b480      	push	{r7}
 8003c3c:	b083      	sub	sp, #12
 8003c3e:	af00      	add	r7, sp, #0
 8003c40:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8003c42:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	f023 0203 	bic.w	r2, r3, #3
 8003c4c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	4313      	orrs	r3, r2
 8003c54:	608b      	str	r3, [r1, #8]
}
 8003c56:	bf00      	nop
 8003c58:	370c      	adds	r7, #12
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr

08003c62 <LL_RCC_GetSysClkSource>:
{
 8003c62:	b480      	push	{r7}
 8003c64:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003c66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	f003 030c 	and.w	r3, r3, #12
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr

08003c7a <LL_RCC_SetAHBPrescaler>:
{
 8003c7a:	b480      	push	{r7}
 8003c7c:	b083      	sub	sp, #12
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8003c82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c8c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	4313      	orrs	r3, r2
 8003c94:	608b      	str	r3, [r1, #8]
}
 8003c96:	bf00      	nop
 8003c98:	370c      	adds	r7, #12
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca0:	4770      	bx	lr

08003ca2 <LL_C2_RCC_SetAHBPrescaler>:
{
 8003ca2:	b480      	push	{r7}
 8003ca4:	b083      	sub	sp, #12
 8003ca6:	af00      	add	r7, sp, #0
 8003ca8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8003caa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003cae:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8003cb2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003cb6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8003cc2:	bf00      	nop
 8003cc4:	370c      	adds	r7, #12
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ccc:	4770      	bx	lr

08003cce <LL_RCC_SetAHB4Prescaler>:
{
 8003cce:	b480      	push	{r7}
 8003cd0:	b083      	sub	sp, #12
 8003cd2:	af00      	add	r7, sp, #0
 8003cd4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8003cd6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003cda:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8003cde:	f023 020f 	bic.w	r2, r3, #15
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	091b      	lsrs	r3, r3, #4
 8003ce6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003cea:	4313      	orrs	r3, r2
 8003cec:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8003cf0:	bf00      	nop
 8003cf2:	370c      	adds	r7, #12
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr

08003cfc <LL_RCC_SetAPB1Prescaler>:
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b083      	sub	sp, #12
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8003d04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003d0e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	4313      	orrs	r3, r2
 8003d16:	608b      	str	r3, [r1, #8]
}
 8003d18:	bf00      	nop
 8003d1a:	370c      	adds	r7, #12
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr

08003d24 <LL_RCC_SetAPB2Prescaler>:
{
 8003d24:	b480      	push	{r7}
 8003d26:	b083      	sub	sp, #12
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8003d2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003d36:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	608b      	str	r3, [r1, #8]
}
 8003d40:	bf00      	nop
 8003d42:	370c      	adds	r7, #12
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr

08003d4c <LL_RCC_GetAHBPrescaler>:
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003d50:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr

08003d64 <LL_RCC_GetAHB4Prescaler>:
{
 8003d64:	b480      	push	{r7}
 8003d66:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8003d68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d6c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8003d70:	011b      	lsls	r3, r3, #4
 8003d72:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7e:	4770      	bx	lr

08003d80 <LL_RCC_GetAPB1Prescaler>:
{
 8003d80:	b480      	push	{r7}
 8003d82:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003d84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	46bd      	mov	sp, r7
 8003d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d96:	4770      	bx	lr

08003d98 <LL_RCC_GetAPB2Prescaler>:
{
 8003d98:	b480      	push	{r7}
 8003d9a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003d9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr

08003db0 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8003db0:	b480      	push	{r7}
 8003db2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8003db4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003dbe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003dc2:	6013      	str	r3, [r2, #0]
}
 8003dc4:	bf00      	nop
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr

08003dce <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8003dce:	b480      	push	{r7}
 8003dd0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003dd2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003ddc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003de0:	6013      	str	r3, [r2, #0]
}
 8003de2:	bf00      	nop
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr

08003dec <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8003dec:	b480      	push	{r7}
 8003dee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8003df0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dfa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003dfe:	d101      	bne.n	8003e04 <LL_RCC_PLL_IsReady+0x18>
 8003e00:	2301      	movs	r3, #1
 8003e02:	e000      	b.n	8003e06 <LL_RCC_PLL_IsReady+0x1a>
 8003e04:	2300      	movs	r3, #0
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0e:	4770      	bx	lr

08003e10 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8003e10:	b480      	push	{r7}
 8003e12:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003e14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e18:	68db      	ldr	r3, [r3, #12]
 8003e1a:	0a1b      	lsrs	r3, r3, #8
 8003e1c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr

08003e2a <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8003e2a:	b480      	push	{r7}
 8003e2c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8003e2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e32:	68db      	ldr	r3, [r3, #12]
 8003e34:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr

08003e42 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8003e42:	b480      	push	{r7}
 8003e44:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003e46:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e4a:	68db      	ldr	r3, [r3, #12]
 8003e4c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	46bd      	mov	sp, r7
 8003e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e58:	4770      	bx	lr

08003e5a <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8003e5a:	b480      	push	{r7}
 8003e5c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003e5e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e62:	68db      	ldr	r3, [r3, #12]
 8003e64:	f003 0303 	and.w	r3, r3, #3
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e70:	4770      	bx	lr

08003e72 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8003e72:	b480      	push	{r7}
 8003e74:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8003e76:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e84:	d101      	bne.n	8003e8a <LL_RCC_IsActiveFlag_HPRE+0x18>
 8003e86:	2301      	movs	r3, #1
 8003e88:	e000      	b.n	8003e8c <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8003e8a:	2300      	movs	r3, #0
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr

08003e96 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8003e96:	b480      	push	{r7}
 8003e98:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8003e9a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e9e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8003ea2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ea6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003eaa:	d101      	bne.n	8003eb0 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8003eac:	2301      	movs	r3, #1
 8003eae:	e000      	b.n	8003eb2 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8003eb0:	2300      	movs	r3, #0
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr

08003ebc <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8003ec0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ec4:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8003ec8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ecc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ed0:	d101      	bne.n	8003ed6 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e000      	b.n	8003ed8 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8003ed6:	2300      	movs	r3, #0
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr

08003ee2 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8003ee2:	b480      	push	{r7}
 8003ee4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8003ee6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ef0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003ef4:	d101      	bne.n	8003efa <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e000      	b.n	8003efc <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8003efa:	2300      	movs	r3, #0
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr

08003f06 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8003f06:	b480      	push	{r7}
 8003f08:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8003f0a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003f14:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003f18:	d101      	bne.n	8003f1e <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e000      	b.n	8003f20 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8003f1e:	2300      	movs	r3, #0
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr
	...

08003f2c <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f2c:	b590      	push	{r4, r7, lr}
 8003f2e:	b08d      	sub	sp, #52	@ 0x34
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d101      	bne.n	8003f3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e363      	b.n	8004606 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 0320 	and.w	r3, r3, #32
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	f000 808d 	beq.w	8004066 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f4c:	f7ff fe89 	bl	8003c62 <LL_RCC_GetSysClkSource>
 8003f50:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f52:	f7ff ff82 	bl	8003e5a <LL_RCC_PLL_GetMainSource>
 8003f56:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003f58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d005      	beq.n	8003f6a <HAL_RCC_OscConfig+0x3e>
 8003f5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f60:	2b0c      	cmp	r3, #12
 8003f62:	d147      	bne.n	8003ff4 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8003f64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f66:	2b01      	cmp	r3, #1
 8003f68:	d144      	bne.n	8003ff4 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	69db      	ldr	r3, [r3, #28]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d101      	bne.n	8003f76 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e347      	b.n	8004606 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8003f7a:	f7ff fe34 	bl	8003be6 <LL_RCC_MSI_GetRange>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	429c      	cmp	r4, r3
 8003f82:	d914      	bls.n	8003fae <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f000 fd2f 	bl	80049ec <RCC_SetFlashLatencyFromMSIRange>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d001      	beq.n	8003f98 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	e336      	b.n	8004606 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f7ff fe0e 	bl	8003bbe <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6a1b      	ldr	r3, [r3, #32]
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f7ff fe32 	bl	8003c10 <LL_RCC_MSI_SetCalibTrimming>
 8003fac:	e013      	b.n	8003fd6 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f7ff fe03 	bl	8003bbe <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6a1b      	ldr	r3, [r3, #32]
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f7ff fe27 	bl	8003c10 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f000 fd10 	bl	80049ec <RCC_SetFlashLatencyFromMSIRange>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d001      	beq.n	8003fd6 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e317      	b.n	8004606 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003fd6:	f000 fcc9 	bl	800496c <HAL_RCC_GetHCLKFreq>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	4aa4      	ldr	r2, [pc, #656]	@ (8004270 <HAL_RCC_OscConfig+0x344>)
 8003fde:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003fe0:	4ba4      	ldr	r3, [pc, #656]	@ (8004274 <HAL_RCC_OscConfig+0x348>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f7fe fca9 	bl	800293c <HAL_InitTick>
 8003fea:	4603      	mov	r3, r0
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d039      	beq.n	8004064 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	e308      	b.n	8004606 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	69db      	ldr	r3, [r3, #28]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d01e      	beq.n	800403a <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003ffc:	f7ff fdb0 	bl	8003b60 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004000:	f7fe fcea 	bl	80029d8 <HAL_GetTick>
 8004004:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8004006:	e008      	b.n	800401a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004008:	f7fe fce6 	bl	80029d8 <HAL_GetTick>
 800400c:	4602      	mov	r2, r0
 800400e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004010:	1ad3      	subs	r3, r2, r3
 8004012:	2b02      	cmp	r3, #2
 8004014:	d901      	bls.n	800401a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004016:	2303      	movs	r3, #3
 8004018:	e2f5      	b.n	8004606 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800401a:	f7ff fdbf 	bl	8003b9c <LL_RCC_MSI_IsReady>
 800401e:	4603      	mov	r3, r0
 8004020:	2b00      	cmp	r3, #0
 8004022:	d0f1      	beq.n	8004008 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004028:	4618      	mov	r0, r3
 800402a:	f7ff fdc8 	bl	8003bbe <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6a1b      	ldr	r3, [r3, #32]
 8004032:	4618      	mov	r0, r3
 8004034:	f7ff fdec 	bl	8003c10 <LL_RCC_MSI_SetCalibTrimming>
 8004038:	e015      	b.n	8004066 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800403a:	f7ff fda0 	bl	8003b7e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800403e:	f7fe fccb 	bl	80029d8 <HAL_GetTick>
 8004042:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8004044:	e008      	b.n	8004058 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004046:	f7fe fcc7 	bl	80029d8 <HAL_GetTick>
 800404a:	4602      	mov	r2, r0
 800404c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800404e:	1ad3      	subs	r3, r2, r3
 8004050:	2b02      	cmp	r3, #2
 8004052:	d901      	bls.n	8004058 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004054:	2303      	movs	r3, #3
 8004056:	e2d6      	b.n	8004606 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8004058:	f7ff fda0 	bl	8003b9c <LL_RCC_MSI_IsReady>
 800405c:	4603      	mov	r3, r0
 800405e:	2b00      	cmp	r3, #0
 8004060:	d1f1      	bne.n	8004046 <HAL_RCC_OscConfig+0x11a>
 8004062:	e000      	b.n	8004066 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004064:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f003 0301 	and.w	r3, r3, #1
 800406e:	2b00      	cmp	r3, #0
 8004070:	d047      	beq.n	8004102 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004072:	f7ff fdf6 	bl	8003c62 <LL_RCC_GetSysClkSource>
 8004076:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004078:	f7ff feef 	bl	8003e5a <LL_RCC_PLL_GetMainSource>
 800407c:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800407e:	6a3b      	ldr	r3, [r7, #32]
 8004080:	2b08      	cmp	r3, #8
 8004082:	d005      	beq.n	8004090 <HAL_RCC_OscConfig+0x164>
 8004084:	6a3b      	ldr	r3, [r7, #32]
 8004086:	2b0c      	cmp	r3, #12
 8004088:	d108      	bne.n	800409c <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800408a:	69fb      	ldr	r3, [r7, #28]
 800408c:	2b03      	cmp	r3, #3
 800408e:	d105      	bne.n	800409c <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d134      	bne.n	8004102 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	e2b4      	b.n	8004606 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040a4:	d102      	bne.n	80040ac <HAL_RCC_OscConfig+0x180>
 80040a6:	f7ff fbdd 	bl	8003864 <LL_RCC_HSE_Enable>
 80040aa:	e001      	b.n	80040b0 <HAL_RCC_OscConfig+0x184>
 80040ac:	f7ff fbe9 	bl	8003882 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d012      	beq.n	80040de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040b8:	f7fe fc8e 	bl	80029d8 <HAL_GetTick>
 80040bc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80040be:	e008      	b.n	80040d2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040c0:	f7fe fc8a 	bl	80029d8 <HAL_GetTick>
 80040c4:	4602      	mov	r2, r0
 80040c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040c8:	1ad3      	subs	r3, r2, r3
 80040ca:	2b64      	cmp	r3, #100	@ 0x64
 80040cc:	d901      	bls.n	80040d2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80040ce:	2303      	movs	r3, #3
 80040d0:	e299      	b.n	8004606 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 80040d2:	f7ff fbe5 	bl	80038a0 <LL_RCC_HSE_IsReady>
 80040d6:	4603      	mov	r3, r0
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d0f1      	beq.n	80040c0 <HAL_RCC_OscConfig+0x194>
 80040dc:	e011      	b.n	8004102 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040de:	f7fe fc7b 	bl	80029d8 <HAL_GetTick>
 80040e2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80040e4:	e008      	b.n	80040f8 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040e6:	f7fe fc77 	bl	80029d8 <HAL_GetTick>
 80040ea:	4602      	mov	r2, r0
 80040ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040ee:	1ad3      	subs	r3, r2, r3
 80040f0:	2b64      	cmp	r3, #100	@ 0x64
 80040f2:	d901      	bls.n	80040f8 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80040f4:	2303      	movs	r3, #3
 80040f6:	e286      	b.n	8004606 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 80040f8:	f7ff fbd2 	bl	80038a0 <LL_RCC_HSE_IsReady>
 80040fc:	4603      	mov	r3, r0
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d1f1      	bne.n	80040e6 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 0302 	and.w	r3, r3, #2
 800410a:	2b00      	cmp	r3, #0
 800410c:	d04c      	beq.n	80041a8 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800410e:	f7ff fda8 	bl	8003c62 <LL_RCC_GetSysClkSource>
 8004112:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004114:	f7ff fea1 	bl	8003e5a <LL_RCC_PLL_GetMainSource>
 8004118:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800411a:	69bb      	ldr	r3, [r7, #24]
 800411c:	2b04      	cmp	r3, #4
 800411e:	d005      	beq.n	800412c <HAL_RCC_OscConfig+0x200>
 8004120:	69bb      	ldr	r3, [r7, #24]
 8004122:	2b0c      	cmp	r3, #12
 8004124:	d10e      	bne.n	8004144 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	2b02      	cmp	r3, #2
 800412a:	d10b      	bne.n	8004144 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	68db      	ldr	r3, [r3, #12]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d101      	bne.n	8004138 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	e266      	b.n	8004606 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	691b      	ldr	r3, [r3, #16]
 800413c:	4618      	mov	r0, r3
 800413e:	f7ff fbf1 	bl	8003924 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004142:	e031      	b.n	80041a8 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	68db      	ldr	r3, [r3, #12]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d019      	beq.n	8004180 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800414c:	f7ff fbba 	bl	80038c4 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004150:	f7fe fc42 	bl	80029d8 <HAL_GetTick>
 8004154:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8004156:	e008      	b.n	800416a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004158:	f7fe fc3e 	bl	80029d8 <HAL_GetTick>
 800415c:	4602      	mov	r2, r0
 800415e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004160:	1ad3      	subs	r3, r2, r3
 8004162:	2b02      	cmp	r3, #2
 8004164:	d901      	bls.n	800416a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004166:	2303      	movs	r3, #3
 8004168:	e24d      	b.n	8004606 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800416a:	f7ff fbc9 	bl	8003900 <LL_RCC_HSI_IsReady>
 800416e:	4603      	mov	r3, r0
 8004170:	2b00      	cmp	r3, #0
 8004172:	d0f1      	beq.n	8004158 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	691b      	ldr	r3, [r3, #16]
 8004178:	4618      	mov	r0, r3
 800417a:	f7ff fbd3 	bl	8003924 <LL_RCC_HSI_SetCalibTrimming>
 800417e:	e013      	b.n	80041a8 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004180:	f7ff fbaf 	bl	80038e2 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004184:	f7fe fc28 	bl	80029d8 <HAL_GetTick>
 8004188:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800418a:	e008      	b.n	800419e <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800418c:	f7fe fc24 	bl	80029d8 <HAL_GetTick>
 8004190:	4602      	mov	r2, r0
 8004192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004194:	1ad3      	subs	r3, r2, r3
 8004196:	2b02      	cmp	r3, #2
 8004198:	d901      	bls.n	800419e <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800419a:	2303      	movs	r3, #3
 800419c:	e233      	b.n	8004606 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800419e:	f7ff fbaf 	bl	8003900 <LL_RCC_HSI_IsReady>
 80041a2:	4603      	mov	r3, r0
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d1f1      	bne.n	800418c <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f003 0308 	and.w	r3, r3, #8
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d106      	bne.n	80041c2 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80041bc:	2b00      	cmp	r3, #0
 80041be:	f000 80a3 	beq.w	8004308 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	695b      	ldr	r3, [r3, #20]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d076      	beq.n	80042b8 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 0310 	and.w	r3, r3, #16
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d046      	beq.n	8004264 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80041d6:	f7ff fc66 	bl	8003aa6 <LL_RCC_LSI1_IsReady>
 80041da:	4603      	mov	r3, r0
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d113      	bne.n	8004208 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80041e0:	f7ff fc3f 	bl	8003a62 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80041e4:	f7fe fbf8 	bl	80029d8 <HAL_GetTick>
 80041e8:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80041ea:	e008      	b.n	80041fe <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80041ec:	f7fe fbf4 	bl	80029d8 <HAL_GetTick>
 80041f0:	4602      	mov	r2, r0
 80041f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041f4:	1ad3      	subs	r3, r2, r3
 80041f6:	2b02      	cmp	r3, #2
 80041f8:	d901      	bls.n	80041fe <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 80041fa:	2303      	movs	r3, #3
 80041fc:	e203      	b.n	8004606 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80041fe:	f7ff fc52 	bl	8003aa6 <LL_RCC_LSI1_IsReady>
 8004202:	4603      	mov	r3, r0
 8004204:	2b00      	cmp	r3, #0
 8004206:	d0f1      	beq.n	80041ec <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8004208:	f7ff fc5f 	bl	8003aca <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800420c:	f7fe fbe4 	bl	80029d8 <HAL_GetTick>
 8004210:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004212:	e008      	b.n	8004226 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004214:	f7fe fbe0 	bl	80029d8 <HAL_GetTick>
 8004218:	4602      	mov	r2, r0
 800421a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800421c:	1ad3      	subs	r3, r2, r3
 800421e:	2b03      	cmp	r3, #3
 8004220:	d901      	bls.n	8004226 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8004222:	2303      	movs	r3, #3
 8004224:	e1ef      	b.n	8004606 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004226:	f7ff fc72 	bl	8003b0e <LL_RCC_LSI2_IsReady>
 800422a:	4603      	mov	r3, r0
 800422c:	2b00      	cmp	r3, #0
 800422e:	d0f1      	beq.n	8004214 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	699b      	ldr	r3, [r3, #24]
 8004234:	4618      	mov	r0, r3
 8004236:	f7ff fc7c 	bl	8003b32 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800423a:	f7ff fc23 	bl	8003a84 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800423e:	f7fe fbcb 	bl	80029d8 <HAL_GetTick>
 8004242:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004244:	e008      	b.n	8004258 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004246:	f7fe fbc7 	bl	80029d8 <HAL_GetTick>
 800424a:	4602      	mov	r2, r0
 800424c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800424e:	1ad3      	subs	r3, r2, r3
 8004250:	2b02      	cmp	r3, #2
 8004252:	d901      	bls.n	8004258 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8004254:	2303      	movs	r3, #3
 8004256:	e1d6      	b.n	8004606 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004258:	f7ff fc25 	bl	8003aa6 <LL_RCC_LSI1_IsReady>
 800425c:	4603      	mov	r3, r0
 800425e:	2b00      	cmp	r3, #0
 8004260:	d1f1      	bne.n	8004246 <HAL_RCC_OscConfig+0x31a>
 8004262:	e051      	b.n	8004308 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8004264:	f7ff fbfd 	bl	8003a62 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004268:	f7fe fbb6 	bl	80029d8 <HAL_GetTick>
 800426c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800426e:	e00c      	b.n	800428a <HAL_RCC_OscConfig+0x35e>
 8004270:	20000008 	.word	0x20000008
 8004274:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004278:	f7fe fbae 	bl	80029d8 <HAL_GetTick>
 800427c:	4602      	mov	r2, r0
 800427e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004280:	1ad3      	subs	r3, r2, r3
 8004282:	2b02      	cmp	r3, #2
 8004284:	d901      	bls.n	800428a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8004286:	2303      	movs	r3, #3
 8004288:	e1bd      	b.n	8004606 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800428a:	f7ff fc0c 	bl	8003aa6 <LL_RCC_LSI1_IsReady>
 800428e:	4603      	mov	r3, r0
 8004290:	2b00      	cmp	r3, #0
 8004292:	d0f1      	beq.n	8004278 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8004294:	f7ff fc2a 	bl	8003aec <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004298:	e008      	b.n	80042ac <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800429a:	f7fe fb9d 	bl	80029d8 <HAL_GetTick>
 800429e:	4602      	mov	r2, r0
 80042a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042a2:	1ad3      	subs	r3, r2, r3
 80042a4:	2b03      	cmp	r3, #3
 80042a6:	d901      	bls.n	80042ac <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 80042a8:	2303      	movs	r3, #3
 80042aa:	e1ac      	b.n	8004606 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80042ac:	f7ff fc2f 	bl	8003b0e <LL_RCC_LSI2_IsReady>
 80042b0:	4603      	mov	r3, r0
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d1f1      	bne.n	800429a <HAL_RCC_OscConfig+0x36e>
 80042b6:	e027      	b.n	8004308 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80042b8:	f7ff fc18 	bl	8003aec <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042bc:	f7fe fb8c 	bl	80029d8 <HAL_GetTick>
 80042c0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80042c2:	e008      	b.n	80042d6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80042c4:	f7fe fb88 	bl	80029d8 <HAL_GetTick>
 80042c8:	4602      	mov	r2, r0
 80042ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042cc:	1ad3      	subs	r3, r2, r3
 80042ce:	2b03      	cmp	r3, #3
 80042d0:	d901      	bls.n	80042d6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80042d2:	2303      	movs	r3, #3
 80042d4:	e197      	b.n	8004606 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80042d6:	f7ff fc1a 	bl	8003b0e <LL_RCC_LSI2_IsReady>
 80042da:	4603      	mov	r3, r0
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d1f1      	bne.n	80042c4 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80042e0:	f7ff fbd0 	bl	8003a84 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042e4:	f7fe fb78 	bl	80029d8 <HAL_GetTick>
 80042e8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80042ea:	e008      	b.n	80042fe <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80042ec:	f7fe fb74 	bl	80029d8 <HAL_GetTick>
 80042f0:	4602      	mov	r2, r0
 80042f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042f4:	1ad3      	subs	r3, r2, r3
 80042f6:	2b02      	cmp	r3, #2
 80042f8:	d901      	bls.n	80042fe <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 80042fa:	2303      	movs	r3, #3
 80042fc:	e183      	b.n	8004606 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80042fe:	f7ff fbd2 	bl	8003aa6 <LL_RCC_LSI1_IsReady>
 8004302:	4603      	mov	r3, r0
 8004304:	2b00      	cmp	r3, #0
 8004306:	d1f1      	bne.n	80042ec <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 0304 	and.w	r3, r3, #4
 8004310:	2b00      	cmp	r3, #0
 8004312:	d05b      	beq.n	80043cc <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004314:	4ba7      	ldr	r3, [pc, #668]	@ (80045b4 <HAL_RCC_OscConfig+0x688>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800431c:	2b00      	cmp	r3, #0
 800431e:	d114      	bne.n	800434a <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004320:	f7ff fa70 	bl	8003804 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004324:	f7fe fb58 	bl	80029d8 <HAL_GetTick>
 8004328:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800432a:	e008      	b.n	800433e <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800432c:	f7fe fb54 	bl	80029d8 <HAL_GetTick>
 8004330:	4602      	mov	r2, r0
 8004332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004334:	1ad3      	subs	r3, r2, r3
 8004336:	2b02      	cmp	r3, #2
 8004338:	d901      	bls.n	800433e <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800433a:	2303      	movs	r3, #3
 800433c:	e163      	b.n	8004606 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800433e:	4b9d      	ldr	r3, [pc, #628]	@ (80045b4 <HAL_RCC_OscConfig+0x688>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004346:	2b00      	cmp	r3, #0
 8004348:	d0f0      	beq.n	800432c <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	2b01      	cmp	r3, #1
 8004350:	d102      	bne.n	8004358 <HAL_RCC_OscConfig+0x42c>
 8004352:	f7ff fb30 	bl	80039b6 <LL_RCC_LSE_Enable>
 8004356:	e00c      	b.n	8004372 <HAL_RCC_OscConfig+0x446>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	2b05      	cmp	r3, #5
 800435e:	d104      	bne.n	800436a <HAL_RCC_OscConfig+0x43e>
 8004360:	f7ff fb4b 	bl	80039fa <LL_RCC_LSE_EnableBypass>
 8004364:	f7ff fb27 	bl	80039b6 <LL_RCC_LSE_Enable>
 8004368:	e003      	b.n	8004372 <HAL_RCC_OscConfig+0x446>
 800436a:	f7ff fb35 	bl	80039d8 <LL_RCC_LSE_Disable>
 800436e:	f7ff fb55 	bl	8003a1c <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d014      	beq.n	80043a4 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800437a:	f7fe fb2d 	bl	80029d8 <HAL_GetTick>
 800437e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8004380:	e00a      	b.n	8004398 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004382:	f7fe fb29 	bl	80029d8 <HAL_GetTick>
 8004386:	4602      	mov	r2, r0
 8004388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800438a:	1ad3      	subs	r3, r2, r3
 800438c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004390:	4293      	cmp	r3, r2
 8004392:	d901      	bls.n	8004398 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8004394:	2303      	movs	r3, #3
 8004396:	e136      	b.n	8004606 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8004398:	f7ff fb51 	bl	8003a3e <LL_RCC_LSE_IsReady>
 800439c:	4603      	mov	r3, r0
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d0ef      	beq.n	8004382 <HAL_RCC_OscConfig+0x456>
 80043a2:	e013      	b.n	80043cc <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043a4:	f7fe fb18 	bl	80029d8 <HAL_GetTick>
 80043a8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80043aa:	e00a      	b.n	80043c2 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043ac:	f7fe fb14 	bl	80029d8 <HAL_GetTick>
 80043b0:	4602      	mov	r2, r0
 80043b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043b4:	1ad3      	subs	r3, r2, r3
 80043b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d901      	bls.n	80043c2 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 80043be:	2303      	movs	r3, #3
 80043c0:	e121      	b.n	8004606 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 80043c2:	f7ff fb3c 	bl	8003a3e <LL_RCC_LSE_IsReady>
 80043c6:	4603      	mov	r3, r0
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d1ef      	bne.n	80043ac <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d02c      	beq.n	8004432 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d014      	beq.n	800440a <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80043e0:	f7ff fab5 	bl	800394e <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043e4:	f7fe faf8 	bl	80029d8 <HAL_GetTick>
 80043e8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80043ea:	e008      	b.n	80043fe <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80043ec:	f7fe faf4 	bl	80029d8 <HAL_GetTick>
 80043f0:	4602      	mov	r2, r0
 80043f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043f4:	1ad3      	subs	r3, r2, r3
 80043f6:	2b02      	cmp	r3, #2
 80043f8:	d901      	bls.n	80043fe <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 80043fa:	2303      	movs	r3, #3
 80043fc:	e103      	b.n	8004606 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80043fe:	f7ff fac8 	bl	8003992 <LL_RCC_HSI48_IsReady>
 8004402:	4603      	mov	r3, r0
 8004404:	2b00      	cmp	r3, #0
 8004406:	d0f1      	beq.n	80043ec <HAL_RCC_OscConfig+0x4c0>
 8004408:	e013      	b.n	8004432 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800440a:	f7ff fab1 	bl	8003970 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800440e:	f7fe fae3 	bl	80029d8 <HAL_GetTick>
 8004412:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004414:	e008      	b.n	8004428 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004416:	f7fe fadf 	bl	80029d8 <HAL_GetTick>
 800441a:	4602      	mov	r2, r0
 800441c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800441e:	1ad3      	subs	r3, r2, r3
 8004420:	2b02      	cmp	r3, #2
 8004422:	d901      	bls.n	8004428 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8004424:	2303      	movs	r3, #3
 8004426:	e0ee      	b.n	8004606 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004428:	f7ff fab3 	bl	8003992 <LL_RCC_HSI48_IsReady>
 800442c:	4603      	mov	r3, r0
 800442e:	2b00      	cmp	r3, #0
 8004430:	d1f1      	bne.n	8004416 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004436:	2b00      	cmp	r3, #0
 8004438:	f000 80e4 	beq.w	8004604 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800443c:	f7ff fc11 	bl	8003c62 <LL_RCC_GetSysClkSource>
 8004440:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8004442:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004446:	68db      	ldr	r3, [r3, #12]
 8004448:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800444e:	2b02      	cmp	r3, #2
 8004450:	f040 80b4 	bne.w	80045bc <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	f003 0203 	and.w	r2, r3, #3
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800445e:	429a      	cmp	r2, r3
 8004460:	d123      	bne.n	80044aa <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800446c:	429a      	cmp	r2, r3
 800446e:	d11c      	bne.n	80044aa <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	0a1b      	lsrs	r3, r3, #8
 8004474:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800447c:	429a      	cmp	r2, r3
 800447e:	d114      	bne.n	80044aa <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800448a:	429a      	cmp	r2, r3
 800448c:	d10d      	bne.n	80044aa <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004498:	429a      	cmp	r2, r3
 800449a:	d106      	bne.n	80044aa <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80044a6:	429a      	cmp	r2, r3
 80044a8:	d05d      	beq.n	8004566 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	2b0c      	cmp	r3, #12
 80044ae:	d058      	beq.n	8004562 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80044b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d001      	beq.n	80044c2 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e0a1      	b.n	8004606 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80044c2:	f7ff fc84 	bl	8003dce <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80044c6:	f7fe fa87 	bl	80029d8 <HAL_GetTick>
 80044ca:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044cc:	e008      	b.n	80044e0 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044ce:	f7fe fa83 	bl	80029d8 <HAL_GetTick>
 80044d2:	4602      	mov	r2, r0
 80044d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044d6:	1ad3      	subs	r3, r2, r3
 80044d8:	2b02      	cmp	r3, #2
 80044da:	d901      	bls.n	80044e0 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 80044dc:	2303      	movs	r3, #3
 80044de:	e092      	b.n	8004606 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d1ef      	bne.n	80044ce <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80044ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80044f2:	68da      	ldr	r2, [r3, #12]
 80044f4:	4b30      	ldr	r3, [pc, #192]	@ (80045b8 <HAL_RCC_OscConfig+0x68c>)
 80044f6:	4013      	ands	r3, r2
 80044f8:	687a      	ldr	r2, [r7, #4]
 80044fa:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 80044fc:	687a      	ldr	r2, [r7, #4]
 80044fe:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004500:	4311      	orrs	r1, r2
 8004502:	687a      	ldr	r2, [r7, #4]
 8004504:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004506:	0212      	lsls	r2, r2, #8
 8004508:	4311      	orrs	r1, r2
 800450a:	687a      	ldr	r2, [r7, #4]
 800450c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800450e:	4311      	orrs	r1, r2
 8004510:	687a      	ldr	r2, [r7, #4]
 8004512:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004514:	4311      	orrs	r1, r2
 8004516:	687a      	ldr	r2, [r7, #4]
 8004518:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800451a:	430a      	orrs	r2, r1
 800451c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004520:	4313      	orrs	r3, r2
 8004522:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004524:	f7ff fc44 	bl	8003db0 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004528:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800452c:	68db      	ldr	r3, [r3, #12]
 800452e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004532:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004536:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004538:	f7fe fa4e 	bl	80029d8 <HAL_GetTick>
 800453c:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800453e:	e008      	b.n	8004552 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004540:	f7fe fa4a 	bl	80029d8 <HAL_GetTick>
 8004544:	4602      	mov	r2, r0
 8004546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004548:	1ad3      	subs	r3, r2, r3
 800454a:	2b02      	cmp	r3, #2
 800454c:	d901      	bls.n	8004552 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800454e:	2303      	movs	r3, #3
 8004550:	e059      	b.n	8004606 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004552:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800455c:	2b00      	cmp	r3, #0
 800455e:	d0ef      	beq.n	8004540 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004560:	e050      	b.n	8004604 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	e04f      	b.n	8004606 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004566:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004570:	2b00      	cmp	r3, #0
 8004572:	d147      	bne.n	8004604 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004574:	f7ff fc1c 	bl	8003db0 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004578:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800457c:	68db      	ldr	r3, [r3, #12]
 800457e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004582:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004586:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004588:	f7fe fa26 	bl	80029d8 <HAL_GetTick>
 800458c:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800458e:	e008      	b.n	80045a2 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004590:	f7fe fa22 	bl	80029d8 <HAL_GetTick>
 8004594:	4602      	mov	r2, r0
 8004596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004598:	1ad3      	subs	r3, r2, r3
 800459a:	2b02      	cmp	r3, #2
 800459c:	d901      	bls.n	80045a2 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800459e:	2303      	movs	r3, #3
 80045a0:	e031      	b.n	8004606 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d0ef      	beq.n	8004590 <HAL_RCC_OscConfig+0x664>
 80045b0:	e028      	b.n	8004604 <HAL_RCC_OscConfig+0x6d8>
 80045b2:	bf00      	nop
 80045b4:	58000400 	.word	0x58000400
 80045b8:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	2b0c      	cmp	r3, #12
 80045c0:	d01e      	beq.n	8004600 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045c2:	f7ff fc04 	bl	8003dce <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045c6:	f7fe fa07 	bl	80029d8 <HAL_GetTick>
 80045ca:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045cc:	e008      	b.n	80045e0 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045ce:	f7fe fa03 	bl	80029d8 <HAL_GetTick>
 80045d2:	4602      	mov	r2, r0
 80045d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045d6:	1ad3      	subs	r3, r2, r3
 80045d8:	2b02      	cmp	r3, #2
 80045da:	d901      	bls.n	80045e0 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 80045dc:	2303      	movs	r3, #3
 80045de:	e012      	b.n	8004606 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d1ef      	bne.n	80045ce <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80045ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80045f2:	68da      	ldr	r2, [r3, #12]
 80045f4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80045f8:	4b05      	ldr	r3, [pc, #20]	@ (8004610 <HAL_RCC_OscConfig+0x6e4>)
 80045fa:	4013      	ands	r3, r2
 80045fc:	60cb      	str	r3, [r1, #12]
 80045fe:	e001      	b.n	8004604 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	e000      	b.n	8004606 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8004604:	2300      	movs	r3, #0
}
 8004606:	4618      	mov	r0, r3
 8004608:	3734      	adds	r7, #52	@ 0x34
 800460a:	46bd      	mov	sp, r7
 800460c:	bd90      	pop	{r4, r7, pc}
 800460e:	bf00      	nop
 8004610:	eefefffc 	.word	0xeefefffc

08004614 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b084      	sub	sp, #16
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
 800461c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d101      	bne.n	8004628 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004624:	2301      	movs	r3, #1
 8004626:	e12d      	b.n	8004884 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004628:	4b98      	ldr	r3, [pc, #608]	@ (800488c <HAL_RCC_ClockConfig+0x278>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f003 0307 	and.w	r3, r3, #7
 8004630:	683a      	ldr	r2, [r7, #0]
 8004632:	429a      	cmp	r2, r3
 8004634:	d91b      	bls.n	800466e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004636:	4b95      	ldr	r3, [pc, #596]	@ (800488c <HAL_RCC_ClockConfig+0x278>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f023 0207 	bic.w	r2, r3, #7
 800463e:	4993      	ldr	r1, [pc, #588]	@ (800488c <HAL_RCC_ClockConfig+0x278>)
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	4313      	orrs	r3, r2
 8004644:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004646:	f7fe f9c7 	bl	80029d8 <HAL_GetTick>
 800464a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800464c:	e008      	b.n	8004660 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800464e:	f7fe f9c3 	bl	80029d8 <HAL_GetTick>
 8004652:	4602      	mov	r2, r0
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	1ad3      	subs	r3, r2, r3
 8004658:	2b02      	cmp	r3, #2
 800465a:	d901      	bls.n	8004660 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800465c:	2303      	movs	r3, #3
 800465e:	e111      	b.n	8004884 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004660:	4b8a      	ldr	r3, [pc, #552]	@ (800488c <HAL_RCC_ClockConfig+0x278>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f003 0307 	and.w	r3, r3, #7
 8004668:	683a      	ldr	r2, [r7, #0]
 800466a:	429a      	cmp	r2, r3
 800466c:	d1ef      	bne.n	800464e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f003 0302 	and.w	r3, r3, #2
 8004676:	2b00      	cmp	r3, #0
 8004678:	d016      	beq.n	80046a8 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	4618      	mov	r0, r3
 8004680:	f7ff fafb 	bl	8003c7a <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004684:	f7fe f9a8 	bl	80029d8 <HAL_GetTick>
 8004688:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800468a:	e008      	b.n	800469e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800468c:	f7fe f9a4 	bl	80029d8 <HAL_GetTick>
 8004690:	4602      	mov	r2, r0
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	1ad3      	subs	r3, r2, r3
 8004696:	2b02      	cmp	r3, #2
 8004698:	d901      	bls.n	800469e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800469a:	2303      	movs	r3, #3
 800469c:	e0f2      	b.n	8004884 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800469e:	f7ff fbe8 	bl	8003e72 <LL_RCC_IsActiveFlag_HPRE>
 80046a2:	4603      	mov	r3, r0
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d0f1      	beq.n	800468c <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f003 0320 	and.w	r3, r3, #32
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d016      	beq.n	80046e2 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	695b      	ldr	r3, [r3, #20]
 80046b8:	4618      	mov	r0, r3
 80046ba:	f7ff faf2 	bl	8003ca2 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80046be:	f7fe f98b 	bl	80029d8 <HAL_GetTick>
 80046c2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80046c4:	e008      	b.n	80046d8 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80046c6:	f7fe f987 	bl	80029d8 <HAL_GetTick>
 80046ca:	4602      	mov	r2, r0
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	1ad3      	subs	r3, r2, r3
 80046d0:	2b02      	cmp	r3, #2
 80046d2:	d901      	bls.n	80046d8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80046d4:	2303      	movs	r3, #3
 80046d6:	e0d5      	b.n	8004884 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80046d8:	f7ff fbdd 	bl	8003e96 <LL_RCC_IsActiveFlag_C2HPRE>
 80046dc:	4603      	mov	r3, r0
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d0f1      	beq.n	80046c6 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d016      	beq.n	800471c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	699b      	ldr	r3, [r3, #24]
 80046f2:	4618      	mov	r0, r3
 80046f4:	f7ff faeb 	bl	8003cce <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80046f8:	f7fe f96e 	bl	80029d8 <HAL_GetTick>
 80046fc:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80046fe:	e008      	b.n	8004712 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004700:	f7fe f96a 	bl	80029d8 <HAL_GetTick>
 8004704:	4602      	mov	r2, r0
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	1ad3      	subs	r3, r2, r3
 800470a:	2b02      	cmp	r3, #2
 800470c:	d901      	bls.n	8004712 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800470e:	2303      	movs	r3, #3
 8004710:	e0b8      	b.n	8004884 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004712:	f7ff fbd3 	bl	8003ebc <LL_RCC_IsActiveFlag_SHDHPRE>
 8004716:	4603      	mov	r3, r0
 8004718:	2b00      	cmp	r3, #0
 800471a:	d0f1      	beq.n	8004700 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f003 0304 	and.w	r3, r3, #4
 8004724:	2b00      	cmp	r3, #0
 8004726:	d016      	beq.n	8004756 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	68db      	ldr	r3, [r3, #12]
 800472c:	4618      	mov	r0, r3
 800472e:	f7ff fae5 	bl	8003cfc <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004732:	f7fe f951 	bl	80029d8 <HAL_GetTick>
 8004736:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004738:	e008      	b.n	800474c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800473a:	f7fe f94d 	bl	80029d8 <HAL_GetTick>
 800473e:	4602      	mov	r2, r0
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	1ad3      	subs	r3, r2, r3
 8004744:	2b02      	cmp	r3, #2
 8004746:	d901      	bls.n	800474c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8004748:	2303      	movs	r3, #3
 800474a:	e09b      	b.n	8004884 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800474c:	f7ff fbc9 	bl	8003ee2 <LL_RCC_IsActiveFlag_PPRE1>
 8004750:	4603      	mov	r3, r0
 8004752:	2b00      	cmp	r3, #0
 8004754:	d0f1      	beq.n	800473a <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 0308 	and.w	r3, r3, #8
 800475e:	2b00      	cmp	r3, #0
 8004760:	d017      	beq.n	8004792 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	691b      	ldr	r3, [r3, #16]
 8004766:	00db      	lsls	r3, r3, #3
 8004768:	4618      	mov	r0, r3
 800476a:	f7ff fadb 	bl	8003d24 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800476e:	f7fe f933 	bl	80029d8 <HAL_GetTick>
 8004772:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004774:	e008      	b.n	8004788 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004776:	f7fe f92f 	bl	80029d8 <HAL_GetTick>
 800477a:	4602      	mov	r2, r0
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	1ad3      	subs	r3, r2, r3
 8004780:	2b02      	cmp	r3, #2
 8004782:	d901      	bls.n	8004788 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8004784:	2303      	movs	r3, #3
 8004786:	e07d      	b.n	8004884 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004788:	f7ff fbbd 	bl	8003f06 <LL_RCC_IsActiveFlag_PPRE2>
 800478c:	4603      	mov	r3, r0
 800478e:	2b00      	cmp	r3, #0
 8004790:	d0f1      	beq.n	8004776 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f003 0301 	and.w	r3, r3, #1
 800479a:	2b00      	cmp	r3, #0
 800479c:	d043      	beq.n	8004826 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	2b02      	cmp	r3, #2
 80047a4:	d106      	bne.n	80047b4 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80047a6:	f7ff f87b 	bl	80038a0 <LL_RCC_HSE_IsReady>
 80047aa:	4603      	mov	r3, r0
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d11e      	bne.n	80047ee <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80047b0:	2301      	movs	r3, #1
 80047b2:	e067      	b.n	8004884 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	2b03      	cmp	r3, #3
 80047ba:	d106      	bne.n	80047ca <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80047bc:	f7ff fb16 	bl	8003dec <LL_RCC_PLL_IsReady>
 80047c0:	4603      	mov	r3, r0
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d113      	bne.n	80047ee <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	e05c      	b.n	8004884 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d106      	bne.n	80047e0 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80047d2:	f7ff f9e3 	bl	8003b9c <LL_RCC_MSI_IsReady>
 80047d6:	4603      	mov	r3, r0
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d108      	bne.n	80047ee <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	e051      	b.n	8004884 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80047e0:	f7ff f88e 	bl	8003900 <LL_RCC_HSI_IsReady>
 80047e4:	4603      	mov	r3, r0
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d101      	bne.n	80047ee <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e04a      	b.n	8004884 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	4618      	mov	r0, r3
 80047f4:	f7ff fa21 	bl	8003c3a <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047f8:	f7fe f8ee 	bl	80029d8 <HAL_GetTick>
 80047fc:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047fe:	e00a      	b.n	8004816 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004800:	f7fe f8ea 	bl	80029d8 <HAL_GetTick>
 8004804:	4602      	mov	r2, r0
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	1ad3      	subs	r3, r2, r3
 800480a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800480e:	4293      	cmp	r3, r2
 8004810:	d901      	bls.n	8004816 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8004812:	2303      	movs	r3, #3
 8004814:	e036      	b.n	8004884 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004816:	f7ff fa24 	bl	8003c62 <LL_RCC_GetSysClkSource>
 800481a:	4602      	mov	r2, r0
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	009b      	lsls	r3, r3, #2
 8004822:	429a      	cmp	r2, r3
 8004824:	d1ec      	bne.n	8004800 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004826:	4b19      	ldr	r3, [pc, #100]	@ (800488c <HAL_RCC_ClockConfig+0x278>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f003 0307 	and.w	r3, r3, #7
 800482e:	683a      	ldr	r2, [r7, #0]
 8004830:	429a      	cmp	r2, r3
 8004832:	d21b      	bcs.n	800486c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004834:	4b15      	ldr	r3, [pc, #84]	@ (800488c <HAL_RCC_ClockConfig+0x278>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f023 0207 	bic.w	r2, r3, #7
 800483c:	4913      	ldr	r1, [pc, #76]	@ (800488c <HAL_RCC_ClockConfig+0x278>)
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	4313      	orrs	r3, r2
 8004842:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004844:	f7fe f8c8 	bl	80029d8 <HAL_GetTick>
 8004848:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800484a:	e008      	b.n	800485e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800484c:	f7fe f8c4 	bl	80029d8 <HAL_GetTick>
 8004850:	4602      	mov	r2, r0
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	1ad3      	subs	r3, r2, r3
 8004856:	2b02      	cmp	r3, #2
 8004858:	d901      	bls.n	800485e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800485a:	2303      	movs	r3, #3
 800485c:	e012      	b.n	8004884 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800485e:	4b0b      	ldr	r3, [pc, #44]	@ (800488c <HAL_RCC_ClockConfig+0x278>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f003 0307 	and.w	r3, r3, #7
 8004866:	683a      	ldr	r2, [r7, #0]
 8004868:	429a      	cmp	r2, r3
 800486a:	d1ef      	bne.n	800484c <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800486c:	f000 f87e 	bl	800496c <HAL_RCC_GetHCLKFreq>
 8004870:	4603      	mov	r3, r0
 8004872:	4a07      	ldr	r2, [pc, #28]	@ (8004890 <HAL_RCC_ClockConfig+0x27c>)
 8004874:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8004876:	f7fe f8bb 	bl	80029f0 <HAL_GetTickPrio>
 800487a:	4603      	mov	r3, r0
 800487c:	4618      	mov	r0, r3
 800487e:	f7fe f85d 	bl	800293c <HAL_InitTick>
 8004882:	4603      	mov	r3, r0
}
 8004884:	4618      	mov	r0, r3
 8004886:	3710      	adds	r7, #16
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}
 800488c:	58004000 	.word	0x58004000
 8004890:	20000008 	.word	0x20000008

08004894 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004894:	b590      	push	{r4, r7, lr}
 8004896:	b085      	sub	sp, #20
 8004898:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800489a:	f7ff f9e2 	bl	8003c62 <LL_RCC_GetSysClkSource>
 800489e:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d10a      	bne.n	80048bc <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80048a6:	f7ff f99e 	bl	8003be6 <LL_RCC_MSI_GetRange>
 80048aa:	4603      	mov	r3, r0
 80048ac:	091b      	lsrs	r3, r3, #4
 80048ae:	f003 030f 	and.w	r3, r3, #15
 80048b2:	4a2b      	ldr	r2, [pc, #172]	@ (8004960 <HAL_RCC_GetSysClockFreq+0xcc>)
 80048b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048b8:	60fb      	str	r3, [r7, #12]
 80048ba:	e04b      	b.n	8004954 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2b04      	cmp	r3, #4
 80048c0:	d102      	bne.n	80048c8 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80048c2:	4b28      	ldr	r3, [pc, #160]	@ (8004964 <HAL_RCC_GetSysClockFreq+0xd0>)
 80048c4:	60fb      	str	r3, [r7, #12]
 80048c6:	e045      	b.n	8004954 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2b08      	cmp	r3, #8
 80048cc:	d10a      	bne.n	80048e4 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80048ce:	f7fe ffb7 	bl	8003840 <LL_RCC_HSE_IsEnabledDiv2>
 80048d2:	4603      	mov	r3, r0
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d102      	bne.n	80048de <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80048d8:	4b22      	ldr	r3, [pc, #136]	@ (8004964 <HAL_RCC_GetSysClockFreq+0xd0>)
 80048da:	60fb      	str	r3, [r7, #12]
 80048dc:	e03a      	b.n	8004954 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80048de:	4b22      	ldr	r3, [pc, #136]	@ (8004968 <HAL_RCC_GetSysClockFreq+0xd4>)
 80048e0:	60fb      	str	r3, [r7, #12]
 80048e2:	e037      	b.n	8004954 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80048e4:	f7ff fab9 	bl	8003e5a <LL_RCC_PLL_GetMainSource>
 80048e8:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	2b02      	cmp	r3, #2
 80048ee:	d003      	beq.n	80048f8 <HAL_RCC_GetSysClockFreq+0x64>
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	2b03      	cmp	r3, #3
 80048f4:	d003      	beq.n	80048fe <HAL_RCC_GetSysClockFreq+0x6a>
 80048f6:	e00d      	b.n	8004914 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80048f8:	4b1a      	ldr	r3, [pc, #104]	@ (8004964 <HAL_RCC_GetSysClockFreq+0xd0>)
 80048fa:	60bb      	str	r3, [r7, #8]
        break;
 80048fc:	e015      	b.n	800492a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80048fe:	f7fe ff9f 	bl	8003840 <LL_RCC_HSE_IsEnabledDiv2>
 8004902:	4603      	mov	r3, r0
 8004904:	2b01      	cmp	r3, #1
 8004906:	d102      	bne.n	800490e <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8004908:	4b16      	ldr	r3, [pc, #88]	@ (8004964 <HAL_RCC_GetSysClockFreq+0xd0>)
 800490a:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800490c:	e00d      	b.n	800492a <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800490e:	4b16      	ldr	r3, [pc, #88]	@ (8004968 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004910:	60bb      	str	r3, [r7, #8]
        break;
 8004912:	e00a      	b.n	800492a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004914:	f7ff f967 	bl	8003be6 <LL_RCC_MSI_GetRange>
 8004918:	4603      	mov	r3, r0
 800491a:	091b      	lsrs	r3, r3, #4
 800491c:	f003 030f 	and.w	r3, r3, #15
 8004920:	4a0f      	ldr	r2, [pc, #60]	@ (8004960 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004922:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004926:	60bb      	str	r3, [r7, #8]
        break;
 8004928:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800492a:	f7ff fa71 	bl	8003e10 <LL_RCC_PLL_GetN>
 800492e:	4602      	mov	r2, r0
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	fb03 f402 	mul.w	r4, r3, r2
 8004936:	f7ff fa84 	bl	8003e42 <LL_RCC_PLL_GetDivider>
 800493a:	4603      	mov	r3, r0
 800493c:	091b      	lsrs	r3, r3, #4
 800493e:	3301      	adds	r3, #1
 8004940:	fbb4 f4f3 	udiv	r4, r4, r3
 8004944:	f7ff fa71 	bl	8003e2a <LL_RCC_PLL_GetR>
 8004948:	4603      	mov	r3, r0
 800494a:	0f5b      	lsrs	r3, r3, #29
 800494c:	3301      	adds	r3, #1
 800494e:	fbb4 f3f3 	udiv	r3, r4, r3
 8004952:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8004954:	68fb      	ldr	r3, [r7, #12]
}
 8004956:	4618      	mov	r0, r3
 8004958:	3714      	adds	r7, #20
 800495a:	46bd      	mov	sp, r7
 800495c:	bd90      	pop	{r4, r7, pc}
 800495e:	bf00      	nop
 8004960:	0800ccfc 	.word	0x0800ccfc
 8004964:	00f42400 	.word	0x00f42400
 8004968:	01e84800 	.word	0x01e84800

0800496c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800496c:	b598      	push	{r3, r4, r7, lr}
 800496e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8004970:	f7ff ff90 	bl	8004894 <HAL_RCC_GetSysClockFreq>
 8004974:	4604      	mov	r4, r0
 8004976:	f7ff f9e9 	bl	8003d4c <LL_RCC_GetAHBPrescaler>
 800497a:	4603      	mov	r3, r0
 800497c:	091b      	lsrs	r3, r3, #4
 800497e:	f003 030f 	and.w	r3, r3, #15
 8004982:	4a03      	ldr	r2, [pc, #12]	@ (8004990 <HAL_RCC_GetHCLKFreq+0x24>)
 8004984:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004988:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800498c:	4618      	mov	r0, r3
 800498e:	bd98      	pop	{r3, r4, r7, pc}
 8004990:	0800cc9c 	.word	0x0800cc9c

08004994 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004994:	b598      	push	{r3, r4, r7, lr}
 8004996:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004998:	f7ff ffe8 	bl	800496c <HAL_RCC_GetHCLKFreq>
 800499c:	4604      	mov	r4, r0
 800499e:	f7ff f9ef 	bl	8003d80 <LL_RCC_GetAPB1Prescaler>
 80049a2:	4603      	mov	r3, r0
 80049a4:	0a1b      	lsrs	r3, r3, #8
 80049a6:	f003 0307 	and.w	r3, r3, #7
 80049aa:	4a04      	ldr	r2, [pc, #16]	@ (80049bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80049ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049b0:	f003 031f 	and.w	r3, r3, #31
 80049b4:	fa24 f303 	lsr.w	r3, r4, r3
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	bd98      	pop	{r3, r4, r7, pc}
 80049bc:	0800ccdc 	.word	0x0800ccdc

080049c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80049c0:	b598      	push	{r3, r4, r7, lr}
 80049c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80049c4:	f7ff ffd2 	bl	800496c <HAL_RCC_GetHCLKFreq>
 80049c8:	4604      	mov	r4, r0
 80049ca:	f7ff f9e5 	bl	8003d98 <LL_RCC_GetAPB2Prescaler>
 80049ce:	4603      	mov	r3, r0
 80049d0:	0adb      	lsrs	r3, r3, #11
 80049d2:	f003 0307 	and.w	r3, r3, #7
 80049d6:	4a04      	ldr	r2, [pc, #16]	@ (80049e8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80049d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049dc:	f003 031f 	and.w	r3, r3, #31
 80049e0:	fa24 f303 	lsr.w	r3, r4, r3
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	bd98      	pop	{r3, r4, r7, pc}
 80049e8:	0800ccdc 	.word	0x0800ccdc

080049ec <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80049ec:	b590      	push	{r4, r7, lr}
 80049ee:	b085      	sub	sp, #20
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2bb0      	cmp	r3, #176	@ 0xb0
 80049f8:	d903      	bls.n	8004a02 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80049fa:	4b15      	ldr	r3, [pc, #84]	@ (8004a50 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80049fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049fe:	60fb      	str	r3, [r7, #12]
 8004a00:	e007      	b.n	8004a12 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	091b      	lsrs	r3, r3, #4
 8004a06:	f003 030f 	and.w	r3, r3, #15
 8004a0a:	4a11      	ldr	r2, [pc, #68]	@ (8004a50 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004a0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a10:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8004a12:	f7ff f9a7 	bl	8003d64 <LL_RCC_GetAHB4Prescaler>
 8004a16:	4603      	mov	r3, r0
 8004a18:	091b      	lsrs	r3, r3, #4
 8004a1a:	f003 030f 	and.w	r3, r3, #15
 8004a1e:	4a0d      	ldr	r2, [pc, #52]	@ (8004a54 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8004a20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a24:	68fa      	ldr	r2, [r7, #12]
 8004a26:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a2a:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	4a0a      	ldr	r2, [pc, #40]	@ (8004a58 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8004a30:	fba2 2303 	umull	r2, r3, r2, r3
 8004a34:	0c9c      	lsrs	r4, r3, #18
 8004a36:	f7fe fef5 	bl	8003824 <HAL_PWREx_GetVoltageRange>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	4619      	mov	r1, r3
 8004a3e:	4620      	mov	r0, r4
 8004a40:	f000 f80c 	bl	8004a5c <RCC_SetFlashLatency>
 8004a44:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	3714      	adds	r7, #20
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd90      	pop	{r4, r7, pc}
 8004a4e:	bf00      	nop
 8004a50:	0800ccfc 	.word	0x0800ccfc
 8004a54:	0800cc9c 	.word	0x0800cc9c
 8004a58:	431bde83 	.word	0x431bde83

08004a5c <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8004a5c:	b590      	push	{r4, r7, lr}
 8004a5e:	b093      	sub	sp, #76	@ 0x4c
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
 8004a64:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8004a66:	4b37      	ldr	r3, [pc, #220]	@ (8004b44 <RCC_SetFlashLatency+0xe8>)
 8004a68:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8004a6c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004a6e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8004a72:	4a35      	ldr	r2, [pc, #212]	@ (8004b48 <RCC_SetFlashLatency+0xec>)
 8004a74:	f107 031c 	add.w	r3, r7, #28
 8004a78:	ca07      	ldmia	r2, {r0, r1, r2}
 8004a7a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8004a7e:	4b33      	ldr	r3, [pc, #204]	@ (8004b4c <RCC_SetFlashLatency+0xf0>)
 8004a80:	f107 040c 	add.w	r4, r7, #12
 8004a84:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004a86:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a94:	d11a      	bne.n	8004acc <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004a96:	2300      	movs	r3, #0
 8004a98:	643b      	str	r3, [r7, #64]	@ 0x40
 8004a9a:	e013      	b.n	8004ac4 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8004a9c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a9e:	009b      	lsls	r3, r3, #2
 8004aa0:	3348      	adds	r3, #72	@ 0x48
 8004aa2:	443b      	add	r3, r7
 8004aa4:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8004aa8:	687a      	ldr	r2, [r7, #4]
 8004aaa:	429a      	cmp	r2, r3
 8004aac:	d807      	bhi.n	8004abe <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004aae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ab0:	009b      	lsls	r3, r3, #2
 8004ab2:	3348      	adds	r3, #72	@ 0x48
 8004ab4:	443b      	add	r3, r7
 8004ab6:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8004aba:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8004abc:	e020      	b.n	8004b00 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004abe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ac0:	3301      	adds	r3, #1
 8004ac2:	643b      	str	r3, [r7, #64]	@ 0x40
 8004ac4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ac6:	2b03      	cmp	r3, #3
 8004ac8:	d9e8      	bls.n	8004a9c <RCC_SetFlashLatency+0x40>
 8004aca:	e019      	b.n	8004b00 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004acc:	2300      	movs	r3, #0
 8004ace:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004ad0:	e013      	b.n	8004afa <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8004ad2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ad4:	009b      	lsls	r3, r3, #2
 8004ad6:	3348      	adds	r3, #72	@ 0x48
 8004ad8:	443b      	add	r3, r7
 8004ada:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8004ade:	687a      	ldr	r2, [r7, #4]
 8004ae0:	429a      	cmp	r2, r3
 8004ae2:	d807      	bhi.n	8004af4 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004ae4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ae6:	009b      	lsls	r3, r3, #2
 8004ae8:	3348      	adds	r3, #72	@ 0x48
 8004aea:	443b      	add	r3, r7
 8004aec:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8004af0:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8004af2:	e005      	b.n	8004b00 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004af4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004af6:	3301      	adds	r3, #1
 8004af8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004afa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004afc:	2b02      	cmp	r3, #2
 8004afe:	d9e8      	bls.n	8004ad2 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8004b00:	4b13      	ldr	r3, [pc, #76]	@ (8004b50 <RCC_SetFlashLatency+0xf4>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f023 0207 	bic.w	r2, r3, #7
 8004b08:	4911      	ldr	r1, [pc, #68]	@ (8004b50 <RCC_SetFlashLatency+0xf4>)
 8004b0a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004b10:	f7fd ff62 	bl	80029d8 <HAL_GetTick>
 8004b14:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004b16:	e008      	b.n	8004b2a <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004b18:	f7fd ff5e 	bl	80029d8 <HAL_GetTick>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b20:	1ad3      	subs	r3, r2, r3
 8004b22:	2b02      	cmp	r3, #2
 8004b24:	d901      	bls.n	8004b2a <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8004b26:	2303      	movs	r3, #3
 8004b28:	e007      	b.n	8004b3a <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004b2a:	4b09      	ldr	r3, [pc, #36]	@ (8004b50 <RCC_SetFlashLatency+0xf4>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f003 0307 	and.w	r3, r3, #7
 8004b32:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d1ef      	bne.n	8004b18 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8004b38:	2300      	movs	r3, #0
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	374c      	adds	r7, #76	@ 0x4c
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd90      	pop	{r4, r7, pc}
 8004b42:	bf00      	nop
 8004b44:	0800bf50 	.word	0x0800bf50
 8004b48:	0800bf60 	.word	0x0800bf60
 8004b4c:	0800bf6c 	.word	0x0800bf6c
 8004b50:	58004000 	.word	0x58004000

08004b54 <LL_RCC_LSE_IsEnabled>:
{
 8004b54:	b480      	push	{r7}
 8004b56:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8004b58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004b5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b60:	f003 0301 	and.w	r3, r3, #1
 8004b64:	2b01      	cmp	r3, #1
 8004b66:	d101      	bne.n	8004b6c <LL_RCC_LSE_IsEnabled+0x18>
 8004b68:	2301      	movs	r3, #1
 8004b6a:	e000      	b.n	8004b6e <LL_RCC_LSE_IsEnabled+0x1a>
 8004b6c:	2300      	movs	r3, #0
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	46bd      	mov	sp, r7
 8004b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b76:	4770      	bx	lr

08004b78 <LL_RCC_LSE_IsReady>:
{
 8004b78:	b480      	push	{r7}
 8004b7a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004b7c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004b80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b84:	f003 0302 	and.w	r3, r3, #2
 8004b88:	2b02      	cmp	r3, #2
 8004b8a:	d101      	bne.n	8004b90 <LL_RCC_LSE_IsReady+0x18>
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	e000      	b.n	8004b92 <LL_RCC_LSE_IsReady+0x1a>
 8004b90:	2300      	movs	r3, #0
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr

08004b9c <LL_RCC_SetRFWKPClockSource>:
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b083      	sub	sp, #12
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8004ba4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ba8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004bac:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004bb0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8004bbc:	bf00      	nop
 8004bbe:	370c      	adds	r7, #12
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc6:	4770      	bx	lr

08004bc8 <LL_RCC_SetSMPSClockSource>:
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b083      	sub	sp, #12
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8004bd0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004bd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bd6:	f023 0203 	bic.w	r2, r3, #3
 8004bda:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	4313      	orrs	r3, r2
 8004be2:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8004be4:	bf00      	nop
 8004be6:	370c      	adds	r7, #12
 8004be8:	46bd      	mov	sp, r7
 8004bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bee:	4770      	bx	lr

08004bf0 <LL_RCC_SetSMPSPrescaler>:
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b083      	sub	sp, #12
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8004bf8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004bfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bfe:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004c02:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8004c0c:	bf00      	nop
 8004c0e:	370c      	adds	r7, #12
 8004c10:	46bd      	mov	sp, r7
 8004c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c16:	4770      	bx	lr

08004c18 <LL_RCC_SetUSARTClockSource>:
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b083      	sub	sp, #12
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8004c20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004c24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c28:	f023 0203 	bic.w	r2, r3, #3
 8004c2c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	4313      	orrs	r3, r2
 8004c34:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004c38:	bf00      	nop
 8004c3a:	370c      	adds	r7, #12
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c42:	4770      	bx	lr

08004c44 <LL_RCC_SetLPUARTClockSource>:
{
 8004c44:	b480      	push	{r7}
 8004c46:	b083      	sub	sp, #12
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8004c4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004c50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c54:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004c58:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004c64:	bf00      	nop
 8004c66:	370c      	adds	r7, #12
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr

08004c70 <LL_RCC_SetI2CClockSource>:
{
 8004c70:	b480      	push	{r7}
 8004c72:	b083      	sub	sp, #12
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8004c78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004c7c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	091b      	lsrs	r3, r3, #4
 8004c84:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8004c88:	43db      	mvns	r3, r3
 8004c8a:	401a      	ands	r2, r3
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	011b      	lsls	r3, r3, #4
 8004c90:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8004c94:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004c9e:	bf00      	nop
 8004ca0:	370c      	adds	r7, #12
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca8:	4770      	bx	lr

08004caa <LL_RCC_SetLPTIMClockSource>:
{
 8004caa:	b480      	push	{r7}
 8004cac:	b083      	sub	sp, #12
 8004cae:	af00      	add	r7, sp, #0
 8004cb0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8004cb2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004cb6:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	0c1b      	lsrs	r3, r3, #16
 8004cbe:	041b      	lsls	r3, r3, #16
 8004cc0:	43db      	mvns	r3, r3
 8004cc2:	401a      	ands	r2, r3
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	041b      	lsls	r3, r3, #16
 8004cc8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004cd2:	bf00      	nop
 8004cd4:	370c      	adds	r7, #12
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cdc:	4770      	bx	lr

08004cde <LL_RCC_SetSAIClockSource>:
{
 8004cde:	b480      	push	{r7}
 8004ce0:	b083      	sub	sp, #12
 8004ce2:	af00      	add	r7, sp, #0
 8004ce4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8004ce6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cee:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004cf2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004cfe:	bf00      	nop
 8004d00:	370c      	adds	r7, #12
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr

08004d0a <LL_RCC_SetRNGClockSource>:
{
 8004d0a:	b480      	push	{r7}
 8004d0c:	b083      	sub	sp, #12
 8004d0e:	af00      	add	r7, sp, #0
 8004d10:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8004d12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d1a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8004d1e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	4313      	orrs	r3, r2
 8004d26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004d2a:	bf00      	nop
 8004d2c:	370c      	adds	r7, #12
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d34:	4770      	bx	lr

08004d36 <LL_RCC_SetCLK48ClockSource>:
{
 8004d36:	b480      	push	{r7}
 8004d38:	b083      	sub	sp, #12
 8004d3a:	af00      	add	r7, sp, #0
 8004d3c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8004d3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d46:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004d4a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	4313      	orrs	r3, r2
 8004d52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004d56:	bf00      	nop
 8004d58:	370c      	adds	r7, #12
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d60:	4770      	bx	lr

08004d62 <LL_RCC_SetUSBClockSource>:
{
 8004d62:	b580      	push	{r7, lr}
 8004d64:	b082      	sub	sp, #8
 8004d66:	af00      	add	r7, sp, #0
 8004d68:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f7ff ffe3 	bl	8004d36 <LL_RCC_SetCLK48ClockSource>
}
 8004d70:	bf00      	nop
 8004d72:	3708      	adds	r7, #8
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}

08004d78 <LL_RCC_SetADCClockSource>:
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b083      	sub	sp, #12
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8004d80:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d88:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004d8c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	4313      	orrs	r3, r2
 8004d94:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004d98:	bf00      	nop
 8004d9a:	370c      	adds	r7, #12
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr

08004da4 <LL_RCC_SetRTCClockSource>:
{
 8004da4:	b480      	push	{r7}
 8004da6:	b083      	sub	sp, #12
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8004dac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004db0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004db4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004db8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8004dc4:	bf00      	nop
 8004dc6:	370c      	adds	r7, #12
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dce:	4770      	bx	lr

08004dd0 <LL_RCC_GetRTCClockSource>:
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8004dd4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004dd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ddc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	46bd      	mov	sp, r7
 8004de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de8:	4770      	bx	lr

08004dea <LL_RCC_ForceBackupDomainReset>:
{
 8004dea:	b480      	push	{r7}
 8004dec:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004dee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004df6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004dfa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004dfe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8004e02:	bf00      	nop
 8004e04:	46bd      	mov	sp, r7
 8004e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0a:	4770      	bx	lr

08004e0c <LL_RCC_ReleaseBackupDomainReset>:
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004e10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e18:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004e1c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e20:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8004e24:	bf00      	nop
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr

08004e2e <LL_RCC_PLLSAI1_Enable>:
{
 8004e2e:	b480      	push	{r7}
 8004e30:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8004e32:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004e3c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004e40:	6013      	str	r3, [r2, #0]
}
 8004e42:	bf00      	nop
 8004e44:	46bd      	mov	sp, r7
 8004e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4a:	4770      	bx	lr

08004e4c <LL_RCC_PLLSAI1_Disable>:
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8004e50:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004e5a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004e5e:	6013      	str	r3, [r2, #0]
}
 8004e60:	bf00      	nop
 8004e62:	46bd      	mov	sp, r7
 8004e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e68:	4770      	bx	lr

08004e6a <LL_RCC_PLLSAI1_IsReady>:
{
 8004e6a:	b480      	push	{r7}
 8004e6c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8004e6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e78:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004e7c:	d101      	bne.n	8004e82 <LL_RCC_PLLSAI1_IsReady+0x18>
 8004e7e:	2301      	movs	r3, #1
 8004e80:	e000      	b.n	8004e84 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8004e82:	2300      	movs	r3, #0
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	46bd      	mov	sp, r7
 8004e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8c:	4770      	bx	lr

08004e8e <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e8e:	b580      	push	{r7, lr}
 8004e90:	b088      	sub	sp, #32
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8004e96:	2300      	movs	r3, #0
 8004e98:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d034      	beq.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eae:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004eb2:	d021      	beq.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8004eb4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004eb8:	d81b      	bhi.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004eba:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004ebe:	d01d      	beq.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8004ec0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004ec4:	d815      	bhi.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d00b      	beq.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8004eca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004ece:	d110      	bne.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8004ed0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ed4:	68db      	ldr	r3, [r3, #12]
 8004ed6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004eda:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ede:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8004ee0:	e00d      	b.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	3304      	adds	r3, #4
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f000 f947 	bl	800517a <RCCEx_PLLSAI1_ConfigNP>
 8004eec:	4603      	mov	r3, r0
 8004eee:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004ef0:	e005      	b.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	77fb      	strb	r3, [r7, #31]
        break;
 8004ef6:	e002      	b.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8004ef8:	bf00      	nop
 8004efa:	e000      	b.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8004efc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004efe:	7ffb      	ldrb	r3, [r7, #31]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d105      	bne.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f08:	4618      	mov	r0, r3
 8004f0a:	f7ff fee8 	bl	8004cde <LL_RCC_SetSAIClockSource>
 8004f0e:	e001      	b.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f10:	7ffb      	ldrb	r3, [r7, #31]
 8004f12:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d046      	beq.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8004f20:	f7ff ff56 	bl	8004dd0 <LL_RCC_GetRTCClockSource>
 8004f24:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f2a:	69ba      	ldr	r2, [r7, #24]
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	d03c      	beq.n	8004faa <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004f30:	f7fe fc68 	bl	8003804 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8004f34:	69bb      	ldr	r3, [r7, #24]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d105      	bne.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f7ff ff30 	bl	8004da4 <LL_RCC_SetRTCClockSource>
 8004f44:	e02e      	b.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8004f46:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f4e:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8004f50:	f7ff ff4b 	bl	8004dea <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8004f54:	f7ff ff5a 	bl	8004e0c <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f62:	4313      	orrs	r3, r2
 8004f64:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8004f66:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8004f70:	f7ff fdf0 	bl	8004b54 <LL_RCC_LSE_IsEnabled>
 8004f74:	4603      	mov	r3, r0
 8004f76:	2b01      	cmp	r3, #1
 8004f78:	d114      	bne.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004f7a:	f7fd fd2d 	bl	80029d8 <HAL_GetTick>
 8004f7e:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8004f80:	e00b      	b.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f82:	f7fd fd29 	bl	80029d8 <HAL_GetTick>
 8004f86:	4602      	mov	r2, r0
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	1ad3      	subs	r3, r2, r3
 8004f8c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d902      	bls.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8004f94:	2303      	movs	r3, #3
 8004f96:	77fb      	strb	r3, [r7, #31]
              break;
 8004f98:	e004      	b.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8004f9a:	f7ff fded 	bl	8004b78 <LL_RCC_LSE_IsReady>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d1ee      	bne.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8004fa4:	7ffb      	ldrb	r3, [r7, #31]
 8004fa6:	77bb      	strb	r3, [r7, #30]
 8004fa8:	e001      	b.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004faa:	7ffb      	ldrb	r3, [r7, #31]
 8004fac:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f003 0301 	and.w	r3, r3, #1
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d004      	beq.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	699b      	ldr	r3, [r3, #24]
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	f7ff fe2a 	bl	8004c18 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f003 0302 	and.w	r3, r3, #2
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d004      	beq.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	69db      	ldr	r3, [r3, #28]
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f7ff fe35 	bl	8004c44 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f003 0310 	and.w	r3, r3, #16
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d004      	beq.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fea:	4618      	mov	r0, r3
 8004fec:	f7ff fe5d 	bl	8004caa <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f003 0320 	and.w	r3, r3, #32
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d004      	beq.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005000:	4618      	mov	r0, r3
 8005002:	f7ff fe52 	bl	8004caa <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f003 0304 	and.w	r3, r3, #4
 800500e:	2b00      	cmp	r3, #0
 8005010:	d004      	beq.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6a1b      	ldr	r3, [r3, #32]
 8005016:	4618      	mov	r0, r3
 8005018:	f7ff fe2a 	bl	8004c70 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f003 0308 	and.w	r3, r3, #8
 8005024:	2b00      	cmp	r3, #0
 8005026:	d004      	beq.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800502c:	4618      	mov	r0, r3
 800502e:	f7ff fe1f 	bl	8004c70 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800503a:	2b00      	cmp	r3, #0
 800503c:	d022      	beq.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005042:	4618      	mov	r0, r3
 8005044:	f7ff fe8d 	bl	8004d62 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800504c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005050:	d107      	bne.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8005052:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005056:	68db      	ldr	r3, [r3, #12]
 8005058:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800505c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005060:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005066:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800506a:	d10b      	bne.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	3304      	adds	r3, #4
 8005070:	4618      	mov	r0, r3
 8005072:	f000 f8dd 	bl	8005230 <RCCEx_PLLSAI1_ConfigNQ>
 8005076:	4603      	mov	r3, r0
 8005078:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800507a:	7ffb      	ldrb	r3, [r7, #31]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d001      	beq.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8005080:	7ffb      	ldrb	r3, [r7, #31]
 8005082:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800508c:	2b00      	cmp	r3, #0
 800508e:	d02b      	beq.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005094:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005098:	d008      	beq.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800509e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80050a2:	d003      	beq.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d105      	bne.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050b0:	4618      	mov	r0, r3
 80050b2:	f7ff fe2a 	bl	8004d0a <LL_RCC_SetRNGClockSource>
 80050b6:	e00a      	b.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0x240>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050bc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80050c0:	60fb      	str	r3, [r7, #12]
 80050c2:	2000      	movs	r0, #0
 80050c4:	f7ff fe21 	bl	8004d0a <LL_RCC_SetRNGClockSource>
 80050c8:	68f8      	ldr	r0, [r7, #12]
 80050ca:	f7ff fe34 	bl	8004d36 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050d2:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 80050d6:	d107      	bne.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80050d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80050dc:	68db      	ldr	r3, [r3, #12]
 80050de:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80050e2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80050e6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d022      	beq.n	800513a <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050f8:	4618      	mov	r0, r3
 80050fa:	f7ff fe3d 	bl	8004d78 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005102:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005106:	d107      	bne.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005108:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800510c:	68db      	ldr	r3, [r3, #12]
 800510e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005112:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005116:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800511c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005120:	d10b      	bne.n	800513a <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	3304      	adds	r3, #4
 8005126:	4618      	mov	r0, r3
 8005128:	f000 f8dd 	bl	80052e6 <RCCEx_PLLSAI1_ConfigNR>
 800512c:	4603      	mov	r3, r0
 800512e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005130:	7ffb      	ldrb	r3, [r7, #31]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d001      	beq.n	800513a <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8005136:	7ffb      	ldrb	r3, [r7, #31]
 8005138:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005142:	2b00      	cmp	r3, #0
 8005144:	d004      	beq.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800514a:	4618      	mov	r0, r3
 800514c:	f7ff fd26 	bl	8004b9c <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005158:	2b00      	cmp	r3, #0
 800515a:	d009      	beq.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005160:	4618      	mov	r0, r3
 8005162:	f7ff fd45 	bl	8004bf0 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800516a:	4618      	mov	r0, r3
 800516c:	f7ff fd2c 	bl	8004bc8 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8005170:	7fbb      	ldrb	r3, [r7, #30]
}
 8005172:	4618      	mov	r0, r3
 8005174:	3720      	adds	r7, #32
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}

0800517a <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800517a:	b580      	push	{r7, lr}
 800517c:	b084      	sub	sp, #16
 800517e:	af00      	add	r7, sp, #0
 8005180:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005182:	2300      	movs	r3, #0
 8005184:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005186:	f7ff fe61 	bl	8004e4c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800518a:	f7fd fc25 	bl	80029d8 <HAL_GetTick>
 800518e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005190:	e009      	b.n	80051a6 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005192:	f7fd fc21 	bl	80029d8 <HAL_GetTick>
 8005196:	4602      	mov	r2, r0
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	1ad3      	subs	r3, r2, r3
 800519c:	2b02      	cmp	r3, #2
 800519e:	d902      	bls.n	80051a6 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80051a0:	2303      	movs	r3, #3
 80051a2:	73fb      	strb	r3, [r7, #15]
      break;
 80051a4:	e004      	b.n	80051b0 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80051a6:	f7ff fe60 	bl	8004e6a <LL_RCC_PLLSAI1_IsReady>
 80051aa:	4603      	mov	r3, r0
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d1f0      	bne.n	8005192 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80051b0:	7bfb      	ldrb	r3, [r7, #15]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d137      	bne.n	8005226 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80051b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80051ba:	691b      	ldr	r3, [r3, #16]
 80051bc:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	021b      	lsls	r3, r3, #8
 80051c6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80051ca:	4313      	orrs	r3, r2
 80051cc:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80051ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80051d2:	691b      	ldr	r3, [r3, #16]
 80051d4:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80051e0:	4313      	orrs	r3, r2
 80051e2:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80051e4:	f7ff fe23 	bl	8004e2e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051e8:	f7fd fbf6 	bl	80029d8 <HAL_GetTick>
 80051ec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80051ee:	e009      	b.n	8005204 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80051f0:	f7fd fbf2 	bl	80029d8 <HAL_GetTick>
 80051f4:	4602      	mov	r2, r0
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	1ad3      	subs	r3, r2, r3
 80051fa:	2b02      	cmp	r3, #2
 80051fc:	d902      	bls.n	8005204 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80051fe:	2303      	movs	r3, #3
 8005200:	73fb      	strb	r3, [r7, #15]
        break;
 8005202:	e004      	b.n	800520e <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005204:	f7ff fe31 	bl	8004e6a <LL_RCC_PLLSAI1_IsReady>
 8005208:	4603      	mov	r3, r0
 800520a:	2b01      	cmp	r3, #1
 800520c:	d1f0      	bne.n	80051f0 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800520e:	7bfb      	ldrb	r3, [r7, #15]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d108      	bne.n	8005226 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005214:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005218:	691a      	ldr	r2, [r3, #16]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	691b      	ldr	r3, [r3, #16]
 800521e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005222:	4313      	orrs	r3, r2
 8005224:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005226:	7bfb      	ldrb	r3, [r7, #15]
}
 8005228:	4618      	mov	r0, r3
 800522a:	3710      	adds	r7, #16
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}

08005230 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b084      	sub	sp, #16
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005238:	2300      	movs	r3, #0
 800523a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800523c:	f7ff fe06 	bl	8004e4c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005240:	f7fd fbca 	bl	80029d8 <HAL_GetTick>
 8005244:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005246:	e009      	b.n	800525c <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005248:	f7fd fbc6 	bl	80029d8 <HAL_GetTick>
 800524c:	4602      	mov	r2, r0
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	1ad3      	subs	r3, r2, r3
 8005252:	2b02      	cmp	r3, #2
 8005254:	d902      	bls.n	800525c <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8005256:	2303      	movs	r3, #3
 8005258:	73fb      	strb	r3, [r7, #15]
      break;
 800525a:	e004      	b.n	8005266 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800525c:	f7ff fe05 	bl	8004e6a <LL_RCC_PLLSAI1_IsReady>
 8005260:	4603      	mov	r3, r0
 8005262:	2b00      	cmp	r3, #0
 8005264:	d1f0      	bne.n	8005248 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8005266:	7bfb      	ldrb	r3, [r7, #15]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d137      	bne.n	80052dc <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800526c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005270:	691b      	ldr	r3, [r3, #16]
 8005272:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	021b      	lsls	r3, r3, #8
 800527c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005280:	4313      	orrs	r3, r2
 8005282:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8005284:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005288:	691b      	ldr	r3, [r3, #16]
 800528a:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005296:	4313      	orrs	r3, r2
 8005298:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800529a:	f7ff fdc8 	bl	8004e2e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800529e:	f7fd fb9b 	bl	80029d8 <HAL_GetTick>
 80052a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80052a4:	e009      	b.n	80052ba <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80052a6:	f7fd fb97 	bl	80029d8 <HAL_GetTick>
 80052aa:	4602      	mov	r2, r0
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	1ad3      	subs	r3, r2, r3
 80052b0:	2b02      	cmp	r3, #2
 80052b2:	d902      	bls.n	80052ba <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80052b4:	2303      	movs	r3, #3
 80052b6:	73fb      	strb	r3, [r7, #15]
        break;
 80052b8:	e004      	b.n	80052c4 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80052ba:	f7ff fdd6 	bl	8004e6a <LL_RCC_PLLSAI1_IsReady>
 80052be:	4603      	mov	r3, r0
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	d1f0      	bne.n	80052a6 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80052c4:	7bfb      	ldrb	r3, [r7, #15]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d108      	bne.n	80052dc <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80052ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80052ce:	691a      	ldr	r2, [r3, #16]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	691b      	ldr	r3, [r3, #16]
 80052d4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80052d8:	4313      	orrs	r3, r2
 80052da:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80052dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80052de:	4618      	mov	r0, r3
 80052e0:	3710      	adds	r7, #16
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}

080052e6 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80052e6:	b580      	push	{r7, lr}
 80052e8:	b084      	sub	sp, #16
 80052ea:	af00      	add	r7, sp, #0
 80052ec:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80052ee:	2300      	movs	r3, #0
 80052f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80052f2:	f7ff fdab 	bl	8004e4c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80052f6:	f7fd fb6f 	bl	80029d8 <HAL_GetTick>
 80052fa:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80052fc:	e009      	b.n	8005312 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80052fe:	f7fd fb6b 	bl	80029d8 <HAL_GetTick>
 8005302:	4602      	mov	r2, r0
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	1ad3      	subs	r3, r2, r3
 8005308:	2b02      	cmp	r3, #2
 800530a:	d902      	bls.n	8005312 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800530c:	2303      	movs	r3, #3
 800530e:	73fb      	strb	r3, [r7, #15]
      break;
 8005310:	e004      	b.n	800531c <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005312:	f7ff fdaa 	bl	8004e6a <LL_RCC_PLLSAI1_IsReady>
 8005316:	4603      	mov	r3, r0
 8005318:	2b00      	cmp	r3, #0
 800531a:	d1f0      	bne.n	80052fe <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800531c:	7bfb      	ldrb	r3, [r7, #15]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d137      	bne.n	8005392 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005322:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005326:	691b      	ldr	r3, [r3, #16]
 8005328:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	021b      	lsls	r3, r3, #8
 8005332:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005336:	4313      	orrs	r3, r2
 8005338:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800533a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800533e:	691b      	ldr	r3, [r3, #16]
 8005340:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	68db      	ldr	r3, [r3, #12]
 8005348:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800534c:	4313      	orrs	r3, r2
 800534e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005350:	f7ff fd6d 	bl	8004e2e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005354:	f7fd fb40 	bl	80029d8 <HAL_GetTick>
 8005358:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800535a:	e009      	b.n	8005370 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800535c:	f7fd fb3c 	bl	80029d8 <HAL_GetTick>
 8005360:	4602      	mov	r2, r0
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	1ad3      	subs	r3, r2, r3
 8005366:	2b02      	cmp	r3, #2
 8005368:	d902      	bls.n	8005370 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800536a:	2303      	movs	r3, #3
 800536c:	73fb      	strb	r3, [r7, #15]
        break;
 800536e:	e004      	b.n	800537a <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005370:	f7ff fd7b 	bl	8004e6a <LL_RCC_PLLSAI1_IsReady>
 8005374:	4603      	mov	r3, r0
 8005376:	2b01      	cmp	r3, #1
 8005378:	d1f0      	bne.n	800535c <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800537a:	7bfb      	ldrb	r3, [r7, #15]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d108      	bne.n	8005392 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005380:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005384:	691a      	ldr	r2, [r3, #16]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	691b      	ldr	r3, [r3, #16]
 800538a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800538e:	4313      	orrs	r3, r2
 8005390:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005392:	7bfb      	ldrb	r3, [r7, #15]
}
 8005394:	4618      	mov	r0, r3
 8005396:	3710      	adds	r7, #16
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}

0800539c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b084      	sub	sp, #16
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d101      	bne.n	80053ae <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80053aa:	2301      	movs	r3, #1
 80053ac:	e09f      	b.n	80054ee <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80053b4:	b2db      	uxtb	r3, r3
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d106      	bne.n	80053c8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2200      	movs	r2, #0
 80053be:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f7fd f896 	bl	80024f4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2202      	movs	r2, #2
 80053cc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80053d0:	4b49      	ldr	r3, [pc, #292]	@ (80054f8 <HAL_RTC_Init+0x15c>)
 80053d2:	68db      	ldr	r3, [r3, #12]
 80053d4:	f003 0310 	and.w	r3, r3, #16
 80053d8:	2b10      	cmp	r3, #16
 80053da:	d07e      	beq.n	80054da <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	22ca      	movs	r2, #202	@ 0xca
 80053e2:	625a      	str	r2, [r3, #36]	@ 0x24
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	2253      	movs	r2, #83	@ 0x53
 80053ea:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	f000 f8ab 	bl	8005548 <RTC_EnterInitMode>
 80053f2:	4603      	mov	r3, r0
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d00a      	beq.n	800540e <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	22ff      	movs	r2, #255	@ 0xff
 80053fe:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2204      	movs	r2, #4
 8005404:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      status = HAL_ERROR;
 8005408:	2301      	movs	r3, #1
 800540a:	73fb      	strb	r3, [r7, #15]
 800540c:	e067      	b.n	80054de <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	689b      	ldr	r3, [r3, #8]
 8005414:	687a      	ldr	r2, [r7, #4]
 8005416:	6812      	ldr	r2, [r2, #0]
 8005418:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800541c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005420:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	6899      	ldr	r1, [r3, #8]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	685a      	ldr	r2, [r3, #4]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	691b      	ldr	r3, [r3, #16]
 8005430:	431a      	orrs	r2, r3
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	699b      	ldr	r3, [r3, #24]
 8005436:	431a      	orrs	r2, r3
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	430a      	orrs	r2, r1
 800543e:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	687a      	ldr	r2, [r7, #4]
 8005446:	68d2      	ldr	r2, [r2, #12]
 8005448:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	6919      	ldr	r1, [r3, #16]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	689b      	ldr	r3, [r3, #8]
 8005454:	041a      	lsls	r2, r3, #16
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	430a      	orrs	r2, r1
 800545c:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	68da      	ldr	r2, [r3, #12]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800546c:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f022 0203 	bic.w	r2, r2, #3
 800547c:	64da      	str	r2, [r3, #76]	@ 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	69da      	ldr	r2, [r3, #28]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	695b      	ldr	r3, [r3, #20]
 800548c:	431a      	orrs	r2, r3
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	430a      	orrs	r2, r1
 8005494:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	f003 0320 	and.w	r3, r3, #32
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d113      	bne.n	80054cc <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80054a4:	6878      	ldr	r0, [r7, #4]
 80054a6:	f000 f829 	bl	80054fc <HAL_RTC_WaitForSynchro>
 80054aa:	4603      	mov	r3, r0
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d00d      	beq.n	80054cc <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	22ff      	movs	r2, #255	@ 0xff
 80054b6:	625a      	str	r2, [r3, #36]	@ 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2204      	movs	r2, #4
 80054bc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2200      	movs	r2, #0
 80054c4:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 80054c8:	2301      	movs	r3, #1
 80054ca:	e010      	b.n	80054ee <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	22ff      	movs	r2, #255	@ 0xff
 80054d2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      status = HAL_OK;
 80054d4:	2300      	movs	r3, #0
 80054d6:	73fb      	strb	r3, [r7, #15]
 80054d8:	e001      	b.n	80054de <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 80054da:	2300      	movs	r3, #0
 80054dc:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80054de:	7bfb      	ldrb	r3, [r7, #15]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d103      	bne.n	80054ec <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2201      	movs	r2, #1
 80054e8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  return status;
 80054ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3710      	adds	r7, #16
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}
 80054f6:	bf00      	nop
 80054f8:	40002800 	.word	0x40002800

080054fc <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b084      	sub	sp, #16
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	68da      	ldr	r2, [r3, #12]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005512:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8005514:	f7fd fa60 	bl	80029d8 <HAL_GetTick>
 8005518:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800551a:	e009      	b.n	8005530 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800551c:	f7fd fa5c 	bl	80029d8 <HAL_GetTick>
 8005520:	4602      	mov	r2, r0
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	1ad3      	subs	r3, r2, r3
 8005526:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800552a:	d901      	bls.n	8005530 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800552c:	2303      	movs	r3, #3
 800552e:	e007      	b.n	8005540 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	68db      	ldr	r3, [r3, #12]
 8005536:	f003 0320 	and.w	r3, r3, #32
 800553a:	2b00      	cmp	r3, #0
 800553c:	d0ee      	beq.n	800551c <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800553e:	2300      	movs	r3, #0
}
 8005540:	4618      	mov	r0, r3
 8005542:	3710      	adds	r7, #16
 8005544:	46bd      	mov	sp, r7
 8005546:	bd80      	pop	{r7, pc}

08005548 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b084      	sub	sp, #16
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	68db      	ldr	r3, [r3, #12]
 8005556:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800555a:	2b00      	cmp	r3, #0
 800555c:	d119      	bne.n	8005592 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f04f 32ff 	mov.w	r2, #4294967295
 8005566:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005568:	f7fd fa36 	bl	80029d8 <HAL_GetTick>
 800556c:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800556e:	e009      	b.n	8005584 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005570:	f7fd fa32 	bl	80029d8 <HAL_GetTick>
 8005574:	4602      	mov	r2, r0
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	1ad3      	subs	r3, r2, r3
 800557a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800557e:	d901      	bls.n	8005584 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8005580:	2303      	movs	r3, #3
 8005582:	e007      	b.n	8005594 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	68db      	ldr	r3, [r3, #12]
 800558a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800558e:	2b00      	cmp	r3, #0
 8005590:	d0ee      	beq.n	8005570 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8005592:	2300      	movs	r3, #0
}
 8005594:	4618      	mov	r0, r3
 8005596:	3710      	adds	r7, #16
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}

0800559c <LL_RCC_GetUSARTClockSource>:
{
 800559c:	b480      	push	{r7}
 800559e:	b083      	sub	sp, #12
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 80055a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80055a8:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	4013      	ands	r3, r2
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	370c      	adds	r7, #12
 80055b4:	46bd      	mov	sp, r7
 80055b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ba:	4770      	bx	lr

080055bc <LL_RCC_GetLPUARTClockSource>:
{
 80055bc:	b480      	push	{r7}
 80055be:	b083      	sub	sp, #12
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80055c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80055c8:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	4013      	ands	r3, r2
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	370c      	adds	r7, #12
 80055d4:	46bd      	mov	sp, r7
 80055d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055da:	4770      	bx	lr

080055dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b082      	sub	sp, #8
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d101      	bne.n	80055ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80055ea:	2301      	movs	r3, #1
 80055ec:	e042      	b.n	8005674 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d106      	bne.n	8005606 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2200      	movs	r2, #0
 80055fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005600:	6878      	ldr	r0, [r7, #4]
 8005602:	f7fc ffa3 	bl	800254c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2224      	movs	r2, #36	@ 0x24
 800560a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	681a      	ldr	r2, [r3, #0]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f022 0201 	bic.w	r2, r2, #1
 800561c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005622:	2b00      	cmp	r3, #0
 8005624:	d002      	beq.n	800562c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f000 fe32 	bl	8006290 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800562c:	6878      	ldr	r0, [r7, #4]
 800562e:	f000 fc07 	bl	8005e40 <UART_SetConfig>
 8005632:	4603      	mov	r3, r0
 8005634:	2b01      	cmp	r3, #1
 8005636:	d101      	bne.n	800563c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005638:	2301      	movs	r3, #1
 800563a:	e01b      	b.n	8005674 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	685a      	ldr	r2, [r3, #4]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800564a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	689a      	ldr	r2, [r3, #8]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800565a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	681a      	ldr	r2, [r3, #0]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f042 0201 	orr.w	r2, r2, #1
 800566a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800566c:	6878      	ldr	r0, [r7, #4]
 800566e:	f000 feb1 	bl	80063d4 <UART_CheckIdleState>
 8005672:	4603      	mov	r3, r0
}
 8005674:	4618      	mov	r0, r3
 8005676:	3708      	adds	r7, #8
 8005678:	46bd      	mov	sp, r7
 800567a:	bd80      	pop	{r7, pc}

0800567c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b08a      	sub	sp, #40	@ 0x28
 8005680:	af00      	add	r7, sp, #0
 8005682:	60f8      	str	r0, [r7, #12]
 8005684:	60b9      	str	r1, [r7, #8]
 8005686:	4613      	mov	r3, r2
 8005688:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005690:	2b20      	cmp	r3, #32
 8005692:	d167      	bne.n	8005764 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d002      	beq.n	80056a0 <HAL_UART_Transmit_DMA+0x24>
 800569a:	88fb      	ldrh	r3, [r7, #6]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d101      	bne.n	80056a4 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80056a0:	2301      	movs	r3, #1
 80056a2:	e060      	b.n	8005766 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	68ba      	ldr	r2, [r7, #8]
 80056a8:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	88fa      	ldrh	r2, [r7, #6]
 80056ae:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	88fa      	ldrh	r2, [r7, #6]
 80056b6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	2200      	movs	r2, #0
 80056be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2221      	movs	r2, #33	@ 0x21
 80056c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d028      	beq.n	8005724 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80056d6:	4a26      	ldr	r2, [pc, #152]	@ (8005770 <HAL_UART_Transmit_DMA+0xf4>)
 80056d8:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80056de:	4a25      	ldr	r2, [pc, #148]	@ (8005774 <HAL_UART_Transmit_DMA+0xf8>)
 80056e0:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80056e6:	4a24      	ldr	r2, [pc, #144]	@ (8005778 <HAL_UART_Transmit_DMA+0xfc>)
 80056e8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80056ee:	2200      	movs	r2, #0
 80056f0:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056fa:	4619      	mov	r1, r3
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	3328      	adds	r3, #40	@ 0x28
 8005702:	461a      	mov	r2, r3
 8005704:	88fb      	ldrh	r3, [r7, #6]
 8005706:	f7fd fbc1 	bl	8002e8c <HAL_DMA_Start_IT>
 800570a:	4603      	mov	r3, r0
 800570c:	2b00      	cmp	r3, #0
 800570e:	d009      	beq.n	8005724 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2210      	movs	r2, #16
 8005714:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2220      	movs	r2, #32
 800571c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8005720:	2301      	movs	r3, #1
 8005722:	e020      	b.n	8005766 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	2240      	movs	r2, #64	@ 0x40
 800572a:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	3308      	adds	r3, #8
 8005732:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	e853 3f00 	ldrex	r3, [r3]
 800573a:	613b      	str	r3, [r7, #16]
   return(result);
 800573c:	693b      	ldr	r3, [r7, #16]
 800573e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005742:	627b      	str	r3, [r7, #36]	@ 0x24
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	3308      	adds	r3, #8
 800574a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800574c:	623a      	str	r2, [r7, #32]
 800574e:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005750:	69f9      	ldr	r1, [r7, #28]
 8005752:	6a3a      	ldr	r2, [r7, #32]
 8005754:	e841 2300 	strex	r3, r2, [r1]
 8005758:	61bb      	str	r3, [r7, #24]
   return(result);
 800575a:	69bb      	ldr	r3, [r7, #24]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d1e5      	bne.n	800572c <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8005760:	2300      	movs	r3, #0
 8005762:	e000      	b.n	8005766 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8005764:	2302      	movs	r3, #2
  }
}
 8005766:	4618      	mov	r0, r3
 8005768:	3728      	adds	r7, #40	@ 0x28
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}
 800576e:	bf00      	nop
 8005770:	08006751 	.word	0x08006751
 8005774:	080067eb 	.word	0x080067eb
 8005778:	08006807 	.word	0x08006807

0800577c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b0ba      	sub	sp, #232	@ 0xe8
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	69db      	ldr	r3, [r3, #28]
 800578a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	689b      	ldr	r3, [r3, #8]
 800579e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80057a2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80057a6:	f640 030f 	movw	r3, #2063	@ 0x80f
 80057aa:	4013      	ands	r3, r2
 80057ac:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80057b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d11b      	bne.n	80057f0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80057b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057bc:	f003 0320 	and.w	r3, r3, #32
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d015      	beq.n	80057f0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80057c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057c8:	f003 0320 	and.w	r3, r3, #32
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d105      	bne.n	80057dc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80057d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80057d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d009      	beq.n	80057f0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	f000 8300 	beq.w	8005de6 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	4798      	blx	r3
      }
      return;
 80057ee:	e2fa      	b.n	8005de6 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80057f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	f000 8123 	beq.w	8005a40 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80057fa:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80057fe:	4b8d      	ldr	r3, [pc, #564]	@ (8005a34 <HAL_UART_IRQHandler+0x2b8>)
 8005800:	4013      	ands	r3, r2
 8005802:	2b00      	cmp	r3, #0
 8005804:	d106      	bne.n	8005814 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005806:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800580a:	4b8b      	ldr	r3, [pc, #556]	@ (8005a38 <HAL_UART_IRQHandler+0x2bc>)
 800580c:	4013      	ands	r3, r2
 800580e:	2b00      	cmp	r3, #0
 8005810:	f000 8116 	beq.w	8005a40 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005814:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005818:	f003 0301 	and.w	r3, r3, #1
 800581c:	2b00      	cmp	r3, #0
 800581e:	d011      	beq.n	8005844 <HAL_UART_IRQHandler+0xc8>
 8005820:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005824:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005828:	2b00      	cmp	r3, #0
 800582a:	d00b      	beq.n	8005844 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	2201      	movs	r2, #1
 8005832:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800583a:	f043 0201 	orr.w	r2, r3, #1
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005844:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005848:	f003 0302 	and.w	r3, r3, #2
 800584c:	2b00      	cmp	r3, #0
 800584e:	d011      	beq.n	8005874 <HAL_UART_IRQHandler+0xf8>
 8005850:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005854:	f003 0301 	and.w	r3, r3, #1
 8005858:	2b00      	cmp	r3, #0
 800585a:	d00b      	beq.n	8005874 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	2202      	movs	r2, #2
 8005862:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800586a:	f043 0204 	orr.w	r2, r3, #4
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005874:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005878:	f003 0304 	and.w	r3, r3, #4
 800587c:	2b00      	cmp	r3, #0
 800587e:	d011      	beq.n	80058a4 <HAL_UART_IRQHandler+0x128>
 8005880:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005884:	f003 0301 	and.w	r3, r3, #1
 8005888:	2b00      	cmp	r3, #0
 800588a:	d00b      	beq.n	80058a4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	2204      	movs	r2, #4
 8005892:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800589a:	f043 0202 	orr.w	r2, r3, #2
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80058a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058a8:	f003 0308 	and.w	r3, r3, #8
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d017      	beq.n	80058e0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80058b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058b4:	f003 0320 	and.w	r3, r3, #32
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d105      	bne.n	80058c8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80058bc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80058c0:	4b5c      	ldr	r3, [pc, #368]	@ (8005a34 <HAL_UART_IRQHandler+0x2b8>)
 80058c2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d00b      	beq.n	80058e0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	2208      	movs	r2, #8
 80058ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058d6:	f043 0208 	orr.w	r2, r3, #8
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80058e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d012      	beq.n	8005912 <HAL_UART_IRQHandler+0x196>
 80058ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058f0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d00c      	beq.n	8005912 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005900:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005908:	f043 0220 	orr.w	r2, r3, #32
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005918:	2b00      	cmp	r3, #0
 800591a:	f000 8266 	beq.w	8005dea <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800591e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005922:	f003 0320 	and.w	r3, r3, #32
 8005926:	2b00      	cmp	r3, #0
 8005928:	d013      	beq.n	8005952 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800592a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800592e:	f003 0320 	and.w	r3, r3, #32
 8005932:	2b00      	cmp	r3, #0
 8005934:	d105      	bne.n	8005942 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005936:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800593a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800593e:	2b00      	cmp	r3, #0
 8005940:	d007      	beq.n	8005952 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005946:	2b00      	cmp	r3, #0
 8005948:	d003      	beq.n	8005952 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005958:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	689b      	ldr	r3, [r3, #8]
 8005962:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005966:	2b40      	cmp	r3, #64	@ 0x40
 8005968:	d005      	beq.n	8005976 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800596a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800596e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005972:	2b00      	cmp	r3, #0
 8005974:	d054      	beq.n	8005a20 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f000 fe84 	bl	8006684 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	689b      	ldr	r3, [r3, #8]
 8005982:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005986:	2b40      	cmp	r3, #64	@ 0x40
 8005988:	d146      	bne.n	8005a18 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	3308      	adds	r3, #8
 8005990:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005994:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005998:	e853 3f00 	ldrex	r3, [r3]
 800599c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80059a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80059a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80059a8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	3308      	adds	r3, #8
 80059b2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80059b6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80059ba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059be:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80059c2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80059c6:	e841 2300 	strex	r3, r2, [r1]
 80059ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80059ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d1d9      	bne.n	800598a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d017      	beq.n	8005a10 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80059e6:	4a15      	ldr	r2, [pc, #84]	@ (8005a3c <HAL_UART_IRQHandler+0x2c0>)
 80059e8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80059f0:	4618      	mov	r0, r3
 80059f2:	f7fd fb25 	bl	8003040 <HAL_DMA_Abort_IT>
 80059f6:	4603      	mov	r3, r0
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d019      	beq.n	8005a30 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a04:	687a      	ldr	r2, [r7, #4]
 8005a06:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8005a0a:	4610      	mov	r0, r2
 8005a0c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a0e:	e00f      	b.n	8005a30 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	f000 f9ff 	bl	8005e14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a16:	e00b      	b.n	8005a30 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	f000 f9fb 	bl	8005e14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a1e:	e007      	b.n	8005a30 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	f000 f9f7 	bl	8005e14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8005a2e:	e1dc      	b.n	8005dea <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a30:	bf00      	nop
    return;
 8005a32:	e1da      	b.n	8005dea <HAL_UART_IRQHandler+0x66e>
 8005a34:	10000001 	.word	0x10000001
 8005a38:	04000120 	.word	0x04000120
 8005a3c:	08006887 	.word	0x08006887

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	f040 8170 	bne.w	8005d2a <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005a4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a4e:	f003 0310 	and.w	r3, r3, #16
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	f000 8169 	beq.w	8005d2a <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005a58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a5c:	f003 0310 	and.w	r3, r3, #16
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	f000 8162 	beq.w	8005d2a <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	2210      	movs	r2, #16
 8005a6c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	689b      	ldr	r3, [r3, #8]
 8005a74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a78:	2b40      	cmp	r3, #64	@ 0x40
 8005a7a:	f040 80d8 	bne.w	8005c2e <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005a8c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	f000 80af 	beq.w	8005bf4 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005a9c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005aa0:	429a      	cmp	r2, r3
 8005aa2:	f080 80a7 	bcs.w	8005bf4 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005aac:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f003 0320 	and.w	r3, r3, #32
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	f040 8087 	bne.w	8005bd2 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005acc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005ad0:	e853 3f00 	ldrex	r3, [r3]
 8005ad4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005ad8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005adc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005ae0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	461a      	mov	r2, r3
 8005aea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005aee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005af2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005af6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005afa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005afe:	e841 2300 	strex	r3, r2, [r1]
 8005b02:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005b06:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d1da      	bne.n	8005ac4 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	3308      	adds	r3, #8
 8005b14:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b16:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005b18:	e853 3f00 	ldrex	r3, [r3]
 8005b1c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005b1e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005b20:	f023 0301 	bic.w	r3, r3, #1
 8005b24:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	3308      	adds	r3, #8
 8005b2e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005b32:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005b36:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b38:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005b3a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005b3e:	e841 2300 	strex	r3, r2, [r1]
 8005b42:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005b44:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d1e1      	bne.n	8005b0e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	3308      	adds	r3, #8
 8005b50:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b52:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005b54:	e853 3f00 	ldrex	r3, [r3]
 8005b58:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005b5a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005b5c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b60:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	3308      	adds	r3, #8
 8005b6a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005b6e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005b70:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b72:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005b74:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005b76:	e841 2300 	strex	r3, r2, [r1]
 8005b7a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005b7c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d1e3      	bne.n	8005b4a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2220      	movs	r2, #32
 8005b86:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b96:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b98:	e853 3f00 	ldrex	r3, [r3]
 8005b9c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005b9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005ba0:	f023 0310 	bic.w	r3, r3, #16
 8005ba4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	461a      	mov	r2, r3
 8005bae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005bb2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005bb4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bb6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005bb8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005bba:	e841 2300 	strex	r3, r2, [r1]
 8005bbe:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005bc0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d1e4      	bne.n	8005b90 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005bcc:	4618      	mov	r0, r3
 8005bce:	f7fd f9d8 	bl	8002f82 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2202      	movs	r2, #2
 8005bd6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005be4:	b29b      	uxth	r3, r3
 8005be6:	1ad3      	subs	r3, r2, r3
 8005be8:	b29b      	uxth	r3, r3
 8005bea:	4619      	mov	r1, r3
 8005bec:	6878      	ldr	r0, [r7, #4]
 8005bee:	f000 f91b 	bl	8005e28 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005bf2:	e0fc      	b.n	8005dee <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005bfa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005bfe:	429a      	cmp	r2, r3
 8005c00:	f040 80f5 	bne.w	8005dee <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f003 0320 	and.w	r3, r3, #32
 8005c12:	2b20      	cmp	r3, #32
 8005c14:	f040 80eb 	bne.w	8005dee <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2202      	movs	r2, #2
 8005c1c:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005c24:	4619      	mov	r1, r3
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f000 f8fe 	bl	8005e28 <HAL_UARTEx_RxEventCallback>
      return;
 8005c2c:	e0df      	b.n	8005dee <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005c3a:	b29b      	uxth	r3, r3
 8005c3c:	1ad3      	subs	r3, r2, r3
 8005c3e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005c48:	b29b      	uxth	r3, r3
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	f000 80d1 	beq.w	8005df2 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8005c50:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	f000 80cc 	beq.w	8005df2 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c62:	e853 3f00 	ldrex	r3, [r3]
 8005c66:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005c68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c6a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005c6e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	461a      	mov	r2, r3
 8005c78:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005c7c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c7e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c80:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005c82:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005c84:	e841 2300 	strex	r3, r2, [r1]
 8005c88:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005c8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d1e4      	bne.n	8005c5a <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	3308      	adds	r3, #8
 8005c96:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c9a:	e853 3f00 	ldrex	r3, [r3]
 8005c9e:	623b      	str	r3, [r7, #32]
   return(result);
 8005ca0:	6a3b      	ldr	r3, [r7, #32]
 8005ca2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005ca6:	f023 0301 	bic.w	r3, r3, #1
 8005caa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	3308      	adds	r3, #8
 8005cb4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005cb8:	633a      	str	r2, [r7, #48]	@ 0x30
 8005cba:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cbc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005cbe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005cc0:	e841 2300 	strex	r3, r2, [r1]
 8005cc4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005cc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d1e1      	bne.n	8005c90 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2220      	movs	r2, #32
 8005cd0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	e853 3f00 	ldrex	r3, [r3]
 8005cec:	60fb      	str	r3, [r7, #12]
   return(result);
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	f023 0310 	bic.w	r3, r3, #16
 8005cf4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	461a      	mov	r2, r3
 8005cfe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005d02:	61fb      	str	r3, [r7, #28]
 8005d04:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d06:	69b9      	ldr	r1, [r7, #24]
 8005d08:	69fa      	ldr	r2, [r7, #28]
 8005d0a:	e841 2300 	strex	r3, r2, [r1]
 8005d0e:	617b      	str	r3, [r7, #20]
   return(result);
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d1e4      	bne.n	8005ce0 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2202      	movs	r2, #2
 8005d1a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005d1c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005d20:	4619      	mov	r1, r3
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f000 f880 	bl	8005e28 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005d28:	e063      	b.n	8005df2 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005d2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d2e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d00e      	beq.n	8005d54 <HAL_UART_IRQHandler+0x5d8>
 8005d36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005d3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d008      	beq.n	8005d54 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005d4a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005d4c:	6878      	ldr	r0, [r7, #4]
 8005d4e:	f000 fddb 	bl	8006908 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005d52:	e051      	b.n	8005df8 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005d54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d014      	beq.n	8005d8a <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005d60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d105      	bne.n	8005d78 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005d6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005d70:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d008      	beq.n	8005d8a <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d03a      	beq.n	8005df6 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	4798      	blx	r3
    }
    return;
 8005d88:	e035      	b.n	8005df6 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005d8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d009      	beq.n	8005daa <HAL_UART_IRQHandler+0x62e>
 8005d96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d003      	beq.n	8005daa <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8005da2:	6878      	ldr	r0, [r7, #4]
 8005da4:	f000 fd85 	bl	80068b2 <UART_EndTransmit_IT>
    return;
 8005da8:	e026      	b.n	8005df8 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005daa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005dae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d009      	beq.n	8005dca <HAL_UART_IRQHandler+0x64e>
 8005db6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005dba:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d003      	beq.n	8005dca <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f000 fdb4 	bl	8006930 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005dc8:	e016      	b.n	8005df8 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005dca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005dce:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d010      	beq.n	8005df8 <HAL_UART_IRQHandler+0x67c>
 8005dd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	da0c      	bge.n	8005df8 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f000 fd9c 	bl	800691c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005de4:	e008      	b.n	8005df8 <HAL_UART_IRQHandler+0x67c>
      return;
 8005de6:	bf00      	nop
 8005de8:	e006      	b.n	8005df8 <HAL_UART_IRQHandler+0x67c>
    return;
 8005dea:	bf00      	nop
 8005dec:	e004      	b.n	8005df8 <HAL_UART_IRQHandler+0x67c>
      return;
 8005dee:	bf00      	nop
 8005df0:	e002      	b.n	8005df8 <HAL_UART_IRQHandler+0x67c>
      return;
 8005df2:	bf00      	nop
 8005df4:	e000      	b.n	8005df8 <HAL_UART_IRQHandler+0x67c>
    return;
 8005df6:	bf00      	nop
  }
}
 8005df8:	37e8      	adds	r7, #232	@ 0xe8
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}
 8005dfe:	bf00      	nop

08005e00 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b083      	sub	sp, #12
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8005e08:	bf00      	nop
 8005e0a:	370c      	adds	r7, #12
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e12:	4770      	bx	lr

08005e14 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005e14:	b480      	push	{r7}
 8005e16:	b083      	sub	sp, #12
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005e1c:	bf00      	nop
 8005e1e:	370c      	adds	r7, #12
 8005e20:	46bd      	mov	sp, r7
 8005e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e26:	4770      	bx	lr

08005e28 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b083      	sub	sp, #12
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
 8005e30:	460b      	mov	r3, r1
 8005e32:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005e34:	bf00      	nop
 8005e36:	370c      	adds	r7, #12
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3e:	4770      	bx	lr

08005e40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e44:	b08c      	sub	sp, #48	@ 0x30
 8005e46:	af00      	add	r7, sp, #0
 8005e48:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	689a      	ldr	r2, [r3, #8]
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	691b      	ldr	r3, [r3, #16]
 8005e58:	431a      	orrs	r2, r3
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	695b      	ldr	r3, [r3, #20]
 8005e5e:	431a      	orrs	r2, r3
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	69db      	ldr	r3, [r3, #28]
 8005e64:	4313      	orrs	r3, r2
 8005e66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005e68:	697b      	ldr	r3, [r7, #20]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	681a      	ldr	r2, [r3, #0]
 8005e6e:	4baf      	ldr	r3, [pc, #700]	@ (800612c <UART_SetConfig+0x2ec>)
 8005e70:	4013      	ands	r3, r2
 8005e72:	697a      	ldr	r2, [r7, #20]
 8005e74:	6812      	ldr	r2, [r2, #0]
 8005e76:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005e78:	430b      	orrs	r3, r1
 8005e7a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e7c:	697b      	ldr	r3, [r7, #20]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	68da      	ldr	r2, [r3, #12]
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	430a      	orrs	r2, r1
 8005e90:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	699b      	ldr	r3, [r3, #24]
 8005e96:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005e98:	697b      	ldr	r3, [r7, #20]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4aa4      	ldr	r2, [pc, #656]	@ (8006130 <UART_SetConfig+0x2f0>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d004      	beq.n	8005eac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	6a1b      	ldr	r3, [r3, #32]
 8005ea6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	689b      	ldr	r3, [r3, #8]
 8005eb2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8005eb6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8005eba:	697a      	ldr	r2, [r7, #20]
 8005ebc:	6812      	ldr	r2, [r2, #0]
 8005ebe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005ec0:	430b      	orrs	r3, r1
 8005ec2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005eca:	f023 010f 	bic.w	r1, r3, #15
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	430a      	orrs	r2, r1
 8005ed8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a95      	ldr	r2, [pc, #596]	@ (8006134 <UART_SetConfig+0x2f4>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d125      	bne.n	8005f30 <UART_SetConfig+0xf0>
 8005ee4:	2003      	movs	r0, #3
 8005ee6:	f7ff fb59 	bl	800559c <LL_RCC_GetUSARTClockSource>
 8005eea:	4603      	mov	r3, r0
 8005eec:	2b03      	cmp	r3, #3
 8005eee:	d81b      	bhi.n	8005f28 <UART_SetConfig+0xe8>
 8005ef0:	a201      	add	r2, pc, #4	@ (adr r2, 8005ef8 <UART_SetConfig+0xb8>)
 8005ef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ef6:	bf00      	nop
 8005ef8:	08005f09 	.word	0x08005f09
 8005efc:	08005f19 	.word	0x08005f19
 8005f00:	08005f11 	.word	0x08005f11
 8005f04:	08005f21 	.word	0x08005f21
 8005f08:	2301      	movs	r3, #1
 8005f0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f0e:	e042      	b.n	8005f96 <UART_SetConfig+0x156>
 8005f10:	2302      	movs	r3, #2
 8005f12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f16:	e03e      	b.n	8005f96 <UART_SetConfig+0x156>
 8005f18:	2304      	movs	r3, #4
 8005f1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f1e:	e03a      	b.n	8005f96 <UART_SetConfig+0x156>
 8005f20:	2308      	movs	r3, #8
 8005f22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f26:	e036      	b.n	8005f96 <UART_SetConfig+0x156>
 8005f28:	2310      	movs	r3, #16
 8005f2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f2e:	e032      	b.n	8005f96 <UART_SetConfig+0x156>
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a7e      	ldr	r2, [pc, #504]	@ (8006130 <UART_SetConfig+0x2f0>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d12a      	bne.n	8005f90 <UART_SetConfig+0x150>
 8005f3a:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8005f3e:	f7ff fb3d 	bl	80055bc <LL_RCC_GetLPUARTClockSource>
 8005f42:	4603      	mov	r3, r0
 8005f44:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005f48:	d01a      	beq.n	8005f80 <UART_SetConfig+0x140>
 8005f4a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005f4e:	d81b      	bhi.n	8005f88 <UART_SetConfig+0x148>
 8005f50:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f54:	d00c      	beq.n	8005f70 <UART_SetConfig+0x130>
 8005f56:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f5a:	d815      	bhi.n	8005f88 <UART_SetConfig+0x148>
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d003      	beq.n	8005f68 <UART_SetConfig+0x128>
 8005f60:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f64:	d008      	beq.n	8005f78 <UART_SetConfig+0x138>
 8005f66:	e00f      	b.n	8005f88 <UART_SetConfig+0x148>
 8005f68:	2300      	movs	r3, #0
 8005f6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f6e:	e012      	b.n	8005f96 <UART_SetConfig+0x156>
 8005f70:	2302      	movs	r3, #2
 8005f72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f76:	e00e      	b.n	8005f96 <UART_SetConfig+0x156>
 8005f78:	2304      	movs	r3, #4
 8005f7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f7e:	e00a      	b.n	8005f96 <UART_SetConfig+0x156>
 8005f80:	2308      	movs	r3, #8
 8005f82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f86:	e006      	b.n	8005f96 <UART_SetConfig+0x156>
 8005f88:	2310      	movs	r3, #16
 8005f8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f8e:	e002      	b.n	8005f96 <UART_SetConfig+0x156>
 8005f90:	2310      	movs	r3, #16
 8005f92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a65      	ldr	r2, [pc, #404]	@ (8006130 <UART_SetConfig+0x2f0>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	f040 8097 	bne.w	80060d0 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005fa2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005fa6:	2b08      	cmp	r3, #8
 8005fa8:	d823      	bhi.n	8005ff2 <UART_SetConfig+0x1b2>
 8005faa:	a201      	add	r2, pc, #4	@ (adr r2, 8005fb0 <UART_SetConfig+0x170>)
 8005fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fb0:	08005fd5 	.word	0x08005fd5
 8005fb4:	08005ff3 	.word	0x08005ff3
 8005fb8:	08005fdd 	.word	0x08005fdd
 8005fbc:	08005ff3 	.word	0x08005ff3
 8005fc0:	08005fe3 	.word	0x08005fe3
 8005fc4:	08005ff3 	.word	0x08005ff3
 8005fc8:	08005ff3 	.word	0x08005ff3
 8005fcc:	08005ff3 	.word	0x08005ff3
 8005fd0:	08005feb 	.word	0x08005feb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005fd4:	f7fe fcde 	bl	8004994 <HAL_RCC_GetPCLK1Freq>
 8005fd8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005fda:	e010      	b.n	8005ffe <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005fdc:	4b56      	ldr	r3, [pc, #344]	@ (8006138 <UART_SetConfig+0x2f8>)
 8005fde:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005fe0:	e00d      	b.n	8005ffe <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005fe2:	f7fe fc57 	bl	8004894 <HAL_RCC_GetSysClockFreq>
 8005fe6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005fe8:	e009      	b.n	8005ffe <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005fea:	f248 0306 	movw	r3, #32774	@ 0x8006
 8005fee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005ff0:	e005      	b.n	8005ffe <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005ffc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006000:	2b00      	cmp	r3, #0
 8006002:	f000 812b 	beq.w	800625c <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800600a:	4a4c      	ldr	r2, [pc, #304]	@ (800613c <UART_SetConfig+0x2fc>)
 800600c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006010:	461a      	mov	r2, r3
 8006012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006014:	fbb3 f3f2 	udiv	r3, r3, r2
 8006018:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	685a      	ldr	r2, [r3, #4]
 800601e:	4613      	mov	r3, r2
 8006020:	005b      	lsls	r3, r3, #1
 8006022:	4413      	add	r3, r2
 8006024:	69ba      	ldr	r2, [r7, #24]
 8006026:	429a      	cmp	r2, r3
 8006028:	d305      	bcc.n	8006036 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800602a:	697b      	ldr	r3, [r7, #20]
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006030:	69ba      	ldr	r2, [r7, #24]
 8006032:	429a      	cmp	r2, r3
 8006034:	d903      	bls.n	800603e <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8006036:	2301      	movs	r3, #1
 8006038:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800603c:	e10e      	b.n	800625c <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800603e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006040:	2200      	movs	r2, #0
 8006042:	60bb      	str	r3, [r7, #8]
 8006044:	60fa      	str	r2, [r7, #12]
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800604a:	4a3c      	ldr	r2, [pc, #240]	@ (800613c <UART_SetConfig+0x2fc>)
 800604c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006050:	b29b      	uxth	r3, r3
 8006052:	2200      	movs	r2, #0
 8006054:	603b      	str	r3, [r7, #0]
 8006056:	607a      	str	r2, [r7, #4]
 8006058:	e9d7 2300 	ldrd	r2, r3, [r7]
 800605c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006060:	f7fa fbcc 	bl	80007fc <__aeabi_uldivmod>
 8006064:	4602      	mov	r2, r0
 8006066:	460b      	mov	r3, r1
 8006068:	4610      	mov	r0, r2
 800606a:	4619      	mov	r1, r3
 800606c:	f04f 0200 	mov.w	r2, #0
 8006070:	f04f 0300 	mov.w	r3, #0
 8006074:	020b      	lsls	r3, r1, #8
 8006076:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800607a:	0202      	lsls	r2, r0, #8
 800607c:	6979      	ldr	r1, [r7, #20]
 800607e:	6849      	ldr	r1, [r1, #4]
 8006080:	0849      	lsrs	r1, r1, #1
 8006082:	2000      	movs	r0, #0
 8006084:	460c      	mov	r4, r1
 8006086:	4605      	mov	r5, r0
 8006088:	eb12 0804 	adds.w	r8, r2, r4
 800608c:	eb43 0905 	adc.w	r9, r3, r5
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	685b      	ldr	r3, [r3, #4]
 8006094:	2200      	movs	r2, #0
 8006096:	469a      	mov	sl, r3
 8006098:	4693      	mov	fp, r2
 800609a:	4652      	mov	r2, sl
 800609c:	465b      	mov	r3, fp
 800609e:	4640      	mov	r0, r8
 80060a0:	4649      	mov	r1, r9
 80060a2:	f7fa fbab 	bl	80007fc <__aeabi_uldivmod>
 80060a6:	4602      	mov	r2, r0
 80060a8:	460b      	mov	r3, r1
 80060aa:	4613      	mov	r3, r2
 80060ac:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80060ae:	6a3b      	ldr	r3, [r7, #32]
 80060b0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80060b4:	d308      	bcc.n	80060c8 <UART_SetConfig+0x288>
 80060b6:	6a3b      	ldr	r3, [r7, #32]
 80060b8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80060bc:	d204      	bcs.n	80060c8 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	6a3a      	ldr	r2, [r7, #32]
 80060c4:	60da      	str	r2, [r3, #12]
 80060c6:	e0c9      	b.n	800625c <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 80060c8:	2301      	movs	r3, #1
 80060ca:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80060ce:	e0c5      	b.n	800625c <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	69db      	ldr	r3, [r3, #28]
 80060d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80060d8:	d16d      	bne.n	80061b6 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 80060da:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80060de:	3b01      	subs	r3, #1
 80060e0:	2b07      	cmp	r3, #7
 80060e2:	d82d      	bhi.n	8006140 <UART_SetConfig+0x300>
 80060e4:	a201      	add	r2, pc, #4	@ (adr r2, 80060ec <UART_SetConfig+0x2ac>)
 80060e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060ea:	bf00      	nop
 80060ec:	0800610d 	.word	0x0800610d
 80060f0:	08006115 	.word	0x08006115
 80060f4:	08006141 	.word	0x08006141
 80060f8:	0800611b 	.word	0x0800611b
 80060fc:	08006141 	.word	0x08006141
 8006100:	08006141 	.word	0x08006141
 8006104:	08006141 	.word	0x08006141
 8006108:	08006123 	.word	0x08006123
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800610c:	f7fe fc58 	bl	80049c0 <HAL_RCC_GetPCLK2Freq>
 8006110:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006112:	e01b      	b.n	800614c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006114:	4b08      	ldr	r3, [pc, #32]	@ (8006138 <UART_SetConfig+0x2f8>)
 8006116:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006118:	e018      	b.n	800614c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800611a:	f7fe fbbb 	bl	8004894 <HAL_RCC_GetSysClockFreq>
 800611e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006120:	e014      	b.n	800614c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006122:	f248 0306 	movw	r3, #32774	@ 0x8006
 8006126:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006128:	e010      	b.n	800614c <UART_SetConfig+0x30c>
 800612a:	bf00      	nop
 800612c:	cfff69f3 	.word	0xcfff69f3
 8006130:	40008000 	.word	0x40008000
 8006134:	40013800 	.word	0x40013800
 8006138:	00f42400 	.word	0x00f42400
 800613c:	0800cd3c 	.word	0x0800cd3c
      default:
        pclk = 0U;
 8006140:	2300      	movs	r3, #0
 8006142:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006144:	2301      	movs	r3, #1
 8006146:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800614a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800614c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800614e:	2b00      	cmp	r3, #0
 8006150:	f000 8084 	beq.w	800625c <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006158:	4a4b      	ldr	r2, [pc, #300]	@ (8006288 <UART_SetConfig+0x448>)
 800615a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800615e:	461a      	mov	r2, r3
 8006160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006162:	fbb3 f3f2 	udiv	r3, r3, r2
 8006166:	005a      	lsls	r2, r3, #1
 8006168:	697b      	ldr	r3, [r7, #20]
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	085b      	lsrs	r3, r3, #1
 800616e:	441a      	add	r2, r3
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	685b      	ldr	r3, [r3, #4]
 8006174:	fbb2 f3f3 	udiv	r3, r2, r3
 8006178:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800617a:	6a3b      	ldr	r3, [r7, #32]
 800617c:	2b0f      	cmp	r3, #15
 800617e:	d916      	bls.n	80061ae <UART_SetConfig+0x36e>
 8006180:	6a3b      	ldr	r3, [r7, #32]
 8006182:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006186:	d212      	bcs.n	80061ae <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006188:	6a3b      	ldr	r3, [r7, #32]
 800618a:	b29b      	uxth	r3, r3
 800618c:	f023 030f 	bic.w	r3, r3, #15
 8006190:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006192:	6a3b      	ldr	r3, [r7, #32]
 8006194:	085b      	lsrs	r3, r3, #1
 8006196:	b29b      	uxth	r3, r3
 8006198:	f003 0307 	and.w	r3, r3, #7
 800619c:	b29a      	uxth	r2, r3
 800619e:	8bfb      	ldrh	r3, [r7, #30]
 80061a0:	4313      	orrs	r3, r2
 80061a2:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80061a4:	697b      	ldr	r3, [r7, #20]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	8bfa      	ldrh	r2, [r7, #30]
 80061aa:	60da      	str	r2, [r3, #12]
 80061ac:	e056      	b.n	800625c <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 80061ae:	2301      	movs	r3, #1
 80061b0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80061b4:	e052      	b.n	800625c <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80061b6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80061ba:	3b01      	subs	r3, #1
 80061bc:	2b07      	cmp	r3, #7
 80061be:	d822      	bhi.n	8006206 <UART_SetConfig+0x3c6>
 80061c0:	a201      	add	r2, pc, #4	@ (adr r2, 80061c8 <UART_SetConfig+0x388>)
 80061c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061c6:	bf00      	nop
 80061c8:	080061e9 	.word	0x080061e9
 80061cc:	080061f1 	.word	0x080061f1
 80061d0:	08006207 	.word	0x08006207
 80061d4:	080061f7 	.word	0x080061f7
 80061d8:	08006207 	.word	0x08006207
 80061dc:	08006207 	.word	0x08006207
 80061e0:	08006207 	.word	0x08006207
 80061e4:	080061ff 	.word	0x080061ff
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80061e8:	f7fe fbea 	bl	80049c0 <HAL_RCC_GetPCLK2Freq>
 80061ec:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80061ee:	e010      	b.n	8006212 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80061f0:	4b26      	ldr	r3, [pc, #152]	@ (800628c <UART_SetConfig+0x44c>)
 80061f2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80061f4:	e00d      	b.n	8006212 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80061f6:	f7fe fb4d 	bl	8004894 <HAL_RCC_GetSysClockFreq>
 80061fa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80061fc:	e009      	b.n	8006212 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061fe:	f248 0306 	movw	r3, #32774	@ 0x8006
 8006202:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006204:	e005      	b.n	8006212 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8006206:	2300      	movs	r3, #0
 8006208:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800620a:	2301      	movs	r3, #1
 800620c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006210:	bf00      	nop
    }

    if (pclk != 0U)
 8006212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006214:	2b00      	cmp	r3, #0
 8006216:	d021      	beq.n	800625c <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006218:	697b      	ldr	r3, [r7, #20]
 800621a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800621c:	4a1a      	ldr	r2, [pc, #104]	@ (8006288 <UART_SetConfig+0x448>)
 800621e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006222:	461a      	mov	r2, r3
 8006224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006226:	fbb3 f2f2 	udiv	r2, r3, r2
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	685b      	ldr	r3, [r3, #4]
 800622e:	085b      	lsrs	r3, r3, #1
 8006230:	441a      	add	r2, r3
 8006232:	697b      	ldr	r3, [r7, #20]
 8006234:	685b      	ldr	r3, [r3, #4]
 8006236:	fbb2 f3f3 	udiv	r3, r2, r3
 800623a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800623c:	6a3b      	ldr	r3, [r7, #32]
 800623e:	2b0f      	cmp	r3, #15
 8006240:	d909      	bls.n	8006256 <UART_SetConfig+0x416>
 8006242:	6a3b      	ldr	r3, [r7, #32]
 8006244:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006248:	d205      	bcs.n	8006256 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800624a:	6a3b      	ldr	r3, [r7, #32]
 800624c:	b29a      	uxth	r2, r3
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	60da      	str	r2, [r3, #12]
 8006254:	e002      	b.n	800625c <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8006256:	2301      	movs	r3, #1
 8006258:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	2201      	movs	r2, #1
 8006260:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006264:	697b      	ldr	r3, [r7, #20]
 8006266:	2201      	movs	r2, #1
 8006268:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800626c:	697b      	ldr	r3, [r7, #20]
 800626e:	2200      	movs	r2, #0
 8006270:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006272:	697b      	ldr	r3, [r7, #20]
 8006274:	2200      	movs	r2, #0
 8006276:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006278:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800627c:	4618      	mov	r0, r3
 800627e:	3730      	adds	r7, #48	@ 0x30
 8006280:	46bd      	mov	sp, r7
 8006282:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006286:	bf00      	nop
 8006288:	0800cd3c 	.word	0x0800cd3c
 800628c:	00f42400 	.word	0x00f42400

08006290 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006290:	b480      	push	{r7}
 8006292:	b083      	sub	sp, #12
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800629c:	f003 0308 	and.w	r3, r3, #8
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d00a      	beq.n	80062ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	685b      	ldr	r3, [r3, #4]
 80062aa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	430a      	orrs	r2, r1
 80062b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062be:	f003 0301 	and.w	r3, r3, #1
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d00a      	beq.n	80062dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	430a      	orrs	r2, r1
 80062da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062e0:	f003 0302 	and.w	r3, r3, #2
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d00a      	beq.n	80062fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	430a      	orrs	r2, r1
 80062fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006302:	f003 0304 	and.w	r3, r3, #4
 8006306:	2b00      	cmp	r3, #0
 8006308:	d00a      	beq.n	8006320 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	685b      	ldr	r3, [r3, #4]
 8006310:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	430a      	orrs	r2, r1
 800631e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006324:	f003 0310 	and.w	r3, r3, #16
 8006328:	2b00      	cmp	r3, #0
 800632a:	d00a      	beq.n	8006342 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	689b      	ldr	r3, [r3, #8]
 8006332:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	430a      	orrs	r2, r1
 8006340:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006346:	f003 0320 	and.w	r3, r3, #32
 800634a:	2b00      	cmp	r3, #0
 800634c:	d00a      	beq.n	8006364 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	689b      	ldr	r3, [r3, #8]
 8006354:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	430a      	orrs	r2, r1
 8006362:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006368:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800636c:	2b00      	cmp	r3, #0
 800636e:	d01a      	beq.n	80063a6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	685b      	ldr	r3, [r3, #4]
 8006376:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	430a      	orrs	r2, r1
 8006384:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800638a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800638e:	d10a      	bne.n	80063a6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	685b      	ldr	r3, [r3, #4]
 8006396:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	430a      	orrs	r2, r1
 80063a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d00a      	beq.n	80063c8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	430a      	orrs	r2, r1
 80063c6:	605a      	str	r2, [r3, #4]
  }
}
 80063c8:	bf00      	nop
 80063ca:	370c      	adds	r7, #12
 80063cc:	46bd      	mov	sp, r7
 80063ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d2:	4770      	bx	lr

080063d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b098      	sub	sp, #96	@ 0x60
 80063d8:	af02      	add	r7, sp, #8
 80063da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2200      	movs	r2, #0
 80063e0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80063e4:	f7fc faf8 	bl	80029d8 <HAL_GetTick>
 80063e8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f003 0308 	and.w	r3, r3, #8
 80063f4:	2b08      	cmp	r3, #8
 80063f6:	d12f      	bne.n	8006458 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80063f8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80063fc:	9300      	str	r3, [sp, #0]
 80063fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006400:	2200      	movs	r2, #0
 8006402:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006406:	6878      	ldr	r0, [r7, #4]
 8006408:	f000 f88e 	bl	8006528 <UART_WaitOnFlagUntilTimeout>
 800640c:	4603      	mov	r3, r0
 800640e:	2b00      	cmp	r3, #0
 8006410:	d022      	beq.n	8006458 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006418:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800641a:	e853 3f00 	ldrex	r3, [r3]
 800641e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006420:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006422:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006426:	653b      	str	r3, [r7, #80]	@ 0x50
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	461a      	mov	r2, r3
 800642e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006430:	647b      	str	r3, [r7, #68]	@ 0x44
 8006432:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006434:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006436:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006438:	e841 2300 	strex	r3, r2, [r1]
 800643c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800643e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006440:	2b00      	cmp	r3, #0
 8006442:	d1e6      	bne.n	8006412 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2220      	movs	r2, #32
 8006448:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2200      	movs	r2, #0
 8006450:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006454:	2303      	movs	r3, #3
 8006456:	e063      	b.n	8006520 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f003 0304 	and.w	r3, r3, #4
 8006462:	2b04      	cmp	r3, #4
 8006464:	d149      	bne.n	80064fa <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006466:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800646a:	9300      	str	r3, [sp, #0]
 800646c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800646e:	2200      	movs	r2, #0
 8006470:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	f000 f857 	bl	8006528 <UART_WaitOnFlagUntilTimeout>
 800647a:	4603      	mov	r3, r0
 800647c:	2b00      	cmp	r3, #0
 800647e:	d03c      	beq.n	80064fa <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006488:	e853 3f00 	ldrex	r3, [r3]
 800648c:	623b      	str	r3, [r7, #32]
   return(result);
 800648e:	6a3b      	ldr	r3, [r7, #32]
 8006490:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006494:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	461a      	mov	r2, r3
 800649c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800649e:	633b      	str	r3, [r7, #48]	@ 0x30
 80064a0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80064a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80064a6:	e841 2300 	strex	r3, r2, [r1]
 80064aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80064ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d1e6      	bne.n	8006480 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	3308      	adds	r3, #8
 80064b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	e853 3f00 	ldrex	r3, [r3]
 80064c0:	60fb      	str	r3, [r7, #12]
   return(result);
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	f023 0301 	bic.w	r3, r3, #1
 80064c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	3308      	adds	r3, #8
 80064d0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80064d2:	61fa      	str	r2, [r7, #28]
 80064d4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064d6:	69b9      	ldr	r1, [r7, #24]
 80064d8:	69fa      	ldr	r2, [r7, #28]
 80064da:	e841 2300 	strex	r3, r2, [r1]
 80064de:	617b      	str	r3, [r7, #20]
   return(result);
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d1e5      	bne.n	80064b2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2220      	movs	r2, #32
 80064ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2200      	movs	r2, #0
 80064f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80064f6:	2303      	movs	r3, #3
 80064f8:	e012      	b.n	8006520 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2220      	movs	r2, #32
 80064fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2220      	movs	r2, #32
 8006506:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2200      	movs	r2, #0
 800650e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2200      	movs	r2, #0
 8006514:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2200      	movs	r2, #0
 800651a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800651e:	2300      	movs	r3, #0
}
 8006520:	4618      	mov	r0, r3
 8006522:	3758      	adds	r7, #88	@ 0x58
 8006524:	46bd      	mov	sp, r7
 8006526:	bd80      	pop	{r7, pc}

08006528 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b084      	sub	sp, #16
 800652c:	af00      	add	r7, sp, #0
 800652e:	60f8      	str	r0, [r7, #12]
 8006530:	60b9      	str	r1, [r7, #8]
 8006532:	603b      	str	r3, [r7, #0]
 8006534:	4613      	mov	r3, r2
 8006536:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006538:	e04f      	b.n	80065da <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800653a:	69bb      	ldr	r3, [r7, #24]
 800653c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006540:	d04b      	beq.n	80065da <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006542:	f7fc fa49 	bl	80029d8 <HAL_GetTick>
 8006546:	4602      	mov	r2, r0
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	1ad3      	subs	r3, r2, r3
 800654c:	69ba      	ldr	r2, [r7, #24]
 800654e:	429a      	cmp	r2, r3
 8006550:	d302      	bcc.n	8006558 <UART_WaitOnFlagUntilTimeout+0x30>
 8006552:	69bb      	ldr	r3, [r7, #24]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d101      	bne.n	800655c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006558:	2303      	movs	r3, #3
 800655a:	e04e      	b.n	80065fa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f003 0304 	and.w	r3, r3, #4
 8006566:	2b00      	cmp	r3, #0
 8006568:	d037      	beq.n	80065da <UART_WaitOnFlagUntilTimeout+0xb2>
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	2b80      	cmp	r3, #128	@ 0x80
 800656e:	d034      	beq.n	80065da <UART_WaitOnFlagUntilTimeout+0xb2>
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	2b40      	cmp	r3, #64	@ 0x40
 8006574:	d031      	beq.n	80065da <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	69db      	ldr	r3, [r3, #28]
 800657c:	f003 0308 	and.w	r3, r3, #8
 8006580:	2b08      	cmp	r3, #8
 8006582:	d110      	bne.n	80065a6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	2208      	movs	r2, #8
 800658a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800658c:	68f8      	ldr	r0, [r7, #12]
 800658e:	f000 f879 	bl	8006684 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	2208      	movs	r2, #8
 8006596:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	2200      	movs	r2, #0
 800659e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80065a2:	2301      	movs	r3, #1
 80065a4:	e029      	b.n	80065fa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	69db      	ldr	r3, [r3, #28]
 80065ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80065b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80065b4:	d111      	bne.n	80065da <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80065be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80065c0:	68f8      	ldr	r0, [r7, #12]
 80065c2:	f000 f85f 	bl	8006684 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	2220      	movs	r2, #32
 80065ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	2200      	movs	r2, #0
 80065d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80065d6:	2303      	movs	r3, #3
 80065d8:	e00f      	b.n	80065fa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	69da      	ldr	r2, [r3, #28]
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	4013      	ands	r3, r2
 80065e4:	68ba      	ldr	r2, [r7, #8]
 80065e6:	429a      	cmp	r2, r3
 80065e8:	bf0c      	ite	eq
 80065ea:	2301      	moveq	r3, #1
 80065ec:	2300      	movne	r3, #0
 80065ee:	b2db      	uxtb	r3, r3
 80065f0:	461a      	mov	r2, r3
 80065f2:	79fb      	ldrb	r3, [r7, #7]
 80065f4:	429a      	cmp	r2, r3
 80065f6:	d0a0      	beq.n	800653a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80065f8:	2300      	movs	r3, #0
}
 80065fa:	4618      	mov	r0, r3
 80065fc:	3710      	adds	r7, #16
 80065fe:	46bd      	mov	sp, r7
 8006600:	bd80      	pop	{r7, pc}

08006602 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006602:	b480      	push	{r7}
 8006604:	b08f      	sub	sp, #60	@ 0x3c
 8006606:	af00      	add	r7, sp, #0
 8006608:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006610:	6a3b      	ldr	r3, [r7, #32]
 8006612:	e853 3f00 	ldrex	r3, [r3]
 8006616:	61fb      	str	r3, [r7, #28]
   return(result);
 8006618:	69fb      	ldr	r3, [r7, #28]
 800661a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800661e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	461a      	mov	r2, r3
 8006626:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006628:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800662a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800662c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800662e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006630:	e841 2300 	strex	r3, r2, [r1]
 8006634:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006638:	2b00      	cmp	r3, #0
 800663a:	d1e6      	bne.n	800660a <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	3308      	adds	r3, #8
 8006642:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	e853 3f00 	ldrex	r3, [r3]
 800664a:	60bb      	str	r3, [r7, #8]
   return(result);
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8006652:	633b      	str	r3, [r7, #48]	@ 0x30
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	3308      	adds	r3, #8
 800665a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800665c:	61ba      	str	r2, [r7, #24]
 800665e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006660:	6979      	ldr	r1, [r7, #20]
 8006662:	69ba      	ldr	r2, [r7, #24]
 8006664:	e841 2300 	strex	r3, r2, [r1]
 8006668:	613b      	str	r3, [r7, #16]
   return(result);
 800666a:	693b      	ldr	r3, [r7, #16]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d1e5      	bne.n	800663c <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2220      	movs	r2, #32
 8006674:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8006678:	bf00      	nop
 800667a:	373c      	adds	r7, #60	@ 0x3c
 800667c:	46bd      	mov	sp, r7
 800667e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006682:	4770      	bx	lr

08006684 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006684:	b480      	push	{r7}
 8006686:	b095      	sub	sp, #84	@ 0x54
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006692:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006694:	e853 3f00 	ldrex	r3, [r3]
 8006698:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800669a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800669c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80066a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	461a      	mov	r2, r3
 80066a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80066aa:	643b      	str	r3, [r7, #64]	@ 0x40
 80066ac:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ae:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80066b0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80066b2:	e841 2300 	strex	r3, r2, [r1]
 80066b6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80066b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d1e6      	bne.n	800668c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	3308      	adds	r3, #8
 80066c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066c6:	6a3b      	ldr	r3, [r7, #32]
 80066c8:	e853 3f00 	ldrex	r3, [r3]
 80066cc:	61fb      	str	r3, [r7, #28]
   return(result);
 80066ce:	69fb      	ldr	r3, [r7, #28]
 80066d0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80066d4:	f023 0301 	bic.w	r3, r3, #1
 80066d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	3308      	adds	r3, #8
 80066e0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80066e2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80066e4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066e6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80066e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80066ea:	e841 2300 	strex	r3, r2, [r1]
 80066ee:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80066f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d1e3      	bne.n	80066be <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80066fa:	2b01      	cmp	r3, #1
 80066fc:	d118      	bne.n	8006730 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	e853 3f00 	ldrex	r3, [r3]
 800670a:	60bb      	str	r3, [r7, #8]
   return(result);
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	f023 0310 	bic.w	r3, r3, #16
 8006712:	647b      	str	r3, [r7, #68]	@ 0x44
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	461a      	mov	r2, r3
 800671a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800671c:	61bb      	str	r3, [r7, #24]
 800671e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006720:	6979      	ldr	r1, [r7, #20]
 8006722:	69ba      	ldr	r2, [r7, #24]
 8006724:	e841 2300 	strex	r3, r2, [r1]
 8006728:	613b      	str	r3, [r7, #16]
   return(result);
 800672a:	693b      	ldr	r3, [r7, #16]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d1e6      	bne.n	80066fe <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2220      	movs	r2, #32
 8006734:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2200      	movs	r2, #0
 800673c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2200      	movs	r2, #0
 8006742:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006744:	bf00      	nop
 8006746:	3754      	adds	r7, #84	@ 0x54
 8006748:	46bd      	mov	sp, r7
 800674a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674e:	4770      	bx	lr

08006750 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b090      	sub	sp, #64	@ 0x40
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800675c:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f003 0320 	and.w	r3, r3, #32
 8006768:	2b00      	cmp	r3, #0
 800676a:	d137      	bne.n	80067dc <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800676c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800676e:	2200      	movs	r2, #0
 8006770:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006774:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	3308      	adds	r3, #8
 800677a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800677c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800677e:	e853 3f00 	ldrex	r3, [r3]
 8006782:	623b      	str	r3, [r7, #32]
   return(result);
 8006784:	6a3b      	ldr	r3, [r7, #32]
 8006786:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800678a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800678c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	3308      	adds	r3, #8
 8006792:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006794:	633a      	str	r2, [r7, #48]	@ 0x30
 8006796:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006798:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800679a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800679c:	e841 2300 	strex	r3, r2, [r1]
 80067a0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80067a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d1e5      	bne.n	8006774 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80067a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ae:	693b      	ldr	r3, [r7, #16]
 80067b0:	e853 3f00 	ldrex	r3, [r3]
 80067b4:	60fb      	str	r3, [r7, #12]
   return(result);
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80067bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80067be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	461a      	mov	r2, r3
 80067c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067c6:	61fb      	str	r3, [r7, #28]
 80067c8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ca:	69b9      	ldr	r1, [r7, #24]
 80067cc:	69fa      	ldr	r2, [r7, #28]
 80067ce:	e841 2300 	strex	r3, r2, [r1]
 80067d2:	617b      	str	r3, [r7, #20]
   return(result);
 80067d4:	697b      	ldr	r3, [r7, #20]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d1e6      	bne.n	80067a8 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80067da:	e002      	b.n	80067e2 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80067dc:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80067de:	f7fb fa4d 	bl	8001c7c <HAL_UART_TxCpltCallback>
}
 80067e2:	bf00      	nop
 80067e4:	3740      	adds	r7, #64	@ 0x40
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}

080067ea <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80067ea:	b580      	push	{r7, lr}
 80067ec:	b084      	sub	sp, #16
 80067ee:	af00      	add	r7, sp, #0
 80067f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067f6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80067f8:	68f8      	ldr	r0, [r7, #12]
 80067fa:	f7ff fb01 	bl	8005e00 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80067fe:	bf00      	nop
 8006800:	3710      	adds	r7, #16
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}

08006806 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006806:	b580      	push	{r7, lr}
 8006808:	b086      	sub	sp, #24
 800680a:	af00      	add	r7, sp, #0
 800680c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006812:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006814:	697b      	ldr	r3, [r7, #20]
 8006816:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800681a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800681c:	697b      	ldr	r3, [r7, #20]
 800681e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006822:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006824:	697b      	ldr	r3, [r7, #20]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	689b      	ldr	r3, [r3, #8]
 800682a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800682e:	2b80      	cmp	r3, #128	@ 0x80
 8006830:	d109      	bne.n	8006846 <UART_DMAError+0x40>
 8006832:	693b      	ldr	r3, [r7, #16]
 8006834:	2b21      	cmp	r3, #33	@ 0x21
 8006836:	d106      	bne.n	8006846 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006838:	697b      	ldr	r3, [r7, #20]
 800683a:	2200      	movs	r2, #0
 800683c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8006840:	6978      	ldr	r0, [r7, #20]
 8006842:	f7ff fede 	bl	8006602 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	689b      	ldr	r3, [r3, #8]
 800684c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006850:	2b40      	cmp	r3, #64	@ 0x40
 8006852:	d109      	bne.n	8006868 <UART_DMAError+0x62>
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	2b22      	cmp	r3, #34	@ 0x22
 8006858:	d106      	bne.n	8006868 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800685a:	697b      	ldr	r3, [r7, #20]
 800685c:	2200      	movs	r2, #0
 800685e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8006862:	6978      	ldr	r0, [r7, #20]
 8006864:	f7ff ff0e 	bl	8006684 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006868:	697b      	ldr	r3, [r7, #20]
 800686a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800686e:	f043 0210 	orr.w	r2, r3, #16
 8006872:	697b      	ldr	r3, [r7, #20]
 8006874:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006878:	6978      	ldr	r0, [r7, #20]
 800687a:	f7ff facb 	bl	8005e14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800687e:	bf00      	nop
 8006880:	3718      	adds	r7, #24
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}

08006886 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006886:	b580      	push	{r7, lr}
 8006888:	b084      	sub	sp, #16
 800688a:	af00      	add	r7, sp, #0
 800688c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006892:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	2200      	movs	r2, #0
 8006898:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	2200      	movs	r2, #0
 80068a0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80068a4:	68f8      	ldr	r0, [r7, #12]
 80068a6:	f7ff fab5 	bl	8005e14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80068aa:	bf00      	nop
 80068ac:	3710      	adds	r7, #16
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}

080068b2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80068b2:	b580      	push	{r7, lr}
 80068b4:	b088      	sub	sp, #32
 80068b6:	af00      	add	r7, sp, #0
 80068b8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	e853 3f00 	ldrex	r3, [r3]
 80068c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80068ce:	61fb      	str	r3, [r7, #28]
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	461a      	mov	r2, r3
 80068d6:	69fb      	ldr	r3, [r7, #28]
 80068d8:	61bb      	str	r3, [r7, #24]
 80068da:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068dc:	6979      	ldr	r1, [r7, #20]
 80068de:	69ba      	ldr	r2, [r7, #24]
 80068e0:	e841 2300 	strex	r3, r2, [r1]
 80068e4:	613b      	str	r3, [r7, #16]
   return(result);
 80068e6:	693b      	ldr	r3, [r7, #16]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d1e6      	bne.n	80068ba <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2220      	movs	r2, #32
 80068f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2200      	movs	r2, #0
 80068f8:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f7fb f9be 	bl	8001c7c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006900:	bf00      	nop
 8006902:	3720      	adds	r7, #32
 8006904:	46bd      	mov	sp, r7
 8006906:	bd80      	pop	{r7, pc}

08006908 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006908:	b480      	push	{r7}
 800690a:	b083      	sub	sp, #12
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006910:	bf00      	nop
 8006912:	370c      	adds	r7, #12
 8006914:	46bd      	mov	sp, r7
 8006916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691a:	4770      	bx	lr

0800691c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800691c:	b480      	push	{r7}
 800691e:	b083      	sub	sp, #12
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006924:	bf00      	nop
 8006926:	370c      	adds	r7, #12
 8006928:	46bd      	mov	sp, r7
 800692a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692e:	4770      	bx	lr

08006930 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006930:	b480      	push	{r7}
 8006932:	b083      	sub	sp, #12
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006938:	bf00      	nop
 800693a:	370c      	adds	r7, #12
 800693c:	46bd      	mov	sp, r7
 800693e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006942:	4770      	bx	lr

08006944 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006944:	b480      	push	{r7}
 8006946:	b085      	sub	sp, #20
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006952:	2b01      	cmp	r3, #1
 8006954:	d101      	bne.n	800695a <HAL_UARTEx_DisableFifoMode+0x16>
 8006956:	2302      	movs	r3, #2
 8006958:	e027      	b.n	80069aa <HAL_UARTEx_DisableFifoMode+0x66>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2201      	movs	r2, #1
 800695e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2224      	movs	r2, #36	@ 0x24
 8006966:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	681a      	ldr	r2, [r3, #0]
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f022 0201 	bic.w	r2, r2, #1
 8006980:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006988:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2200      	movs	r2, #0
 800698e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	68fa      	ldr	r2, [r7, #12]
 8006996:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2220      	movs	r2, #32
 800699c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2200      	movs	r2, #0
 80069a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80069a8:	2300      	movs	r3, #0
}
 80069aa:	4618      	mov	r0, r3
 80069ac:	3714      	adds	r7, #20
 80069ae:	46bd      	mov	sp, r7
 80069b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b4:	4770      	bx	lr

080069b6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80069b6:	b580      	push	{r7, lr}
 80069b8:	b084      	sub	sp, #16
 80069ba:	af00      	add	r7, sp, #0
 80069bc:	6078      	str	r0, [r7, #4]
 80069be:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80069c6:	2b01      	cmp	r3, #1
 80069c8:	d101      	bne.n	80069ce <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80069ca:	2302      	movs	r3, #2
 80069cc:	e02d      	b.n	8006a2a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2201      	movs	r2, #1
 80069d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2224      	movs	r2, #36	@ 0x24
 80069da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	681a      	ldr	r2, [r3, #0]
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f022 0201 	bic.w	r2, r2, #1
 80069f4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	689b      	ldr	r3, [r3, #8]
 80069fc:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	683a      	ldr	r2, [r7, #0]
 8006a06:	430a      	orrs	r2, r1
 8006a08:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	f000 f850 	bl	8006ab0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	68fa      	ldr	r2, [r7, #12]
 8006a16:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2220      	movs	r2, #32
 8006a1c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2200      	movs	r2, #0
 8006a24:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006a28:	2300      	movs	r3, #0
}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	3710      	adds	r7, #16
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bd80      	pop	{r7, pc}

08006a32 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006a32:	b580      	push	{r7, lr}
 8006a34:	b084      	sub	sp, #16
 8006a36:	af00      	add	r7, sp, #0
 8006a38:	6078      	str	r0, [r7, #4]
 8006a3a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006a42:	2b01      	cmp	r3, #1
 8006a44:	d101      	bne.n	8006a4a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006a46:	2302      	movs	r3, #2
 8006a48:	e02d      	b.n	8006aa6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2201      	movs	r2, #1
 8006a4e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2224      	movs	r2, #36	@ 0x24
 8006a56:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	681a      	ldr	r2, [r3, #0]
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f022 0201 	bic.w	r2, r2, #1
 8006a70:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	689b      	ldr	r3, [r3, #8]
 8006a78:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	683a      	ldr	r2, [r7, #0]
 8006a82:	430a      	orrs	r2, r1
 8006a84:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f000 f812 	bl	8006ab0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	68fa      	ldr	r2, [r7, #12]
 8006a92:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2220      	movs	r2, #32
 8006a98:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006aa4:	2300      	movs	r3, #0
}
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	3710      	adds	r7, #16
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bd80      	pop	{r7, pc}
	...

08006ab0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	b085      	sub	sp, #20
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d108      	bne.n	8006ad2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2201      	movs	r2, #1
 8006ac4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2201      	movs	r2, #1
 8006acc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006ad0:	e031      	b.n	8006b36 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006ad2:	2308      	movs	r3, #8
 8006ad4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006ad6:	2308      	movs	r3, #8
 8006ad8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	689b      	ldr	r3, [r3, #8]
 8006ae0:	0e5b      	lsrs	r3, r3, #25
 8006ae2:	b2db      	uxtb	r3, r3
 8006ae4:	f003 0307 	and.w	r3, r3, #7
 8006ae8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	689b      	ldr	r3, [r3, #8]
 8006af0:	0f5b      	lsrs	r3, r3, #29
 8006af2:	b2db      	uxtb	r3, r3
 8006af4:	f003 0307 	and.w	r3, r3, #7
 8006af8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006afa:	7bbb      	ldrb	r3, [r7, #14]
 8006afc:	7b3a      	ldrb	r2, [r7, #12]
 8006afe:	4911      	ldr	r1, [pc, #68]	@ (8006b44 <UARTEx_SetNbDataToProcess+0x94>)
 8006b00:	5c8a      	ldrb	r2, [r1, r2]
 8006b02:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006b06:	7b3a      	ldrb	r2, [r7, #12]
 8006b08:	490f      	ldr	r1, [pc, #60]	@ (8006b48 <UARTEx_SetNbDataToProcess+0x98>)
 8006b0a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006b0c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006b10:	b29a      	uxth	r2, r3
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006b18:	7bfb      	ldrb	r3, [r7, #15]
 8006b1a:	7b7a      	ldrb	r2, [r7, #13]
 8006b1c:	4909      	ldr	r1, [pc, #36]	@ (8006b44 <UARTEx_SetNbDataToProcess+0x94>)
 8006b1e:	5c8a      	ldrb	r2, [r1, r2]
 8006b20:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006b24:	7b7a      	ldrb	r2, [r7, #13]
 8006b26:	4908      	ldr	r1, [pc, #32]	@ (8006b48 <UARTEx_SetNbDataToProcess+0x98>)
 8006b28:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006b2a:	fb93 f3f2 	sdiv	r3, r3, r2
 8006b2e:	b29a      	uxth	r2, r3
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006b36:	bf00      	nop
 8006b38:	3714      	adds	r7, #20
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b40:	4770      	bx	lr
 8006b42:	bf00      	nop
 8006b44:	0800cd54 	.word	0x0800cd54
 8006b48:	0800cd5c 	.word	0x0800cd5c

08006b4c <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b088      	sub	sp, #32
 8006b50:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8006b52:	2300      	movs	r3, #0
 8006b54:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006b56:	f107 0308 	add.w	r3, r7, #8
 8006b5a:	2218      	movs	r2, #24
 8006b5c:	2100      	movs	r1, #0
 8006b5e:	4618      	mov	r0, r3
 8006b60:	f001 f97c 	bl	8007e5c <Osal_MemSet>
  rq.ogf = 0x3f;
 8006b64:	233f      	movs	r3, #63	@ 0x3f
 8006b66:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 8006b68:	2381      	movs	r3, #129	@ 0x81
 8006b6a:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8006b6c:	1dfb      	adds	r3, r7, #7
 8006b6e:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8006b70:	2301      	movs	r3, #1
 8006b72:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006b74:	f107 0308 	add.w	r3, r7, #8
 8006b78:	2100      	movs	r1, #0
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	f001 fd02 	bl	8008584 <hci_send_req>
 8006b80:	4603      	mov	r3, r0
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	da01      	bge.n	8006b8a <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 8006b86:	23ff      	movs	r3, #255	@ 0xff
 8006b88:	e000      	b.n	8006b8c <aci_gap_set_non_discoverable+0x40>
  return status;
 8006b8a:	79fb      	ldrb	r3, [r7, #7]
}
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	3720      	adds	r7, #32
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bd80      	pop	{r7, pc}

08006b94 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 8006b94:	b5b0      	push	{r4, r5, r7, lr}
 8006b96:	b0ce      	sub	sp, #312	@ 0x138
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	4605      	mov	r5, r0
 8006b9c:	460c      	mov	r4, r1
 8006b9e:	4610      	mov	r0, r2
 8006ba0:	4619      	mov	r1, r3
 8006ba2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006ba6:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8006baa:	462a      	mov	r2, r5
 8006bac:	701a      	strb	r2, [r3, #0]
 8006bae:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006bb2:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8006bb6:	4622      	mov	r2, r4
 8006bb8:	801a      	strh	r2, [r3, #0]
 8006bba:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006bbe:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 8006bc2:	4602      	mov	r2, r0
 8006bc4:	801a      	strh	r2, [r3, #0]
 8006bc6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006bca:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8006bce:	460a      	mov	r2, r1
 8006bd0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 8006bd2:	f107 0310 	add.w	r3, r7, #16
 8006bd6:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8006bda:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 8006bde:	3308      	adds	r3, #8
 8006be0:	f107 0210 	add.w	r2, r7, #16
 8006be4:	4413      	add	r3, r2
 8006be6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8006bea:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8006bee:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 8006bf2:	4413      	add	r3, r2
 8006bf4:	3309      	adds	r3, #9
 8006bf6:	f107 0210 	add.w	r2, r7, #16
 8006bfa:	4413      	add	r3, r2
 8006bfc:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8006c00:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006c04:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8006c08:	2200      	movs	r2, #0
 8006c0a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Type = Advertising_Type;
 8006c12:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006c16:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8006c1a:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 8006c1e:	7812      	ldrb	r2, [r2, #0]
 8006c20:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006c22:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006c26:	3301      	adds	r3, #1
 8006c28:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 8006c2c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006c30:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8006c34:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 8006c38:	8812      	ldrh	r2, [r2, #0]
 8006c3a:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8006c3e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006c42:	3302      	adds	r3, #2
 8006c44:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8006c48:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006c4c:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8006c50:	f5a2 729b 	sub.w	r2, r2, #310	@ 0x136
 8006c54:	8812      	ldrh	r2, [r2, #0]
 8006c56:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8006c5a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006c5e:	3302      	adds	r3, #2
 8006c60:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 8006c64:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006c68:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8006c6c:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8006c70:	7812      	ldrb	r2, [r2, #0]
 8006c72:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8006c74:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006c78:	3301      	adds	r3, #1
 8006c7a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 8006c7e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006c82:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 8006c86:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8006c88:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006c8c:	3301      	adds	r3, #1
 8006c8e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 8006c92:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006c96:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8006c9a:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8006c9c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006ca0:	3301      	adds	r3, #1
 8006ca2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 8006ca6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006caa:	3308      	adds	r3, #8
 8006cac:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8006cb0:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	f001 f8c1 	bl	8007e3c <Osal_MemCpy>
    index_input += Local_Name_Length;
 8006cba:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 8006cbe:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8006cc2:	4413      	add	r3, r2
 8006cc4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 8006cc8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006ccc:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8006cd0:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8006cd2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006cd6:	3301      	adds	r3, #1
 8006cd8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 8006cdc:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006ce0:	3301      	adds	r3, #1
 8006ce2:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8006ce6:	f8d7 1158 	ldr.w	r1, [r7, #344]	@ 0x158
 8006cea:	4618      	mov	r0, r3
 8006cec:	f001 f8a6 	bl	8007e3c <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8006cf0:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 8006cf4:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8006cf8:	4413      	add	r3, r2
 8006cfa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 8006cfe:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006d02:	f8b7 215c 	ldrh.w	r2, [r7, #348]	@ 0x15c
 8006d06:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8006d08:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006d0c:	3302      	adds	r3, #2
 8006d0e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 8006d12:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006d16:	f8b7 2160 	ldrh.w	r2, [r7, #352]	@ 0x160
 8006d1a:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8006d1c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006d20:	3302      	adds	r3, #2
 8006d22:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006d26:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006d2a:	2218      	movs	r2, #24
 8006d2c:	2100      	movs	r1, #0
 8006d2e:	4618      	mov	r0, r3
 8006d30:	f001 f894 	bl	8007e5c <Osal_MemSet>
  rq.ogf = 0x3f;
 8006d34:	233f      	movs	r3, #63	@ 0x3f
 8006d36:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x083;
 8006d3a:	2383      	movs	r3, #131	@ 0x83
 8006d3c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8006d40:	f107 0310 	add.w	r3, r7, #16
 8006d44:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8006d48:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006d4c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8006d50:	f107 030f 	add.w	r3, r7, #15
 8006d54:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8006d58:	2301      	movs	r3, #1
 8006d5a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006d5e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006d62:	2100      	movs	r1, #0
 8006d64:	4618      	mov	r0, r3
 8006d66:	f001 fc0d 	bl	8008584 <hci_send_req>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	da01      	bge.n	8006d74 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 8006d70:	23ff      	movs	r3, #255	@ 0xff
 8006d72:	e004      	b.n	8006d7e <aci_gap_set_discoverable+0x1ea>
  return status;
 8006d74:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006d78:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8006d7c:	781b      	ldrb	r3, [r3, #0]
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bdb0      	pop	{r4, r5, r7, pc}

08006d88 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b0cc      	sub	sp, #304	@ 0x130
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	4602      	mov	r2, r0
 8006d90:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006d94:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8006d98:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 8006d9a:	f107 0310 	add.w	r3, r7, #16
 8006d9e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8006da2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006da6:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006daa:	2200      	movs	r2, #0
 8006dac:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006dae:	2300      	movs	r3, #0
 8006db0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->IO_Capability = IO_Capability;
 8006db4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006db8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006dbc:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8006dc0:	7812      	ldrb	r2, [r2, #0]
 8006dc2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006dc4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006dc8:	3301      	adds	r3, #1
 8006dca:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006dce:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006dd2:	2218      	movs	r2, #24
 8006dd4:	2100      	movs	r1, #0
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	f001 f840 	bl	8007e5c <Osal_MemSet>
  rq.ogf = 0x3f;
 8006ddc:	233f      	movs	r3, #63	@ 0x3f
 8006dde:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x085;
 8006de2:	2385      	movs	r3, #133	@ 0x85
 8006de4:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8006de8:	f107 0310 	add.w	r3, r7, #16
 8006dec:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8006df0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006df4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8006df8:	f107 030f 	add.w	r3, r7, #15
 8006dfc:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8006e00:	2301      	movs	r3, #1
 8006e02:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006e06:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006e0a:	2100      	movs	r1, #0
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	f001 fbb9 	bl	8008584 <hci_send_req>
 8006e12:	4603      	mov	r3, r0
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	da01      	bge.n	8006e1c <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 8006e18:	23ff      	movs	r3, #255	@ 0xff
 8006e1a:	e004      	b.n	8006e26 <aci_gap_set_io_capability+0x9e>
  return status;
 8006e1c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006e20:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006e24:	781b      	ldrb	r3, [r3, #0]
}
 8006e26:	4618      	mov	r0, r3
 8006e28:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	bd80      	pop	{r7, pc}

08006e30 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 8006e30:	b5b0      	push	{r4, r5, r7, lr}
 8006e32:	b0cc      	sub	sp, #304	@ 0x130
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	4605      	mov	r5, r0
 8006e38:	460c      	mov	r4, r1
 8006e3a:	4610      	mov	r0, r2
 8006e3c:	4619      	mov	r1, r3
 8006e3e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006e42:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8006e46:	462a      	mov	r2, r5
 8006e48:	701a      	strb	r2, [r3, #0]
 8006e4a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006e4e:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8006e52:	4622      	mov	r2, r4
 8006e54:	701a      	strb	r2, [r3, #0]
 8006e56:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006e5a:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8006e5e:	4602      	mov	r2, r0
 8006e60:	701a      	strb	r2, [r3, #0]
 8006e62:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006e66:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006e6a:	460a      	mov	r2, r1
 8006e6c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 8006e6e:	f107 0310 	add.w	r3, r7, #16
 8006e72:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8006e76:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006e7a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006e7e:	2200      	movs	r2, #0
 8006e80:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006e82:	2300      	movs	r3, #0
 8006e84:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 8006e88:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006e8c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006e90:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8006e94:	7812      	ldrb	r2, [r2, #0]
 8006e96:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006e98:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006e9c:	3301      	adds	r3, #1
 8006e9e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->MITM_Mode = MITM_Mode;
 8006ea2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006ea6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006eaa:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8006eae:	7812      	ldrb	r2, [r2, #0]
 8006eb0:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8006eb2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006eb6:	3301      	adds	r3, #1
 8006eb8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->SC_Support = SC_Support;
 8006ebc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006ec0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006ec4:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8006ec8:	7812      	ldrb	r2, [r2, #0]
 8006eca:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8006ecc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006ed0:	3301      	adds	r3, #1
 8006ed2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 8006ed6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006eda:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006ede:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 8006ee2:	7812      	ldrb	r2, [r2, #0]
 8006ee4:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 8006ee6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006eea:	3301      	adds	r3, #1
 8006eec:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 8006ef0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006ef4:	f897 2140 	ldrb.w	r2, [r7, #320]	@ 0x140
 8006ef8:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8006efa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006efe:	3301      	adds	r3, #1
 8006f00:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 8006f04:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006f08:	f897 2144 	ldrb.w	r2, [r7, #324]	@ 0x144
 8006f0c:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8006f0e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006f12:	3301      	adds	r3, #1
 8006f14:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 8006f18:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006f1c:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 8006f20:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8006f22:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006f26:	3301      	adds	r3, #1
 8006f28:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 8006f2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006f30:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8006f34:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8006f38:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006f3c:	3304      	adds	r3, #4
 8006f3e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 8006f42:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006f46:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 8006f4a:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8006f4c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006f50:	3301      	adds	r3, #1
 8006f52:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006f56:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006f5a:	2218      	movs	r2, #24
 8006f5c:	2100      	movs	r1, #0
 8006f5e:	4618      	mov	r0, r3
 8006f60:	f000 ff7c 	bl	8007e5c <Osal_MemSet>
  rq.ogf = 0x3f;
 8006f64:	233f      	movs	r3, #63	@ 0x3f
 8006f66:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x086;
 8006f6a:	2386      	movs	r3, #134	@ 0x86
 8006f6c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8006f70:	f107 0310 	add.w	r3, r7, #16
 8006f74:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8006f78:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006f7c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8006f80:	f107 030f 	add.w	r3, r7, #15
 8006f84:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8006f88:	2301      	movs	r3, #1
 8006f8a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006f8e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006f92:	2100      	movs	r1, #0
 8006f94:	4618      	mov	r0, r3
 8006f96:	f001 faf5 	bl	8008584 <hci_send_req>
 8006f9a:	4603      	mov	r3, r0
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	da01      	bge.n	8006fa4 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 8006fa0:	23ff      	movs	r3, #255	@ 0xff
 8006fa2:	e004      	b.n	8006fae <aci_gap_set_authentication_requirement+0x17e>
  return status;
 8006fa4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006fa8:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006fac:	781b      	ldrb	r3, [r3, #0]
}
 8006fae:	4618      	mov	r0, r3
 8006fb0:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bdb0      	pop	{r4, r5, r7, pc}

08006fb8 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8006fb8:	b590      	push	{r4, r7, lr}
 8006fba:	b0cd      	sub	sp, #308	@ 0x134
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	4604      	mov	r4, r0
 8006fc0:	4608      	mov	r0, r1
 8006fc2:	4611      	mov	r1, r2
 8006fc4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006fc8:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 8006fcc:	6013      	str	r3, [r2, #0]
 8006fce:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006fd2:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8006fd6:	4622      	mov	r2, r4
 8006fd8:	701a      	strb	r2, [r3, #0]
 8006fda:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006fde:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8006fe2:	4602      	mov	r2, r0
 8006fe4:	701a      	strb	r2, [r3, #0]
 8006fe6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006fea:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8006fee:	460a      	mov	r2, r1
 8006ff0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8006ff2:	f107 0310 	add.w	r3, r7, #16
 8006ff6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8006ffa:	f107 0308 	add.w	r3, r7, #8
 8006ffe:	2207      	movs	r2, #7
 8007000:	2100      	movs	r1, #0
 8007002:	4618      	mov	r0, r3
 8007004:	f000 ff2a 	bl	8007e5c <Osal_MemSet>
  int index_input = 0;
 8007008:	2300      	movs	r3, #0
 800700a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Role = Role;
 800700e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007012:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8007016:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800701a:	7812      	ldrb	r2, [r2, #0]
 800701c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800701e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007022:	3301      	adds	r3, #1
 8007024:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->privacy_enabled = privacy_enabled;
 8007028:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800702c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8007030:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8007034:	7812      	ldrb	r2, [r2, #0]
 8007036:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8007038:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800703c:	3301      	adds	r3, #1
 800703e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->device_name_char_len = device_name_char_len;
 8007042:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007046:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800704a:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800704e:	7812      	ldrb	r2, [r2, #0]
 8007050:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8007052:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007056:	3301      	adds	r3, #1
 8007058:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800705c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007060:	2218      	movs	r2, #24
 8007062:	2100      	movs	r1, #0
 8007064:	4618      	mov	r0, r3
 8007066:	f000 fef9 	bl	8007e5c <Osal_MemSet>
  rq.ogf = 0x3f;
 800706a:	233f      	movs	r3, #63	@ 0x3f
 800706c:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08a;
 8007070:	238a      	movs	r3, #138	@ 0x8a
 8007072:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8007076:	f107 0310 	add.w	r3, r7, #16
 800707a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800707e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007082:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 8007086:	f107 0308 	add.w	r3, r7, #8
 800708a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 800708e:	2307      	movs	r3, #7
 8007090:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007094:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007098:	2100      	movs	r1, #0
 800709a:	4618      	mov	r0, r3
 800709c:	f001 fa72 	bl	8008584 <hci_send_req>
 80070a0:	4603      	mov	r3, r0
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	da01      	bge.n	80070aa <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 80070a6:	23ff      	movs	r3, #255	@ 0xff
 80070a8:	e02e      	b.n	8007108 <aci_gap_init+0x150>
  if ( resp.Status )
 80070aa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80070ae:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80070b2:	781b      	ldrb	r3, [r3, #0]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d005      	beq.n	80070c4 <aci_gap_init+0x10c>
    return resp.Status;
 80070b8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80070bc:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80070c0:	781b      	ldrb	r3, [r3, #0]
 80070c2:	e021      	b.n	8007108 <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 80070c4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80070c8:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80070cc:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80070d0:	b29a      	uxth	r2, r3
 80070d2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80070d6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 80070de:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80070e2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80070e6:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80070ea:	b29a      	uxth	r2, r3
 80070ec:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80070f0:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 80070f2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80070f6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80070fa:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80070fe:	b29a      	uxth	r2, r3
 8007100:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8007104:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8007106:	2300      	movs	r3, #0
}
 8007108:	4618      	mov	r0, r3
 800710a:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 800710e:	46bd      	mov	sp, r7
 8007110:	bd90      	pop	{r4, r7, pc}

08007112 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 8007112:	b580      	push	{r7, lr}
 8007114:	b0cc      	sub	sp, #304	@ 0x130
 8007116:	af00      	add	r7, sp, #0
 8007118:	4602      	mov	r2, r0
 800711a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800711e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8007122:	6019      	str	r1, [r3, #0]
 8007124:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007128:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800712c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 800712e:	f107 0310 	add.w	r3, r7, #16
 8007132:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8007136:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800713a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800713e:	2200      	movs	r2, #0
 8007140:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007142:	2300      	movs	r3, #0
 8007144:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->AdvDataLen = AdvDataLen;
 8007148:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800714c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8007150:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8007154:	7812      	ldrb	r2, [r2, #0]
 8007156:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007158:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800715c:	3301      	adds	r3, #1
 800715e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 8007162:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007166:	1c58      	adds	r0, r3, #1
 8007168:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800716c:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8007170:	781a      	ldrb	r2, [r3, #0]
 8007172:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007176:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800717a:	6819      	ldr	r1, [r3, #0]
 800717c:	f000 fe5e 	bl	8007e3c <Osal_MemCpy>
  index_input += AdvDataLen;
 8007180:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007184:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8007188:	781b      	ldrb	r3, [r3, #0]
 800718a:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800718e:	4413      	add	r3, r2
 8007190:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007194:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007198:	2218      	movs	r2, #24
 800719a:	2100      	movs	r1, #0
 800719c:	4618      	mov	r0, r3
 800719e:	f000 fe5d 	bl	8007e5c <Osal_MemSet>
  rq.ogf = 0x3f;
 80071a2:	233f      	movs	r3, #63	@ 0x3f
 80071a4:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08e;
 80071a8:	238e      	movs	r3, #142	@ 0x8e
 80071aa:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80071ae:	f107 0310 	add.w	r3, r7, #16
 80071b2:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80071b6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80071ba:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80071be:	f107 030f 	add.w	r3, r7, #15
 80071c2:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80071c6:	2301      	movs	r3, #1
 80071c8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80071cc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80071d0:	2100      	movs	r1, #0
 80071d2:	4618      	mov	r0, r3
 80071d4:	f001 f9d6 	bl	8008584 <hci_send_req>
 80071d8:	4603      	mov	r3, r0
 80071da:	2b00      	cmp	r3, #0
 80071dc:	da01      	bge.n	80071e2 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 80071de:	23ff      	movs	r3, #255	@ 0xff
 80071e0:	e004      	b.n	80071ec <aci_gap_update_adv_data+0xda>
  return status;
 80071e2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80071e6:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80071ea:	781b      	ldrb	r3, [r3, #0]
}
 80071ec:	4618      	mov	r0, r3
 80071ee:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd80      	pop	{r7, pc}

080071f6 <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 80071f6:	b580      	push	{r7, lr}
 80071f8:	b088      	sub	sp, #32
 80071fa:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80071fc:	2300      	movs	r3, #0
 80071fe:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007200:	f107 0308 	add.w	r3, r7, #8
 8007204:	2218      	movs	r2, #24
 8007206:	2100      	movs	r1, #0
 8007208:	4618      	mov	r0, r3
 800720a:	f000 fe27 	bl	8007e5c <Osal_MemSet>
  rq.ogf = 0x3f;
 800720e:	233f      	movs	r3, #63	@ 0x3f
 8007210:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 8007212:	2392      	movs	r3, #146	@ 0x92
 8007214:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8007216:	1dfb      	adds	r3, r7, #7
 8007218:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800721a:	2301      	movs	r3, #1
 800721c:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800721e:	f107 0308 	add.w	r3, r7, #8
 8007222:	2100      	movs	r1, #0
 8007224:	4618      	mov	r0, r3
 8007226:	f001 f9ad 	bl	8008584 <hci_send_req>
 800722a:	4603      	mov	r3, r0
 800722c:	2b00      	cmp	r3, #0
 800722e:	da01      	bge.n	8007234 <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 8007230:	23ff      	movs	r3, #255	@ 0xff
 8007232:	e000      	b.n	8007236 <aci_gap_configure_filter_accept_list+0x40>
  return status;
 8007234:	79fb      	ldrb	r3, [r7, #7]
}
 8007236:	4618      	mov	r0, r3
 8007238:	3720      	adds	r7, #32
 800723a:	46bd      	mov	sp, r7
 800723c:	bd80      	pop	{r7, pc}

0800723e <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 800723e:	b580      	push	{r7, lr}
 8007240:	b088      	sub	sp, #32
 8007242:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8007244:	2300      	movs	r3, #0
 8007246:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007248:	f107 0308 	add.w	r3, r7, #8
 800724c:	2218      	movs	r2, #24
 800724e:	2100      	movs	r1, #0
 8007250:	4618      	mov	r0, r3
 8007252:	f000 fe03 	bl	8007e5c <Osal_MemSet>
  rq.ogf = 0x3f;
 8007256:	233f      	movs	r3, #63	@ 0x3f
 8007258:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 800725a:	f240 1301 	movw	r3, #257	@ 0x101
 800725e:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8007260:	1dfb      	adds	r3, r7, #7
 8007262:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8007264:	2301      	movs	r3, #1
 8007266:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007268:	f107 0308 	add.w	r3, r7, #8
 800726c:	2100      	movs	r1, #0
 800726e:	4618      	mov	r0, r3
 8007270:	f001 f988 	bl	8008584 <hci_send_req>
 8007274:	4603      	mov	r3, r0
 8007276:	2b00      	cmp	r3, #0
 8007278:	da01      	bge.n	800727e <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 800727a:	23ff      	movs	r3, #255	@ 0xff
 800727c:	e000      	b.n	8007280 <aci_gatt_init+0x42>
  return status;
 800727e:	79fb      	ldrb	r3, [r7, #7]
}
 8007280:	4618      	mov	r0, r3
 8007282:	3720      	adds	r7, #32
 8007284:	46bd      	mov	sp, r7
 8007286:	bd80      	pop	{r7, pc}

08007288 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 8007288:	b590      	push	{r4, r7, lr}
 800728a:	b0cf      	sub	sp, #316	@ 0x13c
 800728c:	af00      	add	r7, sp, #0
 800728e:	4604      	mov	r4, r0
 8007290:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 8007294:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 8007298:	6001      	str	r1, [r0, #0]
 800729a:	4610      	mov	r0, r2
 800729c:	4619      	mov	r1, r3
 800729e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80072a2:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 80072a6:	4622      	mov	r2, r4
 80072a8:	701a      	strb	r2, [r3, #0]
 80072aa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80072ae:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 80072b2:	4602      	mov	r2, r0
 80072b4:	701a      	strb	r2, [r3, #0]
 80072b6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80072ba:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 80072be:	460a      	mov	r2, r1
 80072c0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 80072c2:	f107 0310 	add.w	r3, r7, #16
 80072c6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 80072ca:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80072ce:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 80072d2:	781b      	ldrb	r3, [r3, #0]
 80072d4:	2b01      	cmp	r3, #1
 80072d6:	d00a      	beq.n	80072ee <aci_gatt_add_service+0x66>
 80072d8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80072dc:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 80072e0:	781b      	ldrb	r3, [r3, #0]
 80072e2:	2b02      	cmp	r3, #2
 80072e4:	d101      	bne.n	80072ea <aci_gatt_add_service+0x62>
 80072e6:	2311      	movs	r3, #17
 80072e8:	e002      	b.n	80072f0 <aci_gatt_add_service+0x68>
 80072ea:	2301      	movs	r3, #1
 80072ec:	e000      	b.n	80072f0 <aci_gatt_add_service+0x68>
 80072ee:	2303      	movs	r3, #3
 80072f0:	f107 0210 	add.w	r2, r7, #16
 80072f4:	4413      	add	r3, r2
 80072f6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80072fa:	f107 030c 	add.w	r3, r7, #12
 80072fe:	2203      	movs	r2, #3
 8007300:	2100      	movs	r1, #0
 8007302:	4618      	mov	r0, r3
 8007304:	f000 fdaa 	bl	8007e5c <Osal_MemSet>
  int index_input = 0;
 8007308:	2300      	movs	r3, #0
 800730a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 800730e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8007312:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8007316:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 800731a:	7812      	ldrb	r2, [r2, #0]
 800731c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800731e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007322:	3301      	adds	r3, #1
 8007324:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 8007328:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800732c:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8007330:	781b      	ldrb	r3, [r3, #0]
 8007332:	2b01      	cmp	r3, #1
 8007334:	d002      	beq.n	800733c <aci_gatt_add_service+0xb4>
 8007336:	2b02      	cmp	r3, #2
 8007338:	d004      	beq.n	8007344 <aci_gatt_add_service+0xbc>
 800733a:	e007      	b.n	800734c <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 800733c:	2302      	movs	r3, #2
 800733e:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 8007342:	e005      	b.n	8007350 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 8007344:	2310      	movs	r3, #16
 8007346:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 800734a:	e001      	b.n	8007350 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 800734c:	2397      	movs	r3, #151	@ 0x97
 800734e:	e06c      	b.n	800742a <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 8007350:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8007354:	1c58      	adds	r0, r3, #1
 8007356:	f897 2137 	ldrb.w	r2, [r7, #311]	@ 0x137
 800735a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800735e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8007362:	6819      	ldr	r1, [r3, #0]
 8007364:	f000 fd6a 	bl	8007e3c <Osal_MemCpy>
    index_input += size;
 8007368:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 800736c:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8007370:	4413      	add	r3, r2
 8007372:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Type = Service_Type;
 8007376:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800737a:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800737e:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8007382:	7812      	ldrb	r2, [r2, #0]
 8007384:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8007386:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800738a:	3301      	adds	r3, #1
 800738c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 8007390:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007394:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8007398:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 800739c:	7812      	ldrb	r2, [r2, #0]
 800739e:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 80073a0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80073a4:	3301      	adds	r3, #1
 80073a6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80073aa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80073ae:	2218      	movs	r2, #24
 80073b0:	2100      	movs	r1, #0
 80073b2:	4618      	mov	r0, r3
 80073b4:	f000 fd52 	bl	8007e5c <Osal_MemSet>
  rq.ogf = 0x3f;
 80073b8:	233f      	movs	r3, #63	@ 0x3f
 80073ba:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x102;
 80073be:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80073c2:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80073c6:	f107 0310 	add.w	r3, r7, #16
 80073ca:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80073ce:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80073d2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 80073d6:	f107 030c 	add.w	r3, r7, #12
 80073da:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 80073de:	2303      	movs	r3, #3
 80073e0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80073e4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80073e8:	2100      	movs	r1, #0
 80073ea:	4618      	mov	r0, r3
 80073ec:	f001 f8ca 	bl	8008584 <hci_send_req>
 80073f0:	4603      	mov	r3, r0
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	da01      	bge.n	80073fa <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 80073f6:	23ff      	movs	r3, #255	@ 0xff
 80073f8:	e017      	b.n	800742a <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 80073fa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80073fe:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007402:	781b      	ldrb	r3, [r3, #0]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d005      	beq.n	8007414 <aci_gatt_add_service+0x18c>
    return resp.Status;
 8007408:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800740c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007410:	781b      	ldrb	r3, [r3, #0]
 8007412:	e00a      	b.n	800742a <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 8007414:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007418:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800741c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007420:	b29a      	uxth	r2, r3
 8007422:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8007426:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8007428:	2300      	movs	r3, #0
}
 800742a:	4618      	mov	r0, r3
 800742c:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 8007430:	46bd      	mov	sp, r7
 8007432:	bd90      	pop	{r4, r7, pc}

08007434 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 8007434:	b590      	push	{r4, r7, lr}
 8007436:	b0d1      	sub	sp, #324	@ 0x144
 8007438:	af00      	add	r7, sp, #0
 800743a:	4604      	mov	r4, r0
 800743c:	4608      	mov	r0, r1
 800743e:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 8007442:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 8007446:	600a      	str	r2, [r1, #0]
 8007448:	4619      	mov	r1, r3
 800744a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800744e:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8007452:	4622      	mov	r2, r4
 8007454:	801a      	strh	r2, [r3, #0]
 8007456:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800745a:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800745e:	4602      	mov	r2, r0
 8007460:	701a      	strb	r2, [r3, #0]
 8007462:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8007466:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 800746a:	460a      	mov	r2, r1
 800746c:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 800746e:	f107 0318 	add.w	r3, r7, #24
 8007472:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8007476:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800747a:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800747e:	781b      	ldrb	r3, [r3, #0]
 8007480:	2b01      	cmp	r3, #1
 8007482:	d00a      	beq.n	800749a <aci_gatt_add_char+0x66>
 8007484:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8007488:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800748c:	781b      	ldrb	r3, [r3, #0]
 800748e:	2b02      	cmp	r3, #2
 8007490:	d101      	bne.n	8007496 <aci_gatt_add_char+0x62>
 8007492:	2313      	movs	r3, #19
 8007494:	e002      	b.n	800749c <aci_gatt_add_char+0x68>
 8007496:	2303      	movs	r3, #3
 8007498:	e000      	b.n	800749c <aci_gatt_add_char+0x68>
 800749a:	2305      	movs	r3, #5
 800749c:	f107 0218 	add.w	r2, r7, #24
 80074a0:	4413      	add	r3, r2
 80074a2:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80074a6:	f107 0314 	add.w	r3, r7, #20
 80074aa:	2203      	movs	r2, #3
 80074ac:	2100      	movs	r1, #0
 80074ae:	4618      	mov	r0, r3
 80074b0:	f000 fcd4 	bl	8007e5c <Osal_MemSet>
  int index_input = 0;
 80074b4:	2300      	movs	r3, #0
 80074b6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Service_Handle = Service_Handle;
 80074ba:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80074be:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80074c2:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 80074c6:	8812      	ldrh	r2, [r2, #0]
 80074c8:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80074ca:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80074ce:	3302      	adds	r3, #2
 80074d0:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 80074d4:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80074d8:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80074dc:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 80074e0:	7812      	ldrb	r2, [r2, #0]
 80074e2:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80074e4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80074e8:	3301      	adds	r3, #1
 80074ea:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 80074ee:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80074f2:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 80074f6:	781b      	ldrb	r3, [r3, #0]
 80074f8:	2b01      	cmp	r3, #1
 80074fa:	d002      	beq.n	8007502 <aci_gatt_add_char+0xce>
 80074fc:	2b02      	cmp	r3, #2
 80074fe:	d004      	beq.n	800750a <aci_gatt_add_char+0xd6>
 8007500:	e007      	b.n	8007512 <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 8007502:	2302      	movs	r3, #2
 8007504:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 8007508:	e005      	b.n	8007516 <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 800750a:	2310      	movs	r3, #16
 800750c:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 8007510:	e001      	b.n	8007516 <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 8007512:	2397      	movs	r3, #151	@ 0x97
 8007514:	e091      	b.n	800763a <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 8007516:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800751a:	1cd8      	adds	r0, r3, #3
 800751c:	f897 213f 	ldrb.w	r2, [r7, #319]	@ 0x13f
 8007520:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8007524:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8007528:	6819      	ldr	r1, [r3, #0]
 800752a:	f000 fc87 	bl	8007e3c <Osal_MemCpy>
    index_input += size;
 800752e:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 8007532:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8007536:	4413      	add	r3, r2
 8007538:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 800753c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007540:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8007544:	f5a2 729d 	sub.w	r2, r2, #314	@ 0x13a
 8007548:	8812      	ldrh	r2, [r2, #0]
 800754a:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800754c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8007550:	3302      	adds	r3, #2
 8007552:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Properties = Char_Properties;
 8007556:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800755a:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 800755e:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8007560:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8007564:	3301      	adds	r3, #1
 8007566:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 800756a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800756e:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8007572:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8007574:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8007578:	3301      	adds	r3, #1
 800757a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 800757e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007582:	f897 2158 	ldrb.w	r2, [r7, #344]	@ 0x158
 8007586:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8007588:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800758c:	3301      	adds	r3, #1
 800758e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 8007592:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007596:	f897 215c 	ldrb.w	r2, [r7, #348]	@ 0x15c
 800759a:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 800759c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80075a0:	3301      	adds	r3, #1
 80075a2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Is_Variable = Is_Variable;
 80075a6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80075aa:	f897 2160 	ldrb.w	r2, [r7, #352]	@ 0x160
 80075ae:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 80075b0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80075b4:	3301      	adds	r3, #1
 80075b6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80075ba:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80075be:	2218      	movs	r2, #24
 80075c0:	2100      	movs	r1, #0
 80075c2:	4618      	mov	r0, r3
 80075c4:	f000 fc4a 	bl	8007e5c <Osal_MemSet>
  rq.ogf = 0x3f;
 80075c8:	233f      	movs	r3, #63	@ 0x3f
 80075ca:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x104;
 80075ce:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80075d2:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.cparam = cmd_buffer;
 80075d6:	f107 0318 	add.w	r3, r7, #24
 80075da:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 80075de:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80075e2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &resp;
 80075e6:	f107 0314 	add.w	r3, r7, #20
 80075ea:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = sizeof(resp);
 80075ee:	2303      	movs	r3, #3
 80075f0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 80075f4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80075f8:	2100      	movs	r1, #0
 80075fa:	4618      	mov	r0, r3
 80075fc:	f000 ffc2 	bl	8008584 <hci_send_req>
 8007600:	4603      	mov	r3, r0
 8007602:	2b00      	cmp	r3, #0
 8007604:	da01      	bge.n	800760a <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 8007606:	23ff      	movs	r3, #255	@ 0xff
 8007608:	e017      	b.n	800763a <aci_gatt_add_char+0x206>
  if ( resp.Status )
 800760a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800760e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007612:	781b      	ldrb	r3, [r3, #0]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d005      	beq.n	8007624 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 8007618:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800761c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007620:	781b      	ldrb	r3, [r3, #0]
 8007622:	e00a      	b.n	800763a <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 8007624:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8007628:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800762c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007630:	b29a      	uxth	r2, r3
 8007632:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8007636:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8007638:	2300      	movs	r3, #0
}
 800763a:	4618      	mov	r0, r3
 800763c:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 8007640:	46bd      	mov	sp, r7
 8007642:	bd90      	pop	{r4, r7, pc}

08007644 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8007644:	b5b0      	push	{r4, r5, r7, lr}
 8007646:	b0cc      	sub	sp, #304	@ 0x130
 8007648:	af00      	add	r7, sp, #0
 800764a:	4605      	mov	r5, r0
 800764c:	460c      	mov	r4, r1
 800764e:	4610      	mov	r0, r2
 8007650:	4619      	mov	r1, r3
 8007652:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007656:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800765a:	462a      	mov	r2, r5
 800765c:	801a      	strh	r2, [r3, #0]
 800765e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007662:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007666:	4622      	mov	r2, r4
 8007668:	801a      	strh	r2, [r3, #0]
 800766a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800766e:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 8007672:	4602      	mov	r2, r0
 8007674:	701a      	strb	r2, [r3, #0]
 8007676:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800767a:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800767e:	460a      	mov	r2, r1
 8007680:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8007682:	f107 0310 	add.w	r3, r7, #16
 8007686:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800768a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800768e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8007692:	2200      	movs	r2, #0
 8007694:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007696:	2300      	movs	r3, #0
 8007698:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_Handle = Service_Handle;
 800769c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80076a0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80076a4:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80076a8:	8812      	ldrh	r2, [r2, #0]
 80076aa:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80076ac:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80076b0:	3302      	adds	r3, #2
 80076b2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Handle = Char_Handle;
 80076b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80076ba:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80076be:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 80076c2:	8812      	ldrh	r2, [r2, #0]
 80076c4:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 80076c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80076ca:	3302      	adds	r3, #2
 80076cc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Val_Offset = Val_Offset;
 80076d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80076d4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80076d8:	f2a2 122d 	subw	r2, r2, #301	@ 0x12d
 80076dc:	7812      	ldrb	r2, [r2, #0]
 80076de:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80076e0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80076e4:	3301      	adds	r3, #1
 80076e6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 80076ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80076ee:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80076f2:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 80076f6:	7812      	ldrb	r2, [r2, #0]
 80076f8:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80076fa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80076fe:	3301      	adds	r3, #1
 8007700:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 8007704:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007708:	1d98      	adds	r0, r3, #6
 800770a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800770e:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8007712:	781b      	ldrb	r3, [r3, #0]
 8007714:	461a      	mov	r2, r3
 8007716:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800771a:	f000 fb8f 	bl	8007e3c <Osal_MemCpy>
  index_input += Char_Value_Length;
 800771e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007722:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8007726:	781b      	ldrb	r3, [r3, #0]
 8007728:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800772c:	4413      	add	r3, r2
 800772e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007732:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007736:	2218      	movs	r2, #24
 8007738:	2100      	movs	r1, #0
 800773a:	4618      	mov	r0, r3
 800773c:	f000 fb8e 	bl	8007e5c <Osal_MemSet>
  rq.ogf = 0x3f;
 8007740:	233f      	movs	r3, #63	@ 0x3f
 8007742:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x106;
 8007746:	f44f 7383 	mov.w	r3, #262	@ 0x106
 800774a:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800774e:	f107 0310 	add.w	r3, r7, #16
 8007752:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8007756:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800775a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800775e:	f107 030f 	add.w	r3, r7, #15
 8007762:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8007766:	2301      	movs	r3, #1
 8007768:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800776c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007770:	2100      	movs	r1, #0
 8007772:	4618      	mov	r0, r3
 8007774:	f000 ff06 	bl	8008584 <hci_send_req>
 8007778:	4603      	mov	r3, r0
 800777a:	2b00      	cmp	r3, #0
 800777c:	da01      	bge.n	8007782 <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 800777e:	23ff      	movs	r3, #255	@ 0xff
 8007780:	e004      	b.n	800778c <aci_gatt_update_char_value+0x148>
  return status;
 8007782:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007786:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800778a:	781b      	ldrb	r3, [r3, #0]
}
 800778c:	4618      	mov	r0, r3
 800778e:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8007792:	46bd      	mov	sp, r7
 8007794:	bdb0      	pop	{r4, r5, r7, pc}

08007796 <aci_gatt_confirm_indication>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_confirm_indication( uint16_t Connection_Handle )
{
 8007796:	b580      	push	{r7, lr}
 8007798:	b0cc      	sub	sp, #304	@ 0x130
 800779a:	af00      	add	r7, sp, #0
 800779c:	4602      	mov	r2, r0
 800779e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80077a2:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80077a6:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_confirm_indication_cp0 *cp0 = (aci_gatt_confirm_indication_cp0*)(cmd_buffer);
 80077a8:	f107 0310 	add.w	r3, r7, #16
 80077ac:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80077b0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80077b4:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80077b8:	2200      	movs	r2, #0
 80077ba:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80077bc:	2300      	movs	r3, #0
 80077be:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 80077c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80077c6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80077ca:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80077ce:	8812      	ldrh	r2, [r2, #0]
 80077d0:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80077d2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80077d6:	3302      	adds	r3, #2
 80077d8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80077dc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80077e0:	2218      	movs	r2, #24
 80077e2:	2100      	movs	r1, #0
 80077e4:	4618      	mov	r0, r3
 80077e6:	f000 fb39 	bl	8007e5c <Osal_MemSet>
  rq.ogf = 0x3f;
 80077ea:	233f      	movs	r3, #63	@ 0x3f
 80077ec:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x125;
 80077f0:	f240 1325 	movw	r3, #293	@ 0x125
 80077f4:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80077f8:	f107 0310 	add.w	r3, r7, #16
 80077fc:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8007800:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007804:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8007808:	f107 030f 	add.w	r3, r7, #15
 800780c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8007810:	2301      	movs	r3, #1
 8007812:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007816:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800781a:	2100      	movs	r1, #0
 800781c:	4618      	mov	r0, r3
 800781e:	f000 feb1 	bl	8008584 <hci_send_req>
 8007822:	4603      	mov	r3, r0
 8007824:	2b00      	cmp	r3, #0
 8007826:	da01      	bge.n	800782c <aci_gatt_confirm_indication+0x96>
    return BLE_STATUS_TIMEOUT;
 8007828:	23ff      	movs	r3, #255	@ 0xff
 800782a:	e004      	b.n	8007836 <aci_gatt_confirm_indication+0xa0>
  return status;
 800782c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007830:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8007834:	781b      	ldrb	r3, [r3, #0]
}
 8007836:	4618      	mov	r0, r3
 8007838:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800783c:	46bd      	mov	sp, r7
 800783e:	bd80      	pop	{r7, pc}

08007840 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b0cc      	sub	sp, #304	@ 0x130
 8007844:	af00      	add	r7, sp, #0
 8007846:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800784a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800784e:	601a      	str	r2, [r3, #0]
 8007850:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007854:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8007858:	4602      	mov	r2, r0
 800785a:	701a      	strb	r2, [r3, #0]
 800785c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007860:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8007864:	460a      	mov	r2, r1
 8007866:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8007868:	f107 0310 	add.w	r3, r7, #16
 800786c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8007870:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007874:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8007878:	2200      	movs	r2, #0
 800787a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800787c:	2300      	movs	r3, #0
 800787e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Offset = Offset;
 8007882:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007886:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800788a:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800788e:	7812      	ldrb	r2, [r2, #0]
 8007890:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007892:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007896:	3301      	adds	r3, #1
 8007898:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Length = Length;
 800789c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80078a0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80078a4:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80078a8:	7812      	ldrb	r2, [r2, #0]
 80078aa:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80078ac:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80078b0:	3301      	adds	r3, #1
 80078b2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 80078b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80078ba:	1c98      	adds	r0, r3, #2
 80078bc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80078c0:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80078c4:	781a      	ldrb	r2, [r3, #0]
 80078c6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80078ca:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80078ce:	6819      	ldr	r1, [r3, #0]
 80078d0:	f000 fab4 	bl	8007e3c <Osal_MemCpy>
  index_input += Length;
 80078d4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80078d8:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80078dc:	781b      	ldrb	r3, [r3, #0]
 80078de:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 80078e2:	4413      	add	r3, r2
 80078e4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80078e8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80078ec:	2218      	movs	r2, #24
 80078ee:	2100      	movs	r1, #0
 80078f0:	4618      	mov	r0, r3
 80078f2:	f000 fab3 	bl	8007e5c <Osal_MemSet>
  rq.ogf = 0x3f;
 80078f6:	233f      	movs	r3, #63	@ 0x3f
 80078f8:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00c;
 80078fc:	230c      	movs	r3, #12
 80078fe:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8007902:	f107 0310 	add.w	r3, r7, #16
 8007906:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800790a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800790e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8007912:	f107 030f 	add.w	r3, r7, #15
 8007916:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800791a:	2301      	movs	r3, #1
 800791c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007920:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007924:	2100      	movs	r1, #0
 8007926:	4618      	mov	r0, r3
 8007928:	f000 fe2c 	bl	8008584 <hci_send_req>
 800792c:	4603      	mov	r3, r0
 800792e:	2b00      	cmp	r3, #0
 8007930:	da01      	bge.n	8007936 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 8007932:	23ff      	movs	r3, #255	@ 0xff
 8007934:	e004      	b.n	8007940 <aci_hal_write_config_data+0x100>
  return status;
 8007936:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800793a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800793e:	781b      	ldrb	r3, [r3, #0]
}
 8007940:	4618      	mov	r0, r3
 8007942:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8007946:	46bd      	mov	sp, r7
 8007948:	bd80      	pop	{r7, pc}

0800794a <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 800794a:	b580      	push	{r7, lr}
 800794c:	b0cc      	sub	sp, #304	@ 0x130
 800794e:	af00      	add	r7, sp, #0
 8007950:	4602      	mov	r2, r0
 8007952:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007956:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800795a:	701a      	strb	r2, [r3, #0]
 800795c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007960:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8007964:	460a      	mov	r2, r1
 8007966:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8007968:	f107 0310 	add.w	r3, r7, #16
 800796c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8007970:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007974:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8007978:	2200      	movs	r2, #0
 800797a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800797c:	2300      	movs	r3, #0
 800797e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->En_High_Power = En_High_Power;
 8007982:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007986:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800798a:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800798e:	7812      	ldrb	r2, [r2, #0]
 8007990:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007992:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007996:	3301      	adds	r3, #1
 8007998:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->PA_Level = PA_Level;
 800799c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80079a0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80079a4:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80079a8:	7812      	ldrb	r2, [r2, #0]
 80079aa:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80079ac:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80079b0:	3301      	adds	r3, #1
 80079b2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80079b6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80079ba:	2218      	movs	r2, #24
 80079bc:	2100      	movs	r1, #0
 80079be:	4618      	mov	r0, r3
 80079c0:	f000 fa4c 	bl	8007e5c <Osal_MemSet>
  rq.ogf = 0x3f;
 80079c4:	233f      	movs	r3, #63	@ 0x3f
 80079c6:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00f;
 80079ca:	230f      	movs	r3, #15
 80079cc:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80079d0:	f107 0310 	add.w	r3, r7, #16
 80079d4:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80079d8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80079dc:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80079e0:	f107 030f 	add.w	r3, r7, #15
 80079e4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80079e8:	2301      	movs	r3, #1
 80079ea:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80079ee:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80079f2:	2100      	movs	r1, #0
 80079f4:	4618      	mov	r0, r3
 80079f6:	f000 fdc5 	bl	8008584 <hci_send_req>
 80079fa:	4603      	mov	r3, r0
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	da01      	bge.n	8007a04 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 8007a00:	23ff      	movs	r3, #255	@ 0xff
 8007a02:	e004      	b.n	8007a0e <aci_hal_set_tx_power_level+0xc4>
  return status;
 8007a04:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007a08:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8007a0c:	781b      	ldrb	r3, [r3, #0]
}
 8007a0e:	4618      	mov	r0, r3
 8007a10:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8007a14:	46bd      	mov	sp, r7
 8007a16:	bd80      	pop	{r7, pc}

08007a18 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b0cc      	sub	sp, #304	@ 0x130
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	4602      	mov	r2, r0
 8007a20:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007a24:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8007a28:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 8007a2a:	f107 0310 	add.w	r3, r7, #16
 8007a2e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8007a32:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007a36:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007a3e:	2300      	movs	r3, #0
 8007a40:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 8007a44:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007a48:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8007a4c:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8007a50:	8812      	ldrh	r2, [r2, #0]
 8007a52:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007a54:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007a58:	3302      	adds	r3, #2
 8007a5a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007a5e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007a62:	2218      	movs	r2, #24
 8007a64:	2100      	movs	r1, #0
 8007a66:	4618      	mov	r0, r3
 8007a68:	f000 f9f8 	bl	8007e5c <Osal_MemSet>
  rq.ogf = 0x3f;
 8007a6c:	233f      	movs	r3, #63	@ 0x3f
 8007a6e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x018;
 8007a72:	2318      	movs	r3, #24
 8007a74:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8007a78:	f107 0310 	add.w	r3, r7, #16
 8007a7c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8007a80:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007a84:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8007a88:	f107 030f 	add.w	r3, r7, #15
 8007a8c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8007a90:	2301      	movs	r3, #1
 8007a92:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007a96:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007a9a:	2100      	movs	r1, #0
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	f000 fd71 	bl	8008584 <hci_send_req>
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	da01      	bge.n	8007aac <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 8007aa8:	23ff      	movs	r3, #255	@ 0xff
 8007aaa:	e004      	b.n	8007ab6 <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 8007aac:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007ab0:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8007ab4:	781b      	ldrb	r3, [r3, #0]
}
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8007abc:	46bd      	mov	sp, r7
 8007abe:	bd80      	pop	{r7, pc}

08007ac0 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b088      	sub	sp, #32
 8007ac4:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007aca:	f107 0308 	add.w	r3, r7, #8
 8007ace:	2218      	movs	r2, #24
 8007ad0:	2100      	movs	r1, #0
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	f000 f9c2 	bl	8007e5c <Osal_MemSet>
  rq.ogf = 0x03;
 8007ad8:	2303      	movs	r3, #3
 8007ada:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8007adc:	2303      	movs	r3, #3
 8007ade:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8007ae0:	1dfb      	adds	r3, r7, #7
 8007ae2:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8007ae4:	2301      	movs	r3, #1
 8007ae6:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007ae8:	f107 0308 	add.w	r3, r7, #8
 8007aec:	2100      	movs	r1, #0
 8007aee:	4618      	mov	r0, r3
 8007af0:	f000 fd48 	bl	8008584 <hci_send_req>
 8007af4:	4603      	mov	r3, r0
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	da01      	bge.n	8007afe <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8007afa:	23ff      	movs	r3, #255	@ 0xff
 8007afc:	e000      	b.n	8007b00 <hci_reset+0x40>
  return status;
 8007afe:	79fb      	ldrb	r3, [r7, #7]
}
 8007b00:	4618      	mov	r0, r3
 8007b02:	3720      	adds	r7, #32
 8007b04:	46bd      	mov	sp, r7
 8007b06:	bd80      	pop	{r7, pc}

08007b08 <hci_le_read_phy>:
}

tBleStatus hci_le_read_phy( uint16_t Connection_Handle,
                            uint8_t* TX_PHY,
                            uint8_t* RX_PHY )
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b0ce      	sub	sp, #312	@ 0x138
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007b12:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8007b16:	6019      	str	r1, [r3, #0]
 8007b18:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007b1c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8007b20:	601a      	str	r2, [r3, #0]
 8007b22:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007b26:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8007b2a:	4602      	mov	r2, r0
 8007b2c:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_read_phy_cp0 *cp0 = (hci_le_read_phy_cp0*)(cmd_buffer);
 8007b2e:	f107 0318 	add.w	r3, r7, #24
 8007b32:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  hci_le_read_phy_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8007b36:	f107 0310 	add.w	r3, r7, #16
 8007b3a:	2205      	movs	r2, #5
 8007b3c:	2100      	movs	r1, #0
 8007b3e:	4618      	mov	r0, r3
 8007b40:	f000 f98c 	bl	8007e5c <Osal_MemSet>
  int index_input = 0;
 8007b44:	2300      	movs	r3, #0
 8007b46:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Connection_Handle = Connection_Handle;
 8007b4a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007b4e:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8007b52:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8007b56:	8812      	ldrh	r2, [r2, #0]
 8007b58:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007b5a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8007b5e:	3302      	adds	r3, #2
 8007b60:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007b64:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8007b68:	2218      	movs	r2, #24
 8007b6a:	2100      	movs	r1, #0
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	f000 f975 	bl	8007e5c <Osal_MemSet>
  rq.ogf = 0x08;
 8007b72:	2308      	movs	r3, #8
 8007b74:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x030;
 8007b78:	2330      	movs	r3, #48	@ 0x30
 8007b7a:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.cparam = cmd_buffer;
 8007b7e:	f107 0318 	add.w	r3, r7, #24
 8007b82:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 8007b86:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8007b8a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &resp;
 8007b8e:	f107 0310 	add.w	r3, r7, #16
 8007b92:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = sizeof(resp);
 8007b96:	2305      	movs	r3, #5
 8007b98:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007b9c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8007ba0:	2100      	movs	r1, #0
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	f000 fcee 	bl	8008584 <hci_send_req>
 8007ba8:	4603      	mov	r3, r0
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	da01      	bge.n	8007bb2 <hci_le_read_phy+0xaa>
    return BLE_STATUS_TIMEOUT;
 8007bae:	23ff      	movs	r3, #255	@ 0xff
 8007bb0:	e023      	b.n	8007bfa <hci_le_read_phy+0xf2>
  if ( resp.Status )
 8007bb2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007bb6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8007bba:	781b      	ldrb	r3, [r3, #0]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d005      	beq.n	8007bcc <hci_le_read_phy+0xc4>
    return resp.Status;
 8007bc0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007bc4:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8007bc8:	781b      	ldrb	r3, [r3, #0]
 8007bca:	e016      	b.n	8007bfa <hci_le_read_phy+0xf2>
  *TX_PHY = resp.TX_PHY;
 8007bcc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007bd0:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8007bd4:	78da      	ldrb	r2, [r3, #3]
 8007bd6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007bda:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	701a      	strb	r2, [r3, #0]
  *RX_PHY = resp.RX_PHY;
 8007be2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007be6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8007bea:	791a      	ldrb	r2, [r3, #4]
 8007bec:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007bf0:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	701a      	strb	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8007bf8:	2300      	movs	r3, #0
}
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 8007c00:	46bd      	mov	sp, r7
 8007c02:	bd80      	pop	{r7, pc}

08007c04 <hci_le_set_default_phy>:

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 8007c04:	b590      	push	{r4, r7, lr}
 8007c06:	b0cd      	sub	sp, #308	@ 0x134
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	4604      	mov	r4, r0
 8007c0c:	4608      	mov	r0, r1
 8007c0e:	4611      	mov	r1, r2
 8007c10:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007c14:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8007c18:	4622      	mov	r2, r4
 8007c1a:	701a      	strb	r2, [r3, #0]
 8007c1c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007c20:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8007c24:	4602      	mov	r2, r0
 8007c26:	701a      	strb	r2, [r3, #0]
 8007c28:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007c2c:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8007c30:	460a      	mov	r2, r1
 8007c32:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 8007c34:	f107 0310 	add.w	r3, r7, #16
 8007c38:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8007c3c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007c40:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8007c44:	2200      	movs	r2, #0
 8007c46:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007c48:	2300      	movs	r3, #0
 8007c4a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 8007c4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007c52:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8007c56:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8007c5a:	7812      	ldrb	r2, [r2, #0]
 8007c5c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007c5e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007c62:	3301      	adds	r3, #1
 8007c64:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->TX_PHYS = TX_PHYS;
 8007c68:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007c6c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8007c70:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8007c74:	7812      	ldrb	r2, [r2, #0]
 8007c76:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8007c78:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007c7c:	3301      	adds	r3, #1
 8007c7e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->RX_PHYS = RX_PHYS;
 8007c82:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007c86:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8007c8a:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8007c8e:	7812      	ldrb	r2, [r2, #0]
 8007c90:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8007c92:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007c96:	3301      	adds	r3, #1
 8007c98:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007c9c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007ca0:	2218      	movs	r2, #24
 8007ca2:	2100      	movs	r1, #0
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	f000 f8d9 	bl	8007e5c <Osal_MemSet>
  rq.ogf = 0x08;
 8007caa:	2308      	movs	r3, #8
 8007cac:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x031;
 8007cb0:	2331      	movs	r3, #49	@ 0x31
 8007cb2:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8007cb6:	f107 0310 	add.w	r3, r7, #16
 8007cba:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8007cbe:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007cc2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8007cc6:	f107 030f 	add.w	r3, r7, #15
 8007cca:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8007cce:	2301      	movs	r3, #1
 8007cd0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007cd4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007cd8:	2100      	movs	r1, #0
 8007cda:	4618      	mov	r0, r3
 8007cdc:	f000 fc52 	bl	8008584 <hci_send_req>
 8007ce0:	4603      	mov	r3, r0
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	da01      	bge.n	8007cea <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 8007ce6:	23ff      	movs	r3, #255	@ 0xff
 8007ce8:	e004      	b.n	8007cf4 <hci_le_set_default_phy+0xf0>
  return status;
 8007cea:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007cee:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8007cf2:	781b      	ldrb	r3, [r3, #0]
}
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	bd90      	pop	{r4, r7, pc}

08007cfe <aci_l2cap_connection_parameter_update_req>:
tBleStatus aci_l2cap_connection_parameter_update_req( uint16_t Connection_Handle,
                                                      uint16_t Conn_Interval_Min,
                                                      uint16_t Conn_Interval_Max,
                                                      uint16_t Latency,
                                                      uint16_t Timeout_Multiplier )
{
 8007cfe:	b5b0      	push	{r4, r5, r7, lr}
 8007d00:	b0cc      	sub	sp, #304	@ 0x130
 8007d02:	af00      	add	r7, sp, #0
 8007d04:	4605      	mov	r5, r0
 8007d06:	460c      	mov	r4, r1
 8007d08:	4610      	mov	r0, r2
 8007d0a:	4619      	mov	r1, r3
 8007d0c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007d10:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8007d14:	462a      	mov	r2, r5
 8007d16:	801a      	strh	r2, [r3, #0]
 8007d18:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007d1c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007d20:	4622      	mov	r2, r4
 8007d22:	801a      	strh	r2, [r3, #0]
 8007d24:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007d28:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8007d2c:	4602      	mov	r2, r0
 8007d2e:	801a      	strh	r2, [r3, #0]
 8007d30:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007d34:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8007d38:	460a      	mov	r2, r1
 8007d3a:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_l2cap_connection_parameter_update_req_cp0 *cp0 = (aci_l2cap_connection_parameter_update_req_cp0*)(cmd_buffer);
 8007d3c:	f107 0310 	add.w	r3, r7, #16
 8007d40:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8007d44:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007d48:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007d50:	2300      	movs	r3, #0
 8007d52:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8007d56:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007d5a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8007d5e:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8007d62:	8812      	ldrh	r2, [r2, #0]
 8007d64:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007d66:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007d6a:	3302      	adds	r3, #2
 8007d6c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Conn_Interval_Min = Conn_Interval_Min;
 8007d70:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007d74:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8007d78:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 8007d7c:	8812      	ldrh	r2, [r2, #0]
 8007d7e:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8007d80:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007d84:	3302      	adds	r3, #2
 8007d86:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Conn_Interval_Max = Conn_Interval_Max;
 8007d8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007d8e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8007d92:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 8007d96:	8812      	ldrh	r2, [r2, #0]
 8007d98:	809a      	strh	r2, [r3, #4]
  index_input += 2;
 8007d9a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007d9e:	3302      	adds	r3, #2
 8007da0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Latency = Latency;
 8007da4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007da8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8007dac:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 8007db0:	8812      	ldrh	r2, [r2, #0]
 8007db2:	80da      	strh	r2, [r3, #6]
  index_input += 2;
 8007db4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007db8:	3302      	adds	r3, #2
 8007dba:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Timeout_Multiplier = Timeout_Multiplier;
 8007dbe:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007dc2:	f8b7 2140 	ldrh.w	r2, [r7, #320]	@ 0x140
 8007dc6:	811a      	strh	r2, [r3, #8]
  index_input += 2;
 8007dc8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007dcc:	3302      	adds	r3, #2
 8007dce:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007dd2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007dd6:	2218      	movs	r2, #24
 8007dd8:	2100      	movs	r1, #0
 8007dda:	4618      	mov	r0, r3
 8007ddc:	f000 f83e 	bl	8007e5c <Osal_MemSet>
  rq.ogf = 0x3f;
 8007de0:	233f      	movs	r3, #63	@ 0x3f
 8007de2:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x181;
 8007de6:	f240 1381 	movw	r3, #385	@ 0x181
 8007dea:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.event = 0x0F;
 8007dee:	230f      	movs	r3, #15
 8007df0:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  rq.cparam = cmd_buffer;
 8007df4:	f107 0310 	add.w	r3, r7, #16
 8007df8:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8007dfc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007e00:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8007e04:	f107 030f 	add.w	r3, r7, #15
 8007e08:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8007e0c:	2301      	movs	r3, #1
 8007e0e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007e12:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007e16:	2100      	movs	r1, #0
 8007e18:	4618      	mov	r0, r3
 8007e1a:	f000 fbb3 	bl	8008584 <hci_send_req>
 8007e1e:	4603      	mov	r3, r0
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	da01      	bge.n	8007e28 <aci_l2cap_connection_parameter_update_req+0x12a>
    return BLE_STATUS_TIMEOUT;
 8007e24:	23ff      	movs	r3, #255	@ 0xff
 8007e26:	e004      	b.n	8007e32 <aci_l2cap_connection_parameter_update_req+0x134>
  return status;
 8007e28:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007e2c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8007e30:	781b      	ldrb	r3, [r3, #0]
}
 8007e32:	4618      	mov	r0, r3
 8007e34:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	bdb0      	pop	{r4, r5, r7, pc}

08007e3c <Osal_MemCpy>:
 * Osal_MemCpy
 *
 */

void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b084      	sub	sp, #16
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	60f8      	str	r0, [r7, #12]
 8007e44:	60b9      	str	r1, [r7, #8]
 8007e46:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size );
 8007e48:	687a      	ldr	r2, [r7, #4]
 8007e4a:	68b9      	ldr	r1, [r7, #8]
 8007e4c:	68f8      	ldr	r0, [r7, #12]
 8007e4e:	f003 f9ae 	bl	800b1ae <memcpy>
 8007e52:	4603      	mov	r3, r0
}
 8007e54:	4618      	mov	r0, r3
 8007e56:	3710      	adds	r7, #16
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	bd80      	pop	{r7, pc}

08007e5c <Osal_MemSet>:
 * Osal_MemSet
 *
 */

void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b084      	sub	sp, #16
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	60f8      	str	r0, [r7, #12]
 8007e64:	60b9      	str	r1, [r7, #8]
 8007e66:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8007e68:	687a      	ldr	r2, [r7, #4]
 8007e6a:	68b9      	ldr	r1, [r7, #8]
 8007e6c:	68f8      	ldr	r0, [r7, #12]
 8007e6e:	f003 f923 	bl	800b0b8 <memset>
 8007e72:	4603      	mov	r3, r0
}
 8007e74:	4618      	mov	r0, r3
 8007e76:	3710      	adds	r7, #16
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	bd80      	pop	{r7, pc}

08007e7c <PeerToPeer_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t PeerToPeer_Event_Handler(void *Event)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b08a      	sub	sp, #40	@ 0x28
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_blecore_aci *blecore_evt;
  aci_gatt_attribute_modified_event_rp0    * attribute_modified;
  P2PS_STM_App_Notification_evt_t Notification;

  return_value = SVCCTL_EvtNotAck;
 8007e84:	2300      	movs	r3, #0
 8007e86:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	3301      	adds	r3, #1
 8007e8e:	623b      	str	r3, [r7, #32]

  switch(event_pckt->evt)
 8007e90:	6a3b      	ldr	r3, [r7, #32]
 8007e92:	781b      	ldrb	r3, [r3, #0]
 8007e94:	2bff      	cmp	r3, #255	@ 0xff
 8007e96:	d14f      	bne.n	8007f38 <PeerToPeer_Event_Handler+0xbc>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 8007e98:	6a3b      	ldr	r3, [r7, #32]
 8007e9a:	3302      	adds	r3, #2
 8007e9c:	61fb      	str	r3, [r7, #28]
      switch(blecore_evt->ecode)
 8007e9e:	69fb      	ldr	r3, [r7, #28]
 8007ea0:	881b      	ldrh	r3, [r3, #0]
 8007ea2:	b29b      	uxth	r3, r3
 8007ea4:	461a      	mov	r2, r3
 8007ea6:	f640 4301 	movw	r3, #3073	@ 0xc01
 8007eaa:	429a      	cmp	r2, r3
 8007eac:	d140      	bne.n	8007f30 <PeerToPeer_Event_Handler+0xb4>
      {
        case ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE:
       {
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 8007eae:	69fb      	ldr	r3, [r7, #28]
 8007eb0:	3302      	adds	r3, #2
 8007eb2:	61bb      	str	r3, [r7, #24]
            if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PNotifyServerToClientCharHdle + 2))
 8007eb4:	69bb      	ldr	r3, [r7, #24]
 8007eb6:	885b      	ldrh	r3, [r3, #2]
 8007eb8:	b29b      	uxth	r3, r3
 8007eba:	461a      	mov	r2, r3
 8007ebc:	4b22      	ldr	r3, [pc, #136]	@ (8007f48 <PeerToPeer_Event_Handler+0xcc>)
 8007ebe:	889b      	ldrh	r3, [r3, #4]
 8007ec0:	3302      	adds	r3, #2
 8007ec2:	429a      	cmp	r2, r3
 8007ec4:	d118      	bne.n	8007ef8 <PeerToPeer_Event_Handler+0x7c>
            {
              /**
               * Descriptor handle
               */
              return_value = SVCCTL_EvtAckFlowEnable;
 8007ec6:	2301      	movs	r3, #1
 8007ec8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
              /**
               * Notify to application
               */
              if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 8007ecc:	69bb      	ldr	r3, [r7, #24]
 8007ece:	7a1b      	ldrb	r3, [r3, #8]
 8007ed0:	f003 0301 	and.w	r3, r3, #1
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d007      	beq.n	8007ee8 <PeerToPeer_Event_Handler+0x6c>
              {
                Notification.P2P_Evt_Opcode = P2PS_STM__NOTIFY_ENABLED_EVT;
 8007ed8:	2300      	movs	r3, #0
 8007eda:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 8007edc:	f107 0308 	add.w	r3, r7, #8
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	f002 fad6 	bl	800a492 <P2PS_STM_App_Notification>
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
              P2PS_STM_App_Notification(&Notification);
            }
#endif
        }
        break;
 8007ee6:	e025      	b.n	8007f34 <PeerToPeer_Event_Handler+0xb8>
                Notification.P2P_Evt_Opcode = P2PS_STM_NOTIFY_DISABLED_EVT;
 8007ee8:	2301      	movs	r3, #1
 8007eea:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 8007eec:	f107 0308 	add.w	r3, r7, #8
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	f002 face 	bl	800a492 <P2PS_STM_App_Notification>
        break;
 8007ef6:	e01d      	b.n	8007f34 <PeerToPeer_Event_Handler+0xb8>
            else if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PWriteClientToServerCharHdle + 1))
 8007ef8:	69bb      	ldr	r3, [r7, #24]
 8007efa:	885b      	ldrh	r3, [r3, #2]
 8007efc:	b29b      	uxth	r3, r3
 8007efe:	461a      	mov	r2, r3
 8007f00:	4b11      	ldr	r3, [pc, #68]	@ (8007f48 <PeerToPeer_Event_Handler+0xcc>)
 8007f02:	885b      	ldrh	r3, [r3, #2]
 8007f04:	3301      	adds	r3, #1
 8007f06:	429a      	cmp	r2, r3
 8007f08:	d114      	bne.n	8007f34 <PeerToPeer_Event_Handler+0xb8>
              BLE_DBG_P2P_STM_MSG("-- GATT : LED CONFIGURATION RECEIVED\n");
 8007f0a:	4810      	ldr	r0, [pc, #64]	@ (8007f4c <PeerToPeer_Event_Handler+0xd0>)
 8007f0c:	f002 fff4 	bl	800aef8 <puts>
              Notification.P2P_Evt_Opcode = P2PS_STM_WRITE_EVT;
 8007f10:	2303      	movs	r3, #3
 8007f12:	723b      	strb	r3, [r7, #8]
              Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 8007f14:	69bb      	ldr	r3, [r7, #24]
 8007f16:	88db      	ldrh	r3, [r3, #6]
 8007f18:	b29b      	uxth	r3, r3
 8007f1a:	b2db      	uxtb	r3, r3
 8007f1c:	743b      	strb	r3, [r7, #16]
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 8007f1e:	69bb      	ldr	r3, [r7, #24]
 8007f20:	3308      	adds	r3, #8
 8007f22:	60fb      	str	r3, [r7, #12]
              P2PS_STM_App_Notification(&Notification);  
 8007f24:	f107 0308 	add.w	r3, r7, #8
 8007f28:	4618      	mov	r0, r3
 8007f2a:	f002 fab2 	bl	800a492 <P2PS_STM_App_Notification>
        break;
 8007f2e:	e001      	b.n	8007f34 <PeerToPeer_Event_Handler+0xb8>

        default:
          break;
 8007f30:	bf00      	nop
 8007f32:	e002      	b.n	8007f3a <PeerToPeer_Event_Handler+0xbe>
        break;
 8007f34:	bf00      	nop
      }
    }
    break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 8007f36:	e000      	b.n	8007f3a <PeerToPeer_Event_Handler+0xbe>

    default:
      break;
 8007f38:	bf00      	nop
  }

  return(return_value);
 8007f3a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}/* end SVCCTL_EvtAckStatus_t */
 8007f3e:	4618      	mov	r0, r3
 8007f40:	3728      	adds	r7, #40	@ 0x28
 8007f42:	46bd      	mov	sp, r7
 8007f44:	bd80      	pop	{r7, pc}
 8007f46:	bf00      	nop
 8007f48:	20000090 	.word	0x20000090
 8007f4c:	0800bf7c 	.word	0x0800bf7c

08007f50 <P2PS_STM_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void P2PS_STM_Init(void)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b08a      	sub	sp, #40	@ 0x28
 8007f54:	af06      	add	r7, sp, #24
  Char_UUID_t  uuid16;

  /**
   *	Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(PeerToPeer_Event_Handler);
 8007f56:	484a      	ldr	r0, [pc, #296]	@ (8008080 <P2PS_STM_Init+0x130>)
 8007f58:	f000 f94a 	bl	80081f0 <SVCCTL_RegisterSvcHandler>
     *                                2 for P2P Write characteristic +
     *                                2 for P2P Notify characteristic +
     *                                1 for client char configuration descriptor +
     *                                
     */
    COPY_P2P_SERVICE_UUID(uuid16.Char_UUID_128);
 8007f5c:	238f      	movs	r3, #143	@ 0x8f
 8007f5e:	703b      	strb	r3, [r7, #0]
 8007f60:	23e5      	movs	r3, #229	@ 0xe5
 8007f62:	707b      	strb	r3, [r7, #1]
 8007f64:	23b3      	movs	r3, #179	@ 0xb3
 8007f66:	70bb      	strb	r3, [r7, #2]
 8007f68:	23d5      	movs	r3, #213	@ 0xd5
 8007f6a:	70fb      	strb	r3, [r7, #3]
 8007f6c:	232e      	movs	r3, #46	@ 0x2e
 8007f6e:	713b      	strb	r3, [r7, #4]
 8007f70:	237f      	movs	r3, #127	@ 0x7f
 8007f72:	717b      	strb	r3, [r7, #5]
 8007f74:	234a      	movs	r3, #74	@ 0x4a
 8007f76:	71bb      	strb	r3, [r7, #6]
 8007f78:	2398      	movs	r3, #152	@ 0x98
 8007f7a:	71fb      	strb	r3, [r7, #7]
 8007f7c:	232a      	movs	r3, #42	@ 0x2a
 8007f7e:	723b      	strb	r3, [r7, #8]
 8007f80:	2348      	movs	r3, #72	@ 0x48
 8007f82:	727b      	strb	r3, [r7, #9]
 8007f84:	237a      	movs	r3, #122	@ 0x7a
 8007f86:	72bb      	strb	r3, [r7, #10]
 8007f88:	23cc      	movs	r3, #204	@ 0xcc
 8007f8a:	72fb      	strb	r3, [r7, #11]
 8007f8c:	2340      	movs	r3, #64	@ 0x40
 8007f8e:	733b      	strb	r3, [r7, #12]
 8007f90:	23fe      	movs	r3, #254	@ 0xfe
 8007f92:	737b      	strb	r3, [r7, #13]
 8007f94:	2300      	movs	r3, #0
 8007f96:	73bb      	strb	r3, [r7, #14]
 8007f98:	2300      	movs	r3, #0
 8007f9a:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_service(UUID_TYPE_128,
 8007f9c:	4639      	mov	r1, r7
 8007f9e:	4b39      	ldr	r3, [pc, #228]	@ (8008084 <P2PS_STM_Init+0x134>)
 8007fa0:	9300      	str	r3, [sp, #0]
 8007fa2:	2306      	movs	r3, #6
 8007fa4:	2201      	movs	r2, #1
 8007fa6:	2002      	movs	r0, #2
 8007fa8:	f7ff f96e 	bl	8007288 <aci_gatt_add_service>
                      &(aPeerToPeerContext.PeerToPeerSvcHdle));

    /**
     *  Add LED Characteristic
     */
    COPY_P2P_WRITE_CHAR_UUID(uuid16.Char_UUID_128);
 8007fac:	2319      	movs	r3, #25
 8007fae:	703b      	strb	r3, [r7, #0]
 8007fb0:	23ed      	movs	r3, #237	@ 0xed
 8007fb2:	707b      	strb	r3, [r7, #1]
 8007fb4:	2382      	movs	r3, #130	@ 0x82
 8007fb6:	70bb      	strb	r3, [r7, #2]
 8007fb8:	23ae      	movs	r3, #174	@ 0xae
 8007fba:	70fb      	strb	r3, [r7, #3]
 8007fbc:	23ed      	movs	r3, #237	@ 0xed
 8007fbe:	713b      	strb	r3, [r7, #4]
 8007fc0:	2321      	movs	r3, #33	@ 0x21
 8007fc2:	717b      	strb	r3, [r7, #5]
 8007fc4:	234c      	movs	r3, #76	@ 0x4c
 8007fc6:	71bb      	strb	r3, [r7, #6]
 8007fc8:	239d      	movs	r3, #157	@ 0x9d
 8007fca:	71fb      	strb	r3, [r7, #7]
 8007fcc:	2341      	movs	r3, #65	@ 0x41
 8007fce:	723b      	strb	r3, [r7, #8]
 8007fd0:	2345      	movs	r3, #69	@ 0x45
 8007fd2:	727b      	strb	r3, [r7, #9]
 8007fd4:	2322      	movs	r3, #34	@ 0x22
 8007fd6:	72bb      	strb	r3, [r7, #10]
 8007fd8:	238e      	movs	r3, #142	@ 0x8e
 8007fda:	72fb      	strb	r3, [r7, #11]
 8007fdc:	2341      	movs	r3, #65	@ 0x41
 8007fde:	733b      	strb	r3, [r7, #12]
 8007fe0:	23fe      	movs	r3, #254	@ 0xfe
 8007fe2:	737b      	strb	r3, [r7, #13]
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	73bb      	strb	r3, [r7, #14]
 8007fe8:	2300      	movs	r3, #0
 8007fea:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 8007fec:	4b25      	ldr	r3, [pc, #148]	@ (8008084 <P2PS_STM_Init+0x134>)
 8007fee:	8818      	ldrh	r0, [r3, #0]
 8007ff0:	463a      	mov	r2, r7
 8007ff2:	4b25      	ldr	r3, [pc, #148]	@ (8008088 <P2PS_STM_Init+0x138>)
 8007ff4:	9305      	str	r3, [sp, #20]
 8007ff6:	2301      	movs	r3, #1
 8007ff8:	9304      	str	r3, [sp, #16]
 8007ffa:	230a      	movs	r3, #10
 8007ffc:	9303      	str	r3, [sp, #12]
 8007ffe:	2301      	movs	r3, #1
 8008000:	9302      	str	r3, [sp, #8]
 8008002:	2300      	movs	r3, #0
 8008004:	9301      	str	r3, [sp, #4]
 8008006:	2306      	movs	r3, #6
 8008008:	9300      	str	r3, [sp, #0]
 800800a:	2302      	movs	r3, #2
 800800c:	2102      	movs	r1, #2
 800800e:	f7ff fa11 	bl	8007434 <aci_gatt_add_char>
                      &(aPeerToPeerContext.P2PWriteClientToServerCharHdle));

    /**
     *   Add Button Characteristic
     */
    COPY_P2P_NOTIFY_UUID(uuid16.Char_UUID_128);
 8008012:	2319      	movs	r3, #25
 8008014:	703b      	strb	r3, [r7, #0]
 8008016:	23ed      	movs	r3, #237	@ 0xed
 8008018:	707b      	strb	r3, [r7, #1]
 800801a:	2382      	movs	r3, #130	@ 0x82
 800801c:	70bb      	strb	r3, [r7, #2]
 800801e:	23ae      	movs	r3, #174	@ 0xae
 8008020:	70fb      	strb	r3, [r7, #3]
 8008022:	23ed      	movs	r3, #237	@ 0xed
 8008024:	713b      	strb	r3, [r7, #4]
 8008026:	2321      	movs	r3, #33	@ 0x21
 8008028:	717b      	strb	r3, [r7, #5]
 800802a:	234c      	movs	r3, #76	@ 0x4c
 800802c:	71bb      	strb	r3, [r7, #6]
 800802e:	239d      	movs	r3, #157	@ 0x9d
 8008030:	71fb      	strb	r3, [r7, #7]
 8008032:	2341      	movs	r3, #65	@ 0x41
 8008034:	723b      	strb	r3, [r7, #8]
 8008036:	2345      	movs	r3, #69	@ 0x45
 8008038:	727b      	strb	r3, [r7, #9]
 800803a:	2322      	movs	r3, #34	@ 0x22
 800803c:	72bb      	strb	r3, [r7, #10]
 800803e:	238e      	movs	r3, #142	@ 0x8e
 8008040:	72fb      	strb	r3, [r7, #11]
 8008042:	2342      	movs	r3, #66	@ 0x42
 8008044:	733b      	strb	r3, [r7, #12]
 8008046:	23fe      	movs	r3, #254	@ 0xfe
 8008048:	737b      	strb	r3, [r7, #13]
 800804a:	2300      	movs	r3, #0
 800804c:	73bb      	strb	r3, [r7, #14]
 800804e:	2300      	movs	r3, #0
 8008050:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 8008052:	4b0c      	ldr	r3, [pc, #48]	@ (8008084 <P2PS_STM_Init+0x134>)
 8008054:	8818      	ldrh	r0, [r3, #0]
 8008056:	463a      	mov	r2, r7
 8008058:	4b0c      	ldr	r3, [pc, #48]	@ (800808c <P2PS_STM_Init+0x13c>)
 800805a:	9305      	str	r3, [sp, #20]
 800805c:	2301      	movs	r3, #1
 800805e:	9304      	str	r3, [sp, #16]
 8008060:	230a      	movs	r3, #10
 8008062:	9303      	str	r3, [sp, #12]
 8008064:	2301      	movs	r3, #1
 8008066:	9302      	str	r3, [sp, #8]
 8008068:	2300      	movs	r3, #0
 800806a:	9301      	str	r3, [sp, #4]
 800806c:	2310      	movs	r3, #16
 800806e:	9300      	str	r3, [sp, #0]
 8008070:	2302      	movs	r3, #2
 8008072:	2102      	movs	r1, #2
 8008074:	f7ff f9de 	bl	8007434 <aci_gatt_add_char>
                      0,
                      &(aPeerToPeerContext.RebootReqCharHdle));
#endif    

    
  return;
 8008078:	bf00      	nop
}
 800807a:	3710      	adds	r7, #16
 800807c:	46bd      	mov	sp, r7
 800807e:	bd80      	pop	{r7, pc}
 8008080:	08007e7d 	.word	0x08007e7d
 8008084:	20000090 	.word	0x20000090
 8008088:	20000092 	.word	0x20000092
 800808c:	20000094 	.word	0x20000094

08008090 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 8008090:	b480      	push	{r7}
 8008092:	af00      	add	r7, sp, #0
  return;
 8008094:	bf00      	nop
}
 8008096:	46bd      	mov	sp, r7
 8008098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809c:	4770      	bx	lr

0800809e <BLS_Init>:

__WEAK void BLS_Init( void )
{
 800809e:	b480      	push	{r7}
 80080a0:	af00      	add	r7, sp, #0
  return;
 80080a2:	bf00      	nop
}
 80080a4:	46bd      	mov	sp, r7
 80080a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080aa:	4770      	bx	lr

080080ac <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 80080ac:	b480      	push	{r7}
 80080ae:	af00      	add	r7, sp, #0
  return;
 80080b0:	bf00      	nop
}
 80080b2:	46bd      	mov	sp, r7
 80080b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b8:	4770      	bx	lr

080080ba <DIS_Init>:
__WEAK void DIS_Init( void )
{
 80080ba:	b480      	push	{r7}
 80080bc:	af00      	add	r7, sp, #0
  return;
 80080be:	bf00      	nop
}
 80080c0:	46bd      	mov	sp, r7
 80080c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c6:	4770      	bx	lr

080080c8 <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 80080c8:	b480      	push	{r7}
 80080ca:	af00      	add	r7, sp, #0
  return;
 80080cc:	bf00      	nop
}
 80080ce:	46bd      	mov	sp, r7
 80080d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d4:	4770      	bx	lr

080080d6 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 80080d6:	b480      	push	{r7}
 80080d8:	af00      	add	r7, sp, #0
  return;
 80080da:	bf00      	nop
}
 80080dc:	46bd      	mov	sp, r7
 80080de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e2:	4770      	bx	lr

080080e4 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 80080e4:	b480      	push	{r7}
 80080e6:	af00      	add	r7, sp, #0
  return;
 80080e8:	bf00      	nop
}
 80080ea:	46bd      	mov	sp, r7
 80080ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f0:	4770      	bx	lr

080080f2 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 80080f2:	b480      	push	{r7}
 80080f4:	af00      	add	r7, sp, #0
  return;
 80080f6:	bf00      	nop
}
 80080f8:	46bd      	mov	sp, r7
 80080fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fe:	4770      	bx	lr

08008100 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 8008100:	b480      	push	{r7}
 8008102:	af00      	add	r7, sp, #0
  return;
 8008104:	bf00      	nop
}
 8008106:	46bd      	mov	sp, r7
 8008108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810c:	4770      	bx	lr

0800810e <LLS_Init>:
__WEAK void LLS_Init( void )
{
 800810e:	b480      	push	{r7}
 8008110:	af00      	add	r7, sp, #0
  return;
 8008112:	bf00      	nop
}
 8008114:	46bd      	mov	sp, r7
 8008116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811a:	4770      	bx	lr

0800811c <TPS_Init>:
__WEAK void TPS_Init( void )
{
 800811c:	b480      	push	{r7}
 800811e:	af00      	add	r7, sp, #0
  return;
 8008120:	bf00      	nop
}
 8008122:	46bd      	mov	sp, r7
 8008124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008128:	4770      	bx	lr

0800812a <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 800812a:	b480      	push	{r7}
 800812c:	af00      	add	r7, sp, #0
  return;
 800812e:	bf00      	nop
}
 8008130:	46bd      	mov	sp, r7
 8008132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008136:	4770      	bx	lr

08008138 <ZDD_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
  return;
}
__WEAK void ZDD_STM_Init( void )
{
 8008138:	b480      	push	{r7}
 800813a:	af00      	add	r7, sp, #0
  return;
 800813c:	bf00      	nop
}
 800813e:	46bd      	mov	sp, r7
 8008140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008144:	4770      	bx	lr

08008146 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 8008146:	b480      	push	{r7}
 8008148:	af00      	add	r7, sp, #0
  return;
 800814a:	bf00      	nop
}
 800814c:	46bd      	mov	sp, r7
 800814e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008152:	4770      	bx	lr

08008154 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 8008154:	b480      	push	{r7}
 8008156:	af00      	add	r7, sp, #0
  return;
 8008158:	bf00      	nop
}
 800815a:	46bd      	mov	sp, r7
 800815c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008160:	4770      	bx	lr

08008162 <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 8008162:	b480      	push	{r7}
 8008164:	af00      	add	r7, sp, #0
  return;
 8008166:	bf00      	nop
}
 8008168:	46bd      	mov	sp, r7
 800816a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816e:	4770      	bx	lr

08008170 <SVCCTL_InitCustomSvc>:
__WEAK void SVCCTL_InitCustomSvc( void )
{
 8008170:	b480      	push	{r7}
 8008172:	af00      	add	r7, sp, #0
  return;
 8008174:	bf00      	nop
}
 8008176:	46bd      	mov	sp, r7
 8008178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817c:	4770      	bx	lr
	...

08008180 <SVCCTL_Init>:

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 8008180:	b580      	push	{r7, lr}
 8008182:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8008184:	4b04      	ldr	r3, [pc, #16]	@ (8008198 <SVCCTL_Init+0x18>)
 8008186:	2200      	movs	r2, #0
 8008188:	711a      	strb	r2, [r3, #4]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800818a:	4b04      	ldr	r3, [pc, #16]	@ (800819c <SVCCTL_Init+0x1c>)
 800818c:	2200      	movs	r2, #0
 800818e:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 8008190:	f000 f806 	bl	80081a0 <SVCCTL_SvcInit>

  return;
 8008194:	bf00      	nop
}
 8008196:	bd80      	pop	{r7, pc}
 8008198:	20000098 	.word	0x20000098
 800819c:	200000a0 	.word	0x200000a0

080081a0 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	af00      	add	r7, sp, #0
  BAS_Init();
 80081a4:	f7ff ff74 	bl	8008090 <BAS_Init>

  BLS_Init();
 80081a8:	f7ff ff79 	bl	800809e <BLS_Init>

  CRS_STM_Init();
 80081ac:	f7ff ff7e 	bl	80080ac <CRS_STM_Init>

  DIS_Init();
 80081b0:	f7ff ff83 	bl	80080ba <DIS_Init>

  EDS_STM_Init();
 80081b4:	f7ff ff88 	bl	80080c8 <EDS_STM_Init>

  HIDS_Init();
 80081b8:	f7ff ff8d 	bl	80080d6 <HIDS_Init>

  HRS_Init();
 80081bc:	f7ff ff92 	bl	80080e4 <HRS_Init>

  HTS_Init();
 80081c0:	f7ff ff97 	bl	80080f2 <HTS_Init>

  IAS_Init();
 80081c4:	f7ff ff9c 	bl	8008100 <IAS_Init>

  LLS_Init();
 80081c8:	f7ff ffa1 	bl	800810e <LLS_Init>

  TPS_Init();
 80081cc:	f7ff ffa6 	bl	800811c <TPS_Init>

  MOTENV_STM_Init();
 80081d0:	f7ff ffab 	bl	800812a <MOTENV_STM_Init>

  P2PS_STM_Init();
 80081d4:	f7ff febc 	bl	8007f50 <P2PS_STM_Init>

  ZDD_STM_Init();
 80081d8:	f7ff ffae 	bl	8008138 <ZDD_STM_Init>

  OTAS_STM_Init();
 80081dc:	f7ff ffb3 	bl	8008146 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 80081e0:	f7ff ffbf 	bl	8008162 <BVOPUS_STM_Init>

  MESH_Init();
 80081e4:	f7ff ffb6 	bl	8008154 <MESH_Init>

  SVCCTL_InitCustomSvc();
 80081e8:	f7ff ffc2 	bl	8008170 <SVCCTL_InitCustomSvc>
  
  return;
 80081ec:	bf00      	nop
}
 80081ee:	bd80      	pop	{r7, pc}

080081f0 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 80081f0:	b480      	push	{r7}
 80081f2:	b083      	sub	sp, #12
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 80081f8:	4b09      	ldr	r3, [pc, #36]	@ (8008220 <SVCCTL_RegisterSvcHandler+0x30>)
 80081fa:	791b      	ldrb	r3, [r3, #4]
 80081fc:	4619      	mov	r1, r3
 80081fe:	4a08      	ldr	r2, [pc, #32]	@ (8008220 <SVCCTL_RegisterSvcHandler+0x30>)
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 8008206:	4b06      	ldr	r3, [pc, #24]	@ (8008220 <SVCCTL_RegisterSvcHandler+0x30>)
 8008208:	791b      	ldrb	r3, [r3, #4]
 800820a:	3301      	adds	r3, #1
 800820c:	b2da      	uxtb	r2, r3
 800820e:	4b04      	ldr	r3, [pc, #16]	@ (8008220 <SVCCTL_RegisterSvcHandler+0x30>)
 8008210:	711a      	strb	r2, [r3, #4]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 8008212:	bf00      	nop
}
 8008214:	370c      	adds	r7, #12
 8008216:	46bd      	mov	sp, r7
 8008218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821c:	4770      	bx	lr
 800821e:	bf00      	nop
 8008220:	20000098 	.word	0x20000098

08008224 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 8008224:	b580      	push	{r7, lr}
 8008226:	b086      	sub	sp, #24
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	3301      	adds	r3, #1
 8008230:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 8008232:	2300      	movs	r3, #0
 8008234:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 8008236:	693b      	ldr	r3, [r7, #16]
 8008238:	781b      	ldrb	r3, [r3, #0]
 800823a:	2bff      	cmp	r3, #255	@ 0xff
 800823c:	d125      	bne.n	800828a <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 800823e:	693b      	ldr	r3, [r7, #16]
 8008240:	3302      	adds	r3, #2
 8008242:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	881b      	ldrh	r3, [r3, #0]
 8008248:	b29b      	uxth	r3, r3
 800824a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800824e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008252:	d118      	bne.n	8008286 <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8008254:	2300      	movs	r3, #0
 8008256:	757b      	strb	r3, [r7, #21]
 8008258:	e00d      	b.n	8008276 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800825a:	7d7b      	ldrb	r3, [r7, #21]
 800825c:	4a1a      	ldr	r2, [pc, #104]	@ (80082c8 <SVCCTL_UserEvtRx+0xa4>)
 800825e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008262:	6878      	ldr	r0, [r7, #4]
 8008264:	4798      	blx	r3
 8008266:	4603      	mov	r3, r0
 8008268:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 800826a:	7dfb      	ldrb	r3, [r7, #23]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d108      	bne.n	8008282 <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8008270:	7d7b      	ldrb	r3, [r7, #21]
 8008272:	3301      	adds	r3, #1
 8008274:	757b      	strb	r3, [r7, #21]
 8008276:	4b14      	ldr	r3, [pc, #80]	@ (80082c8 <SVCCTL_UserEvtRx+0xa4>)
 8008278:	791b      	ldrb	r3, [r3, #4]
 800827a:	7d7a      	ldrb	r2, [r7, #21]
 800827c:	429a      	cmp	r2, r3
 800827e:	d3ec      	bcc.n	800825a <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 8008280:	e002      	b.n	8008288 <SVCCTL_UserEvtRx+0x64>
              break;
 8008282:	bf00      	nop
          break;
 8008284:	e000      	b.n	8008288 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 8008286:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 8008288:	e000      	b.n	800828c <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 800828a:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 800828c:	7dfb      	ldrb	r3, [r7, #23]
 800828e:	2b02      	cmp	r3, #2
 8008290:	d00f      	beq.n	80082b2 <SVCCTL_UserEvtRx+0x8e>
 8008292:	2b02      	cmp	r3, #2
 8008294:	dc10      	bgt.n	80082b8 <SVCCTL_UserEvtRx+0x94>
 8008296:	2b00      	cmp	r3, #0
 8008298:	d002      	beq.n	80082a0 <SVCCTL_UserEvtRx+0x7c>
 800829a:	2b01      	cmp	r3, #1
 800829c:	d006      	beq.n	80082ac <SVCCTL_UserEvtRx+0x88>
 800829e:	e00b      	b.n	80082b8 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 80082a0:	6878      	ldr	r0, [r7, #4]
 80082a2:	f001 fba7 	bl	80099f4 <SVCCTL_App_Notification>
 80082a6:	4603      	mov	r3, r0
 80082a8:	75bb      	strb	r3, [r7, #22]
      break;
 80082aa:	e008      	b.n	80082be <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 80082ac:	2301      	movs	r3, #1
 80082ae:	75bb      	strb	r3, [r7, #22]
      break;
 80082b0:	e005      	b.n	80082be <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 80082b2:	2300      	movs	r3, #0
 80082b4:	75bb      	strb	r3, [r7, #22]
      break;
 80082b6:	e002      	b.n	80082be <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 80082b8:	2301      	movs	r3, #1
 80082ba:	75bb      	strb	r3, [r7, #22]
      break;
 80082bc:	bf00      	nop
  }

  return (return_status);
 80082be:	7dbb      	ldrb	r3, [r7, #22]
}
 80082c0:	4618      	mov	r0, r3
 80082c2:	3718      	adds	r7, #24
 80082c4:	46bd      	mov	sp, r7
 80082c6:	bd80      	pop	{r7, pc}
 80082c8:	20000098 	.word	0x20000098

080082cc <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b088      	sub	sp, #32
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80082d4:	f107 030c 	add.w	r3, r7, #12
 80082d8:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 80082e0:	69fb      	ldr	r3, [r7, #28]
 80082e2:	212e      	movs	r1, #46	@ 0x2e
 80082e4:	f64f 4066 	movw	r0, #64614	@ 0xfc66
 80082e8:	f000 fae8 	bl	80088bc <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80082ec:	69fb      	ldr	r3, [r7, #28]
 80082ee:	330b      	adds	r3, #11
 80082f0:	78db      	ldrb	r3, [r3, #3]
}
 80082f2:	4618      	mov	r0, r3
 80082f4:	3720      	adds	r7, #32
 80082f6:	46bd      	mov	sp, r7
 80082f8:	bd80      	pop	{r7, pc}

080082fa <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 80082fa:	b580      	push	{r7, lr}
 80082fc:	b088      	sub	sp, #32
 80082fe:	af00      	add	r7, sp, #0
 8008300:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8008302:	f107 030c 	add.w	r3, r7, #12
 8008306:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 800830e:	69fb      	ldr	r3, [r7, #28]
 8008310:	210f      	movs	r1, #15
 8008312:	f64f 4068 	movw	r0, #64616	@ 0xfc68
 8008316:	f000 fad1 	bl	80088bc <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800831a:	69fb      	ldr	r3, [r7, #28]
 800831c:	330b      	adds	r3, #11
 800831e:	78db      	ldrb	r3, [r3, #3]
}
 8008320:	4618      	mov	r0, r3
 8008322:	3720      	adds	r7, #32
 8008324:	46bd      	mov	sp, r7
 8008326:	bd80      	pop	{r7, pc}

08008328 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b088      	sub	sp, #32
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8008330:	f107 030c 	add.w	r3, r7, #12
 8008334:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 8008336:	69fb      	ldr	r3, [r7, #28]
 8008338:	687a      	ldr	r2, [r7, #4]
 800833a:	2110      	movs	r1, #16
 800833c:	f64f 4075 	movw	r0, #64629	@ 0xfc75
 8008340:	f000 fabc 	bl	80088bc <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8008344:	69fb      	ldr	r3, [r7, #28]
 8008346:	330b      	adds	r3, #11
 8008348:	78db      	ldrb	r3, [r3, #3]
}
 800834a:	4618      	mov	r0, r3
 800834c:	3720      	adds	r7, #32
 800834e:	46bd      	mov	sp, r7
 8008350:	bd80      	pop	{r7, pc}
	...

08008354 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8008354:	b480      	push	{r7}
 8008356:	b08b      	sub	sp, #44	@ 0x2c
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 800835c:	2300      	movs	r3, #0
 800835e:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 8008360:	2300      	movs	r3, #0
 8008362:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 8008364:	2300      	movs	r3, #0
 8008366:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t wireless_firmware_memorySize = 0;
 8008368:	2300      	movs	r3, #0
 800836a:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 800836c:	2300      	movs	r3, #0
 800836e:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 8008370:	2300      	movs	r3, #0
 8008372:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 8008374:	2300      	movs	r3, #0
 8008376:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 8008378:	2300      	movs	r3, #0
 800837a:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 800837c:	4b4a      	ldr	r3, [pc, #296]	@ (80084a8 <SHCI_GetWirelessFwInfo+0x154>)
 800837e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008380:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8008384:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 8008386:	693b      	ldr	r3, [r7, #16]
 8008388:	009b      	lsls	r3, r3, #2
 800838a:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 800838e:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 8008396:	68bb      	ldr	r3, [r7, #8]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	4a44      	ldr	r2, [pc, #272]	@ (80084ac <SHCI_GetWirelessFwInfo+0x158>)
 800839c:	4293      	cmp	r3, r2
 800839e:	d10f      	bne.n	80083c0 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	695b      	ldr	r3, [r3, #20]
 80083a4:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 80083a6:	68bb      	ldr	r3, [r7, #8]
 80083a8:	699b      	ldr	r3, [r3, #24]
 80083aa:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 80083ac:	68bb      	ldr	r3, [r7, #8]
 80083ae:	69db      	ldr	r3, [r3, #28]
 80083b0:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 80083b2:	68bb      	ldr	r3, [r7, #8]
 80083b4:	68db      	ldr	r3, [r3, #12]
 80083b6:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 80083b8:	68bb      	ldr	r3, [r7, #8]
 80083ba:	691b      	ldr	r3, [r3, #16]
 80083bc:	617b      	str	r3, [r7, #20]
 80083be:	e01a      	b.n	80083f6 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 80083c0:	693b      	ldr	r3, [r7, #16]
 80083c2:	009b      	lsls	r3, r3, #2
 80083c4:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 80083c8:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 80083cc:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	691b      	ldr	r3, [r3, #16]
 80083d4:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	695b      	ldr	r3, [r3, #20]
 80083dc:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	699b      	ldr	r3, [r3, #24]
 80083e4:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	685b      	ldr	r3, [r3, #4]
 80083ec:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	689b      	ldr	r3, [r3, #8]
 80083f4:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 80083f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083f8:	0e1b      	lsrs	r3, r3, #24
 80083fa:	b2da      	uxtb	r2, r3
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8008400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008402:	0c1b      	lsrs	r3, r3, #16
 8008404:	b2da      	uxtb	r2, r3
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800840a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800840c:	0a1b      	lsrs	r3, r3, #8
 800840e:	b2da      	uxtb	r2, r3
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8008414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008416:	091b      	lsrs	r3, r3, #4
 8008418:	b2db      	uxtb	r3, r3
 800841a:	f003 030f 	and.w	r3, r3, #15
 800841e:	b2da      	uxtb	r2, r3
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 8008424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008426:	b2db      	uxtb	r3, r3
 8008428:	f003 030f 	and.w	r3, r3, #15
 800842c:	b2da      	uxtb	r2, r3
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8008432:	6a3b      	ldr	r3, [r7, #32]
 8008434:	0e1b      	lsrs	r3, r3, #24
 8008436:	b2da      	uxtb	r2, r3
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800843c:	6a3b      	ldr	r3, [r7, #32]
 800843e:	0c1b      	lsrs	r3, r3, #16
 8008440:	b2da      	uxtb	r2, r3
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 8008446:	6a3b      	ldr	r3, [r7, #32]
 8008448:	0a1b      	lsrs	r3, r3, #8
 800844a:	b2da      	uxtb	r2, r3
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8008450:	6a3b      	ldr	r3, [r7, #32]
 8008452:	b2da      	uxtb	r2, r3
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 8008458:	69fb      	ldr	r3, [r7, #28]
 800845a:	b2da      	uxtb	r2, r3
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8008460:	69bb      	ldr	r3, [r7, #24]
 8008462:	0e1b      	lsrs	r3, r3, #24
 8008464:	b2da      	uxtb	r2, r3
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800846a:	69bb      	ldr	r3, [r7, #24]
 800846c:	0c1b      	lsrs	r3, r3, #16
 800846e:	b2da      	uxtb	r2, r3
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8008474:	69bb      	ldr	r3, [r7, #24]
 8008476:	0a1b      	lsrs	r3, r3, #8
 8008478:	b2da      	uxtb	r2, r3
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800847e:	697b      	ldr	r3, [r7, #20]
 8008480:	0e1b      	lsrs	r3, r3, #24
 8008482:	b2da      	uxtb	r2, r3
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8008488:	697b      	ldr	r3, [r7, #20]
 800848a:	0c1b      	lsrs	r3, r3, #16
 800848c:	b2da      	uxtb	r2, r3
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8008492:	697b      	ldr	r3, [r7, #20]
 8008494:	b2da      	uxtb	r2, r3
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 800849a:	2300      	movs	r3, #0
}
 800849c:	4618      	mov	r0, r3
 800849e:	372c      	adds	r7, #44	@ 0x2c
 80084a0:	46bd      	mov	sp, r7
 80084a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a6:	4770      	bx	lr
 80084a8:	58004000 	.word	0x58004000
 80084ac:	a94656b9 	.word	0xa94656b9

080084b0 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b082      	sub	sp, #8
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
 80084b8:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	685b      	ldr	r3, [r3, #4]
 80084be:	4a08      	ldr	r2, [pc, #32]	@ (80084e0 <hci_init+0x30>)
 80084c0:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 80084c2:	4a08      	ldr	r2, [pc, #32]	@ (80084e4 <hci_init+0x34>)
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 80084c8:	4806      	ldr	r0, [pc, #24]	@ (80084e4 <hci_init+0x34>)
 80084ca:	f000 f979 	bl	80087c0 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	4618      	mov	r0, r3
 80084d4:	f000 f8da 	bl	800868c <TlInit>

  return;
 80084d8:	bf00      	nop
}
 80084da:	3708      	adds	r7, #8
 80084dc:	46bd      	mov	sp, r7
 80084de:	bd80      	pop	{r7, pc}
 80084e0:	20000310 	.word	0x20000310
 80084e4:	200002e8 	.word	0x200002e8

080084e8 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b084      	sub	sp, #16
 80084ec:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 80084ee:	4822      	ldr	r0, [pc, #136]	@ (8008578 <hci_user_evt_proc+0x90>)
 80084f0:	f000 fd3c 	bl	8008f6c <LST_is_empty>
 80084f4:	4603      	mov	r3, r0
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d12b      	bne.n	8008552 <hci_user_evt_proc+0x6a>
 80084fa:	4b20      	ldr	r3, [pc, #128]	@ (800857c <hci_user_evt_proc+0x94>)
 80084fc:	781b      	ldrb	r3, [r3, #0]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d027      	beq.n	8008552 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8008502:	f107 030c 	add.w	r3, r7, #12
 8008506:	4619      	mov	r1, r3
 8008508:	481b      	ldr	r0, [pc, #108]	@ (8008578 <hci_user_evt_proc+0x90>)
 800850a:	f000 fdbe 	bl	800908a <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800850e:	4b1c      	ldr	r3, [pc, #112]	@ (8008580 <hci_user_evt_proc+0x98>)
 8008510:	69db      	ldr	r3, [r3, #28]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d00c      	beq.n	8008530 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 800851a:	2301      	movs	r3, #1
 800851c:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800851e:	4b18      	ldr	r3, [pc, #96]	@ (8008580 <hci_user_evt_proc+0x98>)
 8008520:	69db      	ldr	r3, [r3, #28]
 8008522:	1d3a      	adds	r2, r7, #4
 8008524:	4610      	mov	r0, r2
 8008526:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8008528:	793a      	ldrb	r2, [r7, #4]
 800852a:	4b14      	ldr	r3, [pc, #80]	@ (800857c <hci_user_evt_proc+0x94>)
 800852c:	701a      	strb	r2, [r3, #0]
 800852e:	e002      	b.n	8008536 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8008530:	4b12      	ldr	r3, [pc, #72]	@ (800857c <hci_user_evt_proc+0x94>)
 8008532:	2201      	movs	r2, #1
 8008534:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 8008536:	4b11      	ldr	r3, [pc, #68]	@ (800857c <hci_user_evt_proc+0x94>)
 8008538:	781b      	ldrb	r3, [r3, #0]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d004      	beq.n	8008548 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	4618      	mov	r0, r3
 8008542:	f000 fb9b 	bl	8008c7c <TL_MM_EvtDone>
 8008546:	e004      	b.n	8008552 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	4619      	mov	r1, r3
 800854c:	480a      	ldr	r0, [pc, #40]	@ (8008578 <hci_user_evt_proc+0x90>)
 800854e:	f000 fd2f 	bl	8008fb0 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8008552:	4809      	ldr	r0, [pc, #36]	@ (8008578 <hci_user_evt_proc+0x90>)
 8008554:	f000 fd0a 	bl	8008f6c <LST_is_empty>
 8008558:	4603      	mov	r3, r0
 800855a:	2b00      	cmp	r3, #0
 800855c:	d107      	bne.n	800856e <hci_user_evt_proc+0x86>
 800855e:	4b07      	ldr	r3, [pc, #28]	@ (800857c <hci_user_evt_proc+0x94>)
 8008560:	781b      	ldrb	r3, [r3, #0]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d003      	beq.n	800856e <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 8008566:	4804      	ldr	r0, [pc, #16]	@ (8008578 <hci_user_evt_proc+0x90>)
 8008568:	f001 ff3a 	bl	800a3e0 <hci_notify_asynch_evt>
  }


  return;
 800856c:	bf00      	nop
 800856e:	bf00      	nop
}
 8008570:	3710      	adds	r7, #16
 8008572:	46bd      	mov	sp, r7
 8008574:	bd80      	pop	{r7, pc}
 8008576:	bf00      	nop
 8008578:	200000a8 	.word	0x200000a8
 800857c:	200000b4 	.word	0x200000b4
 8008580:	200002e8 	.word	0x200002e8

08008584 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b088      	sub	sp, #32
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
 800858c:	460b      	mov	r3, r1
 800858e:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 8008590:	2000      	movs	r0, #0
 8008592:	f000 f8d1 	bl	8008738 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 8008596:	2300      	movs	r3, #0
 8008598:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	885b      	ldrh	r3, [r3, #2]
 800859e:	b21b      	sxth	r3, r3
 80085a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80085a4:	b21a      	sxth	r2, r3
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	881b      	ldrh	r3, [r3, #0]
 80085aa:	029b      	lsls	r3, r3, #10
 80085ac:	b21b      	sxth	r3, r3
 80085ae:	4313      	orrs	r3, r2
 80085b0:	b21b      	sxth	r3, r3
 80085b2:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 80085b4:	4b33      	ldr	r3, [pc, #204]	@ (8008684 <hci_send_req+0x100>)
 80085b6:	2201      	movs	r2, #1
 80085b8:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	68db      	ldr	r3, [r3, #12]
 80085be:	b2d9      	uxtb	r1, r3
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	689a      	ldr	r2, [r3, #8]
 80085c4:	8bbb      	ldrh	r3, [r7, #28]
 80085c6:	4618      	mov	r0, r3
 80085c8:	f000 f890 	bl	80086ec <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 80085cc:	e04e      	b.n	800866c <hci_send_req+0xe8>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 80085ce:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 80085d2:	f001 ff1c 	bl	800a40e <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 80085d6:	e043      	b.n	8008660 <hci_send_req+0xdc>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 80085d8:	f107 030c 	add.w	r3, r7, #12
 80085dc:	4619      	mov	r1, r3
 80085de:	482a      	ldr	r0, [pc, #168]	@ (8008688 <hci_send_req+0x104>)
 80085e0:	f000 fd53 	bl	800908a <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	7a5b      	ldrb	r3, [r3, #9]
 80085e8:	2b0f      	cmp	r3, #15
 80085ea:	d114      	bne.n	8008616 <hci_send_req+0x92>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	330b      	adds	r3, #11
 80085f0:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 80085f2:	693b      	ldr	r3, [r7, #16]
 80085f4:	885b      	ldrh	r3, [r3, #2]
 80085f6:	b29b      	uxth	r3, r3
 80085f8:	8bba      	ldrh	r2, [r7, #28]
 80085fa:	429a      	cmp	r2, r3
 80085fc:	d104      	bne.n	8008608 <hci_send_req+0x84>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	691b      	ldr	r3, [r3, #16]
 8008602:	693a      	ldr	r2, [r7, #16]
 8008604:	7812      	ldrb	r2, [r2, #0]
 8008606:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 8008608:	693b      	ldr	r3, [r7, #16]
 800860a:	785b      	ldrb	r3, [r3, #1]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d027      	beq.n	8008660 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8008610:	2301      	movs	r3, #1
 8008612:	77fb      	strb	r3, [r7, #31]
 8008614:	e024      	b.n	8008660 <hci_send_req+0xdc>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	330b      	adds	r3, #11
 800861a:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 800861c:	69bb      	ldr	r3, [r7, #24]
 800861e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008622:	b29b      	uxth	r3, r3
 8008624:	8bba      	ldrh	r2, [r7, #28]
 8008626:	429a      	cmp	r2, r3
 8008628:	d114      	bne.n	8008654 <hci_send_req+0xd0>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	7a9b      	ldrb	r3, [r3, #10]
 800862e:	3b03      	subs	r3, #3
 8008630:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	695a      	ldr	r2, [r3, #20]
 8008636:	7dfb      	ldrb	r3, [r7, #23]
 8008638:	429a      	cmp	r2, r3
 800863a:	bfa8      	it	ge
 800863c:	461a      	movge	r2, r3
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	6918      	ldr	r0, [r3, #16]
 8008646:	69bb      	ldr	r3, [r7, #24]
 8008648:	1cd9      	adds	r1, r3, #3
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	695b      	ldr	r3, [r3, #20]
 800864e:	461a      	mov	r2, r3
 8008650:	f002 fdad 	bl	800b1ae <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 8008654:	69bb      	ldr	r3, [r7, #24]
 8008656:	781b      	ldrb	r3, [r3, #0]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d001      	beq.n	8008660 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800865c:	2301      	movs	r3, #1
 800865e:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8008660:	4809      	ldr	r0, [pc, #36]	@ (8008688 <hci_send_req+0x104>)
 8008662:	f000 fc83 	bl	8008f6c <LST_is_empty>
 8008666:	4603      	mov	r3, r0
 8008668:	2b00      	cmp	r3, #0
 800866a:	d0b5      	beq.n	80085d8 <hci_send_req+0x54>
  while(local_cmd_status == HCI_TL_CmdBusy)
 800866c:	7ffb      	ldrb	r3, [r7, #31]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d0ad      	beq.n	80085ce <hci_send_req+0x4a>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 8008672:	2001      	movs	r0, #1
 8008674:	f000 f860 	bl	8008738 <NotifyCmdStatus>

  return 0;
 8008678:	2300      	movs	r3, #0
}
 800867a:	4618      	mov	r0, r3
 800867c:	3720      	adds	r7, #32
 800867e:	46bd      	mov	sp, r7
 8008680:	bd80      	pop	{r7, pc}
 8008682:	bf00      	nop
 8008684:	20000314 	.word	0x20000314
 8008688:	20000308 	.word	0x20000308

0800868c <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b086      	sub	sp, #24
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8008694:	480f      	ldr	r0, [pc, #60]	@ (80086d4 <TlInit+0x48>)
 8008696:	f000 fc59 	bl	8008f4c <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 800869a:	4a0f      	ldr	r2, [pc, #60]	@ (80086d8 <TlInit+0x4c>)
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 80086a0:	480e      	ldr	r0, [pc, #56]	@ (80086dc <TlInit+0x50>)
 80086a2:	f000 fc53 	bl	8008f4c <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 80086a6:	4b0e      	ldr	r3, [pc, #56]	@ (80086e0 <TlInit+0x54>)
 80086a8:	2201      	movs	r2, #1
 80086aa:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 80086ac:	4b0d      	ldr	r3, [pc, #52]	@ (80086e4 <TlInit+0x58>)
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d00a      	beq.n	80086ca <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 80086b8:	4b0b      	ldr	r3, [pc, #44]	@ (80086e8 <TlInit+0x5c>)
 80086ba:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 80086bc:	4b09      	ldr	r3, [pc, #36]	@ (80086e4 <TlInit+0x58>)
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	f107 0208 	add.w	r2, r7, #8
 80086c4:	4610      	mov	r0, r2
 80086c6:	4798      	blx	r3
  }

  return;
 80086c8:	bf00      	nop
 80086ca:	bf00      	nop
}
 80086cc:	3718      	adds	r7, #24
 80086ce:	46bd      	mov	sp, r7
 80086d0:	bd80      	pop	{r7, pc}
 80086d2:	bf00      	nop
 80086d4:	20000308 	.word	0x20000308
 80086d8:	200000b0 	.word	0x200000b0
 80086dc:	200000a8 	.word	0x200000a8
 80086e0:	200000b4 	.word	0x200000b4
 80086e4:	200002e8 	.word	0x200002e8
 80086e8:	08008779 	.word	0x08008779

080086ec <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b082      	sub	sp, #8
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	4603      	mov	r3, r0
 80086f4:	603a      	str	r2, [r7, #0]
 80086f6:	80fb      	strh	r3, [r7, #6]
 80086f8:	460b      	mov	r3, r1
 80086fa:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 80086fc:	4b0c      	ldr	r3, [pc, #48]	@ (8008730 <SendCmd+0x44>)
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	88fa      	ldrh	r2, [r7, #6]
 8008702:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 8008706:	4b0a      	ldr	r3, [pc, #40]	@ (8008730 <SendCmd+0x44>)
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	797a      	ldrb	r2, [r7, #5]
 800870c:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 800870e:	4b08      	ldr	r3, [pc, #32]	@ (8008730 <SendCmd+0x44>)
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	330c      	adds	r3, #12
 8008714:	797a      	ldrb	r2, [r7, #5]
 8008716:	6839      	ldr	r1, [r7, #0]
 8008718:	4618      	mov	r0, r3
 800871a:	f002 fd48 	bl	800b1ae <memcpy>

  hciContext.io.Send(0,0);
 800871e:	4b05      	ldr	r3, [pc, #20]	@ (8008734 <SendCmd+0x48>)
 8008720:	691b      	ldr	r3, [r3, #16]
 8008722:	2100      	movs	r1, #0
 8008724:	2000      	movs	r0, #0
 8008726:	4798      	blx	r3

  return;
 8008728:	bf00      	nop
}
 800872a:	3708      	adds	r7, #8
 800872c:	46bd      	mov	sp, r7
 800872e:	bd80      	pop	{r7, pc}
 8008730:	200000b0 	.word	0x200000b0
 8008734:	200002e8 	.word	0x200002e8

08008738 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b082      	sub	sp, #8
 800873c:	af00      	add	r7, sp, #0
 800873e:	4603      	mov	r3, r0
 8008740:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 8008742:	79fb      	ldrb	r3, [r7, #7]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d108      	bne.n	800875a <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 8008748:	4b0a      	ldr	r3, [pc, #40]	@ (8008774 <NotifyCmdStatus+0x3c>)
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d00d      	beq.n	800876c <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8008750:	4b08      	ldr	r3, [pc, #32]	@ (8008774 <NotifyCmdStatus+0x3c>)
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	2000      	movs	r0, #0
 8008756:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 8008758:	e008      	b.n	800876c <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 800875a:	4b06      	ldr	r3, [pc, #24]	@ (8008774 <NotifyCmdStatus+0x3c>)
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d004      	beq.n	800876c <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 8008762:	4b04      	ldr	r3, [pc, #16]	@ (8008774 <NotifyCmdStatus+0x3c>)
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	2001      	movs	r0, #1
 8008768:	4798      	blx	r3
  return;
 800876a:	bf00      	nop
 800876c:	bf00      	nop
}
 800876e:	3708      	adds	r7, #8
 8008770:	46bd      	mov	sp, r7
 8008772:	bd80      	pop	{r7, pc}
 8008774:	20000310 	.word	0x20000310

08008778 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8008778:	b580      	push	{r7, lr}
 800877a:	b082      	sub	sp, #8
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	7a5b      	ldrb	r3, [r3, #9]
 8008784:	2b0f      	cmp	r3, #15
 8008786:	d003      	beq.n	8008790 <TlEvtReceived+0x18>
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	7a5b      	ldrb	r3, [r3, #9]
 800878c:	2b0e      	cmp	r3, #14
 800878e:	d107      	bne.n	80087a0 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8008790:	6879      	ldr	r1, [r7, #4]
 8008792:	4809      	ldr	r0, [pc, #36]	@ (80087b8 <TlEvtReceived+0x40>)
 8008794:	f000 fc32 	bl	8008ffc <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8008798:	2000      	movs	r0, #0
 800879a:	f001 fe2d 	bl	800a3f8 <hci_cmd_resp_release>
 800879e:	e006      	b.n	80087ae <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 80087a0:	6879      	ldr	r1, [r7, #4]
 80087a2:	4806      	ldr	r0, [pc, #24]	@ (80087bc <TlEvtReceived+0x44>)
 80087a4:	f000 fc2a 	bl	8008ffc <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 80087a8:	4804      	ldr	r0, [pc, #16]	@ (80087bc <TlEvtReceived+0x44>)
 80087aa:	f001 fe19 	bl	800a3e0 <hci_notify_asynch_evt>
  }

  return;
 80087ae:	bf00      	nop
}
 80087b0:	3708      	adds	r7, #8
 80087b2:	46bd      	mov	sp, r7
 80087b4:	bd80      	pop	{r7, pc}
 80087b6:	bf00      	nop
 80087b8:	20000308 	.word	0x20000308
 80087bc:	200000a8 	.word	0x200000a8

080087c0 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 80087c0:	b480      	push	{r7}
 80087c2:	b083      	sub	sp, #12
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	4a05      	ldr	r2, [pc, #20]	@ (80087e0 <hci_register_io_bus+0x20>)
 80087cc:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	4a04      	ldr	r2, [pc, #16]	@ (80087e4 <hci_register_io_bus+0x24>)
 80087d2:	611a      	str	r2, [r3, #16]

  return;
 80087d4:	bf00      	nop
}
 80087d6:	370c      	adds	r7, #12
 80087d8:	46bd      	mov	sp, r7
 80087da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087de:	4770      	bx	lr
 80087e0:	08008ad9 	.word	0x08008ad9
 80087e4:	08008b41 	.word	0x08008b41

080087e8 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b082      	sub	sp, #8
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
 80087f0:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	685b      	ldr	r3, [r3, #4]
 80087f6:	4a08      	ldr	r2, [pc, #32]	@ (8008818 <shci_init+0x30>)
 80087f8:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 80087fa:	4a08      	ldr	r2, [pc, #32]	@ (800881c <shci_init+0x34>)
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8008800:	4806      	ldr	r0, [pc, #24]	@ (800881c <shci_init+0x34>)
 8008802:	f000 f915 	bl	8008a30 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	4618      	mov	r0, r3
 800880c:	f000 f898 	bl	8008940 <TlInit>

  return;
 8008810:	bf00      	nop
}
 8008812:	3708      	adds	r7, #8
 8008814:	46bd      	mov	sp, r7
 8008816:	bd80      	pop	{r7, pc}
 8008818:	20000338 	.word	0x20000338
 800881c:	20000318 	.word	0x20000318

08008820 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b084      	sub	sp, #16
 8008824:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8008826:	4822      	ldr	r0, [pc, #136]	@ (80088b0 <shci_user_evt_proc+0x90>)
 8008828:	f000 fba0 	bl	8008f6c <LST_is_empty>
 800882c:	4603      	mov	r3, r0
 800882e:	2b00      	cmp	r3, #0
 8008830:	d12b      	bne.n	800888a <shci_user_evt_proc+0x6a>
 8008832:	4b20      	ldr	r3, [pc, #128]	@ (80088b4 <shci_user_evt_proc+0x94>)
 8008834:	781b      	ldrb	r3, [r3, #0]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d027      	beq.n	800888a <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800883a:	f107 030c 	add.w	r3, r7, #12
 800883e:	4619      	mov	r1, r3
 8008840:	481b      	ldr	r0, [pc, #108]	@ (80088b0 <shci_user_evt_proc+0x90>)
 8008842:	f000 fc22 	bl	800908a <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 8008846:	4b1c      	ldr	r3, [pc, #112]	@ (80088b8 <shci_user_evt_proc+0x98>)
 8008848:	69db      	ldr	r3, [r3, #28]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d00c      	beq.n	8008868 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 8008852:	2301      	movs	r3, #1
 8008854:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 8008856:	4b18      	ldr	r3, [pc, #96]	@ (80088b8 <shci_user_evt_proc+0x98>)
 8008858:	69db      	ldr	r3, [r3, #28]
 800885a:	1d3a      	adds	r2, r7, #4
 800885c:	4610      	mov	r0, r2
 800885e:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8008860:	793a      	ldrb	r2, [r7, #4]
 8008862:	4b14      	ldr	r3, [pc, #80]	@ (80088b4 <shci_user_evt_proc+0x94>)
 8008864:	701a      	strb	r2, [r3, #0]
 8008866:	e002      	b.n	800886e <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8008868:	4b12      	ldr	r3, [pc, #72]	@ (80088b4 <shci_user_evt_proc+0x94>)
 800886a:	2201      	movs	r2, #1
 800886c:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800886e:	4b11      	ldr	r3, [pc, #68]	@ (80088b4 <shci_user_evt_proc+0x94>)
 8008870:	781b      	ldrb	r3, [r3, #0]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d004      	beq.n	8008880 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	4618      	mov	r0, r3
 800887a:	f000 f9ff 	bl	8008c7c <TL_MM_EvtDone>
 800887e:	e004      	b.n	800888a <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	4619      	mov	r1, r3
 8008884:	480a      	ldr	r0, [pc, #40]	@ (80088b0 <shci_user_evt_proc+0x90>)
 8008886:	f000 fb93 	bl	8008fb0 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800888a:	4809      	ldr	r0, [pc, #36]	@ (80088b0 <shci_user_evt_proc+0x90>)
 800888c:	f000 fb6e 	bl	8008f6c <LST_is_empty>
 8008890:	4603      	mov	r3, r0
 8008892:	2b00      	cmp	r3, #0
 8008894:	d107      	bne.n	80088a6 <shci_user_evt_proc+0x86>
 8008896:	4b07      	ldr	r3, [pc, #28]	@ (80088b4 <shci_user_evt_proc+0x94>)
 8008898:	781b      	ldrb	r3, [r3, #0]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d003      	beq.n	80088a6 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800889e:	4804      	ldr	r0, [pc, #16]	@ (80088b0 <shci_user_evt_proc+0x90>)
 80088a0:	f7f8 fbda 	bl	8001058 <shci_notify_asynch_evt>
  }


  return;
 80088a4:	bf00      	nop
 80088a6:	bf00      	nop
}
 80088a8:	3710      	adds	r7, #16
 80088aa:	46bd      	mov	sp, r7
 80088ac:	bd80      	pop	{r7, pc}
 80088ae:	bf00      	nop
 80088b0:	200000b8 	.word	0x200000b8
 80088b4:	200000c8 	.word	0x200000c8
 80088b8:	20000318 	.word	0x20000318

080088bc <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b084      	sub	sp, #16
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	60ba      	str	r2, [r7, #8]
 80088c4:	607b      	str	r3, [r7, #4]
 80088c6:	4603      	mov	r3, r0
 80088c8:	81fb      	strh	r3, [r7, #14]
 80088ca:	460b      	mov	r3, r1
 80088cc:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 80088ce:	2000      	movs	r0, #0
 80088d0:	f000 f868 	bl	80089a4 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 80088d4:	4b17      	ldr	r3, [pc, #92]	@ (8008934 <shci_send+0x78>)
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	89fa      	ldrh	r2, [r7, #14]
 80088da:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 80088de:	4b15      	ldr	r3, [pc, #84]	@ (8008934 <shci_send+0x78>)
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	7b7a      	ldrb	r2, [r7, #13]
 80088e4:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 80088e6:	4b13      	ldr	r3, [pc, #76]	@ (8008934 <shci_send+0x78>)
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	330c      	adds	r3, #12
 80088ec:	7b7a      	ldrb	r2, [r7, #13]
 80088ee:	68b9      	ldr	r1, [r7, #8]
 80088f0:	4618      	mov	r0, r3
 80088f2:	f002 fc5c 	bl	800b1ae <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 80088f6:	4b10      	ldr	r3, [pc, #64]	@ (8008938 <shci_send+0x7c>)
 80088f8:	2201      	movs	r2, #1
 80088fa:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 80088fc:	4b0f      	ldr	r3, [pc, #60]	@ (800893c <shci_send+0x80>)
 80088fe:	691b      	ldr	r3, [r3, #16]
 8008900:	2100      	movs	r1, #0
 8008902:	2000      	movs	r0, #0
 8008904:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8008906:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 800890a:	f7f8 fbbc 	bl	8001086 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	f103 0008 	add.w	r0, r3, #8
 8008914:	4b07      	ldr	r3, [pc, #28]	@ (8008934 <shci_send+0x78>)
 8008916:	6819      	ldr	r1, [r3, #0]
 8008918:	4b06      	ldr	r3, [pc, #24]	@ (8008934 <shci_send+0x78>)
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	789b      	ldrb	r3, [r3, #2]
 800891e:	3303      	adds	r3, #3
 8008920:	461a      	mov	r2, r3
 8008922:	f002 fc44 	bl	800b1ae <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8008926:	2001      	movs	r0, #1
 8008928:	f000 f83c 	bl	80089a4 <Cmd_SetStatus>

  return;
 800892c:	bf00      	nop
}
 800892e:	3710      	adds	r7, #16
 8008930:	46bd      	mov	sp, r7
 8008932:	bd80      	pop	{r7, pc}
 8008934:	200000c4 	.word	0x200000c4
 8008938:	2000033c 	.word	0x2000033c
 800893c:	20000318 	.word	0x20000318

08008940 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8008940:	b580      	push	{r7, lr}
 8008942:	b086      	sub	sp, #24
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8008948:	4a10      	ldr	r2, [pc, #64]	@ (800898c <TlInit+0x4c>)
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800894e:	4810      	ldr	r0, [pc, #64]	@ (8008990 <TlInit+0x50>)
 8008950:	f000 fafc 	bl	8008f4c <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8008954:	2001      	movs	r0, #1
 8008956:	f000 f825 	bl	80089a4 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800895a:	4b0e      	ldr	r3, [pc, #56]	@ (8008994 <TlInit+0x54>)
 800895c:	2201      	movs	r2, #1
 800895e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8008960:	4b0d      	ldr	r3, [pc, #52]	@ (8008998 <TlInit+0x58>)
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d00c      	beq.n	8008982 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800896c:	4b0b      	ldr	r3, [pc, #44]	@ (800899c <TlInit+0x5c>)
 800896e:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8008970:	4b0b      	ldr	r3, [pc, #44]	@ (80089a0 <TlInit+0x60>)
 8008972:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8008974:	4b08      	ldr	r3, [pc, #32]	@ (8008998 <TlInit+0x58>)
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f107 020c 	add.w	r2, r7, #12
 800897c:	4610      	mov	r0, r2
 800897e:	4798      	blx	r3
  }

  return;
 8008980:	bf00      	nop
 8008982:	bf00      	nop
}
 8008984:	3718      	adds	r7, #24
 8008986:	46bd      	mov	sp, r7
 8008988:	bd80      	pop	{r7, pc}
 800898a:	bf00      	nop
 800898c:	200000c4 	.word	0x200000c4
 8008990:	200000b8 	.word	0x200000b8
 8008994:	200000c8 	.word	0x200000c8
 8008998:	20000318 	.word	0x20000318
 800899c:	080089f5 	.word	0x080089f5
 80089a0:	08008a0d 	.word	0x08008a0d

080089a4 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b082      	sub	sp, #8
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	4603      	mov	r3, r0
 80089ac:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 80089ae:	79fb      	ldrb	r3, [r7, #7]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d10b      	bne.n	80089cc <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 80089b4:	4b0d      	ldr	r3, [pc, #52]	@ (80089ec <Cmd_SetStatus+0x48>)
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d003      	beq.n	80089c4 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 80089bc:	4b0b      	ldr	r3, [pc, #44]	@ (80089ec <Cmd_SetStatus+0x48>)
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	2000      	movs	r0, #0
 80089c2:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 80089c4:	4b0a      	ldr	r3, [pc, #40]	@ (80089f0 <Cmd_SetStatus+0x4c>)
 80089c6:	2200      	movs	r2, #0
 80089c8:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 80089ca:	e00b      	b.n	80089e4 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 80089cc:	4b08      	ldr	r3, [pc, #32]	@ (80089f0 <Cmd_SetStatus+0x4c>)
 80089ce:	2201      	movs	r2, #1
 80089d0:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 80089d2:	4b06      	ldr	r3, [pc, #24]	@ (80089ec <Cmd_SetStatus+0x48>)
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d004      	beq.n	80089e4 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 80089da:	4b04      	ldr	r3, [pc, #16]	@ (80089ec <Cmd_SetStatus+0x48>)
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	2001      	movs	r0, #1
 80089e0:	4798      	blx	r3
  return;
 80089e2:	bf00      	nop
 80089e4:	bf00      	nop
}
 80089e6:	3708      	adds	r7, #8
 80089e8:	46bd      	mov	sp, r7
 80089ea:	bd80      	pop	{r7, pc}
 80089ec:	20000338 	.word	0x20000338
 80089f0:	200000c0 	.word	0x200000c0

080089f4 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b082      	sub	sp, #8
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 80089fc:	2000      	movs	r0, #0
 80089fe:	f7f8 fb37 	bl	8001070 <shci_cmd_resp_release>

  return;
 8008a02:	bf00      	nop
}
 8008a04:	3708      	adds	r7, #8
 8008a06:	46bd      	mov	sp, r7
 8008a08:	bd80      	pop	{r7, pc}
	...

08008a0c <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b082      	sub	sp, #8
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8008a14:	6879      	ldr	r1, [r7, #4]
 8008a16:	4805      	ldr	r0, [pc, #20]	@ (8008a2c <TlUserEvtReceived+0x20>)
 8008a18:	f000 faf0 	bl	8008ffc <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8008a1c:	4803      	ldr	r0, [pc, #12]	@ (8008a2c <TlUserEvtReceived+0x20>)
 8008a1e:	f7f8 fb1b 	bl	8001058 <shci_notify_asynch_evt>

  return;
 8008a22:	bf00      	nop
}
 8008a24:	3708      	adds	r7, #8
 8008a26:	46bd      	mov	sp, r7
 8008a28:	bd80      	pop	{r7, pc}
 8008a2a:	bf00      	nop
 8008a2c:	200000b8 	.word	0x200000b8

08008a30 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 8008a30:	b480      	push	{r7}
 8008a32:	b083      	sub	sp, #12
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	4a05      	ldr	r2, [pc, #20]	@ (8008a50 <shci_register_io_bus+0x20>)
 8008a3c:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	4a04      	ldr	r2, [pc, #16]	@ (8008a54 <shci_register_io_bus+0x24>)
 8008a42:	611a      	str	r2, [r3, #16]

  return;
 8008a44:	bf00      	nop
}
 8008a46:	370c      	adds	r7, #12
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4e:	4770      	bx	lr
 8008a50:	08008b79 	.word	0x08008b79
 8008a54:	08008bcd 	.word	0x08008bcd

08008a58 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 8008a5c:	f001 fe24 	bl	800a6a8 <HW_IPCC_Enable>

  return;
 8008a60:	bf00      	nop
}
 8008a62:	bd80      	pop	{r7, pc}

08008a64 <TL_Init>:


void TL_Init( void )
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8008a68:	4b10      	ldr	r3, [pc, #64]	@ (8008aac <TL_Init+0x48>)
 8008a6a:	4a11      	ldr	r2, [pc, #68]	@ (8008ab0 <TL_Init+0x4c>)
 8008a6c:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 8008a6e:	4b0f      	ldr	r3, [pc, #60]	@ (8008aac <TL_Init+0x48>)
 8008a70:	4a10      	ldr	r2, [pc, #64]	@ (8008ab4 <TL_Init+0x50>)
 8008a72:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8008a74:	4b0d      	ldr	r3, [pc, #52]	@ (8008aac <TL_Init+0x48>)
 8008a76:	4a10      	ldr	r2, [pc, #64]	@ (8008ab8 <TL_Init+0x54>)
 8008a78:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 8008a7a:	4b0c      	ldr	r3, [pc, #48]	@ (8008aac <TL_Init+0x48>)
 8008a7c:	4a0f      	ldr	r2, [pc, #60]	@ (8008abc <TL_Init+0x58>)
 8008a7e:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 8008a80:	4b0a      	ldr	r3, [pc, #40]	@ (8008aac <TL_Init+0x48>)
 8008a82:	4a0f      	ldr	r2, [pc, #60]	@ (8008ac0 <TL_Init+0x5c>)
 8008a84:	625a      	str	r2, [r3, #36]	@ 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 8008a86:	4b09      	ldr	r3, [pc, #36]	@ (8008aac <TL_Init+0x48>)
 8008a88:	4a0e      	ldr	r2, [pc, #56]	@ (8008ac4 <TL_Init+0x60>)
 8008a8a:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8008a8c:	4b07      	ldr	r3, [pc, #28]	@ (8008aac <TL_Init+0x48>)
 8008a8e:	4a0e      	ldr	r2, [pc, #56]	@ (8008ac8 <TL_Init+0x64>)
 8008a90:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 8008a92:	4b06      	ldr	r3, [pc, #24]	@ (8008aac <TL_Init+0x48>)
 8008a94:	4a0d      	ldr	r2, [pc, #52]	@ (8008acc <TL_Init+0x68>)
 8008a96:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8008a98:	4b04      	ldr	r3, [pc, #16]	@ (8008aac <TL_Init+0x48>)
 8008a9a:	4a0d      	ldr	r2, [pc, #52]	@ (8008ad0 <TL_Init+0x6c>)
 8008a9c:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 8008a9e:	4b03      	ldr	r3, [pc, #12]	@ (8008aac <TL_Init+0x48>)
 8008aa0:	4a0c      	ldr	r2, [pc, #48]	@ (8008ad4 <TL_Init+0x70>)
 8008aa2:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8008aa4:	f001 fe14 	bl	800a6d0 <HW_IPCC_Init>

  return;
 8008aa8:	bf00      	nop
}
 8008aaa:	bd80      	pop	{r7, pc}
 8008aac:	20030000 	.word	0x20030000
 8008ab0:	20030028 	.word	0x20030028
 8008ab4:	20030048 	.word	0x20030048
 8008ab8:	20030058 	.word	0x20030058
 8008abc:	20030068 	.word	0x20030068
 8008ac0:	20030070 	.word	0x20030070
 8008ac4:	20030078 	.word	0x20030078
 8008ac8:	20030080 	.word	0x20030080
 8008acc:	2003009c 	.word	0x2003009c
 8008ad0:	200300a0 	.word	0x200300a0
 8008ad4:	200300ac 	.word	0x200300ac

08008ad8 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b084      	sub	sp, #16
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 8008ae4:	4811      	ldr	r0, [pc, #68]	@ (8008b2c <TL_BLE_Init+0x54>)
 8008ae6:	f000 fa31 	bl	8008f4c <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 8008aea:	4b11      	ldr	r3, [pc, #68]	@ (8008b30 <TL_BLE_Init+0x58>)
 8008aec:	685b      	ldr	r3, [r3, #4]
 8008aee:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	689a      	ldr	r2, [r3, #8]
 8008af4:	68bb      	ldr	r3, [r7, #8]
 8008af6:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	68da      	ldr	r2, [r3, #12]
 8008afc:	68bb      	ldr	r3, [r7, #8]
 8008afe:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 8008b00:	68bb      	ldr	r3, [r7, #8]
 8008b02:	4a0c      	ldr	r2, [pc, #48]	@ (8008b34 <TL_BLE_Init+0x5c>)
 8008b04:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 8008b06:	68bb      	ldr	r3, [r7, #8]
 8008b08:	4a08      	ldr	r2, [pc, #32]	@ (8008b2c <TL_BLE_Init+0x54>)
 8008b0a:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 8008b0c:	f001 fdf6 	bl	800a6fc <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	4a08      	ldr	r2, [pc, #32]	@ (8008b38 <TL_BLE_Init+0x60>)
 8008b16:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	685b      	ldr	r3, [r3, #4]
 8008b1c:	4a07      	ldr	r2, [pc, #28]	@ (8008b3c <TL_BLE_Init+0x64>)
 8008b1e:	6013      	str	r3, [r2, #0]

  return 0;
 8008b20:	2300      	movs	r3, #0
}
 8008b22:	4618      	mov	r0, r3
 8008b24:	3710      	adds	r7, #16
 8008b26:	46bd      	mov	sp, r7
 8008b28:	bd80      	pop	{r7, pc}
 8008b2a:	bf00      	nop
 8008b2c:	200300c8 	.word	0x200300c8
 8008b30:	20030000 	.word	0x20030000
 8008b34:	20030a58 	.word	0x20030a58
 8008b38:	20000348 	.word	0x20000348
 8008b3c:	2000034c 	.word	0x2000034c

08008b40 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b082      	sub	sp, #8
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
 8008b48:	460b      	mov	r3, r1
 8008b4a:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 8008b4c:	4b09      	ldr	r3, [pc, #36]	@ (8008b74 <TL_BLE_SendCmd+0x34>)
 8008b4e:	685b      	ldr	r3, [r3, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	2201      	movs	r2, #1
 8008b54:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 8008b56:	4b07      	ldr	r3, [pc, #28]	@ (8008b74 <TL_BLE_SendCmd+0x34>)
 8008b58:	685b      	ldr	r3, [r3, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	4619      	mov	r1, r3
 8008b5e:	2001      	movs	r0, #1
 8008b60:	f000 f8d6 	bl	8008d10 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 8008b64:	f001 fdd4 	bl	800a710 <HW_IPCC_BLE_SendCmd>

  return 0;
 8008b68:	2300      	movs	r3, #0
}
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	3708      	adds	r7, #8
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	bd80      	pop	{r7, pc}
 8008b72:	bf00      	nop
 8008b74:	20030000 	.word	0x20030000

08008b78 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b084      	sub	sp, #16
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8008b84:	480d      	ldr	r0, [pc, #52]	@ (8008bbc <TL_SYS_Init+0x44>)
 8008b86:	f000 f9e1 	bl	8008f4c <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 8008b8a:	4b0d      	ldr	r3, [pc, #52]	@ (8008bc0 <TL_SYS_Init+0x48>)
 8008b8c:	68db      	ldr	r3, [r3, #12]
 8008b8e:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	689a      	ldr	r2, [r3, #8]
 8008b94:	68bb      	ldr	r3, [r7, #8]
 8008b96:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8008b98:	68bb      	ldr	r3, [r7, #8]
 8008b9a:	4a08      	ldr	r2, [pc, #32]	@ (8008bbc <TL_SYS_Init+0x44>)
 8008b9c:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 8008b9e:	f001 fdc1 	bl	800a724 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	4a07      	ldr	r2, [pc, #28]	@ (8008bc4 <TL_SYS_Init+0x4c>)
 8008ba8:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	685b      	ldr	r3, [r3, #4]
 8008bae:	4a06      	ldr	r2, [pc, #24]	@ (8008bc8 <TL_SYS_Init+0x50>)
 8008bb0:	6013      	str	r3, [r2, #0]

  return 0;
 8008bb2:	2300      	movs	r3, #0
}
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	3710      	adds	r7, #16
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	bd80      	pop	{r7, pc}
 8008bbc:	200300d0 	.word	0x200300d0
 8008bc0:	20030000 	.word	0x20030000
 8008bc4:	20000350 	.word	0x20000350
 8008bc8:	20000354 	.word	0x20000354

08008bcc <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b082      	sub	sp, #8
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
 8008bd4:	460b      	mov	r3, r1
 8008bd6:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8008bd8:	4b09      	ldr	r3, [pc, #36]	@ (8008c00 <TL_SYS_SendCmd+0x34>)
 8008bda:	68db      	ldr	r3, [r3, #12]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	2210      	movs	r2, #16
 8008be0:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 8008be2:	4b07      	ldr	r3, [pc, #28]	@ (8008c00 <TL_SYS_SendCmd+0x34>)
 8008be4:	68db      	ldr	r3, [r3, #12]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	4619      	mov	r1, r3
 8008bea:	2004      	movs	r0, #4
 8008bec:	f000 f890 	bl	8008d10 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 8008bf0:	f001 fda2 	bl	800a738 <HW_IPCC_SYS_SendCmd>

  return 0;
 8008bf4:	2300      	movs	r3, #0
}
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	3708      	adds	r7, #8
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	bd80      	pop	{r7, pc}
 8008bfe:	bf00      	nop
 8008c00:	20030000 	.word	0x20030000

08008c04 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b082      	sub	sp, #8
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8008c0c:	4817      	ldr	r0, [pc, #92]	@ (8008c6c <TL_MM_Init+0x68>)
 8008c0e:	f000 f99d 	bl	8008f4c <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8008c12:	4817      	ldr	r0, [pc, #92]	@ (8008c70 <TL_MM_Init+0x6c>)
 8008c14:	f000 f99a 	bl	8008f4c <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8008c18:	4b16      	ldr	r3, [pc, #88]	@ (8008c74 <TL_MM_Init+0x70>)
 8008c1a:	691b      	ldr	r3, [r3, #16]
 8008c1c:	4a16      	ldr	r2, [pc, #88]	@ (8008c78 <TL_MM_Init+0x74>)
 8008c1e:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8008c20:	4b15      	ldr	r3, [pc, #84]	@ (8008c78 <TL_MM_Init+0x74>)
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	687a      	ldr	r2, [r7, #4]
 8008c26:	6892      	ldr	r2, [r2, #8]
 8008c28:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 8008c2a:	4b13      	ldr	r3, [pc, #76]	@ (8008c78 <TL_MM_Init+0x74>)
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	687a      	ldr	r2, [r7, #4]
 8008c30:	68d2      	ldr	r2, [r2, #12]
 8008c32:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8008c34:	4b10      	ldr	r3, [pc, #64]	@ (8008c78 <TL_MM_Init+0x74>)
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	4a0c      	ldr	r2, [pc, #48]	@ (8008c6c <TL_MM_Init+0x68>)
 8008c3a:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8008c3c:	4b0e      	ldr	r3, [pc, #56]	@ (8008c78 <TL_MM_Init+0x74>)
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	687a      	ldr	r2, [r7, #4]
 8008c42:	6812      	ldr	r2, [r2, #0]
 8008c44:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 8008c46:	4b0c      	ldr	r3, [pc, #48]	@ (8008c78 <TL_MM_Init+0x74>)
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	687a      	ldr	r2, [r7, #4]
 8008c4c:	6852      	ldr	r2, [r2, #4]
 8008c4e:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8008c50:	4b09      	ldr	r3, [pc, #36]	@ (8008c78 <TL_MM_Init+0x74>)
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	687a      	ldr	r2, [r7, #4]
 8008c56:	6912      	ldr	r2, [r2, #16]
 8008c58:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 8008c5a:	4b07      	ldr	r3, [pc, #28]	@ (8008c78 <TL_MM_Init+0x74>)
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	687a      	ldr	r2, [r7, #4]
 8008c60:	6952      	ldr	r2, [r2, #20]
 8008c62:	619a      	str	r2, [r3, #24]

  return;
 8008c64:	bf00      	nop
}
 8008c66:	3708      	adds	r7, #8
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	bd80      	pop	{r7, pc}
 8008c6c:	200300b8 	.word	0x200300b8
 8008c70:	20000340 	.word	0x20000340
 8008c74:	20030000 	.word	0x20030000
 8008c78:	20000358 	.word	0x20000358

08008c7c <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b082      	sub	sp, #8
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8008c84:	6879      	ldr	r1, [r7, #4]
 8008c86:	4807      	ldr	r0, [pc, #28]	@ (8008ca4 <TL_MM_EvtDone+0x28>)
 8008c88:	f000 f9b8 	bl	8008ffc <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 8008c8c:	6879      	ldr	r1, [r7, #4]
 8008c8e:	2000      	movs	r0, #0
 8008c90:	f000 f83e 	bl	8008d10 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8008c94:	4804      	ldr	r0, [pc, #16]	@ (8008ca8 <TL_MM_EvtDone+0x2c>)
 8008c96:	f001 fd5d 	bl	800a754 <HW_IPCC_MM_SendFreeBuf>

  return;
 8008c9a:	bf00      	nop
}
 8008c9c:	3708      	adds	r7, #8
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	bd80      	pop	{r7, pc}
 8008ca2:	bf00      	nop
 8008ca4:	20000340 	.word	0x20000340
 8008ca8:	08008cad 	.word	0x08008cad

08008cac <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b082      	sub	sp, #8
 8008cb0:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8008cb2:	e00c      	b.n	8008cce <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8008cb4:	1d3b      	adds	r3, r7, #4
 8008cb6:	4619      	mov	r1, r3
 8008cb8:	480a      	ldr	r0, [pc, #40]	@ (8008ce4 <SendFreeBuf+0x38>)
 8008cba:	f000 f9e6 	bl	800908a <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8008cbe:	4b0a      	ldr	r3, [pc, #40]	@ (8008ce8 <SendFreeBuf+0x3c>)
 8008cc0:	691b      	ldr	r3, [r3, #16]
 8008cc2:	691b      	ldr	r3, [r3, #16]
 8008cc4:	687a      	ldr	r2, [r7, #4]
 8008cc6:	4611      	mov	r1, r2
 8008cc8:	4618      	mov	r0, r3
 8008cca:	f000 f997 	bl	8008ffc <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8008cce:	4805      	ldr	r0, [pc, #20]	@ (8008ce4 <SendFreeBuf+0x38>)
 8008cd0:	f000 f94c 	bl	8008f6c <LST_is_empty>
 8008cd4:	4603      	mov	r3, r0
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d0ec      	beq.n	8008cb4 <SendFreeBuf+0x8>
  }

  return;
 8008cda:	bf00      	nop
}
 8008cdc:	3708      	adds	r7, #8
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	bd80      	pop	{r7, pc}
 8008ce2:	bf00      	nop
 8008ce4:	20000340 	.word	0x20000340
 8008ce8:	20030000 	.word	0x20030000

08008cec <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8008cf0:	4805      	ldr	r0, [pc, #20]	@ (8008d08 <TL_TRACES_Init+0x1c>)
 8008cf2:	f000 f92b 	bl	8008f4c <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 8008cf6:	4b05      	ldr	r3, [pc, #20]	@ (8008d0c <TL_TRACES_Init+0x20>)
 8008cf8:	695b      	ldr	r3, [r3, #20]
 8008cfa:	4a03      	ldr	r2, [pc, #12]	@ (8008d08 <TL_TRACES_Init+0x1c>)
 8008cfc:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 8008cfe:	f001 fd4b 	bl	800a798 <HW_IPCC_TRACES_Init>

  return;
 8008d02:	bf00      	nop
}
 8008d04:	bd80      	pop	{r7, pc}
 8008d06:	bf00      	nop
 8008d08:	200300c0 	.word	0x200300c0
 8008d0c:	20030000 	.word	0x20030000

08008d10 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 8008d10:	b480      	push	{r7}
 8008d12:	b085      	sub	sp, #20
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	4603      	mov	r3, r0
 8008d18:	6039      	str	r1, [r7, #0]
 8008d1a:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 8008d1c:	79fb      	ldrb	r3, [r7, #7]
 8008d1e:	2b06      	cmp	r3, #6
 8008d20:	d845      	bhi.n	8008dae <OutputDbgTrace+0x9e>
 8008d22:	a201      	add	r2, pc, #4	@ (adr r2, 8008d28 <OutputDbgTrace+0x18>)
 8008d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d28:	08008d45 	.word	0x08008d45
 8008d2c:	08008d69 	.word	0x08008d69
 8008d30:	08008d6f 	.word	0x08008d6f
 8008d34:	08008d83 	.word	0x08008d83
 8008d38:	08008d8f 	.word	0x08008d8f
 8008d3c:	08008d95 	.word	0x08008d95
 8008d40:	08008da3 	.word	0x08008da3
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	7a5b      	ldrb	r3, [r3, #9]
 8008d4c:	2bff      	cmp	r3, #255	@ 0xff
 8008d4e:	d005      	beq.n	8008d5c <OutputDbgTrace+0x4c>
 8008d50:	2bff      	cmp	r3, #255	@ 0xff
 8008d52:	dc05      	bgt.n	8008d60 <OutputDbgTrace+0x50>
 8008d54:	2b0e      	cmp	r3, #14
 8008d56:	d005      	beq.n	8008d64 <OutputDbgTrace+0x54>
 8008d58:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 8008d5a:	e001      	b.n	8008d60 <OutputDbgTrace+0x50>
          break;
 8008d5c:	bf00      	nop
 8008d5e:	e027      	b.n	8008db0 <OutputDbgTrace+0xa0>
          break;
 8008d60:	bf00      	nop
 8008d62:	e025      	b.n	8008db0 <OutputDbgTrace+0xa0>
          break;
 8008d64:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 8008d66:	e023      	b.n	8008db0 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8008d6c:	e020      	b.n	8008db0 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	7a5b      	ldrb	r3, [r3, #9]
 8008d76:	2b0e      	cmp	r3, #14
 8008d78:	d001      	beq.n	8008d7e <OutputDbgTrace+0x6e>
 8008d7a:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8008d7c:	e000      	b.n	8008d80 <OutputDbgTrace+0x70>
          break;
 8008d7e:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8008d80:	e016      	b.n	8008db0 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	7a5b      	ldrb	r3, [r3, #9]
 8008d8a:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8008d8c:	e010      	b.n	8008db0 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8008d92:	e00d      	b.n	8008db0 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8008d94:	683b      	ldr	r3, [r7, #0]
 8008d96:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	7a5b      	ldrb	r3, [r3, #9]
 8008d9c:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8008d9e:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8008da0:	e006      	b.n	8008db0 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8008da2:	683b      	ldr	r3, [r7, #0]
 8008da4:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	7a5b      	ldrb	r3, [r3, #9]
 8008daa:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8008dac:	e000      	b.n	8008db0 <OutputDbgTrace+0xa0>

    default:
      break;
 8008dae:	bf00      	nop
  }

  return;
 8008db0:	bf00      	nop
}
 8008db2:	3714      	adds	r7, #20
 8008db4:	46bd      	mov	sp, r7
 8008db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dba:	4770      	bx	lr

08008dbc <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b086      	sub	sp, #24
 8008dc0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008dc2:	f3ef 8310 	mrs	r3, PRIMASK
 8008dc6:	60fb      	str	r3, [r7, #12]
  return(result);
 8008dc8:	68fb      	ldr	r3, [r7, #12]
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  uint8_t* buf;
  uint16_t bufSize;

  BACKUP_PRIMASK();
 8008dca:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008dcc:	b672      	cpsid	i
}
 8008dce:	bf00      	nop

  DISABLE_IRQ();			/**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  CircularQueue_Remove(&MsgDbgTraceQueue,&bufSize);
 8008dd0:	1cbb      	adds	r3, r7, #2
 8008dd2:	4619      	mov	r1, r3
 8008dd4:	4812      	ldr	r0, [pc, #72]	@ (8008e20 <DbgTrace_TxCpltCallback+0x64>)
 8008dd6:	f000 fb9d 	bl	8009514 <CircularQueue_Remove>

  /* Sense if new data to be sent */
  buf=CircularQueue_Sense(&MsgDbgTraceQueue,&bufSize);
 8008dda:	1cbb      	adds	r3, r7, #2
 8008ddc:	4619      	mov	r1, r3
 8008dde:	4810      	ldr	r0, [pc, #64]	@ (8008e20 <DbgTrace_TxCpltCallback+0x64>)
 8008de0:	f000 fc87 	bl	80096f2 <CircularQueue_Sense>
 8008de4:	6138      	str	r0, [r7, #16]


  if ( buf != NULL) 
 8008de6:	693b      	ldr	r3, [r7, #16]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d00c      	beq.n	8008e06 <DbgTrace_TxCpltCallback+0x4a>
 8008dec:	697b      	ldr	r3, [r7, #20]
 8008dee:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008df0:	68bb      	ldr	r3, [r7, #8]
 8008df2:	f383 8810 	msr	PRIMASK, r3
}
 8008df6:	bf00      	nop
  {
    RESTORE_PRIMASK();
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 8008df8:	887b      	ldrh	r3, [r7, #2]
 8008dfa:	4a0a      	ldr	r2, [pc, #40]	@ (8008e24 <DbgTrace_TxCpltCallback+0x68>)
 8008dfc:	4619      	mov	r1, r3
 8008dfe:	6938      	ldr	r0, [r7, #16]
 8008e00:	f7f7 fe90 	bl	8000b24 <DbgOutputTraces>

  DbgTracePeripheralReady = SET;

  RESTORE_PRIMASK();
#endif
}
 8008e04:	e008      	b.n	8008e18 <DbgTrace_TxCpltCallback+0x5c>
    DbgTracePeripheralReady = SET;
 8008e06:	4b08      	ldr	r3, [pc, #32]	@ (8008e28 <DbgTrace_TxCpltCallback+0x6c>)
 8008e08:	2201      	movs	r2, #1
 8008e0a:	701a      	strb	r2, [r3, #0]
 8008e0c:	697b      	ldr	r3, [r7, #20]
 8008e0e:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	f383 8810 	msr	PRIMASK, r3
}
 8008e16:	bf00      	nop
}
 8008e18:	bf00      	nop
 8008e1a:	3718      	adds	r7, #24
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	bd80      	pop	{r7, pc}
 8008e20:	2000035c 	.word	0x2000035c
 8008e24:	08008dbd 	.word	0x08008dbd
 8008e28:	20000011 	.word	0x20000011

08008e2c <_write>:
 * @param	bufsize buffer size
 * @param	...: arguments to be formatted in format string
 * @retval none
 */
size_t _write(int handle, const unsigned char * buf, size_t bufSize)
{
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	b084      	sub	sp, #16
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	60f8      	str	r0, [r7, #12]
 8008e34:	60b9      	str	r1, [r7, #8]
 8008e36:	607a      	str	r2, [r7, #4]
  return ( DbgTraceWrite(handle, buf, bufSize) );
 8008e38:	687a      	ldr	r2, [r7, #4]
 8008e3a:	68b9      	ldr	r1, [r7, #8]
 8008e3c:	68f8      	ldr	r0, [r7, #12]
 8008e3e:	f000 f805 	bl	8008e4c <DbgTraceWrite>
 8008e42:	4603      	mov	r3, r0
}
 8008e44:	4618      	mov	r0, r3
 8008e46:	3710      	adds	r7, #16
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	bd80      	pop	{r7, pc}

08008e4c <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b08a      	sub	sp, #40	@ 0x28
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	60f8      	str	r0, [r7, #12]
 8008e54:	60b9      	str	r1, [r7, #8]
 8008e56:	607a      	str	r2, [r7, #4]
  size_t chars_written = 0;
 8008e58:	2300      	movs	r3, #0
 8008e5a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e5c:	f3ef 8310 	mrs	r3, PRIMASK
 8008e60:	61bb      	str	r3, [r7, #24]
  return(result);
 8008e62:	69bb      	ldr	r3, [r7, #24]
  uint8_t* buffer;

  BACKUP_PRIMASK();
 8008e64:	623b      	str	r3, [r7, #32]

  /* Ignore flushes */
  if ( handle == -1 )
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e6c:	d102      	bne.n	8008e74 <DbgTraceWrite+0x28>
  {
    chars_written = ( size_t ) 0;
 8008e6e:	2300      	movs	r3, #0
 8008e70:	627b      	str	r3, [r7, #36]	@ 0x24
 8008e72:	e037      	b.n	8008ee4 <DbgTraceWrite+0x98>
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	2b01      	cmp	r3, #1
 8008e78:	d006      	beq.n	8008e88 <DbgTraceWrite+0x3c>
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	2b02      	cmp	r3, #2
 8008e7e:	d003      	beq.n	8008e88 <DbgTraceWrite+0x3c>
  {
    chars_written = ( size_t ) - 1;
 8008e80:	f04f 33ff 	mov.w	r3, #4294967295
 8008e84:	627b      	str	r3, [r7, #36]	@ 0x24
 8008e86:	e02d      	b.n	8008ee4 <DbgTraceWrite+0x98>
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d02a      	beq.n	8008ee4 <DbgTraceWrite+0x98>
  {
    chars_written = bufSize;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8008e92:	b672      	cpsid	i
}
 8008e94:	bf00      	nop
    /* If queue emepty and TX free, send directly */
    /* CS Start */

#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
    DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
    buffer=CircularQueue_Add(&MsgDbgTraceQueue,(uint8_t*)buf, bufSize,1);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	b29a      	uxth	r2, r3
 8008e9a:	2301      	movs	r3, #1
 8008e9c:	68b9      	ldr	r1, [r7, #8]
 8008e9e:	4814      	ldr	r0, [pc, #80]	@ (8008ef0 <DbgTraceWrite+0xa4>)
 8008ea0:	f000 f912 	bl	80090c8 <CircularQueue_Add>
 8008ea4:	61f8      	str	r0, [r7, #28]
    if (buffer && DbgTracePeripheralReady)
 8008ea6:	69fb      	ldr	r3, [r7, #28]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d015      	beq.n	8008ed8 <DbgTraceWrite+0x8c>
 8008eac:	4b11      	ldr	r3, [pc, #68]	@ (8008ef4 <DbgTraceWrite+0xa8>)
 8008eae:	781b      	ldrb	r3, [r3, #0]
 8008eb0:	b2db      	uxtb	r3, r3
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d010      	beq.n	8008ed8 <DbgTraceWrite+0x8c>
    {
      DbgTracePeripheralReady = RESET;
 8008eb6:	4b0f      	ldr	r3, [pc, #60]	@ (8008ef4 <DbgTraceWrite+0xa8>)
 8008eb8:	2200      	movs	r2, #0
 8008eba:	701a      	strb	r2, [r3, #0]
 8008ebc:	6a3b      	ldr	r3, [r7, #32]
 8008ebe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ec0:	697b      	ldr	r3, [r7, #20]
 8008ec2:	f383 8810 	msr	PRIMASK, r3
}
 8008ec6:	bf00      	nop
      RESTORE_PRIMASK();
      DbgOutputTraces((uint8_t*)buffer, bufSize, DbgTrace_TxCpltCallback);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	b29b      	uxth	r3, r3
 8008ecc:	4a0a      	ldr	r2, [pc, #40]	@ (8008ef8 <DbgTraceWrite+0xac>)
 8008ece:	4619      	mov	r1, r3
 8008ed0:	69f8      	ldr	r0, [r7, #28]
 8008ed2:	f7f7 fe27 	bl	8000b24 <DbgOutputTraces>
 8008ed6:	e005      	b.n	8008ee4 <DbgTraceWrite+0x98>
 8008ed8:	6a3b      	ldr	r3, [r7, #32]
 8008eda:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008edc:	693b      	ldr	r3, [r7, #16]
 8008ede:	f383 8810 	msr	PRIMASK, r3
}
 8008ee2:	bf00      	nop
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
    while (!DbgTracePeripheralReady);
#endif
    /* CS END */
  }
  return ( chars_written );
 8008ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	3728      	adds	r7, #40	@ 0x28
 8008eea:	46bd      	mov	sp, r7
 8008eec:	bd80      	pop	{r7, pc}
 8008eee:	bf00      	nop
 8008ef0:	2000035c 	.word	0x2000035c
 8008ef4:	20000011 	.word	0x20000011
 8008ef8:	08008dbd 	.word	0x08008dbd

08008efc <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8008efc:	b480      	push	{r7}
 8008efe:	b085      	sub	sp, #20
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	4603      	mov	r3, r0
 8008f04:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 8008f06:	4b0f      	ldr	r3, [pc, #60]	@ (8008f44 <OTP_Read+0x48>)
 8008f08:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8008f0a:	e002      	b.n	8008f12 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	3b08      	subs	r3, #8
 8008f10:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	3307      	adds	r3, #7
 8008f16:	781b      	ldrb	r3, [r3, #0]
 8008f18:	79fa      	ldrb	r2, [r7, #7]
 8008f1a:	429a      	cmp	r2, r3
 8008f1c:	d003      	beq.n	8008f26 <OTP_Read+0x2a>
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	4a09      	ldr	r2, [pc, #36]	@ (8008f48 <OTP_Read+0x4c>)
 8008f22:	4293      	cmp	r3, r2
 8008f24:	d1f2      	bne.n	8008f0c <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	3307      	adds	r3, #7
 8008f2a:	781b      	ldrb	r3, [r3, #0]
 8008f2c:	79fa      	ldrb	r2, [r7, #7]
 8008f2e:	429a      	cmp	r2, r3
 8008f30:	d001      	beq.n	8008f36 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 8008f32:	2300      	movs	r3, #0
 8008f34:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 8008f36:	68fb      	ldr	r3, [r7, #12]
}
 8008f38:	4618      	mov	r0, r3
 8008f3a:	3714      	adds	r7, #20
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f42:	4770      	bx	lr
 8008f44:	1fff73f8 	.word	0x1fff73f8
 8008f48:	1fff7000 	.word	0x1fff7000

08008f4c <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8008f4c:	b480      	push	{r7}
 8008f4e:	b083      	sub	sp, #12
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	687a      	ldr	r2, [r7, #4]
 8008f58:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	687a      	ldr	r2, [r7, #4]
 8008f5e:	605a      	str	r2, [r3, #4]
}
 8008f60:	bf00      	nop
 8008f62:	370c      	adds	r7, #12
 8008f64:	46bd      	mov	sp, r7
 8008f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6a:	4770      	bx	lr

08008f6c <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8008f6c:	b480      	push	{r7}
 8008f6e:	b087      	sub	sp, #28
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008f74:	f3ef 8310 	mrs	r3, PRIMASK
 8008f78:	60fb      	str	r3, [r7, #12]
  return(result);
 8008f7a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008f7c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8008f7e:	b672      	cpsid	i
}
 8008f80:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	687a      	ldr	r2, [r7, #4]
 8008f88:	429a      	cmp	r2, r3
 8008f8a:	d102      	bne.n	8008f92 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 8008f8c:	2301      	movs	r3, #1
 8008f8e:	75fb      	strb	r3, [r7, #23]
 8008f90:	e001      	b.n	8008f96 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 8008f92:	2300      	movs	r3, #0
 8008f94:	75fb      	strb	r3, [r7, #23]
 8008f96:	693b      	ldr	r3, [r7, #16]
 8008f98:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f9a:	68bb      	ldr	r3, [r7, #8]
 8008f9c:	f383 8810 	msr	PRIMASK, r3
}
 8008fa0:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 8008fa2:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	371c      	adds	r7, #28
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fae:	4770      	bx	lr

08008fb0 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8008fb0:	b480      	push	{r7}
 8008fb2:	b087      	sub	sp, #28
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
 8008fb8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008fba:	f3ef 8310 	mrs	r3, PRIMASK
 8008fbe:	60fb      	str	r3, [r7, #12]
  return(result);
 8008fc0:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008fc2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008fc4:	b672      	cpsid	i
}
 8008fc6:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681a      	ldr	r2, [r3, #0]
 8008fcc:	683b      	ldr	r3, [r7, #0]
 8008fce:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8008fd0:	683b      	ldr	r3, [r7, #0]
 8008fd2:	687a      	ldr	r2, [r7, #4]
 8008fd4:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	683a      	ldr	r2, [r7, #0]
 8008fda:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8008fdc:	683b      	ldr	r3, [r7, #0]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	683a      	ldr	r2, [r7, #0]
 8008fe2:	605a      	str	r2, [r3, #4]
 8008fe4:	697b      	ldr	r3, [r7, #20]
 8008fe6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008fe8:	693b      	ldr	r3, [r7, #16]
 8008fea:	f383 8810 	msr	PRIMASK, r3
}
 8008fee:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8008ff0:	bf00      	nop
 8008ff2:	371c      	adds	r7, #28
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffa:	4770      	bx	lr

08008ffc <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 8008ffc:	b480      	push	{r7}
 8008ffe:	b087      	sub	sp, #28
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
 8009004:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009006:	f3ef 8310 	mrs	r3, PRIMASK
 800900a:	60fb      	str	r3, [r7, #12]
  return(result);
 800900c:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800900e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009010:	b672      	cpsid	i
}
 8009012:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8009014:	683b      	ldr	r3, [r7, #0]
 8009016:	687a      	ldr	r2, [r7, #4]
 8009018:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	685a      	ldr	r2, [r3, #4]
 800901e:	683b      	ldr	r3, [r7, #0]
 8009020:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	683a      	ldr	r2, [r7, #0]
 8009026:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8009028:	683b      	ldr	r3, [r7, #0]
 800902a:	685b      	ldr	r3, [r3, #4]
 800902c:	683a      	ldr	r2, [r7, #0]
 800902e:	601a      	str	r2, [r3, #0]
 8009030:	697b      	ldr	r3, [r7, #20]
 8009032:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009034:	693b      	ldr	r3, [r7, #16]
 8009036:	f383 8810 	msr	PRIMASK, r3
}
 800903a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800903c:	bf00      	nop
 800903e:	371c      	adds	r7, #28
 8009040:	46bd      	mov	sp, r7
 8009042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009046:	4770      	bx	lr

08009048 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8009048:	b480      	push	{r7}
 800904a:	b087      	sub	sp, #28
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009050:	f3ef 8310 	mrs	r3, PRIMASK
 8009054:	60fb      	str	r3, [r7, #12]
  return(result);
 8009056:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009058:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800905a:	b672      	cpsid	i
}
 800905c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	685b      	ldr	r3, [r3, #4]
 8009062:	687a      	ldr	r2, [r7, #4]
 8009064:	6812      	ldr	r2, [r2, #0]
 8009066:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	687a      	ldr	r2, [r7, #4]
 800906e:	6852      	ldr	r2, [r2, #4]
 8009070:	605a      	str	r2, [r3, #4]
 8009072:	697b      	ldr	r3, [r7, #20]
 8009074:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009076:	693b      	ldr	r3, [r7, #16]
 8009078:	f383 8810 	msr	PRIMASK, r3
}
 800907c:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800907e:	bf00      	nop
 8009080:	371c      	adds	r7, #28
 8009082:	46bd      	mov	sp, r7
 8009084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009088:	4770      	bx	lr

0800908a <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800908a:	b580      	push	{r7, lr}
 800908c:	b086      	sub	sp, #24
 800908e:	af00      	add	r7, sp, #0
 8009090:	6078      	str	r0, [r7, #4]
 8009092:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009094:	f3ef 8310 	mrs	r3, PRIMASK
 8009098:	60fb      	str	r3, [r7, #12]
  return(result);
 800909a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800909c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800909e:	b672      	cpsid	i
}
 80090a0:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681a      	ldr	r2, [r3, #0]
 80090a6:	683b      	ldr	r3, [r7, #0]
 80090a8:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	4618      	mov	r0, r3
 80090b0:	f7ff ffca 	bl	8009048 <LST_remove_node>
 80090b4:	697b      	ldr	r3, [r7, #20]
 80090b6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80090b8:	693b      	ldr	r3, [r7, #16]
 80090ba:	f383 8810 	msr	PRIMASK, r3
}
 80090be:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80090c0:	bf00      	nop
 80090c2:	3718      	adds	r7, #24
 80090c4:	46bd      	mov	sp, r7
 80090c6:	bd80      	pop	{r7, pc}

080090c8 <CircularQueue_Add>:
  * @param  elementSize:  Size of element to be added to the queue. Only used if the queue manage variable size elements
  * @param  nbElements:  number of elements in the in buffer pointed by x
  * @retval  pointer on last element just added to the queue, NULL if the element to be added do not fit in the queue (too big)
  */
uint8_t* CircularQueue_Add(queue_t *q, uint8_t* x, uint16_t elementSize, uint32_t nbElements)
{
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b08e      	sub	sp, #56	@ 0x38
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	60f8      	str	r0, [r7, #12]
 80090d0:	60b9      	str	r1, [r7, #8]
 80090d2:	603b      	str	r3, [r7, #0]
 80090d4:	4613      	mov	r3, r2
 80090d6:	80fb      	strh	r3, [r7, #6]

  uint8_t* ptr = NULL;                      /* fct return ptr to the element freshly added, if no room fct return NULL */
 80090d8:	2300      	movs	r3, #0
 80090da:	623b      	str	r3, [r7, #32]
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 80090dc:	2300      	movs	r3, #0
 80090de:	86fb      	strh	r3, [r7, #54]	@ 0x36
  uint8_t  elemSizeStorageRoom  = 0 ;       /* Indicate the header (which contain only size) of element in case of varaibale size element (q->elementsize == 0) */
 80090e0:	2300      	movs	r3, #0
 80090e2:	77fb      	strb	r3, [r7, #31]
  uint32_t curBuffPosition;                  /* the current position in the queue buffer */
  uint32_t i;                               /* loop counter */
  uint32_t NbBytesToCopy = 0, NbCopiedBytes = 0 ; /* Indicators for copying bytes in queue */
 80090e4:	2300      	movs	r3, #0
 80090e6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80090e8:	2300      	movs	r3, #0
 80090ea:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t eob_free_size;                         /* Eof End of Quque Buffer Free Size */
  uint8_t  wrap_will_occur = 0;                   /* indicate if a wrap around will occurs */
 80090ec:	2300      	movs	r3, #0
 80090ee:	77bb      	strb	r3, [r7, #30]
  uint8_t  wrapped_element_eob_size;              /* In case of Wrap around, indicate size of parta of element that fit at thened of the queuue  buffer */
  uint16_t overhead = 0;                          /* In case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG or CIRCULAR_QUEUE_NO_WRAP_FLAG options, 
 80090f0:	2300      	movs	r3, #0
 80090f2:	83bb      	strh	r3, [r7, #28]
                                                     indcate the size overhead that will be generated by adding the element with wrap management (split or no wrap ) */ 
  
  
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	891b      	ldrh	r3, [r3, #8]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d101      	bne.n	8009100 <CircularQueue_Add+0x38>
 80090fc:	2302      	movs	r3, #2
 80090fe:	e000      	b.n	8009102 <CircularQueue_Add+0x3a>
 8009100:	2300      	movs	r3, #0
 8009102:	77fb      	strb	r3, [r7, #31]
  /* retrieve the size of last element sored: the value stored at the beginning of the queue element if element size is variable otherwise take it from fixed element Size member */
  if (q->byteCount)
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	695b      	ldr	r3, [r3, #20]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d029      	beq.n	8009160 <CircularQueue_Add+0x98>
  {
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	891b      	ldrh	r3, [r3, #8]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d122      	bne.n	800915a <CircularQueue_Add+0x92>
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	681a      	ldr	r2, [r3, #0]
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	691b      	ldr	r3, [r3, #16]
 800911c:	4413      	add	r3, r2
 800911e:	781b      	ldrb	r3, [r3, #0]
 8009120:	4618      	mov	r0, r3
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	681a      	ldr	r2, [r3, #0]
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	691b      	ldr	r3, [r3, #16]
 800912a:	1c59      	adds	r1, r3, #1
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	685b      	ldr	r3, [r3, #4]
 8009130:	4299      	cmp	r1, r3
 8009132:	d306      	bcc.n	8009142 <CircularQueue_Add+0x7a>
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	6919      	ldr	r1, [r3, #16]
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	685b      	ldr	r3, [r3, #4]
 800913c:	1acb      	subs	r3, r1, r3
 800913e:	3301      	adds	r3, #1
 8009140:	e002      	b.n	8009148 <CircularQueue_Add+0x80>
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	691b      	ldr	r3, [r3, #16]
 8009146:	3301      	adds	r3, #1
 8009148:	4413      	add	r3, r2
 800914a:	781b      	ldrb	r3, [r3, #0]
 800914c:	021b      	lsls	r3, r3, #8
 800914e:	b29b      	uxth	r3, r3
 8009150:	4403      	add	r3, r0
 8009152:	b29b      	uxth	r3, r3
 8009154:	3302      	adds	r3, #2
 8009156:	b29b      	uxth	r3, r3
 8009158:	e001      	b.n	800915e <CircularQueue_Add+0x96>
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	891b      	ldrh	r3, [r3, #8]
 800915e:	86fb      	strh	r3, [r7, #54]	@ 0x36
  }
  /* if queue element have fixed size , reset the elementSize arg with fixed element size value */
  if (q->elementSize > 0)               
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	891b      	ldrh	r3, [r3, #8]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d002      	beq.n	800916e <CircularQueue_Add+0xa6>
  {
    elementSize = q->elementSize;
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	891b      	ldrh	r3, [r3, #8]
 800916c:	80fb      	strh	r3, [r7, #6]
  }

   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	691a      	ldr	r2, [r3, #16]
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	68db      	ldr	r3, [r3, #12]
 8009176:	429a      	cmp	r2, r3
 8009178:	d307      	bcc.n	800918a <CircularQueue_Add+0xc2>
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	685a      	ldr	r2, [r3, #4]
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	6919      	ldr	r1, [r3, #16]
 8009182:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009184:	440b      	add	r3, r1
 8009186:	1ad3      	subs	r3, r2, r3
 8009188:	e000      	b.n	800918c <CircularQueue_Add+0xc4>
 800918a:	2300      	movs	r3, #0
 800918c:	61bb      	str	r3, [r7, #24]

   /* check how many bytes of wrapped element (if anay) are at end of buffer */
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 800918e:	88fa      	ldrh	r2, [r7, #6]
 8009190:	7ffb      	ldrb	r3, [r7, #31]
 8009192:	4413      	add	r3, r2
 8009194:	461a      	mov	r2, r3
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	fb02 f303 	mul.w	r3, r2, r3
 800919c:	69ba      	ldr	r2, [r7, #24]
 800919e:	429a      	cmp	r2, r3
 80091a0:	d80b      	bhi.n	80091ba <CircularQueue_Add+0xf2>
 80091a2:	88fa      	ldrh	r2, [r7, #6]
 80091a4:	7ffb      	ldrb	r3, [r7, #31]
 80091a6:	4413      	add	r3, r2
 80091a8:	461a      	mov	r2, r3
 80091aa:	69bb      	ldr	r3, [r7, #24]
 80091ac:	fbb3 f1f2 	udiv	r1, r3, r2
 80091b0:	fb01 f202 	mul.w	r2, r1, r2
 80091b4:	1a9b      	subs	r3, r3, r2
 80091b6:	b2db      	uxtb	r3, r3
 80091b8:	e000      	b.n	80091bc <CircularQueue_Add+0xf4>
 80091ba:	2300      	movs	r3, #0
 80091bc:	75fb      	strb	r3, [r7, #23]
   wrap_will_occur  = wrapped_element_eob_size > elemSizeStorageRoom;
 80091be:	7dfa      	ldrb	r2, [r7, #23]
 80091c0:	7ffb      	ldrb	r3, [r7, #31]
 80091c2:	429a      	cmp	r2, r3
 80091c4:	bf8c      	ite	hi
 80091c6:	2301      	movhi	r3, #1
 80091c8:	2300      	movls	r3, #0
 80091ca:	b2db      	uxtb	r3, r3
 80091cc:	77bb      	strb	r3, [r7, #30]

   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 80091ce:	7fbb      	ldrb	r3, [r7, #30]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d008      	beq.n	80091e6 <CircularQueue_Add+0x11e>
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	7f1b      	ldrb	r3, [r3, #28]
 80091d8:	f003 0301 	and.w	r3, r3, #1
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d002      	beq.n	80091e6 <CircularQueue_Add+0x11e>
 80091e0:	7dfb      	ldrb	r3, [r7, #23]
 80091e2:	b29b      	uxth	r3, r3
 80091e4:	e000      	b.n	80091e8 <CircularQueue_Add+0x120>
 80091e6:	8bbb      	ldrh	r3, [r7, #28]
 80091e8:	83bb      	strh	r3, [r7, #28]
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ? elemSizeStorageRoom  : overhead;
 80091ea:	7fbb      	ldrb	r3, [r7, #30]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d008      	beq.n	8009202 <CircularQueue_Add+0x13a>
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	7f1b      	ldrb	r3, [r3, #28]
 80091f4:	f003 0302 	and.w	r3, r3, #2
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d002      	beq.n	8009202 <CircularQueue_Add+0x13a>
 80091fc:	7ffb      	ldrb	r3, [r7, #31]
 80091fe:	b29b      	uxth	r3, r3
 8009200:	e000      	b.n	8009204 <CircularQueue_Add+0x13c>
 8009202:	8bbb      	ldrh	r3, [r7, #28]
 8009204:	83bb      	strh	r3, [r7, #28]
   
   
  /* Store now the elements if ennough room for all elements */
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 8009206:	88fb      	ldrh	r3, [r7, #6]
 8009208:	2b00      	cmp	r3, #0
 800920a:	f000 817e 	beq.w	800950a <CircularQueue_Add+0x442>
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	695a      	ldr	r2, [r3, #20]
 8009212:	88f9      	ldrh	r1, [r7, #6]
 8009214:	7ffb      	ldrb	r3, [r7, #31]
 8009216:	440b      	add	r3, r1
 8009218:	4619      	mov	r1, r3
 800921a:	683b      	ldr	r3, [r7, #0]
 800921c:	fb01 f303 	mul.w	r3, r1, r3
 8009220:	441a      	add	r2, r3
 8009222:	8bbb      	ldrh	r3, [r7, #28]
 8009224:	441a      	add	r2, r3
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	685b      	ldr	r3, [r3, #4]
 800922a:	429a      	cmp	r2, r3
 800922c:	f200 816d 	bhi.w	800950a <CircularQueue_Add+0x442>
  { 
    /* loop to add all elements  */
    for (i=0; i < nbElements; i++) 
 8009230:	2300      	movs	r3, #0
 8009232:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009234:	e14a      	b.n	80094cc <CircularQueue_Add+0x404>
    {
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	691a      	ldr	r2, [r3, #16]
 800923a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800923c:	441a      	add	r2, r3
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	685b      	ldr	r3, [r3, #4]
 8009242:	429a      	cmp	r2, r3
 8009244:	d307      	bcc.n	8009256 <CircularQueue_Add+0x18e>
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	691a      	ldr	r2, [r3, #16]
 800924a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800924c:	441a      	add	r2, r3
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	685b      	ldr	r3, [r3, #4]
 8009252:	1ad3      	subs	r3, r2, r3
 8009254:	e003      	b.n	800925e <CircularQueue_Add+0x196>
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	691a      	ldr	r2, [r3, #16]
 800925a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800925c:	4413      	add	r3, r2
 800925e:	68fa      	ldr	r2, [r7, #12]
 8009260:	6113      	str	r3, [r2, #16]
      curBuffPosition = q->last;
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	691b      	ldr	r3, [r3, #16]
 8009266:	633b      	str	r3, [r7, #48]	@ 0x30
      
      /* store the element  */
      /* store first the element size if element size is variable */
      if (q->elementSize == 0) 
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	891b      	ldrh	r3, [r3, #8]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d130      	bne.n	80092d2 <CircularQueue_Add+0x20a>
      {
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	681a      	ldr	r2, [r3, #0]
 8009274:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009276:	1c59      	adds	r1, r3, #1
 8009278:	6339      	str	r1, [r7, #48]	@ 0x30
 800927a:	4413      	add	r3, r2
 800927c:	88fa      	ldrh	r2, [r7, #6]
 800927e:	b2d2      	uxtb	r2, r2
 8009280:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	685b      	ldr	r3, [r3, #4]
 8009286:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009288:	429a      	cmp	r2, r3
 800928a:	d304      	bcc.n	8009296 <CircularQueue_Add+0x1ce>
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	685b      	ldr	r3, [r3, #4]
 8009290:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009292:	1ad3      	subs	r3, r2, r3
 8009294:	e000      	b.n	8009298 <CircularQueue_Add+0x1d0>
 8009296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009298:	633b      	str	r3, [r7, #48]	@ 0x30
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 800929a:	88fb      	ldrh	r3, [r7, #6]
 800929c:	0a1b      	lsrs	r3, r3, #8
 800929e:	b298      	uxth	r0, r3
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	681a      	ldr	r2, [r3, #0]
 80092a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092a6:	1c59      	adds	r1, r3, #1
 80092a8:	6339      	str	r1, [r7, #48]	@ 0x30
 80092aa:	4413      	add	r3, r2
 80092ac:	b2c2      	uxtb	r2, r0
 80092ae:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	685b      	ldr	r3, [r3, #4]
 80092b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80092b6:	429a      	cmp	r2, r3
 80092b8:	d304      	bcc.n	80092c4 <CircularQueue_Add+0x1fc>
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	685b      	ldr	r3, [r3, #4]
 80092be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80092c0:	1ad3      	subs	r3, r2, r3
 80092c2:	e000      	b.n	80092c6 <CircularQueue_Add+0x1fe>
 80092c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092c6:	633b      	str	r3, [r7, #48]	@ 0x30
        q->byteCount += 2;
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	695b      	ldr	r3, [r3, #20]
 80092cc:	1c9a      	adds	r2, r3, #2
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	615a      	str	r2, [r3, #20]
      }
      
      /* Identify number of bytes of copy takeing account possible wrap, in this case NbBytesToCopy will contains size that fit at end of the queue buffer */
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 80092d2:	88fa      	ldrh	r2, [r7, #6]
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	6859      	ldr	r1, [r3, #4]
 80092d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092da:	1acb      	subs	r3, r1, r3
 80092dc:	4293      	cmp	r3, r2
 80092de:	bf28      	it	cs
 80092e0:	4613      	movcs	r3, r2
 80092e2:	62bb      	str	r3, [r7, #40]	@ 0x28
      /* check if no wrap (NbBytesToCopy == elementSize) or if Wrap and no spsicf option; 
         In this case part of data will copied at the end of the buffer and the rest a the beginning */
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
 80092e4:	88fb      	ldrh	r3, [r7, #6]
 80092e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80092e8:	429a      	cmp	r2, r3
 80092ea:	d007      	beq.n	80092fc <CircularQueue_Add+0x234>
 80092ec:	88fb      	ldrh	r3, [r7, #6]
 80092ee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80092f0:	429a      	cmp	r2, r3
 80092f2:	d225      	bcs.n	8009340 <CircularQueue_Add+0x278>
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	7f1b      	ldrb	r3, [r3, #28]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d121      	bne.n	8009340 <CircularQueue_Add+0x278>
      {
        /* Copy First part (or emtire buffer ) from current position up to the end of the buffer queue (or before if enough room)  */
        memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	681a      	ldr	r2, [r3, #0]
 8009300:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009302:	18d0      	adds	r0, r2, r3
 8009304:	88fb      	ldrh	r3, [r7, #6]
 8009306:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009308:	fb02 f303 	mul.w	r3, r2, r3
 800930c:	68ba      	ldr	r2, [r7, #8]
 800930e:	4413      	add	r3, r2
 8009310:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009312:	4619      	mov	r1, r3
 8009314:	f001 ff4b 	bl	800b1ae <memcpy>
        /* Adjust bytes count */
        q->byteCount += NbBytesToCopy;
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	695a      	ldr	r2, [r3, #20]
 800931c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800931e:	441a      	add	r2, r3
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	615a      	str	r2, [r3, #20]
        /* Wrap */
        curBuffPosition = 0; 
 8009324:	2300      	movs	r3, #0
 8009326:	633b      	str	r3, [r7, #48]	@ 0x30
        /* set NbCopiedBytes bytes with  ampount copied */
        NbCopiedBytes = NbBytesToCopy;
 8009328:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800932a:	627b      	str	r3, [r7, #36]	@ 0x24
        /* set the rest to copy if wrao , if no wrap will be 0 */
        NbBytesToCopy = elementSize - NbBytesToCopy;
 800932c:	88fa      	ldrh	r2, [r7, #6]
 800932e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009330:	1ad3      	subs	r3, r2, r3
 8009332:	62bb      	str	r3, [r7, #40]	@ 0x28
        /* set the current element Size, will be used to calaculate next last position at beginning of loop */
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 8009334:	7ffb      	ldrb	r3, [r7, #31]
 8009336:	b29a      	uxth	r2, r3
 8009338:	88fb      	ldrh	r3, [r7, #6]
 800933a:	4413      	add	r3, r2
 800933c:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800933e:	e0a4      	b.n	800948a <CircularQueue_Add+0x3c2>
      }
      else if (NbBytesToCopy)  /* We have a wrap  to manage */
 8009340:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009342:	2b00      	cmp	r3, #0
 8009344:	f000 80a1 	beq.w	800948a <CircularQueue_Add+0x3c2>
      {
       /* case of CIRCULAR_QUEUE_NO_WRAP_FLAG option */
         if (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	7f1b      	ldrb	r3, [r3, #28]
 800934c:	f003 0301 	and.w	r3, r3, #1
 8009350:	2b00      	cmp	r3, #0
 8009352:	d03a      	beq.n	80093ca <CircularQueue_Add+0x302>
        {
          /* if element size are variable and NO_WRAP option, Invalidate end of buffer setting 0xFFFF size*/
          if (q->elementSize == 0)
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	891b      	ldrh	r3, [r3, #8]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d10d      	bne.n	8009378 <CircularQueue_Add+0x2b0>
          {
             q->qBuff[curBuffPosition-2] = 0xFF;
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	681a      	ldr	r2, [r3, #0]
 8009360:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009362:	3b02      	subs	r3, #2
 8009364:	4413      	add	r3, r2
 8009366:	22ff      	movs	r2, #255	@ 0xff
 8009368:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = 0xFF;
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	681a      	ldr	r2, [r3, #0]
 800936e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009370:	3b01      	subs	r3, #1
 8009372:	4413      	add	r3, r2
 8009374:	22ff      	movs	r2, #255	@ 0xff
 8009376:	701a      	strb	r2, [r3, #0]
          }
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	695a      	ldr	r2, [r3, #20]
 800937c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800937e:	441a      	add	r2, r3
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	615a      	str	r2, [r3, #20]
          /* No bytes coped a the end of buffer */
          NbCopiedBytes = 0;
 8009384:	2300      	movs	r3, #0
 8009386:	627b      	str	r3, [r7, #36]	@ 0x24
          /* all element to be copied at the begnning of buffer */
          NbBytesToCopy = elementSize; 
 8009388:	88fb      	ldrh	r3, [r7, #6]
 800938a:	62bb      	str	r3, [r7, #40]	@ 0x28
          /* Wrap */
          curBuffPosition = 0; 
 800938c:	2300      	movs	r3, #0
 800938e:	633b      	str	r3, [r7, #48]	@ 0x30
          /* if variable size element, invalidate end of buffer setting OxFFFF in element header (size) */
          if (q->elementSize == 0)
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	891b      	ldrh	r3, [r3, #8]
 8009394:	2b00      	cmp	r3, #0
 8009396:	d16f      	bne.n	8009478 <CircularQueue_Add+0x3b0>
          {
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	681a      	ldr	r2, [r3, #0]
 800939c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800939e:	1c59      	adds	r1, r3, #1
 80093a0:	6339      	str	r1, [r7, #48]	@ 0x30
 80093a2:	4413      	add	r3, r2
 80093a4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80093a6:	b2d2      	uxtb	r2, r2
 80093a8:	701a      	strb	r2, [r3, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 80093aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093ac:	0a18      	lsrs	r0, r3, #8
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	681a      	ldr	r2, [r3, #0]
 80093b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093b4:	1c59      	adds	r1, r3, #1
 80093b6:	6339      	str	r1, [r7, #48]	@ 0x30
 80093b8:	4413      	add	r3, r2
 80093ba:	b2c2      	uxtb	r2, r0
 80093bc:	701a      	strb	r2, [r3, #0]
            q->byteCount += 2;   
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	695b      	ldr	r3, [r3, #20]
 80093c2:	1c9a      	adds	r2, r3, #2
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	615a      	str	r2, [r3, #20]
 80093c8:	e056      	b.n	8009478 <CircularQueue_Add+0x3b0>
          } 
           
        }
        /* case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG option */
        else if (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	7f1b      	ldrb	r3, [r3, #28]
 80093ce:	f003 0302 	and.w	r3, r3, #2
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d050      	beq.n	8009478 <CircularQueue_Add+0x3b0>
        {
          if (q->elementSize == 0)
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	891b      	ldrh	r3, [r3, #8]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d14a      	bne.n	8009474 <CircularQueue_Add+0x3ac>
          {
            /* reset the size of current element to the nb bytes fitting at the end of buffer */
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	681a      	ldr	r2, [r3, #0]
 80093e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093e4:	3b02      	subs	r3, #2
 80093e6:	4413      	add	r3, r2
 80093e8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80093ea:	b2d2      	uxtb	r2, r2
 80093ec:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 80093ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093f0:	0a19      	lsrs	r1, r3, #8
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	681a      	ldr	r2, [r3, #0]
 80093f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093f8:	3b01      	subs	r3, #1
 80093fa:	4413      	add	r3, r2
 80093fc:	b2ca      	uxtb	r2, r1
 80093fe:	701a      	strb	r2, [r3, #0]
             /* copy the bytes */ 
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	681a      	ldr	r2, [r3, #0]
 8009404:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009406:	18d0      	adds	r0, r2, r3
 8009408:	88fb      	ldrh	r3, [r7, #6]
 800940a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800940c:	fb02 f303 	mul.w	r3, r2, r3
 8009410:	68ba      	ldr	r2, [r7, #8]
 8009412:	4413      	add	r3, r2
 8009414:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009416:	4619      	mov	r1, r3
 8009418:	f001 fec9 	bl	800b1ae <memcpy>
             q->byteCount += NbBytesToCopy; 
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	695a      	ldr	r2, [r3, #20]
 8009420:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009422:	441a      	add	r2, r3
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	615a      	str	r2, [r3, #20]
             /* set the number of copied bytes */
             NbCopiedBytes = NbBytesToCopy;             
 8009428:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800942a:	627b      	str	r3, [r7, #36]	@ 0x24
             /* set rest of data to be copied to begnning of buffer */
             NbBytesToCopy = elementSize - NbBytesToCopy;
 800942c:	88fa      	ldrh	r2, [r7, #6]
 800942e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009430:	1ad3      	subs	r3, r2, r3
 8009432:	62bb      	str	r3, [r7, #40]	@ 0x28
             /* one element more dur to split in 2 elements */
             q->elementCount++;
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	699b      	ldr	r3, [r3, #24]
 8009438:	1c5a      	adds	r2, r3, #1
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	619a      	str	r2, [r3, #24]
             /* Wrap */
             curBuffPosition = 0; 
 800943e:	2300      	movs	r3, #0
 8009440:	633b      	str	r3, [r7, #48]	@ 0x30
             /* Set new size for rest of data */
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	681a      	ldr	r2, [r3, #0]
 8009446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009448:	1c59      	adds	r1, r3, #1
 800944a:	6339      	str	r1, [r7, #48]	@ 0x30
 800944c:	4413      	add	r3, r2
 800944e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009450:	b2d2      	uxtb	r2, r2
 8009452:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 8009454:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009456:	0a18      	lsrs	r0, r3, #8
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	681a      	ldr	r2, [r3, #0]
 800945c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800945e:	1c59      	adds	r1, r3, #1
 8009460:	6339      	str	r1, [r7, #48]	@ 0x30
 8009462:	4413      	add	r3, r2
 8009464:	b2c2      	uxtb	r2, r0
 8009466:	701a      	strb	r2, [r3, #0]
             q->byteCount += 2;              
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	695b      	ldr	r3, [r3, #20]
 800946c:	1c9a      	adds	r2, r3, #2
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	615a      	str	r2, [r3, #20]
 8009472:	e001      	b.n	8009478 <CircularQueue_Add+0x3b0>
          else
          {
            /* Should not occur */
            /* can not manage split Flag on Fixed size element */
            /* Buffer is corrupted */
            return NULL;
 8009474:	2300      	movs	r3, #0
 8009476:	e049      	b.n	800950c <CircularQueue_Add+0x444>
          }
        }
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 8009478:	7ffb      	ldrb	r3, [r7, #31]
 800947a:	b29a      	uxth	r2, r3
 800947c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800947e:	b29b      	uxth	r3, r3
 8009480:	4413      	add	r3, r2
 8009482:	86fb      	strh	r3, [r7, #54]	@ 0x36
        q->last = 0;        
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	2200      	movs	r2, #0
 8009488:	611a      	str	r2, [r3, #16]
      }  
      
      /* some remaining byte to copy */
      if (NbBytesToCopy)      
 800948a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800948c:	2b00      	cmp	r3, #0
 800948e:	d015      	beq.n	80094bc <CircularQueue_Add+0x3f4>
      {
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	681a      	ldr	r2, [r3, #0]
 8009494:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009496:	18d0      	adds	r0, r2, r3
 8009498:	88fb      	ldrh	r3, [r7, #6]
 800949a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800949c:	fb03 f202 	mul.w	r2, r3, r2
 80094a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094a2:	4413      	add	r3, r2
 80094a4:	68ba      	ldr	r2, [r7, #8]
 80094a6:	4413      	add	r3, r2
 80094a8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80094aa:	4619      	mov	r1, r3
 80094ac:	f001 fe7f 	bl	800b1ae <memcpy>
        q->byteCount += NbBytesToCopy;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	695a      	ldr	r2, [r3, #20]
 80094b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094b6:	441a      	add	r2, r3
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	615a      	str	r2, [r3, #20]
      }      
      
      /* One more element */
      q->elementCount++;
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	699b      	ldr	r3, [r3, #24]
 80094c0:	1c5a      	adds	r2, r3, #1
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	619a      	str	r2, [r3, #24]
    for (i=0; i < nbElements; i++) 
 80094c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094c8:	3301      	adds	r3, #1
 80094ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80094cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80094ce:	683b      	ldr	r3, [r7, #0]
 80094d0:	429a      	cmp	r2, r3
 80094d2:	f4ff aeb0 	bcc.w	8009236 <CircularQueue_Add+0x16e>
    }
    
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	681a      	ldr	r2, [r3, #0]
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	6919      	ldr	r1, [r3, #16]
 80094de:	7ffb      	ldrb	r3, [r7, #31]
 80094e0:	4419      	add	r1, r3
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	685b      	ldr	r3, [r3, #4]
 80094e6:	4299      	cmp	r1, r3
 80094e8:	d307      	bcc.n	80094fa <CircularQueue_Add+0x432>
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	6919      	ldr	r1, [r3, #16]
 80094ee:	7ffb      	ldrb	r3, [r7, #31]
 80094f0:	4419      	add	r1, r3
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	685b      	ldr	r3, [r3, #4]
 80094f6:	1acb      	subs	r3, r1, r3
 80094f8:	e003      	b.n	8009502 <CircularQueue_Add+0x43a>
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	6919      	ldr	r1, [r3, #16]
 80094fe:	7ffb      	ldrb	r3, [r7, #31]
 8009500:	440b      	add	r3, r1
 8009502:	4413      	add	r3, r2
 8009504:	623b      	str	r3, [r7, #32]
  /* for Breakpoint only...to remove */
  else
  {
    return NULL;
  }
  return ptr;
 8009506:	6a3b      	ldr	r3, [r7, #32]
 8009508:	e000      	b.n	800950c <CircularQueue_Add+0x444>
    return NULL;
 800950a:	2300      	movs	r3, #0
}
 800950c:	4618      	mov	r0, r3
 800950e:	3738      	adds	r7, #56	@ 0x38
 8009510:	46bd      	mov	sp, r7
 8009512:	bd80      	pop	{r7, pc}

08009514 <CircularQueue_Remove>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize: Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on removed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Remove(queue_t *q, uint16_t* elementSize)
{
 8009514:	b480      	push	{r7}
 8009516:	b085      	sub	sp, #20
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
 800951c:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800951e:	2300      	movs	r3, #0
 8009520:	727b      	strb	r3, [r7, #9]
  uint8_t* ptr= NULL;
 8009522:	2300      	movs	r3, #0
 8009524:	60fb      	str	r3, [r7, #12]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	891b      	ldrh	r3, [r3, #8]
 800952a:	2b00      	cmp	r3, #0
 800952c:	d101      	bne.n	8009532 <CircularQueue_Remove+0x1e>
 800952e:	2302      	movs	r3, #2
 8009530:	e000      	b.n	8009534 <CircularQueue_Remove+0x20>
 8009532:	2300      	movs	r3, #0
 8009534:	727b      	strb	r3, [r7, #9]
  uint16_t eltSize = 0;
 8009536:	2300      	movs	r3, #0
 8009538:	817b      	strh	r3, [r7, #10]
  if (q->byteCount > 0) 
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	695b      	ldr	r3, [r3, #20]
 800953e:	2b00      	cmp	r3, #0
 8009540:	f000 80ca 	beq.w	80096d8 <CircularQueue_Remove+0x1c4>
  {
    /* retrieve element Size */
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	891b      	ldrh	r3, [r3, #8]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d120      	bne.n	800958e <CircularQueue_Remove+0x7a>
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681a      	ldr	r2, [r3, #0]
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	68db      	ldr	r3, [r3, #12]
 8009554:	4413      	add	r3, r2
 8009556:	781b      	ldrb	r3, [r3, #0]
 8009558:	4618      	mov	r0, r3
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681a      	ldr	r2, [r3, #0]
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	68db      	ldr	r3, [r3, #12]
 8009562:	1c59      	adds	r1, r3, #1
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	685b      	ldr	r3, [r3, #4]
 8009568:	4299      	cmp	r1, r3
 800956a:	d306      	bcc.n	800957a <CircularQueue_Remove+0x66>
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	68d9      	ldr	r1, [r3, #12]
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	685b      	ldr	r3, [r3, #4]
 8009574:	1acb      	subs	r3, r1, r3
 8009576:	3301      	adds	r3, #1
 8009578:	e002      	b.n	8009580 <CircularQueue_Remove+0x6c>
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	68db      	ldr	r3, [r3, #12]
 800957e:	3301      	adds	r3, #1
 8009580:	4413      	add	r3, r2
 8009582:	781b      	ldrb	r3, [r3, #0]
 8009584:	021b      	lsls	r3, r3, #8
 8009586:	b29b      	uxth	r3, r3
 8009588:	4403      	add	r3, r0
 800958a:	b29b      	uxth	r3, r3
 800958c:	e001      	b.n	8009592 <CircularQueue_Remove+0x7e>
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	891b      	ldrh	r3, [r3, #8]
 8009592:	817b      	strh	r3, [r7, #10]

     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	7f1b      	ldrb	r3, [r3, #28]
 8009598:	f003 0301 	and.w	r3, r3, #1
 800959c:	2b00      	cmp	r3, #0
 800959e:	d056      	beq.n	800964e <CircularQueue_Remove+0x13a>
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	7f1b      	ldrb	r3, [r3, #28]
 80095a4:	f003 0302 	and.w	r3, r3, #2
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d150      	bne.n	800964e <CircularQueue_Remove+0x13a>
     {
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 80095ac:	897b      	ldrh	r3, [r7, #10]
 80095ae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80095b2:	4293      	cmp	r3, r2
 80095b4:	d103      	bne.n	80095be <CircularQueue_Remove+0xaa>
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	891b      	ldrh	r3, [r3, #8]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d012      	beq.n	80095e4 <CircularQueue_Remove+0xd0>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	68da      	ldr	r2, [r3, #12]
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	691b      	ldr	r3, [r3, #16]
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 80095c6:	429a      	cmp	r2, r3
 80095c8:	d941      	bls.n	800964e <CircularQueue_Remove+0x13a>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	891b      	ldrh	r3, [r3, #8]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d03d      	beq.n	800964e <CircularQueue_Remove+0x13a>
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	685a      	ldr	r2, [r3, #4]
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	68db      	ldr	r3, [r3, #12]
 80095da:	1ad3      	subs	r3, r2, r3
 80095dc:	687a      	ldr	r2, [r7, #4]
 80095de:	8912      	ldrh	r2, [r2, #8]
 80095e0:	4293      	cmp	r3, r2
 80095e2:	d234      	bcs.n	800964e <CircularQueue_Remove+0x13a>
       {
          /* all data from current position up to the end of buffer are invalid */
          q->byteCount -= (q->queueMaxSize - q->first);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	695a      	ldr	r2, [r3, #20]
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	68d9      	ldr	r1, [r3, #12]
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	685b      	ldr	r3, [r3, #4]
 80095f0:	1acb      	subs	r3, r1, r3
 80095f2:	441a      	add	r2, r3
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	615a      	str	r2, [r3, #20]
          /* Adjust first element pos */
          q->first = 0;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	2200      	movs	r2, #0
 80095fc:	60da      	str	r2, [r3, #12]
          /* retrieve the right size after the wrap [if variable size element] */
          eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	891b      	ldrh	r3, [r3, #8]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d120      	bne.n	8009648 <CircularQueue_Remove+0x134>
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681a      	ldr	r2, [r3, #0]
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	68db      	ldr	r3, [r3, #12]
 800960e:	4413      	add	r3, r2
 8009610:	781b      	ldrb	r3, [r3, #0]
 8009612:	4618      	mov	r0, r3
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681a      	ldr	r2, [r3, #0]
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	68db      	ldr	r3, [r3, #12]
 800961c:	1c59      	adds	r1, r3, #1
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	685b      	ldr	r3, [r3, #4]
 8009622:	4299      	cmp	r1, r3
 8009624:	d306      	bcc.n	8009634 <CircularQueue_Remove+0x120>
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	68d9      	ldr	r1, [r3, #12]
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	685b      	ldr	r3, [r3, #4]
 800962e:	1acb      	subs	r3, r1, r3
 8009630:	3301      	adds	r3, #1
 8009632:	e002      	b.n	800963a <CircularQueue_Remove+0x126>
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	68db      	ldr	r3, [r3, #12]
 8009638:	3301      	adds	r3, #1
 800963a:	4413      	add	r3, r2
 800963c:	781b      	ldrb	r3, [r3, #0]
 800963e:	021b      	lsls	r3, r3, #8
 8009640:	b29b      	uxth	r3, r3
 8009642:	4403      	add	r3, r0
 8009644:	b29b      	uxth	r3, r3
 8009646:	e001      	b.n	800964c <CircularQueue_Remove+0x138>
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	891b      	ldrh	r3, [r3, #8]
 800964c:	817b      	strh	r3, [r7, #10]
       }
     }

    /* retrieve element */
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681a      	ldr	r2, [r3, #0]
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	68d9      	ldr	r1, [r3, #12]
 8009656:	7a7b      	ldrb	r3, [r7, #9]
 8009658:	4419      	add	r1, r3
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	685b      	ldr	r3, [r3, #4]
 800965e:	4299      	cmp	r1, r3
 8009660:	d307      	bcc.n	8009672 <CircularQueue_Remove+0x15e>
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	68d9      	ldr	r1, [r3, #12]
 8009666:	7a7b      	ldrb	r3, [r7, #9]
 8009668:	4419      	add	r1, r3
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	685b      	ldr	r3, [r3, #4]
 800966e:	1acb      	subs	r3, r1, r3
 8009670:	e003      	b.n	800967a <CircularQueue_Remove+0x166>
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	68d9      	ldr	r1, [r3, #12]
 8009676:	7a7b      	ldrb	r3, [r7, #9]
 8009678:	440b      	add	r3, r1
 800967a:	4413      	add	r3, r2
 800967c:	60fb      	str	r3, [r7, #12]

    /* adjust byte count */
    q->byteCount -= (eltSize + elemSizeStorageRoom) ;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	695b      	ldr	r3, [r3, #20]
 8009682:	8979      	ldrh	r1, [r7, #10]
 8009684:	7a7a      	ldrb	r2, [r7, #9]
 8009686:	440a      	add	r2, r1
 8009688:	1a9a      	subs	r2, r3, r2
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	615a      	str	r2, [r3, #20]
    
    /* Adjust q->first */
    if (q->byteCount > 0)
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	695b      	ldr	r3, [r3, #20]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d01b      	beq.n	80096ce <CircularQueue_Remove+0x1ba>
    {
      q->first = MOD((q->first+ eltSize + elemSizeStorageRoom ), q->queueMaxSize);
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	68da      	ldr	r2, [r3, #12]
 800969a:	897b      	ldrh	r3, [r7, #10]
 800969c:	441a      	add	r2, r3
 800969e:	7a7b      	ldrb	r3, [r7, #9]
 80096a0:	441a      	add	r2, r3
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	685b      	ldr	r3, [r3, #4]
 80096a6:	429a      	cmp	r2, r3
 80096a8:	d309      	bcc.n	80096be <CircularQueue_Remove+0x1aa>
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	68da      	ldr	r2, [r3, #12]
 80096ae:	897b      	ldrh	r3, [r7, #10]
 80096b0:	441a      	add	r2, r3
 80096b2:	7a7b      	ldrb	r3, [r7, #9]
 80096b4:	441a      	add	r2, r3
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	685b      	ldr	r3, [r3, #4]
 80096ba:	1ad3      	subs	r3, r2, r3
 80096bc:	e005      	b.n	80096ca <CircularQueue_Remove+0x1b6>
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	68da      	ldr	r2, [r3, #12]
 80096c2:	897b      	ldrh	r3, [r7, #10]
 80096c4:	441a      	add	r2, r3
 80096c6:	7a7b      	ldrb	r3, [r7, #9]
 80096c8:	4413      	add	r3, r2
 80096ca:	687a      	ldr	r2, [r7, #4]
 80096cc:	60d3      	str	r3, [r2, #12]
    }    
    /* adjust element count */    
    --q->elementCount;    
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	699b      	ldr	r3, [r3, #24]
 80096d2:	1e5a      	subs	r2, r3, #1
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	619a      	str	r2, [r3, #24]
  }
  if (elementSize != NULL)
 80096d8:	683b      	ldr	r3, [r7, #0]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d002      	beq.n	80096e4 <CircularQueue_Remove+0x1d0>
  {
    *elementSize = eltSize;
 80096de:	683b      	ldr	r3, [r7, #0]
 80096e0:	897a      	ldrh	r2, [r7, #10]
 80096e2:	801a      	strh	r2, [r3, #0]
  }
  return ptr;
 80096e4:	68fb      	ldr	r3, [r7, #12]
}
 80096e6:	4618      	mov	r0, r3
 80096e8:	3714      	adds	r7, #20
 80096ea:	46bd      	mov	sp, r7
 80096ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f0:	4770      	bx	lr

080096f2 <CircularQueue_Sense>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize:  Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on sensed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Sense(queue_t *q, uint16_t* elementSize)
{
 80096f2:	b480      	push	{r7}
 80096f4:	b087      	sub	sp, #28
 80096f6:	af00      	add	r7, sp, #0
 80096f8:	6078      	str	r0, [r7, #4]
 80096fa:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 80096fc:	2300      	movs	r3, #0
 80096fe:	72fb      	strb	r3, [r7, #11]
  uint8_t* x= NULL;
 8009700:	2300      	movs	r3, #0
 8009702:	617b      	str	r3, [r7, #20]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	891b      	ldrh	r3, [r3, #8]
 8009708:	2b00      	cmp	r3, #0
 800970a:	d101      	bne.n	8009710 <CircularQueue_Sense+0x1e>
 800970c:	2302      	movs	r3, #2
 800970e:	e000      	b.n	8009712 <CircularQueue_Sense+0x20>
 8009710:	2300      	movs	r3, #0
 8009712:	72fb      	strb	r3, [r7, #11]
  uint16_t eltSize = 0;
 8009714:	2300      	movs	r3, #0
 8009716:	827b      	strh	r3, [r7, #18]
  uint32_t FirstElemetPos = 0;
 8009718:	2300      	movs	r3, #0
 800971a:	60fb      	str	r3, [r7, #12]
    
  if (q->byteCount > 0) 
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	695b      	ldr	r3, [r3, #20]
 8009720:	2b00      	cmp	r3, #0
 8009722:	f000 808e 	beq.w	8009842 <CircularQueue_Sense+0x150>
  {
    FirstElemetPos = q->first;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	68db      	ldr	r3, [r3, #12]
 800972a:	60fb      	str	r3, [r7, #12]
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	891b      	ldrh	r3, [r3, #8]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d120      	bne.n	8009776 <CircularQueue_Sense+0x84>
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681a      	ldr	r2, [r3, #0]
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	68db      	ldr	r3, [r3, #12]
 800973c:	4413      	add	r3, r2
 800973e:	781b      	ldrb	r3, [r3, #0]
 8009740:	4618      	mov	r0, r3
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681a      	ldr	r2, [r3, #0]
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	68db      	ldr	r3, [r3, #12]
 800974a:	1c59      	adds	r1, r3, #1
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	685b      	ldr	r3, [r3, #4]
 8009750:	4299      	cmp	r1, r3
 8009752:	d306      	bcc.n	8009762 <CircularQueue_Sense+0x70>
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	68d9      	ldr	r1, [r3, #12]
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	685b      	ldr	r3, [r3, #4]
 800975c:	1acb      	subs	r3, r1, r3
 800975e:	3301      	adds	r3, #1
 8009760:	e002      	b.n	8009768 <CircularQueue_Sense+0x76>
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	68db      	ldr	r3, [r3, #12]
 8009766:	3301      	adds	r3, #1
 8009768:	4413      	add	r3, r2
 800976a:	781b      	ldrb	r3, [r3, #0]
 800976c:	021b      	lsls	r3, r3, #8
 800976e:	b29b      	uxth	r3, r3
 8009770:	4403      	add	r3, r0
 8009772:	b29b      	uxth	r3, r3
 8009774:	e001      	b.n	800977a <CircularQueue_Sense+0x88>
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	891b      	ldrh	r3, [r3, #8]
 800977a:	827b      	strh	r3, [r7, #18]
    
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	7f1b      	ldrb	r3, [r3, #28]
 8009780:	f003 0301 	and.w	r3, r3, #1
 8009784:	2b00      	cmp	r3, #0
 8009786:	d047      	beq.n	8009818 <CircularQueue_Sense+0x126>
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	7f1b      	ldrb	r3, [r3, #28]
 800978c:	f003 0302 	and.w	r3, r3, #2
 8009790:	2b00      	cmp	r3, #0
 8009792:	d141      	bne.n	8009818 <CircularQueue_Sense+0x126>
    { 
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 8009794:	8a7b      	ldrh	r3, [r7, #18]
 8009796:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800979a:	4293      	cmp	r3, r2
 800979c:	d103      	bne.n	80097a6 <CircularQueue_Sense+0xb4>
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	891b      	ldrh	r3, [r3, #8]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d012      	beq.n	80097cc <CircularQueue_Sense+0xda>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	68da      	ldr	r2, [r3, #12]
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	691b      	ldr	r3, [r3, #16]
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 80097ae:	429a      	cmp	r2, r3
 80097b0:	d932      	bls.n	8009818 <CircularQueue_Sense+0x126>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	891b      	ldrh	r3, [r3, #8]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d02e      	beq.n	8009818 <CircularQueue_Sense+0x126>
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	685a      	ldr	r2, [r3, #4]
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	68db      	ldr	r3, [r3, #12]
 80097c2:	1ad3      	subs	r3, r2, r3
 80097c4:	687a      	ldr	r2, [r7, #4]
 80097c6:	8912      	ldrh	r2, [r2, #8]
 80097c8:	4293      	cmp	r3, r2
 80097ca:	d225      	bcs.n	8009818 <CircularQueue_Sense+0x126>

      {
        /* all data from current position up to the end of buffer are invalid */
        FirstElemetPos = 0; /* wrap to the begiining of buffer */
 80097cc:	2300      	movs	r3, #0
 80097ce:	60fb      	str	r3, [r7, #12]

        /* retrieve the right size after the wrap [if variable size element] */
        eltSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	891b      	ldrh	r3, [r3, #8]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d11c      	bne.n	8009812 <CircularQueue_Sense+0x120>
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681a      	ldr	r2, [r3, #0]
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	4413      	add	r3, r2
 80097e0:	781b      	ldrb	r3, [r3, #0]
 80097e2:	4618      	mov	r0, r3
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681a      	ldr	r2, [r3, #0]
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	1c59      	adds	r1, r3, #1
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	685b      	ldr	r3, [r3, #4]
 80097f0:	4299      	cmp	r1, r3
 80097f2:	d305      	bcc.n	8009800 <CircularQueue_Sense+0x10e>
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	685b      	ldr	r3, [r3, #4]
 80097f8:	68f9      	ldr	r1, [r7, #12]
 80097fa:	1acb      	subs	r3, r1, r3
 80097fc:	3301      	adds	r3, #1
 80097fe:	e001      	b.n	8009804 <CircularQueue_Sense+0x112>
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	3301      	adds	r3, #1
 8009804:	4413      	add	r3, r2
 8009806:	781b      	ldrb	r3, [r3, #0]
 8009808:	021b      	lsls	r3, r3, #8
 800980a:	b29b      	uxth	r3, r3
 800980c:	4403      	add	r3, r0
 800980e:	b29b      	uxth	r3, r3
 8009810:	e001      	b.n	8009816 <CircularQueue_Sense+0x124>
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	891b      	ldrh	r3, [r3, #8]
 8009816:	827b      	strh	r3, [r7, #18]
      }
   }
   /* retrieve element */
    x = q->qBuff + (MOD((FirstElemetPos + elemSizeStorageRoom), q->queueMaxSize));
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681a      	ldr	r2, [r3, #0]
 800981c:	7af9      	ldrb	r1, [r7, #11]
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	4419      	add	r1, r3
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	685b      	ldr	r3, [r3, #4]
 8009826:	4299      	cmp	r1, r3
 8009828:	d306      	bcc.n	8009838 <CircularQueue_Sense+0x146>
 800982a:	7af9      	ldrb	r1, [r7, #11]
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	4419      	add	r1, r3
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	685b      	ldr	r3, [r3, #4]
 8009834:	1acb      	subs	r3, r1, r3
 8009836:	e002      	b.n	800983e <CircularQueue_Sense+0x14c>
 8009838:	7af9      	ldrb	r1, [r7, #11]
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	440b      	add	r3, r1
 800983e:	4413      	add	r3, r2
 8009840:	617b      	str	r3, [r7, #20]
  }
  if (elementSize != NULL)
 8009842:	683b      	ldr	r3, [r7, #0]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d002      	beq.n	800984e <CircularQueue_Sense+0x15c>
  {
    *elementSize = eltSize;
 8009848:	683b      	ldr	r3, [r7, #0]
 800984a:	8a7a      	ldrh	r2, [r7, #18]
 800984c:	801a      	strh	r2, [r3, #0]
  }
  return x;
 800984e:	697b      	ldr	r3, [r7, #20]
}
 8009850:	4618      	mov	r0, r3
 8009852:	371c      	adds	r7, #28
 8009854:	46bd      	mov	sp, r7
 8009856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985a:	4770      	bx	lr

0800985c <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 800985c:	b480      	push	{r7}
 800985e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8009860:	4b03      	ldr	r3, [pc, #12]	@ (8009870 <LL_FLASH_GetUDN+0x14>)
 8009862:	681b      	ldr	r3, [r3, #0]
}
 8009864:	4618      	mov	r0, r3
 8009866:	46bd      	mov	sp, r7
 8009868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986c:	4770      	bx	lr
 800986e:	bf00      	nop
 8009870:	1fff7580 	.word	0x1fff7580

08009874 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8009874:	b480      	push	{r7}
 8009876:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8009878:	4b03      	ldr	r3, [pc, #12]	@ (8009888 <LL_FLASH_GetDeviceID+0x14>)
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	b2db      	uxtb	r3, r3
}
 800987e:	4618      	mov	r0, r3
 8009880:	46bd      	mov	sp, r7
 8009882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009886:	4770      	bx	lr
 8009888:	1fff7584 	.word	0x1fff7584

0800988c <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 800988c:	b480      	push	{r7}
 800988e:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8009890:	4b03      	ldr	r3, [pc, #12]	@ (80098a0 <LL_FLASH_GetSTCompanyID+0x14>)
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	0a1b      	lsrs	r3, r3, #8
}
 8009896:	4618      	mov	r0, r3
 8009898:	46bd      	mov	sp, r7
 800989a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989e:	4770      	bx	lr
 80098a0:	1fff7584 	.word	0x1fff7584

080098a4 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 80098a4:	b5b0      	push	{r4, r5, r7, lr}
 80098a6:	b090      	sub	sp, #64	@ 0x40
 80098a8:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80098aa:	2392      	movs	r3, #146	@ 0x92
 80098ac:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 80098b0:	4b3f      	ldr	r3, [pc, #252]	@ (80099b0 <APP_BLE_Init+0x10c>)
 80098b2:	1d3c      	adds	r4, r7, #4
 80098b4:	461d      	mov	r5, r3
 80098b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80098b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80098ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80098bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80098be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80098c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80098c2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80098c6:	c403      	stmia	r4!, {r0, r1}
 80098c8:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 80098ca:	f000 fa1d 	bl	8009d08 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 80098ce:	2101      	movs	r1, #1
 80098d0:	2002      	movs	r0, #2
 80098d2:	f000 ff7d 	bl	800a7d0 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 80098d6:	4a37      	ldr	r2, [pc, #220]	@ (80099b4 <APP_BLE_Init+0x110>)
 80098d8:	2100      	movs	r1, #0
 80098da:	2004      	movs	r0, #4
 80098dc:	f001 f8a4 	bl	800aa28 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 80098e0:	1d3b      	adds	r3, r7, #4
 80098e2:	4618      	mov	r0, r3
 80098e4:	f7fe fcf2 	bl	80082cc <SHCI_C2_BLE_Init>
 80098e8:	4603      	mov	r3, r0
 80098ea:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  if (status != SHCI_Success)
 80098ee:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d008      	beq.n	8009908 <APP_BLE_Init+0x64>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
 80098f6:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80098fa:	4619      	mov	r1, r3
 80098fc:	482e      	ldr	r0, [pc, #184]	@ (80099b8 <APP_BLE_Init+0x114>)
 80098fe:	f001 fa93 	bl	800ae28 <iprintf>
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 8009902:	f7f8 fd57 	bl	80023b4 <Error_Handler>
 8009906:	e002      	b.n	800990e <APP_BLE_Init+0x6a>
  }
  else
  {
    APP_DBG_MSG("  Success: SHCI_C2_BLE_Init command\n\r");
 8009908:	482c      	ldr	r0, [pc, #176]	@ (80099bc <APP_BLE_Init+0x118>)
 800990a:	f001 fa8d 	bl	800ae28 <iprintf>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 800990e:	f000 fa11 	bl	8009d34 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 8009912:	f7fe fc35 	bl	8008180 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8009916:	4b2a      	ldr	r3, [pc, #168]	@ (80099c0 <APP_BLE_Init+0x11c>)
 8009918:	2200      	movs	r2, #0
 800991a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 800991e:	4b28      	ldr	r3, [pc, #160]	@ (80099c0 <APP_BLE_Init+0x11c>)
 8009920:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009924:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 8009926:	4a27      	ldr	r2, [pc, #156]	@ (80099c4 <APP_BLE_Init+0x120>)
 8009928:	2100      	movs	r1, #0
 800992a:	2001      	movs	r0, #1
 800992c:	f001 f87c 	bl	800aa28 <UTIL_SEQ_RegTask>
#if (L2CAP_REQUEST_NEW_CONN_PARAM != 0)
  UTIL_SEQ_RegTask(1<<CFG_TASK_CONN_UPDATE_REG_ID, UTIL_SEQ_RFU, Connection_Interval_Update_Req);
 8009930:	4a25      	ldr	r2, [pc, #148]	@ (80099c8 <APP_BLE_Init+0x124>)
 8009932:	2100      	movs	r1, #0
 8009934:	2002      	movs	r0, #2
 8009936:	f001 f877 	bl	800aa28 <UTIL_SEQ_RegTask>
#if (BLE_CFG_OTA_REBOOT_CHAR != 0)
  a_ManufData[sizeof(a_ManufData)-8] = CFG_FEATURE_OTA_REBOOT;
#endif /* BLE_CFG_OTA_REBOOT_CHAR != 0 */

#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 800993a:	2006      	movs	r0, #6
 800993c:	f7fe f86c 	bl	8007a18 <aci_hal_set_radio_activity_mask>
 8009940:	4603      	mov	r3, r0
 8009942:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  if (ret != BLE_STATUS_SUCCESS)
 8009946:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800994a:	2b00      	cmp	r3, #0
 800994c:	d006      	beq.n	800995c <APP_BLE_Init+0xb8>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_radio_activity_mask command, result: 0x%x \n\r", ret);
 800994e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8009952:	4619      	mov	r1, r3
 8009954:	481d      	ldr	r0, [pc, #116]	@ (80099cc <APP_BLE_Init+0x128>)
 8009956:	f001 fa67 	bl	800ae28 <iprintf>
 800995a:	e002      	b.n	8009962 <APP_BLE_Init+0xbe>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_radio_activity_mask command\n\r");
 800995c:	481c      	ldr	r0, [pc, #112]	@ (80099d0 <APP_BLE_Init+0x12c>)
 800995e:	f001 fa63 	bl	800ae28 <iprintf>
  }
#endif /* RADIO_ACTIVITY_EVENT != 0 */

#if (L2CAP_REQUEST_NEW_CONN_PARAM != 0)
  index_con_int = 0;
 8009962:	4b1c      	ldr	r3, [pc, #112]	@ (80099d4 <APP_BLE_Init+0x130>)
 8009964:	2200      	movs	r2, #0
 8009966:	701a      	strb	r2, [r3, #0]
  mutex = 1;
 8009968:	4b1b      	ldr	r3, [pc, #108]	@ (80099d8 <APP_BLE_Init+0x134>)
 800996a:	2201      	movs	r2, #1
 800996c:	701a      	strb	r2, [r3, #0]
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize P2P Server Application
   */
  P2PS_APP_Init();
 800996e:	f000 fdc0 	bl	800a4f2 <P2PS_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Create timer to handle the Advertising Stop
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.Advertising_mgr_timer_Id), hw_ts_SingleShot, Adv_Cancel_Req);
 8009972:	4b1a      	ldr	r3, [pc, #104]	@ (80099dc <APP_BLE_Init+0x138>)
 8009974:	2200      	movs	r2, #0
 8009976:	491a      	ldr	r1, [pc, #104]	@ (80099e0 <APP_BLE_Init+0x13c>)
 8009978:	2000      	movs	r0, #0
 800997a:	f7f7 ffb5 	bl	80018e8 <HW_TS_Create>
  /**
   * Create timer to handle the Led Switch OFF
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.SwitchOffGPIO_timer_Id), hw_ts_SingleShot, Switch_OFF_GPIO);
 800997e:	4b19      	ldr	r3, [pc, #100]	@ (80099e4 <APP_BLE_Init+0x140>)
 8009980:	2200      	movs	r2, #0
 8009982:	4919      	ldr	r1, [pc, #100]	@ (80099e8 <APP_BLE_Init+0x144>)
 8009984:	2000      	movs	r0, #0
 8009986:	f7f7 ffaf 	bl	80018e8 <HW_TS_Create>

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 800998a:	4b0d      	ldr	r3, [pc, #52]	@ (80099c0 <APP_BLE_Init+0x11c>)
 800998c:	2200      	movs	r2, #0
 800998e:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 8009990:	4b0b      	ldr	r3, [pc, #44]	@ (80099c0 <APP_BLE_Init+0x11c>)
 8009992:	2200      	movs	r2, #0
 8009994:	761a      	strb	r2, [r3, #24]

  /* Initialize intervals for reconnexion without intervals update */
  AdvIntervalMin = CFG_FAST_CONN_ADV_INTERVAL_MIN;
 8009996:	4b15      	ldr	r3, [pc, #84]	@ (80099ec <APP_BLE_Init+0x148>)
 8009998:	2280      	movs	r2, #128	@ 0x80
 800999a:	801a      	strh	r2, [r3, #0]
  AdvIntervalMax = CFG_FAST_CONN_ADV_INTERVAL_MAX;
 800999c:	4b14      	ldr	r3, [pc, #80]	@ (80099f0 <APP_BLE_Init+0x14c>)
 800999e:	22a0      	movs	r2, #160	@ 0xa0
 80099a0:	801a      	strh	r2, [r3, #0]

  /**
   * Start to Advertise to be connected by P2P Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 80099a2:	2001      	movs	r0, #1
 80099a4:	f000 fb76 	bl	800a094 <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 80099a8:	bf00      	nop
}
 80099aa:	3740      	adds	r7, #64	@ 0x40
 80099ac:	46bd      	mov	sp, r7
 80099ae:	bdb0      	pop	{r4, r5, r7, pc}
 80099b0:	0800c080 	.word	0x0800c080
 80099b4:	080084e9 	.word	0x080084e9
 80099b8:	0800bfa4 	.word	0x0800bfa4
 80099bc:	0800bfdc 	.word	0x0800bfdc
 80099c0:	20000384 	.word	0x20000384
 80099c4:	0800a275 	.word	0x0800a275
 80099c8:	0800a3b5 	.word	0x0800a3b5
 80099cc:	0800c004 	.word	0x0800c004
 80099d0:	0800c048 	.word	0x0800c048
 80099d4:	20000410 	.word	0x20000410
 80099d8:	20000411 	.word	0x20000411
 80099dc:	0800a2cd 	.word	0x0800a2cd
 80099e0:	20000405 	.word	0x20000405
 80099e4:	0800a2dd 	.word	0x0800a2dd
 80099e8:	20000406 	.word	0x20000406
 80099ec:	20000408 	.word	0x20000408
 80099f0:	2000040a 	.word	0x2000040a

080099f4 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 80099f4:	b5b0      	push	{r4, r5, r7, lr}
 80099f6:	b090      	sub	sp, #64	@ 0x40
 80099f8:	af04      	add	r7, sp, #16
 80099fa:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  uint8_t           Tx_phy, Rx_phy;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 80099fc:	2392      	movs	r3, #146	@ 0x92
 80099fe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	3301      	adds	r3, #1
 8009a06:	62bb      	str	r3, [r7, #40]	@ 0x28

  switch (p_event_pckt->evt)
 8009a08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a0a:	781b      	ldrb	r3, [r3, #0]
 8009a0c:	2bff      	cmp	r3, #255	@ 0xff
 8009a0e:	f000 8120 	beq.w	8009c52 <SVCCTL_App_Notification+0x25e>
 8009a12:	2bff      	cmp	r3, #255	@ 0xff
 8009a14:	f300 814b 	bgt.w	8009cae <SVCCTL_App_Notification+0x2ba>
 8009a18:	2b05      	cmp	r3, #5
 8009a1a:	d002      	beq.n	8009a22 <SVCCTL_App_Notification+0x2e>
 8009a1c:	2b3e      	cmp	r3, #62	@ 0x3e
 8009a1e:	d02e      	beq.n	8009a7e <SVCCTL_App_Notification+0x8a>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 8009a20:	e145      	b.n	8009cae <SVCCTL_App_Notification+0x2ba>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 8009a22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a24:	3302      	adds	r3, #2
 8009a26:	613b      	str	r3, [r7, #16]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 8009a28:	693b      	ldr	r3, [r7, #16]
 8009a2a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009a2e:	b29a      	uxth	r2, r3
 8009a30:	4ba3      	ldr	r3, [pc, #652]	@ (8009cc0 <SVCCTL_App_Notification+0x2cc>)
 8009a32:	8adb      	ldrh	r3, [r3, #22]
 8009a34:	429a      	cmp	r2, r3
 8009a36:	d114      	bne.n	8009a62 <SVCCTL_App_Notification+0x6e>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 8009a38:	4ba1      	ldr	r3, [pc, #644]	@ (8009cc0 <SVCCTL_App_Notification+0x2cc>)
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8009a3e:	4ba0      	ldr	r3, [pc, #640]	@ (8009cc0 <SVCCTL_App_Notification+0x2cc>)
 8009a40:	2200      	movs	r2, #0
 8009a42:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
        APP_DBG_MSG(">>== HCI_DISCONNECTION_COMPLETE_EVT_CODE\n");
 8009a46:	489f      	ldr	r0, [pc, #636]	@ (8009cc4 <SVCCTL_App_Notification+0x2d0>)
 8009a48:	f001 fa56 	bl	800aef8 <puts>
                    p_disconnection_complete_event->Connection_Handle,
 8009a4c:	693b      	ldr	r3, [r7, #16]
 8009a4e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009a52:	b29b      	uxth	r3, r3
        APP_DBG_MSG("     - Connection Handle:   0x%x\n     - Reason:    0x%x\n\r",
 8009a54:	4619      	mov	r1, r3
                    p_disconnection_complete_event->Reason);
 8009a56:	693b      	ldr	r3, [r7, #16]
 8009a58:	78db      	ldrb	r3, [r3, #3]
        APP_DBG_MSG("     - Connection Handle:   0x%x\n     - Reason:    0x%x\n\r",
 8009a5a:	461a      	mov	r2, r3
 8009a5c:	489a      	ldr	r0, [pc, #616]	@ (8009cc8 <SVCCTL_App_Notification+0x2d4>)
 8009a5e:	f001 f9e3 	bl	800ae28 <iprintf>
      Adv_Request(APP_BLE_FAST_ADV);
 8009a62:	2001      	movs	r0, #1
 8009a64:	f000 fb16 	bl	800a094 <Adv_Request>
      HandleNotification.P2P_Evt_Opcode = PEER_DISCON_HANDLE_EVT;
 8009a68:	4b98      	ldr	r3, [pc, #608]	@ (8009ccc <SVCCTL_App_Notification+0x2d8>)
 8009a6a:	2201      	movs	r2, #1
 8009a6c:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8009a6e:	4b94      	ldr	r3, [pc, #592]	@ (8009cc0 <SVCCTL_App_Notification+0x2cc>)
 8009a70:	8ada      	ldrh	r2, [r3, #22]
 8009a72:	4b96      	ldr	r3, [pc, #600]	@ (8009ccc <SVCCTL_App_Notification+0x2d8>)
 8009a74:	805a      	strh	r2, [r3, #2]
      P2PS_APP_Notification(&HandleNotification);
 8009a76:	4895      	ldr	r0, [pc, #596]	@ (8009ccc <SVCCTL_App_Notification+0x2d8>)
 8009a78:	f000 fd27 	bl	800a4ca <P2PS_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 8009a7c:	e11a      	b.n	8009cb4 <SVCCTL_App_Notification+0x2c0>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 8009a7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a80:	3302      	adds	r3, #2
 8009a82:	623b      	str	r3, [r7, #32]
      switch (p_meta_evt->subevent)
 8009a84:	6a3b      	ldr	r3, [r7, #32]
 8009a86:	781b      	ldrb	r3, [r3, #0]
 8009a88:	2b0c      	cmp	r3, #12
 8009a8a:	d033      	beq.n	8009af4 <SVCCTL_App_Notification+0x100>
 8009a8c:	2b0c      	cmp	r3, #12
 8009a8e:	f300 80de 	bgt.w	8009c4e <SVCCTL_App_Notification+0x25a>
 8009a92:	2b01      	cmp	r3, #1
 8009a94:	d06c      	beq.n	8009b70 <SVCCTL_App_Notification+0x17c>
 8009a96:	2b03      	cmp	r3, #3
 8009a98:	f040 80d9 	bne.w	8009c4e <SVCCTL_App_Notification+0x25a>
          p_connection_update_complete_event = (hci_le_connection_update_complete_event_rp0 *) p_meta_evt->data;
 8009a9c:	6a3b      	ldr	r3, [r7, #32]
 8009a9e:	3301      	adds	r3, #1
 8009aa0:	61bb      	str	r3, [r7, #24]
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_UPDATE_COMPLETE_SUBEVT_CODE\n");
 8009aa2:	488b      	ldr	r0, [pc, #556]	@ (8009cd0 <SVCCTL_App_Notification+0x2dc>)
 8009aa4:	f001 fa28 	bl	800aef8 <puts>
                       p_connection_update_complete_event->Conn_Interval*1.25,
 8009aa8:	69bb      	ldr	r3, [r7, #24]
 8009aaa:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8009aae:	b29b      	uxth	r3, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	f7f6 fe39 	bl	8000728 <__aeabi_i2d>
 8009ab6:	f04f 0200 	mov.w	r2, #0
 8009aba:	4b86      	ldr	r3, [pc, #536]	@ (8009cd4 <SVCCTL_App_Notification+0x2e0>)
 8009abc:	f7f6 fbb8 	bl	8000230 <__aeabi_dmul>
 8009ac0:	4602      	mov	r2, r0
 8009ac2:	460b      	mov	r3, r1
 8009ac4:	4610      	mov	r0, r2
 8009ac6:	4619      	mov	r1, r3
                       p_connection_update_complete_event->Conn_Latency,
 8009ac8:	69bb      	ldr	r3, [r7, #24]
 8009aca:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8009ace:	b29b      	uxth	r3, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 8009ad0:	461c      	mov	r4, r3
                       p_connection_update_complete_event->Supervision_Timeout*10);
 8009ad2:	69bb      	ldr	r3, [r7, #24]
 8009ad4:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8009ad8:	b29b      	uxth	r3, r3
 8009ada:	461a      	mov	r2, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 8009adc:	4613      	mov	r3, r2
 8009ade:	009b      	lsls	r3, r3, #2
 8009ae0:	4413      	add	r3, r2
 8009ae2:	005b      	lsls	r3, r3, #1
 8009ae4:	9301      	str	r3, [sp, #4]
 8009ae6:	9400      	str	r4, [sp, #0]
 8009ae8:	4602      	mov	r2, r0
 8009aea:	460b      	mov	r3, r1
 8009aec:	487a      	ldr	r0, [pc, #488]	@ (8009cd8 <SVCCTL_App_Notification+0x2e4>)
 8009aee:	f001 f99b 	bl	800ae28 <iprintf>
          break;
 8009af2:	e0ad      	b.n	8009c50 <SVCCTL_App_Notification+0x25c>
          p_evt_le_phy_update_complete = (hci_le_phy_update_complete_event_rp0*)p_meta_evt->data;
 8009af4:	6a3b      	ldr	r3, [r7, #32]
 8009af6:	3301      	adds	r3, #1
 8009af8:	61fb      	str	r3, [r7, #28]
          APP_DBG_MSG("==>> HCI_LE_PHY_UPDATE_COMPLETE_SUBEVT_CODE - ");
 8009afa:	4878      	ldr	r0, [pc, #480]	@ (8009cdc <SVCCTL_App_Notification+0x2e8>)
 8009afc:	f001 f994 	bl	800ae28 <iprintf>
          if (p_evt_le_phy_update_complete->Status == 0)
 8009b00:	69fb      	ldr	r3, [r7, #28]
 8009b02:	781b      	ldrb	r3, [r3, #0]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d103      	bne.n	8009b10 <SVCCTL_App_Notification+0x11c>
            APP_DBG_MSG("status ok \n");
 8009b08:	4875      	ldr	r0, [pc, #468]	@ (8009ce0 <SVCCTL_App_Notification+0x2ec>)
 8009b0a:	f001 f9f5 	bl	800aef8 <puts>
 8009b0e:	e002      	b.n	8009b16 <SVCCTL_App_Notification+0x122>
            APP_DBG_MSG("status nok \n");
 8009b10:	4874      	ldr	r0, [pc, #464]	@ (8009ce4 <SVCCTL_App_Notification+0x2f0>)
 8009b12:	f001 f9f1 	bl	800aef8 <puts>
          ret = hci_le_read_phy(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, &Tx_phy, &Rx_phy);
 8009b16:	4b6a      	ldr	r3, [pc, #424]	@ (8009cc0 <SVCCTL_App_Notification+0x2cc>)
 8009b18:	8adb      	ldrh	r3, [r3, #22]
 8009b1a:	f107 020e 	add.w	r2, r7, #14
 8009b1e:	f107 010f 	add.w	r1, r7, #15
 8009b22:	4618      	mov	r0, r3
 8009b24:	f7fd fff0 	bl	8007b08 <hci_le_read_phy>
 8009b28:	4603      	mov	r3, r0
 8009b2a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
          if (ret != BLE_STATUS_SUCCESS)
 8009b2e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d003      	beq.n	8009b3e <SVCCTL_App_Notification+0x14a>
            APP_DBG_MSG("==>> hci_le_read_phy : fail\n\r");
 8009b36:	486c      	ldr	r0, [pc, #432]	@ (8009ce8 <SVCCTL_App_Notification+0x2f4>)
 8009b38:	f001 f976 	bl	800ae28 <iprintf>
          break;
 8009b3c:	e088      	b.n	8009c50 <SVCCTL_App_Notification+0x25c>
            APP_DBG_MSG("==>> hci_le_read_phy - Success \n");
 8009b3e:	486b      	ldr	r0, [pc, #428]	@ (8009cec <SVCCTL_App_Notification+0x2f8>)
 8009b40:	f001 f9da 	bl	800aef8 <puts>
            if ((Tx_phy == TX_2M) && (Rx_phy == RX_2M))
 8009b44:	7bfb      	ldrb	r3, [r7, #15]
 8009b46:	2b02      	cmp	r3, #2
 8009b48:	d10a      	bne.n	8009b60 <SVCCTL_App_Notification+0x16c>
 8009b4a:	7bbb      	ldrb	r3, [r7, #14]
 8009b4c:	2b02      	cmp	r3, #2
 8009b4e:	d107      	bne.n	8009b60 <SVCCTL_App_Notification+0x16c>
              APP_DBG_MSG("==>> PHY Param  TX= %d, RX= %d \n\r", Tx_phy, Rx_phy);
 8009b50:	7bfb      	ldrb	r3, [r7, #15]
 8009b52:	4619      	mov	r1, r3
 8009b54:	7bbb      	ldrb	r3, [r7, #14]
 8009b56:	461a      	mov	r2, r3
 8009b58:	4865      	ldr	r0, [pc, #404]	@ (8009cf0 <SVCCTL_App_Notification+0x2fc>)
 8009b5a:	f001 f965 	bl	800ae28 <iprintf>
          break;
 8009b5e:	e077      	b.n	8009c50 <SVCCTL_App_Notification+0x25c>
              APP_DBG_MSG("==>> PHY Param  TX= %d, RX= %d \n\r", Tx_phy, Rx_phy);
 8009b60:	7bfb      	ldrb	r3, [r7, #15]
 8009b62:	4619      	mov	r1, r3
 8009b64:	7bbb      	ldrb	r3, [r7, #14]
 8009b66:	461a      	mov	r2, r3
 8009b68:	4861      	ldr	r0, [pc, #388]	@ (8009cf0 <SVCCTL_App_Notification+0x2fc>)
 8009b6a:	f001 f95d 	bl	800ae28 <iprintf>
          break;
 8009b6e:	e06f      	b.n	8009c50 <SVCCTL_App_Notification+0x25c>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 8009b70:	6a3b      	ldr	r3, [r7, #32]
 8009b72:	3301      	adds	r3, #1
 8009b74:	617b      	str	r3, [r7, #20]
          HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 8009b76:	4b52      	ldr	r3, [pc, #328]	@ (8009cc0 <SVCCTL_App_Notification+0x2cc>)
 8009b78:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	f7f7 ff2d 	bl	80019dc <HW_TS_Stop>
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE - Connection handle: 0x%x\n", p_connection_complete_event->Connection_Handle);
 8009b82:	697b      	ldr	r3, [r7, #20]
 8009b84:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009b88:	b29b      	uxth	r3, r3
 8009b8a:	4619      	mov	r1, r3
 8009b8c:	4859      	ldr	r0, [pc, #356]	@ (8009cf4 <SVCCTL_App_Notification+0x300>)
 8009b8e:	f001 f94b 	bl	800ae28 <iprintf>
                      p_connection_complete_event->Peer_Address[5],
 8009b92:	697b      	ldr	r3, [r7, #20]
 8009b94:	7a9b      	ldrb	r3, [r3, #10]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 8009b96:	4618      	mov	r0, r3
                      p_connection_complete_event->Peer_Address[4],
 8009b98:	697b      	ldr	r3, [r7, #20]
 8009b9a:	7a5b      	ldrb	r3, [r3, #9]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 8009b9c:	461c      	mov	r4, r3
                      p_connection_complete_event->Peer_Address[3],
 8009b9e:	697b      	ldr	r3, [r7, #20]
 8009ba0:	7a1b      	ldrb	r3, [r3, #8]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 8009ba2:	461d      	mov	r5, r3
                      p_connection_complete_event->Peer_Address[2],
 8009ba4:	697b      	ldr	r3, [r7, #20]
 8009ba6:	79db      	ldrb	r3, [r3, #7]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 8009ba8:	461a      	mov	r2, r3
                      p_connection_complete_event->Peer_Address[1],
 8009baa:	697b      	ldr	r3, [r7, #20]
 8009bac:	799b      	ldrb	r3, [r3, #6]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 8009bae:	4619      	mov	r1, r3
                      p_connection_complete_event->Peer_Address[0]);
 8009bb0:	697b      	ldr	r3, [r7, #20]
 8009bb2:	795b      	ldrb	r3, [r3, #5]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 8009bb4:	9302      	str	r3, [sp, #8]
 8009bb6:	9101      	str	r1, [sp, #4]
 8009bb8:	9200      	str	r2, [sp, #0]
 8009bba:	462b      	mov	r3, r5
 8009bbc:	4622      	mov	r2, r4
 8009bbe:	4601      	mov	r1, r0
 8009bc0:	484d      	ldr	r0, [pc, #308]	@ (8009cf8 <SVCCTL_App_Notification+0x304>)
 8009bc2:	f001 f931 	bl	800ae28 <iprintf>
                      p_connection_complete_event->Conn_Interval*1.25,
 8009bc6:	697b      	ldr	r3, [r7, #20]
 8009bc8:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 8009bcc:	b29b      	uxth	r3, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 8009bce:	4618      	mov	r0, r3
 8009bd0:	f7f6 fdaa 	bl	8000728 <__aeabi_i2d>
 8009bd4:	f04f 0200 	mov.w	r2, #0
 8009bd8:	4b3e      	ldr	r3, [pc, #248]	@ (8009cd4 <SVCCTL_App_Notification+0x2e0>)
 8009bda:	f7f6 fb29 	bl	8000230 <__aeabi_dmul>
 8009bde:	4602      	mov	r2, r0
 8009be0:	460b      	mov	r3, r1
 8009be2:	4610      	mov	r0, r2
 8009be4:	4619      	mov	r1, r3
                      p_connection_complete_event->Conn_Latency,
 8009be6:	697b      	ldr	r3, [r7, #20]
 8009be8:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 8009bec:	b29b      	uxth	r3, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 8009bee:	461c      	mov	r4, r3
                      p_connection_complete_event->Supervision_Timeout*10
 8009bf0:	697b      	ldr	r3, [r7, #20]
 8009bf2:	f8b3 300f 	ldrh.w	r3, [r3, #15]
 8009bf6:	b29b      	uxth	r3, r3
 8009bf8:	461a      	mov	r2, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 8009bfa:	4613      	mov	r3, r2
 8009bfc:	009b      	lsls	r3, r3, #2
 8009bfe:	4413      	add	r3, r2
 8009c00:	005b      	lsls	r3, r3, #1
 8009c02:	9301      	str	r3, [sp, #4]
 8009c04:	9400      	str	r4, [sp, #0]
 8009c06:	4602      	mov	r2, r0
 8009c08:	460b      	mov	r3, r1
 8009c0a:	4833      	ldr	r0, [pc, #204]	@ (8009cd8 <SVCCTL_App_Notification+0x2e4>)
 8009c0c:	f001 f90c 	bl	800ae28 <iprintf>
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 8009c10:	4b2b      	ldr	r3, [pc, #172]	@ (8009cc0 <SVCCTL_App_Notification+0x2cc>)
 8009c12:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8009c16:	2b04      	cmp	r3, #4
 8009c18:	d104      	bne.n	8009c24 <SVCCTL_App_Notification+0x230>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 8009c1a:	4b29      	ldr	r3, [pc, #164]	@ (8009cc0 <SVCCTL_App_Notification+0x2cc>)
 8009c1c:	2206      	movs	r2, #6
 8009c1e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 8009c22:	e003      	b.n	8009c2c <SVCCTL_App_Notification+0x238>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 8009c24:	4b26      	ldr	r3, [pc, #152]	@ (8009cc0 <SVCCTL_App_Notification+0x2cc>)
 8009c26:	2205      	movs	r2, #5
 8009c28:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 8009c2c:	697b      	ldr	r3, [r7, #20]
 8009c2e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009c32:	b29a      	uxth	r2, r3
 8009c34:	4b22      	ldr	r3, [pc, #136]	@ (8009cc0 <SVCCTL_App_Notification+0x2cc>)
 8009c36:	82da      	strh	r2, [r3, #22]
          HandleNotification.P2P_Evt_Opcode = PEER_CONN_HANDLE_EVT;
 8009c38:	4b24      	ldr	r3, [pc, #144]	@ (8009ccc <SVCCTL_App_Notification+0x2d8>)
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8009c3e:	4b20      	ldr	r3, [pc, #128]	@ (8009cc0 <SVCCTL_App_Notification+0x2cc>)
 8009c40:	8ada      	ldrh	r2, [r3, #22]
 8009c42:	4b22      	ldr	r3, [pc, #136]	@ (8009ccc <SVCCTL_App_Notification+0x2d8>)
 8009c44:	805a      	strh	r2, [r3, #2]
          P2PS_APP_Notification(&HandleNotification);
 8009c46:	4821      	ldr	r0, [pc, #132]	@ (8009ccc <SVCCTL_App_Notification+0x2d8>)
 8009c48:	f000 fc3f 	bl	800a4ca <P2PS_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 8009c4c:	e000      	b.n	8009c50 <SVCCTL_App_Notification+0x25c>
          break;
 8009c4e:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 8009c50:	e030      	b.n	8009cb4 <SVCCTL_App_Notification+0x2c0>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 8009c52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c54:	3302      	adds	r3, #2
 8009c56:	627b      	str	r3, [r7, #36]	@ 0x24
      switch (p_blecore_evt->ecode)
 8009c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c5a:	881b      	ldrh	r3, [r3, #0]
 8009c5c:	b29b      	uxth	r3, r3
 8009c5e:	f640 420e 	movw	r2, #3086	@ 0xc0e
 8009c62:	4293      	cmp	r3, r2
 8009c64:	d018      	beq.n	8009c98 <SVCCTL_App_Notification+0x2a4>
 8009c66:	f640 420e 	movw	r2, #3086	@ 0xc0e
 8009c6a:	4293      	cmp	r3, r2
 8009c6c:	dc21      	bgt.n	8009cb2 <SVCCTL_App_Notification+0x2be>
 8009c6e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009c72:	d009      	beq.n	8009c88 <SVCCTL_App_Notification+0x294>
 8009c74:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009c78:	dc1b      	bgt.n	8009cb2 <SVCCTL_App_Notification+0x2be>
 8009c7a:	2b04      	cmp	r3, #4
 8009c7c:	d015      	beq.n	8009caa <SVCCTL_App_Notification+0x2b6>
 8009c7e:	f240 4207 	movw	r2, #1031	@ 0x407
 8009c82:	4293      	cmp	r3, r2
 8009c84:	d004      	beq.n	8009c90 <SVCCTL_App_Notification+0x29c>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8009c86:	e014      	b.n	8009cb2 <SVCCTL_App_Notification+0x2be>
          mutex = 1;
 8009c88:	4b1c      	ldr	r3, [pc, #112]	@ (8009cfc <SVCCTL_App_Notification+0x308>)
 8009c8a:	2201      	movs	r2, #1
 8009c8c:	701a      	strb	r2, [r3, #0]
          break;
 8009c8e:	e00d      	b.n	8009cac <SVCCTL_App_Notification+0x2b8>
          APP_DBG_MSG(">>== ACI_GAP_PROC_COMPLETE_VSEVT_CODE \r");
 8009c90:	481b      	ldr	r0, [pc, #108]	@ (8009d00 <SVCCTL_App_Notification+0x30c>)
 8009c92:	f001 f8c9 	bl	800ae28 <iprintf>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 8009c96:	e009      	b.n	8009cac <SVCCTL_App_Notification+0x2b8>
          APP_DBG_MSG(">>== ACI_GATT_INDICATION_VSEVT_CODE \r");
 8009c98:	481a      	ldr	r0, [pc, #104]	@ (8009d04 <SVCCTL_App_Notification+0x310>)
 8009c9a:	f001 f8c5 	bl	800ae28 <iprintf>
          aci_gatt_confirm_indication(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 8009c9e:	4b08      	ldr	r3, [pc, #32]	@ (8009cc0 <SVCCTL_App_Notification+0x2cc>)
 8009ca0:	8adb      	ldrh	r3, [r3, #22]
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	f7fd fd77 	bl	8007796 <aci_gatt_confirm_indication>
        break;
 8009ca8:	e000      	b.n	8009cac <SVCCTL_App_Notification+0x2b8>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 8009caa:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8009cac:	e001      	b.n	8009cb2 <SVCCTL_App_Notification+0x2be>
      break;
 8009cae:	bf00      	nop
 8009cb0:	e000      	b.n	8009cb4 <SVCCTL_App_Notification+0x2c0>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8009cb2:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 8009cb4:	2301      	movs	r3, #1
}
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	3730      	adds	r7, #48	@ 0x30
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	bdb0      	pop	{r4, r5, r7, pc}
 8009cbe:	bf00      	nop
 8009cc0:	20000384 	.word	0x20000384
 8009cc4:	0800c0bc 	.word	0x0800c0bc
 8009cc8:	0800c0e8 	.word	0x0800c0e8
 8009ccc:	2000040c 	.word	0x2000040c
 8009cd0:	0800c124 	.word	0x0800c124
 8009cd4:	3ff40000 	.word	0x3ff40000
 8009cd8:	0800c158 	.word	0x0800c158
 8009cdc:	0800c1c4 	.word	0x0800c1c4
 8009ce0:	0800c1f4 	.word	0x0800c1f4
 8009ce4:	0800c200 	.word	0x0800c200
 8009ce8:	0800c20c 	.word	0x0800c20c
 8009cec:	0800c22c 	.word	0x0800c22c
 8009cf0:	0800c24c 	.word	0x0800c24c
 8009cf4:	0800c270 	.word	0x0800c270
 8009cf8:	0800c2b8 	.word	0x0800c2b8
 8009cfc:	20000411 	.word	0x20000411
 8009d00:	0800c308 	.word	0x0800c308
 8009d04:	0800c330 	.word	0x0800c330

08009d08 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b082      	sub	sp, #8
 8009d0c:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 8009d0e:	4b06      	ldr	r3, [pc, #24]	@ (8009d28 <Ble_Tl_Init+0x20>)
 8009d10:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 8009d12:	4b06      	ldr	r3, [pc, #24]	@ (8009d2c <Ble_Tl_Init+0x24>)
 8009d14:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 8009d16:	463b      	mov	r3, r7
 8009d18:	4619      	mov	r1, r3
 8009d1a:	4805      	ldr	r0, [pc, #20]	@ (8009d30 <Ble_Tl_Init+0x28>)
 8009d1c:	f7fe fbc8 	bl	80084b0 <hci_init>

  return;
 8009d20:	bf00      	nop
}
 8009d22:	3708      	adds	r7, #8
 8009d24:	46bd      	mov	sp, r7
 8009d26:	bd80      	pop	{r7, pc}
 8009d28:	200300d8 	.word	0x200300d8
 8009d2c:	0800a45d 	.word	0x0800a45d
 8009d30:	0800a425 	.word	0x0800a425

08009d34 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 8009d34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d36:	b08d      	sub	sp, #52	@ 0x34
 8009d38:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8009d3e:	2392      	movs	r3, #146	@ 0x92
 8009d40:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init*/

  APP_DBG_MSG("==>> Start Ble_Hci_Gap_Gatt_Init function\n");
 8009d42:	48a5      	ldr	r0, [pc, #660]	@ (8009fd8 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8009d44:	f001 f8d8 	bl	800aef8 <puts>

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 8009d48:	f7fd feba 	bl	8007ac0 <hci_reset>
 8009d4c:	4603      	mov	r3, r0
 8009d4e:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8009d50:	7dfb      	ldrb	r3, [r7, #23]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d005      	beq.n	8009d62 <Ble_Hci_Gap_Gatt_Init+0x2e>
  {
    APP_DBG_MSG("  Fail   : hci_reset command, result: 0x%x \n", ret);
 8009d56:	7dfb      	ldrb	r3, [r7, #23]
 8009d58:	4619      	mov	r1, r3
 8009d5a:	48a0      	ldr	r0, [pc, #640]	@ (8009fdc <Ble_Hci_Gap_Gatt_Init+0x2a8>)
 8009d5c:	f001 f864 	bl	800ae28 <iprintf>
 8009d60:	e002      	b.n	8009d68 <Ble_Hci_Gap_Gatt_Init+0x34>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_reset command\n");
 8009d62:	489f      	ldr	r0, [pc, #636]	@ (8009fe0 <Ble_Hci_Gap_Gatt_Init+0x2ac>)
 8009d64:	f001 f8c8 	bl	800aef8 <puts>
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 8009d68:	f000 fa40 	bl	800a1ec <BleGetBdAddress>
 8009d6c:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 8009d6e:	693a      	ldr	r2, [r7, #16]
 8009d70:	2106      	movs	r1, #6
 8009d72:	2000      	movs	r0, #0
 8009d74:	f7fd fd64 	bl	8007840 <aci_hal_write_config_data>
 8009d78:	4603      	mov	r3, r0
 8009d7a:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8009d7c:	7dfb      	ldrb	r3, [r7, #23]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d005      	beq.n	8009d8e <Ble_Hci_Gap_Gatt_Init+0x5a>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET, result: 0x%x \n", ret);
 8009d82:	7dfb      	ldrb	r3, [r7, #23]
 8009d84:	4619      	mov	r1, r3
 8009d86:	4897      	ldr	r0, [pc, #604]	@ (8009fe4 <Ble_Hci_Gap_Gatt_Init+0x2b0>)
 8009d88:	f001 f84e 	bl	800ae28 <iprintf>
 8009d8c:	e021      	b.n	8009dd2 <Ble_Hci_Gap_Gatt_Init+0x9e>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET\n");
 8009d8e:	4896      	ldr	r0, [pc, #600]	@ (8009fe8 <Ble_Hci_Gap_Gatt_Init+0x2b4>)
 8009d90:	f001 f8b2 	bl	800aef8 <puts>
    APP_DBG_MSG("  Public Bluetooth Address: %02x:%02x:%02x:%02x:%02x:%02x\n",p_bd_addr[5],p_bd_addr[4],p_bd_addr[3],p_bd_addr[2],p_bd_addr[1],p_bd_addr[0]);
 8009d94:	693b      	ldr	r3, [r7, #16]
 8009d96:	3305      	adds	r3, #5
 8009d98:	781b      	ldrb	r3, [r3, #0]
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	693b      	ldr	r3, [r7, #16]
 8009d9e:	3304      	adds	r3, #4
 8009da0:	781b      	ldrb	r3, [r3, #0]
 8009da2:	461c      	mov	r4, r3
 8009da4:	693b      	ldr	r3, [r7, #16]
 8009da6:	3303      	adds	r3, #3
 8009da8:	781b      	ldrb	r3, [r3, #0]
 8009daa:	461d      	mov	r5, r3
 8009dac:	693b      	ldr	r3, [r7, #16]
 8009dae:	3302      	adds	r3, #2
 8009db0:	781b      	ldrb	r3, [r3, #0]
 8009db2:	461a      	mov	r2, r3
 8009db4:	693b      	ldr	r3, [r7, #16]
 8009db6:	3301      	adds	r3, #1
 8009db8:	781b      	ldrb	r3, [r3, #0]
 8009dba:	4619      	mov	r1, r3
 8009dbc:	693b      	ldr	r3, [r7, #16]
 8009dbe:	781b      	ldrb	r3, [r3, #0]
 8009dc0:	9302      	str	r3, [sp, #8]
 8009dc2:	9101      	str	r1, [sp, #4]
 8009dc4:	9200      	str	r2, [sp, #0]
 8009dc6:	462b      	mov	r3, r5
 8009dc8:	4622      	mov	r2, r4
 8009dca:	4601      	mov	r1, r0
 8009dcc:	4887      	ldr	r0, [pc, #540]	@ (8009fec <Ble_Hci_Gap_Gatt_Init+0x2b8>)
 8009dce:	f001 f82b 	bl	800ae28 <iprintf>
  }

#if (CFG_BLE_ADDRESS_TYPE == GAP_PUBLIC_ADDR)
  /* BLE MAC in ADV Packet */
  a_ManufData[ sizeof(a_ManufData)-6] = p_bd_addr[5];
 8009dd2:	693b      	ldr	r3, [r7, #16]
 8009dd4:	3305      	adds	r3, #5
 8009dd6:	781a      	ldrb	r2, [r3, #0]
 8009dd8:	4b85      	ldr	r3, [pc, #532]	@ (8009ff0 <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 8009dda:	721a      	strb	r2, [r3, #8]
  a_ManufData[ sizeof(a_ManufData)-5] = p_bd_addr[4];
 8009ddc:	693b      	ldr	r3, [r7, #16]
 8009dde:	3304      	adds	r3, #4
 8009de0:	781a      	ldrb	r2, [r3, #0]
 8009de2:	4b83      	ldr	r3, [pc, #524]	@ (8009ff0 <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 8009de4:	725a      	strb	r2, [r3, #9]
  a_ManufData[ sizeof(a_ManufData)-4] = p_bd_addr[3];
 8009de6:	693b      	ldr	r3, [r7, #16]
 8009de8:	3303      	adds	r3, #3
 8009dea:	781a      	ldrb	r2, [r3, #0]
 8009dec:	4b80      	ldr	r3, [pc, #512]	@ (8009ff0 <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 8009dee:	729a      	strb	r2, [r3, #10]
  a_ManufData[ sizeof(a_ManufData)-3] = p_bd_addr[2];
 8009df0:	693b      	ldr	r3, [r7, #16]
 8009df2:	3302      	adds	r3, #2
 8009df4:	781a      	ldrb	r2, [r3, #0]
 8009df6:	4b7e      	ldr	r3, [pc, #504]	@ (8009ff0 <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 8009df8:	72da      	strb	r2, [r3, #11]
  a_ManufData[ sizeof(a_ManufData)-2] = p_bd_addr[1];
 8009dfa:	693b      	ldr	r3, [r7, #16]
 8009dfc:	3301      	adds	r3, #1
 8009dfe:	781a      	ldrb	r2, [r3, #0]
 8009e00:	4b7b      	ldr	r3, [pc, #492]	@ (8009ff0 <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 8009e02:	731a      	strb	r2, [r3, #12]
  a_ManufData[ sizeof(a_ManufData)-1] = p_bd_addr[0];
 8009e04:	693b      	ldr	r3, [r7, #16]
 8009e06:	781a      	ldrb	r2, [r3, #0]
 8009e08:	4b79      	ldr	r3, [pc, #484]	@ (8009ff0 <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 8009e0a:	735a      	strb	r2, [r3, #13]
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive IRK and DHK(Legacy)
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 8009e0c:	4a79      	ldr	r2, [pc, #484]	@ (8009ff4 <Ble_Hci_Gap_Gatt_Init+0x2c0>)
 8009e0e:	2110      	movs	r1, #16
 8009e10:	2018      	movs	r0, #24
 8009e12:	f7fd fd15 	bl	8007840 <aci_hal_write_config_data>
 8009e16:	4603      	mov	r3, r0
 8009e18:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8009e1a:	7dfb      	ldrb	r3, [r7, #23]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d005      	beq.n	8009e2c <Ble_Hci_Gap_Gatt_Init+0xf8>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET, result: 0x%x \n", ret);
 8009e20:	7dfb      	ldrb	r3, [r7, #23]
 8009e22:	4619      	mov	r1, r3
 8009e24:	4874      	ldr	r0, [pc, #464]	@ (8009ff8 <Ble_Hci_Gap_Gatt_Init+0x2c4>)
 8009e26:	f000 ffff 	bl	800ae28 <iprintf>
 8009e2a:	e002      	b.n	8009e32 <Ble_Hci_Gap_Gatt_Init+0xfe>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET\n");
 8009e2c:	4873      	ldr	r0, [pc, #460]	@ (8009ffc <Ble_Hci_Gap_Gatt_Init+0x2c8>)
 8009e2e:	f001 f863 	bl	800aef8 <puts>
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 8009e32:	4a73      	ldr	r2, [pc, #460]	@ (800a000 <Ble_Hci_Gap_Gatt_Init+0x2cc>)
 8009e34:	2110      	movs	r1, #16
 8009e36:	2008      	movs	r0, #8
 8009e38:	f7fd fd02 	bl	8007840 <aci_hal_write_config_data>
 8009e3c:	4603      	mov	r3, r0
 8009e3e:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8009e40:	7dfb      	ldrb	r3, [r7, #23]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d005      	beq.n	8009e52 <Ble_Hci_Gap_Gatt_Init+0x11e>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET, result: 0x%x \n", ret);
 8009e46:	7dfb      	ldrb	r3, [r7, #23]
 8009e48:	4619      	mov	r1, r3
 8009e4a:	486e      	ldr	r0, [pc, #440]	@ (800a004 <Ble_Hci_Gap_Gatt_Init+0x2d0>)
 8009e4c:	f000 ffec 	bl	800ae28 <iprintf>
 8009e50:	e002      	b.n	8009e58 <Ble_Hci_Gap_Gatt_Init+0x124>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET\n");
 8009e52:	486d      	ldr	r0, [pc, #436]	@ (800a008 <Ble_Hci_Gap_Gatt_Init+0x2d4>)
 8009e54:	f001 f850 	bl	800aef8 <puts>
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 8009e58:	2118      	movs	r1, #24
 8009e5a:	2001      	movs	r0, #1
 8009e5c:	f7fd fd75 	bl	800794a <aci_hal_set_tx_power_level>
 8009e60:	4603      	mov	r3, r0
 8009e62:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8009e64:	7dfb      	ldrb	r3, [r7, #23]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d005      	beq.n	8009e76 <Ble_Hci_Gap_Gatt_Init+0x142>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_tx_power_level command, result: 0x%x \n", ret);
 8009e6a:	7dfb      	ldrb	r3, [r7, #23]
 8009e6c:	4619      	mov	r1, r3
 8009e6e:	4867      	ldr	r0, [pc, #412]	@ (800a00c <Ble_Hci_Gap_Gatt_Init+0x2d8>)
 8009e70:	f000 ffda 	bl	800ae28 <iprintf>
 8009e74:	e002      	b.n	8009e7c <Ble_Hci_Gap_Gatt_Init+0x148>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_tx_power_level command\n");
 8009e76:	4866      	ldr	r0, [pc, #408]	@ (800a010 <Ble_Hci_Gap_Gatt_Init+0x2dc>)
 8009e78:	f001 f83e 	bl	800aef8 <puts>
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 8009e7c:	f7fd f9df 	bl	800723e <aci_gatt_init>
 8009e80:	4603      	mov	r3, r0
 8009e82:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8009e84:	7dfb      	ldrb	r3, [r7, #23]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d005      	beq.n	8009e96 <Ble_Hci_Gap_Gatt_Init+0x162>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_init command, result: 0x%x \n", ret);
 8009e8a:	7dfb      	ldrb	r3, [r7, #23]
 8009e8c:	4619      	mov	r1, r3
 8009e8e:	4861      	ldr	r0, [pc, #388]	@ (800a014 <Ble_Hci_Gap_Gatt_Init+0x2e0>)
 8009e90:	f000 ffca 	bl	800ae28 <iprintf>
 8009e94:	e002      	b.n	8009e9c <Ble_Hci_Gap_Gatt_Init+0x168>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_init command\n");
 8009e96:	4860      	ldr	r0, [pc, #384]	@ (800a018 <Ble_Hci_Gap_Gatt_Init+0x2e4>)
 8009e98:	f001 f82e 	bl	800aef8 <puts>
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 8009ea0:	7bfb      	ldrb	r3, [r7, #15]
 8009ea2:	f043 0301 	orr.w	r3, r3, #1
 8009ea6:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 8009ea8:	7bfb      	ldrb	r3, [r7, #15]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d02b      	beq.n	8009f06 <Ble_Hci_Gap_Gatt_Init+0x1d2>
  {
    const char *name = "P2PSRV1";
 8009eae:	4b5b      	ldr	r3, [pc, #364]	@ (800a01c <Ble_Hci_Gap_Gatt_Init+0x2e8>)
 8009eb0:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 8009eb2:	1dba      	adds	r2, r7, #6
 8009eb4:	7bf8      	ldrb	r0, [r7, #15]
 8009eb6:	1cbb      	adds	r3, r7, #2
 8009eb8:	9301      	str	r3, [sp, #4]
 8009eba:	1d3b      	adds	r3, r7, #4
 8009ebc:	9300      	str	r3, [sp, #0]
 8009ebe:	4613      	mov	r3, r2
 8009ec0:	2207      	movs	r2, #7
 8009ec2:	2100      	movs	r1, #0
 8009ec4:	f7fd f878 	bl	8006fb8 <aci_gap_init>
 8009ec8:	4603      	mov	r3, r0
 8009eca:	75fb      	strb	r3, [r7, #23]
                       APPBLE_GAP_DEVICE_NAME_LENGTH,
                       &gap_service_handle,
                       &gap_dev_name_char_handle,
                       &gap_appearance_char_handle);

    if (ret != BLE_STATUS_SUCCESS)
 8009ecc:	7dfb      	ldrb	r3, [r7, #23]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d005      	beq.n	8009ede <Ble_Hci_Gap_Gatt_Init+0x1aa>
    {
      APP_DBG_MSG("  Fail   : aci_gap_init command, result: 0x%x \n", ret);
 8009ed2:	7dfb      	ldrb	r3, [r7, #23]
 8009ed4:	4619      	mov	r1, r3
 8009ed6:	4852      	ldr	r0, [pc, #328]	@ (800a020 <Ble_Hci_Gap_Gatt_Init+0x2ec>)
 8009ed8:	f000 ffa6 	bl	800ae28 <iprintf>
 8009edc:	e002      	b.n	8009ee4 <Ble_Hci_Gap_Gatt_Init+0x1b0>
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
 8009ede:	4851      	ldr	r0, [pc, #324]	@ (800a024 <Ble_Hci_Gap_Gatt_Init+0x2f0>)
 8009ee0:	f001 f80a 	bl	800aef8 <puts>
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 8009ee4:	88fc      	ldrh	r4, [r7, #6]
 8009ee6:	88bd      	ldrh	r5, [r7, #4]
 8009ee8:	68b8      	ldr	r0, [r7, #8]
 8009eea:	f7f6 f949 	bl	8000180 <strlen>
 8009eee:	4603      	mov	r3, r0
 8009ef0:	b2da      	uxtb	r2, r3
 8009ef2:	68bb      	ldr	r3, [r7, #8]
 8009ef4:	9300      	str	r3, [sp, #0]
 8009ef6:	4613      	mov	r3, r2
 8009ef8:	2200      	movs	r2, #0
 8009efa:	4629      	mov	r1, r5
 8009efc:	4620      	mov	r0, r4
 8009efe:	f7fd fba1 	bl	8007644 <aci_gatt_update_char_value>
 8009f02:	4603      	mov	r3, r0
 8009f04:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 8009f06:	88f8      	ldrh	r0, [r7, #6]
 8009f08:	8879      	ldrh	r1, [r7, #2]
 8009f0a:	463b      	mov	r3, r7
 8009f0c:	9300      	str	r3, [sp, #0]
 8009f0e:	2302      	movs	r3, #2
 8009f10:	2200      	movs	r2, #0
 8009f12:	f7fd fb97 	bl	8007644 <aci_gatt_update_char_value>
 8009f16:	4603      	mov	r3, r0
 8009f18:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 8009f1a:	2202      	movs	r2, #2
 8009f1c:	2102      	movs	r1, #2
 8009f1e:	2000      	movs	r0, #0
 8009f20:	f7fd fe70 	bl	8007c04 <hci_le_set_default_phy>
 8009f24:	4603      	mov	r3, r0
 8009f26:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8009f28:	7dfb      	ldrb	r3, [r7, #23]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d005      	beq.n	8009f3a <Ble_Hci_Gap_Gatt_Init+0x206>
  {
    APP_DBG_MSG("  Fail   : hci_le_set_default_phy command, result: 0x%x \n", ret);
 8009f2e:	7dfb      	ldrb	r3, [r7, #23]
 8009f30:	4619      	mov	r1, r3
 8009f32:	483d      	ldr	r0, [pc, #244]	@ (800a028 <Ble_Hci_Gap_Gatt_Init+0x2f4>)
 8009f34:	f000 ff78 	bl	800ae28 <iprintf>
 8009f38:	e002      	b.n	8009f40 <Ble_Hci_Gap_Gatt_Init+0x20c>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_le_set_default_phy command\n");
 8009f3a:	483c      	ldr	r0, [pc, #240]	@ (800a02c <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 8009f3c:	f000 ffdc 	bl	800aef8 <puts>
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 8009f40:	4b3b      	ldr	r3, [pc, #236]	@ (800a030 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 8009f42:	2201      	movs	r2, #1
 8009f44:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 8009f46:	4b3a      	ldr	r3, [pc, #232]	@ (800a030 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 8009f48:	781b      	ldrb	r3, [r3, #0]
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	f7fc ff1c 	bl	8006d88 <aci_gap_set_io_capability>
 8009f50:	4603      	mov	r3, r0
 8009f52:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8009f54:	7dfb      	ldrb	r3, [r7, #23]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d005      	beq.n	8009f66 <Ble_Hci_Gap_Gatt_Init+0x232>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_io_capability command, result: 0x%x \n", ret);
 8009f5a:	7dfb      	ldrb	r3, [r7, #23]
 8009f5c:	4619      	mov	r1, r3
 8009f5e:	4835      	ldr	r0, [pc, #212]	@ (800a034 <Ble_Hci_Gap_Gatt_Init+0x300>)
 8009f60:	f000 ff62 	bl	800ae28 <iprintf>
 8009f64:	e002      	b.n	8009f6c <Ble_Hci_Gap_Gatt_Init+0x238>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_io_capability command\n");
 8009f66:	4834      	ldr	r0, [pc, #208]	@ (800a038 <Ble_Hci_Gap_Gatt_Init+0x304>)
 8009f68:	f000 ffc6 	bl	800aef8 <puts>
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 8009f6c:	4b30      	ldr	r3, [pc, #192]	@ (800a030 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 8009f6e:	2201      	movs	r2, #1
 8009f70:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 8009f72:	4b2f      	ldr	r3, [pc, #188]	@ (800a030 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 8009f74:	2208      	movs	r2, #8
 8009f76:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 8009f78:	4b2d      	ldr	r3, [pc, #180]	@ (800a030 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 8009f7a:	2210      	movs	r2, #16
 8009f7c:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 8009f7e:	4b2c      	ldr	r3, [pc, #176]	@ (800a030 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 8009f80:	2200      	movs	r2, #0
 8009f82:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 8009f84:	4b2a      	ldr	r3, [pc, #168]	@ (800a030 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 8009f86:	4a2d      	ldr	r2, [pc, #180]	@ (800a03c <Ble_Hci_Gap_Gatt_Init+0x308>)
 8009f88:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 8009f8a:	4b29      	ldr	r3, [pc, #164]	@ (800a030 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 8009f8c:	2201      	movs	r2, #1
 8009f8e:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 8009f90:	4b27      	ldr	r3, [pc, #156]	@ (800a030 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 8009f92:	789c      	ldrb	r4, [r3, #2]
 8009f94:	4b26      	ldr	r3, [pc, #152]	@ (800a030 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 8009f96:	785d      	ldrb	r5, [r3, #1]
 8009f98:	4b25      	ldr	r3, [pc, #148]	@ (800a030 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 8009f9a:	791b      	ldrb	r3, [r3, #4]
 8009f9c:	4a24      	ldr	r2, [pc, #144]	@ (800a030 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 8009f9e:	7952      	ldrb	r2, [r2, #5]
 8009fa0:	4923      	ldr	r1, [pc, #140]	@ (800a030 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 8009fa2:	78c9      	ldrb	r1, [r1, #3]
 8009fa4:	4822      	ldr	r0, [pc, #136]	@ (800a030 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 8009fa6:	6880      	ldr	r0, [r0, #8]
 8009fa8:	2600      	movs	r6, #0
 8009faa:	9604      	str	r6, [sp, #16]
 8009fac:	9003      	str	r0, [sp, #12]
 8009fae:	9102      	str	r1, [sp, #8]
 8009fb0:	9201      	str	r2, [sp, #4]
 8009fb2:	9300      	str	r3, [sp, #0]
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	2201      	movs	r2, #1
 8009fb8:	4629      	mov	r1, r5
 8009fba:	4620      	mov	r0, r4
 8009fbc:	f7fc ff38 	bl	8006e30 <aci_gap_set_authentication_requirement>
 8009fc0:	4603      	mov	r3, r0
 8009fc2:	75fb      	strb	r3, [r7, #23]
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin,
                                               CFG_IDENTITY_ADDRESS);
  if (ret != BLE_STATUS_SUCCESS)
 8009fc4:	7dfb      	ldrb	r3, [r7, #23]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d03c      	beq.n	800a044 <Ble_Hci_Gap_Gatt_Init+0x310>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_authentication_requirement command, result: 0x%x \n", ret);
 8009fca:	7dfb      	ldrb	r3, [r7, #23]
 8009fcc:	4619      	mov	r1, r3
 8009fce:	481c      	ldr	r0, [pc, #112]	@ (800a040 <Ble_Hci_Gap_Gatt_Init+0x30c>)
 8009fd0:	f000 ff2a 	bl	800ae28 <iprintf>
 8009fd4:	e039      	b.n	800a04a <Ble_Hci_Gap_Gatt_Init+0x316>
 8009fd6:	bf00      	nop
 8009fd8:	0800c358 	.word	0x0800c358
 8009fdc:	0800c384 	.word	0x0800c384
 8009fe0:	0800c3b4 	.word	0x0800c3b4
 8009fe4:	0800c3d4 	.word	0x0800c3d4
 8009fe8:	0800c430 	.word	0x0800c430
 8009fec:	0800c47c 	.word	0x0800c47c
 8009ff0:	2000001c 	.word	0x2000001c
 8009ff4:	0800cd6c 	.word	0x0800cd6c
 8009ff8:	0800c4b8 	.word	0x0800c4b8
 8009ffc:	0800c510 	.word	0x0800c510
 800a000:	0800cd7c 	.word	0x0800cd7c
 800a004:	0800c558 	.word	0x0800c558
 800a008:	0800c5b0 	.word	0x0800c5b0
 800a00c:	0800c5f8 	.word	0x0800c5f8
 800a010:	0800c638 	.word	0x0800c638
 800a014:	0800c668 	.word	0x0800c668
 800a018:	0800c69c 	.word	0x0800c69c
 800a01c:	0800c6c0 	.word	0x0800c6c0
 800a020:	0800c6c8 	.word	0x0800c6c8
 800a024:	0800c6f8 	.word	0x0800c6f8
 800a028:	0800c718 	.word	0x0800c718
 800a02c:	0800c754 	.word	0x0800c754
 800a030:	20000384 	.word	0x20000384
 800a034:	0800c780 	.word	0x0800c780
 800a038:	0800c7c0 	.word	0x0800c7c0
 800a03c:	0001b207 	.word	0x0001b207
 800a040:	0800c7f0 	.word	0x0800c7f0
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_authentication_requirement command\n");
 800a044:	480e      	ldr	r0, [pc, #56]	@ (800a080 <Ble_Hci_Gap_Gatt_Init+0x34c>)
 800a046:	f000 ff57 	bl	800aef8 <puts>
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 800a04a:	4b0e      	ldr	r3, [pc, #56]	@ (800a084 <Ble_Hci_Gap_Gatt_Init+0x350>)
 800a04c:	789b      	ldrb	r3, [r3, #2]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d00f      	beq.n	800a072 <Ble_Hci_Gap_Gatt_Init+0x33e>
  {
    ret = aci_gap_configure_whitelist();
 800a052:	f7fd f8d0 	bl	80071f6 <aci_gap_configure_filter_accept_list>
 800a056:	4603      	mov	r3, r0
 800a058:	75fb      	strb	r3, [r7, #23]
    if (ret != BLE_STATUS_SUCCESS)
 800a05a:	7dfb      	ldrb	r3, [r7, #23]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d005      	beq.n	800a06c <Ble_Hci_Gap_Gatt_Init+0x338>
    {
      APP_DBG_MSG("  Fail   : aci_gap_configure_whitelist command, result: 0x%x \n", ret);
 800a060:	7dfb      	ldrb	r3, [r7, #23]
 800a062:	4619      	mov	r1, r3
 800a064:	4808      	ldr	r0, [pc, #32]	@ (800a088 <Ble_Hci_Gap_Gatt_Init+0x354>)
 800a066:	f000 fedf 	bl	800ae28 <iprintf>
 800a06a:	e002      	b.n	800a072 <Ble_Hci_Gap_Gatt_Init+0x33e>
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
 800a06c:	4807      	ldr	r0, [pc, #28]	@ (800a08c <Ble_Hci_Gap_Gatt_Init+0x358>)
 800a06e:	f000 ff43 	bl	800aef8 <puts>
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
 800a072:	4807      	ldr	r0, [pc, #28]	@ (800a090 <Ble_Hci_Gap_Gatt_Init+0x35c>)
 800a074:	f000 fed8 	bl	800ae28 <iprintf>
}
 800a078:	bf00      	nop
 800a07a:	371c      	adds	r7, #28
 800a07c:	46bd      	mov	sp, r7
 800a07e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a080:	0800c83c 	.word	0x0800c83c
 800a084:	20000384 	.word	0x20000384
 800a088:	0800c878 	.word	0x0800c878
 800a08c:	0800c8b8 	.word	0x0800c8b8
 800a090:	0800c8e8 	.word	0x0800c8e8

0800a094 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 800a094:	b580      	push	{r7, lr}
 800a096:	b08c      	sub	sp, #48	@ 0x30
 800a098:	af08      	add	r7, sp, #32
 800a09a:	4603      	mov	r3, r0
 800a09c:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800a09e:	2392      	movs	r3, #146	@ 0x92
 800a0a0:	72fb      	strb	r3, [r7, #11]
  uint16_t Min_Inter, Max_Inter;

  if (NewStatus == APP_BLE_FAST_ADV)
 800a0a2:	79fb      	ldrb	r3, [r7, #7]
 800a0a4:	2b01      	cmp	r3, #1
 800a0a6:	d106      	bne.n	800a0b6 <Adv_Request+0x22>
  {
    Min_Inter = AdvIntervalMin;
 800a0a8:	4b41      	ldr	r3, [pc, #260]	@ (800a1b0 <Adv_Request+0x11c>)
 800a0aa:	881b      	ldrh	r3, [r3, #0]
 800a0ac:	81fb      	strh	r3, [r7, #14]
    Max_Inter = AdvIntervalMax;
 800a0ae:	4b41      	ldr	r3, [pc, #260]	@ (800a1b4 <Adv_Request+0x120>)
 800a0b0:	881b      	ldrh	r3, [r3, #0]
 800a0b2:	81bb      	strh	r3, [r7, #12]
 800a0b4:	e005      	b.n	800a0c2 <Adv_Request+0x2e>
  }
  else
  {
    Min_Inter = CFG_LP_CONN_ADV_INTERVAL_MIN;
 800a0b6:	f44f 63c8 	mov.w	r3, #1600	@ 0x640
 800a0ba:	81fb      	strh	r3, [r7, #14]
    Max_Inter = CFG_LP_CONN_ADV_INTERVAL_MAX;
 800a0bc:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 800a0c0:	81bb      	strh	r3, [r7, #12]

  /**
   * Stop the timer, it will be restarted for a new shot
   * It does not hurt if the timer was not running
   */
  HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 800a0c2:	4b3d      	ldr	r3, [pc, #244]	@ (800a1b8 <Adv_Request+0x124>)
 800a0c4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a0c8:	4618      	mov	r0, r3
 800a0ca:	f7f7 fc87 	bl	80019dc <HW_TS_Stop>

  if ((NewStatus == APP_BLE_LP_ADV)
 800a0ce:	79fb      	ldrb	r3, [r7, #7]
 800a0d0:	2b02      	cmp	r3, #2
 800a0d2:	d119      	bne.n	800a108 <Adv_Request+0x74>
      && ((BleApplicationContext.Device_Connection_Status == APP_BLE_FAST_ADV)
 800a0d4:	4b38      	ldr	r3, [pc, #224]	@ (800a1b8 <Adv_Request+0x124>)
 800a0d6:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800a0da:	2b01      	cmp	r3, #1
 800a0dc:	d004      	beq.n	800a0e8 <Adv_Request+0x54>
          || (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_ADV)))
 800a0de:	4b36      	ldr	r3, [pc, #216]	@ (800a1b8 <Adv_Request+0x124>)
 800a0e0:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800a0e4:	2b02      	cmp	r3, #2
 800a0e6:	d10f      	bne.n	800a108 <Adv_Request+0x74>
  {
    /* Connection in ADVERTISE mode have to stop the current advertising */
    ret = aci_gap_set_non_discoverable();
 800a0e8:	f7fc fd30 	bl	8006b4c <aci_gap_set_non_discoverable>
 800a0ec:	4603      	mov	r3, r0
 800a0ee:	72fb      	strb	r3, [r7, #11]
    if (ret != BLE_STATUS_SUCCESS)
 800a0f0:	7afb      	ldrb	r3, [r7, #11]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d005      	beq.n	800a102 <Adv_Request+0x6e>
    {
      APP_DBG_MSG("==>> aci_gap_set_non_discoverable - Stop Advertising Failed , result: %d \n", ret);
 800a0f6:	7afb      	ldrb	r3, [r7, #11]
 800a0f8:	4619      	mov	r1, r3
 800a0fa:	4830      	ldr	r0, [pc, #192]	@ (800a1bc <Adv_Request+0x128>)
 800a0fc:	f000 fe94 	bl	800ae28 <iprintf>
 800a100:	e002      	b.n	800a108 <Adv_Request+0x74>
    }
    else
    {
      APP_DBG_MSG("==>> aci_gap_set_non_discoverable - Successfully Stopped Advertising \n");
 800a102:	482f      	ldr	r0, [pc, #188]	@ (800a1c0 <Adv_Request+0x12c>)
 800a104:	f000 fef8 	bl	800aef8 <puts>
    }
  }

  BleApplicationContext.Device_Connection_Status = NewStatus;
 800a108:	4a2b      	ldr	r2, [pc, #172]	@ (800a1b8 <Adv_Request+0x124>)
 800a10a:	79fb      	ldrb	r3, [r7, #7]
 800a10c:	f882 3080 	strb.w	r3, [r2, #128]	@ 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_IND,
 800a110:	4b29      	ldr	r3, [pc, #164]	@ (800a1b8 <Adv_Request+0x124>)
 800a112:	7e1b      	ldrb	r3, [r3, #24]
 800a114:	89ba      	ldrh	r2, [r7, #12]
 800a116:	89f9      	ldrh	r1, [r7, #14]
 800a118:	2000      	movs	r0, #0
 800a11a:	9006      	str	r0, [sp, #24]
 800a11c:	2000      	movs	r0, #0
 800a11e:	9005      	str	r0, [sp, #20]
 800a120:	4828      	ldr	r0, [pc, #160]	@ (800a1c4 <Adv_Request+0x130>)
 800a122:	9004      	str	r0, [sp, #16]
 800a124:	9303      	str	r3, [sp, #12]
 800a126:	4b28      	ldr	r3, [pc, #160]	@ (800a1c8 <Adv_Request+0x134>)
 800a128:	9302      	str	r3, [sp, #8]
 800a12a:	2308      	movs	r3, #8
 800a12c:	9301      	str	r3, [sp, #4]
 800a12e:	2300      	movs	r3, #0
 800a130:	9300      	str	r3, [sp, #0]
 800a132:	2300      	movs	r3, #0
 800a134:	2000      	movs	r0, #0
 800a136:	f7fc fd2d 	bl	8006b94 <aci_gap_set_discoverable>
 800a13a:	4603      	mov	r3, r0
 800a13c:	72fb      	strb	r3, [r7, #11]
                                 (uint8_t*) &a_LocalName,
                                 BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen,
                                 BleApplicationContext.BleApplicationContext_legacy.advtServUUID,
                                 0,
                                 0);
  if (ret != BLE_STATUS_SUCCESS)
 800a13e:	7afb      	ldrb	r3, [r7, #11]
 800a140:	2b00      	cmp	r3, #0
 800a142:	d005      	beq.n	800a150 <Adv_Request+0xbc>
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - fail, result: 0x%x \n", ret);
 800a144:	7afb      	ldrb	r3, [r7, #11]
 800a146:	4619      	mov	r1, r3
 800a148:	4820      	ldr	r0, [pc, #128]	@ (800a1cc <Adv_Request+0x138>)
 800a14a:	f000 fe6d 	bl	800ae28 <iprintf>
 800a14e:	e002      	b.n	800a156 <Adv_Request+0xc2>
  }
  else
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - Success\n");
 800a150:	481f      	ldr	r0, [pc, #124]	@ (800a1d0 <Adv_Request+0x13c>)
 800a152:	f000 fed1 	bl	800aef8 <puts>
  }

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_ManufData), (uint8_t*) a_ManufData);
 800a156:	491f      	ldr	r1, [pc, #124]	@ (800a1d4 <Adv_Request+0x140>)
 800a158:	200e      	movs	r0, #14
 800a15a:	f7fc ffda 	bl	8007112 <aci_gap_update_adv_data>
 800a15e:	4603      	mov	r3, r0
 800a160:	72fb      	strb	r3, [r7, #11]
  if (ret != BLE_STATUS_SUCCESS)
 800a162:	7afb      	ldrb	r3, [r7, #11]
 800a164:	2b00      	cmp	r3, #0
 800a166:	d00e      	beq.n	800a186 <Adv_Request+0xf2>
  {
    if (NewStatus == APP_BLE_FAST_ADV)
 800a168:	79fb      	ldrb	r3, [r7, #7]
 800a16a:	2b01      	cmp	r3, #1
 800a16c:	d105      	bne.n	800a17a <Adv_Request+0xe6>
    {
      APP_DBG_MSG("==>> Start Fast Advertising Failed , result: %d \n\r", ret);
 800a16e:	7afb      	ldrb	r3, [r7, #11]
 800a170:	4619      	mov	r1, r3
 800a172:	4819      	ldr	r0, [pc, #100]	@ (800a1d8 <Adv_Request+0x144>)
 800a174:	f000 fe58 	bl	800ae28 <iprintf>
    {
      APP_DBG_MSG("==>> Success: Start Low Power Advertising \n\r");
    }
  }

  return;
 800a178:	e017      	b.n	800a1aa <Adv_Request+0x116>
      APP_DBG_MSG("==>> Start Low Power Advertising Failed , result: %d \n\r", ret);
 800a17a:	7afb      	ldrb	r3, [r7, #11]
 800a17c:	4619      	mov	r1, r3
 800a17e:	4817      	ldr	r0, [pc, #92]	@ (800a1dc <Adv_Request+0x148>)
 800a180:	f000 fe52 	bl	800ae28 <iprintf>
  return;
 800a184:	e011      	b.n	800a1aa <Adv_Request+0x116>
    if (NewStatus == APP_BLE_FAST_ADV)
 800a186:	79fb      	ldrb	r3, [r7, #7]
 800a188:	2b01      	cmp	r3, #1
 800a18a:	d10a      	bne.n	800a1a2 <Adv_Request+0x10e>
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
 800a18c:	4814      	ldr	r0, [pc, #80]	@ (800a1e0 <Adv_Request+0x14c>)
 800a18e:	f000 fe4b 	bl	800ae28 <iprintf>
      HW_TS_Start(BleApplicationContext.Advertising_mgr_timer_Id, INITIAL_ADV_TIMEOUT);
 800a192:	4b09      	ldr	r3, [pc, #36]	@ (800a1b8 <Adv_Request+0x124>)
 800a194:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a198:	4912      	ldr	r1, [pc, #72]	@ (800a1e4 <Adv_Request+0x150>)
 800a19a:	4618      	mov	r0, r3
 800a19c:	f7f7 fca2 	bl	8001ae4 <HW_TS_Start>
  return;
 800a1a0:	e003      	b.n	800a1aa <Adv_Request+0x116>
      APP_DBG_MSG("==>> Success: Start Low Power Advertising \n\r");
 800a1a2:	4811      	ldr	r0, [pc, #68]	@ (800a1e8 <Adv_Request+0x154>)
 800a1a4:	f000 fe40 	bl	800ae28 <iprintf>
  return;
 800a1a8:	bf00      	nop
}
 800a1aa:	3710      	adds	r7, #16
 800a1ac:	46bd      	mov	sp, r7
 800a1ae:	bd80      	pop	{r7, pc}
 800a1b0:	20000408 	.word	0x20000408
 800a1b4:	2000040a 	.word	0x2000040a
 800a1b8:	20000384 	.word	0x20000384
 800a1bc:	0800c914 	.word	0x0800c914
 800a1c0:	0800c960 	.word	0x0800c960
 800a1c4:	2000039d 	.word	0x2000039d
 800a1c8:	0800cd8c 	.word	0x0800cd8c
 800a1cc:	0800c9a8 	.word	0x0800c9a8
 800a1d0:	0800c9e0 	.word	0x0800c9e0
 800a1d4:	2000001c 	.word	0x2000001c
 800a1d8:	0800ca08 	.word	0x0800ca08
 800a1dc:	0800ca3c 	.word	0x0800ca3c
 800a1e0:	0800ca74 	.word	0x0800ca74
 800a1e4:	0001e046 	.word	0x0001e046
 800a1e8:	0800ca9c 	.word	0x0800ca9c

0800a1ec <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	b086      	sub	sp, #24
 800a1f0:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 800a1f2:	f7ff fb33 	bl	800985c <LL_FLASH_GetUDN>
 800a1f6:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 800a1f8:	693b      	ldr	r3, [r7, #16]
 800a1fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1fe:	d023      	beq.n	800a248 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 800a200:	f7ff fb44 	bl	800988c <LL_FLASH_GetSTCompanyID>
 800a204:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 800a206:	f7ff fb35 	bl	8009874 <LL_FLASH_GetDeviceID>
 800a20a:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 800a20c:	693b      	ldr	r3, [r7, #16]
 800a20e:	b2da      	uxtb	r2, r3
 800a210:	4b16      	ldr	r3, [pc, #88]	@ (800a26c <BleGetBdAddress+0x80>)
 800a212:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 800a214:	693b      	ldr	r3, [r7, #16]
 800a216:	0a1b      	lsrs	r3, r3, #8
 800a218:	b2da      	uxtb	r2, r3
 800a21a:	4b14      	ldr	r3, [pc, #80]	@ (800a26c <BleGetBdAddress+0x80>)
 800a21c:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	b2da      	uxtb	r2, r3
 800a222:	4b12      	ldr	r3, [pc, #72]	@ (800a26c <BleGetBdAddress+0x80>)
 800a224:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 800a226:	68bb      	ldr	r3, [r7, #8]
 800a228:	b2da      	uxtb	r2, r3
 800a22a:	4b10      	ldr	r3, [pc, #64]	@ (800a26c <BleGetBdAddress+0x80>)
 800a22c:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 800a22e:	68bb      	ldr	r3, [r7, #8]
 800a230:	0a1b      	lsrs	r3, r3, #8
 800a232:	b2da      	uxtb	r2, r3
 800a234:	4b0d      	ldr	r3, [pc, #52]	@ (800a26c <BleGetBdAddress+0x80>)
 800a236:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 800a238:	68bb      	ldr	r3, [r7, #8]
 800a23a:	0c1b      	lsrs	r3, r3, #16
 800a23c:	b2da      	uxtb	r2, r3
 800a23e:	4b0b      	ldr	r3, [pc, #44]	@ (800a26c <BleGetBdAddress+0x80>)
 800a240:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 800a242:	4b0a      	ldr	r3, [pc, #40]	@ (800a26c <BleGetBdAddress+0x80>)
 800a244:	617b      	str	r3, [r7, #20]
 800a246:	e00b      	b.n	800a260 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 800a248:	2000      	movs	r0, #0
 800a24a:	f7fe fe57 	bl	8008efc <OTP_Read>
 800a24e:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	2b00      	cmp	r3, #0
 800a254:	d002      	beq.n	800a25c <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	617b      	str	r3, [r7, #20]
 800a25a:	e001      	b.n	800a260 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 800a25c:	4b04      	ldr	r3, [pc, #16]	@ (800a270 <BleGetBdAddress+0x84>)
 800a25e:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 800a260:	697b      	ldr	r3, [r7, #20]
}
 800a262:	4618      	mov	r0, r3
 800a264:	3718      	adds	r7, #24
 800a266:	46bd      	mov	sp, r7
 800a268:	bd80      	pop	{r7, pc}
 800a26a:	bf00      	nop
 800a26c:	2000037c 	.word	0x2000037c
 800a270:	0800cd64 	.word	0x0800cd64

0800a274 <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR P2P SERVER
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 800a274:	b580      	push	{r7, lr}
 800a276:	b082      	sub	sp, #8
 800a278:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 800a27a:	4b10      	ldr	r3, [pc, #64]	@ (800a2bc <Adv_Cancel+0x48>)
 800a27c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800a280:	2b05      	cmp	r3, #5
 800a282:	d017      	beq.n	800a2b4 <Adv_Cancel+0x40>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800a284:	2392      	movs	r3, #146	@ 0x92
 800a286:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 800a288:	f7fc fc60 	bl	8006b4c <aci_gap_set_non_discoverable>
 800a28c:	4603      	mov	r3, r0
 800a28e:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800a290:	4b0a      	ldr	r3, [pc, #40]	@ (800a2bc <Adv_Cancel+0x48>)
 800a292:	2200      	movs	r2, #0
 800a294:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    if (ret != BLE_STATUS_SUCCESS)
 800a298:	79fb      	ldrb	r3, [r7, #7]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d003      	beq.n	800a2a6 <Adv_Cancel+0x32>
    {
      APP_DBG_MSG("** STOP ADVERTISING **  Failed \r\n\r");
 800a29e:	4808      	ldr	r0, [pc, #32]	@ (800a2c0 <Adv_Cancel+0x4c>)
 800a2a0:	f000 fdc2 	bl	800ae28 <iprintf>

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 800a2a4:	e006      	b.n	800a2b4 <Adv_Cancel+0x40>
      APP_DBG_MSG("  \r\n\r");
 800a2a6:	4807      	ldr	r0, [pc, #28]	@ (800a2c4 <Adv_Cancel+0x50>)
 800a2a8:	f000 fdbe 	bl	800ae28 <iprintf>
      APP_DBG_MSG("** STOP ADVERTISING **  \r\n\r");
 800a2ac:	4806      	ldr	r0, [pc, #24]	@ (800a2c8 <Adv_Cancel+0x54>)
 800a2ae:	f000 fdbb 	bl	800ae28 <iprintf>
  return;
 800a2b2:	bf00      	nop
 800a2b4:	bf00      	nop
}
 800a2b6:	3708      	adds	r7, #8
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	bd80      	pop	{r7, pc}
 800a2bc:	20000384 	.word	0x20000384
 800a2c0:	0800cacc 	.word	0x0800cacc
 800a2c4:	0800caf0 	.word	0x0800caf0
 800a2c8:	0800caf8 	.word	0x0800caf8

0800a2cc <Adv_Cancel_Req>:

static void Adv_Cancel_Req(void)
{
 800a2cc:	b580      	push	{r7, lr}
 800a2ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_Req_1 */

  /* USER CODE END Adv_Cancel_Req_1 */

  UTIL_SEQ_SetTask(1 << CFG_TASK_ADV_CANCEL_ID, CFG_SCH_PRIO_0);
 800a2d0:	2100      	movs	r1, #0
 800a2d2:	2001      	movs	r0, #1
 800a2d4:	f000 fbca 	bl	800aa6c <UTIL_SEQ_SetTask>

  /* USER CODE BEGIN Adv_Cancel_Req_2 */

  /* USER CODE END Adv_Cancel_Req_2 */

  return;
 800a2d8:	bf00      	nop
}
 800a2da:	bd80      	pop	{r7, pc}

0800a2dc <Switch_OFF_GPIO>:

static void Switch_OFF_GPIO()
{
 800a2dc:	b480      	push	{r7}
 800a2de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Switch_OFF_GPIO */

  /* USER CODE END Switch_OFF_GPIO */
}
 800a2e0:	bf00      	nop
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e8:	4770      	bx	lr
	...

0800a2ec <BLE_SVC_L2CAP_Conn_Update>:

#if (L2CAP_REQUEST_NEW_CONN_PARAM != 0)
void BLE_SVC_L2CAP_Conn_Update(uint16_t ConnectionHandle)
{
 800a2ec:	b590      	push	{r4, r7, lr}
 800a2ee:	b089      	sub	sp, #36	@ 0x24
 800a2f0:	af02      	add	r7, sp, #8
 800a2f2:	4603      	mov	r3, r0
 800a2f4:	80fb      	strh	r3, [r7, #6]
  /* USER CODE BEGIN BLE_SVC_L2CAP_Conn_Update_1 */

  /* USER CODE END BLE_SVC_L2CAP_Conn_Update_1 */

  if (mutex == 1)
 800a2f6:	4b29      	ldr	r3, [pc, #164]	@ (800a39c <BLE_SVC_L2CAP_Conn_Update+0xb0>)
 800a2f8:	781b      	ldrb	r3, [r3, #0]
 800a2fa:	2b01      	cmp	r3, #1
 800a2fc:	d149      	bne.n	800a392 <BLE_SVC_L2CAP_Conn_Update+0xa6>
  {
    mutex = 0;
 800a2fe:	4b27      	ldr	r3, [pc, #156]	@ (800a39c <BLE_SVC_L2CAP_Conn_Update+0xb0>)
 800a300:	2200      	movs	r2, #0
 800a302:	701a      	strb	r2, [r3, #0]
    index_con_int = (index_con_int + 1)%SIZE_TAB_CONN_INT;
 800a304:	4b26      	ldr	r3, [pc, #152]	@ (800a3a0 <BLE_SVC_L2CAP_Conn_Update+0xb4>)
 800a306:	781b      	ldrb	r3, [r3, #0]
 800a308:	3301      	adds	r3, #1
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	f003 0301 	and.w	r3, r3, #1
 800a310:	bfb8      	it	lt
 800a312:	425b      	neglt	r3, r3
 800a314:	b2da      	uxtb	r2, r3
 800a316:	4b22      	ldr	r3, [pc, #136]	@ (800a3a0 <BLE_SVC_L2CAP_Conn_Update+0xb4>)
 800a318:	701a      	strb	r2, [r3, #0]
    uint16_t interval_min = CONN_P(a_ConnInterval[index_con_int]);
 800a31a:	4b21      	ldr	r3, [pc, #132]	@ (800a3a0 <BLE_SVC_L2CAP_Conn_Update+0xb4>)
 800a31c:	781b      	ldrb	r3, [r3, #0]
 800a31e:	4a21      	ldr	r2, [pc, #132]	@ (800a3a4 <BLE_SVC_L2CAP_Conn_Update+0xb8>)
 800a320:	009b      	lsls	r3, r3, #2
 800a322:	4413      	add	r3, r2
 800a324:	ed93 7a00 	vldr	s14, [r3]
 800a328:	eef7 6a04 	vmov.f32	s13, #116	@ 0x3fa00000  1.250
 800a32c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a330:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a334:	ee17 3a90 	vmov	r3, s15
 800a338:	82fb      	strh	r3, [r7, #22]
    uint16_t interval_max = CONN_P(a_ConnInterval[index_con_int]);
 800a33a:	4b19      	ldr	r3, [pc, #100]	@ (800a3a0 <BLE_SVC_L2CAP_Conn_Update+0xb4>)
 800a33c:	781b      	ldrb	r3, [r3, #0]
 800a33e:	4a19      	ldr	r2, [pc, #100]	@ (800a3a4 <BLE_SVC_L2CAP_Conn_Update+0xb8>)
 800a340:	009b      	lsls	r3, r3, #2
 800a342:	4413      	add	r3, r2
 800a344:	ed93 7a00 	vldr	s14, [r3]
 800a348:	eef7 6a04 	vmov.f32	s13, #116	@ 0x3fa00000  1.250
 800a34c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a350:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a354:	ee17 3a90 	vmov	r3, s15
 800a358:	82bb      	strh	r3, [r7, #20]
    uint16_t peripheral_latency = L2CAP_PERIPHERAL_LATENCY;
 800a35a:	2300      	movs	r3, #0
 800a35c:	827b      	strh	r3, [r7, #18]
    uint16_t timeout_multiplier = L2CAP_TIMEOUT_MULTIPLIER;
 800a35e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800a362:	823b      	strh	r3, [r7, #16]
    tBleStatus ret;

    ret = aci_l2cap_connection_parameter_update_req(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,
 800a364:	4b10      	ldr	r3, [pc, #64]	@ (800a3a8 <BLE_SVC_L2CAP_Conn_Update+0xbc>)
 800a366:	8ad8      	ldrh	r0, [r3, #22]
 800a368:	8a7c      	ldrh	r4, [r7, #18]
 800a36a:	8aba      	ldrh	r2, [r7, #20]
 800a36c:	8af9      	ldrh	r1, [r7, #22]
 800a36e:	8a3b      	ldrh	r3, [r7, #16]
 800a370:	9300      	str	r3, [sp, #0]
 800a372:	4623      	mov	r3, r4
 800a374:	f7fd fcc3 	bl	8007cfe <aci_l2cap_connection_parameter_update_req>
 800a378:	4603      	mov	r3, r0
 800a37a:	73fb      	strb	r3, [r7, #15]
                                                    interval_min, interval_max,
                                                    peripheral_latency, timeout_multiplier);
    if (ret != BLE_STATUS_SUCCESS)
 800a37c:	7bfb      	ldrb	r3, [r7, #15]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d003      	beq.n	800a38a <BLE_SVC_L2CAP_Conn_Update+0x9e>
    {
      APP_DBG_MSG("BLE_SVC_L2CAP_Conn_Update(), Failed \r\n\r");
 800a382:	480a      	ldr	r0, [pc, #40]	@ (800a3ac <BLE_SVC_L2CAP_Conn_Update+0xc0>)
 800a384:	f000 fd50 	bl	800ae28 <iprintf>

  /* USER CODE BEGIN BLE_SVC_L2CAP_Conn_Update_2 */

  /* USER CODE END BLE_SVC_L2CAP_Conn_Update_2 */

  return;
 800a388:	e003      	b.n	800a392 <BLE_SVC_L2CAP_Conn_Update+0xa6>
      APP_DBG_MSG("BLE_SVC_L2CAP_Conn_Update(), Successfully \r\n\r");
 800a38a:	4809      	ldr	r0, [pc, #36]	@ (800a3b0 <BLE_SVC_L2CAP_Conn_Update+0xc4>)
 800a38c:	f000 fd4c 	bl	800ae28 <iprintf>
  return;
 800a390:	bf00      	nop
 800a392:	bf00      	nop
}
 800a394:	371c      	adds	r7, #28
 800a396:	46bd      	mov	sp, r7
 800a398:	bd90      	pop	{r4, r7, pc}
 800a39a:	bf00      	nop
 800a39c:	20000411 	.word	0x20000411
 800a3a0:	20000410 	.word	0x20000410
 800a3a4:	20000014 	.word	0x20000014
 800a3a8:	20000384 	.word	0x20000384
 800a3ac:	0800cb14 	.word	0x0800cb14
 800a3b0:	0800cb3c 	.word	0x0800cb3c

0800a3b4 <Connection_Interval_Update_Req>:
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

#if (L2CAP_REQUEST_NEW_CONN_PARAM != 0)
static void Connection_Interval_Update_Req(void)
{
 800a3b4:	b580      	push	{r7, lr}
 800a3b6:	af00      	add	r7, sp, #0
  if (BleApplicationContext.Device_Connection_Status != APP_BLE_FAST_ADV && BleApplicationContext.Device_Connection_Status != APP_BLE_IDLE)
 800a3b8:	4b08      	ldr	r3, [pc, #32]	@ (800a3dc <Connection_Interval_Update_Req+0x28>)
 800a3ba:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800a3be:	2b01      	cmp	r3, #1
 800a3c0:	d00a      	beq.n	800a3d8 <Connection_Interval_Update_Req+0x24>
 800a3c2:	4b06      	ldr	r3, [pc, #24]	@ (800a3dc <Connection_Interval_Update_Req+0x28>)
 800a3c4:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d005      	beq.n	800a3d8 <Connection_Interval_Update_Req+0x24>
  {
    BLE_SVC_L2CAP_Conn_Update(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 800a3cc:	4b03      	ldr	r3, [pc, #12]	@ (800a3dc <Connection_Interval_Update_Req+0x28>)
 800a3ce:	8adb      	ldrh	r3, [r3, #22]
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	f7ff ff8b 	bl	800a2ec <BLE_SVC_L2CAP_Conn_Update>
  }

  return;
 800a3d6:	bf00      	nop
 800a3d8:	bf00      	nop
}
 800a3da:	bd80      	pop	{r7, pc}
 800a3dc:	20000384 	.word	0x20000384

0800a3e0 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	b082      	sub	sp, #8
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800a3e8:	2100      	movs	r1, #0
 800a3ea:	2004      	movs	r0, #4
 800a3ec:	f000 fb3e 	bl	800aa6c <UTIL_SEQ_SetTask>

  return;
 800a3f0:	bf00      	nop
}
 800a3f2:	3708      	adds	r7, #8
 800a3f4:	46bd      	mov	sp, r7
 800a3f6:	bd80      	pop	{r7, pc}

0800a3f8 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	b082      	sub	sp, #8
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800a400:	2001      	movs	r0, #1
 800a402:	f000 fb9f 	bl	800ab44 <UTIL_SEQ_SetEvt>

  return;
 800a406:	bf00      	nop
}
 800a408:	3708      	adds	r7, #8
 800a40a:	46bd      	mov	sp, r7
 800a40c:	bd80      	pop	{r7, pc}

0800a40e <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 800a40e:	b580      	push	{r7, lr}
 800a410:	b082      	sub	sp, #8
 800a412:	af00      	add	r7, sp, #0
 800a414:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800a416:	2001      	movs	r0, #1
 800a418:	f000 fbb4 	bl	800ab84 <UTIL_SEQ_WaitEvt>

  return;
 800a41c:	bf00      	nop
}
 800a41e:	3708      	adds	r7, #8
 800a420:	46bd      	mov	sp, r7
 800a422:	bd80      	pop	{r7, pc}

0800a424 <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 800a424:	b580      	push	{r7, lr}
 800a426:	b084      	sub	sp, #16
 800a428:	af00      	add	r7, sp, #0
 800a42a:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	685b      	ldr	r3, [r3, #4]
 800a434:	3308      	adds	r3, #8
 800a436:	4618      	mov	r0, r3
 800a438:	f7fd fef4 	bl	8008224 <SVCCTL_UserEvtRx>
 800a43c:	4603      	mov	r3, r0
 800a43e:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 800a440:	7afb      	ldrb	r3, [r7, #11]
 800a442:	2b00      	cmp	r3, #0
 800a444:	d003      	beq.n	800a44e <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	2201      	movs	r2, #1
 800a44a:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 800a44c:	e003      	b.n	800a456 <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	2200      	movs	r2, #0
 800a452:	701a      	strb	r2, [r3, #0]
  return;
 800a454:	bf00      	nop
}
 800a456:	3710      	adds	r7, #16
 800a458:	46bd      	mov	sp, r7
 800a45a:	bd80      	pop	{r7, pc}

0800a45c <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	b084      	sub	sp, #16
 800a460:	af00      	add	r7, sp, #0
 800a462:	4603      	mov	r3, r0
 800a464:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 800a466:	79fb      	ldrb	r3, [r7, #7]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d002      	beq.n	800a472 <BLE_StatusNot+0x16>
 800a46c:	2b01      	cmp	r3, #1
 800a46e:	d006      	beq.n	800a47e <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 800a470:	e00b      	b.n	800a48a <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800a472:	2307      	movs	r3, #7
 800a474:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 800a476:	68f8      	ldr	r0, [r7, #12]
 800a478:	f000 fb24 	bl	800aac4 <UTIL_SEQ_PauseTask>
      break;
 800a47c:	e005      	b.n	800a48a <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800a47e:	2307      	movs	r3, #7
 800a480:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 800a482:	68f8      	ldr	r0, [r7, #12]
 800a484:	f000 fb3e 	bl	800ab04 <UTIL_SEQ_ResumeTask>
      break;
 800a488:	bf00      	nop
  }

  return;
 800a48a:	bf00      	nop
}
 800a48c:	3710      	adds	r7, #16
 800a48e:	46bd      	mov	sp, r7
 800a490:	bd80      	pop	{r7, pc}

0800a492 <P2PS_STM_App_Notification>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void P2PS_STM_App_Notification(P2PS_STM_App_Notification_evt_t *pNotification)
{
 800a492:	b480      	push	{r7}
 800a494:	b083      	sub	sp, #12
 800a496:	af00      	add	r7, sp, #0
 800a498:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_STM_App_Notification_1 */

/* USER CODE END P2PS_STM_App_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	781b      	ldrb	r3, [r3, #0]
 800a49e:	2b03      	cmp	r3, #3
 800a4a0:	d006      	beq.n	800a4b0 <P2PS_STM_App_Notification+0x1e>
 800a4a2:	2b03      	cmp	r3, #3
 800a4a4:	dc06      	bgt.n	800a4b4 <P2PS_STM_App_Notification+0x22>
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d006      	beq.n	800a4b8 <P2PS_STM_App_Notification+0x26>
 800a4aa:	2b01      	cmp	r3, #1
 800a4ac:	d006      	beq.n	800a4bc <P2PS_STM_App_Notification+0x2a>

    default:
/* USER CODE BEGIN P2PS_STM_App_Notification_default */

/* USER CODE END P2PS_STM_App_Notification_default */
      break;
 800a4ae:	e001      	b.n	800a4b4 <P2PS_STM_App_Notification+0x22>
      break;
 800a4b0:	bf00      	nop
 800a4b2:	e004      	b.n	800a4be <P2PS_STM_App_Notification+0x2c>
      break;
 800a4b4:	bf00      	nop
 800a4b6:	e002      	b.n	800a4be <P2PS_STM_App_Notification+0x2c>
      break;
 800a4b8:	bf00      	nop
 800a4ba:	e000      	b.n	800a4be <P2PS_STM_App_Notification+0x2c>
      break;
 800a4bc:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_STM_App_Notification_2 */

/* USER CODE END P2PS_STM_App_Notification_2 */
  return;
 800a4be:	bf00      	nop
}
 800a4c0:	370c      	adds	r7, #12
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c8:	4770      	bx	lr

0800a4ca <P2PS_APP_Notification>:

void P2PS_APP_Notification(P2PS_APP_ConnHandle_Not_evt_t *pNotification)
{
 800a4ca:	b480      	push	{r7}
 800a4cc:	b083      	sub	sp, #12
 800a4ce:	af00      	add	r7, sp, #0
 800a4d0:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_APP_Notification_1 */

/* USER CODE END P2PS_APP_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	781b      	ldrb	r3, [r3, #0]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d002      	beq.n	800a4e0 <P2PS_APP_Notification+0x16>
 800a4da:	2b01      	cmp	r3, #1
 800a4dc:	d002      	beq.n	800a4e4 <P2PS_APP_Notification+0x1a>

    default:
/* USER CODE BEGIN P2PS_APP_Notification_default */

/* USER CODE END P2PS_APP_Notification_default */
      break;
 800a4de:	e002      	b.n	800a4e6 <P2PS_APP_Notification+0x1c>
    break;
 800a4e0:	bf00      	nop
 800a4e2:	e000      	b.n	800a4e6 <P2PS_APP_Notification+0x1c>
    break;
 800a4e4:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_APP_Notification_2 */

/* USER CODE END P2PS_APP_Notification_2 */
  return;
 800a4e6:	bf00      	nop
}
 800a4e8:	370c      	adds	r7, #12
 800a4ea:	46bd      	mov	sp, r7
 800a4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f0:	4770      	bx	lr

0800a4f2 <P2PS_APP_Init>:

void P2PS_APP_Init(void)
{
 800a4f2:	b480      	push	{r7}
 800a4f4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN P2PS_APP_Init */

/* USER CODE END P2PS_APP_Init */
  return;
 800a4f6:	bf00      	nop
}
 800a4f8:	46bd      	mov	sp, r7
 800a4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fe:	4770      	bx	lr

0800a500 <LL_PWR_EnableBootC2>:
{
 800a500:	b480      	push	{r7}
 800a502:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800a504:	4b05      	ldr	r3, [pc, #20]	@ (800a51c <LL_PWR_EnableBootC2+0x1c>)
 800a506:	68db      	ldr	r3, [r3, #12]
 800a508:	4a04      	ldr	r2, [pc, #16]	@ (800a51c <LL_PWR_EnableBootC2+0x1c>)
 800a50a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a50e:	60d3      	str	r3, [r2, #12]
}
 800a510:	bf00      	nop
 800a512:	46bd      	mov	sp, r7
 800a514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a518:	4770      	bx	lr
 800a51a:	bf00      	nop
 800a51c:	58000400 	.word	0x58000400

0800a520 <LL_C2_EXTI_EnableEvent_32_63>:
{
 800a520:	b480      	push	{r7}
 800a522:	b083      	sub	sp, #12
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 800a528:	4b06      	ldr	r3, [pc, #24]	@ (800a544 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800a52a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 800a52e:	4905      	ldr	r1, [pc, #20]	@ (800a544 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	4313      	orrs	r3, r2
 800a534:	f8c1 30d4 	str.w	r3, [r1, #212]	@ 0xd4
}
 800a538:	bf00      	nop
 800a53a:	370c      	adds	r7, #12
 800a53c:	46bd      	mov	sp, r7
 800a53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a542:	4770      	bx	lr
 800a544:	58000800 	.word	0x58000800

0800a548 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 800a548:	b480      	push	{r7}
 800a54a:	b083      	sub	sp, #12
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800a550:	4b05      	ldr	r3, [pc, #20]	@ (800a568 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800a552:	6a1a      	ldr	r2, [r3, #32]
 800a554:	4904      	ldr	r1, [pc, #16]	@ (800a568 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	4313      	orrs	r3, r2
 800a55a:	620b      	str	r3, [r1, #32]
}
 800a55c:	bf00      	nop
 800a55e:	370c      	adds	r7, #12
 800a560:	46bd      	mov	sp, r7
 800a562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a566:	4770      	bx	lr
 800a568:	58000800 	.word	0x58000800

0800a56c <LL_AHB3_GRP1_EnableClock>:
{
 800a56c:	b480      	push	{r7}
 800a56e:	b085      	sub	sp, #20
 800a570:	af00      	add	r7, sp, #0
 800a572:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800a574:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a578:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a57a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	4313      	orrs	r3, r2
 800a582:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800a584:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a588:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	4013      	ands	r3, r2
 800a58e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800a590:	68fb      	ldr	r3, [r7, #12]
}
 800a592:	bf00      	nop
 800a594:	3714      	adds	r7, #20
 800a596:	46bd      	mov	sp, r7
 800a598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59c:	4770      	bx	lr

0800a59e <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800a59e:	b480      	push	{r7}
 800a5a0:	b085      	sub	sp, #20
 800a5a2:	af00      	add	r7, sp, #0
 800a5a4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 800a5a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a5aa:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 800a5ae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	4313      	orrs	r3, r2
 800a5b6:	f8c1 3150 	str.w	r3, [r1, #336]	@ 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 800a5ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a5be:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	4013      	ands	r3, r2
 800a5c6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800a5c8:	68fb      	ldr	r3, [r7, #12]
}
 800a5ca:	bf00      	nop
 800a5cc:	3714      	adds	r7, #20
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d4:	4770      	bx	lr

0800a5d6 <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 800a5d6:	b480      	push	{r7}
 800a5d8:	b083      	sub	sp, #12
 800a5da:	af00      	add	r7, sp, #0
 800a5dc:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	601a      	str	r2, [r3, #0]
}
 800a5ea:	bf00      	nop
 800a5ec:	370c      	adds	r7, #12
 800a5ee:	46bd      	mov	sp, r7
 800a5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f4:	4770      	bx	lr

0800a5f6 <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 800a5f6:	b480      	push	{r7}
 800a5f8:	b083      	sub	sp, #12
 800a5fa:	af00      	add	r7, sp, #0
 800a5fc:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	f043 0201 	orr.w	r2, r3, #1
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	601a      	str	r2, [r3, #0]
}
 800a60a:	bf00      	nop
 800a60c:	370c      	adds	r7, #12
 800a60e:	46bd      	mov	sp, r7
 800a610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a614:	4770      	bx	lr

0800a616 <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800a616:	b480      	push	{r7}
 800a618:	b083      	sub	sp, #12
 800a61a:	af00      	add	r7, sp, #0
 800a61c:	6078      	str	r0, [r7, #4]
 800a61e:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	685a      	ldr	r2, [r3, #4]
 800a624:	683b      	ldr	r3, [r7, #0]
 800a626:	041b      	lsls	r3, r3, #16
 800a628:	43db      	mvns	r3, r3
 800a62a:	401a      	ands	r2, r3
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	605a      	str	r2, [r3, #4]
}
 800a630:	bf00      	nop
 800a632:	370c      	adds	r7, #12
 800a634:	46bd      	mov	sp, r7
 800a636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a63a:	4770      	bx	lr

0800a63c <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800a63c:	b480      	push	{r7}
 800a63e:	b083      	sub	sp, #12
 800a640:	af00      	add	r7, sp, #0
 800a642:	6078      	str	r0, [r7, #4]
 800a644:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	685a      	ldr	r2, [r3, #4]
 800a64a:	683b      	ldr	r3, [r7, #0]
 800a64c:	43db      	mvns	r3, r3
 800a64e:	401a      	ands	r2, r3
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	605a      	str	r2, [r3, #4]
}
 800a654:	bf00      	nop
 800a656:	370c      	adds	r7, #12
 800a658:	46bd      	mov	sp, r7
 800a65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a65e:	4770      	bx	lr

0800a660 <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800a660:	b480      	push	{r7}
 800a662:	b083      	sub	sp, #12
 800a664:	af00      	add	r7, sp, #0
 800a666:	6078      	str	r0, [r7, #4]
 800a668:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800a66a:	683b      	ldr	r3, [r7, #0]
 800a66c:	041a      	lsls	r2, r3, #16
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	609a      	str	r2, [r3, #8]
}
 800a672:	bf00      	nop
 800a674:	370c      	adds	r7, #12
 800a676:	46bd      	mov	sp, r7
 800a678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a67c:	4770      	bx	lr

0800a67e <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800a67e:	b480      	push	{r7}
 800a680:	b083      	sub	sp, #12
 800a682:	af00      	add	r7, sp, #0
 800a684:	6078      	str	r0, [r7, #4]
 800a686:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	68da      	ldr	r2, [r3, #12]
 800a68c:	683b      	ldr	r3, [r7, #0]
 800a68e:	4013      	ands	r3, r2
 800a690:	683a      	ldr	r2, [r7, #0]
 800a692:	429a      	cmp	r2, r3
 800a694:	d101      	bne.n	800a69a <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800a696:	2301      	movs	r3, #1
 800a698:	e000      	b.n	800a69c <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800a69a:	2300      	movs	r3, #0
}
 800a69c:	4618      	mov	r0, r3
 800a69e:	370c      	adds	r7, #12
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a6:	4770      	bx	lr

0800a6a8 <HW_IPCC_Enable>:
}
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 800a6a8:	b580      	push	{r7, lr}
 800a6aa:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 800a6ac:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800a6b0:	f7ff ff75 	bl	800a59e <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 800a6b4:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800a6b8:	f7ff ff46 	bl	800a548 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 800a6bc:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800a6c0:	f7ff ff2e 	bl	800a520 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 800a6c4:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800a6c6:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 800a6c8:	f7ff ff1a 	bl	800a500 <LL_PWR_EnableBootC2>

  return;
 800a6cc:	bf00      	nop
}
 800a6ce:	bd80      	pop	{r7, pc}

0800a6d0 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 800a6d0:	b580      	push	{r7, lr}
 800a6d2:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 800a6d4:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800a6d8:	f7ff ff48 	bl	800a56c <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 800a6dc:	4806      	ldr	r0, [pc, #24]	@ (800a6f8 <HW_IPCC_Init+0x28>)
 800a6de:	f7ff ff8a 	bl	800a5f6 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800a6e2:	4805      	ldr	r0, [pc, #20]	@ (800a6f8 <HW_IPCC_Init+0x28>)
 800a6e4:	f7ff ff77 	bl	800a5d6 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800a6e8:	202c      	movs	r0, #44	@ 0x2c
 800a6ea:	f7f8 fae2 	bl	8002cb2 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800a6ee:	202d      	movs	r0, #45	@ 0x2d
 800a6f0:	f7f8 fadf 	bl	8002cb2 <HAL_NVIC_EnableIRQ>

  return;
 800a6f4:	bf00      	nop
}
 800a6f6:	bd80      	pop	{r7, pc}
 800a6f8:	58000c00 	.word	0x58000c00

0800a6fc <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 800a6fc:	b580      	push	{r7, lr}
 800a6fe:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800a700:	2101      	movs	r1, #1
 800a702:	4802      	ldr	r0, [pc, #8]	@ (800a70c <HW_IPCC_BLE_Init+0x10>)
 800a704:	f7ff ff9a 	bl	800a63c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800a708:	bf00      	nop
}
 800a70a:	bd80      	pop	{r7, pc}
 800a70c:	58000c00 	.word	0x58000c00

0800a710 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 800a710:	b580      	push	{r7, lr}
 800a712:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 800a714:	2101      	movs	r1, #1
 800a716:	4802      	ldr	r0, [pc, #8]	@ (800a720 <HW_IPCC_BLE_SendCmd+0x10>)
 800a718:	f7ff ffa2 	bl	800a660 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800a71c:	bf00      	nop
}
 800a71e:	bd80      	pop	{r7, pc}
 800a720:	58000c00 	.word	0x58000c00

0800a724 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 800a724:	b580      	push	{r7, lr}
 800a726:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800a728:	2102      	movs	r1, #2
 800a72a:	4802      	ldr	r0, [pc, #8]	@ (800a734 <HW_IPCC_SYS_Init+0x10>)
 800a72c:	f7ff ff86 	bl	800a63c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800a730:	bf00      	nop
}
 800a732:	bd80      	pop	{r7, pc}
 800a734:	58000c00 	.word	0x58000c00

0800a738 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 800a738:	b580      	push	{r7, lr}
 800a73a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800a73c:	2102      	movs	r1, #2
 800a73e:	4804      	ldr	r0, [pc, #16]	@ (800a750 <HW_IPCC_SYS_SendCmd+0x18>)
 800a740:	f7ff ff8e 	bl	800a660 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800a744:	2102      	movs	r1, #2
 800a746:	4802      	ldr	r0, [pc, #8]	@ (800a750 <HW_IPCC_SYS_SendCmd+0x18>)
 800a748:	f7ff ff65 	bl	800a616 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 800a74c:	bf00      	nop
}
 800a74e:	bd80      	pop	{r7, pc}
 800a750:	58000c00 	.word	0x58000c00

0800a754 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 800a754:	b580      	push	{r7, lr}
 800a756:	b082      	sub	sp, #8
 800a758:	af00      	add	r7, sp, #0
 800a75a:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 800a75c:	2108      	movs	r1, #8
 800a75e:	480c      	ldr	r0, [pc, #48]	@ (800a790 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800a760:	f7ff ff8d 	bl	800a67e <LL_C1_IPCC_IsActiveFlag_CHx>
 800a764:	4603      	mov	r3, r0
 800a766:	2b00      	cmp	r3, #0
 800a768:	d007      	beq.n	800a77a <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 800a76a:	4a0a      	ldr	r2, [pc, #40]	@ (800a794 <HW_IPCC_MM_SendFreeBuf+0x40>)
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800a770:	2108      	movs	r1, #8
 800a772:	4807      	ldr	r0, [pc, #28]	@ (800a790 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800a774:	f7ff ff4f 	bl	800a616 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 800a778:	e006      	b.n	800a788 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800a77e:	2108      	movs	r1, #8
 800a780:	4803      	ldr	r0, [pc, #12]	@ (800a790 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800a782:	f7ff ff6d 	bl	800a660 <LL_C1_IPCC_SetFlag_CHx>
  return;
 800a786:	bf00      	nop
}
 800a788:	3708      	adds	r7, #8
 800a78a:	46bd      	mov	sp, r7
 800a78c:	bd80      	pop	{r7, pc}
 800a78e:	bf00      	nop
 800a790:	58000c00 	.word	0x58000c00
 800a794:	20000414 	.word	0x20000414

0800a798 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 800a798:	b580      	push	{r7, lr}
 800a79a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 800a79c:	2108      	movs	r1, #8
 800a79e:	4802      	ldr	r0, [pc, #8]	@ (800a7a8 <HW_IPCC_TRACES_Init+0x10>)
 800a7a0:	f7ff ff4c 	bl	800a63c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800a7a4:	bf00      	nop
}
 800a7a6:	bd80      	pop	{r7, pc}
 800a7a8:	58000c00 	.word	0x58000c00

0800a7ac <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800a7ac:	b480      	push	{r7}
 800a7ae:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800a7b0:	4b05      	ldr	r3, [pc, #20]	@ (800a7c8 <UTIL_LPM_Init+0x1c>)
 800a7b2:	2200      	movs	r2, #0
 800a7b4:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800a7b6:	4b05      	ldr	r3, [pc, #20]	@ (800a7cc <UTIL_LPM_Init+0x20>)
 800a7b8:	2200      	movs	r2, #0
 800a7ba:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800a7bc:	bf00      	nop
 800a7be:	46bd      	mov	sp, r7
 800a7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c4:	4770      	bx	lr
 800a7c6:	bf00      	nop
 800a7c8:	20000418 	.word	0x20000418
 800a7cc:	2000041c 	.word	0x2000041c

0800a7d0 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800a7d0:	b480      	push	{r7}
 800a7d2:	b087      	sub	sp, #28
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	6078      	str	r0, [r7, #4]
 800a7d8:	460b      	mov	r3, r1
 800a7da:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a7dc:	f3ef 8310 	mrs	r3, PRIMASK
 800a7e0:	613b      	str	r3, [r7, #16]
  return(result);
 800a7e2:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800a7e4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a7e6:	b672      	cpsid	i
}
 800a7e8:	bf00      	nop
  
  switch(state)
 800a7ea:	78fb      	ldrb	r3, [r7, #3]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d008      	beq.n	800a802 <UTIL_LPM_SetOffMode+0x32>
 800a7f0:	2b01      	cmp	r3, #1
 800a7f2:	d10e      	bne.n	800a812 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800a7f4:	4b0d      	ldr	r3, [pc, #52]	@ (800a82c <UTIL_LPM_SetOffMode+0x5c>)
 800a7f6:	681a      	ldr	r2, [r3, #0]
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	4313      	orrs	r3, r2
 800a7fc:	4a0b      	ldr	r2, [pc, #44]	@ (800a82c <UTIL_LPM_SetOffMode+0x5c>)
 800a7fe:	6013      	str	r3, [r2, #0]
      break;
 800a800:	e008      	b.n	800a814 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	43da      	mvns	r2, r3
 800a806:	4b09      	ldr	r3, [pc, #36]	@ (800a82c <UTIL_LPM_SetOffMode+0x5c>)
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	4013      	ands	r3, r2
 800a80c:	4a07      	ldr	r2, [pc, #28]	@ (800a82c <UTIL_LPM_SetOffMode+0x5c>)
 800a80e:	6013      	str	r3, [r2, #0]
      break;
 800a810:	e000      	b.n	800a814 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800a812:	bf00      	nop
 800a814:	697b      	ldr	r3, [r7, #20]
 800a816:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	f383 8810 	msr	PRIMASK, r3
}
 800a81e:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800a820:	bf00      	nop
 800a822:	371c      	adds	r7, #28
 800a824:	46bd      	mov	sp, r7
 800a826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82a:	4770      	bx	lr
 800a82c:	2000041c 	.word	0x2000041c

0800a830 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800a830:	b580      	push	{r7, lr}
 800a832:	b090      	sub	sp, #64	@ 0x40
 800a834:	af00      	add	r7, sp, #0
 800a836:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800a838:	4b73      	ldr	r3, [pc, #460]	@ (800aa08 <UTIL_SEQ_Run+0x1d8>)
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 800a83e:	4b72      	ldr	r3, [pc, #456]	@ (800aa08 <UTIL_SEQ_Run+0x1d8>)
 800a840:	681a      	ldr	r2, [r3, #0]
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	4013      	ands	r3, r2
 800a846:	4a70      	ldr	r2, [pc, #448]	@ (800aa08 <UTIL_SEQ_Run+0x1d8>)
 800a848:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800a84a:	4b70      	ldr	r3, [pc, #448]	@ (800aa0c <UTIL_SEQ_Run+0x1dc>)
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 800a850:	4b6f      	ldr	r3, [pc, #444]	@ (800aa10 <UTIL_SEQ_Run+0x1e0>)
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 800a856:	4b6f      	ldr	r3, [pc, #444]	@ (800aa14 <UTIL_SEQ_Run+0x1e4>)
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 800a85c:	4b6e      	ldr	r3, [pc, #440]	@ (800aa18 <UTIL_SEQ_Run+0x1e8>)
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800a862:	e08d      	b.n	800a980 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 800a864:	2300      	movs	r3, #0
 800a866:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800a868:	e002      	b.n	800a870 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 800a86a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a86c:	3301      	adds	r3, #1
 800a86e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800a870:	4a6a      	ldr	r2, [pc, #424]	@ (800aa1c <UTIL_SEQ_Run+0x1ec>)
 800a872:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a874:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800a878:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a87a:	401a      	ands	r2, r3
 800a87c:	4b62      	ldr	r3, [pc, #392]	@ (800aa08 <UTIL_SEQ_Run+0x1d8>)
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	4013      	ands	r3, r2
 800a882:	2b00      	cmp	r3, #0
 800a884:	d0f1      	beq.n	800a86a <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800a886:	4a65      	ldr	r2, [pc, #404]	@ (800aa1c <UTIL_SEQ_Run+0x1ec>)
 800a888:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a88a:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800a88e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a890:	401a      	ands	r2, r3
 800a892:	4b5d      	ldr	r3, [pc, #372]	@ (800aa08 <UTIL_SEQ_Run+0x1d8>)
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	4013      	ands	r3, r2
 800a898:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800a89a:	4a60      	ldr	r2, [pc, #384]	@ (800aa1c <UTIL_SEQ_Run+0x1ec>)
 800a89c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a89e:	00db      	lsls	r3, r3, #3
 800a8a0:	4413      	add	r3, r2
 800a8a2:	685a      	ldr	r2, [r3, #4]
 800a8a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8a6:	4013      	ands	r3, r2
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d106      	bne.n	800a8ba <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800a8ac:	4a5b      	ldr	r2, [pc, #364]	@ (800aa1c <UTIL_SEQ_Run+0x1ec>)
 800a8ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a8b0:	00db      	lsls	r3, r3, #3
 800a8b2:	4413      	add	r3, r2
 800a8b4:	f04f 32ff 	mov.w	r2, #4294967295
 800a8b8:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800a8ba:	4a58      	ldr	r2, [pc, #352]	@ (800aa1c <UTIL_SEQ_Run+0x1ec>)
 800a8bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a8be:	00db      	lsls	r3, r3, #3
 800a8c0:	4413      	add	r3, r2
 800a8c2:	685a      	ldr	r2, [r3, #4]
 800a8c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8c6:	4013      	ands	r3, r2
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	f000 f9b3 	bl	800ac34 <SEQ_BitPosition>
 800a8ce:	4603      	mov	r3, r0
 800a8d0:	461a      	mov	r2, r3
 800a8d2:	4b53      	ldr	r3, [pc, #332]	@ (800aa20 <UTIL_SEQ_Run+0x1f0>)
 800a8d4:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800a8d6:	4a51      	ldr	r2, [pc, #324]	@ (800aa1c <UTIL_SEQ_Run+0x1ec>)
 800a8d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a8da:	00db      	lsls	r3, r3, #3
 800a8dc:	4413      	add	r3, r2
 800a8de:	685a      	ldr	r2, [r3, #4]
 800a8e0:	4b4f      	ldr	r3, [pc, #316]	@ (800aa20 <UTIL_SEQ_Run+0x1f0>)
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	2101      	movs	r1, #1
 800a8e6:	fa01 f303 	lsl.w	r3, r1, r3
 800a8ea:	43db      	mvns	r3, r3
 800a8ec:	401a      	ands	r2, r3
 800a8ee:	494b      	ldr	r1, [pc, #300]	@ (800aa1c <UTIL_SEQ_Run+0x1ec>)
 800a8f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a8f2:	00db      	lsls	r3, r3, #3
 800a8f4:	440b      	add	r3, r1
 800a8f6:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a8f8:	f3ef 8310 	mrs	r3, PRIMASK
 800a8fc:	61bb      	str	r3, [r7, #24]
  return(result);
 800a8fe:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a900:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800a902:	b672      	cpsid	i
}
 800a904:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800a906:	4b46      	ldr	r3, [pc, #280]	@ (800aa20 <UTIL_SEQ_Run+0x1f0>)
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	2201      	movs	r2, #1
 800a90c:	fa02 f303 	lsl.w	r3, r2, r3
 800a910:	43da      	mvns	r2, r3
 800a912:	4b3e      	ldr	r3, [pc, #248]	@ (800aa0c <UTIL_SEQ_Run+0x1dc>)
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	4013      	ands	r3, r2
 800a918:	4a3c      	ldr	r2, [pc, #240]	@ (800aa0c <UTIL_SEQ_Run+0x1dc>)
 800a91a:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800a91c:	2302      	movs	r3, #2
 800a91e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a920:	e013      	b.n	800a94a <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800a922:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a924:	3b01      	subs	r3, #1
 800a926:	4a3d      	ldr	r2, [pc, #244]	@ (800aa1c <UTIL_SEQ_Run+0x1ec>)
 800a928:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800a92c:	4b3c      	ldr	r3, [pc, #240]	@ (800aa20 <UTIL_SEQ_Run+0x1f0>)
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	2201      	movs	r2, #1
 800a932:	fa02 f303 	lsl.w	r3, r2, r3
 800a936:	43da      	mvns	r2, r3
 800a938:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a93a:	3b01      	subs	r3, #1
 800a93c:	400a      	ands	r2, r1
 800a93e:	4937      	ldr	r1, [pc, #220]	@ (800aa1c <UTIL_SEQ_Run+0x1ec>)
 800a940:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800a944:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a946:	3b01      	subs	r3, #1
 800a948:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a94a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d1e8      	bne.n	800a922 <UTIL_SEQ_Run+0xf2>
 800a950:	6a3b      	ldr	r3, [r7, #32]
 800a952:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a954:	697b      	ldr	r3, [r7, #20]
 800a956:	f383 8810 	msr	PRIMASK, r3
}
 800a95a:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800a95c:	4b30      	ldr	r3, [pc, #192]	@ (800aa20 <UTIL_SEQ_Run+0x1f0>)
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	4a30      	ldr	r2, [pc, #192]	@ (800aa24 <UTIL_SEQ_Run+0x1f4>)
 800a962:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a966:	4798      	blx	r3

    local_taskset = TaskSet;
 800a968:	4b28      	ldr	r3, [pc, #160]	@ (800aa0c <UTIL_SEQ_Run+0x1dc>)
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 800a96e:	4b28      	ldr	r3, [pc, #160]	@ (800aa10 <UTIL_SEQ_Run+0x1e0>)
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 800a974:	4b27      	ldr	r3, [pc, #156]	@ (800aa14 <UTIL_SEQ_Run+0x1e4>)
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 800a97a:	4b27      	ldr	r3, [pc, #156]	@ (800aa18 <UTIL_SEQ_Run+0x1e8>)
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800a980:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a984:	401a      	ands	r2, r3
 800a986:	4b20      	ldr	r3, [pc, #128]	@ (800aa08 <UTIL_SEQ_Run+0x1d8>)
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	4013      	ands	r3, r2
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d005      	beq.n	800a99c <UTIL_SEQ_Run+0x16c>
 800a990:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a992:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a994:	4013      	ands	r3, r2
 800a996:	2b00      	cmp	r3, #0
 800a998:	f43f af64 	beq.w	800a864 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800a99c:	4b20      	ldr	r3, [pc, #128]	@ (800aa20 <UTIL_SEQ_Run+0x1f0>)
 800a99e:	f04f 32ff 	mov.w	r2, #4294967295
 800a9a2:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800a9a4:	f000 f938 	bl	800ac18 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a9a8:	f3ef 8310 	mrs	r3, PRIMASK
 800a9ac:	613b      	str	r3, [r7, #16]
  return(result);
 800a9ae:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800a9b0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800a9b2:	b672      	cpsid	i
}
 800a9b4:	bf00      	nop
  local_taskset = TaskSet;
 800a9b6:	4b15      	ldr	r3, [pc, #84]	@ (800aa0c <UTIL_SEQ_Run+0x1dc>)
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 800a9bc:	4b14      	ldr	r3, [pc, #80]	@ (800aa10 <UTIL_SEQ_Run+0x1e0>)
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 800a9c2:	4b14      	ldr	r3, [pc, #80]	@ (800aa14 <UTIL_SEQ_Run+0x1e4>)
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800a9c8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a9ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9cc:	401a      	ands	r2, r3
 800a9ce:	4b0e      	ldr	r3, [pc, #56]	@ (800aa08 <UTIL_SEQ_Run+0x1d8>)
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	4013      	ands	r3, r2
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d107      	bne.n	800a9e8 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 800a9d8:	4b0f      	ldr	r3, [pc, #60]	@ (800aa18 <UTIL_SEQ_Run+0x1e8>)
 800a9da:	681a      	ldr	r2, [r3, #0]
 800a9dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9de:	4013      	ands	r3, r2
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d101      	bne.n	800a9e8 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 800a9e4:	f7f6 fb24 	bl	8001030 <UTIL_SEQ_Idle>
 800a9e8:	69fb      	ldr	r3, [r7, #28]
 800a9ea:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	f383 8810 	msr	PRIMASK, r3
}
 800a9f2:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 800a9f4:	f000 f917 	bl	800ac26 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800a9f8:	4a03      	ldr	r2, [pc, #12]	@ (800aa08 <UTIL_SEQ_Run+0x1d8>)
 800a9fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9fc:	6013      	str	r3, [r2, #0]

  return;
 800a9fe:	bf00      	nop
}
 800aa00:	3740      	adds	r7, #64	@ 0x40
 800aa02:	46bd      	mov	sp, r7
 800aa04:	bd80      	pop	{r7, pc}
 800aa06:	bf00      	nop
 800aa08:	20000030 	.word	0x20000030
 800aa0c:	20000420 	.word	0x20000420
 800aa10:	20000424 	.word	0x20000424
 800aa14:	2000002c 	.word	0x2000002c
 800aa18:	20000428 	.word	0x20000428
 800aa1c:	200004b0 	.word	0x200004b0
 800aa20:	2000042c 	.word	0x2000042c
 800aa24:	20000430 	.word	0x20000430

0800aa28 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	b088      	sub	sp, #32
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	60f8      	str	r0, [r7, #12]
 800aa30:	60b9      	str	r1, [r7, #8]
 800aa32:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aa34:	f3ef 8310 	mrs	r3, PRIMASK
 800aa38:	617b      	str	r3, [r7, #20]
  return(result);
 800aa3a:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800aa3c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800aa3e:	b672      	cpsid	i
}
 800aa40:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800aa42:	68f8      	ldr	r0, [r7, #12]
 800aa44:	f000 f8f6 	bl	800ac34 <SEQ_BitPosition>
 800aa48:	4603      	mov	r3, r0
 800aa4a:	4619      	mov	r1, r3
 800aa4c:	4a06      	ldr	r2, [pc, #24]	@ (800aa68 <UTIL_SEQ_RegTask+0x40>)
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800aa54:	69fb      	ldr	r3, [r7, #28]
 800aa56:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aa58:	69bb      	ldr	r3, [r7, #24]
 800aa5a:	f383 8810 	msr	PRIMASK, r3
}
 800aa5e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800aa60:	bf00      	nop
}
 800aa62:	3720      	adds	r7, #32
 800aa64:	46bd      	mov	sp, r7
 800aa66:	bd80      	pop	{r7, pc}
 800aa68:	20000430 	.word	0x20000430

0800aa6c <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800aa6c:	b480      	push	{r7}
 800aa6e:	b087      	sub	sp, #28
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	6078      	str	r0, [r7, #4]
 800aa74:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aa76:	f3ef 8310 	mrs	r3, PRIMASK
 800aa7a:	60fb      	str	r3, [r7, #12]
  return(result);
 800aa7c:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800aa7e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800aa80:	b672      	cpsid	i
}
 800aa82:	bf00      	nop

  TaskSet |= TaskId_bm;
 800aa84:	4b0d      	ldr	r3, [pc, #52]	@ (800aabc <UTIL_SEQ_SetTask+0x50>)
 800aa86:	681a      	ldr	r2, [r3, #0]
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	4313      	orrs	r3, r2
 800aa8c:	4a0b      	ldr	r2, [pc, #44]	@ (800aabc <UTIL_SEQ_SetTask+0x50>)
 800aa8e:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800aa90:	4a0b      	ldr	r2, [pc, #44]	@ (800aac0 <UTIL_SEQ_SetTask+0x54>)
 800aa92:	683b      	ldr	r3, [r7, #0]
 800aa94:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	431a      	orrs	r2, r3
 800aa9c:	4908      	ldr	r1, [pc, #32]	@ (800aac0 <UTIL_SEQ_SetTask+0x54>)
 800aa9e:	683b      	ldr	r3, [r7, #0]
 800aaa0:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800aaa4:	697b      	ldr	r3, [r7, #20]
 800aaa6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aaa8:	693b      	ldr	r3, [r7, #16]
 800aaaa:	f383 8810 	msr	PRIMASK, r3
}
 800aaae:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800aab0:	bf00      	nop
}
 800aab2:	371c      	adds	r7, #28
 800aab4:	46bd      	mov	sp, r7
 800aab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaba:	4770      	bx	lr
 800aabc:	20000420 	.word	0x20000420
 800aac0:	200004b0 	.word	0x200004b0

0800aac4 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800aac4:	b480      	push	{r7}
 800aac6:	b087      	sub	sp, #28
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aacc:	f3ef 8310 	mrs	r3, PRIMASK
 800aad0:	60fb      	str	r3, [r7, #12]
  return(result);
 800aad2:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800aad4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800aad6:	b672      	cpsid	i
}
 800aad8:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	43da      	mvns	r2, r3
 800aade:	4b08      	ldr	r3, [pc, #32]	@ (800ab00 <UTIL_SEQ_PauseTask+0x3c>)
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	4013      	ands	r3, r2
 800aae4:	4a06      	ldr	r2, [pc, #24]	@ (800ab00 <UTIL_SEQ_PauseTask+0x3c>)
 800aae6:	6013      	str	r3, [r2, #0]
 800aae8:	697b      	ldr	r3, [r7, #20]
 800aaea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aaec:	693b      	ldr	r3, [r7, #16]
 800aaee:	f383 8810 	msr	PRIMASK, r3
}
 800aaf2:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800aaf4:	bf00      	nop
}
 800aaf6:	371c      	adds	r7, #28
 800aaf8:	46bd      	mov	sp, r7
 800aafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aafe:	4770      	bx	lr
 800ab00:	2000002c 	.word	0x2000002c

0800ab04 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800ab04:	b480      	push	{r7}
 800ab06:	b087      	sub	sp, #28
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ab0c:	f3ef 8310 	mrs	r3, PRIMASK
 800ab10:	60fb      	str	r3, [r7, #12]
  return(result);
 800ab12:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800ab14:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ab16:	b672      	cpsid	i
}
 800ab18:	bf00      	nop

  TaskMask |= TaskId_bm;
 800ab1a:	4b09      	ldr	r3, [pc, #36]	@ (800ab40 <UTIL_SEQ_ResumeTask+0x3c>)
 800ab1c:	681a      	ldr	r2, [r3, #0]
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	4313      	orrs	r3, r2
 800ab22:	4a07      	ldr	r2, [pc, #28]	@ (800ab40 <UTIL_SEQ_ResumeTask+0x3c>)
 800ab24:	6013      	str	r3, [r2, #0]
 800ab26:	697b      	ldr	r3, [r7, #20]
 800ab28:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ab2a:	693b      	ldr	r3, [r7, #16]
 800ab2c:	f383 8810 	msr	PRIMASK, r3
}
 800ab30:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800ab32:	bf00      	nop
}
 800ab34:	371c      	adds	r7, #28
 800ab36:	46bd      	mov	sp, r7
 800ab38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3c:	4770      	bx	lr
 800ab3e:	bf00      	nop
 800ab40:	2000002c 	.word	0x2000002c

0800ab44 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800ab44:	b480      	push	{r7}
 800ab46:	b087      	sub	sp, #28
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ab4c:	f3ef 8310 	mrs	r3, PRIMASK
 800ab50:	60fb      	str	r3, [r7, #12]
  return(result);
 800ab52:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800ab54:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ab56:	b672      	cpsid	i
}
 800ab58:	bf00      	nop

  EvtSet |= EvtId_bm;
 800ab5a:	4b09      	ldr	r3, [pc, #36]	@ (800ab80 <UTIL_SEQ_SetEvt+0x3c>)
 800ab5c:	681a      	ldr	r2, [r3, #0]
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	4313      	orrs	r3, r2
 800ab62:	4a07      	ldr	r2, [pc, #28]	@ (800ab80 <UTIL_SEQ_SetEvt+0x3c>)
 800ab64:	6013      	str	r3, [r2, #0]
 800ab66:	697b      	ldr	r3, [r7, #20]
 800ab68:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ab6a:	693b      	ldr	r3, [r7, #16]
 800ab6c:	f383 8810 	msr	PRIMASK, r3
}
 800ab70:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800ab72:	bf00      	nop
}
 800ab74:	371c      	adds	r7, #28
 800ab76:	46bd      	mov	sp, r7
 800ab78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab7c:	4770      	bx	lr
 800ab7e:	bf00      	nop
 800ab80:	20000424 	.word	0x20000424

0800ab84 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800ab84:	b580      	push	{r7, lr}
 800ab86:	b088      	sub	sp, #32
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800ab8c:	4b1f      	ldr	r3, [pc, #124]	@ (800ac0c <UTIL_SEQ_WaitEvt+0x88>)
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800ab92:	4b1e      	ldr	r3, [pc, #120]	@ (800ac0c <UTIL_SEQ_WaitEvt+0x88>)
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab9a:	d102      	bne.n	800aba2 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 800ab9c:	2300      	movs	r3, #0
 800ab9e:	61fb      	str	r3, [r7, #28]
 800aba0:	e005      	b.n	800abae <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 800aba2:	4b1a      	ldr	r3, [pc, #104]	@ (800ac0c <UTIL_SEQ_WaitEvt+0x88>)
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	2201      	movs	r2, #1
 800aba8:	fa02 f303 	lsl.w	r3, r2, r3
 800abac:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800abae:	4b18      	ldr	r3, [pc, #96]	@ (800ac10 <UTIL_SEQ_WaitEvt+0x8c>)
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 800abb4:	4a16      	ldr	r2, [pc, #88]	@ (800ac10 <UTIL_SEQ_WaitEvt+0x8c>)
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 800abba:	e003      	b.n	800abc4 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 800abbc:	6879      	ldr	r1, [r7, #4]
 800abbe:	69f8      	ldr	r0, [r7, #28]
 800abc0:	f7f6 fa3d 	bl	800103e <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 800abc4:	4b13      	ldr	r3, [pc, #76]	@ (800ac14 <UTIL_SEQ_WaitEvt+0x90>)
 800abc6:	681a      	ldr	r2, [r3, #0]
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	4013      	ands	r3, r2
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d0f5      	beq.n	800abbc <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 800abd0:	4a0e      	ldr	r2, [pc, #56]	@ (800ac0c <UTIL_SEQ_WaitEvt+0x88>)
 800abd2:	69bb      	ldr	r3, [r7, #24]
 800abd4:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800abd6:	f3ef 8310 	mrs	r3, PRIMASK
 800abda:	60bb      	str	r3, [r7, #8]
  return(result);
 800abdc:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800abde:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800abe0:	b672      	cpsid	i
}
 800abe2:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	43da      	mvns	r2, r3
 800abe8:	4b0a      	ldr	r3, [pc, #40]	@ (800ac14 <UTIL_SEQ_WaitEvt+0x90>)
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	4013      	ands	r3, r2
 800abee:	4a09      	ldr	r2, [pc, #36]	@ (800ac14 <UTIL_SEQ_WaitEvt+0x90>)
 800abf0:	6013      	str	r3, [r2, #0]
 800abf2:	693b      	ldr	r3, [r7, #16]
 800abf4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	f383 8810 	msr	PRIMASK, r3
}
 800abfc:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 800abfe:	4a04      	ldr	r2, [pc, #16]	@ (800ac10 <UTIL_SEQ_WaitEvt+0x8c>)
 800ac00:	697b      	ldr	r3, [r7, #20]
 800ac02:	6013      	str	r3, [r2, #0]
  return;
 800ac04:	bf00      	nop
}
 800ac06:	3720      	adds	r7, #32
 800ac08:	46bd      	mov	sp, r7
 800ac0a:	bd80      	pop	{r7, pc}
 800ac0c:	2000042c 	.word	0x2000042c
 800ac10:	20000428 	.word	0x20000428
 800ac14:	20000424 	.word	0x20000424

0800ac18 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800ac18:	b480      	push	{r7}
 800ac1a:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800ac1c:	bf00      	nop
}
 800ac1e:	46bd      	mov	sp, r7
 800ac20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac24:	4770      	bx	lr

0800ac26 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800ac26:	b480      	push	{r7}
 800ac28:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800ac2a:	bf00      	nop
}
 800ac2c:	46bd      	mov	sp, r7
 800ac2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac32:	4770      	bx	lr

0800ac34 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800ac34:	b480      	push	{r7}
 800ac36:	b085      	sub	sp, #20
 800ac38:	af00      	add	r7, sp, #0
 800ac3a:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 800ac3c:	2300      	movs	r3, #0
 800ac3e:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 800ac44:	68bb      	ldr	r3, [r7, #8]
 800ac46:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ac4a:	d204      	bcs.n	800ac56 <SEQ_BitPosition+0x22>
 800ac4c:	2310      	movs	r3, #16
 800ac4e:	73fb      	strb	r3, [r7, #15]
 800ac50:	68bb      	ldr	r3, [r7, #8]
 800ac52:	041b      	lsls	r3, r3, #16
 800ac54:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 800ac56:	68bb      	ldr	r3, [r7, #8]
 800ac58:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ac5c:	d205      	bcs.n	800ac6a <SEQ_BitPosition+0x36>
 800ac5e:	7bfb      	ldrb	r3, [r7, #15]
 800ac60:	3308      	adds	r3, #8
 800ac62:	73fb      	strb	r3, [r7, #15]
 800ac64:	68bb      	ldr	r3, [r7, #8]
 800ac66:	021b      	lsls	r3, r3, #8
 800ac68:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 800ac6a:	68bb      	ldr	r3, [r7, #8]
 800ac6c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ac70:	d205      	bcs.n	800ac7e <SEQ_BitPosition+0x4a>
 800ac72:	7bfb      	ldrb	r3, [r7, #15]
 800ac74:	3304      	adds	r3, #4
 800ac76:	73fb      	strb	r3, [r7, #15]
 800ac78:	68bb      	ldr	r3, [r7, #8]
 800ac7a:	011b      	lsls	r3, r3, #4
 800ac7c:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 800ac7e:	68bb      	ldr	r3, [r7, #8]
 800ac80:	0f1b      	lsrs	r3, r3, #28
 800ac82:	4a07      	ldr	r2, [pc, #28]	@ (800aca0 <SEQ_BitPosition+0x6c>)
 800ac84:	5cd2      	ldrb	r2, [r2, r3]
 800ac86:	7bfb      	ldrb	r3, [r7, #15]
 800ac88:	4413      	add	r3, r2
 800ac8a:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800ac8c:	7bfb      	ldrb	r3, [r7, #15]
 800ac8e:	f1c3 031f 	rsb	r3, r3, #31
 800ac92:	b2db      	uxtb	r3, r3
}
 800ac94:	4618      	mov	r0, r3
 800ac96:	3714      	adds	r7, #20
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9e:	4770      	bx	lr
 800aca0:	0800cd94 	.word	0x0800cd94

0800aca4 <std>:
 800aca4:	2300      	movs	r3, #0
 800aca6:	b510      	push	{r4, lr}
 800aca8:	4604      	mov	r4, r0
 800acaa:	e9c0 3300 	strd	r3, r3, [r0]
 800acae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800acb2:	6083      	str	r3, [r0, #8]
 800acb4:	8181      	strh	r1, [r0, #12]
 800acb6:	6643      	str	r3, [r0, #100]	@ 0x64
 800acb8:	81c2      	strh	r2, [r0, #14]
 800acba:	6183      	str	r3, [r0, #24]
 800acbc:	4619      	mov	r1, r3
 800acbe:	2208      	movs	r2, #8
 800acc0:	305c      	adds	r0, #92	@ 0x5c
 800acc2:	f000 f9f9 	bl	800b0b8 <memset>
 800acc6:	4b0d      	ldr	r3, [pc, #52]	@ (800acfc <std+0x58>)
 800acc8:	6263      	str	r3, [r4, #36]	@ 0x24
 800acca:	4b0d      	ldr	r3, [pc, #52]	@ (800ad00 <std+0x5c>)
 800accc:	62a3      	str	r3, [r4, #40]	@ 0x28
 800acce:	4b0d      	ldr	r3, [pc, #52]	@ (800ad04 <std+0x60>)
 800acd0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800acd2:	4b0d      	ldr	r3, [pc, #52]	@ (800ad08 <std+0x64>)
 800acd4:	6323      	str	r3, [r4, #48]	@ 0x30
 800acd6:	4b0d      	ldr	r3, [pc, #52]	@ (800ad0c <std+0x68>)
 800acd8:	6224      	str	r4, [r4, #32]
 800acda:	429c      	cmp	r4, r3
 800acdc:	d006      	beq.n	800acec <std+0x48>
 800acde:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ace2:	4294      	cmp	r4, r2
 800ace4:	d002      	beq.n	800acec <std+0x48>
 800ace6:	33d0      	adds	r3, #208	@ 0xd0
 800ace8:	429c      	cmp	r4, r3
 800acea:	d105      	bne.n	800acf8 <std+0x54>
 800acec:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800acf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800acf4:	f000 ba58 	b.w	800b1a8 <__retarget_lock_init_recursive>
 800acf8:	bd10      	pop	{r4, pc}
 800acfa:	bf00      	nop
 800acfc:	0800af09 	.word	0x0800af09
 800ad00:	0800af2b 	.word	0x0800af2b
 800ad04:	0800af63 	.word	0x0800af63
 800ad08:	0800af87 	.word	0x0800af87
 800ad0c:	200004c0 	.word	0x200004c0

0800ad10 <stdio_exit_handler>:
 800ad10:	4a02      	ldr	r2, [pc, #8]	@ (800ad1c <stdio_exit_handler+0xc>)
 800ad12:	4903      	ldr	r1, [pc, #12]	@ (800ad20 <stdio_exit_handler+0x10>)
 800ad14:	4803      	ldr	r0, [pc, #12]	@ (800ad24 <stdio_exit_handler+0x14>)
 800ad16:	f000 b869 	b.w	800adec <_fwalk_sglue>
 800ad1a:	bf00      	nop
 800ad1c:	20000034 	.word	0x20000034
 800ad20:	0800ba65 	.word	0x0800ba65
 800ad24:	20000044 	.word	0x20000044

0800ad28 <cleanup_stdio>:
 800ad28:	6841      	ldr	r1, [r0, #4]
 800ad2a:	4b0c      	ldr	r3, [pc, #48]	@ (800ad5c <cleanup_stdio+0x34>)
 800ad2c:	4299      	cmp	r1, r3
 800ad2e:	b510      	push	{r4, lr}
 800ad30:	4604      	mov	r4, r0
 800ad32:	d001      	beq.n	800ad38 <cleanup_stdio+0x10>
 800ad34:	f000 fe96 	bl	800ba64 <_fflush_r>
 800ad38:	68a1      	ldr	r1, [r4, #8]
 800ad3a:	4b09      	ldr	r3, [pc, #36]	@ (800ad60 <cleanup_stdio+0x38>)
 800ad3c:	4299      	cmp	r1, r3
 800ad3e:	d002      	beq.n	800ad46 <cleanup_stdio+0x1e>
 800ad40:	4620      	mov	r0, r4
 800ad42:	f000 fe8f 	bl	800ba64 <_fflush_r>
 800ad46:	68e1      	ldr	r1, [r4, #12]
 800ad48:	4b06      	ldr	r3, [pc, #24]	@ (800ad64 <cleanup_stdio+0x3c>)
 800ad4a:	4299      	cmp	r1, r3
 800ad4c:	d004      	beq.n	800ad58 <cleanup_stdio+0x30>
 800ad4e:	4620      	mov	r0, r4
 800ad50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad54:	f000 be86 	b.w	800ba64 <_fflush_r>
 800ad58:	bd10      	pop	{r4, pc}
 800ad5a:	bf00      	nop
 800ad5c:	200004c0 	.word	0x200004c0
 800ad60:	20000528 	.word	0x20000528
 800ad64:	20000590 	.word	0x20000590

0800ad68 <global_stdio_init.part.0>:
 800ad68:	b510      	push	{r4, lr}
 800ad6a:	4b0b      	ldr	r3, [pc, #44]	@ (800ad98 <global_stdio_init.part.0+0x30>)
 800ad6c:	4c0b      	ldr	r4, [pc, #44]	@ (800ad9c <global_stdio_init.part.0+0x34>)
 800ad6e:	4a0c      	ldr	r2, [pc, #48]	@ (800ada0 <global_stdio_init.part.0+0x38>)
 800ad70:	601a      	str	r2, [r3, #0]
 800ad72:	4620      	mov	r0, r4
 800ad74:	2200      	movs	r2, #0
 800ad76:	2104      	movs	r1, #4
 800ad78:	f7ff ff94 	bl	800aca4 <std>
 800ad7c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ad80:	2201      	movs	r2, #1
 800ad82:	2109      	movs	r1, #9
 800ad84:	f7ff ff8e 	bl	800aca4 <std>
 800ad88:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ad8c:	2202      	movs	r2, #2
 800ad8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad92:	2112      	movs	r1, #18
 800ad94:	f7ff bf86 	b.w	800aca4 <std>
 800ad98:	200005f8 	.word	0x200005f8
 800ad9c:	200004c0 	.word	0x200004c0
 800ada0:	0800ad11 	.word	0x0800ad11

0800ada4 <__sfp_lock_acquire>:
 800ada4:	4801      	ldr	r0, [pc, #4]	@ (800adac <__sfp_lock_acquire+0x8>)
 800ada6:	f000 ba00 	b.w	800b1aa <__retarget_lock_acquire_recursive>
 800adaa:	bf00      	nop
 800adac:	20000601 	.word	0x20000601

0800adb0 <__sfp_lock_release>:
 800adb0:	4801      	ldr	r0, [pc, #4]	@ (800adb8 <__sfp_lock_release+0x8>)
 800adb2:	f000 b9fb 	b.w	800b1ac <__retarget_lock_release_recursive>
 800adb6:	bf00      	nop
 800adb8:	20000601 	.word	0x20000601

0800adbc <__sinit>:
 800adbc:	b510      	push	{r4, lr}
 800adbe:	4604      	mov	r4, r0
 800adc0:	f7ff fff0 	bl	800ada4 <__sfp_lock_acquire>
 800adc4:	6a23      	ldr	r3, [r4, #32]
 800adc6:	b11b      	cbz	r3, 800add0 <__sinit+0x14>
 800adc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800adcc:	f7ff bff0 	b.w	800adb0 <__sfp_lock_release>
 800add0:	4b04      	ldr	r3, [pc, #16]	@ (800ade4 <__sinit+0x28>)
 800add2:	6223      	str	r3, [r4, #32]
 800add4:	4b04      	ldr	r3, [pc, #16]	@ (800ade8 <__sinit+0x2c>)
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	2b00      	cmp	r3, #0
 800adda:	d1f5      	bne.n	800adc8 <__sinit+0xc>
 800addc:	f7ff ffc4 	bl	800ad68 <global_stdio_init.part.0>
 800ade0:	e7f2      	b.n	800adc8 <__sinit+0xc>
 800ade2:	bf00      	nop
 800ade4:	0800ad29 	.word	0x0800ad29
 800ade8:	200005f8 	.word	0x200005f8

0800adec <_fwalk_sglue>:
 800adec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800adf0:	4607      	mov	r7, r0
 800adf2:	4688      	mov	r8, r1
 800adf4:	4614      	mov	r4, r2
 800adf6:	2600      	movs	r6, #0
 800adf8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800adfc:	f1b9 0901 	subs.w	r9, r9, #1
 800ae00:	d505      	bpl.n	800ae0e <_fwalk_sglue+0x22>
 800ae02:	6824      	ldr	r4, [r4, #0]
 800ae04:	2c00      	cmp	r4, #0
 800ae06:	d1f7      	bne.n	800adf8 <_fwalk_sglue+0xc>
 800ae08:	4630      	mov	r0, r6
 800ae0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae0e:	89ab      	ldrh	r3, [r5, #12]
 800ae10:	2b01      	cmp	r3, #1
 800ae12:	d907      	bls.n	800ae24 <_fwalk_sglue+0x38>
 800ae14:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ae18:	3301      	adds	r3, #1
 800ae1a:	d003      	beq.n	800ae24 <_fwalk_sglue+0x38>
 800ae1c:	4629      	mov	r1, r5
 800ae1e:	4638      	mov	r0, r7
 800ae20:	47c0      	blx	r8
 800ae22:	4306      	orrs	r6, r0
 800ae24:	3568      	adds	r5, #104	@ 0x68
 800ae26:	e7e9      	b.n	800adfc <_fwalk_sglue+0x10>

0800ae28 <iprintf>:
 800ae28:	b40f      	push	{r0, r1, r2, r3}
 800ae2a:	b507      	push	{r0, r1, r2, lr}
 800ae2c:	4906      	ldr	r1, [pc, #24]	@ (800ae48 <iprintf+0x20>)
 800ae2e:	ab04      	add	r3, sp, #16
 800ae30:	6808      	ldr	r0, [r1, #0]
 800ae32:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae36:	6881      	ldr	r1, [r0, #8]
 800ae38:	9301      	str	r3, [sp, #4]
 800ae3a:	f000 fae9 	bl	800b410 <_vfiprintf_r>
 800ae3e:	b003      	add	sp, #12
 800ae40:	f85d eb04 	ldr.w	lr, [sp], #4
 800ae44:	b004      	add	sp, #16
 800ae46:	4770      	bx	lr
 800ae48:	20000040 	.word	0x20000040

0800ae4c <_puts_r>:
 800ae4c:	6a03      	ldr	r3, [r0, #32]
 800ae4e:	b570      	push	{r4, r5, r6, lr}
 800ae50:	6884      	ldr	r4, [r0, #8]
 800ae52:	4605      	mov	r5, r0
 800ae54:	460e      	mov	r6, r1
 800ae56:	b90b      	cbnz	r3, 800ae5c <_puts_r+0x10>
 800ae58:	f7ff ffb0 	bl	800adbc <__sinit>
 800ae5c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ae5e:	07db      	lsls	r3, r3, #31
 800ae60:	d405      	bmi.n	800ae6e <_puts_r+0x22>
 800ae62:	89a3      	ldrh	r3, [r4, #12]
 800ae64:	0598      	lsls	r0, r3, #22
 800ae66:	d402      	bmi.n	800ae6e <_puts_r+0x22>
 800ae68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ae6a:	f000 f99e 	bl	800b1aa <__retarget_lock_acquire_recursive>
 800ae6e:	89a3      	ldrh	r3, [r4, #12]
 800ae70:	0719      	lsls	r1, r3, #28
 800ae72:	d502      	bpl.n	800ae7a <_puts_r+0x2e>
 800ae74:	6923      	ldr	r3, [r4, #16]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d135      	bne.n	800aee6 <_puts_r+0x9a>
 800ae7a:	4621      	mov	r1, r4
 800ae7c:	4628      	mov	r0, r5
 800ae7e:	f000 f8c5 	bl	800b00c <__swsetup_r>
 800ae82:	b380      	cbz	r0, 800aee6 <_puts_r+0x9a>
 800ae84:	f04f 35ff 	mov.w	r5, #4294967295
 800ae88:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ae8a:	07da      	lsls	r2, r3, #31
 800ae8c:	d405      	bmi.n	800ae9a <_puts_r+0x4e>
 800ae8e:	89a3      	ldrh	r3, [r4, #12]
 800ae90:	059b      	lsls	r3, r3, #22
 800ae92:	d402      	bmi.n	800ae9a <_puts_r+0x4e>
 800ae94:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ae96:	f000 f989 	bl	800b1ac <__retarget_lock_release_recursive>
 800ae9a:	4628      	mov	r0, r5
 800ae9c:	bd70      	pop	{r4, r5, r6, pc}
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	da04      	bge.n	800aeac <_puts_r+0x60>
 800aea2:	69a2      	ldr	r2, [r4, #24]
 800aea4:	429a      	cmp	r2, r3
 800aea6:	dc17      	bgt.n	800aed8 <_puts_r+0x8c>
 800aea8:	290a      	cmp	r1, #10
 800aeaa:	d015      	beq.n	800aed8 <_puts_r+0x8c>
 800aeac:	6823      	ldr	r3, [r4, #0]
 800aeae:	1c5a      	adds	r2, r3, #1
 800aeb0:	6022      	str	r2, [r4, #0]
 800aeb2:	7019      	strb	r1, [r3, #0]
 800aeb4:	68a3      	ldr	r3, [r4, #8]
 800aeb6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800aeba:	3b01      	subs	r3, #1
 800aebc:	60a3      	str	r3, [r4, #8]
 800aebe:	2900      	cmp	r1, #0
 800aec0:	d1ed      	bne.n	800ae9e <_puts_r+0x52>
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	da11      	bge.n	800aeea <_puts_r+0x9e>
 800aec6:	4622      	mov	r2, r4
 800aec8:	210a      	movs	r1, #10
 800aeca:	4628      	mov	r0, r5
 800aecc:	f000 f85f 	bl	800af8e <__swbuf_r>
 800aed0:	3001      	adds	r0, #1
 800aed2:	d0d7      	beq.n	800ae84 <_puts_r+0x38>
 800aed4:	250a      	movs	r5, #10
 800aed6:	e7d7      	b.n	800ae88 <_puts_r+0x3c>
 800aed8:	4622      	mov	r2, r4
 800aeda:	4628      	mov	r0, r5
 800aedc:	f000 f857 	bl	800af8e <__swbuf_r>
 800aee0:	3001      	adds	r0, #1
 800aee2:	d1e7      	bne.n	800aeb4 <_puts_r+0x68>
 800aee4:	e7ce      	b.n	800ae84 <_puts_r+0x38>
 800aee6:	3e01      	subs	r6, #1
 800aee8:	e7e4      	b.n	800aeb4 <_puts_r+0x68>
 800aeea:	6823      	ldr	r3, [r4, #0]
 800aeec:	1c5a      	adds	r2, r3, #1
 800aeee:	6022      	str	r2, [r4, #0]
 800aef0:	220a      	movs	r2, #10
 800aef2:	701a      	strb	r2, [r3, #0]
 800aef4:	e7ee      	b.n	800aed4 <_puts_r+0x88>
	...

0800aef8 <puts>:
 800aef8:	4b02      	ldr	r3, [pc, #8]	@ (800af04 <puts+0xc>)
 800aefa:	4601      	mov	r1, r0
 800aefc:	6818      	ldr	r0, [r3, #0]
 800aefe:	f7ff bfa5 	b.w	800ae4c <_puts_r>
 800af02:	bf00      	nop
 800af04:	20000040 	.word	0x20000040

0800af08 <__sread>:
 800af08:	b510      	push	{r4, lr}
 800af0a:	460c      	mov	r4, r1
 800af0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af10:	f000 f8fc 	bl	800b10c <_read_r>
 800af14:	2800      	cmp	r0, #0
 800af16:	bfab      	itete	ge
 800af18:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800af1a:	89a3      	ldrhlt	r3, [r4, #12]
 800af1c:	181b      	addge	r3, r3, r0
 800af1e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800af22:	bfac      	ite	ge
 800af24:	6563      	strge	r3, [r4, #84]	@ 0x54
 800af26:	81a3      	strhlt	r3, [r4, #12]
 800af28:	bd10      	pop	{r4, pc}

0800af2a <__swrite>:
 800af2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af2e:	461f      	mov	r7, r3
 800af30:	898b      	ldrh	r3, [r1, #12]
 800af32:	05db      	lsls	r3, r3, #23
 800af34:	4605      	mov	r5, r0
 800af36:	460c      	mov	r4, r1
 800af38:	4616      	mov	r6, r2
 800af3a:	d505      	bpl.n	800af48 <__swrite+0x1e>
 800af3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af40:	2302      	movs	r3, #2
 800af42:	2200      	movs	r2, #0
 800af44:	f000 f8d0 	bl	800b0e8 <_lseek_r>
 800af48:	89a3      	ldrh	r3, [r4, #12]
 800af4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800af4e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800af52:	81a3      	strh	r3, [r4, #12]
 800af54:	4632      	mov	r2, r6
 800af56:	463b      	mov	r3, r7
 800af58:	4628      	mov	r0, r5
 800af5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800af5e:	f000 b8e7 	b.w	800b130 <_write_r>

0800af62 <__sseek>:
 800af62:	b510      	push	{r4, lr}
 800af64:	460c      	mov	r4, r1
 800af66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af6a:	f000 f8bd 	bl	800b0e8 <_lseek_r>
 800af6e:	1c43      	adds	r3, r0, #1
 800af70:	89a3      	ldrh	r3, [r4, #12]
 800af72:	bf15      	itete	ne
 800af74:	6560      	strne	r0, [r4, #84]	@ 0x54
 800af76:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800af7a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800af7e:	81a3      	strheq	r3, [r4, #12]
 800af80:	bf18      	it	ne
 800af82:	81a3      	strhne	r3, [r4, #12]
 800af84:	bd10      	pop	{r4, pc}

0800af86 <__sclose>:
 800af86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af8a:	f000 b89d 	b.w	800b0c8 <_close_r>

0800af8e <__swbuf_r>:
 800af8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af90:	460e      	mov	r6, r1
 800af92:	4614      	mov	r4, r2
 800af94:	4605      	mov	r5, r0
 800af96:	b118      	cbz	r0, 800afa0 <__swbuf_r+0x12>
 800af98:	6a03      	ldr	r3, [r0, #32]
 800af9a:	b90b      	cbnz	r3, 800afa0 <__swbuf_r+0x12>
 800af9c:	f7ff ff0e 	bl	800adbc <__sinit>
 800afa0:	69a3      	ldr	r3, [r4, #24]
 800afa2:	60a3      	str	r3, [r4, #8]
 800afa4:	89a3      	ldrh	r3, [r4, #12]
 800afa6:	071a      	lsls	r2, r3, #28
 800afa8:	d501      	bpl.n	800afae <__swbuf_r+0x20>
 800afaa:	6923      	ldr	r3, [r4, #16]
 800afac:	b943      	cbnz	r3, 800afc0 <__swbuf_r+0x32>
 800afae:	4621      	mov	r1, r4
 800afb0:	4628      	mov	r0, r5
 800afb2:	f000 f82b 	bl	800b00c <__swsetup_r>
 800afb6:	b118      	cbz	r0, 800afc0 <__swbuf_r+0x32>
 800afb8:	f04f 37ff 	mov.w	r7, #4294967295
 800afbc:	4638      	mov	r0, r7
 800afbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800afc0:	6823      	ldr	r3, [r4, #0]
 800afc2:	6922      	ldr	r2, [r4, #16]
 800afc4:	1a98      	subs	r0, r3, r2
 800afc6:	6963      	ldr	r3, [r4, #20]
 800afc8:	b2f6      	uxtb	r6, r6
 800afca:	4283      	cmp	r3, r0
 800afcc:	4637      	mov	r7, r6
 800afce:	dc05      	bgt.n	800afdc <__swbuf_r+0x4e>
 800afd0:	4621      	mov	r1, r4
 800afd2:	4628      	mov	r0, r5
 800afd4:	f000 fd46 	bl	800ba64 <_fflush_r>
 800afd8:	2800      	cmp	r0, #0
 800afda:	d1ed      	bne.n	800afb8 <__swbuf_r+0x2a>
 800afdc:	68a3      	ldr	r3, [r4, #8]
 800afde:	3b01      	subs	r3, #1
 800afe0:	60a3      	str	r3, [r4, #8]
 800afe2:	6823      	ldr	r3, [r4, #0]
 800afe4:	1c5a      	adds	r2, r3, #1
 800afe6:	6022      	str	r2, [r4, #0]
 800afe8:	701e      	strb	r6, [r3, #0]
 800afea:	6962      	ldr	r2, [r4, #20]
 800afec:	1c43      	adds	r3, r0, #1
 800afee:	429a      	cmp	r2, r3
 800aff0:	d004      	beq.n	800affc <__swbuf_r+0x6e>
 800aff2:	89a3      	ldrh	r3, [r4, #12]
 800aff4:	07db      	lsls	r3, r3, #31
 800aff6:	d5e1      	bpl.n	800afbc <__swbuf_r+0x2e>
 800aff8:	2e0a      	cmp	r6, #10
 800affa:	d1df      	bne.n	800afbc <__swbuf_r+0x2e>
 800affc:	4621      	mov	r1, r4
 800affe:	4628      	mov	r0, r5
 800b000:	f000 fd30 	bl	800ba64 <_fflush_r>
 800b004:	2800      	cmp	r0, #0
 800b006:	d0d9      	beq.n	800afbc <__swbuf_r+0x2e>
 800b008:	e7d6      	b.n	800afb8 <__swbuf_r+0x2a>
	...

0800b00c <__swsetup_r>:
 800b00c:	b538      	push	{r3, r4, r5, lr}
 800b00e:	4b29      	ldr	r3, [pc, #164]	@ (800b0b4 <__swsetup_r+0xa8>)
 800b010:	4605      	mov	r5, r0
 800b012:	6818      	ldr	r0, [r3, #0]
 800b014:	460c      	mov	r4, r1
 800b016:	b118      	cbz	r0, 800b020 <__swsetup_r+0x14>
 800b018:	6a03      	ldr	r3, [r0, #32]
 800b01a:	b90b      	cbnz	r3, 800b020 <__swsetup_r+0x14>
 800b01c:	f7ff fece 	bl	800adbc <__sinit>
 800b020:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b024:	0719      	lsls	r1, r3, #28
 800b026:	d422      	bmi.n	800b06e <__swsetup_r+0x62>
 800b028:	06da      	lsls	r2, r3, #27
 800b02a:	d407      	bmi.n	800b03c <__swsetup_r+0x30>
 800b02c:	2209      	movs	r2, #9
 800b02e:	602a      	str	r2, [r5, #0]
 800b030:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b034:	81a3      	strh	r3, [r4, #12]
 800b036:	f04f 30ff 	mov.w	r0, #4294967295
 800b03a:	e033      	b.n	800b0a4 <__swsetup_r+0x98>
 800b03c:	0758      	lsls	r0, r3, #29
 800b03e:	d512      	bpl.n	800b066 <__swsetup_r+0x5a>
 800b040:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b042:	b141      	cbz	r1, 800b056 <__swsetup_r+0x4a>
 800b044:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b048:	4299      	cmp	r1, r3
 800b04a:	d002      	beq.n	800b052 <__swsetup_r+0x46>
 800b04c:	4628      	mov	r0, r5
 800b04e:	f000 f8bd 	bl	800b1cc <_free_r>
 800b052:	2300      	movs	r3, #0
 800b054:	6363      	str	r3, [r4, #52]	@ 0x34
 800b056:	89a3      	ldrh	r3, [r4, #12]
 800b058:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b05c:	81a3      	strh	r3, [r4, #12]
 800b05e:	2300      	movs	r3, #0
 800b060:	6063      	str	r3, [r4, #4]
 800b062:	6923      	ldr	r3, [r4, #16]
 800b064:	6023      	str	r3, [r4, #0]
 800b066:	89a3      	ldrh	r3, [r4, #12]
 800b068:	f043 0308 	orr.w	r3, r3, #8
 800b06c:	81a3      	strh	r3, [r4, #12]
 800b06e:	6923      	ldr	r3, [r4, #16]
 800b070:	b94b      	cbnz	r3, 800b086 <__swsetup_r+0x7a>
 800b072:	89a3      	ldrh	r3, [r4, #12]
 800b074:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b078:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b07c:	d003      	beq.n	800b086 <__swsetup_r+0x7a>
 800b07e:	4621      	mov	r1, r4
 800b080:	4628      	mov	r0, r5
 800b082:	f000 fd3d 	bl	800bb00 <__smakebuf_r>
 800b086:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b08a:	f013 0201 	ands.w	r2, r3, #1
 800b08e:	d00a      	beq.n	800b0a6 <__swsetup_r+0x9a>
 800b090:	2200      	movs	r2, #0
 800b092:	60a2      	str	r2, [r4, #8]
 800b094:	6962      	ldr	r2, [r4, #20]
 800b096:	4252      	negs	r2, r2
 800b098:	61a2      	str	r2, [r4, #24]
 800b09a:	6922      	ldr	r2, [r4, #16]
 800b09c:	b942      	cbnz	r2, 800b0b0 <__swsetup_r+0xa4>
 800b09e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b0a2:	d1c5      	bne.n	800b030 <__swsetup_r+0x24>
 800b0a4:	bd38      	pop	{r3, r4, r5, pc}
 800b0a6:	0799      	lsls	r1, r3, #30
 800b0a8:	bf58      	it	pl
 800b0aa:	6962      	ldrpl	r2, [r4, #20]
 800b0ac:	60a2      	str	r2, [r4, #8]
 800b0ae:	e7f4      	b.n	800b09a <__swsetup_r+0x8e>
 800b0b0:	2000      	movs	r0, #0
 800b0b2:	e7f7      	b.n	800b0a4 <__swsetup_r+0x98>
 800b0b4:	20000040 	.word	0x20000040

0800b0b8 <memset>:
 800b0b8:	4402      	add	r2, r0
 800b0ba:	4603      	mov	r3, r0
 800b0bc:	4293      	cmp	r3, r2
 800b0be:	d100      	bne.n	800b0c2 <memset+0xa>
 800b0c0:	4770      	bx	lr
 800b0c2:	f803 1b01 	strb.w	r1, [r3], #1
 800b0c6:	e7f9      	b.n	800b0bc <memset+0x4>

0800b0c8 <_close_r>:
 800b0c8:	b538      	push	{r3, r4, r5, lr}
 800b0ca:	4d06      	ldr	r5, [pc, #24]	@ (800b0e4 <_close_r+0x1c>)
 800b0cc:	2300      	movs	r3, #0
 800b0ce:	4604      	mov	r4, r0
 800b0d0:	4608      	mov	r0, r1
 800b0d2:	602b      	str	r3, [r5, #0]
 800b0d4:	f7f7 fb1b 	bl	800270e <_close>
 800b0d8:	1c43      	adds	r3, r0, #1
 800b0da:	d102      	bne.n	800b0e2 <_close_r+0x1a>
 800b0dc:	682b      	ldr	r3, [r5, #0]
 800b0de:	b103      	cbz	r3, 800b0e2 <_close_r+0x1a>
 800b0e0:	6023      	str	r3, [r4, #0]
 800b0e2:	bd38      	pop	{r3, r4, r5, pc}
 800b0e4:	200005fc 	.word	0x200005fc

0800b0e8 <_lseek_r>:
 800b0e8:	b538      	push	{r3, r4, r5, lr}
 800b0ea:	4d07      	ldr	r5, [pc, #28]	@ (800b108 <_lseek_r+0x20>)
 800b0ec:	4604      	mov	r4, r0
 800b0ee:	4608      	mov	r0, r1
 800b0f0:	4611      	mov	r1, r2
 800b0f2:	2200      	movs	r2, #0
 800b0f4:	602a      	str	r2, [r5, #0]
 800b0f6:	461a      	mov	r2, r3
 800b0f8:	f7f7 fb30 	bl	800275c <_lseek>
 800b0fc:	1c43      	adds	r3, r0, #1
 800b0fe:	d102      	bne.n	800b106 <_lseek_r+0x1e>
 800b100:	682b      	ldr	r3, [r5, #0]
 800b102:	b103      	cbz	r3, 800b106 <_lseek_r+0x1e>
 800b104:	6023      	str	r3, [r4, #0]
 800b106:	bd38      	pop	{r3, r4, r5, pc}
 800b108:	200005fc 	.word	0x200005fc

0800b10c <_read_r>:
 800b10c:	b538      	push	{r3, r4, r5, lr}
 800b10e:	4d07      	ldr	r5, [pc, #28]	@ (800b12c <_read_r+0x20>)
 800b110:	4604      	mov	r4, r0
 800b112:	4608      	mov	r0, r1
 800b114:	4611      	mov	r1, r2
 800b116:	2200      	movs	r2, #0
 800b118:	602a      	str	r2, [r5, #0]
 800b11a:	461a      	mov	r2, r3
 800b11c:	f7f7 fada 	bl	80026d4 <_read>
 800b120:	1c43      	adds	r3, r0, #1
 800b122:	d102      	bne.n	800b12a <_read_r+0x1e>
 800b124:	682b      	ldr	r3, [r5, #0]
 800b126:	b103      	cbz	r3, 800b12a <_read_r+0x1e>
 800b128:	6023      	str	r3, [r4, #0]
 800b12a:	bd38      	pop	{r3, r4, r5, pc}
 800b12c:	200005fc 	.word	0x200005fc

0800b130 <_write_r>:
 800b130:	b538      	push	{r3, r4, r5, lr}
 800b132:	4d07      	ldr	r5, [pc, #28]	@ (800b150 <_write_r+0x20>)
 800b134:	4604      	mov	r4, r0
 800b136:	4608      	mov	r0, r1
 800b138:	4611      	mov	r1, r2
 800b13a:	2200      	movs	r2, #0
 800b13c:	602a      	str	r2, [r5, #0]
 800b13e:	461a      	mov	r2, r3
 800b140:	f7fd fe74 	bl	8008e2c <_write>
 800b144:	1c43      	adds	r3, r0, #1
 800b146:	d102      	bne.n	800b14e <_write_r+0x1e>
 800b148:	682b      	ldr	r3, [r5, #0]
 800b14a:	b103      	cbz	r3, 800b14e <_write_r+0x1e>
 800b14c:	6023      	str	r3, [r4, #0]
 800b14e:	bd38      	pop	{r3, r4, r5, pc}
 800b150:	200005fc 	.word	0x200005fc

0800b154 <__errno>:
 800b154:	4b01      	ldr	r3, [pc, #4]	@ (800b15c <__errno+0x8>)
 800b156:	6818      	ldr	r0, [r3, #0]
 800b158:	4770      	bx	lr
 800b15a:	bf00      	nop
 800b15c:	20000040 	.word	0x20000040

0800b160 <__libc_init_array>:
 800b160:	b570      	push	{r4, r5, r6, lr}
 800b162:	4d0d      	ldr	r5, [pc, #52]	@ (800b198 <__libc_init_array+0x38>)
 800b164:	4c0d      	ldr	r4, [pc, #52]	@ (800b19c <__libc_init_array+0x3c>)
 800b166:	1b64      	subs	r4, r4, r5
 800b168:	10a4      	asrs	r4, r4, #2
 800b16a:	2600      	movs	r6, #0
 800b16c:	42a6      	cmp	r6, r4
 800b16e:	d109      	bne.n	800b184 <__libc_init_array+0x24>
 800b170:	4d0b      	ldr	r5, [pc, #44]	@ (800b1a0 <__libc_init_array+0x40>)
 800b172:	4c0c      	ldr	r4, [pc, #48]	@ (800b1a4 <__libc_init_array+0x44>)
 800b174:	f000 fd32 	bl	800bbdc <_init>
 800b178:	1b64      	subs	r4, r4, r5
 800b17a:	10a4      	asrs	r4, r4, #2
 800b17c:	2600      	movs	r6, #0
 800b17e:	42a6      	cmp	r6, r4
 800b180:	d105      	bne.n	800b18e <__libc_init_array+0x2e>
 800b182:	bd70      	pop	{r4, r5, r6, pc}
 800b184:	f855 3b04 	ldr.w	r3, [r5], #4
 800b188:	4798      	blx	r3
 800b18a:	3601      	adds	r6, #1
 800b18c:	e7ee      	b.n	800b16c <__libc_init_array+0xc>
 800b18e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b192:	4798      	blx	r3
 800b194:	3601      	adds	r6, #1
 800b196:	e7f2      	b.n	800b17e <__libc_init_array+0x1e>
 800b198:	0800cde0 	.word	0x0800cde0
 800b19c:	0800cde0 	.word	0x0800cde0
 800b1a0:	0800cde0 	.word	0x0800cde0
 800b1a4:	0800cde4 	.word	0x0800cde4

0800b1a8 <__retarget_lock_init_recursive>:
 800b1a8:	4770      	bx	lr

0800b1aa <__retarget_lock_acquire_recursive>:
 800b1aa:	4770      	bx	lr

0800b1ac <__retarget_lock_release_recursive>:
 800b1ac:	4770      	bx	lr

0800b1ae <memcpy>:
 800b1ae:	440a      	add	r2, r1
 800b1b0:	4291      	cmp	r1, r2
 800b1b2:	f100 33ff 	add.w	r3, r0, #4294967295
 800b1b6:	d100      	bne.n	800b1ba <memcpy+0xc>
 800b1b8:	4770      	bx	lr
 800b1ba:	b510      	push	{r4, lr}
 800b1bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b1c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b1c4:	4291      	cmp	r1, r2
 800b1c6:	d1f9      	bne.n	800b1bc <memcpy+0xe>
 800b1c8:	bd10      	pop	{r4, pc}
	...

0800b1cc <_free_r>:
 800b1cc:	b538      	push	{r3, r4, r5, lr}
 800b1ce:	4605      	mov	r5, r0
 800b1d0:	2900      	cmp	r1, #0
 800b1d2:	d041      	beq.n	800b258 <_free_r+0x8c>
 800b1d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b1d8:	1f0c      	subs	r4, r1, #4
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	bfb8      	it	lt
 800b1de:	18e4      	addlt	r4, r4, r3
 800b1e0:	f000 f8e0 	bl	800b3a4 <__malloc_lock>
 800b1e4:	4a1d      	ldr	r2, [pc, #116]	@ (800b25c <_free_r+0x90>)
 800b1e6:	6813      	ldr	r3, [r2, #0]
 800b1e8:	b933      	cbnz	r3, 800b1f8 <_free_r+0x2c>
 800b1ea:	6063      	str	r3, [r4, #4]
 800b1ec:	6014      	str	r4, [r2, #0]
 800b1ee:	4628      	mov	r0, r5
 800b1f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b1f4:	f000 b8dc 	b.w	800b3b0 <__malloc_unlock>
 800b1f8:	42a3      	cmp	r3, r4
 800b1fa:	d908      	bls.n	800b20e <_free_r+0x42>
 800b1fc:	6820      	ldr	r0, [r4, #0]
 800b1fe:	1821      	adds	r1, r4, r0
 800b200:	428b      	cmp	r3, r1
 800b202:	bf01      	itttt	eq
 800b204:	6819      	ldreq	r1, [r3, #0]
 800b206:	685b      	ldreq	r3, [r3, #4]
 800b208:	1809      	addeq	r1, r1, r0
 800b20a:	6021      	streq	r1, [r4, #0]
 800b20c:	e7ed      	b.n	800b1ea <_free_r+0x1e>
 800b20e:	461a      	mov	r2, r3
 800b210:	685b      	ldr	r3, [r3, #4]
 800b212:	b10b      	cbz	r3, 800b218 <_free_r+0x4c>
 800b214:	42a3      	cmp	r3, r4
 800b216:	d9fa      	bls.n	800b20e <_free_r+0x42>
 800b218:	6811      	ldr	r1, [r2, #0]
 800b21a:	1850      	adds	r0, r2, r1
 800b21c:	42a0      	cmp	r0, r4
 800b21e:	d10b      	bne.n	800b238 <_free_r+0x6c>
 800b220:	6820      	ldr	r0, [r4, #0]
 800b222:	4401      	add	r1, r0
 800b224:	1850      	adds	r0, r2, r1
 800b226:	4283      	cmp	r3, r0
 800b228:	6011      	str	r1, [r2, #0]
 800b22a:	d1e0      	bne.n	800b1ee <_free_r+0x22>
 800b22c:	6818      	ldr	r0, [r3, #0]
 800b22e:	685b      	ldr	r3, [r3, #4]
 800b230:	6053      	str	r3, [r2, #4]
 800b232:	4408      	add	r0, r1
 800b234:	6010      	str	r0, [r2, #0]
 800b236:	e7da      	b.n	800b1ee <_free_r+0x22>
 800b238:	d902      	bls.n	800b240 <_free_r+0x74>
 800b23a:	230c      	movs	r3, #12
 800b23c:	602b      	str	r3, [r5, #0]
 800b23e:	e7d6      	b.n	800b1ee <_free_r+0x22>
 800b240:	6820      	ldr	r0, [r4, #0]
 800b242:	1821      	adds	r1, r4, r0
 800b244:	428b      	cmp	r3, r1
 800b246:	bf04      	itt	eq
 800b248:	6819      	ldreq	r1, [r3, #0]
 800b24a:	685b      	ldreq	r3, [r3, #4]
 800b24c:	6063      	str	r3, [r4, #4]
 800b24e:	bf04      	itt	eq
 800b250:	1809      	addeq	r1, r1, r0
 800b252:	6021      	streq	r1, [r4, #0]
 800b254:	6054      	str	r4, [r2, #4]
 800b256:	e7ca      	b.n	800b1ee <_free_r+0x22>
 800b258:	bd38      	pop	{r3, r4, r5, pc}
 800b25a:	bf00      	nop
 800b25c:	20000608 	.word	0x20000608

0800b260 <sbrk_aligned>:
 800b260:	b570      	push	{r4, r5, r6, lr}
 800b262:	4e0f      	ldr	r6, [pc, #60]	@ (800b2a0 <sbrk_aligned+0x40>)
 800b264:	460c      	mov	r4, r1
 800b266:	6831      	ldr	r1, [r6, #0]
 800b268:	4605      	mov	r5, r0
 800b26a:	b911      	cbnz	r1, 800b272 <sbrk_aligned+0x12>
 800b26c:	f000 fca6 	bl	800bbbc <_sbrk_r>
 800b270:	6030      	str	r0, [r6, #0]
 800b272:	4621      	mov	r1, r4
 800b274:	4628      	mov	r0, r5
 800b276:	f000 fca1 	bl	800bbbc <_sbrk_r>
 800b27a:	1c43      	adds	r3, r0, #1
 800b27c:	d103      	bne.n	800b286 <sbrk_aligned+0x26>
 800b27e:	f04f 34ff 	mov.w	r4, #4294967295
 800b282:	4620      	mov	r0, r4
 800b284:	bd70      	pop	{r4, r5, r6, pc}
 800b286:	1cc4      	adds	r4, r0, #3
 800b288:	f024 0403 	bic.w	r4, r4, #3
 800b28c:	42a0      	cmp	r0, r4
 800b28e:	d0f8      	beq.n	800b282 <sbrk_aligned+0x22>
 800b290:	1a21      	subs	r1, r4, r0
 800b292:	4628      	mov	r0, r5
 800b294:	f000 fc92 	bl	800bbbc <_sbrk_r>
 800b298:	3001      	adds	r0, #1
 800b29a:	d1f2      	bne.n	800b282 <sbrk_aligned+0x22>
 800b29c:	e7ef      	b.n	800b27e <sbrk_aligned+0x1e>
 800b29e:	bf00      	nop
 800b2a0:	20000604 	.word	0x20000604

0800b2a4 <_malloc_r>:
 800b2a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b2a8:	1ccd      	adds	r5, r1, #3
 800b2aa:	f025 0503 	bic.w	r5, r5, #3
 800b2ae:	3508      	adds	r5, #8
 800b2b0:	2d0c      	cmp	r5, #12
 800b2b2:	bf38      	it	cc
 800b2b4:	250c      	movcc	r5, #12
 800b2b6:	2d00      	cmp	r5, #0
 800b2b8:	4606      	mov	r6, r0
 800b2ba:	db01      	blt.n	800b2c0 <_malloc_r+0x1c>
 800b2bc:	42a9      	cmp	r1, r5
 800b2be:	d904      	bls.n	800b2ca <_malloc_r+0x26>
 800b2c0:	230c      	movs	r3, #12
 800b2c2:	6033      	str	r3, [r6, #0]
 800b2c4:	2000      	movs	r0, #0
 800b2c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b2ca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b3a0 <_malloc_r+0xfc>
 800b2ce:	f000 f869 	bl	800b3a4 <__malloc_lock>
 800b2d2:	f8d8 3000 	ldr.w	r3, [r8]
 800b2d6:	461c      	mov	r4, r3
 800b2d8:	bb44      	cbnz	r4, 800b32c <_malloc_r+0x88>
 800b2da:	4629      	mov	r1, r5
 800b2dc:	4630      	mov	r0, r6
 800b2de:	f7ff ffbf 	bl	800b260 <sbrk_aligned>
 800b2e2:	1c43      	adds	r3, r0, #1
 800b2e4:	4604      	mov	r4, r0
 800b2e6:	d158      	bne.n	800b39a <_malloc_r+0xf6>
 800b2e8:	f8d8 4000 	ldr.w	r4, [r8]
 800b2ec:	4627      	mov	r7, r4
 800b2ee:	2f00      	cmp	r7, #0
 800b2f0:	d143      	bne.n	800b37a <_malloc_r+0xd6>
 800b2f2:	2c00      	cmp	r4, #0
 800b2f4:	d04b      	beq.n	800b38e <_malloc_r+0xea>
 800b2f6:	6823      	ldr	r3, [r4, #0]
 800b2f8:	4639      	mov	r1, r7
 800b2fa:	4630      	mov	r0, r6
 800b2fc:	eb04 0903 	add.w	r9, r4, r3
 800b300:	f000 fc5c 	bl	800bbbc <_sbrk_r>
 800b304:	4581      	cmp	r9, r0
 800b306:	d142      	bne.n	800b38e <_malloc_r+0xea>
 800b308:	6821      	ldr	r1, [r4, #0]
 800b30a:	1a6d      	subs	r5, r5, r1
 800b30c:	4629      	mov	r1, r5
 800b30e:	4630      	mov	r0, r6
 800b310:	f7ff ffa6 	bl	800b260 <sbrk_aligned>
 800b314:	3001      	adds	r0, #1
 800b316:	d03a      	beq.n	800b38e <_malloc_r+0xea>
 800b318:	6823      	ldr	r3, [r4, #0]
 800b31a:	442b      	add	r3, r5
 800b31c:	6023      	str	r3, [r4, #0]
 800b31e:	f8d8 3000 	ldr.w	r3, [r8]
 800b322:	685a      	ldr	r2, [r3, #4]
 800b324:	bb62      	cbnz	r2, 800b380 <_malloc_r+0xdc>
 800b326:	f8c8 7000 	str.w	r7, [r8]
 800b32a:	e00f      	b.n	800b34c <_malloc_r+0xa8>
 800b32c:	6822      	ldr	r2, [r4, #0]
 800b32e:	1b52      	subs	r2, r2, r5
 800b330:	d420      	bmi.n	800b374 <_malloc_r+0xd0>
 800b332:	2a0b      	cmp	r2, #11
 800b334:	d917      	bls.n	800b366 <_malloc_r+0xc2>
 800b336:	1961      	adds	r1, r4, r5
 800b338:	42a3      	cmp	r3, r4
 800b33a:	6025      	str	r5, [r4, #0]
 800b33c:	bf18      	it	ne
 800b33e:	6059      	strne	r1, [r3, #4]
 800b340:	6863      	ldr	r3, [r4, #4]
 800b342:	bf08      	it	eq
 800b344:	f8c8 1000 	streq.w	r1, [r8]
 800b348:	5162      	str	r2, [r4, r5]
 800b34a:	604b      	str	r3, [r1, #4]
 800b34c:	4630      	mov	r0, r6
 800b34e:	f000 f82f 	bl	800b3b0 <__malloc_unlock>
 800b352:	f104 000b 	add.w	r0, r4, #11
 800b356:	1d23      	adds	r3, r4, #4
 800b358:	f020 0007 	bic.w	r0, r0, #7
 800b35c:	1ac2      	subs	r2, r0, r3
 800b35e:	bf1c      	itt	ne
 800b360:	1a1b      	subne	r3, r3, r0
 800b362:	50a3      	strne	r3, [r4, r2]
 800b364:	e7af      	b.n	800b2c6 <_malloc_r+0x22>
 800b366:	6862      	ldr	r2, [r4, #4]
 800b368:	42a3      	cmp	r3, r4
 800b36a:	bf0c      	ite	eq
 800b36c:	f8c8 2000 	streq.w	r2, [r8]
 800b370:	605a      	strne	r2, [r3, #4]
 800b372:	e7eb      	b.n	800b34c <_malloc_r+0xa8>
 800b374:	4623      	mov	r3, r4
 800b376:	6864      	ldr	r4, [r4, #4]
 800b378:	e7ae      	b.n	800b2d8 <_malloc_r+0x34>
 800b37a:	463c      	mov	r4, r7
 800b37c:	687f      	ldr	r7, [r7, #4]
 800b37e:	e7b6      	b.n	800b2ee <_malloc_r+0x4a>
 800b380:	461a      	mov	r2, r3
 800b382:	685b      	ldr	r3, [r3, #4]
 800b384:	42a3      	cmp	r3, r4
 800b386:	d1fb      	bne.n	800b380 <_malloc_r+0xdc>
 800b388:	2300      	movs	r3, #0
 800b38a:	6053      	str	r3, [r2, #4]
 800b38c:	e7de      	b.n	800b34c <_malloc_r+0xa8>
 800b38e:	230c      	movs	r3, #12
 800b390:	6033      	str	r3, [r6, #0]
 800b392:	4630      	mov	r0, r6
 800b394:	f000 f80c 	bl	800b3b0 <__malloc_unlock>
 800b398:	e794      	b.n	800b2c4 <_malloc_r+0x20>
 800b39a:	6005      	str	r5, [r0, #0]
 800b39c:	e7d6      	b.n	800b34c <_malloc_r+0xa8>
 800b39e:	bf00      	nop
 800b3a0:	20000608 	.word	0x20000608

0800b3a4 <__malloc_lock>:
 800b3a4:	4801      	ldr	r0, [pc, #4]	@ (800b3ac <__malloc_lock+0x8>)
 800b3a6:	f7ff bf00 	b.w	800b1aa <__retarget_lock_acquire_recursive>
 800b3aa:	bf00      	nop
 800b3ac:	20000600 	.word	0x20000600

0800b3b0 <__malloc_unlock>:
 800b3b0:	4801      	ldr	r0, [pc, #4]	@ (800b3b8 <__malloc_unlock+0x8>)
 800b3b2:	f7ff befb 	b.w	800b1ac <__retarget_lock_release_recursive>
 800b3b6:	bf00      	nop
 800b3b8:	20000600 	.word	0x20000600

0800b3bc <__sfputc_r>:
 800b3bc:	6893      	ldr	r3, [r2, #8]
 800b3be:	3b01      	subs	r3, #1
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	b410      	push	{r4}
 800b3c4:	6093      	str	r3, [r2, #8]
 800b3c6:	da08      	bge.n	800b3da <__sfputc_r+0x1e>
 800b3c8:	6994      	ldr	r4, [r2, #24]
 800b3ca:	42a3      	cmp	r3, r4
 800b3cc:	db01      	blt.n	800b3d2 <__sfputc_r+0x16>
 800b3ce:	290a      	cmp	r1, #10
 800b3d0:	d103      	bne.n	800b3da <__sfputc_r+0x1e>
 800b3d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b3d6:	f7ff bdda 	b.w	800af8e <__swbuf_r>
 800b3da:	6813      	ldr	r3, [r2, #0]
 800b3dc:	1c58      	adds	r0, r3, #1
 800b3de:	6010      	str	r0, [r2, #0]
 800b3e0:	7019      	strb	r1, [r3, #0]
 800b3e2:	4608      	mov	r0, r1
 800b3e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b3e8:	4770      	bx	lr

0800b3ea <__sfputs_r>:
 800b3ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3ec:	4606      	mov	r6, r0
 800b3ee:	460f      	mov	r7, r1
 800b3f0:	4614      	mov	r4, r2
 800b3f2:	18d5      	adds	r5, r2, r3
 800b3f4:	42ac      	cmp	r4, r5
 800b3f6:	d101      	bne.n	800b3fc <__sfputs_r+0x12>
 800b3f8:	2000      	movs	r0, #0
 800b3fa:	e007      	b.n	800b40c <__sfputs_r+0x22>
 800b3fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b400:	463a      	mov	r2, r7
 800b402:	4630      	mov	r0, r6
 800b404:	f7ff ffda 	bl	800b3bc <__sfputc_r>
 800b408:	1c43      	adds	r3, r0, #1
 800b40a:	d1f3      	bne.n	800b3f4 <__sfputs_r+0xa>
 800b40c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b410 <_vfiprintf_r>:
 800b410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b414:	460d      	mov	r5, r1
 800b416:	b09d      	sub	sp, #116	@ 0x74
 800b418:	4614      	mov	r4, r2
 800b41a:	4698      	mov	r8, r3
 800b41c:	4606      	mov	r6, r0
 800b41e:	b118      	cbz	r0, 800b428 <_vfiprintf_r+0x18>
 800b420:	6a03      	ldr	r3, [r0, #32]
 800b422:	b90b      	cbnz	r3, 800b428 <_vfiprintf_r+0x18>
 800b424:	f7ff fcca 	bl	800adbc <__sinit>
 800b428:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b42a:	07d9      	lsls	r1, r3, #31
 800b42c:	d405      	bmi.n	800b43a <_vfiprintf_r+0x2a>
 800b42e:	89ab      	ldrh	r3, [r5, #12]
 800b430:	059a      	lsls	r2, r3, #22
 800b432:	d402      	bmi.n	800b43a <_vfiprintf_r+0x2a>
 800b434:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b436:	f7ff feb8 	bl	800b1aa <__retarget_lock_acquire_recursive>
 800b43a:	89ab      	ldrh	r3, [r5, #12]
 800b43c:	071b      	lsls	r3, r3, #28
 800b43e:	d501      	bpl.n	800b444 <_vfiprintf_r+0x34>
 800b440:	692b      	ldr	r3, [r5, #16]
 800b442:	b99b      	cbnz	r3, 800b46c <_vfiprintf_r+0x5c>
 800b444:	4629      	mov	r1, r5
 800b446:	4630      	mov	r0, r6
 800b448:	f7ff fde0 	bl	800b00c <__swsetup_r>
 800b44c:	b170      	cbz	r0, 800b46c <_vfiprintf_r+0x5c>
 800b44e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b450:	07dc      	lsls	r4, r3, #31
 800b452:	d504      	bpl.n	800b45e <_vfiprintf_r+0x4e>
 800b454:	f04f 30ff 	mov.w	r0, #4294967295
 800b458:	b01d      	add	sp, #116	@ 0x74
 800b45a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b45e:	89ab      	ldrh	r3, [r5, #12]
 800b460:	0598      	lsls	r0, r3, #22
 800b462:	d4f7      	bmi.n	800b454 <_vfiprintf_r+0x44>
 800b464:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b466:	f7ff fea1 	bl	800b1ac <__retarget_lock_release_recursive>
 800b46a:	e7f3      	b.n	800b454 <_vfiprintf_r+0x44>
 800b46c:	2300      	movs	r3, #0
 800b46e:	9309      	str	r3, [sp, #36]	@ 0x24
 800b470:	2320      	movs	r3, #32
 800b472:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b476:	f8cd 800c 	str.w	r8, [sp, #12]
 800b47a:	2330      	movs	r3, #48	@ 0x30
 800b47c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b62c <_vfiprintf_r+0x21c>
 800b480:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b484:	f04f 0901 	mov.w	r9, #1
 800b488:	4623      	mov	r3, r4
 800b48a:	469a      	mov	sl, r3
 800b48c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b490:	b10a      	cbz	r2, 800b496 <_vfiprintf_r+0x86>
 800b492:	2a25      	cmp	r2, #37	@ 0x25
 800b494:	d1f9      	bne.n	800b48a <_vfiprintf_r+0x7a>
 800b496:	ebba 0b04 	subs.w	fp, sl, r4
 800b49a:	d00b      	beq.n	800b4b4 <_vfiprintf_r+0xa4>
 800b49c:	465b      	mov	r3, fp
 800b49e:	4622      	mov	r2, r4
 800b4a0:	4629      	mov	r1, r5
 800b4a2:	4630      	mov	r0, r6
 800b4a4:	f7ff ffa1 	bl	800b3ea <__sfputs_r>
 800b4a8:	3001      	adds	r0, #1
 800b4aa:	f000 80a7 	beq.w	800b5fc <_vfiprintf_r+0x1ec>
 800b4ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b4b0:	445a      	add	r2, fp
 800b4b2:	9209      	str	r2, [sp, #36]	@ 0x24
 800b4b4:	f89a 3000 	ldrb.w	r3, [sl]
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	f000 809f 	beq.w	800b5fc <_vfiprintf_r+0x1ec>
 800b4be:	2300      	movs	r3, #0
 800b4c0:	f04f 32ff 	mov.w	r2, #4294967295
 800b4c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b4c8:	f10a 0a01 	add.w	sl, sl, #1
 800b4cc:	9304      	str	r3, [sp, #16]
 800b4ce:	9307      	str	r3, [sp, #28]
 800b4d0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b4d4:	931a      	str	r3, [sp, #104]	@ 0x68
 800b4d6:	4654      	mov	r4, sl
 800b4d8:	2205      	movs	r2, #5
 800b4da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4de:	4853      	ldr	r0, [pc, #332]	@ (800b62c <_vfiprintf_r+0x21c>)
 800b4e0:	f7f4 fe56 	bl	8000190 <memchr>
 800b4e4:	9a04      	ldr	r2, [sp, #16]
 800b4e6:	b9d8      	cbnz	r0, 800b520 <_vfiprintf_r+0x110>
 800b4e8:	06d1      	lsls	r1, r2, #27
 800b4ea:	bf44      	itt	mi
 800b4ec:	2320      	movmi	r3, #32
 800b4ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b4f2:	0713      	lsls	r3, r2, #28
 800b4f4:	bf44      	itt	mi
 800b4f6:	232b      	movmi	r3, #43	@ 0x2b
 800b4f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b4fc:	f89a 3000 	ldrb.w	r3, [sl]
 800b500:	2b2a      	cmp	r3, #42	@ 0x2a
 800b502:	d015      	beq.n	800b530 <_vfiprintf_r+0x120>
 800b504:	9a07      	ldr	r2, [sp, #28]
 800b506:	4654      	mov	r4, sl
 800b508:	2000      	movs	r0, #0
 800b50a:	f04f 0c0a 	mov.w	ip, #10
 800b50e:	4621      	mov	r1, r4
 800b510:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b514:	3b30      	subs	r3, #48	@ 0x30
 800b516:	2b09      	cmp	r3, #9
 800b518:	d94b      	bls.n	800b5b2 <_vfiprintf_r+0x1a2>
 800b51a:	b1b0      	cbz	r0, 800b54a <_vfiprintf_r+0x13a>
 800b51c:	9207      	str	r2, [sp, #28]
 800b51e:	e014      	b.n	800b54a <_vfiprintf_r+0x13a>
 800b520:	eba0 0308 	sub.w	r3, r0, r8
 800b524:	fa09 f303 	lsl.w	r3, r9, r3
 800b528:	4313      	orrs	r3, r2
 800b52a:	9304      	str	r3, [sp, #16]
 800b52c:	46a2      	mov	sl, r4
 800b52e:	e7d2      	b.n	800b4d6 <_vfiprintf_r+0xc6>
 800b530:	9b03      	ldr	r3, [sp, #12]
 800b532:	1d19      	adds	r1, r3, #4
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	9103      	str	r1, [sp, #12]
 800b538:	2b00      	cmp	r3, #0
 800b53a:	bfbb      	ittet	lt
 800b53c:	425b      	neglt	r3, r3
 800b53e:	f042 0202 	orrlt.w	r2, r2, #2
 800b542:	9307      	strge	r3, [sp, #28]
 800b544:	9307      	strlt	r3, [sp, #28]
 800b546:	bfb8      	it	lt
 800b548:	9204      	strlt	r2, [sp, #16]
 800b54a:	7823      	ldrb	r3, [r4, #0]
 800b54c:	2b2e      	cmp	r3, #46	@ 0x2e
 800b54e:	d10a      	bne.n	800b566 <_vfiprintf_r+0x156>
 800b550:	7863      	ldrb	r3, [r4, #1]
 800b552:	2b2a      	cmp	r3, #42	@ 0x2a
 800b554:	d132      	bne.n	800b5bc <_vfiprintf_r+0x1ac>
 800b556:	9b03      	ldr	r3, [sp, #12]
 800b558:	1d1a      	adds	r2, r3, #4
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	9203      	str	r2, [sp, #12]
 800b55e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b562:	3402      	adds	r4, #2
 800b564:	9305      	str	r3, [sp, #20]
 800b566:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b63c <_vfiprintf_r+0x22c>
 800b56a:	7821      	ldrb	r1, [r4, #0]
 800b56c:	2203      	movs	r2, #3
 800b56e:	4650      	mov	r0, sl
 800b570:	f7f4 fe0e 	bl	8000190 <memchr>
 800b574:	b138      	cbz	r0, 800b586 <_vfiprintf_r+0x176>
 800b576:	9b04      	ldr	r3, [sp, #16]
 800b578:	eba0 000a 	sub.w	r0, r0, sl
 800b57c:	2240      	movs	r2, #64	@ 0x40
 800b57e:	4082      	lsls	r2, r0
 800b580:	4313      	orrs	r3, r2
 800b582:	3401      	adds	r4, #1
 800b584:	9304      	str	r3, [sp, #16]
 800b586:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b58a:	4829      	ldr	r0, [pc, #164]	@ (800b630 <_vfiprintf_r+0x220>)
 800b58c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b590:	2206      	movs	r2, #6
 800b592:	f7f4 fdfd 	bl	8000190 <memchr>
 800b596:	2800      	cmp	r0, #0
 800b598:	d03f      	beq.n	800b61a <_vfiprintf_r+0x20a>
 800b59a:	4b26      	ldr	r3, [pc, #152]	@ (800b634 <_vfiprintf_r+0x224>)
 800b59c:	bb1b      	cbnz	r3, 800b5e6 <_vfiprintf_r+0x1d6>
 800b59e:	9b03      	ldr	r3, [sp, #12]
 800b5a0:	3307      	adds	r3, #7
 800b5a2:	f023 0307 	bic.w	r3, r3, #7
 800b5a6:	3308      	adds	r3, #8
 800b5a8:	9303      	str	r3, [sp, #12]
 800b5aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b5ac:	443b      	add	r3, r7
 800b5ae:	9309      	str	r3, [sp, #36]	@ 0x24
 800b5b0:	e76a      	b.n	800b488 <_vfiprintf_r+0x78>
 800b5b2:	fb0c 3202 	mla	r2, ip, r2, r3
 800b5b6:	460c      	mov	r4, r1
 800b5b8:	2001      	movs	r0, #1
 800b5ba:	e7a8      	b.n	800b50e <_vfiprintf_r+0xfe>
 800b5bc:	2300      	movs	r3, #0
 800b5be:	3401      	adds	r4, #1
 800b5c0:	9305      	str	r3, [sp, #20]
 800b5c2:	4619      	mov	r1, r3
 800b5c4:	f04f 0c0a 	mov.w	ip, #10
 800b5c8:	4620      	mov	r0, r4
 800b5ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b5ce:	3a30      	subs	r2, #48	@ 0x30
 800b5d0:	2a09      	cmp	r2, #9
 800b5d2:	d903      	bls.n	800b5dc <_vfiprintf_r+0x1cc>
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d0c6      	beq.n	800b566 <_vfiprintf_r+0x156>
 800b5d8:	9105      	str	r1, [sp, #20]
 800b5da:	e7c4      	b.n	800b566 <_vfiprintf_r+0x156>
 800b5dc:	fb0c 2101 	mla	r1, ip, r1, r2
 800b5e0:	4604      	mov	r4, r0
 800b5e2:	2301      	movs	r3, #1
 800b5e4:	e7f0      	b.n	800b5c8 <_vfiprintf_r+0x1b8>
 800b5e6:	ab03      	add	r3, sp, #12
 800b5e8:	9300      	str	r3, [sp, #0]
 800b5ea:	462a      	mov	r2, r5
 800b5ec:	4b12      	ldr	r3, [pc, #72]	@ (800b638 <_vfiprintf_r+0x228>)
 800b5ee:	a904      	add	r1, sp, #16
 800b5f0:	4630      	mov	r0, r6
 800b5f2:	f3af 8000 	nop.w
 800b5f6:	4607      	mov	r7, r0
 800b5f8:	1c78      	adds	r0, r7, #1
 800b5fa:	d1d6      	bne.n	800b5aa <_vfiprintf_r+0x19a>
 800b5fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b5fe:	07d9      	lsls	r1, r3, #31
 800b600:	d405      	bmi.n	800b60e <_vfiprintf_r+0x1fe>
 800b602:	89ab      	ldrh	r3, [r5, #12]
 800b604:	059a      	lsls	r2, r3, #22
 800b606:	d402      	bmi.n	800b60e <_vfiprintf_r+0x1fe>
 800b608:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b60a:	f7ff fdcf 	bl	800b1ac <__retarget_lock_release_recursive>
 800b60e:	89ab      	ldrh	r3, [r5, #12]
 800b610:	065b      	lsls	r3, r3, #25
 800b612:	f53f af1f 	bmi.w	800b454 <_vfiprintf_r+0x44>
 800b616:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b618:	e71e      	b.n	800b458 <_vfiprintf_r+0x48>
 800b61a:	ab03      	add	r3, sp, #12
 800b61c:	9300      	str	r3, [sp, #0]
 800b61e:	462a      	mov	r2, r5
 800b620:	4b05      	ldr	r3, [pc, #20]	@ (800b638 <_vfiprintf_r+0x228>)
 800b622:	a904      	add	r1, sp, #16
 800b624:	4630      	mov	r0, r6
 800b626:	f000 f879 	bl	800b71c <_printf_i>
 800b62a:	e7e4      	b.n	800b5f6 <_vfiprintf_r+0x1e6>
 800b62c:	0800cda4 	.word	0x0800cda4
 800b630:	0800cdae 	.word	0x0800cdae
 800b634:	00000000 	.word	0x00000000
 800b638:	0800b3eb 	.word	0x0800b3eb
 800b63c:	0800cdaa 	.word	0x0800cdaa

0800b640 <_printf_common>:
 800b640:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b644:	4616      	mov	r6, r2
 800b646:	4698      	mov	r8, r3
 800b648:	688a      	ldr	r2, [r1, #8]
 800b64a:	690b      	ldr	r3, [r1, #16]
 800b64c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b650:	4293      	cmp	r3, r2
 800b652:	bfb8      	it	lt
 800b654:	4613      	movlt	r3, r2
 800b656:	6033      	str	r3, [r6, #0]
 800b658:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b65c:	4607      	mov	r7, r0
 800b65e:	460c      	mov	r4, r1
 800b660:	b10a      	cbz	r2, 800b666 <_printf_common+0x26>
 800b662:	3301      	adds	r3, #1
 800b664:	6033      	str	r3, [r6, #0]
 800b666:	6823      	ldr	r3, [r4, #0]
 800b668:	0699      	lsls	r1, r3, #26
 800b66a:	bf42      	ittt	mi
 800b66c:	6833      	ldrmi	r3, [r6, #0]
 800b66e:	3302      	addmi	r3, #2
 800b670:	6033      	strmi	r3, [r6, #0]
 800b672:	6825      	ldr	r5, [r4, #0]
 800b674:	f015 0506 	ands.w	r5, r5, #6
 800b678:	d106      	bne.n	800b688 <_printf_common+0x48>
 800b67a:	f104 0a19 	add.w	sl, r4, #25
 800b67e:	68e3      	ldr	r3, [r4, #12]
 800b680:	6832      	ldr	r2, [r6, #0]
 800b682:	1a9b      	subs	r3, r3, r2
 800b684:	42ab      	cmp	r3, r5
 800b686:	dc26      	bgt.n	800b6d6 <_printf_common+0x96>
 800b688:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b68c:	6822      	ldr	r2, [r4, #0]
 800b68e:	3b00      	subs	r3, #0
 800b690:	bf18      	it	ne
 800b692:	2301      	movne	r3, #1
 800b694:	0692      	lsls	r2, r2, #26
 800b696:	d42b      	bmi.n	800b6f0 <_printf_common+0xb0>
 800b698:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b69c:	4641      	mov	r1, r8
 800b69e:	4638      	mov	r0, r7
 800b6a0:	47c8      	blx	r9
 800b6a2:	3001      	adds	r0, #1
 800b6a4:	d01e      	beq.n	800b6e4 <_printf_common+0xa4>
 800b6a6:	6823      	ldr	r3, [r4, #0]
 800b6a8:	6922      	ldr	r2, [r4, #16]
 800b6aa:	f003 0306 	and.w	r3, r3, #6
 800b6ae:	2b04      	cmp	r3, #4
 800b6b0:	bf02      	ittt	eq
 800b6b2:	68e5      	ldreq	r5, [r4, #12]
 800b6b4:	6833      	ldreq	r3, [r6, #0]
 800b6b6:	1aed      	subeq	r5, r5, r3
 800b6b8:	68a3      	ldr	r3, [r4, #8]
 800b6ba:	bf0c      	ite	eq
 800b6bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b6c0:	2500      	movne	r5, #0
 800b6c2:	4293      	cmp	r3, r2
 800b6c4:	bfc4      	itt	gt
 800b6c6:	1a9b      	subgt	r3, r3, r2
 800b6c8:	18ed      	addgt	r5, r5, r3
 800b6ca:	2600      	movs	r6, #0
 800b6cc:	341a      	adds	r4, #26
 800b6ce:	42b5      	cmp	r5, r6
 800b6d0:	d11a      	bne.n	800b708 <_printf_common+0xc8>
 800b6d2:	2000      	movs	r0, #0
 800b6d4:	e008      	b.n	800b6e8 <_printf_common+0xa8>
 800b6d6:	2301      	movs	r3, #1
 800b6d8:	4652      	mov	r2, sl
 800b6da:	4641      	mov	r1, r8
 800b6dc:	4638      	mov	r0, r7
 800b6de:	47c8      	blx	r9
 800b6e0:	3001      	adds	r0, #1
 800b6e2:	d103      	bne.n	800b6ec <_printf_common+0xac>
 800b6e4:	f04f 30ff 	mov.w	r0, #4294967295
 800b6e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6ec:	3501      	adds	r5, #1
 800b6ee:	e7c6      	b.n	800b67e <_printf_common+0x3e>
 800b6f0:	18e1      	adds	r1, r4, r3
 800b6f2:	1c5a      	adds	r2, r3, #1
 800b6f4:	2030      	movs	r0, #48	@ 0x30
 800b6f6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b6fa:	4422      	add	r2, r4
 800b6fc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b700:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b704:	3302      	adds	r3, #2
 800b706:	e7c7      	b.n	800b698 <_printf_common+0x58>
 800b708:	2301      	movs	r3, #1
 800b70a:	4622      	mov	r2, r4
 800b70c:	4641      	mov	r1, r8
 800b70e:	4638      	mov	r0, r7
 800b710:	47c8      	blx	r9
 800b712:	3001      	adds	r0, #1
 800b714:	d0e6      	beq.n	800b6e4 <_printf_common+0xa4>
 800b716:	3601      	adds	r6, #1
 800b718:	e7d9      	b.n	800b6ce <_printf_common+0x8e>
	...

0800b71c <_printf_i>:
 800b71c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b720:	7e0f      	ldrb	r7, [r1, #24]
 800b722:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b724:	2f78      	cmp	r7, #120	@ 0x78
 800b726:	4691      	mov	r9, r2
 800b728:	4680      	mov	r8, r0
 800b72a:	460c      	mov	r4, r1
 800b72c:	469a      	mov	sl, r3
 800b72e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b732:	d807      	bhi.n	800b744 <_printf_i+0x28>
 800b734:	2f62      	cmp	r7, #98	@ 0x62
 800b736:	d80a      	bhi.n	800b74e <_printf_i+0x32>
 800b738:	2f00      	cmp	r7, #0
 800b73a:	f000 80d2 	beq.w	800b8e2 <_printf_i+0x1c6>
 800b73e:	2f58      	cmp	r7, #88	@ 0x58
 800b740:	f000 80b9 	beq.w	800b8b6 <_printf_i+0x19a>
 800b744:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b748:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b74c:	e03a      	b.n	800b7c4 <_printf_i+0xa8>
 800b74e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b752:	2b15      	cmp	r3, #21
 800b754:	d8f6      	bhi.n	800b744 <_printf_i+0x28>
 800b756:	a101      	add	r1, pc, #4	@ (adr r1, 800b75c <_printf_i+0x40>)
 800b758:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b75c:	0800b7b5 	.word	0x0800b7b5
 800b760:	0800b7c9 	.word	0x0800b7c9
 800b764:	0800b745 	.word	0x0800b745
 800b768:	0800b745 	.word	0x0800b745
 800b76c:	0800b745 	.word	0x0800b745
 800b770:	0800b745 	.word	0x0800b745
 800b774:	0800b7c9 	.word	0x0800b7c9
 800b778:	0800b745 	.word	0x0800b745
 800b77c:	0800b745 	.word	0x0800b745
 800b780:	0800b745 	.word	0x0800b745
 800b784:	0800b745 	.word	0x0800b745
 800b788:	0800b8c9 	.word	0x0800b8c9
 800b78c:	0800b7f3 	.word	0x0800b7f3
 800b790:	0800b883 	.word	0x0800b883
 800b794:	0800b745 	.word	0x0800b745
 800b798:	0800b745 	.word	0x0800b745
 800b79c:	0800b8eb 	.word	0x0800b8eb
 800b7a0:	0800b745 	.word	0x0800b745
 800b7a4:	0800b7f3 	.word	0x0800b7f3
 800b7a8:	0800b745 	.word	0x0800b745
 800b7ac:	0800b745 	.word	0x0800b745
 800b7b0:	0800b88b 	.word	0x0800b88b
 800b7b4:	6833      	ldr	r3, [r6, #0]
 800b7b6:	1d1a      	adds	r2, r3, #4
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	6032      	str	r2, [r6, #0]
 800b7bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b7c0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b7c4:	2301      	movs	r3, #1
 800b7c6:	e09d      	b.n	800b904 <_printf_i+0x1e8>
 800b7c8:	6833      	ldr	r3, [r6, #0]
 800b7ca:	6820      	ldr	r0, [r4, #0]
 800b7cc:	1d19      	adds	r1, r3, #4
 800b7ce:	6031      	str	r1, [r6, #0]
 800b7d0:	0606      	lsls	r6, r0, #24
 800b7d2:	d501      	bpl.n	800b7d8 <_printf_i+0xbc>
 800b7d4:	681d      	ldr	r5, [r3, #0]
 800b7d6:	e003      	b.n	800b7e0 <_printf_i+0xc4>
 800b7d8:	0645      	lsls	r5, r0, #25
 800b7da:	d5fb      	bpl.n	800b7d4 <_printf_i+0xb8>
 800b7dc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b7e0:	2d00      	cmp	r5, #0
 800b7e2:	da03      	bge.n	800b7ec <_printf_i+0xd0>
 800b7e4:	232d      	movs	r3, #45	@ 0x2d
 800b7e6:	426d      	negs	r5, r5
 800b7e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b7ec:	4859      	ldr	r0, [pc, #356]	@ (800b954 <_printf_i+0x238>)
 800b7ee:	230a      	movs	r3, #10
 800b7f0:	e011      	b.n	800b816 <_printf_i+0xfa>
 800b7f2:	6821      	ldr	r1, [r4, #0]
 800b7f4:	6833      	ldr	r3, [r6, #0]
 800b7f6:	0608      	lsls	r0, r1, #24
 800b7f8:	f853 5b04 	ldr.w	r5, [r3], #4
 800b7fc:	d402      	bmi.n	800b804 <_printf_i+0xe8>
 800b7fe:	0649      	lsls	r1, r1, #25
 800b800:	bf48      	it	mi
 800b802:	b2ad      	uxthmi	r5, r5
 800b804:	2f6f      	cmp	r7, #111	@ 0x6f
 800b806:	4853      	ldr	r0, [pc, #332]	@ (800b954 <_printf_i+0x238>)
 800b808:	6033      	str	r3, [r6, #0]
 800b80a:	bf14      	ite	ne
 800b80c:	230a      	movne	r3, #10
 800b80e:	2308      	moveq	r3, #8
 800b810:	2100      	movs	r1, #0
 800b812:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b816:	6866      	ldr	r6, [r4, #4]
 800b818:	60a6      	str	r6, [r4, #8]
 800b81a:	2e00      	cmp	r6, #0
 800b81c:	bfa2      	ittt	ge
 800b81e:	6821      	ldrge	r1, [r4, #0]
 800b820:	f021 0104 	bicge.w	r1, r1, #4
 800b824:	6021      	strge	r1, [r4, #0]
 800b826:	b90d      	cbnz	r5, 800b82c <_printf_i+0x110>
 800b828:	2e00      	cmp	r6, #0
 800b82a:	d04b      	beq.n	800b8c4 <_printf_i+0x1a8>
 800b82c:	4616      	mov	r6, r2
 800b82e:	fbb5 f1f3 	udiv	r1, r5, r3
 800b832:	fb03 5711 	mls	r7, r3, r1, r5
 800b836:	5dc7      	ldrb	r7, [r0, r7]
 800b838:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b83c:	462f      	mov	r7, r5
 800b83e:	42bb      	cmp	r3, r7
 800b840:	460d      	mov	r5, r1
 800b842:	d9f4      	bls.n	800b82e <_printf_i+0x112>
 800b844:	2b08      	cmp	r3, #8
 800b846:	d10b      	bne.n	800b860 <_printf_i+0x144>
 800b848:	6823      	ldr	r3, [r4, #0]
 800b84a:	07df      	lsls	r7, r3, #31
 800b84c:	d508      	bpl.n	800b860 <_printf_i+0x144>
 800b84e:	6923      	ldr	r3, [r4, #16]
 800b850:	6861      	ldr	r1, [r4, #4]
 800b852:	4299      	cmp	r1, r3
 800b854:	bfde      	ittt	le
 800b856:	2330      	movle	r3, #48	@ 0x30
 800b858:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b85c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b860:	1b92      	subs	r2, r2, r6
 800b862:	6122      	str	r2, [r4, #16]
 800b864:	f8cd a000 	str.w	sl, [sp]
 800b868:	464b      	mov	r3, r9
 800b86a:	aa03      	add	r2, sp, #12
 800b86c:	4621      	mov	r1, r4
 800b86e:	4640      	mov	r0, r8
 800b870:	f7ff fee6 	bl	800b640 <_printf_common>
 800b874:	3001      	adds	r0, #1
 800b876:	d14a      	bne.n	800b90e <_printf_i+0x1f2>
 800b878:	f04f 30ff 	mov.w	r0, #4294967295
 800b87c:	b004      	add	sp, #16
 800b87e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b882:	6823      	ldr	r3, [r4, #0]
 800b884:	f043 0320 	orr.w	r3, r3, #32
 800b888:	6023      	str	r3, [r4, #0]
 800b88a:	4833      	ldr	r0, [pc, #204]	@ (800b958 <_printf_i+0x23c>)
 800b88c:	2778      	movs	r7, #120	@ 0x78
 800b88e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b892:	6823      	ldr	r3, [r4, #0]
 800b894:	6831      	ldr	r1, [r6, #0]
 800b896:	061f      	lsls	r7, r3, #24
 800b898:	f851 5b04 	ldr.w	r5, [r1], #4
 800b89c:	d402      	bmi.n	800b8a4 <_printf_i+0x188>
 800b89e:	065f      	lsls	r7, r3, #25
 800b8a0:	bf48      	it	mi
 800b8a2:	b2ad      	uxthmi	r5, r5
 800b8a4:	6031      	str	r1, [r6, #0]
 800b8a6:	07d9      	lsls	r1, r3, #31
 800b8a8:	bf44      	itt	mi
 800b8aa:	f043 0320 	orrmi.w	r3, r3, #32
 800b8ae:	6023      	strmi	r3, [r4, #0]
 800b8b0:	b11d      	cbz	r5, 800b8ba <_printf_i+0x19e>
 800b8b2:	2310      	movs	r3, #16
 800b8b4:	e7ac      	b.n	800b810 <_printf_i+0xf4>
 800b8b6:	4827      	ldr	r0, [pc, #156]	@ (800b954 <_printf_i+0x238>)
 800b8b8:	e7e9      	b.n	800b88e <_printf_i+0x172>
 800b8ba:	6823      	ldr	r3, [r4, #0]
 800b8bc:	f023 0320 	bic.w	r3, r3, #32
 800b8c0:	6023      	str	r3, [r4, #0]
 800b8c2:	e7f6      	b.n	800b8b2 <_printf_i+0x196>
 800b8c4:	4616      	mov	r6, r2
 800b8c6:	e7bd      	b.n	800b844 <_printf_i+0x128>
 800b8c8:	6833      	ldr	r3, [r6, #0]
 800b8ca:	6825      	ldr	r5, [r4, #0]
 800b8cc:	6961      	ldr	r1, [r4, #20]
 800b8ce:	1d18      	adds	r0, r3, #4
 800b8d0:	6030      	str	r0, [r6, #0]
 800b8d2:	062e      	lsls	r6, r5, #24
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	d501      	bpl.n	800b8dc <_printf_i+0x1c0>
 800b8d8:	6019      	str	r1, [r3, #0]
 800b8da:	e002      	b.n	800b8e2 <_printf_i+0x1c6>
 800b8dc:	0668      	lsls	r0, r5, #25
 800b8de:	d5fb      	bpl.n	800b8d8 <_printf_i+0x1bc>
 800b8e0:	8019      	strh	r1, [r3, #0]
 800b8e2:	2300      	movs	r3, #0
 800b8e4:	6123      	str	r3, [r4, #16]
 800b8e6:	4616      	mov	r6, r2
 800b8e8:	e7bc      	b.n	800b864 <_printf_i+0x148>
 800b8ea:	6833      	ldr	r3, [r6, #0]
 800b8ec:	1d1a      	adds	r2, r3, #4
 800b8ee:	6032      	str	r2, [r6, #0]
 800b8f0:	681e      	ldr	r6, [r3, #0]
 800b8f2:	6862      	ldr	r2, [r4, #4]
 800b8f4:	2100      	movs	r1, #0
 800b8f6:	4630      	mov	r0, r6
 800b8f8:	f7f4 fc4a 	bl	8000190 <memchr>
 800b8fc:	b108      	cbz	r0, 800b902 <_printf_i+0x1e6>
 800b8fe:	1b80      	subs	r0, r0, r6
 800b900:	6060      	str	r0, [r4, #4]
 800b902:	6863      	ldr	r3, [r4, #4]
 800b904:	6123      	str	r3, [r4, #16]
 800b906:	2300      	movs	r3, #0
 800b908:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b90c:	e7aa      	b.n	800b864 <_printf_i+0x148>
 800b90e:	6923      	ldr	r3, [r4, #16]
 800b910:	4632      	mov	r2, r6
 800b912:	4649      	mov	r1, r9
 800b914:	4640      	mov	r0, r8
 800b916:	47d0      	blx	sl
 800b918:	3001      	adds	r0, #1
 800b91a:	d0ad      	beq.n	800b878 <_printf_i+0x15c>
 800b91c:	6823      	ldr	r3, [r4, #0]
 800b91e:	079b      	lsls	r3, r3, #30
 800b920:	d413      	bmi.n	800b94a <_printf_i+0x22e>
 800b922:	68e0      	ldr	r0, [r4, #12]
 800b924:	9b03      	ldr	r3, [sp, #12]
 800b926:	4298      	cmp	r0, r3
 800b928:	bfb8      	it	lt
 800b92a:	4618      	movlt	r0, r3
 800b92c:	e7a6      	b.n	800b87c <_printf_i+0x160>
 800b92e:	2301      	movs	r3, #1
 800b930:	4632      	mov	r2, r6
 800b932:	4649      	mov	r1, r9
 800b934:	4640      	mov	r0, r8
 800b936:	47d0      	blx	sl
 800b938:	3001      	adds	r0, #1
 800b93a:	d09d      	beq.n	800b878 <_printf_i+0x15c>
 800b93c:	3501      	adds	r5, #1
 800b93e:	68e3      	ldr	r3, [r4, #12]
 800b940:	9903      	ldr	r1, [sp, #12]
 800b942:	1a5b      	subs	r3, r3, r1
 800b944:	42ab      	cmp	r3, r5
 800b946:	dcf2      	bgt.n	800b92e <_printf_i+0x212>
 800b948:	e7eb      	b.n	800b922 <_printf_i+0x206>
 800b94a:	2500      	movs	r5, #0
 800b94c:	f104 0619 	add.w	r6, r4, #25
 800b950:	e7f5      	b.n	800b93e <_printf_i+0x222>
 800b952:	bf00      	nop
 800b954:	0800cdb5 	.word	0x0800cdb5
 800b958:	0800cdc6 	.word	0x0800cdc6

0800b95c <__sflush_r>:
 800b95c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b964:	0716      	lsls	r6, r2, #28
 800b966:	4605      	mov	r5, r0
 800b968:	460c      	mov	r4, r1
 800b96a:	d454      	bmi.n	800ba16 <__sflush_r+0xba>
 800b96c:	684b      	ldr	r3, [r1, #4]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	dc02      	bgt.n	800b978 <__sflush_r+0x1c>
 800b972:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b974:	2b00      	cmp	r3, #0
 800b976:	dd48      	ble.n	800ba0a <__sflush_r+0xae>
 800b978:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b97a:	2e00      	cmp	r6, #0
 800b97c:	d045      	beq.n	800ba0a <__sflush_r+0xae>
 800b97e:	2300      	movs	r3, #0
 800b980:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b984:	682f      	ldr	r7, [r5, #0]
 800b986:	6a21      	ldr	r1, [r4, #32]
 800b988:	602b      	str	r3, [r5, #0]
 800b98a:	d030      	beq.n	800b9ee <__sflush_r+0x92>
 800b98c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b98e:	89a3      	ldrh	r3, [r4, #12]
 800b990:	0759      	lsls	r1, r3, #29
 800b992:	d505      	bpl.n	800b9a0 <__sflush_r+0x44>
 800b994:	6863      	ldr	r3, [r4, #4]
 800b996:	1ad2      	subs	r2, r2, r3
 800b998:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b99a:	b10b      	cbz	r3, 800b9a0 <__sflush_r+0x44>
 800b99c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b99e:	1ad2      	subs	r2, r2, r3
 800b9a0:	2300      	movs	r3, #0
 800b9a2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b9a4:	6a21      	ldr	r1, [r4, #32]
 800b9a6:	4628      	mov	r0, r5
 800b9a8:	47b0      	blx	r6
 800b9aa:	1c43      	adds	r3, r0, #1
 800b9ac:	89a3      	ldrh	r3, [r4, #12]
 800b9ae:	d106      	bne.n	800b9be <__sflush_r+0x62>
 800b9b0:	6829      	ldr	r1, [r5, #0]
 800b9b2:	291d      	cmp	r1, #29
 800b9b4:	d82b      	bhi.n	800ba0e <__sflush_r+0xb2>
 800b9b6:	4a2a      	ldr	r2, [pc, #168]	@ (800ba60 <__sflush_r+0x104>)
 800b9b8:	410a      	asrs	r2, r1
 800b9ba:	07d6      	lsls	r6, r2, #31
 800b9bc:	d427      	bmi.n	800ba0e <__sflush_r+0xb2>
 800b9be:	2200      	movs	r2, #0
 800b9c0:	6062      	str	r2, [r4, #4]
 800b9c2:	04d9      	lsls	r1, r3, #19
 800b9c4:	6922      	ldr	r2, [r4, #16]
 800b9c6:	6022      	str	r2, [r4, #0]
 800b9c8:	d504      	bpl.n	800b9d4 <__sflush_r+0x78>
 800b9ca:	1c42      	adds	r2, r0, #1
 800b9cc:	d101      	bne.n	800b9d2 <__sflush_r+0x76>
 800b9ce:	682b      	ldr	r3, [r5, #0]
 800b9d0:	b903      	cbnz	r3, 800b9d4 <__sflush_r+0x78>
 800b9d2:	6560      	str	r0, [r4, #84]	@ 0x54
 800b9d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b9d6:	602f      	str	r7, [r5, #0]
 800b9d8:	b1b9      	cbz	r1, 800ba0a <__sflush_r+0xae>
 800b9da:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b9de:	4299      	cmp	r1, r3
 800b9e0:	d002      	beq.n	800b9e8 <__sflush_r+0x8c>
 800b9e2:	4628      	mov	r0, r5
 800b9e4:	f7ff fbf2 	bl	800b1cc <_free_r>
 800b9e8:	2300      	movs	r3, #0
 800b9ea:	6363      	str	r3, [r4, #52]	@ 0x34
 800b9ec:	e00d      	b.n	800ba0a <__sflush_r+0xae>
 800b9ee:	2301      	movs	r3, #1
 800b9f0:	4628      	mov	r0, r5
 800b9f2:	47b0      	blx	r6
 800b9f4:	4602      	mov	r2, r0
 800b9f6:	1c50      	adds	r0, r2, #1
 800b9f8:	d1c9      	bne.n	800b98e <__sflush_r+0x32>
 800b9fa:	682b      	ldr	r3, [r5, #0]
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d0c6      	beq.n	800b98e <__sflush_r+0x32>
 800ba00:	2b1d      	cmp	r3, #29
 800ba02:	d001      	beq.n	800ba08 <__sflush_r+0xac>
 800ba04:	2b16      	cmp	r3, #22
 800ba06:	d11e      	bne.n	800ba46 <__sflush_r+0xea>
 800ba08:	602f      	str	r7, [r5, #0]
 800ba0a:	2000      	movs	r0, #0
 800ba0c:	e022      	b.n	800ba54 <__sflush_r+0xf8>
 800ba0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ba12:	b21b      	sxth	r3, r3
 800ba14:	e01b      	b.n	800ba4e <__sflush_r+0xf2>
 800ba16:	690f      	ldr	r7, [r1, #16]
 800ba18:	2f00      	cmp	r7, #0
 800ba1a:	d0f6      	beq.n	800ba0a <__sflush_r+0xae>
 800ba1c:	0793      	lsls	r3, r2, #30
 800ba1e:	680e      	ldr	r6, [r1, #0]
 800ba20:	bf08      	it	eq
 800ba22:	694b      	ldreq	r3, [r1, #20]
 800ba24:	600f      	str	r7, [r1, #0]
 800ba26:	bf18      	it	ne
 800ba28:	2300      	movne	r3, #0
 800ba2a:	eba6 0807 	sub.w	r8, r6, r7
 800ba2e:	608b      	str	r3, [r1, #8]
 800ba30:	f1b8 0f00 	cmp.w	r8, #0
 800ba34:	dde9      	ble.n	800ba0a <__sflush_r+0xae>
 800ba36:	6a21      	ldr	r1, [r4, #32]
 800ba38:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ba3a:	4643      	mov	r3, r8
 800ba3c:	463a      	mov	r2, r7
 800ba3e:	4628      	mov	r0, r5
 800ba40:	47b0      	blx	r6
 800ba42:	2800      	cmp	r0, #0
 800ba44:	dc08      	bgt.n	800ba58 <__sflush_r+0xfc>
 800ba46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ba4e:	81a3      	strh	r3, [r4, #12]
 800ba50:	f04f 30ff 	mov.w	r0, #4294967295
 800ba54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba58:	4407      	add	r7, r0
 800ba5a:	eba8 0800 	sub.w	r8, r8, r0
 800ba5e:	e7e7      	b.n	800ba30 <__sflush_r+0xd4>
 800ba60:	dfbffffe 	.word	0xdfbffffe

0800ba64 <_fflush_r>:
 800ba64:	b538      	push	{r3, r4, r5, lr}
 800ba66:	690b      	ldr	r3, [r1, #16]
 800ba68:	4605      	mov	r5, r0
 800ba6a:	460c      	mov	r4, r1
 800ba6c:	b913      	cbnz	r3, 800ba74 <_fflush_r+0x10>
 800ba6e:	2500      	movs	r5, #0
 800ba70:	4628      	mov	r0, r5
 800ba72:	bd38      	pop	{r3, r4, r5, pc}
 800ba74:	b118      	cbz	r0, 800ba7e <_fflush_r+0x1a>
 800ba76:	6a03      	ldr	r3, [r0, #32]
 800ba78:	b90b      	cbnz	r3, 800ba7e <_fflush_r+0x1a>
 800ba7a:	f7ff f99f 	bl	800adbc <__sinit>
 800ba7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d0f3      	beq.n	800ba6e <_fflush_r+0xa>
 800ba86:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ba88:	07d0      	lsls	r0, r2, #31
 800ba8a:	d404      	bmi.n	800ba96 <_fflush_r+0x32>
 800ba8c:	0599      	lsls	r1, r3, #22
 800ba8e:	d402      	bmi.n	800ba96 <_fflush_r+0x32>
 800ba90:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ba92:	f7ff fb8a 	bl	800b1aa <__retarget_lock_acquire_recursive>
 800ba96:	4628      	mov	r0, r5
 800ba98:	4621      	mov	r1, r4
 800ba9a:	f7ff ff5f 	bl	800b95c <__sflush_r>
 800ba9e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800baa0:	07da      	lsls	r2, r3, #31
 800baa2:	4605      	mov	r5, r0
 800baa4:	d4e4      	bmi.n	800ba70 <_fflush_r+0xc>
 800baa6:	89a3      	ldrh	r3, [r4, #12]
 800baa8:	059b      	lsls	r3, r3, #22
 800baaa:	d4e1      	bmi.n	800ba70 <_fflush_r+0xc>
 800baac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800baae:	f7ff fb7d 	bl	800b1ac <__retarget_lock_release_recursive>
 800bab2:	e7dd      	b.n	800ba70 <_fflush_r+0xc>

0800bab4 <__swhatbuf_r>:
 800bab4:	b570      	push	{r4, r5, r6, lr}
 800bab6:	460c      	mov	r4, r1
 800bab8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800babc:	2900      	cmp	r1, #0
 800babe:	b096      	sub	sp, #88	@ 0x58
 800bac0:	4615      	mov	r5, r2
 800bac2:	461e      	mov	r6, r3
 800bac4:	da0d      	bge.n	800bae2 <__swhatbuf_r+0x2e>
 800bac6:	89a3      	ldrh	r3, [r4, #12]
 800bac8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800bacc:	f04f 0100 	mov.w	r1, #0
 800bad0:	bf14      	ite	ne
 800bad2:	2340      	movne	r3, #64	@ 0x40
 800bad4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800bad8:	2000      	movs	r0, #0
 800bada:	6031      	str	r1, [r6, #0]
 800badc:	602b      	str	r3, [r5, #0]
 800bade:	b016      	add	sp, #88	@ 0x58
 800bae0:	bd70      	pop	{r4, r5, r6, pc}
 800bae2:	466a      	mov	r2, sp
 800bae4:	f000 f848 	bl	800bb78 <_fstat_r>
 800bae8:	2800      	cmp	r0, #0
 800baea:	dbec      	blt.n	800bac6 <__swhatbuf_r+0x12>
 800baec:	9901      	ldr	r1, [sp, #4]
 800baee:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800baf2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800baf6:	4259      	negs	r1, r3
 800baf8:	4159      	adcs	r1, r3
 800bafa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bafe:	e7eb      	b.n	800bad8 <__swhatbuf_r+0x24>

0800bb00 <__smakebuf_r>:
 800bb00:	898b      	ldrh	r3, [r1, #12]
 800bb02:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bb04:	079d      	lsls	r5, r3, #30
 800bb06:	4606      	mov	r6, r0
 800bb08:	460c      	mov	r4, r1
 800bb0a:	d507      	bpl.n	800bb1c <__smakebuf_r+0x1c>
 800bb0c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800bb10:	6023      	str	r3, [r4, #0]
 800bb12:	6123      	str	r3, [r4, #16]
 800bb14:	2301      	movs	r3, #1
 800bb16:	6163      	str	r3, [r4, #20]
 800bb18:	b003      	add	sp, #12
 800bb1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bb1c:	ab01      	add	r3, sp, #4
 800bb1e:	466a      	mov	r2, sp
 800bb20:	f7ff ffc8 	bl	800bab4 <__swhatbuf_r>
 800bb24:	9f00      	ldr	r7, [sp, #0]
 800bb26:	4605      	mov	r5, r0
 800bb28:	4639      	mov	r1, r7
 800bb2a:	4630      	mov	r0, r6
 800bb2c:	f7ff fbba 	bl	800b2a4 <_malloc_r>
 800bb30:	b948      	cbnz	r0, 800bb46 <__smakebuf_r+0x46>
 800bb32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb36:	059a      	lsls	r2, r3, #22
 800bb38:	d4ee      	bmi.n	800bb18 <__smakebuf_r+0x18>
 800bb3a:	f023 0303 	bic.w	r3, r3, #3
 800bb3e:	f043 0302 	orr.w	r3, r3, #2
 800bb42:	81a3      	strh	r3, [r4, #12]
 800bb44:	e7e2      	b.n	800bb0c <__smakebuf_r+0xc>
 800bb46:	89a3      	ldrh	r3, [r4, #12]
 800bb48:	6020      	str	r0, [r4, #0]
 800bb4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bb4e:	81a3      	strh	r3, [r4, #12]
 800bb50:	9b01      	ldr	r3, [sp, #4]
 800bb52:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800bb56:	b15b      	cbz	r3, 800bb70 <__smakebuf_r+0x70>
 800bb58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bb5c:	4630      	mov	r0, r6
 800bb5e:	f000 f81d 	bl	800bb9c <_isatty_r>
 800bb62:	b128      	cbz	r0, 800bb70 <__smakebuf_r+0x70>
 800bb64:	89a3      	ldrh	r3, [r4, #12]
 800bb66:	f023 0303 	bic.w	r3, r3, #3
 800bb6a:	f043 0301 	orr.w	r3, r3, #1
 800bb6e:	81a3      	strh	r3, [r4, #12]
 800bb70:	89a3      	ldrh	r3, [r4, #12]
 800bb72:	431d      	orrs	r5, r3
 800bb74:	81a5      	strh	r5, [r4, #12]
 800bb76:	e7cf      	b.n	800bb18 <__smakebuf_r+0x18>

0800bb78 <_fstat_r>:
 800bb78:	b538      	push	{r3, r4, r5, lr}
 800bb7a:	4d07      	ldr	r5, [pc, #28]	@ (800bb98 <_fstat_r+0x20>)
 800bb7c:	2300      	movs	r3, #0
 800bb7e:	4604      	mov	r4, r0
 800bb80:	4608      	mov	r0, r1
 800bb82:	4611      	mov	r1, r2
 800bb84:	602b      	str	r3, [r5, #0]
 800bb86:	f7f6 fdce 	bl	8002726 <_fstat>
 800bb8a:	1c43      	adds	r3, r0, #1
 800bb8c:	d102      	bne.n	800bb94 <_fstat_r+0x1c>
 800bb8e:	682b      	ldr	r3, [r5, #0]
 800bb90:	b103      	cbz	r3, 800bb94 <_fstat_r+0x1c>
 800bb92:	6023      	str	r3, [r4, #0]
 800bb94:	bd38      	pop	{r3, r4, r5, pc}
 800bb96:	bf00      	nop
 800bb98:	200005fc 	.word	0x200005fc

0800bb9c <_isatty_r>:
 800bb9c:	b538      	push	{r3, r4, r5, lr}
 800bb9e:	4d06      	ldr	r5, [pc, #24]	@ (800bbb8 <_isatty_r+0x1c>)
 800bba0:	2300      	movs	r3, #0
 800bba2:	4604      	mov	r4, r0
 800bba4:	4608      	mov	r0, r1
 800bba6:	602b      	str	r3, [r5, #0]
 800bba8:	f7f6 fdcd 	bl	8002746 <_isatty>
 800bbac:	1c43      	adds	r3, r0, #1
 800bbae:	d102      	bne.n	800bbb6 <_isatty_r+0x1a>
 800bbb0:	682b      	ldr	r3, [r5, #0]
 800bbb2:	b103      	cbz	r3, 800bbb6 <_isatty_r+0x1a>
 800bbb4:	6023      	str	r3, [r4, #0]
 800bbb6:	bd38      	pop	{r3, r4, r5, pc}
 800bbb8:	200005fc 	.word	0x200005fc

0800bbbc <_sbrk_r>:
 800bbbc:	b538      	push	{r3, r4, r5, lr}
 800bbbe:	4d06      	ldr	r5, [pc, #24]	@ (800bbd8 <_sbrk_r+0x1c>)
 800bbc0:	2300      	movs	r3, #0
 800bbc2:	4604      	mov	r4, r0
 800bbc4:	4608      	mov	r0, r1
 800bbc6:	602b      	str	r3, [r5, #0]
 800bbc8:	f7f6 fdd6 	bl	8002778 <_sbrk>
 800bbcc:	1c43      	adds	r3, r0, #1
 800bbce:	d102      	bne.n	800bbd6 <_sbrk_r+0x1a>
 800bbd0:	682b      	ldr	r3, [r5, #0]
 800bbd2:	b103      	cbz	r3, 800bbd6 <_sbrk_r+0x1a>
 800bbd4:	6023      	str	r3, [r4, #0]
 800bbd6:	bd38      	pop	{r3, r4, r5, pc}
 800bbd8:	200005fc 	.word	0x200005fc

0800bbdc <_init>:
 800bbdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbde:	bf00      	nop
 800bbe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bbe2:	bc08      	pop	{r3}
 800bbe4:	469e      	mov	lr, r3
 800bbe6:	4770      	bx	lr

0800bbe8 <_fini>:
 800bbe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbea:	bf00      	nop
 800bbec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bbee:	bc08      	pop	{r3}
 800bbf0:	469e      	mov	lr, r3
 800bbf2:	4770      	bx	lr
