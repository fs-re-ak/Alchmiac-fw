
Alchemiac-fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f680  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001758  0800f7c0  0800f7c0  000107c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08010f18  08010f18  00011f18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08010f20  08010f20  00011f20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08010f24  08010f24  00011f24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000088  20000008  08010f28  00012008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 00000025  20000090  08010fb0  00012090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  200000b8  08010fd5  000120b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000022fc  200000cc  08010fe6  000120cc  2**2
                  ALLOC
 10 ._user_heap_stack 00001400  200023c8  08010fe6  000123c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00012a67  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  00013000  2**2
                  ALLOC
 13 MB_MEM1       000001bb  20030028  20030028  00013000  2**2
                  ALLOC
 14 .MB_MEM2      00000883  200301e4  08010fe6  000121e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 15 .debug_info   00037f32  00000000  00000000  00012a97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 000073de  00000000  00000000  0004a9c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00003390  00000000  00000000  00051da8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 000027fe  00000000  00000000  00055138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002f6b4  00000000  00000000  00057936  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0003d2fc  00000000  00000000  00086fea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0010972d  00000000  00000000  000c42e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  001cda13  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000e584  00000000  00000000  001cda58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 0000005a  00000000  00000000  001dbfdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200000cc 	.word	0x200000cc
 800015c:	00000000 	.word	0x00000000
 8000160:	0800f7a8 	.word	0x0800f7a8

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200000d0 	.word	0x200000d0
 800017c:	0800f7a8 	.word	0x0800f7a8

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_dmul>:
 8000230:	b570      	push	{r4, r5, r6, lr}
 8000232:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000236:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800023a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800023e:	bf1d      	ittte	ne
 8000240:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000244:	ea94 0f0c 	teqne	r4, ip
 8000248:	ea95 0f0c 	teqne	r5, ip
 800024c:	f000 f8de 	bleq	800040c <__aeabi_dmul+0x1dc>
 8000250:	442c      	add	r4, r5
 8000252:	ea81 0603 	eor.w	r6, r1, r3
 8000256:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800025a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800025e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000262:	bf18      	it	ne
 8000264:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000268:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800026c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000270:	d038      	beq.n	80002e4 <__aeabi_dmul+0xb4>
 8000272:	fba0 ce02 	umull	ip, lr, r0, r2
 8000276:	f04f 0500 	mov.w	r5, #0
 800027a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800027e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000282:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000286:	f04f 0600 	mov.w	r6, #0
 800028a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800028e:	f09c 0f00 	teq	ip, #0
 8000292:	bf18      	it	ne
 8000294:	f04e 0e01 	orrne.w	lr, lr, #1
 8000298:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800029c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80002a0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80002a4:	d204      	bcs.n	80002b0 <__aeabi_dmul+0x80>
 80002a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002aa:	416d      	adcs	r5, r5
 80002ac:	eb46 0606 	adc.w	r6, r6, r6
 80002b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002c4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80002c8:	bf88      	it	hi
 80002ca:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80002ce:	d81e      	bhi.n	800030e <__aeabi_dmul+0xde>
 80002d0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80002d4:	bf08      	it	eq
 80002d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002da:	f150 0000 	adcs.w	r0, r0, #0
 80002de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002e2:	bd70      	pop	{r4, r5, r6, pc}
 80002e4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80002e8:	ea46 0101 	orr.w	r1, r6, r1
 80002ec:	ea40 0002 	orr.w	r0, r0, r2
 80002f0:	ea81 0103 	eor.w	r1, r1, r3
 80002f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002f8:	bfc2      	ittt	gt
 80002fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000302:	bd70      	popgt	{r4, r5, r6, pc}
 8000304:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000308:	f04f 0e00 	mov.w	lr, #0
 800030c:	3c01      	subs	r4, #1
 800030e:	f300 80ab 	bgt.w	8000468 <__aeabi_dmul+0x238>
 8000312:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000316:	bfde      	ittt	le
 8000318:	2000      	movle	r0, #0
 800031a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800031e:	bd70      	pople	{r4, r5, r6, pc}
 8000320:	f1c4 0400 	rsb	r4, r4, #0
 8000324:	3c20      	subs	r4, #32
 8000326:	da35      	bge.n	8000394 <__aeabi_dmul+0x164>
 8000328:	340c      	adds	r4, #12
 800032a:	dc1b      	bgt.n	8000364 <__aeabi_dmul+0x134>
 800032c:	f104 0414 	add.w	r4, r4, #20
 8000330:	f1c4 0520 	rsb	r5, r4, #32
 8000334:	fa00 f305 	lsl.w	r3, r0, r5
 8000338:	fa20 f004 	lsr.w	r0, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea40 0002 	orr.w	r0, r0, r2
 8000344:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000348:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800034c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000350:	fa21 f604 	lsr.w	r6, r1, r4
 8000354:	eb42 0106 	adc.w	r1, r2, r6
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f1c4 040c 	rsb	r4, r4, #12
 8000368:	f1c4 0520 	rsb	r5, r4, #32
 800036c:	fa00 f304 	lsl.w	r3, r0, r4
 8000370:	fa20 f005 	lsr.w	r0, r0, r5
 8000374:	fa01 f204 	lsl.w	r2, r1, r4
 8000378:	ea40 0002 	orr.w	r0, r0, r2
 800037c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000380:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000384:	f141 0100 	adc.w	r1, r1, #0
 8000388:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800038c:	bf08      	it	eq
 800038e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000392:	bd70      	pop	{r4, r5, r6, pc}
 8000394:	f1c4 0520 	rsb	r5, r4, #32
 8000398:	fa00 f205 	lsl.w	r2, r0, r5
 800039c:	ea4e 0e02 	orr.w	lr, lr, r2
 80003a0:	fa20 f304 	lsr.w	r3, r0, r4
 80003a4:	fa01 f205 	lsl.w	r2, r1, r5
 80003a8:	ea43 0302 	orr.w	r3, r3, r2
 80003ac:	fa21 f004 	lsr.w	r0, r1, r4
 80003b0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003b4:	fa21 f204 	lsr.w	r2, r1, r4
 80003b8:	ea20 0002 	bic.w	r0, r0, r2
 80003bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003c4:	bf08      	it	eq
 80003c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003ca:	bd70      	pop	{r4, r5, r6, pc}
 80003cc:	f094 0f00 	teq	r4, #0
 80003d0:	d10f      	bne.n	80003f2 <__aeabi_dmul+0x1c2>
 80003d2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80003d6:	0040      	lsls	r0, r0, #1
 80003d8:	eb41 0101 	adc.w	r1, r1, r1
 80003dc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80003e0:	bf08      	it	eq
 80003e2:	3c01      	subeq	r4, #1
 80003e4:	d0f7      	beq.n	80003d6 <__aeabi_dmul+0x1a6>
 80003e6:	ea41 0106 	orr.w	r1, r1, r6
 80003ea:	f095 0f00 	teq	r5, #0
 80003ee:	bf18      	it	ne
 80003f0:	4770      	bxne	lr
 80003f2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80003f6:	0052      	lsls	r2, r2, #1
 80003f8:	eb43 0303 	adc.w	r3, r3, r3
 80003fc:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000400:	bf08      	it	eq
 8000402:	3d01      	subeq	r5, #1
 8000404:	d0f7      	beq.n	80003f6 <__aeabi_dmul+0x1c6>
 8000406:	ea43 0306 	orr.w	r3, r3, r6
 800040a:	4770      	bx	lr
 800040c:	ea94 0f0c 	teq	r4, ip
 8000410:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000414:	bf18      	it	ne
 8000416:	ea95 0f0c 	teqne	r5, ip
 800041a:	d00c      	beq.n	8000436 <__aeabi_dmul+0x206>
 800041c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000420:	bf18      	it	ne
 8000422:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000426:	d1d1      	bne.n	80003cc <__aeabi_dmul+0x19c>
 8000428:	ea81 0103 	eor.w	r1, r1, r3
 800042c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000430:	f04f 0000 	mov.w	r0, #0
 8000434:	bd70      	pop	{r4, r5, r6, pc}
 8000436:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800043a:	bf06      	itte	eq
 800043c:	4610      	moveq	r0, r2
 800043e:	4619      	moveq	r1, r3
 8000440:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000444:	d019      	beq.n	800047a <__aeabi_dmul+0x24a>
 8000446:	ea94 0f0c 	teq	r4, ip
 800044a:	d102      	bne.n	8000452 <__aeabi_dmul+0x222>
 800044c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000450:	d113      	bne.n	800047a <__aeabi_dmul+0x24a>
 8000452:	ea95 0f0c 	teq	r5, ip
 8000456:	d105      	bne.n	8000464 <__aeabi_dmul+0x234>
 8000458:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800045c:	bf1c      	itt	ne
 800045e:	4610      	movne	r0, r2
 8000460:	4619      	movne	r1, r3
 8000462:	d10a      	bne.n	800047a <__aeabi_dmul+0x24a>
 8000464:	ea81 0103 	eor.w	r1, r1, r3
 8000468:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800046c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000470:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000474:	f04f 0000 	mov.w	r0, #0
 8000478:	bd70      	pop	{r4, r5, r6, pc}
 800047a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800047e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000482:	bd70      	pop	{r4, r5, r6, pc}

08000484 <__aeabi_drsub>:
 8000484:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000488:	e002      	b.n	8000490 <__adddf3>
 800048a:	bf00      	nop

0800048c <__aeabi_dsub>:
 800048c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000490 <__adddf3>:
 8000490:	b530      	push	{r4, r5, lr}
 8000492:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000496:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800049a:	ea94 0f05 	teq	r4, r5
 800049e:	bf08      	it	eq
 80004a0:	ea90 0f02 	teqeq	r0, r2
 80004a4:	bf1f      	itttt	ne
 80004a6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004aa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004ae:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004b2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b6:	f000 80e2 	beq.w	800067e <__adddf3+0x1ee>
 80004ba:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004be:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004c2:	bfb8      	it	lt
 80004c4:	426d      	neglt	r5, r5
 80004c6:	dd0c      	ble.n	80004e2 <__adddf3+0x52>
 80004c8:	442c      	add	r4, r5
 80004ca:	ea80 0202 	eor.w	r2, r0, r2
 80004ce:	ea81 0303 	eor.w	r3, r1, r3
 80004d2:	ea82 0000 	eor.w	r0, r2, r0
 80004d6:	ea83 0101 	eor.w	r1, r3, r1
 80004da:	ea80 0202 	eor.w	r2, r0, r2
 80004de:	ea81 0303 	eor.w	r3, r1, r3
 80004e2:	2d36      	cmp	r5, #54	@ 0x36
 80004e4:	bf88      	it	hi
 80004e6:	bd30      	pophi	{r4, r5, pc}
 80004e8:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80004ec:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004f0:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80004f4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004f8:	d002      	beq.n	8000500 <__adddf3+0x70>
 80004fa:	4240      	negs	r0, r0
 80004fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000500:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000504:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000508:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800050c:	d002      	beq.n	8000514 <__adddf3+0x84>
 800050e:	4252      	negs	r2, r2
 8000510:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000514:	ea94 0f05 	teq	r4, r5
 8000518:	f000 80a7 	beq.w	800066a <__adddf3+0x1da>
 800051c:	f1a4 0401 	sub.w	r4, r4, #1
 8000520:	f1d5 0e20 	rsbs	lr, r5, #32
 8000524:	db0d      	blt.n	8000542 <__adddf3+0xb2>
 8000526:	fa02 fc0e 	lsl.w	ip, r2, lr
 800052a:	fa22 f205 	lsr.w	r2, r2, r5
 800052e:	1880      	adds	r0, r0, r2
 8000530:	f141 0100 	adc.w	r1, r1, #0
 8000534:	fa03 f20e 	lsl.w	r2, r3, lr
 8000538:	1880      	adds	r0, r0, r2
 800053a:	fa43 f305 	asr.w	r3, r3, r5
 800053e:	4159      	adcs	r1, r3
 8000540:	e00e      	b.n	8000560 <__adddf3+0xd0>
 8000542:	f1a5 0520 	sub.w	r5, r5, #32
 8000546:	f10e 0e20 	add.w	lr, lr, #32
 800054a:	2a01      	cmp	r2, #1
 800054c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000550:	bf28      	it	cs
 8000552:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000556:	fa43 f305 	asr.w	r3, r3, r5
 800055a:	18c0      	adds	r0, r0, r3
 800055c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000560:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000564:	d507      	bpl.n	8000576 <__adddf3+0xe6>
 8000566:	f04f 0e00 	mov.w	lr, #0
 800056a:	f1dc 0c00 	rsbs	ip, ip, #0
 800056e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000572:	eb6e 0101 	sbc.w	r1, lr, r1
 8000576:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800057a:	d31b      	bcc.n	80005b4 <__adddf3+0x124>
 800057c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000580:	d30c      	bcc.n	800059c <__adddf3+0x10c>
 8000582:	0849      	lsrs	r1, r1, #1
 8000584:	ea5f 0030 	movs.w	r0, r0, rrx
 8000588:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800058c:	f104 0401 	add.w	r4, r4, #1
 8000590:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000594:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000598:	f080 809a 	bcs.w	80006d0 <__adddf3+0x240>
 800059c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80005a0:	bf08      	it	eq
 80005a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005a6:	f150 0000 	adcs.w	r0, r0, #0
 80005aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ae:	ea41 0105 	orr.w	r1, r1, r5
 80005b2:	bd30      	pop	{r4, r5, pc}
 80005b4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005b8:	4140      	adcs	r0, r0
 80005ba:	eb41 0101 	adc.w	r1, r1, r1
 80005be:	3c01      	subs	r4, #1
 80005c0:	bf28      	it	cs
 80005c2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80005c6:	d2e9      	bcs.n	800059c <__adddf3+0x10c>
 80005c8:	f091 0f00 	teq	r1, #0
 80005cc:	bf04      	itt	eq
 80005ce:	4601      	moveq	r1, r0
 80005d0:	2000      	moveq	r0, #0
 80005d2:	fab1 f381 	clz	r3, r1
 80005d6:	bf08      	it	eq
 80005d8:	3320      	addeq	r3, #32
 80005da:	f1a3 030b 	sub.w	r3, r3, #11
 80005de:	f1b3 0220 	subs.w	r2, r3, #32
 80005e2:	da0c      	bge.n	80005fe <__adddf3+0x16e>
 80005e4:	320c      	adds	r2, #12
 80005e6:	dd08      	ble.n	80005fa <__adddf3+0x16a>
 80005e8:	f102 0c14 	add.w	ip, r2, #20
 80005ec:	f1c2 020c 	rsb	r2, r2, #12
 80005f0:	fa01 f00c 	lsl.w	r0, r1, ip
 80005f4:	fa21 f102 	lsr.w	r1, r1, r2
 80005f8:	e00c      	b.n	8000614 <__adddf3+0x184>
 80005fa:	f102 0214 	add.w	r2, r2, #20
 80005fe:	bfd8      	it	le
 8000600:	f1c2 0c20 	rsble	ip, r2, #32
 8000604:	fa01 f102 	lsl.w	r1, r1, r2
 8000608:	fa20 fc0c 	lsr.w	ip, r0, ip
 800060c:	bfdc      	itt	le
 800060e:	ea41 010c 	orrle.w	r1, r1, ip
 8000612:	4090      	lslle	r0, r2
 8000614:	1ae4      	subs	r4, r4, r3
 8000616:	bfa2      	ittt	ge
 8000618:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800061c:	4329      	orrge	r1, r5
 800061e:	bd30      	popge	{r4, r5, pc}
 8000620:	ea6f 0404 	mvn.w	r4, r4
 8000624:	3c1f      	subs	r4, #31
 8000626:	da1c      	bge.n	8000662 <__adddf3+0x1d2>
 8000628:	340c      	adds	r4, #12
 800062a:	dc0e      	bgt.n	800064a <__adddf3+0x1ba>
 800062c:	f104 0414 	add.w	r4, r4, #20
 8000630:	f1c4 0220 	rsb	r2, r4, #32
 8000634:	fa20 f004 	lsr.w	r0, r0, r4
 8000638:	fa01 f302 	lsl.w	r3, r1, r2
 800063c:	ea40 0003 	orr.w	r0, r0, r3
 8000640:	fa21 f304 	lsr.w	r3, r1, r4
 8000644:	ea45 0103 	orr.w	r1, r5, r3
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	f1c4 040c 	rsb	r4, r4, #12
 800064e:	f1c4 0220 	rsb	r2, r4, #32
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 f304 	lsl.w	r3, r1, r4
 800065a:	ea40 0003 	orr.w	r0, r0, r3
 800065e:	4629      	mov	r1, r5
 8000660:	bd30      	pop	{r4, r5, pc}
 8000662:	fa21 f004 	lsr.w	r0, r1, r4
 8000666:	4629      	mov	r1, r5
 8000668:	bd30      	pop	{r4, r5, pc}
 800066a:	f094 0f00 	teq	r4, #0
 800066e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000672:	bf06      	itte	eq
 8000674:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000678:	3401      	addeq	r4, #1
 800067a:	3d01      	subne	r5, #1
 800067c:	e74e      	b.n	800051c <__adddf3+0x8c>
 800067e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000682:	bf18      	it	ne
 8000684:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000688:	d029      	beq.n	80006de <__adddf3+0x24e>
 800068a:	ea94 0f05 	teq	r4, r5
 800068e:	bf08      	it	eq
 8000690:	ea90 0f02 	teqeq	r0, r2
 8000694:	d005      	beq.n	80006a2 <__adddf3+0x212>
 8000696:	ea54 0c00 	orrs.w	ip, r4, r0
 800069a:	bf04      	itt	eq
 800069c:	4619      	moveq	r1, r3
 800069e:	4610      	moveq	r0, r2
 80006a0:	bd30      	pop	{r4, r5, pc}
 80006a2:	ea91 0f03 	teq	r1, r3
 80006a6:	bf1e      	ittt	ne
 80006a8:	2100      	movne	r1, #0
 80006aa:	2000      	movne	r0, #0
 80006ac:	bd30      	popne	{r4, r5, pc}
 80006ae:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006b2:	d105      	bne.n	80006c0 <__adddf3+0x230>
 80006b4:	0040      	lsls	r0, r0, #1
 80006b6:	4149      	adcs	r1, r1
 80006b8:	bf28      	it	cs
 80006ba:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80006be:	bd30      	pop	{r4, r5, pc}
 80006c0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80006c4:	bf3c      	itt	cc
 80006c6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80006ca:	bd30      	popcc	{r4, r5, pc}
 80006cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006d0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80006d4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd30      	pop	{r4, r5, pc}
 80006de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006e2:	bf1a      	itte	ne
 80006e4:	4619      	movne	r1, r3
 80006e6:	4610      	movne	r0, r2
 80006e8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006ec:	bf1c      	itt	ne
 80006ee:	460b      	movne	r3, r1
 80006f0:	4602      	movne	r2, r0
 80006f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006f6:	bf06      	itte	eq
 80006f8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006fc:	ea91 0f03 	teqeq	r1, r3
 8000700:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000704:	bd30      	pop	{r4, r5, pc}
 8000706:	bf00      	nop

08000708 <__aeabi_ui2d>:
 8000708:	f090 0f00 	teq	r0, #0
 800070c:	bf04      	itt	eq
 800070e:	2100      	moveq	r1, #0
 8000710:	4770      	bxeq	lr
 8000712:	b530      	push	{r4, r5, lr}
 8000714:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000718:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800071c:	f04f 0500 	mov.w	r5, #0
 8000720:	f04f 0100 	mov.w	r1, #0
 8000724:	e750      	b.n	80005c8 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_i2d>:
 8000728:	f090 0f00 	teq	r0, #0
 800072c:	bf04      	itt	eq
 800072e:	2100      	moveq	r1, #0
 8000730:	4770      	bxeq	lr
 8000732:	b530      	push	{r4, r5, lr}
 8000734:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000738:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800073c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000740:	bf48      	it	mi
 8000742:	4240      	negmi	r0, r0
 8000744:	f04f 0100 	mov.w	r1, #0
 8000748:	e73e      	b.n	80005c8 <__adddf3+0x138>
 800074a:	bf00      	nop

0800074c <__aeabi_f2d>:
 800074c:	0042      	lsls	r2, r0, #1
 800074e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000752:	ea4f 0131 	mov.w	r1, r1, rrx
 8000756:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800075a:	bf1f      	itttt	ne
 800075c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000760:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000764:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000768:	4770      	bxne	lr
 800076a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800076e:	bf08      	it	eq
 8000770:	4770      	bxeq	lr
 8000772:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000776:	bf04      	itt	eq
 8000778:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800077c:	4770      	bxeq	lr
 800077e:	b530      	push	{r4, r5, lr}
 8000780:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000784:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000788:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	e71c      	b.n	80005c8 <__adddf3+0x138>
 800078e:	bf00      	nop

08000790 <__aeabi_ul2d>:
 8000790:	ea50 0201 	orrs.w	r2, r0, r1
 8000794:	bf08      	it	eq
 8000796:	4770      	bxeq	lr
 8000798:	b530      	push	{r4, r5, lr}
 800079a:	f04f 0500 	mov.w	r5, #0
 800079e:	e00a      	b.n	80007b6 <__aeabi_l2d+0x16>

080007a0 <__aeabi_l2d>:
 80007a0:	ea50 0201 	orrs.w	r2, r0, r1
 80007a4:	bf08      	it	eq
 80007a6:	4770      	bxeq	lr
 80007a8:	b530      	push	{r4, r5, lr}
 80007aa:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80007ae:	d502      	bpl.n	80007b6 <__aeabi_l2d+0x16>
 80007b0:	4240      	negs	r0, r0
 80007b2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007b6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007ba:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007be:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007c2:	f43f aed8 	beq.w	8000576 <__adddf3+0xe6>
 80007c6:	f04f 0203 	mov.w	r2, #3
 80007ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007ce:	bf18      	it	ne
 80007d0:	3203      	addne	r2, #3
 80007d2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007d6:	bf18      	it	ne
 80007d8:	3203      	addne	r2, #3
 80007da:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007de:	f1c2 0320 	rsb	r3, r2, #32
 80007e2:	fa00 fc03 	lsl.w	ip, r0, r3
 80007e6:	fa20 f002 	lsr.w	r0, r0, r2
 80007ea:	fa01 fe03 	lsl.w	lr, r1, r3
 80007ee:	ea40 000e 	orr.w	r0, r0, lr
 80007f2:	fa21 f102 	lsr.w	r1, r1, r2
 80007f6:	4414      	add	r4, r2
 80007f8:	e6bd      	b.n	8000576 <__adddf3+0xe6>
 80007fa:	bf00      	nop

080007fc <__aeabi_uldivmod>:
 80007fc:	b953      	cbnz	r3, 8000814 <__aeabi_uldivmod+0x18>
 80007fe:	b94a      	cbnz	r2, 8000814 <__aeabi_uldivmod+0x18>
 8000800:	2900      	cmp	r1, #0
 8000802:	bf08      	it	eq
 8000804:	2800      	cmpeq	r0, #0
 8000806:	bf1c      	itt	ne
 8000808:	f04f 31ff 	movne.w	r1, #4294967295
 800080c:	f04f 30ff 	movne.w	r0, #4294967295
 8000810:	f000 b96a 	b.w	8000ae8 <__aeabi_idiv0>
 8000814:	f1ad 0c08 	sub.w	ip, sp, #8
 8000818:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800081c:	f000 f806 	bl	800082c <__udivmoddi4>
 8000820:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000824:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000828:	b004      	add	sp, #16
 800082a:	4770      	bx	lr

0800082c <__udivmoddi4>:
 800082c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000830:	9d08      	ldr	r5, [sp, #32]
 8000832:	460c      	mov	r4, r1
 8000834:	2b00      	cmp	r3, #0
 8000836:	d14e      	bne.n	80008d6 <__udivmoddi4+0xaa>
 8000838:	4694      	mov	ip, r2
 800083a:	458c      	cmp	ip, r1
 800083c:	4686      	mov	lr, r0
 800083e:	fab2 f282 	clz	r2, r2
 8000842:	d962      	bls.n	800090a <__udivmoddi4+0xde>
 8000844:	b14a      	cbz	r2, 800085a <__udivmoddi4+0x2e>
 8000846:	f1c2 0320 	rsb	r3, r2, #32
 800084a:	4091      	lsls	r1, r2
 800084c:	fa20 f303 	lsr.w	r3, r0, r3
 8000850:	fa0c fc02 	lsl.w	ip, ip, r2
 8000854:	4319      	orrs	r1, r3
 8000856:	fa00 fe02 	lsl.w	lr, r0, r2
 800085a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800085e:	fa1f f68c 	uxth.w	r6, ip
 8000862:	fbb1 f4f7 	udiv	r4, r1, r7
 8000866:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800086a:	fb07 1114 	mls	r1, r7, r4, r1
 800086e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000872:	fb04 f106 	mul.w	r1, r4, r6
 8000876:	4299      	cmp	r1, r3
 8000878:	d90a      	bls.n	8000890 <__udivmoddi4+0x64>
 800087a:	eb1c 0303 	adds.w	r3, ip, r3
 800087e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000882:	f080 8112 	bcs.w	8000aaa <__udivmoddi4+0x27e>
 8000886:	4299      	cmp	r1, r3
 8000888:	f240 810f 	bls.w	8000aaa <__udivmoddi4+0x27e>
 800088c:	3c02      	subs	r4, #2
 800088e:	4463      	add	r3, ip
 8000890:	1a59      	subs	r1, r3, r1
 8000892:	fa1f f38e 	uxth.w	r3, lr
 8000896:	fbb1 f0f7 	udiv	r0, r1, r7
 800089a:	fb07 1110 	mls	r1, r7, r0, r1
 800089e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008a2:	fb00 f606 	mul.w	r6, r0, r6
 80008a6:	429e      	cmp	r6, r3
 80008a8:	d90a      	bls.n	80008c0 <__udivmoddi4+0x94>
 80008aa:	eb1c 0303 	adds.w	r3, ip, r3
 80008ae:	f100 31ff 	add.w	r1, r0, #4294967295
 80008b2:	f080 80fc 	bcs.w	8000aae <__udivmoddi4+0x282>
 80008b6:	429e      	cmp	r6, r3
 80008b8:	f240 80f9 	bls.w	8000aae <__udivmoddi4+0x282>
 80008bc:	4463      	add	r3, ip
 80008be:	3802      	subs	r0, #2
 80008c0:	1b9b      	subs	r3, r3, r6
 80008c2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80008c6:	2100      	movs	r1, #0
 80008c8:	b11d      	cbz	r5, 80008d2 <__udivmoddi4+0xa6>
 80008ca:	40d3      	lsrs	r3, r2
 80008cc:	2200      	movs	r2, #0
 80008ce:	e9c5 3200 	strd	r3, r2, [r5]
 80008d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008d6:	428b      	cmp	r3, r1
 80008d8:	d905      	bls.n	80008e6 <__udivmoddi4+0xba>
 80008da:	b10d      	cbz	r5, 80008e0 <__udivmoddi4+0xb4>
 80008dc:	e9c5 0100 	strd	r0, r1, [r5]
 80008e0:	2100      	movs	r1, #0
 80008e2:	4608      	mov	r0, r1
 80008e4:	e7f5      	b.n	80008d2 <__udivmoddi4+0xa6>
 80008e6:	fab3 f183 	clz	r1, r3
 80008ea:	2900      	cmp	r1, #0
 80008ec:	d146      	bne.n	800097c <__udivmoddi4+0x150>
 80008ee:	42a3      	cmp	r3, r4
 80008f0:	d302      	bcc.n	80008f8 <__udivmoddi4+0xcc>
 80008f2:	4290      	cmp	r0, r2
 80008f4:	f0c0 80f0 	bcc.w	8000ad8 <__udivmoddi4+0x2ac>
 80008f8:	1a86      	subs	r6, r0, r2
 80008fa:	eb64 0303 	sbc.w	r3, r4, r3
 80008fe:	2001      	movs	r0, #1
 8000900:	2d00      	cmp	r5, #0
 8000902:	d0e6      	beq.n	80008d2 <__udivmoddi4+0xa6>
 8000904:	e9c5 6300 	strd	r6, r3, [r5]
 8000908:	e7e3      	b.n	80008d2 <__udivmoddi4+0xa6>
 800090a:	2a00      	cmp	r2, #0
 800090c:	f040 8090 	bne.w	8000a30 <__udivmoddi4+0x204>
 8000910:	eba1 040c 	sub.w	r4, r1, ip
 8000914:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000918:	fa1f f78c 	uxth.w	r7, ip
 800091c:	2101      	movs	r1, #1
 800091e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000922:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000926:	fb08 4416 	mls	r4, r8, r6, r4
 800092a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800092e:	fb07 f006 	mul.w	r0, r7, r6
 8000932:	4298      	cmp	r0, r3
 8000934:	d908      	bls.n	8000948 <__udivmoddi4+0x11c>
 8000936:	eb1c 0303 	adds.w	r3, ip, r3
 800093a:	f106 34ff 	add.w	r4, r6, #4294967295
 800093e:	d202      	bcs.n	8000946 <__udivmoddi4+0x11a>
 8000940:	4298      	cmp	r0, r3
 8000942:	f200 80cd 	bhi.w	8000ae0 <__udivmoddi4+0x2b4>
 8000946:	4626      	mov	r6, r4
 8000948:	1a1c      	subs	r4, r3, r0
 800094a:	fa1f f38e 	uxth.w	r3, lr
 800094e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000952:	fb08 4410 	mls	r4, r8, r0, r4
 8000956:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800095a:	fb00 f707 	mul.w	r7, r0, r7
 800095e:	429f      	cmp	r7, r3
 8000960:	d908      	bls.n	8000974 <__udivmoddi4+0x148>
 8000962:	eb1c 0303 	adds.w	r3, ip, r3
 8000966:	f100 34ff 	add.w	r4, r0, #4294967295
 800096a:	d202      	bcs.n	8000972 <__udivmoddi4+0x146>
 800096c:	429f      	cmp	r7, r3
 800096e:	f200 80b0 	bhi.w	8000ad2 <__udivmoddi4+0x2a6>
 8000972:	4620      	mov	r0, r4
 8000974:	1bdb      	subs	r3, r3, r7
 8000976:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800097a:	e7a5      	b.n	80008c8 <__udivmoddi4+0x9c>
 800097c:	f1c1 0620 	rsb	r6, r1, #32
 8000980:	408b      	lsls	r3, r1
 8000982:	fa22 f706 	lsr.w	r7, r2, r6
 8000986:	431f      	orrs	r7, r3
 8000988:	fa20 fc06 	lsr.w	ip, r0, r6
 800098c:	fa04 f301 	lsl.w	r3, r4, r1
 8000990:	ea43 030c 	orr.w	r3, r3, ip
 8000994:	40f4      	lsrs	r4, r6
 8000996:	fa00 f801 	lsl.w	r8, r0, r1
 800099a:	0c38      	lsrs	r0, r7, #16
 800099c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80009a0:	fbb4 fef0 	udiv	lr, r4, r0
 80009a4:	fa1f fc87 	uxth.w	ip, r7
 80009a8:	fb00 441e 	mls	r4, r0, lr, r4
 80009ac:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80009b0:	fb0e f90c 	mul.w	r9, lr, ip
 80009b4:	45a1      	cmp	r9, r4
 80009b6:	fa02 f201 	lsl.w	r2, r2, r1
 80009ba:	d90a      	bls.n	80009d2 <__udivmoddi4+0x1a6>
 80009bc:	193c      	adds	r4, r7, r4
 80009be:	f10e 3aff 	add.w	sl, lr, #4294967295
 80009c2:	f080 8084 	bcs.w	8000ace <__udivmoddi4+0x2a2>
 80009c6:	45a1      	cmp	r9, r4
 80009c8:	f240 8081 	bls.w	8000ace <__udivmoddi4+0x2a2>
 80009cc:	f1ae 0e02 	sub.w	lr, lr, #2
 80009d0:	443c      	add	r4, r7
 80009d2:	eba4 0409 	sub.w	r4, r4, r9
 80009d6:	fa1f f983 	uxth.w	r9, r3
 80009da:	fbb4 f3f0 	udiv	r3, r4, r0
 80009de:	fb00 4413 	mls	r4, r0, r3, r4
 80009e2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80009e6:	fb03 fc0c 	mul.w	ip, r3, ip
 80009ea:	45a4      	cmp	ip, r4
 80009ec:	d907      	bls.n	80009fe <__udivmoddi4+0x1d2>
 80009ee:	193c      	adds	r4, r7, r4
 80009f0:	f103 30ff 	add.w	r0, r3, #4294967295
 80009f4:	d267      	bcs.n	8000ac6 <__udivmoddi4+0x29a>
 80009f6:	45a4      	cmp	ip, r4
 80009f8:	d965      	bls.n	8000ac6 <__udivmoddi4+0x29a>
 80009fa:	3b02      	subs	r3, #2
 80009fc:	443c      	add	r4, r7
 80009fe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000a02:	fba0 9302 	umull	r9, r3, r0, r2
 8000a06:	eba4 040c 	sub.w	r4, r4, ip
 8000a0a:	429c      	cmp	r4, r3
 8000a0c:	46ce      	mov	lr, r9
 8000a0e:	469c      	mov	ip, r3
 8000a10:	d351      	bcc.n	8000ab6 <__udivmoddi4+0x28a>
 8000a12:	d04e      	beq.n	8000ab2 <__udivmoddi4+0x286>
 8000a14:	b155      	cbz	r5, 8000a2c <__udivmoddi4+0x200>
 8000a16:	ebb8 030e 	subs.w	r3, r8, lr
 8000a1a:	eb64 040c 	sbc.w	r4, r4, ip
 8000a1e:	fa04 f606 	lsl.w	r6, r4, r6
 8000a22:	40cb      	lsrs	r3, r1
 8000a24:	431e      	orrs	r6, r3
 8000a26:	40cc      	lsrs	r4, r1
 8000a28:	e9c5 6400 	strd	r6, r4, [r5]
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	e750      	b.n	80008d2 <__udivmoddi4+0xa6>
 8000a30:	f1c2 0320 	rsb	r3, r2, #32
 8000a34:	fa20 f103 	lsr.w	r1, r0, r3
 8000a38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a3c:	fa24 f303 	lsr.w	r3, r4, r3
 8000a40:	4094      	lsls	r4, r2
 8000a42:	430c      	orrs	r4, r1
 8000a44:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a48:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a4c:	fa1f f78c 	uxth.w	r7, ip
 8000a50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a54:	fb08 3110 	mls	r1, r8, r0, r3
 8000a58:	0c23      	lsrs	r3, r4, #16
 8000a5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a5e:	fb00 f107 	mul.w	r1, r0, r7
 8000a62:	4299      	cmp	r1, r3
 8000a64:	d908      	bls.n	8000a78 <__udivmoddi4+0x24c>
 8000a66:	eb1c 0303 	adds.w	r3, ip, r3
 8000a6a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000a6e:	d22c      	bcs.n	8000aca <__udivmoddi4+0x29e>
 8000a70:	4299      	cmp	r1, r3
 8000a72:	d92a      	bls.n	8000aca <__udivmoddi4+0x29e>
 8000a74:	3802      	subs	r0, #2
 8000a76:	4463      	add	r3, ip
 8000a78:	1a5b      	subs	r3, r3, r1
 8000a7a:	b2a4      	uxth	r4, r4
 8000a7c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000a80:	fb08 3311 	mls	r3, r8, r1, r3
 8000a84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a88:	fb01 f307 	mul.w	r3, r1, r7
 8000a8c:	42a3      	cmp	r3, r4
 8000a8e:	d908      	bls.n	8000aa2 <__udivmoddi4+0x276>
 8000a90:	eb1c 0404 	adds.w	r4, ip, r4
 8000a94:	f101 36ff 	add.w	r6, r1, #4294967295
 8000a98:	d213      	bcs.n	8000ac2 <__udivmoddi4+0x296>
 8000a9a:	42a3      	cmp	r3, r4
 8000a9c:	d911      	bls.n	8000ac2 <__udivmoddi4+0x296>
 8000a9e:	3902      	subs	r1, #2
 8000aa0:	4464      	add	r4, ip
 8000aa2:	1ae4      	subs	r4, r4, r3
 8000aa4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000aa8:	e739      	b.n	800091e <__udivmoddi4+0xf2>
 8000aaa:	4604      	mov	r4, r0
 8000aac:	e6f0      	b.n	8000890 <__udivmoddi4+0x64>
 8000aae:	4608      	mov	r0, r1
 8000ab0:	e706      	b.n	80008c0 <__udivmoddi4+0x94>
 8000ab2:	45c8      	cmp	r8, r9
 8000ab4:	d2ae      	bcs.n	8000a14 <__udivmoddi4+0x1e8>
 8000ab6:	ebb9 0e02 	subs.w	lr, r9, r2
 8000aba:	eb63 0c07 	sbc.w	ip, r3, r7
 8000abe:	3801      	subs	r0, #1
 8000ac0:	e7a8      	b.n	8000a14 <__udivmoddi4+0x1e8>
 8000ac2:	4631      	mov	r1, r6
 8000ac4:	e7ed      	b.n	8000aa2 <__udivmoddi4+0x276>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	e799      	b.n	80009fe <__udivmoddi4+0x1d2>
 8000aca:	4630      	mov	r0, r6
 8000acc:	e7d4      	b.n	8000a78 <__udivmoddi4+0x24c>
 8000ace:	46d6      	mov	lr, sl
 8000ad0:	e77f      	b.n	80009d2 <__udivmoddi4+0x1a6>
 8000ad2:	4463      	add	r3, ip
 8000ad4:	3802      	subs	r0, #2
 8000ad6:	e74d      	b.n	8000974 <__udivmoddi4+0x148>
 8000ad8:	4606      	mov	r6, r0
 8000ada:	4623      	mov	r3, r4
 8000adc:	4608      	mov	r0, r1
 8000ade:	e70f      	b.n	8000900 <__udivmoddi4+0xd4>
 8000ae0:	3e02      	subs	r6, #2
 8000ae2:	4463      	add	r3, ip
 8000ae4:	e730      	b.n	8000948 <__udivmoddi4+0x11c>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_idiv0>:
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <ADS1299_Init>:
//static void GPIOsDefaultState();
static void PowerUpSequence();



void ADS1299_Init(){
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0

    //send_ads1299_command(ADS1299_SDATAC);
	PowerUpSequence();
 8000af0:	f000 f802 	bl	8000af8 <PowerUpSequence>

}
 8000af4:	bf00      	nop
 8000af6:	bd80      	pop	{r7, pc}

08000af8 <PowerUpSequence>:



static void PowerUpSequence(){
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b084      	sub	sp, #16
 8000afc:	af00      	add	r7, sp, #0

	uint8_t i = 0;
 8000afe:	2300      	movs	r3, #0
 8000b00:	73fb      	strb	r3, [r7, #15]
	uint8_t register_value = 0x00;
 8000b02:	2300      	movs	r3, #0
 8000b04:	73bb      	strb	r3, [r7, #14]
	uint8_t channset_value[ADS1299_CHANNELS] = {0};
 8000b06:	2300      	movs	r3, #0
 8000b08:	607b      	str	r3, [r7, #4]
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	60bb      	str	r3, [r7, #8]

	setnReset(GPIO_PIN_RESET);
 8000b0e:	2000      	movs	r0, #0
 8000b10:	f000 f88c 	bl	8000c2c <setnReset>
	setnPWRdown(GPIO_PIN_RESET);
 8000b14:	2000      	movs	r0, #0
 8000b16:	f000 f89b 	bl	8000c50 <setnPWRdown>
	setADS1299Start(GPIO_PIN_RESET);
 8000b1a:	2000      	movs	r0, #0
 8000b1c:	f000 f8aa 	bl	8000c74 <setADS1299Start>
	setADS1299CS(GPIO_PIN_SET);
 8000b20:	2001      	movs	r0, #1
 8000b22:	f000 f8b9 	bl	8000c98 <setADS1299CS>

	// Minimum delay after power on.
	HAL_Delay(POWER_UP_DELAY_MS);
 8000b26:	20c8      	movs	r0, #200	@ 0xc8
 8000b28:	f000 fc38 	bl	800139c <HAL_Delay>

	setnReset(GPIO_PIN_SET);
 8000b2c:	2001      	movs	r0, #1
 8000b2e:	f000 f87d 	bl	8000c2c <setnReset>
	setnPWRdown(GPIO_PIN_SET);
 8000b32:	2001      	movs	r0, #1
 8000b34:	f000 f88c 	bl	8000c50 <setnPWRdown>
	HAL_Delay(1);
 8000b38:	2001      	movs	r0, #1
 8000b3a:	f000 fc2f 	bl	800139c <HAL_Delay>

	setnReset(GPIO_PIN_RESET);
 8000b3e:	2000      	movs	r0, #0
 8000b40:	f000 f874 	bl	8000c2c <setnReset>
	HAL_Delay(1);
 8000b44:	2001      	movs	r0, #1
 8000b46:	f000 fc29 	bl	800139c <HAL_Delay>
	setnReset(GPIO_PIN_SET);
 8000b4a:	2001      	movs	r0, #1
 8000b4c:	f000 f86e 	bl	8000c2c <setnReset>

	// Minimum delay after power on.
	HAL_Delay(POWER_UP_DELAY_MS);
 8000b50:	20c8      	movs	r0, #200	@ 0xc8
 8000b52:	f000 fc23 	bl	800139c <HAL_Delay>

	send_ads1299_command(ADS1299_SDATAC);
 8000b56:	2011      	movs	r0, #17
 8000b58:	f000 f8ae 	bl	8000cb8 <send_ads1299_command>

	register_value = 0x96;
 8000b5c:	2396      	movs	r3, #150	@ 0x96
 8000b5e:	73bb      	strb	r3, [r7, #14]
	write_ads1299_register(ADS1299_REG_CONFIG1, 1, &register_value);
 8000b60:	f107 030e 	add.w	r3, r7, #14
 8000b64:	461a      	mov	r2, r3
 8000b66:	2101      	movs	r1, #1
 8000b68:	2001      	movs	r0, #1
 8000b6a:	f000 f8c7 	bl	8000cfc <write_ads1299_register>
	register_value = 0xC0;
 8000b6e:	23c0      	movs	r3, #192	@ 0xc0
 8000b70:	73bb      	strb	r3, [r7, #14]
	write_ads1299_register(ADS1299_REG_CONFIG2, 1, &register_value);
 8000b72:	f107 030e 	add.w	r3, r7, #14
 8000b76:	461a      	mov	r2, r3
 8000b78:	2101      	movs	r1, #1
 8000b7a:	2002      	movs	r0, #2
 8000b7c:	f000 f8be 	bl	8000cfc <write_ads1299_register>
	register_value = 0xE0;
 8000b80:	23e0      	movs	r3, #224	@ 0xe0
 8000b82:	73bb      	strb	r3, [r7, #14]
	write_ads1299_register(ADS1299_REG_CONFIG3, 1, &register_value);
 8000b84:	f107 030e 	add.w	r3, r7, #14
 8000b88:	461a      	mov	r2, r3
 8000b8a:	2101      	movs	r1, #1
 8000b8c:	2003      	movs	r0, #3
 8000b8e:	f000 f8b5 	bl	8000cfc <write_ads1299_register>

	for(i=0;i<ADS1299_CHANNELS;i++){
 8000b92:	2300      	movs	r3, #0
 8000b94:	73fb      	strb	r3, [r7, #15]
 8000b96:	e008      	b.n	8000baa <PowerUpSequence+0xb2>
		channset_value[i] = 0x01;
 8000b98:	7bfb      	ldrb	r3, [r7, #15]
 8000b9a:	3310      	adds	r3, #16
 8000b9c:	443b      	add	r3, r7
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(i=0;i<ADS1299_CHANNELS;i++){
 8000ba4:	7bfb      	ldrb	r3, [r7, #15]
 8000ba6:	3301      	adds	r3, #1
 8000ba8:	73fb      	strb	r3, [r7, #15]
 8000baa:	7bfb      	ldrb	r3, [r7, #15]
 8000bac:	2b07      	cmp	r3, #7
 8000bae:	d9f3      	bls.n	8000b98 <PowerUpSequence+0xa0>
	}

	write_ads1299_register(ADS1299_REG_CH1SET, ADS1299_CHANNELS, channset_value);
 8000bb0:	1d3b      	adds	r3, r7, #4
 8000bb2:	461a      	mov	r2, r3
 8000bb4:	2108      	movs	r1, #8
 8000bb6:	2005      	movs	r0, #5
 8000bb8:	f000 f8a0 	bl	8000cfc <write_ads1299_register>

	setADS1299Start(GPIO_PIN_SET);
 8000bbc:	2001      	movs	r0, #1
 8000bbe:	f000 f859 	bl	8000c74 <setADS1299Start>

	// Wait 1ms.
	HAL_Delay(1);
 8000bc2:	2001      	movs	r0, #1
 8000bc4:	f000 fbea 	bl	800139c <HAL_Delay>

	send_ads1299_command(ADS1299_RDATAC);
 8000bc8:	2010      	movs	r0, #16
 8000bca:	f000 f875 	bl	8000cb8 <send_ads1299_command>

	// Wait 1ms.
	HAL_Delay(20);
 8000bce:	2014      	movs	r0, #20
 8000bd0:	f000 fbe4 	bl	800139c <HAL_Delay>

	send_ads1299_command(ADS1299_SDATAC);
 8000bd4:	2011      	movs	r0, #17
 8000bd6:	f000 f86f 	bl	8000cb8 <send_ads1299_command>
	register_value = 0xD0;
 8000bda:	23d0      	movs	r3, #208	@ 0xd0
 8000bdc:	73bb      	strb	r3, [r7, #14]
	write_ads1299_register(ADS1299_REG_CONFIG2, 1, &register_value);
 8000bde:	f107 030e 	add.w	r3, r7, #14
 8000be2:	461a      	mov	r2, r3
 8000be4:	2101      	movs	r1, #1
 8000be6:	2002      	movs	r0, #2
 8000be8:	f000 f888 	bl	8000cfc <write_ads1299_register>

	for(i=0;i<ADS1299_CHANNELS;i++){
 8000bec:	2300      	movs	r3, #0
 8000bee:	73fb      	strb	r3, [r7, #15]
 8000bf0:	e008      	b.n	8000c04 <PowerUpSequence+0x10c>
		channset_value[i] = 0x55;
 8000bf2:	7bfb      	ldrb	r3, [r7, #15]
 8000bf4:	3310      	adds	r3, #16
 8000bf6:	443b      	add	r3, r7
 8000bf8:	2255      	movs	r2, #85	@ 0x55
 8000bfa:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(i=0;i<ADS1299_CHANNELS;i++){
 8000bfe:	7bfb      	ldrb	r3, [r7, #15]
 8000c00:	3301      	adds	r3, #1
 8000c02:	73fb      	strb	r3, [r7, #15]
 8000c04:	7bfb      	ldrb	r3, [r7, #15]
 8000c06:	2b07      	cmp	r3, #7
 8000c08:	d9f3      	bls.n	8000bf2 <PowerUpSequence+0xfa>
	}

	write_ads1299_register(ADS1299_REG_CH1SET, ADS1299_CHANNELS, channset_value);
 8000c0a:	1d3b      	adds	r3, r7, #4
 8000c0c:	461a      	mov	r2, r3
 8000c0e:	2108      	movs	r1, #8
 8000c10:	2005      	movs	r0, #5
 8000c12:	f000 f873 	bl	8000cfc <write_ads1299_register>

	HAL_Delay(1);
 8000c16:	2001      	movs	r0, #1
 8000c18:	f000 fbc0 	bl	800139c <HAL_Delay>

	send_ads1299_command(ADS1299_RDATAC);
 8000c1c:	2010      	movs	r0, #16
 8000c1e:	f000 f84b 	bl	8000cb8 <send_ads1299_command>

}
 8000c22:	bf00      	nop
 8000c24:	3710      	adds	r7, #16
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
	...

08000c2c <setnReset>:
}*/




static void setnReset(uint8_t value){
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	4603      	mov	r3, r0
 8000c34:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ADS1299_nRESET_GPIO_Port, ADS1299_nRESET_Pin, value);
 8000c36:	79fb      	ldrb	r3, [r7, #7]
 8000c38:	461a      	mov	r2, r3
 8000c3a:	2180      	movs	r1, #128	@ 0x80
 8000c3c:	4803      	ldr	r0, [pc, #12]	@ (8000c4c <setnReset+0x20>)
 8000c3e:	f003 f8fd 	bl	8003e3c <HAL_GPIO_WritePin>
}
 8000c42:	bf00      	nop
 8000c44:	3708      	adds	r7, #8
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	48000800 	.word	0x48000800

08000c50 <setnPWRdown>:

static void setnPWRdown(uint8_t value){
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	4603      	mov	r3, r0
 8000c58:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ADS1299_nPWDN_GPIO_Port, ADS1299_nPWDN_Pin, value);
 8000c5a:	79fb      	ldrb	r3, [r7, #7]
 8000c5c:	461a      	mov	r2, r3
 8000c5e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c62:	4803      	ldr	r0, [pc, #12]	@ (8000c70 <setnPWRdown+0x20>)
 8000c64:	f003 f8ea 	bl	8003e3c <HAL_GPIO_WritePin>
}
 8000c68:	bf00      	nop
 8000c6a:	3708      	adds	r7, #8
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	48000800 	.word	0x48000800

08000c74 <setADS1299Start>:

static void setADS1299Start(uint8_t value){
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ADS1299_START_GPIO_Port, ADS1299_START_Pin, value);
 8000c7e:	79fb      	ldrb	r3, [r7, #7]
 8000c80:	461a      	mov	r2, r3
 8000c82:	2140      	movs	r1, #64	@ 0x40
 8000c84:	4803      	ldr	r0, [pc, #12]	@ (8000c94 <setADS1299Start+0x20>)
 8000c86:	f003 f8d9 	bl	8003e3c <HAL_GPIO_WritePin>
}
 8000c8a:	bf00      	nop
 8000c8c:	3708      	adds	r7, #8
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	48000800 	.word	0x48000800

08000c98 <setADS1299CS>:

static void setADS1299CS(uint8_t value){
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ADS1299_CS_GPIO_Port, ADS1299_CS_Pin, value);
 8000ca2:	79fb      	ldrb	r3, [r7, #7]
 8000ca4:	461a      	mov	r2, r3
 8000ca6:	2110      	movs	r1, #16
 8000ca8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cac:	f003 f8c6 	bl	8003e3c <HAL_GPIO_WritePin>
}
 8000cb0:	bf00      	nop
 8000cb2:	3708      	adds	r7, #8
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}

08000cb8 <send_ads1299_command>:

static uint8_t send_ads1299_command(uint8_t command)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	71fb      	strb	r3, [r7, #7]
    // Pull CS (Chip Select) low to begin the SPI communication
	setADS1299CS(GPIO_PIN_RESET);  // Assuming CS is on GPIOA pin 4
 8000cc2:	2000      	movs	r0, #0
 8000cc4:	f7ff ffe8 	bl	8000c98 <setADS1299CS>

    // Transmit the command to ADS1299
    if (HAL_SPI_Transmit(&hspi1, &command, 1, HAL_MAX_DELAY) != HAL_OK)
 8000cc8:	1df9      	adds	r1, r7, #7
 8000cca:	f04f 33ff 	mov.w	r3, #4294967295
 8000cce:	2201      	movs	r2, #1
 8000cd0:	4809      	ldr	r0, [pc, #36]	@ (8000cf8 <send_ads1299_command+0x40>)
 8000cd2:	f005 fed2 	bl	8006a7a <HAL_SPI_Transmit>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d004      	beq.n	8000ce6 <send_ads1299_command+0x2e>
    {
    	setADS1299CS(GPIO_PIN_SET);
 8000cdc:	2001      	movs	r0, #1
 8000cde:	f7ff ffdb 	bl	8000c98 <setADS1299CS>
        return HAL_ERROR;  // Return error if transmission fails
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	e003      	b.n	8000cee <send_ads1299_command+0x36>
    }

    // Pull CS (Chip Select) high to end the SPI communication
    setADS1299CS(GPIO_PIN_SET);
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	f7ff ffd6 	bl	8000c98 <setADS1299CS>

    return HAL_OK;  // Return success
 8000cec:	2300      	movs	r3, #0
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	3708      	adds	r7, #8
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	200002ec 	.word	0x200002ec

08000cfc <write_ads1299_register>:
}



static uint8_t write_ads1299_register(uint8_t start_addr, uint8_t num_regs, uint8_t *data)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b084      	sub	sp, #16
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	4603      	mov	r3, r0
 8000d04:	603a      	str	r2, [r7, #0]
 8000d06:	71fb      	strb	r3, [r7, #7]
 8000d08:	460b      	mov	r3, r1
 8000d0a:	71bb      	strb	r3, [r7, #6]
    // Buffer to hold the command sequence
    uint8_t tx_buffer[2];
    tx_buffer[0] = ADS1299_WREG | start_addr;  // Write command with starting register address
 8000d0c:	79fb      	ldrb	r3, [r7, #7]
 8000d0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d12:	b2db      	uxtb	r3, r3
 8000d14:	733b      	strb	r3, [r7, #12]
    tx_buffer[1] = num_regs - 1;                        // Number of registers to write (0-indexed)
 8000d16:	79bb      	ldrb	r3, [r7, #6]
 8000d18:	3b01      	subs	r3, #1
 8000d1a:	b2db      	uxtb	r3, r3
 8000d1c:	737b      	strb	r3, [r7, #13]

    // Pull CS (Chip Select) low to begin the SPI communication
    setADS1299CS(GPIO_PIN_RESET);  // Assuming CS is on GPIOA pin 4
 8000d1e:	2000      	movs	r0, #0
 8000d20:	f7ff ffba 	bl	8000c98 <setADS1299CS>

    // Transmit the write command and register address
    if (HAL_SPI_Transmit(&hspi1, tx_buffer, 2, HAL_MAX_DELAY) != HAL_OK)
 8000d24:	f107 010c 	add.w	r1, r7, #12
 8000d28:	f04f 33ff 	mov.w	r3, #4294967295
 8000d2c:	2202      	movs	r2, #2
 8000d2e:	4814      	ldr	r0, [pc, #80]	@ (8000d80 <write_ads1299_register+0x84>)
 8000d30:	f005 fea3 	bl	8006a7a <HAL_SPI_Transmit>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d007      	beq.n	8000d4a <write_ads1299_register+0x4e>
    {
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);  // End SPI communication
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	2110      	movs	r1, #16
 8000d3e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d42:	f003 f87b 	bl	8003e3c <HAL_GPIO_WritePin>
        return HAL_ERROR;  // Return error if transmission fails
 8000d46:	2301      	movs	r3, #1
 8000d48:	e016      	b.n	8000d78 <write_ads1299_register+0x7c>
    }

    // Transmit the data to be written to the registers
    if (HAL_SPI_Transmit(&hspi1, data, num_regs, HAL_MAX_DELAY) != HAL_OK)
 8000d4a:	79bb      	ldrb	r3, [r7, #6]
 8000d4c:	b29a      	uxth	r2, r3
 8000d4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d52:	6839      	ldr	r1, [r7, #0]
 8000d54:	480a      	ldr	r0, [pc, #40]	@ (8000d80 <write_ads1299_register+0x84>)
 8000d56:	f005 fe90 	bl	8006a7a <HAL_SPI_Transmit>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d007      	beq.n	8000d70 <write_ads1299_register+0x74>
    {
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);  // End SPI communication
 8000d60:	2201      	movs	r2, #1
 8000d62:	2110      	movs	r1, #16
 8000d64:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d68:	f003 f868 	bl	8003e3c <HAL_GPIO_WritePin>
        return HAL_ERROR;  // Return error if data transmission fails
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	e003      	b.n	8000d78 <write_ads1299_register+0x7c>
    }

    setADS1299CS(GPIO_PIN_SET);
 8000d70:	2001      	movs	r0, #1
 8000d72:	f7ff ff91 	bl	8000c98 <setADS1299CS>

    return HAL_OK;  // Return success
 8000d76:	2300      	movs	r3, #0
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	3710      	adds	r7, #16
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	200002ec 	.word	0x200002ec

08000d84 <ADS1299_ReadSamples>:
 * @brief Reads samples from the ADS1299 via SPI.
 * @param statusBuffer Pointer to a buffer to store the 3 status bytes.
 * @param dataBuffer Pointer to a buffer to store the 24 data bytes (8 channels x 3 bytes each).
 * @retval HAL_StatusTypeDef HAL status indicating success or error.
 */
HAL_StatusTypeDef ADS1299_ReadSamples(uint8_t *statusBuffer, uint8_t *dataBuffer) {
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b08c      	sub	sp, #48	@ 0x30
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
 8000d8c:	6039      	str	r1, [r7, #0]

    uint8_t spiRxBuffer[27] = {0}; // Buffer to store all received bytes (3 status + 24 data)
 8000d8e:	2300      	movs	r3, #0
 8000d90:	60fb      	str	r3, [r7, #12]
 8000d92:	f107 0310 	add.w	r3, r7, #16
 8000d96:	2200      	movs	r2, #0
 8000d98:	601a      	str	r2, [r3, #0]
 8000d9a:	605a      	str	r2, [r3, #4]
 8000d9c:	609a      	str	r2, [r3, #8]
 8000d9e:	60da      	str	r2, [r3, #12]
 8000da0:	611a      	str	r2, [r3, #16]
 8000da2:	f8c3 2013 	str.w	r2, [r3, #19]
    HAL_StatusTypeDef result;

    // Ensure that statusBuffer and dataBuffer are not NULL
    if (statusBuffer == NULL || dataBuffer == NULL) {
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d002      	beq.n	8000db2 <ADS1299_ReadSamples+0x2e>
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d101      	bne.n	8000db6 <ADS1299_ReadSamples+0x32>
        return HAL_ERROR;
 8000db2:	2301      	movs	r3, #1
 8000db4:	e03d      	b.n	8000e32 <ADS1299_ReadSamples+0xae>
    }

    setADS1299CS(GPIO_PIN_RESET);
 8000db6:	2000      	movs	r0, #0
 8000db8:	f7ff ff6e 	bl	8000c98 <setADS1299CS>

    // Perform SPI reception of 27 bytes
    result = HAL_SPI_Receive(&hspi1, spiRxBuffer, 27, HAL_MAX_DELAY);
 8000dbc:	f107 010c 	add.w	r1, r7, #12
 8000dc0:	f04f 33ff 	mov.w	r3, #4294967295
 8000dc4:	221b      	movs	r2, #27
 8000dc6:	481d      	ldr	r0, [pc, #116]	@ (8000e3c <ADS1299_ReadSamples+0xb8>)
 8000dc8:	f005 ffcc 	bl	8006d64 <HAL_SPI_Receive>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    setADS1299CS(GPIO_PIN_SET);
 8000dd2:	2001      	movs	r0, #1
 8000dd4:	f7ff ff60 	bl	8000c98 <setADS1299CS>

    if (result != HAL_OK) {
 8000dd8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d002      	beq.n	8000de6 <ADS1299_ReadSamples+0x62>
        return result; // Return if there is an SPI error
 8000de0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000de4:	e025      	b.n	8000e32 <ADS1299_ReadSamples+0xae>
    }

    // Copy the first 3 bytes to the status buffer
    for (int i = 0; i < 3; i++) {
 8000de6:	2300      	movs	r3, #0
 8000de8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000dea:	e00b      	b.n	8000e04 <ADS1299_ReadSamples+0x80>
        statusBuffer[i] = spiRxBuffer[i];
 8000dec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000dee:	687a      	ldr	r2, [r7, #4]
 8000df0:	4413      	add	r3, r2
 8000df2:	f107 010c 	add.w	r1, r7, #12
 8000df6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000df8:	440a      	add	r2, r1
 8000dfa:	7812      	ldrb	r2, [r2, #0]
 8000dfc:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 3; i++) {
 8000dfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e00:	3301      	adds	r3, #1
 8000e02:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000e04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e06:	2b02      	cmp	r3, #2
 8000e08:	ddf0      	ble.n	8000dec <ADS1299_ReadSamples+0x68>
    }

    // Copy the next 24 bytes to the data buffer
    for (int i = 0; i < 24; i++) {
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000e0e:	e00c      	b.n	8000e2a <ADS1299_ReadSamples+0xa6>
        dataBuffer[i] = spiRxBuffer[i + 3];
 8000e10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e12:	1cda      	adds	r2, r3, #3
 8000e14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e16:	6839      	ldr	r1, [r7, #0]
 8000e18:	440b      	add	r3, r1
 8000e1a:	3230      	adds	r2, #48	@ 0x30
 8000e1c:	443a      	add	r2, r7
 8000e1e:	f812 2c24 	ldrb.w	r2, [r2, #-36]
 8000e22:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 24; i++) {
 8000e24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e26:	3301      	adds	r3, #1
 8000e28:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000e2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e2c:	2b17      	cmp	r3, #23
 8000e2e:	ddef      	ble.n	8000e10 <ADS1299_ReadSamples+0x8c>
    }

    return HAL_OK;
 8000e30:	2300      	movs	r3, #0
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	3730      	adds	r7, #48	@ 0x30
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	200002ec 	.word	0x200002ec

08000e40 <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 8000e40:	b5b0      	push	{r4, r5, r7, lr}
 8000e42:	b088      	sub	sp, #32
 8000e44:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8000e46:	4b0b      	ldr	r3, [pc, #44]	@ (8000e74 <APPD_EnableCPU2+0x34>)
 8000e48:	1d3c      	adds	r4, r7, #4
 8000e4a:	461d      	mov	r5, r3
 8000e4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e50:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e54:	c403      	stmia	r4!, {r0, r1}
 8000e56:	8022      	strh	r2, [r4, #0]
 8000e58:	3402      	adds	r4, #2
 8000e5a:	0c13      	lsrs	r3, r2, #16
 8000e5c:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8000e5e:	f00a fc41 	bl	800b6e4 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8000e62:	1d3b      	adds	r3, r7, #4
 8000e64:	4618      	mov	r0, r3
 8000e66:	f009 fed2 	bl	800ac0e <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 8000e6a:	bf00      	nop
}
 8000e6c:	3720      	adds	r7, #32
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bdb0      	pop	{r4, r5, r7, pc}
 8000e72:	bf00      	nop
 8000e74:	0800f7c0 	.word	0x0800f7c0

08000e78 <DbgOutputTraces>:
/* USER CODE END DbgOutputInit */
  return;
}

void DbgOutputTraces(  uint8_t *p_data, uint16_t size, void (*cb)(void) )
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b084      	sub	sp, #16
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	60f8      	str	r0, [r7, #12]
 8000e80:	460b      	mov	r3, r1
 8000e82:	607a      	str	r2, [r7, #4]
 8000e84:	817b      	strh	r3, [r7, #10]
/* USER CODE END DbgOutputTraces */
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 8000e86:	897a      	ldrh	r2, [r7, #10]
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	68f9      	ldr	r1, [r7, #12]
 8000e8c:	2000      	movs	r0, #0
 8000e8e:	f001 f989 	bl	80021a4 <HW_UART_Transmit_DMA>

/* USER CODE END DbgOutputTraces */
  return;
 8000e92:	bf00      	nop
}
 8000e94:	3710      	adds	r7, #16
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
	...

08000e9c <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8000ea4:	4b07      	ldr	r3, [pc, #28]	@ (8000ec4 <LL_C2_PWR_SetPowerMode+0x28>)
 8000ea6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000eaa:	f023 0207 	bic.w	r2, r3, #7
 8000eae:	4905      	ldr	r1, [pc, #20]	@ (8000ec4 <LL_C2_PWR_SetPowerMode+0x28>)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8000eb8:	bf00      	nop
 8000eba:	370c      	adds	r7, #12
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr
 8000ec4:	58000400 	.word	0x58000400

08000ec8 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000ed0:	4b06      	ldr	r3, [pc, #24]	@ (8000eec <LL_EXTI_EnableIT_32_63+0x24>)
 8000ed2:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8000ed6:	4905      	ldr	r1, [pc, #20]	@ (8000eec <LL_EXTI_EnableIT_32_63+0x24>)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	4313      	orrs	r3, r2
 8000edc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8000ee0:	bf00      	nop
 8000ee2:	370c      	adds	r7, #12
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr
 8000eec:	58000800 	.word	0x58000800

08000ef0 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8000ef8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000efc:	4a0a      	ldr	r2, [pc, #40]	@ (8000f28 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8000efe:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8000f02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f06:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000f0a:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	021b      	lsls	r3, r3, #8
 8000f12:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000f16:	4313      	orrs	r3, r2
 8000f18:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
}
 8000f1c:	bf00      	nop
 8000f1e:	370c      	adds	r7, #12
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr
 8000f28:	cafecafe 	.word	0xcafecafe

08000f2c <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000f34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f38:	689b      	ldr	r3, [r3, #8]
 8000f3a:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8000f3e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	4313      	orrs	r3, r2
 8000f46:	608b      	str	r3, [r1, #8]
}
 8000f48:	bf00      	nop
 8000f4a:	370c      	adds	r7, #12
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr

08000f54 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 8000f58:	4b04      	ldr	r3, [pc, #16]	@ (8000f6c <LL_DBGMCU_GetDeviceID+0x18>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	e0042000 	.word	0xe0042000

08000f70 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8000f74:	4b04      	ldr	r3, [pc, #16]	@ (8000f88 <LL_DBGMCU_GetRevisionID+0x18>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	0c1b      	lsrs	r3, r3, #16
 8000f7a:	b29b      	uxth	r3, r3
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	e0042000 	.word	0xe0042000

08000f8c <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8000f90:	4b05      	ldr	r3, [pc, #20]	@ (8000fa8 <LL_LPM_EnableSleep+0x1c>)
 8000f92:	691b      	ldr	r3, [r3, #16]
 8000f94:	4a04      	ldr	r2, [pc, #16]	@ (8000fa8 <LL_LPM_EnableSleep+0x1c>)
 8000f96:	f023 0304 	bic.w	r3, r3, #4
 8000f9a:	6113      	str	r3, [r2, #16]
}
 8000f9c:	bf00      	nop
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	e000ed00 	.word	0xe000ed00

08000fac <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	22ff      	movs	r2, #255	@ 0xff
 8000fb8:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000fba:	bf00      	nop
 8000fbc:	370c      	adds	r7, #12
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr

08000fc6 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8000fc6:	b480      	push	{r7}
 8000fc8:	b083      	sub	sp, #12
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	22ca      	movs	r2, #202	@ 0xca
 8000fd2:	625a      	str	r2, [r3, #36]	@ 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2253      	movs	r2, #83	@ 0x53
 8000fd8:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000fda:	bf00      	nop
 8000fdc:	370c      	adds	r7, #12
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr

08000fe6 <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8000fe6:	b480      	push	{r7}
 8000fe8:	b083      	sub	sp, #12
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	6078      	str	r0, [r7, #4]
 8000fee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	689b      	ldr	r3, [r3, #8]
 8000ff4:	f023 0207 	bic.w	r2, r3, #7
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	431a      	orrs	r2, r3
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	609a      	str	r2, [r3, #8]
}
 8001000:	bf00      	nop
 8001002:	370c      	adds	r7, #12
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr

0800100c <MX_APPE_Config>:
static void UartCmdExecute(void);
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001010:	4b04      	ldr	r3, [pc, #16]	@ (8001024 <MX_APPE_Config+0x18>)
 8001012:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001016:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8001018:	f000 f828 	bl	800106c <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 800101c:	f000 f82d 	bl	800107a <Config_HSE>

  return;
 8001020:	bf00      	nop
}
 8001022:	bd80      	pop	{r7, pc}
 8001024:	58004000 	.word	0x58004000

08001028 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 800102c:	f000 f839 	bl	80010a2 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8001030:	f000 f852 	bl	80010d8 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8001034:	4905      	ldr	r1, [pc, #20]	@ (800104c <MX_APPE_Init+0x24>)
 8001036:	2000      	movs	r0, #0
 8001038:	f000 fe48 	bl	8001ccc <HW_TS_Init>
  
  /**
   * The Standby mode should not be entered before the initialization is over
   * The default state of the Low Power Manager is to allow the Standby Mode so an request is needed here
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 800103c:	2101      	movs	r1, #1
 800103e:	2001      	movs	r0, #1
 8001040:	f00c ff98 	bl	800df74 <UTIL_LPM_SetOffMode>
  //Button_Init();

  //RxUART_Init();

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8001044:	f000 f856 	bl	80010f4 <appe_Tl_Init>
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */

   return;
 8001048:	bf00      	nop
}
 800104a:	bd80      	pop	{r7, pc}
 800104c:	200001d4 	.word	0x200001d4

08001050 <Init_Smps>:

void Init_Smps(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 8001054:	bf00      	nop
}
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr

0800105e <Init_Exti>:

void Init_Exti(void)
{
 800105e:	b580      	push	{r7, lr}
 8001060:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 8001062:	2050      	movs	r0, #80	@ 0x50
 8001064:	f7ff ff30 	bl	8000ec8 <LL_EXTI_EnableIT_32_63>

  return;
 8001068:	bf00      	nop
}
 800106a:	bd80      	pop	{r7, pc}

0800106c <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  Reset_BackupDomain();

  Reset_IPCC();
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 8001070:	bf00      	nop
}
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr

0800107a <Config_HSE>:
  return;
}
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 800107a:	b580      	push	{r7, lr}
 800107c:	b082      	sub	sp, #8
 800107e:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8001080:	2000      	movs	r0, #0
 8001082:	f00a fc5b 	bl	800b93c <OTP_Read>
 8001086:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d005      	beq.n	800109a <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	799b      	ldrb	r3, [r3, #6]
 8001092:	4618      	mov	r0, r3
 8001094:	f7ff ff2c 	bl	8000ef0 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8001098:	bf00      	nop
 800109a:	bf00      	nop
}
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}

080010a2 <System_Init>:

static void System_Init(void)
{
 80010a2:	b580      	push	{r7, lr}
 80010a4:	af00      	add	r7, sp, #0
  Init_Smps();
 80010a6:	f7ff ffd3 	bl	8001050 <Init_Smps>

  Init_Exti();
 80010aa:	f7ff ffd8 	bl	800105e <Init_Exti>

  Init_Rtc();
 80010ae:	f000 f803 	bl	80010b8 <Init_Rtc>

  return;
 80010b2:	bf00      	nop
}
 80010b4:	bd80      	pop	{r7, pc}
	...

080010b8 <Init_Rtc>:

static void Init_Rtc(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 80010bc:	4805      	ldr	r0, [pc, #20]	@ (80010d4 <Init_Rtc+0x1c>)
 80010be:	f7ff ff82 	bl	8000fc6 <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 80010c2:	2100      	movs	r1, #0
 80010c4:	4803      	ldr	r0, [pc, #12]	@ (80010d4 <Init_Rtc+0x1c>)
 80010c6:	f7ff ff8e 	bl	8000fe6 <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 80010ca:	4802      	ldr	r0, [pc, #8]	@ (80010d4 <Init_Rtc+0x1c>)
 80010cc:	f7ff ff6e 	bl	8000fac <LL_RTC_EnableWriteProtection>

  return;
 80010d0:	bf00      	nop
}
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	40002800 	.word	0x40002800

080010d8 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 80010dc:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80010e0:	f7ff ff24 	bl	8000f2c <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 80010e4:	f00c ff34 	bl	800df50 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 80010e8:	2004      	movs	r0, #4
 80010ea:	f7ff fed7 	bl	8000e9c <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 80010ee:	bf00      	nop
}
 80010f0:	bd80      	pop	{r7, pc}
	...

080010f4 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b088      	sub	sp, #32
 80010f8:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 80010fa:	f00a f93d 	bl	800b378 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 80010fe:	4a11      	ldr	r2, [pc, #68]	@ (8001144 <appe_Tl_Init+0x50>)
 8001100:	2100      	movs	r1, #0
 8001102:	2040      	movs	r0, #64	@ 0x40
 8001104:	f00d f862 	bl	800e1cc <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8001108:	4b0f      	ldr	r3, [pc, #60]	@ (8001148 <appe_Tl_Init+0x54>)
 800110a:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 800110c:	4b0f      	ldr	r3, [pc, #60]	@ (800114c <appe_Tl_Init+0x58>)
 800110e:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8001110:	463b      	mov	r3, r7
 8001112:	4619      	mov	r1, r3
 8001114:	480e      	ldr	r0, [pc, #56]	@ (8001150 <appe_Tl_Init+0x5c>)
 8001116:	f009 fff1 	bl	800b0fc <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 800111a:	4b0e      	ldr	r3, [pc, #56]	@ (8001154 <appe_Tl_Init+0x60>)
 800111c:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 800111e:	4b0e      	ldr	r3, [pc, #56]	@ (8001158 <appe_Tl_Init+0x64>)
 8001120:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8001122:	4b0e      	ldr	r3, [pc, #56]	@ (800115c <appe_Tl_Init+0x68>)
 8001124:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8001126:	f240 533c 	movw	r3, #1340	@ 0x53c
 800112a:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 800112c:	f107 0308 	add.w	r3, r7, #8
 8001130:	4618      	mov	r0, r3
 8001132:	f00a fa63 	bl	800b5fc <TL_MM_Init>

  TL_Enable();
 8001136:	f00a f919 	bl	800b36c <TL_Enable>

  return;
 800113a:	bf00      	nop
}
 800113c:	3720      	adds	r7, #32
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	0800b135 	.word	0x0800b135
 8001148:	20030734 	.word	0x20030734
 800114c:	08001161 	.word	0x08001161
 8001150:	08001179 	.word	0x08001179
 8001154:	2003094c 	.word	0x2003094c
 8001158:	20030840 	.word	0x20030840
 800115c:	200301f8 	.word	0x200301f8

08001160 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	4603      	mov	r3, r0
 8001168:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 800116a:	bf00      	nop
}
 800116c:	370c      	adds	r7, #12
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
	...

08001178 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b088      	sub	sp, #32
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	330b      	adds	r3, #11
 8001186:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 8001188:	69fb      	ldr	r3, [r7, #28]
 800118a:	881b      	ldrh	r3, [r3, #0]
 800118c:	b29b      	uxth	r3, r3
 800118e:	f5a3 4312 	sub.w	r3, r3, #37376	@ 0x9200
 8001192:	2b07      	cmp	r3, #7
 8001194:	d860      	bhi.n	8001258 <APPE_SysUserEvtRx+0xe0>
 8001196:	a201      	add	r2, pc, #4	@ (adr r2, 800119c <APPE_SysUserEvtRx+0x24>)
 8001198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800119c:	080011bd 	.word	0x080011bd
 80011a0:	080011ff 	.word	0x080011ff
 80011a4:	0800120d 	.word	0x0800120d
 80011a8:	08001259 	.word	0x08001259
 80011ac:	08001229 	.word	0x08001229
 80011b0:	08001239 	.word	0x08001239
 80011b4:	08001241 	.word	0x08001241
 80011b8:	08001251 	.word	0x08001251
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 80011bc:	f107 030c 	add.w	r3, r7, #12
 80011c0:	4618      	mov	r0, r3
 80011c2:	f009 fd51 	bl	800ac68 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
 80011c6:	7b3b      	ldrb	r3, [r7, #12]
 80011c8:	4619      	mov	r1, r3
 80011ca:	7b7b      	ldrb	r3, [r7, #13]
 80011cc:	461a      	mov	r2, r3
 80011ce:	7bbb      	ldrb	r3, [r7, #14]
 80011d0:	4824      	ldr	r0, [pc, #144]	@ (8001264 <APPE_SysUserEvtRx+0xec>)
 80011d2:	f00d f9db 	bl	800e58c <iprintf>
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
 80011d6:	7c3b      	ldrb	r3, [r7, #16]
 80011d8:	4619      	mov	r1, r3
 80011da:	4823      	ldr	r0, [pc, #140]	@ (8001268 <APPE_SysUserEvtRx+0xf0>)
 80011dc:	f00d f9d6 	bl	800e58c <iprintf>
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);
 80011e0:	7dbb      	ldrb	r3, [r7, #22]
 80011e2:	4619      	mov	r1, r3
 80011e4:	7dfb      	ldrb	r3, [r7, #23]
 80011e6:	461a      	mov	r2, r3
 80011e8:	7e3b      	ldrb	r3, [r7, #24]
 80011ea:	4820      	ldr	r0, [pc, #128]	@ (800126c <APPE_SysUserEvtRx+0xf4>)
 80011ec:	f00d f9ce 	bl	800e58c <iprintf>

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
 80011f0:	481f      	ldr	r0, [pc, #124]	@ (8001270 <APPE_SysUserEvtRx+0xf8>)
 80011f2:	f00d f9cb 	bl	800e58c <iprintf>
    APPE_SysEvtReadyProcessing(pPayload);
 80011f6:	6878      	ldr	r0, [r7, #4]
 80011f8:	f000 f870 	bl	80012dc <APPE_SysEvtReadyProcessing>
    break;
 80011fc:	e02d      	b.n	800125a <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
 80011fe:	481d      	ldr	r0, [pc, #116]	@ (8001274 <APPE_SysUserEvtRx+0xfc>)
 8001200:	f00d f9c4 	bl	800e58c <iprintf>
    APPE_SysEvtError(pPayload);
 8001204:	6878      	ldr	r0, [r7, #4]
 8001206:	f000 f843 	bl	8001290 <APPE_SysEvtError>
    break;
 800120a:	e026      	b.n	800125a <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE -- BLE NVM RAM HAS BEEN UPDATED BY CPU2 \n");
 800120c:	481a      	ldr	r0, [pc, #104]	@ (8001278 <APPE_SysUserEvtRx+0x100>)
 800120e:	f00d fa2d 	bl	800e66c <puts>
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->StartAddress,
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	3302      	adds	r3, #2
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
 8001216:	6819      	ldr	r1, [r3, #0]
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->Size);
 8001218:	69fb      	ldr	r3, [r7, #28]
 800121a:	3302      	adds	r3, #2
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	461a      	mov	r2, r3
 8001220:	4816      	ldr	r0, [pc, #88]	@ (800127c <APPE_SysUserEvtRx+0x104>)
 8001222:	f00d f9b3 	bl	800e58c <iprintf>
    break;
 8001226:	e018      	b.n	800125a <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_START_WRITE:
    APP_DBG_MSG("==>> SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
                ((SHCI_C2_NvmStartWrite_Evt_t*)p_sys_event->payload)->NumberOfWords);
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	3302      	adds	r3, #2
    APP_DBG_MSG("==>> SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4619      	mov	r1, r3
 8001230:	4813      	ldr	r0, [pc, #76]	@ (8001280 <APPE_SysUserEvtRx+0x108>)
 8001232:	f00d f9ab 	bl	800e58c <iprintf>
    break;
 8001236:	e010      	b.n	800125a <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_END_WRITE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_WRITE\n\r");
 8001238:	4812      	ldr	r0, [pc, #72]	@ (8001284 <APPE_SysUserEvtRx+0x10c>)
 800123a:	f00d f9a7 	bl	800e58c <iprintf>
    break;
 800123e:	e00c      	b.n	800125a <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_START_ERASE:
    APP_DBG_MSG("==>>SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
                ((SHCI_C2_NvmStartErase_Evt_t*)p_sys_event->payload)->NumberOfSectors);
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	3302      	adds	r3, #2
    APP_DBG_MSG("==>>SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4619      	mov	r1, r3
 8001248:	480f      	ldr	r0, [pc, #60]	@ (8001288 <APPE_SysUserEvtRx+0x110>)
 800124a:	f00d f99f 	bl	800e58c <iprintf>
    break;
 800124e:	e004      	b.n	800125a <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
 8001250:	480e      	ldr	r0, [pc, #56]	@ (800128c <APPE_SysUserEvtRx+0x114>)
 8001252:	f00d f99b 	bl	800e58c <iprintf>
    break;
 8001256:	e000      	b.n	800125a <APPE_SysUserEvtRx+0xe2>

  default:
    break;
 8001258:	bf00      	nop
  }

  return;
 800125a:	bf00      	nop
}
 800125c:	3720      	adds	r7, #32
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	0800f7dc 	.word	0x0800f7dc
 8001268:	0800f800 	.word	0x0800f800
 800126c:	0800f81c 	.word	0x0800f81c
 8001270:	0800f834 	.word	0x0800f834
 8001274:	0800f854 	.word	0x0800f854
 8001278:	0800f878 	.word	0x0800f878
 800127c:	0800f8c8 	.word	0x0800f8c8
 8001280:	0800f8f0 	.word	0x0800f8f0
 8001284:	0800f92c 	.word	0x0800f92c
 8001288:	0800f950 	.word	0x0800f950
 800128c:	0800f98c 	.word	0x0800f98c

08001290 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	330b      	adds	r3, #11
 800129e:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	3302      	adds	r3, #2
 80012a4:	60bb      	str	r3, [r7, #8]

  APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON %x \n\r",(*p_sys_error_code));
 80012a6:	68bb      	ldr	r3, [r7, #8]
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	4619      	mov	r1, r3
 80012ac:	4808      	ldr	r0, [pc, #32]	@ (80012d0 <APPE_SysEvtError+0x40>)
 80012ae:	f00d f96d 	bl	800e58c <iprintf>

  if ((*p_sys_error_code) == ERR_BLE_INIT)
 80012b2:	68bb      	ldr	r3, [r7, #8]
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d103      	bne.n	80012c2 <APPE_SysEvtError+0x32>
  {
    /* Error during BLE stack initialization */
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - ERR_BLE_INIT \n");
 80012ba:	4806      	ldr	r0, [pc, #24]	@ (80012d4 <APPE_SysEvtError+0x44>)
 80012bc:	f00d f9d6 	bl	800e66c <puts>
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 80012c0:	e003      	b.n	80012ca <APPE_SysEvtError+0x3a>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
 80012c2:	4805      	ldr	r0, [pc, #20]	@ (80012d8 <APPE_SysEvtError+0x48>)
 80012c4:	f00d f9d2 	bl	800e66c <puts>
  return;
 80012c8:	bf00      	nop
}
 80012ca:	3710      	adds	r7, #16
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	0800f9b0 	.word	0x0800f9b0
 80012d4:	0800f9e0 	.word	0x0800f9e0
 80012d8:	0800fa1c 	.word	0x0800fa1c

080012dc <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b08a      	sub	sp, #40	@ 0x28
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 80012e4:	f107 0308 	add.w	r3, r7, #8
 80012e8:	2200      	movs	r2, #0
 80012ea:	601a      	str	r2, [r3, #0]
 80012ec:	605a      	str	r2, [r3, #4]
 80012ee:	609a      	str	r2, [r3, #8]
 80012f0:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 80012f2:	2300      	movs	r3, #0
 80012f4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t DeviceID=0;
 80012f6:	2300      	movs	r3, #0
 80012f8:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	330b      	adds	r3, #11
 8001300:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	3302      	adds	r3, #2
 8001306:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 8001308:	69bb      	ldr	r3, [r7, #24]
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d128      	bne.n	8001362 <APPE_SysEvtReadyProcessing+0x86>
  {
    /**
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");
 8001310:	481d      	ldr	r0, [pc, #116]	@ (8001388 <APPE_SysEvtReadyProcessing+0xac>)
 8001312:	f00d f9ab 	bl	800e66c <puts>

    /* Traces channel initialization */
    APPD_EnableCPU2();
 8001316:	f7ff fd93 	bl	8000e40 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 800131a:	230f      	movs	r3, #15
 800131c:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 800131e:	237f      	movs	r3, #127	@ 0x7f
 8001320:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 8001322:	f7ff fe25 	bl	8000f70 <LL_DBGMCU_GetRevisionID>
 8001326:	6278      	str	r0, [r7, #36]	@ 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);
 8001328:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800132a:	4818      	ldr	r0, [pc, #96]	@ (800138c <APPE_SysEvtReadyProcessing+0xb0>)
 800132c:	f00d f92e 	bl	800e58c <iprintf>

    config_param.RevisionID = (uint16_t)RevisionID;
 8001330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001332:	b29b      	uxth	r3, r3
 8001334:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 8001336:	f7ff fe0d 	bl	8000f54 <LL_DBGMCU_GetDeviceID>
 800133a:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
 800133c:	6a39      	ldr	r1, [r7, #32]
 800133e:	4814      	ldr	r0, [pc, #80]	@ (8001390 <APPE_SysEvtReadyProcessing+0xb4>)
 8001340:	f00d f924 	bl	800e58c <iprintf>
    config_param.DeviceID = (uint16_t)DeviceID;
 8001344:	6a3b      	ldr	r3, [r7, #32]
 8001346:	b29b      	uxth	r3, r3
 8001348:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 800134a:	f107 0308 	add.w	r3, r7, #8
 800134e:	4618      	mov	r0, r3
 8001350:	f009 fc74 	bl	800ac3c <SHCI_C2_Config>

    APP_BLE_Init();
 8001354:	f00a ffc6 	bl	800c2e4 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8001358:	2100      	movs	r1, #0
 800135a:	2001      	movs	r0, #1
 800135c:	f00c fe0a 	bl	800df74 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 8001360:	e00e      	b.n	8001380 <APPE_SysEvtReadyProcessing+0xa4>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 8001362:	69bb      	ldr	r3, [r7, #24]
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	2b01      	cmp	r3, #1
 8001368:	d106      	bne.n	8001378 <APPE_SysEvtReadyProcessing+0x9c>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - FUS_FW_RUNNING \n\r");
 800136a:	480a      	ldr	r0, [pc, #40]	@ (8001394 <APPE_SysEvtReadyProcessing+0xb8>)
 800136c:	f00d f90e 	bl	800e58c <iprintf>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2200      	movs	r2, #0
 8001374:	701a      	strb	r2, [r3, #0]
  return;
 8001376:	e003      	b.n	8001380 <APPE_SysEvtReadyProcessing+0xa4>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
 8001378:	4807      	ldr	r0, [pc, #28]	@ (8001398 <APPE_SysEvtReadyProcessing+0xbc>)
 800137a:	f00d f907 	bl	800e58c <iprintf>
  return;
 800137e:	bf00      	nop
}
 8001380:	3728      	adds	r7, #40	@ 0x28
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	0800fa54 	.word	0x0800fa54
 800138c:	0800fa70 	.word	0x0800fa70
 8001390:	0800fa94 	.word	0x0800fa94
 8001394:	0800fab4 	.word	0x0800fab4
 8001398:	0800fae8 	.word	0x0800fae8

0800139c <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013a4:	f001 feea 	bl	800317c <HAL_GetTick>
 80013a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013b4:	d00a      	beq.n	80013cc <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 80013b6:	f001 fef9 	bl	80031ac <HAL_GetTickFreq>
 80013ba:	4603      	mov	r3, r0
 80013bc:	461a      	mov	r2, r3
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	4413      	add	r3, r2
 80013c2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013c4:	e002      	b.n	80013cc <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 80013c6:	f7ff fde1 	bl	8000f8c <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM) || defined (__ARMCC_VERSION)
    __force_stores();
  #endif /* __ARMCC_VERSION */

    __WFI();
 80013ca:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 80013cc:	f001 fed6 	bl	800317c <HAL_GetTick>
 80013d0:	4602      	mov	r2, r0
 80013d2:	68bb      	ldr	r3, [r7, #8]
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	68fa      	ldr	r2, [r7, #12]
 80013d8:	429a      	cmp	r2, r3
 80013da:	d8f4      	bhi.n	80013c6 <HAL_Delay+0x2a>
  }
}
 80013dc:	bf00      	nop
 80013de:	bf00      	nop
 80013e0:	3710      	adds	r7, #16
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}

080013e6 <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 80013e6:	b580      	push	{r7, lr}
 80013e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80013ea:	f04f 30ff 	mov.w	r0, #4294967295
 80013ee:	f00c fdf1 	bl	800dfd4 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 80013f2:	bf00      	nop
 80013f4:	bd80      	pop	{r7, pc}

080013f6 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 80013f6:	b480      	push	{r7}
 80013f8:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 80013fa:	bf00      	nop
}
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr

08001404 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
 800140c:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800140e:	f04f 30ff 	mov.w	r0, #4294967295
 8001412:	f00c fddf 	bl	800dfd4 <UTIL_SEQ_Run>
  return;
 8001416:	bf00      	nop
}
 8001418:	3708      	adds	r7, #8
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}

0800141e <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 800141e:	b580      	push	{r7, lr}
 8001420:	b082      	sub	sp, #8
 8001422:	af00      	add	r7, sp, #0
 8001424:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8001426:	2100      	movs	r1, #0
 8001428:	2040      	movs	r0, #64	@ 0x40
 800142a:	f00c fef1 	bl	800e210 <UTIL_SEQ_SetTask>
  return;
 800142e:	bf00      	nop
}
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}

08001436 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8001436:	b580      	push	{r7, lr}
 8001438:	b082      	sub	sp, #8
 800143a:	af00      	add	r7, sp, #0
 800143c:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 800143e:	2002      	movs	r0, #2
 8001440:	f00c ff52 	bl	800e2e8 <UTIL_SEQ_SetEvt>
  return;
 8001444:	bf00      	nop
}
 8001446:	3708      	adds	r7, #8
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}

0800144c <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8001454:	2002      	movs	r0, #2
 8001456:	f00c ff67 	bl	800e328 <UTIL_SEQ_WaitEvt>
  return;
 800145a:	bf00      	nop
}
 800145c:	3708      	adds	r7, #8
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}

08001462 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN FD_WRAP_FUNCTIONS */
void HAL_GPIO_EXTI_Callback( uint16_t GPIO_Pin )
{
 8001462:	b580      	push	{r7, lr}
 8001464:	b082      	sub	sp, #8
 8001466:	af00      	add	r7, sp, #0
 8001468:	4603      	mov	r3, r0
 800146a:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 800146c:	88fb      	ldrh	r3, [r7, #6]
 800146e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001472:	d00b      	beq.n	800148c <HAL_GPIO_EXTI_Callback+0x2a>
 8001474:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001478:	dc0e      	bgt.n	8001498 <HAL_GPIO_EXTI_Callback+0x36>
 800147a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800147e:	d008      	beq.n	8001492 <HAL_GPIO_EXTI_Callback+0x30>
 8001480:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001484:	d108      	bne.n	8001498 <HAL_GPIO_EXTI_Callback+0x36>
  {
  case GPIO_PIN_12:
    /* SW button 1 */
    APP_SWA_Button_Action();
 8001486:	f00c fa37 	bl	800d8f8 <APP_SWA_Button_Action>
    break; 
 800148a:	e006      	b.n	800149a <HAL_GPIO_EXTI_Callback+0x38>
    
  case GPIO_PIN_13:
    /* SW button 2 */
	APP_SWB_Button_Action();
 800148c:	f00c fa3c 	bl	800d908 <APP_SWB_Button_Action>
    break;
 8001490:	e003      	b.n	800149a <HAL_GPIO_EXTI_Callback+0x38>

  case ADS1299_nDRDY_Pin:
    APP_BLE_Manage_ADS1299_event();
 8001492:	f00c fa8b 	bl	800d9ac <APP_BLE_Manage_ADS1299_event>
    break; 
 8001496:	e000      	b.n	800149a <HAL_GPIO_EXTI_Callback+0x38>

  default:
    break;
 8001498:	bf00      	nop
  }
  return;
 800149a:	bf00      	nop
}
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
	...

080014a4 <LL_EXTI_EnableIT_0_31>:
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80014ac:	4b06      	ldr	r3, [pc, #24]	@ (80014c8 <LL_EXTI_EnableIT_0_31+0x24>)
 80014ae:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80014b2:	4905      	ldr	r1, [pc, #20]	@ (80014c8 <LL_EXTI_EnableIT_0_31+0x24>)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	4313      	orrs	r3, r2
 80014b8:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 80014bc:	bf00      	nop
 80014be:	370c      	adds	r7, #12
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr
 80014c8:	58000800 	.word	0x58000800

080014cc <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80014d4:	4b05      	ldr	r3, [pc, #20]	@ (80014ec <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	4904      	ldr	r1, [pc, #16]	@ (80014ec <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	4313      	orrs	r3, r2
 80014de:	600b      	str	r3, [r1, #0]

}
 80014e0:	bf00      	nop
 80014e2:	370c      	adds	r7, #12
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr
 80014ec:	58000800 	.word	0x58000800

080014f0 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80014f6:	4b0d      	ldr	r3, [pc, #52]	@ (800152c <ReadRtcSsrValue+0x3c>)
 80014f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014fa:	b29b      	uxth	r3, r3
 80014fc:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80014fe:	4b0b      	ldr	r3, [pc, #44]	@ (800152c <ReadRtcSsrValue+0x3c>)
 8001500:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001502:	b29b      	uxth	r3, r3
 8001504:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8001506:	e005      	b.n	8001514 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800150c:	4b07      	ldr	r3, [pc, #28]	@ (800152c <ReadRtcSsrValue+0x3c>)
 800150e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001510:	b29b      	uxth	r3, r3
 8001512:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8001514:	687a      	ldr	r2, [r7, #4]
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	429a      	cmp	r2, r3
 800151a:	d1f5      	bne.n	8001508 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 800151c:	683b      	ldr	r3, [r7, #0]
}
 800151e:	4618      	mov	r0, r3
 8001520:	370c      	adds	r7, #12
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	40002800 	.word	0x40002800

08001530 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8001530:	b480      	push	{r7}
 8001532:	b085      	sub	sp, #20
 8001534:	af00      	add	r7, sp, #0
 8001536:	4603      	mov	r3, r0
 8001538:	460a      	mov	r2, r1
 800153a:	71fb      	strb	r3, [r7, #7]
 800153c:	4613      	mov	r3, r2
 800153e:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8001540:	79ba      	ldrb	r2, [r7, #6]
 8001542:	491d      	ldr	r1, [pc, #116]	@ (80015b8 <LinkTimerAfter+0x88>)
 8001544:	4613      	mov	r3, r2
 8001546:	005b      	lsls	r3, r3, #1
 8001548:	4413      	add	r3, r2
 800154a:	00db      	lsls	r3, r3, #3
 800154c:	440b      	add	r3, r1
 800154e:	3315      	adds	r3, #21
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001554:	7bfb      	ldrb	r3, [r7, #15]
 8001556:	2b06      	cmp	r3, #6
 8001558:	d009      	beq.n	800156e <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 800155a:	7bfa      	ldrb	r2, [r7, #15]
 800155c:	4916      	ldr	r1, [pc, #88]	@ (80015b8 <LinkTimerAfter+0x88>)
 800155e:	4613      	mov	r3, r2
 8001560:	005b      	lsls	r3, r3, #1
 8001562:	4413      	add	r3, r2
 8001564:	00db      	lsls	r3, r3, #3
 8001566:	440b      	add	r3, r1
 8001568:	3314      	adds	r3, #20
 800156a:	79fa      	ldrb	r2, [r7, #7]
 800156c:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 800156e:	79fa      	ldrb	r2, [r7, #7]
 8001570:	4911      	ldr	r1, [pc, #68]	@ (80015b8 <LinkTimerAfter+0x88>)
 8001572:	4613      	mov	r3, r2
 8001574:	005b      	lsls	r3, r3, #1
 8001576:	4413      	add	r3, r2
 8001578:	00db      	lsls	r3, r3, #3
 800157a:	440b      	add	r3, r1
 800157c:	3315      	adds	r3, #21
 800157e:	7bfa      	ldrb	r2, [r7, #15]
 8001580:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8001582:	79fa      	ldrb	r2, [r7, #7]
 8001584:	490c      	ldr	r1, [pc, #48]	@ (80015b8 <LinkTimerAfter+0x88>)
 8001586:	4613      	mov	r3, r2
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	4413      	add	r3, r2
 800158c:	00db      	lsls	r3, r3, #3
 800158e:	440b      	add	r3, r1
 8001590:	3314      	adds	r3, #20
 8001592:	79ba      	ldrb	r2, [r7, #6]
 8001594:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8001596:	79ba      	ldrb	r2, [r7, #6]
 8001598:	4907      	ldr	r1, [pc, #28]	@ (80015b8 <LinkTimerAfter+0x88>)
 800159a:	4613      	mov	r3, r2
 800159c:	005b      	lsls	r3, r3, #1
 800159e:	4413      	add	r3, r2
 80015a0:	00db      	lsls	r3, r3, #3
 80015a2:	440b      	add	r3, r1
 80015a4:	3315      	adds	r3, #21
 80015a6:	79fa      	ldrb	r2, [r7, #7]
 80015a8:	701a      	strb	r2, [r3, #0]

  return;
 80015aa:	bf00      	nop
}
 80015ac:	3714      	adds	r7, #20
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	200000e8 	.word	0x200000e8

080015bc <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 80015bc:	b480      	push	{r7}
 80015be:	b085      	sub	sp, #20
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	4603      	mov	r3, r0
 80015c4:	460a      	mov	r2, r1
 80015c6:	71fb      	strb	r3, [r7, #7]
 80015c8:	4613      	mov	r3, r2
 80015ca:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 80015cc:	4b29      	ldr	r3, [pc, #164]	@ (8001674 <LinkTimerBefore+0xb8>)
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	79ba      	ldrb	r2, [r7, #6]
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d032      	beq.n	800163e <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 80015d8:	79ba      	ldrb	r2, [r7, #6]
 80015da:	4927      	ldr	r1, [pc, #156]	@ (8001678 <LinkTimerBefore+0xbc>)
 80015dc:	4613      	mov	r3, r2
 80015de:	005b      	lsls	r3, r3, #1
 80015e0:	4413      	add	r3, r2
 80015e2:	00db      	lsls	r3, r3, #3
 80015e4:	440b      	add	r3, r1
 80015e6:	3314      	adds	r3, #20
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 80015ec:	7bfa      	ldrb	r2, [r7, #15]
 80015ee:	4922      	ldr	r1, [pc, #136]	@ (8001678 <LinkTimerBefore+0xbc>)
 80015f0:	4613      	mov	r3, r2
 80015f2:	005b      	lsls	r3, r3, #1
 80015f4:	4413      	add	r3, r2
 80015f6:	00db      	lsls	r3, r3, #3
 80015f8:	440b      	add	r3, r1
 80015fa:	3315      	adds	r3, #21
 80015fc:	79fa      	ldrb	r2, [r7, #7]
 80015fe:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8001600:	79fa      	ldrb	r2, [r7, #7]
 8001602:	491d      	ldr	r1, [pc, #116]	@ (8001678 <LinkTimerBefore+0xbc>)
 8001604:	4613      	mov	r3, r2
 8001606:	005b      	lsls	r3, r3, #1
 8001608:	4413      	add	r3, r2
 800160a:	00db      	lsls	r3, r3, #3
 800160c:	440b      	add	r3, r1
 800160e:	3315      	adds	r3, #21
 8001610:	79ba      	ldrb	r2, [r7, #6]
 8001612:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8001614:	79fa      	ldrb	r2, [r7, #7]
 8001616:	4918      	ldr	r1, [pc, #96]	@ (8001678 <LinkTimerBefore+0xbc>)
 8001618:	4613      	mov	r3, r2
 800161a:	005b      	lsls	r3, r3, #1
 800161c:	4413      	add	r3, r2
 800161e:	00db      	lsls	r3, r3, #3
 8001620:	440b      	add	r3, r1
 8001622:	3314      	adds	r3, #20
 8001624:	7bfa      	ldrb	r2, [r7, #15]
 8001626:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001628:	79ba      	ldrb	r2, [r7, #6]
 800162a:	4913      	ldr	r1, [pc, #76]	@ (8001678 <LinkTimerBefore+0xbc>)
 800162c:	4613      	mov	r3, r2
 800162e:	005b      	lsls	r3, r3, #1
 8001630:	4413      	add	r3, r2
 8001632:	00db      	lsls	r3, r3, #3
 8001634:	440b      	add	r3, r1
 8001636:	3314      	adds	r3, #20
 8001638:	79fa      	ldrb	r2, [r7, #7]
 800163a:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 800163c:	e014      	b.n	8001668 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 800163e:	79fa      	ldrb	r2, [r7, #7]
 8001640:	490d      	ldr	r1, [pc, #52]	@ (8001678 <LinkTimerBefore+0xbc>)
 8001642:	4613      	mov	r3, r2
 8001644:	005b      	lsls	r3, r3, #1
 8001646:	4413      	add	r3, r2
 8001648:	00db      	lsls	r3, r3, #3
 800164a:	440b      	add	r3, r1
 800164c:	3315      	adds	r3, #21
 800164e:	79ba      	ldrb	r2, [r7, #6]
 8001650:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001652:	79ba      	ldrb	r2, [r7, #6]
 8001654:	4908      	ldr	r1, [pc, #32]	@ (8001678 <LinkTimerBefore+0xbc>)
 8001656:	4613      	mov	r3, r2
 8001658:	005b      	lsls	r3, r3, #1
 800165a:	4413      	add	r3, r2
 800165c:	00db      	lsls	r3, r3, #3
 800165e:	440b      	add	r3, r1
 8001660:	3314      	adds	r3, #20
 8001662:	79fa      	ldrb	r2, [r7, #7]
 8001664:	701a      	strb	r2, [r3, #0]
  return;
 8001666:	bf00      	nop
}
 8001668:	3714      	adds	r7, #20
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	20000178 	.word	0x20000178
 8001678:	200000e8 	.word	0x200000e8

0800167c <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af00      	add	r7, sp, #0
 8001682:	4603      	mov	r3, r0
 8001684:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001686:	4b4e      	ldr	r3, [pc, #312]	@ (80017c0 <linkTimer+0x144>)
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	b2db      	uxtb	r3, r3
 800168c:	2b06      	cmp	r3, #6
 800168e:	d118      	bne.n	80016c2 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001690:	4b4b      	ldr	r3, [pc, #300]	@ (80017c0 <linkTimer+0x144>)
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	b2da      	uxtb	r2, r3
 8001696:	4b4b      	ldr	r3, [pc, #300]	@ (80017c4 <linkTimer+0x148>)
 8001698:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 800169a:	4a49      	ldr	r2, [pc, #292]	@ (80017c0 <linkTimer+0x144>)
 800169c:	79fb      	ldrb	r3, [r7, #7]
 800169e:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 80016a0:	79fa      	ldrb	r2, [r7, #7]
 80016a2:	4949      	ldr	r1, [pc, #292]	@ (80017c8 <linkTimer+0x14c>)
 80016a4:	4613      	mov	r3, r2
 80016a6:	005b      	lsls	r3, r3, #1
 80016a8:	4413      	add	r3, r2
 80016aa:	00db      	lsls	r3, r3, #3
 80016ac:	440b      	add	r3, r1
 80016ae:	3315      	adds	r3, #21
 80016b0:	2206      	movs	r2, #6
 80016b2:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80016b4:	4b45      	ldr	r3, [pc, #276]	@ (80017cc <linkTimer+0x150>)
 80016b6:	f04f 32ff 	mov.w	r2, #4294967295
 80016ba:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 80016bc:	2300      	movs	r3, #0
 80016be:	81fb      	strh	r3, [r7, #14]
 80016c0:	e078      	b.n	80017b4 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 80016c2:	f000 f909 	bl	80018d8 <ReturnTimeElapsed>
 80016c6:	4603      	mov	r3, r0
 80016c8:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 80016ca:	79fa      	ldrb	r2, [r7, #7]
 80016cc:	493e      	ldr	r1, [pc, #248]	@ (80017c8 <linkTimer+0x14c>)
 80016ce:	4613      	mov	r3, r2
 80016d0:	005b      	lsls	r3, r3, #1
 80016d2:	4413      	add	r3, r2
 80016d4:	00db      	lsls	r3, r3, #3
 80016d6:	440b      	add	r3, r1
 80016d8:	3308      	adds	r3, #8
 80016da:	6819      	ldr	r1, [r3, #0]
 80016dc:	89fb      	ldrh	r3, [r7, #14]
 80016de:	79fa      	ldrb	r2, [r7, #7]
 80016e0:	4419      	add	r1, r3
 80016e2:	4839      	ldr	r0, [pc, #228]	@ (80017c8 <linkTimer+0x14c>)
 80016e4:	4613      	mov	r3, r2
 80016e6:	005b      	lsls	r3, r3, #1
 80016e8:	4413      	add	r3, r2
 80016ea:	00db      	lsls	r3, r3, #3
 80016ec:	4403      	add	r3, r0
 80016ee:	3308      	adds	r3, #8
 80016f0:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 80016f2:	79fa      	ldrb	r2, [r7, #7]
 80016f4:	4934      	ldr	r1, [pc, #208]	@ (80017c8 <linkTimer+0x14c>)
 80016f6:	4613      	mov	r3, r2
 80016f8:	005b      	lsls	r3, r3, #1
 80016fa:	4413      	add	r3, r2
 80016fc:	00db      	lsls	r3, r3, #3
 80016fe:	440b      	add	r3, r1
 8001700:	3308      	adds	r3, #8
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8001706:	4b2e      	ldr	r3, [pc, #184]	@ (80017c0 <linkTimer+0x144>)
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	b2db      	uxtb	r3, r3
 800170c:	4619      	mov	r1, r3
 800170e:	4a2e      	ldr	r2, [pc, #184]	@ (80017c8 <linkTimer+0x14c>)
 8001710:	460b      	mov	r3, r1
 8001712:	005b      	lsls	r3, r3, #1
 8001714:	440b      	add	r3, r1
 8001716:	00db      	lsls	r3, r3, #3
 8001718:	4413      	add	r3, r2
 800171a:	3308      	adds	r3, #8
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	68ba      	ldr	r2, [r7, #8]
 8001720:	429a      	cmp	r2, r3
 8001722:	d337      	bcc.n	8001794 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8001724:	4b26      	ldr	r3, [pc, #152]	@ (80017c0 <linkTimer+0x144>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 800172a:	7b7a      	ldrb	r2, [r7, #13]
 800172c:	4926      	ldr	r1, [pc, #152]	@ (80017c8 <linkTimer+0x14c>)
 800172e:	4613      	mov	r3, r2
 8001730:	005b      	lsls	r3, r3, #1
 8001732:	4413      	add	r3, r2
 8001734:	00db      	lsls	r3, r3, #3
 8001736:	440b      	add	r3, r1
 8001738:	3315      	adds	r3, #21
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 800173e:	e013      	b.n	8001768 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8001740:	7b7a      	ldrb	r2, [r7, #13]
 8001742:	4921      	ldr	r1, [pc, #132]	@ (80017c8 <linkTimer+0x14c>)
 8001744:	4613      	mov	r3, r2
 8001746:	005b      	lsls	r3, r3, #1
 8001748:	4413      	add	r3, r2
 800174a:	00db      	lsls	r3, r3, #3
 800174c:	440b      	add	r3, r1
 800174e:	3315      	adds	r3, #21
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8001754:	7b7a      	ldrb	r2, [r7, #13]
 8001756:	491c      	ldr	r1, [pc, #112]	@ (80017c8 <linkTimer+0x14c>)
 8001758:	4613      	mov	r3, r2
 800175a:	005b      	lsls	r3, r3, #1
 800175c:	4413      	add	r3, r2
 800175e:	00db      	lsls	r3, r3, #3
 8001760:	440b      	add	r3, r1
 8001762:	3315      	adds	r3, #21
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001768:	7b3b      	ldrb	r3, [r7, #12]
 800176a:	2b06      	cmp	r3, #6
 800176c:	d00b      	beq.n	8001786 <linkTimer+0x10a>
 800176e:	7b3a      	ldrb	r2, [r7, #12]
 8001770:	4915      	ldr	r1, [pc, #84]	@ (80017c8 <linkTimer+0x14c>)
 8001772:	4613      	mov	r3, r2
 8001774:	005b      	lsls	r3, r3, #1
 8001776:	4413      	add	r3, r2
 8001778:	00db      	lsls	r3, r3, #3
 800177a:	440b      	add	r3, r1
 800177c:	3308      	adds	r3, #8
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	68ba      	ldr	r2, [r7, #8]
 8001782:	429a      	cmp	r2, r3
 8001784:	d2dc      	bcs.n	8001740 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8001786:	7b7a      	ldrb	r2, [r7, #13]
 8001788:	79fb      	ldrb	r3, [r7, #7]
 800178a:	4611      	mov	r1, r2
 800178c:	4618      	mov	r0, r3
 800178e:	f7ff fecf 	bl	8001530 <LinkTimerAfter>
 8001792:	e00f      	b.n	80017b4 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8001794:	4b0a      	ldr	r3, [pc, #40]	@ (80017c0 <linkTimer+0x144>)
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	b2da      	uxtb	r2, r3
 800179a:	79fb      	ldrb	r3, [r7, #7]
 800179c:	4611      	mov	r1, r2
 800179e:	4618      	mov	r0, r3
 80017a0:	f7ff ff0c 	bl	80015bc <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 80017a4:	4b06      	ldr	r3, [pc, #24]	@ (80017c0 <linkTimer+0x144>)
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	b2da      	uxtb	r2, r3
 80017aa:	4b06      	ldr	r3, [pc, #24]	@ (80017c4 <linkTimer+0x148>)
 80017ac:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 80017ae:	4a04      	ldr	r2, [pc, #16]	@ (80017c0 <linkTimer+0x144>)
 80017b0:	79fb      	ldrb	r3, [r7, #7]
 80017b2:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 80017b4:	89fb      	ldrh	r3, [r7, #14]
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3710      	adds	r7, #16
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	20000178 	.word	0x20000178
 80017c4:	20000179 	.word	0x20000179
 80017c8:	200000e8 	.word	0x200000e8
 80017cc:	2000017c 	.word	0x2000017c

080017d0 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b085      	sub	sp, #20
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	4603      	mov	r3, r0
 80017d8:	460a      	mov	r2, r1
 80017da:	71fb      	strb	r3, [r7, #7]
 80017dc:	4613      	mov	r3, r2
 80017de:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 80017e0:	4b39      	ldr	r3, [pc, #228]	@ (80018c8 <UnlinkTimer+0xf8>)
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	79fa      	ldrb	r2, [r7, #7]
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d111      	bne.n	8001810 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 80017ec:	4b36      	ldr	r3, [pc, #216]	@ (80018c8 <UnlinkTimer+0xf8>)
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	b2da      	uxtb	r2, r3
 80017f2:	4b36      	ldr	r3, [pc, #216]	@ (80018cc <UnlinkTimer+0xfc>)
 80017f4:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 80017f6:	79fa      	ldrb	r2, [r7, #7]
 80017f8:	4935      	ldr	r1, [pc, #212]	@ (80018d0 <UnlinkTimer+0x100>)
 80017fa:	4613      	mov	r3, r2
 80017fc:	005b      	lsls	r3, r3, #1
 80017fe:	4413      	add	r3, r2
 8001800:	00db      	lsls	r3, r3, #3
 8001802:	440b      	add	r3, r1
 8001804:	3315      	adds	r3, #21
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	b2da      	uxtb	r2, r3
 800180a:	4b2f      	ldr	r3, [pc, #188]	@ (80018c8 <UnlinkTimer+0xf8>)
 800180c:	701a      	strb	r2, [r3, #0]
 800180e:	e03e      	b.n	800188e <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8001810:	79fa      	ldrb	r2, [r7, #7]
 8001812:	492f      	ldr	r1, [pc, #188]	@ (80018d0 <UnlinkTimer+0x100>)
 8001814:	4613      	mov	r3, r2
 8001816:	005b      	lsls	r3, r3, #1
 8001818:	4413      	add	r3, r2
 800181a:	00db      	lsls	r3, r3, #3
 800181c:	440b      	add	r3, r1
 800181e:	3314      	adds	r3, #20
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8001824:	79fa      	ldrb	r2, [r7, #7]
 8001826:	492a      	ldr	r1, [pc, #168]	@ (80018d0 <UnlinkTimer+0x100>)
 8001828:	4613      	mov	r3, r2
 800182a:	005b      	lsls	r3, r3, #1
 800182c:	4413      	add	r3, r2
 800182e:	00db      	lsls	r3, r3, #3
 8001830:	440b      	add	r3, r1
 8001832:	3315      	adds	r3, #21
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8001838:	79f9      	ldrb	r1, [r7, #7]
 800183a:	7bfa      	ldrb	r2, [r7, #15]
 800183c:	4824      	ldr	r0, [pc, #144]	@ (80018d0 <UnlinkTimer+0x100>)
 800183e:	460b      	mov	r3, r1
 8001840:	005b      	lsls	r3, r3, #1
 8001842:	440b      	add	r3, r1
 8001844:	00db      	lsls	r3, r3, #3
 8001846:	4403      	add	r3, r0
 8001848:	3315      	adds	r3, #21
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	b2d8      	uxtb	r0, r3
 800184e:	4920      	ldr	r1, [pc, #128]	@ (80018d0 <UnlinkTimer+0x100>)
 8001850:	4613      	mov	r3, r2
 8001852:	005b      	lsls	r3, r3, #1
 8001854:	4413      	add	r3, r2
 8001856:	00db      	lsls	r3, r3, #3
 8001858:	440b      	add	r3, r1
 800185a:	3315      	adds	r3, #21
 800185c:	4602      	mov	r2, r0
 800185e:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001860:	7bbb      	ldrb	r3, [r7, #14]
 8001862:	2b06      	cmp	r3, #6
 8001864:	d013      	beq.n	800188e <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8001866:	79f9      	ldrb	r1, [r7, #7]
 8001868:	7bba      	ldrb	r2, [r7, #14]
 800186a:	4819      	ldr	r0, [pc, #100]	@ (80018d0 <UnlinkTimer+0x100>)
 800186c:	460b      	mov	r3, r1
 800186e:	005b      	lsls	r3, r3, #1
 8001870:	440b      	add	r3, r1
 8001872:	00db      	lsls	r3, r3, #3
 8001874:	4403      	add	r3, r0
 8001876:	3314      	adds	r3, #20
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	b2d8      	uxtb	r0, r3
 800187c:	4914      	ldr	r1, [pc, #80]	@ (80018d0 <UnlinkTimer+0x100>)
 800187e:	4613      	mov	r3, r2
 8001880:	005b      	lsls	r3, r3, #1
 8001882:	4413      	add	r3, r2
 8001884:	00db      	lsls	r3, r3, #3
 8001886:	440b      	add	r3, r1
 8001888:	3314      	adds	r3, #20
 800188a:	4602      	mov	r2, r0
 800188c:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 800188e:	79fa      	ldrb	r2, [r7, #7]
 8001890:	490f      	ldr	r1, [pc, #60]	@ (80018d0 <UnlinkTimer+0x100>)
 8001892:	4613      	mov	r3, r2
 8001894:	005b      	lsls	r3, r3, #1
 8001896:	4413      	add	r3, r2
 8001898:	00db      	lsls	r3, r3, #3
 800189a:	440b      	add	r3, r1
 800189c:	330c      	adds	r3, #12
 800189e:	2201      	movs	r2, #1
 80018a0:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 80018a2:	4b09      	ldr	r3, [pc, #36]	@ (80018c8 <UnlinkTimer+0xf8>)
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	2b06      	cmp	r3, #6
 80018aa:	d107      	bne.n	80018bc <UnlinkTimer+0xec>
 80018ac:	79bb      	ldrb	r3, [r7, #6]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d104      	bne.n	80018bc <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80018b2:	4b08      	ldr	r3, [pc, #32]	@ (80018d4 <UnlinkTimer+0x104>)
 80018b4:	f04f 32ff 	mov.w	r2, #4294967295
 80018b8:	601a      	str	r2, [r3, #0]
  }

  return;
 80018ba:	bf00      	nop
 80018bc:	bf00      	nop
}
 80018be:	3714      	adds	r7, #20
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr
 80018c8:	20000178 	.word	0x20000178
 80018cc:	20000179 	.word	0x20000179
 80018d0:	200000e8 	.word	0x200000e8
 80018d4:	2000017c 	.word	0x2000017c

080018d8 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 80018de:	4b1a      	ldr	r3, [pc, #104]	@ (8001948 <ReturnTimeElapsed+0x70>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018e6:	d026      	beq.n	8001936 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 80018e8:	f7ff fe02 	bl	80014f0 <ReadRtcSsrValue>
 80018ec:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 80018ee:	4b16      	ldr	r3, [pc, #88]	@ (8001948 <ReturnTimeElapsed+0x70>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	687a      	ldr	r2, [r7, #4]
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d805      	bhi.n	8001904 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 80018f8:	4b13      	ldr	r3, [pc, #76]	@ (8001948 <ReturnTimeElapsed+0x70>)
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	1ad3      	subs	r3, r2, r3
 8001900:	607b      	str	r3, [r7, #4]
 8001902:	e00a      	b.n	800191a <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8001904:	4b11      	ldr	r3, [pc, #68]	@ (800194c <ReturnTimeElapsed+0x74>)
 8001906:	881b      	ldrh	r3, [r3, #0]
 8001908:	461a      	mov	r2, r3
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8001910:	4b0d      	ldr	r3, [pc, #52]	@ (8001948 <ReturnTimeElapsed+0x70>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	683a      	ldr	r2, [r7, #0]
 8001916:	4413      	add	r3, r2
 8001918:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 800191a:	4b0d      	ldr	r3, [pc, #52]	@ (8001950 <ReturnTimeElapsed+0x78>)
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	461a      	mov	r2, r3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	fb02 f303 	mul.w	r3, r2, r3
 8001926:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8001928:	4b0a      	ldr	r3, [pc, #40]	@ (8001954 <ReturnTimeElapsed+0x7c>)
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	461a      	mov	r2, r3
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	40d3      	lsrs	r3, r2
 8001932:	607b      	str	r3, [r7, #4]
 8001934:	e001      	b.n	800193a <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8001936:	2300      	movs	r3, #0
 8001938:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	b29b      	uxth	r3, r3
}
 800193e:	4618      	mov	r0, r3
 8001940:	3708      	adds	r7, #8
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	2000017c 	.word	0x2000017c
 800194c:	20000184 	.word	0x20000184
 8001950:	20000182 	.word	0x20000182
 8001954:	20000181 	.word	0x20000181

08001958 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	4603      	mov	r3, r0
 8001960:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 8001962:	88fb      	ldrh	r3, [r7, #6]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d108      	bne.n	800197a <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001968:	f7ff fdc2 	bl	80014f0 <ReadRtcSsrValue>
 800196c:	4603      	mov	r3, r0
 800196e:	4a21      	ldr	r2, [pc, #132]	@ (80019f4 <RestartWakeupCounter+0x9c>)
 8001970:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001972:	2003      	movs	r0, #3
 8001974:	f001 fda3 	bl	80034be <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8001978:	e039      	b.n	80019ee <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 800197a:	88fb      	ldrh	r3, [r7, #6]
 800197c:	2b01      	cmp	r3, #1
 800197e:	d803      	bhi.n	8001988 <RestartWakeupCounter+0x30>
 8001980:	4b1d      	ldr	r3, [pc, #116]	@ (80019f8 <RestartWakeupCounter+0xa0>)
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	2b01      	cmp	r3, #1
 8001986:	d002      	beq.n	800198e <RestartWakeupCounter+0x36>
      Value -= 1;
 8001988:	88fb      	ldrh	r3, [r7, #6]
 800198a:	3b01      	subs	r3, #1
 800198c:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 800198e:	bf00      	nop
 8001990:	4b1a      	ldr	r3, [pc, #104]	@ (80019fc <RestartWakeupCounter+0xa4>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	68db      	ldr	r3, [r3, #12]
 8001996:	f003 0304 	and.w	r3, r3, #4
 800199a:	2b00      	cmp	r3, #0
 800199c:	d0f8      	beq.n	8001990 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800199e:	4b17      	ldr	r3, [pc, #92]	@ (80019fc <RestartWakeupCounter+0xa4>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	b2da      	uxtb	r2, r3
 80019a6:	4b15      	ldr	r3, [pc, #84]	@ (80019fc <RestartWakeupCounter+0xa4>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 80019ae:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80019b0:	4b13      	ldr	r3, [pc, #76]	@ (8001a00 <RestartWakeupCounter+0xa8>)
 80019b2:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80019b6:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80019b8:	2003      	movs	r0, #3
 80019ba:	f001 fd8e 	bl	80034da <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 80019be:	4b11      	ldr	r3, [pc, #68]	@ (8001a04 <RestartWakeupCounter+0xac>)
 80019c0:	695b      	ldr	r3, [r3, #20]
 80019c2:	0c1b      	lsrs	r3, r3, #16
 80019c4:	041b      	lsls	r3, r3, #16
 80019c6:	88fa      	ldrh	r2, [r7, #6]
 80019c8:	490e      	ldr	r1, [pc, #56]	@ (8001a04 <RestartWakeupCounter+0xac>)
 80019ca:	4313      	orrs	r3, r2
 80019cc:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 80019ce:	f7ff fd8f 	bl	80014f0 <ReadRtcSsrValue>
 80019d2:	4603      	mov	r3, r0
 80019d4:	4a07      	ldr	r2, [pc, #28]	@ (80019f4 <RestartWakeupCounter+0x9c>)
 80019d6:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 80019d8:	4b08      	ldr	r3, [pc, #32]	@ (80019fc <RestartWakeupCounter+0xa4>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	689a      	ldr	r2, [r3, #8]
 80019de:	4b07      	ldr	r3, [pc, #28]	@ (80019fc <RestartWakeupCounter+0xa4>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80019e6:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 80019e8:	f3af 8000 	nop.w
  return ;
 80019ec:	bf00      	nop
}
 80019ee:	3708      	adds	r7, #8
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	2000017c 	.word	0x2000017c
 80019f8:	20000181 	.word	0x20000181
 80019fc:	200001d4 	.word	0x200001d4
 8001a00:	58000800 	.word	0x58000800
 8001a04:	40002800 	.word	0x40002800

08001a08 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b084      	sub	sp, #16
 8001a0c:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001a0e:	4b45      	ldr	r3, [pc, #276]	@ (8001b24 <RescheduleTimerList+0x11c>)
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a1a:	d107      	bne.n	8001a2c <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8001a1c:	bf00      	nop
 8001a1e:	4b42      	ldr	r3, [pc, #264]	@ (8001b28 <RescheduleTimerList+0x120>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	f003 0304 	and.w	r3, r3, #4
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d1f8      	bne.n	8001a1e <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8001a2c:	4b3e      	ldr	r3, [pc, #248]	@ (8001b28 <RescheduleTimerList+0x120>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	689a      	ldr	r2, [r3, #8]
 8001a32:	4b3d      	ldr	r3, [pc, #244]	@ (8001b28 <RescheduleTimerList+0x120>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001a3a:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8001a3c:	4b3b      	ldr	r3, [pc, #236]	@ (8001b2c <RescheduleTimerList+0x124>)
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8001a42:	7bfa      	ldrb	r2, [r7, #15]
 8001a44:	493a      	ldr	r1, [pc, #232]	@ (8001b30 <RescheduleTimerList+0x128>)
 8001a46:	4613      	mov	r3, r2
 8001a48:	005b      	lsls	r3, r3, #1
 8001a4a:	4413      	add	r3, r2
 8001a4c:	00db      	lsls	r3, r3, #3
 8001a4e:	440b      	add	r3, r1
 8001a50:	3308      	adds	r3, #8
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8001a56:	f7ff ff3f 	bl	80018d8 <ReturnTimeElapsed>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8001a5e:	88fb      	ldrh	r3, [r7, #6]
 8001a60:	68ba      	ldr	r2, [r7, #8]
 8001a62:	429a      	cmp	r2, r3
 8001a64:	d205      	bcs.n	8001a72 <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8001a66:	2300      	movs	r3, #0
 8001a68:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001a6a:	4b32      	ldr	r3, [pc, #200]	@ (8001b34 <RescheduleTimerList+0x12c>)
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	701a      	strb	r2, [r3, #0]
 8001a70:	e04d      	b.n	8001b0e <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8001a72:	88fb      	ldrh	r3, [r7, #6]
 8001a74:	4a30      	ldr	r2, [pc, #192]	@ (8001b38 <RescheduleTimerList+0x130>)
 8001a76:	8812      	ldrh	r2, [r2, #0]
 8001a78:	b292      	uxth	r2, r2
 8001a7a:	4413      	add	r3, r2
 8001a7c:	461a      	mov	r2, r3
 8001a7e:	68bb      	ldr	r3, [r7, #8]
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d906      	bls.n	8001a92 <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8001a84:	4b2c      	ldr	r3, [pc, #176]	@ (8001b38 <RescheduleTimerList+0x130>)
 8001a86:	881b      	ldrh	r3, [r3, #0]
 8001a88:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8001a8a:	4b2a      	ldr	r3, [pc, #168]	@ (8001b34 <RescheduleTimerList+0x12c>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	701a      	strb	r2, [r3, #0]
 8001a90:	e03d      	b.n	8001b0e <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	b29a      	uxth	r2, r3
 8001a96:	88fb      	ldrh	r3, [r7, #6]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001a9c:	4b25      	ldr	r3, [pc, #148]	@ (8001b34 <RescheduleTimerList+0x12c>)
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001aa2:	e034      	b.n	8001b0e <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8001aa4:	7bfa      	ldrb	r2, [r7, #15]
 8001aa6:	4922      	ldr	r1, [pc, #136]	@ (8001b30 <RescheduleTimerList+0x128>)
 8001aa8:	4613      	mov	r3, r2
 8001aaa:	005b      	lsls	r3, r3, #1
 8001aac:	4413      	add	r3, r2
 8001aae:	00db      	lsls	r3, r3, #3
 8001ab0:	440b      	add	r3, r1
 8001ab2:	3308      	adds	r3, #8
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	88fb      	ldrh	r3, [r7, #6]
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d20a      	bcs.n	8001ad2 <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8001abc:	7bfa      	ldrb	r2, [r7, #15]
 8001abe:	491c      	ldr	r1, [pc, #112]	@ (8001b30 <RescheduleTimerList+0x128>)
 8001ac0:	4613      	mov	r3, r2
 8001ac2:	005b      	lsls	r3, r3, #1
 8001ac4:	4413      	add	r3, r2
 8001ac6:	00db      	lsls	r3, r3, #3
 8001ac8:	440b      	add	r3, r1
 8001aca:	3308      	adds	r3, #8
 8001acc:	2200      	movs	r2, #0
 8001ace:	601a      	str	r2, [r3, #0]
 8001ad0:	e013      	b.n	8001afa <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8001ad2:	7bfa      	ldrb	r2, [r7, #15]
 8001ad4:	4916      	ldr	r1, [pc, #88]	@ (8001b30 <RescheduleTimerList+0x128>)
 8001ad6:	4613      	mov	r3, r2
 8001ad8:	005b      	lsls	r3, r3, #1
 8001ada:	4413      	add	r3, r2
 8001adc:	00db      	lsls	r3, r3, #3
 8001ade:	440b      	add	r3, r1
 8001ae0:	3308      	adds	r3, #8
 8001ae2:	6819      	ldr	r1, [r3, #0]
 8001ae4:	88fb      	ldrh	r3, [r7, #6]
 8001ae6:	7bfa      	ldrb	r2, [r7, #15]
 8001ae8:	1ac9      	subs	r1, r1, r3
 8001aea:	4811      	ldr	r0, [pc, #68]	@ (8001b30 <RescheduleTimerList+0x128>)
 8001aec:	4613      	mov	r3, r2
 8001aee:	005b      	lsls	r3, r3, #1
 8001af0:	4413      	add	r3, r2
 8001af2:	00db      	lsls	r3, r3, #3
 8001af4:	4403      	add	r3, r0
 8001af6:	3308      	adds	r3, #8
 8001af8:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8001afa:	7bfa      	ldrb	r2, [r7, #15]
 8001afc:	490c      	ldr	r1, [pc, #48]	@ (8001b30 <RescheduleTimerList+0x128>)
 8001afe:	4613      	mov	r3, r2
 8001b00:	005b      	lsls	r3, r3, #1
 8001b02:	4413      	add	r3, r2
 8001b04:	00db      	lsls	r3, r3, #3
 8001b06:	440b      	add	r3, r1
 8001b08:	3315      	adds	r3, #21
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001b0e:	7bfb      	ldrb	r3, [r7, #15]
 8001b10:	2b06      	cmp	r3, #6
 8001b12:	d1c7      	bne.n	8001aa4 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8001b14:	89bb      	ldrh	r3, [r7, #12]
 8001b16:	4618      	mov	r0, r3
 8001b18:	f7ff ff1e 	bl	8001958 <RestartWakeupCounter>

  return ;
 8001b1c:	bf00      	nop
}
 8001b1e:	3710      	adds	r7, #16
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	40002800 	.word	0x40002800
 8001b28:	200001d4 	.word	0x200001d4
 8001b2c:	20000178 	.word	0x20000178
 8001b30:	200000e8 	.word	0x200000e8
 8001b34:	20000180 	.word	0x20000180
 8001b38:	20000186 	.word	0x20000186

08001b3c <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b08a      	sub	sp, #40	@ 0x28
 8001b40:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001b42:	f3ef 8310 	mrs	r3, PRIMASK
 8001b46:	617b      	str	r3, [r7, #20]
  return(result);
 8001b48:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001b4a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8001b4c:	b672      	cpsid	i
}
 8001b4e:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001b50:	4b59      	ldr	r3, [pc, #356]	@ (8001cb8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	22ca      	movs	r2, #202	@ 0xca
 8001b56:	625a      	str	r2, [r3, #36]	@ 0x24
 8001b58:	4b57      	ldr	r3, [pc, #348]	@ (8001cb8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	2253      	movs	r2, #83	@ 0x53
 8001b5e:	625a      	str	r2, [r3, #36]	@ 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8001b60:	4b55      	ldr	r3, [pc, #340]	@ (8001cb8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	689a      	ldr	r2, [r3, #8]
 8001b66:	4b54      	ldr	r3, [pc, #336]	@ (8001cb8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001b6e:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8001b70:	4b52      	ldr	r3, [pc, #328]	@ (8001cbc <HW_TS_RTC_Wakeup_Handler+0x180>)
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8001b78:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001b7c:	4950      	ldr	r1, [pc, #320]	@ (8001cc0 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001b7e:	4613      	mov	r3, r2
 8001b80:	005b      	lsls	r3, r3, #1
 8001b82:	4413      	add	r3, r2
 8001b84:	00db      	lsls	r3, r3, #3
 8001b86:	440b      	add	r3, r1
 8001b88:	330c      	adds	r3, #12
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d16e      	bne.n	8001c70 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8001b92:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001b96:	494a      	ldr	r1, [pc, #296]	@ (8001cc0 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001b98:	4613      	mov	r3, r2
 8001b9a:	005b      	lsls	r3, r3, #1
 8001b9c:	4413      	add	r3, r2
 8001b9e:	00db      	lsls	r3, r3, #3
 8001ba0:	440b      	add	r3, r1
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8001ba6:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001baa:	4945      	ldr	r1, [pc, #276]	@ (8001cc0 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001bac:	4613      	mov	r3, r2
 8001bae:	005b      	lsls	r3, r3, #1
 8001bb0:	4413      	add	r3, r2
 8001bb2:	00db      	lsls	r3, r3, #3
 8001bb4:	440b      	add	r3, r1
 8001bb6:	3310      	adds	r3, #16
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8001bbc:	4b41      	ldr	r3, [pc, #260]	@ (8001cc4 <HW_TS_RTC_Wakeup_Handler+0x188>)
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d04c      	beq.n	8001c60 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8001bc6:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001bca:	493d      	ldr	r1, [pc, #244]	@ (8001cc0 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001bcc:	4613      	mov	r3, r2
 8001bce:	005b      	lsls	r3, r3, #1
 8001bd0:	4413      	add	r3, r2
 8001bd2:	00db      	lsls	r3, r3, #3
 8001bd4:	440b      	add	r3, r1
 8001bd6:	330d      	adds	r3, #13
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	d124      	bne.n	8001c2a <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8001be0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001be4:	2101      	movs	r1, #1
 8001be6:	4618      	mov	r0, r3
 8001be8:	f7ff fdf2 	bl	80017d0 <UnlinkTimer>
 8001bec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bee:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	f383 8810 	msr	PRIMASK, r3
}
 8001bf6:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8001bf8:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001bfc:	4930      	ldr	r1, [pc, #192]	@ (8001cc0 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001bfe:	4613      	mov	r3, r2
 8001c00:	005b      	lsls	r3, r3, #1
 8001c02:	4413      	add	r3, r2
 8001c04:	00db      	lsls	r3, r3, #3
 8001c06:	440b      	add	r3, r1
 8001c08:	3304      	adds	r3, #4
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001c10:	4611      	mov	r1, r2
 8001c12:	4618      	mov	r0, r3
 8001c14:	f000 fa32 	bl	800207c <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001c18:	4b27      	ldr	r3, [pc, #156]	@ (8001cb8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	22ca      	movs	r2, #202	@ 0xca
 8001c1e:	625a      	str	r2, [r3, #36]	@ 0x24
 8001c20:	4b25      	ldr	r3, [pc, #148]	@ (8001cb8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	2253      	movs	r2, #83	@ 0x53
 8001c26:	625a      	str	r2, [r3, #36]	@ 0x24
 8001c28:	e012      	b.n	8001c50 <HW_TS_RTC_Wakeup_Handler+0x114>
 8001c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c2c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	f383 8810 	msr	PRIMASK, r3
}
 8001c34:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8001c36:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f000 f99a 	bl	8001f74 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001c40:	4b1d      	ldr	r3, [pc, #116]	@ (8001cb8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	22ca      	movs	r2, #202	@ 0xca
 8001c46:	625a      	str	r2, [r3, #36]	@ 0x24
 8001c48:	4b1b      	ldr	r3, [pc, #108]	@ (8001cb8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	2253      	movs	r2, #83	@ 0x53
 8001c4e:	625a      	str	r2, [r3, #36]	@ 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8001c50:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001c54:	69fa      	ldr	r2, [r7, #28]
 8001c56:	4619      	mov	r1, r3
 8001c58:	69b8      	ldr	r0, [r7, #24]
 8001c5a:	f000 fa95 	bl	8002188 <HW_TS_RTC_Int_AppNot>
 8001c5e:	e022      	b.n	8001ca6 <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 8001c60:	f7ff fed2 	bl	8001a08 <RescheduleTimerList>
 8001c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c66:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	f383 8810 	msr	PRIMASK, r3
}
 8001c6e:	e01a      	b.n	8001ca6 <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001c70:	bf00      	nop
 8001c72:	4b11      	ldr	r3, [pc, #68]	@ (8001cb8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	f003 0304 	and.w	r3, r3, #4
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d0f8      	beq.n	8001c72 <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001c80:	4b0d      	ldr	r3, [pc, #52]	@ (8001cb8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	68db      	ldr	r3, [r3, #12]
 8001c86:	b2da      	uxtb	r2, r3
 8001c88:	4b0b      	ldr	r3, [pc, #44]	@ (8001cb8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8001c90:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001c92:	4b0d      	ldr	r3, [pc, #52]	@ (8001cc8 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001c94:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001c98:	60da      	str	r2, [r3, #12]
 8001c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c9c:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	f383 8810 	msr	PRIMASK, r3
}
 8001ca4:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001ca6:	4b04      	ldr	r3, [pc, #16]	@ (8001cb8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	22ff      	movs	r2, #255	@ 0xff
 8001cac:	625a      	str	r2, [r3, #36]	@ 0x24

  return;
 8001cae:	bf00      	nop
}
 8001cb0:	3728      	adds	r7, #40	@ 0x28
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	200001d4 	.word	0x200001d4
 8001cbc:	20000178 	.word	0x20000178
 8001cc0:	200000e8 	.word	0x200000e8
 8001cc4:	20000180 	.word	0x20000180
 8001cc8:	58000800 	.word	0x58000800

08001ccc <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b088      	sub	sp, #32
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	6039      	str	r1, [r7, #0]
 8001cd6:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001cd8:	4b5e      	ldr	r3, [pc, #376]	@ (8001e54 <HW_TS_Init+0x188>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	22ca      	movs	r2, #202	@ 0xca
 8001cde:	625a      	str	r2, [r3, #36]	@ 0x24
 8001ce0:	4b5c      	ldr	r3, [pc, #368]	@ (8001e54 <HW_TS_Init+0x188>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	2253      	movs	r2, #83	@ 0x53
 8001ce6:	625a      	str	r2, [r3, #36]	@ 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001ce8:	4b5b      	ldr	r3, [pc, #364]	@ (8001e58 <HW_TS_Init+0x18c>)
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	4a5a      	ldr	r2, [pc, #360]	@ (8001e58 <HW_TS_Init+0x18c>)
 8001cee:	f043 0320 	orr.w	r3, r3, #32
 8001cf2:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8001cf4:	4b58      	ldr	r3, [pc, #352]	@ (8001e58 <HW_TS_Init+0x18c>)
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	f003 0307 	and.w	r3, r3, #7
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	f1c3 0304 	rsb	r3, r3, #4
 8001d04:	b2da      	uxtb	r2, r3
 8001d06:	4b55      	ldr	r3, [pc, #340]	@ (8001e5c <HW_TS_Init+0x190>)
 8001d08:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8001d0a:	4b53      	ldr	r3, [pc, #332]	@ (8001e58 <HW_TS_Init+0x18c>)
 8001d0c:	691b      	ldr	r3, [r3, #16]
 8001d0e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001d12:	f44f 02fe 	mov.w	r2, #8323072	@ 0x7f0000
 8001d16:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d18:	693a      	ldr	r2, [r7, #16]
 8001d1a:	fa92 f2a2 	rbit	r2, r2
 8001d1e:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001d20:	68fa      	ldr	r2, [r7, #12]
 8001d22:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001d24:	697a      	ldr	r2, [r7, #20]
 8001d26:	2a00      	cmp	r2, #0
 8001d28:	d101      	bne.n	8001d2e <HW_TS_Init+0x62>
  {
    return 32U;
 8001d2a:	2220      	movs	r2, #32
 8001d2c:	e003      	b.n	8001d36 <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 8001d2e:	697a      	ldr	r2, [r7, #20]
 8001d30:	fab2 f282 	clz	r2, r2
 8001d34:	b2d2      	uxtb	r2, r2
 8001d36:	40d3      	lsrs	r3, r2
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	3301      	adds	r3, #1
 8001d3c:	b2da      	uxtb	r2, r3
 8001d3e:	4b48      	ldr	r3, [pc, #288]	@ (8001e60 <HW_TS_Init+0x194>)
 8001d40:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8001d42:	4b45      	ldr	r3, [pc, #276]	@ (8001e58 <HW_TS_Init+0x18c>)
 8001d44:	691b      	ldr	r3, [r3, #16]
 8001d46:	b29b      	uxth	r3, r3
 8001d48:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001d4c:	b29b      	uxth	r3, r3
 8001d4e:	3301      	adds	r3, #1
 8001d50:	b29a      	uxth	r2, r3
 8001d52:	4b44      	ldr	r3, [pc, #272]	@ (8001e64 <HW_TS_Init+0x198>)
 8001d54:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8001d56:	4b43      	ldr	r3, [pc, #268]	@ (8001e64 <HW_TS_Init+0x198>)
 8001d58:	881b      	ldrh	r3, [r3, #0]
 8001d5a:	3b01      	subs	r3, #1
 8001d5c:	4a40      	ldr	r2, [pc, #256]	@ (8001e60 <HW_TS_Init+0x194>)
 8001d5e:	7812      	ldrb	r2, [r2, #0]
 8001d60:	fb02 f303 	mul.w	r3, r2, r3
 8001d64:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001d68:	4a3c      	ldr	r2, [pc, #240]	@ (8001e5c <HW_TS_Init+0x190>)
 8001d6a:	7812      	ldrb	r2, [r2, #0]
 8001d6c:	40d3      	lsrs	r3, r2
 8001d6e:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8001d70:	69bb      	ldr	r3, [r7, #24]
 8001d72:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d904      	bls.n	8001d84 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8001d7a:	4b3b      	ldr	r3, [pc, #236]	@ (8001e68 <HW_TS_Init+0x19c>)
 8001d7c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001d80:	801a      	strh	r2, [r3, #0]
 8001d82:	e003      	b.n	8001d8c <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8001d84:	69bb      	ldr	r3, [r7, #24]
 8001d86:	b29a      	uxth	r2, r3
 8001d88:	4b37      	ldr	r3, [pc, #220]	@ (8001e68 <HW_TS_Init+0x19c>)
 8001d8a:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001d8c:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8001d90:	f7ff fb9c 	bl	80014cc <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001d94:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8001d98:	f7ff fb84 	bl	80014a4 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8001d9c:	79fb      	ldrb	r3, [r7, #7]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d13d      	bne.n	8001e1e <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001da2:	4b32      	ldr	r3, [pc, #200]	@ (8001e6c <HW_TS_Init+0x1a0>)
 8001da4:	2201      	movs	r2, #1
 8001da6:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001da8:	4b31      	ldr	r3, [pc, #196]	@ (8001e70 <HW_TS_Init+0x1a4>)
 8001daa:	f04f 32ff 	mov.w	r2, #4294967295
 8001dae:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001db0:	2300      	movs	r3, #0
 8001db2:	77fb      	strb	r3, [r7, #31]
 8001db4:	e00c      	b.n	8001dd0 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8001db6:	7ffa      	ldrb	r2, [r7, #31]
 8001db8:	492e      	ldr	r1, [pc, #184]	@ (8001e74 <HW_TS_Init+0x1a8>)
 8001dba:	4613      	mov	r3, r2
 8001dbc:	005b      	lsls	r3, r3, #1
 8001dbe:	4413      	add	r3, r2
 8001dc0:	00db      	lsls	r3, r3, #3
 8001dc2:	440b      	add	r3, r1
 8001dc4:	330c      	adds	r3, #12
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001dca:	7ffb      	ldrb	r3, [r7, #31]
 8001dcc:	3301      	adds	r3, #1
 8001dce:	77fb      	strb	r3, [r7, #31]
 8001dd0:	7ffb      	ldrb	r3, [r7, #31]
 8001dd2:	2b05      	cmp	r3, #5
 8001dd4:	d9ef      	bls.n	8001db6 <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8001dd6:	4b28      	ldr	r3, [pc, #160]	@ (8001e78 <HW_TS_Init+0x1ac>)
 8001dd8:	2206      	movs	r2, #6
 8001dda:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8001ddc:	4b1d      	ldr	r3, [pc, #116]	@ (8001e54 <HW_TS_Init+0x188>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	689a      	ldr	r2, [r3, #8]
 8001de2:	4b1c      	ldr	r3, [pc, #112]	@ (8001e54 <HW_TS_Init+0x188>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001dea:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8001dec:	4b19      	ldr	r3, [pc, #100]	@ (8001e54 <HW_TS_Init+0x188>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	68db      	ldr	r3, [r3, #12]
 8001df2:	b2da      	uxtb	r2, r3
 8001df4:	4b17      	ldr	r3, [pc, #92]	@ (8001e54 <HW_TS_Init+0x188>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8001dfc:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8001dfe:	4b1f      	ldr	r3, [pc, #124]	@ (8001e7c <HW_TS_Init+0x1b0>)
 8001e00:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001e04:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8001e06:	2003      	movs	r0, #3
 8001e08:	f001 fb67 	bl	80034da <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8001e0c:	4b11      	ldr	r3, [pc, #68]	@ (8001e54 <HW_TS_Init+0x188>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	689a      	ldr	r2, [r3, #8]
 8001e12:	4b10      	ldr	r3, [pc, #64]	@ (8001e54 <HW_TS_Init+0x188>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001e1a:	609a      	str	r2, [r3, #8]
 8001e1c:	e009      	b.n	8001e32 <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 8001e1e:	4b0d      	ldr	r3, [pc, #52]	@ (8001e54 <HW_TS_Init+0x188>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d002      	beq.n	8001e32 <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001e2c:	2003      	movs	r0, #3
 8001e2e:	f001 fb46 	bl	80034be <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001e32:	4b08      	ldr	r3, [pc, #32]	@ (8001e54 <HW_TS_Init+0x188>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	22ff      	movs	r2, #255	@ 0xff
 8001e38:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	2103      	movs	r1, #3
 8001e3e:	2003      	movs	r0, #3
 8001e40:	f001 fafb 	bl	800343a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001e44:	2003      	movs	r0, #3
 8001e46:	f001 fb12 	bl	800346e <HAL_NVIC_EnableIRQ>

  return;
 8001e4a:	bf00      	nop
}
 8001e4c:	3720      	adds	r7, #32
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	200001d4 	.word	0x200001d4
 8001e58:	40002800 	.word	0x40002800
 8001e5c:	20000181 	.word	0x20000181
 8001e60:	20000182 	.word	0x20000182
 8001e64:	20000184 	.word	0x20000184
 8001e68:	20000186 	.word	0x20000186
 8001e6c:	20000180 	.word	0x20000180
 8001e70:	2000017c 	.word	0x2000017c
 8001e74:	200000e8 	.word	0x200000e8
 8001e78:	20000178 	.word	0x20000178
 8001e7c:	58000800 	.word	0x58000800

08001e80 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b08b      	sub	sp, #44	@ 0x2c
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	60f8      	str	r0, [r7, #12]
 8001e88:	60b9      	str	r1, [r7, #8]
 8001e8a:	603b      	str	r3, [r7, #0]
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 8001e90:	2300      	movs	r3, #0
 8001e92:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001e96:	f3ef 8310 	mrs	r3, PRIMASK
 8001e9a:	61fb      	str	r3, [r7, #28]
  return(result);
 8001e9c:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001e9e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8001ea0:	b672      	cpsid	i
}
 8001ea2:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8001ea4:	e004      	b.n	8001eb0 <HW_TS_Create+0x30>
  {
    loop++;
 8001ea6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001eaa:	3301      	adds	r3, #1
 8001eac:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8001eb0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001eb4:	2b05      	cmp	r3, #5
 8001eb6:	d80c      	bhi.n	8001ed2 <HW_TS_Create+0x52>
 8001eb8:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8001ebc:	492c      	ldr	r1, [pc, #176]	@ (8001f70 <HW_TS_Create+0xf0>)
 8001ebe:	4613      	mov	r3, r2
 8001ec0:	005b      	lsls	r3, r3, #1
 8001ec2:	4413      	add	r3, r2
 8001ec4:	00db      	lsls	r3, r3, #3
 8001ec6:	440b      	add	r3, r1
 8001ec8:	330c      	adds	r3, #12
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d1e9      	bne.n	8001ea6 <HW_TS_Create+0x26>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001ed2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001ed6:	2b06      	cmp	r3, #6
 8001ed8:	d038      	beq.n	8001f4c <HW_TS_Create+0xcc>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 8001eda:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8001ede:	4924      	ldr	r1, [pc, #144]	@ (8001f70 <HW_TS_Create+0xf0>)
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	4413      	add	r3, r2
 8001ee6:	00db      	lsls	r3, r3, #3
 8001ee8:	440b      	add	r3, r1
 8001eea:	330c      	adds	r3, #12
 8001eec:	2201      	movs	r2, #1
 8001eee:	701a      	strb	r2, [r3, #0]
 8001ef0:	6a3b      	ldr	r3, [r7, #32]
 8001ef2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ef4:	69bb      	ldr	r3, [r7, #24]
 8001ef6:	f383 8810 	msr	PRIMASK, r3
}
 8001efa:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 8001efc:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8001f00:	491b      	ldr	r1, [pc, #108]	@ (8001f70 <HW_TS_Create+0xf0>)
 8001f02:	4613      	mov	r3, r2
 8001f04:	005b      	lsls	r3, r3, #1
 8001f06:	4413      	add	r3, r2
 8001f08:	00db      	lsls	r3, r3, #3
 8001f0a:	440b      	add	r3, r1
 8001f0c:	3310      	adds	r3, #16
 8001f0e:	68fa      	ldr	r2, [r7, #12]
 8001f10:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 8001f12:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8001f16:	4916      	ldr	r1, [pc, #88]	@ (8001f70 <HW_TS_Create+0xf0>)
 8001f18:	4613      	mov	r3, r2
 8001f1a:	005b      	lsls	r3, r3, #1
 8001f1c:	4413      	add	r3, r2
 8001f1e:	00db      	lsls	r3, r3, #3
 8001f20:	440b      	add	r3, r1
 8001f22:	330d      	adds	r3, #13
 8001f24:	79fa      	ldrb	r2, [r7, #7]
 8001f26:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 8001f28:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8001f2c:	4910      	ldr	r1, [pc, #64]	@ (8001f70 <HW_TS_Create+0xf0>)
 8001f2e:	4613      	mov	r3, r2
 8001f30:	005b      	lsls	r3, r3, #1
 8001f32:	4413      	add	r3, r2
 8001f34:	00db      	lsls	r3, r3, #3
 8001f36:	440b      	add	r3, r1
 8001f38:	683a      	ldr	r2, [r7, #0]
 8001f3a:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8001f42:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 8001f44:	2300      	movs	r3, #0
 8001f46:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001f4a:	e008      	b.n	8001f5e <HW_TS_Create+0xde>
 8001f4c:	6a3b      	ldr	r3, [r7, #32]
 8001f4e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	f383 8810 	msr	PRIMASK, r3
}
 8001f56:	bf00      	nop
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  return(localreturnstatus);
 8001f5e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	372c      	adds	r7, #44	@ 0x2c
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	200000e8 	.word	0x200000e8

08001f74 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b086      	sub	sp, #24
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001f7e:	f3ef 8310 	mrs	r3, PRIMASK
 8001f82:	60fb      	str	r3, [r7, #12]
  return(result);
 8001f84:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001f86:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001f88:	b672      	cpsid	i
}
 8001f8a:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001f8c:	2003      	movs	r0, #3
 8001f8e:	f001 fa7c 	bl	800348a <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001f92:	4b34      	ldr	r3, [pc, #208]	@ (8002064 <HW_TS_Stop+0xf0>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	22ca      	movs	r2, #202	@ 0xca
 8001f98:	625a      	str	r2, [r3, #36]	@ 0x24
 8001f9a:	4b32      	ldr	r3, [pc, #200]	@ (8002064 <HW_TS_Stop+0xf0>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	2253      	movs	r2, #83	@ 0x53
 8001fa0:	625a      	str	r2, [r3, #36]	@ 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001fa2:	79fa      	ldrb	r2, [r7, #7]
 8001fa4:	4930      	ldr	r1, [pc, #192]	@ (8002068 <HW_TS_Stop+0xf4>)
 8001fa6:	4613      	mov	r3, r2
 8001fa8:	005b      	lsls	r3, r3, #1
 8001faa:	4413      	add	r3, r2
 8001fac:	00db      	lsls	r3, r3, #3
 8001fae:	440b      	add	r3, r1
 8001fb0:	330c      	adds	r3, #12
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	2b02      	cmp	r3, #2
 8001fb8:	d142      	bne.n	8002040 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8001fba:	79fb      	ldrb	r3, [r7, #7]
 8001fbc:	2100      	movs	r1, #0
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f7ff fc06 	bl	80017d0 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8001fc4:	4b29      	ldr	r3, [pc, #164]	@ (800206c <HW_TS_Stop+0xf8>)
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001fca:	7cfb      	ldrb	r3, [r7, #19]
 8001fcc:	2b06      	cmp	r3, #6
 8001fce:	d12f      	bne.n	8002030 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001fd0:	4b27      	ldr	r3, [pc, #156]	@ (8002070 <HW_TS_Stop+0xfc>)
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fd8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001fdc:	d107      	bne.n	8001fee <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8001fde:	bf00      	nop
 8001fe0:	4b20      	ldr	r3, [pc, #128]	@ (8002064 <HW_TS_Stop+0xf0>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	68db      	ldr	r3, [r3, #12]
 8001fe6:	f003 0304 	and.w	r3, r3, #4
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d1f8      	bne.n	8001fe0 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8001fee:	4b1d      	ldr	r3, [pc, #116]	@ (8002064 <HW_TS_Stop+0xf0>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	689a      	ldr	r2, [r3, #8]
 8001ff4:	4b1b      	ldr	r3, [pc, #108]	@ (8002064 <HW_TS_Stop+0xf0>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001ffc:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001ffe:	bf00      	nop
 8002000:	4b18      	ldr	r3, [pc, #96]	@ (8002064 <HW_TS_Stop+0xf0>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	68db      	ldr	r3, [r3, #12]
 8002006:	f003 0304 	and.w	r3, r3, #4
 800200a:	2b00      	cmp	r3, #0
 800200c:	d0f8      	beq.n	8002000 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800200e:	4b15      	ldr	r3, [pc, #84]	@ (8002064 <HW_TS_Stop+0xf0>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	b2da      	uxtb	r2, r3
 8002016:	4b13      	ldr	r3, [pc, #76]	@ (8002064 <HW_TS_Stop+0xf0>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 800201e:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8002020:	4b14      	ldr	r3, [pc, #80]	@ (8002074 <HW_TS_Stop+0x100>)
 8002022:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002026:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8002028:	2003      	movs	r0, #3
 800202a:	f001 fa56 	bl	80034da <HAL_NVIC_ClearPendingIRQ>
 800202e:	e007      	b.n	8002040 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8002030:	4b11      	ldr	r3, [pc, #68]	@ (8002078 <HW_TS_Stop+0x104>)
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	b2db      	uxtb	r3, r3
 8002036:	7cfa      	ldrb	r2, [r7, #19]
 8002038:	429a      	cmp	r2, r3
 800203a:	d001      	beq.n	8002040 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 800203c:	f7ff fce4 	bl	8001a08 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002040:	4b08      	ldr	r3, [pc, #32]	@ (8002064 <HW_TS_Stop+0xf0>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	22ff      	movs	r2, #255	@ 0xff
 8002046:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002048:	2003      	movs	r0, #3
 800204a:	f001 fa10 	bl	800346e <HAL_NVIC_EnableIRQ>
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	f383 8810 	msr	PRIMASK, r3
}
 8002058:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 800205a:	bf00      	nop
}
 800205c:	3718      	adds	r7, #24
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	200001d4 	.word	0x200001d4
 8002068:	200000e8 	.word	0x200000e8
 800206c:	20000178 	.word	0x20000178
 8002070:	40002800 	.word	0x40002800
 8002074:	58000800 	.word	0x58000800
 8002078:	20000179 	.word	0x20000179

0800207c <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b086      	sub	sp, #24
 8002080:	af00      	add	r7, sp, #0
 8002082:	4603      	mov	r3, r0
 8002084:	6039      	str	r1, [r7, #0]
 8002086:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8002088:	79fa      	ldrb	r2, [r7, #7]
 800208a:	493b      	ldr	r1, [pc, #236]	@ (8002178 <HW_TS_Start+0xfc>)
 800208c:	4613      	mov	r3, r2
 800208e:	005b      	lsls	r3, r3, #1
 8002090:	4413      	add	r3, r2
 8002092:	00db      	lsls	r3, r3, #3
 8002094:	440b      	add	r3, r1
 8002096:	330c      	adds	r3, #12
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	b2db      	uxtb	r3, r3
 800209c:	2b02      	cmp	r3, #2
 800209e:	d103      	bne.n	80020a8 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 80020a0:	79fb      	ldrb	r3, [r7, #7]
 80020a2:	4618      	mov	r0, r3
 80020a4:	f7ff ff66 	bl	8001f74 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80020a8:	f3ef 8310 	mrs	r3, PRIMASK
 80020ac:	60fb      	str	r3, [r7, #12]
  return(result);
 80020ae:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80020b0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80020b2:	b672      	cpsid	i
}
 80020b4:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80020b6:	2003      	movs	r0, #3
 80020b8:	f001 f9e7 	bl	800348a <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80020bc:	4b2f      	ldr	r3, [pc, #188]	@ (800217c <HW_TS_Start+0x100>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	22ca      	movs	r2, #202	@ 0xca
 80020c2:	625a      	str	r2, [r3, #36]	@ 0x24
 80020c4:	4b2d      	ldr	r3, [pc, #180]	@ (800217c <HW_TS_Start+0x100>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	2253      	movs	r2, #83	@ 0x53
 80020ca:	625a      	str	r2, [r3, #36]	@ 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 80020cc:	79fa      	ldrb	r2, [r7, #7]
 80020ce:	492a      	ldr	r1, [pc, #168]	@ (8002178 <HW_TS_Start+0xfc>)
 80020d0:	4613      	mov	r3, r2
 80020d2:	005b      	lsls	r3, r3, #1
 80020d4:	4413      	add	r3, r2
 80020d6:	00db      	lsls	r3, r3, #3
 80020d8:	440b      	add	r3, r1
 80020da:	330c      	adds	r3, #12
 80020dc:	2202      	movs	r2, #2
 80020de:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 80020e0:	79fa      	ldrb	r2, [r7, #7]
 80020e2:	4925      	ldr	r1, [pc, #148]	@ (8002178 <HW_TS_Start+0xfc>)
 80020e4:	4613      	mov	r3, r2
 80020e6:	005b      	lsls	r3, r3, #1
 80020e8:	4413      	add	r3, r2
 80020ea:	00db      	lsls	r3, r3, #3
 80020ec:	440b      	add	r3, r1
 80020ee:	3308      	adds	r3, #8
 80020f0:	683a      	ldr	r2, [r7, #0]
 80020f2:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 80020f4:	79fa      	ldrb	r2, [r7, #7]
 80020f6:	4920      	ldr	r1, [pc, #128]	@ (8002178 <HW_TS_Start+0xfc>)
 80020f8:	4613      	mov	r3, r2
 80020fa:	005b      	lsls	r3, r3, #1
 80020fc:	4413      	add	r3, r2
 80020fe:	00db      	lsls	r3, r3, #3
 8002100:	440b      	add	r3, r1
 8002102:	3304      	adds	r3, #4
 8002104:	683a      	ldr	r2, [r7, #0]
 8002106:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8002108:	79fb      	ldrb	r3, [r7, #7]
 800210a:	4618      	mov	r0, r3
 800210c:	f7ff fab6 	bl	800167c <linkTimer>
 8002110:	4603      	mov	r3, r0
 8002112:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8002114:	4b1a      	ldr	r3, [pc, #104]	@ (8002180 <HW_TS_Start+0x104>)
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 800211a:	4b1a      	ldr	r3, [pc, #104]	@ (8002184 <HW_TS_Start+0x108>)
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	b2db      	uxtb	r3, r3
 8002120:	7c7a      	ldrb	r2, [r7, #17]
 8002122:	429a      	cmp	r2, r3
 8002124:	d002      	beq.n	800212c <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 8002126:	f7ff fc6f 	bl	8001a08 <RescheduleTimerList>
 800212a:	e013      	b.n	8002154 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 800212c:	79fa      	ldrb	r2, [r7, #7]
 800212e:	4912      	ldr	r1, [pc, #72]	@ (8002178 <HW_TS_Start+0xfc>)
 8002130:	4613      	mov	r3, r2
 8002132:	005b      	lsls	r3, r3, #1
 8002134:	4413      	add	r3, r2
 8002136:	00db      	lsls	r3, r3, #3
 8002138:	440b      	add	r3, r1
 800213a:	3308      	adds	r3, #8
 800213c:	6819      	ldr	r1, [r3, #0]
 800213e:	8a7b      	ldrh	r3, [r7, #18]
 8002140:	79fa      	ldrb	r2, [r7, #7]
 8002142:	1ac9      	subs	r1, r1, r3
 8002144:	480c      	ldr	r0, [pc, #48]	@ (8002178 <HW_TS_Start+0xfc>)
 8002146:	4613      	mov	r3, r2
 8002148:	005b      	lsls	r3, r3, #1
 800214a:	4413      	add	r3, r2
 800214c:	00db      	lsls	r3, r3, #3
 800214e:	4403      	add	r3, r0
 8002150:	3308      	adds	r3, #8
 8002152:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002154:	4b09      	ldr	r3, [pc, #36]	@ (800217c <HW_TS_Start+0x100>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	22ff      	movs	r2, #255	@ 0xff
 800215a:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800215c:	2003      	movs	r0, #3
 800215e:	f001 f986 	bl	800346e <HAL_NVIC_EnableIRQ>
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	f383 8810 	msr	PRIMASK, r3
}
 800216c:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 800216e:	bf00      	nop
}
 8002170:	3718      	adds	r7, #24
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	200000e8 	.word	0x200000e8
 800217c:	200001d4 	.word	0x200001d4
 8002180:	20000178 	.word	0x20000178
 8002184:	20000179 	.word	0x20000179

08002188 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b084      	sub	sp, #16
 800218c:	af00      	add	r7, sp, #0
 800218e:	60f8      	str	r0, [r7, #12]
 8002190:	460b      	mov	r3, r1
 8002192:	607a      	str	r2, [r7, #4]
 8002194:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4798      	blx	r3

  return;
 800219a:	bf00      	nop
}
 800219c:	3710      	adds	r7, #16
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
	...

080021a4 <HW_UART_Transmit_DMA>:

    return hw_status;
}

hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b086      	sub	sp, #24
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	60b9      	str	r1, [r7, #8]
 80021ac:	607b      	str	r3, [r7, #4]
 80021ae:	4603      	mov	r3, r0
 80021b0:	73fb      	strb	r3, [r7, #15]
 80021b2:	4613      	mov	r3, r2
 80021b4:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef hal_status = HAL_OK;
 80021b6:	2300      	movs	r3, #0
 80021b8:	75fb      	strb	r3, [r7, #23]
    hw_status_t hw_status = hw_uart_ok;
 80021ba:	2300      	movs	r3, #0
 80021bc:	75bb      	strb	r3, [r7, #22]

    switch (hw_uart_id)
 80021be:	7bfb      	ldrb	r3, [r7, #15]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d10e      	bne.n	80021e2 <HW_UART_Transmit_DMA+0x3e>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case hw_uart1:
            HW_huart1TxCb = cb;
 80021c4:	4a17      	ldr	r2, [pc, #92]	@ (8002224 <HW_UART_Transmit_DMA+0x80>)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6013      	str	r3, [r2, #0]
            huart1.Instance = USART1;
 80021ca:	4b17      	ldr	r3, [pc, #92]	@ (8002228 <HW_UART_Transmit_DMA+0x84>)
 80021cc:	4a17      	ldr	r2, [pc, #92]	@ (800222c <HW_UART_Transmit_DMA+0x88>)
 80021ce:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&huart1, p_data, size);
 80021d0:	89bb      	ldrh	r3, [r7, #12]
 80021d2:	461a      	mov	r2, r3
 80021d4:	68b9      	ldr	r1, [r7, #8]
 80021d6:	4814      	ldr	r0, [pc, #80]	@ (8002228 <HW_UART_Transmit_DMA+0x84>)
 80021d8:	f005 fdb8 	bl	8007d4c <HAL_UART_Transmit_DMA>
 80021dc:	4603      	mov	r3, r0
 80021de:	75fb      	strb	r3, [r7, #23]
            break;
 80021e0:	e000      	b.n	80021e4 <HW_UART_Transmit_DMA+0x40>
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
            break;
#endif

        default:
            break;
 80021e2:	bf00      	nop
    }

    switch (hal_status)
 80021e4:	7dfb      	ldrb	r3, [r7, #23]
 80021e6:	2b03      	cmp	r3, #3
 80021e8:	d816      	bhi.n	8002218 <HW_UART_Transmit_DMA+0x74>
 80021ea:	a201      	add	r2, pc, #4	@ (adr r2, 80021f0 <HW_UART_Transmit_DMA+0x4c>)
 80021ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021f0:	08002201 	.word	0x08002201
 80021f4:	08002207 	.word	0x08002207
 80021f8:	0800220d 	.word	0x0800220d
 80021fc:	08002213 	.word	0x08002213
    {
        case HAL_OK:
            hw_status = hw_uart_ok;
 8002200:	2300      	movs	r3, #0
 8002202:	75bb      	strb	r3, [r7, #22]
            break;
 8002204:	e009      	b.n	800221a <HW_UART_Transmit_DMA+0x76>

        case HAL_ERROR:
            hw_status = hw_uart_error;
 8002206:	2301      	movs	r3, #1
 8002208:	75bb      	strb	r3, [r7, #22]
            break;
 800220a:	e006      	b.n	800221a <HW_UART_Transmit_DMA+0x76>

        case HAL_BUSY:
            hw_status = hw_uart_busy;
 800220c:	2302      	movs	r3, #2
 800220e:	75bb      	strb	r3, [r7, #22]
            break;
 8002210:	e003      	b.n	800221a <HW_UART_Transmit_DMA+0x76>

        case HAL_TIMEOUT:
            hw_status = hw_uart_to;
 8002212:	2303      	movs	r3, #3
 8002214:	75bb      	strb	r3, [r7, #22]
            break;
 8002216:	e000      	b.n	800221a <HW_UART_Transmit_DMA+0x76>

        default:
            break;
 8002218:	bf00      	nop
    }

    return hw_status;
 800221a:	7dbb      	ldrb	r3, [r7, #22]
}
 800221c:	4618      	mov	r0, r3
 800221e:	3718      	adds	r7, #24
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}
 8002224:	20000188 	.word	0x20000188
 8002228:	200001f8 	.word	0x200001f8
 800222c:	40013800 	.word	0x40013800

08002230 <HAL_UART_TxCpltCallback>:

    return;
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	461a      	mov	r2, r3
 800223e:	4b09      	ldr	r3, [pc, #36]	@ (8002264 <HAL_UART_TxCpltCallback+0x34>)
 8002240:	429a      	cmp	r2, r3
 8002242:	d107      	bne.n	8002254 <HAL_UART_TxCpltCallback+0x24>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1TxCb)
 8002244:	4b08      	ldr	r3, [pc, #32]	@ (8002268 <HAL_UART_TxCpltCallback+0x38>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d005      	beq.n	8002258 <HAL_UART_TxCpltCallback+0x28>
            {
                HW_huart1TxCb();
 800224c:	4b06      	ldr	r3, [pc, #24]	@ (8002268 <HAL_UART_TxCpltCallback+0x38>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4798      	blx	r3
            }
            break;
 8002252:	e001      	b.n	8002258 <HAL_UART_TxCpltCallback+0x28>
            }
            break;
#endif

        default:
            break;
 8002254:	bf00      	nop
 8002256:	e000      	b.n	800225a <HAL_UART_TxCpltCallback+0x2a>
            break;
 8002258:	bf00      	nop
    }

    return;
 800225a:	bf00      	nop
}
 800225c:	3708      	adds	r7, #8
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	40013800 	.word	0x40013800
 8002268:	20000188 	.word	0x20000188

0800226c <ism330_Init>:

extern I2C_HandleTypeDef hi2c3;


HAL_StatusTypeDef ism330_Init(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b086      	sub	sp, #24
 8002270:	af04      	add	r7, sp, #16
    HAL_StatusTypeDef ret;

    // CTRL3_C: Enable Block Data Update (BDU) and auto-increment
    uint8_t ctrl3_c = 0x44;  // BDU = 1 (bit6), IF_INC = 1 (bit2)
 8002272:	2344      	movs	r3, #68	@ 0x44
 8002274:	71bb      	strb	r3, [r7, #6]
    ret = HAL_I2C_Mem_Write(&hi2c3, ISM330_I2C_ADD, ISM330_CTRL3_C,
 8002276:	2364      	movs	r3, #100	@ 0x64
 8002278:	9302      	str	r3, [sp, #8]
 800227a:	2301      	movs	r3, #1
 800227c:	9301      	str	r3, [sp, #4]
 800227e:	1dbb      	adds	r3, r7, #6
 8002280:	9300      	str	r3, [sp, #0]
 8002282:	2301      	movs	r3, #1
 8002284:	2212      	movs	r2, #18
 8002286:	21d7      	movs	r1, #215	@ 0xd7
 8002288:	481c      	ldr	r0, [pc, #112]	@ (80022fc <ism330_Init+0x90>)
 800228a:	f001 fed1 	bl	8004030 <HAL_I2C_Mem_Write>
 800228e:	4603      	mov	r3, r0
 8002290:	71fb      	strb	r3, [r7, #7]
                            I2C_MEMADD_SIZE_8BIT, &ctrl3_c, 1, 100);
    if (ret != HAL_OK) return ret;
 8002292:	79fb      	ldrb	r3, [r7, #7]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d001      	beq.n	800229c <ism330_Init+0x30>
 8002298:	79fb      	ldrb	r3, [r7, #7]
 800229a:	e02a      	b.n	80022f2 <ism330_Init+0x86>

    // CTRL1_XL: Accelerometer ODR = 104 Hz, FS = ±2g
    uint8_t ctrl1_xl = 0x40; // ODR_XL = 104 Hz (0100), FS = ±2g (00)
 800229c:	2340      	movs	r3, #64	@ 0x40
 800229e:	717b      	strb	r3, [r7, #5]
    ret = HAL_I2C_Mem_Write(&hi2c3, ISM330_I2C_ADD, ISM330_CTRL1_XL,
 80022a0:	2364      	movs	r3, #100	@ 0x64
 80022a2:	9302      	str	r3, [sp, #8]
 80022a4:	2301      	movs	r3, #1
 80022a6:	9301      	str	r3, [sp, #4]
 80022a8:	1d7b      	adds	r3, r7, #5
 80022aa:	9300      	str	r3, [sp, #0]
 80022ac:	2301      	movs	r3, #1
 80022ae:	2210      	movs	r2, #16
 80022b0:	21d7      	movs	r1, #215	@ 0xd7
 80022b2:	4812      	ldr	r0, [pc, #72]	@ (80022fc <ism330_Init+0x90>)
 80022b4:	f001 febc 	bl	8004030 <HAL_I2C_Mem_Write>
 80022b8:	4603      	mov	r3, r0
 80022ba:	71fb      	strb	r3, [r7, #7]
                            I2C_MEMADD_SIZE_8BIT, &ctrl1_xl, 1, 100);
    if (ret != HAL_OK) return ret;
 80022bc:	79fb      	ldrb	r3, [r7, #7]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d001      	beq.n	80022c6 <ism330_Init+0x5a>
 80022c2:	79fb      	ldrb	r3, [r7, #7]
 80022c4:	e015      	b.n	80022f2 <ism330_Init+0x86>

    // CTRL2_G: Gyroscope ODR = 104 Hz, FS = ±250 dps
    uint8_t ctrl2_g = 0x40;  // ODR_G = 104 Hz (0100), FS = ±250 dps (00)
 80022c6:	2340      	movs	r3, #64	@ 0x40
 80022c8:	713b      	strb	r3, [r7, #4]
    ret = HAL_I2C_Mem_Write(&hi2c3, ISM330_I2C_ADD, ISM330_CTRL2_G,
 80022ca:	2364      	movs	r3, #100	@ 0x64
 80022cc:	9302      	str	r3, [sp, #8]
 80022ce:	2301      	movs	r3, #1
 80022d0:	9301      	str	r3, [sp, #4]
 80022d2:	1d3b      	adds	r3, r7, #4
 80022d4:	9300      	str	r3, [sp, #0]
 80022d6:	2301      	movs	r3, #1
 80022d8:	2211      	movs	r2, #17
 80022da:	21d7      	movs	r1, #215	@ 0xd7
 80022dc:	4807      	ldr	r0, [pc, #28]	@ (80022fc <ism330_Init+0x90>)
 80022de:	f001 fea7 	bl	8004030 <HAL_I2C_Mem_Write>
 80022e2:	4603      	mov	r3, r0
 80022e4:	71fb      	strb	r3, [r7, #7]
                            I2C_MEMADD_SIZE_8BIT, &ctrl2_g, 1, 100);
    if (ret != HAL_OK) return ret;
 80022e6:	79fb      	ldrb	r3, [r7, #7]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d001      	beq.n	80022f0 <ism330_Init+0x84>
 80022ec:	79fb      	ldrb	r3, [r7, #7]
 80022ee:	e000      	b.n	80022f2 <ism330_Init+0x86>

    return HAL_OK;
 80022f0:	2300      	movs	r3, #0
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3708      	adds	r7, #8
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	20000350 	.word	0x20000350

08002300 <ism330_ReadIMU>:
}


// Buffer to hold raw IMU data
int16_t* ism330_ReadIMU(void)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b088      	sub	sp, #32
 8002304:	af04      	add	r7, sp, #16
    static int16_t imu_data[6];  // [accX, accY, accZ, gyroX, gyroY, gyroZ]
    uint8_t raw_data[12];        // 6 bytes each for gyro and accel
    HAL_StatusTypeDef ret;

    // Read 12 bytes starting from OUTX_L_G (gyro) to OUTZ_H_A (accel)
    ret = HAL_I2C_Mem_Read(&hi2c3, ISM330_I2C_ADD, ISM330_OUTX_L_G,
 8002306:	2364      	movs	r3, #100	@ 0x64
 8002308:	9302      	str	r3, [sp, #8]
 800230a:	230c      	movs	r3, #12
 800230c:	9301      	str	r3, [sp, #4]
 800230e:	463b      	mov	r3, r7
 8002310:	9300      	str	r3, [sp, #0]
 8002312:	2301      	movs	r3, #1
 8002314:	2222      	movs	r2, #34	@ 0x22
 8002316:	21d7      	movs	r1, #215	@ 0xd7
 8002318:	4822      	ldr	r0, [pc, #136]	@ (80023a4 <ism330_ReadIMU+0xa4>)
 800231a:	f001 ff9d 	bl	8004258 <HAL_I2C_Mem_Read>
 800231e:	4603      	mov	r3, r0
 8002320:	73fb      	strb	r3, [r7, #15]
                           I2C_MEMADD_SIZE_8BIT, raw_data, 12, 100);
    if (ret != HAL_OK) {
 8002322:	7bfb      	ldrb	r3, [r7, #15]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d001      	beq.n	800232c <ism330_ReadIMU+0x2c>
        return NULL;  // Error reading IMU
 8002328:	2300      	movs	r3, #0
 800232a:	e036      	b.n	800239a <ism330_ReadIMU+0x9a>
    }

    // Parse gyro data (first 6 bytes)
    imu_data[3] = (int16_t)(raw_data[1] << 8 | raw_data[0]);  // gyroX
 800232c:	787b      	ldrb	r3, [r7, #1]
 800232e:	021b      	lsls	r3, r3, #8
 8002330:	b21a      	sxth	r2, r3
 8002332:	783b      	ldrb	r3, [r7, #0]
 8002334:	b21b      	sxth	r3, r3
 8002336:	4313      	orrs	r3, r2
 8002338:	b21a      	sxth	r2, r3
 800233a:	4b1b      	ldr	r3, [pc, #108]	@ (80023a8 <ism330_ReadIMU+0xa8>)
 800233c:	80da      	strh	r2, [r3, #6]
    imu_data[4] = (int16_t)(raw_data[3] << 8 | raw_data[2]);  // gyroY
 800233e:	78fb      	ldrb	r3, [r7, #3]
 8002340:	021b      	lsls	r3, r3, #8
 8002342:	b21a      	sxth	r2, r3
 8002344:	78bb      	ldrb	r3, [r7, #2]
 8002346:	b21b      	sxth	r3, r3
 8002348:	4313      	orrs	r3, r2
 800234a:	b21a      	sxth	r2, r3
 800234c:	4b16      	ldr	r3, [pc, #88]	@ (80023a8 <ism330_ReadIMU+0xa8>)
 800234e:	811a      	strh	r2, [r3, #8]
    imu_data[5] = (int16_t)(raw_data[5] << 8 | raw_data[4]);  // gyroZ
 8002350:	797b      	ldrb	r3, [r7, #5]
 8002352:	021b      	lsls	r3, r3, #8
 8002354:	b21a      	sxth	r2, r3
 8002356:	793b      	ldrb	r3, [r7, #4]
 8002358:	b21b      	sxth	r3, r3
 800235a:	4313      	orrs	r3, r2
 800235c:	b21a      	sxth	r2, r3
 800235e:	4b12      	ldr	r3, [pc, #72]	@ (80023a8 <ism330_ReadIMU+0xa8>)
 8002360:	815a      	strh	r2, [r3, #10]

    // Parse accel data (next 6 bytes)
    imu_data[0] = (int16_t)(raw_data[7] << 8 | raw_data[6]);  // accX
 8002362:	79fb      	ldrb	r3, [r7, #7]
 8002364:	021b      	lsls	r3, r3, #8
 8002366:	b21a      	sxth	r2, r3
 8002368:	79bb      	ldrb	r3, [r7, #6]
 800236a:	b21b      	sxth	r3, r3
 800236c:	4313      	orrs	r3, r2
 800236e:	b21a      	sxth	r2, r3
 8002370:	4b0d      	ldr	r3, [pc, #52]	@ (80023a8 <ism330_ReadIMU+0xa8>)
 8002372:	801a      	strh	r2, [r3, #0]
    imu_data[1] = (int16_t)(raw_data[9] << 8 | raw_data[8]);  // accY
 8002374:	7a7b      	ldrb	r3, [r7, #9]
 8002376:	021b      	lsls	r3, r3, #8
 8002378:	b21a      	sxth	r2, r3
 800237a:	7a3b      	ldrb	r3, [r7, #8]
 800237c:	b21b      	sxth	r3, r3
 800237e:	4313      	orrs	r3, r2
 8002380:	b21a      	sxth	r2, r3
 8002382:	4b09      	ldr	r3, [pc, #36]	@ (80023a8 <ism330_ReadIMU+0xa8>)
 8002384:	805a      	strh	r2, [r3, #2]
    imu_data[2] = (int16_t)(raw_data[11] << 8 | raw_data[10]); // accZ
 8002386:	7afb      	ldrb	r3, [r7, #11]
 8002388:	021b      	lsls	r3, r3, #8
 800238a:	b21a      	sxth	r2, r3
 800238c:	7abb      	ldrb	r3, [r7, #10]
 800238e:	b21b      	sxth	r3, r3
 8002390:	4313      	orrs	r3, r2
 8002392:	b21a      	sxth	r2, r3
 8002394:	4b04      	ldr	r3, [pc, #16]	@ (80023a8 <ism330_ReadIMU+0xa8>)
 8002396:	809a      	strh	r2, [r3, #4]

    return imu_data;
 8002398:	4b03      	ldr	r3, [pc, #12]	@ (80023a8 <ism330_ReadIMU+0xa8>)
}
 800239a:	4618      	mov	r0, r3
 800239c:	3710      	adds	r7, #16
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	20000350 	.word	0x20000350
 80023a8:	2000018c 	.word	0x2000018c

080023ac <LL_RCC_LSE_SetDriveCapability>:
{
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80023b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80023b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023bc:	f023 0218 	bic.w	r2, r3, #24
 80023c0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	4313      	orrs	r3, r2
 80023c8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80023cc:	bf00      	nop
 80023ce:	370c      	adds	r7, #12
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr

080023d8 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80023d8:	b480      	push	{r7}
 80023da:	b085      	sub	sp, #20
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80023e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80023e4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80023e6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4313      	orrs	r3, r2
 80023ee:	648b      	str	r3, [r1, #72]	@ 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80023f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80023f4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4013      	ands	r3, r2
 80023fa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80023fc:	68fb      	ldr	r3, [r7, #12]
}
 80023fe:	bf00      	nop
 8002400:	3714      	adds	r7, #20
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr

0800240a <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800240a:	b480      	push	{r7}
 800240c:	b085      	sub	sp, #20
 800240e:	af00      	add	r7, sp, #0
 8002410:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002412:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002416:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002418:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	4313      	orrs	r3, r2
 8002420:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002422:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002426:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	4013      	ands	r3, r2
 800242c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800242e:	68fb      	ldr	r3, [r7, #12]
}
 8002430:	bf00      	nop
 8002432:	3714      	adds	r7, #20
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr

0800243c <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800243c:	b480      	push	{r7}
 800243e:	b085      	sub	sp, #20
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002444:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002448:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800244a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4313      	orrs	r3, r2
 8002452:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002454:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002458:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	4013      	ands	r3, r2
 800245e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002460:	68fb      	ldr	r3, [r7, #12]
}
 8002462:	bf00      	nop
 8002464:	3714      	adds	r7, #20
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr

0800246e <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800246e:	b480      	push	{r7}
 8002470:	b085      	sub	sp, #20
 8002472:	af00      	add	r7, sp, #0
 8002474:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8002476:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800247a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800247c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	4313      	orrs	r3, r2
 8002484:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002486:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800248a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	4013      	ands	r3, r2
 8002490:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002492:	68fb      	ldr	r3, [r7, #12]
}
 8002494:	bf00      	nop
 8002496:	3714      	adds	r7, #20
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr

080024a0 <LL_RTC_EnableWriteProtection>:
{
 80024a0:	b480      	push	{r7}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	22ff      	movs	r2, #255	@ 0xff
 80024ac:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80024ae:	bf00      	nop
 80024b0:	370c      	adds	r7, #12
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr

080024ba <LL_RTC_DisableWriteProtection>:
{
 80024ba:	b480      	push	{r7}
 80024bc:	b083      	sub	sp, #12
 80024be:	af00      	add	r7, sp, #0
 80024c0:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	22ca      	movs	r2, #202	@ 0xca
 80024c6:	625a      	str	r2, [r3, #36]	@ 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2253      	movs	r2, #83	@ 0x53
 80024cc:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80024ce:	bf00      	nop
 80024d0:	370c      	adds	r7, #12
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr

080024da <LL_RTC_WAKEUP_SetClock>:
{
 80024da:	b480      	push	{r7}
 80024dc:	b083      	sub	sp, #12
 80024de:	af00      	add	r7, sp, #0
 80024e0:	6078      	str	r0, [r7, #4]
 80024e2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	f023 0207 	bic.w	r2, r3, #7
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	431a      	orrs	r2, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	609a      	str	r2, [r3, #8]
}
 80024f4:	bf00      	nop
 80024f6:	370c      	adds	r7, #12
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr

08002500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002504:	f000 fdcc 	bl	80030a0 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8002508:	f7fe fd80 	bl	800100c <MX_APPE_Config>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800250c:	f000 f822 	bl	8002554 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8002510:	f000 f87c 	bl	800260c <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 8002514:	f000 f89a 	bl	800264c <MX_IPCC_Init>

  /* USER CODE BEGIN SysInit */
  PeriphClock_Config();
 8002518:	f000 faac 	bl	8002a74 <PeriphClock_Config>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800251c:	f000 f9ba 	bl	8002894 <MX_GPIO_Init>
  my_MX_SPI1_Init();
 8002520:	f000 f964 	bl	80027ec <my_MX_SPI1_Init>
  MX_I2C3_Init();
 8002524:	f000 f930 	bl	8002788 <MX_I2C3_Init>
  MX_DMA_Init();
 8002528:	f000 f9a2 	bl	8002870 <MX_DMA_Init>
  MX_RTC_Init();
 800252c:	f000 f8aa 	bl	8002684 <MX_RTC_Init>
  MX_USART1_UART_Init();
 8002530:	f000 f8dc 	bl	80026ec <MX_USART1_UART_Init>
  MX_RF_Init();
 8002534:	f000 f89e 	bl	8002674 <MX_RF_Init>
  /* USER CODE BEGIN 2 */
  MX_TIM2_Init();
 8002538:	f000 faa4 	bl	8002a84 <MX_TIM2_Init>
  MX_TIM17_Init();
 800253c:	f000 fb32 	bl	8002ba4 <MX_TIM17_Init>

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8002540:	f7fe fd72 	bl	8001028 <MX_APPE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  ADS1299_Init();
 8002544:	f7fe fad2 	bl	8000aec <ADS1299_Init>
  ism330_Init();
 8002548:	f7ff fe90 	bl	800226c <ism330_Init>

  while(1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 800254c:	f7fe ff4b 	bl	80013e6 <MX_APPE_Process>
 8002550:	e7fc      	b.n	800254c <main+0x4c>
	...

08002554 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b09a      	sub	sp, #104	@ 0x68
 8002558:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800255a:	f107 0320 	add.w	r3, r7, #32
 800255e:	2248      	movs	r2, #72	@ 0x48
 8002560:	2100      	movs	r1, #0
 8002562:	4618      	mov	r0, r3
 8002564:	f00c f982 	bl	800e86c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002568:	1d3b      	adds	r3, r7, #4
 800256a:	2200      	movs	r2, #0
 800256c:	601a      	str	r2, [r3, #0]
 800256e:	605a      	str	r2, [r3, #4]
 8002570:	609a      	str	r2, [r3, #8]
 8002572:	60da      	str	r2, [r3, #12]
 8002574:	611a      	str	r2, [r3, #16]
 8002576:	615a      	str	r2, [r3, #20]
 8002578:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800257a:	f002 facf 	bl	8004b1c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 800257e:	2010      	movs	r0, #16
 8002580:	f7ff ff14 	bl	80023ac <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002584:	4b20      	ldr	r3, [pc, #128]	@ (8002608 <SystemClock_Config+0xb4>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800258c:	4a1e      	ldr	r2, [pc, #120]	@ (8002608 <SystemClock_Config+0xb4>)
 800258e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002592:	6013      	str	r3, [r2, #0]
 8002594:	4b1c      	ldr	r3, [pc, #112]	@ (8002608 <SystemClock_Config+0xb4>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800259c:	603b      	str	r3, [r7, #0]
 800259e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 80025a0:	2307      	movs	r3, #7
 80025a2:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80025a4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80025a8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80025aa:	2301      	movs	r3, #1
 80025ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80025ae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80025b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80025b4:	2340      	movs	r3, #64	@ 0x40
 80025b6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80025b8:	2300      	movs	r3, #0
 80025ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025bc:	f107 0320 	add.w	r3, r7, #32
 80025c0:	4618      	mov	r0, r3
 80025c2:	f002 fe3f 	bl	8005244 <HAL_RCC_OscConfig>
 80025c6:	4603      	mov	r3, r0
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d001      	beq.n	80025d0 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80025cc:	f000 fb2e 	bl	8002c2c <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80025d0:	236f      	movs	r3, #111	@ 0x6f
 80025d2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80025d4:	2302      	movs	r3, #2
 80025d6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80025d8:	2300      	movs	r3, #0
 80025da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80025dc:	2300      	movs	r3, #0
 80025de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80025e0:	2300      	movs	r3, #0
 80025e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80025e4:	2300      	movs	r3, #0
 80025e6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80025e8:	2300      	movs	r3, #0
 80025ea:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80025ec:	1d3b      	adds	r3, r7, #4
 80025ee:	2101      	movs	r1, #1
 80025f0:	4618      	mov	r0, r3
 80025f2:	f003 f99b 	bl	800592c <HAL_RCC_ClockConfig>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d001      	beq.n	8002600 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80025fc:	f000 fb16 	bl	8002c2c <Error_Handler>
  }
}
 8002600:	bf00      	nop
 8002602:	3768      	adds	r7, #104	@ 0x68
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}
 8002608:	58000400 	.word	0x58000400

0800260c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b094      	sub	sp, #80	@ 0x50
 8002610:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002612:	463b      	mov	r3, r7
 8002614:	2250      	movs	r2, #80	@ 0x50
 8002616:	2100      	movs	r1, #0
 8002618:	4618      	mov	r0, r3
 800261a:	f00c f927 	bl	800e86c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 800261e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002622:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8002624:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002628:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 800262a:	2302      	movs	r3, #2
 800262c:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 800262e:	2300      	movs	r3, #0
 8002630:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002632:	463b      	mov	r3, r7
 8002634:	4618      	mov	r0, r3
 8002636:	f003 fdb6 	bl	80061a6 <HAL_RCCEx_PeriphCLKConfig>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d001      	beq.n	8002644 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8002640:	f000 faf4 	bl	8002c2c <Error_Handler>
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif

  /* USER CODE END Smps */
}
 8002644:	bf00      	nop
 8002646:	3750      	adds	r7, #80	@ 0x50
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}

0800264c <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8002650:	4b06      	ldr	r3, [pc, #24]	@ (800266c <MX_IPCC_Init+0x20>)
 8002652:	4a07      	ldr	r2, [pc, #28]	@ (8002670 <MX_IPCC_Init+0x24>)
 8002654:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8002656:	4805      	ldr	r0, [pc, #20]	@ (800266c <MX_IPCC_Init+0x20>)
 8002658:	f002 f9da 	bl	8004a10 <HAL_IPCC_Init>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d001      	beq.n	8002666 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8002662:	f000 fae3 	bl	8002c2c <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8002666:	bf00      	nop
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	20000198 	.word	0x20000198
 8002670:	58000c00 	.word	0x58000c00

08002674 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8002674:	b480      	push	{r7}
 8002676:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8002678:	bf00      	nop
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr
	...

08002684 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002688:	4b16      	ldr	r3, [pc, #88]	@ (80026e4 <MX_RTC_Init+0x60>)
 800268a:	4a17      	ldr	r2, [pc, #92]	@ (80026e8 <MX_RTC_Init+0x64>)
 800268c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800268e:	4b15      	ldr	r3, [pc, #84]	@ (80026e4 <MX_RTC_Init+0x60>)
 8002690:	2200      	movs	r2, #0
 8002692:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8002694:	4b13      	ldr	r3, [pc, #76]	@ (80026e4 <MX_RTC_Init+0x60>)
 8002696:	220f      	movs	r2, #15
 8002698:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 800269a:	4b12      	ldr	r3, [pc, #72]	@ (80026e4 <MX_RTC_Init+0x60>)
 800269c:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80026a0:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80026a2:	4b10      	ldr	r3, [pc, #64]	@ (80026e4 <MX_RTC_Init+0x60>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80026a8:	4b0e      	ldr	r3, [pc, #56]	@ (80026e4 <MX_RTC_Init+0x60>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80026ae:	4b0d      	ldr	r3, [pc, #52]	@ (80026e4 <MX_RTC_Init+0x60>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80026b4:	4b0b      	ldr	r3, [pc, #44]	@ (80026e4 <MX_RTC_Init+0x60>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80026ba:	480a      	ldr	r0, [pc, #40]	@ (80026e4 <MX_RTC_Init+0x60>)
 80026bc:	f003 fffa 	bl	80066b4 <HAL_RTC_Init>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d001      	beq.n	80026ca <MX_RTC_Init+0x46>
  {
    Error_Handler();
 80026c6:	f000 fab1 	bl	8002c2c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 80026ca:	4807      	ldr	r0, [pc, #28]	@ (80026e8 <MX_RTC_Init+0x64>)
 80026cc:	f7ff fef5 	bl	80024ba <LL_RTC_DisableWriteProtection>
  
  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 80026d0:	2100      	movs	r1, #0
 80026d2:	4805      	ldr	r0, [pc, #20]	@ (80026e8 <MX_RTC_Init+0x64>)
 80026d4:	f7ff ff01 	bl	80024da <LL_RTC_WAKEUP_SetClock>
  
  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 80026d8:	4803      	ldr	r0, [pc, #12]	@ (80026e8 <MX_RTC_Init+0x64>)
 80026da:	f7ff fee1 	bl	80024a0 <LL_RTC_EnableWriteProtection>
  /* USER CODE END RTC_Init 2 */

}
 80026de:	bf00      	nop
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	200001d4 	.word	0x200001d4
 80026e8:	40002800 	.word	0x40002800

080026ec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80026f0:	4b23      	ldr	r3, [pc, #140]	@ (8002780 <MX_USART1_UART_Init+0x94>)
 80026f2:	4a24      	ldr	r2, [pc, #144]	@ (8002784 <MX_USART1_UART_Init+0x98>)
 80026f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80026f6:	4b22      	ldr	r3, [pc, #136]	@ (8002780 <MX_USART1_UART_Init+0x94>)
 80026f8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80026fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80026fe:	4b20      	ldr	r3, [pc, #128]	@ (8002780 <MX_USART1_UART_Init+0x94>)
 8002700:	2200      	movs	r2, #0
 8002702:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002704:	4b1e      	ldr	r3, [pc, #120]	@ (8002780 <MX_USART1_UART_Init+0x94>)
 8002706:	2200      	movs	r2, #0
 8002708:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800270a:	4b1d      	ldr	r3, [pc, #116]	@ (8002780 <MX_USART1_UART_Init+0x94>)
 800270c:	2200      	movs	r2, #0
 800270e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002710:	4b1b      	ldr	r3, [pc, #108]	@ (8002780 <MX_USART1_UART_Init+0x94>)
 8002712:	220c      	movs	r2, #12
 8002714:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002716:	4b1a      	ldr	r3, [pc, #104]	@ (8002780 <MX_USART1_UART_Init+0x94>)
 8002718:	2200      	movs	r2, #0
 800271a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 800271c:	4b18      	ldr	r3, [pc, #96]	@ (8002780 <MX_USART1_UART_Init+0x94>)
 800271e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002722:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002724:	4b16      	ldr	r3, [pc, #88]	@ (8002780 <MX_USART1_UART_Init+0x94>)
 8002726:	2200      	movs	r2, #0
 8002728:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800272a:	4b15      	ldr	r3, [pc, #84]	@ (8002780 <MX_USART1_UART_Init+0x94>)
 800272c:	2200      	movs	r2, #0
 800272e:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002730:	4b13      	ldr	r3, [pc, #76]	@ (8002780 <MX_USART1_UART_Init+0x94>)
 8002732:	2200      	movs	r2, #0
 8002734:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002736:	4812      	ldr	r0, [pc, #72]	@ (8002780 <MX_USART1_UART_Init+0x94>)
 8002738:	f005 fab8 	bl	8007cac <HAL_UART_Init>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d001      	beq.n	8002746 <MX_USART1_UART_Init+0x5a>
  {
	Error_Handler();
 8002742:	f000 fa73 	bl	8002c2c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002746:	2100      	movs	r1, #0
 8002748:	480d      	ldr	r0, [pc, #52]	@ (8002780 <MX_USART1_UART_Init+0x94>)
 800274a:	f006 fc9c 	bl	8009086 <HAL_UARTEx_SetTxFifoThreshold>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d001      	beq.n	8002758 <MX_USART1_UART_Init+0x6c>
  {
	Error_Handler();
 8002754:	f000 fa6a 	bl	8002c2c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002758:	2100      	movs	r1, #0
 800275a:	4809      	ldr	r0, [pc, #36]	@ (8002780 <MX_USART1_UART_Init+0x94>)
 800275c:	f006 fcd1 	bl	8009102 <HAL_UARTEx_SetRxFifoThreshold>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d001      	beq.n	800276a <MX_USART1_UART_Init+0x7e>
  {
	Error_Handler();
 8002766:	f000 fa61 	bl	8002c2c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800276a:	4805      	ldr	r0, [pc, #20]	@ (8002780 <MX_USART1_UART_Init+0x94>)
 800276c:	f006 fc52 	bl	8009014 <HAL_UARTEx_DisableFifoMode>
 8002770:	4603      	mov	r3, r0
 8002772:	2b00      	cmp	r3, #0
 8002774:	d001      	beq.n	800277a <MX_USART1_UART_Init+0x8e>
  {
	Error_Handler();
 8002776:	f000 fa59 	bl	8002c2c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800277a:	bf00      	nop
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	200001f8 	.word	0x200001f8
 8002784:	40013800 	.word	0x40013800

08002788 <MX_I2C3_Init>:

// I2C3 initialization function
void MX_I2C3_Init(void)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	af00      	add	r7, sp, #0

	/* SPI1 clock enable */
	__HAL_RCC_I2C3_CLK_ENABLE();
 800278c:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8002790:	f7ff fe54 	bl	800243c <LL_APB1_GRP1_EnableClock>


	hi2c3.Instance = I2C3;
 8002794:	4b12      	ldr	r3, [pc, #72]	@ (80027e0 <MX_I2C3_Init+0x58>)
 8002796:	4a13      	ldr	r2, [pc, #76]	@ (80027e4 <MX_I2C3_Init+0x5c>)
 8002798:	601a      	str	r2, [r3, #0]
	  hi2c3.Init.Timing = 0x00707CBB;
 800279a:	4b11      	ldr	r3, [pc, #68]	@ (80027e0 <MX_I2C3_Init+0x58>)
 800279c:	4a12      	ldr	r2, [pc, #72]	@ (80027e8 <MX_I2C3_Init+0x60>)
 800279e:	605a      	str	r2, [r3, #4]
	  hi2c3.Init.OwnAddress1 = 0;
 80027a0:	4b0f      	ldr	r3, [pc, #60]	@ (80027e0 <MX_I2C3_Init+0x58>)
 80027a2:	2200      	movs	r2, #0
 80027a4:	609a      	str	r2, [r3, #8]
	  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80027a6:	4b0e      	ldr	r3, [pc, #56]	@ (80027e0 <MX_I2C3_Init+0x58>)
 80027a8:	2201      	movs	r2, #1
 80027aa:	60da      	str	r2, [r3, #12]
	  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80027ac:	4b0c      	ldr	r3, [pc, #48]	@ (80027e0 <MX_I2C3_Init+0x58>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	611a      	str	r2, [r3, #16]
	  hi2c3.Init.OwnAddress2 = 0;
 80027b2:	4b0b      	ldr	r3, [pc, #44]	@ (80027e0 <MX_I2C3_Init+0x58>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	615a      	str	r2, [r3, #20]
	  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80027b8:	4b09      	ldr	r3, [pc, #36]	@ (80027e0 <MX_I2C3_Init+0x58>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	619a      	str	r2, [r3, #24]
	  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80027be:	4b08      	ldr	r3, [pc, #32]	@ (80027e0 <MX_I2C3_Init+0x58>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	61da      	str	r2, [r3, #28]
	  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80027c4:	4b06      	ldr	r3, [pc, #24]	@ (80027e0 <MX_I2C3_Init+0x58>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	621a      	str	r2, [r3, #32]

    if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80027ca:	4805      	ldr	r0, [pc, #20]	@ (80027e0 <MX_I2C3_Init+0x58>)
 80027cc:	f001 fb8a 	bl	8003ee4 <HAL_I2C_Init>
 80027d0:	4603      	mov	r3, r0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d001      	beq.n	80027da <MX_I2C3_Init+0x52>
    {
        // Initialization error
        Error_Handler();
 80027d6:	f000 fa29 	bl	8002c2c <Error_Handler>
    }
}
 80027da:	bf00      	nop
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	20000350 	.word	0x20000350
 80027e4:	40005c00 	.word	0x40005c00
 80027e8:	00707cbb 	.word	0x00707cbb

080027ec <my_MX_SPI1_Init>:



// SPI1 initialization function
void my_MX_SPI1_Init(void)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	af00      	add	r7, sp, #0

	/* SPI1 clock enable */
	__HAL_RCC_SPI1_CLK_ENABLE();
 80027f0:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80027f4:	f7ff fe3b 	bl	800246e <LL_APB2_GRP1_EnableClock>


	  hspi1.Instance = SPI1;
 80027f8:	4b1b      	ldr	r3, [pc, #108]	@ (8002868 <my_MX_SPI1_Init+0x7c>)
 80027fa:	4a1c      	ldr	r2, [pc, #112]	@ (800286c <my_MX_SPI1_Init+0x80>)
 80027fc:	601a      	str	r2, [r3, #0]
	  hspi1.Init.Mode = SPI_MODE_MASTER;
 80027fe:	4b1a      	ldr	r3, [pc, #104]	@ (8002868 <my_MX_SPI1_Init+0x7c>)
 8002800:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002804:	605a      	str	r2, [r3, #4]
	  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002806:	4b18      	ldr	r3, [pc, #96]	@ (8002868 <my_MX_SPI1_Init+0x7c>)
 8002808:	2200      	movs	r2, #0
 800280a:	609a      	str	r2, [r3, #8]
	  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800280c:	4b16      	ldr	r3, [pc, #88]	@ (8002868 <my_MX_SPI1_Init+0x7c>)
 800280e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002812:	60da      	str	r2, [r3, #12]
	  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002814:	4b14      	ldr	r3, [pc, #80]	@ (8002868 <my_MX_SPI1_Init+0x7c>)
 8002816:	2200      	movs	r2, #0
 8002818:	611a      	str	r2, [r3, #16]
	  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800281a:	4b13      	ldr	r3, [pc, #76]	@ (8002868 <my_MX_SPI1_Init+0x7c>)
 800281c:	2201      	movs	r2, #1
 800281e:	615a      	str	r2, [r3, #20]
	  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002820:	4b11      	ldr	r3, [pc, #68]	@ (8002868 <my_MX_SPI1_Init+0x7c>)
 8002822:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002826:	619a      	str	r2, [r3, #24]
	  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002828:	4b0f      	ldr	r3, [pc, #60]	@ (8002868 <my_MX_SPI1_Init+0x7c>)
 800282a:	2218      	movs	r2, #24
 800282c:	61da      	str	r2, [r3, #28]
	  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800282e:	4b0e      	ldr	r3, [pc, #56]	@ (8002868 <my_MX_SPI1_Init+0x7c>)
 8002830:	2200      	movs	r2, #0
 8002832:	621a      	str	r2, [r3, #32]
	  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002834:	4b0c      	ldr	r3, [pc, #48]	@ (8002868 <my_MX_SPI1_Init+0x7c>)
 8002836:	2200      	movs	r2, #0
 8002838:	625a      	str	r2, [r3, #36]	@ 0x24
	  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800283a:	4b0b      	ldr	r3, [pc, #44]	@ (8002868 <my_MX_SPI1_Init+0x7c>)
 800283c:	2200      	movs	r2, #0
 800283e:	629a      	str	r2, [r3, #40]	@ 0x28
	  hspi1.Init.CRCPolynomial = 7;
 8002840:	4b09      	ldr	r3, [pc, #36]	@ (8002868 <my_MX_SPI1_Init+0x7c>)
 8002842:	2207      	movs	r2, #7
 8002844:	62da      	str	r2, [r3, #44]	@ 0x2c
	  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002846:	4b08      	ldr	r3, [pc, #32]	@ (8002868 <my_MX_SPI1_Init+0x7c>)
 8002848:	2200      	movs	r2, #0
 800284a:	631a      	str	r2, [r3, #48]	@ 0x30
	  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800284c:	4b06      	ldr	r3, [pc, #24]	@ (8002868 <my_MX_SPI1_Init+0x7c>)
 800284e:	2200      	movs	r2, #0
 8002850:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002852:	4805      	ldr	r0, [pc, #20]	@ (8002868 <my_MX_SPI1_Init+0x7c>)
 8002854:	f004 f864 	bl	8006920 <HAL_SPI_Init>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d001      	beq.n	8002862 <my_MX_SPI1_Init+0x76>
    {
        // Initialization error
        Error_Handler();
 800285e:	f000 f9e5 	bl	8002c2c <Error_Handler>
    }
}
 8002862:	bf00      	nop
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	200002ec 	.word	0x200002ec
 800286c:	40013000 	.word	0x40013000

08002870 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002874:	2004      	movs	r0, #4
 8002876:	f7ff fdaf 	bl	80023d8 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA2_CLK_ENABLE();
 800287a:	2002      	movs	r0, #2
 800287c:	f7ff fdac 	bl	80023d8 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 15, 0);
 8002880:	2200      	movs	r2, #0
 8002882:	210f      	movs	r1, #15
 8002884:	203a      	movs	r0, #58	@ 0x3a
 8002886:	f000 fdd8 	bl	800343a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 800288a:	203a      	movs	r0, #58	@ 0x3a
 800288c:	f000 fdef 	bl	800346e <HAL_NVIC_EnableIRQ>

}
 8002890:	bf00      	nop
 8002892:	bd80      	pop	{r7, pc}

08002894 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b086      	sub	sp, #24
 8002898:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800289a:	1d3b      	adds	r3, r7, #4
 800289c:	2200      	movs	r2, #0
 800289e:	601a      	str	r2, [r3, #0]
 80028a0:	605a      	str	r2, [r3, #4]
 80028a2:	609a      	str	r2, [r3, #8]
 80028a4:	60da      	str	r2, [r3, #12]
 80028a6:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028a8:	2001      	movs	r0, #1
 80028aa:	f7ff fdae 	bl	800240a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80028ae:	2004      	movs	r0, #4
 80028b0:	f7ff fdab 	bl	800240a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80028b4:	2002      	movs	r0, #2
 80028b6:	f7ff fda8 	bl	800240a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80028ba:	2008      	movs	r0, #8
 80028bc:	f7ff fda5 	bl	800240a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80028c0:	2010      	movs	r0, #16
 80028c2:	f7ff fda2 	bl	800240a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80028c6:	2080      	movs	r0, #128	@ 0x80
 80028c8:	f7ff fd9f 	bl	800240a <LL_AHB2_GRP1_EnableClock>


	/* Configure PC12 and PC13 as external interrupt inputs */
	/* Configure GPIO pins : PC12 and PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13;
 80028cc:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80028d0:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;  // Interrupt on falling edge
 80028d2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80028d6:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;           // No pull-up or pull-down resistors
 80028d8:	2300      	movs	r3, #0
 80028da:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028dc:	1d3b      	adds	r3, r7, #4
 80028de:	4619      	mov	r1, r3
 80028e0:	4862      	ldr	r0, [pc, #392]	@ (8002a6c <MX_GPIO_Init+0x1d8>)
 80028e2:	f001 f93b 	bl	8003b5c <HAL_GPIO_Init>

	/* Enable and set EXTI line interrupt priority */
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);   // Priority level 2
 80028e6:	2200      	movs	r2, #0
 80028e8:	2102      	movs	r1, #2
 80028ea:	2028      	movs	r0, #40	@ 0x28
 80028ec:	f000 fda5 	bl	800343a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);          // Enable the interrupt
 80028f0:	2028      	movs	r0, #40	@ 0x28
 80028f2:	f000 fdbc 	bl	800346e <HAL_NVIC_EnableIRQ>

	GPIO_InitStruct.Pin = LED_A_Pin;
 80028f6:	2301      	movs	r3, #1
 80028f8:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028fa:	2301      	movs	r3, #1
 80028fc:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028fe:	2300      	movs	r3, #0
 8002900:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002902:	2300      	movs	r3, #0
 8002904:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(LED_A_GPIO_Port, &GPIO_InitStruct);
 8002906:	1d3b      	adds	r3, r7, #4
 8002908:	4619      	mov	r1, r3
 800290a:	4859      	ldr	r0, [pc, #356]	@ (8002a70 <MX_GPIO_Init+0x1dc>)
 800290c:	f001 f926 	bl	8003b5c <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = LED_B_Pin;
 8002910:	2302      	movs	r3, #2
 8002912:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002914:	2301      	movs	r3, #1
 8002916:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002918:	2300      	movs	r3, #0
 800291a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800291c:	2300      	movs	r3, #0
 800291e:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(LED_B_GPIO_Port, &GPIO_InitStruct);
 8002920:	1d3b      	adds	r3, r7, #4
 8002922:	4619      	mov	r1, r3
 8002924:	4852      	ldr	r0, [pc, #328]	@ (8002a70 <MX_GPIO_Init+0x1dc>)
 8002926:	f001 f919 	bl	8003b5c <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = ADS1118_CS_Pin;
 800292a:	2340      	movs	r3, #64	@ 0x40
 800292c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800292e:	2301      	movs	r3, #1
 8002930:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002932:	2301      	movs	r3, #1
 8002934:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002936:	2302      	movs	r3, #2
 8002938:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(ADS1118_CS_GPIO_Port, &GPIO_InitStruct);
 800293a:	1d3b      	adds	r3, r7, #4
 800293c:	4619      	mov	r1, r3
 800293e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002942:	f001 f90b 	bl	8003b5c <HAL_GPIO_Init>

	// Configure GPIO pin for DRDY (interrupt from ADS1299)
	GPIO_InitStruct.Pin = ADS1299_nDRDY_Pin;
 8002946:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800294a:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;  // Interrupt on falling edge
 800294c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002950:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002952:	2300      	movs	r3, #0
 8002954:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(ADS1299_nDRDY_GPIO_Port, &GPIO_InitStruct);
 8002956:	1d3b      	adds	r3, r7, #4
 8002958:	4619      	mov	r1, r3
 800295a:	4844      	ldr	r0, [pc, #272]	@ (8002a6c <MX_GPIO_Init+0x1d8>)
 800295c:	f001 f8fe 	bl	8003b5c <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = ADS1299_CS_Pin;
 8002960:	2310      	movs	r3, #16
 8002962:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002964:	2301      	movs	r3, #1
 8002966:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002968:	2301      	movs	r3, #1
 800296a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800296c:	2302      	movs	r3, #2
 800296e:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(ADS1299_CS_GPIO_Port, &GPIO_InitStruct);
 8002970:	1d3b      	adds	r3, r7, #4
 8002972:	4619      	mov	r1, r3
 8002974:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002978:	f001 f8f0 	bl	8003b5c <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = ADS1299_nRESET_Pin|ADS1299_nPWDN_Pin;
 800297c:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8002980:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002982:	2301      	movs	r3, #1
 8002984:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002986:	2300      	movs	r3, #0
 8002988:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800298a:	2300      	movs	r3, #0
 800298c:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(ADS1299_nRESET_GPIO_Port, &GPIO_InitStruct);
 800298e:	1d3b      	adds	r3, r7, #4
 8002990:	4619      	mov	r1, r3
 8002992:	4836      	ldr	r0, [pc, #216]	@ (8002a6c <MX_GPIO_Init+0x1d8>)
 8002994:	f001 f8e2 	bl	8003b5c <HAL_GPIO_Init>

	/*Configure GPIO pins : PCPin PCPin PCPin */
	GPIO_InitStruct.Pin = ADS1299_START_Pin;
 8002998:	2340      	movs	r3, #64	@ 0x40
 800299a:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800299c:	2301      	movs	r3, #1
 800299e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80029a0:	2302      	movs	r3, #2
 80029a2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029a4:	2300      	movs	r3, #0
 80029a6:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(ADS1299_START_GPIO_Port, &GPIO_InitStruct);
 80029a8:	1d3b      	adds	r3, r7, #4
 80029aa:	4619      	mov	r1, r3
 80029ac:	482f      	ldr	r0, [pc, #188]	@ (8002a6c <MX_GPIO_Init+0x1d8>)
 80029ae:	f001 f8d5 	bl	8003b5c <HAL_GPIO_Init>

	/**SPI1 GPIO Configuration */
	GPIO_InitStruct.Pin = SPI1_SCLK_Pin|SPI1_MOSI_Pin;
 80029b2:	2382      	movs	r3, #130	@ 0x82
 80029b4:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029b6:	2302      	movs	r3, #2
 80029b8:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ba:	2300      	movs	r3, #0
 80029bc:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80029be:	2302      	movs	r3, #2
 80029c0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80029c2:	2305      	movs	r3, #5
 80029c4:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(SPI1_SCLK_GPIO_Port, &GPIO_InitStruct);
 80029c6:	1d3b      	adds	r3, r7, #4
 80029c8:	4619      	mov	r1, r3
 80029ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80029ce:	f001 f8c5 	bl	8003b5c <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = SPI1_MISO_Pin;
 80029d2:	2310      	movs	r3, #16
 80029d4:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029d6:	2302      	movs	r3, #2
 80029d8:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029da:	2300      	movs	r3, #0
 80029dc:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80029de:	2302      	movs	r3, #2
 80029e0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80029e2:	2305      	movs	r3, #5
 80029e4:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(SPI1_MISO_GPIO_Port, &GPIO_InitStruct);
 80029e6:	1d3b      	adds	r3, r7, #4
 80029e8:	4619      	mov	r1, r3
 80029ea:	4821      	ldr	r0, [pc, #132]	@ (8002a70 <MX_GPIO_Init+0x1dc>)
 80029ec:	f001 f8b6 	bl	8003b5c <HAL_GPIO_Init>

	/* Configure I2C3 SDA (PB11) and SCL (PB13) */
	GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_13;
 80029f0:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80029f4:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80029f6:	2312      	movs	r3, #18
 80029f8:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80029fa:	2301      	movs	r3, #1
 80029fc:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029fe:	2303      	movs	r3, #3
 8002a00:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002a02:	2304      	movs	r3, #4
 8002a04:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a06:	1d3b      	adds	r3, r7, #4
 8002a08:	4619      	mov	r1, r3
 8002a0a:	4819      	ldr	r0, [pc, #100]	@ (8002a70 <MX_GPIO_Init+0x1dc>)
 8002a0c:	f001 f8a6 	bl	8003b5c <HAL_GPIO_Init>

	HAL_GPIO_WritePin(ADS1299_CS_GPIO_Port, ADS1299_CS_Pin, GPIO_PIN_SET);
 8002a10:	2201      	movs	r2, #1
 8002a12:	2110      	movs	r1, #16
 8002a14:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002a18:	f001 fa10 	bl	8003e3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ADS1118_CS_GPIO_Port, ADS1118_CS_Pin, GPIO_PIN_SET);
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	2140      	movs	r1, #64	@ 0x40
 8002a20:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002a24:	f001 fa0a 	bl	8003e3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ADS1299_nRESET_GPIO_Port, ADS1299_nRESET_Pin|ADS1299_nPWDN_Pin, GPIO_PIN_RESET);
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 8002a2e:	480f      	ldr	r0, [pc, #60]	@ (8002a6c <MX_GPIO_Init+0x1d8>)
 8002a30:	f001 fa04 	bl	8003e3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ADS1299_START_GPIO_Port, ADS1299_START_Pin, GPIO_PIN_SET);
 8002a34:	2201      	movs	r2, #1
 8002a36:	2140      	movs	r1, #64	@ 0x40
 8002a38:	480c      	ldr	r0, [pc, #48]	@ (8002a6c <MX_GPIO_Init+0x1d8>)
 8002a3a:	f001 f9ff 	bl	8003e3c <HAL_GPIO_WritePin>

	/* Enable and set EXTI line interrupt priority */
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 2, 0);   // Priority level 2
 8002a3e:	2200      	movs	r2, #0
 8002a40:	2102      	movs	r1, #2
 8002a42:	2017      	movs	r0, #23
 8002a44:	f000 fcf9 	bl	800343a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);          // Enable the interrupt
 8002a48:	2017      	movs	r0, #23
 8002a4a:	f000 fd10 	bl	800346e <HAL_NVIC_EnableIRQ>

	HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_RESET);
 8002a4e:	2200      	movs	r2, #0
 8002a50:	2101      	movs	r1, #1
 8002a52:	4807      	ldr	r0, [pc, #28]	@ (8002a70 <MX_GPIO_Init+0x1dc>)
 8002a54:	f001 f9f2 	bl	8003e3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_RESET);
 8002a58:	2200      	movs	r2, #0
 8002a5a:	2102      	movs	r1, #2
 8002a5c:	4804      	ldr	r0, [pc, #16]	@ (8002a70 <MX_GPIO_Init+0x1dc>)
 8002a5e:	f001 f9ed 	bl	8003e3c <HAL_GPIO_WritePin>
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
#endif

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002a62:	bf00      	nop
 8002a64:	3718      	adds	r7, #24
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	48000800 	.word	0x48000800
 8002a70:	48000400 	.word	0x48000400

08002a74 <PeriphClock_Config>:



/* USER CODE BEGIN 4 */
void PeriphClock_Config(void)
{
 8002a74:	b480      	push	{r7}
 8002a76:	af00      	add	r7, sp, #0

	/* Start automatic synchronization */
	HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
#endif

	return;
 8002a78:	bf00      	nop
}
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr
	...

08002a84 <MX_TIM2_Init>:




static void MX_TIM2_Init(void)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	af00      	add	r7, sp, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a88:	2001      	movs	r0, #1
 8002a8a:	f7ff fcd7 	bl	800243c <LL_APB1_GRP1_EnableClock>

    htim2.Instance = TIM2;
 8002a8e:	4b1a      	ldr	r3, [pc, #104]	@ (8002af8 <MX_TIM2_Init+0x74>)
 8002a90:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002a94:	601a      	str	r2, [r3, #0]
    htim2.Init.Prescaler = (uint32_t)(HAL_RCC_GetPCLK1Freq() / 2000) - 1;
 8002a96:	f003 f909 	bl	8005cac <HAL_RCC_GetPCLK1Freq>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	4a17      	ldr	r2, [pc, #92]	@ (8002afc <MX_TIM2_Init+0x78>)
 8002a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002aa2:	09db      	lsrs	r3, r3, #7
 8002aa4:	3b01      	subs	r3, #1
 8002aa6:	4a14      	ldr	r2, [pc, #80]	@ (8002af8 <MX_TIM2_Init+0x74>)
 8002aa8:	6053      	str	r3, [r2, #4]
    htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002aaa:	4b13      	ldr	r3, [pc, #76]	@ (8002af8 <MX_TIM2_Init+0x74>)
 8002aac:	2200      	movs	r2, #0
 8002aae:	609a      	str	r2, [r3, #8]
    htim2.Init.Period = 500;
 8002ab0:	4b11      	ldr	r3, [pc, #68]	@ (8002af8 <MX_TIM2_Init+0x74>)
 8002ab2:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8002ab6:	60da      	str	r2, [r3, #12]
    htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ab8:	4b0f      	ldr	r3, [pc, #60]	@ (8002af8 <MX_TIM2_Init+0x74>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	611a      	str	r2, [r3, #16]
    htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002abe:	4b0e      	ldr	r3, [pc, #56]	@ (8002af8 <MX_TIM2_Init+0x74>)
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	619a      	str	r2, [r3, #24]

    if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002ac4:	480c      	ldr	r0, [pc, #48]	@ (8002af8 <MX_TIM2_Init+0x74>)
 8002ac6:	f004 fe63 	bl	8007790 <HAL_TIM_Base_Init>
 8002aca:	4603      	mov	r3, r0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d001      	beq.n	8002ad4 <MX_TIM2_Init+0x50>
    {
        Error_Handler(); // Handle initialization error
 8002ad0:	f000 f8ac 	bl	8002c2c <Error_Handler>
    }

    HAL_NVIC_SetPriority(TIM2_IRQn, 15, 0);
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	210f      	movs	r1, #15
 8002ad8:	201c      	movs	r0, #28
 8002ada:	f000 fcae 	bl	800343a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002ade:	201c      	movs	r0, #28
 8002ae0:	f000 fcc5 	bl	800346e <HAL_NVIC_EnableIRQ>

        // Start the timer interrupt
    if (HAL_TIM_Base_Start_IT(&htim2) != HAL_OK)
 8002ae4:	4804      	ldr	r0, [pc, #16]	@ (8002af8 <MX_TIM2_Init+0x74>)
 8002ae6:	f004 feb5 	bl	8007854 <HAL_TIM_Base_Start_IT>
 8002aea:	4603      	mov	r3, r0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d001      	beq.n	8002af4 <MX_TIM2_Init+0x70>
    {
        Error_Handler(); // Handle start error
 8002af0:	f000 f89c 	bl	8002c2c <Error_Handler>
    }
}
 8002af4:	bf00      	nop
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	200003a4 	.word	0x200003a4
 8002afc:	10624dd3 	.word	0x10624dd3

08002b00 <HAL_TIM_PeriodElapsedCallback>:



// Timer interrupt handler
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b082      	sub	sp, #8
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b10:	d12e      	bne.n	8002b70 <HAL_TIM_PeriodElapsedCallback+0x70>
    {
        led_counter += 1; // Each interrupt = 1ms (from timer settings)
 8002b12:	4b20      	ldr	r3, [pc, #128]	@ (8002b94 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	3301      	adds	r3, #1
 8002b18:	4a1e      	ldr	r2, [pc, #120]	@ (8002b94 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8002b1a:	6013      	str	r3, [r2, #0]

        if (is_connected())
 8002b1c:	f00a ffc0 	bl	800daa0 <is_connected>
 8002b20:	4603      	mov	r3, r0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d00b      	beq.n	8002b3e <HAL_TIM_PeriodElapsedCallback+0x3e>
        {
            // Force LED ON and reset state/counter
            HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_SET);
 8002b26:	2201      	movs	r2, #1
 8002b28:	2102      	movs	r1, #2
 8002b2a:	481b      	ldr	r0, [pc, #108]	@ (8002b98 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8002b2c:	f001 f986 	bl	8003e3c <HAL_GPIO_WritePin>
            led_state = GPIO_PIN_SET;
 8002b30:	4b1a      	ldr	r3, [pc, #104]	@ (8002b9c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8002b32:	2201      	movs	r2, #1
 8002b34:	701a      	strb	r2, [r3, #0]
            led_counter = 0;
 8002b36:	4b17      	ldr	r3, [pc, #92]	@ (8002b94 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	601a      	str	r2, [r3, #0]
    	}

    	//Trigger IMU

    }
}
 8002b3c:	e026      	b.n	8002b8c <HAL_TIM_PeriodElapsedCallback+0x8c>
            if (led_counter >= 1) // 2 seconds
 8002b3e:	4b15      	ldr	r3, [pc, #84]	@ (8002b94 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d022      	beq.n	8002b8c <HAL_TIM_PeriodElapsedCallback+0x8c>
                led_counter = 0;
 8002b46:	4b13      	ldr	r3, [pc, #76]	@ (8002b94 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8002b48:	2200      	movs	r2, #0
 8002b4a:	601a      	str	r2, [r3, #0]
                led_state = (led_state == GPIO_PIN_SET) ? GPIO_PIN_RESET : GPIO_PIN_SET;
 8002b4c:	4b13      	ldr	r3, [pc, #76]	@ (8002b9c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8002b4e:	781b      	ldrb	r3, [r3, #0]
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	bf14      	ite	ne
 8002b54:	2301      	movne	r3, #1
 8002b56:	2300      	moveq	r3, #0
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	4b0f      	ldr	r3, [pc, #60]	@ (8002b9c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8002b5e:	701a      	strb	r2, [r3, #0]
                HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, led_state);
 8002b60:	4b0e      	ldr	r3, [pc, #56]	@ (8002b9c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	461a      	mov	r2, r3
 8002b66:	2102      	movs	r1, #2
 8002b68:	480b      	ldr	r0, [pc, #44]	@ (8002b98 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8002b6a:	f001 f967 	bl	8003e3c <HAL_GPIO_WritePin>
}
 8002b6e:	e00d      	b.n	8002b8c <HAL_TIM_PeriodElapsedCallback+0x8c>
    else if (htim->Instance == TIM17){
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a0a      	ldr	r2, [pc, #40]	@ (8002ba0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d108      	bne.n	8002b8c <HAL_TIM_PeriodElapsedCallback+0x8c>
    	if(is_connected()){
 8002b7a:	f00a ff91 	bl	800daa0 <is_connected>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d003      	beq.n	8002b8c <HAL_TIM_PeriodElapsedCallback+0x8c>
    		UTIL_SEQ_SetTask( 1<<CFG_TASK_IMU_SAMPLE_ID, CFG_SCH_PRIO_0);
 8002b84:	2100      	movs	r1, #0
 8002b86:	2020      	movs	r0, #32
 8002b88:	f00b fb42 	bl	800e210 <UTIL_SEQ_SetTask>
}
 8002b8c:	bf00      	nop
 8002b8e:	3708      	adds	r7, #8
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	2000043c 	.word	0x2000043c
 8002b98:	48000400 	.word	0x48000400
 8002b9c:	20000440 	.word	0x20000440
 8002ba0:	40014800 	.word	0x40014800

08002ba4 <MX_TIM17_Init>:




void MX_TIM17_Init(void)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	af00      	add	r7, sp, #0
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002ba8:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8002bac:	f7ff fc5f 	bl	800246e <LL_APB2_GRP1_EnableClock>

    htim17.Instance = TIM17;
 8002bb0:	4b1b      	ldr	r3, [pc, #108]	@ (8002c20 <MX_TIM17_Init+0x7c>)
 8002bb2:	4a1c      	ldr	r2, [pc, #112]	@ (8002c24 <MX_TIM17_Init+0x80>)
 8002bb4:	601a      	str	r2, [r3, #0]
    htim17.Init.Prescaler = (uint32_t)(HAL_RCC_GetPCLK2Freq() / 1000) - 1;  // TIM17 is on APB2
 8002bb6:	f003 f88f 	bl	8005cd8 <HAL_RCC_GetPCLK2Freq>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	4a1a      	ldr	r2, [pc, #104]	@ (8002c28 <MX_TIM17_Init+0x84>)
 8002bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8002bc2:	099b      	lsrs	r3, r3, #6
 8002bc4:	3b01      	subs	r3, #1
 8002bc6:	4a16      	ldr	r2, [pc, #88]	@ (8002c20 <MX_TIM17_Init+0x7c>)
 8002bc8:	6053      	str	r3, [r2, #4]
    htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bca:	4b15      	ldr	r3, [pc, #84]	@ (8002c20 <MX_TIM17_Init+0x7c>)
 8002bcc:	2200      	movs	r2, #0
 8002bce:	609a      	str	r2, [r3, #8]
    htim17.Init.Period = 1000 - 1;
 8002bd0:	4b13      	ldr	r3, [pc, #76]	@ (8002c20 <MX_TIM17_Init+0x7c>)
 8002bd2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002bd6:	60da      	str	r2, [r3, #12]
    htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bd8:	4b11      	ldr	r3, [pc, #68]	@ (8002c20 <MX_TIM17_Init+0x7c>)
 8002bda:	2200      	movs	r2, #0
 8002bdc:	611a      	str	r2, [r3, #16]
    htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bde:	4b10      	ldr	r3, [pc, #64]	@ (8002c20 <MX_TIM17_Init+0x7c>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	619a      	str	r2, [r3, #24]
    htim17.Init.RepetitionCounter = 0;
 8002be4:	4b0e      	ldr	r3, [pc, #56]	@ (8002c20 <MX_TIM17_Init+0x7c>)
 8002be6:	2200      	movs	r2, #0
 8002be8:	615a      	str	r2, [r3, #20]

    if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8002bea:	480d      	ldr	r0, [pc, #52]	@ (8002c20 <MX_TIM17_Init+0x7c>)
 8002bec:	f004 fdd0 	bl	8007790 <HAL_TIM_Base_Init>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d001      	beq.n	8002bfa <MX_TIM17_Init+0x56>
    {
        Error_Handler();
 8002bf6:	f000 f819 	bl	8002c2c <Error_Handler>
    }

    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 5, 0);  // Different interrupt for TIM17
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	2105      	movs	r1, #5
 8002bfe:	201a      	movs	r0, #26
 8002c00:	f000 fc1b 	bl	800343a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8002c04:	201a      	movs	r0, #26
 8002c06:	f000 fc32 	bl	800346e <HAL_NVIC_EnableIRQ>

    if (HAL_TIM_Base_Start_IT(&htim17) != HAL_OK)
 8002c0a:	4805      	ldr	r0, [pc, #20]	@ (8002c20 <MX_TIM17_Init+0x7c>)
 8002c0c:	f004 fe22 	bl	8007854 <HAL_TIM_Base_Start_IT>
 8002c10:	4603      	mov	r3, r0
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d001      	beq.n	8002c1a <MX_TIM17_Init+0x76>
    {
        Error_Handler();
 8002c16:	f000 f809 	bl	8002c2c <Error_Handler>
    }
}
 8002c1a:	bf00      	nop
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	200003f0 	.word	0x200003f0
 8002c24:	40014800 	.word	0x40014800
 8002c28:	10624dd3 	.word	0x10624dd3

08002c2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002c30:	b672      	cpsid	i
}
 8002c32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002c34:	bf00      	nop
 8002c36:	e7fd      	b.n	8002c34 <Error_Handler+0x8>

08002c38 <LL_RCC_SetRTCClockSource>:
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_LSI
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_HSE_DIV32
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetRTCClockSource(uint32_t Source)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b083      	sub	sp, #12
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002c40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c48:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002c4c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	4313      	orrs	r3, r2
 8002c54:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8002c58:	bf00      	nop
 8002c5a:	370c      	adds	r7, #12
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr

08002c64 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8002c64:	b480      	push	{r7}
 8002c66:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8002c68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c70:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002c74:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002c78:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002c7c:	bf00      	nop
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr

08002c86 <LL_AHB2_GRP1_EnableClock>:
{
 8002c86:	b480      	push	{r7}
 8002c88:	b085      	sub	sp, #20
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002c8e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c92:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002c94:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002c9e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ca2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002caa:	68fb      	ldr	r3, [r7, #12]
}
 8002cac:	bf00      	nop
 8002cae:	3714      	adds	r7, #20
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr

08002cb8 <LL_AHB3_GRP1_EnableClock>:
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b085      	sub	sp, #20
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8002cc0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cc4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002cc6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8002cd0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cd4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4013      	ands	r3, r2
 8002cda:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
}
 8002cde:	bf00      	nop
 8002ce0:	3714      	adds	r7, #20
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr

08002cea <LL_APB1_GRP1_EnableClock>:
{
 8002cea:	b480      	push	{r7}
 8002cec:	b085      	sub	sp, #20
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002cf2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cf6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002cf8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002d02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d06:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
}
 8002d10:	bf00      	nop
 8002d12:	3714      	adds	r7, #20
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr

08002d1c <LL_APB2_GRP1_EnableClock>:
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b085      	sub	sp, #20
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002d24:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d28:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002d2a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4313      	orrs	r3, r2
 8002d32:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002d34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d38:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002d40:	68fb      	ldr	r3, [r7, #12]
}
 8002d42:	bf00      	nop
 8002d44:	3714      	adds	r7, #20
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr

08002d4e <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d4e:	b580      	push	{r7, lr}
 8002d50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8002d52:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002d56:	f7ff ffaf 	bl	8002cb8 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	2100      	movs	r1, #0
 8002d5e:	202e      	movs	r0, #46	@ 0x2e
 8002d60:	f000 fb6b 	bl	800343a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8002d64:	202e      	movs	r0, #46	@ 0x2e
 8002d66:	f000 fb82 	bl	800346e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d6a:	bf00      	nop
 8002d6c:	bd80      	pop	{r7, pc}
	...

08002d70 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b082      	sub	sp, #8
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a05      	ldr	r2, [pc, #20]	@ (8002d94 <HAL_IPCC_MspInit+0x24>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d103      	bne.n	8002d8a <HAL_IPCC_MspInit+0x1a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8002d82:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8002d86:	f7ff ff97 	bl	8002cb8 <LL_AHB3_GRP1_EnableClock>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 8002d8a:	bf00      	nop
 8002d8c:	3708      	adds	r7, #8
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop
 8002d94:	58000c00 	.word	0x58000c00

08002d98 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b096      	sub	sp, #88	@ 0x58
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002da0:	f107 0308 	add.w	r3, r7, #8
 8002da4:	2250      	movs	r2, #80	@ 0x50
 8002da6:	2100      	movs	r1, #0
 8002da8:	4618      	mov	r0, r3
 8002daa:	f00b fd5f 	bl	800e86c <memset>
  if(hrtc->Instance==RTC)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a14      	ldr	r2, [pc, #80]	@ (8002e04 <HAL_RTC_MspInit+0x6c>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d120      	bne.n	8002dfa <HAL_RTC_MspInit+0x62>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */
  HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8002db8:	f001 feb0 	bl	8004b1c <HAL_PWR_EnableBkUpAccess>

  /**
  *  Write twice the value to flush the APB-AHB bridge
  *  This bit shall be written in the register before writing the next one
  */
  HAL_PWR_EnableBkUpAccess();
 8002dbc:	f001 feae 	bl	8004b1c <HAL_PWR_EnableBkUpAccess>

  __HAL_RCC_RTC_CONFIG(RCC_RTCCLKSOURCE_LSE); /**< Select LSI as RTC Input */
 8002dc0:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8002dc4:	f7ff ff38 	bl	8002c38 <LL_RCC_SetRTCClockSource>
  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002dc8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002dcc:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002dce:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002dd2:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002dd4:	f107 0308 	add.w	r3, r7, #8
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f003 f9e4 	bl	80061a6 <HAL_RCCEx_PeriphCLKConfig>
 8002dde:	4603      	mov	r3, r0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d001      	beq.n	8002de8 <HAL_RTC_MspInit+0x50>
    {
      Error_Handler();
 8002de4:	f7ff ff22 	bl	8002c2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002de8:	f7ff ff3c 	bl	8002c64 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002dec:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8002df0:	f7ff ff7b 	bl	8002cea <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */
  HAL_RTCEx_EnableBypassShadow(hrtc);
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f003 fd5d 	bl	80068b4 <HAL_RTCEx_EnableBypassShadow>
  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002dfa:	bf00      	nop
 8002dfc:	3758      	adds	r7, #88	@ 0x58
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	40002800 	.word	0x40002800

08002e08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b09c      	sub	sp, #112	@ 0x70
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e10:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002e14:	2200      	movs	r2, #0
 8002e16:	601a      	str	r2, [r3, #0]
 8002e18:	605a      	str	r2, [r3, #4]
 8002e1a:	609a      	str	r2, [r3, #8]
 8002e1c:	60da      	str	r2, [r3, #12]
 8002e1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002e20:	f107 030c 	add.w	r3, r7, #12
 8002e24:	2250      	movs	r2, #80	@ 0x50
 8002e26:	2100      	movs	r1, #0
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f00b fd1f 	bl	800e86c <memset>
  if(huart->Instance==USART1)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a2e      	ldr	r2, [pc, #184]	@ (8002eec <HAL_UART_MspInit+0xe4>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d155      	bne.n	8002ee4 <HAL_UART_MspInit+0xdc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e40:	f107 030c 	add.w	r3, r7, #12
 8002e44:	4618      	mov	r0, r3
 8002e46:	f003 f9ae 	bl	80061a6 <HAL_RCCEx_PeriphCLKConfig>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d001      	beq.n	8002e54 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002e50:	f7ff feec 	bl	8002c2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002e54:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002e58:	f7ff ff60 	bl	8002d1c <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e5c:	2002      	movs	r0, #2
 8002e5e:	f7ff ff12 	bl	8002c86 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin|VCP_TX_Pin;
 8002e62:	23c0      	movs	r3, #192	@ 0xc0
 8002e64:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e66:	2302      	movs	r3, #2
 8002e68:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002e72:	2307      	movs	r3, #7
 8002e74:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e76:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002e7a:	4619      	mov	r1, r3
 8002e7c:	481c      	ldr	r0, [pc, #112]	@ (8002ef0 <HAL_UART_MspInit+0xe8>)
 8002e7e:	f000 fe6d 	bl	8003b5c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Channel4;
 8002e82:	4b1c      	ldr	r3, [pc, #112]	@ (8002ef4 <HAL_UART_MspInit+0xec>)
 8002e84:	4a1c      	ldr	r2, [pc, #112]	@ (8002ef8 <HAL_UART_MspInit+0xf0>)
 8002e86:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8002e88:	4b1a      	ldr	r3, [pc, #104]	@ (8002ef4 <HAL_UART_MspInit+0xec>)
 8002e8a:	220f      	movs	r2, #15
 8002e8c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002e8e:	4b19      	ldr	r3, [pc, #100]	@ (8002ef4 <HAL_UART_MspInit+0xec>)
 8002e90:	2210      	movs	r2, #16
 8002e92:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e94:	4b17      	ldr	r3, [pc, #92]	@ (8002ef4 <HAL_UART_MspInit+0xec>)
 8002e96:	2200      	movs	r2, #0
 8002e98:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002e9a:	4b16      	ldr	r3, [pc, #88]	@ (8002ef4 <HAL_UART_MspInit+0xec>)
 8002e9c:	2280      	movs	r2, #128	@ 0x80
 8002e9e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ea0:	4b14      	ldr	r3, [pc, #80]	@ (8002ef4 <HAL_UART_MspInit+0xec>)
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ea6:	4b13      	ldr	r3, [pc, #76]	@ (8002ef4 <HAL_UART_MspInit+0xec>)
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002eac:	4b11      	ldr	r3, [pc, #68]	@ (8002ef4 <HAL_UART_MspInit+0xec>)
 8002eae:	2200      	movs	r2, #0
 8002eb0:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002eb2:	4b10      	ldr	r3, [pc, #64]	@ (8002ef4 <HAL_UART_MspInit+0xec>)
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002eb8:	480e      	ldr	r0, [pc, #56]	@ (8002ef4 <HAL_UART_MspInit+0xec>)
 8002eba:	f000 fb1d 	bl	80034f8 <HAL_DMA_Init>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d001      	beq.n	8002ec8 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8002ec4:	f7ff feb2 	bl	8002c2c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	4a0a      	ldr	r2, [pc, #40]	@ (8002ef4 <HAL_UART_MspInit+0xec>)
 8002ecc:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002ece:	4a09      	ldr	r2, [pc, #36]	@ (8002ef4 <HAL_UART_MspInit+0xec>)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	2100      	movs	r1, #0
 8002ed8:	2024      	movs	r0, #36	@ 0x24
 8002eda:	f000 faae 	bl	800343a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002ede:	2024      	movs	r0, #36	@ 0x24
 8002ee0:	f000 fac5 	bl	800346e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002ee4:	bf00      	nop
 8002ee6:	3770      	adds	r7, #112	@ 0x70
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	40013800 	.word	0x40013800
 8002ef0:	48000400 	.word	0x48000400
 8002ef4:	2000028c 	.word	0x2000028c
 8002ef8:	40020444 	.word	0x40020444

08002efc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002efc:	b480      	push	{r7}
 8002efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002f00:	bf00      	nop
 8002f02:	e7fd      	b.n	8002f00 <NMI_Handler+0x4>

08002f04 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f04:	b480      	push	{r7}
 8002f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f08:	bf00      	nop
 8002f0a:	e7fd      	b.n	8002f08 <HardFault_Handler+0x4>

08002f0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f10:	bf00      	nop
 8002f12:	e7fd      	b.n	8002f10 <MemManage_Handler+0x4>

08002f14 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f14:	b480      	push	{r7}
 8002f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f18:	bf00      	nop
 8002f1a:	e7fd      	b.n	8002f18 <BusFault_Handler+0x4>

08002f1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f20:	bf00      	nop
 8002f22:	e7fd      	b.n	8002f20 <UsageFault_Handler+0x4>

08002f24 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f24:	b480      	push	{r7}
 8002f26:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002f28:	bf00      	nop
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr

08002f32 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f32:	b480      	push	{r7}
 8002f34:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f36:	bf00      	nop
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr

08002f40 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f40:	b480      	push	{r7}
 8002f42:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f44:	bf00      	nop
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr

08002f4e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f4e:	b580      	push	{r7, lr}
 8002f50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f52:	f000 f8ff 	bl	8003154 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f56:	bf00      	nop
 8002f58:	bd80      	pop	{r7, pc}
	...

08002f5c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002f60:	4802      	ldr	r0, [pc, #8]	@ (8002f6c <USART1_IRQHandler+0x10>)
 8002f62:	f004 ff73 	bl	8007e4c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002f66:	bf00      	nop
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	bf00      	nop
 8002f6c:	200001f8 	.word	0x200001f8

08002f70 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8002f74:	f000 ff92 	bl	8003e9c <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8002f78:	bf00      	nop
 8002f7a:	bd80      	pop	{r7, pc}

08002f7c <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002f80:	4802      	ldr	r0, [pc, #8]	@ (8002f8c <DMA2_Channel4_IRQHandler+0x10>)
 8002f82:	f000 fc9a 	bl	80038ba <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 8002f86:	bf00      	nop
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	bf00      	nop
 8002f8c:	2000028c 	.word	0x2000028c

08002f90 <IPCC_C1_RX_IRQHandler>:
/* USER CODE BEGIN 1 */
/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8002f94:	f00a fe9e 	bl	800dcd4 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8002f98:	bf00      	nop
 8002f9a:	bd80      	pop	{r7, pc}

08002f9c <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8002fa0:	f00a fece 	bl	800dd40 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8002fa4:	bf00      	nop
 8002fa6:	bd80      	pop	{r7, pc}

08002fa8 <EXTI15_10_IRQHandler>:
 *         interrupt request.
 * @param  None
 * @retval None
 */
void PUSH_BUTTON_SW_EXTI_IRQHandler(void)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8002fac:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8002fb0:	f000 ff5c 	bl	8003e6c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002fb4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002fb8:	f000 ff58 	bl	8003e6c <HAL_GPIO_EXTI_IRQHandler>
}
 8002fbc:	bf00      	nop
 8002fbe:	bd80      	pop	{r7, pc}

08002fc0 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(ADS1299_nDRDY_Pin);
 8002fc4:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8002fc8:	f000 ff50 	bl	8003e6c <HAL_GPIO_EXTI_IRQHandler>
}
 8002fcc:	bf00      	nop
 8002fce:	bd80      	pop	{r7, pc}

08002fd0 <RTC_WKUP_IRQHandler>:

void RTC_WKUP_IRQHandler(void)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	af00      	add	r7, sp, #0
  HAL_RTCEx_WakeUpTimerIRQHandler();
 8002fd4:	f7fe fdb2 	bl	8001b3c <HW_TS_RTC_Wakeup_Handler>
}
 8002fd8:	bf00      	nop
 8002fda:	bd80      	pop	{r7, pc}

08002fdc <TIM1_TRG_COM_TIM17_IRQHandler>:
  * @brief  This function handles TIM17 IRQ Handler.
  * @param  None
  * @retval None
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	af00      	add	r7, sp, #0
    HAL_TIM_IRQHandler(&htim17);
 8002fe0:	4802      	ldr	r0, [pc, #8]	@ (8002fec <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8002fe2:	f004 fc85 	bl	80078f0 <HAL_TIM_IRQHandler>
}
 8002fe6:	bf00      	nop
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	200003f0 	.word	0x200003f0

08002ff0 <TIM2_IRQHandler>:


void TIM2_IRQHandler(void)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	af00      	add	r7, sp, #0
    HAL_TIM_IRQHandler(&htim2);
 8002ff4:	4802      	ldr	r0, [pc, #8]	@ (8003000 <TIM2_IRQHandler+0x10>)
 8002ff6:	f004 fc7b 	bl	80078f0 <HAL_TIM_IRQHandler>
}
 8002ffa:	bf00      	nop
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	bf00      	nop
 8003000:	200003a4 	.word	0x200003a4

08003004 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003004:	b480      	push	{r7}
 8003006:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8003008:	4b07      	ldr	r3, [pc, #28]	@ (8003028 <SystemInit+0x24>)
 800300a:	2200      	movs	r2, #0
 800300c:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 800300e:	4b06      	ldr	r3, [pc, #24]	@ (8003028 <SystemInit+0x24>)
 8003010:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003014:	4a04      	ldr	r2, [pc, #16]	@ (8003028 <SystemInit+0x24>)
 8003016:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800301a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  RCC->CR &= 0xFFFBFFFFU;

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
#endif
}
 800301e:	bf00      	nop
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr
 8003028:	e000ed00 	.word	0xe000ed00

0800302c <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 800302c:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800302e:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003030:	3304      	adds	r3, #4

08003032 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003032:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003034:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8003036:	d3f9      	bcc.n	800302c <CopyDataInit>
  bx lr
 8003038:	4770      	bx	lr

0800303a <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800303a:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 800303c:	3004      	adds	r0, #4

0800303e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800303e:	4288      	cmp	r0, r1
  bcc FillZerobss
 8003040:	d3fb      	bcc.n	800303a <FillZerobss>
  bx lr
 8003042:	4770      	bx	lr

08003044 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003044:	480c      	ldr	r0, [pc, #48]	@ (8003078 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003046:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003048:	f7ff ffdc 	bl	8003004 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 800304c:	480b      	ldr	r0, [pc, #44]	@ (800307c <LoopForever+0x6>)
 800304e:	490c      	ldr	r1, [pc, #48]	@ (8003080 <LoopForever+0xa>)
 8003050:	4a0c      	ldr	r2, [pc, #48]	@ (8003084 <LoopForever+0xe>)
 8003052:	2300      	movs	r3, #0
 8003054:	f7ff ffed 	bl	8003032 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8003058:	480b      	ldr	r0, [pc, #44]	@ (8003088 <LoopForever+0x12>)
 800305a:	490c      	ldr	r1, [pc, #48]	@ (800308c <LoopForever+0x16>)
 800305c:	4a0c      	ldr	r2, [pc, #48]	@ (8003090 <LoopForever+0x1a>)
 800305e:	2300      	movs	r3, #0
 8003060:	f7ff ffe7 	bl	8003032 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8003064:	480b      	ldr	r0, [pc, #44]	@ (8003094 <LoopForever+0x1e>)
 8003066:	490c      	ldr	r1, [pc, #48]	@ (8003098 <LoopForever+0x22>)
 8003068:	2300      	movs	r3, #0
 800306a:	f7ff ffe8 	bl	800303e <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800306e:	f00b fc4b 	bl	800e908 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8003072:	f7ff fa45 	bl	8002500 <main>

08003076 <LoopForever>:

LoopForever:
  b LoopForever
 8003076:	e7fe      	b.n	8003076 <LoopForever>
  ldr   r0, =_estack
 8003078:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 800307c:	20000008 	.word	0x20000008
 8003080:	20000090 	.word	0x20000090
 8003084:	08010f28 	.word	0x08010f28
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8003088:	200301e4 	.word	0x200301e4
 800308c:	20030a67 	.word	0x20030a67
 8003090:	08010fe6 	.word	0x08010fe6
  INIT_BSS _sbss, _ebss
 8003094:	200000cc 	.word	0x200000cc
 8003098:	200023c8 	.word	0x200023c8

0800309c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800309c:	e7fe      	b.n	800309c <ADC1_IRQHandler>
	...

080030a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80030a6:	2300      	movs	r3, #0
 80030a8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80030aa:	4b0c      	ldr	r3, [pc, #48]	@ (80030dc <HAL_Init+0x3c>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a0b      	ldr	r2, [pc, #44]	@ (80030dc <HAL_Init+0x3c>)
 80030b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030b4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030b6:	2003      	movs	r0, #3
 80030b8:	f000 f9b4 	bl	8003424 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80030bc:	2000      	movs	r0, #0
 80030be:	f000 f80f 	bl	80030e0 <HAL_InitTick>
 80030c2:	4603      	mov	r3, r0
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d002      	beq.n	80030ce <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	71fb      	strb	r3, [r7, #7]
 80030cc:	e001      	b.n	80030d2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80030ce:	f7ff fe3e 	bl	8002d4e <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80030d2:	79fb      	ldrb	r3, [r7, #7]
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	3708      	adds	r7, #8
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}
 80030dc:	58004000 	.word	0x58004000

080030e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b084      	sub	sp, #16
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80030e8:	2300      	movs	r3, #0
 80030ea:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80030ec:	4b17      	ldr	r3, [pc, #92]	@ (800314c <HAL_InitTick+0x6c>)
 80030ee:	781b      	ldrb	r3, [r3, #0]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d024      	beq.n	800313e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80030f4:	f002 fdc6 	bl	8005c84 <HAL_RCC_GetHCLKFreq>
 80030f8:	4602      	mov	r2, r0
 80030fa:	4b14      	ldr	r3, [pc, #80]	@ (800314c <HAL_InitTick+0x6c>)
 80030fc:	781b      	ldrb	r3, [r3, #0]
 80030fe:	4619      	mov	r1, r3
 8003100:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003104:	fbb3 f3f1 	udiv	r3, r3, r1
 8003108:	fbb2 f3f3 	udiv	r3, r2, r3
 800310c:	4618      	mov	r0, r3
 800310e:	f000 f9ca 	bl	80034a6 <HAL_SYSTICK_Config>
 8003112:	4603      	mov	r3, r0
 8003114:	2b00      	cmp	r3, #0
 8003116:	d10f      	bne.n	8003138 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2b0f      	cmp	r3, #15
 800311c:	d809      	bhi.n	8003132 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800311e:	2200      	movs	r2, #0
 8003120:	6879      	ldr	r1, [r7, #4]
 8003122:	f04f 30ff 	mov.w	r0, #4294967295
 8003126:	f000 f988 	bl	800343a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800312a:	4a09      	ldr	r2, [pc, #36]	@ (8003150 <HAL_InitTick+0x70>)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6013      	str	r3, [r2, #0]
 8003130:	e007      	b.n	8003142 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	73fb      	strb	r3, [r7, #15]
 8003136:	e004      	b.n	8003142 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	73fb      	strb	r3, [r7, #15]
 800313c:	e001      	b.n	8003142 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003142:	7bfb      	ldrb	r3, [r7, #15]
}
 8003144:	4618      	mov	r0, r3
 8003146:	3710      	adds	r7, #16
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}
 800314c:	20000010 	.word	0x20000010
 8003150:	2000000c 	.word	0x2000000c

08003154 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003154:	b480      	push	{r7}
 8003156:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003158:	4b06      	ldr	r3, [pc, #24]	@ (8003174 <HAL_IncTick+0x20>)
 800315a:	781b      	ldrb	r3, [r3, #0]
 800315c:	461a      	mov	r2, r3
 800315e:	4b06      	ldr	r3, [pc, #24]	@ (8003178 <HAL_IncTick+0x24>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4413      	add	r3, r2
 8003164:	4a04      	ldr	r2, [pc, #16]	@ (8003178 <HAL_IncTick+0x24>)
 8003166:	6013      	str	r3, [r2, #0]
}
 8003168:	bf00      	nop
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr
 8003172:	bf00      	nop
 8003174:	20000010 	.word	0x20000010
 8003178:	20000444 	.word	0x20000444

0800317c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800317c:	b480      	push	{r7}
 800317e:	af00      	add	r7, sp, #0
  return uwTick;
 8003180:	4b03      	ldr	r3, [pc, #12]	@ (8003190 <HAL_GetTick+0x14>)
 8003182:	681b      	ldr	r3, [r3, #0]
}
 8003184:	4618      	mov	r0, r3
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr
 800318e:	bf00      	nop
 8003190:	20000444 	.word	0x20000444

08003194 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8003194:	b480      	push	{r7}
 8003196:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8003198:	4b03      	ldr	r3, [pc, #12]	@ (80031a8 <HAL_GetTickPrio+0x14>)
 800319a:	681b      	ldr	r3, [r3, #0]
}
 800319c:	4618      	mov	r0, r3
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr
 80031a6:	bf00      	nop
 80031a8:	2000000c 	.word	0x2000000c

080031ac <HAL_GetTickFreq>:
  * @brief Return tick frequency.
  * @retval Tick frequency.
  *         Value of @ref HAL_TickFreqTypeDef.
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 80031ac:	b480      	push	{r7}
 80031ae:	af00      	add	r7, sp, #0
  return uwTickFreq;
 80031b0:	4b03      	ldr	r3, [pc, #12]	@ (80031c0 <HAL_GetTickFreq+0x14>)
 80031b2:	781b      	ldrb	r3, [r3, #0]
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	46bd      	mov	sp, r7
 80031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031bc:	4770      	bx	lr
 80031be:	bf00      	nop
 80031c0:	20000010 	.word	0x20000010

080031c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b085      	sub	sp, #20
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	f003 0307 	and.w	r3, r3, #7
 80031d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031d4:	4b0c      	ldr	r3, [pc, #48]	@ (8003208 <__NVIC_SetPriorityGrouping+0x44>)
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031da:	68ba      	ldr	r2, [r7, #8]
 80031dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80031e0:	4013      	ands	r3, r2
 80031e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80031f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80031f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031f6:	4a04      	ldr	r2, [pc, #16]	@ (8003208 <__NVIC_SetPriorityGrouping+0x44>)
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	60d3      	str	r3, [r2, #12]
}
 80031fc:	bf00      	nop
 80031fe:	3714      	adds	r7, #20
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr
 8003208:	e000ed00 	.word	0xe000ed00

0800320c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800320c:	b480      	push	{r7}
 800320e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003210:	4b04      	ldr	r3, [pc, #16]	@ (8003224 <__NVIC_GetPriorityGrouping+0x18>)
 8003212:	68db      	ldr	r3, [r3, #12]
 8003214:	0a1b      	lsrs	r3, r3, #8
 8003216:	f003 0307 	and.w	r3, r3, #7
}
 800321a:	4618      	mov	r0, r3
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr
 8003224:	e000ed00 	.word	0xe000ed00

08003228 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003228:	b480      	push	{r7}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
 800322e:	4603      	mov	r3, r0
 8003230:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003236:	2b00      	cmp	r3, #0
 8003238:	db0b      	blt.n	8003252 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800323a:	79fb      	ldrb	r3, [r7, #7]
 800323c:	f003 021f 	and.w	r2, r3, #31
 8003240:	4907      	ldr	r1, [pc, #28]	@ (8003260 <__NVIC_EnableIRQ+0x38>)
 8003242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003246:	095b      	lsrs	r3, r3, #5
 8003248:	2001      	movs	r0, #1
 800324a:	fa00 f202 	lsl.w	r2, r0, r2
 800324e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003252:	bf00      	nop
 8003254:	370c      	adds	r7, #12
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr
 800325e:	bf00      	nop
 8003260:	e000e100 	.word	0xe000e100

08003264 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003264:	b480      	push	{r7}
 8003266:	b083      	sub	sp, #12
 8003268:	af00      	add	r7, sp, #0
 800326a:	4603      	mov	r3, r0
 800326c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800326e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003272:	2b00      	cmp	r3, #0
 8003274:	db12      	blt.n	800329c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003276:	79fb      	ldrb	r3, [r7, #7]
 8003278:	f003 021f 	and.w	r2, r3, #31
 800327c:	490a      	ldr	r1, [pc, #40]	@ (80032a8 <__NVIC_DisableIRQ+0x44>)
 800327e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003282:	095b      	lsrs	r3, r3, #5
 8003284:	2001      	movs	r0, #1
 8003286:	fa00 f202 	lsl.w	r2, r0, r2
 800328a:	3320      	adds	r3, #32
 800328c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003290:	f3bf 8f4f 	dsb	sy
}
 8003294:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003296:	f3bf 8f6f 	isb	sy
}
 800329a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800329c:	bf00      	nop
 800329e:	370c      	adds	r7, #12
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr
 80032a8:	e000e100 	.word	0xe000e100

080032ac <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b083      	sub	sp, #12
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	4603      	mov	r3, r0
 80032b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	db0c      	blt.n	80032d8 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032be:	79fb      	ldrb	r3, [r7, #7]
 80032c0:	f003 021f 	and.w	r2, r3, #31
 80032c4:	4907      	ldr	r1, [pc, #28]	@ (80032e4 <__NVIC_SetPendingIRQ+0x38>)
 80032c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ca:	095b      	lsrs	r3, r3, #5
 80032cc:	2001      	movs	r0, #1
 80032ce:	fa00 f202 	lsl.w	r2, r0, r2
 80032d2:	3340      	adds	r3, #64	@ 0x40
 80032d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80032d8:	bf00      	nop
 80032da:	370c      	adds	r7, #12
 80032dc:	46bd      	mov	sp, r7
 80032de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e2:	4770      	bx	lr
 80032e4:	e000e100 	.word	0xe000e100

080032e8 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b083      	sub	sp, #12
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	4603      	mov	r3, r0
 80032f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	db0c      	blt.n	8003314 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032fa:	79fb      	ldrb	r3, [r7, #7]
 80032fc:	f003 021f 	and.w	r2, r3, #31
 8003300:	4907      	ldr	r1, [pc, #28]	@ (8003320 <__NVIC_ClearPendingIRQ+0x38>)
 8003302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003306:	095b      	lsrs	r3, r3, #5
 8003308:	2001      	movs	r0, #1
 800330a:	fa00 f202 	lsl.w	r2, r0, r2
 800330e:	3360      	adds	r3, #96	@ 0x60
 8003310:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003314:	bf00      	nop
 8003316:	370c      	adds	r7, #12
 8003318:	46bd      	mov	sp, r7
 800331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331e:	4770      	bx	lr
 8003320:	e000e100 	.word	0xe000e100

08003324 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003324:	b480      	push	{r7}
 8003326:	b083      	sub	sp, #12
 8003328:	af00      	add	r7, sp, #0
 800332a:	4603      	mov	r3, r0
 800332c:	6039      	str	r1, [r7, #0]
 800332e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003330:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003334:	2b00      	cmp	r3, #0
 8003336:	db0a      	blt.n	800334e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	b2da      	uxtb	r2, r3
 800333c:	490c      	ldr	r1, [pc, #48]	@ (8003370 <__NVIC_SetPriority+0x4c>)
 800333e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003342:	0112      	lsls	r2, r2, #4
 8003344:	b2d2      	uxtb	r2, r2
 8003346:	440b      	add	r3, r1
 8003348:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800334c:	e00a      	b.n	8003364 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	b2da      	uxtb	r2, r3
 8003352:	4908      	ldr	r1, [pc, #32]	@ (8003374 <__NVIC_SetPriority+0x50>)
 8003354:	79fb      	ldrb	r3, [r7, #7]
 8003356:	f003 030f 	and.w	r3, r3, #15
 800335a:	3b04      	subs	r3, #4
 800335c:	0112      	lsls	r2, r2, #4
 800335e:	b2d2      	uxtb	r2, r2
 8003360:	440b      	add	r3, r1
 8003362:	761a      	strb	r2, [r3, #24]
}
 8003364:	bf00      	nop
 8003366:	370c      	adds	r7, #12
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr
 8003370:	e000e100 	.word	0xe000e100
 8003374:	e000ed00 	.word	0xe000ed00

08003378 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003378:	b480      	push	{r7}
 800337a:	b089      	sub	sp, #36	@ 0x24
 800337c:	af00      	add	r7, sp, #0
 800337e:	60f8      	str	r0, [r7, #12]
 8003380:	60b9      	str	r1, [r7, #8]
 8003382:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	f003 0307 	and.w	r3, r3, #7
 800338a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800338c:	69fb      	ldr	r3, [r7, #28]
 800338e:	f1c3 0307 	rsb	r3, r3, #7
 8003392:	2b04      	cmp	r3, #4
 8003394:	bf28      	it	cs
 8003396:	2304      	movcs	r3, #4
 8003398:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	3304      	adds	r3, #4
 800339e:	2b06      	cmp	r3, #6
 80033a0:	d902      	bls.n	80033a8 <NVIC_EncodePriority+0x30>
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	3b03      	subs	r3, #3
 80033a6:	e000      	b.n	80033aa <NVIC_EncodePriority+0x32>
 80033a8:	2300      	movs	r3, #0
 80033aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033ac:	f04f 32ff 	mov.w	r2, #4294967295
 80033b0:	69bb      	ldr	r3, [r7, #24]
 80033b2:	fa02 f303 	lsl.w	r3, r2, r3
 80033b6:	43da      	mvns	r2, r3
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	401a      	ands	r2, r3
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033c0:	f04f 31ff 	mov.w	r1, #4294967295
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	fa01 f303 	lsl.w	r3, r1, r3
 80033ca:	43d9      	mvns	r1, r3
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033d0:	4313      	orrs	r3, r2
         );
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3724      	adds	r7, #36	@ 0x24
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr
	...

080033e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b082      	sub	sp, #8
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	3b01      	subs	r3, #1
 80033ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80033f0:	d301      	bcc.n	80033f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80033f2:	2301      	movs	r3, #1
 80033f4:	e00f      	b.n	8003416 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80033f6:	4a0a      	ldr	r2, [pc, #40]	@ (8003420 <SysTick_Config+0x40>)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	3b01      	subs	r3, #1
 80033fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80033fe:	210f      	movs	r1, #15
 8003400:	f04f 30ff 	mov.w	r0, #4294967295
 8003404:	f7ff ff8e 	bl	8003324 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003408:	4b05      	ldr	r3, [pc, #20]	@ (8003420 <SysTick_Config+0x40>)
 800340a:	2200      	movs	r2, #0
 800340c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800340e:	4b04      	ldr	r3, [pc, #16]	@ (8003420 <SysTick_Config+0x40>)
 8003410:	2207      	movs	r2, #7
 8003412:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003414:	2300      	movs	r3, #0
}
 8003416:	4618      	mov	r0, r3
 8003418:	3708      	adds	r7, #8
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
 800341e:	bf00      	nop
 8003420:	e000e010 	.word	0xe000e010

08003424 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b082      	sub	sp, #8
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800342c:	6878      	ldr	r0, [r7, #4]
 800342e:	f7ff fec9 	bl	80031c4 <__NVIC_SetPriorityGrouping>
}
 8003432:	bf00      	nop
 8003434:	3708      	adds	r7, #8
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}

0800343a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800343a:	b580      	push	{r7, lr}
 800343c:	b086      	sub	sp, #24
 800343e:	af00      	add	r7, sp, #0
 8003440:	4603      	mov	r3, r0
 8003442:	60b9      	str	r1, [r7, #8]
 8003444:	607a      	str	r2, [r7, #4]
 8003446:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003448:	f7ff fee0 	bl	800320c <__NVIC_GetPriorityGrouping>
 800344c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	68b9      	ldr	r1, [r7, #8]
 8003452:	6978      	ldr	r0, [r7, #20]
 8003454:	f7ff ff90 	bl	8003378 <NVIC_EncodePriority>
 8003458:	4602      	mov	r2, r0
 800345a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800345e:	4611      	mov	r1, r2
 8003460:	4618      	mov	r0, r3
 8003462:	f7ff ff5f 	bl	8003324 <__NVIC_SetPriority>
}
 8003466:	bf00      	nop
 8003468:	3718      	adds	r7, #24
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}

0800346e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800346e:	b580      	push	{r7, lr}
 8003470:	b082      	sub	sp, #8
 8003472:	af00      	add	r7, sp, #0
 8003474:	4603      	mov	r3, r0
 8003476:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003478:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800347c:	4618      	mov	r0, r3
 800347e:	f7ff fed3 	bl	8003228 <__NVIC_EnableIRQ>
}
 8003482:	bf00      	nop
 8003484:	3708      	adds	r7, #8
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}

0800348a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800348a:	b580      	push	{r7, lr}
 800348c:	b082      	sub	sp, #8
 800348e:	af00      	add	r7, sp, #0
 8003490:	4603      	mov	r3, r0
 8003492:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003494:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003498:	4618      	mov	r0, r3
 800349a:	f7ff fee3 	bl	8003264 <__NVIC_DisableIRQ>
}
 800349e:	bf00      	nop
 80034a0:	3708      	adds	r7, #8
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}

080034a6 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034a6:	b580      	push	{r7, lr}
 80034a8:	b082      	sub	sp, #8
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f7ff ff96 	bl	80033e0 <SysTick_Config>
 80034b4:	4603      	mov	r3, r0
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3708      	adds	r7, #8
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}

080034be <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80034be:	b580      	push	{r7, lr}
 80034c0:	b082      	sub	sp, #8
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	4603      	mov	r3, r0
 80034c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 80034c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034cc:	4618      	mov	r0, r3
 80034ce:	f7ff feed 	bl	80032ac <__NVIC_SetPendingIRQ>
}
 80034d2:	bf00      	nop
 80034d4:	3708      	adds	r7, #8
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}

080034da <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80034da:	b580      	push	{r7, lr}
 80034dc:	b082      	sub	sp, #8
 80034de:	af00      	add	r7, sp, #0
 80034e0:	4603      	mov	r3, r0
 80034e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80034e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034e8:	4618      	mov	r0, r3
 80034ea:	f7ff fefd 	bl	80032e8 <__NVIC_ClearPendingIRQ>
}
 80034ee:	bf00      	nop
 80034f0:	3708      	adds	r7, #8
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
	...

080034f8 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b084      	sub	sp, #16
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d101      	bne.n	800350a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e08e      	b.n	8003628 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	461a      	mov	r2, r3
 8003510:	4b47      	ldr	r3, [pc, #284]	@ (8003630 <HAL_DMA_Init+0x138>)
 8003512:	429a      	cmp	r2, r3
 8003514:	d80f      	bhi.n	8003536 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	461a      	mov	r2, r3
 800351c:	4b45      	ldr	r3, [pc, #276]	@ (8003634 <HAL_DMA_Init+0x13c>)
 800351e:	4413      	add	r3, r2
 8003520:	4a45      	ldr	r2, [pc, #276]	@ (8003638 <HAL_DMA_Init+0x140>)
 8003522:	fba2 2303 	umull	r2, r3, r2, r3
 8003526:	091b      	lsrs	r3, r3, #4
 8003528:	009a      	lsls	r2, r3, #2
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4a42      	ldr	r2, [pc, #264]	@ (800363c <HAL_DMA_Init+0x144>)
 8003532:	641a      	str	r2, [r3, #64]	@ 0x40
 8003534:	e00e      	b.n	8003554 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	461a      	mov	r2, r3
 800353c:	4b40      	ldr	r3, [pc, #256]	@ (8003640 <HAL_DMA_Init+0x148>)
 800353e:	4413      	add	r3, r2
 8003540:	4a3d      	ldr	r2, [pc, #244]	@ (8003638 <HAL_DMA_Init+0x140>)
 8003542:	fba2 2303 	umull	r2, r3, r2, r3
 8003546:	091b      	lsrs	r3, r3, #4
 8003548:	009a      	lsls	r2, r3, #2
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4a3c      	ldr	r2, [pc, #240]	@ (8003644 <HAL_DMA_Init+0x14c>)
 8003552:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2202      	movs	r2, #2
 8003558:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800356a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800356e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003578:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	691b      	ldr	r3, [r3, #16]
 800357e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003584:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	699b      	ldr	r3, [r3, #24]
 800358a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003590:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6a1b      	ldr	r3, [r3, #32]
 8003596:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003598:	68fa      	ldr	r2, [r7, #12]
 800359a:	4313      	orrs	r3, r2
 800359c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	68fa      	ldr	r2, [r7, #12]
 80035a4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f000 fa74 	bl	8003a94 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80035b4:	d102      	bne.n	80035bc <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2200      	movs	r2, #0
 80035ba:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	685a      	ldr	r2, [r3, #4]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035c4:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80035c8:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035ce:	687a      	ldr	r2, [r7, #4]
 80035d0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80035d2:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d010      	beq.n	80035fe <HAL_DMA_Init+0x106>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	2b04      	cmp	r3, #4
 80035e2:	d80c      	bhi.n	80035fe <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	f000 fa93 	bl	8003b10 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035ee:	2200      	movs	r2, #0
 80035f0:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80035fa:	605a      	str	r2, [r3, #4]
 80035fc:	e008      	b.n	8003610 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2200      	movs	r2, #0
 8003602:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2200      	movs	r2, #0
 8003608:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2200      	movs	r2, #0
 800360e:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2200      	movs	r2, #0
 8003614:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2201      	movs	r2, #1
 800361a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2200      	movs	r2, #0
 8003622:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003626:	2300      	movs	r3, #0
}
 8003628:	4618      	mov	r0, r3
 800362a:	3710      	adds	r7, #16
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}
 8003630:	40020407 	.word	0x40020407
 8003634:	bffdfff8 	.word	0xbffdfff8
 8003638:	cccccccd 	.word	0xcccccccd
 800363c:	40020000 	.word	0x40020000
 8003640:	bffdfbf8 	.word	0xbffdfbf8
 8003644:	40020400 	.word	0x40020400

08003648 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b086      	sub	sp, #24
 800364c:	af00      	add	r7, sp, #0
 800364e:	60f8      	str	r0, [r7, #12]
 8003650:	60b9      	str	r1, [r7, #8]
 8003652:	607a      	str	r2, [r7, #4]
 8003654:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003656:	2300      	movs	r3, #0
 8003658:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003660:	2b01      	cmp	r3, #1
 8003662:	d101      	bne.n	8003668 <HAL_DMA_Start_IT+0x20>
 8003664:	2302      	movs	r3, #2
 8003666:	e066      	b.n	8003736 <HAL_DMA_Start_IT+0xee>
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2201      	movs	r2, #1
 800366c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003676:	b2db      	uxtb	r3, r3
 8003678:	2b01      	cmp	r3, #1
 800367a:	d155      	bne.n	8003728 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2202      	movs	r2, #2
 8003680:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2200      	movs	r2, #0
 8003688:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f022 0201 	bic.w	r2, r2, #1
 8003698:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	687a      	ldr	r2, [r7, #4]
 800369e:	68b9      	ldr	r1, [r7, #8]
 80036a0:	68f8      	ldr	r0, [r7, #12]
 80036a2:	f000 f9b9 	bl	8003a18 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d008      	beq.n	80036c0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f042 020e 	orr.w	r2, r2, #14
 80036bc:	601a      	str	r2, [r3, #0]
 80036be:	e00f      	b.n	80036e0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f022 0204 	bic.w	r2, r2, #4
 80036ce:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f042 020a 	orr.w	r2, r2, #10
 80036de:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d007      	beq.n	80036fe <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036f8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80036fc:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003702:	2b00      	cmp	r3, #0
 8003704:	d007      	beq.n	8003716 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003710:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003714:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f042 0201 	orr.w	r2, r2, #1
 8003724:	601a      	str	r2, [r3, #0]
 8003726:	e005      	b.n	8003734 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2200      	movs	r2, #0
 800372c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003730:	2302      	movs	r3, #2
 8003732:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003734:	7dfb      	ldrb	r3, [r7, #23]
}
 8003736:	4618      	mov	r0, r3
 8003738:	3718      	adds	r7, #24
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}

0800373e <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800373e:	b480      	push	{r7}
 8003740:	b083      	sub	sp, #12
 8003742:	af00      	add	r7, sp, #0
 8003744:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d101      	bne.n	8003750 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	e04f      	b.n	80037f0 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003756:	b2db      	uxtb	r3, r3
 8003758:	2b02      	cmp	r3, #2
 800375a:	d008      	beq.n	800376e <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2204      	movs	r2, #4
 8003760:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2200      	movs	r2, #0
 8003766:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e040      	b.n	80037f0 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f022 020e 	bic.w	r2, r2, #14
 800377c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003788:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800378c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f022 0201 	bic.w	r2, r2, #1
 800379c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037a2:	f003 021c 	and.w	r2, r3, #28
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037aa:	2101      	movs	r1, #1
 80037ac:	fa01 f202 	lsl.w	r2, r1, r2
 80037b0:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80037ba:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d00c      	beq.n	80037de <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037ce:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80037d2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037d8:	687a      	ldr	r2, [r7, #4]
 80037da:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80037dc:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2201      	movs	r2, #1
 80037e2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2200      	movs	r2, #0
 80037ea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 80037ee:	2300      	movs	r3, #0
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	370c      	adds	r7, #12
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr

080037fc <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b084      	sub	sp, #16
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003804:	2300      	movs	r3, #0
 8003806:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800380e:	b2db      	uxtb	r3, r3
 8003810:	2b02      	cmp	r3, #2
 8003812:	d005      	beq.n	8003820 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2204      	movs	r2, #4
 8003818:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	73fb      	strb	r3, [r7, #15]
 800381e:	e047      	b.n	80038b0 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f022 020e 	bic.w	r2, r2, #14
 800382e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f022 0201 	bic.w	r2, r2, #1
 800383e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800384a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800384e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003854:	f003 021c 	and.w	r2, r3, #28
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800385c:	2101      	movs	r1, #1
 800385e:	fa01 f202 	lsl.w	r2, r1, r2
 8003862:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003868:	687a      	ldr	r2, [r7, #4]
 800386a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800386c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003872:	2b00      	cmp	r3, #0
 8003874:	d00c      	beq.n	8003890 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003880:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003884:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800388a:	687a      	ldr	r2, [r7, #4]
 800388c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800388e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2201      	movs	r2, #1
 8003894:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2200      	movs	r2, #0
 800389c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d003      	beq.n	80038b0 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	4798      	blx	r3
    }
  }
  return status;
 80038b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3710      	adds	r7, #16
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}

080038ba <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80038ba:	b580      	push	{r7, lr}
 80038bc:	b084      	sub	sp, #16
 80038be:	af00      	add	r7, sp, #0
 80038c0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038d6:	f003 031c 	and.w	r3, r3, #28
 80038da:	2204      	movs	r2, #4
 80038dc:	409a      	lsls	r2, r3
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	4013      	ands	r3, r2
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d026      	beq.n	8003934 <HAL_DMA_IRQHandler+0x7a>
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	f003 0304 	and.w	r3, r3, #4
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d021      	beq.n	8003934 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 0320 	and.w	r3, r3, #32
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d107      	bne.n	800390e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f022 0204 	bic.w	r2, r2, #4
 800390c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003912:	f003 021c 	and.w	r2, r3, #28
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800391a:	2104      	movs	r1, #4
 800391c:	fa01 f202 	lsl.w	r2, r1, r2
 8003920:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003926:	2b00      	cmp	r3, #0
 8003928:	d071      	beq.n	8003a0e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003932:	e06c      	b.n	8003a0e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003938:	f003 031c 	and.w	r3, r3, #28
 800393c:	2202      	movs	r2, #2
 800393e:	409a      	lsls	r2, r3
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	4013      	ands	r3, r2
 8003944:	2b00      	cmp	r3, #0
 8003946:	d02e      	beq.n	80039a6 <HAL_DMA_IRQHandler+0xec>
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	f003 0302 	and.w	r3, r3, #2
 800394e:	2b00      	cmp	r3, #0
 8003950:	d029      	beq.n	80039a6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 0320 	and.w	r3, r3, #32
 800395c:	2b00      	cmp	r3, #0
 800395e:	d10b      	bne.n	8003978 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f022 020a 	bic.w	r2, r2, #10
 800396e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2201      	movs	r2, #1
 8003974:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800397c:	f003 021c 	and.w	r2, r3, #28
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003984:	2102      	movs	r1, #2
 8003986:	fa01 f202 	lsl.w	r2, r1, r2
 800398a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2200      	movs	r2, #0
 8003990:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003998:	2b00      	cmp	r3, #0
 800399a:	d038      	beq.n	8003a0e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80039a4:	e033      	b.n	8003a0e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039aa:	f003 031c 	and.w	r3, r3, #28
 80039ae:	2208      	movs	r2, #8
 80039b0:	409a      	lsls	r2, r3
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	4013      	ands	r3, r2
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d02a      	beq.n	8003a10 <HAL_DMA_IRQHandler+0x156>
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	f003 0308 	and.w	r3, r3, #8
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d025      	beq.n	8003a10 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f022 020e 	bic.w	r2, r2, #14
 80039d2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039d8:	f003 021c 	and.w	r2, r3, #28
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039e0:	2101      	movs	r1, #1
 80039e2:	fa01 f202 	lsl.w	r2, r1, r2
 80039e6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2201      	movs	r2, #1
 80039ec:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2201      	movs	r2, #1
 80039f2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2200      	movs	r2, #0
 80039fa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d004      	beq.n	8003a10 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003a0e:	bf00      	nop
 8003a10:	bf00      	nop
}
 8003a12:	3710      	adds	r7, #16
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}

08003a18 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b085      	sub	sp, #20
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	60f8      	str	r0, [r7, #12]
 8003a20:	60b9      	str	r1, [r7, #8]
 8003a22:	607a      	str	r2, [r7, #4]
 8003a24:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a2a:	68fa      	ldr	r2, [r7, #12]
 8003a2c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003a2e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d004      	beq.n	8003a42 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a3c:	68fa      	ldr	r2, [r7, #12]
 8003a3e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003a40:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a46:	f003 021c 	and.w	r2, r3, #28
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a4e:	2101      	movs	r1, #1
 8003a50:	fa01 f202 	lsl.w	r2, r1, r2
 8003a54:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	683a      	ldr	r2, [r7, #0]
 8003a5c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	2b10      	cmp	r3, #16
 8003a64:	d108      	bne.n	8003a78 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	687a      	ldr	r2, [r7, #4]
 8003a6c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	68ba      	ldr	r2, [r7, #8]
 8003a74:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003a76:	e007      	b.n	8003a88 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	68ba      	ldr	r2, [r7, #8]
 8003a7e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	60da      	str	r2, [r3, #12]
}
 8003a88:	bf00      	nop
 8003a8a:	3714      	adds	r7, #20
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr

08003a94 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b085      	sub	sp, #20
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	461a      	mov	r2, r3
 8003aa2:	4b17      	ldr	r3, [pc, #92]	@ (8003b00 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d80a      	bhi.n	8003abe <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003aac:	089b      	lsrs	r3, r3, #2
 8003aae:	009b      	lsls	r3, r3, #2
 8003ab0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003ab4:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8003ab8:	687a      	ldr	r2, [r7, #4]
 8003aba:	6493      	str	r3, [r2, #72]	@ 0x48
 8003abc:	e007      	b.n	8003ace <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ac2:	089b      	lsrs	r3, r3, #2
 8003ac4:	009a      	lsls	r2, r3, #2
 8003ac6:	4b0f      	ldr	r3, [pc, #60]	@ (8003b04 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003ac8:	4413      	add	r3, r2
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	6493      	str	r3, [r2, #72]	@ 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	b2db      	uxtb	r3, r3
 8003ad4:	3b08      	subs	r3, #8
 8003ad6:	4a0c      	ldr	r2, [pc, #48]	@ (8003b08 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003ad8:	fba2 2303 	umull	r2, r3, r2, r3
 8003adc:	091b      	lsrs	r3, r3, #4
 8003ade:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	4a0a      	ldr	r2, [pc, #40]	@ (8003b0c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003ae4:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	f003 031f 	and.w	r3, r3, #31
 8003aec:	2201      	movs	r2, #1
 8003aee:	409a      	lsls	r2, r3
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003af4:	bf00      	nop
 8003af6:	3714      	adds	r7, #20
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr
 8003b00:	40020407 	.word	0x40020407
 8003b04:	4002081c 	.word	0x4002081c
 8003b08:	cccccccd 	.word	0xcccccccd
 8003b0c:	40020880 	.word	0x40020880

08003b10 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b085      	sub	sp, #20
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003b20:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003b22:	68fa      	ldr	r2, [r7, #12]
 8003b24:	4b0b      	ldr	r3, [pc, #44]	@ (8003b54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003b26:	4413      	add	r3, r2
 8003b28:	009b      	lsls	r3, r3, #2
 8003b2a:	461a      	mov	r2, r3
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	4a09      	ldr	r2, [pc, #36]	@ (8003b58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8003b34:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	3b01      	subs	r3, #1
 8003b3a:	f003 0303 	and.w	r3, r3, #3
 8003b3e:	2201      	movs	r2, #1
 8003b40:	409a      	lsls	r2, r3
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8003b46:	bf00      	nop
 8003b48:	3714      	adds	r7, #20
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b50:	4770      	bx	lr
 8003b52:	bf00      	nop
 8003b54:	1000823f 	.word	0x1000823f
 8003b58:	40020940 	.word	0x40020940

08003b5c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b087      	sub	sp, #28
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003b66:	2300      	movs	r3, #0
 8003b68:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b6a:	e14c      	b.n	8003e06 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	2101      	movs	r1, #1
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	fa01 f303 	lsl.w	r3, r1, r3
 8003b78:	4013      	ands	r3, r2
 8003b7a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	f000 813e 	beq.w	8003e00 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	f003 0303 	and.w	r3, r3, #3
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d005      	beq.n	8003b9c <HAL_GPIO_Init+0x40>
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	f003 0303 	and.w	r3, r3, #3
 8003b98:	2b02      	cmp	r3, #2
 8003b9a:	d130      	bne.n	8003bfe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	005b      	lsls	r3, r3, #1
 8003ba6:	2203      	movs	r2, #3
 8003ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bac:	43db      	mvns	r3, r3
 8003bae:	693a      	ldr	r2, [r7, #16]
 8003bb0:	4013      	ands	r3, r2
 8003bb2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	68da      	ldr	r2, [r3, #12]
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	005b      	lsls	r3, r3, #1
 8003bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc0:	693a      	ldr	r2, [r7, #16]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	693a      	ldr	r2, [r7, #16]
 8003bca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bda:	43db      	mvns	r3, r3
 8003bdc:	693a      	ldr	r2, [r7, #16]
 8003bde:	4013      	ands	r3, r2
 8003be0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	091b      	lsrs	r3, r3, #4
 8003be8:	f003 0201 	and.w	r2, r3, #1
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf2:	693a      	ldr	r2, [r7, #16]
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	693a      	ldr	r2, [r7, #16]
 8003bfc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	f003 0303 	and.w	r3, r3, #3
 8003c06:	2b03      	cmp	r3, #3
 8003c08:	d017      	beq.n	8003c3a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	68db      	ldr	r3, [r3, #12]
 8003c0e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	005b      	lsls	r3, r3, #1
 8003c14:	2203      	movs	r2, #3
 8003c16:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1a:	43db      	mvns	r3, r3
 8003c1c:	693a      	ldr	r2, [r7, #16]
 8003c1e:	4013      	ands	r3, r2
 8003c20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	689a      	ldr	r2, [r3, #8]
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	005b      	lsls	r3, r3, #1
 8003c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c2e:	693a      	ldr	r2, [r7, #16]
 8003c30:	4313      	orrs	r3, r2
 8003c32:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	693a      	ldr	r2, [r7, #16]
 8003c38:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	f003 0303 	and.w	r3, r3, #3
 8003c42:	2b02      	cmp	r3, #2
 8003c44:	d123      	bne.n	8003c8e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	08da      	lsrs	r2, r3, #3
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	3208      	adds	r2, #8
 8003c4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c52:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	f003 0307 	and.w	r3, r3, #7
 8003c5a:	009b      	lsls	r3, r3, #2
 8003c5c:	220f      	movs	r2, #15
 8003c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c62:	43db      	mvns	r3, r3
 8003c64:	693a      	ldr	r2, [r7, #16]
 8003c66:	4013      	ands	r3, r2
 8003c68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	691a      	ldr	r2, [r3, #16]
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	f003 0307 	and.w	r3, r3, #7
 8003c74:	009b      	lsls	r3, r3, #2
 8003c76:	fa02 f303 	lsl.w	r3, r2, r3
 8003c7a:	693a      	ldr	r2, [r7, #16]
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	08da      	lsrs	r2, r3, #3
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	3208      	adds	r2, #8
 8003c88:	6939      	ldr	r1, [r7, #16]
 8003c8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	005b      	lsls	r3, r3, #1
 8003c98:	2203      	movs	r2, #3
 8003c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c9e:	43db      	mvns	r3, r3
 8003ca0:	693a      	ldr	r2, [r7, #16]
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	f003 0203 	and.w	r2, r3, #3
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	005b      	lsls	r3, r3, #1
 8003cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb6:	693a      	ldr	r2, [r7, #16]
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	693a      	ldr	r2, [r7, #16]
 8003cc0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	f000 8098 	beq.w	8003e00 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8003cd0:	4a54      	ldr	r2, [pc, #336]	@ (8003e24 <HAL_GPIO_Init+0x2c8>)
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	089b      	lsrs	r3, r3, #2
 8003cd6:	3302      	adds	r3, #2
 8003cd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cdc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	f003 0303 	and.w	r3, r3, #3
 8003ce4:	009b      	lsls	r3, r3, #2
 8003ce6:	220f      	movs	r2, #15
 8003ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cec:	43db      	mvns	r3, r3
 8003cee:	693a      	ldr	r2, [r7, #16]
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003cfa:	d019      	beq.n	8003d30 <HAL_GPIO_Init+0x1d4>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	4a4a      	ldr	r2, [pc, #296]	@ (8003e28 <HAL_GPIO_Init+0x2cc>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d013      	beq.n	8003d2c <HAL_GPIO_Init+0x1d0>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	4a49      	ldr	r2, [pc, #292]	@ (8003e2c <HAL_GPIO_Init+0x2d0>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d00d      	beq.n	8003d28 <HAL_GPIO_Init+0x1cc>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	4a48      	ldr	r2, [pc, #288]	@ (8003e30 <HAL_GPIO_Init+0x2d4>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d007      	beq.n	8003d24 <HAL_GPIO_Init+0x1c8>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	4a47      	ldr	r2, [pc, #284]	@ (8003e34 <HAL_GPIO_Init+0x2d8>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d101      	bne.n	8003d20 <HAL_GPIO_Init+0x1c4>
 8003d1c:	2304      	movs	r3, #4
 8003d1e:	e008      	b.n	8003d32 <HAL_GPIO_Init+0x1d6>
 8003d20:	2307      	movs	r3, #7
 8003d22:	e006      	b.n	8003d32 <HAL_GPIO_Init+0x1d6>
 8003d24:	2303      	movs	r3, #3
 8003d26:	e004      	b.n	8003d32 <HAL_GPIO_Init+0x1d6>
 8003d28:	2302      	movs	r3, #2
 8003d2a:	e002      	b.n	8003d32 <HAL_GPIO_Init+0x1d6>
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	e000      	b.n	8003d32 <HAL_GPIO_Init+0x1d6>
 8003d30:	2300      	movs	r3, #0
 8003d32:	697a      	ldr	r2, [r7, #20]
 8003d34:	f002 0203 	and.w	r2, r2, #3
 8003d38:	0092      	lsls	r2, r2, #2
 8003d3a:	4093      	lsls	r3, r2
 8003d3c:	693a      	ldr	r2, [r7, #16]
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003d42:	4938      	ldr	r1, [pc, #224]	@ (8003e24 <HAL_GPIO_Init+0x2c8>)
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	089b      	lsrs	r3, r3, #2
 8003d48:	3302      	adds	r3, #2
 8003d4a:	693a      	ldr	r2, [r7, #16]
 8003d4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003d50:	4b39      	ldr	r3, [pc, #228]	@ (8003e38 <HAL_GPIO_Init+0x2dc>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	43db      	mvns	r3, r3
 8003d5a:	693a      	ldr	r2, [r7, #16]
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d003      	beq.n	8003d74 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003d6c:	693a      	ldr	r2, [r7, #16]
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	4313      	orrs	r3, r2
 8003d72:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003d74:	4a30      	ldr	r2, [pc, #192]	@ (8003e38 <HAL_GPIO_Init+0x2dc>)
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003d7a:	4b2f      	ldr	r3, [pc, #188]	@ (8003e38 <HAL_GPIO_Init+0x2dc>)
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	43db      	mvns	r3, r3
 8003d84:	693a      	ldr	r2, [r7, #16]
 8003d86:	4013      	ands	r3, r2
 8003d88:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d003      	beq.n	8003d9e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8003d96:	693a      	ldr	r2, [r7, #16]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003d9e:	4a26      	ldr	r2, [pc, #152]	@ (8003e38 <HAL_GPIO_Init+0x2dc>)
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003da4:	4b24      	ldr	r3, [pc, #144]	@ (8003e38 <HAL_GPIO_Init+0x2dc>)
 8003da6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003daa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	43db      	mvns	r3, r3
 8003db0:	693a      	ldr	r2, [r7, #16]
 8003db2:	4013      	ands	r3, r2
 8003db4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d003      	beq.n	8003dca <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8003dc2:	693a      	ldr	r2, [r7, #16]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003dca:	4a1b      	ldr	r2, [pc, #108]	@ (8003e38 <HAL_GPIO_Init+0x2dc>)
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 8003dd2:	4b19      	ldr	r3, [pc, #100]	@ (8003e38 <HAL_GPIO_Init+0x2dc>)
 8003dd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003dd8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	43db      	mvns	r3, r3
 8003dde:	693a      	ldr	r2, [r7, #16]
 8003de0:	4013      	ands	r3, r2
 8003de2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d003      	beq.n	8003df8 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8003df0:	693a      	ldr	r2, [r7, #16]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	4313      	orrs	r3, r2
 8003df6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003df8:	4a0f      	ldr	r2, [pc, #60]	@ (8003e38 <HAL_GPIO_Init+0x2dc>)
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	3301      	adds	r3, #1
 8003e04:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	fa22 f303 	lsr.w	r3, r2, r3
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	f47f aeab 	bne.w	8003b6c <HAL_GPIO_Init+0x10>
  }
}
 8003e16:	bf00      	nop
 8003e18:	bf00      	nop
 8003e1a:	371c      	adds	r7, #28
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e22:	4770      	bx	lr
 8003e24:	40010000 	.word	0x40010000
 8003e28:	48000400 	.word	0x48000400
 8003e2c:	48000800 	.word	0x48000800
 8003e30:	48000c00 	.word	0x48000c00
 8003e34:	48001000 	.word	0x48001000
 8003e38:	58000800 	.word	0x58000800

08003e3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b083      	sub	sp, #12
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	460b      	mov	r3, r1
 8003e46:	807b      	strh	r3, [r7, #2]
 8003e48:	4613      	mov	r3, r2
 8003e4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003e4c:	787b      	ldrb	r3, [r7, #1]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d003      	beq.n	8003e5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003e52:	887a      	ldrh	r2, [r7, #2]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003e58:	e002      	b.n	8003e60 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003e5a:	887a      	ldrh	r2, [r7, #2]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003e60:	bf00      	nop
 8003e62:	370c      	adds	r7, #12
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr

08003e6c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b082      	sub	sp, #8
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	4603      	mov	r3, r0
 8003e74:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003e76:	4b08      	ldr	r3, [pc, #32]	@ (8003e98 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003e78:	68da      	ldr	r2, [r3, #12]
 8003e7a:	88fb      	ldrh	r3, [r7, #6]
 8003e7c:	4013      	ands	r3, r2
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d006      	beq.n	8003e90 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003e82:	4a05      	ldr	r2, [pc, #20]	@ (8003e98 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003e84:	88fb      	ldrh	r3, [r7, #6]
 8003e86:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003e88:	88fb      	ldrh	r3, [r7, #6]
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f7fd fae9 	bl	8001462 <HAL_GPIO_EXTI_Callback>
  }
}
 8003e90:	bf00      	nop
 8003e92:	3708      	adds	r7, #8
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}
 8003e98:	58000800 	.word	0x58000800

08003e9c <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b082      	sub	sp, #8
 8003ea0:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8003ea2:	4b0a      	ldr	r3, [pc, #40]	@ (8003ecc <HAL_HSEM_IRQHandler+0x30>)
 8003ea4:	68db      	ldr	r3, [r3, #12]
 8003ea6:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8003ea8:	4b08      	ldr	r3, [pc, #32]	@ (8003ecc <HAL_HSEM_IRQHandler+0x30>)
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	43db      	mvns	r3, r3
 8003eb0:	4906      	ldr	r1, [pc, #24]	@ (8003ecc <HAL_HSEM_IRQHandler+0x30>)
 8003eb2:	4013      	ands	r3, r2
 8003eb4:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8003eb6:	4a05      	ldr	r2, [pc, #20]	@ (8003ecc <HAL_HSEM_IRQHandler+0x30>)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	f000 f807 	bl	8003ed0 <HAL_HSEM_FreeCallback>
}
 8003ec2:	bf00      	nop
 8003ec4:	3708      	adds	r7, #8
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	bf00      	nop
 8003ecc:	58001500 	.word	0x58001500

08003ed0 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b083      	sub	sp, #12
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8003ed8:	bf00      	nop
 8003eda:	370c      	adds	r7, #12
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr

08003ee4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b082      	sub	sp, #8
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d101      	bne.n	8003ef6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e08d      	b.n	8004012 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003efc:	b2db      	uxtb	r3, r3
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d106      	bne.n	8003f10 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2200      	movs	r2, #0
 8003f06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f000 f885 	bl	800401a <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2224      	movs	r2, #36	@ 0x24
 8003f14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f022 0201 	bic.w	r2, r2, #1
 8003f26:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	685a      	ldr	r2, [r3, #4]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003f34:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	689a      	ldr	r2, [r3, #8]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003f44:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	68db      	ldr	r3, [r3, #12]
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	d107      	bne.n	8003f5e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	689a      	ldr	r2, [r3, #8]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003f5a:	609a      	str	r2, [r3, #8]
 8003f5c:	e006      	b.n	8003f6c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	689a      	ldr	r2, [r3, #8]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003f6a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	68db      	ldr	r3, [r3, #12]
 8003f70:	2b02      	cmp	r3, #2
 8003f72:	d108      	bne.n	8003f86 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	685a      	ldr	r2, [r3, #4]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003f82:	605a      	str	r2, [r3, #4]
 8003f84:	e007      	b.n	8003f96 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	685a      	ldr	r2, [r3, #4]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003f94:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	687a      	ldr	r2, [r7, #4]
 8003f9e:	6812      	ldr	r2, [r2, #0]
 8003fa0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003fa4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003fa8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	68da      	ldr	r2, [r3, #12]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003fb8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	691a      	ldr	r2, [r3, #16]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	695b      	ldr	r3, [r3, #20]
 8003fc2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	699b      	ldr	r3, [r3, #24]
 8003fca:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	430a      	orrs	r2, r1
 8003fd2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	69d9      	ldr	r1, [r3, #28]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6a1a      	ldr	r2, [r3, #32]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	430a      	orrs	r2, r1
 8003fe2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f042 0201 	orr.w	r2, r2, #1
 8003ff2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2220      	movs	r2, #32
 8003ffe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2200      	movs	r2, #0
 8004006:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2200      	movs	r2, #0
 800400c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004010:	2300      	movs	r3, #0
}
 8004012:	4618      	mov	r0, r3
 8004014:	3708      	adds	r7, #8
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}

0800401a <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800401a:	b480      	push	{r7}
 800401c:	b083      	sub	sp, #12
 800401e:	af00      	add	r7, sp, #0
 8004020:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8004022:	bf00      	nop
 8004024:	370c      	adds	r7, #12
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr
	...

08004030 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b088      	sub	sp, #32
 8004034:	af02      	add	r7, sp, #8
 8004036:	60f8      	str	r0, [r7, #12]
 8004038:	4608      	mov	r0, r1
 800403a:	4611      	mov	r1, r2
 800403c:	461a      	mov	r2, r3
 800403e:	4603      	mov	r3, r0
 8004040:	817b      	strh	r3, [r7, #10]
 8004042:	460b      	mov	r3, r1
 8004044:	813b      	strh	r3, [r7, #8]
 8004046:	4613      	mov	r3, r2
 8004048:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004050:	b2db      	uxtb	r3, r3
 8004052:	2b20      	cmp	r3, #32
 8004054:	f040 80f9 	bne.w	800424a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004058:	6a3b      	ldr	r3, [r7, #32]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d002      	beq.n	8004064 <HAL_I2C_Mem_Write+0x34>
 800405e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004060:	2b00      	cmp	r3, #0
 8004062:	d105      	bne.n	8004070 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800406a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	e0ed      	b.n	800424c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004076:	2b01      	cmp	r3, #1
 8004078:	d101      	bne.n	800407e <HAL_I2C_Mem_Write+0x4e>
 800407a:	2302      	movs	r3, #2
 800407c:	e0e6      	b.n	800424c <HAL_I2C_Mem_Write+0x21c>
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2201      	movs	r2, #1
 8004082:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004086:	f7ff f879 	bl	800317c <HAL_GetTick>
 800408a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	9300      	str	r3, [sp, #0]
 8004090:	2319      	movs	r3, #25
 8004092:	2201      	movs	r2, #1
 8004094:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004098:	68f8      	ldr	r0, [r7, #12]
 800409a:	f000 fac3 	bl	8004624 <I2C_WaitOnFlagUntilTimeout>
 800409e:	4603      	mov	r3, r0
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d001      	beq.n	80040a8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	e0d1      	b.n	800424c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2221      	movs	r2, #33	@ 0x21
 80040ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2240      	movs	r2, #64	@ 0x40
 80040b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2200      	movs	r2, #0
 80040bc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	6a3a      	ldr	r2, [r7, #32]
 80040c2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80040c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2200      	movs	r2, #0
 80040ce:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80040d0:	88f8      	ldrh	r0, [r7, #6]
 80040d2:	893a      	ldrh	r2, [r7, #8]
 80040d4:	8979      	ldrh	r1, [r7, #10]
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	9301      	str	r3, [sp, #4]
 80040da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040dc:	9300      	str	r3, [sp, #0]
 80040de:	4603      	mov	r3, r0
 80040e0:	68f8      	ldr	r0, [r7, #12]
 80040e2:	f000 f9d3 	bl	800448c <I2C_RequestMemoryWrite>
 80040e6:	4603      	mov	r3, r0
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d005      	beq.n	80040f8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2200      	movs	r2, #0
 80040f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	e0a9      	b.n	800424c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	2bff      	cmp	r3, #255	@ 0xff
 8004100:	d90e      	bls.n	8004120 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	22ff      	movs	r2, #255	@ 0xff
 8004106:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800410c:	b2da      	uxtb	r2, r3
 800410e:	8979      	ldrh	r1, [r7, #10]
 8004110:	2300      	movs	r3, #0
 8004112:	9300      	str	r3, [sp, #0]
 8004114:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004118:	68f8      	ldr	r0, [r7, #12]
 800411a:	f000 fc47 	bl	80049ac <I2C_TransferConfig>
 800411e:	e00f      	b.n	8004140 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004124:	b29a      	uxth	r2, r3
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800412e:	b2da      	uxtb	r2, r3
 8004130:	8979      	ldrh	r1, [r7, #10]
 8004132:	2300      	movs	r3, #0
 8004134:	9300      	str	r3, [sp, #0]
 8004136:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800413a:	68f8      	ldr	r0, [r7, #12]
 800413c:	f000 fc36 	bl	80049ac <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004140:	697a      	ldr	r2, [r7, #20]
 8004142:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004144:	68f8      	ldr	r0, [r7, #12]
 8004146:	f000 fac6 	bl	80046d6 <I2C_WaitOnTXISFlagUntilTimeout>
 800414a:	4603      	mov	r3, r0
 800414c:	2b00      	cmp	r3, #0
 800414e:	d001      	beq.n	8004154 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	e07b      	b.n	800424c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004158:	781a      	ldrb	r2, [r3, #0]
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004164:	1c5a      	adds	r2, r3, #1
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800416e:	b29b      	uxth	r3, r3
 8004170:	3b01      	subs	r3, #1
 8004172:	b29a      	uxth	r2, r3
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800417c:	3b01      	subs	r3, #1
 800417e:	b29a      	uxth	r2, r3
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004188:	b29b      	uxth	r3, r3
 800418a:	2b00      	cmp	r3, #0
 800418c:	d034      	beq.n	80041f8 <HAL_I2C_Mem_Write+0x1c8>
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004192:	2b00      	cmp	r3, #0
 8004194:	d130      	bne.n	80041f8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	9300      	str	r3, [sp, #0]
 800419a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800419c:	2200      	movs	r2, #0
 800419e:	2180      	movs	r1, #128	@ 0x80
 80041a0:	68f8      	ldr	r0, [r7, #12]
 80041a2:	f000 fa3f 	bl	8004624 <I2C_WaitOnFlagUntilTimeout>
 80041a6:	4603      	mov	r3, r0
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d001      	beq.n	80041b0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	e04d      	b.n	800424c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	2bff      	cmp	r3, #255	@ 0xff
 80041b8:	d90e      	bls.n	80041d8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	22ff      	movs	r2, #255	@ 0xff
 80041be:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041c4:	b2da      	uxtb	r2, r3
 80041c6:	8979      	ldrh	r1, [r7, #10]
 80041c8:	2300      	movs	r3, #0
 80041ca:	9300      	str	r3, [sp, #0]
 80041cc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80041d0:	68f8      	ldr	r0, [r7, #12]
 80041d2:	f000 fbeb 	bl	80049ac <I2C_TransferConfig>
 80041d6:	e00f      	b.n	80041f8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041dc:	b29a      	uxth	r2, r3
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041e6:	b2da      	uxtb	r2, r3
 80041e8:	8979      	ldrh	r1, [r7, #10]
 80041ea:	2300      	movs	r3, #0
 80041ec:	9300      	str	r3, [sp, #0]
 80041ee:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80041f2:	68f8      	ldr	r0, [r7, #12]
 80041f4:	f000 fbda 	bl	80049ac <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041fc:	b29b      	uxth	r3, r3
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d19e      	bne.n	8004140 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004202:	697a      	ldr	r2, [r7, #20]
 8004204:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004206:	68f8      	ldr	r0, [r7, #12]
 8004208:	f000 faac 	bl	8004764 <I2C_WaitOnSTOPFlagUntilTimeout>
 800420c:	4603      	mov	r3, r0
 800420e:	2b00      	cmp	r3, #0
 8004210:	d001      	beq.n	8004216 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	e01a      	b.n	800424c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	2220      	movs	r2, #32
 800421c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	6859      	ldr	r1, [r3, #4]
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681a      	ldr	r2, [r3, #0]
 8004228:	4b0a      	ldr	r3, [pc, #40]	@ (8004254 <HAL_I2C_Mem_Write+0x224>)
 800422a:	400b      	ands	r3, r1
 800422c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2220      	movs	r2, #32
 8004232:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2200      	movs	r2, #0
 800423a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	2200      	movs	r2, #0
 8004242:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004246:	2300      	movs	r3, #0
 8004248:	e000      	b.n	800424c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800424a:	2302      	movs	r3, #2
  }
}
 800424c:	4618      	mov	r0, r3
 800424e:	3718      	adds	r7, #24
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}
 8004254:	fe00e800 	.word	0xfe00e800

08004258 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b088      	sub	sp, #32
 800425c:	af02      	add	r7, sp, #8
 800425e:	60f8      	str	r0, [r7, #12]
 8004260:	4608      	mov	r0, r1
 8004262:	4611      	mov	r1, r2
 8004264:	461a      	mov	r2, r3
 8004266:	4603      	mov	r3, r0
 8004268:	817b      	strh	r3, [r7, #10]
 800426a:	460b      	mov	r3, r1
 800426c:	813b      	strh	r3, [r7, #8]
 800426e:	4613      	mov	r3, r2
 8004270:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004278:	b2db      	uxtb	r3, r3
 800427a:	2b20      	cmp	r3, #32
 800427c:	f040 80fd 	bne.w	800447a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004280:	6a3b      	ldr	r3, [r7, #32]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d002      	beq.n	800428c <HAL_I2C_Mem_Read+0x34>
 8004286:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004288:	2b00      	cmp	r3, #0
 800428a:	d105      	bne.n	8004298 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004292:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004294:	2301      	movs	r3, #1
 8004296:	e0f1      	b.n	800447c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800429e:	2b01      	cmp	r3, #1
 80042a0:	d101      	bne.n	80042a6 <HAL_I2C_Mem_Read+0x4e>
 80042a2:	2302      	movs	r3, #2
 80042a4:	e0ea      	b.n	800447c <HAL_I2C_Mem_Read+0x224>
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2201      	movs	r2, #1
 80042aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80042ae:	f7fe ff65 	bl	800317c <HAL_GetTick>
 80042b2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	9300      	str	r3, [sp, #0]
 80042b8:	2319      	movs	r3, #25
 80042ba:	2201      	movs	r2, #1
 80042bc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80042c0:	68f8      	ldr	r0, [r7, #12]
 80042c2:	f000 f9af 	bl	8004624 <I2C_WaitOnFlagUntilTimeout>
 80042c6:	4603      	mov	r3, r0
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d001      	beq.n	80042d0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80042cc:	2301      	movs	r3, #1
 80042ce:	e0d5      	b.n	800447c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2222      	movs	r2, #34	@ 0x22
 80042d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2240      	movs	r2, #64	@ 0x40
 80042dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2200      	movs	r2, #0
 80042e4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	6a3a      	ldr	r2, [r7, #32]
 80042ea:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80042f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2200      	movs	r2, #0
 80042f6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80042f8:	88f8      	ldrh	r0, [r7, #6]
 80042fa:	893a      	ldrh	r2, [r7, #8]
 80042fc:	8979      	ldrh	r1, [r7, #10]
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	9301      	str	r3, [sp, #4]
 8004302:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004304:	9300      	str	r3, [sp, #0]
 8004306:	4603      	mov	r3, r0
 8004308:	68f8      	ldr	r0, [r7, #12]
 800430a:	f000 f913 	bl	8004534 <I2C_RequestMemoryRead>
 800430e:	4603      	mov	r3, r0
 8004310:	2b00      	cmp	r3, #0
 8004312:	d005      	beq.n	8004320 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2200      	movs	r2, #0
 8004318:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	e0ad      	b.n	800447c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004324:	b29b      	uxth	r3, r3
 8004326:	2bff      	cmp	r3, #255	@ 0xff
 8004328:	d90e      	bls.n	8004348 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	22ff      	movs	r2, #255	@ 0xff
 800432e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004334:	b2da      	uxtb	r2, r3
 8004336:	8979      	ldrh	r1, [r7, #10]
 8004338:	4b52      	ldr	r3, [pc, #328]	@ (8004484 <HAL_I2C_Mem_Read+0x22c>)
 800433a:	9300      	str	r3, [sp, #0]
 800433c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004340:	68f8      	ldr	r0, [r7, #12]
 8004342:	f000 fb33 	bl	80049ac <I2C_TransferConfig>
 8004346:	e00f      	b.n	8004368 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800434c:	b29a      	uxth	r2, r3
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004356:	b2da      	uxtb	r2, r3
 8004358:	8979      	ldrh	r1, [r7, #10]
 800435a:	4b4a      	ldr	r3, [pc, #296]	@ (8004484 <HAL_I2C_Mem_Read+0x22c>)
 800435c:	9300      	str	r3, [sp, #0]
 800435e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004362:	68f8      	ldr	r0, [r7, #12]
 8004364:	f000 fb22 	bl	80049ac <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	9300      	str	r3, [sp, #0]
 800436c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800436e:	2200      	movs	r2, #0
 8004370:	2104      	movs	r1, #4
 8004372:	68f8      	ldr	r0, [r7, #12]
 8004374:	f000 f956 	bl	8004624 <I2C_WaitOnFlagUntilTimeout>
 8004378:	4603      	mov	r3, r0
 800437a:	2b00      	cmp	r3, #0
 800437c:	d001      	beq.n	8004382 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	e07c      	b.n	800447c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800438c:	b2d2      	uxtb	r2, r2
 800438e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004394:	1c5a      	adds	r2, r3, #1
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800439e:	3b01      	subs	r3, #1
 80043a0:	b29a      	uxth	r2, r3
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043aa:	b29b      	uxth	r3, r3
 80043ac:	3b01      	subs	r3, #1
 80043ae:	b29a      	uxth	r2, r3
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043b8:	b29b      	uxth	r3, r3
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d034      	beq.n	8004428 <HAL_I2C_Mem_Read+0x1d0>
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d130      	bne.n	8004428 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	9300      	str	r3, [sp, #0]
 80043ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043cc:	2200      	movs	r2, #0
 80043ce:	2180      	movs	r1, #128	@ 0x80
 80043d0:	68f8      	ldr	r0, [r7, #12]
 80043d2:	f000 f927 	bl	8004624 <I2C_WaitOnFlagUntilTimeout>
 80043d6:	4603      	mov	r3, r0
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d001      	beq.n	80043e0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80043dc:	2301      	movs	r3, #1
 80043de:	e04d      	b.n	800447c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043e4:	b29b      	uxth	r3, r3
 80043e6:	2bff      	cmp	r3, #255	@ 0xff
 80043e8:	d90e      	bls.n	8004408 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	22ff      	movs	r2, #255	@ 0xff
 80043ee:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043f4:	b2da      	uxtb	r2, r3
 80043f6:	8979      	ldrh	r1, [r7, #10]
 80043f8:	2300      	movs	r3, #0
 80043fa:	9300      	str	r3, [sp, #0]
 80043fc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004400:	68f8      	ldr	r0, [r7, #12]
 8004402:	f000 fad3 	bl	80049ac <I2C_TransferConfig>
 8004406:	e00f      	b.n	8004428 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800440c:	b29a      	uxth	r2, r3
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004416:	b2da      	uxtb	r2, r3
 8004418:	8979      	ldrh	r1, [r7, #10]
 800441a:	2300      	movs	r3, #0
 800441c:	9300      	str	r3, [sp, #0]
 800441e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004422:	68f8      	ldr	r0, [r7, #12]
 8004424:	f000 fac2 	bl	80049ac <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800442c:	b29b      	uxth	r3, r3
 800442e:	2b00      	cmp	r3, #0
 8004430:	d19a      	bne.n	8004368 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004432:	697a      	ldr	r2, [r7, #20]
 8004434:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004436:	68f8      	ldr	r0, [r7, #12]
 8004438:	f000 f994 	bl	8004764 <I2C_WaitOnSTOPFlagUntilTimeout>
 800443c:	4603      	mov	r3, r0
 800443e:	2b00      	cmp	r3, #0
 8004440:	d001      	beq.n	8004446 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	e01a      	b.n	800447c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	2220      	movs	r2, #32
 800444c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	6859      	ldr	r1, [r3, #4]
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681a      	ldr	r2, [r3, #0]
 8004458:	4b0b      	ldr	r3, [pc, #44]	@ (8004488 <HAL_I2C_Mem_Read+0x230>)
 800445a:	400b      	ands	r3, r1
 800445c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2220      	movs	r2, #32
 8004462:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2200      	movs	r2, #0
 800446a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2200      	movs	r2, #0
 8004472:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004476:	2300      	movs	r3, #0
 8004478:	e000      	b.n	800447c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800447a:	2302      	movs	r3, #2
  }
}
 800447c:	4618      	mov	r0, r3
 800447e:	3718      	adds	r7, #24
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}
 8004484:	80002400 	.word	0x80002400
 8004488:	fe00e800 	.word	0xfe00e800

0800448c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b086      	sub	sp, #24
 8004490:	af02      	add	r7, sp, #8
 8004492:	60f8      	str	r0, [r7, #12]
 8004494:	4608      	mov	r0, r1
 8004496:	4611      	mov	r1, r2
 8004498:	461a      	mov	r2, r3
 800449a:	4603      	mov	r3, r0
 800449c:	817b      	strh	r3, [r7, #10]
 800449e:	460b      	mov	r3, r1
 80044a0:	813b      	strh	r3, [r7, #8]
 80044a2:	4613      	mov	r3, r2
 80044a4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80044a6:	88fb      	ldrh	r3, [r7, #6]
 80044a8:	b2da      	uxtb	r2, r3
 80044aa:	8979      	ldrh	r1, [r7, #10]
 80044ac:	4b20      	ldr	r3, [pc, #128]	@ (8004530 <I2C_RequestMemoryWrite+0xa4>)
 80044ae:	9300      	str	r3, [sp, #0]
 80044b0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80044b4:	68f8      	ldr	r0, [r7, #12]
 80044b6:	f000 fa79 	bl	80049ac <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044ba:	69fa      	ldr	r2, [r7, #28]
 80044bc:	69b9      	ldr	r1, [r7, #24]
 80044be:	68f8      	ldr	r0, [r7, #12]
 80044c0:	f000 f909 	bl	80046d6 <I2C_WaitOnTXISFlagUntilTimeout>
 80044c4:	4603      	mov	r3, r0
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d001      	beq.n	80044ce <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	e02c      	b.n	8004528 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80044ce:	88fb      	ldrh	r3, [r7, #6]
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	d105      	bne.n	80044e0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80044d4:	893b      	ldrh	r3, [r7, #8]
 80044d6:	b2da      	uxtb	r2, r3
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	629a      	str	r2, [r3, #40]	@ 0x28
 80044de:	e015      	b.n	800450c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80044e0:	893b      	ldrh	r3, [r7, #8]
 80044e2:	0a1b      	lsrs	r3, r3, #8
 80044e4:	b29b      	uxth	r3, r3
 80044e6:	b2da      	uxtb	r2, r3
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044ee:	69fa      	ldr	r2, [r7, #28]
 80044f0:	69b9      	ldr	r1, [r7, #24]
 80044f2:	68f8      	ldr	r0, [r7, #12]
 80044f4:	f000 f8ef 	bl	80046d6 <I2C_WaitOnTXISFlagUntilTimeout>
 80044f8:	4603      	mov	r3, r0
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d001      	beq.n	8004502 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e012      	b.n	8004528 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004502:	893b      	ldrh	r3, [r7, #8]
 8004504:	b2da      	uxtb	r2, r3
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800450c:	69fb      	ldr	r3, [r7, #28]
 800450e:	9300      	str	r3, [sp, #0]
 8004510:	69bb      	ldr	r3, [r7, #24]
 8004512:	2200      	movs	r2, #0
 8004514:	2180      	movs	r1, #128	@ 0x80
 8004516:	68f8      	ldr	r0, [r7, #12]
 8004518:	f000 f884 	bl	8004624 <I2C_WaitOnFlagUntilTimeout>
 800451c:	4603      	mov	r3, r0
 800451e:	2b00      	cmp	r3, #0
 8004520:	d001      	beq.n	8004526 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	e000      	b.n	8004528 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004526:	2300      	movs	r3, #0
}
 8004528:	4618      	mov	r0, r3
 800452a:	3710      	adds	r7, #16
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}
 8004530:	80002000 	.word	0x80002000

08004534 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b086      	sub	sp, #24
 8004538:	af02      	add	r7, sp, #8
 800453a:	60f8      	str	r0, [r7, #12]
 800453c:	4608      	mov	r0, r1
 800453e:	4611      	mov	r1, r2
 8004540:	461a      	mov	r2, r3
 8004542:	4603      	mov	r3, r0
 8004544:	817b      	strh	r3, [r7, #10]
 8004546:	460b      	mov	r3, r1
 8004548:	813b      	strh	r3, [r7, #8]
 800454a:	4613      	mov	r3, r2
 800454c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800454e:	88fb      	ldrh	r3, [r7, #6]
 8004550:	b2da      	uxtb	r2, r3
 8004552:	8979      	ldrh	r1, [r7, #10]
 8004554:	4b20      	ldr	r3, [pc, #128]	@ (80045d8 <I2C_RequestMemoryRead+0xa4>)
 8004556:	9300      	str	r3, [sp, #0]
 8004558:	2300      	movs	r3, #0
 800455a:	68f8      	ldr	r0, [r7, #12]
 800455c:	f000 fa26 	bl	80049ac <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004560:	69fa      	ldr	r2, [r7, #28]
 8004562:	69b9      	ldr	r1, [r7, #24]
 8004564:	68f8      	ldr	r0, [r7, #12]
 8004566:	f000 f8b6 	bl	80046d6 <I2C_WaitOnTXISFlagUntilTimeout>
 800456a:	4603      	mov	r3, r0
 800456c:	2b00      	cmp	r3, #0
 800456e:	d001      	beq.n	8004574 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	e02c      	b.n	80045ce <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004574:	88fb      	ldrh	r3, [r7, #6]
 8004576:	2b01      	cmp	r3, #1
 8004578:	d105      	bne.n	8004586 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800457a:	893b      	ldrh	r3, [r7, #8]
 800457c:	b2da      	uxtb	r2, r3
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	629a      	str	r2, [r3, #40]	@ 0x28
 8004584:	e015      	b.n	80045b2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004586:	893b      	ldrh	r3, [r7, #8]
 8004588:	0a1b      	lsrs	r3, r3, #8
 800458a:	b29b      	uxth	r3, r3
 800458c:	b2da      	uxtb	r2, r3
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004594:	69fa      	ldr	r2, [r7, #28]
 8004596:	69b9      	ldr	r1, [r7, #24]
 8004598:	68f8      	ldr	r0, [r7, #12]
 800459a:	f000 f89c 	bl	80046d6 <I2C_WaitOnTXISFlagUntilTimeout>
 800459e:	4603      	mov	r3, r0
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d001      	beq.n	80045a8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80045a4:	2301      	movs	r3, #1
 80045a6:	e012      	b.n	80045ce <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80045a8:	893b      	ldrh	r3, [r7, #8]
 80045aa:	b2da      	uxtb	r2, r3
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80045b2:	69fb      	ldr	r3, [r7, #28]
 80045b4:	9300      	str	r3, [sp, #0]
 80045b6:	69bb      	ldr	r3, [r7, #24]
 80045b8:	2200      	movs	r2, #0
 80045ba:	2140      	movs	r1, #64	@ 0x40
 80045bc:	68f8      	ldr	r0, [r7, #12]
 80045be:	f000 f831 	bl	8004624 <I2C_WaitOnFlagUntilTimeout>
 80045c2:	4603      	mov	r3, r0
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d001      	beq.n	80045cc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	e000      	b.n	80045ce <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80045cc:	2300      	movs	r3, #0
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3710      	adds	r7, #16
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}
 80045d6:	bf00      	nop
 80045d8:	80002000 	.word	0x80002000

080045dc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80045dc:	b480      	push	{r7}
 80045de:	b083      	sub	sp, #12
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	699b      	ldr	r3, [r3, #24]
 80045ea:	f003 0302 	and.w	r3, r3, #2
 80045ee:	2b02      	cmp	r3, #2
 80045f0:	d103      	bne.n	80045fa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	2200      	movs	r2, #0
 80045f8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	699b      	ldr	r3, [r3, #24]
 8004600:	f003 0301 	and.w	r3, r3, #1
 8004604:	2b01      	cmp	r3, #1
 8004606:	d007      	beq.n	8004618 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	699a      	ldr	r2, [r3, #24]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f042 0201 	orr.w	r2, r2, #1
 8004616:	619a      	str	r2, [r3, #24]
  }
}
 8004618:	bf00      	nop
 800461a:	370c      	adds	r7, #12
 800461c:	46bd      	mov	sp, r7
 800461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004622:	4770      	bx	lr

08004624 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b084      	sub	sp, #16
 8004628:	af00      	add	r7, sp, #0
 800462a:	60f8      	str	r0, [r7, #12]
 800462c:	60b9      	str	r1, [r7, #8]
 800462e:	603b      	str	r3, [r7, #0]
 8004630:	4613      	mov	r3, r2
 8004632:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004634:	e03b      	b.n	80046ae <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004636:	69ba      	ldr	r2, [r7, #24]
 8004638:	6839      	ldr	r1, [r7, #0]
 800463a:	68f8      	ldr	r0, [r7, #12]
 800463c:	f000 f8d6 	bl	80047ec <I2C_IsErrorOccurred>
 8004640:	4603      	mov	r3, r0
 8004642:	2b00      	cmp	r3, #0
 8004644:	d001      	beq.n	800464a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	e041      	b.n	80046ce <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004650:	d02d      	beq.n	80046ae <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004652:	f7fe fd93 	bl	800317c <HAL_GetTick>
 8004656:	4602      	mov	r2, r0
 8004658:	69bb      	ldr	r3, [r7, #24]
 800465a:	1ad3      	subs	r3, r2, r3
 800465c:	683a      	ldr	r2, [r7, #0]
 800465e:	429a      	cmp	r2, r3
 8004660:	d302      	bcc.n	8004668 <I2C_WaitOnFlagUntilTimeout+0x44>
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d122      	bne.n	80046ae <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	699a      	ldr	r2, [r3, #24]
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	4013      	ands	r3, r2
 8004672:	68ba      	ldr	r2, [r7, #8]
 8004674:	429a      	cmp	r2, r3
 8004676:	bf0c      	ite	eq
 8004678:	2301      	moveq	r3, #1
 800467a:	2300      	movne	r3, #0
 800467c:	b2db      	uxtb	r3, r3
 800467e:	461a      	mov	r2, r3
 8004680:	79fb      	ldrb	r3, [r7, #7]
 8004682:	429a      	cmp	r2, r3
 8004684:	d113      	bne.n	80046ae <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800468a:	f043 0220 	orr.w	r2, r3, #32
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2220      	movs	r2, #32
 8004696:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2200      	movs	r2, #0
 800469e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	2200      	movs	r2, #0
 80046a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	e00f      	b.n	80046ce <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	699a      	ldr	r2, [r3, #24]
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	4013      	ands	r3, r2
 80046b8:	68ba      	ldr	r2, [r7, #8]
 80046ba:	429a      	cmp	r2, r3
 80046bc:	bf0c      	ite	eq
 80046be:	2301      	moveq	r3, #1
 80046c0:	2300      	movne	r3, #0
 80046c2:	b2db      	uxtb	r3, r3
 80046c4:	461a      	mov	r2, r3
 80046c6:	79fb      	ldrb	r3, [r7, #7]
 80046c8:	429a      	cmp	r2, r3
 80046ca:	d0b4      	beq.n	8004636 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80046cc:	2300      	movs	r3, #0
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	3710      	adds	r7, #16
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}

080046d6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80046d6:	b580      	push	{r7, lr}
 80046d8:	b084      	sub	sp, #16
 80046da:	af00      	add	r7, sp, #0
 80046dc:	60f8      	str	r0, [r7, #12]
 80046de:	60b9      	str	r1, [r7, #8]
 80046e0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80046e2:	e033      	b.n	800474c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80046e4:	687a      	ldr	r2, [r7, #4]
 80046e6:	68b9      	ldr	r1, [r7, #8]
 80046e8:	68f8      	ldr	r0, [r7, #12]
 80046ea:	f000 f87f 	bl	80047ec <I2C_IsErrorOccurred>
 80046ee:	4603      	mov	r3, r0
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d001      	beq.n	80046f8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	e031      	b.n	800475c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046fe:	d025      	beq.n	800474c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004700:	f7fe fd3c 	bl	800317c <HAL_GetTick>
 8004704:	4602      	mov	r2, r0
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	1ad3      	subs	r3, r2, r3
 800470a:	68ba      	ldr	r2, [r7, #8]
 800470c:	429a      	cmp	r2, r3
 800470e:	d302      	bcc.n	8004716 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d11a      	bne.n	800474c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	699b      	ldr	r3, [r3, #24]
 800471c:	f003 0302 	and.w	r3, r3, #2
 8004720:	2b02      	cmp	r3, #2
 8004722:	d013      	beq.n	800474c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004728:	f043 0220 	orr.w	r2, r3, #32
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2220      	movs	r2, #32
 8004734:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2200      	movs	r2, #0
 800473c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2200      	movs	r2, #0
 8004744:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	e007      	b.n	800475c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	699b      	ldr	r3, [r3, #24]
 8004752:	f003 0302 	and.w	r3, r3, #2
 8004756:	2b02      	cmp	r3, #2
 8004758:	d1c4      	bne.n	80046e4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800475a:	2300      	movs	r3, #0
}
 800475c:	4618      	mov	r0, r3
 800475e:	3710      	adds	r7, #16
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}

08004764 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b084      	sub	sp, #16
 8004768:	af00      	add	r7, sp, #0
 800476a:	60f8      	str	r0, [r7, #12]
 800476c:	60b9      	str	r1, [r7, #8]
 800476e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004770:	e02f      	b.n	80047d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	68b9      	ldr	r1, [r7, #8]
 8004776:	68f8      	ldr	r0, [r7, #12]
 8004778:	f000 f838 	bl	80047ec <I2C_IsErrorOccurred>
 800477c:	4603      	mov	r3, r0
 800477e:	2b00      	cmp	r3, #0
 8004780:	d001      	beq.n	8004786 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	e02d      	b.n	80047e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004786:	f7fe fcf9 	bl	800317c <HAL_GetTick>
 800478a:	4602      	mov	r2, r0
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	1ad3      	subs	r3, r2, r3
 8004790:	68ba      	ldr	r2, [r7, #8]
 8004792:	429a      	cmp	r2, r3
 8004794:	d302      	bcc.n	800479c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d11a      	bne.n	80047d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	699b      	ldr	r3, [r3, #24]
 80047a2:	f003 0320 	and.w	r3, r3, #32
 80047a6:	2b20      	cmp	r3, #32
 80047a8:	d013      	beq.n	80047d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047ae:	f043 0220 	orr.w	r2, r3, #32
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2220      	movs	r2, #32
 80047ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2200      	movs	r2, #0
 80047c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2200      	movs	r2, #0
 80047ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	e007      	b.n	80047e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	699b      	ldr	r3, [r3, #24]
 80047d8:	f003 0320 	and.w	r3, r3, #32
 80047dc:	2b20      	cmp	r3, #32
 80047de:	d1c8      	bne.n	8004772 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80047e0:	2300      	movs	r3, #0
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	3710      	adds	r7, #16
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}
	...

080047ec <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b08a      	sub	sp, #40	@ 0x28
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	60f8      	str	r0, [r7, #12]
 80047f4:	60b9      	str	r1, [r7, #8]
 80047f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047f8:	2300      	movs	r3, #0
 80047fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	699b      	ldr	r3, [r3, #24]
 8004804:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004806:	2300      	movs	r3, #0
 8004808:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800480e:	69bb      	ldr	r3, [r7, #24]
 8004810:	f003 0310 	and.w	r3, r3, #16
 8004814:	2b00      	cmp	r3, #0
 8004816:	d068      	beq.n	80048ea <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	2210      	movs	r2, #16
 800481e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004820:	e049      	b.n	80048b6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004828:	d045      	beq.n	80048b6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800482a:	f7fe fca7 	bl	800317c <HAL_GetTick>
 800482e:	4602      	mov	r2, r0
 8004830:	69fb      	ldr	r3, [r7, #28]
 8004832:	1ad3      	subs	r3, r2, r3
 8004834:	68ba      	ldr	r2, [r7, #8]
 8004836:	429a      	cmp	r2, r3
 8004838:	d302      	bcc.n	8004840 <I2C_IsErrorOccurred+0x54>
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d13a      	bne.n	80048b6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800484a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004852:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	699b      	ldr	r3, [r3, #24]
 800485a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800485e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004862:	d121      	bne.n	80048a8 <I2C_IsErrorOccurred+0xbc>
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800486a:	d01d      	beq.n	80048a8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800486c:	7cfb      	ldrb	r3, [r7, #19]
 800486e:	2b20      	cmp	r3, #32
 8004870:	d01a      	beq.n	80048a8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	685a      	ldr	r2, [r3, #4]
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004880:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004882:	f7fe fc7b 	bl	800317c <HAL_GetTick>
 8004886:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004888:	e00e      	b.n	80048a8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800488a:	f7fe fc77 	bl	800317c <HAL_GetTick>
 800488e:	4602      	mov	r2, r0
 8004890:	69fb      	ldr	r3, [r7, #28]
 8004892:	1ad3      	subs	r3, r2, r3
 8004894:	2b19      	cmp	r3, #25
 8004896:	d907      	bls.n	80048a8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004898:	6a3b      	ldr	r3, [r7, #32]
 800489a:	f043 0320 	orr.w	r3, r3, #32
 800489e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80048a6:	e006      	b.n	80048b6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	699b      	ldr	r3, [r3, #24]
 80048ae:	f003 0320 	and.w	r3, r3, #32
 80048b2:	2b20      	cmp	r3, #32
 80048b4:	d1e9      	bne.n	800488a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	699b      	ldr	r3, [r3, #24]
 80048bc:	f003 0320 	and.w	r3, r3, #32
 80048c0:	2b20      	cmp	r3, #32
 80048c2:	d003      	beq.n	80048cc <I2C_IsErrorOccurred+0xe0>
 80048c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d0aa      	beq.n	8004822 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80048cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d103      	bne.n	80048dc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	2220      	movs	r2, #32
 80048da:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80048dc:	6a3b      	ldr	r3, [r7, #32]
 80048de:	f043 0304 	orr.w	r3, r3, #4
 80048e2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80048e4:	2301      	movs	r3, #1
 80048e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	699b      	ldr	r3, [r3, #24]
 80048f0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80048f2:	69bb      	ldr	r3, [r7, #24]
 80048f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d00b      	beq.n	8004914 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80048fc:	6a3b      	ldr	r3, [r7, #32]
 80048fe:	f043 0301 	orr.w	r3, r3, #1
 8004902:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800490c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004914:	69bb      	ldr	r3, [r7, #24]
 8004916:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800491a:	2b00      	cmp	r3, #0
 800491c:	d00b      	beq.n	8004936 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800491e:	6a3b      	ldr	r3, [r7, #32]
 8004920:	f043 0308 	orr.w	r3, r3, #8
 8004924:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800492e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004930:	2301      	movs	r3, #1
 8004932:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004936:	69bb      	ldr	r3, [r7, #24]
 8004938:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800493c:	2b00      	cmp	r3, #0
 800493e:	d00b      	beq.n	8004958 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004940:	6a3b      	ldr	r3, [r7, #32]
 8004942:	f043 0302 	orr.w	r3, r3, #2
 8004946:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004950:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8004958:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800495c:	2b00      	cmp	r3, #0
 800495e:	d01c      	beq.n	800499a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004960:	68f8      	ldr	r0, [r7, #12]
 8004962:	f7ff fe3b 	bl	80045dc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	6859      	ldr	r1, [r3, #4]
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	4b0d      	ldr	r3, [pc, #52]	@ (80049a8 <I2C_IsErrorOccurred+0x1bc>)
 8004972:	400b      	ands	r3, r1
 8004974:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800497a:	6a3b      	ldr	r3, [r7, #32]
 800497c:	431a      	orrs	r2, r3
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	2220      	movs	r2, #32
 8004986:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	2200      	movs	r2, #0
 800498e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2200      	movs	r2, #0
 8004996:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800499a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3728      	adds	r7, #40	@ 0x28
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}
 80049a6:	bf00      	nop
 80049a8:	fe00e800 	.word	0xfe00e800

080049ac <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b087      	sub	sp, #28
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	60f8      	str	r0, [r7, #12]
 80049b4:	607b      	str	r3, [r7, #4]
 80049b6:	460b      	mov	r3, r1
 80049b8:	817b      	strh	r3, [r7, #10]
 80049ba:	4613      	mov	r3, r2
 80049bc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80049be:	897b      	ldrh	r3, [r7, #10]
 80049c0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80049c4:	7a7b      	ldrb	r3, [r7, #9]
 80049c6:	041b      	lsls	r3, r3, #16
 80049c8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80049cc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80049d2:	6a3b      	ldr	r3, [r7, #32]
 80049d4:	4313      	orrs	r3, r2
 80049d6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80049da:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	685a      	ldr	r2, [r3, #4]
 80049e2:	6a3b      	ldr	r3, [r7, #32]
 80049e4:	0d5b      	lsrs	r3, r3, #21
 80049e6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80049ea:	4b08      	ldr	r3, [pc, #32]	@ (8004a0c <I2C_TransferConfig+0x60>)
 80049ec:	430b      	orrs	r3, r1
 80049ee:	43db      	mvns	r3, r3
 80049f0:	ea02 0103 	and.w	r1, r2, r3
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	697a      	ldr	r2, [r7, #20]
 80049fa:	430a      	orrs	r2, r1
 80049fc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80049fe:	bf00      	nop
 8004a00:	371c      	adds	r7, #28
 8004a02:	46bd      	mov	sp, r7
 8004a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a08:	4770      	bx	lr
 8004a0a:	bf00      	nop
 8004a0c:	03ff63ff 	.word	0x03ff63ff

08004a10 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b084      	sub	sp, #16
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d01e      	beq.n	8004a60 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8004a22:	4b13      	ldr	r3, [pc, #76]	@ (8004a70 <HAL_IPCC_Init+0x60>)
 8004a24:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d102      	bne.n	8004a38 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f7fe f99c 	bl	8002d70 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8004a38:	68b8      	ldr	r0, [r7, #8]
 8004a3a:	f000 f85b 	bl	8004af4 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f043 1201 	orr.w	r2, r3, #65537	@ 0x10001
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	f000 f82c 	bl	8004aa8 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2200      	movs	r2, #0
 8004a54:	635a      	str	r2, [r3, #52]	@ 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2201      	movs	r2, #1
 8004a5a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 8004a5e:	e001      	b.n	8004a64 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8004a64:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	3710      	adds	r7, #16
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}
 8004a6e:	bf00      	nop
 8004a70:	58000c00 	.word	0x58000c00

08004a74 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b085      	sub	sp, #20
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	60f8      	str	r0, [r7, #12]
 8004a7c:	60b9      	str	r1, [r7, #8]
 8004a7e:	4613      	mov	r3, r2
 8004a80:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8004a82:	bf00      	nop
 8004a84:	3714      	adds	r7, #20
 8004a86:	46bd      	mov	sp, r7
 8004a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8c:	4770      	bx	lr

08004a8e <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8004a8e:	b480      	push	{r7}
 8004a90:	b085      	sub	sp, #20
 8004a92:	af00      	add	r7, sp, #0
 8004a94:	60f8      	str	r0, [r7, #12]
 8004a96:	60b9      	str	r1, [r7, #8]
 8004a98:	4613      	mov	r3, r2
 8004a9a:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8004a9c:	bf00      	nop
 8004a9e:	3714      	adds	r7, #20
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa6:	4770      	bx	lr

08004aa8 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b085      	sub	sp, #20
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	60fb      	str	r3, [r7, #12]
 8004ab4:	e00f      	b.n	8004ad6 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8004ab6:	687a      	ldr	r2, [r7, #4]
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	009b      	lsls	r3, r3, #2
 8004abc:	4413      	add	r3, r2
 8004abe:	4a0b      	ldr	r2, [pc, #44]	@ (8004aec <IPCC_SetDefaultCallbacks+0x44>)
 8004ac0:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8004ac2:	687a      	ldr	r2, [r7, #4]
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	3306      	adds	r3, #6
 8004ac8:	009b      	lsls	r3, r3, #2
 8004aca:	4413      	add	r3, r2
 8004acc:	4a08      	ldr	r2, [pc, #32]	@ (8004af0 <IPCC_SetDefaultCallbacks+0x48>)
 8004ace:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	3301      	adds	r3, #1
 8004ad4:	60fb      	str	r3, [r7, #12]
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2b05      	cmp	r3, #5
 8004ada:	d9ec      	bls.n	8004ab6 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8004adc:	bf00      	nop
 8004ade:	bf00      	nop
 8004ae0:	3714      	adds	r7, #20
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae8:	4770      	bx	lr
 8004aea:	bf00      	nop
 8004aec:	08004a75 	.word	0x08004a75
 8004af0:	08004a8f 	.word	0x08004a8f

08004af4 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b083      	sub	sp, #12
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2200      	movs	r2, #0
 8004b00:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	f04f 123f 	mov.w	r2, #4128831	@ 0x3f003f
 8004b08:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	223f      	movs	r2, #63	@ 0x3f
 8004b0e:	609a      	str	r2, [r3, #8]
}
 8004b10:	bf00      	nop
 8004b12:	370c      	adds	r7, #12
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr

08004b1c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b20:	4b05      	ldr	r3, [pc, #20]	@ (8004b38 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a04      	ldr	r2, [pc, #16]	@ (8004b38 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004b26:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b2a:	6013      	str	r3, [r2, #0]
}
 8004b2c:	bf00      	nop
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr
 8004b36:	bf00      	nop
 8004b38:	58000400 	.word	0x58000400

08004b3c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8004b40:	4b04      	ldr	r3, [pc, #16]	@ (8004b54 <HAL_PWREx_GetVoltageRange+0x18>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b50:	4770      	bx	lr
 8004b52:	bf00      	nop
 8004b54:	58000400 	.word	0x58000400

08004b58 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8004b58:	b480      	push	{r7}
 8004b5a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8004b5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004b66:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b6a:	d101      	bne.n	8004b70 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	e000      	b.n	8004b72 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8004b70:	2300      	movs	r3, #0
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	46bd      	mov	sp, r7
 8004b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7a:	4770      	bx	lr

08004b7c <LL_RCC_HSE_Enable>:
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8004b80:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004b8a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b8e:	6013      	str	r3, [r2, #0]
}
 8004b90:	bf00      	nop
 8004b92:	46bd      	mov	sp, r7
 8004b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b98:	4770      	bx	lr

08004b9a <LL_RCC_HSE_Disable>:
{
 8004b9a:	b480      	push	{r7}
 8004b9c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8004b9e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004ba8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004bac:	6013      	str	r3, [r2, #0]
}
 8004bae:	bf00      	nop
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb6:	4770      	bx	lr

08004bb8 <LL_RCC_HSE_IsReady>:
{
 8004bb8:	b480      	push	{r7}
 8004bba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004bbc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bc6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004bca:	d101      	bne.n	8004bd0 <LL_RCC_HSE_IsReady+0x18>
 8004bcc:	2301      	movs	r3, #1
 8004bce:	e000      	b.n	8004bd2 <LL_RCC_HSE_IsReady+0x1a>
 8004bd0:	2300      	movs	r3, #0
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bda:	4770      	bx	lr

08004bdc <LL_RCC_HSI_Enable>:
{
 8004bdc:	b480      	push	{r7}
 8004bde:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004be0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004bea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004bee:	6013      	str	r3, [r2, #0]
}
 8004bf0:	bf00      	nop
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf8:	4770      	bx	lr

08004bfa <LL_RCC_HSI_Disable>:
{
 8004bfa:	b480      	push	{r7}
 8004bfc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8004bfe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004c08:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c0c:	6013      	str	r3, [r2, #0]
}
 8004c0e:	bf00      	nop
 8004c10:	46bd      	mov	sp, r7
 8004c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c16:	4770      	bx	lr

08004c18 <LL_RCC_HSI_IsReady>:
{
 8004c18:	b480      	push	{r7}
 8004c1a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004c1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c2a:	d101      	bne.n	8004c30 <LL_RCC_HSI_IsReady+0x18>
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	e000      	b.n	8004c32 <LL_RCC_HSI_IsReady+0x1a>
 8004c30:	2300      	movs	r3, #0
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	46bd      	mov	sp, r7
 8004c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3a:	4770      	bx	lr

08004c3c <LL_RCC_HSI_SetCalibTrimming>:
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b083      	sub	sp, #12
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8004c44:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	061b      	lsls	r3, r3, #24
 8004c52:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004c56:	4313      	orrs	r3, r2
 8004c58:	604b      	str	r3, [r1, #4]
}
 8004c5a:	bf00      	nop
 8004c5c:	370c      	adds	r7, #12
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c64:	4770      	bx	lr

08004c66 <LL_RCC_HSI48_Enable>:
{
 8004c66:	b480      	push	{r7}
 8004c68:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8004c6a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004c6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004c72:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004c76:	f043 0301 	orr.w	r3, r3, #1
 8004c7a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8004c7e:	bf00      	nop
 8004c80:	46bd      	mov	sp, r7
 8004c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c86:	4770      	bx	lr

08004c88 <LL_RCC_HSI48_Disable>:
{
 8004c88:	b480      	push	{r7}
 8004c8a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8004c8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004c90:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004c94:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004c98:	f023 0301 	bic.w	r3, r3, #1
 8004c9c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8004ca0:	bf00      	nop
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca8:	4770      	bx	lr

08004caa <LL_RCC_HSI48_IsReady>:
{
 8004caa:	b480      	push	{r7}
 8004cac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8004cae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004cb2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004cb6:	f003 0302 	and.w	r3, r3, #2
 8004cba:	2b02      	cmp	r3, #2
 8004cbc:	d101      	bne.n	8004cc2 <LL_RCC_HSI48_IsReady+0x18>
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	e000      	b.n	8004cc4 <LL_RCC_HSI48_IsReady+0x1a>
 8004cc2:	2300      	movs	r3, #0
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ccc:	4770      	bx	lr

08004cce <LL_RCC_LSE_Enable>:
{
 8004cce:	b480      	push	{r7}
 8004cd0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004cd2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004cd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cda:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004cde:	f043 0301 	orr.w	r3, r3, #1
 8004ce2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8004ce6:	bf00      	nop
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cee:	4770      	bx	lr

08004cf0 <LL_RCC_LSE_Disable>:
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004cf4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004cf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cfc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004d00:	f023 0301 	bic.w	r3, r3, #1
 8004d04:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8004d08:	bf00      	nop
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d10:	4770      	bx	lr

08004d12 <LL_RCC_LSE_EnableBypass>:
{
 8004d12:	b480      	push	{r7}
 8004d14:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004d16:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d1e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004d22:	f043 0304 	orr.w	r3, r3, #4
 8004d26:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8004d2a:	bf00      	nop
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d32:	4770      	bx	lr

08004d34 <LL_RCC_LSE_DisableBypass>:
{
 8004d34:	b480      	push	{r7}
 8004d36:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004d38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d40:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004d44:	f023 0304 	bic.w	r3, r3, #4
 8004d48:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8004d4c:	bf00      	nop
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d54:	4770      	bx	lr

08004d56 <LL_RCC_LSE_IsReady>:
{
 8004d56:	b480      	push	{r7}
 8004d58:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004d5a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d62:	f003 0302 	and.w	r3, r3, #2
 8004d66:	2b02      	cmp	r3, #2
 8004d68:	d101      	bne.n	8004d6e <LL_RCC_LSE_IsReady+0x18>
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e000      	b.n	8004d70 <LL_RCC_LSE_IsReady+0x1a>
 8004d6e:	2300      	movs	r3, #0
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	46bd      	mov	sp, r7
 8004d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d78:	4770      	bx	lr

08004d7a <LL_RCC_LSI1_Enable>:
{
 8004d7a:	b480      	push	{r7}
 8004d7c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004d7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d82:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d86:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004d8a:	f043 0301 	orr.w	r3, r3, #1
 8004d8e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8004d92:	bf00      	nop
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr

08004d9c <LL_RCC_LSI1_Disable>:
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004da0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004da4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004da8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004dac:	f023 0301 	bic.w	r3, r3, #1
 8004db0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8004db4:	bf00      	nop
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr

08004dbe <LL_RCC_LSI1_IsReady>:
{
 8004dbe:	b480      	push	{r7}
 8004dc0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8004dc2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004dc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004dca:	f003 0302 	and.w	r3, r3, #2
 8004dce:	2b02      	cmp	r3, #2
 8004dd0:	d101      	bne.n	8004dd6 <LL_RCC_LSI1_IsReady+0x18>
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e000      	b.n	8004dd8 <LL_RCC_LSI1_IsReady+0x1a>
 8004dd6:	2300      	movs	r3, #0
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr

08004de2 <LL_RCC_LSI2_Enable>:
{
 8004de2:	b480      	push	{r7}
 8004de4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004de6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004dea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004dee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004df2:	f043 0304 	orr.w	r3, r3, #4
 8004df6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8004dfa:	bf00      	nop
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e02:	4770      	bx	lr

08004e04 <LL_RCC_LSI2_Disable>:
{
 8004e04:	b480      	push	{r7}
 8004e06:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004e08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004e10:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004e14:	f023 0304 	bic.w	r3, r3, #4
 8004e18:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8004e1c:	bf00      	nop
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e24:	4770      	bx	lr

08004e26 <LL_RCC_LSI2_IsReady>:
{
 8004e26:	b480      	push	{r7}
 8004e28:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8004e2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004e32:	f003 0308 	and.w	r3, r3, #8
 8004e36:	2b08      	cmp	r3, #8
 8004e38:	d101      	bne.n	8004e3e <LL_RCC_LSI2_IsReady+0x18>
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	e000      	b.n	8004e40 <LL_RCC_LSI2_IsReady+0x1a>
 8004e3e:	2300      	movs	r3, #0
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	46bd      	mov	sp, r7
 8004e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e48:	4770      	bx	lr

08004e4a <LL_RCC_LSI2_SetTrimming>:
{
 8004e4a:	b480      	push	{r7}
 8004e4c:	b083      	sub	sp, #12
 8004e4e:	af00      	add	r7, sp, #0
 8004e50:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8004e52:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e56:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004e5a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	021b      	lsls	r3, r3, #8
 8004e62:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004e66:	4313      	orrs	r3, r2
 8004e68:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8004e6c:	bf00      	nop
 8004e6e:	370c      	adds	r7, #12
 8004e70:	46bd      	mov	sp, r7
 8004e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e76:	4770      	bx	lr

08004e78 <LL_RCC_MSI_Enable>:
{
 8004e78:	b480      	push	{r7}
 8004e7a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8004e7c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004e86:	f043 0301 	orr.w	r3, r3, #1
 8004e8a:	6013      	str	r3, [r2, #0]
}
 8004e8c:	bf00      	nop
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e94:	4770      	bx	lr

08004e96 <LL_RCC_MSI_Disable>:
{
 8004e96:	b480      	push	{r7}
 8004e98:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8004e9a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004ea4:	f023 0301 	bic.w	r3, r3, #1
 8004ea8:	6013      	str	r3, [r2, #0]
}
 8004eaa:	bf00      	nop
 8004eac:	46bd      	mov	sp, r7
 8004eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb2:	4770      	bx	lr

08004eb4 <LL_RCC_MSI_IsReady>:
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8004eb8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f003 0302 	and.w	r3, r3, #2
 8004ec2:	2b02      	cmp	r3, #2
 8004ec4:	d101      	bne.n	8004eca <LL_RCC_MSI_IsReady+0x16>
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	e000      	b.n	8004ecc <LL_RCC_MSI_IsReady+0x18>
 8004eca:	2300      	movs	r3, #0
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed4:	4770      	bx	lr

08004ed6 <LL_RCC_MSI_SetRange>:
{
 8004ed6:	b480      	push	{r7}
 8004ed8:	b083      	sub	sp, #12
 8004eda:	af00      	add	r7, sp, #0
 8004edc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8004ede:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004ee8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	600b      	str	r3, [r1, #0]
}
 8004ef2:	bf00      	nop
 8004ef4:	370c      	adds	r7, #12
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efc:	4770      	bx	lr

08004efe <LL_RCC_MSI_GetRange>:
{
 8004efe:	b480      	push	{r7}
 8004f00:	b083      	sub	sp, #12
 8004f02:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8004f04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004f0e:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2bb0      	cmp	r3, #176	@ 0xb0
 8004f14:	d901      	bls.n	8004f1a <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8004f16:	23b0      	movs	r3, #176	@ 0xb0
 8004f18:	607b      	str	r3, [r7, #4]
  return msiRange;
 8004f1a:	687b      	ldr	r3, [r7, #4]
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	370c      	adds	r7, #12
 8004f20:	46bd      	mov	sp, r7
 8004f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f26:	4770      	bx	lr

08004f28 <LL_RCC_MSI_SetCalibTrimming>:
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b083      	sub	sp, #12
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8004f30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	021b      	lsls	r3, r3, #8
 8004f3e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004f42:	4313      	orrs	r3, r2
 8004f44:	604b      	str	r3, [r1, #4]
}
 8004f46:	bf00      	nop
 8004f48:	370c      	adds	r7, #12
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f50:	4770      	bx	lr

08004f52 <LL_RCC_SetSysClkSource>:
{
 8004f52:	b480      	push	{r7}
 8004f54:	b083      	sub	sp, #12
 8004f56:	af00      	add	r7, sp, #0
 8004f58:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8004f5a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	f023 0203 	bic.w	r2, r3, #3
 8004f64:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	608b      	str	r3, [r1, #8]
}
 8004f6e:	bf00      	nop
 8004f70:	370c      	adds	r7, #12
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr

08004f7a <LL_RCC_GetSysClkSource>:
{
 8004f7a:	b480      	push	{r7}
 8004f7c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004f7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	f003 030c 	and.w	r3, r3, #12
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f90:	4770      	bx	lr

08004f92 <LL_RCC_SetAHBPrescaler>:
{
 8004f92:	b480      	push	{r7}
 8004f94:	b083      	sub	sp, #12
 8004f96:	af00      	add	r7, sp, #0
 8004f98:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8004f9a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004fa4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	4313      	orrs	r3, r2
 8004fac:	608b      	str	r3, [r1, #8]
}
 8004fae:	bf00      	nop
 8004fb0:	370c      	adds	r7, #12
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb8:	4770      	bx	lr

08004fba <LL_C2_RCC_SetAHBPrescaler>:
{
 8004fba:	b480      	push	{r7}
 8004fbc:	b083      	sub	sp, #12
 8004fbe:	af00      	add	r7, sp, #0
 8004fc0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8004fc2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004fc6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8004fca:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004fce:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8004fda:	bf00      	nop
 8004fdc:	370c      	adds	r7, #12
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe4:	4770      	bx	lr

08004fe6 <LL_RCC_SetAHB4Prescaler>:
{
 8004fe6:	b480      	push	{r7}
 8004fe8:	b083      	sub	sp, #12
 8004fea:	af00      	add	r7, sp, #0
 8004fec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8004fee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ff2:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8004ff6:	f023 020f 	bic.w	r2, r3, #15
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	091b      	lsrs	r3, r3, #4
 8004ffe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005002:	4313      	orrs	r3, r2
 8005004:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8005008:	bf00      	nop
 800500a:	370c      	adds	r7, #12
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr

08005014 <LL_RCC_SetAPB1Prescaler>:
{
 8005014:	b480      	push	{r7}
 8005016:	b083      	sub	sp, #12
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800501c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005026:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	4313      	orrs	r3, r2
 800502e:	608b      	str	r3, [r1, #8]
}
 8005030:	bf00      	nop
 8005032:	370c      	adds	r7, #12
 8005034:	46bd      	mov	sp, r7
 8005036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503a:	4770      	bx	lr

0800503c <LL_RCC_SetAPB2Prescaler>:
{
 800503c:	b480      	push	{r7}
 800503e:	b083      	sub	sp, #12
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8005044:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800504e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	4313      	orrs	r3, r2
 8005056:	608b      	str	r3, [r1, #8]
}
 8005058:	bf00      	nop
 800505a:	370c      	adds	r7, #12
 800505c:	46bd      	mov	sp, r7
 800505e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005062:	4770      	bx	lr

08005064 <LL_RCC_GetAHBPrescaler>:
{
 8005064:	b480      	push	{r7}
 8005066:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005068:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800506c:	689b      	ldr	r3, [r3, #8]
 800506e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8005072:	4618      	mov	r0, r3
 8005074:	46bd      	mov	sp, r7
 8005076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507a:	4770      	bx	lr

0800507c <LL_RCC_GetAHB4Prescaler>:
{
 800507c:	b480      	push	{r7}
 800507e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8005080:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005084:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005088:	011b      	lsls	r3, r3, #4
 800508a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800508e:	4618      	mov	r0, r3
 8005090:	46bd      	mov	sp, r7
 8005092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005096:	4770      	bx	lr

08005098 <LL_RCC_GetAPB1Prescaler>:
{
 8005098:	b480      	push	{r7}
 800509a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800509c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 80050a6:	4618      	mov	r0, r3
 80050a8:	46bd      	mov	sp, r7
 80050aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ae:	4770      	bx	lr

080050b0 <LL_RCC_GetAPB2Prescaler>:
{
 80050b0:	b480      	push	{r7}
 80050b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80050b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80050b8:	689b      	ldr	r3, [r3, #8]
 80050ba:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 80050be:	4618      	mov	r0, r3
 80050c0:	46bd      	mov	sp, r7
 80050c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c6:	4770      	bx	lr

080050c8 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80050c8:	b480      	push	{r7}
 80050ca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80050cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80050d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80050da:	6013      	str	r3, [r2, #0]
}
 80050dc:	bf00      	nop
 80050de:	46bd      	mov	sp, r7
 80050e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e4:	4770      	bx	lr

080050e6 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80050e6:	b480      	push	{r7}
 80050e8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80050ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80050f4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80050f8:	6013      	str	r3, [r2, #0]
}
 80050fa:	bf00      	nop
 80050fc:	46bd      	mov	sp, r7
 80050fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005102:	4770      	bx	lr

08005104 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8005104:	b480      	push	{r7}
 8005106:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005108:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005112:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005116:	d101      	bne.n	800511c <LL_RCC_PLL_IsReady+0x18>
 8005118:	2301      	movs	r3, #1
 800511a:	e000      	b.n	800511e <LL_RCC_PLL_IsReady+0x1a>
 800511c:	2300      	movs	r3, #0
}
 800511e:	4618      	mov	r0, r3
 8005120:	46bd      	mov	sp, r7
 8005122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005126:	4770      	bx	lr

08005128 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8005128:	b480      	push	{r7}
 800512a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800512c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005130:	68db      	ldr	r3, [r3, #12]
 8005132:	0a1b      	lsrs	r3, r3, #8
 8005134:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8005138:	4618      	mov	r0, r3
 800513a:	46bd      	mov	sp, r7
 800513c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005140:	4770      	bx	lr

08005142 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8005142:	b480      	push	{r7}
 8005144:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8005146:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800514a:	68db      	ldr	r3, [r3, #12]
 800514c:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8005150:	4618      	mov	r0, r3
 8005152:	46bd      	mov	sp, r7
 8005154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005158:	4770      	bx	lr

0800515a <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800515a:	b480      	push	{r7}
 800515c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800515e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005162:	68db      	ldr	r3, [r3, #12]
 8005164:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8005168:	4618      	mov	r0, r3
 800516a:	46bd      	mov	sp, r7
 800516c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005170:	4770      	bx	lr

08005172 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8005172:	b480      	push	{r7}
 8005174:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005176:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800517a:	68db      	ldr	r3, [r3, #12]
 800517c:	f003 0303 	and.w	r3, r3, #3
}
 8005180:	4618      	mov	r0, r3
 8005182:	46bd      	mov	sp, r7
 8005184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005188:	4770      	bx	lr

0800518a <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800518a:	b480      	push	{r7}
 800518c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800518e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005198:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800519c:	d101      	bne.n	80051a2 <LL_RCC_IsActiveFlag_HPRE+0x18>
 800519e:	2301      	movs	r3, #1
 80051a0:	e000      	b.n	80051a4 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80051a2:	2300      	movs	r3, #0
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	46bd      	mov	sp, r7
 80051a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ac:	4770      	bx	lr

080051ae <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80051ae:	b480      	push	{r7}
 80051b0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80051b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80051b6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80051ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051be:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80051c2:	d101      	bne.n	80051c8 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80051c4:	2301      	movs	r3, #1
 80051c6:	e000      	b.n	80051ca <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80051c8:	2300      	movs	r3, #0
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	46bd      	mov	sp, r7
 80051ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d2:	4770      	bx	lr

080051d4 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80051d4:	b480      	push	{r7}
 80051d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80051d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80051dc:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80051e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80051e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80051e8:	d101      	bne.n	80051ee <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80051ea:	2301      	movs	r3, #1
 80051ec:	e000      	b.n	80051f0 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80051ee:	2300      	movs	r3, #0
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	46bd      	mov	sp, r7
 80051f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f8:	4770      	bx	lr

080051fa <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80051fa:	b480      	push	{r7}
 80051fc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80051fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005208:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800520c:	d101      	bne.n	8005212 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800520e:	2301      	movs	r3, #1
 8005210:	e000      	b.n	8005214 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8005212:	2300      	movs	r3, #0
}
 8005214:	4618      	mov	r0, r3
 8005216:	46bd      	mov	sp, r7
 8005218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521c:	4770      	bx	lr

0800521e <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800521e:	b480      	push	{r7}
 8005220:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8005222:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005226:	689b      	ldr	r3, [r3, #8]
 8005228:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800522c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005230:	d101      	bne.n	8005236 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8005232:	2301      	movs	r3, #1
 8005234:	e000      	b.n	8005238 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8005236:	2300      	movs	r3, #0
}
 8005238:	4618      	mov	r0, r3
 800523a:	46bd      	mov	sp, r7
 800523c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005240:	4770      	bx	lr
	...

08005244 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005244:	b590      	push	{r4, r7, lr}
 8005246:	b08d      	sub	sp, #52	@ 0x34
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d101      	bne.n	8005256 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005252:	2301      	movs	r3, #1
 8005254:	e363      	b.n	800591e <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f003 0320 	and.w	r3, r3, #32
 800525e:	2b00      	cmp	r3, #0
 8005260:	f000 808d 	beq.w	800537e <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005264:	f7ff fe89 	bl	8004f7a <LL_RCC_GetSysClkSource>
 8005268:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800526a:	f7ff ff82 	bl	8005172 <LL_RCC_PLL_GetMainSource>
 800526e:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005270:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005272:	2b00      	cmp	r3, #0
 8005274:	d005      	beq.n	8005282 <HAL_RCC_OscConfig+0x3e>
 8005276:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005278:	2b0c      	cmp	r3, #12
 800527a:	d147      	bne.n	800530c <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800527c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800527e:	2b01      	cmp	r3, #1
 8005280:	d144      	bne.n	800530c <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	69db      	ldr	r3, [r3, #28]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d101      	bne.n	800528e <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800528a:	2301      	movs	r3, #1
 800528c:	e347      	b.n	800591e <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8005292:	f7ff fe34 	bl	8004efe <LL_RCC_MSI_GetRange>
 8005296:	4603      	mov	r3, r0
 8005298:	429c      	cmp	r4, r3
 800529a:	d914      	bls.n	80052c6 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052a0:	4618      	mov	r0, r3
 80052a2:	f000 fd2f 	bl	8005d04 <RCC_SetFlashLatencyFromMSIRange>
 80052a6:	4603      	mov	r3, r0
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d001      	beq.n	80052b0 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 80052ac:	2301      	movs	r3, #1
 80052ae:	e336      	b.n	800591e <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052b4:	4618      	mov	r0, r3
 80052b6:	f7ff fe0e 	bl	8004ed6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6a1b      	ldr	r3, [r3, #32]
 80052be:	4618      	mov	r0, r3
 80052c0:	f7ff fe32 	bl	8004f28 <LL_RCC_MSI_SetCalibTrimming>
 80052c4:	e013      	b.n	80052ee <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052ca:	4618      	mov	r0, r3
 80052cc:	f7ff fe03 	bl	8004ed6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6a1b      	ldr	r3, [r3, #32]
 80052d4:	4618      	mov	r0, r3
 80052d6:	f7ff fe27 	bl	8004f28 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052de:	4618      	mov	r0, r3
 80052e0:	f000 fd10 	bl	8005d04 <RCC_SetFlashLatencyFromMSIRange>
 80052e4:	4603      	mov	r3, r0
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d001      	beq.n	80052ee <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	e317      	b.n	800591e <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80052ee:	f000 fcc9 	bl	8005c84 <HAL_RCC_GetHCLKFreq>
 80052f2:	4603      	mov	r3, r0
 80052f4:	4aa4      	ldr	r2, [pc, #656]	@ (8005588 <HAL_RCC_OscConfig+0x344>)
 80052f6:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80052f8:	4ba4      	ldr	r3, [pc, #656]	@ (800558c <HAL_RCC_OscConfig+0x348>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4618      	mov	r0, r3
 80052fe:	f7fd feef 	bl	80030e0 <HAL_InitTick>
 8005302:	4603      	mov	r3, r0
 8005304:	2b00      	cmp	r3, #0
 8005306:	d039      	beq.n	800537c <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8005308:	2301      	movs	r3, #1
 800530a:	e308      	b.n	800591e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	69db      	ldr	r3, [r3, #28]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d01e      	beq.n	8005352 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005314:	f7ff fdb0 	bl	8004e78 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005318:	f7fd ff30 	bl	800317c <HAL_GetTick>
 800531c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800531e:	e008      	b.n	8005332 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005320:	f7fd ff2c 	bl	800317c <HAL_GetTick>
 8005324:	4602      	mov	r2, r0
 8005326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005328:	1ad3      	subs	r3, r2, r3
 800532a:	2b02      	cmp	r3, #2
 800532c:	d901      	bls.n	8005332 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800532e:	2303      	movs	r3, #3
 8005330:	e2f5      	b.n	800591e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8005332:	f7ff fdbf 	bl	8004eb4 <LL_RCC_MSI_IsReady>
 8005336:	4603      	mov	r3, r0
 8005338:	2b00      	cmp	r3, #0
 800533a:	d0f1      	beq.n	8005320 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005340:	4618      	mov	r0, r3
 8005342:	f7ff fdc8 	bl	8004ed6 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6a1b      	ldr	r3, [r3, #32]
 800534a:	4618      	mov	r0, r3
 800534c:	f7ff fdec 	bl	8004f28 <LL_RCC_MSI_SetCalibTrimming>
 8005350:	e015      	b.n	800537e <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005352:	f7ff fda0 	bl	8004e96 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005356:	f7fd ff11 	bl	800317c <HAL_GetTick>
 800535a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800535c:	e008      	b.n	8005370 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800535e:	f7fd ff0d 	bl	800317c <HAL_GetTick>
 8005362:	4602      	mov	r2, r0
 8005364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005366:	1ad3      	subs	r3, r2, r3
 8005368:	2b02      	cmp	r3, #2
 800536a:	d901      	bls.n	8005370 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800536c:	2303      	movs	r3, #3
 800536e:	e2d6      	b.n	800591e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8005370:	f7ff fda0 	bl	8004eb4 <LL_RCC_MSI_IsReady>
 8005374:	4603      	mov	r3, r0
 8005376:	2b00      	cmp	r3, #0
 8005378:	d1f1      	bne.n	800535e <HAL_RCC_OscConfig+0x11a>
 800537a:	e000      	b.n	800537e <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800537c:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f003 0301 	and.w	r3, r3, #1
 8005386:	2b00      	cmp	r3, #0
 8005388:	d047      	beq.n	800541a <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800538a:	f7ff fdf6 	bl	8004f7a <LL_RCC_GetSysClkSource>
 800538e:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005390:	f7ff feef 	bl	8005172 <LL_RCC_PLL_GetMainSource>
 8005394:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8005396:	6a3b      	ldr	r3, [r7, #32]
 8005398:	2b08      	cmp	r3, #8
 800539a:	d005      	beq.n	80053a8 <HAL_RCC_OscConfig+0x164>
 800539c:	6a3b      	ldr	r3, [r7, #32]
 800539e:	2b0c      	cmp	r3, #12
 80053a0:	d108      	bne.n	80053b4 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80053a2:	69fb      	ldr	r3, [r7, #28]
 80053a4:	2b03      	cmp	r3, #3
 80053a6:	d105      	bne.n	80053b4 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d134      	bne.n	800541a <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80053b0:	2301      	movs	r3, #1
 80053b2:	e2b4      	b.n	800591e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80053bc:	d102      	bne.n	80053c4 <HAL_RCC_OscConfig+0x180>
 80053be:	f7ff fbdd 	bl	8004b7c <LL_RCC_HSE_Enable>
 80053c2:	e001      	b.n	80053c8 <HAL_RCC_OscConfig+0x184>
 80053c4:	f7ff fbe9 	bl	8004b9a <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d012      	beq.n	80053f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053d0:	f7fd fed4 	bl	800317c <HAL_GetTick>
 80053d4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80053d6:	e008      	b.n	80053ea <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80053d8:	f7fd fed0 	bl	800317c <HAL_GetTick>
 80053dc:	4602      	mov	r2, r0
 80053de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053e0:	1ad3      	subs	r3, r2, r3
 80053e2:	2b64      	cmp	r3, #100	@ 0x64
 80053e4:	d901      	bls.n	80053ea <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80053e6:	2303      	movs	r3, #3
 80053e8:	e299      	b.n	800591e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 80053ea:	f7ff fbe5 	bl	8004bb8 <LL_RCC_HSE_IsReady>
 80053ee:	4603      	mov	r3, r0
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d0f1      	beq.n	80053d8 <HAL_RCC_OscConfig+0x194>
 80053f4:	e011      	b.n	800541a <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053f6:	f7fd fec1 	bl	800317c <HAL_GetTick>
 80053fa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80053fc:	e008      	b.n	8005410 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80053fe:	f7fd febd 	bl	800317c <HAL_GetTick>
 8005402:	4602      	mov	r2, r0
 8005404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005406:	1ad3      	subs	r3, r2, r3
 8005408:	2b64      	cmp	r3, #100	@ 0x64
 800540a:	d901      	bls.n	8005410 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800540c:	2303      	movs	r3, #3
 800540e:	e286      	b.n	800591e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8005410:	f7ff fbd2 	bl	8004bb8 <LL_RCC_HSE_IsReady>
 8005414:	4603      	mov	r3, r0
 8005416:	2b00      	cmp	r3, #0
 8005418:	d1f1      	bne.n	80053fe <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f003 0302 	and.w	r3, r3, #2
 8005422:	2b00      	cmp	r3, #0
 8005424:	d04c      	beq.n	80054c0 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005426:	f7ff fda8 	bl	8004f7a <LL_RCC_GetSysClkSource>
 800542a:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800542c:	f7ff fea1 	bl	8005172 <LL_RCC_PLL_GetMainSource>
 8005430:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8005432:	69bb      	ldr	r3, [r7, #24]
 8005434:	2b04      	cmp	r3, #4
 8005436:	d005      	beq.n	8005444 <HAL_RCC_OscConfig+0x200>
 8005438:	69bb      	ldr	r3, [r7, #24]
 800543a:	2b0c      	cmp	r3, #12
 800543c:	d10e      	bne.n	800545c <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	2b02      	cmp	r3, #2
 8005442:	d10b      	bne.n	800545c <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	68db      	ldr	r3, [r3, #12]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d101      	bne.n	8005450 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 800544c:	2301      	movs	r3, #1
 800544e:	e266      	b.n	800591e <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	691b      	ldr	r3, [r3, #16]
 8005454:	4618      	mov	r0, r3
 8005456:	f7ff fbf1 	bl	8004c3c <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800545a:	e031      	b.n	80054c0 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	68db      	ldr	r3, [r3, #12]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d019      	beq.n	8005498 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005464:	f7ff fbba 	bl	8004bdc <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005468:	f7fd fe88 	bl	800317c <HAL_GetTick>
 800546c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800546e:	e008      	b.n	8005482 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005470:	f7fd fe84 	bl	800317c <HAL_GetTick>
 8005474:	4602      	mov	r2, r0
 8005476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005478:	1ad3      	subs	r3, r2, r3
 800547a:	2b02      	cmp	r3, #2
 800547c:	d901      	bls.n	8005482 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800547e:	2303      	movs	r3, #3
 8005480:	e24d      	b.n	800591e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8005482:	f7ff fbc9 	bl	8004c18 <LL_RCC_HSI_IsReady>
 8005486:	4603      	mov	r3, r0
 8005488:	2b00      	cmp	r3, #0
 800548a:	d0f1      	beq.n	8005470 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	691b      	ldr	r3, [r3, #16]
 8005490:	4618      	mov	r0, r3
 8005492:	f7ff fbd3 	bl	8004c3c <LL_RCC_HSI_SetCalibTrimming>
 8005496:	e013      	b.n	80054c0 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005498:	f7ff fbaf 	bl	8004bfa <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800549c:	f7fd fe6e 	bl	800317c <HAL_GetTick>
 80054a0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80054a2:	e008      	b.n	80054b6 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80054a4:	f7fd fe6a 	bl	800317c <HAL_GetTick>
 80054a8:	4602      	mov	r2, r0
 80054aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054ac:	1ad3      	subs	r3, r2, r3
 80054ae:	2b02      	cmp	r3, #2
 80054b0:	d901      	bls.n	80054b6 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80054b2:	2303      	movs	r3, #3
 80054b4:	e233      	b.n	800591e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 80054b6:	f7ff fbaf 	bl	8004c18 <LL_RCC_HSI_IsReady>
 80054ba:	4603      	mov	r3, r0
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d1f1      	bne.n	80054a4 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f003 0308 	and.w	r3, r3, #8
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d106      	bne.n	80054da <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	f000 80a3 	beq.w	8005620 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	695b      	ldr	r3, [r3, #20]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d076      	beq.n	80055d0 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f003 0310 	and.w	r3, r3, #16
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d046      	beq.n	800557c <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80054ee:	f7ff fc66 	bl	8004dbe <LL_RCC_LSI1_IsReady>
 80054f2:	4603      	mov	r3, r0
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d113      	bne.n	8005520 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80054f8:	f7ff fc3f 	bl	8004d7a <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80054fc:	f7fd fe3e 	bl	800317c <HAL_GetTick>
 8005500:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8005502:	e008      	b.n	8005516 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005504:	f7fd fe3a 	bl	800317c <HAL_GetTick>
 8005508:	4602      	mov	r2, r0
 800550a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800550c:	1ad3      	subs	r3, r2, r3
 800550e:	2b02      	cmp	r3, #2
 8005510:	d901      	bls.n	8005516 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8005512:	2303      	movs	r3, #3
 8005514:	e203      	b.n	800591e <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8005516:	f7ff fc52 	bl	8004dbe <LL_RCC_LSI1_IsReady>
 800551a:	4603      	mov	r3, r0
 800551c:	2b00      	cmp	r3, #0
 800551e:	d0f1      	beq.n	8005504 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8005520:	f7ff fc5f 	bl	8004de2 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005524:	f7fd fe2a 	bl	800317c <HAL_GetTick>
 8005528:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800552a:	e008      	b.n	800553e <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800552c:	f7fd fe26 	bl	800317c <HAL_GetTick>
 8005530:	4602      	mov	r2, r0
 8005532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005534:	1ad3      	subs	r3, r2, r3
 8005536:	2b03      	cmp	r3, #3
 8005538:	d901      	bls.n	800553e <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800553a:	2303      	movs	r3, #3
 800553c:	e1ef      	b.n	800591e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800553e:	f7ff fc72 	bl	8004e26 <LL_RCC_LSI2_IsReady>
 8005542:	4603      	mov	r3, r0
 8005544:	2b00      	cmp	r3, #0
 8005546:	d0f1      	beq.n	800552c <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	699b      	ldr	r3, [r3, #24]
 800554c:	4618      	mov	r0, r3
 800554e:	f7ff fc7c 	bl	8004e4a <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8005552:	f7ff fc23 	bl	8004d9c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005556:	f7fd fe11 	bl	800317c <HAL_GetTick>
 800555a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800555c:	e008      	b.n	8005570 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800555e:	f7fd fe0d 	bl	800317c <HAL_GetTick>
 8005562:	4602      	mov	r2, r0
 8005564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005566:	1ad3      	subs	r3, r2, r3
 8005568:	2b02      	cmp	r3, #2
 800556a:	d901      	bls.n	8005570 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 800556c:	2303      	movs	r3, #3
 800556e:	e1d6      	b.n	800591e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8005570:	f7ff fc25 	bl	8004dbe <LL_RCC_LSI1_IsReady>
 8005574:	4603      	mov	r3, r0
 8005576:	2b00      	cmp	r3, #0
 8005578:	d1f1      	bne.n	800555e <HAL_RCC_OscConfig+0x31a>
 800557a:	e051      	b.n	8005620 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800557c:	f7ff fbfd 	bl	8004d7a <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005580:	f7fd fdfc 	bl	800317c <HAL_GetTick>
 8005584:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8005586:	e00c      	b.n	80055a2 <HAL_RCC_OscConfig+0x35e>
 8005588:	20000008 	.word	0x20000008
 800558c:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005590:	f7fd fdf4 	bl	800317c <HAL_GetTick>
 8005594:	4602      	mov	r2, r0
 8005596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005598:	1ad3      	subs	r3, r2, r3
 800559a:	2b02      	cmp	r3, #2
 800559c:	d901      	bls.n	80055a2 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800559e:	2303      	movs	r3, #3
 80055a0:	e1bd      	b.n	800591e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80055a2:	f7ff fc0c 	bl	8004dbe <LL_RCC_LSI1_IsReady>
 80055a6:	4603      	mov	r3, r0
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d0f1      	beq.n	8005590 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80055ac:	f7ff fc2a 	bl	8004e04 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80055b0:	e008      	b.n	80055c4 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80055b2:	f7fd fde3 	bl	800317c <HAL_GetTick>
 80055b6:	4602      	mov	r2, r0
 80055b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055ba:	1ad3      	subs	r3, r2, r3
 80055bc:	2b03      	cmp	r3, #3
 80055be:	d901      	bls.n	80055c4 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 80055c0:	2303      	movs	r3, #3
 80055c2:	e1ac      	b.n	800591e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80055c4:	f7ff fc2f 	bl	8004e26 <LL_RCC_LSI2_IsReady>
 80055c8:	4603      	mov	r3, r0
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d1f1      	bne.n	80055b2 <HAL_RCC_OscConfig+0x36e>
 80055ce:	e027      	b.n	8005620 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80055d0:	f7ff fc18 	bl	8004e04 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055d4:	f7fd fdd2 	bl	800317c <HAL_GetTick>
 80055d8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80055da:	e008      	b.n	80055ee <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80055dc:	f7fd fdce 	bl	800317c <HAL_GetTick>
 80055e0:	4602      	mov	r2, r0
 80055e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055e4:	1ad3      	subs	r3, r2, r3
 80055e6:	2b03      	cmp	r3, #3
 80055e8:	d901      	bls.n	80055ee <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80055ea:	2303      	movs	r3, #3
 80055ec:	e197      	b.n	800591e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80055ee:	f7ff fc1a 	bl	8004e26 <LL_RCC_LSI2_IsReady>
 80055f2:	4603      	mov	r3, r0
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d1f1      	bne.n	80055dc <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80055f8:	f7ff fbd0 	bl	8004d9c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055fc:	f7fd fdbe 	bl	800317c <HAL_GetTick>
 8005600:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8005602:	e008      	b.n	8005616 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005604:	f7fd fdba 	bl	800317c <HAL_GetTick>
 8005608:	4602      	mov	r2, r0
 800560a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800560c:	1ad3      	subs	r3, r2, r3
 800560e:	2b02      	cmp	r3, #2
 8005610:	d901      	bls.n	8005616 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8005612:	2303      	movs	r3, #3
 8005614:	e183      	b.n	800591e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8005616:	f7ff fbd2 	bl	8004dbe <LL_RCC_LSI1_IsReady>
 800561a:	4603      	mov	r3, r0
 800561c:	2b00      	cmp	r3, #0
 800561e:	d1f1      	bne.n	8005604 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f003 0304 	and.w	r3, r3, #4
 8005628:	2b00      	cmp	r3, #0
 800562a:	d05b      	beq.n	80056e4 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800562c:	4ba7      	ldr	r3, [pc, #668]	@ (80058cc <HAL_RCC_OscConfig+0x688>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005634:	2b00      	cmp	r3, #0
 8005636:	d114      	bne.n	8005662 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005638:	f7ff fa70 	bl	8004b1c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800563c:	f7fd fd9e 	bl	800317c <HAL_GetTick>
 8005640:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005642:	e008      	b.n	8005656 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005644:	f7fd fd9a 	bl	800317c <HAL_GetTick>
 8005648:	4602      	mov	r2, r0
 800564a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800564c:	1ad3      	subs	r3, r2, r3
 800564e:	2b02      	cmp	r3, #2
 8005650:	d901      	bls.n	8005656 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8005652:	2303      	movs	r3, #3
 8005654:	e163      	b.n	800591e <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005656:	4b9d      	ldr	r3, [pc, #628]	@ (80058cc <HAL_RCC_OscConfig+0x688>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800565e:	2b00      	cmp	r3, #0
 8005660:	d0f0      	beq.n	8005644 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	689b      	ldr	r3, [r3, #8]
 8005666:	2b01      	cmp	r3, #1
 8005668:	d102      	bne.n	8005670 <HAL_RCC_OscConfig+0x42c>
 800566a:	f7ff fb30 	bl	8004cce <LL_RCC_LSE_Enable>
 800566e:	e00c      	b.n	800568a <HAL_RCC_OscConfig+0x446>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	689b      	ldr	r3, [r3, #8]
 8005674:	2b05      	cmp	r3, #5
 8005676:	d104      	bne.n	8005682 <HAL_RCC_OscConfig+0x43e>
 8005678:	f7ff fb4b 	bl	8004d12 <LL_RCC_LSE_EnableBypass>
 800567c:	f7ff fb27 	bl	8004cce <LL_RCC_LSE_Enable>
 8005680:	e003      	b.n	800568a <HAL_RCC_OscConfig+0x446>
 8005682:	f7ff fb35 	bl	8004cf0 <LL_RCC_LSE_Disable>
 8005686:	f7ff fb55 	bl	8004d34 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	689b      	ldr	r3, [r3, #8]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d014      	beq.n	80056bc <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005692:	f7fd fd73 	bl	800317c <HAL_GetTick>
 8005696:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8005698:	e00a      	b.n	80056b0 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800569a:	f7fd fd6f 	bl	800317c <HAL_GetTick>
 800569e:	4602      	mov	r2, r0
 80056a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056a2:	1ad3      	subs	r3, r2, r3
 80056a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d901      	bls.n	80056b0 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80056ac:	2303      	movs	r3, #3
 80056ae:	e136      	b.n	800591e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 80056b0:	f7ff fb51 	bl	8004d56 <LL_RCC_LSE_IsReady>
 80056b4:	4603      	mov	r3, r0
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d0ef      	beq.n	800569a <HAL_RCC_OscConfig+0x456>
 80056ba:	e013      	b.n	80056e4 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056bc:	f7fd fd5e 	bl	800317c <HAL_GetTick>
 80056c0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80056c2:	e00a      	b.n	80056da <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056c4:	f7fd fd5a 	bl	800317c <HAL_GetTick>
 80056c8:	4602      	mov	r2, r0
 80056ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056cc:	1ad3      	subs	r3, r2, r3
 80056ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d901      	bls.n	80056da <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 80056d6:	2303      	movs	r3, #3
 80056d8:	e121      	b.n	800591e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 80056da:	f7ff fb3c 	bl	8004d56 <LL_RCC_LSE_IsReady>
 80056de:	4603      	mov	r3, r0
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d1ef      	bne.n	80056c4 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d02c      	beq.n	800574a <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d014      	beq.n	8005722 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80056f8:	f7ff fab5 	bl	8004c66 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056fc:	f7fd fd3e 	bl	800317c <HAL_GetTick>
 8005700:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8005702:	e008      	b.n	8005716 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005704:	f7fd fd3a 	bl	800317c <HAL_GetTick>
 8005708:	4602      	mov	r2, r0
 800570a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800570c:	1ad3      	subs	r3, r2, r3
 800570e:	2b02      	cmp	r3, #2
 8005710:	d901      	bls.n	8005716 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8005712:	2303      	movs	r3, #3
 8005714:	e103      	b.n	800591e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8005716:	f7ff fac8 	bl	8004caa <LL_RCC_HSI48_IsReady>
 800571a:	4603      	mov	r3, r0
 800571c:	2b00      	cmp	r3, #0
 800571e:	d0f1      	beq.n	8005704 <HAL_RCC_OscConfig+0x4c0>
 8005720:	e013      	b.n	800574a <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005722:	f7ff fab1 	bl	8004c88 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005726:	f7fd fd29 	bl	800317c <HAL_GetTick>
 800572a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800572c:	e008      	b.n	8005740 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800572e:	f7fd fd25 	bl	800317c <HAL_GetTick>
 8005732:	4602      	mov	r2, r0
 8005734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005736:	1ad3      	subs	r3, r2, r3
 8005738:	2b02      	cmp	r3, #2
 800573a:	d901      	bls.n	8005740 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 800573c:	2303      	movs	r3, #3
 800573e:	e0ee      	b.n	800591e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8005740:	f7ff fab3 	bl	8004caa <LL_RCC_HSI48_IsReady>
 8005744:	4603      	mov	r3, r0
 8005746:	2b00      	cmp	r3, #0
 8005748:	d1f1      	bne.n	800572e <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800574e:	2b00      	cmp	r3, #0
 8005750:	f000 80e4 	beq.w	800591c <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005754:	f7ff fc11 	bl	8004f7a <LL_RCC_GetSysClkSource>
 8005758:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800575a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800575e:	68db      	ldr	r3, [r3, #12]
 8005760:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005766:	2b02      	cmp	r3, #2
 8005768:	f040 80b4 	bne.w	80058d4 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f003 0203 	and.w	r2, r3, #3
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005776:	429a      	cmp	r2, r3
 8005778:	d123      	bne.n	80057c2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005784:	429a      	cmp	r2, r3
 8005786:	d11c      	bne.n	80057c2 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	0a1b      	lsrs	r3, r3, #8
 800578c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005794:	429a      	cmp	r2, r3
 8005796:	d114      	bne.n	80057c2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80057a2:	429a      	cmp	r2, r3
 80057a4:	d10d      	bne.n	80057c2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80057b0:	429a      	cmp	r2, r3
 80057b2:	d106      	bne.n	80057c2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80057be:	429a      	cmp	r2, r3
 80057c0:	d05d      	beq.n	800587e <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	2b0c      	cmp	r3, #12
 80057c6:	d058      	beq.n	800587a <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80057c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d001      	beq.n	80057da <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 80057d6:	2301      	movs	r3, #1
 80057d8:	e0a1      	b.n	800591e <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80057da:	f7ff fc84 	bl	80050e6 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80057de:	f7fd fccd 	bl	800317c <HAL_GetTick>
 80057e2:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80057e4:	e008      	b.n	80057f8 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057e6:	f7fd fcc9 	bl	800317c <HAL_GetTick>
 80057ea:	4602      	mov	r2, r0
 80057ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057ee:	1ad3      	subs	r3, r2, r3
 80057f0:	2b02      	cmp	r3, #2
 80057f2:	d901      	bls.n	80057f8 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 80057f4:	2303      	movs	r3, #3
 80057f6:	e092      	b.n	800591e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80057f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005802:	2b00      	cmp	r3, #0
 8005804:	d1ef      	bne.n	80057e6 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005806:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800580a:	68da      	ldr	r2, [r3, #12]
 800580c:	4b30      	ldr	r3, [pc, #192]	@ (80058d0 <HAL_RCC_OscConfig+0x68c>)
 800580e:	4013      	ands	r3, r2
 8005810:	687a      	ldr	r2, [r7, #4]
 8005812:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8005814:	687a      	ldr	r2, [r7, #4]
 8005816:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005818:	4311      	orrs	r1, r2
 800581a:	687a      	ldr	r2, [r7, #4]
 800581c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800581e:	0212      	lsls	r2, r2, #8
 8005820:	4311      	orrs	r1, r2
 8005822:	687a      	ldr	r2, [r7, #4]
 8005824:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005826:	4311      	orrs	r1, r2
 8005828:	687a      	ldr	r2, [r7, #4]
 800582a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800582c:	4311      	orrs	r1, r2
 800582e:	687a      	ldr	r2, [r7, #4]
 8005830:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8005832:	430a      	orrs	r2, r1
 8005834:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005838:	4313      	orrs	r3, r2
 800583a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800583c:	f7ff fc44 	bl	80050c8 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005840:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005844:	68db      	ldr	r3, [r3, #12]
 8005846:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800584a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800584e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005850:	f7fd fc94 	bl	800317c <HAL_GetTick>
 8005854:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005856:	e008      	b.n	800586a <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005858:	f7fd fc90 	bl	800317c <HAL_GetTick>
 800585c:	4602      	mov	r2, r0
 800585e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005860:	1ad3      	subs	r3, r2, r3
 8005862:	2b02      	cmp	r3, #2
 8005864:	d901      	bls.n	800586a <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8005866:	2303      	movs	r3, #3
 8005868:	e059      	b.n	800591e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800586a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005874:	2b00      	cmp	r3, #0
 8005876:	d0ef      	beq.n	8005858 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005878:	e050      	b.n	800591c <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800587a:	2301      	movs	r3, #1
 800587c:	e04f      	b.n	800591e <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800587e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005888:	2b00      	cmp	r3, #0
 800588a:	d147      	bne.n	800591c <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800588c:	f7ff fc1c 	bl	80050c8 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005890:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005894:	68db      	ldr	r3, [r3, #12]
 8005896:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800589a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800589e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80058a0:	f7fd fc6c 	bl	800317c <HAL_GetTick>
 80058a4:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80058a6:	e008      	b.n	80058ba <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058a8:	f7fd fc68 	bl	800317c <HAL_GetTick>
 80058ac:	4602      	mov	r2, r0
 80058ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058b0:	1ad3      	subs	r3, r2, r3
 80058b2:	2b02      	cmp	r3, #2
 80058b4:	d901      	bls.n	80058ba <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 80058b6:	2303      	movs	r3, #3
 80058b8:	e031      	b.n	800591e <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80058ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d0ef      	beq.n	80058a8 <HAL_RCC_OscConfig+0x664>
 80058c8:	e028      	b.n	800591c <HAL_RCC_OscConfig+0x6d8>
 80058ca:	bf00      	nop
 80058cc:	58000400 	.word	0x58000400
 80058d0:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	2b0c      	cmp	r3, #12
 80058d8:	d01e      	beq.n	8005918 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058da:	f7ff fc04 	bl	80050e6 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058de:	f7fd fc4d 	bl	800317c <HAL_GetTick>
 80058e2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80058e4:	e008      	b.n	80058f8 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058e6:	f7fd fc49 	bl	800317c <HAL_GetTick>
 80058ea:	4602      	mov	r2, r0
 80058ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058ee:	1ad3      	subs	r3, r2, r3
 80058f0:	2b02      	cmp	r3, #2
 80058f2:	d901      	bls.n	80058f8 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 80058f4:	2303      	movs	r3, #3
 80058f6:	e012      	b.n	800591e <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80058f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005902:	2b00      	cmp	r3, #0
 8005904:	d1ef      	bne.n	80058e6 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8005906:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800590a:	68da      	ldr	r2, [r3, #12]
 800590c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005910:	4b05      	ldr	r3, [pc, #20]	@ (8005928 <HAL_RCC_OscConfig+0x6e4>)
 8005912:	4013      	ands	r3, r2
 8005914:	60cb      	str	r3, [r1, #12]
 8005916:	e001      	b.n	800591c <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005918:	2301      	movs	r3, #1
 800591a:	e000      	b.n	800591e <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 800591c:	2300      	movs	r3, #0
}
 800591e:	4618      	mov	r0, r3
 8005920:	3734      	adds	r7, #52	@ 0x34
 8005922:	46bd      	mov	sp, r7
 8005924:	bd90      	pop	{r4, r7, pc}
 8005926:	bf00      	nop
 8005928:	eefefffc 	.word	0xeefefffc

0800592c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b084      	sub	sp, #16
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
 8005934:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d101      	bne.n	8005940 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800593c:	2301      	movs	r3, #1
 800593e:	e12d      	b.n	8005b9c <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005940:	4b98      	ldr	r3, [pc, #608]	@ (8005ba4 <HAL_RCC_ClockConfig+0x278>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f003 0307 	and.w	r3, r3, #7
 8005948:	683a      	ldr	r2, [r7, #0]
 800594a:	429a      	cmp	r2, r3
 800594c:	d91b      	bls.n	8005986 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800594e:	4b95      	ldr	r3, [pc, #596]	@ (8005ba4 <HAL_RCC_ClockConfig+0x278>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f023 0207 	bic.w	r2, r3, #7
 8005956:	4993      	ldr	r1, [pc, #588]	@ (8005ba4 <HAL_RCC_ClockConfig+0x278>)
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	4313      	orrs	r3, r2
 800595c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800595e:	f7fd fc0d 	bl	800317c <HAL_GetTick>
 8005962:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005964:	e008      	b.n	8005978 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005966:	f7fd fc09 	bl	800317c <HAL_GetTick>
 800596a:	4602      	mov	r2, r0
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	1ad3      	subs	r3, r2, r3
 8005970:	2b02      	cmp	r3, #2
 8005972:	d901      	bls.n	8005978 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8005974:	2303      	movs	r3, #3
 8005976:	e111      	b.n	8005b9c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005978:	4b8a      	ldr	r3, [pc, #552]	@ (8005ba4 <HAL_RCC_ClockConfig+0x278>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f003 0307 	and.w	r3, r3, #7
 8005980:	683a      	ldr	r2, [r7, #0]
 8005982:	429a      	cmp	r2, r3
 8005984:	d1ef      	bne.n	8005966 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f003 0302 	and.w	r3, r3, #2
 800598e:	2b00      	cmp	r3, #0
 8005990:	d016      	beq.n	80059c0 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	689b      	ldr	r3, [r3, #8]
 8005996:	4618      	mov	r0, r3
 8005998:	f7ff fafb 	bl	8004f92 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800599c:	f7fd fbee 	bl	800317c <HAL_GetTick>
 80059a0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80059a2:	e008      	b.n	80059b6 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80059a4:	f7fd fbea 	bl	800317c <HAL_GetTick>
 80059a8:	4602      	mov	r2, r0
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	1ad3      	subs	r3, r2, r3
 80059ae:	2b02      	cmp	r3, #2
 80059b0:	d901      	bls.n	80059b6 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80059b2:	2303      	movs	r3, #3
 80059b4:	e0f2      	b.n	8005b9c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80059b6:	f7ff fbe8 	bl	800518a <LL_RCC_IsActiveFlag_HPRE>
 80059ba:	4603      	mov	r3, r0
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d0f1      	beq.n	80059a4 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f003 0320 	and.w	r3, r3, #32
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d016      	beq.n	80059fa <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	695b      	ldr	r3, [r3, #20]
 80059d0:	4618      	mov	r0, r3
 80059d2:	f7ff faf2 	bl	8004fba <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80059d6:	f7fd fbd1 	bl	800317c <HAL_GetTick>
 80059da:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80059dc:	e008      	b.n	80059f0 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80059de:	f7fd fbcd 	bl	800317c <HAL_GetTick>
 80059e2:	4602      	mov	r2, r0
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	1ad3      	subs	r3, r2, r3
 80059e8:	2b02      	cmp	r3, #2
 80059ea:	d901      	bls.n	80059f0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80059ec:	2303      	movs	r3, #3
 80059ee:	e0d5      	b.n	8005b9c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80059f0:	f7ff fbdd 	bl	80051ae <LL_RCC_IsActiveFlag_C2HPRE>
 80059f4:	4603      	mov	r3, r0
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d0f1      	beq.n	80059de <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d016      	beq.n	8005a34 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	699b      	ldr	r3, [r3, #24]
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	f7ff faeb 	bl	8004fe6 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005a10:	f7fd fbb4 	bl	800317c <HAL_GetTick>
 8005a14:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005a16:	e008      	b.n	8005a2a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005a18:	f7fd fbb0 	bl	800317c <HAL_GetTick>
 8005a1c:	4602      	mov	r2, r0
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	1ad3      	subs	r3, r2, r3
 8005a22:	2b02      	cmp	r3, #2
 8005a24:	d901      	bls.n	8005a2a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8005a26:	2303      	movs	r3, #3
 8005a28:	e0b8      	b.n	8005b9c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005a2a:	f7ff fbd3 	bl	80051d4 <LL_RCC_IsActiveFlag_SHDHPRE>
 8005a2e:	4603      	mov	r3, r0
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d0f1      	beq.n	8005a18 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f003 0304 	and.w	r3, r3, #4
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d016      	beq.n	8005a6e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	68db      	ldr	r3, [r3, #12]
 8005a44:	4618      	mov	r0, r3
 8005a46:	f7ff fae5 	bl	8005014 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005a4a:	f7fd fb97 	bl	800317c <HAL_GetTick>
 8005a4e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005a50:	e008      	b.n	8005a64 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005a52:	f7fd fb93 	bl	800317c <HAL_GetTick>
 8005a56:	4602      	mov	r2, r0
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	1ad3      	subs	r3, r2, r3
 8005a5c:	2b02      	cmp	r3, #2
 8005a5e:	d901      	bls.n	8005a64 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8005a60:	2303      	movs	r3, #3
 8005a62:	e09b      	b.n	8005b9c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005a64:	f7ff fbc9 	bl	80051fa <LL_RCC_IsActiveFlag_PPRE1>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d0f1      	beq.n	8005a52 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f003 0308 	and.w	r3, r3, #8
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d017      	beq.n	8005aaa <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	691b      	ldr	r3, [r3, #16]
 8005a7e:	00db      	lsls	r3, r3, #3
 8005a80:	4618      	mov	r0, r3
 8005a82:	f7ff fadb 	bl	800503c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005a86:	f7fd fb79 	bl	800317c <HAL_GetTick>
 8005a8a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005a8c:	e008      	b.n	8005aa0 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005a8e:	f7fd fb75 	bl	800317c <HAL_GetTick>
 8005a92:	4602      	mov	r2, r0
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	1ad3      	subs	r3, r2, r3
 8005a98:	2b02      	cmp	r3, #2
 8005a9a:	d901      	bls.n	8005aa0 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8005a9c:	2303      	movs	r3, #3
 8005a9e:	e07d      	b.n	8005b9c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005aa0:	f7ff fbbd 	bl	800521e <LL_RCC_IsActiveFlag_PPRE2>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d0f1      	beq.n	8005a8e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f003 0301 	and.w	r3, r3, #1
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d043      	beq.n	8005b3e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	2b02      	cmp	r3, #2
 8005abc:	d106      	bne.n	8005acc <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8005abe:	f7ff f87b 	bl	8004bb8 <LL_RCC_HSE_IsReady>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d11e      	bne.n	8005b06 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005ac8:	2301      	movs	r3, #1
 8005aca:	e067      	b.n	8005b9c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	2b03      	cmp	r3, #3
 8005ad2:	d106      	bne.n	8005ae2 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8005ad4:	f7ff fb16 	bl	8005104 <LL_RCC_PLL_IsReady>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d113      	bne.n	8005b06 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	e05c      	b.n	8005b9c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d106      	bne.n	8005af8 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8005aea:	f7ff f9e3 	bl	8004eb4 <LL_RCC_MSI_IsReady>
 8005aee:	4603      	mov	r3, r0
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d108      	bne.n	8005b06 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005af4:	2301      	movs	r3, #1
 8005af6:	e051      	b.n	8005b9c <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8005af8:	f7ff f88e 	bl	8004c18 <LL_RCC_HSI_IsReady>
 8005afc:	4603      	mov	r3, r0
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d101      	bne.n	8005b06 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005b02:	2301      	movs	r3, #1
 8005b04:	e04a      	b.n	8005b9c <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	685b      	ldr	r3, [r3, #4]
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	f7ff fa21 	bl	8004f52 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b10:	f7fd fb34 	bl	800317c <HAL_GetTick>
 8005b14:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b16:	e00a      	b.n	8005b2e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b18:	f7fd fb30 	bl	800317c <HAL_GetTick>
 8005b1c:	4602      	mov	r2, r0
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	1ad3      	subs	r3, r2, r3
 8005b22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d901      	bls.n	8005b2e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8005b2a:	2303      	movs	r3, #3
 8005b2c:	e036      	b.n	8005b9c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b2e:	f7ff fa24 	bl	8004f7a <LL_RCC_GetSysClkSource>
 8005b32:	4602      	mov	r2, r0
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	009b      	lsls	r3, r3, #2
 8005b3a:	429a      	cmp	r2, r3
 8005b3c:	d1ec      	bne.n	8005b18 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005b3e:	4b19      	ldr	r3, [pc, #100]	@ (8005ba4 <HAL_RCC_ClockConfig+0x278>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f003 0307 	and.w	r3, r3, #7
 8005b46:	683a      	ldr	r2, [r7, #0]
 8005b48:	429a      	cmp	r2, r3
 8005b4a:	d21b      	bcs.n	8005b84 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b4c:	4b15      	ldr	r3, [pc, #84]	@ (8005ba4 <HAL_RCC_ClockConfig+0x278>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f023 0207 	bic.w	r2, r3, #7
 8005b54:	4913      	ldr	r1, [pc, #76]	@ (8005ba4 <HAL_RCC_ClockConfig+0x278>)
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b5c:	f7fd fb0e 	bl	800317c <HAL_GetTick>
 8005b60:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b62:	e008      	b.n	8005b76 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005b64:	f7fd fb0a 	bl	800317c <HAL_GetTick>
 8005b68:	4602      	mov	r2, r0
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	1ad3      	subs	r3, r2, r3
 8005b6e:	2b02      	cmp	r3, #2
 8005b70:	d901      	bls.n	8005b76 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8005b72:	2303      	movs	r3, #3
 8005b74:	e012      	b.n	8005b9c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b76:	4b0b      	ldr	r3, [pc, #44]	@ (8005ba4 <HAL_RCC_ClockConfig+0x278>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f003 0307 	and.w	r3, r3, #7
 8005b7e:	683a      	ldr	r2, [r7, #0]
 8005b80:	429a      	cmp	r2, r3
 8005b82:	d1ef      	bne.n	8005b64 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005b84:	f000 f87e 	bl	8005c84 <HAL_RCC_GetHCLKFreq>
 8005b88:	4603      	mov	r3, r0
 8005b8a:	4a07      	ldr	r2, [pc, #28]	@ (8005ba8 <HAL_RCC_ClockConfig+0x27c>)
 8005b8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8005b8e:	f7fd fb01 	bl	8003194 <HAL_GetTickPrio>
 8005b92:	4603      	mov	r3, r0
 8005b94:	4618      	mov	r0, r3
 8005b96:	f7fd faa3 	bl	80030e0 <HAL_InitTick>
 8005b9a:	4603      	mov	r3, r0
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	3710      	adds	r7, #16
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bd80      	pop	{r7, pc}
 8005ba4:	58004000 	.word	0x58004000
 8005ba8:	20000008 	.word	0x20000008

08005bac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005bac:	b590      	push	{r4, r7, lr}
 8005bae:	b085      	sub	sp, #20
 8005bb0:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005bb2:	f7ff f9e2 	bl	8004f7a <LL_RCC_GetSysClkSource>
 8005bb6:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d10a      	bne.n	8005bd4 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005bbe:	f7ff f99e 	bl	8004efe <LL_RCC_MSI_GetRange>
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	091b      	lsrs	r3, r3, #4
 8005bc6:	f003 030f 	and.w	r3, r3, #15
 8005bca:	4a2b      	ldr	r2, [pc, #172]	@ (8005c78 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005bcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005bd0:	60fb      	str	r3, [r7, #12]
 8005bd2:	e04b      	b.n	8005c6c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2b04      	cmp	r3, #4
 8005bd8:	d102      	bne.n	8005be0 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005bda:	4b28      	ldr	r3, [pc, #160]	@ (8005c7c <HAL_RCC_GetSysClockFreq+0xd0>)
 8005bdc:	60fb      	str	r3, [r7, #12]
 8005bde:	e045      	b.n	8005c6c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2b08      	cmp	r3, #8
 8005be4:	d10a      	bne.n	8005bfc <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005be6:	f7fe ffb7 	bl	8004b58 <LL_RCC_HSE_IsEnabledDiv2>
 8005bea:	4603      	mov	r3, r0
 8005bec:	2b01      	cmp	r3, #1
 8005bee:	d102      	bne.n	8005bf6 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8005bf0:	4b22      	ldr	r3, [pc, #136]	@ (8005c7c <HAL_RCC_GetSysClockFreq+0xd0>)
 8005bf2:	60fb      	str	r3, [r7, #12]
 8005bf4:	e03a      	b.n	8005c6c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8005bf6:	4b22      	ldr	r3, [pc, #136]	@ (8005c80 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005bf8:	60fb      	str	r3, [r7, #12]
 8005bfa:	e037      	b.n	8005c6c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8005bfc:	f7ff fab9 	bl	8005172 <LL_RCC_PLL_GetMainSource>
 8005c00:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	2b02      	cmp	r3, #2
 8005c06:	d003      	beq.n	8005c10 <HAL_RCC_GetSysClockFreq+0x64>
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	2b03      	cmp	r3, #3
 8005c0c:	d003      	beq.n	8005c16 <HAL_RCC_GetSysClockFreq+0x6a>
 8005c0e:	e00d      	b.n	8005c2c <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8005c10:	4b1a      	ldr	r3, [pc, #104]	@ (8005c7c <HAL_RCC_GetSysClockFreq+0xd0>)
 8005c12:	60bb      	str	r3, [r7, #8]
        break;
 8005c14:	e015      	b.n	8005c42 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005c16:	f7fe ff9f 	bl	8004b58 <LL_RCC_HSE_IsEnabledDiv2>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	2b01      	cmp	r3, #1
 8005c1e:	d102      	bne.n	8005c26 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8005c20:	4b16      	ldr	r3, [pc, #88]	@ (8005c7c <HAL_RCC_GetSysClockFreq+0xd0>)
 8005c22:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8005c24:	e00d      	b.n	8005c42 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8005c26:	4b16      	ldr	r3, [pc, #88]	@ (8005c80 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005c28:	60bb      	str	r3, [r7, #8]
        break;
 8005c2a:	e00a      	b.n	8005c42 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005c2c:	f7ff f967 	bl	8004efe <LL_RCC_MSI_GetRange>
 8005c30:	4603      	mov	r3, r0
 8005c32:	091b      	lsrs	r3, r3, #4
 8005c34:	f003 030f 	and.w	r3, r3, #15
 8005c38:	4a0f      	ldr	r2, [pc, #60]	@ (8005c78 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005c3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c3e:	60bb      	str	r3, [r7, #8]
        break;
 8005c40:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8005c42:	f7ff fa71 	bl	8005128 <LL_RCC_PLL_GetN>
 8005c46:	4602      	mov	r2, r0
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	fb03 f402 	mul.w	r4, r3, r2
 8005c4e:	f7ff fa84 	bl	800515a <LL_RCC_PLL_GetDivider>
 8005c52:	4603      	mov	r3, r0
 8005c54:	091b      	lsrs	r3, r3, #4
 8005c56:	3301      	adds	r3, #1
 8005c58:	fbb4 f4f3 	udiv	r4, r4, r3
 8005c5c:	f7ff fa71 	bl	8005142 <LL_RCC_PLL_GetR>
 8005c60:	4603      	mov	r3, r0
 8005c62:	0f5b      	lsrs	r3, r3, #29
 8005c64:	3301      	adds	r3, #1
 8005c66:	fbb4 f3f3 	udiv	r3, r4, r3
 8005c6a:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	3714      	adds	r7, #20
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd90      	pop	{r4, r7, pc}
 8005c76:	bf00      	nop
 8005c78:	08010e48 	.word	0x08010e48
 8005c7c:	00f42400 	.word	0x00f42400
 8005c80:	01e84800 	.word	0x01e84800

08005c84 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c84:	b598      	push	{r3, r4, r7, lr}
 8005c86:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8005c88:	f7ff ff90 	bl	8005bac <HAL_RCC_GetSysClockFreq>
 8005c8c:	4604      	mov	r4, r0
 8005c8e:	f7ff f9e9 	bl	8005064 <LL_RCC_GetAHBPrescaler>
 8005c92:	4603      	mov	r3, r0
 8005c94:	091b      	lsrs	r3, r3, #4
 8005c96:	f003 030f 	and.w	r3, r3, #15
 8005c9a:	4a03      	ldr	r2, [pc, #12]	@ (8005ca8 <HAL_RCC_GetHCLKFreq+0x24>)
 8005c9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ca0:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	bd98      	pop	{r3, r4, r7, pc}
 8005ca8:	08010de8 	.word	0x08010de8

08005cac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005cac:	b598      	push	{r3, r4, r7, lr}
 8005cae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005cb0:	f7ff ffe8 	bl	8005c84 <HAL_RCC_GetHCLKFreq>
 8005cb4:	4604      	mov	r4, r0
 8005cb6:	f7ff f9ef 	bl	8005098 <LL_RCC_GetAPB1Prescaler>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	0a1b      	lsrs	r3, r3, #8
 8005cbe:	f003 0307 	and.w	r3, r3, #7
 8005cc2:	4a04      	ldr	r2, [pc, #16]	@ (8005cd4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005cc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cc8:	f003 031f 	and.w	r3, r3, #31
 8005ccc:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	bd98      	pop	{r3, r4, r7, pc}
 8005cd4:	08010e28 	.word	0x08010e28

08005cd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005cd8:	b598      	push	{r3, r4, r7, lr}
 8005cda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8005cdc:	f7ff ffd2 	bl	8005c84 <HAL_RCC_GetHCLKFreq>
 8005ce0:	4604      	mov	r4, r0
 8005ce2:	f7ff f9e5 	bl	80050b0 <LL_RCC_GetAPB2Prescaler>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	0adb      	lsrs	r3, r3, #11
 8005cea:	f003 0307 	and.w	r3, r3, #7
 8005cee:	4a04      	ldr	r2, [pc, #16]	@ (8005d00 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005cf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cf4:	f003 031f 	and.w	r3, r3, #31
 8005cf8:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	bd98      	pop	{r3, r4, r7, pc}
 8005d00:	08010e28 	.word	0x08010e28

08005d04 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8005d04:	b590      	push	{r4, r7, lr}
 8005d06:	b085      	sub	sp, #20
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2bb0      	cmp	r3, #176	@ 0xb0
 8005d10:	d903      	bls.n	8005d1a <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8005d12:	4b15      	ldr	r3, [pc, #84]	@ (8005d68 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005d14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d16:	60fb      	str	r3, [r7, #12]
 8005d18:	e007      	b.n	8005d2a <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	091b      	lsrs	r3, r3, #4
 8005d1e:	f003 030f 	and.w	r3, r3, #15
 8005d22:	4a11      	ldr	r2, [pc, #68]	@ (8005d68 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005d24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d28:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8005d2a:	f7ff f9a7 	bl	800507c <LL_RCC_GetAHB4Prescaler>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	091b      	lsrs	r3, r3, #4
 8005d32:	f003 030f 	and.w	r3, r3, #15
 8005d36:	4a0d      	ldr	r2, [pc, #52]	@ (8005d6c <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8005d38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d3c:	68fa      	ldr	r2, [r7, #12]
 8005d3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d42:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	4a0a      	ldr	r2, [pc, #40]	@ (8005d70 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8005d48:	fba2 2303 	umull	r2, r3, r2, r3
 8005d4c:	0c9c      	lsrs	r4, r3, #18
 8005d4e:	f7fe fef5 	bl	8004b3c <HAL_PWREx_GetVoltageRange>
 8005d52:	4603      	mov	r3, r0
 8005d54:	4619      	mov	r1, r3
 8005d56:	4620      	mov	r0, r4
 8005d58:	f000 f80c 	bl	8005d74 <RCC_SetFlashLatency>
 8005d5c:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	3714      	adds	r7, #20
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd90      	pop	{r4, r7, pc}
 8005d66:	bf00      	nop
 8005d68:	08010e48 	.word	0x08010e48
 8005d6c:	08010de8 	.word	0x08010de8
 8005d70:	431bde83 	.word	0x431bde83

08005d74 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8005d74:	b590      	push	{r4, r7, lr}
 8005d76:	b093      	sub	sp, #76	@ 0x4c
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
 8005d7c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8005d7e:	4b37      	ldr	r3, [pc, #220]	@ (8005e5c <RCC_SetFlashLatency+0xe8>)
 8005d80:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8005d84:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005d86:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8005d8a:	4a35      	ldr	r2, [pc, #212]	@ (8005e60 <RCC_SetFlashLatency+0xec>)
 8005d8c:	f107 031c 	add.w	r3, r7, #28
 8005d90:	ca07      	ldmia	r2, {r0, r1, r2}
 8005d92:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8005d96:	4b33      	ldr	r3, [pc, #204]	@ (8005e64 <RCC_SetFlashLatency+0xf0>)
 8005d98:	f107 040c 	add.w	r4, r7, #12
 8005d9c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005d9e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8005da2:	2300      	movs	r3, #0
 8005da4:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005dac:	d11a      	bne.n	8005de4 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005dae:	2300      	movs	r3, #0
 8005db0:	643b      	str	r3, [r7, #64]	@ 0x40
 8005db2:	e013      	b.n	8005ddc <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8005db4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005db6:	009b      	lsls	r3, r3, #2
 8005db8:	3348      	adds	r3, #72	@ 0x48
 8005dba:	443b      	add	r3, r7
 8005dbc:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8005dc0:	687a      	ldr	r2, [r7, #4]
 8005dc2:	429a      	cmp	r2, r3
 8005dc4:	d807      	bhi.n	8005dd6 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005dc6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005dc8:	009b      	lsls	r3, r3, #2
 8005dca:	3348      	adds	r3, #72	@ 0x48
 8005dcc:	443b      	add	r3, r7
 8005dce:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005dd2:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8005dd4:	e020      	b.n	8005e18 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005dd6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005dd8:	3301      	adds	r3, #1
 8005dda:	643b      	str	r3, [r7, #64]	@ 0x40
 8005ddc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005dde:	2b03      	cmp	r3, #3
 8005de0:	d9e8      	bls.n	8005db4 <RCC_SetFlashLatency+0x40>
 8005de2:	e019      	b.n	8005e18 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005de4:	2300      	movs	r3, #0
 8005de6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005de8:	e013      	b.n	8005e12 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8005dea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005dec:	009b      	lsls	r3, r3, #2
 8005dee:	3348      	adds	r3, #72	@ 0x48
 8005df0:	443b      	add	r3, r7
 8005df2:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8005df6:	687a      	ldr	r2, [r7, #4]
 8005df8:	429a      	cmp	r2, r3
 8005dfa:	d807      	bhi.n	8005e0c <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005dfc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005dfe:	009b      	lsls	r3, r3, #2
 8005e00:	3348      	adds	r3, #72	@ 0x48
 8005e02:	443b      	add	r3, r7
 8005e04:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005e08:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8005e0a:	e005      	b.n	8005e18 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005e0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e0e:	3301      	adds	r3, #1
 8005e10:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005e12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e14:	2b02      	cmp	r3, #2
 8005e16:	d9e8      	bls.n	8005dea <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8005e18:	4b13      	ldr	r3, [pc, #76]	@ (8005e68 <RCC_SetFlashLatency+0xf4>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f023 0207 	bic.w	r2, r3, #7
 8005e20:	4911      	ldr	r1, [pc, #68]	@ (8005e68 <RCC_SetFlashLatency+0xf4>)
 8005e22:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e24:	4313      	orrs	r3, r2
 8005e26:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005e28:	f7fd f9a8 	bl	800317c <HAL_GetTick>
 8005e2c:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005e2e:	e008      	b.n	8005e42 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005e30:	f7fd f9a4 	bl	800317c <HAL_GetTick>
 8005e34:	4602      	mov	r2, r0
 8005e36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e38:	1ad3      	subs	r3, r2, r3
 8005e3a:	2b02      	cmp	r3, #2
 8005e3c:	d901      	bls.n	8005e42 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8005e3e:	2303      	movs	r3, #3
 8005e40:	e007      	b.n	8005e52 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005e42:	4b09      	ldr	r3, [pc, #36]	@ (8005e68 <RCC_SetFlashLatency+0xf4>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f003 0307 	and.w	r3, r3, #7
 8005e4a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005e4c:	429a      	cmp	r2, r3
 8005e4e:	d1ef      	bne.n	8005e30 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8005e50:	2300      	movs	r3, #0
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	374c      	adds	r7, #76	@ 0x4c
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd90      	pop	{r4, r7, pc}
 8005e5a:	bf00      	nop
 8005e5c:	0800fb64 	.word	0x0800fb64
 8005e60:	0800fb74 	.word	0x0800fb74
 8005e64:	0800fb80 	.word	0x0800fb80
 8005e68:	58004000 	.word	0x58004000

08005e6c <LL_RCC_LSE_IsEnabled>:
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8005e70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e78:	f003 0301 	and.w	r3, r3, #1
 8005e7c:	2b01      	cmp	r3, #1
 8005e7e:	d101      	bne.n	8005e84 <LL_RCC_LSE_IsEnabled+0x18>
 8005e80:	2301      	movs	r3, #1
 8005e82:	e000      	b.n	8005e86 <LL_RCC_LSE_IsEnabled+0x1a>
 8005e84:	2300      	movs	r3, #0
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8e:	4770      	bx	lr

08005e90 <LL_RCC_LSE_IsReady>:
{
 8005e90:	b480      	push	{r7}
 8005e92:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005e94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e9c:	f003 0302 	and.w	r3, r3, #2
 8005ea0:	2b02      	cmp	r3, #2
 8005ea2:	d101      	bne.n	8005ea8 <LL_RCC_LSE_IsReady+0x18>
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	e000      	b.n	8005eaa <LL_RCC_LSE_IsReady+0x1a>
 8005ea8:	2300      	movs	r3, #0
}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	46bd      	mov	sp, r7
 8005eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb2:	4770      	bx	lr

08005eb4 <LL_RCC_SetRFWKPClockSource>:
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b083      	sub	sp, #12
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8005ebc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ec0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005ec4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005ec8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8005ed4:	bf00      	nop
 8005ed6:	370c      	adds	r7, #12
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ede:	4770      	bx	lr

08005ee0 <LL_RCC_SetSMPSClockSource>:
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b083      	sub	sp, #12
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8005ee8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005eec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eee:	f023 0203 	bic.w	r2, r3, #3
 8005ef2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8005efc:	bf00      	nop
 8005efe:	370c      	adds	r7, #12
 8005f00:	46bd      	mov	sp, r7
 8005f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f06:	4770      	bx	lr

08005f08 <LL_RCC_SetSMPSPrescaler>:
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b083      	sub	sp, #12
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8005f10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f16:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005f1a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	4313      	orrs	r3, r2
 8005f22:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8005f24:	bf00      	nop
 8005f26:	370c      	adds	r7, #12
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2e:	4770      	bx	lr

08005f30 <LL_RCC_SetUSARTClockSource>:
{
 8005f30:	b480      	push	{r7}
 8005f32:	b083      	sub	sp, #12
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8005f38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f40:	f023 0203 	bic.w	r2, r3, #3
 8005f44:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005f50:	bf00      	nop
 8005f52:	370c      	adds	r7, #12
 8005f54:	46bd      	mov	sp, r7
 8005f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5a:	4770      	bx	lr

08005f5c <LL_RCC_SetLPUARTClockSource>:
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b083      	sub	sp, #12
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8005f64:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f6c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005f70:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	4313      	orrs	r3, r2
 8005f78:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005f7c:	bf00      	nop
 8005f7e:	370c      	adds	r7, #12
 8005f80:	46bd      	mov	sp, r7
 8005f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f86:	4770      	bx	lr

08005f88 <LL_RCC_SetI2CClockSource>:
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b083      	sub	sp, #12
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8005f90:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f94:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	091b      	lsrs	r3, r3, #4
 8005f9c:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8005fa0:	43db      	mvns	r3, r3
 8005fa2:	401a      	ands	r2, r3
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	011b      	lsls	r3, r3, #4
 8005fa8:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8005fac:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005fb6:	bf00      	nop
 8005fb8:	370c      	adds	r7, #12
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc0:	4770      	bx	lr

08005fc2 <LL_RCC_SetLPTIMClockSource>:
{
 8005fc2:	b480      	push	{r7}
 8005fc4:	b083      	sub	sp, #12
 8005fc6:	af00      	add	r7, sp, #0
 8005fc8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8005fca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005fce:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	0c1b      	lsrs	r3, r3, #16
 8005fd6:	041b      	lsls	r3, r3, #16
 8005fd8:	43db      	mvns	r3, r3
 8005fda:	401a      	ands	r2, r3
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	041b      	lsls	r3, r3, #16
 8005fe0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005fea:	bf00      	nop
 8005fec:	370c      	adds	r7, #12
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff4:	4770      	bx	lr

08005ff6 <LL_RCC_SetSAIClockSource>:
{
 8005ff6:	b480      	push	{r7}
 8005ff8:	b083      	sub	sp, #12
 8005ffa:	af00      	add	r7, sp, #0
 8005ffc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8005ffe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006002:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006006:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800600a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	4313      	orrs	r3, r2
 8006012:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006016:	bf00      	nop
 8006018:	370c      	adds	r7, #12
 800601a:	46bd      	mov	sp, r7
 800601c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006020:	4770      	bx	lr

08006022 <LL_RCC_SetRNGClockSource>:
{
 8006022:	b480      	push	{r7}
 8006024:	b083      	sub	sp, #12
 8006026:	af00      	add	r7, sp, #0
 8006028:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800602a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800602e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006032:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8006036:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	4313      	orrs	r3, r2
 800603e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006042:	bf00      	nop
 8006044:	370c      	adds	r7, #12
 8006046:	46bd      	mov	sp, r7
 8006048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604c:	4770      	bx	lr

0800604e <LL_RCC_SetCLK48ClockSource>:
{
 800604e:	b480      	push	{r7}
 8006050:	b083      	sub	sp, #12
 8006052:	af00      	add	r7, sp, #0
 8006054:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8006056:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800605a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800605e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006062:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	4313      	orrs	r3, r2
 800606a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800606e:	bf00      	nop
 8006070:	370c      	adds	r7, #12
 8006072:	46bd      	mov	sp, r7
 8006074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006078:	4770      	bx	lr

0800607a <LL_RCC_SetUSBClockSource>:
{
 800607a:	b580      	push	{r7, lr}
 800607c:	b082      	sub	sp, #8
 800607e:	af00      	add	r7, sp, #0
 8006080:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f7ff ffe3 	bl	800604e <LL_RCC_SetCLK48ClockSource>
}
 8006088:	bf00      	nop
 800608a:	3708      	adds	r7, #8
 800608c:	46bd      	mov	sp, r7
 800608e:	bd80      	pop	{r7, pc}

08006090 <LL_RCC_SetADCClockSource>:
{
 8006090:	b480      	push	{r7}
 8006092:	b083      	sub	sp, #12
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8006098:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800609c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060a0:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80060a4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	4313      	orrs	r3, r2
 80060ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80060b0:	bf00      	nop
 80060b2:	370c      	adds	r7, #12
 80060b4:	46bd      	mov	sp, r7
 80060b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ba:	4770      	bx	lr

080060bc <LL_RCC_SetRTCClockSource>:
{
 80060bc:	b480      	push	{r7}
 80060be:	b083      	sub	sp, #12
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80060c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80060c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060cc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80060d0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	4313      	orrs	r3, r2
 80060d8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80060dc:	bf00      	nop
 80060de:	370c      	adds	r7, #12
 80060e0:	46bd      	mov	sp, r7
 80060e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e6:	4770      	bx	lr

080060e8 <LL_RCC_GetRTCClockSource>:
{
 80060e8:	b480      	push	{r7}
 80060ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80060ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80060f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060f4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 80060f8:	4618      	mov	r0, r3
 80060fa:	46bd      	mov	sp, r7
 80060fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006100:	4770      	bx	lr

08006102 <LL_RCC_ForceBackupDomainReset>:
{
 8006102:	b480      	push	{r7}
 8006104:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006106:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800610a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800610e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006112:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006116:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800611a:	bf00      	nop
 800611c:	46bd      	mov	sp, r7
 800611e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006122:	4770      	bx	lr

08006124 <LL_RCC_ReleaseBackupDomainReset>:
{
 8006124:	b480      	push	{r7}
 8006126:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006128:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800612c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006130:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006134:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006138:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800613c:	bf00      	nop
 800613e:	46bd      	mov	sp, r7
 8006140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006144:	4770      	bx	lr

08006146 <LL_RCC_PLLSAI1_Enable>:
{
 8006146:	b480      	push	{r7}
 8006148:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800614a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006154:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006158:	6013      	str	r3, [r2, #0]
}
 800615a:	bf00      	nop
 800615c:	46bd      	mov	sp, r7
 800615e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006162:	4770      	bx	lr

08006164 <LL_RCC_PLLSAI1_Disable>:
{
 8006164:	b480      	push	{r7}
 8006166:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8006168:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006172:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006176:	6013      	str	r3, [r2, #0]
}
 8006178:	bf00      	nop
 800617a:	46bd      	mov	sp, r7
 800617c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006180:	4770      	bx	lr

08006182 <LL_RCC_PLLSAI1_IsReady>:
{
 8006182:	b480      	push	{r7}
 8006184:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8006186:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006190:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006194:	d101      	bne.n	800619a <LL_RCC_PLLSAI1_IsReady+0x18>
 8006196:	2301      	movs	r3, #1
 8006198:	e000      	b.n	800619c <LL_RCC_PLLSAI1_IsReady+0x1a>
 800619a:	2300      	movs	r3, #0
}
 800619c:	4618      	mov	r0, r3
 800619e:	46bd      	mov	sp, r7
 80061a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a4:	4770      	bx	lr

080061a6 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80061a6:	b580      	push	{r7, lr}
 80061a8:	b088      	sub	sp, #32
 80061aa:	af00      	add	r7, sp, #0
 80061ac:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80061ae:	2300      	movs	r3, #0
 80061b0:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80061b2:	2300      	movs	r3, #0
 80061b4:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d034      	beq.n	800622c <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061c6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80061ca:	d021      	beq.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80061cc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80061d0:	d81b      	bhi.n	800620a <HAL_RCCEx_PeriphCLKConfig+0x64>
 80061d2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80061d6:	d01d      	beq.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80061d8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80061dc:	d815      	bhi.n	800620a <HAL_RCCEx_PeriphCLKConfig+0x64>
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d00b      	beq.n	80061fa <HAL_RCCEx_PeriphCLKConfig+0x54>
 80061e2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80061e6:	d110      	bne.n	800620a <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 80061e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80061ec:	68db      	ldr	r3, [r3, #12]
 80061ee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80061f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80061f6:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 80061f8:	e00d      	b.n	8006216 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	3304      	adds	r3, #4
 80061fe:	4618      	mov	r0, r3
 8006200:	f000 f947 	bl	8006492 <RCCEx_PLLSAI1_ConfigNP>
 8006204:	4603      	mov	r3, r0
 8006206:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006208:	e005      	b.n	8006216 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800620a:	2301      	movs	r3, #1
 800620c:	77fb      	strb	r3, [r7, #31]
        break;
 800620e:	e002      	b.n	8006216 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8006210:	bf00      	nop
 8006212:	e000      	b.n	8006216 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8006214:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006216:	7ffb      	ldrb	r3, [r7, #31]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d105      	bne.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006220:	4618      	mov	r0, r3
 8006222:	f7ff fee8 	bl	8005ff6 <LL_RCC_SetSAIClockSource>
 8006226:	e001      	b.n	800622c <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006228:	7ffb      	ldrb	r3, [r7, #31]
 800622a:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006234:	2b00      	cmp	r3, #0
 8006236:	d046      	beq.n	80062c6 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8006238:	f7ff ff56 	bl	80060e8 <LL_RCC_GetRTCClockSource>
 800623c:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006242:	69ba      	ldr	r2, [r7, #24]
 8006244:	429a      	cmp	r2, r3
 8006246:	d03c      	beq.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8006248:	f7fe fc68 	bl	8004b1c <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800624c:	69bb      	ldr	r3, [r7, #24]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d105      	bne.n	800625e <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006256:	4618      	mov	r0, r3
 8006258:	f7ff ff30 	bl	80060bc <LL_RCC_SetRTCClockSource>
 800625c:	e02e      	b.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800625e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006262:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006266:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8006268:	f7ff ff4b 	bl	8006102 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800626c:	f7ff ff5a 	bl	8006124 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8006270:	697b      	ldr	r3, [r7, #20]
 8006272:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800627a:	4313      	orrs	r3, r2
 800627c:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800627e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8006288:	f7ff fdf0 	bl	8005e6c <LL_RCC_LSE_IsEnabled>
 800628c:	4603      	mov	r3, r0
 800628e:	2b01      	cmp	r3, #1
 8006290:	d114      	bne.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006292:	f7fc ff73 	bl	800317c <HAL_GetTick>
 8006296:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8006298:	e00b      	b.n	80062b2 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800629a:	f7fc ff6f 	bl	800317c <HAL_GetTick>
 800629e:	4602      	mov	r2, r0
 80062a0:	693b      	ldr	r3, [r7, #16]
 80062a2:	1ad3      	subs	r3, r2, r3
 80062a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d902      	bls.n	80062b2 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 80062ac:	2303      	movs	r3, #3
 80062ae:	77fb      	strb	r3, [r7, #31]
              break;
 80062b0:	e004      	b.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80062b2:	f7ff fded 	bl	8005e90 <LL_RCC_LSE_IsReady>
 80062b6:	4603      	mov	r3, r0
 80062b8:	2b01      	cmp	r3, #1
 80062ba:	d1ee      	bne.n	800629a <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80062bc:	7ffb      	ldrb	r3, [r7, #31]
 80062be:	77bb      	strb	r3, [r7, #30]
 80062c0:	e001      	b.n	80062c6 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062c2:	7ffb      	ldrb	r3, [r7, #31]
 80062c4:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f003 0301 	and.w	r3, r3, #1
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d004      	beq.n	80062dc <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	699b      	ldr	r3, [r3, #24]
 80062d6:	4618      	mov	r0, r3
 80062d8:	f7ff fe2a 	bl	8005f30 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f003 0302 	and.w	r3, r3, #2
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d004      	beq.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	69db      	ldr	r3, [r3, #28]
 80062ec:	4618      	mov	r0, r3
 80062ee:	f7ff fe35 	bl	8005f5c <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f003 0310 	and.w	r3, r3, #16
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d004      	beq.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006302:	4618      	mov	r0, r3
 8006304:	f7ff fe5d 	bl	8005fc2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f003 0320 	and.w	r3, r3, #32
 8006310:	2b00      	cmp	r3, #0
 8006312:	d004      	beq.n	800631e <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006318:	4618      	mov	r0, r3
 800631a:	f7ff fe52 	bl	8005fc2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f003 0304 	and.w	r3, r3, #4
 8006326:	2b00      	cmp	r3, #0
 8006328:	d004      	beq.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6a1b      	ldr	r3, [r3, #32]
 800632e:	4618      	mov	r0, r3
 8006330:	f7ff fe2a 	bl	8005f88 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f003 0308 	and.w	r3, r3, #8
 800633c:	2b00      	cmp	r3, #0
 800633e:	d004      	beq.n	800634a <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006344:	4618      	mov	r0, r3
 8006346:	f7ff fe1f 	bl	8005f88 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006352:	2b00      	cmp	r3, #0
 8006354:	d022      	beq.n	800639c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800635a:	4618      	mov	r0, r3
 800635c:	f7ff fe8d 	bl	800607a <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006364:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006368:	d107      	bne.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800636a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800636e:	68db      	ldr	r3, [r3, #12]
 8006370:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006374:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006378:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800637e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006382:	d10b      	bne.n	800639c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	3304      	adds	r3, #4
 8006388:	4618      	mov	r0, r3
 800638a:	f000 f8dd 	bl	8006548 <RCCEx_PLLSAI1_ConfigNQ>
 800638e:	4603      	mov	r3, r0
 8006390:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8006392:	7ffb      	ldrb	r3, [r7, #31]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d001      	beq.n	800639c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8006398:	7ffb      	ldrb	r3, [r7, #31]
 800639a:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d02b      	beq.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063b0:	d008      	beq.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063b6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80063ba:	d003      	beq.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d105      	bne.n	80063d0 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063c8:	4618      	mov	r0, r3
 80063ca:	f7ff fe2a 	bl	8006022 <LL_RCC_SetRNGClockSource>
 80063ce:	e00a      	b.n	80063e6 <HAL_RCCEx_PeriphCLKConfig+0x240>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80063d8:	60fb      	str	r3, [r7, #12]
 80063da:	2000      	movs	r0, #0
 80063dc:	f7ff fe21 	bl	8006022 <LL_RCC_SetRNGClockSource>
 80063e0:	68f8      	ldr	r0, [r7, #12]
 80063e2:	f7ff fe34 	bl	800604e <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063ea:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 80063ee:	d107      	bne.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80063f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80063f4:	68db      	ldr	r3, [r3, #12]
 80063f6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80063fa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80063fe:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006408:	2b00      	cmp	r3, #0
 800640a:	d022      	beq.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006410:	4618      	mov	r0, r3
 8006412:	f7ff fe3d 	bl	8006090 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800641a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800641e:	d107      	bne.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006420:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006424:	68db      	ldr	r3, [r3, #12]
 8006426:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800642a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800642e:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006434:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006438:	d10b      	bne.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	3304      	adds	r3, #4
 800643e:	4618      	mov	r0, r3
 8006440:	f000 f8dd 	bl	80065fe <RCCEx_PLLSAI1_ConfigNR>
 8006444:	4603      	mov	r3, r0
 8006446:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8006448:	7ffb      	ldrb	r3, [r7, #31]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d001      	beq.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800644e:	7ffb      	ldrb	r3, [r7, #31]
 8006450:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800645a:	2b00      	cmp	r3, #0
 800645c:	d004      	beq.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006462:	4618      	mov	r0, r3
 8006464:	f7ff fd26 	bl	8005eb4 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006470:	2b00      	cmp	r3, #0
 8006472:	d009      	beq.n	8006488 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006478:	4618      	mov	r0, r3
 800647a:	f7ff fd45 	bl	8005f08 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006482:	4618      	mov	r0, r3
 8006484:	f7ff fd2c 	bl	8005ee0 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8006488:	7fbb      	ldrb	r3, [r7, #30]
}
 800648a:	4618      	mov	r0, r3
 800648c:	3720      	adds	r7, #32
 800648e:	46bd      	mov	sp, r7
 8006490:	bd80      	pop	{r7, pc}

08006492 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8006492:	b580      	push	{r7, lr}
 8006494:	b084      	sub	sp, #16
 8006496:	af00      	add	r7, sp, #0
 8006498:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800649a:	2300      	movs	r3, #0
 800649c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800649e:	f7ff fe61 	bl	8006164 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80064a2:	f7fc fe6b 	bl	800317c <HAL_GetTick>
 80064a6:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80064a8:	e009      	b.n	80064be <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80064aa:	f7fc fe67 	bl	800317c <HAL_GetTick>
 80064ae:	4602      	mov	r2, r0
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	1ad3      	subs	r3, r2, r3
 80064b4:	2b02      	cmp	r3, #2
 80064b6:	d902      	bls.n	80064be <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80064b8:	2303      	movs	r3, #3
 80064ba:	73fb      	strb	r3, [r7, #15]
      break;
 80064bc:	e004      	b.n	80064c8 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80064be:	f7ff fe60 	bl	8006182 <LL_RCC_PLLSAI1_IsReady>
 80064c2:	4603      	mov	r3, r0
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d1f0      	bne.n	80064aa <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80064c8:	7bfb      	ldrb	r3, [r7, #15]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d137      	bne.n	800653e <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80064ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80064d2:	691b      	ldr	r3, [r3, #16]
 80064d4:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	021b      	lsls	r3, r3, #8
 80064de:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80064e2:	4313      	orrs	r3, r2
 80064e4:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80064e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80064ea:	691b      	ldr	r3, [r3, #16]
 80064ec:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	685b      	ldr	r3, [r3, #4]
 80064f4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80064f8:	4313      	orrs	r3, r2
 80064fa:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80064fc:	f7ff fe23 	bl	8006146 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006500:	f7fc fe3c 	bl	800317c <HAL_GetTick>
 8006504:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006506:	e009      	b.n	800651c <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006508:	f7fc fe38 	bl	800317c <HAL_GetTick>
 800650c:	4602      	mov	r2, r0
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	1ad3      	subs	r3, r2, r3
 8006512:	2b02      	cmp	r3, #2
 8006514:	d902      	bls.n	800651c <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8006516:	2303      	movs	r3, #3
 8006518:	73fb      	strb	r3, [r7, #15]
        break;
 800651a:	e004      	b.n	8006526 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800651c:	f7ff fe31 	bl	8006182 <LL_RCC_PLLSAI1_IsReady>
 8006520:	4603      	mov	r3, r0
 8006522:	2b01      	cmp	r3, #1
 8006524:	d1f0      	bne.n	8006508 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8006526:	7bfb      	ldrb	r3, [r7, #15]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d108      	bne.n	800653e <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800652c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006530:	691a      	ldr	r2, [r3, #16]
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	691b      	ldr	r3, [r3, #16]
 8006536:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800653a:	4313      	orrs	r3, r2
 800653c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800653e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006540:	4618      	mov	r0, r3
 8006542:	3710      	adds	r7, #16
 8006544:	46bd      	mov	sp, r7
 8006546:	bd80      	pop	{r7, pc}

08006548 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b084      	sub	sp, #16
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006550:	2300      	movs	r3, #0
 8006552:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8006554:	f7ff fe06 	bl	8006164 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006558:	f7fc fe10 	bl	800317c <HAL_GetTick>
 800655c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800655e:	e009      	b.n	8006574 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006560:	f7fc fe0c 	bl	800317c <HAL_GetTick>
 8006564:	4602      	mov	r2, r0
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	1ad3      	subs	r3, r2, r3
 800656a:	2b02      	cmp	r3, #2
 800656c:	d902      	bls.n	8006574 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800656e:	2303      	movs	r3, #3
 8006570:	73fb      	strb	r3, [r7, #15]
      break;
 8006572:	e004      	b.n	800657e <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006574:	f7ff fe05 	bl	8006182 <LL_RCC_PLLSAI1_IsReady>
 8006578:	4603      	mov	r3, r0
 800657a:	2b00      	cmp	r3, #0
 800657c:	d1f0      	bne.n	8006560 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800657e:	7bfb      	ldrb	r3, [r7, #15]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d137      	bne.n	80065f4 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8006584:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006588:	691b      	ldr	r3, [r3, #16]
 800658a:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	021b      	lsls	r3, r3, #8
 8006594:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006598:	4313      	orrs	r3, r2
 800659a:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800659c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80065a0:	691b      	ldr	r3, [r3, #16]
 80065a2:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	689b      	ldr	r3, [r3, #8]
 80065aa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80065ae:	4313      	orrs	r3, r2
 80065b0:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80065b2:	f7ff fdc8 	bl	8006146 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80065b6:	f7fc fde1 	bl	800317c <HAL_GetTick>
 80065ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80065bc:	e009      	b.n	80065d2 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80065be:	f7fc fddd 	bl	800317c <HAL_GetTick>
 80065c2:	4602      	mov	r2, r0
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	1ad3      	subs	r3, r2, r3
 80065c8:	2b02      	cmp	r3, #2
 80065ca:	d902      	bls.n	80065d2 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80065cc:	2303      	movs	r3, #3
 80065ce:	73fb      	strb	r3, [r7, #15]
        break;
 80065d0:	e004      	b.n	80065dc <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80065d2:	f7ff fdd6 	bl	8006182 <LL_RCC_PLLSAI1_IsReady>
 80065d6:	4603      	mov	r3, r0
 80065d8:	2b01      	cmp	r3, #1
 80065da:	d1f0      	bne.n	80065be <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80065dc:	7bfb      	ldrb	r3, [r7, #15]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d108      	bne.n	80065f4 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80065e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80065e6:	691a      	ldr	r2, [r3, #16]
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	691b      	ldr	r3, [r3, #16]
 80065ec:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80065f0:	4313      	orrs	r3, r2
 80065f2:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80065f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80065f6:	4618      	mov	r0, r3
 80065f8:	3710      	adds	r7, #16
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}

080065fe <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80065fe:	b580      	push	{r7, lr}
 8006600:	b084      	sub	sp, #16
 8006602:	af00      	add	r7, sp, #0
 8006604:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006606:	2300      	movs	r3, #0
 8006608:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800660a:	f7ff fdab 	bl	8006164 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800660e:	f7fc fdb5 	bl	800317c <HAL_GetTick>
 8006612:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006614:	e009      	b.n	800662a <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006616:	f7fc fdb1 	bl	800317c <HAL_GetTick>
 800661a:	4602      	mov	r2, r0
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	1ad3      	subs	r3, r2, r3
 8006620:	2b02      	cmp	r3, #2
 8006622:	d902      	bls.n	800662a <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8006624:	2303      	movs	r3, #3
 8006626:	73fb      	strb	r3, [r7, #15]
      break;
 8006628:	e004      	b.n	8006634 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800662a:	f7ff fdaa 	bl	8006182 <LL_RCC_PLLSAI1_IsReady>
 800662e:	4603      	mov	r3, r0
 8006630:	2b00      	cmp	r3, #0
 8006632:	d1f0      	bne.n	8006616 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8006634:	7bfb      	ldrb	r3, [r7, #15]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d137      	bne.n	80066aa <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800663a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800663e:	691b      	ldr	r3, [r3, #16]
 8006640:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	021b      	lsls	r3, r3, #8
 800664a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800664e:	4313      	orrs	r3, r2
 8006650:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8006652:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006656:	691b      	ldr	r3, [r3, #16]
 8006658:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	68db      	ldr	r3, [r3, #12]
 8006660:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006664:	4313      	orrs	r3, r2
 8006666:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8006668:	f7ff fd6d 	bl	8006146 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800666c:	f7fc fd86 	bl	800317c <HAL_GetTick>
 8006670:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006672:	e009      	b.n	8006688 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006674:	f7fc fd82 	bl	800317c <HAL_GetTick>
 8006678:	4602      	mov	r2, r0
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	1ad3      	subs	r3, r2, r3
 800667e:	2b02      	cmp	r3, #2
 8006680:	d902      	bls.n	8006688 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8006682:	2303      	movs	r3, #3
 8006684:	73fb      	strb	r3, [r7, #15]
        break;
 8006686:	e004      	b.n	8006692 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006688:	f7ff fd7b 	bl	8006182 <LL_RCC_PLLSAI1_IsReady>
 800668c:	4603      	mov	r3, r0
 800668e:	2b01      	cmp	r3, #1
 8006690:	d1f0      	bne.n	8006674 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8006692:	7bfb      	ldrb	r3, [r7, #15]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d108      	bne.n	80066aa <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006698:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800669c:	691a      	ldr	r2, [r3, #16]
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	691b      	ldr	r3, [r3, #16]
 80066a2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80066a6:	4313      	orrs	r3, r2
 80066a8:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80066aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	3710      	adds	r7, #16
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bd80      	pop	{r7, pc}

080066b4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b084      	sub	sp, #16
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d101      	bne.n	80066c6 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80066c2:	2301      	movs	r3, #1
 80066c4:	e09f      	b.n	8006806 <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80066cc:	b2db      	uxtb	r3, r3
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d106      	bne.n	80066e0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2200      	movs	r2, #0
 80066d6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f7fc fb5c 	bl	8002d98 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2202      	movs	r2, #2
 80066e4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80066e8:	4b49      	ldr	r3, [pc, #292]	@ (8006810 <HAL_RTC_Init+0x15c>)
 80066ea:	68db      	ldr	r3, [r3, #12]
 80066ec:	f003 0310 	and.w	r3, r3, #16
 80066f0:	2b10      	cmp	r3, #16
 80066f2:	d07e      	beq.n	80067f2 <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	22ca      	movs	r2, #202	@ 0xca
 80066fa:	625a      	str	r2, [r3, #36]	@ 0x24
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	2253      	movs	r2, #83	@ 0x53
 8006702:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	f000 f8ab 	bl	8006860 <RTC_EnterInitMode>
 800670a:	4603      	mov	r3, r0
 800670c:	2b00      	cmp	r3, #0
 800670e:	d00a      	beq.n	8006726 <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	22ff      	movs	r2, #255	@ 0xff
 8006716:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2204      	movs	r2, #4
 800671c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      status = HAL_ERROR;
 8006720:	2301      	movs	r3, #1
 8006722:	73fb      	strb	r3, [r7, #15]
 8006724:	e067      	b.n	80067f6 <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	689b      	ldr	r3, [r3, #8]
 800672c:	687a      	ldr	r2, [r7, #4]
 800672e:	6812      	ldr	r2, [r2, #0]
 8006730:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8006734:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006738:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	6899      	ldr	r1, [r3, #8]
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	685a      	ldr	r2, [r3, #4]
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	691b      	ldr	r3, [r3, #16]
 8006748:	431a      	orrs	r2, r3
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	699b      	ldr	r3, [r3, #24]
 800674e:	431a      	orrs	r2, r3
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	430a      	orrs	r2, r1
 8006756:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	687a      	ldr	r2, [r7, #4]
 800675e:	68d2      	ldr	r2, [r2, #12]
 8006760:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	6919      	ldr	r1, [r3, #16]
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	689b      	ldr	r3, [r3, #8]
 800676c:	041a      	lsls	r2, r3, #16
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	430a      	orrs	r2, r1
 8006774:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	68da      	ldr	r2, [r3, #12]
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006784:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f022 0203 	bic.w	r2, r2, #3
 8006794:	64da      	str	r2, [r3, #76]	@ 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	69da      	ldr	r2, [r3, #28]
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	695b      	ldr	r3, [r3, #20]
 80067a4:	431a      	orrs	r2, r3
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	430a      	orrs	r2, r1
 80067ac:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	689b      	ldr	r3, [r3, #8]
 80067b4:	f003 0320 	and.w	r3, r3, #32
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d113      	bne.n	80067e4 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80067bc:	6878      	ldr	r0, [r7, #4]
 80067be:	f000 f829 	bl	8006814 <HAL_RTC_WaitForSynchro>
 80067c2:	4603      	mov	r3, r0
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d00d      	beq.n	80067e4 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	22ff      	movs	r2, #255	@ 0xff
 80067ce:	625a      	str	r2, [r3, #36]	@ 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2204      	movs	r2, #4
 80067d4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2200      	movs	r2, #0
 80067dc:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 80067e0:	2301      	movs	r3, #1
 80067e2:	e010      	b.n	8006806 <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	22ff      	movs	r2, #255	@ 0xff
 80067ea:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      status = HAL_OK;
 80067ec:	2300      	movs	r3, #0
 80067ee:	73fb      	strb	r3, [r7, #15]
 80067f0:	e001      	b.n	80067f6 <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 80067f2:	2300      	movs	r3, #0
 80067f4:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80067f6:	7bfb      	ldrb	r3, [r7, #15]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d103      	bne.n	8006804 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2201      	movs	r2, #1
 8006800:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  return status;
 8006804:	7bfb      	ldrb	r3, [r7, #15]
}
 8006806:	4618      	mov	r0, r3
 8006808:	3710      	adds	r7, #16
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}
 800680e:	bf00      	nop
 8006810:	40002800 	.word	0x40002800

08006814 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b084      	sub	sp, #16
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	68da      	ldr	r2, [r3, #12]
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800682a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800682c:	f7fc fca6 	bl	800317c <HAL_GetTick>
 8006830:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006832:	e009      	b.n	8006848 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006834:	f7fc fca2 	bl	800317c <HAL_GetTick>
 8006838:	4602      	mov	r2, r0
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	1ad3      	subs	r3, r2, r3
 800683e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006842:	d901      	bls.n	8006848 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8006844:	2303      	movs	r3, #3
 8006846:	e007      	b.n	8006858 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	68db      	ldr	r3, [r3, #12]
 800684e:	f003 0320 	and.w	r3, r3, #32
 8006852:	2b00      	cmp	r3, #0
 8006854:	d0ee      	beq.n	8006834 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8006856:	2300      	movs	r3, #0
}
 8006858:	4618      	mov	r0, r3
 800685a:	3710      	adds	r7, #16
 800685c:	46bd      	mov	sp, r7
 800685e:	bd80      	pop	{r7, pc}

08006860 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b084      	sub	sp, #16
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	68db      	ldr	r3, [r3, #12]
 800686e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006872:	2b00      	cmp	r3, #0
 8006874:	d119      	bne.n	80068aa <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f04f 32ff 	mov.w	r2, #4294967295
 800687e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006880:	f7fc fc7c 	bl	800317c <HAL_GetTick>
 8006884:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006886:	e009      	b.n	800689c <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006888:	f7fc fc78 	bl	800317c <HAL_GetTick>
 800688c:	4602      	mov	r2, r0
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	1ad3      	subs	r3, r2, r3
 8006892:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006896:	d901      	bls.n	800689c <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8006898:	2303      	movs	r3, #3
 800689a:	e007      	b.n	80068ac <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	68db      	ldr	r3, [r3, #12]
 80068a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d0ee      	beq.n	8006888 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 80068aa:	2300      	movs	r3, #0
}
 80068ac:	4618      	mov	r0, r3
 80068ae:	3710      	adds	r7, #16
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd80      	pop	{r7, pc}

080068b4 <HAL_RTCEx_EnableBypassShadow>:
  * @note   When the Bypass Shadow is enabled the calendar value are taken
  *         directly from the Calendar counter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 80068b4:	b480      	push	{r7}
 80068b6:	b083      	sub	sp, #12
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80068c2:	2b01      	cmp	r3, #1
 80068c4:	d101      	bne.n	80068ca <HAL_RTCEx_EnableBypassShadow+0x16>
 80068c6:	2302      	movs	r3, #2
 80068c8:	e024      	b.n	8006914 <HAL_RTCEx_EnableBypassShadow+0x60>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2201      	movs	r2, #1
 80068ce:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2202      	movs	r2, #2
 80068d6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	22ca      	movs	r2, #202	@ 0xca
 80068e0:	625a      	str	r2, [r3, #36]	@ 0x24
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	2253      	movs	r2, #83	@ 0x53
 80068e8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	689a      	ldr	r2, [r3, #8]
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f042 0220 	orr.w	r2, r2, #32
 80068f8:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	22ff      	movs	r2, #255	@ 0xff
 8006900:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2201      	movs	r2, #1
 8006906:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2200      	movs	r2, #0
 800690e:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8006912:	2300      	movs	r3, #0
}
 8006914:	4618      	mov	r0, r3
 8006916:	370c      	adds	r7, #12
 8006918:	46bd      	mov	sp, r7
 800691a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691e:	4770      	bx	lr

08006920 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b084      	sub	sp, #16
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d101      	bne.n	8006932 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800692e:	2301      	movs	r3, #1
 8006930:	e095      	b.n	8006a5e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006936:	2b00      	cmp	r3, #0
 8006938:	d108      	bne.n	800694c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	685b      	ldr	r3, [r3, #4]
 800693e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006942:	d009      	beq.n	8006958 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2200      	movs	r2, #0
 8006948:	61da      	str	r2, [r3, #28]
 800694a:	e005      	b.n	8006958 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2200      	movs	r2, #0
 8006950:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2200      	movs	r2, #0
 8006956:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2200      	movs	r2, #0
 800695c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006964:	b2db      	uxtb	r3, r3
 8006966:	2b00      	cmp	r3, #0
 8006968:	d106      	bne.n	8006978 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2200      	movs	r2, #0
 800696e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f000 f877 	bl	8006a66 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2202      	movs	r2, #2
 800697c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	681a      	ldr	r2, [r3, #0]
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800698e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	68db      	ldr	r3, [r3, #12]
 8006994:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006998:	d902      	bls.n	80069a0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800699a:	2300      	movs	r3, #0
 800699c:	60fb      	str	r3, [r7, #12]
 800699e:	e002      	b.n	80069a6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80069a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80069a4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	68db      	ldr	r3, [r3, #12]
 80069aa:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80069ae:	d007      	beq.n	80069c0 <HAL_SPI_Init+0xa0>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	68db      	ldr	r3, [r3, #12]
 80069b4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80069b8:	d002      	beq.n	80069c0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2200      	movs	r2, #0
 80069be:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	685b      	ldr	r3, [r3, #4]
 80069c4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	689b      	ldr	r3, [r3, #8]
 80069cc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80069d0:	431a      	orrs	r2, r3
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	691b      	ldr	r3, [r3, #16]
 80069d6:	f003 0302 	and.w	r3, r3, #2
 80069da:	431a      	orrs	r2, r3
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	695b      	ldr	r3, [r3, #20]
 80069e0:	f003 0301 	and.w	r3, r3, #1
 80069e4:	431a      	orrs	r2, r3
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	699b      	ldr	r3, [r3, #24]
 80069ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80069ee:	431a      	orrs	r2, r3
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	69db      	ldr	r3, [r3, #28]
 80069f4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80069f8:	431a      	orrs	r2, r3
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6a1b      	ldr	r3, [r3, #32]
 80069fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a02:	ea42 0103 	orr.w	r1, r2, r3
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a0a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	430a      	orrs	r2, r1
 8006a14:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	699b      	ldr	r3, [r3, #24]
 8006a1a:	0c1b      	lsrs	r3, r3, #16
 8006a1c:	f003 0204 	and.w	r2, r3, #4
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a24:	f003 0310 	and.w	r3, r3, #16
 8006a28:	431a      	orrs	r2, r3
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a2e:	f003 0308 	and.w	r3, r3, #8
 8006a32:	431a      	orrs	r2, r3
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	68db      	ldr	r3, [r3, #12]
 8006a38:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8006a3c:	ea42 0103 	orr.w	r1, r2, r3
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	430a      	orrs	r2, r1
 8006a4c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2200      	movs	r2, #0
 8006a52:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2201      	movs	r2, #1
 8006a58:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8006a5c:	2300      	movs	r3, #0
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	3710      	adds	r7, #16
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bd80      	pop	{r7, pc}

08006a66 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8006a66:	b480      	push	{r7}
 8006a68:	b083      	sub	sp, #12
 8006a6a:	af00      	add	r7, sp, #0
 8006a6c:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8006a6e:	bf00      	nop
 8006a70:	370c      	adds	r7, #12
 8006a72:	46bd      	mov	sp, r7
 8006a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a78:	4770      	bx	lr

08006a7a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a7a:	b580      	push	{r7, lr}
 8006a7c:	b088      	sub	sp, #32
 8006a7e:	af00      	add	r7, sp, #0
 8006a80:	60f8      	str	r0, [r7, #12]
 8006a82:	60b9      	str	r1, [r7, #8]
 8006a84:	603b      	str	r3, [r7, #0]
 8006a86:	4613      	mov	r3, r2
 8006a88:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006a94:	2b01      	cmp	r3, #1
 8006a96:	d101      	bne.n	8006a9c <HAL_SPI_Transmit+0x22>
 8006a98:	2302      	movs	r3, #2
 8006a9a:	e15f      	b.n	8006d5c <HAL_SPI_Transmit+0x2e2>
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	2201      	movs	r2, #1
 8006aa0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006aa4:	f7fc fb6a 	bl	800317c <HAL_GetTick>
 8006aa8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006aaa:	88fb      	ldrh	r3, [r7, #6]
 8006aac:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006ab4:	b2db      	uxtb	r3, r3
 8006ab6:	2b01      	cmp	r3, #1
 8006ab8:	d002      	beq.n	8006ac0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006aba:	2302      	movs	r3, #2
 8006abc:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006abe:	e148      	b.n	8006d52 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d002      	beq.n	8006acc <HAL_SPI_Transmit+0x52>
 8006ac6:	88fb      	ldrh	r3, [r7, #6]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d102      	bne.n	8006ad2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006acc:	2301      	movs	r3, #1
 8006ace:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006ad0:	e13f      	b.n	8006d52 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	2203      	movs	r2, #3
 8006ad6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	2200      	movs	r2, #0
 8006ade:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	68ba      	ldr	r2, [r7, #8]
 8006ae4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	88fa      	ldrh	r2, [r7, #6]
 8006aea:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	88fa      	ldrh	r2, [r7, #6]
 8006af0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	2200      	movs	r2, #0
 8006af6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	2200      	movs	r2, #0
 8006afc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	2200      	movs	r2, #0
 8006b04:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	2200      	movs	r2, #0
 8006b12:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	689b      	ldr	r3, [r3, #8]
 8006b18:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006b1c:	d10f      	bne.n	8006b3e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	681a      	ldr	r2, [r3, #0]
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006b2c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	681a      	ldr	r2, [r3, #0]
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006b3c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b48:	2b40      	cmp	r3, #64	@ 0x40
 8006b4a:	d007      	beq.n	8006b5c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	681a      	ldr	r2, [r3, #0]
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006b5a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	68db      	ldr	r3, [r3, #12]
 8006b60:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006b64:	d94f      	bls.n	8006c06 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	685b      	ldr	r3, [r3, #4]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d002      	beq.n	8006b74 <HAL_SPI_Transmit+0xfa>
 8006b6e:	8afb      	ldrh	r3, [r7, #22]
 8006b70:	2b01      	cmp	r3, #1
 8006b72:	d142      	bne.n	8006bfa <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b78:	881a      	ldrh	r2, [r3, #0]
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b84:	1c9a      	adds	r2, r3, #2
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006b8e:	b29b      	uxth	r3, r3
 8006b90:	3b01      	subs	r3, #1
 8006b92:	b29a      	uxth	r2, r3
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006b98:	e02f      	b.n	8006bfa <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	689b      	ldr	r3, [r3, #8]
 8006ba0:	f003 0302 	and.w	r3, r3, #2
 8006ba4:	2b02      	cmp	r3, #2
 8006ba6:	d112      	bne.n	8006bce <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bac:	881a      	ldrh	r2, [r3, #0]
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bb8:	1c9a      	adds	r2, r3, #2
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006bc2:	b29b      	uxth	r3, r3
 8006bc4:	3b01      	subs	r3, #1
 8006bc6:	b29a      	uxth	r2, r3
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006bcc:	e015      	b.n	8006bfa <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006bce:	f7fc fad5 	bl	800317c <HAL_GetTick>
 8006bd2:	4602      	mov	r2, r0
 8006bd4:	69bb      	ldr	r3, [r7, #24]
 8006bd6:	1ad3      	subs	r3, r2, r3
 8006bd8:	683a      	ldr	r2, [r7, #0]
 8006bda:	429a      	cmp	r2, r3
 8006bdc:	d803      	bhi.n	8006be6 <HAL_SPI_Transmit+0x16c>
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006be4:	d102      	bne.n	8006bec <HAL_SPI_Transmit+0x172>
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d106      	bne.n	8006bfa <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8006bec:	2303      	movs	r3, #3
 8006bee:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8006bf8:	e0ab      	b.n	8006d52 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006bfe:	b29b      	uxth	r3, r3
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d1ca      	bne.n	8006b9a <HAL_SPI_Transmit+0x120>
 8006c04:	e080      	b.n	8006d08 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	685b      	ldr	r3, [r3, #4]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d002      	beq.n	8006c14 <HAL_SPI_Transmit+0x19a>
 8006c0e:	8afb      	ldrh	r3, [r7, #22]
 8006c10:	2b01      	cmp	r3, #1
 8006c12:	d174      	bne.n	8006cfe <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c18:	b29b      	uxth	r3, r3
 8006c1a:	2b01      	cmp	r3, #1
 8006c1c:	d912      	bls.n	8006c44 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c22:	881a      	ldrh	r2, [r3, #0]
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c2e:	1c9a      	adds	r2, r3, #2
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c38:	b29b      	uxth	r3, r3
 8006c3a:	3b02      	subs	r3, #2
 8006c3c:	b29a      	uxth	r2, r3
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006c42:	e05c      	b.n	8006cfe <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	330c      	adds	r3, #12
 8006c4e:	7812      	ldrb	r2, [r2, #0]
 8006c50:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c56:	1c5a      	adds	r2, r3, #1
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c60:	b29b      	uxth	r3, r3
 8006c62:	3b01      	subs	r3, #1
 8006c64:	b29a      	uxth	r2, r3
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006c6a:	e048      	b.n	8006cfe <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	689b      	ldr	r3, [r3, #8]
 8006c72:	f003 0302 	and.w	r3, r3, #2
 8006c76:	2b02      	cmp	r3, #2
 8006c78:	d12b      	bne.n	8006cd2 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c7e:	b29b      	uxth	r3, r3
 8006c80:	2b01      	cmp	r3, #1
 8006c82:	d912      	bls.n	8006caa <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c88:	881a      	ldrh	r2, [r3, #0]
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c94:	1c9a      	adds	r2, r3, #2
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c9e:	b29b      	uxth	r3, r3
 8006ca0:	3b02      	subs	r3, #2
 8006ca2:	b29a      	uxth	r2, r3
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006ca8:	e029      	b.n	8006cfe <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	330c      	adds	r3, #12
 8006cb4:	7812      	ldrb	r2, [r2, #0]
 8006cb6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cbc:	1c5a      	adds	r2, r3, #1
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006cc6:	b29b      	uxth	r3, r3
 8006cc8:	3b01      	subs	r3, #1
 8006cca:	b29a      	uxth	r2, r3
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006cd0:	e015      	b.n	8006cfe <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006cd2:	f7fc fa53 	bl	800317c <HAL_GetTick>
 8006cd6:	4602      	mov	r2, r0
 8006cd8:	69bb      	ldr	r3, [r7, #24]
 8006cda:	1ad3      	subs	r3, r2, r3
 8006cdc:	683a      	ldr	r2, [r7, #0]
 8006cde:	429a      	cmp	r2, r3
 8006ce0:	d803      	bhi.n	8006cea <HAL_SPI_Transmit+0x270>
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ce8:	d102      	bne.n	8006cf0 <HAL_SPI_Transmit+0x276>
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d106      	bne.n	8006cfe <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8006cf0:	2303      	movs	r3, #3
 8006cf2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	2201      	movs	r2, #1
 8006cf8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8006cfc:	e029      	b.n	8006d52 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006d02:	b29b      	uxth	r3, r3
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d1b1      	bne.n	8006c6c <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006d08:	69ba      	ldr	r2, [r7, #24]
 8006d0a:	6839      	ldr	r1, [r7, #0]
 8006d0c:	68f8      	ldr	r0, [r7, #12]
 8006d0e:	f000 fcf9 	bl	8007704 <SPI_EndRxTxTransaction>
 8006d12:	4603      	mov	r3, r0
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d002      	beq.n	8006d1e <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	2220      	movs	r2, #32
 8006d1c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	689b      	ldr	r3, [r3, #8]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d10a      	bne.n	8006d3c <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006d26:	2300      	movs	r3, #0
 8006d28:	613b      	str	r3, [r7, #16]
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	68db      	ldr	r3, [r3, #12]
 8006d30:	613b      	str	r3, [r7, #16]
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	689b      	ldr	r3, [r3, #8]
 8006d38:	613b      	str	r3, [r7, #16]
 8006d3a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d002      	beq.n	8006d4a <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8006d44:	2301      	movs	r3, #1
 8006d46:	77fb      	strb	r3, [r7, #31]
 8006d48:	e003      	b.n	8006d52 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	2201      	movs	r2, #1
 8006d4e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	2200      	movs	r2, #0
 8006d56:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8006d5a:	7ffb      	ldrb	r3, [r7, #31]
}
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	3720      	adds	r7, #32
 8006d60:	46bd      	mov	sp, r7
 8006d62:	bd80      	pop	{r7, pc}

08006d64 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b088      	sub	sp, #32
 8006d68:	af02      	add	r7, sp, #8
 8006d6a:	60f8      	str	r0, [r7, #12]
 8006d6c:	60b9      	str	r1, [r7, #8]
 8006d6e:	603b      	str	r3, [r7, #0]
 8006d70:	4613      	mov	r3, r2
 8006d72:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006d74:	2300      	movs	r3, #0
 8006d76:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006d7e:	b2db      	uxtb	r3, r3
 8006d80:	2b01      	cmp	r3, #1
 8006d82:	d002      	beq.n	8006d8a <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8006d84:	2302      	movs	r3, #2
 8006d86:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006d88:	e11a      	b.n	8006fc0 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	685b      	ldr	r3, [r3, #4]
 8006d8e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006d92:	d112      	bne.n	8006dba <HAL_SPI_Receive+0x56>
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	689b      	ldr	r3, [r3, #8]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d10e      	bne.n	8006dba <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	2204      	movs	r2, #4
 8006da0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006da4:	88fa      	ldrh	r2, [r7, #6]
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	9300      	str	r3, [sp, #0]
 8006daa:	4613      	mov	r3, r2
 8006dac:	68ba      	ldr	r2, [r7, #8]
 8006dae:	68b9      	ldr	r1, [r7, #8]
 8006db0:	68f8      	ldr	r0, [r7, #12]
 8006db2:	f000 f90e 	bl	8006fd2 <HAL_SPI_TransmitReceive>
 8006db6:	4603      	mov	r3, r0
 8006db8:	e107      	b.n	8006fca <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006dc0:	2b01      	cmp	r3, #1
 8006dc2:	d101      	bne.n	8006dc8 <HAL_SPI_Receive+0x64>
 8006dc4:	2302      	movs	r3, #2
 8006dc6:	e100      	b.n	8006fca <HAL_SPI_Receive+0x266>
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	2201      	movs	r2, #1
 8006dcc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006dd0:	f7fc f9d4 	bl	800317c <HAL_GetTick>
 8006dd4:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d002      	beq.n	8006de2 <HAL_SPI_Receive+0x7e>
 8006ddc:	88fb      	ldrh	r3, [r7, #6]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d102      	bne.n	8006de8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006de2:	2301      	movs	r3, #1
 8006de4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006de6:	e0eb      	b.n	8006fc0 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	2204      	movs	r2, #4
 8006dec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	2200      	movs	r2, #0
 8006df4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	68ba      	ldr	r2, [r7, #8]
 8006dfa:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	88fa      	ldrh	r2, [r7, #6]
 8006e00:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	88fa      	ldrh	r2, [r7, #6]
 8006e08:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	2200      	movs	r2, #0
 8006e16:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	2200      	movs	r2, #0
 8006e22:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	2200      	movs	r2, #0
 8006e28:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	68db      	ldr	r3, [r3, #12]
 8006e2e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006e32:	d908      	bls.n	8006e46 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	685a      	ldr	r2, [r3, #4]
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006e42:	605a      	str	r2, [r3, #4]
 8006e44:	e007      	b.n	8006e56 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	685a      	ldr	r2, [r3, #4]
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006e54:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	689b      	ldr	r3, [r3, #8]
 8006e5a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006e5e:	d10f      	bne.n	8006e80 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	681a      	ldr	r2, [r3, #0]
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006e6e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	681a      	ldr	r2, [r3, #0]
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006e7e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e8a:	2b40      	cmp	r3, #64	@ 0x40
 8006e8c:	d007      	beq.n	8006e9e <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	681a      	ldr	r2, [r3, #0]
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006e9c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	68db      	ldr	r3, [r3, #12]
 8006ea2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006ea6:	d86f      	bhi.n	8006f88 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006ea8:	e034      	b.n	8006f14 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	689b      	ldr	r3, [r3, #8]
 8006eb0:	f003 0301 	and.w	r3, r3, #1
 8006eb4:	2b01      	cmp	r3, #1
 8006eb6:	d117      	bne.n	8006ee8 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f103 020c 	add.w	r2, r3, #12
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ec4:	7812      	ldrb	r2, [r2, #0]
 8006ec6:	b2d2      	uxtb	r2, r2
 8006ec8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ece:	1c5a      	adds	r2, r3, #1
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006eda:	b29b      	uxth	r3, r3
 8006edc:	3b01      	subs	r3, #1
 8006ede:	b29a      	uxth	r2, r3
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8006ee6:	e015      	b.n	8006f14 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006ee8:	f7fc f948 	bl	800317c <HAL_GetTick>
 8006eec:	4602      	mov	r2, r0
 8006eee:	693b      	ldr	r3, [r7, #16]
 8006ef0:	1ad3      	subs	r3, r2, r3
 8006ef2:	683a      	ldr	r2, [r7, #0]
 8006ef4:	429a      	cmp	r2, r3
 8006ef6:	d803      	bhi.n	8006f00 <HAL_SPI_Receive+0x19c>
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006efe:	d102      	bne.n	8006f06 <HAL_SPI_Receive+0x1a2>
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d106      	bne.n	8006f14 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 8006f06:	2303      	movs	r3, #3
 8006f08:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	2201      	movs	r2, #1
 8006f0e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8006f12:	e055      	b.n	8006fc0 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006f1a:	b29b      	uxth	r3, r3
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d1c4      	bne.n	8006eaa <HAL_SPI_Receive+0x146>
 8006f20:	e038      	b.n	8006f94 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	689b      	ldr	r3, [r3, #8]
 8006f28:	f003 0301 	and.w	r3, r3, #1
 8006f2c:	2b01      	cmp	r3, #1
 8006f2e:	d115      	bne.n	8006f5c <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	68da      	ldr	r2, [r3, #12]
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f3a:	b292      	uxth	r2, r2
 8006f3c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f42:	1c9a      	adds	r2, r3, #2
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006f4e:	b29b      	uxth	r3, r3
 8006f50:	3b01      	subs	r3, #1
 8006f52:	b29a      	uxth	r2, r3
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8006f5a:	e015      	b.n	8006f88 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006f5c:	f7fc f90e 	bl	800317c <HAL_GetTick>
 8006f60:	4602      	mov	r2, r0
 8006f62:	693b      	ldr	r3, [r7, #16]
 8006f64:	1ad3      	subs	r3, r2, r3
 8006f66:	683a      	ldr	r2, [r7, #0]
 8006f68:	429a      	cmp	r2, r3
 8006f6a:	d803      	bhi.n	8006f74 <HAL_SPI_Receive+0x210>
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f72:	d102      	bne.n	8006f7a <HAL_SPI_Receive+0x216>
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d106      	bne.n	8006f88 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 8006f7a:	2303      	movs	r3, #3
 8006f7c:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	2201      	movs	r2, #1
 8006f82:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8006f86:	e01b      	b.n	8006fc0 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006f8e:	b29b      	uxth	r3, r3
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d1c6      	bne.n	8006f22 <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006f94:	693a      	ldr	r2, [r7, #16]
 8006f96:	6839      	ldr	r1, [r7, #0]
 8006f98:	68f8      	ldr	r0, [r7, #12]
 8006f9a:	f000 fb5b 	bl	8007654 <SPI_EndRxTransaction>
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d002      	beq.n	8006faa <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	2220      	movs	r2, #32
 8006fa8:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d002      	beq.n	8006fb8 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	75fb      	strb	r3, [r7, #23]
 8006fb6:	e003      	b.n	8006fc0 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	2201      	movs	r2, #1
 8006fbc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8006fc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fca:	4618      	mov	r0, r3
 8006fcc:	3718      	adds	r7, #24
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	bd80      	pop	{r7, pc}

08006fd2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006fd2:	b580      	push	{r7, lr}
 8006fd4:	b08a      	sub	sp, #40	@ 0x28
 8006fd6:	af00      	add	r7, sp, #0
 8006fd8:	60f8      	str	r0, [r7, #12]
 8006fda:	60b9      	str	r1, [r7, #8]
 8006fdc:	607a      	str	r2, [r7, #4]
 8006fde:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006ff0:	2b01      	cmp	r3, #1
 8006ff2:	d101      	bne.n	8006ff8 <HAL_SPI_TransmitReceive+0x26>
 8006ff4:	2302      	movs	r3, #2
 8006ff6:	e20a      	b.n	800740e <HAL_SPI_TransmitReceive+0x43c>
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	2201      	movs	r2, #1
 8006ffc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007000:	f7fc f8bc 	bl	800317c <HAL_GetTick>
 8007004:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800700c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	685b      	ldr	r3, [r3, #4]
 8007012:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8007014:	887b      	ldrh	r3, [r7, #2]
 8007016:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8007018:	887b      	ldrh	r3, [r7, #2]
 800701a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800701c:	7efb      	ldrb	r3, [r7, #27]
 800701e:	2b01      	cmp	r3, #1
 8007020:	d00e      	beq.n	8007040 <HAL_SPI_TransmitReceive+0x6e>
 8007022:	697b      	ldr	r3, [r7, #20]
 8007024:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007028:	d106      	bne.n	8007038 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	689b      	ldr	r3, [r3, #8]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d102      	bne.n	8007038 <HAL_SPI_TransmitReceive+0x66>
 8007032:	7efb      	ldrb	r3, [r7, #27]
 8007034:	2b04      	cmp	r3, #4
 8007036:	d003      	beq.n	8007040 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8007038:	2302      	movs	r3, #2
 800703a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800703e:	e1e0      	b.n	8007402 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007040:	68bb      	ldr	r3, [r7, #8]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d005      	beq.n	8007052 <HAL_SPI_TransmitReceive+0x80>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d002      	beq.n	8007052 <HAL_SPI_TransmitReceive+0x80>
 800704c:	887b      	ldrh	r3, [r7, #2]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d103      	bne.n	800705a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8007052:	2301      	movs	r3, #1
 8007054:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8007058:	e1d3      	b.n	8007402 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007060:	b2db      	uxtb	r3, r3
 8007062:	2b04      	cmp	r3, #4
 8007064:	d003      	beq.n	800706e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	2205      	movs	r2, #5
 800706a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	2200      	movs	r2, #0
 8007072:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	687a      	ldr	r2, [r7, #4]
 8007078:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	887a      	ldrh	r2, [r7, #2]
 800707e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	887a      	ldrh	r2, [r7, #2]
 8007086:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	68ba      	ldr	r2, [r7, #8]
 800708e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	887a      	ldrh	r2, [r7, #2]
 8007094:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	887a      	ldrh	r2, [r7, #2]
 800709a:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	2200      	movs	r2, #0
 80070a0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	2200      	movs	r2, #0
 80070a6:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	68db      	ldr	r3, [r3, #12]
 80070ac:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80070b0:	d802      	bhi.n	80070b8 <HAL_SPI_TransmitReceive+0xe6>
 80070b2:	8a3b      	ldrh	r3, [r7, #16]
 80070b4:	2b01      	cmp	r3, #1
 80070b6:	d908      	bls.n	80070ca <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	685a      	ldr	r2, [r3, #4]
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80070c6:	605a      	str	r2, [r3, #4]
 80070c8:	e007      	b.n	80070da <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	685a      	ldr	r2, [r3, #4]
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80070d8:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070e4:	2b40      	cmp	r3, #64	@ 0x40
 80070e6:	d007      	beq.n	80070f8 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	681a      	ldr	r2, [r3, #0]
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80070f6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	68db      	ldr	r3, [r3, #12]
 80070fc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007100:	f240 8081 	bls.w	8007206 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	685b      	ldr	r3, [r3, #4]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d002      	beq.n	8007112 <HAL_SPI_TransmitReceive+0x140>
 800710c:	8a7b      	ldrh	r3, [r7, #18]
 800710e:	2b01      	cmp	r3, #1
 8007110:	d16d      	bne.n	80071ee <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007116:	881a      	ldrh	r2, [r3, #0]
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007122:	1c9a      	adds	r2, r3, #2
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800712c:	b29b      	uxth	r3, r3
 800712e:	3b01      	subs	r3, #1
 8007130:	b29a      	uxth	r2, r3
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007136:	e05a      	b.n	80071ee <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	689b      	ldr	r3, [r3, #8]
 800713e:	f003 0302 	and.w	r3, r3, #2
 8007142:	2b02      	cmp	r3, #2
 8007144:	d11b      	bne.n	800717e <HAL_SPI_TransmitReceive+0x1ac>
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800714a:	b29b      	uxth	r3, r3
 800714c:	2b00      	cmp	r3, #0
 800714e:	d016      	beq.n	800717e <HAL_SPI_TransmitReceive+0x1ac>
 8007150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007152:	2b01      	cmp	r3, #1
 8007154:	d113      	bne.n	800717e <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800715a:	881a      	ldrh	r2, [r3, #0]
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007166:	1c9a      	adds	r2, r3, #2
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007170:	b29b      	uxth	r3, r3
 8007172:	3b01      	subs	r3, #1
 8007174:	b29a      	uxth	r2, r3
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800717a:	2300      	movs	r3, #0
 800717c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	689b      	ldr	r3, [r3, #8]
 8007184:	f003 0301 	and.w	r3, r3, #1
 8007188:	2b01      	cmp	r3, #1
 800718a:	d11c      	bne.n	80071c6 <HAL_SPI_TransmitReceive+0x1f4>
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007192:	b29b      	uxth	r3, r3
 8007194:	2b00      	cmp	r3, #0
 8007196:	d016      	beq.n	80071c6 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	68da      	ldr	r2, [r3, #12]
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071a2:	b292      	uxth	r2, r2
 80071a4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071aa:	1c9a      	adds	r2, r3, #2
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80071b6:	b29b      	uxth	r3, r3
 80071b8:	3b01      	subs	r3, #1
 80071ba:	b29a      	uxth	r2, r3
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80071c2:	2301      	movs	r3, #1
 80071c4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80071c6:	f7fb ffd9 	bl	800317c <HAL_GetTick>
 80071ca:	4602      	mov	r2, r0
 80071cc:	69fb      	ldr	r3, [r7, #28]
 80071ce:	1ad3      	subs	r3, r2, r3
 80071d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80071d2:	429a      	cmp	r2, r3
 80071d4:	d80b      	bhi.n	80071ee <HAL_SPI_TransmitReceive+0x21c>
 80071d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071dc:	d007      	beq.n	80071ee <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 80071de:	2303      	movs	r3, #3
 80071e0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	2201      	movs	r2, #1
 80071e8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80071ec:	e109      	b.n	8007402 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80071f2:	b29b      	uxth	r3, r3
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d19f      	bne.n	8007138 <HAL_SPI_TransmitReceive+0x166>
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80071fe:	b29b      	uxth	r3, r3
 8007200:	2b00      	cmp	r3, #0
 8007202:	d199      	bne.n	8007138 <HAL_SPI_TransmitReceive+0x166>
 8007204:	e0e3      	b.n	80073ce <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	685b      	ldr	r3, [r3, #4]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d003      	beq.n	8007216 <HAL_SPI_TransmitReceive+0x244>
 800720e:	8a7b      	ldrh	r3, [r7, #18]
 8007210:	2b01      	cmp	r3, #1
 8007212:	f040 80cf 	bne.w	80073b4 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800721a:	b29b      	uxth	r3, r3
 800721c:	2b01      	cmp	r3, #1
 800721e:	d912      	bls.n	8007246 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007224:	881a      	ldrh	r2, [r3, #0]
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007230:	1c9a      	adds	r2, r3, #2
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800723a:	b29b      	uxth	r3, r3
 800723c:	3b02      	subs	r3, #2
 800723e:	b29a      	uxth	r2, r3
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007244:	e0b6      	b.n	80073b4 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	330c      	adds	r3, #12
 8007250:	7812      	ldrb	r2, [r2, #0]
 8007252:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007258:	1c5a      	adds	r2, r3, #1
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007262:	b29b      	uxth	r3, r3
 8007264:	3b01      	subs	r3, #1
 8007266:	b29a      	uxth	r2, r3
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800726c:	e0a2      	b.n	80073b4 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	689b      	ldr	r3, [r3, #8]
 8007274:	f003 0302 	and.w	r3, r3, #2
 8007278:	2b02      	cmp	r3, #2
 800727a:	d134      	bne.n	80072e6 <HAL_SPI_TransmitReceive+0x314>
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007280:	b29b      	uxth	r3, r3
 8007282:	2b00      	cmp	r3, #0
 8007284:	d02f      	beq.n	80072e6 <HAL_SPI_TransmitReceive+0x314>
 8007286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007288:	2b01      	cmp	r3, #1
 800728a:	d12c      	bne.n	80072e6 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007290:	b29b      	uxth	r3, r3
 8007292:	2b01      	cmp	r3, #1
 8007294:	d912      	bls.n	80072bc <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800729a:	881a      	ldrh	r2, [r3, #0]
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072a6:	1c9a      	adds	r2, r3, #2
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80072b0:	b29b      	uxth	r3, r3
 80072b2:	3b02      	subs	r3, #2
 80072b4:	b29a      	uxth	r2, r3
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80072ba:	e012      	b.n	80072e2 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	330c      	adds	r3, #12
 80072c6:	7812      	ldrb	r2, [r2, #0]
 80072c8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072ce:	1c5a      	adds	r2, r3, #1
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80072d8:	b29b      	uxth	r3, r3
 80072da:	3b01      	subs	r3, #1
 80072dc:	b29a      	uxth	r2, r3
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80072e2:	2300      	movs	r3, #0
 80072e4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	689b      	ldr	r3, [r3, #8]
 80072ec:	f003 0301 	and.w	r3, r3, #1
 80072f0:	2b01      	cmp	r3, #1
 80072f2:	d148      	bne.n	8007386 <HAL_SPI_TransmitReceive+0x3b4>
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80072fa:	b29b      	uxth	r3, r3
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d042      	beq.n	8007386 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007306:	b29b      	uxth	r3, r3
 8007308:	2b01      	cmp	r3, #1
 800730a:	d923      	bls.n	8007354 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	68da      	ldr	r2, [r3, #12]
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007316:	b292      	uxth	r2, r2
 8007318:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800731e:	1c9a      	adds	r2, r3, #2
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800732a:	b29b      	uxth	r3, r3
 800732c:	3b02      	subs	r3, #2
 800732e:	b29a      	uxth	r2, r3
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800733c:	b29b      	uxth	r3, r3
 800733e:	2b01      	cmp	r3, #1
 8007340:	d81f      	bhi.n	8007382 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	685a      	ldr	r2, [r3, #4]
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007350:	605a      	str	r2, [r3, #4]
 8007352:	e016      	b.n	8007382 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f103 020c 	add.w	r2, r3, #12
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007360:	7812      	ldrb	r2, [r2, #0]
 8007362:	b2d2      	uxtb	r2, r2
 8007364:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800736a:	1c5a      	adds	r2, r3, #1
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007376:	b29b      	uxth	r3, r3
 8007378:	3b01      	subs	r3, #1
 800737a:	b29a      	uxth	r2, r3
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007382:	2301      	movs	r3, #1
 8007384:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007386:	f7fb fef9 	bl	800317c <HAL_GetTick>
 800738a:	4602      	mov	r2, r0
 800738c:	69fb      	ldr	r3, [r7, #28]
 800738e:	1ad3      	subs	r3, r2, r3
 8007390:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007392:	429a      	cmp	r2, r3
 8007394:	d803      	bhi.n	800739e <HAL_SPI_TransmitReceive+0x3cc>
 8007396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007398:	f1b3 3fff 	cmp.w	r3, #4294967295
 800739c:	d102      	bne.n	80073a4 <HAL_SPI_TransmitReceive+0x3d2>
 800739e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d107      	bne.n	80073b4 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 80073a4:	2303      	movs	r3, #3
 80073a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	2201      	movs	r2, #1
 80073ae:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80073b2:	e026      	b.n	8007402 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80073b8:	b29b      	uxth	r3, r3
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	f47f af57 	bne.w	800726e <HAL_SPI_TransmitReceive+0x29c>
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80073c6:	b29b      	uxth	r3, r3
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	f47f af50 	bne.w	800726e <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80073ce:	69fa      	ldr	r2, [r7, #28]
 80073d0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80073d2:	68f8      	ldr	r0, [r7, #12]
 80073d4:	f000 f996 	bl	8007704 <SPI_EndRxTxTransaction>
 80073d8:	4603      	mov	r3, r0
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d005      	beq.n	80073ea <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 80073de:	2301      	movs	r3, #1
 80073e0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	2220      	movs	r2, #32
 80073e8:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d003      	beq.n	80073fa <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 80073f2:	2301      	movs	r3, #1
 80073f4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80073f8:	e003      	b.n	8007402 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	2201      	movs	r2, #1
 80073fe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	2200      	movs	r2, #0
 8007406:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800740a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 800740e:	4618      	mov	r0, r3
 8007410:	3728      	adds	r7, #40	@ 0x28
 8007412:	46bd      	mov	sp, r7
 8007414:	bd80      	pop	{r7, pc}
	...

08007418 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b088      	sub	sp, #32
 800741c:	af00      	add	r7, sp, #0
 800741e:	60f8      	str	r0, [r7, #12]
 8007420:	60b9      	str	r1, [r7, #8]
 8007422:	603b      	str	r3, [r7, #0]
 8007424:	4613      	mov	r3, r2
 8007426:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007428:	f7fb fea8 	bl	800317c <HAL_GetTick>
 800742c:	4602      	mov	r2, r0
 800742e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007430:	1a9b      	subs	r3, r3, r2
 8007432:	683a      	ldr	r2, [r7, #0]
 8007434:	4413      	add	r3, r2
 8007436:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007438:	f7fb fea0 	bl	800317c <HAL_GetTick>
 800743c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800743e:	4b39      	ldr	r3, [pc, #228]	@ (8007524 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	015b      	lsls	r3, r3, #5
 8007444:	0d1b      	lsrs	r3, r3, #20
 8007446:	69fa      	ldr	r2, [r7, #28]
 8007448:	fb02 f303 	mul.w	r3, r2, r3
 800744c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800744e:	e054      	b.n	80074fa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007456:	d050      	beq.n	80074fa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007458:	f7fb fe90 	bl	800317c <HAL_GetTick>
 800745c:	4602      	mov	r2, r0
 800745e:	69bb      	ldr	r3, [r7, #24]
 8007460:	1ad3      	subs	r3, r2, r3
 8007462:	69fa      	ldr	r2, [r7, #28]
 8007464:	429a      	cmp	r2, r3
 8007466:	d902      	bls.n	800746e <SPI_WaitFlagStateUntilTimeout+0x56>
 8007468:	69fb      	ldr	r3, [r7, #28]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d13d      	bne.n	80074ea <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	685a      	ldr	r2, [r3, #4]
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800747c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	685b      	ldr	r3, [r3, #4]
 8007482:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007486:	d111      	bne.n	80074ac <SPI_WaitFlagStateUntilTimeout+0x94>
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	689b      	ldr	r3, [r3, #8]
 800748c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007490:	d004      	beq.n	800749c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	689b      	ldr	r3, [r3, #8]
 8007496:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800749a:	d107      	bne.n	80074ac <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	681a      	ldr	r2, [r3, #0]
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80074aa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80074b4:	d10f      	bne.n	80074d6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	681a      	ldr	r2, [r3, #0]
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80074c4:	601a      	str	r2, [r3, #0]
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	681a      	ldr	r2, [r3, #0]
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80074d4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	2201      	movs	r2, #1
 80074da:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	2200      	movs	r2, #0
 80074e2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80074e6:	2303      	movs	r3, #3
 80074e8:	e017      	b.n	800751a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80074ea:	697b      	ldr	r3, [r7, #20]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d101      	bne.n	80074f4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80074f0:	2300      	movs	r3, #0
 80074f2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80074f4:	697b      	ldr	r3, [r7, #20]
 80074f6:	3b01      	subs	r3, #1
 80074f8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	689a      	ldr	r2, [r3, #8]
 8007500:	68bb      	ldr	r3, [r7, #8]
 8007502:	4013      	ands	r3, r2
 8007504:	68ba      	ldr	r2, [r7, #8]
 8007506:	429a      	cmp	r2, r3
 8007508:	bf0c      	ite	eq
 800750a:	2301      	moveq	r3, #1
 800750c:	2300      	movne	r3, #0
 800750e:	b2db      	uxtb	r3, r3
 8007510:	461a      	mov	r2, r3
 8007512:	79fb      	ldrb	r3, [r7, #7]
 8007514:	429a      	cmp	r2, r3
 8007516:	d19b      	bne.n	8007450 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007518:	2300      	movs	r3, #0
}
 800751a:	4618      	mov	r0, r3
 800751c:	3720      	adds	r7, #32
 800751e:	46bd      	mov	sp, r7
 8007520:	bd80      	pop	{r7, pc}
 8007522:	bf00      	nop
 8007524:	20000008 	.word	0x20000008

08007528 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b08a      	sub	sp, #40	@ 0x28
 800752c:	af00      	add	r7, sp, #0
 800752e:	60f8      	str	r0, [r7, #12]
 8007530:	60b9      	str	r1, [r7, #8]
 8007532:	607a      	str	r2, [r7, #4]
 8007534:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007536:	2300      	movs	r3, #0
 8007538:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800753a:	f7fb fe1f 	bl	800317c <HAL_GetTick>
 800753e:	4602      	mov	r2, r0
 8007540:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007542:	1a9b      	subs	r3, r3, r2
 8007544:	683a      	ldr	r2, [r7, #0]
 8007546:	4413      	add	r3, r2
 8007548:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800754a:	f7fb fe17 	bl	800317c <HAL_GetTick>
 800754e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	330c      	adds	r3, #12
 8007556:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007558:	4b3d      	ldr	r3, [pc, #244]	@ (8007650 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800755a:	681a      	ldr	r2, [r3, #0]
 800755c:	4613      	mov	r3, r2
 800755e:	009b      	lsls	r3, r3, #2
 8007560:	4413      	add	r3, r2
 8007562:	00da      	lsls	r2, r3, #3
 8007564:	1ad3      	subs	r3, r2, r3
 8007566:	0d1b      	lsrs	r3, r3, #20
 8007568:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800756a:	fb02 f303 	mul.w	r3, r2, r3
 800756e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007570:	e060      	b.n	8007634 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007572:	68bb      	ldr	r3, [r7, #8]
 8007574:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007578:	d107      	bne.n	800758a <SPI_WaitFifoStateUntilTimeout+0x62>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d104      	bne.n	800758a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007580:	69fb      	ldr	r3, [r7, #28]
 8007582:	781b      	ldrb	r3, [r3, #0]
 8007584:	b2db      	uxtb	r3, r3
 8007586:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007588:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007590:	d050      	beq.n	8007634 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007592:	f7fb fdf3 	bl	800317c <HAL_GetTick>
 8007596:	4602      	mov	r2, r0
 8007598:	6a3b      	ldr	r3, [r7, #32]
 800759a:	1ad3      	subs	r3, r2, r3
 800759c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800759e:	429a      	cmp	r2, r3
 80075a0:	d902      	bls.n	80075a8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80075a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d13d      	bne.n	8007624 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	685a      	ldr	r2, [r3, #4]
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80075b6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	685b      	ldr	r3, [r3, #4]
 80075bc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80075c0:	d111      	bne.n	80075e6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	689b      	ldr	r3, [r3, #8]
 80075c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80075ca:	d004      	beq.n	80075d6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	689b      	ldr	r3, [r3, #8]
 80075d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80075d4:	d107      	bne.n	80075e6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	681a      	ldr	r2, [r3, #0]
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80075e4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80075ee:	d10f      	bne.n	8007610 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	681a      	ldr	r2, [r3, #0]
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80075fe:	601a      	str	r2, [r3, #0]
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	681a      	ldr	r2, [r3, #0]
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800760e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	2201      	movs	r2, #1
 8007614:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	2200      	movs	r2, #0
 800761c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8007620:	2303      	movs	r3, #3
 8007622:	e010      	b.n	8007646 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007624:	69bb      	ldr	r3, [r7, #24]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d101      	bne.n	800762e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800762a:	2300      	movs	r3, #0
 800762c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800762e:	69bb      	ldr	r3, [r7, #24]
 8007630:	3b01      	subs	r3, #1
 8007632:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	689a      	ldr	r2, [r3, #8]
 800763a:	68bb      	ldr	r3, [r7, #8]
 800763c:	4013      	ands	r3, r2
 800763e:	687a      	ldr	r2, [r7, #4]
 8007640:	429a      	cmp	r2, r3
 8007642:	d196      	bne.n	8007572 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007644:	2300      	movs	r3, #0
}
 8007646:	4618      	mov	r0, r3
 8007648:	3728      	adds	r7, #40	@ 0x28
 800764a:	46bd      	mov	sp, r7
 800764c:	bd80      	pop	{r7, pc}
 800764e:	bf00      	nop
 8007650:	20000008 	.word	0x20000008

08007654 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b086      	sub	sp, #24
 8007658:	af02      	add	r7, sp, #8
 800765a:	60f8      	str	r0, [r7, #12]
 800765c:	60b9      	str	r1, [r7, #8]
 800765e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	685b      	ldr	r3, [r3, #4]
 8007664:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007668:	d111      	bne.n	800768e <SPI_EndRxTransaction+0x3a>
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	689b      	ldr	r3, [r3, #8]
 800766e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007672:	d004      	beq.n	800767e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	689b      	ldr	r3, [r3, #8]
 8007678:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800767c:	d107      	bne.n	800768e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	681a      	ldr	r2, [r3, #0]
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800768c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	9300      	str	r3, [sp, #0]
 8007692:	68bb      	ldr	r3, [r7, #8]
 8007694:	2200      	movs	r2, #0
 8007696:	2180      	movs	r1, #128	@ 0x80
 8007698:	68f8      	ldr	r0, [r7, #12]
 800769a:	f7ff febd 	bl	8007418 <SPI_WaitFlagStateUntilTimeout>
 800769e:	4603      	mov	r3, r0
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d007      	beq.n	80076b4 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80076a8:	f043 0220 	orr.w	r2, r3, #32
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80076b0:	2303      	movs	r3, #3
 80076b2:	e023      	b.n	80076fc <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	685b      	ldr	r3, [r3, #4]
 80076b8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80076bc:	d11d      	bne.n	80076fa <SPI_EndRxTransaction+0xa6>
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	689b      	ldr	r3, [r3, #8]
 80076c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80076c6:	d004      	beq.n	80076d2 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	689b      	ldr	r3, [r3, #8]
 80076cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80076d0:	d113      	bne.n	80076fa <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	9300      	str	r3, [sp, #0]
 80076d6:	68bb      	ldr	r3, [r7, #8]
 80076d8:	2200      	movs	r2, #0
 80076da:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80076de:	68f8      	ldr	r0, [r7, #12]
 80076e0:	f7ff ff22 	bl	8007528 <SPI_WaitFifoStateUntilTimeout>
 80076e4:	4603      	mov	r3, r0
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d007      	beq.n	80076fa <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80076ee:	f043 0220 	orr.w	r2, r3, #32
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80076f6:	2303      	movs	r3, #3
 80076f8:	e000      	b.n	80076fc <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80076fa:	2300      	movs	r3, #0
}
 80076fc:	4618      	mov	r0, r3
 80076fe:	3710      	adds	r7, #16
 8007700:	46bd      	mov	sp, r7
 8007702:	bd80      	pop	{r7, pc}

08007704 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b086      	sub	sp, #24
 8007708:	af02      	add	r7, sp, #8
 800770a:	60f8      	str	r0, [r7, #12]
 800770c:	60b9      	str	r1, [r7, #8]
 800770e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	9300      	str	r3, [sp, #0]
 8007714:	68bb      	ldr	r3, [r7, #8]
 8007716:	2200      	movs	r2, #0
 8007718:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800771c:	68f8      	ldr	r0, [r7, #12]
 800771e:	f7ff ff03 	bl	8007528 <SPI_WaitFifoStateUntilTimeout>
 8007722:	4603      	mov	r3, r0
 8007724:	2b00      	cmp	r3, #0
 8007726:	d007      	beq.n	8007738 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800772c:	f043 0220 	orr.w	r2, r3, #32
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007734:	2303      	movs	r3, #3
 8007736:	e027      	b.n	8007788 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	9300      	str	r3, [sp, #0]
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	2200      	movs	r2, #0
 8007740:	2180      	movs	r1, #128	@ 0x80
 8007742:	68f8      	ldr	r0, [r7, #12]
 8007744:	f7ff fe68 	bl	8007418 <SPI_WaitFlagStateUntilTimeout>
 8007748:	4603      	mov	r3, r0
 800774a:	2b00      	cmp	r3, #0
 800774c:	d007      	beq.n	800775e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007752:	f043 0220 	orr.w	r2, r3, #32
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800775a:	2303      	movs	r3, #3
 800775c:	e014      	b.n	8007788 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	9300      	str	r3, [sp, #0]
 8007762:	68bb      	ldr	r3, [r7, #8]
 8007764:	2200      	movs	r2, #0
 8007766:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800776a:	68f8      	ldr	r0, [r7, #12]
 800776c:	f7ff fedc 	bl	8007528 <SPI_WaitFifoStateUntilTimeout>
 8007770:	4603      	mov	r3, r0
 8007772:	2b00      	cmp	r3, #0
 8007774:	d007      	beq.n	8007786 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800777a:	f043 0220 	orr.w	r2, r3, #32
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007782:	2303      	movs	r3, #3
 8007784:	e000      	b.n	8007788 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007786:	2300      	movs	r3, #0
}
 8007788:	4618      	mov	r0, r3
 800778a:	3710      	adds	r7, #16
 800778c:	46bd      	mov	sp, r7
 800778e:	bd80      	pop	{r7, pc}

08007790 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b082      	sub	sp, #8
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d101      	bne.n	80077a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800779e:	2301      	movs	r3, #1
 80077a0:	e049      	b.n	8007836 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80077a8:	b2db      	uxtb	r3, r3
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d106      	bne.n	80077bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2200      	movs	r2, #0
 80077b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	f000 f841 	bl	800783e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2202      	movs	r2, #2
 80077c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681a      	ldr	r2, [r3, #0]
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	3304      	adds	r3, #4
 80077cc:	4619      	mov	r1, r3
 80077ce:	4610      	mov	r0, r2
 80077d0:	f000 f9be 	bl	8007b50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2201      	movs	r2, #1
 80077d8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2201      	movs	r2, #1
 80077e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2201      	movs	r2, #1
 80077e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2201      	movs	r2, #1
 80077f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2201      	movs	r2, #1
 80077f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2201      	movs	r2, #1
 8007800:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2201      	movs	r2, #1
 8007808:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2201      	movs	r2, #1
 8007810:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2201      	movs	r2, #1
 8007818:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2201      	movs	r2, #1
 8007820:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2201      	movs	r2, #1
 8007828:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2201      	movs	r2, #1
 8007830:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007834:	2300      	movs	r3, #0
}
 8007836:	4618      	mov	r0, r3
 8007838:	3708      	adds	r7, #8
 800783a:	46bd      	mov	sp, r7
 800783c:	bd80      	pop	{r7, pc}

0800783e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800783e:	b480      	push	{r7}
 8007840:	b083      	sub	sp, #12
 8007842:	af00      	add	r7, sp, #0
 8007844:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007846:	bf00      	nop
 8007848:	370c      	adds	r7, #12
 800784a:	46bd      	mov	sp, r7
 800784c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007850:	4770      	bx	lr
	...

08007854 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007854:	b480      	push	{r7}
 8007856:	b085      	sub	sp, #20
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007862:	b2db      	uxtb	r3, r3
 8007864:	2b01      	cmp	r3, #1
 8007866:	d001      	beq.n	800786c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007868:	2301      	movs	r3, #1
 800786a:	e036      	b.n	80078da <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2202      	movs	r2, #2
 8007870:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	68da      	ldr	r2, [r3, #12]
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f042 0201 	orr.w	r2, r2, #1
 8007882:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	4a17      	ldr	r2, [pc, #92]	@ (80078e8 <HAL_TIM_Base_Start_IT+0x94>)
 800788a:	4293      	cmp	r3, r2
 800788c:	d004      	beq.n	8007898 <HAL_TIM_Base_Start_IT+0x44>
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007896:	d115      	bne.n	80078c4 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	689a      	ldr	r2, [r3, #8]
 800789e:	4b13      	ldr	r3, [pc, #76]	@ (80078ec <HAL_TIM_Base_Start_IT+0x98>)
 80078a0:	4013      	ands	r3, r2
 80078a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	2b06      	cmp	r3, #6
 80078a8:	d015      	beq.n	80078d6 <HAL_TIM_Base_Start_IT+0x82>
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80078b0:	d011      	beq.n	80078d6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	681a      	ldr	r2, [r3, #0]
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f042 0201 	orr.w	r2, r2, #1
 80078c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078c2:	e008      	b.n	80078d6 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	681a      	ldr	r2, [r3, #0]
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f042 0201 	orr.w	r2, r2, #1
 80078d2:	601a      	str	r2, [r3, #0]
 80078d4:	e000      	b.n	80078d8 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078d6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80078d8:	2300      	movs	r3, #0
}
 80078da:	4618      	mov	r0, r3
 80078dc:	3714      	adds	r7, #20
 80078de:	46bd      	mov	sp, r7
 80078e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e4:	4770      	bx	lr
 80078e6:	bf00      	nop
 80078e8:	40012c00 	.word	0x40012c00
 80078ec:	00010007 	.word	0x00010007

080078f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b084      	sub	sp, #16
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	68db      	ldr	r3, [r3, #12]
 80078fe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	691b      	ldr	r3, [r3, #16]
 8007906:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	f003 0302 	and.w	r3, r3, #2
 800790e:	2b00      	cmp	r3, #0
 8007910:	d020      	beq.n	8007954 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	f003 0302 	and.w	r3, r3, #2
 8007918:	2b00      	cmp	r3, #0
 800791a:	d01b      	beq.n	8007954 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f06f 0202 	mvn.w	r2, #2
 8007924:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2201      	movs	r2, #1
 800792a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	699b      	ldr	r3, [r3, #24]
 8007932:	f003 0303 	and.w	r3, r3, #3
 8007936:	2b00      	cmp	r3, #0
 8007938:	d003      	beq.n	8007942 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	f000 f8e9 	bl	8007b12 <HAL_TIM_IC_CaptureCallback>
 8007940:	e005      	b.n	800794e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007942:	6878      	ldr	r0, [r7, #4]
 8007944:	f000 f8db 	bl	8007afe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	f000 f8ec 	bl	8007b26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2200      	movs	r2, #0
 8007952:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007954:	68bb      	ldr	r3, [r7, #8]
 8007956:	f003 0304 	and.w	r3, r3, #4
 800795a:	2b00      	cmp	r3, #0
 800795c:	d020      	beq.n	80079a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	f003 0304 	and.w	r3, r3, #4
 8007964:	2b00      	cmp	r3, #0
 8007966:	d01b      	beq.n	80079a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f06f 0204 	mvn.w	r2, #4
 8007970:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2202      	movs	r2, #2
 8007976:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	699b      	ldr	r3, [r3, #24]
 800797e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007982:	2b00      	cmp	r3, #0
 8007984:	d003      	beq.n	800798e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	f000 f8c3 	bl	8007b12 <HAL_TIM_IC_CaptureCallback>
 800798c:	e005      	b.n	800799a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800798e:	6878      	ldr	r0, [r7, #4]
 8007990:	f000 f8b5 	bl	8007afe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	f000 f8c6 	bl	8007b26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2200      	movs	r2, #0
 800799e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80079a0:	68bb      	ldr	r3, [r7, #8]
 80079a2:	f003 0308 	and.w	r3, r3, #8
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d020      	beq.n	80079ec <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	f003 0308 	and.w	r3, r3, #8
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d01b      	beq.n	80079ec <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f06f 0208 	mvn.w	r2, #8
 80079bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2204      	movs	r2, #4
 80079c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	69db      	ldr	r3, [r3, #28]
 80079ca:	f003 0303 	and.w	r3, r3, #3
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d003      	beq.n	80079da <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f000 f89d 	bl	8007b12 <HAL_TIM_IC_CaptureCallback>
 80079d8:	e005      	b.n	80079e6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80079da:	6878      	ldr	r0, [r7, #4]
 80079dc:	f000 f88f 	bl	8007afe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	f000 f8a0 	bl	8007b26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2200      	movs	r2, #0
 80079ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	f003 0310 	and.w	r3, r3, #16
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d020      	beq.n	8007a38 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	f003 0310 	and.w	r3, r3, #16
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d01b      	beq.n	8007a38 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f06f 0210 	mvn.w	r2, #16
 8007a08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2208      	movs	r2, #8
 8007a0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	69db      	ldr	r3, [r3, #28]
 8007a16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d003      	beq.n	8007a26 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a1e:	6878      	ldr	r0, [r7, #4]
 8007a20:	f000 f877 	bl	8007b12 <HAL_TIM_IC_CaptureCallback>
 8007a24:	e005      	b.n	8007a32 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f000 f869 	bl	8007afe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	f000 f87a 	bl	8007b26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2200      	movs	r2, #0
 8007a36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007a38:	68bb      	ldr	r3, [r7, #8]
 8007a3a:	f003 0301 	and.w	r3, r3, #1
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d00c      	beq.n	8007a5c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	f003 0301 	and.w	r3, r3, #1
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d007      	beq.n	8007a5c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f06f 0201 	mvn.w	r2, #1
 8007a54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	f7fb f852 	bl	8002b00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007a5c:	68bb      	ldr	r3, [r7, #8]
 8007a5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d104      	bne.n	8007a70 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007a66:	68bb      	ldr	r3, [r7, #8]
 8007a68:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d00c      	beq.n	8007a8a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d007      	beq.n	8007a8a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007a82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	f000 f8dd 	bl	8007c44 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d00c      	beq.n	8007aae <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d007      	beq.n	8007aae <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007aa6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007aa8:	6878      	ldr	r0, [r7, #4]
 8007aaa:	f000 f8d5 	bl	8007c58 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007aae:	68bb      	ldr	r3, [r7, #8]
 8007ab0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d00c      	beq.n	8007ad2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d007      	beq.n	8007ad2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007aca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007acc:	6878      	ldr	r0, [r7, #4]
 8007ace:	f000 f834 	bl	8007b3a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007ad2:	68bb      	ldr	r3, [r7, #8]
 8007ad4:	f003 0320 	and.w	r3, r3, #32
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d00c      	beq.n	8007af6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	f003 0320 	and.w	r3, r3, #32
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d007      	beq.n	8007af6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f06f 0220 	mvn.w	r2, #32
 8007aee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	f000 f89d 	bl	8007c30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007af6:	bf00      	nop
 8007af8:	3710      	adds	r7, #16
 8007afa:	46bd      	mov	sp, r7
 8007afc:	bd80      	pop	{r7, pc}

08007afe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007afe:	b480      	push	{r7}
 8007b00:	b083      	sub	sp, #12
 8007b02:	af00      	add	r7, sp, #0
 8007b04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007b06:	bf00      	nop
 8007b08:	370c      	adds	r7, #12
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b10:	4770      	bx	lr

08007b12 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007b12:	b480      	push	{r7}
 8007b14:	b083      	sub	sp, #12
 8007b16:	af00      	add	r7, sp, #0
 8007b18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007b1a:	bf00      	nop
 8007b1c:	370c      	adds	r7, #12
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b24:	4770      	bx	lr

08007b26 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007b26:	b480      	push	{r7}
 8007b28:	b083      	sub	sp, #12
 8007b2a:	af00      	add	r7, sp, #0
 8007b2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007b2e:	bf00      	nop
 8007b30:	370c      	adds	r7, #12
 8007b32:	46bd      	mov	sp, r7
 8007b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b38:	4770      	bx	lr

08007b3a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007b3a:	b480      	push	{r7}
 8007b3c:	b083      	sub	sp, #12
 8007b3e:	af00      	add	r7, sp, #0
 8007b40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007b42:	bf00      	nop
 8007b44:	370c      	adds	r7, #12
 8007b46:	46bd      	mov	sp, r7
 8007b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4c:	4770      	bx	lr
	...

08007b50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007b50:	b480      	push	{r7}
 8007b52:	b085      	sub	sp, #20
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
 8007b58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	4a30      	ldr	r2, [pc, #192]	@ (8007c24 <TIM_Base_SetConfig+0xd4>)
 8007b64:	4293      	cmp	r3, r2
 8007b66:	d003      	beq.n	8007b70 <TIM_Base_SetConfig+0x20>
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b6e:	d108      	bne.n	8007b82 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	685b      	ldr	r3, [r3, #4]
 8007b7c:	68fa      	ldr	r2, [r7, #12]
 8007b7e:	4313      	orrs	r3, r2
 8007b80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	4a27      	ldr	r2, [pc, #156]	@ (8007c24 <TIM_Base_SetConfig+0xd4>)
 8007b86:	4293      	cmp	r3, r2
 8007b88:	d00b      	beq.n	8007ba2 <TIM_Base_SetConfig+0x52>
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b90:	d007      	beq.n	8007ba2 <TIM_Base_SetConfig+0x52>
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	4a24      	ldr	r2, [pc, #144]	@ (8007c28 <TIM_Base_SetConfig+0xd8>)
 8007b96:	4293      	cmp	r3, r2
 8007b98:	d003      	beq.n	8007ba2 <TIM_Base_SetConfig+0x52>
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	4a23      	ldr	r2, [pc, #140]	@ (8007c2c <TIM_Base_SetConfig+0xdc>)
 8007b9e:	4293      	cmp	r3, r2
 8007ba0:	d108      	bne.n	8007bb4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007ba8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	68db      	ldr	r3, [r3, #12]
 8007bae:	68fa      	ldr	r2, [r7, #12]
 8007bb0:	4313      	orrs	r3, r2
 8007bb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	695b      	ldr	r3, [r3, #20]
 8007bbe:	4313      	orrs	r3, r2
 8007bc0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	68fa      	ldr	r2, [r7, #12]
 8007bc6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	689a      	ldr	r2, [r3, #8]
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	681a      	ldr	r2, [r3, #0]
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	4a12      	ldr	r2, [pc, #72]	@ (8007c24 <TIM_Base_SetConfig+0xd4>)
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	d007      	beq.n	8007bf0 <TIM_Base_SetConfig+0xa0>
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	4a11      	ldr	r2, [pc, #68]	@ (8007c28 <TIM_Base_SetConfig+0xd8>)
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d003      	beq.n	8007bf0 <TIM_Base_SetConfig+0xa0>
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	4a10      	ldr	r2, [pc, #64]	@ (8007c2c <TIM_Base_SetConfig+0xdc>)
 8007bec:	4293      	cmp	r3, r2
 8007bee:	d103      	bne.n	8007bf8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	691a      	ldr	r2, [r3, #16]
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2201      	movs	r2, #1
 8007bfc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	691b      	ldr	r3, [r3, #16]
 8007c02:	f003 0301 	and.w	r3, r3, #1
 8007c06:	2b01      	cmp	r3, #1
 8007c08:	d105      	bne.n	8007c16 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	691b      	ldr	r3, [r3, #16]
 8007c0e:	f023 0201 	bic.w	r2, r3, #1
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	611a      	str	r2, [r3, #16]
  }
}
 8007c16:	bf00      	nop
 8007c18:	3714      	adds	r7, #20
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c20:	4770      	bx	lr
 8007c22:	bf00      	nop
 8007c24:	40012c00 	.word	0x40012c00
 8007c28:	40014400 	.word	0x40014400
 8007c2c:	40014800 	.word	0x40014800

08007c30 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007c30:	b480      	push	{r7}
 8007c32:	b083      	sub	sp, #12
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007c38:	bf00      	nop
 8007c3a:	370c      	adds	r7, #12
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c42:	4770      	bx	lr

08007c44 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007c44:	b480      	push	{r7}
 8007c46:	b083      	sub	sp, #12
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007c4c:	bf00      	nop
 8007c4e:	370c      	adds	r7, #12
 8007c50:	46bd      	mov	sp, r7
 8007c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c56:	4770      	bx	lr

08007c58 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007c58:	b480      	push	{r7}
 8007c5a:	b083      	sub	sp, #12
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007c60:	bf00      	nop
 8007c62:	370c      	adds	r7, #12
 8007c64:	46bd      	mov	sp, r7
 8007c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6a:	4770      	bx	lr

08007c6c <LL_RCC_GetUSARTClockSource>:
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	b083      	sub	sp, #12
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8007c74:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007c78:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	4013      	ands	r3, r2
}
 8007c80:	4618      	mov	r0, r3
 8007c82:	370c      	adds	r7, #12
 8007c84:	46bd      	mov	sp, r7
 8007c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8a:	4770      	bx	lr

08007c8c <LL_RCC_GetLPUARTClockSource>:
{
 8007c8c:	b480      	push	{r7}
 8007c8e:	b083      	sub	sp, #12
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8007c94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007c98:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	4013      	ands	r3, r2
}
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	370c      	adds	r7, #12
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007caa:	4770      	bx	lr

08007cac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b082      	sub	sp, #8
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d101      	bne.n	8007cbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007cba:	2301      	movs	r3, #1
 8007cbc:	e042      	b.n	8007d44 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d106      	bne.n	8007cd6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2200      	movs	r2, #0
 8007ccc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007cd0:	6878      	ldr	r0, [r7, #4]
 8007cd2:	f7fb f899 	bl	8002e08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2224      	movs	r2, #36	@ 0x24
 8007cda:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	681a      	ldr	r2, [r3, #0]
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f022 0201 	bic.w	r2, r2, #1
 8007cec:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d002      	beq.n	8007cfc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f000 fe32 	bl	8008960 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f000 fc07 	bl	8008510 <UART_SetConfig>
 8007d02:	4603      	mov	r3, r0
 8007d04:	2b01      	cmp	r3, #1
 8007d06:	d101      	bne.n	8007d0c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007d08:	2301      	movs	r3, #1
 8007d0a:	e01b      	b.n	8007d44 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	685a      	ldr	r2, [r3, #4]
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007d1a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	689a      	ldr	r2, [r3, #8]
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007d2a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	681a      	ldr	r2, [r3, #0]
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f042 0201 	orr.w	r2, r2, #1
 8007d3a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007d3c:	6878      	ldr	r0, [r7, #4]
 8007d3e:	f000 feb1 	bl	8008aa4 <UART_CheckIdleState>
 8007d42:	4603      	mov	r3, r0
}
 8007d44:	4618      	mov	r0, r3
 8007d46:	3708      	adds	r7, #8
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	bd80      	pop	{r7, pc}

08007d4c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b08a      	sub	sp, #40	@ 0x28
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	60f8      	str	r0, [r7, #12]
 8007d54:	60b9      	str	r1, [r7, #8]
 8007d56:	4613      	mov	r3, r2
 8007d58:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d60:	2b20      	cmp	r3, #32
 8007d62:	d167      	bne.n	8007e34 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d64:	68bb      	ldr	r3, [r7, #8]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d002      	beq.n	8007d70 <HAL_UART_Transmit_DMA+0x24>
 8007d6a:	88fb      	ldrh	r3, [r7, #6]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d101      	bne.n	8007d74 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8007d70:	2301      	movs	r3, #1
 8007d72:	e060      	b.n	8007e36 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	68ba      	ldr	r2, [r7, #8]
 8007d78:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	88fa      	ldrh	r2, [r7, #6]
 8007d7e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	88fa      	ldrh	r2, [r7, #6]
 8007d86:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	2221      	movs	r2, #33	@ 0x21
 8007d96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d028      	beq.n	8007df4 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007da6:	4a26      	ldr	r2, [pc, #152]	@ (8007e40 <HAL_UART_Transmit_DMA+0xf4>)
 8007da8:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007dae:	4a25      	ldr	r2, [pc, #148]	@ (8007e44 <HAL_UART_Transmit_DMA+0xf8>)
 8007db0:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007db6:	4a24      	ldr	r2, [pc, #144]	@ (8007e48 <HAL_UART_Transmit_DMA+0xfc>)
 8007db8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007dca:	4619      	mov	r1, r3
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	3328      	adds	r3, #40	@ 0x28
 8007dd2:	461a      	mov	r2, r3
 8007dd4:	88fb      	ldrh	r3, [r7, #6]
 8007dd6:	f7fb fc37 	bl	8003648 <HAL_DMA_Start_IT>
 8007dda:	4603      	mov	r3, r0
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d009      	beq.n	8007df4 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	2210      	movs	r2, #16
 8007de4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	2220      	movs	r2, #32
 8007dec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8007df0:	2301      	movs	r3, #1
 8007df2:	e020      	b.n	8007e36 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	2240      	movs	r2, #64	@ 0x40
 8007dfa:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	3308      	adds	r3, #8
 8007e02:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e04:	697b      	ldr	r3, [r7, #20]
 8007e06:	e853 3f00 	ldrex	r3, [r3]
 8007e0a:	613b      	str	r3, [r7, #16]
   return(result);
 8007e0c:	693b      	ldr	r3, [r7, #16]
 8007e0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e12:	627b      	str	r3, [r7, #36]	@ 0x24
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	3308      	adds	r3, #8
 8007e1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e1c:	623a      	str	r2, [r7, #32]
 8007e1e:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e20:	69f9      	ldr	r1, [r7, #28]
 8007e22:	6a3a      	ldr	r2, [r7, #32]
 8007e24:	e841 2300 	strex	r3, r2, [r1]
 8007e28:	61bb      	str	r3, [r7, #24]
   return(result);
 8007e2a:	69bb      	ldr	r3, [r7, #24]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d1e5      	bne.n	8007dfc <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8007e30:	2300      	movs	r3, #0
 8007e32:	e000      	b.n	8007e36 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8007e34:	2302      	movs	r3, #2
  }
}
 8007e36:	4618      	mov	r0, r3
 8007e38:	3728      	adds	r7, #40	@ 0x28
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	bd80      	pop	{r7, pc}
 8007e3e:	bf00      	nop
 8007e40:	08008e21 	.word	0x08008e21
 8007e44:	08008ebb 	.word	0x08008ebb
 8007e48:	08008ed7 	.word	0x08008ed7

08007e4c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b0ba      	sub	sp, #232	@ 0xe8
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	69db      	ldr	r3, [r3, #28]
 8007e5a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	689b      	ldr	r3, [r3, #8]
 8007e6e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007e72:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8007e76:	f640 030f 	movw	r3, #2063	@ 0x80f
 8007e7a:	4013      	ands	r3, r2
 8007e7c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007e80:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d11b      	bne.n	8007ec0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007e88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e8c:	f003 0320 	and.w	r3, r3, #32
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d015      	beq.n	8007ec0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007e94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e98:	f003 0320 	and.w	r3, r3, #32
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d105      	bne.n	8007eac <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007ea0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007ea4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d009      	beq.n	8007ec0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	f000 8300 	beq.w	80084b6 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007eba:	6878      	ldr	r0, [r7, #4]
 8007ebc:	4798      	blx	r3
      }
      return;
 8007ebe:	e2fa      	b.n	80084b6 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007ec0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	f000 8123 	beq.w	8008110 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007eca:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007ece:	4b8d      	ldr	r3, [pc, #564]	@ (8008104 <HAL_UART_IRQHandler+0x2b8>)
 8007ed0:	4013      	ands	r3, r2
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d106      	bne.n	8007ee4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007ed6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8007eda:	4b8b      	ldr	r3, [pc, #556]	@ (8008108 <HAL_UART_IRQHandler+0x2bc>)
 8007edc:	4013      	ands	r3, r2
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	f000 8116 	beq.w	8008110 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007ee4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ee8:	f003 0301 	and.w	r3, r3, #1
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d011      	beq.n	8007f14 <HAL_UART_IRQHandler+0xc8>
 8007ef0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ef4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d00b      	beq.n	8007f14 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	2201      	movs	r2, #1
 8007f02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f0a:	f043 0201 	orr.w	r2, r3, #1
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007f14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f18:	f003 0302 	and.w	r3, r3, #2
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d011      	beq.n	8007f44 <HAL_UART_IRQHandler+0xf8>
 8007f20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007f24:	f003 0301 	and.w	r3, r3, #1
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d00b      	beq.n	8007f44 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	2202      	movs	r2, #2
 8007f32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f3a:	f043 0204 	orr.w	r2, r3, #4
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007f44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f48:	f003 0304 	and.w	r3, r3, #4
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d011      	beq.n	8007f74 <HAL_UART_IRQHandler+0x128>
 8007f50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007f54:	f003 0301 	and.w	r3, r3, #1
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d00b      	beq.n	8007f74 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	2204      	movs	r2, #4
 8007f62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f6a:	f043 0202 	orr.w	r2, r3, #2
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007f74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f78:	f003 0308 	and.w	r3, r3, #8
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d017      	beq.n	8007fb0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007f80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f84:	f003 0320 	and.w	r3, r3, #32
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d105      	bne.n	8007f98 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007f8c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007f90:	4b5c      	ldr	r3, [pc, #368]	@ (8008104 <HAL_UART_IRQHandler+0x2b8>)
 8007f92:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d00b      	beq.n	8007fb0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	2208      	movs	r2, #8
 8007f9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007fa6:	f043 0208 	orr.w	r2, r3, #8
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007fb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007fb4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d012      	beq.n	8007fe2 <HAL_UART_IRQHandler+0x196>
 8007fbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007fc0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d00c      	beq.n	8007fe2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007fd0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007fd8:	f043 0220 	orr.w	r2, r3, #32
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	f000 8266 	beq.w	80084ba <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007fee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ff2:	f003 0320 	and.w	r3, r3, #32
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d013      	beq.n	8008022 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007ffa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ffe:	f003 0320 	and.w	r3, r3, #32
 8008002:	2b00      	cmp	r3, #0
 8008004:	d105      	bne.n	8008012 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008006:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800800a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800800e:	2b00      	cmp	r3, #0
 8008010:	d007      	beq.n	8008022 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008016:	2b00      	cmp	r3, #0
 8008018:	d003      	beq.n	8008022 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008028:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	689b      	ldr	r3, [r3, #8]
 8008032:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008036:	2b40      	cmp	r3, #64	@ 0x40
 8008038:	d005      	beq.n	8008046 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800803a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800803e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008042:	2b00      	cmp	r3, #0
 8008044:	d054      	beq.n	80080f0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008046:	6878      	ldr	r0, [r7, #4]
 8008048:	f000 fe84 	bl	8008d54 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	689b      	ldr	r3, [r3, #8]
 8008052:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008056:	2b40      	cmp	r3, #64	@ 0x40
 8008058:	d146      	bne.n	80080e8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	3308      	adds	r3, #8
 8008060:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008064:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008068:	e853 3f00 	ldrex	r3, [r3]
 800806c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008070:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008074:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008078:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	3308      	adds	r3, #8
 8008082:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008086:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800808a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800808e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008092:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008096:	e841 2300 	strex	r3, r2, [r1]
 800809a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800809e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d1d9      	bne.n	800805a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d017      	beq.n	80080e0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80080b6:	4a15      	ldr	r2, [pc, #84]	@ (800810c <HAL_UART_IRQHandler+0x2c0>)
 80080b8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80080c0:	4618      	mov	r0, r3
 80080c2:	f7fb fb9b 	bl	80037fc <HAL_DMA_Abort_IT>
 80080c6:	4603      	mov	r3, r0
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d019      	beq.n	8008100 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80080d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080d4:	687a      	ldr	r2, [r7, #4]
 80080d6:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80080da:	4610      	mov	r0, r2
 80080dc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080de:	e00f      	b.n	8008100 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80080e0:	6878      	ldr	r0, [r7, #4]
 80080e2:	f000 f9ff 	bl	80084e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080e6:	e00b      	b.n	8008100 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80080e8:	6878      	ldr	r0, [r7, #4]
 80080ea:	f000 f9fb 	bl	80084e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080ee:	e007      	b.n	8008100 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80080f0:	6878      	ldr	r0, [r7, #4]
 80080f2:	f000 f9f7 	bl	80084e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2200      	movs	r2, #0
 80080fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80080fe:	e1dc      	b.n	80084ba <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008100:	bf00      	nop
    return;
 8008102:	e1da      	b.n	80084ba <HAL_UART_IRQHandler+0x66e>
 8008104:	10000001 	.word	0x10000001
 8008108:	04000120 	.word	0x04000120
 800810c:	08008f57 	.word	0x08008f57

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008114:	2b01      	cmp	r3, #1
 8008116:	f040 8170 	bne.w	80083fa <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800811a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800811e:	f003 0310 	and.w	r3, r3, #16
 8008122:	2b00      	cmp	r3, #0
 8008124:	f000 8169 	beq.w	80083fa <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008128:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800812c:	f003 0310 	and.w	r3, r3, #16
 8008130:	2b00      	cmp	r3, #0
 8008132:	f000 8162 	beq.w	80083fa <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	2210      	movs	r2, #16
 800813c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	689b      	ldr	r3, [r3, #8]
 8008144:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008148:	2b40      	cmp	r3, #64	@ 0x40
 800814a:	f040 80d8 	bne.w	80082fe <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	685b      	ldr	r3, [r3, #4]
 8008158:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800815c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008160:	2b00      	cmp	r3, #0
 8008162:	f000 80af 	beq.w	80082c4 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800816c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008170:	429a      	cmp	r2, r3
 8008172:	f080 80a7 	bcs.w	80082c4 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800817c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	f003 0320 	and.w	r3, r3, #32
 800818e:	2b00      	cmp	r3, #0
 8008190:	f040 8087 	bne.w	80082a2 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800819c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80081a0:	e853 3f00 	ldrex	r3, [r3]
 80081a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80081a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80081ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80081b0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	461a      	mov	r2, r3
 80081ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80081be:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80081c2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081c6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80081ca:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80081ce:	e841 2300 	strex	r3, r2, [r1]
 80081d2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80081d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d1da      	bne.n	8008194 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	3308      	adds	r3, #8
 80081e4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081e6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80081e8:	e853 3f00 	ldrex	r3, [r3]
 80081ec:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80081ee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80081f0:	f023 0301 	bic.w	r3, r3, #1
 80081f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	3308      	adds	r3, #8
 80081fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008202:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008206:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008208:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800820a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800820e:	e841 2300 	strex	r3, r2, [r1]
 8008212:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008214:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008216:	2b00      	cmp	r3, #0
 8008218:	d1e1      	bne.n	80081de <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	3308      	adds	r3, #8
 8008220:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008222:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008224:	e853 3f00 	ldrex	r3, [r3]
 8008228:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800822a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800822c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008230:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	3308      	adds	r3, #8
 800823a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800823e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008240:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008242:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008244:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008246:	e841 2300 	strex	r3, r2, [r1]
 800824a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800824c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800824e:	2b00      	cmp	r3, #0
 8008250:	d1e3      	bne.n	800821a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	2220      	movs	r2, #32
 8008256:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	2200      	movs	r2, #0
 800825e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008266:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008268:	e853 3f00 	ldrex	r3, [r3]
 800826c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800826e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008270:	f023 0310 	bic.w	r3, r3, #16
 8008274:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	461a      	mov	r2, r3
 800827e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008282:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008284:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008286:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008288:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800828a:	e841 2300 	strex	r3, r2, [r1]
 800828e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008290:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008292:	2b00      	cmp	r3, #0
 8008294:	d1e4      	bne.n	8008260 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800829c:	4618      	mov	r0, r3
 800829e:	f7fb fa4e 	bl	800373e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2202      	movs	r2, #2
 80082a6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80082b4:	b29b      	uxth	r3, r3
 80082b6:	1ad3      	subs	r3, r2, r3
 80082b8:	b29b      	uxth	r3, r3
 80082ba:	4619      	mov	r1, r3
 80082bc:	6878      	ldr	r0, [r7, #4]
 80082be:	f000 f91b 	bl	80084f8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80082c2:	e0fc      	b.n	80084be <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80082ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80082ce:	429a      	cmp	r2, r3
 80082d0:	f040 80f5 	bne.w	80084be <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f003 0320 	and.w	r3, r3, #32
 80082e2:	2b20      	cmp	r3, #32
 80082e4:	f040 80eb 	bne.w	80084be <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2202      	movs	r2, #2
 80082ec:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80082f4:	4619      	mov	r1, r3
 80082f6:	6878      	ldr	r0, [r7, #4]
 80082f8:	f000 f8fe 	bl	80084f8 <HAL_UARTEx_RxEventCallback>
      return;
 80082fc:	e0df      	b.n	80084be <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800830a:	b29b      	uxth	r3, r3
 800830c:	1ad3      	subs	r3, r2, r3
 800830e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008318:	b29b      	uxth	r3, r3
 800831a:	2b00      	cmp	r3, #0
 800831c:	f000 80d1 	beq.w	80084c2 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8008320:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008324:	2b00      	cmp	r3, #0
 8008326:	f000 80cc 	beq.w	80084c2 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008330:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008332:	e853 3f00 	ldrex	r3, [r3]
 8008336:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008338:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800833a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800833e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	461a      	mov	r2, r3
 8008348:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800834c:	647b      	str	r3, [r7, #68]	@ 0x44
 800834e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008350:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008352:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008354:	e841 2300 	strex	r3, r2, [r1]
 8008358:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800835a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800835c:	2b00      	cmp	r3, #0
 800835e:	d1e4      	bne.n	800832a <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	3308      	adds	r3, #8
 8008366:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800836a:	e853 3f00 	ldrex	r3, [r3]
 800836e:	623b      	str	r3, [r7, #32]
   return(result);
 8008370:	6a3b      	ldr	r3, [r7, #32]
 8008372:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008376:	f023 0301 	bic.w	r3, r3, #1
 800837a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	3308      	adds	r3, #8
 8008384:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008388:	633a      	str	r2, [r7, #48]	@ 0x30
 800838a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800838c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800838e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008390:	e841 2300 	strex	r3, r2, [r1]
 8008394:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008396:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008398:	2b00      	cmp	r3, #0
 800839a:	d1e1      	bne.n	8008360 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2220      	movs	r2, #32
 80083a0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2200      	movs	r2, #0
 80083a8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	2200      	movs	r2, #0
 80083ae:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083b6:	693b      	ldr	r3, [r7, #16]
 80083b8:	e853 3f00 	ldrex	r3, [r3]
 80083bc:	60fb      	str	r3, [r7, #12]
   return(result);
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	f023 0310 	bic.w	r3, r3, #16
 80083c4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	461a      	mov	r2, r3
 80083ce:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80083d2:	61fb      	str	r3, [r7, #28]
 80083d4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083d6:	69b9      	ldr	r1, [r7, #24]
 80083d8:	69fa      	ldr	r2, [r7, #28]
 80083da:	e841 2300 	strex	r3, r2, [r1]
 80083de:	617b      	str	r3, [r7, #20]
   return(result);
 80083e0:	697b      	ldr	r3, [r7, #20]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d1e4      	bne.n	80083b0 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	2202      	movs	r2, #2
 80083ea:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80083ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80083f0:	4619      	mov	r1, r3
 80083f2:	6878      	ldr	r0, [r7, #4]
 80083f4:	f000 f880 	bl	80084f8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80083f8:	e063      	b.n	80084c2 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80083fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80083fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008402:	2b00      	cmp	r3, #0
 8008404:	d00e      	beq.n	8008424 <HAL_UART_IRQHandler+0x5d8>
 8008406:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800840a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800840e:	2b00      	cmp	r3, #0
 8008410:	d008      	beq.n	8008424 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800841a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800841c:	6878      	ldr	r0, [r7, #4]
 800841e:	f000 fddb 	bl	8008fd8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008422:	e051      	b.n	80084c8 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008424:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008428:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800842c:	2b00      	cmp	r3, #0
 800842e:	d014      	beq.n	800845a <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008430:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008434:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008438:	2b00      	cmp	r3, #0
 800843a:	d105      	bne.n	8008448 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800843c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008440:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008444:	2b00      	cmp	r3, #0
 8008446:	d008      	beq.n	800845a <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800844c:	2b00      	cmp	r3, #0
 800844e:	d03a      	beq.n	80084c6 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008454:	6878      	ldr	r0, [r7, #4]
 8008456:	4798      	blx	r3
    }
    return;
 8008458:	e035      	b.n	80084c6 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800845a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800845e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008462:	2b00      	cmp	r3, #0
 8008464:	d009      	beq.n	800847a <HAL_UART_IRQHandler+0x62e>
 8008466:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800846a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800846e:	2b00      	cmp	r3, #0
 8008470:	d003      	beq.n	800847a <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8008472:	6878      	ldr	r0, [r7, #4]
 8008474:	f000 fd85 	bl	8008f82 <UART_EndTransmit_IT>
    return;
 8008478:	e026      	b.n	80084c8 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800847a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800847e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008482:	2b00      	cmp	r3, #0
 8008484:	d009      	beq.n	800849a <HAL_UART_IRQHandler+0x64e>
 8008486:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800848a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800848e:	2b00      	cmp	r3, #0
 8008490:	d003      	beq.n	800849a <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008492:	6878      	ldr	r0, [r7, #4]
 8008494:	f000 fdb4 	bl	8009000 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008498:	e016      	b.n	80084c8 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800849a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800849e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d010      	beq.n	80084c8 <HAL_UART_IRQHandler+0x67c>
 80084a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	da0c      	bge.n	80084c8 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80084ae:	6878      	ldr	r0, [r7, #4]
 80084b0:	f000 fd9c 	bl	8008fec <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80084b4:	e008      	b.n	80084c8 <HAL_UART_IRQHandler+0x67c>
      return;
 80084b6:	bf00      	nop
 80084b8:	e006      	b.n	80084c8 <HAL_UART_IRQHandler+0x67c>
    return;
 80084ba:	bf00      	nop
 80084bc:	e004      	b.n	80084c8 <HAL_UART_IRQHandler+0x67c>
      return;
 80084be:	bf00      	nop
 80084c0:	e002      	b.n	80084c8 <HAL_UART_IRQHandler+0x67c>
      return;
 80084c2:	bf00      	nop
 80084c4:	e000      	b.n	80084c8 <HAL_UART_IRQHandler+0x67c>
    return;
 80084c6:	bf00      	nop
  }
}
 80084c8:	37e8      	adds	r7, #232	@ 0xe8
 80084ca:	46bd      	mov	sp, r7
 80084cc:	bd80      	pop	{r7, pc}
 80084ce:	bf00      	nop

080084d0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80084d0:	b480      	push	{r7}
 80084d2:	b083      	sub	sp, #12
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80084d8:	bf00      	nop
 80084da:	370c      	adds	r7, #12
 80084dc:	46bd      	mov	sp, r7
 80084de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e2:	4770      	bx	lr

080084e4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80084e4:	b480      	push	{r7}
 80084e6:	b083      	sub	sp, #12
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80084ec:	bf00      	nop
 80084ee:	370c      	adds	r7, #12
 80084f0:	46bd      	mov	sp, r7
 80084f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f6:	4770      	bx	lr

080084f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80084f8:	b480      	push	{r7}
 80084fa:	b083      	sub	sp, #12
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
 8008500:	460b      	mov	r3, r1
 8008502:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008504:	bf00      	nop
 8008506:	370c      	adds	r7, #12
 8008508:	46bd      	mov	sp, r7
 800850a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850e:	4770      	bx	lr

08008510 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008510:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008514:	b08c      	sub	sp, #48	@ 0x30
 8008516:	af00      	add	r7, sp, #0
 8008518:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800851a:	2300      	movs	r3, #0
 800851c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008520:	697b      	ldr	r3, [r7, #20]
 8008522:	689a      	ldr	r2, [r3, #8]
 8008524:	697b      	ldr	r3, [r7, #20]
 8008526:	691b      	ldr	r3, [r3, #16]
 8008528:	431a      	orrs	r2, r3
 800852a:	697b      	ldr	r3, [r7, #20]
 800852c:	695b      	ldr	r3, [r3, #20]
 800852e:	431a      	orrs	r2, r3
 8008530:	697b      	ldr	r3, [r7, #20]
 8008532:	69db      	ldr	r3, [r3, #28]
 8008534:	4313      	orrs	r3, r2
 8008536:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008538:	697b      	ldr	r3, [r7, #20]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	681a      	ldr	r2, [r3, #0]
 800853e:	4baf      	ldr	r3, [pc, #700]	@ (80087fc <UART_SetConfig+0x2ec>)
 8008540:	4013      	ands	r3, r2
 8008542:	697a      	ldr	r2, [r7, #20]
 8008544:	6812      	ldr	r2, [r2, #0]
 8008546:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008548:	430b      	orrs	r3, r1
 800854a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800854c:	697b      	ldr	r3, [r7, #20]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	685b      	ldr	r3, [r3, #4]
 8008552:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008556:	697b      	ldr	r3, [r7, #20]
 8008558:	68da      	ldr	r2, [r3, #12]
 800855a:	697b      	ldr	r3, [r7, #20]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	430a      	orrs	r2, r1
 8008560:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008562:	697b      	ldr	r3, [r7, #20]
 8008564:	699b      	ldr	r3, [r3, #24]
 8008566:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008568:	697b      	ldr	r3, [r7, #20]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	4aa4      	ldr	r2, [pc, #656]	@ (8008800 <UART_SetConfig+0x2f0>)
 800856e:	4293      	cmp	r3, r2
 8008570:	d004      	beq.n	800857c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008572:	697b      	ldr	r3, [r7, #20]
 8008574:	6a1b      	ldr	r3, [r3, #32]
 8008576:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008578:	4313      	orrs	r3, r2
 800857a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800857c:	697b      	ldr	r3, [r7, #20]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	689b      	ldr	r3, [r3, #8]
 8008582:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8008586:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800858a:	697a      	ldr	r2, [r7, #20]
 800858c:	6812      	ldr	r2, [r2, #0]
 800858e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008590:	430b      	orrs	r3, r1
 8008592:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008594:	697b      	ldr	r3, [r7, #20]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800859a:	f023 010f 	bic.w	r1, r3, #15
 800859e:	697b      	ldr	r3, [r7, #20]
 80085a0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80085a2:	697b      	ldr	r3, [r7, #20]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	430a      	orrs	r2, r1
 80085a8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80085aa:	697b      	ldr	r3, [r7, #20]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	4a95      	ldr	r2, [pc, #596]	@ (8008804 <UART_SetConfig+0x2f4>)
 80085b0:	4293      	cmp	r3, r2
 80085b2:	d125      	bne.n	8008600 <UART_SetConfig+0xf0>
 80085b4:	2003      	movs	r0, #3
 80085b6:	f7ff fb59 	bl	8007c6c <LL_RCC_GetUSARTClockSource>
 80085ba:	4603      	mov	r3, r0
 80085bc:	2b03      	cmp	r3, #3
 80085be:	d81b      	bhi.n	80085f8 <UART_SetConfig+0xe8>
 80085c0:	a201      	add	r2, pc, #4	@ (adr r2, 80085c8 <UART_SetConfig+0xb8>)
 80085c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085c6:	bf00      	nop
 80085c8:	080085d9 	.word	0x080085d9
 80085cc:	080085e9 	.word	0x080085e9
 80085d0:	080085e1 	.word	0x080085e1
 80085d4:	080085f1 	.word	0x080085f1
 80085d8:	2301      	movs	r3, #1
 80085da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80085de:	e042      	b.n	8008666 <UART_SetConfig+0x156>
 80085e0:	2302      	movs	r3, #2
 80085e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80085e6:	e03e      	b.n	8008666 <UART_SetConfig+0x156>
 80085e8:	2304      	movs	r3, #4
 80085ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80085ee:	e03a      	b.n	8008666 <UART_SetConfig+0x156>
 80085f0:	2308      	movs	r3, #8
 80085f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80085f6:	e036      	b.n	8008666 <UART_SetConfig+0x156>
 80085f8:	2310      	movs	r3, #16
 80085fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80085fe:	e032      	b.n	8008666 <UART_SetConfig+0x156>
 8008600:	697b      	ldr	r3, [r7, #20]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	4a7e      	ldr	r2, [pc, #504]	@ (8008800 <UART_SetConfig+0x2f0>)
 8008606:	4293      	cmp	r3, r2
 8008608:	d12a      	bne.n	8008660 <UART_SetConfig+0x150>
 800860a:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 800860e:	f7ff fb3d 	bl	8007c8c <LL_RCC_GetLPUARTClockSource>
 8008612:	4603      	mov	r3, r0
 8008614:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008618:	d01a      	beq.n	8008650 <UART_SetConfig+0x140>
 800861a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800861e:	d81b      	bhi.n	8008658 <UART_SetConfig+0x148>
 8008620:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008624:	d00c      	beq.n	8008640 <UART_SetConfig+0x130>
 8008626:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800862a:	d815      	bhi.n	8008658 <UART_SetConfig+0x148>
 800862c:	2b00      	cmp	r3, #0
 800862e:	d003      	beq.n	8008638 <UART_SetConfig+0x128>
 8008630:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008634:	d008      	beq.n	8008648 <UART_SetConfig+0x138>
 8008636:	e00f      	b.n	8008658 <UART_SetConfig+0x148>
 8008638:	2300      	movs	r3, #0
 800863a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800863e:	e012      	b.n	8008666 <UART_SetConfig+0x156>
 8008640:	2302      	movs	r3, #2
 8008642:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008646:	e00e      	b.n	8008666 <UART_SetConfig+0x156>
 8008648:	2304      	movs	r3, #4
 800864a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800864e:	e00a      	b.n	8008666 <UART_SetConfig+0x156>
 8008650:	2308      	movs	r3, #8
 8008652:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008656:	e006      	b.n	8008666 <UART_SetConfig+0x156>
 8008658:	2310      	movs	r3, #16
 800865a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800865e:	e002      	b.n	8008666 <UART_SetConfig+0x156>
 8008660:	2310      	movs	r3, #16
 8008662:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008666:	697b      	ldr	r3, [r7, #20]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	4a65      	ldr	r2, [pc, #404]	@ (8008800 <UART_SetConfig+0x2f0>)
 800866c:	4293      	cmp	r3, r2
 800866e:	f040 8097 	bne.w	80087a0 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008672:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008676:	2b08      	cmp	r3, #8
 8008678:	d823      	bhi.n	80086c2 <UART_SetConfig+0x1b2>
 800867a:	a201      	add	r2, pc, #4	@ (adr r2, 8008680 <UART_SetConfig+0x170>)
 800867c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008680:	080086a5 	.word	0x080086a5
 8008684:	080086c3 	.word	0x080086c3
 8008688:	080086ad 	.word	0x080086ad
 800868c:	080086c3 	.word	0x080086c3
 8008690:	080086b3 	.word	0x080086b3
 8008694:	080086c3 	.word	0x080086c3
 8008698:	080086c3 	.word	0x080086c3
 800869c:	080086c3 	.word	0x080086c3
 80086a0:	080086bb 	.word	0x080086bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80086a4:	f7fd fb02 	bl	8005cac <HAL_RCC_GetPCLK1Freq>
 80086a8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80086aa:	e010      	b.n	80086ce <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80086ac:	4b56      	ldr	r3, [pc, #344]	@ (8008808 <UART_SetConfig+0x2f8>)
 80086ae:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80086b0:	e00d      	b.n	80086ce <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80086b2:	f7fd fa7b 	bl	8005bac <HAL_RCC_GetSysClockFreq>
 80086b6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80086b8:	e009      	b.n	80086ce <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80086ba:	f248 0306 	movw	r3, #32774	@ 0x8006
 80086be:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80086c0:	e005      	b.n	80086ce <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 80086c2:	2300      	movs	r3, #0
 80086c4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80086c6:	2301      	movs	r3, #1
 80086c8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80086cc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80086ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	f000 812b 	beq.w	800892c <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80086d6:	697b      	ldr	r3, [r7, #20]
 80086d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086da:	4a4c      	ldr	r2, [pc, #304]	@ (800880c <UART_SetConfig+0x2fc>)
 80086dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80086e0:	461a      	mov	r2, r3
 80086e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80086e8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80086ea:	697b      	ldr	r3, [r7, #20]
 80086ec:	685a      	ldr	r2, [r3, #4]
 80086ee:	4613      	mov	r3, r2
 80086f0:	005b      	lsls	r3, r3, #1
 80086f2:	4413      	add	r3, r2
 80086f4:	69ba      	ldr	r2, [r7, #24]
 80086f6:	429a      	cmp	r2, r3
 80086f8:	d305      	bcc.n	8008706 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80086fa:	697b      	ldr	r3, [r7, #20]
 80086fc:	685b      	ldr	r3, [r3, #4]
 80086fe:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008700:	69ba      	ldr	r2, [r7, #24]
 8008702:	429a      	cmp	r2, r3
 8008704:	d903      	bls.n	800870e <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8008706:	2301      	movs	r3, #1
 8008708:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800870c:	e10e      	b.n	800892c <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800870e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008710:	2200      	movs	r2, #0
 8008712:	60bb      	str	r3, [r7, #8]
 8008714:	60fa      	str	r2, [r7, #12]
 8008716:	697b      	ldr	r3, [r7, #20]
 8008718:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800871a:	4a3c      	ldr	r2, [pc, #240]	@ (800880c <UART_SetConfig+0x2fc>)
 800871c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008720:	b29b      	uxth	r3, r3
 8008722:	2200      	movs	r2, #0
 8008724:	603b      	str	r3, [r7, #0]
 8008726:	607a      	str	r2, [r7, #4]
 8008728:	e9d7 2300 	ldrd	r2, r3, [r7]
 800872c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008730:	f7f8 f864 	bl	80007fc <__aeabi_uldivmod>
 8008734:	4602      	mov	r2, r0
 8008736:	460b      	mov	r3, r1
 8008738:	4610      	mov	r0, r2
 800873a:	4619      	mov	r1, r3
 800873c:	f04f 0200 	mov.w	r2, #0
 8008740:	f04f 0300 	mov.w	r3, #0
 8008744:	020b      	lsls	r3, r1, #8
 8008746:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800874a:	0202      	lsls	r2, r0, #8
 800874c:	6979      	ldr	r1, [r7, #20]
 800874e:	6849      	ldr	r1, [r1, #4]
 8008750:	0849      	lsrs	r1, r1, #1
 8008752:	2000      	movs	r0, #0
 8008754:	460c      	mov	r4, r1
 8008756:	4605      	mov	r5, r0
 8008758:	eb12 0804 	adds.w	r8, r2, r4
 800875c:	eb43 0905 	adc.w	r9, r3, r5
 8008760:	697b      	ldr	r3, [r7, #20]
 8008762:	685b      	ldr	r3, [r3, #4]
 8008764:	2200      	movs	r2, #0
 8008766:	469a      	mov	sl, r3
 8008768:	4693      	mov	fp, r2
 800876a:	4652      	mov	r2, sl
 800876c:	465b      	mov	r3, fp
 800876e:	4640      	mov	r0, r8
 8008770:	4649      	mov	r1, r9
 8008772:	f7f8 f843 	bl	80007fc <__aeabi_uldivmod>
 8008776:	4602      	mov	r2, r0
 8008778:	460b      	mov	r3, r1
 800877a:	4613      	mov	r3, r2
 800877c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800877e:	6a3b      	ldr	r3, [r7, #32]
 8008780:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008784:	d308      	bcc.n	8008798 <UART_SetConfig+0x288>
 8008786:	6a3b      	ldr	r3, [r7, #32]
 8008788:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800878c:	d204      	bcs.n	8008798 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 800878e:	697b      	ldr	r3, [r7, #20]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	6a3a      	ldr	r2, [r7, #32]
 8008794:	60da      	str	r2, [r3, #12]
 8008796:	e0c9      	b.n	800892c <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8008798:	2301      	movs	r3, #1
 800879a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800879e:	e0c5      	b.n	800892c <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80087a0:	697b      	ldr	r3, [r7, #20]
 80087a2:	69db      	ldr	r3, [r3, #28]
 80087a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80087a8:	d16d      	bne.n	8008886 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 80087aa:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80087ae:	3b01      	subs	r3, #1
 80087b0:	2b07      	cmp	r3, #7
 80087b2:	d82d      	bhi.n	8008810 <UART_SetConfig+0x300>
 80087b4:	a201      	add	r2, pc, #4	@ (adr r2, 80087bc <UART_SetConfig+0x2ac>)
 80087b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087ba:	bf00      	nop
 80087bc:	080087dd 	.word	0x080087dd
 80087c0:	080087e5 	.word	0x080087e5
 80087c4:	08008811 	.word	0x08008811
 80087c8:	080087eb 	.word	0x080087eb
 80087cc:	08008811 	.word	0x08008811
 80087d0:	08008811 	.word	0x08008811
 80087d4:	08008811 	.word	0x08008811
 80087d8:	080087f3 	.word	0x080087f3
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80087dc:	f7fd fa7c 	bl	8005cd8 <HAL_RCC_GetPCLK2Freq>
 80087e0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80087e2:	e01b      	b.n	800881c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80087e4:	4b08      	ldr	r3, [pc, #32]	@ (8008808 <UART_SetConfig+0x2f8>)
 80087e6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80087e8:	e018      	b.n	800881c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80087ea:	f7fd f9df 	bl	8005bac <HAL_RCC_GetSysClockFreq>
 80087ee:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80087f0:	e014      	b.n	800881c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80087f2:	f248 0306 	movw	r3, #32774	@ 0x8006
 80087f6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80087f8:	e010      	b.n	800881c <UART_SetConfig+0x30c>
 80087fa:	bf00      	nop
 80087fc:	cfff69f3 	.word	0xcfff69f3
 8008800:	40008000 	.word	0x40008000
 8008804:	40013800 	.word	0x40013800
 8008808:	00f42400 	.word	0x00f42400
 800880c:	08010e88 	.word	0x08010e88
      default:
        pclk = 0U;
 8008810:	2300      	movs	r3, #0
 8008812:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008814:	2301      	movs	r3, #1
 8008816:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800881a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800881c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800881e:	2b00      	cmp	r3, #0
 8008820:	f000 8084 	beq.w	800892c <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008824:	697b      	ldr	r3, [r7, #20]
 8008826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008828:	4a4b      	ldr	r2, [pc, #300]	@ (8008958 <UART_SetConfig+0x448>)
 800882a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800882e:	461a      	mov	r2, r3
 8008830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008832:	fbb3 f3f2 	udiv	r3, r3, r2
 8008836:	005a      	lsls	r2, r3, #1
 8008838:	697b      	ldr	r3, [r7, #20]
 800883a:	685b      	ldr	r3, [r3, #4]
 800883c:	085b      	lsrs	r3, r3, #1
 800883e:	441a      	add	r2, r3
 8008840:	697b      	ldr	r3, [r7, #20]
 8008842:	685b      	ldr	r3, [r3, #4]
 8008844:	fbb2 f3f3 	udiv	r3, r2, r3
 8008848:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800884a:	6a3b      	ldr	r3, [r7, #32]
 800884c:	2b0f      	cmp	r3, #15
 800884e:	d916      	bls.n	800887e <UART_SetConfig+0x36e>
 8008850:	6a3b      	ldr	r3, [r7, #32]
 8008852:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008856:	d212      	bcs.n	800887e <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008858:	6a3b      	ldr	r3, [r7, #32]
 800885a:	b29b      	uxth	r3, r3
 800885c:	f023 030f 	bic.w	r3, r3, #15
 8008860:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008862:	6a3b      	ldr	r3, [r7, #32]
 8008864:	085b      	lsrs	r3, r3, #1
 8008866:	b29b      	uxth	r3, r3
 8008868:	f003 0307 	and.w	r3, r3, #7
 800886c:	b29a      	uxth	r2, r3
 800886e:	8bfb      	ldrh	r3, [r7, #30]
 8008870:	4313      	orrs	r3, r2
 8008872:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008874:	697b      	ldr	r3, [r7, #20]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	8bfa      	ldrh	r2, [r7, #30]
 800887a:	60da      	str	r2, [r3, #12]
 800887c:	e056      	b.n	800892c <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800887e:	2301      	movs	r3, #1
 8008880:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008884:	e052      	b.n	800892c <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008886:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800888a:	3b01      	subs	r3, #1
 800888c:	2b07      	cmp	r3, #7
 800888e:	d822      	bhi.n	80088d6 <UART_SetConfig+0x3c6>
 8008890:	a201      	add	r2, pc, #4	@ (adr r2, 8008898 <UART_SetConfig+0x388>)
 8008892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008896:	bf00      	nop
 8008898:	080088b9 	.word	0x080088b9
 800889c:	080088c1 	.word	0x080088c1
 80088a0:	080088d7 	.word	0x080088d7
 80088a4:	080088c7 	.word	0x080088c7
 80088a8:	080088d7 	.word	0x080088d7
 80088ac:	080088d7 	.word	0x080088d7
 80088b0:	080088d7 	.word	0x080088d7
 80088b4:	080088cf 	.word	0x080088cf
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80088b8:	f7fd fa0e 	bl	8005cd8 <HAL_RCC_GetPCLK2Freq>
 80088bc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80088be:	e010      	b.n	80088e2 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80088c0:	4b26      	ldr	r3, [pc, #152]	@ (800895c <UART_SetConfig+0x44c>)
 80088c2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80088c4:	e00d      	b.n	80088e2 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80088c6:	f7fd f971 	bl	8005bac <HAL_RCC_GetSysClockFreq>
 80088ca:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80088cc:	e009      	b.n	80088e2 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80088ce:	f248 0306 	movw	r3, #32774	@ 0x8006
 80088d2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80088d4:	e005      	b.n	80088e2 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 80088d6:	2300      	movs	r3, #0
 80088d8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80088da:	2301      	movs	r3, #1
 80088dc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80088e0:	bf00      	nop
    }

    if (pclk != 0U)
 80088e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d021      	beq.n	800892c <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80088e8:	697b      	ldr	r3, [r7, #20]
 80088ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088ec:	4a1a      	ldr	r2, [pc, #104]	@ (8008958 <UART_SetConfig+0x448>)
 80088ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80088f2:	461a      	mov	r2, r3
 80088f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088f6:	fbb3 f2f2 	udiv	r2, r3, r2
 80088fa:	697b      	ldr	r3, [r7, #20]
 80088fc:	685b      	ldr	r3, [r3, #4]
 80088fe:	085b      	lsrs	r3, r3, #1
 8008900:	441a      	add	r2, r3
 8008902:	697b      	ldr	r3, [r7, #20]
 8008904:	685b      	ldr	r3, [r3, #4]
 8008906:	fbb2 f3f3 	udiv	r3, r2, r3
 800890a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800890c:	6a3b      	ldr	r3, [r7, #32]
 800890e:	2b0f      	cmp	r3, #15
 8008910:	d909      	bls.n	8008926 <UART_SetConfig+0x416>
 8008912:	6a3b      	ldr	r3, [r7, #32]
 8008914:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008918:	d205      	bcs.n	8008926 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800891a:	6a3b      	ldr	r3, [r7, #32]
 800891c:	b29a      	uxth	r2, r3
 800891e:	697b      	ldr	r3, [r7, #20]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	60da      	str	r2, [r3, #12]
 8008924:	e002      	b.n	800892c <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8008926:	2301      	movs	r3, #1
 8008928:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800892c:	697b      	ldr	r3, [r7, #20]
 800892e:	2201      	movs	r2, #1
 8008930:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008934:	697b      	ldr	r3, [r7, #20]
 8008936:	2201      	movs	r2, #1
 8008938:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800893c:	697b      	ldr	r3, [r7, #20]
 800893e:	2200      	movs	r2, #0
 8008940:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008942:	697b      	ldr	r3, [r7, #20]
 8008944:	2200      	movs	r2, #0
 8008946:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008948:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800894c:	4618      	mov	r0, r3
 800894e:	3730      	adds	r7, #48	@ 0x30
 8008950:	46bd      	mov	sp, r7
 8008952:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008956:	bf00      	nop
 8008958:	08010e88 	.word	0x08010e88
 800895c:	00f42400 	.word	0x00f42400

08008960 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008960:	b480      	push	{r7}
 8008962:	b083      	sub	sp, #12
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800896c:	f003 0308 	and.w	r3, r3, #8
 8008970:	2b00      	cmp	r3, #0
 8008972:	d00a      	beq.n	800898a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	685b      	ldr	r3, [r3, #4]
 800897a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	430a      	orrs	r2, r1
 8008988:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800898e:	f003 0301 	and.w	r3, r3, #1
 8008992:	2b00      	cmp	r3, #0
 8008994:	d00a      	beq.n	80089ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	685b      	ldr	r3, [r3, #4]
 800899c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	430a      	orrs	r2, r1
 80089aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089b0:	f003 0302 	and.w	r3, r3, #2
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d00a      	beq.n	80089ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	685b      	ldr	r3, [r3, #4]
 80089be:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	430a      	orrs	r2, r1
 80089cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089d2:	f003 0304 	and.w	r3, r3, #4
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d00a      	beq.n	80089f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	685b      	ldr	r3, [r3, #4]
 80089e0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	430a      	orrs	r2, r1
 80089ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089f4:	f003 0310 	and.w	r3, r3, #16
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d00a      	beq.n	8008a12 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	689b      	ldr	r3, [r3, #8]
 8008a02:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	430a      	orrs	r2, r1
 8008a10:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a16:	f003 0320 	and.w	r3, r3, #32
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d00a      	beq.n	8008a34 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	689b      	ldr	r3, [r3, #8]
 8008a24:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	430a      	orrs	r2, r1
 8008a32:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d01a      	beq.n	8008a76 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	685b      	ldr	r3, [r3, #4]
 8008a46:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	430a      	orrs	r2, r1
 8008a54:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a5a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008a5e:	d10a      	bne.n	8008a76 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	685b      	ldr	r3, [r3, #4]
 8008a66:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	430a      	orrs	r2, r1
 8008a74:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d00a      	beq.n	8008a98 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	685b      	ldr	r3, [r3, #4]
 8008a88:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	430a      	orrs	r2, r1
 8008a96:	605a      	str	r2, [r3, #4]
  }
}
 8008a98:	bf00      	nop
 8008a9a:	370c      	adds	r7, #12
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa2:	4770      	bx	lr

08008aa4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b098      	sub	sp, #96	@ 0x60
 8008aa8:	af02      	add	r7, sp, #8
 8008aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2200      	movs	r2, #0
 8008ab0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008ab4:	f7fa fb62 	bl	800317c <HAL_GetTick>
 8008ab8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	f003 0308 	and.w	r3, r3, #8
 8008ac4:	2b08      	cmp	r3, #8
 8008ac6:	d12f      	bne.n	8008b28 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008ac8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008acc:	9300      	str	r3, [sp, #0]
 8008ace:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008ad6:	6878      	ldr	r0, [r7, #4]
 8008ad8:	f000 f88e 	bl	8008bf8 <UART_WaitOnFlagUntilTimeout>
 8008adc:	4603      	mov	r3, r0
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d022      	beq.n	8008b28 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ae8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008aea:	e853 3f00 	ldrex	r3, [r3]
 8008aee:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008af0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008af2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008af6:	653b      	str	r3, [r7, #80]	@ 0x50
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	461a      	mov	r2, r3
 8008afe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008b00:	647b      	str	r3, [r7, #68]	@ 0x44
 8008b02:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b04:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008b06:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008b08:	e841 2300 	strex	r3, r2, [r1]
 8008b0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008b0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d1e6      	bne.n	8008ae2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	2220      	movs	r2, #32
 8008b18:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2200      	movs	r2, #0
 8008b20:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008b24:	2303      	movs	r3, #3
 8008b26:	e063      	b.n	8008bf0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	f003 0304 	and.w	r3, r3, #4
 8008b32:	2b04      	cmp	r3, #4
 8008b34:	d149      	bne.n	8008bca <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008b36:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008b3a:	9300      	str	r3, [sp, #0]
 8008b3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008b3e:	2200      	movs	r2, #0
 8008b40:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008b44:	6878      	ldr	r0, [r7, #4]
 8008b46:	f000 f857 	bl	8008bf8 <UART_WaitOnFlagUntilTimeout>
 8008b4a:	4603      	mov	r3, r0
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d03c      	beq.n	8008bca <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b58:	e853 3f00 	ldrex	r3, [r3]
 8008b5c:	623b      	str	r3, [r7, #32]
   return(result);
 8008b5e:	6a3b      	ldr	r3, [r7, #32]
 8008b60:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008b64:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	461a      	mov	r2, r3
 8008b6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b6e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008b70:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b72:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008b74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008b76:	e841 2300 	strex	r3, r2, [r1]
 8008b7a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008b7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d1e6      	bne.n	8008b50 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	3308      	adds	r3, #8
 8008b88:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b8a:	693b      	ldr	r3, [r7, #16]
 8008b8c:	e853 3f00 	ldrex	r3, [r3]
 8008b90:	60fb      	str	r3, [r7, #12]
   return(result);
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	f023 0301 	bic.w	r3, r3, #1
 8008b98:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	3308      	adds	r3, #8
 8008ba0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008ba2:	61fa      	str	r2, [r7, #28]
 8008ba4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ba6:	69b9      	ldr	r1, [r7, #24]
 8008ba8:	69fa      	ldr	r2, [r7, #28]
 8008baa:	e841 2300 	strex	r3, r2, [r1]
 8008bae:	617b      	str	r3, [r7, #20]
   return(result);
 8008bb0:	697b      	ldr	r3, [r7, #20]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d1e5      	bne.n	8008b82 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	2220      	movs	r2, #32
 8008bba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008bc6:	2303      	movs	r3, #3
 8008bc8:	e012      	b.n	8008bf0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	2220      	movs	r2, #32
 8008bce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	2220      	movs	r2, #32
 8008bd6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	2200      	movs	r2, #0
 8008bde:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2200      	movs	r2, #0
 8008be4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	2200      	movs	r2, #0
 8008bea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008bee:	2300      	movs	r3, #0
}
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	3758      	adds	r7, #88	@ 0x58
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	bd80      	pop	{r7, pc}

08008bf8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b084      	sub	sp, #16
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	60f8      	str	r0, [r7, #12]
 8008c00:	60b9      	str	r1, [r7, #8]
 8008c02:	603b      	str	r3, [r7, #0]
 8008c04:	4613      	mov	r3, r2
 8008c06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c08:	e04f      	b.n	8008caa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008c0a:	69bb      	ldr	r3, [r7, #24]
 8008c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c10:	d04b      	beq.n	8008caa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008c12:	f7fa fab3 	bl	800317c <HAL_GetTick>
 8008c16:	4602      	mov	r2, r0
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	1ad3      	subs	r3, r2, r3
 8008c1c:	69ba      	ldr	r2, [r7, #24]
 8008c1e:	429a      	cmp	r2, r3
 8008c20:	d302      	bcc.n	8008c28 <UART_WaitOnFlagUntilTimeout+0x30>
 8008c22:	69bb      	ldr	r3, [r7, #24]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d101      	bne.n	8008c2c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008c28:	2303      	movs	r3, #3
 8008c2a:	e04e      	b.n	8008cca <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	f003 0304 	and.w	r3, r3, #4
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d037      	beq.n	8008caa <UART_WaitOnFlagUntilTimeout+0xb2>
 8008c3a:	68bb      	ldr	r3, [r7, #8]
 8008c3c:	2b80      	cmp	r3, #128	@ 0x80
 8008c3e:	d034      	beq.n	8008caa <UART_WaitOnFlagUntilTimeout+0xb2>
 8008c40:	68bb      	ldr	r3, [r7, #8]
 8008c42:	2b40      	cmp	r3, #64	@ 0x40
 8008c44:	d031      	beq.n	8008caa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	69db      	ldr	r3, [r3, #28]
 8008c4c:	f003 0308 	and.w	r3, r3, #8
 8008c50:	2b08      	cmp	r3, #8
 8008c52:	d110      	bne.n	8008c76 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	2208      	movs	r2, #8
 8008c5a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008c5c:	68f8      	ldr	r0, [r7, #12]
 8008c5e:	f000 f879 	bl	8008d54 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	2208      	movs	r2, #8
 8008c66:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008c72:	2301      	movs	r3, #1
 8008c74:	e029      	b.n	8008cca <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	69db      	ldr	r3, [r3, #28]
 8008c7c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008c80:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008c84:	d111      	bne.n	8008caa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008c8e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008c90:	68f8      	ldr	r0, [r7, #12]
 8008c92:	f000 f85f 	bl	8008d54 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	2220      	movs	r2, #32
 8008c9a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	2200      	movs	r2, #0
 8008ca2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008ca6:	2303      	movs	r3, #3
 8008ca8:	e00f      	b.n	8008cca <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	69da      	ldr	r2, [r3, #28]
 8008cb0:	68bb      	ldr	r3, [r7, #8]
 8008cb2:	4013      	ands	r3, r2
 8008cb4:	68ba      	ldr	r2, [r7, #8]
 8008cb6:	429a      	cmp	r2, r3
 8008cb8:	bf0c      	ite	eq
 8008cba:	2301      	moveq	r3, #1
 8008cbc:	2300      	movne	r3, #0
 8008cbe:	b2db      	uxtb	r3, r3
 8008cc0:	461a      	mov	r2, r3
 8008cc2:	79fb      	ldrb	r3, [r7, #7]
 8008cc4:	429a      	cmp	r2, r3
 8008cc6:	d0a0      	beq.n	8008c0a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008cc8:	2300      	movs	r3, #0
}
 8008cca:	4618      	mov	r0, r3
 8008ccc:	3710      	adds	r7, #16
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	bd80      	pop	{r7, pc}

08008cd2 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008cd2:	b480      	push	{r7}
 8008cd4:	b08f      	sub	sp, #60	@ 0x3c
 8008cd6:	af00      	add	r7, sp, #0
 8008cd8:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ce0:	6a3b      	ldr	r3, [r7, #32]
 8008ce2:	e853 3f00 	ldrex	r3, [r3]
 8008ce6:	61fb      	str	r3, [r7, #28]
   return(result);
 8008ce8:	69fb      	ldr	r3, [r7, #28]
 8008cea:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8008cee:	637b      	str	r3, [r7, #52]	@ 0x34
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	461a      	mov	r2, r3
 8008cf6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008cf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008cfa:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cfc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008cfe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008d00:	e841 2300 	strex	r3, r2, [r1]
 8008d04:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d1e6      	bne.n	8008cda <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	3308      	adds	r3, #8
 8008d12:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	e853 3f00 	ldrex	r3, [r3]
 8008d1a:	60bb      	str	r3, [r7, #8]
   return(result);
 8008d1c:	68bb      	ldr	r3, [r7, #8]
 8008d1e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8008d22:	633b      	str	r3, [r7, #48]	@ 0x30
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	3308      	adds	r3, #8
 8008d2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008d2c:	61ba      	str	r2, [r7, #24]
 8008d2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d30:	6979      	ldr	r1, [r7, #20]
 8008d32:	69ba      	ldr	r2, [r7, #24]
 8008d34:	e841 2300 	strex	r3, r2, [r1]
 8008d38:	613b      	str	r3, [r7, #16]
   return(result);
 8008d3a:	693b      	ldr	r3, [r7, #16]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d1e5      	bne.n	8008d0c <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2220      	movs	r2, #32
 8008d44:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8008d48:	bf00      	nop
 8008d4a:	373c      	adds	r7, #60	@ 0x3c
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d52:	4770      	bx	lr

08008d54 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008d54:	b480      	push	{r7}
 8008d56:	b095      	sub	sp, #84	@ 0x54
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d64:	e853 3f00 	ldrex	r3, [r3]
 8008d68:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008d6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d6c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008d70:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	461a      	mov	r2, r3
 8008d78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008d7a:	643b      	str	r3, [r7, #64]	@ 0x40
 8008d7c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d7e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008d80:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008d82:	e841 2300 	strex	r3, r2, [r1]
 8008d86:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008d88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d1e6      	bne.n	8008d5c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	3308      	adds	r3, #8
 8008d94:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d96:	6a3b      	ldr	r3, [r7, #32]
 8008d98:	e853 3f00 	ldrex	r3, [r3]
 8008d9c:	61fb      	str	r3, [r7, #28]
   return(result);
 8008d9e:	69fb      	ldr	r3, [r7, #28]
 8008da0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008da4:	f023 0301 	bic.w	r3, r3, #1
 8008da8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	3308      	adds	r3, #8
 8008db0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008db2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008db4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008db6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008db8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008dba:	e841 2300 	strex	r3, r2, [r1]
 8008dbe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d1e3      	bne.n	8008d8e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008dca:	2b01      	cmp	r3, #1
 8008dcc:	d118      	bne.n	8008e00 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	e853 3f00 	ldrex	r3, [r3]
 8008dda:	60bb      	str	r3, [r7, #8]
   return(result);
 8008ddc:	68bb      	ldr	r3, [r7, #8]
 8008dde:	f023 0310 	bic.w	r3, r3, #16
 8008de2:	647b      	str	r3, [r7, #68]	@ 0x44
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	461a      	mov	r2, r3
 8008dea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008dec:	61bb      	str	r3, [r7, #24]
 8008dee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008df0:	6979      	ldr	r1, [r7, #20]
 8008df2:	69ba      	ldr	r2, [r7, #24]
 8008df4:	e841 2300 	strex	r3, r2, [r1]
 8008df8:	613b      	str	r3, [r7, #16]
   return(result);
 8008dfa:	693b      	ldr	r3, [r7, #16]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d1e6      	bne.n	8008dce <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2220      	movs	r2, #32
 8008e04:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	2200      	movs	r2, #0
 8008e12:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008e14:	bf00      	nop
 8008e16:	3754      	adds	r7, #84	@ 0x54
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1e:	4770      	bx	lr

08008e20 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b090      	sub	sp, #64	@ 0x40
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e2c:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	f003 0320 	and.w	r3, r3, #32
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d137      	bne.n	8008eac <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8008e3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e3e:	2200      	movs	r2, #0
 8008e40:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008e44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	3308      	adds	r3, #8
 8008e4a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e4e:	e853 3f00 	ldrex	r3, [r3]
 8008e52:	623b      	str	r3, [r7, #32]
   return(result);
 8008e54:	6a3b      	ldr	r3, [r7, #32]
 8008e56:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008e5a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008e5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	3308      	adds	r3, #8
 8008e62:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008e64:	633a      	str	r2, [r7, #48]	@ 0x30
 8008e66:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e68:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008e6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008e6c:	e841 2300 	strex	r3, r2, [r1]
 8008e70:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008e72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d1e5      	bne.n	8008e44 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008e78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e7e:	693b      	ldr	r3, [r7, #16]
 8008e80:	e853 3f00 	ldrex	r3, [r3]
 8008e84:	60fb      	str	r3, [r7, #12]
   return(result);
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008e8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	461a      	mov	r2, r3
 8008e94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e96:	61fb      	str	r3, [r7, #28]
 8008e98:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e9a:	69b9      	ldr	r1, [r7, #24]
 8008e9c:	69fa      	ldr	r2, [r7, #28]
 8008e9e:	e841 2300 	strex	r3, r2, [r1]
 8008ea2:	617b      	str	r3, [r7, #20]
   return(result);
 8008ea4:	697b      	ldr	r3, [r7, #20]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d1e6      	bne.n	8008e78 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008eaa:	e002      	b.n	8008eb2 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8008eac:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8008eae:	f7f9 f9bf 	bl	8002230 <HAL_UART_TxCpltCallback>
}
 8008eb2:	bf00      	nop
 8008eb4:	3740      	adds	r7, #64	@ 0x40
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	bd80      	pop	{r7, pc}

08008eba <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008eba:	b580      	push	{r7, lr}
 8008ebc:	b084      	sub	sp, #16
 8008ebe:	af00      	add	r7, sp, #0
 8008ec0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ec6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008ec8:	68f8      	ldr	r0, [r7, #12]
 8008eca:	f7ff fb01 	bl	80084d0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008ece:	bf00      	nop
 8008ed0:	3710      	adds	r7, #16
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	bd80      	pop	{r7, pc}

08008ed6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008ed6:	b580      	push	{r7, lr}
 8008ed8:	b086      	sub	sp, #24
 8008eda:	af00      	add	r7, sp, #0
 8008edc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ee2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008ee4:	697b      	ldr	r3, [r7, #20]
 8008ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008eea:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008eec:	697b      	ldr	r3, [r7, #20]
 8008eee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008ef2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008ef4:	697b      	ldr	r3, [r7, #20]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	689b      	ldr	r3, [r3, #8]
 8008efa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008efe:	2b80      	cmp	r3, #128	@ 0x80
 8008f00:	d109      	bne.n	8008f16 <UART_DMAError+0x40>
 8008f02:	693b      	ldr	r3, [r7, #16]
 8008f04:	2b21      	cmp	r3, #33	@ 0x21
 8008f06:	d106      	bne.n	8008f16 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008f08:	697b      	ldr	r3, [r7, #20]
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8008f10:	6978      	ldr	r0, [r7, #20]
 8008f12:	f7ff fede 	bl	8008cd2 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008f16:	697b      	ldr	r3, [r7, #20]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	689b      	ldr	r3, [r3, #8]
 8008f1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f20:	2b40      	cmp	r3, #64	@ 0x40
 8008f22:	d109      	bne.n	8008f38 <UART_DMAError+0x62>
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	2b22      	cmp	r3, #34	@ 0x22
 8008f28:	d106      	bne.n	8008f38 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008f2a:	697b      	ldr	r3, [r7, #20]
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8008f32:	6978      	ldr	r0, [r7, #20]
 8008f34:	f7ff ff0e 	bl	8008d54 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008f38:	697b      	ldr	r3, [r7, #20]
 8008f3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f3e:	f043 0210 	orr.w	r2, r3, #16
 8008f42:	697b      	ldr	r3, [r7, #20]
 8008f44:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008f48:	6978      	ldr	r0, [r7, #20]
 8008f4a:	f7ff facb 	bl	80084e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008f4e:	bf00      	nop
 8008f50:	3718      	adds	r7, #24
 8008f52:	46bd      	mov	sp, r7
 8008f54:	bd80      	pop	{r7, pc}

08008f56 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008f56:	b580      	push	{r7, lr}
 8008f58:	b084      	sub	sp, #16
 8008f5a:	af00      	add	r7, sp, #0
 8008f5c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f62:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	2200      	movs	r2, #0
 8008f68:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	2200      	movs	r2, #0
 8008f70:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008f74:	68f8      	ldr	r0, [r7, #12]
 8008f76:	f7ff fab5 	bl	80084e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008f7a:	bf00      	nop
 8008f7c:	3710      	adds	r7, #16
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	bd80      	pop	{r7, pc}

08008f82 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008f82:	b580      	push	{r7, lr}
 8008f84:	b088      	sub	sp, #32
 8008f86:	af00      	add	r7, sp, #0
 8008f88:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	e853 3f00 	ldrex	r3, [r3]
 8008f96:	60bb      	str	r3, [r7, #8]
   return(result);
 8008f98:	68bb      	ldr	r3, [r7, #8]
 8008f9a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008f9e:	61fb      	str	r3, [r7, #28]
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	461a      	mov	r2, r3
 8008fa6:	69fb      	ldr	r3, [r7, #28]
 8008fa8:	61bb      	str	r3, [r7, #24]
 8008faa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fac:	6979      	ldr	r1, [r7, #20]
 8008fae:	69ba      	ldr	r2, [r7, #24]
 8008fb0:	e841 2300 	strex	r3, r2, [r1]
 8008fb4:	613b      	str	r3, [r7, #16]
   return(result);
 8008fb6:	693b      	ldr	r3, [r7, #16]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d1e6      	bne.n	8008f8a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2220      	movs	r2, #32
 8008fc0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008fca:	6878      	ldr	r0, [r7, #4]
 8008fcc:	f7f9 f930 	bl	8002230 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008fd0:	bf00      	nop
 8008fd2:	3720      	adds	r7, #32
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	bd80      	pop	{r7, pc}

08008fd8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008fd8:	b480      	push	{r7}
 8008fda:	b083      	sub	sp, #12
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008fe0:	bf00      	nop
 8008fe2:	370c      	adds	r7, #12
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fea:	4770      	bx	lr

08008fec <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008fec:	b480      	push	{r7}
 8008fee:	b083      	sub	sp, #12
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008ff4:	bf00      	nop
 8008ff6:	370c      	adds	r7, #12
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffe:	4770      	bx	lr

08009000 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009000:	b480      	push	{r7}
 8009002:	b083      	sub	sp, #12
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009008:	bf00      	nop
 800900a:	370c      	adds	r7, #12
 800900c:	46bd      	mov	sp, r7
 800900e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009012:	4770      	bx	lr

08009014 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009014:	b480      	push	{r7}
 8009016:	b085      	sub	sp, #20
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009022:	2b01      	cmp	r3, #1
 8009024:	d101      	bne.n	800902a <HAL_UARTEx_DisableFifoMode+0x16>
 8009026:	2302      	movs	r3, #2
 8009028:	e027      	b.n	800907a <HAL_UARTEx_DisableFifoMode+0x66>
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	2201      	movs	r2, #1
 800902e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	2224      	movs	r2, #36	@ 0x24
 8009036:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	681a      	ldr	r2, [r3, #0]
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	f022 0201 	bic.w	r2, r2, #1
 8009050:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009058:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	2200      	movs	r2, #0
 800905e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	68fa      	ldr	r2, [r7, #12]
 8009066:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2220      	movs	r2, #32
 800906c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	2200      	movs	r2, #0
 8009074:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009078:	2300      	movs	r3, #0
}
 800907a:	4618      	mov	r0, r3
 800907c:	3714      	adds	r7, #20
 800907e:	46bd      	mov	sp, r7
 8009080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009084:	4770      	bx	lr

08009086 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009086:	b580      	push	{r7, lr}
 8009088:	b084      	sub	sp, #16
 800908a:	af00      	add	r7, sp, #0
 800908c:	6078      	str	r0, [r7, #4]
 800908e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009096:	2b01      	cmp	r3, #1
 8009098:	d101      	bne.n	800909e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800909a:	2302      	movs	r3, #2
 800909c:	e02d      	b.n	80090fa <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	2201      	movs	r2, #1
 80090a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	2224      	movs	r2, #36	@ 0x24
 80090aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	681a      	ldr	r2, [r3, #0]
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	f022 0201 	bic.w	r2, r2, #1
 80090c4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	689b      	ldr	r3, [r3, #8]
 80090cc:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	683a      	ldr	r2, [r7, #0]
 80090d6:	430a      	orrs	r2, r1
 80090d8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80090da:	6878      	ldr	r0, [r7, #4]
 80090dc:	f000 f850 	bl	8009180 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	68fa      	ldr	r2, [r7, #12]
 80090e6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	2220      	movs	r2, #32
 80090ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	2200      	movs	r2, #0
 80090f4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80090f8:	2300      	movs	r3, #0
}
 80090fa:	4618      	mov	r0, r3
 80090fc:	3710      	adds	r7, #16
 80090fe:	46bd      	mov	sp, r7
 8009100:	bd80      	pop	{r7, pc}

08009102 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009102:	b580      	push	{r7, lr}
 8009104:	b084      	sub	sp, #16
 8009106:	af00      	add	r7, sp, #0
 8009108:	6078      	str	r0, [r7, #4]
 800910a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009112:	2b01      	cmp	r3, #1
 8009114:	d101      	bne.n	800911a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009116:	2302      	movs	r3, #2
 8009118:	e02d      	b.n	8009176 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	2201      	movs	r2, #1
 800911e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	2224      	movs	r2, #36	@ 0x24
 8009126:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	681a      	ldr	r2, [r3, #0]
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	f022 0201 	bic.w	r2, r2, #1
 8009140:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	689b      	ldr	r3, [r3, #8]
 8009148:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	683a      	ldr	r2, [r7, #0]
 8009152:	430a      	orrs	r2, r1
 8009154:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009156:	6878      	ldr	r0, [r7, #4]
 8009158:	f000 f812 	bl	8009180 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	68fa      	ldr	r2, [r7, #12]
 8009162:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2220      	movs	r2, #32
 8009168:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2200      	movs	r2, #0
 8009170:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009174:	2300      	movs	r3, #0
}
 8009176:	4618      	mov	r0, r3
 8009178:	3710      	adds	r7, #16
 800917a:	46bd      	mov	sp, r7
 800917c:	bd80      	pop	{r7, pc}
	...

08009180 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009180:	b480      	push	{r7}
 8009182:	b085      	sub	sp, #20
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800918c:	2b00      	cmp	r3, #0
 800918e:	d108      	bne.n	80091a2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2201      	movs	r2, #1
 8009194:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	2201      	movs	r2, #1
 800919c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80091a0:	e031      	b.n	8009206 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80091a2:	2308      	movs	r3, #8
 80091a4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80091a6:	2308      	movs	r3, #8
 80091a8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	689b      	ldr	r3, [r3, #8]
 80091b0:	0e5b      	lsrs	r3, r3, #25
 80091b2:	b2db      	uxtb	r3, r3
 80091b4:	f003 0307 	and.w	r3, r3, #7
 80091b8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	689b      	ldr	r3, [r3, #8]
 80091c0:	0f5b      	lsrs	r3, r3, #29
 80091c2:	b2db      	uxtb	r3, r3
 80091c4:	f003 0307 	and.w	r3, r3, #7
 80091c8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80091ca:	7bbb      	ldrb	r3, [r7, #14]
 80091cc:	7b3a      	ldrb	r2, [r7, #12]
 80091ce:	4911      	ldr	r1, [pc, #68]	@ (8009214 <UARTEx_SetNbDataToProcess+0x94>)
 80091d0:	5c8a      	ldrb	r2, [r1, r2]
 80091d2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80091d6:	7b3a      	ldrb	r2, [r7, #12]
 80091d8:	490f      	ldr	r1, [pc, #60]	@ (8009218 <UARTEx_SetNbDataToProcess+0x98>)
 80091da:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80091dc:	fb93 f3f2 	sdiv	r3, r3, r2
 80091e0:	b29a      	uxth	r2, r3
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80091e8:	7bfb      	ldrb	r3, [r7, #15]
 80091ea:	7b7a      	ldrb	r2, [r7, #13]
 80091ec:	4909      	ldr	r1, [pc, #36]	@ (8009214 <UARTEx_SetNbDataToProcess+0x94>)
 80091ee:	5c8a      	ldrb	r2, [r1, r2]
 80091f0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80091f4:	7b7a      	ldrb	r2, [r7, #13]
 80091f6:	4908      	ldr	r1, [pc, #32]	@ (8009218 <UARTEx_SetNbDataToProcess+0x98>)
 80091f8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80091fa:	fb93 f3f2 	sdiv	r3, r3, r2
 80091fe:	b29a      	uxth	r2, r3
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009206:	bf00      	nop
 8009208:	3714      	adds	r7, #20
 800920a:	46bd      	mov	sp, r7
 800920c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009210:	4770      	bx	lr
 8009212:	bf00      	nop
 8009214:	08010ea0 	.word	0x08010ea0
 8009218:	08010ea8 	.word	0x08010ea8

0800921c <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b088      	sub	sp, #32
 8009220:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8009222:	2300      	movs	r3, #0
 8009224:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009226:	f107 0308 	add.w	r3, r7, #8
 800922a:	2218      	movs	r2, #24
 800922c:	2100      	movs	r1, #0
 800922e:	4618      	mov	r0, r3
 8009230:	f001 fa9e 	bl	800a770 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009234:	233f      	movs	r3, #63	@ 0x3f
 8009236:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 8009238:	2381      	movs	r3, #129	@ 0x81
 800923a:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800923c:	1dfb      	adds	r3, r7, #7
 800923e:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8009240:	2301      	movs	r3, #1
 8009242:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009244:	f107 0308 	add.w	r3, r7, #8
 8009248:	2100      	movs	r1, #0
 800924a:	4618      	mov	r0, r3
 800924c:	f001 fe24 	bl	800ae98 <hci_send_req>
 8009250:	4603      	mov	r3, r0
 8009252:	2b00      	cmp	r3, #0
 8009254:	da01      	bge.n	800925a <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 8009256:	23ff      	movs	r3, #255	@ 0xff
 8009258:	e000      	b.n	800925c <aci_gap_set_non_discoverable+0x40>
  return status;
 800925a:	79fb      	ldrb	r3, [r7, #7]
}
 800925c:	4618      	mov	r0, r3
 800925e:	3720      	adds	r7, #32
 8009260:	46bd      	mov	sp, r7
 8009262:	bd80      	pop	{r7, pc}

08009264 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 8009264:	b5b0      	push	{r4, r5, r7, lr}
 8009266:	b0ce      	sub	sp, #312	@ 0x138
 8009268:	af00      	add	r7, sp, #0
 800926a:	4605      	mov	r5, r0
 800926c:	460c      	mov	r4, r1
 800926e:	4610      	mov	r0, r2
 8009270:	4619      	mov	r1, r3
 8009272:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009276:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800927a:	462a      	mov	r2, r5
 800927c:	701a      	strb	r2, [r3, #0]
 800927e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009282:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8009286:	4622      	mov	r2, r4
 8009288:	801a      	strh	r2, [r3, #0]
 800928a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800928e:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 8009292:	4602      	mov	r2, r0
 8009294:	801a      	strh	r2, [r3, #0]
 8009296:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800929a:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800929e:	460a      	mov	r2, r1
 80092a0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 80092a2:	f107 0310 	add.w	r3, r7, #16
 80092a6:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 80092aa:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 80092ae:	3308      	adds	r3, #8
 80092b0:	f107 0210 	add.w	r2, r7, #16
 80092b4:	4413      	add	r3, r2
 80092b6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 80092ba:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 80092be:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 80092c2:	4413      	add	r3, r2
 80092c4:	3309      	adds	r3, #9
 80092c6:	f107 0210 	add.w	r2, r7, #16
 80092ca:	4413      	add	r3, r2
 80092cc:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80092d0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80092d4:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80092d8:	2200      	movs	r2, #0
 80092da:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80092dc:	2300      	movs	r3, #0
 80092de:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Type = Advertising_Type;
 80092e2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80092e6:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80092ea:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 80092ee:	7812      	ldrb	r2, [r2, #0]
 80092f0:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80092f2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80092f6:	3301      	adds	r3, #1
 80092f8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 80092fc:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8009300:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8009304:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 8009308:	8812      	ldrh	r2, [r2, #0]
 800930a:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 800930e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009312:	3302      	adds	r3, #2
 8009314:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8009318:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800931c:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8009320:	f5a2 729b 	sub.w	r2, r2, #310	@ 0x136
 8009324:	8812      	ldrh	r2, [r2, #0]
 8009326:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 800932a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800932e:	3302      	adds	r3, #2
 8009330:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 8009334:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8009338:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800933c:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8009340:	7812      	ldrb	r2, [r2, #0]
 8009342:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8009344:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009348:	3301      	adds	r3, #1
 800934a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 800934e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8009352:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 8009356:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8009358:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800935c:	3301      	adds	r3, #1
 800935e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 8009362:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8009366:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 800936a:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 800936c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009370:	3301      	adds	r3, #1
 8009372:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 8009376:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800937a:	3308      	adds	r3, #8
 800937c:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8009380:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 8009384:	4618      	mov	r0, r3
 8009386:	f001 f9e3 	bl	800a750 <Osal_MemCpy>
    index_input += Local_Name_Length;
 800938a:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 800938e:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8009392:	4413      	add	r3, r2
 8009394:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 8009398:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800939c:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 80093a0:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 80093a2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80093a6:	3301      	adds	r3, #1
 80093a8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 80093ac:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80093b0:	3301      	adds	r3, #1
 80093b2:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 80093b6:	f8d7 1158 	ldr.w	r1, [r7, #344]	@ 0x158
 80093ba:	4618      	mov	r0, r3
 80093bc:	f001 f9c8 	bl	800a750 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 80093c0:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 80093c4:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 80093c8:	4413      	add	r3, r2
 80093ca:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 80093ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80093d2:	f8b7 215c 	ldrh.w	r2, [r7, #348]	@ 0x15c
 80093d6:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 80093d8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80093dc:	3302      	adds	r3, #2
 80093de:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 80093e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80093e6:	f8b7 2160 	ldrh.w	r2, [r7, #352]	@ 0x160
 80093ea:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 80093ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80093f0:	3302      	adds	r3, #2
 80093f2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80093f6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80093fa:	2218      	movs	r2, #24
 80093fc:	2100      	movs	r1, #0
 80093fe:	4618      	mov	r0, r3
 8009400:	f001 f9b6 	bl	800a770 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009404:	233f      	movs	r3, #63	@ 0x3f
 8009406:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x083;
 800940a:	2383      	movs	r3, #131	@ 0x83
 800940c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8009410:	f107 0310 	add.w	r3, r7, #16
 8009414:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8009418:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800941c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8009420:	f107 030f 	add.w	r3, r7, #15
 8009424:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8009428:	2301      	movs	r3, #1
 800942a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800942e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009432:	2100      	movs	r1, #0
 8009434:	4618      	mov	r0, r3
 8009436:	f001 fd2f 	bl	800ae98 <hci_send_req>
 800943a:	4603      	mov	r3, r0
 800943c:	2b00      	cmp	r3, #0
 800943e:	da01      	bge.n	8009444 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 8009440:	23ff      	movs	r3, #255	@ 0xff
 8009442:	e004      	b.n	800944e <aci_gap_set_discoverable+0x1ea>
  return status;
 8009444:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009448:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800944c:	781b      	ldrb	r3, [r3, #0]
}
 800944e:	4618      	mov	r0, r3
 8009450:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 8009454:	46bd      	mov	sp, r7
 8009456:	bdb0      	pop	{r4, r5, r7, pc}

08009458 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 8009458:	b580      	push	{r7, lr}
 800945a:	b0cc      	sub	sp, #304	@ 0x130
 800945c:	af00      	add	r7, sp, #0
 800945e:	4602      	mov	r2, r0
 8009460:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009464:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8009468:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 800946a:	f107 0310 	add.w	r3, r7, #16
 800946e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8009472:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009476:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800947a:	2200      	movs	r2, #0
 800947c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800947e:	2300      	movs	r3, #0
 8009480:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->IO_Capability = IO_Capability;
 8009484:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009488:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800948c:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8009490:	7812      	ldrb	r2, [r2, #0]
 8009492:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009494:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009498:	3301      	adds	r3, #1
 800949a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800949e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80094a2:	2218      	movs	r2, #24
 80094a4:	2100      	movs	r1, #0
 80094a6:	4618      	mov	r0, r3
 80094a8:	f001 f962 	bl	800a770 <Osal_MemSet>
  rq.ogf = 0x3f;
 80094ac:	233f      	movs	r3, #63	@ 0x3f
 80094ae:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x085;
 80094b2:	2385      	movs	r3, #133	@ 0x85
 80094b4:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80094b8:	f107 0310 	add.w	r3, r7, #16
 80094bc:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80094c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80094c4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80094c8:	f107 030f 	add.w	r3, r7, #15
 80094cc:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80094d0:	2301      	movs	r3, #1
 80094d2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80094d6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80094da:	2100      	movs	r1, #0
 80094dc:	4618      	mov	r0, r3
 80094de:	f001 fcdb 	bl	800ae98 <hci_send_req>
 80094e2:	4603      	mov	r3, r0
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	da01      	bge.n	80094ec <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 80094e8:	23ff      	movs	r3, #255	@ 0xff
 80094ea:	e004      	b.n	80094f6 <aci_gap_set_io_capability+0x9e>
  return status;
 80094ec:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80094f0:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80094f4:	781b      	ldrb	r3, [r3, #0]
}
 80094f6:	4618      	mov	r0, r3
 80094f8:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80094fc:	46bd      	mov	sp, r7
 80094fe:	bd80      	pop	{r7, pc}

08009500 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 8009500:	b5b0      	push	{r4, r5, r7, lr}
 8009502:	b0cc      	sub	sp, #304	@ 0x130
 8009504:	af00      	add	r7, sp, #0
 8009506:	4605      	mov	r5, r0
 8009508:	460c      	mov	r4, r1
 800950a:	4610      	mov	r0, r2
 800950c:	4619      	mov	r1, r3
 800950e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009512:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8009516:	462a      	mov	r2, r5
 8009518:	701a      	strb	r2, [r3, #0]
 800951a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800951e:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8009522:	4622      	mov	r2, r4
 8009524:	701a      	strb	r2, [r3, #0]
 8009526:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800952a:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800952e:	4602      	mov	r2, r0
 8009530:	701a      	strb	r2, [r3, #0]
 8009532:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009536:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800953a:	460a      	mov	r2, r1
 800953c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 800953e:	f107 0310 	add.w	r3, r7, #16
 8009542:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8009546:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800954a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800954e:	2200      	movs	r2, #0
 8009550:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009552:	2300      	movs	r3, #0
 8009554:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 8009558:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800955c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009560:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8009564:	7812      	ldrb	r2, [r2, #0]
 8009566:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009568:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800956c:	3301      	adds	r3, #1
 800956e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->MITM_Mode = MITM_Mode;
 8009572:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009576:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800957a:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800957e:	7812      	ldrb	r2, [r2, #0]
 8009580:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8009582:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009586:	3301      	adds	r3, #1
 8009588:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->SC_Support = SC_Support;
 800958c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009590:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009594:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8009598:	7812      	ldrb	r2, [r2, #0]
 800959a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800959c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80095a0:	3301      	adds	r3, #1
 80095a2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 80095a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80095aa:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80095ae:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 80095b2:	7812      	ldrb	r2, [r2, #0]
 80095b4:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 80095b6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80095ba:	3301      	adds	r3, #1
 80095bc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 80095c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80095c4:	f897 2140 	ldrb.w	r2, [r7, #320]	@ 0x140
 80095c8:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80095ca:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80095ce:	3301      	adds	r3, #1
 80095d0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 80095d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80095d8:	f897 2144 	ldrb.w	r2, [r7, #324]	@ 0x144
 80095dc:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80095de:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80095e2:	3301      	adds	r3, #1
 80095e4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 80095e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80095ec:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 80095f0:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 80095f2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80095f6:	3301      	adds	r3, #1
 80095f8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 80095fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009600:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8009604:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8009608:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800960c:	3304      	adds	r3, #4
 800960e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 8009612:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009616:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 800961a:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 800961c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009620:	3301      	adds	r3, #1
 8009622:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009626:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800962a:	2218      	movs	r2, #24
 800962c:	2100      	movs	r1, #0
 800962e:	4618      	mov	r0, r3
 8009630:	f001 f89e 	bl	800a770 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009634:	233f      	movs	r3, #63	@ 0x3f
 8009636:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x086;
 800963a:	2386      	movs	r3, #134	@ 0x86
 800963c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8009640:	f107 0310 	add.w	r3, r7, #16
 8009644:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8009648:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800964c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8009650:	f107 030f 	add.w	r3, r7, #15
 8009654:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8009658:	2301      	movs	r3, #1
 800965a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800965e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009662:	2100      	movs	r1, #0
 8009664:	4618      	mov	r0, r3
 8009666:	f001 fc17 	bl	800ae98 <hci_send_req>
 800966a:	4603      	mov	r3, r0
 800966c:	2b00      	cmp	r3, #0
 800966e:	da01      	bge.n	8009674 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 8009670:	23ff      	movs	r3, #255	@ 0xff
 8009672:	e004      	b.n	800967e <aci_gap_set_authentication_requirement+0x17e>
  return status;
 8009674:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009678:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800967c:	781b      	ldrb	r3, [r3, #0]
}
 800967e:	4618      	mov	r0, r3
 8009680:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8009684:	46bd      	mov	sp, r7
 8009686:	bdb0      	pop	{r4, r5, r7, pc}

08009688 <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b0cc      	sub	sp, #304	@ 0x130
 800968c:	af00      	add	r7, sp, #0
 800968e:	4602      	mov	r2, r0
 8009690:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009694:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8009698:	6019      	str	r1, [r3, #0]
 800969a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800969e:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80096a2:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 80096a4:	f107 0310 	add.w	r3, r7, #16
 80096a8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80096ac:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80096b0:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80096b4:	2200      	movs	r2, #0
 80096b6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80096b8:	2300      	movs	r3, #0
 80096ba:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 80096be:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80096c2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80096c6:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80096ca:	8812      	ldrh	r2, [r2, #0]
 80096cc:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80096ce:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80096d2:	3302      	adds	r3, #2
 80096d4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Pass_Key = Pass_Key;
 80096d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80096dc:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80096e0:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 80096e4:	6812      	ldr	r2, [r2, #0]
 80096e6:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 80096ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80096ee:	3304      	adds	r3, #4
 80096f0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80096f4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80096f8:	2218      	movs	r2, #24
 80096fa:	2100      	movs	r1, #0
 80096fc:	4618      	mov	r0, r3
 80096fe:	f001 f837 	bl	800a770 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009702:	233f      	movs	r3, #63	@ 0x3f
 8009704:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x088;
 8009708:	2388      	movs	r3, #136	@ 0x88
 800970a:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800970e:	f107 0310 	add.w	r3, r7, #16
 8009712:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8009716:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800971a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800971e:	f107 030f 	add.w	r3, r7, #15
 8009722:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8009726:	2301      	movs	r3, #1
 8009728:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800972c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009730:	2100      	movs	r1, #0
 8009732:	4618      	mov	r0, r3
 8009734:	f001 fbb0 	bl	800ae98 <hci_send_req>
 8009738:	4603      	mov	r3, r0
 800973a:	2b00      	cmp	r3, #0
 800973c:	da01      	bge.n	8009742 <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 800973e:	23ff      	movs	r3, #255	@ 0xff
 8009740:	e004      	b.n	800974c <aci_gap_pass_key_resp+0xc4>
  return status;
 8009742:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009746:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800974a:	781b      	ldrb	r3, [r3, #0]
}
 800974c:	4618      	mov	r0, r3
 800974e:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8009752:	46bd      	mov	sp, r7
 8009754:	bd80      	pop	{r7, pc}

08009756 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8009756:	b590      	push	{r4, r7, lr}
 8009758:	b0cd      	sub	sp, #308	@ 0x134
 800975a:	af00      	add	r7, sp, #0
 800975c:	4604      	mov	r4, r0
 800975e:	4608      	mov	r0, r1
 8009760:	4611      	mov	r1, r2
 8009762:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009766:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 800976a:	6013      	str	r3, [r2, #0]
 800976c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009770:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8009774:	4622      	mov	r2, r4
 8009776:	701a      	strb	r2, [r3, #0]
 8009778:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800977c:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8009780:	4602      	mov	r2, r0
 8009782:	701a      	strb	r2, [r3, #0]
 8009784:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009788:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800978c:	460a      	mov	r2, r1
 800978e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8009790:	f107 0310 	add.w	r3, r7, #16
 8009794:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8009798:	f107 0308 	add.w	r3, r7, #8
 800979c:	2207      	movs	r2, #7
 800979e:	2100      	movs	r1, #0
 80097a0:	4618      	mov	r0, r3
 80097a2:	f000 ffe5 	bl	800a770 <Osal_MemSet>
  int index_input = 0;
 80097a6:	2300      	movs	r3, #0
 80097a8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Role = Role;
 80097ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80097b0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80097b4:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 80097b8:	7812      	ldrb	r2, [r2, #0]
 80097ba:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80097bc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80097c0:	3301      	adds	r3, #1
 80097c2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->privacy_enabled = privacy_enabled;
 80097c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80097ca:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80097ce:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80097d2:	7812      	ldrb	r2, [r2, #0]
 80097d4:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80097d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80097da:	3301      	adds	r3, #1
 80097dc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->device_name_char_len = device_name_char_len;
 80097e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80097e4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80097e8:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 80097ec:	7812      	ldrb	r2, [r2, #0]
 80097ee:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80097f0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80097f4:	3301      	adds	r3, #1
 80097f6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80097fa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80097fe:	2218      	movs	r2, #24
 8009800:	2100      	movs	r1, #0
 8009802:	4618      	mov	r0, r3
 8009804:	f000 ffb4 	bl	800a770 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009808:	233f      	movs	r3, #63	@ 0x3f
 800980a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08a;
 800980e:	238a      	movs	r3, #138	@ 0x8a
 8009810:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8009814:	f107 0310 	add.w	r3, r7, #16
 8009818:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800981c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009820:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 8009824:	f107 0308 	add.w	r3, r7, #8
 8009828:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 800982c:	2307      	movs	r3, #7
 800982e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009832:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009836:	2100      	movs	r1, #0
 8009838:	4618      	mov	r0, r3
 800983a:	f001 fb2d 	bl	800ae98 <hci_send_req>
 800983e:	4603      	mov	r3, r0
 8009840:	2b00      	cmp	r3, #0
 8009842:	da01      	bge.n	8009848 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 8009844:	23ff      	movs	r3, #255	@ 0xff
 8009846:	e02e      	b.n	80098a6 <aci_gap_init+0x150>
  if ( resp.Status )
 8009848:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800984c:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8009850:	781b      	ldrb	r3, [r3, #0]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d005      	beq.n	8009862 <aci_gap_init+0x10c>
    return resp.Status;
 8009856:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800985a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800985e:	781b      	ldrb	r3, [r3, #0]
 8009860:	e021      	b.n	80098a6 <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 8009862:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009866:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800986a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800986e:	b29a      	uxth	r2, r3
 8009870:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009874:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 800987c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009880:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8009884:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8009888:	b29a      	uxth	r2, r3
 800988a:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800988e:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8009890:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009894:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8009898:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800989c:	b29a      	uxth	r2, r3
 800989e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80098a2:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80098a4:	2300      	movs	r3, #0
}
 80098a6:	4618      	mov	r0, r3
 80098a8:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 80098ac:	46bd      	mov	sp, r7
 80098ae:	bd90      	pop	{r4, r7, pc}

080098b0 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b0cc      	sub	sp, #304	@ 0x130
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	4602      	mov	r2, r0
 80098b8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80098bc:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80098c0:	6019      	str	r1, [r3, #0]
 80098c2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80098c6:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80098ca:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 80098cc:	f107 0310 	add.w	r3, r7, #16
 80098d0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80098d4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80098d8:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80098dc:	2200      	movs	r2, #0
 80098de:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80098e0:	2300      	movs	r3, #0
 80098e2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->AdvDataLen = AdvDataLen;
 80098e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80098ea:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80098ee:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 80098f2:	7812      	ldrb	r2, [r2, #0]
 80098f4:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80098f6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80098fa:	3301      	adds	r3, #1
 80098fc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 8009900:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009904:	1c58      	adds	r0, r3, #1
 8009906:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800990a:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800990e:	781a      	ldrb	r2, [r3, #0]
 8009910:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009914:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8009918:	6819      	ldr	r1, [r3, #0]
 800991a:	f000 ff19 	bl	800a750 <Osal_MemCpy>
  index_input += AdvDataLen;
 800991e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009922:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8009926:	781b      	ldrb	r3, [r3, #0]
 8009928:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800992c:	4413      	add	r3, r2
 800992e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009932:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009936:	2218      	movs	r2, #24
 8009938:	2100      	movs	r1, #0
 800993a:	4618      	mov	r0, r3
 800993c:	f000 ff18 	bl	800a770 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009940:	233f      	movs	r3, #63	@ 0x3f
 8009942:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08e;
 8009946:	238e      	movs	r3, #142	@ 0x8e
 8009948:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800994c:	f107 0310 	add.w	r3, r7, #16
 8009950:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8009954:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009958:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800995c:	f107 030f 	add.w	r3, r7, #15
 8009960:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8009964:	2301      	movs	r3, #1
 8009966:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800996a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800996e:	2100      	movs	r1, #0
 8009970:	4618      	mov	r0, r3
 8009972:	f001 fa91 	bl	800ae98 <hci_send_req>
 8009976:	4603      	mov	r3, r0
 8009978:	2b00      	cmp	r3, #0
 800997a:	da01      	bge.n	8009980 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 800997c:	23ff      	movs	r3, #255	@ 0xff
 800997e:	e004      	b.n	800998a <aci_gap_update_adv_data+0xda>
  return status;
 8009980:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009984:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009988:	781b      	ldrb	r3, [r3, #0]
}
 800998a:	4618      	mov	r0, r3
 800998c:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8009990:	46bd      	mov	sp, r7
 8009992:	bd80      	pop	{r7, pc}

08009994 <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 8009994:	b580      	push	{r7, lr}
 8009996:	b088      	sub	sp, #32
 8009998:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800999a:	2300      	movs	r3, #0
 800999c:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800999e:	f107 0308 	add.w	r3, r7, #8
 80099a2:	2218      	movs	r2, #24
 80099a4:	2100      	movs	r1, #0
 80099a6:	4618      	mov	r0, r3
 80099a8:	f000 fee2 	bl	800a770 <Osal_MemSet>
  rq.ogf = 0x3f;
 80099ac:	233f      	movs	r3, #63	@ 0x3f
 80099ae:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 80099b0:	2392      	movs	r3, #146	@ 0x92
 80099b2:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80099b4:	1dfb      	adds	r3, r7, #7
 80099b6:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80099b8:	2301      	movs	r3, #1
 80099ba:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80099bc:	f107 0308 	add.w	r3, r7, #8
 80099c0:	2100      	movs	r1, #0
 80099c2:	4618      	mov	r0, r3
 80099c4:	f001 fa68 	bl	800ae98 <hci_send_req>
 80099c8:	4603      	mov	r3, r0
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	da01      	bge.n	80099d2 <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 80099ce:	23ff      	movs	r3, #255	@ 0xff
 80099d0:	e000      	b.n	80099d4 <aci_gap_configure_filter_accept_list+0x40>
  return status;
 80099d2:	79fb      	ldrb	r3, [r7, #7]
}
 80099d4:	4618      	mov	r0, r3
 80099d6:	3720      	adds	r7, #32
 80099d8:	46bd      	mov	sp, r7
 80099da:	bd80      	pop	{r7, pc}

080099dc <aci_gap_allow_rebond>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_allow_rebond( uint16_t Connection_Handle )
{
 80099dc:	b580      	push	{r7, lr}
 80099de:	b0cc      	sub	sp, #304	@ 0x130
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	4602      	mov	r2, r0
 80099e4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80099e8:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80099ec:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_allow_rebond_cp0 *cp0 = (aci_gap_allow_rebond_cp0*)(cmd_buffer);
 80099ee:	f107 0310 	add.w	r3, r7, #16
 80099f2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80099f6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80099fa:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80099fe:	2200      	movs	r2, #0
 8009a00:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009a02:	2300      	movs	r3, #0
 8009a04:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8009a08:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009a0c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009a10:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8009a14:	8812      	ldrh	r2, [r2, #0]
 8009a16:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009a18:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009a1c:	3302      	adds	r3, #2
 8009a1e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009a22:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009a26:	2218      	movs	r2, #24
 8009a28:	2100      	movs	r1, #0
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	f000 fea0 	bl	800a770 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009a30:	233f      	movs	r3, #63	@ 0x3f
 8009a32:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x095;
 8009a36:	2395      	movs	r3, #149	@ 0x95
 8009a38:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8009a3c:	f107 0310 	add.w	r3, r7, #16
 8009a40:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8009a44:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009a48:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8009a4c:	f107 030f 	add.w	r3, r7, #15
 8009a50:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8009a54:	2301      	movs	r3, #1
 8009a56:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009a5a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009a5e:	2100      	movs	r1, #0
 8009a60:	4618      	mov	r0, r3
 8009a62:	f001 fa19 	bl	800ae98 <hci_send_req>
 8009a66:	4603      	mov	r3, r0
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	da01      	bge.n	8009a70 <aci_gap_allow_rebond+0x94>
    return BLE_STATUS_TIMEOUT;
 8009a6c:	23ff      	movs	r3, #255	@ 0xff
 8009a6e:	e004      	b.n	8009a7a <aci_gap_allow_rebond+0x9e>
  return status;
 8009a70:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009a74:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009a78:	781b      	ldrb	r3, [r3, #0]
}
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8009a80:	46bd      	mov	sp, r7
 8009a82:	bd80      	pop	{r7, pc}

08009a84 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 8009a84:	b580      	push	{r7, lr}
 8009a86:	b0cc      	sub	sp, #304	@ 0x130
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	4602      	mov	r2, r0
 8009a8c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009a90:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8009a94:	801a      	strh	r2, [r3, #0]
 8009a96:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009a9a:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8009a9e:	460a      	mov	r2, r1
 8009aa0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 8009aa2:	f107 0310 	add.w	r3, r7, #16
 8009aa6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8009aaa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009aae:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8009abc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009ac0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009ac4:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8009ac8:	8812      	ldrh	r2, [r2, #0]
 8009aca:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009acc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009ad0:	3302      	adds	r3, #2
 8009ad2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 8009ad6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009ada:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009ade:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8009ae2:	7812      	ldrb	r2, [r2, #0]
 8009ae4:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8009ae6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009aea:	3301      	adds	r3, #1
 8009aec:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009af0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009af4:	2218      	movs	r2, #24
 8009af6:	2100      	movs	r1, #0
 8009af8:	4618      	mov	r0, r3
 8009afa:	f000 fe39 	bl	800a770 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009afe:	233f      	movs	r3, #63	@ 0x3f
 8009b00:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x0a5;
 8009b04:	23a5      	movs	r3, #165	@ 0xa5
 8009b06:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8009b0a:	f107 0310 	add.w	r3, r7, #16
 8009b0e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8009b12:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009b16:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8009b1a:	f107 030f 	add.w	r3, r7, #15
 8009b1e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8009b22:	2301      	movs	r3, #1
 8009b24:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009b28:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009b2c:	2100      	movs	r1, #0
 8009b2e:	4618      	mov	r0, r3
 8009b30:	f001 f9b2 	bl	800ae98 <hci_send_req>
 8009b34:	4603      	mov	r3, r0
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	da01      	bge.n	8009b3e <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 8009b3a:	23ff      	movs	r3, #255	@ 0xff
 8009b3c:	e004      	b.n	8009b48 <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 8009b3e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009b42:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009b46:	781b      	ldrb	r3, [r3, #0]
}
 8009b48:	4618      	mov	r0, r3
 8009b4a:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	bd80      	pop	{r7, pc}

08009b52 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 8009b52:	b580      	push	{r7, lr}
 8009b54:	b088      	sub	sp, #32
 8009b56:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8009b58:	2300      	movs	r3, #0
 8009b5a:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009b5c:	f107 0308 	add.w	r3, r7, #8
 8009b60:	2218      	movs	r2, #24
 8009b62:	2100      	movs	r1, #0
 8009b64:	4618      	mov	r0, r3
 8009b66:	f000 fe03 	bl	800a770 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009b6a:	233f      	movs	r3, #63	@ 0x3f
 8009b6c:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8009b6e:	f240 1301 	movw	r3, #257	@ 0x101
 8009b72:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8009b74:	1dfb      	adds	r3, r7, #7
 8009b76:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8009b78:	2301      	movs	r3, #1
 8009b7a:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009b7c:	f107 0308 	add.w	r3, r7, #8
 8009b80:	2100      	movs	r1, #0
 8009b82:	4618      	mov	r0, r3
 8009b84:	f001 f988 	bl	800ae98 <hci_send_req>
 8009b88:	4603      	mov	r3, r0
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	da01      	bge.n	8009b92 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8009b8e:	23ff      	movs	r3, #255	@ 0xff
 8009b90:	e000      	b.n	8009b94 <aci_gatt_init+0x42>
  return status;
 8009b92:	79fb      	ldrb	r3, [r7, #7]
}
 8009b94:	4618      	mov	r0, r3
 8009b96:	3720      	adds	r7, #32
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	bd80      	pop	{r7, pc}

08009b9c <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 8009b9c:	b590      	push	{r4, r7, lr}
 8009b9e:	b0cf      	sub	sp, #316	@ 0x13c
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	4604      	mov	r4, r0
 8009ba4:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 8009ba8:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 8009bac:	6001      	str	r1, [r0, #0]
 8009bae:	4610      	mov	r0, r2
 8009bb0:	4619      	mov	r1, r3
 8009bb2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009bb6:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8009bba:	4622      	mov	r2, r4
 8009bbc:	701a      	strb	r2, [r3, #0]
 8009bbe:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009bc2:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8009bc6:	4602      	mov	r2, r0
 8009bc8:	701a      	strb	r2, [r3, #0]
 8009bca:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009bce:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8009bd2:	460a      	mov	r2, r1
 8009bd4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 8009bd6:	f107 0310 	add.w	r3, r7, #16
 8009bda:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8009bde:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009be2:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8009be6:	781b      	ldrb	r3, [r3, #0]
 8009be8:	2b01      	cmp	r3, #1
 8009bea:	d00a      	beq.n	8009c02 <aci_gatt_add_service+0x66>
 8009bec:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009bf0:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8009bf4:	781b      	ldrb	r3, [r3, #0]
 8009bf6:	2b02      	cmp	r3, #2
 8009bf8:	d101      	bne.n	8009bfe <aci_gatt_add_service+0x62>
 8009bfa:	2311      	movs	r3, #17
 8009bfc:	e002      	b.n	8009c04 <aci_gatt_add_service+0x68>
 8009bfe:	2301      	movs	r3, #1
 8009c00:	e000      	b.n	8009c04 <aci_gatt_add_service+0x68>
 8009c02:	2303      	movs	r3, #3
 8009c04:	f107 0210 	add.w	r2, r7, #16
 8009c08:	4413      	add	r3, r2
 8009c0a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8009c0e:	f107 030c 	add.w	r3, r7, #12
 8009c12:	2203      	movs	r2, #3
 8009c14:	2100      	movs	r1, #0
 8009c16:	4618      	mov	r0, r3
 8009c18:	f000 fdaa 	bl	800a770 <Osal_MemSet>
  int index_input = 0;
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 8009c22:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8009c26:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8009c2a:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 8009c2e:	7812      	ldrb	r2, [r2, #0]
 8009c30:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009c32:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009c36:	3301      	adds	r3, #1
 8009c38:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 8009c3c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009c40:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8009c44:	781b      	ldrb	r3, [r3, #0]
 8009c46:	2b01      	cmp	r3, #1
 8009c48:	d002      	beq.n	8009c50 <aci_gatt_add_service+0xb4>
 8009c4a:	2b02      	cmp	r3, #2
 8009c4c:	d004      	beq.n	8009c58 <aci_gatt_add_service+0xbc>
 8009c4e:	e007      	b.n	8009c60 <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 8009c50:	2302      	movs	r3, #2
 8009c52:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 8009c56:	e005      	b.n	8009c64 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 8009c58:	2310      	movs	r3, #16
 8009c5a:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 8009c5e:	e001      	b.n	8009c64 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 8009c60:	2397      	movs	r3, #151	@ 0x97
 8009c62:	e06c      	b.n	8009d3e <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 8009c64:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8009c68:	1c58      	adds	r0, r3, #1
 8009c6a:	f897 2137 	ldrb.w	r2, [r7, #311]	@ 0x137
 8009c6e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009c72:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8009c76:	6819      	ldr	r1, [r3, #0]
 8009c78:	f000 fd6a 	bl	800a750 <Osal_MemCpy>
    index_input += size;
 8009c7c:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 8009c80:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8009c84:	4413      	add	r3, r2
 8009c86:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Type = Service_Type;
 8009c8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009c8e:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8009c92:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8009c96:	7812      	ldrb	r2, [r2, #0]
 8009c98:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8009c9a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009c9e:	3301      	adds	r3, #1
 8009ca0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 8009ca4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009ca8:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8009cac:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 8009cb0:	7812      	ldrb	r2, [r2, #0]
 8009cb2:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8009cb4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009cb8:	3301      	adds	r3, #1
 8009cba:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009cbe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009cc2:	2218      	movs	r2, #24
 8009cc4:	2100      	movs	r1, #0
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	f000 fd52 	bl	800a770 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009ccc:	233f      	movs	r3, #63	@ 0x3f
 8009cce:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x102;
 8009cd2:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8009cd6:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8009cda:	f107 0310 	add.w	r3, r7, #16
 8009cde:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8009ce2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009ce6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 8009cea:	f107 030c 	add.w	r3, r7, #12
 8009cee:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 8009cf2:	2303      	movs	r3, #3
 8009cf4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009cf8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009cfc:	2100      	movs	r1, #0
 8009cfe:	4618      	mov	r0, r3
 8009d00:	f001 f8ca 	bl	800ae98 <hci_send_req>
 8009d04:	4603      	mov	r3, r0
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	da01      	bge.n	8009d0e <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 8009d0a:	23ff      	movs	r3, #255	@ 0xff
 8009d0c:	e017      	b.n	8009d3e <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 8009d0e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009d12:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8009d16:	781b      	ldrb	r3, [r3, #0]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d005      	beq.n	8009d28 <aci_gatt_add_service+0x18c>
    return resp.Status;
 8009d1c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009d20:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8009d24:	781b      	ldrb	r3, [r3, #0]
 8009d26:	e00a      	b.n	8009d3e <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 8009d28:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009d2c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8009d30:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009d34:	b29a      	uxth	r2, r3
 8009d36:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8009d3a:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8009d3c:	2300      	movs	r3, #0
}
 8009d3e:	4618      	mov	r0, r3
 8009d40:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 8009d44:	46bd      	mov	sp, r7
 8009d46:	bd90      	pop	{r4, r7, pc}

08009d48 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 8009d48:	b590      	push	{r4, r7, lr}
 8009d4a:	b0d1      	sub	sp, #324	@ 0x144
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	4604      	mov	r4, r0
 8009d50:	4608      	mov	r0, r1
 8009d52:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 8009d56:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 8009d5a:	600a      	str	r2, [r1, #0]
 8009d5c:	4619      	mov	r1, r3
 8009d5e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8009d62:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8009d66:	4622      	mov	r2, r4
 8009d68:	801a      	strh	r2, [r3, #0]
 8009d6a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8009d6e:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8009d72:	4602      	mov	r2, r0
 8009d74:	701a      	strb	r2, [r3, #0]
 8009d76:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8009d7a:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 8009d7e:	460a      	mov	r2, r1
 8009d80:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 8009d82:	f107 0318 	add.w	r3, r7, #24
 8009d86:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8009d8a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8009d8e:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8009d92:	781b      	ldrb	r3, [r3, #0]
 8009d94:	2b01      	cmp	r3, #1
 8009d96:	d00a      	beq.n	8009dae <aci_gatt_add_char+0x66>
 8009d98:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8009d9c:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8009da0:	781b      	ldrb	r3, [r3, #0]
 8009da2:	2b02      	cmp	r3, #2
 8009da4:	d101      	bne.n	8009daa <aci_gatt_add_char+0x62>
 8009da6:	2313      	movs	r3, #19
 8009da8:	e002      	b.n	8009db0 <aci_gatt_add_char+0x68>
 8009daa:	2303      	movs	r3, #3
 8009dac:	e000      	b.n	8009db0 <aci_gatt_add_char+0x68>
 8009dae:	2305      	movs	r3, #5
 8009db0:	f107 0218 	add.w	r2, r7, #24
 8009db4:	4413      	add	r3, r2
 8009db6:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8009dba:	f107 0314 	add.w	r3, r7, #20
 8009dbe:	2203      	movs	r2, #3
 8009dc0:	2100      	movs	r1, #0
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	f000 fcd4 	bl	800a770 <Osal_MemSet>
  int index_input = 0;
 8009dc8:	2300      	movs	r3, #0
 8009dca:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Service_Handle = Service_Handle;
 8009dce:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8009dd2:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8009dd6:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8009dda:	8812      	ldrh	r2, [r2, #0]
 8009ddc:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009dde:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8009de2:	3302      	adds	r3, #2
 8009de4:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 8009de8:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8009dec:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8009df0:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 8009df4:	7812      	ldrb	r2, [r2, #0]
 8009df6:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8009df8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8009dfc:	3301      	adds	r3, #1
 8009dfe:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 8009e02:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8009e06:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8009e0a:	781b      	ldrb	r3, [r3, #0]
 8009e0c:	2b01      	cmp	r3, #1
 8009e0e:	d002      	beq.n	8009e16 <aci_gatt_add_char+0xce>
 8009e10:	2b02      	cmp	r3, #2
 8009e12:	d004      	beq.n	8009e1e <aci_gatt_add_char+0xd6>
 8009e14:	e007      	b.n	8009e26 <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 8009e16:	2302      	movs	r3, #2
 8009e18:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 8009e1c:	e005      	b.n	8009e2a <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 8009e1e:	2310      	movs	r3, #16
 8009e20:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 8009e24:	e001      	b.n	8009e2a <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 8009e26:	2397      	movs	r3, #151	@ 0x97
 8009e28:	e091      	b.n	8009f4e <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 8009e2a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8009e2e:	1cd8      	adds	r0, r3, #3
 8009e30:	f897 213f 	ldrb.w	r2, [r7, #319]	@ 0x13f
 8009e34:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8009e38:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8009e3c:	6819      	ldr	r1, [r3, #0]
 8009e3e:	f000 fc87 	bl	800a750 <Osal_MemCpy>
    index_input += size;
 8009e42:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 8009e46:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8009e4a:	4413      	add	r3, r2
 8009e4c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 8009e50:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8009e54:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8009e58:	f5a2 729d 	sub.w	r2, r2, #314	@ 0x13a
 8009e5c:	8812      	ldrh	r2, [r2, #0]
 8009e5e:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8009e60:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8009e64:	3302      	adds	r3, #2
 8009e66:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Properties = Char_Properties;
 8009e6a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8009e6e:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 8009e72:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8009e74:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8009e78:	3301      	adds	r3, #1
 8009e7a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 8009e7e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8009e82:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8009e86:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8009e88:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8009e8c:	3301      	adds	r3, #1
 8009e8e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 8009e92:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8009e96:	f897 2158 	ldrb.w	r2, [r7, #344]	@ 0x158
 8009e9a:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8009e9c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8009ea0:	3301      	adds	r3, #1
 8009ea2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 8009ea6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8009eaa:	f897 215c 	ldrb.w	r2, [r7, #348]	@ 0x15c
 8009eae:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 8009eb0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8009eb4:	3301      	adds	r3, #1
 8009eb6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Is_Variable = Is_Variable;
 8009eba:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8009ebe:	f897 2160 	ldrb.w	r2, [r7, #352]	@ 0x160
 8009ec2:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8009ec4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8009ec8:	3301      	adds	r3, #1
 8009eca:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009ece:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8009ed2:	2218      	movs	r2, #24
 8009ed4:	2100      	movs	r1, #0
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	f000 fc4a 	bl	800a770 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009edc:	233f      	movs	r3, #63	@ 0x3f
 8009ede:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x104;
 8009ee2:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8009ee6:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.cparam = cmd_buffer;
 8009eea:	f107 0318 	add.w	r3, r7, #24
 8009eee:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 8009ef2:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8009ef6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &resp;
 8009efa:	f107 0314 	add.w	r3, r7, #20
 8009efe:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = sizeof(resp);
 8009f02:	2303      	movs	r3, #3
 8009f04:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009f08:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8009f0c:	2100      	movs	r1, #0
 8009f0e:	4618      	mov	r0, r3
 8009f10:	f000 ffc2 	bl	800ae98 <hci_send_req>
 8009f14:	4603      	mov	r3, r0
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	da01      	bge.n	8009f1e <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 8009f1a:	23ff      	movs	r3, #255	@ 0xff
 8009f1c:	e017      	b.n	8009f4e <aci_gatt_add_char+0x206>
  if ( resp.Status )
 8009f1e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8009f22:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8009f26:	781b      	ldrb	r3, [r3, #0]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d005      	beq.n	8009f38 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 8009f2c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8009f30:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8009f34:	781b      	ldrb	r3, [r3, #0]
 8009f36:	e00a      	b.n	8009f4e <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 8009f38:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8009f3c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8009f40:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009f44:	b29a      	uxth	r2, r3
 8009f46:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8009f4a:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8009f4c:	2300      	movs	r3, #0
}
 8009f4e:	4618      	mov	r0, r3
 8009f50:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 8009f54:	46bd      	mov	sp, r7
 8009f56:	bd90      	pop	{r4, r7, pc}

08009f58 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8009f58:	b5b0      	push	{r4, r5, r7, lr}
 8009f5a:	b0cc      	sub	sp, #304	@ 0x130
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	4605      	mov	r5, r0
 8009f60:	460c      	mov	r4, r1
 8009f62:	4610      	mov	r0, r2
 8009f64:	4619      	mov	r1, r3
 8009f66:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009f6a:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8009f6e:	462a      	mov	r2, r5
 8009f70:	801a      	strh	r2, [r3, #0]
 8009f72:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009f76:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8009f7a:	4622      	mov	r2, r4
 8009f7c:	801a      	strh	r2, [r3, #0]
 8009f7e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009f82:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 8009f86:	4602      	mov	r2, r0
 8009f88:	701a      	strb	r2, [r3, #0]
 8009f8a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009f8e:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8009f92:	460a      	mov	r2, r1
 8009f94:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8009f96:	f107 0310 	add.w	r3, r7, #16
 8009f9a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8009f9e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009fa2:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009faa:	2300      	movs	r3, #0
 8009fac:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_Handle = Service_Handle;
 8009fb0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009fb4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009fb8:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8009fbc:	8812      	ldrh	r2, [r2, #0]
 8009fbe:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009fc0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009fc4:	3302      	adds	r3, #2
 8009fc6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Handle = Char_Handle;
 8009fca:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009fce:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009fd2:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 8009fd6:	8812      	ldrh	r2, [r2, #0]
 8009fd8:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8009fda:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009fde:	3302      	adds	r3, #2
 8009fe0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Val_Offset = Val_Offset;
 8009fe4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009fe8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009fec:	f2a2 122d 	subw	r2, r2, #301	@ 0x12d
 8009ff0:	7812      	ldrb	r2, [r2, #0]
 8009ff2:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8009ff4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009ff8:	3301      	adds	r3, #1
 8009ffa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 8009ffe:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a002:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a006:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 800a00a:	7812      	ldrb	r2, [r2, #0]
 800a00c:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800a00e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a012:	3301      	adds	r3, #1
 800a014:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 800a018:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a01c:	1d98      	adds	r0, r3, #6
 800a01e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a022:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800a026:	781b      	ldrb	r3, [r3, #0]
 800a028:	461a      	mov	r2, r3
 800a02a:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800a02e:	f000 fb8f 	bl	800a750 <Osal_MemCpy>
  index_input += Char_Value_Length;
 800a032:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a036:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800a03a:	781b      	ldrb	r3, [r3, #0]
 800a03c:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800a040:	4413      	add	r3, r2
 800a042:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a046:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a04a:	2218      	movs	r2, #24
 800a04c:	2100      	movs	r1, #0
 800a04e:	4618      	mov	r0, r3
 800a050:	f000 fb8e 	bl	800a770 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a054:	233f      	movs	r3, #63	@ 0x3f
 800a056:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x106;
 800a05a:	f44f 7383 	mov.w	r3, #262	@ 0x106
 800a05e:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800a062:	f107 0310 	add.w	r3, r7, #16
 800a066:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800a06a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a06e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800a072:	f107 030f 	add.w	r3, r7, #15
 800a076:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800a07a:	2301      	movs	r3, #1
 800a07c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a080:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a084:	2100      	movs	r1, #0
 800a086:	4618      	mov	r0, r3
 800a088:	f000 ff06 	bl	800ae98 <hci_send_req>
 800a08c:	4603      	mov	r3, r0
 800a08e:	2b00      	cmp	r3, #0
 800a090:	da01      	bge.n	800a096 <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 800a092:	23ff      	movs	r3, #255	@ 0xff
 800a094:	e004      	b.n	800a0a0 <aci_gatt_update_char_value+0x148>
  return status;
 800a096:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a09a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a09e:	781b      	ldrb	r3, [r3, #0]
}
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	bdb0      	pop	{r4, r5, r7, pc}

0800a0aa <aci_gatt_confirm_indication>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_confirm_indication( uint16_t Connection_Handle )
{
 800a0aa:	b580      	push	{r7, lr}
 800a0ac:	b0cc      	sub	sp, #304	@ 0x130
 800a0ae:	af00      	add	r7, sp, #0
 800a0b0:	4602      	mov	r2, r0
 800a0b2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a0b6:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800a0ba:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_confirm_indication_cp0 *cp0 = (aci_gatt_confirm_indication_cp0*)(cmd_buffer);
 800a0bc:	f107 0310 	add.w	r3, r7, #16
 800a0c0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800a0c4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a0c8:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a0cc:	2200      	movs	r2, #0
 800a0ce:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 800a0d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a0da:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a0de:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800a0e2:	8812      	ldrh	r2, [r2, #0]
 800a0e4:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800a0e6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a0ea:	3302      	adds	r3, #2
 800a0ec:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a0f0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a0f4:	2218      	movs	r2, #24
 800a0f6:	2100      	movs	r1, #0
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	f000 fb39 	bl	800a770 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a0fe:	233f      	movs	r3, #63	@ 0x3f
 800a100:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x125;
 800a104:	f240 1325 	movw	r3, #293	@ 0x125
 800a108:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800a10c:	f107 0310 	add.w	r3, r7, #16
 800a110:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800a114:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a118:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800a11c:	f107 030f 	add.w	r3, r7, #15
 800a120:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800a124:	2301      	movs	r3, #1
 800a126:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a12a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a12e:	2100      	movs	r1, #0
 800a130:	4618      	mov	r0, r3
 800a132:	f000 feb1 	bl	800ae98 <hci_send_req>
 800a136:	4603      	mov	r3, r0
 800a138:	2b00      	cmp	r3, #0
 800a13a:	da01      	bge.n	800a140 <aci_gatt_confirm_indication+0x96>
    return BLE_STATUS_TIMEOUT;
 800a13c:	23ff      	movs	r3, #255	@ 0xff
 800a13e:	e004      	b.n	800a14a <aci_gatt_confirm_indication+0xa0>
  return status;
 800a140:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a144:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a148:	781b      	ldrb	r3, [r3, #0]
}
 800a14a:	4618      	mov	r0, r3
 800a14c:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800a150:	46bd      	mov	sp, r7
 800a152:	bd80      	pop	{r7, pc}

0800a154 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 800a154:	b580      	push	{r7, lr}
 800a156:	b0cc      	sub	sp, #304	@ 0x130
 800a158:	af00      	add	r7, sp, #0
 800a15a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a15e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800a162:	601a      	str	r2, [r3, #0]
 800a164:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a168:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800a16c:	4602      	mov	r2, r0
 800a16e:	701a      	strb	r2, [r3, #0]
 800a170:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a174:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800a178:	460a      	mov	r2, r1
 800a17a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 800a17c:	f107 0310 	add.w	r3, r7, #16
 800a180:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800a184:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a188:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a18c:	2200      	movs	r2, #0
 800a18e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a190:	2300      	movs	r3, #0
 800a192:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Offset = Offset;
 800a196:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a19a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a19e:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800a1a2:	7812      	ldrb	r2, [r2, #0]
 800a1a4:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800a1a6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a1aa:	3301      	adds	r3, #1
 800a1ac:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Length = Length;
 800a1b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a1b4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a1b8:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800a1bc:	7812      	ldrb	r2, [r2, #0]
 800a1be:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800a1c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a1c4:	3301      	adds	r3, #1
 800a1c6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 800a1ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a1ce:	1c98      	adds	r0, r3, #2
 800a1d0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a1d4:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800a1d8:	781a      	ldrb	r2, [r3, #0]
 800a1da:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a1de:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800a1e2:	6819      	ldr	r1, [r3, #0]
 800a1e4:	f000 fab4 	bl	800a750 <Osal_MemCpy>
  index_input += Length;
 800a1e8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a1ec:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800a1f0:	781b      	ldrb	r3, [r3, #0]
 800a1f2:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800a1f6:	4413      	add	r3, r2
 800a1f8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a1fc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a200:	2218      	movs	r2, #24
 800a202:	2100      	movs	r1, #0
 800a204:	4618      	mov	r0, r3
 800a206:	f000 fab3 	bl	800a770 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a20a:	233f      	movs	r3, #63	@ 0x3f
 800a20c:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00c;
 800a210:	230c      	movs	r3, #12
 800a212:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800a216:	f107 0310 	add.w	r3, r7, #16
 800a21a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800a21e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a222:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800a226:	f107 030f 	add.w	r3, r7, #15
 800a22a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800a22e:	2301      	movs	r3, #1
 800a230:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a234:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a238:	2100      	movs	r1, #0
 800a23a:	4618      	mov	r0, r3
 800a23c:	f000 fe2c 	bl	800ae98 <hci_send_req>
 800a240:	4603      	mov	r3, r0
 800a242:	2b00      	cmp	r3, #0
 800a244:	da01      	bge.n	800a24a <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 800a246:	23ff      	movs	r3, #255	@ 0xff
 800a248:	e004      	b.n	800a254 <aci_hal_write_config_data+0x100>
  return status;
 800a24a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a24e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a252:	781b      	ldrb	r3, [r3, #0]
}
 800a254:	4618      	mov	r0, r3
 800a256:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800a25a:	46bd      	mov	sp, r7
 800a25c:	bd80      	pop	{r7, pc}

0800a25e <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 800a25e:	b580      	push	{r7, lr}
 800a260:	b0cc      	sub	sp, #304	@ 0x130
 800a262:	af00      	add	r7, sp, #0
 800a264:	4602      	mov	r2, r0
 800a266:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a26a:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800a26e:	701a      	strb	r2, [r3, #0]
 800a270:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a274:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800a278:	460a      	mov	r2, r1
 800a27a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 800a27c:	f107 0310 	add.w	r3, r7, #16
 800a280:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800a284:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a288:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a28c:	2200      	movs	r2, #0
 800a28e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a290:	2300      	movs	r3, #0
 800a292:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->En_High_Power = En_High_Power;
 800a296:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a29a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a29e:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800a2a2:	7812      	ldrb	r2, [r2, #0]
 800a2a4:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800a2a6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a2aa:	3301      	adds	r3, #1
 800a2ac:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->PA_Level = PA_Level;
 800a2b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a2b4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a2b8:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800a2bc:	7812      	ldrb	r2, [r2, #0]
 800a2be:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800a2c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a2c4:	3301      	adds	r3, #1
 800a2c6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a2ca:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a2ce:	2218      	movs	r2, #24
 800a2d0:	2100      	movs	r1, #0
 800a2d2:	4618      	mov	r0, r3
 800a2d4:	f000 fa4c 	bl	800a770 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a2d8:	233f      	movs	r3, #63	@ 0x3f
 800a2da:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00f;
 800a2de:	230f      	movs	r3, #15
 800a2e0:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800a2e4:	f107 0310 	add.w	r3, r7, #16
 800a2e8:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800a2ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a2f0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800a2f4:	f107 030f 	add.w	r3, r7, #15
 800a2f8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800a2fc:	2301      	movs	r3, #1
 800a2fe:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a302:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a306:	2100      	movs	r1, #0
 800a308:	4618      	mov	r0, r3
 800a30a:	f000 fdc5 	bl	800ae98 <hci_send_req>
 800a30e:	4603      	mov	r3, r0
 800a310:	2b00      	cmp	r3, #0
 800a312:	da01      	bge.n	800a318 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 800a314:	23ff      	movs	r3, #255	@ 0xff
 800a316:	e004      	b.n	800a322 <aci_hal_set_tx_power_level+0xc4>
  return status;
 800a318:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a31c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a320:	781b      	ldrb	r3, [r3, #0]
}
 800a322:	4618      	mov	r0, r3
 800a324:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800a328:	46bd      	mov	sp, r7
 800a32a:	bd80      	pop	{r7, pc}

0800a32c <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b0cc      	sub	sp, #304	@ 0x130
 800a330:	af00      	add	r7, sp, #0
 800a332:	4602      	mov	r2, r0
 800a334:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a338:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800a33c:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 800a33e:	f107 0310 	add.w	r3, r7, #16
 800a342:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800a346:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a34a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a34e:	2200      	movs	r2, #0
 800a350:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a352:	2300      	movs	r3, #0
 800a354:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 800a358:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a35c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a360:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800a364:	8812      	ldrh	r2, [r2, #0]
 800a366:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800a368:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a36c:	3302      	adds	r3, #2
 800a36e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a372:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a376:	2218      	movs	r2, #24
 800a378:	2100      	movs	r1, #0
 800a37a:	4618      	mov	r0, r3
 800a37c:	f000 f9f8 	bl	800a770 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a380:	233f      	movs	r3, #63	@ 0x3f
 800a382:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x018;
 800a386:	2318      	movs	r3, #24
 800a388:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800a38c:	f107 0310 	add.w	r3, r7, #16
 800a390:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800a394:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a398:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800a39c:	f107 030f 	add.w	r3, r7, #15
 800a3a0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800a3a4:	2301      	movs	r3, #1
 800a3a6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a3aa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a3ae:	2100      	movs	r1, #0
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	f000 fd71 	bl	800ae98 <hci_send_req>
 800a3b6:	4603      	mov	r3, r0
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	da01      	bge.n	800a3c0 <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 800a3bc:	23ff      	movs	r3, #255	@ 0xff
 800a3be:	e004      	b.n	800a3ca <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 800a3c0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a3c4:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a3c8:	781b      	ldrb	r3, [r3, #0]
}
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	bd80      	pop	{r7, pc}

0800a3d4 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 800a3d4:	b580      	push	{r7, lr}
 800a3d6:	b088      	sub	sp, #32
 800a3d8:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800a3da:	2300      	movs	r3, #0
 800a3dc:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a3de:	f107 0308 	add.w	r3, r7, #8
 800a3e2:	2218      	movs	r2, #24
 800a3e4:	2100      	movs	r1, #0
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	f000 f9c2 	bl	800a770 <Osal_MemSet>
  rq.ogf = 0x03;
 800a3ec:	2303      	movs	r3, #3
 800a3ee:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 800a3f0:	2303      	movs	r3, #3
 800a3f2:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800a3f4:	1dfb      	adds	r3, r7, #7
 800a3f6:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800a3f8:	2301      	movs	r3, #1
 800a3fa:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a3fc:	f107 0308 	add.w	r3, r7, #8
 800a400:	2100      	movs	r1, #0
 800a402:	4618      	mov	r0, r3
 800a404:	f000 fd48 	bl	800ae98 <hci_send_req>
 800a408:	4603      	mov	r3, r0
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	da01      	bge.n	800a412 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 800a40e:	23ff      	movs	r3, #255	@ 0xff
 800a410:	e000      	b.n	800a414 <hci_reset+0x40>
  return status;
 800a412:	79fb      	ldrb	r3, [r7, #7]
}
 800a414:	4618      	mov	r0, r3
 800a416:	3720      	adds	r7, #32
 800a418:	46bd      	mov	sp, r7
 800a41a:	bd80      	pop	{r7, pc}

0800a41c <hci_le_read_phy>:
}

tBleStatus hci_le_read_phy( uint16_t Connection_Handle,
                            uint8_t* TX_PHY,
                            uint8_t* RX_PHY )
{
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b0ce      	sub	sp, #312	@ 0x138
 800a420:	af00      	add	r7, sp, #0
 800a422:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800a426:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800a42a:	6019      	str	r1, [r3, #0]
 800a42c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800a430:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800a434:	601a      	str	r2, [r3, #0]
 800a436:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800a43a:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800a43e:	4602      	mov	r2, r0
 800a440:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_read_phy_cp0 *cp0 = (hci_le_read_phy_cp0*)(cmd_buffer);
 800a442:	f107 0318 	add.w	r3, r7, #24
 800a446:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  hci_le_read_phy_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800a44a:	f107 0310 	add.w	r3, r7, #16
 800a44e:	2205      	movs	r2, #5
 800a450:	2100      	movs	r1, #0
 800a452:	4618      	mov	r0, r3
 800a454:	f000 f98c 	bl	800a770 <Osal_MemSet>
  int index_input = 0;
 800a458:	2300      	movs	r3, #0
 800a45a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Connection_Handle = Connection_Handle;
 800a45e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800a462:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800a466:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800a46a:	8812      	ldrh	r2, [r2, #0]
 800a46c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800a46e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800a472:	3302      	adds	r3, #2
 800a474:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a478:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800a47c:	2218      	movs	r2, #24
 800a47e:	2100      	movs	r1, #0
 800a480:	4618      	mov	r0, r3
 800a482:	f000 f975 	bl	800a770 <Osal_MemSet>
  rq.ogf = 0x08;
 800a486:	2308      	movs	r3, #8
 800a488:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x030;
 800a48c:	2330      	movs	r3, #48	@ 0x30
 800a48e:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.cparam = cmd_buffer;
 800a492:	f107 0318 	add.w	r3, r7, #24
 800a496:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 800a49a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800a49e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &resp;
 800a4a2:	f107 0310 	add.w	r3, r7, #16
 800a4a6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = sizeof(resp);
 800a4aa:	2305      	movs	r3, #5
 800a4ac:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a4b0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800a4b4:	2100      	movs	r1, #0
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	f000 fcee 	bl	800ae98 <hci_send_req>
 800a4bc:	4603      	mov	r3, r0
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	da01      	bge.n	800a4c6 <hci_le_read_phy+0xaa>
    return BLE_STATUS_TIMEOUT;
 800a4c2:	23ff      	movs	r3, #255	@ 0xff
 800a4c4:	e023      	b.n	800a50e <hci_le_read_phy+0xf2>
  if ( resp.Status )
 800a4c6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800a4ca:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800a4ce:	781b      	ldrb	r3, [r3, #0]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d005      	beq.n	800a4e0 <hci_le_read_phy+0xc4>
    return resp.Status;
 800a4d4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800a4d8:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800a4dc:	781b      	ldrb	r3, [r3, #0]
 800a4de:	e016      	b.n	800a50e <hci_le_read_phy+0xf2>
  *TX_PHY = resp.TX_PHY;
 800a4e0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800a4e4:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800a4e8:	78da      	ldrb	r2, [r3, #3]
 800a4ea:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800a4ee:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	701a      	strb	r2, [r3, #0]
  *RX_PHY = resp.RX_PHY;
 800a4f6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800a4fa:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800a4fe:	791a      	ldrb	r2, [r3, #4]
 800a500:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800a504:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	701a      	strb	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800a50c:	2300      	movs	r3, #0
}
 800a50e:	4618      	mov	r0, r3
 800a510:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 800a514:	46bd      	mov	sp, r7
 800a516:	bd80      	pop	{r7, pc}

0800a518 <hci_le_set_default_phy>:

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 800a518:	b590      	push	{r4, r7, lr}
 800a51a:	b0cd      	sub	sp, #308	@ 0x134
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	4604      	mov	r4, r0
 800a520:	4608      	mov	r0, r1
 800a522:	4611      	mov	r1, r2
 800a524:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a528:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800a52c:	4622      	mov	r2, r4
 800a52e:	701a      	strb	r2, [r3, #0]
 800a530:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a534:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800a538:	4602      	mov	r2, r0
 800a53a:	701a      	strb	r2, [r3, #0]
 800a53c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a540:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800a544:	460a      	mov	r2, r1
 800a546:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 800a548:	f107 0310 	add.w	r3, r7, #16
 800a54c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800a550:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a554:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a558:	2200      	movs	r2, #0
 800a55a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a55c:	2300      	movs	r3, #0
 800a55e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 800a562:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a566:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a56a:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800a56e:	7812      	ldrb	r2, [r2, #0]
 800a570:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800a572:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a576:	3301      	adds	r3, #1
 800a578:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->TX_PHYS = TX_PHYS;
 800a57c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a580:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a584:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800a588:	7812      	ldrb	r2, [r2, #0]
 800a58a:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800a58c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a590:	3301      	adds	r3, #1
 800a592:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->RX_PHYS = RX_PHYS;
 800a596:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a59a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a59e:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800a5a2:	7812      	ldrb	r2, [r2, #0]
 800a5a4:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800a5a6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a5aa:	3301      	adds	r3, #1
 800a5ac:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a5b0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a5b4:	2218      	movs	r2, #24
 800a5b6:	2100      	movs	r1, #0
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	f000 f8d9 	bl	800a770 <Osal_MemSet>
  rq.ogf = 0x08;
 800a5be:	2308      	movs	r3, #8
 800a5c0:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x031;
 800a5c4:	2331      	movs	r3, #49	@ 0x31
 800a5c6:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800a5ca:	f107 0310 	add.w	r3, r7, #16
 800a5ce:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800a5d2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a5d6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800a5da:	f107 030f 	add.w	r3, r7, #15
 800a5de:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800a5e2:	2301      	movs	r3, #1
 800a5e4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a5e8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a5ec:	2100      	movs	r1, #0
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	f000 fc52 	bl	800ae98 <hci_send_req>
 800a5f4:	4603      	mov	r3, r0
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	da01      	bge.n	800a5fe <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 800a5fa:	23ff      	movs	r3, #255	@ 0xff
 800a5fc:	e004      	b.n	800a608 <hci_le_set_default_phy+0xf0>
  return status;
 800a5fe:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a602:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a606:	781b      	ldrb	r3, [r3, #0]
}
 800a608:	4618      	mov	r0, r3
 800a60a:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 800a60e:	46bd      	mov	sp, r7
 800a610:	bd90      	pop	{r4, r7, pc}

0800a612 <aci_l2cap_connection_parameter_update_req>:
tBleStatus aci_l2cap_connection_parameter_update_req( uint16_t Connection_Handle,
                                                      uint16_t Conn_Interval_Min,
                                                      uint16_t Conn_Interval_Max,
                                                      uint16_t Latency,
                                                      uint16_t Timeout_Multiplier )
{
 800a612:	b5b0      	push	{r4, r5, r7, lr}
 800a614:	b0cc      	sub	sp, #304	@ 0x130
 800a616:	af00      	add	r7, sp, #0
 800a618:	4605      	mov	r5, r0
 800a61a:	460c      	mov	r4, r1
 800a61c:	4610      	mov	r0, r2
 800a61e:	4619      	mov	r1, r3
 800a620:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a624:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800a628:	462a      	mov	r2, r5
 800a62a:	801a      	strh	r2, [r3, #0]
 800a62c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a630:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800a634:	4622      	mov	r2, r4
 800a636:	801a      	strh	r2, [r3, #0]
 800a638:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a63c:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800a640:	4602      	mov	r2, r0
 800a642:	801a      	strh	r2, [r3, #0]
 800a644:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a648:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800a64c:	460a      	mov	r2, r1
 800a64e:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_l2cap_connection_parameter_update_req_cp0 *cp0 = (aci_l2cap_connection_parameter_update_req_cp0*)(cmd_buffer);
 800a650:	f107 0310 	add.w	r3, r7, #16
 800a654:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800a658:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a65c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a660:	2200      	movs	r2, #0
 800a662:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a664:	2300      	movs	r3, #0
 800a666:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 800a66a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a66e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a672:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800a676:	8812      	ldrh	r2, [r2, #0]
 800a678:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800a67a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a67e:	3302      	adds	r3, #2
 800a680:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Conn_Interval_Min = Conn_Interval_Min;
 800a684:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a688:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a68c:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 800a690:	8812      	ldrh	r2, [r2, #0]
 800a692:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800a694:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a698:	3302      	adds	r3, #2
 800a69a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Conn_Interval_Max = Conn_Interval_Max;
 800a69e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a6a2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a6a6:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 800a6aa:	8812      	ldrh	r2, [r2, #0]
 800a6ac:	809a      	strh	r2, [r3, #4]
  index_input += 2;
 800a6ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a6b2:	3302      	adds	r3, #2
 800a6b4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Latency = Latency;
 800a6b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a6bc:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a6c0:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 800a6c4:	8812      	ldrh	r2, [r2, #0]
 800a6c6:	80da      	strh	r2, [r3, #6]
  index_input += 2;
 800a6c8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a6cc:	3302      	adds	r3, #2
 800a6ce:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Timeout_Multiplier = Timeout_Multiplier;
 800a6d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a6d6:	f8b7 2140 	ldrh.w	r2, [r7, #320]	@ 0x140
 800a6da:	811a      	strh	r2, [r3, #8]
  index_input += 2;
 800a6dc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a6e0:	3302      	adds	r3, #2
 800a6e2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a6e6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a6ea:	2218      	movs	r2, #24
 800a6ec:	2100      	movs	r1, #0
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	f000 f83e 	bl	800a770 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a6f4:	233f      	movs	r3, #63	@ 0x3f
 800a6f6:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x181;
 800a6fa:	f240 1381 	movw	r3, #385	@ 0x181
 800a6fe:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.event = 0x0F;
 800a702:	230f      	movs	r3, #15
 800a704:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  rq.cparam = cmd_buffer;
 800a708:	f107 0310 	add.w	r3, r7, #16
 800a70c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800a710:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a714:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800a718:	f107 030f 	add.w	r3, r7, #15
 800a71c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800a720:	2301      	movs	r3, #1
 800a722:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a726:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a72a:	2100      	movs	r1, #0
 800a72c:	4618      	mov	r0, r3
 800a72e:	f000 fbb3 	bl	800ae98 <hci_send_req>
 800a732:	4603      	mov	r3, r0
 800a734:	2b00      	cmp	r3, #0
 800a736:	da01      	bge.n	800a73c <aci_l2cap_connection_parameter_update_req+0x12a>
    return BLE_STATUS_TIMEOUT;
 800a738:	23ff      	movs	r3, #255	@ 0xff
 800a73a:	e004      	b.n	800a746 <aci_l2cap_connection_parameter_update_req+0x134>
  return status;
 800a73c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a740:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a744:	781b      	ldrb	r3, [r3, #0]
}
 800a746:	4618      	mov	r0, r3
 800a748:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800a74c:	46bd      	mov	sp, r7
 800a74e:	bdb0      	pop	{r4, r5, r7, pc}

0800a750 <Osal_MemCpy>:
 * Osal_MemCpy
 *
 */

void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 800a750:	b580      	push	{r7, lr}
 800a752:	b084      	sub	sp, #16
 800a754:	af00      	add	r7, sp, #0
 800a756:	60f8      	str	r0, [r7, #12]
 800a758:	60b9      	str	r1, [r7, #8]
 800a75a:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size );
 800a75c:	687a      	ldr	r2, [r7, #4]
 800a75e:	68b9      	ldr	r1, [r7, #8]
 800a760:	68f8      	ldr	r0, [r7, #12]
 800a762:	f004 f8f8 	bl	800e956 <memcpy>
 800a766:	4603      	mov	r3, r0
}
 800a768:	4618      	mov	r0, r3
 800a76a:	3710      	adds	r7, #16
 800a76c:	46bd      	mov	sp, r7
 800a76e:	bd80      	pop	{r7, pc}

0800a770 <Osal_MemSet>:
 * Osal_MemSet
 *
 */

void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 800a770:	b580      	push	{r7, lr}
 800a772:	b084      	sub	sp, #16
 800a774:	af00      	add	r7, sp, #0
 800a776:	60f8      	str	r0, [r7, #12]
 800a778:	60b9      	str	r1, [r7, #8]
 800a77a:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 800a77c:	687a      	ldr	r2, [r7, #4]
 800a77e:	68b9      	ldr	r1, [r7, #8]
 800a780:	68f8      	ldr	r0, [r7, #12]
 800a782:	f004 f873 	bl	800e86c <memset>
 800a786:	4603      	mov	r3, r0
}
 800a788:	4618      	mov	r0, r3
 800a78a:	3710      	adds	r7, #16
 800a78c:	46bd      	mov	sp, r7
 800a78e:	bd80      	pop	{r7, pc}

0800a790 <PeerToPeer_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t PeerToPeer_Event_Handler(void *Event)
{
 800a790:	b580      	push	{r7, lr}
 800a792:	b08a      	sub	sp, #40	@ 0x28
 800a794:	af00      	add	r7, sp, #0
 800a796:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_blecore_aci *blecore_evt;
  aci_gatt_attribute_modified_event_rp0    * attribute_modified;
  P2PS_STM_App_Notification_evt_t Notification;

  return_value = SVCCTL_EvtNotAck;
 800a798:	2300      	movs	r3, #0
 800a79a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	3301      	adds	r3, #1
 800a7a2:	623b      	str	r3, [r7, #32]

  switch(event_pckt->evt)
 800a7a4:	6a3b      	ldr	r3, [r7, #32]
 800a7a6:	781b      	ldrb	r3, [r3, #0]
 800a7a8:	2bff      	cmp	r3, #255	@ 0xff
 800a7aa:	d14f      	bne.n	800a84c <PeerToPeer_Event_Handler+0xbc>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 800a7ac:	6a3b      	ldr	r3, [r7, #32]
 800a7ae:	3302      	adds	r3, #2
 800a7b0:	61fb      	str	r3, [r7, #28]
      switch(blecore_evt->ecode)
 800a7b2:	69fb      	ldr	r3, [r7, #28]
 800a7b4:	881b      	ldrh	r3, [r3, #0]
 800a7b6:	b29b      	uxth	r3, r3
 800a7b8:	461a      	mov	r2, r3
 800a7ba:	f640 4301 	movw	r3, #3073	@ 0xc01
 800a7be:	429a      	cmp	r2, r3
 800a7c0:	d140      	bne.n	800a844 <PeerToPeer_Event_Handler+0xb4>
      {
        case ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE:
       {
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 800a7c2:	69fb      	ldr	r3, [r7, #28]
 800a7c4:	3302      	adds	r3, #2
 800a7c6:	61bb      	str	r3, [r7, #24]
            if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PNotifyServerToClientCharHdle + 2))
 800a7c8:	69bb      	ldr	r3, [r7, #24]
 800a7ca:	885b      	ldrh	r3, [r3, #2]
 800a7cc:	b29b      	uxth	r3, r3
 800a7ce:	461a      	mov	r2, r3
 800a7d0:	4b22      	ldr	r3, [pc, #136]	@ (800a85c <PeerToPeer_Event_Handler+0xcc>)
 800a7d2:	889b      	ldrh	r3, [r3, #4]
 800a7d4:	3302      	adds	r3, #2
 800a7d6:	429a      	cmp	r2, r3
 800a7d8:	d118      	bne.n	800a80c <PeerToPeer_Event_Handler+0x7c>
            {
              /**
               * Descriptor handle
               */
              return_value = SVCCTL_EvtAckFlowEnable;
 800a7da:	2301      	movs	r3, #1
 800a7dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
              /**
               * Notify to application
               */
              if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 800a7e0:	69bb      	ldr	r3, [r7, #24]
 800a7e2:	7a1b      	ldrb	r3, [r3, #8]
 800a7e4:	f003 0301 	and.w	r3, r3, #1
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d007      	beq.n	800a7fc <PeerToPeer_Event_Handler+0x6c>
              {
                Notification.P2P_Evt_Opcode = P2PS_STM__NOTIFY_ENABLED_EVT;
 800a7ec:	2300      	movs	r3, #0
 800a7ee:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 800a7f0:	f107 0308 	add.w	r3, r7, #8
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	f002 ffcb 	bl	800d790 <P2PS_STM_App_Notification>
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
              P2PS_STM_App_Notification(&Notification);
            }
#endif
        }
        break;
 800a7fa:	e025      	b.n	800a848 <PeerToPeer_Event_Handler+0xb8>
                Notification.P2P_Evt_Opcode = P2PS_STM_NOTIFY_DISABLED_EVT;
 800a7fc:	2301      	movs	r3, #1
 800a7fe:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 800a800:	f107 0308 	add.w	r3, r7, #8
 800a804:	4618      	mov	r0, r3
 800a806:	f002 ffc3 	bl	800d790 <P2PS_STM_App_Notification>
        break;
 800a80a:	e01d      	b.n	800a848 <PeerToPeer_Event_Handler+0xb8>
            else if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PWriteClientToServerCharHdle + 1))
 800a80c:	69bb      	ldr	r3, [r7, #24]
 800a80e:	885b      	ldrh	r3, [r3, #2]
 800a810:	b29b      	uxth	r3, r3
 800a812:	461a      	mov	r2, r3
 800a814:	4b11      	ldr	r3, [pc, #68]	@ (800a85c <PeerToPeer_Event_Handler+0xcc>)
 800a816:	885b      	ldrh	r3, [r3, #2]
 800a818:	3301      	adds	r3, #1
 800a81a:	429a      	cmp	r2, r3
 800a81c:	d114      	bne.n	800a848 <PeerToPeer_Event_Handler+0xb8>
              BLE_DBG_P2P_STM_MSG("-- GATT : LED CONFIGURATION RECEIVED\n");
 800a81e:	4810      	ldr	r0, [pc, #64]	@ (800a860 <PeerToPeer_Event_Handler+0xd0>)
 800a820:	f003 ff24 	bl	800e66c <puts>
              Notification.P2P_Evt_Opcode = P2PS_STM_WRITE_EVT;
 800a824:	2303      	movs	r3, #3
 800a826:	723b      	strb	r3, [r7, #8]
              Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 800a828:	69bb      	ldr	r3, [r7, #24]
 800a82a:	88db      	ldrh	r3, [r3, #6]
 800a82c:	b29b      	uxth	r3, r3
 800a82e:	b2db      	uxtb	r3, r3
 800a830:	743b      	strb	r3, [r7, #16]
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 800a832:	69bb      	ldr	r3, [r7, #24]
 800a834:	3308      	adds	r3, #8
 800a836:	60fb      	str	r3, [r7, #12]
              P2PS_STM_App_Notification(&Notification);  
 800a838:	f107 0308 	add.w	r3, r7, #8
 800a83c:	4618      	mov	r0, r3
 800a83e:	f002 ffa7 	bl	800d790 <P2PS_STM_App_Notification>
        break;
 800a842:	e001      	b.n	800a848 <PeerToPeer_Event_Handler+0xb8>

        default:
          break;
 800a844:	bf00      	nop
 800a846:	e002      	b.n	800a84e <PeerToPeer_Event_Handler+0xbe>
        break;
 800a848:	bf00      	nop
      }
    }
    break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 800a84a:	e000      	b.n	800a84e <PeerToPeer_Event_Handler+0xbe>

    default:
      break;
 800a84c:	bf00      	nop
  }

  return(return_value);
 800a84e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}/* end SVCCTL_EvtAckStatus_t */
 800a852:	4618      	mov	r0, r3
 800a854:	3728      	adds	r7, #40	@ 0x28
 800a856:	46bd      	mov	sp, r7
 800a858:	bd80      	pop	{r7, pc}
 800a85a:	bf00      	nop
 800a85c:	20000090 	.word	0x20000090
 800a860:	0800fb90 	.word	0x0800fb90

0800a864 <P2PS_STM_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void P2PS_STM_Init(void)
{
 800a864:	b580      	push	{r7, lr}
 800a866:	b08a      	sub	sp, #40	@ 0x28
 800a868:	af06      	add	r7, sp, #24
  Char_UUID_t  uuid16;

  /**
   *	Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(PeerToPeer_Event_Handler);
 800a86a:	484a      	ldr	r0, [pc, #296]	@ (800a994 <P2PS_STM_Init+0x130>)
 800a86c:	f000 f94a 	bl	800ab04 <SVCCTL_RegisterSvcHandler>
     *                                2 for P2P Write characteristic +
     *                                2 for P2P Notify characteristic +
     *                                1 for client char configuration descriptor +
     *                                
     */
    COPY_P2P_SERVICE_UUID(uuid16.Char_UUID_128);
 800a870:	238f      	movs	r3, #143	@ 0x8f
 800a872:	703b      	strb	r3, [r7, #0]
 800a874:	23e5      	movs	r3, #229	@ 0xe5
 800a876:	707b      	strb	r3, [r7, #1]
 800a878:	23b3      	movs	r3, #179	@ 0xb3
 800a87a:	70bb      	strb	r3, [r7, #2]
 800a87c:	23d5      	movs	r3, #213	@ 0xd5
 800a87e:	70fb      	strb	r3, [r7, #3]
 800a880:	232e      	movs	r3, #46	@ 0x2e
 800a882:	713b      	strb	r3, [r7, #4]
 800a884:	237f      	movs	r3, #127	@ 0x7f
 800a886:	717b      	strb	r3, [r7, #5]
 800a888:	234a      	movs	r3, #74	@ 0x4a
 800a88a:	71bb      	strb	r3, [r7, #6]
 800a88c:	2398      	movs	r3, #152	@ 0x98
 800a88e:	71fb      	strb	r3, [r7, #7]
 800a890:	232a      	movs	r3, #42	@ 0x2a
 800a892:	723b      	strb	r3, [r7, #8]
 800a894:	2348      	movs	r3, #72	@ 0x48
 800a896:	727b      	strb	r3, [r7, #9]
 800a898:	237a      	movs	r3, #122	@ 0x7a
 800a89a:	72bb      	strb	r3, [r7, #10]
 800a89c:	23cc      	movs	r3, #204	@ 0xcc
 800a89e:	72fb      	strb	r3, [r7, #11]
 800a8a0:	2340      	movs	r3, #64	@ 0x40
 800a8a2:	733b      	strb	r3, [r7, #12]
 800a8a4:	23fe      	movs	r3, #254	@ 0xfe
 800a8a6:	737b      	strb	r3, [r7, #13]
 800a8a8:	2300      	movs	r3, #0
 800a8aa:	73bb      	strb	r3, [r7, #14]
 800a8ac:	2300      	movs	r3, #0
 800a8ae:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_service(UUID_TYPE_128,
 800a8b0:	4639      	mov	r1, r7
 800a8b2:	4b39      	ldr	r3, [pc, #228]	@ (800a998 <P2PS_STM_Init+0x134>)
 800a8b4:	9300      	str	r3, [sp, #0]
 800a8b6:	2306      	movs	r3, #6
 800a8b8:	2201      	movs	r2, #1
 800a8ba:	2002      	movs	r0, #2
 800a8bc:	f7ff f96e 	bl	8009b9c <aci_gatt_add_service>
                      &(aPeerToPeerContext.PeerToPeerSvcHdle));

    /**
     *  Add LED Characteristic
     */
    COPY_P2P_WRITE_CHAR_UUID(uuid16.Char_UUID_128);
 800a8c0:	2319      	movs	r3, #25
 800a8c2:	703b      	strb	r3, [r7, #0]
 800a8c4:	23ed      	movs	r3, #237	@ 0xed
 800a8c6:	707b      	strb	r3, [r7, #1]
 800a8c8:	2382      	movs	r3, #130	@ 0x82
 800a8ca:	70bb      	strb	r3, [r7, #2]
 800a8cc:	23ae      	movs	r3, #174	@ 0xae
 800a8ce:	70fb      	strb	r3, [r7, #3]
 800a8d0:	23ed      	movs	r3, #237	@ 0xed
 800a8d2:	713b      	strb	r3, [r7, #4]
 800a8d4:	2321      	movs	r3, #33	@ 0x21
 800a8d6:	717b      	strb	r3, [r7, #5]
 800a8d8:	234c      	movs	r3, #76	@ 0x4c
 800a8da:	71bb      	strb	r3, [r7, #6]
 800a8dc:	239d      	movs	r3, #157	@ 0x9d
 800a8de:	71fb      	strb	r3, [r7, #7]
 800a8e0:	2341      	movs	r3, #65	@ 0x41
 800a8e2:	723b      	strb	r3, [r7, #8]
 800a8e4:	2345      	movs	r3, #69	@ 0x45
 800a8e6:	727b      	strb	r3, [r7, #9]
 800a8e8:	2322      	movs	r3, #34	@ 0x22
 800a8ea:	72bb      	strb	r3, [r7, #10]
 800a8ec:	238e      	movs	r3, #142	@ 0x8e
 800a8ee:	72fb      	strb	r3, [r7, #11]
 800a8f0:	2341      	movs	r3, #65	@ 0x41
 800a8f2:	733b      	strb	r3, [r7, #12]
 800a8f4:	23fe      	movs	r3, #254	@ 0xfe
 800a8f6:	737b      	strb	r3, [r7, #13]
 800a8f8:	2300      	movs	r3, #0
 800a8fa:	73bb      	strb	r3, [r7, #14]
 800a8fc:	2300      	movs	r3, #0
 800a8fe:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 800a900:	4b25      	ldr	r3, [pc, #148]	@ (800a998 <P2PS_STM_Init+0x134>)
 800a902:	8818      	ldrh	r0, [r3, #0]
 800a904:	463a      	mov	r2, r7
 800a906:	4b25      	ldr	r3, [pc, #148]	@ (800a99c <P2PS_STM_Init+0x138>)
 800a908:	9305      	str	r3, [sp, #20]
 800a90a:	2301      	movs	r3, #1
 800a90c:	9304      	str	r3, [sp, #16]
 800a90e:	230a      	movs	r3, #10
 800a910:	9303      	str	r3, [sp, #12]
 800a912:	2301      	movs	r3, #1
 800a914:	9302      	str	r3, [sp, #8]
 800a916:	2300      	movs	r3, #0
 800a918:	9301      	str	r3, [sp, #4]
 800a91a:	2306      	movs	r3, #6
 800a91c:	9300      	str	r3, [sp, #0]
 800a91e:	2302      	movs	r3, #2
 800a920:	2102      	movs	r1, #2
 800a922:	f7ff fa11 	bl	8009d48 <aci_gatt_add_char>
                      &(aPeerToPeerContext.P2PWriteClientToServerCharHdle));

    /**
     *   Add Button Characteristic
     */
    COPY_P2P_NOTIFY_UUID(uuid16.Char_UUID_128);
 800a926:	2319      	movs	r3, #25
 800a928:	703b      	strb	r3, [r7, #0]
 800a92a:	23ed      	movs	r3, #237	@ 0xed
 800a92c:	707b      	strb	r3, [r7, #1]
 800a92e:	2382      	movs	r3, #130	@ 0x82
 800a930:	70bb      	strb	r3, [r7, #2]
 800a932:	23ae      	movs	r3, #174	@ 0xae
 800a934:	70fb      	strb	r3, [r7, #3]
 800a936:	23ed      	movs	r3, #237	@ 0xed
 800a938:	713b      	strb	r3, [r7, #4]
 800a93a:	2321      	movs	r3, #33	@ 0x21
 800a93c:	717b      	strb	r3, [r7, #5]
 800a93e:	234c      	movs	r3, #76	@ 0x4c
 800a940:	71bb      	strb	r3, [r7, #6]
 800a942:	239d      	movs	r3, #157	@ 0x9d
 800a944:	71fb      	strb	r3, [r7, #7]
 800a946:	2341      	movs	r3, #65	@ 0x41
 800a948:	723b      	strb	r3, [r7, #8]
 800a94a:	2345      	movs	r3, #69	@ 0x45
 800a94c:	727b      	strb	r3, [r7, #9]
 800a94e:	2322      	movs	r3, #34	@ 0x22
 800a950:	72bb      	strb	r3, [r7, #10]
 800a952:	238e      	movs	r3, #142	@ 0x8e
 800a954:	72fb      	strb	r3, [r7, #11]
 800a956:	2342      	movs	r3, #66	@ 0x42
 800a958:	733b      	strb	r3, [r7, #12]
 800a95a:	23fe      	movs	r3, #254	@ 0xfe
 800a95c:	737b      	strb	r3, [r7, #13]
 800a95e:	2300      	movs	r3, #0
 800a960:	73bb      	strb	r3, [r7, #14]
 800a962:	2300      	movs	r3, #0
 800a964:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 800a966:	4b0c      	ldr	r3, [pc, #48]	@ (800a998 <P2PS_STM_Init+0x134>)
 800a968:	8818      	ldrh	r0, [r3, #0]
 800a96a:	463a      	mov	r2, r7
 800a96c:	4b0c      	ldr	r3, [pc, #48]	@ (800a9a0 <P2PS_STM_Init+0x13c>)
 800a96e:	9305      	str	r3, [sp, #20]
 800a970:	2301      	movs	r3, #1
 800a972:	9304      	str	r3, [sp, #16]
 800a974:	230a      	movs	r3, #10
 800a976:	9303      	str	r3, [sp, #12]
 800a978:	2301      	movs	r3, #1
 800a97a:	9302      	str	r3, [sp, #8]
 800a97c:	2300      	movs	r3, #0
 800a97e:	9301      	str	r3, [sp, #4]
 800a980:	2310      	movs	r3, #16
 800a982:	9300      	str	r3, [sp, #0]
 800a984:	2302      	movs	r3, #2
 800a986:	2102      	movs	r1, #2
 800a988:	f7ff f9de 	bl	8009d48 <aci_gatt_add_char>
                      0,
                      &(aPeerToPeerContext.RebootReqCharHdle));
#endif    

    
  return;
 800a98c:	bf00      	nop
}
 800a98e:	3710      	adds	r7, #16
 800a990:	46bd      	mov	sp, r7
 800a992:	bd80      	pop	{r7, pc}
 800a994:	0800a791 	.word	0x0800a791
 800a998:	20000090 	.word	0x20000090
 800a99c:	20000092 	.word	0x20000092
 800a9a0:	20000094 	.word	0x20000094

0800a9a4 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 800a9a4:	b480      	push	{r7}
 800a9a6:	af00      	add	r7, sp, #0
  return;
 800a9a8:	bf00      	nop
}
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b0:	4770      	bx	lr

0800a9b2 <BLS_Init>:

__WEAK void BLS_Init( void )
{
 800a9b2:	b480      	push	{r7}
 800a9b4:	af00      	add	r7, sp, #0
  return;
 800a9b6:	bf00      	nop
}
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9be:	4770      	bx	lr

0800a9c0 <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 800a9c0:	b480      	push	{r7}
 800a9c2:	af00      	add	r7, sp, #0
  return;
 800a9c4:	bf00      	nop
}
 800a9c6:	46bd      	mov	sp, r7
 800a9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9cc:	4770      	bx	lr

0800a9ce <DIS_Init>:
__WEAK void DIS_Init( void )
{
 800a9ce:	b480      	push	{r7}
 800a9d0:	af00      	add	r7, sp, #0
  return;
 800a9d2:	bf00      	nop
}
 800a9d4:	46bd      	mov	sp, r7
 800a9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9da:	4770      	bx	lr

0800a9dc <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 800a9dc:	b480      	push	{r7}
 800a9de:	af00      	add	r7, sp, #0
  return;
 800a9e0:	bf00      	nop
}
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e8:	4770      	bx	lr

0800a9ea <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 800a9ea:	b480      	push	{r7}
 800a9ec:	af00      	add	r7, sp, #0
  return;
 800a9ee:	bf00      	nop
}
 800a9f0:	46bd      	mov	sp, r7
 800a9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f6:	4770      	bx	lr

0800a9f8 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 800a9f8:	b480      	push	{r7}
 800a9fa:	af00      	add	r7, sp, #0
  return;
 800a9fc:	bf00      	nop
}
 800a9fe:	46bd      	mov	sp, r7
 800aa00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa04:	4770      	bx	lr

0800aa06 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 800aa06:	b480      	push	{r7}
 800aa08:	af00      	add	r7, sp, #0
  return;
 800aa0a:	bf00      	nop
}
 800aa0c:	46bd      	mov	sp, r7
 800aa0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa12:	4770      	bx	lr

0800aa14 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 800aa14:	b480      	push	{r7}
 800aa16:	af00      	add	r7, sp, #0
  return;
 800aa18:	bf00      	nop
}
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa20:	4770      	bx	lr

0800aa22 <LLS_Init>:
__WEAK void LLS_Init( void )
{
 800aa22:	b480      	push	{r7}
 800aa24:	af00      	add	r7, sp, #0
  return;
 800aa26:	bf00      	nop
}
 800aa28:	46bd      	mov	sp, r7
 800aa2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2e:	4770      	bx	lr

0800aa30 <TPS_Init>:
__WEAK void TPS_Init( void )
{
 800aa30:	b480      	push	{r7}
 800aa32:	af00      	add	r7, sp, #0
  return;
 800aa34:	bf00      	nop
}
 800aa36:	46bd      	mov	sp, r7
 800aa38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa3c:	4770      	bx	lr

0800aa3e <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 800aa3e:	b480      	push	{r7}
 800aa40:	af00      	add	r7, sp, #0
  return;
 800aa42:	bf00      	nop
}
 800aa44:	46bd      	mov	sp, r7
 800aa46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa4a:	4770      	bx	lr

0800aa4c <ZDD_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
  return;
}
__WEAK void ZDD_STM_Init( void )
{
 800aa4c:	b480      	push	{r7}
 800aa4e:	af00      	add	r7, sp, #0
  return;
 800aa50:	bf00      	nop
}
 800aa52:	46bd      	mov	sp, r7
 800aa54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa58:	4770      	bx	lr

0800aa5a <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 800aa5a:	b480      	push	{r7}
 800aa5c:	af00      	add	r7, sp, #0
  return;
 800aa5e:	bf00      	nop
}
 800aa60:	46bd      	mov	sp, r7
 800aa62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa66:	4770      	bx	lr

0800aa68 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 800aa68:	b480      	push	{r7}
 800aa6a:	af00      	add	r7, sp, #0
  return;
 800aa6c:	bf00      	nop
}
 800aa6e:	46bd      	mov	sp, r7
 800aa70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa74:	4770      	bx	lr

0800aa76 <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 800aa76:	b480      	push	{r7}
 800aa78:	af00      	add	r7, sp, #0
  return;
 800aa7a:	bf00      	nop
}
 800aa7c:	46bd      	mov	sp, r7
 800aa7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa82:	4770      	bx	lr

0800aa84 <SVCCTL_InitCustomSvc>:
__WEAK void SVCCTL_InitCustomSvc( void )
{
 800aa84:	b480      	push	{r7}
 800aa86:	af00      	add	r7, sp, #0
  return;
 800aa88:	bf00      	nop
}
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa90:	4770      	bx	lr
	...

0800aa94 <SVCCTL_Init>:

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 800aa94:	b580      	push	{r7, lr}
 800aa96:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 800aa98:	4b04      	ldr	r3, [pc, #16]	@ (800aaac <SVCCTL_Init+0x18>)
 800aa9a:	2200      	movs	r2, #0
 800aa9c:	711a      	strb	r2, [r3, #4]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800aa9e:	4b04      	ldr	r3, [pc, #16]	@ (800aab0 <SVCCTL_Init+0x1c>)
 800aaa0:	2200      	movs	r2, #0
 800aaa2:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 800aaa4:	f000 f806 	bl	800aab4 <SVCCTL_SvcInit>

  return;
 800aaa8:	bf00      	nop
}
 800aaaa:	bd80      	pop	{r7, pc}
 800aaac:	20000098 	.word	0x20000098
 800aab0:	200000a0 	.word	0x200000a0

0800aab4 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 800aab4:	b580      	push	{r7, lr}
 800aab6:	af00      	add	r7, sp, #0
  BAS_Init();
 800aab8:	f7ff ff74 	bl	800a9a4 <BAS_Init>

  BLS_Init();
 800aabc:	f7ff ff79 	bl	800a9b2 <BLS_Init>

  CRS_STM_Init();
 800aac0:	f7ff ff7e 	bl	800a9c0 <CRS_STM_Init>

  DIS_Init();
 800aac4:	f7ff ff83 	bl	800a9ce <DIS_Init>

  EDS_STM_Init();
 800aac8:	f7ff ff88 	bl	800a9dc <EDS_STM_Init>

  HIDS_Init();
 800aacc:	f7ff ff8d 	bl	800a9ea <HIDS_Init>

  HRS_Init();
 800aad0:	f7ff ff92 	bl	800a9f8 <HRS_Init>

  HTS_Init();
 800aad4:	f7ff ff97 	bl	800aa06 <HTS_Init>

  IAS_Init();
 800aad8:	f7ff ff9c 	bl	800aa14 <IAS_Init>

  LLS_Init();
 800aadc:	f7ff ffa1 	bl	800aa22 <LLS_Init>

  TPS_Init();
 800aae0:	f7ff ffa6 	bl	800aa30 <TPS_Init>

  MOTENV_STM_Init();
 800aae4:	f7ff ffab 	bl	800aa3e <MOTENV_STM_Init>

  P2PS_STM_Init();
 800aae8:	f7ff febc 	bl	800a864 <P2PS_STM_Init>

  ZDD_STM_Init();
 800aaec:	f7ff ffae 	bl	800aa4c <ZDD_STM_Init>

  OTAS_STM_Init();
 800aaf0:	f7ff ffb3 	bl	800aa5a <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 800aaf4:	f7ff ffbf 	bl	800aa76 <BVOPUS_STM_Init>

  MESH_Init();
 800aaf8:	f7ff ffb6 	bl	800aa68 <MESH_Init>

  SVCCTL_InitCustomSvc();
 800aafc:	f7ff ffc2 	bl	800aa84 <SVCCTL_InitCustomSvc>
  
  return;
 800ab00:	bf00      	nop
}
 800ab02:	bd80      	pop	{r7, pc}

0800ab04 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 800ab04:	b480      	push	{r7}
 800ab06:	b083      	sub	sp, #12
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 800ab0c:	4b09      	ldr	r3, [pc, #36]	@ (800ab34 <SVCCTL_RegisterSvcHandler+0x30>)
 800ab0e:	791b      	ldrb	r3, [r3, #4]
 800ab10:	4619      	mov	r1, r3
 800ab12:	4a08      	ldr	r2, [pc, #32]	@ (800ab34 <SVCCTL_RegisterSvcHandler+0x30>)
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 800ab1a:	4b06      	ldr	r3, [pc, #24]	@ (800ab34 <SVCCTL_RegisterSvcHandler+0x30>)
 800ab1c:	791b      	ldrb	r3, [r3, #4]
 800ab1e:	3301      	adds	r3, #1
 800ab20:	b2da      	uxtb	r2, r3
 800ab22:	4b04      	ldr	r3, [pc, #16]	@ (800ab34 <SVCCTL_RegisterSvcHandler+0x30>)
 800ab24:	711a      	strb	r2, [r3, #4]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 800ab26:	bf00      	nop
}
 800ab28:	370c      	adds	r7, #12
 800ab2a:	46bd      	mov	sp, r7
 800ab2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab30:	4770      	bx	lr
 800ab32:	bf00      	nop
 800ab34:	20000098 	.word	0x20000098

0800ab38 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 800ab38:	b580      	push	{r7, lr}
 800ab3a:	b086      	sub	sp, #24
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	3301      	adds	r3, #1
 800ab44:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800ab46:	2300      	movs	r3, #0
 800ab48:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 800ab4a:	693b      	ldr	r3, [r7, #16]
 800ab4c:	781b      	ldrb	r3, [r3, #0]
 800ab4e:	2bff      	cmp	r3, #255	@ 0xff
 800ab50:	d125      	bne.n	800ab9e <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 800ab52:	693b      	ldr	r3, [r7, #16]
 800ab54:	3302      	adds	r3, #2
 800ab56:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	881b      	ldrh	r3, [r3, #0]
 800ab5c:	b29b      	uxth	r3, r3
 800ab5e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800ab62:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ab66:	d118      	bne.n	800ab9a <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800ab68:	2300      	movs	r3, #0
 800ab6a:	757b      	strb	r3, [r7, #21]
 800ab6c:	e00d      	b.n	800ab8a <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800ab6e:	7d7b      	ldrb	r3, [r7, #21]
 800ab70:	4a1a      	ldr	r2, [pc, #104]	@ (800abdc <SVCCTL_UserEvtRx+0xa4>)
 800ab72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ab76:	6878      	ldr	r0, [r7, #4]
 800ab78:	4798      	blx	r3
 800ab7a:	4603      	mov	r3, r0
 800ab7c:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 800ab7e:	7dfb      	ldrb	r3, [r7, #23]
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d108      	bne.n	800ab96 <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800ab84:	7d7b      	ldrb	r3, [r7, #21]
 800ab86:	3301      	adds	r3, #1
 800ab88:	757b      	strb	r3, [r7, #21]
 800ab8a:	4b14      	ldr	r3, [pc, #80]	@ (800abdc <SVCCTL_UserEvtRx+0xa4>)
 800ab8c:	791b      	ldrb	r3, [r3, #4]
 800ab8e:	7d7a      	ldrb	r2, [r7, #21]
 800ab90:	429a      	cmp	r2, r3
 800ab92:	d3ec      	bcc.n	800ab6e <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 800ab94:	e002      	b.n	800ab9c <SVCCTL_UserEvtRx+0x64>
              break;
 800ab96:	bf00      	nop
          break;
 800ab98:	e000      	b.n	800ab9c <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 800ab9a:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 800ab9c:	e000      	b.n	800aba0 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 800ab9e:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 800aba0:	7dfb      	ldrb	r3, [r7, #23]
 800aba2:	2b02      	cmp	r3, #2
 800aba4:	d00f      	beq.n	800abc6 <SVCCTL_UserEvtRx+0x8e>
 800aba6:	2b02      	cmp	r3, #2
 800aba8:	dc10      	bgt.n	800abcc <SVCCTL_UserEvtRx+0x94>
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d002      	beq.n	800abb4 <SVCCTL_UserEvtRx+0x7c>
 800abae:	2b01      	cmp	r3, #1
 800abb0:	d006      	beq.n	800abc0 <SVCCTL_UserEvtRx+0x88>
 800abb2:	e00b      	b.n	800abcc <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 800abb4:	6878      	ldr	r0, [r7, #4]
 800abb6:	f001 fefd 	bl	800c9b4 <SVCCTL_App_Notification>
 800abba:	4603      	mov	r3, r0
 800abbc:	75bb      	strb	r3, [r7, #22]
      break;
 800abbe:	e008      	b.n	800abd2 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 800abc0:	2301      	movs	r3, #1
 800abc2:	75bb      	strb	r3, [r7, #22]
      break;
 800abc4:	e005      	b.n	800abd2 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 800abc6:	2300      	movs	r3, #0
 800abc8:	75bb      	strb	r3, [r7, #22]
      break;
 800abca:	e002      	b.n	800abd2 <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 800abcc:	2301      	movs	r3, #1
 800abce:	75bb      	strb	r3, [r7, #22]
      break;
 800abd0:	bf00      	nop
  }

  return (return_status);
 800abd2:	7dbb      	ldrb	r3, [r7, #22]
}
 800abd4:	4618      	mov	r0, r3
 800abd6:	3718      	adds	r7, #24
 800abd8:	46bd      	mov	sp, r7
 800abda:	bd80      	pop	{r7, pc}
 800abdc:	20000098 	.word	0x20000098

0800abe0 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 800abe0:	b580      	push	{r7, lr}
 800abe2:	b088      	sub	sp, #32
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800abe8:	f107 030c 	add.w	r3, r7, #12
 800abec:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 800abf4:	69fb      	ldr	r3, [r7, #28]
 800abf6:	212e      	movs	r1, #46	@ 0x2e
 800abf8:	f64f 4066 	movw	r0, #64614	@ 0xfc66
 800abfc:	f000 fae8 	bl	800b1d0 <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800ac00:	69fb      	ldr	r3, [r7, #28]
 800ac02:	330b      	adds	r3, #11
 800ac04:	78db      	ldrb	r3, [r3, #3]
}
 800ac06:	4618      	mov	r0, r3
 800ac08:	3720      	adds	r7, #32
 800ac0a:	46bd      	mov	sp, r7
 800ac0c:	bd80      	pop	{r7, pc}

0800ac0e <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 800ac0e:	b580      	push	{r7, lr}
 800ac10:	b088      	sub	sp, #32
 800ac12:	af00      	add	r7, sp, #0
 800ac14:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800ac16:	f107 030c 	add.w	r3, r7, #12
 800ac1a:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 800ac22:	69fb      	ldr	r3, [r7, #28]
 800ac24:	210f      	movs	r1, #15
 800ac26:	f64f 4068 	movw	r0, #64616	@ 0xfc68
 800ac2a:	f000 fad1 	bl	800b1d0 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800ac2e:	69fb      	ldr	r3, [r7, #28]
 800ac30:	330b      	adds	r3, #11
 800ac32:	78db      	ldrb	r3, [r3, #3]
}
 800ac34:	4618      	mov	r0, r3
 800ac36:	3720      	adds	r7, #32
 800ac38:	46bd      	mov	sp, r7
 800ac3a:	bd80      	pop	{r7, pc}

0800ac3c <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 800ac3c:	b580      	push	{r7, lr}
 800ac3e:	b088      	sub	sp, #32
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800ac44:	f107 030c 	add.w	r3, r7, #12
 800ac48:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 800ac4a:	69fb      	ldr	r3, [r7, #28]
 800ac4c:	687a      	ldr	r2, [r7, #4]
 800ac4e:	2110      	movs	r1, #16
 800ac50:	f64f 4075 	movw	r0, #64629	@ 0xfc75
 800ac54:	f000 fabc 	bl	800b1d0 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800ac58:	69fb      	ldr	r3, [r7, #28]
 800ac5a:	330b      	adds	r3, #11
 800ac5c:	78db      	ldrb	r3, [r3, #3]
}
 800ac5e:	4618      	mov	r0, r3
 800ac60:	3720      	adds	r7, #32
 800ac62:	46bd      	mov	sp, r7
 800ac64:	bd80      	pop	{r7, pc}
	...

0800ac68 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 800ac68:	b480      	push	{r7}
 800ac6a:	b08b      	sub	sp, #44	@ 0x2c
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 800ac70:	2300      	movs	r3, #0
 800ac72:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 800ac74:	2300      	movs	r3, #0
 800ac76:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 800ac78:	2300      	movs	r3, #0
 800ac7a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t wireless_firmware_memorySize = 0;
 800ac7c:	2300      	movs	r3, #0
 800ac7e:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 800ac80:	2300      	movs	r3, #0
 800ac82:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 800ac84:	2300      	movs	r3, #0
 800ac86:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 800ac88:	2300      	movs	r3, #0
 800ac8a:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 800ac8c:	2300      	movs	r3, #0
 800ac8e:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 800ac90:	4b4a      	ldr	r3, [pc, #296]	@ (800adbc <SHCI_GetWirelessFwInfo+0x154>)
 800ac92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ac94:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800ac98:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 800ac9a:	693b      	ldr	r3, [r7, #16]
 800ac9c:	009b      	lsls	r3, r3, #2
 800ac9e:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 800aca2:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 800acaa:	68bb      	ldr	r3, [r7, #8]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	4a44      	ldr	r2, [pc, #272]	@ (800adc0 <SHCI_GetWirelessFwInfo+0x158>)
 800acb0:	4293      	cmp	r3, r2
 800acb2:	d10f      	bne.n	800acd4 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 800acb4:	68bb      	ldr	r3, [r7, #8]
 800acb6:	695b      	ldr	r3, [r3, #20]
 800acb8:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 800acba:	68bb      	ldr	r3, [r7, #8]
 800acbc:	699b      	ldr	r3, [r3, #24]
 800acbe:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 800acc0:	68bb      	ldr	r3, [r7, #8]
 800acc2:	69db      	ldr	r3, [r3, #28]
 800acc4:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 800acc6:	68bb      	ldr	r3, [r7, #8]
 800acc8:	68db      	ldr	r3, [r3, #12]
 800acca:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 800accc:	68bb      	ldr	r3, [r7, #8]
 800acce:	691b      	ldr	r3, [r3, #16]
 800acd0:	617b      	str	r3, [r7, #20]
 800acd2:	e01a      	b.n	800ad0a <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 800acd4:	693b      	ldr	r3, [r7, #16]
 800acd6:	009b      	lsls	r3, r3, #2
 800acd8:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 800acdc:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 800ace0:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	691b      	ldr	r3, [r3, #16]
 800ace8:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	695b      	ldr	r3, [r3, #20]
 800acf0:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	699b      	ldr	r3, [r3, #24]
 800acf8:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	685b      	ldr	r3, [r3, #4]
 800ad00:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	689b      	ldr	r3, [r3, #8]
 800ad08:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800ad0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad0c:	0e1b      	lsrs	r3, r3, #24
 800ad0e:	b2da      	uxtb	r2, r3
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800ad14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad16:	0c1b      	lsrs	r3, r3, #16
 800ad18:	b2da      	uxtb	r2, r3
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800ad1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad20:	0a1b      	lsrs	r3, r3, #8
 800ad22:	b2da      	uxtb	r2, r3
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 800ad28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad2a:	091b      	lsrs	r3, r3, #4
 800ad2c:	b2db      	uxtb	r3, r3
 800ad2e:	f003 030f 	and.w	r3, r3, #15
 800ad32:	b2da      	uxtb	r2, r3
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 800ad38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad3a:	b2db      	uxtb	r3, r3
 800ad3c:	f003 030f 	and.w	r3, r3, #15
 800ad40:	b2da      	uxtb	r2, r3
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800ad46:	6a3b      	ldr	r3, [r7, #32]
 800ad48:	0e1b      	lsrs	r3, r3, #24
 800ad4a:	b2da      	uxtb	r2, r3
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800ad50:	6a3b      	ldr	r3, [r7, #32]
 800ad52:	0c1b      	lsrs	r3, r3, #16
 800ad54:	b2da      	uxtb	r2, r3
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 800ad5a:	6a3b      	ldr	r3, [r7, #32]
 800ad5c:	0a1b      	lsrs	r3, r3, #8
 800ad5e:	b2da      	uxtb	r2, r3
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800ad64:	6a3b      	ldr	r3, [r7, #32]
 800ad66:	b2da      	uxtb	r2, r3
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 800ad6c:	69fb      	ldr	r3, [r7, #28]
 800ad6e:	b2da      	uxtb	r2, r3
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800ad74:	69bb      	ldr	r3, [r7, #24]
 800ad76:	0e1b      	lsrs	r3, r3, #24
 800ad78:	b2da      	uxtb	r2, r3
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800ad7e:	69bb      	ldr	r3, [r7, #24]
 800ad80:	0c1b      	lsrs	r3, r3, #16
 800ad82:	b2da      	uxtb	r2, r3
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800ad88:	69bb      	ldr	r3, [r7, #24]
 800ad8a:	0a1b      	lsrs	r3, r3, #8
 800ad8c:	b2da      	uxtb	r2, r3
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800ad92:	697b      	ldr	r3, [r7, #20]
 800ad94:	0e1b      	lsrs	r3, r3, #24
 800ad96:	b2da      	uxtb	r2, r3
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800ad9c:	697b      	ldr	r3, [r7, #20]
 800ad9e:	0c1b      	lsrs	r3, r3, #16
 800ada0:	b2da      	uxtb	r2, r3
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800ada6:	697b      	ldr	r3, [r7, #20]
 800ada8:	b2da      	uxtb	r2, r3
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 800adae:	2300      	movs	r3, #0
}
 800adb0:	4618      	mov	r0, r3
 800adb2:	372c      	adds	r7, #44	@ 0x2c
 800adb4:	46bd      	mov	sp, r7
 800adb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adba:	4770      	bx	lr
 800adbc:	58004000 	.word	0x58004000
 800adc0:	a94656b9 	.word	0xa94656b9

0800adc4 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800adc4:	b580      	push	{r7, lr}
 800adc6:	b082      	sub	sp, #8
 800adc8:	af00      	add	r7, sp, #0
 800adca:	6078      	str	r0, [r7, #4]
 800adcc:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800adce:	683b      	ldr	r3, [r7, #0]
 800add0:	685b      	ldr	r3, [r3, #4]
 800add2:	4a08      	ldr	r2, [pc, #32]	@ (800adf4 <hci_init+0x30>)
 800add4:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 800add6:	4a08      	ldr	r2, [pc, #32]	@ (800adf8 <hci_init+0x34>)
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 800addc:	4806      	ldr	r0, [pc, #24]	@ (800adf8 <hci_init+0x34>)
 800adde:	f000 f979 	bl	800b0d4 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800ade2:	683b      	ldr	r3, [r7, #0]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	4618      	mov	r0, r3
 800ade8:	f000 f8da 	bl	800afa0 <TlInit>

  return;
 800adec:	bf00      	nop
}
 800adee:	3708      	adds	r7, #8
 800adf0:	46bd      	mov	sp, r7
 800adf2:	bd80      	pop	{r7, pc}
 800adf4:	20000470 	.word	0x20000470
 800adf8:	20000448 	.word	0x20000448

0800adfc <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800adfc:	b580      	push	{r7, lr}
 800adfe:	b084      	sub	sp, #16
 800ae00:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800ae02:	4822      	ldr	r0, [pc, #136]	@ (800ae8c <hci_user_evt_proc+0x90>)
 800ae04:	f000 fdd2 	bl	800b9ac <LST_is_empty>
 800ae08:	4603      	mov	r3, r0
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d12b      	bne.n	800ae66 <hci_user_evt_proc+0x6a>
 800ae0e:	4b20      	ldr	r3, [pc, #128]	@ (800ae90 <hci_user_evt_proc+0x94>)
 800ae10:	781b      	ldrb	r3, [r3, #0]
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d027      	beq.n	800ae66 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800ae16:	f107 030c 	add.w	r3, r7, #12
 800ae1a:	4619      	mov	r1, r3
 800ae1c:	481b      	ldr	r0, [pc, #108]	@ (800ae8c <hci_user_evt_proc+0x90>)
 800ae1e:	f000 fe54 	bl	800baca <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800ae22:	4b1c      	ldr	r3, [pc, #112]	@ (800ae94 <hci_user_evt_proc+0x98>)
 800ae24:	69db      	ldr	r3, [r3, #28]
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d00c      	beq.n	800ae44 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 800ae2e:	2301      	movs	r3, #1
 800ae30:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800ae32:	4b18      	ldr	r3, [pc, #96]	@ (800ae94 <hci_user_evt_proc+0x98>)
 800ae34:	69db      	ldr	r3, [r3, #28]
 800ae36:	1d3a      	adds	r2, r7, #4
 800ae38:	4610      	mov	r0, r2
 800ae3a:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 800ae3c:	793a      	ldrb	r2, [r7, #4]
 800ae3e:	4b14      	ldr	r3, [pc, #80]	@ (800ae90 <hci_user_evt_proc+0x94>)
 800ae40:	701a      	strb	r2, [r3, #0]
 800ae42:	e002      	b.n	800ae4a <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800ae44:	4b12      	ldr	r3, [pc, #72]	@ (800ae90 <hci_user_evt_proc+0x94>)
 800ae46:	2201      	movs	r2, #1
 800ae48:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 800ae4a:	4b11      	ldr	r3, [pc, #68]	@ (800ae90 <hci_user_evt_proc+0x94>)
 800ae4c:	781b      	ldrb	r3, [r3, #0]
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d004      	beq.n	800ae5c <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	4618      	mov	r0, r3
 800ae56:	f000 fc0d 	bl	800b674 <TL_MM_EvtDone>
 800ae5a:	e004      	b.n	800ae66 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	4619      	mov	r1, r3
 800ae60:	480a      	ldr	r0, [pc, #40]	@ (800ae8c <hci_user_evt_proc+0x90>)
 800ae62:	f000 fdc5 	bl	800b9f0 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800ae66:	4809      	ldr	r0, [pc, #36]	@ (800ae8c <hci_user_evt_proc+0x90>)
 800ae68:	f000 fda0 	bl	800b9ac <LST_is_empty>
 800ae6c:	4603      	mov	r3, r0
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d107      	bne.n	800ae82 <hci_user_evt_proc+0x86>
 800ae72:	4b07      	ldr	r3, [pc, #28]	@ (800ae90 <hci_user_evt_proc+0x94>)
 800ae74:	781b      	ldrb	r3, [r3, #0]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d003      	beq.n	800ae82 <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 800ae7a:	4804      	ldr	r0, [pc, #16]	@ (800ae8c <hci_user_evt_proc+0x90>)
 800ae7c:	f002 fc2e 	bl	800d6dc <hci_notify_asynch_evt>
  }


  return;
 800ae80:	bf00      	nop
 800ae82:	bf00      	nop
}
 800ae84:	3710      	adds	r7, #16
 800ae86:	46bd      	mov	sp, r7
 800ae88:	bd80      	pop	{r7, pc}
 800ae8a:	bf00      	nop
 800ae8c:	200000a8 	.word	0x200000a8
 800ae90:	200000b4 	.word	0x200000b4
 800ae94:	20000448 	.word	0x20000448

0800ae98 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 800ae98:	b580      	push	{r7, lr}
 800ae9a:	b088      	sub	sp, #32
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	6078      	str	r0, [r7, #4]
 800aea0:	460b      	mov	r3, r1
 800aea2:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 800aea4:	2000      	movs	r0, #0
 800aea6:	f000 f8d1 	bl	800b04c <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 800aeaa:	2300      	movs	r3, #0
 800aeac:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	885b      	ldrh	r3, [r3, #2]
 800aeb2:	b21b      	sxth	r3, r3
 800aeb4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800aeb8:	b21a      	sxth	r2, r3
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	881b      	ldrh	r3, [r3, #0]
 800aebe:	029b      	lsls	r3, r3, #10
 800aec0:	b21b      	sxth	r3, r3
 800aec2:	4313      	orrs	r3, r2
 800aec4:	b21b      	sxth	r3, r3
 800aec6:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 800aec8:	4b33      	ldr	r3, [pc, #204]	@ (800af98 <hci_send_req+0x100>)
 800aeca:	2201      	movs	r2, #1
 800aecc:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	68db      	ldr	r3, [r3, #12]
 800aed2:	b2d9      	uxtb	r1, r3
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	689a      	ldr	r2, [r3, #8]
 800aed8:	8bbb      	ldrh	r3, [r7, #28]
 800aeda:	4618      	mov	r0, r3
 800aedc:	f000 f890 	bl	800b000 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 800aee0:	e04e      	b.n	800af80 <hci_send_req+0xe8>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 800aee2:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 800aee6:	f002 fc10 	bl	800d70a <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800aeea:	e043      	b.n	800af74 <hci_send_req+0xdc>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 800aeec:	f107 030c 	add.w	r3, r7, #12
 800aef0:	4619      	mov	r1, r3
 800aef2:	482a      	ldr	r0, [pc, #168]	@ (800af9c <hci_send_req+0x104>)
 800aef4:	f000 fde9 	bl	800baca <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	7a5b      	ldrb	r3, [r3, #9]
 800aefc:	2b0f      	cmp	r3, #15
 800aefe:	d114      	bne.n	800af2a <hci_send_req+0x92>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	330b      	adds	r3, #11
 800af04:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 800af06:	693b      	ldr	r3, [r7, #16]
 800af08:	885b      	ldrh	r3, [r3, #2]
 800af0a:	b29b      	uxth	r3, r3
 800af0c:	8bba      	ldrh	r2, [r7, #28]
 800af0e:	429a      	cmp	r2, r3
 800af10:	d104      	bne.n	800af1c <hci_send_req+0x84>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	691b      	ldr	r3, [r3, #16]
 800af16:	693a      	ldr	r2, [r7, #16]
 800af18:	7812      	ldrb	r2, [r2, #0]
 800af1a:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 800af1c:	693b      	ldr	r3, [r7, #16]
 800af1e:	785b      	ldrb	r3, [r3, #1]
 800af20:	2b00      	cmp	r3, #0
 800af22:	d027      	beq.n	800af74 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800af24:	2301      	movs	r3, #1
 800af26:	77fb      	strb	r3, [r7, #31]
 800af28:	e024      	b.n	800af74 <hci_send_req+0xdc>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	330b      	adds	r3, #11
 800af2e:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 800af30:	69bb      	ldr	r3, [r7, #24]
 800af32:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800af36:	b29b      	uxth	r3, r3
 800af38:	8bba      	ldrh	r2, [r7, #28]
 800af3a:	429a      	cmp	r2, r3
 800af3c:	d114      	bne.n	800af68 <hci_send_req+0xd0>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	7a9b      	ldrb	r3, [r3, #10]
 800af42:	3b03      	subs	r3, #3
 800af44:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	695a      	ldr	r2, [r3, #20]
 800af4a:	7dfb      	ldrb	r3, [r7, #23]
 800af4c:	429a      	cmp	r2, r3
 800af4e:	bfa8      	it	ge
 800af50:	461a      	movge	r2, r3
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	6918      	ldr	r0, [r3, #16]
 800af5a:	69bb      	ldr	r3, [r7, #24]
 800af5c:	1cd9      	adds	r1, r3, #3
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	695b      	ldr	r3, [r3, #20]
 800af62:	461a      	mov	r2, r3
 800af64:	f003 fcf7 	bl	800e956 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 800af68:	69bb      	ldr	r3, [r7, #24]
 800af6a:	781b      	ldrb	r3, [r3, #0]
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d001      	beq.n	800af74 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800af70:	2301      	movs	r3, #1
 800af72:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800af74:	4809      	ldr	r0, [pc, #36]	@ (800af9c <hci_send_req+0x104>)
 800af76:	f000 fd19 	bl	800b9ac <LST_is_empty>
 800af7a:	4603      	mov	r3, r0
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d0b5      	beq.n	800aeec <hci_send_req+0x54>
  while(local_cmd_status == HCI_TL_CmdBusy)
 800af80:	7ffb      	ldrb	r3, [r7, #31]
 800af82:	2b00      	cmp	r3, #0
 800af84:	d0ad      	beq.n	800aee2 <hci_send_req+0x4a>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 800af86:	2001      	movs	r0, #1
 800af88:	f000 f860 	bl	800b04c <NotifyCmdStatus>

  return 0;
 800af8c:	2300      	movs	r3, #0
}
 800af8e:	4618      	mov	r0, r3
 800af90:	3720      	adds	r7, #32
 800af92:	46bd      	mov	sp, r7
 800af94:	bd80      	pop	{r7, pc}
 800af96:	bf00      	nop
 800af98:	20000474 	.word	0x20000474
 800af9c:	20000468 	.word	0x20000468

0800afa0 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800afa0:	b580      	push	{r7, lr}
 800afa2:	b086      	sub	sp, #24
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 800afa8:	480f      	ldr	r0, [pc, #60]	@ (800afe8 <TlInit+0x48>)
 800afaa:	f000 fcef 	bl	800b98c <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 800afae:	4a0f      	ldr	r2, [pc, #60]	@ (800afec <TlInit+0x4c>)
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 800afb4:	480e      	ldr	r0, [pc, #56]	@ (800aff0 <TlInit+0x50>)
 800afb6:	f000 fce9 	bl	800b98c <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800afba:	4b0e      	ldr	r3, [pc, #56]	@ (800aff4 <TlInit+0x54>)
 800afbc:	2201      	movs	r2, #1
 800afbe:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 800afc0:	4b0d      	ldr	r3, [pc, #52]	@ (800aff8 <TlInit+0x58>)
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d00a      	beq.n	800afde <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 800afcc:	4b0b      	ldr	r3, [pc, #44]	@ (800affc <TlInit+0x5c>)
 800afce:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 800afd0:	4b09      	ldr	r3, [pc, #36]	@ (800aff8 <TlInit+0x58>)
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	f107 0208 	add.w	r2, r7, #8
 800afd8:	4610      	mov	r0, r2
 800afda:	4798      	blx	r3
  }

  return;
 800afdc:	bf00      	nop
 800afde:	bf00      	nop
}
 800afe0:	3718      	adds	r7, #24
 800afe2:	46bd      	mov	sp, r7
 800afe4:	bd80      	pop	{r7, pc}
 800afe6:	bf00      	nop
 800afe8:	20000468 	.word	0x20000468
 800afec:	200000b0 	.word	0x200000b0
 800aff0:	200000a8 	.word	0x200000a8
 800aff4:	200000b4 	.word	0x200000b4
 800aff8:	20000448 	.word	0x20000448
 800affc:	0800b08d 	.word	0x0800b08d

0800b000 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 800b000:	b580      	push	{r7, lr}
 800b002:	b082      	sub	sp, #8
 800b004:	af00      	add	r7, sp, #0
 800b006:	4603      	mov	r3, r0
 800b008:	603a      	str	r2, [r7, #0]
 800b00a:	80fb      	strh	r3, [r7, #6]
 800b00c:	460b      	mov	r3, r1
 800b00e:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 800b010:	4b0c      	ldr	r3, [pc, #48]	@ (800b044 <SendCmd+0x44>)
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	88fa      	ldrh	r2, [r7, #6]
 800b016:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 800b01a:	4b0a      	ldr	r3, [pc, #40]	@ (800b044 <SendCmd+0x44>)
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	797a      	ldrb	r2, [r7, #5]
 800b020:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 800b022:	4b08      	ldr	r3, [pc, #32]	@ (800b044 <SendCmd+0x44>)
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	330c      	adds	r3, #12
 800b028:	797a      	ldrb	r2, [r7, #5]
 800b02a:	6839      	ldr	r1, [r7, #0]
 800b02c:	4618      	mov	r0, r3
 800b02e:	f003 fc92 	bl	800e956 <memcpy>

  hciContext.io.Send(0,0);
 800b032:	4b05      	ldr	r3, [pc, #20]	@ (800b048 <SendCmd+0x48>)
 800b034:	691b      	ldr	r3, [r3, #16]
 800b036:	2100      	movs	r1, #0
 800b038:	2000      	movs	r0, #0
 800b03a:	4798      	blx	r3

  return;
 800b03c:	bf00      	nop
}
 800b03e:	3708      	adds	r7, #8
 800b040:	46bd      	mov	sp, r7
 800b042:	bd80      	pop	{r7, pc}
 800b044:	200000b0 	.word	0x200000b0
 800b048:	20000448 	.word	0x20000448

0800b04c <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 800b04c:	b580      	push	{r7, lr}
 800b04e:	b082      	sub	sp, #8
 800b050:	af00      	add	r7, sp, #0
 800b052:	4603      	mov	r3, r0
 800b054:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 800b056:	79fb      	ldrb	r3, [r7, #7]
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d108      	bne.n	800b06e <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 800b05c:	4b0a      	ldr	r3, [pc, #40]	@ (800b088 <NotifyCmdStatus+0x3c>)
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	2b00      	cmp	r3, #0
 800b062:	d00d      	beq.n	800b080 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 800b064:	4b08      	ldr	r3, [pc, #32]	@ (800b088 <NotifyCmdStatus+0x3c>)
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	2000      	movs	r0, #0
 800b06a:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 800b06c:	e008      	b.n	800b080 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 800b06e:	4b06      	ldr	r3, [pc, #24]	@ (800b088 <NotifyCmdStatus+0x3c>)
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	2b00      	cmp	r3, #0
 800b074:	d004      	beq.n	800b080 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 800b076:	4b04      	ldr	r3, [pc, #16]	@ (800b088 <NotifyCmdStatus+0x3c>)
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	2001      	movs	r0, #1
 800b07c:	4798      	blx	r3
  return;
 800b07e:	bf00      	nop
 800b080:	bf00      	nop
}
 800b082:	3708      	adds	r7, #8
 800b084:	46bd      	mov	sp, r7
 800b086:	bd80      	pop	{r7, pc}
 800b088:	20000470 	.word	0x20000470

0800b08c <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 800b08c:	b580      	push	{r7, lr}
 800b08e:	b082      	sub	sp, #8
 800b090:	af00      	add	r7, sp, #0
 800b092:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	7a5b      	ldrb	r3, [r3, #9]
 800b098:	2b0f      	cmp	r3, #15
 800b09a:	d003      	beq.n	800b0a4 <TlEvtReceived+0x18>
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	7a5b      	ldrb	r3, [r3, #9]
 800b0a0:	2b0e      	cmp	r3, #14
 800b0a2:	d107      	bne.n	800b0b4 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 800b0a4:	6879      	ldr	r1, [r7, #4]
 800b0a6:	4809      	ldr	r0, [pc, #36]	@ (800b0cc <TlEvtReceived+0x40>)
 800b0a8:	f000 fcc8 	bl	800ba3c <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 800b0ac:	2000      	movs	r0, #0
 800b0ae:	f002 fb21 	bl	800d6f4 <hci_cmd_resp_release>
 800b0b2:	e006      	b.n	800b0c2 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 800b0b4:	6879      	ldr	r1, [r7, #4]
 800b0b6:	4806      	ldr	r0, [pc, #24]	@ (800b0d0 <TlEvtReceived+0x44>)
 800b0b8:	f000 fcc0 	bl	800ba3c <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800b0bc:	4804      	ldr	r0, [pc, #16]	@ (800b0d0 <TlEvtReceived+0x44>)
 800b0be:	f002 fb0d 	bl	800d6dc <hci_notify_asynch_evt>
  }

  return;
 800b0c2:	bf00      	nop
}
 800b0c4:	3708      	adds	r7, #8
 800b0c6:	46bd      	mov	sp, r7
 800b0c8:	bd80      	pop	{r7, pc}
 800b0ca:	bf00      	nop
 800b0cc:	20000468 	.word	0x20000468
 800b0d0:	200000a8 	.word	0x200000a8

0800b0d4 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 800b0d4:	b480      	push	{r7}
 800b0d6:	b083      	sub	sp, #12
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	4a05      	ldr	r2, [pc, #20]	@ (800b0f4 <hci_register_io_bus+0x20>)
 800b0e0:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	4a04      	ldr	r2, [pc, #16]	@ (800b0f8 <hci_register_io_bus+0x24>)
 800b0e6:	611a      	str	r2, [r3, #16]

  return;
 800b0e8:	bf00      	nop
}
 800b0ea:	370c      	adds	r7, #12
 800b0ec:	46bd      	mov	sp, r7
 800b0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f2:	4770      	bx	lr
 800b0f4:	0800b3ed 	.word	0x0800b3ed
 800b0f8:	0800b455 	.word	0x0800b455

0800b0fc <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800b0fc:	b580      	push	{r7, lr}
 800b0fe:	b082      	sub	sp, #8
 800b100:	af00      	add	r7, sp, #0
 800b102:	6078      	str	r0, [r7, #4]
 800b104:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800b106:	683b      	ldr	r3, [r7, #0]
 800b108:	685b      	ldr	r3, [r3, #4]
 800b10a:	4a08      	ldr	r2, [pc, #32]	@ (800b12c <shci_init+0x30>)
 800b10c:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800b10e:	4a08      	ldr	r2, [pc, #32]	@ (800b130 <shci_init+0x34>)
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800b114:	4806      	ldr	r0, [pc, #24]	@ (800b130 <shci_init+0x34>)
 800b116:	f000 f915 	bl	800b344 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800b11a:	683b      	ldr	r3, [r7, #0]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	4618      	mov	r0, r3
 800b120:	f000 f898 	bl	800b254 <TlInit>

  return;
 800b124:	bf00      	nop
}
 800b126:	3708      	adds	r7, #8
 800b128:	46bd      	mov	sp, r7
 800b12a:	bd80      	pop	{r7, pc}
 800b12c:	20000498 	.word	0x20000498
 800b130:	20000478 	.word	0x20000478

0800b134 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800b134:	b580      	push	{r7, lr}
 800b136:	b084      	sub	sp, #16
 800b138:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800b13a:	4822      	ldr	r0, [pc, #136]	@ (800b1c4 <shci_user_evt_proc+0x90>)
 800b13c:	f000 fc36 	bl	800b9ac <LST_is_empty>
 800b140:	4603      	mov	r3, r0
 800b142:	2b00      	cmp	r3, #0
 800b144:	d12b      	bne.n	800b19e <shci_user_evt_proc+0x6a>
 800b146:	4b20      	ldr	r3, [pc, #128]	@ (800b1c8 <shci_user_evt_proc+0x94>)
 800b148:	781b      	ldrb	r3, [r3, #0]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d027      	beq.n	800b19e <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800b14e:	f107 030c 	add.w	r3, r7, #12
 800b152:	4619      	mov	r1, r3
 800b154:	481b      	ldr	r0, [pc, #108]	@ (800b1c4 <shci_user_evt_proc+0x90>)
 800b156:	f000 fcb8 	bl	800baca <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 800b15a:	4b1c      	ldr	r3, [pc, #112]	@ (800b1cc <shci_user_evt_proc+0x98>)
 800b15c:	69db      	ldr	r3, [r3, #28]
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d00c      	beq.n	800b17c <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800b166:	2301      	movs	r3, #1
 800b168:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800b16a:	4b18      	ldr	r3, [pc, #96]	@ (800b1cc <shci_user_evt_proc+0x98>)
 800b16c:	69db      	ldr	r3, [r3, #28]
 800b16e:	1d3a      	adds	r2, r7, #4
 800b170:	4610      	mov	r0, r2
 800b172:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800b174:	793a      	ldrb	r2, [r7, #4]
 800b176:	4b14      	ldr	r3, [pc, #80]	@ (800b1c8 <shci_user_evt_proc+0x94>)
 800b178:	701a      	strb	r2, [r3, #0]
 800b17a:	e002      	b.n	800b182 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800b17c:	4b12      	ldr	r3, [pc, #72]	@ (800b1c8 <shci_user_evt_proc+0x94>)
 800b17e:	2201      	movs	r2, #1
 800b180:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800b182:	4b11      	ldr	r3, [pc, #68]	@ (800b1c8 <shci_user_evt_proc+0x94>)
 800b184:	781b      	ldrb	r3, [r3, #0]
 800b186:	2b00      	cmp	r3, #0
 800b188:	d004      	beq.n	800b194 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	4618      	mov	r0, r3
 800b18e:	f000 fa71 	bl	800b674 <TL_MM_EvtDone>
 800b192:	e004      	b.n	800b19e <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	4619      	mov	r1, r3
 800b198:	480a      	ldr	r0, [pc, #40]	@ (800b1c4 <shci_user_evt_proc+0x90>)
 800b19a:	f000 fc29 	bl	800b9f0 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800b19e:	4809      	ldr	r0, [pc, #36]	@ (800b1c4 <shci_user_evt_proc+0x90>)
 800b1a0:	f000 fc04 	bl	800b9ac <LST_is_empty>
 800b1a4:	4603      	mov	r3, r0
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d107      	bne.n	800b1ba <shci_user_evt_proc+0x86>
 800b1aa:	4b07      	ldr	r3, [pc, #28]	@ (800b1c8 <shci_user_evt_proc+0x94>)
 800b1ac:	781b      	ldrb	r3, [r3, #0]
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d003      	beq.n	800b1ba <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800b1b2:	4804      	ldr	r0, [pc, #16]	@ (800b1c4 <shci_user_evt_proc+0x90>)
 800b1b4:	f7f6 f933 	bl	800141e <shci_notify_asynch_evt>
  }


  return;
 800b1b8:	bf00      	nop
 800b1ba:	bf00      	nop
}
 800b1bc:	3710      	adds	r7, #16
 800b1be:	46bd      	mov	sp, r7
 800b1c0:	bd80      	pop	{r7, pc}
 800b1c2:	bf00      	nop
 800b1c4:	200000b8 	.word	0x200000b8
 800b1c8:	200000c8 	.word	0x200000c8
 800b1cc:	20000478 	.word	0x20000478

0800b1d0 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800b1d0:	b580      	push	{r7, lr}
 800b1d2:	b084      	sub	sp, #16
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	60ba      	str	r2, [r7, #8]
 800b1d8:	607b      	str	r3, [r7, #4]
 800b1da:	4603      	mov	r3, r0
 800b1dc:	81fb      	strh	r3, [r7, #14]
 800b1de:	460b      	mov	r3, r1
 800b1e0:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800b1e2:	2000      	movs	r0, #0
 800b1e4:	f000 f868 	bl	800b2b8 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800b1e8:	4b17      	ldr	r3, [pc, #92]	@ (800b248 <shci_send+0x78>)
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	89fa      	ldrh	r2, [r7, #14]
 800b1ee:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800b1f2:	4b15      	ldr	r3, [pc, #84]	@ (800b248 <shci_send+0x78>)
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	7b7a      	ldrb	r2, [r7, #13]
 800b1f8:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800b1fa:	4b13      	ldr	r3, [pc, #76]	@ (800b248 <shci_send+0x78>)
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	330c      	adds	r3, #12
 800b200:	7b7a      	ldrb	r2, [r7, #13]
 800b202:	68b9      	ldr	r1, [r7, #8]
 800b204:	4618      	mov	r0, r3
 800b206:	f003 fba6 	bl	800e956 <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 800b20a:	4b10      	ldr	r3, [pc, #64]	@ (800b24c <shci_send+0x7c>)
 800b20c:	2201      	movs	r2, #1
 800b20e:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 800b210:	4b0f      	ldr	r3, [pc, #60]	@ (800b250 <shci_send+0x80>)
 800b212:	691b      	ldr	r3, [r3, #16]
 800b214:	2100      	movs	r1, #0
 800b216:	2000      	movs	r0, #0
 800b218:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800b21a:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 800b21e:	f7f6 f915 	bl	800144c <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	f103 0008 	add.w	r0, r3, #8
 800b228:	4b07      	ldr	r3, [pc, #28]	@ (800b248 <shci_send+0x78>)
 800b22a:	6819      	ldr	r1, [r3, #0]
 800b22c:	4b06      	ldr	r3, [pc, #24]	@ (800b248 <shci_send+0x78>)
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	789b      	ldrb	r3, [r3, #2]
 800b232:	3303      	adds	r3, #3
 800b234:	461a      	mov	r2, r3
 800b236:	f003 fb8e 	bl	800e956 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800b23a:	2001      	movs	r0, #1
 800b23c:	f000 f83c 	bl	800b2b8 <Cmd_SetStatus>

  return;
 800b240:	bf00      	nop
}
 800b242:	3710      	adds	r7, #16
 800b244:	46bd      	mov	sp, r7
 800b246:	bd80      	pop	{r7, pc}
 800b248:	200000c4 	.word	0x200000c4
 800b24c:	2000049c 	.word	0x2000049c
 800b250:	20000478 	.word	0x20000478

0800b254 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800b254:	b580      	push	{r7, lr}
 800b256:	b086      	sub	sp, #24
 800b258:	af00      	add	r7, sp, #0
 800b25a:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800b25c:	4a10      	ldr	r2, [pc, #64]	@ (800b2a0 <TlInit+0x4c>)
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800b262:	4810      	ldr	r0, [pc, #64]	@ (800b2a4 <TlInit+0x50>)
 800b264:	f000 fb92 	bl	800b98c <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800b268:	2001      	movs	r0, #1
 800b26a:	f000 f825 	bl	800b2b8 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800b26e:	4b0e      	ldr	r3, [pc, #56]	@ (800b2a8 <TlInit+0x54>)
 800b270:	2201      	movs	r2, #1
 800b272:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800b274:	4b0d      	ldr	r3, [pc, #52]	@ (800b2ac <TlInit+0x58>)
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d00c      	beq.n	800b296 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800b280:	4b0b      	ldr	r3, [pc, #44]	@ (800b2b0 <TlInit+0x5c>)
 800b282:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800b284:	4b0b      	ldr	r3, [pc, #44]	@ (800b2b4 <TlInit+0x60>)
 800b286:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800b288:	4b08      	ldr	r3, [pc, #32]	@ (800b2ac <TlInit+0x58>)
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	f107 020c 	add.w	r2, r7, #12
 800b290:	4610      	mov	r0, r2
 800b292:	4798      	blx	r3
  }

  return;
 800b294:	bf00      	nop
 800b296:	bf00      	nop
}
 800b298:	3718      	adds	r7, #24
 800b29a:	46bd      	mov	sp, r7
 800b29c:	bd80      	pop	{r7, pc}
 800b29e:	bf00      	nop
 800b2a0:	200000c4 	.word	0x200000c4
 800b2a4:	200000b8 	.word	0x200000b8
 800b2a8:	200000c8 	.word	0x200000c8
 800b2ac:	20000478 	.word	0x20000478
 800b2b0:	0800b309 	.word	0x0800b309
 800b2b4:	0800b321 	.word	0x0800b321

0800b2b8 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800b2b8:	b580      	push	{r7, lr}
 800b2ba:	b082      	sub	sp, #8
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	4603      	mov	r3, r0
 800b2c0:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800b2c2:	79fb      	ldrb	r3, [r7, #7]
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d10b      	bne.n	800b2e0 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800b2c8:	4b0d      	ldr	r3, [pc, #52]	@ (800b300 <Cmd_SetStatus+0x48>)
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d003      	beq.n	800b2d8 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800b2d0:	4b0b      	ldr	r3, [pc, #44]	@ (800b300 <Cmd_SetStatus+0x48>)
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	2000      	movs	r0, #0
 800b2d6:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800b2d8:	4b0a      	ldr	r3, [pc, #40]	@ (800b304 <Cmd_SetStatus+0x4c>)
 800b2da:	2200      	movs	r2, #0
 800b2dc:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800b2de:	e00b      	b.n	800b2f8 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800b2e0:	4b08      	ldr	r3, [pc, #32]	@ (800b304 <Cmd_SetStatus+0x4c>)
 800b2e2:	2201      	movs	r2, #1
 800b2e4:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800b2e6:	4b06      	ldr	r3, [pc, #24]	@ (800b300 <Cmd_SetStatus+0x48>)
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d004      	beq.n	800b2f8 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800b2ee:	4b04      	ldr	r3, [pc, #16]	@ (800b300 <Cmd_SetStatus+0x48>)
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	2001      	movs	r0, #1
 800b2f4:	4798      	blx	r3
  return;
 800b2f6:	bf00      	nop
 800b2f8:	bf00      	nop
}
 800b2fa:	3708      	adds	r7, #8
 800b2fc:	46bd      	mov	sp, r7
 800b2fe:	bd80      	pop	{r7, pc}
 800b300:	20000498 	.word	0x20000498
 800b304:	200000c0 	.word	0x200000c0

0800b308 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800b308:	b580      	push	{r7, lr}
 800b30a:	b082      	sub	sp, #8
 800b30c:	af00      	add	r7, sp, #0
 800b30e:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800b310:	2000      	movs	r0, #0
 800b312:	f7f6 f890 	bl	8001436 <shci_cmd_resp_release>

  return;
 800b316:	bf00      	nop
}
 800b318:	3708      	adds	r7, #8
 800b31a:	46bd      	mov	sp, r7
 800b31c:	bd80      	pop	{r7, pc}
	...

0800b320 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800b320:	b580      	push	{r7, lr}
 800b322:	b082      	sub	sp, #8
 800b324:	af00      	add	r7, sp, #0
 800b326:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800b328:	6879      	ldr	r1, [r7, #4]
 800b32a:	4805      	ldr	r0, [pc, #20]	@ (800b340 <TlUserEvtReceived+0x20>)
 800b32c:	f000 fb86 	bl	800ba3c <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800b330:	4803      	ldr	r0, [pc, #12]	@ (800b340 <TlUserEvtReceived+0x20>)
 800b332:	f7f6 f874 	bl	800141e <shci_notify_asynch_evt>

  return;
 800b336:	bf00      	nop
}
 800b338:	3708      	adds	r7, #8
 800b33a:	46bd      	mov	sp, r7
 800b33c:	bd80      	pop	{r7, pc}
 800b33e:	bf00      	nop
 800b340:	200000b8 	.word	0x200000b8

0800b344 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800b344:	b480      	push	{r7}
 800b346:	b083      	sub	sp, #12
 800b348:	af00      	add	r7, sp, #0
 800b34a:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	4a05      	ldr	r2, [pc, #20]	@ (800b364 <shci_register_io_bus+0x20>)
 800b350:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	4a04      	ldr	r2, [pc, #16]	@ (800b368 <shci_register_io_bus+0x24>)
 800b356:	611a      	str	r2, [r3, #16]

  return;
 800b358:	bf00      	nop
}
 800b35a:	370c      	adds	r7, #12
 800b35c:	46bd      	mov	sp, r7
 800b35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b362:	4770      	bx	lr
 800b364:	0800b501 	.word	0x0800b501
 800b368:	0800b555 	.word	0x0800b555

0800b36c <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 800b36c:	b580      	push	{r7, lr}
 800b36e:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800b370:	f002 fd1c 	bl	800ddac <HW_IPCC_Enable>

  return;
 800b374:	bf00      	nop
}
 800b376:	bd80      	pop	{r7, pc}

0800b378 <TL_Init>:


void TL_Init( void )
{
 800b378:	b580      	push	{r7, lr}
 800b37a:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800b37c:	4b10      	ldr	r3, [pc, #64]	@ (800b3c0 <TL_Init+0x48>)
 800b37e:	4a11      	ldr	r2, [pc, #68]	@ (800b3c4 <TL_Init+0x4c>)
 800b380:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800b382:	4b0f      	ldr	r3, [pc, #60]	@ (800b3c0 <TL_Init+0x48>)
 800b384:	4a10      	ldr	r2, [pc, #64]	@ (800b3c8 <TL_Init+0x50>)
 800b386:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800b388:	4b0d      	ldr	r3, [pc, #52]	@ (800b3c0 <TL_Init+0x48>)
 800b38a:	4a10      	ldr	r2, [pc, #64]	@ (800b3cc <TL_Init+0x54>)
 800b38c:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800b38e:	4b0c      	ldr	r3, [pc, #48]	@ (800b3c0 <TL_Init+0x48>)
 800b390:	4a0f      	ldr	r2, [pc, #60]	@ (800b3d0 <TL_Init+0x58>)
 800b392:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 800b394:	4b0a      	ldr	r3, [pc, #40]	@ (800b3c0 <TL_Init+0x48>)
 800b396:	4a0f      	ldr	r2, [pc, #60]	@ (800b3d4 <TL_Init+0x5c>)
 800b398:	625a      	str	r2, [r3, #36]	@ 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800b39a:	4b09      	ldr	r3, [pc, #36]	@ (800b3c0 <TL_Init+0x48>)
 800b39c:	4a0e      	ldr	r2, [pc, #56]	@ (800b3d8 <TL_Init+0x60>)
 800b39e:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800b3a0:	4b07      	ldr	r3, [pc, #28]	@ (800b3c0 <TL_Init+0x48>)
 800b3a2:	4a0e      	ldr	r2, [pc, #56]	@ (800b3dc <TL_Init+0x64>)
 800b3a4:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800b3a6:	4b06      	ldr	r3, [pc, #24]	@ (800b3c0 <TL_Init+0x48>)
 800b3a8:	4a0d      	ldr	r2, [pc, #52]	@ (800b3e0 <TL_Init+0x68>)
 800b3aa:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800b3ac:	4b04      	ldr	r3, [pc, #16]	@ (800b3c0 <TL_Init+0x48>)
 800b3ae:	4a0d      	ldr	r2, [pc, #52]	@ (800b3e4 <TL_Init+0x6c>)
 800b3b0:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800b3b2:	4b03      	ldr	r3, [pc, #12]	@ (800b3c0 <TL_Init+0x48>)
 800b3b4:	4a0c      	ldr	r2, [pc, #48]	@ (800b3e8 <TL_Init+0x70>)
 800b3b6:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800b3b8:	f002 fd0c 	bl	800ddd4 <HW_IPCC_Init>

  return;
 800b3bc:	bf00      	nop
}
 800b3be:	bd80      	pop	{r7, pc}
 800b3c0:	20030000 	.word	0x20030000
 800b3c4:	20030028 	.word	0x20030028
 800b3c8:	20030048 	.word	0x20030048
 800b3cc:	20030058 	.word	0x20030058
 800b3d0:	20030068 	.word	0x20030068
 800b3d4:	20030070 	.word	0x20030070
 800b3d8:	20030078 	.word	0x20030078
 800b3dc:	20030080 	.word	0x20030080
 800b3e0:	2003009c 	.word	0x2003009c
 800b3e4:	200300a0 	.word	0x200300a0
 800b3e8:	200300ac 	.word	0x200300ac

0800b3ec <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 800b3ec:	b580      	push	{r7, lr}
 800b3ee:	b084      	sub	sp, #16
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 800b3f8:	4811      	ldr	r0, [pc, #68]	@ (800b440 <TL_BLE_Init+0x54>)
 800b3fa:	f000 fac7 	bl	800b98c <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800b3fe:	4b11      	ldr	r3, [pc, #68]	@ (800b444 <TL_BLE_Init+0x58>)
 800b400:	685b      	ldr	r3, [r3, #4]
 800b402:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	689a      	ldr	r2, [r3, #8]
 800b408:	68bb      	ldr	r3, [r7, #8]
 800b40a:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	68da      	ldr	r2, [r3, #12]
 800b410:	68bb      	ldr	r3, [r7, #8]
 800b412:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800b414:	68bb      	ldr	r3, [r7, #8]
 800b416:	4a0c      	ldr	r2, [pc, #48]	@ (800b448 <TL_BLE_Init+0x5c>)
 800b418:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800b41a:	68bb      	ldr	r3, [r7, #8]
 800b41c:	4a08      	ldr	r2, [pc, #32]	@ (800b440 <TL_BLE_Init+0x54>)
 800b41e:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 800b420:	f002 fcee 	bl	800de00 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	4a08      	ldr	r2, [pc, #32]	@ (800b44c <TL_BLE_Init+0x60>)
 800b42a:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	685b      	ldr	r3, [r3, #4]
 800b430:	4a07      	ldr	r2, [pc, #28]	@ (800b450 <TL_BLE_Init+0x64>)
 800b432:	6013      	str	r3, [r2, #0]

  return 0;
 800b434:	2300      	movs	r3, #0
}
 800b436:	4618      	mov	r0, r3
 800b438:	3710      	adds	r7, #16
 800b43a:	46bd      	mov	sp, r7
 800b43c:	bd80      	pop	{r7, pc}
 800b43e:	bf00      	nop
 800b440:	200300c8 	.word	0x200300c8
 800b444:	20030000 	.word	0x20030000
 800b448:	20030a58 	.word	0x20030a58
 800b44c:	200004a8 	.word	0x200004a8
 800b450:	200004ac 	.word	0x200004ac

0800b454 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 800b454:	b580      	push	{r7, lr}
 800b456:	b082      	sub	sp, #8
 800b458:	af00      	add	r7, sp, #0
 800b45a:	6078      	str	r0, [r7, #4]
 800b45c:	460b      	mov	r3, r1
 800b45e:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800b460:	4b09      	ldr	r3, [pc, #36]	@ (800b488 <TL_BLE_SendCmd+0x34>)
 800b462:	685b      	ldr	r3, [r3, #4]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	2201      	movs	r2, #1
 800b468:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 800b46a:	4b07      	ldr	r3, [pc, #28]	@ (800b488 <TL_BLE_SendCmd+0x34>)
 800b46c:	685b      	ldr	r3, [r3, #4]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	4619      	mov	r1, r3
 800b472:	2001      	movs	r0, #1
 800b474:	f000 f96c 	bl	800b750 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 800b478:	f002 fccc 	bl	800de14 <HW_IPCC_BLE_SendCmd>

  return 0;
 800b47c:	2300      	movs	r3, #0
}
 800b47e:	4618      	mov	r0, r3
 800b480:	3708      	adds	r7, #8
 800b482:	46bd      	mov	sp, r7
 800b484:	bd80      	pop	{r7, pc}
 800b486:	bf00      	nop
 800b488:	20030000 	.word	0x20030000

0800b48c <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 800b48c:	b580      	push	{r7, lr}
 800b48e:	b082      	sub	sp, #8
 800b490:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800b492:	e01c      	b.n	800b4ce <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800b494:	1d3b      	adds	r3, r7, #4
 800b496:	4619      	mov	r1, r3
 800b498:	4812      	ldr	r0, [pc, #72]	@ (800b4e4 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800b49a:	f000 fb16 	bl	800baca <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	7a5b      	ldrb	r3, [r3, #9]
 800b4a2:	2b0f      	cmp	r3, #15
 800b4a4:	d003      	beq.n	800b4ae <HW_IPCC_BLE_RxEvtNot+0x22>
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	7a5b      	ldrb	r3, [r3, #9]
 800b4aa:	2b0e      	cmp	r3, #14
 800b4ac:	d105      	bne.n	800b4ba <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	4619      	mov	r1, r3
 800b4b2:	2002      	movs	r0, #2
 800b4b4:	f000 f94c 	bl	800b750 <OutputDbgTrace>
 800b4b8:	e004      	b.n	800b4c4 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	4619      	mov	r1, r3
 800b4be:	2003      	movs	r0, #3
 800b4c0:	f000 f946 	bl	800b750 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 800b4c4:	4b08      	ldr	r3, [pc, #32]	@ (800b4e8 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	687a      	ldr	r2, [r7, #4]
 800b4ca:	4610      	mov	r0, r2
 800b4cc:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800b4ce:	4805      	ldr	r0, [pc, #20]	@ (800b4e4 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800b4d0:	f000 fa6c 	bl	800b9ac <LST_is_empty>
 800b4d4:	4603      	mov	r3, r0
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d0dc      	beq.n	800b494 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800b4da:	bf00      	nop
}
 800b4dc:	3708      	adds	r7, #8
 800b4de:	46bd      	mov	sp, r7
 800b4e0:	bd80      	pop	{r7, pc}
 800b4e2:	bf00      	nop
 800b4e4:	200300c8 	.word	0x200300c8
 800b4e8:	200004a8 	.word	0x200004a8

0800b4ec <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800b4ec:	b580      	push	{r7, lr}
 800b4ee:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800b4f0:	4b02      	ldr	r3, [pc, #8]	@ (800b4fc <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	4798      	blx	r3

  return;
 800b4f6:	bf00      	nop
}
 800b4f8:	bd80      	pop	{r7, pc}
 800b4fa:	bf00      	nop
 800b4fc:	200004ac 	.word	0x200004ac

0800b500 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800b500:	b580      	push	{r7, lr}
 800b502:	b084      	sub	sp, #16
 800b504:	af00      	add	r7, sp, #0
 800b506:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800b50c:	480d      	ldr	r0, [pc, #52]	@ (800b544 <TL_SYS_Init+0x44>)
 800b50e:	f000 fa3d 	bl	800b98c <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800b512:	4b0d      	ldr	r3, [pc, #52]	@ (800b548 <TL_SYS_Init+0x48>)
 800b514:	68db      	ldr	r3, [r3, #12]
 800b516:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	689a      	ldr	r2, [r3, #8]
 800b51c:	68bb      	ldr	r3, [r7, #8]
 800b51e:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800b520:	68bb      	ldr	r3, [r7, #8]
 800b522:	4a08      	ldr	r2, [pc, #32]	@ (800b544 <TL_SYS_Init+0x44>)
 800b524:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800b526:	f002 fc97 	bl	800de58 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	4a07      	ldr	r2, [pc, #28]	@ (800b54c <TL_SYS_Init+0x4c>)
 800b530:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	685b      	ldr	r3, [r3, #4]
 800b536:	4a06      	ldr	r2, [pc, #24]	@ (800b550 <TL_SYS_Init+0x50>)
 800b538:	6013      	str	r3, [r2, #0]

  return 0;
 800b53a:	2300      	movs	r3, #0
}
 800b53c:	4618      	mov	r0, r3
 800b53e:	3710      	adds	r7, #16
 800b540:	46bd      	mov	sp, r7
 800b542:	bd80      	pop	{r7, pc}
 800b544:	200300d0 	.word	0x200300d0
 800b548:	20030000 	.word	0x20030000
 800b54c:	200004b0 	.word	0x200004b0
 800b550:	200004b4 	.word	0x200004b4

0800b554 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800b554:	b580      	push	{r7, lr}
 800b556:	b082      	sub	sp, #8
 800b558:	af00      	add	r7, sp, #0
 800b55a:	6078      	str	r0, [r7, #4]
 800b55c:	460b      	mov	r3, r1
 800b55e:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800b560:	4b09      	ldr	r3, [pc, #36]	@ (800b588 <TL_SYS_SendCmd+0x34>)
 800b562:	68db      	ldr	r3, [r3, #12]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	2210      	movs	r2, #16
 800b568:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800b56a:	4b07      	ldr	r3, [pc, #28]	@ (800b588 <TL_SYS_SendCmd+0x34>)
 800b56c:	68db      	ldr	r3, [r3, #12]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	4619      	mov	r1, r3
 800b572:	2004      	movs	r0, #4
 800b574:	f000 f8ec 	bl	800b750 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 800b578:	f002 fc78 	bl	800de6c <HW_IPCC_SYS_SendCmd>

  return 0;
 800b57c:	2300      	movs	r3, #0
}
 800b57e:	4618      	mov	r0, r3
 800b580:	3708      	adds	r7, #8
 800b582:	46bd      	mov	sp, r7
 800b584:	bd80      	pop	{r7, pc}
 800b586:	bf00      	nop
 800b588:	20030000 	.word	0x20030000

0800b58c <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800b58c:	b580      	push	{r7, lr}
 800b58e:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800b590:	4b07      	ldr	r3, [pc, #28]	@ (800b5b0 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800b592:	68db      	ldr	r3, [r3, #12]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	4619      	mov	r1, r3
 800b598:	2005      	movs	r0, #5
 800b59a:	f000 f8d9 	bl	800b750 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800b59e:	4b05      	ldr	r3, [pc, #20]	@ (800b5b4 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	4a03      	ldr	r2, [pc, #12]	@ (800b5b0 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800b5a4:	68d2      	ldr	r2, [r2, #12]
 800b5a6:	6812      	ldr	r2, [r2, #0]
 800b5a8:	4610      	mov	r0, r2
 800b5aa:	4798      	blx	r3

  return;
 800b5ac:	bf00      	nop
}
 800b5ae:	bd80      	pop	{r7, pc}
 800b5b0:	20030000 	.word	0x20030000
 800b5b4:	200004b0 	.word	0x200004b0

0800b5b8 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800b5b8:	b580      	push	{r7, lr}
 800b5ba:	b082      	sub	sp, #8
 800b5bc:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800b5be:	e00e      	b.n	800b5de <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800b5c0:	1d3b      	adds	r3, r7, #4
 800b5c2:	4619      	mov	r1, r3
 800b5c4:	480b      	ldr	r0, [pc, #44]	@ (800b5f4 <HW_IPCC_SYS_EvtNot+0x3c>)
 800b5c6:	f000 fa80 	bl	800baca <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	4619      	mov	r1, r3
 800b5ce:	2006      	movs	r0, #6
 800b5d0:	f000 f8be 	bl	800b750 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 800b5d4:	4b08      	ldr	r3, [pc, #32]	@ (800b5f8 <HW_IPCC_SYS_EvtNot+0x40>)
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	687a      	ldr	r2, [r7, #4]
 800b5da:	4610      	mov	r0, r2
 800b5dc:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800b5de:	4805      	ldr	r0, [pc, #20]	@ (800b5f4 <HW_IPCC_SYS_EvtNot+0x3c>)
 800b5e0:	f000 f9e4 	bl	800b9ac <LST_is_empty>
 800b5e4:	4603      	mov	r3, r0
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d0ea      	beq.n	800b5c0 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800b5ea:	bf00      	nop
}
 800b5ec:	3708      	adds	r7, #8
 800b5ee:	46bd      	mov	sp, r7
 800b5f0:	bd80      	pop	{r7, pc}
 800b5f2:	bf00      	nop
 800b5f4:	200300d0 	.word	0x200300d0
 800b5f8:	200004b4 	.word	0x200004b4

0800b5fc <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800b5fc:	b580      	push	{r7, lr}
 800b5fe:	b082      	sub	sp, #8
 800b600:	af00      	add	r7, sp, #0
 800b602:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800b604:	4817      	ldr	r0, [pc, #92]	@ (800b664 <TL_MM_Init+0x68>)
 800b606:	f000 f9c1 	bl	800b98c <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800b60a:	4817      	ldr	r0, [pc, #92]	@ (800b668 <TL_MM_Init+0x6c>)
 800b60c:	f000 f9be 	bl	800b98c <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800b610:	4b16      	ldr	r3, [pc, #88]	@ (800b66c <TL_MM_Init+0x70>)
 800b612:	691b      	ldr	r3, [r3, #16]
 800b614:	4a16      	ldr	r2, [pc, #88]	@ (800b670 <TL_MM_Init+0x74>)
 800b616:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800b618:	4b15      	ldr	r3, [pc, #84]	@ (800b670 <TL_MM_Init+0x74>)
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	687a      	ldr	r2, [r7, #4]
 800b61e:	6892      	ldr	r2, [r2, #8]
 800b620:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800b622:	4b13      	ldr	r3, [pc, #76]	@ (800b670 <TL_MM_Init+0x74>)
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	687a      	ldr	r2, [r7, #4]
 800b628:	68d2      	ldr	r2, [r2, #12]
 800b62a:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800b62c:	4b10      	ldr	r3, [pc, #64]	@ (800b670 <TL_MM_Init+0x74>)
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	4a0c      	ldr	r2, [pc, #48]	@ (800b664 <TL_MM_Init+0x68>)
 800b632:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800b634:	4b0e      	ldr	r3, [pc, #56]	@ (800b670 <TL_MM_Init+0x74>)
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	687a      	ldr	r2, [r7, #4]
 800b63a:	6812      	ldr	r2, [r2, #0]
 800b63c:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800b63e:	4b0c      	ldr	r3, [pc, #48]	@ (800b670 <TL_MM_Init+0x74>)
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	687a      	ldr	r2, [r7, #4]
 800b644:	6852      	ldr	r2, [r2, #4]
 800b646:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800b648:	4b09      	ldr	r3, [pc, #36]	@ (800b670 <TL_MM_Init+0x74>)
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	687a      	ldr	r2, [r7, #4]
 800b64e:	6912      	ldr	r2, [r2, #16]
 800b650:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800b652:	4b07      	ldr	r3, [pc, #28]	@ (800b670 <TL_MM_Init+0x74>)
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	687a      	ldr	r2, [r7, #4]
 800b658:	6952      	ldr	r2, [r2, #20]
 800b65a:	619a      	str	r2, [r3, #24]

  return;
 800b65c:	bf00      	nop
}
 800b65e:	3708      	adds	r7, #8
 800b660:	46bd      	mov	sp, r7
 800b662:	bd80      	pop	{r7, pc}
 800b664:	200300b8 	.word	0x200300b8
 800b668:	200004a0 	.word	0x200004a0
 800b66c:	20030000 	.word	0x20030000
 800b670:	200004b8 	.word	0x200004b8

0800b674 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800b674:	b580      	push	{r7, lr}
 800b676:	b082      	sub	sp, #8
 800b678:	af00      	add	r7, sp, #0
 800b67a:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800b67c:	6879      	ldr	r1, [r7, #4]
 800b67e:	4807      	ldr	r0, [pc, #28]	@ (800b69c <TL_MM_EvtDone+0x28>)
 800b680:	f000 f9dc 	bl	800ba3c <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800b684:	6879      	ldr	r1, [r7, #4]
 800b686:	2000      	movs	r0, #0
 800b688:	f000 f862 	bl	800b750 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800b68c:	4804      	ldr	r0, [pc, #16]	@ (800b6a0 <TL_MM_EvtDone+0x2c>)
 800b68e:	f002 fc13 	bl	800deb8 <HW_IPCC_MM_SendFreeBuf>

  return;
 800b692:	bf00      	nop
}
 800b694:	3708      	adds	r7, #8
 800b696:	46bd      	mov	sp, r7
 800b698:	bd80      	pop	{r7, pc}
 800b69a:	bf00      	nop
 800b69c:	200004a0 	.word	0x200004a0
 800b6a0:	0800b6a5 	.word	0x0800b6a5

0800b6a4 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800b6a4:	b580      	push	{r7, lr}
 800b6a6:	b082      	sub	sp, #8
 800b6a8:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800b6aa:	e00c      	b.n	800b6c6 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800b6ac:	1d3b      	adds	r3, r7, #4
 800b6ae:	4619      	mov	r1, r3
 800b6b0:	480a      	ldr	r0, [pc, #40]	@ (800b6dc <SendFreeBuf+0x38>)
 800b6b2:	f000 fa0a 	bl	800baca <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800b6b6:	4b0a      	ldr	r3, [pc, #40]	@ (800b6e0 <SendFreeBuf+0x3c>)
 800b6b8:	691b      	ldr	r3, [r3, #16]
 800b6ba:	691b      	ldr	r3, [r3, #16]
 800b6bc:	687a      	ldr	r2, [r7, #4]
 800b6be:	4611      	mov	r1, r2
 800b6c0:	4618      	mov	r0, r3
 800b6c2:	f000 f9bb 	bl	800ba3c <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800b6c6:	4805      	ldr	r0, [pc, #20]	@ (800b6dc <SendFreeBuf+0x38>)
 800b6c8:	f000 f970 	bl	800b9ac <LST_is_empty>
 800b6cc:	4603      	mov	r3, r0
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d0ec      	beq.n	800b6ac <SendFreeBuf+0x8>
  }

  return;
 800b6d2:	bf00      	nop
}
 800b6d4:	3708      	adds	r7, #8
 800b6d6:	46bd      	mov	sp, r7
 800b6d8:	bd80      	pop	{r7, pc}
 800b6da:	bf00      	nop
 800b6dc:	200004a0 	.word	0x200004a0
 800b6e0:	20030000 	.word	0x20030000

0800b6e4 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800b6e4:	b580      	push	{r7, lr}
 800b6e6:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800b6e8:	4805      	ldr	r0, [pc, #20]	@ (800b700 <TL_TRACES_Init+0x1c>)
 800b6ea:	f000 f94f 	bl	800b98c <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800b6ee:	4b05      	ldr	r3, [pc, #20]	@ (800b704 <TL_TRACES_Init+0x20>)
 800b6f0:	695b      	ldr	r3, [r3, #20]
 800b6f2:	4a03      	ldr	r2, [pc, #12]	@ (800b700 <TL_TRACES_Init+0x1c>)
 800b6f4:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800b6f6:	f002 fc15 	bl	800df24 <HW_IPCC_TRACES_Init>

  return;
 800b6fa:	bf00      	nop
}
 800b6fc:	bd80      	pop	{r7, pc}
 800b6fe:	bf00      	nop
 800b700:	200300c0 	.word	0x200300c0
 800b704:	20030000 	.word	0x20030000

0800b708 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800b708:	b580      	push	{r7, lr}
 800b70a:	b082      	sub	sp, #8
 800b70c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800b70e:	e008      	b.n	800b722 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800b710:	1d3b      	adds	r3, r7, #4
 800b712:	4619      	mov	r1, r3
 800b714:	4808      	ldr	r0, [pc, #32]	@ (800b738 <HW_IPCC_TRACES_EvtNot+0x30>)
 800b716:	f000 f9d8 	bl	800baca <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	4618      	mov	r0, r3
 800b71e:	f000 f80d 	bl	800b73c <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800b722:	4805      	ldr	r0, [pc, #20]	@ (800b738 <HW_IPCC_TRACES_EvtNot+0x30>)
 800b724:	f000 f942 	bl	800b9ac <LST_is_empty>
 800b728:	4603      	mov	r3, r0
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d0f0      	beq.n	800b710 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800b72e:	bf00      	nop
}
 800b730:	3708      	adds	r7, #8
 800b732:	46bd      	mov	sp, r7
 800b734:	bd80      	pop	{r7, pc}
 800b736:	bf00      	nop
 800b738:	200300c0 	.word	0x200300c0

0800b73c <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 800b73c:	b480      	push	{r7}
 800b73e:	b083      	sub	sp, #12
 800b740:	af00      	add	r7, sp, #0
 800b742:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 800b744:	bf00      	nop
 800b746:	370c      	adds	r7, #12
 800b748:	46bd      	mov	sp, r7
 800b74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b74e:	4770      	bx	lr

0800b750 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800b750:	b480      	push	{r7}
 800b752:	b085      	sub	sp, #20
 800b754:	af00      	add	r7, sp, #0
 800b756:	4603      	mov	r3, r0
 800b758:	6039      	str	r1, [r7, #0]
 800b75a:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 800b75c:	79fb      	ldrb	r3, [r7, #7]
 800b75e:	2b06      	cmp	r3, #6
 800b760:	d845      	bhi.n	800b7ee <OutputDbgTrace+0x9e>
 800b762:	a201      	add	r2, pc, #4	@ (adr r2, 800b768 <OutputDbgTrace+0x18>)
 800b764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b768:	0800b785 	.word	0x0800b785
 800b76c:	0800b7a9 	.word	0x0800b7a9
 800b770:	0800b7af 	.word	0x0800b7af
 800b774:	0800b7c3 	.word	0x0800b7c3
 800b778:	0800b7cf 	.word	0x0800b7cf
 800b77c:	0800b7d5 	.word	0x0800b7d5
 800b780:	0800b7e3 	.word	0x0800b7e3
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800b784:	683b      	ldr	r3, [r7, #0]
 800b786:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	7a5b      	ldrb	r3, [r3, #9]
 800b78c:	2bff      	cmp	r3, #255	@ 0xff
 800b78e:	d005      	beq.n	800b79c <OutputDbgTrace+0x4c>
 800b790:	2bff      	cmp	r3, #255	@ 0xff
 800b792:	dc05      	bgt.n	800b7a0 <OutputDbgTrace+0x50>
 800b794:	2b0e      	cmp	r3, #14
 800b796:	d005      	beq.n	800b7a4 <OutputDbgTrace+0x54>
 800b798:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800b79a:	e001      	b.n	800b7a0 <OutputDbgTrace+0x50>
          break;
 800b79c:	bf00      	nop
 800b79e:	e027      	b.n	800b7f0 <OutputDbgTrace+0xa0>
          break;
 800b7a0:	bf00      	nop
 800b7a2:	e025      	b.n	800b7f0 <OutputDbgTrace+0xa0>
          break;
 800b7a4:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800b7a6:	e023      	b.n	800b7f0 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800b7a8:	683b      	ldr	r3, [r7, #0]
 800b7aa:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800b7ac:	e020      	b.n	800b7f0 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800b7ae:	683b      	ldr	r3, [r7, #0]
 800b7b0:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	7a5b      	ldrb	r3, [r3, #9]
 800b7b6:	2b0e      	cmp	r3, #14
 800b7b8:	d001      	beq.n	800b7be <OutputDbgTrace+0x6e>
 800b7ba:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800b7bc:	e000      	b.n	800b7c0 <OutputDbgTrace+0x70>
          break;
 800b7be:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800b7c0:	e016      	b.n	800b7f0 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800b7c2:	683b      	ldr	r3, [r7, #0]
 800b7c4:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	7a5b      	ldrb	r3, [r3, #9]
 800b7ca:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800b7cc:	e010      	b.n	800b7f0 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800b7ce:	683b      	ldr	r3, [r7, #0]
 800b7d0:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800b7d2:	e00d      	b.n	800b7f0 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800b7d4:	683b      	ldr	r3, [r7, #0]
 800b7d6:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	7a5b      	ldrb	r3, [r3, #9]
 800b7dc:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800b7de:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800b7e0:	e006      	b.n	800b7f0 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800b7e2:	683b      	ldr	r3, [r7, #0]
 800b7e4:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	7a5b      	ldrb	r3, [r3, #9]
 800b7ea:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800b7ec:	e000      	b.n	800b7f0 <OutputDbgTrace+0xa0>

    default:
      break;
 800b7ee:	bf00      	nop
  }

  return;
 800b7f0:	bf00      	nop
}
 800b7f2:	3714      	adds	r7, #20
 800b7f4:	46bd      	mov	sp, r7
 800b7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7fa:	4770      	bx	lr

0800b7fc <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 800b7fc:	b580      	push	{r7, lr}
 800b7fe:	b086      	sub	sp, #24
 800b800:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b802:	f3ef 8310 	mrs	r3, PRIMASK
 800b806:	60fb      	str	r3, [r7, #12]
  return(result);
 800b808:	68fb      	ldr	r3, [r7, #12]
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  uint8_t* buf;
  uint16_t bufSize;

  BACKUP_PRIMASK();
 800b80a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b80c:	b672      	cpsid	i
}
 800b80e:	bf00      	nop

  DISABLE_IRQ();			/**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  CircularQueue_Remove(&MsgDbgTraceQueue,&bufSize);
 800b810:	1cbb      	adds	r3, r7, #2
 800b812:	4619      	mov	r1, r3
 800b814:	4812      	ldr	r0, [pc, #72]	@ (800b860 <DbgTrace_TxCpltCallback+0x64>)
 800b816:	f000 fb9d 	bl	800bf54 <CircularQueue_Remove>

  /* Sense if new data to be sent */
  buf=CircularQueue_Sense(&MsgDbgTraceQueue,&bufSize);
 800b81a:	1cbb      	adds	r3, r7, #2
 800b81c:	4619      	mov	r1, r3
 800b81e:	4810      	ldr	r0, [pc, #64]	@ (800b860 <DbgTrace_TxCpltCallback+0x64>)
 800b820:	f000 fc87 	bl	800c132 <CircularQueue_Sense>
 800b824:	6138      	str	r0, [r7, #16]


  if ( buf != NULL) 
 800b826:	693b      	ldr	r3, [r7, #16]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d00c      	beq.n	800b846 <DbgTrace_TxCpltCallback+0x4a>
 800b82c:	697b      	ldr	r3, [r7, #20]
 800b82e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b830:	68bb      	ldr	r3, [r7, #8]
 800b832:	f383 8810 	msr	PRIMASK, r3
}
 800b836:	bf00      	nop
  {
    RESTORE_PRIMASK();
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 800b838:	887b      	ldrh	r3, [r7, #2]
 800b83a:	4a0a      	ldr	r2, [pc, #40]	@ (800b864 <DbgTrace_TxCpltCallback+0x68>)
 800b83c:	4619      	mov	r1, r3
 800b83e:	6938      	ldr	r0, [r7, #16]
 800b840:	f7f5 fb1a 	bl	8000e78 <DbgOutputTraces>

  DbgTracePeripheralReady = SET;

  RESTORE_PRIMASK();
#endif
}
 800b844:	e008      	b.n	800b858 <DbgTrace_TxCpltCallback+0x5c>
    DbgTracePeripheralReady = SET;
 800b846:	4b08      	ldr	r3, [pc, #32]	@ (800b868 <DbgTrace_TxCpltCallback+0x6c>)
 800b848:	2201      	movs	r2, #1
 800b84a:	701a      	strb	r2, [r3, #0]
 800b84c:	697b      	ldr	r3, [r7, #20]
 800b84e:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	f383 8810 	msr	PRIMASK, r3
}
 800b856:	bf00      	nop
}
 800b858:	bf00      	nop
 800b85a:	3718      	adds	r7, #24
 800b85c:	46bd      	mov	sp, r7
 800b85e:	bd80      	pop	{r7, pc}
 800b860:	200004bc 	.word	0x200004bc
 800b864:	0800b7fd 	.word	0x0800b7fd
 800b868:	20000011 	.word	0x20000011

0800b86c <_write>:
 * @param	bufsize buffer size
 * @param	...: arguments to be formatted in format string
 * @retval none
 */
size_t _write(int handle, const unsigned char * buf, size_t bufSize)
{
 800b86c:	b580      	push	{r7, lr}
 800b86e:	b084      	sub	sp, #16
 800b870:	af00      	add	r7, sp, #0
 800b872:	60f8      	str	r0, [r7, #12]
 800b874:	60b9      	str	r1, [r7, #8]
 800b876:	607a      	str	r2, [r7, #4]
  return ( DbgTraceWrite(handle, buf, bufSize) );
 800b878:	687a      	ldr	r2, [r7, #4]
 800b87a:	68b9      	ldr	r1, [r7, #8]
 800b87c:	68f8      	ldr	r0, [r7, #12]
 800b87e:	f000 f805 	bl	800b88c <DbgTraceWrite>
 800b882:	4603      	mov	r3, r0
}
 800b884:	4618      	mov	r0, r3
 800b886:	3710      	adds	r7, #16
 800b888:	46bd      	mov	sp, r7
 800b88a:	bd80      	pop	{r7, pc}

0800b88c <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 800b88c:	b580      	push	{r7, lr}
 800b88e:	b08a      	sub	sp, #40	@ 0x28
 800b890:	af00      	add	r7, sp, #0
 800b892:	60f8      	str	r0, [r7, #12]
 800b894:	60b9      	str	r1, [r7, #8]
 800b896:	607a      	str	r2, [r7, #4]
  size_t chars_written = 0;
 800b898:	2300      	movs	r3, #0
 800b89a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b89c:	f3ef 8310 	mrs	r3, PRIMASK
 800b8a0:	61bb      	str	r3, [r7, #24]
  return(result);
 800b8a2:	69bb      	ldr	r3, [r7, #24]
  uint8_t* buffer;

  BACKUP_PRIMASK();
 800b8a4:	623b      	str	r3, [r7, #32]

  /* Ignore flushes */
  if ( handle == -1 )
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8ac:	d102      	bne.n	800b8b4 <DbgTraceWrite+0x28>
  {
    chars_written = ( size_t ) 0;
 800b8ae:	2300      	movs	r3, #0
 800b8b0:	627b      	str	r3, [r7, #36]	@ 0x24
 800b8b2:	e037      	b.n	800b924 <DbgTraceWrite+0x98>
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	2b01      	cmp	r3, #1
 800b8b8:	d006      	beq.n	800b8c8 <DbgTraceWrite+0x3c>
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	2b02      	cmp	r3, #2
 800b8be:	d003      	beq.n	800b8c8 <DbgTraceWrite+0x3c>
  {
    chars_written = ( size_t ) - 1;
 800b8c0:	f04f 33ff 	mov.w	r3, #4294967295
 800b8c4:	627b      	str	r3, [r7, #36]	@ 0x24
 800b8c6:	e02d      	b.n	800b924 <DbgTraceWrite+0x98>
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d02a      	beq.n	800b924 <DbgTraceWrite+0x98>
  {
    chars_written = bufSize;
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 800b8d2:	b672      	cpsid	i
}
 800b8d4:	bf00      	nop
    /* If queue emepty and TX free, send directly */
    /* CS Start */

#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
    DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
    buffer=CircularQueue_Add(&MsgDbgTraceQueue,(uint8_t*)buf, bufSize,1);
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	b29a      	uxth	r2, r3
 800b8da:	2301      	movs	r3, #1
 800b8dc:	68b9      	ldr	r1, [r7, #8]
 800b8de:	4814      	ldr	r0, [pc, #80]	@ (800b930 <DbgTraceWrite+0xa4>)
 800b8e0:	f000 f912 	bl	800bb08 <CircularQueue_Add>
 800b8e4:	61f8      	str	r0, [r7, #28]
    if (buffer && DbgTracePeripheralReady)
 800b8e6:	69fb      	ldr	r3, [r7, #28]
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d015      	beq.n	800b918 <DbgTraceWrite+0x8c>
 800b8ec:	4b11      	ldr	r3, [pc, #68]	@ (800b934 <DbgTraceWrite+0xa8>)
 800b8ee:	781b      	ldrb	r3, [r3, #0]
 800b8f0:	b2db      	uxtb	r3, r3
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d010      	beq.n	800b918 <DbgTraceWrite+0x8c>
    {
      DbgTracePeripheralReady = RESET;
 800b8f6:	4b0f      	ldr	r3, [pc, #60]	@ (800b934 <DbgTraceWrite+0xa8>)
 800b8f8:	2200      	movs	r2, #0
 800b8fa:	701a      	strb	r2, [r3, #0]
 800b8fc:	6a3b      	ldr	r3, [r7, #32]
 800b8fe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b900:	697b      	ldr	r3, [r7, #20]
 800b902:	f383 8810 	msr	PRIMASK, r3
}
 800b906:	bf00      	nop
      RESTORE_PRIMASK();
      DbgOutputTraces((uint8_t*)buffer, bufSize, DbgTrace_TxCpltCallback);
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	b29b      	uxth	r3, r3
 800b90c:	4a0a      	ldr	r2, [pc, #40]	@ (800b938 <DbgTraceWrite+0xac>)
 800b90e:	4619      	mov	r1, r3
 800b910:	69f8      	ldr	r0, [r7, #28]
 800b912:	f7f5 fab1 	bl	8000e78 <DbgOutputTraces>
 800b916:	e005      	b.n	800b924 <DbgTraceWrite+0x98>
 800b918:	6a3b      	ldr	r3, [r7, #32]
 800b91a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b91c:	693b      	ldr	r3, [r7, #16]
 800b91e:	f383 8810 	msr	PRIMASK, r3
}
 800b922:	bf00      	nop
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
    while (!DbgTracePeripheralReady);
#endif
    /* CS END */
  }
  return ( chars_written );
 800b924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b926:	4618      	mov	r0, r3
 800b928:	3728      	adds	r7, #40	@ 0x28
 800b92a:	46bd      	mov	sp, r7
 800b92c:	bd80      	pop	{r7, pc}
 800b92e:	bf00      	nop
 800b930:	200004bc 	.word	0x200004bc
 800b934:	20000011 	.word	0x20000011
 800b938:	0800b7fd 	.word	0x0800b7fd

0800b93c <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800b93c:	b480      	push	{r7}
 800b93e:	b085      	sub	sp, #20
 800b940:	af00      	add	r7, sp, #0
 800b942:	4603      	mov	r3, r0
 800b944:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800b946:	4b0f      	ldr	r3, [pc, #60]	@ (800b984 <OTP_Read+0x48>)
 800b948:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800b94a:	e002      	b.n	800b952 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	3b08      	subs	r3, #8
 800b950:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	3307      	adds	r3, #7
 800b956:	781b      	ldrb	r3, [r3, #0]
 800b958:	79fa      	ldrb	r2, [r7, #7]
 800b95a:	429a      	cmp	r2, r3
 800b95c:	d003      	beq.n	800b966 <OTP_Read+0x2a>
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	4a09      	ldr	r2, [pc, #36]	@ (800b988 <OTP_Read+0x4c>)
 800b962:	4293      	cmp	r3, r2
 800b964:	d1f2      	bne.n	800b94c <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	3307      	adds	r3, #7
 800b96a:	781b      	ldrb	r3, [r3, #0]
 800b96c:	79fa      	ldrb	r2, [r7, #7]
 800b96e:	429a      	cmp	r2, r3
 800b970:	d001      	beq.n	800b976 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800b972:	2300      	movs	r3, #0
 800b974:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800b976:	68fb      	ldr	r3, [r7, #12]
}
 800b978:	4618      	mov	r0, r3
 800b97a:	3714      	adds	r7, #20
 800b97c:	46bd      	mov	sp, r7
 800b97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b982:	4770      	bx	lr
 800b984:	1fff73f8 	.word	0x1fff73f8
 800b988:	1fff7000 	.word	0x1fff7000

0800b98c <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800b98c:	b480      	push	{r7}
 800b98e:	b083      	sub	sp, #12
 800b990:	af00      	add	r7, sp, #0
 800b992:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	687a      	ldr	r2, [r7, #4]
 800b998:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	687a      	ldr	r2, [r7, #4]
 800b99e:	605a      	str	r2, [r3, #4]
}
 800b9a0:	bf00      	nop
 800b9a2:	370c      	adds	r7, #12
 800b9a4:	46bd      	mov	sp, r7
 800b9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9aa:	4770      	bx	lr

0800b9ac <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800b9ac:	b480      	push	{r7}
 800b9ae:	b087      	sub	sp, #28
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b9b4:	f3ef 8310 	mrs	r3, PRIMASK
 800b9b8:	60fb      	str	r3, [r7, #12]
  return(result);
 800b9ba:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b9bc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800b9be:	b672      	cpsid	i
}
 800b9c0:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	687a      	ldr	r2, [r7, #4]
 800b9c8:	429a      	cmp	r2, r3
 800b9ca:	d102      	bne.n	800b9d2 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 800b9cc:	2301      	movs	r3, #1
 800b9ce:	75fb      	strb	r3, [r7, #23]
 800b9d0:	e001      	b.n	800b9d6 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 800b9d2:	2300      	movs	r3, #0
 800b9d4:	75fb      	strb	r3, [r7, #23]
 800b9d6:	693b      	ldr	r3, [r7, #16]
 800b9d8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b9da:	68bb      	ldr	r3, [r7, #8]
 800b9dc:	f383 8810 	msr	PRIMASK, r3
}
 800b9e0:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800b9e2:	7dfb      	ldrb	r3, [r7, #23]
}
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	371c      	adds	r7, #28
 800b9e8:	46bd      	mov	sp, r7
 800b9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ee:	4770      	bx	lr

0800b9f0 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800b9f0:	b480      	push	{r7}
 800b9f2:	b087      	sub	sp, #28
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	6078      	str	r0, [r7, #4]
 800b9f8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b9fa:	f3ef 8310 	mrs	r3, PRIMASK
 800b9fe:	60fb      	str	r3, [r7, #12]
  return(result);
 800ba00:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800ba02:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ba04:	b672      	cpsid	i
}
 800ba06:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	681a      	ldr	r2, [r3, #0]
 800ba0c:	683b      	ldr	r3, [r7, #0]
 800ba0e:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800ba10:	683b      	ldr	r3, [r7, #0]
 800ba12:	687a      	ldr	r2, [r7, #4]
 800ba14:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	683a      	ldr	r2, [r7, #0]
 800ba1a:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800ba1c:	683b      	ldr	r3, [r7, #0]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	683a      	ldr	r2, [r7, #0]
 800ba22:	605a      	str	r2, [r3, #4]
 800ba24:	697b      	ldr	r3, [r7, #20]
 800ba26:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ba28:	693b      	ldr	r3, [r7, #16]
 800ba2a:	f383 8810 	msr	PRIMASK, r3
}
 800ba2e:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800ba30:	bf00      	nop
 800ba32:	371c      	adds	r7, #28
 800ba34:	46bd      	mov	sp, r7
 800ba36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba3a:	4770      	bx	lr

0800ba3c <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800ba3c:	b480      	push	{r7}
 800ba3e:	b087      	sub	sp, #28
 800ba40:	af00      	add	r7, sp, #0
 800ba42:	6078      	str	r0, [r7, #4]
 800ba44:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ba46:	f3ef 8310 	mrs	r3, PRIMASK
 800ba4a:	60fb      	str	r3, [r7, #12]
  return(result);
 800ba4c:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800ba4e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ba50:	b672      	cpsid	i
}
 800ba52:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800ba54:	683b      	ldr	r3, [r7, #0]
 800ba56:	687a      	ldr	r2, [r7, #4]
 800ba58:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	685a      	ldr	r2, [r3, #4]
 800ba5e:	683b      	ldr	r3, [r7, #0]
 800ba60:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	683a      	ldr	r2, [r7, #0]
 800ba66:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800ba68:	683b      	ldr	r3, [r7, #0]
 800ba6a:	685b      	ldr	r3, [r3, #4]
 800ba6c:	683a      	ldr	r2, [r7, #0]
 800ba6e:	601a      	str	r2, [r3, #0]
 800ba70:	697b      	ldr	r3, [r7, #20]
 800ba72:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ba74:	693b      	ldr	r3, [r7, #16]
 800ba76:	f383 8810 	msr	PRIMASK, r3
}
 800ba7a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800ba7c:	bf00      	nop
 800ba7e:	371c      	adds	r7, #28
 800ba80:	46bd      	mov	sp, r7
 800ba82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba86:	4770      	bx	lr

0800ba88 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800ba88:	b480      	push	{r7}
 800ba8a:	b087      	sub	sp, #28
 800ba8c:	af00      	add	r7, sp, #0
 800ba8e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ba90:	f3ef 8310 	mrs	r3, PRIMASK
 800ba94:	60fb      	str	r3, [r7, #12]
  return(result);
 800ba96:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800ba98:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ba9a:	b672      	cpsid	i
}
 800ba9c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	685b      	ldr	r3, [r3, #4]
 800baa2:	687a      	ldr	r2, [r7, #4]
 800baa4:	6812      	ldr	r2, [r2, #0]
 800baa6:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	687a      	ldr	r2, [r7, #4]
 800baae:	6852      	ldr	r2, [r2, #4]
 800bab0:	605a      	str	r2, [r3, #4]
 800bab2:	697b      	ldr	r3, [r7, #20]
 800bab4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bab6:	693b      	ldr	r3, [r7, #16]
 800bab8:	f383 8810 	msr	PRIMASK, r3
}
 800babc:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800babe:	bf00      	nop
 800bac0:	371c      	adds	r7, #28
 800bac2:	46bd      	mov	sp, r7
 800bac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac8:	4770      	bx	lr

0800baca <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800baca:	b580      	push	{r7, lr}
 800bacc:	b086      	sub	sp, #24
 800bace:	af00      	add	r7, sp, #0
 800bad0:	6078      	str	r0, [r7, #4]
 800bad2:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bad4:	f3ef 8310 	mrs	r3, PRIMASK
 800bad8:	60fb      	str	r3, [r7, #12]
  return(result);
 800bada:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800badc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800bade:	b672      	cpsid	i
}
 800bae0:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	681a      	ldr	r2, [r3, #0]
 800bae6:	683b      	ldr	r3, [r7, #0]
 800bae8:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	4618      	mov	r0, r3
 800baf0:	f7ff ffca 	bl	800ba88 <LST_remove_node>
 800baf4:	697b      	ldr	r3, [r7, #20]
 800baf6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800baf8:	693b      	ldr	r3, [r7, #16]
 800bafa:	f383 8810 	msr	PRIMASK, r3
}
 800bafe:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800bb00:	bf00      	nop
 800bb02:	3718      	adds	r7, #24
 800bb04:	46bd      	mov	sp, r7
 800bb06:	bd80      	pop	{r7, pc}

0800bb08 <CircularQueue_Add>:
  * @param  elementSize:  Size of element to be added to the queue. Only used if the queue manage variable size elements
  * @param  nbElements:  number of elements in the in buffer pointed by x
  * @retval  pointer on last element just added to the queue, NULL if the element to be added do not fit in the queue (too big)
  */
uint8_t* CircularQueue_Add(queue_t *q, uint8_t* x, uint16_t elementSize, uint32_t nbElements)
{
 800bb08:	b580      	push	{r7, lr}
 800bb0a:	b08e      	sub	sp, #56	@ 0x38
 800bb0c:	af00      	add	r7, sp, #0
 800bb0e:	60f8      	str	r0, [r7, #12]
 800bb10:	60b9      	str	r1, [r7, #8]
 800bb12:	603b      	str	r3, [r7, #0]
 800bb14:	4613      	mov	r3, r2
 800bb16:	80fb      	strh	r3, [r7, #6]

  uint8_t* ptr = NULL;                      /* fct return ptr to the element freshly added, if no room fct return NULL */
 800bb18:	2300      	movs	r3, #0
 800bb1a:	623b      	str	r3, [r7, #32]
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 800bb1c:	2300      	movs	r3, #0
 800bb1e:	86fb      	strh	r3, [r7, #54]	@ 0x36
  uint8_t  elemSizeStorageRoom  = 0 ;       /* Indicate the header (which contain only size) of element in case of varaibale size element (q->elementsize == 0) */
 800bb20:	2300      	movs	r3, #0
 800bb22:	77fb      	strb	r3, [r7, #31]
  uint32_t curBuffPosition;                  /* the current position in the queue buffer */
  uint32_t i;                               /* loop counter */
  uint32_t NbBytesToCopy = 0, NbCopiedBytes = 0 ; /* Indicators for copying bytes in queue */
 800bb24:	2300      	movs	r3, #0
 800bb26:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bb28:	2300      	movs	r3, #0
 800bb2a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t eob_free_size;                         /* Eof End of Quque Buffer Free Size */
  uint8_t  wrap_will_occur = 0;                   /* indicate if a wrap around will occurs */
 800bb2c:	2300      	movs	r3, #0
 800bb2e:	77bb      	strb	r3, [r7, #30]
  uint8_t  wrapped_element_eob_size;              /* In case of Wrap around, indicate size of parta of element that fit at thened of the queuue  buffer */
  uint16_t overhead = 0;                          /* In case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG or CIRCULAR_QUEUE_NO_WRAP_FLAG options, 
 800bb30:	2300      	movs	r3, #0
 800bb32:	83bb      	strh	r3, [r7, #28]
                                                     indcate the size overhead that will be generated by adding the element with wrap management (split or no wrap ) */ 
  
  
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	891b      	ldrh	r3, [r3, #8]
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d101      	bne.n	800bb40 <CircularQueue_Add+0x38>
 800bb3c:	2302      	movs	r3, #2
 800bb3e:	e000      	b.n	800bb42 <CircularQueue_Add+0x3a>
 800bb40:	2300      	movs	r3, #0
 800bb42:	77fb      	strb	r3, [r7, #31]
  /* retrieve the size of last element sored: the value stored at the beginning of the queue element if element size is variable otherwise take it from fixed element Size member */
  if (q->byteCount)
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	695b      	ldr	r3, [r3, #20]
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d029      	beq.n	800bba0 <CircularQueue_Add+0x98>
  {
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	891b      	ldrh	r3, [r3, #8]
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d122      	bne.n	800bb9a <CircularQueue_Add+0x92>
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	681a      	ldr	r2, [r3, #0]
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	691b      	ldr	r3, [r3, #16]
 800bb5c:	4413      	add	r3, r2
 800bb5e:	781b      	ldrb	r3, [r3, #0]
 800bb60:	4618      	mov	r0, r3
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	681a      	ldr	r2, [r3, #0]
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	691b      	ldr	r3, [r3, #16]
 800bb6a:	1c59      	adds	r1, r3, #1
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	685b      	ldr	r3, [r3, #4]
 800bb70:	4299      	cmp	r1, r3
 800bb72:	d306      	bcc.n	800bb82 <CircularQueue_Add+0x7a>
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	6919      	ldr	r1, [r3, #16]
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	685b      	ldr	r3, [r3, #4]
 800bb7c:	1acb      	subs	r3, r1, r3
 800bb7e:	3301      	adds	r3, #1
 800bb80:	e002      	b.n	800bb88 <CircularQueue_Add+0x80>
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	691b      	ldr	r3, [r3, #16]
 800bb86:	3301      	adds	r3, #1
 800bb88:	4413      	add	r3, r2
 800bb8a:	781b      	ldrb	r3, [r3, #0]
 800bb8c:	021b      	lsls	r3, r3, #8
 800bb8e:	b29b      	uxth	r3, r3
 800bb90:	4403      	add	r3, r0
 800bb92:	b29b      	uxth	r3, r3
 800bb94:	3302      	adds	r3, #2
 800bb96:	b29b      	uxth	r3, r3
 800bb98:	e001      	b.n	800bb9e <CircularQueue_Add+0x96>
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	891b      	ldrh	r3, [r3, #8]
 800bb9e:	86fb      	strh	r3, [r7, #54]	@ 0x36
  }
  /* if queue element have fixed size , reset the elementSize arg with fixed element size value */
  if (q->elementSize > 0)               
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	891b      	ldrh	r3, [r3, #8]
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d002      	beq.n	800bbae <CircularQueue_Add+0xa6>
  {
    elementSize = q->elementSize;
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	891b      	ldrh	r3, [r3, #8]
 800bbac:	80fb      	strh	r3, [r7, #6]
  }

   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	691a      	ldr	r2, [r3, #16]
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	68db      	ldr	r3, [r3, #12]
 800bbb6:	429a      	cmp	r2, r3
 800bbb8:	d307      	bcc.n	800bbca <CircularQueue_Add+0xc2>
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	685a      	ldr	r2, [r3, #4]
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	6919      	ldr	r1, [r3, #16]
 800bbc2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800bbc4:	440b      	add	r3, r1
 800bbc6:	1ad3      	subs	r3, r2, r3
 800bbc8:	e000      	b.n	800bbcc <CircularQueue_Add+0xc4>
 800bbca:	2300      	movs	r3, #0
 800bbcc:	61bb      	str	r3, [r7, #24]

   /* check how many bytes of wrapped element (if anay) are at end of buffer */
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 800bbce:	88fa      	ldrh	r2, [r7, #6]
 800bbd0:	7ffb      	ldrb	r3, [r7, #31]
 800bbd2:	4413      	add	r3, r2
 800bbd4:	461a      	mov	r2, r3
 800bbd6:	683b      	ldr	r3, [r7, #0]
 800bbd8:	fb02 f303 	mul.w	r3, r2, r3
 800bbdc:	69ba      	ldr	r2, [r7, #24]
 800bbde:	429a      	cmp	r2, r3
 800bbe0:	d80b      	bhi.n	800bbfa <CircularQueue_Add+0xf2>
 800bbe2:	88fa      	ldrh	r2, [r7, #6]
 800bbe4:	7ffb      	ldrb	r3, [r7, #31]
 800bbe6:	4413      	add	r3, r2
 800bbe8:	461a      	mov	r2, r3
 800bbea:	69bb      	ldr	r3, [r7, #24]
 800bbec:	fbb3 f1f2 	udiv	r1, r3, r2
 800bbf0:	fb01 f202 	mul.w	r2, r1, r2
 800bbf4:	1a9b      	subs	r3, r3, r2
 800bbf6:	b2db      	uxtb	r3, r3
 800bbf8:	e000      	b.n	800bbfc <CircularQueue_Add+0xf4>
 800bbfa:	2300      	movs	r3, #0
 800bbfc:	75fb      	strb	r3, [r7, #23]
   wrap_will_occur  = wrapped_element_eob_size > elemSizeStorageRoom;
 800bbfe:	7dfa      	ldrb	r2, [r7, #23]
 800bc00:	7ffb      	ldrb	r3, [r7, #31]
 800bc02:	429a      	cmp	r2, r3
 800bc04:	bf8c      	ite	hi
 800bc06:	2301      	movhi	r3, #1
 800bc08:	2300      	movls	r3, #0
 800bc0a:	b2db      	uxtb	r3, r3
 800bc0c:	77bb      	strb	r3, [r7, #30]

   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 800bc0e:	7fbb      	ldrb	r3, [r7, #30]
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d008      	beq.n	800bc26 <CircularQueue_Add+0x11e>
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	7f1b      	ldrb	r3, [r3, #28]
 800bc18:	f003 0301 	and.w	r3, r3, #1
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d002      	beq.n	800bc26 <CircularQueue_Add+0x11e>
 800bc20:	7dfb      	ldrb	r3, [r7, #23]
 800bc22:	b29b      	uxth	r3, r3
 800bc24:	e000      	b.n	800bc28 <CircularQueue_Add+0x120>
 800bc26:	8bbb      	ldrh	r3, [r7, #28]
 800bc28:	83bb      	strh	r3, [r7, #28]
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ? elemSizeStorageRoom  : overhead;
 800bc2a:	7fbb      	ldrb	r3, [r7, #30]
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d008      	beq.n	800bc42 <CircularQueue_Add+0x13a>
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	7f1b      	ldrb	r3, [r3, #28]
 800bc34:	f003 0302 	and.w	r3, r3, #2
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d002      	beq.n	800bc42 <CircularQueue_Add+0x13a>
 800bc3c:	7ffb      	ldrb	r3, [r7, #31]
 800bc3e:	b29b      	uxth	r3, r3
 800bc40:	e000      	b.n	800bc44 <CircularQueue_Add+0x13c>
 800bc42:	8bbb      	ldrh	r3, [r7, #28]
 800bc44:	83bb      	strh	r3, [r7, #28]
   
   
  /* Store now the elements if ennough room for all elements */
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 800bc46:	88fb      	ldrh	r3, [r7, #6]
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	f000 817e 	beq.w	800bf4a <CircularQueue_Add+0x442>
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	695a      	ldr	r2, [r3, #20]
 800bc52:	88f9      	ldrh	r1, [r7, #6]
 800bc54:	7ffb      	ldrb	r3, [r7, #31]
 800bc56:	440b      	add	r3, r1
 800bc58:	4619      	mov	r1, r3
 800bc5a:	683b      	ldr	r3, [r7, #0]
 800bc5c:	fb01 f303 	mul.w	r3, r1, r3
 800bc60:	441a      	add	r2, r3
 800bc62:	8bbb      	ldrh	r3, [r7, #28]
 800bc64:	441a      	add	r2, r3
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	685b      	ldr	r3, [r3, #4]
 800bc6a:	429a      	cmp	r2, r3
 800bc6c:	f200 816d 	bhi.w	800bf4a <CircularQueue_Add+0x442>
  { 
    /* loop to add all elements  */
    for (i=0; i < nbElements; i++) 
 800bc70:	2300      	movs	r3, #0
 800bc72:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bc74:	e14a      	b.n	800bf0c <CircularQueue_Add+0x404>
    {
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	691a      	ldr	r2, [r3, #16]
 800bc7a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800bc7c:	441a      	add	r2, r3
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	685b      	ldr	r3, [r3, #4]
 800bc82:	429a      	cmp	r2, r3
 800bc84:	d307      	bcc.n	800bc96 <CircularQueue_Add+0x18e>
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	691a      	ldr	r2, [r3, #16]
 800bc8a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800bc8c:	441a      	add	r2, r3
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	685b      	ldr	r3, [r3, #4]
 800bc92:	1ad3      	subs	r3, r2, r3
 800bc94:	e003      	b.n	800bc9e <CircularQueue_Add+0x196>
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	691a      	ldr	r2, [r3, #16]
 800bc9a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800bc9c:	4413      	add	r3, r2
 800bc9e:	68fa      	ldr	r2, [r7, #12]
 800bca0:	6113      	str	r3, [r2, #16]
      curBuffPosition = q->last;
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	691b      	ldr	r3, [r3, #16]
 800bca6:	633b      	str	r3, [r7, #48]	@ 0x30
      
      /* store the element  */
      /* store first the element size if element size is variable */
      if (q->elementSize == 0) 
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	891b      	ldrh	r3, [r3, #8]
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d130      	bne.n	800bd12 <CircularQueue_Add+0x20a>
      {
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	681a      	ldr	r2, [r3, #0]
 800bcb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcb6:	1c59      	adds	r1, r3, #1
 800bcb8:	6339      	str	r1, [r7, #48]	@ 0x30
 800bcba:	4413      	add	r3, r2
 800bcbc:	88fa      	ldrh	r2, [r7, #6]
 800bcbe:	b2d2      	uxtb	r2, r2
 800bcc0:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	685b      	ldr	r3, [r3, #4]
 800bcc6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bcc8:	429a      	cmp	r2, r3
 800bcca:	d304      	bcc.n	800bcd6 <CircularQueue_Add+0x1ce>
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	685b      	ldr	r3, [r3, #4]
 800bcd0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bcd2:	1ad3      	subs	r3, r2, r3
 800bcd4:	e000      	b.n	800bcd8 <CircularQueue_Add+0x1d0>
 800bcd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcd8:	633b      	str	r3, [r7, #48]	@ 0x30
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 800bcda:	88fb      	ldrh	r3, [r7, #6]
 800bcdc:	0a1b      	lsrs	r3, r3, #8
 800bcde:	b298      	uxth	r0, r3
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	681a      	ldr	r2, [r3, #0]
 800bce4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bce6:	1c59      	adds	r1, r3, #1
 800bce8:	6339      	str	r1, [r7, #48]	@ 0x30
 800bcea:	4413      	add	r3, r2
 800bcec:	b2c2      	uxtb	r2, r0
 800bcee:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	685b      	ldr	r3, [r3, #4]
 800bcf4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bcf6:	429a      	cmp	r2, r3
 800bcf8:	d304      	bcc.n	800bd04 <CircularQueue_Add+0x1fc>
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	685b      	ldr	r3, [r3, #4]
 800bcfe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bd00:	1ad3      	subs	r3, r2, r3
 800bd02:	e000      	b.n	800bd06 <CircularQueue_Add+0x1fe>
 800bd04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd06:	633b      	str	r3, [r7, #48]	@ 0x30
        q->byteCount += 2;
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	695b      	ldr	r3, [r3, #20]
 800bd0c:	1c9a      	adds	r2, r3, #2
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	615a      	str	r2, [r3, #20]
      }
      
      /* Identify number of bytes of copy takeing account possible wrap, in this case NbBytesToCopy will contains size that fit at end of the queue buffer */
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 800bd12:	88fa      	ldrh	r2, [r7, #6]
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	6859      	ldr	r1, [r3, #4]
 800bd18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd1a:	1acb      	subs	r3, r1, r3
 800bd1c:	4293      	cmp	r3, r2
 800bd1e:	bf28      	it	cs
 800bd20:	4613      	movcs	r3, r2
 800bd22:	62bb      	str	r3, [r7, #40]	@ 0x28
      /* check if no wrap (NbBytesToCopy == elementSize) or if Wrap and no spsicf option; 
         In this case part of data will copied at the end of the buffer and the rest a the beginning */
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
 800bd24:	88fb      	ldrh	r3, [r7, #6]
 800bd26:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bd28:	429a      	cmp	r2, r3
 800bd2a:	d007      	beq.n	800bd3c <CircularQueue_Add+0x234>
 800bd2c:	88fb      	ldrh	r3, [r7, #6]
 800bd2e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bd30:	429a      	cmp	r2, r3
 800bd32:	d225      	bcs.n	800bd80 <CircularQueue_Add+0x278>
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	7f1b      	ldrb	r3, [r3, #28]
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d121      	bne.n	800bd80 <CircularQueue_Add+0x278>
      {
        /* Copy First part (or emtire buffer ) from current position up to the end of the buffer queue (or before if enough room)  */
        memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	681a      	ldr	r2, [r3, #0]
 800bd40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd42:	18d0      	adds	r0, r2, r3
 800bd44:	88fb      	ldrh	r3, [r7, #6]
 800bd46:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bd48:	fb02 f303 	mul.w	r3, r2, r3
 800bd4c:	68ba      	ldr	r2, [r7, #8]
 800bd4e:	4413      	add	r3, r2
 800bd50:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bd52:	4619      	mov	r1, r3
 800bd54:	f002 fdff 	bl	800e956 <memcpy>
        /* Adjust bytes count */
        q->byteCount += NbBytesToCopy;
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	695a      	ldr	r2, [r3, #20]
 800bd5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd5e:	441a      	add	r2, r3
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	615a      	str	r2, [r3, #20]
        /* Wrap */
        curBuffPosition = 0; 
 800bd64:	2300      	movs	r3, #0
 800bd66:	633b      	str	r3, [r7, #48]	@ 0x30
        /* set NbCopiedBytes bytes with  ampount copied */
        NbCopiedBytes = NbBytesToCopy;
 800bd68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd6a:	627b      	str	r3, [r7, #36]	@ 0x24
        /* set the rest to copy if wrao , if no wrap will be 0 */
        NbBytesToCopy = elementSize - NbBytesToCopy;
 800bd6c:	88fa      	ldrh	r2, [r7, #6]
 800bd6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd70:	1ad3      	subs	r3, r2, r3
 800bd72:	62bb      	str	r3, [r7, #40]	@ 0x28
        /* set the current element Size, will be used to calaculate next last position at beginning of loop */
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 800bd74:	7ffb      	ldrb	r3, [r7, #31]
 800bd76:	b29a      	uxth	r2, r3
 800bd78:	88fb      	ldrh	r3, [r7, #6]
 800bd7a:	4413      	add	r3, r2
 800bd7c:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800bd7e:	e0a4      	b.n	800beca <CircularQueue_Add+0x3c2>
      }
      else if (NbBytesToCopy)  /* We have a wrap  to manage */
 800bd80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	f000 80a1 	beq.w	800beca <CircularQueue_Add+0x3c2>
      {
       /* case of CIRCULAR_QUEUE_NO_WRAP_FLAG option */
         if (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	7f1b      	ldrb	r3, [r3, #28]
 800bd8c:	f003 0301 	and.w	r3, r3, #1
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d03a      	beq.n	800be0a <CircularQueue_Add+0x302>
        {
          /* if element size are variable and NO_WRAP option, Invalidate end of buffer setting 0xFFFF size*/
          if (q->elementSize == 0)
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	891b      	ldrh	r3, [r3, #8]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d10d      	bne.n	800bdb8 <CircularQueue_Add+0x2b0>
          {
             q->qBuff[curBuffPosition-2] = 0xFF;
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	681a      	ldr	r2, [r3, #0]
 800bda0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bda2:	3b02      	subs	r3, #2
 800bda4:	4413      	add	r3, r2
 800bda6:	22ff      	movs	r2, #255	@ 0xff
 800bda8:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = 0xFF;
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	681a      	ldr	r2, [r3, #0]
 800bdae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdb0:	3b01      	subs	r3, #1
 800bdb2:	4413      	add	r3, r2
 800bdb4:	22ff      	movs	r2, #255	@ 0xff
 800bdb6:	701a      	strb	r2, [r3, #0]
          }
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	695a      	ldr	r2, [r3, #20]
 800bdbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bdbe:	441a      	add	r2, r3
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	615a      	str	r2, [r3, #20]
          /* No bytes coped a the end of buffer */
          NbCopiedBytes = 0;
 800bdc4:	2300      	movs	r3, #0
 800bdc6:	627b      	str	r3, [r7, #36]	@ 0x24
          /* all element to be copied at the begnning of buffer */
          NbBytesToCopy = elementSize; 
 800bdc8:	88fb      	ldrh	r3, [r7, #6]
 800bdca:	62bb      	str	r3, [r7, #40]	@ 0x28
          /* Wrap */
          curBuffPosition = 0; 
 800bdcc:	2300      	movs	r3, #0
 800bdce:	633b      	str	r3, [r7, #48]	@ 0x30
          /* if variable size element, invalidate end of buffer setting OxFFFF in element header (size) */
          if (q->elementSize == 0)
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	891b      	ldrh	r3, [r3, #8]
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d16f      	bne.n	800beb8 <CircularQueue_Add+0x3b0>
          {
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	681a      	ldr	r2, [r3, #0]
 800bddc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdde:	1c59      	adds	r1, r3, #1
 800bde0:	6339      	str	r1, [r7, #48]	@ 0x30
 800bde2:	4413      	add	r3, r2
 800bde4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bde6:	b2d2      	uxtb	r2, r2
 800bde8:	701a      	strb	r2, [r3, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800bdea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bdec:	0a18      	lsrs	r0, r3, #8
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	681a      	ldr	r2, [r3, #0]
 800bdf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdf4:	1c59      	adds	r1, r3, #1
 800bdf6:	6339      	str	r1, [r7, #48]	@ 0x30
 800bdf8:	4413      	add	r3, r2
 800bdfa:	b2c2      	uxtb	r2, r0
 800bdfc:	701a      	strb	r2, [r3, #0]
            q->byteCount += 2;   
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	695b      	ldr	r3, [r3, #20]
 800be02:	1c9a      	adds	r2, r3, #2
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	615a      	str	r2, [r3, #20]
 800be08:	e056      	b.n	800beb8 <CircularQueue_Add+0x3b0>
          } 
           
        }
        /* case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG option */
        else if (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	7f1b      	ldrb	r3, [r3, #28]
 800be0e:	f003 0302 	and.w	r3, r3, #2
 800be12:	2b00      	cmp	r3, #0
 800be14:	d050      	beq.n	800beb8 <CircularQueue_Add+0x3b0>
        {
          if (q->elementSize == 0)
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	891b      	ldrh	r3, [r3, #8]
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d14a      	bne.n	800beb4 <CircularQueue_Add+0x3ac>
          {
            /* reset the size of current element to the nb bytes fitting at the end of buffer */
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	681a      	ldr	r2, [r3, #0]
 800be22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be24:	3b02      	subs	r3, #2
 800be26:	4413      	add	r3, r2
 800be28:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800be2a:	b2d2      	uxtb	r2, r2
 800be2c:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800be2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be30:	0a19      	lsrs	r1, r3, #8
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	681a      	ldr	r2, [r3, #0]
 800be36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be38:	3b01      	subs	r3, #1
 800be3a:	4413      	add	r3, r2
 800be3c:	b2ca      	uxtb	r2, r1
 800be3e:	701a      	strb	r2, [r3, #0]
             /* copy the bytes */ 
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	681a      	ldr	r2, [r3, #0]
 800be44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be46:	18d0      	adds	r0, r2, r3
 800be48:	88fb      	ldrh	r3, [r7, #6]
 800be4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800be4c:	fb02 f303 	mul.w	r3, r2, r3
 800be50:	68ba      	ldr	r2, [r7, #8]
 800be52:	4413      	add	r3, r2
 800be54:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800be56:	4619      	mov	r1, r3
 800be58:	f002 fd7d 	bl	800e956 <memcpy>
             q->byteCount += NbBytesToCopy; 
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	695a      	ldr	r2, [r3, #20]
 800be60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be62:	441a      	add	r2, r3
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	615a      	str	r2, [r3, #20]
             /* set the number of copied bytes */
             NbCopiedBytes = NbBytesToCopy;             
 800be68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be6a:	627b      	str	r3, [r7, #36]	@ 0x24
             /* set rest of data to be copied to begnning of buffer */
             NbBytesToCopy = elementSize - NbBytesToCopy;
 800be6c:	88fa      	ldrh	r2, [r7, #6]
 800be6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be70:	1ad3      	subs	r3, r2, r3
 800be72:	62bb      	str	r3, [r7, #40]	@ 0x28
             /* one element more dur to split in 2 elements */
             q->elementCount++;
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	699b      	ldr	r3, [r3, #24]
 800be78:	1c5a      	adds	r2, r3, #1
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	619a      	str	r2, [r3, #24]
             /* Wrap */
             curBuffPosition = 0; 
 800be7e:	2300      	movs	r3, #0
 800be80:	633b      	str	r3, [r7, #48]	@ 0x30
             /* Set new size for rest of data */
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	681a      	ldr	r2, [r3, #0]
 800be86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be88:	1c59      	adds	r1, r3, #1
 800be8a:	6339      	str	r1, [r7, #48]	@ 0x30
 800be8c:	4413      	add	r3, r2
 800be8e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800be90:	b2d2      	uxtb	r2, r2
 800be92:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800be94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be96:	0a18      	lsrs	r0, r3, #8
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	681a      	ldr	r2, [r3, #0]
 800be9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be9e:	1c59      	adds	r1, r3, #1
 800bea0:	6339      	str	r1, [r7, #48]	@ 0x30
 800bea2:	4413      	add	r3, r2
 800bea4:	b2c2      	uxtb	r2, r0
 800bea6:	701a      	strb	r2, [r3, #0]
             q->byteCount += 2;              
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	695b      	ldr	r3, [r3, #20]
 800beac:	1c9a      	adds	r2, r3, #2
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	615a      	str	r2, [r3, #20]
 800beb2:	e001      	b.n	800beb8 <CircularQueue_Add+0x3b0>
          else
          {
            /* Should not occur */
            /* can not manage split Flag on Fixed size element */
            /* Buffer is corrupted */
            return NULL;
 800beb4:	2300      	movs	r3, #0
 800beb6:	e049      	b.n	800bf4c <CircularQueue_Add+0x444>
          }
        }
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 800beb8:	7ffb      	ldrb	r3, [r7, #31]
 800beba:	b29a      	uxth	r2, r3
 800bebc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bebe:	b29b      	uxth	r3, r3
 800bec0:	4413      	add	r3, r2
 800bec2:	86fb      	strh	r3, [r7, #54]	@ 0x36
        q->last = 0;        
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	2200      	movs	r2, #0
 800bec8:	611a      	str	r2, [r3, #16]
      }  
      
      /* some remaining byte to copy */
      if (NbBytesToCopy)      
 800beca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800becc:	2b00      	cmp	r3, #0
 800bece:	d015      	beq.n	800befc <CircularQueue_Add+0x3f4>
      {
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	681a      	ldr	r2, [r3, #0]
 800bed4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bed6:	18d0      	adds	r0, r2, r3
 800bed8:	88fb      	ldrh	r3, [r7, #6]
 800beda:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bedc:	fb03 f202 	mul.w	r2, r3, r2
 800bee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bee2:	4413      	add	r3, r2
 800bee4:	68ba      	ldr	r2, [r7, #8]
 800bee6:	4413      	add	r3, r2
 800bee8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800beea:	4619      	mov	r1, r3
 800beec:	f002 fd33 	bl	800e956 <memcpy>
        q->byteCount += NbBytesToCopy;
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	695a      	ldr	r2, [r3, #20]
 800bef4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bef6:	441a      	add	r2, r3
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	615a      	str	r2, [r3, #20]
      }      
      
      /* One more element */
      q->elementCount++;
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	699b      	ldr	r3, [r3, #24]
 800bf00:	1c5a      	adds	r2, r3, #1
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	619a      	str	r2, [r3, #24]
    for (i=0; i < nbElements; i++) 
 800bf06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf08:	3301      	adds	r3, #1
 800bf0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bf0c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bf0e:	683b      	ldr	r3, [r7, #0]
 800bf10:	429a      	cmp	r2, r3
 800bf12:	f4ff aeb0 	bcc.w	800bc76 <CircularQueue_Add+0x16e>
    }
    
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	681a      	ldr	r2, [r3, #0]
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	6919      	ldr	r1, [r3, #16]
 800bf1e:	7ffb      	ldrb	r3, [r7, #31]
 800bf20:	4419      	add	r1, r3
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	685b      	ldr	r3, [r3, #4]
 800bf26:	4299      	cmp	r1, r3
 800bf28:	d307      	bcc.n	800bf3a <CircularQueue_Add+0x432>
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	6919      	ldr	r1, [r3, #16]
 800bf2e:	7ffb      	ldrb	r3, [r7, #31]
 800bf30:	4419      	add	r1, r3
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	685b      	ldr	r3, [r3, #4]
 800bf36:	1acb      	subs	r3, r1, r3
 800bf38:	e003      	b.n	800bf42 <CircularQueue_Add+0x43a>
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	6919      	ldr	r1, [r3, #16]
 800bf3e:	7ffb      	ldrb	r3, [r7, #31]
 800bf40:	440b      	add	r3, r1
 800bf42:	4413      	add	r3, r2
 800bf44:	623b      	str	r3, [r7, #32]
  /* for Breakpoint only...to remove */
  else
  {
    return NULL;
  }
  return ptr;
 800bf46:	6a3b      	ldr	r3, [r7, #32]
 800bf48:	e000      	b.n	800bf4c <CircularQueue_Add+0x444>
    return NULL;
 800bf4a:	2300      	movs	r3, #0
}
 800bf4c:	4618      	mov	r0, r3
 800bf4e:	3738      	adds	r7, #56	@ 0x38
 800bf50:	46bd      	mov	sp, r7
 800bf52:	bd80      	pop	{r7, pc}

0800bf54 <CircularQueue_Remove>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize: Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on removed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Remove(queue_t *q, uint16_t* elementSize)
{
 800bf54:	b480      	push	{r7}
 800bf56:	b085      	sub	sp, #20
 800bf58:	af00      	add	r7, sp, #0
 800bf5a:	6078      	str	r0, [r7, #4]
 800bf5c:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800bf5e:	2300      	movs	r3, #0
 800bf60:	727b      	strb	r3, [r7, #9]
  uint8_t* ptr= NULL;
 800bf62:	2300      	movs	r3, #0
 800bf64:	60fb      	str	r3, [r7, #12]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	891b      	ldrh	r3, [r3, #8]
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d101      	bne.n	800bf72 <CircularQueue_Remove+0x1e>
 800bf6e:	2302      	movs	r3, #2
 800bf70:	e000      	b.n	800bf74 <CircularQueue_Remove+0x20>
 800bf72:	2300      	movs	r3, #0
 800bf74:	727b      	strb	r3, [r7, #9]
  uint16_t eltSize = 0;
 800bf76:	2300      	movs	r3, #0
 800bf78:	817b      	strh	r3, [r7, #10]
  if (q->byteCount > 0) 
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	695b      	ldr	r3, [r3, #20]
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	f000 80ca 	beq.w	800c118 <CircularQueue_Remove+0x1c4>
  {
    /* retrieve element Size */
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	891b      	ldrh	r3, [r3, #8]
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d120      	bne.n	800bfce <CircularQueue_Remove+0x7a>
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	681a      	ldr	r2, [r3, #0]
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	68db      	ldr	r3, [r3, #12]
 800bf94:	4413      	add	r3, r2
 800bf96:	781b      	ldrb	r3, [r3, #0]
 800bf98:	4618      	mov	r0, r3
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	681a      	ldr	r2, [r3, #0]
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	68db      	ldr	r3, [r3, #12]
 800bfa2:	1c59      	adds	r1, r3, #1
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	685b      	ldr	r3, [r3, #4]
 800bfa8:	4299      	cmp	r1, r3
 800bfaa:	d306      	bcc.n	800bfba <CircularQueue_Remove+0x66>
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	68d9      	ldr	r1, [r3, #12]
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	685b      	ldr	r3, [r3, #4]
 800bfb4:	1acb      	subs	r3, r1, r3
 800bfb6:	3301      	adds	r3, #1
 800bfb8:	e002      	b.n	800bfc0 <CircularQueue_Remove+0x6c>
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	68db      	ldr	r3, [r3, #12]
 800bfbe:	3301      	adds	r3, #1
 800bfc0:	4413      	add	r3, r2
 800bfc2:	781b      	ldrb	r3, [r3, #0]
 800bfc4:	021b      	lsls	r3, r3, #8
 800bfc6:	b29b      	uxth	r3, r3
 800bfc8:	4403      	add	r3, r0
 800bfca:	b29b      	uxth	r3, r3
 800bfcc:	e001      	b.n	800bfd2 <CircularQueue_Remove+0x7e>
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	891b      	ldrh	r3, [r3, #8]
 800bfd2:	817b      	strh	r3, [r7, #10]

     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	7f1b      	ldrb	r3, [r3, #28]
 800bfd8:	f003 0301 	and.w	r3, r3, #1
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d056      	beq.n	800c08e <CircularQueue_Remove+0x13a>
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	7f1b      	ldrb	r3, [r3, #28]
 800bfe4:	f003 0302 	and.w	r3, r3, #2
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d150      	bne.n	800c08e <CircularQueue_Remove+0x13a>
     {
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800bfec:	897b      	ldrh	r3, [r7, #10]
 800bfee:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800bff2:	4293      	cmp	r3, r2
 800bff4:	d103      	bne.n	800bffe <CircularQueue_Remove+0xaa>
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	891b      	ldrh	r3, [r3, #8]
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d012      	beq.n	800c024 <CircularQueue_Remove+0xd0>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	68da      	ldr	r2, [r3, #12]
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	691b      	ldr	r3, [r3, #16]
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800c006:	429a      	cmp	r2, r3
 800c008:	d941      	bls.n	800c08e <CircularQueue_Remove+0x13a>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	891b      	ldrh	r3, [r3, #8]
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d03d      	beq.n	800c08e <CircularQueue_Remove+0x13a>
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	685a      	ldr	r2, [r3, #4]
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	68db      	ldr	r3, [r3, #12]
 800c01a:	1ad3      	subs	r3, r2, r3
 800c01c:	687a      	ldr	r2, [r7, #4]
 800c01e:	8912      	ldrh	r2, [r2, #8]
 800c020:	4293      	cmp	r3, r2
 800c022:	d234      	bcs.n	800c08e <CircularQueue_Remove+0x13a>
       {
          /* all data from current position up to the end of buffer are invalid */
          q->byteCount -= (q->queueMaxSize - q->first);
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	695a      	ldr	r2, [r3, #20]
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	68d9      	ldr	r1, [r3, #12]
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	685b      	ldr	r3, [r3, #4]
 800c030:	1acb      	subs	r3, r1, r3
 800c032:	441a      	add	r2, r3
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	615a      	str	r2, [r3, #20]
          /* Adjust first element pos */
          q->first = 0;
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	2200      	movs	r2, #0
 800c03c:	60da      	str	r2, [r3, #12]
          /* retrieve the right size after the wrap [if variable size element] */
          eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	891b      	ldrh	r3, [r3, #8]
 800c042:	2b00      	cmp	r3, #0
 800c044:	d120      	bne.n	800c088 <CircularQueue_Remove+0x134>
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	681a      	ldr	r2, [r3, #0]
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	68db      	ldr	r3, [r3, #12]
 800c04e:	4413      	add	r3, r2
 800c050:	781b      	ldrb	r3, [r3, #0]
 800c052:	4618      	mov	r0, r3
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	681a      	ldr	r2, [r3, #0]
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	68db      	ldr	r3, [r3, #12]
 800c05c:	1c59      	adds	r1, r3, #1
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	685b      	ldr	r3, [r3, #4]
 800c062:	4299      	cmp	r1, r3
 800c064:	d306      	bcc.n	800c074 <CircularQueue_Remove+0x120>
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	68d9      	ldr	r1, [r3, #12]
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	685b      	ldr	r3, [r3, #4]
 800c06e:	1acb      	subs	r3, r1, r3
 800c070:	3301      	adds	r3, #1
 800c072:	e002      	b.n	800c07a <CircularQueue_Remove+0x126>
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	68db      	ldr	r3, [r3, #12]
 800c078:	3301      	adds	r3, #1
 800c07a:	4413      	add	r3, r2
 800c07c:	781b      	ldrb	r3, [r3, #0]
 800c07e:	021b      	lsls	r3, r3, #8
 800c080:	b29b      	uxth	r3, r3
 800c082:	4403      	add	r3, r0
 800c084:	b29b      	uxth	r3, r3
 800c086:	e001      	b.n	800c08c <CircularQueue_Remove+0x138>
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	891b      	ldrh	r3, [r3, #8]
 800c08c:	817b      	strh	r3, [r7, #10]
       }
     }

    /* retrieve element */
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	681a      	ldr	r2, [r3, #0]
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	68d9      	ldr	r1, [r3, #12]
 800c096:	7a7b      	ldrb	r3, [r7, #9]
 800c098:	4419      	add	r1, r3
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	685b      	ldr	r3, [r3, #4]
 800c09e:	4299      	cmp	r1, r3
 800c0a0:	d307      	bcc.n	800c0b2 <CircularQueue_Remove+0x15e>
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	68d9      	ldr	r1, [r3, #12]
 800c0a6:	7a7b      	ldrb	r3, [r7, #9]
 800c0a8:	4419      	add	r1, r3
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	685b      	ldr	r3, [r3, #4]
 800c0ae:	1acb      	subs	r3, r1, r3
 800c0b0:	e003      	b.n	800c0ba <CircularQueue_Remove+0x166>
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	68d9      	ldr	r1, [r3, #12]
 800c0b6:	7a7b      	ldrb	r3, [r7, #9]
 800c0b8:	440b      	add	r3, r1
 800c0ba:	4413      	add	r3, r2
 800c0bc:	60fb      	str	r3, [r7, #12]

    /* adjust byte count */
    q->byteCount -= (eltSize + elemSizeStorageRoom) ;
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	695b      	ldr	r3, [r3, #20]
 800c0c2:	8979      	ldrh	r1, [r7, #10]
 800c0c4:	7a7a      	ldrb	r2, [r7, #9]
 800c0c6:	440a      	add	r2, r1
 800c0c8:	1a9a      	subs	r2, r3, r2
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	615a      	str	r2, [r3, #20]
    
    /* Adjust q->first */
    if (q->byteCount > 0)
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	695b      	ldr	r3, [r3, #20]
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d01b      	beq.n	800c10e <CircularQueue_Remove+0x1ba>
    {
      q->first = MOD((q->first+ eltSize + elemSizeStorageRoom ), q->queueMaxSize);
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	68da      	ldr	r2, [r3, #12]
 800c0da:	897b      	ldrh	r3, [r7, #10]
 800c0dc:	441a      	add	r2, r3
 800c0de:	7a7b      	ldrb	r3, [r7, #9]
 800c0e0:	441a      	add	r2, r3
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	685b      	ldr	r3, [r3, #4]
 800c0e6:	429a      	cmp	r2, r3
 800c0e8:	d309      	bcc.n	800c0fe <CircularQueue_Remove+0x1aa>
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	68da      	ldr	r2, [r3, #12]
 800c0ee:	897b      	ldrh	r3, [r7, #10]
 800c0f0:	441a      	add	r2, r3
 800c0f2:	7a7b      	ldrb	r3, [r7, #9]
 800c0f4:	441a      	add	r2, r3
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	685b      	ldr	r3, [r3, #4]
 800c0fa:	1ad3      	subs	r3, r2, r3
 800c0fc:	e005      	b.n	800c10a <CircularQueue_Remove+0x1b6>
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	68da      	ldr	r2, [r3, #12]
 800c102:	897b      	ldrh	r3, [r7, #10]
 800c104:	441a      	add	r2, r3
 800c106:	7a7b      	ldrb	r3, [r7, #9]
 800c108:	4413      	add	r3, r2
 800c10a:	687a      	ldr	r2, [r7, #4]
 800c10c:	60d3      	str	r3, [r2, #12]
    }    
    /* adjust element count */    
    --q->elementCount;    
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	699b      	ldr	r3, [r3, #24]
 800c112:	1e5a      	subs	r2, r3, #1
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	619a      	str	r2, [r3, #24]
  }
  if (elementSize != NULL)
 800c118:	683b      	ldr	r3, [r7, #0]
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d002      	beq.n	800c124 <CircularQueue_Remove+0x1d0>
  {
    *elementSize = eltSize;
 800c11e:	683b      	ldr	r3, [r7, #0]
 800c120:	897a      	ldrh	r2, [r7, #10]
 800c122:	801a      	strh	r2, [r3, #0]
  }
  return ptr;
 800c124:	68fb      	ldr	r3, [r7, #12]
}
 800c126:	4618      	mov	r0, r3
 800c128:	3714      	adds	r7, #20
 800c12a:	46bd      	mov	sp, r7
 800c12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c130:	4770      	bx	lr

0800c132 <CircularQueue_Sense>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize:  Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on sensed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Sense(queue_t *q, uint16_t* elementSize)
{
 800c132:	b480      	push	{r7}
 800c134:	b087      	sub	sp, #28
 800c136:	af00      	add	r7, sp, #0
 800c138:	6078      	str	r0, [r7, #4]
 800c13a:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800c13c:	2300      	movs	r3, #0
 800c13e:	72fb      	strb	r3, [r7, #11]
  uint8_t* x= NULL;
 800c140:	2300      	movs	r3, #0
 800c142:	617b      	str	r3, [r7, #20]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	891b      	ldrh	r3, [r3, #8]
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d101      	bne.n	800c150 <CircularQueue_Sense+0x1e>
 800c14c:	2302      	movs	r3, #2
 800c14e:	e000      	b.n	800c152 <CircularQueue_Sense+0x20>
 800c150:	2300      	movs	r3, #0
 800c152:	72fb      	strb	r3, [r7, #11]
  uint16_t eltSize = 0;
 800c154:	2300      	movs	r3, #0
 800c156:	827b      	strh	r3, [r7, #18]
  uint32_t FirstElemetPos = 0;
 800c158:	2300      	movs	r3, #0
 800c15a:	60fb      	str	r3, [r7, #12]
    
  if (q->byteCount > 0) 
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	695b      	ldr	r3, [r3, #20]
 800c160:	2b00      	cmp	r3, #0
 800c162:	f000 808e 	beq.w	800c282 <CircularQueue_Sense+0x150>
  {
    FirstElemetPos = q->first;
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	68db      	ldr	r3, [r3, #12]
 800c16a:	60fb      	str	r3, [r7, #12]
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	891b      	ldrh	r3, [r3, #8]
 800c170:	2b00      	cmp	r3, #0
 800c172:	d120      	bne.n	800c1b6 <CircularQueue_Sense+0x84>
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	681a      	ldr	r2, [r3, #0]
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	68db      	ldr	r3, [r3, #12]
 800c17c:	4413      	add	r3, r2
 800c17e:	781b      	ldrb	r3, [r3, #0]
 800c180:	4618      	mov	r0, r3
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	681a      	ldr	r2, [r3, #0]
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	68db      	ldr	r3, [r3, #12]
 800c18a:	1c59      	adds	r1, r3, #1
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	685b      	ldr	r3, [r3, #4]
 800c190:	4299      	cmp	r1, r3
 800c192:	d306      	bcc.n	800c1a2 <CircularQueue_Sense+0x70>
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	68d9      	ldr	r1, [r3, #12]
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	685b      	ldr	r3, [r3, #4]
 800c19c:	1acb      	subs	r3, r1, r3
 800c19e:	3301      	adds	r3, #1
 800c1a0:	e002      	b.n	800c1a8 <CircularQueue_Sense+0x76>
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	68db      	ldr	r3, [r3, #12]
 800c1a6:	3301      	adds	r3, #1
 800c1a8:	4413      	add	r3, r2
 800c1aa:	781b      	ldrb	r3, [r3, #0]
 800c1ac:	021b      	lsls	r3, r3, #8
 800c1ae:	b29b      	uxth	r3, r3
 800c1b0:	4403      	add	r3, r0
 800c1b2:	b29b      	uxth	r3, r3
 800c1b4:	e001      	b.n	800c1ba <CircularQueue_Sense+0x88>
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	891b      	ldrh	r3, [r3, #8]
 800c1ba:	827b      	strh	r3, [r7, #18]
    
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	7f1b      	ldrb	r3, [r3, #28]
 800c1c0:	f003 0301 	and.w	r3, r3, #1
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d047      	beq.n	800c258 <CircularQueue_Sense+0x126>
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	7f1b      	ldrb	r3, [r3, #28]
 800c1cc:	f003 0302 	and.w	r3, r3, #2
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d141      	bne.n	800c258 <CircularQueue_Sense+0x126>
    { 
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800c1d4:	8a7b      	ldrh	r3, [r7, #18]
 800c1d6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c1da:	4293      	cmp	r3, r2
 800c1dc:	d103      	bne.n	800c1e6 <CircularQueue_Sense+0xb4>
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	891b      	ldrh	r3, [r3, #8]
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d012      	beq.n	800c20c <CircularQueue_Sense+0xda>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	68da      	ldr	r2, [r3, #12]
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	691b      	ldr	r3, [r3, #16]
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800c1ee:	429a      	cmp	r2, r3
 800c1f0:	d932      	bls.n	800c258 <CircularQueue_Sense+0x126>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	891b      	ldrh	r3, [r3, #8]
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d02e      	beq.n	800c258 <CircularQueue_Sense+0x126>
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	685a      	ldr	r2, [r3, #4]
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	68db      	ldr	r3, [r3, #12]
 800c202:	1ad3      	subs	r3, r2, r3
 800c204:	687a      	ldr	r2, [r7, #4]
 800c206:	8912      	ldrh	r2, [r2, #8]
 800c208:	4293      	cmp	r3, r2
 800c20a:	d225      	bcs.n	800c258 <CircularQueue_Sense+0x126>

      {
        /* all data from current position up to the end of buffer are invalid */
        FirstElemetPos = 0; /* wrap to the begiining of buffer */
 800c20c:	2300      	movs	r3, #0
 800c20e:	60fb      	str	r3, [r7, #12]

        /* retrieve the right size after the wrap [if variable size element] */
        eltSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	891b      	ldrh	r3, [r3, #8]
 800c214:	2b00      	cmp	r3, #0
 800c216:	d11c      	bne.n	800c252 <CircularQueue_Sense+0x120>
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	681a      	ldr	r2, [r3, #0]
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	4413      	add	r3, r2
 800c220:	781b      	ldrb	r3, [r3, #0]
 800c222:	4618      	mov	r0, r3
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	681a      	ldr	r2, [r3, #0]
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	1c59      	adds	r1, r3, #1
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	685b      	ldr	r3, [r3, #4]
 800c230:	4299      	cmp	r1, r3
 800c232:	d305      	bcc.n	800c240 <CircularQueue_Sense+0x10e>
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	685b      	ldr	r3, [r3, #4]
 800c238:	68f9      	ldr	r1, [r7, #12]
 800c23a:	1acb      	subs	r3, r1, r3
 800c23c:	3301      	adds	r3, #1
 800c23e:	e001      	b.n	800c244 <CircularQueue_Sense+0x112>
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	3301      	adds	r3, #1
 800c244:	4413      	add	r3, r2
 800c246:	781b      	ldrb	r3, [r3, #0]
 800c248:	021b      	lsls	r3, r3, #8
 800c24a:	b29b      	uxth	r3, r3
 800c24c:	4403      	add	r3, r0
 800c24e:	b29b      	uxth	r3, r3
 800c250:	e001      	b.n	800c256 <CircularQueue_Sense+0x124>
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	891b      	ldrh	r3, [r3, #8]
 800c256:	827b      	strh	r3, [r7, #18]
      }
   }
   /* retrieve element */
    x = q->qBuff + (MOD((FirstElemetPos + elemSizeStorageRoom), q->queueMaxSize));
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	681a      	ldr	r2, [r3, #0]
 800c25c:	7af9      	ldrb	r1, [r7, #11]
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	4419      	add	r1, r3
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	685b      	ldr	r3, [r3, #4]
 800c266:	4299      	cmp	r1, r3
 800c268:	d306      	bcc.n	800c278 <CircularQueue_Sense+0x146>
 800c26a:	7af9      	ldrb	r1, [r7, #11]
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	4419      	add	r1, r3
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	685b      	ldr	r3, [r3, #4]
 800c274:	1acb      	subs	r3, r1, r3
 800c276:	e002      	b.n	800c27e <CircularQueue_Sense+0x14c>
 800c278:	7af9      	ldrb	r1, [r7, #11]
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	440b      	add	r3, r1
 800c27e:	4413      	add	r3, r2
 800c280:	617b      	str	r3, [r7, #20]
  }
  if (elementSize != NULL)
 800c282:	683b      	ldr	r3, [r7, #0]
 800c284:	2b00      	cmp	r3, #0
 800c286:	d002      	beq.n	800c28e <CircularQueue_Sense+0x15c>
  {
    *elementSize = eltSize;
 800c288:	683b      	ldr	r3, [r7, #0]
 800c28a:	8a7a      	ldrh	r2, [r7, #18]
 800c28c:	801a      	strh	r2, [r3, #0]
  }
  return x;
 800c28e:	697b      	ldr	r3, [r7, #20]
}
 800c290:	4618      	mov	r0, r3
 800c292:	371c      	adds	r7, #28
 800c294:	46bd      	mov	sp, r7
 800c296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c29a:	4770      	bx	lr

0800c29c <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 800c29c:	b480      	push	{r7}
 800c29e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 800c2a0:	4b03      	ldr	r3, [pc, #12]	@ (800c2b0 <LL_FLASH_GetUDN+0x14>)
 800c2a2:	681b      	ldr	r3, [r3, #0]
}
 800c2a4:	4618      	mov	r0, r3
 800c2a6:	46bd      	mov	sp, r7
 800c2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ac:	4770      	bx	lr
 800c2ae:	bf00      	nop
 800c2b0:	1fff7580 	.word	0x1fff7580

0800c2b4 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 800c2b4:	b480      	push	{r7}
 800c2b6:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 800c2b8:	4b03      	ldr	r3, [pc, #12]	@ (800c2c8 <LL_FLASH_GetDeviceID+0x14>)
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	b2db      	uxtb	r3, r3
}
 800c2be:	4618      	mov	r0, r3
 800c2c0:	46bd      	mov	sp, r7
 800c2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c6:	4770      	bx	lr
 800c2c8:	1fff7584 	.word	0x1fff7584

0800c2cc <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 800c2cc:	b480      	push	{r7}
 800c2ce:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 800c2d0:	4b03      	ldr	r3, [pc, #12]	@ (800c2e0 <LL_FLASH_GetSTCompanyID+0x14>)
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	0a1b      	lsrs	r3, r3, #8
}
 800c2d6:	4618      	mov	r0, r3
 800c2d8:	46bd      	mov	sp, r7
 800c2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2de:	4770      	bx	lr
 800c2e0:	1fff7584 	.word	0x1fff7584

0800c2e4 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 800c2e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c2e6:	b0b1      	sub	sp, #196	@ 0xc4
 800c2e8:	af04      	add	r7, sp, #16
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800c2ea:	2392      	movs	r3, #146	@ 0x92
 800c2ec:	f887 30ab 	strb.w	r3, [r7, #171]	@ 0xab
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */
  WirelessFwInfo_t wireless_info_instance;
  WirelessFwInfo_t *p_wireless_info = &wireless_info_instance;  
 800c2f0:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800c2f4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  char BdAddress[20];
  char StackVersion[23];
  char StackBranch[20];
  char FusVersion[20];
  const uint8_t *bdaddr=0;  
 800c2f8:	2300      	movs	r3, #0
 800c2fa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 800c2fe:	4b89      	ldr	r3, [pc, #548]	@ (800c524 <APP_BLE_Init+0x240>)
 800c300:	463c      	mov	r4, r7
 800c302:	461d      	mov	r5, r3
 800c304:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c306:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c308:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c30a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c30c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c30e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c310:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800c314:	c403      	stmia	r4!, {r0, r1}
 800c316:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 800c318:	f000 fe74 	bl	800d004 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 800c31c:	2101      	movs	r1, #1
 800c31e:	2002      	movs	r0, #2
 800c320:	f001 fe28 	bl	800df74 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 800c324:	4a80      	ldr	r2, [pc, #512]	@ (800c528 <APP_BLE_Init+0x244>)
 800c326:	2100      	movs	r1, #0
 800c328:	2004      	movs	r0, #4
 800c32a:	f001 ff4f 	bl	800e1cc <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 800c32e:	463b      	mov	r3, r7
 800c330:	4618      	mov	r0, r3
 800c332:	f7fe fc55 	bl	800abe0 <SHCI_C2_BLE_Init>
 800c336:	4603      	mov	r3, r0
 800c338:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
  if (status != SHCI_Success)
 800c33c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800c340:	2b00      	cmp	r3, #0
 800c342:	d008      	beq.n	800c356 <APP_BLE_Init+0x72>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
 800c344:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800c348:	4619      	mov	r1, r3
 800c34a:	4878      	ldr	r0, [pc, #480]	@ (800c52c <APP_BLE_Init+0x248>)
 800c34c:	f002 f91e 	bl	800e58c <iprintf>
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 800c350:	f7f6 fc6c 	bl	8002c2c <Error_Handler>
 800c354:	e002      	b.n	800c35c <APP_BLE_Init+0x78>
  }
  else
  {
    APP_DBG_MSG("  Success: SHCI_C2_BLE_Init command\n\r");
 800c356:	4876      	ldr	r0, [pc, #472]	@ (800c530 <APP_BLE_Init+0x24c>)
 800c358:	f002 f918 	bl	800e58c <iprintf>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 800c35c:	f000 fe68 	bl	800d030 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 800c360:	f7fe fb98 	bl	800aa94 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800c364:	4b73      	ldr	r3, [pc, #460]	@ (800c534 <APP_BLE_Init+0x250>)
 800c366:	2200      	movs	r2, #0
 800c368:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 800c36c:	4b71      	ldr	r3, [pc, #452]	@ (800c534 <APP_BLE_Init+0x250>)
 800c36e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c372:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 800c374:	4a70      	ldr	r2, [pc, #448]	@ (800c538 <APP_BLE_Init+0x254>)
 800c376:	2100      	movs	r1, #0
 800c378:	2001      	movs	r0, #1
 800c37a:	f001 ff27 	bl	800e1cc <UTIL_SEQ_RegTask>
#if (L2CAP_REQUEST_NEW_CONN_PARAM != 0)
  UTIL_SEQ_RegTask(1<<CFG_TASK_CONN_UPDATE_REG_ID, UTIL_SEQ_RFU, Connection_Interval_Update_Req);
 800c37e:	4a6f      	ldr	r2, [pc, #444]	@ (800c53c <APP_BLE_Init+0x258>)
 800c380:	2100      	movs	r1, #0
 800c382:	2002      	movs	r0, #2
 800c384:	f001 ff22 	bl	800e1cc <UTIL_SEQ_RegTask>
#if (BLE_CFG_OTA_REBOOT_CHAR != 0)
  a_ManufData[sizeof(a_ManufData)-8] = CFG_FEATURE_OTA_REBOOT;
#endif /* BLE_CFG_OTA_REBOOT_CHAR != 0 */

#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 800c388:	2006      	movs	r0, #6
 800c38a:	f7fd ffcf 	bl	800a32c <aci_hal_set_radio_activity_mask>
 800c38e:	4603      	mov	r3, r0
 800c390:	f887 30ab 	strb.w	r3, [r7, #171]	@ 0xab
  if (ret != BLE_STATUS_SUCCESS)
 800c394:	f897 30ab 	ldrb.w	r3, [r7, #171]	@ 0xab
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d006      	beq.n	800c3aa <APP_BLE_Init+0xc6>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_radio_activity_mask command, result: 0x%x \n\r", ret);
 800c39c:	f897 30ab 	ldrb.w	r3, [r7, #171]	@ 0xab
 800c3a0:	4619      	mov	r1, r3
 800c3a2:	4867      	ldr	r0, [pc, #412]	@ (800c540 <APP_BLE_Init+0x25c>)
 800c3a4:	f002 f8f2 	bl	800e58c <iprintf>
 800c3a8:	e002      	b.n	800c3b0 <APP_BLE_Init+0xcc>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_radio_activity_mask command\n\r");
 800c3aa:	4866      	ldr	r0, [pc, #408]	@ (800c544 <APP_BLE_Init+0x260>)
 800c3ac:	f002 f8ee 	bl	800e58c <iprintf>
  }
#endif /* RADIO_ACTIVITY_EVENT != 0 */

#if (L2CAP_REQUEST_NEW_CONN_PARAM != 0)
  index_con_int = 0;
 800c3b0:	4b65      	ldr	r3, [pc, #404]	@ (800c548 <APP_BLE_Init+0x264>)
 800c3b2:	2200      	movs	r2, #0
 800c3b4:	701a      	strb	r2, [r3, #0]
  mutex = 1;
 800c3b6:	4b65      	ldr	r3, [pc, #404]	@ (800c54c <APP_BLE_Init+0x268>)
 800c3b8:	2201      	movs	r2, #1
 800c3ba:	701a      	strb	r2, [r3, #0]
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize P2P Server Application
   */
  P2PS_APP_Init();
 800c3bc:	f001 fa7e 	bl	800d8bc <P2PS_APP_Init>

  /* USER CODE BEGIN APP_BLE_Init_3 */
  Add_EEG_Stream_Notify_Service();
 800c3c0:	f000 f8da 	bl	800c578 <Add_EEG_Stream_Notify_Service>
  Add_Event_Notify_Service();
 800c3c4:	f000 f970 	bl	800c6a8 <Add_Event_Notify_Service>
  Add_Motion_Notify_Service();
 800c3c8:	f000 fa06 	bl	800c7d8 <Add_Motion_Notify_Service>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Create timer to handle the Advertising Stop
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.Advertising_mgr_timer_Id), hw_ts_SingleShot, Adv_Cancel_Req);
 800c3cc:	4b60      	ldr	r3, [pc, #384]	@ (800c550 <APP_BLE_Init+0x26c>)
 800c3ce:	2200      	movs	r2, #0
 800c3d0:	4960      	ldr	r1, [pc, #384]	@ (800c554 <APP_BLE_Init+0x270>)
 800c3d2:	2000      	movs	r0, #0
 800c3d4:	f7f5 fd54 	bl	8001e80 <HW_TS_Create>
  /**
   * Create timer to handle the Led Switch OFF
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.SwitchOffGPIO_timer_Id), hw_ts_SingleShot, Switch_OFF_GPIO);
 800c3d8:	4b5f      	ldr	r3, [pc, #380]	@ (800c558 <APP_BLE_Init+0x274>)
 800c3da:	2200      	movs	r2, #0
 800c3dc:	495f      	ldr	r1, [pc, #380]	@ (800c55c <APP_BLE_Init+0x278>)
 800c3de:	2000      	movs	r0, #0
 800c3e0:	f7f5 fd4e 	bl	8001e80 <HW_TS_Create>

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 800c3e4:	4b53      	ldr	r3, [pc, #332]	@ (800c534 <APP_BLE_Init+0x250>)
 800c3e6:	2200      	movs	r2, #0
 800c3e8:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 800c3ea:	4b52      	ldr	r3, [pc, #328]	@ (800c534 <APP_BLE_Init+0x250>)
 800c3ec:	2200      	movs	r2, #0
 800c3ee:	761a      	strb	r2, [r3, #24]

  /* Initialize intervals for reconnexion without intervals update */
  AdvIntervalMin = CFG_FAST_CONN_ADV_INTERVAL_MIN;
 800c3f0:	4b5b      	ldr	r3, [pc, #364]	@ (800c560 <APP_BLE_Init+0x27c>)
 800c3f2:	2280      	movs	r2, #128	@ 0x80
 800c3f4:	801a      	strh	r2, [r3, #0]
  AdvIntervalMax = CFG_FAST_CONN_ADV_INTERVAL_MAX;
 800c3f6:	4b5b      	ldr	r3, [pc, #364]	@ (800c564 <APP_BLE_Init+0x280>)
 800c3f8:	22a0      	movs	r2, #160	@ 0xa0
 800c3fa:	801a      	strh	r2, [r3, #0]

  /**
   * Start to Advertise to be connected by P2P Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 800c3fc:	2001      	movs	r0, #1
 800c3fe:	f000 ffc7 	bl	800d390 <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */
   /* Displays the board information: MAC Address, Stack version, FUS version*/ 
   if (SHCI_GetWirelessFwInfo(p_wireless_info) != SHCI_Success)
 800c402:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 800c406:	f7fe fc2f 	bl	800ac68 <SHCI_GetWirelessFwInfo>
 800c40a:	4603      	mov	r3, r0
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d15a      	bne.n	800c4c6 <APP_BLE_Init+0x1e2>
   {
     // Error
   }
   else
   {
     bdaddr= BleGetBdAddress();
 800c410:	f001 f86a 	bl	800d4e8 <BleGetBdAddress>
 800c414:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
     sprintf(BdAddress, "BD_ad=%02x%02x%02x%02x%02x%02x", bdaddr[5],bdaddr[4],bdaddr[3],bdaddr[2],bdaddr[1],bdaddr[0]);
 800c418:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c41c:	3305      	adds	r3, #5
 800c41e:	781b      	ldrb	r3, [r3, #0]
 800c420:	461d      	mov	r5, r3
 800c422:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c426:	3304      	adds	r3, #4
 800c428:	781b      	ldrb	r3, [r3, #0]
 800c42a:	461e      	mov	r6, r3
 800c42c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c430:	3303      	adds	r3, #3
 800c432:	781b      	ldrb	r3, [r3, #0]
 800c434:	461a      	mov	r2, r3
 800c436:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c43a:	3302      	adds	r3, #2
 800c43c:	781b      	ldrb	r3, [r3, #0]
 800c43e:	4619      	mov	r1, r3
 800c440:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c444:	3301      	adds	r3, #1
 800c446:	781b      	ldrb	r3, [r3, #0]
 800c448:	461c      	mov	r4, r3
 800c44a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c44e:	781b      	ldrb	r3, [r3, #0]
 800c450:	f107 007c 	add.w	r0, r7, #124	@ 0x7c
 800c454:	9303      	str	r3, [sp, #12]
 800c456:	9402      	str	r4, [sp, #8]
 800c458:	9101      	str	r1, [sp, #4]
 800c45a:	9200      	str	r2, [sp, #0]
 800c45c:	4633      	mov	r3, r6
 800c45e:	462a      	mov	r2, r5
 800c460:	4941      	ldr	r1, [pc, #260]	@ (800c568 <APP_BLE_Init+0x284>)
 800c462:	f002 f90b 	bl	800e67c <siprintf>
     sprintf(StackVersion, "BLE Stack=v%d.%d.%d", p_wireless_info->VersionMajor, p_wireless_info->VersionMinor, p_wireless_info->VersionSub);
 800c466:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c46a:	781b      	ldrb	r3, [r3, #0]
 800c46c:	461a      	mov	r2, r3
 800c46e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c472:	785b      	ldrb	r3, [r3, #1]
 800c474:	4619      	mov	r1, r3
 800c476:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c47a:	789b      	ldrb	r3, [r3, #2]
 800c47c:	f107 0064 	add.w	r0, r7, #100	@ 0x64
 800c480:	9300      	str	r3, [sp, #0]
 800c482:	460b      	mov	r3, r1
 800c484:	4939      	ldr	r1, [pc, #228]	@ (800c56c <APP_BLE_Init+0x288>)
 800c486:	f002 f8f9 	bl	800e67c <siprintf>
     sprintf(StackBranch, "Branch=%d Type=%d", p_wireless_info->VersionBranch, p_wireless_info->VersionReleaseType);
 800c48a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c48e:	78db      	ldrb	r3, [r3, #3]
 800c490:	461a      	mov	r2, r3
 800c492:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c496:	791b      	ldrb	r3, [r3, #4]
 800c498:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 800c49c:	4934      	ldr	r1, [pc, #208]	@ (800c570 <APP_BLE_Init+0x28c>)
 800c49e:	f002 f8ed 	bl	800e67c <siprintf>
     sprintf(FusVersion, "FUS v%d.%d.%d", p_wireless_info->FusVersionMajor, p_wireless_info->FusVersionMinor, p_wireless_info->FusVersionSub);
 800c4a2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c4a6:	7a9b      	ldrb	r3, [r3, #10]
 800c4a8:	461a      	mov	r2, r3
 800c4aa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c4ae:	7adb      	ldrb	r3, [r3, #11]
 800c4b0:	4619      	mov	r1, r3
 800c4b2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c4b6:	7b1b      	ldrb	r3, [r3, #12]
 800c4b8:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 800c4bc:	9300      	str	r3, [sp, #0]
 800c4be:	460b      	mov	r3, r1
 800c4c0:	492c      	ldr	r1, [pc, #176]	@ (800c574 <APP_BLE_Init+0x290>)
 800c4c2:	f002 f8db 	bl	800e67c <siprintf>
     
   }
   HAL_Delay(4000);
 800c4c6:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 800c4ca:	f7f4 ff67 	bl	800139c <HAL_Delay>
   /* Displays Application */
   
   sprintf(BdAddress, "BD_ad=%02x%02x%02x%02x%02x%02x", bdaddr[5],bdaddr[4],bdaddr[3],bdaddr[2],bdaddr[1],bdaddr[0]);
 800c4ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c4d2:	3305      	adds	r3, #5
 800c4d4:	781b      	ldrb	r3, [r3, #0]
 800c4d6:	461d      	mov	r5, r3
 800c4d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c4dc:	3304      	adds	r3, #4
 800c4de:	781b      	ldrb	r3, [r3, #0]
 800c4e0:	461e      	mov	r6, r3
 800c4e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c4e6:	3303      	adds	r3, #3
 800c4e8:	781b      	ldrb	r3, [r3, #0]
 800c4ea:	461a      	mov	r2, r3
 800c4ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c4f0:	3302      	adds	r3, #2
 800c4f2:	781b      	ldrb	r3, [r3, #0]
 800c4f4:	4619      	mov	r1, r3
 800c4f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c4fa:	3301      	adds	r3, #1
 800c4fc:	781b      	ldrb	r3, [r3, #0]
 800c4fe:	461c      	mov	r4, r3
 800c500:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c504:	781b      	ldrb	r3, [r3, #0]
 800c506:	f107 007c 	add.w	r0, r7, #124	@ 0x7c
 800c50a:	9303      	str	r3, [sp, #12]
 800c50c:	9402      	str	r4, [sp, #8]
 800c50e:	9101      	str	r1, [sp, #4]
 800c510:	9200      	str	r2, [sp, #0]
 800c512:	4633      	mov	r3, r6
 800c514:	462a      	mov	r2, r5
 800c516:	4914      	ldr	r1, [pc, #80]	@ (800c568 <APP_BLE_Init+0x284>)
 800c518:	f002 f8b0 	bl	800e67c <siprintf>

  /* USER CODE END APP_BLE_Init_2 */

  return;
 800c51c:	bf00      	nop
}
 800c51e:	37b4      	adds	r7, #180	@ 0xb4
 800c520:	46bd      	mov	sp, r7
 800c522:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c524:	0800fcec 	.word	0x0800fcec
 800c528:	0800adfd 	.word	0x0800adfd
 800c52c:	0800fbb8 	.word	0x0800fbb8
 800c530:	0800fbf0 	.word	0x0800fbf0
 800c534:	200004e4 	.word	0x200004e4
 800c538:	0800d571 	.word	0x0800d571
 800c53c:	0800d6b1 	.word	0x0800d6b1
 800c540:	0800fc18 	.word	0x0800fc18
 800c544:	0800fc5c 	.word	0x0800fc5c
 800c548:	2000057c 	.word	0x2000057c
 800c54c:	2000057d 	.word	0x2000057d
 800c550:	0800d5c9 	.word	0x0800d5c9
 800c554:	20000569 	.word	0x20000569
 800c558:	0800d5d9 	.word	0x0800d5d9
 800c55c:	2000056a 	.word	0x2000056a
 800c560:	20000574 	.word	0x20000574
 800c564:	20000576 	.word	0x20000576
 800c568:	0800fc94 	.word	0x0800fc94
 800c56c:	0800fcb4 	.word	0x0800fcb4
 800c570:	0800fcc8 	.word	0x0800fcc8
 800c574:	0800fcdc 	.word	0x0800fcdc

0800c578 <Add_EEG_Stream_Notify_Service>:




static tBleStatus Add_EEG_Stream_Notify_Service(void)
{
 800c578:	b580      	push	{r7, lr}
 800c57a:	b090      	sub	sp, #64	@ 0x40
 800c57c:	af06      	add	r7, sp, #24
    tBleStatus ret = BLE_STATUS_SUCCESS;
 800c57e:	2300      	movs	r3, #0
 800c580:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    uint8_t eeg_service_uuid[16];
    uint8_t eeg_stream_char_uuid[16];

    // Add service
    COPY_EEG_SERVICE_UUID(eeg_service_uuid);
 800c584:	231b      	movs	r3, #27
 800c586:	753b      	strb	r3, [r7, #20]
 800c588:	23c5      	movs	r3, #197	@ 0xc5
 800c58a:	757b      	strb	r3, [r7, #21]
 800c58c:	23d5      	movs	r3, #213	@ 0xd5
 800c58e:	75bb      	strb	r3, [r7, #22]
 800c590:	23a5      	movs	r3, #165	@ 0xa5
 800c592:	75fb      	strb	r3, [r7, #23]
 800c594:	2302      	movs	r3, #2
 800c596:	763b      	strb	r3, [r7, #24]
 800c598:	2300      	movs	r3, #0
 800c59a:	767b      	strb	r3, [r7, #25]
 800c59c:	2351      	movs	r3, #81	@ 0x51
 800c59e:	76bb      	strb	r3, [r7, #26]
 800c5a0:	23a1      	movs	r3, #161	@ 0xa1
 800c5a2:	76fb      	strb	r3, [r7, #27]
 800c5a4:	23e5      	movs	r3, #229	@ 0xe5
 800c5a6:	773b      	strb	r3, [r7, #28]
 800c5a8:	2311      	movs	r3, #17
 800c5aa:	777b      	strb	r3, [r7, #29]
 800c5ac:	2367      	movs	r3, #103	@ 0x67
 800c5ae:	77bb      	strb	r3, [r7, #30]
 800c5b0:	2349      	movs	r3, #73	@ 0x49
 800c5b2:	77fb      	strb	r3, [r7, #31]
 800c5b4:	23e0      	movs	r3, #224	@ 0xe0
 800c5b6:	f887 3020 	strb.w	r3, [r7, #32]
 800c5ba:	2380      	movs	r3, #128	@ 0x80
 800c5bc:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
 800c5c0:	23a4      	movs	r3, #164	@ 0xa4
 800c5c2:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800c5c6:	239f      	movs	r3, #159	@ 0x9f
 800c5c8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    ret = aci_gatt_add_service(UUID_TYPE_128,
 800c5cc:	f107 0114 	add.w	r1, r7, #20
 800c5d0:	4b30      	ldr	r3, [pc, #192]	@ (800c694 <Add_EEG_Stream_Notify_Service+0x11c>)
 800c5d2:	9300      	str	r3, [sp, #0]
 800c5d4:	2305      	movs	r3, #5
 800c5d6:	2201      	movs	r2, #1
 800c5d8:	2002      	movs	r0, #2
 800c5da:	f7fd fadf 	bl	8009b9c <aci_gatt_add_service>
 800c5de:	4603      	mov	r3, r0
 800c5e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                              (Service_UUID_t *) eeg_service_uuid,
                              PRIMARY_SERVICE,
							  2 + 3, /* 2 for service + 3 for 1 characteristic */
                              &(BleApplicationContext.BleApplicationContext_legacy.eeg_service_handle));

    if (ret != BLE_STATUS_SUCCESS)
 800c5e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d008      	beq.n	800c5fe <Add_EEG_Stream_Notify_Service+0x86>
    {
        APP_DBG_MSG("Error adding New Notify Service - ret=0x%x\n", ret);
 800c5ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c5f0:	4619      	mov	r1, r3
 800c5f2:	4829      	ldr	r0, [pc, #164]	@ (800c698 <Add_EEG_Stream_Notify_Service+0x120>)
 800c5f4:	f001 ffca 	bl	800e58c <iprintf>
        return ret;
 800c5f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c5fc:	e045      	b.n	800c68a <Add_EEG_Stream_Notify_Service+0x112>
    }

    // Add characteristic
    COPY_EEG_DATA_UUID(eeg_stream_char_uuid);
 800c5fe:	231b      	movs	r3, #27
 800c600:	713b      	strb	r3, [r7, #4]
 800c602:	23c5      	movs	r3, #197	@ 0xc5
 800c604:	717b      	strb	r3, [r7, #5]
 800c606:	23d5      	movs	r3, #213	@ 0xd5
 800c608:	71bb      	strb	r3, [r7, #6]
 800c60a:	23a5      	movs	r3, #165	@ 0xa5
 800c60c:	71fb      	strb	r3, [r7, #7]
 800c60e:	2302      	movs	r3, #2
 800c610:	723b      	strb	r3, [r7, #8]
 800c612:	2300      	movs	r3, #0
 800c614:	727b      	strb	r3, [r7, #9]
 800c616:	2351      	movs	r3, #81	@ 0x51
 800c618:	72bb      	strb	r3, [r7, #10]
 800c61a:	23a1      	movs	r3, #161	@ 0xa1
 800c61c:	72fb      	strb	r3, [r7, #11]
 800c61e:	23e5      	movs	r3, #229	@ 0xe5
 800c620:	733b      	strb	r3, [r7, #12]
 800c622:	2311      	movs	r3, #17
 800c624:	737b      	strb	r3, [r7, #13]
 800c626:	2367      	movs	r3, #103	@ 0x67
 800c628:	73bb      	strb	r3, [r7, #14]
 800c62a:	2349      	movs	r3, #73	@ 0x49
 800c62c:	73fb      	strb	r3, [r7, #15]
 800c62e:	23e1      	movs	r3, #225	@ 0xe1
 800c630:	743b      	strb	r3, [r7, #16]
 800c632:	2380      	movs	r3, #128	@ 0x80
 800c634:	747b      	strb	r3, [r7, #17]
 800c636:	23a4      	movs	r3, #164	@ 0xa4
 800c638:	74bb      	strb	r3, [r7, #18]
 800c63a:	239f      	movs	r3, #159	@ 0x9f
 800c63c:	74fb      	strb	r3, [r7, #19]
    ret = aci_gatt_add_char(BleApplicationContext.BleApplicationContext_legacy.eeg_service_handle,
 800c63e:	4b17      	ldr	r3, [pc, #92]	@ (800c69c <Add_EEG_Stream_Notify_Service+0x124>)
 800c640:	f8b3 007e 	ldrh.w	r0, [r3, #126]	@ 0x7e
 800c644:	1d3a      	adds	r2, r7, #4
 800c646:	4b16      	ldr	r3, [pc, #88]	@ (800c6a0 <Add_EEG_Stream_Notify_Service+0x128>)
 800c648:	9305      	str	r3, [sp, #20]
 800c64a:	2301      	movs	r3, #1
 800c64c:	9304      	str	r3, [sp, #16]
 800c64e:	230a      	movs	r3, #10
 800c650:	9303      	str	r3, [sp, #12]
 800c652:	2301      	movs	r3, #1
 800c654:	9302      	str	r3, [sp, #8]
 800c656:	2300      	movs	r3, #0
 800c658:	9301      	str	r3, [sp, #4]
 800c65a:	2310      	movs	r3, #16
 800c65c:	9300      	str	r3, [sp, #0]
 800c65e:	23f1      	movs	r3, #241	@ 0xf1
 800c660:	2102      	movs	r1, #2
 800c662:	f7fd fb71 	bl	8009d48 <aci_gatt_add_char>
 800c666:	4603      	mov	r3, r0
 800c668:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                           GATT_NOTIFY_ATTRIBUTE_WRITE,
                           10,
                           CHAR_VALUE_LEN_VARIABLE,
                           &(BleApplicationContext.eeg_data_char_handle));

    if (ret != BLE_STATUS_SUCCESS)
 800c66c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c670:	2b00      	cmp	r3, #0
 800c672:	d008      	beq.n	800c686 <Add_EEG_Stream_Notify_Service+0x10e>
    {
        APP_DBG_MSG("Error adding New Notify Characteristic - ret=0x%x\n", ret);
 800c674:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c678:	4619      	mov	r1, r3
 800c67a:	480a      	ldr	r0, [pc, #40]	@ (800c6a4 <Add_EEG_Stream_Notify_Service+0x12c>)
 800c67c:	f001 ff86 	bl	800e58c <iprintf>
        return ret;
 800c680:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c684:	e001      	b.n	800c68a <Add_EEG_Stream_Notify_Service+0x112>
    }


    return ret;
 800c686:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800c68a:	4618      	mov	r0, r3
 800c68c:	3728      	adds	r7, #40	@ 0x28
 800c68e:	46bd      	mov	sp, r7
 800c690:	bd80      	pop	{r7, pc}
 800c692:	bf00      	nop
 800c694:	20000562 	.word	0x20000562
 800c698:	0800fd28 	.word	0x0800fd28
 800c69c:	200004e4 	.word	0x200004e4
 800c6a0:	2000056c 	.word	0x2000056c
 800c6a4:	0800fd54 	.word	0x0800fd54

0800c6a8 <Add_Event_Notify_Service>:



static tBleStatus Add_Event_Notify_Service(void)
{
 800c6a8:	b580      	push	{r7, lr}
 800c6aa:	b090      	sub	sp, #64	@ 0x40
 800c6ac:	af06      	add	r7, sp, #24
    tBleStatus ret = BLE_STATUS_SUCCESS;
 800c6ae:	2300      	movs	r3, #0
 800c6b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    uint8_t event_service_uuid[16];
    uint8_t event_char_uuid[16];

    // Add service
    COPY_EVENT_SERVICE_UUID(event_service_uuid);
 800c6b4:	231b      	movs	r3, #27
 800c6b6:	753b      	strb	r3, [r7, #20]
 800c6b8:	23c5      	movs	r3, #197	@ 0xc5
 800c6ba:	757b      	strb	r3, [r7, #21]
 800c6bc:	23d5      	movs	r3, #213	@ 0xd5
 800c6be:	75bb      	strb	r3, [r7, #22]
 800c6c0:	23a5      	movs	r3, #165	@ 0xa5
 800c6c2:	75fb      	strb	r3, [r7, #23]
 800c6c4:	2302      	movs	r3, #2
 800c6c6:	763b      	strb	r3, [r7, #24]
 800c6c8:	2300      	movs	r3, #0
 800c6ca:	767b      	strb	r3, [r7, #25]
 800c6cc:	2351      	movs	r3, #81	@ 0x51
 800c6ce:	76bb      	strb	r3, [r7, #26]
 800c6d0:	23a1      	movs	r3, #161	@ 0xa1
 800c6d2:	76fb      	strb	r3, [r7, #27]
 800c6d4:	23e5      	movs	r3, #229	@ 0xe5
 800c6d6:	773b      	strb	r3, [r7, #28]
 800c6d8:	2311      	movs	r3, #17
 800c6da:	777b      	strb	r3, [r7, #29]
 800c6dc:	2367      	movs	r3, #103	@ 0x67
 800c6de:	77bb      	strb	r3, [r7, #30]
 800c6e0:	2349      	movs	r3, #73	@ 0x49
 800c6e2:	77fb      	strb	r3, [r7, #31]
 800c6e4:	2300      	movs	r3, #0
 800c6e6:	f887 3020 	strb.w	r3, [r7, #32]
 800c6ea:	2383      	movs	r3, #131	@ 0x83
 800c6ec:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
 800c6f0:	23a4      	movs	r3, #164	@ 0xa4
 800c6f2:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800c6f6:	239f      	movs	r3, #159	@ 0x9f
 800c6f8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    ret = aci_gatt_add_service(UUID_TYPE_128,
 800c6fc:	f107 0114 	add.w	r1, r7, #20
 800c700:	4b30      	ldr	r3, [pc, #192]	@ (800c7c4 <Add_Event_Notify_Service+0x11c>)
 800c702:	9300      	str	r3, [sp, #0]
 800c704:	2305      	movs	r3, #5
 800c706:	2201      	movs	r2, #1
 800c708:	2002      	movs	r0, #2
 800c70a:	f7fd fa47 	bl	8009b9c <aci_gatt_add_service>
 800c70e:	4603      	mov	r3, r0
 800c710:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                              (Service_UUID_t *) event_service_uuid,
                              PRIMARY_SERVICE,
                              2 + 3, /* 2 for service + 3 for 1 characteristic */
                              &(BleApplicationContext.BleApplicationContext_legacy.event_service_handle));

    if (ret != BLE_STATUS_SUCCESS)
 800c714:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d008      	beq.n	800c72e <Add_Event_Notify_Service+0x86>
    {
        APP_DBG_MSG("Error adding New Notify Service - ret=0x%x\n", ret);
 800c71c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c720:	4619      	mov	r1, r3
 800c722:	4829      	ldr	r0, [pc, #164]	@ (800c7c8 <Add_Event_Notify_Service+0x120>)
 800c724:	f001 ff32 	bl	800e58c <iprintf>
        return ret;
 800c728:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c72c:	e045      	b.n	800c7ba <Add_Event_Notify_Service+0x112>
    }

    // Add characteristic
    COPY_EVENT_UUID(event_char_uuid);
 800c72e:	231b      	movs	r3, #27
 800c730:	713b      	strb	r3, [r7, #4]
 800c732:	23c5      	movs	r3, #197	@ 0xc5
 800c734:	717b      	strb	r3, [r7, #5]
 800c736:	23d5      	movs	r3, #213	@ 0xd5
 800c738:	71bb      	strb	r3, [r7, #6]
 800c73a:	23a5      	movs	r3, #165	@ 0xa5
 800c73c:	71fb      	strb	r3, [r7, #7]
 800c73e:	2302      	movs	r3, #2
 800c740:	723b      	strb	r3, [r7, #8]
 800c742:	2300      	movs	r3, #0
 800c744:	727b      	strb	r3, [r7, #9]
 800c746:	2351      	movs	r3, #81	@ 0x51
 800c748:	72bb      	strb	r3, [r7, #10]
 800c74a:	23a1      	movs	r3, #161	@ 0xa1
 800c74c:	72fb      	strb	r3, [r7, #11]
 800c74e:	23e5      	movs	r3, #229	@ 0xe5
 800c750:	733b      	strb	r3, [r7, #12]
 800c752:	2311      	movs	r3, #17
 800c754:	737b      	strb	r3, [r7, #13]
 800c756:	2367      	movs	r3, #103	@ 0x67
 800c758:	73bb      	strb	r3, [r7, #14]
 800c75a:	2349      	movs	r3, #73	@ 0x49
 800c75c:	73fb      	strb	r3, [r7, #15]
 800c75e:	2301      	movs	r3, #1
 800c760:	743b      	strb	r3, [r7, #16]
 800c762:	2383      	movs	r3, #131	@ 0x83
 800c764:	747b      	strb	r3, [r7, #17]
 800c766:	23a4      	movs	r3, #164	@ 0xa4
 800c768:	74bb      	strb	r3, [r7, #18]
 800c76a:	239f      	movs	r3, #159	@ 0x9f
 800c76c:	74fb      	strb	r3, [r7, #19]
    ret = aci_gatt_add_char(BleApplicationContext.BleApplicationContext_legacy.event_service_handle,
 800c76e:	4b17      	ldr	r3, [pc, #92]	@ (800c7cc <Add_Event_Notify_Service+0x124>)
 800c770:	f8b3 0080 	ldrh.w	r0, [r3, #128]	@ 0x80
 800c774:	1d3a      	adds	r2, r7, #4
 800c776:	4b16      	ldr	r3, [pc, #88]	@ (800c7d0 <Add_Event_Notify_Service+0x128>)
 800c778:	9305      	str	r3, [sp, #20]
 800c77a:	2301      	movs	r3, #1
 800c77c:	9304      	str	r3, [sp, #16]
 800c77e:	230a      	movs	r3, #10
 800c780:	9303      	str	r3, [sp, #12]
 800c782:	2301      	movs	r3, #1
 800c784:	9302      	str	r3, [sp, #8]
 800c786:	2300      	movs	r3, #0
 800c788:	9301      	str	r3, [sp, #4]
 800c78a:	2310      	movs	r3, #16
 800c78c:	9300      	str	r3, [sp, #0]
 800c78e:	2304      	movs	r3, #4
 800c790:	2102      	movs	r1, #2
 800c792:	f7fd fad9 	bl	8009d48 <aci_gatt_add_char>
 800c796:	4603      	mov	r3, r0
 800c798:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                           GATT_NOTIFY_ATTRIBUTE_WRITE,
                           10,
                           CHAR_VALUE_LEN_VARIABLE,
                           &(BleApplicationContext.event_char_handle));

    if (ret != BLE_STATUS_SUCCESS)
 800c79c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d008      	beq.n	800c7b6 <Add_Event_Notify_Service+0x10e>
    {
        APP_DBG_MSG("Error adding New Notify Characteristic - ret=0x%x\n", ret);
 800c7a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c7a8:	4619      	mov	r1, r3
 800c7aa:	480a      	ldr	r0, [pc, #40]	@ (800c7d4 <Add_Event_Notify_Service+0x12c>)
 800c7ac:	f001 feee 	bl	800e58c <iprintf>
        return ret;
 800c7b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c7b4:	e001      	b.n	800c7ba <Add_Event_Notify_Service+0x112>
    }


    return ret;
 800c7b6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800c7ba:	4618      	mov	r0, r3
 800c7bc:	3728      	adds	r7, #40	@ 0x28
 800c7be:	46bd      	mov	sp, r7
 800c7c0:	bd80      	pop	{r7, pc}
 800c7c2:	bf00      	nop
 800c7c4:	20000564 	.word	0x20000564
 800c7c8:	0800fd28 	.word	0x0800fd28
 800c7cc:	200004e4 	.word	0x200004e4
 800c7d0:	2000056e 	.word	0x2000056e
 800c7d4:	0800fd54 	.word	0x0800fd54

0800c7d8 <Add_Motion_Notify_Service>:



static tBleStatus Add_Motion_Notify_Service(void)
{
 800c7d8:	b580      	push	{r7, lr}
 800c7da:	b094      	sub	sp, #80	@ 0x50
 800c7dc:	af06      	add	r7, sp, #24
    tBleStatus ret = BLE_STATUS_SUCCESS;
 800c7de:	2300      	movs	r3, #0
 800c7e0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    uint8_t motion_service_uuid[16];
    uint8_t accel_char_uuid[16];
    uint8_t gyro_char_uuid[16];

    // Add service
    COPY_MOTION_SERVICE_UUID(motion_service_uuid);
 800c7e4:	231b      	movs	r3, #27
 800c7e6:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 800c7ea:	23c5      	movs	r3, #197	@ 0xc5
 800c7ec:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800c7f0:	23d5      	movs	r3, #213	@ 0xd5
 800c7f2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800c7f6:	23a5      	movs	r3, #165	@ 0xa5
 800c7f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c7fc:	2302      	movs	r3, #2
 800c7fe:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 800c802:	2300      	movs	r3, #0
 800c804:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 800c808:	2351      	movs	r3, #81	@ 0x51
 800c80a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800c80e:	23a1      	movs	r3, #161	@ 0xa1
 800c810:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c814:	23e5      	movs	r3, #229	@ 0xe5
 800c816:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 800c81a:	2311      	movs	r3, #17
 800c81c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 800c820:	2367      	movs	r3, #103	@ 0x67
 800c822:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800c826:	2349      	movs	r3, #73	@ 0x49
 800c828:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800c82c:	2300      	movs	r3, #0
 800c82e:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
 800c832:	2382      	movs	r3, #130	@ 0x82
 800c834:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
 800c838:	23a4      	movs	r3, #164	@ 0xa4
 800c83a:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
 800c83e:	239f      	movs	r3, #159	@ 0x9f
 800c840:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    ret = aci_gatt_add_service(UUID_TYPE_128,
 800c844:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 800c848:	4b54      	ldr	r3, [pc, #336]	@ (800c99c <Add_Motion_Notify_Service+0x1c4>)
 800c84a:	9300      	str	r3, [sp, #0]
 800c84c:	2308      	movs	r3, #8
 800c84e:	2201      	movs	r2, #1
 800c850:	2002      	movs	r0, #2
 800c852:	f7fd f9a3 	bl	8009b9c <aci_gatt_add_service>
 800c856:	4603      	mov	r3, r0
 800c858:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                              (Service_UUID_t *) motion_service_uuid,
                              PRIMARY_SERVICE,
                              2 + 3 + 3, /* 2 for service + 6 for 2 characteristic */
                              &(BleApplicationContext.BleApplicationContext_legacy.motion_service_handle));

    if (ret != BLE_STATUS_SUCCESS)
 800c85c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c860:	2b00      	cmp	r3, #0
 800c862:	d008      	beq.n	800c876 <Add_Motion_Notify_Service+0x9e>
    {
        APP_DBG_MSG("Error adding New Notify Service - ret=0x%x\n", ret);
 800c864:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c868:	4619      	mov	r1, r3
 800c86a:	484d      	ldr	r0, [pc, #308]	@ (800c9a0 <Add_Motion_Notify_Service+0x1c8>)
 800c86c:	f001 fe8e 	bl	800e58c <iprintf>
        return ret;
 800c870:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c874:	e08e      	b.n	800c994 <Add_Motion_Notify_Service+0x1bc>
    }

    // Add characteristic
    COPY_ACCEL_UUID(accel_char_uuid);
 800c876:	231b      	movs	r3, #27
 800c878:	753b      	strb	r3, [r7, #20]
 800c87a:	23c5      	movs	r3, #197	@ 0xc5
 800c87c:	757b      	strb	r3, [r7, #21]
 800c87e:	23d5      	movs	r3, #213	@ 0xd5
 800c880:	75bb      	strb	r3, [r7, #22]
 800c882:	23a5      	movs	r3, #165	@ 0xa5
 800c884:	75fb      	strb	r3, [r7, #23]
 800c886:	2302      	movs	r3, #2
 800c888:	763b      	strb	r3, [r7, #24]
 800c88a:	2300      	movs	r3, #0
 800c88c:	767b      	strb	r3, [r7, #25]
 800c88e:	2351      	movs	r3, #81	@ 0x51
 800c890:	76bb      	strb	r3, [r7, #26]
 800c892:	23a1      	movs	r3, #161	@ 0xa1
 800c894:	76fb      	strb	r3, [r7, #27]
 800c896:	23e5      	movs	r3, #229	@ 0xe5
 800c898:	773b      	strb	r3, [r7, #28]
 800c89a:	2311      	movs	r3, #17
 800c89c:	777b      	strb	r3, [r7, #29]
 800c89e:	2367      	movs	r3, #103	@ 0x67
 800c8a0:	77bb      	strb	r3, [r7, #30]
 800c8a2:	2349      	movs	r3, #73	@ 0x49
 800c8a4:	77fb      	strb	r3, [r7, #31]
 800c8a6:	2301      	movs	r3, #1
 800c8a8:	f887 3020 	strb.w	r3, [r7, #32]
 800c8ac:	2382      	movs	r3, #130	@ 0x82
 800c8ae:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
 800c8b2:	23a4      	movs	r3, #164	@ 0xa4
 800c8b4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800c8b8:	239f      	movs	r3, #159	@ 0x9f
 800c8ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    ret = aci_gatt_add_char(BleApplicationContext.BleApplicationContext_legacy.motion_service_handle,
 800c8be:	4b39      	ldr	r3, [pc, #228]	@ (800c9a4 <Add_Motion_Notify_Service+0x1cc>)
 800c8c0:	f8b3 0082 	ldrh.w	r0, [r3, #130]	@ 0x82
 800c8c4:	f107 0214 	add.w	r2, r7, #20
 800c8c8:	4b37      	ldr	r3, [pc, #220]	@ (800c9a8 <Add_Motion_Notify_Service+0x1d0>)
 800c8ca:	9305      	str	r3, [sp, #20]
 800c8cc:	2301      	movs	r3, #1
 800c8ce:	9304      	str	r3, [sp, #16]
 800c8d0:	230a      	movs	r3, #10
 800c8d2:	9303      	str	r3, [sp, #12]
 800c8d4:	2301      	movs	r3, #1
 800c8d6:	9302      	str	r3, [sp, #8]
 800c8d8:	2300      	movs	r3, #0
 800c8da:	9301      	str	r3, [sp, #4]
 800c8dc:	2310      	movs	r3, #16
 800c8de:	9300      	str	r3, [sp, #0]
 800c8e0:	2306      	movs	r3, #6
 800c8e2:	2102      	movs	r1, #2
 800c8e4:	f7fd fa30 	bl	8009d48 <aci_gatt_add_char>
 800c8e8:	4603      	mov	r3, r0
 800c8ea:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                           GATT_NOTIFY_ATTRIBUTE_WRITE,
                           10,
                           CHAR_VALUE_LEN_VARIABLE,
                           &(BleApplicationContext.accel_char_handle));

    if (ret != BLE_STATUS_SUCCESS)
 800c8ee:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d008      	beq.n	800c908 <Add_Motion_Notify_Service+0x130>
    {
        APP_DBG_MSG("Error adding New Notify Characteristic - ret=0x%x\n", ret);
 800c8f6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c8fa:	4619      	mov	r1, r3
 800c8fc:	482b      	ldr	r0, [pc, #172]	@ (800c9ac <Add_Motion_Notify_Service+0x1d4>)
 800c8fe:	f001 fe45 	bl	800e58c <iprintf>
        return ret;
 800c902:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c906:	e045      	b.n	800c994 <Add_Motion_Notify_Service+0x1bc>
    }


    // Add characteristic
    COPY_GYRO_UUID(gyro_char_uuid);
 800c908:	231b      	movs	r3, #27
 800c90a:	713b      	strb	r3, [r7, #4]
 800c90c:	23c5      	movs	r3, #197	@ 0xc5
 800c90e:	717b      	strb	r3, [r7, #5]
 800c910:	23d5      	movs	r3, #213	@ 0xd5
 800c912:	71bb      	strb	r3, [r7, #6]
 800c914:	23a5      	movs	r3, #165	@ 0xa5
 800c916:	71fb      	strb	r3, [r7, #7]
 800c918:	2302      	movs	r3, #2
 800c91a:	723b      	strb	r3, [r7, #8]
 800c91c:	2300      	movs	r3, #0
 800c91e:	727b      	strb	r3, [r7, #9]
 800c920:	2351      	movs	r3, #81	@ 0x51
 800c922:	72bb      	strb	r3, [r7, #10]
 800c924:	23a1      	movs	r3, #161	@ 0xa1
 800c926:	72fb      	strb	r3, [r7, #11]
 800c928:	23e5      	movs	r3, #229	@ 0xe5
 800c92a:	733b      	strb	r3, [r7, #12]
 800c92c:	2311      	movs	r3, #17
 800c92e:	737b      	strb	r3, [r7, #13]
 800c930:	2367      	movs	r3, #103	@ 0x67
 800c932:	73bb      	strb	r3, [r7, #14]
 800c934:	2349      	movs	r3, #73	@ 0x49
 800c936:	73fb      	strb	r3, [r7, #15]
 800c938:	2302      	movs	r3, #2
 800c93a:	743b      	strb	r3, [r7, #16]
 800c93c:	2382      	movs	r3, #130	@ 0x82
 800c93e:	747b      	strb	r3, [r7, #17]
 800c940:	23a4      	movs	r3, #164	@ 0xa4
 800c942:	74bb      	strb	r3, [r7, #18]
 800c944:	239f      	movs	r3, #159	@ 0x9f
 800c946:	74fb      	strb	r3, [r7, #19]
    ret = aci_gatt_add_char(BleApplicationContext.BleApplicationContext_legacy.motion_service_handle,
 800c948:	4b16      	ldr	r3, [pc, #88]	@ (800c9a4 <Add_Motion_Notify_Service+0x1cc>)
 800c94a:	f8b3 0082 	ldrh.w	r0, [r3, #130]	@ 0x82
 800c94e:	1d3a      	adds	r2, r7, #4
 800c950:	4b17      	ldr	r3, [pc, #92]	@ (800c9b0 <Add_Motion_Notify_Service+0x1d8>)
 800c952:	9305      	str	r3, [sp, #20]
 800c954:	2301      	movs	r3, #1
 800c956:	9304      	str	r3, [sp, #16]
 800c958:	230a      	movs	r3, #10
 800c95a:	9303      	str	r3, [sp, #12]
 800c95c:	2301      	movs	r3, #1
 800c95e:	9302      	str	r3, [sp, #8]
 800c960:	2300      	movs	r3, #0
 800c962:	9301      	str	r3, [sp, #4]
 800c964:	2310      	movs	r3, #16
 800c966:	9300      	str	r3, [sp, #0]
 800c968:	2306      	movs	r3, #6
 800c96a:	2102      	movs	r1, #2
 800c96c:	f7fd f9ec 	bl	8009d48 <aci_gatt_add_char>
 800c970:	4603      	mov	r3, r0
 800c972:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                           GATT_NOTIFY_ATTRIBUTE_WRITE,
                           10,
                           CHAR_VALUE_LEN_VARIABLE,
                           &(BleApplicationContext.gyro_char_handle));

    if (ret != BLE_STATUS_SUCCESS)
 800c976:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d008      	beq.n	800c990 <Add_Motion_Notify_Service+0x1b8>
    {
        APP_DBG_MSG("Error adding New Notify Characteristic - ret=0x%x\n", ret);
 800c97e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c982:	4619      	mov	r1, r3
 800c984:	4809      	ldr	r0, [pc, #36]	@ (800c9ac <Add_Motion_Notify_Service+0x1d4>)
 800c986:	f001 fe01 	bl	800e58c <iprintf>
        return ret;
 800c98a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c98e:	e001      	b.n	800c994 <Add_Motion_Notify_Service+0x1bc>
    }

    return ret;
 800c990:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 800c994:	4618      	mov	r0, r3
 800c996:	3738      	adds	r7, #56	@ 0x38
 800c998:	46bd      	mov	sp, r7
 800c99a:	bd80      	pop	{r7, pc}
 800c99c:	20000566 	.word	0x20000566
 800c9a0:	0800fd28 	.word	0x0800fd28
 800c9a4:	200004e4 	.word	0x200004e4
 800c9a8:	20000570 	.word	0x20000570
 800c9ac:	0800fd54 	.word	0x0800fd54
 800c9b0:	20000572 	.word	0x20000572

0800c9b4 <SVCCTL_App_Notification>:




SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 800c9b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c9b6:	b097      	sub	sp, #92	@ 0x5c
 800c9b8:	af04      	add	r7, sp, #16
 800c9ba:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  uint8_t           Tx_phy, Rx_phy;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 800c9bc:	2392      	movs	r3, #146	@ 0x92
 800c9be:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  /* USER CODE BEGIN SVCCTL_App_Notification */
    char BdAddress[20];
    const uint8_t *bdaddr; 
  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	3301      	adds	r3, #1
 800c9c6:	643b      	str	r3, [r7, #64]	@ 0x40

  switch (p_event_pckt->evt)
 800c9c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c9ca:	781b      	ldrb	r3, [r3, #0]
 800c9cc:	2bff      	cmp	r3, #255	@ 0xff
 800c9ce:	f000 8189 	beq.w	800cce4 <SVCCTL_App_Notification+0x330>
 800c9d2:	2bff      	cmp	r3, #255	@ 0xff
 800c9d4:	f300 8275 	bgt.w	800cec2 <SVCCTL_App_Notification+0x50e>
 800c9d8:	2b05      	cmp	r3, #5
 800c9da:	d002      	beq.n	800c9e2 <SVCCTL_App_Notification+0x2e>
 800c9dc:	2b3e      	cmp	r3, #62	@ 0x3e
 800c9de:	d052      	beq.n	800ca86 <SVCCTL_App_Notification+0xd2>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 800c9e0:	e26f      	b.n	800cec2 <SVCCTL_App_Notification+0x50e>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 800c9e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c9e4:	3302      	adds	r3, #2
 800c9e6:	623b      	str	r3, [r7, #32]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 800c9e8:	6a3b      	ldr	r3, [r7, #32]
 800c9ea:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800c9ee:	b29a      	uxth	r2, r3
 800c9f0:	4bac      	ldr	r3, [pc, #688]	@ (800cca4 <SVCCTL_App_Notification+0x2f0>)
 800c9f2:	8adb      	ldrh	r3, [r3, #22]
 800c9f4:	429a      	cmp	r2, r3
 800c9f6:	d114      	bne.n	800ca22 <SVCCTL_App_Notification+0x6e>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 800c9f8:	4baa      	ldr	r3, [pc, #680]	@ (800cca4 <SVCCTL_App_Notification+0x2f0>)
 800c9fa:	2200      	movs	r2, #0
 800c9fc:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800c9fe:	4ba9      	ldr	r3, [pc, #676]	@ (800cca4 <SVCCTL_App_Notification+0x2f0>)
 800ca00:	2200      	movs	r2, #0
 800ca02:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
        APP_DBG_MSG(">>== HCI_DISCONNECTION_COMPLETE_EVT_CODE\n");
 800ca06:	48a8      	ldr	r0, [pc, #672]	@ (800cca8 <SVCCTL_App_Notification+0x2f4>)
 800ca08:	f001 fe30 	bl	800e66c <puts>
                    p_disconnection_complete_event->Connection_Handle,
 800ca0c:	6a3b      	ldr	r3, [r7, #32]
 800ca0e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800ca12:	b29b      	uxth	r3, r3
        APP_DBG_MSG("     - Connection Handle:   0x%x\n     - Reason:    0x%x\n\r",
 800ca14:	4619      	mov	r1, r3
                    p_disconnection_complete_event->Reason);
 800ca16:	6a3b      	ldr	r3, [r7, #32]
 800ca18:	78db      	ldrb	r3, [r3, #3]
        APP_DBG_MSG("     - Connection Handle:   0x%x\n     - Reason:    0x%x\n\r",
 800ca1a:	461a      	mov	r2, r3
 800ca1c:	48a3      	ldr	r0, [pc, #652]	@ (800ccac <SVCCTL_App_Notification+0x2f8>)
 800ca1e:	f001 fdb5 	bl	800e58c <iprintf>
      Adv_Request(APP_BLE_FAST_ADV);
 800ca22:	2001      	movs	r0, #1
 800ca24:	f000 fcb4 	bl	800d390 <Adv_Request>
      HandleNotification.P2P_Evt_Opcode = PEER_DISCON_HANDLE_EVT;
 800ca28:	4ba1      	ldr	r3, [pc, #644]	@ (800ccb0 <SVCCTL_App_Notification+0x2fc>)
 800ca2a:	2201      	movs	r2, #1
 800ca2c:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800ca2e:	4b9d      	ldr	r3, [pc, #628]	@ (800cca4 <SVCCTL_App_Notification+0x2f0>)
 800ca30:	8ada      	ldrh	r2, [r3, #22]
 800ca32:	4b9f      	ldr	r3, [pc, #636]	@ (800ccb0 <SVCCTL_App_Notification+0x2fc>)
 800ca34:	805a      	strh	r2, [r3, #2]
      P2PS_APP_Notification(&HandleNotification);
 800ca36:	489e      	ldr	r0, [pc, #632]	@ (800ccb0 <SVCCTL_App_Notification+0x2fc>)
 800ca38:	f000 ff2c 	bl	800d894 <P2PS_APP_Notification>
      bdaddr= BleGetBdAddress();
 800ca3c:	f000 fd54 	bl	800d4e8 <BleGetBdAddress>
 800ca40:	6278      	str	r0, [r7, #36]	@ 0x24
      sprintf(BdAddress, "BD_ad=%02x%02x%02x%02x%02x%02x", bdaddr[5], bdaddr[4], bdaddr[3], bdaddr[2], bdaddr[1], bdaddr[0]);
 800ca42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca44:	3305      	adds	r3, #5
 800ca46:	781b      	ldrb	r3, [r3, #0]
 800ca48:	461d      	mov	r5, r3
 800ca4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca4c:	3304      	adds	r3, #4
 800ca4e:	781b      	ldrb	r3, [r3, #0]
 800ca50:	461e      	mov	r6, r3
 800ca52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca54:	3303      	adds	r3, #3
 800ca56:	781b      	ldrb	r3, [r3, #0]
 800ca58:	461a      	mov	r2, r3
 800ca5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca5c:	3302      	adds	r3, #2
 800ca5e:	781b      	ldrb	r3, [r3, #0]
 800ca60:	4619      	mov	r1, r3
 800ca62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca64:	3301      	adds	r3, #1
 800ca66:	781b      	ldrb	r3, [r3, #0]
 800ca68:	461c      	mov	r4, r3
 800ca6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca6c:	781b      	ldrb	r3, [r3, #0]
 800ca6e:	f107 0008 	add.w	r0, r7, #8
 800ca72:	9303      	str	r3, [sp, #12]
 800ca74:	9402      	str	r4, [sp, #8]
 800ca76:	9101      	str	r1, [sp, #4]
 800ca78:	9200      	str	r2, [sp, #0]
 800ca7a:	4633      	mov	r3, r6
 800ca7c:	462a      	mov	r2, r5
 800ca7e:	498d      	ldr	r1, [pc, #564]	@ (800ccb4 <SVCCTL_App_Notification+0x300>)
 800ca80:	f001 fdfc 	bl	800e67c <siprintf>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 800ca84:	e220      	b.n	800cec8 <SVCCTL_App_Notification+0x514>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 800ca86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ca88:	3302      	adds	r3, #2
 800ca8a:	637b      	str	r3, [r7, #52]	@ 0x34
      switch (p_meta_evt->subevent)
 800ca8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca8e:	781b      	ldrb	r3, [r3, #0]
 800ca90:	2b0c      	cmp	r3, #12
 800ca92:	d033      	beq.n	800cafc <SVCCTL_App_Notification+0x148>
 800ca94:	2b0c      	cmp	r3, #12
 800ca96:	f300 8102 	bgt.w	800cc9e <SVCCTL_App_Notification+0x2ea>
 800ca9a:	2b01      	cmp	r3, #1
 800ca9c:	d06c      	beq.n	800cb78 <SVCCTL_App_Notification+0x1c4>
 800ca9e:	2b03      	cmp	r3, #3
 800caa0:	f040 80fd 	bne.w	800cc9e <SVCCTL_App_Notification+0x2ea>
          p_connection_update_complete_event = (hci_le_connection_update_complete_event_rp0 *) p_meta_evt->data;
 800caa4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800caa6:	3301      	adds	r3, #1
 800caa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_UPDATE_COMPLETE_SUBEVT_CODE\n");
 800caaa:	4883      	ldr	r0, [pc, #524]	@ (800ccb8 <SVCCTL_App_Notification+0x304>)
 800caac:	f001 fdde 	bl	800e66c <puts>
                       p_connection_update_complete_event->Conn_Interval*1.25,
 800cab0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cab2:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800cab6:	b29b      	uxth	r3, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800cab8:	4618      	mov	r0, r3
 800caba:	f7f3 fe35 	bl	8000728 <__aeabi_i2d>
 800cabe:	f04f 0200 	mov.w	r2, #0
 800cac2:	4b7e      	ldr	r3, [pc, #504]	@ (800ccbc <SVCCTL_App_Notification+0x308>)
 800cac4:	f7f3 fbb4 	bl	8000230 <__aeabi_dmul>
 800cac8:	4602      	mov	r2, r0
 800caca:	460b      	mov	r3, r1
 800cacc:	4610      	mov	r0, r2
 800cace:	4619      	mov	r1, r3
                       p_connection_update_complete_event->Conn_Latency,
 800cad0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cad2:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800cad6:	b29b      	uxth	r3, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800cad8:	461c      	mov	r4, r3
                       p_connection_update_complete_event->Supervision_Timeout*10);
 800cada:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cadc:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800cae0:	b29b      	uxth	r3, r3
 800cae2:	461a      	mov	r2, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800cae4:	4613      	mov	r3, r2
 800cae6:	009b      	lsls	r3, r3, #2
 800cae8:	4413      	add	r3, r2
 800caea:	005b      	lsls	r3, r3, #1
 800caec:	9301      	str	r3, [sp, #4]
 800caee:	9400      	str	r4, [sp, #0]
 800caf0:	4602      	mov	r2, r0
 800caf2:	460b      	mov	r3, r1
 800caf4:	4872      	ldr	r0, [pc, #456]	@ (800ccc0 <SVCCTL_App_Notification+0x30c>)
 800caf6:	f001 fd49 	bl	800e58c <iprintf>
          break;
 800cafa:	e0d1      	b.n	800cca0 <SVCCTL_App_Notification+0x2ec>
          p_evt_le_phy_update_complete = (hci_le_phy_update_complete_event_rp0*)p_meta_evt->data;
 800cafc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cafe:	3301      	adds	r3, #1
 800cb00:	633b      	str	r3, [r7, #48]	@ 0x30
          APP_DBG_MSG("==>> HCI_LE_PHY_UPDATE_COMPLETE_SUBEVT_CODE - ");
 800cb02:	4870      	ldr	r0, [pc, #448]	@ (800ccc4 <SVCCTL_App_Notification+0x310>)
 800cb04:	f001 fd42 	bl	800e58c <iprintf>
          if (p_evt_le_phy_update_complete->Status == 0)
 800cb08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb0a:	781b      	ldrb	r3, [r3, #0]
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d103      	bne.n	800cb18 <SVCCTL_App_Notification+0x164>
            APP_DBG_MSG("status ok \n");
 800cb10:	486d      	ldr	r0, [pc, #436]	@ (800ccc8 <SVCCTL_App_Notification+0x314>)
 800cb12:	f001 fdab 	bl	800e66c <puts>
 800cb16:	e002      	b.n	800cb1e <SVCCTL_App_Notification+0x16a>
            APP_DBG_MSG("status nok \n");
 800cb18:	486c      	ldr	r0, [pc, #432]	@ (800cccc <SVCCTL_App_Notification+0x318>)
 800cb1a:	f001 fda7 	bl	800e66c <puts>
          ret = hci_le_read_phy(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, &Tx_phy, &Rx_phy);
 800cb1e:	4b61      	ldr	r3, [pc, #388]	@ (800cca4 <SVCCTL_App_Notification+0x2f0>)
 800cb20:	8adb      	ldrh	r3, [r3, #22]
 800cb22:	f107 021e 	add.w	r2, r7, #30
 800cb26:	f107 011f 	add.w	r1, r7, #31
 800cb2a:	4618      	mov	r0, r3
 800cb2c:	f7fd fc76 	bl	800a41c <hci_le_read_phy>
 800cb30:	4603      	mov	r3, r0
 800cb32:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
          if (ret != BLE_STATUS_SUCCESS)
 800cb36:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d003      	beq.n	800cb46 <SVCCTL_App_Notification+0x192>
            APP_DBG_MSG("==>> hci_le_read_phy : fail\n\r");
 800cb3e:	4864      	ldr	r0, [pc, #400]	@ (800ccd0 <SVCCTL_App_Notification+0x31c>)
 800cb40:	f001 fd24 	bl	800e58c <iprintf>
          break;
 800cb44:	e0ac      	b.n	800cca0 <SVCCTL_App_Notification+0x2ec>
            APP_DBG_MSG("==>> hci_le_read_phy - Success \n");
 800cb46:	4863      	ldr	r0, [pc, #396]	@ (800ccd4 <SVCCTL_App_Notification+0x320>)
 800cb48:	f001 fd90 	bl	800e66c <puts>
            if ((Tx_phy == TX_2M) && (Rx_phy == RX_2M))
 800cb4c:	7ffb      	ldrb	r3, [r7, #31]
 800cb4e:	2b02      	cmp	r3, #2
 800cb50:	d10a      	bne.n	800cb68 <SVCCTL_App_Notification+0x1b4>
 800cb52:	7fbb      	ldrb	r3, [r7, #30]
 800cb54:	2b02      	cmp	r3, #2
 800cb56:	d107      	bne.n	800cb68 <SVCCTL_App_Notification+0x1b4>
              APP_DBG_MSG("==>> PHY Param  TX= %d, RX= %d \n\r", Tx_phy, Rx_phy);
 800cb58:	7ffb      	ldrb	r3, [r7, #31]
 800cb5a:	4619      	mov	r1, r3
 800cb5c:	7fbb      	ldrb	r3, [r7, #30]
 800cb5e:	461a      	mov	r2, r3
 800cb60:	485d      	ldr	r0, [pc, #372]	@ (800ccd8 <SVCCTL_App_Notification+0x324>)
 800cb62:	f001 fd13 	bl	800e58c <iprintf>
          break;
 800cb66:	e09b      	b.n	800cca0 <SVCCTL_App_Notification+0x2ec>
              APP_DBG_MSG("==>> PHY Param  TX= %d, RX= %d \n\r", Tx_phy, Rx_phy);
 800cb68:	7ffb      	ldrb	r3, [r7, #31]
 800cb6a:	4619      	mov	r1, r3
 800cb6c:	7fbb      	ldrb	r3, [r7, #30]
 800cb6e:	461a      	mov	r2, r3
 800cb70:	4859      	ldr	r0, [pc, #356]	@ (800ccd8 <SVCCTL_App_Notification+0x324>)
 800cb72:	f001 fd0b 	bl	800e58c <iprintf>
          break;
 800cb76:	e093      	b.n	800cca0 <SVCCTL_App_Notification+0x2ec>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 800cb78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb7a:	3301      	adds	r3, #1
 800cb7c:	62bb      	str	r3, [r7, #40]	@ 0x28
          HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 800cb7e:	4b49      	ldr	r3, [pc, #292]	@ (800cca4 <SVCCTL_App_Notification+0x2f0>)
 800cb80:	f893 3085 	ldrb.w	r3, [r3, #133]	@ 0x85
 800cb84:	4618      	mov	r0, r3
 800cb86:	f7f5 f9f5 	bl	8001f74 <HW_TS_Stop>
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE - Connection handle: 0x%x\n", p_connection_complete_event->Connection_Handle);
 800cb8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb8c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800cb90:	b29b      	uxth	r3, r3
 800cb92:	4619      	mov	r1, r3
 800cb94:	4851      	ldr	r0, [pc, #324]	@ (800ccdc <SVCCTL_App_Notification+0x328>)
 800cb96:	f001 fcf9 	bl	800e58c <iprintf>
                      p_connection_complete_event->Peer_Address[5],
 800cb9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb9c:	7a9b      	ldrb	r3, [r3, #10]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 800cb9e:	4618      	mov	r0, r3
                      p_connection_complete_event->Peer_Address[4],
 800cba0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cba2:	7a5b      	ldrb	r3, [r3, #9]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 800cba4:	461c      	mov	r4, r3
                      p_connection_complete_event->Peer_Address[3],
 800cba6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cba8:	7a1b      	ldrb	r3, [r3, #8]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 800cbaa:	461d      	mov	r5, r3
                      p_connection_complete_event->Peer_Address[2],
 800cbac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbae:	79db      	ldrb	r3, [r3, #7]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 800cbb0:	461a      	mov	r2, r3
                      p_connection_complete_event->Peer_Address[1],
 800cbb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbb4:	799b      	ldrb	r3, [r3, #6]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 800cbb6:	4619      	mov	r1, r3
                      p_connection_complete_event->Peer_Address[0]);
 800cbb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbba:	795b      	ldrb	r3, [r3, #5]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 800cbbc:	9302      	str	r3, [sp, #8]
 800cbbe:	9101      	str	r1, [sp, #4]
 800cbc0:	9200      	str	r2, [sp, #0]
 800cbc2:	462b      	mov	r3, r5
 800cbc4:	4622      	mov	r2, r4
 800cbc6:	4601      	mov	r1, r0
 800cbc8:	4845      	ldr	r0, [pc, #276]	@ (800cce0 <SVCCTL_App_Notification+0x32c>)
 800cbca:	f001 fcdf 	bl	800e58c <iprintf>
                      p_connection_complete_event->Conn_Interval*1.25,
 800cbce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbd0:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 800cbd4:	b29b      	uxth	r3, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800cbd6:	4618      	mov	r0, r3
 800cbd8:	f7f3 fda6 	bl	8000728 <__aeabi_i2d>
 800cbdc:	f04f 0200 	mov.w	r2, #0
 800cbe0:	4b36      	ldr	r3, [pc, #216]	@ (800ccbc <SVCCTL_App_Notification+0x308>)
 800cbe2:	f7f3 fb25 	bl	8000230 <__aeabi_dmul>
 800cbe6:	4602      	mov	r2, r0
 800cbe8:	460b      	mov	r3, r1
 800cbea:	4610      	mov	r0, r2
 800cbec:	4619      	mov	r1, r3
                      p_connection_complete_event->Conn_Latency,
 800cbee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbf0:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 800cbf4:	b29b      	uxth	r3, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800cbf6:	461c      	mov	r4, r3
                      p_connection_complete_event->Supervision_Timeout*10
 800cbf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbfa:	f8b3 300f 	ldrh.w	r3, [r3, #15]
 800cbfe:	b29b      	uxth	r3, r3
 800cc00:	461a      	mov	r2, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800cc02:	4613      	mov	r3, r2
 800cc04:	009b      	lsls	r3, r3, #2
 800cc06:	4413      	add	r3, r2
 800cc08:	005b      	lsls	r3, r3, #1
 800cc0a:	9301      	str	r3, [sp, #4]
 800cc0c:	9400      	str	r4, [sp, #0]
 800cc0e:	4602      	mov	r2, r0
 800cc10:	460b      	mov	r3, r1
 800cc12:	482b      	ldr	r0, [pc, #172]	@ (800ccc0 <SVCCTL_App_Notification+0x30c>)
 800cc14:	f001 fcba 	bl	800e58c <iprintf>
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 800cc18:	4b22      	ldr	r3, [pc, #136]	@ (800cca4 <SVCCTL_App_Notification+0x2f0>)
 800cc1a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800cc1e:	2b04      	cmp	r3, #4
 800cc20:	d104      	bne.n	800cc2c <SVCCTL_App_Notification+0x278>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 800cc22:	4b20      	ldr	r3, [pc, #128]	@ (800cca4 <SVCCTL_App_Notification+0x2f0>)
 800cc24:	2206      	movs	r2, #6
 800cc26:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 800cc2a:	e003      	b.n	800cc34 <SVCCTL_App_Notification+0x280>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 800cc2c:	4b1d      	ldr	r3, [pc, #116]	@ (800cca4 <SVCCTL_App_Notification+0x2f0>)
 800cc2e:	2205      	movs	r2, #5
 800cc30:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 800cc34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc36:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800cc3a:	b29a      	uxth	r2, r3
 800cc3c:	4b19      	ldr	r3, [pc, #100]	@ (800cca4 <SVCCTL_App_Notification+0x2f0>)
 800cc3e:	82da      	strh	r2, [r3, #22]
          HandleNotification.P2P_Evt_Opcode = PEER_CONN_HANDLE_EVT;
 800cc40:	4b1b      	ldr	r3, [pc, #108]	@ (800ccb0 <SVCCTL_App_Notification+0x2fc>)
 800cc42:	2200      	movs	r2, #0
 800cc44:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800cc46:	4b17      	ldr	r3, [pc, #92]	@ (800cca4 <SVCCTL_App_Notification+0x2f0>)
 800cc48:	8ada      	ldrh	r2, [r3, #22]
 800cc4a:	4b19      	ldr	r3, [pc, #100]	@ (800ccb0 <SVCCTL_App_Notification+0x2fc>)
 800cc4c:	805a      	strh	r2, [r3, #2]
          P2PS_APP_Notification(&HandleNotification);
 800cc4e:	4818      	ldr	r0, [pc, #96]	@ (800ccb0 <SVCCTL_App_Notification+0x2fc>)
 800cc50:	f000 fe20 	bl	800d894 <P2PS_APP_Notification>
          bdaddr= BleGetBdAddress();
 800cc54:	f000 fc48 	bl	800d4e8 <BleGetBdAddress>
 800cc58:	6278      	str	r0, [r7, #36]	@ 0x24
          sprintf(BdAddress, "BD_ad=%02x%02x%02x%02x%02x%02x", bdaddr[5],bdaddr[4],bdaddr[3],bdaddr[2],bdaddr[1],bdaddr[0]);
 800cc5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc5c:	3305      	adds	r3, #5
 800cc5e:	781b      	ldrb	r3, [r3, #0]
 800cc60:	461d      	mov	r5, r3
 800cc62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc64:	3304      	adds	r3, #4
 800cc66:	781b      	ldrb	r3, [r3, #0]
 800cc68:	461e      	mov	r6, r3
 800cc6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc6c:	3303      	adds	r3, #3
 800cc6e:	781b      	ldrb	r3, [r3, #0]
 800cc70:	461a      	mov	r2, r3
 800cc72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc74:	3302      	adds	r3, #2
 800cc76:	781b      	ldrb	r3, [r3, #0]
 800cc78:	4619      	mov	r1, r3
 800cc7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc7c:	3301      	adds	r3, #1
 800cc7e:	781b      	ldrb	r3, [r3, #0]
 800cc80:	461c      	mov	r4, r3
 800cc82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc84:	781b      	ldrb	r3, [r3, #0]
 800cc86:	f107 0008 	add.w	r0, r7, #8
 800cc8a:	9303      	str	r3, [sp, #12]
 800cc8c:	9402      	str	r4, [sp, #8]
 800cc8e:	9101      	str	r1, [sp, #4]
 800cc90:	9200      	str	r2, [sp, #0]
 800cc92:	4633      	mov	r3, r6
 800cc94:	462a      	mov	r2, r5
 800cc96:	4907      	ldr	r1, [pc, #28]	@ (800ccb4 <SVCCTL_App_Notification+0x300>)
 800cc98:	f001 fcf0 	bl	800e67c <siprintf>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 800cc9c:	e000      	b.n	800cca0 <SVCCTL_App_Notification+0x2ec>
          break;
 800cc9e:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 800cca0:	e112      	b.n	800cec8 <SVCCTL_App_Notification+0x514>
 800cca2:	bf00      	nop
 800cca4:	200004e4 	.word	0x200004e4
 800cca8:	0800fd88 	.word	0x0800fd88
 800ccac:	0800fdb4 	.word	0x0800fdb4
 800ccb0:	20000578 	.word	0x20000578
 800ccb4:	0800fc94 	.word	0x0800fc94
 800ccb8:	0800fdf0 	.word	0x0800fdf0
 800ccbc:	3ff40000 	.word	0x3ff40000
 800ccc0:	0800fe24 	.word	0x0800fe24
 800ccc4:	0800fe90 	.word	0x0800fe90
 800ccc8:	0800fec0 	.word	0x0800fec0
 800cccc:	0800fecc 	.word	0x0800fecc
 800ccd0:	0800fed8 	.word	0x0800fed8
 800ccd4:	0800fef8 	.word	0x0800fef8
 800ccd8:	0800ff18 	.word	0x0800ff18
 800ccdc:	0800ff3c 	.word	0x0800ff3c
 800cce0:	0800ff84 	.word	0x0800ff84
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 800cce4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cce6:	3302      	adds	r3, #2
 800cce8:	63fb      	str	r3, [r7, #60]	@ 0x3c
      switch (p_blecore_evt->ecode)
 800ccea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ccec:	881b      	ldrh	r3, [r3, #0]
 800ccee:	b29b      	uxth	r3, r3
 800ccf0:	f640 420e 	movw	r2, #3086	@ 0xc0e
 800ccf4:	4293      	cmp	r3, r2
 800ccf6:	f000 80da 	beq.w	800ceae <SVCCTL_App_Notification+0x4fa>
 800ccfa:	f640 420e 	movw	r2, #3086	@ 0xc0e
 800ccfe:	4293      	cmp	r3, r2
 800cd00:	f300 80e1 	bgt.w	800cec6 <SVCCTL_App_Notification+0x512>
 800cd04:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800cd08:	f000 80c1 	beq.w	800ce8e <SVCCTL_App_Notification+0x4da>
 800cd0c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800cd10:	f300 80d9 	bgt.w	800cec6 <SVCCTL_App_Notification+0x512>
 800cd14:	2b04      	cmp	r3, #4
 800cd16:	f000 80c2 	beq.w	800ce9e <SVCCTL_App_Notification+0x4ea>
 800cd1a:	2b04      	cmp	r3, #4
 800cd1c:	f2c0 80d3 	blt.w	800cec6 <SVCCTL_App_Notification+0x512>
 800cd20:	f240 420a 	movw	r2, #1034	@ 0x40a
 800cd24:	4293      	cmp	r3, r2
 800cd26:	f300 80ce 	bgt.w	800cec6 <SVCCTL_App_Notification+0x512>
 800cd2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cd2e:	f2c0 80ca 	blt.w	800cec6 <SVCCTL_App_Notification+0x512>
 800cd32:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 800cd36:	2b0a      	cmp	r3, #10
 800cd38:	f200 80c5 	bhi.w	800cec6 <SVCCTL_App_Notification+0x512>
 800cd3c:	a201      	add	r2, pc, #4	@ (adr r2, 800cd44 <SVCCTL_App_Notification+0x390>)
 800cd3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd42:	bf00      	nop
 800cd44:	0800cd71 	.word	0x0800cd71
 800cd48:	0800ce59 	.word	0x0800ce59
 800cd4c:	0800cd79 	.word	0x0800cd79
 800cd50:	0800cdaf 	.word	0x0800cdaf
 800cd54:	0800cdb7 	.word	0x0800cdb7
 800cd58:	0800cdbf 	.word	0x0800cdbf
 800cd5c:	0800cec7 	.word	0x0800cec7
 800cd60:	0800ce97 	.word	0x0800ce97
 800cd64:	0800cdf3 	.word	0x0800cdf3
 800cd68:	0800ce03 	.word	0x0800ce03
 800cd6c:	0800cdfb 	.word	0x0800cdfb
          APP_DBG_MSG(">>== ACI_GAP_LIMITED_DISCOVERABLE_VSEVT_CODE \n");
 800cd70:	4858      	ldr	r0, [pc, #352]	@ (800ced4 <SVCCTL_App_Notification+0x520>)
 800cd72:	f001 fc7b 	bl	800e66c <puts>
          break; /* ACI_GAP_LIMITED_DISCOVERABLE_VSEVT_CODE */
 800cd76:	e0a3      	b.n	800cec0 <SVCCTL_App_Notification+0x50c>
          APP_DBG_MSG(">>== ACI_GAP_PASS_KEY_REQ_VSEVT_CODE \n");
 800cd78:	4857      	ldr	r0, [pc, #348]	@ (800ced8 <SVCCTL_App_Notification+0x524>)
 800cd7a:	f001 fc77 	bl	800e66c <puts>
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,123456);
 800cd7e:	4b57      	ldr	r3, [pc, #348]	@ (800cedc <SVCCTL_App_Notification+0x528>)
 800cd80:	8adb      	ldrh	r3, [r3, #22]
 800cd82:	4957      	ldr	r1, [pc, #348]	@ (800cee0 <SVCCTL_App_Notification+0x52c>)
 800cd84:	4618      	mov	r0, r3
 800cd86:	f7fc fc7f 	bl	8009688 <aci_gap_pass_key_resp>
 800cd8a:	4603      	mov	r3, r0
 800cd8c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
          if (ret != BLE_STATUS_SUCCESS)
 800cd90:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d006      	beq.n	800cda6 <SVCCTL_App_Notification+0x3f2>
            APP_DBG_MSG("==>> aci_gap_pass_key_resp : Fail, reason: 0x%x\n", ret);
 800cd98:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800cd9c:	4619      	mov	r1, r3
 800cd9e:	4851      	ldr	r0, [pc, #324]	@ (800cee4 <SVCCTL_App_Notification+0x530>)
 800cda0:	f001 fbf4 	bl	800e58c <iprintf>
          break; /* ACI_GAP_PASS_KEY_REQ_VSEVT_CODE */
 800cda4:	e08c      	b.n	800cec0 <SVCCTL_App_Notification+0x50c>
            APP_DBG_MSG("==>> aci_gap_pass_key_resp : Success \n");
 800cda6:	4850      	ldr	r0, [pc, #320]	@ (800cee8 <SVCCTL_App_Notification+0x534>)
 800cda8:	f001 fc60 	bl	800e66c <puts>
          break; /* ACI_GAP_PASS_KEY_REQ_VSEVT_CODE */
 800cdac:	e088      	b.n	800cec0 <SVCCTL_App_Notification+0x50c>
          APP_DBG_MSG(">>== ACI_GAP_AUTHORIZATION_REQ_VSEVT_CODE\n");
 800cdae:	484f      	ldr	r0, [pc, #316]	@ (800ceec <SVCCTL_App_Notification+0x538>)
 800cdb0:	f001 fc5c 	bl	800e66c <puts>
          break; /* ACI_GAP_AUTHORIZATION_REQ_VSEVT_CODE */
 800cdb4:	e084      	b.n	800cec0 <SVCCTL_App_Notification+0x50c>
          APP_DBG_MSG("==>> ACI_GAP_PERIPHERAL_SECURITY_INITIATED_VSEVT_CODE \n");
 800cdb6:	484e      	ldr	r0, [pc, #312]	@ (800cef0 <SVCCTL_App_Notification+0x53c>)
 800cdb8:	f001 fc58 	bl	800e66c <puts>
          break; /* ACI_GAP_PERIPHERAL_SECURITY_INITIATED_VSEVT_CODE */
 800cdbc:	e080      	b.n	800cec0 <SVCCTL_App_Notification+0x50c>
          APP_DBG_MSG("==>> ACI_GAP_BOND_LOST_VSEVT_CODE \n");
 800cdbe:	484d      	ldr	r0, [pc, #308]	@ (800cef4 <SVCCTL_App_Notification+0x540>)
 800cdc0:	f001 fc54 	bl	800e66c <puts>
          ret = aci_gap_allow_rebond(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 800cdc4:	4b45      	ldr	r3, [pc, #276]	@ (800cedc <SVCCTL_App_Notification+0x528>)
 800cdc6:	8adb      	ldrh	r3, [r3, #22]
 800cdc8:	4618      	mov	r0, r3
 800cdca:	f7fc fe07 	bl	80099dc <aci_gap_allow_rebond>
 800cdce:	4603      	mov	r3, r0
 800cdd0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
          if (ret != BLE_STATUS_SUCCESS)
 800cdd4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d006      	beq.n	800cdea <SVCCTL_App_Notification+0x436>
            APP_DBG_MSG("==>> aci_gap_allow_rebond : Fail, reason: 0x%x\n", ret);
 800cddc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800cde0:	4619      	mov	r1, r3
 800cde2:	4845      	ldr	r0, [pc, #276]	@ (800cef8 <SVCCTL_App_Notification+0x544>)
 800cde4:	f001 fbd2 	bl	800e58c <iprintf>
          break; /* ACI_GAP_BOND_LOST_VSEVT_CODE */
 800cde8:	e06a      	b.n	800cec0 <SVCCTL_App_Notification+0x50c>
            APP_DBG_MSG("==>> aci_gap_allow_rebond : Success \n");
 800cdea:	4844      	ldr	r0, [pc, #272]	@ (800cefc <SVCCTL_App_Notification+0x548>)
 800cdec:	f001 fc3e 	bl	800e66c <puts>
          break; /* ACI_GAP_BOND_LOST_VSEVT_CODE */
 800cdf0:	e066      	b.n	800cec0 <SVCCTL_App_Notification+0x50c>
          APP_DBG_MSG(">>== ACI_GAP_ADDR_NOT_RESOLVED_VSEVT_CODE \n");
 800cdf2:	4843      	ldr	r0, [pc, #268]	@ (800cf00 <SVCCTL_App_Notification+0x54c>)
 800cdf4:	f001 fc3a 	bl	800e66c <puts>
          break; /* ACI_GAP_ADDR_NOT_RESOLVED_VSEVT_CODE */
 800cdf8:	e062      	b.n	800cec0 <SVCCTL_App_Notification+0x50c>
          APP_DBG_MSG(">>== ACI_GAP_KEYPRESS_NOTIFICATION_VSEVT_CODE\n");
 800cdfa:	4842      	ldr	r0, [pc, #264]	@ (800cf04 <SVCCTL_App_Notification+0x550>)
 800cdfc:	f001 fc36 	bl	800e66c <puts>
          break; /* ACI_GAP_KEYPRESS_NOTIFICATION_VSEVT_CODE */    
 800ce00:	e05e      	b.n	800cec0 <SVCCTL_App_Notification+0x50c>
          APP_DBG_MSG(">>== ACI_GAP_NUMERIC_COMPARISON_VALUE_VSEVT_CODE\n");
 800ce02:	4841      	ldr	r0, [pc, #260]	@ (800cf08 <SVCCTL_App_Notification+0x554>)
 800ce04:	f001 fc32 	bl	800e66c <puts>
                      ((aci_gap_numeric_comparison_value_event_rp0 *)(p_blecore_evt->data))->Numeric_Value);
 800ce08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ce0a:	3302      	adds	r3, #2
          APP_DBG_MSG("     - numeric_value = %ld\n",
 800ce0c:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800ce10:	4619      	mov	r1, r3
 800ce12:	483e      	ldr	r0, [pc, #248]	@ (800cf0c <SVCCTL_App_Notification+0x558>)
 800ce14:	f001 fbba 	bl	800e58c <iprintf>
                      ((aci_gap_numeric_comparison_value_event_rp0 *)(p_blecore_evt->data))->Numeric_Value);
 800ce18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ce1a:	3302      	adds	r3, #2
          APP_DBG_MSG("     - Hex_value = %lx\n",
 800ce1c:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800ce20:	4619      	mov	r1, r3
 800ce22:	483b      	ldr	r0, [pc, #236]	@ (800cf10 <SVCCTL_App_Notification+0x55c>)
 800ce24:	f001 fbb2 	bl	800e58c <iprintf>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES); /* CONFIRM_YES = 1 */
 800ce28:	4b2c      	ldr	r3, [pc, #176]	@ (800cedc <SVCCTL_App_Notification+0x528>)
 800ce2a:	8adb      	ldrh	r3, [r3, #22]
 800ce2c:	2101      	movs	r1, #1
 800ce2e:	4618      	mov	r0, r3
 800ce30:	f7fc fe28 	bl	8009a84 <aci_gap_numeric_comparison_value_confirm_yesno>
 800ce34:	4603      	mov	r3, r0
 800ce36:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
          if (ret != BLE_STATUS_SUCCESS)
 800ce3a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d006      	beq.n	800ce50 <SVCCTL_App_Notification+0x49c>
            APP_DBG_MSG("==>> aci_gap_numeric_comparison_value_confirm_yesno-->YES : Fail, reason: 0x%x\n", ret);
 800ce42:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800ce46:	4619      	mov	r1, r3
 800ce48:	4832      	ldr	r0, [pc, #200]	@ (800cf14 <SVCCTL_App_Notification+0x560>)
 800ce4a:	f001 fb9f 	bl	800e58c <iprintf>
          break;
 800ce4e:	e037      	b.n	800cec0 <SVCCTL_App_Notification+0x50c>
            APP_DBG_MSG("==>> aci_gap_numeric_comparison_value_confirm_yesno-->YES : Success \n");
 800ce50:	4831      	ldr	r0, [pc, #196]	@ (800cf18 <SVCCTL_App_Notification+0x564>)
 800ce52:	f001 fc0b 	bl	800e66c <puts>
          break;
 800ce56:	e033      	b.n	800cec0 <SVCCTL_App_Notification+0x50c>
          pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 800ce58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ce5a:	3302      	adds	r3, #2
 800ce5c:	63bb      	str	r3, [r7, #56]	@ 0x38
          APP_DBG_MSG(">>== ACI_GAP_PAIRING_COMPLETE_VSEVT_CODE\n");
 800ce5e:	482f      	ldr	r0, [pc, #188]	@ (800cf1c <SVCCTL_App_Notification+0x568>)
 800ce60:	f001 fc04 	bl	800e66c <puts>
          if (pairing_complete->Status == 0)
 800ce64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce66:	789b      	ldrb	r3, [r3, #2]
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d103      	bne.n	800ce74 <SVCCTL_App_Notification+0x4c0>
            APP_DBG_MSG("     - Pairing Success\n");
 800ce6c:	482c      	ldr	r0, [pc, #176]	@ (800cf20 <SVCCTL_App_Notification+0x56c>)
 800ce6e:	f001 fbfd 	bl	800e66c <puts>
 800ce72:	e008      	b.n	800ce86 <SVCCTL_App_Notification+0x4d2>
            APP_DBG_MSG("     - Pairing KO \n     - Status: 0x%x\n     - Reason: 0x%x\n",pairing_complete->Status, pairing_complete->Reason);
 800ce74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce76:	789b      	ldrb	r3, [r3, #2]
 800ce78:	4619      	mov	r1, r3
 800ce7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce7c:	78db      	ldrb	r3, [r3, #3]
 800ce7e:	461a      	mov	r2, r3
 800ce80:	4828      	ldr	r0, [pc, #160]	@ (800cf24 <SVCCTL_App_Notification+0x570>)
 800ce82:	f001 fb83 	bl	800e58c <iprintf>
          APP_DBG_MSG("\n");
 800ce86:	200a      	movs	r0, #10
 800ce88:	f001 fb92 	bl	800e5b0 <putchar>
          break;    
 800ce8c:	e018      	b.n	800cec0 <SVCCTL_App_Notification+0x50c>
          mutex = 1;
 800ce8e:	4b26      	ldr	r3, [pc, #152]	@ (800cf28 <SVCCTL_App_Notification+0x574>)
 800ce90:	2201      	movs	r2, #1
 800ce92:	701a      	strb	r2, [r3, #0]
          break;
 800ce94:	e014      	b.n	800cec0 <SVCCTL_App_Notification+0x50c>
          APP_DBG_MSG(">>== ACI_GAP_PROC_COMPLETE_VSEVT_CODE \r");
 800ce96:	4825      	ldr	r0, [pc, #148]	@ (800cf2c <SVCCTL_App_Notification+0x578>)
 800ce98:	f001 fb78 	bl	800e58c <iprintf>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 800ce9c:	e010      	b.n	800cec0 <SVCCTL_App_Notification+0x50c>
          HW_TS_Start(BleApplicationContext.SwitchOffGPIO_timer_Id, (uint32_t)LED_ON_TIMEOUT);
 800ce9e:	4b0f      	ldr	r3, [pc, #60]	@ (800cedc <SVCCTL_App_Notification+0x528>)
 800cea0:	f893 3086 	ldrb.w	r3, [r3, #134]	@ 0x86
 800cea4:	210a      	movs	r1, #10
 800cea6:	4618      	mov	r0, r3
 800cea8:	f7f5 f8e8 	bl	800207c <HW_TS_Start>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 800ceac:	e008      	b.n	800cec0 <SVCCTL_App_Notification+0x50c>
          APP_DBG_MSG(">>== ACI_GATT_INDICATION_VSEVT_CODE \r");
 800ceae:	4820      	ldr	r0, [pc, #128]	@ (800cf30 <SVCCTL_App_Notification+0x57c>)
 800ceb0:	f001 fb6c 	bl	800e58c <iprintf>
          aci_gatt_confirm_indication(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 800ceb4:	4b09      	ldr	r3, [pc, #36]	@ (800cedc <SVCCTL_App_Notification+0x528>)
 800ceb6:	8adb      	ldrh	r3, [r3, #22]
 800ceb8:	4618      	mov	r0, r3
 800ceba:	f7fd f8f6 	bl	800a0aa <aci_gatt_confirm_indication>
        break;
 800cebe:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800cec0:	e001      	b.n	800cec6 <SVCCTL_App_Notification+0x512>
      break;
 800cec2:	bf00      	nop
 800cec4:	e000      	b.n	800cec8 <SVCCTL_App_Notification+0x514>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800cec6:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 800cec8:	2301      	movs	r3, #1
}
 800ceca:	4618      	mov	r0, r3
 800cecc:	374c      	adds	r7, #76	@ 0x4c
 800cece:	46bd      	mov	sp, r7
 800ced0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ced2:	bf00      	nop
 800ced4:	0800ffd4 	.word	0x0800ffd4
 800ced8:	08010004 	.word	0x08010004
 800cedc:	200004e4 	.word	0x200004e4
 800cee0:	0001e240 	.word	0x0001e240
 800cee4:	0801002c 	.word	0x0801002c
 800cee8:	08010060 	.word	0x08010060
 800ceec:	08010088 	.word	0x08010088
 800cef0:	080100b4 	.word	0x080100b4
 800cef4:	080100ec 	.word	0x080100ec
 800cef8:	08010110 	.word	0x08010110
 800cefc:	08010140 	.word	0x08010140
 800cf00:	08010168 	.word	0x08010168
 800cf04:	08010194 	.word	0x08010194
 800cf08:	080101c4 	.word	0x080101c4
 800cf0c:	080101f8 	.word	0x080101f8
 800cf10:	08010214 	.word	0x08010214
 800cf14:	0801022c 	.word	0x0801022c
 800cf18:	0801027c 	.word	0x0801027c
 800cf1c:	080102c4 	.word	0x080102c4
 800cf20:	080102f0 	.word	0x080102f0
 800cf24:	08010308 	.word	0x08010308
 800cf28:	2000057d 	.word	0x2000057d
 800cf2c:	08010344 	.word	0x08010344
 800cf30:	0801036c 	.word	0x0801036c

0800cf34 <APP_BLE_Send_EEGData_Notification>:
 *
 * Hermes Characteristics notifications
 *
 **/
uint8_t  APP_BLE_Send_EEGData_Notification(uint8_t* payload, uint8_t length)
{
 800cf34:	b580      	push	{r7, lr}
 800cf36:	b086      	sub	sp, #24
 800cf38:	af02      	add	r7, sp, #8
 800cf3a:	6078      	str	r0, [r7, #4]
 800cf3c:	460b      	mov	r3, r1
 800cf3e:	70fb      	strb	r3, [r7, #3]
    uint8_t  ret = BLE_STATUS_INVALID_PARAMS;
 800cf40:	2392      	movs	r3, #146	@ 0x92
 800cf42:	73fb      	strb	r3, [r7, #15]

    if(length <= NEW_NOTIFY_CHAR_VALUE_LENGTH)
 800cf44:	78fb      	ldrb	r3, [r7, #3]
 800cf46:	2bf1      	cmp	r3, #241	@ 0xf1
 800cf48:	d80e      	bhi.n	800cf68 <APP_BLE_Send_EEGData_Notification+0x34>
    {
        ret = aci_gatt_update_char_value(BleApplicationContext.BleApplicationContext_legacy.eeg_service_handle,
 800cf4a:	4b0a      	ldr	r3, [pc, #40]	@ (800cf74 <APP_BLE_Send_EEGData_Notification+0x40>)
 800cf4c:	f8b3 007e 	ldrh.w	r0, [r3, #126]	@ 0x7e
 800cf50:	4b08      	ldr	r3, [pc, #32]	@ (800cf74 <APP_BLE_Send_EEGData_Notification+0x40>)
 800cf52:	f8b3 1088 	ldrh.w	r1, [r3, #136]	@ 0x88
 800cf56:	78fa      	ldrb	r2, [r7, #3]
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	9300      	str	r3, [sp, #0]
 800cf5c:	4613      	mov	r3, r2
 800cf5e:	2200      	movs	r2, #0
 800cf60:	f7fc fffa 	bl	8009f58 <aci_gatt_update_char_value>
 800cf64:	4603      	mov	r3, r0
 800cf66:	73fb      	strb	r3, [r7, #15]
                                        0, /* offset */
                                        length, /* data length */
                                        payload);
    }

    return ret;
 800cf68:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf6a:	4618      	mov	r0, r3
 800cf6c:	3710      	adds	r7, #16
 800cf6e:	46bd      	mov	sp, r7
 800cf70:	bd80      	pop	{r7, pc}
 800cf72:	bf00      	nop
 800cf74:	200004e4 	.word	0x200004e4

0800cf78 <APP_BLE_Send_Event_Notification>:


uint8_t  APP_BLE_Send_Event_Notification(event_packet_t* payload)
{
 800cf78:	b580      	push	{r7, lr}
 800cf7a:	b086      	sub	sp, #24
 800cf7c:	af02      	add	r7, sp, #8
 800cf7e:	6078      	str	r0, [r7, #4]
    uint8_t  ret = BLE_STATUS_INVALID_PARAMS;
 800cf80:	2392      	movs	r3, #146	@ 0x92
 800cf82:	73fb      	strb	r3, [r7, #15]

	ret = aci_gatt_update_char_value(BleApplicationContext.BleApplicationContext_legacy.event_service_handle,
 800cf84:	4b09      	ldr	r3, [pc, #36]	@ (800cfac <APP_BLE_Send_Event_Notification+0x34>)
 800cf86:	f8b3 0080 	ldrh.w	r0, [r3, #128]	@ 0x80
 800cf8a:	4b08      	ldr	r3, [pc, #32]	@ (800cfac <APP_BLE_Send_Event_Notification+0x34>)
 800cf8c:	f8b3 108a 	ldrh.w	r1, [r3, #138]	@ 0x8a
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	9300      	str	r3, [sp, #0]
 800cf94:	2303      	movs	r3, #3
 800cf96:	2200      	movs	r2, #0
 800cf98:	f7fc ffde 	bl	8009f58 <aci_gatt_update_char_value>
 800cf9c:	4603      	mov	r3, r0
 800cf9e:	73fb      	strb	r3, [r7, #15]
									0, /* offset */
									sizeof(event_packet_t), /* data length */
									(uint8_t*)payload);


    return ret;
 800cfa0:	7bfb      	ldrb	r3, [r7, #15]
}
 800cfa2:	4618      	mov	r0, r3
 800cfa4:	3710      	adds	r7, #16
 800cfa6:	46bd      	mov	sp, r7
 800cfa8:	bd80      	pop	{r7, pc}
 800cfaa:	bf00      	nop
 800cfac:	200004e4 	.word	0x200004e4

0800cfb0 <APP_BLE_Send_IMU_Notification>:




uint8_t  APP_BLE_Send_IMU_Notification(uint8_t* accel, uint8_t* gyro)
{
 800cfb0:	b580      	push	{r7, lr}
 800cfb2:	b086      	sub	sp, #24
 800cfb4:	af02      	add	r7, sp, #8
 800cfb6:	6078      	str	r0, [r7, #4]
 800cfb8:	6039      	str	r1, [r7, #0]
    uint8_t  ret = BLE_STATUS_INVALID_PARAMS;
 800cfba:	2392      	movs	r3, #146	@ 0x92
 800cfbc:	73fb      	strb	r3, [r7, #15]

	ret = aci_gatt_update_char_value(BleApplicationContext.BleApplicationContext_legacy.motion_service_handle,
 800cfbe:	4b10      	ldr	r3, [pc, #64]	@ (800d000 <APP_BLE_Send_IMU_Notification+0x50>)
 800cfc0:	f8b3 0082 	ldrh.w	r0, [r3, #130]	@ 0x82
 800cfc4:	4b0e      	ldr	r3, [pc, #56]	@ (800d000 <APP_BLE_Send_IMU_Notification+0x50>)
 800cfc6:	f8b3 108c 	ldrh.w	r1, [r3, #140]	@ 0x8c
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	9300      	str	r3, [sp, #0]
 800cfce:	2306      	movs	r3, #6
 800cfd0:	2200      	movs	r2, #0
 800cfd2:	f7fc ffc1 	bl	8009f58 <aci_gatt_update_char_value>
 800cfd6:	4603      	mov	r3, r0
 800cfd8:	73fb      	strb	r3, [r7, #15]
									0, /* offset */
									6, /* data length */
									accel);


	ret = aci_gatt_update_char_value(BleApplicationContext.BleApplicationContext_legacy.motion_service_handle,
 800cfda:	4b09      	ldr	r3, [pc, #36]	@ (800d000 <APP_BLE_Send_IMU_Notification+0x50>)
 800cfdc:	f8b3 0082 	ldrh.w	r0, [r3, #130]	@ 0x82
 800cfe0:	4b07      	ldr	r3, [pc, #28]	@ (800d000 <APP_BLE_Send_IMU_Notification+0x50>)
 800cfe2:	f8b3 108e 	ldrh.w	r1, [r3, #142]	@ 0x8e
 800cfe6:	683b      	ldr	r3, [r7, #0]
 800cfe8:	9300      	str	r3, [sp, #0]
 800cfea:	2306      	movs	r3, #6
 800cfec:	2200      	movs	r2, #0
 800cfee:	f7fc ffb3 	bl	8009f58 <aci_gatt_update_char_value>
 800cff2:	4603      	mov	r3, r0
 800cff4:	73fb      	strb	r3, [r7, #15]
									0, /* offset */
									6, /* data length */
									gyro);


    return ret;
 800cff6:	7bfb      	ldrb	r3, [r7, #15]
}
 800cff8:	4618      	mov	r0, r3
 800cffa:	3710      	adds	r7, #16
 800cffc:	46bd      	mov	sp, r7
 800cffe:	bd80      	pop	{r7, pc}
 800d000:	200004e4 	.word	0x200004e4

0800d004 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 800d004:	b580      	push	{r7, lr}
 800d006:	b082      	sub	sp, #8
 800d008:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800d00a:	4b06      	ldr	r3, [pc, #24]	@ (800d024 <Ble_Tl_Init+0x20>)
 800d00c:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800d00e:	4b06      	ldr	r3, [pc, #24]	@ (800d028 <Ble_Tl_Init+0x24>)
 800d010:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800d012:	463b      	mov	r3, r7
 800d014:	4619      	mov	r1, r3
 800d016:	4805      	ldr	r0, [pc, #20]	@ (800d02c <Ble_Tl_Init+0x28>)
 800d018:	f7fd fed4 	bl	800adc4 <hci_init>

  return;
 800d01c:	bf00      	nop
}
 800d01e:	3708      	adds	r7, #8
 800d020:	46bd      	mov	sp, r7
 800d022:	bd80      	pop	{r7, pc}
 800d024:	200300d8 	.word	0x200300d8
 800d028:	0800d759 	.word	0x0800d759
 800d02c:	0800d721 	.word	0x0800d721

0800d030 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 800d030:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d032:	b08d      	sub	sp, #52	@ 0x34
 800d034:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 800d036:	2300      	movs	r3, #0
 800d038:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800d03a:	2392      	movs	r3, #146	@ 0x92
 800d03c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init*/

  APP_DBG_MSG("==>> Start Ble_Hci_Gap_Gatt_Init function\n");
 800d03e:	48a5      	ldr	r0, [pc, #660]	@ (800d2d4 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800d040:	f001 fb14 	bl	800e66c <puts>

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 800d044:	f7fd f9c6 	bl	800a3d4 <hci_reset>
 800d048:	4603      	mov	r3, r0
 800d04a:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800d04c:	7dfb      	ldrb	r3, [r7, #23]
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d005      	beq.n	800d05e <Ble_Hci_Gap_Gatt_Init+0x2e>
  {
    APP_DBG_MSG("  Fail   : hci_reset command, result: 0x%x \n", ret);
 800d052:	7dfb      	ldrb	r3, [r7, #23]
 800d054:	4619      	mov	r1, r3
 800d056:	48a0      	ldr	r0, [pc, #640]	@ (800d2d8 <Ble_Hci_Gap_Gatt_Init+0x2a8>)
 800d058:	f001 fa98 	bl	800e58c <iprintf>
 800d05c:	e002      	b.n	800d064 <Ble_Hci_Gap_Gatt_Init+0x34>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_reset command\n");
 800d05e:	489f      	ldr	r0, [pc, #636]	@ (800d2dc <Ble_Hci_Gap_Gatt_Init+0x2ac>)
 800d060:	f001 fb04 	bl	800e66c <puts>
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 800d064:	f000 fa40 	bl	800d4e8 <BleGetBdAddress>
 800d068:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 800d06a:	693a      	ldr	r2, [r7, #16]
 800d06c:	2106      	movs	r1, #6
 800d06e:	2000      	movs	r0, #0
 800d070:	f7fd f870 	bl	800a154 <aci_hal_write_config_data>
 800d074:	4603      	mov	r3, r0
 800d076:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800d078:	7dfb      	ldrb	r3, [r7, #23]
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d005      	beq.n	800d08a <Ble_Hci_Gap_Gatt_Init+0x5a>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET, result: 0x%x \n", ret);
 800d07e:	7dfb      	ldrb	r3, [r7, #23]
 800d080:	4619      	mov	r1, r3
 800d082:	4897      	ldr	r0, [pc, #604]	@ (800d2e0 <Ble_Hci_Gap_Gatt_Init+0x2b0>)
 800d084:	f001 fa82 	bl	800e58c <iprintf>
 800d088:	e021      	b.n	800d0ce <Ble_Hci_Gap_Gatt_Init+0x9e>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET\n");
 800d08a:	4896      	ldr	r0, [pc, #600]	@ (800d2e4 <Ble_Hci_Gap_Gatt_Init+0x2b4>)
 800d08c:	f001 faee 	bl	800e66c <puts>
    APP_DBG_MSG("  Public Bluetooth Address: %02x:%02x:%02x:%02x:%02x:%02x\n",p_bd_addr[5],p_bd_addr[4],p_bd_addr[3],p_bd_addr[2],p_bd_addr[1],p_bd_addr[0]);
 800d090:	693b      	ldr	r3, [r7, #16]
 800d092:	3305      	adds	r3, #5
 800d094:	781b      	ldrb	r3, [r3, #0]
 800d096:	4618      	mov	r0, r3
 800d098:	693b      	ldr	r3, [r7, #16]
 800d09a:	3304      	adds	r3, #4
 800d09c:	781b      	ldrb	r3, [r3, #0]
 800d09e:	461c      	mov	r4, r3
 800d0a0:	693b      	ldr	r3, [r7, #16]
 800d0a2:	3303      	adds	r3, #3
 800d0a4:	781b      	ldrb	r3, [r3, #0]
 800d0a6:	461d      	mov	r5, r3
 800d0a8:	693b      	ldr	r3, [r7, #16]
 800d0aa:	3302      	adds	r3, #2
 800d0ac:	781b      	ldrb	r3, [r3, #0]
 800d0ae:	461a      	mov	r2, r3
 800d0b0:	693b      	ldr	r3, [r7, #16]
 800d0b2:	3301      	adds	r3, #1
 800d0b4:	781b      	ldrb	r3, [r3, #0]
 800d0b6:	4619      	mov	r1, r3
 800d0b8:	693b      	ldr	r3, [r7, #16]
 800d0ba:	781b      	ldrb	r3, [r3, #0]
 800d0bc:	9302      	str	r3, [sp, #8]
 800d0be:	9101      	str	r1, [sp, #4]
 800d0c0:	9200      	str	r2, [sp, #0]
 800d0c2:	462b      	mov	r3, r5
 800d0c4:	4622      	mov	r2, r4
 800d0c6:	4601      	mov	r1, r0
 800d0c8:	4887      	ldr	r0, [pc, #540]	@ (800d2e8 <Ble_Hci_Gap_Gatt_Init+0x2b8>)
 800d0ca:	f001 fa5f 	bl	800e58c <iprintf>
  }

#if (CFG_BLE_ADDRESS_TYPE == GAP_PUBLIC_ADDR)
  /* BLE MAC in ADV Packet */
  a_ManufData[ sizeof(a_ManufData)-6] = p_bd_addr[5];
 800d0ce:	693b      	ldr	r3, [r7, #16]
 800d0d0:	3305      	adds	r3, #5
 800d0d2:	781a      	ldrb	r2, [r3, #0]
 800d0d4:	4b85      	ldr	r3, [pc, #532]	@ (800d2ec <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 800d0d6:	721a      	strb	r2, [r3, #8]
  a_ManufData[ sizeof(a_ManufData)-5] = p_bd_addr[4];
 800d0d8:	693b      	ldr	r3, [r7, #16]
 800d0da:	3304      	adds	r3, #4
 800d0dc:	781a      	ldrb	r2, [r3, #0]
 800d0de:	4b83      	ldr	r3, [pc, #524]	@ (800d2ec <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 800d0e0:	725a      	strb	r2, [r3, #9]
  a_ManufData[ sizeof(a_ManufData)-4] = p_bd_addr[3];
 800d0e2:	693b      	ldr	r3, [r7, #16]
 800d0e4:	3303      	adds	r3, #3
 800d0e6:	781a      	ldrb	r2, [r3, #0]
 800d0e8:	4b80      	ldr	r3, [pc, #512]	@ (800d2ec <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 800d0ea:	729a      	strb	r2, [r3, #10]
  a_ManufData[ sizeof(a_ManufData)-3] = p_bd_addr[2];
 800d0ec:	693b      	ldr	r3, [r7, #16]
 800d0ee:	3302      	adds	r3, #2
 800d0f0:	781a      	ldrb	r2, [r3, #0]
 800d0f2:	4b7e      	ldr	r3, [pc, #504]	@ (800d2ec <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 800d0f4:	72da      	strb	r2, [r3, #11]
  a_ManufData[ sizeof(a_ManufData)-2] = p_bd_addr[1];
 800d0f6:	693b      	ldr	r3, [r7, #16]
 800d0f8:	3301      	adds	r3, #1
 800d0fa:	781a      	ldrb	r2, [r3, #0]
 800d0fc:	4b7b      	ldr	r3, [pc, #492]	@ (800d2ec <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 800d0fe:	731a      	strb	r2, [r3, #12]
  a_ManufData[ sizeof(a_ManufData)-1] = p_bd_addr[0];
 800d100:	693b      	ldr	r3, [r7, #16]
 800d102:	781a      	ldrb	r2, [r3, #0]
 800d104:	4b79      	ldr	r3, [pc, #484]	@ (800d2ec <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 800d106:	735a      	strb	r2, [r3, #13]
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive IRK and DHK(Legacy)
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 800d108:	4a79      	ldr	r2, [pc, #484]	@ (800d2f0 <Ble_Hci_Gap_Gatt_Init+0x2c0>)
 800d10a:	2110      	movs	r1, #16
 800d10c:	2018      	movs	r0, #24
 800d10e:	f7fd f821 	bl	800a154 <aci_hal_write_config_data>
 800d112:	4603      	mov	r3, r0
 800d114:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800d116:	7dfb      	ldrb	r3, [r7, #23]
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d005      	beq.n	800d128 <Ble_Hci_Gap_Gatt_Init+0xf8>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET, result: 0x%x \n", ret);
 800d11c:	7dfb      	ldrb	r3, [r7, #23]
 800d11e:	4619      	mov	r1, r3
 800d120:	4874      	ldr	r0, [pc, #464]	@ (800d2f4 <Ble_Hci_Gap_Gatt_Init+0x2c4>)
 800d122:	f001 fa33 	bl	800e58c <iprintf>
 800d126:	e002      	b.n	800d12e <Ble_Hci_Gap_Gatt_Init+0xfe>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET\n");
 800d128:	4873      	ldr	r0, [pc, #460]	@ (800d2f8 <Ble_Hci_Gap_Gatt_Init+0x2c8>)
 800d12a:	f001 fa9f 	bl	800e66c <puts>
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 800d12e:	4a73      	ldr	r2, [pc, #460]	@ (800d2fc <Ble_Hci_Gap_Gatt_Init+0x2cc>)
 800d130:	2110      	movs	r1, #16
 800d132:	2008      	movs	r0, #8
 800d134:	f7fd f80e 	bl	800a154 <aci_hal_write_config_data>
 800d138:	4603      	mov	r3, r0
 800d13a:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800d13c:	7dfb      	ldrb	r3, [r7, #23]
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d005      	beq.n	800d14e <Ble_Hci_Gap_Gatt_Init+0x11e>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET, result: 0x%x \n", ret);
 800d142:	7dfb      	ldrb	r3, [r7, #23]
 800d144:	4619      	mov	r1, r3
 800d146:	486e      	ldr	r0, [pc, #440]	@ (800d300 <Ble_Hci_Gap_Gatt_Init+0x2d0>)
 800d148:	f001 fa20 	bl	800e58c <iprintf>
 800d14c:	e002      	b.n	800d154 <Ble_Hci_Gap_Gatt_Init+0x124>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET\n");
 800d14e:	486d      	ldr	r0, [pc, #436]	@ (800d304 <Ble_Hci_Gap_Gatt_Init+0x2d4>)
 800d150:	f001 fa8c 	bl	800e66c <puts>
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 800d154:	2118      	movs	r1, #24
 800d156:	2001      	movs	r0, #1
 800d158:	f7fd f881 	bl	800a25e <aci_hal_set_tx_power_level>
 800d15c:	4603      	mov	r3, r0
 800d15e:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800d160:	7dfb      	ldrb	r3, [r7, #23]
 800d162:	2b00      	cmp	r3, #0
 800d164:	d005      	beq.n	800d172 <Ble_Hci_Gap_Gatt_Init+0x142>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_tx_power_level command, result: 0x%x \n", ret);
 800d166:	7dfb      	ldrb	r3, [r7, #23]
 800d168:	4619      	mov	r1, r3
 800d16a:	4867      	ldr	r0, [pc, #412]	@ (800d308 <Ble_Hci_Gap_Gatt_Init+0x2d8>)
 800d16c:	f001 fa0e 	bl	800e58c <iprintf>
 800d170:	e002      	b.n	800d178 <Ble_Hci_Gap_Gatt_Init+0x148>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_tx_power_level command\n");
 800d172:	4866      	ldr	r0, [pc, #408]	@ (800d30c <Ble_Hci_Gap_Gatt_Init+0x2dc>)
 800d174:	f001 fa7a 	bl	800e66c <puts>
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 800d178:	f7fc fceb 	bl	8009b52 <aci_gatt_init>
 800d17c:	4603      	mov	r3, r0
 800d17e:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800d180:	7dfb      	ldrb	r3, [r7, #23]
 800d182:	2b00      	cmp	r3, #0
 800d184:	d005      	beq.n	800d192 <Ble_Hci_Gap_Gatt_Init+0x162>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_init command, result: 0x%x \n", ret);
 800d186:	7dfb      	ldrb	r3, [r7, #23]
 800d188:	4619      	mov	r1, r3
 800d18a:	4861      	ldr	r0, [pc, #388]	@ (800d310 <Ble_Hci_Gap_Gatt_Init+0x2e0>)
 800d18c:	f001 f9fe 	bl	800e58c <iprintf>
 800d190:	e002      	b.n	800d198 <Ble_Hci_Gap_Gatt_Init+0x168>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_init command\n");
 800d192:	4860      	ldr	r0, [pc, #384]	@ (800d314 <Ble_Hci_Gap_Gatt_Init+0x2e4>)
 800d194:	f001 fa6a 	bl	800e66c <puts>
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 800d198:	2300      	movs	r3, #0
 800d19a:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 800d19c:	7bfb      	ldrb	r3, [r7, #15]
 800d19e:	f043 0301 	orr.w	r3, r3, #1
 800d1a2:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 800d1a4:	7bfb      	ldrb	r3, [r7, #15]
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d02b      	beq.n	800d202 <Ble_Hci_Gap_Gatt_Init+0x1d2>
  {
    const char *name = "Hermes V1";
 800d1aa:	4b5b      	ldr	r3, [pc, #364]	@ (800d318 <Ble_Hci_Gap_Gatt_Init+0x2e8>)
 800d1ac:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 800d1ae:	1dba      	adds	r2, r7, #6
 800d1b0:	7bf8      	ldrb	r0, [r7, #15]
 800d1b2:	1cbb      	adds	r3, r7, #2
 800d1b4:	9301      	str	r3, [sp, #4]
 800d1b6:	1d3b      	adds	r3, r7, #4
 800d1b8:	9300      	str	r3, [sp, #0]
 800d1ba:	4613      	mov	r3, r2
 800d1bc:	2207      	movs	r2, #7
 800d1be:	2100      	movs	r1, #0
 800d1c0:	f7fc fac9 	bl	8009756 <aci_gap_init>
 800d1c4:	4603      	mov	r3, r0
 800d1c6:	75fb      	strb	r3, [r7, #23]
                       APPBLE_GAP_DEVICE_NAME_LENGTH,
                       &gap_service_handle,
                       &gap_dev_name_char_handle,
                       &gap_appearance_char_handle);

    if (ret != BLE_STATUS_SUCCESS)
 800d1c8:	7dfb      	ldrb	r3, [r7, #23]
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d005      	beq.n	800d1da <Ble_Hci_Gap_Gatt_Init+0x1aa>
    {
      APP_DBG_MSG("  Fail   : aci_gap_init command, result: 0x%x \n", ret);
 800d1ce:	7dfb      	ldrb	r3, [r7, #23]
 800d1d0:	4619      	mov	r1, r3
 800d1d2:	4852      	ldr	r0, [pc, #328]	@ (800d31c <Ble_Hci_Gap_Gatt_Init+0x2ec>)
 800d1d4:	f001 f9da 	bl	800e58c <iprintf>
 800d1d8:	e002      	b.n	800d1e0 <Ble_Hci_Gap_Gatt_Init+0x1b0>
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
 800d1da:	4851      	ldr	r0, [pc, #324]	@ (800d320 <Ble_Hci_Gap_Gatt_Init+0x2f0>)
 800d1dc:	f001 fa46 	bl	800e66c <puts>
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 800d1e0:	88fc      	ldrh	r4, [r7, #6]
 800d1e2:	88bd      	ldrh	r5, [r7, #4]
 800d1e4:	68b8      	ldr	r0, [r7, #8]
 800d1e6:	f7f2 ffcb 	bl	8000180 <strlen>
 800d1ea:	4603      	mov	r3, r0
 800d1ec:	b2da      	uxtb	r2, r3
 800d1ee:	68bb      	ldr	r3, [r7, #8]
 800d1f0:	9300      	str	r3, [sp, #0]
 800d1f2:	4613      	mov	r3, r2
 800d1f4:	2200      	movs	r2, #0
 800d1f6:	4629      	mov	r1, r5
 800d1f8:	4620      	mov	r0, r4
 800d1fa:	f7fc fead 	bl	8009f58 <aci_gatt_update_char_value>
 800d1fe:	4603      	mov	r3, r0
 800d200:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 800d202:	88f8      	ldrh	r0, [r7, #6]
 800d204:	8879      	ldrh	r1, [r7, #2]
 800d206:	463b      	mov	r3, r7
 800d208:	9300      	str	r3, [sp, #0]
 800d20a:	2302      	movs	r3, #2
 800d20c:	2200      	movs	r2, #0
 800d20e:	f7fc fea3 	bl	8009f58 <aci_gatt_update_char_value>
 800d212:	4603      	mov	r3, r0
 800d214:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 800d216:	2202      	movs	r2, #2
 800d218:	2102      	movs	r1, #2
 800d21a:	2000      	movs	r0, #0
 800d21c:	f7fd f97c 	bl	800a518 <hci_le_set_default_phy>
 800d220:	4603      	mov	r3, r0
 800d222:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800d224:	7dfb      	ldrb	r3, [r7, #23]
 800d226:	2b00      	cmp	r3, #0
 800d228:	d005      	beq.n	800d236 <Ble_Hci_Gap_Gatt_Init+0x206>
  {
    APP_DBG_MSG("  Fail   : hci_le_set_default_phy command, result: 0x%x \n", ret);
 800d22a:	7dfb      	ldrb	r3, [r7, #23]
 800d22c:	4619      	mov	r1, r3
 800d22e:	483d      	ldr	r0, [pc, #244]	@ (800d324 <Ble_Hci_Gap_Gatt_Init+0x2f4>)
 800d230:	f001 f9ac 	bl	800e58c <iprintf>
 800d234:	e002      	b.n	800d23c <Ble_Hci_Gap_Gatt_Init+0x20c>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_le_set_default_phy command\n");
 800d236:	483c      	ldr	r0, [pc, #240]	@ (800d328 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 800d238:	f001 fa18 	bl	800e66c <puts>
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 800d23c:	4b3b      	ldr	r3, [pc, #236]	@ (800d32c <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800d23e:	2201      	movs	r2, #1
 800d240:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 800d242:	4b3a      	ldr	r3, [pc, #232]	@ (800d32c <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800d244:	781b      	ldrb	r3, [r3, #0]
 800d246:	4618      	mov	r0, r3
 800d248:	f7fc f906 	bl	8009458 <aci_gap_set_io_capability>
 800d24c:	4603      	mov	r3, r0
 800d24e:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800d250:	7dfb      	ldrb	r3, [r7, #23]
 800d252:	2b00      	cmp	r3, #0
 800d254:	d005      	beq.n	800d262 <Ble_Hci_Gap_Gatt_Init+0x232>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_io_capability command, result: 0x%x \n", ret);
 800d256:	7dfb      	ldrb	r3, [r7, #23]
 800d258:	4619      	mov	r1, r3
 800d25a:	4835      	ldr	r0, [pc, #212]	@ (800d330 <Ble_Hci_Gap_Gatt_Init+0x300>)
 800d25c:	f001 f996 	bl	800e58c <iprintf>
 800d260:	e002      	b.n	800d268 <Ble_Hci_Gap_Gatt_Init+0x238>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_io_capability command\n");
 800d262:	4834      	ldr	r0, [pc, #208]	@ (800d334 <Ble_Hci_Gap_Gatt_Init+0x304>)
 800d264:	f001 fa02 	bl	800e66c <puts>
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 800d268:	4b30      	ldr	r3, [pc, #192]	@ (800d32c <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800d26a:	2201      	movs	r2, #1
 800d26c:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 800d26e:	4b2f      	ldr	r3, [pc, #188]	@ (800d32c <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800d270:	2208      	movs	r2, #8
 800d272:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 800d274:	4b2d      	ldr	r3, [pc, #180]	@ (800d32c <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800d276:	2210      	movs	r2, #16
 800d278:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 800d27a:	4b2c      	ldr	r3, [pc, #176]	@ (800d32c <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800d27c:	2200      	movs	r2, #0
 800d27e:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 800d280:	4b2a      	ldr	r3, [pc, #168]	@ (800d32c <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800d282:	4a2d      	ldr	r2, [pc, #180]	@ (800d338 <Ble_Hci_Gap_Gatt_Init+0x308>)
 800d284:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 800d286:	4b29      	ldr	r3, [pc, #164]	@ (800d32c <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800d288:	2201      	movs	r2, #1
 800d28a:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 800d28c:	4b27      	ldr	r3, [pc, #156]	@ (800d32c <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800d28e:	789c      	ldrb	r4, [r3, #2]
 800d290:	4b26      	ldr	r3, [pc, #152]	@ (800d32c <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800d292:	785d      	ldrb	r5, [r3, #1]
 800d294:	4b25      	ldr	r3, [pc, #148]	@ (800d32c <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800d296:	791b      	ldrb	r3, [r3, #4]
 800d298:	4a24      	ldr	r2, [pc, #144]	@ (800d32c <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800d29a:	7952      	ldrb	r2, [r2, #5]
 800d29c:	4923      	ldr	r1, [pc, #140]	@ (800d32c <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800d29e:	78c9      	ldrb	r1, [r1, #3]
 800d2a0:	4822      	ldr	r0, [pc, #136]	@ (800d32c <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800d2a2:	6880      	ldr	r0, [r0, #8]
 800d2a4:	2600      	movs	r6, #0
 800d2a6:	9604      	str	r6, [sp, #16]
 800d2a8:	9003      	str	r0, [sp, #12]
 800d2aa:	9102      	str	r1, [sp, #8]
 800d2ac:	9201      	str	r2, [sp, #4]
 800d2ae:	9300      	str	r3, [sp, #0]
 800d2b0:	2300      	movs	r3, #0
 800d2b2:	2201      	movs	r2, #1
 800d2b4:	4629      	mov	r1, r5
 800d2b6:	4620      	mov	r0, r4
 800d2b8:	f7fc f922 	bl	8009500 <aci_gap_set_authentication_requirement>
 800d2bc:	4603      	mov	r3, r0
 800d2be:	75fb      	strb	r3, [r7, #23]
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin,
                                               CFG_IDENTITY_ADDRESS);
  if (ret != BLE_STATUS_SUCCESS)
 800d2c0:	7dfb      	ldrb	r3, [r7, #23]
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d03c      	beq.n	800d340 <Ble_Hci_Gap_Gatt_Init+0x310>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_authentication_requirement command, result: 0x%x \n", ret);
 800d2c6:	7dfb      	ldrb	r3, [r7, #23]
 800d2c8:	4619      	mov	r1, r3
 800d2ca:	481c      	ldr	r0, [pc, #112]	@ (800d33c <Ble_Hci_Gap_Gatt_Init+0x30c>)
 800d2cc:	f001 f95e 	bl	800e58c <iprintf>
 800d2d0:	e039      	b.n	800d346 <Ble_Hci_Gap_Gatt_Init+0x316>
 800d2d2:	bf00      	nop
 800d2d4:	08010394 	.word	0x08010394
 800d2d8:	080103c0 	.word	0x080103c0
 800d2dc:	080103f0 	.word	0x080103f0
 800d2e0:	08010410 	.word	0x08010410
 800d2e4:	0801046c 	.word	0x0801046c
 800d2e8:	080104b8 	.word	0x080104b8
 800d2ec:	2000001c 	.word	0x2000001c
 800d2f0:	08010eb8 	.word	0x08010eb8
 800d2f4:	080104f4 	.word	0x080104f4
 800d2f8:	0801054c 	.word	0x0801054c
 800d2fc:	08010ec8 	.word	0x08010ec8
 800d300:	08010594 	.word	0x08010594
 800d304:	080105ec 	.word	0x080105ec
 800d308:	08010634 	.word	0x08010634
 800d30c:	08010674 	.word	0x08010674
 800d310:	080106a4 	.word	0x080106a4
 800d314:	080106d8 	.word	0x080106d8
 800d318:	080106fc 	.word	0x080106fc
 800d31c:	08010708 	.word	0x08010708
 800d320:	08010738 	.word	0x08010738
 800d324:	08010758 	.word	0x08010758
 800d328:	08010794 	.word	0x08010794
 800d32c:	200004e4 	.word	0x200004e4
 800d330:	080107c0 	.word	0x080107c0
 800d334:	08010800 	.word	0x08010800
 800d338:	0001b207 	.word	0x0001b207
 800d33c:	08010830 	.word	0x08010830
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_authentication_requirement command\n");
 800d340:	480e      	ldr	r0, [pc, #56]	@ (800d37c <Ble_Hci_Gap_Gatt_Init+0x34c>)
 800d342:	f001 f993 	bl	800e66c <puts>
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 800d346:	4b0e      	ldr	r3, [pc, #56]	@ (800d380 <Ble_Hci_Gap_Gatt_Init+0x350>)
 800d348:	789b      	ldrb	r3, [r3, #2]
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d00f      	beq.n	800d36e <Ble_Hci_Gap_Gatt_Init+0x33e>
  {
    ret = aci_gap_configure_whitelist();
 800d34e:	f7fc fb21 	bl	8009994 <aci_gap_configure_filter_accept_list>
 800d352:	4603      	mov	r3, r0
 800d354:	75fb      	strb	r3, [r7, #23]
    if (ret != BLE_STATUS_SUCCESS)
 800d356:	7dfb      	ldrb	r3, [r7, #23]
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d005      	beq.n	800d368 <Ble_Hci_Gap_Gatt_Init+0x338>
    {
      APP_DBG_MSG("  Fail   : aci_gap_configure_whitelist command, result: 0x%x \n", ret);
 800d35c:	7dfb      	ldrb	r3, [r7, #23]
 800d35e:	4619      	mov	r1, r3
 800d360:	4808      	ldr	r0, [pc, #32]	@ (800d384 <Ble_Hci_Gap_Gatt_Init+0x354>)
 800d362:	f001 f913 	bl	800e58c <iprintf>
 800d366:	e002      	b.n	800d36e <Ble_Hci_Gap_Gatt_Init+0x33e>
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
 800d368:	4807      	ldr	r0, [pc, #28]	@ (800d388 <Ble_Hci_Gap_Gatt_Init+0x358>)
 800d36a:	f001 f97f 	bl	800e66c <puts>
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
 800d36e:	4807      	ldr	r0, [pc, #28]	@ (800d38c <Ble_Hci_Gap_Gatt_Init+0x35c>)
 800d370:	f001 f90c 	bl	800e58c <iprintf>
}
 800d374:	bf00      	nop
 800d376:	371c      	adds	r7, #28
 800d378:	46bd      	mov	sp, r7
 800d37a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d37c:	0801087c 	.word	0x0801087c
 800d380:	200004e4 	.word	0x200004e4
 800d384:	080108b8 	.word	0x080108b8
 800d388:	080108f8 	.word	0x080108f8
 800d38c:	08010928 	.word	0x08010928

0800d390 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 800d390:	b580      	push	{r7, lr}
 800d392:	b08c      	sub	sp, #48	@ 0x30
 800d394:	af08      	add	r7, sp, #32
 800d396:	4603      	mov	r3, r0
 800d398:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800d39a:	2392      	movs	r3, #146	@ 0x92
 800d39c:	72fb      	strb	r3, [r7, #11]
  uint16_t Min_Inter, Max_Inter;

  if (NewStatus == APP_BLE_FAST_ADV)
 800d39e:	79fb      	ldrb	r3, [r7, #7]
 800d3a0:	2b01      	cmp	r3, #1
 800d3a2:	d106      	bne.n	800d3b2 <Adv_Request+0x22>
  {
    Min_Inter = AdvIntervalMin;
 800d3a4:	4b41      	ldr	r3, [pc, #260]	@ (800d4ac <Adv_Request+0x11c>)
 800d3a6:	881b      	ldrh	r3, [r3, #0]
 800d3a8:	81fb      	strh	r3, [r7, #14]
    Max_Inter = AdvIntervalMax;
 800d3aa:	4b41      	ldr	r3, [pc, #260]	@ (800d4b0 <Adv_Request+0x120>)
 800d3ac:	881b      	ldrh	r3, [r3, #0]
 800d3ae:	81bb      	strh	r3, [r7, #12]
 800d3b0:	e005      	b.n	800d3be <Adv_Request+0x2e>
  }
  else
  {
    Min_Inter = CFG_LP_CONN_ADV_INTERVAL_MIN;
 800d3b2:	f44f 63c8 	mov.w	r3, #1600	@ 0x640
 800d3b6:	81fb      	strh	r3, [r7, #14]
    Max_Inter = CFG_LP_CONN_ADV_INTERVAL_MAX;
 800d3b8:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 800d3bc:	81bb      	strh	r3, [r7, #12]

  /**
   * Stop the timer, it will be restarted for a new shot
   * It does not hurt if the timer was not running
   */
  HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 800d3be:	4b3d      	ldr	r3, [pc, #244]	@ (800d4b4 <Adv_Request+0x124>)
 800d3c0:	f893 3085 	ldrb.w	r3, [r3, #133]	@ 0x85
 800d3c4:	4618      	mov	r0, r3
 800d3c6:	f7f4 fdd5 	bl	8001f74 <HW_TS_Stop>

  if ((NewStatus == APP_BLE_LP_ADV)
 800d3ca:	79fb      	ldrb	r3, [r7, #7]
 800d3cc:	2b02      	cmp	r3, #2
 800d3ce:	d119      	bne.n	800d404 <Adv_Request+0x74>
      && ((BleApplicationContext.Device_Connection_Status == APP_BLE_FAST_ADV)
 800d3d0:	4b38      	ldr	r3, [pc, #224]	@ (800d4b4 <Adv_Request+0x124>)
 800d3d2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d3d6:	2b01      	cmp	r3, #1
 800d3d8:	d004      	beq.n	800d3e4 <Adv_Request+0x54>
          || (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_ADV)))
 800d3da:	4b36      	ldr	r3, [pc, #216]	@ (800d4b4 <Adv_Request+0x124>)
 800d3dc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d3e0:	2b02      	cmp	r3, #2
 800d3e2:	d10f      	bne.n	800d404 <Adv_Request+0x74>
  {
    /* Connection in ADVERTISE mode have to stop the current advertising */
    ret = aci_gap_set_non_discoverable();
 800d3e4:	f7fb ff1a 	bl	800921c <aci_gap_set_non_discoverable>
 800d3e8:	4603      	mov	r3, r0
 800d3ea:	72fb      	strb	r3, [r7, #11]
    if (ret != BLE_STATUS_SUCCESS)
 800d3ec:	7afb      	ldrb	r3, [r7, #11]
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d005      	beq.n	800d3fe <Adv_Request+0x6e>
    {
      APP_DBG_MSG("==>> aci_gap_set_non_discoverable - Stop Advertising Failed , result: %d \n", ret);
 800d3f2:	7afb      	ldrb	r3, [r7, #11]
 800d3f4:	4619      	mov	r1, r3
 800d3f6:	4830      	ldr	r0, [pc, #192]	@ (800d4b8 <Adv_Request+0x128>)
 800d3f8:	f001 f8c8 	bl	800e58c <iprintf>
 800d3fc:	e002      	b.n	800d404 <Adv_Request+0x74>
    }
    else
    {
      APP_DBG_MSG("==>> aci_gap_set_non_discoverable - Successfully Stopped Advertising \n");
 800d3fe:	482f      	ldr	r0, [pc, #188]	@ (800d4bc <Adv_Request+0x12c>)
 800d400:	f001 f934 	bl	800e66c <puts>
    }
  }

  BleApplicationContext.Device_Connection_Status = NewStatus;
 800d404:	4a2b      	ldr	r2, [pc, #172]	@ (800d4b4 <Adv_Request+0x124>)
 800d406:	79fb      	ldrb	r3, [r7, #7]
 800d408:	f882 3084 	strb.w	r3, [r2, #132]	@ 0x84
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_IND,
 800d40c:	4b29      	ldr	r3, [pc, #164]	@ (800d4b4 <Adv_Request+0x124>)
 800d40e:	7e1b      	ldrb	r3, [r3, #24]
 800d410:	89ba      	ldrh	r2, [r7, #12]
 800d412:	89f9      	ldrh	r1, [r7, #14]
 800d414:	2000      	movs	r0, #0
 800d416:	9006      	str	r0, [sp, #24]
 800d418:	2000      	movs	r0, #0
 800d41a:	9005      	str	r0, [sp, #20]
 800d41c:	4828      	ldr	r0, [pc, #160]	@ (800d4c0 <Adv_Request+0x130>)
 800d41e:	9004      	str	r0, [sp, #16]
 800d420:	9303      	str	r3, [sp, #12]
 800d422:	4b28      	ldr	r3, [pc, #160]	@ (800d4c4 <Adv_Request+0x134>)
 800d424:	9302      	str	r3, [sp, #8]
 800d426:	230a      	movs	r3, #10
 800d428:	9301      	str	r3, [sp, #4]
 800d42a:	2300      	movs	r3, #0
 800d42c:	9300      	str	r3, [sp, #0]
 800d42e:	2300      	movs	r3, #0
 800d430:	2000      	movs	r0, #0
 800d432:	f7fb ff17 	bl	8009264 <aci_gap_set_discoverable>
 800d436:	4603      	mov	r3, r0
 800d438:	72fb      	strb	r3, [r7, #11]
                                 (uint8_t*) &a_LocalName,
                                 BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen,
                                 BleApplicationContext.BleApplicationContext_legacy.advtServUUID,
                                 0,
                                 0);
  if (ret != BLE_STATUS_SUCCESS)
 800d43a:	7afb      	ldrb	r3, [r7, #11]
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d005      	beq.n	800d44c <Adv_Request+0xbc>
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - fail, result: 0x%x \n", ret);
 800d440:	7afb      	ldrb	r3, [r7, #11]
 800d442:	4619      	mov	r1, r3
 800d444:	4820      	ldr	r0, [pc, #128]	@ (800d4c8 <Adv_Request+0x138>)
 800d446:	f001 f8a1 	bl	800e58c <iprintf>
 800d44a:	e002      	b.n	800d452 <Adv_Request+0xc2>
  }
  else
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - Success\n");
 800d44c:	481f      	ldr	r0, [pc, #124]	@ (800d4cc <Adv_Request+0x13c>)
 800d44e:	f001 f90d 	bl	800e66c <puts>
  }

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_ManufData), (uint8_t*) a_ManufData);
 800d452:	491f      	ldr	r1, [pc, #124]	@ (800d4d0 <Adv_Request+0x140>)
 800d454:	200e      	movs	r0, #14
 800d456:	f7fc fa2b 	bl	80098b0 <aci_gap_update_adv_data>
 800d45a:	4603      	mov	r3, r0
 800d45c:	72fb      	strb	r3, [r7, #11]
  if (ret != BLE_STATUS_SUCCESS)
 800d45e:	7afb      	ldrb	r3, [r7, #11]
 800d460:	2b00      	cmp	r3, #0
 800d462:	d00e      	beq.n	800d482 <Adv_Request+0xf2>
  {
    if (NewStatus == APP_BLE_FAST_ADV)
 800d464:	79fb      	ldrb	r3, [r7, #7]
 800d466:	2b01      	cmp	r3, #1
 800d468:	d105      	bne.n	800d476 <Adv_Request+0xe6>
    {
      APP_DBG_MSG("==>> Start Fast Advertising Failed , result: %d \n\r", ret);
 800d46a:	7afb      	ldrb	r3, [r7, #11]
 800d46c:	4619      	mov	r1, r3
 800d46e:	4819      	ldr	r0, [pc, #100]	@ (800d4d4 <Adv_Request+0x144>)
 800d470:	f001 f88c 	bl	800e58c <iprintf>
    {
      APP_DBG_MSG("==>> Success: Start Low Power Advertising \n\r");
    }
  }

  return;
 800d474:	e017      	b.n	800d4a6 <Adv_Request+0x116>
      APP_DBG_MSG("==>> Start Low Power Advertising Failed , result: %d \n\r", ret);
 800d476:	7afb      	ldrb	r3, [r7, #11]
 800d478:	4619      	mov	r1, r3
 800d47a:	4817      	ldr	r0, [pc, #92]	@ (800d4d8 <Adv_Request+0x148>)
 800d47c:	f001 f886 	bl	800e58c <iprintf>
  return;
 800d480:	e011      	b.n	800d4a6 <Adv_Request+0x116>
    if (NewStatus == APP_BLE_FAST_ADV)
 800d482:	79fb      	ldrb	r3, [r7, #7]
 800d484:	2b01      	cmp	r3, #1
 800d486:	d10a      	bne.n	800d49e <Adv_Request+0x10e>
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
 800d488:	4814      	ldr	r0, [pc, #80]	@ (800d4dc <Adv_Request+0x14c>)
 800d48a:	f001 f87f 	bl	800e58c <iprintf>
      HW_TS_Start(BleApplicationContext.Advertising_mgr_timer_Id, INITIAL_ADV_TIMEOUT);
 800d48e:	4b09      	ldr	r3, [pc, #36]	@ (800d4b4 <Adv_Request+0x124>)
 800d490:	f893 3085 	ldrb.w	r3, [r3, #133]	@ 0x85
 800d494:	4912      	ldr	r1, [pc, #72]	@ (800d4e0 <Adv_Request+0x150>)
 800d496:	4618      	mov	r0, r3
 800d498:	f7f4 fdf0 	bl	800207c <HW_TS_Start>
  return;
 800d49c:	e003      	b.n	800d4a6 <Adv_Request+0x116>
      APP_DBG_MSG("==>> Success: Start Low Power Advertising \n\r");
 800d49e:	4811      	ldr	r0, [pc, #68]	@ (800d4e4 <Adv_Request+0x154>)
 800d4a0:	f001 f874 	bl	800e58c <iprintf>
  return;
 800d4a4:	bf00      	nop
}
 800d4a6:	3710      	adds	r7, #16
 800d4a8:	46bd      	mov	sp, r7
 800d4aa:	bd80      	pop	{r7, pc}
 800d4ac:	20000574 	.word	0x20000574
 800d4b0:	20000576 	.word	0x20000576
 800d4b4:	200004e4 	.word	0x200004e4
 800d4b8:	08010954 	.word	0x08010954
 800d4bc:	080109a0 	.word	0x080109a0
 800d4c0:	200004fd 	.word	0x200004fd
 800d4c4:	08010ed8 	.word	0x08010ed8
 800d4c8:	080109e8 	.word	0x080109e8
 800d4cc:	08010a20 	.word	0x08010a20
 800d4d0:	2000001c 	.word	0x2000001c
 800d4d4:	08010a48 	.word	0x08010a48
 800d4d8:	08010a7c 	.word	0x08010a7c
 800d4dc:	08010ab4 	.word	0x08010ab4
 800d4e0:	0001e046 	.word	0x0001e046
 800d4e4:	08010adc 	.word	0x08010adc

0800d4e8 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 800d4e8:	b580      	push	{r7, lr}
 800d4ea:	b086      	sub	sp, #24
 800d4ec:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 800d4ee:	f7fe fed5 	bl	800c29c <LL_FLASH_GetUDN>
 800d4f2:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 800d4f4:	693b      	ldr	r3, [r7, #16]
 800d4f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4fa:	d023      	beq.n	800d544 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 800d4fc:	f7fe fee6 	bl	800c2cc <LL_FLASH_GetSTCompanyID>
 800d500:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 800d502:	f7fe fed7 	bl	800c2b4 <LL_FLASH_GetDeviceID>
 800d506:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 800d508:	693b      	ldr	r3, [r7, #16]
 800d50a:	b2da      	uxtb	r2, r3
 800d50c:	4b16      	ldr	r3, [pc, #88]	@ (800d568 <BleGetBdAddress+0x80>)
 800d50e:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 800d510:	693b      	ldr	r3, [r7, #16]
 800d512:	0a1b      	lsrs	r3, r3, #8
 800d514:	b2da      	uxtb	r2, r3
 800d516:	4b14      	ldr	r3, [pc, #80]	@ (800d568 <BleGetBdAddress+0x80>)
 800d518:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	b2da      	uxtb	r2, r3
 800d51e:	4b12      	ldr	r3, [pc, #72]	@ (800d568 <BleGetBdAddress+0x80>)
 800d520:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 800d522:	68bb      	ldr	r3, [r7, #8]
 800d524:	b2da      	uxtb	r2, r3
 800d526:	4b10      	ldr	r3, [pc, #64]	@ (800d568 <BleGetBdAddress+0x80>)
 800d528:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 800d52a:	68bb      	ldr	r3, [r7, #8]
 800d52c:	0a1b      	lsrs	r3, r3, #8
 800d52e:	b2da      	uxtb	r2, r3
 800d530:	4b0d      	ldr	r3, [pc, #52]	@ (800d568 <BleGetBdAddress+0x80>)
 800d532:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 800d534:	68bb      	ldr	r3, [r7, #8]
 800d536:	0c1b      	lsrs	r3, r3, #16
 800d538:	b2da      	uxtb	r2, r3
 800d53a:	4b0b      	ldr	r3, [pc, #44]	@ (800d568 <BleGetBdAddress+0x80>)
 800d53c:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 800d53e:	4b0a      	ldr	r3, [pc, #40]	@ (800d568 <BleGetBdAddress+0x80>)
 800d540:	617b      	str	r3, [r7, #20]
 800d542:	e00b      	b.n	800d55c <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 800d544:	2000      	movs	r0, #0
 800d546:	f7fe f9f9 	bl	800b93c <OTP_Read>
 800d54a:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d002      	beq.n	800d558 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	617b      	str	r3, [r7, #20]
 800d556:	e001      	b.n	800d55c <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 800d558:	4b04      	ldr	r3, [pc, #16]	@ (800d56c <BleGetBdAddress+0x84>)
 800d55a:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 800d55c:	697b      	ldr	r3, [r7, #20]
}
 800d55e:	4618      	mov	r0, r3
 800d560:	3718      	adds	r7, #24
 800d562:	46bd      	mov	sp, r7
 800d564:	bd80      	pop	{r7, pc}
 800d566:	bf00      	nop
 800d568:	200004dc 	.word	0x200004dc
 800d56c:	08010eb0 	.word	0x08010eb0

0800d570 <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR P2P SERVER
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 800d570:	b580      	push	{r7, lr}
 800d572:	b082      	sub	sp, #8
 800d574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 800d576:	4b10      	ldr	r3, [pc, #64]	@ (800d5b8 <Adv_Cancel+0x48>)
 800d578:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d57c:	2b05      	cmp	r3, #5
 800d57e:	d017      	beq.n	800d5b0 <Adv_Cancel+0x40>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800d580:	2392      	movs	r3, #146	@ 0x92
 800d582:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 800d584:	f7fb fe4a 	bl	800921c <aci_gap_set_non_discoverable>
 800d588:	4603      	mov	r3, r0
 800d58a:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800d58c:	4b0a      	ldr	r3, [pc, #40]	@ (800d5b8 <Adv_Cancel+0x48>)
 800d58e:	2200      	movs	r2, #0
 800d590:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
    if (ret != BLE_STATUS_SUCCESS)
 800d594:	79fb      	ldrb	r3, [r7, #7]
 800d596:	2b00      	cmp	r3, #0
 800d598:	d003      	beq.n	800d5a2 <Adv_Cancel+0x32>
    {
      APP_DBG_MSG("** STOP ADVERTISING **  Failed \r\n\r");
 800d59a:	4808      	ldr	r0, [pc, #32]	@ (800d5bc <Adv_Cancel+0x4c>)
 800d59c:	f000 fff6 	bl	800e58c <iprintf>

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 800d5a0:	e006      	b.n	800d5b0 <Adv_Cancel+0x40>
      APP_DBG_MSG("  \r\n\r");
 800d5a2:	4807      	ldr	r0, [pc, #28]	@ (800d5c0 <Adv_Cancel+0x50>)
 800d5a4:	f000 fff2 	bl	800e58c <iprintf>
      APP_DBG_MSG("** STOP ADVERTISING **  \r\n\r");
 800d5a8:	4806      	ldr	r0, [pc, #24]	@ (800d5c4 <Adv_Cancel+0x54>)
 800d5aa:	f000 ffef 	bl	800e58c <iprintf>
  return;
 800d5ae:	bf00      	nop
 800d5b0:	bf00      	nop
}
 800d5b2:	3708      	adds	r7, #8
 800d5b4:	46bd      	mov	sp, r7
 800d5b6:	bd80      	pop	{r7, pc}
 800d5b8:	200004e4 	.word	0x200004e4
 800d5bc:	08010b0c 	.word	0x08010b0c
 800d5c0:	08010b30 	.word	0x08010b30
 800d5c4:	08010b38 	.word	0x08010b38

0800d5c8 <Adv_Cancel_Req>:

static void Adv_Cancel_Req(void)
{
 800d5c8:	b580      	push	{r7, lr}
 800d5ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_Req_1 */

  /* USER CODE END Adv_Cancel_Req_1 */

  UTIL_SEQ_SetTask(1 << CFG_TASK_ADV_CANCEL_ID, CFG_SCH_PRIO_0);
 800d5cc:	2100      	movs	r1, #0
 800d5ce:	2001      	movs	r0, #1
 800d5d0:	f000 fe1e 	bl	800e210 <UTIL_SEQ_SetTask>

  /* USER CODE BEGIN Adv_Cancel_Req_2 */

  /* USER CODE END Adv_Cancel_Req_2 */

  return;
 800d5d4:	bf00      	nop
}
 800d5d6:	bd80      	pop	{r7, pc}

0800d5d8 <Switch_OFF_GPIO>:

static void Switch_OFF_GPIO()
{
 800d5d8:	b480      	push	{r7}
 800d5da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Switch_OFF_GPIO */

  /* USER CODE END Switch_OFF_GPIO */
}
 800d5dc:	bf00      	nop
 800d5de:	46bd      	mov	sp, r7
 800d5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5e4:	4770      	bx	lr
	...

0800d5e8 <BLE_SVC_L2CAP_Conn_Update>:

#if (L2CAP_REQUEST_NEW_CONN_PARAM != 0)
void BLE_SVC_L2CAP_Conn_Update(uint16_t ConnectionHandle)
{
 800d5e8:	b590      	push	{r4, r7, lr}
 800d5ea:	b089      	sub	sp, #36	@ 0x24
 800d5ec:	af02      	add	r7, sp, #8
 800d5ee:	4603      	mov	r3, r0
 800d5f0:	80fb      	strh	r3, [r7, #6]
  /* USER CODE BEGIN BLE_SVC_L2CAP_Conn_Update_1 */

  /* USER CODE END BLE_SVC_L2CAP_Conn_Update_1 */

  if (mutex == 1)
 800d5f2:	4b29      	ldr	r3, [pc, #164]	@ (800d698 <BLE_SVC_L2CAP_Conn_Update+0xb0>)
 800d5f4:	781b      	ldrb	r3, [r3, #0]
 800d5f6:	2b01      	cmp	r3, #1
 800d5f8:	d149      	bne.n	800d68e <BLE_SVC_L2CAP_Conn_Update+0xa6>
  {
    mutex = 0;
 800d5fa:	4b27      	ldr	r3, [pc, #156]	@ (800d698 <BLE_SVC_L2CAP_Conn_Update+0xb0>)
 800d5fc:	2200      	movs	r2, #0
 800d5fe:	701a      	strb	r2, [r3, #0]
    index_con_int = (index_con_int + 1)%SIZE_TAB_CONN_INT;
 800d600:	4b26      	ldr	r3, [pc, #152]	@ (800d69c <BLE_SVC_L2CAP_Conn_Update+0xb4>)
 800d602:	781b      	ldrb	r3, [r3, #0]
 800d604:	3301      	adds	r3, #1
 800d606:	2b00      	cmp	r3, #0
 800d608:	f003 0301 	and.w	r3, r3, #1
 800d60c:	bfb8      	it	lt
 800d60e:	425b      	neglt	r3, r3
 800d610:	b2da      	uxtb	r2, r3
 800d612:	4b22      	ldr	r3, [pc, #136]	@ (800d69c <BLE_SVC_L2CAP_Conn_Update+0xb4>)
 800d614:	701a      	strb	r2, [r3, #0]
    uint16_t interval_min = CONN_P(a_ConnInterval[index_con_int]);
 800d616:	4b21      	ldr	r3, [pc, #132]	@ (800d69c <BLE_SVC_L2CAP_Conn_Update+0xb4>)
 800d618:	781b      	ldrb	r3, [r3, #0]
 800d61a:	4a21      	ldr	r2, [pc, #132]	@ (800d6a0 <BLE_SVC_L2CAP_Conn_Update+0xb8>)
 800d61c:	009b      	lsls	r3, r3, #2
 800d61e:	4413      	add	r3, r2
 800d620:	ed93 7a00 	vldr	s14, [r3]
 800d624:	eef7 6a04 	vmov.f32	s13, #116	@ 0x3fa00000  1.250
 800d628:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d62c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d630:	ee17 3a90 	vmov	r3, s15
 800d634:	82fb      	strh	r3, [r7, #22]
    uint16_t interval_max = CONN_P(a_ConnInterval[index_con_int]);
 800d636:	4b19      	ldr	r3, [pc, #100]	@ (800d69c <BLE_SVC_L2CAP_Conn_Update+0xb4>)
 800d638:	781b      	ldrb	r3, [r3, #0]
 800d63a:	4a19      	ldr	r2, [pc, #100]	@ (800d6a0 <BLE_SVC_L2CAP_Conn_Update+0xb8>)
 800d63c:	009b      	lsls	r3, r3, #2
 800d63e:	4413      	add	r3, r2
 800d640:	ed93 7a00 	vldr	s14, [r3]
 800d644:	eef7 6a04 	vmov.f32	s13, #116	@ 0x3fa00000  1.250
 800d648:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d64c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d650:	ee17 3a90 	vmov	r3, s15
 800d654:	82bb      	strh	r3, [r7, #20]
    uint16_t peripheral_latency = L2CAP_PERIPHERAL_LATENCY;
 800d656:	2300      	movs	r3, #0
 800d658:	827b      	strh	r3, [r7, #18]
    uint16_t timeout_multiplier = L2CAP_TIMEOUT_MULTIPLIER;
 800d65a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800d65e:	823b      	strh	r3, [r7, #16]
    tBleStatus ret;

    ret = aci_l2cap_connection_parameter_update_req(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,
 800d660:	4b10      	ldr	r3, [pc, #64]	@ (800d6a4 <BLE_SVC_L2CAP_Conn_Update+0xbc>)
 800d662:	8ad8      	ldrh	r0, [r3, #22]
 800d664:	8a7c      	ldrh	r4, [r7, #18]
 800d666:	8aba      	ldrh	r2, [r7, #20]
 800d668:	8af9      	ldrh	r1, [r7, #22]
 800d66a:	8a3b      	ldrh	r3, [r7, #16]
 800d66c:	9300      	str	r3, [sp, #0]
 800d66e:	4623      	mov	r3, r4
 800d670:	f7fc ffcf 	bl	800a612 <aci_l2cap_connection_parameter_update_req>
 800d674:	4603      	mov	r3, r0
 800d676:	73fb      	strb	r3, [r7, #15]
                                                    interval_min, interval_max,
                                                    peripheral_latency, timeout_multiplier);
    if (ret != BLE_STATUS_SUCCESS)
 800d678:	7bfb      	ldrb	r3, [r7, #15]
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d003      	beq.n	800d686 <BLE_SVC_L2CAP_Conn_Update+0x9e>
    {
      APP_DBG_MSG("BLE_SVC_L2CAP_Conn_Update(), Failed \r\n\r");
 800d67e:	480a      	ldr	r0, [pc, #40]	@ (800d6a8 <BLE_SVC_L2CAP_Conn_Update+0xc0>)
 800d680:	f000 ff84 	bl	800e58c <iprintf>
  }

  /* USER CODE BEGIN BLE_SVC_L2CAP_Conn_Update_2 */
  /* USER CODE END BLE_SVC_L2CAP_Conn_Update_2 */

  return;
 800d684:	e003      	b.n	800d68e <BLE_SVC_L2CAP_Conn_Update+0xa6>
      APP_DBG_MSG("BLE_SVC_L2CAP_Conn_Update(), Successfully \r\n\r");
 800d686:	4809      	ldr	r0, [pc, #36]	@ (800d6ac <BLE_SVC_L2CAP_Conn_Update+0xc4>)
 800d688:	f000 ff80 	bl	800e58c <iprintf>
  return;
 800d68c:	bf00      	nop
 800d68e:	bf00      	nop
}
 800d690:	371c      	adds	r7, #28
 800d692:	46bd      	mov	sp, r7
 800d694:	bd90      	pop	{r4, r7, pc}
 800d696:	bf00      	nop
 800d698:	2000057d 	.word	0x2000057d
 800d69c:	2000057c 	.word	0x2000057c
 800d6a0:	20000014 	.word	0x20000014
 800d6a4:	200004e4 	.word	0x200004e4
 800d6a8:	08010b54 	.word	0x08010b54
 800d6ac:	08010b7c 	.word	0x08010b7c

0800d6b0 <Connection_Interval_Update_Req>:
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

#if (L2CAP_REQUEST_NEW_CONN_PARAM != 0)
static void Connection_Interval_Update_Req(void)
{
 800d6b0:	b580      	push	{r7, lr}
 800d6b2:	af00      	add	r7, sp, #0
  if (BleApplicationContext.Device_Connection_Status != APP_BLE_FAST_ADV && BleApplicationContext.Device_Connection_Status != APP_BLE_IDLE)
 800d6b4:	4b08      	ldr	r3, [pc, #32]	@ (800d6d8 <Connection_Interval_Update_Req+0x28>)
 800d6b6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d6ba:	2b01      	cmp	r3, #1
 800d6bc:	d00a      	beq.n	800d6d4 <Connection_Interval_Update_Req+0x24>
 800d6be:	4b06      	ldr	r3, [pc, #24]	@ (800d6d8 <Connection_Interval_Update_Req+0x28>)
 800d6c0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d005      	beq.n	800d6d4 <Connection_Interval_Update_Req+0x24>
  {
    BLE_SVC_L2CAP_Conn_Update(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 800d6c8:	4b03      	ldr	r3, [pc, #12]	@ (800d6d8 <Connection_Interval_Update_Req+0x28>)
 800d6ca:	8adb      	ldrh	r3, [r3, #22]
 800d6cc:	4618      	mov	r0, r3
 800d6ce:	f7ff ff8b 	bl	800d5e8 <BLE_SVC_L2CAP_Conn_Update>
  }

  return;
 800d6d2:	bf00      	nop
 800d6d4:	bf00      	nop
}
 800d6d6:	bd80      	pop	{r7, pc}
 800d6d8:	200004e4 	.word	0x200004e4

0800d6dc <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 800d6dc:	b580      	push	{r7, lr}
 800d6de:	b082      	sub	sp, #8
 800d6e0:	af00      	add	r7, sp, #0
 800d6e2:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800d6e4:	2100      	movs	r1, #0
 800d6e6:	2004      	movs	r0, #4
 800d6e8:	f000 fd92 	bl	800e210 <UTIL_SEQ_SetTask>

  return;
 800d6ec:	bf00      	nop
}
 800d6ee:	3708      	adds	r7, #8
 800d6f0:	46bd      	mov	sp, r7
 800d6f2:	bd80      	pop	{r7, pc}

0800d6f4 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 800d6f4:	b580      	push	{r7, lr}
 800d6f6:	b082      	sub	sp, #8
 800d6f8:	af00      	add	r7, sp, #0
 800d6fa:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800d6fc:	2001      	movs	r0, #1
 800d6fe:	f000 fdf3 	bl	800e2e8 <UTIL_SEQ_SetEvt>

  return;
 800d702:	bf00      	nop
}
 800d704:	3708      	adds	r7, #8
 800d706:	46bd      	mov	sp, r7
 800d708:	bd80      	pop	{r7, pc}

0800d70a <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 800d70a:	b580      	push	{r7, lr}
 800d70c:	b082      	sub	sp, #8
 800d70e:	af00      	add	r7, sp, #0
 800d710:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800d712:	2001      	movs	r0, #1
 800d714:	f000 fe08 	bl	800e328 <UTIL_SEQ_WaitEvt>

  return;
 800d718:	bf00      	nop
}
 800d71a:	3708      	adds	r7, #8
 800d71c:	46bd      	mov	sp, r7
 800d71e:	bd80      	pop	{r7, pc}

0800d720 <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 800d720:	b580      	push	{r7, lr}
 800d722:	b084      	sub	sp, #16
 800d724:	af00      	add	r7, sp, #0
 800d726:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	685b      	ldr	r3, [r3, #4]
 800d730:	3308      	adds	r3, #8
 800d732:	4618      	mov	r0, r3
 800d734:	f7fd fa00 	bl	800ab38 <SVCCTL_UserEvtRx>
 800d738:	4603      	mov	r3, r0
 800d73a:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 800d73c:	7afb      	ldrb	r3, [r7, #11]
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d003      	beq.n	800d74a <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	2201      	movs	r2, #1
 800d746:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 800d748:	e003      	b.n	800d752 <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	2200      	movs	r2, #0
 800d74e:	701a      	strb	r2, [r3, #0]
  return;
 800d750:	bf00      	nop
}
 800d752:	3710      	adds	r7, #16
 800d754:	46bd      	mov	sp, r7
 800d756:	bd80      	pop	{r7, pc}

0800d758 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 800d758:	b580      	push	{r7, lr}
 800d75a:	b084      	sub	sp, #16
 800d75c:	af00      	add	r7, sp, #0
 800d75e:	4603      	mov	r3, r0
 800d760:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 800d762:	79fb      	ldrb	r3, [r7, #7]
 800d764:	2b00      	cmp	r3, #0
 800d766:	d002      	beq.n	800d76e <BLE_StatusNot+0x16>
 800d768:	2b01      	cmp	r3, #1
 800d76a:	d006      	beq.n	800d77a <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 800d76c:	e00b      	b.n	800d786 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800d76e:	233f      	movs	r3, #63	@ 0x3f
 800d770:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 800d772:	68f8      	ldr	r0, [r7, #12]
 800d774:	f000 fd78 	bl	800e268 <UTIL_SEQ_PauseTask>
      break;
 800d778:	e005      	b.n	800d786 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800d77a:	233f      	movs	r3, #63	@ 0x3f
 800d77c:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 800d77e:	68f8      	ldr	r0, [r7, #12]
 800d780:	f000 fd92 	bl	800e2a8 <UTIL_SEQ_ResumeTask>
      break;
 800d784:	bf00      	nop
  }

  return;
 800d786:	bf00      	nop
}
 800d788:	3710      	adds	r7, #16
 800d78a:	46bd      	mov	sp, r7
 800d78c:	bd80      	pop	{r7, pc}
	...

0800d790 <P2PS_STM_App_Notification>:
//static void P2PS_APP_LED_BUTTON_context_Init(void);
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void P2PS_STM_App_Notification(P2PS_STM_App_Notification_evt_t *pNotification)
{
 800d790:	b580      	push	{r7, lr}
 800d792:	b082      	sub	sp, #8
 800d794:	af00      	add	r7, sp, #0
 800d796:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_STM_App_Notification_1 */
/* USER CODE END P2PS_STM_App_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	781b      	ldrb	r3, [r3, #0]
 800d79c:	2b03      	cmp	r3, #3
 800d79e:	d01a      	beq.n	800d7d6 <P2PS_STM_App_Notification+0x46>
 800d7a0:	2b03      	cmp	r3, #3
 800d7a2:	dc5f      	bgt.n	800d864 <P2PS_STM_App_Notification+0xd4>
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d002      	beq.n	800d7ae <P2PS_STM_App_Notification+0x1e>
 800d7a8:	2b01      	cmp	r3, #1
 800d7aa:	d00a      	beq.n	800d7c2 <P2PS_STM_App_Notification+0x32>

    default:
/* USER CODE BEGIN P2PS_STM_App_Notification_default */
      
/* USER CODE END P2PS_STM_App_Notification_default */
      break;
 800d7ac:	e05a      	b.n	800d864 <P2PS_STM_App_Notification+0xd4>
      P2P_Server_App_Context.Notification_Status = 1;
 800d7ae:	4b31      	ldr	r3, [pc, #196]	@ (800d874 <P2PS_STM_App_Notification+0xe4>)
 800d7b0:	2201      	movs	r2, #1
 800d7b2:	701a      	strb	r2, [r3, #0]
      APP_DBG_MSG("-- P2P APPLICATION SERVER : NOTIFICATION ENABLED\n"); 
 800d7b4:	4830      	ldr	r0, [pc, #192]	@ (800d878 <P2PS_STM_App_Notification+0xe8>)
 800d7b6:	f000 ff59 	bl	800e66c <puts>
      APP_DBG_MSG(" \n\r");
 800d7ba:	4830      	ldr	r0, [pc, #192]	@ (800d87c <P2PS_STM_App_Notification+0xec>)
 800d7bc:	f000 fee6 	bl	800e58c <iprintf>
      break;
 800d7c0:	e053      	b.n	800d86a <P2PS_STM_App_Notification+0xda>
      P2P_Server_App_Context.Notification_Status = 0;
 800d7c2:	4b2c      	ldr	r3, [pc, #176]	@ (800d874 <P2PS_STM_App_Notification+0xe4>)
 800d7c4:	2200      	movs	r2, #0
 800d7c6:	701a      	strb	r2, [r3, #0]
      APP_DBG_MSG("-- P2P APPLICATION SERVER : NOTIFICATION DISABLED\n");
 800d7c8:	482d      	ldr	r0, [pc, #180]	@ (800d880 <P2PS_STM_App_Notification+0xf0>)
 800d7ca:	f000 ff4f 	bl	800e66c <puts>
      APP_DBG_MSG(" \n\r");
 800d7ce:	482b      	ldr	r0, [pc, #172]	@ (800d87c <P2PS_STM_App_Notification+0xec>)
 800d7d0:	f000 fedc 	bl	800e58c <iprintf>
      break;
 800d7d4:	e049      	b.n	800d86a <P2PS_STM_App_Notification+0xda>
      if(pNotification->DataTransfered.pPayload[0] == 0x00){ /* ALL Deviceselected - may be necessary as LB Routeur informs all connection */
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	685b      	ldr	r3, [r3, #4]
 800d7da:	781b      	ldrb	r3, [r3, #0]
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d11d      	bne.n	800d81c <P2PS_STM_App_Notification+0x8c>
        if(pNotification->DataTransfered.pPayload[1] == 0x01)
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	685b      	ldr	r3, [r3, #4]
 800d7e4:	3301      	adds	r3, #1
 800d7e6:	781b      	ldrb	r3, [r3, #0]
 800d7e8:	2b01      	cmp	r3, #1
 800d7ea:	d108      	bne.n	800d7fe <P2PS_STM_App_Notification+0x6e>
          APP_DBG_MSG("-- P2P APPLICATION SERVER  : LED1 ON\n"); 
 800d7ec:	4825      	ldr	r0, [pc, #148]	@ (800d884 <P2PS_STM_App_Notification+0xf4>)
 800d7ee:	f000 ff3d 	bl	800e66c <puts>
          APP_DBG_MSG(" \n\r");
 800d7f2:	4822      	ldr	r0, [pc, #136]	@ (800d87c <P2PS_STM_App_Notification+0xec>)
 800d7f4:	f000 feca 	bl	800e58c <iprintf>
          P2P_Server_App_Context.LedControl.Led1=0x01; /* LED1 ON */
 800d7f8:	4b1e      	ldr	r3, [pc, #120]	@ (800d874 <P2PS_STM_App_Notification+0xe4>)
 800d7fa:	2201      	movs	r2, #1
 800d7fc:	709a      	strb	r2, [r3, #2]
        if(pNotification->DataTransfered.pPayload[1] == 0x00)
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	685b      	ldr	r3, [r3, #4]
 800d802:	3301      	adds	r3, #1
 800d804:	781b      	ldrb	r3, [r3, #0]
 800d806:	2b00      	cmp	r3, #0
 800d808:	d108      	bne.n	800d81c <P2PS_STM_App_Notification+0x8c>
          APP_DBG_MSG("-- P2P APPLICATION SERVER  : LED1 OFF\n"); 
 800d80a:	481f      	ldr	r0, [pc, #124]	@ (800d888 <P2PS_STM_App_Notification+0xf8>)
 800d80c:	f000 ff2e 	bl	800e66c <puts>
          APP_DBG_MSG(" \n\r");
 800d810:	481a      	ldr	r0, [pc, #104]	@ (800d87c <P2PS_STM_App_Notification+0xec>)
 800d812:	f000 febb 	bl	800e58c <iprintf>
          P2P_Server_App_Context.LedControl.Led1=0x00; /* LED1 OFF */
 800d816:	4b17      	ldr	r3, [pc, #92]	@ (800d874 <P2PS_STM_App_Notification+0xe4>)
 800d818:	2200      	movs	r2, #0
 800d81a:	709a      	strb	r2, [r3, #2]
      if(pNotification->DataTransfered.pPayload[0] == 0x01){ /* end device 1 selected - may be necessary as LB Routeur informs all connection */
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	685b      	ldr	r3, [r3, #4]
 800d820:	781b      	ldrb	r3, [r3, #0]
 800d822:	2b01      	cmp	r3, #1
 800d824:	d120      	bne.n	800d868 <P2PS_STM_App_Notification+0xd8>
        if(pNotification->DataTransfered.pPayload[1] == 0x01)
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	685b      	ldr	r3, [r3, #4]
 800d82a:	3301      	adds	r3, #1
 800d82c:	781b      	ldrb	r3, [r3, #0]
 800d82e:	2b01      	cmp	r3, #1
 800d830:	d108      	bne.n	800d844 <P2PS_STM_App_Notification+0xb4>
          APP_DBG_MSG("-- P2P APPLICATION SERVER 1 : LED1 ON\n"); 
 800d832:	4816      	ldr	r0, [pc, #88]	@ (800d88c <P2PS_STM_App_Notification+0xfc>)
 800d834:	f000 ff1a 	bl	800e66c <puts>
          APP_DBG_MSG(" \n\r");
 800d838:	4810      	ldr	r0, [pc, #64]	@ (800d87c <P2PS_STM_App_Notification+0xec>)
 800d83a:	f000 fea7 	bl	800e58c <iprintf>
          P2P_Server_App_Context.LedControl.Led1=0x01; /* LED1 ON */
 800d83e:	4b0d      	ldr	r3, [pc, #52]	@ (800d874 <P2PS_STM_App_Notification+0xe4>)
 800d840:	2201      	movs	r2, #1
 800d842:	709a      	strb	r2, [r3, #2]
        if(pNotification->DataTransfered.pPayload[1] == 0x00)
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	685b      	ldr	r3, [r3, #4]
 800d848:	3301      	adds	r3, #1
 800d84a:	781b      	ldrb	r3, [r3, #0]
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d10b      	bne.n	800d868 <P2PS_STM_App_Notification+0xd8>
          APP_DBG_MSG("-- P2P APPLICATION SERVER 1 : LED1 OFF\n"); 
 800d850:	480f      	ldr	r0, [pc, #60]	@ (800d890 <P2PS_STM_App_Notification+0x100>)
 800d852:	f000 ff0b 	bl	800e66c <puts>
          APP_DBG_MSG(" \n\r");
 800d856:	4809      	ldr	r0, [pc, #36]	@ (800d87c <P2PS_STM_App_Notification+0xec>)
 800d858:	f000 fe98 	bl	800e58c <iprintf>
          P2P_Server_App_Context.LedControl.Led1=0x00; /* LED1 OFF */
 800d85c:	4b05      	ldr	r3, [pc, #20]	@ (800d874 <P2PS_STM_App_Notification+0xe4>)
 800d85e:	2200      	movs	r2, #0
 800d860:	709a      	strb	r2, [r3, #2]
      break;
 800d862:	e001      	b.n	800d868 <P2PS_STM_App_Notification+0xd8>
      break;
 800d864:	bf00      	nop
 800d866:	e000      	b.n	800d86a <P2PS_STM_App_Notification+0xda>
      break;
 800d868:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_STM_App_Notification_2 */

/* USER CODE END P2PS_STM_App_Notification_2 */
  return;
 800d86a:	bf00      	nop
}
 800d86c:	3708      	adds	r7, #8
 800d86e:	46bd      	mov	sp, r7
 800d870:	bd80      	pop	{r7, pc}
 800d872:	bf00      	nop
 800d874:	200021cc 	.word	0x200021cc
 800d878:	08010bac 	.word	0x08010bac
 800d87c:	08010be0 	.word	0x08010be0
 800d880:	08010be4 	.word	0x08010be4
 800d884:	08010c18 	.word	0x08010c18
 800d888:	08010c40 	.word	0x08010c40
 800d88c:	08010c68 	.word	0x08010c68
 800d890:	08010c90 	.word	0x08010c90

0800d894 <P2PS_APP_Notification>:

void P2PS_APP_Notification(P2PS_APP_ConnHandle_Not_evt_t *pNotification)
{
 800d894:	b480      	push	{r7}
 800d896:	b083      	sub	sp, #12
 800d898:	af00      	add	r7, sp, #0
 800d89a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_APP_Notification_1 */

/* USER CODE END P2PS_APP_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	781b      	ldrb	r3, [r3, #0]
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d002      	beq.n	800d8aa <P2PS_APP_Notification+0x16>
 800d8a4:	2b01      	cmp	r3, #1
 800d8a6:	d002      	beq.n	800d8ae <P2PS_APP_Notification+0x1a>

    default:
/* USER CODE BEGIN P2PS_APP_Notification_default */

/* USER CODE END P2PS_APP_Notification_default */
      break;
 800d8a8:	e002      	b.n	800d8b0 <P2PS_APP_Notification+0x1c>
    break;
 800d8aa:	bf00      	nop
 800d8ac:	e000      	b.n	800d8b0 <P2PS_APP_Notification+0x1c>
    break;
 800d8ae:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_APP_Notification_2 */

/* USER CODE END P2PS_APP_Notification_2 */
  return;
 800d8b0:	bf00      	nop
}
 800d8b2:	370c      	adds	r7, #12
 800d8b4:	46bd      	mov	sp, r7
 800d8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ba:	4770      	bx	lr

0800d8bc <P2PS_APP_Init>:

void P2PS_APP_Init(void)
{
 800d8bc:	b580      	push	{r7, lr}
 800d8be:	af00      	add	r7, sp, #0
/* USER CODE BEGIN P2PS_APP_Init */


#ifdef BLE_BUTTON_EVENTS
	UTIL_SEQ_RegTask( 1<< CFG_TASK_SWA_BUTTON_PUSHED_ID, UTIL_SEQ_RFU, SWA_Send_Notification ); //
 800d8c0:	4a09      	ldr	r2, [pc, #36]	@ (800d8e8 <P2PS_APP_Init+0x2c>)
 800d8c2:	2100      	movs	r1, #0
 800d8c4:	2008      	movs	r0, #8
 800d8c6:	f000 fc81 	bl	800e1cc <UTIL_SEQ_RegTask>
	UTIL_SEQ_RegTask( 1<< CFG_TASK_SWB_BUTTON_PUSHED_ID, UTIL_SEQ_RFU, SWB_Send_Notification ); //
 800d8ca:	4a08      	ldr	r2, [pc, #32]	@ (800d8ec <P2PS_APP_Init+0x30>)
 800d8cc:	2100      	movs	r1, #0
 800d8ce:	2010      	movs	r0, #16
 800d8d0:	f000 fc7c 	bl	800e1cc <UTIL_SEQ_RegTask>
	UTIL_SEQ_RegTask( 1<< CFG_TASK_IMU_SAMPLE_ID, UTIL_SEQ_RFU, get_and_send_imu_sample ); //
 800d8d4:	4a06      	ldr	r2, [pc, #24]	@ (800d8f0 <P2PS_APP_Init+0x34>)
 800d8d6:	2100      	movs	r1, #0
 800d8d8:	2020      	movs	r0, #32
 800d8da:	f000 fc77 	bl	800e1cc <UTIL_SEQ_RegTask>
//(FS) Need to attach whatever user function here

  /**
   * Initialize LedButton Service
   */
  P2P_Server_App_Context.Notification_Status=0; 
 800d8de:	4b05      	ldr	r3, [pc, #20]	@ (800d8f4 <P2PS_APP_Init+0x38>)
 800d8e0:	2200      	movs	r2, #0
 800d8e2:	701a      	strb	r2, [r3, #0]


  //P2PS_APP_LED_BUTTON_context_Init();
/* USER CODE END P2PS_APP_Init */
  return;
 800d8e4:	bf00      	nop
}
 800d8e6:	bd80      	pop	{r7, pc}
 800d8e8:	0800d919 	.word	0x0800d919
 800d8ec:	0800d945 	.word	0x0800d945
 800d8f0:	0800d971 	.word	0x0800d971
 800d8f4:	200021cc 	.word	0x200021cc

0800d8f8 <APP_SWA_Button_Action>:

}
#endif

void APP_SWA_Button_Action(void)
{
 800d8f8:	b580      	push	{r7, lr}
 800d8fa:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetTask( 1<<CFG_TASK_SWA_BUTTON_PUSHED_ID, CFG_SCH_PRIO_0);
 800d8fc:	2100      	movs	r1, #0
 800d8fe:	2008      	movs	r0, #8
 800d900:	f000 fc86 	bl	800e210 <UTIL_SEQ_SetTask>
  return;
 800d904:	bf00      	nop
}
 800d906:	bd80      	pop	{r7, pc}

0800d908 <APP_SWB_Button_Action>:

void APP_SWB_Button_Action(void)
{
 800d908:	b580      	push	{r7, lr}
 800d90a:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetTask( 1<<CFG_TASK_SWB_BUTTON_PUSHED_ID, CFG_SCH_PRIO_0);
 800d90c:	2100      	movs	r1, #0
 800d90e:	2010      	movs	r0, #16
 800d910:	f000 fc7e 	bl	800e210 <UTIL_SEQ_SetTask>
  return;
 800d914:	bf00      	nop
}
 800d916:	bd80      	pop	{r7, pc}

0800d918 <SWA_Send_Notification>:
	// insert local button management here
}


void SWA_Send_Notification(void)
{
 800d918:	b580      	push	{r7, lr}
 800d91a:	af00      	add	r7, sp, #0
	current_event_payload.event_type = EVENT_TYPE_BUTTON_PRESSED;
 800d91c:	4b07      	ldr	r3, [pc, #28]	@ (800d93c <SWA_Send_Notification+0x24>)
 800d91e:	2201      	movs	r2, #1
 800d920:	701a      	strb	r2, [r3, #0]
	current_event_payload.source_id = BUTTON_ID_A;
 800d922:	4b06      	ldr	r3, [pc, #24]	@ (800d93c <SWA_Send_Notification+0x24>)
 800d924:	2201      	movs	r2, #1
 800d926:	705a      	strb	r2, [r3, #1]
	current_event_payload.packet_id = packet_counter;
 800d928:	4b05      	ldr	r3, [pc, #20]	@ (800d940 <SWA_Send_Notification+0x28>)
 800d92a:	781a      	ldrb	r2, [r3, #0]
 800d92c:	4b03      	ldr	r3, [pc, #12]	@ (800d93c <SWA_Send_Notification+0x24>)
 800d92e:	709a      	strb	r2, [r3, #2]

	APP_BLE_Send_Event_Notification(&current_event_payload);
 800d930:	4802      	ldr	r0, [pc, #8]	@ (800d93c <SWA_Send_Notification+0x24>)
 800d932:	f7ff fb21 	bl	800cf78 <APP_BLE_Send_Event_Notification>
}
 800d936:	bf00      	nop
 800d938:	bd80      	pop	{r7, pc}
 800d93a:	bf00      	nop
 800d93c:	200021c8 	.word	0x200021c8
 800d940:	200021c0 	.word	0x200021c0

0800d944 <SWB_Send_Notification>:


void SWB_Send_Notification(void)
{
 800d944:	b580      	push	{r7, lr}
 800d946:	af00      	add	r7, sp, #0
	current_event_payload.event_type = EVENT_TYPE_BUTTON_PRESSED;
 800d948:	4b07      	ldr	r3, [pc, #28]	@ (800d968 <SWB_Send_Notification+0x24>)
 800d94a:	2201      	movs	r2, #1
 800d94c:	701a      	strb	r2, [r3, #0]
	current_event_payload.source_id = BUTTON_ID_B;
 800d94e:	4b06      	ldr	r3, [pc, #24]	@ (800d968 <SWB_Send_Notification+0x24>)
 800d950:	2202      	movs	r2, #2
 800d952:	705a      	strb	r2, [r3, #1]
	current_event_payload.packet_id = packet_counter;
 800d954:	4b05      	ldr	r3, [pc, #20]	@ (800d96c <SWB_Send_Notification+0x28>)
 800d956:	781a      	ldrb	r2, [r3, #0]
 800d958:	4b03      	ldr	r3, [pc, #12]	@ (800d968 <SWB_Send_Notification+0x24>)
 800d95a:	709a      	strb	r2, [r3, #2]

	APP_BLE_Send_Event_Notification(&current_event_payload);
 800d95c:	4802      	ldr	r0, [pc, #8]	@ (800d968 <SWB_Send_Notification+0x24>)
 800d95e:	f7ff fb0b 	bl	800cf78 <APP_BLE_Send_Event_Notification>
}
 800d962:	bf00      	nop
 800d964:	bd80      	pop	{r7, pc}
 800d966:	bf00      	nop
 800d968:	200021c8 	.word	0x200021c8
 800d96c:	200021c0 	.word	0x200021c0

0800d970 <get_and_send_imu_sample>:



void get_and_send_imu_sample(void){
 800d970:	b580      	push	{r7, lr}
 800d972:	b082      	sub	sp, #8
 800d974:	af00      	add	r7, sp, #0

	if(P2P_Server_App_Context.Notification_Status==1){
 800d976:	4b0b      	ldr	r3, [pc, #44]	@ (800d9a4 <get_and_send_imu_sample+0x34>)
 800d978:	781b      	ldrb	r3, [r3, #0]
 800d97a:	2b01      	cmp	r3, #1
 800d97c:	d10d      	bne.n	800d99a <get_and_send_imu_sample+0x2a>
		HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_SET);
 800d97e:	2201      	movs	r2, #1
 800d980:	2101      	movs	r1, #1
 800d982:	4809      	ldr	r0, [pc, #36]	@ (800d9a8 <get_and_send_imu_sample+0x38>)
 800d984:	f7f6 fa5a 	bl	8003e3c <HAL_GPIO_WritePin>
		int16_t* imu_sample = ism330_ReadIMU();
 800d988:	f7f4 fcba 	bl	8002300 <ism330_ReadIMU>
 800d98c:	6078      	str	r0, [r7, #4]
		APP_BLE_Send_IMU_Notification((uint8_t*)imu_sample, (uint8_t*)&imu_sample[3]);
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	3306      	adds	r3, #6
 800d992:	4619      	mov	r1, r3
 800d994:	6878      	ldr	r0, [r7, #4]
 800d996:	f7ff fb0b 	bl	800cfb0 <APP_BLE_Send_IMU_Notification>
	}
}
 800d99a:	bf00      	nop
 800d99c:	3708      	adds	r7, #8
 800d99e:	46bd      	mov	sp, r7
 800d9a0:	bd80      	pop	{r7, pc}
 800d9a2:	bf00      	nop
 800d9a4:	200021cc 	.word	0x200021cc
 800d9a8:	48000400 	.word	0x48000400

0800d9ac <APP_BLE_Manage_ADS1299_event>:




void APP_BLE_Manage_ADS1299_event(void)
{
 800d9ac:	b580      	push	{r7, lr}
 800d9ae:	af00      	add	r7, sp, #0
	if(P2P_Server_App_Context.Notification_Status){
 800d9b0:	4b34      	ldr	r3, [pc, #208]	@ (800da84 <APP_BLE_Manage_ADS1299_event+0xd8>)
 800d9b2:	781b      	ldrb	r3, [r3, #0]
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d062      	beq.n	800da7e <APP_BLE_Manage_ADS1299_event+0xd2>

		if(sample_index==0){
 800d9b8:	4b33      	ldr	r3, [pc, #204]	@ (800da88 <APP_BLE_Manage_ADS1299_event+0xdc>)
 800d9ba:	781b      	ldrb	r3, [r3, #0]
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d10d      	bne.n	800d9dc <APP_BLE_Manage_ADS1299_event+0x30>
			buffered_packets_array[buffer_index][0] = packet_counter;
 800d9c0:	4b32      	ldr	r3, [pc, #200]	@ (800da8c <APP_BLE_Manage_ADS1299_event+0xe0>)
 800d9c2:	781b      	ldrb	r3, [r3, #0]
 800d9c4:	461a      	mov	r2, r3
 800d9c6:	4b32      	ldr	r3, [pc, #200]	@ (800da90 <APP_BLE_Manage_ADS1299_event+0xe4>)
 800d9c8:	7818      	ldrb	r0, [r3, #0]
 800d9ca:	4932      	ldr	r1, [pc, #200]	@ (800da94 <APP_BLE_Manage_ADS1299_event+0xe8>)
 800d9cc:	4613      	mov	r3, r2
 800d9ce:	011b      	lsls	r3, r3, #4
 800d9d0:	1a9b      	subs	r3, r3, r2
 800d9d2:	011b      	lsls	r3, r3, #4
 800d9d4:	4413      	add	r3, r2
 800d9d6:	440b      	add	r3, r1
 800d9d8:	4602      	mov	r2, r0
 800d9da:	701a      	strb	r2, [r3, #0]
		}

		ADS1299_ReadSamples(statusBuffer, &buffered_packets_array[buffer_index][sample_index*SAMPLE_SIZE+1]);
 800d9dc:	4b2b      	ldr	r3, [pc, #172]	@ (800da8c <APP_BLE_Manage_ADS1299_event+0xe0>)
 800d9de:	781b      	ldrb	r3, [r3, #0]
 800d9e0:	461a      	mov	r2, r3
 800d9e2:	4b29      	ldr	r3, [pc, #164]	@ (800da88 <APP_BLE_Manage_ADS1299_event+0xdc>)
 800d9e4:	781b      	ldrb	r3, [r3, #0]
 800d9e6:	4619      	mov	r1, r3
 800d9e8:	460b      	mov	r3, r1
 800d9ea:	005b      	lsls	r3, r3, #1
 800d9ec:	440b      	add	r3, r1
 800d9ee:	00db      	lsls	r3, r3, #3
 800d9f0:	1c59      	adds	r1, r3, #1
 800d9f2:	4613      	mov	r3, r2
 800d9f4:	011b      	lsls	r3, r3, #4
 800d9f6:	1a9b      	subs	r3, r3, r2
 800d9f8:	011b      	lsls	r3, r3, #4
 800d9fa:	4413      	add	r3, r2
 800d9fc:	440b      	add	r3, r1
 800d9fe:	4a25      	ldr	r2, [pc, #148]	@ (800da94 <APP_BLE_Manage_ADS1299_event+0xe8>)
 800da00:	4413      	add	r3, r2
 800da02:	4619      	mov	r1, r3
 800da04:	4824      	ldr	r0, [pc, #144]	@ (800da98 <APP_BLE_Manage_ADS1299_event+0xec>)
 800da06:	f7f3 f9bd 	bl	8000d84 <ADS1299_ReadSamples>
		sample_index++;
 800da0a:	4b1f      	ldr	r3, [pc, #124]	@ (800da88 <APP_BLE_Manage_ADS1299_event+0xdc>)
 800da0c:	781b      	ldrb	r3, [r3, #0]
 800da0e:	3301      	adds	r3, #1
 800da10:	b2da      	uxtb	r2, r3
 800da12:	4b1d      	ldr	r3, [pc, #116]	@ (800da88 <APP_BLE_Manage_ADS1299_event+0xdc>)
 800da14:	701a      	strb	r2, [r3, #0]

		if(sample_index >= NB_SAMPLES_PER_PACKET){
 800da16:	4b1c      	ldr	r3, [pc, #112]	@ (800da88 <APP_BLE_Manage_ADS1299_event+0xdc>)
 800da18:	781b      	ldrb	r3, [r3, #0]
 800da1a:	2b09      	cmp	r3, #9
 800da1c:	d92f      	bls.n	800da7e <APP_BLE_Manage_ADS1299_event+0xd2>
			APP_BLE_Send_EEGData_Notification(buffered_packets_array[buffer_index], PACKET_SIZE);
 800da1e:	4b1b      	ldr	r3, [pc, #108]	@ (800da8c <APP_BLE_Manage_ADS1299_event+0xe0>)
 800da20:	781b      	ldrb	r3, [r3, #0]
 800da22:	461a      	mov	r2, r3
 800da24:	4613      	mov	r3, r2
 800da26:	011b      	lsls	r3, r3, #4
 800da28:	1a9b      	subs	r3, r3, r2
 800da2a:	011b      	lsls	r3, r3, #4
 800da2c:	4413      	add	r3, r2
 800da2e:	4a19      	ldr	r2, [pc, #100]	@ (800da94 <APP_BLE_Manage_ADS1299_event+0xe8>)
 800da30:	4413      	add	r3, r2
 800da32:	21f1      	movs	r1, #241	@ 0xf1
 800da34:	4618      	mov	r0, r3
 800da36:	f7ff fa7d 	bl	800cf34 <APP_BLE_Send_EEGData_Notification>
			buffer_index = (buffer_index + 1) % PACKETBUFFER_DEPTH;
 800da3a:	4b14      	ldr	r3, [pc, #80]	@ (800da8c <APP_BLE_Manage_ADS1299_event+0xe0>)
 800da3c:	781b      	ldrb	r3, [r3, #0]
 800da3e:	1c5a      	adds	r2, r3, #1
 800da40:	4b16      	ldr	r3, [pc, #88]	@ (800da9c <APP_BLE_Manage_ADS1299_event+0xf0>)
 800da42:	fb83 1302 	smull	r1, r3, r3, r2
 800da46:	4413      	add	r3, r2
 800da48:	1119      	asrs	r1, r3, #4
 800da4a:	17d3      	asrs	r3, r2, #31
 800da4c:	1ac9      	subs	r1, r1, r3
 800da4e:	460b      	mov	r3, r1
 800da50:	011b      	lsls	r3, r3, #4
 800da52:	1a5b      	subs	r3, r3, r1
 800da54:	005b      	lsls	r3, r3, #1
 800da56:	1ad1      	subs	r1, r2, r3
 800da58:	b2ca      	uxtb	r2, r1
 800da5a:	4b0c      	ldr	r3, [pc, #48]	@ (800da8c <APP_BLE_Manage_ADS1299_event+0xe0>)
 800da5c:	701a      	strb	r2, [r3, #0]
			packet_counter = (packet_counter + 1) % 128;
 800da5e:	4b0c      	ldr	r3, [pc, #48]	@ (800da90 <APP_BLE_Manage_ADS1299_event+0xe4>)
 800da60:	781b      	ldrb	r3, [r3, #0]
 800da62:	3301      	adds	r3, #1
 800da64:	425a      	negs	r2, r3
 800da66:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800da6a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800da6e:	bf58      	it	pl
 800da70:	4253      	negpl	r3, r2
 800da72:	b2da      	uxtb	r2, r3
 800da74:	4b06      	ldr	r3, [pc, #24]	@ (800da90 <APP_BLE_Manage_ADS1299_event+0xe4>)
 800da76:	701a      	strb	r2, [r3, #0]
			sample_index = 0;
 800da78:	4b03      	ldr	r3, [pc, #12]	@ (800da88 <APP_BLE_Manage_ADS1299_event+0xdc>)
 800da7a:	2200      	movs	r2, #0
 800da7c:	701a      	strb	r2, [r3, #0]
		}
	}
}
 800da7e:	bf00      	nop
 800da80:	bd80      	pop	{r7, pc}
 800da82:	bf00      	nop
 800da84:	200021cc 	.word	0x200021cc
 800da88:	200021bf 	.word	0x200021bf
 800da8c:	200021be 	.word	0x200021be
 800da90:	200021c0 	.word	0x200021c0
 800da94:	20000580 	.word	0x20000580
 800da98:	200021c4 	.word	0x200021c4
 800da9c:	88888889 	.word	0x88888889

0800daa0 <is_connected>:



uint8_t is_connected(void){
 800daa0:	b480      	push	{r7}
 800daa2:	af00      	add	r7, sp, #0
	return P2P_Server_App_Context.Notification_Status == 1;
 800daa4:	4b05      	ldr	r3, [pc, #20]	@ (800dabc <is_connected+0x1c>)
 800daa6:	781b      	ldrb	r3, [r3, #0]
 800daa8:	2b01      	cmp	r3, #1
 800daaa:	bf0c      	ite	eq
 800daac:	2301      	moveq	r3, #1
 800daae:	2300      	movne	r3, #0
 800dab0:	b2db      	uxtb	r3, r3
}
 800dab2:	4618      	mov	r0, r3
 800dab4:	46bd      	mov	sp, r7
 800dab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daba:	4770      	bx	lr
 800dabc:	200021cc 	.word	0x200021cc

0800dac0 <LL_PWR_EnableBootC2>:
{
 800dac0:	b480      	push	{r7}
 800dac2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800dac4:	4b05      	ldr	r3, [pc, #20]	@ (800dadc <LL_PWR_EnableBootC2+0x1c>)
 800dac6:	68db      	ldr	r3, [r3, #12]
 800dac8:	4a04      	ldr	r2, [pc, #16]	@ (800dadc <LL_PWR_EnableBootC2+0x1c>)
 800daca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800dace:	60d3      	str	r3, [r2, #12]
}
 800dad0:	bf00      	nop
 800dad2:	46bd      	mov	sp, r7
 800dad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dad8:	4770      	bx	lr
 800dada:	bf00      	nop
 800dadc:	58000400 	.word	0x58000400

0800dae0 <LL_C2_EXTI_EnableEvent_32_63>:
{
 800dae0:	b480      	push	{r7}
 800dae2:	b083      	sub	sp, #12
 800dae4:	af00      	add	r7, sp, #0
 800dae6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 800dae8:	4b06      	ldr	r3, [pc, #24]	@ (800db04 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800daea:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 800daee:	4905      	ldr	r1, [pc, #20]	@ (800db04 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	4313      	orrs	r3, r2
 800daf4:	f8c1 30d4 	str.w	r3, [r1, #212]	@ 0xd4
}
 800daf8:	bf00      	nop
 800dafa:	370c      	adds	r7, #12
 800dafc:	46bd      	mov	sp, r7
 800dafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db02:	4770      	bx	lr
 800db04:	58000800 	.word	0x58000800

0800db08 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 800db08:	b480      	push	{r7}
 800db0a:	b083      	sub	sp, #12
 800db0c:	af00      	add	r7, sp, #0
 800db0e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800db10:	4b05      	ldr	r3, [pc, #20]	@ (800db28 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800db12:	6a1a      	ldr	r2, [r3, #32]
 800db14:	4904      	ldr	r1, [pc, #16]	@ (800db28 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	4313      	orrs	r3, r2
 800db1a:	620b      	str	r3, [r1, #32]
}
 800db1c:	bf00      	nop
 800db1e:	370c      	adds	r7, #12
 800db20:	46bd      	mov	sp, r7
 800db22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db26:	4770      	bx	lr
 800db28:	58000800 	.word	0x58000800

0800db2c <LL_AHB3_GRP1_EnableClock>:
{
 800db2c:	b480      	push	{r7}
 800db2e:	b085      	sub	sp, #20
 800db30:	af00      	add	r7, sp, #0
 800db32:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800db34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800db38:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800db3a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	4313      	orrs	r3, r2
 800db42:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800db44:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800db48:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	4013      	ands	r3, r2
 800db4e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800db50:	68fb      	ldr	r3, [r7, #12]
}
 800db52:	bf00      	nop
 800db54:	3714      	adds	r7, #20
 800db56:	46bd      	mov	sp, r7
 800db58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db5c:	4770      	bx	lr

0800db5e <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800db5e:	b480      	push	{r7}
 800db60:	b085      	sub	sp, #20
 800db62:	af00      	add	r7, sp, #0
 800db64:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 800db66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800db6a:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 800db6e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	4313      	orrs	r3, r2
 800db76:	f8c1 3150 	str.w	r3, [r1, #336]	@ 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 800db7a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800db7e:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	4013      	ands	r3, r2
 800db86:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800db88:	68fb      	ldr	r3, [r7, #12]
}
 800db8a:	bf00      	nop
 800db8c:	3714      	adds	r7, #20
 800db8e:	46bd      	mov	sp, r7
 800db90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db94:	4770      	bx	lr

0800db96 <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 800db96:	b480      	push	{r7}
 800db98:	b083      	sub	sp, #12
 800db9a:	af00      	add	r7, sp, #0
 800db9c:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	601a      	str	r2, [r3, #0]
}
 800dbaa:	bf00      	nop
 800dbac:	370c      	adds	r7, #12
 800dbae:	46bd      	mov	sp, r7
 800dbb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbb4:	4770      	bx	lr

0800dbb6 <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 800dbb6:	b480      	push	{r7}
 800dbb8:	b083      	sub	sp, #12
 800dbba:	af00      	add	r7, sp, #0
 800dbbc:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	f043 0201 	orr.w	r2, r3, #1
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	601a      	str	r2, [r3, #0]
}
 800dbca:	bf00      	nop
 800dbcc:	370c      	adds	r7, #12
 800dbce:	46bd      	mov	sp, r7
 800dbd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbd4:	4770      	bx	lr

0800dbd6 <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800dbd6:	b480      	push	{r7}
 800dbd8:	b083      	sub	sp, #12
 800dbda:	af00      	add	r7, sp, #0
 800dbdc:	6078      	str	r0, [r7, #4]
 800dbde:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	685a      	ldr	r2, [r3, #4]
 800dbe4:	683b      	ldr	r3, [r7, #0]
 800dbe6:	041b      	lsls	r3, r3, #16
 800dbe8:	43db      	mvns	r3, r3
 800dbea:	401a      	ands	r2, r3
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	605a      	str	r2, [r3, #4]
}
 800dbf0:	bf00      	nop
 800dbf2:	370c      	adds	r7, #12
 800dbf4:	46bd      	mov	sp, r7
 800dbf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbfa:	4770      	bx	lr

0800dbfc <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800dbfc:	b480      	push	{r7}
 800dbfe:	b083      	sub	sp, #12
 800dc00:	af00      	add	r7, sp, #0
 800dc02:	6078      	str	r0, [r7, #4]
 800dc04:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	685a      	ldr	r2, [r3, #4]
 800dc0a:	683b      	ldr	r3, [r7, #0]
 800dc0c:	041b      	lsls	r3, r3, #16
 800dc0e:	431a      	orrs	r2, r3
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	605a      	str	r2, [r3, #4]
}
 800dc14:	bf00      	nop
 800dc16:	370c      	adds	r7, #12
 800dc18:	46bd      	mov	sp, r7
 800dc1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc1e:	4770      	bx	lr

0800dc20 <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800dc20:	b480      	push	{r7}
 800dc22:	b083      	sub	sp, #12
 800dc24:	af00      	add	r7, sp, #0
 800dc26:	6078      	str	r0, [r7, #4]
 800dc28:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	685a      	ldr	r2, [r3, #4]
 800dc2e:	683b      	ldr	r3, [r7, #0]
 800dc30:	43db      	mvns	r3, r3
 800dc32:	401a      	ands	r2, r3
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	605a      	str	r2, [r3, #4]
}
 800dc38:	bf00      	nop
 800dc3a:	370c      	adds	r7, #12
 800dc3c:	46bd      	mov	sp, r7
 800dc3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc42:	4770      	bx	lr

0800dc44 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800dc44:	b480      	push	{r7}
 800dc46:	b083      	sub	sp, #12
 800dc48:	af00      	add	r7, sp, #0
 800dc4a:	6078      	str	r0, [r7, #4]
 800dc4c:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	683a      	ldr	r2, [r7, #0]
 800dc52:	609a      	str	r2, [r3, #8]
}
 800dc54:	bf00      	nop
 800dc56:	370c      	adds	r7, #12
 800dc58:	46bd      	mov	sp, r7
 800dc5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc5e:	4770      	bx	lr

0800dc60 <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800dc60:	b480      	push	{r7}
 800dc62:	b083      	sub	sp, #12
 800dc64:	af00      	add	r7, sp, #0
 800dc66:	6078      	str	r0, [r7, #4]
 800dc68:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800dc6a:	683b      	ldr	r3, [r7, #0]
 800dc6c:	041a      	lsls	r2, r3, #16
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	609a      	str	r2, [r3, #8]
}
 800dc72:	bf00      	nop
 800dc74:	370c      	adds	r7, #12
 800dc76:	46bd      	mov	sp, r7
 800dc78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc7c:	4770      	bx	lr

0800dc7e <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800dc7e:	b480      	push	{r7}
 800dc80:	b083      	sub	sp, #12
 800dc82:	af00      	add	r7, sp, #0
 800dc84:	6078      	str	r0, [r7, #4]
 800dc86:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	68da      	ldr	r2, [r3, #12]
 800dc8c:	683b      	ldr	r3, [r7, #0]
 800dc8e:	4013      	ands	r3, r2
 800dc90:	683a      	ldr	r2, [r7, #0]
 800dc92:	429a      	cmp	r2, r3
 800dc94:	d101      	bne.n	800dc9a <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800dc96:	2301      	movs	r3, #1
 800dc98:	e000      	b.n	800dc9c <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800dc9a:	2300      	movs	r3, #0
}
 800dc9c:	4618      	mov	r0, r3
 800dc9e:	370c      	adds	r7, #12
 800dca0:	46bd      	mov	sp, r7
 800dca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dca6:	4770      	bx	lr

0800dca8 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800dca8:	b480      	push	{r7}
 800dcaa:	b083      	sub	sp, #12
 800dcac:	af00      	add	r7, sp, #0
 800dcae:	6078      	str	r0, [r7, #4]
 800dcb0:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	69da      	ldr	r2, [r3, #28]
 800dcb6:	683b      	ldr	r3, [r7, #0]
 800dcb8:	4013      	ands	r3, r2
 800dcba:	683a      	ldr	r2, [r7, #0]
 800dcbc:	429a      	cmp	r2, r3
 800dcbe:	d101      	bne.n	800dcc4 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 800dcc0:	2301      	movs	r3, #1
 800dcc2:	e000      	b.n	800dcc6 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 800dcc4:	2300      	movs	r3, #0
}
 800dcc6:	4618      	mov	r0, r3
 800dcc8:	370c      	adds	r7, #12
 800dcca:	46bd      	mov	sp, r7
 800dccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcd0:	4770      	bx	lr
	...

0800dcd4 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 800dcd4:	b580      	push	{r7, lr}
 800dcd6:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 800dcd8:	2102      	movs	r1, #2
 800dcda:	4818      	ldr	r0, [pc, #96]	@ (800dd3c <HW_IPCC_Rx_Handler+0x68>)
 800dcdc:	f7ff ffe4 	bl	800dca8 <LL_C2_IPCC_IsActiveFlag_CHx>
 800dce0:	4603      	mov	r3, r0
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d008      	beq.n	800dcf8 <HW_IPCC_Rx_Handler+0x24>
 800dce6:	4b15      	ldr	r3, [pc, #84]	@ (800dd3c <HW_IPCC_Rx_Handler+0x68>)
 800dce8:	685b      	ldr	r3, [r3, #4]
 800dcea:	f003 0302 	and.w	r3, r3, #2
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d102      	bne.n	800dcf8 <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 800dcf2:	f000 f8d5 	bl	800dea0 <HW_IPCC_SYS_EvtHandler>
 800dcf6:	e01e      	b.n	800dd36 <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800dcf8:	2101      	movs	r1, #1
 800dcfa:	4810      	ldr	r0, [pc, #64]	@ (800dd3c <HW_IPCC_Rx_Handler+0x68>)
 800dcfc:	f7ff ffd4 	bl	800dca8 <LL_C2_IPCC_IsActiveFlag_CHx>
 800dd00:	4603      	mov	r3, r0
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d008      	beq.n	800dd18 <HW_IPCC_Rx_Handler+0x44>
 800dd06:	4b0d      	ldr	r3, [pc, #52]	@ (800dd3c <HW_IPCC_Rx_Handler+0x68>)
 800dd08:	685b      	ldr	r3, [r3, #4]
 800dd0a:	f003 0301 	and.w	r3, r3, #1
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d102      	bne.n	800dd18 <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 800dd12:	f000 f889 	bl	800de28 <HW_IPCC_BLE_EvtHandler>
 800dd16:	e00e      	b.n	800dd36 <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 800dd18:	2108      	movs	r1, #8
 800dd1a:	4808      	ldr	r0, [pc, #32]	@ (800dd3c <HW_IPCC_Rx_Handler+0x68>)
 800dd1c:	f7ff ffc4 	bl	800dca8 <LL_C2_IPCC_IsActiveFlag_CHx>
 800dd20:	4603      	mov	r3, r0
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d008      	beq.n	800dd38 <HW_IPCC_Rx_Handler+0x64>
 800dd26:	4b05      	ldr	r3, [pc, #20]	@ (800dd3c <HW_IPCC_Rx_Handler+0x68>)
 800dd28:	685b      	ldr	r3, [r3, #4]
 800dd2a:	f003 0308 	and.w	r3, r3, #8
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d102      	bne.n	800dd38 <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 800dd32:	f000 f901 	bl	800df38 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 800dd36:	bf00      	nop
 800dd38:	bf00      	nop
}
 800dd3a:	bd80      	pop	{r7, pc}
 800dd3c:	58000c00 	.word	0x58000c00

0800dd40 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 800dd40:	b580      	push	{r7, lr}
 800dd42:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800dd44:	2102      	movs	r1, #2
 800dd46:	4818      	ldr	r0, [pc, #96]	@ (800dda8 <HW_IPCC_Tx_Handler+0x68>)
 800dd48:	f7ff ff99 	bl	800dc7e <LL_C1_IPCC_IsActiveFlag_CHx>
 800dd4c:	4603      	mov	r3, r0
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d108      	bne.n	800dd64 <HW_IPCC_Tx_Handler+0x24>
 800dd52:	4b15      	ldr	r3, [pc, #84]	@ (800dda8 <HW_IPCC_Tx_Handler+0x68>)
 800dd54:	685b      	ldr	r3, [r3, #4]
 800dd56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d102      	bne.n	800dd64 <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800dd5e:	f000 f893 	bl	800de88 <HW_IPCC_SYS_CmdEvtHandler>
 800dd62:	e01e      	b.n	800dda2 <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800dd64:	2108      	movs	r1, #8
 800dd66:	4810      	ldr	r0, [pc, #64]	@ (800dda8 <HW_IPCC_Tx_Handler+0x68>)
 800dd68:	f7ff ff89 	bl	800dc7e <LL_C1_IPCC_IsActiveFlag_CHx>
 800dd6c:	4603      	mov	r3, r0
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d108      	bne.n	800dd84 <HW_IPCC_Tx_Handler+0x44>
 800dd72:	4b0d      	ldr	r3, [pc, #52]	@ (800dda8 <HW_IPCC_Tx_Handler+0x68>)
 800dd74:	685b      	ldr	r3, [r3, #4]
 800dd76:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d102      	bne.n	800dd84 <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 800dd7e:	f000 f8bd 	bl	800defc <HW_IPCC_MM_FreeBufHandler>
 800dd82:	e00e      	b.n	800dda2 <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800dd84:	2120      	movs	r1, #32
 800dd86:	4808      	ldr	r0, [pc, #32]	@ (800dda8 <HW_IPCC_Tx_Handler+0x68>)
 800dd88:	f7ff ff79 	bl	800dc7e <LL_C1_IPCC_IsActiveFlag_CHx>
 800dd8c:	4603      	mov	r3, r0
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d108      	bne.n	800dda4 <HW_IPCC_Tx_Handler+0x64>
 800dd92:	4b05      	ldr	r3, [pc, #20]	@ (800dda8 <HW_IPCC_Tx_Handler+0x68>)
 800dd94:	685b      	ldr	r3, [r3, #4]
 800dd96:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d102      	bne.n	800dda4 <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 800dd9e:	f000 f84f 	bl	800de40 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800dda2:	bf00      	nop
 800dda4:	bf00      	nop
}
 800dda6:	bd80      	pop	{r7, pc}
 800dda8:	58000c00 	.word	0x58000c00

0800ddac <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 800ddac:	b580      	push	{r7, lr}
 800ddae:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 800ddb0:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800ddb4:	f7ff fed3 	bl	800db5e <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 800ddb8:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800ddbc:	f7ff fea4 	bl	800db08 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 800ddc0:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800ddc4:	f7ff fe8c 	bl	800dae0 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 800ddc8:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800ddca:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 800ddcc:	f7ff fe78 	bl	800dac0 <LL_PWR_EnableBootC2>

  return;
 800ddd0:	bf00      	nop
}
 800ddd2:	bd80      	pop	{r7, pc}

0800ddd4 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 800ddd4:	b580      	push	{r7, lr}
 800ddd6:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 800ddd8:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800dddc:	f7ff fea6 	bl	800db2c <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 800dde0:	4806      	ldr	r0, [pc, #24]	@ (800ddfc <HW_IPCC_Init+0x28>)
 800dde2:	f7ff fee8 	bl	800dbb6 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800dde6:	4805      	ldr	r0, [pc, #20]	@ (800ddfc <HW_IPCC_Init+0x28>)
 800dde8:	f7ff fed5 	bl	800db96 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800ddec:	202c      	movs	r0, #44	@ 0x2c
 800ddee:	f7f5 fb3e 	bl	800346e <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800ddf2:	202d      	movs	r0, #45	@ 0x2d
 800ddf4:	f7f5 fb3b 	bl	800346e <HAL_NVIC_EnableIRQ>

  return;
 800ddf8:	bf00      	nop
}
 800ddfa:	bd80      	pop	{r7, pc}
 800ddfc:	58000c00 	.word	0x58000c00

0800de00 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 800de00:	b580      	push	{r7, lr}
 800de02:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800de04:	2101      	movs	r1, #1
 800de06:	4802      	ldr	r0, [pc, #8]	@ (800de10 <HW_IPCC_BLE_Init+0x10>)
 800de08:	f7ff ff0a 	bl	800dc20 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800de0c:	bf00      	nop
}
 800de0e:	bd80      	pop	{r7, pc}
 800de10:	58000c00 	.word	0x58000c00

0800de14 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 800de14:	b580      	push	{r7, lr}
 800de16:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 800de18:	2101      	movs	r1, #1
 800de1a:	4802      	ldr	r0, [pc, #8]	@ (800de24 <HW_IPCC_BLE_SendCmd+0x10>)
 800de1c:	f7ff ff20 	bl	800dc60 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800de20:	bf00      	nop
}
 800de22:	bd80      	pop	{r7, pc}
 800de24:	58000c00 	.word	0x58000c00

0800de28 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 800de28:	b580      	push	{r7, lr}
 800de2a:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 800de2c:	f7fd fb2e 	bl	800b48c <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800de30:	2101      	movs	r1, #1
 800de32:	4802      	ldr	r0, [pc, #8]	@ (800de3c <HW_IPCC_BLE_EvtHandler+0x14>)
 800de34:	f7ff ff06 	bl	800dc44 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800de38:	bf00      	nop
}
 800de3a:	bd80      	pop	{r7, pc}
 800de3c:	58000c00 	.word	0x58000c00

0800de40 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 800de40:	b580      	push	{r7, lr}
 800de42:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 800de44:	2120      	movs	r1, #32
 800de46:	4803      	ldr	r0, [pc, #12]	@ (800de54 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 800de48:	f7ff fed8 	bl	800dbfc <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 800de4c:	f7fd fb4e 	bl	800b4ec <HW_IPCC_BLE_AclDataAckNot>

  return;
 800de50:	bf00      	nop
}
 800de52:	bd80      	pop	{r7, pc}
 800de54:	58000c00 	.word	0x58000c00

0800de58 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 800de58:	b580      	push	{r7, lr}
 800de5a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800de5c:	2102      	movs	r1, #2
 800de5e:	4802      	ldr	r0, [pc, #8]	@ (800de68 <HW_IPCC_SYS_Init+0x10>)
 800de60:	f7ff fede 	bl	800dc20 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800de64:	bf00      	nop
}
 800de66:	bd80      	pop	{r7, pc}
 800de68:	58000c00 	.word	0x58000c00

0800de6c <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 800de6c:	b580      	push	{r7, lr}
 800de6e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800de70:	2102      	movs	r1, #2
 800de72:	4804      	ldr	r0, [pc, #16]	@ (800de84 <HW_IPCC_SYS_SendCmd+0x18>)
 800de74:	f7ff fef4 	bl	800dc60 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800de78:	2102      	movs	r1, #2
 800de7a:	4802      	ldr	r0, [pc, #8]	@ (800de84 <HW_IPCC_SYS_SendCmd+0x18>)
 800de7c:	f7ff feab 	bl	800dbd6 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 800de80:	bf00      	nop
}
 800de82:	bd80      	pop	{r7, pc}
 800de84:	58000c00 	.word	0x58000c00

0800de88 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 800de88:	b580      	push	{r7, lr}
 800de8a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800de8c:	2102      	movs	r1, #2
 800de8e:	4803      	ldr	r0, [pc, #12]	@ (800de9c <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 800de90:	f7ff feb4 	bl	800dbfc <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 800de94:	f7fd fb7a 	bl	800b58c <HW_IPCC_SYS_CmdEvtNot>

  return;
 800de98:	bf00      	nop
}
 800de9a:	bd80      	pop	{r7, pc}
 800de9c:	58000c00 	.word	0x58000c00

0800dea0 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 800dea0:	b580      	push	{r7, lr}
 800dea2:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 800dea4:	f7fd fb88 	bl	800b5b8 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800dea8:	2102      	movs	r1, #2
 800deaa:	4802      	ldr	r0, [pc, #8]	@ (800deb4 <HW_IPCC_SYS_EvtHandler+0x14>)
 800deac:	f7ff feca 	bl	800dc44 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800deb0:	bf00      	nop
}
 800deb2:	bd80      	pop	{r7, pc}
 800deb4:	58000c00 	.word	0x58000c00

0800deb8 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 800deb8:	b580      	push	{r7, lr}
 800deba:	b082      	sub	sp, #8
 800debc:	af00      	add	r7, sp, #0
 800debe:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 800dec0:	2108      	movs	r1, #8
 800dec2:	480c      	ldr	r0, [pc, #48]	@ (800def4 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800dec4:	f7ff fedb 	bl	800dc7e <LL_C1_IPCC_IsActiveFlag_CHx>
 800dec8:	4603      	mov	r3, r0
 800deca:	2b00      	cmp	r3, #0
 800decc:	d007      	beq.n	800dede <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 800dece:	4a0a      	ldr	r2, [pc, #40]	@ (800def8 <HW_IPCC_MM_SendFreeBuf+0x40>)
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800ded4:	2108      	movs	r1, #8
 800ded6:	4807      	ldr	r0, [pc, #28]	@ (800def4 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800ded8:	f7ff fe7d 	bl	800dbd6 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 800dedc:	e006      	b.n	800deec <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800dee2:	2108      	movs	r1, #8
 800dee4:	4803      	ldr	r0, [pc, #12]	@ (800def4 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800dee6:	f7ff febb 	bl	800dc60 <LL_C1_IPCC_SetFlag_CHx>
  return;
 800deea:	bf00      	nop
}
 800deec:	3708      	adds	r7, #8
 800deee:	46bd      	mov	sp, r7
 800def0:	bd80      	pop	{r7, pc}
 800def2:	bf00      	nop
 800def4:	58000c00 	.word	0x58000c00
 800def8:	200021d4 	.word	0x200021d4

0800defc <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 800defc:	b580      	push	{r7, lr}
 800defe:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800df00:	2108      	movs	r1, #8
 800df02:	4806      	ldr	r0, [pc, #24]	@ (800df1c <HW_IPCC_MM_FreeBufHandler+0x20>)
 800df04:	f7ff fe7a 	bl	800dbfc <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 800df08:	4b05      	ldr	r3, [pc, #20]	@ (800df20 <HW_IPCC_MM_FreeBufHandler+0x24>)
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800df0e:	2108      	movs	r1, #8
 800df10:	4802      	ldr	r0, [pc, #8]	@ (800df1c <HW_IPCC_MM_FreeBufHandler+0x20>)
 800df12:	f7ff fea5 	bl	800dc60 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800df16:	bf00      	nop
}
 800df18:	bd80      	pop	{r7, pc}
 800df1a:	bf00      	nop
 800df1c:	58000c00 	.word	0x58000c00
 800df20:	200021d4 	.word	0x200021d4

0800df24 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 800df24:	b580      	push	{r7, lr}
 800df26:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 800df28:	2108      	movs	r1, #8
 800df2a:	4802      	ldr	r0, [pc, #8]	@ (800df34 <HW_IPCC_TRACES_Init+0x10>)
 800df2c:	f7ff fe78 	bl	800dc20 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800df30:	bf00      	nop
}
 800df32:	bd80      	pop	{r7, pc}
 800df34:	58000c00 	.word	0x58000c00

0800df38 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 800df38:	b580      	push	{r7, lr}
 800df3a:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 800df3c:	f7fd fbe4 	bl	800b708 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 800df40:	2108      	movs	r1, #8
 800df42:	4802      	ldr	r0, [pc, #8]	@ (800df4c <HW_IPCC_TRACES_EvtHandler+0x14>)
 800df44:	f7ff fe7e 	bl	800dc44 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800df48:	bf00      	nop
}
 800df4a:	bd80      	pop	{r7, pc}
 800df4c:	58000c00 	.word	0x58000c00

0800df50 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800df50:	b480      	push	{r7}
 800df52:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800df54:	4b05      	ldr	r3, [pc, #20]	@ (800df6c <UTIL_LPM_Init+0x1c>)
 800df56:	2200      	movs	r2, #0
 800df58:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800df5a:	4b05      	ldr	r3, [pc, #20]	@ (800df70 <UTIL_LPM_Init+0x20>)
 800df5c:	2200      	movs	r2, #0
 800df5e:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800df60:	bf00      	nop
 800df62:	46bd      	mov	sp, r7
 800df64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df68:	4770      	bx	lr
 800df6a:	bf00      	nop
 800df6c:	200021d8 	.word	0x200021d8
 800df70:	200021dc 	.word	0x200021dc

0800df74 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800df74:	b480      	push	{r7}
 800df76:	b087      	sub	sp, #28
 800df78:	af00      	add	r7, sp, #0
 800df7a:	6078      	str	r0, [r7, #4]
 800df7c:	460b      	mov	r3, r1
 800df7e:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800df80:	f3ef 8310 	mrs	r3, PRIMASK
 800df84:	613b      	str	r3, [r7, #16]
  return(result);
 800df86:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800df88:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800df8a:	b672      	cpsid	i
}
 800df8c:	bf00      	nop
  
  switch(state)
 800df8e:	78fb      	ldrb	r3, [r7, #3]
 800df90:	2b00      	cmp	r3, #0
 800df92:	d008      	beq.n	800dfa6 <UTIL_LPM_SetOffMode+0x32>
 800df94:	2b01      	cmp	r3, #1
 800df96:	d10e      	bne.n	800dfb6 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800df98:	4b0d      	ldr	r3, [pc, #52]	@ (800dfd0 <UTIL_LPM_SetOffMode+0x5c>)
 800df9a:	681a      	ldr	r2, [r3, #0]
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	4313      	orrs	r3, r2
 800dfa0:	4a0b      	ldr	r2, [pc, #44]	@ (800dfd0 <UTIL_LPM_SetOffMode+0x5c>)
 800dfa2:	6013      	str	r3, [r2, #0]
      break;
 800dfa4:	e008      	b.n	800dfb8 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	43da      	mvns	r2, r3
 800dfaa:	4b09      	ldr	r3, [pc, #36]	@ (800dfd0 <UTIL_LPM_SetOffMode+0x5c>)
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	4013      	ands	r3, r2
 800dfb0:	4a07      	ldr	r2, [pc, #28]	@ (800dfd0 <UTIL_LPM_SetOffMode+0x5c>)
 800dfb2:	6013      	str	r3, [r2, #0]
      break;
 800dfb4:	e000      	b.n	800dfb8 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800dfb6:	bf00      	nop
 800dfb8:	697b      	ldr	r3, [r7, #20]
 800dfba:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	f383 8810 	msr	PRIMASK, r3
}
 800dfc2:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800dfc4:	bf00      	nop
 800dfc6:	371c      	adds	r7, #28
 800dfc8:	46bd      	mov	sp, r7
 800dfca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfce:	4770      	bx	lr
 800dfd0:	200021dc 	.word	0x200021dc

0800dfd4 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800dfd4:	b580      	push	{r7, lr}
 800dfd6:	b090      	sub	sp, #64	@ 0x40
 800dfd8:	af00      	add	r7, sp, #0
 800dfda:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800dfdc:	4b73      	ldr	r3, [pc, #460]	@ (800e1ac <UTIL_SEQ_Run+0x1d8>)
 800dfde:	681b      	ldr	r3, [r3, #0]
 800dfe0:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 800dfe2:	4b72      	ldr	r3, [pc, #456]	@ (800e1ac <UTIL_SEQ_Run+0x1d8>)
 800dfe4:	681a      	ldr	r2, [r3, #0]
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	4013      	ands	r3, r2
 800dfea:	4a70      	ldr	r2, [pc, #448]	@ (800e1ac <UTIL_SEQ_Run+0x1d8>)
 800dfec:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800dfee:	4b70      	ldr	r3, [pc, #448]	@ (800e1b0 <UTIL_SEQ_Run+0x1dc>)
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 800dff4:	4b6f      	ldr	r3, [pc, #444]	@ (800e1b4 <UTIL_SEQ_Run+0x1e0>)
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 800dffa:	4b6f      	ldr	r3, [pc, #444]	@ (800e1b8 <UTIL_SEQ_Run+0x1e4>)
 800dffc:	681b      	ldr	r3, [r3, #0]
 800dffe:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 800e000:	4b6e      	ldr	r3, [pc, #440]	@ (800e1bc <UTIL_SEQ_Run+0x1e8>)
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800e006:	e08d      	b.n	800e124 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 800e008:	2300      	movs	r3, #0
 800e00a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800e00c:	e002      	b.n	800e014 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 800e00e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e010:	3301      	adds	r3, #1
 800e012:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800e014:	4a6a      	ldr	r2, [pc, #424]	@ (800e1c0 <UTIL_SEQ_Run+0x1ec>)
 800e016:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e018:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800e01c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e01e:	401a      	ands	r2, r3
 800e020:	4b62      	ldr	r3, [pc, #392]	@ (800e1ac <UTIL_SEQ_Run+0x1d8>)
 800e022:	681b      	ldr	r3, [r3, #0]
 800e024:	4013      	ands	r3, r2
 800e026:	2b00      	cmp	r3, #0
 800e028:	d0f1      	beq.n	800e00e <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800e02a:	4a65      	ldr	r2, [pc, #404]	@ (800e1c0 <UTIL_SEQ_Run+0x1ec>)
 800e02c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e02e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800e032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e034:	401a      	ands	r2, r3
 800e036:	4b5d      	ldr	r3, [pc, #372]	@ (800e1ac <UTIL_SEQ_Run+0x1d8>)
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	4013      	ands	r3, r2
 800e03c:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800e03e:	4a60      	ldr	r2, [pc, #384]	@ (800e1c0 <UTIL_SEQ_Run+0x1ec>)
 800e040:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e042:	00db      	lsls	r3, r3, #3
 800e044:	4413      	add	r3, r2
 800e046:	685a      	ldr	r2, [r3, #4]
 800e048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e04a:	4013      	ands	r3, r2
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d106      	bne.n	800e05e <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800e050:	4a5b      	ldr	r2, [pc, #364]	@ (800e1c0 <UTIL_SEQ_Run+0x1ec>)
 800e052:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e054:	00db      	lsls	r3, r3, #3
 800e056:	4413      	add	r3, r2
 800e058:	f04f 32ff 	mov.w	r2, #4294967295
 800e05c:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800e05e:	4a58      	ldr	r2, [pc, #352]	@ (800e1c0 <UTIL_SEQ_Run+0x1ec>)
 800e060:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e062:	00db      	lsls	r3, r3, #3
 800e064:	4413      	add	r3, r2
 800e066:	685a      	ldr	r2, [r3, #4]
 800e068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e06a:	4013      	ands	r3, r2
 800e06c:	4618      	mov	r0, r3
 800e06e:	f000 f9b3 	bl	800e3d8 <SEQ_BitPosition>
 800e072:	4603      	mov	r3, r0
 800e074:	461a      	mov	r2, r3
 800e076:	4b53      	ldr	r3, [pc, #332]	@ (800e1c4 <UTIL_SEQ_Run+0x1f0>)
 800e078:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800e07a:	4a51      	ldr	r2, [pc, #324]	@ (800e1c0 <UTIL_SEQ_Run+0x1ec>)
 800e07c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e07e:	00db      	lsls	r3, r3, #3
 800e080:	4413      	add	r3, r2
 800e082:	685a      	ldr	r2, [r3, #4]
 800e084:	4b4f      	ldr	r3, [pc, #316]	@ (800e1c4 <UTIL_SEQ_Run+0x1f0>)
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	2101      	movs	r1, #1
 800e08a:	fa01 f303 	lsl.w	r3, r1, r3
 800e08e:	43db      	mvns	r3, r3
 800e090:	401a      	ands	r2, r3
 800e092:	494b      	ldr	r1, [pc, #300]	@ (800e1c0 <UTIL_SEQ_Run+0x1ec>)
 800e094:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e096:	00db      	lsls	r3, r3, #3
 800e098:	440b      	add	r3, r1
 800e09a:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e09c:	f3ef 8310 	mrs	r3, PRIMASK
 800e0a0:	61bb      	str	r3, [r7, #24]
  return(result);
 800e0a2:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800e0a4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800e0a6:	b672      	cpsid	i
}
 800e0a8:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800e0aa:	4b46      	ldr	r3, [pc, #280]	@ (800e1c4 <UTIL_SEQ_Run+0x1f0>)
 800e0ac:	681b      	ldr	r3, [r3, #0]
 800e0ae:	2201      	movs	r2, #1
 800e0b0:	fa02 f303 	lsl.w	r3, r2, r3
 800e0b4:	43da      	mvns	r2, r3
 800e0b6:	4b3e      	ldr	r3, [pc, #248]	@ (800e1b0 <UTIL_SEQ_Run+0x1dc>)
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	4013      	ands	r3, r2
 800e0bc:	4a3c      	ldr	r2, [pc, #240]	@ (800e1b0 <UTIL_SEQ_Run+0x1dc>)
 800e0be:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800e0c0:	2301      	movs	r3, #1
 800e0c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e0c4:	e013      	b.n	800e0ee <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800e0c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e0c8:	3b01      	subs	r3, #1
 800e0ca:	4a3d      	ldr	r2, [pc, #244]	@ (800e1c0 <UTIL_SEQ_Run+0x1ec>)
 800e0cc:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800e0d0:	4b3c      	ldr	r3, [pc, #240]	@ (800e1c4 <UTIL_SEQ_Run+0x1f0>)
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	2201      	movs	r2, #1
 800e0d6:	fa02 f303 	lsl.w	r3, r2, r3
 800e0da:	43da      	mvns	r2, r3
 800e0dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e0de:	3b01      	subs	r3, #1
 800e0e0:	400a      	ands	r2, r1
 800e0e2:	4937      	ldr	r1, [pc, #220]	@ (800e1c0 <UTIL_SEQ_Run+0x1ec>)
 800e0e4:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800e0e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e0ea:	3b01      	subs	r3, #1
 800e0ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e0ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d1e8      	bne.n	800e0c6 <UTIL_SEQ_Run+0xf2>
 800e0f4:	6a3b      	ldr	r3, [r7, #32]
 800e0f6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e0f8:	697b      	ldr	r3, [r7, #20]
 800e0fa:	f383 8810 	msr	PRIMASK, r3
}
 800e0fe:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800e100:	4b30      	ldr	r3, [pc, #192]	@ (800e1c4 <UTIL_SEQ_Run+0x1f0>)
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	4a30      	ldr	r2, [pc, #192]	@ (800e1c8 <UTIL_SEQ_Run+0x1f4>)
 800e106:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e10a:	4798      	blx	r3

    local_taskset = TaskSet;
 800e10c:	4b28      	ldr	r3, [pc, #160]	@ (800e1b0 <UTIL_SEQ_Run+0x1dc>)
 800e10e:	681b      	ldr	r3, [r3, #0]
 800e110:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 800e112:	4b28      	ldr	r3, [pc, #160]	@ (800e1b4 <UTIL_SEQ_Run+0x1e0>)
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 800e118:	4b27      	ldr	r3, [pc, #156]	@ (800e1b8 <UTIL_SEQ_Run+0x1e4>)
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 800e11e:	4b27      	ldr	r3, [pc, #156]	@ (800e1bc <UTIL_SEQ_Run+0x1e8>)
 800e120:	681b      	ldr	r3, [r3, #0]
 800e122:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800e124:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e126:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e128:	401a      	ands	r2, r3
 800e12a:	4b20      	ldr	r3, [pc, #128]	@ (800e1ac <UTIL_SEQ_Run+0x1d8>)
 800e12c:	681b      	ldr	r3, [r3, #0]
 800e12e:	4013      	ands	r3, r2
 800e130:	2b00      	cmp	r3, #0
 800e132:	d005      	beq.n	800e140 <UTIL_SEQ_Run+0x16c>
 800e134:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e136:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e138:	4013      	ands	r3, r2
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	f43f af64 	beq.w	800e008 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800e140:	4b20      	ldr	r3, [pc, #128]	@ (800e1c4 <UTIL_SEQ_Run+0x1f0>)
 800e142:	f04f 32ff 	mov.w	r2, #4294967295
 800e146:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800e148:	f000 f938 	bl	800e3bc <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e14c:	f3ef 8310 	mrs	r3, PRIMASK
 800e150:	613b      	str	r3, [r7, #16]
  return(result);
 800e152:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800e154:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800e156:	b672      	cpsid	i
}
 800e158:	bf00      	nop
  local_taskset = TaskSet;
 800e15a:	4b15      	ldr	r3, [pc, #84]	@ (800e1b0 <UTIL_SEQ_Run+0x1dc>)
 800e15c:	681b      	ldr	r3, [r3, #0]
 800e15e:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 800e160:	4b14      	ldr	r3, [pc, #80]	@ (800e1b4 <UTIL_SEQ_Run+0x1e0>)
 800e162:	681b      	ldr	r3, [r3, #0]
 800e164:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 800e166:	4b14      	ldr	r3, [pc, #80]	@ (800e1b8 <UTIL_SEQ_Run+0x1e4>)
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800e16c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e16e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e170:	401a      	ands	r2, r3
 800e172:	4b0e      	ldr	r3, [pc, #56]	@ (800e1ac <UTIL_SEQ_Run+0x1d8>)
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	4013      	ands	r3, r2
 800e178:	2b00      	cmp	r3, #0
 800e17a:	d107      	bne.n	800e18c <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 800e17c:	4b0f      	ldr	r3, [pc, #60]	@ (800e1bc <UTIL_SEQ_Run+0x1e8>)
 800e17e:	681a      	ldr	r2, [r3, #0]
 800e180:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e182:	4013      	ands	r3, r2
 800e184:	2b00      	cmp	r3, #0
 800e186:	d101      	bne.n	800e18c <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 800e188:	f7f3 f935 	bl	80013f6 <UTIL_SEQ_Idle>
 800e18c:	69fb      	ldr	r3, [r7, #28]
 800e18e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e190:	68fb      	ldr	r3, [r7, #12]
 800e192:	f383 8810 	msr	PRIMASK, r3
}
 800e196:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 800e198:	f000 f917 	bl	800e3ca <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800e19c:	4a03      	ldr	r2, [pc, #12]	@ (800e1ac <UTIL_SEQ_Run+0x1d8>)
 800e19e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e1a0:	6013      	str	r3, [r2, #0]

  return;
 800e1a2:	bf00      	nop
}
 800e1a4:	3740      	adds	r7, #64	@ 0x40
 800e1a6:	46bd      	mov	sp, r7
 800e1a8:	bd80      	pop	{r7, pc}
 800e1aa:	bf00      	nop
 800e1ac:	20000030 	.word	0x20000030
 800e1b0:	200021e0 	.word	0x200021e0
 800e1b4:	200021e4 	.word	0x200021e4
 800e1b8:	2000002c 	.word	0x2000002c
 800e1bc:	200021e8 	.word	0x200021e8
 800e1c0:	20002270 	.word	0x20002270
 800e1c4:	200021ec 	.word	0x200021ec
 800e1c8:	200021f0 	.word	0x200021f0

0800e1cc <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800e1cc:	b580      	push	{r7, lr}
 800e1ce:	b088      	sub	sp, #32
 800e1d0:	af00      	add	r7, sp, #0
 800e1d2:	60f8      	str	r0, [r7, #12]
 800e1d4:	60b9      	str	r1, [r7, #8]
 800e1d6:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e1d8:	f3ef 8310 	mrs	r3, PRIMASK
 800e1dc:	617b      	str	r3, [r7, #20]
  return(result);
 800e1de:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800e1e0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800e1e2:	b672      	cpsid	i
}
 800e1e4:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800e1e6:	68f8      	ldr	r0, [r7, #12]
 800e1e8:	f000 f8f6 	bl	800e3d8 <SEQ_BitPosition>
 800e1ec:	4603      	mov	r3, r0
 800e1ee:	4619      	mov	r1, r3
 800e1f0:	4a06      	ldr	r2, [pc, #24]	@ (800e20c <UTIL_SEQ_RegTask+0x40>)
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800e1f8:	69fb      	ldr	r3, [r7, #28]
 800e1fa:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e1fc:	69bb      	ldr	r3, [r7, #24]
 800e1fe:	f383 8810 	msr	PRIMASK, r3
}
 800e202:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800e204:	bf00      	nop
}
 800e206:	3720      	adds	r7, #32
 800e208:	46bd      	mov	sp, r7
 800e20a:	bd80      	pop	{r7, pc}
 800e20c:	200021f0 	.word	0x200021f0

0800e210 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800e210:	b480      	push	{r7}
 800e212:	b087      	sub	sp, #28
 800e214:	af00      	add	r7, sp, #0
 800e216:	6078      	str	r0, [r7, #4]
 800e218:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e21a:	f3ef 8310 	mrs	r3, PRIMASK
 800e21e:	60fb      	str	r3, [r7, #12]
  return(result);
 800e220:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800e222:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800e224:	b672      	cpsid	i
}
 800e226:	bf00      	nop

  TaskSet |= TaskId_bm;
 800e228:	4b0d      	ldr	r3, [pc, #52]	@ (800e260 <UTIL_SEQ_SetTask+0x50>)
 800e22a:	681a      	ldr	r2, [r3, #0]
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	4313      	orrs	r3, r2
 800e230:	4a0b      	ldr	r2, [pc, #44]	@ (800e260 <UTIL_SEQ_SetTask+0x50>)
 800e232:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800e234:	4a0b      	ldr	r2, [pc, #44]	@ (800e264 <UTIL_SEQ_SetTask+0x54>)
 800e236:	683b      	ldr	r3, [r7, #0]
 800e238:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	431a      	orrs	r2, r3
 800e240:	4908      	ldr	r1, [pc, #32]	@ (800e264 <UTIL_SEQ_SetTask+0x54>)
 800e242:	683b      	ldr	r3, [r7, #0]
 800e244:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800e248:	697b      	ldr	r3, [r7, #20]
 800e24a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e24c:	693b      	ldr	r3, [r7, #16]
 800e24e:	f383 8810 	msr	PRIMASK, r3
}
 800e252:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800e254:	bf00      	nop
}
 800e256:	371c      	adds	r7, #28
 800e258:	46bd      	mov	sp, r7
 800e25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e25e:	4770      	bx	lr
 800e260:	200021e0 	.word	0x200021e0
 800e264:	20002270 	.word	0x20002270

0800e268 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800e268:	b480      	push	{r7}
 800e26a:	b087      	sub	sp, #28
 800e26c:	af00      	add	r7, sp, #0
 800e26e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e270:	f3ef 8310 	mrs	r3, PRIMASK
 800e274:	60fb      	str	r3, [r7, #12]
  return(result);
 800e276:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800e278:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800e27a:	b672      	cpsid	i
}
 800e27c:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	43da      	mvns	r2, r3
 800e282:	4b08      	ldr	r3, [pc, #32]	@ (800e2a4 <UTIL_SEQ_PauseTask+0x3c>)
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	4013      	ands	r3, r2
 800e288:	4a06      	ldr	r2, [pc, #24]	@ (800e2a4 <UTIL_SEQ_PauseTask+0x3c>)
 800e28a:	6013      	str	r3, [r2, #0]
 800e28c:	697b      	ldr	r3, [r7, #20]
 800e28e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e290:	693b      	ldr	r3, [r7, #16]
 800e292:	f383 8810 	msr	PRIMASK, r3
}
 800e296:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800e298:	bf00      	nop
}
 800e29a:	371c      	adds	r7, #28
 800e29c:	46bd      	mov	sp, r7
 800e29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2a2:	4770      	bx	lr
 800e2a4:	2000002c 	.word	0x2000002c

0800e2a8 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800e2a8:	b480      	push	{r7}
 800e2aa:	b087      	sub	sp, #28
 800e2ac:	af00      	add	r7, sp, #0
 800e2ae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e2b0:	f3ef 8310 	mrs	r3, PRIMASK
 800e2b4:	60fb      	str	r3, [r7, #12]
  return(result);
 800e2b6:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800e2b8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800e2ba:	b672      	cpsid	i
}
 800e2bc:	bf00      	nop

  TaskMask |= TaskId_bm;
 800e2be:	4b09      	ldr	r3, [pc, #36]	@ (800e2e4 <UTIL_SEQ_ResumeTask+0x3c>)
 800e2c0:	681a      	ldr	r2, [r3, #0]
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	4313      	orrs	r3, r2
 800e2c6:	4a07      	ldr	r2, [pc, #28]	@ (800e2e4 <UTIL_SEQ_ResumeTask+0x3c>)
 800e2c8:	6013      	str	r3, [r2, #0]
 800e2ca:	697b      	ldr	r3, [r7, #20]
 800e2cc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e2ce:	693b      	ldr	r3, [r7, #16]
 800e2d0:	f383 8810 	msr	PRIMASK, r3
}
 800e2d4:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800e2d6:	bf00      	nop
}
 800e2d8:	371c      	adds	r7, #28
 800e2da:	46bd      	mov	sp, r7
 800e2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2e0:	4770      	bx	lr
 800e2e2:	bf00      	nop
 800e2e4:	2000002c 	.word	0x2000002c

0800e2e8 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800e2e8:	b480      	push	{r7}
 800e2ea:	b087      	sub	sp, #28
 800e2ec:	af00      	add	r7, sp, #0
 800e2ee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e2f0:	f3ef 8310 	mrs	r3, PRIMASK
 800e2f4:	60fb      	str	r3, [r7, #12]
  return(result);
 800e2f6:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800e2f8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800e2fa:	b672      	cpsid	i
}
 800e2fc:	bf00      	nop

  EvtSet |= EvtId_bm;
 800e2fe:	4b09      	ldr	r3, [pc, #36]	@ (800e324 <UTIL_SEQ_SetEvt+0x3c>)
 800e300:	681a      	ldr	r2, [r3, #0]
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	4313      	orrs	r3, r2
 800e306:	4a07      	ldr	r2, [pc, #28]	@ (800e324 <UTIL_SEQ_SetEvt+0x3c>)
 800e308:	6013      	str	r3, [r2, #0]
 800e30a:	697b      	ldr	r3, [r7, #20]
 800e30c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e30e:	693b      	ldr	r3, [r7, #16]
 800e310:	f383 8810 	msr	PRIMASK, r3
}
 800e314:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800e316:	bf00      	nop
}
 800e318:	371c      	adds	r7, #28
 800e31a:	46bd      	mov	sp, r7
 800e31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e320:	4770      	bx	lr
 800e322:	bf00      	nop
 800e324:	200021e4 	.word	0x200021e4

0800e328 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800e328:	b580      	push	{r7, lr}
 800e32a:	b088      	sub	sp, #32
 800e32c:	af00      	add	r7, sp, #0
 800e32e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800e330:	4b1f      	ldr	r3, [pc, #124]	@ (800e3b0 <UTIL_SEQ_WaitEvt+0x88>)
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800e336:	4b1e      	ldr	r3, [pc, #120]	@ (800e3b0 <UTIL_SEQ_WaitEvt+0x88>)
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e33e:	d102      	bne.n	800e346 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 800e340:	2300      	movs	r3, #0
 800e342:	61fb      	str	r3, [r7, #28]
 800e344:	e005      	b.n	800e352 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 800e346:	4b1a      	ldr	r3, [pc, #104]	@ (800e3b0 <UTIL_SEQ_WaitEvt+0x88>)
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	2201      	movs	r2, #1
 800e34c:	fa02 f303 	lsl.w	r3, r2, r3
 800e350:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800e352:	4b18      	ldr	r3, [pc, #96]	@ (800e3b4 <UTIL_SEQ_WaitEvt+0x8c>)
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 800e358:	4a16      	ldr	r2, [pc, #88]	@ (800e3b4 <UTIL_SEQ_WaitEvt+0x8c>)
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 800e35e:	e003      	b.n	800e368 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 800e360:	6879      	ldr	r1, [r7, #4]
 800e362:	69f8      	ldr	r0, [r7, #28]
 800e364:	f7f3 f84e 	bl	8001404 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 800e368:	4b13      	ldr	r3, [pc, #76]	@ (800e3b8 <UTIL_SEQ_WaitEvt+0x90>)
 800e36a:	681a      	ldr	r2, [r3, #0]
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	4013      	ands	r3, r2
 800e370:	2b00      	cmp	r3, #0
 800e372:	d0f5      	beq.n	800e360 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 800e374:	4a0e      	ldr	r2, [pc, #56]	@ (800e3b0 <UTIL_SEQ_WaitEvt+0x88>)
 800e376:	69bb      	ldr	r3, [r7, #24]
 800e378:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e37a:	f3ef 8310 	mrs	r3, PRIMASK
 800e37e:	60bb      	str	r3, [r7, #8]
  return(result);
 800e380:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800e382:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800e384:	b672      	cpsid	i
}
 800e386:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	43da      	mvns	r2, r3
 800e38c:	4b0a      	ldr	r3, [pc, #40]	@ (800e3b8 <UTIL_SEQ_WaitEvt+0x90>)
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	4013      	ands	r3, r2
 800e392:	4a09      	ldr	r2, [pc, #36]	@ (800e3b8 <UTIL_SEQ_WaitEvt+0x90>)
 800e394:	6013      	str	r3, [r2, #0]
 800e396:	693b      	ldr	r3, [r7, #16]
 800e398:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	f383 8810 	msr	PRIMASK, r3
}
 800e3a0:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 800e3a2:	4a04      	ldr	r2, [pc, #16]	@ (800e3b4 <UTIL_SEQ_WaitEvt+0x8c>)
 800e3a4:	697b      	ldr	r3, [r7, #20]
 800e3a6:	6013      	str	r3, [r2, #0]
  return;
 800e3a8:	bf00      	nop
}
 800e3aa:	3720      	adds	r7, #32
 800e3ac:	46bd      	mov	sp, r7
 800e3ae:	bd80      	pop	{r7, pc}
 800e3b0:	200021ec 	.word	0x200021ec
 800e3b4:	200021e8 	.word	0x200021e8
 800e3b8:	200021e4 	.word	0x200021e4

0800e3bc <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800e3bc:	b480      	push	{r7}
 800e3be:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800e3c0:	bf00      	nop
}
 800e3c2:	46bd      	mov	sp, r7
 800e3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3c8:	4770      	bx	lr

0800e3ca <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800e3ca:	b480      	push	{r7}
 800e3cc:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800e3ce:	bf00      	nop
}
 800e3d0:	46bd      	mov	sp, r7
 800e3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3d6:	4770      	bx	lr

0800e3d8 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800e3d8:	b480      	push	{r7}
 800e3da:	b085      	sub	sp, #20
 800e3dc:	af00      	add	r7, sp, #0
 800e3de:	6078      	str	r0, [r7, #4]
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	60fb      	str	r3, [r7, #12]
  if (value == 0U)
 800e3e4:	68fb      	ldr	r3, [r7, #12]
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	d101      	bne.n	800e3ee <SEQ_BitPosition+0x16>
    return 32U;
 800e3ea:	2320      	movs	r3, #32
 800e3ec:	e003      	b.n	800e3f6 <SEQ_BitPosition+0x1e>
  return __builtin_clz(value);
 800e3ee:	68fb      	ldr	r3, [r7, #12]
 800e3f0:	fab3 f383 	clz	r3, r3
 800e3f4:	b2db      	uxtb	r3, r3
  return (uint8_t)(31 -__CLZ( Value ));
 800e3f6:	f1c3 031f 	rsb	r3, r3, #31
 800e3fa:	b2db      	uxtb	r3, r3
}
 800e3fc:	4618      	mov	r0, r3
 800e3fe:	3714      	adds	r7, #20
 800e400:	46bd      	mov	sp, r7
 800e402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e406:	4770      	bx	lr

0800e408 <std>:
 800e408:	2300      	movs	r3, #0
 800e40a:	b510      	push	{r4, lr}
 800e40c:	4604      	mov	r4, r0
 800e40e:	e9c0 3300 	strd	r3, r3, [r0]
 800e412:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e416:	6083      	str	r3, [r0, #8]
 800e418:	8181      	strh	r1, [r0, #12]
 800e41a:	6643      	str	r3, [r0, #100]	@ 0x64
 800e41c:	81c2      	strh	r2, [r0, #14]
 800e41e:	6183      	str	r3, [r0, #24]
 800e420:	4619      	mov	r1, r3
 800e422:	2208      	movs	r2, #8
 800e424:	305c      	adds	r0, #92	@ 0x5c
 800e426:	f000 fa21 	bl	800e86c <memset>
 800e42a:	4b0d      	ldr	r3, [pc, #52]	@ (800e460 <std+0x58>)
 800e42c:	6263      	str	r3, [r4, #36]	@ 0x24
 800e42e:	4b0d      	ldr	r3, [pc, #52]	@ (800e464 <std+0x5c>)
 800e430:	62a3      	str	r3, [r4, #40]	@ 0x28
 800e432:	4b0d      	ldr	r3, [pc, #52]	@ (800e468 <std+0x60>)
 800e434:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800e436:	4b0d      	ldr	r3, [pc, #52]	@ (800e46c <std+0x64>)
 800e438:	6323      	str	r3, [r4, #48]	@ 0x30
 800e43a:	4b0d      	ldr	r3, [pc, #52]	@ (800e470 <std+0x68>)
 800e43c:	6224      	str	r4, [r4, #32]
 800e43e:	429c      	cmp	r4, r3
 800e440:	d006      	beq.n	800e450 <std+0x48>
 800e442:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800e446:	4294      	cmp	r4, r2
 800e448:	d002      	beq.n	800e450 <std+0x48>
 800e44a:	33d0      	adds	r3, #208	@ 0xd0
 800e44c:	429c      	cmp	r4, r3
 800e44e:	d105      	bne.n	800e45c <std+0x54>
 800e450:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800e454:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e458:	f000 ba7a 	b.w	800e950 <__retarget_lock_init_recursive>
 800e45c:	bd10      	pop	{r4, pc}
 800e45e:	bf00      	nop
 800e460:	0800e6bd 	.word	0x0800e6bd
 800e464:	0800e6df 	.word	0x0800e6df
 800e468:	0800e717 	.word	0x0800e717
 800e46c:	0800e73b 	.word	0x0800e73b
 800e470:	20002278 	.word	0x20002278

0800e474 <stdio_exit_handler>:
 800e474:	4a02      	ldr	r2, [pc, #8]	@ (800e480 <stdio_exit_handler+0xc>)
 800e476:	4903      	ldr	r1, [pc, #12]	@ (800e484 <stdio_exit_handler+0x10>)
 800e478:	4803      	ldr	r0, [pc, #12]	@ (800e488 <stdio_exit_handler+0x14>)
 800e47a:	f000 b869 	b.w	800e550 <_fwalk_sglue>
 800e47e:	bf00      	nop
 800e480:	20000034 	.word	0x20000034
 800e484:	0800f4bd 	.word	0x0800f4bd
 800e488:	20000044 	.word	0x20000044

0800e48c <cleanup_stdio>:
 800e48c:	6841      	ldr	r1, [r0, #4]
 800e48e:	4b0c      	ldr	r3, [pc, #48]	@ (800e4c0 <cleanup_stdio+0x34>)
 800e490:	4299      	cmp	r1, r3
 800e492:	b510      	push	{r4, lr}
 800e494:	4604      	mov	r4, r0
 800e496:	d001      	beq.n	800e49c <cleanup_stdio+0x10>
 800e498:	f001 f810 	bl	800f4bc <_fflush_r>
 800e49c:	68a1      	ldr	r1, [r4, #8]
 800e49e:	4b09      	ldr	r3, [pc, #36]	@ (800e4c4 <cleanup_stdio+0x38>)
 800e4a0:	4299      	cmp	r1, r3
 800e4a2:	d002      	beq.n	800e4aa <cleanup_stdio+0x1e>
 800e4a4:	4620      	mov	r0, r4
 800e4a6:	f001 f809 	bl	800f4bc <_fflush_r>
 800e4aa:	68e1      	ldr	r1, [r4, #12]
 800e4ac:	4b06      	ldr	r3, [pc, #24]	@ (800e4c8 <cleanup_stdio+0x3c>)
 800e4ae:	4299      	cmp	r1, r3
 800e4b0:	d004      	beq.n	800e4bc <cleanup_stdio+0x30>
 800e4b2:	4620      	mov	r0, r4
 800e4b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e4b8:	f001 b800 	b.w	800f4bc <_fflush_r>
 800e4bc:	bd10      	pop	{r4, pc}
 800e4be:	bf00      	nop
 800e4c0:	20002278 	.word	0x20002278
 800e4c4:	200022e0 	.word	0x200022e0
 800e4c8:	20002348 	.word	0x20002348

0800e4cc <global_stdio_init.part.0>:
 800e4cc:	b510      	push	{r4, lr}
 800e4ce:	4b0b      	ldr	r3, [pc, #44]	@ (800e4fc <global_stdio_init.part.0+0x30>)
 800e4d0:	4c0b      	ldr	r4, [pc, #44]	@ (800e500 <global_stdio_init.part.0+0x34>)
 800e4d2:	4a0c      	ldr	r2, [pc, #48]	@ (800e504 <global_stdio_init.part.0+0x38>)
 800e4d4:	601a      	str	r2, [r3, #0]
 800e4d6:	4620      	mov	r0, r4
 800e4d8:	2200      	movs	r2, #0
 800e4da:	2104      	movs	r1, #4
 800e4dc:	f7ff ff94 	bl	800e408 <std>
 800e4e0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800e4e4:	2201      	movs	r2, #1
 800e4e6:	2109      	movs	r1, #9
 800e4e8:	f7ff ff8e 	bl	800e408 <std>
 800e4ec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800e4f0:	2202      	movs	r2, #2
 800e4f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e4f6:	2112      	movs	r1, #18
 800e4f8:	f7ff bf86 	b.w	800e408 <std>
 800e4fc:	200023b0 	.word	0x200023b0
 800e500:	20002278 	.word	0x20002278
 800e504:	0800e475 	.word	0x0800e475

0800e508 <__sfp_lock_acquire>:
 800e508:	4801      	ldr	r0, [pc, #4]	@ (800e510 <__sfp_lock_acquire+0x8>)
 800e50a:	f000 ba22 	b.w	800e952 <__retarget_lock_acquire_recursive>
 800e50e:	bf00      	nop
 800e510:	200023b9 	.word	0x200023b9

0800e514 <__sfp_lock_release>:
 800e514:	4801      	ldr	r0, [pc, #4]	@ (800e51c <__sfp_lock_release+0x8>)
 800e516:	f000 ba1d 	b.w	800e954 <__retarget_lock_release_recursive>
 800e51a:	bf00      	nop
 800e51c:	200023b9 	.word	0x200023b9

0800e520 <__sinit>:
 800e520:	b510      	push	{r4, lr}
 800e522:	4604      	mov	r4, r0
 800e524:	f7ff fff0 	bl	800e508 <__sfp_lock_acquire>
 800e528:	6a23      	ldr	r3, [r4, #32]
 800e52a:	b11b      	cbz	r3, 800e534 <__sinit+0x14>
 800e52c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e530:	f7ff bff0 	b.w	800e514 <__sfp_lock_release>
 800e534:	4b04      	ldr	r3, [pc, #16]	@ (800e548 <__sinit+0x28>)
 800e536:	6223      	str	r3, [r4, #32]
 800e538:	4b04      	ldr	r3, [pc, #16]	@ (800e54c <__sinit+0x2c>)
 800e53a:	681b      	ldr	r3, [r3, #0]
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d1f5      	bne.n	800e52c <__sinit+0xc>
 800e540:	f7ff ffc4 	bl	800e4cc <global_stdio_init.part.0>
 800e544:	e7f2      	b.n	800e52c <__sinit+0xc>
 800e546:	bf00      	nop
 800e548:	0800e48d 	.word	0x0800e48d
 800e54c:	200023b0 	.word	0x200023b0

0800e550 <_fwalk_sglue>:
 800e550:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e554:	4607      	mov	r7, r0
 800e556:	4688      	mov	r8, r1
 800e558:	4614      	mov	r4, r2
 800e55a:	2600      	movs	r6, #0
 800e55c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e560:	f1b9 0901 	subs.w	r9, r9, #1
 800e564:	d505      	bpl.n	800e572 <_fwalk_sglue+0x22>
 800e566:	6824      	ldr	r4, [r4, #0]
 800e568:	2c00      	cmp	r4, #0
 800e56a:	d1f7      	bne.n	800e55c <_fwalk_sglue+0xc>
 800e56c:	4630      	mov	r0, r6
 800e56e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e572:	89ab      	ldrh	r3, [r5, #12]
 800e574:	2b01      	cmp	r3, #1
 800e576:	d907      	bls.n	800e588 <_fwalk_sglue+0x38>
 800e578:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e57c:	3301      	adds	r3, #1
 800e57e:	d003      	beq.n	800e588 <_fwalk_sglue+0x38>
 800e580:	4629      	mov	r1, r5
 800e582:	4638      	mov	r0, r7
 800e584:	47c0      	blx	r8
 800e586:	4306      	orrs	r6, r0
 800e588:	3568      	adds	r5, #104	@ 0x68
 800e58a:	e7e9      	b.n	800e560 <_fwalk_sglue+0x10>

0800e58c <iprintf>:
 800e58c:	b40f      	push	{r0, r1, r2, r3}
 800e58e:	b507      	push	{r0, r1, r2, lr}
 800e590:	4906      	ldr	r1, [pc, #24]	@ (800e5ac <iprintf+0x20>)
 800e592:	ab04      	add	r3, sp, #16
 800e594:	6808      	ldr	r0, [r1, #0]
 800e596:	f853 2b04 	ldr.w	r2, [r3], #4
 800e59a:	6881      	ldr	r1, [r0, #8]
 800e59c:	9301      	str	r3, [sp, #4]
 800e59e:	f000 fc63 	bl	800ee68 <_vfiprintf_r>
 800e5a2:	b003      	add	sp, #12
 800e5a4:	f85d eb04 	ldr.w	lr, [sp], #4
 800e5a8:	b004      	add	sp, #16
 800e5aa:	4770      	bx	lr
 800e5ac:	20000040 	.word	0x20000040

0800e5b0 <putchar>:
 800e5b0:	4b02      	ldr	r3, [pc, #8]	@ (800e5bc <putchar+0xc>)
 800e5b2:	4601      	mov	r1, r0
 800e5b4:	6818      	ldr	r0, [r3, #0]
 800e5b6:	6882      	ldr	r2, [r0, #8]
 800e5b8:	f001 b80a 	b.w	800f5d0 <_putc_r>
 800e5bc:	20000040 	.word	0x20000040

0800e5c0 <_puts_r>:
 800e5c0:	6a03      	ldr	r3, [r0, #32]
 800e5c2:	b570      	push	{r4, r5, r6, lr}
 800e5c4:	6884      	ldr	r4, [r0, #8]
 800e5c6:	4605      	mov	r5, r0
 800e5c8:	460e      	mov	r6, r1
 800e5ca:	b90b      	cbnz	r3, 800e5d0 <_puts_r+0x10>
 800e5cc:	f7ff ffa8 	bl	800e520 <__sinit>
 800e5d0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e5d2:	07db      	lsls	r3, r3, #31
 800e5d4:	d405      	bmi.n	800e5e2 <_puts_r+0x22>
 800e5d6:	89a3      	ldrh	r3, [r4, #12]
 800e5d8:	0598      	lsls	r0, r3, #22
 800e5da:	d402      	bmi.n	800e5e2 <_puts_r+0x22>
 800e5dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e5de:	f000 f9b8 	bl	800e952 <__retarget_lock_acquire_recursive>
 800e5e2:	89a3      	ldrh	r3, [r4, #12]
 800e5e4:	0719      	lsls	r1, r3, #28
 800e5e6:	d502      	bpl.n	800e5ee <_puts_r+0x2e>
 800e5e8:	6923      	ldr	r3, [r4, #16]
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d135      	bne.n	800e65a <_puts_r+0x9a>
 800e5ee:	4621      	mov	r1, r4
 800e5f0:	4628      	mov	r0, r5
 800e5f2:	f000 f8e5 	bl	800e7c0 <__swsetup_r>
 800e5f6:	b380      	cbz	r0, 800e65a <_puts_r+0x9a>
 800e5f8:	f04f 35ff 	mov.w	r5, #4294967295
 800e5fc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e5fe:	07da      	lsls	r2, r3, #31
 800e600:	d405      	bmi.n	800e60e <_puts_r+0x4e>
 800e602:	89a3      	ldrh	r3, [r4, #12]
 800e604:	059b      	lsls	r3, r3, #22
 800e606:	d402      	bmi.n	800e60e <_puts_r+0x4e>
 800e608:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e60a:	f000 f9a3 	bl	800e954 <__retarget_lock_release_recursive>
 800e60e:	4628      	mov	r0, r5
 800e610:	bd70      	pop	{r4, r5, r6, pc}
 800e612:	2b00      	cmp	r3, #0
 800e614:	da04      	bge.n	800e620 <_puts_r+0x60>
 800e616:	69a2      	ldr	r2, [r4, #24]
 800e618:	429a      	cmp	r2, r3
 800e61a:	dc17      	bgt.n	800e64c <_puts_r+0x8c>
 800e61c:	290a      	cmp	r1, #10
 800e61e:	d015      	beq.n	800e64c <_puts_r+0x8c>
 800e620:	6823      	ldr	r3, [r4, #0]
 800e622:	1c5a      	adds	r2, r3, #1
 800e624:	6022      	str	r2, [r4, #0]
 800e626:	7019      	strb	r1, [r3, #0]
 800e628:	68a3      	ldr	r3, [r4, #8]
 800e62a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800e62e:	3b01      	subs	r3, #1
 800e630:	60a3      	str	r3, [r4, #8]
 800e632:	2900      	cmp	r1, #0
 800e634:	d1ed      	bne.n	800e612 <_puts_r+0x52>
 800e636:	2b00      	cmp	r3, #0
 800e638:	da11      	bge.n	800e65e <_puts_r+0x9e>
 800e63a:	4622      	mov	r2, r4
 800e63c:	210a      	movs	r1, #10
 800e63e:	4628      	mov	r0, r5
 800e640:	f000 f87f 	bl	800e742 <__swbuf_r>
 800e644:	3001      	adds	r0, #1
 800e646:	d0d7      	beq.n	800e5f8 <_puts_r+0x38>
 800e648:	250a      	movs	r5, #10
 800e64a:	e7d7      	b.n	800e5fc <_puts_r+0x3c>
 800e64c:	4622      	mov	r2, r4
 800e64e:	4628      	mov	r0, r5
 800e650:	f000 f877 	bl	800e742 <__swbuf_r>
 800e654:	3001      	adds	r0, #1
 800e656:	d1e7      	bne.n	800e628 <_puts_r+0x68>
 800e658:	e7ce      	b.n	800e5f8 <_puts_r+0x38>
 800e65a:	3e01      	subs	r6, #1
 800e65c:	e7e4      	b.n	800e628 <_puts_r+0x68>
 800e65e:	6823      	ldr	r3, [r4, #0]
 800e660:	1c5a      	adds	r2, r3, #1
 800e662:	6022      	str	r2, [r4, #0]
 800e664:	220a      	movs	r2, #10
 800e666:	701a      	strb	r2, [r3, #0]
 800e668:	e7ee      	b.n	800e648 <_puts_r+0x88>
	...

0800e66c <puts>:
 800e66c:	4b02      	ldr	r3, [pc, #8]	@ (800e678 <puts+0xc>)
 800e66e:	4601      	mov	r1, r0
 800e670:	6818      	ldr	r0, [r3, #0]
 800e672:	f7ff bfa5 	b.w	800e5c0 <_puts_r>
 800e676:	bf00      	nop
 800e678:	20000040 	.word	0x20000040

0800e67c <siprintf>:
 800e67c:	b40e      	push	{r1, r2, r3}
 800e67e:	b500      	push	{lr}
 800e680:	b09c      	sub	sp, #112	@ 0x70
 800e682:	ab1d      	add	r3, sp, #116	@ 0x74
 800e684:	9002      	str	r0, [sp, #8]
 800e686:	9006      	str	r0, [sp, #24]
 800e688:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800e68c:	4809      	ldr	r0, [pc, #36]	@ (800e6b4 <siprintf+0x38>)
 800e68e:	9107      	str	r1, [sp, #28]
 800e690:	9104      	str	r1, [sp, #16]
 800e692:	4909      	ldr	r1, [pc, #36]	@ (800e6b8 <siprintf+0x3c>)
 800e694:	f853 2b04 	ldr.w	r2, [r3], #4
 800e698:	9105      	str	r1, [sp, #20]
 800e69a:	6800      	ldr	r0, [r0, #0]
 800e69c:	9301      	str	r3, [sp, #4]
 800e69e:	a902      	add	r1, sp, #8
 800e6a0:	f000 fabc 	bl	800ec1c <_svfiprintf_r>
 800e6a4:	9b02      	ldr	r3, [sp, #8]
 800e6a6:	2200      	movs	r2, #0
 800e6a8:	701a      	strb	r2, [r3, #0]
 800e6aa:	b01c      	add	sp, #112	@ 0x70
 800e6ac:	f85d eb04 	ldr.w	lr, [sp], #4
 800e6b0:	b003      	add	sp, #12
 800e6b2:	4770      	bx	lr
 800e6b4:	20000040 	.word	0x20000040
 800e6b8:	ffff0208 	.word	0xffff0208

0800e6bc <__sread>:
 800e6bc:	b510      	push	{r4, lr}
 800e6be:	460c      	mov	r4, r1
 800e6c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e6c4:	f000 f8fc 	bl	800e8c0 <_read_r>
 800e6c8:	2800      	cmp	r0, #0
 800e6ca:	bfab      	itete	ge
 800e6cc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800e6ce:	89a3      	ldrhlt	r3, [r4, #12]
 800e6d0:	181b      	addge	r3, r3, r0
 800e6d2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800e6d6:	bfac      	ite	ge
 800e6d8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800e6da:	81a3      	strhlt	r3, [r4, #12]
 800e6dc:	bd10      	pop	{r4, pc}

0800e6de <__swrite>:
 800e6de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e6e2:	461f      	mov	r7, r3
 800e6e4:	898b      	ldrh	r3, [r1, #12]
 800e6e6:	05db      	lsls	r3, r3, #23
 800e6e8:	4605      	mov	r5, r0
 800e6ea:	460c      	mov	r4, r1
 800e6ec:	4616      	mov	r6, r2
 800e6ee:	d505      	bpl.n	800e6fc <__swrite+0x1e>
 800e6f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e6f4:	2302      	movs	r3, #2
 800e6f6:	2200      	movs	r2, #0
 800e6f8:	f000 f8d0 	bl	800e89c <_lseek_r>
 800e6fc:	89a3      	ldrh	r3, [r4, #12]
 800e6fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e702:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e706:	81a3      	strh	r3, [r4, #12]
 800e708:	4632      	mov	r2, r6
 800e70a:	463b      	mov	r3, r7
 800e70c:	4628      	mov	r0, r5
 800e70e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e712:	f000 b8e7 	b.w	800e8e4 <_write_r>

0800e716 <__sseek>:
 800e716:	b510      	push	{r4, lr}
 800e718:	460c      	mov	r4, r1
 800e71a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e71e:	f000 f8bd 	bl	800e89c <_lseek_r>
 800e722:	1c43      	adds	r3, r0, #1
 800e724:	89a3      	ldrh	r3, [r4, #12]
 800e726:	bf15      	itete	ne
 800e728:	6560      	strne	r0, [r4, #84]	@ 0x54
 800e72a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800e72e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800e732:	81a3      	strheq	r3, [r4, #12]
 800e734:	bf18      	it	ne
 800e736:	81a3      	strhne	r3, [r4, #12]
 800e738:	bd10      	pop	{r4, pc}

0800e73a <__sclose>:
 800e73a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e73e:	f000 b89d 	b.w	800e87c <_close_r>

0800e742 <__swbuf_r>:
 800e742:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e744:	460e      	mov	r6, r1
 800e746:	4614      	mov	r4, r2
 800e748:	4605      	mov	r5, r0
 800e74a:	b118      	cbz	r0, 800e754 <__swbuf_r+0x12>
 800e74c:	6a03      	ldr	r3, [r0, #32]
 800e74e:	b90b      	cbnz	r3, 800e754 <__swbuf_r+0x12>
 800e750:	f7ff fee6 	bl	800e520 <__sinit>
 800e754:	69a3      	ldr	r3, [r4, #24]
 800e756:	60a3      	str	r3, [r4, #8]
 800e758:	89a3      	ldrh	r3, [r4, #12]
 800e75a:	071a      	lsls	r2, r3, #28
 800e75c:	d501      	bpl.n	800e762 <__swbuf_r+0x20>
 800e75e:	6923      	ldr	r3, [r4, #16]
 800e760:	b943      	cbnz	r3, 800e774 <__swbuf_r+0x32>
 800e762:	4621      	mov	r1, r4
 800e764:	4628      	mov	r0, r5
 800e766:	f000 f82b 	bl	800e7c0 <__swsetup_r>
 800e76a:	b118      	cbz	r0, 800e774 <__swbuf_r+0x32>
 800e76c:	f04f 37ff 	mov.w	r7, #4294967295
 800e770:	4638      	mov	r0, r7
 800e772:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e774:	6823      	ldr	r3, [r4, #0]
 800e776:	6922      	ldr	r2, [r4, #16]
 800e778:	1a98      	subs	r0, r3, r2
 800e77a:	6963      	ldr	r3, [r4, #20]
 800e77c:	b2f6      	uxtb	r6, r6
 800e77e:	4283      	cmp	r3, r0
 800e780:	4637      	mov	r7, r6
 800e782:	dc05      	bgt.n	800e790 <__swbuf_r+0x4e>
 800e784:	4621      	mov	r1, r4
 800e786:	4628      	mov	r0, r5
 800e788:	f000 fe98 	bl	800f4bc <_fflush_r>
 800e78c:	2800      	cmp	r0, #0
 800e78e:	d1ed      	bne.n	800e76c <__swbuf_r+0x2a>
 800e790:	68a3      	ldr	r3, [r4, #8]
 800e792:	3b01      	subs	r3, #1
 800e794:	60a3      	str	r3, [r4, #8]
 800e796:	6823      	ldr	r3, [r4, #0]
 800e798:	1c5a      	adds	r2, r3, #1
 800e79a:	6022      	str	r2, [r4, #0]
 800e79c:	701e      	strb	r6, [r3, #0]
 800e79e:	6962      	ldr	r2, [r4, #20]
 800e7a0:	1c43      	adds	r3, r0, #1
 800e7a2:	429a      	cmp	r2, r3
 800e7a4:	d004      	beq.n	800e7b0 <__swbuf_r+0x6e>
 800e7a6:	89a3      	ldrh	r3, [r4, #12]
 800e7a8:	07db      	lsls	r3, r3, #31
 800e7aa:	d5e1      	bpl.n	800e770 <__swbuf_r+0x2e>
 800e7ac:	2e0a      	cmp	r6, #10
 800e7ae:	d1df      	bne.n	800e770 <__swbuf_r+0x2e>
 800e7b0:	4621      	mov	r1, r4
 800e7b2:	4628      	mov	r0, r5
 800e7b4:	f000 fe82 	bl	800f4bc <_fflush_r>
 800e7b8:	2800      	cmp	r0, #0
 800e7ba:	d0d9      	beq.n	800e770 <__swbuf_r+0x2e>
 800e7bc:	e7d6      	b.n	800e76c <__swbuf_r+0x2a>
	...

0800e7c0 <__swsetup_r>:
 800e7c0:	b538      	push	{r3, r4, r5, lr}
 800e7c2:	4b29      	ldr	r3, [pc, #164]	@ (800e868 <__swsetup_r+0xa8>)
 800e7c4:	4605      	mov	r5, r0
 800e7c6:	6818      	ldr	r0, [r3, #0]
 800e7c8:	460c      	mov	r4, r1
 800e7ca:	b118      	cbz	r0, 800e7d4 <__swsetup_r+0x14>
 800e7cc:	6a03      	ldr	r3, [r0, #32]
 800e7ce:	b90b      	cbnz	r3, 800e7d4 <__swsetup_r+0x14>
 800e7d0:	f7ff fea6 	bl	800e520 <__sinit>
 800e7d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e7d8:	0719      	lsls	r1, r3, #28
 800e7da:	d422      	bmi.n	800e822 <__swsetup_r+0x62>
 800e7dc:	06da      	lsls	r2, r3, #27
 800e7de:	d407      	bmi.n	800e7f0 <__swsetup_r+0x30>
 800e7e0:	2209      	movs	r2, #9
 800e7e2:	602a      	str	r2, [r5, #0]
 800e7e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e7e8:	81a3      	strh	r3, [r4, #12]
 800e7ea:	f04f 30ff 	mov.w	r0, #4294967295
 800e7ee:	e033      	b.n	800e858 <__swsetup_r+0x98>
 800e7f0:	0758      	lsls	r0, r3, #29
 800e7f2:	d512      	bpl.n	800e81a <__swsetup_r+0x5a>
 800e7f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e7f6:	b141      	cbz	r1, 800e80a <__swsetup_r+0x4a>
 800e7f8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e7fc:	4299      	cmp	r1, r3
 800e7fe:	d002      	beq.n	800e806 <__swsetup_r+0x46>
 800e800:	4628      	mov	r0, r5
 800e802:	f000 f8b7 	bl	800e974 <_free_r>
 800e806:	2300      	movs	r3, #0
 800e808:	6363      	str	r3, [r4, #52]	@ 0x34
 800e80a:	89a3      	ldrh	r3, [r4, #12]
 800e80c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e810:	81a3      	strh	r3, [r4, #12]
 800e812:	2300      	movs	r3, #0
 800e814:	6063      	str	r3, [r4, #4]
 800e816:	6923      	ldr	r3, [r4, #16]
 800e818:	6023      	str	r3, [r4, #0]
 800e81a:	89a3      	ldrh	r3, [r4, #12]
 800e81c:	f043 0308 	orr.w	r3, r3, #8
 800e820:	81a3      	strh	r3, [r4, #12]
 800e822:	6923      	ldr	r3, [r4, #16]
 800e824:	b94b      	cbnz	r3, 800e83a <__swsetup_r+0x7a>
 800e826:	89a3      	ldrh	r3, [r4, #12]
 800e828:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e82c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e830:	d003      	beq.n	800e83a <__swsetup_r+0x7a>
 800e832:	4621      	mov	r1, r4
 800e834:	4628      	mov	r0, r5
 800e836:	f000 fe8f 	bl	800f558 <__smakebuf_r>
 800e83a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e83e:	f013 0201 	ands.w	r2, r3, #1
 800e842:	d00a      	beq.n	800e85a <__swsetup_r+0x9a>
 800e844:	2200      	movs	r2, #0
 800e846:	60a2      	str	r2, [r4, #8]
 800e848:	6962      	ldr	r2, [r4, #20]
 800e84a:	4252      	negs	r2, r2
 800e84c:	61a2      	str	r2, [r4, #24]
 800e84e:	6922      	ldr	r2, [r4, #16]
 800e850:	b942      	cbnz	r2, 800e864 <__swsetup_r+0xa4>
 800e852:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e856:	d1c5      	bne.n	800e7e4 <__swsetup_r+0x24>
 800e858:	bd38      	pop	{r3, r4, r5, pc}
 800e85a:	0799      	lsls	r1, r3, #30
 800e85c:	bf58      	it	pl
 800e85e:	6962      	ldrpl	r2, [r4, #20]
 800e860:	60a2      	str	r2, [r4, #8]
 800e862:	e7f4      	b.n	800e84e <__swsetup_r+0x8e>
 800e864:	2000      	movs	r0, #0
 800e866:	e7f7      	b.n	800e858 <__swsetup_r+0x98>
 800e868:	20000040 	.word	0x20000040

0800e86c <memset>:
 800e86c:	4402      	add	r2, r0
 800e86e:	4603      	mov	r3, r0
 800e870:	4293      	cmp	r3, r2
 800e872:	d100      	bne.n	800e876 <memset+0xa>
 800e874:	4770      	bx	lr
 800e876:	f803 1b01 	strb.w	r1, [r3], #1
 800e87a:	e7f9      	b.n	800e870 <memset+0x4>

0800e87c <_close_r>:
 800e87c:	b538      	push	{r3, r4, r5, lr}
 800e87e:	4d06      	ldr	r5, [pc, #24]	@ (800e898 <_close_r+0x1c>)
 800e880:	2300      	movs	r3, #0
 800e882:	4604      	mov	r4, r0
 800e884:	4608      	mov	r0, r1
 800e886:	602b      	str	r3, [r5, #0]
 800e888:	f000 ff58 	bl	800f73c <_close>
 800e88c:	1c43      	adds	r3, r0, #1
 800e88e:	d102      	bne.n	800e896 <_close_r+0x1a>
 800e890:	682b      	ldr	r3, [r5, #0]
 800e892:	b103      	cbz	r3, 800e896 <_close_r+0x1a>
 800e894:	6023      	str	r3, [r4, #0]
 800e896:	bd38      	pop	{r3, r4, r5, pc}
 800e898:	200023b4 	.word	0x200023b4

0800e89c <_lseek_r>:
 800e89c:	b538      	push	{r3, r4, r5, lr}
 800e89e:	4d07      	ldr	r5, [pc, #28]	@ (800e8bc <_lseek_r+0x20>)
 800e8a0:	4604      	mov	r4, r0
 800e8a2:	4608      	mov	r0, r1
 800e8a4:	4611      	mov	r1, r2
 800e8a6:	2200      	movs	r2, #0
 800e8a8:	602a      	str	r2, [r5, #0]
 800e8aa:	461a      	mov	r2, r3
 800e8ac:	f000 ff5e 	bl	800f76c <_lseek>
 800e8b0:	1c43      	adds	r3, r0, #1
 800e8b2:	d102      	bne.n	800e8ba <_lseek_r+0x1e>
 800e8b4:	682b      	ldr	r3, [r5, #0]
 800e8b6:	b103      	cbz	r3, 800e8ba <_lseek_r+0x1e>
 800e8b8:	6023      	str	r3, [r4, #0]
 800e8ba:	bd38      	pop	{r3, r4, r5, pc}
 800e8bc:	200023b4 	.word	0x200023b4

0800e8c0 <_read_r>:
 800e8c0:	b538      	push	{r3, r4, r5, lr}
 800e8c2:	4d07      	ldr	r5, [pc, #28]	@ (800e8e0 <_read_r+0x20>)
 800e8c4:	4604      	mov	r4, r0
 800e8c6:	4608      	mov	r0, r1
 800e8c8:	4611      	mov	r1, r2
 800e8ca:	2200      	movs	r2, #0
 800e8cc:	602a      	str	r2, [r5, #0]
 800e8ce:	461a      	mov	r2, r3
 800e8d0:	f000 ff54 	bl	800f77c <_read>
 800e8d4:	1c43      	adds	r3, r0, #1
 800e8d6:	d102      	bne.n	800e8de <_read_r+0x1e>
 800e8d8:	682b      	ldr	r3, [r5, #0]
 800e8da:	b103      	cbz	r3, 800e8de <_read_r+0x1e>
 800e8dc:	6023      	str	r3, [r4, #0]
 800e8de:	bd38      	pop	{r3, r4, r5, pc}
 800e8e0:	200023b4 	.word	0x200023b4

0800e8e4 <_write_r>:
 800e8e4:	b538      	push	{r3, r4, r5, lr}
 800e8e6:	4d07      	ldr	r5, [pc, #28]	@ (800e904 <_write_r+0x20>)
 800e8e8:	4604      	mov	r4, r0
 800e8ea:	4608      	mov	r0, r1
 800e8ec:	4611      	mov	r1, r2
 800e8ee:	2200      	movs	r2, #0
 800e8f0:	602a      	str	r2, [r5, #0]
 800e8f2:	461a      	mov	r2, r3
 800e8f4:	f7fc ffba 	bl	800b86c <_write>
 800e8f8:	1c43      	adds	r3, r0, #1
 800e8fa:	d102      	bne.n	800e902 <_write_r+0x1e>
 800e8fc:	682b      	ldr	r3, [r5, #0]
 800e8fe:	b103      	cbz	r3, 800e902 <_write_r+0x1e>
 800e900:	6023      	str	r3, [r4, #0]
 800e902:	bd38      	pop	{r3, r4, r5, pc}
 800e904:	200023b4 	.word	0x200023b4

0800e908 <__libc_init_array>:
 800e908:	b570      	push	{r4, r5, r6, lr}
 800e90a:	4d0d      	ldr	r5, [pc, #52]	@ (800e940 <__libc_init_array+0x38>)
 800e90c:	4c0d      	ldr	r4, [pc, #52]	@ (800e944 <__libc_init_array+0x3c>)
 800e90e:	1b64      	subs	r4, r4, r5
 800e910:	10a4      	asrs	r4, r4, #2
 800e912:	2600      	movs	r6, #0
 800e914:	42a6      	cmp	r6, r4
 800e916:	d109      	bne.n	800e92c <__libc_init_array+0x24>
 800e918:	4d0b      	ldr	r5, [pc, #44]	@ (800e948 <__libc_init_array+0x40>)
 800e91a:	4c0c      	ldr	r4, [pc, #48]	@ (800e94c <__libc_init_array+0x44>)
 800e91c:	f000 ff44 	bl	800f7a8 <_init>
 800e920:	1b64      	subs	r4, r4, r5
 800e922:	10a4      	asrs	r4, r4, #2
 800e924:	2600      	movs	r6, #0
 800e926:	42a6      	cmp	r6, r4
 800e928:	d105      	bne.n	800e936 <__libc_init_array+0x2e>
 800e92a:	bd70      	pop	{r4, r5, r6, pc}
 800e92c:	f855 3b04 	ldr.w	r3, [r5], #4
 800e930:	4798      	blx	r3
 800e932:	3601      	adds	r6, #1
 800e934:	e7ee      	b.n	800e914 <__libc_init_array+0xc>
 800e936:	f855 3b04 	ldr.w	r3, [r5], #4
 800e93a:	4798      	blx	r3
 800e93c:	3601      	adds	r6, #1
 800e93e:	e7f2      	b.n	800e926 <__libc_init_array+0x1e>
 800e940:	08010f20 	.word	0x08010f20
 800e944:	08010f20 	.word	0x08010f20
 800e948:	08010f20 	.word	0x08010f20
 800e94c:	08010f24 	.word	0x08010f24

0800e950 <__retarget_lock_init_recursive>:
 800e950:	4770      	bx	lr

0800e952 <__retarget_lock_acquire_recursive>:
 800e952:	4770      	bx	lr

0800e954 <__retarget_lock_release_recursive>:
 800e954:	4770      	bx	lr

0800e956 <memcpy>:
 800e956:	440a      	add	r2, r1
 800e958:	4291      	cmp	r1, r2
 800e95a:	f100 33ff 	add.w	r3, r0, #4294967295
 800e95e:	d100      	bne.n	800e962 <memcpy+0xc>
 800e960:	4770      	bx	lr
 800e962:	b510      	push	{r4, lr}
 800e964:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e968:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e96c:	4291      	cmp	r1, r2
 800e96e:	d1f9      	bne.n	800e964 <memcpy+0xe>
 800e970:	bd10      	pop	{r4, pc}
	...

0800e974 <_free_r>:
 800e974:	b538      	push	{r3, r4, r5, lr}
 800e976:	4605      	mov	r5, r0
 800e978:	2900      	cmp	r1, #0
 800e97a:	d041      	beq.n	800ea00 <_free_r+0x8c>
 800e97c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e980:	1f0c      	subs	r4, r1, #4
 800e982:	2b00      	cmp	r3, #0
 800e984:	bfb8      	it	lt
 800e986:	18e4      	addlt	r4, r4, r3
 800e988:	f000 f8e0 	bl	800eb4c <__malloc_lock>
 800e98c:	4a1d      	ldr	r2, [pc, #116]	@ (800ea04 <_free_r+0x90>)
 800e98e:	6813      	ldr	r3, [r2, #0]
 800e990:	b933      	cbnz	r3, 800e9a0 <_free_r+0x2c>
 800e992:	6063      	str	r3, [r4, #4]
 800e994:	6014      	str	r4, [r2, #0]
 800e996:	4628      	mov	r0, r5
 800e998:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e99c:	f000 b8dc 	b.w	800eb58 <__malloc_unlock>
 800e9a0:	42a3      	cmp	r3, r4
 800e9a2:	d908      	bls.n	800e9b6 <_free_r+0x42>
 800e9a4:	6820      	ldr	r0, [r4, #0]
 800e9a6:	1821      	adds	r1, r4, r0
 800e9a8:	428b      	cmp	r3, r1
 800e9aa:	bf01      	itttt	eq
 800e9ac:	6819      	ldreq	r1, [r3, #0]
 800e9ae:	685b      	ldreq	r3, [r3, #4]
 800e9b0:	1809      	addeq	r1, r1, r0
 800e9b2:	6021      	streq	r1, [r4, #0]
 800e9b4:	e7ed      	b.n	800e992 <_free_r+0x1e>
 800e9b6:	461a      	mov	r2, r3
 800e9b8:	685b      	ldr	r3, [r3, #4]
 800e9ba:	b10b      	cbz	r3, 800e9c0 <_free_r+0x4c>
 800e9bc:	42a3      	cmp	r3, r4
 800e9be:	d9fa      	bls.n	800e9b6 <_free_r+0x42>
 800e9c0:	6811      	ldr	r1, [r2, #0]
 800e9c2:	1850      	adds	r0, r2, r1
 800e9c4:	42a0      	cmp	r0, r4
 800e9c6:	d10b      	bne.n	800e9e0 <_free_r+0x6c>
 800e9c8:	6820      	ldr	r0, [r4, #0]
 800e9ca:	4401      	add	r1, r0
 800e9cc:	1850      	adds	r0, r2, r1
 800e9ce:	4283      	cmp	r3, r0
 800e9d0:	6011      	str	r1, [r2, #0]
 800e9d2:	d1e0      	bne.n	800e996 <_free_r+0x22>
 800e9d4:	6818      	ldr	r0, [r3, #0]
 800e9d6:	685b      	ldr	r3, [r3, #4]
 800e9d8:	6053      	str	r3, [r2, #4]
 800e9da:	4408      	add	r0, r1
 800e9dc:	6010      	str	r0, [r2, #0]
 800e9de:	e7da      	b.n	800e996 <_free_r+0x22>
 800e9e0:	d902      	bls.n	800e9e8 <_free_r+0x74>
 800e9e2:	230c      	movs	r3, #12
 800e9e4:	602b      	str	r3, [r5, #0]
 800e9e6:	e7d6      	b.n	800e996 <_free_r+0x22>
 800e9e8:	6820      	ldr	r0, [r4, #0]
 800e9ea:	1821      	adds	r1, r4, r0
 800e9ec:	428b      	cmp	r3, r1
 800e9ee:	bf04      	itt	eq
 800e9f0:	6819      	ldreq	r1, [r3, #0]
 800e9f2:	685b      	ldreq	r3, [r3, #4]
 800e9f4:	6063      	str	r3, [r4, #4]
 800e9f6:	bf04      	itt	eq
 800e9f8:	1809      	addeq	r1, r1, r0
 800e9fa:	6021      	streq	r1, [r4, #0]
 800e9fc:	6054      	str	r4, [r2, #4]
 800e9fe:	e7ca      	b.n	800e996 <_free_r+0x22>
 800ea00:	bd38      	pop	{r3, r4, r5, pc}
 800ea02:	bf00      	nop
 800ea04:	200023c0 	.word	0x200023c0

0800ea08 <sbrk_aligned>:
 800ea08:	b570      	push	{r4, r5, r6, lr}
 800ea0a:	4e0f      	ldr	r6, [pc, #60]	@ (800ea48 <sbrk_aligned+0x40>)
 800ea0c:	460c      	mov	r4, r1
 800ea0e:	6831      	ldr	r1, [r6, #0]
 800ea10:	4605      	mov	r5, r0
 800ea12:	b911      	cbnz	r1, 800ea1a <sbrk_aligned+0x12>
 800ea14:	f000 fe4c 	bl	800f6b0 <_sbrk_r>
 800ea18:	6030      	str	r0, [r6, #0]
 800ea1a:	4621      	mov	r1, r4
 800ea1c:	4628      	mov	r0, r5
 800ea1e:	f000 fe47 	bl	800f6b0 <_sbrk_r>
 800ea22:	1c43      	adds	r3, r0, #1
 800ea24:	d103      	bne.n	800ea2e <sbrk_aligned+0x26>
 800ea26:	f04f 34ff 	mov.w	r4, #4294967295
 800ea2a:	4620      	mov	r0, r4
 800ea2c:	bd70      	pop	{r4, r5, r6, pc}
 800ea2e:	1cc4      	adds	r4, r0, #3
 800ea30:	f024 0403 	bic.w	r4, r4, #3
 800ea34:	42a0      	cmp	r0, r4
 800ea36:	d0f8      	beq.n	800ea2a <sbrk_aligned+0x22>
 800ea38:	1a21      	subs	r1, r4, r0
 800ea3a:	4628      	mov	r0, r5
 800ea3c:	f000 fe38 	bl	800f6b0 <_sbrk_r>
 800ea40:	3001      	adds	r0, #1
 800ea42:	d1f2      	bne.n	800ea2a <sbrk_aligned+0x22>
 800ea44:	e7ef      	b.n	800ea26 <sbrk_aligned+0x1e>
 800ea46:	bf00      	nop
 800ea48:	200023bc 	.word	0x200023bc

0800ea4c <_malloc_r>:
 800ea4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ea50:	1ccd      	adds	r5, r1, #3
 800ea52:	f025 0503 	bic.w	r5, r5, #3
 800ea56:	3508      	adds	r5, #8
 800ea58:	2d0c      	cmp	r5, #12
 800ea5a:	bf38      	it	cc
 800ea5c:	250c      	movcc	r5, #12
 800ea5e:	2d00      	cmp	r5, #0
 800ea60:	4606      	mov	r6, r0
 800ea62:	db01      	blt.n	800ea68 <_malloc_r+0x1c>
 800ea64:	42a9      	cmp	r1, r5
 800ea66:	d904      	bls.n	800ea72 <_malloc_r+0x26>
 800ea68:	230c      	movs	r3, #12
 800ea6a:	6033      	str	r3, [r6, #0]
 800ea6c:	2000      	movs	r0, #0
 800ea6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ea72:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800eb48 <_malloc_r+0xfc>
 800ea76:	f000 f869 	bl	800eb4c <__malloc_lock>
 800ea7a:	f8d8 3000 	ldr.w	r3, [r8]
 800ea7e:	461c      	mov	r4, r3
 800ea80:	bb44      	cbnz	r4, 800ead4 <_malloc_r+0x88>
 800ea82:	4629      	mov	r1, r5
 800ea84:	4630      	mov	r0, r6
 800ea86:	f7ff ffbf 	bl	800ea08 <sbrk_aligned>
 800ea8a:	1c43      	adds	r3, r0, #1
 800ea8c:	4604      	mov	r4, r0
 800ea8e:	d158      	bne.n	800eb42 <_malloc_r+0xf6>
 800ea90:	f8d8 4000 	ldr.w	r4, [r8]
 800ea94:	4627      	mov	r7, r4
 800ea96:	2f00      	cmp	r7, #0
 800ea98:	d143      	bne.n	800eb22 <_malloc_r+0xd6>
 800ea9a:	2c00      	cmp	r4, #0
 800ea9c:	d04b      	beq.n	800eb36 <_malloc_r+0xea>
 800ea9e:	6823      	ldr	r3, [r4, #0]
 800eaa0:	4639      	mov	r1, r7
 800eaa2:	4630      	mov	r0, r6
 800eaa4:	eb04 0903 	add.w	r9, r4, r3
 800eaa8:	f000 fe02 	bl	800f6b0 <_sbrk_r>
 800eaac:	4581      	cmp	r9, r0
 800eaae:	d142      	bne.n	800eb36 <_malloc_r+0xea>
 800eab0:	6821      	ldr	r1, [r4, #0]
 800eab2:	1a6d      	subs	r5, r5, r1
 800eab4:	4629      	mov	r1, r5
 800eab6:	4630      	mov	r0, r6
 800eab8:	f7ff ffa6 	bl	800ea08 <sbrk_aligned>
 800eabc:	3001      	adds	r0, #1
 800eabe:	d03a      	beq.n	800eb36 <_malloc_r+0xea>
 800eac0:	6823      	ldr	r3, [r4, #0]
 800eac2:	442b      	add	r3, r5
 800eac4:	6023      	str	r3, [r4, #0]
 800eac6:	f8d8 3000 	ldr.w	r3, [r8]
 800eaca:	685a      	ldr	r2, [r3, #4]
 800eacc:	bb62      	cbnz	r2, 800eb28 <_malloc_r+0xdc>
 800eace:	f8c8 7000 	str.w	r7, [r8]
 800ead2:	e00f      	b.n	800eaf4 <_malloc_r+0xa8>
 800ead4:	6822      	ldr	r2, [r4, #0]
 800ead6:	1b52      	subs	r2, r2, r5
 800ead8:	d420      	bmi.n	800eb1c <_malloc_r+0xd0>
 800eada:	2a0b      	cmp	r2, #11
 800eadc:	d917      	bls.n	800eb0e <_malloc_r+0xc2>
 800eade:	1961      	adds	r1, r4, r5
 800eae0:	42a3      	cmp	r3, r4
 800eae2:	6025      	str	r5, [r4, #0]
 800eae4:	bf18      	it	ne
 800eae6:	6059      	strne	r1, [r3, #4]
 800eae8:	6863      	ldr	r3, [r4, #4]
 800eaea:	bf08      	it	eq
 800eaec:	f8c8 1000 	streq.w	r1, [r8]
 800eaf0:	5162      	str	r2, [r4, r5]
 800eaf2:	604b      	str	r3, [r1, #4]
 800eaf4:	4630      	mov	r0, r6
 800eaf6:	f000 f82f 	bl	800eb58 <__malloc_unlock>
 800eafa:	f104 000b 	add.w	r0, r4, #11
 800eafe:	1d23      	adds	r3, r4, #4
 800eb00:	f020 0007 	bic.w	r0, r0, #7
 800eb04:	1ac2      	subs	r2, r0, r3
 800eb06:	bf1c      	itt	ne
 800eb08:	1a1b      	subne	r3, r3, r0
 800eb0a:	50a3      	strne	r3, [r4, r2]
 800eb0c:	e7af      	b.n	800ea6e <_malloc_r+0x22>
 800eb0e:	6862      	ldr	r2, [r4, #4]
 800eb10:	42a3      	cmp	r3, r4
 800eb12:	bf0c      	ite	eq
 800eb14:	f8c8 2000 	streq.w	r2, [r8]
 800eb18:	605a      	strne	r2, [r3, #4]
 800eb1a:	e7eb      	b.n	800eaf4 <_malloc_r+0xa8>
 800eb1c:	4623      	mov	r3, r4
 800eb1e:	6864      	ldr	r4, [r4, #4]
 800eb20:	e7ae      	b.n	800ea80 <_malloc_r+0x34>
 800eb22:	463c      	mov	r4, r7
 800eb24:	687f      	ldr	r7, [r7, #4]
 800eb26:	e7b6      	b.n	800ea96 <_malloc_r+0x4a>
 800eb28:	461a      	mov	r2, r3
 800eb2a:	685b      	ldr	r3, [r3, #4]
 800eb2c:	42a3      	cmp	r3, r4
 800eb2e:	d1fb      	bne.n	800eb28 <_malloc_r+0xdc>
 800eb30:	2300      	movs	r3, #0
 800eb32:	6053      	str	r3, [r2, #4]
 800eb34:	e7de      	b.n	800eaf4 <_malloc_r+0xa8>
 800eb36:	230c      	movs	r3, #12
 800eb38:	6033      	str	r3, [r6, #0]
 800eb3a:	4630      	mov	r0, r6
 800eb3c:	f000 f80c 	bl	800eb58 <__malloc_unlock>
 800eb40:	e794      	b.n	800ea6c <_malloc_r+0x20>
 800eb42:	6005      	str	r5, [r0, #0]
 800eb44:	e7d6      	b.n	800eaf4 <_malloc_r+0xa8>
 800eb46:	bf00      	nop
 800eb48:	200023c0 	.word	0x200023c0

0800eb4c <__malloc_lock>:
 800eb4c:	4801      	ldr	r0, [pc, #4]	@ (800eb54 <__malloc_lock+0x8>)
 800eb4e:	f7ff bf00 	b.w	800e952 <__retarget_lock_acquire_recursive>
 800eb52:	bf00      	nop
 800eb54:	200023b8 	.word	0x200023b8

0800eb58 <__malloc_unlock>:
 800eb58:	4801      	ldr	r0, [pc, #4]	@ (800eb60 <__malloc_unlock+0x8>)
 800eb5a:	f7ff befb 	b.w	800e954 <__retarget_lock_release_recursive>
 800eb5e:	bf00      	nop
 800eb60:	200023b8 	.word	0x200023b8

0800eb64 <__ssputs_r>:
 800eb64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eb68:	688e      	ldr	r6, [r1, #8]
 800eb6a:	461f      	mov	r7, r3
 800eb6c:	42be      	cmp	r6, r7
 800eb6e:	680b      	ldr	r3, [r1, #0]
 800eb70:	4682      	mov	sl, r0
 800eb72:	460c      	mov	r4, r1
 800eb74:	4690      	mov	r8, r2
 800eb76:	d82d      	bhi.n	800ebd4 <__ssputs_r+0x70>
 800eb78:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800eb7c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800eb80:	d026      	beq.n	800ebd0 <__ssputs_r+0x6c>
 800eb82:	6965      	ldr	r5, [r4, #20]
 800eb84:	6909      	ldr	r1, [r1, #16]
 800eb86:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800eb8a:	eba3 0901 	sub.w	r9, r3, r1
 800eb8e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800eb92:	1c7b      	adds	r3, r7, #1
 800eb94:	444b      	add	r3, r9
 800eb96:	106d      	asrs	r5, r5, #1
 800eb98:	429d      	cmp	r5, r3
 800eb9a:	bf38      	it	cc
 800eb9c:	461d      	movcc	r5, r3
 800eb9e:	0553      	lsls	r3, r2, #21
 800eba0:	d527      	bpl.n	800ebf2 <__ssputs_r+0x8e>
 800eba2:	4629      	mov	r1, r5
 800eba4:	f7ff ff52 	bl	800ea4c <_malloc_r>
 800eba8:	4606      	mov	r6, r0
 800ebaa:	b360      	cbz	r0, 800ec06 <__ssputs_r+0xa2>
 800ebac:	6921      	ldr	r1, [r4, #16]
 800ebae:	464a      	mov	r2, r9
 800ebb0:	f7ff fed1 	bl	800e956 <memcpy>
 800ebb4:	89a3      	ldrh	r3, [r4, #12]
 800ebb6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ebba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ebbe:	81a3      	strh	r3, [r4, #12]
 800ebc0:	6126      	str	r6, [r4, #16]
 800ebc2:	6165      	str	r5, [r4, #20]
 800ebc4:	444e      	add	r6, r9
 800ebc6:	eba5 0509 	sub.w	r5, r5, r9
 800ebca:	6026      	str	r6, [r4, #0]
 800ebcc:	60a5      	str	r5, [r4, #8]
 800ebce:	463e      	mov	r6, r7
 800ebd0:	42be      	cmp	r6, r7
 800ebd2:	d900      	bls.n	800ebd6 <__ssputs_r+0x72>
 800ebd4:	463e      	mov	r6, r7
 800ebd6:	6820      	ldr	r0, [r4, #0]
 800ebd8:	4632      	mov	r2, r6
 800ebda:	4641      	mov	r1, r8
 800ebdc:	f000 fd2c 	bl	800f638 <memmove>
 800ebe0:	68a3      	ldr	r3, [r4, #8]
 800ebe2:	1b9b      	subs	r3, r3, r6
 800ebe4:	60a3      	str	r3, [r4, #8]
 800ebe6:	6823      	ldr	r3, [r4, #0]
 800ebe8:	4433      	add	r3, r6
 800ebea:	6023      	str	r3, [r4, #0]
 800ebec:	2000      	movs	r0, #0
 800ebee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ebf2:	462a      	mov	r2, r5
 800ebf4:	f000 fd6c 	bl	800f6d0 <_realloc_r>
 800ebf8:	4606      	mov	r6, r0
 800ebfa:	2800      	cmp	r0, #0
 800ebfc:	d1e0      	bne.n	800ebc0 <__ssputs_r+0x5c>
 800ebfe:	6921      	ldr	r1, [r4, #16]
 800ec00:	4650      	mov	r0, sl
 800ec02:	f7ff feb7 	bl	800e974 <_free_r>
 800ec06:	230c      	movs	r3, #12
 800ec08:	f8ca 3000 	str.w	r3, [sl]
 800ec0c:	89a3      	ldrh	r3, [r4, #12]
 800ec0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ec12:	81a3      	strh	r3, [r4, #12]
 800ec14:	f04f 30ff 	mov.w	r0, #4294967295
 800ec18:	e7e9      	b.n	800ebee <__ssputs_r+0x8a>
	...

0800ec1c <_svfiprintf_r>:
 800ec1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec20:	4698      	mov	r8, r3
 800ec22:	898b      	ldrh	r3, [r1, #12]
 800ec24:	061b      	lsls	r3, r3, #24
 800ec26:	b09d      	sub	sp, #116	@ 0x74
 800ec28:	4607      	mov	r7, r0
 800ec2a:	460d      	mov	r5, r1
 800ec2c:	4614      	mov	r4, r2
 800ec2e:	d510      	bpl.n	800ec52 <_svfiprintf_r+0x36>
 800ec30:	690b      	ldr	r3, [r1, #16]
 800ec32:	b973      	cbnz	r3, 800ec52 <_svfiprintf_r+0x36>
 800ec34:	2140      	movs	r1, #64	@ 0x40
 800ec36:	f7ff ff09 	bl	800ea4c <_malloc_r>
 800ec3a:	6028      	str	r0, [r5, #0]
 800ec3c:	6128      	str	r0, [r5, #16]
 800ec3e:	b930      	cbnz	r0, 800ec4e <_svfiprintf_r+0x32>
 800ec40:	230c      	movs	r3, #12
 800ec42:	603b      	str	r3, [r7, #0]
 800ec44:	f04f 30ff 	mov.w	r0, #4294967295
 800ec48:	b01d      	add	sp, #116	@ 0x74
 800ec4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec4e:	2340      	movs	r3, #64	@ 0x40
 800ec50:	616b      	str	r3, [r5, #20]
 800ec52:	2300      	movs	r3, #0
 800ec54:	9309      	str	r3, [sp, #36]	@ 0x24
 800ec56:	2320      	movs	r3, #32
 800ec58:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ec5c:	f8cd 800c 	str.w	r8, [sp, #12]
 800ec60:	2330      	movs	r3, #48	@ 0x30
 800ec62:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800ee00 <_svfiprintf_r+0x1e4>
 800ec66:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ec6a:	f04f 0901 	mov.w	r9, #1
 800ec6e:	4623      	mov	r3, r4
 800ec70:	469a      	mov	sl, r3
 800ec72:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ec76:	b10a      	cbz	r2, 800ec7c <_svfiprintf_r+0x60>
 800ec78:	2a25      	cmp	r2, #37	@ 0x25
 800ec7a:	d1f9      	bne.n	800ec70 <_svfiprintf_r+0x54>
 800ec7c:	ebba 0b04 	subs.w	fp, sl, r4
 800ec80:	d00b      	beq.n	800ec9a <_svfiprintf_r+0x7e>
 800ec82:	465b      	mov	r3, fp
 800ec84:	4622      	mov	r2, r4
 800ec86:	4629      	mov	r1, r5
 800ec88:	4638      	mov	r0, r7
 800ec8a:	f7ff ff6b 	bl	800eb64 <__ssputs_r>
 800ec8e:	3001      	adds	r0, #1
 800ec90:	f000 80a7 	beq.w	800ede2 <_svfiprintf_r+0x1c6>
 800ec94:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ec96:	445a      	add	r2, fp
 800ec98:	9209      	str	r2, [sp, #36]	@ 0x24
 800ec9a:	f89a 3000 	ldrb.w	r3, [sl]
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	f000 809f 	beq.w	800ede2 <_svfiprintf_r+0x1c6>
 800eca4:	2300      	movs	r3, #0
 800eca6:	f04f 32ff 	mov.w	r2, #4294967295
 800ecaa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ecae:	f10a 0a01 	add.w	sl, sl, #1
 800ecb2:	9304      	str	r3, [sp, #16]
 800ecb4:	9307      	str	r3, [sp, #28]
 800ecb6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ecba:	931a      	str	r3, [sp, #104]	@ 0x68
 800ecbc:	4654      	mov	r4, sl
 800ecbe:	2205      	movs	r2, #5
 800ecc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ecc4:	484e      	ldr	r0, [pc, #312]	@ (800ee00 <_svfiprintf_r+0x1e4>)
 800ecc6:	f7f1 fa63 	bl	8000190 <memchr>
 800ecca:	9a04      	ldr	r2, [sp, #16]
 800eccc:	b9d8      	cbnz	r0, 800ed06 <_svfiprintf_r+0xea>
 800ecce:	06d0      	lsls	r0, r2, #27
 800ecd0:	bf44      	itt	mi
 800ecd2:	2320      	movmi	r3, #32
 800ecd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ecd8:	0711      	lsls	r1, r2, #28
 800ecda:	bf44      	itt	mi
 800ecdc:	232b      	movmi	r3, #43	@ 0x2b
 800ecde:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ece2:	f89a 3000 	ldrb.w	r3, [sl]
 800ece6:	2b2a      	cmp	r3, #42	@ 0x2a
 800ece8:	d015      	beq.n	800ed16 <_svfiprintf_r+0xfa>
 800ecea:	9a07      	ldr	r2, [sp, #28]
 800ecec:	4654      	mov	r4, sl
 800ecee:	2000      	movs	r0, #0
 800ecf0:	f04f 0c0a 	mov.w	ip, #10
 800ecf4:	4621      	mov	r1, r4
 800ecf6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ecfa:	3b30      	subs	r3, #48	@ 0x30
 800ecfc:	2b09      	cmp	r3, #9
 800ecfe:	d94b      	bls.n	800ed98 <_svfiprintf_r+0x17c>
 800ed00:	b1b0      	cbz	r0, 800ed30 <_svfiprintf_r+0x114>
 800ed02:	9207      	str	r2, [sp, #28]
 800ed04:	e014      	b.n	800ed30 <_svfiprintf_r+0x114>
 800ed06:	eba0 0308 	sub.w	r3, r0, r8
 800ed0a:	fa09 f303 	lsl.w	r3, r9, r3
 800ed0e:	4313      	orrs	r3, r2
 800ed10:	9304      	str	r3, [sp, #16]
 800ed12:	46a2      	mov	sl, r4
 800ed14:	e7d2      	b.n	800ecbc <_svfiprintf_r+0xa0>
 800ed16:	9b03      	ldr	r3, [sp, #12]
 800ed18:	1d19      	adds	r1, r3, #4
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	9103      	str	r1, [sp, #12]
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	bfbb      	ittet	lt
 800ed22:	425b      	neglt	r3, r3
 800ed24:	f042 0202 	orrlt.w	r2, r2, #2
 800ed28:	9307      	strge	r3, [sp, #28]
 800ed2a:	9307      	strlt	r3, [sp, #28]
 800ed2c:	bfb8      	it	lt
 800ed2e:	9204      	strlt	r2, [sp, #16]
 800ed30:	7823      	ldrb	r3, [r4, #0]
 800ed32:	2b2e      	cmp	r3, #46	@ 0x2e
 800ed34:	d10a      	bne.n	800ed4c <_svfiprintf_r+0x130>
 800ed36:	7863      	ldrb	r3, [r4, #1]
 800ed38:	2b2a      	cmp	r3, #42	@ 0x2a
 800ed3a:	d132      	bne.n	800eda2 <_svfiprintf_r+0x186>
 800ed3c:	9b03      	ldr	r3, [sp, #12]
 800ed3e:	1d1a      	adds	r2, r3, #4
 800ed40:	681b      	ldr	r3, [r3, #0]
 800ed42:	9203      	str	r2, [sp, #12]
 800ed44:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ed48:	3402      	adds	r4, #2
 800ed4a:	9305      	str	r3, [sp, #20]
 800ed4c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ee10 <_svfiprintf_r+0x1f4>
 800ed50:	7821      	ldrb	r1, [r4, #0]
 800ed52:	2203      	movs	r2, #3
 800ed54:	4650      	mov	r0, sl
 800ed56:	f7f1 fa1b 	bl	8000190 <memchr>
 800ed5a:	b138      	cbz	r0, 800ed6c <_svfiprintf_r+0x150>
 800ed5c:	9b04      	ldr	r3, [sp, #16]
 800ed5e:	eba0 000a 	sub.w	r0, r0, sl
 800ed62:	2240      	movs	r2, #64	@ 0x40
 800ed64:	4082      	lsls	r2, r0
 800ed66:	4313      	orrs	r3, r2
 800ed68:	3401      	adds	r4, #1
 800ed6a:	9304      	str	r3, [sp, #16]
 800ed6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ed70:	4824      	ldr	r0, [pc, #144]	@ (800ee04 <_svfiprintf_r+0x1e8>)
 800ed72:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ed76:	2206      	movs	r2, #6
 800ed78:	f7f1 fa0a 	bl	8000190 <memchr>
 800ed7c:	2800      	cmp	r0, #0
 800ed7e:	d036      	beq.n	800edee <_svfiprintf_r+0x1d2>
 800ed80:	4b21      	ldr	r3, [pc, #132]	@ (800ee08 <_svfiprintf_r+0x1ec>)
 800ed82:	bb1b      	cbnz	r3, 800edcc <_svfiprintf_r+0x1b0>
 800ed84:	9b03      	ldr	r3, [sp, #12]
 800ed86:	3307      	adds	r3, #7
 800ed88:	f023 0307 	bic.w	r3, r3, #7
 800ed8c:	3308      	adds	r3, #8
 800ed8e:	9303      	str	r3, [sp, #12]
 800ed90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ed92:	4433      	add	r3, r6
 800ed94:	9309      	str	r3, [sp, #36]	@ 0x24
 800ed96:	e76a      	b.n	800ec6e <_svfiprintf_r+0x52>
 800ed98:	fb0c 3202 	mla	r2, ip, r2, r3
 800ed9c:	460c      	mov	r4, r1
 800ed9e:	2001      	movs	r0, #1
 800eda0:	e7a8      	b.n	800ecf4 <_svfiprintf_r+0xd8>
 800eda2:	2300      	movs	r3, #0
 800eda4:	3401      	adds	r4, #1
 800eda6:	9305      	str	r3, [sp, #20]
 800eda8:	4619      	mov	r1, r3
 800edaa:	f04f 0c0a 	mov.w	ip, #10
 800edae:	4620      	mov	r0, r4
 800edb0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800edb4:	3a30      	subs	r2, #48	@ 0x30
 800edb6:	2a09      	cmp	r2, #9
 800edb8:	d903      	bls.n	800edc2 <_svfiprintf_r+0x1a6>
 800edba:	2b00      	cmp	r3, #0
 800edbc:	d0c6      	beq.n	800ed4c <_svfiprintf_r+0x130>
 800edbe:	9105      	str	r1, [sp, #20]
 800edc0:	e7c4      	b.n	800ed4c <_svfiprintf_r+0x130>
 800edc2:	fb0c 2101 	mla	r1, ip, r1, r2
 800edc6:	4604      	mov	r4, r0
 800edc8:	2301      	movs	r3, #1
 800edca:	e7f0      	b.n	800edae <_svfiprintf_r+0x192>
 800edcc:	ab03      	add	r3, sp, #12
 800edce:	9300      	str	r3, [sp, #0]
 800edd0:	462a      	mov	r2, r5
 800edd2:	4b0e      	ldr	r3, [pc, #56]	@ (800ee0c <_svfiprintf_r+0x1f0>)
 800edd4:	a904      	add	r1, sp, #16
 800edd6:	4638      	mov	r0, r7
 800edd8:	f3af 8000 	nop.w
 800eddc:	1c42      	adds	r2, r0, #1
 800edde:	4606      	mov	r6, r0
 800ede0:	d1d6      	bne.n	800ed90 <_svfiprintf_r+0x174>
 800ede2:	89ab      	ldrh	r3, [r5, #12]
 800ede4:	065b      	lsls	r3, r3, #25
 800ede6:	f53f af2d 	bmi.w	800ec44 <_svfiprintf_r+0x28>
 800edea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800edec:	e72c      	b.n	800ec48 <_svfiprintf_r+0x2c>
 800edee:	ab03      	add	r3, sp, #12
 800edf0:	9300      	str	r3, [sp, #0]
 800edf2:	462a      	mov	r2, r5
 800edf4:	4b05      	ldr	r3, [pc, #20]	@ (800ee0c <_svfiprintf_r+0x1f0>)
 800edf6:	a904      	add	r1, sp, #16
 800edf8:	4638      	mov	r0, r7
 800edfa:	f000 f9bb 	bl	800f174 <_printf_i>
 800edfe:	e7ed      	b.n	800eddc <_svfiprintf_r+0x1c0>
 800ee00:	08010ee2 	.word	0x08010ee2
 800ee04:	08010eec 	.word	0x08010eec
 800ee08:	00000000 	.word	0x00000000
 800ee0c:	0800eb65 	.word	0x0800eb65
 800ee10:	08010ee8 	.word	0x08010ee8

0800ee14 <__sfputc_r>:
 800ee14:	6893      	ldr	r3, [r2, #8]
 800ee16:	3b01      	subs	r3, #1
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	b410      	push	{r4}
 800ee1c:	6093      	str	r3, [r2, #8]
 800ee1e:	da08      	bge.n	800ee32 <__sfputc_r+0x1e>
 800ee20:	6994      	ldr	r4, [r2, #24]
 800ee22:	42a3      	cmp	r3, r4
 800ee24:	db01      	blt.n	800ee2a <__sfputc_r+0x16>
 800ee26:	290a      	cmp	r1, #10
 800ee28:	d103      	bne.n	800ee32 <__sfputc_r+0x1e>
 800ee2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ee2e:	f7ff bc88 	b.w	800e742 <__swbuf_r>
 800ee32:	6813      	ldr	r3, [r2, #0]
 800ee34:	1c58      	adds	r0, r3, #1
 800ee36:	6010      	str	r0, [r2, #0]
 800ee38:	7019      	strb	r1, [r3, #0]
 800ee3a:	4608      	mov	r0, r1
 800ee3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ee40:	4770      	bx	lr

0800ee42 <__sfputs_r>:
 800ee42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee44:	4606      	mov	r6, r0
 800ee46:	460f      	mov	r7, r1
 800ee48:	4614      	mov	r4, r2
 800ee4a:	18d5      	adds	r5, r2, r3
 800ee4c:	42ac      	cmp	r4, r5
 800ee4e:	d101      	bne.n	800ee54 <__sfputs_r+0x12>
 800ee50:	2000      	movs	r0, #0
 800ee52:	e007      	b.n	800ee64 <__sfputs_r+0x22>
 800ee54:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ee58:	463a      	mov	r2, r7
 800ee5a:	4630      	mov	r0, r6
 800ee5c:	f7ff ffda 	bl	800ee14 <__sfputc_r>
 800ee60:	1c43      	adds	r3, r0, #1
 800ee62:	d1f3      	bne.n	800ee4c <__sfputs_r+0xa>
 800ee64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ee68 <_vfiprintf_r>:
 800ee68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee6c:	460d      	mov	r5, r1
 800ee6e:	b09d      	sub	sp, #116	@ 0x74
 800ee70:	4614      	mov	r4, r2
 800ee72:	4698      	mov	r8, r3
 800ee74:	4606      	mov	r6, r0
 800ee76:	b118      	cbz	r0, 800ee80 <_vfiprintf_r+0x18>
 800ee78:	6a03      	ldr	r3, [r0, #32]
 800ee7a:	b90b      	cbnz	r3, 800ee80 <_vfiprintf_r+0x18>
 800ee7c:	f7ff fb50 	bl	800e520 <__sinit>
 800ee80:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ee82:	07d9      	lsls	r1, r3, #31
 800ee84:	d405      	bmi.n	800ee92 <_vfiprintf_r+0x2a>
 800ee86:	89ab      	ldrh	r3, [r5, #12]
 800ee88:	059a      	lsls	r2, r3, #22
 800ee8a:	d402      	bmi.n	800ee92 <_vfiprintf_r+0x2a>
 800ee8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ee8e:	f7ff fd60 	bl	800e952 <__retarget_lock_acquire_recursive>
 800ee92:	89ab      	ldrh	r3, [r5, #12]
 800ee94:	071b      	lsls	r3, r3, #28
 800ee96:	d501      	bpl.n	800ee9c <_vfiprintf_r+0x34>
 800ee98:	692b      	ldr	r3, [r5, #16]
 800ee9a:	b99b      	cbnz	r3, 800eec4 <_vfiprintf_r+0x5c>
 800ee9c:	4629      	mov	r1, r5
 800ee9e:	4630      	mov	r0, r6
 800eea0:	f7ff fc8e 	bl	800e7c0 <__swsetup_r>
 800eea4:	b170      	cbz	r0, 800eec4 <_vfiprintf_r+0x5c>
 800eea6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800eea8:	07dc      	lsls	r4, r3, #31
 800eeaa:	d504      	bpl.n	800eeb6 <_vfiprintf_r+0x4e>
 800eeac:	f04f 30ff 	mov.w	r0, #4294967295
 800eeb0:	b01d      	add	sp, #116	@ 0x74
 800eeb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eeb6:	89ab      	ldrh	r3, [r5, #12]
 800eeb8:	0598      	lsls	r0, r3, #22
 800eeba:	d4f7      	bmi.n	800eeac <_vfiprintf_r+0x44>
 800eebc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800eebe:	f7ff fd49 	bl	800e954 <__retarget_lock_release_recursive>
 800eec2:	e7f3      	b.n	800eeac <_vfiprintf_r+0x44>
 800eec4:	2300      	movs	r3, #0
 800eec6:	9309      	str	r3, [sp, #36]	@ 0x24
 800eec8:	2320      	movs	r3, #32
 800eeca:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800eece:	f8cd 800c 	str.w	r8, [sp, #12]
 800eed2:	2330      	movs	r3, #48	@ 0x30
 800eed4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f084 <_vfiprintf_r+0x21c>
 800eed8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800eedc:	f04f 0901 	mov.w	r9, #1
 800eee0:	4623      	mov	r3, r4
 800eee2:	469a      	mov	sl, r3
 800eee4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eee8:	b10a      	cbz	r2, 800eeee <_vfiprintf_r+0x86>
 800eeea:	2a25      	cmp	r2, #37	@ 0x25
 800eeec:	d1f9      	bne.n	800eee2 <_vfiprintf_r+0x7a>
 800eeee:	ebba 0b04 	subs.w	fp, sl, r4
 800eef2:	d00b      	beq.n	800ef0c <_vfiprintf_r+0xa4>
 800eef4:	465b      	mov	r3, fp
 800eef6:	4622      	mov	r2, r4
 800eef8:	4629      	mov	r1, r5
 800eefa:	4630      	mov	r0, r6
 800eefc:	f7ff ffa1 	bl	800ee42 <__sfputs_r>
 800ef00:	3001      	adds	r0, #1
 800ef02:	f000 80a7 	beq.w	800f054 <_vfiprintf_r+0x1ec>
 800ef06:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ef08:	445a      	add	r2, fp
 800ef0a:	9209      	str	r2, [sp, #36]	@ 0x24
 800ef0c:	f89a 3000 	ldrb.w	r3, [sl]
 800ef10:	2b00      	cmp	r3, #0
 800ef12:	f000 809f 	beq.w	800f054 <_vfiprintf_r+0x1ec>
 800ef16:	2300      	movs	r3, #0
 800ef18:	f04f 32ff 	mov.w	r2, #4294967295
 800ef1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ef20:	f10a 0a01 	add.w	sl, sl, #1
 800ef24:	9304      	str	r3, [sp, #16]
 800ef26:	9307      	str	r3, [sp, #28]
 800ef28:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ef2c:	931a      	str	r3, [sp, #104]	@ 0x68
 800ef2e:	4654      	mov	r4, sl
 800ef30:	2205      	movs	r2, #5
 800ef32:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ef36:	4853      	ldr	r0, [pc, #332]	@ (800f084 <_vfiprintf_r+0x21c>)
 800ef38:	f7f1 f92a 	bl	8000190 <memchr>
 800ef3c:	9a04      	ldr	r2, [sp, #16]
 800ef3e:	b9d8      	cbnz	r0, 800ef78 <_vfiprintf_r+0x110>
 800ef40:	06d1      	lsls	r1, r2, #27
 800ef42:	bf44      	itt	mi
 800ef44:	2320      	movmi	r3, #32
 800ef46:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ef4a:	0713      	lsls	r3, r2, #28
 800ef4c:	bf44      	itt	mi
 800ef4e:	232b      	movmi	r3, #43	@ 0x2b
 800ef50:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ef54:	f89a 3000 	ldrb.w	r3, [sl]
 800ef58:	2b2a      	cmp	r3, #42	@ 0x2a
 800ef5a:	d015      	beq.n	800ef88 <_vfiprintf_r+0x120>
 800ef5c:	9a07      	ldr	r2, [sp, #28]
 800ef5e:	4654      	mov	r4, sl
 800ef60:	2000      	movs	r0, #0
 800ef62:	f04f 0c0a 	mov.w	ip, #10
 800ef66:	4621      	mov	r1, r4
 800ef68:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ef6c:	3b30      	subs	r3, #48	@ 0x30
 800ef6e:	2b09      	cmp	r3, #9
 800ef70:	d94b      	bls.n	800f00a <_vfiprintf_r+0x1a2>
 800ef72:	b1b0      	cbz	r0, 800efa2 <_vfiprintf_r+0x13a>
 800ef74:	9207      	str	r2, [sp, #28]
 800ef76:	e014      	b.n	800efa2 <_vfiprintf_r+0x13a>
 800ef78:	eba0 0308 	sub.w	r3, r0, r8
 800ef7c:	fa09 f303 	lsl.w	r3, r9, r3
 800ef80:	4313      	orrs	r3, r2
 800ef82:	9304      	str	r3, [sp, #16]
 800ef84:	46a2      	mov	sl, r4
 800ef86:	e7d2      	b.n	800ef2e <_vfiprintf_r+0xc6>
 800ef88:	9b03      	ldr	r3, [sp, #12]
 800ef8a:	1d19      	adds	r1, r3, #4
 800ef8c:	681b      	ldr	r3, [r3, #0]
 800ef8e:	9103      	str	r1, [sp, #12]
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	bfbb      	ittet	lt
 800ef94:	425b      	neglt	r3, r3
 800ef96:	f042 0202 	orrlt.w	r2, r2, #2
 800ef9a:	9307      	strge	r3, [sp, #28]
 800ef9c:	9307      	strlt	r3, [sp, #28]
 800ef9e:	bfb8      	it	lt
 800efa0:	9204      	strlt	r2, [sp, #16]
 800efa2:	7823      	ldrb	r3, [r4, #0]
 800efa4:	2b2e      	cmp	r3, #46	@ 0x2e
 800efa6:	d10a      	bne.n	800efbe <_vfiprintf_r+0x156>
 800efa8:	7863      	ldrb	r3, [r4, #1]
 800efaa:	2b2a      	cmp	r3, #42	@ 0x2a
 800efac:	d132      	bne.n	800f014 <_vfiprintf_r+0x1ac>
 800efae:	9b03      	ldr	r3, [sp, #12]
 800efb0:	1d1a      	adds	r2, r3, #4
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	9203      	str	r2, [sp, #12]
 800efb6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800efba:	3402      	adds	r4, #2
 800efbc:	9305      	str	r3, [sp, #20]
 800efbe:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f094 <_vfiprintf_r+0x22c>
 800efc2:	7821      	ldrb	r1, [r4, #0]
 800efc4:	2203      	movs	r2, #3
 800efc6:	4650      	mov	r0, sl
 800efc8:	f7f1 f8e2 	bl	8000190 <memchr>
 800efcc:	b138      	cbz	r0, 800efde <_vfiprintf_r+0x176>
 800efce:	9b04      	ldr	r3, [sp, #16]
 800efd0:	eba0 000a 	sub.w	r0, r0, sl
 800efd4:	2240      	movs	r2, #64	@ 0x40
 800efd6:	4082      	lsls	r2, r0
 800efd8:	4313      	orrs	r3, r2
 800efda:	3401      	adds	r4, #1
 800efdc:	9304      	str	r3, [sp, #16]
 800efde:	f814 1b01 	ldrb.w	r1, [r4], #1
 800efe2:	4829      	ldr	r0, [pc, #164]	@ (800f088 <_vfiprintf_r+0x220>)
 800efe4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800efe8:	2206      	movs	r2, #6
 800efea:	f7f1 f8d1 	bl	8000190 <memchr>
 800efee:	2800      	cmp	r0, #0
 800eff0:	d03f      	beq.n	800f072 <_vfiprintf_r+0x20a>
 800eff2:	4b26      	ldr	r3, [pc, #152]	@ (800f08c <_vfiprintf_r+0x224>)
 800eff4:	bb1b      	cbnz	r3, 800f03e <_vfiprintf_r+0x1d6>
 800eff6:	9b03      	ldr	r3, [sp, #12]
 800eff8:	3307      	adds	r3, #7
 800effa:	f023 0307 	bic.w	r3, r3, #7
 800effe:	3308      	adds	r3, #8
 800f000:	9303      	str	r3, [sp, #12]
 800f002:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f004:	443b      	add	r3, r7
 800f006:	9309      	str	r3, [sp, #36]	@ 0x24
 800f008:	e76a      	b.n	800eee0 <_vfiprintf_r+0x78>
 800f00a:	fb0c 3202 	mla	r2, ip, r2, r3
 800f00e:	460c      	mov	r4, r1
 800f010:	2001      	movs	r0, #1
 800f012:	e7a8      	b.n	800ef66 <_vfiprintf_r+0xfe>
 800f014:	2300      	movs	r3, #0
 800f016:	3401      	adds	r4, #1
 800f018:	9305      	str	r3, [sp, #20]
 800f01a:	4619      	mov	r1, r3
 800f01c:	f04f 0c0a 	mov.w	ip, #10
 800f020:	4620      	mov	r0, r4
 800f022:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f026:	3a30      	subs	r2, #48	@ 0x30
 800f028:	2a09      	cmp	r2, #9
 800f02a:	d903      	bls.n	800f034 <_vfiprintf_r+0x1cc>
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	d0c6      	beq.n	800efbe <_vfiprintf_r+0x156>
 800f030:	9105      	str	r1, [sp, #20]
 800f032:	e7c4      	b.n	800efbe <_vfiprintf_r+0x156>
 800f034:	fb0c 2101 	mla	r1, ip, r1, r2
 800f038:	4604      	mov	r4, r0
 800f03a:	2301      	movs	r3, #1
 800f03c:	e7f0      	b.n	800f020 <_vfiprintf_r+0x1b8>
 800f03e:	ab03      	add	r3, sp, #12
 800f040:	9300      	str	r3, [sp, #0]
 800f042:	462a      	mov	r2, r5
 800f044:	4b12      	ldr	r3, [pc, #72]	@ (800f090 <_vfiprintf_r+0x228>)
 800f046:	a904      	add	r1, sp, #16
 800f048:	4630      	mov	r0, r6
 800f04a:	f3af 8000 	nop.w
 800f04e:	4607      	mov	r7, r0
 800f050:	1c78      	adds	r0, r7, #1
 800f052:	d1d6      	bne.n	800f002 <_vfiprintf_r+0x19a>
 800f054:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f056:	07d9      	lsls	r1, r3, #31
 800f058:	d405      	bmi.n	800f066 <_vfiprintf_r+0x1fe>
 800f05a:	89ab      	ldrh	r3, [r5, #12]
 800f05c:	059a      	lsls	r2, r3, #22
 800f05e:	d402      	bmi.n	800f066 <_vfiprintf_r+0x1fe>
 800f060:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f062:	f7ff fc77 	bl	800e954 <__retarget_lock_release_recursive>
 800f066:	89ab      	ldrh	r3, [r5, #12]
 800f068:	065b      	lsls	r3, r3, #25
 800f06a:	f53f af1f 	bmi.w	800eeac <_vfiprintf_r+0x44>
 800f06e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f070:	e71e      	b.n	800eeb0 <_vfiprintf_r+0x48>
 800f072:	ab03      	add	r3, sp, #12
 800f074:	9300      	str	r3, [sp, #0]
 800f076:	462a      	mov	r2, r5
 800f078:	4b05      	ldr	r3, [pc, #20]	@ (800f090 <_vfiprintf_r+0x228>)
 800f07a:	a904      	add	r1, sp, #16
 800f07c:	4630      	mov	r0, r6
 800f07e:	f000 f879 	bl	800f174 <_printf_i>
 800f082:	e7e4      	b.n	800f04e <_vfiprintf_r+0x1e6>
 800f084:	08010ee2 	.word	0x08010ee2
 800f088:	08010eec 	.word	0x08010eec
 800f08c:	00000000 	.word	0x00000000
 800f090:	0800ee43 	.word	0x0800ee43
 800f094:	08010ee8 	.word	0x08010ee8

0800f098 <_printf_common>:
 800f098:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f09c:	4616      	mov	r6, r2
 800f09e:	4698      	mov	r8, r3
 800f0a0:	688a      	ldr	r2, [r1, #8]
 800f0a2:	690b      	ldr	r3, [r1, #16]
 800f0a4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f0a8:	4293      	cmp	r3, r2
 800f0aa:	bfb8      	it	lt
 800f0ac:	4613      	movlt	r3, r2
 800f0ae:	6033      	str	r3, [r6, #0]
 800f0b0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800f0b4:	4607      	mov	r7, r0
 800f0b6:	460c      	mov	r4, r1
 800f0b8:	b10a      	cbz	r2, 800f0be <_printf_common+0x26>
 800f0ba:	3301      	adds	r3, #1
 800f0bc:	6033      	str	r3, [r6, #0]
 800f0be:	6823      	ldr	r3, [r4, #0]
 800f0c0:	0699      	lsls	r1, r3, #26
 800f0c2:	bf42      	ittt	mi
 800f0c4:	6833      	ldrmi	r3, [r6, #0]
 800f0c6:	3302      	addmi	r3, #2
 800f0c8:	6033      	strmi	r3, [r6, #0]
 800f0ca:	6825      	ldr	r5, [r4, #0]
 800f0cc:	f015 0506 	ands.w	r5, r5, #6
 800f0d0:	d106      	bne.n	800f0e0 <_printf_common+0x48>
 800f0d2:	f104 0a19 	add.w	sl, r4, #25
 800f0d6:	68e3      	ldr	r3, [r4, #12]
 800f0d8:	6832      	ldr	r2, [r6, #0]
 800f0da:	1a9b      	subs	r3, r3, r2
 800f0dc:	42ab      	cmp	r3, r5
 800f0de:	dc26      	bgt.n	800f12e <_printf_common+0x96>
 800f0e0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800f0e4:	6822      	ldr	r2, [r4, #0]
 800f0e6:	3b00      	subs	r3, #0
 800f0e8:	bf18      	it	ne
 800f0ea:	2301      	movne	r3, #1
 800f0ec:	0692      	lsls	r2, r2, #26
 800f0ee:	d42b      	bmi.n	800f148 <_printf_common+0xb0>
 800f0f0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800f0f4:	4641      	mov	r1, r8
 800f0f6:	4638      	mov	r0, r7
 800f0f8:	47c8      	blx	r9
 800f0fa:	3001      	adds	r0, #1
 800f0fc:	d01e      	beq.n	800f13c <_printf_common+0xa4>
 800f0fe:	6823      	ldr	r3, [r4, #0]
 800f100:	6922      	ldr	r2, [r4, #16]
 800f102:	f003 0306 	and.w	r3, r3, #6
 800f106:	2b04      	cmp	r3, #4
 800f108:	bf02      	ittt	eq
 800f10a:	68e5      	ldreq	r5, [r4, #12]
 800f10c:	6833      	ldreq	r3, [r6, #0]
 800f10e:	1aed      	subeq	r5, r5, r3
 800f110:	68a3      	ldr	r3, [r4, #8]
 800f112:	bf0c      	ite	eq
 800f114:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f118:	2500      	movne	r5, #0
 800f11a:	4293      	cmp	r3, r2
 800f11c:	bfc4      	itt	gt
 800f11e:	1a9b      	subgt	r3, r3, r2
 800f120:	18ed      	addgt	r5, r5, r3
 800f122:	2600      	movs	r6, #0
 800f124:	341a      	adds	r4, #26
 800f126:	42b5      	cmp	r5, r6
 800f128:	d11a      	bne.n	800f160 <_printf_common+0xc8>
 800f12a:	2000      	movs	r0, #0
 800f12c:	e008      	b.n	800f140 <_printf_common+0xa8>
 800f12e:	2301      	movs	r3, #1
 800f130:	4652      	mov	r2, sl
 800f132:	4641      	mov	r1, r8
 800f134:	4638      	mov	r0, r7
 800f136:	47c8      	blx	r9
 800f138:	3001      	adds	r0, #1
 800f13a:	d103      	bne.n	800f144 <_printf_common+0xac>
 800f13c:	f04f 30ff 	mov.w	r0, #4294967295
 800f140:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f144:	3501      	adds	r5, #1
 800f146:	e7c6      	b.n	800f0d6 <_printf_common+0x3e>
 800f148:	18e1      	adds	r1, r4, r3
 800f14a:	1c5a      	adds	r2, r3, #1
 800f14c:	2030      	movs	r0, #48	@ 0x30
 800f14e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800f152:	4422      	add	r2, r4
 800f154:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800f158:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800f15c:	3302      	adds	r3, #2
 800f15e:	e7c7      	b.n	800f0f0 <_printf_common+0x58>
 800f160:	2301      	movs	r3, #1
 800f162:	4622      	mov	r2, r4
 800f164:	4641      	mov	r1, r8
 800f166:	4638      	mov	r0, r7
 800f168:	47c8      	blx	r9
 800f16a:	3001      	adds	r0, #1
 800f16c:	d0e6      	beq.n	800f13c <_printf_common+0xa4>
 800f16e:	3601      	adds	r6, #1
 800f170:	e7d9      	b.n	800f126 <_printf_common+0x8e>
	...

0800f174 <_printf_i>:
 800f174:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f178:	7e0f      	ldrb	r7, [r1, #24]
 800f17a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f17c:	2f78      	cmp	r7, #120	@ 0x78
 800f17e:	4691      	mov	r9, r2
 800f180:	4680      	mov	r8, r0
 800f182:	460c      	mov	r4, r1
 800f184:	469a      	mov	sl, r3
 800f186:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800f18a:	d807      	bhi.n	800f19c <_printf_i+0x28>
 800f18c:	2f62      	cmp	r7, #98	@ 0x62
 800f18e:	d80a      	bhi.n	800f1a6 <_printf_i+0x32>
 800f190:	2f00      	cmp	r7, #0
 800f192:	f000 80d2 	beq.w	800f33a <_printf_i+0x1c6>
 800f196:	2f58      	cmp	r7, #88	@ 0x58
 800f198:	f000 80b9 	beq.w	800f30e <_printf_i+0x19a>
 800f19c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f1a0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800f1a4:	e03a      	b.n	800f21c <_printf_i+0xa8>
 800f1a6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800f1aa:	2b15      	cmp	r3, #21
 800f1ac:	d8f6      	bhi.n	800f19c <_printf_i+0x28>
 800f1ae:	a101      	add	r1, pc, #4	@ (adr r1, 800f1b4 <_printf_i+0x40>)
 800f1b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f1b4:	0800f20d 	.word	0x0800f20d
 800f1b8:	0800f221 	.word	0x0800f221
 800f1bc:	0800f19d 	.word	0x0800f19d
 800f1c0:	0800f19d 	.word	0x0800f19d
 800f1c4:	0800f19d 	.word	0x0800f19d
 800f1c8:	0800f19d 	.word	0x0800f19d
 800f1cc:	0800f221 	.word	0x0800f221
 800f1d0:	0800f19d 	.word	0x0800f19d
 800f1d4:	0800f19d 	.word	0x0800f19d
 800f1d8:	0800f19d 	.word	0x0800f19d
 800f1dc:	0800f19d 	.word	0x0800f19d
 800f1e0:	0800f321 	.word	0x0800f321
 800f1e4:	0800f24b 	.word	0x0800f24b
 800f1e8:	0800f2db 	.word	0x0800f2db
 800f1ec:	0800f19d 	.word	0x0800f19d
 800f1f0:	0800f19d 	.word	0x0800f19d
 800f1f4:	0800f343 	.word	0x0800f343
 800f1f8:	0800f19d 	.word	0x0800f19d
 800f1fc:	0800f24b 	.word	0x0800f24b
 800f200:	0800f19d 	.word	0x0800f19d
 800f204:	0800f19d 	.word	0x0800f19d
 800f208:	0800f2e3 	.word	0x0800f2e3
 800f20c:	6833      	ldr	r3, [r6, #0]
 800f20e:	1d1a      	adds	r2, r3, #4
 800f210:	681b      	ldr	r3, [r3, #0]
 800f212:	6032      	str	r2, [r6, #0]
 800f214:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f218:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800f21c:	2301      	movs	r3, #1
 800f21e:	e09d      	b.n	800f35c <_printf_i+0x1e8>
 800f220:	6833      	ldr	r3, [r6, #0]
 800f222:	6820      	ldr	r0, [r4, #0]
 800f224:	1d19      	adds	r1, r3, #4
 800f226:	6031      	str	r1, [r6, #0]
 800f228:	0606      	lsls	r6, r0, #24
 800f22a:	d501      	bpl.n	800f230 <_printf_i+0xbc>
 800f22c:	681d      	ldr	r5, [r3, #0]
 800f22e:	e003      	b.n	800f238 <_printf_i+0xc4>
 800f230:	0645      	lsls	r5, r0, #25
 800f232:	d5fb      	bpl.n	800f22c <_printf_i+0xb8>
 800f234:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f238:	2d00      	cmp	r5, #0
 800f23a:	da03      	bge.n	800f244 <_printf_i+0xd0>
 800f23c:	232d      	movs	r3, #45	@ 0x2d
 800f23e:	426d      	negs	r5, r5
 800f240:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f244:	4859      	ldr	r0, [pc, #356]	@ (800f3ac <_printf_i+0x238>)
 800f246:	230a      	movs	r3, #10
 800f248:	e011      	b.n	800f26e <_printf_i+0xfa>
 800f24a:	6821      	ldr	r1, [r4, #0]
 800f24c:	6833      	ldr	r3, [r6, #0]
 800f24e:	0608      	lsls	r0, r1, #24
 800f250:	f853 5b04 	ldr.w	r5, [r3], #4
 800f254:	d402      	bmi.n	800f25c <_printf_i+0xe8>
 800f256:	0649      	lsls	r1, r1, #25
 800f258:	bf48      	it	mi
 800f25a:	b2ad      	uxthmi	r5, r5
 800f25c:	2f6f      	cmp	r7, #111	@ 0x6f
 800f25e:	4853      	ldr	r0, [pc, #332]	@ (800f3ac <_printf_i+0x238>)
 800f260:	6033      	str	r3, [r6, #0]
 800f262:	bf14      	ite	ne
 800f264:	230a      	movne	r3, #10
 800f266:	2308      	moveq	r3, #8
 800f268:	2100      	movs	r1, #0
 800f26a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f26e:	6866      	ldr	r6, [r4, #4]
 800f270:	60a6      	str	r6, [r4, #8]
 800f272:	2e00      	cmp	r6, #0
 800f274:	bfa2      	ittt	ge
 800f276:	6821      	ldrge	r1, [r4, #0]
 800f278:	f021 0104 	bicge.w	r1, r1, #4
 800f27c:	6021      	strge	r1, [r4, #0]
 800f27e:	b90d      	cbnz	r5, 800f284 <_printf_i+0x110>
 800f280:	2e00      	cmp	r6, #0
 800f282:	d04b      	beq.n	800f31c <_printf_i+0x1a8>
 800f284:	4616      	mov	r6, r2
 800f286:	fbb5 f1f3 	udiv	r1, r5, r3
 800f28a:	fb03 5711 	mls	r7, r3, r1, r5
 800f28e:	5dc7      	ldrb	r7, [r0, r7]
 800f290:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f294:	462f      	mov	r7, r5
 800f296:	42bb      	cmp	r3, r7
 800f298:	460d      	mov	r5, r1
 800f29a:	d9f4      	bls.n	800f286 <_printf_i+0x112>
 800f29c:	2b08      	cmp	r3, #8
 800f29e:	d10b      	bne.n	800f2b8 <_printf_i+0x144>
 800f2a0:	6823      	ldr	r3, [r4, #0]
 800f2a2:	07df      	lsls	r7, r3, #31
 800f2a4:	d508      	bpl.n	800f2b8 <_printf_i+0x144>
 800f2a6:	6923      	ldr	r3, [r4, #16]
 800f2a8:	6861      	ldr	r1, [r4, #4]
 800f2aa:	4299      	cmp	r1, r3
 800f2ac:	bfde      	ittt	le
 800f2ae:	2330      	movle	r3, #48	@ 0x30
 800f2b0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f2b4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f2b8:	1b92      	subs	r2, r2, r6
 800f2ba:	6122      	str	r2, [r4, #16]
 800f2bc:	f8cd a000 	str.w	sl, [sp]
 800f2c0:	464b      	mov	r3, r9
 800f2c2:	aa03      	add	r2, sp, #12
 800f2c4:	4621      	mov	r1, r4
 800f2c6:	4640      	mov	r0, r8
 800f2c8:	f7ff fee6 	bl	800f098 <_printf_common>
 800f2cc:	3001      	adds	r0, #1
 800f2ce:	d14a      	bne.n	800f366 <_printf_i+0x1f2>
 800f2d0:	f04f 30ff 	mov.w	r0, #4294967295
 800f2d4:	b004      	add	sp, #16
 800f2d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f2da:	6823      	ldr	r3, [r4, #0]
 800f2dc:	f043 0320 	orr.w	r3, r3, #32
 800f2e0:	6023      	str	r3, [r4, #0]
 800f2e2:	4833      	ldr	r0, [pc, #204]	@ (800f3b0 <_printf_i+0x23c>)
 800f2e4:	2778      	movs	r7, #120	@ 0x78
 800f2e6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f2ea:	6823      	ldr	r3, [r4, #0]
 800f2ec:	6831      	ldr	r1, [r6, #0]
 800f2ee:	061f      	lsls	r7, r3, #24
 800f2f0:	f851 5b04 	ldr.w	r5, [r1], #4
 800f2f4:	d402      	bmi.n	800f2fc <_printf_i+0x188>
 800f2f6:	065f      	lsls	r7, r3, #25
 800f2f8:	bf48      	it	mi
 800f2fa:	b2ad      	uxthmi	r5, r5
 800f2fc:	6031      	str	r1, [r6, #0]
 800f2fe:	07d9      	lsls	r1, r3, #31
 800f300:	bf44      	itt	mi
 800f302:	f043 0320 	orrmi.w	r3, r3, #32
 800f306:	6023      	strmi	r3, [r4, #0]
 800f308:	b11d      	cbz	r5, 800f312 <_printf_i+0x19e>
 800f30a:	2310      	movs	r3, #16
 800f30c:	e7ac      	b.n	800f268 <_printf_i+0xf4>
 800f30e:	4827      	ldr	r0, [pc, #156]	@ (800f3ac <_printf_i+0x238>)
 800f310:	e7e9      	b.n	800f2e6 <_printf_i+0x172>
 800f312:	6823      	ldr	r3, [r4, #0]
 800f314:	f023 0320 	bic.w	r3, r3, #32
 800f318:	6023      	str	r3, [r4, #0]
 800f31a:	e7f6      	b.n	800f30a <_printf_i+0x196>
 800f31c:	4616      	mov	r6, r2
 800f31e:	e7bd      	b.n	800f29c <_printf_i+0x128>
 800f320:	6833      	ldr	r3, [r6, #0]
 800f322:	6825      	ldr	r5, [r4, #0]
 800f324:	6961      	ldr	r1, [r4, #20]
 800f326:	1d18      	adds	r0, r3, #4
 800f328:	6030      	str	r0, [r6, #0]
 800f32a:	062e      	lsls	r6, r5, #24
 800f32c:	681b      	ldr	r3, [r3, #0]
 800f32e:	d501      	bpl.n	800f334 <_printf_i+0x1c0>
 800f330:	6019      	str	r1, [r3, #0]
 800f332:	e002      	b.n	800f33a <_printf_i+0x1c6>
 800f334:	0668      	lsls	r0, r5, #25
 800f336:	d5fb      	bpl.n	800f330 <_printf_i+0x1bc>
 800f338:	8019      	strh	r1, [r3, #0]
 800f33a:	2300      	movs	r3, #0
 800f33c:	6123      	str	r3, [r4, #16]
 800f33e:	4616      	mov	r6, r2
 800f340:	e7bc      	b.n	800f2bc <_printf_i+0x148>
 800f342:	6833      	ldr	r3, [r6, #0]
 800f344:	1d1a      	adds	r2, r3, #4
 800f346:	6032      	str	r2, [r6, #0]
 800f348:	681e      	ldr	r6, [r3, #0]
 800f34a:	6862      	ldr	r2, [r4, #4]
 800f34c:	2100      	movs	r1, #0
 800f34e:	4630      	mov	r0, r6
 800f350:	f7f0 ff1e 	bl	8000190 <memchr>
 800f354:	b108      	cbz	r0, 800f35a <_printf_i+0x1e6>
 800f356:	1b80      	subs	r0, r0, r6
 800f358:	6060      	str	r0, [r4, #4]
 800f35a:	6863      	ldr	r3, [r4, #4]
 800f35c:	6123      	str	r3, [r4, #16]
 800f35e:	2300      	movs	r3, #0
 800f360:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f364:	e7aa      	b.n	800f2bc <_printf_i+0x148>
 800f366:	6923      	ldr	r3, [r4, #16]
 800f368:	4632      	mov	r2, r6
 800f36a:	4649      	mov	r1, r9
 800f36c:	4640      	mov	r0, r8
 800f36e:	47d0      	blx	sl
 800f370:	3001      	adds	r0, #1
 800f372:	d0ad      	beq.n	800f2d0 <_printf_i+0x15c>
 800f374:	6823      	ldr	r3, [r4, #0]
 800f376:	079b      	lsls	r3, r3, #30
 800f378:	d413      	bmi.n	800f3a2 <_printf_i+0x22e>
 800f37a:	68e0      	ldr	r0, [r4, #12]
 800f37c:	9b03      	ldr	r3, [sp, #12]
 800f37e:	4298      	cmp	r0, r3
 800f380:	bfb8      	it	lt
 800f382:	4618      	movlt	r0, r3
 800f384:	e7a6      	b.n	800f2d4 <_printf_i+0x160>
 800f386:	2301      	movs	r3, #1
 800f388:	4632      	mov	r2, r6
 800f38a:	4649      	mov	r1, r9
 800f38c:	4640      	mov	r0, r8
 800f38e:	47d0      	blx	sl
 800f390:	3001      	adds	r0, #1
 800f392:	d09d      	beq.n	800f2d0 <_printf_i+0x15c>
 800f394:	3501      	adds	r5, #1
 800f396:	68e3      	ldr	r3, [r4, #12]
 800f398:	9903      	ldr	r1, [sp, #12]
 800f39a:	1a5b      	subs	r3, r3, r1
 800f39c:	42ab      	cmp	r3, r5
 800f39e:	dcf2      	bgt.n	800f386 <_printf_i+0x212>
 800f3a0:	e7eb      	b.n	800f37a <_printf_i+0x206>
 800f3a2:	2500      	movs	r5, #0
 800f3a4:	f104 0619 	add.w	r6, r4, #25
 800f3a8:	e7f5      	b.n	800f396 <_printf_i+0x222>
 800f3aa:	bf00      	nop
 800f3ac:	08010ef3 	.word	0x08010ef3
 800f3b0:	08010f04 	.word	0x08010f04

0800f3b4 <__sflush_r>:
 800f3b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f3b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f3bc:	0716      	lsls	r6, r2, #28
 800f3be:	4605      	mov	r5, r0
 800f3c0:	460c      	mov	r4, r1
 800f3c2:	d454      	bmi.n	800f46e <__sflush_r+0xba>
 800f3c4:	684b      	ldr	r3, [r1, #4]
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	dc02      	bgt.n	800f3d0 <__sflush_r+0x1c>
 800f3ca:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	dd48      	ble.n	800f462 <__sflush_r+0xae>
 800f3d0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f3d2:	2e00      	cmp	r6, #0
 800f3d4:	d045      	beq.n	800f462 <__sflush_r+0xae>
 800f3d6:	2300      	movs	r3, #0
 800f3d8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f3dc:	682f      	ldr	r7, [r5, #0]
 800f3de:	6a21      	ldr	r1, [r4, #32]
 800f3e0:	602b      	str	r3, [r5, #0]
 800f3e2:	d030      	beq.n	800f446 <__sflush_r+0x92>
 800f3e4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f3e6:	89a3      	ldrh	r3, [r4, #12]
 800f3e8:	0759      	lsls	r1, r3, #29
 800f3ea:	d505      	bpl.n	800f3f8 <__sflush_r+0x44>
 800f3ec:	6863      	ldr	r3, [r4, #4]
 800f3ee:	1ad2      	subs	r2, r2, r3
 800f3f0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f3f2:	b10b      	cbz	r3, 800f3f8 <__sflush_r+0x44>
 800f3f4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f3f6:	1ad2      	subs	r2, r2, r3
 800f3f8:	2300      	movs	r3, #0
 800f3fa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f3fc:	6a21      	ldr	r1, [r4, #32]
 800f3fe:	4628      	mov	r0, r5
 800f400:	47b0      	blx	r6
 800f402:	1c43      	adds	r3, r0, #1
 800f404:	89a3      	ldrh	r3, [r4, #12]
 800f406:	d106      	bne.n	800f416 <__sflush_r+0x62>
 800f408:	6829      	ldr	r1, [r5, #0]
 800f40a:	291d      	cmp	r1, #29
 800f40c:	d82b      	bhi.n	800f466 <__sflush_r+0xb2>
 800f40e:	4a2a      	ldr	r2, [pc, #168]	@ (800f4b8 <__sflush_r+0x104>)
 800f410:	410a      	asrs	r2, r1
 800f412:	07d6      	lsls	r6, r2, #31
 800f414:	d427      	bmi.n	800f466 <__sflush_r+0xb2>
 800f416:	2200      	movs	r2, #0
 800f418:	6062      	str	r2, [r4, #4]
 800f41a:	04d9      	lsls	r1, r3, #19
 800f41c:	6922      	ldr	r2, [r4, #16]
 800f41e:	6022      	str	r2, [r4, #0]
 800f420:	d504      	bpl.n	800f42c <__sflush_r+0x78>
 800f422:	1c42      	adds	r2, r0, #1
 800f424:	d101      	bne.n	800f42a <__sflush_r+0x76>
 800f426:	682b      	ldr	r3, [r5, #0]
 800f428:	b903      	cbnz	r3, 800f42c <__sflush_r+0x78>
 800f42a:	6560      	str	r0, [r4, #84]	@ 0x54
 800f42c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f42e:	602f      	str	r7, [r5, #0]
 800f430:	b1b9      	cbz	r1, 800f462 <__sflush_r+0xae>
 800f432:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f436:	4299      	cmp	r1, r3
 800f438:	d002      	beq.n	800f440 <__sflush_r+0x8c>
 800f43a:	4628      	mov	r0, r5
 800f43c:	f7ff fa9a 	bl	800e974 <_free_r>
 800f440:	2300      	movs	r3, #0
 800f442:	6363      	str	r3, [r4, #52]	@ 0x34
 800f444:	e00d      	b.n	800f462 <__sflush_r+0xae>
 800f446:	2301      	movs	r3, #1
 800f448:	4628      	mov	r0, r5
 800f44a:	47b0      	blx	r6
 800f44c:	4602      	mov	r2, r0
 800f44e:	1c50      	adds	r0, r2, #1
 800f450:	d1c9      	bne.n	800f3e6 <__sflush_r+0x32>
 800f452:	682b      	ldr	r3, [r5, #0]
 800f454:	2b00      	cmp	r3, #0
 800f456:	d0c6      	beq.n	800f3e6 <__sflush_r+0x32>
 800f458:	2b1d      	cmp	r3, #29
 800f45a:	d001      	beq.n	800f460 <__sflush_r+0xac>
 800f45c:	2b16      	cmp	r3, #22
 800f45e:	d11e      	bne.n	800f49e <__sflush_r+0xea>
 800f460:	602f      	str	r7, [r5, #0]
 800f462:	2000      	movs	r0, #0
 800f464:	e022      	b.n	800f4ac <__sflush_r+0xf8>
 800f466:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f46a:	b21b      	sxth	r3, r3
 800f46c:	e01b      	b.n	800f4a6 <__sflush_r+0xf2>
 800f46e:	690f      	ldr	r7, [r1, #16]
 800f470:	2f00      	cmp	r7, #0
 800f472:	d0f6      	beq.n	800f462 <__sflush_r+0xae>
 800f474:	0793      	lsls	r3, r2, #30
 800f476:	680e      	ldr	r6, [r1, #0]
 800f478:	bf08      	it	eq
 800f47a:	694b      	ldreq	r3, [r1, #20]
 800f47c:	600f      	str	r7, [r1, #0]
 800f47e:	bf18      	it	ne
 800f480:	2300      	movne	r3, #0
 800f482:	eba6 0807 	sub.w	r8, r6, r7
 800f486:	608b      	str	r3, [r1, #8]
 800f488:	f1b8 0f00 	cmp.w	r8, #0
 800f48c:	dde9      	ble.n	800f462 <__sflush_r+0xae>
 800f48e:	6a21      	ldr	r1, [r4, #32]
 800f490:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f492:	4643      	mov	r3, r8
 800f494:	463a      	mov	r2, r7
 800f496:	4628      	mov	r0, r5
 800f498:	47b0      	blx	r6
 800f49a:	2800      	cmp	r0, #0
 800f49c:	dc08      	bgt.n	800f4b0 <__sflush_r+0xfc>
 800f49e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f4a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f4a6:	81a3      	strh	r3, [r4, #12]
 800f4a8:	f04f 30ff 	mov.w	r0, #4294967295
 800f4ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f4b0:	4407      	add	r7, r0
 800f4b2:	eba8 0800 	sub.w	r8, r8, r0
 800f4b6:	e7e7      	b.n	800f488 <__sflush_r+0xd4>
 800f4b8:	dfbffffe 	.word	0xdfbffffe

0800f4bc <_fflush_r>:
 800f4bc:	b538      	push	{r3, r4, r5, lr}
 800f4be:	690b      	ldr	r3, [r1, #16]
 800f4c0:	4605      	mov	r5, r0
 800f4c2:	460c      	mov	r4, r1
 800f4c4:	b913      	cbnz	r3, 800f4cc <_fflush_r+0x10>
 800f4c6:	2500      	movs	r5, #0
 800f4c8:	4628      	mov	r0, r5
 800f4ca:	bd38      	pop	{r3, r4, r5, pc}
 800f4cc:	b118      	cbz	r0, 800f4d6 <_fflush_r+0x1a>
 800f4ce:	6a03      	ldr	r3, [r0, #32]
 800f4d0:	b90b      	cbnz	r3, 800f4d6 <_fflush_r+0x1a>
 800f4d2:	f7ff f825 	bl	800e520 <__sinit>
 800f4d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d0f3      	beq.n	800f4c6 <_fflush_r+0xa>
 800f4de:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f4e0:	07d0      	lsls	r0, r2, #31
 800f4e2:	d404      	bmi.n	800f4ee <_fflush_r+0x32>
 800f4e4:	0599      	lsls	r1, r3, #22
 800f4e6:	d402      	bmi.n	800f4ee <_fflush_r+0x32>
 800f4e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f4ea:	f7ff fa32 	bl	800e952 <__retarget_lock_acquire_recursive>
 800f4ee:	4628      	mov	r0, r5
 800f4f0:	4621      	mov	r1, r4
 800f4f2:	f7ff ff5f 	bl	800f3b4 <__sflush_r>
 800f4f6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f4f8:	07da      	lsls	r2, r3, #31
 800f4fa:	4605      	mov	r5, r0
 800f4fc:	d4e4      	bmi.n	800f4c8 <_fflush_r+0xc>
 800f4fe:	89a3      	ldrh	r3, [r4, #12]
 800f500:	059b      	lsls	r3, r3, #22
 800f502:	d4e1      	bmi.n	800f4c8 <_fflush_r+0xc>
 800f504:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f506:	f7ff fa25 	bl	800e954 <__retarget_lock_release_recursive>
 800f50a:	e7dd      	b.n	800f4c8 <_fflush_r+0xc>

0800f50c <__swhatbuf_r>:
 800f50c:	b570      	push	{r4, r5, r6, lr}
 800f50e:	460c      	mov	r4, r1
 800f510:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f514:	2900      	cmp	r1, #0
 800f516:	b096      	sub	sp, #88	@ 0x58
 800f518:	4615      	mov	r5, r2
 800f51a:	461e      	mov	r6, r3
 800f51c:	da0d      	bge.n	800f53a <__swhatbuf_r+0x2e>
 800f51e:	89a3      	ldrh	r3, [r4, #12]
 800f520:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f524:	f04f 0100 	mov.w	r1, #0
 800f528:	bf14      	ite	ne
 800f52a:	2340      	movne	r3, #64	@ 0x40
 800f52c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f530:	2000      	movs	r0, #0
 800f532:	6031      	str	r1, [r6, #0]
 800f534:	602b      	str	r3, [r5, #0]
 800f536:	b016      	add	sp, #88	@ 0x58
 800f538:	bd70      	pop	{r4, r5, r6, pc}
 800f53a:	466a      	mov	r2, sp
 800f53c:	f000 f896 	bl	800f66c <_fstat_r>
 800f540:	2800      	cmp	r0, #0
 800f542:	dbec      	blt.n	800f51e <__swhatbuf_r+0x12>
 800f544:	9901      	ldr	r1, [sp, #4]
 800f546:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f54a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f54e:	4259      	negs	r1, r3
 800f550:	4159      	adcs	r1, r3
 800f552:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f556:	e7eb      	b.n	800f530 <__swhatbuf_r+0x24>

0800f558 <__smakebuf_r>:
 800f558:	898b      	ldrh	r3, [r1, #12]
 800f55a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f55c:	079d      	lsls	r5, r3, #30
 800f55e:	4606      	mov	r6, r0
 800f560:	460c      	mov	r4, r1
 800f562:	d507      	bpl.n	800f574 <__smakebuf_r+0x1c>
 800f564:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f568:	6023      	str	r3, [r4, #0]
 800f56a:	6123      	str	r3, [r4, #16]
 800f56c:	2301      	movs	r3, #1
 800f56e:	6163      	str	r3, [r4, #20]
 800f570:	b003      	add	sp, #12
 800f572:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f574:	ab01      	add	r3, sp, #4
 800f576:	466a      	mov	r2, sp
 800f578:	f7ff ffc8 	bl	800f50c <__swhatbuf_r>
 800f57c:	9f00      	ldr	r7, [sp, #0]
 800f57e:	4605      	mov	r5, r0
 800f580:	4639      	mov	r1, r7
 800f582:	4630      	mov	r0, r6
 800f584:	f7ff fa62 	bl	800ea4c <_malloc_r>
 800f588:	b948      	cbnz	r0, 800f59e <__smakebuf_r+0x46>
 800f58a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f58e:	059a      	lsls	r2, r3, #22
 800f590:	d4ee      	bmi.n	800f570 <__smakebuf_r+0x18>
 800f592:	f023 0303 	bic.w	r3, r3, #3
 800f596:	f043 0302 	orr.w	r3, r3, #2
 800f59a:	81a3      	strh	r3, [r4, #12]
 800f59c:	e7e2      	b.n	800f564 <__smakebuf_r+0xc>
 800f59e:	89a3      	ldrh	r3, [r4, #12]
 800f5a0:	6020      	str	r0, [r4, #0]
 800f5a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f5a6:	81a3      	strh	r3, [r4, #12]
 800f5a8:	9b01      	ldr	r3, [sp, #4]
 800f5aa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f5ae:	b15b      	cbz	r3, 800f5c8 <__smakebuf_r+0x70>
 800f5b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f5b4:	4630      	mov	r0, r6
 800f5b6:	f000 f86b 	bl	800f690 <_isatty_r>
 800f5ba:	b128      	cbz	r0, 800f5c8 <__smakebuf_r+0x70>
 800f5bc:	89a3      	ldrh	r3, [r4, #12]
 800f5be:	f023 0303 	bic.w	r3, r3, #3
 800f5c2:	f043 0301 	orr.w	r3, r3, #1
 800f5c6:	81a3      	strh	r3, [r4, #12]
 800f5c8:	89a3      	ldrh	r3, [r4, #12]
 800f5ca:	431d      	orrs	r5, r3
 800f5cc:	81a5      	strh	r5, [r4, #12]
 800f5ce:	e7cf      	b.n	800f570 <__smakebuf_r+0x18>

0800f5d0 <_putc_r>:
 800f5d0:	b570      	push	{r4, r5, r6, lr}
 800f5d2:	460d      	mov	r5, r1
 800f5d4:	4614      	mov	r4, r2
 800f5d6:	4606      	mov	r6, r0
 800f5d8:	b118      	cbz	r0, 800f5e2 <_putc_r+0x12>
 800f5da:	6a03      	ldr	r3, [r0, #32]
 800f5dc:	b90b      	cbnz	r3, 800f5e2 <_putc_r+0x12>
 800f5de:	f7fe ff9f 	bl	800e520 <__sinit>
 800f5e2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f5e4:	07d8      	lsls	r0, r3, #31
 800f5e6:	d405      	bmi.n	800f5f4 <_putc_r+0x24>
 800f5e8:	89a3      	ldrh	r3, [r4, #12]
 800f5ea:	0599      	lsls	r1, r3, #22
 800f5ec:	d402      	bmi.n	800f5f4 <_putc_r+0x24>
 800f5ee:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f5f0:	f7ff f9af 	bl	800e952 <__retarget_lock_acquire_recursive>
 800f5f4:	68a3      	ldr	r3, [r4, #8]
 800f5f6:	3b01      	subs	r3, #1
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	60a3      	str	r3, [r4, #8]
 800f5fc:	da05      	bge.n	800f60a <_putc_r+0x3a>
 800f5fe:	69a2      	ldr	r2, [r4, #24]
 800f600:	4293      	cmp	r3, r2
 800f602:	db12      	blt.n	800f62a <_putc_r+0x5a>
 800f604:	b2eb      	uxtb	r3, r5
 800f606:	2b0a      	cmp	r3, #10
 800f608:	d00f      	beq.n	800f62a <_putc_r+0x5a>
 800f60a:	6823      	ldr	r3, [r4, #0]
 800f60c:	1c5a      	adds	r2, r3, #1
 800f60e:	6022      	str	r2, [r4, #0]
 800f610:	701d      	strb	r5, [r3, #0]
 800f612:	b2ed      	uxtb	r5, r5
 800f614:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f616:	07da      	lsls	r2, r3, #31
 800f618:	d405      	bmi.n	800f626 <_putc_r+0x56>
 800f61a:	89a3      	ldrh	r3, [r4, #12]
 800f61c:	059b      	lsls	r3, r3, #22
 800f61e:	d402      	bmi.n	800f626 <_putc_r+0x56>
 800f620:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f622:	f7ff f997 	bl	800e954 <__retarget_lock_release_recursive>
 800f626:	4628      	mov	r0, r5
 800f628:	bd70      	pop	{r4, r5, r6, pc}
 800f62a:	4629      	mov	r1, r5
 800f62c:	4622      	mov	r2, r4
 800f62e:	4630      	mov	r0, r6
 800f630:	f7ff f887 	bl	800e742 <__swbuf_r>
 800f634:	4605      	mov	r5, r0
 800f636:	e7ed      	b.n	800f614 <_putc_r+0x44>

0800f638 <memmove>:
 800f638:	4288      	cmp	r0, r1
 800f63a:	b510      	push	{r4, lr}
 800f63c:	eb01 0402 	add.w	r4, r1, r2
 800f640:	d902      	bls.n	800f648 <memmove+0x10>
 800f642:	4284      	cmp	r4, r0
 800f644:	4623      	mov	r3, r4
 800f646:	d807      	bhi.n	800f658 <memmove+0x20>
 800f648:	1e43      	subs	r3, r0, #1
 800f64a:	42a1      	cmp	r1, r4
 800f64c:	d008      	beq.n	800f660 <memmove+0x28>
 800f64e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f652:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f656:	e7f8      	b.n	800f64a <memmove+0x12>
 800f658:	4402      	add	r2, r0
 800f65a:	4601      	mov	r1, r0
 800f65c:	428a      	cmp	r2, r1
 800f65e:	d100      	bne.n	800f662 <memmove+0x2a>
 800f660:	bd10      	pop	{r4, pc}
 800f662:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f666:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f66a:	e7f7      	b.n	800f65c <memmove+0x24>

0800f66c <_fstat_r>:
 800f66c:	b538      	push	{r3, r4, r5, lr}
 800f66e:	4d07      	ldr	r5, [pc, #28]	@ (800f68c <_fstat_r+0x20>)
 800f670:	2300      	movs	r3, #0
 800f672:	4604      	mov	r4, r0
 800f674:	4608      	mov	r0, r1
 800f676:	4611      	mov	r1, r2
 800f678:	602b      	str	r3, [r5, #0]
 800f67a:	f000 f867 	bl	800f74c <_fstat>
 800f67e:	1c43      	adds	r3, r0, #1
 800f680:	d102      	bne.n	800f688 <_fstat_r+0x1c>
 800f682:	682b      	ldr	r3, [r5, #0]
 800f684:	b103      	cbz	r3, 800f688 <_fstat_r+0x1c>
 800f686:	6023      	str	r3, [r4, #0]
 800f688:	bd38      	pop	{r3, r4, r5, pc}
 800f68a:	bf00      	nop
 800f68c:	200023b4 	.word	0x200023b4

0800f690 <_isatty_r>:
 800f690:	b538      	push	{r3, r4, r5, lr}
 800f692:	4d06      	ldr	r5, [pc, #24]	@ (800f6ac <_isatty_r+0x1c>)
 800f694:	2300      	movs	r3, #0
 800f696:	4604      	mov	r4, r0
 800f698:	4608      	mov	r0, r1
 800f69a:	602b      	str	r3, [r5, #0]
 800f69c:	f000 f85e 	bl	800f75c <_isatty>
 800f6a0:	1c43      	adds	r3, r0, #1
 800f6a2:	d102      	bne.n	800f6aa <_isatty_r+0x1a>
 800f6a4:	682b      	ldr	r3, [r5, #0]
 800f6a6:	b103      	cbz	r3, 800f6aa <_isatty_r+0x1a>
 800f6a8:	6023      	str	r3, [r4, #0]
 800f6aa:	bd38      	pop	{r3, r4, r5, pc}
 800f6ac:	200023b4 	.word	0x200023b4

0800f6b0 <_sbrk_r>:
 800f6b0:	b538      	push	{r3, r4, r5, lr}
 800f6b2:	4d06      	ldr	r5, [pc, #24]	@ (800f6cc <_sbrk_r+0x1c>)
 800f6b4:	2300      	movs	r3, #0
 800f6b6:	4604      	mov	r4, r0
 800f6b8:	4608      	mov	r0, r1
 800f6ba:	602b      	str	r3, [r5, #0]
 800f6bc:	f000 f866 	bl	800f78c <_sbrk>
 800f6c0:	1c43      	adds	r3, r0, #1
 800f6c2:	d102      	bne.n	800f6ca <_sbrk_r+0x1a>
 800f6c4:	682b      	ldr	r3, [r5, #0]
 800f6c6:	b103      	cbz	r3, 800f6ca <_sbrk_r+0x1a>
 800f6c8:	6023      	str	r3, [r4, #0]
 800f6ca:	bd38      	pop	{r3, r4, r5, pc}
 800f6cc:	200023b4 	.word	0x200023b4

0800f6d0 <_realloc_r>:
 800f6d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f6d4:	4680      	mov	r8, r0
 800f6d6:	4615      	mov	r5, r2
 800f6d8:	460c      	mov	r4, r1
 800f6da:	b921      	cbnz	r1, 800f6e6 <_realloc_r+0x16>
 800f6dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f6e0:	4611      	mov	r1, r2
 800f6e2:	f7ff b9b3 	b.w	800ea4c <_malloc_r>
 800f6e6:	b92a      	cbnz	r2, 800f6f4 <_realloc_r+0x24>
 800f6e8:	f7ff f944 	bl	800e974 <_free_r>
 800f6ec:	2400      	movs	r4, #0
 800f6ee:	4620      	mov	r0, r4
 800f6f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f6f4:	f000 f81a 	bl	800f72c <_malloc_usable_size_r>
 800f6f8:	4285      	cmp	r5, r0
 800f6fa:	4606      	mov	r6, r0
 800f6fc:	d802      	bhi.n	800f704 <_realloc_r+0x34>
 800f6fe:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800f702:	d8f4      	bhi.n	800f6ee <_realloc_r+0x1e>
 800f704:	4629      	mov	r1, r5
 800f706:	4640      	mov	r0, r8
 800f708:	f7ff f9a0 	bl	800ea4c <_malloc_r>
 800f70c:	4607      	mov	r7, r0
 800f70e:	2800      	cmp	r0, #0
 800f710:	d0ec      	beq.n	800f6ec <_realloc_r+0x1c>
 800f712:	42b5      	cmp	r5, r6
 800f714:	462a      	mov	r2, r5
 800f716:	4621      	mov	r1, r4
 800f718:	bf28      	it	cs
 800f71a:	4632      	movcs	r2, r6
 800f71c:	f7ff f91b 	bl	800e956 <memcpy>
 800f720:	4621      	mov	r1, r4
 800f722:	4640      	mov	r0, r8
 800f724:	f7ff f926 	bl	800e974 <_free_r>
 800f728:	463c      	mov	r4, r7
 800f72a:	e7e0      	b.n	800f6ee <_realloc_r+0x1e>

0800f72c <_malloc_usable_size_r>:
 800f72c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f730:	1f18      	subs	r0, r3, #4
 800f732:	2b00      	cmp	r3, #0
 800f734:	bfbc      	itt	lt
 800f736:	580b      	ldrlt	r3, [r1, r0]
 800f738:	18c0      	addlt	r0, r0, r3
 800f73a:	4770      	bx	lr

0800f73c <_close>:
 800f73c:	4b02      	ldr	r3, [pc, #8]	@ (800f748 <_close+0xc>)
 800f73e:	2258      	movs	r2, #88	@ 0x58
 800f740:	601a      	str	r2, [r3, #0]
 800f742:	f04f 30ff 	mov.w	r0, #4294967295
 800f746:	4770      	bx	lr
 800f748:	200023b4 	.word	0x200023b4

0800f74c <_fstat>:
 800f74c:	4b02      	ldr	r3, [pc, #8]	@ (800f758 <_fstat+0xc>)
 800f74e:	2258      	movs	r2, #88	@ 0x58
 800f750:	601a      	str	r2, [r3, #0]
 800f752:	f04f 30ff 	mov.w	r0, #4294967295
 800f756:	4770      	bx	lr
 800f758:	200023b4 	.word	0x200023b4

0800f75c <_isatty>:
 800f75c:	4b02      	ldr	r3, [pc, #8]	@ (800f768 <_isatty+0xc>)
 800f75e:	2258      	movs	r2, #88	@ 0x58
 800f760:	601a      	str	r2, [r3, #0]
 800f762:	2000      	movs	r0, #0
 800f764:	4770      	bx	lr
 800f766:	bf00      	nop
 800f768:	200023b4 	.word	0x200023b4

0800f76c <_lseek>:
 800f76c:	4b02      	ldr	r3, [pc, #8]	@ (800f778 <_lseek+0xc>)
 800f76e:	2258      	movs	r2, #88	@ 0x58
 800f770:	601a      	str	r2, [r3, #0]
 800f772:	f04f 30ff 	mov.w	r0, #4294967295
 800f776:	4770      	bx	lr
 800f778:	200023b4 	.word	0x200023b4

0800f77c <_read>:
 800f77c:	4b02      	ldr	r3, [pc, #8]	@ (800f788 <_read+0xc>)
 800f77e:	2258      	movs	r2, #88	@ 0x58
 800f780:	601a      	str	r2, [r3, #0]
 800f782:	f04f 30ff 	mov.w	r0, #4294967295
 800f786:	4770      	bx	lr
 800f788:	200023b4 	.word	0x200023b4

0800f78c <_sbrk>:
 800f78c:	4a04      	ldr	r2, [pc, #16]	@ (800f7a0 <_sbrk+0x14>)
 800f78e:	6811      	ldr	r1, [r2, #0]
 800f790:	4603      	mov	r3, r0
 800f792:	b909      	cbnz	r1, 800f798 <_sbrk+0xc>
 800f794:	4903      	ldr	r1, [pc, #12]	@ (800f7a4 <_sbrk+0x18>)
 800f796:	6011      	str	r1, [r2, #0]
 800f798:	6810      	ldr	r0, [r2, #0]
 800f79a:	4403      	add	r3, r0
 800f79c:	6013      	str	r3, [r2, #0]
 800f79e:	4770      	bx	lr
 800f7a0:	200023c4 	.word	0x200023c4
 800f7a4:	200023c8 	.word	0x200023c8

0800f7a8 <_init>:
 800f7a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7aa:	bf00      	nop
 800f7ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f7ae:	bc08      	pop	{r3}
 800f7b0:	469e      	mov	lr, r3
 800f7b2:	4770      	bx	lr

0800f7b4 <_fini>:
 800f7b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7b6:	bf00      	nop
 800f7b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f7ba:	bc08      	pop	{r3}
 800f7bc:	469e      	mov	lr, r3
 800f7be:	4770      	bx	lr
