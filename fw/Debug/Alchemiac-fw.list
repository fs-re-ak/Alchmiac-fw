
Alchemiac-fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f9cc  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001690  0800fb0c  0800fb0c  00010b0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801119c  0801119c  0001219c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080111a4  080111a4  000121a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080111a8  080111a8  000121a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000080  20000008  080111ac  00013008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 0000001d  20000088  0801122c  00013088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  200000a8  08011249  000130a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002320  200000bc  0801125a  000130bc  2**2
                  ALLOC
 10 ._user_heap_stack 00001404  200023dc  0801125a  000133dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00013d8b  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  00014000  2**2
                  ALLOC
 13 MB_MEM1       000001bb  20030028  20030028  00014000  2**2
                  ALLOC
 14 .MB_MEM2      00000ba7  200301e4  0801125a  000131e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 15 .debug_info   000387c1  00000000  00000000  00013dbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 000073f2  00000000  00000000  0004c57c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000033e8  00000000  00000000  00053970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 0000283f  00000000  00000000  00056d58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002f4e3  00000000  00000000  00059597  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0003d1a2  00000000  00000000  00088a7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    001095b4  00000000  00000000  000c5c1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  001cf1d0  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000e6e8  00000000  00000000  001cf214  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 0000005a  00000000  00000000  001dd8fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200000bc 	.word	0x200000bc
 800015c:	00000000 	.word	0x00000000
 8000160:	0800faf4 	.word	0x0800faf4

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200000c0 	.word	0x200000c0
 800017c:	0800faf4 	.word	0x0800faf4

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_dmul>:
 8000230:	b570      	push	{r4, r5, r6, lr}
 8000232:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000236:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800023a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800023e:	bf1d      	ittte	ne
 8000240:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000244:	ea94 0f0c 	teqne	r4, ip
 8000248:	ea95 0f0c 	teqne	r5, ip
 800024c:	f000 f8de 	bleq	800040c <__aeabi_dmul+0x1dc>
 8000250:	442c      	add	r4, r5
 8000252:	ea81 0603 	eor.w	r6, r1, r3
 8000256:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800025a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800025e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000262:	bf18      	it	ne
 8000264:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000268:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800026c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000270:	d038      	beq.n	80002e4 <__aeabi_dmul+0xb4>
 8000272:	fba0 ce02 	umull	ip, lr, r0, r2
 8000276:	f04f 0500 	mov.w	r5, #0
 800027a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800027e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000282:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000286:	f04f 0600 	mov.w	r6, #0
 800028a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800028e:	f09c 0f00 	teq	ip, #0
 8000292:	bf18      	it	ne
 8000294:	f04e 0e01 	orrne.w	lr, lr, #1
 8000298:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800029c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80002a0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80002a4:	d204      	bcs.n	80002b0 <__aeabi_dmul+0x80>
 80002a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002aa:	416d      	adcs	r5, r5
 80002ac:	eb46 0606 	adc.w	r6, r6, r6
 80002b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002c4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80002c8:	bf88      	it	hi
 80002ca:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80002ce:	d81e      	bhi.n	800030e <__aeabi_dmul+0xde>
 80002d0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80002d4:	bf08      	it	eq
 80002d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002da:	f150 0000 	adcs.w	r0, r0, #0
 80002de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002e2:	bd70      	pop	{r4, r5, r6, pc}
 80002e4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80002e8:	ea46 0101 	orr.w	r1, r6, r1
 80002ec:	ea40 0002 	orr.w	r0, r0, r2
 80002f0:	ea81 0103 	eor.w	r1, r1, r3
 80002f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002f8:	bfc2      	ittt	gt
 80002fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000302:	bd70      	popgt	{r4, r5, r6, pc}
 8000304:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000308:	f04f 0e00 	mov.w	lr, #0
 800030c:	3c01      	subs	r4, #1
 800030e:	f300 80ab 	bgt.w	8000468 <__aeabi_dmul+0x238>
 8000312:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000316:	bfde      	ittt	le
 8000318:	2000      	movle	r0, #0
 800031a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800031e:	bd70      	pople	{r4, r5, r6, pc}
 8000320:	f1c4 0400 	rsb	r4, r4, #0
 8000324:	3c20      	subs	r4, #32
 8000326:	da35      	bge.n	8000394 <__aeabi_dmul+0x164>
 8000328:	340c      	adds	r4, #12
 800032a:	dc1b      	bgt.n	8000364 <__aeabi_dmul+0x134>
 800032c:	f104 0414 	add.w	r4, r4, #20
 8000330:	f1c4 0520 	rsb	r5, r4, #32
 8000334:	fa00 f305 	lsl.w	r3, r0, r5
 8000338:	fa20 f004 	lsr.w	r0, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea40 0002 	orr.w	r0, r0, r2
 8000344:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000348:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800034c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000350:	fa21 f604 	lsr.w	r6, r1, r4
 8000354:	eb42 0106 	adc.w	r1, r2, r6
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f1c4 040c 	rsb	r4, r4, #12
 8000368:	f1c4 0520 	rsb	r5, r4, #32
 800036c:	fa00 f304 	lsl.w	r3, r0, r4
 8000370:	fa20 f005 	lsr.w	r0, r0, r5
 8000374:	fa01 f204 	lsl.w	r2, r1, r4
 8000378:	ea40 0002 	orr.w	r0, r0, r2
 800037c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000380:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000384:	f141 0100 	adc.w	r1, r1, #0
 8000388:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800038c:	bf08      	it	eq
 800038e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000392:	bd70      	pop	{r4, r5, r6, pc}
 8000394:	f1c4 0520 	rsb	r5, r4, #32
 8000398:	fa00 f205 	lsl.w	r2, r0, r5
 800039c:	ea4e 0e02 	orr.w	lr, lr, r2
 80003a0:	fa20 f304 	lsr.w	r3, r0, r4
 80003a4:	fa01 f205 	lsl.w	r2, r1, r5
 80003a8:	ea43 0302 	orr.w	r3, r3, r2
 80003ac:	fa21 f004 	lsr.w	r0, r1, r4
 80003b0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003b4:	fa21 f204 	lsr.w	r2, r1, r4
 80003b8:	ea20 0002 	bic.w	r0, r0, r2
 80003bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003c4:	bf08      	it	eq
 80003c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003ca:	bd70      	pop	{r4, r5, r6, pc}
 80003cc:	f094 0f00 	teq	r4, #0
 80003d0:	d10f      	bne.n	80003f2 <__aeabi_dmul+0x1c2>
 80003d2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80003d6:	0040      	lsls	r0, r0, #1
 80003d8:	eb41 0101 	adc.w	r1, r1, r1
 80003dc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80003e0:	bf08      	it	eq
 80003e2:	3c01      	subeq	r4, #1
 80003e4:	d0f7      	beq.n	80003d6 <__aeabi_dmul+0x1a6>
 80003e6:	ea41 0106 	orr.w	r1, r1, r6
 80003ea:	f095 0f00 	teq	r5, #0
 80003ee:	bf18      	it	ne
 80003f0:	4770      	bxne	lr
 80003f2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80003f6:	0052      	lsls	r2, r2, #1
 80003f8:	eb43 0303 	adc.w	r3, r3, r3
 80003fc:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000400:	bf08      	it	eq
 8000402:	3d01      	subeq	r5, #1
 8000404:	d0f7      	beq.n	80003f6 <__aeabi_dmul+0x1c6>
 8000406:	ea43 0306 	orr.w	r3, r3, r6
 800040a:	4770      	bx	lr
 800040c:	ea94 0f0c 	teq	r4, ip
 8000410:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000414:	bf18      	it	ne
 8000416:	ea95 0f0c 	teqne	r5, ip
 800041a:	d00c      	beq.n	8000436 <__aeabi_dmul+0x206>
 800041c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000420:	bf18      	it	ne
 8000422:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000426:	d1d1      	bne.n	80003cc <__aeabi_dmul+0x19c>
 8000428:	ea81 0103 	eor.w	r1, r1, r3
 800042c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000430:	f04f 0000 	mov.w	r0, #0
 8000434:	bd70      	pop	{r4, r5, r6, pc}
 8000436:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800043a:	bf06      	itte	eq
 800043c:	4610      	moveq	r0, r2
 800043e:	4619      	moveq	r1, r3
 8000440:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000444:	d019      	beq.n	800047a <__aeabi_dmul+0x24a>
 8000446:	ea94 0f0c 	teq	r4, ip
 800044a:	d102      	bne.n	8000452 <__aeabi_dmul+0x222>
 800044c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000450:	d113      	bne.n	800047a <__aeabi_dmul+0x24a>
 8000452:	ea95 0f0c 	teq	r5, ip
 8000456:	d105      	bne.n	8000464 <__aeabi_dmul+0x234>
 8000458:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800045c:	bf1c      	itt	ne
 800045e:	4610      	movne	r0, r2
 8000460:	4619      	movne	r1, r3
 8000462:	d10a      	bne.n	800047a <__aeabi_dmul+0x24a>
 8000464:	ea81 0103 	eor.w	r1, r1, r3
 8000468:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800046c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000470:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000474:	f04f 0000 	mov.w	r0, #0
 8000478:	bd70      	pop	{r4, r5, r6, pc}
 800047a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800047e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000482:	bd70      	pop	{r4, r5, r6, pc}

08000484 <__aeabi_drsub>:
 8000484:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000488:	e002      	b.n	8000490 <__adddf3>
 800048a:	bf00      	nop

0800048c <__aeabi_dsub>:
 800048c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000490 <__adddf3>:
 8000490:	b530      	push	{r4, r5, lr}
 8000492:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000496:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800049a:	ea94 0f05 	teq	r4, r5
 800049e:	bf08      	it	eq
 80004a0:	ea90 0f02 	teqeq	r0, r2
 80004a4:	bf1f      	itttt	ne
 80004a6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004aa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004ae:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004b2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b6:	f000 80e2 	beq.w	800067e <__adddf3+0x1ee>
 80004ba:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004be:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004c2:	bfb8      	it	lt
 80004c4:	426d      	neglt	r5, r5
 80004c6:	dd0c      	ble.n	80004e2 <__adddf3+0x52>
 80004c8:	442c      	add	r4, r5
 80004ca:	ea80 0202 	eor.w	r2, r0, r2
 80004ce:	ea81 0303 	eor.w	r3, r1, r3
 80004d2:	ea82 0000 	eor.w	r0, r2, r0
 80004d6:	ea83 0101 	eor.w	r1, r3, r1
 80004da:	ea80 0202 	eor.w	r2, r0, r2
 80004de:	ea81 0303 	eor.w	r3, r1, r3
 80004e2:	2d36      	cmp	r5, #54	@ 0x36
 80004e4:	bf88      	it	hi
 80004e6:	bd30      	pophi	{r4, r5, pc}
 80004e8:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80004ec:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004f0:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80004f4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004f8:	d002      	beq.n	8000500 <__adddf3+0x70>
 80004fa:	4240      	negs	r0, r0
 80004fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000500:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000504:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000508:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800050c:	d002      	beq.n	8000514 <__adddf3+0x84>
 800050e:	4252      	negs	r2, r2
 8000510:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000514:	ea94 0f05 	teq	r4, r5
 8000518:	f000 80a7 	beq.w	800066a <__adddf3+0x1da>
 800051c:	f1a4 0401 	sub.w	r4, r4, #1
 8000520:	f1d5 0e20 	rsbs	lr, r5, #32
 8000524:	db0d      	blt.n	8000542 <__adddf3+0xb2>
 8000526:	fa02 fc0e 	lsl.w	ip, r2, lr
 800052a:	fa22 f205 	lsr.w	r2, r2, r5
 800052e:	1880      	adds	r0, r0, r2
 8000530:	f141 0100 	adc.w	r1, r1, #0
 8000534:	fa03 f20e 	lsl.w	r2, r3, lr
 8000538:	1880      	adds	r0, r0, r2
 800053a:	fa43 f305 	asr.w	r3, r3, r5
 800053e:	4159      	adcs	r1, r3
 8000540:	e00e      	b.n	8000560 <__adddf3+0xd0>
 8000542:	f1a5 0520 	sub.w	r5, r5, #32
 8000546:	f10e 0e20 	add.w	lr, lr, #32
 800054a:	2a01      	cmp	r2, #1
 800054c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000550:	bf28      	it	cs
 8000552:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000556:	fa43 f305 	asr.w	r3, r3, r5
 800055a:	18c0      	adds	r0, r0, r3
 800055c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000560:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000564:	d507      	bpl.n	8000576 <__adddf3+0xe6>
 8000566:	f04f 0e00 	mov.w	lr, #0
 800056a:	f1dc 0c00 	rsbs	ip, ip, #0
 800056e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000572:	eb6e 0101 	sbc.w	r1, lr, r1
 8000576:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800057a:	d31b      	bcc.n	80005b4 <__adddf3+0x124>
 800057c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000580:	d30c      	bcc.n	800059c <__adddf3+0x10c>
 8000582:	0849      	lsrs	r1, r1, #1
 8000584:	ea5f 0030 	movs.w	r0, r0, rrx
 8000588:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800058c:	f104 0401 	add.w	r4, r4, #1
 8000590:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000594:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000598:	f080 809a 	bcs.w	80006d0 <__adddf3+0x240>
 800059c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80005a0:	bf08      	it	eq
 80005a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005a6:	f150 0000 	adcs.w	r0, r0, #0
 80005aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ae:	ea41 0105 	orr.w	r1, r1, r5
 80005b2:	bd30      	pop	{r4, r5, pc}
 80005b4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005b8:	4140      	adcs	r0, r0
 80005ba:	eb41 0101 	adc.w	r1, r1, r1
 80005be:	3c01      	subs	r4, #1
 80005c0:	bf28      	it	cs
 80005c2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80005c6:	d2e9      	bcs.n	800059c <__adddf3+0x10c>
 80005c8:	f091 0f00 	teq	r1, #0
 80005cc:	bf04      	itt	eq
 80005ce:	4601      	moveq	r1, r0
 80005d0:	2000      	moveq	r0, #0
 80005d2:	fab1 f381 	clz	r3, r1
 80005d6:	bf08      	it	eq
 80005d8:	3320      	addeq	r3, #32
 80005da:	f1a3 030b 	sub.w	r3, r3, #11
 80005de:	f1b3 0220 	subs.w	r2, r3, #32
 80005e2:	da0c      	bge.n	80005fe <__adddf3+0x16e>
 80005e4:	320c      	adds	r2, #12
 80005e6:	dd08      	ble.n	80005fa <__adddf3+0x16a>
 80005e8:	f102 0c14 	add.w	ip, r2, #20
 80005ec:	f1c2 020c 	rsb	r2, r2, #12
 80005f0:	fa01 f00c 	lsl.w	r0, r1, ip
 80005f4:	fa21 f102 	lsr.w	r1, r1, r2
 80005f8:	e00c      	b.n	8000614 <__adddf3+0x184>
 80005fa:	f102 0214 	add.w	r2, r2, #20
 80005fe:	bfd8      	it	le
 8000600:	f1c2 0c20 	rsble	ip, r2, #32
 8000604:	fa01 f102 	lsl.w	r1, r1, r2
 8000608:	fa20 fc0c 	lsr.w	ip, r0, ip
 800060c:	bfdc      	itt	le
 800060e:	ea41 010c 	orrle.w	r1, r1, ip
 8000612:	4090      	lslle	r0, r2
 8000614:	1ae4      	subs	r4, r4, r3
 8000616:	bfa2      	ittt	ge
 8000618:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800061c:	4329      	orrge	r1, r5
 800061e:	bd30      	popge	{r4, r5, pc}
 8000620:	ea6f 0404 	mvn.w	r4, r4
 8000624:	3c1f      	subs	r4, #31
 8000626:	da1c      	bge.n	8000662 <__adddf3+0x1d2>
 8000628:	340c      	adds	r4, #12
 800062a:	dc0e      	bgt.n	800064a <__adddf3+0x1ba>
 800062c:	f104 0414 	add.w	r4, r4, #20
 8000630:	f1c4 0220 	rsb	r2, r4, #32
 8000634:	fa20 f004 	lsr.w	r0, r0, r4
 8000638:	fa01 f302 	lsl.w	r3, r1, r2
 800063c:	ea40 0003 	orr.w	r0, r0, r3
 8000640:	fa21 f304 	lsr.w	r3, r1, r4
 8000644:	ea45 0103 	orr.w	r1, r5, r3
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	f1c4 040c 	rsb	r4, r4, #12
 800064e:	f1c4 0220 	rsb	r2, r4, #32
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 f304 	lsl.w	r3, r1, r4
 800065a:	ea40 0003 	orr.w	r0, r0, r3
 800065e:	4629      	mov	r1, r5
 8000660:	bd30      	pop	{r4, r5, pc}
 8000662:	fa21 f004 	lsr.w	r0, r1, r4
 8000666:	4629      	mov	r1, r5
 8000668:	bd30      	pop	{r4, r5, pc}
 800066a:	f094 0f00 	teq	r4, #0
 800066e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000672:	bf06      	itte	eq
 8000674:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000678:	3401      	addeq	r4, #1
 800067a:	3d01      	subne	r5, #1
 800067c:	e74e      	b.n	800051c <__adddf3+0x8c>
 800067e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000682:	bf18      	it	ne
 8000684:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000688:	d029      	beq.n	80006de <__adddf3+0x24e>
 800068a:	ea94 0f05 	teq	r4, r5
 800068e:	bf08      	it	eq
 8000690:	ea90 0f02 	teqeq	r0, r2
 8000694:	d005      	beq.n	80006a2 <__adddf3+0x212>
 8000696:	ea54 0c00 	orrs.w	ip, r4, r0
 800069a:	bf04      	itt	eq
 800069c:	4619      	moveq	r1, r3
 800069e:	4610      	moveq	r0, r2
 80006a0:	bd30      	pop	{r4, r5, pc}
 80006a2:	ea91 0f03 	teq	r1, r3
 80006a6:	bf1e      	ittt	ne
 80006a8:	2100      	movne	r1, #0
 80006aa:	2000      	movne	r0, #0
 80006ac:	bd30      	popne	{r4, r5, pc}
 80006ae:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006b2:	d105      	bne.n	80006c0 <__adddf3+0x230>
 80006b4:	0040      	lsls	r0, r0, #1
 80006b6:	4149      	adcs	r1, r1
 80006b8:	bf28      	it	cs
 80006ba:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80006be:	bd30      	pop	{r4, r5, pc}
 80006c0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80006c4:	bf3c      	itt	cc
 80006c6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80006ca:	bd30      	popcc	{r4, r5, pc}
 80006cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006d0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80006d4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd30      	pop	{r4, r5, pc}
 80006de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006e2:	bf1a      	itte	ne
 80006e4:	4619      	movne	r1, r3
 80006e6:	4610      	movne	r0, r2
 80006e8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006ec:	bf1c      	itt	ne
 80006ee:	460b      	movne	r3, r1
 80006f0:	4602      	movne	r2, r0
 80006f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006f6:	bf06      	itte	eq
 80006f8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006fc:	ea91 0f03 	teqeq	r1, r3
 8000700:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000704:	bd30      	pop	{r4, r5, pc}
 8000706:	bf00      	nop

08000708 <__aeabi_ui2d>:
 8000708:	f090 0f00 	teq	r0, #0
 800070c:	bf04      	itt	eq
 800070e:	2100      	moveq	r1, #0
 8000710:	4770      	bxeq	lr
 8000712:	b530      	push	{r4, r5, lr}
 8000714:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000718:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800071c:	f04f 0500 	mov.w	r5, #0
 8000720:	f04f 0100 	mov.w	r1, #0
 8000724:	e750      	b.n	80005c8 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_i2d>:
 8000728:	f090 0f00 	teq	r0, #0
 800072c:	bf04      	itt	eq
 800072e:	2100      	moveq	r1, #0
 8000730:	4770      	bxeq	lr
 8000732:	b530      	push	{r4, r5, lr}
 8000734:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000738:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800073c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000740:	bf48      	it	mi
 8000742:	4240      	negmi	r0, r0
 8000744:	f04f 0100 	mov.w	r1, #0
 8000748:	e73e      	b.n	80005c8 <__adddf3+0x138>
 800074a:	bf00      	nop

0800074c <__aeabi_f2d>:
 800074c:	0042      	lsls	r2, r0, #1
 800074e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000752:	ea4f 0131 	mov.w	r1, r1, rrx
 8000756:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800075a:	bf1f      	itttt	ne
 800075c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000760:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000764:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000768:	4770      	bxne	lr
 800076a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800076e:	bf08      	it	eq
 8000770:	4770      	bxeq	lr
 8000772:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000776:	bf04      	itt	eq
 8000778:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800077c:	4770      	bxeq	lr
 800077e:	b530      	push	{r4, r5, lr}
 8000780:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000784:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000788:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	e71c      	b.n	80005c8 <__adddf3+0x138>
 800078e:	bf00      	nop

08000790 <__aeabi_ul2d>:
 8000790:	ea50 0201 	orrs.w	r2, r0, r1
 8000794:	bf08      	it	eq
 8000796:	4770      	bxeq	lr
 8000798:	b530      	push	{r4, r5, lr}
 800079a:	f04f 0500 	mov.w	r5, #0
 800079e:	e00a      	b.n	80007b6 <__aeabi_l2d+0x16>

080007a0 <__aeabi_l2d>:
 80007a0:	ea50 0201 	orrs.w	r2, r0, r1
 80007a4:	bf08      	it	eq
 80007a6:	4770      	bxeq	lr
 80007a8:	b530      	push	{r4, r5, lr}
 80007aa:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80007ae:	d502      	bpl.n	80007b6 <__aeabi_l2d+0x16>
 80007b0:	4240      	negs	r0, r0
 80007b2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007b6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007ba:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007be:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007c2:	f43f aed8 	beq.w	8000576 <__adddf3+0xe6>
 80007c6:	f04f 0203 	mov.w	r2, #3
 80007ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007ce:	bf18      	it	ne
 80007d0:	3203      	addne	r2, #3
 80007d2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007d6:	bf18      	it	ne
 80007d8:	3203      	addne	r2, #3
 80007da:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007de:	f1c2 0320 	rsb	r3, r2, #32
 80007e2:	fa00 fc03 	lsl.w	ip, r0, r3
 80007e6:	fa20 f002 	lsr.w	r0, r0, r2
 80007ea:	fa01 fe03 	lsl.w	lr, r1, r3
 80007ee:	ea40 000e 	orr.w	r0, r0, lr
 80007f2:	fa21 f102 	lsr.w	r1, r1, r2
 80007f6:	4414      	add	r4, r2
 80007f8:	e6bd      	b.n	8000576 <__adddf3+0xe6>
 80007fa:	bf00      	nop

080007fc <__aeabi_uldivmod>:
 80007fc:	b953      	cbnz	r3, 8000814 <__aeabi_uldivmod+0x18>
 80007fe:	b94a      	cbnz	r2, 8000814 <__aeabi_uldivmod+0x18>
 8000800:	2900      	cmp	r1, #0
 8000802:	bf08      	it	eq
 8000804:	2800      	cmpeq	r0, #0
 8000806:	bf1c      	itt	ne
 8000808:	f04f 31ff 	movne.w	r1, #4294967295
 800080c:	f04f 30ff 	movne.w	r0, #4294967295
 8000810:	f000 b96a 	b.w	8000ae8 <__aeabi_idiv0>
 8000814:	f1ad 0c08 	sub.w	ip, sp, #8
 8000818:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800081c:	f000 f806 	bl	800082c <__udivmoddi4>
 8000820:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000824:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000828:	b004      	add	sp, #16
 800082a:	4770      	bx	lr

0800082c <__udivmoddi4>:
 800082c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000830:	9d08      	ldr	r5, [sp, #32]
 8000832:	460c      	mov	r4, r1
 8000834:	2b00      	cmp	r3, #0
 8000836:	d14e      	bne.n	80008d6 <__udivmoddi4+0xaa>
 8000838:	4694      	mov	ip, r2
 800083a:	458c      	cmp	ip, r1
 800083c:	4686      	mov	lr, r0
 800083e:	fab2 f282 	clz	r2, r2
 8000842:	d962      	bls.n	800090a <__udivmoddi4+0xde>
 8000844:	b14a      	cbz	r2, 800085a <__udivmoddi4+0x2e>
 8000846:	f1c2 0320 	rsb	r3, r2, #32
 800084a:	4091      	lsls	r1, r2
 800084c:	fa20 f303 	lsr.w	r3, r0, r3
 8000850:	fa0c fc02 	lsl.w	ip, ip, r2
 8000854:	4319      	orrs	r1, r3
 8000856:	fa00 fe02 	lsl.w	lr, r0, r2
 800085a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800085e:	fa1f f68c 	uxth.w	r6, ip
 8000862:	fbb1 f4f7 	udiv	r4, r1, r7
 8000866:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800086a:	fb07 1114 	mls	r1, r7, r4, r1
 800086e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000872:	fb04 f106 	mul.w	r1, r4, r6
 8000876:	4299      	cmp	r1, r3
 8000878:	d90a      	bls.n	8000890 <__udivmoddi4+0x64>
 800087a:	eb1c 0303 	adds.w	r3, ip, r3
 800087e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000882:	f080 8112 	bcs.w	8000aaa <__udivmoddi4+0x27e>
 8000886:	4299      	cmp	r1, r3
 8000888:	f240 810f 	bls.w	8000aaa <__udivmoddi4+0x27e>
 800088c:	3c02      	subs	r4, #2
 800088e:	4463      	add	r3, ip
 8000890:	1a59      	subs	r1, r3, r1
 8000892:	fa1f f38e 	uxth.w	r3, lr
 8000896:	fbb1 f0f7 	udiv	r0, r1, r7
 800089a:	fb07 1110 	mls	r1, r7, r0, r1
 800089e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008a2:	fb00 f606 	mul.w	r6, r0, r6
 80008a6:	429e      	cmp	r6, r3
 80008a8:	d90a      	bls.n	80008c0 <__udivmoddi4+0x94>
 80008aa:	eb1c 0303 	adds.w	r3, ip, r3
 80008ae:	f100 31ff 	add.w	r1, r0, #4294967295
 80008b2:	f080 80fc 	bcs.w	8000aae <__udivmoddi4+0x282>
 80008b6:	429e      	cmp	r6, r3
 80008b8:	f240 80f9 	bls.w	8000aae <__udivmoddi4+0x282>
 80008bc:	4463      	add	r3, ip
 80008be:	3802      	subs	r0, #2
 80008c0:	1b9b      	subs	r3, r3, r6
 80008c2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80008c6:	2100      	movs	r1, #0
 80008c8:	b11d      	cbz	r5, 80008d2 <__udivmoddi4+0xa6>
 80008ca:	40d3      	lsrs	r3, r2
 80008cc:	2200      	movs	r2, #0
 80008ce:	e9c5 3200 	strd	r3, r2, [r5]
 80008d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008d6:	428b      	cmp	r3, r1
 80008d8:	d905      	bls.n	80008e6 <__udivmoddi4+0xba>
 80008da:	b10d      	cbz	r5, 80008e0 <__udivmoddi4+0xb4>
 80008dc:	e9c5 0100 	strd	r0, r1, [r5]
 80008e0:	2100      	movs	r1, #0
 80008e2:	4608      	mov	r0, r1
 80008e4:	e7f5      	b.n	80008d2 <__udivmoddi4+0xa6>
 80008e6:	fab3 f183 	clz	r1, r3
 80008ea:	2900      	cmp	r1, #0
 80008ec:	d146      	bne.n	800097c <__udivmoddi4+0x150>
 80008ee:	42a3      	cmp	r3, r4
 80008f0:	d302      	bcc.n	80008f8 <__udivmoddi4+0xcc>
 80008f2:	4290      	cmp	r0, r2
 80008f4:	f0c0 80f0 	bcc.w	8000ad8 <__udivmoddi4+0x2ac>
 80008f8:	1a86      	subs	r6, r0, r2
 80008fa:	eb64 0303 	sbc.w	r3, r4, r3
 80008fe:	2001      	movs	r0, #1
 8000900:	2d00      	cmp	r5, #0
 8000902:	d0e6      	beq.n	80008d2 <__udivmoddi4+0xa6>
 8000904:	e9c5 6300 	strd	r6, r3, [r5]
 8000908:	e7e3      	b.n	80008d2 <__udivmoddi4+0xa6>
 800090a:	2a00      	cmp	r2, #0
 800090c:	f040 8090 	bne.w	8000a30 <__udivmoddi4+0x204>
 8000910:	eba1 040c 	sub.w	r4, r1, ip
 8000914:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000918:	fa1f f78c 	uxth.w	r7, ip
 800091c:	2101      	movs	r1, #1
 800091e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000922:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000926:	fb08 4416 	mls	r4, r8, r6, r4
 800092a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800092e:	fb07 f006 	mul.w	r0, r7, r6
 8000932:	4298      	cmp	r0, r3
 8000934:	d908      	bls.n	8000948 <__udivmoddi4+0x11c>
 8000936:	eb1c 0303 	adds.w	r3, ip, r3
 800093a:	f106 34ff 	add.w	r4, r6, #4294967295
 800093e:	d202      	bcs.n	8000946 <__udivmoddi4+0x11a>
 8000940:	4298      	cmp	r0, r3
 8000942:	f200 80cd 	bhi.w	8000ae0 <__udivmoddi4+0x2b4>
 8000946:	4626      	mov	r6, r4
 8000948:	1a1c      	subs	r4, r3, r0
 800094a:	fa1f f38e 	uxth.w	r3, lr
 800094e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000952:	fb08 4410 	mls	r4, r8, r0, r4
 8000956:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800095a:	fb00 f707 	mul.w	r7, r0, r7
 800095e:	429f      	cmp	r7, r3
 8000960:	d908      	bls.n	8000974 <__udivmoddi4+0x148>
 8000962:	eb1c 0303 	adds.w	r3, ip, r3
 8000966:	f100 34ff 	add.w	r4, r0, #4294967295
 800096a:	d202      	bcs.n	8000972 <__udivmoddi4+0x146>
 800096c:	429f      	cmp	r7, r3
 800096e:	f200 80b0 	bhi.w	8000ad2 <__udivmoddi4+0x2a6>
 8000972:	4620      	mov	r0, r4
 8000974:	1bdb      	subs	r3, r3, r7
 8000976:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800097a:	e7a5      	b.n	80008c8 <__udivmoddi4+0x9c>
 800097c:	f1c1 0620 	rsb	r6, r1, #32
 8000980:	408b      	lsls	r3, r1
 8000982:	fa22 f706 	lsr.w	r7, r2, r6
 8000986:	431f      	orrs	r7, r3
 8000988:	fa20 fc06 	lsr.w	ip, r0, r6
 800098c:	fa04 f301 	lsl.w	r3, r4, r1
 8000990:	ea43 030c 	orr.w	r3, r3, ip
 8000994:	40f4      	lsrs	r4, r6
 8000996:	fa00 f801 	lsl.w	r8, r0, r1
 800099a:	0c38      	lsrs	r0, r7, #16
 800099c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80009a0:	fbb4 fef0 	udiv	lr, r4, r0
 80009a4:	fa1f fc87 	uxth.w	ip, r7
 80009a8:	fb00 441e 	mls	r4, r0, lr, r4
 80009ac:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80009b0:	fb0e f90c 	mul.w	r9, lr, ip
 80009b4:	45a1      	cmp	r9, r4
 80009b6:	fa02 f201 	lsl.w	r2, r2, r1
 80009ba:	d90a      	bls.n	80009d2 <__udivmoddi4+0x1a6>
 80009bc:	193c      	adds	r4, r7, r4
 80009be:	f10e 3aff 	add.w	sl, lr, #4294967295
 80009c2:	f080 8084 	bcs.w	8000ace <__udivmoddi4+0x2a2>
 80009c6:	45a1      	cmp	r9, r4
 80009c8:	f240 8081 	bls.w	8000ace <__udivmoddi4+0x2a2>
 80009cc:	f1ae 0e02 	sub.w	lr, lr, #2
 80009d0:	443c      	add	r4, r7
 80009d2:	eba4 0409 	sub.w	r4, r4, r9
 80009d6:	fa1f f983 	uxth.w	r9, r3
 80009da:	fbb4 f3f0 	udiv	r3, r4, r0
 80009de:	fb00 4413 	mls	r4, r0, r3, r4
 80009e2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80009e6:	fb03 fc0c 	mul.w	ip, r3, ip
 80009ea:	45a4      	cmp	ip, r4
 80009ec:	d907      	bls.n	80009fe <__udivmoddi4+0x1d2>
 80009ee:	193c      	adds	r4, r7, r4
 80009f0:	f103 30ff 	add.w	r0, r3, #4294967295
 80009f4:	d267      	bcs.n	8000ac6 <__udivmoddi4+0x29a>
 80009f6:	45a4      	cmp	ip, r4
 80009f8:	d965      	bls.n	8000ac6 <__udivmoddi4+0x29a>
 80009fa:	3b02      	subs	r3, #2
 80009fc:	443c      	add	r4, r7
 80009fe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000a02:	fba0 9302 	umull	r9, r3, r0, r2
 8000a06:	eba4 040c 	sub.w	r4, r4, ip
 8000a0a:	429c      	cmp	r4, r3
 8000a0c:	46ce      	mov	lr, r9
 8000a0e:	469c      	mov	ip, r3
 8000a10:	d351      	bcc.n	8000ab6 <__udivmoddi4+0x28a>
 8000a12:	d04e      	beq.n	8000ab2 <__udivmoddi4+0x286>
 8000a14:	b155      	cbz	r5, 8000a2c <__udivmoddi4+0x200>
 8000a16:	ebb8 030e 	subs.w	r3, r8, lr
 8000a1a:	eb64 040c 	sbc.w	r4, r4, ip
 8000a1e:	fa04 f606 	lsl.w	r6, r4, r6
 8000a22:	40cb      	lsrs	r3, r1
 8000a24:	431e      	orrs	r6, r3
 8000a26:	40cc      	lsrs	r4, r1
 8000a28:	e9c5 6400 	strd	r6, r4, [r5]
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	e750      	b.n	80008d2 <__udivmoddi4+0xa6>
 8000a30:	f1c2 0320 	rsb	r3, r2, #32
 8000a34:	fa20 f103 	lsr.w	r1, r0, r3
 8000a38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a3c:	fa24 f303 	lsr.w	r3, r4, r3
 8000a40:	4094      	lsls	r4, r2
 8000a42:	430c      	orrs	r4, r1
 8000a44:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a48:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a4c:	fa1f f78c 	uxth.w	r7, ip
 8000a50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a54:	fb08 3110 	mls	r1, r8, r0, r3
 8000a58:	0c23      	lsrs	r3, r4, #16
 8000a5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a5e:	fb00 f107 	mul.w	r1, r0, r7
 8000a62:	4299      	cmp	r1, r3
 8000a64:	d908      	bls.n	8000a78 <__udivmoddi4+0x24c>
 8000a66:	eb1c 0303 	adds.w	r3, ip, r3
 8000a6a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000a6e:	d22c      	bcs.n	8000aca <__udivmoddi4+0x29e>
 8000a70:	4299      	cmp	r1, r3
 8000a72:	d92a      	bls.n	8000aca <__udivmoddi4+0x29e>
 8000a74:	3802      	subs	r0, #2
 8000a76:	4463      	add	r3, ip
 8000a78:	1a5b      	subs	r3, r3, r1
 8000a7a:	b2a4      	uxth	r4, r4
 8000a7c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000a80:	fb08 3311 	mls	r3, r8, r1, r3
 8000a84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a88:	fb01 f307 	mul.w	r3, r1, r7
 8000a8c:	42a3      	cmp	r3, r4
 8000a8e:	d908      	bls.n	8000aa2 <__udivmoddi4+0x276>
 8000a90:	eb1c 0404 	adds.w	r4, ip, r4
 8000a94:	f101 36ff 	add.w	r6, r1, #4294967295
 8000a98:	d213      	bcs.n	8000ac2 <__udivmoddi4+0x296>
 8000a9a:	42a3      	cmp	r3, r4
 8000a9c:	d911      	bls.n	8000ac2 <__udivmoddi4+0x296>
 8000a9e:	3902      	subs	r1, #2
 8000aa0:	4464      	add	r4, ip
 8000aa2:	1ae4      	subs	r4, r4, r3
 8000aa4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000aa8:	e739      	b.n	800091e <__udivmoddi4+0xf2>
 8000aaa:	4604      	mov	r4, r0
 8000aac:	e6f0      	b.n	8000890 <__udivmoddi4+0x64>
 8000aae:	4608      	mov	r0, r1
 8000ab0:	e706      	b.n	80008c0 <__udivmoddi4+0x94>
 8000ab2:	45c8      	cmp	r8, r9
 8000ab4:	d2ae      	bcs.n	8000a14 <__udivmoddi4+0x1e8>
 8000ab6:	ebb9 0e02 	subs.w	lr, r9, r2
 8000aba:	eb63 0c07 	sbc.w	ip, r3, r7
 8000abe:	3801      	subs	r0, #1
 8000ac0:	e7a8      	b.n	8000a14 <__udivmoddi4+0x1e8>
 8000ac2:	4631      	mov	r1, r6
 8000ac4:	e7ed      	b.n	8000aa2 <__udivmoddi4+0x276>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	e799      	b.n	80009fe <__udivmoddi4+0x1d2>
 8000aca:	4630      	mov	r0, r6
 8000acc:	e7d4      	b.n	8000a78 <__udivmoddi4+0x24c>
 8000ace:	46d6      	mov	lr, sl
 8000ad0:	e77f      	b.n	80009d2 <__udivmoddi4+0x1a6>
 8000ad2:	4463      	add	r3, ip
 8000ad4:	3802      	subs	r0, #2
 8000ad6:	e74d      	b.n	8000974 <__udivmoddi4+0x148>
 8000ad8:	4606      	mov	r6, r0
 8000ada:	4623      	mov	r3, r4
 8000adc:	4608      	mov	r0, r1
 8000ade:	e70f      	b.n	8000900 <__udivmoddi4+0xd4>
 8000ae0:	3e02      	subs	r6, #2
 8000ae2:	4463      	add	r3, ip
 8000ae4:	e730      	b.n	8000948 <__udivmoddi4+0x11c>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_idiv0>:
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <ADS1299_Init>:
static void PowerUpSequence();
void EEGRecordingSequence();



void ADS1299_Init(){
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0

	PowerUpSequence();
 8000af0:	f000 f802 	bl	8000af8 <PowerUpSequence>

}
 8000af4:	bf00      	nop
 8000af6:	bd80      	pop	{r7, pc}

08000af8 <PowerUpSequence>:



static void PowerUpSequence(){
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b084      	sub	sp, #16
 8000afc:	af00      	add	r7, sp, #0

	uint8_t i = 0;
 8000afe:	2300      	movs	r3, #0
 8000b00:	73fb      	strb	r3, [r7, #15]
	uint8_t register_value = 0x00;
 8000b02:	2300      	movs	r3, #0
 8000b04:	73bb      	strb	r3, [r7, #14]
	uint8_t channset_value[ADS1299_CHANNELS] = {0};
 8000b06:	2300      	movs	r3, #0
 8000b08:	607b      	str	r3, [r7, #4]
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	60bb      	str	r3, [r7, #8]

	setnReset(GPIO_PIN_RESET);
 8000b0e:	2000      	movs	r0, #0
 8000b10:	f000 f9f0 	bl	8000ef4 <setnReset>
	setnPWRdown(GPIO_PIN_RESET);
 8000b14:	2000      	movs	r0, #0
 8000b16:	f000 f9ff 	bl	8000f18 <setnPWRdown>
	setADS1299Start(GPIO_PIN_RESET);
 8000b1a:	2000      	movs	r0, #0
 8000b1c:	f000 fa0e 	bl	8000f3c <setADS1299Start>
	setADS1299CS(GPIO_PIN_SET);
 8000b20:	2001      	movs	r0, #1
 8000b22:	f000 fa1d 	bl	8000f60 <setADS1299CS>

	// Minimum delay after power on.
	HAL_Delay(POWER_UP_DELAY_MS);
 8000b26:	20c8      	movs	r0, #200	@ 0xc8
 8000b28:	f000 fdea 	bl	8001700 <HAL_Delay>

	setnReset(GPIO_PIN_SET);
 8000b2c:	2001      	movs	r0, #1
 8000b2e:	f000 f9e1 	bl	8000ef4 <setnReset>
	setnPWRdown(GPIO_PIN_SET);
 8000b32:	2001      	movs	r0, #1
 8000b34:	f000 f9f0 	bl	8000f18 <setnPWRdown>
	HAL_Delay(1);
 8000b38:	2001      	movs	r0, #1
 8000b3a:	f000 fde1 	bl	8001700 <HAL_Delay>

	setnReset(GPIO_PIN_RESET);
 8000b3e:	2000      	movs	r0, #0
 8000b40:	f000 f9d8 	bl	8000ef4 <setnReset>
	HAL_Delay(1);
 8000b44:	2001      	movs	r0, #1
 8000b46:	f000 fddb 	bl	8001700 <HAL_Delay>
	setnReset(GPIO_PIN_SET);
 8000b4a:	2001      	movs	r0, #1
 8000b4c:	f000 f9d2 	bl	8000ef4 <setnReset>

	// Minimum delay after power on.
	HAL_Delay(POWER_UP_DELAY_MS);
 8000b50:	20c8      	movs	r0, #200	@ 0xc8
 8000b52:	f000 fdd5 	bl	8001700 <HAL_Delay>

	send_ads1299_command(ADS1299_SDATAC);
 8000b56:	2011      	movs	r0, #17
 8000b58:	f000 fa12 	bl	8000f80 <send_ads1299_command>

	register_value = 0x96;
 8000b5c:	2396      	movs	r3, #150	@ 0x96
 8000b5e:	73bb      	strb	r3, [r7, #14]
	write_ads1299_register(ADS1299_REG_CONFIG1, 1, &register_value);
 8000b60:	f107 030e 	add.w	r3, r7, #14
 8000b64:	461a      	mov	r2, r3
 8000b66:	2101      	movs	r1, #1
 8000b68:	2001      	movs	r0, #1
 8000b6a:	f000 fa2b 	bl	8000fc4 <write_ads1299_register>
	HAL_Delay(1);
 8000b6e:	2001      	movs	r0, #1
 8000b70:	f000 fdc6 	bl	8001700 <HAL_Delay>
	register_value = 0xC0;
 8000b74:	23c0      	movs	r3, #192	@ 0xc0
 8000b76:	73bb      	strb	r3, [r7, #14]
	write_ads1299_register(ADS1299_REG_CONFIG2, 1, &register_value);
 8000b78:	f107 030e 	add.w	r3, r7, #14
 8000b7c:	461a      	mov	r2, r3
 8000b7e:	2101      	movs	r1, #1
 8000b80:	2002      	movs	r0, #2
 8000b82:	f000 fa1f 	bl	8000fc4 <write_ads1299_register>
	HAL_Delay(1);
 8000b86:	2001      	movs	r0, #1
 8000b88:	f000 fdba 	bl	8001700 <HAL_Delay>
	register_value = 0xE0;
 8000b8c:	23e0      	movs	r3, #224	@ 0xe0
 8000b8e:	73bb      	strb	r3, [r7, #14]
	write_ads1299_register(ADS1299_REG_CONFIG3, 1, &register_value);
 8000b90:	f107 030e 	add.w	r3, r7, #14
 8000b94:	461a      	mov	r2, r3
 8000b96:	2101      	movs	r1, #1
 8000b98:	2003      	movs	r0, #3
 8000b9a:	f000 fa13 	bl	8000fc4 <write_ads1299_register>
	HAL_Delay(1);
 8000b9e:	2001      	movs	r0, #1
 8000ba0:	f000 fdae 	bl	8001700 <HAL_Delay>

	for(i=0;i<ADS1299_CHANNELS;i++){
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	73fb      	strb	r3, [r7, #15]
 8000ba8:	e008      	b.n	8000bbc <PowerUpSequence+0xc4>
		channset_value[i] = 0x01;
 8000baa:	7bfb      	ldrb	r3, [r7, #15]
 8000bac:	3310      	adds	r3, #16
 8000bae:	443b      	add	r3, r7
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(i=0;i<ADS1299_CHANNELS;i++){
 8000bb6:	7bfb      	ldrb	r3, [r7, #15]
 8000bb8:	3301      	adds	r3, #1
 8000bba:	73fb      	strb	r3, [r7, #15]
 8000bbc:	7bfb      	ldrb	r3, [r7, #15]
 8000bbe:	2b07      	cmp	r3, #7
 8000bc0:	d9f3      	bls.n	8000baa <PowerUpSequence+0xb2>
	}

	write_ads1299_register(ADS1299_REG_CH1SET, ADS1299_CHANNELS, channset_value);
 8000bc2:	1d3b      	adds	r3, r7, #4
 8000bc4:	461a      	mov	r2, r3
 8000bc6:	2108      	movs	r1, #8
 8000bc8:	2005      	movs	r0, #5
 8000bca:	f000 f9fb 	bl	8000fc4 <write_ads1299_register>
	HAL_Delay(1);
 8000bce:	2001      	movs	r0, #1
 8000bd0:	f000 fd96 	bl	8001700 <HAL_Delay>

	setADS1299Start(GPIO_PIN_SET);
 8000bd4:	2001      	movs	r0, #1
 8000bd6:	f000 f9b1 	bl	8000f3c <setADS1299Start>

	// Wait 1ms.
	HAL_Delay(1);
 8000bda:	2001      	movs	r0, #1
 8000bdc:	f000 fd90 	bl	8001700 <HAL_Delay>

	send_ads1299_command(ADS1299_RDATAC);
 8000be0:	2010      	movs	r0, #16
 8000be2:	f000 f9cd 	bl	8000f80 <send_ads1299_command>

	// Wait 1ms.
	HAL_Delay(20);
 8000be6:	2014      	movs	r0, #20
 8000be8:	f000 fd8a 	bl	8001700 <HAL_Delay>

	send_ads1299_command(ADS1299_SDATAC);
 8000bec:	2011      	movs	r0, #17
 8000bee:	f000 f9c7 	bl	8000f80 <send_ads1299_command>
	register_value = 0xD0;
 8000bf2:	23d0      	movs	r3, #208	@ 0xd0
 8000bf4:	73bb      	strb	r3, [r7, #14]
	write_ads1299_register(ADS1299_REG_CONFIG2, 1, &register_value);
 8000bf6:	f107 030e 	add.w	r3, r7, #14
 8000bfa:	461a      	mov	r2, r3
 8000bfc:	2101      	movs	r1, #1
 8000bfe:	2002      	movs	r0, #2
 8000c00:	f000 f9e0 	bl	8000fc4 <write_ads1299_register>
	HAL_Delay(1);
 8000c04:	2001      	movs	r0, #1
 8000c06:	f000 fd7b 	bl	8001700 <HAL_Delay>

	for(i=0;i<ADS1299_CHANNELS;i++){
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	73fb      	strb	r3, [r7, #15]
 8000c0e:	e008      	b.n	8000c22 <PowerUpSequence+0x12a>
		channset_value[i] = 0x55;
 8000c10:	7bfb      	ldrb	r3, [r7, #15]
 8000c12:	3310      	adds	r3, #16
 8000c14:	443b      	add	r3, r7
 8000c16:	2255      	movs	r2, #85	@ 0x55
 8000c18:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(i=0;i<ADS1299_CHANNELS;i++){
 8000c1c:	7bfb      	ldrb	r3, [r7, #15]
 8000c1e:	3301      	adds	r3, #1
 8000c20:	73fb      	strb	r3, [r7, #15]
 8000c22:	7bfb      	ldrb	r3, [r7, #15]
 8000c24:	2b07      	cmp	r3, #7
 8000c26:	d9f3      	bls.n	8000c10 <PowerUpSequence+0x118>
	}

	write_ads1299_register(ADS1299_REG_CH1SET, ADS1299_CHANNELS, channset_value);
 8000c28:	1d3b      	adds	r3, r7, #4
 8000c2a:	461a      	mov	r2, r3
 8000c2c:	2108      	movs	r1, #8
 8000c2e:	2005      	movs	r0, #5
 8000c30:	f000 f9c8 	bl	8000fc4 <write_ads1299_register>

	HAL_Delay(1);
 8000c34:	2001      	movs	r0, #1
 8000c36:	f000 fd63 	bl	8001700 <HAL_Delay>


	EEGRecordingSequence();
 8000c3a:	f000 f8ef 	bl	8000e1c <EEGRecordingSequence>

	send_ads1299_command(ADS1299_RDATAC);
 8000c3e:	2010      	movs	r0, #16
 8000c40:	f000 f99e 	bl	8000f80 <send_ads1299_command>

}
 8000c44:	bf00      	nop
 8000c46:	3710      	adds	r7, #16
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}

08000c4c <TestModeSequence>:


void TestModeSequence(){
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b084      	sub	sp, #16
 8000c50:	af00      	add	r7, sp, #0

	uint8_t i = 0;
 8000c52:	2300      	movs	r3, #0
 8000c54:	73fb      	strb	r3, [r7, #15]
	uint8_t register_value = 0x00;
 8000c56:	2300      	movs	r3, #0
 8000c58:	73bb      	strb	r3, [r7, #14]
	uint8_t channset_value[ADS1299_CHANNELS] = {0};
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	607b      	str	r3, [r7, #4]
 8000c5e:	2300      	movs	r3, #0
 8000c60:	60bb      	str	r3, [r7, #8]

	// Wait 1ms.
	HAL_Delay(20);
 8000c62:	2014      	movs	r0, #20
 8000c64:	f000 fd4c 	bl	8001700 <HAL_Delay>

	send_ads1299_command(ADS1299_SDATAC);
 8000c68:	2011      	movs	r0, #17
 8000c6a:	f000 f989 	bl	8000f80 <send_ads1299_command>

	register_value = 0x96;
 8000c6e:	2396      	movs	r3, #150	@ 0x96
 8000c70:	73bb      	strb	r3, [r7, #14]
	write_ads1299_register(ADS1299_REG_CONFIG1, 1, &register_value);
 8000c72:	f107 030e 	add.w	r3, r7, #14
 8000c76:	461a      	mov	r2, r3
 8000c78:	2101      	movs	r1, #1
 8000c7a:	2001      	movs	r0, #1
 8000c7c:	f000 f9a2 	bl	8000fc4 <write_ads1299_register>
	register_value = 0xD0;
 8000c80:	23d0      	movs	r3, #208	@ 0xd0
 8000c82:	73bb      	strb	r3, [r7, #14]
	write_ads1299_register(ADS1299_REG_CONFIG2, 1, &register_value);
 8000c84:	f107 030e 	add.w	r3, r7, #14
 8000c88:	461a      	mov	r2, r3
 8000c8a:	2101      	movs	r1, #1
 8000c8c:	2002      	movs	r0, #2
 8000c8e:	f000 f999 	bl	8000fc4 <write_ads1299_register>
	HAL_Delay(1);
 8000c92:	2001      	movs	r0, #1
 8000c94:	f000 fd34 	bl	8001700 <HAL_Delay>

	register_value = 0xE0; //BIAS-disabled
 8000c98:	23e0      	movs	r3, #224	@ 0xe0
 8000c9a:	73bb      	strb	r3, [r7, #14]
	write_ads1299_register(ADS1299_REG_CONFIG3, 1, &register_value);
 8000c9c:	f107 030e 	add.w	r3, r7, #14
 8000ca0:	461a      	mov	r2, r3
 8000ca2:	2101      	movs	r1, #1
 8000ca4:	2003      	movs	r0, #3
 8000ca6:	f000 f98d 	bl	8000fc4 <write_ads1299_register>
	HAL_Delay(1);
 8000caa:	2001      	movs	r0, #1
 8000cac:	f000 fd28 	bl	8001700 <HAL_Delay>
	register_value = 0x00; //BIAS-disabled
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	73bb      	strb	r3, [r7, #14]
	write_ads1299_register(ADS1299_REG_BIAS_SENSP, 1, &register_value);
 8000cb4:	f107 030e 	add.w	r3, r7, #14
 8000cb8:	461a      	mov	r2, r3
 8000cba:	2101      	movs	r1, #1
 8000cbc:	200d      	movs	r0, #13
 8000cbe:	f000 f981 	bl	8000fc4 <write_ads1299_register>
	HAL_Delay(1);
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	f000 fd1c 	bl	8001700 <HAL_Delay>
	register_value = 0x00;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	73bb      	strb	r3, [r7, #14]
	write_ads1299_register(ADS1299_REG_BIAS_SENSN, 1, &register_value);
 8000ccc:	f107 030e 	add.w	r3, r7, #14
 8000cd0:	461a      	mov	r2, r3
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	200e      	movs	r0, #14
 8000cd6:	f000 f975 	bl	8000fc4 <write_ads1299_register>
	HAL_Delay(1);
 8000cda:	2001      	movs	r0, #1
 8000cdc:	f000 fd10 	bl	8001700 <HAL_Delay>
	register_value = 0x20;
 8000ce0:	2320      	movs	r3, #32
 8000ce2:	73bb      	strb	r3, [r7, #14]
	write_ads1299_register(ADS1299_REG_MISC1, 1, &register_value);
 8000ce4:	f107 030e 	add.w	r3, r7, #14
 8000ce8:	461a      	mov	r2, r3
 8000cea:	2101      	movs	r1, #1
 8000cec:	2015      	movs	r0, #21
 8000cee:	f000 f969 	bl	8000fc4 <write_ads1299_register>
	HAL_Delay(1);
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	f000 fd04 	bl	8001700 <HAL_Delay>

	for(i=0;i<ADS1299_CHANNELS;i++){
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	73fb      	strb	r3, [r7, #15]
 8000cfc:	e008      	b.n	8000d10 <TestModeSequence+0xc4>
		channset_value[i] = 0x55; // test mode
 8000cfe:	7bfb      	ldrb	r3, [r7, #15]
 8000d00:	3310      	adds	r3, #16
 8000d02:	443b      	add	r3, r7
 8000d04:	2255      	movs	r2, #85	@ 0x55
 8000d06:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(i=0;i<ADS1299_CHANNELS;i++){
 8000d0a:	7bfb      	ldrb	r3, [r7, #15]
 8000d0c:	3301      	adds	r3, #1
 8000d0e:	73fb      	strb	r3, [r7, #15]
 8000d10:	7bfb      	ldrb	r3, [r7, #15]
 8000d12:	2b07      	cmp	r3, #7
 8000d14:	d9f3      	bls.n	8000cfe <TestModeSequence+0xb2>
	}

	write_ads1299_register(ADS1299_REG_CH1SET, ADS1299_CHANNELS, channset_value);
 8000d16:	1d3b      	adds	r3, r7, #4
 8000d18:	461a      	mov	r2, r3
 8000d1a:	2108      	movs	r1, #8
 8000d1c:	2005      	movs	r0, #5
 8000d1e:	f000 f951 	bl	8000fc4 <write_ads1299_register>

	HAL_Delay(1);
 8000d22:	2001      	movs	r0, #1
 8000d24:	f000 fcec 	bl	8001700 <HAL_Delay>

	send_ads1299_command(ADS1299_RDATAC);
 8000d28:	2010      	movs	r0, #16
 8000d2a:	f000 f929 	bl	8000f80 <send_ads1299_command>

}
 8000d2e:	bf00      	nop
 8000d30:	3710      	adds	r7, #16
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}

08000d36 <OffModeSequence>:


void OffModeSequence(){
 8000d36:	b580      	push	{r7, lr}
 8000d38:	b084      	sub	sp, #16
 8000d3a:	af00      	add	r7, sp, #0

	uint8_t i = 0;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	73fb      	strb	r3, [r7, #15]
	uint8_t register_value = 0x00;
 8000d40:	2300      	movs	r3, #0
 8000d42:	73bb      	strb	r3, [r7, #14]
	uint8_t channset_value[ADS1299_CHANNELS] = {0};
 8000d44:	2300      	movs	r3, #0
 8000d46:	607b      	str	r3, [r7, #4]
 8000d48:	2300      	movs	r3, #0
 8000d4a:	60bb      	str	r3, [r7, #8]

	// Wait 1ms.
	HAL_Delay(20);
 8000d4c:	2014      	movs	r0, #20
 8000d4e:	f000 fcd7 	bl	8001700 <HAL_Delay>

	send_ads1299_command(ADS1299_SDATAC);
 8000d52:	2011      	movs	r0, #17
 8000d54:	f000 f914 	bl	8000f80 <send_ads1299_command>
	register_value = 0xC0;
 8000d58:	23c0      	movs	r3, #192	@ 0xc0
 8000d5a:	73bb      	strb	r3, [r7, #14]
	write_ads1299_register(ADS1299_REG_CONFIG2, 1, &register_value);
 8000d5c:	f107 030e 	add.w	r3, r7, #14
 8000d60:	461a      	mov	r2, r3
 8000d62:	2101      	movs	r1, #1
 8000d64:	2002      	movs	r0, #2
 8000d66:	f000 f92d 	bl	8000fc4 <write_ads1299_register>
	HAL_Delay(1);
 8000d6a:	2001      	movs	r0, #1
 8000d6c:	f000 fcc8 	bl	8001700 <HAL_Delay>

	register_value = 0xEC; //BIAS-enabled
 8000d70:	23ec      	movs	r3, #236	@ 0xec
 8000d72:	73bb      	strb	r3, [r7, #14]
	//register_value = 0xE0; //BIAS-disabled
	write_ads1299_register(ADS1299_REG_CONFIG3, 1, &register_value);
 8000d74:	f107 030e 	add.w	r3, r7, #14
 8000d78:	461a      	mov	r2, r3
 8000d7a:	2101      	movs	r1, #1
 8000d7c:	2003      	movs	r0, #3
 8000d7e:	f000 f921 	bl	8000fc4 <write_ads1299_register>
	HAL_Delay(1);
 8000d82:	2001      	movs	r0, #1
 8000d84:	f000 fcbc 	bl	8001700 <HAL_Delay>
	//register_value = 0x00; //BIAS-disabled
	register_value = 0xFF; //BIAS-enabled
 8000d88:	23ff      	movs	r3, #255	@ 0xff
 8000d8a:	73bb      	strb	r3, [r7, #14]
	write_ads1299_register(ADS1299_REG_BIAS_SENSP, 1, &register_value);
 8000d8c:	f107 030e 	add.w	r3, r7, #14
 8000d90:	461a      	mov	r2, r3
 8000d92:	2101      	movs	r1, #1
 8000d94:	200d      	movs	r0, #13
 8000d96:	f000 f915 	bl	8000fc4 <write_ads1299_register>
	HAL_Delay(1);
 8000d9a:	2001      	movs	r0, #1
 8000d9c:	f000 fcb0 	bl	8001700 <HAL_Delay>
	register_value = 0x00;
 8000da0:	2300      	movs	r3, #0
 8000da2:	73bb      	strb	r3, [r7, #14]
	write_ads1299_register(ADS1299_REG_BIAS_SENSN, 1, &register_value);
 8000da4:	f107 030e 	add.w	r3, r7, #14
 8000da8:	461a      	mov	r2, r3
 8000daa:	2101      	movs	r1, #1
 8000dac:	200e      	movs	r0, #14
 8000dae:	f000 f909 	bl	8000fc4 <write_ads1299_register>
	HAL_Delay(1);
 8000db2:	2001      	movs	r0, #1
 8000db4:	f000 fca4 	bl	8001700 <HAL_Delay>
	register_value = 0x20;
 8000db8:	2320      	movs	r3, #32
 8000dba:	73bb      	strb	r3, [r7, #14]
	write_ads1299_register(ADS1299_REG_MISC1, 1, &register_value);
 8000dbc:	f107 030e 	add.w	r3, r7, #14
 8000dc0:	461a      	mov	r2, r3
 8000dc2:	2101      	movs	r1, #1
 8000dc4:	2015      	movs	r0, #21
 8000dc6:	f000 f8fd 	bl	8000fc4 <write_ads1299_register>
	HAL_Delay(1);
 8000dca:	2001      	movs	r0, #1
 8000dcc:	f000 fc98 	bl	8001700 <HAL_Delay>

	for(i=0;i<ADS1299_CHANNELS;i++){
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	73fb      	strb	r3, [r7, #15]
 8000dd4:	e008      	b.n	8000de8 <OffModeSequence+0xb2>
		channset_value[i] = 0xD1; // channel down + shorted
 8000dd6:	7bfb      	ldrb	r3, [r7, #15]
 8000dd8:	3310      	adds	r3, #16
 8000dda:	443b      	add	r3, r7
 8000ddc:	22d1      	movs	r2, #209	@ 0xd1
 8000dde:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(i=0;i<ADS1299_CHANNELS;i++){
 8000de2:	7bfb      	ldrb	r3, [r7, #15]
 8000de4:	3301      	adds	r3, #1
 8000de6:	73fb      	strb	r3, [r7, #15]
 8000de8:	7bfb      	ldrb	r3, [r7, #15]
 8000dea:	2b07      	cmp	r3, #7
 8000dec:	d9f3      	bls.n	8000dd6 <OffModeSequence+0xa0>
	}

	write_ads1299_register(ADS1299_REG_CH1SET, ADS1299_CHANNELS, channset_value);
 8000dee:	1d3b      	adds	r3, r7, #4
 8000df0:	461a      	mov	r2, r3
 8000df2:	2108      	movs	r1, #8
 8000df4:	2005      	movs	r0, #5
 8000df6:	f000 f8e5 	bl	8000fc4 <write_ads1299_register>

	HAL_Delay(1);
 8000dfa:	2001      	movs	r0, #1
 8000dfc:	f000 fc80 	bl	8001700 <HAL_Delay>

	send_ads1299_command(ADS1299_RDATAC);
 8000e00:	2010      	movs	r0, #16
 8000e02:	f000 f8bd 	bl	8000f80 <send_ads1299_command>

}
 8000e06:	bf00      	nop
 8000e08:	3710      	adds	r7, #16
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}

08000e0e <ImpedanceModeSequence>:


void ImpedanceModeSequence(){
 8000e0e:	b480      	push	{r7}
 8000e10:	af00      	add	r7, sp, #0
	// TODO
}
 8000e12:	bf00      	nop
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr

08000e1c <EEGRecordingSequence>:

void EEGRecordingSequence(){
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b084      	sub	sp, #16
 8000e20:	af00      	add	r7, sp, #0

	uint8_t i = 0;
 8000e22:	2300      	movs	r3, #0
 8000e24:	73fb      	strb	r3, [r7, #15]
	uint8_t register_value = 0x00;
 8000e26:	2300      	movs	r3, #0
 8000e28:	73bb      	strb	r3, [r7, #14]
	uint8_t channset_value[ADS1299_CHANNELS] = {0};
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	607b      	str	r3, [r7, #4]
 8000e2e:	2300      	movs	r3, #0
 8000e30:	60bb      	str	r3, [r7, #8]

	// Wait 1ms.
	HAL_Delay(20);
 8000e32:	2014      	movs	r0, #20
 8000e34:	f000 fc64 	bl	8001700 <HAL_Delay>

	send_ads1299_command(ADS1299_SDATAC);
 8000e38:	2011      	movs	r0, #17
 8000e3a:	f000 f8a1 	bl	8000f80 <send_ads1299_command>
	register_value = 0xC0;
 8000e3e:	23c0      	movs	r3, #192	@ 0xc0
 8000e40:	73bb      	strb	r3, [r7, #14]
	write_ads1299_register(ADS1299_REG_CONFIG2, 1, &register_value);
 8000e42:	f107 030e 	add.w	r3, r7, #14
 8000e46:	461a      	mov	r2, r3
 8000e48:	2101      	movs	r1, #1
 8000e4a:	2002      	movs	r0, #2
 8000e4c:	f000 f8ba 	bl	8000fc4 <write_ads1299_register>
	HAL_Delay(1);
 8000e50:	2001      	movs	r0, #1
 8000e52:	f000 fc55 	bl	8001700 <HAL_Delay>

	register_value = 0xEC; //BIAS-enabled
 8000e56:	23ec      	movs	r3, #236	@ 0xec
 8000e58:	73bb      	strb	r3, [r7, #14]
	//register_value = 0xE0; //BIAS-disabled
	write_ads1299_register(ADS1299_REG_CONFIG3, 1, &register_value);
 8000e5a:	f107 030e 	add.w	r3, r7, #14
 8000e5e:	461a      	mov	r2, r3
 8000e60:	2101      	movs	r1, #1
 8000e62:	2003      	movs	r0, #3
 8000e64:	f000 f8ae 	bl	8000fc4 <write_ads1299_register>
	HAL_Delay(1);
 8000e68:	2001      	movs	r0, #1
 8000e6a:	f000 fc49 	bl	8001700 <HAL_Delay>
	//register_value = 0x00; //BIAS-disabled
	register_value = 0xFF; //BIAS-enabled
 8000e6e:	23ff      	movs	r3, #255	@ 0xff
 8000e70:	73bb      	strb	r3, [r7, #14]
	write_ads1299_register(ADS1299_REG_BIAS_SENSP, 1, &register_value);
 8000e72:	f107 030e 	add.w	r3, r7, #14
 8000e76:	461a      	mov	r2, r3
 8000e78:	2101      	movs	r1, #1
 8000e7a:	200d      	movs	r0, #13
 8000e7c:	f000 f8a2 	bl	8000fc4 <write_ads1299_register>
	HAL_Delay(1);
 8000e80:	2001      	movs	r0, #1
 8000e82:	f000 fc3d 	bl	8001700 <HAL_Delay>
	register_value = 0x00;
 8000e86:	2300      	movs	r3, #0
 8000e88:	73bb      	strb	r3, [r7, #14]
	write_ads1299_register(ADS1299_REG_BIAS_SENSN, 1, &register_value);
 8000e8a:	f107 030e 	add.w	r3, r7, #14
 8000e8e:	461a      	mov	r2, r3
 8000e90:	2101      	movs	r1, #1
 8000e92:	200e      	movs	r0, #14
 8000e94:	f000 f896 	bl	8000fc4 <write_ads1299_register>
	HAL_Delay(1);
 8000e98:	2001      	movs	r0, #1
 8000e9a:	f000 fc31 	bl	8001700 <HAL_Delay>
	register_value = 0x20;
 8000e9e:	2320      	movs	r3, #32
 8000ea0:	73bb      	strb	r3, [r7, #14]
	write_ads1299_register(ADS1299_REG_MISC1, 1, &register_value);
 8000ea2:	f107 030e 	add.w	r3, r7, #14
 8000ea6:	461a      	mov	r2, r3
 8000ea8:	2101      	movs	r1, #1
 8000eaa:	2015      	movs	r0, #21
 8000eac:	f000 f88a 	bl	8000fc4 <write_ads1299_register>
	HAL_Delay(1);
 8000eb0:	2001      	movs	r0, #1
 8000eb2:	f000 fc25 	bl	8001700 <HAL_Delay>

	for(i=0;i<ADS1299_CHANNELS;i++){
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	73fb      	strb	r3, [r7, #15]
 8000eba:	e008      	b.n	8000ece <EEGRecordingSequence+0xb2>
		channset_value[i] = 0x50;
 8000ebc:	7bfb      	ldrb	r3, [r7, #15]
 8000ebe:	3310      	adds	r3, #16
 8000ec0:	443b      	add	r3, r7
 8000ec2:	2250      	movs	r2, #80	@ 0x50
 8000ec4:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(i=0;i<ADS1299_CHANNELS;i++){
 8000ec8:	7bfb      	ldrb	r3, [r7, #15]
 8000eca:	3301      	adds	r3, #1
 8000ecc:	73fb      	strb	r3, [r7, #15]
 8000ece:	7bfb      	ldrb	r3, [r7, #15]
 8000ed0:	2b07      	cmp	r3, #7
 8000ed2:	d9f3      	bls.n	8000ebc <EEGRecordingSequence+0xa0>
	}

	write_ads1299_register(ADS1299_REG_CH1SET, ADS1299_CHANNELS, channset_value);
 8000ed4:	1d3b      	adds	r3, r7, #4
 8000ed6:	461a      	mov	r2, r3
 8000ed8:	2108      	movs	r1, #8
 8000eda:	2005      	movs	r0, #5
 8000edc:	f000 f872 	bl	8000fc4 <write_ads1299_register>

	HAL_Delay(1);
 8000ee0:	2001      	movs	r0, #1
 8000ee2:	f000 fc0d 	bl	8001700 <HAL_Delay>

	send_ads1299_command(ADS1299_RDATAC);
 8000ee6:	2010      	movs	r0, #16
 8000ee8:	f000 f84a 	bl	8000f80 <send_ads1299_command>

}
 8000eec:	bf00      	nop
 8000eee:	3710      	adds	r7, #16
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}

08000ef4 <setnReset>:



static void setnReset(uint8_t value){
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	4603      	mov	r3, r0
 8000efc:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ADS1299_nRESET_GPIO_Port, ADS1299_nRESET_Pin, value);
 8000efe:	79fb      	ldrb	r3, [r7, #7]
 8000f00:	461a      	mov	r2, r3
 8000f02:	2180      	movs	r1, #128	@ 0x80
 8000f04:	4803      	ldr	r0, [pc, #12]	@ (8000f14 <setnReset+0x20>)
 8000f06:	f003 f9cf 	bl	80042a8 <HAL_GPIO_WritePin>
}
 8000f0a:	bf00      	nop
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	48000800 	.word	0x48000800

08000f18 <setnPWRdown>:

static void setnPWRdown(uint8_t value){
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	4603      	mov	r3, r0
 8000f20:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ADS1299_nPWDN_GPIO_Port, ADS1299_nPWDN_Pin, value);
 8000f22:	79fb      	ldrb	r3, [r7, #7]
 8000f24:	461a      	mov	r2, r3
 8000f26:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f2a:	4803      	ldr	r0, [pc, #12]	@ (8000f38 <setnPWRdown+0x20>)
 8000f2c:	f003 f9bc 	bl	80042a8 <HAL_GPIO_WritePin>
}
 8000f30:	bf00      	nop
 8000f32:	3708      	adds	r7, #8
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	48000800 	.word	0x48000800

08000f3c <setADS1299Start>:

static void setADS1299Start(uint8_t value){
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	4603      	mov	r3, r0
 8000f44:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ADS1299_START_GPIO_Port, ADS1299_START_Pin, value);
 8000f46:	79fb      	ldrb	r3, [r7, #7]
 8000f48:	461a      	mov	r2, r3
 8000f4a:	2140      	movs	r1, #64	@ 0x40
 8000f4c:	4803      	ldr	r0, [pc, #12]	@ (8000f5c <setADS1299Start+0x20>)
 8000f4e:	f003 f9ab 	bl	80042a8 <HAL_GPIO_WritePin>
}
 8000f52:	bf00      	nop
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	48000800 	.word	0x48000800

08000f60 <setADS1299CS>:

static void setADS1299CS(uint8_t value){
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	4603      	mov	r3, r0
 8000f68:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ADS1299_CS_GPIO_Port, ADS1299_CS_Pin, value);
 8000f6a:	79fb      	ldrb	r3, [r7, #7]
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	2110      	movs	r1, #16
 8000f70:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f74:	f003 f998 	bl	80042a8 <HAL_GPIO_WritePin>
}
 8000f78:	bf00      	nop
 8000f7a:	3708      	adds	r7, #8
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <send_ads1299_command>:

static uint8_t send_ads1299_command(uint8_t command)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	4603      	mov	r3, r0
 8000f88:	71fb      	strb	r3, [r7, #7]
    // Pull CS (Chip Select) low to begin the SPI communication
	setADS1299CS(GPIO_PIN_RESET);  // Assuming CS is on GPIOA pin 4
 8000f8a:	2000      	movs	r0, #0
 8000f8c:	f7ff ffe8 	bl	8000f60 <setADS1299CS>

    // Transmit the command to ADS1299
    if (HAL_SPI_Transmit(&hspi1, &command, 1, HAL_MAX_DELAY) != HAL_OK)
 8000f90:	1df9      	adds	r1, r7, #7
 8000f92:	f04f 33ff 	mov.w	r3, #4294967295
 8000f96:	2201      	movs	r2, #1
 8000f98:	4809      	ldr	r0, [pc, #36]	@ (8000fc0 <send_ads1299_command+0x40>)
 8000f9a:	f005 ffa4 	bl	8006ee6 <HAL_SPI_Transmit>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d004      	beq.n	8000fae <send_ads1299_command+0x2e>
    {
    	setADS1299CS(GPIO_PIN_SET);
 8000fa4:	2001      	movs	r0, #1
 8000fa6:	f7ff ffdb 	bl	8000f60 <setADS1299CS>
        return HAL_ERROR;  // Return error if transmission fails
 8000faa:	2301      	movs	r3, #1
 8000fac:	e003      	b.n	8000fb6 <send_ads1299_command+0x36>
    }

    // Pull CS (Chip Select) high to end the SPI communication
    setADS1299CS(GPIO_PIN_SET);
 8000fae:	2001      	movs	r0, #1
 8000fb0:	f7ff ffd6 	bl	8000f60 <setADS1299CS>

    return HAL_OK;  // Return success
 8000fb4:	2300      	movs	r3, #0
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3708      	adds	r7, #8
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	200002e4 	.word	0x200002e4

08000fc4 <write_ads1299_register>:
}



static uint8_t write_ads1299_register(uint8_t start_addr, uint8_t num_regs, uint8_t *data)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	4603      	mov	r3, r0
 8000fcc:	603a      	str	r2, [r7, #0]
 8000fce:	71fb      	strb	r3, [r7, #7]
 8000fd0:	460b      	mov	r3, r1
 8000fd2:	71bb      	strb	r3, [r7, #6]
    // Buffer to hold the command sequence
    uint8_t tx_buffer[2];
    tx_buffer[0] = ADS1299_WREG | start_addr;  // Write command with starting register address
 8000fd4:	79fb      	ldrb	r3, [r7, #7]
 8000fd6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000fda:	b2db      	uxtb	r3, r3
 8000fdc:	733b      	strb	r3, [r7, #12]
    tx_buffer[1] = num_regs - 1;                        // Number of registers to write (0-indexed)
 8000fde:	79bb      	ldrb	r3, [r7, #6]
 8000fe0:	3b01      	subs	r3, #1
 8000fe2:	b2db      	uxtb	r3, r3
 8000fe4:	737b      	strb	r3, [r7, #13]

    // Pull CS (Chip Select) low to begin the SPI communication
    setADS1299CS(GPIO_PIN_RESET);  // Assuming CS is on GPIOA pin 4
 8000fe6:	2000      	movs	r0, #0
 8000fe8:	f7ff ffba 	bl	8000f60 <setADS1299CS>

    // Transmit the write command and register address
    if (HAL_SPI_Transmit(&hspi1, tx_buffer, 2, HAL_MAX_DELAY) != HAL_OK)
 8000fec:	f107 010c 	add.w	r1, r7, #12
 8000ff0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ff4:	2202      	movs	r2, #2
 8000ff6:	4814      	ldr	r0, [pc, #80]	@ (8001048 <write_ads1299_register+0x84>)
 8000ff8:	f005 ff75 	bl	8006ee6 <HAL_SPI_Transmit>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d007      	beq.n	8001012 <write_ads1299_register+0x4e>
    {
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);  // End SPI communication
 8001002:	2201      	movs	r2, #1
 8001004:	2110      	movs	r1, #16
 8001006:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800100a:	f003 f94d 	bl	80042a8 <HAL_GPIO_WritePin>
        return HAL_ERROR;  // Return error if transmission fails
 800100e:	2301      	movs	r3, #1
 8001010:	e016      	b.n	8001040 <write_ads1299_register+0x7c>
    }

    // Transmit the data to be written to the registers
    if (HAL_SPI_Transmit(&hspi1, data, num_regs, HAL_MAX_DELAY) != HAL_OK)
 8001012:	79bb      	ldrb	r3, [r7, #6]
 8001014:	b29a      	uxth	r2, r3
 8001016:	f04f 33ff 	mov.w	r3, #4294967295
 800101a:	6839      	ldr	r1, [r7, #0]
 800101c:	480a      	ldr	r0, [pc, #40]	@ (8001048 <write_ads1299_register+0x84>)
 800101e:	f005 ff62 	bl	8006ee6 <HAL_SPI_Transmit>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d007      	beq.n	8001038 <write_ads1299_register+0x74>
    {
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);  // End SPI communication
 8001028:	2201      	movs	r2, #1
 800102a:	2110      	movs	r1, #16
 800102c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001030:	f003 f93a 	bl	80042a8 <HAL_GPIO_WritePin>
        return HAL_ERROR;  // Return error if data transmission fails
 8001034:	2301      	movs	r3, #1
 8001036:	e003      	b.n	8001040 <write_ads1299_register+0x7c>
    }

    setADS1299CS(GPIO_PIN_SET);
 8001038:	2001      	movs	r0, #1
 800103a:	f7ff ff91 	bl	8000f60 <setADS1299CS>

    return HAL_OK;  // Return success
 800103e:	2300      	movs	r3, #0
}
 8001040:	4618      	mov	r0, r3
 8001042:	3710      	adds	r7, #16
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	200002e4 	.word	0x200002e4

0800104c <ADS1299_ReadSamples>:
 * @brief Reads samples from the ADS1299 via SPI.
 * @param statusBuffer Pointer to a buffer to store the 3 status bytes.
 * @param dataBuffer Pointer to a buffer to store the 24 data bytes (8 channels x 3 bytes each).
 * @retval HAL_StatusTypeDef HAL status indicating success or error.
 */
HAL_StatusTypeDef ADS1299_ReadSamples(uint8_t *statusBuffer, uint8_t *dataBuffer) {
 800104c:	b580      	push	{r7, lr}
 800104e:	b08c      	sub	sp, #48	@ 0x30
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
 8001054:	6039      	str	r1, [r7, #0]

    uint8_t spiRxBuffer[27] = {0}; // Buffer to store all received bytes (3 status + 24 data)
 8001056:	2300      	movs	r3, #0
 8001058:	60fb      	str	r3, [r7, #12]
 800105a:	f107 0310 	add.w	r3, r7, #16
 800105e:	2200      	movs	r2, #0
 8001060:	601a      	str	r2, [r3, #0]
 8001062:	605a      	str	r2, [r3, #4]
 8001064:	609a      	str	r2, [r3, #8]
 8001066:	60da      	str	r2, [r3, #12]
 8001068:	611a      	str	r2, [r3, #16]
 800106a:	f8c3 2013 	str.w	r2, [r3, #19]
    HAL_StatusTypeDef result;

    // Ensure that statusBuffer and dataBuffer are not NULL
    if (statusBuffer == NULL || dataBuffer == NULL) {
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d002      	beq.n	800107a <ADS1299_ReadSamples+0x2e>
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d101      	bne.n	800107e <ADS1299_ReadSamples+0x32>
        return HAL_ERROR;
 800107a:	2301      	movs	r3, #1
 800107c:	e03d      	b.n	80010fa <ADS1299_ReadSamples+0xae>
    }

    setADS1299CS(GPIO_PIN_RESET);
 800107e:	2000      	movs	r0, #0
 8001080:	f7ff ff6e 	bl	8000f60 <setADS1299CS>

    // Perform SPI reception of 27 bytes
    result = HAL_SPI_Receive(&hspi1, spiRxBuffer, 27, HAL_MAX_DELAY);
 8001084:	f107 010c 	add.w	r1, r7, #12
 8001088:	f04f 33ff 	mov.w	r3, #4294967295
 800108c:	221b      	movs	r2, #27
 800108e:	481d      	ldr	r0, [pc, #116]	@ (8001104 <ADS1299_ReadSamples+0xb8>)
 8001090:	f006 f89e 	bl	80071d0 <HAL_SPI_Receive>
 8001094:	4603      	mov	r3, r0
 8001096:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    setADS1299CS(GPIO_PIN_SET);
 800109a:	2001      	movs	r0, #1
 800109c:	f7ff ff60 	bl	8000f60 <setADS1299CS>

    if (result != HAL_OK) {
 80010a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d002      	beq.n	80010ae <ADS1299_ReadSamples+0x62>
        return result; // Return if there is an SPI error
 80010a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80010ac:	e025      	b.n	80010fa <ADS1299_ReadSamples+0xae>
    }

    // Copy the first 3 bytes to the status buffer
    for (int i = 0; i < 3; i++) {
 80010ae:	2300      	movs	r3, #0
 80010b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80010b2:	e00b      	b.n	80010cc <ADS1299_ReadSamples+0x80>
        statusBuffer[i] = spiRxBuffer[i];
 80010b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010b6:	687a      	ldr	r2, [r7, #4]
 80010b8:	4413      	add	r3, r2
 80010ba:	f107 010c 	add.w	r1, r7, #12
 80010be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80010c0:	440a      	add	r2, r1
 80010c2:	7812      	ldrb	r2, [r2, #0]
 80010c4:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 3; i++) {
 80010c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010c8:	3301      	adds	r3, #1
 80010ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80010cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010ce:	2b02      	cmp	r3, #2
 80010d0:	ddf0      	ble.n	80010b4 <ADS1299_ReadSamples+0x68>
    }

    // Copy the next 24 bytes to the data buffer
    for (int i = 0; i < 24; i++) {
 80010d2:	2300      	movs	r3, #0
 80010d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80010d6:	e00c      	b.n	80010f2 <ADS1299_ReadSamples+0xa6>
        dataBuffer[i] = spiRxBuffer[i + 3];
 80010d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80010da:	1cda      	adds	r2, r3, #3
 80010dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80010de:	6839      	ldr	r1, [r7, #0]
 80010e0:	440b      	add	r3, r1
 80010e2:	3230      	adds	r2, #48	@ 0x30
 80010e4:	443a      	add	r2, r7
 80010e6:	f812 2c24 	ldrb.w	r2, [r2, #-36]
 80010ea:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 24; i++) {
 80010ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80010ee:	3301      	adds	r3, #1
 80010f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80010f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80010f4:	2b17      	cmp	r3, #23
 80010f6:	ddef      	ble.n	80010d8 <ADS1299_ReadSamples+0x8c>
    }

    return HAL_OK;
 80010f8:	2300      	movs	r3, #0
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3730      	adds	r7, #48	@ 0x30
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	200002e4 	.word	0x200002e4

08001108 <startStreaming>:




void startStreaming(){
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
	send_ads1299_command(ADS1299_RDATAC);
 800110c:	2010      	movs	r0, #16
 800110e:	f7ff ff37 	bl	8000f80 <send_ads1299_command>
}
 8001112:	bf00      	nop
 8001114:	bd80      	pop	{r7, pc}

08001116 <stopStreaming>:

void stopStreaming(){
 8001116:	b580      	push	{r7, lr}
 8001118:	af00      	add	r7, sp, #0
	send_ads1299_command(ADS1299_SDATAC);
 800111a:	2011      	movs	r0, #17
 800111c:	f7ff ff30 	bl	8000f80 <send_ads1299_command>
}
 8001120:	bf00      	nop
 8001122:	bd80      	pop	{r7, pc}

08001124 <writeRegister>:

void writeRegister(uint8_t address, uint8_t register_value){
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	4603      	mov	r3, r0
 800112c:	460a      	mov	r2, r1
 800112e:	71fb      	strb	r3, [r7, #7]
 8001130:	4613      	mov	r3, r2
 8001132:	71bb      	strb	r3, [r7, #6]
	send_ads1299_command(ADS1299_SDATAC);
 8001134:	2011      	movs	r0, #17
 8001136:	f7ff ff23 	bl	8000f80 <send_ads1299_command>
	HAL_Delay(5);
 800113a:	2005      	movs	r0, #5
 800113c:	f000 fae0 	bl	8001700 <HAL_Delay>
	write_ads1299_register(address, 1, &register_value);
 8001140:	1dba      	adds	r2, r7, #6
 8001142:	79fb      	ldrb	r3, [r7, #7]
 8001144:	2101      	movs	r1, #1
 8001146:	4618      	mov	r0, r3
 8001148:	f7ff ff3c 	bl	8000fc4 <write_ads1299_register>
	HAL_Delay(5);
 800114c:	2005      	movs	r0, #5
 800114e:	f000 fad7 	bl	8001700 <HAL_Delay>
}
 8001152:	bf00      	nop
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
	...

0800115c <setPredefMode>:

void setPredefMode(uint8_t mode){
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	4603      	mov	r3, r0
 8001164:	71fb      	strb	r3, [r7, #7]

	switch(mode){
 8001166:	79fb      	ldrb	r3, [r7, #7]
 8001168:	2b03      	cmp	r3, #3
 800116a:	d817      	bhi.n	800119c <setPredefMode+0x40>
 800116c:	a201      	add	r2, pc, #4	@ (adr r2, 8001174 <setPredefMode+0x18>)
 800116e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001172:	bf00      	nop
 8001174:	08001185 	.word	0x08001185
 8001178:	0800118b 	.word	0x0800118b
 800117c:	08001191 	.word	0x08001191
 8001180:	08001197 	.word	0x08001197

	case 0x00:
		OffModeSequence();
 8001184:	f7ff fdd7 	bl	8000d36 <OffModeSequence>
		break;
 8001188:	e008      	b.n	800119c <setPredefMode+0x40>

	case 0x01:
		TestModeSequence();
 800118a:	f7ff fd5f 	bl	8000c4c <TestModeSequence>
		break;
 800118e:	e005      	b.n	800119c <setPredefMode+0x40>

	case 0x02:
		EEGRecordingSequence();
 8001190:	f7ff fe44 	bl	8000e1c <EEGRecordingSequence>
		break;
 8001194:	e002      	b.n	800119c <setPredefMode+0x40>

	case 0x03:
		ImpedanceModeSequence();
 8001196:	f7ff fe3a 	bl	8000e0e <ImpedanceModeSequence>
		break;
 800119a:	bf00      	nop


	}

}
 800119c:	bf00      	nop
 800119e:	3708      	adds	r7, #8
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}

080011a4 <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 80011a4:	b5b0      	push	{r4, r5, r7, lr}
 80011a6:	b088      	sub	sp, #32
 80011a8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 80011aa:	4b0b      	ldr	r3, [pc, #44]	@ (80011d8 <APPD_EnableCPU2+0x34>)
 80011ac:	1d3c      	adds	r4, r7, #4
 80011ae:	461d      	mov	r5, r3
 80011b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011b4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011b8:	c403      	stmia	r4!, {r0, r1}
 80011ba:	8022      	strh	r2, [r4, #0]
 80011bc:	3402      	adds	r4, #2
 80011be:	0c13      	lsrs	r3, r2, #16
 80011c0:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 80011c2:	f00a fbbb 	bl	800b93c <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 80011c6:	1d3b      	adds	r3, r7, #4
 80011c8:	4618      	mov	r0, r3
 80011ca:	f009 fe4c 	bl	800ae66 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 80011ce:	bf00      	nop
}
 80011d0:	3720      	adds	r7, #32
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bdb0      	pop	{r4, r5, r7, pc}
 80011d6:	bf00      	nop
 80011d8:	0800fb0c 	.word	0x0800fb0c

080011dc <DbgOutputTraces>:
/* USER CODE END DbgOutputInit */
  return;
}

void DbgOutputTraces(  uint8_t *p_data, uint16_t size, void (*cb)(void) )
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	60f8      	str	r0, [r7, #12]
 80011e4:	460b      	mov	r3, r1
 80011e6:	607a      	str	r2, [r7, #4]
 80011e8:	817b      	strh	r3, [r7, #10]
/* USER CODE END DbgOutputTraces */
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 80011ea:	897a      	ldrh	r2, [r7, #10]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	68f9      	ldr	r1, [r7, #12]
 80011f0:	2000      	movs	r0, #0
 80011f2:	f001 f989 	bl	8002508 <HW_UART_Transmit_DMA>

/* USER CODE END DbgOutputTraces */
  return;
 80011f6:	bf00      	nop
}
 80011f8:	3710      	adds	r7, #16
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
	...

08001200 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8001208:	4b07      	ldr	r3, [pc, #28]	@ (8001228 <LL_C2_PWR_SetPowerMode+0x28>)
 800120a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800120e:	f023 0207 	bic.w	r2, r3, #7
 8001212:	4905      	ldr	r1, [pc, #20]	@ (8001228 <LL_C2_PWR_SetPowerMode+0x28>)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	4313      	orrs	r3, r2
 8001218:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 800121c:	bf00      	nop
 800121e:	370c      	adds	r7, #12
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr
 8001228:	58000400 	.word	0x58000400

0800122c <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8001234:	4b06      	ldr	r3, [pc, #24]	@ (8001250 <LL_EXTI_EnableIT_32_63+0x24>)
 8001236:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800123a:	4905      	ldr	r1, [pc, #20]	@ (8001250 <LL_EXTI_EnableIT_32_63+0x24>)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	4313      	orrs	r3, r2
 8001240:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8001244:	bf00      	nop
 8001246:	370c      	adds	r7, #12
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr
 8001250:	58000800 	.word	0x58000800

08001254 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 800125c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001260:	4a0a      	ldr	r2, [pc, #40]	@ (800128c <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8001262:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8001266:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800126a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800126e:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	021b      	lsls	r3, r3, #8
 8001276:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800127a:	4313      	orrs	r3, r2
 800127c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
}
 8001280:	bf00      	nop
 8001282:	370c      	adds	r7, #12
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr
 800128c:	cafecafe 	.word	0xcafecafe

08001290 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8001298:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800129c:	689b      	ldr	r3, [r3, #8]
 800129e:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80012a2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4313      	orrs	r3, r2
 80012aa:	608b      	str	r3, [r1, #8]
}
 80012ac:	bf00      	nop
 80012ae:	370c      	adds	r7, #12
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr

080012b8 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 80012bc:	4b04      	ldr	r3, [pc, #16]	@ (80012d0 <LL_DBGMCU_GetDeviceID+0x18>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	e0042000 	.word	0xe0042000

080012d4 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 80012d8:	4b04      	ldr	r3, [pc, #16]	@ (80012ec <LL_DBGMCU_GetRevisionID+0x18>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	0c1b      	lsrs	r3, r3, #16
 80012de:	b29b      	uxth	r3, r3
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	e0042000 	.word	0xe0042000

080012f0 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80012f4:	4b05      	ldr	r3, [pc, #20]	@ (800130c <LL_LPM_EnableSleep+0x1c>)
 80012f6:	691b      	ldr	r3, [r3, #16]
 80012f8:	4a04      	ldr	r2, [pc, #16]	@ (800130c <LL_LPM_EnableSleep+0x1c>)
 80012fa:	f023 0304 	bic.w	r3, r3, #4
 80012fe:	6113      	str	r3, [r2, #16]
}
 8001300:	bf00      	nop
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	e000ed00 	.word	0xe000ed00

08001310 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	22ff      	movs	r2, #255	@ 0xff
 800131c:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800131e:	bf00      	nop
 8001320:	370c      	adds	r7, #12
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr

0800132a <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 800132a:	b480      	push	{r7}
 800132c:	b083      	sub	sp, #12
 800132e:	af00      	add	r7, sp, #0
 8001330:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	22ca      	movs	r2, #202	@ 0xca
 8001336:	625a      	str	r2, [r3, #36]	@ 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2253      	movs	r2, #83	@ 0x53
 800133c:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800133e:	bf00      	nop
 8001340:	370c      	adds	r7, #12
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr

0800134a <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 800134a:	b480      	push	{r7}
 800134c:	b083      	sub	sp, #12
 800134e:	af00      	add	r7, sp, #0
 8001350:	6078      	str	r0, [r7, #4]
 8001352:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	f023 0207 	bic.w	r2, r3, #7
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	431a      	orrs	r2, r3
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	609a      	str	r2, [r3, #8]
}
 8001364:	bf00      	nop
 8001366:	370c      	adds	r7, #12
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr

08001370 <MX_APPE_Config>:
static void UartCmdExecute(void);
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001374:	4b04      	ldr	r3, [pc, #16]	@ (8001388 <MX_APPE_Config+0x18>)
 8001376:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800137a:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 800137c:	f000 f828 	bl	80013d0 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8001380:	f000 f82d 	bl	80013de <Config_HSE>

  return;
 8001384:	bf00      	nop
}
 8001386:	bd80      	pop	{r7, pc}
 8001388:	58004000 	.word	0x58004000

0800138c <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8001390:	f000 f839 	bl	8001406 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8001394:	f000 f852 	bl	800143c <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8001398:	4905      	ldr	r1, [pc, #20]	@ (80013b0 <MX_APPE_Init+0x24>)
 800139a:	2000      	movs	r0, #0
 800139c:	f000 fe48 	bl	8002030 <HW_TS_Init>
  
  /**
   * The Standby mode should not be entered before the initialization is over
   * The default state of the Low Power Manager is to allow the Standby Mode so an request is needed here
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 80013a0:	2101      	movs	r1, #1
 80013a2:	2001      	movs	r0, #1
 80013a4:	f00c ff8c 	bl	800e2c0 <UTIL_LPM_SetOffMode>
  //Button_Init();

  //RxUART_Init();

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 80013a8:	f000 f856 	bl	8001458 <appe_Tl_Init>
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */

   return;
 80013ac:	bf00      	nop
}
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	200001cc 	.word	0x200001cc

080013b4 <Init_Smps>:

void Init_Smps(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 80013b8:	bf00      	nop
}
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr

080013c2 <Init_Exti>:

void Init_Exti(void)
{
 80013c2:	b580      	push	{r7, lr}
 80013c4:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 80013c6:	2050      	movs	r0, #80	@ 0x50
 80013c8:	f7ff ff30 	bl	800122c <LL_EXTI_EnableIT_32_63>

  return;
 80013cc:	bf00      	nop
}
 80013ce:	bd80      	pop	{r7, pc}

080013d0 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  Reset_BackupDomain();

  Reset_IPCC();
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 80013d4:	bf00      	nop
}
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr

080013de <Config_HSE>:
  return;
}
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 80013de:	b580      	push	{r7, lr}
 80013e0:	b082      	sub	sp, #8
 80013e2:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 80013e4:	2000      	movs	r0, #0
 80013e6:	f00a fbd5 	bl	800bb94 <OTP_Read>
 80013ea:	6078      	str	r0, [r7, #4]
  if (p_otp)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d005      	beq.n	80013fe <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	799b      	ldrb	r3, [r3, #6]
 80013f6:	4618      	mov	r0, r3
 80013f8:	f7ff ff2c 	bl	8001254 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 80013fc:	bf00      	nop
 80013fe:	bf00      	nop
}
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}

08001406 <System_Init>:

static void System_Init(void)
{
 8001406:	b580      	push	{r7, lr}
 8001408:	af00      	add	r7, sp, #0
  Init_Smps();
 800140a:	f7ff ffd3 	bl	80013b4 <Init_Smps>

  Init_Exti();
 800140e:	f7ff ffd8 	bl	80013c2 <Init_Exti>

  Init_Rtc();
 8001412:	f000 f803 	bl	800141c <Init_Rtc>

  return;
 8001416:	bf00      	nop
}
 8001418:	bd80      	pop	{r7, pc}
	...

0800141c <Init_Rtc>:

static void Init_Rtc(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8001420:	4805      	ldr	r0, [pc, #20]	@ (8001438 <Init_Rtc+0x1c>)
 8001422:	f7ff ff82 	bl	800132a <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8001426:	2100      	movs	r1, #0
 8001428:	4803      	ldr	r0, [pc, #12]	@ (8001438 <Init_Rtc+0x1c>)
 800142a:	f7ff ff8e 	bl	800134a <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 800142e:	4802      	ldr	r0, [pc, #8]	@ (8001438 <Init_Rtc+0x1c>)
 8001430:	f7ff ff6e 	bl	8001310 <LL_RTC_EnableWriteProtection>

  return;
 8001434:	bf00      	nop
}
 8001436:	bd80      	pop	{r7, pc}
 8001438:	40002800 	.word	0x40002800

0800143c <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8001440:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001444:	f7ff ff24 	bl	8001290 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8001448:	f00c ff28 	bl	800e29c <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 800144c:	2004      	movs	r0, #4
 800144e:	f7ff fed7 	bl	8001200 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 8001452:	bf00      	nop
}
 8001454:	bd80      	pop	{r7, pc}
	...

08001458 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b088      	sub	sp, #32
 800145c:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 800145e:	f00a f8b7 	bl	800b5d0 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 8001462:	4a11      	ldr	r2, [pc, #68]	@ (80014a8 <appe_Tl_Init+0x50>)
 8001464:	2100      	movs	r1, #0
 8001466:	2080      	movs	r0, #128	@ 0x80
 8001468:	f00d f856 	bl	800e518 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 800146c:	4b0f      	ldr	r3, [pc, #60]	@ (80014ac <appe_Tl_Init+0x54>)
 800146e:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8001470:	4b0f      	ldr	r3, [pc, #60]	@ (80014b0 <appe_Tl_Init+0x58>)
 8001472:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8001474:	463b      	mov	r3, r7
 8001476:	4619      	mov	r1, r3
 8001478:	480e      	ldr	r0, [pc, #56]	@ (80014b4 <appe_Tl_Init+0x5c>)
 800147a:	f009 ff6b 	bl	800b354 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 800147e:	4b0e      	ldr	r3, [pc, #56]	@ (80014b8 <appe_Tl_Init+0x60>)
 8001480:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8001482:	4b0e      	ldr	r3, [pc, #56]	@ (80014bc <appe_Tl_Init+0x64>)
 8001484:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8001486:	4b0e      	ldr	r3, [pc, #56]	@ (80014c0 <appe_Tl_Init+0x68>)
 8001488:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 800148a:	f44f 6306 	mov.w	r3, #2144	@ 0x860
 800148e:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8001490:	f107 0308 	add.w	r3, r7, #8
 8001494:	4618      	mov	r0, r3
 8001496:	f00a f9dd 	bl	800b854 <TL_MM_Init>

  TL_Enable();
 800149a:	f00a f893 	bl	800b5c4 <TL_Enable>

  return;
 800149e:	bf00      	nop
}
 80014a0:	3720      	adds	r7, #32
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	0800b38d 	.word	0x0800b38d
 80014ac:	20030a58 	.word	0x20030a58
 80014b0:	080014c5 	.word	0x080014c5
 80014b4:	080014dd 	.word	0x080014dd
 80014b8:	20030c70 	.word	0x20030c70
 80014bc:	20030b64 	.word	0x20030b64
 80014c0:	200301f8 	.word	0x200301f8

080014c4 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	4603      	mov	r3, r0
 80014cc:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 80014ce:	bf00      	nop
}
 80014d0:	370c      	adds	r7, #12
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
	...

080014dc <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b088      	sub	sp, #32
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	330b      	adds	r3, #11
 80014ea:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 80014ec:	69fb      	ldr	r3, [r7, #28]
 80014ee:	881b      	ldrh	r3, [r3, #0]
 80014f0:	b29b      	uxth	r3, r3
 80014f2:	f5a3 4312 	sub.w	r3, r3, #37376	@ 0x9200
 80014f6:	2b07      	cmp	r3, #7
 80014f8:	d860      	bhi.n	80015bc <APPE_SysUserEvtRx+0xe0>
 80014fa:	a201      	add	r2, pc, #4	@ (adr r2, 8001500 <APPE_SysUserEvtRx+0x24>)
 80014fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001500:	08001521 	.word	0x08001521
 8001504:	08001563 	.word	0x08001563
 8001508:	08001571 	.word	0x08001571
 800150c:	080015bd 	.word	0x080015bd
 8001510:	0800158d 	.word	0x0800158d
 8001514:	0800159d 	.word	0x0800159d
 8001518:	080015a5 	.word	0x080015a5
 800151c:	080015b5 	.word	0x080015b5
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 8001520:	f107 030c 	add.w	r3, r7, #12
 8001524:	4618      	mov	r0, r3
 8001526:	f009 fccb 	bl	800aec0 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
 800152a:	7b3b      	ldrb	r3, [r7, #12]
 800152c:	4619      	mov	r1, r3
 800152e:	7b7b      	ldrb	r3, [r7, #13]
 8001530:	461a      	mov	r2, r3
 8001532:	7bbb      	ldrb	r3, [r7, #14]
 8001534:	4824      	ldr	r0, [pc, #144]	@ (80015c8 <APPE_SysUserEvtRx+0xec>)
 8001536:	f00d f9cf 	bl	800e8d8 <iprintf>
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
 800153a:	7c3b      	ldrb	r3, [r7, #16]
 800153c:	4619      	mov	r1, r3
 800153e:	4823      	ldr	r0, [pc, #140]	@ (80015cc <APPE_SysUserEvtRx+0xf0>)
 8001540:	f00d f9ca 	bl	800e8d8 <iprintf>
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);
 8001544:	7dbb      	ldrb	r3, [r7, #22]
 8001546:	4619      	mov	r1, r3
 8001548:	7dfb      	ldrb	r3, [r7, #23]
 800154a:	461a      	mov	r2, r3
 800154c:	7e3b      	ldrb	r3, [r7, #24]
 800154e:	4820      	ldr	r0, [pc, #128]	@ (80015d0 <APPE_SysUserEvtRx+0xf4>)
 8001550:	f00d f9c2 	bl	800e8d8 <iprintf>

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
 8001554:	481f      	ldr	r0, [pc, #124]	@ (80015d4 <APPE_SysUserEvtRx+0xf8>)
 8001556:	f00d f9bf 	bl	800e8d8 <iprintf>
    APPE_SysEvtReadyProcessing(pPayload);
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f000 f870 	bl	8001640 <APPE_SysEvtReadyProcessing>
    break;
 8001560:	e02d      	b.n	80015be <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
 8001562:	481d      	ldr	r0, [pc, #116]	@ (80015d8 <APPE_SysUserEvtRx+0xfc>)
 8001564:	f00d f9b8 	bl	800e8d8 <iprintf>
    APPE_SysEvtError(pPayload);
 8001568:	6878      	ldr	r0, [r7, #4]
 800156a:	f000 f843 	bl	80015f4 <APPE_SysEvtError>
    break;
 800156e:	e026      	b.n	80015be <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE -- BLE NVM RAM HAS BEEN UPDATED BY CPU2 \n");
 8001570:	481a      	ldr	r0, [pc, #104]	@ (80015dc <APPE_SysUserEvtRx+0x100>)
 8001572:	f00d fa21 	bl	800e9b8 <puts>
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->StartAddress,
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	3302      	adds	r3, #2
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
 800157a:	6819      	ldr	r1, [r3, #0]
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->Size);
 800157c:	69fb      	ldr	r3, [r7, #28]
 800157e:	3302      	adds	r3, #2
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	461a      	mov	r2, r3
 8001584:	4816      	ldr	r0, [pc, #88]	@ (80015e0 <APPE_SysUserEvtRx+0x104>)
 8001586:	f00d f9a7 	bl	800e8d8 <iprintf>
    break;
 800158a:	e018      	b.n	80015be <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_START_WRITE:
    APP_DBG_MSG("==>> SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
                ((SHCI_C2_NvmStartWrite_Evt_t*)p_sys_event->payload)->NumberOfWords);
 800158c:	69fb      	ldr	r3, [r7, #28]
 800158e:	3302      	adds	r3, #2
    APP_DBG_MSG("==>> SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4619      	mov	r1, r3
 8001594:	4813      	ldr	r0, [pc, #76]	@ (80015e4 <APPE_SysUserEvtRx+0x108>)
 8001596:	f00d f99f 	bl	800e8d8 <iprintf>
    break;
 800159a:	e010      	b.n	80015be <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_END_WRITE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_WRITE\n\r");
 800159c:	4812      	ldr	r0, [pc, #72]	@ (80015e8 <APPE_SysUserEvtRx+0x10c>)
 800159e:	f00d f99b 	bl	800e8d8 <iprintf>
    break;
 80015a2:	e00c      	b.n	80015be <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_START_ERASE:
    APP_DBG_MSG("==>>SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
                ((SHCI_C2_NvmStartErase_Evt_t*)p_sys_event->payload)->NumberOfSectors);
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	3302      	adds	r3, #2
    APP_DBG_MSG("==>>SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4619      	mov	r1, r3
 80015ac:	480f      	ldr	r0, [pc, #60]	@ (80015ec <APPE_SysUserEvtRx+0x110>)
 80015ae:	f00d f993 	bl	800e8d8 <iprintf>
    break;
 80015b2:	e004      	b.n	80015be <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
 80015b4:	480e      	ldr	r0, [pc, #56]	@ (80015f0 <APPE_SysUserEvtRx+0x114>)
 80015b6:	f00d f98f 	bl	800e8d8 <iprintf>
    break;
 80015ba:	e000      	b.n	80015be <APPE_SysUserEvtRx+0xe2>

  default:
    break;
 80015bc:	bf00      	nop
  }

  return;
 80015be:	bf00      	nop
}
 80015c0:	3720      	adds	r7, #32
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	0800fb28 	.word	0x0800fb28
 80015cc:	0800fb4c 	.word	0x0800fb4c
 80015d0:	0800fb68 	.word	0x0800fb68
 80015d4:	0800fb80 	.word	0x0800fb80
 80015d8:	0800fba0 	.word	0x0800fba0
 80015dc:	0800fbc4 	.word	0x0800fbc4
 80015e0:	0800fc14 	.word	0x0800fc14
 80015e4:	0800fc3c 	.word	0x0800fc3c
 80015e8:	0800fc78 	.word	0x0800fc78
 80015ec:	0800fc9c 	.word	0x0800fc9c
 80015f0:	0800fcd8 	.word	0x0800fcd8

080015f4 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b084      	sub	sp, #16
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	330b      	adds	r3, #11
 8001602:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	3302      	adds	r3, #2
 8001608:	60bb      	str	r3, [r7, #8]

  APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON %x \n\r",(*p_sys_error_code));
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	4619      	mov	r1, r3
 8001610:	4808      	ldr	r0, [pc, #32]	@ (8001634 <APPE_SysEvtError+0x40>)
 8001612:	f00d f961 	bl	800e8d8 <iprintf>

  if ((*p_sys_error_code) == ERR_BLE_INIT)
 8001616:	68bb      	ldr	r3, [r7, #8]
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d103      	bne.n	8001626 <APPE_SysEvtError+0x32>
  {
    /* Error during BLE stack initialization */
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - ERR_BLE_INIT \n");
 800161e:	4806      	ldr	r0, [pc, #24]	@ (8001638 <APPE_SysEvtError+0x44>)
 8001620:	f00d f9ca 	bl	800e9b8 <puts>
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 8001624:	e003      	b.n	800162e <APPE_SysEvtError+0x3a>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
 8001626:	4805      	ldr	r0, [pc, #20]	@ (800163c <APPE_SysEvtError+0x48>)
 8001628:	f00d f9c6 	bl	800e9b8 <puts>
  return;
 800162c:	bf00      	nop
}
 800162e:	3710      	adds	r7, #16
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	0800fcfc 	.word	0x0800fcfc
 8001638:	0800fd2c 	.word	0x0800fd2c
 800163c:	0800fd68 	.word	0x0800fd68

08001640 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b08a      	sub	sp, #40	@ 0x28
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 8001648:	f107 0308 	add.w	r3, r7, #8
 800164c:	2200      	movs	r2, #0
 800164e:	601a      	str	r2, [r3, #0]
 8001650:	605a      	str	r2, [r3, #4]
 8001652:	609a      	str	r2, [r3, #8]
 8001654:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 8001656:	2300      	movs	r3, #0
 8001658:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t DeviceID=0;
 800165a:	2300      	movs	r3, #0
 800165c:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	330b      	adds	r3, #11
 8001664:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	3302      	adds	r3, #2
 800166a:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 800166c:	69bb      	ldr	r3, [r7, #24]
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d128      	bne.n	80016c6 <APPE_SysEvtReadyProcessing+0x86>
  {
    /**
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");
 8001674:	481d      	ldr	r0, [pc, #116]	@ (80016ec <APPE_SysEvtReadyProcessing+0xac>)
 8001676:	f00d f99f 	bl	800e9b8 <puts>

    /* Traces channel initialization */
    APPD_EnableCPU2();
 800167a:	f7ff fd93 	bl	80011a4 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 800167e:	230f      	movs	r3, #15
 8001680:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 8001682:	237f      	movs	r3, #127	@ 0x7f
 8001684:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 8001686:	f7ff fe25 	bl	80012d4 <LL_DBGMCU_GetRevisionID>
 800168a:	6278      	str	r0, [r7, #36]	@ 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);
 800168c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800168e:	4818      	ldr	r0, [pc, #96]	@ (80016f0 <APPE_SysEvtReadyProcessing+0xb0>)
 8001690:	f00d f922 	bl	800e8d8 <iprintf>

    config_param.RevisionID = (uint16_t)RevisionID;
 8001694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001696:	b29b      	uxth	r3, r3
 8001698:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 800169a:	f7ff fe0d 	bl	80012b8 <LL_DBGMCU_GetDeviceID>
 800169e:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
 80016a0:	6a39      	ldr	r1, [r7, #32]
 80016a2:	4814      	ldr	r0, [pc, #80]	@ (80016f4 <APPE_SysEvtReadyProcessing+0xb4>)
 80016a4:	f00d f918 	bl	800e8d8 <iprintf>
    config_param.DeviceID = (uint16_t)DeviceID;
 80016a8:	6a3b      	ldr	r3, [r7, #32]
 80016aa:	b29b      	uxth	r3, r3
 80016ac:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 80016ae:	f107 0308 	add.w	r3, r7, #8
 80016b2:	4618      	mov	r0, r3
 80016b4:	f009 fbee 	bl	800ae94 <SHCI_C2_Config>

    APP_BLE_Init();
 80016b8:	f00a ff40 	bl	800c53c <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 80016bc:	2100      	movs	r1, #0
 80016be:	2001      	movs	r0, #1
 80016c0:	f00c fdfe 	bl	800e2c0 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 80016c4:	e00e      	b.n	80016e4 <APPE_SysEvtReadyProcessing+0xa4>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 80016c6:	69bb      	ldr	r3, [r7, #24]
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d106      	bne.n	80016dc <APPE_SysEvtReadyProcessing+0x9c>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - FUS_FW_RUNNING \n\r");
 80016ce:	480a      	ldr	r0, [pc, #40]	@ (80016f8 <APPE_SysEvtReadyProcessing+0xb8>)
 80016d0:	f00d f902 	bl	800e8d8 <iprintf>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2200      	movs	r2, #0
 80016d8:	701a      	strb	r2, [r3, #0]
  return;
 80016da:	e003      	b.n	80016e4 <APPE_SysEvtReadyProcessing+0xa4>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
 80016dc:	4807      	ldr	r0, [pc, #28]	@ (80016fc <APPE_SysEvtReadyProcessing+0xbc>)
 80016de:	f00d f8fb 	bl	800e8d8 <iprintf>
  return;
 80016e2:	bf00      	nop
}
 80016e4:	3728      	adds	r7, #40	@ 0x28
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	0800fda0 	.word	0x0800fda0
 80016f0:	0800fdbc 	.word	0x0800fdbc
 80016f4:	0800fde0 	.word	0x0800fde0
 80016f8:	0800fe00 	.word	0x0800fe00
 80016fc:	0800fe34 	.word	0x0800fe34

08001700 <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b084      	sub	sp, #16
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001708:	f001 ff6e 	bl	80035e8 <HAL_GetTick>
 800170c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001718:	d00a      	beq.n	8001730 <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 800171a:	f001 ff7d 	bl	8003618 <HAL_GetTickFreq>
 800171e:	4603      	mov	r3, r0
 8001720:	461a      	mov	r2, r3
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	4413      	add	r3, r2
 8001726:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001728:	e002      	b.n	8001730 <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 800172a:	f7ff fde1 	bl	80012f0 <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM) || defined (__ARMCC_VERSION)
    __force_stores();
  #endif /* __ARMCC_VERSION */

    __WFI();
 800172e:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 8001730:	f001 ff5a 	bl	80035e8 <HAL_GetTick>
 8001734:	4602      	mov	r2, r0
 8001736:	68bb      	ldr	r3, [r7, #8]
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	68fa      	ldr	r2, [r7, #12]
 800173c:	429a      	cmp	r2, r3
 800173e:	d8f4      	bhi.n	800172a <HAL_Delay+0x2a>
  }
}
 8001740:	bf00      	nop
 8001742:	bf00      	nop
 8001744:	3710      	adds	r7, #16
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}

0800174a <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 800174a:	b580      	push	{r7, lr}
 800174c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800174e:	f04f 30ff 	mov.w	r0, #4294967295
 8001752:	f00c fde5 	bl	800e320 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8001756:	bf00      	nop
 8001758:	bd80      	pop	{r7, pc}

0800175a <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 800175a:	b480      	push	{r7}
 800175c:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 800175e:	bf00      	nop
}
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr

08001768 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001772:	f04f 30ff 	mov.w	r0, #4294967295
 8001776:	f00c fdd3 	bl	800e320 <UTIL_SEQ_Run>
  return;
 800177a:	bf00      	nop
}
 800177c:	3708      	adds	r7, #8
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}

08001782 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8001782:	b580      	push	{r7, lr}
 8001784:	b082      	sub	sp, #8
 8001786:	af00      	add	r7, sp, #0
 8001788:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800178a:	2100      	movs	r1, #0
 800178c:	2080      	movs	r0, #128	@ 0x80
 800178e:	f00c fee5 	bl	800e55c <UTIL_SEQ_SetTask>
  return;
 8001792:	bf00      	nop
}
 8001794:	3708      	adds	r7, #8
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}

0800179a <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 800179a:	b580      	push	{r7, lr}
 800179c:	b082      	sub	sp, #8
 800179e:	af00      	add	r7, sp, #0
 80017a0:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80017a2:	2002      	movs	r0, #2
 80017a4:	f00c ff46 	bl	800e634 <UTIL_SEQ_SetEvt>
  return;
 80017a8:	bf00      	nop
}
 80017aa:	3708      	adds	r7, #8
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}

080017b0 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80017b8:	2002      	movs	r0, #2
 80017ba:	f00c ff5b 	bl	800e674 <UTIL_SEQ_WaitEvt>
  return;
 80017be:	bf00      	nop
}
 80017c0:	3708      	adds	r7, #8
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}

080017c6 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN FD_WRAP_FUNCTIONS */
void HAL_GPIO_EXTI_Callback( uint16_t GPIO_Pin )
{
 80017c6:	b580      	push	{r7, lr}
 80017c8:	b082      	sub	sp, #8
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	4603      	mov	r3, r0
 80017ce:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 80017d0:	88fb      	ldrh	r3, [r7, #6]
 80017d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80017d6:	d00b      	beq.n	80017f0 <HAL_GPIO_EXTI_Callback+0x2a>
 80017d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80017dc:	dc0e      	bgt.n	80017fc <HAL_GPIO_EXTI_Callback+0x36>
 80017de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80017e2:	d008      	beq.n	80017f6 <HAL_GPIO_EXTI_Callback+0x30>
 80017e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80017e8:	d108      	bne.n	80017fc <HAL_GPIO_EXTI_Callback+0x36>
  {
  case GPIO_PIN_12:
    /* SW button 1 */
    APP_SWA_Button_Action();
 80017ea:	f00c f9cf 	bl	800db8c <APP_SWA_Button_Action>
    break; 
 80017ee:	e006      	b.n	80017fe <HAL_GPIO_EXTI_Callback+0x38>
    
  case GPIO_PIN_13:
    /* SW button 2 */
	APP_SWB_Button_Action();
 80017f0:	f00c f9d4 	bl	800db9c <APP_SWB_Button_Action>
    break;
 80017f4:	e003      	b.n	80017fe <HAL_GPIO_EXTI_Callback+0x38>

  case ADS1299_nDRDY_Pin:
    APP_BLE_Manage_ADS1299_event();
 80017f6:	f00c fa33 	bl	800dc60 <APP_BLE_Manage_ADS1299_event>
    break; 
 80017fa:	e000      	b.n	80017fe <HAL_GPIO_EXTI_Callback+0x38>

  default:
    break;
 80017fc:	bf00      	nop
  }
  return;
 80017fe:	bf00      	nop
}
 8001800:	3708      	adds	r7, #8
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
	...

08001808 <LL_EXTI_EnableIT_0_31>:
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001810:	4b06      	ldr	r3, [pc, #24]	@ (800182c <LL_EXTI_EnableIT_0_31+0x24>)
 8001812:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8001816:	4905      	ldr	r1, [pc, #20]	@ (800182c <LL_EXTI_EnableIT_0_31+0x24>)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	4313      	orrs	r3, r2
 800181c:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8001820:	bf00      	nop
 8001822:	370c      	adds	r7, #12
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr
 800182c:	58000800 	.word	0x58000800

08001830 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8001838:	4b05      	ldr	r3, [pc, #20]	@ (8001850 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	4904      	ldr	r1, [pc, #16]	@ (8001850 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4313      	orrs	r3, r2
 8001842:	600b      	str	r3, [r1, #0]

}
 8001844:	bf00      	nop
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr
 8001850:	58000800 	.word	0x58000800

08001854 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800185a:	4b0d      	ldr	r3, [pc, #52]	@ (8001890 <ReadRtcSsrValue+0x3c>)
 800185c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800185e:	b29b      	uxth	r3, r3
 8001860:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001862:	4b0b      	ldr	r3, [pc, #44]	@ (8001890 <ReadRtcSsrValue+0x3c>)
 8001864:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001866:	b29b      	uxth	r3, r3
 8001868:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 800186a:	e005      	b.n	8001878 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001870:	4b07      	ldr	r3, [pc, #28]	@ (8001890 <ReadRtcSsrValue+0x3c>)
 8001872:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001874:	b29b      	uxth	r3, r3
 8001876:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8001878:	687a      	ldr	r2, [r7, #4]
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	429a      	cmp	r2, r3
 800187e:	d1f5      	bne.n	800186c <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8001880:	683b      	ldr	r3, [r7, #0]
}
 8001882:	4618      	mov	r0, r3
 8001884:	370c      	adds	r7, #12
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop
 8001890:	40002800 	.word	0x40002800

08001894 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8001894:	b480      	push	{r7}
 8001896:	b085      	sub	sp, #20
 8001898:	af00      	add	r7, sp, #0
 800189a:	4603      	mov	r3, r0
 800189c:	460a      	mov	r2, r1
 800189e:	71fb      	strb	r3, [r7, #7]
 80018a0:	4613      	mov	r3, r2
 80018a2:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 80018a4:	79ba      	ldrb	r2, [r7, #6]
 80018a6:	491d      	ldr	r1, [pc, #116]	@ (800191c <LinkTimerAfter+0x88>)
 80018a8:	4613      	mov	r3, r2
 80018aa:	005b      	lsls	r3, r3, #1
 80018ac:	4413      	add	r3, r2
 80018ae:	00db      	lsls	r3, r3, #3
 80018b0:	440b      	add	r3, r1
 80018b2:	3315      	adds	r3, #21
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80018b8:	7bfb      	ldrb	r3, [r7, #15]
 80018ba:	2b06      	cmp	r3, #6
 80018bc:	d009      	beq.n	80018d2 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 80018be:	7bfa      	ldrb	r2, [r7, #15]
 80018c0:	4916      	ldr	r1, [pc, #88]	@ (800191c <LinkTimerAfter+0x88>)
 80018c2:	4613      	mov	r3, r2
 80018c4:	005b      	lsls	r3, r3, #1
 80018c6:	4413      	add	r3, r2
 80018c8:	00db      	lsls	r3, r3, #3
 80018ca:	440b      	add	r3, r1
 80018cc:	3314      	adds	r3, #20
 80018ce:	79fa      	ldrb	r2, [r7, #7]
 80018d0:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 80018d2:	79fa      	ldrb	r2, [r7, #7]
 80018d4:	4911      	ldr	r1, [pc, #68]	@ (800191c <LinkTimerAfter+0x88>)
 80018d6:	4613      	mov	r3, r2
 80018d8:	005b      	lsls	r3, r3, #1
 80018da:	4413      	add	r3, r2
 80018dc:	00db      	lsls	r3, r3, #3
 80018de:	440b      	add	r3, r1
 80018e0:	3315      	adds	r3, #21
 80018e2:	7bfa      	ldrb	r2, [r7, #15]
 80018e4:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 80018e6:	79fa      	ldrb	r2, [r7, #7]
 80018e8:	490c      	ldr	r1, [pc, #48]	@ (800191c <LinkTimerAfter+0x88>)
 80018ea:	4613      	mov	r3, r2
 80018ec:	005b      	lsls	r3, r3, #1
 80018ee:	4413      	add	r3, r2
 80018f0:	00db      	lsls	r3, r3, #3
 80018f2:	440b      	add	r3, r1
 80018f4:	3314      	adds	r3, #20
 80018f6:	79ba      	ldrb	r2, [r7, #6]
 80018f8:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 80018fa:	79ba      	ldrb	r2, [r7, #6]
 80018fc:	4907      	ldr	r1, [pc, #28]	@ (800191c <LinkTimerAfter+0x88>)
 80018fe:	4613      	mov	r3, r2
 8001900:	005b      	lsls	r3, r3, #1
 8001902:	4413      	add	r3, r2
 8001904:	00db      	lsls	r3, r3, #3
 8001906:	440b      	add	r3, r1
 8001908:	3315      	adds	r3, #21
 800190a:	79fa      	ldrb	r2, [r7, #7]
 800190c:	701a      	strb	r2, [r3, #0]

  return;
 800190e:	bf00      	nop
}
 8001910:	3714      	adds	r7, #20
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	200000d8 	.word	0x200000d8

08001920 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8001920:	b480      	push	{r7}
 8001922:	b085      	sub	sp, #20
 8001924:	af00      	add	r7, sp, #0
 8001926:	4603      	mov	r3, r0
 8001928:	460a      	mov	r2, r1
 800192a:	71fb      	strb	r3, [r7, #7]
 800192c:	4613      	mov	r3, r2
 800192e:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8001930:	4b29      	ldr	r3, [pc, #164]	@ (80019d8 <LinkTimerBefore+0xb8>)
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	b2db      	uxtb	r3, r3
 8001936:	79ba      	ldrb	r2, [r7, #6]
 8001938:	429a      	cmp	r2, r3
 800193a:	d032      	beq.n	80019a2 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 800193c:	79ba      	ldrb	r2, [r7, #6]
 800193e:	4927      	ldr	r1, [pc, #156]	@ (80019dc <LinkTimerBefore+0xbc>)
 8001940:	4613      	mov	r3, r2
 8001942:	005b      	lsls	r3, r3, #1
 8001944:	4413      	add	r3, r2
 8001946:	00db      	lsls	r3, r3, #3
 8001948:	440b      	add	r3, r1
 800194a:	3314      	adds	r3, #20
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8001950:	7bfa      	ldrb	r2, [r7, #15]
 8001952:	4922      	ldr	r1, [pc, #136]	@ (80019dc <LinkTimerBefore+0xbc>)
 8001954:	4613      	mov	r3, r2
 8001956:	005b      	lsls	r3, r3, #1
 8001958:	4413      	add	r3, r2
 800195a:	00db      	lsls	r3, r3, #3
 800195c:	440b      	add	r3, r1
 800195e:	3315      	adds	r3, #21
 8001960:	79fa      	ldrb	r2, [r7, #7]
 8001962:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8001964:	79fa      	ldrb	r2, [r7, #7]
 8001966:	491d      	ldr	r1, [pc, #116]	@ (80019dc <LinkTimerBefore+0xbc>)
 8001968:	4613      	mov	r3, r2
 800196a:	005b      	lsls	r3, r3, #1
 800196c:	4413      	add	r3, r2
 800196e:	00db      	lsls	r3, r3, #3
 8001970:	440b      	add	r3, r1
 8001972:	3315      	adds	r3, #21
 8001974:	79ba      	ldrb	r2, [r7, #6]
 8001976:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8001978:	79fa      	ldrb	r2, [r7, #7]
 800197a:	4918      	ldr	r1, [pc, #96]	@ (80019dc <LinkTimerBefore+0xbc>)
 800197c:	4613      	mov	r3, r2
 800197e:	005b      	lsls	r3, r3, #1
 8001980:	4413      	add	r3, r2
 8001982:	00db      	lsls	r3, r3, #3
 8001984:	440b      	add	r3, r1
 8001986:	3314      	adds	r3, #20
 8001988:	7bfa      	ldrb	r2, [r7, #15]
 800198a:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 800198c:	79ba      	ldrb	r2, [r7, #6]
 800198e:	4913      	ldr	r1, [pc, #76]	@ (80019dc <LinkTimerBefore+0xbc>)
 8001990:	4613      	mov	r3, r2
 8001992:	005b      	lsls	r3, r3, #1
 8001994:	4413      	add	r3, r2
 8001996:	00db      	lsls	r3, r3, #3
 8001998:	440b      	add	r3, r1
 800199a:	3314      	adds	r3, #20
 800199c:	79fa      	ldrb	r2, [r7, #7]
 800199e:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 80019a0:	e014      	b.n	80019cc <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 80019a2:	79fa      	ldrb	r2, [r7, #7]
 80019a4:	490d      	ldr	r1, [pc, #52]	@ (80019dc <LinkTimerBefore+0xbc>)
 80019a6:	4613      	mov	r3, r2
 80019a8:	005b      	lsls	r3, r3, #1
 80019aa:	4413      	add	r3, r2
 80019ac:	00db      	lsls	r3, r3, #3
 80019ae:	440b      	add	r3, r1
 80019b0:	3315      	adds	r3, #21
 80019b2:	79ba      	ldrb	r2, [r7, #6]
 80019b4:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80019b6:	79ba      	ldrb	r2, [r7, #6]
 80019b8:	4908      	ldr	r1, [pc, #32]	@ (80019dc <LinkTimerBefore+0xbc>)
 80019ba:	4613      	mov	r3, r2
 80019bc:	005b      	lsls	r3, r3, #1
 80019be:	4413      	add	r3, r2
 80019c0:	00db      	lsls	r3, r3, #3
 80019c2:	440b      	add	r3, r1
 80019c4:	3314      	adds	r3, #20
 80019c6:	79fa      	ldrb	r2, [r7, #7]
 80019c8:	701a      	strb	r2, [r3, #0]
  return;
 80019ca:	bf00      	nop
}
 80019cc:	3714      	adds	r7, #20
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	20000168 	.word	0x20000168
 80019dc:	200000d8 	.word	0x200000d8

080019e0 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b084      	sub	sp, #16
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	4603      	mov	r3, r0
 80019e8:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80019ea:	4b4e      	ldr	r3, [pc, #312]	@ (8001b24 <linkTimer+0x144>)
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	2b06      	cmp	r3, #6
 80019f2:	d118      	bne.n	8001a26 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 80019f4:	4b4b      	ldr	r3, [pc, #300]	@ (8001b24 <linkTimer+0x144>)
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	b2da      	uxtb	r2, r3
 80019fa:	4b4b      	ldr	r3, [pc, #300]	@ (8001b28 <linkTimer+0x148>)
 80019fc:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 80019fe:	4a49      	ldr	r2, [pc, #292]	@ (8001b24 <linkTimer+0x144>)
 8001a00:	79fb      	ldrb	r3, [r7, #7]
 8001a02:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8001a04:	79fa      	ldrb	r2, [r7, #7]
 8001a06:	4949      	ldr	r1, [pc, #292]	@ (8001b2c <linkTimer+0x14c>)
 8001a08:	4613      	mov	r3, r2
 8001a0a:	005b      	lsls	r3, r3, #1
 8001a0c:	4413      	add	r3, r2
 8001a0e:	00db      	lsls	r3, r3, #3
 8001a10:	440b      	add	r3, r1
 8001a12:	3315      	adds	r3, #21
 8001a14:	2206      	movs	r2, #6
 8001a16:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001a18:	4b45      	ldr	r3, [pc, #276]	@ (8001b30 <linkTimer+0x150>)
 8001a1a:	f04f 32ff 	mov.w	r2, #4294967295
 8001a1e:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8001a20:	2300      	movs	r3, #0
 8001a22:	81fb      	strh	r3, [r7, #14]
 8001a24:	e078      	b.n	8001b18 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8001a26:	f000 f909 	bl	8001c3c <ReturnTimeElapsed>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8001a2e:	79fa      	ldrb	r2, [r7, #7]
 8001a30:	493e      	ldr	r1, [pc, #248]	@ (8001b2c <linkTimer+0x14c>)
 8001a32:	4613      	mov	r3, r2
 8001a34:	005b      	lsls	r3, r3, #1
 8001a36:	4413      	add	r3, r2
 8001a38:	00db      	lsls	r3, r3, #3
 8001a3a:	440b      	add	r3, r1
 8001a3c:	3308      	adds	r3, #8
 8001a3e:	6819      	ldr	r1, [r3, #0]
 8001a40:	89fb      	ldrh	r3, [r7, #14]
 8001a42:	79fa      	ldrb	r2, [r7, #7]
 8001a44:	4419      	add	r1, r3
 8001a46:	4839      	ldr	r0, [pc, #228]	@ (8001b2c <linkTimer+0x14c>)
 8001a48:	4613      	mov	r3, r2
 8001a4a:	005b      	lsls	r3, r3, #1
 8001a4c:	4413      	add	r3, r2
 8001a4e:	00db      	lsls	r3, r3, #3
 8001a50:	4403      	add	r3, r0
 8001a52:	3308      	adds	r3, #8
 8001a54:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8001a56:	79fa      	ldrb	r2, [r7, #7]
 8001a58:	4934      	ldr	r1, [pc, #208]	@ (8001b2c <linkTimer+0x14c>)
 8001a5a:	4613      	mov	r3, r2
 8001a5c:	005b      	lsls	r3, r3, #1
 8001a5e:	4413      	add	r3, r2
 8001a60:	00db      	lsls	r3, r3, #3
 8001a62:	440b      	add	r3, r1
 8001a64:	3308      	adds	r3, #8
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8001a6a:	4b2e      	ldr	r3, [pc, #184]	@ (8001b24 <linkTimer+0x144>)
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	b2db      	uxtb	r3, r3
 8001a70:	4619      	mov	r1, r3
 8001a72:	4a2e      	ldr	r2, [pc, #184]	@ (8001b2c <linkTimer+0x14c>)
 8001a74:	460b      	mov	r3, r1
 8001a76:	005b      	lsls	r3, r3, #1
 8001a78:	440b      	add	r3, r1
 8001a7a:	00db      	lsls	r3, r3, #3
 8001a7c:	4413      	add	r3, r2
 8001a7e:	3308      	adds	r3, #8
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	68ba      	ldr	r2, [r7, #8]
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d337      	bcc.n	8001af8 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8001a88:	4b26      	ldr	r3, [pc, #152]	@ (8001b24 <linkTimer+0x144>)
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8001a8e:	7b7a      	ldrb	r2, [r7, #13]
 8001a90:	4926      	ldr	r1, [pc, #152]	@ (8001b2c <linkTimer+0x14c>)
 8001a92:	4613      	mov	r3, r2
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	4413      	add	r3, r2
 8001a98:	00db      	lsls	r3, r3, #3
 8001a9a:	440b      	add	r3, r1
 8001a9c:	3315      	adds	r3, #21
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001aa2:	e013      	b.n	8001acc <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8001aa4:	7b7a      	ldrb	r2, [r7, #13]
 8001aa6:	4921      	ldr	r1, [pc, #132]	@ (8001b2c <linkTimer+0x14c>)
 8001aa8:	4613      	mov	r3, r2
 8001aaa:	005b      	lsls	r3, r3, #1
 8001aac:	4413      	add	r3, r2
 8001aae:	00db      	lsls	r3, r3, #3
 8001ab0:	440b      	add	r3, r1
 8001ab2:	3315      	adds	r3, #21
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8001ab8:	7b7a      	ldrb	r2, [r7, #13]
 8001aba:	491c      	ldr	r1, [pc, #112]	@ (8001b2c <linkTimer+0x14c>)
 8001abc:	4613      	mov	r3, r2
 8001abe:	005b      	lsls	r3, r3, #1
 8001ac0:	4413      	add	r3, r2
 8001ac2:	00db      	lsls	r3, r3, #3
 8001ac4:	440b      	add	r3, r1
 8001ac6:	3315      	adds	r3, #21
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001acc:	7b3b      	ldrb	r3, [r7, #12]
 8001ace:	2b06      	cmp	r3, #6
 8001ad0:	d00b      	beq.n	8001aea <linkTimer+0x10a>
 8001ad2:	7b3a      	ldrb	r2, [r7, #12]
 8001ad4:	4915      	ldr	r1, [pc, #84]	@ (8001b2c <linkTimer+0x14c>)
 8001ad6:	4613      	mov	r3, r2
 8001ad8:	005b      	lsls	r3, r3, #1
 8001ada:	4413      	add	r3, r2
 8001adc:	00db      	lsls	r3, r3, #3
 8001ade:	440b      	add	r3, r1
 8001ae0:	3308      	adds	r3, #8
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	68ba      	ldr	r2, [r7, #8]
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d2dc      	bcs.n	8001aa4 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8001aea:	7b7a      	ldrb	r2, [r7, #13]
 8001aec:	79fb      	ldrb	r3, [r7, #7]
 8001aee:	4611      	mov	r1, r2
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7ff fecf 	bl	8001894 <LinkTimerAfter>
 8001af6:	e00f      	b.n	8001b18 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8001af8:	4b0a      	ldr	r3, [pc, #40]	@ (8001b24 <linkTimer+0x144>)
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	b2da      	uxtb	r2, r3
 8001afe:	79fb      	ldrb	r3, [r7, #7]
 8001b00:	4611      	mov	r1, r2
 8001b02:	4618      	mov	r0, r3
 8001b04:	f7ff ff0c 	bl	8001920 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8001b08:	4b06      	ldr	r3, [pc, #24]	@ (8001b24 <linkTimer+0x144>)
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	b2da      	uxtb	r2, r3
 8001b0e:	4b06      	ldr	r3, [pc, #24]	@ (8001b28 <linkTimer+0x148>)
 8001b10:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8001b12:	4a04      	ldr	r2, [pc, #16]	@ (8001b24 <linkTimer+0x144>)
 8001b14:	79fb      	ldrb	r3, [r7, #7]
 8001b16:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8001b18:	89fb      	ldrh	r3, [r7, #14]
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3710      	adds	r7, #16
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	20000168 	.word	0x20000168
 8001b28:	20000169 	.word	0x20000169
 8001b2c:	200000d8 	.word	0x200000d8
 8001b30:	2000016c 	.word	0x2000016c

08001b34 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b085      	sub	sp, #20
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	460a      	mov	r2, r1
 8001b3e:	71fb      	strb	r3, [r7, #7]
 8001b40:	4613      	mov	r3, r2
 8001b42:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8001b44:	4b39      	ldr	r3, [pc, #228]	@ (8001c2c <UnlinkTimer+0xf8>)
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	79fa      	ldrb	r2, [r7, #7]
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d111      	bne.n	8001b74 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001b50:	4b36      	ldr	r3, [pc, #216]	@ (8001c2c <UnlinkTimer+0xf8>)
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	b2da      	uxtb	r2, r3
 8001b56:	4b36      	ldr	r3, [pc, #216]	@ (8001c30 <UnlinkTimer+0xfc>)
 8001b58:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8001b5a:	79fa      	ldrb	r2, [r7, #7]
 8001b5c:	4935      	ldr	r1, [pc, #212]	@ (8001c34 <UnlinkTimer+0x100>)
 8001b5e:	4613      	mov	r3, r2
 8001b60:	005b      	lsls	r3, r3, #1
 8001b62:	4413      	add	r3, r2
 8001b64:	00db      	lsls	r3, r3, #3
 8001b66:	440b      	add	r3, r1
 8001b68:	3315      	adds	r3, #21
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	b2da      	uxtb	r2, r3
 8001b6e:	4b2f      	ldr	r3, [pc, #188]	@ (8001c2c <UnlinkTimer+0xf8>)
 8001b70:	701a      	strb	r2, [r3, #0]
 8001b72:	e03e      	b.n	8001bf2 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8001b74:	79fa      	ldrb	r2, [r7, #7]
 8001b76:	492f      	ldr	r1, [pc, #188]	@ (8001c34 <UnlinkTimer+0x100>)
 8001b78:	4613      	mov	r3, r2
 8001b7a:	005b      	lsls	r3, r3, #1
 8001b7c:	4413      	add	r3, r2
 8001b7e:	00db      	lsls	r3, r3, #3
 8001b80:	440b      	add	r3, r1
 8001b82:	3314      	adds	r3, #20
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8001b88:	79fa      	ldrb	r2, [r7, #7]
 8001b8a:	492a      	ldr	r1, [pc, #168]	@ (8001c34 <UnlinkTimer+0x100>)
 8001b8c:	4613      	mov	r3, r2
 8001b8e:	005b      	lsls	r3, r3, #1
 8001b90:	4413      	add	r3, r2
 8001b92:	00db      	lsls	r3, r3, #3
 8001b94:	440b      	add	r3, r1
 8001b96:	3315      	adds	r3, #21
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8001b9c:	79f9      	ldrb	r1, [r7, #7]
 8001b9e:	7bfa      	ldrb	r2, [r7, #15]
 8001ba0:	4824      	ldr	r0, [pc, #144]	@ (8001c34 <UnlinkTimer+0x100>)
 8001ba2:	460b      	mov	r3, r1
 8001ba4:	005b      	lsls	r3, r3, #1
 8001ba6:	440b      	add	r3, r1
 8001ba8:	00db      	lsls	r3, r3, #3
 8001baa:	4403      	add	r3, r0
 8001bac:	3315      	adds	r3, #21
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	b2d8      	uxtb	r0, r3
 8001bb2:	4920      	ldr	r1, [pc, #128]	@ (8001c34 <UnlinkTimer+0x100>)
 8001bb4:	4613      	mov	r3, r2
 8001bb6:	005b      	lsls	r3, r3, #1
 8001bb8:	4413      	add	r3, r2
 8001bba:	00db      	lsls	r3, r3, #3
 8001bbc:	440b      	add	r3, r1
 8001bbe:	3315      	adds	r3, #21
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001bc4:	7bbb      	ldrb	r3, [r7, #14]
 8001bc6:	2b06      	cmp	r3, #6
 8001bc8:	d013      	beq.n	8001bf2 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8001bca:	79f9      	ldrb	r1, [r7, #7]
 8001bcc:	7bba      	ldrb	r2, [r7, #14]
 8001bce:	4819      	ldr	r0, [pc, #100]	@ (8001c34 <UnlinkTimer+0x100>)
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	005b      	lsls	r3, r3, #1
 8001bd4:	440b      	add	r3, r1
 8001bd6:	00db      	lsls	r3, r3, #3
 8001bd8:	4403      	add	r3, r0
 8001bda:	3314      	adds	r3, #20
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	b2d8      	uxtb	r0, r3
 8001be0:	4914      	ldr	r1, [pc, #80]	@ (8001c34 <UnlinkTimer+0x100>)
 8001be2:	4613      	mov	r3, r2
 8001be4:	005b      	lsls	r3, r3, #1
 8001be6:	4413      	add	r3, r2
 8001be8:	00db      	lsls	r3, r3, #3
 8001bea:	440b      	add	r3, r1
 8001bec:	3314      	adds	r3, #20
 8001bee:	4602      	mov	r2, r0
 8001bf0:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8001bf2:	79fa      	ldrb	r2, [r7, #7]
 8001bf4:	490f      	ldr	r1, [pc, #60]	@ (8001c34 <UnlinkTimer+0x100>)
 8001bf6:	4613      	mov	r3, r2
 8001bf8:	005b      	lsls	r3, r3, #1
 8001bfa:	4413      	add	r3, r2
 8001bfc:	00db      	lsls	r3, r3, #3
 8001bfe:	440b      	add	r3, r1
 8001c00:	330c      	adds	r3, #12
 8001c02:	2201      	movs	r2, #1
 8001c04:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8001c06:	4b09      	ldr	r3, [pc, #36]	@ (8001c2c <UnlinkTimer+0xf8>)
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	2b06      	cmp	r3, #6
 8001c0e:	d107      	bne.n	8001c20 <UnlinkTimer+0xec>
 8001c10:	79bb      	ldrb	r3, [r7, #6]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d104      	bne.n	8001c20 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001c16:	4b08      	ldr	r3, [pc, #32]	@ (8001c38 <UnlinkTimer+0x104>)
 8001c18:	f04f 32ff 	mov.w	r2, #4294967295
 8001c1c:	601a      	str	r2, [r3, #0]
  }

  return;
 8001c1e:	bf00      	nop
 8001c20:	bf00      	nop
}
 8001c22:	3714      	adds	r7, #20
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr
 8001c2c:	20000168 	.word	0x20000168
 8001c30:	20000169 	.word	0x20000169
 8001c34:	200000d8 	.word	0x200000d8
 8001c38:	2000016c 	.word	0x2000016c

08001c3c <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8001c42:	4b1a      	ldr	r3, [pc, #104]	@ (8001cac <ReturnTimeElapsed+0x70>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c4a:	d026      	beq.n	8001c9a <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8001c4c:	f7ff fe02 	bl	8001854 <ReadRtcSsrValue>
 8001c50:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8001c52:	4b16      	ldr	r3, [pc, #88]	@ (8001cac <ReturnTimeElapsed+0x70>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	687a      	ldr	r2, [r7, #4]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d805      	bhi.n	8001c68 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8001c5c:	4b13      	ldr	r3, [pc, #76]	@ (8001cac <ReturnTimeElapsed+0x70>)
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	1ad3      	subs	r3, r2, r3
 8001c64:	607b      	str	r3, [r7, #4]
 8001c66:	e00a      	b.n	8001c7e <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8001c68:	4b11      	ldr	r3, [pc, #68]	@ (8001cb0 <ReturnTimeElapsed+0x74>)
 8001c6a:	881b      	ldrh	r3, [r3, #0]
 8001c6c:	461a      	mov	r2, r3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8001c74:	4b0d      	ldr	r3, [pc, #52]	@ (8001cac <ReturnTimeElapsed+0x70>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	683a      	ldr	r2, [r7, #0]
 8001c7a:	4413      	add	r3, r2
 8001c7c:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8001c7e:	4b0d      	ldr	r3, [pc, #52]	@ (8001cb4 <ReturnTimeElapsed+0x78>)
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	461a      	mov	r2, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	fb02 f303 	mul.w	r3, r2, r3
 8001c8a:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8001c8c:	4b0a      	ldr	r3, [pc, #40]	@ (8001cb8 <ReturnTimeElapsed+0x7c>)
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	461a      	mov	r2, r3
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	40d3      	lsrs	r3, r2
 8001c96:	607b      	str	r3, [r7, #4]
 8001c98:	e001      	b.n	8001c9e <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	b29b      	uxth	r3, r3
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3708      	adds	r7, #8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	2000016c 	.word	0x2000016c
 8001cb0:	20000174 	.word	0x20000174
 8001cb4:	20000172 	.word	0x20000172
 8001cb8:	20000171 	.word	0x20000171

08001cbc <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 8001cc6:	88fb      	ldrh	r3, [r7, #6]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d108      	bne.n	8001cde <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001ccc:	f7ff fdc2 	bl	8001854 <ReadRtcSsrValue>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	4a21      	ldr	r2, [pc, #132]	@ (8001d58 <RestartWakeupCounter+0x9c>)
 8001cd4:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001cd6:	2003      	movs	r0, #3
 8001cd8:	f001 fe27 	bl	800392a <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8001cdc:	e039      	b.n	8001d52 <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8001cde:	88fb      	ldrh	r3, [r7, #6]
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d803      	bhi.n	8001cec <RestartWakeupCounter+0x30>
 8001ce4:	4b1d      	ldr	r3, [pc, #116]	@ (8001d5c <RestartWakeupCounter+0xa0>)
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d002      	beq.n	8001cf2 <RestartWakeupCounter+0x36>
      Value -= 1;
 8001cec:	88fb      	ldrh	r3, [r7, #6]
 8001cee:	3b01      	subs	r3, #1
 8001cf0:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001cf2:	bf00      	nop
 8001cf4:	4b1a      	ldr	r3, [pc, #104]	@ (8001d60 <RestartWakeupCounter+0xa4>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	68db      	ldr	r3, [r3, #12]
 8001cfa:	f003 0304 	and.w	r3, r3, #4
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d0f8      	beq.n	8001cf4 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001d02:	4b17      	ldr	r3, [pc, #92]	@ (8001d60 <RestartWakeupCounter+0xa4>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	b2da      	uxtb	r2, r3
 8001d0a:	4b15      	ldr	r3, [pc, #84]	@ (8001d60 <RestartWakeupCounter+0xa4>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8001d12:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001d14:	4b13      	ldr	r3, [pc, #76]	@ (8001d64 <RestartWakeupCounter+0xa8>)
 8001d16:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001d1a:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001d1c:	2003      	movs	r0, #3
 8001d1e:	f001 fe12 	bl	8003946 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8001d22:	4b11      	ldr	r3, [pc, #68]	@ (8001d68 <RestartWakeupCounter+0xac>)
 8001d24:	695b      	ldr	r3, [r3, #20]
 8001d26:	0c1b      	lsrs	r3, r3, #16
 8001d28:	041b      	lsls	r3, r3, #16
 8001d2a:	88fa      	ldrh	r2, [r7, #6]
 8001d2c:	490e      	ldr	r1, [pc, #56]	@ (8001d68 <RestartWakeupCounter+0xac>)
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001d32:	f7ff fd8f 	bl	8001854 <ReadRtcSsrValue>
 8001d36:	4603      	mov	r3, r0
 8001d38:	4a07      	ldr	r2, [pc, #28]	@ (8001d58 <RestartWakeupCounter+0x9c>)
 8001d3a:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8001d3c:	4b08      	ldr	r3, [pc, #32]	@ (8001d60 <RestartWakeupCounter+0xa4>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	689a      	ldr	r2, [r3, #8]
 8001d42:	4b07      	ldr	r3, [pc, #28]	@ (8001d60 <RestartWakeupCounter+0xa4>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001d4a:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8001d4c:	f3af 8000 	nop.w
  return ;
 8001d50:	bf00      	nop
}
 8001d52:	3708      	adds	r7, #8
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	2000016c 	.word	0x2000016c
 8001d5c:	20000171 	.word	0x20000171
 8001d60:	200001cc 	.word	0x200001cc
 8001d64:	58000800 	.word	0x58000800
 8001d68:	40002800 	.word	0x40002800

08001d6c <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b084      	sub	sp, #16
 8001d70:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001d72:	4b45      	ldr	r3, [pc, #276]	@ (8001e88 <RescheduleTimerList+0x11c>)
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d7e:	d107      	bne.n	8001d90 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8001d80:	bf00      	nop
 8001d82:	4b42      	ldr	r3, [pc, #264]	@ (8001e8c <RescheduleTimerList+0x120>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	f003 0304 	and.w	r3, r3, #4
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d1f8      	bne.n	8001d82 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8001d90:	4b3e      	ldr	r3, [pc, #248]	@ (8001e8c <RescheduleTimerList+0x120>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	689a      	ldr	r2, [r3, #8]
 8001d96:	4b3d      	ldr	r3, [pc, #244]	@ (8001e8c <RescheduleTimerList+0x120>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001d9e:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8001da0:	4b3b      	ldr	r3, [pc, #236]	@ (8001e90 <RescheduleTimerList+0x124>)
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8001da6:	7bfa      	ldrb	r2, [r7, #15]
 8001da8:	493a      	ldr	r1, [pc, #232]	@ (8001e94 <RescheduleTimerList+0x128>)
 8001daa:	4613      	mov	r3, r2
 8001dac:	005b      	lsls	r3, r3, #1
 8001dae:	4413      	add	r3, r2
 8001db0:	00db      	lsls	r3, r3, #3
 8001db2:	440b      	add	r3, r1
 8001db4:	3308      	adds	r3, #8
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8001dba:	f7ff ff3f 	bl	8001c3c <ReturnTimeElapsed>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8001dc2:	88fb      	ldrh	r3, [r7, #6]
 8001dc4:	68ba      	ldr	r2, [r7, #8]
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	d205      	bcs.n	8001dd6 <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001dce:	4b32      	ldr	r3, [pc, #200]	@ (8001e98 <RescheduleTimerList+0x12c>)
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	701a      	strb	r2, [r3, #0]
 8001dd4:	e04d      	b.n	8001e72 <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8001dd6:	88fb      	ldrh	r3, [r7, #6]
 8001dd8:	4a30      	ldr	r2, [pc, #192]	@ (8001e9c <RescheduleTimerList+0x130>)
 8001dda:	8812      	ldrh	r2, [r2, #0]
 8001ddc:	b292      	uxth	r2, r2
 8001dde:	4413      	add	r3, r2
 8001de0:	461a      	mov	r2, r3
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d906      	bls.n	8001df6 <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8001de8:	4b2c      	ldr	r3, [pc, #176]	@ (8001e9c <RescheduleTimerList+0x130>)
 8001dea:	881b      	ldrh	r3, [r3, #0]
 8001dec:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8001dee:	4b2a      	ldr	r3, [pc, #168]	@ (8001e98 <RescheduleTimerList+0x12c>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	701a      	strb	r2, [r3, #0]
 8001df4:	e03d      	b.n	8001e72 <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	b29a      	uxth	r2, r3
 8001dfa:	88fb      	ldrh	r3, [r7, #6]
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001e00:	4b25      	ldr	r3, [pc, #148]	@ (8001e98 <RescheduleTimerList+0x12c>)
 8001e02:	2201      	movs	r2, #1
 8001e04:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001e06:	e034      	b.n	8001e72 <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8001e08:	7bfa      	ldrb	r2, [r7, #15]
 8001e0a:	4922      	ldr	r1, [pc, #136]	@ (8001e94 <RescheduleTimerList+0x128>)
 8001e0c:	4613      	mov	r3, r2
 8001e0e:	005b      	lsls	r3, r3, #1
 8001e10:	4413      	add	r3, r2
 8001e12:	00db      	lsls	r3, r3, #3
 8001e14:	440b      	add	r3, r1
 8001e16:	3308      	adds	r3, #8
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	88fb      	ldrh	r3, [r7, #6]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d20a      	bcs.n	8001e36 <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8001e20:	7bfa      	ldrb	r2, [r7, #15]
 8001e22:	491c      	ldr	r1, [pc, #112]	@ (8001e94 <RescheduleTimerList+0x128>)
 8001e24:	4613      	mov	r3, r2
 8001e26:	005b      	lsls	r3, r3, #1
 8001e28:	4413      	add	r3, r2
 8001e2a:	00db      	lsls	r3, r3, #3
 8001e2c:	440b      	add	r3, r1
 8001e2e:	3308      	adds	r3, #8
 8001e30:	2200      	movs	r2, #0
 8001e32:	601a      	str	r2, [r3, #0]
 8001e34:	e013      	b.n	8001e5e <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8001e36:	7bfa      	ldrb	r2, [r7, #15]
 8001e38:	4916      	ldr	r1, [pc, #88]	@ (8001e94 <RescheduleTimerList+0x128>)
 8001e3a:	4613      	mov	r3, r2
 8001e3c:	005b      	lsls	r3, r3, #1
 8001e3e:	4413      	add	r3, r2
 8001e40:	00db      	lsls	r3, r3, #3
 8001e42:	440b      	add	r3, r1
 8001e44:	3308      	adds	r3, #8
 8001e46:	6819      	ldr	r1, [r3, #0]
 8001e48:	88fb      	ldrh	r3, [r7, #6]
 8001e4a:	7bfa      	ldrb	r2, [r7, #15]
 8001e4c:	1ac9      	subs	r1, r1, r3
 8001e4e:	4811      	ldr	r0, [pc, #68]	@ (8001e94 <RescheduleTimerList+0x128>)
 8001e50:	4613      	mov	r3, r2
 8001e52:	005b      	lsls	r3, r3, #1
 8001e54:	4413      	add	r3, r2
 8001e56:	00db      	lsls	r3, r3, #3
 8001e58:	4403      	add	r3, r0
 8001e5a:	3308      	adds	r3, #8
 8001e5c:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8001e5e:	7bfa      	ldrb	r2, [r7, #15]
 8001e60:	490c      	ldr	r1, [pc, #48]	@ (8001e94 <RescheduleTimerList+0x128>)
 8001e62:	4613      	mov	r3, r2
 8001e64:	005b      	lsls	r3, r3, #1
 8001e66:	4413      	add	r3, r2
 8001e68:	00db      	lsls	r3, r3, #3
 8001e6a:	440b      	add	r3, r1
 8001e6c:	3315      	adds	r3, #21
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001e72:	7bfb      	ldrb	r3, [r7, #15]
 8001e74:	2b06      	cmp	r3, #6
 8001e76:	d1c7      	bne.n	8001e08 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8001e78:	89bb      	ldrh	r3, [r7, #12]
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f7ff ff1e 	bl	8001cbc <RestartWakeupCounter>

  return ;
 8001e80:	bf00      	nop
}
 8001e82:	3710      	adds	r7, #16
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	40002800 	.word	0x40002800
 8001e8c:	200001cc 	.word	0x200001cc
 8001e90:	20000168 	.word	0x20000168
 8001e94:	200000d8 	.word	0x200000d8
 8001e98:	20000170 	.word	0x20000170
 8001e9c:	20000176 	.word	0x20000176

08001ea0 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b08a      	sub	sp, #40	@ 0x28
 8001ea4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001ea6:	f3ef 8310 	mrs	r3, PRIMASK
 8001eaa:	617b      	str	r3, [r7, #20]
  return(result);
 8001eac:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001eae:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8001eb0:	b672      	cpsid	i
}
 8001eb2:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001eb4:	4b59      	ldr	r3, [pc, #356]	@ (800201c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	22ca      	movs	r2, #202	@ 0xca
 8001eba:	625a      	str	r2, [r3, #36]	@ 0x24
 8001ebc:	4b57      	ldr	r3, [pc, #348]	@ (800201c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	2253      	movs	r2, #83	@ 0x53
 8001ec2:	625a      	str	r2, [r3, #36]	@ 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8001ec4:	4b55      	ldr	r3, [pc, #340]	@ (800201c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	689a      	ldr	r2, [r3, #8]
 8001eca:	4b54      	ldr	r3, [pc, #336]	@ (800201c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001ed2:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8001ed4:	4b52      	ldr	r3, [pc, #328]	@ (8002020 <HW_TS_RTC_Wakeup_Handler+0x180>)
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8001edc:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001ee0:	4950      	ldr	r1, [pc, #320]	@ (8002024 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001ee2:	4613      	mov	r3, r2
 8001ee4:	005b      	lsls	r3, r3, #1
 8001ee6:	4413      	add	r3, r2
 8001ee8:	00db      	lsls	r3, r3, #3
 8001eea:	440b      	add	r3, r1
 8001eec:	330c      	adds	r3, #12
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	2b02      	cmp	r3, #2
 8001ef4:	d16e      	bne.n	8001fd4 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8001ef6:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001efa:	494a      	ldr	r1, [pc, #296]	@ (8002024 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001efc:	4613      	mov	r3, r2
 8001efe:	005b      	lsls	r3, r3, #1
 8001f00:	4413      	add	r3, r2
 8001f02:	00db      	lsls	r3, r3, #3
 8001f04:	440b      	add	r3, r1
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8001f0a:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001f0e:	4945      	ldr	r1, [pc, #276]	@ (8002024 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001f10:	4613      	mov	r3, r2
 8001f12:	005b      	lsls	r3, r3, #1
 8001f14:	4413      	add	r3, r2
 8001f16:	00db      	lsls	r3, r3, #3
 8001f18:	440b      	add	r3, r1
 8001f1a:	3310      	adds	r3, #16
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8001f20:	4b41      	ldr	r3, [pc, #260]	@ (8002028 <HW_TS_RTC_Wakeup_Handler+0x188>)
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d04c      	beq.n	8001fc4 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8001f2a:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001f2e:	493d      	ldr	r1, [pc, #244]	@ (8002024 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001f30:	4613      	mov	r3, r2
 8001f32:	005b      	lsls	r3, r3, #1
 8001f34:	4413      	add	r3, r2
 8001f36:	00db      	lsls	r3, r3, #3
 8001f38:	440b      	add	r3, r1
 8001f3a:	330d      	adds	r3, #13
 8001f3c:	781b      	ldrb	r3, [r3, #0]
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d124      	bne.n	8001f8e <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8001f44:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001f48:	2101      	movs	r1, #1
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f7ff fdf2 	bl	8001b34 <UnlinkTimer>
 8001f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f52:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	f383 8810 	msr	PRIMASK, r3
}
 8001f5a:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8001f5c:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001f60:	4930      	ldr	r1, [pc, #192]	@ (8002024 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001f62:	4613      	mov	r3, r2
 8001f64:	005b      	lsls	r3, r3, #1
 8001f66:	4413      	add	r3, r2
 8001f68:	00db      	lsls	r3, r3, #3
 8001f6a:	440b      	add	r3, r1
 8001f6c:	3304      	adds	r3, #4
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001f74:	4611      	mov	r1, r2
 8001f76:	4618      	mov	r0, r3
 8001f78:	f000 fa32 	bl	80023e0 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001f7c:	4b27      	ldr	r3, [pc, #156]	@ (800201c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	22ca      	movs	r2, #202	@ 0xca
 8001f82:	625a      	str	r2, [r3, #36]	@ 0x24
 8001f84:	4b25      	ldr	r3, [pc, #148]	@ (800201c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	2253      	movs	r2, #83	@ 0x53
 8001f8a:	625a      	str	r2, [r3, #36]	@ 0x24
 8001f8c:	e012      	b.n	8001fb4 <HW_TS_RTC_Wakeup_Handler+0x114>
 8001f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f90:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	f383 8810 	msr	PRIMASK, r3
}
 8001f98:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8001f9a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f000 f99a 	bl	80022d8 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001fa4:	4b1d      	ldr	r3, [pc, #116]	@ (800201c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	22ca      	movs	r2, #202	@ 0xca
 8001faa:	625a      	str	r2, [r3, #36]	@ 0x24
 8001fac:	4b1b      	ldr	r3, [pc, #108]	@ (800201c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	2253      	movs	r2, #83	@ 0x53
 8001fb2:	625a      	str	r2, [r3, #36]	@ 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8001fb4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001fb8:	69fa      	ldr	r2, [r7, #28]
 8001fba:	4619      	mov	r1, r3
 8001fbc:	69b8      	ldr	r0, [r7, #24]
 8001fbe:	f000 fa95 	bl	80024ec <HW_TS_RTC_Int_AppNot>
 8001fc2:	e022      	b.n	800200a <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 8001fc4:	f7ff fed2 	bl	8001d6c <RescheduleTimerList>
 8001fc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fca:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	f383 8810 	msr	PRIMASK, r3
}
 8001fd2:	e01a      	b.n	800200a <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001fd4:	bf00      	nop
 8001fd6:	4b11      	ldr	r3, [pc, #68]	@ (800201c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	f003 0304 	and.w	r3, r3, #4
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d0f8      	beq.n	8001fd6 <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001fe4:	4b0d      	ldr	r3, [pc, #52]	@ (800201c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	68db      	ldr	r3, [r3, #12]
 8001fea:	b2da      	uxtb	r2, r3
 8001fec:	4b0b      	ldr	r3, [pc, #44]	@ (800201c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8001ff4:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001ff6:	4b0d      	ldr	r3, [pc, #52]	@ (800202c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001ff8:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001ffc:	60da      	str	r2, [r3, #12]
 8001ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002000:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	f383 8810 	msr	PRIMASK, r3
}
 8002008:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800200a:	4b04      	ldr	r3, [pc, #16]	@ (800201c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	22ff      	movs	r2, #255	@ 0xff
 8002010:	625a      	str	r2, [r3, #36]	@ 0x24

  return;
 8002012:	bf00      	nop
}
 8002014:	3728      	adds	r7, #40	@ 0x28
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	200001cc 	.word	0x200001cc
 8002020:	20000168 	.word	0x20000168
 8002024:	200000d8 	.word	0x200000d8
 8002028:	20000170 	.word	0x20000170
 800202c:	58000800 	.word	0x58000800

08002030 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b088      	sub	sp, #32
 8002034:	af00      	add	r7, sp, #0
 8002036:	4603      	mov	r3, r0
 8002038:	6039      	str	r1, [r7, #0]
 800203a:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800203c:	4b5e      	ldr	r3, [pc, #376]	@ (80021b8 <HW_TS_Init+0x188>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	22ca      	movs	r2, #202	@ 0xca
 8002042:	625a      	str	r2, [r3, #36]	@ 0x24
 8002044:	4b5c      	ldr	r3, [pc, #368]	@ (80021b8 <HW_TS_Init+0x188>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	2253      	movs	r2, #83	@ 0x53
 800204a:	625a      	str	r2, [r3, #36]	@ 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800204c:	4b5b      	ldr	r3, [pc, #364]	@ (80021bc <HW_TS_Init+0x18c>)
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	4a5a      	ldr	r2, [pc, #360]	@ (80021bc <HW_TS_Init+0x18c>)
 8002052:	f043 0320 	orr.w	r3, r3, #32
 8002056:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8002058:	4b58      	ldr	r3, [pc, #352]	@ (80021bc <HW_TS_Init+0x18c>)
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	b2db      	uxtb	r3, r3
 800205e:	f003 0307 	and.w	r3, r3, #7
 8002062:	b2db      	uxtb	r3, r3
 8002064:	f1c3 0304 	rsb	r3, r3, #4
 8002068:	b2da      	uxtb	r2, r3
 800206a:	4b55      	ldr	r3, [pc, #340]	@ (80021c0 <HW_TS_Init+0x190>)
 800206c:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 800206e:	4b53      	ldr	r3, [pc, #332]	@ (80021bc <HW_TS_Init+0x18c>)
 8002070:	691b      	ldr	r3, [r3, #16]
 8002072:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002076:	f44f 02fe 	mov.w	r2, #8323072	@ 0x7f0000
 800207a:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800207c:	693a      	ldr	r2, [r7, #16]
 800207e:	fa92 f2a2 	rbit	r2, r2
 8002082:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002084:	68fa      	ldr	r2, [r7, #12]
 8002086:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002088:	697a      	ldr	r2, [r7, #20]
 800208a:	2a00      	cmp	r2, #0
 800208c:	d101      	bne.n	8002092 <HW_TS_Init+0x62>
  {
    return 32U;
 800208e:	2220      	movs	r2, #32
 8002090:	e003      	b.n	800209a <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 8002092:	697a      	ldr	r2, [r7, #20]
 8002094:	fab2 f282 	clz	r2, r2
 8002098:	b2d2      	uxtb	r2, r2
 800209a:	40d3      	lsrs	r3, r2
 800209c:	b2db      	uxtb	r3, r3
 800209e:	3301      	adds	r3, #1
 80020a0:	b2da      	uxtb	r2, r3
 80020a2:	4b48      	ldr	r3, [pc, #288]	@ (80021c4 <HW_TS_Init+0x194>)
 80020a4:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 80020a6:	4b45      	ldr	r3, [pc, #276]	@ (80021bc <HW_TS_Init+0x18c>)
 80020a8:	691b      	ldr	r3, [r3, #16]
 80020aa:	b29b      	uxth	r3, r3
 80020ac:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80020b0:	b29b      	uxth	r3, r3
 80020b2:	3301      	adds	r3, #1
 80020b4:	b29a      	uxth	r2, r3
 80020b6:	4b44      	ldr	r3, [pc, #272]	@ (80021c8 <HW_TS_Init+0x198>)
 80020b8:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 80020ba:	4b43      	ldr	r3, [pc, #268]	@ (80021c8 <HW_TS_Init+0x198>)
 80020bc:	881b      	ldrh	r3, [r3, #0]
 80020be:	3b01      	subs	r3, #1
 80020c0:	4a40      	ldr	r2, [pc, #256]	@ (80021c4 <HW_TS_Init+0x194>)
 80020c2:	7812      	ldrb	r2, [r2, #0]
 80020c4:	fb02 f303 	mul.w	r3, r2, r3
 80020c8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80020cc:	4a3c      	ldr	r2, [pc, #240]	@ (80021c0 <HW_TS_Init+0x190>)
 80020ce:	7812      	ldrb	r2, [r2, #0]
 80020d0:	40d3      	lsrs	r3, r2
 80020d2:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 80020d4:	69bb      	ldr	r3, [r7, #24]
 80020d6:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80020da:	4293      	cmp	r3, r2
 80020dc:	d904      	bls.n	80020e8 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 80020de:	4b3b      	ldr	r3, [pc, #236]	@ (80021cc <HW_TS_Init+0x19c>)
 80020e0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80020e4:	801a      	strh	r2, [r3, #0]
 80020e6:	e003      	b.n	80020f0 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 80020e8:	69bb      	ldr	r3, [r7, #24]
 80020ea:	b29a      	uxth	r2, r3
 80020ec:	4b37      	ldr	r3, [pc, #220]	@ (80021cc <HW_TS_Init+0x19c>)
 80020ee:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80020f0:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80020f4:	f7ff fb9c 	bl	8001830 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80020f8:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80020fc:	f7ff fb84 	bl	8001808 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8002100:	79fb      	ldrb	r3, [r7, #7]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d13d      	bne.n	8002182 <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8002106:	4b32      	ldr	r3, [pc, #200]	@ (80021d0 <HW_TS_Init+0x1a0>)
 8002108:	2201      	movs	r2, #1
 800210a:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 800210c:	4b31      	ldr	r3, [pc, #196]	@ (80021d4 <HW_TS_Init+0x1a4>)
 800210e:	f04f 32ff 	mov.w	r2, #4294967295
 8002112:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8002114:	2300      	movs	r3, #0
 8002116:	77fb      	strb	r3, [r7, #31]
 8002118:	e00c      	b.n	8002134 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 800211a:	7ffa      	ldrb	r2, [r7, #31]
 800211c:	492e      	ldr	r1, [pc, #184]	@ (80021d8 <HW_TS_Init+0x1a8>)
 800211e:	4613      	mov	r3, r2
 8002120:	005b      	lsls	r3, r3, #1
 8002122:	4413      	add	r3, r2
 8002124:	00db      	lsls	r3, r3, #3
 8002126:	440b      	add	r3, r1
 8002128:	330c      	adds	r3, #12
 800212a:	2200      	movs	r2, #0
 800212c:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 800212e:	7ffb      	ldrb	r3, [r7, #31]
 8002130:	3301      	adds	r3, #1
 8002132:	77fb      	strb	r3, [r7, #31]
 8002134:	7ffb      	ldrb	r3, [r7, #31]
 8002136:	2b05      	cmp	r3, #5
 8002138:	d9ef      	bls.n	800211a <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 800213a:	4b28      	ldr	r3, [pc, #160]	@ (80021dc <HW_TS_Init+0x1ac>)
 800213c:	2206      	movs	r2, #6
 800213e:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8002140:	4b1d      	ldr	r3, [pc, #116]	@ (80021b8 <HW_TS_Init+0x188>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	689a      	ldr	r2, [r3, #8]
 8002146:	4b1c      	ldr	r3, [pc, #112]	@ (80021b8 <HW_TS_Init+0x188>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800214e:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8002150:	4b19      	ldr	r3, [pc, #100]	@ (80021b8 <HW_TS_Init+0x188>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	68db      	ldr	r3, [r3, #12]
 8002156:	b2da      	uxtb	r2, r3
 8002158:	4b17      	ldr	r3, [pc, #92]	@ (80021b8 <HW_TS_Init+0x188>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8002160:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8002162:	4b1f      	ldr	r3, [pc, #124]	@ (80021e0 <HW_TS_Init+0x1b0>)
 8002164:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002168:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 800216a:	2003      	movs	r0, #3
 800216c:	f001 fbeb 	bl	8003946 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8002170:	4b11      	ldr	r3, [pc, #68]	@ (80021b8 <HW_TS_Init+0x188>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	689a      	ldr	r2, [r3, #8]
 8002176:	4b10      	ldr	r3, [pc, #64]	@ (80021b8 <HW_TS_Init+0x188>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800217e:	609a      	str	r2, [r3, #8]
 8002180:	e009      	b.n	8002196 <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 8002182:	4b0d      	ldr	r3, [pc, #52]	@ (80021b8 <HW_TS_Init+0x188>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800218c:	2b00      	cmp	r3, #0
 800218e:	d002      	beq.n	8002196 <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8002190:	2003      	movs	r0, #3
 8002192:	f001 fbca 	bl	800392a <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002196:	4b08      	ldr	r3, [pc, #32]	@ (80021b8 <HW_TS_Init+0x188>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	22ff      	movs	r2, #255	@ 0xff
 800219c:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 800219e:	2200      	movs	r2, #0
 80021a0:	2103      	movs	r1, #3
 80021a2:	2003      	movs	r0, #3
 80021a4:	f001 fb7f 	bl	80038a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80021a8:	2003      	movs	r0, #3
 80021aa:	f001 fb96 	bl	80038da <HAL_NVIC_EnableIRQ>

  return;
 80021ae:	bf00      	nop
}
 80021b0:	3720      	adds	r7, #32
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	200001cc 	.word	0x200001cc
 80021bc:	40002800 	.word	0x40002800
 80021c0:	20000171 	.word	0x20000171
 80021c4:	20000172 	.word	0x20000172
 80021c8:	20000174 	.word	0x20000174
 80021cc:	20000176 	.word	0x20000176
 80021d0:	20000170 	.word	0x20000170
 80021d4:	2000016c 	.word	0x2000016c
 80021d8:	200000d8 	.word	0x200000d8
 80021dc:	20000168 	.word	0x20000168
 80021e0:	58000800 	.word	0x58000800

080021e4 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b08b      	sub	sp, #44	@ 0x2c
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	60f8      	str	r0, [r7, #12]
 80021ec:	60b9      	str	r1, [r7, #8]
 80021ee:	603b      	str	r3, [r7, #0]
 80021f0:	4613      	mov	r3, r2
 80021f2:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 80021f4:	2300      	movs	r3, #0
 80021f6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80021fa:	f3ef 8310 	mrs	r3, PRIMASK
 80021fe:	61fb      	str	r3, [r7, #28]
  return(result);
 8002200:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002202:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8002204:	b672      	cpsid	i
}
 8002206:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8002208:	e004      	b.n	8002214 <HW_TS_Create+0x30>
  {
    loop++;
 800220a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800220e:	3301      	adds	r3, #1
 8002210:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8002214:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002218:	2b05      	cmp	r3, #5
 800221a:	d80c      	bhi.n	8002236 <HW_TS_Create+0x52>
 800221c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8002220:	492c      	ldr	r1, [pc, #176]	@ (80022d4 <HW_TS_Create+0xf0>)
 8002222:	4613      	mov	r3, r2
 8002224:	005b      	lsls	r3, r3, #1
 8002226:	4413      	add	r3, r2
 8002228:	00db      	lsls	r3, r3, #3
 800222a:	440b      	add	r3, r1
 800222c:	330c      	adds	r3, #12
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	b2db      	uxtb	r3, r3
 8002232:	2b00      	cmp	r3, #0
 8002234:	d1e9      	bne.n	800220a <HW_TS_Create+0x26>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002236:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800223a:	2b06      	cmp	r3, #6
 800223c:	d038      	beq.n	80022b0 <HW_TS_Create+0xcc>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 800223e:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8002242:	4924      	ldr	r1, [pc, #144]	@ (80022d4 <HW_TS_Create+0xf0>)
 8002244:	4613      	mov	r3, r2
 8002246:	005b      	lsls	r3, r3, #1
 8002248:	4413      	add	r3, r2
 800224a:	00db      	lsls	r3, r3, #3
 800224c:	440b      	add	r3, r1
 800224e:	330c      	adds	r3, #12
 8002250:	2201      	movs	r2, #1
 8002252:	701a      	strb	r2, [r3, #0]
 8002254:	6a3b      	ldr	r3, [r7, #32]
 8002256:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002258:	69bb      	ldr	r3, [r7, #24]
 800225a:	f383 8810 	msr	PRIMASK, r3
}
 800225e:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 8002260:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8002264:	491b      	ldr	r1, [pc, #108]	@ (80022d4 <HW_TS_Create+0xf0>)
 8002266:	4613      	mov	r3, r2
 8002268:	005b      	lsls	r3, r3, #1
 800226a:	4413      	add	r3, r2
 800226c:	00db      	lsls	r3, r3, #3
 800226e:	440b      	add	r3, r1
 8002270:	3310      	adds	r3, #16
 8002272:	68fa      	ldr	r2, [r7, #12]
 8002274:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 8002276:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800227a:	4916      	ldr	r1, [pc, #88]	@ (80022d4 <HW_TS_Create+0xf0>)
 800227c:	4613      	mov	r3, r2
 800227e:	005b      	lsls	r3, r3, #1
 8002280:	4413      	add	r3, r2
 8002282:	00db      	lsls	r3, r3, #3
 8002284:	440b      	add	r3, r1
 8002286:	330d      	adds	r3, #13
 8002288:	79fa      	ldrb	r2, [r7, #7]
 800228a:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 800228c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8002290:	4910      	ldr	r1, [pc, #64]	@ (80022d4 <HW_TS_Create+0xf0>)
 8002292:	4613      	mov	r3, r2
 8002294:	005b      	lsls	r3, r3, #1
 8002296:	4413      	add	r3, r2
 8002298:	00db      	lsls	r3, r3, #3
 800229a:	440b      	add	r3, r1
 800229c:	683a      	ldr	r2, [r7, #0]
 800229e:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80022a6:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 80022a8:	2300      	movs	r3, #0
 80022aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80022ae:	e008      	b.n	80022c2 <HW_TS_Create+0xde>
 80022b0:	6a3b      	ldr	r3, [r7, #32]
 80022b2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	f383 8810 	msr	PRIMASK, r3
}
 80022ba:	bf00      	nop
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 80022bc:	2301      	movs	r3, #1
 80022be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  return(localreturnstatus);
 80022c2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	372c      	adds	r7, #44	@ 0x2c
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
 80022d2:	bf00      	nop
 80022d4:	200000d8 	.word	0x200000d8

080022d8 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b086      	sub	sp, #24
 80022dc:	af00      	add	r7, sp, #0
 80022de:	4603      	mov	r3, r0
 80022e0:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80022e2:	f3ef 8310 	mrs	r3, PRIMASK
 80022e6:	60fb      	str	r3, [r7, #12]
  return(result);
 80022e8:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80022ea:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80022ec:	b672      	cpsid	i
}
 80022ee:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80022f0:	2003      	movs	r0, #3
 80022f2:	f001 fb00 	bl	80038f6 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80022f6:	4b34      	ldr	r3, [pc, #208]	@ (80023c8 <HW_TS_Stop+0xf0>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	22ca      	movs	r2, #202	@ 0xca
 80022fc:	625a      	str	r2, [r3, #36]	@ 0x24
 80022fe:	4b32      	ldr	r3, [pc, #200]	@ (80023c8 <HW_TS_Stop+0xf0>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	2253      	movs	r2, #83	@ 0x53
 8002304:	625a      	str	r2, [r3, #36]	@ 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8002306:	79fa      	ldrb	r2, [r7, #7]
 8002308:	4930      	ldr	r1, [pc, #192]	@ (80023cc <HW_TS_Stop+0xf4>)
 800230a:	4613      	mov	r3, r2
 800230c:	005b      	lsls	r3, r3, #1
 800230e:	4413      	add	r3, r2
 8002310:	00db      	lsls	r3, r3, #3
 8002312:	440b      	add	r3, r1
 8002314:	330c      	adds	r3, #12
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	b2db      	uxtb	r3, r3
 800231a:	2b02      	cmp	r3, #2
 800231c:	d142      	bne.n	80023a4 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 800231e:	79fb      	ldrb	r3, [r7, #7]
 8002320:	2100      	movs	r1, #0
 8002322:	4618      	mov	r0, r3
 8002324:	f7ff fc06 	bl	8001b34 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8002328:	4b29      	ldr	r3, [pc, #164]	@ (80023d0 <HW_TS_Stop+0xf8>)
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800232e:	7cfb      	ldrb	r3, [r7, #19]
 8002330:	2b06      	cmp	r3, #6
 8002332:	d12f      	bne.n	8002394 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8002334:	4b27      	ldr	r3, [pc, #156]	@ (80023d4 <HW_TS_Stop+0xfc>)
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800233c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002340:	d107      	bne.n	8002352 <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8002342:	bf00      	nop
 8002344:	4b20      	ldr	r3, [pc, #128]	@ (80023c8 <HW_TS_Stop+0xf0>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	68db      	ldr	r3, [r3, #12]
 800234a:	f003 0304 	and.w	r3, r3, #4
 800234e:	2b00      	cmp	r3, #0
 8002350:	d1f8      	bne.n	8002344 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8002352:	4b1d      	ldr	r3, [pc, #116]	@ (80023c8 <HW_TS_Stop+0xf0>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	689a      	ldr	r2, [r3, #8]
 8002358:	4b1b      	ldr	r3, [pc, #108]	@ (80023c8 <HW_TS_Stop+0xf0>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002360:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8002362:	bf00      	nop
 8002364:	4b18      	ldr	r3, [pc, #96]	@ (80023c8 <HW_TS_Stop+0xf0>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	68db      	ldr	r3, [r3, #12]
 800236a:	f003 0304 	and.w	r3, r3, #4
 800236e:	2b00      	cmp	r3, #0
 8002370:	d0f8      	beq.n	8002364 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8002372:	4b15      	ldr	r3, [pc, #84]	@ (80023c8 <HW_TS_Stop+0xf0>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	b2da      	uxtb	r2, r3
 800237a:	4b13      	ldr	r3, [pc, #76]	@ (80023c8 <HW_TS_Stop+0xf0>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8002382:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8002384:	4b14      	ldr	r3, [pc, #80]	@ (80023d8 <HW_TS_Stop+0x100>)
 8002386:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800238a:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 800238c:	2003      	movs	r0, #3
 800238e:	f001 fada 	bl	8003946 <HAL_NVIC_ClearPendingIRQ>
 8002392:	e007      	b.n	80023a4 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8002394:	4b11      	ldr	r3, [pc, #68]	@ (80023dc <HW_TS_Stop+0x104>)
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	b2db      	uxtb	r3, r3
 800239a:	7cfa      	ldrb	r2, [r7, #19]
 800239c:	429a      	cmp	r2, r3
 800239e:	d001      	beq.n	80023a4 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 80023a0:	f7ff fce4 	bl	8001d6c <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80023a4:	4b08      	ldr	r3, [pc, #32]	@ (80023c8 <HW_TS_Stop+0xf0>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	22ff      	movs	r2, #255	@ 0xff
 80023aa:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80023ac:	2003      	movs	r0, #3
 80023ae:	f001 fa94 	bl	80038da <HAL_NVIC_EnableIRQ>
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	f383 8810 	msr	PRIMASK, r3
}
 80023bc:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80023be:	bf00      	nop
}
 80023c0:	3718      	adds	r7, #24
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	200001cc 	.word	0x200001cc
 80023cc:	200000d8 	.word	0x200000d8
 80023d0:	20000168 	.word	0x20000168
 80023d4:	40002800 	.word	0x40002800
 80023d8:	58000800 	.word	0x58000800
 80023dc:	20000169 	.word	0x20000169

080023e0 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b086      	sub	sp, #24
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	4603      	mov	r3, r0
 80023e8:	6039      	str	r1, [r7, #0]
 80023ea:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80023ec:	79fa      	ldrb	r2, [r7, #7]
 80023ee:	493b      	ldr	r1, [pc, #236]	@ (80024dc <HW_TS_Start+0xfc>)
 80023f0:	4613      	mov	r3, r2
 80023f2:	005b      	lsls	r3, r3, #1
 80023f4:	4413      	add	r3, r2
 80023f6:	00db      	lsls	r3, r3, #3
 80023f8:	440b      	add	r3, r1
 80023fa:	330c      	adds	r3, #12
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	2b02      	cmp	r3, #2
 8002402:	d103      	bne.n	800240c <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8002404:	79fb      	ldrb	r3, [r7, #7]
 8002406:	4618      	mov	r0, r3
 8002408:	f7ff ff66 	bl	80022d8 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800240c:	f3ef 8310 	mrs	r3, PRIMASK
 8002410:	60fb      	str	r3, [r7, #12]
  return(result);
 8002412:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002414:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002416:	b672      	cpsid	i
}
 8002418:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 800241a:	2003      	movs	r0, #3
 800241c:	f001 fa6b 	bl	80038f6 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002420:	4b2f      	ldr	r3, [pc, #188]	@ (80024e0 <HW_TS_Start+0x100>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	22ca      	movs	r2, #202	@ 0xca
 8002426:	625a      	str	r2, [r3, #36]	@ 0x24
 8002428:	4b2d      	ldr	r3, [pc, #180]	@ (80024e0 <HW_TS_Start+0x100>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	2253      	movs	r2, #83	@ 0x53
 800242e:	625a      	str	r2, [r3, #36]	@ 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8002430:	79fa      	ldrb	r2, [r7, #7]
 8002432:	492a      	ldr	r1, [pc, #168]	@ (80024dc <HW_TS_Start+0xfc>)
 8002434:	4613      	mov	r3, r2
 8002436:	005b      	lsls	r3, r3, #1
 8002438:	4413      	add	r3, r2
 800243a:	00db      	lsls	r3, r3, #3
 800243c:	440b      	add	r3, r1
 800243e:	330c      	adds	r3, #12
 8002440:	2202      	movs	r2, #2
 8002442:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8002444:	79fa      	ldrb	r2, [r7, #7]
 8002446:	4925      	ldr	r1, [pc, #148]	@ (80024dc <HW_TS_Start+0xfc>)
 8002448:	4613      	mov	r3, r2
 800244a:	005b      	lsls	r3, r3, #1
 800244c:	4413      	add	r3, r2
 800244e:	00db      	lsls	r3, r3, #3
 8002450:	440b      	add	r3, r1
 8002452:	3308      	adds	r3, #8
 8002454:	683a      	ldr	r2, [r7, #0]
 8002456:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8002458:	79fa      	ldrb	r2, [r7, #7]
 800245a:	4920      	ldr	r1, [pc, #128]	@ (80024dc <HW_TS_Start+0xfc>)
 800245c:	4613      	mov	r3, r2
 800245e:	005b      	lsls	r3, r3, #1
 8002460:	4413      	add	r3, r2
 8002462:	00db      	lsls	r3, r3, #3
 8002464:	440b      	add	r3, r1
 8002466:	3304      	adds	r3, #4
 8002468:	683a      	ldr	r2, [r7, #0]
 800246a:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 800246c:	79fb      	ldrb	r3, [r7, #7]
 800246e:	4618      	mov	r0, r3
 8002470:	f7ff fab6 	bl	80019e0 <linkTimer>
 8002474:	4603      	mov	r3, r0
 8002476:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8002478:	4b1a      	ldr	r3, [pc, #104]	@ (80024e4 <HW_TS_Start+0x104>)
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 800247e:	4b1a      	ldr	r3, [pc, #104]	@ (80024e8 <HW_TS_Start+0x108>)
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	b2db      	uxtb	r3, r3
 8002484:	7c7a      	ldrb	r2, [r7, #17]
 8002486:	429a      	cmp	r2, r3
 8002488:	d002      	beq.n	8002490 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 800248a:	f7ff fc6f 	bl	8001d6c <RescheduleTimerList>
 800248e:	e013      	b.n	80024b8 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8002490:	79fa      	ldrb	r2, [r7, #7]
 8002492:	4912      	ldr	r1, [pc, #72]	@ (80024dc <HW_TS_Start+0xfc>)
 8002494:	4613      	mov	r3, r2
 8002496:	005b      	lsls	r3, r3, #1
 8002498:	4413      	add	r3, r2
 800249a:	00db      	lsls	r3, r3, #3
 800249c:	440b      	add	r3, r1
 800249e:	3308      	adds	r3, #8
 80024a0:	6819      	ldr	r1, [r3, #0]
 80024a2:	8a7b      	ldrh	r3, [r7, #18]
 80024a4:	79fa      	ldrb	r2, [r7, #7]
 80024a6:	1ac9      	subs	r1, r1, r3
 80024a8:	480c      	ldr	r0, [pc, #48]	@ (80024dc <HW_TS_Start+0xfc>)
 80024aa:	4613      	mov	r3, r2
 80024ac:	005b      	lsls	r3, r3, #1
 80024ae:	4413      	add	r3, r2
 80024b0:	00db      	lsls	r3, r3, #3
 80024b2:	4403      	add	r3, r0
 80024b4:	3308      	adds	r3, #8
 80024b6:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80024b8:	4b09      	ldr	r3, [pc, #36]	@ (80024e0 <HW_TS_Start+0x100>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	22ff      	movs	r2, #255	@ 0xff
 80024be:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80024c0:	2003      	movs	r0, #3
 80024c2:	f001 fa0a 	bl	80038da <HAL_NVIC_EnableIRQ>
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	f383 8810 	msr	PRIMASK, r3
}
 80024d0:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80024d2:	bf00      	nop
}
 80024d4:	3718      	adds	r7, #24
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	200000d8 	.word	0x200000d8
 80024e0:	200001cc 	.word	0x200001cc
 80024e4:	20000168 	.word	0x20000168
 80024e8:	20000169 	.word	0x20000169

080024ec <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	60f8      	str	r0, [r7, #12]
 80024f4:	460b      	mov	r3, r1
 80024f6:	607a      	str	r2, [r7, #4]
 80024f8:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4798      	blx	r3

  return;
 80024fe:	bf00      	nop
}
 8002500:	3710      	adds	r7, #16
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
	...

08002508 <HW_UART_Transmit_DMA>:

    return hw_status;
}

hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b086      	sub	sp, #24
 800250c:	af00      	add	r7, sp, #0
 800250e:	60b9      	str	r1, [r7, #8]
 8002510:	607b      	str	r3, [r7, #4]
 8002512:	4603      	mov	r3, r0
 8002514:	73fb      	strb	r3, [r7, #15]
 8002516:	4613      	mov	r3, r2
 8002518:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef hal_status = HAL_OK;
 800251a:	2300      	movs	r3, #0
 800251c:	75fb      	strb	r3, [r7, #23]
    hw_status_t hw_status = hw_uart_ok;
 800251e:	2300      	movs	r3, #0
 8002520:	75bb      	strb	r3, [r7, #22]

    switch (hw_uart_id)
 8002522:	7bfb      	ldrb	r3, [r7, #15]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d10e      	bne.n	8002546 <HW_UART_Transmit_DMA+0x3e>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case hw_uart1:
            HW_huart1TxCb = cb;
 8002528:	4a17      	ldr	r2, [pc, #92]	@ (8002588 <HW_UART_Transmit_DMA+0x80>)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6013      	str	r3, [r2, #0]
            huart1.Instance = USART1;
 800252e:	4b17      	ldr	r3, [pc, #92]	@ (800258c <HW_UART_Transmit_DMA+0x84>)
 8002530:	4a17      	ldr	r2, [pc, #92]	@ (8002590 <HW_UART_Transmit_DMA+0x88>)
 8002532:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8002534:	89bb      	ldrh	r3, [r7, #12]
 8002536:	461a      	mov	r2, r3
 8002538:	68b9      	ldr	r1, [r7, #8]
 800253a:	4814      	ldr	r0, [pc, #80]	@ (800258c <HW_UART_Transmit_DMA+0x84>)
 800253c:	f005 fe3c 	bl	80081b8 <HAL_UART_Transmit_DMA>
 8002540:	4603      	mov	r3, r0
 8002542:	75fb      	strb	r3, [r7, #23]
            break;
 8002544:	e000      	b.n	8002548 <HW_UART_Transmit_DMA+0x40>
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
            break;
#endif

        default:
            break;
 8002546:	bf00      	nop
    }

    switch (hal_status)
 8002548:	7dfb      	ldrb	r3, [r7, #23]
 800254a:	2b03      	cmp	r3, #3
 800254c:	d816      	bhi.n	800257c <HW_UART_Transmit_DMA+0x74>
 800254e:	a201      	add	r2, pc, #4	@ (adr r2, 8002554 <HW_UART_Transmit_DMA+0x4c>)
 8002550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002554:	08002565 	.word	0x08002565
 8002558:	0800256b 	.word	0x0800256b
 800255c:	08002571 	.word	0x08002571
 8002560:	08002577 	.word	0x08002577
    {
        case HAL_OK:
            hw_status = hw_uart_ok;
 8002564:	2300      	movs	r3, #0
 8002566:	75bb      	strb	r3, [r7, #22]
            break;
 8002568:	e009      	b.n	800257e <HW_UART_Transmit_DMA+0x76>

        case HAL_ERROR:
            hw_status = hw_uart_error;
 800256a:	2301      	movs	r3, #1
 800256c:	75bb      	strb	r3, [r7, #22]
            break;
 800256e:	e006      	b.n	800257e <HW_UART_Transmit_DMA+0x76>

        case HAL_BUSY:
            hw_status = hw_uart_busy;
 8002570:	2302      	movs	r3, #2
 8002572:	75bb      	strb	r3, [r7, #22]
            break;
 8002574:	e003      	b.n	800257e <HW_UART_Transmit_DMA+0x76>

        case HAL_TIMEOUT:
            hw_status = hw_uart_to;
 8002576:	2303      	movs	r3, #3
 8002578:	75bb      	strb	r3, [r7, #22]
            break;
 800257a:	e000      	b.n	800257e <HW_UART_Transmit_DMA+0x76>

        default:
            break;
 800257c:	bf00      	nop
    }

    return hw_status;
 800257e:	7dbb      	ldrb	r3, [r7, #22]
}
 8002580:	4618      	mov	r0, r3
 8002582:	3718      	adds	r7, #24
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}
 8002588:	20000178 	.word	0x20000178
 800258c:	200001f0 	.word	0x200001f0
 8002590:	40013800 	.word	0x40013800

08002594 <HAL_UART_TxCpltCallback>:

    return;
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b082      	sub	sp, #8
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	461a      	mov	r2, r3
 80025a2:	4b09      	ldr	r3, [pc, #36]	@ (80025c8 <HAL_UART_TxCpltCallback+0x34>)
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d107      	bne.n	80025b8 <HAL_UART_TxCpltCallback+0x24>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1TxCb)
 80025a8:	4b08      	ldr	r3, [pc, #32]	@ (80025cc <HAL_UART_TxCpltCallback+0x38>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d005      	beq.n	80025bc <HAL_UART_TxCpltCallback+0x28>
            {
                HW_huart1TxCb();
 80025b0:	4b06      	ldr	r3, [pc, #24]	@ (80025cc <HAL_UART_TxCpltCallback+0x38>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4798      	blx	r3
            }
            break;
 80025b6:	e001      	b.n	80025bc <HAL_UART_TxCpltCallback+0x28>
            }
            break;
#endif

        default:
            break;
 80025b8:	bf00      	nop
 80025ba:	e000      	b.n	80025be <HAL_UART_TxCpltCallback+0x2a>
            break;
 80025bc:	bf00      	nop
    }

    return;
 80025be:	bf00      	nop
}
 80025c0:	3708      	adds	r7, #8
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	40013800 	.word	0x40013800
 80025cc:	20000178 	.word	0x20000178

080025d0 <ism330_Init>:

extern I2C_HandleTypeDef hi2c3;


HAL_StatusTypeDef ism330_Init(void)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b086      	sub	sp, #24
 80025d4:	af04      	add	r7, sp, #16
    HAL_StatusTypeDef ret;

    // CTRL3_C: Enable Block Data Update (BDU) and auto-increment
    uint8_t ctrl3_c = 0x44;  // BDU = 1 (bit6), IF_INC = 1 (bit2)
 80025d6:	2344      	movs	r3, #68	@ 0x44
 80025d8:	71bb      	strb	r3, [r7, #6]
    ret = HAL_I2C_Mem_Write(&hi2c3, ISM330_I2C_ADD, ISM330_CTRL3_C,
 80025da:	2364      	movs	r3, #100	@ 0x64
 80025dc:	9302      	str	r3, [sp, #8]
 80025de:	2301      	movs	r3, #1
 80025e0:	9301      	str	r3, [sp, #4]
 80025e2:	1dbb      	adds	r3, r7, #6
 80025e4:	9300      	str	r3, [sp, #0]
 80025e6:	2301      	movs	r3, #1
 80025e8:	2212      	movs	r2, #18
 80025ea:	21d7      	movs	r1, #215	@ 0xd7
 80025ec:	481c      	ldr	r0, [pc, #112]	@ (8002660 <ism330_Init+0x90>)
 80025ee:	f001 ff55 	bl	800449c <HAL_I2C_Mem_Write>
 80025f2:	4603      	mov	r3, r0
 80025f4:	71fb      	strb	r3, [r7, #7]
                            I2C_MEMADD_SIZE_8BIT, &ctrl3_c, 1, 100);
    if (ret != HAL_OK) return ret;
 80025f6:	79fb      	ldrb	r3, [r7, #7]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d001      	beq.n	8002600 <ism330_Init+0x30>
 80025fc:	79fb      	ldrb	r3, [r7, #7]
 80025fe:	e02a      	b.n	8002656 <ism330_Init+0x86>

    // CTRL1_XL: Accelerometer ODR = 104 Hz, FS = ±2g
    uint8_t ctrl1_xl = 0x40; // ODR_XL = 104 Hz (0100), FS = ±2g (00)
 8002600:	2340      	movs	r3, #64	@ 0x40
 8002602:	717b      	strb	r3, [r7, #5]
    ret = HAL_I2C_Mem_Write(&hi2c3, ISM330_I2C_ADD, ISM330_CTRL1_XL,
 8002604:	2364      	movs	r3, #100	@ 0x64
 8002606:	9302      	str	r3, [sp, #8]
 8002608:	2301      	movs	r3, #1
 800260a:	9301      	str	r3, [sp, #4]
 800260c:	1d7b      	adds	r3, r7, #5
 800260e:	9300      	str	r3, [sp, #0]
 8002610:	2301      	movs	r3, #1
 8002612:	2210      	movs	r2, #16
 8002614:	21d7      	movs	r1, #215	@ 0xd7
 8002616:	4812      	ldr	r0, [pc, #72]	@ (8002660 <ism330_Init+0x90>)
 8002618:	f001 ff40 	bl	800449c <HAL_I2C_Mem_Write>
 800261c:	4603      	mov	r3, r0
 800261e:	71fb      	strb	r3, [r7, #7]
                            I2C_MEMADD_SIZE_8BIT, &ctrl1_xl, 1, 100);
    if (ret != HAL_OK) return ret;
 8002620:	79fb      	ldrb	r3, [r7, #7]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d001      	beq.n	800262a <ism330_Init+0x5a>
 8002626:	79fb      	ldrb	r3, [r7, #7]
 8002628:	e015      	b.n	8002656 <ism330_Init+0x86>

    // CTRL2_G: Gyroscope ODR = 104 Hz, FS = ±250 dps
    uint8_t ctrl2_g = 0x40;  // ODR_G = 104 Hz (0100), FS = ±250 dps (00)
 800262a:	2340      	movs	r3, #64	@ 0x40
 800262c:	713b      	strb	r3, [r7, #4]
    ret = HAL_I2C_Mem_Write(&hi2c3, ISM330_I2C_ADD, ISM330_CTRL2_G,
 800262e:	2364      	movs	r3, #100	@ 0x64
 8002630:	9302      	str	r3, [sp, #8]
 8002632:	2301      	movs	r3, #1
 8002634:	9301      	str	r3, [sp, #4]
 8002636:	1d3b      	adds	r3, r7, #4
 8002638:	9300      	str	r3, [sp, #0]
 800263a:	2301      	movs	r3, #1
 800263c:	2211      	movs	r2, #17
 800263e:	21d7      	movs	r1, #215	@ 0xd7
 8002640:	4807      	ldr	r0, [pc, #28]	@ (8002660 <ism330_Init+0x90>)
 8002642:	f001 ff2b 	bl	800449c <HAL_I2C_Mem_Write>
 8002646:	4603      	mov	r3, r0
 8002648:	71fb      	strb	r3, [r7, #7]
                            I2C_MEMADD_SIZE_8BIT, &ctrl2_g, 1, 100);
    if (ret != HAL_OK) return ret;
 800264a:	79fb      	ldrb	r3, [r7, #7]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d001      	beq.n	8002654 <ism330_Init+0x84>
 8002650:	79fb      	ldrb	r3, [r7, #7]
 8002652:	e000      	b.n	8002656 <ism330_Init+0x86>

    return HAL_OK;
 8002654:	2300      	movs	r3, #0
}
 8002656:	4618      	mov	r0, r3
 8002658:	3708      	adds	r7, #8
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	20000348 	.word	0x20000348

08002664 <ism330_ReadIMU>:
}


// Buffer to hold raw IMU data
int16_t* ism330_ReadIMU(void)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b088      	sub	sp, #32
 8002668:	af04      	add	r7, sp, #16
    static int16_t imu_data[6];  // [accX, accY, accZ, gyroX, gyroY, gyroZ]
    uint8_t raw_data[12];        // 6 bytes each for gyro and accel
    HAL_StatusTypeDef ret;

    // Read 12 bytes starting from OUTX_L_G (gyro) to OUTZ_H_A (accel)
    ret = HAL_I2C_Mem_Read(&hi2c3, ISM330_I2C_ADD, ISM330_OUTX_L_G,
 800266a:	2364      	movs	r3, #100	@ 0x64
 800266c:	9302      	str	r3, [sp, #8]
 800266e:	230c      	movs	r3, #12
 8002670:	9301      	str	r3, [sp, #4]
 8002672:	463b      	mov	r3, r7
 8002674:	9300      	str	r3, [sp, #0]
 8002676:	2301      	movs	r3, #1
 8002678:	2222      	movs	r2, #34	@ 0x22
 800267a:	21d7      	movs	r1, #215	@ 0xd7
 800267c:	4822      	ldr	r0, [pc, #136]	@ (8002708 <ism330_ReadIMU+0xa4>)
 800267e:	f002 f821 	bl	80046c4 <HAL_I2C_Mem_Read>
 8002682:	4603      	mov	r3, r0
 8002684:	73fb      	strb	r3, [r7, #15]
                           I2C_MEMADD_SIZE_8BIT, raw_data, 12, 100);
    if (ret != HAL_OK) {
 8002686:	7bfb      	ldrb	r3, [r7, #15]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d001      	beq.n	8002690 <ism330_ReadIMU+0x2c>
        return NULL;  // Error reading IMU
 800268c:	2300      	movs	r3, #0
 800268e:	e036      	b.n	80026fe <ism330_ReadIMU+0x9a>
    }

    // Parse gyro data (first 6 bytes)
    imu_data[3] = (int16_t)(raw_data[1] << 8 | raw_data[0]);  // gyroX
 8002690:	787b      	ldrb	r3, [r7, #1]
 8002692:	021b      	lsls	r3, r3, #8
 8002694:	b21a      	sxth	r2, r3
 8002696:	783b      	ldrb	r3, [r7, #0]
 8002698:	b21b      	sxth	r3, r3
 800269a:	4313      	orrs	r3, r2
 800269c:	b21a      	sxth	r2, r3
 800269e:	4b1b      	ldr	r3, [pc, #108]	@ (800270c <ism330_ReadIMU+0xa8>)
 80026a0:	80da      	strh	r2, [r3, #6]
    imu_data[4] = (int16_t)(raw_data[3] << 8 | raw_data[2]);  // gyroY
 80026a2:	78fb      	ldrb	r3, [r7, #3]
 80026a4:	021b      	lsls	r3, r3, #8
 80026a6:	b21a      	sxth	r2, r3
 80026a8:	78bb      	ldrb	r3, [r7, #2]
 80026aa:	b21b      	sxth	r3, r3
 80026ac:	4313      	orrs	r3, r2
 80026ae:	b21a      	sxth	r2, r3
 80026b0:	4b16      	ldr	r3, [pc, #88]	@ (800270c <ism330_ReadIMU+0xa8>)
 80026b2:	811a      	strh	r2, [r3, #8]
    imu_data[5] = (int16_t)(raw_data[5] << 8 | raw_data[4]);  // gyroZ
 80026b4:	797b      	ldrb	r3, [r7, #5]
 80026b6:	021b      	lsls	r3, r3, #8
 80026b8:	b21a      	sxth	r2, r3
 80026ba:	793b      	ldrb	r3, [r7, #4]
 80026bc:	b21b      	sxth	r3, r3
 80026be:	4313      	orrs	r3, r2
 80026c0:	b21a      	sxth	r2, r3
 80026c2:	4b12      	ldr	r3, [pc, #72]	@ (800270c <ism330_ReadIMU+0xa8>)
 80026c4:	815a      	strh	r2, [r3, #10]

    // Parse accel data (next 6 bytes)
    imu_data[0] = (int16_t)(raw_data[7] << 8 | raw_data[6]);  // accX
 80026c6:	79fb      	ldrb	r3, [r7, #7]
 80026c8:	021b      	lsls	r3, r3, #8
 80026ca:	b21a      	sxth	r2, r3
 80026cc:	79bb      	ldrb	r3, [r7, #6]
 80026ce:	b21b      	sxth	r3, r3
 80026d0:	4313      	orrs	r3, r2
 80026d2:	b21a      	sxth	r2, r3
 80026d4:	4b0d      	ldr	r3, [pc, #52]	@ (800270c <ism330_ReadIMU+0xa8>)
 80026d6:	801a      	strh	r2, [r3, #0]
    imu_data[1] = (int16_t)(raw_data[9] << 8 | raw_data[8]);  // accY
 80026d8:	7a7b      	ldrb	r3, [r7, #9]
 80026da:	021b      	lsls	r3, r3, #8
 80026dc:	b21a      	sxth	r2, r3
 80026de:	7a3b      	ldrb	r3, [r7, #8]
 80026e0:	b21b      	sxth	r3, r3
 80026e2:	4313      	orrs	r3, r2
 80026e4:	b21a      	sxth	r2, r3
 80026e6:	4b09      	ldr	r3, [pc, #36]	@ (800270c <ism330_ReadIMU+0xa8>)
 80026e8:	805a      	strh	r2, [r3, #2]
    imu_data[2] = (int16_t)(raw_data[11] << 8 | raw_data[10]); // accZ
 80026ea:	7afb      	ldrb	r3, [r7, #11]
 80026ec:	021b      	lsls	r3, r3, #8
 80026ee:	b21a      	sxth	r2, r3
 80026f0:	7abb      	ldrb	r3, [r7, #10]
 80026f2:	b21b      	sxth	r3, r3
 80026f4:	4313      	orrs	r3, r2
 80026f6:	b21a      	sxth	r2, r3
 80026f8:	4b04      	ldr	r3, [pc, #16]	@ (800270c <ism330_ReadIMU+0xa8>)
 80026fa:	809a      	strh	r2, [r3, #4]

    return imu_data;
 80026fc:	4b03      	ldr	r3, [pc, #12]	@ (800270c <ism330_ReadIMU+0xa8>)
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3710      	adds	r7, #16
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	20000348 	.word	0x20000348
 800270c:	2000017c 	.word	0x2000017c

08002710 <lis3mdl_Init>:


extern I2C_HandleTypeDef hi2c3;

HAL_StatusTypeDef lis3mdl_Init(void)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b086      	sub	sp, #24
 8002714:	af04      	add	r7, sp, #16
    HAL_StatusTypeDef ret;

    // CTRL_REG1: Temp enable = 0, Ultra-high-performance XY, ODR = 80 Hz
    uint8_t ctrl_reg1 = 0x70;  // 0b01110000
 8002716:	2370      	movs	r3, #112	@ 0x70
 8002718:	71bb      	strb	r3, [r7, #6]
    ret = HAL_I2C_Mem_Write(&hi2c3, LIS3MDL_I2C_ADD, LIS3MDL_CTRL_REG1,
 800271a:	2364      	movs	r3, #100	@ 0x64
 800271c:	9302      	str	r3, [sp, #8]
 800271e:	2301      	movs	r3, #1
 8002720:	9301      	str	r3, [sp, #4]
 8002722:	1dbb      	adds	r3, r7, #6
 8002724:	9300      	str	r3, [sp, #0]
 8002726:	2301      	movs	r3, #1
 8002728:	2220      	movs	r2, #32
 800272a:	213c      	movs	r1, #60	@ 0x3c
 800272c:	481c      	ldr	r0, [pc, #112]	@ (80027a0 <lis3mdl_Init+0x90>)
 800272e:	f001 feb5 	bl	800449c <HAL_I2C_Mem_Write>
 8002732:	4603      	mov	r3, r0
 8002734:	71fb      	strb	r3, [r7, #7]
                            I2C_MEMADD_SIZE_8BIT, &ctrl_reg1, 1, 100);
    if (ret != HAL_OK) return ret;
 8002736:	79fb      	ldrb	r3, [r7, #7]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d001      	beq.n	8002740 <lis3mdl_Init+0x30>
 800273c:	79fb      	ldrb	r3, [r7, #7]
 800273e:	e02a      	b.n	8002796 <lis3mdl_Init+0x86>

    // CTRL_REG2: FS = ±4 gauss (00)
    uint8_t ctrl_reg2 = 0x00;
 8002740:	2300      	movs	r3, #0
 8002742:	717b      	strb	r3, [r7, #5]
    ret = HAL_I2C_Mem_Write(&hi2c3, LIS3MDL_I2C_ADD, LIS3MDL_CTRL_REG2,
 8002744:	2364      	movs	r3, #100	@ 0x64
 8002746:	9302      	str	r3, [sp, #8]
 8002748:	2301      	movs	r3, #1
 800274a:	9301      	str	r3, [sp, #4]
 800274c:	1d7b      	adds	r3, r7, #5
 800274e:	9300      	str	r3, [sp, #0]
 8002750:	2301      	movs	r3, #1
 8002752:	2221      	movs	r2, #33	@ 0x21
 8002754:	213c      	movs	r1, #60	@ 0x3c
 8002756:	4812      	ldr	r0, [pc, #72]	@ (80027a0 <lis3mdl_Init+0x90>)
 8002758:	f001 fea0 	bl	800449c <HAL_I2C_Mem_Write>
 800275c:	4603      	mov	r3, r0
 800275e:	71fb      	strb	r3, [r7, #7]
                            I2C_MEMADD_SIZE_8BIT, &ctrl_reg2, 1, 100);
    if (ret != HAL_OK) return ret;
 8002760:	79fb      	ldrb	r3, [r7, #7]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d001      	beq.n	800276a <lis3mdl_Init+0x5a>
 8002766:	79fb      	ldrb	r3, [r7, #7]
 8002768:	e015      	b.n	8002796 <lis3mdl_Init+0x86>

    // CTRL_REG3: Continuous-conversion mode
    uint8_t ctrl_reg3 = 0x00;
 800276a:	2300      	movs	r3, #0
 800276c:	713b      	strb	r3, [r7, #4]
    ret = HAL_I2C_Mem_Write(&hi2c3, LIS3MDL_I2C_ADD, LIS3MDL_CTRL_REG3,
 800276e:	2364      	movs	r3, #100	@ 0x64
 8002770:	9302      	str	r3, [sp, #8]
 8002772:	2301      	movs	r3, #1
 8002774:	9301      	str	r3, [sp, #4]
 8002776:	1d3b      	adds	r3, r7, #4
 8002778:	9300      	str	r3, [sp, #0]
 800277a:	2301      	movs	r3, #1
 800277c:	2222      	movs	r2, #34	@ 0x22
 800277e:	213c      	movs	r1, #60	@ 0x3c
 8002780:	4807      	ldr	r0, [pc, #28]	@ (80027a0 <lis3mdl_Init+0x90>)
 8002782:	f001 fe8b 	bl	800449c <HAL_I2C_Mem_Write>
 8002786:	4603      	mov	r3, r0
 8002788:	71fb      	strb	r3, [r7, #7]
                            I2C_MEMADD_SIZE_8BIT, &ctrl_reg3, 1, 100);
    if (ret != HAL_OK) return ret;
 800278a:	79fb      	ldrb	r3, [r7, #7]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d001      	beq.n	8002794 <lis3mdl_Init+0x84>
 8002790:	79fb      	ldrb	r3, [r7, #7]
 8002792:	e000      	b.n	8002796 <lis3mdl_Init+0x86>

    return HAL_OK;
 8002794:	2300      	movs	r3, #0
}
 8002796:	4618      	mov	r0, r3
 8002798:	3708      	adds	r7, #8
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	20000348 	.word	0x20000348

080027a4 <lis3mdl_ReadMag>:

    return (int32_t)id;  // Should return 0x3D
}

int16_t* lis3mdl_ReadMag(void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b086      	sub	sp, #24
 80027a8:	af04      	add	r7, sp, #16
    static int16_t mag_data[3];  // [magX, magY, magZ]
    uint8_t raw_data[6];
    HAL_StatusTypeDef ret;

    // Read 6 bytes starting from OUTX_L
    ret = HAL_I2C_Mem_Read(&hi2c3, LIS3MDL_I2C_ADD, LIS3MDL_OUTX_L,
 80027aa:	2364      	movs	r3, #100	@ 0x64
 80027ac:	9302      	str	r3, [sp, #8]
 80027ae:	2306      	movs	r3, #6
 80027b0:	9301      	str	r3, [sp, #4]
 80027b2:	463b      	mov	r3, r7
 80027b4:	9300      	str	r3, [sp, #0]
 80027b6:	2301      	movs	r3, #1
 80027b8:	2228      	movs	r2, #40	@ 0x28
 80027ba:	213c      	movs	r1, #60	@ 0x3c
 80027bc:	4814      	ldr	r0, [pc, #80]	@ (8002810 <lis3mdl_ReadMag+0x6c>)
 80027be:	f001 ff81 	bl	80046c4 <HAL_I2C_Mem_Read>
 80027c2:	4603      	mov	r3, r0
 80027c4:	71fb      	strb	r3, [r7, #7]
                           I2C_MEMADD_SIZE_8BIT, raw_data, 6, 100);
    if (ret != HAL_OK) {
 80027c6:	79fb      	ldrb	r3, [r7, #7]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d001      	beq.n	80027d0 <lis3mdl_ReadMag+0x2c>
        return NULL;
 80027cc:	2300      	movs	r3, #0
 80027ce:	e01b      	b.n	8002808 <lis3mdl_ReadMag+0x64>
    }

    mag_data[0] = (int16_t)(raw_data[1] << 8 | raw_data[0]);  // X
 80027d0:	787b      	ldrb	r3, [r7, #1]
 80027d2:	021b      	lsls	r3, r3, #8
 80027d4:	b21a      	sxth	r2, r3
 80027d6:	783b      	ldrb	r3, [r7, #0]
 80027d8:	b21b      	sxth	r3, r3
 80027da:	4313      	orrs	r3, r2
 80027dc:	b21a      	sxth	r2, r3
 80027de:	4b0d      	ldr	r3, [pc, #52]	@ (8002814 <lis3mdl_ReadMag+0x70>)
 80027e0:	801a      	strh	r2, [r3, #0]
    mag_data[1] = (int16_t)(raw_data[3] << 8 | raw_data[2]);  // Y
 80027e2:	78fb      	ldrb	r3, [r7, #3]
 80027e4:	021b      	lsls	r3, r3, #8
 80027e6:	b21a      	sxth	r2, r3
 80027e8:	78bb      	ldrb	r3, [r7, #2]
 80027ea:	b21b      	sxth	r3, r3
 80027ec:	4313      	orrs	r3, r2
 80027ee:	b21a      	sxth	r2, r3
 80027f0:	4b08      	ldr	r3, [pc, #32]	@ (8002814 <lis3mdl_ReadMag+0x70>)
 80027f2:	805a      	strh	r2, [r3, #2]
    mag_data[2] = (int16_t)(raw_data[5] << 8 | raw_data[4]);  // Z
 80027f4:	797b      	ldrb	r3, [r7, #5]
 80027f6:	021b      	lsls	r3, r3, #8
 80027f8:	b21a      	sxth	r2, r3
 80027fa:	793b      	ldrb	r3, [r7, #4]
 80027fc:	b21b      	sxth	r3, r3
 80027fe:	4313      	orrs	r3, r2
 8002800:	b21a      	sxth	r2, r3
 8002802:	4b04      	ldr	r3, [pc, #16]	@ (8002814 <lis3mdl_ReadMag+0x70>)
 8002804:	809a      	strh	r2, [r3, #4]

    return mag_data;
 8002806:	4b03      	ldr	r3, [pc, #12]	@ (8002814 <lis3mdl_ReadMag+0x70>)
}
 8002808:	4618      	mov	r0, r3
 800280a:	3708      	adds	r7, #8
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}
 8002810:	20000348 	.word	0x20000348
 8002814:	20000188 	.word	0x20000188

08002818 <LL_RCC_LSE_SetDriveCapability>:
{
 8002818:	b480      	push	{r7}
 800281a:	b083      	sub	sp, #12
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8002820:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002824:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002828:	f023 0218 	bic.w	r2, r3, #24
 800282c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	4313      	orrs	r3, r2
 8002834:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8002838:	bf00      	nop
 800283a:	370c      	adds	r7, #12
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr

08002844 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8002844:	b480      	push	{r7}
 8002846:	b085      	sub	sp, #20
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 800284c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002850:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002852:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4313      	orrs	r3, r2
 800285a:	648b      	str	r3, [r1, #72]	@ 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800285c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002860:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4013      	ands	r3, r2
 8002866:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002868:	68fb      	ldr	r3, [r7, #12]
}
 800286a:	bf00      	nop
 800286c:	3714      	adds	r7, #20
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr

08002876 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8002876:	b480      	push	{r7}
 8002878:	b085      	sub	sp, #20
 800287a:	af00      	add	r7, sp, #0
 800287c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800287e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002882:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002884:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	4313      	orrs	r3, r2
 800288c:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800288e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002892:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	4013      	ands	r3, r2
 8002898:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800289a:	68fb      	ldr	r3, [r7, #12]
}
 800289c:	bf00      	nop
 800289e:	3714      	adds	r7, #20
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr

080028a8 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b085      	sub	sp, #20
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80028b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028b4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80028b6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	4313      	orrs	r3, r2
 80028be:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80028c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028c4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	4013      	ands	r3, r2
 80028ca:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80028cc:	68fb      	ldr	r3, [r7, #12]
}
 80028ce:	bf00      	nop
 80028d0:	3714      	adds	r7, #20
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr

080028da <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80028da:	b480      	push	{r7}
 80028dc:	b085      	sub	sp, #20
 80028de:	af00      	add	r7, sp, #0
 80028e0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80028e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028e6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80028e8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	4313      	orrs	r3, r2
 80028f0:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80028f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028f6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	4013      	ands	r3, r2
 80028fc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80028fe:	68fb      	ldr	r3, [r7, #12]
}
 8002900:	bf00      	nop
 8002902:	3714      	adds	r7, #20
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr

0800290c <LL_RTC_EnableWriteProtection>:
{
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	22ff      	movs	r2, #255	@ 0xff
 8002918:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800291a:	bf00      	nop
 800291c:	370c      	adds	r7, #12
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr

08002926 <LL_RTC_DisableWriteProtection>:
{
 8002926:	b480      	push	{r7}
 8002928:	b083      	sub	sp, #12
 800292a:	af00      	add	r7, sp, #0
 800292c:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	22ca      	movs	r2, #202	@ 0xca
 8002932:	625a      	str	r2, [r3, #36]	@ 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2253      	movs	r2, #83	@ 0x53
 8002938:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800293a:	bf00      	nop
 800293c:	370c      	adds	r7, #12
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr

08002946 <LL_RTC_WAKEUP_SetClock>:
{
 8002946:	b480      	push	{r7}
 8002948:	b083      	sub	sp, #12
 800294a:	af00      	add	r7, sp, #0
 800294c:	6078      	str	r0, [r7, #4]
 800294e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	f023 0207 	bic.w	r2, r3, #7
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	431a      	orrs	r2, r3
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	609a      	str	r2, [r3, #8]
}
 8002960:	bf00      	nop
 8002962:	370c      	adds	r7, #12
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr

0800296c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002970:	f000 fdcc 	bl	800350c <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8002974:	f7fe fcfc 	bl	8001370 <MX_APPE_Config>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002978:	f000 f824 	bl	80029c4 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800297c:	f000 f87e 	bl	8002a7c <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 8002980:	f000 f89c 	bl	8002abc <MX_IPCC_Init>

  /* USER CODE BEGIN SysInit */
  PeriphClock_Config();
 8002984:	f000 faae 	bl	8002ee4 <PeriphClock_Config>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002988:	f000 f9bc 	bl	8002d04 <MX_GPIO_Init>
  my_MX_SPI1_Init();
 800298c:	f000 f966 	bl	8002c5c <my_MX_SPI1_Init>
  MX_I2C3_Init();
 8002990:	f000 f932 	bl	8002bf8 <MX_I2C3_Init>
  MX_DMA_Init();
 8002994:	f000 f9a4 	bl	8002ce0 <MX_DMA_Init>
  MX_RTC_Init();
 8002998:	f000 f8ac 	bl	8002af4 <MX_RTC_Init>
  MX_USART1_UART_Init();
 800299c:	f000 f8de 	bl	8002b5c <MX_USART1_UART_Init>
  MX_RF_Init();
 80029a0:	f000 f8a0 	bl	8002ae4 <MX_RF_Init>
  /* USER CODE BEGIN 2 */
  MX_TIM2_Init();
 80029a4:	f000 faa6 	bl	8002ef4 <MX_TIM2_Init>
  MX_TIM17_Init();
 80029a8:	f000 fae2 	bl	8002f70 <MX_TIM17_Init>

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 80029ac:	f7fe fcee 	bl	800138c <MX_APPE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  ADS1299_Init();
 80029b0:	f7fe f89c 	bl	8000aec <ADS1299_Init>
  ism330_Init();
 80029b4:	f7ff fe0c 	bl	80025d0 <ism330_Init>
  lis3mdl_Init();
 80029b8:	f7ff feaa 	bl	8002710 <lis3mdl_Init>

  while(1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 80029bc:	f7fe fec5 	bl	800174a <MX_APPE_Process>
 80029c0:	e7fc      	b.n	80029bc <main+0x50>
	...

080029c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b09a      	sub	sp, #104	@ 0x68
 80029c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80029ca:	f107 0320 	add.w	r3, r7, #32
 80029ce:	2248      	movs	r2, #72	@ 0x48
 80029d0:	2100      	movs	r1, #0
 80029d2:	4618      	mov	r0, r3
 80029d4:	f00c f8f0 	bl	800ebb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80029d8:	1d3b      	adds	r3, r7, #4
 80029da:	2200      	movs	r2, #0
 80029dc:	601a      	str	r2, [r3, #0]
 80029de:	605a      	str	r2, [r3, #4]
 80029e0:	609a      	str	r2, [r3, #8]
 80029e2:	60da      	str	r2, [r3, #12]
 80029e4:	611a      	str	r2, [r3, #16]
 80029e6:	615a      	str	r2, [r3, #20]
 80029e8:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80029ea:	f002 facd 	bl	8004f88 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 80029ee:	2010      	movs	r0, #16
 80029f0:	f7ff ff12 	bl	8002818 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80029f4:	4b20      	ldr	r3, [pc, #128]	@ (8002a78 <SystemClock_Config+0xb4>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80029fc:	4a1e      	ldr	r2, [pc, #120]	@ (8002a78 <SystemClock_Config+0xb4>)
 80029fe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002a02:	6013      	str	r3, [r2, #0]
 8002a04:	4b1c      	ldr	r3, [pc, #112]	@ (8002a78 <SystemClock_Config+0xb4>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002a0c:	603b      	str	r3, [r7, #0]
 8002a0e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8002a10:	2307      	movs	r3, #7
 8002a12:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002a14:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002a18:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002a1e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002a22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002a24:	2340      	movs	r3, #64	@ 0x40
 8002a26:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a2c:	f107 0320 	add.w	r3, r7, #32
 8002a30:	4618      	mov	r0, r3
 8002a32:	f002 fe3d 	bl	80056b0 <HAL_RCC_OscConfig>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d001      	beq.n	8002a40 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8002a3c:	f000 fb2c 	bl	8003098 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8002a40:	236f      	movs	r3, #111	@ 0x6f
 8002a42:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8002a44:	2302      	movs	r3, #2
 8002a46:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002a50:	2300      	movs	r3, #0
 8002a52:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8002a54:	2300      	movs	r3, #0
 8002a56:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002a5c:	1d3b      	adds	r3, r7, #4
 8002a5e:	2101      	movs	r1, #1
 8002a60:	4618      	mov	r0, r3
 8002a62:	f003 f999 	bl	8005d98 <HAL_RCC_ClockConfig>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d001      	beq.n	8002a70 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8002a6c:	f000 fb14 	bl	8003098 <Error_Handler>
  }
}
 8002a70:	bf00      	nop
 8002a72:	3768      	adds	r7, #104	@ 0x68
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	58000400 	.word	0x58000400

08002a7c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b094      	sub	sp, #80	@ 0x50
 8002a80:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002a82:	463b      	mov	r3, r7
 8002a84:	2250      	movs	r2, #80	@ 0x50
 8002a86:	2100      	movs	r1, #0
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f00c f895 	bl	800ebb8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 8002a8e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002a92:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8002a94:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002a98:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 8002a9a:	2302      	movs	r3, #2
 8002a9c:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002aa2:	463b      	mov	r3, r7
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f003 fdb4 	bl	8006612 <HAL_RCCEx_PeriphCLKConfig>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d001      	beq.n	8002ab4 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8002ab0:	f000 faf2 	bl	8003098 <Error_Handler>
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif

  /* USER CODE END Smps */
}
 8002ab4:	bf00      	nop
 8002ab6:	3750      	adds	r7, #80	@ 0x50
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}

08002abc <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8002ac0:	4b06      	ldr	r3, [pc, #24]	@ (8002adc <MX_IPCC_Init+0x20>)
 8002ac2:	4a07      	ldr	r2, [pc, #28]	@ (8002ae0 <MX_IPCC_Init+0x24>)
 8002ac4:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8002ac6:	4805      	ldr	r0, [pc, #20]	@ (8002adc <MX_IPCC_Init+0x20>)
 8002ac8:	f002 f9d8 	bl	8004e7c <HAL_IPCC_Init>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d001      	beq.n	8002ad6 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8002ad2:	f000 fae1 	bl	8003098 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8002ad6:	bf00      	nop
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	20000190 	.word	0x20000190
 8002ae0:	58000c00 	.word	0x58000c00

08002ae4 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8002ae8:	bf00      	nop
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr
	...

08002af4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002af8:	4b16      	ldr	r3, [pc, #88]	@ (8002b54 <MX_RTC_Init+0x60>)
 8002afa:	4a17      	ldr	r2, [pc, #92]	@ (8002b58 <MX_RTC_Init+0x64>)
 8002afc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002afe:	4b15      	ldr	r3, [pc, #84]	@ (8002b54 <MX_RTC_Init+0x60>)
 8002b00:	2200      	movs	r2, #0
 8002b02:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8002b04:	4b13      	ldr	r3, [pc, #76]	@ (8002b54 <MX_RTC_Init+0x60>)
 8002b06:	220f      	movs	r2, #15
 8002b08:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8002b0a:	4b12      	ldr	r3, [pc, #72]	@ (8002b54 <MX_RTC_Init+0x60>)
 8002b0c:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8002b10:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002b12:	4b10      	ldr	r3, [pc, #64]	@ (8002b54 <MX_RTC_Init+0x60>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002b18:	4b0e      	ldr	r3, [pc, #56]	@ (8002b54 <MX_RTC_Init+0x60>)
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002b1e:	4b0d      	ldr	r3, [pc, #52]	@ (8002b54 <MX_RTC_Init+0x60>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002b24:	4b0b      	ldr	r3, [pc, #44]	@ (8002b54 <MX_RTC_Init+0x60>)
 8002b26:	2200      	movs	r2, #0
 8002b28:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002b2a:	480a      	ldr	r0, [pc, #40]	@ (8002b54 <MX_RTC_Init+0x60>)
 8002b2c:	f003 fff8 	bl	8006b20 <HAL_RTC_Init>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d001      	beq.n	8002b3a <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8002b36:	f000 faaf 	bl	8003098 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8002b3a:	4807      	ldr	r0, [pc, #28]	@ (8002b58 <MX_RTC_Init+0x64>)
 8002b3c:	f7ff fef3 	bl	8002926 <LL_RTC_DisableWriteProtection>
  
  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8002b40:	2100      	movs	r1, #0
 8002b42:	4805      	ldr	r0, [pc, #20]	@ (8002b58 <MX_RTC_Init+0x64>)
 8002b44:	f7ff feff 	bl	8002946 <LL_RTC_WAKEUP_SetClock>
  
  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8002b48:	4803      	ldr	r0, [pc, #12]	@ (8002b58 <MX_RTC_Init+0x64>)
 8002b4a:	f7ff fedf 	bl	800290c <LL_RTC_EnableWriteProtection>
  /* USER CODE END RTC_Init 2 */

}
 8002b4e:	bf00      	nop
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	200001cc 	.word	0x200001cc
 8002b58:	40002800 	.word	0x40002800

08002b5c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002b60:	4b23      	ldr	r3, [pc, #140]	@ (8002bf0 <MX_USART1_UART_Init+0x94>)
 8002b62:	4a24      	ldr	r2, [pc, #144]	@ (8002bf4 <MX_USART1_UART_Init+0x98>)
 8002b64:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002b66:	4b22      	ldr	r3, [pc, #136]	@ (8002bf0 <MX_USART1_UART_Init+0x94>)
 8002b68:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002b6c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002b6e:	4b20      	ldr	r3, [pc, #128]	@ (8002bf0 <MX_USART1_UART_Init+0x94>)
 8002b70:	2200      	movs	r2, #0
 8002b72:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002b74:	4b1e      	ldr	r3, [pc, #120]	@ (8002bf0 <MX_USART1_UART_Init+0x94>)
 8002b76:	2200      	movs	r2, #0
 8002b78:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002b7a:	4b1d      	ldr	r3, [pc, #116]	@ (8002bf0 <MX_USART1_UART_Init+0x94>)
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002b80:	4b1b      	ldr	r3, [pc, #108]	@ (8002bf0 <MX_USART1_UART_Init+0x94>)
 8002b82:	220c      	movs	r2, #12
 8002b84:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b86:	4b1a      	ldr	r3, [pc, #104]	@ (8002bf0 <MX_USART1_UART_Init+0x94>)
 8002b88:	2200      	movs	r2, #0
 8002b8a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8002b8c:	4b18      	ldr	r3, [pc, #96]	@ (8002bf0 <MX_USART1_UART_Init+0x94>)
 8002b8e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002b92:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002b94:	4b16      	ldr	r3, [pc, #88]	@ (8002bf0 <MX_USART1_UART_Init+0x94>)
 8002b96:	2200      	movs	r2, #0
 8002b98:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002b9a:	4b15      	ldr	r3, [pc, #84]	@ (8002bf0 <MX_USART1_UART_Init+0x94>)
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ba0:	4b13      	ldr	r3, [pc, #76]	@ (8002bf0 <MX_USART1_UART_Init+0x94>)
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002ba6:	4812      	ldr	r0, [pc, #72]	@ (8002bf0 <MX_USART1_UART_Init+0x94>)
 8002ba8:	f005 fab6 	bl	8008118 <HAL_UART_Init>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d001      	beq.n	8002bb6 <MX_USART1_UART_Init+0x5a>
  {
	Error_Handler();
 8002bb2:	f000 fa71 	bl	8003098 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002bb6:	2100      	movs	r1, #0
 8002bb8:	480d      	ldr	r0, [pc, #52]	@ (8002bf0 <MX_USART1_UART_Init+0x94>)
 8002bba:	f006 fc9a 	bl	80094f2 <HAL_UARTEx_SetTxFifoThreshold>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d001      	beq.n	8002bc8 <MX_USART1_UART_Init+0x6c>
  {
	Error_Handler();
 8002bc4:	f000 fa68 	bl	8003098 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002bc8:	2100      	movs	r1, #0
 8002bca:	4809      	ldr	r0, [pc, #36]	@ (8002bf0 <MX_USART1_UART_Init+0x94>)
 8002bcc:	f006 fccf 	bl	800956e <HAL_UARTEx_SetRxFifoThreshold>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d001      	beq.n	8002bda <MX_USART1_UART_Init+0x7e>
  {
	Error_Handler();
 8002bd6:	f000 fa5f 	bl	8003098 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002bda:	4805      	ldr	r0, [pc, #20]	@ (8002bf0 <MX_USART1_UART_Init+0x94>)
 8002bdc:	f006 fc50 	bl	8009480 <HAL_UARTEx_DisableFifoMode>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d001      	beq.n	8002bea <MX_USART1_UART_Init+0x8e>
  {
	Error_Handler();
 8002be6:	f000 fa57 	bl	8003098 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002bea:	bf00      	nop
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	200001f0 	.word	0x200001f0
 8002bf4:	40013800 	.word	0x40013800

08002bf8 <MX_I2C3_Init>:

// I2C3 initialization function
void MX_I2C3_Init(void)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	af00      	add	r7, sp, #0

	/* SPI1 clock enable */
	__HAL_RCC_I2C3_CLK_ENABLE();
 8002bfc:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8002c00:	f7ff fe52 	bl	80028a8 <LL_APB1_GRP1_EnableClock>


	hi2c3.Instance = I2C3;
 8002c04:	4b12      	ldr	r3, [pc, #72]	@ (8002c50 <MX_I2C3_Init+0x58>)
 8002c06:	4a13      	ldr	r2, [pc, #76]	@ (8002c54 <MX_I2C3_Init+0x5c>)
 8002c08:	601a      	str	r2, [r3, #0]
	//hi2c3.Init.Timing = 0x00707CBB;
	  hi2c3.Init.Timing = 0x0060112F;
 8002c0a:	4b11      	ldr	r3, [pc, #68]	@ (8002c50 <MX_I2C3_Init+0x58>)
 8002c0c:	4a12      	ldr	r2, [pc, #72]	@ (8002c58 <MX_I2C3_Init+0x60>)
 8002c0e:	605a      	str	r2, [r3, #4]
	  hi2c3.Init.OwnAddress1 = 0;
 8002c10:	4b0f      	ldr	r3, [pc, #60]	@ (8002c50 <MX_I2C3_Init+0x58>)
 8002c12:	2200      	movs	r2, #0
 8002c14:	609a      	str	r2, [r3, #8]
	  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002c16:	4b0e      	ldr	r3, [pc, #56]	@ (8002c50 <MX_I2C3_Init+0x58>)
 8002c18:	2201      	movs	r2, #1
 8002c1a:	60da      	str	r2, [r3, #12]
	  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002c1c:	4b0c      	ldr	r3, [pc, #48]	@ (8002c50 <MX_I2C3_Init+0x58>)
 8002c1e:	2200      	movs	r2, #0
 8002c20:	611a      	str	r2, [r3, #16]
	  hi2c3.Init.OwnAddress2 = 0;
 8002c22:	4b0b      	ldr	r3, [pc, #44]	@ (8002c50 <MX_I2C3_Init+0x58>)
 8002c24:	2200      	movs	r2, #0
 8002c26:	615a      	str	r2, [r3, #20]
	  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002c28:	4b09      	ldr	r3, [pc, #36]	@ (8002c50 <MX_I2C3_Init+0x58>)
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	619a      	str	r2, [r3, #24]
	  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002c2e:	4b08      	ldr	r3, [pc, #32]	@ (8002c50 <MX_I2C3_Init+0x58>)
 8002c30:	2200      	movs	r2, #0
 8002c32:	61da      	str	r2, [r3, #28]
	  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002c34:	4b06      	ldr	r3, [pc, #24]	@ (8002c50 <MX_I2C3_Init+0x58>)
 8002c36:	2200      	movs	r2, #0
 8002c38:	621a      	str	r2, [r3, #32]

    if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002c3a:	4805      	ldr	r0, [pc, #20]	@ (8002c50 <MX_I2C3_Init+0x58>)
 8002c3c:	f001 fb88 	bl	8004350 <HAL_I2C_Init>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d001      	beq.n	8002c4a <MX_I2C3_Init+0x52>
    {
        // Initialization error
        Error_Handler();
 8002c46:	f000 fa27 	bl	8003098 <Error_Handler>
    }
}
 8002c4a:	bf00      	nop
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	20000348 	.word	0x20000348
 8002c54:	40005c00 	.word	0x40005c00
 8002c58:	0060112f 	.word	0x0060112f

08002c5c <my_MX_SPI1_Init>:



// SPI1 initialization function
void my_MX_SPI1_Init(void)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	af00      	add	r7, sp, #0

	/* SPI1 clock enable */
	__HAL_RCC_SPI1_CLK_ENABLE();
 8002c60:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8002c64:	f7ff fe39 	bl	80028da <LL_APB2_GRP1_EnableClock>


	  hspi1.Instance = SPI1;
 8002c68:	4b1b      	ldr	r3, [pc, #108]	@ (8002cd8 <my_MX_SPI1_Init+0x7c>)
 8002c6a:	4a1c      	ldr	r2, [pc, #112]	@ (8002cdc <my_MX_SPI1_Init+0x80>)
 8002c6c:	601a      	str	r2, [r3, #0]
	  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002c6e:	4b1a      	ldr	r3, [pc, #104]	@ (8002cd8 <my_MX_SPI1_Init+0x7c>)
 8002c70:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002c74:	605a      	str	r2, [r3, #4]
	  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002c76:	4b18      	ldr	r3, [pc, #96]	@ (8002cd8 <my_MX_SPI1_Init+0x7c>)
 8002c78:	2200      	movs	r2, #0
 8002c7a:	609a      	str	r2, [r3, #8]
	  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002c7c:	4b16      	ldr	r3, [pc, #88]	@ (8002cd8 <my_MX_SPI1_Init+0x7c>)
 8002c7e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002c82:	60da      	str	r2, [r3, #12]
	  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c84:	4b14      	ldr	r3, [pc, #80]	@ (8002cd8 <my_MX_SPI1_Init+0x7c>)
 8002c86:	2200      	movs	r2, #0
 8002c88:	611a      	str	r2, [r3, #16]
	  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002c8a:	4b13      	ldr	r3, [pc, #76]	@ (8002cd8 <my_MX_SPI1_Init+0x7c>)
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	615a      	str	r2, [r3, #20]
	  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002c90:	4b11      	ldr	r3, [pc, #68]	@ (8002cd8 <my_MX_SPI1_Init+0x7c>)
 8002c92:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c96:	619a      	str	r2, [r3, #24]
	  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002c98:	4b0f      	ldr	r3, [pc, #60]	@ (8002cd8 <my_MX_SPI1_Init+0x7c>)
 8002c9a:	2218      	movs	r2, #24
 8002c9c:	61da      	str	r2, [r3, #28]
	  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002c9e:	4b0e      	ldr	r3, [pc, #56]	@ (8002cd8 <my_MX_SPI1_Init+0x7c>)
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	621a      	str	r2, [r3, #32]
	  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002ca4:	4b0c      	ldr	r3, [pc, #48]	@ (8002cd8 <my_MX_SPI1_Init+0x7c>)
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	625a      	str	r2, [r3, #36]	@ 0x24
	  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002caa:	4b0b      	ldr	r3, [pc, #44]	@ (8002cd8 <my_MX_SPI1_Init+0x7c>)
 8002cac:	2200      	movs	r2, #0
 8002cae:	629a      	str	r2, [r3, #40]	@ 0x28
	  hspi1.Init.CRCPolynomial = 7;
 8002cb0:	4b09      	ldr	r3, [pc, #36]	@ (8002cd8 <my_MX_SPI1_Init+0x7c>)
 8002cb2:	2207      	movs	r2, #7
 8002cb4:	62da      	str	r2, [r3, #44]	@ 0x2c
	  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002cb6:	4b08      	ldr	r3, [pc, #32]	@ (8002cd8 <my_MX_SPI1_Init+0x7c>)
 8002cb8:	2200      	movs	r2, #0
 8002cba:	631a      	str	r2, [r3, #48]	@ 0x30
	  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002cbc:	4b06      	ldr	r3, [pc, #24]	@ (8002cd8 <my_MX_SPI1_Init+0x7c>)
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002cc2:	4805      	ldr	r0, [pc, #20]	@ (8002cd8 <my_MX_SPI1_Init+0x7c>)
 8002cc4:	f004 f862 	bl	8006d8c <HAL_SPI_Init>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d001      	beq.n	8002cd2 <my_MX_SPI1_Init+0x76>
    {
        // Initialization error
        Error_Handler();
 8002cce:	f000 f9e3 	bl	8003098 <Error_Handler>
    }
}
 8002cd2:	bf00      	nop
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	200002e4 	.word	0x200002e4
 8002cdc:	40013000 	.word	0x40013000

08002ce0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002ce4:	2004      	movs	r0, #4
 8002ce6:	f7ff fdad 	bl	8002844 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002cea:	2002      	movs	r0, #2
 8002cec:	f7ff fdaa 	bl	8002844 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 15, 0);
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	210f      	movs	r1, #15
 8002cf4:	203a      	movs	r0, #58	@ 0x3a
 8002cf6:	f000 fdd6 	bl	80038a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 8002cfa:	203a      	movs	r0, #58	@ 0x3a
 8002cfc:	f000 fded 	bl	80038da <HAL_NVIC_EnableIRQ>

}
 8002d00:	bf00      	nop
 8002d02:	bd80      	pop	{r7, pc}

08002d04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b086      	sub	sp, #24
 8002d08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d0a:	1d3b      	adds	r3, r7, #4
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	601a      	str	r2, [r3, #0]
 8002d10:	605a      	str	r2, [r3, #4]
 8002d12:	609a      	str	r2, [r3, #8]
 8002d14:	60da      	str	r2, [r3, #12]
 8002d16:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d18:	2001      	movs	r0, #1
 8002d1a:	f7ff fdac 	bl	8002876 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d1e:	2004      	movs	r0, #4
 8002d20:	f7ff fda9 	bl	8002876 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d24:	2002      	movs	r0, #2
 8002d26:	f7ff fda6 	bl	8002876 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d2a:	2008      	movs	r0, #8
 8002d2c:	f7ff fda3 	bl	8002876 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002d30:	2010      	movs	r0, #16
 8002d32:	f7ff fda0 	bl	8002876 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002d36:	2080      	movs	r0, #128	@ 0x80
 8002d38:	f7ff fd9d 	bl	8002876 <LL_AHB2_GRP1_EnableClock>


	/* Configure PC12 and PC13 as external interrupt inputs */
	/* Configure GPIO pins : PC12 and PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13;
 8002d3c:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002d40:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;  // Interrupt on falling edge
 8002d42:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002d46:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;           // No pull-up or pull-down resistors
 8002d48:	2300      	movs	r3, #0
 8002d4a:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d4c:	1d3b      	adds	r3, r7, #4
 8002d4e:	4619      	mov	r1, r3
 8002d50:	4862      	ldr	r0, [pc, #392]	@ (8002edc <MX_GPIO_Init+0x1d8>)
 8002d52:	f001 f939 	bl	8003fc8 <HAL_GPIO_Init>

	/* Enable and set EXTI line interrupt priority */
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);   // Priority level 2
 8002d56:	2200      	movs	r2, #0
 8002d58:	2102      	movs	r1, #2
 8002d5a:	2028      	movs	r0, #40	@ 0x28
 8002d5c:	f000 fda3 	bl	80038a6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);          // Enable the interrupt
 8002d60:	2028      	movs	r0, #40	@ 0x28
 8002d62:	f000 fdba 	bl	80038da <HAL_NVIC_EnableIRQ>

	GPIO_InitStruct.Pin = LED_A_Pin;
 8002d66:	2301      	movs	r3, #1
 8002d68:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d72:	2300      	movs	r3, #0
 8002d74:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(LED_A_GPIO_Port, &GPIO_InitStruct);
 8002d76:	1d3b      	adds	r3, r7, #4
 8002d78:	4619      	mov	r1, r3
 8002d7a:	4859      	ldr	r0, [pc, #356]	@ (8002ee0 <MX_GPIO_Init+0x1dc>)
 8002d7c:	f001 f924 	bl	8003fc8 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = LED_B_Pin;
 8002d80:	2302      	movs	r3, #2
 8002d82:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d84:	2301      	movs	r3, #1
 8002d86:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(LED_B_GPIO_Port, &GPIO_InitStruct);
 8002d90:	1d3b      	adds	r3, r7, #4
 8002d92:	4619      	mov	r1, r3
 8002d94:	4852      	ldr	r0, [pc, #328]	@ (8002ee0 <MX_GPIO_Init+0x1dc>)
 8002d96:	f001 f917 	bl	8003fc8 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = ADS1118_CS_Pin;
 8002d9a:	2340      	movs	r3, #64	@ 0x40
 8002d9c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002da2:	2301      	movs	r3, #1
 8002da4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002da6:	2302      	movs	r3, #2
 8002da8:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(ADS1118_CS_GPIO_Port, &GPIO_InitStruct);
 8002daa:	1d3b      	adds	r3, r7, #4
 8002dac:	4619      	mov	r1, r3
 8002dae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002db2:	f001 f909 	bl	8003fc8 <HAL_GPIO_Init>

	// Configure GPIO pin for DRDY (interrupt from ADS1299)
	GPIO_InitStruct.Pin = ADS1299_nDRDY_Pin;
 8002db6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002dba:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;  // Interrupt on falling edge
 8002dbc:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002dc0:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(ADS1299_nDRDY_GPIO_Port, &GPIO_InitStruct);
 8002dc6:	1d3b      	adds	r3, r7, #4
 8002dc8:	4619      	mov	r1, r3
 8002dca:	4844      	ldr	r0, [pc, #272]	@ (8002edc <MX_GPIO_Init+0x1d8>)
 8002dcc:	f001 f8fc 	bl	8003fc8 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = ADS1299_CS_Pin;
 8002dd0:	2310      	movs	r3, #16
 8002dd2:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ddc:	2302      	movs	r3, #2
 8002dde:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(ADS1299_CS_GPIO_Port, &GPIO_InitStruct);
 8002de0:	1d3b      	adds	r3, r7, #4
 8002de2:	4619      	mov	r1, r3
 8002de4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002de8:	f001 f8ee 	bl	8003fc8 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = ADS1299_nRESET_Pin|ADS1299_nPWDN_Pin;
 8002dec:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8002df0:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002df2:	2301      	movs	r3, #1
 8002df4:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002df6:	2300      	movs	r3, #0
 8002df8:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(ADS1299_nRESET_GPIO_Port, &GPIO_InitStruct);
 8002dfe:	1d3b      	adds	r3, r7, #4
 8002e00:	4619      	mov	r1, r3
 8002e02:	4836      	ldr	r0, [pc, #216]	@ (8002edc <MX_GPIO_Init+0x1d8>)
 8002e04:	f001 f8e0 	bl	8003fc8 <HAL_GPIO_Init>

	/*Configure GPIO pins : PCPin PCPin PCPin */
	GPIO_InitStruct.Pin = ADS1299_START_Pin;
 8002e08:	2340      	movs	r3, #64	@ 0x40
 8002e0a:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002e10:	2302      	movs	r3, #2
 8002e12:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e14:	2300      	movs	r3, #0
 8002e16:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(ADS1299_START_GPIO_Port, &GPIO_InitStruct);
 8002e18:	1d3b      	adds	r3, r7, #4
 8002e1a:	4619      	mov	r1, r3
 8002e1c:	482f      	ldr	r0, [pc, #188]	@ (8002edc <MX_GPIO_Init+0x1d8>)
 8002e1e:	f001 f8d3 	bl	8003fc8 <HAL_GPIO_Init>

	/**SPI1 GPIO Configuration */
	GPIO_InitStruct.Pin = SPI1_SCLK_Pin|SPI1_MOSI_Pin;
 8002e22:	2382      	movs	r3, #130	@ 0x82
 8002e24:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e26:	2302      	movs	r3, #2
 8002e28:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e2e:	2302      	movs	r3, #2
 8002e30:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002e32:	2305      	movs	r3, #5
 8002e34:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(SPI1_SCLK_GPIO_Port, &GPIO_InitStruct);
 8002e36:	1d3b      	adds	r3, r7, #4
 8002e38:	4619      	mov	r1, r3
 8002e3a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002e3e:	f001 f8c3 	bl	8003fc8 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = SPI1_MISO_Pin;
 8002e42:	2310      	movs	r3, #16
 8002e44:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e46:	2302      	movs	r3, #2
 8002e48:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e4e:	2302      	movs	r3, #2
 8002e50:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002e52:	2305      	movs	r3, #5
 8002e54:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(SPI1_MISO_GPIO_Port, &GPIO_InitStruct);
 8002e56:	1d3b      	adds	r3, r7, #4
 8002e58:	4619      	mov	r1, r3
 8002e5a:	4821      	ldr	r0, [pc, #132]	@ (8002ee0 <MX_GPIO_Init+0x1dc>)
 8002e5c:	f001 f8b4 	bl	8003fc8 <HAL_GPIO_Init>

	/* Configure I2C3 SDA (PB11) and SCL (PB13) */
	GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_13;
 8002e60:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8002e64:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e66:	2312      	movs	r3, #18
 8002e68:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002e72:	2304      	movs	r3, #4
 8002e74:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e76:	1d3b      	adds	r3, r7, #4
 8002e78:	4619      	mov	r1, r3
 8002e7a:	4819      	ldr	r0, [pc, #100]	@ (8002ee0 <MX_GPIO_Init+0x1dc>)
 8002e7c:	f001 f8a4 	bl	8003fc8 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(ADS1299_CS_GPIO_Port, ADS1299_CS_Pin, GPIO_PIN_SET);
 8002e80:	2201      	movs	r2, #1
 8002e82:	2110      	movs	r1, #16
 8002e84:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002e88:	f001 fa0e 	bl	80042a8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ADS1118_CS_GPIO_Port, ADS1118_CS_Pin, GPIO_PIN_SET);
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	2140      	movs	r1, #64	@ 0x40
 8002e90:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002e94:	f001 fa08 	bl	80042a8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ADS1299_nRESET_GPIO_Port, ADS1299_nRESET_Pin|ADS1299_nPWDN_Pin, GPIO_PIN_RESET);
 8002e98:	2200      	movs	r2, #0
 8002e9a:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 8002e9e:	480f      	ldr	r0, [pc, #60]	@ (8002edc <MX_GPIO_Init+0x1d8>)
 8002ea0:	f001 fa02 	bl	80042a8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ADS1299_START_GPIO_Port, ADS1299_START_Pin, GPIO_PIN_SET);
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	2140      	movs	r1, #64	@ 0x40
 8002ea8:	480c      	ldr	r0, [pc, #48]	@ (8002edc <MX_GPIO_Init+0x1d8>)
 8002eaa:	f001 f9fd 	bl	80042a8 <HAL_GPIO_WritePin>

	/* Enable and set EXTI line interrupt priority */
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 2, 0);   // Priority level 2
 8002eae:	2200      	movs	r2, #0
 8002eb0:	2102      	movs	r1, #2
 8002eb2:	2017      	movs	r0, #23
 8002eb4:	f000 fcf7 	bl	80038a6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);          // Enable the interrupt
 8002eb8:	2017      	movs	r0, #23
 8002eba:	f000 fd0e 	bl	80038da <HAL_NVIC_EnableIRQ>

	HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_RESET);
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	2101      	movs	r1, #1
 8002ec2:	4807      	ldr	r0, [pc, #28]	@ (8002ee0 <MX_GPIO_Init+0x1dc>)
 8002ec4:	f001 f9f0 	bl	80042a8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_RESET);
 8002ec8:	2200      	movs	r2, #0
 8002eca:	2102      	movs	r1, #2
 8002ecc:	4804      	ldr	r0, [pc, #16]	@ (8002ee0 <MX_GPIO_Init+0x1dc>)
 8002ece:	f001 f9eb 	bl	80042a8 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
#endif

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002ed2:	bf00      	nop
 8002ed4:	3718      	adds	r7, #24
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	48000800 	.word	0x48000800
 8002ee0:	48000400 	.word	0x48000400

08002ee4 <PeriphClock_Config>:



/* USER CODE BEGIN 4 */
void PeriphClock_Config(void)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	af00      	add	r7, sp, #0

	/* Start automatic synchronization */
	HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
#endif

	return;
 8002ee8:	bf00      	nop
}
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr
	...

08002ef4 <MX_TIM2_Init>:




static void MX_TIM2_Init(void)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	af00      	add	r7, sp, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002ef8:	2001      	movs	r0, #1
 8002efa:	f7ff fcd5 	bl	80028a8 <LL_APB1_GRP1_EnableClock>

    htim2.Instance = TIM2;
 8002efe:	4b1a      	ldr	r3, [pc, #104]	@ (8002f68 <MX_TIM2_Init+0x74>)
 8002f00:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002f04:	601a      	str	r2, [r3, #0]
    htim2.Init.Prescaler = (uint32_t)(HAL_RCC_GetPCLK1Freq() / 2000) - 1;
 8002f06:	f003 f907 	bl	8006118 <HAL_RCC_GetPCLK1Freq>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	4a17      	ldr	r2, [pc, #92]	@ (8002f6c <MX_TIM2_Init+0x78>)
 8002f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f12:	09db      	lsrs	r3, r3, #7
 8002f14:	3b01      	subs	r3, #1
 8002f16:	4a14      	ldr	r2, [pc, #80]	@ (8002f68 <MX_TIM2_Init+0x74>)
 8002f18:	6053      	str	r3, [r2, #4]
    htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f1a:	4b13      	ldr	r3, [pc, #76]	@ (8002f68 <MX_TIM2_Init+0x74>)
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	609a      	str	r2, [r3, #8]
    htim2.Init.Period = 500;
 8002f20:	4b11      	ldr	r3, [pc, #68]	@ (8002f68 <MX_TIM2_Init+0x74>)
 8002f22:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8002f26:	60da      	str	r2, [r3, #12]
    htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f28:	4b0f      	ldr	r3, [pc, #60]	@ (8002f68 <MX_TIM2_Init+0x74>)
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	611a      	str	r2, [r3, #16]
    htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f2e:	4b0e      	ldr	r3, [pc, #56]	@ (8002f68 <MX_TIM2_Init+0x74>)
 8002f30:	2200      	movs	r2, #0
 8002f32:	619a      	str	r2, [r3, #24]

    if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002f34:	480c      	ldr	r0, [pc, #48]	@ (8002f68 <MX_TIM2_Init+0x74>)
 8002f36:	f004 fe61 	bl	8007bfc <HAL_TIM_Base_Init>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d001      	beq.n	8002f44 <MX_TIM2_Init+0x50>
    {
        Error_Handler(); // Handle initialization error
 8002f40:	f000 f8aa 	bl	8003098 <Error_Handler>
    }

    HAL_NVIC_SetPriority(TIM2_IRQn, 15, 0);
 8002f44:	2200      	movs	r2, #0
 8002f46:	210f      	movs	r1, #15
 8002f48:	201c      	movs	r0, #28
 8002f4a:	f000 fcac 	bl	80038a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002f4e:	201c      	movs	r0, #28
 8002f50:	f000 fcc3 	bl	80038da <HAL_NVIC_EnableIRQ>

        // Start the timer interrupt
    if (HAL_TIM_Base_Start_IT(&htim2) != HAL_OK)
 8002f54:	4804      	ldr	r0, [pc, #16]	@ (8002f68 <MX_TIM2_Init+0x74>)
 8002f56:	f004 feb3 	bl	8007cc0 <HAL_TIM_Base_Start_IT>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d001      	beq.n	8002f64 <MX_TIM2_Init+0x70>
    {
        Error_Handler(); // Handle start error
 8002f60:	f000 f89a 	bl	8003098 <Error_Handler>
    }
}
 8002f64:	bf00      	nop
 8002f66:	bd80      	pop	{r7, pc}
 8002f68:	2000039c 	.word	0x2000039c
 8002f6c:	10624dd3 	.word	0x10624dd3

08002f70 <MX_TIM17_Init>:



void MX_TIM17_Init(void)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	af00      	add	r7, sp, #0
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002f74:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8002f78:	f7ff fcaf 	bl	80028da <LL_APB2_GRP1_EnableClock>

    htim17.Instance = TIM17;
 8002f7c:	4b1a      	ldr	r3, [pc, #104]	@ (8002fe8 <MX_TIM17_Init+0x78>)
 8002f7e:	4a1b      	ldr	r2, [pc, #108]	@ (8002fec <MX_TIM17_Init+0x7c>)
 8002f80:	601a      	str	r2, [r3, #0]
    htim17.Init.Prescaler = (uint32_t)(HAL_RCC_GetPCLK2Freq() / 1000) - 1;  // TIM17 is on APB2
 8002f82:	f003 f8df 	bl	8006144 <HAL_RCC_GetPCLK2Freq>
 8002f86:	4603      	mov	r3, r0
 8002f88:	4a19      	ldr	r2, [pc, #100]	@ (8002ff0 <MX_TIM17_Init+0x80>)
 8002f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f8e:	099b      	lsrs	r3, r3, #6
 8002f90:	3b01      	subs	r3, #1
 8002f92:	4a15      	ldr	r2, [pc, #84]	@ (8002fe8 <MX_TIM17_Init+0x78>)
 8002f94:	6053      	str	r3, [r2, #4]
    htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f96:	4b14      	ldr	r3, [pc, #80]	@ (8002fe8 <MX_TIM17_Init+0x78>)
 8002f98:	2200      	movs	r2, #0
 8002f9a:	609a      	str	r2, [r3, #8]
    htim17.Init.Period = 20 - 1;
 8002f9c:	4b12      	ldr	r3, [pc, #72]	@ (8002fe8 <MX_TIM17_Init+0x78>)
 8002f9e:	2213      	movs	r2, #19
 8002fa0:	60da      	str	r2, [r3, #12]
    htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fa2:	4b11      	ldr	r3, [pc, #68]	@ (8002fe8 <MX_TIM17_Init+0x78>)
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	611a      	str	r2, [r3, #16]
    htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002fa8:	4b0f      	ldr	r3, [pc, #60]	@ (8002fe8 <MX_TIM17_Init+0x78>)
 8002faa:	2200      	movs	r2, #0
 8002fac:	619a      	str	r2, [r3, #24]
    htim17.Init.RepetitionCounter = 0;
 8002fae:	4b0e      	ldr	r3, [pc, #56]	@ (8002fe8 <MX_TIM17_Init+0x78>)
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	615a      	str	r2, [r3, #20]

    if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8002fb4:	480c      	ldr	r0, [pc, #48]	@ (8002fe8 <MX_TIM17_Init+0x78>)
 8002fb6:	f004 fe21 	bl	8007bfc <HAL_TIM_Base_Init>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d001      	beq.n	8002fc4 <MX_TIM17_Init+0x54>
    {
        Error_Handler();
 8002fc0:	f000 f86a 	bl	8003098 <Error_Handler>
    }

    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 14, 0);  // Different interrupt for TIM17
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	210e      	movs	r1, #14
 8002fc8:	201a      	movs	r0, #26
 8002fca:	f000 fc6c 	bl	80038a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8002fce:	201a      	movs	r0, #26
 8002fd0:	f000 fc83 	bl	80038da <HAL_NVIC_EnableIRQ>

    if (HAL_TIM_Base_Start_IT(&htim17) != HAL_OK)
 8002fd4:	4804      	ldr	r0, [pc, #16]	@ (8002fe8 <MX_TIM17_Init+0x78>)
 8002fd6:	f004 fe73 	bl	8007cc0 <HAL_TIM_Base_Start_IT>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d001      	beq.n	8002fe4 <MX_TIM17_Init+0x74>
    {
        Error_Handler();
 8002fe0:	f000 f85a 	bl	8003098 <Error_Handler>
    }
}
 8002fe4:	bf00      	nop
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	200003e8 	.word	0x200003e8
 8002fec:	40014800 	.word	0x40014800
 8002ff0:	10624dd3 	.word	0x10624dd3

08002ff4 <HAL_TIM_PeriodElapsedCallback>:



// Timer interrupt handler
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b082      	sub	sp, #8
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003004:	d12e      	bne.n	8003064 <HAL_TIM_PeriodElapsedCallback+0x70>
    {
        led_counter += 1; // Each interrupt = 1ms (from timer settings)
 8003006:	4b20      	ldr	r3, [pc, #128]	@ (8003088 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	3301      	adds	r3, #1
 800300c:	4a1e      	ldr	r2, [pc, #120]	@ (8003088 <HAL_TIM_PeriodElapsedCallback+0x94>)
 800300e:	6013      	str	r3, [r2, #0]

        if (is_connected())
 8003010:	f00a feec 	bl	800ddec <is_connected>
 8003014:	4603      	mov	r3, r0
 8003016:	2b00      	cmp	r3, #0
 8003018:	d00b      	beq.n	8003032 <HAL_TIM_PeriodElapsedCallback+0x3e>
        {
            // Force LED ON and reset state/counter
            HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_SET);
 800301a:	2201      	movs	r2, #1
 800301c:	2102      	movs	r1, #2
 800301e:	481b      	ldr	r0, [pc, #108]	@ (800308c <HAL_TIM_PeriodElapsedCallback+0x98>)
 8003020:	f001 f942 	bl	80042a8 <HAL_GPIO_WritePin>
            led_state = GPIO_PIN_SET;
 8003024:	4b1a      	ldr	r3, [pc, #104]	@ (8003090 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8003026:	2201      	movs	r2, #1
 8003028:	701a      	strb	r2, [r3, #0]
            led_counter = 0;
 800302a:	4b17      	ldr	r3, [pc, #92]	@ (8003088 <HAL_TIM_PeriodElapsedCallback+0x94>)
 800302c:	2200      	movs	r2, #0
 800302e:	601a      	str	r2, [r3, #0]
    	if(is_connected()){
    		UTIL_SEQ_SetTask( 1<<CFG_TASK_IMU_SAMPLE_ID, CFG_SCH_PRIO_0);
    	}

    }
}
 8003030:	e026      	b.n	8003080 <HAL_TIM_PeriodElapsedCallback+0x8c>
            if (led_counter >= 1) // 2 seconds
 8003032:	4b15      	ldr	r3, [pc, #84]	@ (8003088 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d022      	beq.n	8003080 <HAL_TIM_PeriodElapsedCallback+0x8c>
                led_counter = 0;
 800303a:	4b13      	ldr	r3, [pc, #76]	@ (8003088 <HAL_TIM_PeriodElapsedCallback+0x94>)
 800303c:	2200      	movs	r2, #0
 800303e:	601a      	str	r2, [r3, #0]
                led_state = (led_state == GPIO_PIN_SET) ? GPIO_PIN_RESET : GPIO_PIN_SET;
 8003040:	4b13      	ldr	r3, [pc, #76]	@ (8003090 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8003042:	781b      	ldrb	r3, [r3, #0]
 8003044:	2b01      	cmp	r3, #1
 8003046:	bf14      	ite	ne
 8003048:	2301      	movne	r3, #1
 800304a:	2300      	moveq	r3, #0
 800304c:	b2db      	uxtb	r3, r3
 800304e:	461a      	mov	r2, r3
 8003050:	4b0f      	ldr	r3, [pc, #60]	@ (8003090 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8003052:	701a      	strb	r2, [r3, #0]
                HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, led_state);
 8003054:	4b0e      	ldr	r3, [pc, #56]	@ (8003090 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8003056:	781b      	ldrb	r3, [r3, #0]
 8003058:	461a      	mov	r2, r3
 800305a:	2102      	movs	r1, #2
 800305c:	480b      	ldr	r0, [pc, #44]	@ (800308c <HAL_TIM_PeriodElapsedCallback+0x98>)
 800305e:	f001 f923 	bl	80042a8 <HAL_GPIO_WritePin>
}
 8003062:	e00d      	b.n	8003080 <HAL_TIM_PeriodElapsedCallback+0x8c>
    else if (htim->Instance == TIM17){
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a0a      	ldr	r2, [pc, #40]	@ (8003094 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d108      	bne.n	8003080 <HAL_TIM_PeriodElapsedCallback+0x8c>
    	if(is_connected()){
 800306e:	f00a febd 	bl	800ddec <is_connected>
 8003072:	4603      	mov	r3, r0
 8003074:	2b00      	cmp	r3, #0
 8003076:	d003      	beq.n	8003080 <HAL_TIM_PeriodElapsedCallback+0x8c>
    		UTIL_SEQ_SetTask( 1<<CFG_TASK_IMU_SAMPLE_ID, CFG_SCH_PRIO_0);
 8003078:	2100      	movs	r1, #0
 800307a:	2020      	movs	r0, #32
 800307c:	f00b fa6e 	bl	800e55c <UTIL_SEQ_SetTask>
}
 8003080:	bf00      	nop
 8003082:	3708      	adds	r7, #8
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}
 8003088:	20000434 	.word	0x20000434
 800308c:	48000400 	.word	0x48000400
 8003090:	20000438 	.word	0x20000438
 8003094:	40014800 	.word	0x40014800

08003098 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003098:	b480      	push	{r7}
 800309a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800309c:	b672      	cpsid	i
}
 800309e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80030a0:	bf00      	nop
 80030a2:	e7fd      	b.n	80030a0 <Error_Handler+0x8>

080030a4 <LL_RCC_SetRTCClockSource>:
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_LSI
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_HSE_DIV32
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetRTCClockSource(uint32_t Source)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b083      	sub	sp, #12
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80030ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030b4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80030b8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	4313      	orrs	r3, r2
 80030c0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80030c4:	bf00      	nop
 80030c6:	370c      	adds	r7, #12
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr

080030d0 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 80030d0:	b480      	push	{r7}
 80030d2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80030d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030dc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80030e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80030e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80030e8:	bf00      	nop
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr

080030f2 <LL_AHB2_GRP1_EnableClock>:
{
 80030f2:	b480      	push	{r7}
 80030f4:	b085      	sub	sp, #20
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80030fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030fe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003100:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	4313      	orrs	r3, r2
 8003108:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800310a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800310e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	4013      	ands	r3, r2
 8003114:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003116:	68fb      	ldr	r3, [r7, #12]
}
 8003118:	bf00      	nop
 800311a:	3714      	adds	r7, #20
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr

08003124 <LL_AHB3_GRP1_EnableClock>:
{
 8003124:	b480      	push	{r7}
 8003126:	b085      	sub	sp, #20
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800312c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003130:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003132:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4313      	orrs	r3, r2
 800313a:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800313c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003140:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4013      	ands	r3, r2
 8003146:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003148:	68fb      	ldr	r3, [r7, #12]
}
 800314a:	bf00      	nop
 800314c:	3714      	adds	r7, #20
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr

08003156 <LL_APB1_GRP1_EnableClock>:
{
 8003156:	b480      	push	{r7}
 8003158:	b085      	sub	sp, #20
 800315a:	af00      	add	r7, sp, #0
 800315c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800315e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003162:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003164:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	4313      	orrs	r3, r2
 800316c:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800316e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003172:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	4013      	ands	r3, r2
 8003178:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800317a:	68fb      	ldr	r3, [r7, #12]
}
 800317c:	bf00      	nop
 800317e:	3714      	adds	r7, #20
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr

08003188 <LL_APB2_GRP1_EnableClock>:
{
 8003188:	b480      	push	{r7}
 800318a:	b085      	sub	sp, #20
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8003190:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003194:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003196:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4313      	orrs	r3, r2
 800319e:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80031a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031a4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4013      	ands	r3, r2
 80031aa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80031ac:	68fb      	ldr	r3, [r7, #12]
}
 80031ae:	bf00      	nop
 80031b0:	3714      	adds	r7, #20
 80031b2:	46bd      	mov	sp, r7
 80031b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b8:	4770      	bx	lr

080031ba <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80031ba:	b580      	push	{r7, lr}
 80031bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 80031be:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80031c2:	f7ff ffaf 	bl	8003124 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 80031c6:	2200      	movs	r2, #0
 80031c8:	2100      	movs	r1, #0
 80031ca:	202e      	movs	r0, #46	@ 0x2e
 80031cc:	f000 fb6b 	bl	80038a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 80031d0:	202e      	movs	r0, #46	@ 0x2e
 80031d2:	f000 fb82 	bl	80038da <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80031d6:	bf00      	nop
 80031d8:	bd80      	pop	{r7, pc}
	...

080031dc <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b082      	sub	sp, #8
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a05      	ldr	r2, [pc, #20]	@ (8003200 <HAL_IPCC_MspInit+0x24>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d103      	bne.n	80031f6 <HAL_IPCC_MspInit+0x1a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 80031ee:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80031f2:	f7ff ff97 	bl	8003124 <LL_AHB3_GRP1_EnableClock>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 80031f6:	bf00      	nop
 80031f8:	3708      	adds	r7, #8
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	58000c00 	.word	0x58000c00

08003204 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b096      	sub	sp, #88	@ 0x58
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800320c:	f107 0308 	add.w	r3, r7, #8
 8003210:	2250      	movs	r2, #80	@ 0x50
 8003212:	2100      	movs	r1, #0
 8003214:	4618      	mov	r0, r3
 8003216:	f00b fccf 	bl	800ebb8 <memset>
  if(hrtc->Instance==RTC)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a14      	ldr	r2, [pc, #80]	@ (8003270 <HAL_RTC_MspInit+0x6c>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d120      	bne.n	8003266 <HAL_RTC_MspInit+0x62>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */
  HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8003224:	f001 feb0 	bl	8004f88 <HAL_PWR_EnableBkUpAccess>

  /**
  *  Write twice the value to flush the APB-AHB bridge
  *  This bit shall be written in the register before writing the next one
  */
  HAL_PWR_EnableBkUpAccess();
 8003228:	f001 feae 	bl	8004f88 <HAL_PWR_EnableBkUpAccess>

  __HAL_RCC_RTC_CONFIG(RCC_RTCCLKSOURCE_LSE); /**< Select LSI as RTC Input */
 800322c:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8003230:	f7ff ff38 	bl	80030a4 <LL_RCC_SetRTCClockSource>
  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003234:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003238:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800323a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800323e:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003240:	f107 0308 	add.w	r3, r7, #8
 8003244:	4618      	mov	r0, r3
 8003246:	f003 f9e4 	bl	8006612 <HAL_RCCEx_PeriphCLKConfig>
 800324a:	4603      	mov	r3, r0
 800324c:	2b00      	cmp	r3, #0
 800324e:	d001      	beq.n	8003254 <HAL_RTC_MspInit+0x50>
    {
      Error_Handler();
 8003250:	f7ff ff22 	bl	8003098 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003254:	f7ff ff3c 	bl	80030d0 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8003258:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800325c:	f7ff ff7b 	bl	8003156 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */
  HAL_RTCEx_EnableBypassShadow(hrtc);
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	f003 fd5d 	bl	8006d20 <HAL_RTCEx_EnableBypassShadow>
  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003266:	bf00      	nop
 8003268:	3758      	adds	r7, #88	@ 0x58
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
 800326e:	bf00      	nop
 8003270:	40002800 	.word	0x40002800

08003274 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b09c      	sub	sp, #112	@ 0x70
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800327c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8003280:	2200      	movs	r2, #0
 8003282:	601a      	str	r2, [r3, #0]
 8003284:	605a      	str	r2, [r3, #4]
 8003286:	609a      	str	r2, [r3, #8]
 8003288:	60da      	str	r2, [r3, #12]
 800328a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800328c:	f107 030c 	add.w	r3, r7, #12
 8003290:	2250      	movs	r2, #80	@ 0x50
 8003292:	2100      	movs	r1, #0
 8003294:	4618      	mov	r0, r3
 8003296:	f00b fc8f 	bl	800ebb8 <memset>
  if(huart->Instance==USART1)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a2e      	ldr	r2, [pc, #184]	@ (8003358 <HAL_UART_MspInit+0xe4>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d155      	bne.n	8003350 <HAL_UART_MspInit+0xdc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80032a4:	2301      	movs	r3, #1
 80032a6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80032a8:	2300      	movs	r3, #0
 80032aa:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80032ac:	f107 030c 	add.w	r3, r7, #12
 80032b0:	4618      	mov	r0, r3
 80032b2:	f003 f9ae 	bl	8006612 <HAL_RCCEx_PeriphCLKConfig>
 80032b6:	4603      	mov	r3, r0
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d001      	beq.n	80032c0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80032bc:	f7ff feec 	bl	8003098 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80032c0:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80032c4:	f7ff ff60 	bl	8003188 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032c8:	2002      	movs	r0, #2
 80032ca:	f7ff ff12 	bl	80030f2 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin|VCP_TX_Pin;
 80032ce:	23c0      	movs	r3, #192	@ 0xc0
 80032d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032d2:	2302      	movs	r3, #2
 80032d4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80032d6:	2301      	movs	r3, #1
 80032d8:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032da:	2303      	movs	r3, #3
 80032dc:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80032de:	2307      	movs	r3, #7
 80032e0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032e2:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80032e6:	4619      	mov	r1, r3
 80032e8:	481c      	ldr	r0, [pc, #112]	@ (800335c <HAL_UART_MspInit+0xe8>)
 80032ea:	f000 fe6d 	bl	8003fc8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Channel4;
 80032ee:	4b1c      	ldr	r3, [pc, #112]	@ (8003360 <HAL_UART_MspInit+0xec>)
 80032f0:	4a1c      	ldr	r2, [pc, #112]	@ (8003364 <HAL_UART_MspInit+0xf0>)
 80032f2:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80032f4:	4b1a      	ldr	r3, [pc, #104]	@ (8003360 <HAL_UART_MspInit+0xec>)
 80032f6:	220f      	movs	r2, #15
 80032f8:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80032fa:	4b19      	ldr	r3, [pc, #100]	@ (8003360 <HAL_UART_MspInit+0xec>)
 80032fc:	2210      	movs	r2, #16
 80032fe:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003300:	4b17      	ldr	r3, [pc, #92]	@ (8003360 <HAL_UART_MspInit+0xec>)
 8003302:	2200      	movs	r2, #0
 8003304:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003306:	4b16      	ldr	r3, [pc, #88]	@ (8003360 <HAL_UART_MspInit+0xec>)
 8003308:	2280      	movs	r2, #128	@ 0x80
 800330a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800330c:	4b14      	ldr	r3, [pc, #80]	@ (8003360 <HAL_UART_MspInit+0xec>)
 800330e:	2200      	movs	r2, #0
 8003310:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003312:	4b13      	ldr	r3, [pc, #76]	@ (8003360 <HAL_UART_MspInit+0xec>)
 8003314:	2200      	movs	r2, #0
 8003316:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003318:	4b11      	ldr	r3, [pc, #68]	@ (8003360 <HAL_UART_MspInit+0xec>)
 800331a:	2200      	movs	r2, #0
 800331c:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800331e:	4b10      	ldr	r3, [pc, #64]	@ (8003360 <HAL_UART_MspInit+0xec>)
 8003320:	2200      	movs	r2, #0
 8003322:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003324:	480e      	ldr	r0, [pc, #56]	@ (8003360 <HAL_UART_MspInit+0xec>)
 8003326:	f000 fb1d 	bl	8003964 <HAL_DMA_Init>
 800332a:	4603      	mov	r3, r0
 800332c:	2b00      	cmp	r3, #0
 800332e:	d001      	beq.n	8003334 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8003330:	f7ff feb2 	bl	8003098 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	4a0a      	ldr	r2, [pc, #40]	@ (8003360 <HAL_UART_MspInit+0xec>)
 8003338:	67da      	str	r2, [r3, #124]	@ 0x7c
 800333a:	4a09      	ldr	r2, [pc, #36]	@ (8003360 <HAL_UART_MspInit+0xec>)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003340:	2200      	movs	r2, #0
 8003342:	2100      	movs	r1, #0
 8003344:	2024      	movs	r0, #36	@ 0x24
 8003346:	f000 faae 	bl	80038a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800334a:	2024      	movs	r0, #36	@ 0x24
 800334c:	f000 fac5 	bl	80038da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003350:	bf00      	nop
 8003352:	3770      	adds	r7, #112	@ 0x70
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}
 8003358:	40013800 	.word	0x40013800
 800335c:	48000400 	.word	0x48000400
 8003360:	20000284 	.word	0x20000284
 8003364:	40020444 	.word	0x40020444

08003368 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003368:	b480      	push	{r7}
 800336a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800336c:	bf00      	nop
 800336e:	e7fd      	b.n	800336c <NMI_Handler+0x4>

08003370 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003370:	b480      	push	{r7}
 8003372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003374:	bf00      	nop
 8003376:	e7fd      	b.n	8003374 <HardFault_Handler+0x4>

08003378 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003378:	b480      	push	{r7}
 800337a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800337c:	bf00      	nop
 800337e:	e7fd      	b.n	800337c <MemManage_Handler+0x4>

08003380 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003380:	b480      	push	{r7}
 8003382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003384:	bf00      	nop
 8003386:	e7fd      	b.n	8003384 <BusFault_Handler+0x4>

08003388 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003388:	b480      	push	{r7}
 800338a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800338c:	bf00      	nop
 800338e:	e7fd      	b.n	800338c <UsageFault_Handler+0x4>

08003390 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003390:	b480      	push	{r7}
 8003392:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003394:	bf00      	nop
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr

0800339e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800339e:	b480      	push	{r7}
 80033a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80033a2:	bf00      	nop
 80033a4:	46bd      	mov	sp, r7
 80033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033aa:	4770      	bx	lr

080033ac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80033ac:	b480      	push	{r7}
 80033ae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80033b0:	bf00      	nop
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr

080033ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80033ba:	b580      	push	{r7, lr}
 80033bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80033be:	f000 f8ff 	bl	80035c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80033c2:	bf00      	nop
 80033c4:	bd80      	pop	{r7, pc}
	...

080033c8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80033cc:	4802      	ldr	r0, [pc, #8]	@ (80033d8 <USART1_IRQHandler+0x10>)
 80033ce:	f004 ff73 	bl	80082b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80033d2:	bf00      	nop
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop
 80033d8:	200001f0 	.word	0x200001f0

080033dc <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 80033e0:	f000 ff92 	bl	8004308 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 80033e4:	bf00      	nop
 80033e6:	bd80      	pop	{r7, pc}

080033e8 <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80033ec:	4802      	ldr	r0, [pc, #8]	@ (80033f8 <DMA2_Channel4_IRQHandler+0x10>)
 80033ee:	f000 fc9a 	bl	8003d26 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 80033f2:	bf00      	nop
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop
 80033f8:	20000284 	.word	0x20000284

080033fc <IPCC_C1_RX_IRQHandler>:
/* USER CODE BEGIN 1 */
/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8003400:	f00a fe0e 	bl	800e020 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8003404:	bf00      	nop
 8003406:	bd80      	pop	{r7, pc}

08003408 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 800340c:	f00a fe3e 	bl	800e08c <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8003410:	bf00      	nop
 8003412:	bd80      	pop	{r7, pc}

08003414 <EXTI15_10_IRQHandler>:
 *         interrupt request.
 * @param  None
 * @retval None
 */
void PUSH_BUTTON_SW_EXTI_IRQHandler(void)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8003418:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800341c:	f000 ff5c 	bl	80042d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003420:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8003424:	f000 ff58 	bl	80042d8 <HAL_GPIO_EXTI_IRQHandler>
}
 8003428:	bf00      	nop
 800342a:	bd80      	pop	{r7, pc}

0800342c <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(ADS1299_nDRDY_Pin);
 8003430:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8003434:	f000 ff50 	bl	80042d8 <HAL_GPIO_EXTI_IRQHandler>
}
 8003438:	bf00      	nop
 800343a:	bd80      	pop	{r7, pc}

0800343c <RTC_WKUP_IRQHandler>:

void RTC_WKUP_IRQHandler(void)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	af00      	add	r7, sp, #0
  HAL_RTCEx_WakeUpTimerIRQHandler();
 8003440:	f7fe fd2e 	bl	8001ea0 <HW_TS_RTC_Wakeup_Handler>
}
 8003444:	bf00      	nop
 8003446:	bd80      	pop	{r7, pc}

08003448 <TIM1_TRG_COM_TIM17_IRQHandler>:
  * @brief  This function handles TIM17 IRQ Handler.
  * @param  None
  * @retval None
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	af00      	add	r7, sp, #0
    HAL_TIM_IRQHandler(&htim17);
 800344c:	4802      	ldr	r0, [pc, #8]	@ (8003458 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 800344e:	f004 fc85 	bl	8007d5c <HAL_TIM_IRQHandler>
}
 8003452:	bf00      	nop
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop
 8003458:	200003e8 	.word	0x200003e8

0800345c <TIM2_IRQHandler>:


void TIM2_IRQHandler(void)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	af00      	add	r7, sp, #0
    HAL_TIM_IRQHandler(&htim2);
 8003460:	4802      	ldr	r0, [pc, #8]	@ (800346c <TIM2_IRQHandler+0x10>)
 8003462:	f004 fc7b 	bl	8007d5c <HAL_TIM_IRQHandler>
}
 8003466:	bf00      	nop
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	2000039c 	.word	0x2000039c

08003470 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003470:	b480      	push	{r7}
 8003472:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8003474:	4b07      	ldr	r3, [pc, #28]	@ (8003494 <SystemInit+0x24>)
 8003476:	2200      	movs	r2, #0
 8003478:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 800347a:	4b06      	ldr	r3, [pc, #24]	@ (8003494 <SystemInit+0x24>)
 800347c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003480:	4a04      	ldr	r2, [pc, #16]	@ (8003494 <SystemInit+0x24>)
 8003482:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003486:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  RCC->CR &= 0xFFFBFFFFU;

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
#endif
}
 800348a:	bf00      	nop
 800348c:	46bd      	mov	sp, r7
 800348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003492:	4770      	bx	lr
 8003494:	e000ed00 	.word	0xe000ed00

08003498 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8003498:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800349a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800349c:	3304      	adds	r3, #4

0800349e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800349e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80034a0:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80034a2:	d3f9      	bcc.n	8003498 <CopyDataInit>
  bx lr
 80034a4:	4770      	bx	lr

080034a6 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80034a6:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80034a8:	3004      	adds	r0, #4

080034aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80034aa:	4288      	cmp	r0, r1
  bcc FillZerobss
 80034ac:	d3fb      	bcc.n	80034a6 <FillZerobss>
  bx lr
 80034ae:	4770      	bx	lr

080034b0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80034b0:	480c      	ldr	r0, [pc, #48]	@ (80034e4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80034b2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80034b4:	f7ff ffdc 	bl	8003470 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80034b8:	480b      	ldr	r0, [pc, #44]	@ (80034e8 <LoopForever+0x6>)
 80034ba:	490c      	ldr	r1, [pc, #48]	@ (80034ec <LoopForever+0xa>)
 80034bc:	4a0c      	ldr	r2, [pc, #48]	@ (80034f0 <LoopForever+0xe>)
 80034be:	2300      	movs	r3, #0
 80034c0:	f7ff ffed 	bl	800349e <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80034c4:	480b      	ldr	r0, [pc, #44]	@ (80034f4 <LoopForever+0x12>)
 80034c6:	490c      	ldr	r1, [pc, #48]	@ (80034f8 <LoopForever+0x16>)
 80034c8:	4a0c      	ldr	r2, [pc, #48]	@ (80034fc <LoopForever+0x1a>)
 80034ca:	2300      	movs	r3, #0
 80034cc:	f7ff ffe7 	bl	800349e <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80034d0:	480b      	ldr	r0, [pc, #44]	@ (8003500 <LoopForever+0x1e>)
 80034d2:	490c      	ldr	r1, [pc, #48]	@ (8003504 <LoopForever+0x22>)
 80034d4:	2300      	movs	r3, #0
 80034d6:	f7ff ffe8 	bl	80034aa <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80034da:	f00b fbbb 	bl	800ec54 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80034de:	f7ff fa45 	bl	800296c <main>

080034e2 <LoopForever>:

LoopForever:
  b LoopForever
 80034e2:	e7fe      	b.n	80034e2 <LoopForever>
  ldr   r0, =_estack
 80034e4:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80034e8:	20000008 	.word	0x20000008
 80034ec:	20000088 	.word	0x20000088
 80034f0:	080111ac 	.word	0x080111ac
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80034f4:	200301e4 	.word	0x200301e4
 80034f8:	20030d8b 	.word	0x20030d8b
 80034fc:	0801125a 	.word	0x0801125a
  INIT_BSS _sbss, _ebss
 8003500:	200000bc 	.word	0x200000bc
 8003504:	200023dc 	.word	0x200023dc

08003508 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003508:	e7fe      	b.n	8003508 <ADC1_IRQHandler>
	...

0800350c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b082      	sub	sp, #8
 8003510:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003512:	2300      	movs	r3, #0
 8003514:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003516:	4b0c      	ldr	r3, [pc, #48]	@ (8003548 <HAL_Init+0x3c>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a0b      	ldr	r2, [pc, #44]	@ (8003548 <HAL_Init+0x3c>)
 800351c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003520:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003522:	2003      	movs	r0, #3
 8003524:	f000 f9b4 	bl	8003890 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003528:	2000      	movs	r0, #0
 800352a:	f000 f80f 	bl	800354c <HAL_InitTick>
 800352e:	4603      	mov	r3, r0
 8003530:	2b00      	cmp	r3, #0
 8003532:	d002      	beq.n	800353a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	71fb      	strb	r3, [r7, #7]
 8003538:	e001      	b.n	800353e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800353a:	f7ff fe3e 	bl	80031ba <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800353e:	79fb      	ldrb	r3, [r7, #7]
}
 8003540:	4618      	mov	r0, r3
 8003542:	3708      	adds	r7, #8
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}
 8003548:	58004000 	.word	0x58004000

0800354c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b084      	sub	sp, #16
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003554:	2300      	movs	r3, #0
 8003556:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8003558:	4b17      	ldr	r3, [pc, #92]	@ (80035b8 <HAL_InitTick+0x6c>)
 800355a:	781b      	ldrb	r3, [r3, #0]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d024      	beq.n	80035aa <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003560:	f002 fdc6 	bl	80060f0 <HAL_RCC_GetHCLKFreq>
 8003564:	4602      	mov	r2, r0
 8003566:	4b14      	ldr	r3, [pc, #80]	@ (80035b8 <HAL_InitTick+0x6c>)
 8003568:	781b      	ldrb	r3, [r3, #0]
 800356a:	4619      	mov	r1, r3
 800356c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003570:	fbb3 f3f1 	udiv	r3, r3, r1
 8003574:	fbb2 f3f3 	udiv	r3, r2, r3
 8003578:	4618      	mov	r0, r3
 800357a:	f000 f9ca 	bl	8003912 <HAL_SYSTICK_Config>
 800357e:	4603      	mov	r3, r0
 8003580:	2b00      	cmp	r3, #0
 8003582:	d10f      	bne.n	80035a4 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2b0f      	cmp	r3, #15
 8003588:	d809      	bhi.n	800359e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800358a:	2200      	movs	r2, #0
 800358c:	6879      	ldr	r1, [r7, #4]
 800358e:	f04f 30ff 	mov.w	r0, #4294967295
 8003592:	f000 f988 	bl	80038a6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003596:	4a09      	ldr	r2, [pc, #36]	@ (80035bc <HAL_InitTick+0x70>)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6013      	str	r3, [r2, #0]
 800359c:	e007      	b.n	80035ae <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	73fb      	strb	r3, [r7, #15]
 80035a2:	e004      	b.n	80035ae <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	73fb      	strb	r3, [r7, #15]
 80035a8:	e001      	b.n	80035ae <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80035ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	3710      	adds	r7, #16
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}
 80035b8:	20000010 	.word	0x20000010
 80035bc:	2000000c 	.word	0x2000000c

080035c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80035c0:	b480      	push	{r7}
 80035c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80035c4:	4b06      	ldr	r3, [pc, #24]	@ (80035e0 <HAL_IncTick+0x20>)
 80035c6:	781b      	ldrb	r3, [r3, #0]
 80035c8:	461a      	mov	r2, r3
 80035ca:	4b06      	ldr	r3, [pc, #24]	@ (80035e4 <HAL_IncTick+0x24>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4413      	add	r3, r2
 80035d0:	4a04      	ldr	r2, [pc, #16]	@ (80035e4 <HAL_IncTick+0x24>)
 80035d2:	6013      	str	r3, [r2, #0]
}
 80035d4:	bf00      	nop
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr
 80035de:	bf00      	nop
 80035e0:	20000010 	.word	0x20000010
 80035e4:	2000043c 	.word	0x2000043c

080035e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80035e8:	b480      	push	{r7}
 80035ea:	af00      	add	r7, sp, #0
  return uwTick;
 80035ec:	4b03      	ldr	r3, [pc, #12]	@ (80035fc <HAL_GetTick+0x14>)
 80035ee:	681b      	ldr	r3, [r3, #0]
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	46bd      	mov	sp, r7
 80035f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f8:	4770      	bx	lr
 80035fa:	bf00      	nop
 80035fc:	2000043c 	.word	0x2000043c

08003600 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8003600:	b480      	push	{r7}
 8003602:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8003604:	4b03      	ldr	r3, [pc, #12]	@ (8003614 <HAL_GetTickPrio+0x14>)
 8003606:	681b      	ldr	r3, [r3, #0]
}
 8003608:	4618      	mov	r0, r3
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr
 8003612:	bf00      	nop
 8003614:	2000000c 	.word	0x2000000c

08003618 <HAL_GetTickFreq>:
  * @brief Return tick frequency.
  * @retval Tick frequency.
  *         Value of @ref HAL_TickFreqTypeDef.
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 8003618:	b480      	push	{r7}
 800361a:	af00      	add	r7, sp, #0
  return uwTickFreq;
 800361c:	4b03      	ldr	r3, [pc, #12]	@ (800362c <HAL_GetTickFreq+0x14>)
 800361e:	781b      	ldrb	r3, [r3, #0]
}
 8003620:	4618      	mov	r0, r3
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr
 800362a:	bf00      	nop
 800362c:	20000010 	.word	0x20000010

08003630 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003630:	b480      	push	{r7}
 8003632:	b085      	sub	sp, #20
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	f003 0307 	and.w	r3, r3, #7
 800363e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003640:	4b0c      	ldr	r3, [pc, #48]	@ (8003674 <__NVIC_SetPriorityGrouping+0x44>)
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003646:	68ba      	ldr	r2, [r7, #8]
 8003648:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800364c:	4013      	ands	r3, r2
 800364e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003658:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800365c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003660:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003662:	4a04      	ldr	r2, [pc, #16]	@ (8003674 <__NVIC_SetPriorityGrouping+0x44>)
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	60d3      	str	r3, [r2, #12]
}
 8003668:	bf00      	nop
 800366a:	3714      	adds	r7, #20
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr
 8003674:	e000ed00 	.word	0xe000ed00

08003678 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003678:	b480      	push	{r7}
 800367a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800367c:	4b04      	ldr	r3, [pc, #16]	@ (8003690 <__NVIC_GetPriorityGrouping+0x18>)
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	0a1b      	lsrs	r3, r3, #8
 8003682:	f003 0307 	and.w	r3, r3, #7
}
 8003686:	4618      	mov	r0, r3
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr
 8003690:	e000ed00 	.word	0xe000ed00

08003694 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003694:	b480      	push	{r7}
 8003696:	b083      	sub	sp, #12
 8003698:	af00      	add	r7, sp, #0
 800369a:	4603      	mov	r3, r0
 800369c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800369e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	db0b      	blt.n	80036be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036a6:	79fb      	ldrb	r3, [r7, #7]
 80036a8:	f003 021f 	and.w	r2, r3, #31
 80036ac:	4907      	ldr	r1, [pc, #28]	@ (80036cc <__NVIC_EnableIRQ+0x38>)
 80036ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036b2:	095b      	lsrs	r3, r3, #5
 80036b4:	2001      	movs	r0, #1
 80036b6:	fa00 f202 	lsl.w	r2, r0, r2
 80036ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80036be:	bf00      	nop
 80036c0:	370c      	adds	r7, #12
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr
 80036ca:	bf00      	nop
 80036cc:	e000e100 	.word	0xe000e100

080036d0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b083      	sub	sp, #12
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	4603      	mov	r3, r0
 80036d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	db12      	blt.n	8003708 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036e2:	79fb      	ldrb	r3, [r7, #7]
 80036e4:	f003 021f 	and.w	r2, r3, #31
 80036e8:	490a      	ldr	r1, [pc, #40]	@ (8003714 <__NVIC_DisableIRQ+0x44>)
 80036ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036ee:	095b      	lsrs	r3, r3, #5
 80036f0:	2001      	movs	r0, #1
 80036f2:	fa00 f202 	lsl.w	r2, r0, r2
 80036f6:	3320      	adds	r3, #32
 80036f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80036fc:	f3bf 8f4f 	dsb	sy
}
 8003700:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003702:	f3bf 8f6f 	isb	sy
}
 8003706:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003708:	bf00      	nop
 800370a:	370c      	adds	r7, #12
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr
 8003714:	e000e100 	.word	0xe000e100

08003718 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8003718:	b480      	push	{r7}
 800371a:	b083      	sub	sp, #12
 800371c:	af00      	add	r7, sp, #0
 800371e:	4603      	mov	r3, r0
 8003720:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003726:	2b00      	cmp	r3, #0
 8003728:	db0c      	blt.n	8003744 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800372a:	79fb      	ldrb	r3, [r7, #7]
 800372c:	f003 021f 	and.w	r2, r3, #31
 8003730:	4907      	ldr	r1, [pc, #28]	@ (8003750 <__NVIC_SetPendingIRQ+0x38>)
 8003732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003736:	095b      	lsrs	r3, r3, #5
 8003738:	2001      	movs	r0, #1
 800373a:	fa00 f202 	lsl.w	r2, r0, r2
 800373e:	3340      	adds	r3, #64	@ 0x40
 8003740:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003744:	bf00      	nop
 8003746:	370c      	adds	r7, #12
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr
 8003750:	e000e100 	.word	0xe000e100

08003754 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003754:	b480      	push	{r7}
 8003756:	b083      	sub	sp, #12
 8003758:	af00      	add	r7, sp, #0
 800375a:	4603      	mov	r3, r0
 800375c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800375e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003762:	2b00      	cmp	r3, #0
 8003764:	db0c      	blt.n	8003780 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003766:	79fb      	ldrb	r3, [r7, #7]
 8003768:	f003 021f 	and.w	r2, r3, #31
 800376c:	4907      	ldr	r1, [pc, #28]	@ (800378c <__NVIC_ClearPendingIRQ+0x38>)
 800376e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003772:	095b      	lsrs	r3, r3, #5
 8003774:	2001      	movs	r0, #1
 8003776:	fa00 f202 	lsl.w	r2, r0, r2
 800377a:	3360      	adds	r3, #96	@ 0x60
 800377c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003780:	bf00      	nop
 8003782:	370c      	adds	r7, #12
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr
 800378c:	e000e100 	.word	0xe000e100

08003790 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003790:	b480      	push	{r7}
 8003792:	b083      	sub	sp, #12
 8003794:	af00      	add	r7, sp, #0
 8003796:	4603      	mov	r3, r0
 8003798:	6039      	str	r1, [r7, #0]
 800379a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800379c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	db0a      	blt.n	80037ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	b2da      	uxtb	r2, r3
 80037a8:	490c      	ldr	r1, [pc, #48]	@ (80037dc <__NVIC_SetPriority+0x4c>)
 80037aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ae:	0112      	lsls	r2, r2, #4
 80037b0:	b2d2      	uxtb	r2, r2
 80037b2:	440b      	add	r3, r1
 80037b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80037b8:	e00a      	b.n	80037d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	b2da      	uxtb	r2, r3
 80037be:	4908      	ldr	r1, [pc, #32]	@ (80037e0 <__NVIC_SetPriority+0x50>)
 80037c0:	79fb      	ldrb	r3, [r7, #7]
 80037c2:	f003 030f 	and.w	r3, r3, #15
 80037c6:	3b04      	subs	r3, #4
 80037c8:	0112      	lsls	r2, r2, #4
 80037ca:	b2d2      	uxtb	r2, r2
 80037cc:	440b      	add	r3, r1
 80037ce:	761a      	strb	r2, [r3, #24]
}
 80037d0:	bf00      	nop
 80037d2:	370c      	adds	r7, #12
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr
 80037dc:	e000e100 	.word	0xe000e100
 80037e0:	e000ed00 	.word	0xe000ed00

080037e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b089      	sub	sp, #36	@ 0x24
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	60f8      	str	r0, [r7, #12]
 80037ec:	60b9      	str	r1, [r7, #8]
 80037ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	f003 0307 	and.w	r3, r3, #7
 80037f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80037f8:	69fb      	ldr	r3, [r7, #28]
 80037fa:	f1c3 0307 	rsb	r3, r3, #7
 80037fe:	2b04      	cmp	r3, #4
 8003800:	bf28      	it	cs
 8003802:	2304      	movcs	r3, #4
 8003804:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	3304      	adds	r3, #4
 800380a:	2b06      	cmp	r3, #6
 800380c:	d902      	bls.n	8003814 <NVIC_EncodePriority+0x30>
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	3b03      	subs	r3, #3
 8003812:	e000      	b.n	8003816 <NVIC_EncodePriority+0x32>
 8003814:	2300      	movs	r3, #0
 8003816:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003818:	f04f 32ff 	mov.w	r2, #4294967295
 800381c:	69bb      	ldr	r3, [r7, #24]
 800381e:	fa02 f303 	lsl.w	r3, r2, r3
 8003822:	43da      	mvns	r2, r3
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	401a      	ands	r2, r3
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800382c:	f04f 31ff 	mov.w	r1, #4294967295
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	fa01 f303 	lsl.w	r3, r1, r3
 8003836:	43d9      	mvns	r1, r3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800383c:	4313      	orrs	r3, r2
         );
}
 800383e:	4618      	mov	r0, r3
 8003840:	3724      	adds	r7, #36	@ 0x24
 8003842:	46bd      	mov	sp, r7
 8003844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003848:	4770      	bx	lr
	...

0800384c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b082      	sub	sp, #8
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	3b01      	subs	r3, #1
 8003858:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800385c:	d301      	bcc.n	8003862 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800385e:	2301      	movs	r3, #1
 8003860:	e00f      	b.n	8003882 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003862:	4a0a      	ldr	r2, [pc, #40]	@ (800388c <SysTick_Config+0x40>)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	3b01      	subs	r3, #1
 8003868:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800386a:	210f      	movs	r1, #15
 800386c:	f04f 30ff 	mov.w	r0, #4294967295
 8003870:	f7ff ff8e 	bl	8003790 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003874:	4b05      	ldr	r3, [pc, #20]	@ (800388c <SysTick_Config+0x40>)
 8003876:	2200      	movs	r2, #0
 8003878:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800387a:	4b04      	ldr	r3, [pc, #16]	@ (800388c <SysTick_Config+0x40>)
 800387c:	2207      	movs	r2, #7
 800387e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003880:	2300      	movs	r3, #0
}
 8003882:	4618      	mov	r0, r3
 8003884:	3708      	adds	r7, #8
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}
 800388a:	bf00      	nop
 800388c:	e000e010 	.word	0xe000e010

08003890 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b082      	sub	sp, #8
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	f7ff fec9 	bl	8003630 <__NVIC_SetPriorityGrouping>
}
 800389e:	bf00      	nop
 80038a0:	3708      	adds	r7, #8
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}

080038a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038a6:	b580      	push	{r7, lr}
 80038a8:	b086      	sub	sp, #24
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	4603      	mov	r3, r0
 80038ae:	60b9      	str	r1, [r7, #8]
 80038b0:	607a      	str	r2, [r7, #4]
 80038b2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80038b4:	f7ff fee0 	bl	8003678 <__NVIC_GetPriorityGrouping>
 80038b8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038ba:	687a      	ldr	r2, [r7, #4]
 80038bc:	68b9      	ldr	r1, [r7, #8]
 80038be:	6978      	ldr	r0, [r7, #20]
 80038c0:	f7ff ff90 	bl	80037e4 <NVIC_EncodePriority>
 80038c4:	4602      	mov	r2, r0
 80038c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038ca:	4611      	mov	r1, r2
 80038cc:	4618      	mov	r0, r3
 80038ce:	f7ff ff5f 	bl	8003790 <__NVIC_SetPriority>
}
 80038d2:	bf00      	nop
 80038d4:	3718      	adds	r7, #24
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}

080038da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038da:	b580      	push	{r7, lr}
 80038dc:	b082      	sub	sp, #8
 80038de:	af00      	add	r7, sp, #0
 80038e0:	4603      	mov	r3, r0
 80038e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80038e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038e8:	4618      	mov	r0, r3
 80038ea:	f7ff fed3 	bl	8003694 <__NVIC_EnableIRQ>
}
 80038ee:	bf00      	nop
 80038f0:	3708      	adds	r7, #8
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}

080038f6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80038f6:	b580      	push	{r7, lr}
 80038f8:	b082      	sub	sp, #8
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	4603      	mov	r3, r0
 80038fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003900:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003904:	4618      	mov	r0, r3
 8003906:	f7ff fee3 	bl	80036d0 <__NVIC_DisableIRQ>
}
 800390a:	bf00      	nop
 800390c:	3708      	adds	r7, #8
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}

08003912 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003912:	b580      	push	{r7, lr}
 8003914:	b082      	sub	sp, #8
 8003916:	af00      	add	r7, sp, #0
 8003918:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f7ff ff96 	bl	800384c <SysTick_Config>
 8003920:	4603      	mov	r3, r0
}
 8003922:	4618      	mov	r0, r3
 8003924:	3708      	adds	r7, #8
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}

0800392a <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 800392a:	b580      	push	{r7, lr}
 800392c:	b082      	sub	sp, #8
 800392e:	af00      	add	r7, sp, #0
 8003930:	4603      	mov	r3, r0
 8003932:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8003934:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003938:	4618      	mov	r0, r3
 800393a:	f7ff feed 	bl	8003718 <__NVIC_SetPendingIRQ>
}
 800393e:	bf00      	nop
 8003940:	3708      	adds	r7, #8
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}

08003946 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003946:	b580      	push	{r7, lr}
 8003948:	b082      	sub	sp, #8
 800394a:	af00      	add	r7, sp, #0
 800394c:	4603      	mov	r3, r0
 800394e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8003950:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003954:	4618      	mov	r0, r3
 8003956:	f7ff fefd 	bl	8003754 <__NVIC_ClearPendingIRQ>
}
 800395a:	bf00      	nop
 800395c:	3708      	adds	r7, #8
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}
	...

08003964 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b084      	sub	sp, #16
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d101      	bne.n	8003976 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	e08e      	b.n	8003a94 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	461a      	mov	r2, r3
 800397c:	4b47      	ldr	r3, [pc, #284]	@ (8003a9c <HAL_DMA_Init+0x138>)
 800397e:	429a      	cmp	r2, r3
 8003980:	d80f      	bhi.n	80039a2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	461a      	mov	r2, r3
 8003988:	4b45      	ldr	r3, [pc, #276]	@ (8003aa0 <HAL_DMA_Init+0x13c>)
 800398a:	4413      	add	r3, r2
 800398c:	4a45      	ldr	r2, [pc, #276]	@ (8003aa4 <HAL_DMA_Init+0x140>)
 800398e:	fba2 2303 	umull	r2, r3, r2, r3
 8003992:	091b      	lsrs	r3, r3, #4
 8003994:	009a      	lsls	r2, r3, #2
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	4a42      	ldr	r2, [pc, #264]	@ (8003aa8 <HAL_DMA_Init+0x144>)
 800399e:	641a      	str	r2, [r3, #64]	@ 0x40
 80039a0:	e00e      	b.n	80039c0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	461a      	mov	r2, r3
 80039a8:	4b40      	ldr	r3, [pc, #256]	@ (8003aac <HAL_DMA_Init+0x148>)
 80039aa:	4413      	add	r3, r2
 80039ac:	4a3d      	ldr	r2, [pc, #244]	@ (8003aa4 <HAL_DMA_Init+0x140>)
 80039ae:	fba2 2303 	umull	r2, r3, r2, r3
 80039b2:	091b      	lsrs	r3, r3, #4
 80039b4:	009a      	lsls	r2, r3, #2
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	4a3c      	ldr	r2, [pc, #240]	@ (8003ab0 <HAL_DMA_Init+0x14c>)
 80039be:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2202      	movs	r2, #2
 80039c4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80039d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039da:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80039e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	691b      	ldr	r3, [r3, #16]
 80039ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	699b      	ldr	r3, [r3, #24]
 80039f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6a1b      	ldr	r3, [r3, #32]
 8003a02:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003a04:	68fa      	ldr	r2, [r7, #12]
 8003a06:	4313      	orrs	r3, r2
 8003a08:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	68fa      	ldr	r2, [r7, #12]
 8003a10:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f000 fa74 	bl	8003f00 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003a20:	d102      	bne.n	8003a28 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2200      	movs	r2, #0
 8003a26:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	685a      	ldr	r2, [r3, #4]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a30:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8003a34:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003a3e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d010      	beq.n	8003a6a <HAL_DMA_Init+0x106>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	2b04      	cmp	r3, #4
 8003a4e:	d80c      	bhi.n	8003a6a <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	f000 fa93 	bl	8003f7c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a62:	687a      	ldr	r2, [r7, #4]
 8003a64:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003a66:	605a      	str	r2, [r3, #4]
 8003a68:	e008      	b.n	8003a7c <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2200      	movs	r2, #0
 8003a74:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2201      	movs	r2, #1
 8003a86:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003a92:	2300      	movs	r3, #0
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	3710      	adds	r7, #16
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}
 8003a9c:	40020407 	.word	0x40020407
 8003aa0:	bffdfff8 	.word	0xbffdfff8
 8003aa4:	cccccccd 	.word	0xcccccccd
 8003aa8:	40020000 	.word	0x40020000
 8003aac:	bffdfbf8 	.word	0xbffdfbf8
 8003ab0:	40020400 	.word	0x40020400

08003ab4 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b086      	sub	sp, #24
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	60f8      	str	r0, [r7, #12]
 8003abc:	60b9      	str	r1, [r7, #8]
 8003abe:	607a      	str	r2, [r7, #4]
 8003ac0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	d101      	bne.n	8003ad4 <HAL_DMA_Start_IT+0x20>
 8003ad0:	2302      	movs	r3, #2
 8003ad2:	e066      	b.n	8003ba2 <HAL_DMA_Start_IT+0xee>
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003ae2:	b2db      	uxtb	r3, r3
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d155      	bne.n	8003b94 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2202      	movs	r2, #2
 8003aec:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2200      	movs	r2, #0
 8003af4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f022 0201 	bic.w	r2, r2, #1
 8003b04:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	687a      	ldr	r2, [r7, #4]
 8003b0a:	68b9      	ldr	r1, [r7, #8]
 8003b0c:	68f8      	ldr	r0, [r7, #12]
 8003b0e:	f000 f9b9 	bl	8003e84 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d008      	beq.n	8003b2c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f042 020e 	orr.w	r2, r2, #14
 8003b28:	601a      	str	r2, [r3, #0]
 8003b2a:	e00f      	b.n	8003b4c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f022 0204 	bic.w	r2, r2, #4
 8003b3a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f042 020a 	orr.w	r2, r2, #10
 8003b4a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d007      	beq.n	8003b6a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b64:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b68:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d007      	beq.n	8003b82 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b7c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b80:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f042 0201 	orr.w	r2, r2, #1
 8003b90:	601a      	str	r2, [r3, #0]
 8003b92:	e005      	b.n	8003ba0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2200      	movs	r2, #0
 8003b98:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003b9c:	2302      	movs	r3, #2
 8003b9e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003ba0:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3718      	adds	r7, #24
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}

08003baa <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003baa:	b480      	push	{r7}
 8003bac:	b083      	sub	sp, #12
 8003bae:	af00      	add	r7, sp, #0
 8003bb0:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d101      	bne.n	8003bbc <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e04f      	b.n	8003c5c <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	2b02      	cmp	r3, #2
 8003bc6:	d008      	beq.n	8003bda <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2204      	movs	r2, #4
 8003bcc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e040      	b.n	8003c5c <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f022 020e 	bic.w	r2, r2, #14
 8003be8:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bf4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003bf8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f022 0201 	bic.w	r2, r2, #1
 8003c08:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c0e:	f003 021c 	and.w	r2, r3, #28
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c16:	2101      	movs	r1, #1
 8003c18:	fa01 f202 	lsl.w	r2, r1, r2
 8003c1c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c22:	687a      	ldr	r2, [r7, #4]
 8003c24:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003c26:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d00c      	beq.n	8003c4a <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c3a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003c3e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c44:	687a      	ldr	r2, [r7, #4]
 8003c46:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003c48:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2200      	movs	r2, #0
 8003c56:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 8003c5a:	2300      	movs	r3, #0
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	370c      	adds	r7, #12
 8003c60:	46bd      	mov	sp, r7
 8003c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c66:	4770      	bx	lr

08003c68 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b084      	sub	sp, #16
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c70:	2300      	movs	r3, #0
 8003c72:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003c7a:	b2db      	uxtb	r3, r3
 8003c7c:	2b02      	cmp	r3, #2
 8003c7e:	d005      	beq.n	8003c8c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2204      	movs	r2, #4
 8003c84:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	73fb      	strb	r3, [r7, #15]
 8003c8a:	e047      	b.n	8003d1c <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f022 020e 	bic.w	r2, r2, #14
 8003c9a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f022 0201 	bic.w	r2, r2, #1
 8003caa:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003cb6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003cba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cc0:	f003 021c 	and.w	r2, r3, #28
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cc8:	2101      	movs	r1, #1
 8003cca:	fa01 f202 	lsl.w	r2, r1, r2
 8003cce:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cd4:	687a      	ldr	r2, [r7, #4]
 8003cd6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003cd8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d00c      	beq.n	8003cfc <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003cf0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cf6:	687a      	ldr	r2, [r7, #4]
 8003cf8:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003cfa:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2201      	movs	r2, #1
 8003d00:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2200      	movs	r2, #0
 8003d08:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d003      	beq.n	8003d1c <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d18:	6878      	ldr	r0, [r7, #4]
 8003d1a:	4798      	blx	r3
    }
  }
  return status;
 8003d1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3710      	adds	r7, #16
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}

08003d26 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003d26:	b580      	push	{r7, lr}
 8003d28:	b084      	sub	sp, #16
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d42:	f003 031c 	and.w	r3, r3, #28
 8003d46:	2204      	movs	r2, #4
 8003d48:	409a      	lsls	r2, r3
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d026      	beq.n	8003da0 <HAL_DMA_IRQHandler+0x7a>
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	f003 0304 	and.w	r3, r3, #4
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d021      	beq.n	8003da0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 0320 	and.w	r3, r3, #32
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d107      	bne.n	8003d7a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f022 0204 	bic.w	r2, r2, #4
 8003d78:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d7e:	f003 021c 	and.w	r2, r3, #28
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d86:	2104      	movs	r1, #4
 8003d88:	fa01 f202 	lsl.w	r2, r1, r2
 8003d8c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d071      	beq.n	8003e7a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003d9e:	e06c      	b.n	8003e7a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003da4:	f003 031c 	and.w	r3, r3, #28
 8003da8:	2202      	movs	r2, #2
 8003daa:	409a      	lsls	r2, r3
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	4013      	ands	r3, r2
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d02e      	beq.n	8003e12 <HAL_DMA_IRQHandler+0xec>
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	f003 0302 	and.w	r3, r3, #2
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d029      	beq.n	8003e12 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 0320 	and.w	r3, r3, #32
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d10b      	bne.n	8003de4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f022 020a 	bic.w	r2, r2, #10
 8003dda:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2201      	movs	r2, #1
 8003de0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003de8:	f003 021c 	and.w	r2, r3, #28
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003df0:	2102      	movs	r1, #2
 8003df2:	fa01 f202 	lsl.w	r2, r1, r2
 8003df6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d038      	beq.n	8003e7a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003e10:	e033      	b.n	8003e7a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e16:	f003 031c 	and.w	r3, r3, #28
 8003e1a:	2208      	movs	r2, #8
 8003e1c:	409a      	lsls	r2, r3
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	4013      	ands	r3, r2
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d02a      	beq.n	8003e7c <HAL_DMA_IRQHandler+0x156>
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	f003 0308 	and.w	r3, r3, #8
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d025      	beq.n	8003e7c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f022 020e 	bic.w	r2, r2, #14
 8003e3e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e44:	f003 021c 	and.w	r2, r3, #28
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e4c:	2101      	movs	r1, #1
 8003e4e:	fa01 f202 	lsl.w	r2, r1, r2
 8003e52:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2201      	movs	r2, #1
 8003e58:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2200      	movs	r2, #0
 8003e66:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d004      	beq.n	8003e7c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003e7a:	bf00      	nop
 8003e7c:	bf00      	nop
}
 8003e7e:	3710      	adds	r7, #16
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}

08003e84 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b085      	sub	sp, #20
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	60f8      	str	r0, [r7, #12]
 8003e8c:	60b9      	str	r1, [r7, #8]
 8003e8e:	607a      	str	r2, [r7, #4]
 8003e90:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e96:	68fa      	ldr	r2, [r7, #12]
 8003e98:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003e9a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d004      	beq.n	8003eae <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ea8:	68fa      	ldr	r2, [r7, #12]
 8003eaa:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003eac:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eb2:	f003 021c 	and.w	r2, r3, #28
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eba:	2101      	movs	r1, #1
 8003ebc:	fa01 f202 	lsl.w	r2, r1, r2
 8003ec0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	683a      	ldr	r2, [r7, #0]
 8003ec8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	2b10      	cmp	r3, #16
 8003ed0:	d108      	bne.n	8003ee4 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	687a      	ldr	r2, [r7, #4]
 8003ed8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	68ba      	ldr	r2, [r7, #8]
 8003ee0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003ee2:	e007      	b.n	8003ef4 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	68ba      	ldr	r2, [r7, #8]
 8003eea:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	687a      	ldr	r2, [r7, #4]
 8003ef2:	60da      	str	r2, [r3, #12]
}
 8003ef4:	bf00      	nop
 8003ef6:	3714      	adds	r7, #20
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efe:	4770      	bx	lr

08003f00 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b085      	sub	sp, #20
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	461a      	mov	r2, r3
 8003f0e:	4b17      	ldr	r3, [pc, #92]	@ (8003f6c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d80a      	bhi.n	8003f2a <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f18:	089b      	lsrs	r3, r3, #2
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003f20:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8003f24:	687a      	ldr	r2, [r7, #4]
 8003f26:	6493      	str	r3, [r2, #72]	@ 0x48
 8003f28:	e007      	b.n	8003f3a <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f2e:	089b      	lsrs	r3, r3, #2
 8003f30:	009a      	lsls	r2, r3, #2
 8003f32:	4b0f      	ldr	r3, [pc, #60]	@ (8003f70 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003f34:	4413      	add	r3, r2
 8003f36:	687a      	ldr	r2, [r7, #4]
 8003f38:	6493      	str	r3, [r2, #72]	@ 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	b2db      	uxtb	r3, r3
 8003f40:	3b08      	subs	r3, #8
 8003f42:	4a0c      	ldr	r2, [pc, #48]	@ (8003f74 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003f44:	fba2 2303 	umull	r2, r3, r2, r3
 8003f48:	091b      	lsrs	r3, r3, #4
 8003f4a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	4a0a      	ldr	r2, [pc, #40]	@ (8003f78 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003f50:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	f003 031f 	and.w	r3, r3, #31
 8003f58:	2201      	movs	r2, #1
 8003f5a:	409a      	lsls	r2, r3
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003f60:	bf00      	nop
 8003f62:	3714      	adds	r7, #20
 8003f64:	46bd      	mov	sp, r7
 8003f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6a:	4770      	bx	lr
 8003f6c:	40020407 	.word	0x40020407
 8003f70:	4002081c 	.word	0x4002081c
 8003f74:	cccccccd 	.word	0xcccccccd
 8003f78:	40020880 	.word	0x40020880

08003f7c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b085      	sub	sp, #20
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003f8c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003f8e:	68fa      	ldr	r2, [r7, #12]
 8003f90:	4b0b      	ldr	r3, [pc, #44]	@ (8003fc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003f92:	4413      	add	r3, r2
 8003f94:	009b      	lsls	r3, r3, #2
 8003f96:	461a      	mov	r2, r3
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	4a09      	ldr	r2, [pc, #36]	@ (8003fc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8003fa0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	3b01      	subs	r3, #1
 8003fa6:	f003 0303 	and.w	r3, r3, #3
 8003faa:	2201      	movs	r2, #1
 8003fac:	409a      	lsls	r2, r3
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8003fb2:	bf00      	nop
 8003fb4:	3714      	adds	r7, #20
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr
 8003fbe:	bf00      	nop
 8003fc0:	1000823f 	.word	0x1000823f
 8003fc4:	40020940 	.word	0x40020940

08003fc8 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b087      	sub	sp, #28
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
 8003fd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003fd6:	e14c      	b.n	8004272 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	2101      	movs	r1, #1
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	fa01 f303 	lsl.w	r3, r1, r3
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	f000 813e 	beq.w	800426c <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	f003 0303 	and.w	r3, r3, #3
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d005      	beq.n	8004008 <HAL_GPIO_Init+0x40>
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	f003 0303 	and.w	r3, r3, #3
 8004004:	2b02      	cmp	r3, #2
 8004006:	d130      	bne.n	800406a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	005b      	lsls	r3, r3, #1
 8004012:	2203      	movs	r2, #3
 8004014:	fa02 f303 	lsl.w	r3, r2, r3
 8004018:	43db      	mvns	r3, r3
 800401a:	693a      	ldr	r2, [r7, #16]
 800401c:	4013      	ands	r3, r2
 800401e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	68da      	ldr	r2, [r3, #12]
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	005b      	lsls	r3, r3, #1
 8004028:	fa02 f303 	lsl.w	r3, r2, r3
 800402c:	693a      	ldr	r2, [r7, #16]
 800402e:	4313      	orrs	r3, r2
 8004030:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	693a      	ldr	r2, [r7, #16]
 8004036:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800403e:	2201      	movs	r2, #1
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	fa02 f303 	lsl.w	r3, r2, r3
 8004046:	43db      	mvns	r3, r3
 8004048:	693a      	ldr	r2, [r7, #16]
 800404a:	4013      	ands	r3, r2
 800404c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	091b      	lsrs	r3, r3, #4
 8004054:	f003 0201 	and.w	r2, r3, #1
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	fa02 f303 	lsl.w	r3, r2, r3
 800405e:	693a      	ldr	r2, [r7, #16]
 8004060:	4313      	orrs	r3, r2
 8004062:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	693a      	ldr	r2, [r7, #16]
 8004068:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	f003 0303 	and.w	r3, r3, #3
 8004072:	2b03      	cmp	r3, #3
 8004074:	d017      	beq.n	80040a6 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	68db      	ldr	r3, [r3, #12]
 800407a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	005b      	lsls	r3, r3, #1
 8004080:	2203      	movs	r2, #3
 8004082:	fa02 f303 	lsl.w	r3, r2, r3
 8004086:	43db      	mvns	r3, r3
 8004088:	693a      	ldr	r2, [r7, #16]
 800408a:	4013      	ands	r3, r2
 800408c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	689a      	ldr	r2, [r3, #8]
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	005b      	lsls	r3, r3, #1
 8004096:	fa02 f303 	lsl.w	r3, r2, r3
 800409a:	693a      	ldr	r2, [r7, #16]
 800409c:	4313      	orrs	r3, r2
 800409e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	693a      	ldr	r2, [r7, #16]
 80040a4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	f003 0303 	and.w	r3, r3, #3
 80040ae:	2b02      	cmp	r3, #2
 80040b0:	d123      	bne.n	80040fa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	08da      	lsrs	r2, r3, #3
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	3208      	adds	r2, #8
 80040ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040be:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	f003 0307 	and.w	r3, r3, #7
 80040c6:	009b      	lsls	r3, r3, #2
 80040c8:	220f      	movs	r2, #15
 80040ca:	fa02 f303 	lsl.w	r3, r2, r3
 80040ce:	43db      	mvns	r3, r3
 80040d0:	693a      	ldr	r2, [r7, #16]
 80040d2:	4013      	ands	r3, r2
 80040d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	691a      	ldr	r2, [r3, #16]
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	f003 0307 	and.w	r3, r3, #7
 80040e0:	009b      	lsls	r3, r3, #2
 80040e2:	fa02 f303 	lsl.w	r3, r2, r3
 80040e6:	693a      	ldr	r2, [r7, #16]
 80040e8:	4313      	orrs	r3, r2
 80040ea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	08da      	lsrs	r2, r3, #3
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	3208      	adds	r2, #8
 80040f4:	6939      	ldr	r1, [r7, #16]
 80040f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	005b      	lsls	r3, r3, #1
 8004104:	2203      	movs	r2, #3
 8004106:	fa02 f303 	lsl.w	r3, r2, r3
 800410a:	43db      	mvns	r3, r3
 800410c:	693a      	ldr	r2, [r7, #16]
 800410e:	4013      	ands	r3, r2
 8004110:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	f003 0203 	and.w	r2, r3, #3
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	005b      	lsls	r3, r3, #1
 800411e:	fa02 f303 	lsl.w	r3, r2, r3
 8004122:	693a      	ldr	r2, [r7, #16]
 8004124:	4313      	orrs	r3, r2
 8004126:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	693a      	ldr	r2, [r7, #16]
 800412c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004136:	2b00      	cmp	r3, #0
 8004138:	f000 8098 	beq.w	800426c <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 800413c:	4a54      	ldr	r2, [pc, #336]	@ (8004290 <HAL_GPIO_Init+0x2c8>)
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	089b      	lsrs	r3, r3, #2
 8004142:	3302      	adds	r3, #2
 8004144:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004148:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	f003 0303 	and.w	r3, r3, #3
 8004150:	009b      	lsls	r3, r3, #2
 8004152:	220f      	movs	r2, #15
 8004154:	fa02 f303 	lsl.w	r3, r2, r3
 8004158:	43db      	mvns	r3, r3
 800415a:	693a      	ldr	r2, [r7, #16]
 800415c:	4013      	ands	r3, r2
 800415e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004166:	d019      	beq.n	800419c <HAL_GPIO_Init+0x1d4>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	4a4a      	ldr	r2, [pc, #296]	@ (8004294 <HAL_GPIO_Init+0x2cc>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d013      	beq.n	8004198 <HAL_GPIO_Init+0x1d0>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	4a49      	ldr	r2, [pc, #292]	@ (8004298 <HAL_GPIO_Init+0x2d0>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d00d      	beq.n	8004194 <HAL_GPIO_Init+0x1cc>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	4a48      	ldr	r2, [pc, #288]	@ (800429c <HAL_GPIO_Init+0x2d4>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d007      	beq.n	8004190 <HAL_GPIO_Init+0x1c8>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	4a47      	ldr	r2, [pc, #284]	@ (80042a0 <HAL_GPIO_Init+0x2d8>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d101      	bne.n	800418c <HAL_GPIO_Init+0x1c4>
 8004188:	2304      	movs	r3, #4
 800418a:	e008      	b.n	800419e <HAL_GPIO_Init+0x1d6>
 800418c:	2307      	movs	r3, #7
 800418e:	e006      	b.n	800419e <HAL_GPIO_Init+0x1d6>
 8004190:	2303      	movs	r3, #3
 8004192:	e004      	b.n	800419e <HAL_GPIO_Init+0x1d6>
 8004194:	2302      	movs	r3, #2
 8004196:	e002      	b.n	800419e <HAL_GPIO_Init+0x1d6>
 8004198:	2301      	movs	r3, #1
 800419a:	e000      	b.n	800419e <HAL_GPIO_Init+0x1d6>
 800419c:	2300      	movs	r3, #0
 800419e:	697a      	ldr	r2, [r7, #20]
 80041a0:	f002 0203 	and.w	r2, r2, #3
 80041a4:	0092      	lsls	r2, r2, #2
 80041a6:	4093      	lsls	r3, r2
 80041a8:	693a      	ldr	r2, [r7, #16]
 80041aa:	4313      	orrs	r3, r2
 80041ac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80041ae:	4938      	ldr	r1, [pc, #224]	@ (8004290 <HAL_GPIO_Init+0x2c8>)
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	089b      	lsrs	r3, r3, #2
 80041b4:	3302      	adds	r3, #2
 80041b6:	693a      	ldr	r2, [r7, #16]
 80041b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80041bc:	4b39      	ldr	r3, [pc, #228]	@ (80042a4 <HAL_GPIO_Init+0x2dc>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	43db      	mvns	r3, r3
 80041c6:	693a      	ldr	r2, [r7, #16]
 80041c8:	4013      	ands	r3, r2
 80041ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d003      	beq.n	80041e0 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80041d8:	693a      	ldr	r2, [r7, #16]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	4313      	orrs	r3, r2
 80041de:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80041e0:	4a30      	ldr	r2, [pc, #192]	@ (80042a4 <HAL_GPIO_Init+0x2dc>)
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80041e6:	4b2f      	ldr	r3, [pc, #188]	@ (80042a4 <HAL_GPIO_Init+0x2dc>)
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	43db      	mvns	r3, r3
 80041f0:	693a      	ldr	r2, [r7, #16]
 80041f2:	4013      	ands	r3, r2
 80041f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d003      	beq.n	800420a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8004202:	693a      	ldr	r2, [r7, #16]
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	4313      	orrs	r3, r2
 8004208:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800420a:	4a26      	ldr	r2, [pc, #152]	@ (80042a4 <HAL_GPIO_Init+0x2dc>)
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004210:	4b24      	ldr	r3, [pc, #144]	@ (80042a4 <HAL_GPIO_Init+0x2dc>)
 8004212:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004216:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	43db      	mvns	r3, r3
 800421c:	693a      	ldr	r2, [r7, #16]
 800421e:	4013      	ands	r3, r2
 8004220:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800422a:	2b00      	cmp	r3, #0
 800422c:	d003      	beq.n	8004236 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800422e:	693a      	ldr	r2, [r7, #16]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	4313      	orrs	r3, r2
 8004234:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004236:	4a1b      	ldr	r2, [pc, #108]	@ (80042a4 <HAL_GPIO_Init+0x2dc>)
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 800423e:	4b19      	ldr	r3, [pc, #100]	@ (80042a4 <HAL_GPIO_Init+0x2dc>)
 8004240:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004244:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	43db      	mvns	r3, r3
 800424a:	693a      	ldr	r2, [r7, #16]
 800424c:	4013      	ands	r3, r2
 800424e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004258:	2b00      	cmp	r3, #0
 800425a:	d003      	beq.n	8004264 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 800425c:	693a      	ldr	r2, [r7, #16]
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	4313      	orrs	r3, r2
 8004262:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004264:	4a0f      	ldr	r2, [pc, #60]	@ (80042a4 <HAL_GPIO_Init+0x2dc>)
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	3301      	adds	r3, #1
 8004270:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	fa22 f303 	lsr.w	r3, r2, r3
 800427c:	2b00      	cmp	r3, #0
 800427e:	f47f aeab 	bne.w	8003fd8 <HAL_GPIO_Init+0x10>
  }
}
 8004282:	bf00      	nop
 8004284:	bf00      	nop
 8004286:	371c      	adds	r7, #28
 8004288:	46bd      	mov	sp, r7
 800428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428e:	4770      	bx	lr
 8004290:	40010000 	.word	0x40010000
 8004294:	48000400 	.word	0x48000400
 8004298:	48000800 	.word	0x48000800
 800429c:	48000c00 	.word	0x48000c00
 80042a0:	48001000 	.word	0x48001000
 80042a4:	58000800 	.word	0x58000800

080042a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b083      	sub	sp, #12
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
 80042b0:	460b      	mov	r3, r1
 80042b2:	807b      	strh	r3, [r7, #2]
 80042b4:	4613      	mov	r3, r2
 80042b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80042b8:	787b      	ldrb	r3, [r7, #1]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d003      	beq.n	80042c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80042be:	887a      	ldrh	r2, [r7, #2]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80042c4:	e002      	b.n	80042cc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80042c6:	887a      	ldrh	r2, [r7, #2]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80042cc:	bf00      	nop
 80042ce:	370c      	adds	r7, #12
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr

080042d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b082      	sub	sp, #8
 80042dc:	af00      	add	r7, sp, #0
 80042de:	4603      	mov	r3, r0
 80042e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80042e2:	4b08      	ldr	r3, [pc, #32]	@ (8004304 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80042e4:	68da      	ldr	r2, [r3, #12]
 80042e6:	88fb      	ldrh	r3, [r7, #6]
 80042e8:	4013      	ands	r3, r2
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d006      	beq.n	80042fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80042ee:	4a05      	ldr	r2, [pc, #20]	@ (8004304 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80042f0:	88fb      	ldrh	r3, [r7, #6]
 80042f2:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80042f4:	88fb      	ldrh	r3, [r7, #6]
 80042f6:	4618      	mov	r0, r3
 80042f8:	f7fd fa65 	bl	80017c6 <HAL_GPIO_EXTI_Callback>
  }
}
 80042fc:	bf00      	nop
 80042fe:	3708      	adds	r7, #8
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}
 8004304:	58000800 	.word	0x58000800

08004308 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b082      	sub	sp, #8
 800430c:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 800430e:	4b0a      	ldr	r3, [pc, #40]	@ (8004338 <HAL_HSEM_IRQHandler+0x30>)
 8004310:	68db      	ldr	r3, [r3, #12]
 8004312:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8004314:	4b08      	ldr	r3, [pc, #32]	@ (8004338 <HAL_HSEM_IRQHandler+0x30>)
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	43db      	mvns	r3, r3
 800431c:	4906      	ldr	r1, [pc, #24]	@ (8004338 <HAL_HSEM_IRQHandler+0x30>)
 800431e:	4013      	ands	r3, r2
 8004320:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8004322:	4a05      	ldr	r2, [pc, #20]	@ (8004338 <HAL_HSEM_IRQHandler+0x30>)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	f000 f807 	bl	800433c <HAL_HSEM_FreeCallback>
}
 800432e:	bf00      	nop
 8004330:	3708      	adds	r7, #8
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}
 8004336:	bf00      	nop
 8004338:	58001500 	.word	0x58001500

0800433c <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 800433c:	b480      	push	{r7}
 800433e:	b083      	sub	sp, #12
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8004344:	bf00      	nop
 8004346:	370c      	adds	r7, #12
 8004348:	46bd      	mov	sp, r7
 800434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434e:	4770      	bx	lr

08004350 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b082      	sub	sp, #8
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d101      	bne.n	8004362 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	e08d      	b.n	800447e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004368:	b2db      	uxtb	r3, r3
 800436a:	2b00      	cmp	r3, #0
 800436c:	d106      	bne.n	800437c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2200      	movs	r2, #0
 8004372:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f000 f885 	bl	8004486 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2224      	movs	r2, #36	@ 0x24
 8004380:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f022 0201 	bic.w	r2, r2, #1
 8004392:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	685a      	ldr	r2, [r3, #4]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80043a0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	689a      	ldr	r2, [r3, #8]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80043b0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	68db      	ldr	r3, [r3, #12]
 80043b6:	2b01      	cmp	r3, #1
 80043b8:	d107      	bne.n	80043ca <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	689a      	ldr	r2, [r3, #8]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80043c6:	609a      	str	r2, [r3, #8]
 80043c8:	e006      	b.n	80043d8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	689a      	ldr	r2, [r3, #8]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80043d6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	68db      	ldr	r3, [r3, #12]
 80043dc:	2b02      	cmp	r3, #2
 80043de:	d108      	bne.n	80043f2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	685a      	ldr	r2, [r3, #4]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80043ee:	605a      	str	r2, [r3, #4]
 80043f0:	e007      	b.n	8004402 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	685a      	ldr	r2, [r3, #4]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004400:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	687a      	ldr	r2, [r7, #4]
 800440a:	6812      	ldr	r2, [r2, #0]
 800440c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004410:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004414:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	68da      	ldr	r2, [r3, #12]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004424:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	691a      	ldr	r2, [r3, #16]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	695b      	ldr	r3, [r3, #20]
 800442e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	699b      	ldr	r3, [r3, #24]
 8004436:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	430a      	orrs	r2, r1
 800443e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	69d9      	ldr	r1, [r3, #28]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6a1a      	ldr	r2, [r3, #32]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	430a      	orrs	r2, r1
 800444e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	681a      	ldr	r2, [r3, #0]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f042 0201 	orr.w	r2, r2, #1
 800445e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2200      	movs	r2, #0
 8004464:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2220      	movs	r2, #32
 800446a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2200      	movs	r2, #0
 8004472:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2200      	movs	r2, #0
 8004478:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800447c:	2300      	movs	r3, #0
}
 800447e:	4618      	mov	r0, r3
 8004480:	3708      	adds	r7, #8
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}

08004486 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8004486:	b480      	push	{r7}
 8004488:	b083      	sub	sp, #12
 800448a:	af00      	add	r7, sp, #0
 800448c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800448e:	bf00      	nop
 8004490:	370c      	adds	r7, #12
 8004492:	46bd      	mov	sp, r7
 8004494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004498:	4770      	bx	lr
	...

0800449c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b088      	sub	sp, #32
 80044a0:	af02      	add	r7, sp, #8
 80044a2:	60f8      	str	r0, [r7, #12]
 80044a4:	4608      	mov	r0, r1
 80044a6:	4611      	mov	r1, r2
 80044a8:	461a      	mov	r2, r3
 80044aa:	4603      	mov	r3, r0
 80044ac:	817b      	strh	r3, [r7, #10]
 80044ae:	460b      	mov	r3, r1
 80044b0:	813b      	strh	r3, [r7, #8]
 80044b2:	4613      	mov	r3, r2
 80044b4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80044bc:	b2db      	uxtb	r3, r3
 80044be:	2b20      	cmp	r3, #32
 80044c0:	f040 80f9 	bne.w	80046b6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80044c4:	6a3b      	ldr	r3, [r7, #32]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d002      	beq.n	80044d0 <HAL_I2C_Mem_Write+0x34>
 80044ca:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d105      	bne.n	80044dc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80044d6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80044d8:	2301      	movs	r3, #1
 80044da:	e0ed      	b.n	80046b8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	d101      	bne.n	80044ea <HAL_I2C_Mem_Write+0x4e>
 80044e6:	2302      	movs	r3, #2
 80044e8:	e0e6      	b.n	80046b8 <HAL_I2C_Mem_Write+0x21c>
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2201      	movs	r2, #1
 80044ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80044f2:	f7ff f879 	bl	80035e8 <HAL_GetTick>
 80044f6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	9300      	str	r3, [sp, #0]
 80044fc:	2319      	movs	r3, #25
 80044fe:	2201      	movs	r2, #1
 8004500:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004504:	68f8      	ldr	r0, [r7, #12]
 8004506:	f000 fac3 	bl	8004a90 <I2C_WaitOnFlagUntilTimeout>
 800450a:	4603      	mov	r3, r0
 800450c:	2b00      	cmp	r3, #0
 800450e:	d001      	beq.n	8004514 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	e0d1      	b.n	80046b8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2221      	movs	r2, #33	@ 0x21
 8004518:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2240      	movs	r2, #64	@ 0x40
 8004520:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2200      	movs	r2, #0
 8004528:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	6a3a      	ldr	r2, [r7, #32]
 800452e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004534:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2200      	movs	r2, #0
 800453a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800453c:	88f8      	ldrh	r0, [r7, #6]
 800453e:	893a      	ldrh	r2, [r7, #8]
 8004540:	8979      	ldrh	r1, [r7, #10]
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	9301      	str	r3, [sp, #4]
 8004546:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004548:	9300      	str	r3, [sp, #0]
 800454a:	4603      	mov	r3, r0
 800454c:	68f8      	ldr	r0, [r7, #12]
 800454e:	f000 f9d3 	bl	80048f8 <I2C_RequestMemoryWrite>
 8004552:	4603      	mov	r3, r0
 8004554:	2b00      	cmp	r3, #0
 8004556:	d005      	beq.n	8004564 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2200      	movs	r2, #0
 800455c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	e0a9      	b.n	80046b8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004568:	b29b      	uxth	r3, r3
 800456a:	2bff      	cmp	r3, #255	@ 0xff
 800456c:	d90e      	bls.n	800458c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	22ff      	movs	r2, #255	@ 0xff
 8004572:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004578:	b2da      	uxtb	r2, r3
 800457a:	8979      	ldrh	r1, [r7, #10]
 800457c:	2300      	movs	r3, #0
 800457e:	9300      	str	r3, [sp, #0]
 8004580:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004584:	68f8      	ldr	r0, [r7, #12]
 8004586:	f000 fc47 	bl	8004e18 <I2C_TransferConfig>
 800458a:	e00f      	b.n	80045ac <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004590:	b29a      	uxth	r2, r3
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800459a:	b2da      	uxtb	r2, r3
 800459c:	8979      	ldrh	r1, [r7, #10]
 800459e:	2300      	movs	r3, #0
 80045a0:	9300      	str	r3, [sp, #0]
 80045a2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80045a6:	68f8      	ldr	r0, [r7, #12]
 80045a8:	f000 fc36 	bl	8004e18 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045ac:	697a      	ldr	r2, [r7, #20]
 80045ae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80045b0:	68f8      	ldr	r0, [r7, #12]
 80045b2:	f000 fac6 	bl	8004b42 <I2C_WaitOnTXISFlagUntilTimeout>
 80045b6:	4603      	mov	r3, r0
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d001      	beq.n	80045c0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	e07b      	b.n	80046b8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045c4:	781a      	ldrb	r2, [r3, #0]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045d0:	1c5a      	adds	r2, r3, #1
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045da:	b29b      	uxth	r3, r3
 80045dc:	3b01      	subs	r3, #1
 80045de:	b29a      	uxth	r2, r3
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045e8:	3b01      	subs	r3, #1
 80045ea:	b29a      	uxth	r2, r3
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045f4:	b29b      	uxth	r3, r3
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d034      	beq.n	8004664 <HAL_I2C_Mem_Write+0x1c8>
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d130      	bne.n	8004664 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	9300      	str	r3, [sp, #0]
 8004606:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004608:	2200      	movs	r2, #0
 800460a:	2180      	movs	r1, #128	@ 0x80
 800460c:	68f8      	ldr	r0, [r7, #12]
 800460e:	f000 fa3f 	bl	8004a90 <I2C_WaitOnFlagUntilTimeout>
 8004612:	4603      	mov	r3, r0
 8004614:	2b00      	cmp	r3, #0
 8004616:	d001      	beq.n	800461c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	e04d      	b.n	80046b8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004620:	b29b      	uxth	r3, r3
 8004622:	2bff      	cmp	r3, #255	@ 0xff
 8004624:	d90e      	bls.n	8004644 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	22ff      	movs	r2, #255	@ 0xff
 800462a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004630:	b2da      	uxtb	r2, r3
 8004632:	8979      	ldrh	r1, [r7, #10]
 8004634:	2300      	movs	r3, #0
 8004636:	9300      	str	r3, [sp, #0]
 8004638:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800463c:	68f8      	ldr	r0, [r7, #12]
 800463e:	f000 fbeb 	bl	8004e18 <I2C_TransferConfig>
 8004642:	e00f      	b.n	8004664 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004648:	b29a      	uxth	r2, r3
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004652:	b2da      	uxtb	r2, r3
 8004654:	8979      	ldrh	r1, [r7, #10]
 8004656:	2300      	movs	r3, #0
 8004658:	9300      	str	r3, [sp, #0]
 800465a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800465e:	68f8      	ldr	r0, [r7, #12]
 8004660:	f000 fbda 	bl	8004e18 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004668:	b29b      	uxth	r3, r3
 800466a:	2b00      	cmp	r3, #0
 800466c:	d19e      	bne.n	80045ac <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800466e:	697a      	ldr	r2, [r7, #20]
 8004670:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004672:	68f8      	ldr	r0, [r7, #12]
 8004674:	f000 faac 	bl	8004bd0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004678:	4603      	mov	r3, r0
 800467a:	2b00      	cmp	r3, #0
 800467c:	d001      	beq.n	8004682 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	e01a      	b.n	80046b8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	2220      	movs	r2, #32
 8004688:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	6859      	ldr	r1, [r3, #4]
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681a      	ldr	r2, [r3, #0]
 8004694:	4b0a      	ldr	r3, [pc, #40]	@ (80046c0 <HAL_I2C_Mem_Write+0x224>)
 8004696:	400b      	ands	r3, r1
 8004698:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2220      	movs	r2, #32
 800469e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	2200      	movs	r2, #0
 80046a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2200      	movs	r2, #0
 80046ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80046b2:	2300      	movs	r3, #0
 80046b4:	e000      	b.n	80046b8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80046b6:	2302      	movs	r3, #2
  }
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	3718      	adds	r7, #24
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}
 80046c0:	fe00e800 	.word	0xfe00e800

080046c4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b088      	sub	sp, #32
 80046c8:	af02      	add	r7, sp, #8
 80046ca:	60f8      	str	r0, [r7, #12]
 80046cc:	4608      	mov	r0, r1
 80046ce:	4611      	mov	r1, r2
 80046d0:	461a      	mov	r2, r3
 80046d2:	4603      	mov	r3, r0
 80046d4:	817b      	strh	r3, [r7, #10]
 80046d6:	460b      	mov	r3, r1
 80046d8:	813b      	strh	r3, [r7, #8]
 80046da:	4613      	mov	r3, r2
 80046dc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046e4:	b2db      	uxtb	r3, r3
 80046e6:	2b20      	cmp	r3, #32
 80046e8:	f040 80fd 	bne.w	80048e6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80046ec:	6a3b      	ldr	r3, [r7, #32]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d002      	beq.n	80046f8 <HAL_I2C_Mem_Read+0x34>
 80046f2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d105      	bne.n	8004704 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80046fe:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004700:	2301      	movs	r3, #1
 8004702:	e0f1      	b.n	80048e8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800470a:	2b01      	cmp	r3, #1
 800470c:	d101      	bne.n	8004712 <HAL_I2C_Mem_Read+0x4e>
 800470e:	2302      	movs	r3, #2
 8004710:	e0ea      	b.n	80048e8 <HAL_I2C_Mem_Read+0x224>
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2201      	movs	r2, #1
 8004716:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800471a:	f7fe ff65 	bl	80035e8 <HAL_GetTick>
 800471e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	9300      	str	r3, [sp, #0]
 8004724:	2319      	movs	r3, #25
 8004726:	2201      	movs	r2, #1
 8004728:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800472c:	68f8      	ldr	r0, [r7, #12]
 800472e:	f000 f9af 	bl	8004a90 <I2C_WaitOnFlagUntilTimeout>
 8004732:	4603      	mov	r3, r0
 8004734:	2b00      	cmp	r3, #0
 8004736:	d001      	beq.n	800473c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	e0d5      	b.n	80048e8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2222      	movs	r2, #34	@ 0x22
 8004740:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2240      	movs	r2, #64	@ 0x40
 8004748:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2200      	movs	r2, #0
 8004750:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	6a3a      	ldr	r2, [r7, #32]
 8004756:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800475c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2200      	movs	r2, #0
 8004762:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004764:	88f8      	ldrh	r0, [r7, #6]
 8004766:	893a      	ldrh	r2, [r7, #8]
 8004768:	8979      	ldrh	r1, [r7, #10]
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	9301      	str	r3, [sp, #4]
 800476e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004770:	9300      	str	r3, [sp, #0]
 8004772:	4603      	mov	r3, r0
 8004774:	68f8      	ldr	r0, [r7, #12]
 8004776:	f000 f913 	bl	80049a0 <I2C_RequestMemoryRead>
 800477a:	4603      	mov	r3, r0
 800477c:	2b00      	cmp	r3, #0
 800477e:	d005      	beq.n	800478c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2200      	movs	r2, #0
 8004784:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004788:	2301      	movs	r3, #1
 800478a:	e0ad      	b.n	80048e8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004790:	b29b      	uxth	r3, r3
 8004792:	2bff      	cmp	r3, #255	@ 0xff
 8004794:	d90e      	bls.n	80047b4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	22ff      	movs	r2, #255	@ 0xff
 800479a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047a0:	b2da      	uxtb	r2, r3
 80047a2:	8979      	ldrh	r1, [r7, #10]
 80047a4:	4b52      	ldr	r3, [pc, #328]	@ (80048f0 <HAL_I2C_Mem_Read+0x22c>)
 80047a6:	9300      	str	r3, [sp, #0]
 80047a8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80047ac:	68f8      	ldr	r0, [r7, #12]
 80047ae:	f000 fb33 	bl	8004e18 <I2C_TransferConfig>
 80047b2:	e00f      	b.n	80047d4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047b8:	b29a      	uxth	r2, r3
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047c2:	b2da      	uxtb	r2, r3
 80047c4:	8979      	ldrh	r1, [r7, #10]
 80047c6:	4b4a      	ldr	r3, [pc, #296]	@ (80048f0 <HAL_I2C_Mem_Read+0x22c>)
 80047c8:	9300      	str	r3, [sp, #0]
 80047ca:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80047ce:	68f8      	ldr	r0, [r7, #12]
 80047d0:	f000 fb22 	bl	8004e18 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	9300      	str	r3, [sp, #0]
 80047d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047da:	2200      	movs	r2, #0
 80047dc:	2104      	movs	r1, #4
 80047de:	68f8      	ldr	r0, [r7, #12]
 80047e0:	f000 f956 	bl	8004a90 <I2C_WaitOnFlagUntilTimeout>
 80047e4:	4603      	mov	r3, r0
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d001      	beq.n	80047ee <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e07c      	b.n	80048e8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047f8:	b2d2      	uxtb	r2, r2
 80047fa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004800:	1c5a      	adds	r2, r3, #1
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800480a:	3b01      	subs	r3, #1
 800480c:	b29a      	uxth	r2, r3
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004816:	b29b      	uxth	r3, r3
 8004818:	3b01      	subs	r3, #1
 800481a:	b29a      	uxth	r2, r3
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004824:	b29b      	uxth	r3, r3
 8004826:	2b00      	cmp	r3, #0
 8004828:	d034      	beq.n	8004894 <HAL_I2C_Mem_Read+0x1d0>
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800482e:	2b00      	cmp	r3, #0
 8004830:	d130      	bne.n	8004894 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	9300      	str	r3, [sp, #0]
 8004836:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004838:	2200      	movs	r2, #0
 800483a:	2180      	movs	r1, #128	@ 0x80
 800483c:	68f8      	ldr	r0, [r7, #12]
 800483e:	f000 f927 	bl	8004a90 <I2C_WaitOnFlagUntilTimeout>
 8004842:	4603      	mov	r3, r0
 8004844:	2b00      	cmp	r3, #0
 8004846:	d001      	beq.n	800484c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004848:	2301      	movs	r3, #1
 800484a:	e04d      	b.n	80048e8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004850:	b29b      	uxth	r3, r3
 8004852:	2bff      	cmp	r3, #255	@ 0xff
 8004854:	d90e      	bls.n	8004874 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	22ff      	movs	r2, #255	@ 0xff
 800485a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004860:	b2da      	uxtb	r2, r3
 8004862:	8979      	ldrh	r1, [r7, #10]
 8004864:	2300      	movs	r3, #0
 8004866:	9300      	str	r3, [sp, #0]
 8004868:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800486c:	68f8      	ldr	r0, [r7, #12]
 800486e:	f000 fad3 	bl	8004e18 <I2C_TransferConfig>
 8004872:	e00f      	b.n	8004894 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004878:	b29a      	uxth	r2, r3
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004882:	b2da      	uxtb	r2, r3
 8004884:	8979      	ldrh	r1, [r7, #10]
 8004886:	2300      	movs	r3, #0
 8004888:	9300      	str	r3, [sp, #0]
 800488a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800488e:	68f8      	ldr	r0, [r7, #12]
 8004890:	f000 fac2 	bl	8004e18 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004898:	b29b      	uxth	r3, r3
 800489a:	2b00      	cmp	r3, #0
 800489c:	d19a      	bne.n	80047d4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800489e:	697a      	ldr	r2, [r7, #20]
 80048a0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80048a2:	68f8      	ldr	r0, [r7, #12]
 80048a4:	f000 f994 	bl	8004bd0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80048a8:	4603      	mov	r3, r0
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d001      	beq.n	80048b2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	e01a      	b.n	80048e8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	2220      	movs	r2, #32
 80048b8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	6859      	ldr	r1, [r3, #4]
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681a      	ldr	r2, [r3, #0]
 80048c4:	4b0b      	ldr	r3, [pc, #44]	@ (80048f4 <HAL_I2C_Mem_Read+0x230>)
 80048c6:	400b      	ands	r3, r1
 80048c8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2220      	movs	r2, #32
 80048ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2200      	movs	r2, #0
 80048d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2200      	movs	r2, #0
 80048de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80048e2:	2300      	movs	r3, #0
 80048e4:	e000      	b.n	80048e8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80048e6:	2302      	movs	r3, #2
  }
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	3718      	adds	r7, #24
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}
 80048f0:	80002400 	.word	0x80002400
 80048f4:	fe00e800 	.word	0xfe00e800

080048f8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b086      	sub	sp, #24
 80048fc:	af02      	add	r7, sp, #8
 80048fe:	60f8      	str	r0, [r7, #12]
 8004900:	4608      	mov	r0, r1
 8004902:	4611      	mov	r1, r2
 8004904:	461a      	mov	r2, r3
 8004906:	4603      	mov	r3, r0
 8004908:	817b      	strh	r3, [r7, #10]
 800490a:	460b      	mov	r3, r1
 800490c:	813b      	strh	r3, [r7, #8]
 800490e:	4613      	mov	r3, r2
 8004910:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004912:	88fb      	ldrh	r3, [r7, #6]
 8004914:	b2da      	uxtb	r2, r3
 8004916:	8979      	ldrh	r1, [r7, #10]
 8004918:	4b20      	ldr	r3, [pc, #128]	@ (800499c <I2C_RequestMemoryWrite+0xa4>)
 800491a:	9300      	str	r3, [sp, #0]
 800491c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004920:	68f8      	ldr	r0, [r7, #12]
 8004922:	f000 fa79 	bl	8004e18 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004926:	69fa      	ldr	r2, [r7, #28]
 8004928:	69b9      	ldr	r1, [r7, #24]
 800492a:	68f8      	ldr	r0, [r7, #12]
 800492c:	f000 f909 	bl	8004b42 <I2C_WaitOnTXISFlagUntilTimeout>
 8004930:	4603      	mov	r3, r0
 8004932:	2b00      	cmp	r3, #0
 8004934:	d001      	beq.n	800493a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	e02c      	b.n	8004994 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800493a:	88fb      	ldrh	r3, [r7, #6]
 800493c:	2b01      	cmp	r3, #1
 800493e:	d105      	bne.n	800494c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004940:	893b      	ldrh	r3, [r7, #8]
 8004942:	b2da      	uxtb	r2, r3
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	629a      	str	r2, [r3, #40]	@ 0x28
 800494a:	e015      	b.n	8004978 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800494c:	893b      	ldrh	r3, [r7, #8]
 800494e:	0a1b      	lsrs	r3, r3, #8
 8004950:	b29b      	uxth	r3, r3
 8004952:	b2da      	uxtb	r2, r3
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800495a:	69fa      	ldr	r2, [r7, #28]
 800495c:	69b9      	ldr	r1, [r7, #24]
 800495e:	68f8      	ldr	r0, [r7, #12]
 8004960:	f000 f8ef 	bl	8004b42 <I2C_WaitOnTXISFlagUntilTimeout>
 8004964:	4603      	mov	r3, r0
 8004966:	2b00      	cmp	r3, #0
 8004968:	d001      	beq.n	800496e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	e012      	b.n	8004994 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800496e:	893b      	ldrh	r3, [r7, #8]
 8004970:	b2da      	uxtb	r2, r3
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004978:	69fb      	ldr	r3, [r7, #28]
 800497a:	9300      	str	r3, [sp, #0]
 800497c:	69bb      	ldr	r3, [r7, #24]
 800497e:	2200      	movs	r2, #0
 8004980:	2180      	movs	r1, #128	@ 0x80
 8004982:	68f8      	ldr	r0, [r7, #12]
 8004984:	f000 f884 	bl	8004a90 <I2C_WaitOnFlagUntilTimeout>
 8004988:	4603      	mov	r3, r0
 800498a:	2b00      	cmp	r3, #0
 800498c:	d001      	beq.n	8004992 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800498e:	2301      	movs	r3, #1
 8004990:	e000      	b.n	8004994 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004992:	2300      	movs	r3, #0
}
 8004994:	4618      	mov	r0, r3
 8004996:	3710      	adds	r7, #16
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}
 800499c:	80002000 	.word	0x80002000

080049a0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b086      	sub	sp, #24
 80049a4:	af02      	add	r7, sp, #8
 80049a6:	60f8      	str	r0, [r7, #12]
 80049a8:	4608      	mov	r0, r1
 80049aa:	4611      	mov	r1, r2
 80049ac:	461a      	mov	r2, r3
 80049ae:	4603      	mov	r3, r0
 80049b0:	817b      	strh	r3, [r7, #10]
 80049b2:	460b      	mov	r3, r1
 80049b4:	813b      	strh	r3, [r7, #8]
 80049b6:	4613      	mov	r3, r2
 80049b8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80049ba:	88fb      	ldrh	r3, [r7, #6]
 80049bc:	b2da      	uxtb	r2, r3
 80049be:	8979      	ldrh	r1, [r7, #10]
 80049c0:	4b20      	ldr	r3, [pc, #128]	@ (8004a44 <I2C_RequestMemoryRead+0xa4>)
 80049c2:	9300      	str	r3, [sp, #0]
 80049c4:	2300      	movs	r3, #0
 80049c6:	68f8      	ldr	r0, [r7, #12]
 80049c8:	f000 fa26 	bl	8004e18 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80049cc:	69fa      	ldr	r2, [r7, #28]
 80049ce:	69b9      	ldr	r1, [r7, #24]
 80049d0:	68f8      	ldr	r0, [r7, #12]
 80049d2:	f000 f8b6 	bl	8004b42 <I2C_WaitOnTXISFlagUntilTimeout>
 80049d6:	4603      	mov	r3, r0
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d001      	beq.n	80049e0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80049dc:	2301      	movs	r3, #1
 80049de:	e02c      	b.n	8004a3a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80049e0:	88fb      	ldrh	r3, [r7, #6]
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	d105      	bne.n	80049f2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80049e6:	893b      	ldrh	r3, [r7, #8]
 80049e8:	b2da      	uxtb	r2, r3
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	629a      	str	r2, [r3, #40]	@ 0x28
 80049f0:	e015      	b.n	8004a1e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80049f2:	893b      	ldrh	r3, [r7, #8]
 80049f4:	0a1b      	lsrs	r3, r3, #8
 80049f6:	b29b      	uxth	r3, r3
 80049f8:	b2da      	uxtb	r2, r3
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a00:	69fa      	ldr	r2, [r7, #28]
 8004a02:	69b9      	ldr	r1, [r7, #24]
 8004a04:	68f8      	ldr	r0, [r7, #12]
 8004a06:	f000 f89c 	bl	8004b42 <I2C_WaitOnTXISFlagUntilTimeout>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d001      	beq.n	8004a14 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004a10:	2301      	movs	r3, #1
 8004a12:	e012      	b.n	8004a3a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004a14:	893b      	ldrh	r3, [r7, #8]
 8004a16:	b2da      	uxtb	r2, r3
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004a1e:	69fb      	ldr	r3, [r7, #28]
 8004a20:	9300      	str	r3, [sp, #0]
 8004a22:	69bb      	ldr	r3, [r7, #24]
 8004a24:	2200      	movs	r2, #0
 8004a26:	2140      	movs	r1, #64	@ 0x40
 8004a28:	68f8      	ldr	r0, [r7, #12]
 8004a2a:	f000 f831 	bl	8004a90 <I2C_WaitOnFlagUntilTimeout>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d001      	beq.n	8004a38 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	e000      	b.n	8004a3a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004a38:	2300      	movs	r3, #0
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3710      	adds	r7, #16
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}
 8004a42:	bf00      	nop
 8004a44:	80002000 	.word	0x80002000

08004a48 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b083      	sub	sp, #12
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	699b      	ldr	r3, [r3, #24]
 8004a56:	f003 0302 	and.w	r3, r3, #2
 8004a5a:	2b02      	cmp	r3, #2
 8004a5c:	d103      	bne.n	8004a66 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	2200      	movs	r2, #0
 8004a64:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	699b      	ldr	r3, [r3, #24]
 8004a6c:	f003 0301 	and.w	r3, r3, #1
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d007      	beq.n	8004a84 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	699a      	ldr	r2, [r3, #24]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f042 0201 	orr.w	r2, r2, #1
 8004a82:	619a      	str	r2, [r3, #24]
  }
}
 8004a84:	bf00      	nop
 8004a86:	370c      	adds	r7, #12
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8e:	4770      	bx	lr

08004a90 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b084      	sub	sp, #16
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	60f8      	str	r0, [r7, #12]
 8004a98:	60b9      	str	r1, [r7, #8]
 8004a9a:	603b      	str	r3, [r7, #0]
 8004a9c:	4613      	mov	r3, r2
 8004a9e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004aa0:	e03b      	b.n	8004b1a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004aa2:	69ba      	ldr	r2, [r7, #24]
 8004aa4:	6839      	ldr	r1, [r7, #0]
 8004aa6:	68f8      	ldr	r0, [r7, #12]
 8004aa8:	f000 f8d6 	bl	8004c58 <I2C_IsErrorOccurred>
 8004aac:	4603      	mov	r3, r0
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d001      	beq.n	8004ab6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e041      	b.n	8004b3a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004abc:	d02d      	beq.n	8004b1a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004abe:	f7fe fd93 	bl	80035e8 <HAL_GetTick>
 8004ac2:	4602      	mov	r2, r0
 8004ac4:	69bb      	ldr	r3, [r7, #24]
 8004ac6:	1ad3      	subs	r3, r2, r3
 8004ac8:	683a      	ldr	r2, [r7, #0]
 8004aca:	429a      	cmp	r2, r3
 8004acc:	d302      	bcc.n	8004ad4 <I2C_WaitOnFlagUntilTimeout+0x44>
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d122      	bne.n	8004b1a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	699a      	ldr	r2, [r3, #24]
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	4013      	ands	r3, r2
 8004ade:	68ba      	ldr	r2, [r7, #8]
 8004ae0:	429a      	cmp	r2, r3
 8004ae2:	bf0c      	ite	eq
 8004ae4:	2301      	moveq	r3, #1
 8004ae6:	2300      	movne	r3, #0
 8004ae8:	b2db      	uxtb	r3, r3
 8004aea:	461a      	mov	r2, r3
 8004aec:	79fb      	ldrb	r3, [r7, #7]
 8004aee:	429a      	cmp	r2, r3
 8004af0:	d113      	bne.n	8004b1a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004af6:	f043 0220 	orr.w	r2, r3, #32
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2220      	movs	r2, #32
 8004b02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2200      	movs	r2, #0
 8004b12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	e00f      	b.n	8004b3a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	699a      	ldr	r2, [r3, #24]
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	4013      	ands	r3, r2
 8004b24:	68ba      	ldr	r2, [r7, #8]
 8004b26:	429a      	cmp	r2, r3
 8004b28:	bf0c      	ite	eq
 8004b2a:	2301      	moveq	r3, #1
 8004b2c:	2300      	movne	r3, #0
 8004b2e:	b2db      	uxtb	r3, r3
 8004b30:	461a      	mov	r2, r3
 8004b32:	79fb      	ldrb	r3, [r7, #7]
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d0b4      	beq.n	8004aa2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b38:	2300      	movs	r3, #0
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	3710      	adds	r7, #16
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}

08004b42 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004b42:	b580      	push	{r7, lr}
 8004b44:	b084      	sub	sp, #16
 8004b46:	af00      	add	r7, sp, #0
 8004b48:	60f8      	str	r0, [r7, #12]
 8004b4a:	60b9      	str	r1, [r7, #8]
 8004b4c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004b4e:	e033      	b.n	8004bb8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b50:	687a      	ldr	r2, [r7, #4]
 8004b52:	68b9      	ldr	r1, [r7, #8]
 8004b54:	68f8      	ldr	r0, [r7, #12]
 8004b56:	f000 f87f 	bl	8004c58 <I2C_IsErrorOccurred>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d001      	beq.n	8004b64 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004b60:	2301      	movs	r3, #1
 8004b62:	e031      	b.n	8004bc8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b6a:	d025      	beq.n	8004bb8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b6c:	f7fe fd3c 	bl	80035e8 <HAL_GetTick>
 8004b70:	4602      	mov	r2, r0
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	1ad3      	subs	r3, r2, r3
 8004b76:	68ba      	ldr	r2, [r7, #8]
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	d302      	bcc.n	8004b82 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d11a      	bne.n	8004bb8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	699b      	ldr	r3, [r3, #24]
 8004b88:	f003 0302 	and.w	r3, r3, #2
 8004b8c:	2b02      	cmp	r3, #2
 8004b8e:	d013      	beq.n	8004bb8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b94:	f043 0220 	orr.w	r2, r3, #32
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2220      	movs	r2, #32
 8004ba0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	e007      	b.n	8004bc8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	699b      	ldr	r3, [r3, #24]
 8004bbe:	f003 0302 	and.w	r3, r3, #2
 8004bc2:	2b02      	cmp	r3, #2
 8004bc4:	d1c4      	bne.n	8004b50 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004bc6:	2300      	movs	r3, #0
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	3710      	adds	r7, #16
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}

08004bd0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b084      	sub	sp, #16
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	60f8      	str	r0, [r7, #12]
 8004bd8:	60b9      	str	r1, [r7, #8]
 8004bda:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004bdc:	e02f      	b.n	8004c3e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004bde:	687a      	ldr	r2, [r7, #4]
 8004be0:	68b9      	ldr	r1, [r7, #8]
 8004be2:	68f8      	ldr	r0, [r7, #12]
 8004be4:	f000 f838 	bl	8004c58 <I2C_IsErrorOccurred>
 8004be8:	4603      	mov	r3, r0
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d001      	beq.n	8004bf2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	e02d      	b.n	8004c4e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bf2:	f7fe fcf9 	bl	80035e8 <HAL_GetTick>
 8004bf6:	4602      	mov	r2, r0
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	1ad3      	subs	r3, r2, r3
 8004bfc:	68ba      	ldr	r2, [r7, #8]
 8004bfe:	429a      	cmp	r2, r3
 8004c00:	d302      	bcc.n	8004c08 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d11a      	bne.n	8004c3e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	699b      	ldr	r3, [r3, #24]
 8004c0e:	f003 0320 	and.w	r3, r3, #32
 8004c12:	2b20      	cmp	r3, #32
 8004c14:	d013      	beq.n	8004c3e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c1a:	f043 0220 	orr.w	r2, r3, #32
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	2220      	movs	r2, #32
 8004c26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2200      	movs	r2, #0
 8004c36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e007      	b.n	8004c4e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	699b      	ldr	r3, [r3, #24]
 8004c44:	f003 0320 	and.w	r3, r3, #32
 8004c48:	2b20      	cmp	r3, #32
 8004c4a:	d1c8      	bne.n	8004bde <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004c4c:	2300      	movs	r3, #0
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	3710      	adds	r7, #16
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}
	...

08004c58 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b08a      	sub	sp, #40	@ 0x28
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	60f8      	str	r0, [r7, #12]
 8004c60:	60b9      	str	r1, [r7, #8]
 8004c62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c64:	2300      	movs	r3, #0
 8004c66:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	699b      	ldr	r3, [r3, #24]
 8004c70:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004c72:	2300      	movs	r3, #0
 8004c74:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004c7a:	69bb      	ldr	r3, [r7, #24]
 8004c7c:	f003 0310 	and.w	r3, r3, #16
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d068      	beq.n	8004d56 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	2210      	movs	r2, #16
 8004c8a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004c8c:	e049      	b.n	8004d22 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c94:	d045      	beq.n	8004d22 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004c96:	f7fe fca7 	bl	80035e8 <HAL_GetTick>
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	69fb      	ldr	r3, [r7, #28]
 8004c9e:	1ad3      	subs	r3, r2, r3
 8004ca0:	68ba      	ldr	r2, [r7, #8]
 8004ca2:	429a      	cmp	r2, r3
 8004ca4:	d302      	bcc.n	8004cac <I2C_IsErrorOccurred+0x54>
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d13a      	bne.n	8004d22 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004cb6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004cbe:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	699b      	ldr	r3, [r3, #24]
 8004cc6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004cca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004cce:	d121      	bne.n	8004d14 <I2C_IsErrorOccurred+0xbc>
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004cd6:	d01d      	beq.n	8004d14 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004cd8:	7cfb      	ldrb	r3, [r7, #19]
 8004cda:	2b20      	cmp	r3, #32
 8004cdc:	d01a      	beq.n	8004d14 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	685a      	ldr	r2, [r3, #4]
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004cec:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004cee:	f7fe fc7b 	bl	80035e8 <HAL_GetTick>
 8004cf2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004cf4:	e00e      	b.n	8004d14 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004cf6:	f7fe fc77 	bl	80035e8 <HAL_GetTick>
 8004cfa:	4602      	mov	r2, r0
 8004cfc:	69fb      	ldr	r3, [r7, #28]
 8004cfe:	1ad3      	subs	r3, r2, r3
 8004d00:	2b19      	cmp	r3, #25
 8004d02:	d907      	bls.n	8004d14 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004d04:	6a3b      	ldr	r3, [r7, #32]
 8004d06:	f043 0320 	orr.w	r3, r3, #32
 8004d0a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8004d12:	e006      	b.n	8004d22 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	699b      	ldr	r3, [r3, #24]
 8004d1a:	f003 0320 	and.w	r3, r3, #32
 8004d1e:	2b20      	cmp	r3, #32
 8004d20:	d1e9      	bne.n	8004cf6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	699b      	ldr	r3, [r3, #24]
 8004d28:	f003 0320 	and.w	r3, r3, #32
 8004d2c:	2b20      	cmp	r3, #32
 8004d2e:	d003      	beq.n	8004d38 <I2C_IsErrorOccurred+0xe0>
 8004d30:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d0aa      	beq.n	8004c8e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004d38:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d103      	bne.n	8004d48 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	2220      	movs	r2, #32
 8004d46:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004d48:	6a3b      	ldr	r3, [r7, #32]
 8004d4a:	f043 0304 	orr.w	r3, r3, #4
 8004d4e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	699b      	ldr	r3, [r3, #24]
 8004d5c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004d5e:	69bb      	ldr	r3, [r7, #24]
 8004d60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d00b      	beq.n	8004d80 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004d68:	6a3b      	ldr	r3, [r7, #32]
 8004d6a:	f043 0301 	orr.w	r3, r3, #1
 8004d6e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004d78:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004d80:	69bb      	ldr	r3, [r7, #24]
 8004d82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d00b      	beq.n	8004da2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004d8a:	6a3b      	ldr	r3, [r7, #32]
 8004d8c:	f043 0308 	orr.w	r3, r3, #8
 8004d90:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004d9a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004da2:	69bb      	ldr	r3, [r7, #24]
 8004da4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d00b      	beq.n	8004dc4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004dac:	6a3b      	ldr	r3, [r7, #32]
 8004dae:	f043 0302 	orr.w	r3, r3, #2
 8004db2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004dbc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8004dc4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d01c      	beq.n	8004e06 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004dcc:	68f8      	ldr	r0, [r7, #12]
 8004dce:	f7ff fe3b 	bl	8004a48 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	6859      	ldr	r1, [r3, #4]
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	4b0d      	ldr	r3, [pc, #52]	@ (8004e14 <I2C_IsErrorOccurred+0x1bc>)
 8004dde:	400b      	ands	r3, r1
 8004de0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004de6:	6a3b      	ldr	r3, [r7, #32]
 8004de8:	431a      	orrs	r2, r3
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2220      	movs	r2, #32
 8004df2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2200      	movs	r2, #0
 8004e02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8004e06:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	3728      	adds	r7, #40	@ 0x28
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}
 8004e12:	bf00      	nop
 8004e14:	fe00e800 	.word	0xfe00e800

08004e18 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b087      	sub	sp, #28
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	60f8      	str	r0, [r7, #12]
 8004e20:	607b      	str	r3, [r7, #4]
 8004e22:	460b      	mov	r3, r1
 8004e24:	817b      	strh	r3, [r7, #10]
 8004e26:	4613      	mov	r3, r2
 8004e28:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004e2a:	897b      	ldrh	r3, [r7, #10]
 8004e2c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004e30:	7a7b      	ldrb	r3, [r7, #9]
 8004e32:	041b      	lsls	r3, r3, #16
 8004e34:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004e38:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004e3e:	6a3b      	ldr	r3, [r7, #32]
 8004e40:	4313      	orrs	r3, r2
 8004e42:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004e46:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	685a      	ldr	r2, [r3, #4]
 8004e4e:	6a3b      	ldr	r3, [r7, #32]
 8004e50:	0d5b      	lsrs	r3, r3, #21
 8004e52:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8004e56:	4b08      	ldr	r3, [pc, #32]	@ (8004e78 <I2C_TransferConfig+0x60>)
 8004e58:	430b      	orrs	r3, r1
 8004e5a:	43db      	mvns	r3, r3
 8004e5c:	ea02 0103 	and.w	r1, r2, r3
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	697a      	ldr	r2, [r7, #20]
 8004e66:	430a      	orrs	r2, r1
 8004e68:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004e6a:	bf00      	nop
 8004e6c:	371c      	adds	r7, #28
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e74:	4770      	bx	lr
 8004e76:	bf00      	nop
 8004e78:	03ff63ff 	.word	0x03ff63ff

08004e7c <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b084      	sub	sp, #16
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8004e84:	2300      	movs	r3, #0
 8004e86:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d01e      	beq.n	8004ecc <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8004e8e:	4b13      	ldr	r3, [pc, #76]	@ (8004edc <HAL_IPCC_Init+0x60>)
 8004e90:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004e98:	b2db      	uxtb	r3, r3
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d102      	bne.n	8004ea4 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f7fe f99c 	bl	80031dc <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8004ea4:	68b8      	ldr	r0, [r7, #8]
 8004ea6:	f000 f85b 	bl	8004f60 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f043 1201 	orr.w	r2, r3, #65537	@ 0x10001
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f000 f82c 	bl	8004f14 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	635a      	str	r2, [r3, #52]	@ 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 8004eca:	e001      	b.n	8004ed0 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8004ed0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	3710      	adds	r7, #16
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}
 8004eda:	bf00      	nop
 8004edc:	58000c00 	.word	0x58000c00

08004ee0 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b085      	sub	sp, #20
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	60f8      	str	r0, [r7, #12]
 8004ee8:	60b9      	str	r1, [r7, #8]
 8004eea:	4613      	mov	r3, r2
 8004eec:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8004eee:	bf00      	nop
 8004ef0:	3714      	adds	r7, #20
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef8:	4770      	bx	lr

08004efa <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8004efa:	b480      	push	{r7}
 8004efc:	b085      	sub	sp, #20
 8004efe:	af00      	add	r7, sp, #0
 8004f00:	60f8      	str	r0, [r7, #12]
 8004f02:	60b9      	str	r1, [r7, #8]
 8004f04:	4613      	mov	r3, r2
 8004f06:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8004f08:	bf00      	nop
 8004f0a:	3714      	adds	r7, #20
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f12:	4770      	bx	lr

08004f14 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b085      	sub	sp, #20
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	60fb      	str	r3, [r7, #12]
 8004f20:	e00f      	b.n	8004f42 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8004f22:	687a      	ldr	r2, [r7, #4]
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	009b      	lsls	r3, r3, #2
 8004f28:	4413      	add	r3, r2
 8004f2a:	4a0b      	ldr	r2, [pc, #44]	@ (8004f58 <IPCC_SetDefaultCallbacks+0x44>)
 8004f2c:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8004f2e:	687a      	ldr	r2, [r7, #4]
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	3306      	adds	r3, #6
 8004f34:	009b      	lsls	r3, r3, #2
 8004f36:	4413      	add	r3, r2
 8004f38:	4a08      	ldr	r2, [pc, #32]	@ (8004f5c <IPCC_SetDefaultCallbacks+0x48>)
 8004f3a:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	3301      	adds	r3, #1
 8004f40:	60fb      	str	r3, [r7, #12]
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2b05      	cmp	r3, #5
 8004f46:	d9ec      	bls.n	8004f22 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8004f48:	bf00      	nop
 8004f4a:	bf00      	nop
 8004f4c:	3714      	adds	r7, #20
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f54:	4770      	bx	lr
 8004f56:	bf00      	nop
 8004f58:	08004ee1 	.word	0x08004ee1
 8004f5c:	08004efb 	.word	0x08004efb

08004f60 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b083      	sub	sp, #12
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	f04f 123f 	mov.w	r2, #4128831	@ 0x3f003f
 8004f74:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	223f      	movs	r2, #63	@ 0x3f
 8004f7a:	609a      	str	r2, [r3, #8]
}
 8004f7c:	bf00      	nop
 8004f7e:	370c      	adds	r7, #12
 8004f80:	46bd      	mov	sp, r7
 8004f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f86:	4770      	bx	lr

08004f88 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f8c:	4b05      	ldr	r3, [pc, #20]	@ (8004fa4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a04      	ldr	r2, [pc, #16]	@ (8004fa4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004f92:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f96:	6013      	str	r3, [r2, #0]
}
 8004f98:	bf00      	nop
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa0:	4770      	bx	lr
 8004fa2:	bf00      	nop
 8004fa4:	58000400 	.word	0x58000400

08004fa8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8004fac:	4b04      	ldr	r3, [pc, #16]	@ (8004fc0 <HAL_PWREx_GetVoltageRange+0x18>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbc:	4770      	bx	lr
 8004fbe:	bf00      	nop
 8004fc0:	58000400 	.word	0x58000400

08004fc4 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8004fc8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004fd2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004fd6:	d101      	bne.n	8004fdc <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8004fd8:	2301      	movs	r3, #1
 8004fda:	e000      	b.n	8004fde <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8004fdc:	2300      	movs	r3, #0
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe6:	4770      	bx	lr

08004fe8 <LL_RCC_HSE_Enable>:
{
 8004fe8:	b480      	push	{r7}
 8004fea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8004fec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004ff6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ffa:	6013      	str	r3, [r2, #0]
}
 8004ffc:	bf00      	nop
 8004ffe:	46bd      	mov	sp, r7
 8005000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005004:	4770      	bx	lr

08005006 <LL_RCC_HSE_Disable>:
{
 8005006:	b480      	push	{r7}
 8005008:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800500a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005014:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005018:	6013      	str	r3, [r2, #0]
}
 800501a:	bf00      	nop
 800501c:	46bd      	mov	sp, r7
 800501e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005022:	4770      	bx	lr

08005024 <LL_RCC_HSE_IsReady>:
{
 8005024:	b480      	push	{r7}
 8005026:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8005028:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005032:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005036:	d101      	bne.n	800503c <LL_RCC_HSE_IsReady+0x18>
 8005038:	2301      	movs	r3, #1
 800503a:	e000      	b.n	800503e <LL_RCC_HSE_IsReady+0x1a>
 800503c:	2300      	movs	r3, #0
}
 800503e:	4618      	mov	r0, r3
 8005040:	46bd      	mov	sp, r7
 8005042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005046:	4770      	bx	lr

08005048 <LL_RCC_HSI_Enable>:
{
 8005048:	b480      	push	{r7}
 800504a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800504c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005056:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800505a:	6013      	str	r3, [r2, #0]
}
 800505c:	bf00      	nop
 800505e:	46bd      	mov	sp, r7
 8005060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005064:	4770      	bx	lr

08005066 <LL_RCC_HSI_Disable>:
{
 8005066:	b480      	push	{r7}
 8005068:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800506a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005074:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005078:	6013      	str	r3, [r2, #0]
}
 800507a:	bf00      	nop
 800507c:	46bd      	mov	sp, r7
 800507e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005082:	4770      	bx	lr

08005084 <LL_RCC_HSI_IsReady>:
{
 8005084:	b480      	push	{r7}
 8005086:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8005088:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005092:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005096:	d101      	bne.n	800509c <LL_RCC_HSI_IsReady+0x18>
 8005098:	2301      	movs	r3, #1
 800509a:	e000      	b.n	800509e <LL_RCC_HSI_IsReady+0x1a>
 800509c:	2300      	movs	r3, #0
}
 800509e:	4618      	mov	r0, r3
 80050a0:	46bd      	mov	sp, r7
 80050a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a6:	4770      	bx	lr

080050a8 <LL_RCC_HSI_SetCalibTrimming>:
{
 80050a8:	b480      	push	{r7}
 80050aa:	b083      	sub	sp, #12
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80050b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	061b      	lsls	r3, r3, #24
 80050be:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80050c2:	4313      	orrs	r3, r2
 80050c4:	604b      	str	r3, [r1, #4]
}
 80050c6:	bf00      	nop
 80050c8:	370c      	adds	r7, #12
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr

080050d2 <LL_RCC_HSI48_Enable>:
{
 80050d2:	b480      	push	{r7}
 80050d4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80050d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80050da:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80050de:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80050e2:	f043 0301 	orr.w	r3, r3, #1
 80050e6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 80050ea:	bf00      	nop
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr

080050f4 <LL_RCC_HSI48_Disable>:
{
 80050f4:	b480      	push	{r7}
 80050f6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80050f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80050fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005100:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005104:	f023 0301 	bic.w	r3, r3, #1
 8005108:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800510c:	bf00      	nop
 800510e:	46bd      	mov	sp, r7
 8005110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005114:	4770      	bx	lr

08005116 <LL_RCC_HSI48_IsReady>:
{
 8005116:	b480      	push	{r7}
 8005118:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800511a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800511e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005122:	f003 0302 	and.w	r3, r3, #2
 8005126:	2b02      	cmp	r3, #2
 8005128:	d101      	bne.n	800512e <LL_RCC_HSI48_IsReady+0x18>
 800512a:	2301      	movs	r3, #1
 800512c:	e000      	b.n	8005130 <LL_RCC_HSI48_IsReady+0x1a>
 800512e:	2300      	movs	r3, #0
}
 8005130:	4618      	mov	r0, r3
 8005132:	46bd      	mov	sp, r7
 8005134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005138:	4770      	bx	lr

0800513a <LL_RCC_LSE_Enable>:
{
 800513a:	b480      	push	{r7}
 800513c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800513e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005142:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005146:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800514a:	f043 0301 	orr.w	r3, r3, #1
 800514e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8005152:	bf00      	nop
 8005154:	46bd      	mov	sp, r7
 8005156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515a:	4770      	bx	lr

0800515c <LL_RCC_LSE_Disable>:
{
 800515c:	b480      	push	{r7}
 800515e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005160:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005164:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005168:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800516c:	f023 0301 	bic.w	r3, r3, #1
 8005170:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8005174:	bf00      	nop
 8005176:	46bd      	mov	sp, r7
 8005178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517c:	4770      	bx	lr

0800517e <LL_RCC_LSE_EnableBypass>:
{
 800517e:	b480      	push	{r7}
 8005180:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005182:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005186:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800518a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800518e:	f043 0304 	orr.w	r3, r3, #4
 8005192:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8005196:	bf00      	nop
 8005198:	46bd      	mov	sp, r7
 800519a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519e:	4770      	bx	lr

080051a0 <LL_RCC_LSE_DisableBypass>:
{
 80051a0:	b480      	push	{r7}
 80051a2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80051a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80051a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051ac:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80051b0:	f023 0304 	bic.w	r3, r3, #4
 80051b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80051b8:	bf00      	nop
 80051ba:	46bd      	mov	sp, r7
 80051bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c0:	4770      	bx	lr

080051c2 <LL_RCC_LSE_IsReady>:
{
 80051c2:	b480      	push	{r7}
 80051c4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80051c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80051ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051ce:	f003 0302 	and.w	r3, r3, #2
 80051d2:	2b02      	cmp	r3, #2
 80051d4:	d101      	bne.n	80051da <LL_RCC_LSE_IsReady+0x18>
 80051d6:	2301      	movs	r3, #1
 80051d8:	e000      	b.n	80051dc <LL_RCC_LSE_IsReady+0x1a>
 80051da:	2300      	movs	r3, #0
}
 80051dc:	4618      	mov	r0, r3
 80051de:	46bd      	mov	sp, r7
 80051e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e4:	4770      	bx	lr

080051e6 <LL_RCC_LSI1_Enable>:
{
 80051e6:	b480      	push	{r7}
 80051e8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80051ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80051ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80051f2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80051f6:	f043 0301 	orr.w	r3, r3, #1
 80051fa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80051fe:	bf00      	nop
 8005200:	46bd      	mov	sp, r7
 8005202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005206:	4770      	bx	lr

08005208 <LL_RCC_LSI1_Disable>:
{
 8005208:	b480      	push	{r7}
 800520a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800520c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005210:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005214:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005218:	f023 0301 	bic.w	r3, r3, #1
 800521c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8005220:	bf00      	nop
 8005222:	46bd      	mov	sp, r7
 8005224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005228:	4770      	bx	lr

0800522a <LL_RCC_LSI1_IsReady>:
{
 800522a:	b480      	push	{r7}
 800522c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800522e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005232:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005236:	f003 0302 	and.w	r3, r3, #2
 800523a:	2b02      	cmp	r3, #2
 800523c:	d101      	bne.n	8005242 <LL_RCC_LSI1_IsReady+0x18>
 800523e:	2301      	movs	r3, #1
 8005240:	e000      	b.n	8005244 <LL_RCC_LSI1_IsReady+0x1a>
 8005242:	2300      	movs	r3, #0
}
 8005244:	4618      	mov	r0, r3
 8005246:	46bd      	mov	sp, r7
 8005248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524c:	4770      	bx	lr

0800524e <LL_RCC_LSI2_Enable>:
{
 800524e:	b480      	push	{r7}
 8005250:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8005252:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005256:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800525a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800525e:	f043 0304 	orr.w	r3, r3, #4
 8005262:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8005266:	bf00      	nop
 8005268:	46bd      	mov	sp, r7
 800526a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526e:	4770      	bx	lr

08005270 <LL_RCC_LSI2_Disable>:
{
 8005270:	b480      	push	{r7}
 8005272:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8005274:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005278:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800527c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005280:	f023 0304 	bic.w	r3, r3, #4
 8005284:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8005288:	bf00      	nop
 800528a:	46bd      	mov	sp, r7
 800528c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005290:	4770      	bx	lr

08005292 <LL_RCC_LSI2_IsReady>:
{
 8005292:	b480      	push	{r7}
 8005294:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8005296:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800529a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800529e:	f003 0308 	and.w	r3, r3, #8
 80052a2:	2b08      	cmp	r3, #8
 80052a4:	d101      	bne.n	80052aa <LL_RCC_LSI2_IsReady+0x18>
 80052a6:	2301      	movs	r3, #1
 80052a8:	e000      	b.n	80052ac <LL_RCC_LSI2_IsReady+0x1a>
 80052aa:	2300      	movs	r3, #0
}
 80052ac:	4618      	mov	r0, r3
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr

080052b6 <LL_RCC_LSI2_SetTrimming>:
{
 80052b6:	b480      	push	{r7}
 80052b8:	b083      	sub	sp, #12
 80052ba:	af00      	add	r7, sp, #0
 80052bc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80052be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80052c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80052c6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	021b      	lsls	r3, r3, #8
 80052ce:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80052d2:	4313      	orrs	r3, r2
 80052d4:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 80052d8:	bf00      	nop
 80052da:	370c      	adds	r7, #12
 80052dc:	46bd      	mov	sp, r7
 80052de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e2:	4770      	bx	lr

080052e4 <LL_RCC_MSI_Enable>:
{
 80052e4:	b480      	push	{r7}
 80052e6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80052e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80052f2:	f043 0301 	orr.w	r3, r3, #1
 80052f6:	6013      	str	r3, [r2, #0]
}
 80052f8:	bf00      	nop
 80052fa:	46bd      	mov	sp, r7
 80052fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005300:	4770      	bx	lr

08005302 <LL_RCC_MSI_Disable>:
{
 8005302:	b480      	push	{r7}
 8005304:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8005306:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005310:	f023 0301 	bic.w	r3, r3, #1
 8005314:	6013      	str	r3, [r2, #0]
}
 8005316:	bf00      	nop
 8005318:	46bd      	mov	sp, r7
 800531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531e:	4770      	bx	lr

08005320 <LL_RCC_MSI_IsReady>:
{
 8005320:	b480      	push	{r7}
 8005322:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8005324:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f003 0302 	and.w	r3, r3, #2
 800532e:	2b02      	cmp	r3, #2
 8005330:	d101      	bne.n	8005336 <LL_RCC_MSI_IsReady+0x16>
 8005332:	2301      	movs	r3, #1
 8005334:	e000      	b.n	8005338 <LL_RCC_MSI_IsReady+0x18>
 8005336:	2300      	movs	r3, #0
}
 8005338:	4618      	mov	r0, r3
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr

08005342 <LL_RCC_MSI_SetRange>:
{
 8005342:	b480      	push	{r7}
 8005344:	b083      	sub	sp, #12
 8005346:	af00      	add	r7, sp, #0
 8005348:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800534a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005354:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	4313      	orrs	r3, r2
 800535c:	600b      	str	r3, [r1, #0]
}
 800535e:	bf00      	nop
 8005360:	370c      	adds	r7, #12
 8005362:	46bd      	mov	sp, r7
 8005364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005368:	4770      	bx	lr

0800536a <LL_RCC_MSI_GetRange>:
{
 800536a:	b480      	push	{r7}
 800536c:	b083      	sub	sp, #12
 800536e:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8005370:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800537a:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2bb0      	cmp	r3, #176	@ 0xb0
 8005380:	d901      	bls.n	8005386 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8005382:	23b0      	movs	r3, #176	@ 0xb0
 8005384:	607b      	str	r3, [r7, #4]
  return msiRange;
 8005386:	687b      	ldr	r3, [r7, #4]
}
 8005388:	4618      	mov	r0, r3
 800538a:	370c      	adds	r7, #12
 800538c:	46bd      	mov	sp, r7
 800538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005392:	4770      	bx	lr

08005394 <LL_RCC_MSI_SetCalibTrimming>:
{
 8005394:	b480      	push	{r7}
 8005396:	b083      	sub	sp, #12
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800539c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	021b      	lsls	r3, r3, #8
 80053aa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80053ae:	4313      	orrs	r3, r2
 80053b0:	604b      	str	r3, [r1, #4]
}
 80053b2:	bf00      	nop
 80053b4:	370c      	adds	r7, #12
 80053b6:	46bd      	mov	sp, r7
 80053b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053bc:	4770      	bx	lr

080053be <LL_RCC_SetSysClkSource>:
{
 80053be:	b480      	push	{r7}
 80053c0:	b083      	sub	sp, #12
 80053c2:	af00      	add	r7, sp, #0
 80053c4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80053c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80053ca:	689b      	ldr	r3, [r3, #8]
 80053cc:	f023 0203 	bic.w	r2, r3, #3
 80053d0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	4313      	orrs	r3, r2
 80053d8:	608b      	str	r3, [r1, #8]
}
 80053da:	bf00      	nop
 80053dc:	370c      	adds	r7, #12
 80053de:	46bd      	mov	sp, r7
 80053e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e4:	4770      	bx	lr

080053e6 <LL_RCC_GetSysClkSource>:
{
 80053e6:	b480      	push	{r7}
 80053e8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80053ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	f003 030c 	and.w	r3, r3, #12
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	46bd      	mov	sp, r7
 80053f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fc:	4770      	bx	lr

080053fe <LL_RCC_SetAHBPrescaler>:
{
 80053fe:	b480      	push	{r7}
 8005400:	b083      	sub	sp, #12
 8005402:	af00      	add	r7, sp, #0
 8005404:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8005406:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800540a:	689b      	ldr	r3, [r3, #8]
 800540c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005410:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	4313      	orrs	r3, r2
 8005418:	608b      	str	r3, [r1, #8]
}
 800541a:	bf00      	nop
 800541c:	370c      	adds	r7, #12
 800541e:	46bd      	mov	sp, r7
 8005420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005424:	4770      	bx	lr

08005426 <LL_C2_RCC_SetAHBPrescaler>:
{
 8005426:	b480      	push	{r7}
 8005428:	b083      	sub	sp, #12
 800542a:	af00      	add	r7, sp, #0
 800542c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800542e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005432:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005436:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800543a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	4313      	orrs	r3, r2
 8005442:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8005446:	bf00      	nop
 8005448:	370c      	adds	r7, #12
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr

08005452 <LL_RCC_SetAHB4Prescaler>:
{
 8005452:	b480      	push	{r7}
 8005454:	b083      	sub	sp, #12
 8005456:	af00      	add	r7, sp, #0
 8005458:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800545a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800545e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005462:	f023 020f 	bic.w	r2, r3, #15
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	091b      	lsrs	r3, r3, #4
 800546a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800546e:	4313      	orrs	r3, r2
 8005470:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8005474:	bf00      	nop
 8005476:	370c      	adds	r7, #12
 8005478:	46bd      	mov	sp, r7
 800547a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547e:	4770      	bx	lr

08005480 <LL_RCC_SetAPB1Prescaler>:
{
 8005480:	b480      	push	{r7}
 8005482:	b083      	sub	sp, #12
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8005488:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005492:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	4313      	orrs	r3, r2
 800549a:	608b      	str	r3, [r1, #8]
}
 800549c:	bf00      	nop
 800549e:	370c      	adds	r7, #12
 80054a0:	46bd      	mov	sp, r7
 80054a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a6:	4770      	bx	lr

080054a8 <LL_RCC_SetAPB2Prescaler>:
{
 80054a8:	b480      	push	{r7}
 80054aa:	b083      	sub	sp, #12
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80054b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80054b4:	689b      	ldr	r3, [r3, #8]
 80054b6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80054ba:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	4313      	orrs	r3, r2
 80054c2:	608b      	str	r3, [r1, #8]
}
 80054c4:	bf00      	nop
 80054c6:	370c      	adds	r7, #12
 80054c8:	46bd      	mov	sp, r7
 80054ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ce:	4770      	bx	lr

080054d0 <LL_RCC_GetAHBPrescaler>:
{
 80054d0:	b480      	push	{r7}
 80054d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80054d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80054de:	4618      	mov	r0, r3
 80054e0:	46bd      	mov	sp, r7
 80054e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e6:	4770      	bx	lr

080054e8 <LL_RCC_GetAHB4Prescaler>:
{
 80054e8:	b480      	push	{r7}
 80054ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80054ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80054f0:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80054f4:	011b      	lsls	r3, r3, #4
 80054f6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	46bd      	mov	sp, r7
 80054fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005502:	4770      	bx	lr

08005504 <LL_RCC_GetAPB1Prescaler>:
{
 8005504:	b480      	push	{r7}
 8005506:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8005508:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800550c:	689b      	ldr	r3, [r3, #8]
 800550e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8005512:	4618      	mov	r0, r3
 8005514:	46bd      	mov	sp, r7
 8005516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551a:	4770      	bx	lr

0800551c <LL_RCC_GetAPB2Prescaler>:
{
 800551c:	b480      	push	{r7}
 800551e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8005520:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005524:	689b      	ldr	r3, [r3, #8]
 8005526:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 800552a:	4618      	mov	r0, r3
 800552c:	46bd      	mov	sp, r7
 800552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005532:	4770      	bx	lr

08005534 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8005534:	b480      	push	{r7}
 8005536:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8005538:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005542:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005546:	6013      	str	r3, [r2, #0]
}
 8005548:	bf00      	nop
 800554a:	46bd      	mov	sp, r7
 800554c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005550:	4770      	bx	lr

08005552 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8005552:	b480      	push	{r7}
 8005554:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8005556:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005560:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005564:	6013      	str	r3, [r2, #0]
}
 8005566:	bf00      	nop
 8005568:	46bd      	mov	sp, r7
 800556a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556e:	4770      	bx	lr

08005570 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8005570:	b480      	push	{r7}
 8005572:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005574:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800557e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005582:	d101      	bne.n	8005588 <LL_RCC_PLL_IsReady+0x18>
 8005584:	2301      	movs	r3, #1
 8005586:	e000      	b.n	800558a <LL_RCC_PLL_IsReady+0x1a>
 8005588:	2300      	movs	r3, #0
}
 800558a:	4618      	mov	r0, r3
 800558c:	46bd      	mov	sp, r7
 800558e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005592:	4770      	bx	lr

08005594 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8005594:	b480      	push	{r7}
 8005596:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005598:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800559c:	68db      	ldr	r3, [r3, #12]
 800559e:	0a1b      	lsrs	r3, r3, #8
 80055a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	46bd      	mov	sp, r7
 80055a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ac:	4770      	bx	lr

080055ae <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80055ae:	b480      	push	{r7}
 80055b0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80055b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80055b6:	68db      	ldr	r3, [r3, #12]
 80055b8:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 80055bc:	4618      	mov	r0, r3
 80055be:	46bd      	mov	sp, r7
 80055c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c4:	4770      	bx	lr

080055c6 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80055c6:	b480      	push	{r7}
 80055c8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80055ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80055ce:	68db      	ldr	r3, [r3, #12]
 80055d0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	46bd      	mov	sp, r7
 80055d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055dc:	4770      	bx	lr

080055de <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80055de:	b480      	push	{r7}
 80055e0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80055e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80055e6:	68db      	ldr	r3, [r3, #12]
 80055e8:	f003 0303 	and.w	r3, r3, #3
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	46bd      	mov	sp, r7
 80055f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f4:	4770      	bx	lr

080055f6 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80055f6:	b480      	push	{r7}
 80055f8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80055fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80055fe:	689b      	ldr	r3, [r3, #8]
 8005600:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005604:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005608:	d101      	bne.n	800560e <LL_RCC_IsActiveFlag_HPRE+0x18>
 800560a:	2301      	movs	r3, #1
 800560c:	e000      	b.n	8005610 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800560e:	2300      	movs	r3, #0
}
 8005610:	4618      	mov	r0, r3
 8005612:	46bd      	mov	sp, r7
 8005614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005618:	4770      	bx	lr

0800561a <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800561a:	b480      	push	{r7}
 800561c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800561e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005622:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005626:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800562a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800562e:	d101      	bne.n	8005634 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8005630:	2301      	movs	r3, #1
 8005632:	e000      	b.n	8005636 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8005634:	2300      	movs	r3, #0
}
 8005636:	4618      	mov	r0, r3
 8005638:	46bd      	mov	sp, r7
 800563a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563e:	4770      	bx	lr

08005640 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8005640:	b480      	push	{r7}
 8005642:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8005644:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005648:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800564c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005650:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005654:	d101      	bne.n	800565a <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8005656:	2301      	movs	r3, #1
 8005658:	e000      	b.n	800565c <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800565a:	2300      	movs	r3, #0
}
 800565c:	4618      	mov	r0, r3
 800565e:	46bd      	mov	sp, r7
 8005660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005664:	4770      	bx	lr

08005666 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8005666:	b480      	push	{r7}
 8005668:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800566a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005674:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005678:	d101      	bne.n	800567e <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800567a:	2301      	movs	r3, #1
 800567c:	e000      	b.n	8005680 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800567e:	2300      	movs	r3, #0
}
 8005680:	4618      	mov	r0, r3
 8005682:	46bd      	mov	sp, r7
 8005684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005688:	4770      	bx	lr

0800568a <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800568a:	b480      	push	{r7}
 800568c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800568e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005692:	689b      	ldr	r3, [r3, #8]
 8005694:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005698:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800569c:	d101      	bne.n	80056a2 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800569e:	2301      	movs	r3, #1
 80056a0:	e000      	b.n	80056a4 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80056a2:	2300      	movs	r3, #0
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	46bd      	mov	sp, r7
 80056a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ac:	4770      	bx	lr
	...

080056b0 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80056b0:	b590      	push	{r4, r7, lr}
 80056b2:	b08d      	sub	sp, #52	@ 0x34
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d101      	bne.n	80056c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80056be:	2301      	movs	r3, #1
 80056c0:	e363      	b.n	8005d8a <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f003 0320 	and.w	r3, r3, #32
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	f000 808d 	beq.w	80057ea <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80056d0:	f7ff fe89 	bl	80053e6 <LL_RCC_GetSysClkSource>
 80056d4:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80056d6:	f7ff ff82 	bl	80055de <LL_RCC_PLL_GetMainSource>
 80056da:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80056dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d005      	beq.n	80056ee <HAL_RCC_OscConfig+0x3e>
 80056e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056e4:	2b0c      	cmp	r3, #12
 80056e6:	d147      	bne.n	8005778 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80056e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056ea:	2b01      	cmp	r3, #1
 80056ec:	d144      	bne.n	8005778 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	69db      	ldr	r3, [r3, #28]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d101      	bne.n	80056fa <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80056f6:	2301      	movs	r3, #1
 80056f8:	e347      	b.n	8005d8a <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80056fe:	f7ff fe34 	bl	800536a <LL_RCC_MSI_GetRange>
 8005702:	4603      	mov	r3, r0
 8005704:	429c      	cmp	r4, r3
 8005706:	d914      	bls.n	8005732 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800570c:	4618      	mov	r0, r3
 800570e:	f000 fd2f 	bl	8006170 <RCC_SetFlashLatencyFromMSIRange>
 8005712:	4603      	mov	r3, r0
 8005714:	2b00      	cmp	r3, #0
 8005716:	d001      	beq.n	800571c <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8005718:	2301      	movs	r3, #1
 800571a:	e336      	b.n	8005d8a <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005720:	4618      	mov	r0, r3
 8005722:	f7ff fe0e 	bl	8005342 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6a1b      	ldr	r3, [r3, #32]
 800572a:	4618      	mov	r0, r3
 800572c:	f7ff fe32 	bl	8005394 <LL_RCC_MSI_SetCalibTrimming>
 8005730:	e013      	b.n	800575a <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005736:	4618      	mov	r0, r3
 8005738:	f7ff fe03 	bl	8005342 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6a1b      	ldr	r3, [r3, #32]
 8005740:	4618      	mov	r0, r3
 8005742:	f7ff fe27 	bl	8005394 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800574a:	4618      	mov	r0, r3
 800574c:	f000 fd10 	bl	8006170 <RCC_SetFlashLatencyFromMSIRange>
 8005750:	4603      	mov	r3, r0
 8005752:	2b00      	cmp	r3, #0
 8005754:	d001      	beq.n	800575a <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8005756:	2301      	movs	r3, #1
 8005758:	e317      	b.n	8005d8a <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800575a:	f000 fcc9 	bl	80060f0 <HAL_RCC_GetHCLKFreq>
 800575e:	4603      	mov	r3, r0
 8005760:	4aa4      	ldr	r2, [pc, #656]	@ (80059f4 <HAL_RCC_OscConfig+0x344>)
 8005762:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005764:	4ba4      	ldr	r3, [pc, #656]	@ (80059f8 <HAL_RCC_OscConfig+0x348>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4618      	mov	r0, r3
 800576a:	f7fd feef 	bl	800354c <HAL_InitTick>
 800576e:	4603      	mov	r3, r0
 8005770:	2b00      	cmp	r3, #0
 8005772:	d039      	beq.n	80057e8 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8005774:	2301      	movs	r3, #1
 8005776:	e308      	b.n	8005d8a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	69db      	ldr	r3, [r3, #28]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d01e      	beq.n	80057be <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005780:	f7ff fdb0 	bl	80052e4 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005784:	f7fd ff30 	bl	80035e8 <HAL_GetTick>
 8005788:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800578a:	e008      	b.n	800579e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800578c:	f7fd ff2c 	bl	80035e8 <HAL_GetTick>
 8005790:	4602      	mov	r2, r0
 8005792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005794:	1ad3      	subs	r3, r2, r3
 8005796:	2b02      	cmp	r3, #2
 8005798:	d901      	bls.n	800579e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800579a:	2303      	movs	r3, #3
 800579c:	e2f5      	b.n	8005d8a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800579e:	f7ff fdbf 	bl	8005320 <LL_RCC_MSI_IsReady>
 80057a2:	4603      	mov	r3, r0
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d0f1      	beq.n	800578c <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057ac:	4618      	mov	r0, r3
 80057ae:	f7ff fdc8 	bl	8005342 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6a1b      	ldr	r3, [r3, #32]
 80057b6:	4618      	mov	r0, r3
 80057b8:	f7ff fdec 	bl	8005394 <LL_RCC_MSI_SetCalibTrimming>
 80057bc:	e015      	b.n	80057ea <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80057be:	f7ff fda0 	bl	8005302 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80057c2:	f7fd ff11 	bl	80035e8 <HAL_GetTick>
 80057c6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80057c8:	e008      	b.n	80057dc <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80057ca:	f7fd ff0d 	bl	80035e8 <HAL_GetTick>
 80057ce:	4602      	mov	r2, r0
 80057d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057d2:	1ad3      	subs	r3, r2, r3
 80057d4:	2b02      	cmp	r3, #2
 80057d6:	d901      	bls.n	80057dc <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80057d8:	2303      	movs	r3, #3
 80057da:	e2d6      	b.n	8005d8a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 80057dc:	f7ff fda0 	bl	8005320 <LL_RCC_MSI_IsReady>
 80057e0:	4603      	mov	r3, r0
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d1f1      	bne.n	80057ca <HAL_RCC_OscConfig+0x11a>
 80057e6:	e000      	b.n	80057ea <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80057e8:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f003 0301 	and.w	r3, r3, #1
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d047      	beq.n	8005886 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80057f6:	f7ff fdf6 	bl	80053e6 <LL_RCC_GetSysClkSource>
 80057fa:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80057fc:	f7ff feef 	bl	80055de <LL_RCC_PLL_GetMainSource>
 8005800:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8005802:	6a3b      	ldr	r3, [r7, #32]
 8005804:	2b08      	cmp	r3, #8
 8005806:	d005      	beq.n	8005814 <HAL_RCC_OscConfig+0x164>
 8005808:	6a3b      	ldr	r3, [r7, #32]
 800580a:	2b0c      	cmp	r3, #12
 800580c:	d108      	bne.n	8005820 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800580e:	69fb      	ldr	r3, [r7, #28]
 8005810:	2b03      	cmp	r3, #3
 8005812:	d105      	bne.n	8005820 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d134      	bne.n	8005886 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 800581c:	2301      	movs	r3, #1
 800581e:	e2b4      	b.n	8005d8a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005828:	d102      	bne.n	8005830 <HAL_RCC_OscConfig+0x180>
 800582a:	f7ff fbdd 	bl	8004fe8 <LL_RCC_HSE_Enable>
 800582e:	e001      	b.n	8005834 <HAL_RCC_OscConfig+0x184>
 8005830:	f7ff fbe9 	bl	8005006 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d012      	beq.n	8005862 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800583c:	f7fd fed4 	bl	80035e8 <HAL_GetTick>
 8005840:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8005842:	e008      	b.n	8005856 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005844:	f7fd fed0 	bl	80035e8 <HAL_GetTick>
 8005848:	4602      	mov	r2, r0
 800584a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800584c:	1ad3      	subs	r3, r2, r3
 800584e:	2b64      	cmp	r3, #100	@ 0x64
 8005850:	d901      	bls.n	8005856 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8005852:	2303      	movs	r3, #3
 8005854:	e299      	b.n	8005d8a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8005856:	f7ff fbe5 	bl	8005024 <LL_RCC_HSE_IsReady>
 800585a:	4603      	mov	r3, r0
 800585c:	2b00      	cmp	r3, #0
 800585e:	d0f1      	beq.n	8005844 <HAL_RCC_OscConfig+0x194>
 8005860:	e011      	b.n	8005886 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005862:	f7fd fec1 	bl	80035e8 <HAL_GetTick>
 8005866:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8005868:	e008      	b.n	800587c <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800586a:	f7fd febd 	bl	80035e8 <HAL_GetTick>
 800586e:	4602      	mov	r2, r0
 8005870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005872:	1ad3      	subs	r3, r2, r3
 8005874:	2b64      	cmp	r3, #100	@ 0x64
 8005876:	d901      	bls.n	800587c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8005878:	2303      	movs	r3, #3
 800587a:	e286      	b.n	8005d8a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 800587c:	f7ff fbd2 	bl	8005024 <LL_RCC_HSE_IsReady>
 8005880:	4603      	mov	r3, r0
 8005882:	2b00      	cmp	r3, #0
 8005884:	d1f1      	bne.n	800586a <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f003 0302 	and.w	r3, r3, #2
 800588e:	2b00      	cmp	r3, #0
 8005890:	d04c      	beq.n	800592c <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005892:	f7ff fda8 	bl	80053e6 <LL_RCC_GetSysClkSource>
 8005896:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005898:	f7ff fea1 	bl	80055de <LL_RCC_PLL_GetMainSource>
 800589c:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800589e:	69bb      	ldr	r3, [r7, #24]
 80058a0:	2b04      	cmp	r3, #4
 80058a2:	d005      	beq.n	80058b0 <HAL_RCC_OscConfig+0x200>
 80058a4:	69bb      	ldr	r3, [r7, #24]
 80058a6:	2b0c      	cmp	r3, #12
 80058a8:	d10e      	bne.n	80058c8 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	2b02      	cmp	r3, #2
 80058ae:	d10b      	bne.n	80058c8 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	68db      	ldr	r3, [r3, #12]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d101      	bne.n	80058bc <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 80058b8:	2301      	movs	r3, #1
 80058ba:	e266      	b.n	8005d8a <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	691b      	ldr	r3, [r3, #16]
 80058c0:	4618      	mov	r0, r3
 80058c2:	f7ff fbf1 	bl	80050a8 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80058c6:	e031      	b.n	800592c <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	68db      	ldr	r3, [r3, #12]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d019      	beq.n	8005904 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80058d0:	f7ff fbba 	bl	8005048 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058d4:	f7fd fe88 	bl	80035e8 <HAL_GetTick>
 80058d8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80058da:	e008      	b.n	80058ee <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058dc:	f7fd fe84 	bl	80035e8 <HAL_GetTick>
 80058e0:	4602      	mov	r2, r0
 80058e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058e4:	1ad3      	subs	r3, r2, r3
 80058e6:	2b02      	cmp	r3, #2
 80058e8:	d901      	bls.n	80058ee <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80058ea:	2303      	movs	r3, #3
 80058ec:	e24d      	b.n	8005d8a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 80058ee:	f7ff fbc9 	bl	8005084 <LL_RCC_HSI_IsReady>
 80058f2:	4603      	mov	r3, r0
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d0f1      	beq.n	80058dc <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	691b      	ldr	r3, [r3, #16]
 80058fc:	4618      	mov	r0, r3
 80058fe:	f7ff fbd3 	bl	80050a8 <LL_RCC_HSI_SetCalibTrimming>
 8005902:	e013      	b.n	800592c <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005904:	f7ff fbaf 	bl	8005066 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005908:	f7fd fe6e 	bl	80035e8 <HAL_GetTick>
 800590c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800590e:	e008      	b.n	8005922 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005910:	f7fd fe6a 	bl	80035e8 <HAL_GetTick>
 8005914:	4602      	mov	r2, r0
 8005916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005918:	1ad3      	subs	r3, r2, r3
 800591a:	2b02      	cmp	r3, #2
 800591c:	d901      	bls.n	8005922 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800591e:	2303      	movs	r3, #3
 8005920:	e233      	b.n	8005d8a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8005922:	f7ff fbaf 	bl	8005084 <LL_RCC_HSI_IsReady>
 8005926:	4603      	mov	r3, r0
 8005928:	2b00      	cmp	r3, #0
 800592a:	d1f1      	bne.n	8005910 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f003 0308 	and.w	r3, r3, #8
 8005934:	2b00      	cmp	r3, #0
 8005936:	d106      	bne.n	8005946 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8005940:	2b00      	cmp	r3, #0
 8005942:	f000 80a3 	beq.w	8005a8c <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	695b      	ldr	r3, [r3, #20]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d076      	beq.n	8005a3c <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f003 0310 	and.w	r3, r3, #16
 8005956:	2b00      	cmp	r3, #0
 8005958:	d046      	beq.n	80059e8 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800595a:	f7ff fc66 	bl	800522a <LL_RCC_LSI1_IsReady>
 800595e:	4603      	mov	r3, r0
 8005960:	2b00      	cmp	r3, #0
 8005962:	d113      	bne.n	800598c <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8005964:	f7ff fc3f 	bl	80051e6 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005968:	f7fd fe3e 	bl	80035e8 <HAL_GetTick>
 800596c:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800596e:	e008      	b.n	8005982 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005970:	f7fd fe3a 	bl	80035e8 <HAL_GetTick>
 8005974:	4602      	mov	r2, r0
 8005976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005978:	1ad3      	subs	r3, r2, r3
 800597a:	2b02      	cmp	r3, #2
 800597c:	d901      	bls.n	8005982 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800597e:	2303      	movs	r3, #3
 8005980:	e203      	b.n	8005d8a <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8005982:	f7ff fc52 	bl	800522a <LL_RCC_LSI1_IsReady>
 8005986:	4603      	mov	r3, r0
 8005988:	2b00      	cmp	r3, #0
 800598a:	d0f1      	beq.n	8005970 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800598c:	f7ff fc5f 	bl	800524e <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005990:	f7fd fe2a 	bl	80035e8 <HAL_GetTick>
 8005994:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8005996:	e008      	b.n	80059aa <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005998:	f7fd fe26 	bl	80035e8 <HAL_GetTick>
 800599c:	4602      	mov	r2, r0
 800599e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059a0:	1ad3      	subs	r3, r2, r3
 80059a2:	2b03      	cmp	r3, #3
 80059a4:	d901      	bls.n	80059aa <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 80059a6:	2303      	movs	r3, #3
 80059a8:	e1ef      	b.n	8005d8a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80059aa:	f7ff fc72 	bl	8005292 <LL_RCC_LSI2_IsReady>
 80059ae:	4603      	mov	r3, r0
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d0f1      	beq.n	8005998 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	699b      	ldr	r3, [r3, #24]
 80059b8:	4618      	mov	r0, r3
 80059ba:	f7ff fc7c 	bl	80052b6 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80059be:	f7ff fc23 	bl	8005208 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059c2:	f7fd fe11 	bl	80035e8 <HAL_GetTick>
 80059c6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80059c8:	e008      	b.n	80059dc <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80059ca:	f7fd fe0d 	bl	80035e8 <HAL_GetTick>
 80059ce:	4602      	mov	r2, r0
 80059d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059d2:	1ad3      	subs	r3, r2, r3
 80059d4:	2b02      	cmp	r3, #2
 80059d6:	d901      	bls.n	80059dc <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80059d8:	2303      	movs	r3, #3
 80059da:	e1d6      	b.n	8005d8a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80059dc:	f7ff fc25 	bl	800522a <LL_RCC_LSI1_IsReady>
 80059e0:	4603      	mov	r3, r0
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d1f1      	bne.n	80059ca <HAL_RCC_OscConfig+0x31a>
 80059e6:	e051      	b.n	8005a8c <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80059e8:	f7ff fbfd 	bl	80051e6 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059ec:	f7fd fdfc 	bl	80035e8 <HAL_GetTick>
 80059f0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80059f2:	e00c      	b.n	8005a0e <HAL_RCC_OscConfig+0x35e>
 80059f4:	20000008 	.word	0x20000008
 80059f8:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80059fc:	f7fd fdf4 	bl	80035e8 <HAL_GetTick>
 8005a00:	4602      	mov	r2, r0
 8005a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a04:	1ad3      	subs	r3, r2, r3
 8005a06:	2b02      	cmp	r3, #2
 8005a08:	d901      	bls.n	8005a0e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8005a0a:	2303      	movs	r3, #3
 8005a0c:	e1bd      	b.n	8005d8a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8005a0e:	f7ff fc0c 	bl	800522a <LL_RCC_LSI1_IsReady>
 8005a12:	4603      	mov	r3, r0
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d0f1      	beq.n	80059fc <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8005a18:	f7ff fc2a 	bl	8005270 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8005a1c:	e008      	b.n	8005a30 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005a1e:	f7fd fde3 	bl	80035e8 <HAL_GetTick>
 8005a22:	4602      	mov	r2, r0
 8005a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a26:	1ad3      	subs	r3, r2, r3
 8005a28:	2b03      	cmp	r3, #3
 8005a2a:	d901      	bls.n	8005a30 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8005a2c:	2303      	movs	r3, #3
 8005a2e:	e1ac      	b.n	8005d8a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8005a30:	f7ff fc2f 	bl	8005292 <LL_RCC_LSI2_IsReady>
 8005a34:	4603      	mov	r3, r0
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d1f1      	bne.n	8005a1e <HAL_RCC_OscConfig+0x36e>
 8005a3a:	e027      	b.n	8005a8c <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8005a3c:	f7ff fc18 	bl	8005270 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a40:	f7fd fdd2 	bl	80035e8 <HAL_GetTick>
 8005a44:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8005a46:	e008      	b.n	8005a5a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005a48:	f7fd fdce 	bl	80035e8 <HAL_GetTick>
 8005a4c:	4602      	mov	r2, r0
 8005a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a50:	1ad3      	subs	r3, r2, r3
 8005a52:	2b03      	cmp	r3, #3
 8005a54:	d901      	bls.n	8005a5a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005a56:	2303      	movs	r3, #3
 8005a58:	e197      	b.n	8005d8a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8005a5a:	f7ff fc1a 	bl	8005292 <LL_RCC_LSI2_IsReady>
 8005a5e:	4603      	mov	r3, r0
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d1f1      	bne.n	8005a48 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8005a64:	f7ff fbd0 	bl	8005208 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a68:	f7fd fdbe 	bl	80035e8 <HAL_GetTick>
 8005a6c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8005a6e:	e008      	b.n	8005a82 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005a70:	f7fd fdba 	bl	80035e8 <HAL_GetTick>
 8005a74:	4602      	mov	r2, r0
 8005a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a78:	1ad3      	subs	r3, r2, r3
 8005a7a:	2b02      	cmp	r3, #2
 8005a7c:	d901      	bls.n	8005a82 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8005a7e:	2303      	movs	r3, #3
 8005a80:	e183      	b.n	8005d8a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8005a82:	f7ff fbd2 	bl	800522a <LL_RCC_LSI1_IsReady>
 8005a86:	4603      	mov	r3, r0
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d1f1      	bne.n	8005a70 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f003 0304 	and.w	r3, r3, #4
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d05b      	beq.n	8005b50 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a98:	4ba7      	ldr	r3, [pc, #668]	@ (8005d38 <HAL_RCC_OscConfig+0x688>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d114      	bne.n	8005ace <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005aa4:	f7ff fa70 	bl	8004f88 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005aa8:	f7fd fd9e 	bl	80035e8 <HAL_GetTick>
 8005aac:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005aae:	e008      	b.n	8005ac2 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ab0:	f7fd fd9a 	bl	80035e8 <HAL_GetTick>
 8005ab4:	4602      	mov	r2, r0
 8005ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ab8:	1ad3      	subs	r3, r2, r3
 8005aba:	2b02      	cmp	r3, #2
 8005abc:	d901      	bls.n	8005ac2 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8005abe:	2303      	movs	r3, #3
 8005ac0:	e163      	b.n	8005d8a <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005ac2:	4b9d      	ldr	r3, [pc, #628]	@ (8005d38 <HAL_RCC_OscConfig+0x688>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d0f0      	beq.n	8005ab0 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	689b      	ldr	r3, [r3, #8]
 8005ad2:	2b01      	cmp	r3, #1
 8005ad4:	d102      	bne.n	8005adc <HAL_RCC_OscConfig+0x42c>
 8005ad6:	f7ff fb30 	bl	800513a <LL_RCC_LSE_Enable>
 8005ada:	e00c      	b.n	8005af6 <HAL_RCC_OscConfig+0x446>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	689b      	ldr	r3, [r3, #8]
 8005ae0:	2b05      	cmp	r3, #5
 8005ae2:	d104      	bne.n	8005aee <HAL_RCC_OscConfig+0x43e>
 8005ae4:	f7ff fb4b 	bl	800517e <LL_RCC_LSE_EnableBypass>
 8005ae8:	f7ff fb27 	bl	800513a <LL_RCC_LSE_Enable>
 8005aec:	e003      	b.n	8005af6 <HAL_RCC_OscConfig+0x446>
 8005aee:	f7ff fb35 	bl	800515c <LL_RCC_LSE_Disable>
 8005af2:	f7ff fb55 	bl	80051a0 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	689b      	ldr	r3, [r3, #8]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d014      	beq.n	8005b28 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005afe:	f7fd fd73 	bl	80035e8 <HAL_GetTick>
 8005b02:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8005b04:	e00a      	b.n	8005b1c <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b06:	f7fd fd6f 	bl	80035e8 <HAL_GetTick>
 8005b0a:	4602      	mov	r2, r0
 8005b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b0e:	1ad3      	subs	r3, r2, r3
 8005b10:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d901      	bls.n	8005b1c <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8005b18:	2303      	movs	r3, #3
 8005b1a:	e136      	b.n	8005d8a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8005b1c:	f7ff fb51 	bl	80051c2 <LL_RCC_LSE_IsReady>
 8005b20:	4603      	mov	r3, r0
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d0ef      	beq.n	8005b06 <HAL_RCC_OscConfig+0x456>
 8005b26:	e013      	b.n	8005b50 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b28:	f7fd fd5e 	bl	80035e8 <HAL_GetTick>
 8005b2c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8005b2e:	e00a      	b.n	8005b46 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b30:	f7fd fd5a 	bl	80035e8 <HAL_GetTick>
 8005b34:	4602      	mov	r2, r0
 8005b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b38:	1ad3      	subs	r3, r2, r3
 8005b3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d901      	bls.n	8005b46 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8005b42:	2303      	movs	r3, #3
 8005b44:	e121      	b.n	8005d8a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8005b46:	f7ff fb3c 	bl	80051c2 <LL_RCC_LSE_IsReady>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d1ef      	bne.n	8005b30 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d02c      	beq.n	8005bb6 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d014      	beq.n	8005b8e <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005b64:	f7ff fab5 	bl	80050d2 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b68:	f7fd fd3e 	bl	80035e8 <HAL_GetTick>
 8005b6c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8005b6e:	e008      	b.n	8005b82 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005b70:	f7fd fd3a 	bl	80035e8 <HAL_GetTick>
 8005b74:	4602      	mov	r2, r0
 8005b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b78:	1ad3      	subs	r3, r2, r3
 8005b7a:	2b02      	cmp	r3, #2
 8005b7c:	d901      	bls.n	8005b82 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8005b7e:	2303      	movs	r3, #3
 8005b80:	e103      	b.n	8005d8a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8005b82:	f7ff fac8 	bl	8005116 <LL_RCC_HSI48_IsReady>
 8005b86:	4603      	mov	r3, r0
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d0f1      	beq.n	8005b70 <HAL_RCC_OscConfig+0x4c0>
 8005b8c:	e013      	b.n	8005bb6 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005b8e:	f7ff fab1 	bl	80050f4 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b92:	f7fd fd29 	bl	80035e8 <HAL_GetTick>
 8005b96:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8005b98:	e008      	b.n	8005bac <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005b9a:	f7fd fd25 	bl	80035e8 <HAL_GetTick>
 8005b9e:	4602      	mov	r2, r0
 8005ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ba2:	1ad3      	subs	r3, r2, r3
 8005ba4:	2b02      	cmp	r3, #2
 8005ba6:	d901      	bls.n	8005bac <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8005ba8:	2303      	movs	r3, #3
 8005baa:	e0ee      	b.n	8005d8a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8005bac:	f7ff fab3 	bl	8005116 <LL_RCC_HSI48_IsReady>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d1f1      	bne.n	8005b9a <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	f000 80e4 	beq.w	8005d88 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005bc0:	f7ff fc11 	bl	80053e6 <LL_RCC_GetSysClkSource>
 8005bc4:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8005bc6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005bca:	68db      	ldr	r3, [r3, #12]
 8005bcc:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bd2:	2b02      	cmp	r3, #2
 8005bd4:	f040 80b4 	bne.w	8005d40 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	f003 0203 	and.w	r2, r3, #3
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005be2:	429a      	cmp	r2, r3
 8005be4:	d123      	bne.n	8005c2e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005bf0:	429a      	cmp	r2, r3
 8005bf2:	d11c      	bne.n	8005c2e <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	0a1b      	lsrs	r3, r3, #8
 8005bf8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005c00:	429a      	cmp	r2, r3
 8005c02:	d114      	bne.n	8005c2e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8005c0e:	429a      	cmp	r2, r3
 8005c10:	d10d      	bne.n	8005c2e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005c1c:	429a      	cmp	r2, r3
 8005c1e:	d106      	bne.n	8005c2e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005c2a:	429a      	cmp	r2, r3
 8005c2c:	d05d      	beq.n	8005cea <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	2b0c      	cmp	r3, #12
 8005c32:	d058      	beq.n	8005ce6 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005c34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d001      	beq.n	8005c46 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8005c42:	2301      	movs	r3, #1
 8005c44:	e0a1      	b.n	8005d8a <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005c46:	f7ff fc84 	bl	8005552 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005c4a:	f7fd fccd 	bl	80035e8 <HAL_GetTick>
 8005c4e:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c50:	e008      	b.n	8005c64 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c52:	f7fd fcc9 	bl	80035e8 <HAL_GetTick>
 8005c56:	4602      	mov	r2, r0
 8005c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c5a:	1ad3      	subs	r3, r2, r3
 8005c5c:	2b02      	cmp	r3, #2
 8005c5e:	d901      	bls.n	8005c64 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8005c60:	2303      	movs	r3, #3
 8005c62:	e092      	b.n	8005d8a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c64:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d1ef      	bne.n	8005c52 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005c72:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c76:	68da      	ldr	r2, [r3, #12]
 8005c78:	4b30      	ldr	r3, [pc, #192]	@ (8005d3c <HAL_RCC_OscConfig+0x68c>)
 8005c7a:	4013      	ands	r3, r2
 8005c7c:	687a      	ldr	r2, [r7, #4]
 8005c7e:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8005c80:	687a      	ldr	r2, [r7, #4]
 8005c82:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005c84:	4311      	orrs	r1, r2
 8005c86:	687a      	ldr	r2, [r7, #4]
 8005c88:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005c8a:	0212      	lsls	r2, r2, #8
 8005c8c:	4311      	orrs	r1, r2
 8005c8e:	687a      	ldr	r2, [r7, #4]
 8005c90:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005c92:	4311      	orrs	r1, r2
 8005c94:	687a      	ldr	r2, [r7, #4]
 8005c96:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005c98:	4311      	orrs	r1, r2
 8005c9a:	687a      	ldr	r2, [r7, #4]
 8005c9c:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8005c9e:	430a      	orrs	r2, r1
 8005ca0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005ca8:	f7ff fc44 	bl	8005534 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005cac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005cb0:	68db      	ldr	r3, [r3, #12]
 8005cb2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005cb6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005cba:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005cbc:	f7fd fc94 	bl	80035e8 <HAL_GetTick>
 8005cc0:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005cc2:	e008      	b.n	8005cd6 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005cc4:	f7fd fc90 	bl	80035e8 <HAL_GetTick>
 8005cc8:	4602      	mov	r2, r0
 8005cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ccc:	1ad3      	subs	r3, r2, r3
 8005cce:	2b02      	cmp	r3, #2
 8005cd0:	d901      	bls.n	8005cd6 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8005cd2:	2303      	movs	r3, #3
 8005cd4:	e059      	b.n	8005d8a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005cd6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d0ef      	beq.n	8005cc4 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005ce4:	e050      	b.n	8005d88 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	e04f      	b.n	8005d8a <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005cea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d147      	bne.n	8005d88 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005cf8:	f7ff fc1c 	bl	8005534 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005cfc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d00:	68db      	ldr	r3, [r3, #12]
 8005d02:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005d06:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005d0a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005d0c:	f7fd fc6c 	bl	80035e8 <HAL_GetTick>
 8005d10:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d12:	e008      	b.n	8005d26 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d14:	f7fd fc68 	bl	80035e8 <HAL_GetTick>
 8005d18:	4602      	mov	r2, r0
 8005d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d1c:	1ad3      	subs	r3, r2, r3
 8005d1e:	2b02      	cmp	r3, #2
 8005d20:	d901      	bls.n	8005d26 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8005d22:	2303      	movs	r3, #3
 8005d24:	e031      	b.n	8005d8a <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d0ef      	beq.n	8005d14 <HAL_RCC_OscConfig+0x664>
 8005d34:	e028      	b.n	8005d88 <HAL_RCC_OscConfig+0x6d8>
 8005d36:	bf00      	nop
 8005d38:	58000400 	.word	0x58000400
 8005d3c:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	2b0c      	cmp	r3, #12
 8005d44:	d01e      	beq.n	8005d84 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d46:	f7ff fc04 	bl	8005552 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d4a:	f7fd fc4d 	bl	80035e8 <HAL_GetTick>
 8005d4e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d50:	e008      	b.n	8005d64 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d52:	f7fd fc49 	bl	80035e8 <HAL_GetTick>
 8005d56:	4602      	mov	r2, r0
 8005d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d5a:	1ad3      	subs	r3, r2, r3
 8005d5c:	2b02      	cmp	r3, #2
 8005d5e:	d901      	bls.n	8005d64 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8005d60:	2303      	movs	r3, #3
 8005d62:	e012      	b.n	8005d8a <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d64:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d1ef      	bne.n	8005d52 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8005d72:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d76:	68da      	ldr	r2, [r3, #12]
 8005d78:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005d7c:	4b05      	ldr	r3, [pc, #20]	@ (8005d94 <HAL_RCC_OscConfig+0x6e4>)
 8005d7e:	4013      	ands	r3, r2
 8005d80:	60cb      	str	r3, [r1, #12]
 8005d82:	e001      	b.n	8005d88 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005d84:	2301      	movs	r3, #1
 8005d86:	e000      	b.n	8005d8a <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8005d88:	2300      	movs	r3, #0
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3734      	adds	r7, #52	@ 0x34
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd90      	pop	{r4, r7, pc}
 8005d92:	bf00      	nop
 8005d94:	eefefffc 	.word	0xeefefffc

08005d98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b084      	sub	sp, #16
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
 8005da0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d101      	bne.n	8005dac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005da8:	2301      	movs	r3, #1
 8005daa:	e12d      	b.n	8006008 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005dac:	4b98      	ldr	r3, [pc, #608]	@ (8006010 <HAL_RCC_ClockConfig+0x278>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f003 0307 	and.w	r3, r3, #7
 8005db4:	683a      	ldr	r2, [r7, #0]
 8005db6:	429a      	cmp	r2, r3
 8005db8:	d91b      	bls.n	8005df2 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005dba:	4b95      	ldr	r3, [pc, #596]	@ (8006010 <HAL_RCC_ClockConfig+0x278>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f023 0207 	bic.w	r2, r3, #7
 8005dc2:	4993      	ldr	r1, [pc, #588]	@ (8006010 <HAL_RCC_ClockConfig+0x278>)
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005dca:	f7fd fc0d 	bl	80035e8 <HAL_GetTick>
 8005dce:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005dd0:	e008      	b.n	8005de4 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005dd2:	f7fd fc09 	bl	80035e8 <HAL_GetTick>
 8005dd6:	4602      	mov	r2, r0
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	1ad3      	subs	r3, r2, r3
 8005ddc:	2b02      	cmp	r3, #2
 8005dde:	d901      	bls.n	8005de4 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8005de0:	2303      	movs	r3, #3
 8005de2:	e111      	b.n	8006008 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005de4:	4b8a      	ldr	r3, [pc, #552]	@ (8006010 <HAL_RCC_ClockConfig+0x278>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f003 0307 	and.w	r3, r3, #7
 8005dec:	683a      	ldr	r2, [r7, #0]
 8005dee:	429a      	cmp	r2, r3
 8005df0:	d1ef      	bne.n	8005dd2 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f003 0302 	and.w	r3, r3, #2
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d016      	beq.n	8005e2c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	689b      	ldr	r3, [r3, #8]
 8005e02:	4618      	mov	r0, r3
 8005e04:	f7ff fafb 	bl	80053fe <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005e08:	f7fd fbee 	bl	80035e8 <HAL_GetTick>
 8005e0c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005e0e:	e008      	b.n	8005e22 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005e10:	f7fd fbea 	bl	80035e8 <HAL_GetTick>
 8005e14:	4602      	mov	r2, r0
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	1ad3      	subs	r3, r2, r3
 8005e1a:	2b02      	cmp	r3, #2
 8005e1c:	d901      	bls.n	8005e22 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8005e1e:	2303      	movs	r3, #3
 8005e20:	e0f2      	b.n	8006008 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005e22:	f7ff fbe8 	bl	80055f6 <LL_RCC_IsActiveFlag_HPRE>
 8005e26:	4603      	mov	r3, r0
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d0f1      	beq.n	8005e10 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f003 0320 	and.w	r3, r3, #32
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d016      	beq.n	8005e66 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	695b      	ldr	r3, [r3, #20]
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	f7ff faf2 	bl	8005426 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005e42:	f7fd fbd1 	bl	80035e8 <HAL_GetTick>
 8005e46:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005e48:	e008      	b.n	8005e5c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005e4a:	f7fd fbcd 	bl	80035e8 <HAL_GetTick>
 8005e4e:	4602      	mov	r2, r0
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	1ad3      	subs	r3, r2, r3
 8005e54:	2b02      	cmp	r3, #2
 8005e56:	d901      	bls.n	8005e5c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8005e58:	2303      	movs	r3, #3
 8005e5a:	e0d5      	b.n	8006008 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005e5c:	f7ff fbdd 	bl	800561a <LL_RCC_IsActiveFlag_C2HPRE>
 8005e60:	4603      	mov	r3, r0
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d0f1      	beq.n	8005e4a <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d016      	beq.n	8005ea0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	699b      	ldr	r3, [r3, #24]
 8005e76:	4618      	mov	r0, r3
 8005e78:	f7ff faeb 	bl	8005452 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005e7c:	f7fd fbb4 	bl	80035e8 <HAL_GetTick>
 8005e80:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005e82:	e008      	b.n	8005e96 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005e84:	f7fd fbb0 	bl	80035e8 <HAL_GetTick>
 8005e88:	4602      	mov	r2, r0
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	1ad3      	subs	r3, r2, r3
 8005e8e:	2b02      	cmp	r3, #2
 8005e90:	d901      	bls.n	8005e96 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8005e92:	2303      	movs	r3, #3
 8005e94:	e0b8      	b.n	8006008 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005e96:	f7ff fbd3 	bl	8005640 <LL_RCC_IsActiveFlag_SHDHPRE>
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d0f1      	beq.n	8005e84 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f003 0304 	and.w	r3, r3, #4
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d016      	beq.n	8005eda <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	68db      	ldr	r3, [r3, #12]
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	f7ff fae5 	bl	8005480 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005eb6:	f7fd fb97 	bl	80035e8 <HAL_GetTick>
 8005eba:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005ebc:	e008      	b.n	8005ed0 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005ebe:	f7fd fb93 	bl	80035e8 <HAL_GetTick>
 8005ec2:	4602      	mov	r2, r0
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	1ad3      	subs	r3, r2, r3
 8005ec8:	2b02      	cmp	r3, #2
 8005eca:	d901      	bls.n	8005ed0 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8005ecc:	2303      	movs	r3, #3
 8005ece:	e09b      	b.n	8006008 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005ed0:	f7ff fbc9 	bl	8005666 <LL_RCC_IsActiveFlag_PPRE1>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d0f1      	beq.n	8005ebe <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f003 0308 	and.w	r3, r3, #8
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d017      	beq.n	8005f16 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	691b      	ldr	r3, [r3, #16]
 8005eea:	00db      	lsls	r3, r3, #3
 8005eec:	4618      	mov	r0, r3
 8005eee:	f7ff fadb 	bl	80054a8 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005ef2:	f7fd fb79 	bl	80035e8 <HAL_GetTick>
 8005ef6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005ef8:	e008      	b.n	8005f0c <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005efa:	f7fd fb75 	bl	80035e8 <HAL_GetTick>
 8005efe:	4602      	mov	r2, r0
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	1ad3      	subs	r3, r2, r3
 8005f04:	2b02      	cmp	r3, #2
 8005f06:	d901      	bls.n	8005f0c <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8005f08:	2303      	movs	r3, #3
 8005f0a:	e07d      	b.n	8006008 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005f0c:	f7ff fbbd 	bl	800568a <LL_RCC_IsActiveFlag_PPRE2>
 8005f10:	4603      	mov	r3, r0
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d0f1      	beq.n	8005efa <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f003 0301 	and.w	r3, r3, #1
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d043      	beq.n	8005faa <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	2b02      	cmp	r3, #2
 8005f28:	d106      	bne.n	8005f38 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8005f2a:	f7ff f87b 	bl	8005024 <LL_RCC_HSE_IsReady>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d11e      	bne.n	8005f72 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005f34:	2301      	movs	r3, #1
 8005f36:	e067      	b.n	8006008 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	2b03      	cmp	r3, #3
 8005f3e:	d106      	bne.n	8005f4e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8005f40:	f7ff fb16 	bl	8005570 <LL_RCC_PLL_IsReady>
 8005f44:	4603      	mov	r3, r0
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d113      	bne.n	8005f72 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	e05c      	b.n	8006008 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d106      	bne.n	8005f64 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8005f56:	f7ff f9e3 	bl	8005320 <LL_RCC_MSI_IsReady>
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d108      	bne.n	8005f72 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005f60:	2301      	movs	r3, #1
 8005f62:	e051      	b.n	8006008 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8005f64:	f7ff f88e 	bl	8005084 <LL_RCC_HSI_IsReady>
 8005f68:	4603      	mov	r3, r0
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d101      	bne.n	8005f72 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005f6e:	2301      	movs	r3, #1
 8005f70:	e04a      	b.n	8006008 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	4618      	mov	r0, r3
 8005f78:	f7ff fa21 	bl	80053be <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f7c:	f7fd fb34 	bl	80035e8 <HAL_GetTick>
 8005f80:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f82:	e00a      	b.n	8005f9a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f84:	f7fd fb30 	bl	80035e8 <HAL_GetTick>
 8005f88:	4602      	mov	r2, r0
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	1ad3      	subs	r3, r2, r3
 8005f8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d901      	bls.n	8005f9a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8005f96:	2303      	movs	r3, #3
 8005f98:	e036      	b.n	8006008 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f9a:	f7ff fa24 	bl	80053e6 <LL_RCC_GetSysClkSource>
 8005f9e:	4602      	mov	r2, r0
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	685b      	ldr	r3, [r3, #4]
 8005fa4:	009b      	lsls	r3, r3, #2
 8005fa6:	429a      	cmp	r2, r3
 8005fa8:	d1ec      	bne.n	8005f84 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005faa:	4b19      	ldr	r3, [pc, #100]	@ (8006010 <HAL_RCC_ClockConfig+0x278>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f003 0307 	and.w	r3, r3, #7
 8005fb2:	683a      	ldr	r2, [r7, #0]
 8005fb4:	429a      	cmp	r2, r3
 8005fb6:	d21b      	bcs.n	8005ff0 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fb8:	4b15      	ldr	r3, [pc, #84]	@ (8006010 <HAL_RCC_ClockConfig+0x278>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f023 0207 	bic.w	r2, r3, #7
 8005fc0:	4913      	ldr	r1, [pc, #76]	@ (8006010 <HAL_RCC_ClockConfig+0x278>)
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005fc8:	f7fd fb0e 	bl	80035e8 <HAL_GetTick>
 8005fcc:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fce:	e008      	b.n	8005fe2 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005fd0:	f7fd fb0a 	bl	80035e8 <HAL_GetTick>
 8005fd4:	4602      	mov	r2, r0
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	1ad3      	subs	r3, r2, r3
 8005fda:	2b02      	cmp	r3, #2
 8005fdc:	d901      	bls.n	8005fe2 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8005fde:	2303      	movs	r3, #3
 8005fe0:	e012      	b.n	8006008 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fe2:	4b0b      	ldr	r3, [pc, #44]	@ (8006010 <HAL_RCC_ClockConfig+0x278>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f003 0307 	and.w	r3, r3, #7
 8005fea:	683a      	ldr	r2, [r7, #0]
 8005fec:	429a      	cmp	r2, r3
 8005fee:	d1ef      	bne.n	8005fd0 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005ff0:	f000 f87e 	bl	80060f0 <HAL_RCC_GetHCLKFreq>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	4a07      	ldr	r2, [pc, #28]	@ (8006014 <HAL_RCC_ClockConfig+0x27c>)
 8005ff8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8005ffa:	f7fd fb01 	bl	8003600 <HAL_GetTickPrio>
 8005ffe:	4603      	mov	r3, r0
 8006000:	4618      	mov	r0, r3
 8006002:	f7fd faa3 	bl	800354c <HAL_InitTick>
 8006006:	4603      	mov	r3, r0
}
 8006008:	4618      	mov	r0, r3
 800600a:	3710      	adds	r7, #16
 800600c:	46bd      	mov	sp, r7
 800600e:	bd80      	pop	{r7, pc}
 8006010:	58004000 	.word	0x58004000
 8006014:	20000008 	.word	0x20000008

08006018 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006018:	b590      	push	{r4, r7, lr}
 800601a:	b085      	sub	sp, #20
 800601c:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800601e:	f7ff f9e2 	bl	80053e6 <LL_RCC_GetSysClkSource>
 8006022:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d10a      	bne.n	8006040 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800602a:	f7ff f99e 	bl	800536a <LL_RCC_MSI_GetRange>
 800602e:	4603      	mov	r3, r0
 8006030:	091b      	lsrs	r3, r3, #4
 8006032:	f003 030f 	and.w	r3, r3, #15
 8006036:	4a2b      	ldr	r2, [pc, #172]	@ (80060e4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8006038:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800603c:	60fb      	str	r3, [r7, #12]
 800603e:	e04b      	b.n	80060d8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2b04      	cmp	r3, #4
 8006044:	d102      	bne.n	800604c <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006046:	4b28      	ldr	r3, [pc, #160]	@ (80060e8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006048:	60fb      	str	r3, [r7, #12]
 800604a:	e045      	b.n	80060d8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2b08      	cmp	r3, #8
 8006050:	d10a      	bne.n	8006068 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006052:	f7fe ffb7 	bl	8004fc4 <LL_RCC_HSE_IsEnabledDiv2>
 8006056:	4603      	mov	r3, r0
 8006058:	2b01      	cmp	r3, #1
 800605a:	d102      	bne.n	8006062 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800605c:	4b22      	ldr	r3, [pc, #136]	@ (80060e8 <HAL_RCC_GetSysClockFreq+0xd0>)
 800605e:	60fb      	str	r3, [r7, #12]
 8006060:	e03a      	b.n	80060d8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8006062:	4b22      	ldr	r3, [pc, #136]	@ (80060ec <HAL_RCC_GetSysClockFreq+0xd4>)
 8006064:	60fb      	str	r3, [r7, #12]
 8006066:	e037      	b.n	80060d8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8006068:	f7ff fab9 	bl	80055de <LL_RCC_PLL_GetMainSource>
 800606c:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	2b02      	cmp	r3, #2
 8006072:	d003      	beq.n	800607c <HAL_RCC_GetSysClockFreq+0x64>
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	2b03      	cmp	r3, #3
 8006078:	d003      	beq.n	8006082 <HAL_RCC_GetSysClockFreq+0x6a>
 800607a:	e00d      	b.n	8006098 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800607c:	4b1a      	ldr	r3, [pc, #104]	@ (80060e8 <HAL_RCC_GetSysClockFreq+0xd0>)
 800607e:	60bb      	str	r3, [r7, #8]
        break;
 8006080:	e015      	b.n	80060ae <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006082:	f7fe ff9f 	bl	8004fc4 <LL_RCC_HSE_IsEnabledDiv2>
 8006086:	4603      	mov	r3, r0
 8006088:	2b01      	cmp	r3, #1
 800608a:	d102      	bne.n	8006092 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800608c:	4b16      	ldr	r3, [pc, #88]	@ (80060e8 <HAL_RCC_GetSysClockFreq+0xd0>)
 800608e:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8006090:	e00d      	b.n	80060ae <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8006092:	4b16      	ldr	r3, [pc, #88]	@ (80060ec <HAL_RCC_GetSysClockFreq+0xd4>)
 8006094:	60bb      	str	r3, [r7, #8]
        break;
 8006096:	e00a      	b.n	80060ae <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8006098:	f7ff f967 	bl	800536a <LL_RCC_MSI_GetRange>
 800609c:	4603      	mov	r3, r0
 800609e:	091b      	lsrs	r3, r3, #4
 80060a0:	f003 030f 	and.w	r3, r3, #15
 80060a4:	4a0f      	ldr	r2, [pc, #60]	@ (80060e4 <HAL_RCC_GetSysClockFreq+0xcc>)
 80060a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060aa:	60bb      	str	r3, [r7, #8]
        break;
 80060ac:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 80060ae:	f7ff fa71 	bl	8005594 <LL_RCC_PLL_GetN>
 80060b2:	4602      	mov	r2, r0
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	fb03 f402 	mul.w	r4, r3, r2
 80060ba:	f7ff fa84 	bl	80055c6 <LL_RCC_PLL_GetDivider>
 80060be:	4603      	mov	r3, r0
 80060c0:	091b      	lsrs	r3, r3, #4
 80060c2:	3301      	adds	r3, #1
 80060c4:	fbb4 f4f3 	udiv	r4, r4, r3
 80060c8:	f7ff fa71 	bl	80055ae <LL_RCC_PLL_GetR>
 80060cc:	4603      	mov	r3, r0
 80060ce:	0f5b      	lsrs	r3, r3, #29
 80060d0:	3301      	adds	r3, #1
 80060d2:	fbb4 f3f3 	udiv	r3, r4, r3
 80060d6:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80060d8:	68fb      	ldr	r3, [r7, #12]
}
 80060da:	4618      	mov	r0, r3
 80060dc:	3714      	adds	r7, #20
 80060de:	46bd      	mov	sp, r7
 80060e0:	bd90      	pop	{r4, r7, pc}
 80060e2:	bf00      	nop
 80060e4:	080110cc 	.word	0x080110cc
 80060e8:	00f42400 	.word	0x00f42400
 80060ec:	01e84800 	.word	0x01e84800

080060f0 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80060f0:	b598      	push	{r3, r4, r7, lr}
 80060f2:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80060f4:	f7ff ff90 	bl	8006018 <HAL_RCC_GetSysClockFreq>
 80060f8:	4604      	mov	r4, r0
 80060fa:	f7ff f9e9 	bl	80054d0 <LL_RCC_GetAHBPrescaler>
 80060fe:	4603      	mov	r3, r0
 8006100:	091b      	lsrs	r3, r3, #4
 8006102:	f003 030f 	and.w	r3, r3, #15
 8006106:	4a03      	ldr	r2, [pc, #12]	@ (8006114 <HAL_RCC_GetHCLKFreq+0x24>)
 8006108:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800610c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8006110:	4618      	mov	r0, r3
 8006112:	bd98      	pop	{r3, r4, r7, pc}
 8006114:	0801106c 	.word	0x0801106c

08006118 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006118:	b598      	push	{r3, r4, r7, lr}
 800611a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800611c:	f7ff ffe8 	bl	80060f0 <HAL_RCC_GetHCLKFreq>
 8006120:	4604      	mov	r4, r0
 8006122:	f7ff f9ef 	bl	8005504 <LL_RCC_GetAPB1Prescaler>
 8006126:	4603      	mov	r3, r0
 8006128:	0a1b      	lsrs	r3, r3, #8
 800612a:	f003 0307 	and.w	r3, r3, #7
 800612e:	4a04      	ldr	r2, [pc, #16]	@ (8006140 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006130:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006134:	f003 031f 	and.w	r3, r3, #31
 8006138:	fa24 f303 	lsr.w	r3, r4, r3
}
 800613c:	4618      	mov	r0, r3
 800613e:	bd98      	pop	{r3, r4, r7, pc}
 8006140:	080110ac 	.word	0x080110ac

08006144 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006144:	b598      	push	{r3, r4, r7, lr}
 8006146:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8006148:	f7ff ffd2 	bl	80060f0 <HAL_RCC_GetHCLKFreq>
 800614c:	4604      	mov	r4, r0
 800614e:	f7ff f9e5 	bl	800551c <LL_RCC_GetAPB2Prescaler>
 8006152:	4603      	mov	r3, r0
 8006154:	0adb      	lsrs	r3, r3, #11
 8006156:	f003 0307 	and.w	r3, r3, #7
 800615a:	4a04      	ldr	r2, [pc, #16]	@ (800616c <HAL_RCC_GetPCLK2Freq+0x28>)
 800615c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006160:	f003 031f 	and.w	r3, r3, #31
 8006164:	fa24 f303 	lsr.w	r3, r4, r3
}
 8006168:	4618      	mov	r0, r3
 800616a:	bd98      	pop	{r3, r4, r7, pc}
 800616c:	080110ac 	.word	0x080110ac

08006170 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8006170:	b590      	push	{r4, r7, lr}
 8006172:	b085      	sub	sp, #20
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2bb0      	cmp	r3, #176	@ 0xb0
 800617c:	d903      	bls.n	8006186 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800617e:	4b15      	ldr	r3, [pc, #84]	@ (80061d4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8006180:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006182:	60fb      	str	r3, [r7, #12]
 8006184:	e007      	b.n	8006196 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	091b      	lsrs	r3, r3, #4
 800618a:	f003 030f 	and.w	r3, r3, #15
 800618e:	4a11      	ldr	r2, [pc, #68]	@ (80061d4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8006190:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006194:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8006196:	f7ff f9a7 	bl	80054e8 <LL_RCC_GetAHB4Prescaler>
 800619a:	4603      	mov	r3, r0
 800619c:	091b      	lsrs	r3, r3, #4
 800619e:	f003 030f 	and.w	r3, r3, #15
 80061a2:	4a0d      	ldr	r2, [pc, #52]	@ (80061d8 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 80061a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061a8:	68fa      	ldr	r2, [r7, #12]
 80061aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80061ae:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	4a0a      	ldr	r2, [pc, #40]	@ (80061dc <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 80061b4:	fba2 2303 	umull	r2, r3, r2, r3
 80061b8:	0c9c      	lsrs	r4, r3, #18
 80061ba:	f7fe fef5 	bl	8004fa8 <HAL_PWREx_GetVoltageRange>
 80061be:	4603      	mov	r3, r0
 80061c0:	4619      	mov	r1, r3
 80061c2:	4620      	mov	r0, r4
 80061c4:	f000 f80c 	bl	80061e0 <RCC_SetFlashLatency>
 80061c8:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	3714      	adds	r7, #20
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd90      	pop	{r4, r7, pc}
 80061d2:	bf00      	nop
 80061d4:	080110cc 	.word	0x080110cc
 80061d8:	0801106c 	.word	0x0801106c
 80061dc:	431bde83 	.word	0x431bde83

080061e0 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80061e0:	b590      	push	{r4, r7, lr}
 80061e2:	b093      	sub	sp, #76	@ 0x4c
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
 80061e8:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80061ea:	4b37      	ldr	r3, [pc, #220]	@ (80062c8 <RCC_SetFlashLatency+0xe8>)
 80061ec:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 80061f0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80061f2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 80061f6:	4a35      	ldr	r2, [pc, #212]	@ (80062cc <RCC_SetFlashLatency+0xec>)
 80061f8:	f107 031c 	add.w	r3, r7, #28
 80061fc:	ca07      	ldmia	r2, {r0, r1, r2}
 80061fe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8006202:	4b33      	ldr	r3, [pc, #204]	@ (80062d0 <RCC_SetFlashLatency+0xf0>)
 8006204:	f107 040c 	add.w	r4, r7, #12
 8006208:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800620a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800620e:	2300      	movs	r3, #0
 8006210:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006218:	d11a      	bne.n	8006250 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800621a:	2300      	movs	r3, #0
 800621c:	643b      	str	r3, [r7, #64]	@ 0x40
 800621e:	e013      	b.n	8006248 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8006220:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006222:	009b      	lsls	r3, r3, #2
 8006224:	3348      	adds	r3, #72	@ 0x48
 8006226:	443b      	add	r3, r7
 8006228:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800622c:	687a      	ldr	r2, [r7, #4]
 800622e:	429a      	cmp	r2, r3
 8006230:	d807      	bhi.n	8006242 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006232:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006234:	009b      	lsls	r3, r3, #2
 8006236:	3348      	adds	r3, #72	@ 0x48
 8006238:	443b      	add	r3, r7
 800623a:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800623e:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8006240:	e020      	b.n	8006284 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8006242:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006244:	3301      	adds	r3, #1
 8006246:	643b      	str	r3, [r7, #64]	@ 0x40
 8006248:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800624a:	2b03      	cmp	r3, #3
 800624c:	d9e8      	bls.n	8006220 <RCC_SetFlashLatency+0x40>
 800624e:	e019      	b.n	8006284 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006250:	2300      	movs	r3, #0
 8006252:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006254:	e013      	b.n	800627e <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8006256:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006258:	009b      	lsls	r3, r3, #2
 800625a:	3348      	adds	r3, #72	@ 0x48
 800625c:	443b      	add	r3, r7
 800625e:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8006262:	687a      	ldr	r2, [r7, #4]
 8006264:	429a      	cmp	r2, r3
 8006266:	d807      	bhi.n	8006278 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006268:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800626a:	009b      	lsls	r3, r3, #2
 800626c:	3348      	adds	r3, #72	@ 0x48
 800626e:	443b      	add	r3, r7
 8006270:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8006274:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8006276:	e005      	b.n	8006284 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006278:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800627a:	3301      	adds	r3, #1
 800627c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800627e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006280:	2b02      	cmp	r3, #2
 8006282:	d9e8      	bls.n	8006256 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8006284:	4b13      	ldr	r3, [pc, #76]	@ (80062d4 <RCC_SetFlashLatency+0xf4>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f023 0207 	bic.w	r2, r3, #7
 800628c:	4911      	ldr	r1, [pc, #68]	@ (80062d4 <RCC_SetFlashLatency+0xf4>)
 800628e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006290:	4313      	orrs	r3, r2
 8006292:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006294:	f7fd f9a8 	bl	80035e8 <HAL_GetTick>
 8006298:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800629a:	e008      	b.n	80062ae <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800629c:	f7fd f9a4 	bl	80035e8 <HAL_GetTick>
 80062a0:	4602      	mov	r2, r0
 80062a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062a4:	1ad3      	subs	r3, r2, r3
 80062a6:	2b02      	cmp	r3, #2
 80062a8:	d901      	bls.n	80062ae <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 80062aa:	2303      	movs	r3, #3
 80062ac:	e007      	b.n	80062be <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80062ae:	4b09      	ldr	r3, [pc, #36]	@ (80062d4 <RCC_SetFlashLatency+0xf4>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f003 0307 	and.w	r3, r3, #7
 80062b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80062b8:	429a      	cmp	r2, r3
 80062ba:	d1ef      	bne.n	800629c <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 80062bc:	2300      	movs	r3, #0
}
 80062be:	4618      	mov	r0, r3
 80062c0:	374c      	adds	r7, #76	@ 0x4c
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd90      	pop	{r4, r7, pc}
 80062c6:	bf00      	nop
 80062c8:	0800feb0 	.word	0x0800feb0
 80062cc:	0800fec0 	.word	0x0800fec0
 80062d0:	0800fecc 	.word	0x0800fecc
 80062d4:	58004000 	.word	0x58004000

080062d8 <LL_RCC_LSE_IsEnabled>:
{
 80062d8:	b480      	push	{r7}
 80062da:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80062dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80062e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062e4:	f003 0301 	and.w	r3, r3, #1
 80062e8:	2b01      	cmp	r3, #1
 80062ea:	d101      	bne.n	80062f0 <LL_RCC_LSE_IsEnabled+0x18>
 80062ec:	2301      	movs	r3, #1
 80062ee:	e000      	b.n	80062f2 <LL_RCC_LSE_IsEnabled+0x1a>
 80062f0:	2300      	movs	r3, #0
}
 80062f2:	4618      	mov	r0, r3
 80062f4:	46bd      	mov	sp, r7
 80062f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fa:	4770      	bx	lr

080062fc <LL_RCC_LSE_IsReady>:
{
 80062fc:	b480      	push	{r7}
 80062fe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006300:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006304:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006308:	f003 0302 	and.w	r3, r3, #2
 800630c:	2b02      	cmp	r3, #2
 800630e:	d101      	bne.n	8006314 <LL_RCC_LSE_IsReady+0x18>
 8006310:	2301      	movs	r3, #1
 8006312:	e000      	b.n	8006316 <LL_RCC_LSE_IsReady+0x1a>
 8006314:	2300      	movs	r3, #0
}
 8006316:	4618      	mov	r0, r3
 8006318:	46bd      	mov	sp, r7
 800631a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631e:	4770      	bx	lr

08006320 <LL_RCC_SetRFWKPClockSource>:
{
 8006320:	b480      	push	{r7}
 8006322:	b083      	sub	sp, #12
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8006328:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800632c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006330:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006334:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	4313      	orrs	r3, r2
 800633c:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8006340:	bf00      	nop
 8006342:	370c      	adds	r7, #12
 8006344:	46bd      	mov	sp, r7
 8006346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634a:	4770      	bx	lr

0800634c <LL_RCC_SetSMPSClockSource>:
{
 800634c:	b480      	push	{r7}
 800634e:	b083      	sub	sp, #12
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8006354:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800635a:	f023 0203 	bic.w	r2, r3, #3
 800635e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	4313      	orrs	r3, r2
 8006366:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8006368:	bf00      	nop
 800636a:	370c      	adds	r7, #12
 800636c:	46bd      	mov	sp, r7
 800636e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006372:	4770      	bx	lr

08006374 <LL_RCC_SetSMPSPrescaler>:
{
 8006374:	b480      	push	{r7}
 8006376:	b083      	sub	sp, #12
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800637c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006380:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006382:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006386:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	4313      	orrs	r3, r2
 800638e:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8006390:	bf00      	nop
 8006392:	370c      	adds	r7, #12
 8006394:	46bd      	mov	sp, r7
 8006396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639a:	4770      	bx	lr

0800639c <LL_RCC_SetUSARTClockSource>:
{
 800639c:	b480      	push	{r7}
 800639e:	b083      	sub	sp, #12
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80063a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80063a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063ac:	f023 0203 	bic.w	r2, r3, #3
 80063b0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	4313      	orrs	r3, r2
 80063b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80063bc:	bf00      	nop
 80063be:	370c      	adds	r7, #12
 80063c0:	46bd      	mov	sp, r7
 80063c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c6:	4770      	bx	lr

080063c8 <LL_RCC_SetLPUARTClockSource>:
{
 80063c8:	b480      	push	{r7}
 80063ca:	b083      	sub	sp, #12
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80063d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80063d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063d8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80063dc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	4313      	orrs	r3, r2
 80063e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80063e8:	bf00      	nop
 80063ea:	370c      	adds	r7, #12
 80063ec:	46bd      	mov	sp, r7
 80063ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f2:	4770      	bx	lr

080063f4 <LL_RCC_SetI2CClockSource>:
{
 80063f4:	b480      	push	{r7}
 80063f6:	b083      	sub	sp, #12
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80063fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006400:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	091b      	lsrs	r3, r3, #4
 8006408:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800640c:	43db      	mvns	r3, r3
 800640e:	401a      	ands	r2, r3
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	011b      	lsls	r3, r3, #4
 8006414:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8006418:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800641c:	4313      	orrs	r3, r2
 800641e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006422:	bf00      	nop
 8006424:	370c      	adds	r7, #12
 8006426:	46bd      	mov	sp, r7
 8006428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642c:	4770      	bx	lr

0800642e <LL_RCC_SetLPTIMClockSource>:
{
 800642e:	b480      	push	{r7}
 8006430:	b083      	sub	sp, #12
 8006432:	af00      	add	r7, sp, #0
 8006434:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8006436:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800643a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	0c1b      	lsrs	r3, r3, #16
 8006442:	041b      	lsls	r3, r3, #16
 8006444:	43db      	mvns	r3, r3
 8006446:	401a      	ands	r2, r3
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	041b      	lsls	r3, r3, #16
 800644c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006450:	4313      	orrs	r3, r2
 8006452:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006456:	bf00      	nop
 8006458:	370c      	adds	r7, #12
 800645a:	46bd      	mov	sp, r7
 800645c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006460:	4770      	bx	lr

08006462 <LL_RCC_SetSAIClockSource>:
{
 8006462:	b480      	push	{r7}
 8006464:	b083      	sub	sp, #12
 8006466:	af00      	add	r7, sp, #0
 8006468:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800646a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800646e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006472:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006476:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	4313      	orrs	r3, r2
 800647e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006482:	bf00      	nop
 8006484:	370c      	adds	r7, #12
 8006486:	46bd      	mov	sp, r7
 8006488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648c:	4770      	bx	lr

0800648e <LL_RCC_SetRNGClockSource>:
{
 800648e:	b480      	push	{r7}
 8006490:	b083      	sub	sp, #12
 8006492:	af00      	add	r7, sp, #0
 8006494:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8006496:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800649a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800649e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80064a2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	4313      	orrs	r3, r2
 80064aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80064ae:	bf00      	nop
 80064b0:	370c      	adds	r7, #12
 80064b2:	46bd      	mov	sp, r7
 80064b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b8:	4770      	bx	lr

080064ba <LL_RCC_SetCLK48ClockSource>:
{
 80064ba:	b480      	push	{r7}
 80064bc:	b083      	sub	sp, #12
 80064be:	af00      	add	r7, sp, #0
 80064c0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80064c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80064c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064ca:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80064ce:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	4313      	orrs	r3, r2
 80064d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80064da:	bf00      	nop
 80064dc:	370c      	adds	r7, #12
 80064de:	46bd      	mov	sp, r7
 80064e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e4:	4770      	bx	lr

080064e6 <LL_RCC_SetUSBClockSource>:
{
 80064e6:	b580      	push	{r7, lr}
 80064e8:	b082      	sub	sp, #8
 80064ea:	af00      	add	r7, sp, #0
 80064ec:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f7ff ffe3 	bl	80064ba <LL_RCC_SetCLK48ClockSource>
}
 80064f4:	bf00      	nop
 80064f6:	3708      	adds	r7, #8
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bd80      	pop	{r7, pc}

080064fc <LL_RCC_SetADCClockSource>:
{
 80064fc:	b480      	push	{r7}
 80064fe:	b083      	sub	sp, #12
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8006504:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006508:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800650c:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006510:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	4313      	orrs	r3, r2
 8006518:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800651c:	bf00      	nop
 800651e:	370c      	adds	r7, #12
 8006520:	46bd      	mov	sp, r7
 8006522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006526:	4770      	bx	lr

08006528 <LL_RCC_SetRTCClockSource>:
{
 8006528:	b480      	push	{r7}
 800652a:	b083      	sub	sp, #12
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8006530:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006534:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006538:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800653c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	4313      	orrs	r3, r2
 8006544:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8006548:	bf00      	nop
 800654a:	370c      	adds	r7, #12
 800654c:	46bd      	mov	sp, r7
 800654e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006552:	4770      	bx	lr

08006554 <LL_RCC_GetRTCClockSource>:
{
 8006554:	b480      	push	{r7}
 8006556:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8006558:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800655c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006560:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8006564:	4618      	mov	r0, r3
 8006566:	46bd      	mov	sp, r7
 8006568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656c:	4770      	bx	lr

0800656e <LL_RCC_ForceBackupDomainReset>:
{
 800656e:	b480      	push	{r7}
 8006570:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006572:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006576:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800657a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800657e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006582:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8006586:	bf00      	nop
 8006588:	46bd      	mov	sp, r7
 800658a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658e:	4770      	bx	lr

08006590 <LL_RCC_ReleaseBackupDomainReset>:
{
 8006590:	b480      	push	{r7}
 8006592:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006594:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006598:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800659c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80065a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80065a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80065a8:	bf00      	nop
 80065aa:	46bd      	mov	sp, r7
 80065ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b0:	4770      	bx	lr

080065b2 <LL_RCC_PLLSAI1_Enable>:
{
 80065b2:	b480      	push	{r7}
 80065b4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80065b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80065c0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80065c4:	6013      	str	r3, [r2, #0]
}
 80065c6:	bf00      	nop
 80065c8:	46bd      	mov	sp, r7
 80065ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ce:	4770      	bx	lr

080065d0 <LL_RCC_PLLSAI1_Disable>:
{
 80065d0:	b480      	push	{r7}
 80065d2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80065d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80065de:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80065e2:	6013      	str	r3, [r2, #0]
}
 80065e4:	bf00      	nop
 80065e6:	46bd      	mov	sp, r7
 80065e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ec:	4770      	bx	lr

080065ee <LL_RCC_PLLSAI1_IsReady>:
{
 80065ee:	b480      	push	{r7}
 80065f0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80065f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80065fc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006600:	d101      	bne.n	8006606 <LL_RCC_PLLSAI1_IsReady+0x18>
 8006602:	2301      	movs	r3, #1
 8006604:	e000      	b.n	8006608 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8006606:	2300      	movs	r3, #0
}
 8006608:	4618      	mov	r0, r3
 800660a:	46bd      	mov	sp, r7
 800660c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006610:	4770      	bx	lr

08006612 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006612:	b580      	push	{r7, lr}
 8006614:	b088      	sub	sp, #32
 8006616:	af00      	add	r7, sp, #0
 8006618:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800661a:	2300      	movs	r3, #0
 800661c:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800661e:	2300      	movs	r3, #0
 8006620:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800662a:	2b00      	cmp	r3, #0
 800662c:	d034      	beq.n	8006698 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006632:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006636:	d021      	beq.n	800667c <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8006638:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800663c:	d81b      	bhi.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800663e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006642:	d01d      	beq.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8006644:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006648:	d815      	bhi.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800664a:	2b00      	cmp	r3, #0
 800664c:	d00b      	beq.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800664e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006652:	d110      	bne.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8006654:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006658:	68db      	ldr	r3, [r3, #12]
 800665a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800665e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006662:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8006664:	e00d      	b.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	3304      	adds	r3, #4
 800666a:	4618      	mov	r0, r3
 800666c:	f000 f947 	bl	80068fe <RCCEx_PLLSAI1_ConfigNP>
 8006670:	4603      	mov	r3, r0
 8006672:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006674:	e005      	b.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8006676:	2301      	movs	r3, #1
 8006678:	77fb      	strb	r3, [r7, #31]
        break;
 800667a:	e002      	b.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800667c:	bf00      	nop
 800667e:	e000      	b.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8006680:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006682:	7ffb      	ldrb	r3, [r7, #31]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d105      	bne.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800668c:	4618      	mov	r0, r3
 800668e:	f7ff fee8 	bl	8006462 <LL_RCC_SetSAIClockSource>
 8006692:	e001      	b.n	8006698 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006694:	7ffb      	ldrb	r3, [r7, #31]
 8006696:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d046      	beq.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80066a4:	f7ff ff56 	bl	8006554 <LL_RCC_GetRTCClockSource>
 80066a8:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066ae:	69ba      	ldr	r2, [r7, #24]
 80066b0:	429a      	cmp	r2, r3
 80066b2:	d03c      	beq.n	800672e <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80066b4:	f7fe fc68 	bl	8004f88 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80066b8:	69bb      	ldr	r3, [r7, #24]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d105      	bne.n	80066ca <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066c2:	4618      	mov	r0, r3
 80066c4:	f7ff ff30 	bl	8006528 <LL_RCC_SetRTCClockSource>
 80066c8:	e02e      	b.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80066ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80066ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066d2:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80066d4:	f7ff ff4b 	bl	800656e <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80066d8:	f7ff ff5a 	bl	8006590 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80066dc:	697b      	ldr	r3, [r7, #20]
 80066de:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066e6:	4313      	orrs	r3, r2
 80066e8:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80066ea:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80066ee:	697b      	ldr	r3, [r7, #20]
 80066f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80066f4:	f7ff fdf0 	bl	80062d8 <LL_RCC_LSE_IsEnabled>
 80066f8:	4603      	mov	r3, r0
 80066fa:	2b01      	cmp	r3, #1
 80066fc:	d114      	bne.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80066fe:	f7fc ff73 	bl	80035e8 <HAL_GetTick>
 8006702:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8006704:	e00b      	b.n	800671e <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006706:	f7fc ff6f 	bl	80035e8 <HAL_GetTick>
 800670a:	4602      	mov	r2, r0
 800670c:	693b      	ldr	r3, [r7, #16]
 800670e:	1ad3      	subs	r3, r2, r3
 8006710:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006714:	4293      	cmp	r3, r2
 8006716:	d902      	bls.n	800671e <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8006718:	2303      	movs	r3, #3
 800671a:	77fb      	strb	r3, [r7, #31]
              break;
 800671c:	e004      	b.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800671e:	f7ff fded 	bl	80062fc <LL_RCC_LSE_IsReady>
 8006722:	4603      	mov	r3, r0
 8006724:	2b01      	cmp	r3, #1
 8006726:	d1ee      	bne.n	8006706 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8006728:	7ffb      	ldrb	r3, [r7, #31]
 800672a:	77bb      	strb	r3, [r7, #30]
 800672c:	e001      	b.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800672e:	7ffb      	ldrb	r3, [r7, #31]
 8006730:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f003 0301 	and.w	r3, r3, #1
 800673a:	2b00      	cmp	r3, #0
 800673c:	d004      	beq.n	8006748 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	699b      	ldr	r3, [r3, #24]
 8006742:	4618      	mov	r0, r3
 8006744:	f7ff fe2a 	bl	800639c <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f003 0302 	and.w	r3, r3, #2
 8006750:	2b00      	cmp	r3, #0
 8006752:	d004      	beq.n	800675e <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	69db      	ldr	r3, [r3, #28]
 8006758:	4618      	mov	r0, r3
 800675a:	f7ff fe35 	bl	80063c8 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f003 0310 	and.w	r3, r3, #16
 8006766:	2b00      	cmp	r3, #0
 8006768:	d004      	beq.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800676e:	4618      	mov	r0, r3
 8006770:	f7ff fe5d 	bl	800642e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f003 0320 	and.w	r3, r3, #32
 800677c:	2b00      	cmp	r3, #0
 800677e:	d004      	beq.n	800678a <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006784:	4618      	mov	r0, r3
 8006786:	f7ff fe52 	bl	800642e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f003 0304 	and.w	r3, r3, #4
 8006792:	2b00      	cmp	r3, #0
 8006794:	d004      	beq.n	80067a0 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6a1b      	ldr	r3, [r3, #32]
 800679a:	4618      	mov	r0, r3
 800679c:	f7ff fe2a 	bl	80063f4 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f003 0308 	and.w	r3, r3, #8
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d004      	beq.n	80067b6 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067b0:	4618      	mov	r0, r3
 80067b2:	f7ff fe1f 	bl	80063f4 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d022      	beq.n	8006808 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067c6:	4618      	mov	r0, r3
 80067c8:	f7ff fe8d 	bl	80064e6 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067d0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80067d4:	d107      	bne.n	80067e6 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80067d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80067da:	68db      	ldr	r3, [r3, #12]
 80067dc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80067e0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80067e4:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067ea:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80067ee:	d10b      	bne.n	8006808 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	3304      	adds	r3, #4
 80067f4:	4618      	mov	r0, r3
 80067f6:	f000 f8dd 	bl	80069b4 <RCCEx_PLLSAI1_ConfigNQ>
 80067fa:	4603      	mov	r3, r0
 80067fc:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80067fe:	7ffb      	ldrb	r3, [r7, #31]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d001      	beq.n	8006808 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8006804:	7ffb      	ldrb	r3, [r7, #31]
 8006806:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006810:	2b00      	cmp	r3, #0
 8006812:	d02b      	beq.n	800686c <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006818:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800681c:	d008      	beq.n	8006830 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006822:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006826:	d003      	beq.n	8006830 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800682c:	2b00      	cmp	r3, #0
 800682e:	d105      	bne.n	800683c <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006834:	4618      	mov	r0, r3
 8006836:	f7ff fe2a 	bl	800648e <LL_RCC_SetRNGClockSource>
 800683a:	e00a      	b.n	8006852 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006840:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006844:	60fb      	str	r3, [r7, #12]
 8006846:	2000      	movs	r0, #0
 8006848:	f7ff fe21 	bl	800648e <LL_RCC_SetRNGClockSource>
 800684c:	68f8      	ldr	r0, [r7, #12]
 800684e:	f7ff fe34 	bl	80064ba <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006856:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800685a:	d107      	bne.n	800686c <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800685c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006860:	68db      	ldr	r3, [r3, #12]
 8006862:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006866:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800686a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006874:	2b00      	cmp	r3, #0
 8006876:	d022      	beq.n	80068be <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800687c:	4618      	mov	r0, r3
 800687e:	f7ff fe3d 	bl	80064fc <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006886:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800688a:	d107      	bne.n	800689c <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800688c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006890:	68db      	ldr	r3, [r3, #12]
 8006892:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006896:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800689a:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068a0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80068a4:	d10b      	bne.n	80068be <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	3304      	adds	r3, #4
 80068aa:	4618      	mov	r0, r3
 80068ac:	f000 f8dd 	bl	8006a6a <RCCEx_PLLSAI1_ConfigNR>
 80068b0:	4603      	mov	r3, r0
 80068b2:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80068b4:	7ffb      	ldrb	r3, [r7, #31]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d001      	beq.n	80068be <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 80068ba:	7ffb      	ldrb	r3, [r7, #31]
 80068bc:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d004      	beq.n	80068d4 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068ce:	4618      	mov	r0, r3
 80068d0:	f7ff fd26 	bl	8006320 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d009      	beq.n	80068f4 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80068e4:	4618      	mov	r0, r3
 80068e6:	f7ff fd45 	bl	8006374 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80068ee:	4618      	mov	r0, r3
 80068f0:	f7ff fd2c 	bl	800634c <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 80068f4:	7fbb      	ldrb	r3, [r7, #30]
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	3720      	adds	r7, #32
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bd80      	pop	{r7, pc}

080068fe <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80068fe:	b580      	push	{r7, lr}
 8006900:	b084      	sub	sp, #16
 8006902:	af00      	add	r7, sp, #0
 8006904:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006906:	2300      	movs	r3, #0
 8006908:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800690a:	f7ff fe61 	bl	80065d0 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800690e:	f7fc fe6b 	bl	80035e8 <HAL_GetTick>
 8006912:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006914:	e009      	b.n	800692a <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006916:	f7fc fe67 	bl	80035e8 <HAL_GetTick>
 800691a:	4602      	mov	r2, r0
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	1ad3      	subs	r3, r2, r3
 8006920:	2b02      	cmp	r3, #2
 8006922:	d902      	bls.n	800692a <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8006924:	2303      	movs	r3, #3
 8006926:	73fb      	strb	r3, [r7, #15]
      break;
 8006928:	e004      	b.n	8006934 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800692a:	f7ff fe60 	bl	80065ee <LL_RCC_PLLSAI1_IsReady>
 800692e:	4603      	mov	r3, r0
 8006930:	2b00      	cmp	r3, #0
 8006932:	d1f0      	bne.n	8006916 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8006934:	7bfb      	ldrb	r3, [r7, #15]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d137      	bne.n	80069aa <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800693a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800693e:	691b      	ldr	r3, [r3, #16]
 8006940:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	021b      	lsls	r3, r3, #8
 800694a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800694e:	4313      	orrs	r3, r2
 8006950:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8006952:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006956:	691b      	ldr	r3, [r3, #16]
 8006958:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	685b      	ldr	r3, [r3, #4]
 8006960:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006964:	4313      	orrs	r3, r2
 8006966:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8006968:	f7ff fe23 	bl	80065b2 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800696c:	f7fc fe3c 	bl	80035e8 <HAL_GetTick>
 8006970:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006972:	e009      	b.n	8006988 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006974:	f7fc fe38 	bl	80035e8 <HAL_GetTick>
 8006978:	4602      	mov	r2, r0
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	1ad3      	subs	r3, r2, r3
 800697e:	2b02      	cmp	r3, #2
 8006980:	d902      	bls.n	8006988 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8006982:	2303      	movs	r3, #3
 8006984:	73fb      	strb	r3, [r7, #15]
        break;
 8006986:	e004      	b.n	8006992 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006988:	f7ff fe31 	bl	80065ee <LL_RCC_PLLSAI1_IsReady>
 800698c:	4603      	mov	r3, r0
 800698e:	2b01      	cmp	r3, #1
 8006990:	d1f0      	bne.n	8006974 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8006992:	7bfb      	ldrb	r3, [r7, #15]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d108      	bne.n	80069aa <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006998:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800699c:	691a      	ldr	r2, [r3, #16]
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	691b      	ldr	r3, [r3, #16]
 80069a2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80069a6:	4313      	orrs	r3, r2
 80069a8:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80069aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80069ac:	4618      	mov	r0, r3
 80069ae:	3710      	adds	r7, #16
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bd80      	pop	{r7, pc}

080069b4 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b084      	sub	sp, #16
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80069bc:	2300      	movs	r3, #0
 80069be:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80069c0:	f7ff fe06 	bl	80065d0 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80069c4:	f7fc fe10 	bl	80035e8 <HAL_GetTick>
 80069c8:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80069ca:	e009      	b.n	80069e0 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80069cc:	f7fc fe0c 	bl	80035e8 <HAL_GetTick>
 80069d0:	4602      	mov	r2, r0
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	1ad3      	subs	r3, r2, r3
 80069d6:	2b02      	cmp	r3, #2
 80069d8:	d902      	bls.n	80069e0 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80069da:	2303      	movs	r3, #3
 80069dc:	73fb      	strb	r3, [r7, #15]
      break;
 80069de:	e004      	b.n	80069ea <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80069e0:	f7ff fe05 	bl	80065ee <LL_RCC_PLLSAI1_IsReady>
 80069e4:	4603      	mov	r3, r0
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d1f0      	bne.n	80069cc <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80069ea:	7bfb      	ldrb	r3, [r7, #15]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d137      	bne.n	8006a60 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80069f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80069f4:	691b      	ldr	r3, [r3, #16]
 80069f6:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	021b      	lsls	r3, r3, #8
 8006a00:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006a04:	4313      	orrs	r3, r2
 8006a06:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8006a08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a0c:	691b      	ldr	r3, [r3, #16]
 8006a0e:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	689b      	ldr	r3, [r3, #8]
 8006a16:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8006a1e:	f7ff fdc8 	bl	80065b2 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a22:	f7fc fde1 	bl	80035e8 <HAL_GetTick>
 8006a26:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006a28:	e009      	b.n	8006a3e <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006a2a:	f7fc fddd 	bl	80035e8 <HAL_GetTick>
 8006a2e:	4602      	mov	r2, r0
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	1ad3      	subs	r3, r2, r3
 8006a34:	2b02      	cmp	r3, #2
 8006a36:	d902      	bls.n	8006a3e <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8006a38:	2303      	movs	r3, #3
 8006a3a:	73fb      	strb	r3, [r7, #15]
        break;
 8006a3c:	e004      	b.n	8006a48 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006a3e:	f7ff fdd6 	bl	80065ee <LL_RCC_PLLSAI1_IsReady>
 8006a42:	4603      	mov	r3, r0
 8006a44:	2b01      	cmp	r3, #1
 8006a46:	d1f0      	bne.n	8006a2a <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8006a48:	7bfb      	ldrb	r3, [r7, #15]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d108      	bne.n	8006a60 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006a4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a52:	691a      	ldr	r2, [r3, #16]
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	691b      	ldr	r3, [r3, #16]
 8006a58:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006a5c:	4313      	orrs	r3, r2
 8006a5e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8006a60:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a62:	4618      	mov	r0, r3
 8006a64:	3710      	adds	r7, #16
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd80      	pop	{r7, pc}

08006a6a <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8006a6a:	b580      	push	{r7, lr}
 8006a6c:	b084      	sub	sp, #16
 8006a6e:	af00      	add	r7, sp, #0
 8006a70:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006a72:	2300      	movs	r3, #0
 8006a74:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8006a76:	f7ff fdab 	bl	80065d0 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006a7a:	f7fc fdb5 	bl	80035e8 <HAL_GetTick>
 8006a7e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006a80:	e009      	b.n	8006a96 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006a82:	f7fc fdb1 	bl	80035e8 <HAL_GetTick>
 8006a86:	4602      	mov	r2, r0
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	1ad3      	subs	r3, r2, r3
 8006a8c:	2b02      	cmp	r3, #2
 8006a8e:	d902      	bls.n	8006a96 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8006a90:	2303      	movs	r3, #3
 8006a92:	73fb      	strb	r3, [r7, #15]
      break;
 8006a94:	e004      	b.n	8006aa0 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006a96:	f7ff fdaa 	bl	80065ee <LL_RCC_PLLSAI1_IsReady>
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d1f0      	bne.n	8006a82 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8006aa0:	7bfb      	ldrb	r3, [r7, #15]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d137      	bne.n	8006b16 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8006aa6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006aaa:	691b      	ldr	r3, [r3, #16]
 8006aac:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	021b      	lsls	r3, r3, #8
 8006ab6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006aba:	4313      	orrs	r3, r2
 8006abc:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8006abe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ac2:	691b      	ldr	r3, [r3, #16]
 8006ac4:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	68db      	ldr	r3, [r3, #12]
 8006acc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006ad0:	4313      	orrs	r3, r2
 8006ad2:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8006ad4:	f7ff fd6d 	bl	80065b2 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ad8:	f7fc fd86 	bl	80035e8 <HAL_GetTick>
 8006adc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006ade:	e009      	b.n	8006af4 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006ae0:	f7fc fd82 	bl	80035e8 <HAL_GetTick>
 8006ae4:	4602      	mov	r2, r0
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	1ad3      	subs	r3, r2, r3
 8006aea:	2b02      	cmp	r3, #2
 8006aec:	d902      	bls.n	8006af4 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8006aee:	2303      	movs	r3, #3
 8006af0:	73fb      	strb	r3, [r7, #15]
        break;
 8006af2:	e004      	b.n	8006afe <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006af4:	f7ff fd7b 	bl	80065ee <LL_RCC_PLLSAI1_IsReady>
 8006af8:	4603      	mov	r3, r0
 8006afa:	2b01      	cmp	r3, #1
 8006afc:	d1f0      	bne.n	8006ae0 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8006afe:	7bfb      	ldrb	r3, [r7, #15]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d108      	bne.n	8006b16 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006b04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b08:	691a      	ldr	r2, [r3, #16]
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	691b      	ldr	r3, [r3, #16]
 8006b0e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006b12:	4313      	orrs	r3, r2
 8006b14:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8006b16:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b18:	4618      	mov	r0, r3
 8006b1a:	3710      	adds	r7, #16
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bd80      	pop	{r7, pc}

08006b20 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b084      	sub	sp, #16
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d101      	bne.n	8006b32 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8006b2e:	2301      	movs	r3, #1
 8006b30:	e09f      	b.n	8006c72 <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8006b38:	b2db      	uxtb	r3, r3
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d106      	bne.n	8006b4c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2200      	movs	r2, #0
 8006b42:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f7fc fb5c 	bl	8003204 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2202      	movs	r2, #2
 8006b50:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8006b54:	4b49      	ldr	r3, [pc, #292]	@ (8006c7c <HAL_RTC_Init+0x15c>)
 8006b56:	68db      	ldr	r3, [r3, #12]
 8006b58:	f003 0310 	and.w	r3, r3, #16
 8006b5c:	2b10      	cmp	r3, #16
 8006b5e:	d07e      	beq.n	8006c5e <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	22ca      	movs	r2, #202	@ 0xca
 8006b66:	625a      	str	r2, [r3, #36]	@ 0x24
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	2253      	movs	r2, #83	@ 0x53
 8006b6e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006b70:	6878      	ldr	r0, [r7, #4]
 8006b72:	f000 f8ab 	bl	8006ccc <RTC_EnterInitMode>
 8006b76:	4603      	mov	r3, r0
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d00a      	beq.n	8006b92 <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	22ff      	movs	r2, #255	@ 0xff
 8006b82:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2204      	movs	r2, #4
 8006b88:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      status = HAL_ERROR;
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	73fb      	strb	r3, [r7, #15]
 8006b90:	e067      	b.n	8006c62 <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	689b      	ldr	r3, [r3, #8]
 8006b98:	687a      	ldr	r2, [r7, #4]
 8006b9a:	6812      	ldr	r2, [r2, #0]
 8006b9c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8006ba0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006ba4:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	6899      	ldr	r1, [r3, #8]
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	685a      	ldr	r2, [r3, #4]
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	691b      	ldr	r3, [r3, #16]
 8006bb4:	431a      	orrs	r2, r3
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	699b      	ldr	r3, [r3, #24]
 8006bba:	431a      	orrs	r2, r3
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	430a      	orrs	r2, r1
 8006bc2:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	687a      	ldr	r2, [r7, #4]
 8006bca:	68d2      	ldr	r2, [r2, #12]
 8006bcc:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	6919      	ldr	r1, [r3, #16]
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	689b      	ldr	r3, [r3, #8]
 8006bd8:	041a      	lsls	r2, r3, #16
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	430a      	orrs	r2, r1
 8006be0:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	68da      	ldr	r2, [r3, #12]
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006bf0:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f022 0203 	bic.w	r2, r2, #3
 8006c00:	64da      	str	r2, [r3, #76]	@ 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	69da      	ldr	r2, [r3, #28]
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	695b      	ldr	r3, [r3, #20]
 8006c10:	431a      	orrs	r2, r3
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	430a      	orrs	r2, r1
 8006c18:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	689b      	ldr	r3, [r3, #8]
 8006c20:	f003 0320 	and.w	r3, r3, #32
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d113      	bne.n	8006c50 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	f000 f829 	bl	8006c80 <HAL_RTC_WaitForSynchro>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d00d      	beq.n	8006c50 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	22ff      	movs	r2, #255	@ 0xff
 8006c3a:	625a      	str	r2, [r3, #36]	@ 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2204      	movs	r2, #4
 8006c40:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2200      	movs	r2, #0
 8006c48:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	e010      	b.n	8006c72 <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	22ff      	movs	r2, #255	@ 0xff
 8006c56:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      status = HAL_OK;
 8006c58:	2300      	movs	r3, #0
 8006c5a:	73fb      	strb	r3, [r7, #15]
 8006c5c:	e001      	b.n	8006c62 <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 8006c5e:	2300      	movs	r3, #0
 8006c60:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8006c62:	7bfb      	ldrb	r3, [r7, #15]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d103      	bne.n	8006c70 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2201      	movs	r2, #1
 8006c6c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  return status;
 8006c70:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c72:	4618      	mov	r0, r3
 8006c74:	3710      	adds	r7, #16
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bd80      	pop	{r7, pc}
 8006c7a:	bf00      	nop
 8006c7c:	40002800 	.word	0x40002800

08006c80 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b084      	sub	sp, #16
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	68da      	ldr	r2, [r3, #12]
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006c96:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8006c98:	f7fc fca6 	bl	80035e8 <HAL_GetTick>
 8006c9c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006c9e:	e009      	b.n	8006cb4 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006ca0:	f7fc fca2 	bl	80035e8 <HAL_GetTick>
 8006ca4:	4602      	mov	r2, r0
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	1ad3      	subs	r3, r2, r3
 8006caa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006cae:	d901      	bls.n	8006cb4 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8006cb0:	2303      	movs	r3, #3
 8006cb2:	e007      	b.n	8006cc4 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	68db      	ldr	r3, [r3, #12]
 8006cba:	f003 0320 	and.w	r3, r3, #32
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d0ee      	beq.n	8006ca0 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8006cc2:	2300      	movs	r3, #0
}
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	3710      	adds	r7, #16
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	bd80      	pop	{r7, pc}

08006ccc <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b084      	sub	sp, #16
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	68db      	ldr	r3, [r3, #12]
 8006cda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d119      	bne.n	8006d16 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f04f 32ff 	mov.w	r2, #4294967295
 8006cea:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006cec:	f7fc fc7c 	bl	80035e8 <HAL_GetTick>
 8006cf0:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006cf2:	e009      	b.n	8006d08 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006cf4:	f7fc fc78 	bl	80035e8 <HAL_GetTick>
 8006cf8:	4602      	mov	r2, r0
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	1ad3      	subs	r3, r2, r3
 8006cfe:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006d02:	d901      	bls.n	8006d08 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8006d04:	2303      	movs	r3, #3
 8006d06:	e007      	b.n	8006d18 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	68db      	ldr	r3, [r3, #12]
 8006d0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d0ee      	beq.n	8006cf4 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8006d16:	2300      	movs	r3, #0
}
 8006d18:	4618      	mov	r0, r3
 8006d1a:	3710      	adds	r7, #16
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	bd80      	pop	{r7, pc}

08006d20 <HAL_RTCEx_EnableBypassShadow>:
  * @note   When the Bypass Shadow is enabled the calendar value are taken
  *         directly from the Calendar counter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 8006d20:	b480      	push	{r7}
 8006d22:	b083      	sub	sp, #12
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006d2e:	2b01      	cmp	r3, #1
 8006d30:	d101      	bne.n	8006d36 <HAL_RTCEx_EnableBypassShadow+0x16>
 8006d32:	2302      	movs	r3, #2
 8006d34:	e024      	b.n	8006d80 <HAL_RTCEx_EnableBypassShadow+0x60>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2201      	movs	r2, #1
 8006d3a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2202      	movs	r2, #2
 8006d42:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	22ca      	movs	r2, #202	@ 0xca
 8006d4c:	625a      	str	r2, [r3, #36]	@ 0x24
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	2253      	movs	r2, #83	@ 0x53
 8006d54:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	689a      	ldr	r2, [r3, #8]
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f042 0220 	orr.w	r2, r2, #32
 8006d64:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	22ff      	movs	r2, #255	@ 0xff
 8006d6c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2201      	movs	r2, #1
 8006d72:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8006d7e:	2300      	movs	r3, #0
}
 8006d80:	4618      	mov	r0, r3
 8006d82:	370c      	adds	r7, #12
 8006d84:	46bd      	mov	sp, r7
 8006d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8a:	4770      	bx	lr

08006d8c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b084      	sub	sp, #16
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d101      	bne.n	8006d9e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	e095      	b.n	8006eca <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d108      	bne.n	8006db8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	685b      	ldr	r3, [r3, #4]
 8006daa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006dae:	d009      	beq.n	8006dc4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2200      	movs	r2, #0
 8006db4:	61da      	str	r2, [r3, #28]
 8006db6:	e005      	b.n	8006dc4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006dd0:	b2db      	uxtb	r3, r3
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d106      	bne.n	8006de4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2200      	movs	r2, #0
 8006dda:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f000 f877 	bl	8006ed2 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2202      	movs	r2, #2
 8006de8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	681a      	ldr	r2, [r3, #0]
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006dfa:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	68db      	ldr	r3, [r3, #12]
 8006e00:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006e04:	d902      	bls.n	8006e0c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006e06:	2300      	movs	r3, #0
 8006e08:	60fb      	str	r3, [r7, #12]
 8006e0a:	e002      	b.n	8006e12 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006e0c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006e10:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	68db      	ldr	r3, [r3, #12]
 8006e16:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8006e1a:	d007      	beq.n	8006e2c <HAL_SPI_Init+0xa0>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	68db      	ldr	r3, [r3, #12]
 8006e20:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006e24:	d002      	beq.n	8006e2c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	685b      	ldr	r3, [r3, #4]
 8006e30:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	689b      	ldr	r3, [r3, #8]
 8006e38:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006e3c:	431a      	orrs	r2, r3
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	691b      	ldr	r3, [r3, #16]
 8006e42:	f003 0302 	and.w	r3, r3, #2
 8006e46:	431a      	orrs	r2, r3
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	695b      	ldr	r3, [r3, #20]
 8006e4c:	f003 0301 	and.w	r3, r3, #1
 8006e50:	431a      	orrs	r2, r3
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	699b      	ldr	r3, [r3, #24]
 8006e56:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006e5a:	431a      	orrs	r2, r3
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	69db      	ldr	r3, [r3, #28]
 8006e60:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006e64:	431a      	orrs	r2, r3
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6a1b      	ldr	r3, [r3, #32]
 8006e6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e6e:	ea42 0103 	orr.w	r1, r2, r3
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e76:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	430a      	orrs	r2, r1
 8006e80:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	699b      	ldr	r3, [r3, #24]
 8006e86:	0c1b      	lsrs	r3, r3, #16
 8006e88:	f003 0204 	and.w	r2, r3, #4
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e90:	f003 0310 	and.w	r3, r3, #16
 8006e94:	431a      	orrs	r2, r3
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e9a:	f003 0308 	and.w	r3, r3, #8
 8006e9e:	431a      	orrs	r2, r3
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	68db      	ldr	r3, [r3, #12]
 8006ea4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8006ea8:	ea42 0103 	orr.w	r1, r2, r3
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	430a      	orrs	r2, r1
 8006eb8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2201      	movs	r2, #1
 8006ec4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8006ec8:	2300      	movs	r3, #0
}
 8006eca:	4618      	mov	r0, r3
 8006ecc:	3710      	adds	r7, #16
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	bd80      	pop	{r7, pc}

08006ed2 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8006ed2:	b480      	push	{r7}
 8006ed4:	b083      	sub	sp, #12
 8006ed6:	af00      	add	r7, sp, #0
 8006ed8:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8006eda:	bf00      	nop
 8006edc:	370c      	adds	r7, #12
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee4:	4770      	bx	lr

08006ee6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ee6:	b580      	push	{r7, lr}
 8006ee8:	b088      	sub	sp, #32
 8006eea:	af00      	add	r7, sp, #0
 8006eec:	60f8      	str	r0, [r7, #12]
 8006eee:	60b9      	str	r1, [r7, #8]
 8006ef0:	603b      	str	r3, [r7, #0]
 8006ef2:	4613      	mov	r3, r2
 8006ef4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006f00:	2b01      	cmp	r3, #1
 8006f02:	d101      	bne.n	8006f08 <HAL_SPI_Transmit+0x22>
 8006f04:	2302      	movs	r3, #2
 8006f06:	e15f      	b.n	80071c8 <HAL_SPI_Transmit+0x2e2>
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	2201      	movs	r2, #1
 8006f0c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006f10:	f7fc fb6a 	bl	80035e8 <HAL_GetTick>
 8006f14:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006f16:	88fb      	ldrh	r3, [r7, #6]
 8006f18:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006f20:	b2db      	uxtb	r3, r3
 8006f22:	2b01      	cmp	r3, #1
 8006f24:	d002      	beq.n	8006f2c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006f26:	2302      	movs	r3, #2
 8006f28:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006f2a:	e148      	b.n	80071be <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d002      	beq.n	8006f38 <HAL_SPI_Transmit+0x52>
 8006f32:	88fb      	ldrh	r3, [r7, #6]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d102      	bne.n	8006f3e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006f38:	2301      	movs	r3, #1
 8006f3a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006f3c:	e13f      	b.n	80071be <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	2203      	movs	r2, #3
 8006f42:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	2200      	movs	r2, #0
 8006f4a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	68ba      	ldr	r2, [r7, #8]
 8006f50:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	88fa      	ldrh	r2, [r7, #6]
 8006f56:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	88fa      	ldrh	r2, [r7, #6]
 8006f5c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	2200      	movs	r2, #0
 8006f62:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	2200      	movs	r2, #0
 8006f68:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	2200      	movs	r2, #0
 8006f70:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	2200      	movs	r2, #0
 8006f78:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	689b      	ldr	r3, [r3, #8]
 8006f84:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006f88:	d10f      	bne.n	8006faa <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	681a      	ldr	r2, [r3, #0]
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006f98:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	681a      	ldr	r2, [r3, #0]
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006fa8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fb4:	2b40      	cmp	r3, #64	@ 0x40
 8006fb6:	d007      	beq.n	8006fc8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	681a      	ldr	r2, [r3, #0]
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006fc6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	68db      	ldr	r3, [r3, #12]
 8006fcc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006fd0:	d94f      	bls.n	8007072 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	685b      	ldr	r3, [r3, #4]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d002      	beq.n	8006fe0 <HAL_SPI_Transmit+0xfa>
 8006fda:	8afb      	ldrh	r3, [r7, #22]
 8006fdc:	2b01      	cmp	r3, #1
 8006fde:	d142      	bne.n	8007066 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fe4:	881a      	ldrh	r2, [r3, #0]
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ff0:	1c9a      	adds	r2, r3, #2
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ffa:	b29b      	uxth	r3, r3
 8006ffc:	3b01      	subs	r3, #1
 8006ffe:	b29a      	uxth	r2, r3
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007004:	e02f      	b.n	8007066 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	689b      	ldr	r3, [r3, #8]
 800700c:	f003 0302 	and.w	r3, r3, #2
 8007010:	2b02      	cmp	r3, #2
 8007012:	d112      	bne.n	800703a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007018:	881a      	ldrh	r2, [r3, #0]
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007024:	1c9a      	adds	r2, r3, #2
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800702e:	b29b      	uxth	r3, r3
 8007030:	3b01      	subs	r3, #1
 8007032:	b29a      	uxth	r2, r3
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007038:	e015      	b.n	8007066 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800703a:	f7fc fad5 	bl	80035e8 <HAL_GetTick>
 800703e:	4602      	mov	r2, r0
 8007040:	69bb      	ldr	r3, [r7, #24]
 8007042:	1ad3      	subs	r3, r2, r3
 8007044:	683a      	ldr	r2, [r7, #0]
 8007046:	429a      	cmp	r2, r3
 8007048:	d803      	bhi.n	8007052 <HAL_SPI_Transmit+0x16c>
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007050:	d102      	bne.n	8007058 <HAL_SPI_Transmit+0x172>
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d106      	bne.n	8007066 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8007058:	2303      	movs	r3, #3
 800705a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	2201      	movs	r2, #1
 8007060:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8007064:	e0ab      	b.n	80071be <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800706a:	b29b      	uxth	r3, r3
 800706c:	2b00      	cmp	r3, #0
 800706e:	d1ca      	bne.n	8007006 <HAL_SPI_Transmit+0x120>
 8007070:	e080      	b.n	8007174 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	685b      	ldr	r3, [r3, #4]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d002      	beq.n	8007080 <HAL_SPI_Transmit+0x19a>
 800707a:	8afb      	ldrh	r3, [r7, #22]
 800707c:	2b01      	cmp	r3, #1
 800707e:	d174      	bne.n	800716a <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007084:	b29b      	uxth	r3, r3
 8007086:	2b01      	cmp	r3, #1
 8007088:	d912      	bls.n	80070b0 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800708e:	881a      	ldrh	r2, [r3, #0]
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800709a:	1c9a      	adds	r2, r3, #2
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80070a4:	b29b      	uxth	r3, r3
 80070a6:	3b02      	subs	r3, #2
 80070a8:	b29a      	uxth	r2, r3
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80070ae:	e05c      	b.n	800716a <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	330c      	adds	r3, #12
 80070ba:	7812      	ldrb	r2, [r2, #0]
 80070bc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070c2:	1c5a      	adds	r2, r3, #1
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80070cc:	b29b      	uxth	r3, r3
 80070ce:	3b01      	subs	r3, #1
 80070d0:	b29a      	uxth	r2, r3
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80070d6:	e048      	b.n	800716a <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	689b      	ldr	r3, [r3, #8]
 80070de:	f003 0302 	and.w	r3, r3, #2
 80070e2:	2b02      	cmp	r3, #2
 80070e4:	d12b      	bne.n	800713e <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80070ea:	b29b      	uxth	r3, r3
 80070ec:	2b01      	cmp	r3, #1
 80070ee:	d912      	bls.n	8007116 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070f4:	881a      	ldrh	r2, [r3, #0]
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007100:	1c9a      	adds	r2, r3, #2
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800710a:	b29b      	uxth	r3, r3
 800710c:	3b02      	subs	r3, #2
 800710e:	b29a      	uxth	r2, r3
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007114:	e029      	b.n	800716a <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	330c      	adds	r3, #12
 8007120:	7812      	ldrb	r2, [r2, #0]
 8007122:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007128:	1c5a      	adds	r2, r3, #1
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007132:	b29b      	uxth	r3, r3
 8007134:	3b01      	subs	r3, #1
 8007136:	b29a      	uxth	r2, r3
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800713c:	e015      	b.n	800716a <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800713e:	f7fc fa53 	bl	80035e8 <HAL_GetTick>
 8007142:	4602      	mov	r2, r0
 8007144:	69bb      	ldr	r3, [r7, #24]
 8007146:	1ad3      	subs	r3, r2, r3
 8007148:	683a      	ldr	r2, [r7, #0]
 800714a:	429a      	cmp	r2, r3
 800714c:	d803      	bhi.n	8007156 <HAL_SPI_Transmit+0x270>
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007154:	d102      	bne.n	800715c <HAL_SPI_Transmit+0x276>
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d106      	bne.n	800716a <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 800715c:	2303      	movs	r3, #3
 800715e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	2201      	movs	r2, #1
 8007164:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8007168:	e029      	b.n	80071be <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800716e:	b29b      	uxth	r3, r3
 8007170:	2b00      	cmp	r3, #0
 8007172:	d1b1      	bne.n	80070d8 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007174:	69ba      	ldr	r2, [r7, #24]
 8007176:	6839      	ldr	r1, [r7, #0]
 8007178:	68f8      	ldr	r0, [r7, #12]
 800717a:	f000 fcf9 	bl	8007b70 <SPI_EndRxTxTransaction>
 800717e:	4603      	mov	r3, r0
 8007180:	2b00      	cmp	r3, #0
 8007182:	d002      	beq.n	800718a <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	2220      	movs	r2, #32
 8007188:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	689b      	ldr	r3, [r3, #8]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d10a      	bne.n	80071a8 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007192:	2300      	movs	r3, #0
 8007194:	613b      	str	r3, [r7, #16]
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	68db      	ldr	r3, [r3, #12]
 800719c:	613b      	str	r3, [r7, #16]
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	689b      	ldr	r3, [r3, #8]
 80071a4:	613b      	str	r3, [r7, #16]
 80071a6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d002      	beq.n	80071b6 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80071b0:	2301      	movs	r3, #1
 80071b2:	77fb      	strb	r3, [r7, #31]
 80071b4:	e003      	b.n	80071be <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	2201      	movs	r2, #1
 80071ba:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	2200      	movs	r2, #0
 80071c2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80071c6:	7ffb      	ldrb	r3, [r7, #31]
}
 80071c8:	4618      	mov	r0, r3
 80071ca:	3720      	adds	r7, #32
 80071cc:	46bd      	mov	sp, r7
 80071ce:	bd80      	pop	{r7, pc}

080071d0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b088      	sub	sp, #32
 80071d4:	af02      	add	r7, sp, #8
 80071d6:	60f8      	str	r0, [r7, #12]
 80071d8:	60b9      	str	r1, [r7, #8]
 80071da:	603b      	str	r3, [r7, #0]
 80071dc:	4613      	mov	r3, r2
 80071de:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80071e0:	2300      	movs	r3, #0
 80071e2:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80071ea:	b2db      	uxtb	r3, r3
 80071ec:	2b01      	cmp	r3, #1
 80071ee:	d002      	beq.n	80071f6 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 80071f0:	2302      	movs	r3, #2
 80071f2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80071f4:	e11a      	b.n	800742c <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	685b      	ldr	r3, [r3, #4]
 80071fa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80071fe:	d112      	bne.n	8007226 <HAL_SPI_Receive+0x56>
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	689b      	ldr	r3, [r3, #8]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d10e      	bne.n	8007226 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	2204      	movs	r2, #4
 800720c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007210:	88fa      	ldrh	r2, [r7, #6]
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	9300      	str	r3, [sp, #0]
 8007216:	4613      	mov	r3, r2
 8007218:	68ba      	ldr	r2, [r7, #8]
 800721a:	68b9      	ldr	r1, [r7, #8]
 800721c:	68f8      	ldr	r0, [r7, #12]
 800721e:	f000 f90e 	bl	800743e <HAL_SPI_TransmitReceive>
 8007222:	4603      	mov	r3, r0
 8007224:	e107      	b.n	8007436 <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800722c:	2b01      	cmp	r3, #1
 800722e:	d101      	bne.n	8007234 <HAL_SPI_Receive+0x64>
 8007230:	2302      	movs	r3, #2
 8007232:	e100      	b.n	8007436 <HAL_SPI_Receive+0x266>
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	2201      	movs	r2, #1
 8007238:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800723c:	f7fc f9d4 	bl	80035e8 <HAL_GetTick>
 8007240:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d002      	beq.n	800724e <HAL_SPI_Receive+0x7e>
 8007248:	88fb      	ldrh	r3, [r7, #6]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d102      	bne.n	8007254 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800724e:	2301      	movs	r3, #1
 8007250:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007252:	e0eb      	b.n	800742c <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	2204      	movs	r2, #4
 8007258:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	2200      	movs	r2, #0
 8007260:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	68ba      	ldr	r2, [r7, #8]
 8007266:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	88fa      	ldrh	r2, [r7, #6]
 800726c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	88fa      	ldrh	r2, [r7, #6]
 8007274:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	2200      	movs	r2, #0
 800727c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	2200      	movs	r2, #0
 8007282:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	2200      	movs	r2, #0
 8007288:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	2200      	movs	r2, #0
 800728e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	2200      	movs	r2, #0
 8007294:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	68db      	ldr	r3, [r3, #12]
 800729a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800729e:	d908      	bls.n	80072b2 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	685a      	ldr	r2, [r3, #4]
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80072ae:	605a      	str	r2, [r3, #4]
 80072b0:	e007      	b.n	80072c2 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	685a      	ldr	r2, [r3, #4]
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80072c0:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	689b      	ldr	r3, [r3, #8]
 80072c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80072ca:	d10f      	bne.n	80072ec <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	681a      	ldr	r2, [r3, #0]
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80072da:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	681a      	ldr	r2, [r3, #0]
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80072ea:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072f6:	2b40      	cmp	r3, #64	@ 0x40
 80072f8:	d007      	beq.n	800730a <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	681a      	ldr	r2, [r3, #0]
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007308:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	68db      	ldr	r3, [r3, #12]
 800730e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007312:	d86f      	bhi.n	80073f4 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007314:	e034      	b.n	8007380 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	689b      	ldr	r3, [r3, #8]
 800731c:	f003 0301 	and.w	r3, r3, #1
 8007320:	2b01      	cmp	r3, #1
 8007322:	d117      	bne.n	8007354 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f103 020c 	add.w	r2, r3, #12
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007330:	7812      	ldrb	r2, [r2, #0]
 8007332:	b2d2      	uxtb	r2, r2
 8007334:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800733a:	1c5a      	adds	r2, r3, #1
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007346:	b29b      	uxth	r3, r3
 8007348:	3b01      	subs	r3, #1
 800734a:	b29a      	uxth	r2, r3
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8007352:	e015      	b.n	8007380 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007354:	f7fc f948 	bl	80035e8 <HAL_GetTick>
 8007358:	4602      	mov	r2, r0
 800735a:	693b      	ldr	r3, [r7, #16]
 800735c:	1ad3      	subs	r3, r2, r3
 800735e:	683a      	ldr	r2, [r7, #0]
 8007360:	429a      	cmp	r2, r3
 8007362:	d803      	bhi.n	800736c <HAL_SPI_Receive+0x19c>
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	f1b3 3fff 	cmp.w	r3, #4294967295
 800736a:	d102      	bne.n	8007372 <HAL_SPI_Receive+0x1a2>
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d106      	bne.n	8007380 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 8007372:	2303      	movs	r3, #3
 8007374:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	2201      	movs	r2, #1
 800737a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800737e:	e055      	b.n	800742c <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007386:	b29b      	uxth	r3, r3
 8007388:	2b00      	cmp	r3, #0
 800738a:	d1c4      	bne.n	8007316 <HAL_SPI_Receive+0x146>
 800738c:	e038      	b.n	8007400 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	689b      	ldr	r3, [r3, #8]
 8007394:	f003 0301 	and.w	r3, r3, #1
 8007398:	2b01      	cmp	r3, #1
 800739a:	d115      	bne.n	80073c8 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	68da      	ldr	r2, [r3, #12]
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073a6:	b292      	uxth	r2, r2
 80073a8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073ae:	1c9a      	adds	r2, r3, #2
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80073ba:	b29b      	uxth	r3, r3
 80073bc:	3b01      	subs	r3, #1
 80073be:	b29a      	uxth	r2, r3
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80073c6:	e015      	b.n	80073f4 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80073c8:	f7fc f90e 	bl	80035e8 <HAL_GetTick>
 80073cc:	4602      	mov	r2, r0
 80073ce:	693b      	ldr	r3, [r7, #16]
 80073d0:	1ad3      	subs	r3, r2, r3
 80073d2:	683a      	ldr	r2, [r7, #0]
 80073d4:	429a      	cmp	r2, r3
 80073d6:	d803      	bhi.n	80073e0 <HAL_SPI_Receive+0x210>
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073de:	d102      	bne.n	80073e6 <HAL_SPI_Receive+0x216>
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d106      	bne.n	80073f4 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 80073e6:	2303      	movs	r3, #3
 80073e8:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	2201      	movs	r2, #1
 80073ee:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80073f2:	e01b      	b.n	800742c <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80073fa:	b29b      	uxth	r3, r3
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d1c6      	bne.n	800738e <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007400:	693a      	ldr	r2, [r7, #16]
 8007402:	6839      	ldr	r1, [r7, #0]
 8007404:	68f8      	ldr	r0, [r7, #12]
 8007406:	f000 fb5b 	bl	8007ac0 <SPI_EndRxTransaction>
 800740a:	4603      	mov	r3, r0
 800740c:	2b00      	cmp	r3, #0
 800740e:	d002      	beq.n	8007416 <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	2220      	movs	r2, #32
 8007414:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800741a:	2b00      	cmp	r3, #0
 800741c:	d002      	beq.n	8007424 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 800741e:	2301      	movs	r3, #1
 8007420:	75fb      	strb	r3, [r7, #23]
 8007422:	e003      	b.n	800742c <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	2201      	movs	r2, #1
 8007428:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	2200      	movs	r2, #0
 8007430:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8007434:	7dfb      	ldrb	r3, [r7, #23]
}
 8007436:	4618      	mov	r0, r3
 8007438:	3718      	adds	r7, #24
 800743a:	46bd      	mov	sp, r7
 800743c:	bd80      	pop	{r7, pc}

0800743e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800743e:	b580      	push	{r7, lr}
 8007440:	b08a      	sub	sp, #40	@ 0x28
 8007442:	af00      	add	r7, sp, #0
 8007444:	60f8      	str	r0, [r7, #12]
 8007446:	60b9      	str	r1, [r7, #8]
 8007448:	607a      	str	r2, [r7, #4]
 800744a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800744c:	2301      	movs	r3, #1
 800744e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007450:	2300      	movs	r3, #0
 8007452:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800745c:	2b01      	cmp	r3, #1
 800745e:	d101      	bne.n	8007464 <HAL_SPI_TransmitReceive+0x26>
 8007460:	2302      	movs	r3, #2
 8007462:	e20a      	b.n	800787a <HAL_SPI_TransmitReceive+0x43c>
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	2201      	movs	r2, #1
 8007468:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800746c:	f7fc f8bc 	bl	80035e8 <HAL_GetTick>
 8007470:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007478:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	685b      	ldr	r3, [r3, #4]
 800747e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8007480:	887b      	ldrh	r3, [r7, #2]
 8007482:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8007484:	887b      	ldrh	r3, [r7, #2]
 8007486:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007488:	7efb      	ldrb	r3, [r7, #27]
 800748a:	2b01      	cmp	r3, #1
 800748c:	d00e      	beq.n	80074ac <HAL_SPI_TransmitReceive+0x6e>
 800748e:	697b      	ldr	r3, [r7, #20]
 8007490:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007494:	d106      	bne.n	80074a4 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	689b      	ldr	r3, [r3, #8]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d102      	bne.n	80074a4 <HAL_SPI_TransmitReceive+0x66>
 800749e:	7efb      	ldrb	r3, [r7, #27]
 80074a0:	2b04      	cmp	r3, #4
 80074a2:	d003      	beq.n	80074ac <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80074a4:	2302      	movs	r3, #2
 80074a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80074aa:	e1e0      	b.n	800786e <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d005      	beq.n	80074be <HAL_SPI_TransmitReceive+0x80>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d002      	beq.n	80074be <HAL_SPI_TransmitReceive+0x80>
 80074b8:	887b      	ldrh	r3, [r7, #2]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d103      	bne.n	80074c6 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80074be:	2301      	movs	r3, #1
 80074c0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80074c4:	e1d3      	b.n	800786e <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80074cc:	b2db      	uxtb	r3, r3
 80074ce:	2b04      	cmp	r3, #4
 80074d0:	d003      	beq.n	80074da <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	2205      	movs	r2, #5
 80074d6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	2200      	movs	r2, #0
 80074de:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	687a      	ldr	r2, [r7, #4]
 80074e4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	887a      	ldrh	r2, [r7, #2]
 80074ea:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	887a      	ldrh	r2, [r7, #2]
 80074f2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	68ba      	ldr	r2, [r7, #8]
 80074fa:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	887a      	ldrh	r2, [r7, #2]
 8007500:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	887a      	ldrh	r2, [r7, #2]
 8007506:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	2200      	movs	r2, #0
 800750c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	2200      	movs	r2, #0
 8007512:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	68db      	ldr	r3, [r3, #12]
 8007518:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800751c:	d802      	bhi.n	8007524 <HAL_SPI_TransmitReceive+0xe6>
 800751e:	8a3b      	ldrh	r3, [r7, #16]
 8007520:	2b01      	cmp	r3, #1
 8007522:	d908      	bls.n	8007536 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	685a      	ldr	r2, [r3, #4]
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007532:	605a      	str	r2, [r3, #4]
 8007534:	e007      	b.n	8007546 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	685a      	ldr	r2, [r3, #4]
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007544:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007550:	2b40      	cmp	r3, #64	@ 0x40
 8007552:	d007      	beq.n	8007564 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	681a      	ldr	r2, [r3, #0]
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007562:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	68db      	ldr	r3, [r3, #12]
 8007568:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800756c:	f240 8081 	bls.w	8007672 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	685b      	ldr	r3, [r3, #4]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d002      	beq.n	800757e <HAL_SPI_TransmitReceive+0x140>
 8007578:	8a7b      	ldrh	r3, [r7, #18]
 800757a:	2b01      	cmp	r3, #1
 800757c:	d16d      	bne.n	800765a <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007582:	881a      	ldrh	r2, [r3, #0]
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800758e:	1c9a      	adds	r2, r3, #2
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007598:	b29b      	uxth	r3, r3
 800759a:	3b01      	subs	r3, #1
 800759c:	b29a      	uxth	r2, r3
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80075a2:	e05a      	b.n	800765a <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	689b      	ldr	r3, [r3, #8]
 80075aa:	f003 0302 	and.w	r3, r3, #2
 80075ae:	2b02      	cmp	r3, #2
 80075b0:	d11b      	bne.n	80075ea <HAL_SPI_TransmitReceive+0x1ac>
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80075b6:	b29b      	uxth	r3, r3
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d016      	beq.n	80075ea <HAL_SPI_TransmitReceive+0x1ac>
 80075bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075be:	2b01      	cmp	r3, #1
 80075c0:	d113      	bne.n	80075ea <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075c6:	881a      	ldrh	r2, [r3, #0]
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075d2:	1c9a      	adds	r2, r3, #2
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80075dc:	b29b      	uxth	r3, r3
 80075de:	3b01      	subs	r3, #1
 80075e0:	b29a      	uxth	r2, r3
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80075e6:	2300      	movs	r3, #0
 80075e8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	689b      	ldr	r3, [r3, #8]
 80075f0:	f003 0301 	and.w	r3, r3, #1
 80075f4:	2b01      	cmp	r3, #1
 80075f6:	d11c      	bne.n	8007632 <HAL_SPI_TransmitReceive+0x1f4>
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80075fe:	b29b      	uxth	r3, r3
 8007600:	2b00      	cmp	r3, #0
 8007602:	d016      	beq.n	8007632 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	68da      	ldr	r2, [r3, #12]
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800760e:	b292      	uxth	r2, r2
 8007610:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007616:	1c9a      	adds	r2, r3, #2
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007622:	b29b      	uxth	r3, r3
 8007624:	3b01      	subs	r3, #1
 8007626:	b29a      	uxth	r2, r3
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800762e:	2301      	movs	r3, #1
 8007630:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007632:	f7fb ffd9 	bl	80035e8 <HAL_GetTick>
 8007636:	4602      	mov	r2, r0
 8007638:	69fb      	ldr	r3, [r7, #28]
 800763a:	1ad3      	subs	r3, r2, r3
 800763c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800763e:	429a      	cmp	r2, r3
 8007640:	d80b      	bhi.n	800765a <HAL_SPI_TransmitReceive+0x21c>
 8007642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007648:	d007      	beq.n	800765a <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 800764a:	2303      	movs	r3, #3
 800764c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	2201      	movs	r2, #1
 8007654:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8007658:	e109      	b.n	800786e <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800765e:	b29b      	uxth	r3, r3
 8007660:	2b00      	cmp	r3, #0
 8007662:	d19f      	bne.n	80075a4 <HAL_SPI_TransmitReceive+0x166>
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800766a:	b29b      	uxth	r3, r3
 800766c:	2b00      	cmp	r3, #0
 800766e:	d199      	bne.n	80075a4 <HAL_SPI_TransmitReceive+0x166>
 8007670:	e0e3      	b.n	800783a <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	685b      	ldr	r3, [r3, #4]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d003      	beq.n	8007682 <HAL_SPI_TransmitReceive+0x244>
 800767a:	8a7b      	ldrh	r3, [r7, #18]
 800767c:	2b01      	cmp	r3, #1
 800767e:	f040 80cf 	bne.w	8007820 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007686:	b29b      	uxth	r3, r3
 8007688:	2b01      	cmp	r3, #1
 800768a:	d912      	bls.n	80076b2 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007690:	881a      	ldrh	r2, [r3, #0]
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800769c:	1c9a      	adds	r2, r3, #2
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80076a6:	b29b      	uxth	r3, r3
 80076a8:	3b02      	subs	r3, #2
 80076aa:	b29a      	uxth	r2, r3
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80076b0:	e0b6      	b.n	8007820 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	330c      	adds	r3, #12
 80076bc:	7812      	ldrb	r2, [r2, #0]
 80076be:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076c4:	1c5a      	adds	r2, r3, #1
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80076ce:	b29b      	uxth	r3, r3
 80076d0:	3b01      	subs	r3, #1
 80076d2:	b29a      	uxth	r2, r3
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80076d8:	e0a2      	b.n	8007820 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	689b      	ldr	r3, [r3, #8]
 80076e0:	f003 0302 	and.w	r3, r3, #2
 80076e4:	2b02      	cmp	r3, #2
 80076e6:	d134      	bne.n	8007752 <HAL_SPI_TransmitReceive+0x314>
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80076ec:	b29b      	uxth	r3, r3
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d02f      	beq.n	8007752 <HAL_SPI_TransmitReceive+0x314>
 80076f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076f4:	2b01      	cmp	r3, #1
 80076f6:	d12c      	bne.n	8007752 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80076fc:	b29b      	uxth	r3, r3
 80076fe:	2b01      	cmp	r3, #1
 8007700:	d912      	bls.n	8007728 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007706:	881a      	ldrh	r2, [r3, #0]
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007712:	1c9a      	adds	r2, r3, #2
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800771c:	b29b      	uxth	r3, r3
 800771e:	3b02      	subs	r3, #2
 8007720:	b29a      	uxth	r2, r3
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007726:	e012      	b.n	800774e <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	330c      	adds	r3, #12
 8007732:	7812      	ldrb	r2, [r2, #0]
 8007734:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800773a:	1c5a      	adds	r2, r3, #1
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007744:	b29b      	uxth	r3, r3
 8007746:	3b01      	subs	r3, #1
 8007748:	b29a      	uxth	r2, r3
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800774e:	2300      	movs	r3, #0
 8007750:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	689b      	ldr	r3, [r3, #8]
 8007758:	f003 0301 	and.w	r3, r3, #1
 800775c:	2b01      	cmp	r3, #1
 800775e:	d148      	bne.n	80077f2 <HAL_SPI_TransmitReceive+0x3b4>
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007766:	b29b      	uxth	r3, r3
 8007768:	2b00      	cmp	r3, #0
 800776a:	d042      	beq.n	80077f2 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007772:	b29b      	uxth	r3, r3
 8007774:	2b01      	cmp	r3, #1
 8007776:	d923      	bls.n	80077c0 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	68da      	ldr	r2, [r3, #12]
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007782:	b292      	uxth	r2, r2
 8007784:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800778a:	1c9a      	adds	r2, r3, #2
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007796:	b29b      	uxth	r3, r3
 8007798:	3b02      	subs	r3, #2
 800779a:	b29a      	uxth	r2, r3
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80077a8:	b29b      	uxth	r3, r3
 80077aa:	2b01      	cmp	r3, #1
 80077ac:	d81f      	bhi.n	80077ee <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	685a      	ldr	r2, [r3, #4]
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80077bc:	605a      	str	r2, [r3, #4]
 80077be:	e016      	b.n	80077ee <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f103 020c 	add.w	r2, r3, #12
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077cc:	7812      	ldrb	r2, [r2, #0]
 80077ce:	b2d2      	uxtb	r2, r2
 80077d0:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077d6:	1c5a      	adds	r2, r3, #1
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80077e2:	b29b      	uxth	r3, r3
 80077e4:	3b01      	subs	r3, #1
 80077e6:	b29a      	uxth	r2, r3
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80077ee:	2301      	movs	r3, #1
 80077f0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80077f2:	f7fb fef9 	bl	80035e8 <HAL_GetTick>
 80077f6:	4602      	mov	r2, r0
 80077f8:	69fb      	ldr	r3, [r7, #28]
 80077fa:	1ad3      	subs	r3, r2, r3
 80077fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80077fe:	429a      	cmp	r2, r3
 8007800:	d803      	bhi.n	800780a <HAL_SPI_TransmitReceive+0x3cc>
 8007802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007804:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007808:	d102      	bne.n	8007810 <HAL_SPI_TransmitReceive+0x3d2>
 800780a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800780c:	2b00      	cmp	r3, #0
 800780e:	d107      	bne.n	8007820 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8007810:	2303      	movs	r3, #3
 8007812:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	2201      	movs	r2, #1
 800781a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800781e:	e026      	b.n	800786e <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007824:	b29b      	uxth	r3, r3
 8007826:	2b00      	cmp	r3, #0
 8007828:	f47f af57 	bne.w	80076da <HAL_SPI_TransmitReceive+0x29c>
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007832:	b29b      	uxth	r3, r3
 8007834:	2b00      	cmp	r3, #0
 8007836:	f47f af50 	bne.w	80076da <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800783a:	69fa      	ldr	r2, [r7, #28]
 800783c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800783e:	68f8      	ldr	r0, [r7, #12]
 8007840:	f000 f996 	bl	8007b70 <SPI_EndRxTxTransaction>
 8007844:	4603      	mov	r3, r0
 8007846:	2b00      	cmp	r3, #0
 8007848:	d005      	beq.n	8007856 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 800784a:	2301      	movs	r3, #1
 800784c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	2220      	movs	r2, #32
 8007854:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800785a:	2b00      	cmp	r3, #0
 800785c:	d003      	beq.n	8007866 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 800785e:	2301      	movs	r3, #1
 8007860:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007864:	e003      	b.n	800786e <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	2201      	movs	r2, #1
 800786a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	2200      	movs	r2, #0
 8007872:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8007876:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 800787a:	4618      	mov	r0, r3
 800787c:	3728      	adds	r7, #40	@ 0x28
 800787e:	46bd      	mov	sp, r7
 8007880:	bd80      	pop	{r7, pc}
	...

08007884 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b088      	sub	sp, #32
 8007888:	af00      	add	r7, sp, #0
 800788a:	60f8      	str	r0, [r7, #12]
 800788c:	60b9      	str	r1, [r7, #8]
 800788e:	603b      	str	r3, [r7, #0]
 8007890:	4613      	mov	r3, r2
 8007892:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007894:	f7fb fea8 	bl	80035e8 <HAL_GetTick>
 8007898:	4602      	mov	r2, r0
 800789a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800789c:	1a9b      	subs	r3, r3, r2
 800789e:	683a      	ldr	r2, [r7, #0]
 80078a0:	4413      	add	r3, r2
 80078a2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80078a4:	f7fb fea0 	bl	80035e8 <HAL_GetTick>
 80078a8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80078aa:	4b39      	ldr	r3, [pc, #228]	@ (8007990 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	015b      	lsls	r3, r3, #5
 80078b0:	0d1b      	lsrs	r3, r3, #20
 80078b2:	69fa      	ldr	r2, [r7, #28]
 80078b4:	fb02 f303 	mul.w	r3, r2, r3
 80078b8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80078ba:	e054      	b.n	8007966 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078c2:	d050      	beq.n	8007966 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80078c4:	f7fb fe90 	bl	80035e8 <HAL_GetTick>
 80078c8:	4602      	mov	r2, r0
 80078ca:	69bb      	ldr	r3, [r7, #24]
 80078cc:	1ad3      	subs	r3, r2, r3
 80078ce:	69fa      	ldr	r2, [r7, #28]
 80078d0:	429a      	cmp	r2, r3
 80078d2:	d902      	bls.n	80078da <SPI_WaitFlagStateUntilTimeout+0x56>
 80078d4:	69fb      	ldr	r3, [r7, #28]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d13d      	bne.n	8007956 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	685a      	ldr	r2, [r3, #4]
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80078e8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	685b      	ldr	r3, [r3, #4]
 80078ee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80078f2:	d111      	bne.n	8007918 <SPI_WaitFlagStateUntilTimeout+0x94>
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	689b      	ldr	r3, [r3, #8]
 80078f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80078fc:	d004      	beq.n	8007908 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	689b      	ldr	r3, [r3, #8]
 8007902:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007906:	d107      	bne.n	8007918 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	681a      	ldr	r2, [r3, #0]
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007916:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800791c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007920:	d10f      	bne.n	8007942 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	681a      	ldr	r2, [r3, #0]
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007930:	601a      	str	r2, [r3, #0]
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	681a      	ldr	r2, [r3, #0]
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007940:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	2201      	movs	r2, #1
 8007946:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	2200      	movs	r2, #0
 800794e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8007952:	2303      	movs	r3, #3
 8007954:	e017      	b.n	8007986 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007956:	697b      	ldr	r3, [r7, #20]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d101      	bne.n	8007960 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800795c:	2300      	movs	r3, #0
 800795e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007960:	697b      	ldr	r3, [r7, #20]
 8007962:	3b01      	subs	r3, #1
 8007964:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	689a      	ldr	r2, [r3, #8]
 800796c:	68bb      	ldr	r3, [r7, #8]
 800796e:	4013      	ands	r3, r2
 8007970:	68ba      	ldr	r2, [r7, #8]
 8007972:	429a      	cmp	r2, r3
 8007974:	bf0c      	ite	eq
 8007976:	2301      	moveq	r3, #1
 8007978:	2300      	movne	r3, #0
 800797a:	b2db      	uxtb	r3, r3
 800797c:	461a      	mov	r2, r3
 800797e:	79fb      	ldrb	r3, [r7, #7]
 8007980:	429a      	cmp	r2, r3
 8007982:	d19b      	bne.n	80078bc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007984:	2300      	movs	r3, #0
}
 8007986:	4618      	mov	r0, r3
 8007988:	3720      	adds	r7, #32
 800798a:	46bd      	mov	sp, r7
 800798c:	bd80      	pop	{r7, pc}
 800798e:	bf00      	nop
 8007990:	20000008 	.word	0x20000008

08007994 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b08a      	sub	sp, #40	@ 0x28
 8007998:	af00      	add	r7, sp, #0
 800799a:	60f8      	str	r0, [r7, #12]
 800799c:	60b9      	str	r1, [r7, #8]
 800799e:	607a      	str	r2, [r7, #4]
 80079a0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80079a2:	2300      	movs	r3, #0
 80079a4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80079a6:	f7fb fe1f 	bl	80035e8 <HAL_GetTick>
 80079aa:	4602      	mov	r2, r0
 80079ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079ae:	1a9b      	subs	r3, r3, r2
 80079b0:	683a      	ldr	r2, [r7, #0]
 80079b2:	4413      	add	r3, r2
 80079b4:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80079b6:	f7fb fe17 	bl	80035e8 <HAL_GetTick>
 80079ba:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	330c      	adds	r3, #12
 80079c2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80079c4:	4b3d      	ldr	r3, [pc, #244]	@ (8007abc <SPI_WaitFifoStateUntilTimeout+0x128>)
 80079c6:	681a      	ldr	r2, [r3, #0]
 80079c8:	4613      	mov	r3, r2
 80079ca:	009b      	lsls	r3, r3, #2
 80079cc:	4413      	add	r3, r2
 80079ce:	00da      	lsls	r2, r3, #3
 80079d0:	1ad3      	subs	r3, r2, r3
 80079d2:	0d1b      	lsrs	r3, r3, #20
 80079d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80079d6:	fb02 f303 	mul.w	r3, r2, r3
 80079da:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80079dc:	e060      	b.n	8007aa0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80079de:	68bb      	ldr	r3, [r7, #8]
 80079e0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80079e4:	d107      	bne.n	80079f6 <SPI_WaitFifoStateUntilTimeout+0x62>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d104      	bne.n	80079f6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80079ec:	69fb      	ldr	r3, [r7, #28]
 80079ee:	781b      	ldrb	r3, [r3, #0]
 80079f0:	b2db      	uxtb	r3, r3
 80079f2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80079f4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079fc:	d050      	beq.n	8007aa0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80079fe:	f7fb fdf3 	bl	80035e8 <HAL_GetTick>
 8007a02:	4602      	mov	r2, r0
 8007a04:	6a3b      	ldr	r3, [r7, #32]
 8007a06:	1ad3      	subs	r3, r2, r3
 8007a08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007a0a:	429a      	cmp	r2, r3
 8007a0c:	d902      	bls.n	8007a14 <SPI_WaitFifoStateUntilTimeout+0x80>
 8007a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d13d      	bne.n	8007a90 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	685a      	ldr	r2, [r3, #4]
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007a22:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	685b      	ldr	r3, [r3, #4]
 8007a28:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007a2c:	d111      	bne.n	8007a52 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	689b      	ldr	r3, [r3, #8]
 8007a32:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007a36:	d004      	beq.n	8007a42 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	689b      	ldr	r3, [r3, #8]
 8007a3c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007a40:	d107      	bne.n	8007a52 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	681a      	ldr	r2, [r3, #0]
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007a50:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a56:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007a5a:	d10f      	bne.n	8007a7c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	681a      	ldr	r2, [r3, #0]
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007a6a:	601a      	str	r2, [r3, #0]
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	681a      	ldr	r2, [r3, #0]
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007a7a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	2201      	movs	r2, #1
 8007a80:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	2200      	movs	r2, #0
 8007a88:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8007a8c:	2303      	movs	r3, #3
 8007a8e:	e010      	b.n	8007ab2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007a90:	69bb      	ldr	r3, [r7, #24]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d101      	bne.n	8007a9a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8007a96:	2300      	movs	r3, #0
 8007a98:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8007a9a:	69bb      	ldr	r3, [r7, #24]
 8007a9c:	3b01      	subs	r3, #1
 8007a9e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	689a      	ldr	r2, [r3, #8]
 8007aa6:	68bb      	ldr	r3, [r7, #8]
 8007aa8:	4013      	ands	r3, r2
 8007aaa:	687a      	ldr	r2, [r7, #4]
 8007aac:	429a      	cmp	r2, r3
 8007aae:	d196      	bne.n	80079de <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007ab0:	2300      	movs	r3, #0
}
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	3728      	adds	r7, #40	@ 0x28
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	bd80      	pop	{r7, pc}
 8007aba:	bf00      	nop
 8007abc:	20000008 	.word	0x20000008

08007ac0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b086      	sub	sp, #24
 8007ac4:	af02      	add	r7, sp, #8
 8007ac6:	60f8      	str	r0, [r7, #12]
 8007ac8:	60b9      	str	r1, [r7, #8]
 8007aca:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	685b      	ldr	r3, [r3, #4]
 8007ad0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007ad4:	d111      	bne.n	8007afa <SPI_EndRxTransaction+0x3a>
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	689b      	ldr	r3, [r3, #8]
 8007ada:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007ade:	d004      	beq.n	8007aea <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	689b      	ldr	r3, [r3, #8]
 8007ae4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007ae8:	d107      	bne.n	8007afa <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	681a      	ldr	r2, [r3, #0]
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007af8:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	9300      	str	r3, [sp, #0]
 8007afe:	68bb      	ldr	r3, [r7, #8]
 8007b00:	2200      	movs	r2, #0
 8007b02:	2180      	movs	r1, #128	@ 0x80
 8007b04:	68f8      	ldr	r0, [r7, #12]
 8007b06:	f7ff febd 	bl	8007884 <SPI_WaitFlagStateUntilTimeout>
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d007      	beq.n	8007b20 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007b14:	f043 0220 	orr.w	r2, r3, #32
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007b1c:	2303      	movs	r3, #3
 8007b1e:	e023      	b.n	8007b68 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	685b      	ldr	r3, [r3, #4]
 8007b24:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007b28:	d11d      	bne.n	8007b66 <SPI_EndRxTransaction+0xa6>
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	689b      	ldr	r3, [r3, #8]
 8007b2e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007b32:	d004      	beq.n	8007b3e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	689b      	ldr	r3, [r3, #8]
 8007b38:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b3c:	d113      	bne.n	8007b66 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	9300      	str	r3, [sp, #0]
 8007b42:	68bb      	ldr	r3, [r7, #8]
 8007b44:	2200      	movs	r2, #0
 8007b46:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8007b4a:	68f8      	ldr	r0, [r7, #12]
 8007b4c:	f7ff ff22 	bl	8007994 <SPI_WaitFifoStateUntilTimeout>
 8007b50:	4603      	mov	r3, r0
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d007      	beq.n	8007b66 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007b5a:	f043 0220 	orr.w	r2, r3, #32
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8007b62:	2303      	movs	r3, #3
 8007b64:	e000      	b.n	8007b68 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8007b66:	2300      	movs	r3, #0
}
 8007b68:	4618      	mov	r0, r3
 8007b6a:	3710      	adds	r7, #16
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	bd80      	pop	{r7, pc}

08007b70 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b086      	sub	sp, #24
 8007b74:	af02      	add	r7, sp, #8
 8007b76:	60f8      	str	r0, [r7, #12]
 8007b78:	60b9      	str	r1, [r7, #8]
 8007b7a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	9300      	str	r3, [sp, #0]
 8007b80:	68bb      	ldr	r3, [r7, #8]
 8007b82:	2200      	movs	r2, #0
 8007b84:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8007b88:	68f8      	ldr	r0, [r7, #12]
 8007b8a:	f7ff ff03 	bl	8007994 <SPI_WaitFifoStateUntilTimeout>
 8007b8e:	4603      	mov	r3, r0
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d007      	beq.n	8007ba4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007b98:	f043 0220 	orr.w	r2, r3, #32
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007ba0:	2303      	movs	r3, #3
 8007ba2:	e027      	b.n	8007bf4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	9300      	str	r3, [sp, #0]
 8007ba8:	68bb      	ldr	r3, [r7, #8]
 8007baa:	2200      	movs	r2, #0
 8007bac:	2180      	movs	r1, #128	@ 0x80
 8007bae:	68f8      	ldr	r0, [r7, #12]
 8007bb0:	f7ff fe68 	bl	8007884 <SPI_WaitFlagStateUntilTimeout>
 8007bb4:	4603      	mov	r3, r0
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d007      	beq.n	8007bca <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007bbe:	f043 0220 	orr.w	r2, r3, #32
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007bc6:	2303      	movs	r3, #3
 8007bc8:	e014      	b.n	8007bf4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	9300      	str	r3, [sp, #0]
 8007bce:	68bb      	ldr	r3, [r7, #8]
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8007bd6:	68f8      	ldr	r0, [r7, #12]
 8007bd8:	f7ff fedc 	bl	8007994 <SPI_WaitFifoStateUntilTimeout>
 8007bdc:	4603      	mov	r3, r0
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d007      	beq.n	8007bf2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007be6:	f043 0220 	orr.w	r2, r3, #32
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007bee:	2303      	movs	r3, #3
 8007bf0:	e000      	b.n	8007bf4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007bf2:	2300      	movs	r3, #0
}
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	3710      	adds	r7, #16
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	bd80      	pop	{r7, pc}

08007bfc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b082      	sub	sp, #8
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d101      	bne.n	8007c0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007c0a:	2301      	movs	r3, #1
 8007c0c:	e049      	b.n	8007ca2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007c14:	b2db      	uxtb	r3, r3
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d106      	bne.n	8007c28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	f000 f841 	bl	8007caa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2202      	movs	r2, #2
 8007c2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681a      	ldr	r2, [r3, #0]
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	3304      	adds	r3, #4
 8007c38:	4619      	mov	r1, r3
 8007c3a:	4610      	mov	r0, r2
 8007c3c:	f000 f9be 	bl	8007fbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2201      	movs	r2, #1
 8007c44:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2201      	movs	r2, #1
 8007c4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2201      	movs	r2, #1
 8007c54:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2201      	movs	r2, #1
 8007c5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2201      	movs	r2, #1
 8007c64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2201      	movs	r2, #1
 8007c6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2201      	movs	r2, #1
 8007c74:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2201      	movs	r2, #1
 8007c7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2201      	movs	r2, #1
 8007c84:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2201      	movs	r2, #1
 8007c8c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2201      	movs	r2, #1
 8007c94:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2201      	movs	r2, #1
 8007c9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007ca0:	2300      	movs	r3, #0
}
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	3708      	adds	r7, #8
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	bd80      	pop	{r7, pc}

08007caa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007caa:	b480      	push	{r7}
 8007cac:	b083      	sub	sp, #12
 8007cae:	af00      	add	r7, sp, #0
 8007cb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007cb2:	bf00      	nop
 8007cb4:	370c      	adds	r7, #12
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbc:	4770      	bx	lr
	...

08007cc0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007cc0:	b480      	push	{r7}
 8007cc2:	b085      	sub	sp, #20
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007cce:	b2db      	uxtb	r3, r3
 8007cd0:	2b01      	cmp	r3, #1
 8007cd2:	d001      	beq.n	8007cd8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007cd4:	2301      	movs	r3, #1
 8007cd6:	e036      	b.n	8007d46 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2202      	movs	r2, #2
 8007cdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	68da      	ldr	r2, [r3, #12]
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	f042 0201 	orr.w	r2, r2, #1
 8007cee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	4a17      	ldr	r2, [pc, #92]	@ (8007d54 <HAL_TIM_Base_Start_IT+0x94>)
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	d004      	beq.n	8007d04 <HAL_TIM_Base_Start_IT+0x44>
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d02:	d115      	bne.n	8007d30 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	689a      	ldr	r2, [r3, #8]
 8007d0a:	4b13      	ldr	r3, [pc, #76]	@ (8007d58 <HAL_TIM_Base_Start_IT+0x98>)
 8007d0c:	4013      	ands	r3, r2
 8007d0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	2b06      	cmp	r3, #6
 8007d14:	d015      	beq.n	8007d42 <HAL_TIM_Base_Start_IT+0x82>
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d1c:	d011      	beq.n	8007d42 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	681a      	ldr	r2, [r3, #0]
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f042 0201 	orr.w	r2, r2, #1
 8007d2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d2e:	e008      	b.n	8007d42 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	681a      	ldr	r2, [r3, #0]
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	f042 0201 	orr.w	r2, r2, #1
 8007d3e:	601a      	str	r2, [r3, #0]
 8007d40:	e000      	b.n	8007d44 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d42:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007d44:	2300      	movs	r3, #0
}
 8007d46:	4618      	mov	r0, r3
 8007d48:	3714      	adds	r7, #20
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d50:	4770      	bx	lr
 8007d52:	bf00      	nop
 8007d54:	40012c00 	.word	0x40012c00
 8007d58:	00010007 	.word	0x00010007

08007d5c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b084      	sub	sp, #16
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	68db      	ldr	r3, [r3, #12]
 8007d6a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	691b      	ldr	r3, [r3, #16]
 8007d72:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007d74:	68bb      	ldr	r3, [r7, #8]
 8007d76:	f003 0302 	and.w	r3, r3, #2
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d020      	beq.n	8007dc0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	f003 0302 	and.w	r3, r3, #2
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d01b      	beq.n	8007dc0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f06f 0202 	mvn.w	r2, #2
 8007d90:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2201      	movs	r2, #1
 8007d96:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	699b      	ldr	r3, [r3, #24]
 8007d9e:	f003 0303 	and.w	r3, r3, #3
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d003      	beq.n	8007dae <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f000 f8e9 	bl	8007f7e <HAL_TIM_IC_CaptureCallback>
 8007dac:	e005      	b.n	8007dba <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007dae:	6878      	ldr	r0, [r7, #4]
 8007db0:	f000 f8db 	bl	8007f6a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007db4:	6878      	ldr	r0, [r7, #4]
 8007db6:	f000 f8ec 	bl	8007f92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007dc0:	68bb      	ldr	r3, [r7, #8]
 8007dc2:	f003 0304 	and.w	r3, r3, #4
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d020      	beq.n	8007e0c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	f003 0304 	and.w	r3, r3, #4
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d01b      	beq.n	8007e0c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f06f 0204 	mvn.w	r2, #4
 8007ddc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2202      	movs	r2, #2
 8007de2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	699b      	ldr	r3, [r3, #24]
 8007dea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d003      	beq.n	8007dfa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	f000 f8c3 	bl	8007f7e <HAL_TIM_IC_CaptureCallback>
 8007df8:	e005      	b.n	8007e06 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007dfa:	6878      	ldr	r0, [r7, #4]
 8007dfc:	f000 f8b5 	bl	8007f6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e00:	6878      	ldr	r0, [r7, #4]
 8007e02:	f000 f8c6 	bl	8007f92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2200      	movs	r2, #0
 8007e0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007e0c:	68bb      	ldr	r3, [r7, #8]
 8007e0e:	f003 0308 	and.w	r3, r3, #8
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d020      	beq.n	8007e58 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	f003 0308 	and.w	r3, r3, #8
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d01b      	beq.n	8007e58 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f06f 0208 	mvn.w	r2, #8
 8007e28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2204      	movs	r2, #4
 8007e2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	69db      	ldr	r3, [r3, #28]
 8007e36:	f003 0303 	and.w	r3, r3, #3
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d003      	beq.n	8007e46 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	f000 f89d 	bl	8007f7e <HAL_TIM_IC_CaptureCallback>
 8007e44:	e005      	b.n	8007e52 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	f000 f88f 	bl	8007f6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e4c:	6878      	ldr	r0, [r7, #4]
 8007e4e:	f000 f8a0 	bl	8007f92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2200      	movs	r2, #0
 8007e56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007e58:	68bb      	ldr	r3, [r7, #8]
 8007e5a:	f003 0310 	and.w	r3, r3, #16
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d020      	beq.n	8007ea4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	f003 0310 	and.w	r3, r3, #16
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d01b      	beq.n	8007ea4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f06f 0210 	mvn.w	r2, #16
 8007e74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2208      	movs	r2, #8
 8007e7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	69db      	ldr	r3, [r3, #28]
 8007e82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d003      	beq.n	8007e92 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	f000 f877 	bl	8007f7e <HAL_TIM_IC_CaptureCallback>
 8007e90:	e005      	b.n	8007e9e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e92:	6878      	ldr	r0, [r7, #4]
 8007e94:	f000 f869 	bl	8007f6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e98:	6878      	ldr	r0, [r7, #4]
 8007e9a:	f000 f87a 	bl	8007f92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007ea4:	68bb      	ldr	r3, [r7, #8]
 8007ea6:	f003 0301 	and.w	r3, r3, #1
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d00c      	beq.n	8007ec8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	f003 0301 	and.w	r3, r3, #1
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d007      	beq.n	8007ec8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f06f 0201 	mvn.w	r2, #1
 8007ec0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007ec2:	6878      	ldr	r0, [r7, #4]
 8007ec4:	f7fb f896 	bl	8002ff4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d104      	bne.n	8007edc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007ed2:	68bb      	ldr	r3, [r7, #8]
 8007ed4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d00c      	beq.n	8007ef6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d007      	beq.n	8007ef6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007eee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007ef0:	6878      	ldr	r0, [r7, #4]
 8007ef2:	f000 f8dd 	bl	80080b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007ef6:	68bb      	ldr	r3, [r7, #8]
 8007ef8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d00c      	beq.n	8007f1a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d007      	beq.n	8007f1a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007f12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007f14:	6878      	ldr	r0, [r7, #4]
 8007f16:	f000 f8d5 	bl	80080c4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007f1a:	68bb      	ldr	r3, [r7, #8]
 8007f1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d00c      	beq.n	8007f3e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d007      	beq.n	8007f3e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007f36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007f38:	6878      	ldr	r0, [r7, #4]
 8007f3a:	f000 f834 	bl	8007fa6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007f3e:	68bb      	ldr	r3, [r7, #8]
 8007f40:	f003 0320 	and.w	r3, r3, #32
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d00c      	beq.n	8007f62 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	f003 0320 	and.w	r3, r3, #32
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d007      	beq.n	8007f62 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f06f 0220 	mvn.w	r2, #32
 8007f5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007f5c:	6878      	ldr	r0, [r7, #4]
 8007f5e:	f000 f89d 	bl	800809c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007f62:	bf00      	nop
 8007f64:	3710      	adds	r7, #16
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bd80      	pop	{r7, pc}

08007f6a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007f6a:	b480      	push	{r7}
 8007f6c:	b083      	sub	sp, #12
 8007f6e:	af00      	add	r7, sp, #0
 8007f70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007f72:	bf00      	nop
 8007f74:	370c      	adds	r7, #12
 8007f76:	46bd      	mov	sp, r7
 8007f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7c:	4770      	bx	lr

08007f7e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007f7e:	b480      	push	{r7}
 8007f80:	b083      	sub	sp, #12
 8007f82:	af00      	add	r7, sp, #0
 8007f84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007f86:	bf00      	nop
 8007f88:	370c      	adds	r7, #12
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f90:	4770      	bx	lr

08007f92 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007f92:	b480      	push	{r7}
 8007f94:	b083      	sub	sp, #12
 8007f96:	af00      	add	r7, sp, #0
 8007f98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007f9a:	bf00      	nop
 8007f9c:	370c      	adds	r7, #12
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa4:	4770      	bx	lr

08007fa6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007fa6:	b480      	push	{r7}
 8007fa8:	b083      	sub	sp, #12
 8007faa:	af00      	add	r7, sp, #0
 8007fac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007fae:	bf00      	nop
 8007fb0:	370c      	adds	r7, #12
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb8:	4770      	bx	lr
	...

08007fbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007fbc:	b480      	push	{r7}
 8007fbe:	b085      	sub	sp, #20
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
 8007fc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	4a30      	ldr	r2, [pc, #192]	@ (8008090 <TIM_Base_SetConfig+0xd4>)
 8007fd0:	4293      	cmp	r3, r2
 8007fd2:	d003      	beq.n	8007fdc <TIM_Base_SetConfig+0x20>
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007fda:	d108      	bne.n	8007fee <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007fe2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	685b      	ldr	r3, [r3, #4]
 8007fe8:	68fa      	ldr	r2, [r7, #12]
 8007fea:	4313      	orrs	r3, r2
 8007fec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	4a27      	ldr	r2, [pc, #156]	@ (8008090 <TIM_Base_SetConfig+0xd4>)
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	d00b      	beq.n	800800e <TIM_Base_SetConfig+0x52>
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ffc:	d007      	beq.n	800800e <TIM_Base_SetConfig+0x52>
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	4a24      	ldr	r2, [pc, #144]	@ (8008094 <TIM_Base_SetConfig+0xd8>)
 8008002:	4293      	cmp	r3, r2
 8008004:	d003      	beq.n	800800e <TIM_Base_SetConfig+0x52>
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	4a23      	ldr	r2, [pc, #140]	@ (8008098 <TIM_Base_SetConfig+0xdc>)
 800800a:	4293      	cmp	r3, r2
 800800c:	d108      	bne.n	8008020 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008014:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	68db      	ldr	r3, [r3, #12]
 800801a:	68fa      	ldr	r2, [r7, #12]
 800801c:	4313      	orrs	r3, r2
 800801e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	695b      	ldr	r3, [r3, #20]
 800802a:	4313      	orrs	r3, r2
 800802c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	68fa      	ldr	r2, [r7, #12]
 8008032:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	689a      	ldr	r2, [r3, #8]
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	681a      	ldr	r2, [r3, #0]
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	4a12      	ldr	r2, [pc, #72]	@ (8008090 <TIM_Base_SetConfig+0xd4>)
 8008048:	4293      	cmp	r3, r2
 800804a:	d007      	beq.n	800805c <TIM_Base_SetConfig+0xa0>
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	4a11      	ldr	r2, [pc, #68]	@ (8008094 <TIM_Base_SetConfig+0xd8>)
 8008050:	4293      	cmp	r3, r2
 8008052:	d003      	beq.n	800805c <TIM_Base_SetConfig+0xa0>
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	4a10      	ldr	r2, [pc, #64]	@ (8008098 <TIM_Base_SetConfig+0xdc>)
 8008058:	4293      	cmp	r3, r2
 800805a:	d103      	bne.n	8008064 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	691a      	ldr	r2, [r3, #16]
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2201      	movs	r2, #1
 8008068:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	691b      	ldr	r3, [r3, #16]
 800806e:	f003 0301 	and.w	r3, r3, #1
 8008072:	2b01      	cmp	r3, #1
 8008074:	d105      	bne.n	8008082 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	691b      	ldr	r3, [r3, #16]
 800807a:	f023 0201 	bic.w	r2, r3, #1
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	611a      	str	r2, [r3, #16]
  }
}
 8008082:	bf00      	nop
 8008084:	3714      	adds	r7, #20
 8008086:	46bd      	mov	sp, r7
 8008088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808c:	4770      	bx	lr
 800808e:	bf00      	nop
 8008090:	40012c00 	.word	0x40012c00
 8008094:	40014400 	.word	0x40014400
 8008098:	40014800 	.word	0x40014800

0800809c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800809c:	b480      	push	{r7}
 800809e:	b083      	sub	sp, #12
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80080a4:	bf00      	nop
 80080a6:	370c      	adds	r7, #12
 80080a8:	46bd      	mov	sp, r7
 80080aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ae:	4770      	bx	lr

080080b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80080b0:	b480      	push	{r7}
 80080b2:	b083      	sub	sp, #12
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80080b8:	bf00      	nop
 80080ba:	370c      	adds	r7, #12
 80080bc:	46bd      	mov	sp, r7
 80080be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c2:	4770      	bx	lr

080080c4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80080c4:	b480      	push	{r7}
 80080c6:	b083      	sub	sp, #12
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80080cc:	bf00      	nop
 80080ce:	370c      	adds	r7, #12
 80080d0:	46bd      	mov	sp, r7
 80080d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d6:	4770      	bx	lr

080080d8 <LL_RCC_GetUSARTClockSource>:
{
 80080d8:	b480      	push	{r7}
 80080da:	b083      	sub	sp, #12
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 80080e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80080e4:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	4013      	ands	r3, r2
}
 80080ec:	4618      	mov	r0, r3
 80080ee:	370c      	adds	r7, #12
 80080f0:	46bd      	mov	sp, r7
 80080f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f6:	4770      	bx	lr

080080f8 <LL_RCC_GetLPUARTClockSource>:
{
 80080f8:	b480      	push	{r7}
 80080fa:	b083      	sub	sp, #12
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8008100:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008104:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	4013      	ands	r3, r2
}
 800810c:	4618      	mov	r0, r3
 800810e:	370c      	adds	r7, #12
 8008110:	46bd      	mov	sp, r7
 8008112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008116:	4770      	bx	lr

08008118 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b082      	sub	sp, #8
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d101      	bne.n	800812a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008126:	2301      	movs	r3, #1
 8008128:	e042      	b.n	80081b0 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008130:	2b00      	cmp	r3, #0
 8008132:	d106      	bne.n	8008142 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2200      	movs	r2, #0
 8008138:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800813c:	6878      	ldr	r0, [r7, #4]
 800813e:	f7fb f899 	bl	8003274 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	2224      	movs	r2, #36	@ 0x24
 8008146:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	681a      	ldr	r2, [r3, #0]
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f022 0201 	bic.w	r2, r2, #1
 8008158:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800815e:	2b00      	cmp	r3, #0
 8008160:	d002      	beq.n	8008168 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008162:	6878      	ldr	r0, [r7, #4]
 8008164:	f000 fe32 	bl	8008dcc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008168:	6878      	ldr	r0, [r7, #4]
 800816a:	f000 fc07 	bl	800897c <UART_SetConfig>
 800816e:	4603      	mov	r3, r0
 8008170:	2b01      	cmp	r3, #1
 8008172:	d101      	bne.n	8008178 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008174:	2301      	movs	r3, #1
 8008176:	e01b      	b.n	80081b0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	685a      	ldr	r2, [r3, #4]
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008186:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	689a      	ldr	r2, [r3, #8]
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008196:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	681a      	ldr	r2, [r3, #0]
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	f042 0201 	orr.w	r2, r2, #1
 80081a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80081a8:	6878      	ldr	r0, [r7, #4]
 80081aa:	f000 feb1 	bl	8008f10 <UART_CheckIdleState>
 80081ae:	4603      	mov	r3, r0
}
 80081b0:	4618      	mov	r0, r3
 80081b2:	3708      	adds	r7, #8
 80081b4:	46bd      	mov	sp, r7
 80081b6:	bd80      	pop	{r7, pc}

080081b8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b08a      	sub	sp, #40	@ 0x28
 80081bc:	af00      	add	r7, sp, #0
 80081be:	60f8      	str	r0, [r7, #12]
 80081c0:	60b9      	str	r1, [r7, #8]
 80081c2:	4613      	mov	r3, r2
 80081c4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80081cc:	2b20      	cmp	r3, #32
 80081ce:	d167      	bne.n	80082a0 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80081d0:	68bb      	ldr	r3, [r7, #8]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d002      	beq.n	80081dc <HAL_UART_Transmit_DMA+0x24>
 80081d6:	88fb      	ldrh	r3, [r7, #6]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d101      	bne.n	80081e0 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80081dc:	2301      	movs	r3, #1
 80081de:	e060      	b.n	80082a2 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	68ba      	ldr	r2, [r7, #8]
 80081e4:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	88fa      	ldrh	r2, [r7, #6]
 80081ea:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	88fa      	ldrh	r2, [r7, #6]
 80081f2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	2200      	movs	r2, #0
 80081fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	2221      	movs	r2, #33	@ 0x21
 8008202:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800820a:	2b00      	cmp	r3, #0
 800820c:	d028      	beq.n	8008260 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008212:	4a26      	ldr	r2, [pc, #152]	@ (80082ac <HAL_UART_Transmit_DMA+0xf4>)
 8008214:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800821a:	4a25      	ldr	r2, [pc, #148]	@ (80082b0 <HAL_UART_Transmit_DMA+0xf8>)
 800821c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008222:	4a24      	ldr	r2, [pc, #144]	@ (80082b4 <HAL_UART_Transmit_DMA+0xfc>)
 8008224:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800822a:	2200      	movs	r2, #0
 800822c:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008236:	4619      	mov	r1, r3
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	3328      	adds	r3, #40	@ 0x28
 800823e:	461a      	mov	r2, r3
 8008240:	88fb      	ldrh	r3, [r7, #6]
 8008242:	f7fb fc37 	bl	8003ab4 <HAL_DMA_Start_IT>
 8008246:	4603      	mov	r3, r0
 8008248:	2b00      	cmp	r3, #0
 800824a:	d009      	beq.n	8008260 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	2210      	movs	r2, #16
 8008250:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	2220      	movs	r2, #32
 8008258:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800825c:	2301      	movs	r3, #1
 800825e:	e020      	b.n	80082a2 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	2240      	movs	r2, #64	@ 0x40
 8008266:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	3308      	adds	r3, #8
 800826e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008270:	697b      	ldr	r3, [r7, #20]
 8008272:	e853 3f00 	ldrex	r3, [r3]
 8008276:	613b      	str	r3, [r7, #16]
   return(result);
 8008278:	693b      	ldr	r3, [r7, #16]
 800827a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800827e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	3308      	adds	r3, #8
 8008286:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008288:	623a      	str	r2, [r7, #32]
 800828a:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800828c:	69f9      	ldr	r1, [r7, #28]
 800828e:	6a3a      	ldr	r2, [r7, #32]
 8008290:	e841 2300 	strex	r3, r2, [r1]
 8008294:	61bb      	str	r3, [r7, #24]
   return(result);
 8008296:	69bb      	ldr	r3, [r7, #24]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d1e5      	bne.n	8008268 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800829c:	2300      	movs	r3, #0
 800829e:	e000      	b.n	80082a2 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80082a0:	2302      	movs	r3, #2
  }
}
 80082a2:	4618      	mov	r0, r3
 80082a4:	3728      	adds	r7, #40	@ 0x28
 80082a6:	46bd      	mov	sp, r7
 80082a8:	bd80      	pop	{r7, pc}
 80082aa:	bf00      	nop
 80082ac:	0800928d 	.word	0x0800928d
 80082b0:	08009327 	.word	0x08009327
 80082b4:	08009343 	.word	0x08009343

080082b8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b0ba      	sub	sp, #232	@ 0xe8
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	69db      	ldr	r3, [r3, #28]
 80082c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	689b      	ldr	r3, [r3, #8]
 80082da:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80082de:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80082e2:	f640 030f 	movw	r3, #2063	@ 0x80f
 80082e6:	4013      	ands	r3, r2
 80082e8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80082ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d11b      	bne.n	800832c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80082f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80082f8:	f003 0320 	and.w	r3, r3, #32
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d015      	beq.n	800832c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008300:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008304:	f003 0320 	and.w	r3, r3, #32
 8008308:	2b00      	cmp	r3, #0
 800830a:	d105      	bne.n	8008318 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800830c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008310:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008314:	2b00      	cmp	r3, #0
 8008316:	d009      	beq.n	800832c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800831c:	2b00      	cmp	r3, #0
 800831e:	f000 8300 	beq.w	8008922 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008326:	6878      	ldr	r0, [r7, #4]
 8008328:	4798      	blx	r3
      }
      return;
 800832a:	e2fa      	b.n	8008922 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800832c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008330:	2b00      	cmp	r3, #0
 8008332:	f000 8123 	beq.w	800857c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008336:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800833a:	4b8d      	ldr	r3, [pc, #564]	@ (8008570 <HAL_UART_IRQHandler+0x2b8>)
 800833c:	4013      	ands	r3, r2
 800833e:	2b00      	cmp	r3, #0
 8008340:	d106      	bne.n	8008350 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008342:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8008346:	4b8b      	ldr	r3, [pc, #556]	@ (8008574 <HAL_UART_IRQHandler+0x2bc>)
 8008348:	4013      	ands	r3, r2
 800834a:	2b00      	cmp	r3, #0
 800834c:	f000 8116 	beq.w	800857c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008350:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008354:	f003 0301 	and.w	r3, r3, #1
 8008358:	2b00      	cmp	r3, #0
 800835a:	d011      	beq.n	8008380 <HAL_UART_IRQHandler+0xc8>
 800835c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008360:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008364:	2b00      	cmp	r3, #0
 8008366:	d00b      	beq.n	8008380 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	2201      	movs	r2, #1
 800836e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008376:	f043 0201 	orr.w	r2, r3, #1
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008380:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008384:	f003 0302 	and.w	r3, r3, #2
 8008388:	2b00      	cmp	r3, #0
 800838a:	d011      	beq.n	80083b0 <HAL_UART_IRQHandler+0xf8>
 800838c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008390:	f003 0301 	and.w	r3, r3, #1
 8008394:	2b00      	cmp	r3, #0
 8008396:	d00b      	beq.n	80083b0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	2202      	movs	r2, #2
 800839e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80083a6:	f043 0204 	orr.w	r2, r3, #4
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80083b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80083b4:	f003 0304 	and.w	r3, r3, #4
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d011      	beq.n	80083e0 <HAL_UART_IRQHandler+0x128>
 80083bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80083c0:	f003 0301 	and.w	r3, r3, #1
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d00b      	beq.n	80083e0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	2204      	movs	r2, #4
 80083ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80083d6:	f043 0202 	orr.w	r2, r3, #2
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80083e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80083e4:	f003 0308 	and.w	r3, r3, #8
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d017      	beq.n	800841c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80083ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80083f0:	f003 0320 	and.w	r3, r3, #32
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d105      	bne.n	8008404 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80083f8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80083fc:	4b5c      	ldr	r3, [pc, #368]	@ (8008570 <HAL_UART_IRQHandler+0x2b8>)
 80083fe:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008400:	2b00      	cmp	r3, #0
 8008402:	d00b      	beq.n	800841c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	2208      	movs	r2, #8
 800840a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008412:	f043 0208 	orr.w	r2, r3, #8
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800841c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008420:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008424:	2b00      	cmp	r3, #0
 8008426:	d012      	beq.n	800844e <HAL_UART_IRQHandler+0x196>
 8008428:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800842c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008430:	2b00      	cmp	r3, #0
 8008432:	d00c      	beq.n	800844e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800843c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008444:	f043 0220 	orr.w	r2, r3, #32
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008454:	2b00      	cmp	r3, #0
 8008456:	f000 8266 	beq.w	8008926 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800845a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800845e:	f003 0320 	and.w	r3, r3, #32
 8008462:	2b00      	cmp	r3, #0
 8008464:	d013      	beq.n	800848e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008466:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800846a:	f003 0320 	and.w	r3, r3, #32
 800846e:	2b00      	cmp	r3, #0
 8008470:	d105      	bne.n	800847e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008472:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008476:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800847a:	2b00      	cmp	r3, #0
 800847c:	d007      	beq.n	800848e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008482:	2b00      	cmp	r3, #0
 8008484:	d003      	beq.n	800848e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800848a:	6878      	ldr	r0, [r7, #4]
 800848c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008494:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	689b      	ldr	r3, [r3, #8]
 800849e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80084a2:	2b40      	cmp	r3, #64	@ 0x40
 80084a4:	d005      	beq.n	80084b2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80084a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80084aa:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d054      	beq.n	800855c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80084b2:	6878      	ldr	r0, [r7, #4]
 80084b4:	f000 fe84 	bl	80091c0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	689b      	ldr	r3, [r3, #8]
 80084be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80084c2:	2b40      	cmp	r3, #64	@ 0x40
 80084c4:	d146      	bne.n	8008554 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	3308      	adds	r3, #8
 80084cc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80084d4:	e853 3f00 	ldrex	r3, [r3]
 80084d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80084dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80084e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80084e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	3308      	adds	r3, #8
 80084ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80084f2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80084f6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80084fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008502:	e841 2300 	strex	r3, r2, [r1]
 8008506:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800850a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800850e:	2b00      	cmp	r3, #0
 8008510:	d1d9      	bne.n	80084c6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008518:	2b00      	cmp	r3, #0
 800851a:	d017      	beq.n	800854c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008522:	4a15      	ldr	r2, [pc, #84]	@ (8008578 <HAL_UART_IRQHandler+0x2c0>)
 8008524:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800852c:	4618      	mov	r0, r3
 800852e:	f7fb fb9b 	bl	8003c68 <HAL_DMA_Abort_IT>
 8008532:	4603      	mov	r3, r0
 8008534:	2b00      	cmp	r3, #0
 8008536:	d019      	beq.n	800856c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800853e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008540:	687a      	ldr	r2, [r7, #4]
 8008542:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8008546:	4610      	mov	r0, r2
 8008548:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800854a:	e00f      	b.n	800856c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800854c:	6878      	ldr	r0, [r7, #4]
 800854e:	f000 f9ff 	bl	8008950 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008552:	e00b      	b.n	800856c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008554:	6878      	ldr	r0, [r7, #4]
 8008556:	f000 f9fb 	bl	8008950 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800855a:	e007      	b.n	800856c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800855c:	6878      	ldr	r0, [r7, #4]
 800855e:	f000 f9f7 	bl	8008950 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	2200      	movs	r2, #0
 8008566:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800856a:	e1dc      	b.n	8008926 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800856c:	bf00      	nop
    return;
 800856e:	e1da      	b.n	8008926 <HAL_UART_IRQHandler+0x66e>
 8008570:	10000001 	.word	0x10000001
 8008574:	04000120 	.word	0x04000120
 8008578:	080093c3 	.word	0x080093c3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008580:	2b01      	cmp	r3, #1
 8008582:	f040 8170 	bne.w	8008866 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008586:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800858a:	f003 0310 	and.w	r3, r3, #16
 800858e:	2b00      	cmp	r3, #0
 8008590:	f000 8169 	beq.w	8008866 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008594:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008598:	f003 0310 	and.w	r3, r3, #16
 800859c:	2b00      	cmp	r3, #0
 800859e:	f000 8162 	beq.w	8008866 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	2210      	movs	r2, #16
 80085a8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	689b      	ldr	r3, [r3, #8]
 80085b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085b4:	2b40      	cmp	r3, #64	@ 0x40
 80085b6:	f040 80d8 	bne.w	800876a <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	685b      	ldr	r3, [r3, #4]
 80085c4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80085c8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	f000 80af 	beq.w	8008730 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80085d8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80085dc:	429a      	cmp	r2, r3
 80085de:	f080 80a7 	bcs.w	8008730 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80085e8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f003 0320 	and.w	r3, r3, #32
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	f040 8087 	bne.w	800870e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008608:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800860c:	e853 3f00 	ldrex	r3, [r3]
 8008610:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008614:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008618:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800861c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	461a      	mov	r2, r3
 8008626:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800862a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800862e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008632:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008636:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800863a:	e841 2300 	strex	r3, r2, [r1]
 800863e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008642:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008646:	2b00      	cmp	r3, #0
 8008648:	d1da      	bne.n	8008600 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	3308      	adds	r3, #8
 8008650:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008652:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008654:	e853 3f00 	ldrex	r3, [r3]
 8008658:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800865a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800865c:	f023 0301 	bic.w	r3, r3, #1
 8008660:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	3308      	adds	r3, #8
 800866a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800866e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008672:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008674:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008676:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800867a:	e841 2300 	strex	r3, r2, [r1]
 800867e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008680:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008682:	2b00      	cmp	r3, #0
 8008684:	d1e1      	bne.n	800864a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	3308      	adds	r3, #8
 800868c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800868e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008690:	e853 3f00 	ldrex	r3, [r3]
 8008694:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008696:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008698:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800869c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	3308      	adds	r3, #8
 80086a6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80086aa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80086ac:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086ae:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80086b0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80086b2:	e841 2300 	strex	r3, r2, [r1]
 80086b6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80086b8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d1e3      	bne.n	8008686 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	2220      	movs	r2, #32
 80086c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2200      	movs	r2, #0
 80086ca:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80086d4:	e853 3f00 	ldrex	r3, [r3]
 80086d8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80086da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80086dc:	f023 0310 	bic.w	r3, r3, #16
 80086e0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	461a      	mov	r2, r3
 80086ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80086ee:	65bb      	str	r3, [r7, #88]	@ 0x58
 80086f0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086f2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80086f4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80086f6:	e841 2300 	strex	r3, r2, [r1]
 80086fa:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80086fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d1e4      	bne.n	80086cc <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008708:	4618      	mov	r0, r3
 800870a:	f7fb fa4e 	bl	8003baa <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	2202      	movs	r2, #2
 8008712:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008720:	b29b      	uxth	r3, r3
 8008722:	1ad3      	subs	r3, r2, r3
 8008724:	b29b      	uxth	r3, r3
 8008726:	4619      	mov	r1, r3
 8008728:	6878      	ldr	r0, [r7, #4]
 800872a:	f000 f91b 	bl	8008964 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800872e:	e0fc      	b.n	800892a <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008736:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800873a:	429a      	cmp	r2, r3
 800873c:	f040 80f5 	bne.w	800892a <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	f003 0320 	and.w	r3, r3, #32
 800874e:	2b20      	cmp	r3, #32
 8008750:	f040 80eb 	bne.w	800892a <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2202      	movs	r2, #2
 8008758:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008760:	4619      	mov	r1, r3
 8008762:	6878      	ldr	r0, [r7, #4]
 8008764:	f000 f8fe 	bl	8008964 <HAL_UARTEx_RxEventCallback>
      return;
 8008768:	e0df      	b.n	800892a <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008776:	b29b      	uxth	r3, r3
 8008778:	1ad3      	subs	r3, r2, r3
 800877a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008784:	b29b      	uxth	r3, r3
 8008786:	2b00      	cmp	r3, #0
 8008788:	f000 80d1 	beq.w	800892e <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 800878c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008790:	2b00      	cmp	r3, #0
 8008792:	f000 80cc 	beq.w	800892e <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800879c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800879e:	e853 3f00 	ldrex	r3, [r3]
 80087a2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80087a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087a6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80087aa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	461a      	mov	r2, r3
 80087b4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80087b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80087ba:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087bc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80087be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80087c0:	e841 2300 	strex	r3, r2, [r1]
 80087c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80087c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d1e4      	bne.n	8008796 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	3308      	adds	r3, #8
 80087d2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087d6:	e853 3f00 	ldrex	r3, [r3]
 80087da:	623b      	str	r3, [r7, #32]
   return(result);
 80087dc:	6a3b      	ldr	r3, [r7, #32]
 80087de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80087e2:	f023 0301 	bic.w	r3, r3, #1
 80087e6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	3308      	adds	r3, #8
 80087f0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80087f4:	633a      	str	r2, [r7, #48]	@ 0x30
 80087f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087f8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80087fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80087fc:	e841 2300 	strex	r3, r2, [r1]
 8008800:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008802:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008804:	2b00      	cmp	r3, #0
 8008806:	d1e1      	bne.n	80087cc <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2220      	movs	r2, #32
 800880c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2200      	movs	r2, #0
 8008814:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	2200      	movs	r2, #0
 800881a:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008822:	693b      	ldr	r3, [r7, #16]
 8008824:	e853 3f00 	ldrex	r3, [r3]
 8008828:	60fb      	str	r3, [r7, #12]
   return(result);
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	f023 0310 	bic.w	r3, r3, #16
 8008830:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	461a      	mov	r2, r3
 800883a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800883e:	61fb      	str	r3, [r7, #28]
 8008840:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008842:	69b9      	ldr	r1, [r7, #24]
 8008844:	69fa      	ldr	r2, [r7, #28]
 8008846:	e841 2300 	strex	r3, r2, [r1]
 800884a:	617b      	str	r3, [r7, #20]
   return(result);
 800884c:	697b      	ldr	r3, [r7, #20]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d1e4      	bne.n	800881c <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	2202      	movs	r2, #2
 8008856:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008858:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800885c:	4619      	mov	r1, r3
 800885e:	6878      	ldr	r0, [r7, #4]
 8008860:	f000 f880 	bl	8008964 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008864:	e063      	b.n	800892e <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008866:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800886a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800886e:	2b00      	cmp	r3, #0
 8008870:	d00e      	beq.n	8008890 <HAL_UART_IRQHandler+0x5d8>
 8008872:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008876:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800887a:	2b00      	cmp	r3, #0
 800887c:	d008      	beq.n	8008890 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008886:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008888:	6878      	ldr	r0, [r7, #4]
 800888a:	f000 fddb 	bl	8009444 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800888e:	e051      	b.n	8008934 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008890:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008894:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008898:	2b00      	cmp	r3, #0
 800889a:	d014      	beq.n	80088c6 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800889c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80088a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d105      	bne.n	80088b4 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80088a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80088ac:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d008      	beq.n	80088c6 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d03a      	beq.n	8008932 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80088c0:	6878      	ldr	r0, [r7, #4]
 80088c2:	4798      	blx	r3
    }
    return;
 80088c4:	e035      	b.n	8008932 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80088c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80088ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d009      	beq.n	80088e6 <HAL_UART_IRQHandler+0x62e>
 80088d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80088d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d003      	beq.n	80088e6 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 80088de:	6878      	ldr	r0, [r7, #4]
 80088e0:	f000 fd85 	bl	80093ee <UART_EndTransmit_IT>
    return;
 80088e4:	e026      	b.n	8008934 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80088e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80088ea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d009      	beq.n	8008906 <HAL_UART_IRQHandler+0x64e>
 80088f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80088f6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d003      	beq.n	8008906 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80088fe:	6878      	ldr	r0, [r7, #4]
 8008900:	f000 fdb4 	bl	800946c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008904:	e016      	b.n	8008934 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008906:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800890a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800890e:	2b00      	cmp	r3, #0
 8008910:	d010      	beq.n	8008934 <HAL_UART_IRQHandler+0x67c>
 8008912:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008916:	2b00      	cmp	r3, #0
 8008918:	da0c      	bge.n	8008934 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800891a:	6878      	ldr	r0, [r7, #4]
 800891c:	f000 fd9c 	bl	8009458 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008920:	e008      	b.n	8008934 <HAL_UART_IRQHandler+0x67c>
      return;
 8008922:	bf00      	nop
 8008924:	e006      	b.n	8008934 <HAL_UART_IRQHandler+0x67c>
    return;
 8008926:	bf00      	nop
 8008928:	e004      	b.n	8008934 <HAL_UART_IRQHandler+0x67c>
      return;
 800892a:	bf00      	nop
 800892c:	e002      	b.n	8008934 <HAL_UART_IRQHandler+0x67c>
      return;
 800892e:	bf00      	nop
 8008930:	e000      	b.n	8008934 <HAL_UART_IRQHandler+0x67c>
    return;
 8008932:	bf00      	nop
  }
}
 8008934:	37e8      	adds	r7, #232	@ 0xe8
 8008936:	46bd      	mov	sp, r7
 8008938:	bd80      	pop	{r7, pc}
 800893a:	bf00      	nop

0800893c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800893c:	b480      	push	{r7}
 800893e:	b083      	sub	sp, #12
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8008944:	bf00      	nop
 8008946:	370c      	adds	r7, #12
 8008948:	46bd      	mov	sp, r7
 800894a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894e:	4770      	bx	lr

08008950 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008950:	b480      	push	{r7}
 8008952:	b083      	sub	sp, #12
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008958:	bf00      	nop
 800895a:	370c      	adds	r7, #12
 800895c:	46bd      	mov	sp, r7
 800895e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008962:	4770      	bx	lr

08008964 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008964:	b480      	push	{r7}
 8008966:	b083      	sub	sp, #12
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
 800896c:	460b      	mov	r3, r1
 800896e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008970:	bf00      	nop
 8008972:	370c      	adds	r7, #12
 8008974:	46bd      	mov	sp, r7
 8008976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897a:	4770      	bx	lr

0800897c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800897c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008980:	b08c      	sub	sp, #48	@ 0x30
 8008982:	af00      	add	r7, sp, #0
 8008984:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008986:	2300      	movs	r3, #0
 8008988:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800898c:	697b      	ldr	r3, [r7, #20]
 800898e:	689a      	ldr	r2, [r3, #8]
 8008990:	697b      	ldr	r3, [r7, #20]
 8008992:	691b      	ldr	r3, [r3, #16]
 8008994:	431a      	orrs	r2, r3
 8008996:	697b      	ldr	r3, [r7, #20]
 8008998:	695b      	ldr	r3, [r3, #20]
 800899a:	431a      	orrs	r2, r3
 800899c:	697b      	ldr	r3, [r7, #20]
 800899e:	69db      	ldr	r3, [r3, #28]
 80089a0:	4313      	orrs	r3, r2
 80089a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80089a4:	697b      	ldr	r3, [r7, #20]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	681a      	ldr	r2, [r3, #0]
 80089aa:	4baf      	ldr	r3, [pc, #700]	@ (8008c68 <UART_SetConfig+0x2ec>)
 80089ac:	4013      	ands	r3, r2
 80089ae:	697a      	ldr	r2, [r7, #20]
 80089b0:	6812      	ldr	r2, [r2, #0]
 80089b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80089b4:	430b      	orrs	r3, r1
 80089b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80089b8:	697b      	ldr	r3, [r7, #20]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	685b      	ldr	r3, [r3, #4]
 80089be:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80089c2:	697b      	ldr	r3, [r7, #20]
 80089c4:	68da      	ldr	r2, [r3, #12]
 80089c6:	697b      	ldr	r3, [r7, #20]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	430a      	orrs	r2, r1
 80089cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80089ce:	697b      	ldr	r3, [r7, #20]
 80089d0:	699b      	ldr	r3, [r3, #24]
 80089d2:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80089d4:	697b      	ldr	r3, [r7, #20]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	4aa4      	ldr	r2, [pc, #656]	@ (8008c6c <UART_SetConfig+0x2f0>)
 80089da:	4293      	cmp	r3, r2
 80089dc:	d004      	beq.n	80089e8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80089de:	697b      	ldr	r3, [r7, #20]
 80089e0:	6a1b      	ldr	r3, [r3, #32]
 80089e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80089e4:	4313      	orrs	r3, r2
 80089e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80089e8:	697b      	ldr	r3, [r7, #20]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	689b      	ldr	r3, [r3, #8]
 80089ee:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80089f2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80089f6:	697a      	ldr	r2, [r7, #20]
 80089f8:	6812      	ldr	r2, [r2, #0]
 80089fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80089fc:	430b      	orrs	r3, r1
 80089fe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008a00:	697b      	ldr	r3, [r7, #20]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a06:	f023 010f 	bic.w	r1, r3, #15
 8008a0a:	697b      	ldr	r3, [r7, #20]
 8008a0c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008a0e:	697b      	ldr	r3, [r7, #20]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	430a      	orrs	r2, r1
 8008a14:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008a16:	697b      	ldr	r3, [r7, #20]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	4a95      	ldr	r2, [pc, #596]	@ (8008c70 <UART_SetConfig+0x2f4>)
 8008a1c:	4293      	cmp	r3, r2
 8008a1e:	d125      	bne.n	8008a6c <UART_SetConfig+0xf0>
 8008a20:	2003      	movs	r0, #3
 8008a22:	f7ff fb59 	bl	80080d8 <LL_RCC_GetUSARTClockSource>
 8008a26:	4603      	mov	r3, r0
 8008a28:	2b03      	cmp	r3, #3
 8008a2a:	d81b      	bhi.n	8008a64 <UART_SetConfig+0xe8>
 8008a2c:	a201      	add	r2, pc, #4	@ (adr r2, 8008a34 <UART_SetConfig+0xb8>)
 8008a2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a32:	bf00      	nop
 8008a34:	08008a45 	.word	0x08008a45
 8008a38:	08008a55 	.word	0x08008a55
 8008a3c:	08008a4d 	.word	0x08008a4d
 8008a40:	08008a5d 	.word	0x08008a5d
 8008a44:	2301      	movs	r3, #1
 8008a46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008a4a:	e042      	b.n	8008ad2 <UART_SetConfig+0x156>
 8008a4c:	2302      	movs	r3, #2
 8008a4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008a52:	e03e      	b.n	8008ad2 <UART_SetConfig+0x156>
 8008a54:	2304      	movs	r3, #4
 8008a56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008a5a:	e03a      	b.n	8008ad2 <UART_SetConfig+0x156>
 8008a5c:	2308      	movs	r3, #8
 8008a5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008a62:	e036      	b.n	8008ad2 <UART_SetConfig+0x156>
 8008a64:	2310      	movs	r3, #16
 8008a66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008a6a:	e032      	b.n	8008ad2 <UART_SetConfig+0x156>
 8008a6c:	697b      	ldr	r3, [r7, #20]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	4a7e      	ldr	r2, [pc, #504]	@ (8008c6c <UART_SetConfig+0x2f0>)
 8008a72:	4293      	cmp	r3, r2
 8008a74:	d12a      	bne.n	8008acc <UART_SetConfig+0x150>
 8008a76:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8008a7a:	f7ff fb3d 	bl	80080f8 <LL_RCC_GetLPUARTClockSource>
 8008a7e:	4603      	mov	r3, r0
 8008a80:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008a84:	d01a      	beq.n	8008abc <UART_SetConfig+0x140>
 8008a86:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008a8a:	d81b      	bhi.n	8008ac4 <UART_SetConfig+0x148>
 8008a8c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008a90:	d00c      	beq.n	8008aac <UART_SetConfig+0x130>
 8008a92:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008a96:	d815      	bhi.n	8008ac4 <UART_SetConfig+0x148>
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d003      	beq.n	8008aa4 <UART_SetConfig+0x128>
 8008a9c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008aa0:	d008      	beq.n	8008ab4 <UART_SetConfig+0x138>
 8008aa2:	e00f      	b.n	8008ac4 <UART_SetConfig+0x148>
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008aaa:	e012      	b.n	8008ad2 <UART_SetConfig+0x156>
 8008aac:	2302      	movs	r3, #2
 8008aae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008ab2:	e00e      	b.n	8008ad2 <UART_SetConfig+0x156>
 8008ab4:	2304      	movs	r3, #4
 8008ab6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008aba:	e00a      	b.n	8008ad2 <UART_SetConfig+0x156>
 8008abc:	2308      	movs	r3, #8
 8008abe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008ac2:	e006      	b.n	8008ad2 <UART_SetConfig+0x156>
 8008ac4:	2310      	movs	r3, #16
 8008ac6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008aca:	e002      	b.n	8008ad2 <UART_SetConfig+0x156>
 8008acc:	2310      	movs	r3, #16
 8008ace:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008ad2:	697b      	ldr	r3, [r7, #20]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	4a65      	ldr	r2, [pc, #404]	@ (8008c6c <UART_SetConfig+0x2f0>)
 8008ad8:	4293      	cmp	r3, r2
 8008ada:	f040 8097 	bne.w	8008c0c <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008ade:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008ae2:	2b08      	cmp	r3, #8
 8008ae4:	d823      	bhi.n	8008b2e <UART_SetConfig+0x1b2>
 8008ae6:	a201      	add	r2, pc, #4	@ (adr r2, 8008aec <UART_SetConfig+0x170>)
 8008ae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008aec:	08008b11 	.word	0x08008b11
 8008af0:	08008b2f 	.word	0x08008b2f
 8008af4:	08008b19 	.word	0x08008b19
 8008af8:	08008b2f 	.word	0x08008b2f
 8008afc:	08008b1f 	.word	0x08008b1f
 8008b00:	08008b2f 	.word	0x08008b2f
 8008b04:	08008b2f 	.word	0x08008b2f
 8008b08:	08008b2f 	.word	0x08008b2f
 8008b0c:	08008b27 	.word	0x08008b27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008b10:	f7fd fb02 	bl	8006118 <HAL_RCC_GetPCLK1Freq>
 8008b14:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008b16:	e010      	b.n	8008b3a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008b18:	4b56      	ldr	r3, [pc, #344]	@ (8008c74 <UART_SetConfig+0x2f8>)
 8008b1a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008b1c:	e00d      	b.n	8008b3a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008b1e:	f7fd fa7b 	bl	8006018 <HAL_RCC_GetSysClockFreq>
 8008b22:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008b24:	e009      	b.n	8008b3a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008b26:	f248 0306 	movw	r3, #32774	@ 0x8006
 8008b2a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008b2c:	e005      	b.n	8008b3a <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8008b2e:	2300      	movs	r3, #0
 8008b30:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008b32:	2301      	movs	r3, #1
 8008b34:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008b38:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	f000 812b 	beq.w	8008d98 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008b42:	697b      	ldr	r3, [r7, #20]
 8008b44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b46:	4a4c      	ldr	r2, [pc, #304]	@ (8008c78 <UART_SetConfig+0x2fc>)
 8008b48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008b4c:	461a      	mov	r2, r3
 8008b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b50:	fbb3 f3f2 	udiv	r3, r3, r2
 8008b54:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008b56:	697b      	ldr	r3, [r7, #20]
 8008b58:	685a      	ldr	r2, [r3, #4]
 8008b5a:	4613      	mov	r3, r2
 8008b5c:	005b      	lsls	r3, r3, #1
 8008b5e:	4413      	add	r3, r2
 8008b60:	69ba      	ldr	r2, [r7, #24]
 8008b62:	429a      	cmp	r2, r3
 8008b64:	d305      	bcc.n	8008b72 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008b66:	697b      	ldr	r3, [r7, #20]
 8008b68:	685b      	ldr	r3, [r3, #4]
 8008b6a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008b6c:	69ba      	ldr	r2, [r7, #24]
 8008b6e:	429a      	cmp	r2, r3
 8008b70:	d903      	bls.n	8008b7a <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8008b72:	2301      	movs	r3, #1
 8008b74:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008b78:	e10e      	b.n	8008d98 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	60bb      	str	r3, [r7, #8]
 8008b80:	60fa      	str	r2, [r7, #12]
 8008b82:	697b      	ldr	r3, [r7, #20]
 8008b84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b86:	4a3c      	ldr	r2, [pc, #240]	@ (8008c78 <UART_SetConfig+0x2fc>)
 8008b88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008b8c:	b29b      	uxth	r3, r3
 8008b8e:	2200      	movs	r2, #0
 8008b90:	603b      	str	r3, [r7, #0]
 8008b92:	607a      	str	r2, [r7, #4]
 8008b94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b98:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008b9c:	f7f7 fe2e 	bl	80007fc <__aeabi_uldivmod>
 8008ba0:	4602      	mov	r2, r0
 8008ba2:	460b      	mov	r3, r1
 8008ba4:	4610      	mov	r0, r2
 8008ba6:	4619      	mov	r1, r3
 8008ba8:	f04f 0200 	mov.w	r2, #0
 8008bac:	f04f 0300 	mov.w	r3, #0
 8008bb0:	020b      	lsls	r3, r1, #8
 8008bb2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008bb6:	0202      	lsls	r2, r0, #8
 8008bb8:	6979      	ldr	r1, [r7, #20]
 8008bba:	6849      	ldr	r1, [r1, #4]
 8008bbc:	0849      	lsrs	r1, r1, #1
 8008bbe:	2000      	movs	r0, #0
 8008bc0:	460c      	mov	r4, r1
 8008bc2:	4605      	mov	r5, r0
 8008bc4:	eb12 0804 	adds.w	r8, r2, r4
 8008bc8:	eb43 0905 	adc.w	r9, r3, r5
 8008bcc:	697b      	ldr	r3, [r7, #20]
 8008bce:	685b      	ldr	r3, [r3, #4]
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	469a      	mov	sl, r3
 8008bd4:	4693      	mov	fp, r2
 8008bd6:	4652      	mov	r2, sl
 8008bd8:	465b      	mov	r3, fp
 8008bda:	4640      	mov	r0, r8
 8008bdc:	4649      	mov	r1, r9
 8008bde:	f7f7 fe0d 	bl	80007fc <__aeabi_uldivmod>
 8008be2:	4602      	mov	r2, r0
 8008be4:	460b      	mov	r3, r1
 8008be6:	4613      	mov	r3, r2
 8008be8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008bea:	6a3b      	ldr	r3, [r7, #32]
 8008bec:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008bf0:	d308      	bcc.n	8008c04 <UART_SetConfig+0x288>
 8008bf2:	6a3b      	ldr	r3, [r7, #32]
 8008bf4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008bf8:	d204      	bcs.n	8008c04 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8008bfa:	697b      	ldr	r3, [r7, #20]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	6a3a      	ldr	r2, [r7, #32]
 8008c00:	60da      	str	r2, [r3, #12]
 8008c02:	e0c9      	b.n	8008d98 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8008c04:	2301      	movs	r3, #1
 8008c06:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008c0a:	e0c5      	b.n	8008d98 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008c0c:	697b      	ldr	r3, [r7, #20]
 8008c0e:	69db      	ldr	r3, [r3, #28]
 8008c10:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008c14:	d16d      	bne.n	8008cf2 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8008c16:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008c1a:	3b01      	subs	r3, #1
 8008c1c:	2b07      	cmp	r3, #7
 8008c1e:	d82d      	bhi.n	8008c7c <UART_SetConfig+0x300>
 8008c20:	a201      	add	r2, pc, #4	@ (adr r2, 8008c28 <UART_SetConfig+0x2ac>)
 8008c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c26:	bf00      	nop
 8008c28:	08008c49 	.word	0x08008c49
 8008c2c:	08008c51 	.word	0x08008c51
 8008c30:	08008c7d 	.word	0x08008c7d
 8008c34:	08008c57 	.word	0x08008c57
 8008c38:	08008c7d 	.word	0x08008c7d
 8008c3c:	08008c7d 	.word	0x08008c7d
 8008c40:	08008c7d 	.word	0x08008c7d
 8008c44:	08008c5f 	.word	0x08008c5f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008c48:	f7fd fa7c 	bl	8006144 <HAL_RCC_GetPCLK2Freq>
 8008c4c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008c4e:	e01b      	b.n	8008c88 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008c50:	4b08      	ldr	r3, [pc, #32]	@ (8008c74 <UART_SetConfig+0x2f8>)
 8008c52:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008c54:	e018      	b.n	8008c88 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008c56:	f7fd f9df 	bl	8006018 <HAL_RCC_GetSysClockFreq>
 8008c5a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008c5c:	e014      	b.n	8008c88 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008c5e:	f248 0306 	movw	r3, #32774	@ 0x8006
 8008c62:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008c64:	e010      	b.n	8008c88 <UART_SetConfig+0x30c>
 8008c66:	bf00      	nop
 8008c68:	cfff69f3 	.word	0xcfff69f3
 8008c6c:	40008000 	.word	0x40008000
 8008c70:	40013800 	.word	0x40013800
 8008c74:	00f42400 	.word	0x00f42400
 8008c78:	0801110c 	.word	0x0801110c
      default:
        pclk = 0U;
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008c80:	2301      	movs	r3, #1
 8008c82:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008c86:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	f000 8084 	beq.w	8008d98 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008c90:	697b      	ldr	r3, [r7, #20]
 8008c92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c94:	4a4b      	ldr	r2, [pc, #300]	@ (8008dc4 <UART_SetConfig+0x448>)
 8008c96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008c9a:	461a      	mov	r2, r3
 8008c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c9e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008ca2:	005a      	lsls	r2, r3, #1
 8008ca4:	697b      	ldr	r3, [r7, #20]
 8008ca6:	685b      	ldr	r3, [r3, #4]
 8008ca8:	085b      	lsrs	r3, r3, #1
 8008caa:	441a      	add	r2, r3
 8008cac:	697b      	ldr	r3, [r7, #20]
 8008cae:	685b      	ldr	r3, [r3, #4]
 8008cb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cb4:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008cb6:	6a3b      	ldr	r3, [r7, #32]
 8008cb8:	2b0f      	cmp	r3, #15
 8008cba:	d916      	bls.n	8008cea <UART_SetConfig+0x36e>
 8008cbc:	6a3b      	ldr	r3, [r7, #32]
 8008cbe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008cc2:	d212      	bcs.n	8008cea <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008cc4:	6a3b      	ldr	r3, [r7, #32]
 8008cc6:	b29b      	uxth	r3, r3
 8008cc8:	f023 030f 	bic.w	r3, r3, #15
 8008ccc:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008cce:	6a3b      	ldr	r3, [r7, #32]
 8008cd0:	085b      	lsrs	r3, r3, #1
 8008cd2:	b29b      	uxth	r3, r3
 8008cd4:	f003 0307 	and.w	r3, r3, #7
 8008cd8:	b29a      	uxth	r2, r3
 8008cda:	8bfb      	ldrh	r3, [r7, #30]
 8008cdc:	4313      	orrs	r3, r2
 8008cde:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008ce0:	697b      	ldr	r3, [r7, #20]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	8bfa      	ldrh	r2, [r7, #30]
 8008ce6:	60da      	str	r2, [r3, #12]
 8008ce8:	e056      	b.n	8008d98 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8008cea:	2301      	movs	r3, #1
 8008cec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008cf0:	e052      	b.n	8008d98 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008cf2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008cf6:	3b01      	subs	r3, #1
 8008cf8:	2b07      	cmp	r3, #7
 8008cfa:	d822      	bhi.n	8008d42 <UART_SetConfig+0x3c6>
 8008cfc:	a201      	add	r2, pc, #4	@ (adr r2, 8008d04 <UART_SetConfig+0x388>)
 8008cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d02:	bf00      	nop
 8008d04:	08008d25 	.word	0x08008d25
 8008d08:	08008d2d 	.word	0x08008d2d
 8008d0c:	08008d43 	.word	0x08008d43
 8008d10:	08008d33 	.word	0x08008d33
 8008d14:	08008d43 	.word	0x08008d43
 8008d18:	08008d43 	.word	0x08008d43
 8008d1c:	08008d43 	.word	0x08008d43
 8008d20:	08008d3b 	.word	0x08008d3b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008d24:	f7fd fa0e 	bl	8006144 <HAL_RCC_GetPCLK2Freq>
 8008d28:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008d2a:	e010      	b.n	8008d4e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008d2c:	4b26      	ldr	r3, [pc, #152]	@ (8008dc8 <UART_SetConfig+0x44c>)
 8008d2e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008d30:	e00d      	b.n	8008d4e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008d32:	f7fd f971 	bl	8006018 <HAL_RCC_GetSysClockFreq>
 8008d36:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008d38:	e009      	b.n	8008d4e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008d3a:	f248 0306 	movw	r3, #32774	@ 0x8006
 8008d3e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008d40:	e005      	b.n	8008d4e <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8008d42:	2300      	movs	r3, #0
 8008d44:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008d46:	2301      	movs	r3, #1
 8008d48:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008d4c:	bf00      	nop
    }

    if (pclk != 0U)
 8008d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d021      	beq.n	8008d98 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008d54:	697b      	ldr	r3, [r7, #20]
 8008d56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d58:	4a1a      	ldr	r2, [pc, #104]	@ (8008dc4 <UART_SetConfig+0x448>)
 8008d5a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008d5e:	461a      	mov	r2, r3
 8008d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d62:	fbb3 f2f2 	udiv	r2, r3, r2
 8008d66:	697b      	ldr	r3, [r7, #20]
 8008d68:	685b      	ldr	r3, [r3, #4]
 8008d6a:	085b      	lsrs	r3, r3, #1
 8008d6c:	441a      	add	r2, r3
 8008d6e:	697b      	ldr	r3, [r7, #20]
 8008d70:	685b      	ldr	r3, [r3, #4]
 8008d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d76:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008d78:	6a3b      	ldr	r3, [r7, #32]
 8008d7a:	2b0f      	cmp	r3, #15
 8008d7c:	d909      	bls.n	8008d92 <UART_SetConfig+0x416>
 8008d7e:	6a3b      	ldr	r3, [r7, #32]
 8008d80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008d84:	d205      	bcs.n	8008d92 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008d86:	6a3b      	ldr	r3, [r7, #32]
 8008d88:	b29a      	uxth	r2, r3
 8008d8a:	697b      	ldr	r3, [r7, #20]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	60da      	str	r2, [r3, #12]
 8008d90:	e002      	b.n	8008d98 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8008d92:	2301      	movs	r3, #1
 8008d94:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008d98:	697b      	ldr	r3, [r7, #20]
 8008d9a:	2201      	movs	r2, #1
 8008d9c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008da0:	697b      	ldr	r3, [r7, #20]
 8008da2:	2201      	movs	r2, #1
 8008da4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008da8:	697b      	ldr	r3, [r7, #20]
 8008daa:	2200      	movs	r2, #0
 8008dac:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008dae:	697b      	ldr	r3, [r7, #20]
 8008db0:	2200      	movs	r2, #0
 8008db2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008db4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8008db8:	4618      	mov	r0, r3
 8008dba:	3730      	adds	r7, #48	@ 0x30
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008dc2:	bf00      	nop
 8008dc4:	0801110c 	.word	0x0801110c
 8008dc8:	00f42400 	.word	0x00f42400

08008dcc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008dcc:	b480      	push	{r7}
 8008dce:	b083      	sub	sp, #12
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008dd8:	f003 0308 	and.w	r3, r3, #8
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d00a      	beq.n	8008df6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	685b      	ldr	r3, [r3, #4]
 8008de6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	430a      	orrs	r2, r1
 8008df4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008dfa:	f003 0301 	and.w	r3, r3, #1
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d00a      	beq.n	8008e18 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	685b      	ldr	r3, [r3, #4]
 8008e08:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	430a      	orrs	r2, r1
 8008e16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e1c:	f003 0302 	and.w	r3, r3, #2
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d00a      	beq.n	8008e3a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	685b      	ldr	r3, [r3, #4]
 8008e2a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	430a      	orrs	r2, r1
 8008e38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e3e:	f003 0304 	and.w	r3, r3, #4
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d00a      	beq.n	8008e5c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	685b      	ldr	r3, [r3, #4]
 8008e4c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	430a      	orrs	r2, r1
 8008e5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e60:	f003 0310 	and.w	r3, r3, #16
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d00a      	beq.n	8008e7e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	689b      	ldr	r3, [r3, #8]
 8008e6e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	430a      	orrs	r2, r1
 8008e7c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e82:	f003 0320 	and.w	r3, r3, #32
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d00a      	beq.n	8008ea0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	689b      	ldr	r3, [r3, #8]
 8008e90:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	430a      	orrs	r2, r1
 8008e9e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ea4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d01a      	beq.n	8008ee2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	685b      	ldr	r3, [r3, #4]
 8008eb2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	430a      	orrs	r2, r1
 8008ec0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ec6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008eca:	d10a      	bne.n	8008ee2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	685b      	ldr	r3, [r3, #4]
 8008ed2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	430a      	orrs	r2, r1
 8008ee0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ee6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d00a      	beq.n	8008f04 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	685b      	ldr	r3, [r3, #4]
 8008ef4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	430a      	orrs	r2, r1
 8008f02:	605a      	str	r2, [r3, #4]
  }
}
 8008f04:	bf00      	nop
 8008f06:	370c      	adds	r7, #12
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0e:	4770      	bx	lr

08008f10 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b098      	sub	sp, #96	@ 0x60
 8008f14:	af02      	add	r7, sp, #8
 8008f16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008f20:	f7fa fb62 	bl	80035e8 <HAL_GetTick>
 8008f24:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	f003 0308 	and.w	r3, r3, #8
 8008f30:	2b08      	cmp	r3, #8
 8008f32:	d12f      	bne.n	8008f94 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008f34:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008f38:	9300      	str	r3, [sp, #0]
 8008f3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008f42:	6878      	ldr	r0, [r7, #4]
 8008f44:	f000 f88e 	bl	8009064 <UART_WaitOnFlagUntilTimeout>
 8008f48:	4603      	mov	r3, r0
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d022      	beq.n	8008f94 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f56:	e853 3f00 	ldrex	r3, [r3]
 8008f5a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008f5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f5e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008f62:	653b      	str	r3, [r7, #80]	@ 0x50
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	461a      	mov	r2, r3
 8008f6a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008f6c:	647b      	str	r3, [r7, #68]	@ 0x44
 8008f6e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f70:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008f72:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008f74:	e841 2300 	strex	r3, r2, [r1]
 8008f78:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008f7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d1e6      	bne.n	8008f4e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	2220      	movs	r2, #32
 8008f84:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008f90:	2303      	movs	r3, #3
 8008f92:	e063      	b.n	800905c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	f003 0304 	and.w	r3, r3, #4
 8008f9e:	2b04      	cmp	r3, #4
 8008fa0:	d149      	bne.n	8009036 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008fa2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008fa6:	9300      	str	r3, [sp, #0]
 8008fa8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008faa:	2200      	movs	r2, #0
 8008fac:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008fb0:	6878      	ldr	r0, [r7, #4]
 8008fb2:	f000 f857 	bl	8009064 <UART_WaitOnFlagUntilTimeout>
 8008fb6:	4603      	mov	r3, r0
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d03c      	beq.n	8009036 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fc4:	e853 3f00 	ldrex	r3, [r3]
 8008fc8:	623b      	str	r3, [r7, #32]
   return(result);
 8008fca:	6a3b      	ldr	r3, [r7, #32]
 8008fcc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008fd0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	461a      	mov	r2, r3
 8008fd8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008fda:	633b      	str	r3, [r7, #48]	@ 0x30
 8008fdc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fde:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008fe0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008fe2:	e841 2300 	strex	r3, r2, [r1]
 8008fe6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008fe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d1e6      	bne.n	8008fbc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	3308      	adds	r3, #8
 8008ff4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ff6:	693b      	ldr	r3, [r7, #16]
 8008ff8:	e853 3f00 	ldrex	r3, [r3]
 8008ffc:	60fb      	str	r3, [r7, #12]
   return(result);
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	f023 0301 	bic.w	r3, r3, #1
 8009004:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	3308      	adds	r3, #8
 800900c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800900e:	61fa      	str	r2, [r7, #28]
 8009010:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009012:	69b9      	ldr	r1, [r7, #24]
 8009014:	69fa      	ldr	r2, [r7, #28]
 8009016:	e841 2300 	strex	r3, r2, [r1]
 800901a:	617b      	str	r3, [r7, #20]
   return(result);
 800901c:	697b      	ldr	r3, [r7, #20]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d1e5      	bne.n	8008fee <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	2220      	movs	r2, #32
 8009026:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	2200      	movs	r2, #0
 800902e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009032:	2303      	movs	r3, #3
 8009034:	e012      	b.n	800905c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	2220      	movs	r2, #32
 800903a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	2220      	movs	r2, #32
 8009042:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	2200      	movs	r2, #0
 800904a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	2200      	movs	r2, #0
 8009050:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	2200      	movs	r2, #0
 8009056:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800905a:	2300      	movs	r3, #0
}
 800905c:	4618      	mov	r0, r3
 800905e:	3758      	adds	r7, #88	@ 0x58
 8009060:	46bd      	mov	sp, r7
 8009062:	bd80      	pop	{r7, pc}

08009064 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009064:	b580      	push	{r7, lr}
 8009066:	b084      	sub	sp, #16
 8009068:	af00      	add	r7, sp, #0
 800906a:	60f8      	str	r0, [r7, #12]
 800906c:	60b9      	str	r1, [r7, #8]
 800906e:	603b      	str	r3, [r7, #0]
 8009070:	4613      	mov	r3, r2
 8009072:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009074:	e04f      	b.n	8009116 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009076:	69bb      	ldr	r3, [r7, #24]
 8009078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800907c:	d04b      	beq.n	8009116 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800907e:	f7fa fab3 	bl	80035e8 <HAL_GetTick>
 8009082:	4602      	mov	r2, r0
 8009084:	683b      	ldr	r3, [r7, #0]
 8009086:	1ad3      	subs	r3, r2, r3
 8009088:	69ba      	ldr	r2, [r7, #24]
 800908a:	429a      	cmp	r2, r3
 800908c:	d302      	bcc.n	8009094 <UART_WaitOnFlagUntilTimeout+0x30>
 800908e:	69bb      	ldr	r3, [r7, #24]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d101      	bne.n	8009098 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009094:	2303      	movs	r3, #3
 8009096:	e04e      	b.n	8009136 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	f003 0304 	and.w	r3, r3, #4
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d037      	beq.n	8009116 <UART_WaitOnFlagUntilTimeout+0xb2>
 80090a6:	68bb      	ldr	r3, [r7, #8]
 80090a8:	2b80      	cmp	r3, #128	@ 0x80
 80090aa:	d034      	beq.n	8009116 <UART_WaitOnFlagUntilTimeout+0xb2>
 80090ac:	68bb      	ldr	r3, [r7, #8]
 80090ae:	2b40      	cmp	r3, #64	@ 0x40
 80090b0:	d031      	beq.n	8009116 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	69db      	ldr	r3, [r3, #28]
 80090b8:	f003 0308 	and.w	r3, r3, #8
 80090bc:	2b08      	cmp	r3, #8
 80090be:	d110      	bne.n	80090e2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	2208      	movs	r2, #8
 80090c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80090c8:	68f8      	ldr	r0, [r7, #12]
 80090ca:	f000 f879 	bl	80091c0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	2208      	movs	r2, #8
 80090d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	2200      	movs	r2, #0
 80090da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80090de:	2301      	movs	r3, #1
 80090e0:	e029      	b.n	8009136 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	69db      	ldr	r3, [r3, #28]
 80090e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80090ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80090f0:	d111      	bne.n	8009116 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80090fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80090fc:	68f8      	ldr	r0, [r7, #12]
 80090fe:	f000 f85f 	bl	80091c0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	2220      	movs	r2, #32
 8009106:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	2200      	movs	r2, #0
 800910e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009112:	2303      	movs	r3, #3
 8009114:	e00f      	b.n	8009136 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	69da      	ldr	r2, [r3, #28]
 800911c:	68bb      	ldr	r3, [r7, #8]
 800911e:	4013      	ands	r3, r2
 8009120:	68ba      	ldr	r2, [r7, #8]
 8009122:	429a      	cmp	r2, r3
 8009124:	bf0c      	ite	eq
 8009126:	2301      	moveq	r3, #1
 8009128:	2300      	movne	r3, #0
 800912a:	b2db      	uxtb	r3, r3
 800912c:	461a      	mov	r2, r3
 800912e:	79fb      	ldrb	r3, [r7, #7]
 8009130:	429a      	cmp	r2, r3
 8009132:	d0a0      	beq.n	8009076 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009134:	2300      	movs	r3, #0
}
 8009136:	4618      	mov	r0, r3
 8009138:	3710      	adds	r7, #16
 800913a:	46bd      	mov	sp, r7
 800913c:	bd80      	pop	{r7, pc}

0800913e <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800913e:	b480      	push	{r7}
 8009140:	b08f      	sub	sp, #60	@ 0x3c
 8009142:	af00      	add	r7, sp, #0
 8009144:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800914c:	6a3b      	ldr	r3, [r7, #32]
 800914e:	e853 3f00 	ldrex	r3, [r3]
 8009152:	61fb      	str	r3, [r7, #28]
   return(result);
 8009154:	69fb      	ldr	r3, [r7, #28]
 8009156:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800915a:	637b      	str	r3, [r7, #52]	@ 0x34
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	461a      	mov	r2, r3
 8009162:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009164:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009166:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009168:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800916a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800916c:	e841 2300 	strex	r3, r2, [r1]
 8009170:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009174:	2b00      	cmp	r3, #0
 8009176:	d1e6      	bne.n	8009146 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	3308      	adds	r3, #8
 800917e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	e853 3f00 	ldrex	r3, [r3]
 8009186:	60bb      	str	r3, [r7, #8]
   return(result);
 8009188:	68bb      	ldr	r3, [r7, #8]
 800918a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800918e:	633b      	str	r3, [r7, #48]	@ 0x30
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	3308      	adds	r3, #8
 8009196:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009198:	61ba      	str	r2, [r7, #24]
 800919a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800919c:	6979      	ldr	r1, [r7, #20]
 800919e:	69ba      	ldr	r2, [r7, #24]
 80091a0:	e841 2300 	strex	r3, r2, [r1]
 80091a4:	613b      	str	r3, [r7, #16]
   return(result);
 80091a6:	693b      	ldr	r3, [r7, #16]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d1e5      	bne.n	8009178 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	2220      	movs	r2, #32
 80091b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 80091b4:	bf00      	nop
 80091b6:	373c      	adds	r7, #60	@ 0x3c
 80091b8:	46bd      	mov	sp, r7
 80091ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091be:	4770      	bx	lr

080091c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80091c0:	b480      	push	{r7}
 80091c2:	b095      	sub	sp, #84	@ 0x54
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091d0:	e853 3f00 	ldrex	r3, [r3]
 80091d4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80091d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091d8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80091dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	461a      	mov	r2, r3
 80091e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80091e6:	643b      	str	r3, [r7, #64]	@ 0x40
 80091e8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091ea:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80091ec:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80091ee:	e841 2300 	strex	r3, r2, [r1]
 80091f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80091f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d1e6      	bne.n	80091c8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	3308      	adds	r3, #8
 8009200:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009202:	6a3b      	ldr	r3, [r7, #32]
 8009204:	e853 3f00 	ldrex	r3, [r3]
 8009208:	61fb      	str	r3, [r7, #28]
   return(result);
 800920a:	69fb      	ldr	r3, [r7, #28]
 800920c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009210:	f023 0301 	bic.w	r3, r3, #1
 8009214:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	3308      	adds	r3, #8
 800921c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800921e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009220:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009222:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009224:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009226:	e841 2300 	strex	r3, r2, [r1]
 800922a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800922c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800922e:	2b00      	cmp	r3, #0
 8009230:	d1e3      	bne.n	80091fa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009236:	2b01      	cmp	r3, #1
 8009238:	d118      	bne.n	800926c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	e853 3f00 	ldrex	r3, [r3]
 8009246:	60bb      	str	r3, [r7, #8]
   return(result);
 8009248:	68bb      	ldr	r3, [r7, #8]
 800924a:	f023 0310 	bic.w	r3, r3, #16
 800924e:	647b      	str	r3, [r7, #68]	@ 0x44
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	461a      	mov	r2, r3
 8009256:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009258:	61bb      	str	r3, [r7, #24]
 800925a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800925c:	6979      	ldr	r1, [r7, #20]
 800925e:	69ba      	ldr	r2, [r7, #24]
 8009260:	e841 2300 	strex	r3, r2, [r1]
 8009264:	613b      	str	r3, [r7, #16]
   return(result);
 8009266:	693b      	ldr	r3, [r7, #16]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d1e6      	bne.n	800923a <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	2220      	movs	r2, #32
 8009270:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	2200      	movs	r2, #0
 8009278:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	2200      	movs	r2, #0
 800927e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009280:	bf00      	nop
 8009282:	3754      	adds	r7, #84	@ 0x54
 8009284:	46bd      	mov	sp, r7
 8009286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928a:	4770      	bx	lr

0800928c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800928c:	b580      	push	{r7, lr}
 800928e:	b090      	sub	sp, #64	@ 0x40
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009298:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	f003 0320 	and.w	r3, r3, #32
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d137      	bne.n	8009318 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 80092a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80092aa:	2200      	movs	r2, #0
 80092ac:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80092b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	3308      	adds	r3, #8
 80092b6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092ba:	e853 3f00 	ldrex	r3, [r3]
 80092be:	623b      	str	r3, [r7, #32]
   return(result);
 80092c0:	6a3b      	ldr	r3, [r7, #32]
 80092c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80092c6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80092c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	3308      	adds	r3, #8
 80092ce:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80092d0:	633a      	str	r2, [r7, #48]	@ 0x30
 80092d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092d4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80092d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80092d8:	e841 2300 	strex	r3, r2, [r1]
 80092dc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80092de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d1e5      	bne.n	80092b0 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80092e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092ea:	693b      	ldr	r3, [r7, #16]
 80092ec:	e853 3f00 	ldrex	r3, [r3]
 80092f0:	60fb      	str	r3, [r7, #12]
   return(result);
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80092f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80092fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	461a      	mov	r2, r3
 8009300:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009302:	61fb      	str	r3, [r7, #28]
 8009304:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009306:	69b9      	ldr	r1, [r7, #24]
 8009308:	69fa      	ldr	r2, [r7, #28]
 800930a:	e841 2300 	strex	r3, r2, [r1]
 800930e:	617b      	str	r3, [r7, #20]
   return(result);
 8009310:	697b      	ldr	r3, [r7, #20]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d1e6      	bne.n	80092e4 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009316:	e002      	b.n	800931e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8009318:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800931a:	f7f9 f93b 	bl	8002594 <HAL_UART_TxCpltCallback>
}
 800931e:	bf00      	nop
 8009320:	3740      	adds	r7, #64	@ 0x40
 8009322:	46bd      	mov	sp, r7
 8009324:	bd80      	pop	{r7, pc}

08009326 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009326:	b580      	push	{r7, lr}
 8009328:	b084      	sub	sp, #16
 800932a:	af00      	add	r7, sp, #0
 800932c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009332:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009334:	68f8      	ldr	r0, [r7, #12]
 8009336:	f7ff fb01 	bl	800893c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800933a:	bf00      	nop
 800933c:	3710      	adds	r7, #16
 800933e:	46bd      	mov	sp, r7
 8009340:	bd80      	pop	{r7, pc}

08009342 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009342:	b580      	push	{r7, lr}
 8009344:	b086      	sub	sp, #24
 8009346:	af00      	add	r7, sp, #0
 8009348:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800934e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009350:	697b      	ldr	r3, [r7, #20]
 8009352:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009356:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009358:	697b      	ldr	r3, [r7, #20]
 800935a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800935e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009360:	697b      	ldr	r3, [r7, #20]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	689b      	ldr	r3, [r3, #8]
 8009366:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800936a:	2b80      	cmp	r3, #128	@ 0x80
 800936c:	d109      	bne.n	8009382 <UART_DMAError+0x40>
 800936e:	693b      	ldr	r3, [r7, #16]
 8009370:	2b21      	cmp	r3, #33	@ 0x21
 8009372:	d106      	bne.n	8009382 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009374:	697b      	ldr	r3, [r7, #20]
 8009376:	2200      	movs	r2, #0
 8009378:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800937c:	6978      	ldr	r0, [r7, #20]
 800937e:	f7ff fede 	bl	800913e <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009382:	697b      	ldr	r3, [r7, #20]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	689b      	ldr	r3, [r3, #8]
 8009388:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800938c:	2b40      	cmp	r3, #64	@ 0x40
 800938e:	d109      	bne.n	80093a4 <UART_DMAError+0x62>
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	2b22      	cmp	r3, #34	@ 0x22
 8009394:	d106      	bne.n	80093a4 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009396:	697b      	ldr	r3, [r7, #20]
 8009398:	2200      	movs	r2, #0
 800939a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800939e:	6978      	ldr	r0, [r7, #20]
 80093a0:	f7ff ff0e 	bl	80091c0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80093a4:	697b      	ldr	r3, [r7, #20]
 80093a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80093aa:	f043 0210 	orr.w	r2, r3, #16
 80093ae:	697b      	ldr	r3, [r7, #20]
 80093b0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80093b4:	6978      	ldr	r0, [r7, #20]
 80093b6:	f7ff facb 	bl	8008950 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80093ba:	bf00      	nop
 80093bc:	3718      	adds	r7, #24
 80093be:	46bd      	mov	sp, r7
 80093c0:	bd80      	pop	{r7, pc}

080093c2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80093c2:	b580      	push	{r7, lr}
 80093c4:	b084      	sub	sp, #16
 80093c6:	af00      	add	r7, sp, #0
 80093c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093ce:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	2200      	movs	r2, #0
 80093d4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	2200      	movs	r2, #0
 80093dc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80093e0:	68f8      	ldr	r0, [r7, #12]
 80093e2:	f7ff fab5 	bl	8008950 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80093e6:	bf00      	nop
 80093e8:	3710      	adds	r7, #16
 80093ea:	46bd      	mov	sp, r7
 80093ec:	bd80      	pop	{r7, pc}

080093ee <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80093ee:	b580      	push	{r7, lr}
 80093f0:	b088      	sub	sp, #32
 80093f2:	af00      	add	r7, sp, #0
 80093f4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	e853 3f00 	ldrex	r3, [r3]
 8009402:	60bb      	str	r3, [r7, #8]
   return(result);
 8009404:	68bb      	ldr	r3, [r7, #8]
 8009406:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800940a:	61fb      	str	r3, [r7, #28]
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	461a      	mov	r2, r3
 8009412:	69fb      	ldr	r3, [r7, #28]
 8009414:	61bb      	str	r3, [r7, #24]
 8009416:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009418:	6979      	ldr	r1, [r7, #20]
 800941a:	69ba      	ldr	r2, [r7, #24]
 800941c:	e841 2300 	strex	r3, r2, [r1]
 8009420:	613b      	str	r3, [r7, #16]
   return(result);
 8009422:	693b      	ldr	r3, [r7, #16]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d1e6      	bne.n	80093f6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	2220      	movs	r2, #32
 800942c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	2200      	movs	r2, #0
 8009434:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009436:	6878      	ldr	r0, [r7, #4]
 8009438:	f7f9 f8ac 	bl	8002594 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800943c:	bf00      	nop
 800943e:	3720      	adds	r7, #32
 8009440:	46bd      	mov	sp, r7
 8009442:	bd80      	pop	{r7, pc}

08009444 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009444:	b480      	push	{r7}
 8009446:	b083      	sub	sp, #12
 8009448:	af00      	add	r7, sp, #0
 800944a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800944c:	bf00      	nop
 800944e:	370c      	adds	r7, #12
 8009450:	46bd      	mov	sp, r7
 8009452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009456:	4770      	bx	lr

08009458 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009458:	b480      	push	{r7}
 800945a:	b083      	sub	sp, #12
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009460:	bf00      	nop
 8009462:	370c      	adds	r7, #12
 8009464:	46bd      	mov	sp, r7
 8009466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946a:	4770      	bx	lr

0800946c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800946c:	b480      	push	{r7}
 800946e:	b083      	sub	sp, #12
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009474:	bf00      	nop
 8009476:	370c      	adds	r7, #12
 8009478:	46bd      	mov	sp, r7
 800947a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947e:	4770      	bx	lr

08009480 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009480:	b480      	push	{r7}
 8009482:	b085      	sub	sp, #20
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800948e:	2b01      	cmp	r3, #1
 8009490:	d101      	bne.n	8009496 <HAL_UARTEx_DisableFifoMode+0x16>
 8009492:	2302      	movs	r3, #2
 8009494:	e027      	b.n	80094e6 <HAL_UARTEx_DisableFifoMode+0x66>
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	2201      	movs	r2, #1
 800949a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	2224      	movs	r2, #36	@ 0x24
 80094a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	681a      	ldr	r2, [r3, #0]
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	f022 0201 	bic.w	r2, r2, #1
 80094bc:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80094c4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	2200      	movs	r2, #0
 80094ca:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	68fa      	ldr	r2, [r7, #12]
 80094d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	2220      	movs	r2, #32
 80094d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	2200      	movs	r2, #0
 80094e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80094e4:	2300      	movs	r3, #0
}
 80094e6:	4618      	mov	r0, r3
 80094e8:	3714      	adds	r7, #20
 80094ea:	46bd      	mov	sp, r7
 80094ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f0:	4770      	bx	lr

080094f2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80094f2:	b580      	push	{r7, lr}
 80094f4:	b084      	sub	sp, #16
 80094f6:	af00      	add	r7, sp, #0
 80094f8:	6078      	str	r0, [r7, #4]
 80094fa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009502:	2b01      	cmp	r3, #1
 8009504:	d101      	bne.n	800950a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009506:	2302      	movs	r3, #2
 8009508:	e02d      	b.n	8009566 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	2201      	movs	r2, #1
 800950e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	2224      	movs	r2, #36	@ 0x24
 8009516:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	681a      	ldr	r2, [r3, #0]
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	f022 0201 	bic.w	r2, r2, #1
 8009530:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	689b      	ldr	r3, [r3, #8]
 8009538:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	683a      	ldr	r2, [r7, #0]
 8009542:	430a      	orrs	r2, r1
 8009544:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009546:	6878      	ldr	r0, [r7, #4]
 8009548:	f000 f850 	bl	80095ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	68fa      	ldr	r2, [r7, #12]
 8009552:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	2220      	movs	r2, #32
 8009558:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	2200      	movs	r2, #0
 8009560:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009564:	2300      	movs	r3, #0
}
 8009566:	4618      	mov	r0, r3
 8009568:	3710      	adds	r7, #16
 800956a:	46bd      	mov	sp, r7
 800956c:	bd80      	pop	{r7, pc}

0800956e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800956e:	b580      	push	{r7, lr}
 8009570:	b084      	sub	sp, #16
 8009572:	af00      	add	r7, sp, #0
 8009574:	6078      	str	r0, [r7, #4]
 8009576:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800957e:	2b01      	cmp	r3, #1
 8009580:	d101      	bne.n	8009586 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009582:	2302      	movs	r3, #2
 8009584:	e02d      	b.n	80095e2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	2201      	movs	r2, #1
 800958a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	2224      	movs	r2, #36	@ 0x24
 8009592:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	681a      	ldr	r2, [r3, #0]
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	f022 0201 	bic.w	r2, r2, #1
 80095ac:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	689b      	ldr	r3, [r3, #8]
 80095b4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	683a      	ldr	r2, [r7, #0]
 80095be:	430a      	orrs	r2, r1
 80095c0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80095c2:	6878      	ldr	r0, [r7, #4]
 80095c4:	f000 f812 	bl	80095ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	68fa      	ldr	r2, [r7, #12]
 80095ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	2220      	movs	r2, #32
 80095d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	2200      	movs	r2, #0
 80095dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80095e0:	2300      	movs	r3, #0
}
 80095e2:	4618      	mov	r0, r3
 80095e4:	3710      	adds	r7, #16
 80095e6:	46bd      	mov	sp, r7
 80095e8:	bd80      	pop	{r7, pc}
	...

080095ec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80095ec:	b480      	push	{r7}
 80095ee:	b085      	sub	sp, #20
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d108      	bne.n	800960e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	2201      	movs	r2, #1
 8009600:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	2201      	movs	r2, #1
 8009608:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800960c:	e031      	b.n	8009672 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800960e:	2308      	movs	r3, #8
 8009610:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009612:	2308      	movs	r3, #8
 8009614:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	689b      	ldr	r3, [r3, #8]
 800961c:	0e5b      	lsrs	r3, r3, #25
 800961e:	b2db      	uxtb	r3, r3
 8009620:	f003 0307 	and.w	r3, r3, #7
 8009624:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	689b      	ldr	r3, [r3, #8]
 800962c:	0f5b      	lsrs	r3, r3, #29
 800962e:	b2db      	uxtb	r3, r3
 8009630:	f003 0307 	and.w	r3, r3, #7
 8009634:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009636:	7bbb      	ldrb	r3, [r7, #14]
 8009638:	7b3a      	ldrb	r2, [r7, #12]
 800963a:	4911      	ldr	r1, [pc, #68]	@ (8009680 <UARTEx_SetNbDataToProcess+0x94>)
 800963c:	5c8a      	ldrb	r2, [r1, r2]
 800963e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009642:	7b3a      	ldrb	r2, [r7, #12]
 8009644:	490f      	ldr	r1, [pc, #60]	@ (8009684 <UARTEx_SetNbDataToProcess+0x98>)
 8009646:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009648:	fb93 f3f2 	sdiv	r3, r3, r2
 800964c:	b29a      	uxth	r2, r3
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009654:	7bfb      	ldrb	r3, [r7, #15]
 8009656:	7b7a      	ldrb	r2, [r7, #13]
 8009658:	4909      	ldr	r1, [pc, #36]	@ (8009680 <UARTEx_SetNbDataToProcess+0x94>)
 800965a:	5c8a      	ldrb	r2, [r1, r2]
 800965c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009660:	7b7a      	ldrb	r2, [r7, #13]
 8009662:	4908      	ldr	r1, [pc, #32]	@ (8009684 <UARTEx_SetNbDataToProcess+0x98>)
 8009664:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009666:	fb93 f3f2 	sdiv	r3, r3, r2
 800966a:	b29a      	uxth	r2, r3
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009672:	bf00      	nop
 8009674:	3714      	adds	r7, #20
 8009676:	46bd      	mov	sp, r7
 8009678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967c:	4770      	bx	lr
 800967e:	bf00      	nop
 8009680:	08011124 	.word	0x08011124
 8009684:	0801112c 	.word	0x0801112c

08009688 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b088      	sub	sp, #32
 800968c:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800968e:	2300      	movs	r3, #0
 8009690:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009692:	f107 0308 	add.w	r3, r7, #8
 8009696:	2218      	movs	r2, #24
 8009698:	2100      	movs	r1, #0
 800969a:	4618      	mov	r0, r3
 800969c:	f001 fa9e 	bl	800abdc <Osal_MemSet>
  rq.ogf = 0x3f;
 80096a0:	233f      	movs	r3, #63	@ 0x3f
 80096a2:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 80096a4:	2381      	movs	r3, #129	@ 0x81
 80096a6:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80096a8:	1dfb      	adds	r3, r7, #7
 80096aa:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80096ac:	2301      	movs	r3, #1
 80096ae:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80096b0:	f107 0308 	add.w	r3, r7, #8
 80096b4:	2100      	movs	r1, #0
 80096b6:	4618      	mov	r0, r3
 80096b8:	f001 fd1a 	bl	800b0f0 <hci_send_req>
 80096bc:	4603      	mov	r3, r0
 80096be:	2b00      	cmp	r3, #0
 80096c0:	da01      	bge.n	80096c6 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 80096c2:	23ff      	movs	r3, #255	@ 0xff
 80096c4:	e000      	b.n	80096c8 <aci_gap_set_non_discoverable+0x40>
  return status;
 80096c6:	79fb      	ldrb	r3, [r7, #7]
}
 80096c8:	4618      	mov	r0, r3
 80096ca:	3720      	adds	r7, #32
 80096cc:	46bd      	mov	sp, r7
 80096ce:	bd80      	pop	{r7, pc}

080096d0 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 80096d0:	b5b0      	push	{r4, r5, r7, lr}
 80096d2:	b0ce      	sub	sp, #312	@ 0x138
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	4605      	mov	r5, r0
 80096d8:	460c      	mov	r4, r1
 80096da:	4610      	mov	r0, r2
 80096dc:	4619      	mov	r1, r3
 80096de:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80096e2:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 80096e6:	462a      	mov	r2, r5
 80096e8:	701a      	strb	r2, [r3, #0]
 80096ea:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80096ee:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80096f2:	4622      	mov	r2, r4
 80096f4:	801a      	strh	r2, [r3, #0]
 80096f6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80096fa:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 80096fe:	4602      	mov	r2, r0
 8009700:	801a      	strh	r2, [r3, #0]
 8009702:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009706:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800970a:	460a      	mov	r2, r1
 800970c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 800970e:	f107 0310 	add.w	r3, r7, #16
 8009712:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8009716:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 800971a:	3308      	adds	r3, #8
 800971c:	f107 0210 	add.w	r2, r7, #16
 8009720:	4413      	add	r3, r2
 8009722:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8009726:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 800972a:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 800972e:	4413      	add	r3, r2
 8009730:	3309      	adds	r3, #9
 8009732:	f107 0210 	add.w	r2, r7, #16
 8009736:	4413      	add	r3, r2
 8009738:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800973c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009740:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8009744:	2200      	movs	r2, #0
 8009746:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009748:	2300      	movs	r3, #0
 800974a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Type = Advertising_Type;
 800974e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8009752:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8009756:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 800975a:	7812      	ldrb	r2, [r2, #0]
 800975c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800975e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009762:	3301      	adds	r3, #1
 8009764:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 8009768:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800976c:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8009770:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 8009774:	8812      	ldrh	r2, [r2, #0]
 8009776:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 800977a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800977e:	3302      	adds	r3, #2
 8009780:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8009784:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8009788:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800978c:	f5a2 729b 	sub.w	r2, r2, #310	@ 0x136
 8009790:	8812      	ldrh	r2, [r2, #0]
 8009792:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8009796:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800979a:	3302      	adds	r3, #2
 800979c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 80097a0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80097a4:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80097a8:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 80097ac:	7812      	ldrb	r2, [r2, #0]
 80097ae:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80097b0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80097b4:	3301      	adds	r3, #1
 80097b6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 80097ba:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80097be:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 80097c2:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 80097c4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80097c8:	3301      	adds	r3, #1
 80097ca:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 80097ce:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80097d2:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 80097d6:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 80097d8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80097dc:	3301      	adds	r3, #1
 80097de:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 80097e2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80097e6:	3308      	adds	r3, #8
 80097e8:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 80097ec:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 80097f0:	4618      	mov	r0, r3
 80097f2:	f001 f9e3 	bl	800abbc <Osal_MemCpy>
    index_input += Local_Name_Length;
 80097f6:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 80097fa:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 80097fe:	4413      	add	r3, r2
 8009800:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 8009804:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8009808:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 800980c:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800980e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009812:	3301      	adds	r3, #1
 8009814:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 8009818:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800981c:	3301      	adds	r3, #1
 800981e:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8009822:	f8d7 1158 	ldr.w	r1, [r7, #344]	@ 0x158
 8009826:	4618      	mov	r0, r3
 8009828:	f001 f9c8 	bl	800abbc <Osal_MemCpy>
    index_input += Service_Uuid_length;
 800982c:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 8009830:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8009834:	4413      	add	r3, r2
 8009836:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 800983a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800983e:	f8b7 215c 	ldrh.w	r2, [r7, #348]	@ 0x15c
 8009842:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8009844:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009848:	3302      	adds	r3, #2
 800984a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 800984e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009852:	f8b7 2160 	ldrh.w	r2, [r7, #352]	@ 0x160
 8009856:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8009858:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800985c:	3302      	adds	r3, #2
 800985e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009862:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009866:	2218      	movs	r2, #24
 8009868:	2100      	movs	r1, #0
 800986a:	4618      	mov	r0, r3
 800986c:	f001 f9b6 	bl	800abdc <Osal_MemSet>
  rq.ogf = 0x3f;
 8009870:	233f      	movs	r3, #63	@ 0x3f
 8009872:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x083;
 8009876:	2383      	movs	r3, #131	@ 0x83
 8009878:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800987c:	f107 0310 	add.w	r3, r7, #16
 8009880:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8009884:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009888:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800988c:	f107 030f 	add.w	r3, r7, #15
 8009890:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8009894:	2301      	movs	r3, #1
 8009896:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800989a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800989e:	2100      	movs	r1, #0
 80098a0:	4618      	mov	r0, r3
 80098a2:	f001 fc25 	bl	800b0f0 <hci_send_req>
 80098a6:	4603      	mov	r3, r0
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	da01      	bge.n	80098b0 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 80098ac:	23ff      	movs	r3, #255	@ 0xff
 80098ae:	e004      	b.n	80098ba <aci_gap_set_discoverable+0x1ea>
  return status;
 80098b0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80098b4:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80098b8:	781b      	ldrb	r3, [r3, #0]
}
 80098ba:	4618      	mov	r0, r3
 80098bc:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 80098c0:	46bd      	mov	sp, r7
 80098c2:	bdb0      	pop	{r4, r5, r7, pc}

080098c4 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	b0cc      	sub	sp, #304	@ 0x130
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	4602      	mov	r2, r0
 80098cc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80098d0:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80098d4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 80098d6:	f107 0310 	add.w	r3, r7, #16
 80098da:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80098de:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80098e2:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80098e6:	2200      	movs	r2, #0
 80098e8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80098ea:	2300      	movs	r3, #0
 80098ec:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->IO_Capability = IO_Capability;
 80098f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80098f4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80098f8:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 80098fc:	7812      	ldrb	r2, [r2, #0]
 80098fe:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009900:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009904:	3301      	adds	r3, #1
 8009906:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800990a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800990e:	2218      	movs	r2, #24
 8009910:	2100      	movs	r1, #0
 8009912:	4618      	mov	r0, r3
 8009914:	f001 f962 	bl	800abdc <Osal_MemSet>
  rq.ogf = 0x3f;
 8009918:	233f      	movs	r3, #63	@ 0x3f
 800991a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x085;
 800991e:	2385      	movs	r3, #133	@ 0x85
 8009920:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8009924:	f107 0310 	add.w	r3, r7, #16
 8009928:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800992c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009930:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8009934:	f107 030f 	add.w	r3, r7, #15
 8009938:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800993c:	2301      	movs	r3, #1
 800993e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009942:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009946:	2100      	movs	r1, #0
 8009948:	4618      	mov	r0, r3
 800994a:	f001 fbd1 	bl	800b0f0 <hci_send_req>
 800994e:	4603      	mov	r3, r0
 8009950:	2b00      	cmp	r3, #0
 8009952:	da01      	bge.n	8009958 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 8009954:	23ff      	movs	r3, #255	@ 0xff
 8009956:	e004      	b.n	8009962 <aci_gap_set_io_capability+0x9e>
  return status;
 8009958:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800995c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009960:	781b      	ldrb	r3, [r3, #0]
}
 8009962:	4618      	mov	r0, r3
 8009964:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8009968:	46bd      	mov	sp, r7
 800996a:	bd80      	pop	{r7, pc}

0800996c <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 800996c:	b5b0      	push	{r4, r5, r7, lr}
 800996e:	b0cc      	sub	sp, #304	@ 0x130
 8009970:	af00      	add	r7, sp, #0
 8009972:	4605      	mov	r5, r0
 8009974:	460c      	mov	r4, r1
 8009976:	4610      	mov	r0, r2
 8009978:	4619      	mov	r1, r3
 800997a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800997e:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8009982:	462a      	mov	r2, r5
 8009984:	701a      	strb	r2, [r3, #0]
 8009986:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800998a:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800998e:	4622      	mov	r2, r4
 8009990:	701a      	strb	r2, [r3, #0]
 8009992:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009996:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800999a:	4602      	mov	r2, r0
 800999c:	701a      	strb	r2, [r3, #0]
 800999e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80099a2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80099a6:	460a      	mov	r2, r1
 80099a8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 80099aa:	f107 0310 	add.w	r3, r7, #16
 80099ae:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80099b2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80099b6:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80099ba:	2200      	movs	r2, #0
 80099bc:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80099be:	2300      	movs	r3, #0
 80099c0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 80099c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80099c8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80099cc:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 80099d0:	7812      	ldrb	r2, [r2, #0]
 80099d2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80099d4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80099d8:	3301      	adds	r3, #1
 80099da:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->MITM_Mode = MITM_Mode;
 80099de:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80099e2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80099e6:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80099ea:	7812      	ldrb	r2, [r2, #0]
 80099ec:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80099ee:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80099f2:	3301      	adds	r3, #1
 80099f4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->SC_Support = SC_Support;
 80099f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80099fc:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009a00:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8009a04:	7812      	ldrb	r2, [r2, #0]
 8009a06:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8009a08:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009a0c:	3301      	adds	r3, #1
 8009a0e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 8009a12:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009a16:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009a1a:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 8009a1e:	7812      	ldrb	r2, [r2, #0]
 8009a20:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 8009a22:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009a26:	3301      	adds	r3, #1
 8009a28:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 8009a2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009a30:	f897 2140 	ldrb.w	r2, [r7, #320]	@ 0x140
 8009a34:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8009a36:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009a3a:	3301      	adds	r3, #1
 8009a3c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 8009a40:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009a44:	f897 2144 	ldrb.w	r2, [r7, #324]	@ 0x144
 8009a48:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8009a4a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009a4e:	3301      	adds	r3, #1
 8009a50:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 8009a54:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009a58:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 8009a5c:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8009a5e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009a62:	3301      	adds	r3, #1
 8009a64:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 8009a68:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009a6c:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8009a70:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8009a74:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009a78:	3304      	adds	r3, #4
 8009a7a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 8009a7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009a82:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 8009a86:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8009a88:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009a8c:	3301      	adds	r3, #1
 8009a8e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009a92:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009a96:	2218      	movs	r2, #24
 8009a98:	2100      	movs	r1, #0
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	f001 f89e 	bl	800abdc <Osal_MemSet>
  rq.ogf = 0x3f;
 8009aa0:	233f      	movs	r3, #63	@ 0x3f
 8009aa2:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x086;
 8009aa6:	2386      	movs	r3, #134	@ 0x86
 8009aa8:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8009aac:	f107 0310 	add.w	r3, r7, #16
 8009ab0:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8009ab4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009ab8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8009abc:	f107 030f 	add.w	r3, r7, #15
 8009ac0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8009ac4:	2301      	movs	r3, #1
 8009ac6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009aca:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009ace:	2100      	movs	r1, #0
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	f001 fb0d 	bl	800b0f0 <hci_send_req>
 8009ad6:	4603      	mov	r3, r0
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	da01      	bge.n	8009ae0 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 8009adc:	23ff      	movs	r3, #255	@ 0xff
 8009ade:	e004      	b.n	8009aea <aci_gap_set_authentication_requirement+0x17e>
  return status;
 8009ae0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009ae4:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009ae8:	781b      	ldrb	r3, [r3, #0]
}
 8009aea:	4618      	mov	r0, r3
 8009aec:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8009af0:	46bd      	mov	sp, r7
 8009af2:	bdb0      	pop	{r4, r5, r7, pc}

08009af4 <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b0cc      	sub	sp, #304	@ 0x130
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	4602      	mov	r2, r0
 8009afc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009b00:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8009b04:	6019      	str	r1, [r3, #0]
 8009b06:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009b0a:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8009b0e:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 8009b10:	f107 0310 	add.w	r3, r7, #16
 8009b14:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8009b18:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009b1c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009b20:	2200      	movs	r2, #0
 8009b22:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009b24:	2300      	movs	r3, #0
 8009b26:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8009b2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009b2e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009b32:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8009b36:	8812      	ldrh	r2, [r2, #0]
 8009b38:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009b3a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009b3e:	3302      	adds	r3, #2
 8009b40:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Pass_Key = Pass_Key;
 8009b44:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009b48:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009b4c:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 8009b50:	6812      	ldr	r2, [r2, #0]
 8009b52:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 8009b56:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009b5a:	3304      	adds	r3, #4
 8009b5c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009b60:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009b64:	2218      	movs	r2, #24
 8009b66:	2100      	movs	r1, #0
 8009b68:	4618      	mov	r0, r3
 8009b6a:	f001 f837 	bl	800abdc <Osal_MemSet>
  rq.ogf = 0x3f;
 8009b6e:	233f      	movs	r3, #63	@ 0x3f
 8009b70:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x088;
 8009b74:	2388      	movs	r3, #136	@ 0x88
 8009b76:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8009b7a:	f107 0310 	add.w	r3, r7, #16
 8009b7e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8009b82:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009b86:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8009b8a:	f107 030f 	add.w	r3, r7, #15
 8009b8e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8009b92:	2301      	movs	r3, #1
 8009b94:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009b98:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009b9c:	2100      	movs	r1, #0
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	f001 faa6 	bl	800b0f0 <hci_send_req>
 8009ba4:	4603      	mov	r3, r0
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	da01      	bge.n	8009bae <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 8009baa:	23ff      	movs	r3, #255	@ 0xff
 8009bac:	e004      	b.n	8009bb8 <aci_gap_pass_key_resp+0xc4>
  return status;
 8009bae:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009bb2:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009bb6:	781b      	ldrb	r3, [r3, #0]
}
 8009bb8:	4618      	mov	r0, r3
 8009bba:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	bd80      	pop	{r7, pc}

08009bc2 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8009bc2:	b590      	push	{r4, r7, lr}
 8009bc4:	b0cd      	sub	sp, #308	@ 0x134
 8009bc6:	af00      	add	r7, sp, #0
 8009bc8:	4604      	mov	r4, r0
 8009bca:	4608      	mov	r0, r1
 8009bcc:	4611      	mov	r1, r2
 8009bce:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009bd2:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 8009bd6:	6013      	str	r3, [r2, #0]
 8009bd8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009bdc:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8009be0:	4622      	mov	r2, r4
 8009be2:	701a      	strb	r2, [r3, #0]
 8009be4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009be8:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8009bec:	4602      	mov	r2, r0
 8009bee:	701a      	strb	r2, [r3, #0]
 8009bf0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009bf4:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8009bf8:	460a      	mov	r2, r1
 8009bfa:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8009bfc:	f107 0310 	add.w	r3, r7, #16
 8009c00:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8009c04:	f107 0308 	add.w	r3, r7, #8
 8009c08:	2207      	movs	r2, #7
 8009c0a:	2100      	movs	r1, #0
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	f000 ffe5 	bl	800abdc <Osal_MemSet>
  int index_input = 0;
 8009c12:	2300      	movs	r3, #0
 8009c14:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Role = Role;
 8009c18:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009c1c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009c20:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8009c24:	7812      	ldrb	r2, [r2, #0]
 8009c26:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009c28:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009c2c:	3301      	adds	r3, #1
 8009c2e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->privacy_enabled = privacy_enabled;
 8009c32:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009c36:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009c3a:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8009c3e:	7812      	ldrb	r2, [r2, #0]
 8009c40:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8009c42:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009c46:	3301      	adds	r3, #1
 8009c48:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->device_name_char_len = device_name_char_len;
 8009c4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009c50:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009c54:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8009c58:	7812      	ldrb	r2, [r2, #0]
 8009c5a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8009c5c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009c60:	3301      	adds	r3, #1
 8009c62:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009c66:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009c6a:	2218      	movs	r2, #24
 8009c6c:	2100      	movs	r1, #0
 8009c6e:	4618      	mov	r0, r3
 8009c70:	f000 ffb4 	bl	800abdc <Osal_MemSet>
  rq.ogf = 0x3f;
 8009c74:	233f      	movs	r3, #63	@ 0x3f
 8009c76:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08a;
 8009c7a:	238a      	movs	r3, #138	@ 0x8a
 8009c7c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8009c80:	f107 0310 	add.w	r3, r7, #16
 8009c84:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8009c88:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009c8c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 8009c90:	f107 0308 	add.w	r3, r7, #8
 8009c94:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 8009c98:	2307      	movs	r3, #7
 8009c9a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009c9e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009ca2:	2100      	movs	r1, #0
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	f001 fa23 	bl	800b0f0 <hci_send_req>
 8009caa:	4603      	mov	r3, r0
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	da01      	bge.n	8009cb4 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 8009cb0:	23ff      	movs	r3, #255	@ 0xff
 8009cb2:	e02e      	b.n	8009d12 <aci_gap_init+0x150>
  if ( resp.Status )
 8009cb4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009cb8:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8009cbc:	781b      	ldrb	r3, [r3, #0]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d005      	beq.n	8009cce <aci_gap_init+0x10c>
    return resp.Status;
 8009cc2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009cc6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8009cca:	781b      	ldrb	r3, [r3, #0]
 8009ccc:	e021      	b.n	8009d12 <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 8009cce:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009cd2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8009cd6:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009cda:	b29a      	uxth	r2, r3
 8009cdc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009ce0:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 8009ce8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009cec:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8009cf0:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8009cf4:	b29a      	uxth	r2, r3
 8009cf6:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8009cfa:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8009cfc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009d00:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8009d04:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8009d08:	b29a      	uxth	r2, r3
 8009d0a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8009d0e:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8009d10:	2300      	movs	r3, #0
}
 8009d12:	4618      	mov	r0, r3
 8009d14:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 8009d18:	46bd      	mov	sp, r7
 8009d1a:	bd90      	pop	{r4, r7, pc}

08009d1c <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 8009d1c:	b580      	push	{r7, lr}
 8009d1e:	b0cc      	sub	sp, #304	@ 0x130
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	4602      	mov	r2, r0
 8009d24:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009d28:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8009d2c:	6019      	str	r1, [r3, #0]
 8009d2e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009d32:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8009d36:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 8009d38:	f107 0310 	add.w	r3, r7, #16
 8009d3c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8009d40:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009d44:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009d48:	2200      	movs	r2, #0
 8009d4a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009d4c:	2300      	movs	r3, #0
 8009d4e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->AdvDataLen = AdvDataLen;
 8009d52:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009d56:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009d5a:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8009d5e:	7812      	ldrb	r2, [r2, #0]
 8009d60:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009d62:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009d66:	3301      	adds	r3, #1
 8009d68:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 8009d6c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009d70:	1c58      	adds	r0, r3, #1
 8009d72:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009d76:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8009d7a:	781a      	ldrb	r2, [r3, #0]
 8009d7c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009d80:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8009d84:	6819      	ldr	r1, [r3, #0]
 8009d86:	f000 ff19 	bl	800abbc <Osal_MemCpy>
  index_input += AdvDataLen;
 8009d8a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009d8e:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8009d92:	781b      	ldrb	r3, [r3, #0]
 8009d94:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8009d98:	4413      	add	r3, r2
 8009d9a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009d9e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009da2:	2218      	movs	r2, #24
 8009da4:	2100      	movs	r1, #0
 8009da6:	4618      	mov	r0, r3
 8009da8:	f000 ff18 	bl	800abdc <Osal_MemSet>
  rq.ogf = 0x3f;
 8009dac:	233f      	movs	r3, #63	@ 0x3f
 8009dae:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08e;
 8009db2:	238e      	movs	r3, #142	@ 0x8e
 8009db4:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8009db8:	f107 0310 	add.w	r3, r7, #16
 8009dbc:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8009dc0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009dc4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8009dc8:	f107 030f 	add.w	r3, r7, #15
 8009dcc:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8009dd0:	2301      	movs	r3, #1
 8009dd2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009dd6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009dda:	2100      	movs	r1, #0
 8009ddc:	4618      	mov	r0, r3
 8009dde:	f001 f987 	bl	800b0f0 <hci_send_req>
 8009de2:	4603      	mov	r3, r0
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	da01      	bge.n	8009dec <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 8009de8:	23ff      	movs	r3, #255	@ 0xff
 8009dea:	e004      	b.n	8009df6 <aci_gap_update_adv_data+0xda>
  return status;
 8009dec:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009df0:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009df4:	781b      	ldrb	r3, [r3, #0]
}
 8009df6:	4618      	mov	r0, r3
 8009df8:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	bd80      	pop	{r7, pc}

08009e00 <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 8009e00:	b580      	push	{r7, lr}
 8009e02:	b088      	sub	sp, #32
 8009e04:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8009e06:	2300      	movs	r3, #0
 8009e08:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009e0a:	f107 0308 	add.w	r3, r7, #8
 8009e0e:	2218      	movs	r2, #24
 8009e10:	2100      	movs	r1, #0
 8009e12:	4618      	mov	r0, r3
 8009e14:	f000 fee2 	bl	800abdc <Osal_MemSet>
  rq.ogf = 0x3f;
 8009e18:	233f      	movs	r3, #63	@ 0x3f
 8009e1a:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 8009e1c:	2392      	movs	r3, #146	@ 0x92
 8009e1e:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8009e20:	1dfb      	adds	r3, r7, #7
 8009e22:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8009e24:	2301      	movs	r3, #1
 8009e26:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009e28:	f107 0308 	add.w	r3, r7, #8
 8009e2c:	2100      	movs	r1, #0
 8009e2e:	4618      	mov	r0, r3
 8009e30:	f001 f95e 	bl	800b0f0 <hci_send_req>
 8009e34:	4603      	mov	r3, r0
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	da01      	bge.n	8009e3e <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 8009e3a:	23ff      	movs	r3, #255	@ 0xff
 8009e3c:	e000      	b.n	8009e40 <aci_gap_configure_filter_accept_list+0x40>
  return status;
 8009e3e:	79fb      	ldrb	r3, [r7, #7]
}
 8009e40:	4618      	mov	r0, r3
 8009e42:	3720      	adds	r7, #32
 8009e44:	46bd      	mov	sp, r7
 8009e46:	bd80      	pop	{r7, pc}

08009e48 <aci_gap_allow_rebond>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_allow_rebond( uint16_t Connection_Handle )
{
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	b0cc      	sub	sp, #304	@ 0x130
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	4602      	mov	r2, r0
 8009e50:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009e54:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8009e58:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_allow_rebond_cp0 *cp0 = (aci_gap_allow_rebond_cp0*)(cmd_buffer);
 8009e5a:	f107 0310 	add.w	r3, r7, #16
 8009e5e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8009e62:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009e66:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009e6e:	2300      	movs	r3, #0
 8009e70:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8009e74:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009e78:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009e7c:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8009e80:	8812      	ldrh	r2, [r2, #0]
 8009e82:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009e84:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009e88:	3302      	adds	r3, #2
 8009e8a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009e8e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009e92:	2218      	movs	r2, #24
 8009e94:	2100      	movs	r1, #0
 8009e96:	4618      	mov	r0, r3
 8009e98:	f000 fea0 	bl	800abdc <Osal_MemSet>
  rq.ogf = 0x3f;
 8009e9c:	233f      	movs	r3, #63	@ 0x3f
 8009e9e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x095;
 8009ea2:	2395      	movs	r3, #149	@ 0x95
 8009ea4:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8009ea8:	f107 0310 	add.w	r3, r7, #16
 8009eac:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8009eb0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009eb4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8009eb8:	f107 030f 	add.w	r3, r7, #15
 8009ebc:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8009ec0:	2301      	movs	r3, #1
 8009ec2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009ec6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009eca:	2100      	movs	r1, #0
 8009ecc:	4618      	mov	r0, r3
 8009ece:	f001 f90f 	bl	800b0f0 <hci_send_req>
 8009ed2:	4603      	mov	r3, r0
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	da01      	bge.n	8009edc <aci_gap_allow_rebond+0x94>
    return BLE_STATUS_TIMEOUT;
 8009ed8:	23ff      	movs	r3, #255	@ 0xff
 8009eda:	e004      	b.n	8009ee6 <aci_gap_allow_rebond+0x9e>
  return status;
 8009edc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009ee0:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009ee4:	781b      	ldrb	r3, [r3, #0]
}
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8009eec:	46bd      	mov	sp, r7
 8009eee:	bd80      	pop	{r7, pc}

08009ef0 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 8009ef0:	b580      	push	{r7, lr}
 8009ef2:	b0cc      	sub	sp, #304	@ 0x130
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	4602      	mov	r2, r0
 8009ef8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009efc:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8009f00:	801a      	strh	r2, [r3, #0]
 8009f02:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009f06:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8009f0a:	460a      	mov	r2, r1
 8009f0c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 8009f0e:	f107 0310 	add.w	r3, r7, #16
 8009f12:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8009f16:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009f1a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009f1e:	2200      	movs	r2, #0
 8009f20:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009f22:	2300      	movs	r3, #0
 8009f24:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8009f28:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009f2c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009f30:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8009f34:	8812      	ldrh	r2, [r2, #0]
 8009f36:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009f38:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009f3c:	3302      	adds	r3, #2
 8009f3e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 8009f42:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009f46:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009f4a:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8009f4e:	7812      	ldrb	r2, [r2, #0]
 8009f50:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8009f52:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009f56:	3301      	adds	r3, #1
 8009f58:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009f5c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009f60:	2218      	movs	r2, #24
 8009f62:	2100      	movs	r1, #0
 8009f64:	4618      	mov	r0, r3
 8009f66:	f000 fe39 	bl	800abdc <Osal_MemSet>
  rq.ogf = 0x3f;
 8009f6a:	233f      	movs	r3, #63	@ 0x3f
 8009f6c:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x0a5;
 8009f70:	23a5      	movs	r3, #165	@ 0xa5
 8009f72:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8009f76:	f107 0310 	add.w	r3, r7, #16
 8009f7a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8009f7e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009f82:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8009f86:	f107 030f 	add.w	r3, r7, #15
 8009f8a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8009f8e:	2301      	movs	r3, #1
 8009f90:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009f94:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009f98:	2100      	movs	r1, #0
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	f001 f8a8 	bl	800b0f0 <hci_send_req>
 8009fa0:	4603      	mov	r3, r0
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	da01      	bge.n	8009faa <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 8009fa6:	23ff      	movs	r3, #255	@ 0xff
 8009fa8:	e004      	b.n	8009fb4 <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 8009faa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009fae:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009fb2:	781b      	ldrb	r3, [r3, #0]
}
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	bd80      	pop	{r7, pc}

08009fbe <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 8009fbe:	b580      	push	{r7, lr}
 8009fc0:	b088      	sub	sp, #32
 8009fc2:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009fc8:	f107 0308 	add.w	r3, r7, #8
 8009fcc:	2218      	movs	r2, #24
 8009fce:	2100      	movs	r1, #0
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	f000 fe03 	bl	800abdc <Osal_MemSet>
  rq.ogf = 0x3f;
 8009fd6:	233f      	movs	r3, #63	@ 0x3f
 8009fd8:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8009fda:	f240 1301 	movw	r3, #257	@ 0x101
 8009fde:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8009fe0:	1dfb      	adds	r3, r7, #7
 8009fe2:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8009fe4:	2301      	movs	r3, #1
 8009fe6:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009fe8:	f107 0308 	add.w	r3, r7, #8
 8009fec:	2100      	movs	r1, #0
 8009fee:	4618      	mov	r0, r3
 8009ff0:	f001 f87e 	bl	800b0f0 <hci_send_req>
 8009ff4:	4603      	mov	r3, r0
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	da01      	bge.n	8009ffe <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8009ffa:	23ff      	movs	r3, #255	@ 0xff
 8009ffc:	e000      	b.n	800a000 <aci_gatt_init+0x42>
  return status;
 8009ffe:	79fb      	ldrb	r3, [r7, #7]
}
 800a000:	4618      	mov	r0, r3
 800a002:	3720      	adds	r7, #32
 800a004:	46bd      	mov	sp, r7
 800a006:	bd80      	pop	{r7, pc}

0800a008 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 800a008:	b590      	push	{r4, r7, lr}
 800a00a:	b0cf      	sub	sp, #316	@ 0x13c
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	4604      	mov	r4, r0
 800a010:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 800a014:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 800a018:	6001      	str	r1, [r0, #0]
 800a01a:	4610      	mov	r0, r2
 800a01c:	4619      	mov	r1, r3
 800a01e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800a022:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800a026:	4622      	mov	r2, r4
 800a028:	701a      	strb	r2, [r3, #0]
 800a02a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800a02e:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800a032:	4602      	mov	r2, r0
 800a034:	701a      	strb	r2, [r3, #0]
 800a036:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800a03a:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800a03e:	460a      	mov	r2, r1
 800a040:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 800a042:	f107 0310 	add.w	r3, r7, #16
 800a046:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 800a04a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800a04e:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800a052:	781b      	ldrb	r3, [r3, #0]
 800a054:	2b01      	cmp	r3, #1
 800a056:	d00a      	beq.n	800a06e <aci_gatt_add_service+0x66>
 800a058:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800a05c:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800a060:	781b      	ldrb	r3, [r3, #0]
 800a062:	2b02      	cmp	r3, #2
 800a064:	d101      	bne.n	800a06a <aci_gatt_add_service+0x62>
 800a066:	2311      	movs	r3, #17
 800a068:	e002      	b.n	800a070 <aci_gatt_add_service+0x68>
 800a06a:	2301      	movs	r3, #1
 800a06c:	e000      	b.n	800a070 <aci_gatt_add_service+0x68>
 800a06e:	2303      	movs	r3, #3
 800a070:	f107 0210 	add.w	r2, r7, #16
 800a074:	4413      	add	r3, r2
 800a076:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800a07a:	f107 030c 	add.w	r3, r7, #12
 800a07e:	2203      	movs	r2, #3
 800a080:	2100      	movs	r1, #0
 800a082:	4618      	mov	r0, r3
 800a084:	f000 fdaa 	bl	800abdc <Osal_MemSet>
  int index_input = 0;
 800a088:	2300      	movs	r3, #0
 800a08a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 800a08e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800a092:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800a096:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 800a09a:	7812      	ldrb	r2, [r2, #0]
 800a09c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800a09e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a0a2:	3301      	adds	r3, #1
 800a0a4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 800a0a8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800a0ac:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800a0b0:	781b      	ldrb	r3, [r3, #0]
 800a0b2:	2b01      	cmp	r3, #1
 800a0b4:	d002      	beq.n	800a0bc <aci_gatt_add_service+0xb4>
 800a0b6:	2b02      	cmp	r3, #2
 800a0b8:	d004      	beq.n	800a0c4 <aci_gatt_add_service+0xbc>
 800a0ba:	e007      	b.n	800a0cc <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 800a0bc:	2302      	movs	r3, #2
 800a0be:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 800a0c2:	e005      	b.n	800a0d0 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 800a0c4:	2310      	movs	r3, #16
 800a0c6:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 800a0ca:	e001      	b.n	800a0d0 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 800a0cc:	2397      	movs	r3, #151	@ 0x97
 800a0ce:	e06c      	b.n	800a1aa <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 800a0d0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800a0d4:	1c58      	adds	r0, r3, #1
 800a0d6:	f897 2137 	ldrb.w	r2, [r7, #311]	@ 0x137
 800a0da:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800a0de:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800a0e2:	6819      	ldr	r1, [r3, #0]
 800a0e4:	f000 fd6a 	bl	800abbc <Osal_MemCpy>
    index_input += size;
 800a0e8:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 800a0ec:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800a0f0:	4413      	add	r3, r2
 800a0f2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Type = Service_Type;
 800a0f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a0fa:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800a0fe:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 800a102:	7812      	ldrb	r2, [r2, #0]
 800a104:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800a106:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a10a:	3301      	adds	r3, #1
 800a10c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 800a110:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a114:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800a118:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 800a11c:	7812      	ldrb	r2, [r2, #0]
 800a11e:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 800a120:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a124:	3301      	adds	r3, #1
 800a126:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a12a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a12e:	2218      	movs	r2, #24
 800a130:	2100      	movs	r1, #0
 800a132:	4618      	mov	r0, r3
 800a134:	f000 fd52 	bl	800abdc <Osal_MemSet>
  rq.ogf = 0x3f;
 800a138:	233f      	movs	r3, #63	@ 0x3f
 800a13a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x102;
 800a13e:	f44f 7381 	mov.w	r3, #258	@ 0x102
 800a142:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800a146:	f107 0310 	add.w	r3, r7, #16
 800a14a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800a14e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a152:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 800a156:	f107 030c 	add.w	r3, r7, #12
 800a15a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 800a15e:	2303      	movs	r3, #3
 800a160:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a164:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a168:	2100      	movs	r1, #0
 800a16a:	4618      	mov	r0, r3
 800a16c:	f000 ffc0 	bl	800b0f0 <hci_send_req>
 800a170:	4603      	mov	r3, r0
 800a172:	2b00      	cmp	r3, #0
 800a174:	da01      	bge.n	800a17a <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 800a176:	23ff      	movs	r3, #255	@ 0xff
 800a178:	e017      	b.n	800a1aa <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 800a17a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800a17e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800a182:	781b      	ldrb	r3, [r3, #0]
 800a184:	2b00      	cmp	r3, #0
 800a186:	d005      	beq.n	800a194 <aci_gatt_add_service+0x18c>
    return resp.Status;
 800a188:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800a18c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800a190:	781b      	ldrb	r3, [r3, #0]
 800a192:	e00a      	b.n	800a1aa <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 800a194:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800a198:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800a19c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800a1a0:	b29a      	uxth	r2, r3
 800a1a2:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800a1a6:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800a1a8:	2300      	movs	r3, #0
}
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	bd90      	pop	{r4, r7, pc}

0800a1b4 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 800a1b4:	b590      	push	{r4, r7, lr}
 800a1b6:	b0d1      	sub	sp, #324	@ 0x144
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	4604      	mov	r4, r0
 800a1bc:	4608      	mov	r0, r1
 800a1be:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 800a1c2:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 800a1c6:	600a      	str	r2, [r1, #0]
 800a1c8:	4619      	mov	r1, r3
 800a1ca:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800a1ce:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800a1d2:	4622      	mov	r2, r4
 800a1d4:	801a      	strh	r2, [r3, #0]
 800a1d6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800a1da:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800a1de:	4602      	mov	r2, r0
 800a1e0:	701a      	strb	r2, [r3, #0]
 800a1e2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800a1e6:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 800a1ea:	460a      	mov	r2, r1
 800a1ec:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 800a1ee:	f107 0318 	add.w	r3, r7, #24
 800a1f2:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 800a1f6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800a1fa:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800a1fe:	781b      	ldrb	r3, [r3, #0]
 800a200:	2b01      	cmp	r3, #1
 800a202:	d00a      	beq.n	800a21a <aci_gatt_add_char+0x66>
 800a204:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800a208:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800a20c:	781b      	ldrb	r3, [r3, #0]
 800a20e:	2b02      	cmp	r3, #2
 800a210:	d101      	bne.n	800a216 <aci_gatt_add_char+0x62>
 800a212:	2313      	movs	r3, #19
 800a214:	e002      	b.n	800a21c <aci_gatt_add_char+0x68>
 800a216:	2303      	movs	r3, #3
 800a218:	e000      	b.n	800a21c <aci_gatt_add_char+0x68>
 800a21a:	2305      	movs	r3, #5
 800a21c:	f107 0218 	add.w	r2, r7, #24
 800a220:	4413      	add	r3, r2
 800a222:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800a226:	f107 0314 	add.w	r3, r7, #20
 800a22a:	2203      	movs	r2, #3
 800a22c:	2100      	movs	r1, #0
 800a22e:	4618      	mov	r0, r3
 800a230:	f000 fcd4 	bl	800abdc <Osal_MemSet>
  int index_input = 0;
 800a234:	2300      	movs	r3, #0
 800a236:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Service_Handle = Service_Handle;
 800a23a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800a23e:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800a242:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 800a246:	8812      	ldrh	r2, [r2, #0]
 800a248:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800a24a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800a24e:	3302      	adds	r3, #2
 800a250:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 800a254:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800a258:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800a25c:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 800a260:	7812      	ldrb	r2, [r2, #0]
 800a262:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800a264:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800a268:	3301      	adds	r3, #1
 800a26a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 800a26e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800a272:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800a276:	781b      	ldrb	r3, [r3, #0]
 800a278:	2b01      	cmp	r3, #1
 800a27a:	d002      	beq.n	800a282 <aci_gatt_add_char+0xce>
 800a27c:	2b02      	cmp	r3, #2
 800a27e:	d004      	beq.n	800a28a <aci_gatt_add_char+0xd6>
 800a280:	e007      	b.n	800a292 <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 800a282:	2302      	movs	r3, #2
 800a284:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 800a288:	e005      	b.n	800a296 <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 800a28a:	2310      	movs	r3, #16
 800a28c:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 800a290:	e001      	b.n	800a296 <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 800a292:	2397      	movs	r3, #151	@ 0x97
 800a294:	e091      	b.n	800a3ba <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 800a296:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800a29a:	1cd8      	adds	r0, r3, #3
 800a29c:	f897 213f 	ldrb.w	r2, [r7, #319]	@ 0x13f
 800a2a0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800a2a4:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800a2a8:	6819      	ldr	r1, [r3, #0]
 800a2aa:	f000 fc87 	bl	800abbc <Osal_MemCpy>
    index_input += size;
 800a2ae:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 800a2b2:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 800a2b6:	4413      	add	r3, r2
 800a2b8:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 800a2bc:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800a2c0:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800a2c4:	f5a2 729d 	sub.w	r2, r2, #314	@ 0x13a
 800a2c8:	8812      	ldrh	r2, [r2, #0]
 800a2ca:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800a2cc:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800a2d0:	3302      	adds	r3, #2
 800a2d2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Properties = Char_Properties;
 800a2d6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800a2da:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 800a2de:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 800a2e0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800a2e4:	3301      	adds	r3, #1
 800a2e6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 800a2ea:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800a2ee:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 800a2f2:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 800a2f4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800a2f8:	3301      	adds	r3, #1
 800a2fa:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 800a2fe:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800a302:	f897 2158 	ldrb.w	r2, [r7, #344]	@ 0x158
 800a306:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 800a308:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800a30c:	3301      	adds	r3, #1
 800a30e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 800a312:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800a316:	f897 215c 	ldrb.w	r2, [r7, #348]	@ 0x15c
 800a31a:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 800a31c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800a320:	3301      	adds	r3, #1
 800a322:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Is_Variable = Is_Variable;
 800a326:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800a32a:	f897 2160 	ldrb.w	r2, [r7, #352]	@ 0x160
 800a32e:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 800a330:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800a334:	3301      	adds	r3, #1
 800a336:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a33a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800a33e:	2218      	movs	r2, #24
 800a340:	2100      	movs	r1, #0
 800a342:	4618      	mov	r0, r3
 800a344:	f000 fc4a 	bl	800abdc <Osal_MemSet>
  rq.ogf = 0x3f;
 800a348:	233f      	movs	r3, #63	@ 0x3f
 800a34a:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x104;
 800a34e:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800a352:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.cparam = cmd_buffer;
 800a356:	f107 0318 	add.w	r3, r7, #24
 800a35a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 800a35e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800a362:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &resp;
 800a366:	f107 0314 	add.w	r3, r7, #20
 800a36a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = sizeof(resp);
 800a36e:	2303      	movs	r3, #3
 800a370:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a374:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800a378:	2100      	movs	r1, #0
 800a37a:	4618      	mov	r0, r3
 800a37c:	f000 feb8 	bl	800b0f0 <hci_send_req>
 800a380:	4603      	mov	r3, r0
 800a382:	2b00      	cmp	r3, #0
 800a384:	da01      	bge.n	800a38a <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 800a386:	23ff      	movs	r3, #255	@ 0xff
 800a388:	e017      	b.n	800a3ba <aci_gatt_add_char+0x206>
  if ( resp.Status )
 800a38a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800a38e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800a392:	781b      	ldrb	r3, [r3, #0]
 800a394:	2b00      	cmp	r3, #0
 800a396:	d005      	beq.n	800a3a4 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 800a398:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800a39c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800a3a0:	781b      	ldrb	r3, [r3, #0]
 800a3a2:	e00a      	b.n	800a3ba <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 800a3a4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800a3a8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800a3ac:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800a3b0:	b29a      	uxth	r2, r3
 800a3b2:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 800a3b6:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800a3b8:	2300      	movs	r3, #0
}
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	bd90      	pop	{r4, r7, pc}

0800a3c4 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 800a3c4:	b5b0      	push	{r4, r5, r7, lr}
 800a3c6:	b0cc      	sub	sp, #304	@ 0x130
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	4605      	mov	r5, r0
 800a3cc:	460c      	mov	r4, r1
 800a3ce:	4610      	mov	r0, r2
 800a3d0:	4619      	mov	r1, r3
 800a3d2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a3d6:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800a3da:	462a      	mov	r2, r5
 800a3dc:	801a      	strh	r2, [r3, #0]
 800a3de:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a3e2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800a3e6:	4622      	mov	r2, r4
 800a3e8:	801a      	strh	r2, [r3, #0]
 800a3ea:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a3ee:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 800a3f2:	4602      	mov	r2, r0
 800a3f4:	701a      	strb	r2, [r3, #0]
 800a3f6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a3fa:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800a3fe:	460a      	mov	r2, r1
 800a400:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 800a402:	f107 0310 	add.w	r3, r7, #16
 800a406:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800a40a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a40e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a412:	2200      	movs	r2, #0
 800a414:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a416:	2300      	movs	r3, #0
 800a418:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_Handle = Service_Handle;
 800a41c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a420:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a424:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800a428:	8812      	ldrh	r2, [r2, #0]
 800a42a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800a42c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a430:	3302      	adds	r3, #2
 800a432:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Handle = Char_Handle;
 800a436:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a43a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a43e:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 800a442:	8812      	ldrh	r2, [r2, #0]
 800a444:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800a446:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a44a:	3302      	adds	r3, #2
 800a44c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Val_Offset = Val_Offset;
 800a450:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a454:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a458:	f2a2 122d 	subw	r2, r2, #301	@ 0x12d
 800a45c:	7812      	ldrb	r2, [r2, #0]
 800a45e:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800a460:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a464:	3301      	adds	r3, #1
 800a466:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 800a46a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a46e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a472:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 800a476:	7812      	ldrb	r2, [r2, #0]
 800a478:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800a47a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a47e:	3301      	adds	r3, #1
 800a480:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 800a484:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a488:	1d98      	adds	r0, r3, #6
 800a48a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a48e:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800a492:	781b      	ldrb	r3, [r3, #0]
 800a494:	461a      	mov	r2, r3
 800a496:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800a49a:	f000 fb8f 	bl	800abbc <Osal_MemCpy>
  index_input += Char_Value_Length;
 800a49e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a4a2:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800a4a6:	781b      	ldrb	r3, [r3, #0]
 800a4a8:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800a4ac:	4413      	add	r3, r2
 800a4ae:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a4b2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a4b6:	2218      	movs	r2, #24
 800a4b8:	2100      	movs	r1, #0
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	f000 fb8e 	bl	800abdc <Osal_MemSet>
  rq.ogf = 0x3f;
 800a4c0:	233f      	movs	r3, #63	@ 0x3f
 800a4c2:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x106;
 800a4c6:	f44f 7383 	mov.w	r3, #262	@ 0x106
 800a4ca:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800a4ce:	f107 0310 	add.w	r3, r7, #16
 800a4d2:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800a4d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a4da:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800a4de:	f107 030f 	add.w	r3, r7, #15
 800a4e2:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800a4e6:	2301      	movs	r3, #1
 800a4e8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a4ec:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a4f0:	2100      	movs	r1, #0
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	f000 fdfc 	bl	800b0f0 <hci_send_req>
 800a4f8:	4603      	mov	r3, r0
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	da01      	bge.n	800a502 <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 800a4fe:	23ff      	movs	r3, #255	@ 0xff
 800a500:	e004      	b.n	800a50c <aci_gatt_update_char_value+0x148>
  return status;
 800a502:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a506:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a50a:	781b      	ldrb	r3, [r3, #0]
}
 800a50c:	4618      	mov	r0, r3
 800a50e:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800a512:	46bd      	mov	sp, r7
 800a514:	bdb0      	pop	{r4, r5, r7, pc}

0800a516 <aci_gatt_confirm_indication>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_confirm_indication( uint16_t Connection_Handle )
{
 800a516:	b580      	push	{r7, lr}
 800a518:	b0cc      	sub	sp, #304	@ 0x130
 800a51a:	af00      	add	r7, sp, #0
 800a51c:	4602      	mov	r2, r0
 800a51e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a522:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800a526:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_confirm_indication_cp0 *cp0 = (aci_gatt_confirm_indication_cp0*)(cmd_buffer);
 800a528:	f107 0310 	add.w	r3, r7, #16
 800a52c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800a530:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a534:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a538:	2200      	movs	r2, #0
 800a53a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a53c:	2300      	movs	r3, #0
 800a53e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 800a542:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a546:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a54a:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800a54e:	8812      	ldrh	r2, [r2, #0]
 800a550:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800a552:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a556:	3302      	adds	r3, #2
 800a558:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a55c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a560:	2218      	movs	r2, #24
 800a562:	2100      	movs	r1, #0
 800a564:	4618      	mov	r0, r3
 800a566:	f000 fb39 	bl	800abdc <Osal_MemSet>
  rq.ogf = 0x3f;
 800a56a:	233f      	movs	r3, #63	@ 0x3f
 800a56c:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x125;
 800a570:	f240 1325 	movw	r3, #293	@ 0x125
 800a574:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800a578:	f107 0310 	add.w	r3, r7, #16
 800a57c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800a580:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a584:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800a588:	f107 030f 	add.w	r3, r7, #15
 800a58c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800a590:	2301      	movs	r3, #1
 800a592:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a596:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a59a:	2100      	movs	r1, #0
 800a59c:	4618      	mov	r0, r3
 800a59e:	f000 fda7 	bl	800b0f0 <hci_send_req>
 800a5a2:	4603      	mov	r3, r0
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	da01      	bge.n	800a5ac <aci_gatt_confirm_indication+0x96>
    return BLE_STATUS_TIMEOUT;
 800a5a8:	23ff      	movs	r3, #255	@ 0xff
 800a5aa:	e004      	b.n	800a5b6 <aci_gatt_confirm_indication+0xa0>
  return status;
 800a5ac:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a5b0:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a5b4:	781b      	ldrb	r3, [r3, #0]
}
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800a5bc:	46bd      	mov	sp, r7
 800a5be:	bd80      	pop	{r7, pc}

0800a5c0 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 800a5c0:	b580      	push	{r7, lr}
 800a5c2:	b0cc      	sub	sp, #304	@ 0x130
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a5ca:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800a5ce:	601a      	str	r2, [r3, #0]
 800a5d0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a5d4:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800a5d8:	4602      	mov	r2, r0
 800a5da:	701a      	strb	r2, [r3, #0]
 800a5dc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a5e0:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800a5e4:	460a      	mov	r2, r1
 800a5e6:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 800a5e8:	f107 0310 	add.w	r3, r7, #16
 800a5ec:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800a5f0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a5f4:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a5f8:	2200      	movs	r2, #0
 800a5fa:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Offset = Offset;
 800a602:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a606:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a60a:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800a60e:	7812      	ldrb	r2, [r2, #0]
 800a610:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800a612:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a616:	3301      	adds	r3, #1
 800a618:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Length = Length;
 800a61c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a620:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a624:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800a628:	7812      	ldrb	r2, [r2, #0]
 800a62a:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800a62c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a630:	3301      	adds	r3, #1
 800a632:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 800a636:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a63a:	1c98      	adds	r0, r3, #2
 800a63c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a640:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800a644:	781a      	ldrb	r2, [r3, #0]
 800a646:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a64a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800a64e:	6819      	ldr	r1, [r3, #0]
 800a650:	f000 fab4 	bl	800abbc <Osal_MemCpy>
  index_input += Length;
 800a654:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a658:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800a65c:	781b      	ldrb	r3, [r3, #0]
 800a65e:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800a662:	4413      	add	r3, r2
 800a664:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a668:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a66c:	2218      	movs	r2, #24
 800a66e:	2100      	movs	r1, #0
 800a670:	4618      	mov	r0, r3
 800a672:	f000 fab3 	bl	800abdc <Osal_MemSet>
  rq.ogf = 0x3f;
 800a676:	233f      	movs	r3, #63	@ 0x3f
 800a678:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00c;
 800a67c:	230c      	movs	r3, #12
 800a67e:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800a682:	f107 0310 	add.w	r3, r7, #16
 800a686:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800a68a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a68e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800a692:	f107 030f 	add.w	r3, r7, #15
 800a696:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800a69a:	2301      	movs	r3, #1
 800a69c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a6a0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a6a4:	2100      	movs	r1, #0
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	f000 fd22 	bl	800b0f0 <hci_send_req>
 800a6ac:	4603      	mov	r3, r0
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	da01      	bge.n	800a6b6 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 800a6b2:	23ff      	movs	r3, #255	@ 0xff
 800a6b4:	e004      	b.n	800a6c0 <aci_hal_write_config_data+0x100>
  return status;
 800a6b6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a6ba:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a6be:	781b      	ldrb	r3, [r3, #0]
}
 800a6c0:	4618      	mov	r0, r3
 800a6c2:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800a6c6:	46bd      	mov	sp, r7
 800a6c8:	bd80      	pop	{r7, pc}

0800a6ca <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 800a6ca:	b580      	push	{r7, lr}
 800a6cc:	b0cc      	sub	sp, #304	@ 0x130
 800a6ce:	af00      	add	r7, sp, #0
 800a6d0:	4602      	mov	r2, r0
 800a6d2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a6d6:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800a6da:	701a      	strb	r2, [r3, #0]
 800a6dc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a6e0:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800a6e4:	460a      	mov	r2, r1
 800a6e6:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 800a6e8:	f107 0310 	add.w	r3, r7, #16
 800a6ec:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800a6f0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a6f4:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a6f8:	2200      	movs	r2, #0
 800a6fa:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->En_High_Power = En_High_Power;
 800a702:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a706:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a70a:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800a70e:	7812      	ldrb	r2, [r2, #0]
 800a710:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800a712:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a716:	3301      	adds	r3, #1
 800a718:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->PA_Level = PA_Level;
 800a71c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a720:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a724:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800a728:	7812      	ldrb	r2, [r2, #0]
 800a72a:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800a72c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a730:	3301      	adds	r3, #1
 800a732:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a736:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a73a:	2218      	movs	r2, #24
 800a73c:	2100      	movs	r1, #0
 800a73e:	4618      	mov	r0, r3
 800a740:	f000 fa4c 	bl	800abdc <Osal_MemSet>
  rq.ogf = 0x3f;
 800a744:	233f      	movs	r3, #63	@ 0x3f
 800a746:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00f;
 800a74a:	230f      	movs	r3, #15
 800a74c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800a750:	f107 0310 	add.w	r3, r7, #16
 800a754:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800a758:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a75c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800a760:	f107 030f 	add.w	r3, r7, #15
 800a764:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800a768:	2301      	movs	r3, #1
 800a76a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a76e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a772:	2100      	movs	r1, #0
 800a774:	4618      	mov	r0, r3
 800a776:	f000 fcbb 	bl	800b0f0 <hci_send_req>
 800a77a:	4603      	mov	r3, r0
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	da01      	bge.n	800a784 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 800a780:	23ff      	movs	r3, #255	@ 0xff
 800a782:	e004      	b.n	800a78e <aci_hal_set_tx_power_level+0xc4>
  return status;
 800a784:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a788:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a78c:	781b      	ldrb	r3, [r3, #0]
}
 800a78e:	4618      	mov	r0, r3
 800a790:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800a794:	46bd      	mov	sp, r7
 800a796:	bd80      	pop	{r7, pc}

0800a798 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 800a798:	b580      	push	{r7, lr}
 800a79a:	b0cc      	sub	sp, #304	@ 0x130
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	4602      	mov	r2, r0
 800a7a0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a7a4:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800a7a8:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 800a7aa:	f107 0310 	add.w	r3, r7, #16
 800a7ae:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800a7b2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a7b6:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a7be:	2300      	movs	r3, #0
 800a7c0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 800a7c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a7c8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a7cc:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800a7d0:	8812      	ldrh	r2, [r2, #0]
 800a7d2:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800a7d4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a7d8:	3302      	adds	r3, #2
 800a7da:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a7de:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a7e2:	2218      	movs	r2, #24
 800a7e4:	2100      	movs	r1, #0
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	f000 f9f8 	bl	800abdc <Osal_MemSet>
  rq.ogf = 0x3f;
 800a7ec:	233f      	movs	r3, #63	@ 0x3f
 800a7ee:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x018;
 800a7f2:	2318      	movs	r3, #24
 800a7f4:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800a7f8:	f107 0310 	add.w	r3, r7, #16
 800a7fc:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800a800:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a804:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800a808:	f107 030f 	add.w	r3, r7, #15
 800a80c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800a810:	2301      	movs	r3, #1
 800a812:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a816:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a81a:	2100      	movs	r1, #0
 800a81c:	4618      	mov	r0, r3
 800a81e:	f000 fc67 	bl	800b0f0 <hci_send_req>
 800a822:	4603      	mov	r3, r0
 800a824:	2b00      	cmp	r3, #0
 800a826:	da01      	bge.n	800a82c <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 800a828:	23ff      	movs	r3, #255	@ 0xff
 800a82a:	e004      	b.n	800a836 <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 800a82c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a830:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a834:	781b      	ldrb	r3, [r3, #0]
}
 800a836:	4618      	mov	r0, r3
 800a838:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800a83c:	46bd      	mov	sp, r7
 800a83e:	bd80      	pop	{r7, pc}

0800a840 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 800a840:	b580      	push	{r7, lr}
 800a842:	b088      	sub	sp, #32
 800a844:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800a846:	2300      	movs	r3, #0
 800a848:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a84a:	f107 0308 	add.w	r3, r7, #8
 800a84e:	2218      	movs	r2, #24
 800a850:	2100      	movs	r1, #0
 800a852:	4618      	mov	r0, r3
 800a854:	f000 f9c2 	bl	800abdc <Osal_MemSet>
  rq.ogf = 0x03;
 800a858:	2303      	movs	r3, #3
 800a85a:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 800a85c:	2303      	movs	r3, #3
 800a85e:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800a860:	1dfb      	adds	r3, r7, #7
 800a862:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800a864:	2301      	movs	r3, #1
 800a866:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a868:	f107 0308 	add.w	r3, r7, #8
 800a86c:	2100      	movs	r1, #0
 800a86e:	4618      	mov	r0, r3
 800a870:	f000 fc3e 	bl	800b0f0 <hci_send_req>
 800a874:	4603      	mov	r3, r0
 800a876:	2b00      	cmp	r3, #0
 800a878:	da01      	bge.n	800a87e <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 800a87a:	23ff      	movs	r3, #255	@ 0xff
 800a87c:	e000      	b.n	800a880 <hci_reset+0x40>
  return status;
 800a87e:	79fb      	ldrb	r3, [r7, #7]
}
 800a880:	4618      	mov	r0, r3
 800a882:	3720      	adds	r7, #32
 800a884:	46bd      	mov	sp, r7
 800a886:	bd80      	pop	{r7, pc}

0800a888 <hci_le_read_phy>:
}

tBleStatus hci_le_read_phy( uint16_t Connection_Handle,
                            uint8_t* TX_PHY,
                            uint8_t* RX_PHY )
{
 800a888:	b580      	push	{r7, lr}
 800a88a:	b0ce      	sub	sp, #312	@ 0x138
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800a892:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800a896:	6019      	str	r1, [r3, #0]
 800a898:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800a89c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800a8a0:	601a      	str	r2, [r3, #0]
 800a8a2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800a8a6:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800a8aa:	4602      	mov	r2, r0
 800a8ac:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_read_phy_cp0 *cp0 = (hci_le_read_phy_cp0*)(cmd_buffer);
 800a8ae:	f107 0318 	add.w	r3, r7, #24
 800a8b2:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  hci_le_read_phy_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800a8b6:	f107 0310 	add.w	r3, r7, #16
 800a8ba:	2205      	movs	r2, #5
 800a8bc:	2100      	movs	r1, #0
 800a8be:	4618      	mov	r0, r3
 800a8c0:	f000 f98c 	bl	800abdc <Osal_MemSet>
  int index_input = 0;
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Connection_Handle = Connection_Handle;
 800a8ca:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800a8ce:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800a8d2:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800a8d6:	8812      	ldrh	r2, [r2, #0]
 800a8d8:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800a8da:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800a8de:	3302      	adds	r3, #2
 800a8e0:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a8e4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800a8e8:	2218      	movs	r2, #24
 800a8ea:	2100      	movs	r1, #0
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	f000 f975 	bl	800abdc <Osal_MemSet>
  rq.ogf = 0x08;
 800a8f2:	2308      	movs	r3, #8
 800a8f4:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x030;
 800a8f8:	2330      	movs	r3, #48	@ 0x30
 800a8fa:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.cparam = cmd_buffer;
 800a8fe:	f107 0318 	add.w	r3, r7, #24
 800a902:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 800a906:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800a90a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &resp;
 800a90e:	f107 0310 	add.w	r3, r7, #16
 800a912:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = sizeof(resp);
 800a916:	2305      	movs	r3, #5
 800a918:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a91c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800a920:	2100      	movs	r1, #0
 800a922:	4618      	mov	r0, r3
 800a924:	f000 fbe4 	bl	800b0f0 <hci_send_req>
 800a928:	4603      	mov	r3, r0
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	da01      	bge.n	800a932 <hci_le_read_phy+0xaa>
    return BLE_STATUS_TIMEOUT;
 800a92e:	23ff      	movs	r3, #255	@ 0xff
 800a930:	e023      	b.n	800a97a <hci_le_read_phy+0xf2>
  if ( resp.Status )
 800a932:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800a936:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800a93a:	781b      	ldrb	r3, [r3, #0]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d005      	beq.n	800a94c <hci_le_read_phy+0xc4>
    return resp.Status;
 800a940:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800a944:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800a948:	781b      	ldrb	r3, [r3, #0]
 800a94a:	e016      	b.n	800a97a <hci_le_read_phy+0xf2>
  *TX_PHY = resp.TX_PHY;
 800a94c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800a950:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800a954:	78da      	ldrb	r2, [r3, #3]
 800a956:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800a95a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	701a      	strb	r2, [r3, #0]
  *RX_PHY = resp.RX_PHY;
 800a962:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800a966:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800a96a:	791a      	ldrb	r2, [r3, #4]
 800a96c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800a970:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	701a      	strb	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800a978:	2300      	movs	r3, #0
}
 800a97a:	4618      	mov	r0, r3
 800a97c:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 800a980:	46bd      	mov	sp, r7
 800a982:	bd80      	pop	{r7, pc}

0800a984 <hci_le_set_default_phy>:

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 800a984:	b590      	push	{r4, r7, lr}
 800a986:	b0cd      	sub	sp, #308	@ 0x134
 800a988:	af00      	add	r7, sp, #0
 800a98a:	4604      	mov	r4, r0
 800a98c:	4608      	mov	r0, r1
 800a98e:	4611      	mov	r1, r2
 800a990:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a994:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800a998:	4622      	mov	r2, r4
 800a99a:	701a      	strb	r2, [r3, #0]
 800a99c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a9a0:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800a9a4:	4602      	mov	r2, r0
 800a9a6:	701a      	strb	r2, [r3, #0]
 800a9a8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a9ac:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800a9b0:	460a      	mov	r2, r1
 800a9b2:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 800a9b4:	f107 0310 	add.w	r3, r7, #16
 800a9b8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800a9bc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a9c0:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a9c4:	2200      	movs	r2, #0
 800a9c6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 800a9ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a9d2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a9d6:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800a9da:	7812      	ldrb	r2, [r2, #0]
 800a9dc:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800a9de:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a9e2:	3301      	adds	r3, #1
 800a9e4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->TX_PHYS = TX_PHYS;
 800a9e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a9ec:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a9f0:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800a9f4:	7812      	ldrb	r2, [r2, #0]
 800a9f6:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800a9f8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a9fc:	3301      	adds	r3, #1
 800a9fe:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->RX_PHYS = RX_PHYS;
 800aa02:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800aa06:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800aa0a:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800aa0e:	7812      	ldrb	r2, [r2, #0]
 800aa10:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800aa12:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800aa16:	3301      	adds	r3, #1
 800aa18:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800aa1c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800aa20:	2218      	movs	r2, #24
 800aa22:	2100      	movs	r1, #0
 800aa24:	4618      	mov	r0, r3
 800aa26:	f000 f8d9 	bl	800abdc <Osal_MemSet>
  rq.ogf = 0x08;
 800aa2a:	2308      	movs	r3, #8
 800aa2c:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x031;
 800aa30:	2331      	movs	r3, #49	@ 0x31
 800aa32:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800aa36:	f107 0310 	add.w	r3, r7, #16
 800aa3a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800aa3e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800aa42:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800aa46:	f107 030f 	add.w	r3, r7, #15
 800aa4a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800aa4e:	2301      	movs	r3, #1
 800aa50:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800aa54:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800aa58:	2100      	movs	r1, #0
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	f000 fb48 	bl	800b0f0 <hci_send_req>
 800aa60:	4603      	mov	r3, r0
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	da01      	bge.n	800aa6a <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 800aa66:	23ff      	movs	r3, #255	@ 0xff
 800aa68:	e004      	b.n	800aa74 <hci_le_set_default_phy+0xf0>
  return status;
 800aa6a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800aa6e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800aa72:	781b      	ldrb	r3, [r3, #0]
}
 800aa74:	4618      	mov	r0, r3
 800aa76:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 800aa7a:	46bd      	mov	sp, r7
 800aa7c:	bd90      	pop	{r4, r7, pc}

0800aa7e <aci_l2cap_connection_parameter_update_req>:
tBleStatus aci_l2cap_connection_parameter_update_req( uint16_t Connection_Handle,
                                                      uint16_t Conn_Interval_Min,
                                                      uint16_t Conn_Interval_Max,
                                                      uint16_t Latency,
                                                      uint16_t Timeout_Multiplier )
{
 800aa7e:	b5b0      	push	{r4, r5, r7, lr}
 800aa80:	b0cc      	sub	sp, #304	@ 0x130
 800aa82:	af00      	add	r7, sp, #0
 800aa84:	4605      	mov	r5, r0
 800aa86:	460c      	mov	r4, r1
 800aa88:	4610      	mov	r0, r2
 800aa8a:	4619      	mov	r1, r3
 800aa8c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800aa90:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800aa94:	462a      	mov	r2, r5
 800aa96:	801a      	strh	r2, [r3, #0]
 800aa98:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800aa9c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800aaa0:	4622      	mov	r2, r4
 800aaa2:	801a      	strh	r2, [r3, #0]
 800aaa4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800aaa8:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800aaac:	4602      	mov	r2, r0
 800aaae:	801a      	strh	r2, [r3, #0]
 800aab0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800aab4:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800aab8:	460a      	mov	r2, r1
 800aaba:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_l2cap_connection_parameter_update_req_cp0 *cp0 = (aci_l2cap_connection_parameter_update_req_cp0*)(cmd_buffer);
 800aabc:	f107 0310 	add.w	r3, r7, #16
 800aac0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800aac4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800aac8:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800aacc:	2200      	movs	r2, #0
 800aace:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800aad0:	2300      	movs	r3, #0
 800aad2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 800aad6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800aada:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800aade:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800aae2:	8812      	ldrh	r2, [r2, #0]
 800aae4:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800aae6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800aaea:	3302      	adds	r3, #2
 800aaec:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Conn_Interval_Min = Conn_Interval_Min;
 800aaf0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800aaf4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800aaf8:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 800aafc:	8812      	ldrh	r2, [r2, #0]
 800aafe:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800ab00:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ab04:	3302      	adds	r3, #2
 800ab06:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Conn_Interval_Max = Conn_Interval_Max;
 800ab0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800ab0e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800ab12:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 800ab16:	8812      	ldrh	r2, [r2, #0]
 800ab18:	809a      	strh	r2, [r3, #4]
  index_input += 2;
 800ab1a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ab1e:	3302      	adds	r3, #2
 800ab20:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Latency = Latency;
 800ab24:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800ab28:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800ab2c:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 800ab30:	8812      	ldrh	r2, [r2, #0]
 800ab32:	80da      	strh	r2, [r3, #6]
  index_input += 2;
 800ab34:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ab38:	3302      	adds	r3, #2
 800ab3a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Timeout_Multiplier = Timeout_Multiplier;
 800ab3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800ab42:	f8b7 2140 	ldrh.w	r2, [r7, #320]	@ 0x140
 800ab46:	811a      	strh	r2, [r3, #8]
  index_input += 2;
 800ab48:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ab4c:	3302      	adds	r3, #2
 800ab4e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800ab52:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ab56:	2218      	movs	r2, #24
 800ab58:	2100      	movs	r1, #0
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	f000 f83e 	bl	800abdc <Osal_MemSet>
  rq.ogf = 0x3f;
 800ab60:	233f      	movs	r3, #63	@ 0x3f
 800ab62:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x181;
 800ab66:	f240 1381 	movw	r3, #385	@ 0x181
 800ab6a:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.event = 0x0F;
 800ab6e:	230f      	movs	r3, #15
 800ab70:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  rq.cparam = cmd_buffer;
 800ab74:	f107 0310 	add.w	r3, r7, #16
 800ab78:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800ab7c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ab80:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800ab84:	f107 030f 	add.w	r3, r7, #15
 800ab88:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800ab8c:	2301      	movs	r3, #1
 800ab8e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800ab92:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ab96:	2100      	movs	r1, #0
 800ab98:	4618      	mov	r0, r3
 800ab9a:	f000 faa9 	bl	800b0f0 <hci_send_req>
 800ab9e:	4603      	mov	r3, r0
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	da01      	bge.n	800aba8 <aci_l2cap_connection_parameter_update_req+0x12a>
    return BLE_STATUS_TIMEOUT;
 800aba4:	23ff      	movs	r3, #255	@ 0xff
 800aba6:	e004      	b.n	800abb2 <aci_l2cap_connection_parameter_update_req+0x134>
  return status;
 800aba8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800abac:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800abb0:	781b      	ldrb	r3, [r3, #0]
}
 800abb2:	4618      	mov	r0, r3
 800abb4:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800abb8:	46bd      	mov	sp, r7
 800abba:	bdb0      	pop	{r4, r5, r7, pc}

0800abbc <Osal_MemCpy>:
 * Osal_MemCpy
 *
 */

void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 800abbc:	b580      	push	{r7, lr}
 800abbe:	b084      	sub	sp, #16
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	60f8      	str	r0, [r7, #12]
 800abc4:	60b9      	str	r1, [r7, #8]
 800abc6:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size );
 800abc8:	687a      	ldr	r2, [r7, #4]
 800abca:	68b9      	ldr	r1, [r7, #8]
 800abcc:	68f8      	ldr	r0, [r7, #12]
 800abce:	f004 f868 	bl	800eca2 <memcpy>
 800abd2:	4603      	mov	r3, r0
}
 800abd4:	4618      	mov	r0, r3
 800abd6:	3710      	adds	r7, #16
 800abd8:	46bd      	mov	sp, r7
 800abda:	bd80      	pop	{r7, pc}

0800abdc <Osal_MemSet>:
 * Osal_MemSet
 *
 */

void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 800abdc:	b580      	push	{r7, lr}
 800abde:	b084      	sub	sp, #16
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	60f8      	str	r0, [r7, #12]
 800abe4:	60b9      	str	r1, [r7, #8]
 800abe6:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 800abe8:	687a      	ldr	r2, [r7, #4]
 800abea:	68b9      	ldr	r1, [r7, #8]
 800abec:	68f8      	ldr	r0, [r7, #12]
 800abee:	f003 ffe3 	bl	800ebb8 <memset>
 800abf2:	4603      	mov	r3, r0
}
 800abf4:	4618      	mov	r0, r3
 800abf6:	3710      	adds	r7, #16
 800abf8:	46bd      	mov	sp, r7
 800abfa:	bd80      	pop	{r7, pc}

0800abfc <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 800abfc:	b480      	push	{r7}
 800abfe:	af00      	add	r7, sp, #0
  return;
 800ac00:	bf00      	nop
}
 800ac02:	46bd      	mov	sp, r7
 800ac04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac08:	4770      	bx	lr

0800ac0a <BLS_Init>:

__WEAK void BLS_Init( void )
{
 800ac0a:	b480      	push	{r7}
 800ac0c:	af00      	add	r7, sp, #0
  return;
 800ac0e:	bf00      	nop
}
 800ac10:	46bd      	mov	sp, r7
 800ac12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac16:	4770      	bx	lr

0800ac18 <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 800ac18:	b480      	push	{r7}
 800ac1a:	af00      	add	r7, sp, #0
  return;
 800ac1c:	bf00      	nop
}
 800ac1e:	46bd      	mov	sp, r7
 800ac20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac24:	4770      	bx	lr

0800ac26 <DIS_Init>:
__WEAK void DIS_Init( void )
{
 800ac26:	b480      	push	{r7}
 800ac28:	af00      	add	r7, sp, #0
  return;
 800ac2a:	bf00      	nop
}
 800ac2c:	46bd      	mov	sp, r7
 800ac2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac32:	4770      	bx	lr

0800ac34 <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 800ac34:	b480      	push	{r7}
 800ac36:	af00      	add	r7, sp, #0
  return;
 800ac38:	bf00      	nop
}
 800ac3a:	46bd      	mov	sp, r7
 800ac3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac40:	4770      	bx	lr

0800ac42 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 800ac42:	b480      	push	{r7}
 800ac44:	af00      	add	r7, sp, #0
  return;
 800ac46:	bf00      	nop
}
 800ac48:	46bd      	mov	sp, r7
 800ac4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac4e:	4770      	bx	lr

0800ac50 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 800ac50:	b480      	push	{r7}
 800ac52:	af00      	add	r7, sp, #0
  return;
 800ac54:	bf00      	nop
}
 800ac56:	46bd      	mov	sp, r7
 800ac58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac5c:	4770      	bx	lr

0800ac5e <HTS_Init>:
__WEAK void HTS_Init( void )
{
 800ac5e:	b480      	push	{r7}
 800ac60:	af00      	add	r7, sp, #0
  return;
 800ac62:	bf00      	nop
}
 800ac64:	46bd      	mov	sp, r7
 800ac66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6a:	4770      	bx	lr

0800ac6c <IAS_Init>:
__WEAK void IAS_Init( void )
{
 800ac6c:	b480      	push	{r7}
 800ac6e:	af00      	add	r7, sp, #0
  return;
 800ac70:	bf00      	nop
}
 800ac72:	46bd      	mov	sp, r7
 800ac74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac78:	4770      	bx	lr

0800ac7a <LLS_Init>:
__WEAK void LLS_Init( void )
{
 800ac7a:	b480      	push	{r7}
 800ac7c:	af00      	add	r7, sp, #0
  return;
 800ac7e:	bf00      	nop
}
 800ac80:	46bd      	mov	sp, r7
 800ac82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac86:	4770      	bx	lr

0800ac88 <TPS_Init>:
__WEAK void TPS_Init( void )
{
 800ac88:	b480      	push	{r7}
 800ac8a:	af00      	add	r7, sp, #0
  return;
 800ac8c:	bf00      	nop
}
 800ac8e:	46bd      	mov	sp, r7
 800ac90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac94:	4770      	bx	lr

0800ac96 <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 800ac96:	b480      	push	{r7}
 800ac98:	af00      	add	r7, sp, #0
  return;
 800ac9a:	bf00      	nop
}
 800ac9c:	46bd      	mov	sp, r7
 800ac9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca2:	4770      	bx	lr

0800aca4 <ZDD_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
  return;
}
__WEAK void ZDD_STM_Init( void )
{
 800aca4:	b480      	push	{r7}
 800aca6:	af00      	add	r7, sp, #0
  return;
 800aca8:	bf00      	nop
}
 800acaa:	46bd      	mov	sp, r7
 800acac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb0:	4770      	bx	lr

0800acb2 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 800acb2:	b480      	push	{r7}
 800acb4:	af00      	add	r7, sp, #0
  return;
 800acb6:	bf00      	nop
}
 800acb8:	46bd      	mov	sp, r7
 800acba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acbe:	4770      	bx	lr

0800acc0 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 800acc0:	b480      	push	{r7}
 800acc2:	af00      	add	r7, sp, #0
  return;
 800acc4:	bf00      	nop
}
 800acc6:	46bd      	mov	sp, r7
 800acc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800accc:	4770      	bx	lr

0800acce <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 800acce:	b480      	push	{r7}
 800acd0:	af00      	add	r7, sp, #0
  return;
 800acd2:	bf00      	nop
}
 800acd4:	46bd      	mov	sp, r7
 800acd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acda:	4770      	bx	lr

0800acdc <SVCCTL_InitCustomSvc>:
__WEAK void SVCCTL_InitCustomSvc( void )
{
 800acdc:	b480      	push	{r7}
 800acde:	af00      	add	r7, sp, #0
  return;
 800ace0:	bf00      	nop
}
 800ace2:	46bd      	mov	sp, r7
 800ace4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace8:	4770      	bx	lr
	...

0800acec <SVCCTL_Init>:

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 800acec:	b580      	push	{r7, lr}
 800acee:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 800acf0:	4b04      	ldr	r3, [pc, #16]	@ (800ad04 <SVCCTL_Init+0x18>)
 800acf2:	2200      	movs	r2, #0
 800acf4:	711a      	strb	r2, [r3, #4]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800acf6:	4b04      	ldr	r3, [pc, #16]	@ (800ad08 <SVCCTL_Init+0x1c>)
 800acf8:	2200      	movs	r2, #0
 800acfa:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 800acfc:	f000 f806 	bl	800ad0c <SVCCTL_SvcInit>

  return;
 800ad00:	bf00      	nop
}
 800ad02:	bd80      	pop	{r7, pc}
 800ad04:	20000088 	.word	0x20000088
 800ad08:	20000090 	.word	0x20000090

0800ad0c <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 800ad0c:	b580      	push	{r7, lr}
 800ad0e:	af00      	add	r7, sp, #0
  BAS_Init();
 800ad10:	f7ff ff74 	bl	800abfc <BAS_Init>

  BLS_Init();
 800ad14:	f7ff ff79 	bl	800ac0a <BLS_Init>

  CRS_STM_Init();
 800ad18:	f7ff ff7e 	bl	800ac18 <CRS_STM_Init>

  DIS_Init();
 800ad1c:	f7ff ff83 	bl	800ac26 <DIS_Init>

  EDS_STM_Init();
 800ad20:	f7ff ff88 	bl	800ac34 <EDS_STM_Init>

  HIDS_Init();
 800ad24:	f7ff ff8d 	bl	800ac42 <HIDS_Init>

  HRS_Init();
 800ad28:	f7ff ff92 	bl	800ac50 <HRS_Init>

  HTS_Init();
 800ad2c:	f7ff ff97 	bl	800ac5e <HTS_Init>

  IAS_Init();
 800ad30:	f7ff ff9c 	bl	800ac6c <IAS_Init>

  LLS_Init();
 800ad34:	f7ff ffa1 	bl	800ac7a <LLS_Init>

  TPS_Init();
 800ad38:	f7ff ffa6 	bl	800ac88 <TPS_Init>

  MOTENV_STM_Init();
 800ad3c:	f7ff ffab 	bl	800ac96 <MOTENV_STM_Init>


  //P2PS_STM_Init();
  Hermes_App_Init();
 800ad40:	f001 fd3c 	bl	800c7bc <Hermes_App_Init>

  ZDD_STM_Init();
 800ad44:	f7ff ffae 	bl	800aca4 <ZDD_STM_Init>

  OTAS_STM_Init();
 800ad48:	f7ff ffb3 	bl	800acb2 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 800ad4c:	f7ff ffbf 	bl	800acce <BVOPUS_STM_Init>

  MESH_Init();
 800ad50:	f7ff ffb6 	bl	800acc0 <MESH_Init>

  SVCCTL_InitCustomSvc();
 800ad54:	f7ff ffc2 	bl	800acdc <SVCCTL_InitCustomSvc>
  
  return;
 800ad58:	bf00      	nop
}
 800ad5a:	bd80      	pop	{r7, pc}

0800ad5c <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 800ad5c:	b480      	push	{r7}
 800ad5e:	b083      	sub	sp, #12
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 800ad64:	4b09      	ldr	r3, [pc, #36]	@ (800ad8c <SVCCTL_RegisterSvcHandler+0x30>)
 800ad66:	791b      	ldrb	r3, [r3, #4]
 800ad68:	4619      	mov	r1, r3
 800ad6a:	4a08      	ldr	r2, [pc, #32]	@ (800ad8c <SVCCTL_RegisterSvcHandler+0x30>)
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 800ad72:	4b06      	ldr	r3, [pc, #24]	@ (800ad8c <SVCCTL_RegisterSvcHandler+0x30>)
 800ad74:	791b      	ldrb	r3, [r3, #4]
 800ad76:	3301      	adds	r3, #1
 800ad78:	b2da      	uxtb	r2, r3
 800ad7a:	4b04      	ldr	r3, [pc, #16]	@ (800ad8c <SVCCTL_RegisterSvcHandler+0x30>)
 800ad7c:	711a      	strb	r2, [r3, #4]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 800ad7e:	bf00      	nop
}
 800ad80:	370c      	adds	r7, #12
 800ad82:	46bd      	mov	sp, r7
 800ad84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad88:	4770      	bx	lr
 800ad8a:	bf00      	nop
 800ad8c:	20000088 	.word	0x20000088

0800ad90 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 800ad90:	b580      	push	{r7, lr}
 800ad92:	b086      	sub	sp, #24
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	3301      	adds	r3, #1
 800ad9c:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800ad9e:	2300      	movs	r3, #0
 800ada0:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 800ada2:	693b      	ldr	r3, [r7, #16]
 800ada4:	781b      	ldrb	r3, [r3, #0]
 800ada6:	2bff      	cmp	r3, #255	@ 0xff
 800ada8:	d125      	bne.n	800adf6 <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 800adaa:	693b      	ldr	r3, [r7, #16]
 800adac:	3302      	adds	r3, #2
 800adae:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	881b      	ldrh	r3, [r3, #0]
 800adb4:	b29b      	uxth	r3, r3
 800adb6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800adba:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800adbe:	d118      	bne.n	800adf2 <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800adc0:	2300      	movs	r3, #0
 800adc2:	757b      	strb	r3, [r7, #21]
 800adc4:	e00d      	b.n	800ade2 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800adc6:	7d7b      	ldrb	r3, [r7, #21]
 800adc8:	4a1a      	ldr	r2, [pc, #104]	@ (800ae34 <SVCCTL_UserEvtRx+0xa4>)
 800adca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800adce:	6878      	ldr	r0, [r7, #4]
 800add0:	4798      	blx	r3
 800add2:	4603      	mov	r3, r0
 800add4:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 800add6:	7dfb      	ldrb	r3, [r7, #23]
 800add8:	2b00      	cmp	r3, #0
 800adda:	d108      	bne.n	800adee <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800addc:	7d7b      	ldrb	r3, [r7, #21]
 800adde:	3301      	adds	r3, #1
 800ade0:	757b      	strb	r3, [r7, #21]
 800ade2:	4b14      	ldr	r3, [pc, #80]	@ (800ae34 <SVCCTL_UserEvtRx+0xa4>)
 800ade4:	791b      	ldrb	r3, [r3, #4]
 800ade6:	7d7a      	ldrb	r2, [r7, #21]
 800ade8:	429a      	cmp	r2, r3
 800adea:	d3ec      	bcc.n	800adc6 <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 800adec:	e002      	b.n	800adf4 <SVCCTL_UserEvtRx+0x64>
              break;
 800adee:	bf00      	nop
          break;
 800adf0:	e000      	b.n	800adf4 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 800adf2:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 800adf4:	e000      	b.n	800adf8 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 800adf6:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 800adf8:	7dfb      	ldrb	r3, [r7, #23]
 800adfa:	2b02      	cmp	r3, #2
 800adfc:	d00f      	beq.n	800ae1e <SVCCTL_UserEvtRx+0x8e>
 800adfe:	2b02      	cmp	r3, #2
 800ae00:	dc10      	bgt.n	800ae24 <SVCCTL_UserEvtRx+0x94>
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d002      	beq.n	800ae0c <SVCCTL_UserEvtRx+0x7c>
 800ae06:	2b01      	cmp	r3, #1
 800ae08:	d006      	beq.n	800ae18 <SVCCTL_UserEvtRx+0x88>
 800ae0a:	e00b      	b.n	800ae24 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 800ae0c:	6878      	ldr	r0, [r7, #4]
 800ae0e:	f001 fefd 	bl	800cc0c <SVCCTL_App_Notification>
 800ae12:	4603      	mov	r3, r0
 800ae14:	75bb      	strb	r3, [r7, #22]
      break;
 800ae16:	e008      	b.n	800ae2a <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 800ae18:	2301      	movs	r3, #1
 800ae1a:	75bb      	strb	r3, [r7, #22]
      break;
 800ae1c:	e005      	b.n	800ae2a <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 800ae1e:	2300      	movs	r3, #0
 800ae20:	75bb      	strb	r3, [r7, #22]
      break;
 800ae22:	e002      	b.n	800ae2a <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 800ae24:	2301      	movs	r3, #1
 800ae26:	75bb      	strb	r3, [r7, #22]
      break;
 800ae28:	bf00      	nop
  }

  return (return_status);
 800ae2a:	7dbb      	ldrb	r3, [r7, #22]
}
 800ae2c:	4618      	mov	r0, r3
 800ae2e:	3718      	adds	r7, #24
 800ae30:	46bd      	mov	sp, r7
 800ae32:	bd80      	pop	{r7, pc}
 800ae34:	20000088 	.word	0x20000088

0800ae38 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 800ae38:	b580      	push	{r7, lr}
 800ae3a:	b088      	sub	sp, #32
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800ae40:	f107 030c 	add.w	r3, r7, #12
 800ae44:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 800ae4c:	69fb      	ldr	r3, [r7, #28]
 800ae4e:	212e      	movs	r1, #46	@ 0x2e
 800ae50:	f64f 4066 	movw	r0, #64614	@ 0xfc66
 800ae54:	f000 fae8 	bl	800b428 <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800ae58:	69fb      	ldr	r3, [r7, #28]
 800ae5a:	330b      	adds	r3, #11
 800ae5c:	78db      	ldrb	r3, [r3, #3]
}
 800ae5e:	4618      	mov	r0, r3
 800ae60:	3720      	adds	r7, #32
 800ae62:	46bd      	mov	sp, r7
 800ae64:	bd80      	pop	{r7, pc}

0800ae66 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 800ae66:	b580      	push	{r7, lr}
 800ae68:	b088      	sub	sp, #32
 800ae6a:	af00      	add	r7, sp, #0
 800ae6c:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800ae6e:	f107 030c 	add.w	r3, r7, #12
 800ae72:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 800ae7a:	69fb      	ldr	r3, [r7, #28]
 800ae7c:	210f      	movs	r1, #15
 800ae7e:	f64f 4068 	movw	r0, #64616	@ 0xfc68
 800ae82:	f000 fad1 	bl	800b428 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800ae86:	69fb      	ldr	r3, [r7, #28]
 800ae88:	330b      	adds	r3, #11
 800ae8a:	78db      	ldrb	r3, [r3, #3]
}
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	3720      	adds	r7, #32
 800ae90:	46bd      	mov	sp, r7
 800ae92:	bd80      	pop	{r7, pc}

0800ae94 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 800ae94:	b580      	push	{r7, lr}
 800ae96:	b088      	sub	sp, #32
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800ae9c:	f107 030c 	add.w	r3, r7, #12
 800aea0:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 800aea2:	69fb      	ldr	r3, [r7, #28]
 800aea4:	687a      	ldr	r2, [r7, #4]
 800aea6:	2110      	movs	r1, #16
 800aea8:	f64f 4075 	movw	r0, #64629	@ 0xfc75
 800aeac:	f000 fabc 	bl	800b428 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800aeb0:	69fb      	ldr	r3, [r7, #28]
 800aeb2:	330b      	adds	r3, #11
 800aeb4:	78db      	ldrb	r3, [r3, #3]
}
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	3720      	adds	r7, #32
 800aeba:	46bd      	mov	sp, r7
 800aebc:	bd80      	pop	{r7, pc}
	...

0800aec0 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 800aec0:	b480      	push	{r7}
 800aec2:	b08b      	sub	sp, #44	@ 0x2c
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 800aec8:	2300      	movs	r3, #0
 800aeca:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 800aecc:	2300      	movs	r3, #0
 800aece:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 800aed0:	2300      	movs	r3, #0
 800aed2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t wireless_firmware_memorySize = 0;
 800aed4:	2300      	movs	r3, #0
 800aed6:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 800aed8:	2300      	movs	r3, #0
 800aeda:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 800aedc:	2300      	movs	r3, #0
 800aede:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 800aee0:	2300      	movs	r3, #0
 800aee2:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 800aee4:	2300      	movs	r3, #0
 800aee6:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 800aee8:	4b4a      	ldr	r3, [pc, #296]	@ (800b014 <SHCI_GetWirelessFwInfo+0x154>)
 800aeea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aeec:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800aef0:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 800aef2:	693b      	ldr	r3, [r7, #16]
 800aef4:	009b      	lsls	r3, r3, #2
 800aef6:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 800aefa:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 800af02:	68bb      	ldr	r3, [r7, #8]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	4a44      	ldr	r2, [pc, #272]	@ (800b018 <SHCI_GetWirelessFwInfo+0x158>)
 800af08:	4293      	cmp	r3, r2
 800af0a:	d10f      	bne.n	800af2c <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 800af0c:	68bb      	ldr	r3, [r7, #8]
 800af0e:	695b      	ldr	r3, [r3, #20]
 800af10:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 800af12:	68bb      	ldr	r3, [r7, #8]
 800af14:	699b      	ldr	r3, [r3, #24]
 800af16:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 800af18:	68bb      	ldr	r3, [r7, #8]
 800af1a:	69db      	ldr	r3, [r3, #28]
 800af1c:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 800af1e:	68bb      	ldr	r3, [r7, #8]
 800af20:	68db      	ldr	r3, [r3, #12]
 800af22:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 800af24:	68bb      	ldr	r3, [r7, #8]
 800af26:	691b      	ldr	r3, [r3, #16]
 800af28:	617b      	str	r3, [r7, #20]
 800af2a:	e01a      	b.n	800af62 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 800af2c:	693b      	ldr	r3, [r7, #16]
 800af2e:	009b      	lsls	r3, r3, #2
 800af30:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 800af34:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 800af38:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	691b      	ldr	r3, [r3, #16]
 800af40:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	695b      	ldr	r3, [r3, #20]
 800af48:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	699b      	ldr	r3, [r3, #24]
 800af50:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	685b      	ldr	r3, [r3, #4]
 800af58:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	689b      	ldr	r3, [r3, #8]
 800af60:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800af62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af64:	0e1b      	lsrs	r3, r3, #24
 800af66:	b2da      	uxtb	r2, r3
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800af6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af6e:	0c1b      	lsrs	r3, r3, #16
 800af70:	b2da      	uxtb	r2, r3
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800af76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af78:	0a1b      	lsrs	r3, r3, #8
 800af7a:	b2da      	uxtb	r2, r3
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 800af80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af82:	091b      	lsrs	r3, r3, #4
 800af84:	b2db      	uxtb	r3, r3
 800af86:	f003 030f 	and.w	r3, r3, #15
 800af8a:	b2da      	uxtb	r2, r3
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 800af90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af92:	b2db      	uxtb	r3, r3
 800af94:	f003 030f 	and.w	r3, r3, #15
 800af98:	b2da      	uxtb	r2, r3
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800af9e:	6a3b      	ldr	r3, [r7, #32]
 800afa0:	0e1b      	lsrs	r3, r3, #24
 800afa2:	b2da      	uxtb	r2, r3
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800afa8:	6a3b      	ldr	r3, [r7, #32]
 800afaa:	0c1b      	lsrs	r3, r3, #16
 800afac:	b2da      	uxtb	r2, r3
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 800afb2:	6a3b      	ldr	r3, [r7, #32]
 800afb4:	0a1b      	lsrs	r3, r3, #8
 800afb6:	b2da      	uxtb	r2, r3
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800afbc:	6a3b      	ldr	r3, [r7, #32]
 800afbe:	b2da      	uxtb	r2, r3
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 800afc4:	69fb      	ldr	r3, [r7, #28]
 800afc6:	b2da      	uxtb	r2, r3
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800afcc:	69bb      	ldr	r3, [r7, #24]
 800afce:	0e1b      	lsrs	r3, r3, #24
 800afd0:	b2da      	uxtb	r2, r3
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800afd6:	69bb      	ldr	r3, [r7, #24]
 800afd8:	0c1b      	lsrs	r3, r3, #16
 800afda:	b2da      	uxtb	r2, r3
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800afe0:	69bb      	ldr	r3, [r7, #24]
 800afe2:	0a1b      	lsrs	r3, r3, #8
 800afe4:	b2da      	uxtb	r2, r3
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800afea:	697b      	ldr	r3, [r7, #20]
 800afec:	0e1b      	lsrs	r3, r3, #24
 800afee:	b2da      	uxtb	r2, r3
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800aff4:	697b      	ldr	r3, [r7, #20]
 800aff6:	0c1b      	lsrs	r3, r3, #16
 800aff8:	b2da      	uxtb	r2, r3
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800affe:	697b      	ldr	r3, [r7, #20]
 800b000:	b2da      	uxtb	r2, r3
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 800b006:	2300      	movs	r3, #0
}
 800b008:	4618      	mov	r0, r3
 800b00a:	372c      	adds	r7, #44	@ 0x2c
 800b00c:	46bd      	mov	sp, r7
 800b00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b012:	4770      	bx	lr
 800b014:	58004000 	.word	0x58004000
 800b018:	a94656b9 	.word	0xa94656b9

0800b01c <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800b01c:	b580      	push	{r7, lr}
 800b01e:	b082      	sub	sp, #8
 800b020:	af00      	add	r7, sp, #0
 800b022:	6078      	str	r0, [r7, #4]
 800b024:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800b026:	683b      	ldr	r3, [r7, #0]
 800b028:	685b      	ldr	r3, [r3, #4]
 800b02a:	4a08      	ldr	r2, [pc, #32]	@ (800b04c <hci_init+0x30>)
 800b02c:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 800b02e:	4a08      	ldr	r2, [pc, #32]	@ (800b050 <hci_init+0x34>)
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 800b034:	4806      	ldr	r0, [pc, #24]	@ (800b050 <hci_init+0x34>)
 800b036:	f000 f979 	bl	800b32c <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800b03a:	683b      	ldr	r3, [r7, #0]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	4618      	mov	r0, r3
 800b040:	f000 f8da 	bl	800b1f8 <TlInit>

  return;
 800b044:	bf00      	nop
}
 800b046:	3708      	adds	r7, #8
 800b048:	46bd      	mov	sp, r7
 800b04a:	bd80      	pop	{r7, pc}
 800b04c:	20000468 	.word	0x20000468
 800b050:	20000440 	.word	0x20000440

0800b054 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800b054:	b580      	push	{r7, lr}
 800b056:	b084      	sub	sp, #16
 800b058:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800b05a:	4822      	ldr	r0, [pc, #136]	@ (800b0e4 <hci_user_evt_proc+0x90>)
 800b05c:	f000 fdd2 	bl	800bc04 <LST_is_empty>
 800b060:	4603      	mov	r3, r0
 800b062:	2b00      	cmp	r3, #0
 800b064:	d12b      	bne.n	800b0be <hci_user_evt_proc+0x6a>
 800b066:	4b20      	ldr	r3, [pc, #128]	@ (800b0e8 <hci_user_evt_proc+0x94>)
 800b068:	781b      	ldrb	r3, [r3, #0]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d027      	beq.n	800b0be <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800b06e:	f107 030c 	add.w	r3, r7, #12
 800b072:	4619      	mov	r1, r3
 800b074:	481b      	ldr	r0, [pc, #108]	@ (800b0e4 <hci_user_evt_proc+0x90>)
 800b076:	f000 fe54 	bl	800bd22 <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800b07a:	4b1c      	ldr	r3, [pc, #112]	@ (800b0ec <hci_user_evt_proc+0x98>)
 800b07c:	69db      	ldr	r3, [r3, #28]
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d00c      	beq.n	800b09c <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 800b086:	2301      	movs	r3, #1
 800b088:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800b08a:	4b18      	ldr	r3, [pc, #96]	@ (800b0ec <hci_user_evt_proc+0x98>)
 800b08c:	69db      	ldr	r3, [r3, #28]
 800b08e:	1d3a      	adds	r2, r7, #4
 800b090:	4610      	mov	r0, r2
 800b092:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 800b094:	793a      	ldrb	r2, [r7, #4]
 800b096:	4b14      	ldr	r3, [pc, #80]	@ (800b0e8 <hci_user_evt_proc+0x94>)
 800b098:	701a      	strb	r2, [r3, #0]
 800b09a:	e002      	b.n	800b0a2 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800b09c:	4b12      	ldr	r3, [pc, #72]	@ (800b0e8 <hci_user_evt_proc+0x94>)
 800b09e:	2201      	movs	r2, #1
 800b0a0:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 800b0a2:	4b11      	ldr	r3, [pc, #68]	@ (800b0e8 <hci_user_evt_proc+0x94>)
 800b0a4:	781b      	ldrb	r3, [r3, #0]
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d004      	beq.n	800b0b4 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	4618      	mov	r0, r3
 800b0ae:	f000 fc0d 	bl	800b8cc <TL_MM_EvtDone>
 800b0b2:	e004      	b.n	800b0be <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	4619      	mov	r1, r3
 800b0b8:	480a      	ldr	r0, [pc, #40]	@ (800b0e4 <hci_user_evt_proc+0x90>)
 800b0ba:	f000 fdc5 	bl	800bc48 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800b0be:	4809      	ldr	r0, [pc, #36]	@ (800b0e4 <hci_user_evt_proc+0x90>)
 800b0c0:	f000 fda0 	bl	800bc04 <LST_is_empty>
 800b0c4:	4603      	mov	r3, r0
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d107      	bne.n	800b0da <hci_user_evt_proc+0x86>
 800b0ca:	4b07      	ldr	r3, [pc, #28]	@ (800b0e8 <hci_user_evt_proc+0x94>)
 800b0cc:	781b      	ldrb	r3, [r3, #0]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d003      	beq.n	800b0da <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 800b0d2:	4804      	ldr	r0, [pc, #16]	@ (800b0e4 <hci_user_evt_proc+0x90>)
 800b0d4:	f002 fbf0 	bl	800d8b8 <hci_notify_asynch_evt>
  }


  return;
 800b0d8:	bf00      	nop
 800b0da:	bf00      	nop
}
 800b0dc:	3710      	adds	r7, #16
 800b0de:	46bd      	mov	sp, r7
 800b0e0:	bd80      	pop	{r7, pc}
 800b0e2:	bf00      	nop
 800b0e4:	20000098 	.word	0x20000098
 800b0e8:	200000a4 	.word	0x200000a4
 800b0ec:	20000440 	.word	0x20000440

0800b0f0 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 800b0f0:	b580      	push	{r7, lr}
 800b0f2:	b088      	sub	sp, #32
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	6078      	str	r0, [r7, #4]
 800b0f8:	460b      	mov	r3, r1
 800b0fa:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 800b0fc:	2000      	movs	r0, #0
 800b0fe:	f000 f8d1 	bl	800b2a4 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 800b102:	2300      	movs	r3, #0
 800b104:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	885b      	ldrh	r3, [r3, #2]
 800b10a:	b21b      	sxth	r3, r3
 800b10c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b110:	b21a      	sxth	r2, r3
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	881b      	ldrh	r3, [r3, #0]
 800b116:	029b      	lsls	r3, r3, #10
 800b118:	b21b      	sxth	r3, r3
 800b11a:	4313      	orrs	r3, r2
 800b11c:	b21b      	sxth	r3, r3
 800b11e:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 800b120:	4b33      	ldr	r3, [pc, #204]	@ (800b1f0 <hci_send_req+0x100>)
 800b122:	2201      	movs	r2, #1
 800b124:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	68db      	ldr	r3, [r3, #12]
 800b12a:	b2d9      	uxtb	r1, r3
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	689a      	ldr	r2, [r3, #8]
 800b130:	8bbb      	ldrh	r3, [r7, #28]
 800b132:	4618      	mov	r0, r3
 800b134:	f000 f890 	bl	800b258 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 800b138:	e04e      	b.n	800b1d8 <hci_send_req+0xe8>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 800b13a:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 800b13e:	f002 fbd2 	bl	800d8e6 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800b142:	e043      	b.n	800b1cc <hci_send_req+0xdc>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 800b144:	f107 030c 	add.w	r3, r7, #12
 800b148:	4619      	mov	r1, r3
 800b14a:	482a      	ldr	r0, [pc, #168]	@ (800b1f4 <hci_send_req+0x104>)
 800b14c:	f000 fde9 	bl	800bd22 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	7a5b      	ldrb	r3, [r3, #9]
 800b154:	2b0f      	cmp	r3, #15
 800b156:	d114      	bne.n	800b182 <hci_send_req+0x92>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	330b      	adds	r3, #11
 800b15c:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 800b15e:	693b      	ldr	r3, [r7, #16]
 800b160:	885b      	ldrh	r3, [r3, #2]
 800b162:	b29b      	uxth	r3, r3
 800b164:	8bba      	ldrh	r2, [r7, #28]
 800b166:	429a      	cmp	r2, r3
 800b168:	d104      	bne.n	800b174 <hci_send_req+0x84>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	691b      	ldr	r3, [r3, #16]
 800b16e:	693a      	ldr	r2, [r7, #16]
 800b170:	7812      	ldrb	r2, [r2, #0]
 800b172:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 800b174:	693b      	ldr	r3, [r7, #16]
 800b176:	785b      	ldrb	r3, [r3, #1]
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d027      	beq.n	800b1cc <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800b17c:	2301      	movs	r3, #1
 800b17e:	77fb      	strb	r3, [r7, #31]
 800b180:	e024      	b.n	800b1cc <hci_send_req+0xdc>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	330b      	adds	r3, #11
 800b186:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 800b188:	69bb      	ldr	r3, [r7, #24]
 800b18a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800b18e:	b29b      	uxth	r3, r3
 800b190:	8bba      	ldrh	r2, [r7, #28]
 800b192:	429a      	cmp	r2, r3
 800b194:	d114      	bne.n	800b1c0 <hci_send_req+0xd0>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	7a9b      	ldrb	r3, [r3, #10]
 800b19a:	3b03      	subs	r3, #3
 800b19c:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	695a      	ldr	r2, [r3, #20]
 800b1a2:	7dfb      	ldrb	r3, [r7, #23]
 800b1a4:	429a      	cmp	r2, r3
 800b1a6:	bfa8      	it	ge
 800b1a8:	461a      	movge	r2, r3
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	6918      	ldr	r0, [r3, #16]
 800b1b2:	69bb      	ldr	r3, [r7, #24]
 800b1b4:	1cd9      	adds	r1, r3, #3
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	695b      	ldr	r3, [r3, #20]
 800b1ba:	461a      	mov	r2, r3
 800b1bc:	f003 fd71 	bl	800eca2 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 800b1c0:	69bb      	ldr	r3, [r7, #24]
 800b1c2:	781b      	ldrb	r3, [r3, #0]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d001      	beq.n	800b1cc <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800b1c8:	2301      	movs	r3, #1
 800b1ca:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800b1cc:	4809      	ldr	r0, [pc, #36]	@ (800b1f4 <hci_send_req+0x104>)
 800b1ce:	f000 fd19 	bl	800bc04 <LST_is_empty>
 800b1d2:	4603      	mov	r3, r0
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d0b5      	beq.n	800b144 <hci_send_req+0x54>
  while(local_cmd_status == HCI_TL_CmdBusy)
 800b1d8:	7ffb      	ldrb	r3, [r7, #31]
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d0ad      	beq.n	800b13a <hci_send_req+0x4a>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 800b1de:	2001      	movs	r0, #1
 800b1e0:	f000 f860 	bl	800b2a4 <NotifyCmdStatus>

  return 0;
 800b1e4:	2300      	movs	r3, #0
}
 800b1e6:	4618      	mov	r0, r3
 800b1e8:	3720      	adds	r7, #32
 800b1ea:	46bd      	mov	sp, r7
 800b1ec:	bd80      	pop	{r7, pc}
 800b1ee:	bf00      	nop
 800b1f0:	2000046c 	.word	0x2000046c
 800b1f4:	20000460 	.word	0x20000460

0800b1f8 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800b1f8:	b580      	push	{r7, lr}
 800b1fa:	b086      	sub	sp, #24
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 800b200:	480f      	ldr	r0, [pc, #60]	@ (800b240 <TlInit+0x48>)
 800b202:	f000 fcef 	bl	800bbe4 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 800b206:	4a0f      	ldr	r2, [pc, #60]	@ (800b244 <TlInit+0x4c>)
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 800b20c:	480e      	ldr	r0, [pc, #56]	@ (800b248 <TlInit+0x50>)
 800b20e:	f000 fce9 	bl	800bbe4 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800b212:	4b0e      	ldr	r3, [pc, #56]	@ (800b24c <TlInit+0x54>)
 800b214:	2201      	movs	r2, #1
 800b216:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 800b218:	4b0d      	ldr	r3, [pc, #52]	@ (800b250 <TlInit+0x58>)
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d00a      	beq.n	800b236 <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 800b224:	4b0b      	ldr	r3, [pc, #44]	@ (800b254 <TlInit+0x5c>)
 800b226:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 800b228:	4b09      	ldr	r3, [pc, #36]	@ (800b250 <TlInit+0x58>)
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	f107 0208 	add.w	r2, r7, #8
 800b230:	4610      	mov	r0, r2
 800b232:	4798      	blx	r3
  }

  return;
 800b234:	bf00      	nop
 800b236:	bf00      	nop
}
 800b238:	3718      	adds	r7, #24
 800b23a:	46bd      	mov	sp, r7
 800b23c:	bd80      	pop	{r7, pc}
 800b23e:	bf00      	nop
 800b240:	20000460 	.word	0x20000460
 800b244:	200000a0 	.word	0x200000a0
 800b248:	20000098 	.word	0x20000098
 800b24c:	200000a4 	.word	0x200000a4
 800b250:	20000440 	.word	0x20000440
 800b254:	0800b2e5 	.word	0x0800b2e5

0800b258 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 800b258:	b580      	push	{r7, lr}
 800b25a:	b082      	sub	sp, #8
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	4603      	mov	r3, r0
 800b260:	603a      	str	r2, [r7, #0]
 800b262:	80fb      	strh	r3, [r7, #6]
 800b264:	460b      	mov	r3, r1
 800b266:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 800b268:	4b0c      	ldr	r3, [pc, #48]	@ (800b29c <SendCmd+0x44>)
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	88fa      	ldrh	r2, [r7, #6]
 800b26e:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 800b272:	4b0a      	ldr	r3, [pc, #40]	@ (800b29c <SendCmd+0x44>)
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	797a      	ldrb	r2, [r7, #5]
 800b278:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 800b27a:	4b08      	ldr	r3, [pc, #32]	@ (800b29c <SendCmd+0x44>)
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	330c      	adds	r3, #12
 800b280:	797a      	ldrb	r2, [r7, #5]
 800b282:	6839      	ldr	r1, [r7, #0]
 800b284:	4618      	mov	r0, r3
 800b286:	f003 fd0c 	bl	800eca2 <memcpy>

  hciContext.io.Send(0,0);
 800b28a:	4b05      	ldr	r3, [pc, #20]	@ (800b2a0 <SendCmd+0x48>)
 800b28c:	691b      	ldr	r3, [r3, #16]
 800b28e:	2100      	movs	r1, #0
 800b290:	2000      	movs	r0, #0
 800b292:	4798      	blx	r3

  return;
 800b294:	bf00      	nop
}
 800b296:	3708      	adds	r7, #8
 800b298:	46bd      	mov	sp, r7
 800b29a:	bd80      	pop	{r7, pc}
 800b29c:	200000a0 	.word	0x200000a0
 800b2a0:	20000440 	.word	0x20000440

0800b2a4 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 800b2a4:	b580      	push	{r7, lr}
 800b2a6:	b082      	sub	sp, #8
 800b2a8:	af00      	add	r7, sp, #0
 800b2aa:	4603      	mov	r3, r0
 800b2ac:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 800b2ae:	79fb      	ldrb	r3, [r7, #7]
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d108      	bne.n	800b2c6 <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 800b2b4:	4b0a      	ldr	r3, [pc, #40]	@ (800b2e0 <NotifyCmdStatus+0x3c>)
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d00d      	beq.n	800b2d8 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 800b2bc:	4b08      	ldr	r3, [pc, #32]	@ (800b2e0 <NotifyCmdStatus+0x3c>)
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	2000      	movs	r0, #0
 800b2c2:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 800b2c4:	e008      	b.n	800b2d8 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 800b2c6:	4b06      	ldr	r3, [pc, #24]	@ (800b2e0 <NotifyCmdStatus+0x3c>)
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d004      	beq.n	800b2d8 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 800b2ce:	4b04      	ldr	r3, [pc, #16]	@ (800b2e0 <NotifyCmdStatus+0x3c>)
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	2001      	movs	r0, #1
 800b2d4:	4798      	blx	r3
  return;
 800b2d6:	bf00      	nop
 800b2d8:	bf00      	nop
}
 800b2da:	3708      	adds	r7, #8
 800b2dc:	46bd      	mov	sp, r7
 800b2de:	bd80      	pop	{r7, pc}
 800b2e0:	20000468 	.word	0x20000468

0800b2e4 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 800b2e4:	b580      	push	{r7, lr}
 800b2e6:	b082      	sub	sp, #8
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	7a5b      	ldrb	r3, [r3, #9]
 800b2f0:	2b0f      	cmp	r3, #15
 800b2f2:	d003      	beq.n	800b2fc <TlEvtReceived+0x18>
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	7a5b      	ldrb	r3, [r3, #9]
 800b2f8:	2b0e      	cmp	r3, #14
 800b2fa:	d107      	bne.n	800b30c <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 800b2fc:	6879      	ldr	r1, [r7, #4]
 800b2fe:	4809      	ldr	r0, [pc, #36]	@ (800b324 <TlEvtReceived+0x40>)
 800b300:	f000 fcc8 	bl	800bc94 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 800b304:	2000      	movs	r0, #0
 800b306:	f002 fae3 	bl	800d8d0 <hci_cmd_resp_release>
 800b30a:	e006      	b.n	800b31a <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 800b30c:	6879      	ldr	r1, [r7, #4]
 800b30e:	4806      	ldr	r0, [pc, #24]	@ (800b328 <TlEvtReceived+0x44>)
 800b310:	f000 fcc0 	bl	800bc94 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800b314:	4804      	ldr	r0, [pc, #16]	@ (800b328 <TlEvtReceived+0x44>)
 800b316:	f002 facf 	bl	800d8b8 <hci_notify_asynch_evt>
  }

  return;
 800b31a:	bf00      	nop
}
 800b31c:	3708      	adds	r7, #8
 800b31e:	46bd      	mov	sp, r7
 800b320:	bd80      	pop	{r7, pc}
 800b322:	bf00      	nop
 800b324:	20000460 	.word	0x20000460
 800b328:	20000098 	.word	0x20000098

0800b32c <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 800b32c:	b480      	push	{r7}
 800b32e:	b083      	sub	sp, #12
 800b330:	af00      	add	r7, sp, #0
 800b332:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	4a05      	ldr	r2, [pc, #20]	@ (800b34c <hci_register_io_bus+0x20>)
 800b338:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	4a04      	ldr	r2, [pc, #16]	@ (800b350 <hci_register_io_bus+0x24>)
 800b33e:	611a      	str	r2, [r3, #16]

  return;
 800b340:	bf00      	nop
}
 800b342:	370c      	adds	r7, #12
 800b344:	46bd      	mov	sp, r7
 800b346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b34a:	4770      	bx	lr
 800b34c:	0800b645 	.word	0x0800b645
 800b350:	0800b6ad 	.word	0x0800b6ad

0800b354 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800b354:	b580      	push	{r7, lr}
 800b356:	b082      	sub	sp, #8
 800b358:	af00      	add	r7, sp, #0
 800b35a:	6078      	str	r0, [r7, #4]
 800b35c:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800b35e:	683b      	ldr	r3, [r7, #0]
 800b360:	685b      	ldr	r3, [r3, #4]
 800b362:	4a08      	ldr	r2, [pc, #32]	@ (800b384 <shci_init+0x30>)
 800b364:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800b366:	4a08      	ldr	r2, [pc, #32]	@ (800b388 <shci_init+0x34>)
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800b36c:	4806      	ldr	r0, [pc, #24]	@ (800b388 <shci_init+0x34>)
 800b36e:	f000 f915 	bl	800b59c <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800b372:	683b      	ldr	r3, [r7, #0]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	4618      	mov	r0, r3
 800b378:	f000 f898 	bl	800b4ac <TlInit>

  return;
 800b37c:	bf00      	nop
}
 800b37e:	3708      	adds	r7, #8
 800b380:	46bd      	mov	sp, r7
 800b382:	bd80      	pop	{r7, pc}
 800b384:	20000490 	.word	0x20000490
 800b388:	20000470 	.word	0x20000470

0800b38c <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800b38c:	b580      	push	{r7, lr}
 800b38e:	b084      	sub	sp, #16
 800b390:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800b392:	4822      	ldr	r0, [pc, #136]	@ (800b41c <shci_user_evt_proc+0x90>)
 800b394:	f000 fc36 	bl	800bc04 <LST_is_empty>
 800b398:	4603      	mov	r3, r0
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d12b      	bne.n	800b3f6 <shci_user_evt_proc+0x6a>
 800b39e:	4b20      	ldr	r3, [pc, #128]	@ (800b420 <shci_user_evt_proc+0x94>)
 800b3a0:	781b      	ldrb	r3, [r3, #0]
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d027      	beq.n	800b3f6 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800b3a6:	f107 030c 	add.w	r3, r7, #12
 800b3aa:	4619      	mov	r1, r3
 800b3ac:	481b      	ldr	r0, [pc, #108]	@ (800b41c <shci_user_evt_proc+0x90>)
 800b3ae:	f000 fcb8 	bl	800bd22 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 800b3b2:	4b1c      	ldr	r3, [pc, #112]	@ (800b424 <shci_user_evt_proc+0x98>)
 800b3b4:	69db      	ldr	r3, [r3, #28]
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d00c      	beq.n	800b3d4 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800b3be:	2301      	movs	r3, #1
 800b3c0:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800b3c2:	4b18      	ldr	r3, [pc, #96]	@ (800b424 <shci_user_evt_proc+0x98>)
 800b3c4:	69db      	ldr	r3, [r3, #28]
 800b3c6:	1d3a      	adds	r2, r7, #4
 800b3c8:	4610      	mov	r0, r2
 800b3ca:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800b3cc:	793a      	ldrb	r2, [r7, #4]
 800b3ce:	4b14      	ldr	r3, [pc, #80]	@ (800b420 <shci_user_evt_proc+0x94>)
 800b3d0:	701a      	strb	r2, [r3, #0]
 800b3d2:	e002      	b.n	800b3da <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800b3d4:	4b12      	ldr	r3, [pc, #72]	@ (800b420 <shci_user_evt_proc+0x94>)
 800b3d6:	2201      	movs	r2, #1
 800b3d8:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800b3da:	4b11      	ldr	r3, [pc, #68]	@ (800b420 <shci_user_evt_proc+0x94>)
 800b3dc:	781b      	ldrb	r3, [r3, #0]
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d004      	beq.n	800b3ec <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	4618      	mov	r0, r3
 800b3e6:	f000 fa71 	bl	800b8cc <TL_MM_EvtDone>
 800b3ea:	e004      	b.n	800b3f6 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	4619      	mov	r1, r3
 800b3f0:	480a      	ldr	r0, [pc, #40]	@ (800b41c <shci_user_evt_proc+0x90>)
 800b3f2:	f000 fc29 	bl	800bc48 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800b3f6:	4809      	ldr	r0, [pc, #36]	@ (800b41c <shci_user_evt_proc+0x90>)
 800b3f8:	f000 fc04 	bl	800bc04 <LST_is_empty>
 800b3fc:	4603      	mov	r3, r0
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d107      	bne.n	800b412 <shci_user_evt_proc+0x86>
 800b402:	4b07      	ldr	r3, [pc, #28]	@ (800b420 <shci_user_evt_proc+0x94>)
 800b404:	781b      	ldrb	r3, [r3, #0]
 800b406:	2b00      	cmp	r3, #0
 800b408:	d003      	beq.n	800b412 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800b40a:	4804      	ldr	r0, [pc, #16]	@ (800b41c <shci_user_evt_proc+0x90>)
 800b40c:	f7f6 f9b9 	bl	8001782 <shci_notify_asynch_evt>
  }


  return;
 800b410:	bf00      	nop
 800b412:	bf00      	nop
}
 800b414:	3710      	adds	r7, #16
 800b416:	46bd      	mov	sp, r7
 800b418:	bd80      	pop	{r7, pc}
 800b41a:	bf00      	nop
 800b41c:	200000a8 	.word	0x200000a8
 800b420:	200000b8 	.word	0x200000b8
 800b424:	20000470 	.word	0x20000470

0800b428 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800b428:	b580      	push	{r7, lr}
 800b42a:	b084      	sub	sp, #16
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	60ba      	str	r2, [r7, #8]
 800b430:	607b      	str	r3, [r7, #4]
 800b432:	4603      	mov	r3, r0
 800b434:	81fb      	strh	r3, [r7, #14]
 800b436:	460b      	mov	r3, r1
 800b438:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800b43a:	2000      	movs	r0, #0
 800b43c:	f000 f868 	bl	800b510 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800b440:	4b17      	ldr	r3, [pc, #92]	@ (800b4a0 <shci_send+0x78>)
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	89fa      	ldrh	r2, [r7, #14]
 800b446:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800b44a:	4b15      	ldr	r3, [pc, #84]	@ (800b4a0 <shci_send+0x78>)
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	7b7a      	ldrb	r2, [r7, #13]
 800b450:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800b452:	4b13      	ldr	r3, [pc, #76]	@ (800b4a0 <shci_send+0x78>)
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	330c      	adds	r3, #12
 800b458:	7b7a      	ldrb	r2, [r7, #13]
 800b45a:	68b9      	ldr	r1, [r7, #8]
 800b45c:	4618      	mov	r0, r3
 800b45e:	f003 fc20 	bl	800eca2 <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 800b462:	4b10      	ldr	r3, [pc, #64]	@ (800b4a4 <shci_send+0x7c>)
 800b464:	2201      	movs	r2, #1
 800b466:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 800b468:	4b0f      	ldr	r3, [pc, #60]	@ (800b4a8 <shci_send+0x80>)
 800b46a:	691b      	ldr	r3, [r3, #16]
 800b46c:	2100      	movs	r1, #0
 800b46e:	2000      	movs	r0, #0
 800b470:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800b472:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 800b476:	f7f6 f99b 	bl	80017b0 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	f103 0008 	add.w	r0, r3, #8
 800b480:	4b07      	ldr	r3, [pc, #28]	@ (800b4a0 <shci_send+0x78>)
 800b482:	6819      	ldr	r1, [r3, #0]
 800b484:	4b06      	ldr	r3, [pc, #24]	@ (800b4a0 <shci_send+0x78>)
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	789b      	ldrb	r3, [r3, #2]
 800b48a:	3303      	adds	r3, #3
 800b48c:	461a      	mov	r2, r3
 800b48e:	f003 fc08 	bl	800eca2 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800b492:	2001      	movs	r0, #1
 800b494:	f000 f83c 	bl	800b510 <Cmd_SetStatus>

  return;
 800b498:	bf00      	nop
}
 800b49a:	3710      	adds	r7, #16
 800b49c:	46bd      	mov	sp, r7
 800b49e:	bd80      	pop	{r7, pc}
 800b4a0:	200000b4 	.word	0x200000b4
 800b4a4:	20000494 	.word	0x20000494
 800b4a8:	20000470 	.word	0x20000470

0800b4ac <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800b4ac:	b580      	push	{r7, lr}
 800b4ae:	b086      	sub	sp, #24
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800b4b4:	4a10      	ldr	r2, [pc, #64]	@ (800b4f8 <TlInit+0x4c>)
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800b4ba:	4810      	ldr	r0, [pc, #64]	@ (800b4fc <TlInit+0x50>)
 800b4bc:	f000 fb92 	bl	800bbe4 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800b4c0:	2001      	movs	r0, #1
 800b4c2:	f000 f825 	bl	800b510 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800b4c6:	4b0e      	ldr	r3, [pc, #56]	@ (800b500 <TlInit+0x54>)
 800b4c8:	2201      	movs	r2, #1
 800b4ca:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800b4cc:	4b0d      	ldr	r3, [pc, #52]	@ (800b504 <TlInit+0x58>)
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d00c      	beq.n	800b4ee <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800b4d8:	4b0b      	ldr	r3, [pc, #44]	@ (800b508 <TlInit+0x5c>)
 800b4da:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800b4dc:	4b0b      	ldr	r3, [pc, #44]	@ (800b50c <TlInit+0x60>)
 800b4de:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800b4e0:	4b08      	ldr	r3, [pc, #32]	@ (800b504 <TlInit+0x58>)
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	f107 020c 	add.w	r2, r7, #12
 800b4e8:	4610      	mov	r0, r2
 800b4ea:	4798      	blx	r3
  }

  return;
 800b4ec:	bf00      	nop
 800b4ee:	bf00      	nop
}
 800b4f0:	3718      	adds	r7, #24
 800b4f2:	46bd      	mov	sp, r7
 800b4f4:	bd80      	pop	{r7, pc}
 800b4f6:	bf00      	nop
 800b4f8:	200000b4 	.word	0x200000b4
 800b4fc:	200000a8 	.word	0x200000a8
 800b500:	200000b8 	.word	0x200000b8
 800b504:	20000470 	.word	0x20000470
 800b508:	0800b561 	.word	0x0800b561
 800b50c:	0800b579 	.word	0x0800b579

0800b510 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800b510:	b580      	push	{r7, lr}
 800b512:	b082      	sub	sp, #8
 800b514:	af00      	add	r7, sp, #0
 800b516:	4603      	mov	r3, r0
 800b518:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800b51a:	79fb      	ldrb	r3, [r7, #7]
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d10b      	bne.n	800b538 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800b520:	4b0d      	ldr	r3, [pc, #52]	@ (800b558 <Cmd_SetStatus+0x48>)
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	2b00      	cmp	r3, #0
 800b526:	d003      	beq.n	800b530 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800b528:	4b0b      	ldr	r3, [pc, #44]	@ (800b558 <Cmd_SetStatus+0x48>)
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	2000      	movs	r0, #0
 800b52e:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800b530:	4b0a      	ldr	r3, [pc, #40]	@ (800b55c <Cmd_SetStatus+0x4c>)
 800b532:	2200      	movs	r2, #0
 800b534:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800b536:	e00b      	b.n	800b550 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800b538:	4b08      	ldr	r3, [pc, #32]	@ (800b55c <Cmd_SetStatus+0x4c>)
 800b53a:	2201      	movs	r2, #1
 800b53c:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800b53e:	4b06      	ldr	r3, [pc, #24]	@ (800b558 <Cmd_SetStatus+0x48>)
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	2b00      	cmp	r3, #0
 800b544:	d004      	beq.n	800b550 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800b546:	4b04      	ldr	r3, [pc, #16]	@ (800b558 <Cmd_SetStatus+0x48>)
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	2001      	movs	r0, #1
 800b54c:	4798      	blx	r3
  return;
 800b54e:	bf00      	nop
 800b550:	bf00      	nop
}
 800b552:	3708      	adds	r7, #8
 800b554:	46bd      	mov	sp, r7
 800b556:	bd80      	pop	{r7, pc}
 800b558:	20000490 	.word	0x20000490
 800b55c:	200000b0 	.word	0x200000b0

0800b560 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800b560:	b580      	push	{r7, lr}
 800b562:	b082      	sub	sp, #8
 800b564:	af00      	add	r7, sp, #0
 800b566:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800b568:	2000      	movs	r0, #0
 800b56a:	f7f6 f916 	bl	800179a <shci_cmd_resp_release>

  return;
 800b56e:	bf00      	nop
}
 800b570:	3708      	adds	r7, #8
 800b572:	46bd      	mov	sp, r7
 800b574:	bd80      	pop	{r7, pc}
	...

0800b578 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800b578:	b580      	push	{r7, lr}
 800b57a:	b082      	sub	sp, #8
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800b580:	6879      	ldr	r1, [r7, #4]
 800b582:	4805      	ldr	r0, [pc, #20]	@ (800b598 <TlUserEvtReceived+0x20>)
 800b584:	f000 fb86 	bl	800bc94 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800b588:	4803      	ldr	r0, [pc, #12]	@ (800b598 <TlUserEvtReceived+0x20>)
 800b58a:	f7f6 f8fa 	bl	8001782 <shci_notify_asynch_evt>

  return;
 800b58e:	bf00      	nop
}
 800b590:	3708      	adds	r7, #8
 800b592:	46bd      	mov	sp, r7
 800b594:	bd80      	pop	{r7, pc}
 800b596:	bf00      	nop
 800b598:	200000a8 	.word	0x200000a8

0800b59c <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800b59c:	b480      	push	{r7}
 800b59e:	b083      	sub	sp, #12
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	4a05      	ldr	r2, [pc, #20]	@ (800b5bc <shci_register_io_bus+0x20>)
 800b5a8:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	4a04      	ldr	r2, [pc, #16]	@ (800b5c0 <shci_register_io_bus+0x24>)
 800b5ae:	611a      	str	r2, [r3, #16]

  return;
 800b5b0:	bf00      	nop
}
 800b5b2:	370c      	adds	r7, #12
 800b5b4:	46bd      	mov	sp, r7
 800b5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ba:	4770      	bx	lr
 800b5bc:	0800b759 	.word	0x0800b759
 800b5c0:	0800b7ad 	.word	0x0800b7ad

0800b5c4 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 800b5c4:	b580      	push	{r7, lr}
 800b5c6:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800b5c8:	f002 fd96 	bl	800e0f8 <HW_IPCC_Enable>

  return;
 800b5cc:	bf00      	nop
}
 800b5ce:	bd80      	pop	{r7, pc}

0800b5d0 <TL_Init>:


void TL_Init( void )
{
 800b5d0:	b580      	push	{r7, lr}
 800b5d2:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800b5d4:	4b10      	ldr	r3, [pc, #64]	@ (800b618 <TL_Init+0x48>)
 800b5d6:	4a11      	ldr	r2, [pc, #68]	@ (800b61c <TL_Init+0x4c>)
 800b5d8:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800b5da:	4b0f      	ldr	r3, [pc, #60]	@ (800b618 <TL_Init+0x48>)
 800b5dc:	4a10      	ldr	r2, [pc, #64]	@ (800b620 <TL_Init+0x50>)
 800b5de:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800b5e0:	4b0d      	ldr	r3, [pc, #52]	@ (800b618 <TL_Init+0x48>)
 800b5e2:	4a10      	ldr	r2, [pc, #64]	@ (800b624 <TL_Init+0x54>)
 800b5e4:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800b5e6:	4b0c      	ldr	r3, [pc, #48]	@ (800b618 <TL_Init+0x48>)
 800b5e8:	4a0f      	ldr	r2, [pc, #60]	@ (800b628 <TL_Init+0x58>)
 800b5ea:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 800b5ec:	4b0a      	ldr	r3, [pc, #40]	@ (800b618 <TL_Init+0x48>)
 800b5ee:	4a0f      	ldr	r2, [pc, #60]	@ (800b62c <TL_Init+0x5c>)
 800b5f0:	625a      	str	r2, [r3, #36]	@ 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800b5f2:	4b09      	ldr	r3, [pc, #36]	@ (800b618 <TL_Init+0x48>)
 800b5f4:	4a0e      	ldr	r2, [pc, #56]	@ (800b630 <TL_Init+0x60>)
 800b5f6:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800b5f8:	4b07      	ldr	r3, [pc, #28]	@ (800b618 <TL_Init+0x48>)
 800b5fa:	4a0e      	ldr	r2, [pc, #56]	@ (800b634 <TL_Init+0x64>)
 800b5fc:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800b5fe:	4b06      	ldr	r3, [pc, #24]	@ (800b618 <TL_Init+0x48>)
 800b600:	4a0d      	ldr	r2, [pc, #52]	@ (800b638 <TL_Init+0x68>)
 800b602:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800b604:	4b04      	ldr	r3, [pc, #16]	@ (800b618 <TL_Init+0x48>)
 800b606:	4a0d      	ldr	r2, [pc, #52]	@ (800b63c <TL_Init+0x6c>)
 800b608:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800b60a:	4b03      	ldr	r3, [pc, #12]	@ (800b618 <TL_Init+0x48>)
 800b60c:	4a0c      	ldr	r2, [pc, #48]	@ (800b640 <TL_Init+0x70>)
 800b60e:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800b610:	f002 fd86 	bl	800e120 <HW_IPCC_Init>

  return;
 800b614:	bf00      	nop
}
 800b616:	bd80      	pop	{r7, pc}
 800b618:	20030000 	.word	0x20030000
 800b61c:	20030028 	.word	0x20030028
 800b620:	20030048 	.word	0x20030048
 800b624:	20030058 	.word	0x20030058
 800b628:	20030068 	.word	0x20030068
 800b62c:	20030070 	.word	0x20030070
 800b630:	20030078 	.word	0x20030078
 800b634:	20030080 	.word	0x20030080
 800b638:	2003009c 	.word	0x2003009c
 800b63c:	200300a0 	.word	0x200300a0
 800b640:	200300ac 	.word	0x200300ac

0800b644 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 800b644:	b580      	push	{r7, lr}
 800b646:	b084      	sub	sp, #16
 800b648:	af00      	add	r7, sp, #0
 800b64a:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 800b650:	4811      	ldr	r0, [pc, #68]	@ (800b698 <TL_BLE_Init+0x54>)
 800b652:	f000 fac7 	bl	800bbe4 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800b656:	4b11      	ldr	r3, [pc, #68]	@ (800b69c <TL_BLE_Init+0x58>)
 800b658:	685b      	ldr	r3, [r3, #4]
 800b65a:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	689a      	ldr	r2, [r3, #8]
 800b660:	68bb      	ldr	r3, [r7, #8]
 800b662:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	68da      	ldr	r2, [r3, #12]
 800b668:	68bb      	ldr	r3, [r7, #8]
 800b66a:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800b66c:	68bb      	ldr	r3, [r7, #8]
 800b66e:	4a0c      	ldr	r2, [pc, #48]	@ (800b6a0 <TL_BLE_Init+0x5c>)
 800b670:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800b672:	68bb      	ldr	r3, [r7, #8]
 800b674:	4a08      	ldr	r2, [pc, #32]	@ (800b698 <TL_BLE_Init+0x54>)
 800b676:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 800b678:	f002 fd68 	bl	800e14c <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	4a08      	ldr	r2, [pc, #32]	@ (800b6a4 <TL_BLE_Init+0x60>)
 800b682:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	685b      	ldr	r3, [r3, #4]
 800b688:	4a07      	ldr	r2, [pc, #28]	@ (800b6a8 <TL_BLE_Init+0x64>)
 800b68a:	6013      	str	r3, [r2, #0]

  return 0;
 800b68c:	2300      	movs	r3, #0
}
 800b68e:	4618      	mov	r0, r3
 800b690:	3710      	adds	r7, #16
 800b692:	46bd      	mov	sp, r7
 800b694:	bd80      	pop	{r7, pc}
 800b696:	bf00      	nop
 800b698:	200300c8 	.word	0x200300c8
 800b69c:	20030000 	.word	0x20030000
 800b6a0:	20030d7c 	.word	0x20030d7c
 800b6a4:	200004a0 	.word	0x200004a0
 800b6a8:	200004a4 	.word	0x200004a4

0800b6ac <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 800b6ac:	b580      	push	{r7, lr}
 800b6ae:	b082      	sub	sp, #8
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	6078      	str	r0, [r7, #4]
 800b6b4:	460b      	mov	r3, r1
 800b6b6:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800b6b8:	4b09      	ldr	r3, [pc, #36]	@ (800b6e0 <TL_BLE_SendCmd+0x34>)
 800b6ba:	685b      	ldr	r3, [r3, #4]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	2201      	movs	r2, #1
 800b6c0:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 800b6c2:	4b07      	ldr	r3, [pc, #28]	@ (800b6e0 <TL_BLE_SendCmd+0x34>)
 800b6c4:	685b      	ldr	r3, [r3, #4]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	4619      	mov	r1, r3
 800b6ca:	2001      	movs	r0, #1
 800b6cc:	f000 f96c 	bl	800b9a8 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 800b6d0:	f002 fd46 	bl	800e160 <HW_IPCC_BLE_SendCmd>

  return 0;
 800b6d4:	2300      	movs	r3, #0
}
 800b6d6:	4618      	mov	r0, r3
 800b6d8:	3708      	adds	r7, #8
 800b6da:	46bd      	mov	sp, r7
 800b6dc:	bd80      	pop	{r7, pc}
 800b6de:	bf00      	nop
 800b6e0:	20030000 	.word	0x20030000

0800b6e4 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 800b6e4:	b580      	push	{r7, lr}
 800b6e6:	b082      	sub	sp, #8
 800b6e8:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800b6ea:	e01c      	b.n	800b726 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800b6ec:	1d3b      	adds	r3, r7, #4
 800b6ee:	4619      	mov	r1, r3
 800b6f0:	4812      	ldr	r0, [pc, #72]	@ (800b73c <HW_IPCC_BLE_RxEvtNot+0x58>)
 800b6f2:	f000 fb16 	bl	800bd22 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	7a5b      	ldrb	r3, [r3, #9]
 800b6fa:	2b0f      	cmp	r3, #15
 800b6fc:	d003      	beq.n	800b706 <HW_IPCC_BLE_RxEvtNot+0x22>
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	7a5b      	ldrb	r3, [r3, #9]
 800b702:	2b0e      	cmp	r3, #14
 800b704:	d105      	bne.n	800b712 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	4619      	mov	r1, r3
 800b70a:	2002      	movs	r0, #2
 800b70c:	f000 f94c 	bl	800b9a8 <OutputDbgTrace>
 800b710:	e004      	b.n	800b71c <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	4619      	mov	r1, r3
 800b716:	2003      	movs	r0, #3
 800b718:	f000 f946 	bl	800b9a8 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 800b71c:	4b08      	ldr	r3, [pc, #32]	@ (800b740 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	687a      	ldr	r2, [r7, #4]
 800b722:	4610      	mov	r0, r2
 800b724:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800b726:	4805      	ldr	r0, [pc, #20]	@ (800b73c <HW_IPCC_BLE_RxEvtNot+0x58>)
 800b728:	f000 fa6c 	bl	800bc04 <LST_is_empty>
 800b72c:	4603      	mov	r3, r0
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d0dc      	beq.n	800b6ec <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800b732:	bf00      	nop
}
 800b734:	3708      	adds	r7, #8
 800b736:	46bd      	mov	sp, r7
 800b738:	bd80      	pop	{r7, pc}
 800b73a:	bf00      	nop
 800b73c:	200300c8 	.word	0x200300c8
 800b740:	200004a0 	.word	0x200004a0

0800b744 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800b744:	b580      	push	{r7, lr}
 800b746:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800b748:	4b02      	ldr	r3, [pc, #8]	@ (800b754 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	4798      	blx	r3

  return;
 800b74e:	bf00      	nop
}
 800b750:	bd80      	pop	{r7, pc}
 800b752:	bf00      	nop
 800b754:	200004a4 	.word	0x200004a4

0800b758 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800b758:	b580      	push	{r7, lr}
 800b75a:	b084      	sub	sp, #16
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800b764:	480d      	ldr	r0, [pc, #52]	@ (800b79c <TL_SYS_Init+0x44>)
 800b766:	f000 fa3d 	bl	800bbe4 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800b76a:	4b0d      	ldr	r3, [pc, #52]	@ (800b7a0 <TL_SYS_Init+0x48>)
 800b76c:	68db      	ldr	r3, [r3, #12]
 800b76e:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	689a      	ldr	r2, [r3, #8]
 800b774:	68bb      	ldr	r3, [r7, #8]
 800b776:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800b778:	68bb      	ldr	r3, [r7, #8]
 800b77a:	4a08      	ldr	r2, [pc, #32]	@ (800b79c <TL_SYS_Init+0x44>)
 800b77c:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800b77e:	f002 fd11 	bl	800e1a4 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	4a07      	ldr	r2, [pc, #28]	@ (800b7a4 <TL_SYS_Init+0x4c>)
 800b788:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	685b      	ldr	r3, [r3, #4]
 800b78e:	4a06      	ldr	r2, [pc, #24]	@ (800b7a8 <TL_SYS_Init+0x50>)
 800b790:	6013      	str	r3, [r2, #0]

  return 0;
 800b792:	2300      	movs	r3, #0
}
 800b794:	4618      	mov	r0, r3
 800b796:	3710      	adds	r7, #16
 800b798:	46bd      	mov	sp, r7
 800b79a:	bd80      	pop	{r7, pc}
 800b79c:	200300d0 	.word	0x200300d0
 800b7a0:	20030000 	.word	0x20030000
 800b7a4:	200004a8 	.word	0x200004a8
 800b7a8:	200004ac 	.word	0x200004ac

0800b7ac <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800b7ac:	b580      	push	{r7, lr}
 800b7ae:	b082      	sub	sp, #8
 800b7b0:	af00      	add	r7, sp, #0
 800b7b2:	6078      	str	r0, [r7, #4]
 800b7b4:	460b      	mov	r3, r1
 800b7b6:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800b7b8:	4b09      	ldr	r3, [pc, #36]	@ (800b7e0 <TL_SYS_SendCmd+0x34>)
 800b7ba:	68db      	ldr	r3, [r3, #12]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	2210      	movs	r2, #16
 800b7c0:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800b7c2:	4b07      	ldr	r3, [pc, #28]	@ (800b7e0 <TL_SYS_SendCmd+0x34>)
 800b7c4:	68db      	ldr	r3, [r3, #12]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	4619      	mov	r1, r3
 800b7ca:	2004      	movs	r0, #4
 800b7cc:	f000 f8ec 	bl	800b9a8 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 800b7d0:	f002 fcf2 	bl	800e1b8 <HW_IPCC_SYS_SendCmd>

  return 0;
 800b7d4:	2300      	movs	r3, #0
}
 800b7d6:	4618      	mov	r0, r3
 800b7d8:	3708      	adds	r7, #8
 800b7da:	46bd      	mov	sp, r7
 800b7dc:	bd80      	pop	{r7, pc}
 800b7de:	bf00      	nop
 800b7e0:	20030000 	.word	0x20030000

0800b7e4 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800b7e4:	b580      	push	{r7, lr}
 800b7e6:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800b7e8:	4b07      	ldr	r3, [pc, #28]	@ (800b808 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800b7ea:	68db      	ldr	r3, [r3, #12]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	4619      	mov	r1, r3
 800b7f0:	2005      	movs	r0, #5
 800b7f2:	f000 f8d9 	bl	800b9a8 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800b7f6:	4b05      	ldr	r3, [pc, #20]	@ (800b80c <HW_IPCC_SYS_CmdEvtNot+0x28>)
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	4a03      	ldr	r2, [pc, #12]	@ (800b808 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800b7fc:	68d2      	ldr	r2, [r2, #12]
 800b7fe:	6812      	ldr	r2, [r2, #0]
 800b800:	4610      	mov	r0, r2
 800b802:	4798      	blx	r3

  return;
 800b804:	bf00      	nop
}
 800b806:	bd80      	pop	{r7, pc}
 800b808:	20030000 	.word	0x20030000
 800b80c:	200004a8 	.word	0x200004a8

0800b810 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800b810:	b580      	push	{r7, lr}
 800b812:	b082      	sub	sp, #8
 800b814:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800b816:	e00e      	b.n	800b836 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800b818:	1d3b      	adds	r3, r7, #4
 800b81a:	4619      	mov	r1, r3
 800b81c:	480b      	ldr	r0, [pc, #44]	@ (800b84c <HW_IPCC_SYS_EvtNot+0x3c>)
 800b81e:	f000 fa80 	bl	800bd22 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	4619      	mov	r1, r3
 800b826:	2006      	movs	r0, #6
 800b828:	f000 f8be 	bl	800b9a8 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 800b82c:	4b08      	ldr	r3, [pc, #32]	@ (800b850 <HW_IPCC_SYS_EvtNot+0x40>)
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	687a      	ldr	r2, [r7, #4]
 800b832:	4610      	mov	r0, r2
 800b834:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800b836:	4805      	ldr	r0, [pc, #20]	@ (800b84c <HW_IPCC_SYS_EvtNot+0x3c>)
 800b838:	f000 f9e4 	bl	800bc04 <LST_is_empty>
 800b83c:	4603      	mov	r3, r0
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d0ea      	beq.n	800b818 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800b842:	bf00      	nop
}
 800b844:	3708      	adds	r7, #8
 800b846:	46bd      	mov	sp, r7
 800b848:	bd80      	pop	{r7, pc}
 800b84a:	bf00      	nop
 800b84c:	200300d0 	.word	0x200300d0
 800b850:	200004ac 	.word	0x200004ac

0800b854 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800b854:	b580      	push	{r7, lr}
 800b856:	b082      	sub	sp, #8
 800b858:	af00      	add	r7, sp, #0
 800b85a:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800b85c:	4817      	ldr	r0, [pc, #92]	@ (800b8bc <TL_MM_Init+0x68>)
 800b85e:	f000 f9c1 	bl	800bbe4 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800b862:	4817      	ldr	r0, [pc, #92]	@ (800b8c0 <TL_MM_Init+0x6c>)
 800b864:	f000 f9be 	bl	800bbe4 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800b868:	4b16      	ldr	r3, [pc, #88]	@ (800b8c4 <TL_MM_Init+0x70>)
 800b86a:	691b      	ldr	r3, [r3, #16]
 800b86c:	4a16      	ldr	r2, [pc, #88]	@ (800b8c8 <TL_MM_Init+0x74>)
 800b86e:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800b870:	4b15      	ldr	r3, [pc, #84]	@ (800b8c8 <TL_MM_Init+0x74>)
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	687a      	ldr	r2, [r7, #4]
 800b876:	6892      	ldr	r2, [r2, #8]
 800b878:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800b87a:	4b13      	ldr	r3, [pc, #76]	@ (800b8c8 <TL_MM_Init+0x74>)
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	687a      	ldr	r2, [r7, #4]
 800b880:	68d2      	ldr	r2, [r2, #12]
 800b882:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800b884:	4b10      	ldr	r3, [pc, #64]	@ (800b8c8 <TL_MM_Init+0x74>)
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	4a0c      	ldr	r2, [pc, #48]	@ (800b8bc <TL_MM_Init+0x68>)
 800b88a:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800b88c:	4b0e      	ldr	r3, [pc, #56]	@ (800b8c8 <TL_MM_Init+0x74>)
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	687a      	ldr	r2, [r7, #4]
 800b892:	6812      	ldr	r2, [r2, #0]
 800b894:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800b896:	4b0c      	ldr	r3, [pc, #48]	@ (800b8c8 <TL_MM_Init+0x74>)
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	687a      	ldr	r2, [r7, #4]
 800b89c:	6852      	ldr	r2, [r2, #4]
 800b89e:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800b8a0:	4b09      	ldr	r3, [pc, #36]	@ (800b8c8 <TL_MM_Init+0x74>)
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	687a      	ldr	r2, [r7, #4]
 800b8a6:	6912      	ldr	r2, [r2, #16]
 800b8a8:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800b8aa:	4b07      	ldr	r3, [pc, #28]	@ (800b8c8 <TL_MM_Init+0x74>)
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	687a      	ldr	r2, [r7, #4]
 800b8b0:	6952      	ldr	r2, [r2, #20]
 800b8b2:	619a      	str	r2, [r3, #24]

  return;
 800b8b4:	bf00      	nop
}
 800b8b6:	3708      	adds	r7, #8
 800b8b8:	46bd      	mov	sp, r7
 800b8ba:	bd80      	pop	{r7, pc}
 800b8bc:	200300b8 	.word	0x200300b8
 800b8c0:	20000498 	.word	0x20000498
 800b8c4:	20030000 	.word	0x20030000
 800b8c8:	200004b0 	.word	0x200004b0

0800b8cc <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800b8cc:	b580      	push	{r7, lr}
 800b8ce:	b082      	sub	sp, #8
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800b8d4:	6879      	ldr	r1, [r7, #4]
 800b8d6:	4807      	ldr	r0, [pc, #28]	@ (800b8f4 <TL_MM_EvtDone+0x28>)
 800b8d8:	f000 f9dc 	bl	800bc94 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800b8dc:	6879      	ldr	r1, [r7, #4]
 800b8de:	2000      	movs	r0, #0
 800b8e0:	f000 f862 	bl	800b9a8 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800b8e4:	4804      	ldr	r0, [pc, #16]	@ (800b8f8 <TL_MM_EvtDone+0x2c>)
 800b8e6:	f002 fc8d 	bl	800e204 <HW_IPCC_MM_SendFreeBuf>

  return;
 800b8ea:	bf00      	nop
}
 800b8ec:	3708      	adds	r7, #8
 800b8ee:	46bd      	mov	sp, r7
 800b8f0:	bd80      	pop	{r7, pc}
 800b8f2:	bf00      	nop
 800b8f4:	20000498 	.word	0x20000498
 800b8f8:	0800b8fd 	.word	0x0800b8fd

0800b8fc <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800b8fc:	b580      	push	{r7, lr}
 800b8fe:	b082      	sub	sp, #8
 800b900:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800b902:	e00c      	b.n	800b91e <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800b904:	1d3b      	adds	r3, r7, #4
 800b906:	4619      	mov	r1, r3
 800b908:	480a      	ldr	r0, [pc, #40]	@ (800b934 <SendFreeBuf+0x38>)
 800b90a:	f000 fa0a 	bl	800bd22 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800b90e:	4b0a      	ldr	r3, [pc, #40]	@ (800b938 <SendFreeBuf+0x3c>)
 800b910:	691b      	ldr	r3, [r3, #16]
 800b912:	691b      	ldr	r3, [r3, #16]
 800b914:	687a      	ldr	r2, [r7, #4]
 800b916:	4611      	mov	r1, r2
 800b918:	4618      	mov	r0, r3
 800b91a:	f000 f9bb 	bl	800bc94 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800b91e:	4805      	ldr	r0, [pc, #20]	@ (800b934 <SendFreeBuf+0x38>)
 800b920:	f000 f970 	bl	800bc04 <LST_is_empty>
 800b924:	4603      	mov	r3, r0
 800b926:	2b00      	cmp	r3, #0
 800b928:	d0ec      	beq.n	800b904 <SendFreeBuf+0x8>
  }

  return;
 800b92a:	bf00      	nop
}
 800b92c:	3708      	adds	r7, #8
 800b92e:	46bd      	mov	sp, r7
 800b930:	bd80      	pop	{r7, pc}
 800b932:	bf00      	nop
 800b934:	20000498 	.word	0x20000498
 800b938:	20030000 	.word	0x20030000

0800b93c <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800b93c:	b580      	push	{r7, lr}
 800b93e:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800b940:	4805      	ldr	r0, [pc, #20]	@ (800b958 <TL_TRACES_Init+0x1c>)
 800b942:	f000 f94f 	bl	800bbe4 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800b946:	4b05      	ldr	r3, [pc, #20]	@ (800b95c <TL_TRACES_Init+0x20>)
 800b948:	695b      	ldr	r3, [r3, #20]
 800b94a:	4a03      	ldr	r2, [pc, #12]	@ (800b958 <TL_TRACES_Init+0x1c>)
 800b94c:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800b94e:	f002 fc8f 	bl	800e270 <HW_IPCC_TRACES_Init>

  return;
 800b952:	bf00      	nop
}
 800b954:	bd80      	pop	{r7, pc}
 800b956:	bf00      	nop
 800b958:	200300c0 	.word	0x200300c0
 800b95c:	20030000 	.word	0x20030000

0800b960 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800b960:	b580      	push	{r7, lr}
 800b962:	b082      	sub	sp, #8
 800b964:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800b966:	e008      	b.n	800b97a <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800b968:	1d3b      	adds	r3, r7, #4
 800b96a:	4619      	mov	r1, r3
 800b96c:	4808      	ldr	r0, [pc, #32]	@ (800b990 <HW_IPCC_TRACES_EvtNot+0x30>)
 800b96e:	f000 f9d8 	bl	800bd22 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	4618      	mov	r0, r3
 800b976:	f000 f80d 	bl	800b994 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800b97a:	4805      	ldr	r0, [pc, #20]	@ (800b990 <HW_IPCC_TRACES_EvtNot+0x30>)
 800b97c:	f000 f942 	bl	800bc04 <LST_is_empty>
 800b980:	4603      	mov	r3, r0
 800b982:	2b00      	cmp	r3, #0
 800b984:	d0f0      	beq.n	800b968 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800b986:	bf00      	nop
}
 800b988:	3708      	adds	r7, #8
 800b98a:	46bd      	mov	sp, r7
 800b98c:	bd80      	pop	{r7, pc}
 800b98e:	bf00      	nop
 800b990:	200300c0 	.word	0x200300c0

0800b994 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 800b994:	b480      	push	{r7}
 800b996:	b083      	sub	sp, #12
 800b998:	af00      	add	r7, sp, #0
 800b99a:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 800b99c:	bf00      	nop
 800b99e:	370c      	adds	r7, #12
 800b9a0:	46bd      	mov	sp, r7
 800b9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a6:	4770      	bx	lr

0800b9a8 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800b9a8:	b480      	push	{r7}
 800b9aa:	b085      	sub	sp, #20
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	4603      	mov	r3, r0
 800b9b0:	6039      	str	r1, [r7, #0]
 800b9b2:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 800b9b4:	79fb      	ldrb	r3, [r7, #7]
 800b9b6:	2b06      	cmp	r3, #6
 800b9b8:	d845      	bhi.n	800ba46 <OutputDbgTrace+0x9e>
 800b9ba:	a201      	add	r2, pc, #4	@ (adr r2, 800b9c0 <OutputDbgTrace+0x18>)
 800b9bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9c0:	0800b9dd 	.word	0x0800b9dd
 800b9c4:	0800ba01 	.word	0x0800ba01
 800b9c8:	0800ba07 	.word	0x0800ba07
 800b9cc:	0800ba1b 	.word	0x0800ba1b
 800b9d0:	0800ba27 	.word	0x0800ba27
 800b9d4:	0800ba2d 	.word	0x0800ba2d
 800b9d8:	0800ba3b 	.word	0x0800ba3b
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800b9dc:	683b      	ldr	r3, [r7, #0]
 800b9de:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	7a5b      	ldrb	r3, [r3, #9]
 800b9e4:	2bff      	cmp	r3, #255	@ 0xff
 800b9e6:	d005      	beq.n	800b9f4 <OutputDbgTrace+0x4c>
 800b9e8:	2bff      	cmp	r3, #255	@ 0xff
 800b9ea:	dc05      	bgt.n	800b9f8 <OutputDbgTrace+0x50>
 800b9ec:	2b0e      	cmp	r3, #14
 800b9ee:	d005      	beq.n	800b9fc <OutputDbgTrace+0x54>
 800b9f0:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800b9f2:	e001      	b.n	800b9f8 <OutputDbgTrace+0x50>
          break;
 800b9f4:	bf00      	nop
 800b9f6:	e027      	b.n	800ba48 <OutputDbgTrace+0xa0>
          break;
 800b9f8:	bf00      	nop
 800b9fa:	e025      	b.n	800ba48 <OutputDbgTrace+0xa0>
          break;
 800b9fc:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800b9fe:	e023      	b.n	800ba48 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800ba00:	683b      	ldr	r3, [r7, #0]
 800ba02:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800ba04:	e020      	b.n	800ba48 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800ba06:	683b      	ldr	r3, [r7, #0]
 800ba08:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	7a5b      	ldrb	r3, [r3, #9]
 800ba0e:	2b0e      	cmp	r3, #14
 800ba10:	d001      	beq.n	800ba16 <OutputDbgTrace+0x6e>
 800ba12:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800ba14:	e000      	b.n	800ba18 <OutputDbgTrace+0x70>
          break;
 800ba16:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800ba18:	e016      	b.n	800ba48 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800ba1a:	683b      	ldr	r3, [r7, #0]
 800ba1c:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	7a5b      	ldrb	r3, [r3, #9]
 800ba22:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800ba24:	e010      	b.n	800ba48 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800ba26:	683b      	ldr	r3, [r7, #0]
 800ba28:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800ba2a:	e00d      	b.n	800ba48 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800ba2c:	683b      	ldr	r3, [r7, #0]
 800ba2e:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	7a5b      	ldrb	r3, [r3, #9]
 800ba34:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800ba36:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800ba38:	e006      	b.n	800ba48 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800ba3a:	683b      	ldr	r3, [r7, #0]
 800ba3c:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	7a5b      	ldrb	r3, [r3, #9]
 800ba42:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800ba44:	e000      	b.n	800ba48 <OutputDbgTrace+0xa0>

    default:
      break;
 800ba46:	bf00      	nop
  }

  return;
 800ba48:	bf00      	nop
}
 800ba4a:	3714      	adds	r7, #20
 800ba4c:	46bd      	mov	sp, r7
 800ba4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba52:	4770      	bx	lr

0800ba54 <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 800ba54:	b580      	push	{r7, lr}
 800ba56:	b086      	sub	sp, #24
 800ba58:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ba5a:	f3ef 8310 	mrs	r3, PRIMASK
 800ba5e:	60fb      	str	r3, [r7, #12]
  return(result);
 800ba60:	68fb      	ldr	r3, [r7, #12]
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  uint8_t* buf;
  uint16_t bufSize;

  BACKUP_PRIMASK();
 800ba62:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ba64:	b672      	cpsid	i
}
 800ba66:	bf00      	nop

  DISABLE_IRQ();			/**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  CircularQueue_Remove(&MsgDbgTraceQueue,&bufSize);
 800ba68:	1cbb      	adds	r3, r7, #2
 800ba6a:	4619      	mov	r1, r3
 800ba6c:	4812      	ldr	r0, [pc, #72]	@ (800bab8 <DbgTrace_TxCpltCallback+0x64>)
 800ba6e:	f000 fb9d 	bl	800c1ac <CircularQueue_Remove>

  /* Sense if new data to be sent */
  buf=CircularQueue_Sense(&MsgDbgTraceQueue,&bufSize);
 800ba72:	1cbb      	adds	r3, r7, #2
 800ba74:	4619      	mov	r1, r3
 800ba76:	4810      	ldr	r0, [pc, #64]	@ (800bab8 <DbgTrace_TxCpltCallback+0x64>)
 800ba78:	f000 fc87 	bl	800c38a <CircularQueue_Sense>
 800ba7c:	6138      	str	r0, [r7, #16]


  if ( buf != NULL) 
 800ba7e:	693b      	ldr	r3, [r7, #16]
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d00c      	beq.n	800ba9e <DbgTrace_TxCpltCallback+0x4a>
 800ba84:	697b      	ldr	r3, [r7, #20]
 800ba86:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ba88:	68bb      	ldr	r3, [r7, #8]
 800ba8a:	f383 8810 	msr	PRIMASK, r3
}
 800ba8e:	bf00      	nop
  {
    RESTORE_PRIMASK();
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 800ba90:	887b      	ldrh	r3, [r7, #2]
 800ba92:	4a0a      	ldr	r2, [pc, #40]	@ (800babc <DbgTrace_TxCpltCallback+0x68>)
 800ba94:	4619      	mov	r1, r3
 800ba96:	6938      	ldr	r0, [r7, #16]
 800ba98:	f7f5 fba0 	bl	80011dc <DbgOutputTraces>

  DbgTracePeripheralReady = SET;

  RESTORE_PRIMASK();
#endif
}
 800ba9c:	e008      	b.n	800bab0 <DbgTrace_TxCpltCallback+0x5c>
    DbgTracePeripheralReady = SET;
 800ba9e:	4b08      	ldr	r3, [pc, #32]	@ (800bac0 <DbgTrace_TxCpltCallback+0x6c>)
 800baa0:	2201      	movs	r2, #1
 800baa2:	701a      	strb	r2, [r3, #0]
 800baa4:	697b      	ldr	r3, [r7, #20]
 800baa6:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	f383 8810 	msr	PRIMASK, r3
}
 800baae:	bf00      	nop
}
 800bab0:	bf00      	nop
 800bab2:	3718      	adds	r7, #24
 800bab4:	46bd      	mov	sp, r7
 800bab6:	bd80      	pop	{r7, pc}
 800bab8:	200004b4 	.word	0x200004b4
 800babc:	0800ba55 	.word	0x0800ba55
 800bac0:	20000011 	.word	0x20000011

0800bac4 <_write>:
 * @param	bufsize buffer size
 * @param	...: arguments to be formatted in format string
 * @retval none
 */
size_t _write(int handle, const unsigned char * buf, size_t bufSize)
{
 800bac4:	b580      	push	{r7, lr}
 800bac6:	b084      	sub	sp, #16
 800bac8:	af00      	add	r7, sp, #0
 800baca:	60f8      	str	r0, [r7, #12]
 800bacc:	60b9      	str	r1, [r7, #8]
 800bace:	607a      	str	r2, [r7, #4]
  return ( DbgTraceWrite(handle, buf, bufSize) );
 800bad0:	687a      	ldr	r2, [r7, #4]
 800bad2:	68b9      	ldr	r1, [r7, #8]
 800bad4:	68f8      	ldr	r0, [r7, #12]
 800bad6:	f000 f805 	bl	800bae4 <DbgTraceWrite>
 800bada:	4603      	mov	r3, r0
}
 800badc:	4618      	mov	r0, r3
 800bade:	3710      	adds	r7, #16
 800bae0:	46bd      	mov	sp, r7
 800bae2:	bd80      	pop	{r7, pc}

0800bae4 <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 800bae4:	b580      	push	{r7, lr}
 800bae6:	b08a      	sub	sp, #40	@ 0x28
 800bae8:	af00      	add	r7, sp, #0
 800baea:	60f8      	str	r0, [r7, #12]
 800baec:	60b9      	str	r1, [r7, #8]
 800baee:	607a      	str	r2, [r7, #4]
  size_t chars_written = 0;
 800baf0:	2300      	movs	r3, #0
 800baf2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800baf4:	f3ef 8310 	mrs	r3, PRIMASK
 800baf8:	61bb      	str	r3, [r7, #24]
  return(result);
 800bafa:	69bb      	ldr	r3, [r7, #24]
  uint8_t* buffer;

  BACKUP_PRIMASK();
 800bafc:	623b      	str	r3, [r7, #32]

  /* Ignore flushes */
  if ( handle == -1 )
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb04:	d102      	bne.n	800bb0c <DbgTraceWrite+0x28>
  {
    chars_written = ( size_t ) 0;
 800bb06:	2300      	movs	r3, #0
 800bb08:	627b      	str	r3, [r7, #36]	@ 0x24
 800bb0a:	e037      	b.n	800bb7c <DbgTraceWrite+0x98>
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	2b01      	cmp	r3, #1
 800bb10:	d006      	beq.n	800bb20 <DbgTraceWrite+0x3c>
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	2b02      	cmp	r3, #2
 800bb16:	d003      	beq.n	800bb20 <DbgTraceWrite+0x3c>
  {
    chars_written = ( size_t ) - 1;
 800bb18:	f04f 33ff 	mov.w	r3, #4294967295
 800bb1c:	627b      	str	r3, [r7, #36]	@ 0x24
 800bb1e:	e02d      	b.n	800bb7c <DbgTraceWrite+0x98>
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d02a      	beq.n	800bb7c <DbgTraceWrite+0x98>
  {
    chars_written = bufSize;
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 800bb2a:	b672      	cpsid	i
}
 800bb2c:	bf00      	nop
    /* If queue emepty and TX free, send directly */
    /* CS Start */

#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
    DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
    buffer=CircularQueue_Add(&MsgDbgTraceQueue,(uint8_t*)buf, bufSize,1);
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	b29a      	uxth	r2, r3
 800bb32:	2301      	movs	r3, #1
 800bb34:	68b9      	ldr	r1, [r7, #8]
 800bb36:	4814      	ldr	r0, [pc, #80]	@ (800bb88 <DbgTraceWrite+0xa4>)
 800bb38:	f000 f912 	bl	800bd60 <CircularQueue_Add>
 800bb3c:	61f8      	str	r0, [r7, #28]
    if (buffer && DbgTracePeripheralReady)
 800bb3e:	69fb      	ldr	r3, [r7, #28]
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d015      	beq.n	800bb70 <DbgTraceWrite+0x8c>
 800bb44:	4b11      	ldr	r3, [pc, #68]	@ (800bb8c <DbgTraceWrite+0xa8>)
 800bb46:	781b      	ldrb	r3, [r3, #0]
 800bb48:	b2db      	uxtb	r3, r3
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d010      	beq.n	800bb70 <DbgTraceWrite+0x8c>
    {
      DbgTracePeripheralReady = RESET;
 800bb4e:	4b0f      	ldr	r3, [pc, #60]	@ (800bb8c <DbgTraceWrite+0xa8>)
 800bb50:	2200      	movs	r2, #0
 800bb52:	701a      	strb	r2, [r3, #0]
 800bb54:	6a3b      	ldr	r3, [r7, #32]
 800bb56:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bb58:	697b      	ldr	r3, [r7, #20]
 800bb5a:	f383 8810 	msr	PRIMASK, r3
}
 800bb5e:	bf00      	nop
      RESTORE_PRIMASK();
      DbgOutputTraces((uint8_t*)buffer, bufSize, DbgTrace_TxCpltCallback);
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	b29b      	uxth	r3, r3
 800bb64:	4a0a      	ldr	r2, [pc, #40]	@ (800bb90 <DbgTraceWrite+0xac>)
 800bb66:	4619      	mov	r1, r3
 800bb68:	69f8      	ldr	r0, [r7, #28]
 800bb6a:	f7f5 fb37 	bl	80011dc <DbgOutputTraces>
 800bb6e:	e005      	b.n	800bb7c <DbgTraceWrite+0x98>
 800bb70:	6a3b      	ldr	r3, [r7, #32]
 800bb72:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bb74:	693b      	ldr	r3, [r7, #16]
 800bb76:	f383 8810 	msr	PRIMASK, r3
}
 800bb7a:	bf00      	nop
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
    while (!DbgTracePeripheralReady);
#endif
    /* CS END */
  }
  return ( chars_written );
 800bb7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800bb7e:	4618      	mov	r0, r3
 800bb80:	3728      	adds	r7, #40	@ 0x28
 800bb82:	46bd      	mov	sp, r7
 800bb84:	bd80      	pop	{r7, pc}
 800bb86:	bf00      	nop
 800bb88:	200004b4 	.word	0x200004b4
 800bb8c:	20000011 	.word	0x20000011
 800bb90:	0800ba55 	.word	0x0800ba55

0800bb94 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800bb94:	b480      	push	{r7}
 800bb96:	b085      	sub	sp, #20
 800bb98:	af00      	add	r7, sp, #0
 800bb9a:	4603      	mov	r3, r0
 800bb9c:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800bb9e:	4b0f      	ldr	r3, [pc, #60]	@ (800bbdc <OTP_Read+0x48>)
 800bba0:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800bba2:	e002      	b.n	800bbaa <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	3b08      	subs	r3, #8
 800bba8:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	3307      	adds	r3, #7
 800bbae:	781b      	ldrb	r3, [r3, #0]
 800bbb0:	79fa      	ldrb	r2, [r7, #7]
 800bbb2:	429a      	cmp	r2, r3
 800bbb4:	d003      	beq.n	800bbbe <OTP_Read+0x2a>
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	4a09      	ldr	r2, [pc, #36]	@ (800bbe0 <OTP_Read+0x4c>)
 800bbba:	4293      	cmp	r3, r2
 800bbbc:	d1f2      	bne.n	800bba4 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	3307      	adds	r3, #7
 800bbc2:	781b      	ldrb	r3, [r3, #0]
 800bbc4:	79fa      	ldrb	r2, [r7, #7]
 800bbc6:	429a      	cmp	r2, r3
 800bbc8:	d001      	beq.n	800bbce <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800bbca:	2300      	movs	r3, #0
 800bbcc:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800bbce:	68fb      	ldr	r3, [r7, #12]
}
 800bbd0:	4618      	mov	r0, r3
 800bbd2:	3714      	adds	r7, #20
 800bbd4:	46bd      	mov	sp, r7
 800bbd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbda:	4770      	bx	lr
 800bbdc:	1fff73f8 	.word	0x1fff73f8
 800bbe0:	1fff7000 	.word	0x1fff7000

0800bbe4 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800bbe4:	b480      	push	{r7}
 800bbe6:	b083      	sub	sp, #12
 800bbe8:	af00      	add	r7, sp, #0
 800bbea:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	687a      	ldr	r2, [r7, #4]
 800bbf0:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	687a      	ldr	r2, [r7, #4]
 800bbf6:	605a      	str	r2, [r3, #4]
}
 800bbf8:	bf00      	nop
 800bbfa:	370c      	adds	r7, #12
 800bbfc:	46bd      	mov	sp, r7
 800bbfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc02:	4770      	bx	lr

0800bc04 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800bc04:	b480      	push	{r7}
 800bc06:	b087      	sub	sp, #28
 800bc08:	af00      	add	r7, sp, #0
 800bc0a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bc0c:	f3ef 8310 	mrs	r3, PRIMASK
 800bc10:	60fb      	str	r3, [r7, #12]
  return(result);
 800bc12:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800bc14:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800bc16:	b672      	cpsid	i
}
 800bc18:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	687a      	ldr	r2, [r7, #4]
 800bc20:	429a      	cmp	r2, r3
 800bc22:	d102      	bne.n	800bc2a <LST_is_empty+0x26>
  {
    return_value = TRUE;
 800bc24:	2301      	movs	r3, #1
 800bc26:	75fb      	strb	r3, [r7, #23]
 800bc28:	e001      	b.n	800bc2e <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 800bc2a:	2300      	movs	r3, #0
 800bc2c:	75fb      	strb	r3, [r7, #23]
 800bc2e:	693b      	ldr	r3, [r7, #16]
 800bc30:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bc32:	68bb      	ldr	r3, [r7, #8]
 800bc34:	f383 8810 	msr	PRIMASK, r3
}
 800bc38:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800bc3a:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc3c:	4618      	mov	r0, r3
 800bc3e:	371c      	adds	r7, #28
 800bc40:	46bd      	mov	sp, r7
 800bc42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc46:	4770      	bx	lr

0800bc48 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800bc48:	b480      	push	{r7}
 800bc4a:	b087      	sub	sp, #28
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	6078      	str	r0, [r7, #4]
 800bc50:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bc52:	f3ef 8310 	mrs	r3, PRIMASK
 800bc56:	60fb      	str	r3, [r7, #12]
  return(result);
 800bc58:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800bc5a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800bc5c:	b672      	cpsid	i
}
 800bc5e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	681a      	ldr	r2, [r3, #0]
 800bc64:	683b      	ldr	r3, [r7, #0]
 800bc66:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800bc68:	683b      	ldr	r3, [r7, #0]
 800bc6a:	687a      	ldr	r2, [r7, #4]
 800bc6c:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	683a      	ldr	r2, [r7, #0]
 800bc72:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800bc74:	683b      	ldr	r3, [r7, #0]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	683a      	ldr	r2, [r7, #0]
 800bc7a:	605a      	str	r2, [r3, #4]
 800bc7c:	697b      	ldr	r3, [r7, #20]
 800bc7e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bc80:	693b      	ldr	r3, [r7, #16]
 800bc82:	f383 8810 	msr	PRIMASK, r3
}
 800bc86:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800bc88:	bf00      	nop
 800bc8a:	371c      	adds	r7, #28
 800bc8c:	46bd      	mov	sp, r7
 800bc8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc92:	4770      	bx	lr

0800bc94 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800bc94:	b480      	push	{r7}
 800bc96:	b087      	sub	sp, #28
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	6078      	str	r0, [r7, #4]
 800bc9c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bc9e:	f3ef 8310 	mrs	r3, PRIMASK
 800bca2:	60fb      	str	r3, [r7, #12]
  return(result);
 800bca4:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800bca6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800bca8:	b672      	cpsid	i
}
 800bcaa:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800bcac:	683b      	ldr	r3, [r7, #0]
 800bcae:	687a      	ldr	r2, [r7, #4]
 800bcb0:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	685a      	ldr	r2, [r3, #4]
 800bcb6:	683b      	ldr	r3, [r7, #0]
 800bcb8:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	683a      	ldr	r2, [r7, #0]
 800bcbe:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800bcc0:	683b      	ldr	r3, [r7, #0]
 800bcc2:	685b      	ldr	r3, [r3, #4]
 800bcc4:	683a      	ldr	r2, [r7, #0]
 800bcc6:	601a      	str	r2, [r3, #0]
 800bcc8:	697b      	ldr	r3, [r7, #20]
 800bcca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bccc:	693b      	ldr	r3, [r7, #16]
 800bcce:	f383 8810 	msr	PRIMASK, r3
}
 800bcd2:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800bcd4:	bf00      	nop
 800bcd6:	371c      	adds	r7, #28
 800bcd8:	46bd      	mov	sp, r7
 800bcda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcde:	4770      	bx	lr

0800bce0 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800bce0:	b480      	push	{r7}
 800bce2:	b087      	sub	sp, #28
 800bce4:	af00      	add	r7, sp, #0
 800bce6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bce8:	f3ef 8310 	mrs	r3, PRIMASK
 800bcec:	60fb      	str	r3, [r7, #12]
  return(result);
 800bcee:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800bcf0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800bcf2:	b672      	cpsid	i
}
 800bcf4:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	685b      	ldr	r3, [r3, #4]
 800bcfa:	687a      	ldr	r2, [r7, #4]
 800bcfc:	6812      	ldr	r2, [r2, #0]
 800bcfe:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	687a      	ldr	r2, [r7, #4]
 800bd06:	6852      	ldr	r2, [r2, #4]
 800bd08:	605a      	str	r2, [r3, #4]
 800bd0a:	697b      	ldr	r3, [r7, #20]
 800bd0c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bd0e:	693b      	ldr	r3, [r7, #16]
 800bd10:	f383 8810 	msr	PRIMASK, r3
}
 800bd14:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800bd16:	bf00      	nop
 800bd18:	371c      	adds	r7, #28
 800bd1a:	46bd      	mov	sp, r7
 800bd1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd20:	4770      	bx	lr

0800bd22 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800bd22:	b580      	push	{r7, lr}
 800bd24:	b086      	sub	sp, #24
 800bd26:	af00      	add	r7, sp, #0
 800bd28:	6078      	str	r0, [r7, #4]
 800bd2a:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bd2c:	f3ef 8310 	mrs	r3, PRIMASK
 800bd30:	60fb      	str	r3, [r7, #12]
  return(result);
 800bd32:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800bd34:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800bd36:	b672      	cpsid	i
}
 800bd38:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	681a      	ldr	r2, [r3, #0]
 800bd3e:	683b      	ldr	r3, [r7, #0]
 800bd40:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	4618      	mov	r0, r3
 800bd48:	f7ff ffca 	bl	800bce0 <LST_remove_node>
 800bd4c:	697b      	ldr	r3, [r7, #20]
 800bd4e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bd50:	693b      	ldr	r3, [r7, #16]
 800bd52:	f383 8810 	msr	PRIMASK, r3
}
 800bd56:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800bd58:	bf00      	nop
 800bd5a:	3718      	adds	r7, #24
 800bd5c:	46bd      	mov	sp, r7
 800bd5e:	bd80      	pop	{r7, pc}

0800bd60 <CircularQueue_Add>:
  * @param  elementSize:  Size of element to be added to the queue. Only used if the queue manage variable size elements
  * @param  nbElements:  number of elements in the in buffer pointed by x
  * @retval  pointer on last element just added to the queue, NULL if the element to be added do not fit in the queue (too big)
  */
uint8_t* CircularQueue_Add(queue_t *q, uint8_t* x, uint16_t elementSize, uint32_t nbElements)
{
 800bd60:	b580      	push	{r7, lr}
 800bd62:	b08e      	sub	sp, #56	@ 0x38
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	60f8      	str	r0, [r7, #12]
 800bd68:	60b9      	str	r1, [r7, #8]
 800bd6a:	603b      	str	r3, [r7, #0]
 800bd6c:	4613      	mov	r3, r2
 800bd6e:	80fb      	strh	r3, [r7, #6]

  uint8_t* ptr = NULL;                      /* fct return ptr to the element freshly added, if no room fct return NULL */
 800bd70:	2300      	movs	r3, #0
 800bd72:	623b      	str	r3, [r7, #32]
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 800bd74:	2300      	movs	r3, #0
 800bd76:	86fb      	strh	r3, [r7, #54]	@ 0x36
  uint8_t  elemSizeStorageRoom  = 0 ;       /* Indicate the header (which contain only size) of element in case of varaibale size element (q->elementsize == 0) */
 800bd78:	2300      	movs	r3, #0
 800bd7a:	77fb      	strb	r3, [r7, #31]
  uint32_t curBuffPosition;                  /* the current position in the queue buffer */
  uint32_t i;                               /* loop counter */
  uint32_t NbBytesToCopy = 0, NbCopiedBytes = 0 ; /* Indicators for copying bytes in queue */
 800bd7c:	2300      	movs	r3, #0
 800bd7e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bd80:	2300      	movs	r3, #0
 800bd82:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t eob_free_size;                         /* Eof End of Quque Buffer Free Size */
  uint8_t  wrap_will_occur = 0;                   /* indicate if a wrap around will occurs */
 800bd84:	2300      	movs	r3, #0
 800bd86:	77bb      	strb	r3, [r7, #30]
  uint8_t  wrapped_element_eob_size;              /* In case of Wrap around, indicate size of parta of element that fit at thened of the queuue  buffer */
  uint16_t overhead = 0;                          /* In case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG or CIRCULAR_QUEUE_NO_WRAP_FLAG options, 
 800bd88:	2300      	movs	r3, #0
 800bd8a:	83bb      	strh	r3, [r7, #28]
                                                     indcate the size overhead that will be generated by adding the element with wrap management (split or no wrap ) */ 
  
  
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	891b      	ldrh	r3, [r3, #8]
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d101      	bne.n	800bd98 <CircularQueue_Add+0x38>
 800bd94:	2302      	movs	r3, #2
 800bd96:	e000      	b.n	800bd9a <CircularQueue_Add+0x3a>
 800bd98:	2300      	movs	r3, #0
 800bd9a:	77fb      	strb	r3, [r7, #31]
  /* retrieve the size of last element sored: the value stored at the beginning of the queue element if element size is variable otherwise take it from fixed element Size member */
  if (q->byteCount)
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	695b      	ldr	r3, [r3, #20]
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d029      	beq.n	800bdf8 <CircularQueue_Add+0x98>
  {
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	891b      	ldrh	r3, [r3, #8]
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d122      	bne.n	800bdf2 <CircularQueue_Add+0x92>
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	681a      	ldr	r2, [r3, #0]
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	691b      	ldr	r3, [r3, #16]
 800bdb4:	4413      	add	r3, r2
 800bdb6:	781b      	ldrb	r3, [r3, #0]
 800bdb8:	4618      	mov	r0, r3
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	681a      	ldr	r2, [r3, #0]
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	691b      	ldr	r3, [r3, #16]
 800bdc2:	1c59      	adds	r1, r3, #1
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	685b      	ldr	r3, [r3, #4]
 800bdc8:	4299      	cmp	r1, r3
 800bdca:	d306      	bcc.n	800bdda <CircularQueue_Add+0x7a>
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	6919      	ldr	r1, [r3, #16]
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	685b      	ldr	r3, [r3, #4]
 800bdd4:	1acb      	subs	r3, r1, r3
 800bdd6:	3301      	adds	r3, #1
 800bdd8:	e002      	b.n	800bde0 <CircularQueue_Add+0x80>
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	691b      	ldr	r3, [r3, #16]
 800bdde:	3301      	adds	r3, #1
 800bde0:	4413      	add	r3, r2
 800bde2:	781b      	ldrb	r3, [r3, #0]
 800bde4:	021b      	lsls	r3, r3, #8
 800bde6:	b29b      	uxth	r3, r3
 800bde8:	4403      	add	r3, r0
 800bdea:	b29b      	uxth	r3, r3
 800bdec:	3302      	adds	r3, #2
 800bdee:	b29b      	uxth	r3, r3
 800bdf0:	e001      	b.n	800bdf6 <CircularQueue_Add+0x96>
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	891b      	ldrh	r3, [r3, #8]
 800bdf6:	86fb      	strh	r3, [r7, #54]	@ 0x36
  }
  /* if queue element have fixed size , reset the elementSize arg with fixed element size value */
  if (q->elementSize > 0)               
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	891b      	ldrh	r3, [r3, #8]
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d002      	beq.n	800be06 <CircularQueue_Add+0xa6>
  {
    elementSize = q->elementSize;
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	891b      	ldrh	r3, [r3, #8]
 800be04:	80fb      	strh	r3, [r7, #6]
  }

   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	691a      	ldr	r2, [r3, #16]
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	68db      	ldr	r3, [r3, #12]
 800be0e:	429a      	cmp	r2, r3
 800be10:	d307      	bcc.n	800be22 <CircularQueue_Add+0xc2>
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	685a      	ldr	r2, [r3, #4]
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	6919      	ldr	r1, [r3, #16]
 800be1a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800be1c:	440b      	add	r3, r1
 800be1e:	1ad3      	subs	r3, r2, r3
 800be20:	e000      	b.n	800be24 <CircularQueue_Add+0xc4>
 800be22:	2300      	movs	r3, #0
 800be24:	61bb      	str	r3, [r7, #24]

   /* check how many bytes of wrapped element (if anay) are at end of buffer */
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 800be26:	88fa      	ldrh	r2, [r7, #6]
 800be28:	7ffb      	ldrb	r3, [r7, #31]
 800be2a:	4413      	add	r3, r2
 800be2c:	461a      	mov	r2, r3
 800be2e:	683b      	ldr	r3, [r7, #0]
 800be30:	fb02 f303 	mul.w	r3, r2, r3
 800be34:	69ba      	ldr	r2, [r7, #24]
 800be36:	429a      	cmp	r2, r3
 800be38:	d80b      	bhi.n	800be52 <CircularQueue_Add+0xf2>
 800be3a:	88fa      	ldrh	r2, [r7, #6]
 800be3c:	7ffb      	ldrb	r3, [r7, #31]
 800be3e:	4413      	add	r3, r2
 800be40:	461a      	mov	r2, r3
 800be42:	69bb      	ldr	r3, [r7, #24]
 800be44:	fbb3 f1f2 	udiv	r1, r3, r2
 800be48:	fb01 f202 	mul.w	r2, r1, r2
 800be4c:	1a9b      	subs	r3, r3, r2
 800be4e:	b2db      	uxtb	r3, r3
 800be50:	e000      	b.n	800be54 <CircularQueue_Add+0xf4>
 800be52:	2300      	movs	r3, #0
 800be54:	75fb      	strb	r3, [r7, #23]
   wrap_will_occur  = wrapped_element_eob_size > elemSizeStorageRoom;
 800be56:	7dfa      	ldrb	r2, [r7, #23]
 800be58:	7ffb      	ldrb	r3, [r7, #31]
 800be5a:	429a      	cmp	r2, r3
 800be5c:	bf8c      	ite	hi
 800be5e:	2301      	movhi	r3, #1
 800be60:	2300      	movls	r3, #0
 800be62:	b2db      	uxtb	r3, r3
 800be64:	77bb      	strb	r3, [r7, #30]

   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 800be66:	7fbb      	ldrb	r3, [r7, #30]
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d008      	beq.n	800be7e <CircularQueue_Add+0x11e>
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	7f1b      	ldrb	r3, [r3, #28]
 800be70:	f003 0301 	and.w	r3, r3, #1
 800be74:	2b00      	cmp	r3, #0
 800be76:	d002      	beq.n	800be7e <CircularQueue_Add+0x11e>
 800be78:	7dfb      	ldrb	r3, [r7, #23]
 800be7a:	b29b      	uxth	r3, r3
 800be7c:	e000      	b.n	800be80 <CircularQueue_Add+0x120>
 800be7e:	8bbb      	ldrh	r3, [r7, #28]
 800be80:	83bb      	strh	r3, [r7, #28]
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ? elemSizeStorageRoom  : overhead;
 800be82:	7fbb      	ldrb	r3, [r7, #30]
 800be84:	2b00      	cmp	r3, #0
 800be86:	d008      	beq.n	800be9a <CircularQueue_Add+0x13a>
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	7f1b      	ldrb	r3, [r3, #28]
 800be8c:	f003 0302 	and.w	r3, r3, #2
 800be90:	2b00      	cmp	r3, #0
 800be92:	d002      	beq.n	800be9a <CircularQueue_Add+0x13a>
 800be94:	7ffb      	ldrb	r3, [r7, #31]
 800be96:	b29b      	uxth	r3, r3
 800be98:	e000      	b.n	800be9c <CircularQueue_Add+0x13c>
 800be9a:	8bbb      	ldrh	r3, [r7, #28]
 800be9c:	83bb      	strh	r3, [r7, #28]
   
   
  /* Store now the elements if ennough room for all elements */
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 800be9e:	88fb      	ldrh	r3, [r7, #6]
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	f000 817e 	beq.w	800c1a2 <CircularQueue_Add+0x442>
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	695a      	ldr	r2, [r3, #20]
 800beaa:	88f9      	ldrh	r1, [r7, #6]
 800beac:	7ffb      	ldrb	r3, [r7, #31]
 800beae:	440b      	add	r3, r1
 800beb0:	4619      	mov	r1, r3
 800beb2:	683b      	ldr	r3, [r7, #0]
 800beb4:	fb01 f303 	mul.w	r3, r1, r3
 800beb8:	441a      	add	r2, r3
 800beba:	8bbb      	ldrh	r3, [r7, #28]
 800bebc:	441a      	add	r2, r3
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	685b      	ldr	r3, [r3, #4]
 800bec2:	429a      	cmp	r2, r3
 800bec4:	f200 816d 	bhi.w	800c1a2 <CircularQueue_Add+0x442>
  { 
    /* loop to add all elements  */
    for (i=0; i < nbElements; i++) 
 800bec8:	2300      	movs	r3, #0
 800beca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800becc:	e14a      	b.n	800c164 <CircularQueue_Add+0x404>
    {
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	691a      	ldr	r2, [r3, #16]
 800bed2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800bed4:	441a      	add	r2, r3
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	685b      	ldr	r3, [r3, #4]
 800beda:	429a      	cmp	r2, r3
 800bedc:	d307      	bcc.n	800beee <CircularQueue_Add+0x18e>
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	691a      	ldr	r2, [r3, #16]
 800bee2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800bee4:	441a      	add	r2, r3
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	685b      	ldr	r3, [r3, #4]
 800beea:	1ad3      	subs	r3, r2, r3
 800beec:	e003      	b.n	800bef6 <CircularQueue_Add+0x196>
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	691a      	ldr	r2, [r3, #16]
 800bef2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800bef4:	4413      	add	r3, r2
 800bef6:	68fa      	ldr	r2, [r7, #12]
 800bef8:	6113      	str	r3, [r2, #16]
      curBuffPosition = q->last;
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	691b      	ldr	r3, [r3, #16]
 800befe:	633b      	str	r3, [r7, #48]	@ 0x30
      
      /* store the element  */
      /* store first the element size if element size is variable */
      if (q->elementSize == 0) 
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	891b      	ldrh	r3, [r3, #8]
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d130      	bne.n	800bf6a <CircularQueue_Add+0x20a>
      {
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	681a      	ldr	r2, [r3, #0]
 800bf0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf0e:	1c59      	adds	r1, r3, #1
 800bf10:	6339      	str	r1, [r7, #48]	@ 0x30
 800bf12:	4413      	add	r3, r2
 800bf14:	88fa      	ldrh	r2, [r7, #6]
 800bf16:	b2d2      	uxtb	r2, r2
 800bf18:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	685b      	ldr	r3, [r3, #4]
 800bf1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bf20:	429a      	cmp	r2, r3
 800bf22:	d304      	bcc.n	800bf2e <CircularQueue_Add+0x1ce>
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	685b      	ldr	r3, [r3, #4]
 800bf28:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bf2a:	1ad3      	subs	r3, r2, r3
 800bf2c:	e000      	b.n	800bf30 <CircularQueue_Add+0x1d0>
 800bf2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf30:	633b      	str	r3, [r7, #48]	@ 0x30
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 800bf32:	88fb      	ldrh	r3, [r7, #6]
 800bf34:	0a1b      	lsrs	r3, r3, #8
 800bf36:	b298      	uxth	r0, r3
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	681a      	ldr	r2, [r3, #0]
 800bf3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf3e:	1c59      	adds	r1, r3, #1
 800bf40:	6339      	str	r1, [r7, #48]	@ 0x30
 800bf42:	4413      	add	r3, r2
 800bf44:	b2c2      	uxtb	r2, r0
 800bf46:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	685b      	ldr	r3, [r3, #4]
 800bf4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bf4e:	429a      	cmp	r2, r3
 800bf50:	d304      	bcc.n	800bf5c <CircularQueue_Add+0x1fc>
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	685b      	ldr	r3, [r3, #4]
 800bf56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bf58:	1ad3      	subs	r3, r2, r3
 800bf5a:	e000      	b.n	800bf5e <CircularQueue_Add+0x1fe>
 800bf5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf5e:	633b      	str	r3, [r7, #48]	@ 0x30
        q->byteCount += 2;
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	695b      	ldr	r3, [r3, #20]
 800bf64:	1c9a      	adds	r2, r3, #2
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	615a      	str	r2, [r3, #20]
      }
      
      /* Identify number of bytes of copy takeing account possible wrap, in this case NbBytesToCopy will contains size that fit at end of the queue buffer */
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 800bf6a:	88fa      	ldrh	r2, [r7, #6]
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	6859      	ldr	r1, [r3, #4]
 800bf70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf72:	1acb      	subs	r3, r1, r3
 800bf74:	4293      	cmp	r3, r2
 800bf76:	bf28      	it	cs
 800bf78:	4613      	movcs	r3, r2
 800bf7a:	62bb      	str	r3, [r7, #40]	@ 0x28
      /* check if no wrap (NbBytesToCopy == elementSize) or if Wrap and no spsicf option; 
         In this case part of data will copied at the end of the buffer and the rest a the beginning */
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
 800bf7c:	88fb      	ldrh	r3, [r7, #6]
 800bf7e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bf80:	429a      	cmp	r2, r3
 800bf82:	d007      	beq.n	800bf94 <CircularQueue_Add+0x234>
 800bf84:	88fb      	ldrh	r3, [r7, #6]
 800bf86:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bf88:	429a      	cmp	r2, r3
 800bf8a:	d225      	bcs.n	800bfd8 <CircularQueue_Add+0x278>
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	7f1b      	ldrb	r3, [r3, #28]
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d121      	bne.n	800bfd8 <CircularQueue_Add+0x278>
      {
        /* Copy First part (or emtire buffer ) from current position up to the end of the buffer queue (or before if enough room)  */
        memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	681a      	ldr	r2, [r3, #0]
 800bf98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf9a:	18d0      	adds	r0, r2, r3
 800bf9c:	88fb      	ldrh	r3, [r7, #6]
 800bf9e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bfa0:	fb02 f303 	mul.w	r3, r2, r3
 800bfa4:	68ba      	ldr	r2, [r7, #8]
 800bfa6:	4413      	add	r3, r2
 800bfa8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bfaa:	4619      	mov	r1, r3
 800bfac:	f002 fe79 	bl	800eca2 <memcpy>
        /* Adjust bytes count */
        q->byteCount += NbBytesToCopy;
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	695a      	ldr	r2, [r3, #20]
 800bfb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfb6:	441a      	add	r2, r3
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	615a      	str	r2, [r3, #20]
        /* Wrap */
        curBuffPosition = 0; 
 800bfbc:	2300      	movs	r3, #0
 800bfbe:	633b      	str	r3, [r7, #48]	@ 0x30
        /* set NbCopiedBytes bytes with  ampount copied */
        NbCopiedBytes = NbBytesToCopy;
 800bfc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfc2:	627b      	str	r3, [r7, #36]	@ 0x24
        /* set the rest to copy if wrao , if no wrap will be 0 */
        NbBytesToCopy = elementSize - NbBytesToCopy;
 800bfc4:	88fa      	ldrh	r2, [r7, #6]
 800bfc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfc8:	1ad3      	subs	r3, r2, r3
 800bfca:	62bb      	str	r3, [r7, #40]	@ 0x28
        /* set the current element Size, will be used to calaculate next last position at beginning of loop */
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 800bfcc:	7ffb      	ldrb	r3, [r7, #31]
 800bfce:	b29a      	uxth	r2, r3
 800bfd0:	88fb      	ldrh	r3, [r7, #6]
 800bfd2:	4413      	add	r3, r2
 800bfd4:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800bfd6:	e0a4      	b.n	800c122 <CircularQueue_Add+0x3c2>
      }
      else if (NbBytesToCopy)  /* We have a wrap  to manage */
 800bfd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	f000 80a1 	beq.w	800c122 <CircularQueue_Add+0x3c2>
      {
       /* case of CIRCULAR_QUEUE_NO_WRAP_FLAG option */
         if (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	7f1b      	ldrb	r3, [r3, #28]
 800bfe4:	f003 0301 	and.w	r3, r3, #1
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d03a      	beq.n	800c062 <CircularQueue_Add+0x302>
        {
          /* if element size are variable and NO_WRAP option, Invalidate end of buffer setting 0xFFFF size*/
          if (q->elementSize == 0)
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	891b      	ldrh	r3, [r3, #8]
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d10d      	bne.n	800c010 <CircularQueue_Add+0x2b0>
          {
             q->qBuff[curBuffPosition-2] = 0xFF;
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	681a      	ldr	r2, [r3, #0]
 800bff8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bffa:	3b02      	subs	r3, #2
 800bffc:	4413      	add	r3, r2
 800bffe:	22ff      	movs	r2, #255	@ 0xff
 800c000:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = 0xFF;
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	681a      	ldr	r2, [r3, #0]
 800c006:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c008:	3b01      	subs	r3, #1
 800c00a:	4413      	add	r3, r2
 800c00c:	22ff      	movs	r2, #255	@ 0xff
 800c00e:	701a      	strb	r2, [r3, #0]
          }
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	695a      	ldr	r2, [r3, #20]
 800c014:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c016:	441a      	add	r2, r3
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	615a      	str	r2, [r3, #20]
          /* No bytes coped a the end of buffer */
          NbCopiedBytes = 0;
 800c01c:	2300      	movs	r3, #0
 800c01e:	627b      	str	r3, [r7, #36]	@ 0x24
          /* all element to be copied at the begnning of buffer */
          NbBytesToCopy = elementSize; 
 800c020:	88fb      	ldrh	r3, [r7, #6]
 800c022:	62bb      	str	r3, [r7, #40]	@ 0x28
          /* Wrap */
          curBuffPosition = 0; 
 800c024:	2300      	movs	r3, #0
 800c026:	633b      	str	r3, [r7, #48]	@ 0x30
          /* if variable size element, invalidate end of buffer setting OxFFFF in element header (size) */
          if (q->elementSize == 0)
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	891b      	ldrh	r3, [r3, #8]
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d16f      	bne.n	800c110 <CircularQueue_Add+0x3b0>
          {
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	681a      	ldr	r2, [r3, #0]
 800c034:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c036:	1c59      	adds	r1, r3, #1
 800c038:	6339      	str	r1, [r7, #48]	@ 0x30
 800c03a:	4413      	add	r3, r2
 800c03c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c03e:	b2d2      	uxtb	r2, r2
 800c040:	701a      	strb	r2, [r3, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800c042:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c044:	0a18      	lsrs	r0, r3, #8
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	681a      	ldr	r2, [r3, #0]
 800c04a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c04c:	1c59      	adds	r1, r3, #1
 800c04e:	6339      	str	r1, [r7, #48]	@ 0x30
 800c050:	4413      	add	r3, r2
 800c052:	b2c2      	uxtb	r2, r0
 800c054:	701a      	strb	r2, [r3, #0]
            q->byteCount += 2;   
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	695b      	ldr	r3, [r3, #20]
 800c05a:	1c9a      	adds	r2, r3, #2
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	615a      	str	r2, [r3, #20]
 800c060:	e056      	b.n	800c110 <CircularQueue_Add+0x3b0>
          } 
           
        }
        /* case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG option */
        else if (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	7f1b      	ldrb	r3, [r3, #28]
 800c066:	f003 0302 	and.w	r3, r3, #2
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d050      	beq.n	800c110 <CircularQueue_Add+0x3b0>
        {
          if (q->elementSize == 0)
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	891b      	ldrh	r3, [r3, #8]
 800c072:	2b00      	cmp	r3, #0
 800c074:	d14a      	bne.n	800c10c <CircularQueue_Add+0x3ac>
          {
            /* reset the size of current element to the nb bytes fitting at the end of buffer */
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	681a      	ldr	r2, [r3, #0]
 800c07a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c07c:	3b02      	subs	r3, #2
 800c07e:	4413      	add	r3, r2
 800c080:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c082:	b2d2      	uxtb	r2, r2
 800c084:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800c086:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c088:	0a19      	lsrs	r1, r3, #8
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	681a      	ldr	r2, [r3, #0]
 800c08e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c090:	3b01      	subs	r3, #1
 800c092:	4413      	add	r3, r2
 800c094:	b2ca      	uxtb	r2, r1
 800c096:	701a      	strb	r2, [r3, #0]
             /* copy the bytes */ 
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	681a      	ldr	r2, [r3, #0]
 800c09c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c09e:	18d0      	adds	r0, r2, r3
 800c0a0:	88fb      	ldrh	r3, [r7, #6]
 800c0a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c0a4:	fb02 f303 	mul.w	r3, r2, r3
 800c0a8:	68ba      	ldr	r2, [r7, #8]
 800c0aa:	4413      	add	r3, r2
 800c0ac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c0ae:	4619      	mov	r1, r3
 800c0b0:	f002 fdf7 	bl	800eca2 <memcpy>
             q->byteCount += NbBytesToCopy; 
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	695a      	ldr	r2, [r3, #20]
 800c0b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0ba:	441a      	add	r2, r3
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	615a      	str	r2, [r3, #20]
             /* set the number of copied bytes */
             NbCopiedBytes = NbBytesToCopy;             
 800c0c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0c2:	627b      	str	r3, [r7, #36]	@ 0x24
             /* set rest of data to be copied to begnning of buffer */
             NbBytesToCopy = elementSize - NbBytesToCopy;
 800c0c4:	88fa      	ldrh	r2, [r7, #6]
 800c0c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0c8:	1ad3      	subs	r3, r2, r3
 800c0ca:	62bb      	str	r3, [r7, #40]	@ 0x28
             /* one element more dur to split in 2 elements */
             q->elementCount++;
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	699b      	ldr	r3, [r3, #24]
 800c0d0:	1c5a      	adds	r2, r3, #1
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	619a      	str	r2, [r3, #24]
             /* Wrap */
             curBuffPosition = 0; 
 800c0d6:	2300      	movs	r3, #0
 800c0d8:	633b      	str	r3, [r7, #48]	@ 0x30
             /* Set new size for rest of data */
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	681a      	ldr	r2, [r3, #0]
 800c0de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0e0:	1c59      	adds	r1, r3, #1
 800c0e2:	6339      	str	r1, [r7, #48]	@ 0x30
 800c0e4:	4413      	add	r3, r2
 800c0e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c0e8:	b2d2      	uxtb	r2, r2
 800c0ea:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800c0ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0ee:	0a18      	lsrs	r0, r3, #8
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	681a      	ldr	r2, [r3, #0]
 800c0f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0f6:	1c59      	adds	r1, r3, #1
 800c0f8:	6339      	str	r1, [r7, #48]	@ 0x30
 800c0fa:	4413      	add	r3, r2
 800c0fc:	b2c2      	uxtb	r2, r0
 800c0fe:	701a      	strb	r2, [r3, #0]
             q->byteCount += 2;              
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	695b      	ldr	r3, [r3, #20]
 800c104:	1c9a      	adds	r2, r3, #2
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	615a      	str	r2, [r3, #20]
 800c10a:	e001      	b.n	800c110 <CircularQueue_Add+0x3b0>
          else
          {
            /* Should not occur */
            /* can not manage split Flag on Fixed size element */
            /* Buffer is corrupted */
            return NULL;
 800c10c:	2300      	movs	r3, #0
 800c10e:	e049      	b.n	800c1a4 <CircularQueue_Add+0x444>
          }
        }
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 800c110:	7ffb      	ldrb	r3, [r7, #31]
 800c112:	b29a      	uxth	r2, r3
 800c114:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c116:	b29b      	uxth	r3, r3
 800c118:	4413      	add	r3, r2
 800c11a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        q->last = 0;        
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	2200      	movs	r2, #0
 800c120:	611a      	str	r2, [r3, #16]
      }  
      
      /* some remaining byte to copy */
      if (NbBytesToCopy)      
 800c122:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c124:	2b00      	cmp	r3, #0
 800c126:	d015      	beq.n	800c154 <CircularQueue_Add+0x3f4>
      {
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	681a      	ldr	r2, [r3, #0]
 800c12c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c12e:	18d0      	adds	r0, r2, r3
 800c130:	88fb      	ldrh	r3, [r7, #6]
 800c132:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c134:	fb03 f202 	mul.w	r2, r3, r2
 800c138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c13a:	4413      	add	r3, r2
 800c13c:	68ba      	ldr	r2, [r7, #8]
 800c13e:	4413      	add	r3, r2
 800c140:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c142:	4619      	mov	r1, r3
 800c144:	f002 fdad 	bl	800eca2 <memcpy>
        q->byteCount += NbBytesToCopy;
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	695a      	ldr	r2, [r3, #20]
 800c14c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c14e:	441a      	add	r2, r3
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	615a      	str	r2, [r3, #20]
      }      
      
      /* One more element */
      q->elementCount++;
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	699b      	ldr	r3, [r3, #24]
 800c158:	1c5a      	adds	r2, r3, #1
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	619a      	str	r2, [r3, #24]
    for (i=0; i < nbElements; i++) 
 800c15e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c160:	3301      	adds	r3, #1
 800c162:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c164:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c166:	683b      	ldr	r3, [r7, #0]
 800c168:	429a      	cmp	r2, r3
 800c16a:	f4ff aeb0 	bcc.w	800bece <CircularQueue_Add+0x16e>
    }
    
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	681a      	ldr	r2, [r3, #0]
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	6919      	ldr	r1, [r3, #16]
 800c176:	7ffb      	ldrb	r3, [r7, #31]
 800c178:	4419      	add	r1, r3
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	685b      	ldr	r3, [r3, #4]
 800c17e:	4299      	cmp	r1, r3
 800c180:	d307      	bcc.n	800c192 <CircularQueue_Add+0x432>
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	6919      	ldr	r1, [r3, #16]
 800c186:	7ffb      	ldrb	r3, [r7, #31]
 800c188:	4419      	add	r1, r3
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	685b      	ldr	r3, [r3, #4]
 800c18e:	1acb      	subs	r3, r1, r3
 800c190:	e003      	b.n	800c19a <CircularQueue_Add+0x43a>
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	6919      	ldr	r1, [r3, #16]
 800c196:	7ffb      	ldrb	r3, [r7, #31]
 800c198:	440b      	add	r3, r1
 800c19a:	4413      	add	r3, r2
 800c19c:	623b      	str	r3, [r7, #32]
  /* for Breakpoint only...to remove */
  else
  {
    return NULL;
  }
  return ptr;
 800c19e:	6a3b      	ldr	r3, [r7, #32]
 800c1a0:	e000      	b.n	800c1a4 <CircularQueue_Add+0x444>
    return NULL;
 800c1a2:	2300      	movs	r3, #0
}
 800c1a4:	4618      	mov	r0, r3
 800c1a6:	3738      	adds	r7, #56	@ 0x38
 800c1a8:	46bd      	mov	sp, r7
 800c1aa:	bd80      	pop	{r7, pc}

0800c1ac <CircularQueue_Remove>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize: Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on removed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Remove(queue_t *q, uint16_t* elementSize)
{
 800c1ac:	b480      	push	{r7}
 800c1ae:	b085      	sub	sp, #20
 800c1b0:	af00      	add	r7, sp, #0
 800c1b2:	6078      	str	r0, [r7, #4]
 800c1b4:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800c1b6:	2300      	movs	r3, #0
 800c1b8:	727b      	strb	r3, [r7, #9]
  uint8_t* ptr= NULL;
 800c1ba:	2300      	movs	r3, #0
 800c1bc:	60fb      	str	r3, [r7, #12]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	891b      	ldrh	r3, [r3, #8]
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d101      	bne.n	800c1ca <CircularQueue_Remove+0x1e>
 800c1c6:	2302      	movs	r3, #2
 800c1c8:	e000      	b.n	800c1cc <CircularQueue_Remove+0x20>
 800c1ca:	2300      	movs	r3, #0
 800c1cc:	727b      	strb	r3, [r7, #9]
  uint16_t eltSize = 0;
 800c1ce:	2300      	movs	r3, #0
 800c1d0:	817b      	strh	r3, [r7, #10]
  if (q->byteCount > 0) 
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	695b      	ldr	r3, [r3, #20]
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	f000 80ca 	beq.w	800c370 <CircularQueue_Remove+0x1c4>
  {
    /* retrieve element Size */
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	891b      	ldrh	r3, [r3, #8]
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d120      	bne.n	800c226 <CircularQueue_Remove+0x7a>
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	681a      	ldr	r2, [r3, #0]
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	68db      	ldr	r3, [r3, #12]
 800c1ec:	4413      	add	r3, r2
 800c1ee:	781b      	ldrb	r3, [r3, #0]
 800c1f0:	4618      	mov	r0, r3
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	681a      	ldr	r2, [r3, #0]
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	68db      	ldr	r3, [r3, #12]
 800c1fa:	1c59      	adds	r1, r3, #1
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	685b      	ldr	r3, [r3, #4]
 800c200:	4299      	cmp	r1, r3
 800c202:	d306      	bcc.n	800c212 <CircularQueue_Remove+0x66>
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	68d9      	ldr	r1, [r3, #12]
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	685b      	ldr	r3, [r3, #4]
 800c20c:	1acb      	subs	r3, r1, r3
 800c20e:	3301      	adds	r3, #1
 800c210:	e002      	b.n	800c218 <CircularQueue_Remove+0x6c>
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	68db      	ldr	r3, [r3, #12]
 800c216:	3301      	adds	r3, #1
 800c218:	4413      	add	r3, r2
 800c21a:	781b      	ldrb	r3, [r3, #0]
 800c21c:	021b      	lsls	r3, r3, #8
 800c21e:	b29b      	uxth	r3, r3
 800c220:	4403      	add	r3, r0
 800c222:	b29b      	uxth	r3, r3
 800c224:	e001      	b.n	800c22a <CircularQueue_Remove+0x7e>
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	891b      	ldrh	r3, [r3, #8]
 800c22a:	817b      	strh	r3, [r7, #10]

     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	7f1b      	ldrb	r3, [r3, #28]
 800c230:	f003 0301 	and.w	r3, r3, #1
 800c234:	2b00      	cmp	r3, #0
 800c236:	d056      	beq.n	800c2e6 <CircularQueue_Remove+0x13a>
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	7f1b      	ldrb	r3, [r3, #28]
 800c23c:	f003 0302 	and.w	r3, r3, #2
 800c240:	2b00      	cmp	r3, #0
 800c242:	d150      	bne.n	800c2e6 <CircularQueue_Remove+0x13a>
     {
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800c244:	897b      	ldrh	r3, [r7, #10]
 800c246:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c24a:	4293      	cmp	r3, r2
 800c24c:	d103      	bne.n	800c256 <CircularQueue_Remove+0xaa>
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	891b      	ldrh	r3, [r3, #8]
 800c252:	2b00      	cmp	r3, #0
 800c254:	d012      	beq.n	800c27c <CircularQueue_Remove+0xd0>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	68da      	ldr	r2, [r3, #12]
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	691b      	ldr	r3, [r3, #16]
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800c25e:	429a      	cmp	r2, r3
 800c260:	d941      	bls.n	800c2e6 <CircularQueue_Remove+0x13a>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	891b      	ldrh	r3, [r3, #8]
 800c266:	2b00      	cmp	r3, #0
 800c268:	d03d      	beq.n	800c2e6 <CircularQueue_Remove+0x13a>
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	685a      	ldr	r2, [r3, #4]
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	68db      	ldr	r3, [r3, #12]
 800c272:	1ad3      	subs	r3, r2, r3
 800c274:	687a      	ldr	r2, [r7, #4]
 800c276:	8912      	ldrh	r2, [r2, #8]
 800c278:	4293      	cmp	r3, r2
 800c27a:	d234      	bcs.n	800c2e6 <CircularQueue_Remove+0x13a>
       {
          /* all data from current position up to the end of buffer are invalid */
          q->byteCount -= (q->queueMaxSize - q->first);
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	695a      	ldr	r2, [r3, #20]
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	68d9      	ldr	r1, [r3, #12]
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	685b      	ldr	r3, [r3, #4]
 800c288:	1acb      	subs	r3, r1, r3
 800c28a:	441a      	add	r2, r3
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	615a      	str	r2, [r3, #20]
          /* Adjust first element pos */
          q->first = 0;
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	2200      	movs	r2, #0
 800c294:	60da      	str	r2, [r3, #12]
          /* retrieve the right size after the wrap [if variable size element] */
          eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	891b      	ldrh	r3, [r3, #8]
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d120      	bne.n	800c2e0 <CircularQueue_Remove+0x134>
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	681a      	ldr	r2, [r3, #0]
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	68db      	ldr	r3, [r3, #12]
 800c2a6:	4413      	add	r3, r2
 800c2a8:	781b      	ldrb	r3, [r3, #0]
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	681a      	ldr	r2, [r3, #0]
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	68db      	ldr	r3, [r3, #12]
 800c2b4:	1c59      	adds	r1, r3, #1
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	685b      	ldr	r3, [r3, #4]
 800c2ba:	4299      	cmp	r1, r3
 800c2bc:	d306      	bcc.n	800c2cc <CircularQueue_Remove+0x120>
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	68d9      	ldr	r1, [r3, #12]
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	685b      	ldr	r3, [r3, #4]
 800c2c6:	1acb      	subs	r3, r1, r3
 800c2c8:	3301      	adds	r3, #1
 800c2ca:	e002      	b.n	800c2d2 <CircularQueue_Remove+0x126>
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	68db      	ldr	r3, [r3, #12]
 800c2d0:	3301      	adds	r3, #1
 800c2d2:	4413      	add	r3, r2
 800c2d4:	781b      	ldrb	r3, [r3, #0]
 800c2d6:	021b      	lsls	r3, r3, #8
 800c2d8:	b29b      	uxth	r3, r3
 800c2da:	4403      	add	r3, r0
 800c2dc:	b29b      	uxth	r3, r3
 800c2de:	e001      	b.n	800c2e4 <CircularQueue_Remove+0x138>
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	891b      	ldrh	r3, [r3, #8]
 800c2e4:	817b      	strh	r3, [r7, #10]
       }
     }

    /* retrieve element */
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	681a      	ldr	r2, [r3, #0]
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	68d9      	ldr	r1, [r3, #12]
 800c2ee:	7a7b      	ldrb	r3, [r7, #9]
 800c2f0:	4419      	add	r1, r3
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	685b      	ldr	r3, [r3, #4]
 800c2f6:	4299      	cmp	r1, r3
 800c2f8:	d307      	bcc.n	800c30a <CircularQueue_Remove+0x15e>
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	68d9      	ldr	r1, [r3, #12]
 800c2fe:	7a7b      	ldrb	r3, [r7, #9]
 800c300:	4419      	add	r1, r3
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	685b      	ldr	r3, [r3, #4]
 800c306:	1acb      	subs	r3, r1, r3
 800c308:	e003      	b.n	800c312 <CircularQueue_Remove+0x166>
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	68d9      	ldr	r1, [r3, #12]
 800c30e:	7a7b      	ldrb	r3, [r7, #9]
 800c310:	440b      	add	r3, r1
 800c312:	4413      	add	r3, r2
 800c314:	60fb      	str	r3, [r7, #12]

    /* adjust byte count */
    q->byteCount -= (eltSize + elemSizeStorageRoom) ;
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	695b      	ldr	r3, [r3, #20]
 800c31a:	8979      	ldrh	r1, [r7, #10]
 800c31c:	7a7a      	ldrb	r2, [r7, #9]
 800c31e:	440a      	add	r2, r1
 800c320:	1a9a      	subs	r2, r3, r2
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	615a      	str	r2, [r3, #20]
    
    /* Adjust q->first */
    if (q->byteCount > 0)
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	695b      	ldr	r3, [r3, #20]
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d01b      	beq.n	800c366 <CircularQueue_Remove+0x1ba>
    {
      q->first = MOD((q->first+ eltSize + elemSizeStorageRoom ), q->queueMaxSize);
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	68da      	ldr	r2, [r3, #12]
 800c332:	897b      	ldrh	r3, [r7, #10]
 800c334:	441a      	add	r2, r3
 800c336:	7a7b      	ldrb	r3, [r7, #9]
 800c338:	441a      	add	r2, r3
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	685b      	ldr	r3, [r3, #4]
 800c33e:	429a      	cmp	r2, r3
 800c340:	d309      	bcc.n	800c356 <CircularQueue_Remove+0x1aa>
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	68da      	ldr	r2, [r3, #12]
 800c346:	897b      	ldrh	r3, [r7, #10]
 800c348:	441a      	add	r2, r3
 800c34a:	7a7b      	ldrb	r3, [r7, #9]
 800c34c:	441a      	add	r2, r3
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	685b      	ldr	r3, [r3, #4]
 800c352:	1ad3      	subs	r3, r2, r3
 800c354:	e005      	b.n	800c362 <CircularQueue_Remove+0x1b6>
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	68da      	ldr	r2, [r3, #12]
 800c35a:	897b      	ldrh	r3, [r7, #10]
 800c35c:	441a      	add	r2, r3
 800c35e:	7a7b      	ldrb	r3, [r7, #9]
 800c360:	4413      	add	r3, r2
 800c362:	687a      	ldr	r2, [r7, #4]
 800c364:	60d3      	str	r3, [r2, #12]
    }    
    /* adjust element count */    
    --q->elementCount;    
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	699b      	ldr	r3, [r3, #24]
 800c36a:	1e5a      	subs	r2, r3, #1
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	619a      	str	r2, [r3, #24]
  }
  if (elementSize != NULL)
 800c370:	683b      	ldr	r3, [r7, #0]
 800c372:	2b00      	cmp	r3, #0
 800c374:	d002      	beq.n	800c37c <CircularQueue_Remove+0x1d0>
  {
    *elementSize = eltSize;
 800c376:	683b      	ldr	r3, [r7, #0]
 800c378:	897a      	ldrh	r2, [r7, #10]
 800c37a:	801a      	strh	r2, [r3, #0]
  }
  return ptr;
 800c37c:	68fb      	ldr	r3, [r7, #12]
}
 800c37e:	4618      	mov	r0, r3
 800c380:	3714      	adds	r7, #20
 800c382:	46bd      	mov	sp, r7
 800c384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c388:	4770      	bx	lr

0800c38a <CircularQueue_Sense>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize:  Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on sensed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Sense(queue_t *q, uint16_t* elementSize)
{
 800c38a:	b480      	push	{r7}
 800c38c:	b087      	sub	sp, #28
 800c38e:	af00      	add	r7, sp, #0
 800c390:	6078      	str	r0, [r7, #4]
 800c392:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800c394:	2300      	movs	r3, #0
 800c396:	72fb      	strb	r3, [r7, #11]
  uint8_t* x= NULL;
 800c398:	2300      	movs	r3, #0
 800c39a:	617b      	str	r3, [r7, #20]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	891b      	ldrh	r3, [r3, #8]
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d101      	bne.n	800c3a8 <CircularQueue_Sense+0x1e>
 800c3a4:	2302      	movs	r3, #2
 800c3a6:	e000      	b.n	800c3aa <CircularQueue_Sense+0x20>
 800c3a8:	2300      	movs	r3, #0
 800c3aa:	72fb      	strb	r3, [r7, #11]
  uint16_t eltSize = 0;
 800c3ac:	2300      	movs	r3, #0
 800c3ae:	827b      	strh	r3, [r7, #18]
  uint32_t FirstElemetPos = 0;
 800c3b0:	2300      	movs	r3, #0
 800c3b2:	60fb      	str	r3, [r7, #12]
    
  if (q->byteCount > 0) 
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	695b      	ldr	r3, [r3, #20]
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	f000 808e 	beq.w	800c4da <CircularQueue_Sense+0x150>
  {
    FirstElemetPos = q->first;
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	68db      	ldr	r3, [r3, #12]
 800c3c2:	60fb      	str	r3, [r7, #12]
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	891b      	ldrh	r3, [r3, #8]
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d120      	bne.n	800c40e <CircularQueue_Sense+0x84>
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	681a      	ldr	r2, [r3, #0]
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	68db      	ldr	r3, [r3, #12]
 800c3d4:	4413      	add	r3, r2
 800c3d6:	781b      	ldrb	r3, [r3, #0]
 800c3d8:	4618      	mov	r0, r3
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	681a      	ldr	r2, [r3, #0]
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	68db      	ldr	r3, [r3, #12]
 800c3e2:	1c59      	adds	r1, r3, #1
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	685b      	ldr	r3, [r3, #4]
 800c3e8:	4299      	cmp	r1, r3
 800c3ea:	d306      	bcc.n	800c3fa <CircularQueue_Sense+0x70>
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	68d9      	ldr	r1, [r3, #12]
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	685b      	ldr	r3, [r3, #4]
 800c3f4:	1acb      	subs	r3, r1, r3
 800c3f6:	3301      	adds	r3, #1
 800c3f8:	e002      	b.n	800c400 <CircularQueue_Sense+0x76>
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	68db      	ldr	r3, [r3, #12]
 800c3fe:	3301      	adds	r3, #1
 800c400:	4413      	add	r3, r2
 800c402:	781b      	ldrb	r3, [r3, #0]
 800c404:	021b      	lsls	r3, r3, #8
 800c406:	b29b      	uxth	r3, r3
 800c408:	4403      	add	r3, r0
 800c40a:	b29b      	uxth	r3, r3
 800c40c:	e001      	b.n	800c412 <CircularQueue_Sense+0x88>
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	891b      	ldrh	r3, [r3, #8]
 800c412:	827b      	strh	r3, [r7, #18]
    
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	7f1b      	ldrb	r3, [r3, #28]
 800c418:	f003 0301 	and.w	r3, r3, #1
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d047      	beq.n	800c4b0 <CircularQueue_Sense+0x126>
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	7f1b      	ldrb	r3, [r3, #28]
 800c424:	f003 0302 	and.w	r3, r3, #2
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d141      	bne.n	800c4b0 <CircularQueue_Sense+0x126>
    { 
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800c42c:	8a7b      	ldrh	r3, [r7, #18]
 800c42e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c432:	4293      	cmp	r3, r2
 800c434:	d103      	bne.n	800c43e <CircularQueue_Sense+0xb4>
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	891b      	ldrh	r3, [r3, #8]
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d012      	beq.n	800c464 <CircularQueue_Sense+0xda>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	68da      	ldr	r2, [r3, #12]
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	691b      	ldr	r3, [r3, #16]
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800c446:	429a      	cmp	r2, r3
 800c448:	d932      	bls.n	800c4b0 <CircularQueue_Sense+0x126>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	891b      	ldrh	r3, [r3, #8]
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d02e      	beq.n	800c4b0 <CircularQueue_Sense+0x126>
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	685a      	ldr	r2, [r3, #4]
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	68db      	ldr	r3, [r3, #12]
 800c45a:	1ad3      	subs	r3, r2, r3
 800c45c:	687a      	ldr	r2, [r7, #4]
 800c45e:	8912      	ldrh	r2, [r2, #8]
 800c460:	4293      	cmp	r3, r2
 800c462:	d225      	bcs.n	800c4b0 <CircularQueue_Sense+0x126>

      {
        /* all data from current position up to the end of buffer are invalid */
        FirstElemetPos = 0; /* wrap to the begiining of buffer */
 800c464:	2300      	movs	r3, #0
 800c466:	60fb      	str	r3, [r7, #12]

        /* retrieve the right size after the wrap [if variable size element] */
        eltSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	891b      	ldrh	r3, [r3, #8]
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d11c      	bne.n	800c4aa <CircularQueue_Sense+0x120>
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	681a      	ldr	r2, [r3, #0]
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	4413      	add	r3, r2
 800c478:	781b      	ldrb	r3, [r3, #0]
 800c47a:	4618      	mov	r0, r3
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	681a      	ldr	r2, [r3, #0]
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	1c59      	adds	r1, r3, #1
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	685b      	ldr	r3, [r3, #4]
 800c488:	4299      	cmp	r1, r3
 800c48a:	d305      	bcc.n	800c498 <CircularQueue_Sense+0x10e>
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	685b      	ldr	r3, [r3, #4]
 800c490:	68f9      	ldr	r1, [r7, #12]
 800c492:	1acb      	subs	r3, r1, r3
 800c494:	3301      	adds	r3, #1
 800c496:	e001      	b.n	800c49c <CircularQueue_Sense+0x112>
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	3301      	adds	r3, #1
 800c49c:	4413      	add	r3, r2
 800c49e:	781b      	ldrb	r3, [r3, #0]
 800c4a0:	021b      	lsls	r3, r3, #8
 800c4a2:	b29b      	uxth	r3, r3
 800c4a4:	4403      	add	r3, r0
 800c4a6:	b29b      	uxth	r3, r3
 800c4a8:	e001      	b.n	800c4ae <CircularQueue_Sense+0x124>
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	891b      	ldrh	r3, [r3, #8]
 800c4ae:	827b      	strh	r3, [r7, #18]
      }
   }
   /* retrieve element */
    x = q->qBuff + (MOD((FirstElemetPos + elemSizeStorageRoom), q->queueMaxSize));
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	681a      	ldr	r2, [r3, #0]
 800c4b4:	7af9      	ldrb	r1, [r7, #11]
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	4419      	add	r1, r3
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	685b      	ldr	r3, [r3, #4]
 800c4be:	4299      	cmp	r1, r3
 800c4c0:	d306      	bcc.n	800c4d0 <CircularQueue_Sense+0x146>
 800c4c2:	7af9      	ldrb	r1, [r7, #11]
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	4419      	add	r1, r3
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	685b      	ldr	r3, [r3, #4]
 800c4cc:	1acb      	subs	r3, r1, r3
 800c4ce:	e002      	b.n	800c4d6 <CircularQueue_Sense+0x14c>
 800c4d0:	7af9      	ldrb	r1, [r7, #11]
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	440b      	add	r3, r1
 800c4d6:	4413      	add	r3, r2
 800c4d8:	617b      	str	r3, [r7, #20]
  }
  if (elementSize != NULL)
 800c4da:	683b      	ldr	r3, [r7, #0]
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d002      	beq.n	800c4e6 <CircularQueue_Sense+0x15c>
  {
    *elementSize = eltSize;
 800c4e0:	683b      	ldr	r3, [r7, #0]
 800c4e2:	8a7a      	ldrh	r2, [r7, #18]
 800c4e4:	801a      	strh	r2, [r3, #0]
  }
  return x;
 800c4e6:	697b      	ldr	r3, [r7, #20]
}
 800c4e8:	4618      	mov	r0, r3
 800c4ea:	371c      	adds	r7, #28
 800c4ec:	46bd      	mov	sp, r7
 800c4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f2:	4770      	bx	lr

0800c4f4 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 800c4f4:	b480      	push	{r7}
 800c4f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 800c4f8:	4b03      	ldr	r3, [pc, #12]	@ (800c508 <LL_FLASH_GetUDN+0x14>)
 800c4fa:	681b      	ldr	r3, [r3, #0]
}
 800c4fc:	4618      	mov	r0, r3
 800c4fe:	46bd      	mov	sp, r7
 800c500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c504:	4770      	bx	lr
 800c506:	bf00      	nop
 800c508:	1fff7580 	.word	0x1fff7580

0800c50c <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 800c50c:	b480      	push	{r7}
 800c50e:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 800c510:	4b03      	ldr	r3, [pc, #12]	@ (800c520 <LL_FLASH_GetDeviceID+0x14>)
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	b2db      	uxtb	r3, r3
}
 800c516:	4618      	mov	r0, r3
 800c518:	46bd      	mov	sp, r7
 800c51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c51e:	4770      	bx	lr
 800c520:	1fff7584 	.word	0x1fff7584

0800c524 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 800c524:	b480      	push	{r7}
 800c526:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 800c528:	4b03      	ldr	r3, [pc, #12]	@ (800c538 <LL_FLASH_GetSTCompanyID+0x14>)
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	0a1b      	lsrs	r3, r3, #8
}
 800c52e:	4618      	mov	r0, r3
 800c530:	46bd      	mov	sp, r7
 800c532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c536:	4770      	bx	lr
 800c538:	1fff7584 	.word	0x1fff7584

0800c53c <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 800c53c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c53e:	b0b1      	sub	sp, #196	@ 0xc4
 800c540:	af04      	add	r7, sp, #16
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800c542:	2392      	movs	r3, #146	@ 0x92
 800c544:	f887 30ab 	strb.w	r3, [r7, #171]	@ 0xab
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */
  WirelessFwInfo_t wireless_info_instance;
  WirelessFwInfo_t *p_wireless_info = &wireless_info_instance;  
 800c548:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800c54c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  char BdAddress[20];
  char StackVersion[23];
  char StackBranch[20];
  char FusVersion[20];
  const uint8_t *bdaddr=0;  
 800c550:	2300      	movs	r3, #0
 800c552:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 800c556:	4b86      	ldr	r3, [pc, #536]	@ (800c770 <APP_BLE_Init+0x234>)
 800c558:	463c      	mov	r4, r7
 800c55a:	461d      	mov	r5, r3
 800c55c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c55e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c560:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c562:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c564:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c566:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c568:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800c56c:	c403      	stmia	r4!, {r0, r1}
 800c56e:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 800c570:	f000 fe64 	bl	800d23c <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 800c574:	2101      	movs	r1, #1
 800c576:	2002      	movs	r0, #2
 800c578:	f001 fea2 	bl	800e2c0 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 800c57c:	4a7d      	ldr	r2, [pc, #500]	@ (800c774 <APP_BLE_Init+0x238>)
 800c57e:	2100      	movs	r1, #0
 800c580:	2004      	movs	r0, #4
 800c582:	f001 ffc9 	bl	800e518 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 800c586:	463b      	mov	r3, r7
 800c588:	4618      	mov	r0, r3
 800c58a:	f7fe fc55 	bl	800ae38 <SHCI_C2_BLE_Init>
 800c58e:	4603      	mov	r3, r0
 800c590:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
  if (status != SHCI_Success)
 800c594:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d008      	beq.n	800c5ae <APP_BLE_Init+0x72>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
 800c59c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800c5a0:	4619      	mov	r1, r3
 800c5a2:	4875      	ldr	r0, [pc, #468]	@ (800c778 <APP_BLE_Init+0x23c>)
 800c5a4:	f002 f998 	bl	800e8d8 <iprintf>
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 800c5a8:	f7f6 fd76 	bl	8003098 <Error_Handler>
 800c5ac:	e002      	b.n	800c5b4 <APP_BLE_Init+0x78>
  }
  else
  {
    APP_DBG_MSG("  Success: SHCI_C2_BLE_Init command\n\r");
 800c5ae:	4873      	ldr	r0, [pc, #460]	@ (800c77c <APP_BLE_Init+0x240>)
 800c5b0:	f002 f992 	bl	800e8d8 <iprintf>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 800c5b4:	f000 fe58 	bl	800d268 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 800c5b8:	f7fe fb98 	bl	800acec <SVCCTL_Init>


  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800c5bc:	4b70      	ldr	r3, [pc, #448]	@ (800c780 <APP_BLE_Init+0x244>)
 800c5be:	2200      	movs	r2, #0
 800c5c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 800c5c4:	4b6e      	ldr	r3, [pc, #440]	@ (800c780 <APP_BLE_Init+0x244>)
 800c5c6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c5ca:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 800c5cc:	4a6d      	ldr	r2, [pc, #436]	@ (800c784 <APP_BLE_Init+0x248>)
 800c5ce:	2100      	movs	r1, #0
 800c5d0:	2001      	movs	r0, #1
 800c5d2:	f001 ffa1 	bl	800e518 <UTIL_SEQ_RegTask>
#if (L2CAP_REQUEST_NEW_CONN_PARAM != 0)
  UTIL_SEQ_RegTask(1<<CFG_TASK_CONN_UPDATE_REG_ID, UTIL_SEQ_RFU, Connection_Interval_Update_Req);
 800c5d6:	4a6c      	ldr	r2, [pc, #432]	@ (800c788 <APP_BLE_Init+0x24c>)
 800c5d8:	2100      	movs	r1, #0
 800c5da:	2002      	movs	r0, #2
 800c5dc:	f001 ff9c 	bl	800e518 <UTIL_SEQ_RegTask>
#if (BLE_CFG_OTA_REBOOT_CHAR != 0)
  a_ManufData[sizeof(a_ManufData)-8] = CFG_FEATURE_OTA_REBOOT;
#endif /* BLE_CFG_OTA_REBOOT_CHAR != 0 */

#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 800c5e0:	2006      	movs	r0, #6
 800c5e2:	f7fe f8d9 	bl	800a798 <aci_hal_set_radio_activity_mask>
 800c5e6:	4603      	mov	r3, r0
 800c5e8:	f887 30ab 	strb.w	r3, [r7, #171]	@ 0xab
  if (ret != BLE_STATUS_SUCCESS)
 800c5ec:	f897 30ab 	ldrb.w	r3, [r7, #171]	@ 0xab
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d006      	beq.n	800c602 <APP_BLE_Init+0xc6>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_radio_activity_mask command, result: 0x%x \n\r", ret);
 800c5f4:	f897 30ab 	ldrb.w	r3, [r7, #171]	@ 0xab
 800c5f8:	4619      	mov	r1, r3
 800c5fa:	4864      	ldr	r0, [pc, #400]	@ (800c78c <APP_BLE_Init+0x250>)
 800c5fc:	f002 f96c 	bl	800e8d8 <iprintf>
 800c600:	e002      	b.n	800c608 <APP_BLE_Init+0xcc>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_radio_activity_mask command\n\r");
 800c602:	4863      	ldr	r0, [pc, #396]	@ (800c790 <APP_BLE_Init+0x254>)
 800c604:	f002 f968 	bl	800e8d8 <iprintf>
  }
#endif /* RADIO_ACTIVITY_EVENT != 0 */

#if (L2CAP_REQUEST_NEW_CONN_PARAM != 0)
  index_con_int = 0;
 800c608:	4b62      	ldr	r3, [pc, #392]	@ (800c794 <APP_BLE_Init+0x258>)
 800c60a:	2200      	movs	r2, #0
 800c60c:	701a      	strb	r2, [r3, #0]
  mutex = 1;
 800c60e:	4b62      	ldr	r3, [pc, #392]	@ (800c798 <APP_BLE_Init+0x25c>)
 800c610:	2201      	movs	r2, #1
 800c612:	701a      	strb	r2, [r3, #0]
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize P2P Server Application
   */
  P2PS_APP_Init();
 800c614:	f001 fa94 	bl	800db40 <P2PS_APP_Init>

  /* USER CODE BEGIN APP_BLE_Init_3 */
  Add_EEG_Stream_Notify_Service();
 800c618:	f000 f8da 	bl	800c7d0 <Add_EEG_Stream_Notify_Service>
  Add_Event_Notify_Service();
 800c61c:	f000 f9c6 	bl	800c9ac <Add_Event_Notify_Service>
  Add_Motion_Notify_Service();
 800c620:	f000 fa5c 	bl	800cadc <Add_Motion_Notify_Service>
   */
  //HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.Advertising_mgr_timer_Id), hw_ts_SingleShot, Adv_Cancel_Req);
  /**
   * Create timer to handle the Led Switch OFF
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.SwitchOffGPIO_timer_Id), hw_ts_SingleShot, Switch_OFF_GPIO);
 800c624:	4b5d      	ldr	r3, [pc, #372]	@ (800c79c <APP_BLE_Init+0x260>)
 800c626:	2200      	movs	r2, #0
 800c628:	495d      	ldr	r1, [pc, #372]	@ (800c7a0 <APP_BLE_Init+0x264>)
 800c62a:	2000      	movs	r0, #0
 800c62c:	f7f5 fdda 	bl	80021e4 <HW_TS_Create>

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 800c630:	4b53      	ldr	r3, [pc, #332]	@ (800c780 <APP_BLE_Init+0x244>)
 800c632:	2200      	movs	r2, #0
 800c634:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 800c636:	4b52      	ldr	r3, [pc, #328]	@ (800c780 <APP_BLE_Init+0x244>)
 800c638:	2200      	movs	r2, #0
 800c63a:	761a      	strb	r2, [r3, #24]

  /* Initialize intervals for reconnexion without intervals update */
  AdvIntervalMin = CFG_FAST_CONN_ADV_INTERVAL_MIN;
 800c63c:	4b59      	ldr	r3, [pc, #356]	@ (800c7a4 <APP_BLE_Init+0x268>)
 800c63e:	2280      	movs	r2, #128	@ 0x80
 800c640:	801a      	strh	r2, [r3, #0]
  AdvIntervalMax = CFG_FAST_CONN_ADV_INTERVAL_MAX;
 800c642:	4b59      	ldr	r3, [pc, #356]	@ (800c7a8 <APP_BLE_Init+0x26c>)
 800c644:	22a0      	movs	r2, #160	@ 0xa0
 800c646:	801a      	strh	r2, [r3, #0]

  /**
   * Start to Advertise to be connected by P2P Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 800c648:	2001      	movs	r0, #1
 800c64a:	f000 ffbd 	bl	800d5c8 <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */
   /* Displays the board information: MAC Address, Stack version, FUS version*/ 
   if (SHCI_GetWirelessFwInfo(p_wireless_info) != SHCI_Success)
 800c64e:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 800c652:	f7fe fc35 	bl	800aec0 <SHCI_GetWirelessFwInfo>
 800c656:	4603      	mov	r3, r0
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d15a      	bne.n	800c712 <APP_BLE_Init+0x1d6>
   {
     // Error
   }
   else
   {
     bdaddr= BleGetBdAddress();
 800c65c:	f001 f852 	bl	800d704 <BleGetBdAddress>
 800c660:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
     sprintf(BdAddress, "BD_ad=%02x%02x%02x%02x%02x%02x", bdaddr[5],bdaddr[4],bdaddr[3],bdaddr[2],bdaddr[1],bdaddr[0]);
 800c664:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c668:	3305      	adds	r3, #5
 800c66a:	781b      	ldrb	r3, [r3, #0]
 800c66c:	461d      	mov	r5, r3
 800c66e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c672:	3304      	adds	r3, #4
 800c674:	781b      	ldrb	r3, [r3, #0]
 800c676:	461e      	mov	r6, r3
 800c678:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c67c:	3303      	adds	r3, #3
 800c67e:	781b      	ldrb	r3, [r3, #0]
 800c680:	461a      	mov	r2, r3
 800c682:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c686:	3302      	adds	r3, #2
 800c688:	781b      	ldrb	r3, [r3, #0]
 800c68a:	4619      	mov	r1, r3
 800c68c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c690:	3301      	adds	r3, #1
 800c692:	781b      	ldrb	r3, [r3, #0]
 800c694:	461c      	mov	r4, r3
 800c696:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c69a:	781b      	ldrb	r3, [r3, #0]
 800c69c:	f107 007c 	add.w	r0, r7, #124	@ 0x7c
 800c6a0:	9303      	str	r3, [sp, #12]
 800c6a2:	9402      	str	r4, [sp, #8]
 800c6a4:	9101      	str	r1, [sp, #4]
 800c6a6:	9200      	str	r2, [sp, #0]
 800c6a8:	4633      	mov	r3, r6
 800c6aa:	462a      	mov	r2, r5
 800c6ac:	493f      	ldr	r1, [pc, #252]	@ (800c7ac <APP_BLE_Init+0x270>)
 800c6ae:	f002 f98b 	bl	800e9c8 <siprintf>
     sprintf(StackVersion, "BLE Stack=v%d.%d.%d", p_wireless_info->VersionMajor, p_wireless_info->VersionMinor, p_wireless_info->VersionSub);
 800c6b2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c6b6:	781b      	ldrb	r3, [r3, #0]
 800c6b8:	461a      	mov	r2, r3
 800c6ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c6be:	785b      	ldrb	r3, [r3, #1]
 800c6c0:	4619      	mov	r1, r3
 800c6c2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c6c6:	789b      	ldrb	r3, [r3, #2]
 800c6c8:	f107 0064 	add.w	r0, r7, #100	@ 0x64
 800c6cc:	9300      	str	r3, [sp, #0]
 800c6ce:	460b      	mov	r3, r1
 800c6d0:	4937      	ldr	r1, [pc, #220]	@ (800c7b0 <APP_BLE_Init+0x274>)
 800c6d2:	f002 f979 	bl	800e9c8 <siprintf>
     sprintf(StackBranch, "Branch=%d Type=%d", p_wireless_info->VersionBranch, p_wireless_info->VersionReleaseType);
 800c6d6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c6da:	78db      	ldrb	r3, [r3, #3]
 800c6dc:	461a      	mov	r2, r3
 800c6de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c6e2:	791b      	ldrb	r3, [r3, #4]
 800c6e4:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 800c6e8:	4932      	ldr	r1, [pc, #200]	@ (800c7b4 <APP_BLE_Init+0x278>)
 800c6ea:	f002 f96d 	bl	800e9c8 <siprintf>
     sprintf(FusVersion, "FUS v%d.%d.%d", p_wireless_info->FusVersionMajor, p_wireless_info->FusVersionMinor, p_wireless_info->FusVersionSub);
 800c6ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c6f2:	7a9b      	ldrb	r3, [r3, #10]
 800c6f4:	461a      	mov	r2, r3
 800c6f6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c6fa:	7adb      	ldrb	r3, [r3, #11]
 800c6fc:	4619      	mov	r1, r3
 800c6fe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c702:	7b1b      	ldrb	r3, [r3, #12]
 800c704:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 800c708:	9300      	str	r3, [sp, #0]
 800c70a:	460b      	mov	r3, r1
 800c70c:	492a      	ldr	r1, [pc, #168]	@ (800c7b8 <APP_BLE_Init+0x27c>)
 800c70e:	f002 f95b 	bl	800e9c8 <siprintf>
     
   }
   HAL_Delay(4000);
 800c712:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 800c716:	f7f4 fff3 	bl	8001700 <HAL_Delay>
   /* Displays Application */
   
   sprintf(BdAddress, "BD_ad=%02x%02x%02x%02x%02x%02x", bdaddr[5],bdaddr[4],bdaddr[3],bdaddr[2],bdaddr[1],bdaddr[0]);
 800c71a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c71e:	3305      	adds	r3, #5
 800c720:	781b      	ldrb	r3, [r3, #0]
 800c722:	461d      	mov	r5, r3
 800c724:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c728:	3304      	adds	r3, #4
 800c72a:	781b      	ldrb	r3, [r3, #0]
 800c72c:	461e      	mov	r6, r3
 800c72e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c732:	3303      	adds	r3, #3
 800c734:	781b      	ldrb	r3, [r3, #0]
 800c736:	461a      	mov	r2, r3
 800c738:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c73c:	3302      	adds	r3, #2
 800c73e:	781b      	ldrb	r3, [r3, #0]
 800c740:	4619      	mov	r1, r3
 800c742:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c746:	3301      	adds	r3, #1
 800c748:	781b      	ldrb	r3, [r3, #0]
 800c74a:	461c      	mov	r4, r3
 800c74c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c750:	781b      	ldrb	r3, [r3, #0]
 800c752:	f107 007c 	add.w	r0, r7, #124	@ 0x7c
 800c756:	9303      	str	r3, [sp, #12]
 800c758:	9402      	str	r4, [sp, #8]
 800c75a:	9101      	str	r1, [sp, #4]
 800c75c:	9200      	str	r2, [sp, #0]
 800c75e:	4633      	mov	r3, r6
 800c760:	462a      	mov	r2, r5
 800c762:	4912      	ldr	r1, [pc, #72]	@ (800c7ac <APP_BLE_Init+0x270>)
 800c764:	f002 f930 	bl	800e9c8 <siprintf>

  /* USER CODE END APP_BLE_Init_2 */

  return;
 800c768:	bf00      	nop
}
 800c76a:	37b4      	adds	r7, #180	@ 0xb4
 800c76c:	46bd      	mov	sp, r7
 800c76e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c770:	08010010 	.word	0x08010010
 800c774:	0800b055 	.word	0x0800b055
 800c778:	0800fedc 	.word	0x0800fedc
 800c77c:	0800ff14 	.word	0x0800ff14
 800c780:	200004dc 	.word	0x200004dc
 800c784:	0800d78d 	.word	0x0800d78d
 800c788:	0800d88d 	.word	0x0800d88d
 800c78c:	0800ff3c 	.word	0x0800ff3c
 800c790:	0800ff80 	.word	0x0800ff80
 800c794:	20000578 	.word	0x20000578
 800c798:	20000579 	.word	0x20000579
 800c79c:	0800d7e5 	.word	0x0800d7e5
 800c7a0:	20000562 	.word	0x20000562
 800c7a4:	20000570 	.word	0x20000570
 800c7a8:	20000572 	.word	0x20000572
 800c7ac:	0800ffb8 	.word	0x0800ffb8
 800c7b0:	0800ffd8 	.word	0x0800ffd8
 800c7b4:	0800ffec 	.word	0x0800ffec
 800c7b8:	08010000 	.word	0x08010000

0800c7bc <Hermes_App_Init>:



void Hermes_App_Init(void){
 800c7bc:	b580      	push	{r7, lr}
 800c7be:	af00      	add	r7, sp, #0

	  SVCCTL_RegisterSvcHandler(Hermes_Event_Handler);
 800c7c0:	4802      	ldr	r0, [pc, #8]	@ (800c7cc <Hermes_App_Init+0x10>)
 800c7c2:	f7fe facb 	bl	800ad5c <SVCCTL_RegisterSvcHandler>

}
 800c7c6:	bf00      	nop
 800c7c8:	bd80      	pop	{r7, pc}
 800c7ca:	bf00      	nop
 800c7cc:	0800d96d 	.word	0x0800d96d

0800c7d0 <Add_EEG_Stream_Notify_Service>:



static tBleStatus Add_EEG_Stream_Notify_Service(void)
{
 800c7d0:	b580      	push	{r7, lr}
 800c7d2:	b094      	sub	sp, #80	@ 0x50
 800c7d4:	af06      	add	r7, sp, #24
    tBleStatus ret = BLE_STATUS_SUCCESS;
 800c7d6:	2300      	movs	r3, #0
 800c7d8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    uint8_t eeg_service_uuid[16];
    uint8_t eeg_stream_char_uuid[16];
    uint8_t eeg_config_char_uuid[16];

    // Add service
    COPY_EEG_SERVICE_UUID(eeg_service_uuid);
 800c7dc:	231b      	movs	r3, #27
 800c7de:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 800c7e2:	23c5      	movs	r3, #197	@ 0xc5
 800c7e4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800c7e8:	23d5      	movs	r3, #213	@ 0xd5
 800c7ea:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800c7ee:	23a5      	movs	r3, #165	@ 0xa5
 800c7f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c7f4:	2302      	movs	r3, #2
 800c7f6:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 800c7fa:	2300      	movs	r3, #0
 800c7fc:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 800c800:	2351      	movs	r3, #81	@ 0x51
 800c802:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800c806:	23a1      	movs	r3, #161	@ 0xa1
 800c808:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c80c:	23e5      	movs	r3, #229	@ 0xe5
 800c80e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 800c812:	2311      	movs	r3, #17
 800c814:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 800c818:	2367      	movs	r3, #103	@ 0x67
 800c81a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800c81e:	2349      	movs	r3, #73	@ 0x49
 800c820:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800c824:	23e0      	movs	r3, #224	@ 0xe0
 800c826:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
 800c82a:	2380      	movs	r3, #128	@ 0x80
 800c82c:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
 800c830:	23a4      	movs	r3, #164	@ 0xa4
 800c832:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
 800c836:	239f      	movs	r3, #159	@ 0x9f
 800c838:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    ret = aci_gatt_add_service(UUID_TYPE_128,
 800c83c:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 800c840:	4b54      	ldr	r3, [pc, #336]	@ (800c994 <Add_EEG_Stream_Notify_Service+0x1c4>)
 800c842:	9300      	str	r3, [sp, #0]
 800c844:	2308      	movs	r3, #8
 800c846:	2201      	movs	r2, #1
 800c848:	2002      	movs	r0, #2
 800c84a:	f7fd fbdd 	bl	800a008 <aci_gatt_add_service>
 800c84e:	4603      	mov	r3, r0
 800c850:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                              (Service_UUID_t *) eeg_service_uuid,
                              PRIMARY_SERVICE,
							  2 + 3 + 3, /* 2 for service + 3 + 3 for 2 characteristic */
                              &(BleApplicationContext.BleApplicationContext_legacy.eeg_service_handle));

    if (ret != BLE_STATUS_SUCCESS)
 800c854:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d008      	beq.n	800c86e <Add_EEG_Stream_Notify_Service+0x9e>
    {
        APP_DBG_MSG("Error adding New Notify Service - ret=0x%x\n", ret);
 800c85c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c860:	4619      	mov	r1, r3
 800c862:	484d      	ldr	r0, [pc, #308]	@ (800c998 <Add_EEG_Stream_Notify_Service+0x1c8>)
 800c864:	f002 f838 	bl	800e8d8 <iprintf>
        return ret;
 800c868:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c86c:	e08e      	b.n	800c98c <Add_EEG_Stream_Notify_Service+0x1bc>
    }

    // Add characteristic
    COPY_EEG_DATA_UUID(eeg_stream_char_uuid);
 800c86e:	231b      	movs	r3, #27
 800c870:	753b      	strb	r3, [r7, #20]
 800c872:	23c5      	movs	r3, #197	@ 0xc5
 800c874:	757b      	strb	r3, [r7, #21]
 800c876:	23d5      	movs	r3, #213	@ 0xd5
 800c878:	75bb      	strb	r3, [r7, #22]
 800c87a:	23a5      	movs	r3, #165	@ 0xa5
 800c87c:	75fb      	strb	r3, [r7, #23]
 800c87e:	2302      	movs	r3, #2
 800c880:	763b      	strb	r3, [r7, #24]
 800c882:	2300      	movs	r3, #0
 800c884:	767b      	strb	r3, [r7, #25]
 800c886:	2351      	movs	r3, #81	@ 0x51
 800c888:	76bb      	strb	r3, [r7, #26]
 800c88a:	23a1      	movs	r3, #161	@ 0xa1
 800c88c:	76fb      	strb	r3, [r7, #27]
 800c88e:	23e5      	movs	r3, #229	@ 0xe5
 800c890:	773b      	strb	r3, [r7, #28]
 800c892:	2311      	movs	r3, #17
 800c894:	777b      	strb	r3, [r7, #29]
 800c896:	2367      	movs	r3, #103	@ 0x67
 800c898:	77bb      	strb	r3, [r7, #30]
 800c89a:	2349      	movs	r3, #73	@ 0x49
 800c89c:	77fb      	strb	r3, [r7, #31]
 800c89e:	23e1      	movs	r3, #225	@ 0xe1
 800c8a0:	f887 3020 	strb.w	r3, [r7, #32]
 800c8a4:	2380      	movs	r3, #128	@ 0x80
 800c8a6:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
 800c8aa:	23a4      	movs	r3, #164	@ 0xa4
 800c8ac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800c8b0:	239f      	movs	r3, #159	@ 0x9f
 800c8b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    ret = aci_gatt_add_char(BleApplicationContext.BleApplicationContext_legacy.eeg_service_handle,
 800c8b6:	4b39      	ldr	r3, [pc, #228]	@ (800c99c <Add_EEG_Stream_Notify_Service+0x1cc>)
 800c8b8:	f8b3 007e 	ldrh.w	r0, [r3, #126]	@ 0x7e
 800c8bc:	f107 0214 	add.w	r2, r7, #20
 800c8c0:	4b37      	ldr	r3, [pc, #220]	@ (800c9a0 <Add_EEG_Stream_Notify_Service+0x1d0>)
 800c8c2:	9305      	str	r3, [sp, #20]
 800c8c4:	2301      	movs	r3, #1
 800c8c6:	9304      	str	r3, [sp, #16]
 800c8c8:	230a      	movs	r3, #10
 800c8ca:	9303      	str	r3, [sp, #12]
 800c8cc:	2301      	movs	r3, #1
 800c8ce:	9302      	str	r3, [sp, #8]
 800c8d0:	2300      	movs	r3, #0
 800c8d2:	9301      	str	r3, [sp, #4]
 800c8d4:	2310      	movs	r3, #16
 800c8d6:	9300      	str	r3, [sp, #0]
 800c8d8:	23f1      	movs	r3, #241	@ 0xf1
 800c8da:	2102      	movs	r1, #2
 800c8dc:	f7fd fc6a 	bl	800a1b4 <aci_gatt_add_char>
 800c8e0:	4603      	mov	r3, r0
 800c8e2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
						   GATT_NOTIFY_ATTRIBUTE_WRITE,
                           10,
                           CHAR_VALUE_LEN_VARIABLE,
                           &(BleApplicationContext.eeg_data_char_handle));

    if (ret != BLE_STATUS_SUCCESS)
 800c8e6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d008      	beq.n	800c900 <Add_EEG_Stream_Notify_Service+0x130>
    {
        APP_DBG_MSG("Error adding New Notify Characteristic - ret=0x%x\n", ret);
 800c8ee:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c8f2:	4619      	mov	r1, r3
 800c8f4:	482b      	ldr	r0, [pc, #172]	@ (800c9a4 <Add_EEG_Stream_Notify_Service+0x1d4>)
 800c8f6:	f001 ffef 	bl	800e8d8 <iprintf>
        return ret;
 800c8fa:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c8fe:	e045      	b.n	800c98c <Add_EEG_Stream_Notify_Service+0x1bc>
    }

    // Add characteristic
    COPY_EEG_CONFIG_UUID(eeg_config_char_uuid);
 800c900:	231b      	movs	r3, #27
 800c902:	713b      	strb	r3, [r7, #4]
 800c904:	23c5      	movs	r3, #197	@ 0xc5
 800c906:	717b      	strb	r3, [r7, #5]
 800c908:	23d5      	movs	r3, #213	@ 0xd5
 800c90a:	71bb      	strb	r3, [r7, #6]
 800c90c:	23a5      	movs	r3, #165	@ 0xa5
 800c90e:	71fb      	strb	r3, [r7, #7]
 800c910:	2302      	movs	r3, #2
 800c912:	723b      	strb	r3, [r7, #8]
 800c914:	2300      	movs	r3, #0
 800c916:	727b      	strb	r3, [r7, #9]
 800c918:	2351      	movs	r3, #81	@ 0x51
 800c91a:	72bb      	strb	r3, [r7, #10]
 800c91c:	23a1      	movs	r3, #161	@ 0xa1
 800c91e:	72fb      	strb	r3, [r7, #11]
 800c920:	23e5      	movs	r3, #229	@ 0xe5
 800c922:	733b      	strb	r3, [r7, #12]
 800c924:	2311      	movs	r3, #17
 800c926:	737b      	strb	r3, [r7, #13]
 800c928:	2367      	movs	r3, #103	@ 0x67
 800c92a:	73bb      	strb	r3, [r7, #14]
 800c92c:	2349      	movs	r3, #73	@ 0x49
 800c92e:	73fb      	strb	r3, [r7, #15]
 800c930:	23e2      	movs	r3, #226	@ 0xe2
 800c932:	743b      	strb	r3, [r7, #16]
 800c934:	2380      	movs	r3, #128	@ 0x80
 800c936:	747b      	strb	r3, [r7, #17]
 800c938:	23a4      	movs	r3, #164	@ 0xa4
 800c93a:	74bb      	strb	r3, [r7, #18]
 800c93c:	239f      	movs	r3, #159	@ 0x9f
 800c93e:	74fb      	strb	r3, [r7, #19]
    ret = aci_gatt_add_char(BleApplicationContext.BleApplicationContext_legacy.eeg_service_handle,
 800c940:	4b16      	ldr	r3, [pc, #88]	@ (800c99c <Add_EEG_Stream_Notify_Service+0x1cc>)
 800c942:	f8b3 007e 	ldrh.w	r0, [r3, #126]	@ 0x7e
 800c946:	1d3a      	adds	r2, r7, #4
 800c948:	4b17      	ldr	r3, [pc, #92]	@ (800c9a8 <Add_EEG_Stream_Notify_Service+0x1d8>)
 800c94a:	9305      	str	r3, [sp, #20]
 800c94c:	2301      	movs	r3, #1
 800c94e:	9304      	str	r3, [sp, #16]
 800c950:	230a      	movs	r3, #10
 800c952:	9303      	str	r3, [sp, #12]
 800c954:	2301      	movs	r3, #1
 800c956:	9302      	str	r3, [sp, #8]
 800c958:	2300      	movs	r3, #0
 800c95a:	9301      	str	r3, [sp, #4]
 800c95c:	2306      	movs	r3, #6
 800c95e:	9300      	str	r3, [sp, #0]
 800c960:	2304      	movs	r3, #4
 800c962:	2102      	movs	r1, #2
 800c964:	f7fd fc26 	bl	800a1b4 <aci_gatt_add_char>
 800c968:	4603      	mov	r3, r0
 800c96a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
						   GATT_NOTIFY_ATTRIBUTE_WRITE,
                           10,
                           CHAR_VALUE_LEN_VARIABLE,
                           &(BleApplicationContext.eeg_config_char_handle));

    if (ret != BLE_STATUS_SUCCESS)
 800c96e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c972:	2b00      	cmp	r3, #0
 800c974:	d008      	beq.n	800c988 <Add_EEG_Stream_Notify_Service+0x1b8>
    {
        APP_DBG_MSG("Error adding New Notify Characteristic - ret=0x%x\n", ret);
 800c976:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c97a:	4619      	mov	r1, r3
 800c97c:	4809      	ldr	r0, [pc, #36]	@ (800c9a4 <Add_EEG_Stream_Notify_Service+0x1d4>)
 800c97e:	f001 ffab 	bl	800e8d8 <iprintf>
        return ret;
 800c982:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c986:	e001      	b.n	800c98c <Add_EEG_Stream_Notify_Service+0x1bc>
    }

    return ret;
 800c988:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 800c98c:	4618      	mov	r0, r3
 800c98e:	3738      	adds	r7, #56	@ 0x38
 800c990:	46bd      	mov	sp, r7
 800c992:	bd80      	pop	{r7, pc}
 800c994:	2000055a 	.word	0x2000055a
 800c998:	0801004c 	.word	0x0801004c
 800c99c:	200004dc 	.word	0x200004dc
 800c9a0:	20000564 	.word	0x20000564
 800c9a4:	08010078 	.word	0x08010078
 800c9a8:	2000056e 	.word	0x2000056e

0800c9ac <Add_Event_Notify_Service>:



static tBleStatus Add_Event_Notify_Service(void)
{
 800c9ac:	b580      	push	{r7, lr}
 800c9ae:	b090      	sub	sp, #64	@ 0x40
 800c9b0:	af06      	add	r7, sp, #24
    tBleStatus ret = BLE_STATUS_SUCCESS;
 800c9b2:	2300      	movs	r3, #0
 800c9b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    uint8_t event_service_uuid[16];
    uint8_t event_char_uuid[16];

    // Add service
    COPY_EVENT_SERVICE_UUID(event_service_uuid);
 800c9b8:	231b      	movs	r3, #27
 800c9ba:	753b      	strb	r3, [r7, #20]
 800c9bc:	23c5      	movs	r3, #197	@ 0xc5
 800c9be:	757b      	strb	r3, [r7, #21]
 800c9c0:	23d5      	movs	r3, #213	@ 0xd5
 800c9c2:	75bb      	strb	r3, [r7, #22]
 800c9c4:	23a5      	movs	r3, #165	@ 0xa5
 800c9c6:	75fb      	strb	r3, [r7, #23]
 800c9c8:	2302      	movs	r3, #2
 800c9ca:	763b      	strb	r3, [r7, #24]
 800c9cc:	2300      	movs	r3, #0
 800c9ce:	767b      	strb	r3, [r7, #25]
 800c9d0:	2351      	movs	r3, #81	@ 0x51
 800c9d2:	76bb      	strb	r3, [r7, #26]
 800c9d4:	23a1      	movs	r3, #161	@ 0xa1
 800c9d6:	76fb      	strb	r3, [r7, #27]
 800c9d8:	23e5      	movs	r3, #229	@ 0xe5
 800c9da:	773b      	strb	r3, [r7, #28]
 800c9dc:	2311      	movs	r3, #17
 800c9de:	777b      	strb	r3, [r7, #29]
 800c9e0:	2367      	movs	r3, #103	@ 0x67
 800c9e2:	77bb      	strb	r3, [r7, #30]
 800c9e4:	2349      	movs	r3, #73	@ 0x49
 800c9e6:	77fb      	strb	r3, [r7, #31]
 800c9e8:	2300      	movs	r3, #0
 800c9ea:	f887 3020 	strb.w	r3, [r7, #32]
 800c9ee:	2383      	movs	r3, #131	@ 0x83
 800c9f0:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
 800c9f4:	23a4      	movs	r3, #164	@ 0xa4
 800c9f6:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800c9fa:	239f      	movs	r3, #159	@ 0x9f
 800c9fc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    ret = aci_gatt_add_service(UUID_TYPE_128,
 800ca00:	f107 0114 	add.w	r1, r7, #20
 800ca04:	4b30      	ldr	r3, [pc, #192]	@ (800cac8 <Add_Event_Notify_Service+0x11c>)
 800ca06:	9300      	str	r3, [sp, #0]
 800ca08:	2305      	movs	r3, #5
 800ca0a:	2201      	movs	r2, #1
 800ca0c:	2002      	movs	r0, #2
 800ca0e:	f7fd fafb 	bl	800a008 <aci_gatt_add_service>
 800ca12:	4603      	mov	r3, r0
 800ca14:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                              (Service_UUID_t *) event_service_uuid,
                              PRIMARY_SERVICE,
                              2 + 3, /* 2 for service + 3 for 1 characteristic */
                              &(BleApplicationContext.BleApplicationContext_legacy.event_service_handle));

    if (ret != BLE_STATUS_SUCCESS)
 800ca18:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d008      	beq.n	800ca32 <Add_Event_Notify_Service+0x86>
    {
        APP_DBG_MSG("Error adding New Notify Service - ret=0x%x\n", ret);
 800ca20:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ca24:	4619      	mov	r1, r3
 800ca26:	4829      	ldr	r0, [pc, #164]	@ (800cacc <Add_Event_Notify_Service+0x120>)
 800ca28:	f001 ff56 	bl	800e8d8 <iprintf>
        return ret;
 800ca2c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ca30:	e045      	b.n	800cabe <Add_Event_Notify_Service+0x112>
    }

    // Add characteristic
    COPY_EVENT_UUID(event_char_uuid);
 800ca32:	231b      	movs	r3, #27
 800ca34:	713b      	strb	r3, [r7, #4]
 800ca36:	23c5      	movs	r3, #197	@ 0xc5
 800ca38:	717b      	strb	r3, [r7, #5]
 800ca3a:	23d5      	movs	r3, #213	@ 0xd5
 800ca3c:	71bb      	strb	r3, [r7, #6]
 800ca3e:	23a5      	movs	r3, #165	@ 0xa5
 800ca40:	71fb      	strb	r3, [r7, #7]
 800ca42:	2302      	movs	r3, #2
 800ca44:	723b      	strb	r3, [r7, #8]
 800ca46:	2300      	movs	r3, #0
 800ca48:	727b      	strb	r3, [r7, #9]
 800ca4a:	2351      	movs	r3, #81	@ 0x51
 800ca4c:	72bb      	strb	r3, [r7, #10]
 800ca4e:	23a1      	movs	r3, #161	@ 0xa1
 800ca50:	72fb      	strb	r3, [r7, #11]
 800ca52:	23e5      	movs	r3, #229	@ 0xe5
 800ca54:	733b      	strb	r3, [r7, #12]
 800ca56:	2311      	movs	r3, #17
 800ca58:	737b      	strb	r3, [r7, #13]
 800ca5a:	2367      	movs	r3, #103	@ 0x67
 800ca5c:	73bb      	strb	r3, [r7, #14]
 800ca5e:	2349      	movs	r3, #73	@ 0x49
 800ca60:	73fb      	strb	r3, [r7, #15]
 800ca62:	2301      	movs	r3, #1
 800ca64:	743b      	strb	r3, [r7, #16]
 800ca66:	2383      	movs	r3, #131	@ 0x83
 800ca68:	747b      	strb	r3, [r7, #17]
 800ca6a:	23a4      	movs	r3, #164	@ 0xa4
 800ca6c:	74bb      	strb	r3, [r7, #18]
 800ca6e:	239f      	movs	r3, #159	@ 0x9f
 800ca70:	74fb      	strb	r3, [r7, #19]
    ret = aci_gatt_add_char(BleApplicationContext.BleApplicationContext_legacy.event_service_handle,
 800ca72:	4b17      	ldr	r3, [pc, #92]	@ (800cad0 <Add_Event_Notify_Service+0x124>)
 800ca74:	f8b3 0080 	ldrh.w	r0, [r3, #128]	@ 0x80
 800ca78:	1d3a      	adds	r2, r7, #4
 800ca7a:	4b16      	ldr	r3, [pc, #88]	@ (800cad4 <Add_Event_Notify_Service+0x128>)
 800ca7c:	9305      	str	r3, [sp, #20]
 800ca7e:	2301      	movs	r3, #1
 800ca80:	9304      	str	r3, [sp, #16]
 800ca82:	230a      	movs	r3, #10
 800ca84:	9303      	str	r3, [sp, #12]
 800ca86:	2301      	movs	r3, #1
 800ca88:	9302      	str	r3, [sp, #8]
 800ca8a:	2300      	movs	r3, #0
 800ca8c:	9301      	str	r3, [sp, #4]
 800ca8e:	2310      	movs	r3, #16
 800ca90:	9300      	str	r3, [sp, #0]
 800ca92:	2304      	movs	r3, #4
 800ca94:	2102      	movs	r1, #2
 800ca96:	f7fd fb8d 	bl	800a1b4 <aci_gatt_add_char>
 800ca9a:	4603      	mov	r3, r0
 800ca9c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
						   GATT_NOTIFY_ATTRIBUTE_WRITE,
                           10,
                           CHAR_VALUE_LEN_VARIABLE,
                           &(BleApplicationContext.event_char_handle));

    if (ret != BLE_STATUS_SUCCESS)
 800caa0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d008      	beq.n	800caba <Add_Event_Notify_Service+0x10e>
    {
        APP_DBG_MSG("Error adding New Notify Characteristic - ret=0x%x\n", ret);
 800caa8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800caac:	4619      	mov	r1, r3
 800caae:	480a      	ldr	r0, [pc, #40]	@ (800cad8 <Add_Event_Notify_Service+0x12c>)
 800cab0:	f001 ff12 	bl	800e8d8 <iprintf>
        return ret;
 800cab4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cab8:	e001      	b.n	800cabe <Add_Event_Notify_Service+0x112>
    }


    return ret;
 800caba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800cabe:	4618      	mov	r0, r3
 800cac0:	3728      	adds	r7, #40	@ 0x28
 800cac2:	46bd      	mov	sp, r7
 800cac4:	bd80      	pop	{r7, pc}
 800cac6:	bf00      	nop
 800cac8:	2000055c 	.word	0x2000055c
 800cacc:	0801004c 	.word	0x0801004c
 800cad0:	200004dc 	.word	0x200004dc
 800cad4:	20000566 	.word	0x20000566
 800cad8:	08010078 	.word	0x08010078

0800cadc <Add_Motion_Notify_Service>:



static tBleStatus Add_Motion_Notify_Service(void)
{
 800cadc:	b580      	push	{r7, lr}
 800cade:	b090      	sub	sp, #64	@ 0x40
 800cae0:	af06      	add	r7, sp, #24
    tBleStatus ret = BLE_STATUS_SUCCESS;
 800cae2:	2300      	movs	r3, #0
 800cae4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    uint8_t motion_service_uuid[16];
    uint8_t motion_char_uuid[16];

    // Add service
    COPY_MOTION_SERVICE_UUID(motion_service_uuid);
 800cae8:	231b      	movs	r3, #27
 800caea:	753b      	strb	r3, [r7, #20]
 800caec:	23c5      	movs	r3, #197	@ 0xc5
 800caee:	757b      	strb	r3, [r7, #21]
 800caf0:	23d5      	movs	r3, #213	@ 0xd5
 800caf2:	75bb      	strb	r3, [r7, #22]
 800caf4:	23a5      	movs	r3, #165	@ 0xa5
 800caf6:	75fb      	strb	r3, [r7, #23]
 800caf8:	2302      	movs	r3, #2
 800cafa:	763b      	strb	r3, [r7, #24]
 800cafc:	2300      	movs	r3, #0
 800cafe:	767b      	strb	r3, [r7, #25]
 800cb00:	2351      	movs	r3, #81	@ 0x51
 800cb02:	76bb      	strb	r3, [r7, #26]
 800cb04:	23a1      	movs	r3, #161	@ 0xa1
 800cb06:	76fb      	strb	r3, [r7, #27]
 800cb08:	23e5      	movs	r3, #229	@ 0xe5
 800cb0a:	773b      	strb	r3, [r7, #28]
 800cb0c:	2311      	movs	r3, #17
 800cb0e:	777b      	strb	r3, [r7, #29]
 800cb10:	2367      	movs	r3, #103	@ 0x67
 800cb12:	77bb      	strb	r3, [r7, #30]
 800cb14:	2349      	movs	r3, #73	@ 0x49
 800cb16:	77fb      	strb	r3, [r7, #31]
 800cb18:	2300      	movs	r3, #0
 800cb1a:	f887 3020 	strb.w	r3, [r7, #32]
 800cb1e:	2382      	movs	r3, #130	@ 0x82
 800cb20:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
 800cb24:	23a4      	movs	r3, #164	@ 0xa4
 800cb26:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800cb2a:	239f      	movs	r3, #159	@ 0x9f
 800cb2c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    ret = aci_gatt_add_service(UUID_TYPE_128,
 800cb30:	f107 0114 	add.w	r1, r7, #20
 800cb34:	4b30      	ldr	r3, [pc, #192]	@ (800cbf8 <Add_Motion_Notify_Service+0x11c>)
 800cb36:	9300      	str	r3, [sp, #0]
 800cb38:	2305      	movs	r3, #5
 800cb3a:	2201      	movs	r2, #1
 800cb3c:	2002      	movs	r0, #2
 800cb3e:	f7fd fa63 	bl	800a008 <aci_gatt_add_service>
 800cb42:	4603      	mov	r3, r0
 800cb44:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                              (Service_UUID_t *) motion_service_uuid,
                              PRIMARY_SERVICE,
                              2 + 3, /* 2 for service + 6 for 1 characteristic */
                              &(BleApplicationContext.BleApplicationContext_legacy.motion_service_handle));

    if (ret != BLE_STATUS_SUCCESS)
 800cb48:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d008      	beq.n	800cb62 <Add_Motion_Notify_Service+0x86>
    {
        APP_DBG_MSG("Error adding New Notify Service - ret=0x%x\n", ret);
 800cb50:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cb54:	4619      	mov	r1, r3
 800cb56:	4829      	ldr	r0, [pc, #164]	@ (800cbfc <Add_Motion_Notify_Service+0x120>)
 800cb58:	f001 febe 	bl	800e8d8 <iprintf>
        return ret;
 800cb5c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cb60:	e045      	b.n	800cbee <Add_Motion_Notify_Service+0x112>
    }

    // Add characteristic
    COPY_MOTION_UUID(motion_char_uuid);
 800cb62:	231b      	movs	r3, #27
 800cb64:	713b      	strb	r3, [r7, #4]
 800cb66:	23c5      	movs	r3, #197	@ 0xc5
 800cb68:	717b      	strb	r3, [r7, #5]
 800cb6a:	23d5      	movs	r3, #213	@ 0xd5
 800cb6c:	71bb      	strb	r3, [r7, #6]
 800cb6e:	23a5      	movs	r3, #165	@ 0xa5
 800cb70:	71fb      	strb	r3, [r7, #7]
 800cb72:	2302      	movs	r3, #2
 800cb74:	723b      	strb	r3, [r7, #8]
 800cb76:	2300      	movs	r3, #0
 800cb78:	727b      	strb	r3, [r7, #9]
 800cb7a:	2351      	movs	r3, #81	@ 0x51
 800cb7c:	72bb      	strb	r3, [r7, #10]
 800cb7e:	23a1      	movs	r3, #161	@ 0xa1
 800cb80:	72fb      	strb	r3, [r7, #11]
 800cb82:	23e5      	movs	r3, #229	@ 0xe5
 800cb84:	733b      	strb	r3, [r7, #12]
 800cb86:	2311      	movs	r3, #17
 800cb88:	737b      	strb	r3, [r7, #13]
 800cb8a:	2367      	movs	r3, #103	@ 0x67
 800cb8c:	73bb      	strb	r3, [r7, #14]
 800cb8e:	2349      	movs	r3, #73	@ 0x49
 800cb90:	73fb      	strb	r3, [r7, #15]
 800cb92:	2301      	movs	r3, #1
 800cb94:	743b      	strb	r3, [r7, #16]
 800cb96:	2382      	movs	r3, #130	@ 0x82
 800cb98:	747b      	strb	r3, [r7, #17]
 800cb9a:	23a4      	movs	r3, #164	@ 0xa4
 800cb9c:	74bb      	strb	r3, [r7, #18]
 800cb9e:	239f      	movs	r3, #159	@ 0x9f
 800cba0:	74fb      	strb	r3, [r7, #19]
    ret = aci_gatt_add_char(BleApplicationContext.BleApplicationContext_legacy.motion_service_handle,
 800cba2:	4b17      	ldr	r3, [pc, #92]	@ (800cc00 <Add_Motion_Notify_Service+0x124>)
 800cba4:	f8b3 0082 	ldrh.w	r0, [r3, #130]	@ 0x82
 800cba8:	1d3a      	adds	r2, r7, #4
 800cbaa:	4b16      	ldr	r3, [pc, #88]	@ (800cc04 <Add_Motion_Notify_Service+0x128>)
 800cbac:	9305      	str	r3, [sp, #20]
 800cbae:	2300      	movs	r3, #0
 800cbb0:	9304      	str	r3, [sp, #16]
 800cbb2:	230a      	movs	r3, #10
 800cbb4:	9303      	str	r3, [sp, #12]
 800cbb6:	2301      	movs	r3, #1
 800cbb8:	9302      	str	r3, [sp, #8]
 800cbba:	2300      	movs	r3, #0
 800cbbc:	9301      	str	r3, [sp, #4]
 800cbbe:	2310      	movs	r3, #16
 800cbc0:	9300      	str	r3, [sp, #0]
 800cbc2:	2312      	movs	r3, #18
 800cbc4:	2102      	movs	r1, #2
 800cbc6:	f7fd faf5 	bl	800a1b4 <aci_gatt_add_char>
 800cbca:	4603      	mov	r3, r0
 800cbcc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
						   GATT_NOTIFY_ATTRIBUTE_WRITE,
                           10,
                           0,
                           &(BleApplicationContext.motion_char_handle));

    if (ret != BLE_STATUS_SUCCESS)
 800cbd0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d008      	beq.n	800cbea <Add_Motion_Notify_Service+0x10e>
    {
        APP_DBG_MSG("Error adding New Notify Characteristic - ret=0x%x\n", ret);
 800cbd8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cbdc:	4619      	mov	r1, r3
 800cbde:	480a      	ldr	r0, [pc, #40]	@ (800cc08 <Add_Motion_Notify_Service+0x12c>)
 800cbe0:	f001 fe7a 	bl	800e8d8 <iprintf>
        return ret;
 800cbe4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cbe8:	e001      	b.n	800cbee <Add_Motion_Notify_Service+0x112>
    }


    return ret;
 800cbea:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800cbee:	4618      	mov	r0, r3
 800cbf0:	3728      	adds	r7, #40	@ 0x28
 800cbf2:	46bd      	mov	sp, r7
 800cbf4:	bd80      	pop	{r7, pc}
 800cbf6:	bf00      	nop
 800cbf8:	2000055e 	.word	0x2000055e
 800cbfc:	0801004c 	.word	0x0801004c
 800cc00:	200004dc 	.word	0x200004dc
 800cc04:	20000568 	.word	0x20000568
 800cc08:	08010078 	.word	0x08010078

0800cc0c <SVCCTL_App_Notification>:




SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 800cc0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc0e:	b097      	sub	sp, #92	@ 0x5c
 800cc10:	af04      	add	r7, sp, #16
 800cc12:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  uint8_t           Tx_phy, Rx_phy;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 800cc14:	2392      	movs	r3, #146	@ 0x92
 800cc16:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  /* USER CODE BEGIN SVCCTL_App_Notification */
    char BdAddress[20];
    const uint8_t *bdaddr; 
  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	3301      	adds	r3, #1
 800cc1e:	643b      	str	r3, [r7, #64]	@ 0x40

  switch (p_event_pckt->evt)
 800cc20:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cc22:	781b      	ldrb	r3, [r3, #0]
 800cc24:	2bff      	cmp	r3, #255	@ 0xff
 800cc26:	f000 8187 	beq.w	800cf38 <SVCCTL_App_Notification+0x32c>
 800cc2a:	2bff      	cmp	r3, #255	@ 0xff
 800cc2c:	f300 8273 	bgt.w	800d116 <SVCCTL_App_Notification+0x50a>
 800cc30:	2b05      	cmp	r3, #5
 800cc32:	d002      	beq.n	800cc3a <SVCCTL_App_Notification+0x2e>
 800cc34:	2b3e      	cmp	r3, #62	@ 0x3e
 800cc36:	d055      	beq.n	800cce4 <SVCCTL_App_Notification+0xd8>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 800cc38:	e26d      	b.n	800d116 <SVCCTL_App_Notification+0x50a>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 800cc3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cc3c:	3302      	adds	r3, #2
 800cc3e:	623b      	str	r3, [r7, #32]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 800cc40:	6a3b      	ldr	r3, [r7, #32]
 800cc42:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800cc46:	b29a      	uxth	r2, r3
 800cc48:	4baa      	ldr	r3, [pc, #680]	@ (800cef4 <SVCCTL_App_Notification+0x2e8>)
 800cc4a:	8adb      	ldrh	r3, [r3, #22]
 800cc4c:	429a      	cmp	r2, r3
 800cc4e:	d117      	bne.n	800cc80 <SVCCTL_App_Notification+0x74>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 800cc50:	4ba8      	ldr	r3, [pc, #672]	@ (800cef4 <SVCCTL_App_Notification+0x2e8>)
 800cc52:	2200      	movs	r2, #0
 800cc54:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800cc56:	4ba7      	ldr	r3, [pc, #668]	@ (800cef4 <SVCCTL_App_Notification+0x2e8>)
 800cc58:	2200      	movs	r2, #0
 800cc5a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
        APP_DBG_MSG(">>== HCI_DISCONNECTION_COMPLETE_EVT_CODE\n");
 800cc5e:	48a6      	ldr	r0, [pc, #664]	@ (800cef8 <SVCCTL_App_Notification+0x2ec>)
 800cc60:	f001 feaa 	bl	800e9b8 <puts>
                    p_disconnection_complete_event->Connection_Handle,
 800cc64:	6a3b      	ldr	r3, [r7, #32]
 800cc66:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800cc6a:	b29b      	uxth	r3, r3
        APP_DBG_MSG("     - Connection Handle:   0x%x\n     - Reason:    0x%x\n\r",
 800cc6c:	4619      	mov	r1, r3
                    p_disconnection_complete_event->Reason);
 800cc6e:	6a3b      	ldr	r3, [r7, #32]
 800cc70:	78db      	ldrb	r3, [r3, #3]
        APP_DBG_MSG("     - Connection Handle:   0x%x\n     - Reason:    0x%x\n\r",
 800cc72:	461a      	mov	r2, r3
 800cc74:	48a1      	ldr	r0, [pc, #644]	@ (800cefc <SVCCTL_App_Notification+0x2f0>)
 800cc76:	f001 fe2f 	bl	800e8d8 <iprintf>
        mutex = 1;
 800cc7a:	4ba1      	ldr	r3, [pc, #644]	@ (800cf00 <SVCCTL_App_Notification+0x2f4>)
 800cc7c:	2201      	movs	r2, #1
 800cc7e:	701a      	strb	r2, [r3, #0]
      Adv_Request(APP_BLE_FAST_ADV);
 800cc80:	2001      	movs	r0, #1
 800cc82:	f000 fca1 	bl	800d5c8 <Adv_Request>
      HandleNotification.P2P_Evt_Opcode = PEER_DISCON_HANDLE_EVT;
 800cc86:	4b9f      	ldr	r3, [pc, #636]	@ (800cf04 <SVCCTL_App_Notification+0x2f8>)
 800cc88:	2201      	movs	r2, #1
 800cc8a:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800cc8c:	4b99      	ldr	r3, [pc, #612]	@ (800cef4 <SVCCTL_App_Notification+0x2e8>)
 800cc8e:	8ada      	ldrh	r2, [r3, #22]
 800cc90:	4b9c      	ldr	r3, [pc, #624]	@ (800cf04 <SVCCTL_App_Notification+0x2f8>)
 800cc92:	805a      	strh	r2, [r3, #2]
      P2PS_APP_Notification(&HandleNotification);
 800cc94:	489b      	ldr	r0, [pc, #620]	@ (800cf04 <SVCCTL_App_Notification+0x2f8>)
 800cc96:	f000 ff3b 	bl	800db10 <P2PS_APP_Notification>
      bdaddr= BleGetBdAddress();
 800cc9a:	f000 fd33 	bl	800d704 <BleGetBdAddress>
 800cc9e:	6278      	str	r0, [r7, #36]	@ 0x24
      sprintf(BdAddress, "BD_ad=%02x%02x%02x%02x%02x%02x", bdaddr[5], bdaddr[4], bdaddr[3], bdaddr[2], bdaddr[1], bdaddr[0]);
 800cca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cca2:	3305      	adds	r3, #5
 800cca4:	781b      	ldrb	r3, [r3, #0]
 800cca6:	461d      	mov	r5, r3
 800cca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccaa:	3304      	adds	r3, #4
 800ccac:	781b      	ldrb	r3, [r3, #0]
 800ccae:	461e      	mov	r6, r3
 800ccb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccb2:	3303      	adds	r3, #3
 800ccb4:	781b      	ldrb	r3, [r3, #0]
 800ccb6:	461a      	mov	r2, r3
 800ccb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccba:	3302      	adds	r3, #2
 800ccbc:	781b      	ldrb	r3, [r3, #0]
 800ccbe:	4619      	mov	r1, r3
 800ccc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccc2:	3301      	adds	r3, #1
 800ccc4:	781b      	ldrb	r3, [r3, #0]
 800ccc6:	461c      	mov	r4, r3
 800ccc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccca:	781b      	ldrb	r3, [r3, #0]
 800cccc:	f107 0008 	add.w	r0, r7, #8
 800ccd0:	9303      	str	r3, [sp, #12]
 800ccd2:	9402      	str	r4, [sp, #8]
 800ccd4:	9101      	str	r1, [sp, #4]
 800ccd6:	9200      	str	r2, [sp, #0]
 800ccd8:	4633      	mov	r3, r6
 800ccda:	462a      	mov	r2, r5
 800ccdc:	498a      	ldr	r1, [pc, #552]	@ (800cf08 <SVCCTL_App_Notification+0x2fc>)
 800ccde:	f001 fe73 	bl	800e9c8 <siprintf>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 800cce2:	e21b      	b.n	800d11c <SVCCTL_App_Notification+0x510>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 800cce4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cce6:	3302      	adds	r3, #2
 800cce8:	637b      	str	r3, [r7, #52]	@ 0x34
      switch (p_meta_evt->subevent)
 800ccea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ccec:	781b      	ldrb	r3, [r3, #0]
 800ccee:	2b0c      	cmp	r3, #12
 800ccf0:	d033      	beq.n	800cd5a <SVCCTL_App_Notification+0x14e>
 800ccf2:	2b0c      	cmp	r3, #12
 800ccf4:	f300 80fc 	bgt.w	800cef0 <SVCCTL_App_Notification+0x2e4>
 800ccf8:	2b01      	cmp	r3, #1
 800ccfa:	d06c      	beq.n	800cdd6 <SVCCTL_App_Notification+0x1ca>
 800ccfc:	2b03      	cmp	r3, #3
 800ccfe:	f040 80f7 	bne.w	800cef0 <SVCCTL_App_Notification+0x2e4>
          p_connection_update_complete_event = (hci_le_connection_update_complete_event_rp0 *) p_meta_evt->data;
 800cd02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cd04:	3301      	adds	r3, #1
 800cd06:	62fb      	str	r3, [r7, #44]	@ 0x2c
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_UPDATE_COMPLETE_SUBEVT_CODE\n");
 800cd08:	4880      	ldr	r0, [pc, #512]	@ (800cf0c <SVCCTL_App_Notification+0x300>)
 800cd0a:	f001 fe55 	bl	800e9b8 <puts>
                       p_connection_update_complete_event->Conn_Interval*1.25,
 800cd0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd10:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800cd14:	b29b      	uxth	r3, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800cd16:	4618      	mov	r0, r3
 800cd18:	f7f3 fd06 	bl	8000728 <__aeabi_i2d>
 800cd1c:	f04f 0200 	mov.w	r2, #0
 800cd20:	4b7b      	ldr	r3, [pc, #492]	@ (800cf10 <SVCCTL_App_Notification+0x304>)
 800cd22:	f7f3 fa85 	bl	8000230 <__aeabi_dmul>
 800cd26:	4602      	mov	r2, r0
 800cd28:	460b      	mov	r3, r1
 800cd2a:	4610      	mov	r0, r2
 800cd2c:	4619      	mov	r1, r3
                       p_connection_update_complete_event->Conn_Latency,
 800cd2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd30:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800cd34:	b29b      	uxth	r3, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800cd36:	461c      	mov	r4, r3
                       p_connection_update_complete_event->Supervision_Timeout*10);
 800cd38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd3a:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800cd3e:	b29b      	uxth	r3, r3
 800cd40:	461a      	mov	r2, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800cd42:	4613      	mov	r3, r2
 800cd44:	009b      	lsls	r3, r3, #2
 800cd46:	4413      	add	r3, r2
 800cd48:	005b      	lsls	r3, r3, #1
 800cd4a:	9301      	str	r3, [sp, #4]
 800cd4c:	9400      	str	r4, [sp, #0]
 800cd4e:	4602      	mov	r2, r0
 800cd50:	460b      	mov	r3, r1
 800cd52:	4870      	ldr	r0, [pc, #448]	@ (800cf14 <SVCCTL_App_Notification+0x308>)
 800cd54:	f001 fdc0 	bl	800e8d8 <iprintf>
          break;
 800cd58:	e0cb      	b.n	800cef2 <SVCCTL_App_Notification+0x2e6>
          p_evt_le_phy_update_complete = (hci_le_phy_update_complete_event_rp0*)p_meta_evt->data;
 800cd5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cd5c:	3301      	adds	r3, #1
 800cd5e:	633b      	str	r3, [r7, #48]	@ 0x30
          APP_DBG_MSG("==>> HCI_LE_PHY_UPDATE_COMPLETE_SUBEVT_CODE - ");
 800cd60:	486d      	ldr	r0, [pc, #436]	@ (800cf18 <SVCCTL_App_Notification+0x30c>)
 800cd62:	f001 fdb9 	bl	800e8d8 <iprintf>
          if (p_evt_le_phy_update_complete->Status == 0)
 800cd66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd68:	781b      	ldrb	r3, [r3, #0]
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d103      	bne.n	800cd76 <SVCCTL_App_Notification+0x16a>
            APP_DBG_MSG("status ok \n");
 800cd6e:	486b      	ldr	r0, [pc, #428]	@ (800cf1c <SVCCTL_App_Notification+0x310>)
 800cd70:	f001 fe22 	bl	800e9b8 <puts>
 800cd74:	e002      	b.n	800cd7c <SVCCTL_App_Notification+0x170>
            APP_DBG_MSG("status nok \n");
 800cd76:	486a      	ldr	r0, [pc, #424]	@ (800cf20 <SVCCTL_App_Notification+0x314>)
 800cd78:	f001 fe1e 	bl	800e9b8 <puts>
          ret = hci_le_read_phy(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, &Tx_phy, &Rx_phy);
 800cd7c:	4b5d      	ldr	r3, [pc, #372]	@ (800cef4 <SVCCTL_App_Notification+0x2e8>)
 800cd7e:	8adb      	ldrh	r3, [r3, #22]
 800cd80:	f107 021e 	add.w	r2, r7, #30
 800cd84:	f107 011f 	add.w	r1, r7, #31
 800cd88:	4618      	mov	r0, r3
 800cd8a:	f7fd fd7d 	bl	800a888 <hci_le_read_phy>
 800cd8e:	4603      	mov	r3, r0
 800cd90:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
          if (ret != BLE_STATUS_SUCCESS)
 800cd94:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d003      	beq.n	800cda4 <SVCCTL_App_Notification+0x198>
            APP_DBG_MSG("==>> hci_le_read_phy : fail\n\r");
 800cd9c:	4861      	ldr	r0, [pc, #388]	@ (800cf24 <SVCCTL_App_Notification+0x318>)
 800cd9e:	f001 fd9b 	bl	800e8d8 <iprintf>
          break;
 800cda2:	e0a6      	b.n	800cef2 <SVCCTL_App_Notification+0x2e6>
            APP_DBG_MSG("==>> hci_le_read_phy - Success \n");
 800cda4:	4860      	ldr	r0, [pc, #384]	@ (800cf28 <SVCCTL_App_Notification+0x31c>)
 800cda6:	f001 fe07 	bl	800e9b8 <puts>
            if ((Tx_phy == TX_2M) && (Rx_phy == RX_2M))
 800cdaa:	7ffb      	ldrb	r3, [r7, #31]
 800cdac:	2b02      	cmp	r3, #2
 800cdae:	d10a      	bne.n	800cdc6 <SVCCTL_App_Notification+0x1ba>
 800cdb0:	7fbb      	ldrb	r3, [r7, #30]
 800cdb2:	2b02      	cmp	r3, #2
 800cdb4:	d107      	bne.n	800cdc6 <SVCCTL_App_Notification+0x1ba>
              APP_DBG_MSG("==>> PHY Param  TX= %d, RX= %d \n\r", Tx_phy, Rx_phy);
 800cdb6:	7ffb      	ldrb	r3, [r7, #31]
 800cdb8:	4619      	mov	r1, r3
 800cdba:	7fbb      	ldrb	r3, [r7, #30]
 800cdbc:	461a      	mov	r2, r3
 800cdbe:	485b      	ldr	r0, [pc, #364]	@ (800cf2c <SVCCTL_App_Notification+0x320>)
 800cdc0:	f001 fd8a 	bl	800e8d8 <iprintf>
          break;
 800cdc4:	e095      	b.n	800cef2 <SVCCTL_App_Notification+0x2e6>
              APP_DBG_MSG("==>> PHY Param  TX= %d, RX= %d \n\r", Tx_phy, Rx_phy);
 800cdc6:	7ffb      	ldrb	r3, [r7, #31]
 800cdc8:	4619      	mov	r1, r3
 800cdca:	7fbb      	ldrb	r3, [r7, #30]
 800cdcc:	461a      	mov	r2, r3
 800cdce:	4857      	ldr	r0, [pc, #348]	@ (800cf2c <SVCCTL_App_Notification+0x320>)
 800cdd0:	f001 fd82 	bl	800e8d8 <iprintf>
          break;
 800cdd4:	e08d      	b.n	800cef2 <SVCCTL_App_Notification+0x2e6>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 800cdd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cdd8:	3301      	adds	r3, #1
 800cdda:	62bb      	str	r3, [r7, #40]	@ 0x28
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE - Connection handle: 0x%x\n", p_connection_complete_event->Connection_Handle);
 800cddc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdde:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800cde2:	b29b      	uxth	r3, r3
 800cde4:	4619      	mov	r1, r3
 800cde6:	4852      	ldr	r0, [pc, #328]	@ (800cf30 <SVCCTL_App_Notification+0x324>)
 800cde8:	f001 fd76 	bl	800e8d8 <iprintf>
                      p_connection_complete_event->Peer_Address[5],
 800cdec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdee:	7a9b      	ldrb	r3, [r3, #10]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 800cdf0:	4618      	mov	r0, r3
                      p_connection_complete_event->Peer_Address[4],
 800cdf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdf4:	7a5b      	ldrb	r3, [r3, #9]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 800cdf6:	461c      	mov	r4, r3
                      p_connection_complete_event->Peer_Address[3],
 800cdf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdfa:	7a1b      	ldrb	r3, [r3, #8]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 800cdfc:	461d      	mov	r5, r3
                      p_connection_complete_event->Peer_Address[2],
 800cdfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce00:	79db      	ldrb	r3, [r3, #7]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 800ce02:	461a      	mov	r2, r3
                      p_connection_complete_event->Peer_Address[1],
 800ce04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce06:	799b      	ldrb	r3, [r3, #6]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 800ce08:	4619      	mov	r1, r3
                      p_connection_complete_event->Peer_Address[0]);
 800ce0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce0c:	795b      	ldrb	r3, [r3, #5]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 800ce0e:	9302      	str	r3, [sp, #8]
 800ce10:	9101      	str	r1, [sp, #4]
 800ce12:	9200      	str	r2, [sp, #0]
 800ce14:	462b      	mov	r3, r5
 800ce16:	4622      	mov	r2, r4
 800ce18:	4601      	mov	r1, r0
 800ce1a:	4846      	ldr	r0, [pc, #280]	@ (800cf34 <SVCCTL_App_Notification+0x328>)
 800ce1c:	f001 fd5c 	bl	800e8d8 <iprintf>
                      p_connection_complete_event->Conn_Interval*1.25,
 800ce20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce22:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 800ce26:	b29b      	uxth	r3, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800ce28:	4618      	mov	r0, r3
 800ce2a:	f7f3 fc7d 	bl	8000728 <__aeabi_i2d>
 800ce2e:	f04f 0200 	mov.w	r2, #0
 800ce32:	4b37      	ldr	r3, [pc, #220]	@ (800cf10 <SVCCTL_App_Notification+0x304>)
 800ce34:	f7f3 f9fc 	bl	8000230 <__aeabi_dmul>
 800ce38:	4602      	mov	r2, r0
 800ce3a:	460b      	mov	r3, r1
 800ce3c:	4610      	mov	r0, r2
 800ce3e:	4619      	mov	r1, r3
                      p_connection_complete_event->Conn_Latency,
 800ce40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce42:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 800ce46:	b29b      	uxth	r3, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800ce48:	461c      	mov	r4, r3
                      p_connection_complete_event->Supervision_Timeout*10
 800ce4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce4c:	f8b3 300f 	ldrh.w	r3, [r3, #15]
 800ce50:	b29b      	uxth	r3, r3
 800ce52:	461a      	mov	r2, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800ce54:	4613      	mov	r3, r2
 800ce56:	009b      	lsls	r3, r3, #2
 800ce58:	4413      	add	r3, r2
 800ce5a:	005b      	lsls	r3, r3, #1
 800ce5c:	9301      	str	r3, [sp, #4]
 800ce5e:	9400      	str	r4, [sp, #0]
 800ce60:	4602      	mov	r2, r0
 800ce62:	460b      	mov	r3, r1
 800ce64:	482b      	ldr	r0, [pc, #172]	@ (800cf14 <SVCCTL_App_Notification+0x308>)
 800ce66:	f001 fd37 	bl	800e8d8 <iprintf>
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 800ce6a:	4b22      	ldr	r3, [pc, #136]	@ (800cef4 <SVCCTL_App_Notification+0x2e8>)
 800ce6c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ce70:	2b04      	cmp	r3, #4
 800ce72:	d104      	bne.n	800ce7e <SVCCTL_App_Notification+0x272>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 800ce74:	4b1f      	ldr	r3, [pc, #124]	@ (800cef4 <SVCCTL_App_Notification+0x2e8>)
 800ce76:	2206      	movs	r2, #6
 800ce78:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 800ce7c:	e003      	b.n	800ce86 <SVCCTL_App_Notification+0x27a>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 800ce7e:	4b1d      	ldr	r3, [pc, #116]	@ (800cef4 <SVCCTL_App_Notification+0x2e8>)
 800ce80:	2205      	movs	r2, #5
 800ce82:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 800ce86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce88:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800ce8c:	b29a      	uxth	r2, r3
 800ce8e:	4b19      	ldr	r3, [pc, #100]	@ (800cef4 <SVCCTL_App_Notification+0x2e8>)
 800ce90:	82da      	strh	r2, [r3, #22]
          HandleNotification.P2P_Evt_Opcode = PEER_CONN_HANDLE_EVT;
 800ce92:	4b1c      	ldr	r3, [pc, #112]	@ (800cf04 <SVCCTL_App_Notification+0x2f8>)
 800ce94:	2200      	movs	r2, #0
 800ce96:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800ce98:	4b16      	ldr	r3, [pc, #88]	@ (800cef4 <SVCCTL_App_Notification+0x2e8>)
 800ce9a:	8ada      	ldrh	r2, [r3, #22]
 800ce9c:	4b19      	ldr	r3, [pc, #100]	@ (800cf04 <SVCCTL_App_Notification+0x2f8>)
 800ce9e:	805a      	strh	r2, [r3, #2]
          P2PS_APP_Notification(&HandleNotification);
 800cea0:	4818      	ldr	r0, [pc, #96]	@ (800cf04 <SVCCTL_App_Notification+0x2f8>)
 800cea2:	f000 fe35 	bl	800db10 <P2PS_APP_Notification>
          bdaddr= BleGetBdAddress();
 800cea6:	f000 fc2d 	bl	800d704 <BleGetBdAddress>
 800ceaa:	6278      	str	r0, [r7, #36]	@ 0x24
          sprintf(BdAddress, "BD_ad=%02x%02x%02x%02x%02x%02x", bdaddr[5],bdaddr[4],bdaddr[3],bdaddr[2],bdaddr[1],bdaddr[0]);
 800ceac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ceae:	3305      	adds	r3, #5
 800ceb0:	781b      	ldrb	r3, [r3, #0]
 800ceb2:	461d      	mov	r5, r3
 800ceb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ceb6:	3304      	adds	r3, #4
 800ceb8:	781b      	ldrb	r3, [r3, #0]
 800ceba:	461e      	mov	r6, r3
 800cebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cebe:	3303      	adds	r3, #3
 800cec0:	781b      	ldrb	r3, [r3, #0]
 800cec2:	461a      	mov	r2, r3
 800cec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cec6:	3302      	adds	r3, #2
 800cec8:	781b      	ldrb	r3, [r3, #0]
 800ceca:	4619      	mov	r1, r3
 800cecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cece:	3301      	adds	r3, #1
 800ced0:	781b      	ldrb	r3, [r3, #0]
 800ced2:	461c      	mov	r4, r3
 800ced4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ced6:	781b      	ldrb	r3, [r3, #0]
 800ced8:	f107 0008 	add.w	r0, r7, #8
 800cedc:	9303      	str	r3, [sp, #12]
 800cede:	9402      	str	r4, [sp, #8]
 800cee0:	9101      	str	r1, [sp, #4]
 800cee2:	9200      	str	r2, [sp, #0]
 800cee4:	4633      	mov	r3, r6
 800cee6:	462a      	mov	r2, r5
 800cee8:	4907      	ldr	r1, [pc, #28]	@ (800cf08 <SVCCTL_App_Notification+0x2fc>)
 800ceea:	f001 fd6d 	bl	800e9c8 <siprintf>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 800ceee:	e000      	b.n	800cef2 <SVCCTL_App_Notification+0x2e6>
          break;
 800cef0:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 800cef2:	e113      	b.n	800d11c <SVCCTL_App_Notification+0x510>
 800cef4:	200004dc 	.word	0x200004dc
 800cef8:	080100ac 	.word	0x080100ac
 800cefc:	080100d8 	.word	0x080100d8
 800cf00:	20000579 	.word	0x20000579
 800cf04:	20000574 	.word	0x20000574
 800cf08:	0800ffb8 	.word	0x0800ffb8
 800cf0c:	08010114 	.word	0x08010114
 800cf10:	3ff40000 	.word	0x3ff40000
 800cf14:	08010148 	.word	0x08010148
 800cf18:	080101b4 	.word	0x080101b4
 800cf1c:	080101e4 	.word	0x080101e4
 800cf20:	080101f0 	.word	0x080101f0
 800cf24:	080101fc 	.word	0x080101fc
 800cf28:	0801021c 	.word	0x0801021c
 800cf2c:	0801023c 	.word	0x0801023c
 800cf30:	08010260 	.word	0x08010260
 800cf34:	080102a8 	.word	0x080102a8
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 800cf38:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cf3a:	3302      	adds	r3, #2
 800cf3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
      switch (p_blecore_evt->ecode)
 800cf3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cf40:	881b      	ldrh	r3, [r3, #0]
 800cf42:	b29b      	uxth	r3, r3
 800cf44:	f640 420e 	movw	r2, #3086	@ 0xc0e
 800cf48:	4293      	cmp	r3, r2
 800cf4a:	f000 80da 	beq.w	800d102 <SVCCTL_App_Notification+0x4f6>
 800cf4e:	f640 420e 	movw	r2, #3086	@ 0xc0e
 800cf52:	4293      	cmp	r3, r2
 800cf54:	f300 80e1 	bgt.w	800d11a <SVCCTL_App_Notification+0x50e>
 800cf58:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800cf5c:	f000 80c1 	beq.w	800d0e2 <SVCCTL_App_Notification+0x4d6>
 800cf60:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800cf64:	f300 80d9 	bgt.w	800d11a <SVCCTL_App_Notification+0x50e>
 800cf68:	2b04      	cmp	r3, #4
 800cf6a:	f000 80c2 	beq.w	800d0f2 <SVCCTL_App_Notification+0x4e6>
 800cf6e:	2b04      	cmp	r3, #4
 800cf70:	f2c0 80d3 	blt.w	800d11a <SVCCTL_App_Notification+0x50e>
 800cf74:	f240 420a 	movw	r2, #1034	@ 0x40a
 800cf78:	4293      	cmp	r3, r2
 800cf7a:	f300 80ce 	bgt.w	800d11a <SVCCTL_App_Notification+0x50e>
 800cf7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cf82:	f2c0 80ca 	blt.w	800d11a <SVCCTL_App_Notification+0x50e>
 800cf86:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 800cf8a:	2b0a      	cmp	r3, #10
 800cf8c:	f200 80c5 	bhi.w	800d11a <SVCCTL_App_Notification+0x50e>
 800cf90:	a201      	add	r2, pc, #4	@ (adr r2, 800cf98 <SVCCTL_App_Notification+0x38c>)
 800cf92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf96:	bf00      	nop
 800cf98:	0800cfc5 	.word	0x0800cfc5
 800cf9c:	0800d0ad 	.word	0x0800d0ad
 800cfa0:	0800cfcd 	.word	0x0800cfcd
 800cfa4:	0800d003 	.word	0x0800d003
 800cfa8:	0800d00b 	.word	0x0800d00b
 800cfac:	0800d013 	.word	0x0800d013
 800cfb0:	0800d11b 	.word	0x0800d11b
 800cfb4:	0800d0eb 	.word	0x0800d0eb
 800cfb8:	0800d047 	.word	0x0800d047
 800cfbc:	0800d057 	.word	0x0800d057
 800cfc0:	0800d04f 	.word	0x0800d04f
          APP_DBG_MSG(">>== ACI_GAP_LIMITED_DISCOVERABLE_VSEVT_CODE \n");
 800cfc4:	4858      	ldr	r0, [pc, #352]	@ (800d128 <SVCCTL_App_Notification+0x51c>)
 800cfc6:	f001 fcf7 	bl	800e9b8 <puts>
          break; /* ACI_GAP_LIMITED_DISCOVERABLE_VSEVT_CODE */
 800cfca:	e0a3      	b.n	800d114 <SVCCTL_App_Notification+0x508>
          APP_DBG_MSG(">>== ACI_GAP_PASS_KEY_REQ_VSEVT_CODE \n");
 800cfcc:	4857      	ldr	r0, [pc, #348]	@ (800d12c <SVCCTL_App_Notification+0x520>)
 800cfce:	f001 fcf3 	bl	800e9b8 <puts>
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,123456);
 800cfd2:	4b57      	ldr	r3, [pc, #348]	@ (800d130 <SVCCTL_App_Notification+0x524>)
 800cfd4:	8adb      	ldrh	r3, [r3, #22]
 800cfd6:	4957      	ldr	r1, [pc, #348]	@ (800d134 <SVCCTL_App_Notification+0x528>)
 800cfd8:	4618      	mov	r0, r3
 800cfda:	f7fc fd8b 	bl	8009af4 <aci_gap_pass_key_resp>
 800cfde:	4603      	mov	r3, r0
 800cfe0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
          if (ret != BLE_STATUS_SUCCESS)
 800cfe4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d006      	beq.n	800cffa <SVCCTL_App_Notification+0x3ee>
            APP_DBG_MSG("==>> aci_gap_pass_key_resp : Fail, reason: 0x%x\n", ret);
 800cfec:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800cff0:	4619      	mov	r1, r3
 800cff2:	4851      	ldr	r0, [pc, #324]	@ (800d138 <SVCCTL_App_Notification+0x52c>)
 800cff4:	f001 fc70 	bl	800e8d8 <iprintf>
          break; /* ACI_GAP_PASS_KEY_REQ_VSEVT_CODE */
 800cff8:	e08c      	b.n	800d114 <SVCCTL_App_Notification+0x508>
            APP_DBG_MSG("==>> aci_gap_pass_key_resp : Success \n");
 800cffa:	4850      	ldr	r0, [pc, #320]	@ (800d13c <SVCCTL_App_Notification+0x530>)
 800cffc:	f001 fcdc 	bl	800e9b8 <puts>
          break; /* ACI_GAP_PASS_KEY_REQ_VSEVT_CODE */
 800d000:	e088      	b.n	800d114 <SVCCTL_App_Notification+0x508>
          APP_DBG_MSG(">>== ACI_GAP_AUTHORIZATION_REQ_VSEVT_CODE\n");
 800d002:	484f      	ldr	r0, [pc, #316]	@ (800d140 <SVCCTL_App_Notification+0x534>)
 800d004:	f001 fcd8 	bl	800e9b8 <puts>
          break; /* ACI_GAP_AUTHORIZATION_REQ_VSEVT_CODE */
 800d008:	e084      	b.n	800d114 <SVCCTL_App_Notification+0x508>
          APP_DBG_MSG("==>> ACI_GAP_PERIPHERAL_SECURITY_INITIATED_VSEVT_CODE \n");
 800d00a:	484e      	ldr	r0, [pc, #312]	@ (800d144 <SVCCTL_App_Notification+0x538>)
 800d00c:	f001 fcd4 	bl	800e9b8 <puts>
          break; /* ACI_GAP_PERIPHERAL_SECURITY_INITIATED_VSEVT_CODE */
 800d010:	e080      	b.n	800d114 <SVCCTL_App_Notification+0x508>
          APP_DBG_MSG("==>> ACI_GAP_BOND_LOST_VSEVT_CODE \n");
 800d012:	484d      	ldr	r0, [pc, #308]	@ (800d148 <SVCCTL_App_Notification+0x53c>)
 800d014:	f001 fcd0 	bl	800e9b8 <puts>
          ret = aci_gap_allow_rebond(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 800d018:	4b45      	ldr	r3, [pc, #276]	@ (800d130 <SVCCTL_App_Notification+0x524>)
 800d01a:	8adb      	ldrh	r3, [r3, #22]
 800d01c:	4618      	mov	r0, r3
 800d01e:	f7fc ff13 	bl	8009e48 <aci_gap_allow_rebond>
 800d022:	4603      	mov	r3, r0
 800d024:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
          if (ret != BLE_STATUS_SUCCESS)
 800d028:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d006      	beq.n	800d03e <SVCCTL_App_Notification+0x432>
            APP_DBG_MSG("==>> aci_gap_allow_rebond : Fail, reason: 0x%x\n", ret);
 800d030:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800d034:	4619      	mov	r1, r3
 800d036:	4845      	ldr	r0, [pc, #276]	@ (800d14c <SVCCTL_App_Notification+0x540>)
 800d038:	f001 fc4e 	bl	800e8d8 <iprintf>
          break; /* ACI_GAP_BOND_LOST_VSEVT_CODE */
 800d03c:	e06a      	b.n	800d114 <SVCCTL_App_Notification+0x508>
            APP_DBG_MSG("==>> aci_gap_allow_rebond : Success \n");
 800d03e:	4844      	ldr	r0, [pc, #272]	@ (800d150 <SVCCTL_App_Notification+0x544>)
 800d040:	f001 fcba 	bl	800e9b8 <puts>
          break; /* ACI_GAP_BOND_LOST_VSEVT_CODE */
 800d044:	e066      	b.n	800d114 <SVCCTL_App_Notification+0x508>
          APP_DBG_MSG(">>== ACI_GAP_ADDR_NOT_RESOLVED_VSEVT_CODE \n");
 800d046:	4843      	ldr	r0, [pc, #268]	@ (800d154 <SVCCTL_App_Notification+0x548>)
 800d048:	f001 fcb6 	bl	800e9b8 <puts>
          break; /* ACI_GAP_ADDR_NOT_RESOLVED_VSEVT_CODE */
 800d04c:	e062      	b.n	800d114 <SVCCTL_App_Notification+0x508>
          APP_DBG_MSG(">>== ACI_GAP_KEYPRESS_NOTIFICATION_VSEVT_CODE\n");
 800d04e:	4842      	ldr	r0, [pc, #264]	@ (800d158 <SVCCTL_App_Notification+0x54c>)
 800d050:	f001 fcb2 	bl	800e9b8 <puts>
          break; /* ACI_GAP_KEYPRESS_NOTIFICATION_VSEVT_CODE */    
 800d054:	e05e      	b.n	800d114 <SVCCTL_App_Notification+0x508>
          APP_DBG_MSG(">>== ACI_GAP_NUMERIC_COMPARISON_VALUE_VSEVT_CODE\n");
 800d056:	4841      	ldr	r0, [pc, #260]	@ (800d15c <SVCCTL_App_Notification+0x550>)
 800d058:	f001 fcae 	bl	800e9b8 <puts>
                      ((aci_gap_numeric_comparison_value_event_rp0 *)(p_blecore_evt->data))->Numeric_Value);
 800d05c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d05e:	3302      	adds	r3, #2
          APP_DBG_MSG("     - numeric_value = %ld\n",
 800d060:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800d064:	4619      	mov	r1, r3
 800d066:	483e      	ldr	r0, [pc, #248]	@ (800d160 <SVCCTL_App_Notification+0x554>)
 800d068:	f001 fc36 	bl	800e8d8 <iprintf>
                      ((aci_gap_numeric_comparison_value_event_rp0 *)(p_blecore_evt->data))->Numeric_Value);
 800d06c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d06e:	3302      	adds	r3, #2
          APP_DBG_MSG("     - Hex_value = %lx\n",
 800d070:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800d074:	4619      	mov	r1, r3
 800d076:	483b      	ldr	r0, [pc, #236]	@ (800d164 <SVCCTL_App_Notification+0x558>)
 800d078:	f001 fc2e 	bl	800e8d8 <iprintf>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES); /* CONFIRM_YES = 1 */
 800d07c:	4b2c      	ldr	r3, [pc, #176]	@ (800d130 <SVCCTL_App_Notification+0x524>)
 800d07e:	8adb      	ldrh	r3, [r3, #22]
 800d080:	2101      	movs	r1, #1
 800d082:	4618      	mov	r0, r3
 800d084:	f7fc ff34 	bl	8009ef0 <aci_gap_numeric_comparison_value_confirm_yesno>
 800d088:	4603      	mov	r3, r0
 800d08a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
          if (ret != BLE_STATUS_SUCCESS)
 800d08e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800d092:	2b00      	cmp	r3, #0
 800d094:	d006      	beq.n	800d0a4 <SVCCTL_App_Notification+0x498>
            APP_DBG_MSG("==>> aci_gap_numeric_comparison_value_confirm_yesno-->YES : Fail, reason: 0x%x\n", ret);
 800d096:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800d09a:	4619      	mov	r1, r3
 800d09c:	4832      	ldr	r0, [pc, #200]	@ (800d168 <SVCCTL_App_Notification+0x55c>)
 800d09e:	f001 fc1b 	bl	800e8d8 <iprintf>
          break;
 800d0a2:	e037      	b.n	800d114 <SVCCTL_App_Notification+0x508>
            APP_DBG_MSG("==>> aci_gap_numeric_comparison_value_confirm_yesno-->YES : Success \n");
 800d0a4:	4831      	ldr	r0, [pc, #196]	@ (800d16c <SVCCTL_App_Notification+0x560>)
 800d0a6:	f001 fc87 	bl	800e9b8 <puts>
          break;
 800d0aa:	e033      	b.n	800d114 <SVCCTL_App_Notification+0x508>
          pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 800d0ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d0ae:	3302      	adds	r3, #2
 800d0b0:	63bb      	str	r3, [r7, #56]	@ 0x38
          APP_DBG_MSG(">>== ACI_GAP_PAIRING_COMPLETE_VSEVT_CODE\n");
 800d0b2:	482f      	ldr	r0, [pc, #188]	@ (800d170 <SVCCTL_App_Notification+0x564>)
 800d0b4:	f001 fc80 	bl	800e9b8 <puts>
          if (pairing_complete->Status == 0)
 800d0b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0ba:	789b      	ldrb	r3, [r3, #2]
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d103      	bne.n	800d0c8 <SVCCTL_App_Notification+0x4bc>
            APP_DBG_MSG("     - Pairing Success\n");
 800d0c0:	482c      	ldr	r0, [pc, #176]	@ (800d174 <SVCCTL_App_Notification+0x568>)
 800d0c2:	f001 fc79 	bl	800e9b8 <puts>
 800d0c6:	e008      	b.n	800d0da <SVCCTL_App_Notification+0x4ce>
            APP_DBG_MSG("     - Pairing KO \n     - Status: 0x%x\n     - Reason: 0x%x\n",pairing_complete->Status, pairing_complete->Reason);
 800d0c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0ca:	789b      	ldrb	r3, [r3, #2]
 800d0cc:	4619      	mov	r1, r3
 800d0ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0d0:	78db      	ldrb	r3, [r3, #3]
 800d0d2:	461a      	mov	r2, r3
 800d0d4:	4828      	ldr	r0, [pc, #160]	@ (800d178 <SVCCTL_App_Notification+0x56c>)
 800d0d6:	f001 fbff 	bl	800e8d8 <iprintf>
          APP_DBG_MSG("\n");
 800d0da:	200a      	movs	r0, #10
 800d0dc:	f001 fc0e 	bl	800e8fc <putchar>
          break;    
 800d0e0:	e018      	b.n	800d114 <SVCCTL_App_Notification+0x508>
          mutex = 1;
 800d0e2:	4b26      	ldr	r3, [pc, #152]	@ (800d17c <SVCCTL_App_Notification+0x570>)
 800d0e4:	2201      	movs	r2, #1
 800d0e6:	701a      	strb	r2, [r3, #0]
          break;
 800d0e8:	e014      	b.n	800d114 <SVCCTL_App_Notification+0x508>
          APP_DBG_MSG(">>== ACI_GAP_PROC_COMPLETE_VSEVT_CODE \r");
 800d0ea:	4825      	ldr	r0, [pc, #148]	@ (800d180 <SVCCTL_App_Notification+0x574>)
 800d0ec:	f001 fbf4 	bl	800e8d8 <iprintf>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 800d0f0:	e010      	b.n	800d114 <SVCCTL_App_Notification+0x508>
          HW_TS_Start(BleApplicationContext.SwitchOffGPIO_timer_Id, (uint32_t)LED_ON_TIMEOUT);
 800d0f2:	4b0f      	ldr	r3, [pc, #60]	@ (800d130 <SVCCTL_App_Notification+0x524>)
 800d0f4:	f893 3086 	ldrb.w	r3, [r3, #134]	@ 0x86
 800d0f8:	210a      	movs	r1, #10
 800d0fa:	4618      	mov	r0, r3
 800d0fc:	f7f5 f970 	bl	80023e0 <HW_TS_Start>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 800d100:	e008      	b.n	800d114 <SVCCTL_App_Notification+0x508>
          APP_DBG_MSG(">>== ACI_GATT_INDICATION_VSEVT_CODE \r");
 800d102:	4820      	ldr	r0, [pc, #128]	@ (800d184 <SVCCTL_App_Notification+0x578>)
 800d104:	f001 fbe8 	bl	800e8d8 <iprintf>
          aci_gatt_confirm_indication(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 800d108:	4b09      	ldr	r3, [pc, #36]	@ (800d130 <SVCCTL_App_Notification+0x524>)
 800d10a:	8adb      	ldrh	r3, [r3, #22]
 800d10c:	4618      	mov	r0, r3
 800d10e:	f7fd fa02 	bl	800a516 <aci_gatt_confirm_indication>
        break;
 800d112:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800d114:	e001      	b.n	800d11a <SVCCTL_App_Notification+0x50e>
      break;
 800d116:	bf00      	nop
 800d118:	e000      	b.n	800d11c <SVCCTL_App_Notification+0x510>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800d11a:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 800d11c:	2301      	movs	r3, #1
}
 800d11e:	4618      	mov	r0, r3
 800d120:	374c      	adds	r7, #76	@ 0x4c
 800d122:	46bd      	mov	sp, r7
 800d124:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d126:	bf00      	nop
 800d128:	080102f8 	.word	0x080102f8
 800d12c:	08010328 	.word	0x08010328
 800d130:	200004dc 	.word	0x200004dc
 800d134:	0001e240 	.word	0x0001e240
 800d138:	08010350 	.word	0x08010350
 800d13c:	08010384 	.word	0x08010384
 800d140:	080103ac 	.word	0x080103ac
 800d144:	080103d8 	.word	0x080103d8
 800d148:	08010410 	.word	0x08010410
 800d14c:	08010434 	.word	0x08010434
 800d150:	08010464 	.word	0x08010464
 800d154:	0801048c 	.word	0x0801048c
 800d158:	080104b8 	.word	0x080104b8
 800d15c:	080104e8 	.word	0x080104e8
 800d160:	0801051c 	.word	0x0801051c
 800d164:	08010538 	.word	0x08010538
 800d168:	08010550 	.word	0x08010550
 800d16c:	080105a0 	.word	0x080105a0
 800d170:	080105e8 	.word	0x080105e8
 800d174:	08010614 	.word	0x08010614
 800d178:	0801062c 	.word	0x0801062c
 800d17c:	20000579 	.word	0x20000579
 800d180:	08010668 	.word	0x08010668
 800d184:	08010690 	.word	0x08010690

0800d188 <APP_BLE_Send_EEGData_Notification>:
 *
 * Hermes Characteristics notifications
 *
 **/
uint8_t  APP_BLE_Send_EEGData_Notification(uint8_t* payload, uint8_t length)
{
 800d188:	b580      	push	{r7, lr}
 800d18a:	b086      	sub	sp, #24
 800d18c:	af02      	add	r7, sp, #8
 800d18e:	6078      	str	r0, [r7, #4]
 800d190:	460b      	mov	r3, r1
 800d192:	70fb      	strb	r3, [r7, #3]
    uint8_t  ret = BLE_STATUS_INVALID_PARAMS;
 800d194:	2392      	movs	r3, #146	@ 0x92
 800d196:	73fb      	strb	r3, [r7, #15]

    if(length <= NEW_NOTIFY_CHAR_VALUE_LENGTH)
 800d198:	78fb      	ldrb	r3, [r7, #3]
 800d19a:	2bf1      	cmp	r3, #241	@ 0xf1
 800d19c:	d80e      	bhi.n	800d1bc <APP_BLE_Send_EEGData_Notification+0x34>
    {
        ret = aci_gatt_update_char_value(BleApplicationContext.BleApplicationContext_legacy.eeg_service_handle,
 800d19e:	4b0a      	ldr	r3, [pc, #40]	@ (800d1c8 <APP_BLE_Send_EEGData_Notification+0x40>)
 800d1a0:	f8b3 007e 	ldrh.w	r0, [r3, #126]	@ 0x7e
 800d1a4:	4b08      	ldr	r3, [pc, #32]	@ (800d1c8 <APP_BLE_Send_EEGData_Notification+0x40>)
 800d1a6:	f8b3 1088 	ldrh.w	r1, [r3, #136]	@ 0x88
 800d1aa:	78fa      	ldrb	r2, [r7, #3]
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	9300      	str	r3, [sp, #0]
 800d1b0:	4613      	mov	r3, r2
 800d1b2:	2200      	movs	r2, #0
 800d1b4:	f7fd f906 	bl	800a3c4 <aci_gatt_update_char_value>
 800d1b8:	4603      	mov	r3, r0
 800d1ba:	73fb      	strb	r3, [r7, #15]
                                        0, /* offset */
                                        length, /* data length */
                                        payload);
    }

    return ret;
 800d1bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1be:	4618      	mov	r0, r3
 800d1c0:	3710      	adds	r7, #16
 800d1c2:	46bd      	mov	sp, r7
 800d1c4:	bd80      	pop	{r7, pc}
 800d1c6:	bf00      	nop
 800d1c8:	200004dc 	.word	0x200004dc

0800d1cc <APP_BLE_Send_Event_Notification>:


uint8_t  APP_BLE_Send_Event_Notification(event_packet_t* payload)
{
 800d1cc:	b580      	push	{r7, lr}
 800d1ce:	b086      	sub	sp, #24
 800d1d0:	af02      	add	r7, sp, #8
 800d1d2:	6078      	str	r0, [r7, #4]
    uint8_t  ret = BLE_STATUS_INVALID_PARAMS;
 800d1d4:	2392      	movs	r3, #146	@ 0x92
 800d1d6:	73fb      	strb	r3, [r7, #15]

	ret = aci_gatt_update_char_value(BleApplicationContext.BleApplicationContext_legacy.event_service_handle,
 800d1d8:	4b09      	ldr	r3, [pc, #36]	@ (800d200 <APP_BLE_Send_Event_Notification+0x34>)
 800d1da:	f8b3 0080 	ldrh.w	r0, [r3, #128]	@ 0x80
 800d1de:	4b08      	ldr	r3, [pc, #32]	@ (800d200 <APP_BLE_Send_Event_Notification+0x34>)
 800d1e0:	f8b3 108a 	ldrh.w	r1, [r3, #138]	@ 0x8a
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	9300      	str	r3, [sp, #0]
 800d1e8:	2303      	movs	r3, #3
 800d1ea:	2200      	movs	r2, #0
 800d1ec:	f7fd f8ea 	bl	800a3c4 <aci_gatt_update_char_value>
 800d1f0:	4603      	mov	r3, r0
 800d1f2:	73fb      	strb	r3, [r7, #15]
									BleApplicationContext.event_char_handle,
									0, /* offset */
									sizeof(event_packet_t), /* data length */
									(uint8_t*)payload);

    return ret;
 800d1f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1f6:	4618      	mov	r0, r3
 800d1f8:	3710      	adds	r7, #16
 800d1fa:	46bd      	mov	sp, r7
 800d1fc:	bd80      	pop	{r7, pc}
 800d1fe:	bf00      	nop
 800d200:	200004dc 	.word	0x200004dc

0800d204 <APP_BLE_Send_IMU_Notification>:



uint8_t  APP_BLE_Send_IMU_Notification(uint8_t* accel)
{
 800d204:	b580      	push	{r7, lr}
 800d206:	b086      	sub	sp, #24
 800d208:	af02      	add	r7, sp, #8
 800d20a:	6078      	str	r0, [r7, #4]
    uint8_t  ret = BLE_STATUS_INVALID_PARAMS;
 800d20c:	2392      	movs	r3, #146	@ 0x92
 800d20e:	73fb      	strb	r3, [r7, #15]

	ret = aci_gatt_update_char_value(BleApplicationContext.BleApplicationContext_legacy.motion_service_handle,
 800d210:	4b09      	ldr	r3, [pc, #36]	@ (800d238 <APP_BLE_Send_IMU_Notification+0x34>)
 800d212:	f8b3 0082 	ldrh.w	r0, [r3, #130]	@ 0x82
 800d216:	4b08      	ldr	r3, [pc, #32]	@ (800d238 <APP_BLE_Send_IMU_Notification+0x34>)
 800d218:	f8b3 108c 	ldrh.w	r1, [r3, #140]	@ 0x8c
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	9300      	str	r3, [sp, #0]
 800d220:	2312      	movs	r3, #18
 800d222:	2200      	movs	r2, #0
 800d224:	f7fd f8ce 	bl	800a3c4 <aci_gatt_update_char_value>
 800d228:	4603      	mov	r3, r0
 800d22a:	73fb      	strb	r3, [r7, #15]
									BleApplicationContext.gyro_char_handle,
									0,
									60,
									gyro);
    */
    return ret;
 800d22c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d22e:	4618      	mov	r0, r3
 800d230:	3710      	adds	r7, #16
 800d232:	46bd      	mov	sp, r7
 800d234:	bd80      	pop	{r7, pc}
 800d236:	bf00      	nop
 800d238:	200004dc 	.word	0x200004dc

0800d23c <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 800d23c:	b580      	push	{r7, lr}
 800d23e:	b082      	sub	sp, #8
 800d240:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800d242:	4b06      	ldr	r3, [pc, #24]	@ (800d25c <Ble_Tl_Init+0x20>)
 800d244:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800d246:	4b06      	ldr	r3, [pc, #24]	@ (800d260 <Ble_Tl_Init+0x24>)
 800d248:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800d24a:	463b      	mov	r3, r7
 800d24c:	4619      	mov	r1, r3
 800d24e:	4805      	ldr	r0, [pc, #20]	@ (800d264 <Ble_Tl_Init+0x28>)
 800d250:	f7fd fee4 	bl	800b01c <hci_init>

  return;
 800d254:	bf00      	nop
}
 800d256:	3708      	adds	r7, #8
 800d258:	46bd      	mov	sp, r7
 800d25a:	bd80      	pop	{r7, pc}
 800d25c:	200300d8 	.word	0x200300d8
 800d260:	0800d935 	.word	0x0800d935
 800d264:	0800d8fd 	.word	0x0800d8fd

0800d268 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 800d268:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d26a:	b08d      	sub	sp, #52	@ 0x34
 800d26c:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 800d26e:	2300      	movs	r3, #0
 800d270:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800d272:	2392      	movs	r3, #146	@ 0x92
 800d274:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init*/

  APP_DBG_MSG("==>> Start Ble_Hci_Gap_Gatt_Init function\n");
 800d276:	48a5      	ldr	r0, [pc, #660]	@ (800d50c <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800d278:	f001 fb9e 	bl	800e9b8 <puts>

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 800d27c:	f7fd fae0 	bl	800a840 <hci_reset>
 800d280:	4603      	mov	r3, r0
 800d282:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800d284:	7dfb      	ldrb	r3, [r7, #23]
 800d286:	2b00      	cmp	r3, #0
 800d288:	d005      	beq.n	800d296 <Ble_Hci_Gap_Gatt_Init+0x2e>
  {
    APP_DBG_MSG("  Fail   : hci_reset command, result: 0x%x \n", ret);
 800d28a:	7dfb      	ldrb	r3, [r7, #23]
 800d28c:	4619      	mov	r1, r3
 800d28e:	48a0      	ldr	r0, [pc, #640]	@ (800d510 <Ble_Hci_Gap_Gatt_Init+0x2a8>)
 800d290:	f001 fb22 	bl	800e8d8 <iprintf>
 800d294:	e002      	b.n	800d29c <Ble_Hci_Gap_Gatt_Init+0x34>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_reset command\n");
 800d296:	489f      	ldr	r0, [pc, #636]	@ (800d514 <Ble_Hci_Gap_Gatt_Init+0x2ac>)
 800d298:	f001 fb8e 	bl	800e9b8 <puts>
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 800d29c:	f000 fa32 	bl	800d704 <BleGetBdAddress>
 800d2a0:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 800d2a2:	693a      	ldr	r2, [r7, #16]
 800d2a4:	2106      	movs	r1, #6
 800d2a6:	2000      	movs	r0, #0
 800d2a8:	f7fd f98a 	bl	800a5c0 <aci_hal_write_config_data>
 800d2ac:	4603      	mov	r3, r0
 800d2ae:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800d2b0:	7dfb      	ldrb	r3, [r7, #23]
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d005      	beq.n	800d2c2 <Ble_Hci_Gap_Gatt_Init+0x5a>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET, result: 0x%x \n", ret);
 800d2b6:	7dfb      	ldrb	r3, [r7, #23]
 800d2b8:	4619      	mov	r1, r3
 800d2ba:	4897      	ldr	r0, [pc, #604]	@ (800d518 <Ble_Hci_Gap_Gatt_Init+0x2b0>)
 800d2bc:	f001 fb0c 	bl	800e8d8 <iprintf>
 800d2c0:	e021      	b.n	800d306 <Ble_Hci_Gap_Gatt_Init+0x9e>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET\n");
 800d2c2:	4896      	ldr	r0, [pc, #600]	@ (800d51c <Ble_Hci_Gap_Gatt_Init+0x2b4>)
 800d2c4:	f001 fb78 	bl	800e9b8 <puts>
    APP_DBG_MSG("  Public Bluetooth Address: %02x:%02x:%02x:%02x:%02x:%02x\n",p_bd_addr[5],p_bd_addr[4],p_bd_addr[3],p_bd_addr[2],p_bd_addr[1],p_bd_addr[0]);
 800d2c8:	693b      	ldr	r3, [r7, #16]
 800d2ca:	3305      	adds	r3, #5
 800d2cc:	781b      	ldrb	r3, [r3, #0]
 800d2ce:	4618      	mov	r0, r3
 800d2d0:	693b      	ldr	r3, [r7, #16]
 800d2d2:	3304      	adds	r3, #4
 800d2d4:	781b      	ldrb	r3, [r3, #0]
 800d2d6:	461c      	mov	r4, r3
 800d2d8:	693b      	ldr	r3, [r7, #16]
 800d2da:	3303      	adds	r3, #3
 800d2dc:	781b      	ldrb	r3, [r3, #0]
 800d2de:	461d      	mov	r5, r3
 800d2e0:	693b      	ldr	r3, [r7, #16]
 800d2e2:	3302      	adds	r3, #2
 800d2e4:	781b      	ldrb	r3, [r3, #0]
 800d2e6:	461a      	mov	r2, r3
 800d2e8:	693b      	ldr	r3, [r7, #16]
 800d2ea:	3301      	adds	r3, #1
 800d2ec:	781b      	ldrb	r3, [r3, #0]
 800d2ee:	4619      	mov	r1, r3
 800d2f0:	693b      	ldr	r3, [r7, #16]
 800d2f2:	781b      	ldrb	r3, [r3, #0]
 800d2f4:	9302      	str	r3, [sp, #8]
 800d2f6:	9101      	str	r1, [sp, #4]
 800d2f8:	9200      	str	r2, [sp, #0]
 800d2fa:	462b      	mov	r3, r5
 800d2fc:	4622      	mov	r2, r4
 800d2fe:	4601      	mov	r1, r0
 800d300:	4887      	ldr	r0, [pc, #540]	@ (800d520 <Ble_Hci_Gap_Gatt_Init+0x2b8>)
 800d302:	f001 fae9 	bl	800e8d8 <iprintf>
  }

#if (CFG_BLE_ADDRESS_TYPE == GAP_PUBLIC_ADDR)
  /* BLE MAC in ADV Packet */
  a_ManufData[ sizeof(a_ManufData)-6] = p_bd_addr[5];
 800d306:	693b      	ldr	r3, [r7, #16]
 800d308:	3305      	adds	r3, #5
 800d30a:	781a      	ldrb	r2, [r3, #0]
 800d30c:	4b85      	ldr	r3, [pc, #532]	@ (800d524 <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 800d30e:	721a      	strb	r2, [r3, #8]
  a_ManufData[ sizeof(a_ManufData)-5] = p_bd_addr[4];
 800d310:	693b      	ldr	r3, [r7, #16]
 800d312:	3304      	adds	r3, #4
 800d314:	781a      	ldrb	r2, [r3, #0]
 800d316:	4b83      	ldr	r3, [pc, #524]	@ (800d524 <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 800d318:	725a      	strb	r2, [r3, #9]
  a_ManufData[ sizeof(a_ManufData)-4] = p_bd_addr[3];
 800d31a:	693b      	ldr	r3, [r7, #16]
 800d31c:	3303      	adds	r3, #3
 800d31e:	781a      	ldrb	r2, [r3, #0]
 800d320:	4b80      	ldr	r3, [pc, #512]	@ (800d524 <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 800d322:	729a      	strb	r2, [r3, #10]
  a_ManufData[ sizeof(a_ManufData)-3] = p_bd_addr[2];
 800d324:	693b      	ldr	r3, [r7, #16]
 800d326:	3302      	adds	r3, #2
 800d328:	781a      	ldrb	r2, [r3, #0]
 800d32a:	4b7e      	ldr	r3, [pc, #504]	@ (800d524 <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 800d32c:	72da      	strb	r2, [r3, #11]
  a_ManufData[ sizeof(a_ManufData)-2] = p_bd_addr[1];
 800d32e:	693b      	ldr	r3, [r7, #16]
 800d330:	3301      	adds	r3, #1
 800d332:	781a      	ldrb	r2, [r3, #0]
 800d334:	4b7b      	ldr	r3, [pc, #492]	@ (800d524 <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 800d336:	731a      	strb	r2, [r3, #12]
  a_ManufData[ sizeof(a_ManufData)-1] = p_bd_addr[0];
 800d338:	693b      	ldr	r3, [r7, #16]
 800d33a:	781a      	ldrb	r2, [r3, #0]
 800d33c:	4b79      	ldr	r3, [pc, #484]	@ (800d524 <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 800d33e:	735a      	strb	r2, [r3, #13]
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive IRK and DHK(Legacy)
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 800d340:	4a79      	ldr	r2, [pc, #484]	@ (800d528 <Ble_Hci_Gap_Gatt_Init+0x2c0>)
 800d342:	2110      	movs	r1, #16
 800d344:	2018      	movs	r0, #24
 800d346:	f7fd f93b 	bl	800a5c0 <aci_hal_write_config_data>
 800d34a:	4603      	mov	r3, r0
 800d34c:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800d34e:	7dfb      	ldrb	r3, [r7, #23]
 800d350:	2b00      	cmp	r3, #0
 800d352:	d005      	beq.n	800d360 <Ble_Hci_Gap_Gatt_Init+0xf8>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET, result: 0x%x \n", ret);
 800d354:	7dfb      	ldrb	r3, [r7, #23]
 800d356:	4619      	mov	r1, r3
 800d358:	4874      	ldr	r0, [pc, #464]	@ (800d52c <Ble_Hci_Gap_Gatt_Init+0x2c4>)
 800d35a:	f001 fabd 	bl	800e8d8 <iprintf>
 800d35e:	e002      	b.n	800d366 <Ble_Hci_Gap_Gatt_Init+0xfe>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET\n");
 800d360:	4873      	ldr	r0, [pc, #460]	@ (800d530 <Ble_Hci_Gap_Gatt_Init+0x2c8>)
 800d362:	f001 fb29 	bl	800e9b8 <puts>
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 800d366:	4a73      	ldr	r2, [pc, #460]	@ (800d534 <Ble_Hci_Gap_Gatt_Init+0x2cc>)
 800d368:	2110      	movs	r1, #16
 800d36a:	2008      	movs	r0, #8
 800d36c:	f7fd f928 	bl	800a5c0 <aci_hal_write_config_data>
 800d370:	4603      	mov	r3, r0
 800d372:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800d374:	7dfb      	ldrb	r3, [r7, #23]
 800d376:	2b00      	cmp	r3, #0
 800d378:	d005      	beq.n	800d386 <Ble_Hci_Gap_Gatt_Init+0x11e>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET, result: 0x%x \n", ret);
 800d37a:	7dfb      	ldrb	r3, [r7, #23]
 800d37c:	4619      	mov	r1, r3
 800d37e:	486e      	ldr	r0, [pc, #440]	@ (800d538 <Ble_Hci_Gap_Gatt_Init+0x2d0>)
 800d380:	f001 faaa 	bl	800e8d8 <iprintf>
 800d384:	e002      	b.n	800d38c <Ble_Hci_Gap_Gatt_Init+0x124>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET\n");
 800d386:	486d      	ldr	r0, [pc, #436]	@ (800d53c <Ble_Hci_Gap_Gatt_Init+0x2d4>)
 800d388:	f001 fb16 	bl	800e9b8 <puts>
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 800d38c:	211f      	movs	r1, #31
 800d38e:	2001      	movs	r0, #1
 800d390:	f7fd f99b 	bl	800a6ca <aci_hal_set_tx_power_level>
 800d394:	4603      	mov	r3, r0
 800d396:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800d398:	7dfb      	ldrb	r3, [r7, #23]
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d005      	beq.n	800d3aa <Ble_Hci_Gap_Gatt_Init+0x142>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_tx_power_level command, result: 0x%x \n", ret);
 800d39e:	7dfb      	ldrb	r3, [r7, #23]
 800d3a0:	4619      	mov	r1, r3
 800d3a2:	4867      	ldr	r0, [pc, #412]	@ (800d540 <Ble_Hci_Gap_Gatt_Init+0x2d8>)
 800d3a4:	f001 fa98 	bl	800e8d8 <iprintf>
 800d3a8:	e002      	b.n	800d3b0 <Ble_Hci_Gap_Gatt_Init+0x148>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_tx_power_level command\n");
 800d3aa:	4866      	ldr	r0, [pc, #408]	@ (800d544 <Ble_Hci_Gap_Gatt_Init+0x2dc>)
 800d3ac:	f001 fb04 	bl	800e9b8 <puts>
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 800d3b0:	f7fc fe05 	bl	8009fbe <aci_gatt_init>
 800d3b4:	4603      	mov	r3, r0
 800d3b6:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800d3b8:	7dfb      	ldrb	r3, [r7, #23]
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d005      	beq.n	800d3ca <Ble_Hci_Gap_Gatt_Init+0x162>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_init command, result: 0x%x \n", ret);
 800d3be:	7dfb      	ldrb	r3, [r7, #23]
 800d3c0:	4619      	mov	r1, r3
 800d3c2:	4861      	ldr	r0, [pc, #388]	@ (800d548 <Ble_Hci_Gap_Gatt_Init+0x2e0>)
 800d3c4:	f001 fa88 	bl	800e8d8 <iprintf>
 800d3c8:	e002      	b.n	800d3d0 <Ble_Hci_Gap_Gatt_Init+0x168>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_init command\n");
 800d3ca:	4860      	ldr	r0, [pc, #384]	@ (800d54c <Ble_Hci_Gap_Gatt_Init+0x2e4>)
 800d3cc:	f001 faf4 	bl	800e9b8 <puts>
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 800d3d0:	2300      	movs	r3, #0
 800d3d2:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 800d3d4:	7bfb      	ldrb	r3, [r7, #15]
 800d3d6:	f043 0301 	orr.w	r3, r3, #1
 800d3da:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 800d3dc:	7bfb      	ldrb	r3, [r7, #15]
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d02b      	beq.n	800d43a <Ble_Hci_Gap_Gatt_Init+0x1d2>
  {
    const char *name = "Hermes V1";
 800d3e2:	4b5b      	ldr	r3, [pc, #364]	@ (800d550 <Ble_Hci_Gap_Gatt_Init+0x2e8>)
 800d3e4:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 800d3e6:	1dba      	adds	r2, r7, #6
 800d3e8:	7bf8      	ldrb	r0, [r7, #15]
 800d3ea:	1cbb      	adds	r3, r7, #2
 800d3ec:	9301      	str	r3, [sp, #4]
 800d3ee:	1d3b      	adds	r3, r7, #4
 800d3f0:	9300      	str	r3, [sp, #0]
 800d3f2:	4613      	mov	r3, r2
 800d3f4:	2207      	movs	r2, #7
 800d3f6:	2100      	movs	r1, #0
 800d3f8:	f7fc fbe3 	bl	8009bc2 <aci_gap_init>
 800d3fc:	4603      	mov	r3, r0
 800d3fe:	75fb      	strb	r3, [r7, #23]
                       APPBLE_GAP_DEVICE_NAME_LENGTH,
                       &gap_service_handle,
                       &gap_dev_name_char_handle,
                       &gap_appearance_char_handle);

    if (ret != BLE_STATUS_SUCCESS)
 800d400:	7dfb      	ldrb	r3, [r7, #23]
 800d402:	2b00      	cmp	r3, #0
 800d404:	d005      	beq.n	800d412 <Ble_Hci_Gap_Gatt_Init+0x1aa>
    {
      APP_DBG_MSG("  Fail   : aci_gap_init command, result: 0x%x \n", ret);
 800d406:	7dfb      	ldrb	r3, [r7, #23]
 800d408:	4619      	mov	r1, r3
 800d40a:	4852      	ldr	r0, [pc, #328]	@ (800d554 <Ble_Hci_Gap_Gatt_Init+0x2ec>)
 800d40c:	f001 fa64 	bl	800e8d8 <iprintf>
 800d410:	e002      	b.n	800d418 <Ble_Hci_Gap_Gatt_Init+0x1b0>
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
 800d412:	4851      	ldr	r0, [pc, #324]	@ (800d558 <Ble_Hci_Gap_Gatt_Init+0x2f0>)
 800d414:	f001 fad0 	bl	800e9b8 <puts>
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 800d418:	88fc      	ldrh	r4, [r7, #6]
 800d41a:	88bd      	ldrh	r5, [r7, #4]
 800d41c:	68b8      	ldr	r0, [r7, #8]
 800d41e:	f7f2 feaf 	bl	8000180 <strlen>
 800d422:	4603      	mov	r3, r0
 800d424:	b2da      	uxtb	r2, r3
 800d426:	68bb      	ldr	r3, [r7, #8]
 800d428:	9300      	str	r3, [sp, #0]
 800d42a:	4613      	mov	r3, r2
 800d42c:	2200      	movs	r2, #0
 800d42e:	4629      	mov	r1, r5
 800d430:	4620      	mov	r0, r4
 800d432:	f7fc ffc7 	bl	800a3c4 <aci_gatt_update_char_value>
 800d436:	4603      	mov	r3, r0
 800d438:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 800d43a:	88f8      	ldrh	r0, [r7, #6]
 800d43c:	8879      	ldrh	r1, [r7, #2]
 800d43e:	463b      	mov	r3, r7
 800d440:	9300      	str	r3, [sp, #0]
 800d442:	2302      	movs	r3, #2
 800d444:	2200      	movs	r2, #0
 800d446:	f7fc ffbd 	bl	800a3c4 <aci_gatt_update_char_value>
 800d44a:	4603      	mov	r3, r0
 800d44c:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 800d44e:	2202      	movs	r2, #2
 800d450:	2102      	movs	r1, #2
 800d452:	2000      	movs	r0, #0
 800d454:	f7fd fa96 	bl	800a984 <hci_le_set_default_phy>
 800d458:	4603      	mov	r3, r0
 800d45a:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800d45c:	7dfb      	ldrb	r3, [r7, #23]
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d005      	beq.n	800d46e <Ble_Hci_Gap_Gatt_Init+0x206>
  {
    APP_DBG_MSG("  Fail   : hci_le_set_default_phy command, result: 0x%x \n", ret);
 800d462:	7dfb      	ldrb	r3, [r7, #23]
 800d464:	4619      	mov	r1, r3
 800d466:	483d      	ldr	r0, [pc, #244]	@ (800d55c <Ble_Hci_Gap_Gatt_Init+0x2f4>)
 800d468:	f001 fa36 	bl	800e8d8 <iprintf>
 800d46c:	e002      	b.n	800d474 <Ble_Hci_Gap_Gatt_Init+0x20c>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_le_set_default_phy command\n");
 800d46e:	483c      	ldr	r0, [pc, #240]	@ (800d560 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 800d470:	f001 faa2 	bl	800e9b8 <puts>
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 800d474:	4b3b      	ldr	r3, [pc, #236]	@ (800d564 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800d476:	2201      	movs	r2, #1
 800d478:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 800d47a:	4b3a      	ldr	r3, [pc, #232]	@ (800d564 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800d47c:	781b      	ldrb	r3, [r3, #0]
 800d47e:	4618      	mov	r0, r3
 800d480:	f7fc fa20 	bl	80098c4 <aci_gap_set_io_capability>
 800d484:	4603      	mov	r3, r0
 800d486:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800d488:	7dfb      	ldrb	r3, [r7, #23]
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d005      	beq.n	800d49a <Ble_Hci_Gap_Gatt_Init+0x232>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_io_capability command, result: 0x%x \n", ret);
 800d48e:	7dfb      	ldrb	r3, [r7, #23]
 800d490:	4619      	mov	r1, r3
 800d492:	4835      	ldr	r0, [pc, #212]	@ (800d568 <Ble_Hci_Gap_Gatt_Init+0x300>)
 800d494:	f001 fa20 	bl	800e8d8 <iprintf>
 800d498:	e002      	b.n	800d4a0 <Ble_Hci_Gap_Gatt_Init+0x238>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_io_capability command\n");
 800d49a:	4834      	ldr	r0, [pc, #208]	@ (800d56c <Ble_Hci_Gap_Gatt_Init+0x304>)
 800d49c:	f001 fa8c 	bl	800e9b8 <puts>
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 800d4a0:	4b30      	ldr	r3, [pc, #192]	@ (800d564 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800d4a2:	2201      	movs	r2, #1
 800d4a4:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 800d4a6:	4b2f      	ldr	r3, [pc, #188]	@ (800d564 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800d4a8:	2208      	movs	r2, #8
 800d4aa:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 800d4ac:	4b2d      	ldr	r3, [pc, #180]	@ (800d564 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800d4ae:	2210      	movs	r2, #16
 800d4b0:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 800d4b2:	4b2c      	ldr	r3, [pc, #176]	@ (800d564 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800d4b4:	2200      	movs	r2, #0
 800d4b6:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 800d4b8:	4b2a      	ldr	r3, [pc, #168]	@ (800d564 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800d4ba:	4a2d      	ldr	r2, [pc, #180]	@ (800d570 <Ble_Hci_Gap_Gatt_Init+0x308>)
 800d4bc:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 800d4be:	4b29      	ldr	r3, [pc, #164]	@ (800d564 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800d4c0:	2201      	movs	r2, #1
 800d4c2:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 800d4c4:	4b27      	ldr	r3, [pc, #156]	@ (800d564 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800d4c6:	789c      	ldrb	r4, [r3, #2]
 800d4c8:	4b26      	ldr	r3, [pc, #152]	@ (800d564 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800d4ca:	785d      	ldrb	r5, [r3, #1]
 800d4cc:	4b25      	ldr	r3, [pc, #148]	@ (800d564 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800d4ce:	791b      	ldrb	r3, [r3, #4]
 800d4d0:	4a24      	ldr	r2, [pc, #144]	@ (800d564 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800d4d2:	7952      	ldrb	r2, [r2, #5]
 800d4d4:	4923      	ldr	r1, [pc, #140]	@ (800d564 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800d4d6:	78c9      	ldrb	r1, [r1, #3]
 800d4d8:	4822      	ldr	r0, [pc, #136]	@ (800d564 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800d4da:	6880      	ldr	r0, [r0, #8]
 800d4dc:	2600      	movs	r6, #0
 800d4de:	9604      	str	r6, [sp, #16]
 800d4e0:	9003      	str	r0, [sp, #12]
 800d4e2:	9102      	str	r1, [sp, #8]
 800d4e4:	9201      	str	r2, [sp, #4]
 800d4e6:	9300      	str	r3, [sp, #0]
 800d4e8:	2300      	movs	r3, #0
 800d4ea:	2201      	movs	r2, #1
 800d4ec:	4629      	mov	r1, r5
 800d4ee:	4620      	mov	r0, r4
 800d4f0:	f7fc fa3c 	bl	800996c <aci_gap_set_authentication_requirement>
 800d4f4:	4603      	mov	r3, r0
 800d4f6:	75fb      	strb	r3, [r7, #23]
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin,
                                               CFG_IDENTITY_ADDRESS);
  if (ret != BLE_STATUS_SUCCESS)
 800d4f8:	7dfb      	ldrb	r3, [r7, #23]
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d03c      	beq.n	800d578 <Ble_Hci_Gap_Gatt_Init+0x310>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_authentication_requirement command, result: 0x%x \n", ret);
 800d4fe:	7dfb      	ldrb	r3, [r7, #23]
 800d500:	4619      	mov	r1, r3
 800d502:	481c      	ldr	r0, [pc, #112]	@ (800d574 <Ble_Hci_Gap_Gatt_Init+0x30c>)
 800d504:	f001 f9e8 	bl	800e8d8 <iprintf>
 800d508:	e039      	b.n	800d57e <Ble_Hci_Gap_Gatt_Init+0x316>
 800d50a:	bf00      	nop
 800d50c:	080106b8 	.word	0x080106b8
 800d510:	080106e4 	.word	0x080106e4
 800d514:	08010714 	.word	0x08010714
 800d518:	08010734 	.word	0x08010734
 800d51c:	08010790 	.word	0x08010790
 800d520:	080107dc 	.word	0x080107dc
 800d524:	20000014 	.word	0x20000014
 800d528:	0801113c 	.word	0x0801113c
 800d52c:	08010818 	.word	0x08010818
 800d530:	08010870 	.word	0x08010870
 800d534:	0801114c 	.word	0x0801114c
 800d538:	080108b8 	.word	0x080108b8
 800d53c:	08010910 	.word	0x08010910
 800d540:	08010958 	.word	0x08010958
 800d544:	08010998 	.word	0x08010998
 800d548:	080109c8 	.word	0x080109c8
 800d54c:	080109fc 	.word	0x080109fc
 800d550:	08010a20 	.word	0x08010a20
 800d554:	08010a2c 	.word	0x08010a2c
 800d558:	08010a5c 	.word	0x08010a5c
 800d55c:	08010a7c 	.word	0x08010a7c
 800d560:	08010ab8 	.word	0x08010ab8
 800d564:	200004dc 	.word	0x200004dc
 800d568:	08010ae4 	.word	0x08010ae4
 800d56c:	08010b24 	.word	0x08010b24
 800d570:	0001b207 	.word	0x0001b207
 800d574:	08010b54 	.word	0x08010b54
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_authentication_requirement command\n");
 800d578:	480e      	ldr	r0, [pc, #56]	@ (800d5b4 <Ble_Hci_Gap_Gatt_Init+0x34c>)
 800d57a:	f001 fa1d 	bl	800e9b8 <puts>
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 800d57e:	4b0e      	ldr	r3, [pc, #56]	@ (800d5b8 <Ble_Hci_Gap_Gatt_Init+0x350>)
 800d580:	789b      	ldrb	r3, [r3, #2]
 800d582:	2b00      	cmp	r3, #0
 800d584:	d00f      	beq.n	800d5a6 <Ble_Hci_Gap_Gatt_Init+0x33e>
  {
    ret = aci_gap_configure_whitelist();
 800d586:	f7fc fc3b 	bl	8009e00 <aci_gap_configure_filter_accept_list>
 800d58a:	4603      	mov	r3, r0
 800d58c:	75fb      	strb	r3, [r7, #23]
    if (ret != BLE_STATUS_SUCCESS)
 800d58e:	7dfb      	ldrb	r3, [r7, #23]
 800d590:	2b00      	cmp	r3, #0
 800d592:	d005      	beq.n	800d5a0 <Ble_Hci_Gap_Gatt_Init+0x338>
    {
      APP_DBG_MSG("  Fail   : aci_gap_configure_whitelist command, result: 0x%x \n", ret);
 800d594:	7dfb      	ldrb	r3, [r7, #23]
 800d596:	4619      	mov	r1, r3
 800d598:	4808      	ldr	r0, [pc, #32]	@ (800d5bc <Ble_Hci_Gap_Gatt_Init+0x354>)
 800d59a:	f001 f99d 	bl	800e8d8 <iprintf>
 800d59e:	e002      	b.n	800d5a6 <Ble_Hci_Gap_Gatt_Init+0x33e>
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
 800d5a0:	4807      	ldr	r0, [pc, #28]	@ (800d5c0 <Ble_Hci_Gap_Gatt_Init+0x358>)
 800d5a2:	f001 fa09 	bl	800e9b8 <puts>
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
 800d5a6:	4807      	ldr	r0, [pc, #28]	@ (800d5c4 <Ble_Hci_Gap_Gatt_Init+0x35c>)
 800d5a8:	f001 f996 	bl	800e8d8 <iprintf>
}
 800d5ac:	bf00      	nop
 800d5ae:	371c      	adds	r7, #28
 800d5b0:	46bd      	mov	sp, r7
 800d5b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d5b4:	08010ba0 	.word	0x08010ba0
 800d5b8:	200004dc 	.word	0x200004dc
 800d5bc:	08010bdc 	.word	0x08010bdc
 800d5c0:	08010c1c 	.word	0x08010c1c
 800d5c4:	08010c4c 	.word	0x08010c4c

0800d5c8 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 800d5c8:	b580      	push	{r7, lr}
 800d5ca:	b08c      	sub	sp, #48	@ 0x30
 800d5cc:	af08      	add	r7, sp, #32
 800d5ce:	4603      	mov	r3, r0
 800d5d0:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800d5d2:	2392      	movs	r3, #146	@ 0x92
 800d5d4:	72fb      	strb	r3, [r7, #11]
  uint16_t Min_Inter, Max_Inter;

  if (NewStatus == APP_BLE_FAST_ADV)
 800d5d6:	79fb      	ldrb	r3, [r7, #7]
 800d5d8:	2b01      	cmp	r3, #1
 800d5da:	d106      	bne.n	800d5ea <Adv_Request+0x22>
  {
    Min_Inter = AdvIntervalMin;
 800d5dc:	4b3b      	ldr	r3, [pc, #236]	@ (800d6cc <Adv_Request+0x104>)
 800d5de:	881b      	ldrh	r3, [r3, #0]
 800d5e0:	81fb      	strh	r3, [r7, #14]
    Max_Inter = AdvIntervalMax;
 800d5e2:	4b3b      	ldr	r3, [pc, #236]	@ (800d6d0 <Adv_Request+0x108>)
 800d5e4:	881b      	ldrh	r3, [r3, #0]
 800d5e6:	81bb      	strh	r3, [r7, #12]
 800d5e8:	e005      	b.n	800d5f6 <Adv_Request+0x2e>
  }
  else
  {
    Min_Inter = CFG_LP_CONN_ADV_INTERVAL_MIN;
 800d5ea:	f44f 63c8 	mov.w	r3, #1600	@ 0x640
 800d5ee:	81fb      	strh	r3, [r7, #14]
    Max_Inter = CFG_LP_CONN_ADV_INTERVAL_MAX;
 800d5f0:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 800d5f4:	81bb      	strh	r3, [r7, #12]
   * Stop the timer, it will be restarted for a new shot
   * It does not hurt if the timer was not running
   */
  //HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);

  if ((NewStatus == APP_BLE_LP_ADV)
 800d5f6:	79fb      	ldrb	r3, [r7, #7]
 800d5f8:	2b02      	cmp	r3, #2
 800d5fa:	d119      	bne.n	800d630 <Adv_Request+0x68>
      && ((BleApplicationContext.Device_Connection_Status == APP_BLE_FAST_ADV)
 800d5fc:	4b35      	ldr	r3, [pc, #212]	@ (800d6d4 <Adv_Request+0x10c>)
 800d5fe:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d602:	2b01      	cmp	r3, #1
 800d604:	d004      	beq.n	800d610 <Adv_Request+0x48>
          || (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_ADV)))
 800d606:	4b33      	ldr	r3, [pc, #204]	@ (800d6d4 <Adv_Request+0x10c>)
 800d608:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d60c:	2b02      	cmp	r3, #2
 800d60e:	d10f      	bne.n	800d630 <Adv_Request+0x68>
  {
    /* Connection in ADVERTISE mode have to stop the current advertising */
    ret = aci_gap_set_non_discoverable();
 800d610:	f7fc f83a 	bl	8009688 <aci_gap_set_non_discoverable>
 800d614:	4603      	mov	r3, r0
 800d616:	72fb      	strb	r3, [r7, #11]
    if (ret != BLE_STATUS_SUCCESS)
 800d618:	7afb      	ldrb	r3, [r7, #11]
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	d005      	beq.n	800d62a <Adv_Request+0x62>
    {
      APP_DBG_MSG("==>> aci_gap_set_non_discoverable - Stop Advertising Failed , result: %d \n", ret);
 800d61e:	7afb      	ldrb	r3, [r7, #11]
 800d620:	4619      	mov	r1, r3
 800d622:	482d      	ldr	r0, [pc, #180]	@ (800d6d8 <Adv_Request+0x110>)
 800d624:	f001 f958 	bl	800e8d8 <iprintf>
 800d628:	e002      	b.n	800d630 <Adv_Request+0x68>
    }
    else
    {
      APP_DBG_MSG("==>> aci_gap_set_non_discoverable - Successfully Stopped Advertising \n");
 800d62a:	482c      	ldr	r0, [pc, #176]	@ (800d6dc <Adv_Request+0x114>)
 800d62c:	f001 f9c4 	bl	800e9b8 <puts>
    }
  }

  BleApplicationContext.Device_Connection_Status = NewStatus;
 800d630:	4a28      	ldr	r2, [pc, #160]	@ (800d6d4 <Adv_Request+0x10c>)
 800d632:	79fb      	ldrb	r3, [r7, #7]
 800d634:	f882 3084 	strb.w	r3, [r2, #132]	@ 0x84
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_IND,
 800d638:	4b26      	ldr	r3, [pc, #152]	@ (800d6d4 <Adv_Request+0x10c>)
 800d63a:	7e1b      	ldrb	r3, [r3, #24]
 800d63c:	89ba      	ldrh	r2, [r7, #12]
 800d63e:	89f9      	ldrh	r1, [r7, #14]
 800d640:	2000      	movs	r0, #0
 800d642:	9006      	str	r0, [sp, #24]
 800d644:	2000      	movs	r0, #0
 800d646:	9005      	str	r0, [sp, #20]
 800d648:	4825      	ldr	r0, [pc, #148]	@ (800d6e0 <Adv_Request+0x118>)
 800d64a:	9004      	str	r0, [sp, #16]
 800d64c:	9303      	str	r3, [sp, #12]
 800d64e:	4b25      	ldr	r3, [pc, #148]	@ (800d6e4 <Adv_Request+0x11c>)
 800d650:	9302      	str	r3, [sp, #8]
 800d652:	230a      	movs	r3, #10
 800d654:	9301      	str	r3, [sp, #4]
 800d656:	2300      	movs	r3, #0
 800d658:	9300      	str	r3, [sp, #0]
 800d65a:	2300      	movs	r3, #0
 800d65c:	2000      	movs	r0, #0
 800d65e:	f7fc f837 	bl	80096d0 <aci_gap_set_discoverable>
 800d662:	4603      	mov	r3, r0
 800d664:	72fb      	strb	r3, [r7, #11]
                                 (uint8_t*) &a_LocalName,
                                 BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen,
                                 BleApplicationContext.BleApplicationContext_legacy.advtServUUID,
                                 0,
                                 0);
  if (ret != BLE_STATUS_SUCCESS)
 800d666:	7afb      	ldrb	r3, [r7, #11]
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d005      	beq.n	800d678 <Adv_Request+0xb0>
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - fail, result: 0x%x \n", ret);
 800d66c:	7afb      	ldrb	r3, [r7, #11]
 800d66e:	4619      	mov	r1, r3
 800d670:	481d      	ldr	r0, [pc, #116]	@ (800d6e8 <Adv_Request+0x120>)
 800d672:	f001 f931 	bl	800e8d8 <iprintf>
 800d676:	e002      	b.n	800d67e <Adv_Request+0xb6>
  }
  else
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - Success\n");
 800d678:	481c      	ldr	r0, [pc, #112]	@ (800d6ec <Adv_Request+0x124>)
 800d67a:	f001 f99d 	bl	800e9b8 <puts>
  }

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_ManufData), (uint8_t*) a_ManufData);
 800d67e:	491c      	ldr	r1, [pc, #112]	@ (800d6f0 <Adv_Request+0x128>)
 800d680:	200e      	movs	r0, #14
 800d682:	f7fc fb4b 	bl	8009d1c <aci_gap_update_adv_data>
 800d686:	4603      	mov	r3, r0
 800d688:	72fb      	strb	r3, [r7, #11]
  if (ret != BLE_STATUS_SUCCESS)
 800d68a:	7afb      	ldrb	r3, [r7, #11]
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d00e      	beq.n	800d6ae <Adv_Request+0xe6>
  {
    if (NewStatus == APP_BLE_FAST_ADV)
 800d690:	79fb      	ldrb	r3, [r7, #7]
 800d692:	2b01      	cmp	r3, #1
 800d694:	d105      	bne.n	800d6a2 <Adv_Request+0xda>
    {
      APP_DBG_MSG("==>> Start Fast Advertising Failed , result: %d \n\r", ret);
 800d696:	7afb      	ldrb	r3, [r7, #11]
 800d698:	4619      	mov	r1, r3
 800d69a:	4816      	ldr	r0, [pc, #88]	@ (800d6f4 <Adv_Request+0x12c>)
 800d69c:	f001 f91c 	bl	800e8d8 <iprintf>
    {
      APP_DBG_MSG("==>> Success: Start Low Power Advertising \n\r");
    }
  }

  return;
 800d6a0:	e010      	b.n	800d6c4 <Adv_Request+0xfc>
      APP_DBG_MSG("==>> Start Low Power Advertising Failed , result: %d \n\r", ret);
 800d6a2:	7afb      	ldrb	r3, [r7, #11]
 800d6a4:	4619      	mov	r1, r3
 800d6a6:	4814      	ldr	r0, [pc, #80]	@ (800d6f8 <Adv_Request+0x130>)
 800d6a8:	f001 f916 	bl	800e8d8 <iprintf>
  return;
 800d6ac:	e00a      	b.n	800d6c4 <Adv_Request+0xfc>
    if (NewStatus == APP_BLE_FAST_ADV)
 800d6ae:	79fb      	ldrb	r3, [r7, #7]
 800d6b0:	2b01      	cmp	r3, #1
 800d6b2:	d103      	bne.n	800d6bc <Adv_Request+0xf4>
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
 800d6b4:	4811      	ldr	r0, [pc, #68]	@ (800d6fc <Adv_Request+0x134>)
 800d6b6:	f001 f90f 	bl	800e8d8 <iprintf>
  return;
 800d6ba:	e003      	b.n	800d6c4 <Adv_Request+0xfc>
      APP_DBG_MSG("==>> Success: Start Low Power Advertising \n\r");
 800d6bc:	4810      	ldr	r0, [pc, #64]	@ (800d700 <Adv_Request+0x138>)
 800d6be:	f001 f90b 	bl	800e8d8 <iprintf>
  return;
 800d6c2:	bf00      	nop
}
 800d6c4:	3710      	adds	r7, #16
 800d6c6:	46bd      	mov	sp, r7
 800d6c8:	bd80      	pop	{r7, pc}
 800d6ca:	bf00      	nop
 800d6cc:	20000570 	.word	0x20000570
 800d6d0:	20000572 	.word	0x20000572
 800d6d4:	200004dc 	.word	0x200004dc
 800d6d8:	08010c78 	.word	0x08010c78
 800d6dc:	08010cc4 	.word	0x08010cc4
 800d6e0:	200004f5 	.word	0x200004f5
 800d6e4:	0801115c 	.word	0x0801115c
 800d6e8:	08010d0c 	.word	0x08010d0c
 800d6ec:	08010d44 	.word	0x08010d44
 800d6f0:	20000014 	.word	0x20000014
 800d6f4:	08010d6c 	.word	0x08010d6c
 800d6f8:	08010da0 	.word	0x08010da0
 800d6fc:	08010dd8 	.word	0x08010dd8
 800d700:	08010e00 	.word	0x08010e00

0800d704 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 800d704:	b580      	push	{r7, lr}
 800d706:	b086      	sub	sp, #24
 800d708:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 800d70a:	f7fe fef3 	bl	800c4f4 <LL_FLASH_GetUDN>
 800d70e:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 800d710:	693b      	ldr	r3, [r7, #16]
 800d712:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d716:	d023      	beq.n	800d760 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 800d718:	f7fe ff04 	bl	800c524 <LL_FLASH_GetSTCompanyID>
 800d71c:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 800d71e:	f7fe fef5 	bl	800c50c <LL_FLASH_GetDeviceID>
 800d722:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 800d724:	693b      	ldr	r3, [r7, #16]
 800d726:	b2da      	uxtb	r2, r3
 800d728:	4b16      	ldr	r3, [pc, #88]	@ (800d784 <BleGetBdAddress+0x80>)
 800d72a:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 800d72c:	693b      	ldr	r3, [r7, #16]
 800d72e:	0a1b      	lsrs	r3, r3, #8
 800d730:	b2da      	uxtb	r2, r3
 800d732:	4b14      	ldr	r3, [pc, #80]	@ (800d784 <BleGetBdAddress+0x80>)
 800d734:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	b2da      	uxtb	r2, r3
 800d73a:	4b12      	ldr	r3, [pc, #72]	@ (800d784 <BleGetBdAddress+0x80>)
 800d73c:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 800d73e:	68bb      	ldr	r3, [r7, #8]
 800d740:	b2da      	uxtb	r2, r3
 800d742:	4b10      	ldr	r3, [pc, #64]	@ (800d784 <BleGetBdAddress+0x80>)
 800d744:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 800d746:	68bb      	ldr	r3, [r7, #8]
 800d748:	0a1b      	lsrs	r3, r3, #8
 800d74a:	b2da      	uxtb	r2, r3
 800d74c:	4b0d      	ldr	r3, [pc, #52]	@ (800d784 <BleGetBdAddress+0x80>)
 800d74e:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 800d750:	68bb      	ldr	r3, [r7, #8]
 800d752:	0c1b      	lsrs	r3, r3, #16
 800d754:	b2da      	uxtb	r2, r3
 800d756:	4b0b      	ldr	r3, [pc, #44]	@ (800d784 <BleGetBdAddress+0x80>)
 800d758:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 800d75a:	4b0a      	ldr	r3, [pc, #40]	@ (800d784 <BleGetBdAddress+0x80>)
 800d75c:	617b      	str	r3, [r7, #20]
 800d75e:	e00b      	b.n	800d778 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 800d760:	2000      	movs	r0, #0
 800d762:	f7fe fa17 	bl	800bb94 <OTP_Read>
 800d766:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d002      	beq.n	800d774 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	617b      	str	r3, [r7, #20]
 800d772:	e001      	b.n	800d778 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 800d774:	4b04      	ldr	r3, [pc, #16]	@ (800d788 <BleGetBdAddress+0x84>)
 800d776:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 800d778:	697b      	ldr	r3, [r7, #20]
}
 800d77a:	4618      	mov	r0, r3
 800d77c:	3718      	adds	r7, #24
 800d77e:	46bd      	mov	sp, r7
 800d780:	bd80      	pop	{r7, pc}
 800d782:	bf00      	nop
 800d784:	200004d4 	.word	0x200004d4
 800d788:	08011134 	.word	0x08011134

0800d78c <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR P2P SERVER
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 800d78c:	b580      	push	{r7, lr}
 800d78e:	b082      	sub	sp, #8
 800d790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 800d792:	4b10      	ldr	r3, [pc, #64]	@ (800d7d4 <Adv_Cancel+0x48>)
 800d794:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d798:	2b05      	cmp	r3, #5
 800d79a:	d017      	beq.n	800d7cc <Adv_Cancel+0x40>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800d79c:	2392      	movs	r3, #146	@ 0x92
 800d79e:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 800d7a0:	f7fb ff72 	bl	8009688 <aci_gap_set_non_discoverable>
 800d7a4:	4603      	mov	r3, r0
 800d7a6:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800d7a8:	4b0a      	ldr	r3, [pc, #40]	@ (800d7d4 <Adv_Cancel+0x48>)
 800d7aa:	2200      	movs	r2, #0
 800d7ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
    if (ret != BLE_STATUS_SUCCESS)
 800d7b0:	79fb      	ldrb	r3, [r7, #7]
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d003      	beq.n	800d7be <Adv_Cancel+0x32>
    {
      APP_DBG_MSG("** STOP ADVERTISING **  Failed \r\n\r");
 800d7b6:	4808      	ldr	r0, [pc, #32]	@ (800d7d8 <Adv_Cancel+0x4c>)
 800d7b8:	f001 f88e 	bl	800e8d8 <iprintf>

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 800d7bc:	e006      	b.n	800d7cc <Adv_Cancel+0x40>
      APP_DBG_MSG("  \r\n\r");
 800d7be:	4807      	ldr	r0, [pc, #28]	@ (800d7dc <Adv_Cancel+0x50>)
 800d7c0:	f001 f88a 	bl	800e8d8 <iprintf>
      APP_DBG_MSG("** STOP ADVERTISING **  \r\n\r");
 800d7c4:	4806      	ldr	r0, [pc, #24]	@ (800d7e0 <Adv_Cancel+0x54>)
 800d7c6:	f001 f887 	bl	800e8d8 <iprintf>
  return;
 800d7ca:	bf00      	nop
 800d7cc:	bf00      	nop
}
 800d7ce:	3708      	adds	r7, #8
 800d7d0:	46bd      	mov	sp, r7
 800d7d2:	bd80      	pop	{r7, pc}
 800d7d4:	200004dc 	.word	0x200004dc
 800d7d8:	08010e30 	.word	0x08010e30
 800d7dc:	08010e54 	.word	0x08010e54
 800d7e0:	08010e5c 	.word	0x08010e5c

0800d7e4 <Switch_OFF_GPIO>:

  return;
}

static void Switch_OFF_GPIO()
{
 800d7e4:	b480      	push	{r7}
 800d7e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Switch_OFF_GPIO */

  /* USER CODE END Switch_OFF_GPIO */
}
 800d7e8:	bf00      	nop
 800d7ea:	46bd      	mov	sp, r7
 800d7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7f0:	4770      	bx	lr
	...

0800d7f4 <BLE_SVC_L2CAP_Conn_Update>:

#if (L2CAP_REQUEST_NEW_CONN_PARAM != 0)
void BLE_SVC_L2CAP_Conn_Update(uint16_t ConnectionHandle)
{
 800d7f4:	b590      	push	{r4, r7, lr}
 800d7f6:	b089      	sub	sp, #36	@ 0x24
 800d7f8:	af02      	add	r7, sp, #8
 800d7fa:	4603      	mov	r3, r0
 800d7fc:	80fb      	strh	r3, [r7, #6]
  /* USER CODE BEGIN BLE_SVC_L2CAP_Conn_Update_1 */

  /* USER CODE END BLE_SVC_L2CAP_Conn_Update_1 */

  if (mutex == 1)
 800d7fe:	4b1d      	ldr	r3, [pc, #116]	@ (800d874 <BLE_SVC_L2CAP_Conn_Update+0x80>)
 800d800:	781b      	ldrb	r3, [r3, #0]
 800d802:	2b01      	cmp	r3, #1
 800d804:	d132      	bne.n	800d86c <BLE_SVC_L2CAP_Conn_Update+0x78>
  {
    mutex = 0;
 800d806:	4b1b      	ldr	r3, [pc, #108]	@ (800d874 <BLE_SVC_L2CAP_Conn_Update+0x80>)
 800d808:	2200      	movs	r2, #0
 800d80a:	701a      	strb	r2, [r3, #0]
    index_con_int = (index_con_int + 1)%SIZE_TAB_CONN_INT;
 800d80c:	4b1a      	ldr	r3, [pc, #104]	@ (800d878 <BLE_SVC_L2CAP_Conn_Update+0x84>)
 800d80e:	781b      	ldrb	r3, [r3, #0]
 800d810:	3301      	adds	r3, #1
 800d812:	2b00      	cmp	r3, #0
 800d814:	f003 0301 	and.w	r3, r3, #1
 800d818:	bfb8      	it	lt
 800d81a:	425b      	neglt	r3, r3
 800d81c:	b2da      	uxtb	r2, r3
 800d81e:	4b16      	ldr	r3, [pc, #88]	@ (800d878 <BLE_SVC_L2CAP_Conn_Update+0x84>)
 800d820:	701a      	strb	r2, [r3, #0]
    //uint16_t interval_min = CONN_P(a_ConnInterval[index_con_int]);
    //uint16_t interval_max = CONN_P(a_ConnInterval[index_con_int]);
    //uint16_t interval_min = CONN_P(15); //2025-07-02
    //uint16_t interval_max = CONN_P(25); //2025-07-02
    uint16_t interval_min = CONN_P(24);
 800d822:	2313      	movs	r3, #19
 800d824:	82fb      	strh	r3, [r7, #22]
    uint16_t interval_max = CONN_P(45);
 800d826:	2324      	movs	r3, #36	@ 0x24
 800d828:	82bb      	strh	r3, [r7, #20]
    uint16_t peripheral_latency = L2CAP_PERIPHERAL_LATENCY;
 800d82a:	2300      	movs	r3, #0
 800d82c:	827b      	strh	r3, [r7, #18]
    uint16_t timeout_multiplier = L2CAP_TIMEOUT_MULTIPLIER;
 800d82e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800d832:	823b      	strh	r3, [r7, #16]
    tBleStatus ret;

    ret = aci_l2cap_connection_parameter_update_req(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,
 800d834:	4b11      	ldr	r3, [pc, #68]	@ (800d87c <BLE_SVC_L2CAP_Conn_Update+0x88>)
 800d836:	8ad8      	ldrh	r0, [r3, #22]
 800d838:	8a7c      	ldrh	r4, [r7, #18]
 800d83a:	8aba      	ldrh	r2, [r7, #20]
 800d83c:	8af9      	ldrh	r1, [r7, #22]
 800d83e:	8a3b      	ldrh	r3, [r7, #16]
 800d840:	9300      	str	r3, [sp, #0]
 800d842:	4623      	mov	r3, r4
 800d844:	f7fd f91b 	bl	800aa7e <aci_l2cap_connection_parameter_update_req>
 800d848:	4603      	mov	r3, r0
 800d84a:	73fb      	strb	r3, [r7, #15]
                                                    interval_min, interval_max,
                                                    peripheral_latency, timeout_multiplier);
    if (ret != BLE_STATUS_SUCCESS)
 800d84c:	7bfb      	ldrb	r3, [r7, #15]
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d008      	beq.n	800d864 <BLE_SVC_L2CAP_Conn_Update+0x70>
    {
    	HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_SET);
 800d852:	2201      	movs	r2, #1
 800d854:	2101      	movs	r1, #1
 800d856:	480a      	ldr	r0, [pc, #40]	@ (800d880 <BLE_SVC_L2CAP_Conn_Update+0x8c>)
 800d858:	f7f6 fd26 	bl	80042a8 <HAL_GPIO_WritePin>
      APP_DBG_MSG("BLE_SVC_L2CAP_Conn_Update(), Failed \r\n\r");
 800d85c:	4809      	ldr	r0, [pc, #36]	@ (800d884 <BLE_SVC_L2CAP_Conn_Update+0x90>)
 800d85e:	f001 f83b 	bl	800e8d8 <iprintf>
  }

  /* USER CODE BEGIN BLE_SVC_L2CAP_Conn_Update_2 */
  /* USER CODE END BLE_SVC_L2CAP_Conn_Update_2 */

  return;
 800d862:	e003      	b.n	800d86c <BLE_SVC_L2CAP_Conn_Update+0x78>
      APP_DBG_MSG("BLE_SVC_L2CAP_Conn_Update(), Successfully \r\n\r");
 800d864:	4808      	ldr	r0, [pc, #32]	@ (800d888 <BLE_SVC_L2CAP_Conn_Update+0x94>)
 800d866:	f001 f837 	bl	800e8d8 <iprintf>
  return;
 800d86a:	bf00      	nop
 800d86c:	bf00      	nop
}
 800d86e:	371c      	adds	r7, #28
 800d870:	46bd      	mov	sp, r7
 800d872:	bd90      	pop	{r4, r7, pc}
 800d874:	20000579 	.word	0x20000579
 800d878:	20000578 	.word	0x20000578
 800d87c:	200004dc 	.word	0x200004dc
 800d880:	48000400 	.word	0x48000400
 800d884:	08010e78 	.word	0x08010e78
 800d888:	08010ea0 	.word	0x08010ea0

0800d88c <Connection_Interval_Update_Req>:
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

#if (L2CAP_REQUEST_NEW_CONN_PARAM != 0)
static void Connection_Interval_Update_Req(void)
{
 800d88c:	b580      	push	{r7, lr}
 800d88e:	af00      	add	r7, sp, #0
  if (BleApplicationContext.Device_Connection_Status != APP_BLE_FAST_ADV && BleApplicationContext.Device_Connection_Status != APP_BLE_IDLE)
 800d890:	4b08      	ldr	r3, [pc, #32]	@ (800d8b4 <Connection_Interval_Update_Req+0x28>)
 800d892:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d896:	2b01      	cmp	r3, #1
 800d898:	d00a      	beq.n	800d8b0 <Connection_Interval_Update_Req+0x24>
 800d89a:	4b06      	ldr	r3, [pc, #24]	@ (800d8b4 <Connection_Interval_Update_Req+0x28>)
 800d89c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d005      	beq.n	800d8b0 <Connection_Interval_Update_Req+0x24>
  {
    BLE_SVC_L2CAP_Conn_Update(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 800d8a4:	4b03      	ldr	r3, [pc, #12]	@ (800d8b4 <Connection_Interval_Update_Req+0x28>)
 800d8a6:	8adb      	ldrh	r3, [r3, #22]
 800d8a8:	4618      	mov	r0, r3
 800d8aa:	f7ff ffa3 	bl	800d7f4 <BLE_SVC_L2CAP_Conn_Update>
  }

  return;
 800d8ae:	bf00      	nop
 800d8b0:	bf00      	nop
}
 800d8b2:	bd80      	pop	{r7, pc}
 800d8b4:	200004dc 	.word	0x200004dc

0800d8b8 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 800d8b8:	b580      	push	{r7, lr}
 800d8ba:	b082      	sub	sp, #8
 800d8bc:	af00      	add	r7, sp, #0
 800d8be:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800d8c0:	2100      	movs	r1, #0
 800d8c2:	2004      	movs	r0, #4
 800d8c4:	f000 fe4a 	bl	800e55c <UTIL_SEQ_SetTask>

  return;
 800d8c8:	bf00      	nop
}
 800d8ca:	3708      	adds	r7, #8
 800d8cc:	46bd      	mov	sp, r7
 800d8ce:	bd80      	pop	{r7, pc}

0800d8d0 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 800d8d0:	b580      	push	{r7, lr}
 800d8d2:	b082      	sub	sp, #8
 800d8d4:	af00      	add	r7, sp, #0
 800d8d6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800d8d8:	2001      	movs	r0, #1
 800d8da:	f000 feab 	bl	800e634 <UTIL_SEQ_SetEvt>

  return;
 800d8de:	bf00      	nop
}
 800d8e0:	3708      	adds	r7, #8
 800d8e2:	46bd      	mov	sp, r7
 800d8e4:	bd80      	pop	{r7, pc}

0800d8e6 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 800d8e6:	b580      	push	{r7, lr}
 800d8e8:	b082      	sub	sp, #8
 800d8ea:	af00      	add	r7, sp, #0
 800d8ec:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800d8ee:	2001      	movs	r0, #1
 800d8f0:	f000 fec0 	bl	800e674 <UTIL_SEQ_WaitEvt>

  return;
 800d8f4:	bf00      	nop
}
 800d8f6:	3708      	adds	r7, #8
 800d8f8:	46bd      	mov	sp, r7
 800d8fa:	bd80      	pop	{r7, pc}

0800d8fc <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 800d8fc:	b580      	push	{r7, lr}
 800d8fe:	b084      	sub	sp, #16
 800d900:	af00      	add	r7, sp, #0
 800d902:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 800d908:	68fb      	ldr	r3, [r7, #12]
 800d90a:	685b      	ldr	r3, [r3, #4]
 800d90c:	3308      	adds	r3, #8
 800d90e:	4618      	mov	r0, r3
 800d910:	f7fd fa3e 	bl	800ad90 <SVCCTL_UserEvtRx>
 800d914:	4603      	mov	r3, r0
 800d916:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 800d918:	7afb      	ldrb	r3, [r7, #11]
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d003      	beq.n	800d926 <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	2201      	movs	r2, #1
 800d922:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 800d924:	e003      	b.n	800d92e <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 800d926:	68fb      	ldr	r3, [r7, #12]
 800d928:	2200      	movs	r2, #0
 800d92a:	701a      	strb	r2, [r3, #0]
  return;
 800d92c:	bf00      	nop
}
 800d92e:	3710      	adds	r7, #16
 800d930:	46bd      	mov	sp, r7
 800d932:	bd80      	pop	{r7, pc}

0800d934 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 800d934:	b580      	push	{r7, lr}
 800d936:	b084      	sub	sp, #16
 800d938:	af00      	add	r7, sp, #0
 800d93a:	4603      	mov	r3, r0
 800d93c:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 800d93e:	79fb      	ldrb	r3, [r7, #7]
 800d940:	2b00      	cmp	r3, #0
 800d942:	d002      	beq.n	800d94a <BLE_StatusNot+0x16>
 800d944:	2b01      	cmp	r3, #1
 800d946:	d006      	beq.n	800d956 <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 800d948:	e00b      	b.n	800d962 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800d94a:	237f      	movs	r3, #127	@ 0x7f
 800d94c:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 800d94e:	68f8      	ldr	r0, [r7, #12]
 800d950:	f000 fe30 	bl	800e5b4 <UTIL_SEQ_PauseTask>
      break;
 800d954:	e005      	b.n	800d962 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800d956:	237f      	movs	r3, #127	@ 0x7f
 800d958:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 800d95a:	68f8      	ldr	r0, [r7, #12]
 800d95c:	f000 fe4a 	bl	800e5f4 <UTIL_SEQ_ResumeTask>
      break;
 800d960:	bf00      	nop
  }

  return;
 800d962:	bf00      	nop
}
 800d964:	3710      	adds	r7, #16
 800d966:	46bd      	mov	sp, r7
 800d968:	bd80      	pop	{r7, pc}
	...

0800d96c <Hermes_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Hermes_Event_Handler(void *Event)
{
 800d96c:	b580      	push	{r7, lr}
 800d96e:	b08a      	sub	sp, #40	@ 0x28
 800d970:	af00      	add	r7, sp, #0
 800d972:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_blecore_aci *blecore_evt;
  aci_gatt_attribute_modified_event_rp0    * attribute_modified;
  P2PS_STM_App_Notification_evt_t Notification;

  return_value = SVCCTL_EvtNotAck;
 800d974:	2300      	movs	r3, #0
 800d976:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	3301      	adds	r3, #1
 800d97e:	623b      	str	r3, [r7, #32]

  switch(event_pckt->evt)
 800d980:	6a3b      	ldr	r3, [r7, #32]
 800d982:	781b      	ldrb	r3, [r3, #0]
 800d984:	2bff      	cmp	r3, #255	@ 0xff
 800d986:	d144      	bne.n	800da12 <Hermes_Event_Handler+0xa6>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 800d988:	6a3b      	ldr	r3, [r7, #32]
 800d98a:	3302      	adds	r3, #2
 800d98c:	61fb      	str	r3, [r7, #28]
      switch(blecore_evt->ecode)
 800d98e:	69fb      	ldr	r3, [r7, #28]
 800d990:	881b      	ldrh	r3, [r3, #0]
 800d992:	b29b      	uxth	r3, r3
 800d994:	461a      	mov	r2, r3
 800d996:	f640 4301 	movw	r3, #3073	@ 0xc01
 800d99a:	429a      	cmp	r2, r3
 800d99c:	d135      	bne.n	800da0a <Hermes_Event_Handler+0x9e>
      {
        case ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE:
       {
			attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 800d99e:	69fb      	ldr	r3, [r7, #28]
 800d9a0:	3302      	adds	r3, #2
 800d9a2:	61bb      	str	r3, [r7, #24]
			if(attribute_modified->Attr_Handle == (BleApplicationContext.eeg_data_char_handle + 2))
 800d9a4:	69bb      	ldr	r3, [r7, #24]
 800d9a6:	885b      	ldrh	r3, [r3, #2]
 800d9a8:	b29b      	uxth	r3, r3
 800d9aa:	461a      	mov	r2, r3
 800d9ac:	4b1c      	ldr	r3, [pc, #112]	@ (800da20 <Hermes_Event_Handler+0xb4>)
 800d9ae:	f8b3 3088 	ldrh.w	r3, [r3, #136]	@ 0x88
 800d9b2:	3302      	adds	r3, #2
 800d9b4:	429a      	cmp	r2, r3
 800d9b6:	d118      	bne.n	800d9ea <Hermes_Event_Handler+0x7e>
			{
				/**
				* Descriptor handle
				*/
				return_value = SVCCTL_EvtAckFlowEnable;
 800d9b8:	2301      	movs	r3, #1
 800d9ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				/**
				* Notify to application
				*/
				if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 800d9be:	69bb      	ldr	r3, [r7, #24]
 800d9c0:	7a1b      	ldrb	r3, [r3, #8]
 800d9c2:	f003 0301 	and.w	r3, r3, #1
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d007      	beq.n	800d9da <Hermes_Event_Handler+0x6e>
				{
					Notification.P2P_Evt_Opcode = P2PS_STM__NOTIFY_ENABLED_EVT;
 800d9ca:	2300      	movs	r3, #0
 800d9cc:	723b      	strb	r3, [r7, #8]
					P2PS_STM_App_Notification(&Notification);
 800d9ce:	f107 0308 	add.w	r3, r7, #8
 800d9d2:	4618      	mov	r0, r3
 800d9d4:	f000 f870 	bl	800dab8 <P2PS_STM_App_Notification>
			{
				eeg_config_handler(attribute_modified->Attr_Data);
			}

        }
        break;
 800d9d8:	e019      	b.n	800da0e <Hermes_Event_Handler+0xa2>
					Notification.P2P_Evt_Opcode = P2PS_STM_NOTIFY_DISABLED_EVT;
 800d9da:	2301      	movs	r3, #1
 800d9dc:	723b      	strb	r3, [r7, #8]
					P2PS_STM_App_Notification(&Notification);
 800d9de:	f107 0308 	add.w	r3, r7, #8
 800d9e2:	4618      	mov	r0, r3
 800d9e4:	f000 f868 	bl	800dab8 <P2PS_STM_App_Notification>
        break;
 800d9e8:	e011      	b.n	800da0e <Hermes_Event_Handler+0xa2>
			else if(attribute_modified->Attr_Handle == (BleApplicationContext.eeg_config_char_handle + 1))
 800d9ea:	69bb      	ldr	r3, [r7, #24]
 800d9ec:	885b      	ldrh	r3, [r3, #2]
 800d9ee:	b29b      	uxth	r3, r3
 800d9f0:	461a      	mov	r2, r3
 800d9f2:	4b0b      	ldr	r3, [pc, #44]	@ (800da20 <Hermes_Event_Handler+0xb4>)
 800d9f4:	f8b3 3092 	ldrh.w	r3, [r3, #146]	@ 0x92
 800d9f8:	3301      	adds	r3, #1
 800d9fa:	429a      	cmp	r2, r3
 800d9fc:	d107      	bne.n	800da0e <Hermes_Event_Handler+0xa2>
				eeg_config_handler(attribute_modified->Attr_Data);
 800d9fe:	69bb      	ldr	r3, [r7, #24]
 800da00:	3308      	adds	r3, #8
 800da02:	4618      	mov	r0, r3
 800da04:	f000 f80e 	bl	800da24 <eeg_config_handler>
        break;
 800da08:	e001      	b.n	800da0e <Hermes_Event_Handler+0xa2>

        default:
          break;
 800da0a:	bf00      	nop
 800da0c:	e002      	b.n	800da14 <Hermes_Event_Handler+0xa8>
        break;
 800da0e:	bf00      	nop
      }
    }
    break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 800da10:	e000      	b.n	800da14 <Hermes_Event_Handler+0xa8>

    default:
      break;
 800da12:	bf00      	nop
  }

  return(return_value);
 800da14:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}/* end SVCCTL_EvtAckStatus_t */
 800da18:	4618      	mov	r0, r3
 800da1a:	3728      	adds	r7, #40	@ 0x28
 800da1c:	46bd      	mov	sp, r7
 800da1e:	bd80      	pop	{r7, pc}
 800da20:	200004dc 	.word	0x200004dc

0800da24 <eeg_config_handler>:



static void eeg_config_handler(uint8_t msg[4]){
 800da24:	b580      	push	{r7, lr}
 800da26:	b082      	sub	sp, #8
 800da28:	af00      	add	r7, sp, #0
 800da2a:	6078      	str	r0, [r7, #4]
	 * Byte 1: operation
	 * Byte 2: address
	 * Byte 3: value
	 */

	HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_SET);
 800da2c:	2201      	movs	r2, #1
 800da2e:	2101      	movs	r1, #1
 800da30:	4820      	ldr	r0, [pc, #128]	@ (800dab4 <eeg_config_handler+0x90>)
 800da32:	f7f6 fc39 	bl	80042a8 <HAL_GPIO_WritePin>

	switch(msg[0]){
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	781b      	ldrb	r3, [r3, #0]
 800da3a:	2b03      	cmp	r3, #3
 800da3c:	d02b      	beq.n	800da96 <eeg_config_handler+0x72>
 800da3e:	2b03      	cmp	r3, #3
 800da40:	dc33      	bgt.n	800daaa <eeg_config_handler+0x86>
 800da42:	2b01      	cmp	r3, #1
 800da44:	d002      	beq.n	800da4c <eeg_config_handler+0x28>
 800da46:	2b02      	cmp	r3, #2
 800da48:	d010      	beq.n	800da6c <eeg_config_handler+0x48>





}
 800da4a:	e02e      	b.n	800daaa <eeg_config_handler+0x86>
		if(msg[1]==0x00){
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	3301      	adds	r3, #1
 800da50:	781b      	ldrb	r3, [r3, #0]
 800da52:	2b00      	cmp	r3, #0
 800da54:	d102      	bne.n	800da5c <eeg_config_handler+0x38>
			stopStreaming();
 800da56:	f7f3 fb5e 	bl	8001116 <stopStreaming>
		break;
 800da5a:	e023      	b.n	800daa4 <eeg_config_handler+0x80>
		}else if(msg[1]==0x01){
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	3301      	adds	r3, #1
 800da60:	781b      	ldrb	r3, [r3, #0]
 800da62:	2b01      	cmp	r3, #1
 800da64:	d11e      	bne.n	800daa4 <eeg_config_handler+0x80>
			startStreaming();
 800da66:	f7f3 fb4f 	bl	8001108 <startStreaming>
		break;
 800da6a:	e01b      	b.n	800daa4 <eeg_config_handler+0x80>
		if(msg[1]==0x00){
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	3301      	adds	r3, #1
 800da70:	781b      	ldrb	r3, [r3, #0]
 800da72:	2b00      	cmp	r3, #0
 800da74:	d018      	beq.n	800daa8 <eeg_config_handler+0x84>
		}else if(msg[1]==0x01){
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	3301      	adds	r3, #1
 800da7a:	781b      	ldrb	r3, [r3, #0]
 800da7c:	2b01      	cmp	r3, #1
 800da7e:	d113      	bne.n	800daa8 <eeg_config_handler+0x84>
			writeRegister(msg[2], msg[3]);
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	3302      	adds	r3, #2
 800da84:	781a      	ldrb	r2, [r3, #0]
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	3303      	adds	r3, #3
 800da8a:	781b      	ldrb	r3, [r3, #0]
 800da8c:	4619      	mov	r1, r3
 800da8e:	4610      	mov	r0, r2
 800da90:	f7f3 fb48 	bl	8001124 <writeRegister>
		break;
 800da94:	e008      	b.n	800daa8 <eeg_config_handler+0x84>
		setPredefMode(msg[1]);
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	3301      	adds	r3, #1
 800da9a:	781b      	ldrb	r3, [r3, #0]
 800da9c:	4618      	mov	r0, r3
 800da9e:	f7f3 fb5d 	bl	800115c <setPredefMode>
		break;
 800daa2:	e002      	b.n	800daaa <eeg_config_handler+0x86>
		break;
 800daa4:	bf00      	nop
 800daa6:	e000      	b.n	800daaa <eeg_config_handler+0x86>
		break;
 800daa8:	bf00      	nop
}
 800daaa:	bf00      	nop
 800daac:	3708      	adds	r7, #8
 800daae:	46bd      	mov	sp, r7
 800dab0:	bd80      	pop	{r7, pc}
 800dab2:	bf00      	nop
 800dab4:	48000400 	.word	0x48000400

0800dab8 <P2PS_STM_App_Notification>:
//static void P2PS_APP_LED_BUTTON_context_Init(void);
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void P2PS_STM_App_Notification(P2PS_STM_App_Notification_evt_t *pNotification)
{
 800dab8:	b580      	push	{r7, lr}
 800daba:	b082      	sub	sp, #8
 800dabc:	af00      	add	r7, sp, #0
 800dabe:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_STM_App_Notification_1 */
/* USER CODE END P2PS_STM_App_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	781b      	ldrb	r3, [r3, #0]
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d002      	beq.n	800dace <P2PS_STM_App_Notification+0x16>
 800dac8:	2b01      	cmp	r3, #1
 800daca:	d00a      	beq.n	800dae2 <P2PS_STM_App_Notification+0x2a>

    default:
/* USER CODE BEGIN P2PS_STM_App_Notification_default */
      
/* USER CODE END P2PS_STM_App_Notification_default */
      break;
 800dacc:	e013      	b.n	800daf6 <P2PS_STM_App_Notification+0x3e>
      P2P_Server_App_Context.Notification_Status = 1;
 800dace:	4b0c      	ldr	r3, [pc, #48]	@ (800db00 <P2PS_STM_App_Notification+0x48>)
 800dad0:	2201      	movs	r2, #1
 800dad2:	701a      	strb	r2, [r3, #0]
      APP_DBG_MSG("-- P2P APPLICATION SERVER : NOTIFICATION ENABLED\n"); 
 800dad4:	480b      	ldr	r0, [pc, #44]	@ (800db04 <P2PS_STM_App_Notification+0x4c>)
 800dad6:	f000 ff6f 	bl	800e9b8 <puts>
      APP_DBG_MSG(" \n\r");
 800dada:	480b      	ldr	r0, [pc, #44]	@ (800db08 <P2PS_STM_App_Notification+0x50>)
 800dadc:	f000 fefc 	bl	800e8d8 <iprintf>
      break;
 800dae0:	e009      	b.n	800daf6 <P2PS_STM_App_Notification+0x3e>
      P2P_Server_App_Context.Notification_Status = 0;
 800dae2:	4b07      	ldr	r3, [pc, #28]	@ (800db00 <P2PS_STM_App_Notification+0x48>)
 800dae4:	2200      	movs	r2, #0
 800dae6:	701a      	strb	r2, [r3, #0]
      APP_DBG_MSG("-- P2P APPLICATION SERVER : NOTIFICATION DISABLED\n");
 800dae8:	4808      	ldr	r0, [pc, #32]	@ (800db0c <P2PS_STM_App_Notification+0x54>)
 800daea:	f000 ff65 	bl	800e9b8 <puts>
      APP_DBG_MSG(" \n\r");
 800daee:	4806      	ldr	r0, [pc, #24]	@ (800db08 <P2PS_STM_App_Notification+0x50>)
 800daf0:	f000 fef2 	bl	800e8d8 <iprintf>
      break;
 800daf4:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_STM_App_Notification_2 */

/* USER CODE END P2PS_STM_App_Notification_2 */
  return;
 800daf6:	bf00      	nop
}
 800daf8:	3708      	adds	r7, #8
 800dafa:	46bd      	mov	sp, r7
 800dafc:	bd80      	pop	{r7, pc}
 800dafe:	bf00      	nop
 800db00:	200021dc 	.word	0x200021dc
 800db04:	08010ed0 	.word	0x08010ed0
 800db08:	08010f04 	.word	0x08010f04
 800db0c:	08010f08 	.word	0x08010f08

0800db10 <P2PS_APP_Notification>:

void P2PS_APP_Notification(P2PS_APP_ConnHandle_Not_evt_t *pNotification)
{
 800db10:	b480      	push	{r7}
 800db12:	b083      	sub	sp, #12
 800db14:	af00      	add	r7, sp, #0
 800db16:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_APP_Notification_1 */

/* USER CODE END P2PS_APP_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	781b      	ldrb	r3, [r3, #0]
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d006      	beq.n	800db2e <P2PS_APP_Notification+0x1e>
 800db20:	2b01      	cmp	r3, #1
 800db22:	d000      	beq.n	800db26 <P2PS_APP_Notification+0x16>

    default:
/* USER CODE BEGIN P2PS_APP_Notification_default */

/* USER CODE END P2PS_APP_Notification_default */
      break;
 800db24:	e004      	b.n	800db30 <P2PS_APP_Notification+0x20>
    	P2P_Server_App_Context.Notification_Status = 0;
 800db26:	4b05      	ldr	r3, [pc, #20]	@ (800db3c <P2PS_APP_Notification+0x2c>)
 800db28:	2200      	movs	r2, #0
 800db2a:	701a      	strb	r2, [r3, #0]
    break;
 800db2c:	e000      	b.n	800db30 <P2PS_APP_Notification+0x20>
    break;
 800db2e:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_APP_Notification_2 */

/* USER CODE END P2PS_APP_Notification_2 */
  return;
 800db30:	bf00      	nop
}
 800db32:	370c      	adds	r7, #12
 800db34:	46bd      	mov	sp, r7
 800db36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db3a:	4770      	bx	lr
 800db3c:	200021dc 	.word	0x200021dc

0800db40 <P2PS_APP_Init>:

void P2PS_APP_Init(void)
{
 800db40:	b580      	push	{r7, lr}
 800db42:	af00      	add	r7, sp, #0
/* USER CODE BEGIN P2PS_APP_Init */


#ifdef BLE_BUTTON_EVENTS
	UTIL_SEQ_RegTask( 1<< CFG_TASK_SWA_BUTTON_PUSHED_ID, UTIL_SEQ_RFU, SWA_Send_Notification ); //
 800db44:	4a0c      	ldr	r2, [pc, #48]	@ (800db78 <P2PS_APP_Init+0x38>)
 800db46:	2100      	movs	r1, #0
 800db48:	2008      	movs	r0, #8
 800db4a:	f000 fce5 	bl	800e518 <UTIL_SEQ_RegTask>
	UTIL_SEQ_RegTask( 1<< CFG_TASK_SWB_BUTTON_PUSHED_ID, UTIL_SEQ_RFU, SWB_Send_Notification ); //
 800db4e:	4a0b      	ldr	r2, [pc, #44]	@ (800db7c <P2PS_APP_Init+0x3c>)
 800db50:	2100      	movs	r1, #0
 800db52:	2010      	movs	r0, #16
 800db54:	f000 fce0 	bl	800e518 <UTIL_SEQ_RegTask>
	UTIL_SEQ_RegTask( 1<< CFG_TASK_IMU_SAMPLE_ID, UTIL_SEQ_RFU, get_and_send_motion_samples ); //
 800db58:	4a09      	ldr	r2, [pc, #36]	@ (800db80 <P2PS_APP_Init+0x40>)
 800db5a:	2100      	movs	r1, #0
 800db5c:	2020      	movs	r0, #32
 800db5e:	f000 fcdb 	bl	800e518 <UTIL_SEQ_RegTask>
	UTIL_SEQ_RegTask( 1<< CFG_TASK_ADS_SAMPLE_ID, UTIL_SEQ_RFU, APP_BLE_Manage_ADS1299_event_exec ); //
 800db62:	4a08      	ldr	r2, [pc, #32]	@ (800db84 <P2PS_APP_Init+0x44>)
 800db64:	2100      	movs	r1, #0
 800db66:	2040      	movs	r0, #64	@ 0x40
 800db68:	f000 fcd6 	bl	800e518 <UTIL_SEQ_RegTask>
//(FS) Need to attach whatever user function here

  /**
   * Initialize LedButton Service
   */
  P2P_Server_App_Context.Notification_Status=0; 
 800db6c:	4b06      	ldr	r3, [pc, #24]	@ (800db88 <P2PS_APP_Init+0x48>)
 800db6e:	2200      	movs	r2, #0
 800db70:	701a      	strb	r2, [r3, #0]


  //P2PS_APP_LED_BUTTON_context_Init();
/* USER CODE END P2PS_APP_Init */
  return;
 800db72:	bf00      	nop
}
 800db74:	bd80      	pop	{r7, pc}
 800db76:	bf00      	nop
 800db78:	0800dbad 	.word	0x0800dbad
 800db7c:	0800dbd9 	.word	0x0800dbd9
 800db80:	0800dc05 	.word	0x0800dc05
 800db84:	0800dd41 	.word	0x0800dd41
 800db88:	200021dc 	.word	0x200021dc

0800db8c <APP_SWA_Button_Action>:

}
#endif

void APP_SWA_Button_Action(void)
{
 800db8c:	b580      	push	{r7, lr}
 800db8e:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetTask( 1<<CFG_TASK_SWA_BUTTON_PUSHED_ID, CFG_SCH_PRIO_0);
 800db90:	2100      	movs	r1, #0
 800db92:	2008      	movs	r0, #8
 800db94:	f000 fce2 	bl	800e55c <UTIL_SEQ_SetTask>
  return;
 800db98:	bf00      	nop
}
 800db9a:	bd80      	pop	{r7, pc}

0800db9c <APP_SWB_Button_Action>:

void APP_SWB_Button_Action(void)
{
 800db9c:	b580      	push	{r7, lr}
 800db9e:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetTask( 1<<CFG_TASK_SWB_BUTTON_PUSHED_ID, CFG_SCH_PRIO_0);
 800dba0:	2100      	movs	r1, #0
 800dba2:	2010      	movs	r0, #16
 800dba4:	f000 fcda 	bl	800e55c <UTIL_SEQ_SetTask>
  return;
 800dba8:	bf00      	nop
}
 800dbaa:	bd80      	pop	{r7, pc}

0800dbac <SWA_Send_Notification>:
	// insert local button management here
}


void SWA_Send_Notification(void)
{
 800dbac:	b580      	push	{r7, lr}
 800dbae:	af00      	add	r7, sp, #0
	current_event_payload.event_type = EVENT_TYPE_BUTTON_PRESSED;
 800dbb0:	4b07      	ldr	r3, [pc, #28]	@ (800dbd0 <SWA_Send_Notification+0x24>)
 800dbb2:	2201      	movs	r2, #1
 800dbb4:	701a      	strb	r2, [r3, #0]
	current_event_payload.source_id = BUTTON_ID_A;
 800dbb6:	4b06      	ldr	r3, [pc, #24]	@ (800dbd0 <SWA_Send_Notification+0x24>)
 800dbb8:	2201      	movs	r2, #1
 800dbba:	705a      	strb	r2, [r3, #1]
	current_event_payload.packet_id = packet_counter;
 800dbbc:	4b05      	ldr	r3, [pc, #20]	@ (800dbd4 <SWA_Send_Notification+0x28>)
 800dbbe:	781a      	ldrb	r2, [r3, #0]
 800dbc0:	4b03      	ldr	r3, [pc, #12]	@ (800dbd0 <SWA_Send_Notification+0x24>)
 800dbc2:	709a      	strb	r2, [r3, #2]

	APP_BLE_Send_Event_Notification(&current_event_payload);
 800dbc4:	4802      	ldr	r0, [pc, #8]	@ (800dbd0 <SWA_Send_Notification+0x24>)
 800dbc6:	f7ff fb01 	bl	800d1cc <APP_BLE_Send_Event_Notification>
}
 800dbca:	bf00      	nop
 800dbcc:	bd80      	pop	{r7, pc}
 800dbce:	bf00      	nop
 800dbd0:	200021c4 	.word	0x200021c4
 800dbd4:	200021bd 	.word	0x200021bd

0800dbd8 <SWB_Send_Notification>:


void SWB_Send_Notification(void)
{
 800dbd8:	b580      	push	{r7, lr}
 800dbda:	af00      	add	r7, sp, #0
	current_event_payload.event_type = EVENT_TYPE_BUTTON_PRESSED;
 800dbdc:	4b07      	ldr	r3, [pc, #28]	@ (800dbfc <SWB_Send_Notification+0x24>)
 800dbde:	2201      	movs	r2, #1
 800dbe0:	701a      	strb	r2, [r3, #0]
	current_event_payload.source_id = BUTTON_ID_B;
 800dbe2:	4b06      	ldr	r3, [pc, #24]	@ (800dbfc <SWB_Send_Notification+0x24>)
 800dbe4:	2202      	movs	r2, #2
 800dbe6:	705a      	strb	r2, [r3, #1]
	current_event_payload.packet_id = packet_counter;
 800dbe8:	4b05      	ldr	r3, [pc, #20]	@ (800dc00 <SWB_Send_Notification+0x28>)
 800dbea:	781a      	ldrb	r2, [r3, #0]
 800dbec:	4b03      	ldr	r3, [pc, #12]	@ (800dbfc <SWB_Send_Notification+0x24>)
 800dbee:	709a      	strb	r2, [r3, #2]

	APP_BLE_Send_Event_Notification(&current_event_payload);
 800dbf0:	4802      	ldr	r0, [pc, #8]	@ (800dbfc <SWB_Send_Notification+0x24>)
 800dbf2:	f7ff faeb 	bl	800d1cc <APP_BLE_Send_Event_Notification>
}
 800dbf6:	bf00      	nop
 800dbf8:	bd80      	pop	{r7, pc}
 800dbfa:	bf00      	nop
 800dbfc:	200021c4 	.word	0x200021c4
 800dc00:	200021bd 	.word	0x200021bd

0800dc04 <get_and_send_motion_samples>:

void get_and_send_motion_samples(void){
 800dc04:	b580      	push	{r7, lr}
 800dc06:	b082      	sub	sp, #8
 800dc08:	af00      	add	r7, sp, #0

	if(P2P_Server_App_Context.Notification_Status==1){
 800dc0a:	4b11      	ldr	r3, [pc, #68]	@ (800dc50 <get_and_send_motion_samples+0x4c>)
 800dc0c:	781b      	ldrb	r3, [r3, #0]
 800dc0e:	2b01      	cmp	r3, #1
 800dc10:	d11a      	bne.n	800dc48 <get_and_send_motion_samples+0x44>

		int16_t* imu_sample = ism330_ReadIMU();
 800dc12:	f7f4 fd27 	bl	8002664 <ism330_ReadIMU>
 800dc16:	6078      	str	r0, [r7, #4]
		int16_t* compass_sample = lis3mdl_ReadMag();
 800dc18:	f7f4 fdc4 	bl	80027a4 <lis3mdl_ReadMag>
 800dc1c:	6038      	str	r0, [r7, #0]

		memcpy(motion_packet,imu_sample,6*sizeof(int16_t));
 800dc1e:	220c      	movs	r2, #12
 800dc20:	6879      	ldr	r1, [r7, #4]
 800dc22:	480c      	ldr	r0, [pc, #48]	@ (800dc54 <get_and_send_motion_samples+0x50>)
 800dc24:	f001 f83d 	bl	800eca2 <memcpy>
		memcpy(&motion_packet[sizeof(int16_t)*6],compass_sample,3*sizeof(int16_t));
 800dc28:	2206      	movs	r2, #6
 800dc2a:	6839      	ldr	r1, [r7, #0]
 800dc2c:	480a      	ldr	r0, [pc, #40]	@ (800dc58 <get_and_send_motion_samples+0x54>)
 800dc2e:	f001 f838 	bl	800eca2 <memcpy>

		if(APP_BLE_Send_IMU_Notification((uint8_t*)motion_packet)!=0){
 800dc32:	4808      	ldr	r0, [pc, #32]	@ (800dc54 <get_and_send_motion_samples+0x50>)
 800dc34:	f7ff fae6 	bl	800d204 <APP_BLE_Send_IMU_Notification>
 800dc38:	4603      	mov	r3, r0
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d004      	beq.n	800dc48 <get_and_send_motion_samples+0x44>
			HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_SET);
 800dc3e:	2201      	movs	r2, #1
 800dc40:	2101      	movs	r1, #1
 800dc42:	4806      	ldr	r0, [pc, #24]	@ (800dc5c <get_and_send_motion_samples+0x58>)
 800dc44:	f7f6 fb30 	bl	80042a8 <HAL_GPIO_WritePin>
		}
	}
}
 800dc48:	bf00      	nop
 800dc4a:	3708      	adds	r7, #8
 800dc4c:	46bd      	mov	sp, r7
 800dc4e:	bd80      	pop	{r7, pc}
 800dc50:	200021dc 	.word	0x200021dc
 800dc54:	200021c8 	.word	0x200021c8
 800dc58:	200021d4 	.word	0x200021d4
 800dc5c:	48000400 	.word	0x48000400

0800dc60 <APP_BLE_Manage_ADS1299_event>:
 *************************************************************/
/* USER CODE BEGIN FD_LOCAL_FUNCTIONS*/



void APP_BLE_Manage_ADS1299_event(void){
 800dc60:	b580      	push	{r7, lr}
 800dc62:	af00      	add	r7, sp, #0

	if(P2P_Server_App_Context.Notification_Status==1){
 800dc64:	4b2f      	ldr	r3, [pc, #188]	@ (800dd24 <APP_BLE_Manage_ADS1299_event+0xc4>)
 800dc66:	781b      	ldrb	r3, [r3, #0]
 800dc68:	2b01      	cmp	r3, #1
 800dc6a:	d158      	bne.n	800dd1e <APP_BLE_Manage_ADS1299_event+0xbe>

		if(sample_index==0){
 800dc6c:	4b2e      	ldr	r3, [pc, #184]	@ (800dd28 <APP_BLE_Manage_ADS1299_event+0xc8>)
 800dc6e:	781b      	ldrb	r3, [r3, #0]
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d10d      	bne.n	800dc90 <APP_BLE_Manage_ADS1299_event+0x30>
			buffered_packets_array[buffer_index][0] = packet_counter;
 800dc74:	4b2d      	ldr	r3, [pc, #180]	@ (800dd2c <APP_BLE_Manage_ADS1299_event+0xcc>)
 800dc76:	781b      	ldrb	r3, [r3, #0]
 800dc78:	461a      	mov	r2, r3
 800dc7a:	4b2d      	ldr	r3, [pc, #180]	@ (800dd30 <APP_BLE_Manage_ADS1299_event+0xd0>)
 800dc7c:	7818      	ldrb	r0, [r3, #0]
 800dc7e:	492d      	ldr	r1, [pc, #180]	@ (800dd34 <APP_BLE_Manage_ADS1299_event+0xd4>)
 800dc80:	4613      	mov	r3, r2
 800dc82:	011b      	lsls	r3, r3, #4
 800dc84:	1a9b      	subs	r3, r3, r2
 800dc86:	011b      	lsls	r3, r3, #4
 800dc88:	4413      	add	r3, r2
 800dc8a:	440b      	add	r3, r1
 800dc8c:	4602      	mov	r2, r0
 800dc8e:	701a      	strb	r2, [r3, #0]
		}

		ADS1299_ReadSamples(statusBuffer, &buffered_packets_array[buffer_index][sample_index*SAMPLE_SIZE+1]);
 800dc90:	4b26      	ldr	r3, [pc, #152]	@ (800dd2c <APP_BLE_Manage_ADS1299_event+0xcc>)
 800dc92:	781b      	ldrb	r3, [r3, #0]
 800dc94:	461a      	mov	r2, r3
 800dc96:	4b24      	ldr	r3, [pc, #144]	@ (800dd28 <APP_BLE_Manage_ADS1299_event+0xc8>)
 800dc98:	781b      	ldrb	r3, [r3, #0]
 800dc9a:	4619      	mov	r1, r3
 800dc9c:	460b      	mov	r3, r1
 800dc9e:	005b      	lsls	r3, r3, #1
 800dca0:	440b      	add	r3, r1
 800dca2:	00db      	lsls	r3, r3, #3
 800dca4:	1c59      	adds	r1, r3, #1
 800dca6:	4613      	mov	r3, r2
 800dca8:	011b      	lsls	r3, r3, #4
 800dcaa:	1a9b      	subs	r3, r3, r2
 800dcac:	011b      	lsls	r3, r3, #4
 800dcae:	4413      	add	r3, r2
 800dcb0:	440b      	add	r3, r1
 800dcb2:	4a20      	ldr	r2, [pc, #128]	@ (800dd34 <APP_BLE_Manage_ADS1299_event+0xd4>)
 800dcb4:	4413      	add	r3, r2
 800dcb6:	4619      	mov	r1, r3
 800dcb8:	481f      	ldr	r0, [pc, #124]	@ (800dd38 <APP_BLE_Manage_ADS1299_event+0xd8>)
 800dcba:	f7f3 f9c7 	bl	800104c <ADS1299_ReadSamples>
		sample_index++;
 800dcbe:	4b1a      	ldr	r3, [pc, #104]	@ (800dd28 <APP_BLE_Manage_ADS1299_event+0xc8>)
 800dcc0:	781b      	ldrb	r3, [r3, #0]
 800dcc2:	3301      	adds	r3, #1
 800dcc4:	b2da      	uxtb	r2, r3
 800dcc6:	4b18      	ldr	r3, [pc, #96]	@ (800dd28 <APP_BLE_Manage_ADS1299_event+0xc8>)
 800dcc8:	701a      	strb	r2, [r3, #0]

		if(sample_index >= NB_SAMPLES_PER_PACKET){
 800dcca:	4b17      	ldr	r3, [pc, #92]	@ (800dd28 <APP_BLE_Manage_ADS1299_event+0xc8>)
 800dccc:	781b      	ldrb	r3, [r3, #0]
 800dcce:	2b09      	cmp	r3, #9
 800dcd0:	d925      	bls.n	800dd1e <APP_BLE_Manage_ADS1299_event+0xbe>


			buffer_index = (buffer_index + 1) % PACKETBUFFER_DEPTH;
 800dcd2:	4b16      	ldr	r3, [pc, #88]	@ (800dd2c <APP_BLE_Manage_ADS1299_event+0xcc>)
 800dcd4:	781b      	ldrb	r3, [r3, #0]
 800dcd6:	1c5a      	adds	r2, r3, #1
 800dcd8:	4b18      	ldr	r3, [pc, #96]	@ (800dd3c <APP_BLE_Manage_ADS1299_event+0xdc>)
 800dcda:	fb83 1302 	smull	r1, r3, r3, r2
 800dcde:	4413      	add	r3, r2
 800dce0:	1119      	asrs	r1, r3, #4
 800dce2:	17d3      	asrs	r3, r2, #31
 800dce4:	1ac9      	subs	r1, r1, r3
 800dce6:	460b      	mov	r3, r1
 800dce8:	011b      	lsls	r3, r3, #4
 800dcea:	1a5b      	subs	r3, r3, r1
 800dcec:	005b      	lsls	r3, r3, #1
 800dcee:	1ad1      	subs	r1, r2, r3
 800dcf0:	b2ca      	uxtb	r2, r1
 800dcf2:	4b0e      	ldr	r3, [pc, #56]	@ (800dd2c <APP_BLE_Manage_ADS1299_event+0xcc>)
 800dcf4:	701a      	strb	r2, [r3, #0]
			packet_counter = (packet_counter + 1) % 128;
 800dcf6:	4b0e      	ldr	r3, [pc, #56]	@ (800dd30 <APP_BLE_Manage_ADS1299_event+0xd0>)
 800dcf8:	781b      	ldrb	r3, [r3, #0]
 800dcfa:	3301      	adds	r3, #1
 800dcfc:	425a      	negs	r2, r3
 800dcfe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dd02:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800dd06:	bf58      	it	pl
 800dd08:	4253      	negpl	r3, r2
 800dd0a:	b2da      	uxtb	r2, r3
 800dd0c:	4b08      	ldr	r3, [pc, #32]	@ (800dd30 <APP_BLE_Manage_ADS1299_event+0xd0>)
 800dd0e:	701a      	strb	r2, [r3, #0]
			sample_index = 0;
 800dd10:	4b05      	ldr	r3, [pc, #20]	@ (800dd28 <APP_BLE_Manage_ADS1299_event+0xc8>)
 800dd12:	2200      	movs	r2, #0
 800dd14:	701a      	strb	r2, [r3, #0]

			// this will call BLE transfer
			UTIL_SEQ_SetTask( 1<<CFG_TASK_ADS_SAMPLE_ID, CFG_SCH_PRIO_0);
 800dd16:	2100      	movs	r1, #0
 800dd18:	2040      	movs	r0, #64	@ 0x40
 800dd1a:	f000 fc1f 	bl	800e55c <UTIL_SEQ_SetTask>
		}
	}
}
 800dd1e:	bf00      	nop
 800dd20:	bd80      	pop	{r7, pc}
 800dd22:	bf00      	nop
 800dd24:	200021dc 	.word	0x200021dc
 800dd28:	200021bc 	.word	0x200021bc
 800dd2c:	200021ba 	.word	0x200021ba
 800dd30:	200021bd 	.word	0x200021bd
 800dd34:	2000057c 	.word	0x2000057c
 800dd38:	200021c0 	.word	0x200021c0
 800dd3c:	88888889 	.word	0x88888889

0800dd40 <APP_BLE_Manage_ADS1299_event_exec>:

static uint8_t error_count = 0;

void APP_BLE_Manage_ADS1299_event_exec(void)
{
 800dd40:	b580      	push	{r7, lr}
 800dd42:	af00      	add	r7, sp, #0

	if (read_index != buffer_index) {
 800dd44:	4b23      	ldr	r3, [pc, #140]	@ (800ddd4 <APP_BLE_Manage_ADS1299_event_exec+0x94>)
 800dd46:	781a      	ldrb	r2, [r3, #0]
 800dd48:	4b23      	ldr	r3, [pc, #140]	@ (800ddd8 <APP_BLE_Manage_ADS1299_event_exec+0x98>)
 800dd4a:	781b      	ldrb	r3, [r3, #0]
 800dd4c:	429a      	cmp	r2, r3
 800dd4e:	d040      	beq.n	800ddd2 <APP_BLE_Manage_ADS1299_event_exec+0x92>
		if(APP_BLE_Send_EEGData_Notification(buffered_packets_array[read_index], PACKET_SIZE)!=0){
 800dd50:	4b20      	ldr	r3, [pc, #128]	@ (800ddd4 <APP_BLE_Manage_ADS1299_event_exec+0x94>)
 800dd52:	781b      	ldrb	r3, [r3, #0]
 800dd54:	461a      	mov	r2, r3
 800dd56:	4613      	mov	r3, r2
 800dd58:	011b      	lsls	r3, r3, #4
 800dd5a:	1a9b      	subs	r3, r3, r2
 800dd5c:	011b      	lsls	r3, r3, #4
 800dd5e:	4413      	add	r3, r2
 800dd60:	4a1e      	ldr	r2, [pc, #120]	@ (800dddc <APP_BLE_Manage_ADS1299_event_exec+0x9c>)
 800dd62:	4413      	add	r3, r2
 800dd64:	21f1      	movs	r1, #241	@ 0xf1
 800dd66:	4618      	mov	r0, r3
 800dd68:	f7ff fa0e 	bl	800d188 <APP_BLE_Send_EEGData_Notification>
 800dd6c:	4603      	mov	r3, r0
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d018      	beq.n	800dda4 <APP_BLE_Manage_ADS1299_event_exec+0x64>
			HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_SET);
 800dd72:	2201      	movs	r2, #1
 800dd74:	2101      	movs	r1, #1
 800dd76:	481a      	ldr	r0, [pc, #104]	@ (800dde0 <APP_BLE_Manage_ADS1299_event_exec+0xa0>)
 800dd78:	f7f6 fa96 	bl	80042a8 <HAL_GPIO_WritePin>
			UTIL_SEQ_SetTask( 1<<CFG_TASK_ADS_SAMPLE_ID, CFG_SCH_PRIO_0);
 800dd7c:	2100      	movs	r1, #0
 800dd7e:	2040      	movs	r0, #64	@ 0x40
 800dd80:	f000 fbec 	bl	800e55c <UTIL_SEQ_SetTask>
			error_count++;
 800dd84:	4b17      	ldr	r3, [pc, #92]	@ (800dde4 <APP_BLE_Manage_ADS1299_event_exec+0xa4>)
 800dd86:	781b      	ldrb	r3, [r3, #0]
 800dd88:	3301      	adds	r3, #1
 800dd8a:	b2da      	uxtb	r2, r3
 800dd8c:	4b15      	ldr	r3, [pc, #84]	@ (800dde4 <APP_BLE_Manage_ADS1299_event_exec+0xa4>)
 800dd8e:	701a      	strb	r2, [r3, #0]

			if(error_count>2){
 800dd90:	4b14      	ldr	r3, [pc, #80]	@ (800dde4 <APP_BLE_Manage_ADS1299_event_exec+0xa4>)
 800dd92:	781b      	ldrb	r3, [r3, #0]
 800dd94:	2b02      	cmp	r3, #2
 800dd96:	d91b      	bls.n	800ddd0 <APP_BLE_Manage_ADS1299_event_exec+0x90>
				HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_SET);
 800dd98:	2201      	movs	r2, #1
 800dd9a:	2101      	movs	r1, #1
 800dd9c:	4810      	ldr	r0, [pc, #64]	@ (800dde0 <APP_BLE_Manage_ADS1299_event_exec+0xa0>)
 800dd9e:	f7f6 fa83 	bl	80042a8 <HAL_GPIO_WritePin>
			}
			return;
 800dda2:	e015      	b.n	800ddd0 <APP_BLE_Manage_ADS1299_event_exec+0x90>
		}else{
			error_count = 0;
 800dda4:	4b0f      	ldr	r3, [pc, #60]	@ (800dde4 <APP_BLE_Manage_ADS1299_event_exec+0xa4>)
 800dda6:	2200      	movs	r2, #0
 800dda8:	701a      	strb	r2, [r3, #0]
		}

	    read_index = (read_index + 1) % PACKETBUFFER_DEPTH;
 800ddaa:	4b0a      	ldr	r3, [pc, #40]	@ (800ddd4 <APP_BLE_Manage_ADS1299_event_exec+0x94>)
 800ddac:	781b      	ldrb	r3, [r3, #0]
 800ddae:	1c5a      	adds	r2, r3, #1
 800ddb0:	4b0d      	ldr	r3, [pc, #52]	@ (800dde8 <APP_BLE_Manage_ADS1299_event_exec+0xa8>)
 800ddb2:	fb83 1302 	smull	r1, r3, r3, r2
 800ddb6:	4413      	add	r3, r2
 800ddb8:	1119      	asrs	r1, r3, #4
 800ddba:	17d3      	asrs	r3, r2, #31
 800ddbc:	1ac9      	subs	r1, r1, r3
 800ddbe:	460b      	mov	r3, r1
 800ddc0:	011b      	lsls	r3, r3, #4
 800ddc2:	1a5b      	subs	r3, r3, r1
 800ddc4:	005b      	lsls	r3, r3, #1
 800ddc6:	1ad1      	subs	r1, r2, r3
 800ddc8:	b2ca      	uxtb	r2, r1
 800ddca:	4b02      	ldr	r3, [pc, #8]	@ (800ddd4 <APP_BLE_Manage_ADS1299_event_exec+0x94>)
 800ddcc:	701a      	strb	r2, [r3, #0]
 800ddce:	e000      	b.n	800ddd2 <APP_BLE_Manage_ADS1299_event_exec+0x92>
			return;
 800ddd0:	bf00      	nop
	}


}
 800ddd2:	bd80      	pop	{r7, pc}
 800ddd4:	200021bb 	.word	0x200021bb
 800ddd8:	200021ba 	.word	0x200021ba
 800dddc:	2000057c 	.word	0x2000057c
 800dde0:	48000400 	.word	0x48000400
 800dde4:	200021e4 	.word	0x200021e4
 800dde8:	88888889 	.word	0x88888889

0800ddec <is_connected>:



uint8_t is_connected(void){
 800ddec:	b480      	push	{r7}
 800ddee:	af00      	add	r7, sp, #0
	return P2P_Server_App_Context.Notification_Status == 1;
 800ddf0:	4b05      	ldr	r3, [pc, #20]	@ (800de08 <is_connected+0x1c>)
 800ddf2:	781b      	ldrb	r3, [r3, #0]
 800ddf4:	2b01      	cmp	r3, #1
 800ddf6:	bf0c      	ite	eq
 800ddf8:	2301      	moveq	r3, #1
 800ddfa:	2300      	movne	r3, #0
 800ddfc:	b2db      	uxtb	r3, r3
}
 800ddfe:	4618      	mov	r0, r3
 800de00:	46bd      	mov	sp, r7
 800de02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de06:	4770      	bx	lr
 800de08:	200021dc 	.word	0x200021dc

0800de0c <LL_PWR_EnableBootC2>:
{
 800de0c:	b480      	push	{r7}
 800de0e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800de10:	4b05      	ldr	r3, [pc, #20]	@ (800de28 <LL_PWR_EnableBootC2+0x1c>)
 800de12:	68db      	ldr	r3, [r3, #12]
 800de14:	4a04      	ldr	r2, [pc, #16]	@ (800de28 <LL_PWR_EnableBootC2+0x1c>)
 800de16:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800de1a:	60d3      	str	r3, [r2, #12]
}
 800de1c:	bf00      	nop
 800de1e:	46bd      	mov	sp, r7
 800de20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de24:	4770      	bx	lr
 800de26:	bf00      	nop
 800de28:	58000400 	.word	0x58000400

0800de2c <LL_C2_EXTI_EnableEvent_32_63>:
{
 800de2c:	b480      	push	{r7}
 800de2e:	b083      	sub	sp, #12
 800de30:	af00      	add	r7, sp, #0
 800de32:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 800de34:	4b06      	ldr	r3, [pc, #24]	@ (800de50 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800de36:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 800de3a:	4905      	ldr	r1, [pc, #20]	@ (800de50 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	4313      	orrs	r3, r2
 800de40:	f8c1 30d4 	str.w	r3, [r1, #212]	@ 0xd4
}
 800de44:	bf00      	nop
 800de46:	370c      	adds	r7, #12
 800de48:	46bd      	mov	sp, r7
 800de4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de4e:	4770      	bx	lr
 800de50:	58000800 	.word	0x58000800

0800de54 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 800de54:	b480      	push	{r7}
 800de56:	b083      	sub	sp, #12
 800de58:	af00      	add	r7, sp, #0
 800de5a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800de5c:	4b05      	ldr	r3, [pc, #20]	@ (800de74 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800de5e:	6a1a      	ldr	r2, [r3, #32]
 800de60:	4904      	ldr	r1, [pc, #16]	@ (800de74 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	4313      	orrs	r3, r2
 800de66:	620b      	str	r3, [r1, #32]
}
 800de68:	bf00      	nop
 800de6a:	370c      	adds	r7, #12
 800de6c:	46bd      	mov	sp, r7
 800de6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de72:	4770      	bx	lr
 800de74:	58000800 	.word	0x58000800

0800de78 <LL_AHB3_GRP1_EnableClock>:
{
 800de78:	b480      	push	{r7}
 800de7a:	b085      	sub	sp, #20
 800de7c:	af00      	add	r7, sp, #0
 800de7e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800de80:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800de84:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800de86:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	4313      	orrs	r3, r2
 800de8e:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800de90:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800de94:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	4013      	ands	r3, r2
 800de9a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800de9c:	68fb      	ldr	r3, [r7, #12]
}
 800de9e:	bf00      	nop
 800dea0:	3714      	adds	r7, #20
 800dea2:	46bd      	mov	sp, r7
 800dea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dea8:	4770      	bx	lr

0800deaa <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800deaa:	b480      	push	{r7}
 800deac:	b085      	sub	sp, #20
 800deae:	af00      	add	r7, sp, #0
 800deb0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 800deb2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800deb6:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 800deba:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	4313      	orrs	r3, r2
 800dec2:	f8c1 3150 	str.w	r3, [r1, #336]	@ 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 800dec6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800deca:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	4013      	ands	r3, r2
 800ded2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800ded4:	68fb      	ldr	r3, [r7, #12]
}
 800ded6:	bf00      	nop
 800ded8:	3714      	adds	r7, #20
 800deda:	46bd      	mov	sp, r7
 800dedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dee0:	4770      	bx	lr

0800dee2 <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 800dee2:	b480      	push	{r7}
 800dee4:	b083      	sub	sp, #12
 800dee6:	af00      	add	r7, sp, #0
 800dee8:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	601a      	str	r2, [r3, #0]
}
 800def6:	bf00      	nop
 800def8:	370c      	adds	r7, #12
 800defa:	46bd      	mov	sp, r7
 800defc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df00:	4770      	bx	lr

0800df02 <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 800df02:	b480      	push	{r7}
 800df04:	b083      	sub	sp, #12
 800df06:	af00      	add	r7, sp, #0
 800df08:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	f043 0201 	orr.w	r2, r3, #1
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	601a      	str	r2, [r3, #0]
}
 800df16:	bf00      	nop
 800df18:	370c      	adds	r7, #12
 800df1a:	46bd      	mov	sp, r7
 800df1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df20:	4770      	bx	lr

0800df22 <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800df22:	b480      	push	{r7}
 800df24:	b083      	sub	sp, #12
 800df26:	af00      	add	r7, sp, #0
 800df28:	6078      	str	r0, [r7, #4]
 800df2a:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	685a      	ldr	r2, [r3, #4]
 800df30:	683b      	ldr	r3, [r7, #0]
 800df32:	041b      	lsls	r3, r3, #16
 800df34:	43db      	mvns	r3, r3
 800df36:	401a      	ands	r2, r3
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	605a      	str	r2, [r3, #4]
}
 800df3c:	bf00      	nop
 800df3e:	370c      	adds	r7, #12
 800df40:	46bd      	mov	sp, r7
 800df42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df46:	4770      	bx	lr

0800df48 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800df48:	b480      	push	{r7}
 800df4a:	b083      	sub	sp, #12
 800df4c:	af00      	add	r7, sp, #0
 800df4e:	6078      	str	r0, [r7, #4]
 800df50:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	685a      	ldr	r2, [r3, #4]
 800df56:	683b      	ldr	r3, [r7, #0]
 800df58:	041b      	lsls	r3, r3, #16
 800df5a:	431a      	orrs	r2, r3
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	605a      	str	r2, [r3, #4]
}
 800df60:	bf00      	nop
 800df62:	370c      	adds	r7, #12
 800df64:	46bd      	mov	sp, r7
 800df66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df6a:	4770      	bx	lr

0800df6c <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800df6c:	b480      	push	{r7}
 800df6e:	b083      	sub	sp, #12
 800df70:	af00      	add	r7, sp, #0
 800df72:	6078      	str	r0, [r7, #4]
 800df74:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	685a      	ldr	r2, [r3, #4]
 800df7a:	683b      	ldr	r3, [r7, #0]
 800df7c:	43db      	mvns	r3, r3
 800df7e:	401a      	ands	r2, r3
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	605a      	str	r2, [r3, #4]
}
 800df84:	bf00      	nop
 800df86:	370c      	adds	r7, #12
 800df88:	46bd      	mov	sp, r7
 800df8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df8e:	4770      	bx	lr

0800df90 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800df90:	b480      	push	{r7}
 800df92:	b083      	sub	sp, #12
 800df94:	af00      	add	r7, sp, #0
 800df96:	6078      	str	r0, [r7, #4]
 800df98:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	683a      	ldr	r2, [r7, #0]
 800df9e:	609a      	str	r2, [r3, #8]
}
 800dfa0:	bf00      	nop
 800dfa2:	370c      	adds	r7, #12
 800dfa4:	46bd      	mov	sp, r7
 800dfa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfaa:	4770      	bx	lr

0800dfac <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800dfac:	b480      	push	{r7}
 800dfae:	b083      	sub	sp, #12
 800dfb0:	af00      	add	r7, sp, #0
 800dfb2:	6078      	str	r0, [r7, #4]
 800dfb4:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800dfb6:	683b      	ldr	r3, [r7, #0]
 800dfb8:	041a      	lsls	r2, r3, #16
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	609a      	str	r2, [r3, #8]
}
 800dfbe:	bf00      	nop
 800dfc0:	370c      	adds	r7, #12
 800dfc2:	46bd      	mov	sp, r7
 800dfc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfc8:	4770      	bx	lr

0800dfca <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800dfca:	b480      	push	{r7}
 800dfcc:	b083      	sub	sp, #12
 800dfce:	af00      	add	r7, sp, #0
 800dfd0:	6078      	str	r0, [r7, #4]
 800dfd2:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	68da      	ldr	r2, [r3, #12]
 800dfd8:	683b      	ldr	r3, [r7, #0]
 800dfda:	4013      	ands	r3, r2
 800dfdc:	683a      	ldr	r2, [r7, #0]
 800dfde:	429a      	cmp	r2, r3
 800dfe0:	d101      	bne.n	800dfe6 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800dfe2:	2301      	movs	r3, #1
 800dfe4:	e000      	b.n	800dfe8 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800dfe6:	2300      	movs	r3, #0
}
 800dfe8:	4618      	mov	r0, r3
 800dfea:	370c      	adds	r7, #12
 800dfec:	46bd      	mov	sp, r7
 800dfee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dff2:	4770      	bx	lr

0800dff4 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800dff4:	b480      	push	{r7}
 800dff6:	b083      	sub	sp, #12
 800dff8:	af00      	add	r7, sp, #0
 800dffa:	6078      	str	r0, [r7, #4]
 800dffc:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	69da      	ldr	r2, [r3, #28]
 800e002:	683b      	ldr	r3, [r7, #0]
 800e004:	4013      	ands	r3, r2
 800e006:	683a      	ldr	r2, [r7, #0]
 800e008:	429a      	cmp	r2, r3
 800e00a:	d101      	bne.n	800e010 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 800e00c:	2301      	movs	r3, #1
 800e00e:	e000      	b.n	800e012 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 800e010:	2300      	movs	r3, #0
}
 800e012:	4618      	mov	r0, r3
 800e014:	370c      	adds	r7, #12
 800e016:	46bd      	mov	sp, r7
 800e018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e01c:	4770      	bx	lr
	...

0800e020 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 800e020:	b580      	push	{r7, lr}
 800e022:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 800e024:	2102      	movs	r1, #2
 800e026:	4818      	ldr	r0, [pc, #96]	@ (800e088 <HW_IPCC_Rx_Handler+0x68>)
 800e028:	f7ff ffe4 	bl	800dff4 <LL_C2_IPCC_IsActiveFlag_CHx>
 800e02c:	4603      	mov	r3, r0
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d008      	beq.n	800e044 <HW_IPCC_Rx_Handler+0x24>
 800e032:	4b15      	ldr	r3, [pc, #84]	@ (800e088 <HW_IPCC_Rx_Handler+0x68>)
 800e034:	685b      	ldr	r3, [r3, #4]
 800e036:	f003 0302 	and.w	r3, r3, #2
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d102      	bne.n	800e044 <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 800e03e:	f000 f8d5 	bl	800e1ec <HW_IPCC_SYS_EvtHandler>
 800e042:	e01e      	b.n	800e082 <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800e044:	2101      	movs	r1, #1
 800e046:	4810      	ldr	r0, [pc, #64]	@ (800e088 <HW_IPCC_Rx_Handler+0x68>)
 800e048:	f7ff ffd4 	bl	800dff4 <LL_C2_IPCC_IsActiveFlag_CHx>
 800e04c:	4603      	mov	r3, r0
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d008      	beq.n	800e064 <HW_IPCC_Rx_Handler+0x44>
 800e052:	4b0d      	ldr	r3, [pc, #52]	@ (800e088 <HW_IPCC_Rx_Handler+0x68>)
 800e054:	685b      	ldr	r3, [r3, #4]
 800e056:	f003 0301 	and.w	r3, r3, #1
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d102      	bne.n	800e064 <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 800e05e:	f000 f889 	bl	800e174 <HW_IPCC_BLE_EvtHandler>
 800e062:	e00e      	b.n	800e082 <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 800e064:	2108      	movs	r1, #8
 800e066:	4808      	ldr	r0, [pc, #32]	@ (800e088 <HW_IPCC_Rx_Handler+0x68>)
 800e068:	f7ff ffc4 	bl	800dff4 <LL_C2_IPCC_IsActiveFlag_CHx>
 800e06c:	4603      	mov	r3, r0
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d008      	beq.n	800e084 <HW_IPCC_Rx_Handler+0x64>
 800e072:	4b05      	ldr	r3, [pc, #20]	@ (800e088 <HW_IPCC_Rx_Handler+0x68>)
 800e074:	685b      	ldr	r3, [r3, #4]
 800e076:	f003 0308 	and.w	r3, r3, #8
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d102      	bne.n	800e084 <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 800e07e:	f000 f901 	bl	800e284 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 800e082:	bf00      	nop
 800e084:	bf00      	nop
}
 800e086:	bd80      	pop	{r7, pc}
 800e088:	58000c00 	.word	0x58000c00

0800e08c <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 800e08c:	b580      	push	{r7, lr}
 800e08e:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800e090:	2102      	movs	r1, #2
 800e092:	4818      	ldr	r0, [pc, #96]	@ (800e0f4 <HW_IPCC_Tx_Handler+0x68>)
 800e094:	f7ff ff99 	bl	800dfca <LL_C1_IPCC_IsActiveFlag_CHx>
 800e098:	4603      	mov	r3, r0
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d108      	bne.n	800e0b0 <HW_IPCC_Tx_Handler+0x24>
 800e09e:	4b15      	ldr	r3, [pc, #84]	@ (800e0f4 <HW_IPCC_Tx_Handler+0x68>)
 800e0a0:	685b      	ldr	r3, [r3, #4]
 800e0a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d102      	bne.n	800e0b0 <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800e0aa:	f000 f893 	bl	800e1d4 <HW_IPCC_SYS_CmdEvtHandler>
 800e0ae:	e01e      	b.n	800e0ee <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800e0b0:	2108      	movs	r1, #8
 800e0b2:	4810      	ldr	r0, [pc, #64]	@ (800e0f4 <HW_IPCC_Tx_Handler+0x68>)
 800e0b4:	f7ff ff89 	bl	800dfca <LL_C1_IPCC_IsActiveFlag_CHx>
 800e0b8:	4603      	mov	r3, r0
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d108      	bne.n	800e0d0 <HW_IPCC_Tx_Handler+0x44>
 800e0be:	4b0d      	ldr	r3, [pc, #52]	@ (800e0f4 <HW_IPCC_Tx_Handler+0x68>)
 800e0c0:	685b      	ldr	r3, [r3, #4]
 800e0c2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d102      	bne.n	800e0d0 <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 800e0ca:	f000 f8bd 	bl	800e248 <HW_IPCC_MM_FreeBufHandler>
 800e0ce:	e00e      	b.n	800e0ee <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800e0d0:	2120      	movs	r1, #32
 800e0d2:	4808      	ldr	r0, [pc, #32]	@ (800e0f4 <HW_IPCC_Tx_Handler+0x68>)
 800e0d4:	f7ff ff79 	bl	800dfca <LL_C1_IPCC_IsActiveFlag_CHx>
 800e0d8:	4603      	mov	r3, r0
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d108      	bne.n	800e0f0 <HW_IPCC_Tx_Handler+0x64>
 800e0de:	4b05      	ldr	r3, [pc, #20]	@ (800e0f4 <HW_IPCC_Tx_Handler+0x68>)
 800e0e0:	685b      	ldr	r3, [r3, #4]
 800e0e2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d102      	bne.n	800e0f0 <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 800e0ea:	f000 f84f 	bl	800e18c <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800e0ee:	bf00      	nop
 800e0f0:	bf00      	nop
}
 800e0f2:	bd80      	pop	{r7, pc}
 800e0f4:	58000c00 	.word	0x58000c00

0800e0f8 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 800e0f8:	b580      	push	{r7, lr}
 800e0fa:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 800e0fc:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800e100:	f7ff fed3 	bl	800deaa <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 800e104:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800e108:	f7ff fea4 	bl	800de54 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 800e10c:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800e110:	f7ff fe8c 	bl	800de2c <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 800e114:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800e116:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 800e118:	f7ff fe78 	bl	800de0c <LL_PWR_EnableBootC2>

  return;
 800e11c:	bf00      	nop
}
 800e11e:	bd80      	pop	{r7, pc}

0800e120 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 800e120:	b580      	push	{r7, lr}
 800e122:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 800e124:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800e128:	f7ff fea6 	bl	800de78 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 800e12c:	4806      	ldr	r0, [pc, #24]	@ (800e148 <HW_IPCC_Init+0x28>)
 800e12e:	f7ff fee8 	bl	800df02 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800e132:	4805      	ldr	r0, [pc, #20]	@ (800e148 <HW_IPCC_Init+0x28>)
 800e134:	f7ff fed5 	bl	800dee2 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800e138:	202c      	movs	r0, #44	@ 0x2c
 800e13a:	f7f5 fbce 	bl	80038da <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800e13e:	202d      	movs	r0, #45	@ 0x2d
 800e140:	f7f5 fbcb 	bl	80038da <HAL_NVIC_EnableIRQ>

  return;
 800e144:	bf00      	nop
}
 800e146:	bd80      	pop	{r7, pc}
 800e148:	58000c00 	.word	0x58000c00

0800e14c <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 800e14c:	b580      	push	{r7, lr}
 800e14e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800e150:	2101      	movs	r1, #1
 800e152:	4802      	ldr	r0, [pc, #8]	@ (800e15c <HW_IPCC_BLE_Init+0x10>)
 800e154:	f7ff ff0a 	bl	800df6c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800e158:	bf00      	nop
}
 800e15a:	bd80      	pop	{r7, pc}
 800e15c:	58000c00 	.word	0x58000c00

0800e160 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 800e160:	b580      	push	{r7, lr}
 800e162:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 800e164:	2101      	movs	r1, #1
 800e166:	4802      	ldr	r0, [pc, #8]	@ (800e170 <HW_IPCC_BLE_SendCmd+0x10>)
 800e168:	f7ff ff20 	bl	800dfac <LL_C1_IPCC_SetFlag_CHx>

  return;
 800e16c:	bf00      	nop
}
 800e16e:	bd80      	pop	{r7, pc}
 800e170:	58000c00 	.word	0x58000c00

0800e174 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 800e174:	b580      	push	{r7, lr}
 800e176:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 800e178:	f7fd fab4 	bl	800b6e4 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800e17c:	2101      	movs	r1, #1
 800e17e:	4802      	ldr	r0, [pc, #8]	@ (800e188 <HW_IPCC_BLE_EvtHandler+0x14>)
 800e180:	f7ff ff06 	bl	800df90 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800e184:	bf00      	nop
}
 800e186:	bd80      	pop	{r7, pc}
 800e188:	58000c00 	.word	0x58000c00

0800e18c <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 800e18c:	b580      	push	{r7, lr}
 800e18e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 800e190:	2120      	movs	r1, #32
 800e192:	4803      	ldr	r0, [pc, #12]	@ (800e1a0 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 800e194:	f7ff fed8 	bl	800df48 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 800e198:	f7fd fad4 	bl	800b744 <HW_IPCC_BLE_AclDataAckNot>

  return;
 800e19c:	bf00      	nop
}
 800e19e:	bd80      	pop	{r7, pc}
 800e1a0:	58000c00 	.word	0x58000c00

0800e1a4 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 800e1a4:	b580      	push	{r7, lr}
 800e1a6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800e1a8:	2102      	movs	r1, #2
 800e1aa:	4802      	ldr	r0, [pc, #8]	@ (800e1b4 <HW_IPCC_SYS_Init+0x10>)
 800e1ac:	f7ff fede 	bl	800df6c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800e1b0:	bf00      	nop
}
 800e1b2:	bd80      	pop	{r7, pc}
 800e1b4:	58000c00 	.word	0x58000c00

0800e1b8 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 800e1b8:	b580      	push	{r7, lr}
 800e1ba:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800e1bc:	2102      	movs	r1, #2
 800e1be:	4804      	ldr	r0, [pc, #16]	@ (800e1d0 <HW_IPCC_SYS_SendCmd+0x18>)
 800e1c0:	f7ff fef4 	bl	800dfac <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800e1c4:	2102      	movs	r1, #2
 800e1c6:	4802      	ldr	r0, [pc, #8]	@ (800e1d0 <HW_IPCC_SYS_SendCmd+0x18>)
 800e1c8:	f7ff feab 	bl	800df22 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 800e1cc:	bf00      	nop
}
 800e1ce:	bd80      	pop	{r7, pc}
 800e1d0:	58000c00 	.word	0x58000c00

0800e1d4 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 800e1d4:	b580      	push	{r7, lr}
 800e1d6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800e1d8:	2102      	movs	r1, #2
 800e1da:	4803      	ldr	r0, [pc, #12]	@ (800e1e8 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 800e1dc:	f7ff feb4 	bl	800df48 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 800e1e0:	f7fd fb00 	bl	800b7e4 <HW_IPCC_SYS_CmdEvtNot>

  return;
 800e1e4:	bf00      	nop
}
 800e1e6:	bd80      	pop	{r7, pc}
 800e1e8:	58000c00 	.word	0x58000c00

0800e1ec <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 800e1ec:	b580      	push	{r7, lr}
 800e1ee:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 800e1f0:	f7fd fb0e 	bl	800b810 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800e1f4:	2102      	movs	r1, #2
 800e1f6:	4802      	ldr	r0, [pc, #8]	@ (800e200 <HW_IPCC_SYS_EvtHandler+0x14>)
 800e1f8:	f7ff feca 	bl	800df90 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800e1fc:	bf00      	nop
}
 800e1fe:	bd80      	pop	{r7, pc}
 800e200:	58000c00 	.word	0x58000c00

0800e204 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 800e204:	b580      	push	{r7, lr}
 800e206:	b082      	sub	sp, #8
 800e208:	af00      	add	r7, sp, #0
 800e20a:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 800e20c:	2108      	movs	r1, #8
 800e20e:	480c      	ldr	r0, [pc, #48]	@ (800e240 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800e210:	f7ff fedb 	bl	800dfca <LL_C1_IPCC_IsActiveFlag_CHx>
 800e214:	4603      	mov	r3, r0
 800e216:	2b00      	cmp	r3, #0
 800e218:	d007      	beq.n	800e22a <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 800e21a:	4a0a      	ldr	r2, [pc, #40]	@ (800e244 <HW_IPCC_MM_SendFreeBuf+0x40>)
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800e220:	2108      	movs	r1, #8
 800e222:	4807      	ldr	r0, [pc, #28]	@ (800e240 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800e224:	f7ff fe7d 	bl	800df22 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 800e228:	e006      	b.n	800e238 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800e22e:	2108      	movs	r1, #8
 800e230:	4803      	ldr	r0, [pc, #12]	@ (800e240 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800e232:	f7ff febb 	bl	800dfac <LL_C1_IPCC_SetFlag_CHx>
  return;
 800e236:	bf00      	nop
}
 800e238:	3708      	adds	r7, #8
 800e23a:	46bd      	mov	sp, r7
 800e23c:	bd80      	pop	{r7, pc}
 800e23e:	bf00      	nop
 800e240:	58000c00 	.word	0x58000c00
 800e244:	200021e8 	.word	0x200021e8

0800e248 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 800e248:	b580      	push	{r7, lr}
 800e24a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800e24c:	2108      	movs	r1, #8
 800e24e:	4806      	ldr	r0, [pc, #24]	@ (800e268 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800e250:	f7ff fe7a 	bl	800df48 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 800e254:	4b05      	ldr	r3, [pc, #20]	@ (800e26c <HW_IPCC_MM_FreeBufHandler+0x24>)
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800e25a:	2108      	movs	r1, #8
 800e25c:	4802      	ldr	r0, [pc, #8]	@ (800e268 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800e25e:	f7ff fea5 	bl	800dfac <LL_C1_IPCC_SetFlag_CHx>

  return;
 800e262:	bf00      	nop
}
 800e264:	bd80      	pop	{r7, pc}
 800e266:	bf00      	nop
 800e268:	58000c00 	.word	0x58000c00
 800e26c:	200021e8 	.word	0x200021e8

0800e270 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 800e270:	b580      	push	{r7, lr}
 800e272:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 800e274:	2108      	movs	r1, #8
 800e276:	4802      	ldr	r0, [pc, #8]	@ (800e280 <HW_IPCC_TRACES_Init+0x10>)
 800e278:	f7ff fe78 	bl	800df6c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800e27c:	bf00      	nop
}
 800e27e:	bd80      	pop	{r7, pc}
 800e280:	58000c00 	.word	0x58000c00

0800e284 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 800e284:	b580      	push	{r7, lr}
 800e286:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 800e288:	f7fd fb6a 	bl	800b960 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 800e28c:	2108      	movs	r1, #8
 800e28e:	4802      	ldr	r0, [pc, #8]	@ (800e298 <HW_IPCC_TRACES_EvtHandler+0x14>)
 800e290:	f7ff fe7e 	bl	800df90 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800e294:	bf00      	nop
}
 800e296:	bd80      	pop	{r7, pc}
 800e298:	58000c00 	.word	0x58000c00

0800e29c <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800e29c:	b480      	push	{r7}
 800e29e:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800e2a0:	4b05      	ldr	r3, [pc, #20]	@ (800e2b8 <UTIL_LPM_Init+0x1c>)
 800e2a2:	2200      	movs	r2, #0
 800e2a4:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800e2a6:	4b05      	ldr	r3, [pc, #20]	@ (800e2bc <UTIL_LPM_Init+0x20>)
 800e2a8:	2200      	movs	r2, #0
 800e2aa:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800e2ac:	bf00      	nop
 800e2ae:	46bd      	mov	sp, r7
 800e2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2b4:	4770      	bx	lr
 800e2b6:	bf00      	nop
 800e2b8:	200021ec 	.word	0x200021ec
 800e2bc:	200021f0 	.word	0x200021f0

0800e2c0 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800e2c0:	b480      	push	{r7}
 800e2c2:	b087      	sub	sp, #28
 800e2c4:	af00      	add	r7, sp, #0
 800e2c6:	6078      	str	r0, [r7, #4]
 800e2c8:	460b      	mov	r3, r1
 800e2ca:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e2cc:	f3ef 8310 	mrs	r3, PRIMASK
 800e2d0:	613b      	str	r3, [r7, #16]
  return(result);
 800e2d2:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800e2d4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800e2d6:	b672      	cpsid	i
}
 800e2d8:	bf00      	nop
  
  switch(state)
 800e2da:	78fb      	ldrb	r3, [r7, #3]
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d008      	beq.n	800e2f2 <UTIL_LPM_SetOffMode+0x32>
 800e2e0:	2b01      	cmp	r3, #1
 800e2e2:	d10e      	bne.n	800e302 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800e2e4:	4b0d      	ldr	r3, [pc, #52]	@ (800e31c <UTIL_LPM_SetOffMode+0x5c>)
 800e2e6:	681a      	ldr	r2, [r3, #0]
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	4313      	orrs	r3, r2
 800e2ec:	4a0b      	ldr	r2, [pc, #44]	@ (800e31c <UTIL_LPM_SetOffMode+0x5c>)
 800e2ee:	6013      	str	r3, [r2, #0]
      break;
 800e2f0:	e008      	b.n	800e304 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	43da      	mvns	r2, r3
 800e2f6:	4b09      	ldr	r3, [pc, #36]	@ (800e31c <UTIL_LPM_SetOffMode+0x5c>)
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	4013      	ands	r3, r2
 800e2fc:	4a07      	ldr	r2, [pc, #28]	@ (800e31c <UTIL_LPM_SetOffMode+0x5c>)
 800e2fe:	6013      	str	r3, [r2, #0]
      break;
 800e300:	e000      	b.n	800e304 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800e302:	bf00      	nop
 800e304:	697b      	ldr	r3, [r7, #20]
 800e306:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	f383 8810 	msr	PRIMASK, r3
}
 800e30e:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800e310:	bf00      	nop
 800e312:	371c      	adds	r7, #28
 800e314:	46bd      	mov	sp, r7
 800e316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e31a:	4770      	bx	lr
 800e31c:	200021f0 	.word	0x200021f0

0800e320 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800e320:	b580      	push	{r7, lr}
 800e322:	b090      	sub	sp, #64	@ 0x40
 800e324:	af00      	add	r7, sp, #0
 800e326:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800e328:	4b73      	ldr	r3, [pc, #460]	@ (800e4f8 <UTIL_SEQ_Run+0x1d8>)
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 800e32e:	4b72      	ldr	r3, [pc, #456]	@ (800e4f8 <UTIL_SEQ_Run+0x1d8>)
 800e330:	681a      	ldr	r2, [r3, #0]
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	4013      	ands	r3, r2
 800e336:	4a70      	ldr	r2, [pc, #448]	@ (800e4f8 <UTIL_SEQ_Run+0x1d8>)
 800e338:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800e33a:	4b70      	ldr	r3, [pc, #448]	@ (800e4fc <UTIL_SEQ_Run+0x1dc>)
 800e33c:	681b      	ldr	r3, [r3, #0]
 800e33e:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 800e340:	4b6f      	ldr	r3, [pc, #444]	@ (800e500 <UTIL_SEQ_Run+0x1e0>)
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 800e346:	4b6f      	ldr	r3, [pc, #444]	@ (800e504 <UTIL_SEQ_Run+0x1e4>)
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 800e34c:	4b6e      	ldr	r3, [pc, #440]	@ (800e508 <UTIL_SEQ_Run+0x1e8>)
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800e352:	e08d      	b.n	800e470 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 800e354:	2300      	movs	r3, #0
 800e356:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800e358:	e002      	b.n	800e360 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 800e35a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e35c:	3301      	adds	r3, #1
 800e35e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800e360:	4a6a      	ldr	r2, [pc, #424]	@ (800e50c <UTIL_SEQ_Run+0x1ec>)
 800e362:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e364:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800e368:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e36a:	401a      	ands	r2, r3
 800e36c:	4b62      	ldr	r3, [pc, #392]	@ (800e4f8 <UTIL_SEQ_Run+0x1d8>)
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	4013      	ands	r3, r2
 800e372:	2b00      	cmp	r3, #0
 800e374:	d0f1      	beq.n	800e35a <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800e376:	4a65      	ldr	r2, [pc, #404]	@ (800e50c <UTIL_SEQ_Run+0x1ec>)
 800e378:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e37a:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800e37e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e380:	401a      	ands	r2, r3
 800e382:	4b5d      	ldr	r3, [pc, #372]	@ (800e4f8 <UTIL_SEQ_Run+0x1d8>)
 800e384:	681b      	ldr	r3, [r3, #0]
 800e386:	4013      	ands	r3, r2
 800e388:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800e38a:	4a60      	ldr	r2, [pc, #384]	@ (800e50c <UTIL_SEQ_Run+0x1ec>)
 800e38c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e38e:	00db      	lsls	r3, r3, #3
 800e390:	4413      	add	r3, r2
 800e392:	685a      	ldr	r2, [r3, #4]
 800e394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e396:	4013      	ands	r3, r2
 800e398:	2b00      	cmp	r3, #0
 800e39a:	d106      	bne.n	800e3aa <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800e39c:	4a5b      	ldr	r2, [pc, #364]	@ (800e50c <UTIL_SEQ_Run+0x1ec>)
 800e39e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e3a0:	00db      	lsls	r3, r3, #3
 800e3a2:	4413      	add	r3, r2
 800e3a4:	f04f 32ff 	mov.w	r2, #4294967295
 800e3a8:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800e3aa:	4a58      	ldr	r2, [pc, #352]	@ (800e50c <UTIL_SEQ_Run+0x1ec>)
 800e3ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e3ae:	00db      	lsls	r3, r3, #3
 800e3b0:	4413      	add	r3, r2
 800e3b2:	685a      	ldr	r2, [r3, #4]
 800e3b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3b6:	4013      	ands	r3, r2
 800e3b8:	4618      	mov	r0, r3
 800e3ba:	f000 f9b3 	bl	800e724 <SEQ_BitPosition>
 800e3be:	4603      	mov	r3, r0
 800e3c0:	461a      	mov	r2, r3
 800e3c2:	4b53      	ldr	r3, [pc, #332]	@ (800e510 <UTIL_SEQ_Run+0x1f0>)
 800e3c4:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800e3c6:	4a51      	ldr	r2, [pc, #324]	@ (800e50c <UTIL_SEQ_Run+0x1ec>)
 800e3c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e3ca:	00db      	lsls	r3, r3, #3
 800e3cc:	4413      	add	r3, r2
 800e3ce:	685a      	ldr	r2, [r3, #4]
 800e3d0:	4b4f      	ldr	r3, [pc, #316]	@ (800e510 <UTIL_SEQ_Run+0x1f0>)
 800e3d2:	681b      	ldr	r3, [r3, #0]
 800e3d4:	2101      	movs	r1, #1
 800e3d6:	fa01 f303 	lsl.w	r3, r1, r3
 800e3da:	43db      	mvns	r3, r3
 800e3dc:	401a      	ands	r2, r3
 800e3de:	494b      	ldr	r1, [pc, #300]	@ (800e50c <UTIL_SEQ_Run+0x1ec>)
 800e3e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e3e2:	00db      	lsls	r3, r3, #3
 800e3e4:	440b      	add	r3, r1
 800e3e6:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e3e8:	f3ef 8310 	mrs	r3, PRIMASK
 800e3ec:	61bb      	str	r3, [r7, #24]
  return(result);
 800e3ee:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800e3f0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800e3f2:	b672      	cpsid	i
}
 800e3f4:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800e3f6:	4b46      	ldr	r3, [pc, #280]	@ (800e510 <UTIL_SEQ_Run+0x1f0>)
 800e3f8:	681b      	ldr	r3, [r3, #0]
 800e3fa:	2201      	movs	r2, #1
 800e3fc:	fa02 f303 	lsl.w	r3, r2, r3
 800e400:	43da      	mvns	r2, r3
 800e402:	4b3e      	ldr	r3, [pc, #248]	@ (800e4fc <UTIL_SEQ_Run+0x1dc>)
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	4013      	ands	r3, r2
 800e408:	4a3c      	ldr	r2, [pc, #240]	@ (800e4fc <UTIL_SEQ_Run+0x1dc>)
 800e40a:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800e40c:	2301      	movs	r3, #1
 800e40e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e410:	e013      	b.n	800e43a <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800e412:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e414:	3b01      	subs	r3, #1
 800e416:	4a3d      	ldr	r2, [pc, #244]	@ (800e50c <UTIL_SEQ_Run+0x1ec>)
 800e418:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800e41c:	4b3c      	ldr	r3, [pc, #240]	@ (800e510 <UTIL_SEQ_Run+0x1f0>)
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	2201      	movs	r2, #1
 800e422:	fa02 f303 	lsl.w	r3, r2, r3
 800e426:	43da      	mvns	r2, r3
 800e428:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e42a:	3b01      	subs	r3, #1
 800e42c:	400a      	ands	r2, r1
 800e42e:	4937      	ldr	r1, [pc, #220]	@ (800e50c <UTIL_SEQ_Run+0x1ec>)
 800e430:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800e434:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e436:	3b01      	subs	r3, #1
 800e438:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e43a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	d1e8      	bne.n	800e412 <UTIL_SEQ_Run+0xf2>
 800e440:	6a3b      	ldr	r3, [r7, #32]
 800e442:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e444:	697b      	ldr	r3, [r7, #20]
 800e446:	f383 8810 	msr	PRIMASK, r3
}
 800e44a:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800e44c:	4b30      	ldr	r3, [pc, #192]	@ (800e510 <UTIL_SEQ_Run+0x1f0>)
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	4a30      	ldr	r2, [pc, #192]	@ (800e514 <UTIL_SEQ_Run+0x1f4>)
 800e452:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e456:	4798      	blx	r3

    local_taskset = TaskSet;
 800e458:	4b28      	ldr	r3, [pc, #160]	@ (800e4fc <UTIL_SEQ_Run+0x1dc>)
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 800e45e:	4b28      	ldr	r3, [pc, #160]	@ (800e500 <UTIL_SEQ_Run+0x1e0>)
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 800e464:	4b27      	ldr	r3, [pc, #156]	@ (800e504 <UTIL_SEQ_Run+0x1e4>)
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 800e46a:	4b27      	ldr	r3, [pc, #156]	@ (800e508 <UTIL_SEQ_Run+0x1e8>)
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800e470:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e472:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e474:	401a      	ands	r2, r3
 800e476:	4b20      	ldr	r3, [pc, #128]	@ (800e4f8 <UTIL_SEQ_Run+0x1d8>)
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	4013      	ands	r3, r2
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d005      	beq.n	800e48c <UTIL_SEQ_Run+0x16c>
 800e480:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e482:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e484:	4013      	ands	r3, r2
 800e486:	2b00      	cmp	r3, #0
 800e488:	f43f af64 	beq.w	800e354 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800e48c:	4b20      	ldr	r3, [pc, #128]	@ (800e510 <UTIL_SEQ_Run+0x1f0>)
 800e48e:	f04f 32ff 	mov.w	r2, #4294967295
 800e492:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800e494:	f000 f938 	bl	800e708 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e498:	f3ef 8310 	mrs	r3, PRIMASK
 800e49c:	613b      	str	r3, [r7, #16]
  return(result);
 800e49e:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800e4a0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800e4a2:	b672      	cpsid	i
}
 800e4a4:	bf00      	nop
  local_taskset = TaskSet;
 800e4a6:	4b15      	ldr	r3, [pc, #84]	@ (800e4fc <UTIL_SEQ_Run+0x1dc>)
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 800e4ac:	4b14      	ldr	r3, [pc, #80]	@ (800e500 <UTIL_SEQ_Run+0x1e0>)
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 800e4b2:	4b14      	ldr	r3, [pc, #80]	@ (800e504 <UTIL_SEQ_Run+0x1e4>)
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800e4b8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e4ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4bc:	401a      	ands	r2, r3
 800e4be:	4b0e      	ldr	r3, [pc, #56]	@ (800e4f8 <UTIL_SEQ_Run+0x1d8>)
 800e4c0:	681b      	ldr	r3, [r3, #0]
 800e4c2:	4013      	ands	r3, r2
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d107      	bne.n	800e4d8 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 800e4c8:	4b0f      	ldr	r3, [pc, #60]	@ (800e508 <UTIL_SEQ_Run+0x1e8>)
 800e4ca:	681a      	ldr	r2, [r3, #0]
 800e4cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e4ce:	4013      	ands	r3, r2
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d101      	bne.n	800e4d8 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 800e4d4:	f7f3 f941 	bl	800175a <UTIL_SEQ_Idle>
 800e4d8:	69fb      	ldr	r3, [r7, #28]
 800e4da:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e4dc:	68fb      	ldr	r3, [r7, #12]
 800e4de:	f383 8810 	msr	PRIMASK, r3
}
 800e4e2:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 800e4e4:	f000 f917 	bl	800e716 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800e4e8:	4a03      	ldr	r2, [pc, #12]	@ (800e4f8 <UTIL_SEQ_Run+0x1d8>)
 800e4ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e4ec:	6013      	str	r3, [r2, #0]

  return;
 800e4ee:	bf00      	nop
}
 800e4f0:	3740      	adds	r7, #64	@ 0x40
 800e4f2:	46bd      	mov	sp, r7
 800e4f4:	bd80      	pop	{r7, pc}
 800e4f6:	bf00      	nop
 800e4f8:	20000028 	.word	0x20000028
 800e4fc:	200021f4 	.word	0x200021f4
 800e500:	200021f8 	.word	0x200021f8
 800e504:	20000024 	.word	0x20000024
 800e508:	200021fc 	.word	0x200021fc
 800e50c:	20002284 	.word	0x20002284
 800e510:	20002200 	.word	0x20002200
 800e514:	20002204 	.word	0x20002204

0800e518 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800e518:	b580      	push	{r7, lr}
 800e51a:	b088      	sub	sp, #32
 800e51c:	af00      	add	r7, sp, #0
 800e51e:	60f8      	str	r0, [r7, #12]
 800e520:	60b9      	str	r1, [r7, #8]
 800e522:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e524:	f3ef 8310 	mrs	r3, PRIMASK
 800e528:	617b      	str	r3, [r7, #20]
  return(result);
 800e52a:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800e52c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800e52e:	b672      	cpsid	i
}
 800e530:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800e532:	68f8      	ldr	r0, [r7, #12]
 800e534:	f000 f8f6 	bl	800e724 <SEQ_BitPosition>
 800e538:	4603      	mov	r3, r0
 800e53a:	4619      	mov	r1, r3
 800e53c:	4a06      	ldr	r2, [pc, #24]	@ (800e558 <UTIL_SEQ_RegTask+0x40>)
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800e544:	69fb      	ldr	r3, [r7, #28]
 800e546:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e548:	69bb      	ldr	r3, [r7, #24]
 800e54a:	f383 8810 	msr	PRIMASK, r3
}
 800e54e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800e550:	bf00      	nop
}
 800e552:	3720      	adds	r7, #32
 800e554:	46bd      	mov	sp, r7
 800e556:	bd80      	pop	{r7, pc}
 800e558:	20002204 	.word	0x20002204

0800e55c <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800e55c:	b480      	push	{r7}
 800e55e:	b087      	sub	sp, #28
 800e560:	af00      	add	r7, sp, #0
 800e562:	6078      	str	r0, [r7, #4]
 800e564:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e566:	f3ef 8310 	mrs	r3, PRIMASK
 800e56a:	60fb      	str	r3, [r7, #12]
  return(result);
 800e56c:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800e56e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800e570:	b672      	cpsid	i
}
 800e572:	bf00      	nop

  TaskSet |= TaskId_bm;
 800e574:	4b0d      	ldr	r3, [pc, #52]	@ (800e5ac <UTIL_SEQ_SetTask+0x50>)
 800e576:	681a      	ldr	r2, [r3, #0]
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	4313      	orrs	r3, r2
 800e57c:	4a0b      	ldr	r2, [pc, #44]	@ (800e5ac <UTIL_SEQ_SetTask+0x50>)
 800e57e:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800e580:	4a0b      	ldr	r2, [pc, #44]	@ (800e5b0 <UTIL_SEQ_SetTask+0x54>)
 800e582:	683b      	ldr	r3, [r7, #0]
 800e584:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	431a      	orrs	r2, r3
 800e58c:	4908      	ldr	r1, [pc, #32]	@ (800e5b0 <UTIL_SEQ_SetTask+0x54>)
 800e58e:	683b      	ldr	r3, [r7, #0]
 800e590:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800e594:	697b      	ldr	r3, [r7, #20]
 800e596:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e598:	693b      	ldr	r3, [r7, #16]
 800e59a:	f383 8810 	msr	PRIMASK, r3
}
 800e59e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800e5a0:	bf00      	nop
}
 800e5a2:	371c      	adds	r7, #28
 800e5a4:	46bd      	mov	sp, r7
 800e5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5aa:	4770      	bx	lr
 800e5ac:	200021f4 	.word	0x200021f4
 800e5b0:	20002284 	.word	0x20002284

0800e5b4 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800e5b4:	b480      	push	{r7}
 800e5b6:	b087      	sub	sp, #28
 800e5b8:	af00      	add	r7, sp, #0
 800e5ba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e5bc:	f3ef 8310 	mrs	r3, PRIMASK
 800e5c0:	60fb      	str	r3, [r7, #12]
  return(result);
 800e5c2:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800e5c4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800e5c6:	b672      	cpsid	i
}
 800e5c8:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	43da      	mvns	r2, r3
 800e5ce:	4b08      	ldr	r3, [pc, #32]	@ (800e5f0 <UTIL_SEQ_PauseTask+0x3c>)
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	4013      	ands	r3, r2
 800e5d4:	4a06      	ldr	r2, [pc, #24]	@ (800e5f0 <UTIL_SEQ_PauseTask+0x3c>)
 800e5d6:	6013      	str	r3, [r2, #0]
 800e5d8:	697b      	ldr	r3, [r7, #20]
 800e5da:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e5dc:	693b      	ldr	r3, [r7, #16]
 800e5de:	f383 8810 	msr	PRIMASK, r3
}
 800e5e2:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800e5e4:	bf00      	nop
}
 800e5e6:	371c      	adds	r7, #28
 800e5e8:	46bd      	mov	sp, r7
 800e5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ee:	4770      	bx	lr
 800e5f0:	20000024 	.word	0x20000024

0800e5f4 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800e5f4:	b480      	push	{r7}
 800e5f6:	b087      	sub	sp, #28
 800e5f8:	af00      	add	r7, sp, #0
 800e5fa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e5fc:	f3ef 8310 	mrs	r3, PRIMASK
 800e600:	60fb      	str	r3, [r7, #12]
  return(result);
 800e602:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800e604:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800e606:	b672      	cpsid	i
}
 800e608:	bf00      	nop

  TaskMask |= TaskId_bm;
 800e60a:	4b09      	ldr	r3, [pc, #36]	@ (800e630 <UTIL_SEQ_ResumeTask+0x3c>)
 800e60c:	681a      	ldr	r2, [r3, #0]
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	4313      	orrs	r3, r2
 800e612:	4a07      	ldr	r2, [pc, #28]	@ (800e630 <UTIL_SEQ_ResumeTask+0x3c>)
 800e614:	6013      	str	r3, [r2, #0]
 800e616:	697b      	ldr	r3, [r7, #20]
 800e618:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e61a:	693b      	ldr	r3, [r7, #16]
 800e61c:	f383 8810 	msr	PRIMASK, r3
}
 800e620:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800e622:	bf00      	nop
}
 800e624:	371c      	adds	r7, #28
 800e626:	46bd      	mov	sp, r7
 800e628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e62c:	4770      	bx	lr
 800e62e:	bf00      	nop
 800e630:	20000024 	.word	0x20000024

0800e634 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800e634:	b480      	push	{r7}
 800e636:	b087      	sub	sp, #28
 800e638:	af00      	add	r7, sp, #0
 800e63a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e63c:	f3ef 8310 	mrs	r3, PRIMASK
 800e640:	60fb      	str	r3, [r7, #12]
  return(result);
 800e642:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800e644:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800e646:	b672      	cpsid	i
}
 800e648:	bf00      	nop

  EvtSet |= EvtId_bm;
 800e64a:	4b09      	ldr	r3, [pc, #36]	@ (800e670 <UTIL_SEQ_SetEvt+0x3c>)
 800e64c:	681a      	ldr	r2, [r3, #0]
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	4313      	orrs	r3, r2
 800e652:	4a07      	ldr	r2, [pc, #28]	@ (800e670 <UTIL_SEQ_SetEvt+0x3c>)
 800e654:	6013      	str	r3, [r2, #0]
 800e656:	697b      	ldr	r3, [r7, #20]
 800e658:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e65a:	693b      	ldr	r3, [r7, #16]
 800e65c:	f383 8810 	msr	PRIMASK, r3
}
 800e660:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800e662:	bf00      	nop
}
 800e664:	371c      	adds	r7, #28
 800e666:	46bd      	mov	sp, r7
 800e668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e66c:	4770      	bx	lr
 800e66e:	bf00      	nop
 800e670:	200021f8 	.word	0x200021f8

0800e674 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800e674:	b580      	push	{r7, lr}
 800e676:	b088      	sub	sp, #32
 800e678:	af00      	add	r7, sp, #0
 800e67a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800e67c:	4b1f      	ldr	r3, [pc, #124]	@ (800e6fc <UTIL_SEQ_WaitEvt+0x88>)
 800e67e:	681b      	ldr	r3, [r3, #0]
 800e680:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800e682:	4b1e      	ldr	r3, [pc, #120]	@ (800e6fc <UTIL_SEQ_WaitEvt+0x88>)
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e68a:	d102      	bne.n	800e692 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 800e68c:	2300      	movs	r3, #0
 800e68e:	61fb      	str	r3, [r7, #28]
 800e690:	e005      	b.n	800e69e <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 800e692:	4b1a      	ldr	r3, [pc, #104]	@ (800e6fc <UTIL_SEQ_WaitEvt+0x88>)
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	2201      	movs	r2, #1
 800e698:	fa02 f303 	lsl.w	r3, r2, r3
 800e69c:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800e69e:	4b18      	ldr	r3, [pc, #96]	@ (800e700 <UTIL_SEQ_WaitEvt+0x8c>)
 800e6a0:	681b      	ldr	r3, [r3, #0]
 800e6a2:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 800e6a4:	4a16      	ldr	r2, [pc, #88]	@ (800e700 <UTIL_SEQ_WaitEvt+0x8c>)
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 800e6aa:	e003      	b.n	800e6b4 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 800e6ac:	6879      	ldr	r1, [r7, #4]
 800e6ae:	69f8      	ldr	r0, [r7, #28]
 800e6b0:	f7f3 f85a 	bl	8001768 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 800e6b4:	4b13      	ldr	r3, [pc, #76]	@ (800e704 <UTIL_SEQ_WaitEvt+0x90>)
 800e6b6:	681a      	ldr	r2, [r3, #0]
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	4013      	ands	r3, r2
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d0f5      	beq.n	800e6ac <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 800e6c0:	4a0e      	ldr	r2, [pc, #56]	@ (800e6fc <UTIL_SEQ_WaitEvt+0x88>)
 800e6c2:	69bb      	ldr	r3, [r7, #24]
 800e6c4:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e6c6:	f3ef 8310 	mrs	r3, PRIMASK
 800e6ca:	60bb      	str	r3, [r7, #8]
  return(result);
 800e6cc:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800e6ce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800e6d0:	b672      	cpsid	i
}
 800e6d2:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	43da      	mvns	r2, r3
 800e6d8:	4b0a      	ldr	r3, [pc, #40]	@ (800e704 <UTIL_SEQ_WaitEvt+0x90>)
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	4013      	ands	r3, r2
 800e6de:	4a09      	ldr	r2, [pc, #36]	@ (800e704 <UTIL_SEQ_WaitEvt+0x90>)
 800e6e0:	6013      	str	r3, [r2, #0]
 800e6e2:	693b      	ldr	r3, [r7, #16]
 800e6e4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e6e6:	68fb      	ldr	r3, [r7, #12]
 800e6e8:	f383 8810 	msr	PRIMASK, r3
}
 800e6ec:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 800e6ee:	4a04      	ldr	r2, [pc, #16]	@ (800e700 <UTIL_SEQ_WaitEvt+0x8c>)
 800e6f0:	697b      	ldr	r3, [r7, #20]
 800e6f2:	6013      	str	r3, [r2, #0]
  return;
 800e6f4:	bf00      	nop
}
 800e6f6:	3720      	adds	r7, #32
 800e6f8:	46bd      	mov	sp, r7
 800e6fa:	bd80      	pop	{r7, pc}
 800e6fc:	20002200 	.word	0x20002200
 800e700:	200021fc 	.word	0x200021fc
 800e704:	200021f8 	.word	0x200021f8

0800e708 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800e708:	b480      	push	{r7}
 800e70a:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800e70c:	bf00      	nop
}
 800e70e:	46bd      	mov	sp, r7
 800e710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e714:	4770      	bx	lr

0800e716 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800e716:	b480      	push	{r7}
 800e718:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800e71a:	bf00      	nop
}
 800e71c:	46bd      	mov	sp, r7
 800e71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e722:	4770      	bx	lr

0800e724 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800e724:	b480      	push	{r7}
 800e726:	b085      	sub	sp, #20
 800e728:	af00      	add	r7, sp, #0
 800e72a:	6078      	str	r0, [r7, #4]
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	60fb      	str	r3, [r7, #12]
  if (value == 0U)
 800e730:	68fb      	ldr	r3, [r7, #12]
 800e732:	2b00      	cmp	r3, #0
 800e734:	d101      	bne.n	800e73a <SEQ_BitPosition+0x16>
    return 32U;
 800e736:	2320      	movs	r3, #32
 800e738:	e003      	b.n	800e742 <SEQ_BitPosition+0x1e>
  return __builtin_clz(value);
 800e73a:	68fb      	ldr	r3, [r7, #12]
 800e73c:	fab3 f383 	clz	r3, r3
 800e740:	b2db      	uxtb	r3, r3
  return (uint8_t)(31 -__CLZ( Value ));
 800e742:	f1c3 031f 	rsb	r3, r3, #31
 800e746:	b2db      	uxtb	r3, r3
}
 800e748:	4618      	mov	r0, r3
 800e74a:	3714      	adds	r7, #20
 800e74c:	46bd      	mov	sp, r7
 800e74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e752:	4770      	bx	lr

0800e754 <std>:
 800e754:	2300      	movs	r3, #0
 800e756:	b510      	push	{r4, lr}
 800e758:	4604      	mov	r4, r0
 800e75a:	e9c0 3300 	strd	r3, r3, [r0]
 800e75e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e762:	6083      	str	r3, [r0, #8]
 800e764:	8181      	strh	r1, [r0, #12]
 800e766:	6643      	str	r3, [r0, #100]	@ 0x64
 800e768:	81c2      	strh	r2, [r0, #14]
 800e76a:	6183      	str	r3, [r0, #24]
 800e76c:	4619      	mov	r1, r3
 800e76e:	2208      	movs	r2, #8
 800e770:	305c      	adds	r0, #92	@ 0x5c
 800e772:	f000 fa21 	bl	800ebb8 <memset>
 800e776:	4b0d      	ldr	r3, [pc, #52]	@ (800e7ac <std+0x58>)
 800e778:	6263      	str	r3, [r4, #36]	@ 0x24
 800e77a:	4b0d      	ldr	r3, [pc, #52]	@ (800e7b0 <std+0x5c>)
 800e77c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800e77e:	4b0d      	ldr	r3, [pc, #52]	@ (800e7b4 <std+0x60>)
 800e780:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800e782:	4b0d      	ldr	r3, [pc, #52]	@ (800e7b8 <std+0x64>)
 800e784:	6323      	str	r3, [r4, #48]	@ 0x30
 800e786:	4b0d      	ldr	r3, [pc, #52]	@ (800e7bc <std+0x68>)
 800e788:	6224      	str	r4, [r4, #32]
 800e78a:	429c      	cmp	r4, r3
 800e78c:	d006      	beq.n	800e79c <std+0x48>
 800e78e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800e792:	4294      	cmp	r4, r2
 800e794:	d002      	beq.n	800e79c <std+0x48>
 800e796:	33d0      	adds	r3, #208	@ 0xd0
 800e798:	429c      	cmp	r4, r3
 800e79a:	d105      	bne.n	800e7a8 <std+0x54>
 800e79c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800e7a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e7a4:	f000 ba7a 	b.w	800ec9c <__retarget_lock_init_recursive>
 800e7a8:	bd10      	pop	{r4, pc}
 800e7aa:	bf00      	nop
 800e7ac:	0800ea09 	.word	0x0800ea09
 800e7b0:	0800ea2b 	.word	0x0800ea2b
 800e7b4:	0800ea63 	.word	0x0800ea63
 800e7b8:	0800ea87 	.word	0x0800ea87
 800e7bc:	2000228c 	.word	0x2000228c

0800e7c0 <stdio_exit_handler>:
 800e7c0:	4a02      	ldr	r2, [pc, #8]	@ (800e7cc <stdio_exit_handler+0xc>)
 800e7c2:	4903      	ldr	r1, [pc, #12]	@ (800e7d0 <stdio_exit_handler+0x10>)
 800e7c4:	4803      	ldr	r0, [pc, #12]	@ (800e7d4 <stdio_exit_handler+0x14>)
 800e7c6:	f000 b869 	b.w	800e89c <_fwalk_sglue>
 800e7ca:	bf00      	nop
 800e7cc:	2000002c 	.word	0x2000002c
 800e7d0:	0800f809 	.word	0x0800f809
 800e7d4:	2000003c 	.word	0x2000003c

0800e7d8 <cleanup_stdio>:
 800e7d8:	6841      	ldr	r1, [r0, #4]
 800e7da:	4b0c      	ldr	r3, [pc, #48]	@ (800e80c <cleanup_stdio+0x34>)
 800e7dc:	4299      	cmp	r1, r3
 800e7de:	b510      	push	{r4, lr}
 800e7e0:	4604      	mov	r4, r0
 800e7e2:	d001      	beq.n	800e7e8 <cleanup_stdio+0x10>
 800e7e4:	f001 f810 	bl	800f808 <_fflush_r>
 800e7e8:	68a1      	ldr	r1, [r4, #8]
 800e7ea:	4b09      	ldr	r3, [pc, #36]	@ (800e810 <cleanup_stdio+0x38>)
 800e7ec:	4299      	cmp	r1, r3
 800e7ee:	d002      	beq.n	800e7f6 <cleanup_stdio+0x1e>
 800e7f0:	4620      	mov	r0, r4
 800e7f2:	f001 f809 	bl	800f808 <_fflush_r>
 800e7f6:	68e1      	ldr	r1, [r4, #12]
 800e7f8:	4b06      	ldr	r3, [pc, #24]	@ (800e814 <cleanup_stdio+0x3c>)
 800e7fa:	4299      	cmp	r1, r3
 800e7fc:	d004      	beq.n	800e808 <cleanup_stdio+0x30>
 800e7fe:	4620      	mov	r0, r4
 800e800:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e804:	f001 b800 	b.w	800f808 <_fflush_r>
 800e808:	bd10      	pop	{r4, pc}
 800e80a:	bf00      	nop
 800e80c:	2000228c 	.word	0x2000228c
 800e810:	200022f4 	.word	0x200022f4
 800e814:	2000235c 	.word	0x2000235c

0800e818 <global_stdio_init.part.0>:
 800e818:	b510      	push	{r4, lr}
 800e81a:	4b0b      	ldr	r3, [pc, #44]	@ (800e848 <global_stdio_init.part.0+0x30>)
 800e81c:	4c0b      	ldr	r4, [pc, #44]	@ (800e84c <global_stdio_init.part.0+0x34>)
 800e81e:	4a0c      	ldr	r2, [pc, #48]	@ (800e850 <global_stdio_init.part.0+0x38>)
 800e820:	601a      	str	r2, [r3, #0]
 800e822:	4620      	mov	r0, r4
 800e824:	2200      	movs	r2, #0
 800e826:	2104      	movs	r1, #4
 800e828:	f7ff ff94 	bl	800e754 <std>
 800e82c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800e830:	2201      	movs	r2, #1
 800e832:	2109      	movs	r1, #9
 800e834:	f7ff ff8e 	bl	800e754 <std>
 800e838:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800e83c:	2202      	movs	r2, #2
 800e83e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e842:	2112      	movs	r1, #18
 800e844:	f7ff bf86 	b.w	800e754 <std>
 800e848:	200023c4 	.word	0x200023c4
 800e84c:	2000228c 	.word	0x2000228c
 800e850:	0800e7c1 	.word	0x0800e7c1

0800e854 <__sfp_lock_acquire>:
 800e854:	4801      	ldr	r0, [pc, #4]	@ (800e85c <__sfp_lock_acquire+0x8>)
 800e856:	f000 ba22 	b.w	800ec9e <__retarget_lock_acquire_recursive>
 800e85a:	bf00      	nop
 800e85c:	200023cd 	.word	0x200023cd

0800e860 <__sfp_lock_release>:
 800e860:	4801      	ldr	r0, [pc, #4]	@ (800e868 <__sfp_lock_release+0x8>)
 800e862:	f000 ba1d 	b.w	800eca0 <__retarget_lock_release_recursive>
 800e866:	bf00      	nop
 800e868:	200023cd 	.word	0x200023cd

0800e86c <__sinit>:
 800e86c:	b510      	push	{r4, lr}
 800e86e:	4604      	mov	r4, r0
 800e870:	f7ff fff0 	bl	800e854 <__sfp_lock_acquire>
 800e874:	6a23      	ldr	r3, [r4, #32]
 800e876:	b11b      	cbz	r3, 800e880 <__sinit+0x14>
 800e878:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e87c:	f7ff bff0 	b.w	800e860 <__sfp_lock_release>
 800e880:	4b04      	ldr	r3, [pc, #16]	@ (800e894 <__sinit+0x28>)
 800e882:	6223      	str	r3, [r4, #32]
 800e884:	4b04      	ldr	r3, [pc, #16]	@ (800e898 <__sinit+0x2c>)
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d1f5      	bne.n	800e878 <__sinit+0xc>
 800e88c:	f7ff ffc4 	bl	800e818 <global_stdio_init.part.0>
 800e890:	e7f2      	b.n	800e878 <__sinit+0xc>
 800e892:	bf00      	nop
 800e894:	0800e7d9 	.word	0x0800e7d9
 800e898:	200023c4 	.word	0x200023c4

0800e89c <_fwalk_sglue>:
 800e89c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e8a0:	4607      	mov	r7, r0
 800e8a2:	4688      	mov	r8, r1
 800e8a4:	4614      	mov	r4, r2
 800e8a6:	2600      	movs	r6, #0
 800e8a8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e8ac:	f1b9 0901 	subs.w	r9, r9, #1
 800e8b0:	d505      	bpl.n	800e8be <_fwalk_sglue+0x22>
 800e8b2:	6824      	ldr	r4, [r4, #0]
 800e8b4:	2c00      	cmp	r4, #0
 800e8b6:	d1f7      	bne.n	800e8a8 <_fwalk_sglue+0xc>
 800e8b8:	4630      	mov	r0, r6
 800e8ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e8be:	89ab      	ldrh	r3, [r5, #12]
 800e8c0:	2b01      	cmp	r3, #1
 800e8c2:	d907      	bls.n	800e8d4 <_fwalk_sglue+0x38>
 800e8c4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e8c8:	3301      	adds	r3, #1
 800e8ca:	d003      	beq.n	800e8d4 <_fwalk_sglue+0x38>
 800e8cc:	4629      	mov	r1, r5
 800e8ce:	4638      	mov	r0, r7
 800e8d0:	47c0      	blx	r8
 800e8d2:	4306      	orrs	r6, r0
 800e8d4:	3568      	adds	r5, #104	@ 0x68
 800e8d6:	e7e9      	b.n	800e8ac <_fwalk_sglue+0x10>

0800e8d8 <iprintf>:
 800e8d8:	b40f      	push	{r0, r1, r2, r3}
 800e8da:	b507      	push	{r0, r1, r2, lr}
 800e8dc:	4906      	ldr	r1, [pc, #24]	@ (800e8f8 <iprintf+0x20>)
 800e8de:	ab04      	add	r3, sp, #16
 800e8e0:	6808      	ldr	r0, [r1, #0]
 800e8e2:	f853 2b04 	ldr.w	r2, [r3], #4
 800e8e6:	6881      	ldr	r1, [r0, #8]
 800e8e8:	9301      	str	r3, [sp, #4]
 800e8ea:	f000 fc63 	bl	800f1b4 <_vfiprintf_r>
 800e8ee:	b003      	add	sp, #12
 800e8f0:	f85d eb04 	ldr.w	lr, [sp], #4
 800e8f4:	b004      	add	sp, #16
 800e8f6:	4770      	bx	lr
 800e8f8:	20000038 	.word	0x20000038

0800e8fc <putchar>:
 800e8fc:	4b02      	ldr	r3, [pc, #8]	@ (800e908 <putchar+0xc>)
 800e8fe:	4601      	mov	r1, r0
 800e900:	6818      	ldr	r0, [r3, #0]
 800e902:	6882      	ldr	r2, [r0, #8]
 800e904:	f001 b80a 	b.w	800f91c <_putc_r>
 800e908:	20000038 	.word	0x20000038

0800e90c <_puts_r>:
 800e90c:	6a03      	ldr	r3, [r0, #32]
 800e90e:	b570      	push	{r4, r5, r6, lr}
 800e910:	6884      	ldr	r4, [r0, #8]
 800e912:	4605      	mov	r5, r0
 800e914:	460e      	mov	r6, r1
 800e916:	b90b      	cbnz	r3, 800e91c <_puts_r+0x10>
 800e918:	f7ff ffa8 	bl	800e86c <__sinit>
 800e91c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e91e:	07db      	lsls	r3, r3, #31
 800e920:	d405      	bmi.n	800e92e <_puts_r+0x22>
 800e922:	89a3      	ldrh	r3, [r4, #12]
 800e924:	0598      	lsls	r0, r3, #22
 800e926:	d402      	bmi.n	800e92e <_puts_r+0x22>
 800e928:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e92a:	f000 f9b8 	bl	800ec9e <__retarget_lock_acquire_recursive>
 800e92e:	89a3      	ldrh	r3, [r4, #12]
 800e930:	0719      	lsls	r1, r3, #28
 800e932:	d502      	bpl.n	800e93a <_puts_r+0x2e>
 800e934:	6923      	ldr	r3, [r4, #16]
 800e936:	2b00      	cmp	r3, #0
 800e938:	d135      	bne.n	800e9a6 <_puts_r+0x9a>
 800e93a:	4621      	mov	r1, r4
 800e93c:	4628      	mov	r0, r5
 800e93e:	f000 f8e5 	bl	800eb0c <__swsetup_r>
 800e942:	b380      	cbz	r0, 800e9a6 <_puts_r+0x9a>
 800e944:	f04f 35ff 	mov.w	r5, #4294967295
 800e948:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e94a:	07da      	lsls	r2, r3, #31
 800e94c:	d405      	bmi.n	800e95a <_puts_r+0x4e>
 800e94e:	89a3      	ldrh	r3, [r4, #12]
 800e950:	059b      	lsls	r3, r3, #22
 800e952:	d402      	bmi.n	800e95a <_puts_r+0x4e>
 800e954:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e956:	f000 f9a3 	bl	800eca0 <__retarget_lock_release_recursive>
 800e95a:	4628      	mov	r0, r5
 800e95c:	bd70      	pop	{r4, r5, r6, pc}
 800e95e:	2b00      	cmp	r3, #0
 800e960:	da04      	bge.n	800e96c <_puts_r+0x60>
 800e962:	69a2      	ldr	r2, [r4, #24]
 800e964:	429a      	cmp	r2, r3
 800e966:	dc17      	bgt.n	800e998 <_puts_r+0x8c>
 800e968:	290a      	cmp	r1, #10
 800e96a:	d015      	beq.n	800e998 <_puts_r+0x8c>
 800e96c:	6823      	ldr	r3, [r4, #0]
 800e96e:	1c5a      	adds	r2, r3, #1
 800e970:	6022      	str	r2, [r4, #0]
 800e972:	7019      	strb	r1, [r3, #0]
 800e974:	68a3      	ldr	r3, [r4, #8]
 800e976:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800e97a:	3b01      	subs	r3, #1
 800e97c:	60a3      	str	r3, [r4, #8]
 800e97e:	2900      	cmp	r1, #0
 800e980:	d1ed      	bne.n	800e95e <_puts_r+0x52>
 800e982:	2b00      	cmp	r3, #0
 800e984:	da11      	bge.n	800e9aa <_puts_r+0x9e>
 800e986:	4622      	mov	r2, r4
 800e988:	210a      	movs	r1, #10
 800e98a:	4628      	mov	r0, r5
 800e98c:	f000 f87f 	bl	800ea8e <__swbuf_r>
 800e990:	3001      	adds	r0, #1
 800e992:	d0d7      	beq.n	800e944 <_puts_r+0x38>
 800e994:	250a      	movs	r5, #10
 800e996:	e7d7      	b.n	800e948 <_puts_r+0x3c>
 800e998:	4622      	mov	r2, r4
 800e99a:	4628      	mov	r0, r5
 800e99c:	f000 f877 	bl	800ea8e <__swbuf_r>
 800e9a0:	3001      	adds	r0, #1
 800e9a2:	d1e7      	bne.n	800e974 <_puts_r+0x68>
 800e9a4:	e7ce      	b.n	800e944 <_puts_r+0x38>
 800e9a6:	3e01      	subs	r6, #1
 800e9a8:	e7e4      	b.n	800e974 <_puts_r+0x68>
 800e9aa:	6823      	ldr	r3, [r4, #0]
 800e9ac:	1c5a      	adds	r2, r3, #1
 800e9ae:	6022      	str	r2, [r4, #0]
 800e9b0:	220a      	movs	r2, #10
 800e9b2:	701a      	strb	r2, [r3, #0]
 800e9b4:	e7ee      	b.n	800e994 <_puts_r+0x88>
	...

0800e9b8 <puts>:
 800e9b8:	4b02      	ldr	r3, [pc, #8]	@ (800e9c4 <puts+0xc>)
 800e9ba:	4601      	mov	r1, r0
 800e9bc:	6818      	ldr	r0, [r3, #0]
 800e9be:	f7ff bfa5 	b.w	800e90c <_puts_r>
 800e9c2:	bf00      	nop
 800e9c4:	20000038 	.word	0x20000038

0800e9c8 <siprintf>:
 800e9c8:	b40e      	push	{r1, r2, r3}
 800e9ca:	b500      	push	{lr}
 800e9cc:	b09c      	sub	sp, #112	@ 0x70
 800e9ce:	ab1d      	add	r3, sp, #116	@ 0x74
 800e9d0:	9002      	str	r0, [sp, #8]
 800e9d2:	9006      	str	r0, [sp, #24]
 800e9d4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800e9d8:	4809      	ldr	r0, [pc, #36]	@ (800ea00 <siprintf+0x38>)
 800e9da:	9107      	str	r1, [sp, #28]
 800e9dc:	9104      	str	r1, [sp, #16]
 800e9de:	4909      	ldr	r1, [pc, #36]	@ (800ea04 <siprintf+0x3c>)
 800e9e0:	f853 2b04 	ldr.w	r2, [r3], #4
 800e9e4:	9105      	str	r1, [sp, #20]
 800e9e6:	6800      	ldr	r0, [r0, #0]
 800e9e8:	9301      	str	r3, [sp, #4]
 800e9ea:	a902      	add	r1, sp, #8
 800e9ec:	f000 fabc 	bl	800ef68 <_svfiprintf_r>
 800e9f0:	9b02      	ldr	r3, [sp, #8]
 800e9f2:	2200      	movs	r2, #0
 800e9f4:	701a      	strb	r2, [r3, #0]
 800e9f6:	b01c      	add	sp, #112	@ 0x70
 800e9f8:	f85d eb04 	ldr.w	lr, [sp], #4
 800e9fc:	b003      	add	sp, #12
 800e9fe:	4770      	bx	lr
 800ea00:	20000038 	.word	0x20000038
 800ea04:	ffff0208 	.word	0xffff0208

0800ea08 <__sread>:
 800ea08:	b510      	push	{r4, lr}
 800ea0a:	460c      	mov	r4, r1
 800ea0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ea10:	f000 f8fc 	bl	800ec0c <_read_r>
 800ea14:	2800      	cmp	r0, #0
 800ea16:	bfab      	itete	ge
 800ea18:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ea1a:	89a3      	ldrhlt	r3, [r4, #12]
 800ea1c:	181b      	addge	r3, r3, r0
 800ea1e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ea22:	bfac      	ite	ge
 800ea24:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ea26:	81a3      	strhlt	r3, [r4, #12]
 800ea28:	bd10      	pop	{r4, pc}

0800ea2a <__swrite>:
 800ea2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea2e:	461f      	mov	r7, r3
 800ea30:	898b      	ldrh	r3, [r1, #12]
 800ea32:	05db      	lsls	r3, r3, #23
 800ea34:	4605      	mov	r5, r0
 800ea36:	460c      	mov	r4, r1
 800ea38:	4616      	mov	r6, r2
 800ea3a:	d505      	bpl.n	800ea48 <__swrite+0x1e>
 800ea3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ea40:	2302      	movs	r3, #2
 800ea42:	2200      	movs	r2, #0
 800ea44:	f000 f8d0 	bl	800ebe8 <_lseek_r>
 800ea48:	89a3      	ldrh	r3, [r4, #12]
 800ea4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ea4e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ea52:	81a3      	strh	r3, [r4, #12]
 800ea54:	4632      	mov	r2, r6
 800ea56:	463b      	mov	r3, r7
 800ea58:	4628      	mov	r0, r5
 800ea5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ea5e:	f000 b8e7 	b.w	800ec30 <_write_r>

0800ea62 <__sseek>:
 800ea62:	b510      	push	{r4, lr}
 800ea64:	460c      	mov	r4, r1
 800ea66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ea6a:	f000 f8bd 	bl	800ebe8 <_lseek_r>
 800ea6e:	1c43      	adds	r3, r0, #1
 800ea70:	89a3      	ldrh	r3, [r4, #12]
 800ea72:	bf15      	itete	ne
 800ea74:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ea76:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ea7a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ea7e:	81a3      	strheq	r3, [r4, #12]
 800ea80:	bf18      	it	ne
 800ea82:	81a3      	strhne	r3, [r4, #12]
 800ea84:	bd10      	pop	{r4, pc}

0800ea86 <__sclose>:
 800ea86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ea8a:	f000 b89d 	b.w	800ebc8 <_close_r>

0800ea8e <__swbuf_r>:
 800ea8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea90:	460e      	mov	r6, r1
 800ea92:	4614      	mov	r4, r2
 800ea94:	4605      	mov	r5, r0
 800ea96:	b118      	cbz	r0, 800eaa0 <__swbuf_r+0x12>
 800ea98:	6a03      	ldr	r3, [r0, #32]
 800ea9a:	b90b      	cbnz	r3, 800eaa0 <__swbuf_r+0x12>
 800ea9c:	f7ff fee6 	bl	800e86c <__sinit>
 800eaa0:	69a3      	ldr	r3, [r4, #24]
 800eaa2:	60a3      	str	r3, [r4, #8]
 800eaa4:	89a3      	ldrh	r3, [r4, #12]
 800eaa6:	071a      	lsls	r2, r3, #28
 800eaa8:	d501      	bpl.n	800eaae <__swbuf_r+0x20>
 800eaaa:	6923      	ldr	r3, [r4, #16]
 800eaac:	b943      	cbnz	r3, 800eac0 <__swbuf_r+0x32>
 800eaae:	4621      	mov	r1, r4
 800eab0:	4628      	mov	r0, r5
 800eab2:	f000 f82b 	bl	800eb0c <__swsetup_r>
 800eab6:	b118      	cbz	r0, 800eac0 <__swbuf_r+0x32>
 800eab8:	f04f 37ff 	mov.w	r7, #4294967295
 800eabc:	4638      	mov	r0, r7
 800eabe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eac0:	6823      	ldr	r3, [r4, #0]
 800eac2:	6922      	ldr	r2, [r4, #16]
 800eac4:	1a98      	subs	r0, r3, r2
 800eac6:	6963      	ldr	r3, [r4, #20]
 800eac8:	b2f6      	uxtb	r6, r6
 800eaca:	4283      	cmp	r3, r0
 800eacc:	4637      	mov	r7, r6
 800eace:	dc05      	bgt.n	800eadc <__swbuf_r+0x4e>
 800ead0:	4621      	mov	r1, r4
 800ead2:	4628      	mov	r0, r5
 800ead4:	f000 fe98 	bl	800f808 <_fflush_r>
 800ead8:	2800      	cmp	r0, #0
 800eada:	d1ed      	bne.n	800eab8 <__swbuf_r+0x2a>
 800eadc:	68a3      	ldr	r3, [r4, #8]
 800eade:	3b01      	subs	r3, #1
 800eae0:	60a3      	str	r3, [r4, #8]
 800eae2:	6823      	ldr	r3, [r4, #0]
 800eae4:	1c5a      	adds	r2, r3, #1
 800eae6:	6022      	str	r2, [r4, #0]
 800eae8:	701e      	strb	r6, [r3, #0]
 800eaea:	6962      	ldr	r2, [r4, #20]
 800eaec:	1c43      	adds	r3, r0, #1
 800eaee:	429a      	cmp	r2, r3
 800eaf0:	d004      	beq.n	800eafc <__swbuf_r+0x6e>
 800eaf2:	89a3      	ldrh	r3, [r4, #12]
 800eaf4:	07db      	lsls	r3, r3, #31
 800eaf6:	d5e1      	bpl.n	800eabc <__swbuf_r+0x2e>
 800eaf8:	2e0a      	cmp	r6, #10
 800eafa:	d1df      	bne.n	800eabc <__swbuf_r+0x2e>
 800eafc:	4621      	mov	r1, r4
 800eafe:	4628      	mov	r0, r5
 800eb00:	f000 fe82 	bl	800f808 <_fflush_r>
 800eb04:	2800      	cmp	r0, #0
 800eb06:	d0d9      	beq.n	800eabc <__swbuf_r+0x2e>
 800eb08:	e7d6      	b.n	800eab8 <__swbuf_r+0x2a>
	...

0800eb0c <__swsetup_r>:
 800eb0c:	b538      	push	{r3, r4, r5, lr}
 800eb0e:	4b29      	ldr	r3, [pc, #164]	@ (800ebb4 <__swsetup_r+0xa8>)
 800eb10:	4605      	mov	r5, r0
 800eb12:	6818      	ldr	r0, [r3, #0]
 800eb14:	460c      	mov	r4, r1
 800eb16:	b118      	cbz	r0, 800eb20 <__swsetup_r+0x14>
 800eb18:	6a03      	ldr	r3, [r0, #32]
 800eb1a:	b90b      	cbnz	r3, 800eb20 <__swsetup_r+0x14>
 800eb1c:	f7ff fea6 	bl	800e86c <__sinit>
 800eb20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eb24:	0719      	lsls	r1, r3, #28
 800eb26:	d422      	bmi.n	800eb6e <__swsetup_r+0x62>
 800eb28:	06da      	lsls	r2, r3, #27
 800eb2a:	d407      	bmi.n	800eb3c <__swsetup_r+0x30>
 800eb2c:	2209      	movs	r2, #9
 800eb2e:	602a      	str	r2, [r5, #0]
 800eb30:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800eb34:	81a3      	strh	r3, [r4, #12]
 800eb36:	f04f 30ff 	mov.w	r0, #4294967295
 800eb3a:	e033      	b.n	800eba4 <__swsetup_r+0x98>
 800eb3c:	0758      	lsls	r0, r3, #29
 800eb3e:	d512      	bpl.n	800eb66 <__swsetup_r+0x5a>
 800eb40:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800eb42:	b141      	cbz	r1, 800eb56 <__swsetup_r+0x4a>
 800eb44:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800eb48:	4299      	cmp	r1, r3
 800eb4a:	d002      	beq.n	800eb52 <__swsetup_r+0x46>
 800eb4c:	4628      	mov	r0, r5
 800eb4e:	f000 f8b7 	bl	800ecc0 <_free_r>
 800eb52:	2300      	movs	r3, #0
 800eb54:	6363      	str	r3, [r4, #52]	@ 0x34
 800eb56:	89a3      	ldrh	r3, [r4, #12]
 800eb58:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800eb5c:	81a3      	strh	r3, [r4, #12]
 800eb5e:	2300      	movs	r3, #0
 800eb60:	6063      	str	r3, [r4, #4]
 800eb62:	6923      	ldr	r3, [r4, #16]
 800eb64:	6023      	str	r3, [r4, #0]
 800eb66:	89a3      	ldrh	r3, [r4, #12]
 800eb68:	f043 0308 	orr.w	r3, r3, #8
 800eb6c:	81a3      	strh	r3, [r4, #12]
 800eb6e:	6923      	ldr	r3, [r4, #16]
 800eb70:	b94b      	cbnz	r3, 800eb86 <__swsetup_r+0x7a>
 800eb72:	89a3      	ldrh	r3, [r4, #12]
 800eb74:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800eb78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800eb7c:	d003      	beq.n	800eb86 <__swsetup_r+0x7a>
 800eb7e:	4621      	mov	r1, r4
 800eb80:	4628      	mov	r0, r5
 800eb82:	f000 fe8f 	bl	800f8a4 <__smakebuf_r>
 800eb86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eb8a:	f013 0201 	ands.w	r2, r3, #1
 800eb8e:	d00a      	beq.n	800eba6 <__swsetup_r+0x9a>
 800eb90:	2200      	movs	r2, #0
 800eb92:	60a2      	str	r2, [r4, #8]
 800eb94:	6962      	ldr	r2, [r4, #20]
 800eb96:	4252      	negs	r2, r2
 800eb98:	61a2      	str	r2, [r4, #24]
 800eb9a:	6922      	ldr	r2, [r4, #16]
 800eb9c:	b942      	cbnz	r2, 800ebb0 <__swsetup_r+0xa4>
 800eb9e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800eba2:	d1c5      	bne.n	800eb30 <__swsetup_r+0x24>
 800eba4:	bd38      	pop	{r3, r4, r5, pc}
 800eba6:	0799      	lsls	r1, r3, #30
 800eba8:	bf58      	it	pl
 800ebaa:	6962      	ldrpl	r2, [r4, #20]
 800ebac:	60a2      	str	r2, [r4, #8]
 800ebae:	e7f4      	b.n	800eb9a <__swsetup_r+0x8e>
 800ebb0:	2000      	movs	r0, #0
 800ebb2:	e7f7      	b.n	800eba4 <__swsetup_r+0x98>
 800ebb4:	20000038 	.word	0x20000038

0800ebb8 <memset>:
 800ebb8:	4402      	add	r2, r0
 800ebba:	4603      	mov	r3, r0
 800ebbc:	4293      	cmp	r3, r2
 800ebbe:	d100      	bne.n	800ebc2 <memset+0xa>
 800ebc0:	4770      	bx	lr
 800ebc2:	f803 1b01 	strb.w	r1, [r3], #1
 800ebc6:	e7f9      	b.n	800ebbc <memset+0x4>

0800ebc8 <_close_r>:
 800ebc8:	b538      	push	{r3, r4, r5, lr}
 800ebca:	4d06      	ldr	r5, [pc, #24]	@ (800ebe4 <_close_r+0x1c>)
 800ebcc:	2300      	movs	r3, #0
 800ebce:	4604      	mov	r4, r0
 800ebd0:	4608      	mov	r0, r1
 800ebd2:	602b      	str	r3, [r5, #0]
 800ebd4:	f000 ff58 	bl	800fa88 <_close>
 800ebd8:	1c43      	adds	r3, r0, #1
 800ebda:	d102      	bne.n	800ebe2 <_close_r+0x1a>
 800ebdc:	682b      	ldr	r3, [r5, #0]
 800ebde:	b103      	cbz	r3, 800ebe2 <_close_r+0x1a>
 800ebe0:	6023      	str	r3, [r4, #0]
 800ebe2:	bd38      	pop	{r3, r4, r5, pc}
 800ebe4:	200023c8 	.word	0x200023c8

0800ebe8 <_lseek_r>:
 800ebe8:	b538      	push	{r3, r4, r5, lr}
 800ebea:	4d07      	ldr	r5, [pc, #28]	@ (800ec08 <_lseek_r+0x20>)
 800ebec:	4604      	mov	r4, r0
 800ebee:	4608      	mov	r0, r1
 800ebf0:	4611      	mov	r1, r2
 800ebf2:	2200      	movs	r2, #0
 800ebf4:	602a      	str	r2, [r5, #0]
 800ebf6:	461a      	mov	r2, r3
 800ebf8:	f000 ff5e 	bl	800fab8 <_lseek>
 800ebfc:	1c43      	adds	r3, r0, #1
 800ebfe:	d102      	bne.n	800ec06 <_lseek_r+0x1e>
 800ec00:	682b      	ldr	r3, [r5, #0]
 800ec02:	b103      	cbz	r3, 800ec06 <_lseek_r+0x1e>
 800ec04:	6023      	str	r3, [r4, #0]
 800ec06:	bd38      	pop	{r3, r4, r5, pc}
 800ec08:	200023c8 	.word	0x200023c8

0800ec0c <_read_r>:
 800ec0c:	b538      	push	{r3, r4, r5, lr}
 800ec0e:	4d07      	ldr	r5, [pc, #28]	@ (800ec2c <_read_r+0x20>)
 800ec10:	4604      	mov	r4, r0
 800ec12:	4608      	mov	r0, r1
 800ec14:	4611      	mov	r1, r2
 800ec16:	2200      	movs	r2, #0
 800ec18:	602a      	str	r2, [r5, #0]
 800ec1a:	461a      	mov	r2, r3
 800ec1c:	f000 ff54 	bl	800fac8 <_read>
 800ec20:	1c43      	adds	r3, r0, #1
 800ec22:	d102      	bne.n	800ec2a <_read_r+0x1e>
 800ec24:	682b      	ldr	r3, [r5, #0]
 800ec26:	b103      	cbz	r3, 800ec2a <_read_r+0x1e>
 800ec28:	6023      	str	r3, [r4, #0]
 800ec2a:	bd38      	pop	{r3, r4, r5, pc}
 800ec2c:	200023c8 	.word	0x200023c8

0800ec30 <_write_r>:
 800ec30:	b538      	push	{r3, r4, r5, lr}
 800ec32:	4d07      	ldr	r5, [pc, #28]	@ (800ec50 <_write_r+0x20>)
 800ec34:	4604      	mov	r4, r0
 800ec36:	4608      	mov	r0, r1
 800ec38:	4611      	mov	r1, r2
 800ec3a:	2200      	movs	r2, #0
 800ec3c:	602a      	str	r2, [r5, #0]
 800ec3e:	461a      	mov	r2, r3
 800ec40:	f7fc ff40 	bl	800bac4 <_write>
 800ec44:	1c43      	adds	r3, r0, #1
 800ec46:	d102      	bne.n	800ec4e <_write_r+0x1e>
 800ec48:	682b      	ldr	r3, [r5, #0]
 800ec4a:	b103      	cbz	r3, 800ec4e <_write_r+0x1e>
 800ec4c:	6023      	str	r3, [r4, #0]
 800ec4e:	bd38      	pop	{r3, r4, r5, pc}
 800ec50:	200023c8 	.word	0x200023c8

0800ec54 <__libc_init_array>:
 800ec54:	b570      	push	{r4, r5, r6, lr}
 800ec56:	4d0d      	ldr	r5, [pc, #52]	@ (800ec8c <__libc_init_array+0x38>)
 800ec58:	4c0d      	ldr	r4, [pc, #52]	@ (800ec90 <__libc_init_array+0x3c>)
 800ec5a:	1b64      	subs	r4, r4, r5
 800ec5c:	10a4      	asrs	r4, r4, #2
 800ec5e:	2600      	movs	r6, #0
 800ec60:	42a6      	cmp	r6, r4
 800ec62:	d109      	bne.n	800ec78 <__libc_init_array+0x24>
 800ec64:	4d0b      	ldr	r5, [pc, #44]	@ (800ec94 <__libc_init_array+0x40>)
 800ec66:	4c0c      	ldr	r4, [pc, #48]	@ (800ec98 <__libc_init_array+0x44>)
 800ec68:	f000 ff44 	bl	800faf4 <_init>
 800ec6c:	1b64      	subs	r4, r4, r5
 800ec6e:	10a4      	asrs	r4, r4, #2
 800ec70:	2600      	movs	r6, #0
 800ec72:	42a6      	cmp	r6, r4
 800ec74:	d105      	bne.n	800ec82 <__libc_init_array+0x2e>
 800ec76:	bd70      	pop	{r4, r5, r6, pc}
 800ec78:	f855 3b04 	ldr.w	r3, [r5], #4
 800ec7c:	4798      	blx	r3
 800ec7e:	3601      	adds	r6, #1
 800ec80:	e7ee      	b.n	800ec60 <__libc_init_array+0xc>
 800ec82:	f855 3b04 	ldr.w	r3, [r5], #4
 800ec86:	4798      	blx	r3
 800ec88:	3601      	adds	r6, #1
 800ec8a:	e7f2      	b.n	800ec72 <__libc_init_array+0x1e>
 800ec8c:	080111a4 	.word	0x080111a4
 800ec90:	080111a4 	.word	0x080111a4
 800ec94:	080111a4 	.word	0x080111a4
 800ec98:	080111a8 	.word	0x080111a8

0800ec9c <__retarget_lock_init_recursive>:
 800ec9c:	4770      	bx	lr

0800ec9e <__retarget_lock_acquire_recursive>:
 800ec9e:	4770      	bx	lr

0800eca0 <__retarget_lock_release_recursive>:
 800eca0:	4770      	bx	lr

0800eca2 <memcpy>:
 800eca2:	440a      	add	r2, r1
 800eca4:	4291      	cmp	r1, r2
 800eca6:	f100 33ff 	add.w	r3, r0, #4294967295
 800ecaa:	d100      	bne.n	800ecae <memcpy+0xc>
 800ecac:	4770      	bx	lr
 800ecae:	b510      	push	{r4, lr}
 800ecb0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ecb4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ecb8:	4291      	cmp	r1, r2
 800ecba:	d1f9      	bne.n	800ecb0 <memcpy+0xe>
 800ecbc:	bd10      	pop	{r4, pc}
	...

0800ecc0 <_free_r>:
 800ecc0:	b538      	push	{r3, r4, r5, lr}
 800ecc2:	4605      	mov	r5, r0
 800ecc4:	2900      	cmp	r1, #0
 800ecc6:	d041      	beq.n	800ed4c <_free_r+0x8c>
 800ecc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eccc:	1f0c      	subs	r4, r1, #4
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	bfb8      	it	lt
 800ecd2:	18e4      	addlt	r4, r4, r3
 800ecd4:	f000 f8e0 	bl	800ee98 <__malloc_lock>
 800ecd8:	4a1d      	ldr	r2, [pc, #116]	@ (800ed50 <_free_r+0x90>)
 800ecda:	6813      	ldr	r3, [r2, #0]
 800ecdc:	b933      	cbnz	r3, 800ecec <_free_r+0x2c>
 800ecde:	6063      	str	r3, [r4, #4]
 800ece0:	6014      	str	r4, [r2, #0]
 800ece2:	4628      	mov	r0, r5
 800ece4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ece8:	f000 b8dc 	b.w	800eea4 <__malloc_unlock>
 800ecec:	42a3      	cmp	r3, r4
 800ecee:	d908      	bls.n	800ed02 <_free_r+0x42>
 800ecf0:	6820      	ldr	r0, [r4, #0]
 800ecf2:	1821      	adds	r1, r4, r0
 800ecf4:	428b      	cmp	r3, r1
 800ecf6:	bf01      	itttt	eq
 800ecf8:	6819      	ldreq	r1, [r3, #0]
 800ecfa:	685b      	ldreq	r3, [r3, #4]
 800ecfc:	1809      	addeq	r1, r1, r0
 800ecfe:	6021      	streq	r1, [r4, #0]
 800ed00:	e7ed      	b.n	800ecde <_free_r+0x1e>
 800ed02:	461a      	mov	r2, r3
 800ed04:	685b      	ldr	r3, [r3, #4]
 800ed06:	b10b      	cbz	r3, 800ed0c <_free_r+0x4c>
 800ed08:	42a3      	cmp	r3, r4
 800ed0a:	d9fa      	bls.n	800ed02 <_free_r+0x42>
 800ed0c:	6811      	ldr	r1, [r2, #0]
 800ed0e:	1850      	adds	r0, r2, r1
 800ed10:	42a0      	cmp	r0, r4
 800ed12:	d10b      	bne.n	800ed2c <_free_r+0x6c>
 800ed14:	6820      	ldr	r0, [r4, #0]
 800ed16:	4401      	add	r1, r0
 800ed18:	1850      	adds	r0, r2, r1
 800ed1a:	4283      	cmp	r3, r0
 800ed1c:	6011      	str	r1, [r2, #0]
 800ed1e:	d1e0      	bne.n	800ece2 <_free_r+0x22>
 800ed20:	6818      	ldr	r0, [r3, #0]
 800ed22:	685b      	ldr	r3, [r3, #4]
 800ed24:	6053      	str	r3, [r2, #4]
 800ed26:	4408      	add	r0, r1
 800ed28:	6010      	str	r0, [r2, #0]
 800ed2a:	e7da      	b.n	800ece2 <_free_r+0x22>
 800ed2c:	d902      	bls.n	800ed34 <_free_r+0x74>
 800ed2e:	230c      	movs	r3, #12
 800ed30:	602b      	str	r3, [r5, #0]
 800ed32:	e7d6      	b.n	800ece2 <_free_r+0x22>
 800ed34:	6820      	ldr	r0, [r4, #0]
 800ed36:	1821      	adds	r1, r4, r0
 800ed38:	428b      	cmp	r3, r1
 800ed3a:	bf04      	itt	eq
 800ed3c:	6819      	ldreq	r1, [r3, #0]
 800ed3e:	685b      	ldreq	r3, [r3, #4]
 800ed40:	6063      	str	r3, [r4, #4]
 800ed42:	bf04      	itt	eq
 800ed44:	1809      	addeq	r1, r1, r0
 800ed46:	6021      	streq	r1, [r4, #0]
 800ed48:	6054      	str	r4, [r2, #4]
 800ed4a:	e7ca      	b.n	800ece2 <_free_r+0x22>
 800ed4c:	bd38      	pop	{r3, r4, r5, pc}
 800ed4e:	bf00      	nop
 800ed50:	200023d4 	.word	0x200023d4

0800ed54 <sbrk_aligned>:
 800ed54:	b570      	push	{r4, r5, r6, lr}
 800ed56:	4e0f      	ldr	r6, [pc, #60]	@ (800ed94 <sbrk_aligned+0x40>)
 800ed58:	460c      	mov	r4, r1
 800ed5a:	6831      	ldr	r1, [r6, #0]
 800ed5c:	4605      	mov	r5, r0
 800ed5e:	b911      	cbnz	r1, 800ed66 <sbrk_aligned+0x12>
 800ed60:	f000 fe4c 	bl	800f9fc <_sbrk_r>
 800ed64:	6030      	str	r0, [r6, #0]
 800ed66:	4621      	mov	r1, r4
 800ed68:	4628      	mov	r0, r5
 800ed6a:	f000 fe47 	bl	800f9fc <_sbrk_r>
 800ed6e:	1c43      	adds	r3, r0, #1
 800ed70:	d103      	bne.n	800ed7a <sbrk_aligned+0x26>
 800ed72:	f04f 34ff 	mov.w	r4, #4294967295
 800ed76:	4620      	mov	r0, r4
 800ed78:	bd70      	pop	{r4, r5, r6, pc}
 800ed7a:	1cc4      	adds	r4, r0, #3
 800ed7c:	f024 0403 	bic.w	r4, r4, #3
 800ed80:	42a0      	cmp	r0, r4
 800ed82:	d0f8      	beq.n	800ed76 <sbrk_aligned+0x22>
 800ed84:	1a21      	subs	r1, r4, r0
 800ed86:	4628      	mov	r0, r5
 800ed88:	f000 fe38 	bl	800f9fc <_sbrk_r>
 800ed8c:	3001      	adds	r0, #1
 800ed8e:	d1f2      	bne.n	800ed76 <sbrk_aligned+0x22>
 800ed90:	e7ef      	b.n	800ed72 <sbrk_aligned+0x1e>
 800ed92:	bf00      	nop
 800ed94:	200023d0 	.word	0x200023d0

0800ed98 <_malloc_r>:
 800ed98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ed9c:	1ccd      	adds	r5, r1, #3
 800ed9e:	f025 0503 	bic.w	r5, r5, #3
 800eda2:	3508      	adds	r5, #8
 800eda4:	2d0c      	cmp	r5, #12
 800eda6:	bf38      	it	cc
 800eda8:	250c      	movcc	r5, #12
 800edaa:	2d00      	cmp	r5, #0
 800edac:	4606      	mov	r6, r0
 800edae:	db01      	blt.n	800edb4 <_malloc_r+0x1c>
 800edb0:	42a9      	cmp	r1, r5
 800edb2:	d904      	bls.n	800edbe <_malloc_r+0x26>
 800edb4:	230c      	movs	r3, #12
 800edb6:	6033      	str	r3, [r6, #0]
 800edb8:	2000      	movs	r0, #0
 800edba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800edbe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ee94 <_malloc_r+0xfc>
 800edc2:	f000 f869 	bl	800ee98 <__malloc_lock>
 800edc6:	f8d8 3000 	ldr.w	r3, [r8]
 800edca:	461c      	mov	r4, r3
 800edcc:	bb44      	cbnz	r4, 800ee20 <_malloc_r+0x88>
 800edce:	4629      	mov	r1, r5
 800edd0:	4630      	mov	r0, r6
 800edd2:	f7ff ffbf 	bl	800ed54 <sbrk_aligned>
 800edd6:	1c43      	adds	r3, r0, #1
 800edd8:	4604      	mov	r4, r0
 800edda:	d158      	bne.n	800ee8e <_malloc_r+0xf6>
 800eddc:	f8d8 4000 	ldr.w	r4, [r8]
 800ede0:	4627      	mov	r7, r4
 800ede2:	2f00      	cmp	r7, #0
 800ede4:	d143      	bne.n	800ee6e <_malloc_r+0xd6>
 800ede6:	2c00      	cmp	r4, #0
 800ede8:	d04b      	beq.n	800ee82 <_malloc_r+0xea>
 800edea:	6823      	ldr	r3, [r4, #0]
 800edec:	4639      	mov	r1, r7
 800edee:	4630      	mov	r0, r6
 800edf0:	eb04 0903 	add.w	r9, r4, r3
 800edf4:	f000 fe02 	bl	800f9fc <_sbrk_r>
 800edf8:	4581      	cmp	r9, r0
 800edfa:	d142      	bne.n	800ee82 <_malloc_r+0xea>
 800edfc:	6821      	ldr	r1, [r4, #0]
 800edfe:	1a6d      	subs	r5, r5, r1
 800ee00:	4629      	mov	r1, r5
 800ee02:	4630      	mov	r0, r6
 800ee04:	f7ff ffa6 	bl	800ed54 <sbrk_aligned>
 800ee08:	3001      	adds	r0, #1
 800ee0a:	d03a      	beq.n	800ee82 <_malloc_r+0xea>
 800ee0c:	6823      	ldr	r3, [r4, #0]
 800ee0e:	442b      	add	r3, r5
 800ee10:	6023      	str	r3, [r4, #0]
 800ee12:	f8d8 3000 	ldr.w	r3, [r8]
 800ee16:	685a      	ldr	r2, [r3, #4]
 800ee18:	bb62      	cbnz	r2, 800ee74 <_malloc_r+0xdc>
 800ee1a:	f8c8 7000 	str.w	r7, [r8]
 800ee1e:	e00f      	b.n	800ee40 <_malloc_r+0xa8>
 800ee20:	6822      	ldr	r2, [r4, #0]
 800ee22:	1b52      	subs	r2, r2, r5
 800ee24:	d420      	bmi.n	800ee68 <_malloc_r+0xd0>
 800ee26:	2a0b      	cmp	r2, #11
 800ee28:	d917      	bls.n	800ee5a <_malloc_r+0xc2>
 800ee2a:	1961      	adds	r1, r4, r5
 800ee2c:	42a3      	cmp	r3, r4
 800ee2e:	6025      	str	r5, [r4, #0]
 800ee30:	bf18      	it	ne
 800ee32:	6059      	strne	r1, [r3, #4]
 800ee34:	6863      	ldr	r3, [r4, #4]
 800ee36:	bf08      	it	eq
 800ee38:	f8c8 1000 	streq.w	r1, [r8]
 800ee3c:	5162      	str	r2, [r4, r5]
 800ee3e:	604b      	str	r3, [r1, #4]
 800ee40:	4630      	mov	r0, r6
 800ee42:	f000 f82f 	bl	800eea4 <__malloc_unlock>
 800ee46:	f104 000b 	add.w	r0, r4, #11
 800ee4a:	1d23      	adds	r3, r4, #4
 800ee4c:	f020 0007 	bic.w	r0, r0, #7
 800ee50:	1ac2      	subs	r2, r0, r3
 800ee52:	bf1c      	itt	ne
 800ee54:	1a1b      	subne	r3, r3, r0
 800ee56:	50a3      	strne	r3, [r4, r2]
 800ee58:	e7af      	b.n	800edba <_malloc_r+0x22>
 800ee5a:	6862      	ldr	r2, [r4, #4]
 800ee5c:	42a3      	cmp	r3, r4
 800ee5e:	bf0c      	ite	eq
 800ee60:	f8c8 2000 	streq.w	r2, [r8]
 800ee64:	605a      	strne	r2, [r3, #4]
 800ee66:	e7eb      	b.n	800ee40 <_malloc_r+0xa8>
 800ee68:	4623      	mov	r3, r4
 800ee6a:	6864      	ldr	r4, [r4, #4]
 800ee6c:	e7ae      	b.n	800edcc <_malloc_r+0x34>
 800ee6e:	463c      	mov	r4, r7
 800ee70:	687f      	ldr	r7, [r7, #4]
 800ee72:	e7b6      	b.n	800ede2 <_malloc_r+0x4a>
 800ee74:	461a      	mov	r2, r3
 800ee76:	685b      	ldr	r3, [r3, #4]
 800ee78:	42a3      	cmp	r3, r4
 800ee7a:	d1fb      	bne.n	800ee74 <_malloc_r+0xdc>
 800ee7c:	2300      	movs	r3, #0
 800ee7e:	6053      	str	r3, [r2, #4]
 800ee80:	e7de      	b.n	800ee40 <_malloc_r+0xa8>
 800ee82:	230c      	movs	r3, #12
 800ee84:	6033      	str	r3, [r6, #0]
 800ee86:	4630      	mov	r0, r6
 800ee88:	f000 f80c 	bl	800eea4 <__malloc_unlock>
 800ee8c:	e794      	b.n	800edb8 <_malloc_r+0x20>
 800ee8e:	6005      	str	r5, [r0, #0]
 800ee90:	e7d6      	b.n	800ee40 <_malloc_r+0xa8>
 800ee92:	bf00      	nop
 800ee94:	200023d4 	.word	0x200023d4

0800ee98 <__malloc_lock>:
 800ee98:	4801      	ldr	r0, [pc, #4]	@ (800eea0 <__malloc_lock+0x8>)
 800ee9a:	f7ff bf00 	b.w	800ec9e <__retarget_lock_acquire_recursive>
 800ee9e:	bf00      	nop
 800eea0:	200023cc 	.word	0x200023cc

0800eea4 <__malloc_unlock>:
 800eea4:	4801      	ldr	r0, [pc, #4]	@ (800eeac <__malloc_unlock+0x8>)
 800eea6:	f7ff befb 	b.w	800eca0 <__retarget_lock_release_recursive>
 800eeaa:	bf00      	nop
 800eeac:	200023cc 	.word	0x200023cc

0800eeb0 <__ssputs_r>:
 800eeb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eeb4:	688e      	ldr	r6, [r1, #8]
 800eeb6:	461f      	mov	r7, r3
 800eeb8:	42be      	cmp	r6, r7
 800eeba:	680b      	ldr	r3, [r1, #0]
 800eebc:	4682      	mov	sl, r0
 800eebe:	460c      	mov	r4, r1
 800eec0:	4690      	mov	r8, r2
 800eec2:	d82d      	bhi.n	800ef20 <__ssputs_r+0x70>
 800eec4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800eec8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800eecc:	d026      	beq.n	800ef1c <__ssputs_r+0x6c>
 800eece:	6965      	ldr	r5, [r4, #20]
 800eed0:	6909      	ldr	r1, [r1, #16]
 800eed2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800eed6:	eba3 0901 	sub.w	r9, r3, r1
 800eeda:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800eede:	1c7b      	adds	r3, r7, #1
 800eee0:	444b      	add	r3, r9
 800eee2:	106d      	asrs	r5, r5, #1
 800eee4:	429d      	cmp	r5, r3
 800eee6:	bf38      	it	cc
 800eee8:	461d      	movcc	r5, r3
 800eeea:	0553      	lsls	r3, r2, #21
 800eeec:	d527      	bpl.n	800ef3e <__ssputs_r+0x8e>
 800eeee:	4629      	mov	r1, r5
 800eef0:	f7ff ff52 	bl	800ed98 <_malloc_r>
 800eef4:	4606      	mov	r6, r0
 800eef6:	b360      	cbz	r0, 800ef52 <__ssputs_r+0xa2>
 800eef8:	6921      	ldr	r1, [r4, #16]
 800eefa:	464a      	mov	r2, r9
 800eefc:	f7ff fed1 	bl	800eca2 <memcpy>
 800ef00:	89a3      	ldrh	r3, [r4, #12]
 800ef02:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ef06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ef0a:	81a3      	strh	r3, [r4, #12]
 800ef0c:	6126      	str	r6, [r4, #16]
 800ef0e:	6165      	str	r5, [r4, #20]
 800ef10:	444e      	add	r6, r9
 800ef12:	eba5 0509 	sub.w	r5, r5, r9
 800ef16:	6026      	str	r6, [r4, #0]
 800ef18:	60a5      	str	r5, [r4, #8]
 800ef1a:	463e      	mov	r6, r7
 800ef1c:	42be      	cmp	r6, r7
 800ef1e:	d900      	bls.n	800ef22 <__ssputs_r+0x72>
 800ef20:	463e      	mov	r6, r7
 800ef22:	6820      	ldr	r0, [r4, #0]
 800ef24:	4632      	mov	r2, r6
 800ef26:	4641      	mov	r1, r8
 800ef28:	f000 fd2c 	bl	800f984 <memmove>
 800ef2c:	68a3      	ldr	r3, [r4, #8]
 800ef2e:	1b9b      	subs	r3, r3, r6
 800ef30:	60a3      	str	r3, [r4, #8]
 800ef32:	6823      	ldr	r3, [r4, #0]
 800ef34:	4433      	add	r3, r6
 800ef36:	6023      	str	r3, [r4, #0]
 800ef38:	2000      	movs	r0, #0
 800ef3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef3e:	462a      	mov	r2, r5
 800ef40:	f000 fd6c 	bl	800fa1c <_realloc_r>
 800ef44:	4606      	mov	r6, r0
 800ef46:	2800      	cmp	r0, #0
 800ef48:	d1e0      	bne.n	800ef0c <__ssputs_r+0x5c>
 800ef4a:	6921      	ldr	r1, [r4, #16]
 800ef4c:	4650      	mov	r0, sl
 800ef4e:	f7ff feb7 	bl	800ecc0 <_free_r>
 800ef52:	230c      	movs	r3, #12
 800ef54:	f8ca 3000 	str.w	r3, [sl]
 800ef58:	89a3      	ldrh	r3, [r4, #12]
 800ef5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ef5e:	81a3      	strh	r3, [r4, #12]
 800ef60:	f04f 30ff 	mov.w	r0, #4294967295
 800ef64:	e7e9      	b.n	800ef3a <__ssputs_r+0x8a>
	...

0800ef68 <_svfiprintf_r>:
 800ef68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef6c:	4698      	mov	r8, r3
 800ef6e:	898b      	ldrh	r3, [r1, #12]
 800ef70:	061b      	lsls	r3, r3, #24
 800ef72:	b09d      	sub	sp, #116	@ 0x74
 800ef74:	4607      	mov	r7, r0
 800ef76:	460d      	mov	r5, r1
 800ef78:	4614      	mov	r4, r2
 800ef7a:	d510      	bpl.n	800ef9e <_svfiprintf_r+0x36>
 800ef7c:	690b      	ldr	r3, [r1, #16]
 800ef7e:	b973      	cbnz	r3, 800ef9e <_svfiprintf_r+0x36>
 800ef80:	2140      	movs	r1, #64	@ 0x40
 800ef82:	f7ff ff09 	bl	800ed98 <_malloc_r>
 800ef86:	6028      	str	r0, [r5, #0]
 800ef88:	6128      	str	r0, [r5, #16]
 800ef8a:	b930      	cbnz	r0, 800ef9a <_svfiprintf_r+0x32>
 800ef8c:	230c      	movs	r3, #12
 800ef8e:	603b      	str	r3, [r7, #0]
 800ef90:	f04f 30ff 	mov.w	r0, #4294967295
 800ef94:	b01d      	add	sp, #116	@ 0x74
 800ef96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef9a:	2340      	movs	r3, #64	@ 0x40
 800ef9c:	616b      	str	r3, [r5, #20]
 800ef9e:	2300      	movs	r3, #0
 800efa0:	9309      	str	r3, [sp, #36]	@ 0x24
 800efa2:	2320      	movs	r3, #32
 800efa4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800efa8:	f8cd 800c 	str.w	r8, [sp, #12]
 800efac:	2330      	movs	r3, #48	@ 0x30
 800efae:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800f14c <_svfiprintf_r+0x1e4>
 800efb2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800efb6:	f04f 0901 	mov.w	r9, #1
 800efba:	4623      	mov	r3, r4
 800efbc:	469a      	mov	sl, r3
 800efbe:	f813 2b01 	ldrb.w	r2, [r3], #1
 800efc2:	b10a      	cbz	r2, 800efc8 <_svfiprintf_r+0x60>
 800efc4:	2a25      	cmp	r2, #37	@ 0x25
 800efc6:	d1f9      	bne.n	800efbc <_svfiprintf_r+0x54>
 800efc8:	ebba 0b04 	subs.w	fp, sl, r4
 800efcc:	d00b      	beq.n	800efe6 <_svfiprintf_r+0x7e>
 800efce:	465b      	mov	r3, fp
 800efd0:	4622      	mov	r2, r4
 800efd2:	4629      	mov	r1, r5
 800efd4:	4638      	mov	r0, r7
 800efd6:	f7ff ff6b 	bl	800eeb0 <__ssputs_r>
 800efda:	3001      	adds	r0, #1
 800efdc:	f000 80a7 	beq.w	800f12e <_svfiprintf_r+0x1c6>
 800efe0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800efe2:	445a      	add	r2, fp
 800efe4:	9209      	str	r2, [sp, #36]	@ 0x24
 800efe6:	f89a 3000 	ldrb.w	r3, [sl]
 800efea:	2b00      	cmp	r3, #0
 800efec:	f000 809f 	beq.w	800f12e <_svfiprintf_r+0x1c6>
 800eff0:	2300      	movs	r3, #0
 800eff2:	f04f 32ff 	mov.w	r2, #4294967295
 800eff6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800effa:	f10a 0a01 	add.w	sl, sl, #1
 800effe:	9304      	str	r3, [sp, #16]
 800f000:	9307      	str	r3, [sp, #28]
 800f002:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f006:	931a      	str	r3, [sp, #104]	@ 0x68
 800f008:	4654      	mov	r4, sl
 800f00a:	2205      	movs	r2, #5
 800f00c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f010:	484e      	ldr	r0, [pc, #312]	@ (800f14c <_svfiprintf_r+0x1e4>)
 800f012:	f7f1 f8bd 	bl	8000190 <memchr>
 800f016:	9a04      	ldr	r2, [sp, #16]
 800f018:	b9d8      	cbnz	r0, 800f052 <_svfiprintf_r+0xea>
 800f01a:	06d0      	lsls	r0, r2, #27
 800f01c:	bf44      	itt	mi
 800f01e:	2320      	movmi	r3, #32
 800f020:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f024:	0711      	lsls	r1, r2, #28
 800f026:	bf44      	itt	mi
 800f028:	232b      	movmi	r3, #43	@ 0x2b
 800f02a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f02e:	f89a 3000 	ldrb.w	r3, [sl]
 800f032:	2b2a      	cmp	r3, #42	@ 0x2a
 800f034:	d015      	beq.n	800f062 <_svfiprintf_r+0xfa>
 800f036:	9a07      	ldr	r2, [sp, #28]
 800f038:	4654      	mov	r4, sl
 800f03a:	2000      	movs	r0, #0
 800f03c:	f04f 0c0a 	mov.w	ip, #10
 800f040:	4621      	mov	r1, r4
 800f042:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f046:	3b30      	subs	r3, #48	@ 0x30
 800f048:	2b09      	cmp	r3, #9
 800f04a:	d94b      	bls.n	800f0e4 <_svfiprintf_r+0x17c>
 800f04c:	b1b0      	cbz	r0, 800f07c <_svfiprintf_r+0x114>
 800f04e:	9207      	str	r2, [sp, #28]
 800f050:	e014      	b.n	800f07c <_svfiprintf_r+0x114>
 800f052:	eba0 0308 	sub.w	r3, r0, r8
 800f056:	fa09 f303 	lsl.w	r3, r9, r3
 800f05a:	4313      	orrs	r3, r2
 800f05c:	9304      	str	r3, [sp, #16]
 800f05e:	46a2      	mov	sl, r4
 800f060:	e7d2      	b.n	800f008 <_svfiprintf_r+0xa0>
 800f062:	9b03      	ldr	r3, [sp, #12]
 800f064:	1d19      	adds	r1, r3, #4
 800f066:	681b      	ldr	r3, [r3, #0]
 800f068:	9103      	str	r1, [sp, #12]
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	bfbb      	ittet	lt
 800f06e:	425b      	neglt	r3, r3
 800f070:	f042 0202 	orrlt.w	r2, r2, #2
 800f074:	9307      	strge	r3, [sp, #28]
 800f076:	9307      	strlt	r3, [sp, #28]
 800f078:	bfb8      	it	lt
 800f07a:	9204      	strlt	r2, [sp, #16]
 800f07c:	7823      	ldrb	r3, [r4, #0]
 800f07e:	2b2e      	cmp	r3, #46	@ 0x2e
 800f080:	d10a      	bne.n	800f098 <_svfiprintf_r+0x130>
 800f082:	7863      	ldrb	r3, [r4, #1]
 800f084:	2b2a      	cmp	r3, #42	@ 0x2a
 800f086:	d132      	bne.n	800f0ee <_svfiprintf_r+0x186>
 800f088:	9b03      	ldr	r3, [sp, #12]
 800f08a:	1d1a      	adds	r2, r3, #4
 800f08c:	681b      	ldr	r3, [r3, #0]
 800f08e:	9203      	str	r2, [sp, #12]
 800f090:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f094:	3402      	adds	r4, #2
 800f096:	9305      	str	r3, [sp, #20]
 800f098:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800f15c <_svfiprintf_r+0x1f4>
 800f09c:	7821      	ldrb	r1, [r4, #0]
 800f09e:	2203      	movs	r2, #3
 800f0a0:	4650      	mov	r0, sl
 800f0a2:	f7f1 f875 	bl	8000190 <memchr>
 800f0a6:	b138      	cbz	r0, 800f0b8 <_svfiprintf_r+0x150>
 800f0a8:	9b04      	ldr	r3, [sp, #16]
 800f0aa:	eba0 000a 	sub.w	r0, r0, sl
 800f0ae:	2240      	movs	r2, #64	@ 0x40
 800f0b0:	4082      	lsls	r2, r0
 800f0b2:	4313      	orrs	r3, r2
 800f0b4:	3401      	adds	r4, #1
 800f0b6:	9304      	str	r3, [sp, #16]
 800f0b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f0bc:	4824      	ldr	r0, [pc, #144]	@ (800f150 <_svfiprintf_r+0x1e8>)
 800f0be:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f0c2:	2206      	movs	r2, #6
 800f0c4:	f7f1 f864 	bl	8000190 <memchr>
 800f0c8:	2800      	cmp	r0, #0
 800f0ca:	d036      	beq.n	800f13a <_svfiprintf_r+0x1d2>
 800f0cc:	4b21      	ldr	r3, [pc, #132]	@ (800f154 <_svfiprintf_r+0x1ec>)
 800f0ce:	bb1b      	cbnz	r3, 800f118 <_svfiprintf_r+0x1b0>
 800f0d0:	9b03      	ldr	r3, [sp, #12]
 800f0d2:	3307      	adds	r3, #7
 800f0d4:	f023 0307 	bic.w	r3, r3, #7
 800f0d8:	3308      	adds	r3, #8
 800f0da:	9303      	str	r3, [sp, #12]
 800f0dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f0de:	4433      	add	r3, r6
 800f0e0:	9309      	str	r3, [sp, #36]	@ 0x24
 800f0e2:	e76a      	b.n	800efba <_svfiprintf_r+0x52>
 800f0e4:	fb0c 3202 	mla	r2, ip, r2, r3
 800f0e8:	460c      	mov	r4, r1
 800f0ea:	2001      	movs	r0, #1
 800f0ec:	e7a8      	b.n	800f040 <_svfiprintf_r+0xd8>
 800f0ee:	2300      	movs	r3, #0
 800f0f0:	3401      	adds	r4, #1
 800f0f2:	9305      	str	r3, [sp, #20]
 800f0f4:	4619      	mov	r1, r3
 800f0f6:	f04f 0c0a 	mov.w	ip, #10
 800f0fa:	4620      	mov	r0, r4
 800f0fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f100:	3a30      	subs	r2, #48	@ 0x30
 800f102:	2a09      	cmp	r2, #9
 800f104:	d903      	bls.n	800f10e <_svfiprintf_r+0x1a6>
 800f106:	2b00      	cmp	r3, #0
 800f108:	d0c6      	beq.n	800f098 <_svfiprintf_r+0x130>
 800f10a:	9105      	str	r1, [sp, #20]
 800f10c:	e7c4      	b.n	800f098 <_svfiprintf_r+0x130>
 800f10e:	fb0c 2101 	mla	r1, ip, r1, r2
 800f112:	4604      	mov	r4, r0
 800f114:	2301      	movs	r3, #1
 800f116:	e7f0      	b.n	800f0fa <_svfiprintf_r+0x192>
 800f118:	ab03      	add	r3, sp, #12
 800f11a:	9300      	str	r3, [sp, #0]
 800f11c:	462a      	mov	r2, r5
 800f11e:	4b0e      	ldr	r3, [pc, #56]	@ (800f158 <_svfiprintf_r+0x1f0>)
 800f120:	a904      	add	r1, sp, #16
 800f122:	4638      	mov	r0, r7
 800f124:	f3af 8000 	nop.w
 800f128:	1c42      	adds	r2, r0, #1
 800f12a:	4606      	mov	r6, r0
 800f12c:	d1d6      	bne.n	800f0dc <_svfiprintf_r+0x174>
 800f12e:	89ab      	ldrh	r3, [r5, #12]
 800f130:	065b      	lsls	r3, r3, #25
 800f132:	f53f af2d 	bmi.w	800ef90 <_svfiprintf_r+0x28>
 800f136:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f138:	e72c      	b.n	800ef94 <_svfiprintf_r+0x2c>
 800f13a:	ab03      	add	r3, sp, #12
 800f13c:	9300      	str	r3, [sp, #0]
 800f13e:	462a      	mov	r2, r5
 800f140:	4b05      	ldr	r3, [pc, #20]	@ (800f158 <_svfiprintf_r+0x1f0>)
 800f142:	a904      	add	r1, sp, #16
 800f144:	4638      	mov	r0, r7
 800f146:	f000 f9bb 	bl	800f4c0 <_printf_i>
 800f14a:	e7ed      	b.n	800f128 <_svfiprintf_r+0x1c0>
 800f14c:	08011166 	.word	0x08011166
 800f150:	08011170 	.word	0x08011170
 800f154:	00000000 	.word	0x00000000
 800f158:	0800eeb1 	.word	0x0800eeb1
 800f15c:	0801116c 	.word	0x0801116c

0800f160 <__sfputc_r>:
 800f160:	6893      	ldr	r3, [r2, #8]
 800f162:	3b01      	subs	r3, #1
 800f164:	2b00      	cmp	r3, #0
 800f166:	b410      	push	{r4}
 800f168:	6093      	str	r3, [r2, #8]
 800f16a:	da08      	bge.n	800f17e <__sfputc_r+0x1e>
 800f16c:	6994      	ldr	r4, [r2, #24]
 800f16e:	42a3      	cmp	r3, r4
 800f170:	db01      	blt.n	800f176 <__sfputc_r+0x16>
 800f172:	290a      	cmp	r1, #10
 800f174:	d103      	bne.n	800f17e <__sfputc_r+0x1e>
 800f176:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f17a:	f7ff bc88 	b.w	800ea8e <__swbuf_r>
 800f17e:	6813      	ldr	r3, [r2, #0]
 800f180:	1c58      	adds	r0, r3, #1
 800f182:	6010      	str	r0, [r2, #0]
 800f184:	7019      	strb	r1, [r3, #0]
 800f186:	4608      	mov	r0, r1
 800f188:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f18c:	4770      	bx	lr

0800f18e <__sfputs_r>:
 800f18e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f190:	4606      	mov	r6, r0
 800f192:	460f      	mov	r7, r1
 800f194:	4614      	mov	r4, r2
 800f196:	18d5      	adds	r5, r2, r3
 800f198:	42ac      	cmp	r4, r5
 800f19a:	d101      	bne.n	800f1a0 <__sfputs_r+0x12>
 800f19c:	2000      	movs	r0, #0
 800f19e:	e007      	b.n	800f1b0 <__sfputs_r+0x22>
 800f1a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f1a4:	463a      	mov	r2, r7
 800f1a6:	4630      	mov	r0, r6
 800f1a8:	f7ff ffda 	bl	800f160 <__sfputc_r>
 800f1ac:	1c43      	adds	r3, r0, #1
 800f1ae:	d1f3      	bne.n	800f198 <__sfputs_r+0xa>
 800f1b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f1b4 <_vfiprintf_r>:
 800f1b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1b8:	460d      	mov	r5, r1
 800f1ba:	b09d      	sub	sp, #116	@ 0x74
 800f1bc:	4614      	mov	r4, r2
 800f1be:	4698      	mov	r8, r3
 800f1c0:	4606      	mov	r6, r0
 800f1c2:	b118      	cbz	r0, 800f1cc <_vfiprintf_r+0x18>
 800f1c4:	6a03      	ldr	r3, [r0, #32]
 800f1c6:	b90b      	cbnz	r3, 800f1cc <_vfiprintf_r+0x18>
 800f1c8:	f7ff fb50 	bl	800e86c <__sinit>
 800f1cc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f1ce:	07d9      	lsls	r1, r3, #31
 800f1d0:	d405      	bmi.n	800f1de <_vfiprintf_r+0x2a>
 800f1d2:	89ab      	ldrh	r3, [r5, #12]
 800f1d4:	059a      	lsls	r2, r3, #22
 800f1d6:	d402      	bmi.n	800f1de <_vfiprintf_r+0x2a>
 800f1d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f1da:	f7ff fd60 	bl	800ec9e <__retarget_lock_acquire_recursive>
 800f1de:	89ab      	ldrh	r3, [r5, #12]
 800f1e0:	071b      	lsls	r3, r3, #28
 800f1e2:	d501      	bpl.n	800f1e8 <_vfiprintf_r+0x34>
 800f1e4:	692b      	ldr	r3, [r5, #16]
 800f1e6:	b99b      	cbnz	r3, 800f210 <_vfiprintf_r+0x5c>
 800f1e8:	4629      	mov	r1, r5
 800f1ea:	4630      	mov	r0, r6
 800f1ec:	f7ff fc8e 	bl	800eb0c <__swsetup_r>
 800f1f0:	b170      	cbz	r0, 800f210 <_vfiprintf_r+0x5c>
 800f1f2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f1f4:	07dc      	lsls	r4, r3, #31
 800f1f6:	d504      	bpl.n	800f202 <_vfiprintf_r+0x4e>
 800f1f8:	f04f 30ff 	mov.w	r0, #4294967295
 800f1fc:	b01d      	add	sp, #116	@ 0x74
 800f1fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f202:	89ab      	ldrh	r3, [r5, #12]
 800f204:	0598      	lsls	r0, r3, #22
 800f206:	d4f7      	bmi.n	800f1f8 <_vfiprintf_r+0x44>
 800f208:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f20a:	f7ff fd49 	bl	800eca0 <__retarget_lock_release_recursive>
 800f20e:	e7f3      	b.n	800f1f8 <_vfiprintf_r+0x44>
 800f210:	2300      	movs	r3, #0
 800f212:	9309      	str	r3, [sp, #36]	@ 0x24
 800f214:	2320      	movs	r3, #32
 800f216:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f21a:	f8cd 800c 	str.w	r8, [sp, #12]
 800f21e:	2330      	movs	r3, #48	@ 0x30
 800f220:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f3d0 <_vfiprintf_r+0x21c>
 800f224:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f228:	f04f 0901 	mov.w	r9, #1
 800f22c:	4623      	mov	r3, r4
 800f22e:	469a      	mov	sl, r3
 800f230:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f234:	b10a      	cbz	r2, 800f23a <_vfiprintf_r+0x86>
 800f236:	2a25      	cmp	r2, #37	@ 0x25
 800f238:	d1f9      	bne.n	800f22e <_vfiprintf_r+0x7a>
 800f23a:	ebba 0b04 	subs.w	fp, sl, r4
 800f23e:	d00b      	beq.n	800f258 <_vfiprintf_r+0xa4>
 800f240:	465b      	mov	r3, fp
 800f242:	4622      	mov	r2, r4
 800f244:	4629      	mov	r1, r5
 800f246:	4630      	mov	r0, r6
 800f248:	f7ff ffa1 	bl	800f18e <__sfputs_r>
 800f24c:	3001      	adds	r0, #1
 800f24e:	f000 80a7 	beq.w	800f3a0 <_vfiprintf_r+0x1ec>
 800f252:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f254:	445a      	add	r2, fp
 800f256:	9209      	str	r2, [sp, #36]	@ 0x24
 800f258:	f89a 3000 	ldrb.w	r3, [sl]
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	f000 809f 	beq.w	800f3a0 <_vfiprintf_r+0x1ec>
 800f262:	2300      	movs	r3, #0
 800f264:	f04f 32ff 	mov.w	r2, #4294967295
 800f268:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f26c:	f10a 0a01 	add.w	sl, sl, #1
 800f270:	9304      	str	r3, [sp, #16]
 800f272:	9307      	str	r3, [sp, #28]
 800f274:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f278:	931a      	str	r3, [sp, #104]	@ 0x68
 800f27a:	4654      	mov	r4, sl
 800f27c:	2205      	movs	r2, #5
 800f27e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f282:	4853      	ldr	r0, [pc, #332]	@ (800f3d0 <_vfiprintf_r+0x21c>)
 800f284:	f7f0 ff84 	bl	8000190 <memchr>
 800f288:	9a04      	ldr	r2, [sp, #16]
 800f28a:	b9d8      	cbnz	r0, 800f2c4 <_vfiprintf_r+0x110>
 800f28c:	06d1      	lsls	r1, r2, #27
 800f28e:	bf44      	itt	mi
 800f290:	2320      	movmi	r3, #32
 800f292:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f296:	0713      	lsls	r3, r2, #28
 800f298:	bf44      	itt	mi
 800f29a:	232b      	movmi	r3, #43	@ 0x2b
 800f29c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f2a0:	f89a 3000 	ldrb.w	r3, [sl]
 800f2a4:	2b2a      	cmp	r3, #42	@ 0x2a
 800f2a6:	d015      	beq.n	800f2d4 <_vfiprintf_r+0x120>
 800f2a8:	9a07      	ldr	r2, [sp, #28]
 800f2aa:	4654      	mov	r4, sl
 800f2ac:	2000      	movs	r0, #0
 800f2ae:	f04f 0c0a 	mov.w	ip, #10
 800f2b2:	4621      	mov	r1, r4
 800f2b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f2b8:	3b30      	subs	r3, #48	@ 0x30
 800f2ba:	2b09      	cmp	r3, #9
 800f2bc:	d94b      	bls.n	800f356 <_vfiprintf_r+0x1a2>
 800f2be:	b1b0      	cbz	r0, 800f2ee <_vfiprintf_r+0x13a>
 800f2c0:	9207      	str	r2, [sp, #28]
 800f2c2:	e014      	b.n	800f2ee <_vfiprintf_r+0x13a>
 800f2c4:	eba0 0308 	sub.w	r3, r0, r8
 800f2c8:	fa09 f303 	lsl.w	r3, r9, r3
 800f2cc:	4313      	orrs	r3, r2
 800f2ce:	9304      	str	r3, [sp, #16]
 800f2d0:	46a2      	mov	sl, r4
 800f2d2:	e7d2      	b.n	800f27a <_vfiprintf_r+0xc6>
 800f2d4:	9b03      	ldr	r3, [sp, #12]
 800f2d6:	1d19      	adds	r1, r3, #4
 800f2d8:	681b      	ldr	r3, [r3, #0]
 800f2da:	9103      	str	r1, [sp, #12]
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	bfbb      	ittet	lt
 800f2e0:	425b      	neglt	r3, r3
 800f2e2:	f042 0202 	orrlt.w	r2, r2, #2
 800f2e6:	9307      	strge	r3, [sp, #28]
 800f2e8:	9307      	strlt	r3, [sp, #28]
 800f2ea:	bfb8      	it	lt
 800f2ec:	9204      	strlt	r2, [sp, #16]
 800f2ee:	7823      	ldrb	r3, [r4, #0]
 800f2f0:	2b2e      	cmp	r3, #46	@ 0x2e
 800f2f2:	d10a      	bne.n	800f30a <_vfiprintf_r+0x156>
 800f2f4:	7863      	ldrb	r3, [r4, #1]
 800f2f6:	2b2a      	cmp	r3, #42	@ 0x2a
 800f2f8:	d132      	bne.n	800f360 <_vfiprintf_r+0x1ac>
 800f2fa:	9b03      	ldr	r3, [sp, #12]
 800f2fc:	1d1a      	adds	r2, r3, #4
 800f2fe:	681b      	ldr	r3, [r3, #0]
 800f300:	9203      	str	r2, [sp, #12]
 800f302:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f306:	3402      	adds	r4, #2
 800f308:	9305      	str	r3, [sp, #20]
 800f30a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f3e0 <_vfiprintf_r+0x22c>
 800f30e:	7821      	ldrb	r1, [r4, #0]
 800f310:	2203      	movs	r2, #3
 800f312:	4650      	mov	r0, sl
 800f314:	f7f0 ff3c 	bl	8000190 <memchr>
 800f318:	b138      	cbz	r0, 800f32a <_vfiprintf_r+0x176>
 800f31a:	9b04      	ldr	r3, [sp, #16]
 800f31c:	eba0 000a 	sub.w	r0, r0, sl
 800f320:	2240      	movs	r2, #64	@ 0x40
 800f322:	4082      	lsls	r2, r0
 800f324:	4313      	orrs	r3, r2
 800f326:	3401      	adds	r4, #1
 800f328:	9304      	str	r3, [sp, #16]
 800f32a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f32e:	4829      	ldr	r0, [pc, #164]	@ (800f3d4 <_vfiprintf_r+0x220>)
 800f330:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f334:	2206      	movs	r2, #6
 800f336:	f7f0 ff2b 	bl	8000190 <memchr>
 800f33a:	2800      	cmp	r0, #0
 800f33c:	d03f      	beq.n	800f3be <_vfiprintf_r+0x20a>
 800f33e:	4b26      	ldr	r3, [pc, #152]	@ (800f3d8 <_vfiprintf_r+0x224>)
 800f340:	bb1b      	cbnz	r3, 800f38a <_vfiprintf_r+0x1d6>
 800f342:	9b03      	ldr	r3, [sp, #12]
 800f344:	3307      	adds	r3, #7
 800f346:	f023 0307 	bic.w	r3, r3, #7
 800f34a:	3308      	adds	r3, #8
 800f34c:	9303      	str	r3, [sp, #12]
 800f34e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f350:	443b      	add	r3, r7
 800f352:	9309      	str	r3, [sp, #36]	@ 0x24
 800f354:	e76a      	b.n	800f22c <_vfiprintf_r+0x78>
 800f356:	fb0c 3202 	mla	r2, ip, r2, r3
 800f35a:	460c      	mov	r4, r1
 800f35c:	2001      	movs	r0, #1
 800f35e:	e7a8      	b.n	800f2b2 <_vfiprintf_r+0xfe>
 800f360:	2300      	movs	r3, #0
 800f362:	3401      	adds	r4, #1
 800f364:	9305      	str	r3, [sp, #20]
 800f366:	4619      	mov	r1, r3
 800f368:	f04f 0c0a 	mov.w	ip, #10
 800f36c:	4620      	mov	r0, r4
 800f36e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f372:	3a30      	subs	r2, #48	@ 0x30
 800f374:	2a09      	cmp	r2, #9
 800f376:	d903      	bls.n	800f380 <_vfiprintf_r+0x1cc>
 800f378:	2b00      	cmp	r3, #0
 800f37a:	d0c6      	beq.n	800f30a <_vfiprintf_r+0x156>
 800f37c:	9105      	str	r1, [sp, #20]
 800f37e:	e7c4      	b.n	800f30a <_vfiprintf_r+0x156>
 800f380:	fb0c 2101 	mla	r1, ip, r1, r2
 800f384:	4604      	mov	r4, r0
 800f386:	2301      	movs	r3, #1
 800f388:	e7f0      	b.n	800f36c <_vfiprintf_r+0x1b8>
 800f38a:	ab03      	add	r3, sp, #12
 800f38c:	9300      	str	r3, [sp, #0]
 800f38e:	462a      	mov	r2, r5
 800f390:	4b12      	ldr	r3, [pc, #72]	@ (800f3dc <_vfiprintf_r+0x228>)
 800f392:	a904      	add	r1, sp, #16
 800f394:	4630      	mov	r0, r6
 800f396:	f3af 8000 	nop.w
 800f39a:	4607      	mov	r7, r0
 800f39c:	1c78      	adds	r0, r7, #1
 800f39e:	d1d6      	bne.n	800f34e <_vfiprintf_r+0x19a>
 800f3a0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f3a2:	07d9      	lsls	r1, r3, #31
 800f3a4:	d405      	bmi.n	800f3b2 <_vfiprintf_r+0x1fe>
 800f3a6:	89ab      	ldrh	r3, [r5, #12]
 800f3a8:	059a      	lsls	r2, r3, #22
 800f3aa:	d402      	bmi.n	800f3b2 <_vfiprintf_r+0x1fe>
 800f3ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f3ae:	f7ff fc77 	bl	800eca0 <__retarget_lock_release_recursive>
 800f3b2:	89ab      	ldrh	r3, [r5, #12]
 800f3b4:	065b      	lsls	r3, r3, #25
 800f3b6:	f53f af1f 	bmi.w	800f1f8 <_vfiprintf_r+0x44>
 800f3ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f3bc:	e71e      	b.n	800f1fc <_vfiprintf_r+0x48>
 800f3be:	ab03      	add	r3, sp, #12
 800f3c0:	9300      	str	r3, [sp, #0]
 800f3c2:	462a      	mov	r2, r5
 800f3c4:	4b05      	ldr	r3, [pc, #20]	@ (800f3dc <_vfiprintf_r+0x228>)
 800f3c6:	a904      	add	r1, sp, #16
 800f3c8:	4630      	mov	r0, r6
 800f3ca:	f000 f879 	bl	800f4c0 <_printf_i>
 800f3ce:	e7e4      	b.n	800f39a <_vfiprintf_r+0x1e6>
 800f3d0:	08011166 	.word	0x08011166
 800f3d4:	08011170 	.word	0x08011170
 800f3d8:	00000000 	.word	0x00000000
 800f3dc:	0800f18f 	.word	0x0800f18f
 800f3e0:	0801116c 	.word	0x0801116c

0800f3e4 <_printf_common>:
 800f3e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f3e8:	4616      	mov	r6, r2
 800f3ea:	4698      	mov	r8, r3
 800f3ec:	688a      	ldr	r2, [r1, #8]
 800f3ee:	690b      	ldr	r3, [r1, #16]
 800f3f0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f3f4:	4293      	cmp	r3, r2
 800f3f6:	bfb8      	it	lt
 800f3f8:	4613      	movlt	r3, r2
 800f3fa:	6033      	str	r3, [r6, #0]
 800f3fc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800f400:	4607      	mov	r7, r0
 800f402:	460c      	mov	r4, r1
 800f404:	b10a      	cbz	r2, 800f40a <_printf_common+0x26>
 800f406:	3301      	adds	r3, #1
 800f408:	6033      	str	r3, [r6, #0]
 800f40a:	6823      	ldr	r3, [r4, #0]
 800f40c:	0699      	lsls	r1, r3, #26
 800f40e:	bf42      	ittt	mi
 800f410:	6833      	ldrmi	r3, [r6, #0]
 800f412:	3302      	addmi	r3, #2
 800f414:	6033      	strmi	r3, [r6, #0]
 800f416:	6825      	ldr	r5, [r4, #0]
 800f418:	f015 0506 	ands.w	r5, r5, #6
 800f41c:	d106      	bne.n	800f42c <_printf_common+0x48>
 800f41e:	f104 0a19 	add.w	sl, r4, #25
 800f422:	68e3      	ldr	r3, [r4, #12]
 800f424:	6832      	ldr	r2, [r6, #0]
 800f426:	1a9b      	subs	r3, r3, r2
 800f428:	42ab      	cmp	r3, r5
 800f42a:	dc26      	bgt.n	800f47a <_printf_common+0x96>
 800f42c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800f430:	6822      	ldr	r2, [r4, #0]
 800f432:	3b00      	subs	r3, #0
 800f434:	bf18      	it	ne
 800f436:	2301      	movne	r3, #1
 800f438:	0692      	lsls	r2, r2, #26
 800f43a:	d42b      	bmi.n	800f494 <_printf_common+0xb0>
 800f43c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800f440:	4641      	mov	r1, r8
 800f442:	4638      	mov	r0, r7
 800f444:	47c8      	blx	r9
 800f446:	3001      	adds	r0, #1
 800f448:	d01e      	beq.n	800f488 <_printf_common+0xa4>
 800f44a:	6823      	ldr	r3, [r4, #0]
 800f44c:	6922      	ldr	r2, [r4, #16]
 800f44e:	f003 0306 	and.w	r3, r3, #6
 800f452:	2b04      	cmp	r3, #4
 800f454:	bf02      	ittt	eq
 800f456:	68e5      	ldreq	r5, [r4, #12]
 800f458:	6833      	ldreq	r3, [r6, #0]
 800f45a:	1aed      	subeq	r5, r5, r3
 800f45c:	68a3      	ldr	r3, [r4, #8]
 800f45e:	bf0c      	ite	eq
 800f460:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f464:	2500      	movne	r5, #0
 800f466:	4293      	cmp	r3, r2
 800f468:	bfc4      	itt	gt
 800f46a:	1a9b      	subgt	r3, r3, r2
 800f46c:	18ed      	addgt	r5, r5, r3
 800f46e:	2600      	movs	r6, #0
 800f470:	341a      	adds	r4, #26
 800f472:	42b5      	cmp	r5, r6
 800f474:	d11a      	bne.n	800f4ac <_printf_common+0xc8>
 800f476:	2000      	movs	r0, #0
 800f478:	e008      	b.n	800f48c <_printf_common+0xa8>
 800f47a:	2301      	movs	r3, #1
 800f47c:	4652      	mov	r2, sl
 800f47e:	4641      	mov	r1, r8
 800f480:	4638      	mov	r0, r7
 800f482:	47c8      	blx	r9
 800f484:	3001      	adds	r0, #1
 800f486:	d103      	bne.n	800f490 <_printf_common+0xac>
 800f488:	f04f 30ff 	mov.w	r0, #4294967295
 800f48c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f490:	3501      	adds	r5, #1
 800f492:	e7c6      	b.n	800f422 <_printf_common+0x3e>
 800f494:	18e1      	adds	r1, r4, r3
 800f496:	1c5a      	adds	r2, r3, #1
 800f498:	2030      	movs	r0, #48	@ 0x30
 800f49a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800f49e:	4422      	add	r2, r4
 800f4a0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800f4a4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800f4a8:	3302      	adds	r3, #2
 800f4aa:	e7c7      	b.n	800f43c <_printf_common+0x58>
 800f4ac:	2301      	movs	r3, #1
 800f4ae:	4622      	mov	r2, r4
 800f4b0:	4641      	mov	r1, r8
 800f4b2:	4638      	mov	r0, r7
 800f4b4:	47c8      	blx	r9
 800f4b6:	3001      	adds	r0, #1
 800f4b8:	d0e6      	beq.n	800f488 <_printf_common+0xa4>
 800f4ba:	3601      	adds	r6, #1
 800f4bc:	e7d9      	b.n	800f472 <_printf_common+0x8e>
	...

0800f4c0 <_printf_i>:
 800f4c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f4c4:	7e0f      	ldrb	r7, [r1, #24]
 800f4c6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f4c8:	2f78      	cmp	r7, #120	@ 0x78
 800f4ca:	4691      	mov	r9, r2
 800f4cc:	4680      	mov	r8, r0
 800f4ce:	460c      	mov	r4, r1
 800f4d0:	469a      	mov	sl, r3
 800f4d2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800f4d6:	d807      	bhi.n	800f4e8 <_printf_i+0x28>
 800f4d8:	2f62      	cmp	r7, #98	@ 0x62
 800f4da:	d80a      	bhi.n	800f4f2 <_printf_i+0x32>
 800f4dc:	2f00      	cmp	r7, #0
 800f4de:	f000 80d2 	beq.w	800f686 <_printf_i+0x1c6>
 800f4e2:	2f58      	cmp	r7, #88	@ 0x58
 800f4e4:	f000 80b9 	beq.w	800f65a <_printf_i+0x19a>
 800f4e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f4ec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800f4f0:	e03a      	b.n	800f568 <_printf_i+0xa8>
 800f4f2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800f4f6:	2b15      	cmp	r3, #21
 800f4f8:	d8f6      	bhi.n	800f4e8 <_printf_i+0x28>
 800f4fa:	a101      	add	r1, pc, #4	@ (adr r1, 800f500 <_printf_i+0x40>)
 800f4fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f500:	0800f559 	.word	0x0800f559
 800f504:	0800f56d 	.word	0x0800f56d
 800f508:	0800f4e9 	.word	0x0800f4e9
 800f50c:	0800f4e9 	.word	0x0800f4e9
 800f510:	0800f4e9 	.word	0x0800f4e9
 800f514:	0800f4e9 	.word	0x0800f4e9
 800f518:	0800f56d 	.word	0x0800f56d
 800f51c:	0800f4e9 	.word	0x0800f4e9
 800f520:	0800f4e9 	.word	0x0800f4e9
 800f524:	0800f4e9 	.word	0x0800f4e9
 800f528:	0800f4e9 	.word	0x0800f4e9
 800f52c:	0800f66d 	.word	0x0800f66d
 800f530:	0800f597 	.word	0x0800f597
 800f534:	0800f627 	.word	0x0800f627
 800f538:	0800f4e9 	.word	0x0800f4e9
 800f53c:	0800f4e9 	.word	0x0800f4e9
 800f540:	0800f68f 	.word	0x0800f68f
 800f544:	0800f4e9 	.word	0x0800f4e9
 800f548:	0800f597 	.word	0x0800f597
 800f54c:	0800f4e9 	.word	0x0800f4e9
 800f550:	0800f4e9 	.word	0x0800f4e9
 800f554:	0800f62f 	.word	0x0800f62f
 800f558:	6833      	ldr	r3, [r6, #0]
 800f55a:	1d1a      	adds	r2, r3, #4
 800f55c:	681b      	ldr	r3, [r3, #0]
 800f55e:	6032      	str	r2, [r6, #0]
 800f560:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f564:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800f568:	2301      	movs	r3, #1
 800f56a:	e09d      	b.n	800f6a8 <_printf_i+0x1e8>
 800f56c:	6833      	ldr	r3, [r6, #0]
 800f56e:	6820      	ldr	r0, [r4, #0]
 800f570:	1d19      	adds	r1, r3, #4
 800f572:	6031      	str	r1, [r6, #0]
 800f574:	0606      	lsls	r6, r0, #24
 800f576:	d501      	bpl.n	800f57c <_printf_i+0xbc>
 800f578:	681d      	ldr	r5, [r3, #0]
 800f57a:	e003      	b.n	800f584 <_printf_i+0xc4>
 800f57c:	0645      	lsls	r5, r0, #25
 800f57e:	d5fb      	bpl.n	800f578 <_printf_i+0xb8>
 800f580:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f584:	2d00      	cmp	r5, #0
 800f586:	da03      	bge.n	800f590 <_printf_i+0xd0>
 800f588:	232d      	movs	r3, #45	@ 0x2d
 800f58a:	426d      	negs	r5, r5
 800f58c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f590:	4859      	ldr	r0, [pc, #356]	@ (800f6f8 <_printf_i+0x238>)
 800f592:	230a      	movs	r3, #10
 800f594:	e011      	b.n	800f5ba <_printf_i+0xfa>
 800f596:	6821      	ldr	r1, [r4, #0]
 800f598:	6833      	ldr	r3, [r6, #0]
 800f59a:	0608      	lsls	r0, r1, #24
 800f59c:	f853 5b04 	ldr.w	r5, [r3], #4
 800f5a0:	d402      	bmi.n	800f5a8 <_printf_i+0xe8>
 800f5a2:	0649      	lsls	r1, r1, #25
 800f5a4:	bf48      	it	mi
 800f5a6:	b2ad      	uxthmi	r5, r5
 800f5a8:	2f6f      	cmp	r7, #111	@ 0x6f
 800f5aa:	4853      	ldr	r0, [pc, #332]	@ (800f6f8 <_printf_i+0x238>)
 800f5ac:	6033      	str	r3, [r6, #0]
 800f5ae:	bf14      	ite	ne
 800f5b0:	230a      	movne	r3, #10
 800f5b2:	2308      	moveq	r3, #8
 800f5b4:	2100      	movs	r1, #0
 800f5b6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f5ba:	6866      	ldr	r6, [r4, #4]
 800f5bc:	60a6      	str	r6, [r4, #8]
 800f5be:	2e00      	cmp	r6, #0
 800f5c0:	bfa2      	ittt	ge
 800f5c2:	6821      	ldrge	r1, [r4, #0]
 800f5c4:	f021 0104 	bicge.w	r1, r1, #4
 800f5c8:	6021      	strge	r1, [r4, #0]
 800f5ca:	b90d      	cbnz	r5, 800f5d0 <_printf_i+0x110>
 800f5cc:	2e00      	cmp	r6, #0
 800f5ce:	d04b      	beq.n	800f668 <_printf_i+0x1a8>
 800f5d0:	4616      	mov	r6, r2
 800f5d2:	fbb5 f1f3 	udiv	r1, r5, r3
 800f5d6:	fb03 5711 	mls	r7, r3, r1, r5
 800f5da:	5dc7      	ldrb	r7, [r0, r7]
 800f5dc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f5e0:	462f      	mov	r7, r5
 800f5e2:	42bb      	cmp	r3, r7
 800f5e4:	460d      	mov	r5, r1
 800f5e6:	d9f4      	bls.n	800f5d2 <_printf_i+0x112>
 800f5e8:	2b08      	cmp	r3, #8
 800f5ea:	d10b      	bne.n	800f604 <_printf_i+0x144>
 800f5ec:	6823      	ldr	r3, [r4, #0]
 800f5ee:	07df      	lsls	r7, r3, #31
 800f5f0:	d508      	bpl.n	800f604 <_printf_i+0x144>
 800f5f2:	6923      	ldr	r3, [r4, #16]
 800f5f4:	6861      	ldr	r1, [r4, #4]
 800f5f6:	4299      	cmp	r1, r3
 800f5f8:	bfde      	ittt	le
 800f5fa:	2330      	movle	r3, #48	@ 0x30
 800f5fc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f600:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f604:	1b92      	subs	r2, r2, r6
 800f606:	6122      	str	r2, [r4, #16]
 800f608:	f8cd a000 	str.w	sl, [sp]
 800f60c:	464b      	mov	r3, r9
 800f60e:	aa03      	add	r2, sp, #12
 800f610:	4621      	mov	r1, r4
 800f612:	4640      	mov	r0, r8
 800f614:	f7ff fee6 	bl	800f3e4 <_printf_common>
 800f618:	3001      	adds	r0, #1
 800f61a:	d14a      	bne.n	800f6b2 <_printf_i+0x1f2>
 800f61c:	f04f 30ff 	mov.w	r0, #4294967295
 800f620:	b004      	add	sp, #16
 800f622:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f626:	6823      	ldr	r3, [r4, #0]
 800f628:	f043 0320 	orr.w	r3, r3, #32
 800f62c:	6023      	str	r3, [r4, #0]
 800f62e:	4833      	ldr	r0, [pc, #204]	@ (800f6fc <_printf_i+0x23c>)
 800f630:	2778      	movs	r7, #120	@ 0x78
 800f632:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f636:	6823      	ldr	r3, [r4, #0]
 800f638:	6831      	ldr	r1, [r6, #0]
 800f63a:	061f      	lsls	r7, r3, #24
 800f63c:	f851 5b04 	ldr.w	r5, [r1], #4
 800f640:	d402      	bmi.n	800f648 <_printf_i+0x188>
 800f642:	065f      	lsls	r7, r3, #25
 800f644:	bf48      	it	mi
 800f646:	b2ad      	uxthmi	r5, r5
 800f648:	6031      	str	r1, [r6, #0]
 800f64a:	07d9      	lsls	r1, r3, #31
 800f64c:	bf44      	itt	mi
 800f64e:	f043 0320 	orrmi.w	r3, r3, #32
 800f652:	6023      	strmi	r3, [r4, #0]
 800f654:	b11d      	cbz	r5, 800f65e <_printf_i+0x19e>
 800f656:	2310      	movs	r3, #16
 800f658:	e7ac      	b.n	800f5b4 <_printf_i+0xf4>
 800f65a:	4827      	ldr	r0, [pc, #156]	@ (800f6f8 <_printf_i+0x238>)
 800f65c:	e7e9      	b.n	800f632 <_printf_i+0x172>
 800f65e:	6823      	ldr	r3, [r4, #0]
 800f660:	f023 0320 	bic.w	r3, r3, #32
 800f664:	6023      	str	r3, [r4, #0]
 800f666:	e7f6      	b.n	800f656 <_printf_i+0x196>
 800f668:	4616      	mov	r6, r2
 800f66a:	e7bd      	b.n	800f5e8 <_printf_i+0x128>
 800f66c:	6833      	ldr	r3, [r6, #0]
 800f66e:	6825      	ldr	r5, [r4, #0]
 800f670:	6961      	ldr	r1, [r4, #20]
 800f672:	1d18      	adds	r0, r3, #4
 800f674:	6030      	str	r0, [r6, #0]
 800f676:	062e      	lsls	r6, r5, #24
 800f678:	681b      	ldr	r3, [r3, #0]
 800f67a:	d501      	bpl.n	800f680 <_printf_i+0x1c0>
 800f67c:	6019      	str	r1, [r3, #0]
 800f67e:	e002      	b.n	800f686 <_printf_i+0x1c6>
 800f680:	0668      	lsls	r0, r5, #25
 800f682:	d5fb      	bpl.n	800f67c <_printf_i+0x1bc>
 800f684:	8019      	strh	r1, [r3, #0]
 800f686:	2300      	movs	r3, #0
 800f688:	6123      	str	r3, [r4, #16]
 800f68a:	4616      	mov	r6, r2
 800f68c:	e7bc      	b.n	800f608 <_printf_i+0x148>
 800f68e:	6833      	ldr	r3, [r6, #0]
 800f690:	1d1a      	adds	r2, r3, #4
 800f692:	6032      	str	r2, [r6, #0]
 800f694:	681e      	ldr	r6, [r3, #0]
 800f696:	6862      	ldr	r2, [r4, #4]
 800f698:	2100      	movs	r1, #0
 800f69a:	4630      	mov	r0, r6
 800f69c:	f7f0 fd78 	bl	8000190 <memchr>
 800f6a0:	b108      	cbz	r0, 800f6a6 <_printf_i+0x1e6>
 800f6a2:	1b80      	subs	r0, r0, r6
 800f6a4:	6060      	str	r0, [r4, #4]
 800f6a6:	6863      	ldr	r3, [r4, #4]
 800f6a8:	6123      	str	r3, [r4, #16]
 800f6aa:	2300      	movs	r3, #0
 800f6ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f6b0:	e7aa      	b.n	800f608 <_printf_i+0x148>
 800f6b2:	6923      	ldr	r3, [r4, #16]
 800f6b4:	4632      	mov	r2, r6
 800f6b6:	4649      	mov	r1, r9
 800f6b8:	4640      	mov	r0, r8
 800f6ba:	47d0      	blx	sl
 800f6bc:	3001      	adds	r0, #1
 800f6be:	d0ad      	beq.n	800f61c <_printf_i+0x15c>
 800f6c0:	6823      	ldr	r3, [r4, #0]
 800f6c2:	079b      	lsls	r3, r3, #30
 800f6c4:	d413      	bmi.n	800f6ee <_printf_i+0x22e>
 800f6c6:	68e0      	ldr	r0, [r4, #12]
 800f6c8:	9b03      	ldr	r3, [sp, #12]
 800f6ca:	4298      	cmp	r0, r3
 800f6cc:	bfb8      	it	lt
 800f6ce:	4618      	movlt	r0, r3
 800f6d0:	e7a6      	b.n	800f620 <_printf_i+0x160>
 800f6d2:	2301      	movs	r3, #1
 800f6d4:	4632      	mov	r2, r6
 800f6d6:	4649      	mov	r1, r9
 800f6d8:	4640      	mov	r0, r8
 800f6da:	47d0      	blx	sl
 800f6dc:	3001      	adds	r0, #1
 800f6de:	d09d      	beq.n	800f61c <_printf_i+0x15c>
 800f6e0:	3501      	adds	r5, #1
 800f6e2:	68e3      	ldr	r3, [r4, #12]
 800f6e4:	9903      	ldr	r1, [sp, #12]
 800f6e6:	1a5b      	subs	r3, r3, r1
 800f6e8:	42ab      	cmp	r3, r5
 800f6ea:	dcf2      	bgt.n	800f6d2 <_printf_i+0x212>
 800f6ec:	e7eb      	b.n	800f6c6 <_printf_i+0x206>
 800f6ee:	2500      	movs	r5, #0
 800f6f0:	f104 0619 	add.w	r6, r4, #25
 800f6f4:	e7f5      	b.n	800f6e2 <_printf_i+0x222>
 800f6f6:	bf00      	nop
 800f6f8:	08011177 	.word	0x08011177
 800f6fc:	08011188 	.word	0x08011188

0800f700 <__sflush_r>:
 800f700:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f708:	0716      	lsls	r6, r2, #28
 800f70a:	4605      	mov	r5, r0
 800f70c:	460c      	mov	r4, r1
 800f70e:	d454      	bmi.n	800f7ba <__sflush_r+0xba>
 800f710:	684b      	ldr	r3, [r1, #4]
 800f712:	2b00      	cmp	r3, #0
 800f714:	dc02      	bgt.n	800f71c <__sflush_r+0x1c>
 800f716:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f718:	2b00      	cmp	r3, #0
 800f71a:	dd48      	ble.n	800f7ae <__sflush_r+0xae>
 800f71c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f71e:	2e00      	cmp	r6, #0
 800f720:	d045      	beq.n	800f7ae <__sflush_r+0xae>
 800f722:	2300      	movs	r3, #0
 800f724:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f728:	682f      	ldr	r7, [r5, #0]
 800f72a:	6a21      	ldr	r1, [r4, #32]
 800f72c:	602b      	str	r3, [r5, #0]
 800f72e:	d030      	beq.n	800f792 <__sflush_r+0x92>
 800f730:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f732:	89a3      	ldrh	r3, [r4, #12]
 800f734:	0759      	lsls	r1, r3, #29
 800f736:	d505      	bpl.n	800f744 <__sflush_r+0x44>
 800f738:	6863      	ldr	r3, [r4, #4]
 800f73a:	1ad2      	subs	r2, r2, r3
 800f73c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f73e:	b10b      	cbz	r3, 800f744 <__sflush_r+0x44>
 800f740:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f742:	1ad2      	subs	r2, r2, r3
 800f744:	2300      	movs	r3, #0
 800f746:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f748:	6a21      	ldr	r1, [r4, #32]
 800f74a:	4628      	mov	r0, r5
 800f74c:	47b0      	blx	r6
 800f74e:	1c43      	adds	r3, r0, #1
 800f750:	89a3      	ldrh	r3, [r4, #12]
 800f752:	d106      	bne.n	800f762 <__sflush_r+0x62>
 800f754:	6829      	ldr	r1, [r5, #0]
 800f756:	291d      	cmp	r1, #29
 800f758:	d82b      	bhi.n	800f7b2 <__sflush_r+0xb2>
 800f75a:	4a2a      	ldr	r2, [pc, #168]	@ (800f804 <__sflush_r+0x104>)
 800f75c:	410a      	asrs	r2, r1
 800f75e:	07d6      	lsls	r6, r2, #31
 800f760:	d427      	bmi.n	800f7b2 <__sflush_r+0xb2>
 800f762:	2200      	movs	r2, #0
 800f764:	6062      	str	r2, [r4, #4]
 800f766:	04d9      	lsls	r1, r3, #19
 800f768:	6922      	ldr	r2, [r4, #16]
 800f76a:	6022      	str	r2, [r4, #0]
 800f76c:	d504      	bpl.n	800f778 <__sflush_r+0x78>
 800f76e:	1c42      	adds	r2, r0, #1
 800f770:	d101      	bne.n	800f776 <__sflush_r+0x76>
 800f772:	682b      	ldr	r3, [r5, #0]
 800f774:	b903      	cbnz	r3, 800f778 <__sflush_r+0x78>
 800f776:	6560      	str	r0, [r4, #84]	@ 0x54
 800f778:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f77a:	602f      	str	r7, [r5, #0]
 800f77c:	b1b9      	cbz	r1, 800f7ae <__sflush_r+0xae>
 800f77e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f782:	4299      	cmp	r1, r3
 800f784:	d002      	beq.n	800f78c <__sflush_r+0x8c>
 800f786:	4628      	mov	r0, r5
 800f788:	f7ff fa9a 	bl	800ecc0 <_free_r>
 800f78c:	2300      	movs	r3, #0
 800f78e:	6363      	str	r3, [r4, #52]	@ 0x34
 800f790:	e00d      	b.n	800f7ae <__sflush_r+0xae>
 800f792:	2301      	movs	r3, #1
 800f794:	4628      	mov	r0, r5
 800f796:	47b0      	blx	r6
 800f798:	4602      	mov	r2, r0
 800f79a:	1c50      	adds	r0, r2, #1
 800f79c:	d1c9      	bne.n	800f732 <__sflush_r+0x32>
 800f79e:	682b      	ldr	r3, [r5, #0]
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	d0c6      	beq.n	800f732 <__sflush_r+0x32>
 800f7a4:	2b1d      	cmp	r3, #29
 800f7a6:	d001      	beq.n	800f7ac <__sflush_r+0xac>
 800f7a8:	2b16      	cmp	r3, #22
 800f7aa:	d11e      	bne.n	800f7ea <__sflush_r+0xea>
 800f7ac:	602f      	str	r7, [r5, #0]
 800f7ae:	2000      	movs	r0, #0
 800f7b0:	e022      	b.n	800f7f8 <__sflush_r+0xf8>
 800f7b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f7b6:	b21b      	sxth	r3, r3
 800f7b8:	e01b      	b.n	800f7f2 <__sflush_r+0xf2>
 800f7ba:	690f      	ldr	r7, [r1, #16]
 800f7bc:	2f00      	cmp	r7, #0
 800f7be:	d0f6      	beq.n	800f7ae <__sflush_r+0xae>
 800f7c0:	0793      	lsls	r3, r2, #30
 800f7c2:	680e      	ldr	r6, [r1, #0]
 800f7c4:	bf08      	it	eq
 800f7c6:	694b      	ldreq	r3, [r1, #20]
 800f7c8:	600f      	str	r7, [r1, #0]
 800f7ca:	bf18      	it	ne
 800f7cc:	2300      	movne	r3, #0
 800f7ce:	eba6 0807 	sub.w	r8, r6, r7
 800f7d2:	608b      	str	r3, [r1, #8]
 800f7d4:	f1b8 0f00 	cmp.w	r8, #0
 800f7d8:	dde9      	ble.n	800f7ae <__sflush_r+0xae>
 800f7da:	6a21      	ldr	r1, [r4, #32]
 800f7dc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f7de:	4643      	mov	r3, r8
 800f7e0:	463a      	mov	r2, r7
 800f7e2:	4628      	mov	r0, r5
 800f7e4:	47b0      	blx	r6
 800f7e6:	2800      	cmp	r0, #0
 800f7e8:	dc08      	bgt.n	800f7fc <__sflush_r+0xfc>
 800f7ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f7ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f7f2:	81a3      	strh	r3, [r4, #12]
 800f7f4:	f04f 30ff 	mov.w	r0, #4294967295
 800f7f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f7fc:	4407      	add	r7, r0
 800f7fe:	eba8 0800 	sub.w	r8, r8, r0
 800f802:	e7e7      	b.n	800f7d4 <__sflush_r+0xd4>
 800f804:	dfbffffe 	.word	0xdfbffffe

0800f808 <_fflush_r>:
 800f808:	b538      	push	{r3, r4, r5, lr}
 800f80a:	690b      	ldr	r3, [r1, #16]
 800f80c:	4605      	mov	r5, r0
 800f80e:	460c      	mov	r4, r1
 800f810:	b913      	cbnz	r3, 800f818 <_fflush_r+0x10>
 800f812:	2500      	movs	r5, #0
 800f814:	4628      	mov	r0, r5
 800f816:	bd38      	pop	{r3, r4, r5, pc}
 800f818:	b118      	cbz	r0, 800f822 <_fflush_r+0x1a>
 800f81a:	6a03      	ldr	r3, [r0, #32]
 800f81c:	b90b      	cbnz	r3, 800f822 <_fflush_r+0x1a>
 800f81e:	f7ff f825 	bl	800e86c <__sinit>
 800f822:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f826:	2b00      	cmp	r3, #0
 800f828:	d0f3      	beq.n	800f812 <_fflush_r+0xa>
 800f82a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f82c:	07d0      	lsls	r0, r2, #31
 800f82e:	d404      	bmi.n	800f83a <_fflush_r+0x32>
 800f830:	0599      	lsls	r1, r3, #22
 800f832:	d402      	bmi.n	800f83a <_fflush_r+0x32>
 800f834:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f836:	f7ff fa32 	bl	800ec9e <__retarget_lock_acquire_recursive>
 800f83a:	4628      	mov	r0, r5
 800f83c:	4621      	mov	r1, r4
 800f83e:	f7ff ff5f 	bl	800f700 <__sflush_r>
 800f842:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f844:	07da      	lsls	r2, r3, #31
 800f846:	4605      	mov	r5, r0
 800f848:	d4e4      	bmi.n	800f814 <_fflush_r+0xc>
 800f84a:	89a3      	ldrh	r3, [r4, #12]
 800f84c:	059b      	lsls	r3, r3, #22
 800f84e:	d4e1      	bmi.n	800f814 <_fflush_r+0xc>
 800f850:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f852:	f7ff fa25 	bl	800eca0 <__retarget_lock_release_recursive>
 800f856:	e7dd      	b.n	800f814 <_fflush_r+0xc>

0800f858 <__swhatbuf_r>:
 800f858:	b570      	push	{r4, r5, r6, lr}
 800f85a:	460c      	mov	r4, r1
 800f85c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f860:	2900      	cmp	r1, #0
 800f862:	b096      	sub	sp, #88	@ 0x58
 800f864:	4615      	mov	r5, r2
 800f866:	461e      	mov	r6, r3
 800f868:	da0d      	bge.n	800f886 <__swhatbuf_r+0x2e>
 800f86a:	89a3      	ldrh	r3, [r4, #12]
 800f86c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f870:	f04f 0100 	mov.w	r1, #0
 800f874:	bf14      	ite	ne
 800f876:	2340      	movne	r3, #64	@ 0x40
 800f878:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f87c:	2000      	movs	r0, #0
 800f87e:	6031      	str	r1, [r6, #0]
 800f880:	602b      	str	r3, [r5, #0]
 800f882:	b016      	add	sp, #88	@ 0x58
 800f884:	bd70      	pop	{r4, r5, r6, pc}
 800f886:	466a      	mov	r2, sp
 800f888:	f000 f896 	bl	800f9b8 <_fstat_r>
 800f88c:	2800      	cmp	r0, #0
 800f88e:	dbec      	blt.n	800f86a <__swhatbuf_r+0x12>
 800f890:	9901      	ldr	r1, [sp, #4]
 800f892:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f896:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f89a:	4259      	negs	r1, r3
 800f89c:	4159      	adcs	r1, r3
 800f89e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f8a2:	e7eb      	b.n	800f87c <__swhatbuf_r+0x24>

0800f8a4 <__smakebuf_r>:
 800f8a4:	898b      	ldrh	r3, [r1, #12]
 800f8a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f8a8:	079d      	lsls	r5, r3, #30
 800f8aa:	4606      	mov	r6, r0
 800f8ac:	460c      	mov	r4, r1
 800f8ae:	d507      	bpl.n	800f8c0 <__smakebuf_r+0x1c>
 800f8b0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f8b4:	6023      	str	r3, [r4, #0]
 800f8b6:	6123      	str	r3, [r4, #16]
 800f8b8:	2301      	movs	r3, #1
 800f8ba:	6163      	str	r3, [r4, #20]
 800f8bc:	b003      	add	sp, #12
 800f8be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f8c0:	ab01      	add	r3, sp, #4
 800f8c2:	466a      	mov	r2, sp
 800f8c4:	f7ff ffc8 	bl	800f858 <__swhatbuf_r>
 800f8c8:	9f00      	ldr	r7, [sp, #0]
 800f8ca:	4605      	mov	r5, r0
 800f8cc:	4639      	mov	r1, r7
 800f8ce:	4630      	mov	r0, r6
 800f8d0:	f7ff fa62 	bl	800ed98 <_malloc_r>
 800f8d4:	b948      	cbnz	r0, 800f8ea <__smakebuf_r+0x46>
 800f8d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f8da:	059a      	lsls	r2, r3, #22
 800f8dc:	d4ee      	bmi.n	800f8bc <__smakebuf_r+0x18>
 800f8de:	f023 0303 	bic.w	r3, r3, #3
 800f8e2:	f043 0302 	orr.w	r3, r3, #2
 800f8e6:	81a3      	strh	r3, [r4, #12]
 800f8e8:	e7e2      	b.n	800f8b0 <__smakebuf_r+0xc>
 800f8ea:	89a3      	ldrh	r3, [r4, #12]
 800f8ec:	6020      	str	r0, [r4, #0]
 800f8ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f8f2:	81a3      	strh	r3, [r4, #12]
 800f8f4:	9b01      	ldr	r3, [sp, #4]
 800f8f6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f8fa:	b15b      	cbz	r3, 800f914 <__smakebuf_r+0x70>
 800f8fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f900:	4630      	mov	r0, r6
 800f902:	f000 f86b 	bl	800f9dc <_isatty_r>
 800f906:	b128      	cbz	r0, 800f914 <__smakebuf_r+0x70>
 800f908:	89a3      	ldrh	r3, [r4, #12]
 800f90a:	f023 0303 	bic.w	r3, r3, #3
 800f90e:	f043 0301 	orr.w	r3, r3, #1
 800f912:	81a3      	strh	r3, [r4, #12]
 800f914:	89a3      	ldrh	r3, [r4, #12]
 800f916:	431d      	orrs	r5, r3
 800f918:	81a5      	strh	r5, [r4, #12]
 800f91a:	e7cf      	b.n	800f8bc <__smakebuf_r+0x18>

0800f91c <_putc_r>:
 800f91c:	b570      	push	{r4, r5, r6, lr}
 800f91e:	460d      	mov	r5, r1
 800f920:	4614      	mov	r4, r2
 800f922:	4606      	mov	r6, r0
 800f924:	b118      	cbz	r0, 800f92e <_putc_r+0x12>
 800f926:	6a03      	ldr	r3, [r0, #32]
 800f928:	b90b      	cbnz	r3, 800f92e <_putc_r+0x12>
 800f92a:	f7fe ff9f 	bl	800e86c <__sinit>
 800f92e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f930:	07d8      	lsls	r0, r3, #31
 800f932:	d405      	bmi.n	800f940 <_putc_r+0x24>
 800f934:	89a3      	ldrh	r3, [r4, #12]
 800f936:	0599      	lsls	r1, r3, #22
 800f938:	d402      	bmi.n	800f940 <_putc_r+0x24>
 800f93a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f93c:	f7ff f9af 	bl	800ec9e <__retarget_lock_acquire_recursive>
 800f940:	68a3      	ldr	r3, [r4, #8]
 800f942:	3b01      	subs	r3, #1
 800f944:	2b00      	cmp	r3, #0
 800f946:	60a3      	str	r3, [r4, #8]
 800f948:	da05      	bge.n	800f956 <_putc_r+0x3a>
 800f94a:	69a2      	ldr	r2, [r4, #24]
 800f94c:	4293      	cmp	r3, r2
 800f94e:	db12      	blt.n	800f976 <_putc_r+0x5a>
 800f950:	b2eb      	uxtb	r3, r5
 800f952:	2b0a      	cmp	r3, #10
 800f954:	d00f      	beq.n	800f976 <_putc_r+0x5a>
 800f956:	6823      	ldr	r3, [r4, #0]
 800f958:	1c5a      	adds	r2, r3, #1
 800f95a:	6022      	str	r2, [r4, #0]
 800f95c:	701d      	strb	r5, [r3, #0]
 800f95e:	b2ed      	uxtb	r5, r5
 800f960:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f962:	07da      	lsls	r2, r3, #31
 800f964:	d405      	bmi.n	800f972 <_putc_r+0x56>
 800f966:	89a3      	ldrh	r3, [r4, #12]
 800f968:	059b      	lsls	r3, r3, #22
 800f96a:	d402      	bmi.n	800f972 <_putc_r+0x56>
 800f96c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f96e:	f7ff f997 	bl	800eca0 <__retarget_lock_release_recursive>
 800f972:	4628      	mov	r0, r5
 800f974:	bd70      	pop	{r4, r5, r6, pc}
 800f976:	4629      	mov	r1, r5
 800f978:	4622      	mov	r2, r4
 800f97a:	4630      	mov	r0, r6
 800f97c:	f7ff f887 	bl	800ea8e <__swbuf_r>
 800f980:	4605      	mov	r5, r0
 800f982:	e7ed      	b.n	800f960 <_putc_r+0x44>

0800f984 <memmove>:
 800f984:	4288      	cmp	r0, r1
 800f986:	b510      	push	{r4, lr}
 800f988:	eb01 0402 	add.w	r4, r1, r2
 800f98c:	d902      	bls.n	800f994 <memmove+0x10>
 800f98e:	4284      	cmp	r4, r0
 800f990:	4623      	mov	r3, r4
 800f992:	d807      	bhi.n	800f9a4 <memmove+0x20>
 800f994:	1e43      	subs	r3, r0, #1
 800f996:	42a1      	cmp	r1, r4
 800f998:	d008      	beq.n	800f9ac <memmove+0x28>
 800f99a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f99e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f9a2:	e7f8      	b.n	800f996 <memmove+0x12>
 800f9a4:	4402      	add	r2, r0
 800f9a6:	4601      	mov	r1, r0
 800f9a8:	428a      	cmp	r2, r1
 800f9aa:	d100      	bne.n	800f9ae <memmove+0x2a>
 800f9ac:	bd10      	pop	{r4, pc}
 800f9ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f9b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f9b6:	e7f7      	b.n	800f9a8 <memmove+0x24>

0800f9b8 <_fstat_r>:
 800f9b8:	b538      	push	{r3, r4, r5, lr}
 800f9ba:	4d07      	ldr	r5, [pc, #28]	@ (800f9d8 <_fstat_r+0x20>)
 800f9bc:	2300      	movs	r3, #0
 800f9be:	4604      	mov	r4, r0
 800f9c0:	4608      	mov	r0, r1
 800f9c2:	4611      	mov	r1, r2
 800f9c4:	602b      	str	r3, [r5, #0]
 800f9c6:	f000 f867 	bl	800fa98 <_fstat>
 800f9ca:	1c43      	adds	r3, r0, #1
 800f9cc:	d102      	bne.n	800f9d4 <_fstat_r+0x1c>
 800f9ce:	682b      	ldr	r3, [r5, #0]
 800f9d0:	b103      	cbz	r3, 800f9d4 <_fstat_r+0x1c>
 800f9d2:	6023      	str	r3, [r4, #0]
 800f9d4:	bd38      	pop	{r3, r4, r5, pc}
 800f9d6:	bf00      	nop
 800f9d8:	200023c8 	.word	0x200023c8

0800f9dc <_isatty_r>:
 800f9dc:	b538      	push	{r3, r4, r5, lr}
 800f9de:	4d06      	ldr	r5, [pc, #24]	@ (800f9f8 <_isatty_r+0x1c>)
 800f9e0:	2300      	movs	r3, #0
 800f9e2:	4604      	mov	r4, r0
 800f9e4:	4608      	mov	r0, r1
 800f9e6:	602b      	str	r3, [r5, #0]
 800f9e8:	f000 f85e 	bl	800faa8 <_isatty>
 800f9ec:	1c43      	adds	r3, r0, #1
 800f9ee:	d102      	bne.n	800f9f6 <_isatty_r+0x1a>
 800f9f0:	682b      	ldr	r3, [r5, #0]
 800f9f2:	b103      	cbz	r3, 800f9f6 <_isatty_r+0x1a>
 800f9f4:	6023      	str	r3, [r4, #0]
 800f9f6:	bd38      	pop	{r3, r4, r5, pc}
 800f9f8:	200023c8 	.word	0x200023c8

0800f9fc <_sbrk_r>:
 800f9fc:	b538      	push	{r3, r4, r5, lr}
 800f9fe:	4d06      	ldr	r5, [pc, #24]	@ (800fa18 <_sbrk_r+0x1c>)
 800fa00:	2300      	movs	r3, #0
 800fa02:	4604      	mov	r4, r0
 800fa04:	4608      	mov	r0, r1
 800fa06:	602b      	str	r3, [r5, #0]
 800fa08:	f000 f866 	bl	800fad8 <_sbrk>
 800fa0c:	1c43      	adds	r3, r0, #1
 800fa0e:	d102      	bne.n	800fa16 <_sbrk_r+0x1a>
 800fa10:	682b      	ldr	r3, [r5, #0]
 800fa12:	b103      	cbz	r3, 800fa16 <_sbrk_r+0x1a>
 800fa14:	6023      	str	r3, [r4, #0]
 800fa16:	bd38      	pop	{r3, r4, r5, pc}
 800fa18:	200023c8 	.word	0x200023c8

0800fa1c <_realloc_r>:
 800fa1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa20:	4680      	mov	r8, r0
 800fa22:	4615      	mov	r5, r2
 800fa24:	460c      	mov	r4, r1
 800fa26:	b921      	cbnz	r1, 800fa32 <_realloc_r+0x16>
 800fa28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fa2c:	4611      	mov	r1, r2
 800fa2e:	f7ff b9b3 	b.w	800ed98 <_malloc_r>
 800fa32:	b92a      	cbnz	r2, 800fa40 <_realloc_r+0x24>
 800fa34:	f7ff f944 	bl	800ecc0 <_free_r>
 800fa38:	2400      	movs	r4, #0
 800fa3a:	4620      	mov	r0, r4
 800fa3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa40:	f000 f81a 	bl	800fa78 <_malloc_usable_size_r>
 800fa44:	4285      	cmp	r5, r0
 800fa46:	4606      	mov	r6, r0
 800fa48:	d802      	bhi.n	800fa50 <_realloc_r+0x34>
 800fa4a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800fa4e:	d8f4      	bhi.n	800fa3a <_realloc_r+0x1e>
 800fa50:	4629      	mov	r1, r5
 800fa52:	4640      	mov	r0, r8
 800fa54:	f7ff f9a0 	bl	800ed98 <_malloc_r>
 800fa58:	4607      	mov	r7, r0
 800fa5a:	2800      	cmp	r0, #0
 800fa5c:	d0ec      	beq.n	800fa38 <_realloc_r+0x1c>
 800fa5e:	42b5      	cmp	r5, r6
 800fa60:	462a      	mov	r2, r5
 800fa62:	4621      	mov	r1, r4
 800fa64:	bf28      	it	cs
 800fa66:	4632      	movcs	r2, r6
 800fa68:	f7ff f91b 	bl	800eca2 <memcpy>
 800fa6c:	4621      	mov	r1, r4
 800fa6e:	4640      	mov	r0, r8
 800fa70:	f7ff f926 	bl	800ecc0 <_free_r>
 800fa74:	463c      	mov	r4, r7
 800fa76:	e7e0      	b.n	800fa3a <_realloc_r+0x1e>

0800fa78 <_malloc_usable_size_r>:
 800fa78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fa7c:	1f18      	subs	r0, r3, #4
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	bfbc      	itt	lt
 800fa82:	580b      	ldrlt	r3, [r1, r0]
 800fa84:	18c0      	addlt	r0, r0, r3
 800fa86:	4770      	bx	lr

0800fa88 <_close>:
 800fa88:	4b02      	ldr	r3, [pc, #8]	@ (800fa94 <_close+0xc>)
 800fa8a:	2258      	movs	r2, #88	@ 0x58
 800fa8c:	601a      	str	r2, [r3, #0]
 800fa8e:	f04f 30ff 	mov.w	r0, #4294967295
 800fa92:	4770      	bx	lr
 800fa94:	200023c8 	.word	0x200023c8

0800fa98 <_fstat>:
 800fa98:	4b02      	ldr	r3, [pc, #8]	@ (800faa4 <_fstat+0xc>)
 800fa9a:	2258      	movs	r2, #88	@ 0x58
 800fa9c:	601a      	str	r2, [r3, #0]
 800fa9e:	f04f 30ff 	mov.w	r0, #4294967295
 800faa2:	4770      	bx	lr
 800faa4:	200023c8 	.word	0x200023c8

0800faa8 <_isatty>:
 800faa8:	4b02      	ldr	r3, [pc, #8]	@ (800fab4 <_isatty+0xc>)
 800faaa:	2258      	movs	r2, #88	@ 0x58
 800faac:	601a      	str	r2, [r3, #0]
 800faae:	2000      	movs	r0, #0
 800fab0:	4770      	bx	lr
 800fab2:	bf00      	nop
 800fab4:	200023c8 	.word	0x200023c8

0800fab8 <_lseek>:
 800fab8:	4b02      	ldr	r3, [pc, #8]	@ (800fac4 <_lseek+0xc>)
 800faba:	2258      	movs	r2, #88	@ 0x58
 800fabc:	601a      	str	r2, [r3, #0]
 800fabe:	f04f 30ff 	mov.w	r0, #4294967295
 800fac2:	4770      	bx	lr
 800fac4:	200023c8 	.word	0x200023c8

0800fac8 <_read>:
 800fac8:	4b02      	ldr	r3, [pc, #8]	@ (800fad4 <_read+0xc>)
 800faca:	2258      	movs	r2, #88	@ 0x58
 800facc:	601a      	str	r2, [r3, #0]
 800face:	f04f 30ff 	mov.w	r0, #4294967295
 800fad2:	4770      	bx	lr
 800fad4:	200023c8 	.word	0x200023c8

0800fad8 <_sbrk>:
 800fad8:	4a04      	ldr	r2, [pc, #16]	@ (800faec <_sbrk+0x14>)
 800fada:	6811      	ldr	r1, [r2, #0]
 800fadc:	4603      	mov	r3, r0
 800fade:	b909      	cbnz	r1, 800fae4 <_sbrk+0xc>
 800fae0:	4903      	ldr	r1, [pc, #12]	@ (800faf0 <_sbrk+0x18>)
 800fae2:	6011      	str	r1, [r2, #0]
 800fae4:	6810      	ldr	r0, [r2, #0]
 800fae6:	4403      	add	r3, r0
 800fae8:	6013      	str	r3, [r2, #0]
 800faea:	4770      	bx	lr
 800faec:	200023d8 	.word	0x200023d8
 800faf0:	200023e0 	.word	0x200023e0

0800faf4 <_init>:
 800faf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800faf6:	bf00      	nop
 800faf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fafa:	bc08      	pop	{r3}
 800fafc:	469e      	mov	lr, r3
 800fafe:	4770      	bx	lr

0800fb00 <_fini>:
 800fb00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb02:	bf00      	nop
 800fb04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fb06:	bc08      	pop	{r3}
 800fb08:	469e      	mov	lr, r3
 800fb0a:	4770      	bx	lr
