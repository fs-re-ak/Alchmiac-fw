
Alchemiac-fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f624  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001690  0800f764  0800f764  00010764  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08010df4  08010df4  00011df4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08010dfc  08010dfc  00011dfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08010e00  08010e00  00011e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000080  20000008  08010e04  00012008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 0000001d  20000088  08010e84  00012088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  200000a8  08010ea1  000120a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002314  200000bc  08010eb2  000120bc  2**2
                  ALLOC
 10 ._user_heap_stack 00001400  200023d0  08010eb2  000123d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00012d8b  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  00013000  2**2
                  ALLOC
 13 MB_MEM1       000001bb  20030028  20030028  00013000  2**2
                  ALLOC
 14 .MB_MEM2      00000ba7  200301e4  08010eb2  000121e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 15 .debug_info   000386e9  00000000  00000000  00012dbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 000073ac  00000000  00000000  0004b4a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000033b8  00000000  00000000  00052850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00002818  00000000  00000000  00055c08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002f4e5  00000000  00000000  00058420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0003d098  00000000  00000000  00087905  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    001096cd  00000000  00000000  000c499d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  001ce06a  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000e628  00000000  00000000  001ce0b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 0000005a  00000000  00000000  001dc6d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200000bc 	.word	0x200000bc
 800015c:	00000000 	.word	0x00000000
 8000160:	0800f74c 	.word	0x0800f74c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200000c0 	.word	0x200000c0
 800017c:	0800f74c 	.word	0x0800f74c

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_dmul>:
 8000230:	b570      	push	{r4, r5, r6, lr}
 8000232:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000236:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800023a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800023e:	bf1d      	ittte	ne
 8000240:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000244:	ea94 0f0c 	teqne	r4, ip
 8000248:	ea95 0f0c 	teqne	r5, ip
 800024c:	f000 f8de 	bleq	800040c <__aeabi_dmul+0x1dc>
 8000250:	442c      	add	r4, r5
 8000252:	ea81 0603 	eor.w	r6, r1, r3
 8000256:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800025a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800025e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000262:	bf18      	it	ne
 8000264:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000268:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800026c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000270:	d038      	beq.n	80002e4 <__aeabi_dmul+0xb4>
 8000272:	fba0 ce02 	umull	ip, lr, r0, r2
 8000276:	f04f 0500 	mov.w	r5, #0
 800027a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800027e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000282:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000286:	f04f 0600 	mov.w	r6, #0
 800028a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800028e:	f09c 0f00 	teq	ip, #0
 8000292:	bf18      	it	ne
 8000294:	f04e 0e01 	orrne.w	lr, lr, #1
 8000298:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800029c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80002a0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80002a4:	d204      	bcs.n	80002b0 <__aeabi_dmul+0x80>
 80002a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002aa:	416d      	adcs	r5, r5
 80002ac:	eb46 0606 	adc.w	r6, r6, r6
 80002b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002c4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80002c8:	bf88      	it	hi
 80002ca:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80002ce:	d81e      	bhi.n	800030e <__aeabi_dmul+0xde>
 80002d0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80002d4:	bf08      	it	eq
 80002d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002da:	f150 0000 	adcs.w	r0, r0, #0
 80002de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002e2:	bd70      	pop	{r4, r5, r6, pc}
 80002e4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80002e8:	ea46 0101 	orr.w	r1, r6, r1
 80002ec:	ea40 0002 	orr.w	r0, r0, r2
 80002f0:	ea81 0103 	eor.w	r1, r1, r3
 80002f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002f8:	bfc2      	ittt	gt
 80002fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000302:	bd70      	popgt	{r4, r5, r6, pc}
 8000304:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000308:	f04f 0e00 	mov.w	lr, #0
 800030c:	3c01      	subs	r4, #1
 800030e:	f300 80ab 	bgt.w	8000468 <__aeabi_dmul+0x238>
 8000312:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000316:	bfde      	ittt	le
 8000318:	2000      	movle	r0, #0
 800031a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800031e:	bd70      	pople	{r4, r5, r6, pc}
 8000320:	f1c4 0400 	rsb	r4, r4, #0
 8000324:	3c20      	subs	r4, #32
 8000326:	da35      	bge.n	8000394 <__aeabi_dmul+0x164>
 8000328:	340c      	adds	r4, #12
 800032a:	dc1b      	bgt.n	8000364 <__aeabi_dmul+0x134>
 800032c:	f104 0414 	add.w	r4, r4, #20
 8000330:	f1c4 0520 	rsb	r5, r4, #32
 8000334:	fa00 f305 	lsl.w	r3, r0, r5
 8000338:	fa20 f004 	lsr.w	r0, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea40 0002 	orr.w	r0, r0, r2
 8000344:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000348:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800034c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000350:	fa21 f604 	lsr.w	r6, r1, r4
 8000354:	eb42 0106 	adc.w	r1, r2, r6
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f1c4 040c 	rsb	r4, r4, #12
 8000368:	f1c4 0520 	rsb	r5, r4, #32
 800036c:	fa00 f304 	lsl.w	r3, r0, r4
 8000370:	fa20 f005 	lsr.w	r0, r0, r5
 8000374:	fa01 f204 	lsl.w	r2, r1, r4
 8000378:	ea40 0002 	orr.w	r0, r0, r2
 800037c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000380:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000384:	f141 0100 	adc.w	r1, r1, #0
 8000388:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800038c:	bf08      	it	eq
 800038e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000392:	bd70      	pop	{r4, r5, r6, pc}
 8000394:	f1c4 0520 	rsb	r5, r4, #32
 8000398:	fa00 f205 	lsl.w	r2, r0, r5
 800039c:	ea4e 0e02 	orr.w	lr, lr, r2
 80003a0:	fa20 f304 	lsr.w	r3, r0, r4
 80003a4:	fa01 f205 	lsl.w	r2, r1, r5
 80003a8:	ea43 0302 	orr.w	r3, r3, r2
 80003ac:	fa21 f004 	lsr.w	r0, r1, r4
 80003b0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003b4:	fa21 f204 	lsr.w	r2, r1, r4
 80003b8:	ea20 0002 	bic.w	r0, r0, r2
 80003bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003c4:	bf08      	it	eq
 80003c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003ca:	bd70      	pop	{r4, r5, r6, pc}
 80003cc:	f094 0f00 	teq	r4, #0
 80003d0:	d10f      	bne.n	80003f2 <__aeabi_dmul+0x1c2>
 80003d2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80003d6:	0040      	lsls	r0, r0, #1
 80003d8:	eb41 0101 	adc.w	r1, r1, r1
 80003dc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80003e0:	bf08      	it	eq
 80003e2:	3c01      	subeq	r4, #1
 80003e4:	d0f7      	beq.n	80003d6 <__aeabi_dmul+0x1a6>
 80003e6:	ea41 0106 	orr.w	r1, r1, r6
 80003ea:	f095 0f00 	teq	r5, #0
 80003ee:	bf18      	it	ne
 80003f0:	4770      	bxne	lr
 80003f2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80003f6:	0052      	lsls	r2, r2, #1
 80003f8:	eb43 0303 	adc.w	r3, r3, r3
 80003fc:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000400:	bf08      	it	eq
 8000402:	3d01      	subeq	r5, #1
 8000404:	d0f7      	beq.n	80003f6 <__aeabi_dmul+0x1c6>
 8000406:	ea43 0306 	orr.w	r3, r3, r6
 800040a:	4770      	bx	lr
 800040c:	ea94 0f0c 	teq	r4, ip
 8000410:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000414:	bf18      	it	ne
 8000416:	ea95 0f0c 	teqne	r5, ip
 800041a:	d00c      	beq.n	8000436 <__aeabi_dmul+0x206>
 800041c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000420:	bf18      	it	ne
 8000422:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000426:	d1d1      	bne.n	80003cc <__aeabi_dmul+0x19c>
 8000428:	ea81 0103 	eor.w	r1, r1, r3
 800042c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000430:	f04f 0000 	mov.w	r0, #0
 8000434:	bd70      	pop	{r4, r5, r6, pc}
 8000436:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800043a:	bf06      	itte	eq
 800043c:	4610      	moveq	r0, r2
 800043e:	4619      	moveq	r1, r3
 8000440:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000444:	d019      	beq.n	800047a <__aeabi_dmul+0x24a>
 8000446:	ea94 0f0c 	teq	r4, ip
 800044a:	d102      	bne.n	8000452 <__aeabi_dmul+0x222>
 800044c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000450:	d113      	bne.n	800047a <__aeabi_dmul+0x24a>
 8000452:	ea95 0f0c 	teq	r5, ip
 8000456:	d105      	bne.n	8000464 <__aeabi_dmul+0x234>
 8000458:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800045c:	bf1c      	itt	ne
 800045e:	4610      	movne	r0, r2
 8000460:	4619      	movne	r1, r3
 8000462:	d10a      	bne.n	800047a <__aeabi_dmul+0x24a>
 8000464:	ea81 0103 	eor.w	r1, r1, r3
 8000468:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800046c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000470:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000474:	f04f 0000 	mov.w	r0, #0
 8000478:	bd70      	pop	{r4, r5, r6, pc}
 800047a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800047e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000482:	bd70      	pop	{r4, r5, r6, pc}

08000484 <__aeabi_drsub>:
 8000484:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000488:	e002      	b.n	8000490 <__adddf3>
 800048a:	bf00      	nop

0800048c <__aeabi_dsub>:
 800048c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000490 <__adddf3>:
 8000490:	b530      	push	{r4, r5, lr}
 8000492:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000496:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800049a:	ea94 0f05 	teq	r4, r5
 800049e:	bf08      	it	eq
 80004a0:	ea90 0f02 	teqeq	r0, r2
 80004a4:	bf1f      	itttt	ne
 80004a6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004aa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004ae:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004b2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b6:	f000 80e2 	beq.w	800067e <__adddf3+0x1ee>
 80004ba:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004be:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004c2:	bfb8      	it	lt
 80004c4:	426d      	neglt	r5, r5
 80004c6:	dd0c      	ble.n	80004e2 <__adddf3+0x52>
 80004c8:	442c      	add	r4, r5
 80004ca:	ea80 0202 	eor.w	r2, r0, r2
 80004ce:	ea81 0303 	eor.w	r3, r1, r3
 80004d2:	ea82 0000 	eor.w	r0, r2, r0
 80004d6:	ea83 0101 	eor.w	r1, r3, r1
 80004da:	ea80 0202 	eor.w	r2, r0, r2
 80004de:	ea81 0303 	eor.w	r3, r1, r3
 80004e2:	2d36      	cmp	r5, #54	@ 0x36
 80004e4:	bf88      	it	hi
 80004e6:	bd30      	pophi	{r4, r5, pc}
 80004e8:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80004ec:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004f0:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80004f4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004f8:	d002      	beq.n	8000500 <__adddf3+0x70>
 80004fa:	4240      	negs	r0, r0
 80004fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000500:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000504:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000508:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800050c:	d002      	beq.n	8000514 <__adddf3+0x84>
 800050e:	4252      	negs	r2, r2
 8000510:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000514:	ea94 0f05 	teq	r4, r5
 8000518:	f000 80a7 	beq.w	800066a <__adddf3+0x1da>
 800051c:	f1a4 0401 	sub.w	r4, r4, #1
 8000520:	f1d5 0e20 	rsbs	lr, r5, #32
 8000524:	db0d      	blt.n	8000542 <__adddf3+0xb2>
 8000526:	fa02 fc0e 	lsl.w	ip, r2, lr
 800052a:	fa22 f205 	lsr.w	r2, r2, r5
 800052e:	1880      	adds	r0, r0, r2
 8000530:	f141 0100 	adc.w	r1, r1, #0
 8000534:	fa03 f20e 	lsl.w	r2, r3, lr
 8000538:	1880      	adds	r0, r0, r2
 800053a:	fa43 f305 	asr.w	r3, r3, r5
 800053e:	4159      	adcs	r1, r3
 8000540:	e00e      	b.n	8000560 <__adddf3+0xd0>
 8000542:	f1a5 0520 	sub.w	r5, r5, #32
 8000546:	f10e 0e20 	add.w	lr, lr, #32
 800054a:	2a01      	cmp	r2, #1
 800054c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000550:	bf28      	it	cs
 8000552:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000556:	fa43 f305 	asr.w	r3, r3, r5
 800055a:	18c0      	adds	r0, r0, r3
 800055c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000560:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000564:	d507      	bpl.n	8000576 <__adddf3+0xe6>
 8000566:	f04f 0e00 	mov.w	lr, #0
 800056a:	f1dc 0c00 	rsbs	ip, ip, #0
 800056e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000572:	eb6e 0101 	sbc.w	r1, lr, r1
 8000576:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800057a:	d31b      	bcc.n	80005b4 <__adddf3+0x124>
 800057c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000580:	d30c      	bcc.n	800059c <__adddf3+0x10c>
 8000582:	0849      	lsrs	r1, r1, #1
 8000584:	ea5f 0030 	movs.w	r0, r0, rrx
 8000588:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800058c:	f104 0401 	add.w	r4, r4, #1
 8000590:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000594:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000598:	f080 809a 	bcs.w	80006d0 <__adddf3+0x240>
 800059c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80005a0:	bf08      	it	eq
 80005a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005a6:	f150 0000 	adcs.w	r0, r0, #0
 80005aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ae:	ea41 0105 	orr.w	r1, r1, r5
 80005b2:	bd30      	pop	{r4, r5, pc}
 80005b4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005b8:	4140      	adcs	r0, r0
 80005ba:	eb41 0101 	adc.w	r1, r1, r1
 80005be:	3c01      	subs	r4, #1
 80005c0:	bf28      	it	cs
 80005c2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80005c6:	d2e9      	bcs.n	800059c <__adddf3+0x10c>
 80005c8:	f091 0f00 	teq	r1, #0
 80005cc:	bf04      	itt	eq
 80005ce:	4601      	moveq	r1, r0
 80005d0:	2000      	moveq	r0, #0
 80005d2:	fab1 f381 	clz	r3, r1
 80005d6:	bf08      	it	eq
 80005d8:	3320      	addeq	r3, #32
 80005da:	f1a3 030b 	sub.w	r3, r3, #11
 80005de:	f1b3 0220 	subs.w	r2, r3, #32
 80005e2:	da0c      	bge.n	80005fe <__adddf3+0x16e>
 80005e4:	320c      	adds	r2, #12
 80005e6:	dd08      	ble.n	80005fa <__adddf3+0x16a>
 80005e8:	f102 0c14 	add.w	ip, r2, #20
 80005ec:	f1c2 020c 	rsb	r2, r2, #12
 80005f0:	fa01 f00c 	lsl.w	r0, r1, ip
 80005f4:	fa21 f102 	lsr.w	r1, r1, r2
 80005f8:	e00c      	b.n	8000614 <__adddf3+0x184>
 80005fa:	f102 0214 	add.w	r2, r2, #20
 80005fe:	bfd8      	it	le
 8000600:	f1c2 0c20 	rsble	ip, r2, #32
 8000604:	fa01 f102 	lsl.w	r1, r1, r2
 8000608:	fa20 fc0c 	lsr.w	ip, r0, ip
 800060c:	bfdc      	itt	le
 800060e:	ea41 010c 	orrle.w	r1, r1, ip
 8000612:	4090      	lslle	r0, r2
 8000614:	1ae4      	subs	r4, r4, r3
 8000616:	bfa2      	ittt	ge
 8000618:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800061c:	4329      	orrge	r1, r5
 800061e:	bd30      	popge	{r4, r5, pc}
 8000620:	ea6f 0404 	mvn.w	r4, r4
 8000624:	3c1f      	subs	r4, #31
 8000626:	da1c      	bge.n	8000662 <__adddf3+0x1d2>
 8000628:	340c      	adds	r4, #12
 800062a:	dc0e      	bgt.n	800064a <__adddf3+0x1ba>
 800062c:	f104 0414 	add.w	r4, r4, #20
 8000630:	f1c4 0220 	rsb	r2, r4, #32
 8000634:	fa20 f004 	lsr.w	r0, r0, r4
 8000638:	fa01 f302 	lsl.w	r3, r1, r2
 800063c:	ea40 0003 	orr.w	r0, r0, r3
 8000640:	fa21 f304 	lsr.w	r3, r1, r4
 8000644:	ea45 0103 	orr.w	r1, r5, r3
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	f1c4 040c 	rsb	r4, r4, #12
 800064e:	f1c4 0220 	rsb	r2, r4, #32
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 f304 	lsl.w	r3, r1, r4
 800065a:	ea40 0003 	orr.w	r0, r0, r3
 800065e:	4629      	mov	r1, r5
 8000660:	bd30      	pop	{r4, r5, pc}
 8000662:	fa21 f004 	lsr.w	r0, r1, r4
 8000666:	4629      	mov	r1, r5
 8000668:	bd30      	pop	{r4, r5, pc}
 800066a:	f094 0f00 	teq	r4, #0
 800066e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000672:	bf06      	itte	eq
 8000674:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000678:	3401      	addeq	r4, #1
 800067a:	3d01      	subne	r5, #1
 800067c:	e74e      	b.n	800051c <__adddf3+0x8c>
 800067e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000682:	bf18      	it	ne
 8000684:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000688:	d029      	beq.n	80006de <__adddf3+0x24e>
 800068a:	ea94 0f05 	teq	r4, r5
 800068e:	bf08      	it	eq
 8000690:	ea90 0f02 	teqeq	r0, r2
 8000694:	d005      	beq.n	80006a2 <__adddf3+0x212>
 8000696:	ea54 0c00 	orrs.w	ip, r4, r0
 800069a:	bf04      	itt	eq
 800069c:	4619      	moveq	r1, r3
 800069e:	4610      	moveq	r0, r2
 80006a0:	bd30      	pop	{r4, r5, pc}
 80006a2:	ea91 0f03 	teq	r1, r3
 80006a6:	bf1e      	ittt	ne
 80006a8:	2100      	movne	r1, #0
 80006aa:	2000      	movne	r0, #0
 80006ac:	bd30      	popne	{r4, r5, pc}
 80006ae:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006b2:	d105      	bne.n	80006c0 <__adddf3+0x230>
 80006b4:	0040      	lsls	r0, r0, #1
 80006b6:	4149      	adcs	r1, r1
 80006b8:	bf28      	it	cs
 80006ba:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80006be:	bd30      	pop	{r4, r5, pc}
 80006c0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80006c4:	bf3c      	itt	cc
 80006c6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80006ca:	bd30      	popcc	{r4, r5, pc}
 80006cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006d0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80006d4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd30      	pop	{r4, r5, pc}
 80006de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006e2:	bf1a      	itte	ne
 80006e4:	4619      	movne	r1, r3
 80006e6:	4610      	movne	r0, r2
 80006e8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006ec:	bf1c      	itt	ne
 80006ee:	460b      	movne	r3, r1
 80006f0:	4602      	movne	r2, r0
 80006f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006f6:	bf06      	itte	eq
 80006f8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006fc:	ea91 0f03 	teqeq	r1, r3
 8000700:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000704:	bd30      	pop	{r4, r5, pc}
 8000706:	bf00      	nop

08000708 <__aeabi_ui2d>:
 8000708:	f090 0f00 	teq	r0, #0
 800070c:	bf04      	itt	eq
 800070e:	2100      	moveq	r1, #0
 8000710:	4770      	bxeq	lr
 8000712:	b530      	push	{r4, r5, lr}
 8000714:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000718:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800071c:	f04f 0500 	mov.w	r5, #0
 8000720:	f04f 0100 	mov.w	r1, #0
 8000724:	e750      	b.n	80005c8 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_i2d>:
 8000728:	f090 0f00 	teq	r0, #0
 800072c:	bf04      	itt	eq
 800072e:	2100      	moveq	r1, #0
 8000730:	4770      	bxeq	lr
 8000732:	b530      	push	{r4, r5, lr}
 8000734:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000738:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800073c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000740:	bf48      	it	mi
 8000742:	4240      	negmi	r0, r0
 8000744:	f04f 0100 	mov.w	r1, #0
 8000748:	e73e      	b.n	80005c8 <__adddf3+0x138>
 800074a:	bf00      	nop

0800074c <__aeabi_f2d>:
 800074c:	0042      	lsls	r2, r0, #1
 800074e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000752:	ea4f 0131 	mov.w	r1, r1, rrx
 8000756:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800075a:	bf1f      	itttt	ne
 800075c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000760:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000764:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000768:	4770      	bxne	lr
 800076a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800076e:	bf08      	it	eq
 8000770:	4770      	bxeq	lr
 8000772:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000776:	bf04      	itt	eq
 8000778:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800077c:	4770      	bxeq	lr
 800077e:	b530      	push	{r4, r5, lr}
 8000780:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000784:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000788:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	e71c      	b.n	80005c8 <__adddf3+0x138>
 800078e:	bf00      	nop

08000790 <__aeabi_ul2d>:
 8000790:	ea50 0201 	orrs.w	r2, r0, r1
 8000794:	bf08      	it	eq
 8000796:	4770      	bxeq	lr
 8000798:	b530      	push	{r4, r5, lr}
 800079a:	f04f 0500 	mov.w	r5, #0
 800079e:	e00a      	b.n	80007b6 <__aeabi_l2d+0x16>

080007a0 <__aeabi_l2d>:
 80007a0:	ea50 0201 	orrs.w	r2, r0, r1
 80007a4:	bf08      	it	eq
 80007a6:	4770      	bxeq	lr
 80007a8:	b530      	push	{r4, r5, lr}
 80007aa:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80007ae:	d502      	bpl.n	80007b6 <__aeabi_l2d+0x16>
 80007b0:	4240      	negs	r0, r0
 80007b2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007b6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007ba:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007be:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007c2:	f43f aed8 	beq.w	8000576 <__adddf3+0xe6>
 80007c6:	f04f 0203 	mov.w	r2, #3
 80007ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007ce:	bf18      	it	ne
 80007d0:	3203      	addne	r2, #3
 80007d2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007d6:	bf18      	it	ne
 80007d8:	3203      	addne	r2, #3
 80007da:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007de:	f1c2 0320 	rsb	r3, r2, #32
 80007e2:	fa00 fc03 	lsl.w	ip, r0, r3
 80007e6:	fa20 f002 	lsr.w	r0, r0, r2
 80007ea:	fa01 fe03 	lsl.w	lr, r1, r3
 80007ee:	ea40 000e 	orr.w	r0, r0, lr
 80007f2:	fa21 f102 	lsr.w	r1, r1, r2
 80007f6:	4414      	add	r4, r2
 80007f8:	e6bd      	b.n	8000576 <__adddf3+0xe6>
 80007fa:	bf00      	nop

080007fc <__aeabi_uldivmod>:
 80007fc:	b953      	cbnz	r3, 8000814 <__aeabi_uldivmod+0x18>
 80007fe:	b94a      	cbnz	r2, 8000814 <__aeabi_uldivmod+0x18>
 8000800:	2900      	cmp	r1, #0
 8000802:	bf08      	it	eq
 8000804:	2800      	cmpeq	r0, #0
 8000806:	bf1c      	itt	ne
 8000808:	f04f 31ff 	movne.w	r1, #4294967295
 800080c:	f04f 30ff 	movne.w	r0, #4294967295
 8000810:	f000 b96a 	b.w	8000ae8 <__aeabi_idiv0>
 8000814:	f1ad 0c08 	sub.w	ip, sp, #8
 8000818:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800081c:	f000 f806 	bl	800082c <__udivmoddi4>
 8000820:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000824:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000828:	b004      	add	sp, #16
 800082a:	4770      	bx	lr

0800082c <__udivmoddi4>:
 800082c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000830:	9d08      	ldr	r5, [sp, #32]
 8000832:	460c      	mov	r4, r1
 8000834:	2b00      	cmp	r3, #0
 8000836:	d14e      	bne.n	80008d6 <__udivmoddi4+0xaa>
 8000838:	4694      	mov	ip, r2
 800083a:	458c      	cmp	ip, r1
 800083c:	4686      	mov	lr, r0
 800083e:	fab2 f282 	clz	r2, r2
 8000842:	d962      	bls.n	800090a <__udivmoddi4+0xde>
 8000844:	b14a      	cbz	r2, 800085a <__udivmoddi4+0x2e>
 8000846:	f1c2 0320 	rsb	r3, r2, #32
 800084a:	4091      	lsls	r1, r2
 800084c:	fa20 f303 	lsr.w	r3, r0, r3
 8000850:	fa0c fc02 	lsl.w	ip, ip, r2
 8000854:	4319      	orrs	r1, r3
 8000856:	fa00 fe02 	lsl.w	lr, r0, r2
 800085a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800085e:	fa1f f68c 	uxth.w	r6, ip
 8000862:	fbb1 f4f7 	udiv	r4, r1, r7
 8000866:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800086a:	fb07 1114 	mls	r1, r7, r4, r1
 800086e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000872:	fb04 f106 	mul.w	r1, r4, r6
 8000876:	4299      	cmp	r1, r3
 8000878:	d90a      	bls.n	8000890 <__udivmoddi4+0x64>
 800087a:	eb1c 0303 	adds.w	r3, ip, r3
 800087e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000882:	f080 8112 	bcs.w	8000aaa <__udivmoddi4+0x27e>
 8000886:	4299      	cmp	r1, r3
 8000888:	f240 810f 	bls.w	8000aaa <__udivmoddi4+0x27e>
 800088c:	3c02      	subs	r4, #2
 800088e:	4463      	add	r3, ip
 8000890:	1a59      	subs	r1, r3, r1
 8000892:	fa1f f38e 	uxth.w	r3, lr
 8000896:	fbb1 f0f7 	udiv	r0, r1, r7
 800089a:	fb07 1110 	mls	r1, r7, r0, r1
 800089e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008a2:	fb00 f606 	mul.w	r6, r0, r6
 80008a6:	429e      	cmp	r6, r3
 80008a8:	d90a      	bls.n	80008c0 <__udivmoddi4+0x94>
 80008aa:	eb1c 0303 	adds.w	r3, ip, r3
 80008ae:	f100 31ff 	add.w	r1, r0, #4294967295
 80008b2:	f080 80fc 	bcs.w	8000aae <__udivmoddi4+0x282>
 80008b6:	429e      	cmp	r6, r3
 80008b8:	f240 80f9 	bls.w	8000aae <__udivmoddi4+0x282>
 80008bc:	4463      	add	r3, ip
 80008be:	3802      	subs	r0, #2
 80008c0:	1b9b      	subs	r3, r3, r6
 80008c2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80008c6:	2100      	movs	r1, #0
 80008c8:	b11d      	cbz	r5, 80008d2 <__udivmoddi4+0xa6>
 80008ca:	40d3      	lsrs	r3, r2
 80008cc:	2200      	movs	r2, #0
 80008ce:	e9c5 3200 	strd	r3, r2, [r5]
 80008d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008d6:	428b      	cmp	r3, r1
 80008d8:	d905      	bls.n	80008e6 <__udivmoddi4+0xba>
 80008da:	b10d      	cbz	r5, 80008e0 <__udivmoddi4+0xb4>
 80008dc:	e9c5 0100 	strd	r0, r1, [r5]
 80008e0:	2100      	movs	r1, #0
 80008e2:	4608      	mov	r0, r1
 80008e4:	e7f5      	b.n	80008d2 <__udivmoddi4+0xa6>
 80008e6:	fab3 f183 	clz	r1, r3
 80008ea:	2900      	cmp	r1, #0
 80008ec:	d146      	bne.n	800097c <__udivmoddi4+0x150>
 80008ee:	42a3      	cmp	r3, r4
 80008f0:	d302      	bcc.n	80008f8 <__udivmoddi4+0xcc>
 80008f2:	4290      	cmp	r0, r2
 80008f4:	f0c0 80f0 	bcc.w	8000ad8 <__udivmoddi4+0x2ac>
 80008f8:	1a86      	subs	r6, r0, r2
 80008fa:	eb64 0303 	sbc.w	r3, r4, r3
 80008fe:	2001      	movs	r0, #1
 8000900:	2d00      	cmp	r5, #0
 8000902:	d0e6      	beq.n	80008d2 <__udivmoddi4+0xa6>
 8000904:	e9c5 6300 	strd	r6, r3, [r5]
 8000908:	e7e3      	b.n	80008d2 <__udivmoddi4+0xa6>
 800090a:	2a00      	cmp	r2, #0
 800090c:	f040 8090 	bne.w	8000a30 <__udivmoddi4+0x204>
 8000910:	eba1 040c 	sub.w	r4, r1, ip
 8000914:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000918:	fa1f f78c 	uxth.w	r7, ip
 800091c:	2101      	movs	r1, #1
 800091e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000922:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000926:	fb08 4416 	mls	r4, r8, r6, r4
 800092a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800092e:	fb07 f006 	mul.w	r0, r7, r6
 8000932:	4298      	cmp	r0, r3
 8000934:	d908      	bls.n	8000948 <__udivmoddi4+0x11c>
 8000936:	eb1c 0303 	adds.w	r3, ip, r3
 800093a:	f106 34ff 	add.w	r4, r6, #4294967295
 800093e:	d202      	bcs.n	8000946 <__udivmoddi4+0x11a>
 8000940:	4298      	cmp	r0, r3
 8000942:	f200 80cd 	bhi.w	8000ae0 <__udivmoddi4+0x2b4>
 8000946:	4626      	mov	r6, r4
 8000948:	1a1c      	subs	r4, r3, r0
 800094a:	fa1f f38e 	uxth.w	r3, lr
 800094e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000952:	fb08 4410 	mls	r4, r8, r0, r4
 8000956:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800095a:	fb00 f707 	mul.w	r7, r0, r7
 800095e:	429f      	cmp	r7, r3
 8000960:	d908      	bls.n	8000974 <__udivmoddi4+0x148>
 8000962:	eb1c 0303 	adds.w	r3, ip, r3
 8000966:	f100 34ff 	add.w	r4, r0, #4294967295
 800096a:	d202      	bcs.n	8000972 <__udivmoddi4+0x146>
 800096c:	429f      	cmp	r7, r3
 800096e:	f200 80b0 	bhi.w	8000ad2 <__udivmoddi4+0x2a6>
 8000972:	4620      	mov	r0, r4
 8000974:	1bdb      	subs	r3, r3, r7
 8000976:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800097a:	e7a5      	b.n	80008c8 <__udivmoddi4+0x9c>
 800097c:	f1c1 0620 	rsb	r6, r1, #32
 8000980:	408b      	lsls	r3, r1
 8000982:	fa22 f706 	lsr.w	r7, r2, r6
 8000986:	431f      	orrs	r7, r3
 8000988:	fa20 fc06 	lsr.w	ip, r0, r6
 800098c:	fa04 f301 	lsl.w	r3, r4, r1
 8000990:	ea43 030c 	orr.w	r3, r3, ip
 8000994:	40f4      	lsrs	r4, r6
 8000996:	fa00 f801 	lsl.w	r8, r0, r1
 800099a:	0c38      	lsrs	r0, r7, #16
 800099c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80009a0:	fbb4 fef0 	udiv	lr, r4, r0
 80009a4:	fa1f fc87 	uxth.w	ip, r7
 80009a8:	fb00 441e 	mls	r4, r0, lr, r4
 80009ac:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80009b0:	fb0e f90c 	mul.w	r9, lr, ip
 80009b4:	45a1      	cmp	r9, r4
 80009b6:	fa02 f201 	lsl.w	r2, r2, r1
 80009ba:	d90a      	bls.n	80009d2 <__udivmoddi4+0x1a6>
 80009bc:	193c      	adds	r4, r7, r4
 80009be:	f10e 3aff 	add.w	sl, lr, #4294967295
 80009c2:	f080 8084 	bcs.w	8000ace <__udivmoddi4+0x2a2>
 80009c6:	45a1      	cmp	r9, r4
 80009c8:	f240 8081 	bls.w	8000ace <__udivmoddi4+0x2a2>
 80009cc:	f1ae 0e02 	sub.w	lr, lr, #2
 80009d0:	443c      	add	r4, r7
 80009d2:	eba4 0409 	sub.w	r4, r4, r9
 80009d6:	fa1f f983 	uxth.w	r9, r3
 80009da:	fbb4 f3f0 	udiv	r3, r4, r0
 80009de:	fb00 4413 	mls	r4, r0, r3, r4
 80009e2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80009e6:	fb03 fc0c 	mul.w	ip, r3, ip
 80009ea:	45a4      	cmp	ip, r4
 80009ec:	d907      	bls.n	80009fe <__udivmoddi4+0x1d2>
 80009ee:	193c      	adds	r4, r7, r4
 80009f0:	f103 30ff 	add.w	r0, r3, #4294967295
 80009f4:	d267      	bcs.n	8000ac6 <__udivmoddi4+0x29a>
 80009f6:	45a4      	cmp	ip, r4
 80009f8:	d965      	bls.n	8000ac6 <__udivmoddi4+0x29a>
 80009fa:	3b02      	subs	r3, #2
 80009fc:	443c      	add	r4, r7
 80009fe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000a02:	fba0 9302 	umull	r9, r3, r0, r2
 8000a06:	eba4 040c 	sub.w	r4, r4, ip
 8000a0a:	429c      	cmp	r4, r3
 8000a0c:	46ce      	mov	lr, r9
 8000a0e:	469c      	mov	ip, r3
 8000a10:	d351      	bcc.n	8000ab6 <__udivmoddi4+0x28a>
 8000a12:	d04e      	beq.n	8000ab2 <__udivmoddi4+0x286>
 8000a14:	b155      	cbz	r5, 8000a2c <__udivmoddi4+0x200>
 8000a16:	ebb8 030e 	subs.w	r3, r8, lr
 8000a1a:	eb64 040c 	sbc.w	r4, r4, ip
 8000a1e:	fa04 f606 	lsl.w	r6, r4, r6
 8000a22:	40cb      	lsrs	r3, r1
 8000a24:	431e      	orrs	r6, r3
 8000a26:	40cc      	lsrs	r4, r1
 8000a28:	e9c5 6400 	strd	r6, r4, [r5]
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	e750      	b.n	80008d2 <__udivmoddi4+0xa6>
 8000a30:	f1c2 0320 	rsb	r3, r2, #32
 8000a34:	fa20 f103 	lsr.w	r1, r0, r3
 8000a38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a3c:	fa24 f303 	lsr.w	r3, r4, r3
 8000a40:	4094      	lsls	r4, r2
 8000a42:	430c      	orrs	r4, r1
 8000a44:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a48:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a4c:	fa1f f78c 	uxth.w	r7, ip
 8000a50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a54:	fb08 3110 	mls	r1, r8, r0, r3
 8000a58:	0c23      	lsrs	r3, r4, #16
 8000a5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a5e:	fb00 f107 	mul.w	r1, r0, r7
 8000a62:	4299      	cmp	r1, r3
 8000a64:	d908      	bls.n	8000a78 <__udivmoddi4+0x24c>
 8000a66:	eb1c 0303 	adds.w	r3, ip, r3
 8000a6a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000a6e:	d22c      	bcs.n	8000aca <__udivmoddi4+0x29e>
 8000a70:	4299      	cmp	r1, r3
 8000a72:	d92a      	bls.n	8000aca <__udivmoddi4+0x29e>
 8000a74:	3802      	subs	r0, #2
 8000a76:	4463      	add	r3, ip
 8000a78:	1a5b      	subs	r3, r3, r1
 8000a7a:	b2a4      	uxth	r4, r4
 8000a7c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000a80:	fb08 3311 	mls	r3, r8, r1, r3
 8000a84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a88:	fb01 f307 	mul.w	r3, r1, r7
 8000a8c:	42a3      	cmp	r3, r4
 8000a8e:	d908      	bls.n	8000aa2 <__udivmoddi4+0x276>
 8000a90:	eb1c 0404 	adds.w	r4, ip, r4
 8000a94:	f101 36ff 	add.w	r6, r1, #4294967295
 8000a98:	d213      	bcs.n	8000ac2 <__udivmoddi4+0x296>
 8000a9a:	42a3      	cmp	r3, r4
 8000a9c:	d911      	bls.n	8000ac2 <__udivmoddi4+0x296>
 8000a9e:	3902      	subs	r1, #2
 8000aa0:	4464      	add	r4, ip
 8000aa2:	1ae4      	subs	r4, r4, r3
 8000aa4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000aa8:	e739      	b.n	800091e <__udivmoddi4+0xf2>
 8000aaa:	4604      	mov	r4, r0
 8000aac:	e6f0      	b.n	8000890 <__udivmoddi4+0x64>
 8000aae:	4608      	mov	r0, r1
 8000ab0:	e706      	b.n	80008c0 <__udivmoddi4+0x94>
 8000ab2:	45c8      	cmp	r8, r9
 8000ab4:	d2ae      	bcs.n	8000a14 <__udivmoddi4+0x1e8>
 8000ab6:	ebb9 0e02 	subs.w	lr, r9, r2
 8000aba:	eb63 0c07 	sbc.w	ip, r3, r7
 8000abe:	3801      	subs	r0, #1
 8000ac0:	e7a8      	b.n	8000a14 <__udivmoddi4+0x1e8>
 8000ac2:	4631      	mov	r1, r6
 8000ac4:	e7ed      	b.n	8000aa2 <__udivmoddi4+0x276>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	e799      	b.n	80009fe <__udivmoddi4+0x1d2>
 8000aca:	4630      	mov	r0, r6
 8000acc:	e7d4      	b.n	8000a78 <__udivmoddi4+0x24c>
 8000ace:	46d6      	mov	lr, sl
 8000ad0:	e77f      	b.n	80009d2 <__udivmoddi4+0x1a6>
 8000ad2:	4463      	add	r3, ip
 8000ad4:	3802      	subs	r0, #2
 8000ad6:	e74d      	b.n	8000974 <__udivmoddi4+0x148>
 8000ad8:	4606      	mov	r6, r0
 8000ada:	4623      	mov	r3, r4
 8000adc:	4608      	mov	r0, r1
 8000ade:	e70f      	b.n	8000900 <__udivmoddi4+0xd4>
 8000ae0:	3e02      	subs	r6, #2
 8000ae2:	4463      	add	r3, ip
 8000ae4:	e730      	b.n	8000948 <__udivmoddi4+0x11c>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_idiv0>:
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <ADS1299_Init>:
static void PowerUpSequence();
void EEGRecordingSequence();



void ADS1299_Init(){
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0

    //send_ads1299_command(ADS1299_SDATAC);
	PowerUpSequence();
 8000af0:	f000 f802 	bl	8000af8 <PowerUpSequence>

}
 8000af4:	bf00      	nop
 8000af6:	bd80      	pop	{r7, pc}

08000af8 <PowerUpSequence>:



static void PowerUpSequence(){
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b084      	sub	sp, #16
 8000afc:	af00      	add	r7, sp, #0

	uint8_t i = 0;
 8000afe:	2300      	movs	r3, #0
 8000b00:	73fb      	strb	r3, [r7, #15]
	uint8_t register_value = 0x00;
 8000b02:	2300      	movs	r3, #0
 8000b04:	73bb      	strb	r3, [r7, #14]
	uint8_t channset_value[ADS1299_CHANNELS] = {0};
 8000b06:	2300      	movs	r3, #0
 8000b08:	607b      	str	r3, [r7, #4]
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	60bb      	str	r3, [r7, #8]

	setnReset(GPIO_PIN_RESET);
 8000b0e:	2000      	movs	r0, #0
 8000b10:	f000 f908 	bl	8000d24 <setnReset>
	setnPWRdown(GPIO_PIN_RESET);
 8000b14:	2000      	movs	r0, #0
 8000b16:	f000 f917 	bl	8000d48 <setnPWRdown>
	setADS1299Start(GPIO_PIN_RESET);
 8000b1a:	2000      	movs	r0, #0
 8000b1c:	f000 f926 	bl	8000d6c <setADS1299Start>
	setADS1299CS(GPIO_PIN_SET);
 8000b20:	2001      	movs	r0, #1
 8000b22:	f000 f935 	bl	8000d90 <setADS1299CS>

	// Minimum delay after power on.
	HAL_Delay(POWER_UP_DELAY_MS);
 8000b26:	20c8      	movs	r0, #200	@ 0xc8
 8000b28:	f000 fcb4 	bl	8001494 <HAL_Delay>

	setnReset(GPIO_PIN_SET);
 8000b2c:	2001      	movs	r0, #1
 8000b2e:	f000 f8f9 	bl	8000d24 <setnReset>
	setnPWRdown(GPIO_PIN_SET);
 8000b32:	2001      	movs	r0, #1
 8000b34:	f000 f908 	bl	8000d48 <setnPWRdown>
	HAL_Delay(1);
 8000b38:	2001      	movs	r0, #1
 8000b3a:	f000 fcab 	bl	8001494 <HAL_Delay>

	setnReset(GPIO_PIN_RESET);
 8000b3e:	2000      	movs	r0, #0
 8000b40:	f000 f8f0 	bl	8000d24 <setnReset>
	HAL_Delay(1);
 8000b44:	2001      	movs	r0, #1
 8000b46:	f000 fca5 	bl	8001494 <HAL_Delay>
	setnReset(GPIO_PIN_SET);
 8000b4a:	2001      	movs	r0, #1
 8000b4c:	f000 f8ea 	bl	8000d24 <setnReset>

	// Minimum delay after power on.
	HAL_Delay(POWER_UP_DELAY_MS);
 8000b50:	20c8      	movs	r0, #200	@ 0xc8
 8000b52:	f000 fc9f 	bl	8001494 <HAL_Delay>

	send_ads1299_command(ADS1299_SDATAC);
 8000b56:	2011      	movs	r0, #17
 8000b58:	f000 f92a 	bl	8000db0 <send_ads1299_command>

	register_value = 0x96;
 8000b5c:	2396      	movs	r3, #150	@ 0x96
 8000b5e:	73bb      	strb	r3, [r7, #14]
	write_ads1299_register(ADS1299_REG_CONFIG1, 1, &register_value);
 8000b60:	f107 030e 	add.w	r3, r7, #14
 8000b64:	461a      	mov	r2, r3
 8000b66:	2101      	movs	r1, #1
 8000b68:	2001      	movs	r0, #1
 8000b6a:	f000 f943 	bl	8000df4 <write_ads1299_register>
	HAL_Delay(1);
 8000b6e:	2001      	movs	r0, #1
 8000b70:	f000 fc90 	bl	8001494 <HAL_Delay>
	register_value = 0xC0;
 8000b74:	23c0      	movs	r3, #192	@ 0xc0
 8000b76:	73bb      	strb	r3, [r7, #14]
	write_ads1299_register(ADS1299_REG_CONFIG2, 1, &register_value);
 8000b78:	f107 030e 	add.w	r3, r7, #14
 8000b7c:	461a      	mov	r2, r3
 8000b7e:	2101      	movs	r1, #1
 8000b80:	2002      	movs	r0, #2
 8000b82:	f000 f937 	bl	8000df4 <write_ads1299_register>
	HAL_Delay(1);
 8000b86:	2001      	movs	r0, #1
 8000b88:	f000 fc84 	bl	8001494 <HAL_Delay>
	register_value = 0xE0;
 8000b8c:	23e0      	movs	r3, #224	@ 0xe0
 8000b8e:	73bb      	strb	r3, [r7, #14]
	write_ads1299_register(ADS1299_REG_CONFIG3, 1, &register_value);
 8000b90:	f107 030e 	add.w	r3, r7, #14
 8000b94:	461a      	mov	r2, r3
 8000b96:	2101      	movs	r1, #1
 8000b98:	2003      	movs	r0, #3
 8000b9a:	f000 f92b 	bl	8000df4 <write_ads1299_register>
	HAL_Delay(1);
 8000b9e:	2001      	movs	r0, #1
 8000ba0:	f000 fc78 	bl	8001494 <HAL_Delay>

	for(i=0;i<ADS1299_CHANNELS;i++){
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	73fb      	strb	r3, [r7, #15]
 8000ba8:	e008      	b.n	8000bbc <PowerUpSequence+0xc4>
		channset_value[i] = 0x01;
 8000baa:	7bfb      	ldrb	r3, [r7, #15]
 8000bac:	3310      	adds	r3, #16
 8000bae:	443b      	add	r3, r7
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(i=0;i<ADS1299_CHANNELS;i++){
 8000bb6:	7bfb      	ldrb	r3, [r7, #15]
 8000bb8:	3301      	adds	r3, #1
 8000bba:	73fb      	strb	r3, [r7, #15]
 8000bbc:	7bfb      	ldrb	r3, [r7, #15]
 8000bbe:	2b07      	cmp	r3, #7
 8000bc0:	d9f3      	bls.n	8000baa <PowerUpSequence+0xb2>
	}

	write_ads1299_register(ADS1299_REG_CH1SET, ADS1299_CHANNELS, channset_value);
 8000bc2:	1d3b      	adds	r3, r7, #4
 8000bc4:	461a      	mov	r2, r3
 8000bc6:	2108      	movs	r1, #8
 8000bc8:	2005      	movs	r0, #5
 8000bca:	f000 f913 	bl	8000df4 <write_ads1299_register>
	HAL_Delay(1);
 8000bce:	2001      	movs	r0, #1
 8000bd0:	f000 fc60 	bl	8001494 <HAL_Delay>

	setADS1299Start(GPIO_PIN_SET);
 8000bd4:	2001      	movs	r0, #1
 8000bd6:	f000 f8c9 	bl	8000d6c <setADS1299Start>

	// Wait 1ms.
	HAL_Delay(1);
 8000bda:	2001      	movs	r0, #1
 8000bdc:	f000 fc5a 	bl	8001494 <HAL_Delay>

	send_ads1299_command(ADS1299_RDATAC);
 8000be0:	2010      	movs	r0, #16
 8000be2:	f000 f8e5 	bl	8000db0 <send_ads1299_command>

	// Wait 1ms.
	HAL_Delay(20);
 8000be6:	2014      	movs	r0, #20
 8000be8:	f000 fc54 	bl	8001494 <HAL_Delay>

	send_ads1299_command(ADS1299_SDATAC);
 8000bec:	2011      	movs	r0, #17
 8000bee:	f000 f8df 	bl	8000db0 <send_ads1299_command>
	register_value = 0xD0;
 8000bf2:	23d0      	movs	r3, #208	@ 0xd0
 8000bf4:	73bb      	strb	r3, [r7, #14]
	write_ads1299_register(ADS1299_REG_CONFIG2, 1, &register_value);
 8000bf6:	f107 030e 	add.w	r3, r7, #14
 8000bfa:	461a      	mov	r2, r3
 8000bfc:	2101      	movs	r1, #1
 8000bfe:	2002      	movs	r0, #2
 8000c00:	f000 f8f8 	bl	8000df4 <write_ads1299_register>
	HAL_Delay(1);
 8000c04:	2001      	movs	r0, #1
 8000c06:	f000 fc45 	bl	8001494 <HAL_Delay>

	for(i=0;i<ADS1299_CHANNELS;i++){
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	73fb      	strb	r3, [r7, #15]
 8000c0e:	e008      	b.n	8000c22 <PowerUpSequence+0x12a>
		channset_value[i] = 0x55;
 8000c10:	7bfb      	ldrb	r3, [r7, #15]
 8000c12:	3310      	adds	r3, #16
 8000c14:	443b      	add	r3, r7
 8000c16:	2255      	movs	r2, #85	@ 0x55
 8000c18:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(i=0;i<ADS1299_CHANNELS;i++){
 8000c1c:	7bfb      	ldrb	r3, [r7, #15]
 8000c1e:	3301      	adds	r3, #1
 8000c20:	73fb      	strb	r3, [r7, #15]
 8000c22:	7bfb      	ldrb	r3, [r7, #15]
 8000c24:	2b07      	cmp	r3, #7
 8000c26:	d9f3      	bls.n	8000c10 <PowerUpSequence+0x118>
	}

	write_ads1299_register(ADS1299_REG_CH1SET, ADS1299_CHANNELS, channset_value);
 8000c28:	1d3b      	adds	r3, r7, #4
 8000c2a:	461a      	mov	r2, r3
 8000c2c:	2108      	movs	r1, #8
 8000c2e:	2005      	movs	r0, #5
 8000c30:	f000 f8e0 	bl	8000df4 <write_ads1299_register>

	HAL_Delay(1);
 8000c34:	2001      	movs	r0, #1
 8000c36:	f000 fc2d 	bl	8001494 <HAL_Delay>


	EEGRecordingSequence();
 8000c3a:	f000 f807 	bl	8000c4c <EEGRecordingSequence>

	send_ads1299_command(ADS1299_RDATAC);
 8000c3e:	2010      	movs	r0, #16
 8000c40:	f000 f8b6 	bl	8000db0 <send_ads1299_command>

}
 8000c44:	bf00      	nop
 8000c46:	3710      	adds	r7, #16
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}

08000c4c <EEGRecordingSequence>:





void EEGRecordingSequence(){
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b084      	sub	sp, #16
 8000c50:	af00      	add	r7, sp, #0

	uint8_t i = 0;
 8000c52:	2300      	movs	r3, #0
 8000c54:	73fb      	strb	r3, [r7, #15]
	uint8_t register_value = 0x00;
 8000c56:	2300      	movs	r3, #0
 8000c58:	73bb      	strb	r3, [r7, #14]
	uint8_t channset_value[ADS1299_CHANNELS] = {0};
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	607b      	str	r3, [r7, #4]
 8000c5e:	2300      	movs	r3, #0
 8000c60:	60bb      	str	r3, [r7, #8]

	// Wait 1ms.
	HAL_Delay(20);
 8000c62:	2014      	movs	r0, #20
 8000c64:	f000 fc16 	bl	8001494 <HAL_Delay>

	send_ads1299_command(ADS1299_SDATAC);
 8000c68:	2011      	movs	r0, #17
 8000c6a:	f000 f8a1 	bl	8000db0 <send_ads1299_command>
	register_value = 0xC0;
 8000c6e:	23c0      	movs	r3, #192	@ 0xc0
 8000c70:	73bb      	strb	r3, [r7, #14]
	write_ads1299_register(ADS1299_REG_CONFIG2, 1, &register_value);
 8000c72:	f107 030e 	add.w	r3, r7, #14
 8000c76:	461a      	mov	r2, r3
 8000c78:	2101      	movs	r1, #1
 8000c7a:	2002      	movs	r0, #2
 8000c7c:	f000 f8ba 	bl	8000df4 <write_ads1299_register>
	HAL_Delay(1);
 8000c80:	2001      	movs	r0, #1
 8000c82:	f000 fc07 	bl	8001494 <HAL_Delay>


	register_value = 0xEC; //BIAS-enabled
 8000c86:	23ec      	movs	r3, #236	@ 0xec
 8000c88:	73bb      	strb	r3, [r7, #14]
	//register_value = 0xE0; //BIAS-disabled
	write_ads1299_register(ADS1299_REG_CONFIG3, 1, &register_value);
 8000c8a:	f107 030e 	add.w	r3, r7, #14
 8000c8e:	461a      	mov	r2, r3
 8000c90:	2101      	movs	r1, #1
 8000c92:	2003      	movs	r0, #3
 8000c94:	f000 f8ae 	bl	8000df4 <write_ads1299_register>
	HAL_Delay(1);
 8000c98:	2001      	movs	r0, #1
 8000c9a:	f000 fbfb 	bl	8001494 <HAL_Delay>
	//register_value = 0x00; //BIAS-disabled
	register_value = 0xFF; //BIAS-enabled
 8000c9e:	23ff      	movs	r3, #255	@ 0xff
 8000ca0:	73bb      	strb	r3, [r7, #14]
	write_ads1299_register(ADS1299_REG_BIAS_SENSP, 1, &register_value);
 8000ca2:	f107 030e 	add.w	r3, r7, #14
 8000ca6:	461a      	mov	r2, r3
 8000ca8:	2101      	movs	r1, #1
 8000caa:	200d      	movs	r0, #13
 8000cac:	f000 f8a2 	bl	8000df4 <write_ads1299_register>
	HAL_Delay(1);
 8000cb0:	2001      	movs	r0, #1
 8000cb2:	f000 fbef 	bl	8001494 <HAL_Delay>
	register_value = 0x00;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	73bb      	strb	r3, [r7, #14]
	write_ads1299_register(ADS1299_REG_BIAS_SENSN, 1, &register_value);
 8000cba:	f107 030e 	add.w	r3, r7, #14
 8000cbe:	461a      	mov	r2, r3
 8000cc0:	2101      	movs	r1, #1
 8000cc2:	200e      	movs	r0, #14
 8000cc4:	f000 f896 	bl	8000df4 <write_ads1299_register>
	HAL_Delay(1);
 8000cc8:	2001      	movs	r0, #1
 8000cca:	f000 fbe3 	bl	8001494 <HAL_Delay>
	register_value = 0x20;
 8000cce:	2320      	movs	r3, #32
 8000cd0:	73bb      	strb	r3, [r7, #14]
	write_ads1299_register(ADS1299_REG_MISC1, 1, &register_value);
 8000cd2:	f107 030e 	add.w	r3, r7, #14
 8000cd6:	461a      	mov	r2, r3
 8000cd8:	2101      	movs	r1, #1
 8000cda:	2015      	movs	r0, #21
 8000cdc:	f000 f88a 	bl	8000df4 <write_ads1299_register>
	HAL_Delay(1);
 8000ce0:	2001      	movs	r0, #1
 8000ce2:	f000 fbd7 	bl	8001494 <HAL_Delay>

	for(i=0;i<ADS1299_CHANNELS;i++){
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	73fb      	strb	r3, [r7, #15]
 8000cea:	e008      	b.n	8000cfe <EEGRecordingSequence+0xb2>
		channset_value[i] = 0x50;
 8000cec:	7bfb      	ldrb	r3, [r7, #15]
 8000cee:	3310      	adds	r3, #16
 8000cf0:	443b      	add	r3, r7
 8000cf2:	2250      	movs	r2, #80	@ 0x50
 8000cf4:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(i=0;i<ADS1299_CHANNELS;i++){
 8000cf8:	7bfb      	ldrb	r3, [r7, #15]
 8000cfa:	3301      	adds	r3, #1
 8000cfc:	73fb      	strb	r3, [r7, #15]
 8000cfe:	7bfb      	ldrb	r3, [r7, #15]
 8000d00:	2b07      	cmp	r3, #7
 8000d02:	d9f3      	bls.n	8000cec <EEGRecordingSequence+0xa0>

	//for(i=4;i<ADS1299_CHANNELS;i++){
	//	channset_value[i] = 0x01;
	//}

	write_ads1299_register(ADS1299_REG_CH1SET, ADS1299_CHANNELS, channset_value);
 8000d04:	1d3b      	adds	r3, r7, #4
 8000d06:	461a      	mov	r2, r3
 8000d08:	2108      	movs	r1, #8
 8000d0a:	2005      	movs	r0, #5
 8000d0c:	f000 f872 	bl	8000df4 <write_ads1299_register>

	HAL_Delay(1);
 8000d10:	2001      	movs	r0, #1
 8000d12:	f000 fbbf 	bl	8001494 <HAL_Delay>

	send_ads1299_command(ADS1299_RDATAC);
 8000d16:	2010      	movs	r0, #16
 8000d18:	f000 f84a 	bl	8000db0 <send_ads1299_command>

}
 8000d1c:	bf00      	nop
 8000d1e:	3710      	adds	r7, #16
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}

08000d24 <setnReset>:
}*/




static void setnReset(uint8_t value){
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ADS1299_nRESET_GPIO_Port, ADS1299_nRESET_Pin, value);
 8000d2e:	79fb      	ldrb	r3, [r7, #7]
 8000d30:	461a      	mov	r2, r3
 8000d32:	2180      	movs	r1, #128	@ 0x80
 8000d34:	4803      	ldr	r0, [pc, #12]	@ (8000d44 <setnReset+0x20>)
 8000d36:	f003 f949 	bl	8003fcc <HAL_GPIO_WritePin>
}
 8000d3a:	bf00      	nop
 8000d3c:	3708      	adds	r7, #8
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	48000800 	.word	0x48000800

08000d48 <setnPWRdown>:

static void setnPWRdown(uint8_t value){
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	4603      	mov	r3, r0
 8000d50:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ADS1299_nPWDN_GPIO_Port, ADS1299_nPWDN_Pin, value);
 8000d52:	79fb      	ldrb	r3, [r7, #7]
 8000d54:	461a      	mov	r2, r3
 8000d56:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d5a:	4803      	ldr	r0, [pc, #12]	@ (8000d68 <setnPWRdown+0x20>)
 8000d5c:	f003 f936 	bl	8003fcc <HAL_GPIO_WritePin>
}
 8000d60:	bf00      	nop
 8000d62:	3708      	adds	r7, #8
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	48000800 	.word	0x48000800

08000d6c <setADS1299Start>:

static void setADS1299Start(uint8_t value){
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	4603      	mov	r3, r0
 8000d74:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ADS1299_START_GPIO_Port, ADS1299_START_Pin, value);
 8000d76:	79fb      	ldrb	r3, [r7, #7]
 8000d78:	461a      	mov	r2, r3
 8000d7a:	2140      	movs	r1, #64	@ 0x40
 8000d7c:	4803      	ldr	r0, [pc, #12]	@ (8000d8c <setADS1299Start+0x20>)
 8000d7e:	f003 f925 	bl	8003fcc <HAL_GPIO_WritePin>
}
 8000d82:	bf00      	nop
 8000d84:	3708      	adds	r7, #8
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	48000800 	.word	0x48000800

08000d90 <setADS1299CS>:

static void setADS1299CS(uint8_t value){
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	4603      	mov	r3, r0
 8000d98:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ADS1299_CS_GPIO_Port, ADS1299_CS_Pin, value);
 8000d9a:	79fb      	ldrb	r3, [r7, #7]
 8000d9c:	461a      	mov	r2, r3
 8000d9e:	2110      	movs	r1, #16
 8000da0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000da4:	f003 f912 	bl	8003fcc <HAL_GPIO_WritePin>
}
 8000da8:	bf00      	nop
 8000daa:	3708      	adds	r7, #8
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}

08000db0 <send_ads1299_command>:

static uint8_t send_ads1299_command(uint8_t command)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	4603      	mov	r3, r0
 8000db8:	71fb      	strb	r3, [r7, #7]
    // Pull CS (Chip Select) low to begin the SPI communication
	setADS1299CS(GPIO_PIN_RESET);  // Assuming CS is on GPIOA pin 4
 8000dba:	2000      	movs	r0, #0
 8000dbc:	f7ff ffe8 	bl	8000d90 <setADS1299CS>

    // Transmit the command to ADS1299
    if (HAL_SPI_Transmit(&hspi1, &command, 1, HAL_MAX_DELAY) != HAL_OK)
 8000dc0:	1df9      	adds	r1, r7, #7
 8000dc2:	f04f 33ff 	mov.w	r3, #4294967295
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	4809      	ldr	r0, [pc, #36]	@ (8000df0 <send_ads1299_command+0x40>)
 8000dca:	f005 ff1e 	bl	8006c0a <HAL_SPI_Transmit>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d004      	beq.n	8000dde <send_ads1299_command+0x2e>
    {
    	setADS1299CS(GPIO_PIN_SET);
 8000dd4:	2001      	movs	r0, #1
 8000dd6:	f7ff ffdb 	bl	8000d90 <setADS1299CS>
        return HAL_ERROR;  // Return error if transmission fails
 8000dda:	2301      	movs	r3, #1
 8000ddc:	e003      	b.n	8000de6 <send_ads1299_command+0x36>
    }

    // Pull CS (Chip Select) high to end the SPI communication
    setADS1299CS(GPIO_PIN_SET);
 8000dde:	2001      	movs	r0, #1
 8000de0:	f7ff ffd6 	bl	8000d90 <setADS1299CS>

    return HAL_OK;  // Return success
 8000de4:	2300      	movs	r3, #0
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3708      	adds	r7, #8
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	200002dc 	.word	0x200002dc

08000df4 <write_ads1299_register>:
}



static uint8_t write_ads1299_register(uint8_t start_addr, uint8_t num_regs, uint8_t *data)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b084      	sub	sp, #16
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	603a      	str	r2, [r7, #0]
 8000dfe:	71fb      	strb	r3, [r7, #7]
 8000e00:	460b      	mov	r3, r1
 8000e02:	71bb      	strb	r3, [r7, #6]
    // Buffer to hold the command sequence
    uint8_t tx_buffer[2];
    tx_buffer[0] = ADS1299_WREG | start_addr;  // Write command with starting register address
 8000e04:	79fb      	ldrb	r3, [r7, #7]
 8000e06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e0a:	b2db      	uxtb	r3, r3
 8000e0c:	733b      	strb	r3, [r7, #12]
    tx_buffer[1] = num_regs - 1;                        // Number of registers to write (0-indexed)
 8000e0e:	79bb      	ldrb	r3, [r7, #6]
 8000e10:	3b01      	subs	r3, #1
 8000e12:	b2db      	uxtb	r3, r3
 8000e14:	737b      	strb	r3, [r7, #13]

    // Pull CS (Chip Select) low to begin the SPI communication
    setADS1299CS(GPIO_PIN_RESET);  // Assuming CS is on GPIOA pin 4
 8000e16:	2000      	movs	r0, #0
 8000e18:	f7ff ffba 	bl	8000d90 <setADS1299CS>

    // Transmit the write command and register address
    if (HAL_SPI_Transmit(&hspi1, tx_buffer, 2, HAL_MAX_DELAY) != HAL_OK)
 8000e1c:	f107 010c 	add.w	r1, r7, #12
 8000e20:	f04f 33ff 	mov.w	r3, #4294967295
 8000e24:	2202      	movs	r2, #2
 8000e26:	4814      	ldr	r0, [pc, #80]	@ (8000e78 <write_ads1299_register+0x84>)
 8000e28:	f005 feef 	bl	8006c0a <HAL_SPI_Transmit>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d007      	beq.n	8000e42 <write_ads1299_register+0x4e>
    {
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);  // End SPI communication
 8000e32:	2201      	movs	r2, #1
 8000e34:	2110      	movs	r1, #16
 8000e36:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e3a:	f003 f8c7 	bl	8003fcc <HAL_GPIO_WritePin>
        return HAL_ERROR;  // Return error if transmission fails
 8000e3e:	2301      	movs	r3, #1
 8000e40:	e016      	b.n	8000e70 <write_ads1299_register+0x7c>
    }

    // Transmit the data to be written to the registers
    if (HAL_SPI_Transmit(&hspi1, data, num_regs, HAL_MAX_DELAY) != HAL_OK)
 8000e42:	79bb      	ldrb	r3, [r7, #6]
 8000e44:	b29a      	uxth	r2, r3
 8000e46:	f04f 33ff 	mov.w	r3, #4294967295
 8000e4a:	6839      	ldr	r1, [r7, #0]
 8000e4c:	480a      	ldr	r0, [pc, #40]	@ (8000e78 <write_ads1299_register+0x84>)
 8000e4e:	f005 fedc 	bl	8006c0a <HAL_SPI_Transmit>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d007      	beq.n	8000e68 <write_ads1299_register+0x74>
    {
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);  // End SPI communication
 8000e58:	2201      	movs	r2, #1
 8000e5a:	2110      	movs	r1, #16
 8000e5c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e60:	f003 f8b4 	bl	8003fcc <HAL_GPIO_WritePin>
        return HAL_ERROR;  // Return error if data transmission fails
 8000e64:	2301      	movs	r3, #1
 8000e66:	e003      	b.n	8000e70 <write_ads1299_register+0x7c>
    }

    setADS1299CS(GPIO_PIN_SET);
 8000e68:	2001      	movs	r0, #1
 8000e6a:	f7ff ff91 	bl	8000d90 <setADS1299CS>

    return HAL_OK;  // Return success
 8000e6e:	2300      	movs	r3, #0
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	3710      	adds	r7, #16
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	200002dc 	.word	0x200002dc

08000e7c <ADS1299_ReadSamples>:
 * @brief Reads samples from the ADS1299 via SPI.
 * @param statusBuffer Pointer to a buffer to store the 3 status bytes.
 * @param dataBuffer Pointer to a buffer to store the 24 data bytes (8 channels x 3 bytes each).
 * @retval HAL_StatusTypeDef HAL status indicating success or error.
 */
HAL_StatusTypeDef ADS1299_ReadSamples(uint8_t *statusBuffer, uint8_t *dataBuffer) {
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b08c      	sub	sp, #48	@ 0x30
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
 8000e84:	6039      	str	r1, [r7, #0]

    uint8_t spiRxBuffer[27] = {0}; // Buffer to store all received bytes (3 status + 24 data)
 8000e86:	2300      	movs	r3, #0
 8000e88:	60fb      	str	r3, [r7, #12]
 8000e8a:	f107 0310 	add.w	r3, r7, #16
 8000e8e:	2200      	movs	r2, #0
 8000e90:	601a      	str	r2, [r3, #0]
 8000e92:	605a      	str	r2, [r3, #4]
 8000e94:	609a      	str	r2, [r3, #8]
 8000e96:	60da      	str	r2, [r3, #12]
 8000e98:	611a      	str	r2, [r3, #16]
 8000e9a:	f8c3 2013 	str.w	r2, [r3, #19]
    HAL_StatusTypeDef result;

    // Ensure that statusBuffer and dataBuffer are not NULL
    if (statusBuffer == NULL || dataBuffer == NULL) {
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d002      	beq.n	8000eaa <ADS1299_ReadSamples+0x2e>
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d101      	bne.n	8000eae <ADS1299_ReadSamples+0x32>
        return HAL_ERROR;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	e03d      	b.n	8000f2a <ADS1299_ReadSamples+0xae>
    }

    setADS1299CS(GPIO_PIN_RESET);
 8000eae:	2000      	movs	r0, #0
 8000eb0:	f7ff ff6e 	bl	8000d90 <setADS1299CS>

    // Perform SPI reception of 27 bytes
    result = HAL_SPI_Receive(&hspi1, spiRxBuffer, 27, HAL_MAX_DELAY);
 8000eb4:	f107 010c 	add.w	r1, r7, #12
 8000eb8:	f04f 33ff 	mov.w	r3, #4294967295
 8000ebc:	221b      	movs	r2, #27
 8000ebe:	481d      	ldr	r0, [pc, #116]	@ (8000f34 <ADS1299_ReadSamples+0xb8>)
 8000ec0:	f006 f818 	bl	8006ef4 <HAL_SPI_Receive>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    setADS1299CS(GPIO_PIN_SET);
 8000eca:	2001      	movs	r0, #1
 8000ecc:	f7ff ff60 	bl	8000d90 <setADS1299CS>

    if (result != HAL_OK) {
 8000ed0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d002      	beq.n	8000ede <ADS1299_ReadSamples+0x62>
        return result; // Return if there is an SPI error
 8000ed8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000edc:	e025      	b.n	8000f2a <ADS1299_ReadSamples+0xae>
    }

    // Copy the first 3 bytes to the status buffer
    for (int i = 0; i < 3; i++) {
 8000ede:	2300      	movs	r3, #0
 8000ee0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000ee2:	e00b      	b.n	8000efc <ADS1299_ReadSamples+0x80>
        statusBuffer[i] = spiRxBuffer[i];
 8000ee4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ee6:	687a      	ldr	r2, [r7, #4]
 8000ee8:	4413      	add	r3, r2
 8000eea:	f107 010c 	add.w	r1, r7, #12
 8000eee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000ef0:	440a      	add	r2, r1
 8000ef2:	7812      	ldrb	r2, [r2, #0]
 8000ef4:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 3; i++) {
 8000ef6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ef8:	3301      	adds	r3, #1
 8000efa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000efc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000efe:	2b02      	cmp	r3, #2
 8000f00:	ddf0      	ble.n	8000ee4 <ADS1299_ReadSamples+0x68>
    }

    // Copy the next 24 bytes to the data buffer
    for (int i = 0; i < 24; i++) {
 8000f02:	2300      	movs	r3, #0
 8000f04:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000f06:	e00c      	b.n	8000f22 <ADS1299_ReadSamples+0xa6>
        dataBuffer[i] = spiRxBuffer[i + 3];
 8000f08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f0a:	1cda      	adds	r2, r3, #3
 8000f0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f0e:	6839      	ldr	r1, [r7, #0]
 8000f10:	440b      	add	r3, r1
 8000f12:	3230      	adds	r2, #48	@ 0x30
 8000f14:	443a      	add	r2, r7
 8000f16:	f812 2c24 	ldrb.w	r2, [r2, #-36]
 8000f1a:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 24; i++) {
 8000f1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f1e:	3301      	adds	r3, #1
 8000f20:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000f22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f24:	2b17      	cmp	r3, #23
 8000f26:	ddef      	ble.n	8000f08 <ADS1299_ReadSamples+0x8c>
    }

    return HAL_OK;
 8000f28:	2300      	movs	r3, #0
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3730      	adds	r7, #48	@ 0x30
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	200002dc 	.word	0x200002dc

08000f38 <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 8000f38:	b5b0      	push	{r4, r5, r7, lr}
 8000f3a:	b088      	sub	sp, #32
 8000f3c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8000f3e:	4b0b      	ldr	r3, [pc, #44]	@ (8000f6c <APPD_EnableCPU2+0x34>)
 8000f40:	1d3c      	adds	r4, r7, #4
 8000f42:	461d      	mov	r5, r3
 8000f44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f48:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f4c:	c403      	stmia	r4!, {r0, r1}
 8000f4e:	8022      	strh	r2, [r4, #0]
 8000f50:	3402      	adds	r4, #2
 8000f52:	0c13      	lsrs	r3, r2, #16
 8000f54:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8000f56:	f00a fb83 	bl	800b660 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8000f5a:	1d3b      	adds	r3, r7, #4
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f009 fe14 	bl	800ab8a <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 8000f62:	bf00      	nop
}
 8000f64:	3720      	adds	r7, #32
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bdb0      	pop	{r4, r5, r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	0800f764 	.word	0x0800f764

08000f70 <DbgOutputTraces>:
/* USER CODE END DbgOutputInit */
  return;
}

void DbgOutputTraces(  uint8_t *p_data, uint16_t size, void (*cb)(void) )
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b084      	sub	sp, #16
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	60f8      	str	r0, [r7, #12]
 8000f78:	460b      	mov	r3, r1
 8000f7a:	607a      	str	r2, [r7, #4]
 8000f7c:	817b      	strh	r3, [r7, #10]
/* USER CODE END DbgOutputTraces */
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 8000f7e:	897a      	ldrh	r2, [r7, #10]
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	68f9      	ldr	r1, [r7, #12]
 8000f84:	2000      	movs	r0, #0
 8000f86:	f001 f989 	bl	800229c <HW_UART_Transmit_DMA>

/* USER CODE END DbgOutputTraces */
  return;
 8000f8a:	bf00      	nop
}
 8000f8c:	3710      	adds	r7, #16
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
	...

08000f94 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8000f9c:	4b07      	ldr	r3, [pc, #28]	@ (8000fbc <LL_C2_PWR_SetPowerMode+0x28>)
 8000f9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000fa2:	f023 0207 	bic.w	r2, r3, #7
 8000fa6:	4905      	ldr	r1, [pc, #20]	@ (8000fbc <LL_C2_PWR_SetPowerMode+0x28>)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	4313      	orrs	r3, r2
 8000fac:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8000fb0:	bf00      	nop
 8000fb2:	370c      	adds	r7, #12
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr
 8000fbc:	58000400 	.word	0x58000400

08000fc0 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000fc8:	4b06      	ldr	r3, [pc, #24]	@ (8000fe4 <LL_EXTI_EnableIT_32_63+0x24>)
 8000fca:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8000fce:	4905      	ldr	r1, [pc, #20]	@ (8000fe4 <LL_EXTI_EnableIT_32_63+0x24>)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8000fd8:	bf00      	nop
 8000fda:	370c      	adds	r7, #12
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr
 8000fe4:	58000800 	.word	0x58000800

08000fe8 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8000ff0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ff4:	4a0a      	ldr	r2, [pc, #40]	@ (8001020 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8000ff6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8000ffa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ffe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001002:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	021b      	lsls	r3, r3, #8
 800100a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800100e:	4313      	orrs	r3, r2
 8001010:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
}
 8001014:	bf00      	nop
 8001016:	370c      	adds	r7, #12
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr
 8001020:	cafecafe 	.word	0xcafecafe

08001024 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 800102c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001030:	689b      	ldr	r3, [r3, #8]
 8001032:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8001036:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4313      	orrs	r3, r2
 800103e:	608b      	str	r3, [r1, #8]
}
 8001040:	bf00      	nop
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr

0800104c <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 8001050:	4b04      	ldr	r3, [pc, #16]	@ (8001064 <LL_DBGMCU_GetDeviceID+0x18>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8001058:	4618      	mov	r0, r3
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	e0042000 	.word	0xe0042000

08001068 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 800106c:	4b04      	ldr	r3, [pc, #16]	@ (8001080 <LL_DBGMCU_GetRevisionID+0x18>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	0c1b      	lsrs	r3, r3, #16
 8001072:	b29b      	uxth	r3, r3
}
 8001074:	4618      	mov	r0, r3
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	e0042000 	.word	0xe0042000

08001084 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001088:	4b05      	ldr	r3, [pc, #20]	@ (80010a0 <LL_LPM_EnableSleep+0x1c>)
 800108a:	691b      	ldr	r3, [r3, #16]
 800108c:	4a04      	ldr	r2, [pc, #16]	@ (80010a0 <LL_LPM_EnableSleep+0x1c>)
 800108e:	f023 0304 	bic.w	r3, r3, #4
 8001092:	6113      	str	r3, [r2, #16]
}
 8001094:	bf00      	nop
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	e000ed00 	.word	0xe000ed00

080010a4 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	22ff      	movs	r2, #255	@ 0xff
 80010b0:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80010b2:	bf00      	nop
 80010b4:	370c      	adds	r7, #12
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr

080010be <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 80010be:	b480      	push	{r7}
 80010c0:	b083      	sub	sp, #12
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	22ca      	movs	r2, #202	@ 0xca
 80010ca:	625a      	str	r2, [r3, #36]	@ 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2253      	movs	r2, #83	@ 0x53
 80010d0:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80010d2:	bf00      	nop
 80010d4:	370c      	adds	r7, #12
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr

080010de <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 80010de:	b480      	push	{r7}
 80010e0:	b083      	sub	sp, #12
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	6078      	str	r0, [r7, #4]
 80010e6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	689b      	ldr	r3, [r3, #8]
 80010ec:	f023 0207 	bic.w	r2, r3, #7
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	431a      	orrs	r2, r3
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	609a      	str	r2, [r3, #8]
}
 80010f8:	bf00      	nop
 80010fa:	370c      	adds	r7, #12
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr

08001104 <MX_APPE_Config>:
static void UartCmdExecute(void);
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001108:	4b04      	ldr	r3, [pc, #16]	@ (800111c <MX_APPE_Config+0x18>)
 800110a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800110e:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8001110:	f000 f828 	bl	8001164 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8001114:	f000 f82d 	bl	8001172 <Config_HSE>

  return;
 8001118:	bf00      	nop
}
 800111a:	bd80      	pop	{r7, pc}
 800111c:	58004000 	.word	0x58004000

08001120 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8001124:	f000 f839 	bl	800119a <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8001128:	f000 f852 	bl	80011d0 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 800112c:	4905      	ldr	r1, [pc, #20]	@ (8001144 <MX_APPE_Init+0x24>)
 800112e:	2000      	movs	r0, #0
 8001130:	f000 fe48 	bl	8001dc4 <HW_TS_Init>
  
  /**
   * The Standby mode should not be entered before the initialization is over
   * The default state of the Low Power Manager is to allow the Standby Mode so an request is needed here
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 8001134:	2101      	movs	r1, #1
 8001136:	2001      	movs	r0, #1
 8001138:	f00c feee 	bl	800df18 <UTIL_LPM_SetOffMode>
  //Button_Init();

  //RxUART_Init();

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 800113c:	f000 f856 	bl	80011ec <appe_Tl_Init>
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */

   return;
 8001140:	bf00      	nop
}
 8001142:	bd80      	pop	{r7, pc}
 8001144:	200001c4 	.word	0x200001c4

08001148 <Init_Smps>:

void Init_Smps(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 800114c:	bf00      	nop
}
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr

08001156 <Init_Exti>:

void Init_Exti(void)
{
 8001156:	b580      	push	{r7, lr}
 8001158:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 800115a:	2050      	movs	r0, #80	@ 0x50
 800115c:	f7ff ff30 	bl	8000fc0 <LL_EXTI_EnableIT_32_63>

  return;
 8001160:	bf00      	nop
}
 8001162:	bd80      	pop	{r7, pc}

08001164 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  Reset_BackupDomain();

  Reset_IPCC();
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 8001168:	bf00      	nop
}
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr

08001172 <Config_HSE>:
  return;
}
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8001172:	b580      	push	{r7, lr}
 8001174:	b082      	sub	sp, #8
 8001176:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8001178:	2000      	movs	r0, #0
 800117a:	f00a fb9d 	bl	800b8b8 <OTP_Read>
 800117e:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d005      	beq.n	8001192 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	799b      	ldrb	r3, [r3, #6]
 800118a:	4618      	mov	r0, r3
 800118c:	f7ff ff2c 	bl	8000fe8 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8001190:	bf00      	nop
 8001192:	bf00      	nop
}
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}

0800119a <System_Init>:

static void System_Init(void)
{
 800119a:	b580      	push	{r7, lr}
 800119c:	af00      	add	r7, sp, #0
  Init_Smps();
 800119e:	f7ff ffd3 	bl	8001148 <Init_Smps>

  Init_Exti();
 80011a2:	f7ff ffd8 	bl	8001156 <Init_Exti>

  Init_Rtc();
 80011a6:	f000 f803 	bl	80011b0 <Init_Rtc>

  return;
 80011aa:	bf00      	nop
}
 80011ac:	bd80      	pop	{r7, pc}
	...

080011b0 <Init_Rtc>:

static void Init_Rtc(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 80011b4:	4805      	ldr	r0, [pc, #20]	@ (80011cc <Init_Rtc+0x1c>)
 80011b6:	f7ff ff82 	bl	80010be <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 80011ba:	2100      	movs	r1, #0
 80011bc:	4803      	ldr	r0, [pc, #12]	@ (80011cc <Init_Rtc+0x1c>)
 80011be:	f7ff ff8e 	bl	80010de <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 80011c2:	4802      	ldr	r0, [pc, #8]	@ (80011cc <Init_Rtc+0x1c>)
 80011c4:	f7ff ff6e 	bl	80010a4 <LL_RTC_EnableWriteProtection>

  return;
 80011c8:	bf00      	nop
}
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	40002800 	.word	0x40002800

080011d0 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 80011d4:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80011d8:	f7ff ff24 	bl	8001024 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 80011dc:	f00c fe8a 	bl	800def4 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 80011e0:	2004      	movs	r0, #4
 80011e2:	f7ff fed7 	bl	8000f94 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 80011e6:	bf00      	nop
}
 80011e8:	bd80      	pop	{r7, pc}
	...

080011ec <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b088      	sub	sp, #32
 80011f0:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 80011f2:	f00a f87f 	bl	800b2f4 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 80011f6:	4a11      	ldr	r2, [pc, #68]	@ (800123c <appe_Tl_Init+0x50>)
 80011f8:	2100      	movs	r1, #0
 80011fa:	2040      	movs	r0, #64	@ 0x40
 80011fc:	f00c ffb8 	bl	800e170 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8001200:	4b0f      	ldr	r3, [pc, #60]	@ (8001240 <appe_Tl_Init+0x54>)
 8001202:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8001204:	4b0f      	ldr	r3, [pc, #60]	@ (8001244 <appe_Tl_Init+0x58>)
 8001206:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8001208:	463b      	mov	r3, r7
 800120a:	4619      	mov	r1, r3
 800120c:	480e      	ldr	r0, [pc, #56]	@ (8001248 <appe_Tl_Init+0x5c>)
 800120e:	f009 ff33 	bl	800b078 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8001212:	4b0e      	ldr	r3, [pc, #56]	@ (800124c <appe_Tl_Init+0x60>)
 8001214:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8001216:	4b0e      	ldr	r3, [pc, #56]	@ (8001250 <appe_Tl_Init+0x64>)
 8001218:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 800121a:	4b0e      	ldr	r3, [pc, #56]	@ (8001254 <appe_Tl_Init+0x68>)
 800121c:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 800121e:	f44f 6306 	mov.w	r3, #2144	@ 0x860
 8001222:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8001224:	f107 0308 	add.w	r3, r7, #8
 8001228:	4618      	mov	r0, r3
 800122a:	f00a f9a5 	bl	800b578 <TL_MM_Init>

  TL_Enable();
 800122e:	f00a f85b 	bl	800b2e8 <TL_Enable>

  return;
 8001232:	bf00      	nop
}
 8001234:	3720      	adds	r7, #32
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	0800b0b1 	.word	0x0800b0b1
 8001240:	20030a58 	.word	0x20030a58
 8001244:	08001259 	.word	0x08001259
 8001248:	08001271 	.word	0x08001271
 800124c:	20030c70 	.word	0x20030c70
 8001250:	20030b64 	.word	0x20030b64
 8001254:	200301f8 	.word	0x200301f8

08001258 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	4603      	mov	r3, r0
 8001260:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8001262:	bf00      	nop
}
 8001264:	370c      	adds	r7, #12
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
	...

08001270 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b088      	sub	sp, #32
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	330b      	adds	r3, #11
 800127e:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 8001280:	69fb      	ldr	r3, [r7, #28]
 8001282:	881b      	ldrh	r3, [r3, #0]
 8001284:	b29b      	uxth	r3, r3
 8001286:	f5a3 4312 	sub.w	r3, r3, #37376	@ 0x9200
 800128a:	2b07      	cmp	r3, #7
 800128c:	d860      	bhi.n	8001350 <APPE_SysUserEvtRx+0xe0>
 800128e:	a201      	add	r2, pc, #4	@ (adr r2, 8001294 <APPE_SysUserEvtRx+0x24>)
 8001290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001294:	080012b5 	.word	0x080012b5
 8001298:	080012f7 	.word	0x080012f7
 800129c:	08001305 	.word	0x08001305
 80012a0:	08001351 	.word	0x08001351
 80012a4:	08001321 	.word	0x08001321
 80012a8:	08001331 	.word	0x08001331
 80012ac:	08001339 	.word	0x08001339
 80012b0:	08001349 	.word	0x08001349
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 80012b4:	f107 030c 	add.w	r3, r7, #12
 80012b8:	4618      	mov	r0, r3
 80012ba:	f009 fc93 	bl	800abe4 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
 80012be:	7b3b      	ldrb	r3, [r7, #12]
 80012c0:	4619      	mov	r1, r3
 80012c2:	7b7b      	ldrb	r3, [r7, #13]
 80012c4:	461a      	mov	r2, r3
 80012c6:	7bbb      	ldrb	r3, [r7, #14]
 80012c8:	4824      	ldr	r0, [pc, #144]	@ (800135c <APPE_SysUserEvtRx+0xec>)
 80012ca:	f00d f931 	bl	800e530 <iprintf>
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
 80012ce:	7c3b      	ldrb	r3, [r7, #16]
 80012d0:	4619      	mov	r1, r3
 80012d2:	4823      	ldr	r0, [pc, #140]	@ (8001360 <APPE_SysUserEvtRx+0xf0>)
 80012d4:	f00d f92c 	bl	800e530 <iprintf>
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);
 80012d8:	7dbb      	ldrb	r3, [r7, #22]
 80012da:	4619      	mov	r1, r3
 80012dc:	7dfb      	ldrb	r3, [r7, #23]
 80012de:	461a      	mov	r2, r3
 80012e0:	7e3b      	ldrb	r3, [r7, #24]
 80012e2:	4820      	ldr	r0, [pc, #128]	@ (8001364 <APPE_SysUserEvtRx+0xf4>)
 80012e4:	f00d f924 	bl	800e530 <iprintf>

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
 80012e8:	481f      	ldr	r0, [pc, #124]	@ (8001368 <APPE_SysUserEvtRx+0xf8>)
 80012ea:	f00d f921 	bl	800e530 <iprintf>
    APPE_SysEvtReadyProcessing(pPayload);
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f000 f870 	bl	80013d4 <APPE_SysEvtReadyProcessing>
    break;
 80012f4:	e02d      	b.n	8001352 <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
 80012f6:	481d      	ldr	r0, [pc, #116]	@ (800136c <APPE_SysUserEvtRx+0xfc>)
 80012f8:	f00d f91a 	bl	800e530 <iprintf>
    APPE_SysEvtError(pPayload);
 80012fc:	6878      	ldr	r0, [r7, #4]
 80012fe:	f000 f843 	bl	8001388 <APPE_SysEvtError>
    break;
 8001302:	e026      	b.n	8001352 <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE -- BLE NVM RAM HAS BEEN UPDATED BY CPU2 \n");
 8001304:	481a      	ldr	r0, [pc, #104]	@ (8001370 <APPE_SysUserEvtRx+0x100>)
 8001306:	f00d f983 	bl	800e610 <puts>
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->StartAddress,
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	3302      	adds	r3, #2
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
 800130e:	6819      	ldr	r1, [r3, #0]
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->Size);
 8001310:	69fb      	ldr	r3, [r7, #28]
 8001312:	3302      	adds	r3, #2
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	461a      	mov	r2, r3
 8001318:	4816      	ldr	r0, [pc, #88]	@ (8001374 <APPE_SysUserEvtRx+0x104>)
 800131a:	f00d f909 	bl	800e530 <iprintf>
    break;
 800131e:	e018      	b.n	8001352 <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_START_WRITE:
    APP_DBG_MSG("==>> SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
                ((SHCI_C2_NvmStartWrite_Evt_t*)p_sys_event->payload)->NumberOfWords);
 8001320:	69fb      	ldr	r3, [r7, #28]
 8001322:	3302      	adds	r3, #2
    APP_DBG_MSG("==>> SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4619      	mov	r1, r3
 8001328:	4813      	ldr	r0, [pc, #76]	@ (8001378 <APPE_SysUserEvtRx+0x108>)
 800132a:	f00d f901 	bl	800e530 <iprintf>
    break;
 800132e:	e010      	b.n	8001352 <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_END_WRITE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_WRITE\n\r");
 8001330:	4812      	ldr	r0, [pc, #72]	@ (800137c <APPE_SysUserEvtRx+0x10c>)
 8001332:	f00d f8fd 	bl	800e530 <iprintf>
    break;
 8001336:	e00c      	b.n	8001352 <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_START_ERASE:
    APP_DBG_MSG("==>>SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
                ((SHCI_C2_NvmStartErase_Evt_t*)p_sys_event->payload)->NumberOfSectors);
 8001338:	69fb      	ldr	r3, [r7, #28]
 800133a:	3302      	adds	r3, #2
    APP_DBG_MSG("==>>SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4619      	mov	r1, r3
 8001340:	480f      	ldr	r0, [pc, #60]	@ (8001380 <APPE_SysUserEvtRx+0x110>)
 8001342:	f00d f8f5 	bl	800e530 <iprintf>
    break;
 8001346:	e004      	b.n	8001352 <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
 8001348:	480e      	ldr	r0, [pc, #56]	@ (8001384 <APPE_SysUserEvtRx+0x114>)
 800134a:	f00d f8f1 	bl	800e530 <iprintf>
    break;
 800134e:	e000      	b.n	8001352 <APPE_SysUserEvtRx+0xe2>

  default:
    break;
 8001350:	bf00      	nop
  }

  return;
 8001352:	bf00      	nop
}
 8001354:	3720      	adds	r7, #32
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	0800f780 	.word	0x0800f780
 8001360:	0800f7a4 	.word	0x0800f7a4
 8001364:	0800f7c0 	.word	0x0800f7c0
 8001368:	0800f7d8 	.word	0x0800f7d8
 800136c:	0800f7f8 	.word	0x0800f7f8
 8001370:	0800f81c 	.word	0x0800f81c
 8001374:	0800f86c 	.word	0x0800f86c
 8001378:	0800f894 	.word	0x0800f894
 800137c:	0800f8d0 	.word	0x0800f8d0
 8001380:	0800f8f4 	.word	0x0800f8f4
 8001384:	0800f930 	.word	0x0800f930

08001388 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	330b      	adds	r3, #11
 8001396:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	3302      	adds	r3, #2
 800139c:	60bb      	str	r3, [r7, #8]

  APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON %x \n\r",(*p_sys_error_code));
 800139e:	68bb      	ldr	r3, [r7, #8]
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	4619      	mov	r1, r3
 80013a4:	4808      	ldr	r0, [pc, #32]	@ (80013c8 <APPE_SysEvtError+0x40>)
 80013a6:	f00d f8c3 	bl	800e530 <iprintf>

  if ((*p_sys_error_code) == ERR_BLE_INIT)
 80013aa:	68bb      	ldr	r3, [r7, #8]
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d103      	bne.n	80013ba <APPE_SysEvtError+0x32>
  {
    /* Error during BLE stack initialization */
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - ERR_BLE_INIT \n");
 80013b2:	4806      	ldr	r0, [pc, #24]	@ (80013cc <APPE_SysEvtError+0x44>)
 80013b4:	f00d f92c 	bl	800e610 <puts>
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 80013b8:	e003      	b.n	80013c2 <APPE_SysEvtError+0x3a>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
 80013ba:	4805      	ldr	r0, [pc, #20]	@ (80013d0 <APPE_SysEvtError+0x48>)
 80013bc:	f00d f928 	bl	800e610 <puts>
  return;
 80013c0:	bf00      	nop
}
 80013c2:	3710      	adds	r7, #16
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	0800f954 	.word	0x0800f954
 80013cc:	0800f984 	.word	0x0800f984
 80013d0:	0800f9c0 	.word	0x0800f9c0

080013d4 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b08a      	sub	sp, #40	@ 0x28
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 80013dc:	f107 0308 	add.w	r3, r7, #8
 80013e0:	2200      	movs	r2, #0
 80013e2:	601a      	str	r2, [r3, #0]
 80013e4:	605a      	str	r2, [r3, #4]
 80013e6:	609a      	str	r2, [r3, #8]
 80013e8:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 80013ea:	2300      	movs	r3, #0
 80013ec:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t DeviceID=0;
 80013ee:	2300      	movs	r3, #0
 80013f0:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	330b      	adds	r3, #11
 80013f8:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	3302      	adds	r3, #2
 80013fe:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 8001400:	69bb      	ldr	r3, [r7, #24]
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d128      	bne.n	800145a <APPE_SysEvtReadyProcessing+0x86>
  {
    /**
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");
 8001408:	481d      	ldr	r0, [pc, #116]	@ (8001480 <APPE_SysEvtReadyProcessing+0xac>)
 800140a:	f00d f901 	bl	800e610 <puts>

    /* Traces channel initialization */
    APPD_EnableCPU2();
 800140e:	f7ff fd93 	bl	8000f38 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 8001412:	230f      	movs	r3, #15
 8001414:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 8001416:	237f      	movs	r3, #127	@ 0x7f
 8001418:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 800141a:	f7ff fe25 	bl	8001068 <LL_DBGMCU_GetRevisionID>
 800141e:	6278      	str	r0, [r7, #36]	@ 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);
 8001420:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001422:	4818      	ldr	r0, [pc, #96]	@ (8001484 <APPE_SysEvtReadyProcessing+0xb0>)
 8001424:	f00d f884 	bl	800e530 <iprintf>

    config_param.RevisionID = (uint16_t)RevisionID;
 8001428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800142a:	b29b      	uxth	r3, r3
 800142c:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 800142e:	f7ff fe0d 	bl	800104c <LL_DBGMCU_GetDeviceID>
 8001432:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
 8001434:	6a39      	ldr	r1, [r7, #32]
 8001436:	4814      	ldr	r0, [pc, #80]	@ (8001488 <APPE_SysEvtReadyProcessing+0xb4>)
 8001438:	f00d f87a 	bl	800e530 <iprintf>
    config_param.DeviceID = (uint16_t)DeviceID;
 800143c:	6a3b      	ldr	r3, [r7, #32]
 800143e:	b29b      	uxth	r3, r3
 8001440:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 8001442:	f107 0308 	add.w	r3, r7, #8
 8001446:	4618      	mov	r0, r3
 8001448:	f009 fbb6 	bl	800abb8 <SHCI_C2_Config>

    APP_BLE_Init();
 800144c:	f00a ff08 	bl	800c260 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8001450:	2100      	movs	r1, #0
 8001452:	2001      	movs	r0, #1
 8001454:	f00c fd60 	bl	800df18 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 8001458:	e00e      	b.n	8001478 <APPE_SysEvtReadyProcessing+0xa4>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 800145a:	69bb      	ldr	r3, [r7, #24]
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	2b01      	cmp	r3, #1
 8001460:	d106      	bne.n	8001470 <APPE_SysEvtReadyProcessing+0x9c>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - FUS_FW_RUNNING \n\r");
 8001462:	480a      	ldr	r0, [pc, #40]	@ (800148c <APPE_SysEvtReadyProcessing+0xb8>)
 8001464:	f00d f864 	bl	800e530 <iprintf>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2200      	movs	r2, #0
 800146c:	701a      	strb	r2, [r3, #0]
  return;
 800146e:	e003      	b.n	8001478 <APPE_SysEvtReadyProcessing+0xa4>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
 8001470:	4807      	ldr	r0, [pc, #28]	@ (8001490 <APPE_SysEvtReadyProcessing+0xbc>)
 8001472:	f00d f85d 	bl	800e530 <iprintf>
  return;
 8001476:	bf00      	nop
}
 8001478:	3728      	adds	r7, #40	@ 0x28
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	0800f9f8 	.word	0x0800f9f8
 8001484:	0800fa14 	.word	0x0800fa14
 8001488:	0800fa38 	.word	0x0800fa38
 800148c:	0800fa58 	.word	0x0800fa58
 8001490:	0800fa8c 	.word	0x0800fa8c

08001494 <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b084      	sub	sp, #16
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800149c:	f001 ff36 	bl	800330c <HAL_GetTick>
 80014a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014ac:	d00a      	beq.n	80014c4 <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 80014ae:	f001 ff45 	bl	800333c <HAL_GetTickFreq>
 80014b2:	4603      	mov	r3, r0
 80014b4:	461a      	mov	r2, r3
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	4413      	add	r3, r2
 80014ba:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014bc:	e002      	b.n	80014c4 <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 80014be:	f7ff fde1 	bl	8001084 <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM) || defined (__ARMCC_VERSION)
    __force_stores();
  #endif /* __ARMCC_VERSION */

    __WFI();
 80014c2:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 80014c4:	f001 ff22 	bl	800330c <HAL_GetTick>
 80014c8:	4602      	mov	r2, r0
 80014ca:	68bb      	ldr	r3, [r7, #8]
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	68fa      	ldr	r2, [r7, #12]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d8f4      	bhi.n	80014be <HAL_Delay+0x2a>
  }
}
 80014d4:	bf00      	nop
 80014d6:	bf00      	nop
 80014d8:	3710      	adds	r7, #16
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}

080014de <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 80014de:	b580      	push	{r7, lr}
 80014e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80014e2:	f04f 30ff 	mov.w	r0, #4294967295
 80014e6:	f00c fd47 	bl	800df78 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 80014ea:	bf00      	nop
 80014ec:	bd80      	pop	{r7, pc}

080014ee <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 80014ee:	b480      	push	{r7}
 80014f0:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 80014f2:	bf00      	nop
}
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr

080014fc <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
 8001504:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001506:	f04f 30ff 	mov.w	r0, #4294967295
 800150a:	f00c fd35 	bl	800df78 <UTIL_SEQ_Run>
  return;
 800150e:	bf00      	nop
}
 8001510:	3708      	adds	r7, #8
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}

08001516 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8001516:	b580      	push	{r7, lr}
 8001518:	b082      	sub	sp, #8
 800151a:	af00      	add	r7, sp, #0
 800151c:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800151e:	2100      	movs	r1, #0
 8001520:	2040      	movs	r0, #64	@ 0x40
 8001522:	f00c fe47 	bl	800e1b4 <UTIL_SEQ_SetTask>
  return;
 8001526:	bf00      	nop
}
 8001528:	3708      	adds	r7, #8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}

0800152e <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 800152e:	b580      	push	{r7, lr}
 8001530:	b082      	sub	sp, #8
 8001532:	af00      	add	r7, sp, #0
 8001534:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8001536:	2002      	movs	r0, #2
 8001538:	f00c fea8 	bl	800e28c <UTIL_SEQ_SetEvt>
  return;
 800153c:	bf00      	nop
}
 800153e:	3708      	adds	r7, #8
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}

08001544 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 800154c:	2002      	movs	r0, #2
 800154e:	f00c febd 	bl	800e2cc <UTIL_SEQ_WaitEvt>
  return;
 8001552:	bf00      	nop
}
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}

0800155a <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN FD_WRAP_FUNCTIONS */
void HAL_GPIO_EXTI_Callback( uint16_t GPIO_Pin )
{
 800155a:	b580      	push	{r7, lr}
 800155c:	b082      	sub	sp, #8
 800155e:	af00      	add	r7, sp, #0
 8001560:	4603      	mov	r3, r0
 8001562:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 8001564:	88fb      	ldrh	r3, [r7, #6]
 8001566:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800156a:	d00b      	beq.n	8001584 <HAL_GPIO_EXTI_Callback+0x2a>
 800156c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001570:	dc0e      	bgt.n	8001590 <HAL_GPIO_EXTI_Callback+0x36>
 8001572:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001576:	d008      	beq.n	800158a <HAL_GPIO_EXTI_Callback+0x30>
 8001578:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800157c:	d108      	bne.n	8001590 <HAL_GPIO_EXTI_Callback+0x36>
  {
  case GPIO_PIN_12:
    /* SW button 1 */
    APP_SWA_Button_Action();
 800157e:	f00c f96f 	bl	800d860 <APP_SWA_Button_Action>
    break; 
 8001582:	e006      	b.n	8001592 <HAL_GPIO_EXTI_Callback+0x38>
    
  case GPIO_PIN_13:
    /* SW button 2 */
	APP_SWB_Button_Action();
 8001584:	f00c f974 	bl	800d870 <APP_SWB_Button_Action>
    break;
 8001588:	e003      	b.n	8001592 <HAL_GPIO_EXTI_Callback+0x38>

  case ADS1299_nDRDY_Pin:
    APP_BLE_Manage_ADS1299_event();
 800158a:	f00c f9d7 	bl	800d93c <APP_BLE_Manage_ADS1299_event>
    break; 
 800158e:	e000      	b.n	8001592 <HAL_GPIO_EXTI_Callback+0x38>

  default:
    break;
 8001590:	bf00      	nop
  }
  return;
 8001592:	bf00      	nop
}
 8001594:	3708      	adds	r7, #8
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
	...

0800159c <LL_EXTI_EnableIT_0_31>:
{
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80015a4:	4b06      	ldr	r3, [pc, #24]	@ (80015c0 <LL_EXTI_EnableIT_0_31+0x24>)
 80015a6:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80015aa:	4905      	ldr	r1, [pc, #20]	@ (80015c0 <LL_EXTI_EnableIT_0_31+0x24>)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	4313      	orrs	r3, r2
 80015b0:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 80015b4:	bf00      	nop
 80015b6:	370c      	adds	r7, #12
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr
 80015c0:	58000800 	.word	0x58000800

080015c4 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80015cc:	4b05      	ldr	r3, [pc, #20]	@ (80015e4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	4904      	ldr	r1, [pc, #16]	@ (80015e4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4313      	orrs	r3, r2
 80015d6:	600b      	str	r3, [r1, #0]

}
 80015d8:	bf00      	nop
 80015da:	370c      	adds	r7, #12
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr
 80015e4:	58000800 	.word	0x58000800

080015e8 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80015ee:	4b0d      	ldr	r3, [pc, #52]	@ (8001624 <ReadRtcSsrValue+0x3c>)
 80015f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015f2:	b29b      	uxth	r3, r3
 80015f4:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80015f6:	4b0b      	ldr	r3, [pc, #44]	@ (8001624 <ReadRtcSsrValue+0x3c>)
 80015f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015fa:	b29b      	uxth	r3, r3
 80015fc:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 80015fe:	e005      	b.n	800160c <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001604:	4b07      	ldr	r3, [pc, #28]	@ (8001624 <ReadRtcSsrValue+0x3c>)
 8001606:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001608:	b29b      	uxth	r3, r3
 800160a:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 800160c:	687a      	ldr	r2, [r7, #4]
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	429a      	cmp	r2, r3
 8001612:	d1f5      	bne.n	8001600 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8001614:	683b      	ldr	r3, [r7, #0]
}
 8001616:	4618      	mov	r0, r3
 8001618:	370c      	adds	r7, #12
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop
 8001624:	40002800 	.word	0x40002800

08001628 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8001628:	b480      	push	{r7}
 800162a:	b085      	sub	sp, #20
 800162c:	af00      	add	r7, sp, #0
 800162e:	4603      	mov	r3, r0
 8001630:	460a      	mov	r2, r1
 8001632:	71fb      	strb	r3, [r7, #7]
 8001634:	4613      	mov	r3, r2
 8001636:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8001638:	79ba      	ldrb	r2, [r7, #6]
 800163a:	491d      	ldr	r1, [pc, #116]	@ (80016b0 <LinkTimerAfter+0x88>)
 800163c:	4613      	mov	r3, r2
 800163e:	005b      	lsls	r3, r3, #1
 8001640:	4413      	add	r3, r2
 8001642:	00db      	lsls	r3, r3, #3
 8001644:	440b      	add	r3, r1
 8001646:	3315      	adds	r3, #21
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800164c:	7bfb      	ldrb	r3, [r7, #15]
 800164e:	2b06      	cmp	r3, #6
 8001650:	d009      	beq.n	8001666 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8001652:	7bfa      	ldrb	r2, [r7, #15]
 8001654:	4916      	ldr	r1, [pc, #88]	@ (80016b0 <LinkTimerAfter+0x88>)
 8001656:	4613      	mov	r3, r2
 8001658:	005b      	lsls	r3, r3, #1
 800165a:	4413      	add	r3, r2
 800165c:	00db      	lsls	r3, r3, #3
 800165e:	440b      	add	r3, r1
 8001660:	3314      	adds	r3, #20
 8001662:	79fa      	ldrb	r2, [r7, #7]
 8001664:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8001666:	79fa      	ldrb	r2, [r7, #7]
 8001668:	4911      	ldr	r1, [pc, #68]	@ (80016b0 <LinkTimerAfter+0x88>)
 800166a:	4613      	mov	r3, r2
 800166c:	005b      	lsls	r3, r3, #1
 800166e:	4413      	add	r3, r2
 8001670:	00db      	lsls	r3, r3, #3
 8001672:	440b      	add	r3, r1
 8001674:	3315      	adds	r3, #21
 8001676:	7bfa      	ldrb	r2, [r7, #15]
 8001678:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 800167a:	79fa      	ldrb	r2, [r7, #7]
 800167c:	490c      	ldr	r1, [pc, #48]	@ (80016b0 <LinkTimerAfter+0x88>)
 800167e:	4613      	mov	r3, r2
 8001680:	005b      	lsls	r3, r3, #1
 8001682:	4413      	add	r3, r2
 8001684:	00db      	lsls	r3, r3, #3
 8001686:	440b      	add	r3, r1
 8001688:	3314      	adds	r3, #20
 800168a:	79ba      	ldrb	r2, [r7, #6]
 800168c:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 800168e:	79ba      	ldrb	r2, [r7, #6]
 8001690:	4907      	ldr	r1, [pc, #28]	@ (80016b0 <LinkTimerAfter+0x88>)
 8001692:	4613      	mov	r3, r2
 8001694:	005b      	lsls	r3, r3, #1
 8001696:	4413      	add	r3, r2
 8001698:	00db      	lsls	r3, r3, #3
 800169a:	440b      	add	r3, r1
 800169c:	3315      	adds	r3, #21
 800169e:	79fa      	ldrb	r2, [r7, #7]
 80016a0:	701a      	strb	r2, [r3, #0]

  return;
 80016a2:	bf00      	nop
}
 80016a4:	3714      	adds	r7, #20
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop
 80016b0:	200000d8 	.word	0x200000d8

080016b4 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b085      	sub	sp, #20
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	4603      	mov	r3, r0
 80016bc:	460a      	mov	r2, r1
 80016be:	71fb      	strb	r3, [r7, #7]
 80016c0:	4613      	mov	r3, r2
 80016c2:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 80016c4:	4b29      	ldr	r3, [pc, #164]	@ (800176c <LinkTimerBefore+0xb8>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	79ba      	ldrb	r2, [r7, #6]
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d032      	beq.n	8001736 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 80016d0:	79ba      	ldrb	r2, [r7, #6]
 80016d2:	4927      	ldr	r1, [pc, #156]	@ (8001770 <LinkTimerBefore+0xbc>)
 80016d4:	4613      	mov	r3, r2
 80016d6:	005b      	lsls	r3, r3, #1
 80016d8:	4413      	add	r3, r2
 80016da:	00db      	lsls	r3, r3, #3
 80016dc:	440b      	add	r3, r1
 80016de:	3314      	adds	r3, #20
 80016e0:	781b      	ldrb	r3, [r3, #0]
 80016e2:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 80016e4:	7bfa      	ldrb	r2, [r7, #15]
 80016e6:	4922      	ldr	r1, [pc, #136]	@ (8001770 <LinkTimerBefore+0xbc>)
 80016e8:	4613      	mov	r3, r2
 80016ea:	005b      	lsls	r3, r3, #1
 80016ec:	4413      	add	r3, r2
 80016ee:	00db      	lsls	r3, r3, #3
 80016f0:	440b      	add	r3, r1
 80016f2:	3315      	adds	r3, #21
 80016f4:	79fa      	ldrb	r2, [r7, #7]
 80016f6:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 80016f8:	79fa      	ldrb	r2, [r7, #7]
 80016fa:	491d      	ldr	r1, [pc, #116]	@ (8001770 <LinkTimerBefore+0xbc>)
 80016fc:	4613      	mov	r3, r2
 80016fe:	005b      	lsls	r3, r3, #1
 8001700:	4413      	add	r3, r2
 8001702:	00db      	lsls	r3, r3, #3
 8001704:	440b      	add	r3, r1
 8001706:	3315      	adds	r3, #21
 8001708:	79ba      	ldrb	r2, [r7, #6]
 800170a:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 800170c:	79fa      	ldrb	r2, [r7, #7]
 800170e:	4918      	ldr	r1, [pc, #96]	@ (8001770 <LinkTimerBefore+0xbc>)
 8001710:	4613      	mov	r3, r2
 8001712:	005b      	lsls	r3, r3, #1
 8001714:	4413      	add	r3, r2
 8001716:	00db      	lsls	r3, r3, #3
 8001718:	440b      	add	r3, r1
 800171a:	3314      	adds	r3, #20
 800171c:	7bfa      	ldrb	r2, [r7, #15]
 800171e:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001720:	79ba      	ldrb	r2, [r7, #6]
 8001722:	4913      	ldr	r1, [pc, #76]	@ (8001770 <LinkTimerBefore+0xbc>)
 8001724:	4613      	mov	r3, r2
 8001726:	005b      	lsls	r3, r3, #1
 8001728:	4413      	add	r3, r2
 800172a:	00db      	lsls	r3, r3, #3
 800172c:	440b      	add	r3, r1
 800172e:	3314      	adds	r3, #20
 8001730:	79fa      	ldrb	r2, [r7, #7]
 8001732:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8001734:	e014      	b.n	8001760 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8001736:	79fa      	ldrb	r2, [r7, #7]
 8001738:	490d      	ldr	r1, [pc, #52]	@ (8001770 <LinkTimerBefore+0xbc>)
 800173a:	4613      	mov	r3, r2
 800173c:	005b      	lsls	r3, r3, #1
 800173e:	4413      	add	r3, r2
 8001740:	00db      	lsls	r3, r3, #3
 8001742:	440b      	add	r3, r1
 8001744:	3315      	adds	r3, #21
 8001746:	79ba      	ldrb	r2, [r7, #6]
 8001748:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 800174a:	79ba      	ldrb	r2, [r7, #6]
 800174c:	4908      	ldr	r1, [pc, #32]	@ (8001770 <LinkTimerBefore+0xbc>)
 800174e:	4613      	mov	r3, r2
 8001750:	005b      	lsls	r3, r3, #1
 8001752:	4413      	add	r3, r2
 8001754:	00db      	lsls	r3, r3, #3
 8001756:	440b      	add	r3, r1
 8001758:	3314      	adds	r3, #20
 800175a:	79fa      	ldrb	r2, [r7, #7]
 800175c:	701a      	strb	r2, [r3, #0]
  return;
 800175e:	bf00      	nop
}
 8001760:	3714      	adds	r7, #20
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	20000168 	.word	0x20000168
 8001770:	200000d8 	.word	0x200000d8

08001774 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0
 800177a:	4603      	mov	r3, r0
 800177c:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800177e:	4b4e      	ldr	r3, [pc, #312]	@ (80018b8 <linkTimer+0x144>)
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	b2db      	uxtb	r3, r3
 8001784:	2b06      	cmp	r3, #6
 8001786:	d118      	bne.n	80017ba <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001788:	4b4b      	ldr	r3, [pc, #300]	@ (80018b8 <linkTimer+0x144>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	b2da      	uxtb	r2, r3
 800178e:	4b4b      	ldr	r3, [pc, #300]	@ (80018bc <linkTimer+0x148>)
 8001790:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8001792:	4a49      	ldr	r2, [pc, #292]	@ (80018b8 <linkTimer+0x144>)
 8001794:	79fb      	ldrb	r3, [r7, #7]
 8001796:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8001798:	79fa      	ldrb	r2, [r7, #7]
 800179a:	4949      	ldr	r1, [pc, #292]	@ (80018c0 <linkTimer+0x14c>)
 800179c:	4613      	mov	r3, r2
 800179e:	005b      	lsls	r3, r3, #1
 80017a0:	4413      	add	r3, r2
 80017a2:	00db      	lsls	r3, r3, #3
 80017a4:	440b      	add	r3, r1
 80017a6:	3315      	adds	r3, #21
 80017a8:	2206      	movs	r2, #6
 80017aa:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80017ac:	4b45      	ldr	r3, [pc, #276]	@ (80018c4 <linkTimer+0x150>)
 80017ae:	f04f 32ff 	mov.w	r2, #4294967295
 80017b2:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 80017b4:	2300      	movs	r3, #0
 80017b6:	81fb      	strh	r3, [r7, #14]
 80017b8:	e078      	b.n	80018ac <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 80017ba:	f000 f909 	bl	80019d0 <ReturnTimeElapsed>
 80017be:	4603      	mov	r3, r0
 80017c0:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 80017c2:	79fa      	ldrb	r2, [r7, #7]
 80017c4:	493e      	ldr	r1, [pc, #248]	@ (80018c0 <linkTimer+0x14c>)
 80017c6:	4613      	mov	r3, r2
 80017c8:	005b      	lsls	r3, r3, #1
 80017ca:	4413      	add	r3, r2
 80017cc:	00db      	lsls	r3, r3, #3
 80017ce:	440b      	add	r3, r1
 80017d0:	3308      	adds	r3, #8
 80017d2:	6819      	ldr	r1, [r3, #0]
 80017d4:	89fb      	ldrh	r3, [r7, #14]
 80017d6:	79fa      	ldrb	r2, [r7, #7]
 80017d8:	4419      	add	r1, r3
 80017da:	4839      	ldr	r0, [pc, #228]	@ (80018c0 <linkTimer+0x14c>)
 80017dc:	4613      	mov	r3, r2
 80017de:	005b      	lsls	r3, r3, #1
 80017e0:	4413      	add	r3, r2
 80017e2:	00db      	lsls	r3, r3, #3
 80017e4:	4403      	add	r3, r0
 80017e6:	3308      	adds	r3, #8
 80017e8:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 80017ea:	79fa      	ldrb	r2, [r7, #7]
 80017ec:	4934      	ldr	r1, [pc, #208]	@ (80018c0 <linkTimer+0x14c>)
 80017ee:	4613      	mov	r3, r2
 80017f0:	005b      	lsls	r3, r3, #1
 80017f2:	4413      	add	r3, r2
 80017f4:	00db      	lsls	r3, r3, #3
 80017f6:	440b      	add	r3, r1
 80017f8:	3308      	adds	r3, #8
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 80017fe:	4b2e      	ldr	r3, [pc, #184]	@ (80018b8 <linkTimer+0x144>)
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	b2db      	uxtb	r3, r3
 8001804:	4619      	mov	r1, r3
 8001806:	4a2e      	ldr	r2, [pc, #184]	@ (80018c0 <linkTimer+0x14c>)
 8001808:	460b      	mov	r3, r1
 800180a:	005b      	lsls	r3, r3, #1
 800180c:	440b      	add	r3, r1
 800180e:	00db      	lsls	r3, r3, #3
 8001810:	4413      	add	r3, r2
 8001812:	3308      	adds	r3, #8
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	68ba      	ldr	r2, [r7, #8]
 8001818:	429a      	cmp	r2, r3
 800181a:	d337      	bcc.n	800188c <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 800181c:	4b26      	ldr	r3, [pc, #152]	@ (80018b8 <linkTimer+0x144>)
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8001822:	7b7a      	ldrb	r2, [r7, #13]
 8001824:	4926      	ldr	r1, [pc, #152]	@ (80018c0 <linkTimer+0x14c>)
 8001826:	4613      	mov	r3, r2
 8001828:	005b      	lsls	r3, r3, #1
 800182a:	4413      	add	r3, r2
 800182c:	00db      	lsls	r3, r3, #3
 800182e:	440b      	add	r3, r1
 8001830:	3315      	adds	r3, #21
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001836:	e013      	b.n	8001860 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8001838:	7b7a      	ldrb	r2, [r7, #13]
 800183a:	4921      	ldr	r1, [pc, #132]	@ (80018c0 <linkTimer+0x14c>)
 800183c:	4613      	mov	r3, r2
 800183e:	005b      	lsls	r3, r3, #1
 8001840:	4413      	add	r3, r2
 8001842:	00db      	lsls	r3, r3, #3
 8001844:	440b      	add	r3, r1
 8001846:	3315      	adds	r3, #21
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 800184c:	7b7a      	ldrb	r2, [r7, #13]
 800184e:	491c      	ldr	r1, [pc, #112]	@ (80018c0 <linkTimer+0x14c>)
 8001850:	4613      	mov	r3, r2
 8001852:	005b      	lsls	r3, r3, #1
 8001854:	4413      	add	r3, r2
 8001856:	00db      	lsls	r3, r3, #3
 8001858:	440b      	add	r3, r1
 800185a:	3315      	adds	r3, #21
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001860:	7b3b      	ldrb	r3, [r7, #12]
 8001862:	2b06      	cmp	r3, #6
 8001864:	d00b      	beq.n	800187e <linkTimer+0x10a>
 8001866:	7b3a      	ldrb	r2, [r7, #12]
 8001868:	4915      	ldr	r1, [pc, #84]	@ (80018c0 <linkTimer+0x14c>)
 800186a:	4613      	mov	r3, r2
 800186c:	005b      	lsls	r3, r3, #1
 800186e:	4413      	add	r3, r2
 8001870:	00db      	lsls	r3, r3, #3
 8001872:	440b      	add	r3, r1
 8001874:	3308      	adds	r3, #8
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	68ba      	ldr	r2, [r7, #8]
 800187a:	429a      	cmp	r2, r3
 800187c:	d2dc      	bcs.n	8001838 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 800187e:	7b7a      	ldrb	r2, [r7, #13]
 8001880:	79fb      	ldrb	r3, [r7, #7]
 8001882:	4611      	mov	r1, r2
 8001884:	4618      	mov	r0, r3
 8001886:	f7ff fecf 	bl	8001628 <LinkTimerAfter>
 800188a:	e00f      	b.n	80018ac <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 800188c:	4b0a      	ldr	r3, [pc, #40]	@ (80018b8 <linkTimer+0x144>)
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	b2da      	uxtb	r2, r3
 8001892:	79fb      	ldrb	r3, [r7, #7]
 8001894:	4611      	mov	r1, r2
 8001896:	4618      	mov	r0, r3
 8001898:	f7ff ff0c 	bl	80016b4 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 800189c:	4b06      	ldr	r3, [pc, #24]	@ (80018b8 <linkTimer+0x144>)
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	b2da      	uxtb	r2, r3
 80018a2:	4b06      	ldr	r3, [pc, #24]	@ (80018bc <linkTimer+0x148>)
 80018a4:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 80018a6:	4a04      	ldr	r2, [pc, #16]	@ (80018b8 <linkTimer+0x144>)
 80018a8:	79fb      	ldrb	r3, [r7, #7]
 80018aa:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 80018ac:	89fb      	ldrh	r3, [r7, #14]
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3710      	adds	r7, #16
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	20000168 	.word	0x20000168
 80018bc:	20000169 	.word	0x20000169
 80018c0:	200000d8 	.word	0x200000d8
 80018c4:	2000016c 	.word	0x2000016c

080018c8 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b085      	sub	sp, #20
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	4603      	mov	r3, r0
 80018d0:	460a      	mov	r2, r1
 80018d2:	71fb      	strb	r3, [r7, #7]
 80018d4:	4613      	mov	r3, r2
 80018d6:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 80018d8:	4b39      	ldr	r3, [pc, #228]	@ (80019c0 <UnlinkTimer+0xf8>)
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	79fa      	ldrb	r2, [r7, #7]
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d111      	bne.n	8001908 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 80018e4:	4b36      	ldr	r3, [pc, #216]	@ (80019c0 <UnlinkTimer+0xf8>)
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	b2da      	uxtb	r2, r3
 80018ea:	4b36      	ldr	r3, [pc, #216]	@ (80019c4 <UnlinkTimer+0xfc>)
 80018ec:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 80018ee:	79fa      	ldrb	r2, [r7, #7]
 80018f0:	4935      	ldr	r1, [pc, #212]	@ (80019c8 <UnlinkTimer+0x100>)
 80018f2:	4613      	mov	r3, r2
 80018f4:	005b      	lsls	r3, r3, #1
 80018f6:	4413      	add	r3, r2
 80018f8:	00db      	lsls	r3, r3, #3
 80018fa:	440b      	add	r3, r1
 80018fc:	3315      	adds	r3, #21
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	b2da      	uxtb	r2, r3
 8001902:	4b2f      	ldr	r3, [pc, #188]	@ (80019c0 <UnlinkTimer+0xf8>)
 8001904:	701a      	strb	r2, [r3, #0]
 8001906:	e03e      	b.n	8001986 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8001908:	79fa      	ldrb	r2, [r7, #7]
 800190a:	492f      	ldr	r1, [pc, #188]	@ (80019c8 <UnlinkTimer+0x100>)
 800190c:	4613      	mov	r3, r2
 800190e:	005b      	lsls	r3, r3, #1
 8001910:	4413      	add	r3, r2
 8001912:	00db      	lsls	r3, r3, #3
 8001914:	440b      	add	r3, r1
 8001916:	3314      	adds	r3, #20
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 800191c:	79fa      	ldrb	r2, [r7, #7]
 800191e:	492a      	ldr	r1, [pc, #168]	@ (80019c8 <UnlinkTimer+0x100>)
 8001920:	4613      	mov	r3, r2
 8001922:	005b      	lsls	r3, r3, #1
 8001924:	4413      	add	r3, r2
 8001926:	00db      	lsls	r3, r3, #3
 8001928:	440b      	add	r3, r1
 800192a:	3315      	adds	r3, #21
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8001930:	79f9      	ldrb	r1, [r7, #7]
 8001932:	7bfa      	ldrb	r2, [r7, #15]
 8001934:	4824      	ldr	r0, [pc, #144]	@ (80019c8 <UnlinkTimer+0x100>)
 8001936:	460b      	mov	r3, r1
 8001938:	005b      	lsls	r3, r3, #1
 800193a:	440b      	add	r3, r1
 800193c:	00db      	lsls	r3, r3, #3
 800193e:	4403      	add	r3, r0
 8001940:	3315      	adds	r3, #21
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	b2d8      	uxtb	r0, r3
 8001946:	4920      	ldr	r1, [pc, #128]	@ (80019c8 <UnlinkTimer+0x100>)
 8001948:	4613      	mov	r3, r2
 800194a:	005b      	lsls	r3, r3, #1
 800194c:	4413      	add	r3, r2
 800194e:	00db      	lsls	r3, r3, #3
 8001950:	440b      	add	r3, r1
 8001952:	3315      	adds	r3, #21
 8001954:	4602      	mov	r2, r0
 8001956:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001958:	7bbb      	ldrb	r3, [r7, #14]
 800195a:	2b06      	cmp	r3, #6
 800195c:	d013      	beq.n	8001986 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 800195e:	79f9      	ldrb	r1, [r7, #7]
 8001960:	7bba      	ldrb	r2, [r7, #14]
 8001962:	4819      	ldr	r0, [pc, #100]	@ (80019c8 <UnlinkTimer+0x100>)
 8001964:	460b      	mov	r3, r1
 8001966:	005b      	lsls	r3, r3, #1
 8001968:	440b      	add	r3, r1
 800196a:	00db      	lsls	r3, r3, #3
 800196c:	4403      	add	r3, r0
 800196e:	3314      	adds	r3, #20
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	b2d8      	uxtb	r0, r3
 8001974:	4914      	ldr	r1, [pc, #80]	@ (80019c8 <UnlinkTimer+0x100>)
 8001976:	4613      	mov	r3, r2
 8001978:	005b      	lsls	r3, r3, #1
 800197a:	4413      	add	r3, r2
 800197c:	00db      	lsls	r3, r3, #3
 800197e:	440b      	add	r3, r1
 8001980:	3314      	adds	r3, #20
 8001982:	4602      	mov	r2, r0
 8001984:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8001986:	79fa      	ldrb	r2, [r7, #7]
 8001988:	490f      	ldr	r1, [pc, #60]	@ (80019c8 <UnlinkTimer+0x100>)
 800198a:	4613      	mov	r3, r2
 800198c:	005b      	lsls	r3, r3, #1
 800198e:	4413      	add	r3, r2
 8001990:	00db      	lsls	r3, r3, #3
 8001992:	440b      	add	r3, r1
 8001994:	330c      	adds	r3, #12
 8001996:	2201      	movs	r2, #1
 8001998:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 800199a:	4b09      	ldr	r3, [pc, #36]	@ (80019c0 <UnlinkTimer+0xf8>)
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	2b06      	cmp	r3, #6
 80019a2:	d107      	bne.n	80019b4 <UnlinkTimer+0xec>
 80019a4:	79bb      	ldrb	r3, [r7, #6]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d104      	bne.n	80019b4 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80019aa:	4b08      	ldr	r3, [pc, #32]	@ (80019cc <UnlinkTimer+0x104>)
 80019ac:	f04f 32ff 	mov.w	r2, #4294967295
 80019b0:	601a      	str	r2, [r3, #0]
  }

  return;
 80019b2:	bf00      	nop
 80019b4:	bf00      	nop
}
 80019b6:	3714      	adds	r7, #20
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr
 80019c0:	20000168 	.word	0x20000168
 80019c4:	20000169 	.word	0x20000169
 80019c8:	200000d8 	.word	0x200000d8
 80019cc:	2000016c 	.word	0x2000016c

080019d0 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 80019d6:	4b1a      	ldr	r3, [pc, #104]	@ (8001a40 <ReturnTimeElapsed+0x70>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019de:	d026      	beq.n	8001a2e <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 80019e0:	f7ff fe02 	bl	80015e8 <ReadRtcSsrValue>
 80019e4:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 80019e6:	4b16      	ldr	r3, [pc, #88]	@ (8001a40 <ReturnTimeElapsed+0x70>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d805      	bhi.n	80019fc <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 80019f0:	4b13      	ldr	r3, [pc, #76]	@ (8001a40 <ReturnTimeElapsed+0x70>)
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	1ad3      	subs	r3, r2, r3
 80019f8:	607b      	str	r3, [r7, #4]
 80019fa:	e00a      	b.n	8001a12 <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 80019fc:	4b11      	ldr	r3, [pc, #68]	@ (8001a44 <ReturnTimeElapsed+0x74>)
 80019fe:	881b      	ldrh	r3, [r3, #0]
 8001a00:	461a      	mov	r2, r3
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8001a08:	4b0d      	ldr	r3, [pc, #52]	@ (8001a40 <ReturnTimeElapsed+0x70>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	683a      	ldr	r2, [r7, #0]
 8001a0e:	4413      	add	r3, r2
 8001a10:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8001a12:	4b0d      	ldr	r3, [pc, #52]	@ (8001a48 <ReturnTimeElapsed+0x78>)
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	461a      	mov	r2, r3
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	fb02 f303 	mul.w	r3, r2, r3
 8001a1e:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8001a20:	4b0a      	ldr	r3, [pc, #40]	@ (8001a4c <ReturnTimeElapsed+0x7c>)
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	461a      	mov	r2, r3
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	40d3      	lsrs	r3, r2
 8001a2a:	607b      	str	r3, [r7, #4]
 8001a2c:	e001      	b.n	8001a32 <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	b29b      	uxth	r3, r3
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3708      	adds	r7, #8
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	2000016c 	.word	0x2000016c
 8001a44:	20000174 	.word	0x20000174
 8001a48:	20000172 	.word	0x20000172
 8001a4c:	20000171 	.word	0x20000171

08001a50 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	4603      	mov	r3, r0
 8001a58:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 8001a5a:	88fb      	ldrh	r3, [r7, #6]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d108      	bne.n	8001a72 <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001a60:	f7ff fdc2 	bl	80015e8 <ReadRtcSsrValue>
 8001a64:	4603      	mov	r3, r0
 8001a66:	4a21      	ldr	r2, [pc, #132]	@ (8001aec <RestartWakeupCounter+0x9c>)
 8001a68:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001a6a:	2003      	movs	r0, #3
 8001a6c:	f001 fdef 	bl	800364e <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8001a70:	e039      	b.n	8001ae6 <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8001a72:	88fb      	ldrh	r3, [r7, #6]
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d803      	bhi.n	8001a80 <RestartWakeupCounter+0x30>
 8001a78:	4b1d      	ldr	r3, [pc, #116]	@ (8001af0 <RestartWakeupCounter+0xa0>)
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d002      	beq.n	8001a86 <RestartWakeupCounter+0x36>
      Value -= 1;
 8001a80:	88fb      	ldrh	r3, [r7, #6]
 8001a82:	3b01      	subs	r3, #1
 8001a84:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001a86:	bf00      	nop
 8001a88:	4b1a      	ldr	r3, [pc, #104]	@ (8001af4 <RestartWakeupCounter+0xa4>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	68db      	ldr	r3, [r3, #12]
 8001a8e:	f003 0304 	and.w	r3, r3, #4
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d0f8      	beq.n	8001a88 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001a96:	4b17      	ldr	r3, [pc, #92]	@ (8001af4 <RestartWakeupCounter+0xa4>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	b2da      	uxtb	r2, r3
 8001a9e:	4b15      	ldr	r3, [pc, #84]	@ (8001af4 <RestartWakeupCounter+0xa4>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8001aa6:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001aa8:	4b13      	ldr	r3, [pc, #76]	@ (8001af8 <RestartWakeupCounter+0xa8>)
 8001aaa:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001aae:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001ab0:	2003      	movs	r0, #3
 8001ab2:	f001 fdda 	bl	800366a <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8001ab6:	4b11      	ldr	r3, [pc, #68]	@ (8001afc <RestartWakeupCounter+0xac>)
 8001ab8:	695b      	ldr	r3, [r3, #20]
 8001aba:	0c1b      	lsrs	r3, r3, #16
 8001abc:	041b      	lsls	r3, r3, #16
 8001abe:	88fa      	ldrh	r2, [r7, #6]
 8001ac0:	490e      	ldr	r1, [pc, #56]	@ (8001afc <RestartWakeupCounter+0xac>)
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001ac6:	f7ff fd8f 	bl	80015e8 <ReadRtcSsrValue>
 8001aca:	4603      	mov	r3, r0
 8001acc:	4a07      	ldr	r2, [pc, #28]	@ (8001aec <RestartWakeupCounter+0x9c>)
 8001ace:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8001ad0:	4b08      	ldr	r3, [pc, #32]	@ (8001af4 <RestartWakeupCounter+0xa4>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	689a      	ldr	r2, [r3, #8]
 8001ad6:	4b07      	ldr	r3, [pc, #28]	@ (8001af4 <RestartWakeupCounter+0xa4>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001ade:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8001ae0:	f3af 8000 	nop.w
  return ;
 8001ae4:	bf00      	nop
}
 8001ae6:	3708      	adds	r7, #8
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	2000016c 	.word	0x2000016c
 8001af0:	20000171 	.word	0x20000171
 8001af4:	200001c4 	.word	0x200001c4
 8001af8:	58000800 	.word	0x58000800
 8001afc:	40002800 	.word	0x40002800

08001b00 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b084      	sub	sp, #16
 8001b04:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001b06:	4b45      	ldr	r3, [pc, #276]	@ (8001c1c <RescheduleTimerList+0x11c>)
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b12:	d107      	bne.n	8001b24 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8001b14:	bf00      	nop
 8001b16:	4b42      	ldr	r3, [pc, #264]	@ (8001c20 <RescheduleTimerList+0x120>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	f003 0304 	and.w	r3, r3, #4
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d1f8      	bne.n	8001b16 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8001b24:	4b3e      	ldr	r3, [pc, #248]	@ (8001c20 <RescheduleTimerList+0x120>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	689a      	ldr	r2, [r3, #8]
 8001b2a:	4b3d      	ldr	r3, [pc, #244]	@ (8001c20 <RescheduleTimerList+0x120>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001b32:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8001b34:	4b3b      	ldr	r3, [pc, #236]	@ (8001c24 <RescheduleTimerList+0x124>)
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8001b3a:	7bfa      	ldrb	r2, [r7, #15]
 8001b3c:	493a      	ldr	r1, [pc, #232]	@ (8001c28 <RescheduleTimerList+0x128>)
 8001b3e:	4613      	mov	r3, r2
 8001b40:	005b      	lsls	r3, r3, #1
 8001b42:	4413      	add	r3, r2
 8001b44:	00db      	lsls	r3, r3, #3
 8001b46:	440b      	add	r3, r1
 8001b48:	3308      	adds	r3, #8
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8001b4e:	f7ff ff3f 	bl	80019d0 <ReturnTimeElapsed>
 8001b52:	4603      	mov	r3, r0
 8001b54:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8001b56:	88fb      	ldrh	r3, [r7, #6]
 8001b58:	68ba      	ldr	r2, [r7, #8]
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	d205      	bcs.n	8001b6a <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001b62:	4b32      	ldr	r3, [pc, #200]	@ (8001c2c <RescheduleTimerList+0x12c>)
 8001b64:	2201      	movs	r2, #1
 8001b66:	701a      	strb	r2, [r3, #0]
 8001b68:	e04d      	b.n	8001c06 <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8001b6a:	88fb      	ldrh	r3, [r7, #6]
 8001b6c:	4a30      	ldr	r2, [pc, #192]	@ (8001c30 <RescheduleTimerList+0x130>)
 8001b6e:	8812      	ldrh	r2, [r2, #0]
 8001b70:	b292      	uxth	r2, r2
 8001b72:	4413      	add	r3, r2
 8001b74:	461a      	mov	r2, r3
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d906      	bls.n	8001b8a <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8001b7c:	4b2c      	ldr	r3, [pc, #176]	@ (8001c30 <RescheduleTimerList+0x130>)
 8001b7e:	881b      	ldrh	r3, [r3, #0]
 8001b80:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8001b82:	4b2a      	ldr	r3, [pc, #168]	@ (8001c2c <RescheduleTimerList+0x12c>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	701a      	strb	r2, [r3, #0]
 8001b88:	e03d      	b.n	8001c06 <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	b29a      	uxth	r2, r3
 8001b8e:	88fb      	ldrh	r3, [r7, #6]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001b94:	4b25      	ldr	r3, [pc, #148]	@ (8001c2c <RescheduleTimerList+0x12c>)
 8001b96:	2201      	movs	r2, #1
 8001b98:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001b9a:	e034      	b.n	8001c06 <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8001b9c:	7bfa      	ldrb	r2, [r7, #15]
 8001b9e:	4922      	ldr	r1, [pc, #136]	@ (8001c28 <RescheduleTimerList+0x128>)
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	005b      	lsls	r3, r3, #1
 8001ba4:	4413      	add	r3, r2
 8001ba6:	00db      	lsls	r3, r3, #3
 8001ba8:	440b      	add	r3, r1
 8001baa:	3308      	adds	r3, #8
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	88fb      	ldrh	r3, [r7, #6]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d20a      	bcs.n	8001bca <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8001bb4:	7bfa      	ldrb	r2, [r7, #15]
 8001bb6:	491c      	ldr	r1, [pc, #112]	@ (8001c28 <RescheduleTimerList+0x128>)
 8001bb8:	4613      	mov	r3, r2
 8001bba:	005b      	lsls	r3, r3, #1
 8001bbc:	4413      	add	r3, r2
 8001bbe:	00db      	lsls	r3, r3, #3
 8001bc0:	440b      	add	r3, r1
 8001bc2:	3308      	adds	r3, #8
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	601a      	str	r2, [r3, #0]
 8001bc8:	e013      	b.n	8001bf2 <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8001bca:	7bfa      	ldrb	r2, [r7, #15]
 8001bcc:	4916      	ldr	r1, [pc, #88]	@ (8001c28 <RescheduleTimerList+0x128>)
 8001bce:	4613      	mov	r3, r2
 8001bd0:	005b      	lsls	r3, r3, #1
 8001bd2:	4413      	add	r3, r2
 8001bd4:	00db      	lsls	r3, r3, #3
 8001bd6:	440b      	add	r3, r1
 8001bd8:	3308      	adds	r3, #8
 8001bda:	6819      	ldr	r1, [r3, #0]
 8001bdc:	88fb      	ldrh	r3, [r7, #6]
 8001bde:	7bfa      	ldrb	r2, [r7, #15]
 8001be0:	1ac9      	subs	r1, r1, r3
 8001be2:	4811      	ldr	r0, [pc, #68]	@ (8001c28 <RescheduleTimerList+0x128>)
 8001be4:	4613      	mov	r3, r2
 8001be6:	005b      	lsls	r3, r3, #1
 8001be8:	4413      	add	r3, r2
 8001bea:	00db      	lsls	r3, r3, #3
 8001bec:	4403      	add	r3, r0
 8001bee:	3308      	adds	r3, #8
 8001bf0:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8001bf2:	7bfa      	ldrb	r2, [r7, #15]
 8001bf4:	490c      	ldr	r1, [pc, #48]	@ (8001c28 <RescheduleTimerList+0x128>)
 8001bf6:	4613      	mov	r3, r2
 8001bf8:	005b      	lsls	r3, r3, #1
 8001bfa:	4413      	add	r3, r2
 8001bfc:	00db      	lsls	r3, r3, #3
 8001bfe:	440b      	add	r3, r1
 8001c00:	3315      	adds	r3, #21
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001c06:	7bfb      	ldrb	r3, [r7, #15]
 8001c08:	2b06      	cmp	r3, #6
 8001c0a:	d1c7      	bne.n	8001b9c <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8001c0c:	89bb      	ldrh	r3, [r7, #12]
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f7ff ff1e 	bl	8001a50 <RestartWakeupCounter>

  return ;
 8001c14:	bf00      	nop
}
 8001c16:	3710      	adds	r7, #16
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	40002800 	.word	0x40002800
 8001c20:	200001c4 	.word	0x200001c4
 8001c24:	20000168 	.word	0x20000168
 8001c28:	200000d8 	.word	0x200000d8
 8001c2c:	20000170 	.word	0x20000170
 8001c30:	20000176 	.word	0x20000176

08001c34 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b08a      	sub	sp, #40	@ 0x28
 8001c38:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001c3a:	f3ef 8310 	mrs	r3, PRIMASK
 8001c3e:	617b      	str	r3, [r7, #20]
  return(result);
 8001c40:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001c42:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8001c44:	b672      	cpsid	i
}
 8001c46:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001c48:	4b59      	ldr	r3, [pc, #356]	@ (8001db0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	22ca      	movs	r2, #202	@ 0xca
 8001c4e:	625a      	str	r2, [r3, #36]	@ 0x24
 8001c50:	4b57      	ldr	r3, [pc, #348]	@ (8001db0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	2253      	movs	r2, #83	@ 0x53
 8001c56:	625a      	str	r2, [r3, #36]	@ 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8001c58:	4b55      	ldr	r3, [pc, #340]	@ (8001db0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	689a      	ldr	r2, [r3, #8]
 8001c5e:	4b54      	ldr	r3, [pc, #336]	@ (8001db0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001c66:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8001c68:	4b52      	ldr	r3, [pc, #328]	@ (8001db4 <HW_TS_RTC_Wakeup_Handler+0x180>)
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8001c70:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001c74:	4950      	ldr	r1, [pc, #320]	@ (8001db8 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001c76:	4613      	mov	r3, r2
 8001c78:	005b      	lsls	r3, r3, #1
 8001c7a:	4413      	add	r3, r2
 8001c7c:	00db      	lsls	r3, r3, #3
 8001c7e:	440b      	add	r3, r1
 8001c80:	330c      	adds	r3, #12
 8001c82:	781b      	ldrb	r3, [r3, #0]
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	d16e      	bne.n	8001d68 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8001c8a:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001c8e:	494a      	ldr	r1, [pc, #296]	@ (8001db8 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001c90:	4613      	mov	r3, r2
 8001c92:	005b      	lsls	r3, r3, #1
 8001c94:	4413      	add	r3, r2
 8001c96:	00db      	lsls	r3, r3, #3
 8001c98:	440b      	add	r3, r1
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8001c9e:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001ca2:	4945      	ldr	r1, [pc, #276]	@ (8001db8 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001ca4:	4613      	mov	r3, r2
 8001ca6:	005b      	lsls	r3, r3, #1
 8001ca8:	4413      	add	r3, r2
 8001caa:	00db      	lsls	r3, r3, #3
 8001cac:	440b      	add	r3, r1
 8001cae:	3310      	adds	r3, #16
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8001cb4:	4b41      	ldr	r3, [pc, #260]	@ (8001dbc <HW_TS_RTC_Wakeup_Handler+0x188>)
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d04c      	beq.n	8001d58 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8001cbe:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001cc2:	493d      	ldr	r1, [pc, #244]	@ (8001db8 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	005b      	lsls	r3, r3, #1
 8001cc8:	4413      	add	r3, r2
 8001cca:	00db      	lsls	r3, r3, #3
 8001ccc:	440b      	add	r3, r1
 8001cce:	330d      	adds	r3, #13
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d124      	bne.n	8001d22 <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8001cd8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001cdc:	2101      	movs	r1, #1
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f7ff fdf2 	bl	80018c8 <UnlinkTimer>
 8001ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ce6:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	f383 8810 	msr	PRIMASK, r3
}
 8001cee:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8001cf0:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001cf4:	4930      	ldr	r1, [pc, #192]	@ (8001db8 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001cf6:	4613      	mov	r3, r2
 8001cf8:	005b      	lsls	r3, r3, #1
 8001cfa:	4413      	add	r3, r2
 8001cfc:	00db      	lsls	r3, r3, #3
 8001cfe:	440b      	add	r3, r1
 8001d00:	3304      	adds	r3, #4
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001d08:	4611      	mov	r1, r2
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f000 fa32 	bl	8002174 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001d10:	4b27      	ldr	r3, [pc, #156]	@ (8001db0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	22ca      	movs	r2, #202	@ 0xca
 8001d16:	625a      	str	r2, [r3, #36]	@ 0x24
 8001d18:	4b25      	ldr	r3, [pc, #148]	@ (8001db0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	2253      	movs	r2, #83	@ 0x53
 8001d1e:	625a      	str	r2, [r3, #36]	@ 0x24
 8001d20:	e012      	b.n	8001d48 <HW_TS_RTC_Wakeup_Handler+0x114>
 8001d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d24:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	f383 8810 	msr	PRIMASK, r3
}
 8001d2c:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8001d2e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001d32:	4618      	mov	r0, r3
 8001d34:	f000 f99a 	bl	800206c <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001d38:	4b1d      	ldr	r3, [pc, #116]	@ (8001db0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	22ca      	movs	r2, #202	@ 0xca
 8001d3e:	625a      	str	r2, [r3, #36]	@ 0x24
 8001d40:	4b1b      	ldr	r3, [pc, #108]	@ (8001db0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	2253      	movs	r2, #83	@ 0x53
 8001d46:	625a      	str	r2, [r3, #36]	@ 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8001d48:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001d4c:	69fa      	ldr	r2, [r7, #28]
 8001d4e:	4619      	mov	r1, r3
 8001d50:	69b8      	ldr	r0, [r7, #24]
 8001d52:	f000 fa95 	bl	8002280 <HW_TS_RTC_Int_AppNot>
 8001d56:	e022      	b.n	8001d9e <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 8001d58:	f7ff fed2 	bl	8001b00 <RescheduleTimerList>
 8001d5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d5e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	f383 8810 	msr	PRIMASK, r3
}
 8001d66:	e01a      	b.n	8001d9e <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001d68:	bf00      	nop
 8001d6a:	4b11      	ldr	r3, [pc, #68]	@ (8001db0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	f003 0304 	and.w	r3, r3, #4
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d0f8      	beq.n	8001d6a <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001d78:	4b0d      	ldr	r3, [pc, #52]	@ (8001db0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	68db      	ldr	r3, [r3, #12]
 8001d7e:	b2da      	uxtb	r2, r3
 8001d80:	4b0b      	ldr	r3, [pc, #44]	@ (8001db0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8001d88:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001d8a:	4b0d      	ldr	r3, [pc, #52]	@ (8001dc0 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001d8c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001d90:	60da      	str	r2, [r3, #12]
 8001d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d94:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	f383 8810 	msr	PRIMASK, r3
}
 8001d9c:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001d9e:	4b04      	ldr	r3, [pc, #16]	@ (8001db0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	22ff      	movs	r2, #255	@ 0xff
 8001da4:	625a      	str	r2, [r3, #36]	@ 0x24

  return;
 8001da6:	bf00      	nop
}
 8001da8:	3728      	adds	r7, #40	@ 0x28
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	200001c4 	.word	0x200001c4
 8001db4:	20000168 	.word	0x20000168
 8001db8:	200000d8 	.word	0x200000d8
 8001dbc:	20000170 	.word	0x20000170
 8001dc0:	58000800 	.word	0x58000800

08001dc4 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b088      	sub	sp, #32
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	4603      	mov	r3, r0
 8001dcc:	6039      	str	r1, [r7, #0]
 8001dce:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001dd0:	4b5e      	ldr	r3, [pc, #376]	@ (8001f4c <HW_TS_Init+0x188>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	22ca      	movs	r2, #202	@ 0xca
 8001dd6:	625a      	str	r2, [r3, #36]	@ 0x24
 8001dd8:	4b5c      	ldr	r3, [pc, #368]	@ (8001f4c <HW_TS_Init+0x188>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	2253      	movs	r2, #83	@ 0x53
 8001dde:	625a      	str	r2, [r3, #36]	@ 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001de0:	4b5b      	ldr	r3, [pc, #364]	@ (8001f50 <HW_TS_Init+0x18c>)
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	4a5a      	ldr	r2, [pc, #360]	@ (8001f50 <HW_TS_Init+0x18c>)
 8001de6:	f043 0320 	orr.w	r3, r3, #32
 8001dea:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8001dec:	4b58      	ldr	r3, [pc, #352]	@ (8001f50 <HW_TS_Init+0x18c>)
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	f003 0307 	and.w	r3, r3, #7
 8001df6:	b2db      	uxtb	r3, r3
 8001df8:	f1c3 0304 	rsb	r3, r3, #4
 8001dfc:	b2da      	uxtb	r2, r3
 8001dfe:	4b55      	ldr	r3, [pc, #340]	@ (8001f54 <HW_TS_Init+0x190>)
 8001e00:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8001e02:	4b53      	ldr	r3, [pc, #332]	@ (8001f50 <HW_TS_Init+0x18c>)
 8001e04:	691b      	ldr	r3, [r3, #16]
 8001e06:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001e0a:	f44f 02fe 	mov.w	r2, #8323072	@ 0x7f0000
 8001e0e:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e10:	693a      	ldr	r2, [r7, #16]
 8001e12:	fa92 f2a2 	rbit	r2, r2
 8001e16:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001e18:	68fa      	ldr	r2, [r7, #12]
 8001e1a:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001e1c:	697a      	ldr	r2, [r7, #20]
 8001e1e:	2a00      	cmp	r2, #0
 8001e20:	d101      	bne.n	8001e26 <HW_TS_Init+0x62>
  {
    return 32U;
 8001e22:	2220      	movs	r2, #32
 8001e24:	e003      	b.n	8001e2e <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 8001e26:	697a      	ldr	r2, [r7, #20]
 8001e28:	fab2 f282 	clz	r2, r2
 8001e2c:	b2d2      	uxtb	r2, r2
 8001e2e:	40d3      	lsrs	r3, r2
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	3301      	adds	r3, #1
 8001e34:	b2da      	uxtb	r2, r3
 8001e36:	4b48      	ldr	r3, [pc, #288]	@ (8001f58 <HW_TS_Init+0x194>)
 8001e38:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8001e3a:	4b45      	ldr	r3, [pc, #276]	@ (8001f50 <HW_TS_Init+0x18c>)
 8001e3c:	691b      	ldr	r3, [r3, #16]
 8001e3e:	b29b      	uxth	r3, r3
 8001e40:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001e44:	b29b      	uxth	r3, r3
 8001e46:	3301      	adds	r3, #1
 8001e48:	b29a      	uxth	r2, r3
 8001e4a:	4b44      	ldr	r3, [pc, #272]	@ (8001f5c <HW_TS_Init+0x198>)
 8001e4c:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8001e4e:	4b43      	ldr	r3, [pc, #268]	@ (8001f5c <HW_TS_Init+0x198>)
 8001e50:	881b      	ldrh	r3, [r3, #0]
 8001e52:	3b01      	subs	r3, #1
 8001e54:	4a40      	ldr	r2, [pc, #256]	@ (8001f58 <HW_TS_Init+0x194>)
 8001e56:	7812      	ldrb	r2, [r2, #0]
 8001e58:	fb02 f303 	mul.w	r3, r2, r3
 8001e5c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001e60:	4a3c      	ldr	r2, [pc, #240]	@ (8001f54 <HW_TS_Init+0x190>)
 8001e62:	7812      	ldrb	r2, [r2, #0]
 8001e64:	40d3      	lsrs	r3, r2
 8001e66:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8001e68:	69bb      	ldr	r3, [r7, #24]
 8001e6a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d904      	bls.n	8001e7c <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8001e72:	4b3b      	ldr	r3, [pc, #236]	@ (8001f60 <HW_TS_Init+0x19c>)
 8001e74:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001e78:	801a      	strh	r2, [r3, #0]
 8001e7a:	e003      	b.n	8001e84 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8001e7c:	69bb      	ldr	r3, [r7, #24]
 8001e7e:	b29a      	uxth	r2, r3
 8001e80:	4b37      	ldr	r3, [pc, #220]	@ (8001f60 <HW_TS_Init+0x19c>)
 8001e82:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001e84:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8001e88:	f7ff fb9c 	bl	80015c4 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001e8c:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8001e90:	f7ff fb84 	bl	800159c <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8001e94:	79fb      	ldrb	r3, [r7, #7]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d13d      	bne.n	8001f16 <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001e9a:	4b32      	ldr	r3, [pc, #200]	@ (8001f64 <HW_TS_Init+0x1a0>)
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001ea0:	4b31      	ldr	r3, [pc, #196]	@ (8001f68 <HW_TS_Init+0x1a4>)
 8001ea2:	f04f 32ff 	mov.w	r2, #4294967295
 8001ea6:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	77fb      	strb	r3, [r7, #31]
 8001eac:	e00c      	b.n	8001ec8 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8001eae:	7ffa      	ldrb	r2, [r7, #31]
 8001eb0:	492e      	ldr	r1, [pc, #184]	@ (8001f6c <HW_TS_Init+0x1a8>)
 8001eb2:	4613      	mov	r3, r2
 8001eb4:	005b      	lsls	r3, r3, #1
 8001eb6:	4413      	add	r3, r2
 8001eb8:	00db      	lsls	r3, r3, #3
 8001eba:	440b      	add	r3, r1
 8001ebc:	330c      	adds	r3, #12
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001ec2:	7ffb      	ldrb	r3, [r7, #31]
 8001ec4:	3301      	adds	r3, #1
 8001ec6:	77fb      	strb	r3, [r7, #31]
 8001ec8:	7ffb      	ldrb	r3, [r7, #31]
 8001eca:	2b05      	cmp	r3, #5
 8001ecc:	d9ef      	bls.n	8001eae <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8001ece:	4b28      	ldr	r3, [pc, #160]	@ (8001f70 <HW_TS_Init+0x1ac>)
 8001ed0:	2206      	movs	r2, #6
 8001ed2:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8001ed4:	4b1d      	ldr	r3, [pc, #116]	@ (8001f4c <HW_TS_Init+0x188>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	689a      	ldr	r2, [r3, #8]
 8001eda:	4b1c      	ldr	r3, [pc, #112]	@ (8001f4c <HW_TS_Init+0x188>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001ee2:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8001ee4:	4b19      	ldr	r3, [pc, #100]	@ (8001f4c <HW_TS_Init+0x188>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	68db      	ldr	r3, [r3, #12]
 8001eea:	b2da      	uxtb	r2, r3
 8001eec:	4b17      	ldr	r3, [pc, #92]	@ (8001f4c <HW_TS_Init+0x188>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8001ef4:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8001ef6:	4b1f      	ldr	r3, [pc, #124]	@ (8001f74 <HW_TS_Init+0x1b0>)
 8001ef8:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001efc:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8001efe:	2003      	movs	r0, #3
 8001f00:	f001 fbb3 	bl	800366a <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8001f04:	4b11      	ldr	r3, [pc, #68]	@ (8001f4c <HW_TS_Init+0x188>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	689a      	ldr	r2, [r3, #8]
 8001f0a:	4b10      	ldr	r3, [pc, #64]	@ (8001f4c <HW_TS_Init+0x188>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001f12:	609a      	str	r2, [r3, #8]
 8001f14:	e009      	b.n	8001f2a <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 8001f16:	4b0d      	ldr	r3, [pc, #52]	@ (8001f4c <HW_TS_Init+0x188>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d002      	beq.n	8001f2a <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001f24:	2003      	movs	r0, #3
 8001f26:	f001 fb92 	bl	800364e <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001f2a:	4b08      	ldr	r3, [pc, #32]	@ (8001f4c <HW_TS_Init+0x188>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	22ff      	movs	r2, #255	@ 0xff
 8001f30:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8001f32:	2200      	movs	r2, #0
 8001f34:	2103      	movs	r1, #3
 8001f36:	2003      	movs	r0, #3
 8001f38:	f001 fb47 	bl	80035ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001f3c:	2003      	movs	r0, #3
 8001f3e:	f001 fb5e 	bl	80035fe <HAL_NVIC_EnableIRQ>

  return;
 8001f42:	bf00      	nop
}
 8001f44:	3720      	adds	r7, #32
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	200001c4 	.word	0x200001c4
 8001f50:	40002800 	.word	0x40002800
 8001f54:	20000171 	.word	0x20000171
 8001f58:	20000172 	.word	0x20000172
 8001f5c:	20000174 	.word	0x20000174
 8001f60:	20000176 	.word	0x20000176
 8001f64:	20000170 	.word	0x20000170
 8001f68:	2000016c 	.word	0x2000016c
 8001f6c:	200000d8 	.word	0x200000d8
 8001f70:	20000168 	.word	0x20000168
 8001f74:	58000800 	.word	0x58000800

08001f78 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b08b      	sub	sp, #44	@ 0x2c
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	60f8      	str	r0, [r7, #12]
 8001f80:	60b9      	str	r1, [r7, #8]
 8001f82:	603b      	str	r3, [r7, #0]
 8001f84:	4613      	mov	r3, r2
 8001f86:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001f8e:	f3ef 8310 	mrs	r3, PRIMASK
 8001f92:	61fb      	str	r3, [r7, #28]
  return(result);
 8001f94:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001f96:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8001f98:	b672      	cpsid	i
}
 8001f9a:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8001f9c:	e004      	b.n	8001fa8 <HW_TS_Create+0x30>
  {
    loop++;
 8001f9e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8001fa8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001fac:	2b05      	cmp	r3, #5
 8001fae:	d80c      	bhi.n	8001fca <HW_TS_Create+0x52>
 8001fb0:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8001fb4:	492c      	ldr	r1, [pc, #176]	@ (8002068 <HW_TS_Create+0xf0>)
 8001fb6:	4613      	mov	r3, r2
 8001fb8:	005b      	lsls	r3, r3, #1
 8001fba:	4413      	add	r3, r2
 8001fbc:	00db      	lsls	r3, r3, #3
 8001fbe:	440b      	add	r3, r1
 8001fc0:	330c      	adds	r3, #12
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d1e9      	bne.n	8001f9e <HW_TS_Create+0x26>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001fca:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001fce:	2b06      	cmp	r3, #6
 8001fd0:	d038      	beq.n	8002044 <HW_TS_Create+0xcc>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 8001fd2:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8001fd6:	4924      	ldr	r1, [pc, #144]	@ (8002068 <HW_TS_Create+0xf0>)
 8001fd8:	4613      	mov	r3, r2
 8001fda:	005b      	lsls	r3, r3, #1
 8001fdc:	4413      	add	r3, r2
 8001fde:	00db      	lsls	r3, r3, #3
 8001fe0:	440b      	add	r3, r1
 8001fe2:	330c      	adds	r3, #12
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	701a      	strb	r2, [r3, #0]
 8001fe8:	6a3b      	ldr	r3, [r7, #32]
 8001fea:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001fec:	69bb      	ldr	r3, [r7, #24]
 8001fee:	f383 8810 	msr	PRIMASK, r3
}
 8001ff2:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 8001ff4:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8001ff8:	491b      	ldr	r1, [pc, #108]	@ (8002068 <HW_TS_Create+0xf0>)
 8001ffa:	4613      	mov	r3, r2
 8001ffc:	005b      	lsls	r3, r3, #1
 8001ffe:	4413      	add	r3, r2
 8002000:	00db      	lsls	r3, r3, #3
 8002002:	440b      	add	r3, r1
 8002004:	3310      	adds	r3, #16
 8002006:	68fa      	ldr	r2, [r7, #12]
 8002008:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 800200a:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800200e:	4916      	ldr	r1, [pc, #88]	@ (8002068 <HW_TS_Create+0xf0>)
 8002010:	4613      	mov	r3, r2
 8002012:	005b      	lsls	r3, r3, #1
 8002014:	4413      	add	r3, r2
 8002016:	00db      	lsls	r3, r3, #3
 8002018:	440b      	add	r3, r1
 800201a:	330d      	adds	r3, #13
 800201c:	79fa      	ldrb	r2, [r7, #7]
 800201e:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 8002020:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8002024:	4910      	ldr	r1, [pc, #64]	@ (8002068 <HW_TS_Create+0xf0>)
 8002026:	4613      	mov	r3, r2
 8002028:	005b      	lsls	r3, r3, #1
 800202a:	4413      	add	r3, r2
 800202c:	00db      	lsls	r3, r3, #3
 800202e:	440b      	add	r3, r1
 8002030:	683a      	ldr	r2, [r7, #0]
 8002032:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800203a:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 800203c:	2300      	movs	r3, #0
 800203e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002042:	e008      	b.n	8002056 <HW_TS_Create+0xde>
 8002044:	6a3b      	ldr	r3, [r7, #32]
 8002046:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	f383 8810 	msr	PRIMASK, r3
}
 800204e:	bf00      	nop
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 8002050:	2301      	movs	r3, #1
 8002052:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  return(localreturnstatus);
 8002056:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800205a:	4618      	mov	r0, r3
 800205c:	372c      	adds	r7, #44	@ 0x2c
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
 8002066:	bf00      	nop
 8002068:	200000d8 	.word	0x200000d8

0800206c <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b086      	sub	sp, #24
 8002070:	af00      	add	r7, sp, #0
 8002072:	4603      	mov	r3, r0
 8002074:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002076:	f3ef 8310 	mrs	r3, PRIMASK
 800207a:	60fb      	str	r3, [r7, #12]
  return(result);
 800207c:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800207e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002080:	b672      	cpsid	i
}
 8002082:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8002084:	2003      	movs	r0, #3
 8002086:	f001 fac8 	bl	800361a <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800208a:	4b34      	ldr	r3, [pc, #208]	@ (800215c <HW_TS_Stop+0xf0>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	22ca      	movs	r2, #202	@ 0xca
 8002090:	625a      	str	r2, [r3, #36]	@ 0x24
 8002092:	4b32      	ldr	r3, [pc, #200]	@ (800215c <HW_TS_Stop+0xf0>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	2253      	movs	r2, #83	@ 0x53
 8002098:	625a      	str	r2, [r3, #36]	@ 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800209a:	79fa      	ldrb	r2, [r7, #7]
 800209c:	4930      	ldr	r1, [pc, #192]	@ (8002160 <HW_TS_Stop+0xf4>)
 800209e:	4613      	mov	r3, r2
 80020a0:	005b      	lsls	r3, r3, #1
 80020a2:	4413      	add	r3, r2
 80020a4:	00db      	lsls	r3, r3, #3
 80020a6:	440b      	add	r3, r1
 80020a8:	330c      	adds	r3, #12
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d142      	bne.n	8002138 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 80020b2:	79fb      	ldrb	r3, [r7, #7]
 80020b4:	2100      	movs	r1, #0
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7ff fc06 	bl	80018c8 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 80020bc:	4b29      	ldr	r3, [pc, #164]	@ (8002164 <HW_TS_Stop+0xf8>)
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80020c2:	7cfb      	ldrb	r3, [r7, #19]
 80020c4:	2b06      	cmp	r3, #6
 80020c6:	d12f      	bne.n	8002128 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80020c8:	4b27      	ldr	r3, [pc, #156]	@ (8002168 <HW_TS_Stop+0xfc>)
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020d4:	d107      	bne.n	80020e6 <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 80020d6:	bf00      	nop
 80020d8:	4b20      	ldr	r3, [pc, #128]	@ (800215c <HW_TS_Stop+0xf0>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	68db      	ldr	r3, [r3, #12]
 80020de:	f003 0304 	and.w	r3, r3, #4
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d1f8      	bne.n	80020d8 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 80020e6:	4b1d      	ldr	r3, [pc, #116]	@ (800215c <HW_TS_Stop+0xf0>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	689a      	ldr	r2, [r3, #8]
 80020ec:	4b1b      	ldr	r3, [pc, #108]	@ (800215c <HW_TS_Stop+0xf0>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80020f4:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80020f6:	bf00      	nop
 80020f8:	4b18      	ldr	r3, [pc, #96]	@ (800215c <HW_TS_Stop+0xf0>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	68db      	ldr	r3, [r3, #12]
 80020fe:	f003 0304 	and.w	r3, r3, #4
 8002102:	2b00      	cmp	r3, #0
 8002104:	d0f8      	beq.n	80020f8 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8002106:	4b15      	ldr	r3, [pc, #84]	@ (800215c <HW_TS_Stop+0xf0>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	b2da      	uxtb	r2, r3
 800210e:	4b13      	ldr	r3, [pc, #76]	@ (800215c <HW_TS_Stop+0xf0>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8002116:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8002118:	4b14      	ldr	r3, [pc, #80]	@ (800216c <HW_TS_Stop+0x100>)
 800211a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800211e:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8002120:	2003      	movs	r0, #3
 8002122:	f001 faa2 	bl	800366a <HAL_NVIC_ClearPendingIRQ>
 8002126:	e007      	b.n	8002138 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8002128:	4b11      	ldr	r3, [pc, #68]	@ (8002170 <HW_TS_Stop+0x104>)
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	b2db      	uxtb	r3, r3
 800212e:	7cfa      	ldrb	r2, [r7, #19]
 8002130:	429a      	cmp	r2, r3
 8002132:	d001      	beq.n	8002138 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 8002134:	f7ff fce4 	bl	8001b00 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002138:	4b08      	ldr	r3, [pc, #32]	@ (800215c <HW_TS_Stop+0xf0>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	22ff      	movs	r2, #255	@ 0xff
 800213e:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002140:	2003      	movs	r0, #3
 8002142:	f001 fa5c 	bl	80035fe <HAL_NVIC_EnableIRQ>
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	f383 8810 	msr	PRIMASK, r3
}
 8002150:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8002152:	bf00      	nop
}
 8002154:	3718      	adds	r7, #24
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	200001c4 	.word	0x200001c4
 8002160:	200000d8 	.word	0x200000d8
 8002164:	20000168 	.word	0x20000168
 8002168:	40002800 	.word	0x40002800
 800216c:	58000800 	.word	0x58000800
 8002170:	20000169 	.word	0x20000169

08002174 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b086      	sub	sp, #24
 8002178:	af00      	add	r7, sp, #0
 800217a:	4603      	mov	r3, r0
 800217c:	6039      	str	r1, [r7, #0]
 800217e:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8002180:	79fa      	ldrb	r2, [r7, #7]
 8002182:	493b      	ldr	r1, [pc, #236]	@ (8002270 <HW_TS_Start+0xfc>)
 8002184:	4613      	mov	r3, r2
 8002186:	005b      	lsls	r3, r3, #1
 8002188:	4413      	add	r3, r2
 800218a:	00db      	lsls	r3, r3, #3
 800218c:	440b      	add	r3, r1
 800218e:	330c      	adds	r3, #12
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	b2db      	uxtb	r3, r3
 8002194:	2b02      	cmp	r3, #2
 8002196:	d103      	bne.n	80021a0 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8002198:	79fb      	ldrb	r3, [r7, #7]
 800219a:	4618      	mov	r0, r3
 800219c:	f7ff ff66 	bl	800206c <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80021a0:	f3ef 8310 	mrs	r3, PRIMASK
 80021a4:	60fb      	str	r3, [r7, #12]
  return(result);
 80021a6:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80021a8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80021aa:	b672      	cpsid	i
}
 80021ac:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80021ae:	2003      	movs	r0, #3
 80021b0:	f001 fa33 	bl	800361a <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80021b4:	4b2f      	ldr	r3, [pc, #188]	@ (8002274 <HW_TS_Start+0x100>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	22ca      	movs	r2, #202	@ 0xca
 80021ba:	625a      	str	r2, [r3, #36]	@ 0x24
 80021bc:	4b2d      	ldr	r3, [pc, #180]	@ (8002274 <HW_TS_Start+0x100>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	2253      	movs	r2, #83	@ 0x53
 80021c2:	625a      	str	r2, [r3, #36]	@ 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 80021c4:	79fa      	ldrb	r2, [r7, #7]
 80021c6:	492a      	ldr	r1, [pc, #168]	@ (8002270 <HW_TS_Start+0xfc>)
 80021c8:	4613      	mov	r3, r2
 80021ca:	005b      	lsls	r3, r3, #1
 80021cc:	4413      	add	r3, r2
 80021ce:	00db      	lsls	r3, r3, #3
 80021d0:	440b      	add	r3, r1
 80021d2:	330c      	adds	r3, #12
 80021d4:	2202      	movs	r2, #2
 80021d6:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 80021d8:	79fa      	ldrb	r2, [r7, #7]
 80021da:	4925      	ldr	r1, [pc, #148]	@ (8002270 <HW_TS_Start+0xfc>)
 80021dc:	4613      	mov	r3, r2
 80021de:	005b      	lsls	r3, r3, #1
 80021e0:	4413      	add	r3, r2
 80021e2:	00db      	lsls	r3, r3, #3
 80021e4:	440b      	add	r3, r1
 80021e6:	3308      	adds	r3, #8
 80021e8:	683a      	ldr	r2, [r7, #0]
 80021ea:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 80021ec:	79fa      	ldrb	r2, [r7, #7]
 80021ee:	4920      	ldr	r1, [pc, #128]	@ (8002270 <HW_TS_Start+0xfc>)
 80021f0:	4613      	mov	r3, r2
 80021f2:	005b      	lsls	r3, r3, #1
 80021f4:	4413      	add	r3, r2
 80021f6:	00db      	lsls	r3, r3, #3
 80021f8:	440b      	add	r3, r1
 80021fa:	3304      	adds	r3, #4
 80021fc:	683a      	ldr	r2, [r7, #0]
 80021fe:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8002200:	79fb      	ldrb	r3, [r7, #7]
 8002202:	4618      	mov	r0, r3
 8002204:	f7ff fab6 	bl	8001774 <linkTimer>
 8002208:	4603      	mov	r3, r0
 800220a:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 800220c:	4b1a      	ldr	r3, [pc, #104]	@ (8002278 <HW_TS_Start+0x104>)
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8002212:	4b1a      	ldr	r3, [pc, #104]	@ (800227c <HW_TS_Start+0x108>)
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	b2db      	uxtb	r3, r3
 8002218:	7c7a      	ldrb	r2, [r7, #17]
 800221a:	429a      	cmp	r2, r3
 800221c:	d002      	beq.n	8002224 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 800221e:	f7ff fc6f 	bl	8001b00 <RescheduleTimerList>
 8002222:	e013      	b.n	800224c <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8002224:	79fa      	ldrb	r2, [r7, #7]
 8002226:	4912      	ldr	r1, [pc, #72]	@ (8002270 <HW_TS_Start+0xfc>)
 8002228:	4613      	mov	r3, r2
 800222a:	005b      	lsls	r3, r3, #1
 800222c:	4413      	add	r3, r2
 800222e:	00db      	lsls	r3, r3, #3
 8002230:	440b      	add	r3, r1
 8002232:	3308      	adds	r3, #8
 8002234:	6819      	ldr	r1, [r3, #0]
 8002236:	8a7b      	ldrh	r3, [r7, #18]
 8002238:	79fa      	ldrb	r2, [r7, #7]
 800223a:	1ac9      	subs	r1, r1, r3
 800223c:	480c      	ldr	r0, [pc, #48]	@ (8002270 <HW_TS_Start+0xfc>)
 800223e:	4613      	mov	r3, r2
 8002240:	005b      	lsls	r3, r3, #1
 8002242:	4413      	add	r3, r2
 8002244:	00db      	lsls	r3, r3, #3
 8002246:	4403      	add	r3, r0
 8002248:	3308      	adds	r3, #8
 800224a:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800224c:	4b09      	ldr	r3, [pc, #36]	@ (8002274 <HW_TS_Start+0x100>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	22ff      	movs	r2, #255	@ 0xff
 8002252:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002254:	2003      	movs	r0, #3
 8002256:	f001 f9d2 	bl	80035fe <HAL_NVIC_EnableIRQ>
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	f383 8810 	msr	PRIMASK, r3
}
 8002264:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8002266:	bf00      	nop
}
 8002268:	3718      	adds	r7, #24
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	200000d8 	.word	0x200000d8
 8002274:	200001c4 	.word	0x200001c4
 8002278:	20000168 	.word	0x20000168
 800227c:	20000169 	.word	0x20000169

08002280 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b084      	sub	sp, #16
 8002284:	af00      	add	r7, sp, #0
 8002286:	60f8      	str	r0, [r7, #12]
 8002288:	460b      	mov	r3, r1
 800228a:	607a      	str	r2, [r7, #4]
 800228c:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4798      	blx	r3

  return;
 8002292:	bf00      	nop
}
 8002294:	3710      	adds	r7, #16
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
	...

0800229c <HW_UART_Transmit_DMA>:

    return hw_status;
}

hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b086      	sub	sp, #24
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	60b9      	str	r1, [r7, #8]
 80022a4:	607b      	str	r3, [r7, #4]
 80022a6:	4603      	mov	r3, r0
 80022a8:	73fb      	strb	r3, [r7, #15]
 80022aa:	4613      	mov	r3, r2
 80022ac:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef hal_status = HAL_OK;
 80022ae:	2300      	movs	r3, #0
 80022b0:	75fb      	strb	r3, [r7, #23]
    hw_status_t hw_status = hw_uart_ok;
 80022b2:	2300      	movs	r3, #0
 80022b4:	75bb      	strb	r3, [r7, #22]

    switch (hw_uart_id)
 80022b6:	7bfb      	ldrb	r3, [r7, #15]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d10e      	bne.n	80022da <HW_UART_Transmit_DMA+0x3e>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case hw_uart1:
            HW_huart1TxCb = cb;
 80022bc:	4a17      	ldr	r2, [pc, #92]	@ (800231c <HW_UART_Transmit_DMA+0x80>)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6013      	str	r3, [r2, #0]
            huart1.Instance = USART1;
 80022c2:	4b17      	ldr	r3, [pc, #92]	@ (8002320 <HW_UART_Transmit_DMA+0x84>)
 80022c4:	4a17      	ldr	r2, [pc, #92]	@ (8002324 <HW_UART_Transmit_DMA+0x88>)
 80022c6:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&huart1, p_data, size);
 80022c8:	89bb      	ldrh	r3, [r7, #12]
 80022ca:	461a      	mov	r2, r3
 80022cc:	68b9      	ldr	r1, [r7, #8]
 80022ce:	4814      	ldr	r0, [pc, #80]	@ (8002320 <HW_UART_Transmit_DMA+0x84>)
 80022d0:	f005 fe04 	bl	8007edc <HAL_UART_Transmit_DMA>
 80022d4:	4603      	mov	r3, r0
 80022d6:	75fb      	strb	r3, [r7, #23]
            break;
 80022d8:	e000      	b.n	80022dc <HW_UART_Transmit_DMA+0x40>
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
            break;
#endif

        default:
            break;
 80022da:	bf00      	nop
    }

    switch (hal_status)
 80022dc:	7dfb      	ldrb	r3, [r7, #23]
 80022de:	2b03      	cmp	r3, #3
 80022e0:	d816      	bhi.n	8002310 <HW_UART_Transmit_DMA+0x74>
 80022e2:	a201      	add	r2, pc, #4	@ (adr r2, 80022e8 <HW_UART_Transmit_DMA+0x4c>)
 80022e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022e8:	080022f9 	.word	0x080022f9
 80022ec:	080022ff 	.word	0x080022ff
 80022f0:	08002305 	.word	0x08002305
 80022f4:	0800230b 	.word	0x0800230b
    {
        case HAL_OK:
            hw_status = hw_uart_ok;
 80022f8:	2300      	movs	r3, #0
 80022fa:	75bb      	strb	r3, [r7, #22]
            break;
 80022fc:	e009      	b.n	8002312 <HW_UART_Transmit_DMA+0x76>

        case HAL_ERROR:
            hw_status = hw_uart_error;
 80022fe:	2301      	movs	r3, #1
 8002300:	75bb      	strb	r3, [r7, #22]
            break;
 8002302:	e006      	b.n	8002312 <HW_UART_Transmit_DMA+0x76>

        case HAL_BUSY:
            hw_status = hw_uart_busy;
 8002304:	2302      	movs	r3, #2
 8002306:	75bb      	strb	r3, [r7, #22]
            break;
 8002308:	e003      	b.n	8002312 <HW_UART_Transmit_DMA+0x76>

        case HAL_TIMEOUT:
            hw_status = hw_uart_to;
 800230a:	2303      	movs	r3, #3
 800230c:	75bb      	strb	r3, [r7, #22]
            break;
 800230e:	e000      	b.n	8002312 <HW_UART_Transmit_DMA+0x76>

        default:
            break;
 8002310:	bf00      	nop
    }

    return hw_status;
 8002312:	7dbb      	ldrb	r3, [r7, #22]
}
 8002314:	4618      	mov	r0, r3
 8002316:	3718      	adds	r7, #24
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}
 800231c:	20000178 	.word	0x20000178
 8002320:	200001e8 	.word	0x200001e8
 8002324:	40013800 	.word	0x40013800

08002328 <HAL_UART_TxCpltCallback>:

    return;
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	461a      	mov	r2, r3
 8002336:	4b09      	ldr	r3, [pc, #36]	@ (800235c <HAL_UART_TxCpltCallback+0x34>)
 8002338:	429a      	cmp	r2, r3
 800233a:	d107      	bne.n	800234c <HAL_UART_TxCpltCallback+0x24>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1TxCb)
 800233c:	4b08      	ldr	r3, [pc, #32]	@ (8002360 <HAL_UART_TxCpltCallback+0x38>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d005      	beq.n	8002350 <HAL_UART_TxCpltCallback+0x28>
            {
                HW_huart1TxCb();
 8002344:	4b06      	ldr	r3, [pc, #24]	@ (8002360 <HAL_UART_TxCpltCallback+0x38>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4798      	blx	r3
            }
            break;
 800234a:	e001      	b.n	8002350 <HAL_UART_TxCpltCallback+0x28>
            }
            break;
#endif

        default:
            break;
 800234c:	bf00      	nop
 800234e:	e000      	b.n	8002352 <HAL_UART_TxCpltCallback+0x2a>
            break;
 8002350:	bf00      	nop
    }

    return;
 8002352:	bf00      	nop
}
 8002354:	3708      	adds	r7, #8
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	40013800 	.word	0x40013800
 8002360:	20000178 	.word	0x20000178

08002364 <ism330_Init>:

extern I2C_HandleTypeDef hi2c3;


HAL_StatusTypeDef ism330_Init(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b086      	sub	sp, #24
 8002368:	af04      	add	r7, sp, #16
    HAL_StatusTypeDef ret;

    // CTRL3_C: Enable Block Data Update (BDU) and auto-increment
    uint8_t ctrl3_c = 0x44;  // BDU = 1 (bit6), IF_INC = 1 (bit2)
 800236a:	2344      	movs	r3, #68	@ 0x44
 800236c:	71bb      	strb	r3, [r7, #6]
    ret = HAL_I2C_Mem_Write(&hi2c3, ISM330_I2C_ADD, ISM330_CTRL3_C,
 800236e:	2364      	movs	r3, #100	@ 0x64
 8002370:	9302      	str	r3, [sp, #8]
 8002372:	2301      	movs	r3, #1
 8002374:	9301      	str	r3, [sp, #4]
 8002376:	1dbb      	adds	r3, r7, #6
 8002378:	9300      	str	r3, [sp, #0]
 800237a:	2301      	movs	r3, #1
 800237c:	2212      	movs	r2, #18
 800237e:	21d7      	movs	r1, #215	@ 0xd7
 8002380:	481c      	ldr	r0, [pc, #112]	@ (80023f4 <ism330_Init+0x90>)
 8002382:	f001 ff1d 	bl	80041c0 <HAL_I2C_Mem_Write>
 8002386:	4603      	mov	r3, r0
 8002388:	71fb      	strb	r3, [r7, #7]
                            I2C_MEMADD_SIZE_8BIT, &ctrl3_c, 1, 100);
    if (ret != HAL_OK) return ret;
 800238a:	79fb      	ldrb	r3, [r7, #7]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d001      	beq.n	8002394 <ism330_Init+0x30>
 8002390:	79fb      	ldrb	r3, [r7, #7]
 8002392:	e02a      	b.n	80023ea <ism330_Init+0x86>

    // CTRL1_XL: Accelerometer ODR = 104 Hz, FS = ±2g
    uint8_t ctrl1_xl = 0x40; // ODR_XL = 104 Hz (0100), FS = ±2g (00)
 8002394:	2340      	movs	r3, #64	@ 0x40
 8002396:	717b      	strb	r3, [r7, #5]
    ret = HAL_I2C_Mem_Write(&hi2c3, ISM330_I2C_ADD, ISM330_CTRL1_XL,
 8002398:	2364      	movs	r3, #100	@ 0x64
 800239a:	9302      	str	r3, [sp, #8]
 800239c:	2301      	movs	r3, #1
 800239e:	9301      	str	r3, [sp, #4]
 80023a0:	1d7b      	adds	r3, r7, #5
 80023a2:	9300      	str	r3, [sp, #0]
 80023a4:	2301      	movs	r3, #1
 80023a6:	2210      	movs	r2, #16
 80023a8:	21d7      	movs	r1, #215	@ 0xd7
 80023aa:	4812      	ldr	r0, [pc, #72]	@ (80023f4 <ism330_Init+0x90>)
 80023ac:	f001 ff08 	bl	80041c0 <HAL_I2C_Mem_Write>
 80023b0:	4603      	mov	r3, r0
 80023b2:	71fb      	strb	r3, [r7, #7]
                            I2C_MEMADD_SIZE_8BIT, &ctrl1_xl, 1, 100);
    if (ret != HAL_OK) return ret;
 80023b4:	79fb      	ldrb	r3, [r7, #7]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d001      	beq.n	80023be <ism330_Init+0x5a>
 80023ba:	79fb      	ldrb	r3, [r7, #7]
 80023bc:	e015      	b.n	80023ea <ism330_Init+0x86>

    // CTRL2_G: Gyroscope ODR = 104 Hz, FS = ±250 dps
    uint8_t ctrl2_g = 0x40;  // ODR_G = 104 Hz (0100), FS = ±250 dps (00)
 80023be:	2340      	movs	r3, #64	@ 0x40
 80023c0:	713b      	strb	r3, [r7, #4]
    ret = HAL_I2C_Mem_Write(&hi2c3, ISM330_I2C_ADD, ISM330_CTRL2_G,
 80023c2:	2364      	movs	r3, #100	@ 0x64
 80023c4:	9302      	str	r3, [sp, #8]
 80023c6:	2301      	movs	r3, #1
 80023c8:	9301      	str	r3, [sp, #4]
 80023ca:	1d3b      	adds	r3, r7, #4
 80023cc:	9300      	str	r3, [sp, #0]
 80023ce:	2301      	movs	r3, #1
 80023d0:	2211      	movs	r2, #17
 80023d2:	21d7      	movs	r1, #215	@ 0xd7
 80023d4:	4807      	ldr	r0, [pc, #28]	@ (80023f4 <ism330_Init+0x90>)
 80023d6:	f001 fef3 	bl	80041c0 <HAL_I2C_Mem_Write>
 80023da:	4603      	mov	r3, r0
 80023dc:	71fb      	strb	r3, [r7, #7]
                            I2C_MEMADD_SIZE_8BIT, &ctrl2_g, 1, 100);
    if (ret != HAL_OK) return ret;
 80023de:	79fb      	ldrb	r3, [r7, #7]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d001      	beq.n	80023e8 <ism330_Init+0x84>
 80023e4:	79fb      	ldrb	r3, [r7, #7]
 80023e6:	e000      	b.n	80023ea <ism330_Init+0x86>

    return HAL_OK;
 80023e8:	2300      	movs	r3, #0
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3708      	adds	r7, #8
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	20000340 	.word	0x20000340

080023f8 <ism330_ReadIMU>:
}


// Buffer to hold raw IMU data
int16_t* ism330_ReadIMU(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b088      	sub	sp, #32
 80023fc:	af04      	add	r7, sp, #16
    static int16_t imu_data[6];  // [accX, accY, accZ, gyroX, gyroY, gyroZ]
    uint8_t raw_data[12];        // 6 bytes each for gyro and accel
    HAL_StatusTypeDef ret;

    // Read 12 bytes starting from OUTX_L_G (gyro) to OUTZ_H_A (accel)
    ret = HAL_I2C_Mem_Read(&hi2c3, ISM330_I2C_ADD, ISM330_OUTX_L_G,
 80023fe:	2364      	movs	r3, #100	@ 0x64
 8002400:	9302      	str	r3, [sp, #8]
 8002402:	230c      	movs	r3, #12
 8002404:	9301      	str	r3, [sp, #4]
 8002406:	463b      	mov	r3, r7
 8002408:	9300      	str	r3, [sp, #0]
 800240a:	2301      	movs	r3, #1
 800240c:	2222      	movs	r2, #34	@ 0x22
 800240e:	21d7      	movs	r1, #215	@ 0xd7
 8002410:	4822      	ldr	r0, [pc, #136]	@ (800249c <ism330_ReadIMU+0xa4>)
 8002412:	f001 ffe9 	bl	80043e8 <HAL_I2C_Mem_Read>
 8002416:	4603      	mov	r3, r0
 8002418:	73fb      	strb	r3, [r7, #15]
                           I2C_MEMADD_SIZE_8BIT, raw_data, 12, 100);
    if (ret != HAL_OK) {
 800241a:	7bfb      	ldrb	r3, [r7, #15]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d001      	beq.n	8002424 <ism330_ReadIMU+0x2c>
        return NULL;  // Error reading IMU
 8002420:	2300      	movs	r3, #0
 8002422:	e036      	b.n	8002492 <ism330_ReadIMU+0x9a>
    }

    // Parse gyro data (first 6 bytes)
    imu_data[3] = (int16_t)(raw_data[1] << 8 | raw_data[0]);  // gyroX
 8002424:	787b      	ldrb	r3, [r7, #1]
 8002426:	021b      	lsls	r3, r3, #8
 8002428:	b21a      	sxth	r2, r3
 800242a:	783b      	ldrb	r3, [r7, #0]
 800242c:	b21b      	sxth	r3, r3
 800242e:	4313      	orrs	r3, r2
 8002430:	b21a      	sxth	r2, r3
 8002432:	4b1b      	ldr	r3, [pc, #108]	@ (80024a0 <ism330_ReadIMU+0xa8>)
 8002434:	80da      	strh	r2, [r3, #6]
    imu_data[4] = (int16_t)(raw_data[3] << 8 | raw_data[2]);  // gyroY
 8002436:	78fb      	ldrb	r3, [r7, #3]
 8002438:	021b      	lsls	r3, r3, #8
 800243a:	b21a      	sxth	r2, r3
 800243c:	78bb      	ldrb	r3, [r7, #2]
 800243e:	b21b      	sxth	r3, r3
 8002440:	4313      	orrs	r3, r2
 8002442:	b21a      	sxth	r2, r3
 8002444:	4b16      	ldr	r3, [pc, #88]	@ (80024a0 <ism330_ReadIMU+0xa8>)
 8002446:	811a      	strh	r2, [r3, #8]
    imu_data[5] = (int16_t)(raw_data[5] << 8 | raw_data[4]);  // gyroZ
 8002448:	797b      	ldrb	r3, [r7, #5]
 800244a:	021b      	lsls	r3, r3, #8
 800244c:	b21a      	sxth	r2, r3
 800244e:	793b      	ldrb	r3, [r7, #4]
 8002450:	b21b      	sxth	r3, r3
 8002452:	4313      	orrs	r3, r2
 8002454:	b21a      	sxth	r2, r3
 8002456:	4b12      	ldr	r3, [pc, #72]	@ (80024a0 <ism330_ReadIMU+0xa8>)
 8002458:	815a      	strh	r2, [r3, #10]

    // Parse accel data (next 6 bytes)
    imu_data[0] = (int16_t)(raw_data[7] << 8 | raw_data[6]);  // accX
 800245a:	79fb      	ldrb	r3, [r7, #7]
 800245c:	021b      	lsls	r3, r3, #8
 800245e:	b21a      	sxth	r2, r3
 8002460:	79bb      	ldrb	r3, [r7, #6]
 8002462:	b21b      	sxth	r3, r3
 8002464:	4313      	orrs	r3, r2
 8002466:	b21a      	sxth	r2, r3
 8002468:	4b0d      	ldr	r3, [pc, #52]	@ (80024a0 <ism330_ReadIMU+0xa8>)
 800246a:	801a      	strh	r2, [r3, #0]
    imu_data[1] = (int16_t)(raw_data[9] << 8 | raw_data[8]);  // accY
 800246c:	7a7b      	ldrb	r3, [r7, #9]
 800246e:	021b      	lsls	r3, r3, #8
 8002470:	b21a      	sxth	r2, r3
 8002472:	7a3b      	ldrb	r3, [r7, #8]
 8002474:	b21b      	sxth	r3, r3
 8002476:	4313      	orrs	r3, r2
 8002478:	b21a      	sxth	r2, r3
 800247a:	4b09      	ldr	r3, [pc, #36]	@ (80024a0 <ism330_ReadIMU+0xa8>)
 800247c:	805a      	strh	r2, [r3, #2]
    imu_data[2] = (int16_t)(raw_data[11] << 8 | raw_data[10]); // accZ
 800247e:	7afb      	ldrb	r3, [r7, #11]
 8002480:	021b      	lsls	r3, r3, #8
 8002482:	b21a      	sxth	r2, r3
 8002484:	7abb      	ldrb	r3, [r7, #10]
 8002486:	b21b      	sxth	r3, r3
 8002488:	4313      	orrs	r3, r2
 800248a:	b21a      	sxth	r2, r3
 800248c:	4b04      	ldr	r3, [pc, #16]	@ (80024a0 <ism330_ReadIMU+0xa8>)
 800248e:	809a      	strh	r2, [r3, #4]

    return imu_data;
 8002490:	4b03      	ldr	r3, [pc, #12]	@ (80024a0 <ism330_ReadIMU+0xa8>)
}
 8002492:	4618      	mov	r0, r3
 8002494:	3710      	adds	r7, #16
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	20000340 	.word	0x20000340
 80024a0:	2000017c 	.word	0x2000017c

080024a4 <lis3mdl_Init>:


extern I2C_HandleTypeDef hi2c3;

HAL_StatusTypeDef lis3mdl_Init(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b086      	sub	sp, #24
 80024a8:	af04      	add	r7, sp, #16
    HAL_StatusTypeDef ret;

    // CTRL_REG1: Temp enable = 0, Ultra-high-performance XY, ODR = 80 Hz
    uint8_t ctrl_reg1 = 0x70;  // 0b01110000
 80024aa:	2370      	movs	r3, #112	@ 0x70
 80024ac:	71bb      	strb	r3, [r7, #6]
    ret = HAL_I2C_Mem_Write(&hi2c3, LIS3MDL_I2C_ADD, LIS3MDL_CTRL_REG1,
 80024ae:	2364      	movs	r3, #100	@ 0x64
 80024b0:	9302      	str	r3, [sp, #8]
 80024b2:	2301      	movs	r3, #1
 80024b4:	9301      	str	r3, [sp, #4]
 80024b6:	1dbb      	adds	r3, r7, #6
 80024b8:	9300      	str	r3, [sp, #0]
 80024ba:	2301      	movs	r3, #1
 80024bc:	2220      	movs	r2, #32
 80024be:	213c      	movs	r1, #60	@ 0x3c
 80024c0:	481c      	ldr	r0, [pc, #112]	@ (8002534 <lis3mdl_Init+0x90>)
 80024c2:	f001 fe7d 	bl	80041c0 <HAL_I2C_Mem_Write>
 80024c6:	4603      	mov	r3, r0
 80024c8:	71fb      	strb	r3, [r7, #7]
                            I2C_MEMADD_SIZE_8BIT, &ctrl_reg1, 1, 100);
    if (ret != HAL_OK) return ret;
 80024ca:	79fb      	ldrb	r3, [r7, #7]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d001      	beq.n	80024d4 <lis3mdl_Init+0x30>
 80024d0:	79fb      	ldrb	r3, [r7, #7]
 80024d2:	e02a      	b.n	800252a <lis3mdl_Init+0x86>

    // CTRL_REG2: FS = ±4 gauss (00)
    uint8_t ctrl_reg2 = 0x00;
 80024d4:	2300      	movs	r3, #0
 80024d6:	717b      	strb	r3, [r7, #5]
    ret = HAL_I2C_Mem_Write(&hi2c3, LIS3MDL_I2C_ADD, LIS3MDL_CTRL_REG2,
 80024d8:	2364      	movs	r3, #100	@ 0x64
 80024da:	9302      	str	r3, [sp, #8]
 80024dc:	2301      	movs	r3, #1
 80024de:	9301      	str	r3, [sp, #4]
 80024e0:	1d7b      	adds	r3, r7, #5
 80024e2:	9300      	str	r3, [sp, #0]
 80024e4:	2301      	movs	r3, #1
 80024e6:	2221      	movs	r2, #33	@ 0x21
 80024e8:	213c      	movs	r1, #60	@ 0x3c
 80024ea:	4812      	ldr	r0, [pc, #72]	@ (8002534 <lis3mdl_Init+0x90>)
 80024ec:	f001 fe68 	bl	80041c0 <HAL_I2C_Mem_Write>
 80024f0:	4603      	mov	r3, r0
 80024f2:	71fb      	strb	r3, [r7, #7]
                            I2C_MEMADD_SIZE_8BIT, &ctrl_reg2, 1, 100);
    if (ret != HAL_OK) return ret;
 80024f4:	79fb      	ldrb	r3, [r7, #7]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d001      	beq.n	80024fe <lis3mdl_Init+0x5a>
 80024fa:	79fb      	ldrb	r3, [r7, #7]
 80024fc:	e015      	b.n	800252a <lis3mdl_Init+0x86>

    // CTRL_REG3: Continuous-conversion mode
    uint8_t ctrl_reg3 = 0x00;
 80024fe:	2300      	movs	r3, #0
 8002500:	713b      	strb	r3, [r7, #4]
    ret = HAL_I2C_Mem_Write(&hi2c3, LIS3MDL_I2C_ADD, LIS3MDL_CTRL_REG3,
 8002502:	2364      	movs	r3, #100	@ 0x64
 8002504:	9302      	str	r3, [sp, #8]
 8002506:	2301      	movs	r3, #1
 8002508:	9301      	str	r3, [sp, #4]
 800250a:	1d3b      	adds	r3, r7, #4
 800250c:	9300      	str	r3, [sp, #0]
 800250e:	2301      	movs	r3, #1
 8002510:	2222      	movs	r2, #34	@ 0x22
 8002512:	213c      	movs	r1, #60	@ 0x3c
 8002514:	4807      	ldr	r0, [pc, #28]	@ (8002534 <lis3mdl_Init+0x90>)
 8002516:	f001 fe53 	bl	80041c0 <HAL_I2C_Mem_Write>
 800251a:	4603      	mov	r3, r0
 800251c:	71fb      	strb	r3, [r7, #7]
                            I2C_MEMADD_SIZE_8BIT, &ctrl_reg3, 1, 100);
    if (ret != HAL_OK) return ret;
 800251e:	79fb      	ldrb	r3, [r7, #7]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d001      	beq.n	8002528 <lis3mdl_Init+0x84>
 8002524:	79fb      	ldrb	r3, [r7, #7]
 8002526:	e000      	b.n	800252a <lis3mdl_Init+0x86>

    return HAL_OK;
 8002528:	2300      	movs	r3, #0
}
 800252a:	4618      	mov	r0, r3
 800252c:	3708      	adds	r7, #8
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	20000340 	.word	0x20000340

08002538 <LL_RCC_LSE_SetDriveCapability>:
{
 8002538:	b480      	push	{r7}
 800253a:	b083      	sub	sp, #12
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8002540:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002544:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002548:	f023 0218 	bic.w	r2, r3, #24
 800254c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	4313      	orrs	r3, r2
 8002554:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8002558:	bf00      	nop
 800255a:	370c      	adds	r7, #12
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr

08002564 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8002564:	b480      	push	{r7}
 8002566:	b085      	sub	sp, #20
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 800256c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002570:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002572:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	4313      	orrs	r3, r2
 800257a:	648b      	str	r3, [r1, #72]	@ 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800257c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002580:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	4013      	ands	r3, r2
 8002586:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002588:	68fb      	ldr	r3, [r7, #12]
}
 800258a:	bf00      	nop
 800258c:	3714      	adds	r7, #20
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr

08002596 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8002596:	b480      	push	{r7}
 8002598:	b085      	sub	sp, #20
 800259a:	af00      	add	r7, sp, #0
 800259c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800259e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025a2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80025a4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	4313      	orrs	r3, r2
 80025ac:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80025ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025b2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	4013      	ands	r3, r2
 80025b8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80025ba:	68fb      	ldr	r3, [r7, #12]
}
 80025bc:	bf00      	nop
 80025be:	3714      	adds	r7, #20
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr

080025c8 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b085      	sub	sp, #20
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80025d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025d4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80025d6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4313      	orrs	r3, r2
 80025de:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80025e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025e4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	4013      	ands	r3, r2
 80025ea:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80025ec:	68fb      	ldr	r3, [r7, #12]
}
 80025ee:	bf00      	nop
 80025f0:	3714      	adds	r7, #20
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr

080025fa <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80025fa:	b480      	push	{r7}
 80025fc:	b085      	sub	sp, #20
 80025fe:	af00      	add	r7, sp, #0
 8002600:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8002602:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002606:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002608:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	4313      	orrs	r3, r2
 8002610:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002612:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002616:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	4013      	ands	r3, r2
 800261c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800261e:	68fb      	ldr	r3, [r7, #12]
}
 8002620:	bf00      	nop
 8002622:	3714      	adds	r7, #20
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr

0800262c <LL_RTC_EnableWriteProtection>:
{
 800262c:	b480      	push	{r7}
 800262e:	b083      	sub	sp, #12
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	22ff      	movs	r2, #255	@ 0xff
 8002638:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800263a:	bf00      	nop
 800263c:	370c      	adds	r7, #12
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr

08002646 <LL_RTC_DisableWriteProtection>:
{
 8002646:	b480      	push	{r7}
 8002648:	b083      	sub	sp, #12
 800264a:	af00      	add	r7, sp, #0
 800264c:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	22ca      	movs	r2, #202	@ 0xca
 8002652:	625a      	str	r2, [r3, #36]	@ 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2253      	movs	r2, #83	@ 0x53
 8002658:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800265a:	bf00      	nop
 800265c:	370c      	adds	r7, #12
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr

08002666 <LL_RTC_WAKEUP_SetClock>:
{
 8002666:	b480      	push	{r7}
 8002668:	b083      	sub	sp, #12
 800266a:	af00      	add	r7, sp, #0
 800266c:	6078      	str	r0, [r7, #4]
 800266e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	f023 0207 	bic.w	r2, r3, #7
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	431a      	orrs	r2, r3
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	609a      	str	r2, [r3, #8]
}
 8002680:	bf00      	nop
 8002682:	370c      	adds	r7, #12
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr

0800268c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002690:	f000 fdce 	bl	8003230 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8002694:	f7fe fd36 	bl	8001104 <MX_APPE_Config>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002698:	f000 f824 	bl	80026e4 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800269c:	f000 f87e 	bl	800279c <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 80026a0:	f000 f89c 	bl	80027dc <MX_IPCC_Init>

  /* USER CODE BEGIN SysInit */
  PeriphClock_Config();
 80026a4:	f000 faae 	bl	8002c04 <PeriphClock_Config>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80026a8:	f000 f9bc 	bl	8002a24 <MX_GPIO_Init>
  my_MX_SPI1_Init();
 80026ac:	f000 f966 	bl	800297c <my_MX_SPI1_Init>
  MX_I2C3_Init();
 80026b0:	f000 f932 	bl	8002918 <MX_I2C3_Init>
  MX_DMA_Init();
 80026b4:	f000 f9a4 	bl	8002a00 <MX_DMA_Init>
  MX_RTC_Init();
 80026b8:	f000 f8ac 	bl	8002814 <MX_RTC_Init>
  MX_USART1_UART_Init();
 80026bc:	f000 f8de 	bl	800287c <MX_USART1_UART_Init>
  MX_RF_Init();
 80026c0:	f000 f8a0 	bl	8002804 <MX_RF_Init>
  /* USER CODE BEGIN 2 */
  MX_TIM2_Init();
 80026c4:	f000 faa6 	bl	8002c14 <MX_TIM2_Init>
  MX_TIM17_Init();
 80026c8:	f000 fae2 	bl	8002c90 <MX_TIM17_Init>

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 80026cc:	f7fe fd28 	bl	8001120 <MX_APPE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  ADS1299_Init();
 80026d0:	f7fe fa0c 	bl	8000aec <ADS1299_Init>
  ism330_Init();
 80026d4:	f7ff fe46 	bl	8002364 <ism330_Init>
  lis3mdl_Init();
 80026d8:	f7ff fee4 	bl	80024a4 <lis3mdl_Init>

  while(1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 80026dc:	f7fe feff 	bl	80014de <MX_APPE_Process>
 80026e0:	e7fc      	b.n	80026dc <main+0x50>
	...

080026e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b09a      	sub	sp, #104	@ 0x68
 80026e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80026ea:	f107 0320 	add.w	r3, r7, #32
 80026ee:	2248      	movs	r2, #72	@ 0x48
 80026f0:	2100      	movs	r1, #0
 80026f2:	4618      	mov	r0, r3
 80026f4:	f00c f88c 	bl	800e810 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80026f8:	1d3b      	adds	r3, r7, #4
 80026fa:	2200      	movs	r2, #0
 80026fc:	601a      	str	r2, [r3, #0]
 80026fe:	605a      	str	r2, [r3, #4]
 8002700:	609a      	str	r2, [r3, #8]
 8002702:	60da      	str	r2, [r3, #12]
 8002704:	611a      	str	r2, [r3, #16]
 8002706:	615a      	str	r2, [r3, #20]
 8002708:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800270a:	f002 facf 	bl	8004cac <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 800270e:	2010      	movs	r0, #16
 8002710:	f7ff ff12 	bl	8002538 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002714:	4b20      	ldr	r3, [pc, #128]	@ (8002798 <SystemClock_Config+0xb4>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800271c:	4a1e      	ldr	r2, [pc, #120]	@ (8002798 <SystemClock_Config+0xb4>)
 800271e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002722:	6013      	str	r3, [r2, #0]
 8002724:	4b1c      	ldr	r3, [pc, #112]	@ (8002798 <SystemClock_Config+0xb4>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800272c:	603b      	str	r3, [r7, #0]
 800272e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8002730:	2307      	movs	r3, #7
 8002732:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002734:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002738:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800273a:	2301      	movs	r3, #1
 800273c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800273e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002742:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002744:	2340      	movs	r3, #64	@ 0x40
 8002746:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002748:	2300      	movs	r3, #0
 800274a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800274c:	f107 0320 	add.w	r3, r7, #32
 8002750:	4618      	mov	r0, r3
 8002752:	f002 fe3f 	bl	80053d4 <HAL_RCC_OscConfig>
 8002756:	4603      	mov	r3, r0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d001      	beq.n	8002760 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 800275c:	f000 fb2e 	bl	8002dbc <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8002760:	236f      	movs	r3, #111	@ 0x6f
 8002762:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8002764:	2302      	movs	r3, #2
 8002766:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002768:	2300      	movs	r3, #0
 800276a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800276c:	2300      	movs	r3, #0
 800276e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002770:	2300      	movs	r3, #0
 8002772:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8002774:	2300      	movs	r3, #0
 8002776:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8002778:	2300      	movs	r3, #0
 800277a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800277c:	1d3b      	adds	r3, r7, #4
 800277e:	2101      	movs	r1, #1
 8002780:	4618      	mov	r0, r3
 8002782:	f003 f99b 	bl	8005abc <HAL_RCC_ClockConfig>
 8002786:	4603      	mov	r3, r0
 8002788:	2b00      	cmp	r3, #0
 800278a:	d001      	beq.n	8002790 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800278c:	f000 fb16 	bl	8002dbc <Error_Handler>
  }
}
 8002790:	bf00      	nop
 8002792:	3768      	adds	r7, #104	@ 0x68
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}
 8002798:	58000400 	.word	0x58000400

0800279c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b094      	sub	sp, #80	@ 0x50
 80027a0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80027a2:	463b      	mov	r3, r7
 80027a4:	2250      	movs	r2, #80	@ 0x50
 80027a6:	2100      	movs	r1, #0
 80027a8:	4618      	mov	r0, r3
 80027aa:	f00c f831 	bl	800e810 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 80027ae:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80027b2:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 80027b4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80027b8:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 80027ba:	2302      	movs	r3, #2
 80027bc:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 80027be:	2300      	movs	r3, #0
 80027c0:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027c2:	463b      	mov	r3, r7
 80027c4:	4618      	mov	r0, r3
 80027c6:	f003 fdb6 	bl	8006336 <HAL_RCCEx_PeriphCLKConfig>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d001      	beq.n	80027d4 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 80027d0:	f000 faf4 	bl	8002dbc <Error_Handler>
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif

  /* USER CODE END Smps */
}
 80027d4:	bf00      	nop
 80027d6:	3750      	adds	r7, #80	@ 0x50
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}

080027dc <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 80027e0:	4b06      	ldr	r3, [pc, #24]	@ (80027fc <MX_IPCC_Init+0x20>)
 80027e2:	4a07      	ldr	r2, [pc, #28]	@ (8002800 <MX_IPCC_Init+0x24>)
 80027e4:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 80027e6:	4805      	ldr	r0, [pc, #20]	@ (80027fc <MX_IPCC_Init+0x20>)
 80027e8:	f002 f9da 	bl	8004ba0 <HAL_IPCC_Init>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d001      	beq.n	80027f6 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 80027f2:	f000 fae3 	bl	8002dbc <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 80027f6:	bf00      	nop
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	20000188 	.word	0x20000188
 8002800:	58000c00 	.word	0x58000c00

08002804 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8002804:	b480      	push	{r7}
 8002806:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8002808:	bf00      	nop
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr
	...

08002814 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002818:	4b16      	ldr	r3, [pc, #88]	@ (8002874 <MX_RTC_Init+0x60>)
 800281a:	4a17      	ldr	r2, [pc, #92]	@ (8002878 <MX_RTC_Init+0x64>)
 800281c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800281e:	4b15      	ldr	r3, [pc, #84]	@ (8002874 <MX_RTC_Init+0x60>)
 8002820:	2200      	movs	r2, #0
 8002822:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8002824:	4b13      	ldr	r3, [pc, #76]	@ (8002874 <MX_RTC_Init+0x60>)
 8002826:	220f      	movs	r2, #15
 8002828:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 800282a:	4b12      	ldr	r3, [pc, #72]	@ (8002874 <MX_RTC_Init+0x60>)
 800282c:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8002830:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002832:	4b10      	ldr	r3, [pc, #64]	@ (8002874 <MX_RTC_Init+0x60>)
 8002834:	2200      	movs	r2, #0
 8002836:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002838:	4b0e      	ldr	r3, [pc, #56]	@ (8002874 <MX_RTC_Init+0x60>)
 800283a:	2200      	movs	r2, #0
 800283c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800283e:	4b0d      	ldr	r3, [pc, #52]	@ (8002874 <MX_RTC_Init+0x60>)
 8002840:	2200      	movs	r2, #0
 8002842:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002844:	4b0b      	ldr	r3, [pc, #44]	@ (8002874 <MX_RTC_Init+0x60>)
 8002846:	2200      	movs	r2, #0
 8002848:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800284a:	480a      	ldr	r0, [pc, #40]	@ (8002874 <MX_RTC_Init+0x60>)
 800284c:	f003 fffa 	bl	8006844 <HAL_RTC_Init>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d001      	beq.n	800285a <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8002856:	f000 fab1 	bl	8002dbc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 800285a:	4807      	ldr	r0, [pc, #28]	@ (8002878 <MX_RTC_Init+0x64>)
 800285c:	f7ff fef3 	bl	8002646 <LL_RTC_DisableWriteProtection>
  
  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8002860:	2100      	movs	r1, #0
 8002862:	4805      	ldr	r0, [pc, #20]	@ (8002878 <MX_RTC_Init+0x64>)
 8002864:	f7ff feff 	bl	8002666 <LL_RTC_WAKEUP_SetClock>
  
  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8002868:	4803      	ldr	r0, [pc, #12]	@ (8002878 <MX_RTC_Init+0x64>)
 800286a:	f7ff fedf 	bl	800262c <LL_RTC_EnableWriteProtection>
  /* USER CODE END RTC_Init 2 */

}
 800286e:	bf00      	nop
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	200001c4 	.word	0x200001c4
 8002878:	40002800 	.word	0x40002800

0800287c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002880:	4b23      	ldr	r3, [pc, #140]	@ (8002910 <MX_USART1_UART_Init+0x94>)
 8002882:	4a24      	ldr	r2, [pc, #144]	@ (8002914 <MX_USART1_UART_Init+0x98>)
 8002884:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002886:	4b22      	ldr	r3, [pc, #136]	@ (8002910 <MX_USART1_UART_Init+0x94>)
 8002888:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800288c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800288e:	4b20      	ldr	r3, [pc, #128]	@ (8002910 <MX_USART1_UART_Init+0x94>)
 8002890:	2200      	movs	r2, #0
 8002892:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002894:	4b1e      	ldr	r3, [pc, #120]	@ (8002910 <MX_USART1_UART_Init+0x94>)
 8002896:	2200      	movs	r2, #0
 8002898:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800289a:	4b1d      	ldr	r3, [pc, #116]	@ (8002910 <MX_USART1_UART_Init+0x94>)
 800289c:	2200      	movs	r2, #0
 800289e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80028a0:	4b1b      	ldr	r3, [pc, #108]	@ (8002910 <MX_USART1_UART_Init+0x94>)
 80028a2:	220c      	movs	r2, #12
 80028a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028a6:	4b1a      	ldr	r3, [pc, #104]	@ (8002910 <MX_USART1_UART_Init+0x94>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 80028ac:	4b18      	ldr	r3, [pc, #96]	@ (8002910 <MX_USART1_UART_Init+0x94>)
 80028ae:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80028b2:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80028b4:	4b16      	ldr	r3, [pc, #88]	@ (8002910 <MX_USART1_UART_Init+0x94>)
 80028b6:	2200      	movs	r2, #0
 80028b8:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80028ba:	4b15      	ldr	r3, [pc, #84]	@ (8002910 <MX_USART1_UART_Init+0x94>)
 80028bc:	2200      	movs	r2, #0
 80028be:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80028c0:	4b13      	ldr	r3, [pc, #76]	@ (8002910 <MX_USART1_UART_Init+0x94>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80028c6:	4812      	ldr	r0, [pc, #72]	@ (8002910 <MX_USART1_UART_Init+0x94>)
 80028c8:	f005 fab8 	bl	8007e3c <HAL_UART_Init>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d001      	beq.n	80028d6 <MX_USART1_UART_Init+0x5a>
  {
	Error_Handler();
 80028d2:	f000 fa73 	bl	8002dbc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80028d6:	2100      	movs	r1, #0
 80028d8:	480d      	ldr	r0, [pc, #52]	@ (8002910 <MX_USART1_UART_Init+0x94>)
 80028da:	f006 fc9c 	bl	8009216 <HAL_UARTEx_SetTxFifoThreshold>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d001      	beq.n	80028e8 <MX_USART1_UART_Init+0x6c>
  {
	Error_Handler();
 80028e4:	f000 fa6a 	bl	8002dbc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80028e8:	2100      	movs	r1, #0
 80028ea:	4809      	ldr	r0, [pc, #36]	@ (8002910 <MX_USART1_UART_Init+0x94>)
 80028ec:	f006 fcd1 	bl	8009292 <HAL_UARTEx_SetRxFifoThreshold>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d001      	beq.n	80028fa <MX_USART1_UART_Init+0x7e>
  {
	Error_Handler();
 80028f6:	f000 fa61 	bl	8002dbc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80028fa:	4805      	ldr	r0, [pc, #20]	@ (8002910 <MX_USART1_UART_Init+0x94>)
 80028fc:	f006 fc52 	bl	80091a4 <HAL_UARTEx_DisableFifoMode>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d001      	beq.n	800290a <MX_USART1_UART_Init+0x8e>
  {
	Error_Handler();
 8002906:	f000 fa59 	bl	8002dbc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800290a:	bf00      	nop
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	200001e8 	.word	0x200001e8
 8002914:	40013800 	.word	0x40013800

08002918 <MX_I2C3_Init>:

// I2C3 initialization function
void MX_I2C3_Init(void)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	af00      	add	r7, sp, #0

	/* SPI1 clock enable */
	__HAL_RCC_I2C3_CLK_ENABLE();
 800291c:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8002920:	f7ff fe52 	bl	80025c8 <LL_APB1_GRP1_EnableClock>


	hi2c3.Instance = I2C3;
 8002924:	4b12      	ldr	r3, [pc, #72]	@ (8002970 <MX_I2C3_Init+0x58>)
 8002926:	4a13      	ldr	r2, [pc, #76]	@ (8002974 <MX_I2C3_Init+0x5c>)
 8002928:	601a      	str	r2, [r3, #0]
	//hi2c3.Init.Timing = 0x00707CBB;
	  hi2c3.Init.Timing = 0x0060112F;
 800292a:	4b11      	ldr	r3, [pc, #68]	@ (8002970 <MX_I2C3_Init+0x58>)
 800292c:	4a12      	ldr	r2, [pc, #72]	@ (8002978 <MX_I2C3_Init+0x60>)
 800292e:	605a      	str	r2, [r3, #4]
	  hi2c3.Init.OwnAddress1 = 0;
 8002930:	4b0f      	ldr	r3, [pc, #60]	@ (8002970 <MX_I2C3_Init+0x58>)
 8002932:	2200      	movs	r2, #0
 8002934:	609a      	str	r2, [r3, #8]
	  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002936:	4b0e      	ldr	r3, [pc, #56]	@ (8002970 <MX_I2C3_Init+0x58>)
 8002938:	2201      	movs	r2, #1
 800293a:	60da      	str	r2, [r3, #12]
	  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800293c:	4b0c      	ldr	r3, [pc, #48]	@ (8002970 <MX_I2C3_Init+0x58>)
 800293e:	2200      	movs	r2, #0
 8002940:	611a      	str	r2, [r3, #16]
	  hi2c3.Init.OwnAddress2 = 0;
 8002942:	4b0b      	ldr	r3, [pc, #44]	@ (8002970 <MX_I2C3_Init+0x58>)
 8002944:	2200      	movs	r2, #0
 8002946:	615a      	str	r2, [r3, #20]
	  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002948:	4b09      	ldr	r3, [pc, #36]	@ (8002970 <MX_I2C3_Init+0x58>)
 800294a:	2200      	movs	r2, #0
 800294c:	619a      	str	r2, [r3, #24]
	  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800294e:	4b08      	ldr	r3, [pc, #32]	@ (8002970 <MX_I2C3_Init+0x58>)
 8002950:	2200      	movs	r2, #0
 8002952:	61da      	str	r2, [r3, #28]
	  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002954:	4b06      	ldr	r3, [pc, #24]	@ (8002970 <MX_I2C3_Init+0x58>)
 8002956:	2200      	movs	r2, #0
 8002958:	621a      	str	r2, [r3, #32]

    if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800295a:	4805      	ldr	r0, [pc, #20]	@ (8002970 <MX_I2C3_Init+0x58>)
 800295c:	f001 fb8a 	bl	8004074 <HAL_I2C_Init>
 8002960:	4603      	mov	r3, r0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d001      	beq.n	800296a <MX_I2C3_Init+0x52>
    {
        // Initialization error
        Error_Handler();
 8002966:	f000 fa29 	bl	8002dbc <Error_Handler>
    }
}
 800296a:	bf00      	nop
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	20000340 	.word	0x20000340
 8002974:	40005c00 	.word	0x40005c00
 8002978:	0060112f 	.word	0x0060112f

0800297c <my_MX_SPI1_Init>:



// SPI1 initialization function
void my_MX_SPI1_Init(void)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	af00      	add	r7, sp, #0

	/* SPI1 clock enable */
	__HAL_RCC_SPI1_CLK_ENABLE();
 8002980:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8002984:	f7ff fe39 	bl	80025fa <LL_APB2_GRP1_EnableClock>


	  hspi1.Instance = SPI1;
 8002988:	4b1b      	ldr	r3, [pc, #108]	@ (80029f8 <my_MX_SPI1_Init+0x7c>)
 800298a:	4a1c      	ldr	r2, [pc, #112]	@ (80029fc <my_MX_SPI1_Init+0x80>)
 800298c:	601a      	str	r2, [r3, #0]
	  hspi1.Init.Mode = SPI_MODE_MASTER;
 800298e:	4b1a      	ldr	r3, [pc, #104]	@ (80029f8 <my_MX_SPI1_Init+0x7c>)
 8002990:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002994:	605a      	str	r2, [r3, #4]
	  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002996:	4b18      	ldr	r3, [pc, #96]	@ (80029f8 <my_MX_SPI1_Init+0x7c>)
 8002998:	2200      	movs	r2, #0
 800299a:	609a      	str	r2, [r3, #8]
	  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800299c:	4b16      	ldr	r3, [pc, #88]	@ (80029f8 <my_MX_SPI1_Init+0x7c>)
 800299e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80029a2:	60da      	str	r2, [r3, #12]
	  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80029a4:	4b14      	ldr	r3, [pc, #80]	@ (80029f8 <my_MX_SPI1_Init+0x7c>)
 80029a6:	2200      	movs	r2, #0
 80029a8:	611a      	str	r2, [r3, #16]
	  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80029aa:	4b13      	ldr	r3, [pc, #76]	@ (80029f8 <my_MX_SPI1_Init+0x7c>)
 80029ac:	2201      	movs	r2, #1
 80029ae:	615a      	str	r2, [r3, #20]
	  hspi1.Init.NSS = SPI_NSS_SOFT;
 80029b0:	4b11      	ldr	r3, [pc, #68]	@ (80029f8 <my_MX_SPI1_Init+0x7c>)
 80029b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80029b6:	619a      	str	r2, [r3, #24]
	  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80029b8:	4b0f      	ldr	r3, [pc, #60]	@ (80029f8 <my_MX_SPI1_Init+0x7c>)
 80029ba:	2218      	movs	r2, #24
 80029bc:	61da      	str	r2, [r3, #28]
	  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80029be:	4b0e      	ldr	r3, [pc, #56]	@ (80029f8 <my_MX_SPI1_Init+0x7c>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	621a      	str	r2, [r3, #32]
	  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80029c4:	4b0c      	ldr	r3, [pc, #48]	@ (80029f8 <my_MX_SPI1_Init+0x7c>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	625a      	str	r2, [r3, #36]	@ 0x24
	  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029ca:	4b0b      	ldr	r3, [pc, #44]	@ (80029f8 <my_MX_SPI1_Init+0x7c>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	629a      	str	r2, [r3, #40]	@ 0x28
	  hspi1.Init.CRCPolynomial = 7;
 80029d0:	4b09      	ldr	r3, [pc, #36]	@ (80029f8 <my_MX_SPI1_Init+0x7c>)
 80029d2:	2207      	movs	r2, #7
 80029d4:	62da      	str	r2, [r3, #44]	@ 0x2c
	  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80029d6:	4b08      	ldr	r3, [pc, #32]	@ (80029f8 <my_MX_SPI1_Init+0x7c>)
 80029d8:	2200      	movs	r2, #0
 80029da:	631a      	str	r2, [r3, #48]	@ 0x30
	  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80029dc:	4b06      	ldr	r3, [pc, #24]	@ (80029f8 <my_MX_SPI1_Init+0x7c>)
 80029de:	2200      	movs	r2, #0
 80029e0:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80029e2:	4805      	ldr	r0, [pc, #20]	@ (80029f8 <my_MX_SPI1_Init+0x7c>)
 80029e4:	f004 f864 	bl	8006ab0 <HAL_SPI_Init>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d001      	beq.n	80029f2 <my_MX_SPI1_Init+0x76>
    {
        // Initialization error
        Error_Handler();
 80029ee:	f000 f9e5 	bl	8002dbc <Error_Handler>
    }
}
 80029f2:	bf00      	nop
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	200002dc 	.word	0x200002dc
 80029fc:	40013000 	.word	0x40013000

08002a00 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002a04:	2004      	movs	r0, #4
 8002a06:	f7ff fdad 	bl	8002564 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002a0a:	2002      	movs	r0, #2
 8002a0c:	f7ff fdaa 	bl	8002564 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 15, 0);
 8002a10:	2200      	movs	r2, #0
 8002a12:	210f      	movs	r1, #15
 8002a14:	203a      	movs	r0, #58	@ 0x3a
 8002a16:	f000 fdd8 	bl	80035ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 8002a1a:	203a      	movs	r0, #58	@ 0x3a
 8002a1c:	f000 fdef 	bl	80035fe <HAL_NVIC_EnableIRQ>

}
 8002a20:	bf00      	nop
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b086      	sub	sp, #24
 8002a28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a2a:	1d3b      	adds	r3, r7, #4
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	601a      	str	r2, [r3, #0]
 8002a30:	605a      	str	r2, [r3, #4]
 8002a32:	609a      	str	r2, [r3, #8]
 8002a34:	60da      	str	r2, [r3, #12]
 8002a36:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a38:	2001      	movs	r0, #1
 8002a3a:	f7ff fdac 	bl	8002596 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a3e:	2004      	movs	r0, #4
 8002a40:	f7ff fda9 	bl	8002596 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a44:	2002      	movs	r0, #2
 8002a46:	f7ff fda6 	bl	8002596 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a4a:	2008      	movs	r0, #8
 8002a4c:	f7ff fda3 	bl	8002596 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002a50:	2010      	movs	r0, #16
 8002a52:	f7ff fda0 	bl	8002596 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002a56:	2080      	movs	r0, #128	@ 0x80
 8002a58:	f7ff fd9d 	bl	8002596 <LL_AHB2_GRP1_EnableClock>


	/* Configure PC12 and PC13 as external interrupt inputs */
	/* Configure GPIO pins : PC12 and PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13;
 8002a5c:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002a60:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;  // Interrupt on falling edge
 8002a62:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002a66:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;           // No pull-up or pull-down resistors
 8002a68:	2300      	movs	r3, #0
 8002a6a:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a6c:	1d3b      	adds	r3, r7, #4
 8002a6e:	4619      	mov	r1, r3
 8002a70:	4862      	ldr	r0, [pc, #392]	@ (8002bfc <MX_GPIO_Init+0x1d8>)
 8002a72:	f001 f93b 	bl	8003cec <HAL_GPIO_Init>

	/* Enable and set EXTI line interrupt priority */
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);   // Priority level 2
 8002a76:	2200      	movs	r2, #0
 8002a78:	2102      	movs	r1, #2
 8002a7a:	2028      	movs	r0, #40	@ 0x28
 8002a7c:	f000 fda5 	bl	80035ca <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);          // Enable the interrupt
 8002a80:	2028      	movs	r0, #40	@ 0x28
 8002a82:	f000 fdbc 	bl	80035fe <HAL_NVIC_EnableIRQ>

	GPIO_InitStruct.Pin = LED_A_Pin;
 8002a86:	2301      	movs	r3, #1
 8002a88:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a92:	2300      	movs	r3, #0
 8002a94:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(LED_A_GPIO_Port, &GPIO_InitStruct);
 8002a96:	1d3b      	adds	r3, r7, #4
 8002a98:	4619      	mov	r1, r3
 8002a9a:	4859      	ldr	r0, [pc, #356]	@ (8002c00 <MX_GPIO_Init+0x1dc>)
 8002a9c:	f001 f926 	bl	8003cec <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = LED_B_Pin;
 8002aa0:	2302      	movs	r3, #2
 8002aa2:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aac:	2300      	movs	r3, #0
 8002aae:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(LED_B_GPIO_Port, &GPIO_InitStruct);
 8002ab0:	1d3b      	adds	r3, r7, #4
 8002ab2:	4619      	mov	r1, r3
 8002ab4:	4852      	ldr	r0, [pc, #328]	@ (8002c00 <MX_GPIO_Init+0x1dc>)
 8002ab6:	f001 f919 	bl	8003cec <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = ADS1118_CS_Pin;
 8002aba:	2340      	movs	r3, #64	@ 0x40
 8002abc:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ac6:	2302      	movs	r3, #2
 8002ac8:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(ADS1118_CS_GPIO_Port, &GPIO_InitStruct);
 8002aca:	1d3b      	adds	r3, r7, #4
 8002acc:	4619      	mov	r1, r3
 8002ace:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002ad2:	f001 f90b 	bl	8003cec <HAL_GPIO_Init>

	// Configure GPIO pin for DRDY (interrupt from ADS1299)
	GPIO_InitStruct.Pin = ADS1299_nDRDY_Pin;
 8002ad6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002ada:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;  // Interrupt on falling edge
 8002adc:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002ae0:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(ADS1299_nDRDY_GPIO_Port, &GPIO_InitStruct);
 8002ae6:	1d3b      	adds	r3, r7, #4
 8002ae8:	4619      	mov	r1, r3
 8002aea:	4844      	ldr	r0, [pc, #272]	@ (8002bfc <MX_GPIO_Init+0x1d8>)
 8002aec:	f001 f8fe 	bl	8003cec <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = ADS1299_CS_Pin;
 8002af0:	2310      	movs	r3, #16
 8002af2:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002af4:	2301      	movs	r3, #1
 8002af6:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002af8:	2301      	movs	r3, #1
 8002afa:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002afc:	2302      	movs	r3, #2
 8002afe:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(ADS1299_CS_GPIO_Port, &GPIO_InitStruct);
 8002b00:	1d3b      	adds	r3, r7, #4
 8002b02:	4619      	mov	r1, r3
 8002b04:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002b08:	f001 f8f0 	bl	8003cec <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = ADS1299_nRESET_Pin|ADS1299_nPWDN_Pin;
 8002b0c:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8002b10:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b12:	2301      	movs	r3, #1
 8002b14:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b16:	2300      	movs	r3, #0
 8002b18:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(ADS1299_nRESET_GPIO_Port, &GPIO_InitStruct);
 8002b1e:	1d3b      	adds	r3, r7, #4
 8002b20:	4619      	mov	r1, r3
 8002b22:	4836      	ldr	r0, [pc, #216]	@ (8002bfc <MX_GPIO_Init+0x1d8>)
 8002b24:	f001 f8e2 	bl	8003cec <HAL_GPIO_Init>

	/*Configure GPIO pins : PCPin PCPin PCPin */
	GPIO_InitStruct.Pin = ADS1299_START_Pin;
 8002b28:	2340      	movs	r3, #64	@ 0x40
 8002b2a:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002b30:	2302      	movs	r3, #2
 8002b32:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b34:	2300      	movs	r3, #0
 8002b36:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(ADS1299_START_GPIO_Port, &GPIO_InitStruct);
 8002b38:	1d3b      	adds	r3, r7, #4
 8002b3a:	4619      	mov	r1, r3
 8002b3c:	482f      	ldr	r0, [pc, #188]	@ (8002bfc <MX_GPIO_Init+0x1d8>)
 8002b3e:	f001 f8d5 	bl	8003cec <HAL_GPIO_Init>

	/**SPI1 GPIO Configuration */
	GPIO_InitStruct.Pin = SPI1_SCLK_Pin|SPI1_MOSI_Pin;
 8002b42:	2382      	movs	r3, #130	@ 0x82
 8002b44:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b46:	2302      	movs	r3, #2
 8002b48:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b4e:	2302      	movs	r3, #2
 8002b50:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002b52:	2305      	movs	r3, #5
 8002b54:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(SPI1_SCLK_GPIO_Port, &GPIO_InitStruct);
 8002b56:	1d3b      	adds	r3, r7, #4
 8002b58:	4619      	mov	r1, r3
 8002b5a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002b5e:	f001 f8c5 	bl	8003cec <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = SPI1_MISO_Pin;
 8002b62:	2310      	movs	r3, #16
 8002b64:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b66:	2302      	movs	r3, #2
 8002b68:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b6e:	2302      	movs	r3, #2
 8002b70:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002b72:	2305      	movs	r3, #5
 8002b74:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(SPI1_MISO_GPIO_Port, &GPIO_InitStruct);
 8002b76:	1d3b      	adds	r3, r7, #4
 8002b78:	4619      	mov	r1, r3
 8002b7a:	4821      	ldr	r0, [pc, #132]	@ (8002c00 <MX_GPIO_Init+0x1dc>)
 8002b7c:	f001 f8b6 	bl	8003cec <HAL_GPIO_Init>

	/* Configure I2C3 SDA (PB11) and SCL (PB13) */
	GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_13;
 8002b80:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8002b84:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b86:	2312      	movs	r3, #18
 8002b88:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002b92:	2304      	movs	r3, #4
 8002b94:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b96:	1d3b      	adds	r3, r7, #4
 8002b98:	4619      	mov	r1, r3
 8002b9a:	4819      	ldr	r0, [pc, #100]	@ (8002c00 <MX_GPIO_Init+0x1dc>)
 8002b9c:	f001 f8a6 	bl	8003cec <HAL_GPIO_Init>

	HAL_GPIO_WritePin(ADS1299_CS_GPIO_Port, ADS1299_CS_Pin, GPIO_PIN_SET);
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	2110      	movs	r1, #16
 8002ba4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002ba8:	f001 fa10 	bl	8003fcc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ADS1118_CS_GPIO_Port, ADS1118_CS_Pin, GPIO_PIN_SET);
 8002bac:	2201      	movs	r2, #1
 8002bae:	2140      	movs	r1, #64	@ 0x40
 8002bb0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002bb4:	f001 fa0a 	bl	8003fcc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ADS1299_nRESET_GPIO_Port, ADS1299_nRESET_Pin|ADS1299_nPWDN_Pin, GPIO_PIN_RESET);
 8002bb8:	2200      	movs	r2, #0
 8002bba:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 8002bbe:	480f      	ldr	r0, [pc, #60]	@ (8002bfc <MX_GPIO_Init+0x1d8>)
 8002bc0:	f001 fa04 	bl	8003fcc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ADS1299_START_GPIO_Port, ADS1299_START_Pin, GPIO_PIN_SET);
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	2140      	movs	r1, #64	@ 0x40
 8002bc8:	480c      	ldr	r0, [pc, #48]	@ (8002bfc <MX_GPIO_Init+0x1d8>)
 8002bca:	f001 f9ff 	bl	8003fcc <HAL_GPIO_WritePin>

	/* Enable and set EXTI line interrupt priority */
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 2, 0);   // Priority level 2
 8002bce:	2200      	movs	r2, #0
 8002bd0:	2102      	movs	r1, #2
 8002bd2:	2017      	movs	r0, #23
 8002bd4:	f000 fcf9 	bl	80035ca <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);          // Enable the interrupt
 8002bd8:	2017      	movs	r0, #23
 8002bda:	f000 fd10 	bl	80035fe <HAL_NVIC_EnableIRQ>

	HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_RESET);
 8002bde:	2200      	movs	r2, #0
 8002be0:	2101      	movs	r1, #1
 8002be2:	4807      	ldr	r0, [pc, #28]	@ (8002c00 <MX_GPIO_Init+0x1dc>)
 8002be4:	f001 f9f2 	bl	8003fcc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_RESET);
 8002be8:	2200      	movs	r2, #0
 8002bea:	2102      	movs	r1, #2
 8002bec:	4804      	ldr	r0, [pc, #16]	@ (8002c00 <MX_GPIO_Init+0x1dc>)
 8002bee:	f001 f9ed 	bl	8003fcc <HAL_GPIO_WritePin>
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
#endif

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002bf2:	bf00      	nop
 8002bf4:	3718      	adds	r7, #24
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	48000800 	.word	0x48000800
 8002c00:	48000400 	.word	0x48000400

08002c04 <PeriphClock_Config>:



/* USER CODE BEGIN 4 */
void PeriphClock_Config(void)
{
 8002c04:	b480      	push	{r7}
 8002c06:	af00      	add	r7, sp, #0

	/* Start automatic synchronization */
	HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
#endif

	return;
 8002c08:	bf00      	nop
}
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr
	...

08002c14 <MX_TIM2_Init>:




static void MX_TIM2_Init(void)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	af00      	add	r7, sp, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002c18:	2001      	movs	r0, #1
 8002c1a:	f7ff fcd5 	bl	80025c8 <LL_APB1_GRP1_EnableClock>

    htim2.Instance = TIM2;
 8002c1e:	4b1a      	ldr	r3, [pc, #104]	@ (8002c88 <MX_TIM2_Init+0x74>)
 8002c20:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002c24:	601a      	str	r2, [r3, #0]
    htim2.Init.Prescaler = (uint32_t)(HAL_RCC_GetPCLK1Freq() / 2000) - 1;
 8002c26:	f003 f909 	bl	8005e3c <HAL_RCC_GetPCLK1Freq>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	4a17      	ldr	r2, [pc, #92]	@ (8002c8c <MX_TIM2_Init+0x78>)
 8002c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c32:	09db      	lsrs	r3, r3, #7
 8002c34:	3b01      	subs	r3, #1
 8002c36:	4a14      	ldr	r2, [pc, #80]	@ (8002c88 <MX_TIM2_Init+0x74>)
 8002c38:	6053      	str	r3, [r2, #4]
    htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c3a:	4b13      	ldr	r3, [pc, #76]	@ (8002c88 <MX_TIM2_Init+0x74>)
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	609a      	str	r2, [r3, #8]
    htim2.Init.Period = 500;
 8002c40:	4b11      	ldr	r3, [pc, #68]	@ (8002c88 <MX_TIM2_Init+0x74>)
 8002c42:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8002c46:	60da      	str	r2, [r3, #12]
    htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c48:	4b0f      	ldr	r3, [pc, #60]	@ (8002c88 <MX_TIM2_Init+0x74>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	611a      	str	r2, [r3, #16]
    htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c4e:	4b0e      	ldr	r3, [pc, #56]	@ (8002c88 <MX_TIM2_Init+0x74>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	619a      	str	r2, [r3, #24]

    if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002c54:	480c      	ldr	r0, [pc, #48]	@ (8002c88 <MX_TIM2_Init+0x74>)
 8002c56:	f004 fe63 	bl	8007920 <HAL_TIM_Base_Init>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d001      	beq.n	8002c64 <MX_TIM2_Init+0x50>
    {
        Error_Handler(); // Handle initialization error
 8002c60:	f000 f8ac 	bl	8002dbc <Error_Handler>
    }

    HAL_NVIC_SetPriority(TIM2_IRQn, 15, 0);
 8002c64:	2200      	movs	r2, #0
 8002c66:	210f      	movs	r1, #15
 8002c68:	201c      	movs	r0, #28
 8002c6a:	f000 fcae 	bl	80035ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002c6e:	201c      	movs	r0, #28
 8002c70:	f000 fcc5 	bl	80035fe <HAL_NVIC_EnableIRQ>

        // Start the timer interrupt
    if (HAL_TIM_Base_Start_IT(&htim2) != HAL_OK)
 8002c74:	4804      	ldr	r0, [pc, #16]	@ (8002c88 <MX_TIM2_Init+0x74>)
 8002c76:	f004 feb5 	bl	80079e4 <HAL_TIM_Base_Start_IT>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d001      	beq.n	8002c84 <MX_TIM2_Init+0x70>
    {
        Error_Handler(); // Handle start error
 8002c80:	f000 f89c 	bl	8002dbc <Error_Handler>
    }
}
 8002c84:	bf00      	nop
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	20000394 	.word	0x20000394
 8002c8c:	10624dd3 	.word	0x10624dd3

08002c90 <MX_TIM17_Init>:



void MX_TIM17_Init(void)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	af00      	add	r7, sp, #0
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002c94:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8002c98:	f7ff fcaf 	bl	80025fa <LL_APB2_GRP1_EnableClock>

    htim17.Instance = TIM17;
 8002c9c:	4b1b      	ldr	r3, [pc, #108]	@ (8002d0c <MX_TIM17_Init+0x7c>)
 8002c9e:	4a1c      	ldr	r2, [pc, #112]	@ (8002d10 <MX_TIM17_Init+0x80>)
 8002ca0:	601a      	str	r2, [r3, #0]
    htim17.Init.Prescaler = (uint32_t)(HAL_RCC_GetPCLK2Freq() / 1000) - 1;  // TIM17 is on APB2
 8002ca2:	f003 f8e1 	bl	8005e68 <HAL_RCC_GetPCLK2Freq>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	4a1a      	ldr	r2, [pc, #104]	@ (8002d14 <MX_TIM17_Init+0x84>)
 8002caa:	fba2 2303 	umull	r2, r3, r2, r3
 8002cae:	099b      	lsrs	r3, r3, #6
 8002cb0:	3b01      	subs	r3, #1
 8002cb2:	4a16      	ldr	r2, [pc, #88]	@ (8002d0c <MX_TIM17_Init+0x7c>)
 8002cb4:	6053      	str	r3, [r2, #4]
    htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cb6:	4b15      	ldr	r3, [pc, #84]	@ (8002d0c <MX_TIM17_Init+0x7c>)
 8002cb8:	2200      	movs	r2, #0
 8002cba:	609a      	str	r2, [r3, #8]
    htim17.Init.Period = 500 - 1;
 8002cbc:	4b13      	ldr	r3, [pc, #76]	@ (8002d0c <MX_TIM17_Init+0x7c>)
 8002cbe:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8002cc2:	60da      	str	r2, [r3, #12]
    htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cc4:	4b11      	ldr	r3, [pc, #68]	@ (8002d0c <MX_TIM17_Init+0x7c>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	611a      	str	r2, [r3, #16]
    htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cca:	4b10      	ldr	r3, [pc, #64]	@ (8002d0c <MX_TIM17_Init+0x7c>)
 8002ccc:	2200      	movs	r2, #0
 8002cce:	619a      	str	r2, [r3, #24]
    htim17.Init.RepetitionCounter = 0;
 8002cd0:	4b0e      	ldr	r3, [pc, #56]	@ (8002d0c <MX_TIM17_Init+0x7c>)
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	615a      	str	r2, [r3, #20]

    if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8002cd6:	480d      	ldr	r0, [pc, #52]	@ (8002d0c <MX_TIM17_Init+0x7c>)
 8002cd8:	f004 fe22 	bl	8007920 <HAL_TIM_Base_Init>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d001      	beq.n	8002ce6 <MX_TIM17_Init+0x56>
    {
        Error_Handler();
 8002ce2:	f000 f86b 	bl	8002dbc <Error_Handler>
    }

    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 14, 0);  // Different interrupt for TIM17
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	210e      	movs	r1, #14
 8002cea:	201a      	movs	r0, #26
 8002cec:	f000 fc6d 	bl	80035ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8002cf0:	201a      	movs	r0, #26
 8002cf2:	f000 fc84 	bl	80035fe <HAL_NVIC_EnableIRQ>

    if (HAL_TIM_Base_Start_IT(&htim17) != HAL_OK)
 8002cf6:	4805      	ldr	r0, [pc, #20]	@ (8002d0c <MX_TIM17_Init+0x7c>)
 8002cf8:	f004 fe74 	bl	80079e4 <HAL_TIM_Base_Start_IT>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d001      	beq.n	8002d06 <MX_TIM17_Init+0x76>
    {
        Error_Handler();
 8002d02:	f000 f85b 	bl	8002dbc <Error_Handler>
    }
}
 8002d06:	bf00      	nop
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	200003e0 	.word	0x200003e0
 8002d10:	40014800 	.word	0x40014800
 8002d14:	10624dd3 	.word	0x10624dd3

08002d18 <HAL_TIM_PeriodElapsedCallback>:



// Timer interrupt handler
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b082      	sub	sp, #8
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d28:	d12e      	bne.n	8002d88 <HAL_TIM_PeriodElapsedCallback+0x70>
    {
        led_counter += 1; // Each interrupt = 1ms (from timer settings)
 8002d2a:	4b20      	ldr	r3, [pc, #128]	@ (8002dac <HAL_TIM_PeriodElapsedCallback+0x94>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	3301      	adds	r3, #1
 8002d30:	4a1e      	ldr	r2, [pc, #120]	@ (8002dac <HAL_TIM_PeriodElapsedCallback+0x94>)
 8002d32:	6013      	str	r3, [r2, #0]

        if (is_connected())
 8002d34:	f00a fe86 	bl	800da44 <is_connected>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d00b      	beq.n	8002d56 <HAL_TIM_PeriodElapsedCallback+0x3e>
        {
            // Force LED ON and reset state/counter
            HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_SET);
 8002d3e:	2201      	movs	r2, #1
 8002d40:	2102      	movs	r1, #2
 8002d42:	481b      	ldr	r0, [pc, #108]	@ (8002db0 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8002d44:	f001 f942 	bl	8003fcc <HAL_GPIO_WritePin>
            led_state = GPIO_PIN_SET;
 8002d48:	4b1a      	ldr	r3, [pc, #104]	@ (8002db4 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	701a      	strb	r2, [r3, #0]
            led_counter = 0;
 8002d4e:	4b17      	ldr	r3, [pc, #92]	@ (8002dac <HAL_TIM_PeriodElapsedCallback+0x94>)
 8002d50:	2200      	movs	r2, #0
 8002d52:	601a      	str	r2, [r3, #0]
    	if(is_connected()){
    		UTIL_SEQ_SetTask( 1<<CFG_TASK_IMU_SAMPLE_ID, CFG_SCH_PRIO_0);
    	}

    }
}
 8002d54:	e026      	b.n	8002da4 <HAL_TIM_PeriodElapsedCallback+0x8c>
            if (led_counter >= 1) // 2 seconds
 8002d56:	4b15      	ldr	r3, [pc, #84]	@ (8002dac <HAL_TIM_PeriodElapsedCallback+0x94>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d022      	beq.n	8002da4 <HAL_TIM_PeriodElapsedCallback+0x8c>
                led_counter = 0;
 8002d5e:	4b13      	ldr	r3, [pc, #76]	@ (8002dac <HAL_TIM_PeriodElapsedCallback+0x94>)
 8002d60:	2200      	movs	r2, #0
 8002d62:	601a      	str	r2, [r3, #0]
                led_state = (led_state == GPIO_PIN_SET) ? GPIO_PIN_RESET : GPIO_PIN_SET;
 8002d64:	4b13      	ldr	r3, [pc, #76]	@ (8002db4 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	bf14      	ite	ne
 8002d6c:	2301      	movne	r3, #1
 8002d6e:	2300      	moveq	r3, #0
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	461a      	mov	r2, r3
 8002d74:	4b0f      	ldr	r3, [pc, #60]	@ (8002db4 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8002d76:	701a      	strb	r2, [r3, #0]
                HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, led_state);
 8002d78:	4b0e      	ldr	r3, [pc, #56]	@ (8002db4 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8002d7a:	781b      	ldrb	r3, [r3, #0]
 8002d7c:	461a      	mov	r2, r3
 8002d7e:	2102      	movs	r1, #2
 8002d80:	480b      	ldr	r0, [pc, #44]	@ (8002db0 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8002d82:	f001 f923 	bl	8003fcc <HAL_GPIO_WritePin>
}
 8002d86:	e00d      	b.n	8002da4 <HAL_TIM_PeriodElapsedCallback+0x8c>
    else if (htim->Instance == TIM17){
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a0a      	ldr	r2, [pc, #40]	@ (8002db8 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d108      	bne.n	8002da4 <HAL_TIM_PeriodElapsedCallback+0x8c>
    	if(is_connected()){
 8002d92:	f00a fe57 	bl	800da44 <is_connected>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d003      	beq.n	8002da4 <HAL_TIM_PeriodElapsedCallback+0x8c>
    		UTIL_SEQ_SetTask( 1<<CFG_TASK_IMU_SAMPLE_ID, CFG_SCH_PRIO_0);
 8002d9c:	2100      	movs	r1, #0
 8002d9e:	2020      	movs	r0, #32
 8002da0:	f00b fa08 	bl	800e1b4 <UTIL_SEQ_SetTask>
}
 8002da4:	bf00      	nop
 8002da6:	3708      	adds	r7, #8
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	2000042c 	.word	0x2000042c
 8002db0:	48000400 	.word	0x48000400
 8002db4:	20000430 	.word	0x20000430
 8002db8:	40014800 	.word	0x40014800

08002dbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002dc0:	b672      	cpsid	i
}
 8002dc2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002dc4:	bf00      	nop
 8002dc6:	e7fd      	b.n	8002dc4 <Error_Handler+0x8>

08002dc8 <LL_RCC_SetRTCClockSource>:
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_LSI
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_HSE_DIV32
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetRTCClockSource(uint32_t Source)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002dd0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002dd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dd8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002ddc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	4313      	orrs	r3, r2
 8002de4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8002de8:	bf00      	nop
 8002dea:	370c      	adds	r7, #12
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr

08002df4 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8002df4:	b480      	push	{r7}
 8002df6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8002df8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002dfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e00:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002e04:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002e08:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002e0c:	bf00      	nop
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr

08002e16 <LL_AHB2_GRP1_EnableClock>:
{
 8002e16:	b480      	push	{r7}
 8002e18:	b085      	sub	sp, #20
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002e1e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e22:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002e24:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002e2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e32:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	4013      	ands	r3, r2
 8002e38:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
}
 8002e3c:	bf00      	nop
 8002e3e:	3714      	adds	r7, #20
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr

08002e48 <LL_AHB3_GRP1_EnableClock>:
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b085      	sub	sp, #20
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8002e50:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e54:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002e56:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8002e60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e64:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4013      	ands	r3, r2
 8002e6a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
}
 8002e6e:	bf00      	nop
 8002e70:	3714      	adds	r7, #20
 8002e72:	46bd      	mov	sp, r7
 8002e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e78:	4770      	bx	lr

08002e7a <LL_APB1_GRP1_EnableClock>:
{
 8002e7a:	b480      	push	{r7}
 8002e7c:	b085      	sub	sp, #20
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002e82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e86:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002e88:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002e92:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e96:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
}
 8002ea0:	bf00      	nop
 8002ea2:	3714      	adds	r7, #20
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr

08002eac <LL_APB2_GRP1_EnableClock>:
{
 8002eac:	b480      	push	{r7}
 8002eae:	b085      	sub	sp, #20
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002eb4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002eb8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002eba:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002ec4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ec8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4013      	ands	r3, r2
 8002ece:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
}
 8002ed2:	bf00      	nop
 8002ed4:	3714      	adds	r7, #20
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr

08002ede <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ede:	b580      	push	{r7, lr}
 8002ee0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8002ee2:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002ee6:	f7ff ffaf 	bl	8002e48 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8002eea:	2200      	movs	r2, #0
 8002eec:	2100      	movs	r1, #0
 8002eee:	202e      	movs	r0, #46	@ 0x2e
 8002ef0:	f000 fb6b 	bl	80035ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8002ef4:	202e      	movs	r0, #46	@ 0x2e
 8002ef6:	f000 fb82 	bl	80035fe <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002efa:	bf00      	nop
 8002efc:	bd80      	pop	{r7, pc}
	...

08002f00 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a05      	ldr	r2, [pc, #20]	@ (8002f24 <HAL_IPCC_MspInit+0x24>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d103      	bne.n	8002f1a <HAL_IPCC_MspInit+0x1a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8002f12:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8002f16:	f7ff ff97 	bl	8002e48 <LL_AHB3_GRP1_EnableClock>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 8002f1a:	bf00      	nop
 8002f1c:	3708      	adds	r7, #8
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	58000c00 	.word	0x58000c00

08002f28 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b096      	sub	sp, #88	@ 0x58
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002f30:	f107 0308 	add.w	r3, r7, #8
 8002f34:	2250      	movs	r2, #80	@ 0x50
 8002f36:	2100      	movs	r1, #0
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f00b fc69 	bl	800e810 <memset>
  if(hrtc->Instance==RTC)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a14      	ldr	r2, [pc, #80]	@ (8002f94 <HAL_RTC_MspInit+0x6c>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d120      	bne.n	8002f8a <HAL_RTC_MspInit+0x62>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */
  HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8002f48:	f001 feb0 	bl	8004cac <HAL_PWR_EnableBkUpAccess>

  /**
  *  Write twice the value to flush the APB-AHB bridge
  *  This bit shall be written in the register before writing the next one
  */
  HAL_PWR_EnableBkUpAccess();
 8002f4c:	f001 feae 	bl	8004cac <HAL_PWR_EnableBkUpAccess>

  __HAL_RCC_RTC_CONFIG(RCC_RTCCLKSOURCE_LSE); /**< Select LSI as RTC Input */
 8002f50:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8002f54:	f7ff ff38 	bl	8002dc8 <LL_RCC_SetRTCClockSource>
  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002f58:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002f5c:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002f5e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002f62:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f64:	f107 0308 	add.w	r3, r7, #8
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f003 f9e4 	bl	8006336 <HAL_RCCEx_PeriphCLKConfig>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d001      	beq.n	8002f78 <HAL_RTC_MspInit+0x50>
    {
      Error_Handler();
 8002f74:	f7ff ff22 	bl	8002dbc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002f78:	f7ff ff3c 	bl	8002df4 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002f7c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8002f80:	f7ff ff7b 	bl	8002e7a <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */
  HAL_RTCEx_EnableBypassShadow(hrtc);
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	f003 fd5d 	bl	8006a44 <HAL_RTCEx_EnableBypassShadow>
  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002f8a:	bf00      	nop
 8002f8c:	3758      	adds	r7, #88	@ 0x58
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	40002800 	.word	0x40002800

08002f98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b09c      	sub	sp, #112	@ 0x70
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fa0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	601a      	str	r2, [r3, #0]
 8002fa8:	605a      	str	r2, [r3, #4]
 8002faa:	609a      	str	r2, [r3, #8]
 8002fac:	60da      	str	r2, [r3, #12]
 8002fae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002fb0:	f107 030c 	add.w	r3, r7, #12
 8002fb4:	2250      	movs	r2, #80	@ 0x50
 8002fb6:	2100      	movs	r1, #0
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f00b fc29 	bl	800e810 <memset>
  if(huart->Instance==USART1)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a2e      	ldr	r2, [pc, #184]	@ (800307c <HAL_UART_MspInit+0xe4>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d155      	bne.n	8003074 <HAL_UART_MspInit+0xdc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002fd0:	f107 030c 	add.w	r3, r7, #12
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f003 f9ae 	bl	8006336 <HAL_RCCEx_PeriphCLKConfig>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d001      	beq.n	8002fe4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002fe0:	f7ff feec 	bl	8002dbc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002fe4:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002fe8:	f7ff ff60 	bl	8002eac <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fec:	2002      	movs	r0, #2
 8002fee:	f7ff ff12 	bl	8002e16 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin|VCP_TX_Pin;
 8002ff2:	23c0      	movs	r3, #192	@ 0xc0
 8002ff4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ff6:	2302      	movs	r3, #2
 8002ff8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ffe:	2303      	movs	r3, #3
 8003000:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003002:	2307      	movs	r3, #7
 8003004:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003006:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800300a:	4619      	mov	r1, r3
 800300c:	481c      	ldr	r0, [pc, #112]	@ (8003080 <HAL_UART_MspInit+0xe8>)
 800300e:	f000 fe6d 	bl	8003cec <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Channel4;
 8003012:	4b1c      	ldr	r3, [pc, #112]	@ (8003084 <HAL_UART_MspInit+0xec>)
 8003014:	4a1c      	ldr	r2, [pc, #112]	@ (8003088 <HAL_UART_MspInit+0xf0>)
 8003016:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8003018:	4b1a      	ldr	r3, [pc, #104]	@ (8003084 <HAL_UART_MspInit+0xec>)
 800301a:	220f      	movs	r2, #15
 800301c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800301e:	4b19      	ldr	r3, [pc, #100]	@ (8003084 <HAL_UART_MspInit+0xec>)
 8003020:	2210      	movs	r2, #16
 8003022:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003024:	4b17      	ldr	r3, [pc, #92]	@ (8003084 <HAL_UART_MspInit+0xec>)
 8003026:	2200      	movs	r2, #0
 8003028:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800302a:	4b16      	ldr	r3, [pc, #88]	@ (8003084 <HAL_UART_MspInit+0xec>)
 800302c:	2280      	movs	r2, #128	@ 0x80
 800302e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003030:	4b14      	ldr	r3, [pc, #80]	@ (8003084 <HAL_UART_MspInit+0xec>)
 8003032:	2200      	movs	r2, #0
 8003034:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003036:	4b13      	ldr	r3, [pc, #76]	@ (8003084 <HAL_UART_MspInit+0xec>)
 8003038:	2200      	movs	r2, #0
 800303a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800303c:	4b11      	ldr	r3, [pc, #68]	@ (8003084 <HAL_UART_MspInit+0xec>)
 800303e:	2200      	movs	r2, #0
 8003040:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003042:	4b10      	ldr	r3, [pc, #64]	@ (8003084 <HAL_UART_MspInit+0xec>)
 8003044:	2200      	movs	r2, #0
 8003046:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003048:	480e      	ldr	r0, [pc, #56]	@ (8003084 <HAL_UART_MspInit+0xec>)
 800304a:	f000 fb1d 	bl	8003688 <HAL_DMA_Init>
 800304e:	4603      	mov	r3, r0
 8003050:	2b00      	cmp	r3, #0
 8003052:	d001      	beq.n	8003058 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8003054:	f7ff feb2 	bl	8002dbc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	4a0a      	ldr	r2, [pc, #40]	@ (8003084 <HAL_UART_MspInit+0xec>)
 800305c:	67da      	str	r2, [r3, #124]	@ 0x7c
 800305e:	4a09      	ldr	r2, [pc, #36]	@ (8003084 <HAL_UART_MspInit+0xec>)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003064:	2200      	movs	r2, #0
 8003066:	2100      	movs	r1, #0
 8003068:	2024      	movs	r0, #36	@ 0x24
 800306a:	f000 faae 	bl	80035ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800306e:	2024      	movs	r0, #36	@ 0x24
 8003070:	f000 fac5 	bl	80035fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003074:	bf00      	nop
 8003076:	3770      	adds	r7, #112	@ 0x70
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}
 800307c:	40013800 	.word	0x40013800
 8003080:	48000400 	.word	0x48000400
 8003084:	2000027c 	.word	0x2000027c
 8003088:	40020444 	.word	0x40020444

0800308c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800308c:	b480      	push	{r7}
 800308e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003090:	bf00      	nop
 8003092:	e7fd      	b.n	8003090 <NMI_Handler+0x4>

08003094 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003094:	b480      	push	{r7}
 8003096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003098:	bf00      	nop
 800309a:	e7fd      	b.n	8003098 <HardFault_Handler+0x4>

0800309c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800309c:	b480      	push	{r7}
 800309e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80030a0:	bf00      	nop
 80030a2:	e7fd      	b.n	80030a0 <MemManage_Handler+0x4>

080030a4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80030a4:	b480      	push	{r7}
 80030a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80030a8:	bf00      	nop
 80030aa:	e7fd      	b.n	80030a8 <BusFault_Handler+0x4>

080030ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80030ac:	b480      	push	{r7}
 80030ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80030b0:	bf00      	nop
 80030b2:	e7fd      	b.n	80030b0 <UsageFault_Handler+0x4>

080030b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80030b4:	b480      	push	{r7}
 80030b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80030b8:	bf00      	nop
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr

080030c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80030c2:	b480      	push	{r7}
 80030c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80030c6:	bf00      	nop
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr

080030d0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80030d0:	b480      	push	{r7}
 80030d2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80030d4:	bf00      	nop
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr

080030de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80030de:	b580      	push	{r7, lr}
 80030e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80030e2:	f000 f8ff 	bl	80032e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80030e6:	bf00      	nop
 80030e8:	bd80      	pop	{r7, pc}
	...

080030ec <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80030f0:	4802      	ldr	r0, [pc, #8]	@ (80030fc <USART1_IRQHandler+0x10>)
 80030f2:	f004 ff73 	bl	8007fdc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80030f6:	bf00      	nop
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	200001e8 	.word	0x200001e8

08003100 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8003104:	f000 ff92 	bl	800402c <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8003108:	bf00      	nop
 800310a:	bd80      	pop	{r7, pc}

0800310c <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003110:	4802      	ldr	r0, [pc, #8]	@ (800311c <DMA2_Channel4_IRQHandler+0x10>)
 8003112:	f000 fc9a 	bl	8003a4a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 8003116:	bf00      	nop
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	2000027c 	.word	0x2000027c

08003120 <IPCC_C1_RX_IRQHandler>:
/* USER CODE BEGIN 1 */
/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8003124:	f00a fda8 	bl	800dc78 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8003128:	bf00      	nop
 800312a:	bd80      	pop	{r7, pc}

0800312c <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8003130:	f00a fdd8 	bl	800dce4 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8003134:	bf00      	nop
 8003136:	bd80      	pop	{r7, pc}

08003138 <EXTI15_10_IRQHandler>:
 *         interrupt request.
 * @param  None
 * @retval None
 */
void PUSH_BUTTON_SW_EXTI_IRQHandler(void)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 800313c:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8003140:	f000 ff5c 	bl	8003ffc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003144:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8003148:	f000 ff58 	bl	8003ffc <HAL_GPIO_EXTI_IRQHandler>
}
 800314c:	bf00      	nop
 800314e:	bd80      	pop	{r7, pc}

08003150 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(ADS1299_nDRDY_Pin);
 8003154:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8003158:	f000 ff50 	bl	8003ffc <HAL_GPIO_EXTI_IRQHandler>
}
 800315c:	bf00      	nop
 800315e:	bd80      	pop	{r7, pc}

08003160 <RTC_WKUP_IRQHandler>:

void RTC_WKUP_IRQHandler(void)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	af00      	add	r7, sp, #0
  HAL_RTCEx_WakeUpTimerIRQHandler();
 8003164:	f7fe fd66 	bl	8001c34 <HW_TS_RTC_Wakeup_Handler>
}
 8003168:	bf00      	nop
 800316a:	bd80      	pop	{r7, pc}

0800316c <TIM1_TRG_COM_TIM17_IRQHandler>:
  * @brief  This function handles TIM17 IRQ Handler.
  * @param  None
  * @retval None
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	af00      	add	r7, sp, #0
    HAL_TIM_IRQHandler(&htim17);
 8003170:	4802      	ldr	r0, [pc, #8]	@ (800317c <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8003172:	f004 fc85 	bl	8007a80 <HAL_TIM_IRQHandler>
}
 8003176:	bf00      	nop
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop
 800317c:	200003e0 	.word	0x200003e0

08003180 <TIM2_IRQHandler>:


void TIM2_IRQHandler(void)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	af00      	add	r7, sp, #0
    HAL_TIM_IRQHandler(&htim2);
 8003184:	4802      	ldr	r0, [pc, #8]	@ (8003190 <TIM2_IRQHandler+0x10>)
 8003186:	f004 fc7b 	bl	8007a80 <HAL_TIM_IRQHandler>
}
 800318a:	bf00      	nop
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	20000394 	.word	0x20000394

08003194 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003194:	b480      	push	{r7}
 8003196:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8003198:	4b07      	ldr	r3, [pc, #28]	@ (80031b8 <SystemInit+0x24>)
 800319a:	2200      	movs	r2, #0
 800319c:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 800319e:	4b06      	ldr	r3, [pc, #24]	@ (80031b8 <SystemInit+0x24>)
 80031a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031a4:	4a04      	ldr	r2, [pc, #16]	@ (80031b8 <SystemInit+0x24>)
 80031a6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80031aa:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  RCC->CR &= 0xFFFBFFFFU;

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
#endif
}
 80031ae:	bf00      	nop
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr
 80031b8:	e000ed00 	.word	0xe000ed00

080031bc <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80031bc:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80031be:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80031c0:	3304      	adds	r3, #4

080031c2 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80031c2:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80031c4:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80031c6:	d3f9      	bcc.n	80031bc <CopyDataInit>
  bx lr
 80031c8:	4770      	bx	lr

080031ca <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80031ca:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80031cc:	3004      	adds	r0, #4

080031ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80031ce:	4288      	cmp	r0, r1
  bcc FillZerobss
 80031d0:	d3fb      	bcc.n	80031ca <FillZerobss>
  bx lr
 80031d2:	4770      	bx	lr

080031d4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80031d4:	480c      	ldr	r0, [pc, #48]	@ (8003208 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80031d6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80031d8:	f7ff ffdc 	bl	8003194 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80031dc:	480b      	ldr	r0, [pc, #44]	@ (800320c <LoopForever+0x6>)
 80031de:	490c      	ldr	r1, [pc, #48]	@ (8003210 <LoopForever+0xa>)
 80031e0:	4a0c      	ldr	r2, [pc, #48]	@ (8003214 <LoopForever+0xe>)
 80031e2:	2300      	movs	r3, #0
 80031e4:	f7ff ffed 	bl	80031c2 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80031e8:	480b      	ldr	r0, [pc, #44]	@ (8003218 <LoopForever+0x12>)
 80031ea:	490c      	ldr	r1, [pc, #48]	@ (800321c <LoopForever+0x16>)
 80031ec:	4a0c      	ldr	r2, [pc, #48]	@ (8003220 <LoopForever+0x1a>)
 80031ee:	2300      	movs	r3, #0
 80031f0:	f7ff ffe7 	bl	80031c2 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80031f4:	480b      	ldr	r0, [pc, #44]	@ (8003224 <LoopForever+0x1e>)
 80031f6:	490c      	ldr	r1, [pc, #48]	@ (8003228 <LoopForever+0x22>)
 80031f8:	2300      	movs	r3, #0
 80031fa:	f7ff ffe8 	bl	80031ce <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80031fe:	f00b fb55 	bl	800e8ac <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8003202:	f7ff fa43 	bl	800268c <main>

08003206 <LoopForever>:

LoopForever:
  b LoopForever
 8003206:	e7fe      	b.n	8003206 <LoopForever>
  ldr   r0, =_estack
 8003208:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 800320c:	20000008 	.word	0x20000008
 8003210:	20000088 	.word	0x20000088
 8003214:	08010e04 	.word	0x08010e04
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8003218:	200301e4 	.word	0x200301e4
 800321c:	20030d8b 	.word	0x20030d8b
 8003220:	08010eb2 	.word	0x08010eb2
  INIT_BSS _sbss, _ebss
 8003224:	200000bc 	.word	0x200000bc
 8003228:	200023d0 	.word	0x200023d0

0800322c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800322c:	e7fe      	b.n	800322c <ADC1_IRQHandler>
	...

08003230 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b082      	sub	sp, #8
 8003234:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003236:	2300      	movs	r3, #0
 8003238:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800323a:	4b0c      	ldr	r3, [pc, #48]	@ (800326c <HAL_Init+0x3c>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a0b      	ldr	r2, [pc, #44]	@ (800326c <HAL_Init+0x3c>)
 8003240:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003244:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003246:	2003      	movs	r0, #3
 8003248:	f000 f9b4 	bl	80035b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800324c:	2000      	movs	r0, #0
 800324e:	f000 f80f 	bl	8003270 <HAL_InitTick>
 8003252:	4603      	mov	r3, r0
 8003254:	2b00      	cmp	r3, #0
 8003256:	d002      	beq.n	800325e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	71fb      	strb	r3, [r7, #7]
 800325c:	e001      	b.n	8003262 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800325e:	f7ff fe3e 	bl	8002ede <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003262:	79fb      	ldrb	r3, [r7, #7]
}
 8003264:	4618      	mov	r0, r3
 8003266:	3708      	adds	r7, #8
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}
 800326c:	58004000 	.word	0x58004000

08003270 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b084      	sub	sp, #16
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003278:	2300      	movs	r3, #0
 800327a:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 800327c:	4b17      	ldr	r3, [pc, #92]	@ (80032dc <HAL_InitTick+0x6c>)
 800327e:	781b      	ldrb	r3, [r3, #0]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d024      	beq.n	80032ce <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003284:	f002 fdc6 	bl	8005e14 <HAL_RCC_GetHCLKFreq>
 8003288:	4602      	mov	r2, r0
 800328a:	4b14      	ldr	r3, [pc, #80]	@ (80032dc <HAL_InitTick+0x6c>)
 800328c:	781b      	ldrb	r3, [r3, #0]
 800328e:	4619      	mov	r1, r3
 8003290:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003294:	fbb3 f3f1 	udiv	r3, r3, r1
 8003298:	fbb2 f3f3 	udiv	r3, r2, r3
 800329c:	4618      	mov	r0, r3
 800329e:	f000 f9ca 	bl	8003636 <HAL_SYSTICK_Config>
 80032a2:	4603      	mov	r3, r0
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d10f      	bne.n	80032c8 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2b0f      	cmp	r3, #15
 80032ac:	d809      	bhi.n	80032c2 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80032ae:	2200      	movs	r2, #0
 80032b0:	6879      	ldr	r1, [r7, #4]
 80032b2:	f04f 30ff 	mov.w	r0, #4294967295
 80032b6:	f000 f988 	bl	80035ca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80032ba:	4a09      	ldr	r2, [pc, #36]	@ (80032e0 <HAL_InitTick+0x70>)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6013      	str	r3, [r2, #0]
 80032c0:	e007      	b.n	80032d2 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	73fb      	strb	r3, [r7, #15]
 80032c6:	e004      	b.n	80032d2 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	73fb      	strb	r3, [r7, #15]
 80032cc:	e001      	b.n	80032d2 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80032d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	3710      	adds	r7, #16
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}
 80032dc:	20000010 	.word	0x20000010
 80032e0:	2000000c 	.word	0x2000000c

080032e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80032e4:	b480      	push	{r7}
 80032e6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80032e8:	4b06      	ldr	r3, [pc, #24]	@ (8003304 <HAL_IncTick+0x20>)
 80032ea:	781b      	ldrb	r3, [r3, #0]
 80032ec:	461a      	mov	r2, r3
 80032ee:	4b06      	ldr	r3, [pc, #24]	@ (8003308 <HAL_IncTick+0x24>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4413      	add	r3, r2
 80032f4:	4a04      	ldr	r2, [pc, #16]	@ (8003308 <HAL_IncTick+0x24>)
 80032f6:	6013      	str	r3, [r2, #0]
}
 80032f8:	bf00      	nop
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr
 8003302:	bf00      	nop
 8003304:	20000010 	.word	0x20000010
 8003308:	20000434 	.word	0x20000434

0800330c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800330c:	b480      	push	{r7}
 800330e:	af00      	add	r7, sp, #0
  return uwTick;
 8003310:	4b03      	ldr	r3, [pc, #12]	@ (8003320 <HAL_GetTick+0x14>)
 8003312:	681b      	ldr	r3, [r3, #0]
}
 8003314:	4618      	mov	r0, r3
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr
 800331e:	bf00      	nop
 8003320:	20000434 	.word	0x20000434

08003324 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8003324:	b480      	push	{r7}
 8003326:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8003328:	4b03      	ldr	r3, [pc, #12]	@ (8003338 <HAL_GetTickPrio+0x14>)
 800332a:	681b      	ldr	r3, [r3, #0]
}
 800332c:	4618      	mov	r0, r3
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr
 8003336:	bf00      	nop
 8003338:	2000000c 	.word	0x2000000c

0800333c <HAL_GetTickFreq>:
  * @brief Return tick frequency.
  * @retval Tick frequency.
  *         Value of @ref HAL_TickFreqTypeDef.
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 800333c:	b480      	push	{r7}
 800333e:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8003340:	4b03      	ldr	r3, [pc, #12]	@ (8003350 <HAL_GetTickFreq+0x14>)
 8003342:	781b      	ldrb	r3, [r3, #0]
}
 8003344:	4618      	mov	r0, r3
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr
 800334e:	bf00      	nop
 8003350:	20000010 	.word	0x20000010

08003354 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003354:	b480      	push	{r7}
 8003356:	b085      	sub	sp, #20
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	f003 0307 	and.w	r3, r3, #7
 8003362:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003364:	4b0c      	ldr	r3, [pc, #48]	@ (8003398 <__NVIC_SetPriorityGrouping+0x44>)
 8003366:	68db      	ldr	r3, [r3, #12]
 8003368:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800336a:	68ba      	ldr	r2, [r7, #8]
 800336c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003370:	4013      	ands	r3, r2
 8003372:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800337c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003380:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003384:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003386:	4a04      	ldr	r2, [pc, #16]	@ (8003398 <__NVIC_SetPriorityGrouping+0x44>)
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	60d3      	str	r3, [r2, #12]
}
 800338c:	bf00      	nop
 800338e:	3714      	adds	r7, #20
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr
 8003398:	e000ed00 	.word	0xe000ed00

0800339c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800339c:	b480      	push	{r7}
 800339e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033a0:	4b04      	ldr	r3, [pc, #16]	@ (80033b4 <__NVIC_GetPriorityGrouping+0x18>)
 80033a2:	68db      	ldr	r3, [r3, #12]
 80033a4:	0a1b      	lsrs	r3, r3, #8
 80033a6:	f003 0307 	and.w	r3, r3, #7
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr
 80033b4:	e000ed00 	.word	0xe000ed00

080033b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b083      	sub	sp, #12
 80033bc:	af00      	add	r7, sp, #0
 80033be:	4603      	mov	r3, r0
 80033c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	db0b      	blt.n	80033e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033ca:	79fb      	ldrb	r3, [r7, #7]
 80033cc:	f003 021f 	and.w	r2, r3, #31
 80033d0:	4907      	ldr	r1, [pc, #28]	@ (80033f0 <__NVIC_EnableIRQ+0x38>)
 80033d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033d6:	095b      	lsrs	r3, r3, #5
 80033d8:	2001      	movs	r0, #1
 80033da:	fa00 f202 	lsl.w	r2, r0, r2
 80033de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80033e2:	bf00      	nop
 80033e4:	370c      	adds	r7, #12
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr
 80033ee:	bf00      	nop
 80033f0:	e000e100 	.word	0xe000e100

080033f4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b083      	sub	sp, #12
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	4603      	mov	r3, r0
 80033fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003402:	2b00      	cmp	r3, #0
 8003404:	db12      	blt.n	800342c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003406:	79fb      	ldrb	r3, [r7, #7]
 8003408:	f003 021f 	and.w	r2, r3, #31
 800340c:	490a      	ldr	r1, [pc, #40]	@ (8003438 <__NVIC_DisableIRQ+0x44>)
 800340e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003412:	095b      	lsrs	r3, r3, #5
 8003414:	2001      	movs	r0, #1
 8003416:	fa00 f202 	lsl.w	r2, r0, r2
 800341a:	3320      	adds	r3, #32
 800341c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003420:	f3bf 8f4f 	dsb	sy
}
 8003424:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003426:	f3bf 8f6f 	isb	sy
}
 800342a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800342c:	bf00      	nop
 800342e:	370c      	adds	r7, #12
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr
 8003438:	e000e100 	.word	0xe000e100

0800343c <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
 8003442:	4603      	mov	r3, r0
 8003444:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800344a:	2b00      	cmp	r3, #0
 800344c:	db0c      	blt.n	8003468 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800344e:	79fb      	ldrb	r3, [r7, #7]
 8003450:	f003 021f 	and.w	r2, r3, #31
 8003454:	4907      	ldr	r1, [pc, #28]	@ (8003474 <__NVIC_SetPendingIRQ+0x38>)
 8003456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800345a:	095b      	lsrs	r3, r3, #5
 800345c:	2001      	movs	r0, #1
 800345e:	fa00 f202 	lsl.w	r2, r0, r2
 8003462:	3340      	adds	r3, #64	@ 0x40
 8003464:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003468:	bf00      	nop
 800346a:	370c      	adds	r7, #12
 800346c:	46bd      	mov	sp, r7
 800346e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003472:	4770      	bx	lr
 8003474:	e000e100 	.word	0xe000e100

08003478 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003478:	b480      	push	{r7}
 800347a:	b083      	sub	sp, #12
 800347c:	af00      	add	r7, sp, #0
 800347e:	4603      	mov	r3, r0
 8003480:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003486:	2b00      	cmp	r3, #0
 8003488:	db0c      	blt.n	80034a4 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800348a:	79fb      	ldrb	r3, [r7, #7]
 800348c:	f003 021f 	and.w	r2, r3, #31
 8003490:	4907      	ldr	r1, [pc, #28]	@ (80034b0 <__NVIC_ClearPendingIRQ+0x38>)
 8003492:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003496:	095b      	lsrs	r3, r3, #5
 8003498:	2001      	movs	r0, #1
 800349a:	fa00 f202 	lsl.w	r2, r0, r2
 800349e:	3360      	adds	r3, #96	@ 0x60
 80034a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80034a4:	bf00      	nop
 80034a6:	370c      	adds	r7, #12
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr
 80034b0:	e000e100 	.word	0xe000e100

080034b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	4603      	mov	r3, r0
 80034bc:	6039      	str	r1, [r7, #0]
 80034be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	db0a      	blt.n	80034de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	b2da      	uxtb	r2, r3
 80034cc:	490c      	ldr	r1, [pc, #48]	@ (8003500 <__NVIC_SetPriority+0x4c>)
 80034ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034d2:	0112      	lsls	r2, r2, #4
 80034d4:	b2d2      	uxtb	r2, r2
 80034d6:	440b      	add	r3, r1
 80034d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034dc:	e00a      	b.n	80034f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	b2da      	uxtb	r2, r3
 80034e2:	4908      	ldr	r1, [pc, #32]	@ (8003504 <__NVIC_SetPriority+0x50>)
 80034e4:	79fb      	ldrb	r3, [r7, #7]
 80034e6:	f003 030f 	and.w	r3, r3, #15
 80034ea:	3b04      	subs	r3, #4
 80034ec:	0112      	lsls	r2, r2, #4
 80034ee:	b2d2      	uxtb	r2, r2
 80034f0:	440b      	add	r3, r1
 80034f2:	761a      	strb	r2, [r3, #24]
}
 80034f4:	bf00      	nop
 80034f6:	370c      	adds	r7, #12
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr
 8003500:	e000e100 	.word	0xe000e100
 8003504:	e000ed00 	.word	0xe000ed00

08003508 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003508:	b480      	push	{r7}
 800350a:	b089      	sub	sp, #36	@ 0x24
 800350c:	af00      	add	r7, sp, #0
 800350e:	60f8      	str	r0, [r7, #12]
 8003510:	60b9      	str	r1, [r7, #8]
 8003512:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	f003 0307 	and.w	r3, r3, #7
 800351a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800351c:	69fb      	ldr	r3, [r7, #28]
 800351e:	f1c3 0307 	rsb	r3, r3, #7
 8003522:	2b04      	cmp	r3, #4
 8003524:	bf28      	it	cs
 8003526:	2304      	movcs	r3, #4
 8003528:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800352a:	69fb      	ldr	r3, [r7, #28]
 800352c:	3304      	adds	r3, #4
 800352e:	2b06      	cmp	r3, #6
 8003530:	d902      	bls.n	8003538 <NVIC_EncodePriority+0x30>
 8003532:	69fb      	ldr	r3, [r7, #28]
 8003534:	3b03      	subs	r3, #3
 8003536:	e000      	b.n	800353a <NVIC_EncodePriority+0x32>
 8003538:	2300      	movs	r3, #0
 800353a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800353c:	f04f 32ff 	mov.w	r2, #4294967295
 8003540:	69bb      	ldr	r3, [r7, #24]
 8003542:	fa02 f303 	lsl.w	r3, r2, r3
 8003546:	43da      	mvns	r2, r3
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	401a      	ands	r2, r3
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003550:	f04f 31ff 	mov.w	r1, #4294967295
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	fa01 f303 	lsl.w	r3, r1, r3
 800355a:	43d9      	mvns	r1, r3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003560:	4313      	orrs	r3, r2
         );
}
 8003562:	4618      	mov	r0, r3
 8003564:	3724      	adds	r7, #36	@ 0x24
 8003566:	46bd      	mov	sp, r7
 8003568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356c:	4770      	bx	lr
	...

08003570 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b082      	sub	sp, #8
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	3b01      	subs	r3, #1
 800357c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003580:	d301      	bcc.n	8003586 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003582:	2301      	movs	r3, #1
 8003584:	e00f      	b.n	80035a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003586:	4a0a      	ldr	r2, [pc, #40]	@ (80035b0 <SysTick_Config+0x40>)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	3b01      	subs	r3, #1
 800358c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800358e:	210f      	movs	r1, #15
 8003590:	f04f 30ff 	mov.w	r0, #4294967295
 8003594:	f7ff ff8e 	bl	80034b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003598:	4b05      	ldr	r3, [pc, #20]	@ (80035b0 <SysTick_Config+0x40>)
 800359a:	2200      	movs	r2, #0
 800359c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800359e:	4b04      	ldr	r3, [pc, #16]	@ (80035b0 <SysTick_Config+0x40>)
 80035a0:	2207      	movs	r2, #7
 80035a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80035a4:	2300      	movs	r3, #0
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3708      	adds	r7, #8
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	bf00      	nop
 80035b0:	e000e010 	.word	0xe000e010

080035b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b082      	sub	sp, #8
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	f7ff fec9 	bl	8003354 <__NVIC_SetPriorityGrouping>
}
 80035c2:	bf00      	nop
 80035c4:	3708      	adds	r7, #8
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}

080035ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035ca:	b580      	push	{r7, lr}
 80035cc:	b086      	sub	sp, #24
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	4603      	mov	r3, r0
 80035d2:	60b9      	str	r1, [r7, #8]
 80035d4:	607a      	str	r2, [r7, #4]
 80035d6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80035d8:	f7ff fee0 	bl	800339c <__NVIC_GetPriorityGrouping>
 80035dc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035de:	687a      	ldr	r2, [r7, #4]
 80035e0:	68b9      	ldr	r1, [r7, #8]
 80035e2:	6978      	ldr	r0, [r7, #20]
 80035e4:	f7ff ff90 	bl	8003508 <NVIC_EncodePriority>
 80035e8:	4602      	mov	r2, r0
 80035ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035ee:	4611      	mov	r1, r2
 80035f0:	4618      	mov	r0, r3
 80035f2:	f7ff ff5f 	bl	80034b4 <__NVIC_SetPriority>
}
 80035f6:	bf00      	nop
 80035f8:	3718      	adds	r7, #24
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}

080035fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035fe:	b580      	push	{r7, lr}
 8003600:	b082      	sub	sp, #8
 8003602:	af00      	add	r7, sp, #0
 8003604:	4603      	mov	r3, r0
 8003606:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003608:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800360c:	4618      	mov	r0, r3
 800360e:	f7ff fed3 	bl	80033b8 <__NVIC_EnableIRQ>
}
 8003612:	bf00      	nop
 8003614:	3708      	adds	r7, #8
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}

0800361a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800361a:	b580      	push	{r7, lr}
 800361c:	b082      	sub	sp, #8
 800361e:	af00      	add	r7, sp, #0
 8003620:	4603      	mov	r3, r0
 8003622:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003624:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003628:	4618      	mov	r0, r3
 800362a:	f7ff fee3 	bl	80033f4 <__NVIC_DisableIRQ>
}
 800362e:	bf00      	nop
 8003630:	3708      	adds	r7, #8
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}

08003636 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003636:	b580      	push	{r7, lr}
 8003638:	b082      	sub	sp, #8
 800363a:	af00      	add	r7, sp, #0
 800363c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f7ff ff96 	bl	8003570 <SysTick_Config>
 8003644:	4603      	mov	r3, r0
}
 8003646:	4618      	mov	r0, r3
 8003648:	3708      	adds	r7, #8
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}

0800364e <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 800364e:	b580      	push	{r7, lr}
 8003650:	b082      	sub	sp, #8
 8003652:	af00      	add	r7, sp, #0
 8003654:	4603      	mov	r3, r0
 8003656:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8003658:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800365c:	4618      	mov	r0, r3
 800365e:	f7ff feed 	bl	800343c <__NVIC_SetPendingIRQ>
}
 8003662:	bf00      	nop
 8003664:	3708      	adds	r7, #8
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}

0800366a <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800366a:	b580      	push	{r7, lr}
 800366c:	b082      	sub	sp, #8
 800366e:	af00      	add	r7, sp, #0
 8003670:	4603      	mov	r3, r0
 8003672:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8003674:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003678:	4618      	mov	r0, r3
 800367a:	f7ff fefd 	bl	8003478 <__NVIC_ClearPendingIRQ>
}
 800367e:	bf00      	nop
 8003680:	3708      	adds	r7, #8
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
	...

08003688 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b084      	sub	sp, #16
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d101      	bne.n	800369a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e08e      	b.n	80037b8 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	461a      	mov	r2, r3
 80036a0:	4b47      	ldr	r3, [pc, #284]	@ (80037c0 <HAL_DMA_Init+0x138>)
 80036a2:	429a      	cmp	r2, r3
 80036a4:	d80f      	bhi.n	80036c6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	461a      	mov	r2, r3
 80036ac:	4b45      	ldr	r3, [pc, #276]	@ (80037c4 <HAL_DMA_Init+0x13c>)
 80036ae:	4413      	add	r3, r2
 80036b0:	4a45      	ldr	r2, [pc, #276]	@ (80037c8 <HAL_DMA_Init+0x140>)
 80036b2:	fba2 2303 	umull	r2, r3, r2, r3
 80036b6:	091b      	lsrs	r3, r3, #4
 80036b8:	009a      	lsls	r2, r3, #2
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	4a42      	ldr	r2, [pc, #264]	@ (80037cc <HAL_DMA_Init+0x144>)
 80036c2:	641a      	str	r2, [r3, #64]	@ 0x40
 80036c4:	e00e      	b.n	80036e4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	461a      	mov	r2, r3
 80036cc:	4b40      	ldr	r3, [pc, #256]	@ (80037d0 <HAL_DMA_Init+0x148>)
 80036ce:	4413      	add	r3, r2
 80036d0:	4a3d      	ldr	r2, [pc, #244]	@ (80037c8 <HAL_DMA_Init+0x140>)
 80036d2:	fba2 2303 	umull	r2, r3, r2, r3
 80036d6:	091b      	lsrs	r3, r3, #4
 80036d8:	009a      	lsls	r2, r3, #2
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4a3c      	ldr	r2, [pc, #240]	@ (80037d4 <HAL_DMA_Init+0x14c>)
 80036e2:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2202      	movs	r2, #2
 80036e8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80036fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036fe:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003708:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	691b      	ldr	r3, [r3, #16]
 800370e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003714:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	699b      	ldr	r3, [r3, #24]
 800371a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003720:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6a1b      	ldr	r3, [r3, #32]
 8003726:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003728:	68fa      	ldr	r2, [r7, #12]
 800372a:	4313      	orrs	r3, r2
 800372c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	68fa      	ldr	r2, [r7, #12]
 8003734:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f000 fa74 	bl	8003c24 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003744:	d102      	bne.n	800374c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2200      	movs	r2, #0
 800374a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	685a      	ldr	r2, [r3, #4]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003754:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8003758:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003762:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d010      	beq.n	800378e <HAL_DMA_Init+0x106>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	2b04      	cmp	r3, #4
 8003772:	d80c      	bhi.n	800378e <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	f000 fa93 	bl	8003ca0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800377e:	2200      	movs	r2, #0
 8003780:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800378a:	605a      	str	r2, [r3, #4]
 800378c:	e008      	b.n	80037a0 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2200      	movs	r2, #0
 8003798:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2200      	movs	r2, #0
 800379e:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2200      	movs	r2, #0
 80037a4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2201      	movs	r2, #1
 80037aa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2200      	movs	r2, #0
 80037b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80037b6:	2300      	movs	r3, #0
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3710      	adds	r7, #16
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}
 80037c0:	40020407 	.word	0x40020407
 80037c4:	bffdfff8 	.word	0xbffdfff8
 80037c8:	cccccccd 	.word	0xcccccccd
 80037cc:	40020000 	.word	0x40020000
 80037d0:	bffdfbf8 	.word	0xbffdfbf8
 80037d4:	40020400 	.word	0x40020400

080037d8 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b086      	sub	sp, #24
 80037dc:	af00      	add	r7, sp, #0
 80037de:	60f8      	str	r0, [r7, #12]
 80037e0:	60b9      	str	r1, [r7, #8]
 80037e2:	607a      	str	r2, [r7, #4]
 80037e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037e6:	2300      	movs	r3, #0
 80037e8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d101      	bne.n	80037f8 <HAL_DMA_Start_IT+0x20>
 80037f4:	2302      	movs	r3, #2
 80037f6:	e066      	b.n	80038c6 <HAL_DMA_Start_IT+0xee>
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2201      	movs	r2, #1
 80037fc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003806:	b2db      	uxtb	r3, r3
 8003808:	2b01      	cmp	r3, #1
 800380a:	d155      	bne.n	80038b8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2202      	movs	r2, #2
 8003810:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2200      	movs	r2, #0
 8003818:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f022 0201 	bic.w	r2, r2, #1
 8003828:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	687a      	ldr	r2, [r7, #4]
 800382e:	68b9      	ldr	r1, [r7, #8]
 8003830:	68f8      	ldr	r0, [r7, #12]
 8003832:	f000 f9b9 	bl	8003ba8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800383a:	2b00      	cmp	r3, #0
 800383c:	d008      	beq.n	8003850 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f042 020e 	orr.w	r2, r2, #14
 800384c:	601a      	str	r2, [r3, #0]
 800384e:	e00f      	b.n	8003870 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f022 0204 	bic.w	r2, r2, #4
 800385e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f042 020a 	orr.w	r2, r2, #10
 800386e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800387a:	2b00      	cmp	r3, #0
 800387c:	d007      	beq.n	800388e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003888:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800388c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003892:	2b00      	cmp	r3, #0
 8003894:	d007      	beq.n	80038a6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038a0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80038a4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f042 0201 	orr.w	r2, r2, #1
 80038b4:	601a      	str	r2, [r3, #0]
 80038b6:	e005      	b.n	80038c4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2200      	movs	r2, #0
 80038bc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80038c0:	2302      	movs	r3, #2
 80038c2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80038c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3718      	adds	r7, #24
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}

080038ce <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80038ce:	b480      	push	{r7}
 80038d0:	b083      	sub	sp, #12
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d101      	bne.n	80038e0 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	e04f      	b.n	8003980 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	2b02      	cmp	r3, #2
 80038ea:	d008      	beq.n	80038fe <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2204      	movs	r2, #4
 80038f0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2200      	movs	r2, #0
 80038f6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e040      	b.n	8003980 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f022 020e 	bic.w	r2, r2, #14
 800390c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003918:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800391c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f022 0201 	bic.w	r2, r2, #1
 800392c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003932:	f003 021c 	and.w	r2, r3, #28
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800393a:	2101      	movs	r1, #1
 800393c:	fa01 f202 	lsl.w	r2, r1, r2
 8003940:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800394a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003950:	2b00      	cmp	r3, #0
 8003952:	d00c      	beq.n	800396e <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800395e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003962:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003968:	687a      	ldr	r2, [r7, #4]
 800396a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800396c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2201      	movs	r2, #1
 8003972:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2200      	movs	r2, #0
 800397a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 800397e:	2300      	movs	r3, #0
}
 8003980:	4618      	mov	r0, r3
 8003982:	370c      	adds	r7, #12
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr

0800398c <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b084      	sub	sp, #16
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003994:	2300      	movs	r3, #0
 8003996:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	2b02      	cmp	r3, #2
 80039a2:	d005      	beq.n	80039b0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2204      	movs	r2, #4
 80039a8:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	73fb      	strb	r3, [r7, #15]
 80039ae:	e047      	b.n	8003a40 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f022 020e 	bic.w	r2, r2, #14
 80039be:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f022 0201 	bic.w	r2, r2, #1
 80039ce:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039da:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80039de:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039e4:	f003 021c 	and.w	r2, r3, #28
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ec:	2101      	movs	r1, #1
 80039ee:	fa01 f202 	lsl.w	r2, r1, r2
 80039f2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039f8:	687a      	ldr	r2, [r7, #4]
 80039fa:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80039fc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d00c      	beq.n	8003a20 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a10:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003a14:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a1a:	687a      	ldr	r2, [r7, #4]
 8003a1c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003a1e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2201      	movs	r2, #1
 8003a24:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d003      	beq.n	8003a40 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	4798      	blx	r3
    }
  }
  return status;
 8003a40:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3710      	adds	r7, #16
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}

08003a4a <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003a4a:	b580      	push	{r7, lr}
 8003a4c:	b084      	sub	sp, #16
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a66:	f003 031c 	and.w	r3, r3, #28
 8003a6a:	2204      	movs	r2, #4
 8003a6c:	409a      	lsls	r2, r3
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	4013      	ands	r3, r2
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d026      	beq.n	8003ac4 <HAL_DMA_IRQHandler+0x7a>
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	f003 0304 	and.w	r3, r3, #4
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d021      	beq.n	8003ac4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 0320 	and.w	r3, r3, #32
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d107      	bne.n	8003a9e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f022 0204 	bic.w	r2, r2, #4
 8003a9c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003aa2:	f003 021c 	and.w	r2, r3, #28
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aaa:	2104      	movs	r1, #4
 8003aac:	fa01 f202 	lsl.w	r2, r1, r2
 8003ab0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d071      	beq.n	8003b9e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003ac2:	e06c      	b.n	8003b9e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ac8:	f003 031c 	and.w	r3, r3, #28
 8003acc:	2202      	movs	r2, #2
 8003ace:	409a      	lsls	r2, r3
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d02e      	beq.n	8003b36 <HAL_DMA_IRQHandler+0xec>
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	f003 0302 	and.w	r3, r3, #2
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d029      	beq.n	8003b36 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f003 0320 	and.w	r3, r3, #32
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d10b      	bne.n	8003b08 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f022 020a 	bic.w	r2, r2, #10
 8003afe:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2201      	movs	r2, #1
 8003b04:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b0c:	f003 021c 	and.w	r2, r3, #28
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b14:	2102      	movs	r1, #2
 8003b16:	fa01 f202 	lsl.w	r2, r1, r2
 8003b1a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d038      	beq.n	8003b9e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b30:	6878      	ldr	r0, [r7, #4]
 8003b32:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003b34:	e033      	b.n	8003b9e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b3a:	f003 031c 	and.w	r3, r3, #28
 8003b3e:	2208      	movs	r2, #8
 8003b40:	409a      	lsls	r2, r3
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	4013      	ands	r3, r2
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d02a      	beq.n	8003ba0 <HAL_DMA_IRQHandler+0x156>
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	f003 0308 	and.w	r3, r3, #8
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d025      	beq.n	8003ba0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f022 020e 	bic.w	r2, r2, #14
 8003b62:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b68:	f003 021c 	and.w	r2, r3, #28
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b70:	2101      	movs	r1, #1
 8003b72:	fa01 f202 	lsl.w	r2, r1, r2
 8003b76:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2201      	movs	r2, #1
 8003b82:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d004      	beq.n	8003ba0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003b9e:	bf00      	nop
 8003ba0:	bf00      	nop
}
 8003ba2:	3710      	adds	r7, #16
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}

08003ba8 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b085      	sub	sp, #20
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	60f8      	str	r0, [r7, #12]
 8003bb0:	60b9      	str	r1, [r7, #8]
 8003bb2:	607a      	str	r2, [r7, #4]
 8003bb4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bba:	68fa      	ldr	r2, [r7, #12]
 8003bbc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003bbe:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d004      	beq.n	8003bd2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bcc:	68fa      	ldr	r2, [r7, #12]
 8003bce:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003bd0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bd6:	f003 021c 	and.w	r2, r3, #28
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bde:	2101      	movs	r1, #1
 8003be0:	fa01 f202 	lsl.w	r2, r1, r2
 8003be4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	683a      	ldr	r2, [r7, #0]
 8003bec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	2b10      	cmp	r3, #16
 8003bf4:	d108      	bne.n	8003c08 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	687a      	ldr	r2, [r7, #4]
 8003bfc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	68ba      	ldr	r2, [r7, #8]
 8003c04:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003c06:	e007      	b.n	8003c18 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	68ba      	ldr	r2, [r7, #8]
 8003c0e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	687a      	ldr	r2, [r7, #4]
 8003c16:	60da      	str	r2, [r3, #12]
}
 8003c18:	bf00      	nop
 8003c1a:	3714      	adds	r7, #20
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr

08003c24 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b085      	sub	sp, #20
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	461a      	mov	r2, r3
 8003c32:	4b17      	ldr	r3, [pc, #92]	@ (8003c90 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d80a      	bhi.n	8003c4e <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c3c:	089b      	lsrs	r3, r3, #2
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003c44:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	6493      	str	r3, [r2, #72]	@ 0x48
 8003c4c:	e007      	b.n	8003c5e <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c52:	089b      	lsrs	r3, r3, #2
 8003c54:	009a      	lsls	r2, r3, #2
 8003c56:	4b0f      	ldr	r3, [pc, #60]	@ (8003c94 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003c58:	4413      	add	r3, r2
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	6493      	str	r3, [r2, #72]	@ 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	b2db      	uxtb	r3, r3
 8003c64:	3b08      	subs	r3, #8
 8003c66:	4a0c      	ldr	r2, [pc, #48]	@ (8003c98 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003c68:	fba2 2303 	umull	r2, r3, r2, r3
 8003c6c:	091b      	lsrs	r3, r3, #4
 8003c6e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	4a0a      	ldr	r2, [pc, #40]	@ (8003c9c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003c74:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	f003 031f 	and.w	r3, r3, #31
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	409a      	lsls	r2, r3
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003c84:	bf00      	nop
 8003c86:	3714      	adds	r7, #20
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr
 8003c90:	40020407 	.word	0x40020407
 8003c94:	4002081c 	.word	0x4002081c
 8003c98:	cccccccd 	.word	0xcccccccd
 8003c9c:	40020880 	.word	0x40020880

08003ca0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b085      	sub	sp, #20
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003cb0:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003cb2:	68fa      	ldr	r2, [r7, #12]
 8003cb4:	4b0b      	ldr	r3, [pc, #44]	@ (8003ce4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003cb6:	4413      	add	r3, r2
 8003cb8:	009b      	lsls	r3, r3, #2
 8003cba:	461a      	mov	r2, r3
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	4a09      	ldr	r2, [pc, #36]	@ (8003ce8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8003cc4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	3b01      	subs	r3, #1
 8003cca:	f003 0303 	and.w	r3, r3, #3
 8003cce:	2201      	movs	r2, #1
 8003cd0:	409a      	lsls	r2, r3
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8003cd6:	bf00      	nop
 8003cd8:	3714      	adds	r7, #20
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce0:	4770      	bx	lr
 8003ce2:	bf00      	nop
 8003ce4:	1000823f 	.word	0x1000823f
 8003ce8:	40020940 	.word	0x40020940

08003cec <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b087      	sub	sp, #28
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
 8003cf4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003cfa:	e14c      	b.n	8003f96 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	2101      	movs	r1, #1
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	fa01 f303 	lsl.w	r3, r1, r3
 8003d08:	4013      	ands	r3, r2
 8003d0a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	f000 813e 	beq.w	8003f90 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	f003 0303 	and.w	r3, r3, #3
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d005      	beq.n	8003d2c <HAL_GPIO_Init+0x40>
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	f003 0303 	and.w	r3, r3, #3
 8003d28:	2b02      	cmp	r3, #2
 8003d2a:	d130      	bne.n	8003d8e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	005b      	lsls	r3, r3, #1
 8003d36:	2203      	movs	r2, #3
 8003d38:	fa02 f303 	lsl.w	r3, r2, r3
 8003d3c:	43db      	mvns	r3, r3
 8003d3e:	693a      	ldr	r2, [r7, #16]
 8003d40:	4013      	ands	r3, r2
 8003d42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	68da      	ldr	r2, [r3, #12]
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	005b      	lsls	r3, r3, #1
 8003d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d50:	693a      	ldr	r2, [r7, #16]
 8003d52:	4313      	orrs	r3, r2
 8003d54:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	693a      	ldr	r2, [r7, #16]
 8003d5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003d62:	2201      	movs	r2, #1
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	fa02 f303 	lsl.w	r3, r2, r3
 8003d6a:	43db      	mvns	r3, r3
 8003d6c:	693a      	ldr	r2, [r7, #16]
 8003d6e:	4013      	ands	r3, r2
 8003d70:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	091b      	lsrs	r3, r3, #4
 8003d78:	f003 0201 	and.w	r2, r3, #1
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d82:	693a      	ldr	r2, [r7, #16]
 8003d84:	4313      	orrs	r3, r2
 8003d86:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	693a      	ldr	r2, [r7, #16]
 8003d8c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	f003 0303 	and.w	r3, r3, #3
 8003d96:	2b03      	cmp	r3, #3
 8003d98:	d017      	beq.n	8003dca <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	68db      	ldr	r3, [r3, #12]
 8003d9e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	005b      	lsls	r3, r3, #1
 8003da4:	2203      	movs	r2, #3
 8003da6:	fa02 f303 	lsl.w	r3, r2, r3
 8003daa:	43db      	mvns	r3, r3
 8003dac:	693a      	ldr	r2, [r7, #16]
 8003dae:	4013      	ands	r3, r2
 8003db0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	689a      	ldr	r2, [r3, #8]
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	005b      	lsls	r3, r3, #1
 8003dba:	fa02 f303 	lsl.w	r3, r2, r3
 8003dbe:	693a      	ldr	r2, [r7, #16]
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	693a      	ldr	r2, [r7, #16]
 8003dc8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	f003 0303 	and.w	r3, r3, #3
 8003dd2:	2b02      	cmp	r3, #2
 8003dd4:	d123      	bne.n	8003e1e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	08da      	lsrs	r2, r3, #3
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	3208      	adds	r2, #8
 8003dde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003de2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	f003 0307 	and.w	r3, r3, #7
 8003dea:	009b      	lsls	r3, r3, #2
 8003dec:	220f      	movs	r2, #15
 8003dee:	fa02 f303 	lsl.w	r3, r2, r3
 8003df2:	43db      	mvns	r3, r3
 8003df4:	693a      	ldr	r2, [r7, #16]
 8003df6:	4013      	ands	r3, r2
 8003df8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	691a      	ldr	r2, [r3, #16]
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	f003 0307 	and.w	r3, r3, #7
 8003e04:	009b      	lsls	r3, r3, #2
 8003e06:	fa02 f303 	lsl.w	r3, r2, r3
 8003e0a:	693a      	ldr	r2, [r7, #16]
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	08da      	lsrs	r2, r3, #3
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	3208      	adds	r2, #8
 8003e18:	6939      	ldr	r1, [r7, #16]
 8003e1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	005b      	lsls	r3, r3, #1
 8003e28:	2203      	movs	r2, #3
 8003e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e2e:	43db      	mvns	r3, r3
 8003e30:	693a      	ldr	r2, [r7, #16]
 8003e32:	4013      	ands	r3, r2
 8003e34:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	f003 0203 	and.w	r2, r3, #3
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	005b      	lsls	r3, r3, #1
 8003e42:	fa02 f303 	lsl.w	r3, r2, r3
 8003e46:	693a      	ldr	r2, [r7, #16]
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	693a      	ldr	r2, [r7, #16]
 8003e50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	f000 8098 	beq.w	8003f90 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8003e60:	4a54      	ldr	r2, [pc, #336]	@ (8003fb4 <HAL_GPIO_Init+0x2c8>)
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	089b      	lsrs	r3, r3, #2
 8003e66:	3302      	adds	r3, #2
 8003e68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e6c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	f003 0303 	and.w	r3, r3, #3
 8003e74:	009b      	lsls	r3, r3, #2
 8003e76:	220f      	movs	r2, #15
 8003e78:	fa02 f303 	lsl.w	r3, r2, r3
 8003e7c:	43db      	mvns	r3, r3
 8003e7e:	693a      	ldr	r2, [r7, #16]
 8003e80:	4013      	ands	r3, r2
 8003e82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003e8a:	d019      	beq.n	8003ec0 <HAL_GPIO_Init+0x1d4>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	4a4a      	ldr	r2, [pc, #296]	@ (8003fb8 <HAL_GPIO_Init+0x2cc>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d013      	beq.n	8003ebc <HAL_GPIO_Init+0x1d0>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	4a49      	ldr	r2, [pc, #292]	@ (8003fbc <HAL_GPIO_Init+0x2d0>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d00d      	beq.n	8003eb8 <HAL_GPIO_Init+0x1cc>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	4a48      	ldr	r2, [pc, #288]	@ (8003fc0 <HAL_GPIO_Init+0x2d4>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d007      	beq.n	8003eb4 <HAL_GPIO_Init+0x1c8>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	4a47      	ldr	r2, [pc, #284]	@ (8003fc4 <HAL_GPIO_Init+0x2d8>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d101      	bne.n	8003eb0 <HAL_GPIO_Init+0x1c4>
 8003eac:	2304      	movs	r3, #4
 8003eae:	e008      	b.n	8003ec2 <HAL_GPIO_Init+0x1d6>
 8003eb0:	2307      	movs	r3, #7
 8003eb2:	e006      	b.n	8003ec2 <HAL_GPIO_Init+0x1d6>
 8003eb4:	2303      	movs	r3, #3
 8003eb6:	e004      	b.n	8003ec2 <HAL_GPIO_Init+0x1d6>
 8003eb8:	2302      	movs	r3, #2
 8003eba:	e002      	b.n	8003ec2 <HAL_GPIO_Init+0x1d6>
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	e000      	b.n	8003ec2 <HAL_GPIO_Init+0x1d6>
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	697a      	ldr	r2, [r7, #20]
 8003ec4:	f002 0203 	and.w	r2, r2, #3
 8003ec8:	0092      	lsls	r2, r2, #2
 8003eca:	4093      	lsls	r3, r2
 8003ecc:	693a      	ldr	r2, [r7, #16]
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003ed2:	4938      	ldr	r1, [pc, #224]	@ (8003fb4 <HAL_GPIO_Init+0x2c8>)
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	089b      	lsrs	r3, r3, #2
 8003ed8:	3302      	adds	r3, #2
 8003eda:	693a      	ldr	r2, [r7, #16]
 8003edc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003ee0:	4b39      	ldr	r3, [pc, #228]	@ (8003fc8 <HAL_GPIO_Init+0x2dc>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	43db      	mvns	r3, r3
 8003eea:	693a      	ldr	r2, [r7, #16]
 8003eec:	4013      	ands	r3, r2
 8003eee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d003      	beq.n	8003f04 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003efc:	693a      	ldr	r2, [r7, #16]
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	4313      	orrs	r3, r2
 8003f02:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003f04:	4a30      	ldr	r2, [pc, #192]	@ (8003fc8 <HAL_GPIO_Init+0x2dc>)
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003f0a:	4b2f      	ldr	r3, [pc, #188]	@ (8003fc8 <HAL_GPIO_Init+0x2dc>)
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	43db      	mvns	r3, r3
 8003f14:	693a      	ldr	r2, [r7, #16]
 8003f16:	4013      	ands	r3, r2
 8003f18:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d003      	beq.n	8003f2e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8003f26:	693a      	ldr	r2, [r7, #16]
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003f2e:	4a26      	ldr	r2, [pc, #152]	@ (8003fc8 <HAL_GPIO_Init+0x2dc>)
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003f34:	4b24      	ldr	r3, [pc, #144]	@ (8003fc8 <HAL_GPIO_Init+0x2dc>)
 8003f36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003f3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	43db      	mvns	r3, r3
 8003f40:	693a      	ldr	r2, [r7, #16]
 8003f42:	4013      	ands	r3, r2
 8003f44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d003      	beq.n	8003f5a <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8003f52:	693a      	ldr	r2, [r7, #16]
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	4313      	orrs	r3, r2
 8003f58:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003f5a:	4a1b      	ldr	r2, [pc, #108]	@ (8003fc8 <HAL_GPIO_Init+0x2dc>)
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 8003f62:	4b19      	ldr	r3, [pc, #100]	@ (8003fc8 <HAL_GPIO_Init+0x2dc>)
 8003f64:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	43db      	mvns	r3, r3
 8003f6e:	693a      	ldr	r2, [r7, #16]
 8003f70:	4013      	ands	r3, r2
 8003f72:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d003      	beq.n	8003f88 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8003f80:	693a      	ldr	r2, [r7, #16]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	4313      	orrs	r3, r2
 8003f86:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003f88:	4a0f      	ldr	r2, [pc, #60]	@ (8003fc8 <HAL_GPIO_Init+0x2dc>)
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	3301      	adds	r3, #1
 8003f94:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	fa22 f303 	lsr.w	r3, r2, r3
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	f47f aeab 	bne.w	8003cfc <HAL_GPIO_Init+0x10>
  }
}
 8003fa6:	bf00      	nop
 8003fa8:	bf00      	nop
 8003faa:	371c      	adds	r7, #28
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr
 8003fb4:	40010000 	.word	0x40010000
 8003fb8:	48000400 	.word	0x48000400
 8003fbc:	48000800 	.word	0x48000800
 8003fc0:	48000c00 	.word	0x48000c00
 8003fc4:	48001000 	.word	0x48001000
 8003fc8:	58000800 	.word	0x58000800

08003fcc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b083      	sub	sp, #12
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
 8003fd4:	460b      	mov	r3, r1
 8003fd6:	807b      	strh	r3, [r7, #2]
 8003fd8:	4613      	mov	r3, r2
 8003fda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003fdc:	787b      	ldrb	r3, [r7, #1]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d003      	beq.n	8003fea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003fe2:	887a      	ldrh	r2, [r7, #2]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003fe8:	e002      	b.n	8003ff0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003fea:	887a      	ldrh	r2, [r7, #2]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003ff0:	bf00      	nop
 8003ff2:	370c      	adds	r7, #12
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr

08003ffc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b082      	sub	sp, #8
 8004000:	af00      	add	r7, sp, #0
 8004002:	4603      	mov	r3, r0
 8004004:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004006:	4b08      	ldr	r3, [pc, #32]	@ (8004028 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004008:	68da      	ldr	r2, [r3, #12]
 800400a:	88fb      	ldrh	r3, [r7, #6]
 800400c:	4013      	ands	r3, r2
 800400e:	2b00      	cmp	r3, #0
 8004010:	d006      	beq.n	8004020 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004012:	4a05      	ldr	r2, [pc, #20]	@ (8004028 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004014:	88fb      	ldrh	r3, [r7, #6]
 8004016:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004018:	88fb      	ldrh	r3, [r7, #6]
 800401a:	4618      	mov	r0, r3
 800401c:	f7fd fa9d 	bl	800155a <HAL_GPIO_EXTI_Callback>
  }
}
 8004020:	bf00      	nop
 8004022:	3708      	adds	r7, #8
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}
 8004028:	58000800 	.word	0x58000800

0800402c <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b082      	sub	sp, #8
 8004030:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8004032:	4b0a      	ldr	r3, [pc, #40]	@ (800405c <HAL_HSEM_IRQHandler+0x30>)
 8004034:	68db      	ldr	r3, [r3, #12]
 8004036:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8004038:	4b08      	ldr	r3, [pc, #32]	@ (800405c <HAL_HSEM_IRQHandler+0x30>)
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	43db      	mvns	r3, r3
 8004040:	4906      	ldr	r1, [pc, #24]	@ (800405c <HAL_HSEM_IRQHandler+0x30>)
 8004042:	4013      	ands	r3, r2
 8004044:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8004046:	4a05      	ldr	r2, [pc, #20]	@ (800405c <HAL_HSEM_IRQHandler+0x30>)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 800404c:	6878      	ldr	r0, [r7, #4]
 800404e:	f000 f807 	bl	8004060 <HAL_HSEM_FreeCallback>
}
 8004052:	bf00      	nop
 8004054:	3708      	adds	r7, #8
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}
 800405a:	bf00      	nop
 800405c:	58001500 	.word	0x58001500

08004060 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8004060:	b480      	push	{r7}
 8004062:	b083      	sub	sp, #12
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8004068:	bf00      	nop
 800406a:	370c      	adds	r7, #12
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr

08004074 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b082      	sub	sp, #8
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d101      	bne.n	8004086 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e08d      	b.n	80041a2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800408c:	b2db      	uxtb	r3, r3
 800408e:	2b00      	cmp	r3, #0
 8004090:	d106      	bne.n	80040a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2200      	movs	r2, #0
 8004096:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f000 f885 	bl	80041aa <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2224      	movs	r2, #36	@ 0x24
 80040a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f022 0201 	bic.w	r2, r2, #1
 80040b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	685a      	ldr	r2, [r3, #4]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80040c4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	689a      	ldr	r2, [r3, #8]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80040d4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	68db      	ldr	r3, [r3, #12]
 80040da:	2b01      	cmp	r3, #1
 80040dc:	d107      	bne.n	80040ee <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	689a      	ldr	r2, [r3, #8]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80040ea:	609a      	str	r2, [r3, #8]
 80040ec:	e006      	b.n	80040fc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	689a      	ldr	r2, [r3, #8]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80040fa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	68db      	ldr	r3, [r3, #12]
 8004100:	2b02      	cmp	r3, #2
 8004102:	d108      	bne.n	8004116 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	685a      	ldr	r2, [r3, #4]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004112:	605a      	str	r2, [r3, #4]
 8004114:	e007      	b.n	8004126 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	685a      	ldr	r2, [r3, #4]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004124:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	687a      	ldr	r2, [r7, #4]
 800412e:	6812      	ldr	r2, [r2, #0]
 8004130:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004134:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004138:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	68da      	ldr	r2, [r3, #12]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004148:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	691a      	ldr	r2, [r3, #16]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	695b      	ldr	r3, [r3, #20]
 8004152:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	699b      	ldr	r3, [r3, #24]
 800415a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	430a      	orrs	r2, r1
 8004162:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	69d9      	ldr	r1, [r3, #28]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6a1a      	ldr	r2, [r3, #32]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	430a      	orrs	r2, r1
 8004172:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f042 0201 	orr.w	r2, r2, #1
 8004182:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2200      	movs	r2, #0
 8004188:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2220      	movs	r2, #32
 800418e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2200      	movs	r2, #0
 8004196:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2200      	movs	r2, #0
 800419c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80041a0:	2300      	movs	r3, #0
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3708      	adds	r7, #8
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}

080041aa <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 80041aa:	b480      	push	{r7}
 80041ac:	b083      	sub	sp, #12
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 80041b2:	bf00      	nop
 80041b4:	370c      	adds	r7, #12
 80041b6:	46bd      	mov	sp, r7
 80041b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041bc:	4770      	bx	lr
	...

080041c0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b088      	sub	sp, #32
 80041c4:	af02      	add	r7, sp, #8
 80041c6:	60f8      	str	r0, [r7, #12]
 80041c8:	4608      	mov	r0, r1
 80041ca:	4611      	mov	r1, r2
 80041cc:	461a      	mov	r2, r3
 80041ce:	4603      	mov	r3, r0
 80041d0:	817b      	strh	r3, [r7, #10]
 80041d2:	460b      	mov	r3, r1
 80041d4:	813b      	strh	r3, [r7, #8]
 80041d6:	4613      	mov	r3, r2
 80041d8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	2b20      	cmp	r3, #32
 80041e4:	f040 80f9 	bne.w	80043da <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80041e8:	6a3b      	ldr	r3, [r7, #32]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d002      	beq.n	80041f4 <HAL_I2C_Mem_Write+0x34>
 80041ee:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d105      	bne.n	8004200 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80041fa:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	e0ed      	b.n	80043dc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004206:	2b01      	cmp	r3, #1
 8004208:	d101      	bne.n	800420e <HAL_I2C_Mem_Write+0x4e>
 800420a:	2302      	movs	r3, #2
 800420c:	e0e6      	b.n	80043dc <HAL_I2C_Mem_Write+0x21c>
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2201      	movs	r2, #1
 8004212:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004216:	f7ff f879 	bl	800330c <HAL_GetTick>
 800421a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	9300      	str	r3, [sp, #0]
 8004220:	2319      	movs	r3, #25
 8004222:	2201      	movs	r2, #1
 8004224:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004228:	68f8      	ldr	r0, [r7, #12]
 800422a:	f000 fac3 	bl	80047b4 <I2C_WaitOnFlagUntilTimeout>
 800422e:	4603      	mov	r3, r0
 8004230:	2b00      	cmp	r3, #0
 8004232:	d001      	beq.n	8004238 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004234:	2301      	movs	r3, #1
 8004236:	e0d1      	b.n	80043dc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2221      	movs	r2, #33	@ 0x21
 800423c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2240      	movs	r2, #64	@ 0x40
 8004244:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2200      	movs	r2, #0
 800424c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	6a3a      	ldr	r2, [r7, #32]
 8004252:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004258:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2200      	movs	r2, #0
 800425e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004260:	88f8      	ldrh	r0, [r7, #6]
 8004262:	893a      	ldrh	r2, [r7, #8]
 8004264:	8979      	ldrh	r1, [r7, #10]
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	9301      	str	r3, [sp, #4]
 800426a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800426c:	9300      	str	r3, [sp, #0]
 800426e:	4603      	mov	r3, r0
 8004270:	68f8      	ldr	r0, [r7, #12]
 8004272:	f000 f9d3 	bl	800461c <I2C_RequestMemoryWrite>
 8004276:	4603      	mov	r3, r0
 8004278:	2b00      	cmp	r3, #0
 800427a:	d005      	beq.n	8004288 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2200      	movs	r2, #0
 8004280:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	e0a9      	b.n	80043dc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800428c:	b29b      	uxth	r3, r3
 800428e:	2bff      	cmp	r3, #255	@ 0xff
 8004290:	d90e      	bls.n	80042b0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	22ff      	movs	r2, #255	@ 0xff
 8004296:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800429c:	b2da      	uxtb	r2, r3
 800429e:	8979      	ldrh	r1, [r7, #10]
 80042a0:	2300      	movs	r3, #0
 80042a2:	9300      	str	r3, [sp, #0]
 80042a4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80042a8:	68f8      	ldr	r0, [r7, #12]
 80042aa:	f000 fc47 	bl	8004b3c <I2C_TransferConfig>
 80042ae:	e00f      	b.n	80042d0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042b4:	b29a      	uxth	r2, r3
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042be:	b2da      	uxtb	r2, r3
 80042c0:	8979      	ldrh	r1, [r7, #10]
 80042c2:	2300      	movs	r3, #0
 80042c4:	9300      	str	r3, [sp, #0]
 80042c6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80042ca:	68f8      	ldr	r0, [r7, #12]
 80042cc:	f000 fc36 	bl	8004b3c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042d0:	697a      	ldr	r2, [r7, #20]
 80042d2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80042d4:	68f8      	ldr	r0, [r7, #12]
 80042d6:	f000 fac6 	bl	8004866 <I2C_WaitOnTXISFlagUntilTimeout>
 80042da:	4603      	mov	r3, r0
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d001      	beq.n	80042e4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	e07b      	b.n	80043dc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042e8:	781a      	ldrb	r2, [r3, #0]
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042f4:	1c5a      	adds	r2, r3, #1
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042fe:	b29b      	uxth	r3, r3
 8004300:	3b01      	subs	r3, #1
 8004302:	b29a      	uxth	r2, r3
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800430c:	3b01      	subs	r3, #1
 800430e:	b29a      	uxth	r2, r3
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004318:	b29b      	uxth	r3, r3
 800431a:	2b00      	cmp	r3, #0
 800431c:	d034      	beq.n	8004388 <HAL_I2C_Mem_Write+0x1c8>
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004322:	2b00      	cmp	r3, #0
 8004324:	d130      	bne.n	8004388 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	9300      	str	r3, [sp, #0]
 800432a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800432c:	2200      	movs	r2, #0
 800432e:	2180      	movs	r1, #128	@ 0x80
 8004330:	68f8      	ldr	r0, [r7, #12]
 8004332:	f000 fa3f 	bl	80047b4 <I2C_WaitOnFlagUntilTimeout>
 8004336:	4603      	mov	r3, r0
 8004338:	2b00      	cmp	r3, #0
 800433a:	d001      	beq.n	8004340 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	e04d      	b.n	80043dc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004344:	b29b      	uxth	r3, r3
 8004346:	2bff      	cmp	r3, #255	@ 0xff
 8004348:	d90e      	bls.n	8004368 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	22ff      	movs	r2, #255	@ 0xff
 800434e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004354:	b2da      	uxtb	r2, r3
 8004356:	8979      	ldrh	r1, [r7, #10]
 8004358:	2300      	movs	r3, #0
 800435a:	9300      	str	r3, [sp, #0]
 800435c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004360:	68f8      	ldr	r0, [r7, #12]
 8004362:	f000 fbeb 	bl	8004b3c <I2C_TransferConfig>
 8004366:	e00f      	b.n	8004388 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800436c:	b29a      	uxth	r2, r3
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004376:	b2da      	uxtb	r2, r3
 8004378:	8979      	ldrh	r1, [r7, #10]
 800437a:	2300      	movs	r3, #0
 800437c:	9300      	str	r3, [sp, #0]
 800437e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004382:	68f8      	ldr	r0, [r7, #12]
 8004384:	f000 fbda 	bl	8004b3c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800438c:	b29b      	uxth	r3, r3
 800438e:	2b00      	cmp	r3, #0
 8004390:	d19e      	bne.n	80042d0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004392:	697a      	ldr	r2, [r7, #20]
 8004394:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004396:	68f8      	ldr	r0, [r7, #12]
 8004398:	f000 faac 	bl	80048f4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800439c:	4603      	mov	r3, r0
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d001      	beq.n	80043a6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e01a      	b.n	80043dc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	2220      	movs	r2, #32
 80043ac:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	6859      	ldr	r1, [r3, #4]
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681a      	ldr	r2, [r3, #0]
 80043b8:	4b0a      	ldr	r3, [pc, #40]	@ (80043e4 <HAL_I2C_Mem_Write+0x224>)
 80043ba:	400b      	ands	r3, r1
 80043bc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2220      	movs	r2, #32
 80043c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2200      	movs	r2, #0
 80043ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2200      	movs	r2, #0
 80043d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80043d6:	2300      	movs	r3, #0
 80043d8:	e000      	b.n	80043dc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80043da:	2302      	movs	r3, #2
  }
}
 80043dc:	4618      	mov	r0, r3
 80043de:	3718      	adds	r7, #24
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}
 80043e4:	fe00e800 	.word	0xfe00e800

080043e8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b088      	sub	sp, #32
 80043ec:	af02      	add	r7, sp, #8
 80043ee:	60f8      	str	r0, [r7, #12]
 80043f0:	4608      	mov	r0, r1
 80043f2:	4611      	mov	r1, r2
 80043f4:	461a      	mov	r2, r3
 80043f6:	4603      	mov	r3, r0
 80043f8:	817b      	strh	r3, [r7, #10]
 80043fa:	460b      	mov	r3, r1
 80043fc:	813b      	strh	r3, [r7, #8]
 80043fe:	4613      	mov	r3, r2
 8004400:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004408:	b2db      	uxtb	r3, r3
 800440a:	2b20      	cmp	r3, #32
 800440c:	f040 80fd 	bne.w	800460a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004410:	6a3b      	ldr	r3, [r7, #32]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d002      	beq.n	800441c <HAL_I2C_Mem_Read+0x34>
 8004416:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004418:	2b00      	cmp	r3, #0
 800441a:	d105      	bne.n	8004428 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004422:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	e0f1      	b.n	800460c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800442e:	2b01      	cmp	r3, #1
 8004430:	d101      	bne.n	8004436 <HAL_I2C_Mem_Read+0x4e>
 8004432:	2302      	movs	r3, #2
 8004434:	e0ea      	b.n	800460c <HAL_I2C_Mem_Read+0x224>
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2201      	movs	r2, #1
 800443a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800443e:	f7fe ff65 	bl	800330c <HAL_GetTick>
 8004442:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	9300      	str	r3, [sp, #0]
 8004448:	2319      	movs	r3, #25
 800444a:	2201      	movs	r2, #1
 800444c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004450:	68f8      	ldr	r0, [r7, #12]
 8004452:	f000 f9af 	bl	80047b4 <I2C_WaitOnFlagUntilTimeout>
 8004456:	4603      	mov	r3, r0
 8004458:	2b00      	cmp	r3, #0
 800445a:	d001      	beq.n	8004460 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	e0d5      	b.n	800460c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2222      	movs	r2, #34	@ 0x22
 8004464:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2240      	movs	r2, #64	@ 0x40
 800446c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2200      	movs	r2, #0
 8004474:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	6a3a      	ldr	r2, [r7, #32]
 800447a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004480:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2200      	movs	r2, #0
 8004486:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004488:	88f8      	ldrh	r0, [r7, #6]
 800448a:	893a      	ldrh	r2, [r7, #8]
 800448c:	8979      	ldrh	r1, [r7, #10]
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	9301      	str	r3, [sp, #4]
 8004492:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004494:	9300      	str	r3, [sp, #0]
 8004496:	4603      	mov	r3, r0
 8004498:	68f8      	ldr	r0, [r7, #12]
 800449a:	f000 f913 	bl	80046c4 <I2C_RequestMemoryRead>
 800449e:	4603      	mov	r3, r0
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d005      	beq.n	80044b0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2200      	movs	r2, #0
 80044a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	e0ad      	b.n	800460c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044b4:	b29b      	uxth	r3, r3
 80044b6:	2bff      	cmp	r3, #255	@ 0xff
 80044b8:	d90e      	bls.n	80044d8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	22ff      	movs	r2, #255	@ 0xff
 80044be:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044c4:	b2da      	uxtb	r2, r3
 80044c6:	8979      	ldrh	r1, [r7, #10]
 80044c8:	4b52      	ldr	r3, [pc, #328]	@ (8004614 <HAL_I2C_Mem_Read+0x22c>)
 80044ca:	9300      	str	r3, [sp, #0]
 80044cc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80044d0:	68f8      	ldr	r0, [r7, #12]
 80044d2:	f000 fb33 	bl	8004b3c <I2C_TransferConfig>
 80044d6:	e00f      	b.n	80044f8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044dc:	b29a      	uxth	r2, r3
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044e6:	b2da      	uxtb	r2, r3
 80044e8:	8979      	ldrh	r1, [r7, #10]
 80044ea:	4b4a      	ldr	r3, [pc, #296]	@ (8004614 <HAL_I2C_Mem_Read+0x22c>)
 80044ec:	9300      	str	r3, [sp, #0]
 80044ee:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80044f2:	68f8      	ldr	r0, [r7, #12]
 80044f4:	f000 fb22 	bl	8004b3c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	9300      	str	r3, [sp, #0]
 80044fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044fe:	2200      	movs	r2, #0
 8004500:	2104      	movs	r1, #4
 8004502:	68f8      	ldr	r0, [r7, #12]
 8004504:	f000 f956 	bl	80047b4 <I2C_WaitOnFlagUntilTimeout>
 8004508:	4603      	mov	r3, r0
 800450a:	2b00      	cmp	r3, #0
 800450c:	d001      	beq.n	8004512 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	e07c      	b.n	800460c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800451c:	b2d2      	uxtb	r2, r2
 800451e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004524:	1c5a      	adds	r2, r3, #1
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800452e:	3b01      	subs	r3, #1
 8004530:	b29a      	uxth	r2, r3
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800453a:	b29b      	uxth	r3, r3
 800453c:	3b01      	subs	r3, #1
 800453e:	b29a      	uxth	r2, r3
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004548:	b29b      	uxth	r3, r3
 800454a:	2b00      	cmp	r3, #0
 800454c:	d034      	beq.n	80045b8 <HAL_I2C_Mem_Read+0x1d0>
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004552:	2b00      	cmp	r3, #0
 8004554:	d130      	bne.n	80045b8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	9300      	str	r3, [sp, #0]
 800455a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800455c:	2200      	movs	r2, #0
 800455e:	2180      	movs	r1, #128	@ 0x80
 8004560:	68f8      	ldr	r0, [r7, #12]
 8004562:	f000 f927 	bl	80047b4 <I2C_WaitOnFlagUntilTimeout>
 8004566:	4603      	mov	r3, r0
 8004568:	2b00      	cmp	r3, #0
 800456a:	d001      	beq.n	8004570 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	e04d      	b.n	800460c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004574:	b29b      	uxth	r3, r3
 8004576:	2bff      	cmp	r3, #255	@ 0xff
 8004578:	d90e      	bls.n	8004598 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	22ff      	movs	r2, #255	@ 0xff
 800457e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004584:	b2da      	uxtb	r2, r3
 8004586:	8979      	ldrh	r1, [r7, #10]
 8004588:	2300      	movs	r3, #0
 800458a:	9300      	str	r3, [sp, #0]
 800458c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004590:	68f8      	ldr	r0, [r7, #12]
 8004592:	f000 fad3 	bl	8004b3c <I2C_TransferConfig>
 8004596:	e00f      	b.n	80045b8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800459c:	b29a      	uxth	r2, r3
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045a6:	b2da      	uxtb	r2, r3
 80045a8:	8979      	ldrh	r1, [r7, #10]
 80045aa:	2300      	movs	r3, #0
 80045ac:	9300      	str	r3, [sp, #0]
 80045ae:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80045b2:	68f8      	ldr	r0, [r7, #12]
 80045b4:	f000 fac2 	bl	8004b3c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045bc:	b29b      	uxth	r3, r3
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d19a      	bne.n	80044f8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045c2:	697a      	ldr	r2, [r7, #20]
 80045c4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80045c6:	68f8      	ldr	r0, [r7, #12]
 80045c8:	f000 f994 	bl	80048f4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80045cc:	4603      	mov	r3, r0
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d001      	beq.n	80045d6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	e01a      	b.n	800460c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	2220      	movs	r2, #32
 80045dc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	6859      	ldr	r1, [r3, #4]
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681a      	ldr	r2, [r3, #0]
 80045e8:	4b0b      	ldr	r3, [pc, #44]	@ (8004618 <HAL_I2C_Mem_Read+0x230>)
 80045ea:	400b      	ands	r3, r1
 80045ec:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2220      	movs	r2, #32
 80045f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2200      	movs	r2, #0
 80045fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2200      	movs	r2, #0
 8004602:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004606:	2300      	movs	r3, #0
 8004608:	e000      	b.n	800460c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800460a:	2302      	movs	r3, #2
  }
}
 800460c:	4618      	mov	r0, r3
 800460e:	3718      	adds	r7, #24
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}
 8004614:	80002400 	.word	0x80002400
 8004618:	fe00e800 	.word	0xfe00e800

0800461c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b086      	sub	sp, #24
 8004620:	af02      	add	r7, sp, #8
 8004622:	60f8      	str	r0, [r7, #12]
 8004624:	4608      	mov	r0, r1
 8004626:	4611      	mov	r1, r2
 8004628:	461a      	mov	r2, r3
 800462a:	4603      	mov	r3, r0
 800462c:	817b      	strh	r3, [r7, #10]
 800462e:	460b      	mov	r3, r1
 8004630:	813b      	strh	r3, [r7, #8]
 8004632:	4613      	mov	r3, r2
 8004634:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004636:	88fb      	ldrh	r3, [r7, #6]
 8004638:	b2da      	uxtb	r2, r3
 800463a:	8979      	ldrh	r1, [r7, #10]
 800463c:	4b20      	ldr	r3, [pc, #128]	@ (80046c0 <I2C_RequestMemoryWrite+0xa4>)
 800463e:	9300      	str	r3, [sp, #0]
 8004640:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004644:	68f8      	ldr	r0, [r7, #12]
 8004646:	f000 fa79 	bl	8004b3c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800464a:	69fa      	ldr	r2, [r7, #28]
 800464c:	69b9      	ldr	r1, [r7, #24]
 800464e:	68f8      	ldr	r0, [r7, #12]
 8004650:	f000 f909 	bl	8004866 <I2C_WaitOnTXISFlagUntilTimeout>
 8004654:	4603      	mov	r3, r0
 8004656:	2b00      	cmp	r3, #0
 8004658:	d001      	beq.n	800465e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	e02c      	b.n	80046b8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800465e:	88fb      	ldrh	r3, [r7, #6]
 8004660:	2b01      	cmp	r3, #1
 8004662:	d105      	bne.n	8004670 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004664:	893b      	ldrh	r3, [r7, #8]
 8004666:	b2da      	uxtb	r2, r3
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	629a      	str	r2, [r3, #40]	@ 0x28
 800466e:	e015      	b.n	800469c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004670:	893b      	ldrh	r3, [r7, #8]
 8004672:	0a1b      	lsrs	r3, r3, #8
 8004674:	b29b      	uxth	r3, r3
 8004676:	b2da      	uxtb	r2, r3
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800467e:	69fa      	ldr	r2, [r7, #28]
 8004680:	69b9      	ldr	r1, [r7, #24]
 8004682:	68f8      	ldr	r0, [r7, #12]
 8004684:	f000 f8ef 	bl	8004866 <I2C_WaitOnTXISFlagUntilTimeout>
 8004688:	4603      	mov	r3, r0
 800468a:	2b00      	cmp	r3, #0
 800468c:	d001      	beq.n	8004692 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	e012      	b.n	80046b8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004692:	893b      	ldrh	r3, [r7, #8]
 8004694:	b2da      	uxtb	r2, r3
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800469c:	69fb      	ldr	r3, [r7, #28]
 800469e:	9300      	str	r3, [sp, #0]
 80046a0:	69bb      	ldr	r3, [r7, #24]
 80046a2:	2200      	movs	r2, #0
 80046a4:	2180      	movs	r1, #128	@ 0x80
 80046a6:	68f8      	ldr	r0, [r7, #12]
 80046a8:	f000 f884 	bl	80047b4 <I2C_WaitOnFlagUntilTimeout>
 80046ac:	4603      	mov	r3, r0
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d001      	beq.n	80046b6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	e000      	b.n	80046b8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80046b6:	2300      	movs	r3, #0
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	3710      	adds	r7, #16
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}
 80046c0:	80002000 	.word	0x80002000

080046c4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b086      	sub	sp, #24
 80046c8:	af02      	add	r7, sp, #8
 80046ca:	60f8      	str	r0, [r7, #12]
 80046cc:	4608      	mov	r0, r1
 80046ce:	4611      	mov	r1, r2
 80046d0:	461a      	mov	r2, r3
 80046d2:	4603      	mov	r3, r0
 80046d4:	817b      	strh	r3, [r7, #10]
 80046d6:	460b      	mov	r3, r1
 80046d8:	813b      	strh	r3, [r7, #8]
 80046da:	4613      	mov	r3, r2
 80046dc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80046de:	88fb      	ldrh	r3, [r7, #6]
 80046e0:	b2da      	uxtb	r2, r3
 80046e2:	8979      	ldrh	r1, [r7, #10]
 80046e4:	4b20      	ldr	r3, [pc, #128]	@ (8004768 <I2C_RequestMemoryRead+0xa4>)
 80046e6:	9300      	str	r3, [sp, #0]
 80046e8:	2300      	movs	r3, #0
 80046ea:	68f8      	ldr	r0, [r7, #12]
 80046ec:	f000 fa26 	bl	8004b3c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80046f0:	69fa      	ldr	r2, [r7, #28]
 80046f2:	69b9      	ldr	r1, [r7, #24]
 80046f4:	68f8      	ldr	r0, [r7, #12]
 80046f6:	f000 f8b6 	bl	8004866 <I2C_WaitOnTXISFlagUntilTimeout>
 80046fa:	4603      	mov	r3, r0
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d001      	beq.n	8004704 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004700:	2301      	movs	r3, #1
 8004702:	e02c      	b.n	800475e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004704:	88fb      	ldrh	r3, [r7, #6]
 8004706:	2b01      	cmp	r3, #1
 8004708:	d105      	bne.n	8004716 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800470a:	893b      	ldrh	r3, [r7, #8]
 800470c:	b2da      	uxtb	r2, r3
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	629a      	str	r2, [r3, #40]	@ 0x28
 8004714:	e015      	b.n	8004742 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004716:	893b      	ldrh	r3, [r7, #8]
 8004718:	0a1b      	lsrs	r3, r3, #8
 800471a:	b29b      	uxth	r3, r3
 800471c:	b2da      	uxtb	r2, r3
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004724:	69fa      	ldr	r2, [r7, #28]
 8004726:	69b9      	ldr	r1, [r7, #24]
 8004728:	68f8      	ldr	r0, [r7, #12]
 800472a:	f000 f89c 	bl	8004866 <I2C_WaitOnTXISFlagUntilTimeout>
 800472e:	4603      	mov	r3, r0
 8004730:	2b00      	cmp	r3, #0
 8004732:	d001      	beq.n	8004738 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	e012      	b.n	800475e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004738:	893b      	ldrh	r3, [r7, #8]
 800473a:	b2da      	uxtb	r2, r3
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004742:	69fb      	ldr	r3, [r7, #28]
 8004744:	9300      	str	r3, [sp, #0]
 8004746:	69bb      	ldr	r3, [r7, #24]
 8004748:	2200      	movs	r2, #0
 800474a:	2140      	movs	r1, #64	@ 0x40
 800474c:	68f8      	ldr	r0, [r7, #12]
 800474e:	f000 f831 	bl	80047b4 <I2C_WaitOnFlagUntilTimeout>
 8004752:	4603      	mov	r3, r0
 8004754:	2b00      	cmp	r3, #0
 8004756:	d001      	beq.n	800475c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	e000      	b.n	800475e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800475c:	2300      	movs	r3, #0
}
 800475e:	4618      	mov	r0, r3
 8004760:	3710      	adds	r7, #16
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}
 8004766:	bf00      	nop
 8004768:	80002000 	.word	0x80002000

0800476c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800476c:	b480      	push	{r7}
 800476e:	b083      	sub	sp, #12
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	699b      	ldr	r3, [r3, #24]
 800477a:	f003 0302 	and.w	r3, r3, #2
 800477e:	2b02      	cmp	r3, #2
 8004780:	d103      	bne.n	800478a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	2200      	movs	r2, #0
 8004788:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	699b      	ldr	r3, [r3, #24]
 8004790:	f003 0301 	and.w	r3, r3, #1
 8004794:	2b01      	cmp	r3, #1
 8004796:	d007      	beq.n	80047a8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	699a      	ldr	r2, [r3, #24]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f042 0201 	orr.w	r2, r2, #1
 80047a6:	619a      	str	r2, [r3, #24]
  }
}
 80047a8:	bf00      	nop
 80047aa:	370c      	adds	r7, #12
 80047ac:	46bd      	mov	sp, r7
 80047ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b2:	4770      	bx	lr

080047b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b084      	sub	sp, #16
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	60f8      	str	r0, [r7, #12]
 80047bc:	60b9      	str	r1, [r7, #8]
 80047be:	603b      	str	r3, [r7, #0]
 80047c0:	4613      	mov	r3, r2
 80047c2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80047c4:	e03b      	b.n	800483e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80047c6:	69ba      	ldr	r2, [r7, #24]
 80047c8:	6839      	ldr	r1, [r7, #0]
 80047ca:	68f8      	ldr	r0, [r7, #12]
 80047cc:	f000 f8d6 	bl	800497c <I2C_IsErrorOccurred>
 80047d0:	4603      	mov	r3, r0
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d001      	beq.n	80047da <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	e041      	b.n	800485e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047e0:	d02d      	beq.n	800483e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047e2:	f7fe fd93 	bl	800330c <HAL_GetTick>
 80047e6:	4602      	mov	r2, r0
 80047e8:	69bb      	ldr	r3, [r7, #24]
 80047ea:	1ad3      	subs	r3, r2, r3
 80047ec:	683a      	ldr	r2, [r7, #0]
 80047ee:	429a      	cmp	r2, r3
 80047f0:	d302      	bcc.n	80047f8 <I2C_WaitOnFlagUntilTimeout+0x44>
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d122      	bne.n	800483e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	699a      	ldr	r2, [r3, #24]
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	4013      	ands	r3, r2
 8004802:	68ba      	ldr	r2, [r7, #8]
 8004804:	429a      	cmp	r2, r3
 8004806:	bf0c      	ite	eq
 8004808:	2301      	moveq	r3, #1
 800480a:	2300      	movne	r3, #0
 800480c:	b2db      	uxtb	r3, r3
 800480e:	461a      	mov	r2, r3
 8004810:	79fb      	ldrb	r3, [r7, #7]
 8004812:	429a      	cmp	r2, r3
 8004814:	d113      	bne.n	800483e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800481a:	f043 0220 	orr.w	r2, r3, #32
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2220      	movs	r2, #32
 8004826:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2200      	movs	r2, #0
 800482e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2200      	movs	r2, #0
 8004836:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	e00f      	b.n	800485e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	699a      	ldr	r2, [r3, #24]
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	4013      	ands	r3, r2
 8004848:	68ba      	ldr	r2, [r7, #8]
 800484a:	429a      	cmp	r2, r3
 800484c:	bf0c      	ite	eq
 800484e:	2301      	moveq	r3, #1
 8004850:	2300      	movne	r3, #0
 8004852:	b2db      	uxtb	r3, r3
 8004854:	461a      	mov	r2, r3
 8004856:	79fb      	ldrb	r3, [r7, #7]
 8004858:	429a      	cmp	r2, r3
 800485a:	d0b4      	beq.n	80047c6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800485c:	2300      	movs	r3, #0
}
 800485e:	4618      	mov	r0, r3
 8004860:	3710      	adds	r7, #16
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}

08004866 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004866:	b580      	push	{r7, lr}
 8004868:	b084      	sub	sp, #16
 800486a:	af00      	add	r7, sp, #0
 800486c:	60f8      	str	r0, [r7, #12]
 800486e:	60b9      	str	r1, [r7, #8]
 8004870:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004872:	e033      	b.n	80048dc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004874:	687a      	ldr	r2, [r7, #4]
 8004876:	68b9      	ldr	r1, [r7, #8]
 8004878:	68f8      	ldr	r0, [r7, #12]
 800487a:	f000 f87f 	bl	800497c <I2C_IsErrorOccurred>
 800487e:	4603      	mov	r3, r0
 8004880:	2b00      	cmp	r3, #0
 8004882:	d001      	beq.n	8004888 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	e031      	b.n	80048ec <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800488e:	d025      	beq.n	80048dc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004890:	f7fe fd3c 	bl	800330c <HAL_GetTick>
 8004894:	4602      	mov	r2, r0
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	1ad3      	subs	r3, r2, r3
 800489a:	68ba      	ldr	r2, [r7, #8]
 800489c:	429a      	cmp	r2, r3
 800489e:	d302      	bcc.n	80048a6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d11a      	bne.n	80048dc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	699b      	ldr	r3, [r3, #24]
 80048ac:	f003 0302 	and.w	r3, r3, #2
 80048b0:	2b02      	cmp	r3, #2
 80048b2:	d013      	beq.n	80048dc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048b8:	f043 0220 	orr.w	r2, r3, #32
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2220      	movs	r2, #32
 80048c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	2200      	movs	r2, #0
 80048cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2200      	movs	r2, #0
 80048d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80048d8:	2301      	movs	r3, #1
 80048da:	e007      	b.n	80048ec <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	699b      	ldr	r3, [r3, #24]
 80048e2:	f003 0302 	and.w	r3, r3, #2
 80048e6:	2b02      	cmp	r3, #2
 80048e8:	d1c4      	bne.n	8004874 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80048ea:	2300      	movs	r3, #0
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	3710      	adds	r7, #16
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}

080048f4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b084      	sub	sp, #16
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	60f8      	str	r0, [r7, #12]
 80048fc:	60b9      	str	r1, [r7, #8]
 80048fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004900:	e02f      	b.n	8004962 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004902:	687a      	ldr	r2, [r7, #4]
 8004904:	68b9      	ldr	r1, [r7, #8]
 8004906:	68f8      	ldr	r0, [r7, #12]
 8004908:	f000 f838 	bl	800497c <I2C_IsErrorOccurred>
 800490c:	4603      	mov	r3, r0
 800490e:	2b00      	cmp	r3, #0
 8004910:	d001      	beq.n	8004916 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	e02d      	b.n	8004972 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004916:	f7fe fcf9 	bl	800330c <HAL_GetTick>
 800491a:	4602      	mov	r2, r0
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	1ad3      	subs	r3, r2, r3
 8004920:	68ba      	ldr	r2, [r7, #8]
 8004922:	429a      	cmp	r2, r3
 8004924:	d302      	bcc.n	800492c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d11a      	bne.n	8004962 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	699b      	ldr	r3, [r3, #24]
 8004932:	f003 0320 	and.w	r3, r3, #32
 8004936:	2b20      	cmp	r3, #32
 8004938:	d013      	beq.n	8004962 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800493e:	f043 0220 	orr.w	r2, r3, #32
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	2220      	movs	r2, #32
 800494a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2200      	movs	r2, #0
 8004952:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2200      	movs	r2, #0
 800495a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	e007      	b.n	8004972 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	699b      	ldr	r3, [r3, #24]
 8004968:	f003 0320 	and.w	r3, r3, #32
 800496c:	2b20      	cmp	r3, #32
 800496e:	d1c8      	bne.n	8004902 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004970:	2300      	movs	r3, #0
}
 8004972:	4618      	mov	r0, r3
 8004974:	3710      	adds	r7, #16
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}
	...

0800497c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b08a      	sub	sp, #40	@ 0x28
 8004980:	af00      	add	r7, sp, #0
 8004982:	60f8      	str	r0, [r7, #12]
 8004984:	60b9      	str	r1, [r7, #8]
 8004986:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004988:	2300      	movs	r3, #0
 800498a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	699b      	ldr	r3, [r3, #24]
 8004994:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004996:	2300      	movs	r3, #0
 8004998:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800499e:	69bb      	ldr	r3, [r7, #24]
 80049a0:	f003 0310 	and.w	r3, r3, #16
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d068      	beq.n	8004a7a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	2210      	movs	r2, #16
 80049ae:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80049b0:	e049      	b.n	8004a46 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049b8:	d045      	beq.n	8004a46 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80049ba:	f7fe fca7 	bl	800330c <HAL_GetTick>
 80049be:	4602      	mov	r2, r0
 80049c0:	69fb      	ldr	r3, [r7, #28]
 80049c2:	1ad3      	subs	r3, r2, r3
 80049c4:	68ba      	ldr	r2, [r7, #8]
 80049c6:	429a      	cmp	r2, r3
 80049c8:	d302      	bcc.n	80049d0 <I2C_IsErrorOccurred+0x54>
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d13a      	bne.n	8004a46 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80049da:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80049e2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	699b      	ldr	r3, [r3, #24]
 80049ea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80049ee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80049f2:	d121      	bne.n	8004a38 <I2C_IsErrorOccurred+0xbc>
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80049fa:	d01d      	beq.n	8004a38 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80049fc:	7cfb      	ldrb	r3, [r7, #19]
 80049fe:	2b20      	cmp	r3, #32
 8004a00:	d01a      	beq.n	8004a38 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	685a      	ldr	r2, [r3, #4]
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004a10:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004a12:	f7fe fc7b 	bl	800330c <HAL_GetTick>
 8004a16:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004a18:	e00e      	b.n	8004a38 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004a1a:	f7fe fc77 	bl	800330c <HAL_GetTick>
 8004a1e:	4602      	mov	r2, r0
 8004a20:	69fb      	ldr	r3, [r7, #28]
 8004a22:	1ad3      	subs	r3, r2, r3
 8004a24:	2b19      	cmp	r3, #25
 8004a26:	d907      	bls.n	8004a38 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004a28:	6a3b      	ldr	r3, [r7, #32]
 8004a2a:	f043 0320 	orr.w	r3, r3, #32
 8004a2e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8004a36:	e006      	b.n	8004a46 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	699b      	ldr	r3, [r3, #24]
 8004a3e:	f003 0320 	and.w	r3, r3, #32
 8004a42:	2b20      	cmp	r3, #32
 8004a44:	d1e9      	bne.n	8004a1a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	699b      	ldr	r3, [r3, #24]
 8004a4c:	f003 0320 	and.w	r3, r3, #32
 8004a50:	2b20      	cmp	r3, #32
 8004a52:	d003      	beq.n	8004a5c <I2C_IsErrorOccurred+0xe0>
 8004a54:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d0aa      	beq.n	80049b2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004a5c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d103      	bne.n	8004a6c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	2220      	movs	r2, #32
 8004a6a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004a6c:	6a3b      	ldr	r3, [r7, #32]
 8004a6e:	f043 0304 	orr.w	r3, r3, #4
 8004a72:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	699b      	ldr	r3, [r3, #24]
 8004a80:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004a82:	69bb      	ldr	r3, [r7, #24]
 8004a84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d00b      	beq.n	8004aa4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004a8c:	6a3b      	ldr	r3, [r7, #32]
 8004a8e:	f043 0301 	orr.w	r3, r3, #1
 8004a92:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004a9c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004aa4:	69bb      	ldr	r3, [r7, #24]
 8004aa6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d00b      	beq.n	8004ac6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004aae:	6a3b      	ldr	r3, [r7, #32]
 8004ab0:	f043 0308 	orr.w	r3, r3, #8
 8004ab4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004abe:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004ac6:	69bb      	ldr	r3, [r7, #24]
 8004ac8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d00b      	beq.n	8004ae8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004ad0:	6a3b      	ldr	r3, [r7, #32]
 8004ad2:	f043 0302 	orr.w	r3, r3, #2
 8004ad6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004ae0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8004ae8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d01c      	beq.n	8004b2a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004af0:	68f8      	ldr	r0, [r7, #12]
 8004af2:	f7ff fe3b 	bl	800476c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	6859      	ldr	r1, [r3, #4]
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	4b0d      	ldr	r3, [pc, #52]	@ (8004b38 <I2C_IsErrorOccurred+0x1bc>)
 8004b02:	400b      	ands	r3, r1
 8004b04:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004b0a:	6a3b      	ldr	r3, [r7, #32]
 8004b0c:	431a      	orrs	r2, r3
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2220      	movs	r2, #32
 8004b16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	2200      	movs	r2, #0
 8004b26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8004b2a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	3728      	adds	r7, #40	@ 0x28
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}
 8004b36:	bf00      	nop
 8004b38:	fe00e800 	.word	0xfe00e800

08004b3c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b087      	sub	sp, #28
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	60f8      	str	r0, [r7, #12]
 8004b44:	607b      	str	r3, [r7, #4]
 8004b46:	460b      	mov	r3, r1
 8004b48:	817b      	strh	r3, [r7, #10]
 8004b4a:	4613      	mov	r3, r2
 8004b4c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004b4e:	897b      	ldrh	r3, [r7, #10]
 8004b50:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004b54:	7a7b      	ldrb	r3, [r7, #9]
 8004b56:	041b      	lsls	r3, r3, #16
 8004b58:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004b5c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004b62:	6a3b      	ldr	r3, [r7, #32]
 8004b64:	4313      	orrs	r3, r2
 8004b66:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004b6a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	685a      	ldr	r2, [r3, #4]
 8004b72:	6a3b      	ldr	r3, [r7, #32]
 8004b74:	0d5b      	lsrs	r3, r3, #21
 8004b76:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8004b7a:	4b08      	ldr	r3, [pc, #32]	@ (8004b9c <I2C_TransferConfig+0x60>)
 8004b7c:	430b      	orrs	r3, r1
 8004b7e:	43db      	mvns	r3, r3
 8004b80:	ea02 0103 	and.w	r1, r2, r3
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	697a      	ldr	r2, [r7, #20]
 8004b8a:	430a      	orrs	r2, r1
 8004b8c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004b8e:	bf00      	nop
 8004b90:	371c      	adds	r7, #28
 8004b92:	46bd      	mov	sp, r7
 8004b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b98:	4770      	bx	lr
 8004b9a:	bf00      	nop
 8004b9c:	03ff63ff 	.word	0x03ff63ff

08004ba0 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b084      	sub	sp, #16
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8004ba8:	2300      	movs	r3, #0
 8004baa:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d01e      	beq.n	8004bf0 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8004bb2:	4b13      	ldr	r3, [pc, #76]	@ (8004c00 <HAL_IPCC_Init+0x60>)
 8004bb4:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004bbc:	b2db      	uxtb	r3, r3
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d102      	bne.n	8004bc8 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f7fe f99c 	bl	8002f00 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8004bc8:	68b8      	ldr	r0, [r7, #8]
 8004bca:	f000 f85b 	bl	8004c84 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f043 1201 	orr.w	r2, r3, #65537	@ 0x10001
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	f000 f82c 	bl	8004c38 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2200      	movs	r2, #0
 8004be4:	635a      	str	r2, [r3, #52]	@ 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2201      	movs	r2, #1
 8004bea:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 8004bee:	e001      	b.n	8004bf4 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8004bf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	3710      	adds	r7, #16
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}
 8004bfe:	bf00      	nop
 8004c00:	58000c00 	.word	0x58000c00

08004c04 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b085      	sub	sp, #20
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	60f8      	str	r0, [r7, #12]
 8004c0c:	60b9      	str	r1, [r7, #8]
 8004c0e:	4613      	mov	r3, r2
 8004c10:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8004c12:	bf00      	nop
 8004c14:	3714      	adds	r7, #20
 8004c16:	46bd      	mov	sp, r7
 8004c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1c:	4770      	bx	lr

08004c1e <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8004c1e:	b480      	push	{r7}
 8004c20:	b085      	sub	sp, #20
 8004c22:	af00      	add	r7, sp, #0
 8004c24:	60f8      	str	r0, [r7, #12]
 8004c26:	60b9      	str	r1, [r7, #8]
 8004c28:	4613      	mov	r3, r2
 8004c2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8004c2c:	bf00      	nop
 8004c2e:	3714      	adds	r7, #20
 8004c30:	46bd      	mov	sp, r7
 8004c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c36:	4770      	bx	lr

08004c38 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b085      	sub	sp, #20
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8004c40:	2300      	movs	r3, #0
 8004c42:	60fb      	str	r3, [r7, #12]
 8004c44:	e00f      	b.n	8004c66 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8004c46:	687a      	ldr	r2, [r7, #4]
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	009b      	lsls	r3, r3, #2
 8004c4c:	4413      	add	r3, r2
 8004c4e:	4a0b      	ldr	r2, [pc, #44]	@ (8004c7c <IPCC_SetDefaultCallbacks+0x44>)
 8004c50:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8004c52:	687a      	ldr	r2, [r7, #4]
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	3306      	adds	r3, #6
 8004c58:	009b      	lsls	r3, r3, #2
 8004c5a:	4413      	add	r3, r2
 8004c5c:	4a08      	ldr	r2, [pc, #32]	@ (8004c80 <IPCC_SetDefaultCallbacks+0x48>)
 8004c5e:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	3301      	adds	r3, #1
 8004c64:	60fb      	str	r3, [r7, #12]
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2b05      	cmp	r3, #5
 8004c6a:	d9ec      	bls.n	8004c46 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8004c6c:	bf00      	nop
 8004c6e:	bf00      	nop
 8004c70:	3714      	adds	r7, #20
 8004c72:	46bd      	mov	sp, r7
 8004c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c78:	4770      	bx	lr
 8004c7a:	bf00      	nop
 8004c7c:	08004c05 	.word	0x08004c05
 8004c80:	08004c1f 	.word	0x08004c1f

08004c84 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b083      	sub	sp, #12
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	f04f 123f 	mov.w	r2, #4128831	@ 0x3f003f
 8004c98:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	223f      	movs	r2, #63	@ 0x3f
 8004c9e:	609a      	str	r2, [r3, #8]
}
 8004ca0:	bf00      	nop
 8004ca2:	370c      	adds	r7, #12
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004caa:	4770      	bx	lr

08004cac <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004cac:	b480      	push	{r7}
 8004cae:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004cb0:	4b05      	ldr	r3, [pc, #20]	@ (8004cc8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a04      	ldr	r2, [pc, #16]	@ (8004cc8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004cb6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004cba:	6013      	str	r3, [r2, #0]
}
 8004cbc:	bf00      	nop
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc4:	4770      	bx	lr
 8004cc6:	bf00      	nop
 8004cc8:	58000400 	.word	0x58000400

08004ccc <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8004cd0:	4b04      	ldr	r3, [pc, #16]	@ (8004ce4 <HAL_PWREx_GetVoltageRange+0x18>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce0:	4770      	bx	lr
 8004ce2:	bf00      	nop
 8004ce4:	58000400 	.word	0x58000400

08004ce8 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8004ce8:	b480      	push	{r7}
 8004cea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8004cec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004cf6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004cfa:	d101      	bne.n	8004d00 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	e000      	b.n	8004d02 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8004d00:	2300      	movs	r3, #0
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	46bd      	mov	sp, r7
 8004d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0a:	4770      	bx	lr

08004d0c <LL_RCC_HSE_Enable>:
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8004d10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004d1a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d1e:	6013      	str	r3, [r2, #0]
}
 8004d20:	bf00      	nop
 8004d22:	46bd      	mov	sp, r7
 8004d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d28:	4770      	bx	lr

08004d2a <LL_RCC_HSE_Disable>:
{
 8004d2a:	b480      	push	{r7}
 8004d2c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8004d2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004d38:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d3c:	6013      	str	r3, [r2, #0]
}
 8004d3e:	bf00      	nop
 8004d40:	46bd      	mov	sp, r7
 8004d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d46:	4770      	bx	lr

08004d48 <LL_RCC_HSE_IsReady>:
{
 8004d48:	b480      	push	{r7}
 8004d4a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004d4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d56:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004d5a:	d101      	bne.n	8004d60 <LL_RCC_HSE_IsReady+0x18>
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	e000      	b.n	8004d62 <LL_RCC_HSE_IsReady+0x1a>
 8004d60:	2300      	movs	r3, #0
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	46bd      	mov	sp, r7
 8004d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6a:	4770      	bx	lr

08004d6c <LL_RCC_HSI_Enable>:
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004d70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004d7a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d7e:	6013      	str	r3, [r2, #0]
}
 8004d80:	bf00      	nop
 8004d82:	46bd      	mov	sp, r7
 8004d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d88:	4770      	bx	lr

08004d8a <LL_RCC_HSI_Disable>:
{
 8004d8a:	b480      	push	{r7}
 8004d8c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8004d8e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004d98:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004d9c:	6013      	str	r3, [r2, #0]
}
 8004d9e:	bf00      	nop
 8004da0:	46bd      	mov	sp, r7
 8004da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da6:	4770      	bx	lr

08004da8 <LL_RCC_HSI_IsReady>:
{
 8004da8:	b480      	push	{r7}
 8004daa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004dac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004db6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004dba:	d101      	bne.n	8004dc0 <LL_RCC_HSI_IsReady+0x18>
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	e000      	b.n	8004dc2 <LL_RCC_HSI_IsReady+0x1a>
 8004dc0:	2300      	movs	r3, #0
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dca:	4770      	bx	lr

08004dcc <LL_RCC_HSI_SetCalibTrimming>:
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b083      	sub	sp, #12
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8004dd4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	061b      	lsls	r3, r3, #24
 8004de2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004de6:	4313      	orrs	r3, r2
 8004de8:	604b      	str	r3, [r1, #4]
}
 8004dea:	bf00      	nop
 8004dec:	370c      	adds	r7, #12
 8004dee:	46bd      	mov	sp, r7
 8004df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df4:	4770      	bx	lr

08004df6 <LL_RCC_HSI48_Enable>:
{
 8004df6:	b480      	push	{r7}
 8004df8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8004dfa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004dfe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004e02:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004e06:	f043 0301 	orr.w	r3, r3, #1
 8004e0a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8004e0e:	bf00      	nop
 8004e10:	46bd      	mov	sp, r7
 8004e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e16:	4770      	bx	lr

08004e18 <LL_RCC_HSI48_Disable>:
{
 8004e18:	b480      	push	{r7}
 8004e1a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8004e1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e20:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004e24:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004e28:	f023 0301 	bic.w	r3, r3, #1
 8004e2c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8004e30:	bf00      	nop
 8004e32:	46bd      	mov	sp, r7
 8004e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e38:	4770      	bx	lr

08004e3a <LL_RCC_HSI48_IsReady>:
{
 8004e3a:	b480      	push	{r7}
 8004e3c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8004e3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e42:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004e46:	f003 0302 	and.w	r3, r3, #2
 8004e4a:	2b02      	cmp	r3, #2
 8004e4c:	d101      	bne.n	8004e52 <LL_RCC_HSI48_IsReady+0x18>
 8004e4e:	2301      	movs	r3, #1
 8004e50:	e000      	b.n	8004e54 <LL_RCC_HSI48_IsReady+0x1a>
 8004e52:	2300      	movs	r3, #0
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	46bd      	mov	sp, r7
 8004e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5c:	4770      	bx	lr

08004e5e <LL_RCC_LSE_Enable>:
{
 8004e5e:	b480      	push	{r7}
 8004e60:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004e62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e6a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004e6e:	f043 0301 	orr.w	r3, r3, #1
 8004e72:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8004e76:	bf00      	nop
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7e:	4770      	bx	lr

08004e80 <LL_RCC_LSE_Disable>:
{
 8004e80:	b480      	push	{r7}
 8004e82:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004e84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e8c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004e90:	f023 0301 	bic.w	r3, r3, #1
 8004e94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8004e98:	bf00      	nop
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr

08004ea2 <LL_RCC_LSE_EnableBypass>:
{
 8004ea2:	b480      	push	{r7}
 8004ea4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004ea6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004eaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004eae:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004eb2:	f043 0304 	orr.w	r3, r3, #4
 8004eb6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8004eba:	bf00      	nop
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr

08004ec4 <LL_RCC_LSE_DisableBypass>:
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004ec8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ecc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ed0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004ed4:	f023 0304 	bic.w	r3, r3, #4
 8004ed8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8004edc:	bf00      	nop
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee4:	4770      	bx	lr

08004ee6 <LL_RCC_LSE_IsReady>:
{
 8004ee6:	b480      	push	{r7}
 8004ee8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004eea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004eee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ef2:	f003 0302 	and.w	r3, r3, #2
 8004ef6:	2b02      	cmp	r3, #2
 8004ef8:	d101      	bne.n	8004efe <LL_RCC_LSE_IsReady+0x18>
 8004efa:	2301      	movs	r3, #1
 8004efc:	e000      	b.n	8004f00 <LL_RCC_LSE_IsReady+0x1a>
 8004efe:	2300      	movs	r3, #0
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	46bd      	mov	sp, r7
 8004f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f08:	4770      	bx	lr

08004f0a <LL_RCC_LSI1_Enable>:
{
 8004f0a:	b480      	push	{r7}
 8004f0c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004f0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f12:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f16:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004f1a:	f043 0301 	orr.w	r3, r3, #1
 8004f1e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8004f22:	bf00      	nop
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr

08004f2c <LL_RCC_LSI1_Disable>:
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004f30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f34:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f38:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004f3c:	f023 0301 	bic.w	r3, r3, #1
 8004f40:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8004f44:	bf00      	nop
 8004f46:	46bd      	mov	sp, r7
 8004f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4c:	4770      	bx	lr

08004f4e <LL_RCC_LSI1_IsReady>:
{
 8004f4e:	b480      	push	{r7}
 8004f50:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8004f52:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f56:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f5a:	f003 0302 	and.w	r3, r3, #2
 8004f5e:	2b02      	cmp	r3, #2
 8004f60:	d101      	bne.n	8004f66 <LL_RCC_LSI1_IsReady+0x18>
 8004f62:	2301      	movs	r3, #1
 8004f64:	e000      	b.n	8004f68 <LL_RCC_LSI1_IsReady+0x1a>
 8004f66:	2300      	movs	r3, #0
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f70:	4770      	bx	lr

08004f72 <LL_RCC_LSI2_Enable>:
{
 8004f72:	b480      	push	{r7}
 8004f74:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004f76:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f7e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004f82:	f043 0304 	orr.w	r3, r3, #4
 8004f86:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8004f8a:	bf00      	nop
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f92:	4770      	bx	lr

08004f94 <LL_RCC_LSI2_Disable>:
{
 8004f94:	b480      	push	{r7}
 8004f96:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004f98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004fa0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004fa4:	f023 0304 	bic.w	r3, r3, #4
 8004fa8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8004fac:	bf00      	nop
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb4:	4770      	bx	lr

08004fb6 <LL_RCC_LSI2_IsReady>:
{
 8004fb6:	b480      	push	{r7}
 8004fb8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8004fba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004fbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004fc2:	f003 0308 	and.w	r3, r3, #8
 8004fc6:	2b08      	cmp	r3, #8
 8004fc8:	d101      	bne.n	8004fce <LL_RCC_LSI2_IsReady+0x18>
 8004fca:	2301      	movs	r3, #1
 8004fcc:	e000      	b.n	8004fd0 <LL_RCC_LSI2_IsReady+0x1a>
 8004fce:	2300      	movs	r3, #0
}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd8:	4770      	bx	lr

08004fda <LL_RCC_LSI2_SetTrimming>:
{
 8004fda:	b480      	push	{r7}
 8004fdc:	b083      	sub	sp, #12
 8004fde:	af00      	add	r7, sp, #0
 8004fe0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8004fe2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004fe6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004fea:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	021b      	lsls	r3, r3, #8
 8004ff2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8004ffc:	bf00      	nop
 8004ffe:	370c      	adds	r7, #12
 8005000:	46bd      	mov	sp, r7
 8005002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005006:	4770      	bx	lr

08005008 <LL_RCC_MSI_Enable>:
{
 8005008:	b480      	push	{r7}
 800500a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800500c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005016:	f043 0301 	orr.w	r3, r3, #1
 800501a:	6013      	str	r3, [r2, #0]
}
 800501c:	bf00      	nop
 800501e:	46bd      	mov	sp, r7
 8005020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005024:	4770      	bx	lr

08005026 <LL_RCC_MSI_Disable>:
{
 8005026:	b480      	push	{r7}
 8005028:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800502a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005034:	f023 0301 	bic.w	r3, r3, #1
 8005038:	6013      	str	r3, [r2, #0]
}
 800503a:	bf00      	nop
 800503c:	46bd      	mov	sp, r7
 800503e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005042:	4770      	bx	lr

08005044 <LL_RCC_MSI_IsReady>:
{
 8005044:	b480      	push	{r7}
 8005046:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8005048:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f003 0302 	and.w	r3, r3, #2
 8005052:	2b02      	cmp	r3, #2
 8005054:	d101      	bne.n	800505a <LL_RCC_MSI_IsReady+0x16>
 8005056:	2301      	movs	r3, #1
 8005058:	e000      	b.n	800505c <LL_RCC_MSI_IsReady+0x18>
 800505a:	2300      	movs	r3, #0
}
 800505c:	4618      	mov	r0, r3
 800505e:	46bd      	mov	sp, r7
 8005060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005064:	4770      	bx	lr

08005066 <LL_RCC_MSI_SetRange>:
{
 8005066:	b480      	push	{r7}
 8005068:	b083      	sub	sp, #12
 800506a:	af00      	add	r7, sp, #0
 800506c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800506e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005078:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	4313      	orrs	r3, r2
 8005080:	600b      	str	r3, [r1, #0]
}
 8005082:	bf00      	nop
 8005084:	370c      	adds	r7, #12
 8005086:	46bd      	mov	sp, r7
 8005088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508c:	4770      	bx	lr

0800508e <LL_RCC_MSI_GetRange>:
{
 800508e:	b480      	push	{r7}
 8005090:	b083      	sub	sp, #12
 8005092:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8005094:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800509e:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2bb0      	cmp	r3, #176	@ 0xb0
 80050a4:	d901      	bls.n	80050aa <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 80050a6:	23b0      	movs	r3, #176	@ 0xb0
 80050a8:	607b      	str	r3, [r7, #4]
  return msiRange;
 80050aa:	687b      	ldr	r3, [r7, #4]
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	370c      	adds	r7, #12
 80050b0:	46bd      	mov	sp, r7
 80050b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b6:	4770      	bx	lr

080050b8 <LL_RCC_MSI_SetCalibTrimming>:
{
 80050b8:	b480      	push	{r7}
 80050ba:	b083      	sub	sp, #12
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80050c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	021b      	lsls	r3, r3, #8
 80050ce:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80050d2:	4313      	orrs	r3, r2
 80050d4:	604b      	str	r3, [r1, #4]
}
 80050d6:	bf00      	nop
 80050d8:	370c      	adds	r7, #12
 80050da:	46bd      	mov	sp, r7
 80050dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e0:	4770      	bx	lr

080050e2 <LL_RCC_SetSysClkSource>:
{
 80050e2:	b480      	push	{r7}
 80050e4:	b083      	sub	sp, #12
 80050e6:	af00      	add	r7, sp, #0
 80050e8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80050ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	f023 0203 	bic.w	r2, r3, #3
 80050f4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	4313      	orrs	r3, r2
 80050fc:	608b      	str	r3, [r1, #8]
}
 80050fe:	bf00      	nop
 8005100:	370c      	adds	r7, #12
 8005102:	46bd      	mov	sp, r7
 8005104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005108:	4770      	bx	lr

0800510a <LL_RCC_GetSysClkSource>:
{
 800510a:	b480      	push	{r7}
 800510c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800510e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005112:	689b      	ldr	r3, [r3, #8]
 8005114:	f003 030c 	and.w	r3, r3, #12
}
 8005118:	4618      	mov	r0, r3
 800511a:	46bd      	mov	sp, r7
 800511c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005120:	4770      	bx	lr

08005122 <LL_RCC_SetAHBPrescaler>:
{
 8005122:	b480      	push	{r7}
 8005124:	b083      	sub	sp, #12
 8005126:	af00      	add	r7, sp, #0
 8005128:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800512a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005134:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	4313      	orrs	r3, r2
 800513c:	608b      	str	r3, [r1, #8]
}
 800513e:	bf00      	nop
 8005140:	370c      	adds	r7, #12
 8005142:	46bd      	mov	sp, r7
 8005144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005148:	4770      	bx	lr

0800514a <LL_C2_RCC_SetAHBPrescaler>:
{
 800514a:	b480      	push	{r7}
 800514c:	b083      	sub	sp, #12
 800514e:	af00      	add	r7, sp, #0
 8005150:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8005152:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005156:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800515a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800515e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	4313      	orrs	r3, r2
 8005166:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800516a:	bf00      	nop
 800516c:	370c      	adds	r7, #12
 800516e:	46bd      	mov	sp, r7
 8005170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005174:	4770      	bx	lr

08005176 <LL_RCC_SetAHB4Prescaler>:
{
 8005176:	b480      	push	{r7}
 8005178:	b083      	sub	sp, #12
 800517a:	af00      	add	r7, sp, #0
 800517c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800517e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005182:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005186:	f023 020f 	bic.w	r2, r3, #15
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	091b      	lsrs	r3, r3, #4
 800518e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005192:	4313      	orrs	r3, r2
 8005194:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8005198:	bf00      	nop
 800519a:	370c      	adds	r7, #12
 800519c:	46bd      	mov	sp, r7
 800519e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a2:	4770      	bx	lr

080051a4 <LL_RCC_SetAPB1Prescaler>:
{
 80051a4:	b480      	push	{r7}
 80051a6:	b083      	sub	sp, #12
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80051ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80051b0:	689b      	ldr	r3, [r3, #8]
 80051b2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80051b6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	4313      	orrs	r3, r2
 80051be:	608b      	str	r3, [r1, #8]
}
 80051c0:	bf00      	nop
 80051c2:	370c      	adds	r7, #12
 80051c4:	46bd      	mov	sp, r7
 80051c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ca:	4770      	bx	lr

080051cc <LL_RCC_SetAPB2Prescaler>:
{
 80051cc:	b480      	push	{r7}
 80051ce:	b083      	sub	sp, #12
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80051d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80051d8:	689b      	ldr	r3, [r3, #8]
 80051da:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80051de:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	4313      	orrs	r3, r2
 80051e6:	608b      	str	r3, [r1, #8]
}
 80051e8:	bf00      	nop
 80051ea:	370c      	adds	r7, #12
 80051ec:	46bd      	mov	sp, r7
 80051ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f2:	4770      	bx	lr

080051f4 <LL_RCC_GetAHBPrescaler>:
{
 80051f4:	b480      	push	{r7}
 80051f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80051f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8005202:	4618      	mov	r0, r3
 8005204:	46bd      	mov	sp, r7
 8005206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520a:	4770      	bx	lr

0800520c <LL_RCC_GetAHB4Prescaler>:
{
 800520c:	b480      	push	{r7}
 800520e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8005210:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005214:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005218:	011b      	lsls	r3, r3, #4
 800521a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800521e:	4618      	mov	r0, r3
 8005220:	46bd      	mov	sp, r7
 8005222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005226:	4770      	bx	lr

08005228 <LL_RCC_GetAPB1Prescaler>:
{
 8005228:	b480      	push	{r7}
 800522a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800522c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8005236:	4618      	mov	r0, r3
 8005238:	46bd      	mov	sp, r7
 800523a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523e:	4770      	bx	lr

08005240 <LL_RCC_GetAPB2Prescaler>:
{
 8005240:	b480      	push	{r7}
 8005242:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8005244:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 800524e:	4618      	mov	r0, r3
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr

08005258 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8005258:	b480      	push	{r7}
 800525a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800525c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005266:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800526a:	6013      	str	r3, [r2, #0]
}
 800526c:	bf00      	nop
 800526e:	46bd      	mov	sp, r7
 8005270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005274:	4770      	bx	lr

08005276 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8005276:	b480      	push	{r7}
 8005278:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800527a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005284:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005288:	6013      	str	r3, [r2, #0]
}
 800528a:	bf00      	nop
 800528c:	46bd      	mov	sp, r7
 800528e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005292:	4770      	bx	lr

08005294 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8005294:	b480      	push	{r7}
 8005296:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005298:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052a2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80052a6:	d101      	bne.n	80052ac <LL_RCC_PLL_IsReady+0x18>
 80052a8:	2301      	movs	r3, #1
 80052aa:	e000      	b.n	80052ae <LL_RCC_PLL_IsReady+0x1a>
 80052ac:	2300      	movs	r3, #0
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	46bd      	mov	sp, r7
 80052b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b6:	4770      	bx	lr

080052b8 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80052b8:	b480      	push	{r7}
 80052ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80052bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80052c0:	68db      	ldr	r3, [r3, #12]
 80052c2:	0a1b      	lsrs	r3, r3, #8
 80052c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	46bd      	mov	sp, r7
 80052cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d0:	4770      	bx	lr

080052d2 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80052d2:	b480      	push	{r7}
 80052d4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80052d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80052da:	68db      	ldr	r3, [r3, #12]
 80052dc:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	46bd      	mov	sp, r7
 80052e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e8:	4770      	bx	lr

080052ea <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80052ea:	b480      	push	{r7}
 80052ec:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80052ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80052f2:	68db      	ldr	r3, [r3, #12]
 80052f4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	46bd      	mov	sp, r7
 80052fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005300:	4770      	bx	lr

08005302 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8005302:	b480      	push	{r7}
 8005304:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005306:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800530a:	68db      	ldr	r3, [r3, #12]
 800530c:	f003 0303 	and.w	r3, r3, #3
}
 8005310:	4618      	mov	r0, r3
 8005312:	46bd      	mov	sp, r7
 8005314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005318:	4770      	bx	lr

0800531a <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800531a:	b480      	push	{r7}
 800531c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800531e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005322:	689b      	ldr	r3, [r3, #8]
 8005324:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005328:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800532c:	d101      	bne.n	8005332 <LL_RCC_IsActiveFlag_HPRE+0x18>
 800532e:	2301      	movs	r3, #1
 8005330:	e000      	b.n	8005334 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8005332:	2300      	movs	r3, #0
}
 8005334:	4618      	mov	r0, r3
 8005336:	46bd      	mov	sp, r7
 8005338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533c:	4770      	bx	lr

0800533e <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800533e:	b480      	push	{r7}
 8005340:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8005342:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005346:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800534a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800534e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005352:	d101      	bne.n	8005358 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8005354:	2301      	movs	r3, #1
 8005356:	e000      	b.n	800535a <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8005358:	2300      	movs	r3, #0
}
 800535a:	4618      	mov	r0, r3
 800535c:	46bd      	mov	sp, r7
 800535e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005362:	4770      	bx	lr

08005364 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8005364:	b480      	push	{r7}
 8005366:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8005368:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800536c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005370:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005374:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005378:	d101      	bne.n	800537e <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800537a:	2301      	movs	r3, #1
 800537c:	e000      	b.n	8005380 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800537e:	2300      	movs	r3, #0
}
 8005380:	4618      	mov	r0, r3
 8005382:	46bd      	mov	sp, r7
 8005384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005388:	4770      	bx	lr

0800538a <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800538a:	b480      	push	{r7}
 800538c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800538e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005392:	689b      	ldr	r3, [r3, #8]
 8005394:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005398:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800539c:	d101      	bne.n	80053a2 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800539e:	2301      	movs	r3, #1
 80053a0:	e000      	b.n	80053a4 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80053a2:	2300      	movs	r3, #0
}
 80053a4:	4618      	mov	r0, r3
 80053a6:	46bd      	mov	sp, r7
 80053a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ac:	4770      	bx	lr

080053ae <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80053ae:	b480      	push	{r7}
 80053b0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80053b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80053bc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80053c0:	d101      	bne.n	80053c6 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80053c2:	2301      	movs	r3, #1
 80053c4:	e000      	b.n	80053c8 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80053c6:	2300      	movs	r3, #0
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	46bd      	mov	sp, r7
 80053cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d0:	4770      	bx	lr
	...

080053d4 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80053d4:	b590      	push	{r4, r7, lr}
 80053d6:	b08d      	sub	sp, #52	@ 0x34
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d101      	bne.n	80053e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	e363      	b.n	8005aae <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f003 0320 	and.w	r3, r3, #32
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	f000 808d 	beq.w	800550e <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80053f4:	f7ff fe89 	bl	800510a <LL_RCC_GetSysClkSource>
 80053f8:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80053fa:	f7ff ff82 	bl	8005302 <LL_RCC_PLL_GetMainSource>
 80053fe:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005400:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005402:	2b00      	cmp	r3, #0
 8005404:	d005      	beq.n	8005412 <HAL_RCC_OscConfig+0x3e>
 8005406:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005408:	2b0c      	cmp	r3, #12
 800540a:	d147      	bne.n	800549c <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800540c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800540e:	2b01      	cmp	r3, #1
 8005410:	d144      	bne.n	800549c <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	69db      	ldr	r3, [r3, #28]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d101      	bne.n	800541e <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800541a:	2301      	movs	r3, #1
 800541c:	e347      	b.n	8005aae <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8005422:	f7ff fe34 	bl	800508e <LL_RCC_MSI_GetRange>
 8005426:	4603      	mov	r3, r0
 8005428:	429c      	cmp	r4, r3
 800542a:	d914      	bls.n	8005456 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005430:	4618      	mov	r0, r3
 8005432:	f000 fd2f 	bl	8005e94 <RCC_SetFlashLatencyFromMSIRange>
 8005436:	4603      	mov	r3, r0
 8005438:	2b00      	cmp	r3, #0
 800543a:	d001      	beq.n	8005440 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 800543c:	2301      	movs	r3, #1
 800543e:	e336      	b.n	8005aae <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005444:	4618      	mov	r0, r3
 8005446:	f7ff fe0e 	bl	8005066 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6a1b      	ldr	r3, [r3, #32]
 800544e:	4618      	mov	r0, r3
 8005450:	f7ff fe32 	bl	80050b8 <LL_RCC_MSI_SetCalibTrimming>
 8005454:	e013      	b.n	800547e <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800545a:	4618      	mov	r0, r3
 800545c:	f7ff fe03 	bl	8005066 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6a1b      	ldr	r3, [r3, #32]
 8005464:	4618      	mov	r0, r3
 8005466:	f7ff fe27 	bl	80050b8 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800546e:	4618      	mov	r0, r3
 8005470:	f000 fd10 	bl	8005e94 <RCC_SetFlashLatencyFromMSIRange>
 8005474:	4603      	mov	r3, r0
 8005476:	2b00      	cmp	r3, #0
 8005478:	d001      	beq.n	800547e <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800547a:	2301      	movs	r3, #1
 800547c:	e317      	b.n	8005aae <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800547e:	f000 fcc9 	bl	8005e14 <HAL_RCC_GetHCLKFreq>
 8005482:	4603      	mov	r3, r0
 8005484:	4aa4      	ldr	r2, [pc, #656]	@ (8005718 <HAL_RCC_OscConfig+0x344>)
 8005486:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005488:	4ba4      	ldr	r3, [pc, #656]	@ (800571c <HAL_RCC_OscConfig+0x348>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4618      	mov	r0, r3
 800548e:	f7fd feef 	bl	8003270 <HAL_InitTick>
 8005492:	4603      	mov	r3, r0
 8005494:	2b00      	cmp	r3, #0
 8005496:	d039      	beq.n	800550c <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8005498:	2301      	movs	r3, #1
 800549a:	e308      	b.n	8005aae <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	69db      	ldr	r3, [r3, #28]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d01e      	beq.n	80054e2 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80054a4:	f7ff fdb0 	bl	8005008 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80054a8:	f7fd ff30 	bl	800330c <HAL_GetTick>
 80054ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80054ae:	e008      	b.n	80054c2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80054b0:	f7fd ff2c 	bl	800330c <HAL_GetTick>
 80054b4:	4602      	mov	r2, r0
 80054b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054b8:	1ad3      	subs	r3, r2, r3
 80054ba:	2b02      	cmp	r3, #2
 80054bc:	d901      	bls.n	80054c2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80054be:	2303      	movs	r3, #3
 80054c0:	e2f5      	b.n	8005aae <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 80054c2:	f7ff fdbf 	bl	8005044 <LL_RCC_MSI_IsReady>
 80054c6:	4603      	mov	r3, r0
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d0f1      	beq.n	80054b0 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054d0:	4618      	mov	r0, r3
 80054d2:	f7ff fdc8 	bl	8005066 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6a1b      	ldr	r3, [r3, #32]
 80054da:	4618      	mov	r0, r3
 80054dc:	f7ff fdec 	bl	80050b8 <LL_RCC_MSI_SetCalibTrimming>
 80054e0:	e015      	b.n	800550e <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80054e2:	f7ff fda0 	bl	8005026 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80054e6:	f7fd ff11 	bl	800330c <HAL_GetTick>
 80054ea:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80054ec:	e008      	b.n	8005500 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80054ee:	f7fd ff0d 	bl	800330c <HAL_GetTick>
 80054f2:	4602      	mov	r2, r0
 80054f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054f6:	1ad3      	subs	r3, r2, r3
 80054f8:	2b02      	cmp	r3, #2
 80054fa:	d901      	bls.n	8005500 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80054fc:	2303      	movs	r3, #3
 80054fe:	e2d6      	b.n	8005aae <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8005500:	f7ff fda0 	bl	8005044 <LL_RCC_MSI_IsReady>
 8005504:	4603      	mov	r3, r0
 8005506:	2b00      	cmp	r3, #0
 8005508:	d1f1      	bne.n	80054ee <HAL_RCC_OscConfig+0x11a>
 800550a:	e000      	b.n	800550e <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800550c:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f003 0301 	and.w	r3, r3, #1
 8005516:	2b00      	cmp	r3, #0
 8005518:	d047      	beq.n	80055aa <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800551a:	f7ff fdf6 	bl	800510a <LL_RCC_GetSysClkSource>
 800551e:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005520:	f7ff feef 	bl	8005302 <LL_RCC_PLL_GetMainSource>
 8005524:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8005526:	6a3b      	ldr	r3, [r7, #32]
 8005528:	2b08      	cmp	r3, #8
 800552a:	d005      	beq.n	8005538 <HAL_RCC_OscConfig+0x164>
 800552c:	6a3b      	ldr	r3, [r7, #32]
 800552e:	2b0c      	cmp	r3, #12
 8005530:	d108      	bne.n	8005544 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8005532:	69fb      	ldr	r3, [r7, #28]
 8005534:	2b03      	cmp	r3, #3
 8005536:	d105      	bne.n	8005544 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d134      	bne.n	80055aa <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8005540:	2301      	movs	r3, #1
 8005542:	e2b4      	b.n	8005aae <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800554c:	d102      	bne.n	8005554 <HAL_RCC_OscConfig+0x180>
 800554e:	f7ff fbdd 	bl	8004d0c <LL_RCC_HSE_Enable>
 8005552:	e001      	b.n	8005558 <HAL_RCC_OscConfig+0x184>
 8005554:	f7ff fbe9 	bl	8004d2a <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d012      	beq.n	8005586 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005560:	f7fd fed4 	bl	800330c <HAL_GetTick>
 8005564:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8005566:	e008      	b.n	800557a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005568:	f7fd fed0 	bl	800330c <HAL_GetTick>
 800556c:	4602      	mov	r2, r0
 800556e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005570:	1ad3      	subs	r3, r2, r3
 8005572:	2b64      	cmp	r3, #100	@ 0x64
 8005574:	d901      	bls.n	800557a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8005576:	2303      	movs	r3, #3
 8005578:	e299      	b.n	8005aae <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800557a:	f7ff fbe5 	bl	8004d48 <LL_RCC_HSE_IsReady>
 800557e:	4603      	mov	r3, r0
 8005580:	2b00      	cmp	r3, #0
 8005582:	d0f1      	beq.n	8005568 <HAL_RCC_OscConfig+0x194>
 8005584:	e011      	b.n	80055aa <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005586:	f7fd fec1 	bl	800330c <HAL_GetTick>
 800558a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800558c:	e008      	b.n	80055a0 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800558e:	f7fd febd 	bl	800330c <HAL_GetTick>
 8005592:	4602      	mov	r2, r0
 8005594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005596:	1ad3      	subs	r3, r2, r3
 8005598:	2b64      	cmp	r3, #100	@ 0x64
 800559a:	d901      	bls.n	80055a0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800559c:	2303      	movs	r3, #3
 800559e:	e286      	b.n	8005aae <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 80055a0:	f7ff fbd2 	bl	8004d48 <LL_RCC_HSE_IsReady>
 80055a4:	4603      	mov	r3, r0
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d1f1      	bne.n	800558e <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f003 0302 	and.w	r3, r3, #2
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d04c      	beq.n	8005650 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80055b6:	f7ff fda8 	bl	800510a <LL_RCC_GetSysClkSource>
 80055ba:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80055bc:	f7ff fea1 	bl	8005302 <LL_RCC_PLL_GetMainSource>
 80055c0:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80055c2:	69bb      	ldr	r3, [r7, #24]
 80055c4:	2b04      	cmp	r3, #4
 80055c6:	d005      	beq.n	80055d4 <HAL_RCC_OscConfig+0x200>
 80055c8:	69bb      	ldr	r3, [r7, #24]
 80055ca:	2b0c      	cmp	r3, #12
 80055cc:	d10e      	bne.n	80055ec <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	2b02      	cmp	r3, #2
 80055d2:	d10b      	bne.n	80055ec <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	68db      	ldr	r3, [r3, #12]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d101      	bne.n	80055e0 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 80055dc:	2301      	movs	r3, #1
 80055de:	e266      	b.n	8005aae <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	691b      	ldr	r3, [r3, #16]
 80055e4:	4618      	mov	r0, r3
 80055e6:	f7ff fbf1 	bl	8004dcc <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80055ea:	e031      	b.n	8005650 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	68db      	ldr	r3, [r3, #12]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d019      	beq.n	8005628 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80055f4:	f7ff fbba 	bl	8004d6c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055f8:	f7fd fe88 	bl	800330c <HAL_GetTick>
 80055fc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80055fe:	e008      	b.n	8005612 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005600:	f7fd fe84 	bl	800330c <HAL_GetTick>
 8005604:	4602      	mov	r2, r0
 8005606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005608:	1ad3      	subs	r3, r2, r3
 800560a:	2b02      	cmp	r3, #2
 800560c:	d901      	bls.n	8005612 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800560e:	2303      	movs	r3, #3
 8005610:	e24d      	b.n	8005aae <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8005612:	f7ff fbc9 	bl	8004da8 <LL_RCC_HSI_IsReady>
 8005616:	4603      	mov	r3, r0
 8005618:	2b00      	cmp	r3, #0
 800561a:	d0f1      	beq.n	8005600 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	691b      	ldr	r3, [r3, #16]
 8005620:	4618      	mov	r0, r3
 8005622:	f7ff fbd3 	bl	8004dcc <LL_RCC_HSI_SetCalibTrimming>
 8005626:	e013      	b.n	8005650 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005628:	f7ff fbaf 	bl	8004d8a <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800562c:	f7fd fe6e 	bl	800330c <HAL_GetTick>
 8005630:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8005632:	e008      	b.n	8005646 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005634:	f7fd fe6a 	bl	800330c <HAL_GetTick>
 8005638:	4602      	mov	r2, r0
 800563a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800563c:	1ad3      	subs	r3, r2, r3
 800563e:	2b02      	cmp	r3, #2
 8005640:	d901      	bls.n	8005646 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8005642:	2303      	movs	r3, #3
 8005644:	e233      	b.n	8005aae <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8005646:	f7ff fbaf 	bl	8004da8 <LL_RCC_HSI_IsReady>
 800564a:	4603      	mov	r3, r0
 800564c:	2b00      	cmp	r3, #0
 800564e:	d1f1      	bne.n	8005634 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f003 0308 	and.w	r3, r3, #8
 8005658:	2b00      	cmp	r3, #0
 800565a:	d106      	bne.n	800566a <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8005664:	2b00      	cmp	r3, #0
 8005666:	f000 80a3 	beq.w	80057b0 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	695b      	ldr	r3, [r3, #20]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d076      	beq.n	8005760 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f003 0310 	and.w	r3, r3, #16
 800567a:	2b00      	cmp	r3, #0
 800567c:	d046      	beq.n	800570c <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800567e:	f7ff fc66 	bl	8004f4e <LL_RCC_LSI1_IsReady>
 8005682:	4603      	mov	r3, r0
 8005684:	2b00      	cmp	r3, #0
 8005686:	d113      	bne.n	80056b0 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8005688:	f7ff fc3f 	bl	8004f0a <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800568c:	f7fd fe3e 	bl	800330c <HAL_GetTick>
 8005690:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8005692:	e008      	b.n	80056a6 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005694:	f7fd fe3a 	bl	800330c <HAL_GetTick>
 8005698:	4602      	mov	r2, r0
 800569a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800569c:	1ad3      	subs	r3, r2, r3
 800569e:	2b02      	cmp	r3, #2
 80056a0:	d901      	bls.n	80056a6 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 80056a2:	2303      	movs	r3, #3
 80056a4:	e203      	b.n	8005aae <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80056a6:	f7ff fc52 	bl	8004f4e <LL_RCC_LSI1_IsReady>
 80056aa:	4603      	mov	r3, r0
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d0f1      	beq.n	8005694 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80056b0:	f7ff fc5f 	bl	8004f72 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056b4:	f7fd fe2a 	bl	800330c <HAL_GetTick>
 80056b8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80056ba:	e008      	b.n	80056ce <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80056bc:	f7fd fe26 	bl	800330c <HAL_GetTick>
 80056c0:	4602      	mov	r2, r0
 80056c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056c4:	1ad3      	subs	r3, r2, r3
 80056c6:	2b03      	cmp	r3, #3
 80056c8:	d901      	bls.n	80056ce <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 80056ca:	2303      	movs	r3, #3
 80056cc:	e1ef      	b.n	8005aae <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80056ce:	f7ff fc72 	bl	8004fb6 <LL_RCC_LSI2_IsReady>
 80056d2:	4603      	mov	r3, r0
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d0f1      	beq.n	80056bc <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	699b      	ldr	r3, [r3, #24]
 80056dc:	4618      	mov	r0, r3
 80056de:	f7ff fc7c 	bl	8004fda <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80056e2:	f7ff fc23 	bl	8004f2c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056e6:	f7fd fe11 	bl	800330c <HAL_GetTick>
 80056ea:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80056ec:	e008      	b.n	8005700 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80056ee:	f7fd fe0d 	bl	800330c <HAL_GetTick>
 80056f2:	4602      	mov	r2, r0
 80056f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056f6:	1ad3      	subs	r3, r2, r3
 80056f8:	2b02      	cmp	r3, #2
 80056fa:	d901      	bls.n	8005700 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80056fc:	2303      	movs	r3, #3
 80056fe:	e1d6      	b.n	8005aae <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8005700:	f7ff fc25 	bl	8004f4e <LL_RCC_LSI1_IsReady>
 8005704:	4603      	mov	r3, r0
 8005706:	2b00      	cmp	r3, #0
 8005708:	d1f1      	bne.n	80056ee <HAL_RCC_OscConfig+0x31a>
 800570a:	e051      	b.n	80057b0 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800570c:	f7ff fbfd 	bl	8004f0a <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005710:	f7fd fdfc 	bl	800330c <HAL_GetTick>
 8005714:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8005716:	e00c      	b.n	8005732 <HAL_RCC_OscConfig+0x35e>
 8005718:	20000008 	.word	0x20000008
 800571c:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005720:	f7fd fdf4 	bl	800330c <HAL_GetTick>
 8005724:	4602      	mov	r2, r0
 8005726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005728:	1ad3      	subs	r3, r2, r3
 800572a:	2b02      	cmp	r3, #2
 800572c:	d901      	bls.n	8005732 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800572e:	2303      	movs	r3, #3
 8005730:	e1bd      	b.n	8005aae <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8005732:	f7ff fc0c 	bl	8004f4e <LL_RCC_LSI1_IsReady>
 8005736:	4603      	mov	r3, r0
 8005738:	2b00      	cmp	r3, #0
 800573a:	d0f1      	beq.n	8005720 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800573c:	f7ff fc2a 	bl	8004f94 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8005740:	e008      	b.n	8005754 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005742:	f7fd fde3 	bl	800330c <HAL_GetTick>
 8005746:	4602      	mov	r2, r0
 8005748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800574a:	1ad3      	subs	r3, r2, r3
 800574c:	2b03      	cmp	r3, #3
 800574e:	d901      	bls.n	8005754 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8005750:	2303      	movs	r3, #3
 8005752:	e1ac      	b.n	8005aae <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8005754:	f7ff fc2f 	bl	8004fb6 <LL_RCC_LSI2_IsReady>
 8005758:	4603      	mov	r3, r0
 800575a:	2b00      	cmp	r3, #0
 800575c:	d1f1      	bne.n	8005742 <HAL_RCC_OscConfig+0x36e>
 800575e:	e027      	b.n	80057b0 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8005760:	f7ff fc18 	bl	8004f94 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005764:	f7fd fdd2 	bl	800330c <HAL_GetTick>
 8005768:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800576a:	e008      	b.n	800577e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800576c:	f7fd fdce 	bl	800330c <HAL_GetTick>
 8005770:	4602      	mov	r2, r0
 8005772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005774:	1ad3      	subs	r3, r2, r3
 8005776:	2b03      	cmp	r3, #3
 8005778:	d901      	bls.n	800577e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800577a:	2303      	movs	r3, #3
 800577c:	e197      	b.n	8005aae <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800577e:	f7ff fc1a 	bl	8004fb6 <LL_RCC_LSI2_IsReady>
 8005782:	4603      	mov	r3, r0
 8005784:	2b00      	cmp	r3, #0
 8005786:	d1f1      	bne.n	800576c <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8005788:	f7ff fbd0 	bl	8004f2c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800578c:	f7fd fdbe 	bl	800330c <HAL_GetTick>
 8005790:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8005792:	e008      	b.n	80057a6 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005794:	f7fd fdba 	bl	800330c <HAL_GetTick>
 8005798:	4602      	mov	r2, r0
 800579a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800579c:	1ad3      	subs	r3, r2, r3
 800579e:	2b02      	cmp	r3, #2
 80057a0:	d901      	bls.n	80057a6 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 80057a2:	2303      	movs	r3, #3
 80057a4:	e183      	b.n	8005aae <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80057a6:	f7ff fbd2 	bl	8004f4e <LL_RCC_LSI1_IsReady>
 80057aa:	4603      	mov	r3, r0
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d1f1      	bne.n	8005794 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f003 0304 	and.w	r3, r3, #4
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d05b      	beq.n	8005874 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80057bc:	4ba7      	ldr	r3, [pc, #668]	@ (8005a5c <HAL_RCC_OscConfig+0x688>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d114      	bne.n	80057f2 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80057c8:	f7ff fa70 	bl	8004cac <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80057cc:	f7fd fd9e 	bl	800330c <HAL_GetTick>
 80057d0:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80057d2:	e008      	b.n	80057e6 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057d4:	f7fd fd9a 	bl	800330c <HAL_GetTick>
 80057d8:	4602      	mov	r2, r0
 80057da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057dc:	1ad3      	subs	r3, r2, r3
 80057de:	2b02      	cmp	r3, #2
 80057e0:	d901      	bls.n	80057e6 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 80057e2:	2303      	movs	r3, #3
 80057e4:	e163      	b.n	8005aae <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80057e6:	4b9d      	ldr	r3, [pc, #628]	@ (8005a5c <HAL_RCC_OscConfig+0x688>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d0f0      	beq.n	80057d4 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	689b      	ldr	r3, [r3, #8]
 80057f6:	2b01      	cmp	r3, #1
 80057f8:	d102      	bne.n	8005800 <HAL_RCC_OscConfig+0x42c>
 80057fa:	f7ff fb30 	bl	8004e5e <LL_RCC_LSE_Enable>
 80057fe:	e00c      	b.n	800581a <HAL_RCC_OscConfig+0x446>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	689b      	ldr	r3, [r3, #8]
 8005804:	2b05      	cmp	r3, #5
 8005806:	d104      	bne.n	8005812 <HAL_RCC_OscConfig+0x43e>
 8005808:	f7ff fb4b 	bl	8004ea2 <LL_RCC_LSE_EnableBypass>
 800580c:	f7ff fb27 	bl	8004e5e <LL_RCC_LSE_Enable>
 8005810:	e003      	b.n	800581a <HAL_RCC_OscConfig+0x446>
 8005812:	f7ff fb35 	bl	8004e80 <LL_RCC_LSE_Disable>
 8005816:	f7ff fb55 	bl	8004ec4 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	689b      	ldr	r3, [r3, #8]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d014      	beq.n	800584c <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005822:	f7fd fd73 	bl	800330c <HAL_GetTick>
 8005826:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8005828:	e00a      	b.n	8005840 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800582a:	f7fd fd6f 	bl	800330c <HAL_GetTick>
 800582e:	4602      	mov	r2, r0
 8005830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005832:	1ad3      	subs	r3, r2, r3
 8005834:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005838:	4293      	cmp	r3, r2
 800583a:	d901      	bls.n	8005840 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800583c:	2303      	movs	r3, #3
 800583e:	e136      	b.n	8005aae <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8005840:	f7ff fb51 	bl	8004ee6 <LL_RCC_LSE_IsReady>
 8005844:	4603      	mov	r3, r0
 8005846:	2b00      	cmp	r3, #0
 8005848:	d0ef      	beq.n	800582a <HAL_RCC_OscConfig+0x456>
 800584a:	e013      	b.n	8005874 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800584c:	f7fd fd5e 	bl	800330c <HAL_GetTick>
 8005850:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8005852:	e00a      	b.n	800586a <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005854:	f7fd fd5a 	bl	800330c <HAL_GetTick>
 8005858:	4602      	mov	r2, r0
 800585a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800585c:	1ad3      	subs	r3, r2, r3
 800585e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005862:	4293      	cmp	r3, r2
 8005864:	d901      	bls.n	800586a <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8005866:	2303      	movs	r3, #3
 8005868:	e121      	b.n	8005aae <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800586a:	f7ff fb3c 	bl	8004ee6 <LL_RCC_LSE_IsReady>
 800586e:	4603      	mov	r3, r0
 8005870:	2b00      	cmp	r3, #0
 8005872:	d1ef      	bne.n	8005854 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800587c:	2b00      	cmp	r3, #0
 800587e:	d02c      	beq.n	80058da <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005884:	2b00      	cmp	r3, #0
 8005886:	d014      	beq.n	80058b2 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005888:	f7ff fab5 	bl	8004df6 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800588c:	f7fd fd3e 	bl	800330c <HAL_GetTick>
 8005890:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8005892:	e008      	b.n	80058a6 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005894:	f7fd fd3a 	bl	800330c <HAL_GetTick>
 8005898:	4602      	mov	r2, r0
 800589a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800589c:	1ad3      	subs	r3, r2, r3
 800589e:	2b02      	cmp	r3, #2
 80058a0:	d901      	bls.n	80058a6 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 80058a2:	2303      	movs	r3, #3
 80058a4:	e103      	b.n	8005aae <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80058a6:	f7ff fac8 	bl	8004e3a <LL_RCC_HSI48_IsReady>
 80058aa:	4603      	mov	r3, r0
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d0f1      	beq.n	8005894 <HAL_RCC_OscConfig+0x4c0>
 80058b0:	e013      	b.n	80058da <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80058b2:	f7ff fab1 	bl	8004e18 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058b6:	f7fd fd29 	bl	800330c <HAL_GetTick>
 80058ba:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80058bc:	e008      	b.n	80058d0 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80058be:	f7fd fd25 	bl	800330c <HAL_GetTick>
 80058c2:	4602      	mov	r2, r0
 80058c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058c6:	1ad3      	subs	r3, r2, r3
 80058c8:	2b02      	cmp	r3, #2
 80058ca:	d901      	bls.n	80058d0 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 80058cc:	2303      	movs	r3, #3
 80058ce:	e0ee      	b.n	8005aae <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80058d0:	f7ff fab3 	bl	8004e3a <LL_RCC_HSI48_IsReady>
 80058d4:	4603      	mov	r3, r0
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d1f1      	bne.n	80058be <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058de:	2b00      	cmp	r3, #0
 80058e0:	f000 80e4 	beq.w	8005aac <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80058e4:	f7ff fc11 	bl	800510a <LL_RCC_GetSysClkSource>
 80058e8:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80058ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80058ee:	68db      	ldr	r3, [r3, #12]
 80058f0:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058f6:	2b02      	cmp	r3, #2
 80058f8:	f040 80b4 	bne.w	8005a64 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	f003 0203 	and.w	r2, r3, #3
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005906:	429a      	cmp	r2, r3
 8005908:	d123      	bne.n	8005952 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005914:	429a      	cmp	r2, r3
 8005916:	d11c      	bne.n	8005952 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	0a1b      	lsrs	r3, r3, #8
 800591c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005924:	429a      	cmp	r2, r3
 8005926:	d114      	bne.n	8005952 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8005932:	429a      	cmp	r2, r3
 8005934:	d10d      	bne.n	8005952 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005940:	429a      	cmp	r2, r3
 8005942:	d106      	bne.n	8005952 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800594e:	429a      	cmp	r2, r3
 8005950:	d05d      	beq.n	8005a0e <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	2b0c      	cmp	r3, #12
 8005956:	d058      	beq.n	8005a0a <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005958:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005962:	2b00      	cmp	r3, #0
 8005964:	d001      	beq.n	800596a <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8005966:	2301      	movs	r3, #1
 8005968:	e0a1      	b.n	8005aae <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800596a:	f7ff fc84 	bl	8005276 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800596e:	f7fd fccd 	bl	800330c <HAL_GetTick>
 8005972:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005974:	e008      	b.n	8005988 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005976:	f7fd fcc9 	bl	800330c <HAL_GetTick>
 800597a:	4602      	mov	r2, r0
 800597c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800597e:	1ad3      	subs	r3, r2, r3
 8005980:	2b02      	cmp	r3, #2
 8005982:	d901      	bls.n	8005988 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8005984:	2303      	movs	r3, #3
 8005986:	e092      	b.n	8005aae <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005988:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005992:	2b00      	cmp	r3, #0
 8005994:	d1ef      	bne.n	8005976 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005996:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800599a:	68da      	ldr	r2, [r3, #12]
 800599c:	4b30      	ldr	r3, [pc, #192]	@ (8005a60 <HAL_RCC_OscConfig+0x68c>)
 800599e:	4013      	ands	r3, r2
 80059a0:	687a      	ldr	r2, [r7, #4]
 80059a2:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 80059a4:	687a      	ldr	r2, [r7, #4]
 80059a6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80059a8:	4311      	orrs	r1, r2
 80059aa:	687a      	ldr	r2, [r7, #4]
 80059ac:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80059ae:	0212      	lsls	r2, r2, #8
 80059b0:	4311      	orrs	r1, r2
 80059b2:	687a      	ldr	r2, [r7, #4]
 80059b4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80059b6:	4311      	orrs	r1, r2
 80059b8:	687a      	ldr	r2, [r7, #4]
 80059ba:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80059bc:	4311      	orrs	r1, r2
 80059be:	687a      	ldr	r2, [r7, #4]
 80059c0:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80059c2:	430a      	orrs	r2, r1
 80059c4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80059c8:	4313      	orrs	r3, r2
 80059ca:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80059cc:	f7ff fc44 	bl	8005258 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80059d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80059d4:	68db      	ldr	r3, [r3, #12]
 80059d6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80059da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80059de:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80059e0:	f7fd fc94 	bl	800330c <HAL_GetTick>
 80059e4:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80059e6:	e008      	b.n	80059fa <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059e8:	f7fd fc90 	bl	800330c <HAL_GetTick>
 80059ec:	4602      	mov	r2, r0
 80059ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059f0:	1ad3      	subs	r3, r2, r3
 80059f2:	2b02      	cmp	r3, #2
 80059f4:	d901      	bls.n	80059fa <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 80059f6:	2303      	movs	r3, #3
 80059f8:	e059      	b.n	8005aae <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80059fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d0ef      	beq.n	80059e8 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005a08:	e050      	b.n	8005aac <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	e04f      	b.n	8005aae <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d147      	bne.n	8005aac <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005a1c:	f7ff fc1c 	bl	8005258 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005a20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a24:	68db      	ldr	r3, [r3, #12]
 8005a26:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005a2a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a2e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005a30:	f7fd fc6c 	bl	800330c <HAL_GetTick>
 8005a34:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a36:	e008      	b.n	8005a4a <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a38:	f7fd fc68 	bl	800330c <HAL_GetTick>
 8005a3c:	4602      	mov	r2, r0
 8005a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a40:	1ad3      	subs	r3, r2, r3
 8005a42:	2b02      	cmp	r3, #2
 8005a44:	d901      	bls.n	8005a4a <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8005a46:	2303      	movs	r3, #3
 8005a48:	e031      	b.n	8005aae <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d0ef      	beq.n	8005a38 <HAL_RCC_OscConfig+0x664>
 8005a58:	e028      	b.n	8005aac <HAL_RCC_OscConfig+0x6d8>
 8005a5a:	bf00      	nop
 8005a5c:	58000400 	.word	0x58000400
 8005a60:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005a64:	693b      	ldr	r3, [r7, #16]
 8005a66:	2b0c      	cmp	r3, #12
 8005a68:	d01e      	beq.n	8005aa8 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a6a:	f7ff fc04 	bl	8005276 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a6e:	f7fd fc4d 	bl	800330c <HAL_GetTick>
 8005a72:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a74:	e008      	b.n	8005a88 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a76:	f7fd fc49 	bl	800330c <HAL_GetTick>
 8005a7a:	4602      	mov	r2, r0
 8005a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a7e:	1ad3      	subs	r3, r2, r3
 8005a80:	2b02      	cmp	r3, #2
 8005a82:	d901      	bls.n	8005a88 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8005a84:	2303      	movs	r3, #3
 8005a86:	e012      	b.n	8005aae <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d1ef      	bne.n	8005a76 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8005a96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a9a:	68da      	ldr	r2, [r3, #12]
 8005a9c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005aa0:	4b05      	ldr	r3, [pc, #20]	@ (8005ab8 <HAL_RCC_OscConfig+0x6e4>)
 8005aa2:	4013      	ands	r3, r2
 8005aa4:	60cb      	str	r3, [r1, #12]
 8005aa6:	e001      	b.n	8005aac <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	e000      	b.n	8005aae <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8005aac:	2300      	movs	r3, #0
}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	3734      	adds	r7, #52	@ 0x34
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd90      	pop	{r4, r7, pc}
 8005ab6:	bf00      	nop
 8005ab8:	eefefffc 	.word	0xeefefffc

08005abc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b084      	sub	sp, #16
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
 8005ac4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d101      	bne.n	8005ad0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005acc:	2301      	movs	r3, #1
 8005ace:	e12d      	b.n	8005d2c <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005ad0:	4b98      	ldr	r3, [pc, #608]	@ (8005d34 <HAL_RCC_ClockConfig+0x278>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f003 0307 	and.w	r3, r3, #7
 8005ad8:	683a      	ldr	r2, [r7, #0]
 8005ada:	429a      	cmp	r2, r3
 8005adc:	d91b      	bls.n	8005b16 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ade:	4b95      	ldr	r3, [pc, #596]	@ (8005d34 <HAL_RCC_ClockConfig+0x278>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f023 0207 	bic.w	r2, r3, #7
 8005ae6:	4993      	ldr	r1, [pc, #588]	@ (8005d34 <HAL_RCC_ClockConfig+0x278>)
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	4313      	orrs	r3, r2
 8005aec:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005aee:	f7fd fc0d 	bl	800330c <HAL_GetTick>
 8005af2:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005af4:	e008      	b.n	8005b08 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005af6:	f7fd fc09 	bl	800330c <HAL_GetTick>
 8005afa:	4602      	mov	r2, r0
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	1ad3      	subs	r3, r2, r3
 8005b00:	2b02      	cmp	r3, #2
 8005b02:	d901      	bls.n	8005b08 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8005b04:	2303      	movs	r3, #3
 8005b06:	e111      	b.n	8005d2c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b08:	4b8a      	ldr	r3, [pc, #552]	@ (8005d34 <HAL_RCC_ClockConfig+0x278>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f003 0307 	and.w	r3, r3, #7
 8005b10:	683a      	ldr	r2, [r7, #0]
 8005b12:	429a      	cmp	r2, r3
 8005b14:	d1ef      	bne.n	8005af6 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f003 0302 	and.w	r3, r3, #2
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d016      	beq.n	8005b50 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	689b      	ldr	r3, [r3, #8]
 8005b26:	4618      	mov	r0, r3
 8005b28:	f7ff fafb 	bl	8005122 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005b2c:	f7fd fbee 	bl	800330c <HAL_GetTick>
 8005b30:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005b32:	e008      	b.n	8005b46 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005b34:	f7fd fbea 	bl	800330c <HAL_GetTick>
 8005b38:	4602      	mov	r2, r0
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	1ad3      	subs	r3, r2, r3
 8005b3e:	2b02      	cmp	r3, #2
 8005b40:	d901      	bls.n	8005b46 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8005b42:	2303      	movs	r3, #3
 8005b44:	e0f2      	b.n	8005d2c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005b46:	f7ff fbe8 	bl	800531a <LL_RCC_IsActiveFlag_HPRE>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d0f1      	beq.n	8005b34 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f003 0320 	and.w	r3, r3, #32
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d016      	beq.n	8005b8a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	695b      	ldr	r3, [r3, #20]
 8005b60:	4618      	mov	r0, r3
 8005b62:	f7ff faf2 	bl	800514a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005b66:	f7fd fbd1 	bl	800330c <HAL_GetTick>
 8005b6a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005b6c:	e008      	b.n	8005b80 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005b6e:	f7fd fbcd 	bl	800330c <HAL_GetTick>
 8005b72:	4602      	mov	r2, r0
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	1ad3      	subs	r3, r2, r3
 8005b78:	2b02      	cmp	r3, #2
 8005b7a:	d901      	bls.n	8005b80 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8005b7c:	2303      	movs	r3, #3
 8005b7e:	e0d5      	b.n	8005d2c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005b80:	f7ff fbdd 	bl	800533e <LL_RCC_IsActiveFlag_C2HPRE>
 8005b84:	4603      	mov	r3, r0
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d0f1      	beq.n	8005b6e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d016      	beq.n	8005bc4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	699b      	ldr	r3, [r3, #24]
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f7ff faeb 	bl	8005176 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005ba0:	f7fd fbb4 	bl	800330c <HAL_GetTick>
 8005ba4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005ba6:	e008      	b.n	8005bba <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005ba8:	f7fd fbb0 	bl	800330c <HAL_GetTick>
 8005bac:	4602      	mov	r2, r0
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	1ad3      	subs	r3, r2, r3
 8005bb2:	2b02      	cmp	r3, #2
 8005bb4:	d901      	bls.n	8005bba <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8005bb6:	2303      	movs	r3, #3
 8005bb8:	e0b8      	b.n	8005d2c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005bba:	f7ff fbd3 	bl	8005364 <LL_RCC_IsActiveFlag_SHDHPRE>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d0f1      	beq.n	8005ba8 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f003 0304 	and.w	r3, r3, #4
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d016      	beq.n	8005bfe <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	68db      	ldr	r3, [r3, #12]
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	f7ff fae5 	bl	80051a4 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005bda:	f7fd fb97 	bl	800330c <HAL_GetTick>
 8005bde:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005be0:	e008      	b.n	8005bf4 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005be2:	f7fd fb93 	bl	800330c <HAL_GetTick>
 8005be6:	4602      	mov	r2, r0
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	1ad3      	subs	r3, r2, r3
 8005bec:	2b02      	cmp	r3, #2
 8005bee:	d901      	bls.n	8005bf4 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8005bf0:	2303      	movs	r3, #3
 8005bf2:	e09b      	b.n	8005d2c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005bf4:	f7ff fbc9 	bl	800538a <LL_RCC_IsActiveFlag_PPRE1>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d0f1      	beq.n	8005be2 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f003 0308 	and.w	r3, r3, #8
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d017      	beq.n	8005c3a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	691b      	ldr	r3, [r3, #16]
 8005c0e:	00db      	lsls	r3, r3, #3
 8005c10:	4618      	mov	r0, r3
 8005c12:	f7ff fadb 	bl	80051cc <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005c16:	f7fd fb79 	bl	800330c <HAL_GetTick>
 8005c1a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005c1c:	e008      	b.n	8005c30 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005c1e:	f7fd fb75 	bl	800330c <HAL_GetTick>
 8005c22:	4602      	mov	r2, r0
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	1ad3      	subs	r3, r2, r3
 8005c28:	2b02      	cmp	r3, #2
 8005c2a:	d901      	bls.n	8005c30 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8005c2c:	2303      	movs	r3, #3
 8005c2e:	e07d      	b.n	8005d2c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005c30:	f7ff fbbd 	bl	80053ae <LL_RCC_IsActiveFlag_PPRE2>
 8005c34:	4603      	mov	r3, r0
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d0f1      	beq.n	8005c1e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f003 0301 	and.w	r3, r3, #1
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d043      	beq.n	8005cce <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	2b02      	cmp	r3, #2
 8005c4c:	d106      	bne.n	8005c5c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8005c4e:	f7ff f87b 	bl	8004d48 <LL_RCC_HSE_IsReady>
 8005c52:	4603      	mov	r3, r0
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d11e      	bne.n	8005c96 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005c58:	2301      	movs	r3, #1
 8005c5a:	e067      	b.n	8005d2c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	2b03      	cmp	r3, #3
 8005c62:	d106      	bne.n	8005c72 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8005c64:	f7ff fb16 	bl	8005294 <LL_RCC_PLL_IsReady>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d113      	bne.n	8005c96 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005c6e:	2301      	movs	r3, #1
 8005c70:	e05c      	b.n	8005d2c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d106      	bne.n	8005c88 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8005c7a:	f7ff f9e3 	bl	8005044 <LL_RCC_MSI_IsReady>
 8005c7e:	4603      	mov	r3, r0
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d108      	bne.n	8005c96 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005c84:	2301      	movs	r3, #1
 8005c86:	e051      	b.n	8005d2c <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8005c88:	f7ff f88e 	bl	8004da8 <LL_RCC_HSI_IsReady>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d101      	bne.n	8005c96 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005c92:	2301      	movs	r3, #1
 8005c94:	e04a      	b.n	8005d2c <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	f7ff fa21 	bl	80050e2 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ca0:	f7fd fb34 	bl	800330c <HAL_GetTick>
 8005ca4:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ca6:	e00a      	b.n	8005cbe <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ca8:	f7fd fb30 	bl	800330c <HAL_GetTick>
 8005cac:	4602      	mov	r2, r0
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	1ad3      	subs	r3, r2, r3
 8005cb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d901      	bls.n	8005cbe <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8005cba:	2303      	movs	r3, #3
 8005cbc:	e036      	b.n	8005d2c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cbe:	f7ff fa24 	bl	800510a <LL_RCC_GetSysClkSource>
 8005cc2:	4602      	mov	r2, r0
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	685b      	ldr	r3, [r3, #4]
 8005cc8:	009b      	lsls	r3, r3, #2
 8005cca:	429a      	cmp	r2, r3
 8005ccc:	d1ec      	bne.n	8005ca8 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005cce:	4b19      	ldr	r3, [pc, #100]	@ (8005d34 <HAL_RCC_ClockConfig+0x278>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f003 0307 	and.w	r3, r3, #7
 8005cd6:	683a      	ldr	r2, [r7, #0]
 8005cd8:	429a      	cmp	r2, r3
 8005cda:	d21b      	bcs.n	8005d14 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cdc:	4b15      	ldr	r3, [pc, #84]	@ (8005d34 <HAL_RCC_ClockConfig+0x278>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f023 0207 	bic.w	r2, r3, #7
 8005ce4:	4913      	ldr	r1, [pc, #76]	@ (8005d34 <HAL_RCC_ClockConfig+0x278>)
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005cec:	f7fd fb0e 	bl	800330c <HAL_GetTick>
 8005cf0:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cf2:	e008      	b.n	8005d06 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005cf4:	f7fd fb0a 	bl	800330c <HAL_GetTick>
 8005cf8:	4602      	mov	r2, r0
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	1ad3      	subs	r3, r2, r3
 8005cfe:	2b02      	cmp	r3, #2
 8005d00:	d901      	bls.n	8005d06 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8005d02:	2303      	movs	r3, #3
 8005d04:	e012      	b.n	8005d2c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d06:	4b0b      	ldr	r3, [pc, #44]	@ (8005d34 <HAL_RCC_ClockConfig+0x278>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f003 0307 	and.w	r3, r3, #7
 8005d0e:	683a      	ldr	r2, [r7, #0]
 8005d10:	429a      	cmp	r2, r3
 8005d12:	d1ef      	bne.n	8005cf4 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005d14:	f000 f87e 	bl	8005e14 <HAL_RCC_GetHCLKFreq>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	4a07      	ldr	r2, [pc, #28]	@ (8005d38 <HAL_RCC_ClockConfig+0x27c>)
 8005d1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8005d1e:	f7fd fb01 	bl	8003324 <HAL_GetTickPrio>
 8005d22:	4603      	mov	r3, r0
 8005d24:	4618      	mov	r0, r3
 8005d26:	f7fd faa3 	bl	8003270 <HAL_InitTick>
 8005d2a:	4603      	mov	r3, r0
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	3710      	adds	r7, #16
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}
 8005d34:	58004000 	.word	0x58004000
 8005d38:	20000008 	.word	0x20000008

08005d3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d3c:	b590      	push	{r4, r7, lr}
 8005d3e:	b085      	sub	sp, #20
 8005d40:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005d42:	f7ff f9e2 	bl	800510a <LL_RCC_GetSysClkSource>
 8005d46:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d10a      	bne.n	8005d64 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005d4e:	f7ff f99e 	bl	800508e <LL_RCC_MSI_GetRange>
 8005d52:	4603      	mov	r3, r0
 8005d54:	091b      	lsrs	r3, r3, #4
 8005d56:	f003 030f 	and.w	r3, r3, #15
 8005d5a:	4a2b      	ldr	r2, [pc, #172]	@ (8005e08 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005d5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d60:	60fb      	str	r3, [r7, #12]
 8005d62:	e04b      	b.n	8005dfc <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2b04      	cmp	r3, #4
 8005d68:	d102      	bne.n	8005d70 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005d6a:	4b28      	ldr	r3, [pc, #160]	@ (8005e0c <HAL_RCC_GetSysClockFreq+0xd0>)
 8005d6c:	60fb      	str	r3, [r7, #12]
 8005d6e:	e045      	b.n	8005dfc <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2b08      	cmp	r3, #8
 8005d74:	d10a      	bne.n	8005d8c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005d76:	f7fe ffb7 	bl	8004ce8 <LL_RCC_HSE_IsEnabledDiv2>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	2b01      	cmp	r3, #1
 8005d7e:	d102      	bne.n	8005d86 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8005d80:	4b22      	ldr	r3, [pc, #136]	@ (8005e0c <HAL_RCC_GetSysClockFreq+0xd0>)
 8005d82:	60fb      	str	r3, [r7, #12]
 8005d84:	e03a      	b.n	8005dfc <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8005d86:	4b22      	ldr	r3, [pc, #136]	@ (8005e10 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005d88:	60fb      	str	r3, [r7, #12]
 8005d8a:	e037      	b.n	8005dfc <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8005d8c:	f7ff fab9 	bl	8005302 <LL_RCC_PLL_GetMainSource>
 8005d90:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	2b02      	cmp	r3, #2
 8005d96:	d003      	beq.n	8005da0 <HAL_RCC_GetSysClockFreq+0x64>
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	2b03      	cmp	r3, #3
 8005d9c:	d003      	beq.n	8005da6 <HAL_RCC_GetSysClockFreq+0x6a>
 8005d9e:	e00d      	b.n	8005dbc <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8005da0:	4b1a      	ldr	r3, [pc, #104]	@ (8005e0c <HAL_RCC_GetSysClockFreq+0xd0>)
 8005da2:	60bb      	str	r3, [r7, #8]
        break;
 8005da4:	e015      	b.n	8005dd2 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005da6:	f7fe ff9f 	bl	8004ce8 <LL_RCC_HSE_IsEnabledDiv2>
 8005daa:	4603      	mov	r3, r0
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	d102      	bne.n	8005db6 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8005db0:	4b16      	ldr	r3, [pc, #88]	@ (8005e0c <HAL_RCC_GetSysClockFreq+0xd0>)
 8005db2:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8005db4:	e00d      	b.n	8005dd2 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8005db6:	4b16      	ldr	r3, [pc, #88]	@ (8005e10 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005db8:	60bb      	str	r3, [r7, #8]
        break;
 8005dba:	e00a      	b.n	8005dd2 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005dbc:	f7ff f967 	bl	800508e <LL_RCC_MSI_GetRange>
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	091b      	lsrs	r3, r3, #4
 8005dc4:	f003 030f 	and.w	r3, r3, #15
 8005dc8:	4a0f      	ldr	r2, [pc, #60]	@ (8005e08 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005dca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005dce:	60bb      	str	r3, [r7, #8]
        break;
 8005dd0:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8005dd2:	f7ff fa71 	bl	80052b8 <LL_RCC_PLL_GetN>
 8005dd6:	4602      	mov	r2, r0
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	fb03 f402 	mul.w	r4, r3, r2
 8005dde:	f7ff fa84 	bl	80052ea <LL_RCC_PLL_GetDivider>
 8005de2:	4603      	mov	r3, r0
 8005de4:	091b      	lsrs	r3, r3, #4
 8005de6:	3301      	adds	r3, #1
 8005de8:	fbb4 f4f3 	udiv	r4, r4, r3
 8005dec:	f7ff fa71 	bl	80052d2 <LL_RCC_PLL_GetR>
 8005df0:	4603      	mov	r3, r0
 8005df2:	0f5b      	lsrs	r3, r3, #29
 8005df4:	3301      	adds	r3, #1
 8005df6:	fbb4 f3f3 	udiv	r3, r4, r3
 8005dfa:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
}
 8005dfe:	4618      	mov	r0, r3
 8005e00:	3714      	adds	r7, #20
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd90      	pop	{r4, r7, pc}
 8005e06:	bf00      	nop
 8005e08:	08010d24 	.word	0x08010d24
 8005e0c:	00f42400 	.word	0x00f42400
 8005e10:	01e84800 	.word	0x01e84800

08005e14 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005e14:	b598      	push	{r3, r4, r7, lr}
 8005e16:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8005e18:	f7ff ff90 	bl	8005d3c <HAL_RCC_GetSysClockFreq>
 8005e1c:	4604      	mov	r4, r0
 8005e1e:	f7ff f9e9 	bl	80051f4 <LL_RCC_GetAHBPrescaler>
 8005e22:	4603      	mov	r3, r0
 8005e24:	091b      	lsrs	r3, r3, #4
 8005e26:	f003 030f 	and.w	r3, r3, #15
 8005e2a:	4a03      	ldr	r2, [pc, #12]	@ (8005e38 <HAL_RCC_GetHCLKFreq+0x24>)
 8005e2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e30:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	bd98      	pop	{r3, r4, r7, pc}
 8005e38:	08010cc4 	.word	0x08010cc4

08005e3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005e3c:	b598      	push	{r3, r4, r7, lr}
 8005e3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005e40:	f7ff ffe8 	bl	8005e14 <HAL_RCC_GetHCLKFreq>
 8005e44:	4604      	mov	r4, r0
 8005e46:	f7ff f9ef 	bl	8005228 <LL_RCC_GetAPB1Prescaler>
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	0a1b      	lsrs	r3, r3, #8
 8005e4e:	f003 0307 	and.w	r3, r3, #7
 8005e52:	4a04      	ldr	r2, [pc, #16]	@ (8005e64 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005e54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e58:	f003 031f 	and.w	r3, r3, #31
 8005e5c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	bd98      	pop	{r3, r4, r7, pc}
 8005e64:	08010d04 	.word	0x08010d04

08005e68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005e68:	b598      	push	{r3, r4, r7, lr}
 8005e6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8005e6c:	f7ff ffd2 	bl	8005e14 <HAL_RCC_GetHCLKFreq>
 8005e70:	4604      	mov	r4, r0
 8005e72:	f7ff f9e5 	bl	8005240 <LL_RCC_GetAPB2Prescaler>
 8005e76:	4603      	mov	r3, r0
 8005e78:	0adb      	lsrs	r3, r3, #11
 8005e7a:	f003 0307 	and.w	r3, r3, #7
 8005e7e:	4a04      	ldr	r2, [pc, #16]	@ (8005e90 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005e80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e84:	f003 031f 	and.w	r3, r3, #31
 8005e88:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	bd98      	pop	{r3, r4, r7, pc}
 8005e90:	08010d04 	.word	0x08010d04

08005e94 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8005e94:	b590      	push	{r4, r7, lr}
 8005e96:	b085      	sub	sp, #20
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2bb0      	cmp	r3, #176	@ 0xb0
 8005ea0:	d903      	bls.n	8005eaa <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8005ea2:	4b15      	ldr	r3, [pc, #84]	@ (8005ef8 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005ea4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ea6:	60fb      	str	r3, [r7, #12]
 8005ea8:	e007      	b.n	8005eba <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	091b      	lsrs	r3, r3, #4
 8005eae:	f003 030f 	and.w	r3, r3, #15
 8005eb2:	4a11      	ldr	r2, [pc, #68]	@ (8005ef8 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005eb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005eb8:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8005eba:	f7ff f9a7 	bl	800520c <LL_RCC_GetAHB4Prescaler>
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	091b      	lsrs	r3, r3, #4
 8005ec2:	f003 030f 	and.w	r3, r3, #15
 8005ec6:	4a0d      	ldr	r2, [pc, #52]	@ (8005efc <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8005ec8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ecc:	68fa      	ldr	r2, [r7, #12]
 8005ece:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ed2:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	4a0a      	ldr	r2, [pc, #40]	@ (8005f00 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8005ed8:	fba2 2303 	umull	r2, r3, r2, r3
 8005edc:	0c9c      	lsrs	r4, r3, #18
 8005ede:	f7fe fef5 	bl	8004ccc <HAL_PWREx_GetVoltageRange>
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	4619      	mov	r1, r3
 8005ee6:	4620      	mov	r0, r4
 8005ee8:	f000 f80c 	bl	8005f04 <RCC_SetFlashLatency>
 8005eec:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	3714      	adds	r7, #20
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd90      	pop	{r4, r7, pc}
 8005ef6:	bf00      	nop
 8005ef8:	08010d24 	.word	0x08010d24
 8005efc:	08010cc4 	.word	0x08010cc4
 8005f00:	431bde83 	.word	0x431bde83

08005f04 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8005f04:	b590      	push	{r4, r7, lr}
 8005f06:	b093      	sub	sp, #76	@ 0x4c
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
 8005f0c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8005f0e:	4b37      	ldr	r3, [pc, #220]	@ (8005fec <RCC_SetFlashLatency+0xe8>)
 8005f10:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8005f14:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005f16:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8005f1a:	4a35      	ldr	r2, [pc, #212]	@ (8005ff0 <RCC_SetFlashLatency+0xec>)
 8005f1c:	f107 031c 	add.w	r3, r7, #28
 8005f20:	ca07      	ldmia	r2, {r0, r1, r2}
 8005f22:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8005f26:	4b33      	ldr	r3, [pc, #204]	@ (8005ff4 <RCC_SetFlashLatency+0xf0>)
 8005f28:	f107 040c 	add.w	r4, r7, #12
 8005f2c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005f2e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8005f32:	2300      	movs	r3, #0
 8005f34:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f3c:	d11a      	bne.n	8005f74 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005f3e:	2300      	movs	r3, #0
 8005f40:	643b      	str	r3, [r7, #64]	@ 0x40
 8005f42:	e013      	b.n	8005f6c <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8005f44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f46:	009b      	lsls	r3, r3, #2
 8005f48:	3348      	adds	r3, #72	@ 0x48
 8005f4a:	443b      	add	r3, r7
 8005f4c:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8005f50:	687a      	ldr	r2, [r7, #4]
 8005f52:	429a      	cmp	r2, r3
 8005f54:	d807      	bhi.n	8005f66 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005f56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f58:	009b      	lsls	r3, r3, #2
 8005f5a:	3348      	adds	r3, #72	@ 0x48
 8005f5c:	443b      	add	r3, r7
 8005f5e:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005f62:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8005f64:	e020      	b.n	8005fa8 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005f66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f68:	3301      	adds	r3, #1
 8005f6a:	643b      	str	r3, [r7, #64]	@ 0x40
 8005f6c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f6e:	2b03      	cmp	r3, #3
 8005f70:	d9e8      	bls.n	8005f44 <RCC_SetFlashLatency+0x40>
 8005f72:	e019      	b.n	8005fa8 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005f74:	2300      	movs	r3, #0
 8005f76:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005f78:	e013      	b.n	8005fa2 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8005f7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f7c:	009b      	lsls	r3, r3, #2
 8005f7e:	3348      	adds	r3, #72	@ 0x48
 8005f80:	443b      	add	r3, r7
 8005f82:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8005f86:	687a      	ldr	r2, [r7, #4]
 8005f88:	429a      	cmp	r2, r3
 8005f8a:	d807      	bhi.n	8005f9c <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005f8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f8e:	009b      	lsls	r3, r3, #2
 8005f90:	3348      	adds	r3, #72	@ 0x48
 8005f92:	443b      	add	r3, r7
 8005f94:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005f98:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8005f9a:	e005      	b.n	8005fa8 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005f9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f9e:	3301      	adds	r3, #1
 8005fa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005fa2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005fa4:	2b02      	cmp	r3, #2
 8005fa6:	d9e8      	bls.n	8005f7a <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8005fa8:	4b13      	ldr	r3, [pc, #76]	@ (8005ff8 <RCC_SetFlashLatency+0xf4>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f023 0207 	bic.w	r2, r3, #7
 8005fb0:	4911      	ldr	r1, [pc, #68]	@ (8005ff8 <RCC_SetFlashLatency+0xf4>)
 8005fb2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005fb8:	f7fd f9a8 	bl	800330c <HAL_GetTick>
 8005fbc:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005fbe:	e008      	b.n	8005fd2 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005fc0:	f7fd f9a4 	bl	800330c <HAL_GetTick>
 8005fc4:	4602      	mov	r2, r0
 8005fc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fc8:	1ad3      	subs	r3, r2, r3
 8005fca:	2b02      	cmp	r3, #2
 8005fcc:	d901      	bls.n	8005fd2 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8005fce:	2303      	movs	r3, #3
 8005fd0:	e007      	b.n	8005fe2 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005fd2:	4b09      	ldr	r3, [pc, #36]	@ (8005ff8 <RCC_SetFlashLatency+0xf4>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f003 0307 	and.w	r3, r3, #7
 8005fda:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005fdc:	429a      	cmp	r2, r3
 8005fde:	d1ef      	bne.n	8005fc0 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8005fe0:	2300      	movs	r3, #0
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	374c      	adds	r7, #76	@ 0x4c
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bd90      	pop	{r4, r7, pc}
 8005fea:	bf00      	nop
 8005fec:	0800fb08 	.word	0x0800fb08
 8005ff0:	0800fb18 	.word	0x0800fb18
 8005ff4:	0800fb24 	.word	0x0800fb24
 8005ff8:	58004000 	.word	0x58004000

08005ffc <LL_RCC_LSE_IsEnabled>:
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8006000:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006004:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006008:	f003 0301 	and.w	r3, r3, #1
 800600c:	2b01      	cmp	r3, #1
 800600e:	d101      	bne.n	8006014 <LL_RCC_LSE_IsEnabled+0x18>
 8006010:	2301      	movs	r3, #1
 8006012:	e000      	b.n	8006016 <LL_RCC_LSE_IsEnabled+0x1a>
 8006014:	2300      	movs	r3, #0
}
 8006016:	4618      	mov	r0, r3
 8006018:	46bd      	mov	sp, r7
 800601a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601e:	4770      	bx	lr

08006020 <LL_RCC_LSE_IsReady>:
{
 8006020:	b480      	push	{r7}
 8006022:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006024:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006028:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800602c:	f003 0302 	and.w	r3, r3, #2
 8006030:	2b02      	cmp	r3, #2
 8006032:	d101      	bne.n	8006038 <LL_RCC_LSE_IsReady+0x18>
 8006034:	2301      	movs	r3, #1
 8006036:	e000      	b.n	800603a <LL_RCC_LSE_IsReady+0x1a>
 8006038:	2300      	movs	r3, #0
}
 800603a:	4618      	mov	r0, r3
 800603c:	46bd      	mov	sp, r7
 800603e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006042:	4770      	bx	lr

08006044 <LL_RCC_SetRFWKPClockSource>:
{
 8006044:	b480      	push	{r7}
 8006046:	b083      	sub	sp, #12
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800604c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006050:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006054:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006058:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	4313      	orrs	r3, r2
 8006060:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8006064:	bf00      	nop
 8006066:	370c      	adds	r7, #12
 8006068:	46bd      	mov	sp, r7
 800606a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606e:	4770      	bx	lr

08006070 <LL_RCC_SetSMPSClockSource>:
{
 8006070:	b480      	push	{r7}
 8006072:	b083      	sub	sp, #12
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8006078:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800607c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800607e:	f023 0203 	bic.w	r2, r3, #3
 8006082:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	4313      	orrs	r3, r2
 800608a:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800608c:	bf00      	nop
 800608e:	370c      	adds	r7, #12
 8006090:	46bd      	mov	sp, r7
 8006092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006096:	4770      	bx	lr

08006098 <LL_RCC_SetSMPSPrescaler>:
{
 8006098:	b480      	push	{r7}
 800609a:	b083      	sub	sp, #12
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80060a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80060a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060a6:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80060aa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	4313      	orrs	r3, r2
 80060b2:	624b      	str	r3, [r1, #36]	@ 0x24
}
 80060b4:	bf00      	nop
 80060b6:	370c      	adds	r7, #12
 80060b8:	46bd      	mov	sp, r7
 80060ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060be:	4770      	bx	lr

080060c0 <LL_RCC_SetUSARTClockSource>:
{
 80060c0:	b480      	push	{r7}
 80060c2:	b083      	sub	sp, #12
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80060c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80060cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060d0:	f023 0203 	bic.w	r2, r3, #3
 80060d4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	4313      	orrs	r3, r2
 80060dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80060e0:	bf00      	nop
 80060e2:	370c      	adds	r7, #12
 80060e4:	46bd      	mov	sp, r7
 80060e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ea:	4770      	bx	lr

080060ec <LL_RCC_SetLPUARTClockSource>:
{
 80060ec:	b480      	push	{r7}
 80060ee:	b083      	sub	sp, #12
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80060f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80060f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060fc:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006100:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	4313      	orrs	r3, r2
 8006108:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800610c:	bf00      	nop
 800610e:	370c      	adds	r7, #12
 8006110:	46bd      	mov	sp, r7
 8006112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006116:	4770      	bx	lr

08006118 <LL_RCC_SetI2CClockSource>:
{
 8006118:	b480      	push	{r7}
 800611a:	b083      	sub	sp, #12
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8006120:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006124:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	091b      	lsrs	r3, r3, #4
 800612c:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8006130:	43db      	mvns	r3, r3
 8006132:	401a      	ands	r2, r3
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	011b      	lsls	r3, r3, #4
 8006138:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800613c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006140:	4313      	orrs	r3, r2
 8006142:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006146:	bf00      	nop
 8006148:	370c      	adds	r7, #12
 800614a:	46bd      	mov	sp, r7
 800614c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006150:	4770      	bx	lr

08006152 <LL_RCC_SetLPTIMClockSource>:
{
 8006152:	b480      	push	{r7}
 8006154:	b083      	sub	sp, #12
 8006156:	af00      	add	r7, sp, #0
 8006158:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800615a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800615e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	0c1b      	lsrs	r3, r3, #16
 8006166:	041b      	lsls	r3, r3, #16
 8006168:	43db      	mvns	r3, r3
 800616a:	401a      	ands	r2, r3
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	041b      	lsls	r3, r3, #16
 8006170:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006174:	4313      	orrs	r3, r2
 8006176:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800617a:	bf00      	nop
 800617c:	370c      	adds	r7, #12
 800617e:	46bd      	mov	sp, r7
 8006180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006184:	4770      	bx	lr

08006186 <LL_RCC_SetSAIClockSource>:
{
 8006186:	b480      	push	{r7}
 8006188:	b083      	sub	sp, #12
 800618a:	af00      	add	r7, sp, #0
 800618c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800618e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006192:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006196:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800619a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	4313      	orrs	r3, r2
 80061a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80061a6:	bf00      	nop
 80061a8:	370c      	adds	r7, #12
 80061aa:	46bd      	mov	sp, r7
 80061ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b0:	4770      	bx	lr

080061b2 <LL_RCC_SetRNGClockSource>:
{
 80061b2:	b480      	push	{r7}
 80061b4:	b083      	sub	sp, #12
 80061b6:	af00      	add	r7, sp, #0
 80061b8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80061ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80061be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061c2:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80061c6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	4313      	orrs	r3, r2
 80061ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80061d2:	bf00      	nop
 80061d4:	370c      	adds	r7, #12
 80061d6:	46bd      	mov	sp, r7
 80061d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061dc:	4770      	bx	lr

080061de <LL_RCC_SetCLK48ClockSource>:
{
 80061de:	b480      	push	{r7}
 80061e0:	b083      	sub	sp, #12
 80061e2:	af00      	add	r7, sp, #0
 80061e4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80061e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80061ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061ee:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80061f2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	4313      	orrs	r3, r2
 80061fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80061fe:	bf00      	nop
 8006200:	370c      	adds	r7, #12
 8006202:	46bd      	mov	sp, r7
 8006204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006208:	4770      	bx	lr

0800620a <LL_RCC_SetUSBClockSource>:
{
 800620a:	b580      	push	{r7, lr}
 800620c:	b082      	sub	sp, #8
 800620e:	af00      	add	r7, sp, #0
 8006210:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f7ff ffe3 	bl	80061de <LL_RCC_SetCLK48ClockSource>
}
 8006218:	bf00      	nop
 800621a:	3708      	adds	r7, #8
 800621c:	46bd      	mov	sp, r7
 800621e:	bd80      	pop	{r7, pc}

08006220 <LL_RCC_SetADCClockSource>:
{
 8006220:	b480      	push	{r7}
 8006222:	b083      	sub	sp, #12
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8006228:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800622c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006230:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006234:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	4313      	orrs	r3, r2
 800623c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006240:	bf00      	nop
 8006242:	370c      	adds	r7, #12
 8006244:	46bd      	mov	sp, r7
 8006246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624a:	4770      	bx	lr

0800624c <LL_RCC_SetRTCClockSource>:
{
 800624c:	b480      	push	{r7}
 800624e:	b083      	sub	sp, #12
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8006254:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006258:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800625c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006260:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	4313      	orrs	r3, r2
 8006268:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800626c:	bf00      	nop
 800626e:	370c      	adds	r7, #12
 8006270:	46bd      	mov	sp, r7
 8006272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006276:	4770      	bx	lr

08006278 <LL_RCC_GetRTCClockSource>:
{
 8006278:	b480      	push	{r7}
 800627a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800627c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006280:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006284:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8006288:	4618      	mov	r0, r3
 800628a:	46bd      	mov	sp, r7
 800628c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006290:	4770      	bx	lr

08006292 <LL_RCC_ForceBackupDomainReset>:
{
 8006292:	b480      	push	{r7}
 8006294:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006296:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800629a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800629e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80062a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80062a6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80062aa:	bf00      	nop
 80062ac:	46bd      	mov	sp, r7
 80062ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b2:	4770      	bx	lr

080062b4 <LL_RCC_ReleaseBackupDomainReset>:
{
 80062b4:	b480      	push	{r7}
 80062b6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80062b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80062bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062c0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80062c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80062c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80062cc:	bf00      	nop
 80062ce:	46bd      	mov	sp, r7
 80062d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d4:	4770      	bx	lr

080062d6 <LL_RCC_PLLSAI1_Enable>:
{
 80062d6:	b480      	push	{r7}
 80062d8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80062da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80062e4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80062e8:	6013      	str	r3, [r2, #0]
}
 80062ea:	bf00      	nop
 80062ec:	46bd      	mov	sp, r7
 80062ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f2:	4770      	bx	lr

080062f4 <LL_RCC_PLLSAI1_Disable>:
{
 80062f4:	b480      	push	{r7}
 80062f6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80062f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006302:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006306:	6013      	str	r3, [r2, #0]
}
 8006308:	bf00      	nop
 800630a:	46bd      	mov	sp, r7
 800630c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006310:	4770      	bx	lr

08006312 <LL_RCC_PLLSAI1_IsReady>:
{
 8006312:	b480      	push	{r7}
 8006314:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8006316:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006320:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006324:	d101      	bne.n	800632a <LL_RCC_PLLSAI1_IsReady+0x18>
 8006326:	2301      	movs	r3, #1
 8006328:	e000      	b.n	800632c <LL_RCC_PLLSAI1_IsReady+0x1a>
 800632a:	2300      	movs	r3, #0
}
 800632c:	4618      	mov	r0, r3
 800632e:	46bd      	mov	sp, r7
 8006330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006334:	4770      	bx	lr

08006336 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006336:	b580      	push	{r7, lr}
 8006338:	b088      	sub	sp, #32
 800633a:	af00      	add	r7, sp, #0
 800633c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800633e:	2300      	movs	r3, #0
 8006340:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8006342:	2300      	movs	r3, #0
 8006344:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800634e:	2b00      	cmp	r3, #0
 8006350:	d034      	beq.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006356:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800635a:	d021      	beq.n	80063a0 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800635c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006360:	d81b      	bhi.n	800639a <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006362:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006366:	d01d      	beq.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8006368:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800636c:	d815      	bhi.n	800639a <HAL_RCCEx_PeriphCLKConfig+0x64>
 800636e:	2b00      	cmp	r3, #0
 8006370:	d00b      	beq.n	800638a <HAL_RCCEx_PeriphCLKConfig+0x54>
 8006372:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006376:	d110      	bne.n	800639a <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8006378:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800637c:	68db      	ldr	r3, [r3, #12]
 800637e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006382:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006386:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8006388:	e00d      	b.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	3304      	adds	r3, #4
 800638e:	4618      	mov	r0, r3
 8006390:	f000 f947 	bl	8006622 <RCCEx_PLLSAI1_ConfigNP>
 8006394:	4603      	mov	r3, r0
 8006396:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006398:	e005      	b.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800639a:	2301      	movs	r3, #1
 800639c:	77fb      	strb	r3, [r7, #31]
        break;
 800639e:	e002      	b.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80063a0:	bf00      	nop
 80063a2:	e000      	b.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80063a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063a6:	7ffb      	ldrb	r3, [r7, #31]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d105      	bne.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063b0:	4618      	mov	r0, r3
 80063b2:	f7ff fee8 	bl	8006186 <LL_RCC_SetSAIClockSource>
 80063b6:	e001      	b.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063b8:	7ffb      	ldrb	r3, [r7, #31]
 80063ba:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d046      	beq.n	8006456 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80063c8:	f7ff ff56 	bl	8006278 <LL_RCC_GetRTCClockSource>
 80063cc:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063d2:	69ba      	ldr	r2, [r7, #24]
 80063d4:	429a      	cmp	r2, r3
 80063d6:	d03c      	beq.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80063d8:	f7fe fc68 	bl	8004cac <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80063dc:	69bb      	ldr	r3, [r7, #24]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d105      	bne.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063e6:	4618      	mov	r0, r3
 80063e8:	f7ff ff30 	bl	800624c <LL_RCC_SetRTCClockSource>
 80063ec:	e02e      	b.n	800644c <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80063ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80063f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063f6:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80063f8:	f7ff ff4b 	bl	8006292 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80063fc:	f7ff ff5a 	bl	80062b4 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8006400:	697b      	ldr	r3, [r7, #20]
 8006402:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800640a:	4313      	orrs	r3, r2
 800640c:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800640e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006412:	697b      	ldr	r3, [r7, #20]
 8006414:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8006418:	f7ff fdf0 	bl	8005ffc <LL_RCC_LSE_IsEnabled>
 800641c:	4603      	mov	r3, r0
 800641e:	2b01      	cmp	r3, #1
 8006420:	d114      	bne.n	800644c <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006422:	f7fc ff73 	bl	800330c <HAL_GetTick>
 8006426:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8006428:	e00b      	b.n	8006442 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800642a:	f7fc ff6f 	bl	800330c <HAL_GetTick>
 800642e:	4602      	mov	r2, r0
 8006430:	693b      	ldr	r3, [r7, #16]
 8006432:	1ad3      	subs	r3, r2, r3
 8006434:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006438:	4293      	cmp	r3, r2
 800643a:	d902      	bls.n	8006442 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800643c:	2303      	movs	r3, #3
 800643e:	77fb      	strb	r3, [r7, #31]
              break;
 8006440:	e004      	b.n	800644c <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8006442:	f7ff fded 	bl	8006020 <LL_RCC_LSE_IsReady>
 8006446:	4603      	mov	r3, r0
 8006448:	2b01      	cmp	r3, #1
 800644a:	d1ee      	bne.n	800642a <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800644c:	7ffb      	ldrb	r3, [r7, #31]
 800644e:	77bb      	strb	r3, [r7, #30]
 8006450:	e001      	b.n	8006456 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006452:	7ffb      	ldrb	r3, [r7, #31]
 8006454:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f003 0301 	and.w	r3, r3, #1
 800645e:	2b00      	cmp	r3, #0
 8006460:	d004      	beq.n	800646c <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	699b      	ldr	r3, [r3, #24]
 8006466:	4618      	mov	r0, r3
 8006468:	f7ff fe2a 	bl	80060c0 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f003 0302 	and.w	r3, r3, #2
 8006474:	2b00      	cmp	r3, #0
 8006476:	d004      	beq.n	8006482 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	69db      	ldr	r3, [r3, #28]
 800647c:	4618      	mov	r0, r3
 800647e:	f7ff fe35 	bl	80060ec <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f003 0310 	and.w	r3, r3, #16
 800648a:	2b00      	cmp	r3, #0
 800648c:	d004      	beq.n	8006498 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006492:	4618      	mov	r0, r3
 8006494:	f7ff fe5d 	bl	8006152 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f003 0320 	and.w	r3, r3, #32
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d004      	beq.n	80064ae <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064a8:	4618      	mov	r0, r3
 80064aa:	f7ff fe52 	bl	8006152 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f003 0304 	and.w	r3, r3, #4
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d004      	beq.n	80064c4 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6a1b      	ldr	r3, [r3, #32]
 80064be:	4618      	mov	r0, r3
 80064c0:	f7ff fe2a 	bl	8006118 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f003 0308 	and.w	r3, r3, #8
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d004      	beq.n	80064da <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064d4:	4618      	mov	r0, r3
 80064d6:	f7ff fe1f 	bl	8006118 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d022      	beq.n	800652c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064ea:	4618      	mov	r0, r3
 80064ec:	f7ff fe8d 	bl	800620a <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064f4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80064f8:	d107      	bne.n	800650a <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80064fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80064fe:	68db      	ldr	r3, [r3, #12]
 8006500:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006504:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006508:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800650e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006512:	d10b      	bne.n	800652c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	3304      	adds	r3, #4
 8006518:	4618      	mov	r0, r3
 800651a:	f000 f8dd 	bl	80066d8 <RCCEx_PLLSAI1_ConfigNQ>
 800651e:	4603      	mov	r3, r0
 8006520:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8006522:	7ffb      	ldrb	r3, [r7, #31]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d001      	beq.n	800652c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8006528:	7ffb      	ldrb	r3, [r7, #31]
 800652a:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006534:	2b00      	cmp	r3, #0
 8006536:	d02b      	beq.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800653c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006540:	d008      	beq.n	8006554 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006546:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800654a:	d003      	beq.n	8006554 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006550:	2b00      	cmp	r3, #0
 8006552:	d105      	bne.n	8006560 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006558:	4618      	mov	r0, r3
 800655a:	f7ff fe2a 	bl	80061b2 <LL_RCC_SetRNGClockSource>
 800655e:	e00a      	b.n	8006576 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006564:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006568:	60fb      	str	r3, [r7, #12]
 800656a:	2000      	movs	r0, #0
 800656c:	f7ff fe21 	bl	80061b2 <LL_RCC_SetRNGClockSource>
 8006570:	68f8      	ldr	r0, [r7, #12]
 8006572:	f7ff fe34 	bl	80061de <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800657a:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800657e:	d107      	bne.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8006580:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006584:	68db      	ldr	r3, [r3, #12]
 8006586:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800658a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800658e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006598:	2b00      	cmp	r3, #0
 800659a:	d022      	beq.n	80065e2 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065a0:	4618      	mov	r0, r3
 80065a2:	f7ff fe3d 	bl	8006220 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80065ae:	d107      	bne.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80065b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80065b4:	68db      	ldr	r3, [r3, #12]
 80065b6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80065ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80065be:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065c4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80065c8:	d10b      	bne.n	80065e2 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	3304      	adds	r3, #4
 80065ce:	4618      	mov	r0, r3
 80065d0:	f000 f8dd 	bl	800678e <RCCEx_PLLSAI1_ConfigNR>
 80065d4:	4603      	mov	r3, r0
 80065d6:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80065d8:	7ffb      	ldrb	r3, [r7, #31]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d001      	beq.n	80065e2 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 80065de:	7ffb      	ldrb	r3, [r7, #31]
 80065e0:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d004      	beq.n	80065f8 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065f2:	4618      	mov	r0, r3
 80065f4:	f7ff fd26 	bl	8006044 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006600:	2b00      	cmp	r3, #0
 8006602:	d009      	beq.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006608:	4618      	mov	r0, r3
 800660a:	f7ff fd45 	bl	8006098 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006612:	4618      	mov	r0, r3
 8006614:	f7ff fd2c 	bl	8006070 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8006618:	7fbb      	ldrb	r3, [r7, #30]
}
 800661a:	4618      	mov	r0, r3
 800661c:	3720      	adds	r7, #32
 800661e:	46bd      	mov	sp, r7
 8006620:	bd80      	pop	{r7, pc}

08006622 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8006622:	b580      	push	{r7, lr}
 8006624:	b084      	sub	sp, #16
 8006626:	af00      	add	r7, sp, #0
 8006628:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800662a:	2300      	movs	r3, #0
 800662c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800662e:	f7ff fe61 	bl	80062f4 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006632:	f7fc fe6b 	bl	800330c <HAL_GetTick>
 8006636:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006638:	e009      	b.n	800664e <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800663a:	f7fc fe67 	bl	800330c <HAL_GetTick>
 800663e:	4602      	mov	r2, r0
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	1ad3      	subs	r3, r2, r3
 8006644:	2b02      	cmp	r3, #2
 8006646:	d902      	bls.n	800664e <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8006648:	2303      	movs	r3, #3
 800664a:	73fb      	strb	r3, [r7, #15]
      break;
 800664c:	e004      	b.n	8006658 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800664e:	f7ff fe60 	bl	8006312 <LL_RCC_PLLSAI1_IsReady>
 8006652:	4603      	mov	r3, r0
 8006654:	2b00      	cmp	r3, #0
 8006656:	d1f0      	bne.n	800663a <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8006658:	7bfb      	ldrb	r3, [r7, #15]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d137      	bne.n	80066ce <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800665e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006662:	691b      	ldr	r3, [r3, #16]
 8006664:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	021b      	lsls	r3, r3, #8
 800666e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006672:	4313      	orrs	r3, r2
 8006674:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8006676:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800667a:	691b      	ldr	r3, [r3, #16]
 800667c:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	685b      	ldr	r3, [r3, #4]
 8006684:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006688:	4313      	orrs	r3, r2
 800668a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800668c:	f7ff fe23 	bl	80062d6 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006690:	f7fc fe3c 	bl	800330c <HAL_GetTick>
 8006694:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006696:	e009      	b.n	80066ac <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006698:	f7fc fe38 	bl	800330c <HAL_GetTick>
 800669c:	4602      	mov	r2, r0
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	1ad3      	subs	r3, r2, r3
 80066a2:	2b02      	cmp	r3, #2
 80066a4:	d902      	bls.n	80066ac <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80066a6:	2303      	movs	r3, #3
 80066a8:	73fb      	strb	r3, [r7, #15]
        break;
 80066aa:	e004      	b.n	80066b6 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80066ac:	f7ff fe31 	bl	8006312 <LL_RCC_PLLSAI1_IsReady>
 80066b0:	4603      	mov	r3, r0
 80066b2:	2b01      	cmp	r3, #1
 80066b4:	d1f0      	bne.n	8006698 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80066b6:	7bfb      	ldrb	r3, [r7, #15]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d108      	bne.n	80066ce <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80066bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80066c0:	691a      	ldr	r2, [r3, #16]
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	691b      	ldr	r3, [r3, #16]
 80066c6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80066ca:	4313      	orrs	r3, r2
 80066cc:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80066ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80066d0:	4618      	mov	r0, r3
 80066d2:	3710      	adds	r7, #16
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bd80      	pop	{r7, pc}

080066d8 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b084      	sub	sp, #16
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80066e0:	2300      	movs	r3, #0
 80066e2:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80066e4:	f7ff fe06 	bl	80062f4 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80066e8:	f7fc fe10 	bl	800330c <HAL_GetTick>
 80066ec:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80066ee:	e009      	b.n	8006704 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80066f0:	f7fc fe0c 	bl	800330c <HAL_GetTick>
 80066f4:	4602      	mov	r2, r0
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	1ad3      	subs	r3, r2, r3
 80066fa:	2b02      	cmp	r3, #2
 80066fc:	d902      	bls.n	8006704 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80066fe:	2303      	movs	r3, #3
 8006700:	73fb      	strb	r3, [r7, #15]
      break;
 8006702:	e004      	b.n	800670e <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006704:	f7ff fe05 	bl	8006312 <LL_RCC_PLLSAI1_IsReady>
 8006708:	4603      	mov	r3, r0
 800670a:	2b00      	cmp	r3, #0
 800670c:	d1f0      	bne.n	80066f0 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800670e:	7bfb      	ldrb	r3, [r7, #15]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d137      	bne.n	8006784 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8006714:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006718:	691b      	ldr	r3, [r3, #16]
 800671a:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	021b      	lsls	r3, r3, #8
 8006724:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006728:	4313      	orrs	r3, r2
 800672a:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800672c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006730:	691b      	ldr	r3, [r3, #16]
 8006732:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	689b      	ldr	r3, [r3, #8]
 800673a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800673e:	4313      	orrs	r3, r2
 8006740:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8006742:	f7ff fdc8 	bl	80062d6 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006746:	f7fc fde1 	bl	800330c <HAL_GetTick>
 800674a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800674c:	e009      	b.n	8006762 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800674e:	f7fc fddd 	bl	800330c <HAL_GetTick>
 8006752:	4602      	mov	r2, r0
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	1ad3      	subs	r3, r2, r3
 8006758:	2b02      	cmp	r3, #2
 800675a:	d902      	bls.n	8006762 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800675c:	2303      	movs	r3, #3
 800675e:	73fb      	strb	r3, [r7, #15]
        break;
 8006760:	e004      	b.n	800676c <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006762:	f7ff fdd6 	bl	8006312 <LL_RCC_PLLSAI1_IsReady>
 8006766:	4603      	mov	r3, r0
 8006768:	2b01      	cmp	r3, #1
 800676a:	d1f0      	bne.n	800674e <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800676c:	7bfb      	ldrb	r3, [r7, #15]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d108      	bne.n	8006784 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006772:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006776:	691a      	ldr	r2, [r3, #16]
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	691b      	ldr	r3, [r3, #16]
 800677c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006780:	4313      	orrs	r3, r2
 8006782:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8006784:	7bfb      	ldrb	r3, [r7, #15]
}
 8006786:	4618      	mov	r0, r3
 8006788:	3710      	adds	r7, #16
 800678a:	46bd      	mov	sp, r7
 800678c:	bd80      	pop	{r7, pc}

0800678e <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800678e:	b580      	push	{r7, lr}
 8006790:	b084      	sub	sp, #16
 8006792:	af00      	add	r7, sp, #0
 8006794:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006796:	2300      	movs	r3, #0
 8006798:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800679a:	f7ff fdab 	bl	80062f4 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800679e:	f7fc fdb5 	bl	800330c <HAL_GetTick>
 80067a2:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80067a4:	e009      	b.n	80067ba <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80067a6:	f7fc fdb1 	bl	800330c <HAL_GetTick>
 80067aa:	4602      	mov	r2, r0
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	1ad3      	subs	r3, r2, r3
 80067b0:	2b02      	cmp	r3, #2
 80067b2:	d902      	bls.n	80067ba <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80067b4:	2303      	movs	r3, #3
 80067b6:	73fb      	strb	r3, [r7, #15]
      break;
 80067b8:	e004      	b.n	80067c4 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80067ba:	f7ff fdaa 	bl	8006312 <LL_RCC_PLLSAI1_IsReady>
 80067be:	4603      	mov	r3, r0
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d1f0      	bne.n	80067a6 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80067c4:	7bfb      	ldrb	r3, [r7, #15]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d137      	bne.n	800683a <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80067ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80067ce:	691b      	ldr	r3, [r3, #16]
 80067d0:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	021b      	lsls	r3, r3, #8
 80067da:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80067de:	4313      	orrs	r3, r2
 80067e0:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80067e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80067e6:	691b      	ldr	r3, [r3, #16]
 80067e8:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	68db      	ldr	r3, [r3, #12]
 80067f0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80067f4:	4313      	orrs	r3, r2
 80067f6:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80067f8:	f7ff fd6d 	bl	80062d6 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80067fc:	f7fc fd86 	bl	800330c <HAL_GetTick>
 8006800:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006802:	e009      	b.n	8006818 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006804:	f7fc fd82 	bl	800330c <HAL_GetTick>
 8006808:	4602      	mov	r2, r0
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	1ad3      	subs	r3, r2, r3
 800680e:	2b02      	cmp	r3, #2
 8006810:	d902      	bls.n	8006818 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8006812:	2303      	movs	r3, #3
 8006814:	73fb      	strb	r3, [r7, #15]
        break;
 8006816:	e004      	b.n	8006822 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006818:	f7ff fd7b 	bl	8006312 <LL_RCC_PLLSAI1_IsReady>
 800681c:	4603      	mov	r3, r0
 800681e:	2b01      	cmp	r3, #1
 8006820:	d1f0      	bne.n	8006804 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8006822:	7bfb      	ldrb	r3, [r7, #15]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d108      	bne.n	800683a <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006828:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800682c:	691a      	ldr	r2, [r3, #16]
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	691b      	ldr	r3, [r3, #16]
 8006832:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006836:	4313      	orrs	r3, r2
 8006838:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800683a:	7bfb      	ldrb	r3, [r7, #15]
}
 800683c:	4618      	mov	r0, r3
 800683e:	3710      	adds	r7, #16
 8006840:	46bd      	mov	sp, r7
 8006842:	bd80      	pop	{r7, pc}

08006844 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b084      	sub	sp, #16
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d101      	bne.n	8006856 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8006852:	2301      	movs	r3, #1
 8006854:	e09f      	b.n	8006996 <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800685c:	b2db      	uxtb	r3, r3
 800685e:	2b00      	cmp	r3, #0
 8006860:	d106      	bne.n	8006870 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2200      	movs	r2, #0
 8006866:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f7fc fb5c 	bl	8002f28 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2202      	movs	r2, #2
 8006874:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8006878:	4b49      	ldr	r3, [pc, #292]	@ (80069a0 <HAL_RTC_Init+0x15c>)
 800687a:	68db      	ldr	r3, [r3, #12]
 800687c:	f003 0310 	and.w	r3, r3, #16
 8006880:	2b10      	cmp	r3, #16
 8006882:	d07e      	beq.n	8006982 <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	22ca      	movs	r2, #202	@ 0xca
 800688a:	625a      	str	r2, [r3, #36]	@ 0x24
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	2253      	movs	r2, #83	@ 0x53
 8006892:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f000 f8ab 	bl	80069f0 <RTC_EnterInitMode>
 800689a:	4603      	mov	r3, r0
 800689c:	2b00      	cmp	r3, #0
 800689e:	d00a      	beq.n	80068b6 <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	22ff      	movs	r2, #255	@ 0xff
 80068a6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2204      	movs	r2, #4
 80068ac:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      status = HAL_ERROR;
 80068b0:	2301      	movs	r3, #1
 80068b2:	73fb      	strb	r3, [r7, #15]
 80068b4:	e067      	b.n	8006986 <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	689b      	ldr	r3, [r3, #8]
 80068bc:	687a      	ldr	r2, [r7, #4]
 80068be:	6812      	ldr	r2, [r2, #0]
 80068c0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80068c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80068c8:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	6899      	ldr	r1, [r3, #8]
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	685a      	ldr	r2, [r3, #4]
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	691b      	ldr	r3, [r3, #16]
 80068d8:	431a      	orrs	r2, r3
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	699b      	ldr	r3, [r3, #24]
 80068de:	431a      	orrs	r2, r3
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	430a      	orrs	r2, r1
 80068e6:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	687a      	ldr	r2, [r7, #4]
 80068ee:	68d2      	ldr	r2, [r2, #12]
 80068f0:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	6919      	ldr	r1, [r3, #16]
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	689b      	ldr	r3, [r3, #8]
 80068fc:	041a      	lsls	r2, r3, #16
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	430a      	orrs	r2, r1
 8006904:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	68da      	ldr	r2, [r3, #12]
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006914:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f022 0203 	bic.w	r2, r2, #3
 8006924:	64da      	str	r2, [r3, #76]	@ 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	69da      	ldr	r2, [r3, #28]
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	695b      	ldr	r3, [r3, #20]
 8006934:	431a      	orrs	r2, r3
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	430a      	orrs	r2, r1
 800693c:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	689b      	ldr	r3, [r3, #8]
 8006944:	f003 0320 	and.w	r3, r3, #32
 8006948:	2b00      	cmp	r3, #0
 800694a:	d113      	bne.n	8006974 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800694c:	6878      	ldr	r0, [r7, #4]
 800694e:	f000 f829 	bl	80069a4 <HAL_RTC_WaitForSynchro>
 8006952:	4603      	mov	r3, r0
 8006954:	2b00      	cmp	r3, #0
 8006956:	d00d      	beq.n	8006974 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	22ff      	movs	r2, #255	@ 0xff
 800695e:	625a      	str	r2, [r3, #36]	@ 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2204      	movs	r2, #4
 8006964:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2200      	movs	r2, #0
 800696c:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 8006970:	2301      	movs	r3, #1
 8006972:	e010      	b.n	8006996 <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	22ff      	movs	r2, #255	@ 0xff
 800697a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      status = HAL_OK;
 800697c:	2300      	movs	r3, #0
 800697e:	73fb      	strb	r3, [r7, #15]
 8006980:	e001      	b.n	8006986 <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 8006982:	2300      	movs	r3, #0
 8006984:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8006986:	7bfb      	ldrb	r3, [r7, #15]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d103      	bne.n	8006994 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2201      	movs	r2, #1
 8006990:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  return status;
 8006994:	7bfb      	ldrb	r3, [r7, #15]
}
 8006996:	4618      	mov	r0, r3
 8006998:	3710      	adds	r7, #16
 800699a:	46bd      	mov	sp, r7
 800699c:	bd80      	pop	{r7, pc}
 800699e:	bf00      	nop
 80069a0:	40002800 	.word	0x40002800

080069a4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b084      	sub	sp, #16
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	68da      	ldr	r2, [r3, #12]
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80069ba:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80069bc:	f7fc fca6 	bl	800330c <HAL_GetTick>
 80069c0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80069c2:	e009      	b.n	80069d8 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80069c4:	f7fc fca2 	bl	800330c <HAL_GetTick>
 80069c8:	4602      	mov	r2, r0
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	1ad3      	subs	r3, r2, r3
 80069ce:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80069d2:	d901      	bls.n	80069d8 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80069d4:	2303      	movs	r3, #3
 80069d6:	e007      	b.n	80069e8 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	68db      	ldr	r3, [r3, #12]
 80069de:	f003 0320 	and.w	r3, r3, #32
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d0ee      	beq.n	80069c4 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80069e6:	2300      	movs	r3, #0
}
 80069e8:	4618      	mov	r0, r3
 80069ea:	3710      	adds	r7, #16
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bd80      	pop	{r7, pc}

080069f0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b084      	sub	sp, #16
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	68db      	ldr	r3, [r3, #12]
 80069fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d119      	bne.n	8006a3a <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f04f 32ff 	mov.w	r2, #4294967295
 8006a0e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006a10:	f7fc fc7c 	bl	800330c <HAL_GetTick>
 8006a14:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006a16:	e009      	b.n	8006a2c <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006a18:	f7fc fc78 	bl	800330c <HAL_GetTick>
 8006a1c:	4602      	mov	r2, r0
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	1ad3      	subs	r3, r2, r3
 8006a22:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006a26:	d901      	bls.n	8006a2c <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8006a28:	2303      	movs	r3, #3
 8006a2a:	e007      	b.n	8006a3c <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	68db      	ldr	r3, [r3, #12]
 8006a32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d0ee      	beq.n	8006a18 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8006a3a:	2300      	movs	r3, #0
}
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	3710      	adds	r7, #16
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bd80      	pop	{r7, pc}

08006a44 <HAL_RTCEx_EnableBypassShadow>:
  * @note   When the Bypass Shadow is enabled the calendar value are taken
  *         directly from the Calendar counter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 8006a44:	b480      	push	{r7}
 8006a46:	b083      	sub	sp, #12
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006a52:	2b01      	cmp	r3, #1
 8006a54:	d101      	bne.n	8006a5a <HAL_RTCEx_EnableBypassShadow+0x16>
 8006a56:	2302      	movs	r3, #2
 8006a58:	e024      	b.n	8006aa4 <HAL_RTCEx_EnableBypassShadow+0x60>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2201      	movs	r2, #1
 8006a5e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2202      	movs	r2, #2
 8006a66:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	22ca      	movs	r2, #202	@ 0xca
 8006a70:	625a      	str	r2, [r3, #36]	@ 0x24
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	2253      	movs	r2, #83	@ 0x53
 8006a78:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	689a      	ldr	r2, [r3, #8]
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f042 0220 	orr.w	r2, r2, #32
 8006a88:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	22ff      	movs	r2, #255	@ 0xff
 8006a90:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2201      	movs	r2, #1
 8006a96:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8006aa2:	2300      	movs	r3, #0
}
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	370c      	adds	r7, #12
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aae:	4770      	bx	lr

08006ab0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b084      	sub	sp, #16
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d101      	bne.n	8006ac2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006abe:	2301      	movs	r3, #1
 8006ac0:	e095      	b.n	8006bee <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d108      	bne.n	8006adc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	685b      	ldr	r3, [r3, #4]
 8006ace:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006ad2:	d009      	beq.n	8006ae8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	61da      	str	r2, [r3, #28]
 8006ada:	e005      	b.n	8006ae8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2200      	movs	r2, #0
 8006aec:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006af4:	b2db      	uxtb	r3, r3
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d106      	bne.n	8006b08 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2200      	movs	r2, #0
 8006afe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f000 f877 	bl	8006bf6 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2202      	movs	r2, #2
 8006b0c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	681a      	ldr	r2, [r3, #0]
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006b1e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	68db      	ldr	r3, [r3, #12]
 8006b24:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006b28:	d902      	bls.n	8006b30 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	60fb      	str	r3, [r7, #12]
 8006b2e:	e002      	b.n	8006b36 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006b30:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006b34:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	68db      	ldr	r3, [r3, #12]
 8006b3a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8006b3e:	d007      	beq.n	8006b50 <HAL_SPI_Init+0xa0>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	68db      	ldr	r3, [r3, #12]
 8006b44:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006b48:	d002      	beq.n	8006b50 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	685b      	ldr	r3, [r3, #4]
 8006b54:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	689b      	ldr	r3, [r3, #8]
 8006b5c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006b60:	431a      	orrs	r2, r3
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	691b      	ldr	r3, [r3, #16]
 8006b66:	f003 0302 	and.w	r3, r3, #2
 8006b6a:	431a      	orrs	r2, r3
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	695b      	ldr	r3, [r3, #20]
 8006b70:	f003 0301 	and.w	r3, r3, #1
 8006b74:	431a      	orrs	r2, r3
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	699b      	ldr	r3, [r3, #24]
 8006b7a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006b7e:	431a      	orrs	r2, r3
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	69db      	ldr	r3, [r3, #28]
 8006b84:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006b88:	431a      	orrs	r2, r3
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6a1b      	ldr	r3, [r3, #32]
 8006b8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b92:	ea42 0103 	orr.w	r1, r2, r3
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b9a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	430a      	orrs	r2, r1
 8006ba4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	699b      	ldr	r3, [r3, #24]
 8006baa:	0c1b      	lsrs	r3, r3, #16
 8006bac:	f003 0204 	and.w	r2, r3, #4
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bb4:	f003 0310 	and.w	r3, r3, #16
 8006bb8:	431a      	orrs	r2, r3
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006bbe:	f003 0308 	and.w	r3, r3, #8
 8006bc2:	431a      	orrs	r2, r3
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	68db      	ldr	r3, [r3, #12]
 8006bc8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8006bcc:	ea42 0103 	orr.w	r1, r2, r3
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	430a      	orrs	r2, r1
 8006bdc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2200      	movs	r2, #0
 8006be2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2201      	movs	r2, #1
 8006be8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8006bec:	2300      	movs	r3, #0
}
 8006bee:	4618      	mov	r0, r3
 8006bf0:	3710      	adds	r7, #16
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	bd80      	pop	{r7, pc}

08006bf6 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8006bf6:	b480      	push	{r7}
 8006bf8:	b083      	sub	sp, #12
 8006bfa:	af00      	add	r7, sp, #0
 8006bfc:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8006bfe:	bf00      	nop
 8006c00:	370c      	adds	r7, #12
 8006c02:	46bd      	mov	sp, r7
 8006c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c08:	4770      	bx	lr

08006c0a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c0a:	b580      	push	{r7, lr}
 8006c0c:	b088      	sub	sp, #32
 8006c0e:	af00      	add	r7, sp, #0
 8006c10:	60f8      	str	r0, [r7, #12]
 8006c12:	60b9      	str	r1, [r7, #8]
 8006c14:	603b      	str	r3, [r7, #0]
 8006c16:	4613      	mov	r3, r2
 8006c18:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006c24:	2b01      	cmp	r3, #1
 8006c26:	d101      	bne.n	8006c2c <HAL_SPI_Transmit+0x22>
 8006c28:	2302      	movs	r3, #2
 8006c2a:	e15f      	b.n	8006eec <HAL_SPI_Transmit+0x2e2>
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	2201      	movs	r2, #1
 8006c30:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006c34:	f7fc fb6a 	bl	800330c <HAL_GetTick>
 8006c38:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006c3a:	88fb      	ldrh	r3, [r7, #6]
 8006c3c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006c44:	b2db      	uxtb	r3, r3
 8006c46:	2b01      	cmp	r3, #1
 8006c48:	d002      	beq.n	8006c50 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006c4a:	2302      	movs	r3, #2
 8006c4c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006c4e:	e148      	b.n	8006ee2 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d002      	beq.n	8006c5c <HAL_SPI_Transmit+0x52>
 8006c56:	88fb      	ldrh	r3, [r7, #6]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d102      	bne.n	8006c62 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006c60:	e13f      	b.n	8006ee2 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	2203      	movs	r2, #3
 8006c66:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	68ba      	ldr	r2, [r7, #8]
 8006c74:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	88fa      	ldrh	r2, [r7, #6]
 8006c7a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	88fa      	ldrh	r2, [r7, #6]
 8006c80:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	2200      	movs	r2, #0
 8006c86:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	2200      	movs	r2, #0
 8006c94:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	689b      	ldr	r3, [r3, #8]
 8006ca8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006cac:	d10f      	bne.n	8006cce <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	681a      	ldr	r2, [r3, #0]
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006cbc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	681a      	ldr	r2, [r3, #0]
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006ccc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cd8:	2b40      	cmp	r3, #64	@ 0x40
 8006cda:	d007      	beq.n	8006cec <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	681a      	ldr	r2, [r3, #0]
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006cea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	68db      	ldr	r3, [r3, #12]
 8006cf0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006cf4:	d94f      	bls.n	8006d96 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	685b      	ldr	r3, [r3, #4]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d002      	beq.n	8006d04 <HAL_SPI_Transmit+0xfa>
 8006cfe:	8afb      	ldrh	r3, [r7, #22]
 8006d00:	2b01      	cmp	r3, #1
 8006d02:	d142      	bne.n	8006d8a <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d08:	881a      	ldrh	r2, [r3, #0]
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d14:	1c9a      	adds	r2, r3, #2
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006d1e:	b29b      	uxth	r3, r3
 8006d20:	3b01      	subs	r3, #1
 8006d22:	b29a      	uxth	r2, r3
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006d28:	e02f      	b.n	8006d8a <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	689b      	ldr	r3, [r3, #8]
 8006d30:	f003 0302 	and.w	r3, r3, #2
 8006d34:	2b02      	cmp	r3, #2
 8006d36:	d112      	bne.n	8006d5e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d3c:	881a      	ldrh	r2, [r3, #0]
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d48:	1c9a      	adds	r2, r3, #2
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006d52:	b29b      	uxth	r3, r3
 8006d54:	3b01      	subs	r3, #1
 8006d56:	b29a      	uxth	r2, r3
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006d5c:	e015      	b.n	8006d8a <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006d5e:	f7fc fad5 	bl	800330c <HAL_GetTick>
 8006d62:	4602      	mov	r2, r0
 8006d64:	69bb      	ldr	r3, [r7, #24]
 8006d66:	1ad3      	subs	r3, r2, r3
 8006d68:	683a      	ldr	r2, [r7, #0]
 8006d6a:	429a      	cmp	r2, r3
 8006d6c:	d803      	bhi.n	8006d76 <HAL_SPI_Transmit+0x16c>
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d74:	d102      	bne.n	8006d7c <HAL_SPI_Transmit+0x172>
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d106      	bne.n	8006d8a <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8006d7c:	2303      	movs	r3, #3
 8006d7e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	2201      	movs	r2, #1
 8006d84:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8006d88:	e0ab      	b.n	8006ee2 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006d8e:	b29b      	uxth	r3, r3
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d1ca      	bne.n	8006d2a <HAL_SPI_Transmit+0x120>
 8006d94:	e080      	b.n	8006e98 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	685b      	ldr	r3, [r3, #4]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d002      	beq.n	8006da4 <HAL_SPI_Transmit+0x19a>
 8006d9e:	8afb      	ldrh	r3, [r7, #22]
 8006da0:	2b01      	cmp	r3, #1
 8006da2:	d174      	bne.n	8006e8e <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006da8:	b29b      	uxth	r3, r3
 8006daa:	2b01      	cmp	r3, #1
 8006dac:	d912      	bls.n	8006dd4 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006db2:	881a      	ldrh	r2, [r3, #0]
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dbe:	1c9a      	adds	r2, r3, #2
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006dc8:	b29b      	uxth	r3, r3
 8006dca:	3b02      	subs	r3, #2
 8006dcc:	b29a      	uxth	r2, r3
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006dd2:	e05c      	b.n	8006e8e <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	330c      	adds	r3, #12
 8006dde:	7812      	ldrb	r2, [r2, #0]
 8006de0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006de6:	1c5a      	adds	r2, r3, #1
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006df0:	b29b      	uxth	r3, r3
 8006df2:	3b01      	subs	r3, #1
 8006df4:	b29a      	uxth	r2, r3
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006dfa:	e048      	b.n	8006e8e <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	689b      	ldr	r3, [r3, #8]
 8006e02:	f003 0302 	and.w	r3, r3, #2
 8006e06:	2b02      	cmp	r3, #2
 8006e08:	d12b      	bne.n	8006e62 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e0e:	b29b      	uxth	r3, r3
 8006e10:	2b01      	cmp	r3, #1
 8006e12:	d912      	bls.n	8006e3a <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e18:	881a      	ldrh	r2, [r3, #0]
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e24:	1c9a      	adds	r2, r3, #2
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e2e:	b29b      	uxth	r3, r3
 8006e30:	3b02      	subs	r3, #2
 8006e32:	b29a      	uxth	r2, r3
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006e38:	e029      	b.n	8006e8e <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	330c      	adds	r3, #12
 8006e44:	7812      	ldrb	r2, [r2, #0]
 8006e46:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e4c:	1c5a      	adds	r2, r3, #1
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e56:	b29b      	uxth	r3, r3
 8006e58:	3b01      	subs	r3, #1
 8006e5a:	b29a      	uxth	r2, r3
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006e60:	e015      	b.n	8006e8e <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006e62:	f7fc fa53 	bl	800330c <HAL_GetTick>
 8006e66:	4602      	mov	r2, r0
 8006e68:	69bb      	ldr	r3, [r7, #24]
 8006e6a:	1ad3      	subs	r3, r2, r3
 8006e6c:	683a      	ldr	r2, [r7, #0]
 8006e6e:	429a      	cmp	r2, r3
 8006e70:	d803      	bhi.n	8006e7a <HAL_SPI_Transmit+0x270>
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e78:	d102      	bne.n	8006e80 <HAL_SPI_Transmit+0x276>
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d106      	bne.n	8006e8e <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8006e80:	2303      	movs	r3, #3
 8006e82:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	2201      	movs	r2, #1
 8006e88:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8006e8c:	e029      	b.n	8006ee2 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e92:	b29b      	uxth	r3, r3
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d1b1      	bne.n	8006dfc <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006e98:	69ba      	ldr	r2, [r7, #24]
 8006e9a:	6839      	ldr	r1, [r7, #0]
 8006e9c:	68f8      	ldr	r0, [r7, #12]
 8006e9e:	f000 fcf9 	bl	8007894 <SPI_EndRxTxTransaction>
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d002      	beq.n	8006eae <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	2220      	movs	r2, #32
 8006eac:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	689b      	ldr	r3, [r3, #8]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d10a      	bne.n	8006ecc <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	613b      	str	r3, [r7, #16]
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	68db      	ldr	r3, [r3, #12]
 8006ec0:	613b      	str	r3, [r7, #16]
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	689b      	ldr	r3, [r3, #8]
 8006ec8:	613b      	str	r3, [r7, #16]
 8006eca:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d002      	beq.n	8006eda <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	77fb      	strb	r3, [r7, #31]
 8006ed8:	e003      	b.n	8006ee2 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	2201      	movs	r2, #1
 8006ede:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8006eea:	7ffb      	ldrb	r3, [r7, #31]
}
 8006eec:	4618      	mov	r0, r3
 8006eee:	3720      	adds	r7, #32
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	bd80      	pop	{r7, pc}

08006ef4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b088      	sub	sp, #32
 8006ef8:	af02      	add	r7, sp, #8
 8006efa:	60f8      	str	r0, [r7, #12]
 8006efc:	60b9      	str	r1, [r7, #8]
 8006efe:	603b      	str	r3, [r7, #0]
 8006f00:	4613      	mov	r3, r2
 8006f02:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006f04:	2300      	movs	r3, #0
 8006f06:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006f0e:	b2db      	uxtb	r3, r3
 8006f10:	2b01      	cmp	r3, #1
 8006f12:	d002      	beq.n	8006f1a <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8006f14:	2302      	movs	r3, #2
 8006f16:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006f18:	e11a      	b.n	8007150 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	685b      	ldr	r3, [r3, #4]
 8006f1e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006f22:	d112      	bne.n	8006f4a <HAL_SPI_Receive+0x56>
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	689b      	ldr	r3, [r3, #8]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d10e      	bne.n	8006f4a <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	2204      	movs	r2, #4
 8006f30:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006f34:	88fa      	ldrh	r2, [r7, #6]
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	9300      	str	r3, [sp, #0]
 8006f3a:	4613      	mov	r3, r2
 8006f3c:	68ba      	ldr	r2, [r7, #8]
 8006f3e:	68b9      	ldr	r1, [r7, #8]
 8006f40:	68f8      	ldr	r0, [r7, #12]
 8006f42:	f000 f90e 	bl	8007162 <HAL_SPI_TransmitReceive>
 8006f46:	4603      	mov	r3, r0
 8006f48:	e107      	b.n	800715a <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006f50:	2b01      	cmp	r3, #1
 8006f52:	d101      	bne.n	8006f58 <HAL_SPI_Receive+0x64>
 8006f54:	2302      	movs	r3, #2
 8006f56:	e100      	b.n	800715a <HAL_SPI_Receive+0x266>
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	2201      	movs	r2, #1
 8006f5c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006f60:	f7fc f9d4 	bl	800330c <HAL_GetTick>
 8006f64:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8006f66:	68bb      	ldr	r3, [r7, #8]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d002      	beq.n	8006f72 <HAL_SPI_Receive+0x7e>
 8006f6c:	88fb      	ldrh	r3, [r7, #6]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d102      	bne.n	8006f78 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006f72:	2301      	movs	r3, #1
 8006f74:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006f76:	e0eb      	b.n	8007150 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	2204      	movs	r2, #4
 8006f7c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	2200      	movs	r2, #0
 8006f84:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	68ba      	ldr	r2, [r7, #8]
 8006f8a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	88fa      	ldrh	r2, [r7, #6]
 8006f90:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	88fa      	ldrh	r2, [r7, #6]
 8006f98:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	2200      	movs	r2, #0
 8006fac:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	68db      	ldr	r3, [r3, #12]
 8006fbe:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006fc2:	d908      	bls.n	8006fd6 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	685a      	ldr	r2, [r3, #4]
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006fd2:	605a      	str	r2, [r3, #4]
 8006fd4:	e007      	b.n	8006fe6 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	685a      	ldr	r2, [r3, #4]
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006fe4:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	689b      	ldr	r3, [r3, #8]
 8006fea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006fee:	d10f      	bne.n	8007010 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	681a      	ldr	r2, [r3, #0]
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006ffe:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	681a      	ldr	r2, [r3, #0]
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800700e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800701a:	2b40      	cmp	r3, #64	@ 0x40
 800701c:	d007      	beq.n	800702e <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	681a      	ldr	r2, [r3, #0]
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800702c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	68db      	ldr	r3, [r3, #12]
 8007032:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007036:	d86f      	bhi.n	8007118 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007038:	e034      	b.n	80070a4 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	689b      	ldr	r3, [r3, #8]
 8007040:	f003 0301 	and.w	r3, r3, #1
 8007044:	2b01      	cmp	r3, #1
 8007046:	d117      	bne.n	8007078 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f103 020c 	add.w	r2, r3, #12
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007054:	7812      	ldrb	r2, [r2, #0]
 8007056:	b2d2      	uxtb	r2, r2
 8007058:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800705e:	1c5a      	adds	r2, r3, #1
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800706a:	b29b      	uxth	r3, r3
 800706c:	3b01      	subs	r3, #1
 800706e:	b29a      	uxth	r2, r3
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8007076:	e015      	b.n	80070a4 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007078:	f7fc f948 	bl	800330c <HAL_GetTick>
 800707c:	4602      	mov	r2, r0
 800707e:	693b      	ldr	r3, [r7, #16]
 8007080:	1ad3      	subs	r3, r2, r3
 8007082:	683a      	ldr	r2, [r7, #0]
 8007084:	429a      	cmp	r2, r3
 8007086:	d803      	bhi.n	8007090 <HAL_SPI_Receive+0x19c>
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800708e:	d102      	bne.n	8007096 <HAL_SPI_Receive+0x1a2>
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d106      	bne.n	80070a4 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 8007096:	2303      	movs	r3, #3
 8007098:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	2201      	movs	r2, #1
 800709e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80070a2:	e055      	b.n	8007150 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80070aa:	b29b      	uxth	r3, r3
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d1c4      	bne.n	800703a <HAL_SPI_Receive+0x146>
 80070b0:	e038      	b.n	8007124 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	689b      	ldr	r3, [r3, #8]
 80070b8:	f003 0301 	and.w	r3, r3, #1
 80070bc:	2b01      	cmp	r3, #1
 80070be:	d115      	bne.n	80070ec <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	68da      	ldr	r2, [r3, #12]
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070ca:	b292      	uxth	r2, r2
 80070cc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070d2:	1c9a      	adds	r2, r3, #2
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80070de:	b29b      	uxth	r3, r3
 80070e0:	3b01      	subs	r3, #1
 80070e2:	b29a      	uxth	r2, r3
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80070ea:	e015      	b.n	8007118 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80070ec:	f7fc f90e 	bl	800330c <HAL_GetTick>
 80070f0:	4602      	mov	r2, r0
 80070f2:	693b      	ldr	r3, [r7, #16]
 80070f4:	1ad3      	subs	r3, r2, r3
 80070f6:	683a      	ldr	r2, [r7, #0]
 80070f8:	429a      	cmp	r2, r3
 80070fa:	d803      	bhi.n	8007104 <HAL_SPI_Receive+0x210>
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007102:	d102      	bne.n	800710a <HAL_SPI_Receive+0x216>
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d106      	bne.n	8007118 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 800710a:	2303      	movs	r3, #3
 800710c:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	2201      	movs	r2, #1
 8007112:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8007116:	e01b      	b.n	8007150 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800711e:	b29b      	uxth	r3, r3
 8007120:	2b00      	cmp	r3, #0
 8007122:	d1c6      	bne.n	80070b2 <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007124:	693a      	ldr	r2, [r7, #16]
 8007126:	6839      	ldr	r1, [r7, #0]
 8007128:	68f8      	ldr	r0, [r7, #12]
 800712a:	f000 fb5b 	bl	80077e4 <SPI_EndRxTransaction>
 800712e:	4603      	mov	r3, r0
 8007130:	2b00      	cmp	r3, #0
 8007132:	d002      	beq.n	800713a <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	2220      	movs	r2, #32
 8007138:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800713e:	2b00      	cmp	r3, #0
 8007140:	d002      	beq.n	8007148 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 8007142:	2301      	movs	r3, #1
 8007144:	75fb      	strb	r3, [r7, #23]
 8007146:	e003      	b.n	8007150 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	2201      	movs	r2, #1
 800714c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	2200      	movs	r2, #0
 8007154:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8007158:	7dfb      	ldrb	r3, [r7, #23]
}
 800715a:	4618      	mov	r0, r3
 800715c:	3718      	adds	r7, #24
 800715e:	46bd      	mov	sp, r7
 8007160:	bd80      	pop	{r7, pc}

08007162 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007162:	b580      	push	{r7, lr}
 8007164:	b08a      	sub	sp, #40	@ 0x28
 8007166:	af00      	add	r7, sp, #0
 8007168:	60f8      	str	r0, [r7, #12]
 800716a:	60b9      	str	r1, [r7, #8]
 800716c:	607a      	str	r2, [r7, #4]
 800716e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007170:	2301      	movs	r3, #1
 8007172:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007174:	2300      	movs	r3, #0
 8007176:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007180:	2b01      	cmp	r3, #1
 8007182:	d101      	bne.n	8007188 <HAL_SPI_TransmitReceive+0x26>
 8007184:	2302      	movs	r3, #2
 8007186:	e20a      	b.n	800759e <HAL_SPI_TransmitReceive+0x43c>
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	2201      	movs	r2, #1
 800718c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007190:	f7fc f8bc 	bl	800330c <HAL_GetTick>
 8007194:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800719c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	685b      	ldr	r3, [r3, #4]
 80071a2:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80071a4:	887b      	ldrh	r3, [r7, #2]
 80071a6:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80071a8:	887b      	ldrh	r3, [r7, #2]
 80071aa:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80071ac:	7efb      	ldrb	r3, [r7, #27]
 80071ae:	2b01      	cmp	r3, #1
 80071b0:	d00e      	beq.n	80071d0 <HAL_SPI_TransmitReceive+0x6e>
 80071b2:	697b      	ldr	r3, [r7, #20]
 80071b4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80071b8:	d106      	bne.n	80071c8 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	689b      	ldr	r3, [r3, #8]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d102      	bne.n	80071c8 <HAL_SPI_TransmitReceive+0x66>
 80071c2:	7efb      	ldrb	r3, [r7, #27]
 80071c4:	2b04      	cmp	r3, #4
 80071c6:	d003      	beq.n	80071d0 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80071c8:	2302      	movs	r3, #2
 80071ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80071ce:	e1e0      	b.n	8007592 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d005      	beq.n	80071e2 <HAL_SPI_TransmitReceive+0x80>
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d002      	beq.n	80071e2 <HAL_SPI_TransmitReceive+0x80>
 80071dc:	887b      	ldrh	r3, [r7, #2]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d103      	bne.n	80071ea <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80071e2:	2301      	movs	r3, #1
 80071e4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80071e8:	e1d3      	b.n	8007592 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80071f0:	b2db      	uxtb	r3, r3
 80071f2:	2b04      	cmp	r3, #4
 80071f4:	d003      	beq.n	80071fe <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	2205      	movs	r2, #5
 80071fa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	2200      	movs	r2, #0
 8007202:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	687a      	ldr	r2, [r7, #4]
 8007208:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	887a      	ldrh	r2, [r7, #2]
 800720e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	887a      	ldrh	r2, [r7, #2]
 8007216:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	68ba      	ldr	r2, [r7, #8]
 800721e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	887a      	ldrh	r2, [r7, #2]
 8007224:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	887a      	ldrh	r2, [r7, #2]
 800722a:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	2200      	movs	r2, #0
 8007230:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	2200      	movs	r2, #0
 8007236:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	68db      	ldr	r3, [r3, #12]
 800723c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007240:	d802      	bhi.n	8007248 <HAL_SPI_TransmitReceive+0xe6>
 8007242:	8a3b      	ldrh	r3, [r7, #16]
 8007244:	2b01      	cmp	r3, #1
 8007246:	d908      	bls.n	800725a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	685a      	ldr	r2, [r3, #4]
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007256:	605a      	str	r2, [r3, #4]
 8007258:	e007      	b.n	800726a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	685a      	ldr	r2, [r3, #4]
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007268:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007274:	2b40      	cmp	r3, #64	@ 0x40
 8007276:	d007      	beq.n	8007288 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	681a      	ldr	r2, [r3, #0]
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007286:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	68db      	ldr	r3, [r3, #12]
 800728c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007290:	f240 8081 	bls.w	8007396 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	685b      	ldr	r3, [r3, #4]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d002      	beq.n	80072a2 <HAL_SPI_TransmitReceive+0x140>
 800729c:	8a7b      	ldrh	r3, [r7, #18]
 800729e:	2b01      	cmp	r3, #1
 80072a0:	d16d      	bne.n	800737e <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072a6:	881a      	ldrh	r2, [r3, #0]
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072b2:	1c9a      	adds	r2, r3, #2
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80072bc:	b29b      	uxth	r3, r3
 80072be:	3b01      	subs	r3, #1
 80072c0:	b29a      	uxth	r2, r3
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80072c6:	e05a      	b.n	800737e <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	689b      	ldr	r3, [r3, #8]
 80072ce:	f003 0302 	and.w	r3, r3, #2
 80072d2:	2b02      	cmp	r3, #2
 80072d4:	d11b      	bne.n	800730e <HAL_SPI_TransmitReceive+0x1ac>
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80072da:	b29b      	uxth	r3, r3
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d016      	beq.n	800730e <HAL_SPI_TransmitReceive+0x1ac>
 80072e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072e2:	2b01      	cmp	r3, #1
 80072e4:	d113      	bne.n	800730e <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072ea:	881a      	ldrh	r2, [r3, #0]
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072f6:	1c9a      	adds	r2, r3, #2
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007300:	b29b      	uxth	r3, r3
 8007302:	3b01      	subs	r3, #1
 8007304:	b29a      	uxth	r2, r3
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800730a:	2300      	movs	r3, #0
 800730c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	689b      	ldr	r3, [r3, #8]
 8007314:	f003 0301 	and.w	r3, r3, #1
 8007318:	2b01      	cmp	r3, #1
 800731a:	d11c      	bne.n	8007356 <HAL_SPI_TransmitReceive+0x1f4>
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007322:	b29b      	uxth	r3, r3
 8007324:	2b00      	cmp	r3, #0
 8007326:	d016      	beq.n	8007356 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	68da      	ldr	r2, [r3, #12]
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007332:	b292      	uxth	r2, r2
 8007334:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800733a:	1c9a      	adds	r2, r3, #2
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007346:	b29b      	uxth	r3, r3
 8007348:	3b01      	subs	r3, #1
 800734a:	b29a      	uxth	r2, r3
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007352:	2301      	movs	r3, #1
 8007354:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007356:	f7fb ffd9 	bl	800330c <HAL_GetTick>
 800735a:	4602      	mov	r2, r0
 800735c:	69fb      	ldr	r3, [r7, #28]
 800735e:	1ad3      	subs	r3, r2, r3
 8007360:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007362:	429a      	cmp	r2, r3
 8007364:	d80b      	bhi.n	800737e <HAL_SPI_TransmitReceive+0x21c>
 8007366:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800736c:	d007      	beq.n	800737e <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 800736e:	2303      	movs	r3, #3
 8007370:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	2201      	movs	r2, #1
 8007378:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800737c:	e109      	b.n	8007592 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007382:	b29b      	uxth	r3, r3
 8007384:	2b00      	cmp	r3, #0
 8007386:	d19f      	bne.n	80072c8 <HAL_SPI_TransmitReceive+0x166>
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800738e:	b29b      	uxth	r3, r3
 8007390:	2b00      	cmp	r3, #0
 8007392:	d199      	bne.n	80072c8 <HAL_SPI_TransmitReceive+0x166>
 8007394:	e0e3      	b.n	800755e <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	685b      	ldr	r3, [r3, #4]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d003      	beq.n	80073a6 <HAL_SPI_TransmitReceive+0x244>
 800739e:	8a7b      	ldrh	r3, [r7, #18]
 80073a0:	2b01      	cmp	r3, #1
 80073a2:	f040 80cf 	bne.w	8007544 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80073aa:	b29b      	uxth	r3, r3
 80073ac:	2b01      	cmp	r3, #1
 80073ae:	d912      	bls.n	80073d6 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073b4:	881a      	ldrh	r2, [r3, #0]
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073c0:	1c9a      	adds	r2, r3, #2
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80073ca:	b29b      	uxth	r3, r3
 80073cc:	3b02      	subs	r3, #2
 80073ce:	b29a      	uxth	r2, r3
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80073d4:	e0b6      	b.n	8007544 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	330c      	adds	r3, #12
 80073e0:	7812      	ldrb	r2, [r2, #0]
 80073e2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073e8:	1c5a      	adds	r2, r3, #1
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80073f2:	b29b      	uxth	r3, r3
 80073f4:	3b01      	subs	r3, #1
 80073f6:	b29a      	uxth	r2, r3
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80073fc:	e0a2      	b.n	8007544 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	689b      	ldr	r3, [r3, #8]
 8007404:	f003 0302 	and.w	r3, r3, #2
 8007408:	2b02      	cmp	r3, #2
 800740a:	d134      	bne.n	8007476 <HAL_SPI_TransmitReceive+0x314>
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007410:	b29b      	uxth	r3, r3
 8007412:	2b00      	cmp	r3, #0
 8007414:	d02f      	beq.n	8007476 <HAL_SPI_TransmitReceive+0x314>
 8007416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007418:	2b01      	cmp	r3, #1
 800741a:	d12c      	bne.n	8007476 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007420:	b29b      	uxth	r3, r3
 8007422:	2b01      	cmp	r3, #1
 8007424:	d912      	bls.n	800744c <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800742a:	881a      	ldrh	r2, [r3, #0]
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007436:	1c9a      	adds	r2, r3, #2
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007440:	b29b      	uxth	r3, r3
 8007442:	3b02      	subs	r3, #2
 8007444:	b29a      	uxth	r2, r3
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800744a:	e012      	b.n	8007472 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	330c      	adds	r3, #12
 8007456:	7812      	ldrb	r2, [r2, #0]
 8007458:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800745e:	1c5a      	adds	r2, r3, #1
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007468:	b29b      	uxth	r3, r3
 800746a:	3b01      	subs	r3, #1
 800746c:	b29a      	uxth	r2, r3
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007472:	2300      	movs	r3, #0
 8007474:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	689b      	ldr	r3, [r3, #8]
 800747c:	f003 0301 	and.w	r3, r3, #1
 8007480:	2b01      	cmp	r3, #1
 8007482:	d148      	bne.n	8007516 <HAL_SPI_TransmitReceive+0x3b4>
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800748a:	b29b      	uxth	r3, r3
 800748c:	2b00      	cmp	r3, #0
 800748e:	d042      	beq.n	8007516 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007496:	b29b      	uxth	r3, r3
 8007498:	2b01      	cmp	r3, #1
 800749a:	d923      	bls.n	80074e4 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	68da      	ldr	r2, [r3, #12]
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074a6:	b292      	uxth	r2, r2
 80074a8:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074ae:	1c9a      	adds	r2, r3, #2
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80074ba:	b29b      	uxth	r3, r3
 80074bc:	3b02      	subs	r3, #2
 80074be:	b29a      	uxth	r2, r3
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80074cc:	b29b      	uxth	r3, r3
 80074ce:	2b01      	cmp	r3, #1
 80074d0:	d81f      	bhi.n	8007512 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	685a      	ldr	r2, [r3, #4]
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80074e0:	605a      	str	r2, [r3, #4]
 80074e2:	e016      	b.n	8007512 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f103 020c 	add.w	r2, r3, #12
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074f0:	7812      	ldrb	r2, [r2, #0]
 80074f2:	b2d2      	uxtb	r2, r2
 80074f4:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074fa:	1c5a      	adds	r2, r3, #1
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007506:	b29b      	uxth	r3, r3
 8007508:	3b01      	subs	r3, #1
 800750a:	b29a      	uxth	r2, r3
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007512:	2301      	movs	r3, #1
 8007514:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007516:	f7fb fef9 	bl	800330c <HAL_GetTick>
 800751a:	4602      	mov	r2, r0
 800751c:	69fb      	ldr	r3, [r7, #28]
 800751e:	1ad3      	subs	r3, r2, r3
 8007520:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007522:	429a      	cmp	r2, r3
 8007524:	d803      	bhi.n	800752e <HAL_SPI_TransmitReceive+0x3cc>
 8007526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800752c:	d102      	bne.n	8007534 <HAL_SPI_TransmitReceive+0x3d2>
 800752e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007530:	2b00      	cmp	r3, #0
 8007532:	d107      	bne.n	8007544 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8007534:	2303      	movs	r3, #3
 8007536:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	2201      	movs	r2, #1
 800753e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8007542:	e026      	b.n	8007592 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007548:	b29b      	uxth	r3, r3
 800754a:	2b00      	cmp	r3, #0
 800754c:	f47f af57 	bne.w	80073fe <HAL_SPI_TransmitReceive+0x29c>
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007556:	b29b      	uxth	r3, r3
 8007558:	2b00      	cmp	r3, #0
 800755a:	f47f af50 	bne.w	80073fe <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800755e:	69fa      	ldr	r2, [r7, #28]
 8007560:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007562:	68f8      	ldr	r0, [r7, #12]
 8007564:	f000 f996 	bl	8007894 <SPI_EndRxTxTransaction>
 8007568:	4603      	mov	r3, r0
 800756a:	2b00      	cmp	r3, #0
 800756c:	d005      	beq.n	800757a <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 800756e:	2301      	movs	r3, #1
 8007570:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	2220      	movs	r2, #32
 8007578:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800757e:	2b00      	cmp	r3, #0
 8007580:	d003      	beq.n	800758a <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8007582:	2301      	movs	r3, #1
 8007584:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007588:	e003      	b.n	8007592 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	2201      	movs	r2, #1
 800758e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	2200      	movs	r2, #0
 8007596:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800759a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 800759e:	4618      	mov	r0, r3
 80075a0:	3728      	adds	r7, #40	@ 0x28
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bd80      	pop	{r7, pc}
	...

080075a8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b088      	sub	sp, #32
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	60f8      	str	r0, [r7, #12]
 80075b0:	60b9      	str	r1, [r7, #8]
 80075b2:	603b      	str	r3, [r7, #0]
 80075b4:	4613      	mov	r3, r2
 80075b6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80075b8:	f7fb fea8 	bl	800330c <HAL_GetTick>
 80075bc:	4602      	mov	r2, r0
 80075be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075c0:	1a9b      	subs	r3, r3, r2
 80075c2:	683a      	ldr	r2, [r7, #0]
 80075c4:	4413      	add	r3, r2
 80075c6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80075c8:	f7fb fea0 	bl	800330c <HAL_GetTick>
 80075cc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80075ce:	4b39      	ldr	r3, [pc, #228]	@ (80076b4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	015b      	lsls	r3, r3, #5
 80075d4:	0d1b      	lsrs	r3, r3, #20
 80075d6:	69fa      	ldr	r2, [r7, #28]
 80075d8:	fb02 f303 	mul.w	r3, r2, r3
 80075dc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80075de:	e054      	b.n	800768a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075e6:	d050      	beq.n	800768a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80075e8:	f7fb fe90 	bl	800330c <HAL_GetTick>
 80075ec:	4602      	mov	r2, r0
 80075ee:	69bb      	ldr	r3, [r7, #24]
 80075f0:	1ad3      	subs	r3, r2, r3
 80075f2:	69fa      	ldr	r2, [r7, #28]
 80075f4:	429a      	cmp	r2, r3
 80075f6:	d902      	bls.n	80075fe <SPI_WaitFlagStateUntilTimeout+0x56>
 80075f8:	69fb      	ldr	r3, [r7, #28]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d13d      	bne.n	800767a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	685a      	ldr	r2, [r3, #4]
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800760c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	685b      	ldr	r3, [r3, #4]
 8007612:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007616:	d111      	bne.n	800763c <SPI_WaitFlagStateUntilTimeout+0x94>
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	689b      	ldr	r3, [r3, #8]
 800761c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007620:	d004      	beq.n	800762c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	689b      	ldr	r3, [r3, #8]
 8007626:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800762a:	d107      	bne.n	800763c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	681a      	ldr	r2, [r3, #0]
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800763a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007640:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007644:	d10f      	bne.n	8007666 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	681a      	ldr	r2, [r3, #0]
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007654:	601a      	str	r2, [r3, #0]
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	681a      	ldr	r2, [r3, #0]
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007664:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	2201      	movs	r2, #1
 800766a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	2200      	movs	r2, #0
 8007672:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8007676:	2303      	movs	r3, #3
 8007678:	e017      	b.n	80076aa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800767a:	697b      	ldr	r3, [r7, #20]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d101      	bne.n	8007684 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007680:	2300      	movs	r3, #0
 8007682:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007684:	697b      	ldr	r3, [r7, #20]
 8007686:	3b01      	subs	r3, #1
 8007688:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	689a      	ldr	r2, [r3, #8]
 8007690:	68bb      	ldr	r3, [r7, #8]
 8007692:	4013      	ands	r3, r2
 8007694:	68ba      	ldr	r2, [r7, #8]
 8007696:	429a      	cmp	r2, r3
 8007698:	bf0c      	ite	eq
 800769a:	2301      	moveq	r3, #1
 800769c:	2300      	movne	r3, #0
 800769e:	b2db      	uxtb	r3, r3
 80076a0:	461a      	mov	r2, r3
 80076a2:	79fb      	ldrb	r3, [r7, #7]
 80076a4:	429a      	cmp	r2, r3
 80076a6:	d19b      	bne.n	80075e0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80076a8:	2300      	movs	r3, #0
}
 80076aa:	4618      	mov	r0, r3
 80076ac:	3720      	adds	r7, #32
 80076ae:	46bd      	mov	sp, r7
 80076b0:	bd80      	pop	{r7, pc}
 80076b2:	bf00      	nop
 80076b4:	20000008 	.word	0x20000008

080076b8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b08a      	sub	sp, #40	@ 0x28
 80076bc:	af00      	add	r7, sp, #0
 80076be:	60f8      	str	r0, [r7, #12]
 80076c0:	60b9      	str	r1, [r7, #8]
 80076c2:	607a      	str	r2, [r7, #4]
 80076c4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80076c6:	2300      	movs	r3, #0
 80076c8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80076ca:	f7fb fe1f 	bl	800330c <HAL_GetTick>
 80076ce:	4602      	mov	r2, r0
 80076d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076d2:	1a9b      	subs	r3, r3, r2
 80076d4:	683a      	ldr	r2, [r7, #0]
 80076d6:	4413      	add	r3, r2
 80076d8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80076da:	f7fb fe17 	bl	800330c <HAL_GetTick>
 80076de:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	330c      	adds	r3, #12
 80076e6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80076e8:	4b3d      	ldr	r3, [pc, #244]	@ (80077e0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80076ea:	681a      	ldr	r2, [r3, #0]
 80076ec:	4613      	mov	r3, r2
 80076ee:	009b      	lsls	r3, r3, #2
 80076f0:	4413      	add	r3, r2
 80076f2:	00da      	lsls	r2, r3, #3
 80076f4:	1ad3      	subs	r3, r2, r3
 80076f6:	0d1b      	lsrs	r3, r3, #20
 80076f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80076fa:	fb02 f303 	mul.w	r3, r2, r3
 80076fe:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007700:	e060      	b.n	80077c4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007708:	d107      	bne.n	800771a <SPI_WaitFifoStateUntilTimeout+0x62>
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d104      	bne.n	800771a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007710:	69fb      	ldr	r3, [r7, #28]
 8007712:	781b      	ldrb	r3, [r3, #0]
 8007714:	b2db      	uxtb	r3, r3
 8007716:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007718:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007720:	d050      	beq.n	80077c4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007722:	f7fb fdf3 	bl	800330c <HAL_GetTick>
 8007726:	4602      	mov	r2, r0
 8007728:	6a3b      	ldr	r3, [r7, #32]
 800772a:	1ad3      	subs	r3, r2, r3
 800772c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800772e:	429a      	cmp	r2, r3
 8007730:	d902      	bls.n	8007738 <SPI_WaitFifoStateUntilTimeout+0x80>
 8007732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007734:	2b00      	cmp	r3, #0
 8007736:	d13d      	bne.n	80077b4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	685a      	ldr	r2, [r3, #4]
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007746:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	685b      	ldr	r3, [r3, #4]
 800774c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007750:	d111      	bne.n	8007776 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	689b      	ldr	r3, [r3, #8]
 8007756:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800775a:	d004      	beq.n	8007766 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	689b      	ldr	r3, [r3, #8]
 8007760:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007764:	d107      	bne.n	8007776 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	681a      	ldr	r2, [r3, #0]
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007774:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800777a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800777e:	d10f      	bne.n	80077a0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	681a      	ldr	r2, [r3, #0]
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800778e:	601a      	str	r2, [r3, #0]
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	681a      	ldr	r2, [r3, #0]
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800779e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	2201      	movs	r2, #1
 80077a4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	2200      	movs	r2, #0
 80077ac:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80077b0:	2303      	movs	r3, #3
 80077b2:	e010      	b.n	80077d6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80077b4:	69bb      	ldr	r3, [r7, #24]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d101      	bne.n	80077be <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80077ba:	2300      	movs	r3, #0
 80077bc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80077be:	69bb      	ldr	r3, [r7, #24]
 80077c0:	3b01      	subs	r3, #1
 80077c2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	689a      	ldr	r2, [r3, #8]
 80077ca:	68bb      	ldr	r3, [r7, #8]
 80077cc:	4013      	ands	r3, r2
 80077ce:	687a      	ldr	r2, [r7, #4]
 80077d0:	429a      	cmp	r2, r3
 80077d2:	d196      	bne.n	8007702 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80077d4:	2300      	movs	r3, #0
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	3728      	adds	r7, #40	@ 0x28
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}
 80077de:	bf00      	nop
 80077e0:	20000008 	.word	0x20000008

080077e4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b086      	sub	sp, #24
 80077e8:	af02      	add	r7, sp, #8
 80077ea:	60f8      	str	r0, [r7, #12]
 80077ec:	60b9      	str	r1, [r7, #8]
 80077ee:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	685b      	ldr	r3, [r3, #4]
 80077f4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80077f8:	d111      	bne.n	800781e <SPI_EndRxTransaction+0x3a>
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	689b      	ldr	r3, [r3, #8]
 80077fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007802:	d004      	beq.n	800780e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	689b      	ldr	r3, [r3, #8]
 8007808:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800780c:	d107      	bne.n	800781e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	681a      	ldr	r2, [r3, #0]
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800781c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	9300      	str	r3, [sp, #0]
 8007822:	68bb      	ldr	r3, [r7, #8]
 8007824:	2200      	movs	r2, #0
 8007826:	2180      	movs	r1, #128	@ 0x80
 8007828:	68f8      	ldr	r0, [r7, #12]
 800782a:	f7ff febd 	bl	80075a8 <SPI_WaitFlagStateUntilTimeout>
 800782e:	4603      	mov	r3, r0
 8007830:	2b00      	cmp	r3, #0
 8007832:	d007      	beq.n	8007844 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007838:	f043 0220 	orr.w	r2, r3, #32
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007840:	2303      	movs	r3, #3
 8007842:	e023      	b.n	800788c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	685b      	ldr	r3, [r3, #4]
 8007848:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800784c:	d11d      	bne.n	800788a <SPI_EndRxTransaction+0xa6>
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	689b      	ldr	r3, [r3, #8]
 8007852:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007856:	d004      	beq.n	8007862 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	689b      	ldr	r3, [r3, #8]
 800785c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007860:	d113      	bne.n	800788a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	9300      	str	r3, [sp, #0]
 8007866:	68bb      	ldr	r3, [r7, #8]
 8007868:	2200      	movs	r2, #0
 800786a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800786e:	68f8      	ldr	r0, [r7, #12]
 8007870:	f7ff ff22 	bl	80076b8 <SPI_WaitFifoStateUntilTimeout>
 8007874:	4603      	mov	r3, r0
 8007876:	2b00      	cmp	r3, #0
 8007878:	d007      	beq.n	800788a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800787e:	f043 0220 	orr.w	r2, r3, #32
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8007886:	2303      	movs	r3, #3
 8007888:	e000      	b.n	800788c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800788a:	2300      	movs	r3, #0
}
 800788c:	4618      	mov	r0, r3
 800788e:	3710      	adds	r7, #16
 8007890:	46bd      	mov	sp, r7
 8007892:	bd80      	pop	{r7, pc}

08007894 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b086      	sub	sp, #24
 8007898:	af02      	add	r7, sp, #8
 800789a:	60f8      	str	r0, [r7, #12]
 800789c:	60b9      	str	r1, [r7, #8]
 800789e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	9300      	str	r3, [sp, #0]
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	2200      	movs	r2, #0
 80078a8:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80078ac:	68f8      	ldr	r0, [r7, #12]
 80078ae:	f7ff ff03 	bl	80076b8 <SPI_WaitFifoStateUntilTimeout>
 80078b2:	4603      	mov	r3, r0
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d007      	beq.n	80078c8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80078bc:	f043 0220 	orr.w	r2, r3, #32
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80078c4:	2303      	movs	r3, #3
 80078c6:	e027      	b.n	8007918 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	9300      	str	r3, [sp, #0]
 80078cc:	68bb      	ldr	r3, [r7, #8]
 80078ce:	2200      	movs	r2, #0
 80078d0:	2180      	movs	r1, #128	@ 0x80
 80078d2:	68f8      	ldr	r0, [r7, #12]
 80078d4:	f7ff fe68 	bl	80075a8 <SPI_WaitFlagStateUntilTimeout>
 80078d8:	4603      	mov	r3, r0
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d007      	beq.n	80078ee <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80078e2:	f043 0220 	orr.w	r2, r3, #32
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80078ea:	2303      	movs	r3, #3
 80078ec:	e014      	b.n	8007918 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	9300      	str	r3, [sp, #0]
 80078f2:	68bb      	ldr	r3, [r7, #8]
 80078f4:	2200      	movs	r2, #0
 80078f6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80078fa:	68f8      	ldr	r0, [r7, #12]
 80078fc:	f7ff fedc 	bl	80076b8 <SPI_WaitFifoStateUntilTimeout>
 8007900:	4603      	mov	r3, r0
 8007902:	2b00      	cmp	r3, #0
 8007904:	d007      	beq.n	8007916 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800790a:	f043 0220 	orr.w	r2, r3, #32
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007912:	2303      	movs	r3, #3
 8007914:	e000      	b.n	8007918 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007916:	2300      	movs	r3, #0
}
 8007918:	4618      	mov	r0, r3
 800791a:	3710      	adds	r7, #16
 800791c:	46bd      	mov	sp, r7
 800791e:	bd80      	pop	{r7, pc}

08007920 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b082      	sub	sp, #8
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d101      	bne.n	8007932 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800792e:	2301      	movs	r3, #1
 8007930:	e049      	b.n	80079c6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007938:	b2db      	uxtb	r3, r3
 800793a:	2b00      	cmp	r3, #0
 800793c:	d106      	bne.n	800794c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2200      	movs	r2, #0
 8007942:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	f000 f841 	bl	80079ce <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2202      	movs	r2, #2
 8007950:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681a      	ldr	r2, [r3, #0]
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	3304      	adds	r3, #4
 800795c:	4619      	mov	r1, r3
 800795e:	4610      	mov	r0, r2
 8007960:	f000 f9be 	bl	8007ce0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2201      	movs	r2, #1
 8007968:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2201      	movs	r2, #1
 8007970:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2201      	movs	r2, #1
 8007978:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2201      	movs	r2, #1
 8007980:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2201      	movs	r2, #1
 8007988:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2201      	movs	r2, #1
 8007990:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2201      	movs	r2, #1
 8007998:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2201      	movs	r2, #1
 80079a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2201      	movs	r2, #1
 80079a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2201      	movs	r2, #1
 80079b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2201      	movs	r2, #1
 80079b8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2201      	movs	r2, #1
 80079c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80079c4:	2300      	movs	r3, #0
}
 80079c6:	4618      	mov	r0, r3
 80079c8:	3708      	adds	r7, #8
 80079ca:	46bd      	mov	sp, r7
 80079cc:	bd80      	pop	{r7, pc}

080079ce <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80079ce:	b480      	push	{r7}
 80079d0:	b083      	sub	sp, #12
 80079d2:	af00      	add	r7, sp, #0
 80079d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80079d6:	bf00      	nop
 80079d8:	370c      	adds	r7, #12
 80079da:	46bd      	mov	sp, r7
 80079dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e0:	4770      	bx	lr
	...

080079e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80079e4:	b480      	push	{r7}
 80079e6:	b085      	sub	sp, #20
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80079f2:	b2db      	uxtb	r3, r3
 80079f4:	2b01      	cmp	r3, #1
 80079f6:	d001      	beq.n	80079fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80079f8:	2301      	movs	r3, #1
 80079fa:	e036      	b.n	8007a6a <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2202      	movs	r2, #2
 8007a00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	68da      	ldr	r2, [r3, #12]
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f042 0201 	orr.w	r2, r2, #1
 8007a12:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	4a17      	ldr	r2, [pc, #92]	@ (8007a78 <HAL_TIM_Base_Start_IT+0x94>)
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d004      	beq.n	8007a28 <HAL_TIM_Base_Start_IT+0x44>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a26:	d115      	bne.n	8007a54 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	689a      	ldr	r2, [r3, #8]
 8007a2e:	4b13      	ldr	r3, [pc, #76]	@ (8007a7c <HAL_TIM_Base_Start_IT+0x98>)
 8007a30:	4013      	ands	r3, r2
 8007a32:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	2b06      	cmp	r3, #6
 8007a38:	d015      	beq.n	8007a66 <HAL_TIM_Base_Start_IT+0x82>
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a40:	d011      	beq.n	8007a66 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	681a      	ldr	r2, [r3, #0]
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f042 0201 	orr.w	r2, r2, #1
 8007a50:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a52:	e008      	b.n	8007a66 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	681a      	ldr	r2, [r3, #0]
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f042 0201 	orr.w	r2, r2, #1
 8007a62:	601a      	str	r2, [r3, #0]
 8007a64:	e000      	b.n	8007a68 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a66:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007a68:	2300      	movs	r3, #0
}
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	3714      	adds	r7, #20
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a74:	4770      	bx	lr
 8007a76:	bf00      	nop
 8007a78:	40012c00 	.word	0x40012c00
 8007a7c:	00010007 	.word	0x00010007

08007a80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b084      	sub	sp, #16
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	68db      	ldr	r3, [r3, #12]
 8007a8e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	691b      	ldr	r3, [r3, #16]
 8007a96:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007a98:	68bb      	ldr	r3, [r7, #8]
 8007a9a:	f003 0302 	and.w	r3, r3, #2
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d020      	beq.n	8007ae4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	f003 0302 	and.w	r3, r3, #2
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d01b      	beq.n	8007ae4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f06f 0202 	mvn.w	r2, #2
 8007ab4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2201      	movs	r2, #1
 8007aba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	699b      	ldr	r3, [r3, #24]
 8007ac2:	f003 0303 	and.w	r3, r3, #3
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d003      	beq.n	8007ad2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007aca:	6878      	ldr	r0, [r7, #4]
 8007acc:	f000 f8e9 	bl	8007ca2 <HAL_TIM_IC_CaptureCallback>
 8007ad0:	e005      	b.n	8007ade <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	f000 f8db 	bl	8007c8e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ad8:	6878      	ldr	r0, [r7, #4]
 8007ada:	f000 f8ec 	bl	8007cb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007ae4:	68bb      	ldr	r3, [r7, #8]
 8007ae6:	f003 0304 	and.w	r3, r3, #4
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d020      	beq.n	8007b30 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	f003 0304 	and.w	r3, r3, #4
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d01b      	beq.n	8007b30 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f06f 0204 	mvn.w	r2, #4
 8007b00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2202      	movs	r2, #2
 8007b06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	699b      	ldr	r3, [r3, #24]
 8007b0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d003      	beq.n	8007b1e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	f000 f8c3 	bl	8007ca2 <HAL_TIM_IC_CaptureCallback>
 8007b1c:	e005      	b.n	8007b2a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	f000 f8b5 	bl	8007c8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	f000 f8c6 	bl	8007cb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007b30:	68bb      	ldr	r3, [r7, #8]
 8007b32:	f003 0308 	and.w	r3, r3, #8
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d020      	beq.n	8007b7c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	f003 0308 	and.w	r3, r3, #8
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d01b      	beq.n	8007b7c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f06f 0208 	mvn.w	r2, #8
 8007b4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2204      	movs	r2, #4
 8007b52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	69db      	ldr	r3, [r3, #28]
 8007b5a:	f003 0303 	and.w	r3, r3, #3
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d003      	beq.n	8007b6a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	f000 f89d 	bl	8007ca2 <HAL_TIM_IC_CaptureCallback>
 8007b68:	e005      	b.n	8007b76 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	f000 f88f 	bl	8007c8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b70:	6878      	ldr	r0, [r7, #4]
 8007b72:	f000 f8a0 	bl	8007cb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2200      	movs	r2, #0
 8007b7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	f003 0310 	and.w	r3, r3, #16
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d020      	beq.n	8007bc8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	f003 0310 	and.w	r3, r3, #16
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d01b      	beq.n	8007bc8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f06f 0210 	mvn.w	r2, #16
 8007b98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2208      	movs	r2, #8
 8007b9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	69db      	ldr	r3, [r3, #28]
 8007ba6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d003      	beq.n	8007bb6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007bae:	6878      	ldr	r0, [r7, #4]
 8007bb0:	f000 f877 	bl	8007ca2 <HAL_TIM_IC_CaptureCallback>
 8007bb4:	e005      	b.n	8007bc2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f000 f869 	bl	8007c8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	f000 f87a 	bl	8007cb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007bc8:	68bb      	ldr	r3, [r7, #8]
 8007bca:	f003 0301 	and.w	r3, r3, #1
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d00c      	beq.n	8007bec <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	f003 0301 	and.w	r3, r3, #1
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d007      	beq.n	8007bec <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f06f 0201 	mvn.w	r2, #1
 8007be4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	f7fb f896 	bl	8002d18 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007bec:	68bb      	ldr	r3, [r7, #8]
 8007bee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d104      	bne.n	8007c00 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007bf6:	68bb      	ldr	r3, [r7, #8]
 8007bf8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d00c      	beq.n	8007c1a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d007      	beq.n	8007c1a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007c12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007c14:	6878      	ldr	r0, [r7, #4]
 8007c16:	f000 f8dd 	bl	8007dd4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007c1a:	68bb      	ldr	r3, [r7, #8]
 8007c1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d00c      	beq.n	8007c3e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d007      	beq.n	8007c3e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007c36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007c38:	6878      	ldr	r0, [r7, #4]
 8007c3a:	f000 f8d5 	bl	8007de8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007c3e:	68bb      	ldr	r3, [r7, #8]
 8007c40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d00c      	beq.n	8007c62 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d007      	beq.n	8007c62 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007c5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007c5c:	6878      	ldr	r0, [r7, #4]
 8007c5e:	f000 f834 	bl	8007cca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007c62:	68bb      	ldr	r3, [r7, #8]
 8007c64:	f003 0320 	and.w	r3, r3, #32
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d00c      	beq.n	8007c86 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	f003 0320 	and.w	r3, r3, #32
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d007      	beq.n	8007c86 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f06f 0220 	mvn.w	r2, #32
 8007c7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	f000 f89d 	bl	8007dc0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007c86:	bf00      	nop
 8007c88:	3710      	adds	r7, #16
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bd80      	pop	{r7, pc}

08007c8e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007c8e:	b480      	push	{r7}
 8007c90:	b083      	sub	sp, #12
 8007c92:	af00      	add	r7, sp, #0
 8007c94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007c96:	bf00      	nop
 8007c98:	370c      	adds	r7, #12
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca0:	4770      	bx	lr

08007ca2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007ca2:	b480      	push	{r7}
 8007ca4:	b083      	sub	sp, #12
 8007ca6:	af00      	add	r7, sp, #0
 8007ca8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007caa:	bf00      	nop
 8007cac:	370c      	adds	r7, #12
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb4:	4770      	bx	lr

08007cb6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007cb6:	b480      	push	{r7}
 8007cb8:	b083      	sub	sp, #12
 8007cba:	af00      	add	r7, sp, #0
 8007cbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007cbe:	bf00      	nop
 8007cc0:	370c      	adds	r7, #12
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc8:	4770      	bx	lr

08007cca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007cca:	b480      	push	{r7}
 8007ccc:	b083      	sub	sp, #12
 8007cce:	af00      	add	r7, sp, #0
 8007cd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007cd2:	bf00      	nop
 8007cd4:	370c      	adds	r7, #12
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cdc:	4770      	bx	lr
	...

08007ce0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007ce0:	b480      	push	{r7}
 8007ce2:	b085      	sub	sp, #20
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
 8007ce8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	4a30      	ldr	r2, [pc, #192]	@ (8007db4 <TIM_Base_SetConfig+0xd4>)
 8007cf4:	4293      	cmp	r3, r2
 8007cf6:	d003      	beq.n	8007d00 <TIM_Base_SetConfig+0x20>
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007cfe:	d108      	bne.n	8007d12 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	685b      	ldr	r3, [r3, #4]
 8007d0c:	68fa      	ldr	r2, [r7, #12]
 8007d0e:	4313      	orrs	r3, r2
 8007d10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	4a27      	ldr	r2, [pc, #156]	@ (8007db4 <TIM_Base_SetConfig+0xd4>)
 8007d16:	4293      	cmp	r3, r2
 8007d18:	d00b      	beq.n	8007d32 <TIM_Base_SetConfig+0x52>
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d20:	d007      	beq.n	8007d32 <TIM_Base_SetConfig+0x52>
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	4a24      	ldr	r2, [pc, #144]	@ (8007db8 <TIM_Base_SetConfig+0xd8>)
 8007d26:	4293      	cmp	r3, r2
 8007d28:	d003      	beq.n	8007d32 <TIM_Base_SetConfig+0x52>
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	4a23      	ldr	r2, [pc, #140]	@ (8007dbc <TIM_Base_SetConfig+0xdc>)
 8007d2e:	4293      	cmp	r3, r2
 8007d30:	d108      	bne.n	8007d44 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007d38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	68db      	ldr	r3, [r3, #12]
 8007d3e:	68fa      	ldr	r2, [r7, #12]
 8007d40:	4313      	orrs	r3, r2
 8007d42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	695b      	ldr	r3, [r3, #20]
 8007d4e:	4313      	orrs	r3, r2
 8007d50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	68fa      	ldr	r2, [r7, #12]
 8007d56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	689a      	ldr	r2, [r3, #8]
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	681a      	ldr	r2, [r3, #0]
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	4a12      	ldr	r2, [pc, #72]	@ (8007db4 <TIM_Base_SetConfig+0xd4>)
 8007d6c:	4293      	cmp	r3, r2
 8007d6e:	d007      	beq.n	8007d80 <TIM_Base_SetConfig+0xa0>
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	4a11      	ldr	r2, [pc, #68]	@ (8007db8 <TIM_Base_SetConfig+0xd8>)
 8007d74:	4293      	cmp	r3, r2
 8007d76:	d003      	beq.n	8007d80 <TIM_Base_SetConfig+0xa0>
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	4a10      	ldr	r2, [pc, #64]	@ (8007dbc <TIM_Base_SetConfig+0xdc>)
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	d103      	bne.n	8007d88 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	691a      	ldr	r2, [r3, #16]
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2201      	movs	r2, #1
 8007d8c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	691b      	ldr	r3, [r3, #16]
 8007d92:	f003 0301 	and.w	r3, r3, #1
 8007d96:	2b01      	cmp	r3, #1
 8007d98:	d105      	bne.n	8007da6 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	691b      	ldr	r3, [r3, #16]
 8007d9e:	f023 0201 	bic.w	r2, r3, #1
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	611a      	str	r2, [r3, #16]
  }
}
 8007da6:	bf00      	nop
 8007da8:	3714      	adds	r7, #20
 8007daa:	46bd      	mov	sp, r7
 8007dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db0:	4770      	bx	lr
 8007db2:	bf00      	nop
 8007db4:	40012c00 	.word	0x40012c00
 8007db8:	40014400 	.word	0x40014400
 8007dbc:	40014800 	.word	0x40014800

08007dc0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007dc0:	b480      	push	{r7}
 8007dc2:	b083      	sub	sp, #12
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007dc8:	bf00      	nop
 8007dca:	370c      	adds	r7, #12
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd2:	4770      	bx	lr

08007dd4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007dd4:	b480      	push	{r7}
 8007dd6:	b083      	sub	sp, #12
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007ddc:	bf00      	nop
 8007dde:	370c      	adds	r7, #12
 8007de0:	46bd      	mov	sp, r7
 8007de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de6:	4770      	bx	lr

08007de8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007de8:	b480      	push	{r7}
 8007dea:	b083      	sub	sp, #12
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007df0:	bf00      	nop
 8007df2:	370c      	adds	r7, #12
 8007df4:	46bd      	mov	sp, r7
 8007df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfa:	4770      	bx	lr

08007dfc <LL_RCC_GetUSARTClockSource>:
{
 8007dfc:	b480      	push	{r7}
 8007dfe:	b083      	sub	sp, #12
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8007e04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007e08:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	4013      	ands	r3, r2
}
 8007e10:	4618      	mov	r0, r3
 8007e12:	370c      	adds	r7, #12
 8007e14:	46bd      	mov	sp, r7
 8007e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1a:	4770      	bx	lr

08007e1c <LL_RCC_GetLPUARTClockSource>:
{
 8007e1c:	b480      	push	{r7}
 8007e1e:	b083      	sub	sp, #12
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8007e24:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007e28:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	4013      	ands	r3, r2
}
 8007e30:	4618      	mov	r0, r3
 8007e32:	370c      	adds	r7, #12
 8007e34:	46bd      	mov	sp, r7
 8007e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3a:	4770      	bx	lr

08007e3c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b082      	sub	sp, #8
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d101      	bne.n	8007e4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	e042      	b.n	8007ed4 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d106      	bne.n	8007e66 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007e60:	6878      	ldr	r0, [r7, #4]
 8007e62:	f7fb f899 	bl	8002f98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	2224      	movs	r2, #36	@ 0x24
 8007e6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	681a      	ldr	r2, [r3, #0]
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f022 0201 	bic.w	r2, r2, #1
 8007e7c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d002      	beq.n	8007e8c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007e86:	6878      	ldr	r0, [r7, #4]
 8007e88:	f000 fe32 	bl	8008af0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007e8c:	6878      	ldr	r0, [r7, #4]
 8007e8e:	f000 fc07 	bl	80086a0 <UART_SetConfig>
 8007e92:	4603      	mov	r3, r0
 8007e94:	2b01      	cmp	r3, #1
 8007e96:	d101      	bne.n	8007e9c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007e98:	2301      	movs	r3, #1
 8007e9a:	e01b      	b.n	8007ed4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	685a      	ldr	r2, [r3, #4]
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007eaa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	689a      	ldr	r2, [r3, #8]
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007eba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	681a      	ldr	r2, [r3, #0]
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f042 0201 	orr.w	r2, r2, #1
 8007eca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007ecc:	6878      	ldr	r0, [r7, #4]
 8007ece:	f000 feb1 	bl	8008c34 <UART_CheckIdleState>
 8007ed2:	4603      	mov	r3, r0
}
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	3708      	adds	r7, #8
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	bd80      	pop	{r7, pc}

08007edc <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b08a      	sub	sp, #40	@ 0x28
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	60f8      	str	r0, [r7, #12]
 8007ee4:	60b9      	str	r1, [r7, #8]
 8007ee6:	4613      	mov	r3, r2
 8007ee8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ef0:	2b20      	cmp	r3, #32
 8007ef2:	d167      	bne.n	8007fc4 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ef4:	68bb      	ldr	r3, [r7, #8]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d002      	beq.n	8007f00 <HAL_UART_Transmit_DMA+0x24>
 8007efa:	88fb      	ldrh	r3, [r7, #6]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d101      	bne.n	8007f04 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8007f00:	2301      	movs	r3, #1
 8007f02:	e060      	b.n	8007fc6 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	68ba      	ldr	r2, [r7, #8]
 8007f08:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	88fa      	ldrh	r2, [r7, #6]
 8007f0e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	88fa      	ldrh	r2, [r7, #6]
 8007f16:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	2221      	movs	r2, #33	@ 0x21
 8007f26:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d028      	beq.n	8007f84 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007f36:	4a26      	ldr	r2, [pc, #152]	@ (8007fd0 <HAL_UART_Transmit_DMA+0xf4>)
 8007f38:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007f3e:	4a25      	ldr	r2, [pc, #148]	@ (8007fd4 <HAL_UART_Transmit_DMA+0xf8>)
 8007f40:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007f46:	4a24      	ldr	r2, [pc, #144]	@ (8007fd8 <HAL_UART_Transmit_DMA+0xfc>)
 8007f48:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007f4e:	2200      	movs	r2, #0
 8007f50:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f5a:	4619      	mov	r1, r3
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	3328      	adds	r3, #40	@ 0x28
 8007f62:	461a      	mov	r2, r3
 8007f64:	88fb      	ldrh	r3, [r7, #6]
 8007f66:	f7fb fc37 	bl	80037d8 <HAL_DMA_Start_IT>
 8007f6a:	4603      	mov	r3, r0
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d009      	beq.n	8007f84 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	2210      	movs	r2, #16
 8007f74:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	2220      	movs	r2, #32
 8007f7c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8007f80:	2301      	movs	r3, #1
 8007f82:	e020      	b.n	8007fc6 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	2240      	movs	r2, #64	@ 0x40
 8007f8a:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	3308      	adds	r3, #8
 8007f92:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f94:	697b      	ldr	r3, [r7, #20]
 8007f96:	e853 3f00 	ldrex	r3, [r3]
 8007f9a:	613b      	str	r3, [r7, #16]
   return(result);
 8007f9c:	693b      	ldr	r3, [r7, #16]
 8007f9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007fa2:	627b      	str	r3, [r7, #36]	@ 0x24
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	3308      	adds	r3, #8
 8007faa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007fac:	623a      	str	r2, [r7, #32]
 8007fae:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fb0:	69f9      	ldr	r1, [r7, #28]
 8007fb2:	6a3a      	ldr	r2, [r7, #32]
 8007fb4:	e841 2300 	strex	r3, r2, [r1]
 8007fb8:	61bb      	str	r3, [r7, #24]
   return(result);
 8007fba:	69bb      	ldr	r3, [r7, #24]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d1e5      	bne.n	8007f8c <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	e000      	b.n	8007fc6 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8007fc4:	2302      	movs	r3, #2
  }
}
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	3728      	adds	r7, #40	@ 0x28
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	bd80      	pop	{r7, pc}
 8007fce:	bf00      	nop
 8007fd0:	08008fb1 	.word	0x08008fb1
 8007fd4:	0800904b 	.word	0x0800904b
 8007fd8:	08009067 	.word	0x08009067

08007fdc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b0ba      	sub	sp, #232	@ 0xe8
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	69db      	ldr	r3, [r3, #28]
 8007fea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	689b      	ldr	r3, [r3, #8]
 8007ffe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008002:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8008006:	f640 030f 	movw	r3, #2063	@ 0x80f
 800800a:	4013      	ands	r3, r2
 800800c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008010:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008014:	2b00      	cmp	r3, #0
 8008016:	d11b      	bne.n	8008050 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008018:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800801c:	f003 0320 	and.w	r3, r3, #32
 8008020:	2b00      	cmp	r3, #0
 8008022:	d015      	beq.n	8008050 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008024:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008028:	f003 0320 	and.w	r3, r3, #32
 800802c:	2b00      	cmp	r3, #0
 800802e:	d105      	bne.n	800803c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008030:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008034:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008038:	2b00      	cmp	r3, #0
 800803a:	d009      	beq.n	8008050 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008040:	2b00      	cmp	r3, #0
 8008042:	f000 8300 	beq.w	8008646 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800804a:	6878      	ldr	r0, [r7, #4]
 800804c:	4798      	blx	r3
      }
      return;
 800804e:	e2fa      	b.n	8008646 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008050:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008054:	2b00      	cmp	r3, #0
 8008056:	f000 8123 	beq.w	80082a0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800805a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800805e:	4b8d      	ldr	r3, [pc, #564]	@ (8008294 <HAL_UART_IRQHandler+0x2b8>)
 8008060:	4013      	ands	r3, r2
 8008062:	2b00      	cmp	r3, #0
 8008064:	d106      	bne.n	8008074 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008066:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800806a:	4b8b      	ldr	r3, [pc, #556]	@ (8008298 <HAL_UART_IRQHandler+0x2bc>)
 800806c:	4013      	ands	r3, r2
 800806e:	2b00      	cmp	r3, #0
 8008070:	f000 8116 	beq.w	80082a0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008074:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008078:	f003 0301 	and.w	r3, r3, #1
 800807c:	2b00      	cmp	r3, #0
 800807e:	d011      	beq.n	80080a4 <HAL_UART_IRQHandler+0xc8>
 8008080:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008084:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008088:	2b00      	cmp	r3, #0
 800808a:	d00b      	beq.n	80080a4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	2201      	movs	r2, #1
 8008092:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800809a:	f043 0201 	orr.w	r2, r3, #1
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80080a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80080a8:	f003 0302 	and.w	r3, r3, #2
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d011      	beq.n	80080d4 <HAL_UART_IRQHandler+0xf8>
 80080b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80080b4:	f003 0301 	and.w	r3, r3, #1
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d00b      	beq.n	80080d4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	2202      	movs	r2, #2
 80080c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80080ca:	f043 0204 	orr.w	r2, r3, #4
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80080d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80080d8:	f003 0304 	and.w	r3, r3, #4
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d011      	beq.n	8008104 <HAL_UART_IRQHandler+0x128>
 80080e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80080e4:	f003 0301 	and.w	r3, r3, #1
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d00b      	beq.n	8008104 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	2204      	movs	r2, #4
 80080f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80080fa:	f043 0202 	orr.w	r2, r3, #2
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008104:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008108:	f003 0308 	and.w	r3, r3, #8
 800810c:	2b00      	cmp	r3, #0
 800810e:	d017      	beq.n	8008140 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008110:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008114:	f003 0320 	and.w	r3, r3, #32
 8008118:	2b00      	cmp	r3, #0
 800811a:	d105      	bne.n	8008128 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800811c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008120:	4b5c      	ldr	r3, [pc, #368]	@ (8008294 <HAL_UART_IRQHandler+0x2b8>)
 8008122:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008124:	2b00      	cmp	r3, #0
 8008126:	d00b      	beq.n	8008140 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	2208      	movs	r2, #8
 800812e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008136:	f043 0208 	orr.w	r2, r3, #8
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008140:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008144:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008148:	2b00      	cmp	r3, #0
 800814a:	d012      	beq.n	8008172 <HAL_UART_IRQHandler+0x196>
 800814c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008150:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008154:	2b00      	cmp	r3, #0
 8008156:	d00c      	beq.n	8008172 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008160:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008168:	f043 0220 	orr.w	r2, r3, #32
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008178:	2b00      	cmp	r3, #0
 800817a:	f000 8266 	beq.w	800864a <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800817e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008182:	f003 0320 	and.w	r3, r3, #32
 8008186:	2b00      	cmp	r3, #0
 8008188:	d013      	beq.n	80081b2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800818a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800818e:	f003 0320 	and.w	r3, r3, #32
 8008192:	2b00      	cmp	r3, #0
 8008194:	d105      	bne.n	80081a2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008196:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800819a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d007      	beq.n	80081b2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d003      	beq.n	80081b2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80081ae:	6878      	ldr	r0, [r7, #4]
 80081b0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081b8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	689b      	ldr	r3, [r3, #8]
 80081c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081c6:	2b40      	cmp	r3, #64	@ 0x40
 80081c8:	d005      	beq.n	80081d6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80081ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80081ce:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d054      	beq.n	8008280 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80081d6:	6878      	ldr	r0, [r7, #4]
 80081d8:	f000 fe84 	bl	8008ee4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	689b      	ldr	r3, [r3, #8]
 80081e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081e6:	2b40      	cmp	r3, #64	@ 0x40
 80081e8:	d146      	bne.n	8008278 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	3308      	adds	r3, #8
 80081f0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80081f8:	e853 3f00 	ldrex	r3, [r3]
 80081fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008200:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008204:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008208:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	3308      	adds	r3, #8
 8008212:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008216:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800821a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800821e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008222:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008226:	e841 2300 	strex	r3, r2, [r1]
 800822a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800822e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008232:	2b00      	cmp	r3, #0
 8008234:	d1d9      	bne.n	80081ea <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800823c:	2b00      	cmp	r3, #0
 800823e:	d017      	beq.n	8008270 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008246:	4a15      	ldr	r2, [pc, #84]	@ (800829c <HAL_UART_IRQHandler+0x2c0>)
 8008248:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008250:	4618      	mov	r0, r3
 8008252:	f7fb fb9b 	bl	800398c <HAL_DMA_Abort_IT>
 8008256:	4603      	mov	r3, r0
 8008258:	2b00      	cmp	r3, #0
 800825a:	d019      	beq.n	8008290 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008262:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008264:	687a      	ldr	r2, [r7, #4]
 8008266:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800826a:	4610      	mov	r0, r2
 800826c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800826e:	e00f      	b.n	8008290 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008270:	6878      	ldr	r0, [r7, #4]
 8008272:	f000 f9ff 	bl	8008674 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008276:	e00b      	b.n	8008290 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008278:	6878      	ldr	r0, [r7, #4]
 800827a:	f000 f9fb 	bl	8008674 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800827e:	e007      	b.n	8008290 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008280:	6878      	ldr	r0, [r7, #4]
 8008282:	f000 f9f7 	bl	8008674 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2200      	movs	r2, #0
 800828a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800828e:	e1dc      	b.n	800864a <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008290:	bf00      	nop
    return;
 8008292:	e1da      	b.n	800864a <HAL_UART_IRQHandler+0x66e>
 8008294:	10000001 	.word	0x10000001
 8008298:	04000120 	.word	0x04000120
 800829c:	080090e7 	.word	0x080090e7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80082a4:	2b01      	cmp	r3, #1
 80082a6:	f040 8170 	bne.w	800858a <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80082aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80082ae:	f003 0310 	and.w	r3, r3, #16
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	f000 8169 	beq.w	800858a <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80082b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80082bc:	f003 0310 	and.w	r3, r3, #16
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	f000 8162 	beq.w	800858a <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	2210      	movs	r2, #16
 80082cc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	689b      	ldr	r3, [r3, #8]
 80082d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082d8:	2b40      	cmp	r3, #64	@ 0x40
 80082da:	f040 80d8 	bne.w	800848e <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	685b      	ldr	r3, [r3, #4]
 80082e8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80082ec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	f000 80af 	beq.w	8008454 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80082fc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008300:	429a      	cmp	r2, r3
 8008302:	f080 80a7 	bcs.w	8008454 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800830c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	f003 0320 	and.w	r3, r3, #32
 800831e:	2b00      	cmp	r3, #0
 8008320:	f040 8087 	bne.w	8008432 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800832c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008330:	e853 3f00 	ldrex	r3, [r3]
 8008334:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008338:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800833c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008340:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	461a      	mov	r2, r3
 800834a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800834e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008352:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008356:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800835a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800835e:	e841 2300 	strex	r3, r2, [r1]
 8008362:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008366:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800836a:	2b00      	cmp	r3, #0
 800836c:	d1da      	bne.n	8008324 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	3308      	adds	r3, #8
 8008374:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008376:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008378:	e853 3f00 	ldrex	r3, [r3]
 800837c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800837e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008380:	f023 0301 	bic.w	r3, r3, #1
 8008384:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	3308      	adds	r3, #8
 800838e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008392:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008396:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008398:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800839a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800839e:	e841 2300 	strex	r3, r2, [r1]
 80083a2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80083a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d1e1      	bne.n	800836e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	3308      	adds	r3, #8
 80083b0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083b2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80083b4:	e853 3f00 	ldrex	r3, [r3]
 80083b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80083ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80083bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80083c0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	3308      	adds	r3, #8
 80083ca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80083ce:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80083d0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083d2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80083d4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80083d6:	e841 2300 	strex	r3, r2, [r1]
 80083da:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80083dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d1e3      	bne.n	80083aa <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	2220      	movs	r2, #32
 80083e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	2200      	movs	r2, #0
 80083ee:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80083f8:	e853 3f00 	ldrex	r3, [r3]
 80083fc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80083fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008400:	f023 0310 	bic.w	r3, r3, #16
 8008404:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	461a      	mov	r2, r3
 800840e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008412:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008414:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008416:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008418:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800841a:	e841 2300 	strex	r3, r2, [r1]
 800841e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008420:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008422:	2b00      	cmp	r3, #0
 8008424:	d1e4      	bne.n	80083f0 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800842c:	4618      	mov	r0, r3
 800842e:	f7fb fa4e 	bl	80038ce <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2202      	movs	r2, #2
 8008436:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008444:	b29b      	uxth	r3, r3
 8008446:	1ad3      	subs	r3, r2, r3
 8008448:	b29b      	uxth	r3, r3
 800844a:	4619      	mov	r1, r3
 800844c:	6878      	ldr	r0, [r7, #4]
 800844e:	f000 f91b 	bl	8008688 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8008452:	e0fc      	b.n	800864e <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800845a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800845e:	429a      	cmp	r2, r3
 8008460:	f040 80f5 	bne.w	800864e <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	f003 0320 	and.w	r3, r3, #32
 8008472:	2b20      	cmp	r3, #32
 8008474:	f040 80eb 	bne.w	800864e <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2202      	movs	r2, #2
 800847c:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008484:	4619      	mov	r1, r3
 8008486:	6878      	ldr	r0, [r7, #4]
 8008488:	f000 f8fe 	bl	8008688 <HAL_UARTEx_RxEventCallback>
      return;
 800848c:	e0df      	b.n	800864e <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800849a:	b29b      	uxth	r3, r3
 800849c:	1ad3      	subs	r3, r2, r3
 800849e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80084a8:	b29b      	uxth	r3, r3
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	f000 80d1 	beq.w	8008652 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 80084b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	f000 80cc 	beq.w	8008652 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084c2:	e853 3f00 	ldrex	r3, [r3]
 80084c6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80084c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084ca:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80084ce:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	461a      	mov	r2, r3
 80084d8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80084dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80084de:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084e0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80084e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80084e4:	e841 2300 	strex	r3, r2, [r1]
 80084e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80084ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d1e4      	bne.n	80084ba <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	3308      	adds	r3, #8
 80084f6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084fa:	e853 3f00 	ldrex	r3, [r3]
 80084fe:	623b      	str	r3, [r7, #32]
   return(result);
 8008500:	6a3b      	ldr	r3, [r7, #32]
 8008502:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008506:	f023 0301 	bic.w	r3, r3, #1
 800850a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	3308      	adds	r3, #8
 8008514:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008518:	633a      	str	r2, [r7, #48]	@ 0x30
 800851a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800851c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800851e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008520:	e841 2300 	strex	r3, r2, [r1]
 8008524:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008526:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008528:	2b00      	cmp	r3, #0
 800852a:	d1e1      	bne.n	80084f0 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2220      	movs	r2, #32
 8008530:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2200      	movs	r2, #0
 8008538:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	2200      	movs	r2, #0
 800853e:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008546:	693b      	ldr	r3, [r7, #16]
 8008548:	e853 3f00 	ldrex	r3, [r3]
 800854c:	60fb      	str	r3, [r7, #12]
   return(result);
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	f023 0310 	bic.w	r3, r3, #16
 8008554:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	461a      	mov	r2, r3
 800855e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008562:	61fb      	str	r3, [r7, #28]
 8008564:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008566:	69b9      	ldr	r1, [r7, #24]
 8008568:	69fa      	ldr	r2, [r7, #28]
 800856a:	e841 2300 	strex	r3, r2, [r1]
 800856e:	617b      	str	r3, [r7, #20]
   return(result);
 8008570:	697b      	ldr	r3, [r7, #20]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d1e4      	bne.n	8008540 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	2202      	movs	r2, #2
 800857a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800857c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008580:	4619      	mov	r1, r3
 8008582:	6878      	ldr	r0, [r7, #4]
 8008584:	f000 f880 	bl	8008688 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008588:	e063      	b.n	8008652 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800858a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800858e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008592:	2b00      	cmp	r3, #0
 8008594:	d00e      	beq.n	80085b4 <HAL_UART_IRQHandler+0x5d8>
 8008596:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800859a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d008      	beq.n	80085b4 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80085aa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80085ac:	6878      	ldr	r0, [r7, #4]
 80085ae:	f000 fddb 	bl	8009168 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80085b2:	e051      	b.n	8008658 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80085b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80085b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d014      	beq.n	80085ea <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80085c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80085c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d105      	bne.n	80085d8 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80085cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80085d0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d008      	beq.n	80085ea <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d03a      	beq.n	8008656 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80085e4:	6878      	ldr	r0, [r7, #4]
 80085e6:	4798      	blx	r3
    }
    return;
 80085e8:	e035      	b.n	8008656 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80085ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80085ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d009      	beq.n	800860a <HAL_UART_IRQHandler+0x62e>
 80085f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80085fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d003      	beq.n	800860a <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	f000 fd85 	bl	8009112 <UART_EndTransmit_IT>
    return;
 8008608:	e026      	b.n	8008658 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800860a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800860e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008612:	2b00      	cmp	r3, #0
 8008614:	d009      	beq.n	800862a <HAL_UART_IRQHandler+0x64e>
 8008616:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800861a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800861e:	2b00      	cmp	r3, #0
 8008620:	d003      	beq.n	800862a <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	f000 fdb4 	bl	8009190 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008628:	e016      	b.n	8008658 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800862a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800862e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008632:	2b00      	cmp	r3, #0
 8008634:	d010      	beq.n	8008658 <HAL_UART_IRQHandler+0x67c>
 8008636:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800863a:	2b00      	cmp	r3, #0
 800863c:	da0c      	bge.n	8008658 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	f000 fd9c 	bl	800917c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008644:	e008      	b.n	8008658 <HAL_UART_IRQHandler+0x67c>
      return;
 8008646:	bf00      	nop
 8008648:	e006      	b.n	8008658 <HAL_UART_IRQHandler+0x67c>
    return;
 800864a:	bf00      	nop
 800864c:	e004      	b.n	8008658 <HAL_UART_IRQHandler+0x67c>
      return;
 800864e:	bf00      	nop
 8008650:	e002      	b.n	8008658 <HAL_UART_IRQHandler+0x67c>
      return;
 8008652:	bf00      	nop
 8008654:	e000      	b.n	8008658 <HAL_UART_IRQHandler+0x67c>
    return;
 8008656:	bf00      	nop
  }
}
 8008658:	37e8      	adds	r7, #232	@ 0xe8
 800865a:	46bd      	mov	sp, r7
 800865c:	bd80      	pop	{r7, pc}
 800865e:	bf00      	nop

08008660 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008660:	b480      	push	{r7}
 8008662:	b083      	sub	sp, #12
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8008668:	bf00      	nop
 800866a:	370c      	adds	r7, #12
 800866c:	46bd      	mov	sp, r7
 800866e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008672:	4770      	bx	lr

08008674 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008674:	b480      	push	{r7}
 8008676:	b083      	sub	sp, #12
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800867c:	bf00      	nop
 800867e:	370c      	adds	r7, #12
 8008680:	46bd      	mov	sp, r7
 8008682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008686:	4770      	bx	lr

08008688 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008688:	b480      	push	{r7}
 800868a:	b083      	sub	sp, #12
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
 8008690:	460b      	mov	r3, r1
 8008692:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008694:	bf00      	nop
 8008696:	370c      	adds	r7, #12
 8008698:	46bd      	mov	sp, r7
 800869a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869e:	4770      	bx	lr

080086a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80086a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80086a4:	b08c      	sub	sp, #48	@ 0x30
 80086a6:	af00      	add	r7, sp, #0
 80086a8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80086aa:	2300      	movs	r3, #0
 80086ac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80086b0:	697b      	ldr	r3, [r7, #20]
 80086b2:	689a      	ldr	r2, [r3, #8]
 80086b4:	697b      	ldr	r3, [r7, #20]
 80086b6:	691b      	ldr	r3, [r3, #16]
 80086b8:	431a      	orrs	r2, r3
 80086ba:	697b      	ldr	r3, [r7, #20]
 80086bc:	695b      	ldr	r3, [r3, #20]
 80086be:	431a      	orrs	r2, r3
 80086c0:	697b      	ldr	r3, [r7, #20]
 80086c2:	69db      	ldr	r3, [r3, #28]
 80086c4:	4313      	orrs	r3, r2
 80086c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80086c8:	697b      	ldr	r3, [r7, #20]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	681a      	ldr	r2, [r3, #0]
 80086ce:	4baf      	ldr	r3, [pc, #700]	@ (800898c <UART_SetConfig+0x2ec>)
 80086d0:	4013      	ands	r3, r2
 80086d2:	697a      	ldr	r2, [r7, #20]
 80086d4:	6812      	ldr	r2, [r2, #0]
 80086d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80086d8:	430b      	orrs	r3, r1
 80086da:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80086dc:	697b      	ldr	r3, [r7, #20]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	685b      	ldr	r3, [r3, #4]
 80086e2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80086e6:	697b      	ldr	r3, [r7, #20]
 80086e8:	68da      	ldr	r2, [r3, #12]
 80086ea:	697b      	ldr	r3, [r7, #20]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	430a      	orrs	r2, r1
 80086f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80086f2:	697b      	ldr	r3, [r7, #20]
 80086f4:	699b      	ldr	r3, [r3, #24]
 80086f6:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80086f8:	697b      	ldr	r3, [r7, #20]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	4aa4      	ldr	r2, [pc, #656]	@ (8008990 <UART_SetConfig+0x2f0>)
 80086fe:	4293      	cmp	r3, r2
 8008700:	d004      	beq.n	800870c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008702:	697b      	ldr	r3, [r7, #20]
 8008704:	6a1b      	ldr	r3, [r3, #32]
 8008706:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008708:	4313      	orrs	r3, r2
 800870a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800870c:	697b      	ldr	r3, [r7, #20]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	689b      	ldr	r3, [r3, #8]
 8008712:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8008716:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800871a:	697a      	ldr	r2, [r7, #20]
 800871c:	6812      	ldr	r2, [r2, #0]
 800871e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008720:	430b      	orrs	r3, r1
 8008722:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008724:	697b      	ldr	r3, [r7, #20]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800872a:	f023 010f 	bic.w	r1, r3, #15
 800872e:	697b      	ldr	r3, [r7, #20]
 8008730:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008732:	697b      	ldr	r3, [r7, #20]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	430a      	orrs	r2, r1
 8008738:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800873a:	697b      	ldr	r3, [r7, #20]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	4a95      	ldr	r2, [pc, #596]	@ (8008994 <UART_SetConfig+0x2f4>)
 8008740:	4293      	cmp	r3, r2
 8008742:	d125      	bne.n	8008790 <UART_SetConfig+0xf0>
 8008744:	2003      	movs	r0, #3
 8008746:	f7ff fb59 	bl	8007dfc <LL_RCC_GetUSARTClockSource>
 800874a:	4603      	mov	r3, r0
 800874c:	2b03      	cmp	r3, #3
 800874e:	d81b      	bhi.n	8008788 <UART_SetConfig+0xe8>
 8008750:	a201      	add	r2, pc, #4	@ (adr r2, 8008758 <UART_SetConfig+0xb8>)
 8008752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008756:	bf00      	nop
 8008758:	08008769 	.word	0x08008769
 800875c:	08008779 	.word	0x08008779
 8008760:	08008771 	.word	0x08008771
 8008764:	08008781 	.word	0x08008781
 8008768:	2301      	movs	r3, #1
 800876a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800876e:	e042      	b.n	80087f6 <UART_SetConfig+0x156>
 8008770:	2302      	movs	r3, #2
 8008772:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008776:	e03e      	b.n	80087f6 <UART_SetConfig+0x156>
 8008778:	2304      	movs	r3, #4
 800877a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800877e:	e03a      	b.n	80087f6 <UART_SetConfig+0x156>
 8008780:	2308      	movs	r3, #8
 8008782:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008786:	e036      	b.n	80087f6 <UART_SetConfig+0x156>
 8008788:	2310      	movs	r3, #16
 800878a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800878e:	e032      	b.n	80087f6 <UART_SetConfig+0x156>
 8008790:	697b      	ldr	r3, [r7, #20]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	4a7e      	ldr	r2, [pc, #504]	@ (8008990 <UART_SetConfig+0x2f0>)
 8008796:	4293      	cmp	r3, r2
 8008798:	d12a      	bne.n	80087f0 <UART_SetConfig+0x150>
 800879a:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 800879e:	f7ff fb3d 	bl	8007e1c <LL_RCC_GetLPUARTClockSource>
 80087a2:	4603      	mov	r3, r0
 80087a4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80087a8:	d01a      	beq.n	80087e0 <UART_SetConfig+0x140>
 80087aa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80087ae:	d81b      	bhi.n	80087e8 <UART_SetConfig+0x148>
 80087b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80087b4:	d00c      	beq.n	80087d0 <UART_SetConfig+0x130>
 80087b6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80087ba:	d815      	bhi.n	80087e8 <UART_SetConfig+0x148>
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d003      	beq.n	80087c8 <UART_SetConfig+0x128>
 80087c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80087c4:	d008      	beq.n	80087d8 <UART_SetConfig+0x138>
 80087c6:	e00f      	b.n	80087e8 <UART_SetConfig+0x148>
 80087c8:	2300      	movs	r3, #0
 80087ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80087ce:	e012      	b.n	80087f6 <UART_SetConfig+0x156>
 80087d0:	2302      	movs	r3, #2
 80087d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80087d6:	e00e      	b.n	80087f6 <UART_SetConfig+0x156>
 80087d8:	2304      	movs	r3, #4
 80087da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80087de:	e00a      	b.n	80087f6 <UART_SetConfig+0x156>
 80087e0:	2308      	movs	r3, #8
 80087e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80087e6:	e006      	b.n	80087f6 <UART_SetConfig+0x156>
 80087e8:	2310      	movs	r3, #16
 80087ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80087ee:	e002      	b.n	80087f6 <UART_SetConfig+0x156>
 80087f0:	2310      	movs	r3, #16
 80087f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80087f6:	697b      	ldr	r3, [r7, #20]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	4a65      	ldr	r2, [pc, #404]	@ (8008990 <UART_SetConfig+0x2f0>)
 80087fc:	4293      	cmp	r3, r2
 80087fe:	f040 8097 	bne.w	8008930 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008802:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008806:	2b08      	cmp	r3, #8
 8008808:	d823      	bhi.n	8008852 <UART_SetConfig+0x1b2>
 800880a:	a201      	add	r2, pc, #4	@ (adr r2, 8008810 <UART_SetConfig+0x170>)
 800880c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008810:	08008835 	.word	0x08008835
 8008814:	08008853 	.word	0x08008853
 8008818:	0800883d 	.word	0x0800883d
 800881c:	08008853 	.word	0x08008853
 8008820:	08008843 	.word	0x08008843
 8008824:	08008853 	.word	0x08008853
 8008828:	08008853 	.word	0x08008853
 800882c:	08008853 	.word	0x08008853
 8008830:	0800884b 	.word	0x0800884b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008834:	f7fd fb02 	bl	8005e3c <HAL_RCC_GetPCLK1Freq>
 8008838:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800883a:	e010      	b.n	800885e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800883c:	4b56      	ldr	r3, [pc, #344]	@ (8008998 <UART_SetConfig+0x2f8>)
 800883e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008840:	e00d      	b.n	800885e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008842:	f7fd fa7b 	bl	8005d3c <HAL_RCC_GetSysClockFreq>
 8008846:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008848:	e009      	b.n	800885e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800884a:	f248 0306 	movw	r3, #32774	@ 0x8006
 800884e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008850:	e005      	b.n	800885e <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8008852:	2300      	movs	r3, #0
 8008854:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008856:	2301      	movs	r3, #1
 8008858:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800885c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800885e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008860:	2b00      	cmp	r3, #0
 8008862:	f000 812b 	beq.w	8008abc <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008866:	697b      	ldr	r3, [r7, #20]
 8008868:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800886a:	4a4c      	ldr	r2, [pc, #304]	@ (800899c <UART_SetConfig+0x2fc>)
 800886c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008870:	461a      	mov	r2, r3
 8008872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008874:	fbb3 f3f2 	udiv	r3, r3, r2
 8008878:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800887a:	697b      	ldr	r3, [r7, #20]
 800887c:	685a      	ldr	r2, [r3, #4]
 800887e:	4613      	mov	r3, r2
 8008880:	005b      	lsls	r3, r3, #1
 8008882:	4413      	add	r3, r2
 8008884:	69ba      	ldr	r2, [r7, #24]
 8008886:	429a      	cmp	r2, r3
 8008888:	d305      	bcc.n	8008896 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800888a:	697b      	ldr	r3, [r7, #20]
 800888c:	685b      	ldr	r3, [r3, #4]
 800888e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008890:	69ba      	ldr	r2, [r7, #24]
 8008892:	429a      	cmp	r2, r3
 8008894:	d903      	bls.n	800889e <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8008896:	2301      	movs	r3, #1
 8008898:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800889c:	e10e      	b.n	8008abc <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800889e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088a0:	2200      	movs	r2, #0
 80088a2:	60bb      	str	r3, [r7, #8]
 80088a4:	60fa      	str	r2, [r7, #12]
 80088a6:	697b      	ldr	r3, [r7, #20]
 80088a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088aa:	4a3c      	ldr	r2, [pc, #240]	@ (800899c <UART_SetConfig+0x2fc>)
 80088ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80088b0:	b29b      	uxth	r3, r3
 80088b2:	2200      	movs	r2, #0
 80088b4:	603b      	str	r3, [r7, #0]
 80088b6:	607a      	str	r2, [r7, #4]
 80088b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80088bc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80088c0:	f7f7 ff9c 	bl	80007fc <__aeabi_uldivmod>
 80088c4:	4602      	mov	r2, r0
 80088c6:	460b      	mov	r3, r1
 80088c8:	4610      	mov	r0, r2
 80088ca:	4619      	mov	r1, r3
 80088cc:	f04f 0200 	mov.w	r2, #0
 80088d0:	f04f 0300 	mov.w	r3, #0
 80088d4:	020b      	lsls	r3, r1, #8
 80088d6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80088da:	0202      	lsls	r2, r0, #8
 80088dc:	6979      	ldr	r1, [r7, #20]
 80088de:	6849      	ldr	r1, [r1, #4]
 80088e0:	0849      	lsrs	r1, r1, #1
 80088e2:	2000      	movs	r0, #0
 80088e4:	460c      	mov	r4, r1
 80088e6:	4605      	mov	r5, r0
 80088e8:	eb12 0804 	adds.w	r8, r2, r4
 80088ec:	eb43 0905 	adc.w	r9, r3, r5
 80088f0:	697b      	ldr	r3, [r7, #20]
 80088f2:	685b      	ldr	r3, [r3, #4]
 80088f4:	2200      	movs	r2, #0
 80088f6:	469a      	mov	sl, r3
 80088f8:	4693      	mov	fp, r2
 80088fa:	4652      	mov	r2, sl
 80088fc:	465b      	mov	r3, fp
 80088fe:	4640      	mov	r0, r8
 8008900:	4649      	mov	r1, r9
 8008902:	f7f7 ff7b 	bl	80007fc <__aeabi_uldivmod>
 8008906:	4602      	mov	r2, r0
 8008908:	460b      	mov	r3, r1
 800890a:	4613      	mov	r3, r2
 800890c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800890e:	6a3b      	ldr	r3, [r7, #32]
 8008910:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008914:	d308      	bcc.n	8008928 <UART_SetConfig+0x288>
 8008916:	6a3b      	ldr	r3, [r7, #32]
 8008918:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800891c:	d204      	bcs.n	8008928 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 800891e:	697b      	ldr	r3, [r7, #20]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	6a3a      	ldr	r2, [r7, #32]
 8008924:	60da      	str	r2, [r3, #12]
 8008926:	e0c9      	b.n	8008abc <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8008928:	2301      	movs	r3, #1
 800892a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800892e:	e0c5      	b.n	8008abc <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008930:	697b      	ldr	r3, [r7, #20]
 8008932:	69db      	ldr	r3, [r3, #28]
 8008934:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008938:	d16d      	bne.n	8008a16 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 800893a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800893e:	3b01      	subs	r3, #1
 8008940:	2b07      	cmp	r3, #7
 8008942:	d82d      	bhi.n	80089a0 <UART_SetConfig+0x300>
 8008944:	a201      	add	r2, pc, #4	@ (adr r2, 800894c <UART_SetConfig+0x2ac>)
 8008946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800894a:	bf00      	nop
 800894c:	0800896d 	.word	0x0800896d
 8008950:	08008975 	.word	0x08008975
 8008954:	080089a1 	.word	0x080089a1
 8008958:	0800897b 	.word	0x0800897b
 800895c:	080089a1 	.word	0x080089a1
 8008960:	080089a1 	.word	0x080089a1
 8008964:	080089a1 	.word	0x080089a1
 8008968:	08008983 	.word	0x08008983
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800896c:	f7fd fa7c 	bl	8005e68 <HAL_RCC_GetPCLK2Freq>
 8008970:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008972:	e01b      	b.n	80089ac <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008974:	4b08      	ldr	r3, [pc, #32]	@ (8008998 <UART_SetConfig+0x2f8>)
 8008976:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008978:	e018      	b.n	80089ac <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800897a:	f7fd f9df 	bl	8005d3c <HAL_RCC_GetSysClockFreq>
 800897e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008980:	e014      	b.n	80089ac <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008982:	f248 0306 	movw	r3, #32774	@ 0x8006
 8008986:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008988:	e010      	b.n	80089ac <UART_SetConfig+0x30c>
 800898a:	bf00      	nop
 800898c:	cfff69f3 	.word	0xcfff69f3
 8008990:	40008000 	.word	0x40008000
 8008994:	40013800 	.word	0x40013800
 8008998:	00f42400 	.word	0x00f42400
 800899c:	08010d64 	.word	0x08010d64
      default:
        pclk = 0U;
 80089a0:	2300      	movs	r3, #0
 80089a2:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80089a4:	2301      	movs	r3, #1
 80089a6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80089aa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80089ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	f000 8084 	beq.w	8008abc <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80089b4:	697b      	ldr	r3, [r7, #20]
 80089b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089b8:	4a4b      	ldr	r2, [pc, #300]	@ (8008ae8 <UART_SetConfig+0x448>)
 80089ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80089be:	461a      	mov	r2, r3
 80089c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089c2:	fbb3 f3f2 	udiv	r3, r3, r2
 80089c6:	005a      	lsls	r2, r3, #1
 80089c8:	697b      	ldr	r3, [r7, #20]
 80089ca:	685b      	ldr	r3, [r3, #4]
 80089cc:	085b      	lsrs	r3, r3, #1
 80089ce:	441a      	add	r2, r3
 80089d0:	697b      	ldr	r3, [r7, #20]
 80089d2:	685b      	ldr	r3, [r3, #4]
 80089d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80089d8:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80089da:	6a3b      	ldr	r3, [r7, #32]
 80089dc:	2b0f      	cmp	r3, #15
 80089de:	d916      	bls.n	8008a0e <UART_SetConfig+0x36e>
 80089e0:	6a3b      	ldr	r3, [r7, #32]
 80089e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80089e6:	d212      	bcs.n	8008a0e <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80089e8:	6a3b      	ldr	r3, [r7, #32]
 80089ea:	b29b      	uxth	r3, r3
 80089ec:	f023 030f 	bic.w	r3, r3, #15
 80089f0:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80089f2:	6a3b      	ldr	r3, [r7, #32]
 80089f4:	085b      	lsrs	r3, r3, #1
 80089f6:	b29b      	uxth	r3, r3
 80089f8:	f003 0307 	and.w	r3, r3, #7
 80089fc:	b29a      	uxth	r2, r3
 80089fe:	8bfb      	ldrh	r3, [r7, #30]
 8008a00:	4313      	orrs	r3, r2
 8008a02:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008a04:	697b      	ldr	r3, [r7, #20]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	8bfa      	ldrh	r2, [r7, #30]
 8008a0a:	60da      	str	r2, [r3, #12]
 8008a0c:	e056      	b.n	8008abc <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8008a0e:	2301      	movs	r3, #1
 8008a10:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008a14:	e052      	b.n	8008abc <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008a16:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008a1a:	3b01      	subs	r3, #1
 8008a1c:	2b07      	cmp	r3, #7
 8008a1e:	d822      	bhi.n	8008a66 <UART_SetConfig+0x3c6>
 8008a20:	a201      	add	r2, pc, #4	@ (adr r2, 8008a28 <UART_SetConfig+0x388>)
 8008a22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a26:	bf00      	nop
 8008a28:	08008a49 	.word	0x08008a49
 8008a2c:	08008a51 	.word	0x08008a51
 8008a30:	08008a67 	.word	0x08008a67
 8008a34:	08008a57 	.word	0x08008a57
 8008a38:	08008a67 	.word	0x08008a67
 8008a3c:	08008a67 	.word	0x08008a67
 8008a40:	08008a67 	.word	0x08008a67
 8008a44:	08008a5f 	.word	0x08008a5f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008a48:	f7fd fa0e 	bl	8005e68 <HAL_RCC_GetPCLK2Freq>
 8008a4c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008a4e:	e010      	b.n	8008a72 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008a50:	4b26      	ldr	r3, [pc, #152]	@ (8008aec <UART_SetConfig+0x44c>)
 8008a52:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008a54:	e00d      	b.n	8008a72 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008a56:	f7fd f971 	bl	8005d3c <HAL_RCC_GetSysClockFreq>
 8008a5a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008a5c:	e009      	b.n	8008a72 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a5e:	f248 0306 	movw	r3, #32774	@ 0x8006
 8008a62:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008a64:	e005      	b.n	8008a72 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8008a66:	2300      	movs	r3, #0
 8008a68:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008a6a:	2301      	movs	r3, #1
 8008a6c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008a70:	bf00      	nop
    }

    if (pclk != 0U)
 8008a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d021      	beq.n	8008abc <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008a78:	697b      	ldr	r3, [r7, #20]
 8008a7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a7c:	4a1a      	ldr	r2, [pc, #104]	@ (8008ae8 <UART_SetConfig+0x448>)
 8008a7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a82:	461a      	mov	r2, r3
 8008a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a86:	fbb3 f2f2 	udiv	r2, r3, r2
 8008a8a:	697b      	ldr	r3, [r7, #20]
 8008a8c:	685b      	ldr	r3, [r3, #4]
 8008a8e:	085b      	lsrs	r3, r3, #1
 8008a90:	441a      	add	r2, r3
 8008a92:	697b      	ldr	r3, [r7, #20]
 8008a94:	685b      	ldr	r3, [r3, #4]
 8008a96:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a9a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008a9c:	6a3b      	ldr	r3, [r7, #32]
 8008a9e:	2b0f      	cmp	r3, #15
 8008aa0:	d909      	bls.n	8008ab6 <UART_SetConfig+0x416>
 8008aa2:	6a3b      	ldr	r3, [r7, #32]
 8008aa4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008aa8:	d205      	bcs.n	8008ab6 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008aaa:	6a3b      	ldr	r3, [r7, #32]
 8008aac:	b29a      	uxth	r2, r3
 8008aae:	697b      	ldr	r3, [r7, #20]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	60da      	str	r2, [r3, #12]
 8008ab4:	e002      	b.n	8008abc <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8008ab6:	2301      	movs	r3, #1
 8008ab8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008abc:	697b      	ldr	r3, [r7, #20]
 8008abe:	2201      	movs	r2, #1
 8008ac0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008ac4:	697b      	ldr	r3, [r7, #20]
 8008ac6:	2201      	movs	r2, #1
 8008ac8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008acc:	697b      	ldr	r3, [r7, #20]
 8008ace:	2200      	movs	r2, #0
 8008ad0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008ad2:	697b      	ldr	r3, [r7, #20]
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008ad8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8008adc:	4618      	mov	r0, r3
 8008ade:	3730      	adds	r7, #48	@ 0x30
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008ae6:	bf00      	nop
 8008ae8:	08010d64 	.word	0x08010d64
 8008aec:	00f42400 	.word	0x00f42400

08008af0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008af0:	b480      	push	{r7}
 8008af2:	b083      	sub	sp, #12
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008afc:	f003 0308 	and.w	r3, r3, #8
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d00a      	beq.n	8008b1a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	685b      	ldr	r3, [r3, #4]
 8008b0a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	430a      	orrs	r2, r1
 8008b18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b1e:	f003 0301 	and.w	r3, r3, #1
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d00a      	beq.n	8008b3c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	685b      	ldr	r3, [r3, #4]
 8008b2c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	430a      	orrs	r2, r1
 8008b3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b40:	f003 0302 	and.w	r3, r3, #2
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d00a      	beq.n	8008b5e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	685b      	ldr	r3, [r3, #4]
 8008b4e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	430a      	orrs	r2, r1
 8008b5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b62:	f003 0304 	and.w	r3, r3, #4
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d00a      	beq.n	8008b80 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	685b      	ldr	r3, [r3, #4]
 8008b70:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	430a      	orrs	r2, r1
 8008b7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b84:	f003 0310 	and.w	r3, r3, #16
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d00a      	beq.n	8008ba2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	689b      	ldr	r3, [r3, #8]
 8008b92:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	430a      	orrs	r2, r1
 8008ba0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ba6:	f003 0320 	and.w	r3, r3, #32
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d00a      	beq.n	8008bc4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	689b      	ldr	r3, [r3, #8]
 8008bb4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	430a      	orrs	r2, r1
 8008bc2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d01a      	beq.n	8008c06 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	685b      	ldr	r3, [r3, #4]
 8008bd6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	430a      	orrs	r2, r1
 8008be4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008bea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008bee:	d10a      	bne.n	8008c06 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	685b      	ldr	r3, [r3, #4]
 8008bf6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	430a      	orrs	r2, r1
 8008c04:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d00a      	beq.n	8008c28 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	685b      	ldr	r3, [r3, #4]
 8008c18:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	430a      	orrs	r2, r1
 8008c26:	605a      	str	r2, [r3, #4]
  }
}
 8008c28:	bf00      	nop
 8008c2a:	370c      	adds	r7, #12
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c32:	4770      	bx	lr

08008c34 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b098      	sub	sp, #96	@ 0x60
 8008c38:	af02      	add	r7, sp, #8
 8008c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2200      	movs	r2, #0
 8008c40:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008c44:	f7fa fb62 	bl	800330c <HAL_GetTick>
 8008c48:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	f003 0308 	and.w	r3, r3, #8
 8008c54:	2b08      	cmp	r3, #8
 8008c56:	d12f      	bne.n	8008cb8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008c58:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008c5c:	9300      	str	r3, [sp, #0]
 8008c5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008c60:	2200      	movs	r2, #0
 8008c62:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008c66:	6878      	ldr	r0, [r7, #4]
 8008c68:	f000 f88e 	bl	8008d88 <UART_WaitOnFlagUntilTimeout>
 8008c6c:	4603      	mov	r3, r0
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d022      	beq.n	8008cb8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c7a:	e853 3f00 	ldrex	r3, [r3]
 8008c7e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008c80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c82:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008c86:	653b      	str	r3, [r7, #80]	@ 0x50
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	461a      	mov	r2, r3
 8008c8e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008c90:	647b      	str	r3, [r7, #68]	@ 0x44
 8008c92:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c94:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008c96:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008c98:	e841 2300 	strex	r3, r2, [r1]
 8008c9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008c9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d1e6      	bne.n	8008c72 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2220      	movs	r2, #32
 8008ca8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2200      	movs	r2, #0
 8008cb0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008cb4:	2303      	movs	r3, #3
 8008cb6:	e063      	b.n	8008d80 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	f003 0304 	and.w	r3, r3, #4
 8008cc2:	2b04      	cmp	r3, #4
 8008cc4:	d149      	bne.n	8008d5a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008cc6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008cca:	9300      	str	r3, [sp, #0]
 8008ccc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008cce:	2200      	movs	r2, #0
 8008cd0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008cd4:	6878      	ldr	r0, [r7, #4]
 8008cd6:	f000 f857 	bl	8008d88 <UART_WaitOnFlagUntilTimeout>
 8008cda:	4603      	mov	r3, r0
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d03c      	beq.n	8008d5a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ce8:	e853 3f00 	ldrex	r3, [r3]
 8008cec:	623b      	str	r3, [r7, #32]
   return(result);
 8008cee:	6a3b      	ldr	r3, [r7, #32]
 8008cf0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008cf4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	461a      	mov	r2, r3
 8008cfc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008cfe:	633b      	str	r3, [r7, #48]	@ 0x30
 8008d00:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d02:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008d04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008d06:	e841 2300 	strex	r3, r2, [r1]
 8008d0a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008d0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d1e6      	bne.n	8008ce0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	3308      	adds	r3, #8
 8008d18:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d1a:	693b      	ldr	r3, [r7, #16]
 8008d1c:	e853 3f00 	ldrex	r3, [r3]
 8008d20:	60fb      	str	r3, [r7, #12]
   return(result);
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	f023 0301 	bic.w	r3, r3, #1
 8008d28:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	3308      	adds	r3, #8
 8008d30:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008d32:	61fa      	str	r2, [r7, #28]
 8008d34:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d36:	69b9      	ldr	r1, [r7, #24]
 8008d38:	69fa      	ldr	r2, [r7, #28]
 8008d3a:	e841 2300 	strex	r3, r2, [r1]
 8008d3e:	617b      	str	r3, [r7, #20]
   return(result);
 8008d40:	697b      	ldr	r3, [r7, #20]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d1e5      	bne.n	8008d12 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	2220      	movs	r2, #32
 8008d4a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	2200      	movs	r2, #0
 8008d52:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008d56:	2303      	movs	r3, #3
 8008d58:	e012      	b.n	8008d80 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	2220      	movs	r2, #32
 8008d5e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	2220      	movs	r2, #32
 8008d66:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	2200      	movs	r2, #0
 8008d74:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	2200      	movs	r2, #0
 8008d7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008d7e:	2300      	movs	r3, #0
}
 8008d80:	4618      	mov	r0, r3
 8008d82:	3758      	adds	r7, #88	@ 0x58
 8008d84:	46bd      	mov	sp, r7
 8008d86:	bd80      	pop	{r7, pc}

08008d88 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b084      	sub	sp, #16
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	60f8      	str	r0, [r7, #12]
 8008d90:	60b9      	str	r1, [r7, #8]
 8008d92:	603b      	str	r3, [r7, #0]
 8008d94:	4613      	mov	r3, r2
 8008d96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d98:	e04f      	b.n	8008e3a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008d9a:	69bb      	ldr	r3, [r7, #24]
 8008d9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008da0:	d04b      	beq.n	8008e3a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008da2:	f7fa fab3 	bl	800330c <HAL_GetTick>
 8008da6:	4602      	mov	r2, r0
 8008da8:	683b      	ldr	r3, [r7, #0]
 8008daa:	1ad3      	subs	r3, r2, r3
 8008dac:	69ba      	ldr	r2, [r7, #24]
 8008dae:	429a      	cmp	r2, r3
 8008db0:	d302      	bcc.n	8008db8 <UART_WaitOnFlagUntilTimeout+0x30>
 8008db2:	69bb      	ldr	r3, [r7, #24]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d101      	bne.n	8008dbc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008db8:	2303      	movs	r3, #3
 8008dba:	e04e      	b.n	8008e5a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	f003 0304 	and.w	r3, r3, #4
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d037      	beq.n	8008e3a <UART_WaitOnFlagUntilTimeout+0xb2>
 8008dca:	68bb      	ldr	r3, [r7, #8]
 8008dcc:	2b80      	cmp	r3, #128	@ 0x80
 8008dce:	d034      	beq.n	8008e3a <UART_WaitOnFlagUntilTimeout+0xb2>
 8008dd0:	68bb      	ldr	r3, [r7, #8]
 8008dd2:	2b40      	cmp	r3, #64	@ 0x40
 8008dd4:	d031      	beq.n	8008e3a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	69db      	ldr	r3, [r3, #28]
 8008ddc:	f003 0308 	and.w	r3, r3, #8
 8008de0:	2b08      	cmp	r3, #8
 8008de2:	d110      	bne.n	8008e06 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	2208      	movs	r2, #8
 8008dea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008dec:	68f8      	ldr	r0, [r7, #12]
 8008dee:	f000 f879 	bl	8008ee4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	2208      	movs	r2, #8
 8008df6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008e02:	2301      	movs	r3, #1
 8008e04:	e029      	b.n	8008e5a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	69db      	ldr	r3, [r3, #28]
 8008e0c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008e10:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008e14:	d111      	bne.n	8008e3a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008e1e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008e20:	68f8      	ldr	r0, [r7, #12]
 8008e22:	f000 f85f 	bl	8008ee4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	2220      	movs	r2, #32
 8008e2a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	2200      	movs	r2, #0
 8008e32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008e36:	2303      	movs	r3, #3
 8008e38:	e00f      	b.n	8008e5a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	69da      	ldr	r2, [r3, #28]
 8008e40:	68bb      	ldr	r3, [r7, #8]
 8008e42:	4013      	ands	r3, r2
 8008e44:	68ba      	ldr	r2, [r7, #8]
 8008e46:	429a      	cmp	r2, r3
 8008e48:	bf0c      	ite	eq
 8008e4a:	2301      	moveq	r3, #1
 8008e4c:	2300      	movne	r3, #0
 8008e4e:	b2db      	uxtb	r3, r3
 8008e50:	461a      	mov	r2, r3
 8008e52:	79fb      	ldrb	r3, [r7, #7]
 8008e54:	429a      	cmp	r2, r3
 8008e56:	d0a0      	beq.n	8008d9a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008e58:	2300      	movs	r3, #0
}
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	3710      	adds	r7, #16
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	bd80      	pop	{r7, pc}

08008e62 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008e62:	b480      	push	{r7}
 8008e64:	b08f      	sub	sp, #60	@ 0x3c
 8008e66:	af00      	add	r7, sp, #0
 8008e68:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e70:	6a3b      	ldr	r3, [r7, #32]
 8008e72:	e853 3f00 	ldrex	r3, [r3]
 8008e76:	61fb      	str	r3, [r7, #28]
   return(result);
 8008e78:	69fb      	ldr	r3, [r7, #28]
 8008e7a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8008e7e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	461a      	mov	r2, r3
 8008e86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e88:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008e8a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e8c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008e8e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008e90:	e841 2300 	strex	r3, r2, [r1]
 8008e94:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d1e6      	bne.n	8008e6a <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	3308      	adds	r3, #8
 8008ea2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	e853 3f00 	ldrex	r3, [r3]
 8008eaa:	60bb      	str	r3, [r7, #8]
   return(result);
 8008eac:	68bb      	ldr	r3, [r7, #8]
 8008eae:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8008eb2:	633b      	str	r3, [r7, #48]	@ 0x30
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	3308      	adds	r3, #8
 8008eba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008ebc:	61ba      	str	r2, [r7, #24]
 8008ebe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ec0:	6979      	ldr	r1, [r7, #20]
 8008ec2:	69ba      	ldr	r2, [r7, #24]
 8008ec4:	e841 2300 	strex	r3, r2, [r1]
 8008ec8:	613b      	str	r3, [r7, #16]
   return(result);
 8008eca:	693b      	ldr	r3, [r7, #16]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d1e5      	bne.n	8008e9c <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2220      	movs	r2, #32
 8008ed4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8008ed8:	bf00      	nop
 8008eda:	373c      	adds	r7, #60	@ 0x3c
 8008edc:	46bd      	mov	sp, r7
 8008ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee2:	4770      	bx	lr

08008ee4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008ee4:	b480      	push	{r7}
 8008ee6:	b095      	sub	sp, #84	@ 0x54
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ef2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ef4:	e853 3f00 	ldrex	r3, [r3]
 8008ef8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008efa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008efc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008f00:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	461a      	mov	r2, r3
 8008f08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008f0a:	643b      	str	r3, [r7, #64]	@ 0x40
 8008f0c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f0e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008f10:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008f12:	e841 2300 	strex	r3, r2, [r1]
 8008f16:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008f18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d1e6      	bne.n	8008eec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	3308      	adds	r3, #8
 8008f24:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f26:	6a3b      	ldr	r3, [r7, #32]
 8008f28:	e853 3f00 	ldrex	r3, [r3]
 8008f2c:	61fb      	str	r3, [r7, #28]
   return(result);
 8008f2e:	69fb      	ldr	r3, [r7, #28]
 8008f30:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008f34:	f023 0301 	bic.w	r3, r3, #1
 8008f38:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	3308      	adds	r3, #8
 8008f40:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008f42:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008f44:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f46:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008f48:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008f4a:	e841 2300 	strex	r3, r2, [r1]
 8008f4e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d1e3      	bne.n	8008f1e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008f5a:	2b01      	cmp	r3, #1
 8008f5c:	d118      	bne.n	8008f90 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	e853 3f00 	ldrex	r3, [r3]
 8008f6a:	60bb      	str	r3, [r7, #8]
   return(result);
 8008f6c:	68bb      	ldr	r3, [r7, #8]
 8008f6e:	f023 0310 	bic.w	r3, r3, #16
 8008f72:	647b      	str	r3, [r7, #68]	@ 0x44
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	461a      	mov	r2, r3
 8008f7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008f7c:	61bb      	str	r3, [r7, #24]
 8008f7e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f80:	6979      	ldr	r1, [r7, #20]
 8008f82:	69ba      	ldr	r2, [r7, #24]
 8008f84:	e841 2300 	strex	r3, r2, [r1]
 8008f88:	613b      	str	r3, [r7, #16]
   return(result);
 8008f8a:	693b      	ldr	r3, [r7, #16]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d1e6      	bne.n	8008f5e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2220      	movs	r2, #32
 8008f94:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008fa4:	bf00      	nop
 8008fa6:	3754      	adds	r7, #84	@ 0x54
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fae:	4770      	bx	lr

08008fb0 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b090      	sub	sp, #64	@ 0x40
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fbc:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	f003 0320 	and.w	r3, r3, #32
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d137      	bne.n	800903c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8008fcc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008fce:	2200      	movs	r2, #0
 8008fd0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008fd4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	3308      	adds	r3, #8
 8008fda:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fde:	e853 3f00 	ldrex	r3, [r3]
 8008fe2:	623b      	str	r3, [r7, #32]
   return(result);
 8008fe4:	6a3b      	ldr	r3, [r7, #32]
 8008fe6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008fea:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008fec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	3308      	adds	r3, #8
 8008ff2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008ff4:	633a      	str	r2, [r7, #48]	@ 0x30
 8008ff6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ff8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008ffa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008ffc:	e841 2300 	strex	r3, r2, [r1]
 8009000:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009002:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009004:	2b00      	cmp	r3, #0
 8009006:	d1e5      	bne.n	8008fd4 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009008:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800900e:	693b      	ldr	r3, [r7, #16]
 8009010:	e853 3f00 	ldrex	r3, [r3]
 8009014:	60fb      	str	r3, [r7, #12]
   return(result);
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800901c:	637b      	str	r3, [r7, #52]	@ 0x34
 800901e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	461a      	mov	r2, r3
 8009024:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009026:	61fb      	str	r3, [r7, #28]
 8009028:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800902a:	69b9      	ldr	r1, [r7, #24]
 800902c:	69fa      	ldr	r2, [r7, #28]
 800902e:	e841 2300 	strex	r3, r2, [r1]
 8009032:	617b      	str	r3, [r7, #20]
   return(result);
 8009034:	697b      	ldr	r3, [r7, #20]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d1e6      	bne.n	8009008 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800903a:	e002      	b.n	8009042 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800903c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800903e:	f7f9 f973 	bl	8002328 <HAL_UART_TxCpltCallback>
}
 8009042:	bf00      	nop
 8009044:	3740      	adds	r7, #64	@ 0x40
 8009046:	46bd      	mov	sp, r7
 8009048:	bd80      	pop	{r7, pc}

0800904a <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800904a:	b580      	push	{r7, lr}
 800904c:	b084      	sub	sp, #16
 800904e:	af00      	add	r7, sp, #0
 8009050:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009056:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009058:	68f8      	ldr	r0, [r7, #12]
 800905a:	f7ff fb01 	bl	8008660 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800905e:	bf00      	nop
 8009060:	3710      	adds	r7, #16
 8009062:	46bd      	mov	sp, r7
 8009064:	bd80      	pop	{r7, pc}

08009066 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009066:	b580      	push	{r7, lr}
 8009068:	b086      	sub	sp, #24
 800906a:	af00      	add	r7, sp, #0
 800906c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009072:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009074:	697b      	ldr	r3, [r7, #20]
 8009076:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800907a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800907c:	697b      	ldr	r3, [r7, #20]
 800907e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009082:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009084:	697b      	ldr	r3, [r7, #20]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	689b      	ldr	r3, [r3, #8]
 800908a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800908e:	2b80      	cmp	r3, #128	@ 0x80
 8009090:	d109      	bne.n	80090a6 <UART_DMAError+0x40>
 8009092:	693b      	ldr	r3, [r7, #16]
 8009094:	2b21      	cmp	r3, #33	@ 0x21
 8009096:	d106      	bne.n	80090a6 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009098:	697b      	ldr	r3, [r7, #20]
 800909a:	2200      	movs	r2, #0
 800909c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 80090a0:	6978      	ldr	r0, [r7, #20]
 80090a2:	f7ff fede 	bl	8008e62 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80090a6:	697b      	ldr	r3, [r7, #20]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	689b      	ldr	r3, [r3, #8]
 80090ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80090b0:	2b40      	cmp	r3, #64	@ 0x40
 80090b2:	d109      	bne.n	80090c8 <UART_DMAError+0x62>
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	2b22      	cmp	r3, #34	@ 0x22
 80090b8:	d106      	bne.n	80090c8 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80090ba:	697b      	ldr	r3, [r7, #20]
 80090bc:	2200      	movs	r2, #0
 80090be:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 80090c2:	6978      	ldr	r0, [r7, #20]
 80090c4:	f7ff ff0e 	bl	8008ee4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80090c8:	697b      	ldr	r3, [r7, #20]
 80090ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80090ce:	f043 0210 	orr.w	r2, r3, #16
 80090d2:	697b      	ldr	r3, [r7, #20]
 80090d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80090d8:	6978      	ldr	r0, [r7, #20]
 80090da:	f7ff facb 	bl	8008674 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80090de:	bf00      	nop
 80090e0:	3718      	adds	r7, #24
 80090e2:	46bd      	mov	sp, r7
 80090e4:	bd80      	pop	{r7, pc}

080090e6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80090e6:	b580      	push	{r7, lr}
 80090e8:	b084      	sub	sp, #16
 80090ea:	af00      	add	r7, sp, #0
 80090ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090f2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	2200      	movs	r2, #0
 80090f8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	2200      	movs	r2, #0
 8009100:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009104:	68f8      	ldr	r0, [r7, #12]
 8009106:	f7ff fab5 	bl	8008674 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800910a:	bf00      	nop
 800910c:	3710      	adds	r7, #16
 800910e:	46bd      	mov	sp, r7
 8009110:	bd80      	pop	{r7, pc}

08009112 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009112:	b580      	push	{r7, lr}
 8009114:	b088      	sub	sp, #32
 8009116:	af00      	add	r7, sp, #0
 8009118:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	e853 3f00 	ldrex	r3, [r3]
 8009126:	60bb      	str	r3, [r7, #8]
   return(result);
 8009128:	68bb      	ldr	r3, [r7, #8]
 800912a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800912e:	61fb      	str	r3, [r7, #28]
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	461a      	mov	r2, r3
 8009136:	69fb      	ldr	r3, [r7, #28]
 8009138:	61bb      	str	r3, [r7, #24]
 800913a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800913c:	6979      	ldr	r1, [r7, #20]
 800913e:	69ba      	ldr	r2, [r7, #24]
 8009140:	e841 2300 	strex	r3, r2, [r1]
 8009144:	613b      	str	r3, [r7, #16]
   return(result);
 8009146:	693b      	ldr	r3, [r7, #16]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d1e6      	bne.n	800911a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	2220      	movs	r2, #32
 8009150:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2200      	movs	r2, #0
 8009158:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800915a:	6878      	ldr	r0, [r7, #4]
 800915c:	f7f9 f8e4 	bl	8002328 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009160:	bf00      	nop
 8009162:	3720      	adds	r7, #32
 8009164:	46bd      	mov	sp, r7
 8009166:	bd80      	pop	{r7, pc}

08009168 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009168:	b480      	push	{r7}
 800916a:	b083      	sub	sp, #12
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009170:	bf00      	nop
 8009172:	370c      	adds	r7, #12
 8009174:	46bd      	mov	sp, r7
 8009176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917a:	4770      	bx	lr

0800917c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800917c:	b480      	push	{r7}
 800917e:	b083      	sub	sp, #12
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009184:	bf00      	nop
 8009186:	370c      	adds	r7, #12
 8009188:	46bd      	mov	sp, r7
 800918a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918e:	4770      	bx	lr

08009190 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009190:	b480      	push	{r7}
 8009192:	b083      	sub	sp, #12
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009198:	bf00      	nop
 800919a:	370c      	adds	r7, #12
 800919c:	46bd      	mov	sp, r7
 800919e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a2:	4770      	bx	lr

080091a4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80091a4:	b480      	push	{r7}
 80091a6:	b085      	sub	sp, #20
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80091b2:	2b01      	cmp	r3, #1
 80091b4:	d101      	bne.n	80091ba <HAL_UARTEx_DisableFifoMode+0x16>
 80091b6:	2302      	movs	r3, #2
 80091b8:	e027      	b.n	800920a <HAL_UARTEx_DisableFifoMode+0x66>
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	2201      	movs	r2, #1
 80091be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	2224      	movs	r2, #36	@ 0x24
 80091c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	681a      	ldr	r2, [r3, #0]
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	f022 0201 	bic.w	r2, r2, #1
 80091e0:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80091e8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	2200      	movs	r2, #0
 80091ee:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	68fa      	ldr	r2, [r7, #12]
 80091f6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2220      	movs	r2, #32
 80091fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	2200      	movs	r2, #0
 8009204:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009208:	2300      	movs	r3, #0
}
 800920a:	4618      	mov	r0, r3
 800920c:	3714      	adds	r7, #20
 800920e:	46bd      	mov	sp, r7
 8009210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009214:	4770      	bx	lr

08009216 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009216:	b580      	push	{r7, lr}
 8009218:	b084      	sub	sp, #16
 800921a:	af00      	add	r7, sp, #0
 800921c:	6078      	str	r0, [r7, #4]
 800921e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009226:	2b01      	cmp	r3, #1
 8009228:	d101      	bne.n	800922e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800922a:	2302      	movs	r3, #2
 800922c:	e02d      	b.n	800928a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	2201      	movs	r2, #1
 8009232:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	2224      	movs	r2, #36	@ 0x24
 800923a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	681a      	ldr	r2, [r3, #0]
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	f022 0201 	bic.w	r2, r2, #1
 8009254:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	689b      	ldr	r3, [r3, #8]
 800925c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	683a      	ldr	r2, [r7, #0]
 8009266:	430a      	orrs	r2, r1
 8009268:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800926a:	6878      	ldr	r0, [r7, #4]
 800926c:	f000 f850 	bl	8009310 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	68fa      	ldr	r2, [r7, #12]
 8009276:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	2220      	movs	r2, #32
 800927c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2200      	movs	r2, #0
 8009284:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009288:	2300      	movs	r3, #0
}
 800928a:	4618      	mov	r0, r3
 800928c:	3710      	adds	r7, #16
 800928e:	46bd      	mov	sp, r7
 8009290:	bd80      	pop	{r7, pc}

08009292 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009292:	b580      	push	{r7, lr}
 8009294:	b084      	sub	sp, #16
 8009296:	af00      	add	r7, sp, #0
 8009298:	6078      	str	r0, [r7, #4]
 800929a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80092a2:	2b01      	cmp	r3, #1
 80092a4:	d101      	bne.n	80092aa <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80092a6:	2302      	movs	r3, #2
 80092a8:	e02d      	b.n	8009306 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	2201      	movs	r2, #1
 80092ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	2224      	movs	r2, #36	@ 0x24
 80092b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	681a      	ldr	r2, [r3, #0]
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	f022 0201 	bic.w	r2, r2, #1
 80092d0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	689b      	ldr	r3, [r3, #8]
 80092d8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	683a      	ldr	r2, [r7, #0]
 80092e2:	430a      	orrs	r2, r1
 80092e4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80092e6:	6878      	ldr	r0, [r7, #4]
 80092e8:	f000 f812 	bl	8009310 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	68fa      	ldr	r2, [r7, #12]
 80092f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	2220      	movs	r2, #32
 80092f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	2200      	movs	r2, #0
 8009300:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009304:	2300      	movs	r3, #0
}
 8009306:	4618      	mov	r0, r3
 8009308:	3710      	adds	r7, #16
 800930a:	46bd      	mov	sp, r7
 800930c:	bd80      	pop	{r7, pc}
	...

08009310 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009310:	b480      	push	{r7}
 8009312:	b085      	sub	sp, #20
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800931c:	2b00      	cmp	r3, #0
 800931e:	d108      	bne.n	8009332 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2201      	movs	r2, #1
 8009324:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	2201      	movs	r2, #1
 800932c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009330:	e031      	b.n	8009396 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009332:	2308      	movs	r3, #8
 8009334:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009336:	2308      	movs	r3, #8
 8009338:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	689b      	ldr	r3, [r3, #8]
 8009340:	0e5b      	lsrs	r3, r3, #25
 8009342:	b2db      	uxtb	r3, r3
 8009344:	f003 0307 	and.w	r3, r3, #7
 8009348:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	689b      	ldr	r3, [r3, #8]
 8009350:	0f5b      	lsrs	r3, r3, #29
 8009352:	b2db      	uxtb	r3, r3
 8009354:	f003 0307 	and.w	r3, r3, #7
 8009358:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800935a:	7bbb      	ldrb	r3, [r7, #14]
 800935c:	7b3a      	ldrb	r2, [r7, #12]
 800935e:	4911      	ldr	r1, [pc, #68]	@ (80093a4 <UARTEx_SetNbDataToProcess+0x94>)
 8009360:	5c8a      	ldrb	r2, [r1, r2]
 8009362:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009366:	7b3a      	ldrb	r2, [r7, #12]
 8009368:	490f      	ldr	r1, [pc, #60]	@ (80093a8 <UARTEx_SetNbDataToProcess+0x98>)
 800936a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800936c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009370:	b29a      	uxth	r2, r3
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009378:	7bfb      	ldrb	r3, [r7, #15]
 800937a:	7b7a      	ldrb	r2, [r7, #13]
 800937c:	4909      	ldr	r1, [pc, #36]	@ (80093a4 <UARTEx_SetNbDataToProcess+0x94>)
 800937e:	5c8a      	ldrb	r2, [r1, r2]
 8009380:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009384:	7b7a      	ldrb	r2, [r7, #13]
 8009386:	4908      	ldr	r1, [pc, #32]	@ (80093a8 <UARTEx_SetNbDataToProcess+0x98>)
 8009388:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800938a:	fb93 f3f2 	sdiv	r3, r3, r2
 800938e:	b29a      	uxth	r2, r3
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009396:	bf00      	nop
 8009398:	3714      	adds	r7, #20
 800939a:	46bd      	mov	sp, r7
 800939c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a0:	4770      	bx	lr
 80093a2:	bf00      	nop
 80093a4:	08010d7c 	.word	0x08010d7c
 80093a8:	08010d84 	.word	0x08010d84

080093ac <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b088      	sub	sp, #32
 80093b0:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80093b2:	2300      	movs	r3, #0
 80093b4:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80093b6:	f107 0308 	add.w	r3, r7, #8
 80093ba:	2218      	movs	r2, #24
 80093bc:	2100      	movs	r1, #0
 80093be:	4618      	mov	r0, r3
 80093c0:	f001 fa9e 	bl	800a900 <Osal_MemSet>
  rq.ogf = 0x3f;
 80093c4:	233f      	movs	r3, #63	@ 0x3f
 80093c6:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 80093c8:	2381      	movs	r3, #129	@ 0x81
 80093ca:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80093cc:	1dfb      	adds	r3, r7, #7
 80093ce:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80093d0:	2301      	movs	r3, #1
 80093d2:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80093d4:	f107 0308 	add.w	r3, r7, #8
 80093d8:	2100      	movs	r1, #0
 80093da:	4618      	mov	r0, r3
 80093dc:	f001 fd1a 	bl	800ae14 <hci_send_req>
 80093e0:	4603      	mov	r3, r0
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	da01      	bge.n	80093ea <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 80093e6:	23ff      	movs	r3, #255	@ 0xff
 80093e8:	e000      	b.n	80093ec <aci_gap_set_non_discoverable+0x40>
  return status;
 80093ea:	79fb      	ldrb	r3, [r7, #7]
}
 80093ec:	4618      	mov	r0, r3
 80093ee:	3720      	adds	r7, #32
 80093f0:	46bd      	mov	sp, r7
 80093f2:	bd80      	pop	{r7, pc}

080093f4 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 80093f4:	b5b0      	push	{r4, r5, r7, lr}
 80093f6:	b0ce      	sub	sp, #312	@ 0x138
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	4605      	mov	r5, r0
 80093fc:	460c      	mov	r4, r1
 80093fe:	4610      	mov	r0, r2
 8009400:	4619      	mov	r1, r3
 8009402:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009406:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800940a:	462a      	mov	r2, r5
 800940c:	701a      	strb	r2, [r3, #0]
 800940e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009412:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8009416:	4622      	mov	r2, r4
 8009418:	801a      	strh	r2, [r3, #0]
 800941a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800941e:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 8009422:	4602      	mov	r2, r0
 8009424:	801a      	strh	r2, [r3, #0]
 8009426:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800942a:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800942e:	460a      	mov	r2, r1
 8009430:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 8009432:	f107 0310 	add.w	r3, r7, #16
 8009436:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 800943a:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 800943e:	3308      	adds	r3, #8
 8009440:	f107 0210 	add.w	r2, r7, #16
 8009444:	4413      	add	r3, r2
 8009446:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 800944a:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 800944e:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 8009452:	4413      	add	r3, r2
 8009454:	3309      	adds	r3, #9
 8009456:	f107 0210 	add.w	r2, r7, #16
 800945a:	4413      	add	r3, r2
 800945c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8009460:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009464:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8009468:	2200      	movs	r2, #0
 800946a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800946c:	2300      	movs	r3, #0
 800946e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Type = Advertising_Type;
 8009472:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8009476:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800947a:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 800947e:	7812      	ldrb	r2, [r2, #0]
 8009480:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009482:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009486:	3301      	adds	r3, #1
 8009488:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 800948c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8009490:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8009494:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 8009498:	8812      	ldrh	r2, [r2, #0]
 800949a:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 800949e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80094a2:	3302      	adds	r3, #2
 80094a4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 80094a8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80094ac:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80094b0:	f5a2 729b 	sub.w	r2, r2, #310	@ 0x136
 80094b4:	8812      	ldrh	r2, [r2, #0]
 80094b6:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 80094ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80094be:	3302      	adds	r3, #2
 80094c0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 80094c4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80094c8:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80094cc:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 80094d0:	7812      	ldrb	r2, [r2, #0]
 80094d2:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80094d4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80094d8:	3301      	adds	r3, #1
 80094da:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 80094de:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80094e2:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 80094e6:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 80094e8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80094ec:	3301      	adds	r3, #1
 80094ee:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 80094f2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80094f6:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 80094fa:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 80094fc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009500:	3301      	adds	r3, #1
 8009502:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 8009506:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800950a:	3308      	adds	r3, #8
 800950c:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8009510:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 8009514:	4618      	mov	r0, r3
 8009516:	f001 f9e3 	bl	800a8e0 <Osal_MemCpy>
    index_input += Local_Name_Length;
 800951a:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 800951e:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8009522:	4413      	add	r3, r2
 8009524:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 8009528:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800952c:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8009530:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8009532:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009536:	3301      	adds	r3, #1
 8009538:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 800953c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8009540:	3301      	adds	r3, #1
 8009542:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8009546:	f8d7 1158 	ldr.w	r1, [r7, #344]	@ 0x158
 800954a:	4618      	mov	r0, r3
 800954c:	f001 f9c8 	bl	800a8e0 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8009550:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 8009554:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8009558:	4413      	add	r3, r2
 800955a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 800955e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009562:	f8b7 215c 	ldrh.w	r2, [r7, #348]	@ 0x15c
 8009566:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8009568:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800956c:	3302      	adds	r3, #2
 800956e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 8009572:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009576:	f8b7 2160 	ldrh.w	r2, [r7, #352]	@ 0x160
 800957a:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 800957c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009580:	3302      	adds	r3, #2
 8009582:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009586:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800958a:	2218      	movs	r2, #24
 800958c:	2100      	movs	r1, #0
 800958e:	4618      	mov	r0, r3
 8009590:	f001 f9b6 	bl	800a900 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009594:	233f      	movs	r3, #63	@ 0x3f
 8009596:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x083;
 800959a:	2383      	movs	r3, #131	@ 0x83
 800959c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80095a0:	f107 0310 	add.w	r3, r7, #16
 80095a4:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80095a8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80095ac:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80095b0:	f107 030f 	add.w	r3, r7, #15
 80095b4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80095b8:	2301      	movs	r3, #1
 80095ba:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80095be:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80095c2:	2100      	movs	r1, #0
 80095c4:	4618      	mov	r0, r3
 80095c6:	f001 fc25 	bl	800ae14 <hci_send_req>
 80095ca:	4603      	mov	r3, r0
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	da01      	bge.n	80095d4 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 80095d0:	23ff      	movs	r3, #255	@ 0xff
 80095d2:	e004      	b.n	80095de <aci_gap_set_discoverable+0x1ea>
  return status;
 80095d4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80095d8:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80095dc:	781b      	ldrb	r3, [r3, #0]
}
 80095de:	4618      	mov	r0, r3
 80095e0:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 80095e4:	46bd      	mov	sp, r7
 80095e6:	bdb0      	pop	{r4, r5, r7, pc}

080095e8 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b0cc      	sub	sp, #304	@ 0x130
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	4602      	mov	r2, r0
 80095f0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80095f4:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80095f8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 80095fa:	f107 0310 	add.w	r3, r7, #16
 80095fe:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8009602:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009606:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800960a:	2200      	movs	r2, #0
 800960c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800960e:	2300      	movs	r3, #0
 8009610:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->IO_Capability = IO_Capability;
 8009614:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009618:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800961c:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8009620:	7812      	ldrb	r2, [r2, #0]
 8009622:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009624:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009628:	3301      	adds	r3, #1
 800962a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800962e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009632:	2218      	movs	r2, #24
 8009634:	2100      	movs	r1, #0
 8009636:	4618      	mov	r0, r3
 8009638:	f001 f962 	bl	800a900 <Osal_MemSet>
  rq.ogf = 0x3f;
 800963c:	233f      	movs	r3, #63	@ 0x3f
 800963e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x085;
 8009642:	2385      	movs	r3, #133	@ 0x85
 8009644:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8009648:	f107 0310 	add.w	r3, r7, #16
 800964c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8009650:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009654:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8009658:	f107 030f 	add.w	r3, r7, #15
 800965c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8009660:	2301      	movs	r3, #1
 8009662:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009666:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800966a:	2100      	movs	r1, #0
 800966c:	4618      	mov	r0, r3
 800966e:	f001 fbd1 	bl	800ae14 <hci_send_req>
 8009672:	4603      	mov	r3, r0
 8009674:	2b00      	cmp	r3, #0
 8009676:	da01      	bge.n	800967c <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 8009678:	23ff      	movs	r3, #255	@ 0xff
 800967a:	e004      	b.n	8009686 <aci_gap_set_io_capability+0x9e>
  return status;
 800967c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009680:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009684:	781b      	ldrb	r3, [r3, #0]
}
 8009686:	4618      	mov	r0, r3
 8009688:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800968c:	46bd      	mov	sp, r7
 800968e:	bd80      	pop	{r7, pc}

08009690 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 8009690:	b5b0      	push	{r4, r5, r7, lr}
 8009692:	b0cc      	sub	sp, #304	@ 0x130
 8009694:	af00      	add	r7, sp, #0
 8009696:	4605      	mov	r5, r0
 8009698:	460c      	mov	r4, r1
 800969a:	4610      	mov	r0, r2
 800969c:	4619      	mov	r1, r3
 800969e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80096a2:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80096a6:	462a      	mov	r2, r5
 80096a8:	701a      	strb	r2, [r3, #0]
 80096aa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80096ae:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80096b2:	4622      	mov	r2, r4
 80096b4:	701a      	strb	r2, [r3, #0]
 80096b6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80096ba:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 80096be:	4602      	mov	r2, r0
 80096c0:	701a      	strb	r2, [r3, #0]
 80096c2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80096c6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80096ca:	460a      	mov	r2, r1
 80096cc:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 80096ce:	f107 0310 	add.w	r3, r7, #16
 80096d2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80096d6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80096da:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80096de:	2200      	movs	r2, #0
 80096e0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80096e2:	2300      	movs	r3, #0
 80096e4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 80096e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80096ec:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80096f0:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 80096f4:	7812      	ldrb	r2, [r2, #0]
 80096f6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80096f8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80096fc:	3301      	adds	r3, #1
 80096fe:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->MITM_Mode = MITM_Mode;
 8009702:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009706:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800970a:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800970e:	7812      	ldrb	r2, [r2, #0]
 8009710:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8009712:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009716:	3301      	adds	r3, #1
 8009718:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->SC_Support = SC_Support;
 800971c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009720:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009724:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8009728:	7812      	ldrb	r2, [r2, #0]
 800972a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800972c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009730:	3301      	adds	r3, #1
 8009732:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 8009736:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800973a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800973e:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 8009742:	7812      	ldrb	r2, [r2, #0]
 8009744:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 8009746:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800974a:	3301      	adds	r3, #1
 800974c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 8009750:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009754:	f897 2140 	ldrb.w	r2, [r7, #320]	@ 0x140
 8009758:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800975a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800975e:	3301      	adds	r3, #1
 8009760:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 8009764:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009768:	f897 2144 	ldrb.w	r2, [r7, #324]	@ 0x144
 800976c:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800976e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009772:	3301      	adds	r3, #1
 8009774:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 8009778:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800977c:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 8009780:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8009782:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009786:	3301      	adds	r3, #1
 8009788:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 800978c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009790:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8009794:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8009798:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800979c:	3304      	adds	r3, #4
 800979e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 80097a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80097a6:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 80097aa:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 80097ac:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80097b0:	3301      	adds	r3, #1
 80097b2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80097b6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80097ba:	2218      	movs	r2, #24
 80097bc:	2100      	movs	r1, #0
 80097be:	4618      	mov	r0, r3
 80097c0:	f001 f89e 	bl	800a900 <Osal_MemSet>
  rq.ogf = 0x3f;
 80097c4:	233f      	movs	r3, #63	@ 0x3f
 80097c6:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x086;
 80097ca:	2386      	movs	r3, #134	@ 0x86
 80097cc:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80097d0:	f107 0310 	add.w	r3, r7, #16
 80097d4:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80097d8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80097dc:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80097e0:	f107 030f 	add.w	r3, r7, #15
 80097e4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80097e8:	2301      	movs	r3, #1
 80097ea:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80097ee:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80097f2:	2100      	movs	r1, #0
 80097f4:	4618      	mov	r0, r3
 80097f6:	f001 fb0d 	bl	800ae14 <hci_send_req>
 80097fa:	4603      	mov	r3, r0
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	da01      	bge.n	8009804 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 8009800:	23ff      	movs	r3, #255	@ 0xff
 8009802:	e004      	b.n	800980e <aci_gap_set_authentication_requirement+0x17e>
  return status;
 8009804:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009808:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800980c:	781b      	ldrb	r3, [r3, #0]
}
 800980e:	4618      	mov	r0, r3
 8009810:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8009814:	46bd      	mov	sp, r7
 8009816:	bdb0      	pop	{r4, r5, r7, pc}

08009818 <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 8009818:	b580      	push	{r7, lr}
 800981a:	b0cc      	sub	sp, #304	@ 0x130
 800981c:	af00      	add	r7, sp, #0
 800981e:	4602      	mov	r2, r0
 8009820:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009824:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8009828:	6019      	str	r1, [r3, #0]
 800982a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800982e:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8009832:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 8009834:	f107 0310 	add.w	r3, r7, #16
 8009838:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800983c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009840:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009844:	2200      	movs	r2, #0
 8009846:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009848:	2300      	movs	r3, #0
 800984a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 800984e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009852:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009856:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800985a:	8812      	ldrh	r2, [r2, #0]
 800985c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800985e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009862:	3302      	adds	r3, #2
 8009864:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Pass_Key = Pass_Key;
 8009868:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800986c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009870:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 8009874:	6812      	ldr	r2, [r2, #0]
 8009876:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 800987a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800987e:	3304      	adds	r3, #4
 8009880:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009884:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009888:	2218      	movs	r2, #24
 800988a:	2100      	movs	r1, #0
 800988c:	4618      	mov	r0, r3
 800988e:	f001 f837 	bl	800a900 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009892:	233f      	movs	r3, #63	@ 0x3f
 8009894:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x088;
 8009898:	2388      	movs	r3, #136	@ 0x88
 800989a:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800989e:	f107 0310 	add.w	r3, r7, #16
 80098a2:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80098a6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80098aa:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80098ae:	f107 030f 	add.w	r3, r7, #15
 80098b2:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80098b6:	2301      	movs	r3, #1
 80098b8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80098bc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80098c0:	2100      	movs	r1, #0
 80098c2:	4618      	mov	r0, r3
 80098c4:	f001 faa6 	bl	800ae14 <hci_send_req>
 80098c8:	4603      	mov	r3, r0
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	da01      	bge.n	80098d2 <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 80098ce:	23ff      	movs	r3, #255	@ 0xff
 80098d0:	e004      	b.n	80098dc <aci_gap_pass_key_resp+0xc4>
  return status;
 80098d2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80098d6:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80098da:	781b      	ldrb	r3, [r3, #0]
}
 80098dc:	4618      	mov	r0, r3
 80098de:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80098e2:	46bd      	mov	sp, r7
 80098e4:	bd80      	pop	{r7, pc}

080098e6 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 80098e6:	b590      	push	{r4, r7, lr}
 80098e8:	b0cd      	sub	sp, #308	@ 0x134
 80098ea:	af00      	add	r7, sp, #0
 80098ec:	4604      	mov	r4, r0
 80098ee:	4608      	mov	r0, r1
 80098f0:	4611      	mov	r1, r2
 80098f2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80098f6:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 80098fa:	6013      	str	r3, [r2, #0]
 80098fc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009900:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8009904:	4622      	mov	r2, r4
 8009906:	701a      	strb	r2, [r3, #0]
 8009908:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800990c:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8009910:	4602      	mov	r2, r0
 8009912:	701a      	strb	r2, [r3, #0]
 8009914:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009918:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800991c:	460a      	mov	r2, r1
 800991e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8009920:	f107 0310 	add.w	r3, r7, #16
 8009924:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8009928:	f107 0308 	add.w	r3, r7, #8
 800992c:	2207      	movs	r2, #7
 800992e:	2100      	movs	r1, #0
 8009930:	4618      	mov	r0, r3
 8009932:	f000 ffe5 	bl	800a900 <Osal_MemSet>
  int index_input = 0;
 8009936:	2300      	movs	r3, #0
 8009938:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Role = Role;
 800993c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009940:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009944:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8009948:	7812      	ldrb	r2, [r2, #0]
 800994a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800994c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009950:	3301      	adds	r3, #1
 8009952:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->privacy_enabled = privacy_enabled;
 8009956:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800995a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800995e:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8009962:	7812      	ldrb	r2, [r2, #0]
 8009964:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8009966:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800996a:	3301      	adds	r3, #1
 800996c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->device_name_char_len = device_name_char_len;
 8009970:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009974:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009978:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800997c:	7812      	ldrb	r2, [r2, #0]
 800997e:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8009980:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009984:	3301      	adds	r3, #1
 8009986:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800998a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800998e:	2218      	movs	r2, #24
 8009990:	2100      	movs	r1, #0
 8009992:	4618      	mov	r0, r3
 8009994:	f000 ffb4 	bl	800a900 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009998:	233f      	movs	r3, #63	@ 0x3f
 800999a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08a;
 800999e:	238a      	movs	r3, #138	@ 0x8a
 80099a0:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80099a4:	f107 0310 	add.w	r3, r7, #16
 80099a8:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80099ac:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80099b0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 80099b4:	f107 0308 	add.w	r3, r7, #8
 80099b8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 80099bc:	2307      	movs	r3, #7
 80099be:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80099c2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80099c6:	2100      	movs	r1, #0
 80099c8:	4618      	mov	r0, r3
 80099ca:	f001 fa23 	bl	800ae14 <hci_send_req>
 80099ce:	4603      	mov	r3, r0
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	da01      	bge.n	80099d8 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 80099d4:	23ff      	movs	r3, #255	@ 0xff
 80099d6:	e02e      	b.n	8009a36 <aci_gap_init+0x150>
  if ( resp.Status )
 80099d8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80099dc:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80099e0:	781b      	ldrb	r3, [r3, #0]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d005      	beq.n	80099f2 <aci_gap_init+0x10c>
    return resp.Status;
 80099e6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80099ea:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80099ee:	781b      	ldrb	r3, [r3, #0]
 80099f0:	e021      	b.n	8009a36 <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 80099f2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80099f6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80099fa:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80099fe:	b29a      	uxth	r2, r3
 8009a00:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009a04:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 8009a0c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009a10:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8009a14:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8009a18:	b29a      	uxth	r2, r3
 8009a1a:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8009a1e:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8009a20:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009a24:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8009a28:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8009a2c:	b29a      	uxth	r2, r3
 8009a2e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8009a32:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8009a34:	2300      	movs	r3, #0
}
 8009a36:	4618      	mov	r0, r3
 8009a38:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	bd90      	pop	{r4, r7, pc}

08009a40 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b0cc      	sub	sp, #304	@ 0x130
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	4602      	mov	r2, r0
 8009a48:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009a4c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8009a50:	6019      	str	r1, [r3, #0]
 8009a52:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009a56:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8009a5a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 8009a5c:	f107 0310 	add.w	r3, r7, #16
 8009a60:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8009a64:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009a68:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009a70:	2300      	movs	r3, #0
 8009a72:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->AdvDataLen = AdvDataLen;
 8009a76:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009a7a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009a7e:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8009a82:	7812      	ldrb	r2, [r2, #0]
 8009a84:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009a86:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009a8a:	3301      	adds	r3, #1
 8009a8c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 8009a90:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009a94:	1c58      	adds	r0, r3, #1
 8009a96:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009a9a:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8009a9e:	781a      	ldrb	r2, [r3, #0]
 8009aa0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009aa4:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8009aa8:	6819      	ldr	r1, [r3, #0]
 8009aaa:	f000 ff19 	bl	800a8e0 <Osal_MemCpy>
  index_input += AdvDataLen;
 8009aae:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009ab2:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8009ab6:	781b      	ldrb	r3, [r3, #0]
 8009ab8:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8009abc:	4413      	add	r3, r2
 8009abe:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009ac2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009ac6:	2218      	movs	r2, #24
 8009ac8:	2100      	movs	r1, #0
 8009aca:	4618      	mov	r0, r3
 8009acc:	f000 ff18 	bl	800a900 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009ad0:	233f      	movs	r3, #63	@ 0x3f
 8009ad2:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08e;
 8009ad6:	238e      	movs	r3, #142	@ 0x8e
 8009ad8:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8009adc:	f107 0310 	add.w	r3, r7, #16
 8009ae0:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8009ae4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009ae8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8009aec:	f107 030f 	add.w	r3, r7, #15
 8009af0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8009af4:	2301      	movs	r3, #1
 8009af6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009afa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009afe:	2100      	movs	r1, #0
 8009b00:	4618      	mov	r0, r3
 8009b02:	f001 f987 	bl	800ae14 <hci_send_req>
 8009b06:	4603      	mov	r3, r0
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	da01      	bge.n	8009b10 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 8009b0c:	23ff      	movs	r3, #255	@ 0xff
 8009b0e:	e004      	b.n	8009b1a <aci_gap_update_adv_data+0xda>
  return status;
 8009b10:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009b14:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009b18:	781b      	ldrb	r3, [r3, #0]
}
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8009b20:	46bd      	mov	sp, r7
 8009b22:	bd80      	pop	{r7, pc}

08009b24 <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 8009b24:	b580      	push	{r7, lr}
 8009b26:	b088      	sub	sp, #32
 8009b28:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009b2e:	f107 0308 	add.w	r3, r7, #8
 8009b32:	2218      	movs	r2, #24
 8009b34:	2100      	movs	r1, #0
 8009b36:	4618      	mov	r0, r3
 8009b38:	f000 fee2 	bl	800a900 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009b3c:	233f      	movs	r3, #63	@ 0x3f
 8009b3e:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 8009b40:	2392      	movs	r3, #146	@ 0x92
 8009b42:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8009b44:	1dfb      	adds	r3, r7, #7
 8009b46:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8009b48:	2301      	movs	r3, #1
 8009b4a:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009b4c:	f107 0308 	add.w	r3, r7, #8
 8009b50:	2100      	movs	r1, #0
 8009b52:	4618      	mov	r0, r3
 8009b54:	f001 f95e 	bl	800ae14 <hci_send_req>
 8009b58:	4603      	mov	r3, r0
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	da01      	bge.n	8009b62 <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 8009b5e:	23ff      	movs	r3, #255	@ 0xff
 8009b60:	e000      	b.n	8009b64 <aci_gap_configure_filter_accept_list+0x40>
  return status;
 8009b62:	79fb      	ldrb	r3, [r7, #7]
}
 8009b64:	4618      	mov	r0, r3
 8009b66:	3720      	adds	r7, #32
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	bd80      	pop	{r7, pc}

08009b6c <aci_gap_allow_rebond>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_allow_rebond( uint16_t Connection_Handle )
{
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b0cc      	sub	sp, #304	@ 0x130
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	4602      	mov	r2, r0
 8009b74:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009b78:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8009b7c:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_allow_rebond_cp0 *cp0 = (aci_gap_allow_rebond_cp0*)(cmd_buffer);
 8009b7e:	f107 0310 	add.w	r3, r7, #16
 8009b82:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8009b86:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009b8a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009b8e:	2200      	movs	r2, #0
 8009b90:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009b92:	2300      	movs	r3, #0
 8009b94:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8009b98:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009b9c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009ba0:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8009ba4:	8812      	ldrh	r2, [r2, #0]
 8009ba6:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009ba8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009bac:	3302      	adds	r3, #2
 8009bae:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009bb2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009bb6:	2218      	movs	r2, #24
 8009bb8:	2100      	movs	r1, #0
 8009bba:	4618      	mov	r0, r3
 8009bbc:	f000 fea0 	bl	800a900 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009bc0:	233f      	movs	r3, #63	@ 0x3f
 8009bc2:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x095;
 8009bc6:	2395      	movs	r3, #149	@ 0x95
 8009bc8:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8009bcc:	f107 0310 	add.w	r3, r7, #16
 8009bd0:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8009bd4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009bd8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8009bdc:	f107 030f 	add.w	r3, r7, #15
 8009be0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8009be4:	2301      	movs	r3, #1
 8009be6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009bea:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009bee:	2100      	movs	r1, #0
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	f001 f90f 	bl	800ae14 <hci_send_req>
 8009bf6:	4603      	mov	r3, r0
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	da01      	bge.n	8009c00 <aci_gap_allow_rebond+0x94>
    return BLE_STATUS_TIMEOUT;
 8009bfc:	23ff      	movs	r3, #255	@ 0xff
 8009bfe:	e004      	b.n	8009c0a <aci_gap_allow_rebond+0x9e>
  return status;
 8009c00:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009c04:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009c08:	781b      	ldrb	r3, [r3, #0]
}
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8009c10:	46bd      	mov	sp, r7
 8009c12:	bd80      	pop	{r7, pc}

08009c14 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 8009c14:	b580      	push	{r7, lr}
 8009c16:	b0cc      	sub	sp, #304	@ 0x130
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	4602      	mov	r2, r0
 8009c1c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009c20:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8009c24:	801a      	strh	r2, [r3, #0]
 8009c26:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009c2a:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8009c2e:	460a      	mov	r2, r1
 8009c30:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 8009c32:	f107 0310 	add.w	r3, r7, #16
 8009c36:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8009c3a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009c3e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009c42:	2200      	movs	r2, #0
 8009c44:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009c46:	2300      	movs	r3, #0
 8009c48:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8009c4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009c50:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009c54:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8009c58:	8812      	ldrh	r2, [r2, #0]
 8009c5a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009c5c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009c60:	3302      	adds	r3, #2
 8009c62:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 8009c66:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009c6a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009c6e:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8009c72:	7812      	ldrb	r2, [r2, #0]
 8009c74:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8009c76:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009c7a:	3301      	adds	r3, #1
 8009c7c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009c80:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009c84:	2218      	movs	r2, #24
 8009c86:	2100      	movs	r1, #0
 8009c88:	4618      	mov	r0, r3
 8009c8a:	f000 fe39 	bl	800a900 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009c8e:	233f      	movs	r3, #63	@ 0x3f
 8009c90:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x0a5;
 8009c94:	23a5      	movs	r3, #165	@ 0xa5
 8009c96:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8009c9a:	f107 0310 	add.w	r3, r7, #16
 8009c9e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8009ca2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009ca6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8009caa:	f107 030f 	add.w	r3, r7, #15
 8009cae:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8009cb2:	2301      	movs	r3, #1
 8009cb4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009cb8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009cbc:	2100      	movs	r1, #0
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	f001 f8a8 	bl	800ae14 <hci_send_req>
 8009cc4:	4603      	mov	r3, r0
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	da01      	bge.n	8009cce <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 8009cca:	23ff      	movs	r3, #255	@ 0xff
 8009ccc:	e004      	b.n	8009cd8 <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 8009cce:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009cd2:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009cd6:	781b      	ldrb	r3, [r3, #0]
}
 8009cd8:	4618      	mov	r0, r3
 8009cda:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	bd80      	pop	{r7, pc}

08009ce2 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 8009ce2:	b580      	push	{r7, lr}
 8009ce4:	b088      	sub	sp, #32
 8009ce6:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8009ce8:	2300      	movs	r3, #0
 8009cea:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009cec:	f107 0308 	add.w	r3, r7, #8
 8009cf0:	2218      	movs	r2, #24
 8009cf2:	2100      	movs	r1, #0
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	f000 fe03 	bl	800a900 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009cfa:	233f      	movs	r3, #63	@ 0x3f
 8009cfc:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8009cfe:	f240 1301 	movw	r3, #257	@ 0x101
 8009d02:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8009d04:	1dfb      	adds	r3, r7, #7
 8009d06:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8009d08:	2301      	movs	r3, #1
 8009d0a:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009d0c:	f107 0308 	add.w	r3, r7, #8
 8009d10:	2100      	movs	r1, #0
 8009d12:	4618      	mov	r0, r3
 8009d14:	f001 f87e 	bl	800ae14 <hci_send_req>
 8009d18:	4603      	mov	r3, r0
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	da01      	bge.n	8009d22 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8009d1e:	23ff      	movs	r3, #255	@ 0xff
 8009d20:	e000      	b.n	8009d24 <aci_gatt_init+0x42>
  return status;
 8009d22:	79fb      	ldrb	r3, [r7, #7]
}
 8009d24:	4618      	mov	r0, r3
 8009d26:	3720      	adds	r7, #32
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	bd80      	pop	{r7, pc}

08009d2c <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 8009d2c:	b590      	push	{r4, r7, lr}
 8009d2e:	b0cf      	sub	sp, #316	@ 0x13c
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	4604      	mov	r4, r0
 8009d34:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 8009d38:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 8009d3c:	6001      	str	r1, [r0, #0]
 8009d3e:	4610      	mov	r0, r2
 8009d40:	4619      	mov	r1, r3
 8009d42:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009d46:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8009d4a:	4622      	mov	r2, r4
 8009d4c:	701a      	strb	r2, [r3, #0]
 8009d4e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009d52:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8009d56:	4602      	mov	r2, r0
 8009d58:	701a      	strb	r2, [r3, #0]
 8009d5a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009d5e:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8009d62:	460a      	mov	r2, r1
 8009d64:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 8009d66:	f107 0310 	add.w	r3, r7, #16
 8009d6a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8009d6e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009d72:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8009d76:	781b      	ldrb	r3, [r3, #0]
 8009d78:	2b01      	cmp	r3, #1
 8009d7a:	d00a      	beq.n	8009d92 <aci_gatt_add_service+0x66>
 8009d7c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009d80:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8009d84:	781b      	ldrb	r3, [r3, #0]
 8009d86:	2b02      	cmp	r3, #2
 8009d88:	d101      	bne.n	8009d8e <aci_gatt_add_service+0x62>
 8009d8a:	2311      	movs	r3, #17
 8009d8c:	e002      	b.n	8009d94 <aci_gatt_add_service+0x68>
 8009d8e:	2301      	movs	r3, #1
 8009d90:	e000      	b.n	8009d94 <aci_gatt_add_service+0x68>
 8009d92:	2303      	movs	r3, #3
 8009d94:	f107 0210 	add.w	r2, r7, #16
 8009d98:	4413      	add	r3, r2
 8009d9a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8009d9e:	f107 030c 	add.w	r3, r7, #12
 8009da2:	2203      	movs	r2, #3
 8009da4:	2100      	movs	r1, #0
 8009da6:	4618      	mov	r0, r3
 8009da8:	f000 fdaa 	bl	800a900 <Osal_MemSet>
  int index_input = 0;
 8009dac:	2300      	movs	r3, #0
 8009dae:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 8009db2:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8009db6:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8009dba:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 8009dbe:	7812      	ldrb	r2, [r2, #0]
 8009dc0:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009dc2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009dc6:	3301      	adds	r3, #1
 8009dc8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 8009dcc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009dd0:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8009dd4:	781b      	ldrb	r3, [r3, #0]
 8009dd6:	2b01      	cmp	r3, #1
 8009dd8:	d002      	beq.n	8009de0 <aci_gatt_add_service+0xb4>
 8009dda:	2b02      	cmp	r3, #2
 8009ddc:	d004      	beq.n	8009de8 <aci_gatt_add_service+0xbc>
 8009dde:	e007      	b.n	8009df0 <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 8009de0:	2302      	movs	r3, #2
 8009de2:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 8009de6:	e005      	b.n	8009df4 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 8009de8:	2310      	movs	r3, #16
 8009dea:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 8009dee:	e001      	b.n	8009df4 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 8009df0:	2397      	movs	r3, #151	@ 0x97
 8009df2:	e06c      	b.n	8009ece <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 8009df4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8009df8:	1c58      	adds	r0, r3, #1
 8009dfa:	f897 2137 	ldrb.w	r2, [r7, #311]	@ 0x137
 8009dfe:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009e02:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8009e06:	6819      	ldr	r1, [r3, #0]
 8009e08:	f000 fd6a 	bl	800a8e0 <Osal_MemCpy>
    index_input += size;
 8009e0c:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 8009e10:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8009e14:	4413      	add	r3, r2
 8009e16:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Type = Service_Type;
 8009e1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009e1e:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8009e22:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8009e26:	7812      	ldrb	r2, [r2, #0]
 8009e28:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8009e2a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009e2e:	3301      	adds	r3, #1
 8009e30:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 8009e34:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009e38:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8009e3c:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 8009e40:	7812      	ldrb	r2, [r2, #0]
 8009e42:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8009e44:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009e48:	3301      	adds	r3, #1
 8009e4a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009e4e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009e52:	2218      	movs	r2, #24
 8009e54:	2100      	movs	r1, #0
 8009e56:	4618      	mov	r0, r3
 8009e58:	f000 fd52 	bl	800a900 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009e5c:	233f      	movs	r3, #63	@ 0x3f
 8009e5e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x102;
 8009e62:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8009e66:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8009e6a:	f107 0310 	add.w	r3, r7, #16
 8009e6e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8009e72:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009e76:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 8009e7a:	f107 030c 	add.w	r3, r7, #12
 8009e7e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 8009e82:	2303      	movs	r3, #3
 8009e84:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009e88:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009e8c:	2100      	movs	r1, #0
 8009e8e:	4618      	mov	r0, r3
 8009e90:	f000 ffc0 	bl	800ae14 <hci_send_req>
 8009e94:	4603      	mov	r3, r0
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	da01      	bge.n	8009e9e <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 8009e9a:	23ff      	movs	r3, #255	@ 0xff
 8009e9c:	e017      	b.n	8009ece <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 8009e9e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009ea2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8009ea6:	781b      	ldrb	r3, [r3, #0]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d005      	beq.n	8009eb8 <aci_gatt_add_service+0x18c>
    return resp.Status;
 8009eac:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009eb0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8009eb4:	781b      	ldrb	r3, [r3, #0]
 8009eb6:	e00a      	b.n	8009ece <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 8009eb8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009ebc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8009ec0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009ec4:	b29a      	uxth	r2, r3
 8009ec6:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8009eca:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8009ecc:	2300      	movs	r3, #0
}
 8009ece:	4618      	mov	r0, r3
 8009ed0:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	bd90      	pop	{r4, r7, pc}

08009ed8 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 8009ed8:	b590      	push	{r4, r7, lr}
 8009eda:	b0d1      	sub	sp, #324	@ 0x144
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	4604      	mov	r4, r0
 8009ee0:	4608      	mov	r0, r1
 8009ee2:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 8009ee6:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 8009eea:	600a      	str	r2, [r1, #0]
 8009eec:	4619      	mov	r1, r3
 8009eee:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8009ef2:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8009ef6:	4622      	mov	r2, r4
 8009ef8:	801a      	strh	r2, [r3, #0]
 8009efa:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8009efe:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8009f02:	4602      	mov	r2, r0
 8009f04:	701a      	strb	r2, [r3, #0]
 8009f06:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8009f0a:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 8009f0e:	460a      	mov	r2, r1
 8009f10:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 8009f12:	f107 0318 	add.w	r3, r7, #24
 8009f16:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8009f1a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8009f1e:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8009f22:	781b      	ldrb	r3, [r3, #0]
 8009f24:	2b01      	cmp	r3, #1
 8009f26:	d00a      	beq.n	8009f3e <aci_gatt_add_char+0x66>
 8009f28:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8009f2c:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8009f30:	781b      	ldrb	r3, [r3, #0]
 8009f32:	2b02      	cmp	r3, #2
 8009f34:	d101      	bne.n	8009f3a <aci_gatt_add_char+0x62>
 8009f36:	2313      	movs	r3, #19
 8009f38:	e002      	b.n	8009f40 <aci_gatt_add_char+0x68>
 8009f3a:	2303      	movs	r3, #3
 8009f3c:	e000      	b.n	8009f40 <aci_gatt_add_char+0x68>
 8009f3e:	2305      	movs	r3, #5
 8009f40:	f107 0218 	add.w	r2, r7, #24
 8009f44:	4413      	add	r3, r2
 8009f46:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8009f4a:	f107 0314 	add.w	r3, r7, #20
 8009f4e:	2203      	movs	r2, #3
 8009f50:	2100      	movs	r1, #0
 8009f52:	4618      	mov	r0, r3
 8009f54:	f000 fcd4 	bl	800a900 <Osal_MemSet>
  int index_input = 0;
 8009f58:	2300      	movs	r3, #0
 8009f5a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Service_Handle = Service_Handle;
 8009f5e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8009f62:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8009f66:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8009f6a:	8812      	ldrh	r2, [r2, #0]
 8009f6c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009f6e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8009f72:	3302      	adds	r3, #2
 8009f74:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 8009f78:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8009f7c:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8009f80:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 8009f84:	7812      	ldrb	r2, [r2, #0]
 8009f86:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8009f88:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8009f8c:	3301      	adds	r3, #1
 8009f8e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 8009f92:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8009f96:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8009f9a:	781b      	ldrb	r3, [r3, #0]
 8009f9c:	2b01      	cmp	r3, #1
 8009f9e:	d002      	beq.n	8009fa6 <aci_gatt_add_char+0xce>
 8009fa0:	2b02      	cmp	r3, #2
 8009fa2:	d004      	beq.n	8009fae <aci_gatt_add_char+0xd6>
 8009fa4:	e007      	b.n	8009fb6 <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 8009fa6:	2302      	movs	r3, #2
 8009fa8:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 8009fac:	e005      	b.n	8009fba <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 8009fae:	2310      	movs	r3, #16
 8009fb0:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 8009fb4:	e001      	b.n	8009fba <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 8009fb6:	2397      	movs	r3, #151	@ 0x97
 8009fb8:	e091      	b.n	800a0de <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 8009fba:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8009fbe:	1cd8      	adds	r0, r3, #3
 8009fc0:	f897 213f 	ldrb.w	r2, [r7, #319]	@ 0x13f
 8009fc4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8009fc8:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8009fcc:	6819      	ldr	r1, [r3, #0]
 8009fce:	f000 fc87 	bl	800a8e0 <Osal_MemCpy>
    index_input += size;
 8009fd2:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 8009fd6:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8009fda:	4413      	add	r3, r2
 8009fdc:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 8009fe0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8009fe4:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8009fe8:	f5a2 729d 	sub.w	r2, r2, #314	@ 0x13a
 8009fec:	8812      	ldrh	r2, [r2, #0]
 8009fee:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8009ff0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8009ff4:	3302      	adds	r3, #2
 8009ff6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Properties = Char_Properties;
 8009ffa:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8009ffe:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 800a002:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 800a004:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800a008:	3301      	adds	r3, #1
 800a00a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 800a00e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800a012:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 800a016:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 800a018:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800a01c:	3301      	adds	r3, #1
 800a01e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 800a022:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800a026:	f897 2158 	ldrb.w	r2, [r7, #344]	@ 0x158
 800a02a:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 800a02c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800a030:	3301      	adds	r3, #1
 800a032:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 800a036:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800a03a:	f897 215c 	ldrb.w	r2, [r7, #348]	@ 0x15c
 800a03e:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 800a040:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800a044:	3301      	adds	r3, #1
 800a046:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Is_Variable = Is_Variable;
 800a04a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800a04e:	f897 2160 	ldrb.w	r2, [r7, #352]	@ 0x160
 800a052:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 800a054:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800a058:	3301      	adds	r3, #1
 800a05a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a05e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800a062:	2218      	movs	r2, #24
 800a064:	2100      	movs	r1, #0
 800a066:	4618      	mov	r0, r3
 800a068:	f000 fc4a 	bl	800a900 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a06c:	233f      	movs	r3, #63	@ 0x3f
 800a06e:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x104;
 800a072:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800a076:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.cparam = cmd_buffer;
 800a07a:	f107 0318 	add.w	r3, r7, #24
 800a07e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 800a082:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800a086:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &resp;
 800a08a:	f107 0314 	add.w	r3, r7, #20
 800a08e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = sizeof(resp);
 800a092:	2303      	movs	r3, #3
 800a094:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a098:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800a09c:	2100      	movs	r1, #0
 800a09e:	4618      	mov	r0, r3
 800a0a0:	f000 feb8 	bl	800ae14 <hci_send_req>
 800a0a4:	4603      	mov	r3, r0
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	da01      	bge.n	800a0ae <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 800a0aa:	23ff      	movs	r3, #255	@ 0xff
 800a0ac:	e017      	b.n	800a0de <aci_gatt_add_char+0x206>
  if ( resp.Status )
 800a0ae:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800a0b2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800a0b6:	781b      	ldrb	r3, [r3, #0]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d005      	beq.n	800a0c8 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 800a0bc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800a0c0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800a0c4:	781b      	ldrb	r3, [r3, #0]
 800a0c6:	e00a      	b.n	800a0de <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 800a0c8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800a0cc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800a0d0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800a0d4:	b29a      	uxth	r2, r3
 800a0d6:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 800a0da:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800a0dc:	2300      	movs	r3, #0
}
 800a0de:	4618      	mov	r0, r3
 800a0e0:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	bd90      	pop	{r4, r7, pc}

0800a0e8 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 800a0e8:	b5b0      	push	{r4, r5, r7, lr}
 800a0ea:	b0cc      	sub	sp, #304	@ 0x130
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	4605      	mov	r5, r0
 800a0f0:	460c      	mov	r4, r1
 800a0f2:	4610      	mov	r0, r2
 800a0f4:	4619      	mov	r1, r3
 800a0f6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a0fa:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800a0fe:	462a      	mov	r2, r5
 800a100:	801a      	strh	r2, [r3, #0]
 800a102:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a106:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800a10a:	4622      	mov	r2, r4
 800a10c:	801a      	strh	r2, [r3, #0]
 800a10e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a112:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 800a116:	4602      	mov	r2, r0
 800a118:	701a      	strb	r2, [r3, #0]
 800a11a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a11e:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800a122:	460a      	mov	r2, r1
 800a124:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 800a126:	f107 0310 	add.w	r3, r7, #16
 800a12a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800a12e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a132:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a136:	2200      	movs	r2, #0
 800a138:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a13a:	2300      	movs	r3, #0
 800a13c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_Handle = Service_Handle;
 800a140:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a144:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a148:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800a14c:	8812      	ldrh	r2, [r2, #0]
 800a14e:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800a150:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a154:	3302      	adds	r3, #2
 800a156:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Handle = Char_Handle;
 800a15a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a15e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a162:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 800a166:	8812      	ldrh	r2, [r2, #0]
 800a168:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800a16a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a16e:	3302      	adds	r3, #2
 800a170:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Val_Offset = Val_Offset;
 800a174:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a178:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a17c:	f2a2 122d 	subw	r2, r2, #301	@ 0x12d
 800a180:	7812      	ldrb	r2, [r2, #0]
 800a182:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800a184:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a188:	3301      	adds	r3, #1
 800a18a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 800a18e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a192:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a196:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 800a19a:	7812      	ldrb	r2, [r2, #0]
 800a19c:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800a19e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a1a2:	3301      	adds	r3, #1
 800a1a4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 800a1a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a1ac:	1d98      	adds	r0, r3, #6
 800a1ae:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a1b2:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800a1b6:	781b      	ldrb	r3, [r3, #0]
 800a1b8:	461a      	mov	r2, r3
 800a1ba:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800a1be:	f000 fb8f 	bl	800a8e0 <Osal_MemCpy>
  index_input += Char_Value_Length;
 800a1c2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a1c6:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800a1ca:	781b      	ldrb	r3, [r3, #0]
 800a1cc:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800a1d0:	4413      	add	r3, r2
 800a1d2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a1d6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a1da:	2218      	movs	r2, #24
 800a1dc:	2100      	movs	r1, #0
 800a1de:	4618      	mov	r0, r3
 800a1e0:	f000 fb8e 	bl	800a900 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a1e4:	233f      	movs	r3, #63	@ 0x3f
 800a1e6:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x106;
 800a1ea:	f44f 7383 	mov.w	r3, #262	@ 0x106
 800a1ee:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800a1f2:	f107 0310 	add.w	r3, r7, #16
 800a1f6:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800a1fa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a1fe:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800a202:	f107 030f 	add.w	r3, r7, #15
 800a206:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800a20a:	2301      	movs	r3, #1
 800a20c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a210:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a214:	2100      	movs	r1, #0
 800a216:	4618      	mov	r0, r3
 800a218:	f000 fdfc 	bl	800ae14 <hci_send_req>
 800a21c:	4603      	mov	r3, r0
 800a21e:	2b00      	cmp	r3, #0
 800a220:	da01      	bge.n	800a226 <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 800a222:	23ff      	movs	r3, #255	@ 0xff
 800a224:	e004      	b.n	800a230 <aci_gatt_update_char_value+0x148>
  return status;
 800a226:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a22a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a22e:	781b      	ldrb	r3, [r3, #0]
}
 800a230:	4618      	mov	r0, r3
 800a232:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800a236:	46bd      	mov	sp, r7
 800a238:	bdb0      	pop	{r4, r5, r7, pc}

0800a23a <aci_gatt_confirm_indication>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_confirm_indication( uint16_t Connection_Handle )
{
 800a23a:	b580      	push	{r7, lr}
 800a23c:	b0cc      	sub	sp, #304	@ 0x130
 800a23e:	af00      	add	r7, sp, #0
 800a240:	4602      	mov	r2, r0
 800a242:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a246:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800a24a:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_confirm_indication_cp0 *cp0 = (aci_gatt_confirm_indication_cp0*)(cmd_buffer);
 800a24c:	f107 0310 	add.w	r3, r7, #16
 800a250:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800a254:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a258:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a25c:	2200      	movs	r2, #0
 800a25e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a260:	2300      	movs	r3, #0
 800a262:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 800a266:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a26a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a26e:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800a272:	8812      	ldrh	r2, [r2, #0]
 800a274:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800a276:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a27a:	3302      	adds	r3, #2
 800a27c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a280:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a284:	2218      	movs	r2, #24
 800a286:	2100      	movs	r1, #0
 800a288:	4618      	mov	r0, r3
 800a28a:	f000 fb39 	bl	800a900 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a28e:	233f      	movs	r3, #63	@ 0x3f
 800a290:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x125;
 800a294:	f240 1325 	movw	r3, #293	@ 0x125
 800a298:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800a29c:	f107 0310 	add.w	r3, r7, #16
 800a2a0:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800a2a4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a2a8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800a2ac:	f107 030f 	add.w	r3, r7, #15
 800a2b0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800a2b4:	2301      	movs	r3, #1
 800a2b6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a2ba:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a2be:	2100      	movs	r1, #0
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	f000 fda7 	bl	800ae14 <hci_send_req>
 800a2c6:	4603      	mov	r3, r0
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	da01      	bge.n	800a2d0 <aci_gatt_confirm_indication+0x96>
    return BLE_STATUS_TIMEOUT;
 800a2cc:	23ff      	movs	r3, #255	@ 0xff
 800a2ce:	e004      	b.n	800a2da <aci_gatt_confirm_indication+0xa0>
  return status;
 800a2d0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a2d4:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a2d8:	781b      	ldrb	r3, [r3, #0]
}
 800a2da:	4618      	mov	r0, r3
 800a2dc:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	bd80      	pop	{r7, pc}

0800a2e4 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 800a2e4:	b580      	push	{r7, lr}
 800a2e6:	b0cc      	sub	sp, #304	@ 0x130
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a2ee:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800a2f2:	601a      	str	r2, [r3, #0]
 800a2f4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a2f8:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800a2fc:	4602      	mov	r2, r0
 800a2fe:	701a      	strb	r2, [r3, #0]
 800a300:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a304:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800a308:	460a      	mov	r2, r1
 800a30a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 800a30c:	f107 0310 	add.w	r3, r7, #16
 800a310:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800a314:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a318:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a31c:	2200      	movs	r2, #0
 800a31e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a320:	2300      	movs	r3, #0
 800a322:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Offset = Offset;
 800a326:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a32a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a32e:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800a332:	7812      	ldrb	r2, [r2, #0]
 800a334:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800a336:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a33a:	3301      	adds	r3, #1
 800a33c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Length = Length;
 800a340:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a344:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a348:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800a34c:	7812      	ldrb	r2, [r2, #0]
 800a34e:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800a350:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a354:	3301      	adds	r3, #1
 800a356:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 800a35a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a35e:	1c98      	adds	r0, r3, #2
 800a360:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a364:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800a368:	781a      	ldrb	r2, [r3, #0]
 800a36a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a36e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800a372:	6819      	ldr	r1, [r3, #0]
 800a374:	f000 fab4 	bl	800a8e0 <Osal_MemCpy>
  index_input += Length;
 800a378:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a37c:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800a380:	781b      	ldrb	r3, [r3, #0]
 800a382:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800a386:	4413      	add	r3, r2
 800a388:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a38c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a390:	2218      	movs	r2, #24
 800a392:	2100      	movs	r1, #0
 800a394:	4618      	mov	r0, r3
 800a396:	f000 fab3 	bl	800a900 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a39a:	233f      	movs	r3, #63	@ 0x3f
 800a39c:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00c;
 800a3a0:	230c      	movs	r3, #12
 800a3a2:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800a3a6:	f107 0310 	add.w	r3, r7, #16
 800a3aa:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800a3ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a3b2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800a3b6:	f107 030f 	add.w	r3, r7, #15
 800a3ba:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800a3be:	2301      	movs	r3, #1
 800a3c0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a3c4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a3c8:	2100      	movs	r1, #0
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	f000 fd22 	bl	800ae14 <hci_send_req>
 800a3d0:	4603      	mov	r3, r0
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	da01      	bge.n	800a3da <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 800a3d6:	23ff      	movs	r3, #255	@ 0xff
 800a3d8:	e004      	b.n	800a3e4 <aci_hal_write_config_data+0x100>
  return status;
 800a3da:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a3de:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a3e2:	781b      	ldrb	r3, [r3, #0]
}
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	bd80      	pop	{r7, pc}

0800a3ee <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 800a3ee:	b580      	push	{r7, lr}
 800a3f0:	b0cc      	sub	sp, #304	@ 0x130
 800a3f2:	af00      	add	r7, sp, #0
 800a3f4:	4602      	mov	r2, r0
 800a3f6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a3fa:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800a3fe:	701a      	strb	r2, [r3, #0]
 800a400:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a404:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800a408:	460a      	mov	r2, r1
 800a40a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 800a40c:	f107 0310 	add.w	r3, r7, #16
 800a410:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800a414:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a418:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a41c:	2200      	movs	r2, #0
 800a41e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a420:	2300      	movs	r3, #0
 800a422:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->En_High_Power = En_High_Power;
 800a426:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a42a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a42e:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800a432:	7812      	ldrb	r2, [r2, #0]
 800a434:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800a436:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a43a:	3301      	adds	r3, #1
 800a43c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->PA_Level = PA_Level;
 800a440:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a444:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a448:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800a44c:	7812      	ldrb	r2, [r2, #0]
 800a44e:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800a450:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a454:	3301      	adds	r3, #1
 800a456:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a45a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a45e:	2218      	movs	r2, #24
 800a460:	2100      	movs	r1, #0
 800a462:	4618      	mov	r0, r3
 800a464:	f000 fa4c 	bl	800a900 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a468:	233f      	movs	r3, #63	@ 0x3f
 800a46a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00f;
 800a46e:	230f      	movs	r3, #15
 800a470:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800a474:	f107 0310 	add.w	r3, r7, #16
 800a478:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800a47c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a480:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800a484:	f107 030f 	add.w	r3, r7, #15
 800a488:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800a48c:	2301      	movs	r3, #1
 800a48e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a492:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a496:	2100      	movs	r1, #0
 800a498:	4618      	mov	r0, r3
 800a49a:	f000 fcbb 	bl	800ae14 <hci_send_req>
 800a49e:	4603      	mov	r3, r0
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	da01      	bge.n	800a4a8 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 800a4a4:	23ff      	movs	r3, #255	@ 0xff
 800a4a6:	e004      	b.n	800a4b2 <aci_hal_set_tx_power_level+0xc4>
  return status;
 800a4a8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a4ac:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a4b0:	781b      	ldrb	r3, [r3, #0]
}
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800a4b8:	46bd      	mov	sp, r7
 800a4ba:	bd80      	pop	{r7, pc}

0800a4bc <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 800a4bc:	b580      	push	{r7, lr}
 800a4be:	b0cc      	sub	sp, #304	@ 0x130
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	4602      	mov	r2, r0
 800a4c4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a4c8:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800a4cc:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 800a4ce:	f107 0310 	add.w	r3, r7, #16
 800a4d2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800a4d6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a4da:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a4de:	2200      	movs	r2, #0
 800a4e0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a4e2:	2300      	movs	r3, #0
 800a4e4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 800a4e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a4ec:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a4f0:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800a4f4:	8812      	ldrh	r2, [r2, #0]
 800a4f6:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800a4f8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a4fc:	3302      	adds	r3, #2
 800a4fe:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a502:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a506:	2218      	movs	r2, #24
 800a508:	2100      	movs	r1, #0
 800a50a:	4618      	mov	r0, r3
 800a50c:	f000 f9f8 	bl	800a900 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a510:	233f      	movs	r3, #63	@ 0x3f
 800a512:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x018;
 800a516:	2318      	movs	r3, #24
 800a518:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800a51c:	f107 0310 	add.w	r3, r7, #16
 800a520:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800a524:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a528:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800a52c:	f107 030f 	add.w	r3, r7, #15
 800a530:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800a534:	2301      	movs	r3, #1
 800a536:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a53a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a53e:	2100      	movs	r1, #0
 800a540:	4618      	mov	r0, r3
 800a542:	f000 fc67 	bl	800ae14 <hci_send_req>
 800a546:	4603      	mov	r3, r0
 800a548:	2b00      	cmp	r3, #0
 800a54a:	da01      	bge.n	800a550 <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 800a54c:	23ff      	movs	r3, #255	@ 0xff
 800a54e:	e004      	b.n	800a55a <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 800a550:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a554:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a558:	781b      	ldrb	r3, [r3, #0]
}
 800a55a:	4618      	mov	r0, r3
 800a55c:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800a560:	46bd      	mov	sp, r7
 800a562:	bd80      	pop	{r7, pc}

0800a564 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 800a564:	b580      	push	{r7, lr}
 800a566:	b088      	sub	sp, #32
 800a568:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800a56a:	2300      	movs	r3, #0
 800a56c:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a56e:	f107 0308 	add.w	r3, r7, #8
 800a572:	2218      	movs	r2, #24
 800a574:	2100      	movs	r1, #0
 800a576:	4618      	mov	r0, r3
 800a578:	f000 f9c2 	bl	800a900 <Osal_MemSet>
  rq.ogf = 0x03;
 800a57c:	2303      	movs	r3, #3
 800a57e:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 800a580:	2303      	movs	r3, #3
 800a582:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800a584:	1dfb      	adds	r3, r7, #7
 800a586:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800a588:	2301      	movs	r3, #1
 800a58a:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a58c:	f107 0308 	add.w	r3, r7, #8
 800a590:	2100      	movs	r1, #0
 800a592:	4618      	mov	r0, r3
 800a594:	f000 fc3e 	bl	800ae14 <hci_send_req>
 800a598:	4603      	mov	r3, r0
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	da01      	bge.n	800a5a2 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 800a59e:	23ff      	movs	r3, #255	@ 0xff
 800a5a0:	e000      	b.n	800a5a4 <hci_reset+0x40>
  return status;
 800a5a2:	79fb      	ldrb	r3, [r7, #7]
}
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	3720      	adds	r7, #32
 800a5a8:	46bd      	mov	sp, r7
 800a5aa:	bd80      	pop	{r7, pc}

0800a5ac <hci_le_read_phy>:
}

tBleStatus hci_le_read_phy( uint16_t Connection_Handle,
                            uint8_t* TX_PHY,
                            uint8_t* RX_PHY )
{
 800a5ac:	b580      	push	{r7, lr}
 800a5ae:	b0ce      	sub	sp, #312	@ 0x138
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800a5b6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800a5ba:	6019      	str	r1, [r3, #0]
 800a5bc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800a5c0:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800a5c4:	601a      	str	r2, [r3, #0]
 800a5c6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800a5ca:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800a5ce:	4602      	mov	r2, r0
 800a5d0:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_read_phy_cp0 *cp0 = (hci_le_read_phy_cp0*)(cmd_buffer);
 800a5d2:	f107 0318 	add.w	r3, r7, #24
 800a5d6:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  hci_le_read_phy_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800a5da:	f107 0310 	add.w	r3, r7, #16
 800a5de:	2205      	movs	r2, #5
 800a5e0:	2100      	movs	r1, #0
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	f000 f98c 	bl	800a900 <Osal_MemSet>
  int index_input = 0;
 800a5e8:	2300      	movs	r3, #0
 800a5ea:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Connection_Handle = Connection_Handle;
 800a5ee:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800a5f2:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800a5f6:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800a5fa:	8812      	ldrh	r2, [r2, #0]
 800a5fc:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800a5fe:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800a602:	3302      	adds	r3, #2
 800a604:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a608:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800a60c:	2218      	movs	r2, #24
 800a60e:	2100      	movs	r1, #0
 800a610:	4618      	mov	r0, r3
 800a612:	f000 f975 	bl	800a900 <Osal_MemSet>
  rq.ogf = 0x08;
 800a616:	2308      	movs	r3, #8
 800a618:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x030;
 800a61c:	2330      	movs	r3, #48	@ 0x30
 800a61e:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.cparam = cmd_buffer;
 800a622:	f107 0318 	add.w	r3, r7, #24
 800a626:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 800a62a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800a62e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &resp;
 800a632:	f107 0310 	add.w	r3, r7, #16
 800a636:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = sizeof(resp);
 800a63a:	2305      	movs	r3, #5
 800a63c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a640:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800a644:	2100      	movs	r1, #0
 800a646:	4618      	mov	r0, r3
 800a648:	f000 fbe4 	bl	800ae14 <hci_send_req>
 800a64c:	4603      	mov	r3, r0
 800a64e:	2b00      	cmp	r3, #0
 800a650:	da01      	bge.n	800a656 <hci_le_read_phy+0xaa>
    return BLE_STATUS_TIMEOUT;
 800a652:	23ff      	movs	r3, #255	@ 0xff
 800a654:	e023      	b.n	800a69e <hci_le_read_phy+0xf2>
  if ( resp.Status )
 800a656:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800a65a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800a65e:	781b      	ldrb	r3, [r3, #0]
 800a660:	2b00      	cmp	r3, #0
 800a662:	d005      	beq.n	800a670 <hci_le_read_phy+0xc4>
    return resp.Status;
 800a664:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800a668:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800a66c:	781b      	ldrb	r3, [r3, #0]
 800a66e:	e016      	b.n	800a69e <hci_le_read_phy+0xf2>
  *TX_PHY = resp.TX_PHY;
 800a670:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800a674:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800a678:	78da      	ldrb	r2, [r3, #3]
 800a67a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800a67e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	701a      	strb	r2, [r3, #0]
  *RX_PHY = resp.RX_PHY;
 800a686:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800a68a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800a68e:	791a      	ldrb	r2, [r3, #4]
 800a690:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800a694:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	701a      	strb	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800a69c:	2300      	movs	r3, #0
}
 800a69e:	4618      	mov	r0, r3
 800a6a0:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	bd80      	pop	{r7, pc}

0800a6a8 <hci_le_set_default_phy>:

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 800a6a8:	b590      	push	{r4, r7, lr}
 800a6aa:	b0cd      	sub	sp, #308	@ 0x134
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	4604      	mov	r4, r0
 800a6b0:	4608      	mov	r0, r1
 800a6b2:	4611      	mov	r1, r2
 800a6b4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a6b8:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800a6bc:	4622      	mov	r2, r4
 800a6be:	701a      	strb	r2, [r3, #0]
 800a6c0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a6c4:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800a6c8:	4602      	mov	r2, r0
 800a6ca:	701a      	strb	r2, [r3, #0]
 800a6cc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a6d0:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800a6d4:	460a      	mov	r2, r1
 800a6d6:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 800a6d8:	f107 0310 	add.w	r3, r7, #16
 800a6dc:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800a6e0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a6e4:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a6e8:	2200      	movs	r2, #0
 800a6ea:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a6ec:	2300      	movs	r3, #0
 800a6ee:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 800a6f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a6f6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a6fa:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800a6fe:	7812      	ldrb	r2, [r2, #0]
 800a700:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800a702:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a706:	3301      	adds	r3, #1
 800a708:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->TX_PHYS = TX_PHYS;
 800a70c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a710:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a714:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800a718:	7812      	ldrb	r2, [r2, #0]
 800a71a:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800a71c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a720:	3301      	adds	r3, #1
 800a722:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->RX_PHYS = RX_PHYS;
 800a726:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a72a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a72e:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800a732:	7812      	ldrb	r2, [r2, #0]
 800a734:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800a736:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a73a:	3301      	adds	r3, #1
 800a73c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a740:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a744:	2218      	movs	r2, #24
 800a746:	2100      	movs	r1, #0
 800a748:	4618      	mov	r0, r3
 800a74a:	f000 f8d9 	bl	800a900 <Osal_MemSet>
  rq.ogf = 0x08;
 800a74e:	2308      	movs	r3, #8
 800a750:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x031;
 800a754:	2331      	movs	r3, #49	@ 0x31
 800a756:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800a75a:	f107 0310 	add.w	r3, r7, #16
 800a75e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800a762:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a766:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800a76a:	f107 030f 	add.w	r3, r7, #15
 800a76e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800a772:	2301      	movs	r3, #1
 800a774:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a778:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a77c:	2100      	movs	r1, #0
 800a77e:	4618      	mov	r0, r3
 800a780:	f000 fb48 	bl	800ae14 <hci_send_req>
 800a784:	4603      	mov	r3, r0
 800a786:	2b00      	cmp	r3, #0
 800a788:	da01      	bge.n	800a78e <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 800a78a:	23ff      	movs	r3, #255	@ 0xff
 800a78c:	e004      	b.n	800a798 <hci_le_set_default_phy+0xf0>
  return status;
 800a78e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a792:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a796:	781b      	ldrb	r3, [r3, #0]
}
 800a798:	4618      	mov	r0, r3
 800a79a:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 800a79e:	46bd      	mov	sp, r7
 800a7a0:	bd90      	pop	{r4, r7, pc}

0800a7a2 <aci_l2cap_connection_parameter_update_req>:
tBleStatus aci_l2cap_connection_parameter_update_req( uint16_t Connection_Handle,
                                                      uint16_t Conn_Interval_Min,
                                                      uint16_t Conn_Interval_Max,
                                                      uint16_t Latency,
                                                      uint16_t Timeout_Multiplier )
{
 800a7a2:	b5b0      	push	{r4, r5, r7, lr}
 800a7a4:	b0cc      	sub	sp, #304	@ 0x130
 800a7a6:	af00      	add	r7, sp, #0
 800a7a8:	4605      	mov	r5, r0
 800a7aa:	460c      	mov	r4, r1
 800a7ac:	4610      	mov	r0, r2
 800a7ae:	4619      	mov	r1, r3
 800a7b0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a7b4:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800a7b8:	462a      	mov	r2, r5
 800a7ba:	801a      	strh	r2, [r3, #0]
 800a7bc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a7c0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800a7c4:	4622      	mov	r2, r4
 800a7c6:	801a      	strh	r2, [r3, #0]
 800a7c8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a7cc:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800a7d0:	4602      	mov	r2, r0
 800a7d2:	801a      	strh	r2, [r3, #0]
 800a7d4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a7d8:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800a7dc:	460a      	mov	r2, r1
 800a7de:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_l2cap_connection_parameter_update_req_cp0 *cp0 = (aci_l2cap_connection_parameter_update_req_cp0*)(cmd_buffer);
 800a7e0:	f107 0310 	add.w	r3, r7, #16
 800a7e4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800a7e8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a7ec:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a7f0:	2200      	movs	r2, #0
 800a7f2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 800a7fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a7fe:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a802:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800a806:	8812      	ldrh	r2, [r2, #0]
 800a808:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800a80a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a80e:	3302      	adds	r3, #2
 800a810:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Conn_Interval_Min = Conn_Interval_Min;
 800a814:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a818:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a81c:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 800a820:	8812      	ldrh	r2, [r2, #0]
 800a822:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800a824:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a828:	3302      	adds	r3, #2
 800a82a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Conn_Interval_Max = Conn_Interval_Max;
 800a82e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a832:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a836:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 800a83a:	8812      	ldrh	r2, [r2, #0]
 800a83c:	809a      	strh	r2, [r3, #4]
  index_input += 2;
 800a83e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a842:	3302      	adds	r3, #2
 800a844:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Latency = Latency;
 800a848:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a84c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a850:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 800a854:	8812      	ldrh	r2, [r2, #0]
 800a856:	80da      	strh	r2, [r3, #6]
  index_input += 2;
 800a858:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a85c:	3302      	adds	r3, #2
 800a85e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Timeout_Multiplier = Timeout_Multiplier;
 800a862:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a866:	f8b7 2140 	ldrh.w	r2, [r7, #320]	@ 0x140
 800a86a:	811a      	strh	r2, [r3, #8]
  index_input += 2;
 800a86c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a870:	3302      	adds	r3, #2
 800a872:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a876:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a87a:	2218      	movs	r2, #24
 800a87c:	2100      	movs	r1, #0
 800a87e:	4618      	mov	r0, r3
 800a880:	f000 f83e 	bl	800a900 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a884:	233f      	movs	r3, #63	@ 0x3f
 800a886:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x181;
 800a88a:	f240 1381 	movw	r3, #385	@ 0x181
 800a88e:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.event = 0x0F;
 800a892:	230f      	movs	r3, #15
 800a894:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  rq.cparam = cmd_buffer;
 800a898:	f107 0310 	add.w	r3, r7, #16
 800a89c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800a8a0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a8a4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800a8a8:	f107 030f 	add.w	r3, r7, #15
 800a8ac:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800a8b0:	2301      	movs	r3, #1
 800a8b2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a8b6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a8ba:	2100      	movs	r1, #0
 800a8bc:	4618      	mov	r0, r3
 800a8be:	f000 faa9 	bl	800ae14 <hci_send_req>
 800a8c2:	4603      	mov	r3, r0
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	da01      	bge.n	800a8cc <aci_l2cap_connection_parameter_update_req+0x12a>
    return BLE_STATUS_TIMEOUT;
 800a8c8:	23ff      	movs	r3, #255	@ 0xff
 800a8ca:	e004      	b.n	800a8d6 <aci_l2cap_connection_parameter_update_req+0x134>
  return status;
 800a8cc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a8d0:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a8d4:	781b      	ldrb	r3, [r3, #0]
}
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800a8dc:	46bd      	mov	sp, r7
 800a8de:	bdb0      	pop	{r4, r5, r7, pc}

0800a8e0 <Osal_MemCpy>:
 * Osal_MemCpy
 *
 */

void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 800a8e0:	b580      	push	{r7, lr}
 800a8e2:	b084      	sub	sp, #16
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	60f8      	str	r0, [r7, #12]
 800a8e8:	60b9      	str	r1, [r7, #8]
 800a8ea:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size );
 800a8ec:	687a      	ldr	r2, [r7, #4]
 800a8ee:	68b9      	ldr	r1, [r7, #8]
 800a8f0:	68f8      	ldr	r0, [r7, #12]
 800a8f2:	f004 f802 	bl	800e8fa <memcpy>
 800a8f6:	4603      	mov	r3, r0
}
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	3710      	adds	r7, #16
 800a8fc:	46bd      	mov	sp, r7
 800a8fe:	bd80      	pop	{r7, pc}

0800a900 <Osal_MemSet>:
 * Osal_MemSet
 *
 */

void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 800a900:	b580      	push	{r7, lr}
 800a902:	b084      	sub	sp, #16
 800a904:	af00      	add	r7, sp, #0
 800a906:	60f8      	str	r0, [r7, #12]
 800a908:	60b9      	str	r1, [r7, #8]
 800a90a:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 800a90c:	687a      	ldr	r2, [r7, #4]
 800a90e:	68b9      	ldr	r1, [r7, #8]
 800a910:	68f8      	ldr	r0, [r7, #12]
 800a912:	f003 ff7d 	bl	800e810 <memset>
 800a916:	4603      	mov	r3, r0
}
 800a918:	4618      	mov	r0, r3
 800a91a:	3710      	adds	r7, #16
 800a91c:	46bd      	mov	sp, r7
 800a91e:	bd80      	pop	{r7, pc}

0800a920 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 800a920:	b480      	push	{r7}
 800a922:	af00      	add	r7, sp, #0
  return;
 800a924:	bf00      	nop
}
 800a926:	46bd      	mov	sp, r7
 800a928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92c:	4770      	bx	lr

0800a92e <BLS_Init>:

__WEAK void BLS_Init( void )
{
 800a92e:	b480      	push	{r7}
 800a930:	af00      	add	r7, sp, #0
  return;
 800a932:	bf00      	nop
}
 800a934:	46bd      	mov	sp, r7
 800a936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a93a:	4770      	bx	lr

0800a93c <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 800a93c:	b480      	push	{r7}
 800a93e:	af00      	add	r7, sp, #0
  return;
 800a940:	bf00      	nop
}
 800a942:	46bd      	mov	sp, r7
 800a944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a948:	4770      	bx	lr

0800a94a <DIS_Init>:
__WEAK void DIS_Init( void )
{
 800a94a:	b480      	push	{r7}
 800a94c:	af00      	add	r7, sp, #0
  return;
 800a94e:	bf00      	nop
}
 800a950:	46bd      	mov	sp, r7
 800a952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a956:	4770      	bx	lr

0800a958 <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 800a958:	b480      	push	{r7}
 800a95a:	af00      	add	r7, sp, #0
  return;
 800a95c:	bf00      	nop
}
 800a95e:	46bd      	mov	sp, r7
 800a960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a964:	4770      	bx	lr

0800a966 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 800a966:	b480      	push	{r7}
 800a968:	af00      	add	r7, sp, #0
  return;
 800a96a:	bf00      	nop
}
 800a96c:	46bd      	mov	sp, r7
 800a96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a972:	4770      	bx	lr

0800a974 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 800a974:	b480      	push	{r7}
 800a976:	af00      	add	r7, sp, #0
  return;
 800a978:	bf00      	nop
}
 800a97a:	46bd      	mov	sp, r7
 800a97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a980:	4770      	bx	lr

0800a982 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 800a982:	b480      	push	{r7}
 800a984:	af00      	add	r7, sp, #0
  return;
 800a986:	bf00      	nop
}
 800a988:	46bd      	mov	sp, r7
 800a98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98e:	4770      	bx	lr

0800a990 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 800a990:	b480      	push	{r7}
 800a992:	af00      	add	r7, sp, #0
  return;
 800a994:	bf00      	nop
}
 800a996:	46bd      	mov	sp, r7
 800a998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a99c:	4770      	bx	lr

0800a99e <LLS_Init>:
__WEAK void LLS_Init( void )
{
 800a99e:	b480      	push	{r7}
 800a9a0:	af00      	add	r7, sp, #0
  return;
 800a9a2:	bf00      	nop
}
 800a9a4:	46bd      	mov	sp, r7
 800a9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9aa:	4770      	bx	lr

0800a9ac <TPS_Init>:
__WEAK void TPS_Init( void )
{
 800a9ac:	b480      	push	{r7}
 800a9ae:	af00      	add	r7, sp, #0
  return;
 800a9b0:	bf00      	nop
}
 800a9b2:	46bd      	mov	sp, r7
 800a9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b8:	4770      	bx	lr

0800a9ba <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 800a9ba:	b480      	push	{r7}
 800a9bc:	af00      	add	r7, sp, #0
  return;
 800a9be:	bf00      	nop
}
 800a9c0:	46bd      	mov	sp, r7
 800a9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c6:	4770      	bx	lr

0800a9c8 <ZDD_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
  return;
}
__WEAK void ZDD_STM_Init( void )
{
 800a9c8:	b480      	push	{r7}
 800a9ca:	af00      	add	r7, sp, #0
  return;
 800a9cc:	bf00      	nop
}
 800a9ce:	46bd      	mov	sp, r7
 800a9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d4:	4770      	bx	lr

0800a9d6 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 800a9d6:	b480      	push	{r7}
 800a9d8:	af00      	add	r7, sp, #0
  return;
 800a9da:	bf00      	nop
}
 800a9dc:	46bd      	mov	sp, r7
 800a9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e2:	4770      	bx	lr

0800a9e4 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 800a9e4:	b480      	push	{r7}
 800a9e6:	af00      	add	r7, sp, #0
  return;
 800a9e8:	bf00      	nop
}
 800a9ea:	46bd      	mov	sp, r7
 800a9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f0:	4770      	bx	lr

0800a9f2 <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 800a9f2:	b480      	push	{r7}
 800a9f4:	af00      	add	r7, sp, #0
  return;
 800a9f6:	bf00      	nop
}
 800a9f8:	46bd      	mov	sp, r7
 800a9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fe:	4770      	bx	lr

0800aa00 <SVCCTL_InitCustomSvc>:
__WEAK void SVCCTL_InitCustomSvc( void )
{
 800aa00:	b480      	push	{r7}
 800aa02:	af00      	add	r7, sp, #0
  return;
 800aa04:	bf00      	nop
}
 800aa06:	46bd      	mov	sp, r7
 800aa08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa0c:	4770      	bx	lr
	...

0800aa10 <SVCCTL_Init>:

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 800aa10:	b580      	push	{r7, lr}
 800aa12:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 800aa14:	4b04      	ldr	r3, [pc, #16]	@ (800aa28 <SVCCTL_Init+0x18>)
 800aa16:	2200      	movs	r2, #0
 800aa18:	711a      	strb	r2, [r3, #4]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800aa1a:	4b04      	ldr	r3, [pc, #16]	@ (800aa2c <SVCCTL_Init+0x1c>)
 800aa1c:	2200      	movs	r2, #0
 800aa1e:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 800aa20:	f000 f806 	bl	800aa30 <SVCCTL_SvcInit>

  return;
 800aa24:	bf00      	nop
}
 800aa26:	bd80      	pop	{r7, pc}
 800aa28:	20000088 	.word	0x20000088
 800aa2c:	20000090 	.word	0x20000090

0800aa30 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 800aa30:	b580      	push	{r7, lr}
 800aa32:	af00      	add	r7, sp, #0
  BAS_Init();
 800aa34:	f7ff ff74 	bl	800a920 <BAS_Init>

  BLS_Init();
 800aa38:	f7ff ff79 	bl	800a92e <BLS_Init>

  CRS_STM_Init();
 800aa3c:	f7ff ff7e 	bl	800a93c <CRS_STM_Init>

  DIS_Init();
 800aa40:	f7ff ff83 	bl	800a94a <DIS_Init>

  EDS_STM_Init();
 800aa44:	f7ff ff88 	bl	800a958 <EDS_STM_Init>

  HIDS_Init();
 800aa48:	f7ff ff8d 	bl	800a966 <HIDS_Init>

  HRS_Init();
 800aa4c:	f7ff ff92 	bl	800a974 <HRS_Init>

  HTS_Init();
 800aa50:	f7ff ff97 	bl	800a982 <HTS_Init>

  IAS_Init();
 800aa54:	f7ff ff9c 	bl	800a990 <IAS_Init>

  LLS_Init();
 800aa58:	f7ff ffa1 	bl	800a99e <LLS_Init>

  TPS_Init();
 800aa5c:	f7ff ffa6 	bl	800a9ac <TPS_Init>

  MOTENV_STM_Init();
 800aa60:	f7ff ffab 	bl	800a9ba <MOTENV_STM_Init>


  //P2PS_STM_Init();
  Hermes_App_Init();
 800aa64:	f001 fd3c 	bl	800c4e0 <Hermes_App_Init>

  ZDD_STM_Init();
 800aa68:	f7ff ffae 	bl	800a9c8 <ZDD_STM_Init>

  OTAS_STM_Init();
 800aa6c:	f7ff ffb3 	bl	800a9d6 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 800aa70:	f7ff ffbf 	bl	800a9f2 <BVOPUS_STM_Init>

  MESH_Init();
 800aa74:	f7ff ffb6 	bl	800a9e4 <MESH_Init>

  SVCCTL_InitCustomSvc();
 800aa78:	f7ff ffc2 	bl	800aa00 <SVCCTL_InitCustomSvc>
  
  return;
 800aa7c:	bf00      	nop
}
 800aa7e:	bd80      	pop	{r7, pc}

0800aa80 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 800aa80:	b480      	push	{r7}
 800aa82:	b083      	sub	sp, #12
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 800aa88:	4b09      	ldr	r3, [pc, #36]	@ (800aab0 <SVCCTL_RegisterSvcHandler+0x30>)
 800aa8a:	791b      	ldrb	r3, [r3, #4]
 800aa8c:	4619      	mov	r1, r3
 800aa8e:	4a08      	ldr	r2, [pc, #32]	@ (800aab0 <SVCCTL_RegisterSvcHandler+0x30>)
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 800aa96:	4b06      	ldr	r3, [pc, #24]	@ (800aab0 <SVCCTL_RegisterSvcHandler+0x30>)
 800aa98:	791b      	ldrb	r3, [r3, #4]
 800aa9a:	3301      	adds	r3, #1
 800aa9c:	b2da      	uxtb	r2, r3
 800aa9e:	4b04      	ldr	r3, [pc, #16]	@ (800aab0 <SVCCTL_RegisterSvcHandler+0x30>)
 800aaa0:	711a      	strb	r2, [r3, #4]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 800aaa2:	bf00      	nop
}
 800aaa4:	370c      	adds	r7, #12
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaac:	4770      	bx	lr
 800aaae:	bf00      	nop
 800aab0:	20000088 	.word	0x20000088

0800aab4 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 800aab4:	b580      	push	{r7, lr}
 800aab6:	b086      	sub	sp, #24
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	3301      	adds	r3, #1
 800aac0:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800aac2:	2300      	movs	r3, #0
 800aac4:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 800aac6:	693b      	ldr	r3, [r7, #16]
 800aac8:	781b      	ldrb	r3, [r3, #0]
 800aaca:	2bff      	cmp	r3, #255	@ 0xff
 800aacc:	d125      	bne.n	800ab1a <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 800aace:	693b      	ldr	r3, [r7, #16]
 800aad0:	3302      	adds	r3, #2
 800aad2:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	881b      	ldrh	r3, [r3, #0]
 800aad8:	b29b      	uxth	r3, r3
 800aada:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800aade:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800aae2:	d118      	bne.n	800ab16 <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800aae4:	2300      	movs	r3, #0
 800aae6:	757b      	strb	r3, [r7, #21]
 800aae8:	e00d      	b.n	800ab06 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800aaea:	7d7b      	ldrb	r3, [r7, #21]
 800aaec:	4a1a      	ldr	r2, [pc, #104]	@ (800ab58 <SVCCTL_UserEvtRx+0xa4>)
 800aaee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aaf2:	6878      	ldr	r0, [r7, #4]
 800aaf4:	4798      	blx	r3
 800aaf6:	4603      	mov	r3, r0
 800aaf8:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 800aafa:	7dfb      	ldrb	r3, [r7, #23]
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d108      	bne.n	800ab12 <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800ab00:	7d7b      	ldrb	r3, [r7, #21]
 800ab02:	3301      	adds	r3, #1
 800ab04:	757b      	strb	r3, [r7, #21]
 800ab06:	4b14      	ldr	r3, [pc, #80]	@ (800ab58 <SVCCTL_UserEvtRx+0xa4>)
 800ab08:	791b      	ldrb	r3, [r3, #4]
 800ab0a:	7d7a      	ldrb	r2, [r7, #21]
 800ab0c:	429a      	cmp	r2, r3
 800ab0e:	d3ec      	bcc.n	800aaea <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 800ab10:	e002      	b.n	800ab18 <SVCCTL_UserEvtRx+0x64>
              break;
 800ab12:	bf00      	nop
          break;
 800ab14:	e000      	b.n	800ab18 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 800ab16:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 800ab18:	e000      	b.n	800ab1c <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 800ab1a:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 800ab1c:	7dfb      	ldrb	r3, [r7, #23]
 800ab1e:	2b02      	cmp	r3, #2
 800ab20:	d00f      	beq.n	800ab42 <SVCCTL_UserEvtRx+0x8e>
 800ab22:	2b02      	cmp	r3, #2
 800ab24:	dc10      	bgt.n	800ab48 <SVCCTL_UserEvtRx+0x94>
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d002      	beq.n	800ab30 <SVCCTL_UserEvtRx+0x7c>
 800ab2a:	2b01      	cmp	r3, #1
 800ab2c:	d006      	beq.n	800ab3c <SVCCTL_UserEvtRx+0x88>
 800ab2e:	e00b      	b.n	800ab48 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 800ab30:	6878      	ldr	r0, [r7, #4]
 800ab32:	f001 ff19 	bl	800c968 <SVCCTL_App_Notification>
 800ab36:	4603      	mov	r3, r0
 800ab38:	75bb      	strb	r3, [r7, #22]
      break;
 800ab3a:	e008      	b.n	800ab4e <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 800ab3c:	2301      	movs	r3, #1
 800ab3e:	75bb      	strb	r3, [r7, #22]
      break;
 800ab40:	e005      	b.n	800ab4e <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 800ab42:	2300      	movs	r3, #0
 800ab44:	75bb      	strb	r3, [r7, #22]
      break;
 800ab46:	e002      	b.n	800ab4e <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 800ab48:	2301      	movs	r3, #1
 800ab4a:	75bb      	strb	r3, [r7, #22]
      break;
 800ab4c:	bf00      	nop
  }

  return (return_status);
 800ab4e:	7dbb      	ldrb	r3, [r7, #22]
}
 800ab50:	4618      	mov	r0, r3
 800ab52:	3718      	adds	r7, #24
 800ab54:	46bd      	mov	sp, r7
 800ab56:	bd80      	pop	{r7, pc}
 800ab58:	20000088 	.word	0x20000088

0800ab5c <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 800ab5c:	b580      	push	{r7, lr}
 800ab5e:	b088      	sub	sp, #32
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800ab64:	f107 030c 	add.w	r3, r7, #12
 800ab68:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 800ab70:	69fb      	ldr	r3, [r7, #28]
 800ab72:	212e      	movs	r1, #46	@ 0x2e
 800ab74:	f64f 4066 	movw	r0, #64614	@ 0xfc66
 800ab78:	f000 fae8 	bl	800b14c <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800ab7c:	69fb      	ldr	r3, [r7, #28]
 800ab7e:	330b      	adds	r3, #11
 800ab80:	78db      	ldrb	r3, [r3, #3]
}
 800ab82:	4618      	mov	r0, r3
 800ab84:	3720      	adds	r7, #32
 800ab86:	46bd      	mov	sp, r7
 800ab88:	bd80      	pop	{r7, pc}

0800ab8a <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 800ab8a:	b580      	push	{r7, lr}
 800ab8c:	b088      	sub	sp, #32
 800ab8e:	af00      	add	r7, sp, #0
 800ab90:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800ab92:	f107 030c 	add.w	r3, r7, #12
 800ab96:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 800ab9e:	69fb      	ldr	r3, [r7, #28]
 800aba0:	210f      	movs	r1, #15
 800aba2:	f64f 4068 	movw	r0, #64616	@ 0xfc68
 800aba6:	f000 fad1 	bl	800b14c <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800abaa:	69fb      	ldr	r3, [r7, #28]
 800abac:	330b      	adds	r3, #11
 800abae:	78db      	ldrb	r3, [r3, #3]
}
 800abb0:	4618      	mov	r0, r3
 800abb2:	3720      	adds	r7, #32
 800abb4:	46bd      	mov	sp, r7
 800abb6:	bd80      	pop	{r7, pc}

0800abb8 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 800abb8:	b580      	push	{r7, lr}
 800abba:	b088      	sub	sp, #32
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800abc0:	f107 030c 	add.w	r3, r7, #12
 800abc4:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 800abc6:	69fb      	ldr	r3, [r7, #28]
 800abc8:	687a      	ldr	r2, [r7, #4]
 800abca:	2110      	movs	r1, #16
 800abcc:	f64f 4075 	movw	r0, #64629	@ 0xfc75
 800abd0:	f000 fabc 	bl	800b14c <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800abd4:	69fb      	ldr	r3, [r7, #28]
 800abd6:	330b      	adds	r3, #11
 800abd8:	78db      	ldrb	r3, [r3, #3]
}
 800abda:	4618      	mov	r0, r3
 800abdc:	3720      	adds	r7, #32
 800abde:	46bd      	mov	sp, r7
 800abe0:	bd80      	pop	{r7, pc}
	...

0800abe4 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 800abe4:	b480      	push	{r7}
 800abe6:	b08b      	sub	sp, #44	@ 0x2c
 800abe8:	af00      	add	r7, sp, #0
 800abea:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 800abec:	2300      	movs	r3, #0
 800abee:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 800abf0:	2300      	movs	r3, #0
 800abf2:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 800abf4:	2300      	movs	r3, #0
 800abf6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t wireless_firmware_memorySize = 0;
 800abf8:	2300      	movs	r3, #0
 800abfa:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 800abfc:	2300      	movs	r3, #0
 800abfe:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 800ac00:	2300      	movs	r3, #0
 800ac02:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 800ac04:	2300      	movs	r3, #0
 800ac06:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 800ac08:	2300      	movs	r3, #0
 800ac0a:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 800ac0c:	4b4a      	ldr	r3, [pc, #296]	@ (800ad38 <SHCI_GetWirelessFwInfo+0x154>)
 800ac0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ac10:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800ac14:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 800ac16:	693b      	ldr	r3, [r7, #16]
 800ac18:	009b      	lsls	r3, r3, #2
 800ac1a:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 800ac1e:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 800ac26:	68bb      	ldr	r3, [r7, #8]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	4a44      	ldr	r2, [pc, #272]	@ (800ad3c <SHCI_GetWirelessFwInfo+0x158>)
 800ac2c:	4293      	cmp	r3, r2
 800ac2e:	d10f      	bne.n	800ac50 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 800ac30:	68bb      	ldr	r3, [r7, #8]
 800ac32:	695b      	ldr	r3, [r3, #20]
 800ac34:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 800ac36:	68bb      	ldr	r3, [r7, #8]
 800ac38:	699b      	ldr	r3, [r3, #24]
 800ac3a:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 800ac3c:	68bb      	ldr	r3, [r7, #8]
 800ac3e:	69db      	ldr	r3, [r3, #28]
 800ac40:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 800ac42:	68bb      	ldr	r3, [r7, #8]
 800ac44:	68db      	ldr	r3, [r3, #12]
 800ac46:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 800ac48:	68bb      	ldr	r3, [r7, #8]
 800ac4a:	691b      	ldr	r3, [r3, #16]
 800ac4c:	617b      	str	r3, [r7, #20]
 800ac4e:	e01a      	b.n	800ac86 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 800ac50:	693b      	ldr	r3, [r7, #16]
 800ac52:	009b      	lsls	r3, r3, #2
 800ac54:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 800ac58:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 800ac5c:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	691b      	ldr	r3, [r3, #16]
 800ac64:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	695b      	ldr	r3, [r3, #20]
 800ac6c:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	699b      	ldr	r3, [r3, #24]
 800ac74:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	685b      	ldr	r3, [r3, #4]
 800ac7c:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	689b      	ldr	r3, [r3, #8]
 800ac84:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800ac86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac88:	0e1b      	lsrs	r3, r3, #24
 800ac8a:	b2da      	uxtb	r2, r3
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800ac90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac92:	0c1b      	lsrs	r3, r3, #16
 800ac94:	b2da      	uxtb	r2, r3
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800ac9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac9c:	0a1b      	lsrs	r3, r3, #8
 800ac9e:	b2da      	uxtb	r2, r3
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 800aca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aca6:	091b      	lsrs	r3, r3, #4
 800aca8:	b2db      	uxtb	r3, r3
 800acaa:	f003 030f 	and.w	r3, r3, #15
 800acae:	b2da      	uxtb	r2, r3
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 800acb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acb6:	b2db      	uxtb	r3, r3
 800acb8:	f003 030f 	and.w	r3, r3, #15
 800acbc:	b2da      	uxtb	r2, r3
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800acc2:	6a3b      	ldr	r3, [r7, #32]
 800acc4:	0e1b      	lsrs	r3, r3, #24
 800acc6:	b2da      	uxtb	r2, r3
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800accc:	6a3b      	ldr	r3, [r7, #32]
 800acce:	0c1b      	lsrs	r3, r3, #16
 800acd0:	b2da      	uxtb	r2, r3
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 800acd6:	6a3b      	ldr	r3, [r7, #32]
 800acd8:	0a1b      	lsrs	r3, r3, #8
 800acda:	b2da      	uxtb	r2, r3
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800ace0:	6a3b      	ldr	r3, [r7, #32]
 800ace2:	b2da      	uxtb	r2, r3
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 800ace8:	69fb      	ldr	r3, [r7, #28]
 800acea:	b2da      	uxtb	r2, r3
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800acf0:	69bb      	ldr	r3, [r7, #24]
 800acf2:	0e1b      	lsrs	r3, r3, #24
 800acf4:	b2da      	uxtb	r2, r3
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800acfa:	69bb      	ldr	r3, [r7, #24]
 800acfc:	0c1b      	lsrs	r3, r3, #16
 800acfe:	b2da      	uxtb	r2, r3
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800ad04:	69bb      	ldr	r3, [r7, #24]
 800ad06:	0a1b      	lsrs	r3, r3, #8
 800ad08:	b2da      	uxtb	r2, r3
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800ad0e:	697b      	ldr	r3, [r7, #20]
 800ad10:	0e1b      	lsrs	r3, r3, #24
 800ad12:	b2da      	uxtb	r2, r3
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800ad18:	697b      	ldr	r3, [r7, #20]
 800ad1a:	0c1b      	lsrs	r3, r3, #16
 800ad1c:	b2da      	uxtb	r2, r3
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800ad22:	697b      	ldr	r3, [r7, #20]
 800ad24:	b2da      	uxtb	r2, r3
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 800ad2a:	2300      	movs	r3, #0
}
 800ad2c:	4618      	mov	r0, r3
 800ad2e:	372c      	adds	r7, #44	@ 0x2c
 800ad30:	46bd      	mov	sp, r7
 800ad32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad36:	4770      	bx	lr
 800ad38:	58004000 	.word	0x58004000
 800ad3c:	a94656b9 	.word	0xa94656b9

0800ad40 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800ad40:	b580      	push	{r7, lr}
 800ad42:	b082      	sub	sp, #8
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	6078      	str	r0, [r7, #4]
 800ad48:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800ad4a:	683b      	ldr	r3, [r7, #0]
 800ad4c:	685b      	ldr	r3, [r3, #4]
 800ad4e:	4a08      	ldr	r2, [pc, #32]	@ (800ad70 <hci_init+0x30>)
 800ad50:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 800ad52:	4a08      	ldr	r2, [pc, #32]	@ (800ad74 <hci_init+0x34>)
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 800ad58:	4806      	ldr	r0, [pc, #24]	@ (800ad74 <hci_init+0x34>)
 800ad5a:	f000 f979 	bl	800b050 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800ad5e:	683b      	ldr	r3, [r7, #0]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	4618      	mov	r0, r3
 800ad64:	f000 f8da 	bl	800af1c <TlInit>

  return;
 800ad68:	bf00      	nop
}
 800ad6a:	3708      	adds	r7, #8
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	bd80      	pop	{r7, pc}
 800ad70:	20000460 	.word	0x20000460
 800ad74:	20000438 	.word	0x20000438

0800ad78 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800ad78:	b580      	push	{r7, lr}
 800ad7a:	b084      	sub	sp, #16
 800ad7c:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800ad7e:	4822      	ldr	r0, [pc, #136]	@ (800ae08 <hci_user_evt_proc+0x90>)
 800ad80:	f000 fdd2 	bl	800b928 <LST_is_empty>
 800ad84:	4603      	mov	r3, r0
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d12b      	bne.n	800ade2 <hci_user_evt_proc+0x6a>
 800ad8a:	4b20      	ldr	r3, [pc, #128]	@ (800ae0c <hci_user_evt_proc+0x94>)
 800ad8c:	781b      	ldrb	r3, [r3, #0]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d027      	beq.n	800ade2 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800ad92:	f107 030c 	add.w	r3, r7, #12
 800ad96:	4619      	mov	r1, r3
 800ad98:	481b      	ldr	r0, [pc, #108]	@ (800ae08 <hci_user_evt_proc+0x90>)
 800ad9a:	f000 fe54 	bl	800ba46 <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800ad9e:	4b1c      	ldr	r3, [pc, #112]	@ (800ae10 <hci_user_evt_proc+0x98>)
 800ada0:	69db      	ldr	r3, [r3, #28]
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d00c      	beq.n	800adc0 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 800adaa:	2301      	movs	r3, #1
 800adac:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800adae:	4b18      	ldr	r3, [pc, #96]	@ (800ae10 <hci_user_evt_proc+0x98>)
 800adb0:	69db      	ldr	r3, [r3, #28]
 800adb2:	1d3a      	adds	r2, r7, #4
 800adb4:	4610      	mov	r0, r2
 800adb6:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 800adb8:	793a      	ldrb	r2, [r7, #4]
 800adba:	4b14      	ldr	r3, [pc, #80]	@ (800ae0c <hci_user_evt_proc+0x94>)
 800adbc:	701a      	strb	r2, [r3, #0]
 800adbe:	e002      	b.n	800adc6 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800adc0:	4b12      	ldr	r3, [pc, #72]	@ (800ae0c <hci_user_evt_proc+0x94>)
 800adc2:	2201      	movs	r2, #1
 800adc4:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 800adc6:	4b11      	ldr	r3, [pc, #68]	@ (800ae0c <hci_user_evt_proc+0x94>)
 800adc8:	781b      	ldrb	r3, [r3, #0]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d004      	beq.n	800add8 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	4618      	mov	r0, r3
 800add2:	f000 fc0d 	bl	800b5f0 <TL_MM_EvtDone>
 800add6:	e004      	b.n	800ade2 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	4619      	mov	r1, r3
 800addc:	480a      	ldr	r0, [pc, #40]	@ (800ae08 <hci_user_evt_proc+0x90>)
 800adde:	f000 fdc5 	bl	800b96c <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800ade2:	4809      	ldr	r0, [pc, #36]	@ (800ae08 <hci_user_evt_proc+0x90>)
 800ade4:	f000 fda0 	bl	800b928 <LST_is_empty>
 800ade8:	4603      	mov	r3, r0
 800adea:	2b00      	cmp	r3, #0
 800adec:	d107      	bne.n	800adfe <hci_user_evt_proc+0x86>
 800adee:	4b07      	ldr	r3, [pc, #28]	@ (800ae0c <hci_user_evt_proc+0x94>)
 800adf0:	781b      	ldrb	r3, [r3, #0]
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d003      	beq.n	800adfe <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 800adf6:	4804      	ldr	r0, [pc, #16]	@ (800ae08 <hci_user_evt_proc+0x90>)
 800adf8:	f002 fc0c 	bl	800d614 <hci_notify_asynch_evt>
  }


  return;
 800adfc:	bf00      	nop
 800adfe:	bf00      	nop
}
 800ae00:	3710      	adds	r7, #16
 800ae02:	46bd      	mov	sp, r7
 800ae04:	bd80      	pop	{r7, pc}
 800ae06:	bf00      	nop
 800ae08:	20000098 	.word	0x20000098
 800ae0c:	200000a4 	.word	0x200000a4
 800ae10:	20000438 	.word	0x20000438

0800ae14 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 800ae14:	b580      	push	{r7, lr}
 800ae16:	b088      	sub	sp, #32
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	6078      	str	r0, [r7, #4]
 800ae1c:	460b      	mov	r3, r1
 800ae1e:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 800ae20:	2000      	movs	r0, #0
 800ae22:	f000 f8d1 	bl	800afc8 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 800ae26:	2300      	movs	r3, #0
 800ae28:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	885b      	ldrh	r3, [r3, #2]
 800ae2e:	b21b      	sxth	r3, r3
 800ae30:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ae34:	b21a      	sxth	r2, r3
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	881b      	ldrh	r3, [r3, #0]
 800ae3a:	029b      	lsls	r3, r3, #10
 800ae3c:	b21b      	sxth	r3, r3
 800ae3e:	4313      	orrs	r3, r2
 800ae40:	b21b      	sxth	r3, r3
 800ae42:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 800ae44:	4b33      	ldr	r3, [pc, #204]	@ (800af14 <hci_send_req+0x100>)
 800ae46:	2201      	movs	r2, #1
 800ae48:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	68db      	ldr	r3, [r3, #12]
 800ae4e:	b2d9      	uxtb	r1, r3
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	689a      	ldr	r2, [r3, #8]
 800ae54:	8bbb      	ldrh	r3, [r7, #28]
 800ae56:	4618      	mov	r0, r3
 800ae58:	f000 f890 	bl	800af7c <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 800ae5c:	e04e      	b.n	800aefc <hci_send_req+0xe8>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 800ae5e:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 800ae62:	f002 fbee 	bl	800d642 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800ae66:	e043      	b.n	800aef0 <hci_send_req+0xdc>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 800ae68:	f107 030c 	add.w	r3, r7, #12
 800ae6c:	4619      	mov	r1, r3
 800ae6e:	482a      	ldr	r0, [pc, #168]	@ (800af18 <hci_send_req+0x104>)
 800ae70:	f000 fde9 	bl	800ba46 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	7a5b      	ldrb	r3, [r3, #9]
 800ae78:	2b0f      	cmp	r3, #15
 800ae7a:	d114      	bne.n	800aea6 <hci_send_req+0x92>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	330b      	adds	r3, #11
 800ae80:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 800ae82:	693b      	ldr	r3, [r7, #16]
 800ae84:	885b      	ldrh	r3, [r3, #2]
 800ae86:	b29b      	uxth	r3, r3
 800ae88:	8bba      	ldrh	r2, [r7, #28]
 800ae8a:	429a      	cmp	r2, r3
 800ae8c:	d104      	bne.n	800ae98 <hci_send_req+0x84>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	691b      	ldr	r3, [r3, #16]
 800ae92:	693a      	ldr	r2, [r7, #16]
 800ae94:	7812      	ldrb	r2, [r2, #0]
 800ae96:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 800ae98:	693b      	ldr	r3, [r7, #16]
 800ae9a:	785b      	ldrb	r3, [r3, #1]
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d027      	beq.n	800aef0 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800aea0:	2301      	movs	r3, #1
 800aea2:	77fb      	strb	r3, [r7, #31]
 800aea4:	e024      	b.n	800aef0 <hci_send_req+0xdc>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	330b      	adds	r3, #11
 800aeaa:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 800aeac:	69bb      	ldr	r3, [r7, #24]
 800aeae:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800aeb2:	b29b      	uxth	r3, r3
 800aeb4:	8bba      	ldrh	r2, [r7, #28]
 800aeb6:	429a      	cmp	r2, r3
 800aeb8:	d114      	bne.n	800aee4 <hci_send_req+0xd0>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	7a9b      	ldrb	r3, [r3, #10]
 800aebe:	3b03      	subs	r3, #3
 800aec0:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	695a      	ldr	r2, [r3, #20]
 800aec6:	7dfb      	ldrb	r3, [r7, #23]
 800aec8:	429a      	cmp	r2, r3
 800aeca:	bfa8      	it	ge
 800aecc:	461a      	movge	r2, r3
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	6918      	ldr	r0, [r3, #16]
 800aed6:	69bb      	ldr	r3, [r7, #24]
 800aed8:	1cd9      	adds	r1, r3, #3
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	695b      	ldr	r3, [r3, #20]
 800aede:	461a      	mov	r2, r3
 800aee0:	f003 fd0b 	bl	800e8fa <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 800aee4:	69bb      	ldr	r3, [r7, #24]
 800aee6:	781b      	ldrb	r3, [r3, #0]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d001      	beq.n	800aef0 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800aeec:	2301      	movs	r3, #1
 800aeee:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800aef0:	4809      	ldr	r0, [pc, #36]	@ (800af18 <hci_send_req+0x104>)
 800aef2:	f000 fd19 	bl	800b928 <LST_is_empty>
 800aef6:	4603      	mov	r3, r0
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d0b5      	beq.n	800ae68 <hci_send_req+0x54>
  while(local_cmd_status == HCI_TL_CmdBusy)
 800aefc:	7ffb      	ldrb	r3, [r7, #31]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d0ad      	beq.n	800ae5e <hci_send_req+0x4a>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 800af02:	2001      	movs	r0, #1
 800af04:	f000 f860 	bl	800afc8 <NotifyCmdStatus>

  return 0;
 800af08:	2300      	movs	r3, #0
}
 800af0a:	4618      	mov	r0, r3
 800af0c:	3720      	adds	r7, #32
 800af0e:	46bd      	mov	sp, r7
 800af10:	bd80      	pop	{r7, pc}
 800af12:	bf00      	nop
 800af14:	20000464 	.word	0x20000464
 800af18:	20000458 	.word	0x20000458

0800af1c <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800af1c:	b580      	push	{r7, lr}
 800af1e:	b086      	sub	sp, #24
 800af20:	af00      	add	r7, sp, #0
 800af22:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 800af24:	480f      	ldr	r0, [pc, #60]	@ (800af64 <TlInit+0x48>)
 800af26:	f000 fcef 	bl	800b908 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 800af2a:	4a0f      	ldr	r2, [pc, #60]	@ (800af68 <TlInit+0x4c>)
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 800af30:	480e      	ldr	r0, [pc, #56]	@ (800af6c <TlInit+0x50>)
 800af32:	f000 fce9 	bl	800b908 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800af36:	4b0e      	ldr	r3, [pc, #56]	@ (800af70 <TlInit+0x54>)
 800af38:	2201      	movs	r2, #1
 800af3a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 800af3c:	4b0d      	ldr	r3, [pc, #52]	@ (800af74 <TlInit+0x58>)
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	2b00      	cmp	r3, #0
 800af42:	d00a      	beq.n	800af5a <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 800af48:	4b0b      	ldr	r3, [pc, #44]	@ (800af78 <TlInit+0x5c>)
 800af4a:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 800af4c:	4b09      	ldr	r3, [pc, #36]	@ (800af74 <TlInit+0x58>)
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	f107 0208 	add.w	r2, r7, #8
 800af54:	4610      	mov	r0, r2
 800af56:	4798      	blx	r3
  }

  return;
 800af58:	bf00      	nop
 800af5a:	bf00      	nop
}
 800af5c:	3718      	adds	r7, #24
 800af5e:	46bd      	mov	sp, r7
 800af60:	bd80      	pop	{r7, pc}
 800af62:	bf00      	nop
 800af64:	20000458 	.word	0x20000458
 800af68:	200000a0 	.word	0x200000a0
 800af6c:	20000098 	.word	0x20000098
 800af70:	200000a4 	.word	0x200000a4
 800af74:	20000438 	.word	0x20000438
 800af78:	0800b009 	.word	0x0800b009

0800af7c <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 800af7c:	b580      	push	{r7, lr}
 800af7e:	b082      	sub	sp, #8
 800af80:	af00      	add	r7, sp, #0
 800af82:	4603      	mov	r3, r0
 800af84:	603a      	str	r2, [r7, #0]
 800af86:	80fb      	strh	r3, [r7, #6]
 800af88:	460b      	mov	r3, r1
 800af8a:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 800af8c:	4b0c      	ldr	r3, [pc, #48]	@ (800afc0 <SendCmd+0x44>)
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	88fa      	ldrh	r2, [r7, #6]
 800af92:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 800af96:	4b0a      	ldr	r3, [pc, #40]	@ (800afc0 <SendCmd+0x44>)
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	797a      	ldrb	r2, [r7, #5]
 800af9c:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 800af9e:	4b08      	ldr	r3, [pc, #32]	@ (800afc0 <SendCmd+0x44>)
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	330c      	adds	r3, #12
 800afa4:	797a      	ldrb	r2, [r7, #5]
 800afa6:	6839      	ldr	r1, [r7, #0]
 800afa8:	4618      	mov	r0, r3
 800afaa:	f003 fca6 	bl	800e8fa <memcpy>

  hciContext.io.Send(0,0);
 800afae:	4b05      	ldr	r3, [pc, #20]	@ (800afc4 <SendCmd+0x48>)
 800afb0:	691b      	ldr	r3, [r3, #16]
 800afb2:	2100      	movs	r1, #0
 800afb4:	2000      	movs	r0, #0
 800afb6:	4798      	blx	r3

  return;
 800afb8:	bf00      	nop
}
 800afba:	3708      	adds	r7, #8
 800afbc:	46bd      	mov	sp, r7
 800afbe:	bd80      	pop	{r7, pc}
 800afc0:	200000a0 	.word	0x200000a0
 800afc4:	20000438 	.word	0x20000438

0800afc8 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 800afc8:	b580      	push	{r7, lr}
 800afca:	b082      	sub	sp, #8
 800afcc:	af00      	add	r7, sp, #0
 800afce:	4603      	mov	r3, r0
 800afd0:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 800afd2:	79fb      	ldrb	r3, [r7, #7]
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d108      	bne.n	800afea <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 800afd8:	4b0a      	ldr	r3, [pc, #40]	@ (800b004 <NotifyCmdStatus+0x3c>)
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d00d      	beq.n	800affc <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 800afe0:	4b08      	ldr	r3, [pc, #32]	@ (800b004 <NotifyCmdStatus+0x3c>)
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	2000      	movs	r0, #0
 800afe6:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 800afe8:	e008      	b.n	800affc <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 800afea:	4b06      	ldr	r3, [pc, #24]	@ (800b004 <NotifyCmdStatus+0x3c>)
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d004      	beq.n	800affc <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 800aff2:	4b04      	ldr	r3, [pc, #16]	@ (800b004 <NotifyCmdStatus+0x3c>)
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	2001      	movs	r0, #1
 800aff8:	4798      	blx	r3
  return;
 800affa:	bf00      	nop
 800affc:	bf00      	nop
}
 800affe:	3708      	adds	r7, #8
 800b000:	46bd      	mov	sp, r7
 800b002:	bd80      	pop	{r7, pc}
 800b004:	20000460 	.word	0x20000460

0800b008 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 800b008:	b580      	push	{r7, lr}
 800b00a:	b082      	sub	sp, #8
 800b00c:	af00      	add	r7, sp, #0
 800b00e:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	7a5b      	ldrb	r3, [r3, #9]
 800b014:	2b0f      	cmp	r3, #15
 800b016:	d003      	beq.n	800b020 <TlEvtReceived+0x18>
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	7a5b      	ldrb	r3, [r3, #9]
 800b01c:	2b0e      	cmp	r3, #14
 800b01e:	d107      	bne.n	800b030 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 800b020:	6879      	ldr	r1, [r7, #4]
 800b022:	4809      	ldr	r0, [pc, #36]	@ (800b048 <TlEvtReceived+0x40>)
 800b024:	f000 fcc8 	bl	800b9b8 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 800b028:	2000      	movs	r0, #0
 800b02a:	f002 faff 	bl	800d62c <hci_cmd_resp_release>
 800b02e:	e006      	b.n	800b03e <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 800b030:	6879      	ldr	r1, [r7, #4]
 800b032:	4806      	ldr	r0, [pc, #24]	@ (800b04c <TlEvtReceived+0x44>)
 800b034:	f000 fcc0 	bl	800b9b8 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800b038:	4804      	ldr	r0, [pc, #16]	@ (800b04c <TlEvtReceived+0x44>)
 800b03a:	f002 faeb 	bl	800d614 <hci_notify_asynch_evt>
  }

  return;
 800b03e:	bf00      	nop
}
 800b040:	3708      	adds	r7, #8
 800b042:	46bd      	mov	sp, r7
 800b044:	bd80      	pop	{r7, pc}
 800b046:	bf00      	nop
 800b048:	20000458 	.word	0x20000458
 800b04c:	20000098 	.word	0x20000098

0800b050 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 800b050:	b480      	push	{r7}
 800b052:	b083      	sub	sp, #12
 800b054:	af00      	add	r7, sp, #0
 800b056:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	4a05      	ldr	r2, [pc, #20]	@ (800b070 <hci_register_io_bus+0x20>)
 800b05c:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	4a04      	ldr	r2, [pc, #16]	@ (800b074 <hci_register_io_bus+0x24>)
 800b062:	611a      	str	r2, [r3, #16]

  return;
 800b064:	bf00      	nop
}
 800b066:	370c      	adds	r7, #12
 800b068:	46bd      	mov	sp, r7
 800b06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b06e:	4770      	bx	lr
 800b070:	0800b369 	.word	0x0800b369
 800b074:	0800b3d1 	.word	0x0800b3d1

0800b078 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800b078:	b580      	push	{r7, lr}
 800b07a:	b082      	sub	sp, #8
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	6078      	str	r0, [r7, #4]
 800b080:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800b082:	683b      	ldr	r3, [r7, #0]
 800b084:	685b      	ldr	r3, [r3, #4]
 800b086:	4a08      	ldr	r2, [pc, #32]	@ (800b0a8 <shci_init+0x30>)
 800b088:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800b08a:	4a08      	ldr	r2, [pc, #32]	@ (800b0ac <shci_init+0x34>)
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800b090:	4806      	ldr	r0, [pc, #24]	@ (800b0ac <shci_init+0x34>)
 800b092:	f000 f915 	bl	800b2c0 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800b096:	683b      	ldr	r3, [r7, #0]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	4618      	mov	r0, r3
 800b09c:	f000 f898 	bl	800b1d0 <TlInit>

  return;
 800b0a0:	bf00      	nop
}
 800b0a2:	3708      	adds	r7, #8
 800b0a4:	46bd      	mov	sp, r7
 800b0a6:	bd80      	pop	{r7, pc}
 800b0a8:	20000488 	.word	0x20000488
 800b0ac:	20000468 	.word	0x20000468

0800b0b0 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800b0b0:	b580      	push	{r7, lr}
 800b0b2:	b084      	sub	sp, #16
 800b0b4:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800b0b6:	4822      	ldr	r0, [pc, #136]	@ (800b140 <shci_user_evt_proc+0x90>)
 800b0b8:	f000 fc36 	bl	800b928 <LST_is_empty>
 800b0bc:	4603      	mov	r3, r0
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d12b      	bne.n	800b11a <shci_user_evt_proc+0x6a>
 800b0c2:	4b20      	ldr	r3, [pc, #128]	@ (800b144 <shci_user_evt_proc+0x94>)
 800b0c4:	781b      	ldrb	r3, [r3, #0]
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d027      	beq.n	800b11a <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800b0ca:	f107 030c 	add.w	r3, r7, #12
 800b0ce:	4619      	mov	r1, r3
 800b0d0:	481b      	ldr	r0, [pc, #108]	@ (800b140 <shci_user_evt_proc+0x90>)
 800b0d2:	f000 fcb8 	bl	800ba46 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 800b0d6:	4b1c      	ldr	r3, [pc, #112]	@ (800b148 <shci_user_evt_proc+0x98>)
 800b0d8:	69db      	ldr	r3, [r3, #28]
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d00c      	beq.n	800b0f8 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800b0e2:	2301      	movs	r3, #1
 800b0e4:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800b0e6:	4b18      	ldr	r3, [pc, #96]	@ (800b148 <shci_user_evt_proc+0x98>)
 800b0e8:	69db      	ldr	r3, [r3, #28]
 800b0ea:	1d3a      	adds	r2, r7, #4
 800b0ec:	4610      	mov	r0, r2
 800b0ee:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800b0f0:	793a      	ldrb	r2, [r7, #4]
 800b0f2:	4b14      	ldr	r3, [pc, #80]	@ (800b144 <shci_user_evt_proc+0x94>)
 800b0f4:	701a      	strb	r2, [r3, #0]
 800b0f6:	e002      	b.n	800b0fe <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800b0f8:	4b12      	ldr	r3, [pc, #72]	@ (800b144 <shci_user_evt_proc+0x94>)
 800b0fa:	2201      	movs	r2, #1
 800b0fc:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800b0fe:	4b11      	ldr	r3, [pc, #68]	@ (800b144 <shci_user_evt_proc+0x94>)
 800b100:	781b      	ldrb	r3, [r3, #0]
 800b102:	2b00      	cmp	r3, #0
 800b104:	d004      	beq.n	800b110 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	4618      	mov	r0, r3
 800b10a:	f000 fa71 	bl	800b5f0 <TL_MM_EvtDone>
 800b10e:	e004      	b.n	800b11a <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	4619      	mov	r1, r3
 800b114:	480a      	ldr	r0, [pc, #40]	@ (800b140 <shci_user_evt_proc+0x90>)
 800b116:	f000 fc29 	bl	800b96c <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800b11a:	4809      	ldr	r0, [pc, #36]	@ (800b140 <shci_user_evt_proc+0x90>)
 800b11c:	f000 fc04 	bl	800b928 <LST_is_empty>
 800b120:	4603      	mov	r3, r0
 800b122:	2b00      	cmp	r3, #0
 800b124:	d107      	bne.n	800b136 <shci_user_evt_proc+0x86>
 800b126:	4b07      	ldr	r3, [pc, #28]	@ (800b144 <shci_user_evt_proc+0x94>)
 800b128:	781b      	ldrb	r3, [r3, #0]
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d003      	beq.n	800b136 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800b12e:	4804      	ldr	r0, [pc, #16]	@ (800b140 <shci_user_evt_proc+0x90>)
 800b130:	f7f6 f9f1 	bl	8001516 <shci_notify_asynch_evt>
  }


  return;
 800b134:	bf00      	nop
 800b136:	bf00      	nop
}
 800b138:	3710      	adds	r7, #16
 800b13a:	46bd      	mov	sp, r7
 800b13c:	bd80      	pop	{r7, pc}
 800b13e:	bf00      	nop
 800b140:	200000a8 	.word	0x200000a8
 800b144:	200000b8 	.word	0x200000b8
 800b148:	20000468 	.word	0x20000468

0800b14c <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800b14c:	b580      	push	{r7, lr}
 800b14e:	b084      	sub	sp, #16
 800b150:	af00      	add	r7, sp, #0
 800b152:	60ba      	str	r2, [r7, #8]
 800b154:	607b      	str	r3, [r7, #4]
 800b156:	4603      	mov	r3, r0
 800b158:	81fb      	strh	r3, [r7, #14]
 800b15a:	460b      	mov	r3, r1
 800b15c:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800b15e:	2000      	movs	r0, #0
 800b160:	f000 f868 	bl	800b234 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800b164:	4b17      	ldr	r3, [pc, #92]	@ (800b1c4 <shci_send+0x78>)
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	89fa      	ldrh	r2, [r7, #14]
 800b16a:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800b16e:	4b15      	ldr	r3, [pc, #84]	@ (800b1c4 <shci_send+0x78>)
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	7b7a      	ldrb	r2, [r7, #13]
 800b174:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800b176:	4b13      	ldr	r3, [pc, #76]	@ (800b1c4 <shci_send+0x78>)
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	330c      	adds	r3, #12
 800b17c:	7b7a      	ldrb	r2, [r7, #13]
 800b17e:	68b9      	ldr	r1, [r7, #8]
 800b180:	4618      	mov	r0, r3
 800b182:	f003 fbba 	bl	800e8fa <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 800b186:	4b10      	ldr	r3, [pc, #64]	@ (800b1c8 <shci_send+0x7c>)
 800b188:	2201      	movs	r2, #1
 800b18a:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 800b18c:	4b0f      	ldr	r3, [pc, #60]	@ (800b1cc <shci_send+0x80>)
 800b18e:	691b      	ldr	r3, [r3, #16]
 800b190:	2100      	movs	r1, #0
 800b192:	2000      	movs	r0, #0
 800b194:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800b196:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 800b19a:	f7f6 f9d3 	bl	8001544 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	f103 0008 	add.w	r0, r3, #8
 800b1a4:	4b07      	ldr	r3, [pc, #28]	@ (800b1c4 <shci_send+0x78>)
 800b1a6:	6819      	ldr	r1, [r3, #0]
 800b1a8:	4b06      	ldr	r3, [pc, #24]	@ (800b1c4 <shci_send+0x78>)
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	789b      	ldrb	r3, [r3, #2]
 800b1ae:	3303      	adds	r3, #3
 800b1b0:	461a      	mov	r2, r3
 800b1b2:	f003 fba2 	bl	800e8fa <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800b1b6:	2001      	movs	r0, #1
 800b1b8:	f000 f83c 	bl	800b234 <Cmd_SetStatus>

  return;
 800b1bc:	bf00      	nop
}
 800b1be:	3710      	adds	r7, #16
 800b1c0:	46bd      	mov	sp, r7
 800b1c2:	bd80      	pop	{r7, pc}
 800b1c4:	200000b4 	.word	0x200000b4
 800b1c8:	2000048c 	.word	0x2000048c
 800b1cc:	20000468 	.word	0x20000468

0800b1d0 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800b1d0:	b580      	push	{r7, lr}
 800b1d2:	b086      	sub	sp, #24
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800b1d8:	4a10      	ldr	r2, [pc, #64]	@ (800b21c <TlInit+0x4c>)
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800b1de:	4810      	ldr	r0, [pc, #64]	@ (800b220 <TlInit+0x50>)
 800b1e0:	f000 fb92 	bl	800b908 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800b1e4:	2001      	movs	r0, #1
 800b1e6:	f000 f825 	bl	800b234 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800b1ea:	4b0e      	ldr	r3, [pc, #56]	@ (800b224 <TlInit+0x54>)
 800b1ec:	2201      	movs	r2, #1
 800b1ee:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800b1f0:	4b0d      	ldr	r3, [pc, #52]	@ (800b228 <TlInit+0x58>)
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d00c      	beq.n	800b212 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800b1fc:	4b0b      	ldr	r3, [pc, #44]	@ (800b22c <TlInit+0x5c>)
 800b1fe:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800b200:	4b0b      	ldr	r3, [pc, #44]	@ (800b230 <TlInit+0x60>)
 800b202:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800b204:	4b08      	ldr	r3, [pc, #32]	@ (800b228 <TlInit+0x58>)
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	f107 020c 	add.w	r2, r7, #12
 800b20c:	4610      	mov	r0, r2
 800b20e:	4798      	blx	r3
  }

  return;
 800b210:	bf00      	nop
 800b212:	bf00      	nop
}
 800b214:	3718      	adds	r7, #24
 800b216:	46bd      	mov	sp, r7
 800b218:	bd80      	pop	{r7, pc}
 800b21a:	bf00      	nop
 800b21c:	200000b4 	.word	0x200000b4
 800b220:	200000a8 	.word	0x200000a8
 800b224:	200000b8 	.word	0x200000b8
 800b228:	20000468 	.word	0x20000468
 800b22c:	0800b285 	.word	0x0800b285
 800b230:	0800b29d 	.word	0x0800b29d

0800b234 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800b234:	b580      	push	{r7, lr}
 800b236:	b082      	sub	sp, #8
 800b238:	af00      	add	r7, sp, #0
 800b23a:	4603      	mov	r3, r0
 800b23c:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800b23e:	79fb      	ldrb	r3, [r7, #7]
 800b240:	2b00      	cmp	r3, #0
 800b242:	d10b      	bne.n	800b25c <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800b244:	4b0d      	ldr	r3, [pc, #52]	@ (800b27c <Cmd_SetStatus+0x48>)
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d003      	beq.n	800b254 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800b24c:	4b0b      	ldr	r3, [pc, #44]	@ (800b27c <Cmd_SetStatus+0x48>)
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	2000      	movs	r0, #0
 800b252:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800b254:	4b0a      	ldr	r3, [pc, #40]	@ (800b280 <Cmd_SetStatus+0x4c>)
 800b256:	2200      	movs	r2, #0
 800b258:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800b25a:	e00b      	b.n	800b274 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800b25c:	4b08      	ldr	r3, [pc, #32]	@ (800b280 <Cmd_SetStatus+0x4c>)
 800b25e:	2201      	movs	r2, #1
 800b260:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800b262:	4b06      	ldr	r3, [pc, #24]	@ (800b27c <Cmd_SetStatus+0x48>)
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	2b00      	cmp	r3, #0
 800b268:	d004      	beq.n	800b274 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800b26a:	4b04      	ldr	r3, [pc, #16]	@ (800b27c <Cmd_SetStatus+0x48>)
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	2001      	movs	r0, #1
 800b270:	4798      	blx	r3
  return;
 800b272:	bf00      	nop
 800b274:	bf00      	nop
}
 800b276:	3708      	adds	r7, #8
 800b278:	46bd      	mov	sp, r7
 800b27a:	bd80      	pop	{r7, pc}
 800b27c:	20000488 	.word	0x20000488
 800b280:	200000b0 	.word	0x200000b0

0800b284 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800b284:	b580      	push	{r7, lr}
 800b286:	b082      	sub	sp, #8
 800b288:	af00      	add	r7, sp, #0
 800b28a:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800b28c:	2000      	movs	r0, #0
 800b28e:	f7f6 f94e 	bl	800152e <shci_cmd_resp_release>

  return;
 800b292:	bf00      	nop
}
 800b294:	3708      	adds	r7, #8
 800b296:	46bd      	mov	sp, r7
 800b298:	bd80      	pop	{r7, pc}
	...

0800b29c <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800b29c:	b580      	push	{r7, lr}
 800b29e:	b082      	sub	sp, #8
 800b2a0:	af00      	add	r7, sp, #0
 800b2a2:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800b2a4:	6879      	ldr	r1, [r7, #4]
 800b2a6:	4805      	ldr	r0, [pc, #20]	@ (800b2bc <TlUserEvtReceived+0x20>)
 800b2a8:	f000 fb86 	bl	800b9b8 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800b2ac:	4803      	ldr	r0, [pc, #12]	@ (800b2bc <TlUserEvtReceived+0x20>)
 800b2ae:	f7f6 f932 	bl	8001516 <shci_notify_asynch_evt>

  return;
 800b2b2:	bf00      	nop
}
 800b2b4:	3708      	adds	r7, #8
 800b2b6:	46bd      	mov	sp, r7
 800b2b8:	bd80      	pop	{r7, pc}
 800b2ba:	bf00      	nop
 800b2bc:	200000a8 	.word	0x200000a8

0800b2c0 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800b2c0:	b480      	push	{r7}
 800b2c2:	b083      	sub	sp, #12
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	4a05      	ldr	r2, [pc, #20]	@ (800b2e0 <shci_register_io_bus+0x20>)
 800b2cc:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	4a04      	ldr	r2, [pc, #16]	@ (800b2e4 <shci_register_io_bus+0x24>)
 800b2d2:	611a      	str	r2, [r3, #16]

  return;
 800b2d4:	bf00      	nop
}
 800b2d6:	370c      	adds	r7, #12
 800b2d8:	46bd      	mov	sp, r7
 800b2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2de:	4770      	bx	lr
 800b2e0:	0800b47d 	.word	0x0800b47d
 800b2e4:	0800b4d1 	.word	0x0800b4d1

0800b2e8 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 800b2e8:	b580      	push	{r7, lr}
 800b2ea:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800b2ec:	f002 fd30 	bl	800dd50 <HW_IPCC_Enable>

  return;
 800b2f0:	bf00      	nop
}
 800b2f2:	bd80      	pop	{r7, pc}

0800b2f4 <TL_Init>:


void TL_Init( void )
{
 800b2f4:	b580      	push	{r7, lr}
 800b2f6:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800b2f8:	4b10      	ldr	r3, [pc, #64]	@ (800b33c <TL_Init+0x48>)
 800b2fa:	4a11      	ldr	r2, [pc, #68]	@ (800b340 <TL_Init+0x4c>)
 800b2fc:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800b2fe:	4b0f      	ldr	r3, [pc, #60]	@ (800b33c <TL_Init+0x48>)
 800b300:	4a10      	ldr	r2, [pc, #64]	@ (800b344 <TL_Init+0x50>)
 800b302:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800b304:	4b0d      	ldr	r3, [pc, #52]	@ (800b33c <TL_Init+0x48>)
 800b306:	4a10      	ldr	r2, [pc, #64]	@ (800b348 <TL_Init+0x54>)
 800b308:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800b30a:	4b0c      	ldr	r3, [pc, #48]	@ (800b33c <TL_Init+0x48>)
 800b30c:	4a0f      	ldr	r2, [pc, #60]	@ (800b34c <TL_Init+0x58>)
 800b30e:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 800b310:	4b0a      	ldr	r3, [pc, #40]	@ (800b33c <TL_Init+0x48>)
 800b312:	4a0f      	ldr	r2, [pc, #60]	@ (800b350 <TL_Init+0x5c>)
 800b314:	625a      	str	r2, [r3, #36]	@ 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800b316:	4b09      	ldr	r3, [pc, #36]	@ (800b33c <TL_Init+0x48>)
 800b318:	4a0e      	ldr	r2, [pc, #56]	@ (800b354 <TL_Init+0x60>)
 800b31a:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800b31c:	4b07      	ldr	r3, [pc, #28]	@ (800b33c <TL_Init+0x48>)
 800b31e:	4a0e      	ldr	r2, [pc, #56]	@ (800b358 <TL_Init+0x64>)
 800b320:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800b322:	4b06      	ldr	r3, [pc, #24]	@ (800b33c <TL_Init+0x48>)
 800b324:	4a0d      	ldr	r2, [pc, #52]	@ (800b35c <TL_Init+0x68>)
 800b326:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800b328:	4b04      	ldr	r3, [pc, #16]	@ (800b33c <TL_Init+0x48>)
 800b32a:	4a0d      	ldr	r2, [pc, #52]	@ (800b360 <TL_Init+0x6c>)
 800b32c:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800b32e:	4b03      	ldr	r3, [pc, #12]	@ (800b33c <TL_Init+0x48>)
 800b330:	4a0c      	ldr	r2, [pc, #48]	@ (800b364 <TL_Init+0x70>)
 800b332:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800b334:	f002 fd20 	bl	800dd78 <HW_IPCC_Init>

  return;
 800b338:	bf00      	nop
}
 800b33a:	bd80      	pop	{r7, pc}
 800b33c:	20030000 	.word	0x20030000
 800b340:	20030028 	.word	0x20030028
 800b344:	20030048 	.word	0x20030048
 800b348:	20030058 	.word	0x20030058
 800b34c:	20030068 	.word	0x20030068
 800b350:	20030070 	.word	0x20030070
 800b354:	20030078 	.word	0x20030078
 800b358:	20030080 	.word	0x20030080
 800b35c:	2003009c 	.word	0x2003009c
 800b360:	200300a0 	.word	0x200300a0
 800b364:	200300ac 	.word	0x200300ac

0800b368 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 800b368:	b580      	push	{r7, lr}
 800b36a:	b084      	sub	sp, #16
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 800b374:	4811      	ldr	r0, [pc, #68]	@ (800b3bc <TL_BLE_Init+0x54>)
 800b376:	f000 fac7 	bl	800b908 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800b37a:	4b11      	ldr	r3, [pc, #68]	@ (800b3c0 <TL_BLE_Init+0x58>)
 800b37c:	685b      	ldr	r3, [r3, #4]
 800b37e:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	689a      	ldr	r2, [r3, #8]
 800b384:	68bb      	ldr	r3, [r7, #8]
 800b386:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	68da      	ldr	r2, [r3, #12]
 800b38c:	68bb      	ldr	r3, [r7, #8]
 800b38e:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800b390:	68bb      	ldr	r3, [r7, #8]
 800b392:	4a0c      	ldr	r2, [pc, #48]	@ (800b3c4 <TL_BLE_Init+0x5c>)
 800b394:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800b396:	68bb      	ldr	r3, [r7, #8]
 800b398:	4a08      	ldr	r2, [pc, #32]	@ (800b3bc <TL_BLE_Init+0x54>)
 800b39a:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 800b39c:	f002 fd02 	bl	800dda4 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	4a08      	ldr	r2, [pc, #32]	@ (800b3c8 <TL_BLE_Init+0x60>)
 800b3a6:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	685b      	ldr	r3, [r3, #4]
 800b3ac:	4a07      	ldr	r2, [pc, #28]	@ (800b3cc <TL_BLE_Init+0x64>)
 800b3ae:	6013      	str	r3, [r2, #0]

  return 0;
 800b3b0:	2300      	movs	r3, #0
}
 800b3b2:	4618      	mov	r0, r3
 800b3b4:	3710      	adds	r7, #16
 800b3b6:	46bd      	mov	sp, r7
 800b3b8:	bd80      	pop	{r7, pc}
 800b3ba:	bf00      	nop
 800b3bc:	200300c8 	.word	0x200300c8
 800b3c0:	20030000 	.word	0x20030000
 800b3c4:	20030d7c 	.word	0x20030d7c
 800b3c8:	20000498 	.word	0x20000498
 800b3cc:	2000049c 	.word	0x2000049c

0800b3d0 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 800b3d0:	b580      	push	{r7, lr}
 800b3d2:	b082      	sub	sp, #8
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	6078      	str	r0, [r7, #4]
 800b3d8:	460b      	mov	r3, r1
 800b3da:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800b3dc:	4b09      	ldr	r3, [pc, #36]	@ (800b404 <TL_BLE_SendCmd+0x34>)
 800b3de:	685b      	ldr	r3, [r3, #4]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	2201      	movs	r2, #1
 800b3e4:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 800b3e6:	4b07      	ldr	r3, [pc, #28]	@ (800b404 <TL_BLE_SendCmd+0x34>)
 800b3e8:	685b      	ldr	r3, [r3, #4]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	4619      	mov	r1, r3
 800b3ee:	2001      	movs	r0, #1
 800b3f0:	f000 f96c 	bl	800b6cc <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 800b3f4:	f002 fce0 	bl	800ddb8 <HW_IPCC_BLE_SendCmd>

  return 0;
 800b3f8:	2300      	movs	r3, #0
}
 800b3fa:	4618      	mov	r0, r3
 800b3fc:	3708      	adds	r7, #8
 800b3fe:	46bd      	mov	sp, r7
 800b400:	bd80      	pop	{r7, pc}
 800b402:	bf00      	nop
 800b404:	20030000 	.word	0x20030000

0800b408 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 800b408:	b580      	push	{r7, lr}
 800b40a:	b082      	sub	sp, #8
 800b40c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800b40e:	e01c      	b.n	800b44a <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800b410:	1d3b      	adds	r3, r7, #4
 800b412:	4619      	mov	r1, r3
 800b414:	4812      	ldr	r0, [pc, #72]	@ (800b460 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800b416:	f000 fb16 	bl	800ba46 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	7a5b      	ldrb	r3, [r3, #9]
 800b41e:	2b0f      	cmp	r3, #15
 800b420:	d003      	beq.n	800b42a <HW_IPCC_BLE_RxEvtNot+0x22>
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	7a5b      	ldrb	r3, [r3, #9]
 800b426:	2b0e      	cmp	r3, #14
 800b428:	d105      	bne.n	800b436 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	4619      	mov	r1, r3
 800b42e:	2002      	movs	r0, #2
 800b430:	f000 f94c 	bl	800b6cc <OutputDbgTrace>
 800b434:	e004      	b.n	800b440 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	4619      	mov	r1, r3
 800b43a:	2003      	movs	r0, #3
 800b43c:	f000 f946 	bl	800b6cc <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 800b440:	4b08      	ldr	r3, [pc, #32]	@ (800b464 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	687a      	ldr	r2, [r7, #4]
 800b446:	4610      	mov	r0, r2
 800b448:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800b44a:	4805      	ldr	r0, [pc, #20]	@ (800b460 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800b44c:	f000 fa6c 	bl	800b928 <LST_is_empty>
 800b450:	4603      	mov	r3, r0
 800b452:	2b00      	cmp	r3, #0
 800b454:	d0dc      	beq.n	800b410 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800b456:	bf00      	nop
}
 800b458:	3708      	adds	r7, #8
 800b45a:	46bd      	mov	sp, r7
 800b45c:	bd80      	pop	{r7, pc}
 800b45e:	bf00      	nop
 800b460:	200300c8 	.word	0x200300c8
 800b464:	20000498 	.word	0x20000498

0800b468 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800b468:	b580      	push	{r7, lr}
 800b46a:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800b46c:	4b02      	ldr	r3, [pc, #8]	@ (800b478 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	4798      	blx	r3

  return;
 800b472:	bf00      	nop
}
 800b474:	bd80      	pop	{r7, pc}
 800b476:	bf00      	nop
 800b478:	2000049c 	.word	0x2000049c

0800b47c <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800b47c:	b580      	push	{r7, lr}
 800b47e:	b084      	sub	sp, #16
 800b480:	af00      	add	r7, sp, #0
 800b482:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800b488:	480d      	ldr	r0, [pc, #52]	@ (800b4c0 <TL_SYS_Init+0x44>)
 800b48a:	f000 fa3d 	bl	800b908 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800b48e:	4b0d      	ldr	r3, [pc, #52]	@ (800b4c4 <TL_SYS_Init+0x48>)
 800b490:	68db      	ldr	r3, [r3, #12]
 800b492:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	689a      	ldr	r2, [r3, #8]
 800b498:	68bb      	ldr	r3, [r7, #8]
 800b49a:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800b49c:	68bb      	ldr	r3, [r7, #8]
 800b49e:	4a08      	ldr	r2, [pc, #32]	@ (800b4c0 <TL_SYS_Init+0x44>)
 800b4a0:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800b4a2:	f002 fcab 	bl	800ddfc <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	4a07      	ldr	r2, [pc, #28]	@ (800b4c8 <TL_SYS_Init+0x4c>)
 800b4ac:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	685b      	ldr	r3, [r3, #4]
 800b4b2:	4a06      	ldr	r2, [pc, #24]	@ (800b4cc <TL_SYS_Init+0x50>)
 800b4b4:	6013      	str	r3, [r2, #0]

  return 0;
 800b4b6:	2300      	movs	r3, #0
}
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	3710      	adds	r7, #16
 800b4bc:	46bd      	mov	sp, r7
 800b4be:	bd80      	pop	{r7, pc}
 800b4c0:	200300d0 	.word	0x200300d0
 800b4c4:	20030000 	.word	0x20030000
 800b4c8:	200004a0 	.word	0x200004a0
 800b4cc:	200004a4 	.word	0x200004a4

0800b4d0 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800b4d0:	b580      	push	{r7, lr}
 800b4d2:	b082      	sub	sp, #8
 800b4d4:	af00      	add	r7, sp, #0
 800b4d6:	6078      	str	r0, [r7, #4]
 800b4d8:	460b      	mov	r3, r1
 800b4da:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800b4dc:	4b09      	ldr	r3, [pc, #36]	@ (800b504 <TL_SYS_SendCmd+0x34>)
 800b4de:	68db      	ldr	r3, [r3, #12]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	2210      	movs	r2, #16
 800b4e4:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800b4e6:	4b07      	ldr	r3, [pc, #28]	@ (800b504 <TL_SYS_SendCmd+0x34>)
 800b4e8:	68db      	ldr	r3, [r3, #12]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	4619      	mov	r1, r3
 800b4ee:	2004      	movs	r0, #4
 800b4f0:	f000 f8ec 	bl	800b6cc <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 800b4f4:	f002 fc8c 	bl	800de10 <HW_IPCC_SYS_SendCmd>

  return 0;
 800b4f8:	2300      	movs	r3, #0
}
 800b4fa:	4618      	mov	r0, r3
 800b4fc:	3708      	adds	r7, #8
 800b4fe:	46bd      	mov	sp, r7
 800b500:	bd80      	pop	{r7, pc}
 800b502:	bf00      	nop
 800b504:	20030000 	.word	0x20030000

0800b508 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800b508:	b580      	push	{r7, lr}
 800b50a:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800b50c:	4b07      	ldr	r3, [pc, #28]	@ (800b52c <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800b50e:	68db      	ldr	r3, [r3, #12]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	4619      	mov	r1, r3
 800b514:	2005      	movs	r0, #5
 800b516:	f000 f8d9 	bl	800b6cc <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800b51a:	4b05      	ldr	r3, [pc, #20]	@ (800b530 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	4a03      	ldr	r2, [pc, #12]	@ (800b52c <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800b520:	68d2      	ldr	r2, [r2, #12]
 800b522:	6812      	ldr	r2, [r2, #0]
 800b524:	4610      	mov	r0, r2
 800b526:	4798      	blx	r3

  return;
 800b528:	bf00      	nop
}
 800b52a:	bd80      	pop	{r7, pc}
 800b52c:	20030000 	.word	0x20030000
 800b530:	200004a0 	.word	0x200004a0

0800b534 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800b534:	b580      	push	{r7, lr}
 800b536:	b082      	sub	sp, #8
 800b538:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800b53a:	e00e      	b.n	800b55a <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800b53c:	1d3b      	adds	r3, r7, #4
 800b53e:	4619      	mov	r1, r3
 800b540:	480b      	ldr	r0, [pc, #44]	@ (800b570 <HW_IPCC_SYS_EvtNot+0x3c>)
 800b542:	f000 fa80 	bl	800ba46 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	4619      	mov	r1, r3
 800b54a:	2006      	movs	r0, #6
 800b54c:	f000 f8be 	bl	800b6cc <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 800b550:	4b08      	ldr	r3, [pc, #32]	@ (800b574 <HW_IPCC_SYS_EvtNot+0x40>)
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	687a      	ldr	r2, [r7, #4]
 800b556:	4610      	mov	r0, r2
 800b558:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800b55a:	4805      	ldr	r0, [pc, #20]	@ (800b570 <HW_IPCC_SYS_EvtNot+0x3c>)
 800b55c:	f000 f9e4 	bl	800b928 <LST_is_empty>
 800b560:	4603      	mov	r3, r0
 800b562:	2b00      	cmp	r3, #0
 800b564:	d0ea      	beq.n	800b53c <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800b566:	bf00      	nop
}
 800b568:	3708      	adds	r7, #8
 800b56a:	46bd      	mov	sp, r7
 800b56c:	bd80      	pop	{r7, pc}
 800b56e:	bf00      	nop
 800b570:	200300d0 	.word	0x200300d0
 800b574:	200004a4 	.word	0x200004a4

0800b578 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800b578:	b580      	push	{r7, lr}
 800b57a:	b082      	sub	sp, #8
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800b580:	4817      	ldr	r0, [pc, #92]	@ (800b5e0 <TL_MM_Init+0x68>)
 800b582:	f000 f9c1 	bl	800b908 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800b586:	4817      	ldr	r0, [pc, #92]	@ (800b5e4 <TL_MM_Init+0x6c>)
 800b588:	f000 f9be 	bl	800b908 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800b58c:	4b16      	ldr	r3, [pc, #88]	@ (800b5e8 <TL_MM_Init+0x70>)
 800b58e:	691b      	ldr	r3, [r3, #16]
 800b590:	4a16      	ldr	r2, [pc, #88]	@ (800b5ec <TL_MM_Init+0x74>)
 800b592:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800b594:	4b15      	ldr	r3, [pc, #84]	@ (800b5ec <TL_MM_Init+0x74>)
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	687a      	ldr	r2, [r7, #4]
 800b59a:	6892      	ldr	r2, [r2, #8]
 800b59c:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800b59e:	4b13      	ldr	r3, [pc, #76]	@ (800b5ec <TL_MM_Init+0x74>)
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	687a      	ldr	r2, [r7, #4]
 800b5a4:	68d2      	ldr	r2, [r2, #12]
 800b5a6:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800b5a8:	4b10      	ldr	r3, [pc, #64]	@ (800b5ec <TL_MM_Init+0x74>)
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	4a0c      	ldr	r2, [pc, #48]	@ (800b5e0 <TL_MM_Init+0x68>)
 800b5ae:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800b5b0:	4b0e      	ldr	r3, [pc, #56]	@ (800b5ec <TL_MM_Init+0x74>)
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	687a      	ldr	r2, [r7, #4]
 800b5b6:	6812      	ldr	r2, [r2, #0]
 800b5b8:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800b5ba:	4b0c      	ldr	r3, [pc, #48]	@ (800b5ec <TL_MM_Init+0x74>)
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	687a      	ldr	r2, [r7, #4]
 800b5c0:	6852      	ldr	r2, [r2, #4]
 800b5c2:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800b5c4:	4b09      	ldr	r3, [pc, #36]	@ (800b5ec <TL_MM_Init+0x74>)
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	687a      	ldr	r2, [r7, #4]
 800b5ca:	6912      	ldr	r2, [r2, #16]
 800b5cc:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800b5ce:	4b07      	ldr	r3, [pc, #28]	@ (800b5ec <TL_MM_Init+0x74>)
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	687a      	ldr	r2, [r7, #4]
 800b5d4:	6952      	ldr	r2, [r2, #20]
 800b5d6:	619a      	str	r2, [r3, #24]

  return;
 800b5d8:	bf00      	nop
}
 800b5da:	3708      	adds	r7, #8
 800b5dc:	46bd      	mov	sp, r7
 800b5de:	bd80      	pop	{r7, pc}
 800b5e0:	200300b8 	.word	0x200300b8
 800b5e4:	20000490 	.word	0x20000490
 800b5e8:	20030000 	.word	0x20030000
 800b5ec:	200004a8 	.word	0x200004a8

0800b5f0 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800b5f0:	b580      	push	{r7, lr}
 800b5f2:	b082      	sub	sp, #8
 800b5f4:	af00      	add	r7, sp, #0
 800b5f6:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800b5f8:	6879      	ldr	r1, [r7, #4]
 800b5fa:	4807      	ldr	r0, [pc, #28]	@ (800b618 <TL_MM_EvtDone+0x28>)
 800b5fc:	f000 f9dc 	bl	800b9b8 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800b600:	6879      	ldr	r1, [r7, #4]
 800b602:	2000      	movs	r0, #0
 800b604:	f000 f862 	bl	800b6cc <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800b608:	4804      	ldr	r0, [pc, #16]	@ (800b61c <TL_MM_EvtDone+0x2c>)
 800b60a:	f002 fc27 	bl	800de5c <HW_IPCC_MM_SendFreeBuf>

  return;
 800b60e:	bf00      	nop
}
 800b610:	3708      	adds	r7, #8
 800b612:	46bd      	mov	sp, r7
 800b614:	bd80      	pop	{r7, pc}
 800b616:	bf00      	nop
 800b618:	20000490 	.word	0x20000490
 800b61c:	0800b621 	.word	0x0800b621

0800b620 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800b620:	b580      	push	{r7, lr}
 800b622:	b082      	sub	sp, #8
 800b624:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800b626:	e00c      	b.n	800b642 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800b628:	1d3b      	adds	r3, r7, #4
 800b62a:	4619      	mov	r1, r3
 800b62c:	480a      	ldr	r0, [pc, #40]	@ (800b658 <SendFreeBuf+0x38>)
 800b62e:	f000 fa0a 	bl	800ba46 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800b632:	4b0a      	ldr	r3, [pc, #40]	@ (800b65c <SendFreeBuf+0x3c>)
 800b634:	691b      	ldr	r3, [r3, #16]
 800b636:	691b      	ldr	r3, [r3, #16]
 800b638:	687a      	ldr	r2, [r7, #4]
 800b63a:	4611      	mov	r1, r2
 800b63c:	4618      	mov	r0, r3
 800b63e:	f000 f9bb 	bl	800b9b8 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800b642:	4805      	ldr	r0, [pc, #20]	@ (800b658 <SendFreeBuf+0x38>)
 800b644:	f000 f970 	bl	800b928 <LST_is_empty>
 800b648:	4603      	mov	r3, r0
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d0ec      	beq.n	800b628 <SendFreeBuf+0x8>
  }

  return;
 800b64e:	bf00      	nop
}
 800b650:	3708      	adds	r7, #8
 800b652:	46bd      	mov	sp, r7
 800b654:	bd80      	pop	{r7, pc}
 800b656:	bf00      	nop
 800b658:	20000490 	.word	0x20000490
 800b65c:	20030000 	.word	0x20030000

0800b660 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800b660:	b580      	push	{r7, lr}
 800b662:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800b664:	4805      	ldr	r0, [pc, #20]	@ (800b67c <TL_TRACES_Init+0x1c>)
 800b666:	f000 f94f 	bl	800b908 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800b66a:	4b05      	ldr	r3, [pc, #20]	@ (800b680 <TL_TRACES_Init+0x20>)
 800b66c:	695b      	ldr	r3, [r3, #20]
 800b66e:	4a03      	ldr	r2, [pc, #12]	@ (800b67c <TL_TRACES_Init+0x1c>)
 800b670:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800b672:	f002 fc29 	bl	800dec8 <HW_IPCC_TRACES_Init>

  return;
 800b676:	bf00      	nop
}
 800b678:	bd80      	pop	{r7, pc}
 800b67a:	bf00      	nop
 800b67c:	200300c0 	.word	0x200300c0
 800b680:	20030000 	.word	0x20030000

0800b684 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800b684:	b580      	push	{r7, lr}
 800b686:	b082      	sub	sp, #8
 800b688:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800b68a:	e008      	b.n	800b69e <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800b68c:	1d3b      	adds	r3, r7, #4
 800b68e:	4619      	mov	r1, r3
 800b690:	4808      	ldr	r0, [pc, #32]	@ (800b6b4 <HW_IPCC_TRACES_EvtNot+0x30>)
 800b692:	f000 f9d8 	bl	800ba46 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	4618      	mov	r0, r3
 800b69a:	f000 f80d 	bl	800b6b8 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800b69e:	4805      	ldr	r0, [pc, #20]	@ (800b6b4 <HW_IPCC_TRACES_EvtNot+0x30>)
 800b6a0:	f000 f942 	bl	800b928 <LST_is_empty>
 800b6a4:	4603      	mov	r3, r0
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d0f0      	beq.n	800b68c <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800b6aa:	bf00      	nop
}
 800b6ac:	3708      	adds	r7, #8
 800b6ae:	46bd      	mov	sp, r7
 800b6b0:	bd80      	pop	{r7, pc}
 800b6b2:	bf00      	nop
 800b6b4:	200300c0 	.word	0x200300c0

0800b6b8 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 800b6b8:	b480      	push	{r7}
 800b6ba:	b083      	sub	sp, #12
 800b6bc:	af00      	add	r7, sp, #0
 800b6be:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 800b6c0:	bf00      	nop
 800b6c2:	370c      	adds	r7, #12
 800b6c4:	46bd      	mov	sp, r7
 800b6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ca:	4770      	bx	lr

0800b6cc <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800b6cc:	b480      	push	{r7}
 800b6ce:	b085      	sub	sp, #20
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	4603      	mov	r3, r0
 800b6d4:	6039      	str	r1, [r7, #0]
 800b6d6:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 800b6d8:	79fb      	ldrb	r3, [r7, #7]
 800b6da:	2b06      	cmp	r3, #6
 800b6dc:	d845      	bhi.n	800b76a <OutputDbgTrace+0x9e>
 800b6de:	a201      	add	r2, pc, #4	@ (adr r2, 800b6e4 <OutputDbgTrace+0x18>)
 800b6e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6e4:	0800b701 	.word	0x0800b701
 800b6e8:	0800b725 	.word	0x0800b725
 800b6ec:	0800b72b 	.word	0x0800b72b
 800b6f0:	0800b73f 	.word	0x0800b73f
 800b6f4:	0800b74b 	.word	0x0800b74b
 800b6f8:	0800b751 	.word	0x0800b751
 800b6fc:	0800b75f 	.word	0x0800b75f
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800b700:	683b      	ldr	r3, [r7, #0]
 800b702:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	7a5b      	ldrb	r3, [r3, #9]
 800b708:	2bff      	cmp	r3, #255	@ 0xff
 800b70a:	d005      	beq.n	800b718 <OutputDbgTrace+0x4c>
 800b70c:	2bff      	cmp	r3, #255	@ 0xff
 800b70e:	dc05      	bgt.n	800b71c <OutputDbgTrace+0x50>
 800b710:	2b0e      	cmp	r3, #14
 800b712:	d005      	beq.n	800b720 <OutputDbgTrace+0x54>
 800b714:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800b716:	e001      	b.n	800b71c <OutputDbgTrace+0x50>
          break;
 800b718:	bf00      	nop
 800b71a:	e027      	b.n	800b76c <OutputDbgTrace+0xa0>
          break;
 800b71c:	bf00      	nop
 800b71e:	e025      	b.n	800b76c <OutputDbgTrace+0xa0>
          break;
 800b720:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800b722:	e023      	b.n	800b76c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800b724:	683b      	ldr	r3, [r7, #0]
 800b726:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800b728:	e020      	b.n	800b76c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800b72a:	683b      	ldr	r3, [r7, #0]
 800b72c:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	7a5b      	ldrb	r3, [r3, #9]
 800b732:	2b0e      	cmp	r3, #14
 800b734:	d001      	beq.n	800b73a <OutputDbgTrace+0x6e>
 800b736:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800b738:	e000      	b.n	800b73c <OutputDbgTrace+0x70>
          break;
 800b73a:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800b73c:	e016      	b.n	800b76c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800b73e:	683b      	ldr	r3, [r7, #0]
 800b740:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	7a5b      	ldrb	r3, [r3, #9]
 800b746:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800b748:	e010      	b.n	800b76c <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800b74a:	683b      	ldr	r3, [r7, #0]
 800b74c:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800b74e:	e00d      	b.n	800b76c <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800b750:	683b      	ldr	r3, [r7, #0]
 800b752:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	7a5b      	ldrb	r3, [r3, #9]
 800b758:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800b75a:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800b75c:	e006      	b.n	800b76c <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800b75e:	683b      	ldr	r3, [r7, #0]
 800b760:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	7a5b      	ldrb	r3, [r3, #9]
 800b766:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800b768:	e000      	b.n	800b76c <OutputDbgTrace+0xa0>

    default:
      break;
 800b76a:	bf00      	nop
  }

  return;
 800b76c:	bf00      	nop
}
 800b76e:	3714      	adds	r7, #20
 800b770:	46bd      	mov	sp, r7
 800b772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b776:	4770      	bx	lr

0800b778 <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 800b778:	b580      	push	{r7, lr}
 800b77a:	b086      	sub	sp, #24
 800b77c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b77e:	f3ef 8310 	mrs	r3, PRIMASK
 800b782:	60fb      	str	r3, [r7, #12]
  return(result);
 800b784:	68fb      	ldr	r3, [r7, #12]
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  uint8_t* buf;
  uint16_t bufSize;

  BACKUP_PRIMASK();
 800b786:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b788:	b672      	cpsid	i
}
 800b78a:	bf00      	nop

  DISABLE_IRQ();			/**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  CircularQueue_Remove(&MsgDbgTraceQueue,&bufSize);
 800b78c:	1cbb      	adds	r3, r7, #2
 800b78e:	4619      	mov	r1, r3
 800b790:	4812      	ldr	r0, [pc, #72]	@ (800b7dc <DbgTrace_TxCpltCallback+0x64>)
 800b792:	f000 fb9d 	bl	800bed0 <CircularQueue_Remove>

  /* Sense if new data to be sent */
  buf=CircularQueue_Sense(&MsgDbgTraceQueue,&bufSize);
 800b796:	1cbb      	adds	r3, r7, #2
 800b798:	4619      	mov	r1, r3
 800b79a:	4810      	ldr	r0, [pc, #64]	@ (800b7dc <DbgTrace_TxCpltCallback+0x64>)
 800b79c:	f000 fc87 	bl	800c0ae <CircularQueue_Sense>
 800b7a0:	6138      	str	r0, [r7, #16]


  if ( buf != NULL) 
 800b7a2:	693b      	ldr	r3, [r7, #16]
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d00c      	beq.n	800b7c2 <DbgTrace_TxCpltCallback+0x4a>
 800b7a8:	697b      	ldr	r3, [r7, #20]
 800b7aa:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b7ac:	68bb      	ldr	r3, [r7, #8]
 800b7ae:	f383 8810 	msr	PRIMASK, r3
}
 800b7b2:	bf00      	nop
  {
    RESTORE_PRIMASK();
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 800b7b4:	887b      	ldrh	r3, [r7, #2]
 800b7b6:	4a0a      	ldr	r2, [pc, #40]	@ (800b7e0 <DbgTrace_TxCpltCallback+0x68>)
 800b7b8:	4619      	mov	r1, r3
 800b7ba:	6938      	ldr	r0, [r7, #16]
 800b7bc:	f7f5 fbd8 	bl	8000f70 <DbgOutputTraces>

  DbgTracePeripheralReady = SET;

  RESTORE_PRIMASK();
#endif
}
 800b7c0:	e008      	b.n	800b7d4 <DbgTrace_TxCpltCallback+0x5c>
    DbgTracePeripheralReady = SET;
 800b7c2:	4b08      	ldr	r3, [pc, #32]	@ (800b7e4 <DbgTrace_TxCpltCallback+0x6c>)
 800b7c4:	2201      	movs	r2, #1
 800b7c6:	701a      	strb	r2, [r3, #0]
 800b7c8:	697b      	ldr	r3, [r7, #20]
 800b7ca:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	f383 8810 	msr	PRIMASK, r3
}
 800b7d2:	bf00      	nop
}
 800b7d4:	bf00      	nop
 800b7d6:	3718      	adds	r7, #24
 800b7d8:	46bd      	mov	sp, r7
 800b7da:	bd80      	pop	{r7, pc}
 800b7dc:	200004ac 	.word	0x200004ac
 800b7e0:	0800b779 	.word	0x0800b779
 800b7e4:	20000011 	.word	0x20000011

0800b7e8 <_write>:
 * @param	bufsize buffer size
 * @param	...: arguments to be formatted in format string
 * @retval none
 */
size_t _write(int handle, const unsigned char * buf, size_t bufSize)
{
 800b7e8:	b580      	push	{r7, lr}
 800b7ea:	b084      	sub	sp, #16
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	60f8      	str	r0, [r7, #12]
 800b7f0:	60b9      	str	r1, [r7, #8]
 800b7f2:	607a      	str	r2, [r7, #4]
  return ( DbgTraceWrite(handle, buf, bufSize) );
 800b7f4:	687a      	ldr	r2, [r7, #4]
 800b7f6:	68b9      	ldr	r1, [r7, #8]
 800b7f8:	68f8      	ldr	r0, [r7, #12]
 800b7fa:	f000 f805 	bl	800b808 <DbgTraceWrite>
 800b7fe:	4603      	mov	r3, r0
}
 800b800:	4618      	mov	r0, r3
 800b802:	3710      	adds	r7, #16
 800b804:	46bd      	mov	sp, r7
 800b806:	bd80      	pop	{r7, pc}

0800b808 <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 800b808:	b580      	push	{r7, lr}
 800b80a:	b08a      	sub	sp, #40	@ 0x28
 800b80c:	af00      	add	r7, sp, #0
 800b80e:	60f8      	str	r0, [r7, #12]
 800b810:	60b9      	str	r1, [r7, #8]
 800b812:	607a      	str	r2, [r7, #4]
  size_t chars_written = 0;
 800b814:	2300      	movs	r3, #0
 800b816:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b818:	f3ef 8310 	mrs	r3, PRIMASK
 800b81c:	61bb      	str	r3, [r7, #24]
  return(result);
 800b81e:	69bb      	ldr	r3, [r7, #24]
  uint8_t* buffer;

  BACKUP_PRIMASK();
 800b820:	623b      	str	r3, [r7, #32]

  /* Ignore flushes */
  if ( handle == -1 )
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b828:	d102      	bne.n	800b830 <DbgTraceWrite+0x28>
  {
    chars_written = ( size_t ) 0;
 800b82a:	2300      	movs	r3, #0
 800b82c:	627b      	str	r3, [r7, #36]	@ 0x24
 800b82e:	e037      	b.n	800b8a0 <DbgTraceWrite+0x98>
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	2b01      	cmp	r3, #1
 800b834:	d006      	beq.n	800b844 <DbgTraceWrite+0x3c>
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	2b02      	cmp	r3, #2
 800b83a:	d003      	beq.n	800b844 <DbgTraceWrite+0x3c>
  {
    chars_written = ( size_t ) - 1;
 800b83c:	f04f 33ff 	mov.w	r3, #4294967295
 800b840:	627b      	str	r3, [r7, #36]	@ 0x24
 800b842:	e02d      	b.n	800b8a0 <DbgTraceWrite+0x98>
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	2b00      	cmp	r3, #0
 800b848:	d02a      	beq.n	800b8a0 <DbgTraceWrite+0x98>
  {
    chars_written = bufSize;
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 800b84e:	b672      	cpsid	i
}
 800b850:	bf00      	nop
    /* If queue emepty and TX free, send directly */
    /* CS Start */

#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
    DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
    buffer=CircularQueue_Add(&MsgDbgTraceQueue,(uint8_t*)buf, bufSize,1);
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	b29a      	uxth	r2, r3
 800b856:	2301      	movs	r3, #1
 800b858:	68b9      	ldr	r1, [r7, #8]
 800b85a:	4814      	ldr	r0, [pc, #80]	@ (800b8ac <DbgTraceWrite+0xa4>)
 800b85c:	f000 f912 	bl	800ba84 <CircularQueue_Add>
 800b860:	61f8      	str	r0, [r7, #28]
    if (buffer && DbgTracePeripheralReady)
 800b862:	69fb      	ldr	r3, [r7, #28]
 800b864:	2b00      	cmp	r3, #0
 800b866:	d015      	beq.n	800b894 <DbgTraceWrite+0x8c>
 800b868:	4b11      	ldr	r3, [pc, #68]	@ (800b8b0 <DbgTraceWrite+0xa8>)
 800b86a:	781b      	ldrb	r3, [r3, #0]
 800b86c:	b2db      	uxtb	r3, r3
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d010      	beq.n	800b894 <DbgTraceWrite+0x8c>
    {
      DbgTracePeripheralReady = RESET;
 800b872:	4b0f      	ldr	r3, [pc, #60]	@ (800b8b0 <DbgTraceWrite+0xa8>)
 800b874:	2200      	movs	r2, #0
 800b876:	701a      	strb	r2, [r3, #0]
 800b878:	6a3b      	ldr	r3, [r7, #32]
 800b87a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b87c:	697b      	ldr	r3, [r7, #20]
 800b87e:	f383 8810 	msr	PRIMASK, r3
}
 800b882:	bf00      	nop
      RESTORE_PRIMASK();
      DbgOutputTraces((uint8_t*)buffer, bufSize, DbgTrace_TxCpltCallback);
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	b29b      	uxth	r3, r3
 800b888:	4a0a      	ldr	r2, [pc, #40]	@ (800b8b4 <DbgTraceWrite+0xac>)
 800b88a:	4619      	mov	r1, r3
 800b88c:	69f8      	ldr	r0, [r7, #28]
 800b88e:	f7f5 fb6f 	bl	8000f70 <DbgOutputTraces>
 800b892:	e005      	b.n	800b8a0 <DbgTraceWrite+0x98>
 800b894:	6a3b      	ldr	r3, [r7, #32]
 800b896:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b898:	693b      	ldr	r3, [r7, #16]
 800b89a:	f383 8810 	msr	PRIMASK, r3
}
 800b89e:	bf00      	nop
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
    while (!DbgTracePeripheralReady);
#endif
    /* CS END */
  }
  return ( chars_written );
 800b8a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b8a2:	4618      	mov	r0, r3
 800b8a4:	3728      	adds	r7, #40	@ 0x28
 800b8a6:	46bd      	mov	sp, r7
 800b8a8:	bd80      	pop	{r7, pc}
 800b8aa:	bf00      	nop
 800b8ac:	200004ac 	.word	0x200004ac
 800b8b0:	20000011 	.word	0x20000011
 800b8b4:	0800b779 	.word	0x0800b779

0800b8b8 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800b8b8:	b480      	push	{r7}
 800b8ba:	b085      	sub	sp, #20
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	4603      	mov	r3, r0
 800b8c0:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800b8c2:	4b0f      	ldr	r3, [pc, #60]	@ (800b900 <OTP_Read+0x48>)
 800b8c4:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800b8c6:	e002      	b.n	800b8ce <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	3b08      	subs	r3, #8
 800b8cc:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	3307      	adds	r3, #7
 800b8d2:	781b      	ldrb	r3, [r3, #0]
 800b8d4:	79fa      	ldrb	r2, [r7, #7]
 800b8d6:	429a      	cmp	r2, r3
 800b8d8:	d003      	beq.n	800b8e2 <OTP_Read+0x2a>
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	4a09      	ldr	r2, [pc, #36]	@ (800b904 <OTP_Read+0x4c>)
 800b8de:	4293      	cmp	r3, r2
 800b8e0:	d1f2      	bne.n	800b8c8 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	3307      	adds	r3, #7
 800b8e6:	781b      	ldrb	r3, [r3, #0]
 800b8e8:	79fa      	ldrb	r2, [r7, #7]
 800b8ea:	429a      	cmp	r2, r3
 800b8ec:	d001      	beq.n	800b8f2 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800b8ee:	2300      	movs	r3, #0
 800b8f0:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800b8f2:	68fb      	ldr	r3, [r7, #12]
}
 800b8f4:	4618      	mov	r0, r3
 800b8f6:	3714      	adds	r7, #20
 800b8f8:	46bd      	mov	sp, r7
 800b8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8fe:	4770      	bx	lr
 800b900:	1fff73f8 	.word	0x1fff73f8
 800b904:	1fff7000 	.word	0x1fff7000

0800b908 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800b908:	b480      	push	{r7}
 800b90a:	b083      	sub	sp, #12
 800b90c:	af00      	add	r7, sp, #0
 800b90e:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	687a      	ldr	r2, [r7, #4]
 800b914:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	687a      	ldr	r2, [r7, #4]
 800b91a:	605a      	str	r2, [r3, #4]
}
 800b91c:	bf00      	nop
 800b91e:	370c      	adds	r7, #12
 800b920:	46bd      	mov	sp, r7
 800b922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b926:	4770      	bx	lr

0800b928 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800b928:	b480      	push	{r7}
 800b92a:	b087      	sub	sp, #28
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b930:	f3ef 8310 	mrs	r3, PRIMASK
 800b934:	60fb      	str	r3, [r7, #12]
  return(result);
 800b936:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b938:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800b93a:	b672      	cpsid	i
}
 800b93c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	687a      	ldr	r2, [r7, #4]
 800b944:	429a      	cmp	r2, r3
 800b946:	d102      	bne.n	800b94e <LST_is_empty+0x26>
  {
    return_value = TRUE;
 800b948:	2301      	movs	r3, #1
 800b94a:	75fb      	strb	r3, [r7, #23]
 800b94c:	e001      	b.n	800b952 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 800b94e:	2300      	movs	r3, #0
 800b950:	75fb      	strb	r3, [r7, #23]
 800b952:	693b      	ldr	r3, [r7, #16]
 800b954:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b956:	68bb      	ldr	r3, [r7, #8]
 800b958:	f383 8810 	msr	PRIMASK, r3
}
 800b95c:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800b95e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b960:	4618      	mov	r0, r3
 800b962:	371c      	adds	r7, #28
 800b964:	46bd      	mov	sp, r7
 800b966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b96a:	4770      	bx	lr

0800b96c <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800b96c:	b480      	push	{r7}
 800b96e:	b087      	sub	sp, #28
 800b970:	af00      	add	r7, sp, #0
 800b972:	6078      	str	r0, [r7, #4]
 800b974:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b976:	f3ef 8310 	mrs	r3, PRIMASK
 800b97a:	60fb      	str	r3, [r7, #12]
  return(result);
 800b97c:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b97e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b980:	b672      	cpsid	i
}
 800b982:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	681a      	ldr	r2, [r3, #0]
 800b988:	683b      	ldr	r3, [r7, #0]
 800b98a:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800b98c:	683b      	ldr	r3, [r7, #0]
 800b98e:	687a      	ldr	r2, [r7, #4]
 800b990:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	683a      	ldr	r2, [r7, #0]
 800b996:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800b998:	683b      	ldr	r3, [r7, #0]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	683a      	ldr	r2, [r7, #0]
 800b99e:	605a      	str	r2, [r3, #4]
 800b9a0:	697b      	ldr	r3, [r7, #20]
 800b9a2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b9a4:	693b      	ldr	r3, [r7, #16]
 800b9a6:	f383 8810 	msr	PRIMASK, r3
}
 800b9aa:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800b9ac:	bf00      	nop
 800b9ae:	371c      	adds	r7, #28
 800b9b0:	46bd      	mov	sp, r7
 800b9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b6:	4770      	bx	lr

0800b9b8 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800b9b8:	b480      	push	{r7}
 800b9ba:	b087      	sub	sp, #28
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	6078      	str	r0, [r7, #4]
 800b9c0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b9c2:	f3ef 8310 	mrs	r3, PRIMASK
 800b9c6:	60fb      	str	r3, [r7, #12]
  return(result);
 800b9c8:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b9ca:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b9cc:	b672      	cpsid	i
}
 800b9ce:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800b9d0:	683b      	ldr	r3, [r7, #0]
 800b9d2:	687a      	ldr	r2, [r7, #4]
 800b9d4:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	685a      	ldr	r2, [r3, #4]
 800b9da:	683b      	ldr	r3, [r7, #0]
 800b9dc:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	683a      	ldr	r2, [r7, #0]
 800b9e2:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800b9e4:	683b      	ldr	r3, [r7, #0]
 800b9e6:	685b      	ldr	r3, [r3, #4]
 800b9e8:	683a      	ldr	r2, [r7, #0]
 800b9ea:	601a      	str	r2, [r3, #0]
 800b9ec:	697b      	ldr	r3, [r7, #20]
 800b9ee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b9f0:	693b      	ldr	r3, [r7, #16]
 800b9f2:	f383 8810 	msr	PRIMASK, r3
}
 800b9f6:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800b9f8:	bf00      	nop
 800b9fa:	371c      	adds	r7, #28
 800b9fc:	46bd      	mov	sp, r7
 800b9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba02:	4770      	bx	lr

0800ba04 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800ba04:	b480      	push	{r7}
 800ba06:	b087      	sub	sp, #28
 800ba08:	af00      	add	r7, sp, #0
 800ba0a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ba0c:	f3ef 8310 	mrs	r3, PRIMASK
 800ba10:	60fb      	str	r3, [r7, #12]
  return(result);
 800ba12:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800ba14:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ba16:	b672      	cpsid	i
}
 800ba18:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	685b      	ldr	r3, [r3, #4]
 800ba1e:	687a      	ldr	r2, [r7, #4]
 800ba20:	6812      	ldr	r2, [r2, #0]
 800ba22:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	687a      	ldr	r2, [r7, #4]
 800ba2a:	6852      	ldr	r2, [r2, #4]
 800ba2c:	605a      	str	r2, [r3, #4]
 800ba2e:	697b      	ldr	r3, [r7, #20]
 800ba30:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ba32:	693b      	ldr	r3, [r7, #16]
 800ba34:	f383 8810 	msr	PRIMASK, r3
}
 800ba38:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800ba3a:	bf00      	nop
 800ba3c:	371c      	adds	r7, #28
 800ba3e:	46bd      	mov	sp, r7
 800ba40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba44:	4770      	bx	lr

0800ba46 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800ba46:	b580      	push	{r7, lr}
 800ba48:	b086      	sub	sp, #24
 800ba4a:	af00      	add	r7, sp, #0
 800ba4c:	6078      	str	r0, [r7, #4]
 800ba4e:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ba50:	f3ef 8310 	mrs	r3, PRIMASK
 800ba54:	60fb      	str	r3, [r7, #12]
  return(result);
 800ba56:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800ba58:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ba5a:	b672      	cpsid	i
}
 800ba5c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	681a      	ldr	r2, [r3, #0]
 800ba62:	683b      	ldr	r3, [r7, #0]
 800ba64:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	f7ff ffca 	bl	800ba04 <LST_remove_node>
 800ba70:	697b      	ldr	r3, [r7, #20]
 800ba72:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ba74:	693b      	ldr	r3, [r7, #16]
 800ba76:	f383 8810 	msr	PRIMASK, r3
}
 800ba7a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800ba7c:	bf00      	nop
 800ba7e:	3718      	adds	r7, #24
 800ba80:	46bd      	mov	sp, r7
 800ba82:	bd80      	pop	{r7, pc}

0800ba84 <CircularQueue_Add>:
  * @param  elementSize:  Size of element to be added to the queue. Only used if the queue manage variable size elements
  * @param  nbElements:  number of elements in the in buffer pointed by x
  * @retval  pointer on last element just added to the queue, NULL if the element to be added do not fit in the queue (too big)
  */
uint8_t* CircularQueue_Add(queue_t *q, uint8_t* x, uint16_t elementSize, uint32_t nbElements)
{
 800ba84:	b580      	push	{r7, lr}
 800ba86:	b08e      	sub	sp, #56	@ 0x38
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	60f8      	str	r0, [r7, #12]
 800ba8c:	60b9      	str	r1, [r7, #8]
 800ba8e:	603b      	str	r3, [r7, #0]
 800ba90:	4613      	mov	r3, r2
 800ba92:	80fb      	strh	r3, [r7, #6]

  uint8_t* ptr = NULL;                      /* fct return ptr to the element freshly added, if no room fct return NULL */
 800ba94:	2300      	movs	r3, #0
 800ba96:	623b      	str	r3, [r7, #32]
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 800ba98:	2300      	movs	r3, #0
 800ba9a:	86fb      	strh	r3, [r7, #54]	@ 0x36
  uint8_t  elemSizeStorageRoom  = 0 ;       /* Indicate the header (which contain only size) of element in case of varaibale size element (q->elementsize == 0) */
 800ba9c:	2300      	movs	r3, #0
 800ba9e:	77fb      	strb	r3, [r7, #31]
  uint32_t curBuffPosition;                  /* the current position in the queue buffer */
  uint32_t i;                               /* loop counter */
  uint32_t NbBytesToCopy = 0, NbCopiedBytes = 0 ; /* Indicators for copying bytes in queue */
 800baa0:	2300      	movs	r3, #0
 800baa2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800baa4:	2300      	movs	r3, #0
 800baa6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t eob_free_size;                         /* Eof End of Quque Buffer Free Size */
  uint8_t  wrap_will_occur = 0;                   /* indicate if a wrap around will occurs */
 800baa8:	2300      	movs	r3, #0
 800baaa:	77bb      	strb	r3, [r7, #30]
  uint8_t  wrapped_element_eob_size;              /* In case of Wrap around, indicate size of parta of element that fit at thened of the queuue  buffer */
  uint16_t overhead = 0;                          /* In case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG or CIRCULAR_QUEUE_NO_WRAP_FLAG options, 
 800baac:	2300      	movs	r3, #0
 800baae:	83bb      	strh	r3, [r7, #28]
                                                     indcate the size overhead that will be generated by adding the element with wrap management (split or no wrap ) */ 
  
  
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	891b      	ldrh	r3, [r3, #8]
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d101      	bne.n	800babc <CircularQueue_Add+0x38>
 800bab8:	2302      	movs	r3, #2
 800baba:	e000      	b.n	800babe <CircularQueue_Add+0x3a>
 800babc:	2300      	movs	r3, #0
 800babe:	77fb      	strb	r3, [r7, #31]
  /* retrieve the size of last element sored: the value stored at the beginning of the queue element if element size is variable otherwise take it from fixed element Size member */
  if (q->byteCount)
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	695b      	ldr	r3, [r3, #20]
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d029      	beq.n	800bb1c <CircularQueue_Add+0x98>
  {
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	891b      	ldrh	r3, [r3, #8]
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d122      	bne.n	800bb16 <CircularQueue_Add+0x92>
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	681a      	ldr	r2, [r3, #0]
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	691b      	ldr	r3, [r3, #16]
 800bad8:	4413      	add	r3, r2
 800bada:	781b      	ldrb	r3, [r3, #0]
 800badc:	4618      	mov	r0, r3
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	681a      	ldr	r2, [r3, #0]
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	691b      	ldr	r3, [r3, #16]
 800bae6:	1c59      	adds	r1, r3, #1
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	685b      	ldr	r3, [r3, #4]
 800baec:	4299      	cmp	r1, r3
 800baee:	d306      	bcc.n	800bafe <CircularQueue_Add+0x7a>
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	6919      	ldr	r1, [r3, #16]
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	685b      	ldr	r3, [r3, #4]
 800baf8:	1acb      	subs	r3, r1, r3
 800bafa:	3301      	adds	r3, #1
 800bafc:	e002      	b.n	800bb04 <CircularQueue_Add+0x80>
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	691b      	ldr	r3, [r3, #16]
 800bb02:	3301      	adds	r3, #1
 800bb04:	4413      	add	r3, r2
 800bb06:	781b      	ldrb	r3, [r3, #0]
 800bb08:	021b      	lsls	r3, r3, #8
 800bb0a:	b29b      	uxth	r3, r3
 800bb0c:	4403      	add	r3, r0
 800bb0e:	b29b      	uxth	r3, r3
 800bb10:	3302      	adds	r3, #2
 800bb12:	b29b      	uxth	r3, r3
 800bb14:	e001      	b.n	800bb1a <CircularQueue_Add+0x96>
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	891b      	ldrh	r3, [r3, #8]
 800bb1a:	86fb      	strh	r3, [r7, #54]	@ 0x36
  }
  /* if queue element have fixed size , reset the elementSize arg with fixed element size value */
  if (q->elementSize > 0)               
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	891b      	ldrh	r3, [r3, #8]
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d002      	beq.n	800bb2a <CircularQueue_Add+0xa6>
  {
    elementSize = q->elementSize;
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	891b      	ldrh	r3, [r3, #8]
 800bb28:	80fb      	strh	r3, [r7, #6]
  }

   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	691a      	ldr	r2, [r3, #16]
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	68db      	ldr	r3, [r3, #12]
 800bb32:	429a      	cmp	r2, r3
 800bb34:	d307      	bcc.n	800bb46 <CircularQueue_Add+0xc2>
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	685a      	ldr	r2, [r3, #4]
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	6919      	ldr	r1, [r3, #16]
 800bb3e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800bb40:	440b      	add	r3, r1
 800bb42:	1ad3      	subs	r3, r2, r3
 800bb44:	e000      	b.n	800bb48 <CircularQueue_Add+0xc4>
 800bb46:	2300      	movs	r3, #0
 800bb48:	61bb      	str	r3, [r7, #24]

   /* check how many bytes of wrapped element (if anay) are at end of buffer */
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 800bb4a:	88fa      	ldrh	r2, [r7, #6]
 800bb4c:	7ffb      	ldrb	r3, [r7, #31]
 800bb4e:	4413      	add	r3, r2
 800bb50:	461a      	mov	r2, r3
 800bb52:	683b      	ldr	r3, [r7, #0]
 800bb54:	fb02 f303 	mul.w	r3, r2, r3
 800bb58:	69ba      	ldr	r2, [r7, #24]
 800bb5a:	429a      	cmp	r2, r3
 800bb5c:	d80b      	bhi.n	800bb76 <CircularQueue_Add+0xf2>
 800bb5e:	88fa      	ldrh	r2, [r7, #6]
 800bb60:	7ffb      	ldrb	r3, [r7, #31]
 800bb62:	4413      	add	r3, r2
 800bb64:	461a      	mov	r2, r3
 800bb66:	69bb      	ldr	r3, [r7, #24]
 800bb68:	fbb3 f1f2 	udiv	r1, r3, r2
 800bb6c:	fb01 f202 	mul.w	r2, r1, r2
 800bb70:	1a9b      	subs	r3, r3, r2
 800bb72:	b2db      	uxtb	r3, r3
 800bb74:	e000      	b.n	800bb78 <CircularQueue_Add+0xf4>
 800bb76:	2300      	movs	r3, #0
 800bb78:	75fb      	strb	r3, [r7, #23]
   wrap_will_occur  = wrapped_element_eob_size > elemSizeStorageRoom;
 800bb7a:	7dfa      	ldrb	r2, [r7, #23]
 800bb7c:	7ffb      	ldrb	r3, [r7, #31]
 800bb7e:	429a      	cmp	r2, r3
 800bb80:	bf8c      	ite	hi
 800bb82:	2301      	movhi	r3, #1
 800bb84:	2300      	movls	r3, #0
 800bb86:	b2db      	uxtb	r3, r3
 800bb88:	77bb      	strb	r3, [r7, #30]

   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 800bb8a:	7fbb      	ldrb	r3, [r7, #30]
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d008      	beq.n	800bba2 <CircularQueue_Add+0x11e>
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	7f1b      	ldrb	r3, [r3, #28]
 800bb94:	f003 0301 	and.w	r3, r3, #1
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d002      	beq.n	800bba2 <CircularQueue_Add+0x11e>
 800bb9c:	7dfb      	ldrb	r3, [r7, #23]
 800bb9e:	b29b      	uxth	r3, r3
 800bba0:	e000      	b.n	800bba4 <CircularQueue_Add+0x120>
 800bba2:	8bbb      	ldrh	r3, [r7, #28]
 800bba4:	83bb      	strh	r3, [r7, #28]
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ? elemSizeStorageRoom  : overhead;
 800bba6:	7fbb      	ldrb	r3, [r7, #30]
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d008      	beq.n	800bbbe <CircularQueue_Add+0x13a>
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	7f1b      	ldrb	r3, [r3, #28]
 800bbb0:	f003 0302 	and.w	r3, r3, #2
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d002      	beq.n	800bbbe <CircularQueue_Add+0x13a>
 800bbb8:	7ffb      	ldrb	r3, [r7, #31]
 800bbba:	b29b      	uxth	r3, r3
 800bbbc:	e000      	b.n	800bbc0 <CircularQueue_Add+0x13c>
 800bbbe:	8bbb      	ldrh	r3, [r7, #28]
 800bbc0:	83bb      	strh	r3, [r7, #28]
   
   
  /* Store now the elements if ennough room for all elements */
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 800bbc2:	88fb      	ldrh	r3, [r7, #6]
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	f000 817e 	beq.w	800bec6 <CircularQueue_Add+0x442>
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	695a      	ldr	r2, [r3, #20]
 800bbce:	88f9      	ldrh	r1, [r7, #6]
 800bbd0:	7ffb      	ldrb	r3, [r7, #31]
 800bbd2:	440b      	add	r3, r1
 800bbd4:	4619      	mov	r1, r3
 800bbd6:	683b      	ldr	r3, [r7, #0]
 800bbd8:	fb01 f303 	mul.w	r3, r1, r3
 800bbdc:	441a      	add	r2, r3
 800bbde:	8bbb      	ldrh	r3, [r7, #28]
 800bbe0:	441a      	add	r2, r3
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	685b      	ldr	r3, [r3, #4]
 800bbe6:	429a      	cmp	r2, r3
 800bbe8:	f200 816d 	bhi.w	800bec6 <CircularQueue_Add+0x442>
  { 
    /* loop to add all elements  */
    for (i=0; i < nbElements; i++) 
 800bbec:	2300      	movs	r3, #0
 800bbee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bbf0:	e14a      	b.n	800be88 <CircularQueue_Add+0x404>
    {
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	691a      	ldr	r2, [r3, #16]
 800bbf6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800bbf8:	441a      	add	r2, r3
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	685b      	ldr	r3, [r3, #4]
 800bbfe:	429a      	cmp	r2, r3
 800bc00:	d307      	bcc.n	800bc12 <CircularQueue_Add+0x18e>
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	691a      	ldr	r2, [r3, #16]
 800bc06:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800bc08:	441a      	add	r2, r3
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	685b      	ldr	r3, [r3, #4]
 800bc0e:	1ad3      	subs	r3, r2, r3
 800bc10:	e003      	b.n	800bc1a <CircularQueue_Add+0x196>
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	691a      	ldr	r2, [r3, #16]
 800bc16:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800bc18:	4413      	add	r3, r2
 800bc1a:	68fa      	ldr	r2, [r7, #12]
 800bc1c:	6113      	str	r3, [r2, #16]
      curBuffPosition = q->last;
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	691b      	ldr	r3, [r3, #16]
 800bc22:	633b      	str	r3, [r7, #48]	@ 0x30
      
      /* store the element  */
      /* store first the element size if element size is variable */
      if (q->elementSize == 0) 
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	891b      	ldrh	r3, [r3, #8]
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d130      	bne.n	800bc8e <CircularQueue_Add+0x20a>
      {
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	681a      	ldr	r2, [r3, #0]
 800bc30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc32:	1c59      	adds	r1, r3, #1
 800bc34:	6339      	str	r1, [r7, #48]	@ 0x30
 800bc36:	4413      	add	r3, r2
 800bc38:	88fa      	ldrh	r2, [r7, #6]
 800bc3a:	b2d2      	uxtb	r2, r2
 800bc3c:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	685b      	ldr	r3, [r3, #4]
 800bc42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bc44:	429a      	cmp	r2, r3
 800bc46:	d304      	bcc.n	800bc52 <CircularQueue_Add+0x1ce>
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	685b      	ldr	r3, [r3, #4]
 800bc4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bc4e:	1ad3      	subs	r3, r2, r3
 800bc50:	e000      	b.n	800bc54 <CircularQueue_Add+0x1d0>
 800bc52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc54:	633b      	str	r3, [r7, #48]	@ 0x30
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 800bc56:	88fb      	ldrh	r3, [r7, #6]
 800bc58:	0a1b      	lsrs	r3, r3, #8
 800bc5a:	b298      	uxth	r0, r3
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	681a      	ldr	r2, [r3, #0]
 800bc60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc62:	1c59      	adds	r1, r3, #1
 800bc64:	6339      	str	r1, [r7, #48]	@ 0x30
 800bc66:	4413      	add	r3, r2
 800bc68:	b2c2      	uxtb	r2, r0
 800bc6a:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	685b      	ldr	r3, [r3, #4]
 800bc70:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bc72:	429a      	cmp	r2, r3
 800bc74:	d304      	bcc.n	800bc80 <CircularQueue_Add+0x1fc>
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	685b      	ldr	r3, [r3, #4]
 800bc7a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bc7c:	1ad3      	subs	r3, r2, r3
 800bc7e:	e000      	b.n	800bc82 <CircularQueue_Add+0x1fe>
 800bc80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc82:	633b      	str	r3, [r7, #48]	@ 0x30
        q->byteCount += 2;
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	695b      	ldr	r3, [r3, #20]
 800bc88:	1c9a      	adds	r2, r3, #2
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	615a      	str	r2, [r3, #20]
      }
      
      /* Identify number of bytes of copy takeing account possible wrap, in this case NbBytesToCopy will contains size that fit at end of the queue buffer */
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 800bc8e:	88fa      	ldrh	r2, [r7, #6]
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	6859      	ldr	r1, [r3, #4]
 800bc94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc96:	1acb      	subs	r3, r1, r3
 800bc98:	4293      	cmp	r3, r2
 800bc9a:	bf28      	it	cs
 800bc9c:	4613      	movcs	r3, r2
 800bc9e:	62bb      	str	r3, [r7, #40]	@ 0x28
      /* check if no wrap (NbBytesToCopy == elementSize) or if Wrap and no spsicf option; 
         In this case part of data will copied at the end of the buffer and the rest a the beginning */
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
 800bca0:	88fb      	ldrh	r3, [r7, #6]
 800bca2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bca4:	429a      	cmp	r2, r3
 800bca6:	d007      	beq.n	800bcb8 <CircularQueue_Add+0x234>
 800bca8:	88fb      	ldrh	r3, [r7, #6]
 800bcaa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bcac:	429a      	cmp	r2, r3
 800bcae:	d225      	bcs.n	800bcfc <CircularQueue_Add+0x278>
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	7f1b      	ldrb	r3, [r3, #28]
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d121      	bne.n	800bcfc <CircularQueue_Add+0x278>
      {
        /* Copy First part (or emtire buffer ) from current position up to the end of the buffer queue (or before if enough room)  */
        memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	681a      	ldr	r2, [r3, #0]
 800bcbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcbe:	18d0      	adds	r0, r2, r3
 800bcc0:	88fb      	ldrh	r3, [r7, #6]
 800bcc2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bcc4:	fb02 f303 	mul.w	r3, r2, r3
 800bcc8:	68ba      	ldr	r2, [r7, #8]
 800bcca:	4413      	add	r3, r2
 800bccc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bcce:	4619      	mov	r1, r3
 800bcd0:	f002 fe13 	bl	800e8fa <memcpy>
        /* Adjust bytes count */
        q->byteCount += NbBytesToCopy;
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	695a      	ldr	r2, [r3, #20]
 800bcd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bcda:	441a      	add	r2, r3
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	615a      	str	r2, [r3, #20]
        /* Wrap */
        curBuffPosition = 0; 
 800bce0:	2300      	movs	r3, #0
 800bce2:	633b      	str	r3, [r7, #48]	@ 0x30
        /* set NbCopiedBytes bytes with  ampount copied */
        NbCopiedBytes = NbBytesToCopy;
 800bce4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bce6:	627b      	str	r3, [r7, #36]	@ 0x24
        /* set the rest to copy if wrao , if no wrap will be 0 */
        NbBytesToCopy = elementSize - NbBytesToCopy;
 800bce8:	88fa      	ldrh	r2, [r7, #6]
 800bcea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bcec:	1ad3      	subs	r3, r2, r3
 800bcee:	62bb      	str	r3, [r7, #40]	@ 0x28
        /* set the current element Size, will be used to calaculate next last position at beginning of loop */
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 800bcf0:	7ffb      	ldrb	r3, [r7, #31]
 800bcf2:	b29a      	uxth	r2, r3
 800bcf4:	88fb      	ldrh	r3, [r7, #6]
 800bcf6:	4413      	add	r3, r2
 800bcf8:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800bcfa:	e0a4      	b.n	800be46 <CircularQueue_Add+0x3c2>
      }
      else if (NbBytesToCopy)  /* We have a wrap  to manage */
 800bcfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	f000 80a1 	beq.w	800be46 <CircularQueue_Add+0x3c2>
      {
       /* case of CIRCULAR_QUEUE_NO_WRAP_FLAG option */
         if (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	7f1b      	ldrb	r3, [r3, #28]
 800bd08:	f003 0301 	and.w	r3, r3, #1
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d03a      	beq.n	800bd86 <CircularQueue_Add+0x302>
        {
          /* if element size are variable and NO_WRAP option, Invalidate end of buffer setting 0xFFFF size*/
          if (q->elementSize == 0)
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	891b      	ldrh	r3, [r3, #8]
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d10d      	bne.n	800bd34 <CircularQueue_Add+0x2b0>
          {
             q->qBuff[curBuffPosition-2] = 0xFF;
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	681a      	ldr	r2, [r3, #0]
 800bd1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd1e:	3b02      	subs	r3, #2
 800bd20:	4413      	add	r3, r2
 800bd22:	22ff      	movs	r2, #255	@ 0xff
 800bd24:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = 0xFF;
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	681a      	ldr	r2, [r3, #0]
 800bd2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd2c:	3b01      	subs	r3, #1
 800bd2e:	4413      	add	r3, r2
 800bd30:	22ff      	movs	r2, #255	@ 0xff
 800bd32:	701a      	strb	r2, [r3, #0]
          }
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	695a      	ldr	r2, [r3, #20]
 800bd38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd3a:	441a      	add	r2, r3
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	615a      	str	r2, [r3, #20]
          /* No bytes coped a the end of buffer */
          NbCopiedBytes = 0;
 800bd40:	2300      	movs	r3, #0
 800bd42:	627b      	str	r3, [r7, #36]	@ 0x24
          /* all element to be copied at the begnning of buffer */
          NbBytesToCopy = elementSize; 
 800bd44:	88fb      	ldrh	r3, [r7, #6]
 800bd46:	62bb      	str	r3, [r7, #40]	@ 0x28
          /* Wrap */
          curBuffPosition = 0; 
 800bd48:	2300      	movs	r3, #0
 800bd4a:	633b      	str	r3, [r7, #48]	@ 0x30
          /* if variable size element, invalidate end of buffer setting OxFFFF in element header (size) */
          if (q->elementSize == 0)
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	891b      	ldrh	r3, [r3, #8]
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d16f      	bne.n	800be34 <CircularQueue_Add+0x3b0>
          {
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	681a      	ldr	r2, [r3, #0]
 800bd58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd5a:	1c59      	adds	r1, r3, #1
 800bd5c:	6339      	str	r1, [r7, #48]	@ 0x30
 800bd5e:	4413      	add	r3, r2
 800bd60:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bd62:	b2d2      	uxtb	r2, r2
 800bd64:	701a      	strb	r2, [r3, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800bd66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd68:	0a18      	lsrs	r0, r3, #8
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	681a      	ldr	r2, [r3, #0]
 800bd6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd70:	1c59      	adds	r1, r3, #1
 800bd72:	6339      	str	r1, [r7, #48]	@ 0x30
 800bd74:	4413      	add	r3, r2
 800bd76:	b2c2      	uxtb	r2, r0
 800bd78:	701a      	strb	r2, [r3, #0]
            q->byteCount += 2;   
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	695b      	ldr	r3, [r3, #20]
 800bd7e:	1c9a      	adds	r2, r3, #2
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	615a      	str	r2, [r3, #20]
 800bd84:	e056      	b.n	800be34 <CircularQueue_Add+0x3b0>
          } 
           
        }
        /* case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG option */
        else if (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	7f1b      	ldrb	r3, [r3, #28]
 800bd8a:	f003 0302 	and.w	r3, r3, #2
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d050      	beq.n	800be34 <CircularQueue_Add+0x3b0>
        {
          if (q->elementSize == 0)
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	891b      	ldrh	r3, [r3, #8]
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d14a      	bne.n	800be30 <CircularQueue_Add+0x3ac>
          {
            /* reset the size of current element to the nb bytes fitting at the end of buffer */
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	681a      	ldr	r2, [r3, #0]
 800bd9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bda0:	3b02      	subs	r3, #2
 800bda2:	4413      	add	r3, r2
 800bda4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bda6:	b2d2      	uxtb	r2, r2
 800bda8:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800bdaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bdac:	0a19      	lsrs	r1, r3, #8
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	681a      	ldr	r2, [r3, #0]
 800bdb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdb4:	3b01      	subs	r3, #1
 800bdb6:	4413      	add	r3, r2
 800bdb8:	b2ca      	uxtb	r2, r1
 800bdba:	701a      	strb	r2, [r3, #0]
             /* copy the bytes */ 
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	681a      	ldr	r2, [r3, #0]
 800bdc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdc2:	18d0      	adds	r0, r2, r3
 800bdc4:	88fb      	ldrh	r3, [r7, #6]
 800bdc6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bdc8:	fb02 f303 	mul.w	r3, r2, r3
 800bdcc:	68ba      	ldr	r2, [r7, #8]
 800bdce:	4413      	add	r3, r2
 800bdd0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bdd2:	4619      	mov	r1, r3
 800bdd4:	f002 fd91 	bl	800e8fa <memcpy>
             q->byteCount += NbBytesToCopy; 
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	695a      	ldr	r2, [r3, #20]
 800bddc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bdde:	441a      	add	r2, r3
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	615a      	str	r2, [r3, #20]
             /* set the number of copied bytes */
             NbCopiedBytes = NbBytesToCopy;             
 800bde4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bde6:	627b      	str	r3, [r7, #36]	@ 0x24
             /* set rest of data to be copied to begnning of buffer */
             NbBytesToCopy = elementSize - NbBytesToCopy;
 800bde8:	88fa      	ldrh	r2, [r7, #6]
 800bdea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bdec:	1ad3      	subs	r3, r2, r3
 800bdee:	62bb      	str	r3, [r7, #40]	@ 0x28
             /* one element more dur to split in 2 elements */
             q->elementCount++;
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	699b      	ldr	r3, [r3, #24]
 800bdf4:	1c5a      	adds	r2, r3, #1
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	619a      	str	r2, [r3, #24]
             /* Wrap */
             curBuffPosition = 0; 
 800bdfa:	2300      	movs	r3, #0
 800bdfc:	633b      	str	r3, [r7, #48]	@ 0x30
             /* Set new size for rest of data */
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	681a      	ldr	r2, [r3, #0]
 800be02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be04:	1c59      	adds	r1, r3, #1
 800be06:	6339      	str	r1, [r7, #48]	@ 0x30
 800be08:	4413      	add	r3, r2
 800be0a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800be0c:	b2d2      	uxtb	r2, r2
 800be0e:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800be10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be12:	0a18      	lsrs	r0, r3, #8
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	681a      	ldr	r2, [r3, #0]
 800be18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be1a:	1c59      	adds	r1, r3, #1
 800be1c:	6339      	str	r1, [r7, #48]	@ 0x30
 800be1e:	4413      	add	r3, r2
 800be20:	b2c2      	uxtb	r2, r0
 800be22:	701a      	strb	r2, [r3, #0]
             q->byteCount += 2;              
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	695b      	ldr	r3, [r3, #20]
 800be28:	1c9a      	adds	r2, r3, #2
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	615a      	str	r2, [r3, #20]
 800be2e:	e001      	b.n	800be34 <CircularQueue_Add+0x3b0>
          else
          {
            /* Should not occur */
            /* can not manage split Flag on Fixed size element */
            /* Buffer is corrupted */
            return NULL;
 800be30:	2300      	movs	r3, #0
 800be32:	e049      	b.n	800bec8 <CircularQueue_Add+0x444>
          }
        }
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 800be34:	7ffb      	ldrb	r3, [r7, #31]
 800be36:	b29a      	uxth	r2, r3
 800be38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be3a:	b29b      	uxth	r3, r3
 800be3c:	4413      	add	r3, r2
 800be3e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        q->last = 0;        
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	2200      	movs	r2, #0
 800be44:	611a      	str	r2, [r3, #16]
      }  
      
      /* some remaining byte to copy */
      if (NbBytesToCopy)      
 800be46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d015      	beq.n	800be78 <CircularQueue_Add+0x3f4>
      {
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	681a      	ldr	r2, [r3, #0]
 800be50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be52:	18d0      	adds	r0, r2, r3
 800be54:	88fb      	ldrh	r3, [r7, #6]
 800be56:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800be58:	fb03 f202 	mul.w	r2, r3, r2
 800be5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be5e:	4413      	add	r3, r2
 800be60:	68ba      	ldr	r2, [r7, #8]
 800be62:	4413      	add	r3, r2
 800be64:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800be66:	4619      	mov	r1, r3
 800be68:	f002 fd47 	bl	800e8fa <memcpy>
        q->byteCount += NbBytesToCopy;
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	695a      	ldr	r2, [r3, #20]
 800be70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be72:	441a      	add	r2, r3
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	615a      	str	r2, [r3, #20]
      }      
      
      /* One more element */
      q->elementCount++;
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	699b      	ldr	r3, [r3, #24]
 800be7c:	1c5a      	adds	r2, r3, #1
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	619a      	str	r2, [r3, #24]
    for (i=0; i < nbElements; i++) 
 800be82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be84:	3301      	adds	r3, #1
 800be86:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800be88:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800be8a:	683b      	ldr	r3, [r7, #0]
 800be8c:	429a      	cmp	r2, r3
 800be8e:	f4ff aeb0 	bcc.w	800bbf2 <CircularQueue_Add+0x16e>
    }
    
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	681a      	ldr	r2, [r3, #0]
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	6919      	ldr	r1, [r3, #16]
 800be9a:	7ffb      	ldrb	r3, [r7, #31]
 800be9c:	4419      	add	r1, r3
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	685b      	ldr	r3, [r3, #4]
 800bea2:	4299      	cmp	r1, r3
 800bea4:	d307      	bcc.n	800beb6 <CircularQueue_Add+0x432>
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	6919      	ldr	r1, [r3, #16]
 800beaa:	7ffb      	ldrb	r3, [r7, #31]
 800beac:	4419      	add	r1, r3
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	685b      	ldr	r3, [r3, #4]
 800beb2:	1acb      	subs	r3, r1, r3
 800beb4:	e003      	b.n	800bebe <CircularQueue_Add+0x43a>
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	6919      	ldr	r1, [r3, #16]
 800beba:	7ffb      	ldrb	r3, [r7, #31]
 800bebc:	440b      	add	r3, r1
 800bebe:	4413      	add	r3, r2
 800bec0:	623b      	str	r3, [r7, #32]
  /* for Breakpoint only...to remove */
  else
  {
    return NULL;
  }
  return ptr;
 800bec2:	6a3b      	ldr	r3, [r7, #32]
 800bec4:	e000      	b.n	800bec8 <CircularQueue_Add+0x444>
    return NULL;
 800bec6:	2300      	movs	r3, #0
}
 800bec8:	4618      	mov	r0, r3
 800beca:	3738      	adds	r7, #56	@ 0x38
 800becc:	46bd      	mov	sp, r7
 800bece:	bd80      	pop	{r7, pc}

0800bed0 <CircularQueue_Remove>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize: Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on removed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Remove(queue_t *q, uint16_t* elementSize)
{
 800bed0:	b480      	push	{r7}
 800bed2:	b085      	sub	sp, #20
 800bed4:	af00      	add	r7, sp, #0
 800bed6:	6078      	str	r0, [r7, #4]
 800bed8:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800beda:	2300      	movs	r3, #0
 800bedc:	727b      	strb	r3, [r7, #9]
  uint8_t* ptr= NULL;
 800bede:	2300      	movs	r3, #0
 800bee0:	60fb      	str	r3, [r7, #12]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	891b      	ldrh	r3, [r3, #8]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d101      	bne.n	800beee <CircularQueue_Remove+0x1e>
 800beea:	2302      	movs	r3, #2
 800beec:	e000      	b.n	800bef0 <CircularQueue_Remove+0x20>
 800beee:	2300      	movs	r3, #0
 800bef0:	727b      	strb	r3, [r7, #9]
  uint16_t eltSize = 0;
 800bef2:	2300      	movs	r3, #0
 800bef4:	817b      	strh	r3, [r7, #10]
  if (q->byteCount > 0) 
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	695b      	ldr	r3, [r3, #20]
 800befa:	2b00      	cmp	r3, #0
 800befc:	f000 80ca 	beq.w	800c094 <CircularQueue_Remove+0x1c4>
  {
    /* retrieve element Size */
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	891b      	ldrh	r3, [r3, #8]
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d120      	bne.n	800bf4a <CircularQueue_Remove+0x7a>
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	681a      	ldr	r2, [r3, #0]
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	68db      	ldr	r3, [r3, #12]
 800bf10:	4413      	add	r3, r2
 800bf12:	781b      	ldrb	r3, [r3, #0]
 800bf14:	4618      	mov	r0, r3
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	681a      	ldr	r2, [r3, #0]
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	68db      	ldr	r3, [r3, #12]
 800bf1e:	1c59      	adds	r1, r3, #1
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	685b      	ldr	r3, [r3, #4]
 800bf24:	4299      	cmp	r1, r3
 800bf26:	d306      	bcc.n	800bf36 <CircularQueue_Remove+0x66>
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	68d9      	ldr	r1, [r3, #12]
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	685b      	ldr	r3, [r3, #4]
 800bf30:	1acb      	subs	r3, r1, r3
 800bf32:	3301      	adds	r3, #1
 800bf34:	e002      	b.n	800bf3c <CircularQueue_Remove+0x6c>
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	68db      	ldr	r3, [r3, #12]
 800bf3a:	3301      	adds	r3, #1
 800bf3c:	4413      	add	r3, r2
 800bf3e:	781b      	ldrb	r3, [r3, #0]
 800bf40:	021b      	lsls	r3, r3, #8
 800bf42:	b29b      	uxth	r3, r3
 800bf44:	4403      	add	r3, r0
 800bf46:	b29b      	uxth	r3, r3
 800bf48:	e001      	b.n	800bf4e <CircularQueue_Remove+0x7e>
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	891b      	ldrh	r3, [r3, #8]
 800bf4e:	817b      	strh	r3, [r7, #10]

     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	7f1b      	ldrb	r3, [r3, #28]
 800bf54:	f003 0301 	and.w	r3, r3, #1
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d056      	beq.n	800c00a <CircularQueue_Remove+0x13a>
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	7f1b      	ldrb	r3, [r3, #28]
 800bf60:	f003 0302 	and.w	r3, r3, #2
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d150      	bne.n	800c00a <CircularQueue_Remove+0x13a>
     {
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800bf68:	897b      	ldrh	r3, [r7, #10]
 800bf6a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800bf6e:	4293      	cmp	r3, r2
 800bf70:	d103      	bne.n	800bf7a <CircularQueue_Remove+0xaa>
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	891b      	ldrh	r3, [r3, #8]
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d012      	beq.n	800bfa0 <CircularQueue_Remove+0xd0>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	68da      	ldr	r2, [r3, #12]
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	691b      	ldr	r3, [r3, #16]
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800bf82:	429a      	cmp	r2, r3
 800bf84:	d941      	bls.n	800c00a <CircularQueue_Remove+0x13a>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	891b      	ldrh	r3, [r3, #8]
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d03d      	beq.n	800c00a <CircularQueue_Remove+0x13a>
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	685a      	ldr	r2, [r3, #4]
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	68db      	ldr	r3, [r3, #12]
 800bf96:	1ad3      	subs	r3, r2, r3
 800bf98:	687a      	ldr	r2, [r7, #4]
 800bf9a:	8912      	ldrh	r2, [r2, #8]
 800bf9c:	4293      	cmp	r3, r2
 800bf9e:	d234      	bcs.n	800c00a <CircularQueue_Remove+0x13a>
       {
          /* all data from current position up to the end of buffer are invalid */
          q->byteCount -= (q->queueMaxSize - q->first);
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	695a      	ldr	r2, [r3, #20]
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	68d9      	ldr	r1, [r3, #12]
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	685b      	ldr	r3, [r3, #4]
 800bfac:	1acb      	subs	r3, r1, r3
 800bfae:	441a      	add	r2, r3
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	615a      	str	r2, [r3, #20]
          /* Adjust first element pos */
          q->first = 0;
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	2200      	movs	r2, #0
 800bfb8:	60da      	str	r2, [r3, #12]
          /* retrieve the right size after the wrap [if variable size element] */
          eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	891b      	ldrh	r3, [r3, #8]
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d120      	bne.n	800c004 <CircularQueue_Remove+0x134>
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	681a      	ldr	r2, [r3, #0]
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	68db      	ldr	r3, [r3, #12]
 800bfca:	4413      	add	r3, r2
 800bfcc:	781b      	ldrb	r3, [r3, #0]
 800bfce:	4618      	mov	r0, r3
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	681a      	ldr	r2, [r3, #0]
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	68db      	ldr	r3, [r3, #12]
 800bfd8:	1c59      	adds	r1, r3, #1
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	685b      	ldr	r3, [r3, #4]
 800bfde:	4299      	cmp	r1, r3
 800bfe0:	d306      	bcc.n	800bff0 <CircularQueue_Remove+0x120>
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	68d9      	ldr	r1, [r3, #12]
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	685b      	ldr	r3, [r3, #4]
 800bfea:	1acb      	subs	r3, r1, r3
 800bfec:	3301      	adds	r3, #1
 800bfee:	e002      	b.n	800bff6 <CircularQueue_Remove+0x126>
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	68db      	ldr	r3, [r3, #12]
 800bff4:	3301      	adds	r3, #1
 800bff6:	4413      	add	r3, r2
 800bff8:	781b      	ldrb	r3, [r3, #0]
 800bffa:	021b      	lsls	r3, r3, #8
 800bffc:	b29b      	uxth	r3, r3
 800bffe:	4403      	add	r3, r0
 800c000:	b29b      	uxth	r3, r3
 800c002:	e001      	b.n	800c008 <CircularQueue_Remove+0x138>
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	891b      	ldrh	r3, [r3, #8]
 800c008:	817b      	strh	r3, [r7, #10]
       }
     }

    /* retrieve element */
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	681a      	ldr	r2, [r3, #0]
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	68d9      	ldr	r1, [r3, #12]
 800c012:	7a7b      	ldrb	r3, [r7, #9]
 800c014:	4419      	add	r1, r3
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	685b      	ldr	r3, [r3, #4]
 800c01a:	4299      	cmp	r1, r3
 800c01c:	d307      	bcc.n	800c02e <CircularQueue_Remove+0x15e>
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	68d9      	ldr	r1, [r3, #12]
 800c022:	7a7b      	ldrb	r3, [r7, #9]
 800c024:	4419      	add	r1, r3
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	685b      	ldr	r3, [r3, #4]
 800c02a:	1acb      	subs	r3, r1, r3
 800c02c:	e003      	b.n	800c036 <CircularQueue_Remove+0x166>
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	68d9      	ldr	r1, [r3, #12]
 800c032:	7a7b      	ldrb	r3, [r7, #9]
 800c034:	440b      	add	r3, r1
 800c036:	4413      	add	r3, r2
 800c038:	60fb      	str	r3, [r7, #12]

    /* adjust byte count */
    q->byteCount -= (eltSize + elemSizeStorageRoom) ;
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	695b      	ldr	r3, [r3, #20]
 800c03e:	8979      	ldrh	r1, [r7, #10]
 800c040:	7a7a      	ldrb	r2, [r7, #9]
 800c042:	440a      	add	r2, r1
 800c044:	1a9a      	subs	r2, r3, r2
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	615a      	str	r2, [r3, #20]
    
    /* Adjust q->first */
    if (q->byteCount > 0)
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	695b      	ldr	r3, [r3, #20]
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d01b      	beq.n	800c08a <CircularQueue_Remove+0x1ba>
    {
      q->first = MOD((q->first+ eltSize + elemSizeStorageRoom ), q->queueMaxSize);
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	68da      	ldr	r2, [r3, #12]
 800c056:	897b      	ldrh	r3, [r7, #10]
 800c058:	441a      	add	r2, r3
 800c05a:	7a7b      	ldrb	r3, [r7, #9]
 800c05c:	441a      	add	r2, r3
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	685b      	ldr	r3, [r3, #4]
 800c062:	429a      	cmp	r2, r3
 800c064:	d309      	bcc.n	800c07a <CircularQueue_Remove+0x1aa>
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	68da      	ldr	r2, [r3, #12]
 800c06a:	897b      	ldrh	r3, [r7, #10]
 800c06c:	441a      	add	r2, r3
 800c06e:	7a7b      	ldrb	r3, [r7, #9]
 800c070:	441a      	add	r2, r3
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	685b      	ldr	r3, [r3, #4]
 800c076:	1ad3      	subs	r3, r2, r3
 800c078:	e005      	b.n	800c086 <CircularQueue_Remove+0x1b6>
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	68da      	ldr	r2, [r3, #12]
 800c07e:	897b      	ldrh	r3, [r7, #10]
 800c080:	441a      	add	r2, r3
 800c082:	7a7b      	ldrb	r3, [r7, #9]
 800c084:	4413      	add	r3, r2
 800c086:	687a      	ldr	r2, [r7, #4]
 800c088:	60d3      	str	r3, [r2, #12]
    }    
    /* adjust element count */    
    --q->elementCount;    
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	699b      	ldr	r3, [r3, #24]
 800c08e:	1e5a      	subs	r2, r3, #1
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	619a      	str	r2, [r3, #24]
  }
  if (elementSize != NULL)
 800c094:	683b      	ldr	r3, [r7, #0]
 800c096:	2b00      	cmp	r3, #0
 800c098:	d002      	beq.n	800c0a0 <CircularQueue_Remove+0x1d0>
  {
    *elementSize = eltSize;
 800c09a:	683b      	ldr	r3, [r7, #0]
 800c09c:	897a      	ldrh	r2, [r7, #10]
 800c09e:	801a      	strh	r2, [r3, #0]
  }
  return ptr;
 800c0a0:	68fb      	ldr	r3, [r7, #12]
}
 800c0a2:	4618      	mov	r0, r3
 800c0a4:	3714      	adds	r7, #20
 800c0a6:	46bd      	mov	sp, r7
 800c0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ac:	4770      	bx	lr

0800c0ae <CircularQueue_Sense>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize:  Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on sensed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Sense(queue_t *q, uint16_t* elementSize)
{
 800c0ae:	b480      	push	{r7}
 800c0b0:	b087      	sub	sp, #28
 800c0b2:	af00      	add	r7, sp, #0
 800c0b4:	6078      	str	r0, [r7, #4]
 800c0b6:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800c0b8:	2300      	movs	r3, #0
 800c0ba:	72fb      	strb	r3, [r7, #11]
  uint8_t* x= NULL;
 800c0bc:	2300      	movs	r3, #0
 800c0be:	617b      	str	r3, [r7, #20]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	891b      	ldrh	r3, [r3, #8]
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d101      	bne.n	800c0cc <CircularQueue_Sense+0x1e>
 800c0c8:	2302      	movs	r3, #2
 800c0ca:	e000      	b.n	800c0ce <CircularQueue_Sense+0x20>
 800c0cc:	2300      	movs	r3, #0
 800c0ce:	72fb      	strb	r3, [r7, #11]
  uint16_t eltSize = 0;
 800c0d0:	2300      	movs	r3, #0
 800c0d2:	827b      	strh	r3, [r7, #18]
  uint32_t FirstElemetPos = 0;
 800c0d4:	2300      	movs	r3, #0
 800c0d6:	60fb      	str	r3, [r7, #12]
    
  if (q->byteCount > 0) 
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	695b      	ldr	r3, [r3, #20]
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	f000 808e 	beq.w	800c1fe <CircularQueue_Sense+0x150>
  {
    FirstElemetPos = q->first;
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	68db      	ldr	r3, [r3, #12]
 800c0e6:	60fb      	str	r3, [r7, #12]
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	891b      	ldrh	r3, [r3, #8]
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d120      	bne.n	800c132 <CircularQueue_Sense+0x84>
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	681a      	ldr	r2, [r3, #0]
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	68db      	ldr	r3, [r3, #12]
 800c0f8:	4413      	add	r3, r2
 800c0fa:	781b      	ldrb	r3, [r3, #0]
 800c0fc:	4618      	mov	r0, r3
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	681a      	ldr	r2, [r3, #0]
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	68db      	ldr	r3, [r3, #12]
 800c106:	1c59      	adds	r1, r3, #1
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	685b      	ldr	r3, [r3, #4]
 800c10c:	4299      	cmp	r1, r3
 800c10e:	d306      	bcc.n	800c11e <CircularQueue_Sense+0x70>
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	68d9      	ldr	r1, [r3, #12]
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	685b      	ldr	r3, [r3, #4]
 800c118:	1acb      	subs	r3, r1, r3
 800c11a:	3301      	adds	r3, #1
 800c11c:	e002      	b.n	800c124 <CircularQueue_Sense+0x76>
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	68db      	ldr	r3, [r3, #12]
 800c122:	3301      	adds	r3, #1
 800c124:	4413      	add	r3, r2
 800c126:	781b      	ldrb	r3, [r3, #0]
 800c128:	021b      	lsls	r3, r3, #8
 800c12a:	b29b      	uxth	r3, r3
 800c12c:	4403      	add	r3, r0
 800c12e:	b29b      	uxth	r3, r3
 800c130:	e001      	b.n	800c136 <CircularQueue_Sense+0x88>
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	891b      	ldrh	r3, [r3, #8]
 800c136:	827b      	strh	r3, [r7, #18]
    
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	7f1b      	ldrb	r3, [r3, #28]
 800c13c:	f003 0301 	and.w	r3, r3, #1
 800c140:	2b00      	cmp	r3, #0
 800c142:	d047      	beq.n	800c1d4 <CircularQueue_Sense+0x126>
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	7f1b      	ldrb	r3, [r3, #28]
 800c148:	f003 0302 	and.w	r3, r3, #2
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d141      	bne.n	800c1d4 <CircularQueue_Sense+0x126>
    { 
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800c150:	8a7b      	ldrh	r3, [r7, #18]
 800c152:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c156:	4293      	cmp	r3, r2
 800c158:	d103      	bne.n	800c162 <CircularQueue_Sense+0xb4>
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	891b      	ldrh	r3, [r3, #8]
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d012      	beq.n	800c188 <CircularQueue_Sense+0xda>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	68da      	ldr	r2, [r3, #12]
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	691b      	ldr	r3, [r3, #16]
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800c16a:	429a      	cmp	r2, r3
 800c16c:	d932      	bls.n	800c1d4 <CircularQueue_Sense+0x126>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	891b      	ldrh	r3, [r3, #8]
 800c172:	2b00      	cmp	r3, #0
 800c174:	d02e      	beq.n	800c1d4 <CircularQueue_Sense+0x126>
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	685a      	ldr	r2, [r3, #4]
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	68db      	ldr	r3, [r3, #12]
 800c17e:	1ad3      	subs	r3, r2, r3
 800c180:	687a      	ldr	r2, [r7, #4]
 800c182:	8912      	ldrh	r2, [r2, #8]
 800c184:	4293      	cmp	r3, r2
 800c186:	d225      	bcs.n	800c1d4 <CircularQueue_Sense+0x126>

      {
        /* all data from current position up to the end of buffer are invalid */
        FirstElemetPos = 0; /* wrap to the begiining of buffer */
 800c188:	2300      	movs	r3, #0
 800c18a:	60fb      	str	r3, [r7, #12]

        /* retrieve the right size after the wrap [if variable size element] */
        eltSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	891b      	ldrh	r3, [r3, #8]
 800c190:	2b00      	cmp	r3, #0
 800c192:	d11c      	bne.n	800c1ce <CircularQueue_Sense+0x120>
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	681a      	ldr	r2, [r3, #0]
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	4413      	add	r3, r2
 800c19c:	781b      	ldrb	r3, [r3, #0]
 800c19e:	4618      	mov	r0, r3
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	681a      	ldr	r2, [r3, #0]
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	1c59      	adds	r1, r3, #1
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	685b      	ldr	r3, [r3, #4]
 800c1ac:	4299      	cmp	r1, r3
 800c1ae:	d305      	bcc.n	800c1bc <CircularQueue_Sense+0x10e>
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	685b      	ldr	r3, [r3, #4]
 800c1b4:	68f9      	ldr	r1, [r7, #12]
 800c1b6:	1acb      	subs	r3, r1, r3
 800c1b8:	3301      	adds	r3, #1
 800c1ba:	e001      	b.n	800c1c0 <CircularQueue_Sense+0x112>
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	3301      	adds	r3, #1
 800c1c0:	4413      	add	r3, r2
 800c1c2:	781b      	ldrb	r3, [r3, #0]
 800c1c4:	021b      	lsls	r3, r3, #8
 800c1c6:	b29b      	uxth	r3, r3
 800c1c8:	4403      	add	r3, r0
 800c1ca:	b29b      	uxth	r3, r3
 800c1cc:	e001      	b.n	800c1d2 <CircularQueue_Sense+0x124>
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	891b      	ldrh	r3, [r3, #8]
 800c1d2:	827b      	strh	r3, [r7, #18]
      }
   }
   /* retrieve element */
    x = q->qBuff + (MOD((FirstElemetPos + elemSizeStorageRoom), q->queueMaxSize));
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	681a      	ldr	r2, [r3, #0]
 800c1d8:	7af9      	ldrb	r1, [r7, #11]
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	4419      	add	r1, r3
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	685b      	ldr	r3, [r3, #4]
 800c1e2:	4299      	cmp	r1, r3
 800c1e4:	d306      	bcc.n	800c1f4 <CircularQueue_Sense+0x146>
 800c1e6:	7af9      	ldrb	r1, [r7, #11]
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	4419      	add	r1, r3
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	685b      	ldr	r3, [r3, #4]
 800c1f0:	1acb      	subs	r3, r1, r3
 800c1f2:	e002      	b.n	800c1fa <CircularQueue_Sense+0x14c>
 800c1f4:	7af9      	ldrb	r1, [r7, #11]
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	440b      	add	r3, r1
 800c1fa:	4413      	add	r3, r2
 800c1fc:	617b      	str	r3, [r7, #20]
  }
  if (elementSize != NULL)
 800c1fe:	683b      	ldr	r3, [r7, #0]
 800c200:	2b00      	cmp	r3, #0
 800c202:	d002      	beq.n	800c20a <CircularQueue_Sense+0x15c>
  {
    *elementSize = eltSize;
 800c204:	683b      	ldr	r3, [r7, #0]
 800c206:	8a7a      	ldrh	r2, [r7, #18]
 800c208:	801a      	strh	r2, [r3, #0]
  }
  return x;
 800c20a:	697b      	ldr	r3, [r7, #20]
}
 800c20c:	4618      	mov	r0, r3
 800c20e:	371c      	adds	r7, #28
 800c210:	46bd      	mov	sp, r7
 800c212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c216:	4770      	bx	lr

0800c218 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 800c218:	b480      	push	{r7}
 800c21a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 800c21c:	4b03      	ldr	r3, [pc, #12]	@ (800c22c <LL_FLASH_GetUDN+0x14>)
 800c21e:	681b      	ldr	r3, [r3, #0]
}
 800c220:	4618      	mov	r0, r3
 800c222:	46bd      	mov	sp, r7
 800c224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c228:	4770      	bx	lr
 800c22a:	bf00      	nop
 800c22c:	1fff7580 	.word	0x1fff7580

0800c230 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 800c230:	b480      	push	{r7}
 800c232:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 800c234:	4b03      	ldr	r3, [pc, #12]	@ (800c244 <LL_FLASH_GetDeviceID+0x14>)
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	b2db      	uxtb	r3, r3
}
 800c23a:	4618      	mov	r0, r3
 800c23c:	46bd      	mov	sp, r7
 800c23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c242:	4770      	bx	lr
 800c244:	1fff7584 	.word	0x1fff7584

0800c248 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 800c248:	b480      	push	{r7}
 800c24a:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 800c24c:	4b03      	ldr	r3, [pc, #12]	@ (800c25c <LL_FLASH_GetSTCompanyID+0x14>)
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	0a1b      	lsrs	r3, r3, #8
}
 800c252:	4618      	mov	r0, r3
 800c254:	46bd      	mov	sp, r7
 800c256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c25a:	4770      	bx	lr
 800c25c:	1fff7584 	.word	0x1fff7584

0800c260 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 800c260:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c262:	b0b1      	sub	sp, #196	@ 0xc4
 800c264:	af04      	add	r7, sp, #16
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800c266:	2392      	movs	r3, #146	@ 0x92
 800c268:	f887 30ab 	strb.w	r3, [r7, #171]	@ 0xab
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */
  WirelessFwInfo_t wireless_info_instance;
  WirelessFwInfo_t *p_wireless_info = &wireless_info_instance;  
 800c26c:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800c270:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  char BdAddress[20];
  char StackVersion[23];
  char StackBranch[20];
  char FusVersion[20];
  const uint8_t *bdaddr=0;  
 800c274:	2300      	movs	r3, #0
 800c276:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 800c27a:	4b86      	ldr	r3, [pc, #536]	@ (800c494 <APP_BLE_Init+0x234>)
 800c27c:	463c      	mov	r4, r7
 800c27e:	461d      	mov	r5, r3
 800c280:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c282:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c284:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c286:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c288:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c28a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c28c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800c290:	c403      	stmia	r4!, {r0, r1}
 800c292:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 800c294:	f000 fe80 	bl	800cf98 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 800c298:	2101      	movs	r1, #1
 800c29a:	2002      	movs	r0, #2
 800c29c:	f001 fe3c 	bl	800df18 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 800c2a0:	4a7d      	ldr	r2, [pc, #500]	@ (800c498 <APP_BLE_Init+0x238>)
 800c2a2:	2100      	movs	r1, #0
 800c2a4:	2004      	movs	r0, #4
 800c2a6:	f001 ff63 	bl	800e170 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 800c2aa:	463b      	mov	r3, r7
 800c2ac:	4618      	mov	r0, r3
 800c2ae:	f7fe fc55 	bl	800ab5c <SHCI_C2_BLE_Init>
 800c2b2:	4603      	mov	r3, r0
 800c2b4:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
  if (status != SHCI_Success)
 800c2b8:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d008      	beq.n	800c2d2 <APP_BLE_Init+0x72>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
 800c2c0:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800c2c4:	4619      	mov	r1, r3
 800c2c6:	4875      	ldr	r0, [pc, #468]	@ (800c49c <APP_BLE_Init+0x23c>)
 800c2c8:	f002 f932 	bl	800e530 <iprintf>
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 800c2cc:	f7f6 fd76 	bl	8002dbc <Error_Handler>
 800c2d0:	e002      	b.n	800c2d8 <APP_BLE_Init+0x78>
  }
  else
  {
    APP_DBG_MSG("  Success: SHCI_C2_BLE_Init command\n\r");
 800c2d2:	4873      	ldr	r0, [pc, #460]	@ (800c4a0 <APP_BLE_Init+0x240>)
 800c2d4:	f002 f92c 	bl	800e530 <iprintf>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 800c2d8:	f000 fe74 	bl	800cfc4 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 800c2dc:	f7fe fb98 	bl	800aa10 <SVCCTL_Init>


  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800c2e0:	4b70      	ldr	r3, [pc, #448]	@ (800c4a4 <APP_BLE_Init+0x244>)
 800c2e2:	2200      	movs	r2, #0
 800c2e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 800c2e8:	4b6e      	ldr	r3, [pc, #440]	@ (800c4a4 <APP_BLE_Init+0x244>)
 800c2ea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c2ee:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 800c2f0:	4a6d      	ldr	r2, [pc, #436]	@ (800c4a8 <APP_BLE_Init+0x248>)
 800c2f2:	2100      	movs	r1, #0
 800c2f4:	2001      	movs	r0, #1
 800c2f6:	f001 ff3b 	bl	800e170 <UTIL_SEQ_RegTask>
#if (L2CAP_REQUEST_NEW_CONN_PARAM != 0)
  UTIL_SEQ_RegTask(1<<CFG_TASK_CONN_UPDATE_REG_ID, UTIL_SEQ_RFU, Connection_Interval_Update_Req);
 800c2fa:	4a6c      	ldr	r2, [pc, #432]	@ (800c4ac <APP_BLE_Init+0x24c>)
 800c2fc:	2100      	movs	r1, #0
 800c2fe:	2002      	movs	r0, #2
 800c300:	f001 ff36 	bl	800e170 <UTIL_SEQ_RegTask>
#if (BLE_CFG_OTA_REBOOT_CHAR != 0)
  a_ManufData[sizeof(a_ManufData)-8] = CFG_FEATURE_OTA_REBOOT;
#endif /* BLE_CFG_OTA_REBOOT_CHAR != 0 */

#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 800c304:	2006      	movs	r0, #6
 800c306:	f7fe f8d9 	bl	800a4bc <aci_hal_set_radio_activity_mask>
 800c30a:	4603      	mov	r3, r0
 800c30c:	f887 30ab 	strb.w	r3, [r7, #171]	@ 0xab
  if (ret != BLE_STATUS_SUCCESS)
 800c310:	f897 30ab 	ldrb.w	r3, [r7, #171]	@ 0xab
 800c314:	2b00      	cmp	r3, #0
 800c316:	d006      	beq.n	800c326 <APP_BLE_Init+0xc6>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_radio_activity_mask command, result: 0x%x \n\r", ret);
 800c318:	f897 30ab 	ldrb.w	r3, [r7, #171]	@ 0xab
 800c31c:	4619      	mov	r1, r3
 800c31e:	4864      	ldr	r0, [pc, #400]	@ (800c4b0 <APP_BLE_Init+0x250>)
 800c320:	f002 f906 	bl	800e530 <iprintf>
 800c324:	e002      	b.n	800c32c <APP_BLE_Init+0xcc>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_radio_activity_mask command\n\r");
 800c326:	4863      	ldr	r0, [pc, #396]	@ (800c4b4 <APP_BLE_Init+0x254>)
 800c328:	f002 f902 	bl	800e530 <iprintf>
  }
#endif /* RADIO_ACTIVITY_EVENT != 0 */

#if (L2CAP_REQUEST_NEW_CONN_PARAM != 0)
  index_con_int = 0;
 800c32c:	4b62      	ldr	r3, [pc, #392]	@ (800c4b8 <APP_BLE_Init+0x258>)
 800c32e:	2200      	movs	r2, #0
 800c330:	701a      	strb	r2, [r3, #0]
  mutex = 1;
 800c332:	4b62      	ldr	r3, [pc, #392]	@ (800c4bc <APP_BLE_Init+0x25c>)
 800c334:	2201      	movs	r2, #1
 800c336:	701a      	strb	r2, [r3, #0]
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize P2P Server Application
   */
  P2PS_APP_Init();
 800c338:	f001 fa74 	bl	800d824 <P2PS_APP_Init>

  /* USER CODE BEGIN APP_BLE_Init_3 */
  Add_EEG_Stream_Notify_Service();
 800c33c:	f000 f8da 	bl	800c4f4 <Add_EEG_Stream_Notify_Service>
  Add_Event_Notify_Service();
 800c340:	f000 f9c6 	bl	800c6d0 <Add_Event_Notify_Service>
  Add_Motion_Notify_Service();
 800c344:	f000 fa5c 	bl	800c800 <Add_Motion_Notify_Service>
   */
  //HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.Advertising_mgr_timer_Id), hw_ts_SingleShot, Adv_Cancel_Req);
  /**
   * Create timer to handle the Led Switch OFF
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.SwitchOffGPIO_timer_Id), hw_ts_SingleShot, Switch_OFF_GPIO);
 800c348:	4b5d      	ldr	r3, [pc, #372]	@ (800c4c0 <APP_BLE_Init+0x260>)
 800c34a:	2200      	movs	r2, #0
 800c34c:	495d      	ldr	r1, [pc, #372]	@ (800c4c4 <APP_BLE_Init+0x264>)
 800c34e:	2000      	movs	r0, #0
 800c350:	f7f5 fe12 	bl	8001f78 <HW_TS_Create>

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 800c354:	4b53      	ldr	r3, [pc, #332]	@ (800c4a4 <APP_BLE_Init+0x244>)
 800c356:	2200      	movs	r2, #0
 800c358:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 800c35a:	4b52      	ldr	r3, [pc, #328]	@ (800c4a4 <APP_BLE_Init+0x244>)
 800c35c:	2200      	movs	r2, #0
 800c35e:	761a      	strb	r2, [r3, #24]

  /* Initialize intervals for reconnexion without intervals update */
  AdvIntervalMin = CFG_FAST_CONN_ADV_INTERVAL_MIN;
 800c360:	4b59      	ldr	r3, [pc, #356]	@ (800c4c8 <APP_BLE_Init+0x268>)
 800c362:	2280      	movs	r2, #128	@ 0x80
 800c364:	801a      	strh	r2, [r3, #0]
  AdvIntervalMax = CFG_FAST_CONN_ADV_INTERVAL_MAX;
 800c366:	4b59      	ldr	r3, [pc, #356]	@ (800c4cc <APP_BLE_Init+0x26c>)
 800c368:	22a0      	movs	r2, #160	@ 0xa0
 800c36a:	801a      	strh	r2, [r3, #0]

  /**
   * Start to Advertise to be connected by P2P Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 800c36c:	2001      	movs	r0, #1
 800c36e:	f000 ffd9 	bl	800d324 <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */
   /* Displays the board information: MAC Address, Stack version, FUS version*/ 
   if (SHCI_GetWirelessFwInfo(p_wireless_info) != SHCI_Success)
 800c372:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 800c376:	f7fe fc35 	bl	800abe4 <SHCI_GetWirelessFwInfo>
 800c37a:	4603      	mov	r3, r0
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d15a      	bne.n	800c436 <APP_BLE_Init+0x1d6>
   {
     // Error
   }
   else
   {
     bdaddr= BleGetBdAddress();
 800c380:	f001 f86e 	bl	800d460 <BleGetBdAddress>
 800c384:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
     sprintf(BdAddress, "BD_ad=%02x%02x%02x%02x%02x%02x", bdaddr[5],bdaddr[4],bdaddr[3],bdaddr[2],bdaddr[1],bdaddr[0]);
 800c388:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c38c:	3305      	adds	r3, #5
 800c38e:	781b      	ldrb	r3, [r3, #0]
 800c390:	461d      	mov	r5, r3
 800c392:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c396:	3304      	adds	r3, #4
 800c398:	781b      	ldrb	r3, [r3, #0]
 800c39a:	461e      	mov	r6, r3
 800c39c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c3a0:	3303      	adds	r3, #3
 800c3a2:	781b      	ldrb	r3, [r3, #0]
 800c3a4:	461a      	mov	r2, r3
 800c3a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c3aa:	3302      	adds	r3, #2
 800c3ac:	781b      	ldrb	r3, [r3, #0]
 800c3ae:	4619      	mov	r1, r3
 800c3b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c3b4:	3301      	adds	r3, #1
 800c3b6:	781b      	ldrb	r3, [r3, #0]
 800c3b8:	461c      	mov	r4, r3
 800c3ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c3be:	781b      	ldrb	r3, [r3, #0]
 800c3c0:	f107 007c 	add.w	r0, r7, #124	@ 0x7c
 800c3c4:	9303      	str	r3, [sp, #12]
 800c3c6:	9402      	str	r4, [sp, #8]
 800c3c8:	9101      	str	r1, [sp, #4]
 800c3ca:	9200      	str	r2, [sp, #0]
 800c3cc:	4633      	mov	r3, r6
 800c3ce:	462a      	mov	r2, r5
 800c3d0:	493f      	ldr	r1, [pc, #252]	@ (800c4d0 <APP_BLE_Init+0x270>)
 800c3d2:	f002 f925 	bl	800e620 <siprintf>
     sprintf(StackVersion, "BLE Stack=v%d.%d.%d", p_wireless_info->VersionMajor, p_wireless_info->VersionMinor, p_wireless_info->VersionSub);
 800c3d6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c3da:	781b      	ldrb	r3, [r3, #0]
 800c3dc:	461a      	mov	r2, r3
 800c3de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c3e2:	785b      	ldrb	r3, [r3, #1]
 800c3e4:	4619      	mov	r1, r3
 800c3e6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c3ea:	789b      	ldrb	r3, [r3, #2]
 800c3ec:	f107 0064 	add.w	r0, r7, #100	@ 0x64
 800c3f0:	9300      	str	r3, [sp, #0]
 800c3f2:	460b      	mov	r3, r1
 800c3f4:	4937      	ldr	r1, [pc, #220]	@ (800c4d4 <APP_BLE_Init+0x274>)
 800c3f6:	f002 f913 	bl	800e620 <siprintf>
     sprintf(StackBranch, "Branch=%d Type=%d", p_wireless_info->VersionBranch, p_wireless_info->VersionReleaseType);
 800c3fa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c3fe:	78db      	ldrb	r3, [r3, #3]
 800c400:	461a      	mov	r2, r3
 800c402:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c406:	791b      	ldrb	r3, [r3, #4]
 800c408:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 800c40c:	4932      	ldr	r1, [pc, #200]	@ (800c4d8 <APP_BLE_Init+0x278>)
 800c40e:	f002 f907 	bl	800e620 <siprintf>
     sprintf(FusVersion, "FUS v%d.%d.%d", p_wireless_info->FusVersionMajor, p_wireless_info->FusVersionMinor, p_wireless_info->FusVersionSub);
 800c412:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c416:	7a9b      	ldrb	r3, [r3, #10]
 800c418:	461a      	mov	r2, r3
 800c41a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c41e:	7adb      	ldrb	r3, [r3, #11]
 800c420:	4619      	mov	r1, r3
 800c422:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c426:	7b1b      	ldrb	r3, [r3, #12]
 800c428:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 800c42c:	9300      	str	r3, [sp, #0]
 800c42e:	460b      	mov	r3, r1
 800c430:	492a      	ldr	r1, [pc, #168]	@ (800c4dc <APP_BLE_Init+0x27c>)
 800c432:	f002 f8f5 	bl	800e620 <siprintf>
     
   }
   HAL_Delay(4000);
 800c436:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 800c43a:	f7f5 f82b 	bl	8001494 <HAL_Delay>
   /* Displays Application */
   
   sprintf(BdAddress, "BD_ad=%02x%02x%02x%02x%02x%02x", bdaddr[5],bdaddr[4],bdaddr[3],bdaddr[2],bdaddr[1],bdaddr[0]);
 800c43e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c442:	3305      	adds	r3, #5
 800c444:	781b      	ldrb	r3, [r3, #0]
 800c446:	461d      	mov	r5, r3
 800c448:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c44c:	3304      	adds	r3, #4
 800c44e:	781b      	ldrb	r3, [r3, #0]
 800c450:	461e      	mov	r6, r3
 800c452:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c456:	3303      	adds	r3, #3
 800c458:	781b      	ldrb	r3, [r3, #0]
 800c45a:	461a      	mov	r2, r3
 800c45c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c460:	3302      	adds	r3, #2
 800c462:	781b      	ldrb	r3, [r3, #0]
 800c464:	4619      	mov	r1, r3
 800c466:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c46a:	3301      	adds	r3, #1
 800c46c:	781b      	ldrb	r3, [r3, #0]
 800c46e:	461c      	mov	r4, r3
 800c470:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c474:	781b      	ldrb	r3, [r3, #0]
 800c476:	f107 007c 	add.w	r0, r7, #124	@ 0x7c
 800c47a:	9303      	str	r3, [sp, #12]
 800c47c:	9402      	str	r4, [sp, #8]
 800c47e:	9101      	str	r1, [sp, #4]
 800c480:	9200      	str	r2, [sp, #0]
 800c482:	4633      	mov	r3, r6
 800c484:	462a      	mov	r2, r5
 800c486:	4912      	ldr	r1, [pc, #72]	@ (800c4d0 <APP_BLE_Init+0x270>)
 800c488:	f002 f8ca 	bl	800e620 <siprintf>

  /* USER CODE END APP_BLE_Init_2 */

  return;
 800c48c:	bf00      	nop
}
 800c48e:	37b4      	adds	r7, #180	@ 0xb4
 800c490:	46bd      	mov	sp, r7
 800c492:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c494:	0800fc68 	.word	0x0800fc68
 800c498:	0800ad79 	.word	0x0800ad79
 800c49c:	0800fb34 	.word	0x0800fb34
 800c4a0:	0800fb6c 	.word	0x0800fb6c
 800c4a4:	200004d4 	.word	0x200004d4
 800c4a8:	0800d4e9 	.word	0x0800d4e9
 800c4ac:	0800d5e9 	.word	0x0800d5e9
 800c4b0:	0800fb94 	.word	0x0800fb94
 800c4b4:	0800fbd8 	.word	0x0800fbd8
 800c4b8:	20000570 	.word	0x20000570
 800c4bc:	20000571 	.word	0x20000571
 800c4c0:	0800d541 	.word	0x0800d541
 800c4c4:	2000055a 	.word	0x2000055a
 800c4c8:	20000568 	.word	0x20000568
 800c4cc:	2000056a 	.word	0x2000056a
 800c4d0:	0800fc10 	.word	0x0800fc10
 800c4d4:	0800fc30 	.word	0x0800fc30
 800c4d8:	0800fc44 	.word	0x0800fc44
 800c4dc:	0800fc58 	.word	0x0800fc58

0800c4e0 <Hermes_App_Init>:



void Hermes_App_Init(void){
 800c4e0:	b580      	push	{r7, lr}
 800c4e2:	af00      	add	r7, sp, #0

	  SVCCTL_RegisterSvcHandler(Hermes_Event_Handler);
 800c4e4:	4802      	ldr	r0, [pc, #8]	@ (800c4f0 <Hermes_App_Init+0x10>)
 800c4e6:	f7fe facb 	bl	800aa80 <SVCCTL_RegisterSvcHandler>

}
 800c4ea:	bf00      	nop
 800c4ec:	bd80      	pop	{r7, pc}
 800c4ee:	bf00      	nop
 800c4f0:	0800d6c9 	.word	0x0800d6c9

0800c4f4 <Add_EEG_Stream_Notify_Service>:



static tBleStatus Add_EEG_Stream_Notify_Service(void)
{
 800c4f4:	b580      	push	{r7, lr}
 800c4f6:	b094      	sub	sp, #80	@ 0x50
 800c4f8:	af06      	add	r7, sp, #24
    tBleStatus ret = BLE_STATUS_SUCCESS;
 800c4fa:	2300      	movs	r3, #0
 800c4fc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    uint8_t eeg_service_uuid[16];
    uint8_t eeg_stream_char_uuid[16];
    uint8_t eeg_config_char_uuid[16];

    // Add service
    COPY_EEG_SERVICE_UUID(eeg_service_uuid);
 800c500:	231b      	movs	r3, #27
 800c502:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 800c506:	23c5      	movs	r3, #197	@ 0xc5
 800c508:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800c50c:	23d5      	movs	r3, #213	@ 0xd5
 800c50e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800c512:	23a5      	movs	r3, #165	@ 0xa5
 800c514:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c518:	2302      	movs	r3, #2
 800c51a:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 800c51e:	2300      	movs	r3, #0
 800c520:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 800c524:	2351      	movs	r3, #81	@ 0x51
 800c526:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800c52a:	23a1      	movs	r3, #161	@ 0xa1
 800c52c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c530:	23e5      	movs	r3, #229	@ 0xe5
 800c532:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 800c536:	2311      	movs	r3, #17
 800c538:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 800c53c:	2367      	movs	r3, #103	@ 0x67
 800c53e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800c542:	2349      	movs	r3, #73	@ 0x49
 800c544:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800c548:	23e0      	movs	r3, #224	@ 0xe0
 800c54a:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
 800c54e:	2380      	movs	r3, #128	@ 0x80
 800c550:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
 800c554:	23a4      	movs	r3, #164	@ 0xa4
 800c556:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
 800c55a:	239f      	movs	r3, #159	@ 0x9f
 800c55c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    ret = aci_gatt_add_service(UUID_TYPE_128,
 800c560:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 800c564:	4b54      	ldr	r3, [pc, #336]	@ (800c6b8 <Add_EEG_Stream_Notify_Service+0x1c4>)
 800c566:	9300      	str	r3, [sp, #0]
 800c568:	2308      	movs	r3, #8
 800c56a:	2201      	movs	r2, #1
 800c56c:	2002      	movs	r0, #2
 800c56e:	f7fd fbdd 	bl	8009d2c <aci_gatt_add_service>
 800c572:	4603      	mov	r3, r0
 800c574:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                              (Service_UUID_t *) eeg_service_uuid,
                              PRIMARY_SERVICE,
							  2 + 3 + 3, /* 2 for service + 3 + 3 for 2 characteristic */
                              &(BleApplicationContext.BleApplicationContext_legacy.eeg_service_handle));

    if (ret != BLE_STATUS_SUCCESS)
 800c578:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d008      	beq.n	800c592 <Add_EEG_Stream_Notify_Service+0x9e>
    {
        APP_DBG_MSG("Error adding New Notify Service - ret=0x%x\n", ret);
 800c580:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c584:	4619      	mov	r1, r3
 800c586:	484d      	ldr	r0, [pc, #308]	@ (800c6bc <Add_EEG_Stream_Notify_Service+0x1c8>)
 800c588:	f001 ffd2 	bl	800e530 <iprintf>
        return ret;
 800c58c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c590:	e08e      	b.n	800c6b0 <Add_EEG_Stream_Notify_Service+0x1bc>
    }

    // Add characteristic
    COPY_EEG_DATA_UUID(eeg_stream_char_uuid);
 800c592:	231b      	movs	r3, #27
 800c594:	753b      	strb	r3, [r7, #20]
 800c596:	23c5      	movs	r3, #197	@ 0xc5
 800c598:	757b      	strb	r3, [r7, #21]
 800c59a:	23d5      	movs	r3, #213	@ 0xd5
 800c59c:	75bb      	strb	r3, [r7, #22]
 800c59e:	23a5      	movs	r3, #165	@ 0xa5
 800c5a0:	75fb      	strb	r3, [r7, #23]
 800c5a2:	2302      	movs	r3, #2
 800c5a4:	763b      	strb	r3, [r7, #24]
 800c5a6:	2300      	movs	r3, #0
 800c5a8:	767b      	strb	r3, [r7, #25]
 800c5aa:	2351      	movs	r3, #81	@ 0x51
 800c5ac:	76bb      	strb	r3, [r7, #26]
 800c5ae:	23a1      	movs	r3, #161	@ 0xa1
 800c5b0:	76fb      	strb	r3, [r7, #27]
 800c5b2:	23e5      	movs	r3, #229	@ 0xe5
 800c5b4:	773b      	strb	r3, [r7, #28]
 800c5b6:	2311      	movs	r3, #17
 800c5b8:	777b      	strb	r3, [r7, #29]
 800c5ba:	2367      	movs	r3, #103	@ 0x67
 800c5bc:	77bb      	strb	r3, [r7, #30]
 800c5be:	2349      	movs	r3, #73	@ 0x49
 800c5c0:	77fb      	strb	r3, [r7, #31]
 800c5c2:	23e1      	movs	r3, #225	@ 0xe1
 800c5c4:	f887 3020 	strb.w	r3, [r7, #32]
 800c5c8:	2380      	movs	r3, #128	@ 0x80
 800c5ca:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
 800c5ce:	23a4      	movs	r3, #164	@ 0xa4
 800c5d0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800c5d4:	239f      	movs	r3, #159	@ 0x9f
 800c5d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    ret = aci_gatt_add_char(BleApplicationContext.BleApplicationContext_legacy.eeg_service_handle,
 800c5da:	4b39      	ldr	r3, [pc, #228]	@ (800c6c0 <Add_EEG_Stream_Notify_Service+0x1cc>)
 800c5dc:	f8b3 007e 	ldrh.w	r0, [r3, #126]	@ 0x7e
 800c5e0:	f107 0214 	add.w	r2, r7, #20
 800c5e4:	4b37      	ldr	r3, [pc, #220]	@ (800c6c4 <Add_EEG_Stream_Notify_Service+0x1d0>)
 800c5e6:	9305      	str	r3, [sp, #20]
 800c5e8:	2301      	movs	r3, #1
 800c5ea:	9304      	str	r3, [sp, #16]
 800c5ec:	230a      	movs	r3, #10
 800c5ee:	9303      	str	r3, [sp, #12]
 800c5f0:	2301      	movs	r3, #1
 800c5f2:	9302      	str	r3, [sp, #8]
 800c5f4:	2300      	movs	r3, #0
 800c5f6:	9301      	str	r3, [sp, #4]
 800c5f8:	2310      	movs	r3, #16
 800c5fa:	9300      	str	r3, [sp, #0]
 800c5fc:	23f1      	movs	r3, #241	@ 0xf1
 800c5fe:	2102      	movs	r1, #2
 800c600:	f7fd fc6a 	bl	8009ed8 <aci_gatt_add_char>
 800c604:	4603      	mov	r3, r0
 800c606:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
						   GATT_NOTIFY_ATTRIBUTE_WRITE,
                           10,
                           CHAR_VALUE_LEN_VARIABLE,
                           &(BleApplicationContext.eeg_data_char_handle));

    if (ret != BLE_STATUS_SUCCESS)
 800c60a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d008      	beq.n	800c624 <Add_EEG_Stream_Notify_Service+0x130>
    {
        APP_DBG_MSG("Error adding New Notify Characteristic - ret=0x%x\n", ret);
 800c612:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c616:	4619      	mov	r1, r3
 800c618:	482b      	ldr	r0, [pc, #172]	@ (800c6c8 <Add_EEG_Stream_Notify_Service+0x1d4>)
 800c61a:	f001 ff89 	bl	800e530 <iprintf>
        return ret;
 800c61e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c622:	e045      	b.n	800c6b0 <Add_EEG_Stream_Notify_Service+0x1bc>
    }

    // Add characteristic
    COPY_EEG_CONFIG_UUID(eeg_config_char_uuid);
 800c624:	231b      	movs	r3, #27
 800c626:	713b      	strb	r3, [r7, #4]
 800c628:	23c5      	movs	r3, #197	@ 0xc5
 800c62a:	717b      	strb	r3, [r7, #5]
 800c62c:	23d5      	movs	r3, #213	@ 0xd5
 800c62e:	71bb      	strb	r3, [r7, #6]
 800c630:	23a5      	movs	r3, #165	@ 0xa5
 800c632:	71fb      	strb	r3, [r7, #7]
 800c634:	2302      	movs	r3, #2
 800c636:	723b      	strb	r3, [r7, #8]
 800c638:	2300      	movs	r3, #0
 800c63a:	727b      	strb	r3, [r7, #9]
 800c63c:	2351      	movs	r3, #81	@ 0x51
 800c63e:	72bb      	strb	r3, [r7, #10]
 800c640:	23a1      	movs	r3, #161	@ 0xa1
 800c642:	72fb      	strb	r3, [r7, #11]
 800c644:	23e5      	movs	r3, #229	@ 0xe5
 800c646:	733b      	strb	r3, [r7, #12]
 800c648:	2311      	movs	r3, #17
 800c64a:	737b      	strb	r3, [r7, #13]
 800c64c:	2367      	movs	r3, #103	@ 0x67
 800c64e:	73bb      	strb	r3, [r7, #14]
 800c650:	2349      	movs	r3, #73	@ 0x49
 800c652:	73fb      	strb	r3, [r7, #15]
 800c654:	23e2      	movs	r3, #226	@ 0xe2
 800c656:	743b      	strb	r3, [r7, #16]
 800c658:	2380      	movs	r3, #128	@ 0x80
 800c65a:	747b      	strb	r3, [r7, #17]
 800c65c:	23a4      	movs	r3, #164	@ 0xa4
 800c65e:	74bb      	strb	r3, [r7, #18]
 800c660:	239f      	movs	r3, #159	@ 0x9f
 800c662:	74fb      	strb	r3, [r7, #19]
    ret = aci_gatt_add_char(BleApplicationContext.BleApplicationContext_legacy.eeg_service_handle,
 800c664:	4b16      	ldr	r3, [pc, #88]	@ (800c6c0 <Add_EEG_Stream_Notify_Service+0x1cc>)
 800c666:	f8b3 007e 	ldrh.w	r0, [r3, #126]	@ 0x7e
 800c66a:	1d3a      	adds	r2, r7, #4
 800c66c:	4b17      	ldr	r3, [pc, #92]	@ (800c6cc <Add_EEG_Stream_Notify_Service+0x1d8>)
 800c66e:	9305      	str	r3, [sp, #20]
 800c670:	2301      	movs	r3, #1
 800c672:	9304      	str	r3, [sp, #16]
 800c674:	230a      	movs	r3, #10
 800c676:	9303      	str	r3, [sp, #12]
 800c678:	2301      	movs	r3, #1
 800c67a:	9302      	str	r3, [sp, #8]
 800c67c:	2300      	movs	r3, #0
 800c67e:	9301      	str	r3, [sp, #4]
 800c680:	2306      	movs	r3, #6
 800c682:	9300      	str	r3, [sp, #0]
 800c684:	2303      	movs	r3, #3
 800c686:	2102      	movs	r1, #2
 800c688:	f7fd fc26 	bl	8009ed8 <aci_gatt_add_char>
 800c68c:	4603      	mov	r3, r0
 800c68e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
						   GATT_NOTIFY_ATTRIBUTE_WRITE,
                           10,
                           CHAR_VALUE_LEN_VARIABLE,
                           &(BleApplicationContext.eeg_config_char_handle));

    if (ret != BLE_STATUS_SUCCESS)
 800c692:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c696:	2b00      	cmp	r3, #0
 800c698:	d008      	beq.n	800c6ac <Add_EEG_Stream_Notify_Service+0x1b8>
    {
        APP_DBG_MSG("Error adding New Notify Characteristic - ret=0x%x\n", ret);
 800c69a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c69e:	4619      	mov	r1, r3
 800c6a0:	4809      	ldr	r0, [pc, #36]	@ (800c6c8 <Add_EEG_Stream_Notify_Service+0x1d4>)
 800c6a2:	f001 ff45 	bl	800e530 <iprintf>
        return ret;
 800c6a6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c6aa:	e001      	b.n	800c6b0 <Add_EEG_Stream_Notify_Service+0x1bc>
    }

    return ret;
 800c6ac:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 800c6b0:	4618      	mov	r0, r3
 800c6b2:	3738      	adds	r7, #56	@ 0x38
 800c6b4:	46bd      	mov	sp, r7
 800c6b6:	bd80      	pop	{r7, pc}
 800c6b8:	20000552 	.word	0x20000552
 800c6bc:	0800fca4 	.word	0x0800fca4
 800c6c0:	200004d4 	.word	0x200004d4
 800c6c4:	2000055c 	.word	0x2000055c
 800c6c8:	0800fcd0 	.word	0x0800fcd0
 800c6cc:	20000566 	.word	0x20000566

0800c6d0 <Add_Event_Notify_Service>:



static tBleStatus Add_Event_Notify_Service(void)
{
 800c6d0:	b580      	push	{r7, lr}
 800c6d2:	b090      	sub	sp, #64	@ 0x40
 800c6d4:	af06      	add	r7, sp, #24
    tBleStatus ret = BLE_STATUS_SUCCESS;
 800c6d6:	2300      	movs	r3, #0
 800c6d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    uint8_t event_service_uuid[16];
    uint8_t event_char_uuid[16];

    // Add service
    COPY_EVENT_SERVICE_UUID(event_service_uuid);
 800c6dc:	231b      	movs	r3, #27
 800c6de:	753b      	strb	r3, [r7, #20]
 800c6e0:	23c5      	movs	r3, #197	@ 0xc5
 800c6e2:	757b      	strb	r3, [r7, #21]
 800c6e4:	23d5      	movs	r3, #213	@ 0xd5
 800c6e6:	75bb      	strb	r3, [r7, #22]
 800c6e8:	23a5      	movs	r3, #165	@ 0xa5
 800c6ea:	75fb      	strb	r3, [r7, #23]
 800c6ec:	2302      	movs	r3, #2
 800c6ee:	763b      	strb	r3, [r7, #24]
 800c6f0:	2300      	movs	r3, #0
 800c6f2:	767b      	strb	r3, [r7, #25]
 800c6f4:	2351      	movs	r3, #81	@ 0x51
 800c6f6:	76bb      	strb	r3, [r7, #26]
 800c6f8:	23a1      	movs	r3, #161	@ 0xa1
 800c6fa:	76fb      	strb	r3, [r7, #27]
 800c6fc:	23e5      	movs	r3, #229	@ 0xe5
 800c6fe:	773b      	strb	r3, [r7, #28]
 800c700:	2311      	movs	r3, #17
 800c702:	777b      	strb	r3, [r7, #29]
 800c704:	2367      	movs	r3, #103	@ 0x67
 800c706:	77bb      	strb	r3, [r7, #30]
 800c708:	2349      	movs	r3, #73	@ 0x49
 800c70a:	77fb      	strb	r3, [r7, #31]
 800c70c:	2300      	movs	r3, #0
 800c70e:	f887 3020 	strb.w	r3, [r7, #32]
 800c712:	2383      	movs	r3, #131	@ 0x83
 800c714:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
 800c718:	23a4      	movs	r3, #164	@ 0xa4
 800c71a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800c71e:	239f      	movs	r3, #159	@ 0x9f
 800c720:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    ret = aci_gatt_add_service(UUID_TYPE_128,
 800c724:	f107 0114 	add.w	r1, r7, #20
 800c728:	4b30      	ldr	r3, [pc, #192]	@ (800c7ec <Add_Event_Notify_Service+0x11c>)
 800c72a:	9300      	str	r3, [sp, #0]
 800c72c:	2305      	movs	r3, #5
 800c72e:	2201      	movs	r2, #1
 800c730:	2002      	movs	r0, #2
 800c732:	f7fd fafb 	bl	8009d2c <aci_gatt_add_service>
 800c736:	4603      	mov	r3, r0
 800c738:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                              (Service_UUID_t *) event_service_uuid,
                              PRIMARY_SERVICE,
                              2 + 3, /* 2 for service + 3 for 1 characteristic */
                              &(BleApplicationContext.BleApplicationContext_legacy.event_service_handle));

    if (ret != BLE_STATUS_SUCCESS)
 800c73c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c740:	2b00      	cmp	r3, #0
 800c742:	d008      	beq.n	800c756 <Add_Event_Notify_Service+0x86>
    {
        APP_DBG_MSG("Error adding New Notify Service - ret=0x%x\n", ret);
 800c744:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c748:	4619      	mov	r1, r3
 800c74a:	4829      	ldr	r0, [pc, #164]	@ (800c7f0 <Add_Event_Notify_Service+0x120>)
 800c74c:	f001 fef0 	bl	800e530 <iprintf>
        return ret;
 800c750:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c754:	e045      	b.n	800c7e2 <Add_Event_Notify_Service+0x112>
    }

    // Add characteristic
    COPY_EVENT_UUID(event_char_uuid);
 800c756:	231b      	movs	r3, #27
 800c758:	713b      	strb	r3, [r7, #4]
 800c75a:	23c5      	movs	r3, #197	@ 0xc5
 800c75c:	717b      	strb	r3, [r7, #5]
 800c75e:	23d5      	movs	r3, #213	@ 0xd5
 800c760:	71bb      	strb	r3, [r7, #6]
 800c762:	23a5      	movs	r3, #165	@ 0xa5
 800c764:	71fb      	strb	r3, [r7, #7]
 800c766:	2302      	movs	r3, #2
 800c768:	723b      	strb	r3, [r7, #8]
 800c76a:	2300      	movs	r3, #0
 800c76c:	727b      	strb	r3, [r7, #9]
 800c76e:	2351      	movs	r3, #81	@ 0x51
 800c770:	72bb      	strb	r3, [r7, #10]
 800c772:	23a1      	movs	r3, #161	@ 0xa1
 800c774:	72fb      	strb	r3, [r7, #11]
 800c776:	23e5      	movs	r3, #229	@ 0xe5
 800c778:	733b      	strb	r3, [r7, #12]
 800c77a:	2311      	movs	r3, #17
 800c77c:	737b      	strb	r3, [r7, #13]
 800c77e:	2367      	movs	r3, #103	@ 0x67
 800c780:	73bb      	strb	r3, [r7, #14]
 800c782:	2349      	movs	r3, #73	@ 0x49
 800c784:	73fb      	strb	r3, [r7, #15]
 800c786:	2301      	movs	r3, #1
 800c788:	743b      	strb	r3, [r7, #16]
 800c78a:	2383      	movs	r3, #131	@ 0x83
 800c78c:	747b      	strb	r3, [r7, #17]
 800c78e:	23a4      	movs	r3, #164	@ 0xa4
 800c790:	74bb      	strb	r3, [r7, #18]
 800c792:	239f      	movs	r3, #159	@ 0x9f
 800c794:	74fb      	strb	r3, [r7, #19]
    ret = aci_gatt_add_char(BleApplicationContext.BleApplicationContext_legacy.event_service_handle,
 800c796:	4b17      	ldr	r3, [pc, #92]	@ (800c7f4 <Add_Event_Notify_Service+0x124>)
 800c798:	f8b3 0080 	ldrh.w	r0, [r3, #128]	@ 0x80
 800c79c:	1d3a      	adds	r2, r7, #4
 800c79e:	4b16      	ldr	r3, [pc, #88]	@ (800c7f8 <Add_Event_Notify_Service+0x128>)
 800c7a0:	9305      	str	r3, [sp, #20]
 800c7a2:	2301      	movs	r3, #1
 800c7a4:	9304      	str	r3, [sp, #16]
 800c7a6:	230a      	movs	r3, #10
 800c7a8:	9303      	str	r3, [sp, #12]
 800c7aa:	2301      	movs	r3, #1
 800c7ac:	9302      	str	r3, [sp, #8]
 800c7ae:	2300      	movs	r3, #0
 800c7b0:	9301      	str	r3, [sp, #4]
 800c7b2:	2310      	movs	r3, #16
 800c7b4:	9300      	str	r3, [sp, #0]
 800c7b6:	2304      	movs	r3, #4
 800c7b8:	2102      	movs	r1, #2
 800c7ba:	f7fd fb8d 	bl	8009ed8 <aci_gatt_add_char>
 800c7be:	4603      	mov	r3, r0
 800c7c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
						   GATT_NOTIFY_ATTRIBUTE_WRITE,
                           10,
                           CHAR_VALUE_LEN_VARIABLE,
                           &(BleApplicationContext.event_char_handle));

    if (ret != BLE_STATUS_SUCCESS)
 800c7c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d008      	beq.n	800c7de <Add_Event_Notify_Service+0x10e>
    {
        APP_DBG_MSG("Error adding New Notify Characteristic - ret=0x%x\n", ret);
 800c7cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c7d0:	4619      	mov	r1, r3
 800c7d2:	480a      	ldr	r0, [pc, #40]	@ (800c7fc <Add_Event_Notify_Service+0x12c>)
 800c7d4:	f001 feac 	bl	800e530 <iprintf>
        return ret;
 800c7d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c7dc:	e001      	b.n	800c7e2 <Add_Event_Notify_Service+0x112>
    }


    return ret;
 800c7de:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800c7e2:	4618      	mov	r0, r3
 800c7e4:	3728      	adds	r7, #40	@ 0x28
 800c7e6:	46bd      	mov	sp, r7
 800c7e8:	bd80      	pop	{r7, pc}
 800c7ea:	bf00      	nop
 800c7ec:	20000554 	.word	0x20000554
 800c7f0:	0800fca4 	.word	0x0800fca4
 800c7f4:	200004d4 	.word	0x200004d4
 800c7f8:	2000055e 	.word	0x2000055e
 800c7fc:	0800fcd0 	.word	0x0800fcd0

0800c800 <Add_Motion_Notify_Service>:



static tBleStatus Add_Motion_Notify_Service(void)
{
 800c800:	b580      	push	{r7, lr}
 800c802:	b098      	sub	sp, #96	@ 0x60
 800c804:	af06      	add	r7, sp, #24
    tBleStatus ret = BLE_STATUS_SUCCESS;
 800c806:	2300      	movs	r3, #0
 800c808:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    uint8_t accel_char_uuid[16];
    uint8_t gyro_char_uuid[16];
    uint8_t compass_char_uuid[16];

    // Add service
    COPY_MOTION_SERVICE_UUID(motion_service_uuid);
 800c80c:	231b      	movs	r3, #27
 800c80e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
 800c812:	23c5      	movs	r3, #197	@ 0xc5
 800c814:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 800c818:	23d5      	movs	r3, #213	@ 0xd5
 800c81a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 800c81e:	23a5      	movs	r3, #165	@ 0xa5
 800c820:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c824:	2302      	movs	r3, #2
 800c826:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
 800c82a:	2300      	movs	r3, #0
 800c82c:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
 800c830:	2351      	movs	r3, #81	@ 0x51
 800c832:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
 800c836:	23a1      	movs	r3, #161	@ 0xa1
 800c838:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 800c83c:	23e5      	movs	r3, #229	@ 0xe5
 800c83e:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
 800c842:	2311      	movs	r3, #17
 800c844:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
 800c848:	2367      	movs	r3, #103	@ 0x67
 800c84a:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 800c84e:	2349      	movs	r3, #73	@ 0x49
 800c850:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800c854:	2300      	movs	r3, #0
 800c856:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
 800c85a:	2382      	movs	r3, #130	@ 0x82
 800c85c:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
 800c860:	23a4      	movs	r3, #164	@ 0xa4
 800c862:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c866:	239f      	movs	r3, #159	@ 0x9f
 800c868:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
    ret = aci_gatt_add_service(UUID_TYPE_128,
 800c86c:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 800c870:	4b38      	ldr	r3, [pc, #224]	@ (800c954 <Add_Motion_Notify_Service+0x154>)
 800c872:	9300      	str	r3, [sp, #0]
 800c874:	2305      	movs	r3, #5
 800c876:	2201      	movs	r2, #1
 800c878:	2002      	movs	r0, #2
 800c87a:	f7fd fa57 	bl	8009d2c <aci_gatt_add_service>
 800c87e:	4603      	mov	r3, r0
 800c880:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
                              (Service_UUID_t *) motion_service_uuid,
                              PRIMARY_SERVICE,
                              2 + 3, /* 2 for service + 6 for 1 characteristic */
                              &(BleApplicationContext.BleApplicationContext_legacy.motion_service_handle));

    if (ret != BLE_STATUS_SUCCESS)
 800c884:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d008      	beq.n	800c89e <Add_Motion_Notify_Service+0x9e>
    {
        APP_DBG_MSG("Error adding New Notify Service - ret=0x%x\n", ret);
 800c88c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800c890:	4619      	mov	r1, r3
 800c892:	4831      	ldr	r0, [pc, #196]	@ (800c958 <Add_Motion_Notify_Service+0x158>)
 800c894:	f001 fe4c 	bl	800e530 <iprintf>
        return ret;
 800c898:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800c89c:	e056      	b.n	800c94c <Add_Motion_Notify_Service+0x14c>
    }

    // Add characteristic
    COPY_ACCEL_UUID(accel_char_uuid);
 800c89e:	231b      	movs	r3, #27
 800c8a0:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 800c8a4:	23c5      	movs	r3, #197	@ 0xc5
 800c8a6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800c8aa:	23d5      	movs	r3, #213	@ 0xd5
 800c8ac:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800c8b0:	23a5      	movs	r3, #165	@ 0xa5
 800c8b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c8b6:	2302      	movs	r3, #2
 800c8b8:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 800c8bc:	2300      	movs	r3, #0
 800c8be:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 800c8c2:	2351      	movs	r3, #81	@ 0x51
 800c8c4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800c8c8:	23a1      	movs	r3, #161	@ 0xa1
 800c8ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c8ce:	23e5      	movs	r3, #229	@ 0xe5
 800c8d0:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 800c8d4:	2311      	movs	r3, #17
 800c8d6:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 800c8da:	2367      	movs	r3, #103	@ 0x67
 800c8dc:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800c8e0:	2349      	movs	r3, #73	@ 0x49
 800c8e2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800c8e6:	2301      	movs	r3, #1
 800c8e8:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
 800c8ec:	2382      	movs	r3, #130	@ 0x82
 800c8ee:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
 800c8f2:	23a4      	movs	r3, #164	@ 0xa4
 800c8f4:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
 800c8f8:	239f      	movs	r3, #159	@ 0x9f
 800c8fa:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    ret = aci_gatt_add_char(BleApplicationContext.BleApplicationContext_legacy.motion_service_handle,
 800c8fe:	4b17      	ldr	r3, [pc, #92]	@ (800c95c <Add_Motion_Notify_Service+0x15c>)
 800c900:	f8b3 0082 	ldrh.w	r0, [r3, #130]	@ 0x82
 800c904:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800c908:	4b15      	ldr	r3, [pc, #84]	@ (800c960 <Add_Motion_Notify_Service+0x160>)
 800c90a:	9305      	str	r3, [sp, #20]
 800c90c:	2300      	movs	r3, #0
 800c90e:	9304      	str	r3, [sp, #16]
 800c910:	230a      	movs	r3, #10
 800c912:	9303      	str	r3, [sp, #12]
 800c914:	2301      	movs	r3, #1
 800c916:	9302      	str	r3, [sp, #8]
 800c918:	2300      	movs	r3, #0
 800c91a:	9301      	str	r3, [sp, #4]
 800c91c:	2310      	movs	r3, #16
 800c91e:	9300      	str	r3, [sp, #0]
 800c920:	230c      	movs	r3, #12
 800c922:	2102      	movs	r1, #2
 800c924:	f7fd fad8 	bl	8009ed8 <aci_gatt_add_char>
 800c928:	4603      	mov	r3, r0
 800c92a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
						   GATT_NOTIFY_ATTRIBUTE_WRITE,
                           10,
                           0,
                           &(BleApplicationContext.accel_char_handle));

    if (ret != BLE_STATUS_SUCCESS)
 800c92e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800c932:	2b00      	cmp	r3, #0
 800c934:	d008      	beq.n	800c948 <Add_Motion_Notify_Service+0x148>
    {
        APP_DBG_MSG("Error adding New Notify Characteristic - ret=0x%x\n", ret);
 800c936:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800c93a:	4619      	mov	r1, r3
 800c93c:	4809      	ldr	r0, [pc, #36]	@ (800c964 <Add_Motion_Notify_Service+0x164>)
 800c93e:	f001 fdf7 	bl	800e530 <iprintf>
        return ret;
 800c942:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800c946:	e001      	b.n	800c94c <Add_Motion_Notify_Service+0x14c>
    }

    */


    return ret;
 800c948:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800c94c:	4618      	mov	r0, r3
 800c94e:	3748      	adds	r7, #72	@ 0x48
 800c950:	46bd      	mov	sp, r7
 800c952:	bd80      	pop	{r7, pc}
 800c954:	20000556 	.word	0x20000556
 800c958:	0800fca4 	.word	0x0800fca4
 800c95c:	200004d4 	.word	0x200004d4
 800c960:	20000560 	.word	0x20000560
 800c964:	0800fcd0 	.word	0x0800fcd0

0800c968 <SVCCTL_App_Notification>:




SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 800c968:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c96a:	b097      	sub	sp, #92	@ 0x5c
 800c96c:	af04      	add	r7, sp, #16
 800c96e:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  uint8_t           Tx_phy, Rx_phy;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 800c970:	2392      	movs	r3, #146	@ 0x92
 800c972:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  /* USER CODE BEGIN SVCCTL_App_Notification */
    char BdAddress[20];
    const uint8_t *bdaddr; 
  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	3301      	adds	r3, #1
 800c97a:	643b      	str	r3, [r7, #64]	@ 0x40

  switch (p_event_pckt->evt)
 800c97c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c97e:	781b      	ldrb	r3, [r3, #0]
 800c980:	2bff      	cmp	r3, #255	@ 0xff
 800c982:	f000 8187 	beq.w	800cc94 <SVCCTL_App_Notification+0x32c>
 800c986:	2bff      	cmp	r3, #255	@ 0xff
 800c988:	f300 8273 	bgt.w	800ce72 <SVCCTL_App_Notification+0x50a>
 800c98c:	2b05      	cmp	r3, #5
 800c98e:	d002      	beq.n	800c996 <SVCCTL_App_Notification+0x2e>
 800c990:	2b3e      	cmp	r3, #62	@ 0x3e
 800c992:	d055      	beq.n	800ca40 <SVCCTL_App_Notification+0xd8>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 800c994:	e26d      	b.n	800ce72 <SVCCTL_App_Notification+0x50a>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 800c996:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c998:	3302      	adds	r3, #2
 800c99a:	623b      	str	r3, [r7, #32]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 800c99c:	6a3b      	ldr	r3, [r7, #32]
 800c99e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800c9a2:	b29a      	uxth	r2, r3
 800c9a4:	4baa      	ldr	r3, [pc, #680]	@ (800cc50 <SVCCTL_App_Notification+0x2e8>)
 800c9a6:	8adb      	ldrh	r3, [r3, #22]
 800c9a8:	429a      	cmp	r2, r3
 800c9aa:	d117      	bne.n	800c9dc <SVCCTL_App_Notification+0x74>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 800c9ac:	4ba8      	ldr	r3, [pc, #672]	@ (800cc50 <SVCCTL_App_Notification+0x2e8>)
 800c9ae:	2200      	movs	r2, #0
 800c9b0:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800c9b2:	4ba7      	ldr	r3, [pc, #668]	@ (800cc50 <SVCCTL_App_Notification+0x2e8>)
 800c9b4:	2200      	movs	r2, #0
 800c9b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
        APP_DBG_MSG(">>== HCI_DISCONNECTION_COMPLETE_EVT_CODE\n");
 800c9ba:	48a6      	ldr	r0, [pc, #664]	@ (800cc54 <SVCCTL_App_Notification+0x2ec>)
 800c9bc:	f001 fe28 	bl	800e610 <puts>
                    p_disconnection_complete_event->Connection_Handle,
 800c9c0:	6a3b      	ldr	r3, [r7, #32]
 800c9c2:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800c9c6:	b29b      	uxth	r3, r3
        APP_DBG_MSG("     - Connection Handle:   0x%x\n     - Reason:    0x%x\n\r",
 800c9c8:	4619      	mov	r1, r3
                    p_disconnection_complete_event->Reason);
 800c9ca:	6a3b      	ldr	r3, [r7, #32]
 800c9cc:	78db      	ldrb	r3, [r3, #3]
        APP_DBG_MSG("     - Connection Handle:   0x%x\n     - Reason:    0x%x\n\r",
 800c9ce:	461a      	mov	r2, r3
 800c9d0:	48a1      	ldr	r0, [pc, #644]	@ (800cc58 <SVCCTL_App_Notification+0x2f0>)
 800c9d2:	f001 fdad 	bl	800e530 <iprintf>
        mutex = 1;
 800c9d6:	4ba1      	ldr	r3, [pc, #644]	@ (800cc5c <SVCCTL_App_Notification+0x2f4>)
 800c9d8:	2201      	movs	r2, #1
 800c9da:	701a      	strb	r2, [r3, #0]
      Adv_Request(APP_BLE_FAST_ADV);
 800c9dc:	2001      	movs	r0, #1
 800c9de:	f000 fca1 	bl	800d324 <Adv_Request>
      HandleNotification.P2P_Evt_Opcode = PEER_DISCON_HANDLE_EVT;
 800c9e2:	4b9f      	ldr	r3, [pc, #636]	@ (800cc60 <SVCCTL_App_Notification+0x2f8>)
 800c9e4:	2201      	movs	r2, #1
 800c9e6:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800c9e8:	4b99      	ldr	r3, [pc, #612]	@ (800cc50 <SVCCTL_App_Notification+0x2e8>)
 800c9ea:	8ada      	ldrh	r2, [r3, #22]
 800c9ec:	4b9c      	ldr	r3, [pc, #624]	@ (800cc60 <SVCCTL_App_Notification+0x2f8>)
 800c9ee:	805a      	strh	r2, [r3, #2]
      P2PS_APP_Notification(&HandleNotification);
 800c9f0:	489b      	ldr	r0, [pc, #620]	@ (800cc60 <SVCCTL_App_Notification+0x2f8>)
 800c9f2:	f000 feff 	bl	800d7f4 <P2PS_APP_Notification>
      bdaddr= BleGetBdAddress();
 800c9f6:	f000 fd33 	bl	800d460 <BleGetBdAddress>
 800c9fa:	6278      	str	r0, [r7, #36]	@ 0x24
      sprintf(BdAddress, "BD_ad=%02x%02x%02x%02x%02x%02x", bdaddr[5], bdaddr[4], bdaddr[3], bdaddr[2], bdaddr[1], bdaddr[0]);
 800c9fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9fe:	3305      	adds	r3, #5
 800ca00:	781b      	ldrb	r3, [r3, #0]
 800ca02:	461d      	mov	r5, r3
 800ca04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca06:	3304      	adds	r3, #4
 800ca08:	781b      	ldrb	r3, [r3, #0]
 800ca0a:	461e      	mov	r6, r3
 800ca0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca0e:	3303      	adds	r3, #3
 800ca10:	781b      	ldrb	r3, [r3, #0]
 800ca12:	461a      	mov	r2, r3
 800ca14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca16:	3302      	adds	r3, #2
 800ca18:	781b      	ldrb	r3, [r3, #0]
 800ca1a:	4619      	mov	r1, r3
 800ca1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca1e:	3301      	adds	r3, #1
 800ca20:	781b      	ldrb	r3, [r3, #0]
 800ca22:	461c      	mov	r4, r3
 800ca24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca26:	781b      	ldrb	r3, [r3, #0]
 800ca28:	f107 0008 	add.w	r0, r7, #8
 800ca2c:	9303      	str	r3, [sp, #12]
 800ca2e:	9402      	str	r4, [sp, #8]
 800ca30:	9101      	str	r1, [sp, #4]
 800ca32:	9200      	str	r2, [sp, #0]
 800ca34:	4633      	mov	r3, r6
 800ca36:	462a      	mov	r2, r5
 800ca38:	498a      	ldr	r1, [pc, #552]	@ (800cc64 <SVCCTL_App_Notification+0x2fc>)
 800ca3a:	f001 fdf1 	bl	800e620 <siprintf>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 800ca3e:	e21b      	b.n	800ce78 <SVCCTL_App_Notification+0x510>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 800ca40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ca42:	3302      	adds	r3, #2
 800ca44:	637b      	str	r3, [r7, #52]	@ 0x34
      switch (p_meta_evt->subevent)
 800ca46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca48:	781b      	ldrb	r3, [r3, #0]
 800ca4a:	2b0c      	cmp	r3, #12
 800ca4c:	d033      	beq.n	800cab6 <SVCCTL_App_Notification+0x14e>
 800ca4e:	2b0c      	cmp	r3, #12
 800ca50:	f300 80fc 	bgt.w	800cc4c <SVCCTL_App_Notification+0x2e4>
 800ca54:	2b01      	cmp	r3, #1
 800ca56:	d06c      	beq.n	800cb32 <SVCCTL_App_Notification+0x1ca>
 800ca58:	2b03      	cmp	r3, #3
 800ca5a:	f040 80f7 	bne.w	800cc4c <SVCCTL_App_Notification+0x2e4>
          p_connection_update_complete_event = (hci_le_connection_update_complete_event_rp0 *) p_meta_evt->data;
 800ca5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca60:	3301      	adds	r3, #1
 800ca62:	62fb      	str	r3, [r7, #44]	@ 0x2c
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_UPDATE_COMPLETE_SUBEVT_CODE\n");
 800ca64:	4880      	ldr	r0, [pc, #512]	@ (800cc68 <SVCCTL_App_Notification+0x300>)
 800ca66:	f001 fdd3 	bl	800e610 <puts>
                       p_connection_update_complete_event->Conn_Interval*1.25,
 800ca6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca6c:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800ca70:	b29b      	uxth	r3, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800ca72:	4618      	mov	r0, r3
 800ca74:	f7f3 fe58 	bl	8000728 <__aeabi_i2d>
 800ca78:	f04f 0200 	mov.w	r2, #0
 800ca7c:	4b7b      	ldr	r3, [pc, #492]	@ (800cc6c <SVCCTL_App_Notification+0x304>)
 800ca7e:	f7f3 fbd7 	bl	8000230 <__aeabi_dmul>
 800ca82:	4602      	mov	r2, r0
 800ca84:	460b      	mov	r3, r1
 800ca86:	4610      	mov	r0, r2
 800ca88:	4619      	mov	r1, r3
                       p_connection_update_complete_event->Conn_Latency,
 800ca8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca8c:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800ca90:	b29b      	uxth	r3, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800ca92:	461c      	mov	r4, r3
                       p_connection_update_complete_event->Supervision_Timeout*10);
 800ca94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca96:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800ca9a:	b29b      	uxth	r3, r3
 800ca9c:	461a      	mov	r2, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800ca9e:	4613      	mov	r3, r2
 800caa0:	009b      	lsls	r3, r3, #2
 800caa2:	4413      	add	r3, r2
 800caa4:	005b      	lsls	r3, r3, #1
 800caa6:	9301      	str	r3, [sp, #4]
 800caa8:	9400      	str	r4, [sp, #0]
 800caaa:	4602      	mov	r2, r0
 800caac:	460b      	mov	r3, r1
 800caae:	4870      	ldr	r0, [pc, #448]	@ (800cc70 <SVCCTL_App_Notification+0x308>)
 800cab0:	f001 fd3e 	bl	800e530 <iprintf>
          break;
 800cab4:	e0cb      	b.n	800cc4e <SVCCTL_App_Notification+0x2e6>
          p_evt_le_phy_update_complete = (hci_le_phy_update_complete_event_rp0*)p_meta_evt->data;
 800cab6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cab8:	3301      	adds	r3, #1
 800caba:	633b      	str	r3, [r7, #48]	@ 0x30
          APP_DBG_MSG("==>> HCI_LE_PHY_UPDATE_COMPLETE_SUBEVT_CODE - ");
 800cabc:	486d      	ldr	r0, [pc, #436]	@ (800cc74 <SVCCTL_App_Notification+0x30c>)
 800cabe:	f001 fd37 	bl	800e530 <iprintf>
          if (p_evt_le_phy_update_complete->Status == 0)
 800cac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cac4:	781b      	ldrb	r3, [r3, #0]
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d103      	bne.n	800cad2 <SVCCTL_App_Notification+0x16a>
            APP_DBG_MSG("status ok \n");
 800caca:	486b      	ldr	r0, [pc, #428]	@ (800cc78 <SVCCTL_App_Notification+0x310>)
 800cacc:	f001 fda0 	bl	800e610 <puts>
 800cad0:	e002      	b.n	800cad8 <SVCCTL_App_Notification+0x170>
            APP_DBG_MSG("status nok \n");
 800cad2:	486a      	ldr	r0, [pc, #424]	@ (800cc7c <SVCCTL_App_Notification+0x314>)
 800cad4:	f001 fd9c 	bl	800e610 <puts>
          ret = hci_le_read_phy(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, &Tx_phy, &Rx_phy);
 800cad8:	4b5d      	ldr	r3, [pc, #372]	@ (800cc50 <SVCCTL_App_Notification+0x2e8>)
 800cada:	8adb      	ldrh	r3, [r3, #22]
 800cadc:	f107 021e 	add.w	r2, r7, #30
 800cae0:	f107 011f 	add.w	r1, r7, #31
 800cae4:	4618      	mov	r0, r3
 800cae6:	f7fd fd61 	bl	800a5ac <hci_le_read_phy>
 800caea:	4603      	mov	r3, r0
 800caec:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
          if (ret != BLE_STATUS_SUCCESS)
 800caf0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d003      	beq.n	800cb00 <SVCCTL_App_Notification+0x198>
            APP_DBG_MSG("==>> hci_le_read_phy : fail\n\r");
 800caf8:	4861      	ldr	r0, [pc, #388]	@ (800cc80 <SVCCTL_App_Notification+0x318>)
 800cafa:	f001 fd19 	bl	800e530 <iprintf>
          break;
 800cafe:	e0a6      	b.n	800cc4e <SVCCTL_App_Notification+0x2e6>
            APP_DBG_MSG("==>> hci_le_read_phy - Success \n");
 800cb00:	4860      	ldr	r0, [pc, #384]	@ (800cc84 <SVCCTL_App_Notification+0x31c>)
 800cb02:	f001 fd85 	bl	800e610 <puts>
            if ((Tx_phy == TX_2M) && (Rx_phy == RX_2M))
 800cb06:	7ffb      	ldrb	r3, [r7, #31]
 800cb08:	2b02      	cmp	r3, #2
 800cb0a:	d10a      	bne.n	800cb22 <SVCCTL_App_Notification+0x1ba>
 800cb0c:	7fbb      	ldrb	r3, [r7, #30]
 800cb0e:	2b02      	cmp	r3, #2
 800cb10:	d107      	bne.n	800cb22 <SVCCTL_App_Notification+0x1ba>
              APP_DBG_MSG("==>> PHY Param  TX= %d, RX= %d \n\r", Tx_phy, Rx_phy);
 800cb12:	7ffb      	ldrb	r3, [r7, #31]
 800cb14:	4619      	mov	r1, r3
 800cb16:	7fbb      	ldrb	r3, [r7, #30]
 800cb18:	461a      	mov	r2, r3
 800cb1a:	485b      	ldr	r0, [pc, #364]	@ (800cc88 <SVCCTL_App_Notification+0x320>)
 800cb1c:	f001 fd08 	bl	800e530 <iprintf>
          break;
 800cb20:	e095      	b.n	800cc4e <SVCCTL_App_Notification+0x2e6>
              APP_DBG_MSG("==>> PHY Param  TX= %d, RX= %d \n\r", Tx_phy, Rx_phy);
 800cb22:	7ffb      	ldrb	r3, [r7, #31]
 800cb24:	4619      	mov	r1, r3
 800cb26:	7fbb      	ldrb	r3, [r7, #30]
 800cb28:	461a      	mov	r2, r3
 800cb2a:	4857      	ldr	r0, [pc, #348]	@ (800cc88 <SVCCTL_App_Notification+0x320>)
 800cb2c:	f001 fd00 	bl	800e530 <iprintf>
          break;
 800cb30:	e08d      	b.n	800cc4e <SVCCTL_App_Notification+0x2e6>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 800cb32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb34:	3301      	adds	r3, #1
 800cb36:	62bb      	str	r3, [r7, #40]	@ 0x28
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE - Connection handle: 0x%x\n", p_connection_complete_event->Connection_Handle);
 800cb38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb3a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800cb3e:	b29b      	uxth	r3, r3
 800cb40:	4619      	mov	r1, r3
 800cb42:	4852      	ldr	r0, [pc, #328]	@ (800cc8c <SVCCTL_App_Notification+0x324>)
 800cb44:	f001 fcf4 	bl	800e530 <iprintf>
                      p_connection_complete_event->Peer_Address[5],
 800cb48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb4a:	7a9b      	ldrb	r3, [r3, #10]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 800cb4c:	4618      	mov	r0, r3
                      p_connection_complete_event->Peer_Address[4],
 800cb4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb50:	7a5b      	ldrb	r3, [r3, #9]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 800cb52:	461c      	mov	r4, r3
                      p_connection_complete_event->Peer_Address[3],
 800cb54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb56:	7a1b      	ldrb	r3, [r3, #8]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 800cb58:	461d      	mov	r5, r3
                      p_connection_complete_event->Peer_Address[2],
 800cb5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb5c:	79db      	ldrb	r3, [r3, #7]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 800cb5e:	461a      	mov	r2, r3
                      p_connection_complete_event->Peer_Address[1],
 800cb60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb62:	799b      	ldrb	r3, [r3, #6]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 800cb64:	4619      	mov	r1, r3
                      p_connection_complete_event->Peer_Address[0]);
 800cb66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb68:	795b      	ldrb	r3, [r3, #5]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 800cb6a:	9302      	str	r3, [sp, #8]
 800cb6c:	9101      	str	r1, [sp, #4]
 800cb6e:	9200      	str	r2, [sp, #0]
 800cb70:	462b      	mov	r3, r5
 800cb72:	4622      	mov	r2, r4
 800cb74:	4601      	mov	r1, r0
 800cb76:	4846      	ldr	r0, [pc, #280]	@ (800cc90 <SVCCTL_App_Notification+0x328>)
 800cb78:	f001 fcda 	bl	800e530 <iprintf>
                      p_connection_complete_event->Conn_Interval*1.25,
 800cb7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb7e:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 800cb82:	b29b      	uxth	r3, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800cb84:	4618      	mov	r0, r3
 800cb86:	f7f3 fdcf 	bl	8000728 <__aeabi_i2d>
 800cb8a:	f04f 0200 	mov.w	r2, #0
 800cb8e:	4b37      	ldr	r3, [pc, #220]	@ (800cc6c <SVCCTL_App_Notification+0x304>)
 800cb90:	f7f3 fb4e 	bl	8000230 <__aeabi_dmul>
 800cb94:	4602      	mov	r2, r0
 800cb96:	460b      	mov	r3, r1
 800cb98:	4610      	mov	r0, r2
 800cb9a:	4619      	mov	r1, r3
                      p_connection_complete_event->Conn_Latency,
 800cb9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb9e:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 800cba2:	b29b      	uxth	r3, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800cba4:	461c      	mov	r4, r3
                      p_connection_complete_event->Supervision_Timeout*10
 800cba6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cba8:	f8b3 300f 	ldrh.w	r3, [r3, #15]
 800cbac:	b29b      	uxth	r3, r3
 800cbae:	461a      	mov	r2, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800cbb0:	4613      	mov	r3, r2
 800cbb2:	009b      	lsls	r3, r3, #2
 800cbb4:	4413      	add	r3, r2
 800cbb6:	005b      	lsls	r3, r3, #1
 800cbb8:	9301      	str	r3, [sp, #4]
 800cbba:	9400      	str	r4, [sp, #0]
 800cbbc:	4602      	mov	r2, r0
 800cbbe:	460b      	mov	r3, r1
 800cbc0:	482b      	ldr	r0, [pc, #172]	@ (800cc70 <SVCCTL_App_Notification+0x308>)
 800cbc2:	f001 fcb5 	bl	800e530 <iprintf>
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 800cbc6:	4b22      	ldr	r3, [pc, #136]	@ (800cc50 <SVCCTL_App_Notification+0x2e8>)
 800cbc8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800cbcc:	2b04      	cmp	r3, #4
 800cbce:	d104      	bne.n	800cbda <SVCCTL_App_Notification+0x272>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 800cbd0:	4b1f      	ldr	r3, [pc, #124]	@ (800cc50 <SVCCTL_App_Notification+0x2e8>)
 800cbd2:	2206      	movs	r2, #6
 800cbd4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 800cbd8:	e003      	b.n	800cbe2 <SVCCTL_App_Notification+0x27a>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 800cbda:	4b1d      	ldr	r3, [pc, #116]	@ (800cc50 <SVCCTL_App_Notification+0x2e8>)
 800cbdc:	2205      	movs	r2, #5
 800cbde:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 800cbe2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbe4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800cbe8:	b29a      	uxth	r2, r3
 800cbea:	4b19      	ldr	r3, [pc, #100]	@ (800cc50 <SVCCTL_App_Notification+0x2e8>)
 800cbec:	82da      	strh	r2, [r3, #22]
          HandleNotification.P2P_Evt_Opcode = PEER_CONN_HANDLE_EVT;
 800cbee:	4b1c      	ldr	r3, [pc, #112]	@ (800cc60 <SVCCTL_App_Notification+0x2f8>)
 800cbf0:	2200      	movs	r2, #0
 800cbf2:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800cbf4:	4b16      	ldr	r3, [pc, #88]	@ (800cc50 <SVCCTL_App_Notification+0x2e8>)
 800cbf6:	8ada      	ldrh	r2, [r3, #22]
 800cbf8:	4b19      	ldr	r3, [pc, #100]	@ (800cc60 <SVCCTL_App_Notification+0x2f8>)
 800cbfa:	805a      	strh	r2, [r3, #2]
          P2PS_APP_Notification(&HandleNotification);
 800cbfc:	4818      	ldr	r0, [pc, #96]	@ (800cc60 <SVCCTL_App_Notification+0x2f8>)
 800cbfe:	f000 fdf9 	bl	800d7f4 <P2PS_APP_Notification>
          bdaddr= BleGetBdAddress();
 800cc02:	f000 fc2d 	bl	800d460 <BleGetBdAddress>
 800cc06:	6278      	str	r0, [r7, #36]	@ 0x24
          sprintf(BdAddress, "BD_ad=%02x%02x%02x%02x%02x%02x", bdaddr[5],bdaddr[4],bdaddr[3],bdaddr[2],bdaddr[1],bdaddr[0]);
 800cc08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc0a:	3305      	adds	r3, #5
 800cc0c:	781b      	ldrb	r3, [r3, #0]
 800cc0e:	461d      	mov	r5, r3
 800cc10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc12:	3304      	adds	r3, #4
 800cc14:	781b      	ldrb	r3, [r3, #0]
 800cc16:	461e      	mov	r6, r3
 800cc18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc1a:	3303      	adds	r3, #3
 800cc1c:	781b      	ldrb	r3, [r3, #0]
 800cc1e:	461a      	mov	r2, r3
 800cc20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc22:	3302      	adds	r3, #2
 800cc24:	781b      	ldrb	r3, [r3, #0]
 800cc26:	4619      	mov	r1, r3
 800cc28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc2a:	3301      	adds	r3, #1
 800cc2c:	781b      	ldrb	r3, [r3, #0]
 800cc2e:	461c      	mov	r4, r3
 800cc30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc32:	781b      	ldrb	r3, [r3, #0]
 800cc34:	f107 0008 	add.w	r0, r7, #8
 800cc38:	9303      	str	r3, [sp, #12]
 800cc3a:	9402      	str	r4, [sp, #8]
 800cc3c:	9101      	str	r1, [sp, #4]
 800cc3e:	9200      	str	r2, [sp, #0]
 800cc40:	4633      	mov	r3, r6
 800cc42:	462a      	mov	r2, r5
 800cc44:	4907      	ldr	r1, [pc, #28]	@ (800cc64 <SVCCTL_App_Notification+0x2fc>)
 800cc46:	f001 fceb 	bl	800e620 <siprintf>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 800cc4a:	e000      	b.n	800cc4e <SVCCTL_App_Notification+0x2e6>
          break;
 800cc4c:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 800cc4e:	e113      	b.n	800ce78 <SVCCTL_App_Notification+0x510>
 800cc50:	200004d4 	.word	0x200004d4
 800cc54:	0800fd04 	.word	0x0800fd04
 800cc58:	0800fd30 	.word	0x0800fd30
 800cc5c:	20000571 	.word	0x20000571
 800cc60:	2000056c 	.word	0x2000056c
 800cc64:	0800fc10 	.word	0x0800fc10
 800cc68:	0800fd6c 	.word	0x0800fd6c
 800cc6c:	3ff40000 	.word	0x3ff40000
 800cc70:	0800fda0 	.word	0x0800fda0
 800cc74:	0800fe0c 	.word	0x0800fe0c
 800cc78:	0800fe3c 	.word	0x0800fe3c
 800cc7c:	0800fe48 	.word	0x0800fe48
 800cc80:	0800fe54 	.word	0x0800fe54
 800cc84:	0800fe74 	.word	0x0800fe74
 800cc88:	0800fe94 	.word	0x0800fe94
 800cc8c:	0800feb8 	.word	0x0800feb8
 800cc90:	0800ff00 	.word	0x0800ff00
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 800cc94:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cc96:	3302      	adds	r3, #2
 800cc98:	63fb      	str	r3, [r7, #60]	@ 0x3c
      switch (p_blecore_evt->ecode)
 800cc9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cc9c:	881b      	ldrh	r3, [r3, #0]
 800cc9e:	b29b      	uxth	r3, r3
 800cca0:	f640 420e 	movw	r2, #3086	@ 0xc0e
 800cca4:	4293      	cmp	r3, r2
 800cca6:	f000 80da 	beq.w	800ce5e <SVCCTL_App_Notification+0x4f6>
 800ccaa:	f640 420e 	movw	r2, #3086	@ 0xc0e
 800ccae:	4293      	cmp	r3, r2
 800ccb0:	f300 80e1 	bgt.w	800ce76 <SVCCTL_App_Notification+0x50e>
 800ccb4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ccb8:	f000 80c1 	beq.w	800ce3e <SVCCTL_App_Notification+0x4d6>
 800ccbc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ccc0:	f300 80d9 	bgt.w	800ce76 <SVCCTL_App_Notification+0x50e>
 800ccc4:	2b04      	cmp	r3, #4
 800ccc6:	f000 80c2 	beq.w	800ce4e <SVCCTL_App_Notification+0x4e6>
 800ccca:	2b04      	cmp	r3, #4
 800cccc:	f2c0 80d3 	blt.w	800ce76 <SVCCTL_App_Notification+0x50e>
 800ccd0:	f240 420a 	movw	r2, #1034	@ 0x40a
 800ccd4:	4293      	cmp	r3, r2
 800ccd6:	f300 80ce 	bgt.w	800ce76 <SVCCTL_App_Notification+0x50e>
 800ccda:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ccde:	f2c0 80ca 	blt.w	800ce76 <SVCCTL_App_Notification+0x50e>
 800cce2:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 800cce6:	2b0a      	cmp	r3, #10
 800cce8:	f200 80c5 	bhi.w	800ce76 <SVCCTL_App_Notification+0x50e>
 800ccec:	a201      	add	r2, pc, #4	@ (adr r2, 800ccf4 <SVCCTL_App_Notification+0x38c>)
 800ccee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccf2:	bf00      	nop
 800ccf4:	0800cd21 	.word	0x0800cd21
 800ccf8:	0800ce09 	.word	0x0800ce09
 800ccfc:	0800cd29 	.word	0x0800cd29
 800cd00:	0800cd5f 	.word	0x0800cd5f
 800cd04:	0800cd67 	.word	0x0800cd67
 800cd08:	0800cd6f 	.word	0x0800cd6f
 800cd0c:	0800ce77 	.word	0x0800ce77
 800cd10:	0800ce47 	.word	0x0800ce47
 800cd14:	0800cda3 	.word	0x0800cda3
 800cd18:	0800cdb3 	.word	0x0800cdb3
 800cd1c:	0800cdab 	.word	0x0800cdab
          APP_DBG_MSG(">>== ACI_GAP_LIMITED_DISCOVERABLE_VSEVT_CODE \n");
 800cd20:	4858      	ldr	r0, [pc, #352]	@ (800ce84 <SVCCTL_App_Notification+0x51c>)
 800cd22:	f001 fc75 	bl	800e610 <puts>
          break; /* ACI_GAP_LIMITED_DISCOVERABLE_VSEVT_CODE */
 800cd26:	e0a3      	b.n	800ce70 <SVCCTL_App_Notification+0x508>
          APP_DBG_MSG(">>== ACI_GAP_PASS_KEY_REQ_VSEVT_CODE \n");
 800cd28:	4857      	ldr	r0, [pc, #348]	@ (800ce88 <SVCCTL_App_Notification+0x520>)
 800cd2a:	f001 fc71 	bl	800e610 <puts>
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,123456);
 800cd2e:	4b57      	ldr	r3, [pc, #348]	@ (800ce8c <SVCCTL_App_Notification+0x524>)
 800cd30:	8adb      	ldrh	r3, [r3, #22]
 800cd32:	4957      	ldr	r1, [pc, #348]	@ (800ce90 <SVCCTL_App_Notification+0x528>)
 800cd34:	4618      	mov	r0, r3
 800cd36:	f7fc fd6f 	bl	8009818 <aci_gap_pass_key_resp>
 800cd3a:	4603      	mov	r3, r0
 800cd3c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
          if (ret != BLE_STATUS_SUCCESS)
 800cd40:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d006      	beq.n	800cd56 <SVCCTL_App_Notification+0x3ee>
            APP_DBG_MSG("==>> aci_gap_pass_key_resp : Fail, reason: 0x%x\n", ret);
 800cd48:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800cd4c:	4619      	mov	r1, r3
 800cd4e:	4851      	ldr	r0, [pc, #324]	@ (800ce94 <SVCCTL_App_Notification+0x52c>)
 800cd50:	f001 fbee 	bl	800e530 <iprintf>
          break; /* ACI_GAP_PASS_KEY_REQ_VSEVT_CODE */
 800cd54:	e08c      	b.n	800ce70 <SVCCTL_App_Notification+0x508>
            APP_DBG_MSG("==>> aci_gap_pass_key_resp : Success \n");
 800cd56:	4850      	ldr	r0, [pc, #320]	@ (800ce98 <SVCCTL_App_Notification+0x530>)
 800cd58:	f001 fc5a 	bl	800e610 <puts>
          break; /* ACI_GAP_PASS_KEY_REQ_VSEVT_CODE */
 800cd5c:	e088      	b.n	800ce70 <SVCCTL_App_Notification+0x508>
          APP_DBG_MSG(">>== ACI_GAP_AUTHORIZATION_REQ_VSEVT_CODE\n");
 800cd5e:	484f      	ldr	r0, [pc, #316]	@ (800ce9c <SVCCTL_App_Notification+0x534>)
 800cd60:	f001 fc56 	bl	800e610 <puts>
          break; /* ACI_GAP_AUTHORIZATION_REQ_VSEVT_CODE */
 800cd64:	e084      	b.n	800ce70 <SVCCTL_App_Notification+0x508>
          APP_DBG_MSG("==>> ACI_GAP_PERIPHERAL_SECURITY_INITIATED_VSEVT_CODE \n");
 800cd66:	484e      	ldr	r0, [pc, #312]	@ (800cea0 <SVCCTL_App_Notification+0x538>)
 800cd68:	f001 fc52 	bl	800e610 <puts>
          break; /* ACI_GAP_PERIPHERAL_SECURITY_INITIATED_VSEVT_CODE */
 800cd6c:	e080      	b.n	800ce70 <SVCCTL_App_Notification+0x508>
          APP_DBG_MSG("==>> ACI_GAP_BOND_LOST_VSEVT_CODE \n");
 800cd6e:	484d      	ldr	r0, [pc, #308]	@ (800cea4 <SVCCTL_App_Notification+0x53c>)
 800cd70:	f001 fc4e 	bl	800e610 <puts>
          ret = aci_gap_allow_rebond(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 800cd74:	4b45      	ldr	r3, [pc, #276]	@ (800ce8c <SVCCTL_App_Notification+0x524>)
 800cd76:	8adb      	ldrh	r3, [r3, #22]
 800cd78:	4618      	mov	r0, r3
 800cd7a:	f7fc fef7 	bl	8009b6c <aci_gap_allow_rebond>
 800cd7e:	4603      	mov	r3, r0
 800cd80:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
          if (ret != BLE_STATUS_SUCCESS)
 800cd84:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d006      	beq.n	800cd9a <SVCCTL_App_Notification+0x432>
            APP_DBG_MSG("==>> aci_gap_allow_rebond : Fail, reason: 0x%x\n", ret);
 800cd8c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800cd90:	4619      	mov	r1, r3
 800cd92:	4845      	ldr	r0, [pc, #276]	@ (800cea8 <SVCCTL_App_Notification+0x540>)
 800cd94:	f001 fbcc 	bl	800e530 <iprintf>
          break; /* ACI_GAP_BOND_LOST_VSEVT_CODE */
 800cd98:	e06a      	b.n	800ce70 <SVCCTL_App_Notification+0x508>
            APP_DBG_MSG("==>> aci_gap_allow_rebond : Success \n");
 800cd9a:	4844      	ldr	r0, [pc, #272]	@ (800ceac <SVCCTL_App_Notification+0x544>)
 800cd9c:	f001 fc38 	bl	800e610 <puts>
          break; /* ACI_GAP_BOND_LOST_VSEVT_CODE */
 800cda0:	e066      	b.n	800ce70 <SVCCTL_App_Notification+0x508>
          APP_DBG_MSG(">>== ACI_GAP_ADDR_NOT_RESOLVED_VSEVT_CODE \n");
 800cda2:	4843      	ldr	r0, [pc, #268]	@ (800ceb0 <SVCCTL_App_Notification+0x548>)
 800cda4:	f001 fc34 	bl	800e610 <puts>
          break; /* ACI_GAP_ADDR_NOT_RESOLVED_VSEVT_CODE */
 800cda8:	e062      	b.n	800ce70 <SVCCTL_App_Notification+0x508>
          APP_DBG_MSG(">>== ACI_GAP_KEYPRESS_NOTIFICATION_VSEVT_CODE\n");
 800cdaa:	4842      	ldr	r0, [pc, #264]	@ (800ceb4 <SVCCTL_App_Notification+0x54c>)
 800cdac:	f001 fc30 	bl	800e610 <puts>
          break; /* ACI_GAP_KEYPRESS_NOTIFICATION_VSEVT_CODE */    
 800cdb0:	e05e      	b.n	800ce70 <SVCCTL_App_Notification+0x508>
          APP_DBG_MSG(">>== ACI_GAP_NUMERIC_COMPARISON_VALUE_VSEVT_CODE\n");
 800cdb2:	4841      	ldr	r0, [pc, #260]	@ (800ceb8 <SVCCTL_App_Notification+0x550>)
 800cdb4:	f001 fc2c 	bl	800e610 <puts>
                      ((aci_gap_numeric_comparison_value_event_rp0 *)(p_blecore_evt->data))->Numeric_Value);
 800cdb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cdba:	3302      	adds	r3, #2
          APP_DBG_MSG("     - numeric_value = %ld\n",
 800cdbc:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800cdc0:	4619      	mov	r1, r3
 800cdc2:	483e      	ldr	r0, [pc, #248]	@ (800cebc <SVCCTL_App_Notification+0x554>)
 800cdc4:	f001 fbb4 	bl	800e530 <iprintf>
                      ((aci_gap_numeric_comparison_value_event_rp0 *)(p_blecore_evt->data))->Numeric_Value);
 800cdc8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cdca:	3302      	adds	r3, #2
          APP_DBG_MSG("     - Hex_value = %lx\n",
 800cdcc:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800cdd0:	4619      	mov	r1, r3
 800cdd2:	483b      	ldr	r0, [pc, #236]	@ (800cec0 <SVCCTL_App_Notification+0x558>)
 800cdd4:	f001 fbac 	bl	800e530 <iprintf>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES); /* CONFIRM_YES = 1 */
 800cdd8:	4b2c      	ldr	r3, [pc, #176]	@ (800ce8c <SVCCTL_App_Notification+0x524>)
 800cdda:	8adb      	ldrh	r3, [r3, #22]
 800cddc:	2101      	movs	r1, #1
 800cdde:	4618      	mov	r0, r3
 800cde0:	f7fc ff18 	bl	8009c14 <aci_gap_numeric_comparison_value_confirm_yesno>
 800cde4:	4603      	mov	r3, r0
 800cde6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
          if (ret != BLE_STATUS_SUCCESS)
 800cdea:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d006      	beq.n	800ce00 <SVCCTL_App_Notification+0x498>
            APP_DBG_MSG("==>> aci_gap_numeric_comparison_value_confirm_yesno-->YES : Fail, reason: 0x%x\n", ret);
 800cdf2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800cdf6:	4619      	mov	r1, r3
 800cdf8:	4832      	ldr	r0, [pc, #200]	@ (800cec4 <SVCCTL_App_Notification+0x55c>)
 800cdfa:	f001 fb99 	bl	800e530 <iprintf>
          break;
 800cdfe:	e037      	b.n	800ce70 <SVCCTL_App_Notification+0x508>
            APP_DBG_MSG("==>> aci_gap_numeric_comparison_value_confirm_yesno-->YES : Success \n");
 800ce00:	4831      	ldr	r0, [pc, #196]	@ (800cec8 <SVCCTL_App_Notification+0x560>)
 800ce02:	f001 fc05 	bl	800e610 <puts>
          break;
 800ce06:	e033      	b.n	800ce70 <SVCCTL_App_Notification+0x508>
          pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 800ce08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ce0a:	3302      	adds	r3, #2
 800ce0c:	63bb      	str	r3, [r7, #56]	@ 0x38
          APP_DBG_MSG(">>== ACI_GAP_PAIRING_COMPLETE_VSEVT_CODE\n");
 800ce0e:	482f      	ldr	r0, [pc, #188]	@ (800cecc <SVCCTL_App_Notification+0x564>)
 800ce10:	f001 fbfe 	bl	800e610 <puts>
          if (pairing_complete->Status == 0)
 800ce14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce16:	789b      	ldrb	r3, [r3, #2]
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d103      	bne.n	800ce24 <SVCCTL_App_Notification+0x4bc>
            APP_DBG_MSG("     - Pairing Success\n");
 800ce1c:	482c      	ldr	r0, [pc, #176]	@ (800ced0 <SVCCTL_App_Notification+0x568>)
 800ce1e:	f001 fbf7 	bl	800e610 <puts>
 800ce22:	e008      	b.n	800ce36 <SVCCTL_App_Notification+0x4ce>
            APP_DBG_MSG("     - Pairing KO \n     - Status: 0x%x\n     - Reason: 0x%x\n",pairing_complete->Status, pairing_complete->Reason);
 800ce24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce26:	789b      	ldrb	r3, [r3, #2]
 800ce28:	4619      	mov	r1, r3
 800ce2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce2c:	78db      	ldrb	r3, [r3, #3]
 800ce2e:	461a      	mov	r2, r3
 800ce30:	4828      	ldr	r0, [pc, #160]	@ (800ced4 <SVCCTL_App_Notification+0x56c>)
 800ce32:	f001 fb7d 	bl	800e530 <iprintf>
          APP_DBG_MSG("\n");
 800ce36:	200a      	movs	r0, #10
 800ce38:	f001 fb8c 	bl	800e554 <putchar>
          break;    
 800ce3c:	e018      	b.n	800ce70 <SVCCTL_App_Notification+0x508>
          mutex = 1;
 800ce3e:	4b26      	ldr	r3, [pc, #152]	@ (800ced8 <SVCCTL_App_Notification+0x570>)
 800ce40:	2201      	movs	r2, #1
 800ce42:	701a      	strb	r2, [r3, #0]
          break;
 800ce44:	e014      	b.n	800ce70 <SVCCTL_App_Notification+0x508>
          APP_DBG_MSG(">>== ACI_GAP_PROC_COMPLETE_VSEVT_CODE \r");
 800ce46:	4825      	ldr	r0, [pc, #148]	@ (800cedc <SVCCTL_App_Notification+0x574>)
 800ce48:	f001 fb72 	bl	800e530 <iprintf>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 800ce4c:	e010      	b.n	800ce70 <SVCCTL_App_Notification+0x508>
          HW_TS_Start(BleApplicationContext.SwitchOffGPIO_timer_Id, (uint32_t)LED_ON_TIMEOUT);
 800ce4e:	4b0f      	ldr	r3, [pc, #60]	@ (800ce8c <SVCCTL_App_Notification+0x524>)
 800ce50:	f893 3086 	ldrb.w	r3, [r3, #134]	@ 0x86
 800ce54:	210a      	movs	r1, #10
 800ce56:	4618      	mov	r0, r3
 800ce58:	f7f5 f98c 	bl	8002174 <HW_TS_Start>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 800ce5c:	e008      	b.n	800ce70 <SVCCTL_App_Notification+0x508>
          APP_DBG_MSG(">>== ACI_GATT_INDICATION_VSEVT_CODE \r");
 800ce5e:	4820      	ldr	r0, [pc, #128]	@ (800cee0 <SVCCTL_App_Notification+0x578>)
 800ce60:	f001 fb66 	bl	800e530 <iprintf>
          aci_gatt_confirm_indication(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 800ce64:	4b09      	ldr	r3, [pc, #36]	@ (800ce8c <SVCCTL_App_Notification+0x524>)
 800ce66:	8adb      	ldrh	r3, [r3, #22]
 800ce68:	4618      	mov	r0, r3
 800ce6a:	f7fd f9e6 	bl	800a23a <aci_gatt_confirm_indication>
        break;
 800ce6e:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800ce70:	e001      	b.n	800ce76 <SVCCTL_App_Notification+0x50e>
      break;
 800ce72:	bf00      	nop
 800ce74:	e000      	b.n	800ce78 <SVCCTL_App_Notification+0x510>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800ce76:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 800ce78:	2301      	movs	r3, #1
}
 800ce7a:	4618      	mov	r0, r3
 800ce7c:	374c      	adds	r7, #76	@ 0x4c
 800ce7e:	46bd      	mov	sp, r7
 800ce80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce82:	bf00      	nop
 800ce84:	0800ff50 	.word	0x0800ff50
 800ce88:	0800ff80 	.word	0x0800ff80
 800ce8c:	200004d4 	.word	0x200004d4
 800ce90:	0001e240 	.word	0x0001e240
 800ce94:	0800ffa8 	.word	0x0800ffa8
 800ce98:	0800ffdc 	.word	0x0800ffdc
 800ce9c:	08010004 	.word	0x08010004
 800cea0:	08010030 	.word	0x08010030
 800cea4:	08010068 	.word	0x08010068
 800cea8:	0801008c 	.word	0x0801008c
 800ceac:	080100bc 	.word	0x080100bc
 800ceb0:	080100e4 	.word	0x080100e4
 800ceb4:	08010110 	.word	0x08010110
 800ceb8:	08010140 	.word	0x08010140
 800cebc:	08010174 	.word	0x08010174
 800cec0:	08010190 	.word	0x08010190
 800cec4:	080101a8 	.word	0x080101a8
 800cec8:	080101f8 	.word	0x080101f8
 800cecc:	08010240 	.word	0x08010240
 800ced0:	0801026c 	.word	0x0801026c
 800ced4:	08010284 	.word	0x08010284
 800ced8:	20000571 	.word	0x20000571
 800cedc:	080102c0 	.word	0x080102c0
 800cee0:	080102e8 	.word	0x080102e8

0800cee4 <APP_BLE_Send_EEGData_Notification>:
 *
 * Hermes Characteristics notifications
 *
 **/
uint8_t  APP_BLE_Send_EEGData_Notification(uint8_t* payload, uint8_t length)
{
 800cee4:	b580      	push	{r7, lr}
 800cee6:	b086      	sub	sp, #24
 800cee8:	af02      	add	r7, sp, #8
 800ceea:	6078      	str	r0, [r7, #4]
 800ceec:	460b      	mov	r3, r1
 800ceee:	70fb      	strb	r3, [r7, #3]
    uint8_t  ret = BLE_STATUS_INVALID_PARAMS;
 800cef0:	2392      	movs	r3, #146	@ 0x92
 800cef2:	73fb      	strb	r3, [r7, #15]

    if(length <= NEW_NOTIFY_CHAR_VALUE_LENGTH)
 800cef4:	78fb      	ldrb	r3, [r7, #3]
 800cef6:	2bf1      	cmp	r3, #241	@ 0xf1
 800cef8:	d80e      	bhi.n	800cf18 <APP_BLE_Send_EEGData_Notification+0x34>
    {
        ret = aci_gatt_update_char_value(BleApplicationContext.BleApplicationContext_legacy.eeg_service_handle,
 800cefa:	4b0a      	ldr	r3, [pc, #40]	@ (800cf24 <APP_BLE_Send_EEGData_Notification+0x40>)
 800cefc:	f8b3 007e 	ldrh.w	r0, [r3, #126]	@ 0x7e
 800cf00:	4b08      	ldr	r3, [pc, #32]	@ (800cf24 <APP_BLE_Send_EEGData_Notification+0x40>)
 800cf02:	f8b3 1088 	ldrh.w	r1, [r3, #136]	@ 0x88
 800cf06:	78fa      	ldrb	r2, [r7, #3]
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	9300      	str	r3, [sp, #0]
 800cf0c:	4613      	mov	r3, r2
 800cf0e:	2200      	movs	r2, #0
 800cf10:	f7fd f8ea 	bl	800a0e8 <aci_gatt_update_char_value>
 800cf14:	4603      	mov	r3, r0
 800cf16:	73fb      	strb	r3, [r7, #15]
                                        0, /* offset */
                                        length, /* data length */
                                        payload);
    }

    return ret;
 800cf18:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf1a:	4618      	mov	r0, r3
 800cf1c:	3710      	adds	r7, #16
 800cf1e:	46bd      	mov	sp, r7
 800cf20:	bd80      	pop	{r7, pc}
 800cf22:	bf00      	nop
 800cf24:	200004d4 	.word	0x200004d4

0800cf28 <APP_BLE_Send_Event_Notification>:


uint8_t  APP_BLE_Send_Event_Notification(event_packet_t* payload)
{
 800cf28:	b580      	push	{r7, lr}
 800cf2a:	b086      	sub	sp, #24
 800cf2c:	af02      	add	r7, sp, #8
 800cf2e:	6078      	str	r0, [r7, #4]
    uint8_t  ret = BLE_STATUS_INVALID_PARAMS;
 800cf30:	2392      	movs	r3, #146	@ 0x92
 800cf32:	73fb      	strb	r3, [r7, #15]

	ret = aci_gatt_update_char_value(BleApplicationContext.BleApplicationContext_legacy.event_service_handle,
 800cf34:	4b09      	ldr	r3, [pc, #36]	@ (800cf5c <APP_BLE_Send_Event_Notification+0x34>)
 800cf36:	f8b3 0080 	ldrh.w	r0, [r3, #128]	@ 0x80
 800cf3a:	4b08      	ldr	r3, [pc, #32]	@ (800cf5c <APP_BLE_Send_Event_Notification+0x34>)
 800cf3c:	f8b3 108a 	ldrh.w	r1, [r3, #138]	@ 0x8a
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	9300      	str	r3, [sp, #0]
 800cf44:	2303      	movs	r3, #3
 800cf46:	2200      	movs	r2, #0
 800cf48:	f7fd f8ce 	bl	800a0e8 <aci_gatt_update_char_value>
 800cf4c:	4603      	mov	r3, r0
 800cf4e:	73fb      	strb	r3, [r7, #15]
									BleApplicationContext.event_char_handle,
									0, /* offset */
									sizeof(event_packet_t), /* data length */
									(uint8_t*)payload);

    return ret;
 800cf50:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf52:	4618      	mov	r0, r3
 800cf54:	3710      	adds	r7, #16
 800cf56:	46bd      	mov	sp, r7
 800cf58:	bd80      	pop	{r7, pc}
 800cf5a:	bf00      	nop
 800cf5c:	200004d4 	.word	0x200004d4

0800cf60 <APP_BLE_Send_IMU_Notification>:



uint8_t  APP_BLE_Send_IMU_Notification(uint8_t* accel)
{
 800cf60:	b580      	push	{r7, lr}
 800cf62:	b086      	sub	sp, #24
 800cf64:	af02      	add	r7, sp, #8
 800cf66:	6078      	str	r0, [r7, #4]
    uint8_t  ret = BLE_STATUS_INVALID_PARAMS;
 800cf68:	2392      	movs	r3, #146	@ 0x92
 800cf6a:	73fb      	strb	r3, [r7, #15]

	ret = aci_gatt_update_char_value(BleApplicationContext.BleApplicationContext_legacy.motion_service_handle,
 800cf6c:	4b09      	ldr	r3, [pc, #36]	@ (800cf94 <APP_BLE_Send_IMU_Notification+0x34>)
 800cf6e:	f8b3 0082 	ldrh.w	r0, [r3, #130]	@ 0x82
 800cf72:	4b08      	ldr	r3, [pc, #32]	@ (800cf94 <APP_BLE_Send_IMU_Notification+0x34>)
 800cf74:	f8b3 108c 	ldrh.w	r1, [r3, #140]	@ 0x8c
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	9300      	str	r3, [sp, #0]
 800cf7c:	230c      	movs	r3, #12
 800cf7e:	2200      	movs	r2, #0
 800cf80:	f7fd f8b2 	bl	800a0e8 <aci_gatt_update_char_value>
 800cf84:	4603      	mov	r3, r0
 800cf86:	73fb      	strb	r3, [r7, #15]
									BleApplicationContext.gyro_char_handle,
									0,
									60,
									gyro);
    */
    return ret;
 800cf88:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf8a:	4618      	mov	r0, r3
 800cf8c:	3710      	adds	r7, #16
 800cf8e:	46bd      	mov	sp, r7
 800cf90:	bd80      	pop	{r7, pc}
 800cf92:	bf00      	nop
 800cf94:	200004d4 	.word	0x200004d4

0800cf98 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 800cf98:	b580      	push	{r7, lr}
 800cf9a:	b082      	sub	sp, #8
 800cf9c:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800cf9e:	4b06      	ldr	r3, [pc, #24]	@ (800cfb8 <Ble_Tl_Init+0x20>)
 800cfa0:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800cfa2:	4b06      	ldr	r3, [pc, #24]	@ (800cfbc <Ble_Tl_Init+0x24>)
 800cfa4:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800cfa6:	463b      	mov	r3, r7
 800cfa8:	4619      	mov	r1, r3
 800cfaa:	4805      	ldr	r0, [pc, #20]	@ (800cfc0 <Ble_Tl_Init+0x28>)
 800cfac:	f7fd fec8 	bl	800ad40 <hci_init>

  return;
 800cfb0:	bf00      	nop
}
 800cfb2:	3708      	adds	r7, #8
 800cfb4:	46bd      	mov	sp, r7
 800cfb6:	bd80      	pop	{r7, pc}
 800cfb8:	200300d8 	.word	0x200300d8
 800cfbc:	0800d691 	.word	0x0800d691
 800cfc0:	0800d659 	.word	0x0800d659

0800cfc4 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 800cfc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cfc6:	b08d      	sub	sp, #52	@ 0x34
 800cfc8:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 800cfca:	2300      	movs	r3, #0
 800cfcc:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800cfce:	2392      	movs	r3, #146	@ 0x92
 800cfd0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init*/

  APP_DBG_MSG("==>> Start Ble_Hci_Gap_Gatt_Init function\n");
 800cfd2:	48a5      	ldr	r0, [pc, #660]	@ (800d268 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800cfd4:	f001 fb1c 	bl	800e610 <puts>

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 800cfd8:	f7fd fac4 	bl	800a564 <hci_reset>
 800cfdc:	4603      	mov	r3, r0
 800cfde:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800cfe0:	7dfb      	ldrb	r3, [r7, #23]
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d005      	beq.n	800cff2 <Ble_Hci_Gap_Gatt_Init+0x2e>
  {
    APP_DBG_MSG("  Fail   : hci_reset command, result: 0x%x \n", ret);
 800cfe6:	7dfb      	ldrb	r3, [r7, #23]
 800cfe8:	4619      	mov	r1, r3
 800cfea:	48a0      	ldr	r0, [pc, #640]	@ (800d26c <Ble_Hci_Gap_Gatt_Init+0x2a8>)
 800cfec:	f001 faa0 	bl	800e530 <iprintf>
 800cff0:	e002      	b.n	800cff8 <Ble_Hci_Gap_Gatt_Init+0x34>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_reset command\n");
 800cff2:	489f      	ldr	r0, [pc, #636]	@ (800d270 <Ble_Hci_Gap_Gatt_Init+0x2ac>)
 800cff4:	f001 fb0c 	bl	800e610 <puts>
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 800cff8:	f000 fa32 	bl	800d460 <BleGetBdAddress>
 800cffc:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 800cffe:	693a      	ldr	r2, [r7, #16]
 800d000:	2106      	movs	r1, #6
 800d002:	2000      	movs	r0, #0
 800d004:	f7fd f96e 	bl	800a2e4 <aci_hal_write_config_data>
 800d008:	4603      	mov	r3, r0
 800d00a:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800d00c:	7dfb      	ldrb	r3, [r7, #23]
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d005      	beq.n	800d01e <Ble_Hci_Gap_Gatt_Init+0x5a>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET, result: 0x%x \n", ret);
 800d012:	7dfb      	ldrb	r3, [r7, #23]
 800d014:	4619      	mov	r1, r3
 800d016:	4897      	ldr	r0, [pc, #604]	@ (800d274 <Ble_Hci_Gap_Gatt_Init+0x2b0>)
 800d018:	f001 fa8a 	bl	800e530 <iprintf>
 800d01c:	e021      	b.n	800d062 <Ble_Hci_Gap_Gatt_Init+0x9e>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET\n");
 800d01e:	4896      	ldr	r0, [pc, #600]	@ (800d278 <Ble_Hci_Gap_Gatt_Init+0x2b4>)
 800d020:	f001 faf6 	bl	800e610 <puts>
    APP_DBG_MSG("  Public Bluetooth Address: %02x:%02x:%02x:%02x:%02x:%02x\n",p_bd_addr[5],p_bd_addr[4],p_bd_addr[3],p_bd_addr[2],p_bd_addr[1],p_bd_addr[0]);
 800d024:	693b      	ldr	r3, [r7, #16]
 800d026:	3305      	adds	r3, #5
 800d028:	781b      	ldrb	r3, [r3, #0]
 800d02a:	4618      	mov	r0, r3
 800d02c:	693b      	ldr	r3, [r7, #16]
 800d02e:	3304      	adds	r3, #4
 800d030:	781b      	ldrb	r3, [r3, #0]
 800d032:	461c      	mov	r4, r3
 800d034:	693b      	ldr	r3, [r7, #16]
 800d036:	3303      	adds	r3, #3
 800d038:	781b      	ldrb	r3, [r3, #0]
 800d03a:	461d      	mov	r5, r3
 800d03c:	693b      	ldr	r3, [r7, #16]
 800d03e:	3302      	adds	r3, #2
 800d040:	781b      	ldrb	r3, [r3, #0]
 800d042:	461a      	mov	r2, r3
 800d044:	693b      	ldr	r3, [r7, #16]
 800d046:	3301      	adds	r3, #1
 800d048:	781b      	ldrb	r3, [r3, #0]
 800d04a:	4619      	mov	r1, r3
 800d04c:	693b      	ldr	r3, [r7, #16]
 800d04e:	781b      	ldrb	r3, [r3, #0]
 800d050:	9302      	str	r3, [sp, #8]
 800d052:	9101      	str	r1, [sp, #4]
 800d054:	9200      	str	r2, [sp, #0]
 800d056:	462b      	mov	r3, r5
 800d058:	4622      	mov	r2, r4
 800d05a:	4601      	mov	r1, r0
 800d05c:	4887      	ldr	r0, [pc, #540]	@ (800d27c <Ble_Hci_Gap_Gatt_Init+0x2b8>)
 800d05e:	f001 fa67 	bl	800e530 <iprintf>
  }

#if (CFG_BLE_ADDRESS_TYPE == GAP_PUBLIC_ADDR)
  /* BLE MAC in ADV Packet */
  a_ManufData[ sizeof(a_ManufData)-6] = p_bd_addr[5];
 800d062:	693b      	ldr	r3, [r7, #16]
 800d064:	3305      	adds	r3, #5
 800d066:	781a      	ldrb	r2, [r3, #0]
 800d068:	4b85      	ldr	r3, [pc, #532]	@ (800d280 <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 800d06a:	721a      	strb	r2, [r3, #8]
  a_ManufData[ sizeof(a_ManufData)-5] = p_bd_addr[4];
 800d06c:	693b      	ldr	r3, [r7, #16]
 800d06e:	3304      	adds	r3, #4
 800d070:	781a      	ldrb	r2, [r3, #0]
 800d072:	4b83      	ldr	r3, [pc, #524]	@ (800d280 <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 800d074:	725a      	strb	r2, [r3, #9]
  a_ManufData[ sizeof(a_ManufData)-4] = p_bd_addr[3];
 800d076:	693b      	ldr	r3, [r7, #16]
 800d078:	3303      	adds	r3, #3
 800d07a:	781a      	ldrb	r2, [r3, #0]
 800d07c:	4b80      	ldr	r3, [pc, #512]	@ (800d280 <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 800d07e:	729a      	strb	r2, [r3, #10]
  a_ManufData[ sizeof(a_ManufData)-3] = p_bd_addr[2];
 800d080:	693b      	ldr	r3, [r7, #16]
 800d082:	3302      	adds	r3, #2
 800d084:	781a      	ldrb	r2, [r3, #0]
 800d086:	4b7e      	ldr	r3, [pc, #504]	@ (800d280 <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 800d088:	72da      	strb	r2, [r3, #11]
  a_ManufData[ sizeof(a_ManufData)-2] = p_bd_addr[1];
 800d08a:	693b      	ldr	r3, [r7, #16]
 800d08c:	3301      	adds	r3, #1
 800d08e:	781a      	ldrb	r2, [r3, #0]
 800d090:	4b7b      	ldr	r3, [pc, #492]	@ (800d280 <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 800d092:	731a      	strb	r2, [r3, #12]
  a_ManufData[ sizeof(a_ManufData)-1] = p_bd_addr[0];
 800d094:	693b      	ldr	r3, [r7, #16]
 800d096:	781a      	ldrb	r2, [r3, #0]
 800d098:	4b79      	ldr	r3, [pc, #484]	@ (800d280 <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 800d09a:	735a      	strb	r2, [r3, #13]
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive IRK and DHK(Legacy)
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 800d09c:	4a79      	ldr	r2, [pc, #484]	@ (800d284 <Ble_Hci_Gap_Gatt_Init+0x2c0>)
 800d09e:	2110      	movs	r1, #16
 800d0a0:	2018      	movs	r0, #24
 800d0a2:	f7fd f91f 	bl	800a2e4 <aci_hal_write_config_data>
 800d0a6:	4603      	mov	r3, r0
 800d0a8:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800d0aa:	7dfb      	ldrb	r3, [r7, #23]
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d005      	beq.n	800d0bc <Ble_Hci_Gap_Gatt_Init+0xf8>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET, result: 0x%x \n", ret);
 800d0b0:	7dfb      	ldrb	r3, [r7, #23]
 800d0b2:	4619      	mov	r1, r3
 800d0b4:	4874      	ldr	r0, [pc, #464]	@ (800d288 <Ble_Hci_Gap_Gatt_Init+0x2c4>)
 800d0b6:	f001 fa3b 	bl	800e530 <iprintf>
 800d0ba:	e002      	b.n	800d0c2 <Ble_Hci_Gap_Gatt_Init+0xfe>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET\n");
 800d0bc:	4873      	ldr	r0, [pc, #460]	@ (800d28c <Ble_Hci_Gap_Gatt_Init+0x2c8>)
 800d0be:	f001 faa7 	bl	800e610 <puts>
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 800d0c2:	4a73      	ldr	r2, [pc, #460]	@ (800d290 <Ble_Hci_Gap_Gatt_Init+0x2cc>)
 800d0c4:	2110      	movs	r1, #16
 800d0c6:	2008      	movs	r0, #8
 800d0c8:	f7fd f90c 	bl	800a2e4 <aci_hal_write_config_data>
 800d0cc:	4603      	mov	r3, r0
 800d0ce:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800d0d0:	7dfb      	ldrb	r3, [r7, #23]
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d005      	beq.n	800d0e2 <Ble_Hci_Gap_Gatt_Init+0x11e>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET, result: 0x%x \n", ret);
 800d0d6:	7dfb      	ldrb	r3, [r7, #23]
 800d0d8:	4619      	mov	r1, r3
 800d0da:	486e      	ldr	r0, [pc, #440]	@ (800d294 <Ble_Hci_Gap_Gatt_Init+0x2d0>)
 800d0dc:	f001 fa28 	bl	800e530 <iprintf>
 800d0e0:	e002      	b.n	800d0e8 <Ble_Hci_Gap_Gatt_Init+0x124>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET\n");
 800d0e2:	486d      	ldr	r0, [pc, #436]	@ (800d298 <Ble_Hci_Gap_Gatt_Init+0x2d4>)
 800d0e4:	f001 fa94 	bl	800e610 <puts>
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 800d0e8:	211f      	movs	r1, #31
 800d0ea:	2001      	movs	r0, #1
 800d0ec:	f7fd f97f 	bl	800a3ee <aci_hal_set_tx_power_level>
 800d0f0:	4603      	mov	r3, r0
 800d0f2:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800d0f4:	7dfb      	ldrb	r3, [r7, #23]
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d005      	beq.n	800d106 <Ble_Hci_Gap_Gatt_Init+0x142>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_tx_power_level command, result: 0x%x \n", ret);
 800d0fa:	7dfb      	ldrb	r3, [r7, #23]
 800d0fc:	4619      	mov	r1, r3
 800d0fe:	4867      	ldr	r0, [pc, #412]	@ (800d29c <Ble_Hci_Gap_Gatt_Init+0x2d8>)
 800d100:	f001 fa16 	bl	800e530 <iprintf>
 800d104:	e002      	b.n	800d10c <Ble_Hci_Gap_Gatt_Init+0x148>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_tx_power_level command\n");
 800d106:	4866      	ldr	r0, [pc, #408]	@ (800d2a0 <Ble_Hci_Gap_Gatt_Init+0x2dc>)
 800d108:	f001 fa82 	bl	800e610 <puts>
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 800d10c:	f7fc fde9 	bl	8009ce2 <aci_gatt_init>
 800d110:	4603      	mov	r3, r0
 800d112:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800d114:	7dfb      	ldrb	r3, [r7, #23]
 800d116:	2b00      	cmp	r3, #0
 800d118:	d005      	beq.n	800d126 <Ble_Hci_Gap_Gatt_Init+0x162>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_init command, result: 0x%x \n", ret);
 800d11a:	7dfb      	ldrb	r3, [r7, #23]
 800d11c:	4619      	mov	r1, r3
 800d11e:	4861      	ldr	r0, [pc, #388]	@ (800d2a4 <Ble_Hci_Gap_Gatt_Init+0x2e0>)
 800d120:	f001 fa06 	bl	800e530 <iprintf>
 800d124:	e002      	b.n	800d12c <Ble_Hci_Gap_Gatt_Init+0x168>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_init command\n");
 800d126:	4860      	ldr	r0, [pc, #384]	@ (800d2a8 <Ble_Hci_Gap_Gatt_Init+0x2e4>)
 800d128:	f001 fa72 	bl	800e610 <puts>
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 800d12c:	2300      	movs	r3, #0
 800d12e:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 800d130:	7bfb      	ldrb	r3, [r7, #15]
 800d132:	f043 0301 	orr.w	r3, r3, #1
 800d136:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 800d138:	7bfb      	ldrb	r3, [r7, #15]
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d02b      	beq.n	800d196 <Ble_Hci_Gap_Gatt_Init+0x1d2>
  {
    const char *name = "Hermes V1";
 800d13e:	4b5b      	ldr	r3, [pc, #364]	@ (800d2ac <Ble_Hci_Gap_Gatt_Init+0x2e8>)
 800d140:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 800d142:	1dba      	adds	r2, r7, #6
 800d144:	7bf8      	ldrb	r0, [r7, #15]
 800d146:	1cbb      	adds	r3, r7, #2
 800d148:	9301      	str	r3, [sp, #4]
 800d14a:	1d3b      	adds	r3, r7, #4
 800d14c:	9300      	str	r3, [sp, #0]
 800d14e:	4613      	mov	r3, r2
 800d150:	2207      	movs	r2, #7
 800d152:	2100      	movs	r1, #0
 800d154:	f7fc fbc7 	bl	80098e6 <aci_gap_init>
 800d158:	4603      	mov	r3, r0
 800d15a:	75fb      	strb	r3, [r7, #23]
                       APPBLE_GAP_DEVICE_NAME_LENGTH,
                       &gap_service_handle,
                       &gap_dev_name_char_handle,
                       &gap_appearance_char_handle);

    if (ret != BLE_STATUS_SUCCESS)
 800d15c:	7dfb      	ldrb	r3, [r7, #23]
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d005      	beq.n	800d16e <Ble_Hci_Gap_Gatt_Init+0x1aa>
    {
      APP_DBG_MSG("  Fail   : aci_gap_init command, result: 0x%x \n", ret);
 800d162:	7dfb      	ldrb	r3, [r7, #23]
 800d164:	4619      	mov	r1, r3
 800d166:	4852      	ldr	r0, [pc, #328]	@ (800d2b0 <Ble_Hci_Gap_Gatt_Init+0x2ec>)
 800d168:	f001 f9e2 	bl	800e530 <iprintf>
 800d16c:	e002      	b.n	800d174 <Ble_Hci_Gap_Gatt_Init+0x1b0>
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
 800d16e:	4851      	ldr	r0, [pc, #324]	@ (800d2b4 <Ble_Hci_Gap_Gatt_Init+0x2f0>)
 800d170:	f001 fa4e 	bl	800e610 <puts>
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 800d174:	88fc      	ldrh	r4, [r7, #6]
 800d176:	88bd      	ldrh	r5, [r7, #4]
 800d178:	68b8      	ldr	r0, [r7, #8]
 800d17a:	f7f3 f801 	bl	8000180 <strlen>
 800d17e:	4603      	mov	r3, r0
 800d180:	b2da      	uxtb	r2, r3
 800d182:	68bb      	ldr	r3, [r7, #8]
 800d184:	9300      	str	r3, [sp, #0]
 800d186:	4613      	mov	r3, r2
 800d188:	2200      	movs	r2, #0
 800d18a:	4629      	mov	r1, r5
 800d18c:	4620      	mov	r0, r4
 800d18e:	f7fc ffab 	bl	800a0e8 <aci_gatt_update_char_value>
 800d192:	4603      	mov	r3, r0
 800d194:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 800d196:	88f8      	ldrh	r0, [r7, #6]
 800d198:	8879      	ldrh	r1, [r7, #2]
 800d19a:	463b      	mov	r3, r7
 800d19c:	9300      	str	r3, [sp, #0]
 800d19e:	2302      	movs	r3, #2
 800d1a0:	2200      	movs	r2, #0
 800d1a2:	f7fc ffa1 	bl	800a0e8 <aci_gatt_update_char_value>
 800d1a6:	4603      	mov	r3, r0
 800d1a8:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 800d1aa:	2202      	movs	r2, #2
 800d1ac:	2102      	movs	r1, #2
 800d1ae:	2000      	movs	r0, #0
 800d1b0:	f7fd fa7a 	bl	800a6a8 <hci_le_set_default_phy>
 800d1b4:	4603      	mov	r3, r0
 800d1b6:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800d1b8:	7dfb      	ldrb	r3, [r7, #23]
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d005      	beq.n	800d1ca <Ble_Hci_Gap_Gatt_Init+0x206>
  {
    APP_DBG_MSG("  Fail   : hci_le_set_default_phy command, result: 0x%x \n", ret);
 800d1be:	7dfb      	ldrb	r3, [r7, #23]
 800d1c0:	4619      	mov	r1, r3
 800d1c2:	483d      	ldr	r0, [pc, #244]	@ (800d2b8 <Ble_Hci_Gap_Gatt_Init+0x2f4>)
 800d1c4:	f001 f9b4 	bl	800e530 <iprintf>
 800d1c8:	e002      	b.n	800d1d0 <Ble_Hci_Gap_Gatt_Init+0x20c>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_le_set_default_phy command\n");
 800d1ca:	483c      	ldr	r0, [pc, #240]	@ (800d2bc <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 800d1cc:	f001 fa20 	bl	800e610 <puts>
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 800d1d0:	4b3b      	ldr	r3, [pc, #236]	@ (800d2c0 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800d1d2:	2201      	movs	r2, #1
 800d1d4:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 800d1d6:	4b3a      	ldr	r3, [pc, #232]	@ (800d2c0 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800d1d8:	781b      	ldrb	r3, [r3, #0]
 800d1da:	4618      	mov	r0, r3
 800d1dc:	f7fc fa04 	bl	80095e8 <aci_gap_set_io_capability>
 800d1e0:	4603      	mov	r3, r0
 800d1e2:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800d1e4:	7dfb      	ldrb	r3, [r7, #23]
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d005      	beq.n	800d1f6 <Ble_Hci_Gap_Gatt_Init+0x232>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_io_capability command, result: 0x%x \n", ret);
 800d1ea:	7dfb      	ldrb	r3, [r7, #23]
 800d1ec:	4619      	mov	r1, r3
 800d1ee:	4835      	ldr	r0, [pc, #212]	@ (800d2c4 <Ble_Hci_Gap_Gatt_Init+0x300>)
 800d1f0:	f001 f99e 	bl	800e530 <iprintf>
 800d1f4:	e002      	b.n	800d1fc <Ble_Hci_Gap_Gatt_Init+0x238>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_io_capability command\n");
 800d1f6:	4834      	ldr	r0, [pc, #208]	@ (800d2c8 <Ble_Hci_Gap_Gatt_Init+0x304>)
 800d1f8:	f001 fa0a 	bl	800e610 <puts>
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 800d1fc:	4b30      	ldr	r3, [pc, #192]	@ (800d2c0 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800d1fe:	2201      	movs	r2, #1
 800d200:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 800d202:	4b2f      	ldr	r3, [pc, #188]	@ (800d2c0 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800d204:	2208      	movs	r2, #8
 800d206:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 800d208:	4b2d      	ldr	r3, [pc, #180]	@ (800d2c0 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800d20a:	2210      	movs	r2, #16
 800d20c:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 800d20e:	4b2c      	ldr	r3, [pc, #176]	@ (800d2c0 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800d210:	2200      	movs	r2, #0
 800d212:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 800d214:	4b2a      	ldr	r3, [pc, #168]	@ (800d2c0 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800d216:	4a2d      	ldr	r2, [pc, #180]	@ (800d2cc <Ble_Hci_Gap_Gatt_Init+0x308>)
 800d218:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 800d21a:	4b29      	ldr	r3, [pc, #164]	@ (800d2c0 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800d21c:	2201      	movs	r2, #1
 800d21e:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 800d220:	4b27      	ldr	r3, [pc, #156]	@ (800d2c0 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800d222:	789c      	ldrb	r4, [r3, #2]
 800d224:	4b26      	ldr	r3, [pc, #152]	@ (800d2c0 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800d226:	785d      	ldrb	r5, [r3, #1]
 800d228:	4b25      	ldr	r3, [pc, #148]	@ (800d2c0 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800d22a:	791b      	ldrb	r3, [r3, #4]
 800d22c:	4a24      	ldr	r2, [pc, #144]	@ (800d2c0 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800d22e:	7952      	ldrb	r2, [r2, #5]
 800d230:	4923      	ldr	r1, [pc, #140]	@ (800d2c0 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800d232:	78c9      	ldrb	r1, [r1, #3]
 800d234:	4822      	ldr	r0, [pc, #136]	@ (800d2c0 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800d236:	6880      	ldr	r0, [r0, #8]
 800d238:	2600      	movs	r6, #0
 800d23a:	9604      	str	r6, [sp, #16]
 800d23c:	9003      	str	r0, [sp, #12]
 800d23e:	9102      	str	r1, [sp, #8]
 800d240:	9201      	str	r2, [sp, #4]
 800d242:	9300      	str	r3, [sp, #0]
 800d244:	2300      	movs	r3, #0
 800d246:	2201      	movs	r2, #1
 800d248:	4629      	mov	r1, r5
 800d24a:	4620      	mov	r0, r4
 800d24c:	f7fc fa20 	bl	8009690 <aci_gap_set_authentication_requirement>
 800d250:	4603      	mov	r3, r0
 800d252:	75fb      	strb	r3, [r7, #23]
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin,
                                               CFG_IDENTITY_ADDRESS);
  if (ret != BLE_STATUS_SUCCESS)
 800d254:	7dfb      	ldrb	r3, [r7, #23]
 800d256:	2b00      	cmp	r3, #0
 800d258:	d03c      	beq.n	800d2d4 <Ble_Hci_Gap_Gatt_Init+0x310>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_authentication_requirement command, result: 0x%x \n", ret);
 800d25a:	7dfb      	ldrb	r3, [r7, #23]
 800d25c:	4619      	mov	r1, r3
 800d25e:	481c      	ldr	r0, [pc, #112]	@ (800d2d0 <Ble_Hci_Gap_Gatt_Init+0x30c>)
 800d260:	f001 f966 	bl	800e530 <iprintf>
 800d264:	e039      	b.n	800d2da <Ble_Hci_Gap_Gatt_Init+0x316>
 800d266:	bf00      	nop
 800d268:	08010310 	.word	0x08010310
 800d26c:	0801033c 	.word	0x0801033c
 800d270:	0801036c 	.word	0x0801036c
 800d274:	0801038c 	.word	0x0801038c
 800d278:	080103e8 	.word	0x080103e8
 800d27c:	08010434 	.word	0x08010434
 800d280:	20000014 	.word	0x20000014
 800d284:	08010d94 	.word	0x08010d94
 800d288:	08010470 	.word	0x08010470
 800d28c:	080104c8 	.word	0x080104c8
 800d290:	08010da4 	.word	0x08010da4
 800d294:	08010510 	.word	0x08010510
 800d298:	08010568 	.word	0x08010568
 800d29c:	080105b0 	.word	0x080105b0
 800d2a0:	080105f0 	.word	0x080105f0
 800d2a4:	08010620 	.word	0x08010620
 800d2a8:	08010654 	.word	0x08010654
 800d2ac:	08010678 	.word	0x08010678
 800d2b0:	08010684 	.word	0x08010684
 800d2b4:	080106b4 	.word	0x080106b4
 800d2b8:	080106d4 	.word	0x080106d4
 800d2bc:	08010710 	.word	0x08010710
 800d2c0:	200004d4 	.word	0x200004d4
 800d2c4:	0801073c 	.word	0x0801073c
 800d2c8:	0801077c 	.word	0x0801077c
 800d2cc:	0001b207 	.word	0x0001b207
 800d2d0:	080107ac 	.word	0x080107ac
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_authentication_requirement command\n");
 800d2d4:	480e      	ldr	r0, [pc, #56]	@ (800d310 <Ble_Hci_Gap_Gatt_Init+0x34c>)
 800d2d6:	f001 f99b 	bl	800e610 <puts>
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 800d2da:	4b0e      	ldr	r3, [pc, #56]	@ (800d314 <Ble_Hci_Gap_Gatt_Init+0x350>)
 800d2dc:	789b      	ldrb	r3, [r3, #2]
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d00f      	beq.n	800d302 <Ble_Hci_Gap_Gatt_Init+0x33e>
  {
    ret = aci_gap_configure_whitelist();
 800d2e2:	f7fc fc1f 	bl	8009b24 <aci_gap_configure_filter_accept_list>
 800d2e6:	4603      	mov	r3, r0
 800d2e8:	75fb      	strb	r3, [r7, #23]
    if (ret != BLE_STATUS_SUCCESS)
 800d2ea:	7dfb      	ldrb	r3, [r7, #23]
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d005      	beq.n	800d2fc <Ble_Hci_Gap_Gatt_Init+0x338>
    {
      APP_DBG_MSG("  Fail   : aci_gap_configure_whitelist command, result: 0x%x \n", ret);
 800d2f0:	7dfb      	ldrb	r3, [r7, #23]
 800d2f2:	4619      	mov	r1, r3
 800d2f4:	4808      	ldr	r0, [pc, #32]	@ (800d318 <Ble_Hci_Gap_Gatt_Init+0x354>)
 800d2f6:	f001 f91b 	bl	800e530 <iprintf>
 800d2fa:	e002      	b.n	800d302 <Ble_Hci_Gap_Gatt_Init+0x33e>
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
 800d2fc:	4807      	ldr	r0, [pc, #28]	@ (800d31c <Ble_Hci_Gap_Gatt_Init+0x358>)
 800d2fe:	f001 f987 	bl	800e610 <puts>
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
 800d302:	4807      	ldr	r0, [pc, #28]	@ (800d320 <Ble_Hci_Gap_Gatt_Init+0x35c>)
 800d304:	f001 f914 	bl	800e530 <iprintf>
}
 800d308:	bf00      	nop
 800d30a:	371c      	adds	r7, #28
 800d30c:	46bd      	mov	sp, r7
 800d30e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d310:	080107f8 	.word	0x080107f8
 800d314:	200004d4 	.word	0x200004d4
 800d318:	08010834 	.word	0x08010834
 800d31c:	08010874 	.word	0x08010874
 800d320:	080108a4 	.word	0x080108a4

0800d324 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 800d324:	b580      	push	{r7, lr}
 800d326:	b08c      	sub	sp, #48	@ 0x30
 800d328:	af08      	add	r7, sp, #32
 800d32a:	4603      	mov	r3, r0
 800d32c:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800d32e:	2392      	movs	r3, #146	@ 0x92
 800d330:	72fb      	strb	r3, [r7, #11]
  uint16_t Min_Inter, Max_Inter;

  if (NewStatus == APP_BLE_FAST_ADV)
 800d332:	79fb      	ldrb	r3, [r7, #7]
 800d334:	2b01      	cmp	r3, #1
 800d336:	d106      	bne.n	800d346 <Adv_Request+0x22>
  {
    Min_Inter = AdvIntervalMin;
 800d338:	4b3b      	ldr	r3, [pc, #236]	@ (800d428 <Adv_Request+0x104>)
 800d33a:	881b      	ldrh	r3, [r3, #0]
 800d33c:	81fb      	strh	r3, [r7, #14]
    Max_Inter = AdvIntervalMax;
 800d33e:	4b3b      	ldr	r3, [pc, #236]	@ (800d42c <Adv_Request+0x108>)
 800d340:	881b      	ldrh	r3, [r3, #0]
 800d342:	81bb      	strh	r3, [r7, #12]
 800d344:	e005      	b.n	800d352 <Adv_Request+0x2e>
  }
  else
  {
    Min_Inter = CFG_LP_CONN_ADV_INTERVAL_MIN;
 800d346:	f44f 63c8 	mov.w	r3, #1600	@ 0x640
 800d34a:	81fb      	strh	r3, [r7, #14]
    Max_Inter = CFG_LP_CONN_ADV_INTERVAL_MAX;
 800d34c:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 800d350:	81bb      	strh	r3, [r7, #12]
   * Stop the timer, it will be restarted for a new shot
   * It does not hurt if the timer was not running
   */
  //HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);

  if ((NewStatus == APP_BLE_LP_ADV)
 800d352:	79fb      	ldrb	r3, [r7, #7]
 800d354:	2b02      	cmp	r3, #2
 800d356:	d119      	bne.n	800d38c <Adv_Request+0x68>
      && ((BleApplicationContext.Device_Connection_Status == APP_BLE_FAST_ADV)
 800d358:	4b35      	ldr	r3, [pc, #212]	@ (800d430 <Adv_Request+0x10c>)
 800d35a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d35e:	2b01      	cmp	r3, #1
 800d360:	d004      	beq.n	800d36c <Adv_Request+0x48>
          || (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_ADV)))
 800d362:	4b33      	ldr	r3, [pc, #204]	@ (800d430 <Adv_Request+0x10c>)
 800d364:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d368:	2b02      	cmp	r3, #2
 800d36a:	d10f      	bne.n	800d38c <Adv_Request+0x68>
  {
    /* Connection in ADVERTISE mode have to stop the current advertising */
    ret = aci_gap_set_non_discoverable();
 800d36c:	f7fc f81e 	bl	80093ac <aci_gap_set_non_discoverable>
 800d370:	4603      	mov	r3, r0
 800d372:	72fb      	strb	r3, [r7, #11]
    if (ret != BLE_STATUS_SUCCESS)
 800d374:	7afb      	ldrb	r3, [r7, #11]
 800d376:	2b00      	cmp	r3, #0
 800d378:	d005      	beq.n	800d386 <Adv_Request+0x62>
    {
      APP_DBG_MSG("==>> aci_gap_set_non_discoverable - Stop Advertising Failed , result: %d \n", ret);
 800d37a:	7afb      	ldrb	r3, [r7, #11]
 800d37c:	4619      	mov	r1, r3
 800d37e:	482d      	ldr	r0, [pc, #180]	@ (800d434 <Adv_Request+0x110>)
 800d380:	f001 f8d6 	bl	800e530 <iprintf>
 800d384:	e002      	b.n	800d38c <Adv_Request+0x68>
    }
    else
    {
      APP_DBG_MSG("==>> aci_gap_set_non_discoverable - Successfully Stopped Advertising \n");
 800d386:	482c      	ldr	r0, [pc, #176]	@ (800d438 <Adv_Request+0x114>)
 800d388:	f001 f942 	bl	800e610 <puts>
    }
  }

  BleApplicationContext.Device_Connection_Status = NewStatus;
 800d38c:	4a28      	ldr	r2, [pc, #160]	@ (800d430 <Adv_Request+0x10c>)
 800d38e:	79fb      	ldrb	r3, [r7, #7]
 800d390:	f882 3084 	strb.w	r3, [r2, #132]	@ 0x84
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_IND,
 800d394:	4b26      	ldr	r3, [pc, #152]	@ (800d430 <Adv_Request+0x10c>)
 800d396:	7e1b      	ldrb	r3, [r3, #24]
 800d398:	89ba      	ldrh	r2, [r7, #12]
 800d39a:	89f9      	ldrh	r1, [r7, #14]
 800d39c:	2000      	movs	r0, #0
 800d39e:	9006      	str	r0, [sp, #24]
 800d3a0:	2000      	movs	r0, #0
 800d3a2:	9005      	str	r0, [sp, #20]
 800d3a4:	4825      	ldr	r0, [pc, #148]	@ (800d43c <Adv_Request+0x118>)
 800d3a6:	9004      	str	r0, [sp, #16]
 800d3a8:	9303      	str	r3, [sp, #12]
 800d3aa:	4b25      	ldr	r3, [pc, #148]	@ (800d440 <Adv_Request+0x11c>)
 800d3ac:	9302      	str	r3, [sp, #8]
 800d3ae:	230a      	movs	r3, #10
 800d3b0:	9301      	str	r3, [sp, #4]
 800d3b2:	2300      	movs	r3, #0
 800d3b4:	9300      	str	r3, [sp, #0]
 800d3b6:	2300      	movs	r3, #0
 800d3b8:	2000      	movs	r0, #0
 800d3ba:	f7fc f81b 	bl	80093f4 <aci_gap_set_discoverable>
 800d3be:	4603      	mov	r3, r0
 800d3c0:	72fb      	strb	r3, [r7, #11]
                                 (uint8_t*) &a_LocalName,
                                 BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen,
                                 BleApplicationContext.BleApplicationContext_legacy.advtServUUID,
                                 0,
                                 0);
  if (ret != BLE_STATUS_SUCCESS)
 800d3c2:	7afb      	ldrb	r3, [r7, #11]
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d005      	beq.n	800d3d4 <Adv_Request+0xb0>
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - fail, result: 0x%x \n", ret);
 800d3c8:	7afb      	ldrb	r3, [r7, #11]
 800d3ca:	4619      	mov	r1, r3
 800d3cc:	481d      	ldr	r0, [pc, #116]	@ (800d444 <Adv_Request+0x120>)
 800d3ce:	f001 f8af 	bl	800e530 <iprintf>
 800d3d2:	e002      	b.n	800d3da <Adv_Request+0xb6>
  }
  else
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - Success\n");
 800d3d4:	481c      	ldr	r0, [pc, #112]	@ (800d448 <Adv_Request+0x124>)
 800d3d6:	f001 f91b 	bl	800e610 <puts>
  }

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_ManufData), (uint8_t*) a_ManufData);
 800d3da:	491c      	ldr	r1, [pc, #112]	@ (800d44c <Adv_Request+0x128>)
 800d3dc:	200e      	movs	r0, #14
 800d3de:	f7fc fb2f 	bl	8009a40 <aci_gap_update_adv_data>
 800d3e2:	4603      	mov	r3, r0
 800d3e4:	72fb      	strb	r3, [r7, #11]
  if (ret != BLE_STATUS_SUCCESS)
 800d3e6:	7afb      	ldrb	r3, [r7, #11]
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d00e      	beq.n	800d40a <Adv_Request+0xe6>
  {
    if (NewStatus == APP_BLE_FAST_ADV)
 800d3ec:	79fb      	ldrb	r3, [r7, #7]
 800d3ee:	2b01      	cmp	r3, #1
 800d3f0:	d105      	bne.n	800d3fe <Adv_Request+0xda>
    {
      APP_DBG_MSG("==>> Start Fast Advertising Failed , result: %d \n\r", ret);
 800d3f2:	7afb      	ldrb	r3, [r7, #11]
 800d3f4:	4619      	mov	r1, r3
 800d3f6:	4816      	ldr	r0, [pc, #88]	@ (800d450 <Adv_Request+0x12c>)
 800d3f8:	f001 f89a 	bl	800e530 <iprintf>
    {
      APP_DBG_MSG("==>> Success: Start Low Power Advertising \n\r");
    }
  }

  return;
 800d3fc:	e010      	b.n	800d420 <Adv_Request+0xfc>
      APP_DBG_MSG("==>> Start Low Power Advertising Failed , result: %d \n\r", ret);
 800d3fe:	7afb      	ldrb	r3, [r7, #11]
 800d400:	4619      	mov	r1, r3
 800d402:	4814      	ldr	r0, [pc, #80]	@ (800d454 <Adv_Request+0x130>)
 800d404:	f001 f894 	bl	800e530 <iprintf>
  return;
 800d408:	e00a      	b.n	800d420 <Adv_Request+0xfc>
    if (NewStatus == APP_BLE_FAST_ADV)
 800d40a:	79fb      	ldrb	r3, [r7, #7]
 800d40c:	2b01      	cmp	r3, #1
 800d40e:	d103      	bne.n	800d418 <Adv_Request+0xf4>
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
 800d410:	4811      	ldr	r0, [pc, #68]	@ (800d458 <Adv_Request+0x134>)
 800d412:	f001 f88d 	bl	800e530 <iprintf>
  return;
 800d416:	e003      	b.n	800d420 <Adv_Request+0xfc>
      APP_DBG_MSG("==>> Success: Start Low Power Advertising \n\r");
 800d418:	4810      	ldr	r0, [pc, #64]	@ (800d45c <Adv_Request+0x138>)
 800d41a:	f001 f889 	bl	800e530 <iprintf>
  return;
 800d41e:	bf00      	nop
}
 800d420:	3710      	adds	r7, #16
 800d422:	46bd      	mov	sp, r7
 800d424:	bd80      	pop	{r7, pc}
 800d426:	bf00      	nop
 800d428:	20000568 	.word	0x20000568
 800d42c:	2000056a 	.word	0x2000056a
 800d430:	200004d4 	.word	0x200004d4
 800d434:	080108d0 	.word	0x080108d0
 800d438:	0801091c 	.word	0x0801091c
 800d43c:	200004ed 	.word	0x200004ed
 800d440:	08010db4 	.word	0x08010db4
 800d444:	08010964 	.word	0x08010964
 800d448:	0801099c 	.word	0x0801099c
 800d44c:	20000014 	.word	0x20000014
 800d450:	080109c4 	.word	0x080109c4
 800d454:	080109f8 	.word	0x080109f8
 800d458:	08010a30 	.word	0x08010a30
 800d45c:	08010a58 	.word	0x08010a58

0800d460 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 800d460:	b580      	push	{r7, lr}
 800d462:	b086      	sub	sp, #24
 800d464:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 800d466:	f7fe fed7 	bl	800c218 <LL_FLASH_GetUDN>
 800d46a:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 800d46c:	693b      	ldr	r3, [r7, #16]
 800d46e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d472:	d023      	beq.n	800d4bc <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 800d474:	f7fe fee8 	bl	800c248 <LL_FLASH_GetSTCompanyID>
 800d478:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 800d47a:	f7fe fed9 	bl	800c230 <LL_FLASH_GetDeviceID>
 800d47e:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 800d480:	693b      	ldr	r3, [r7, #16]
 800d482:	b2da      	uxtb	r2, r3
 800d484:	4b16      	ldr	r3, [pc, #88]	@ (800d4e0 <BleGetBdAddress+0x80>)
 800d486:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 800d488:	693b      	ldr	r3, [r7, #16]
 800d48a:	0a1b      	lsrs	r3, r3, #8
 800d48c:	b2da      	uxtb	r2, r3
 800d48e:	4b14      	ldr	r3, [pc, #80]	@ (800d4e0 <BleGetBdAddress+0x80>)
 800d490:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	b2da      	uxtb	r2, r3
 800d496:	4b12      	ldr	r3, [pc, #72]	@ (800d4e0 <BleGetBdAddress+0x80>)
 800d498:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 800d49a:	68bb      	ldr	r3, [r7, #8]
 800d49c:	b2da      	uxtb	r2, r3
 800d49e:	4b10      	ldr	r3, [pc, #64]	@ (800d4e0 <BleGetBdAddress+0x80>)
 800d4a0:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 800d4a2:	68bb      	ldr	r3, [r7, #8]
 800d4a4:	0a1b      	lsrs	r3, r3, #8
 800d4a6:	b2da      	uxtb	r2, r3
 800d4a8:	4b0d      	ldr	r3, [pc, #52]	@ (800d4e0 <BleGetBdAddress+0x80>)
 800d4aa:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 800d4ac:	68bb      	ldr	r3, [r7, #8]
 800d4ae:	0c1b      	lsrs	r3, r3, #16
 800d4b0:	b2da      	uxtb	r2, r3
 800d4b2:	4b0b      	ldr	r3, [pc, #44]	@ (800d4e0 <BleGetBdAddress+0x80>)
 800d4b4:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 800d4b6:	4b0a      	ldr	r3, [pc, #40]	@ (800d4e0 <BleGetBdAddress+0x80>)
 800d4b8:	617b      	str	r3, [r7, #20]
 800d4ba:	e00b      	b.n	800d4d4 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 800d4bc:	2000      	movs	r0, #0
 800d4be:	f7fe f9fb 	bl	800b8b8 <OTP_Read>
 800d4c2:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d002      	beq.n	800d4d0 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	617b      	str	r3, [r7, #20]
 800d4ce:	e001      	b.n	800d4d4 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 800d4d0:	4b04      	ldr	r3, [pc, #16]	@ (800d4e4 <BleGetBdAddress+0x84>)
 800d4d2:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 800d4d4:	697b      	ldr	r3, [r7, #20]
}
 800d4d6:	4618      	mov	r0, r3
 800d4d8:	3718      	adds	r7, #24
 800d4da:	46bd      	mov	sp, r7
 800d4dc:	bd80      	pop	{r7, pc}
 800d4de:	bf00      	nop
 800d4e0:	200004cc 	.word	0x200004cc
 800d4e4:	08010d8c 	.word	0x08010d8c

0800d4e8 <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR P2P SERVER
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 800d4e8:	b580      	push	{r7, lr}
 800d4ea:	b082      	sub	sp, #8
 800d4ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 800d4ee:	4b10      	ldr	r3, [pc, #64]	@ (800d530 <Adv_Cancel+0x48>)
 800d4f0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d4f4:	2b05      	cmp	r3, #5
 800d4f6:	d017      	beq.n	800d528 <Adv_Cancel+0x40>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800d4f8:	2392      	movs	r3, #146	@ 0x92
 800d4fa:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 800d4fc:	f7fb ff56 	bl	80093ac <aci_gap_set_non_discoverable>
 800d500:	4603      	mov	r3, r0
 800d502:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800d504:	4b0a      	ldr	r3, [pc, #40]	@ (800d530 <Adv_Cancel+0x48>)
 800d506:	2200      	movs	r2, #0
 800d508:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
    if (ret != BLE_STATUS_SUCCESS)
 800d50c:	79fb      	ldrb	r3, [r7, #7]
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d003      	beq.n	800d51a <Adv_Cancel+0x32>
    {
      APP_DBG_MSG("** STOP ADVERTISING **  Failed \r\n\r");
 800d512:	4808      	ldr	r0, [pc, #32]	@ (800d534 <Adv_Cancel+0x4c>)
 800d514:	f001 f80c 	bl	800e530 <iprintf>

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 800d518:	e006      	b.n	800d528 <Adv_Cancel+0x40>
      APP_DBG_MSG("  \r\n\r");
 800d51a:	4807      	ldr	r0, [pc, #28]	@ (800d538 <Adv_Cancel+0x50>)
 800d51c:	f001 f808 	bl	800e530 <iprintf>
      APP_DBG_MSG("** STOP ADVERTISING **  \r\n\r");
 800d520:	4806      	ldr	r0, [pc, #24]	@ (800d53c <Adv_Cancel+0x54>)
 800d522:	f001 f805 	bl	800e530 <iprintf>
  return;
 800d526:	bf00      	nop
 800d528:	bf00      	nop
}
 800d52a:	3708      	adds	r7, #8
 800d52c:	46bd      	mov	sp, r7
 800d52e:	bd80      	pop	{r7, pc}
 800d530:	200004d4 	.word	0x200004d4
 800d534:	08010a88 	.word	0x08010a88
 800d538:	08010aac 	.word	0x08010aac
 800d53c:	08010ab4 	.word	0x08010ab4

0800d540 <Switch_OFF_GPIO>:

  return;
}

static void Switch_OFF_GPIO()
{
 800d540:	b480      	push	{r7}
 800d542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Switch_OFF_GPIO */

  /* USER CODE END Switch_OFF_GPIO */
}
 800d544:	bf00      	nop
 800d546:	46bd      	mov	sp, r7
 800d548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d54c:	4770      	bx	lr
	...

0800d550 <BLE_SVC_L2CAP_Conn_Update>:

#if (L2CAP_REQUEST_NEW_CONN_PARAM != 0)
void BLE_SVC_L2CAP_Conn_Update(uint16_t ConnectionHandle)
{
 800d550:	b590      	push	{r4, r7, lr}
 800d552:	b089      	sub	sp, #36	@ 0x24
 800d554:	af02      	add	r7, sp, #8
 800d556:	4603      	mov	r3, r0
 800d558:	80fb      	strh	r3, [r7, #6]
  /* USER CODE BEGIN BLE_SVC_L2CAP_Conn_Update_1 */

  /* USER CODE END BLE_SVC_L2CAP_Conn_Update_1 */

  if (mutex == 1)
 800d55a:	4b1d      	ldr	r3, [pc, #116]	@ (800d5d0 <BLE_SVC_L2CAP_Conn_Update+0x80>)
 800d55c:	781b      	ldrb	r3, [r3, #0]
 800d55e:	2b01      	cmp	r3, #1
 800d560:	d132      	bne.n	800d5c8 <BLE_SVC_L2CAP_Conn_Update+0x78>
  {
    mutex = 0;
 800d562:	4b1b      	ldr	r3, [pc, #108]	@ (800d5d0 <BLE_SVC_L2CAP_Conn_Update+0x80>)
 800d564:	2200      	movs	r2, #0
 800d566:	701a      	strb	r2, [r3, #0]
    index_con_int = (index_con_int + 1)%SIZE_TAB_CONN_INT;
 800d568:	4b1a      	ldr	r3, [pc, #104]	@ (800d5d4 <BLE_SVC_L2CAP_Conn_Update+0x84>)
 800d56a:	781b      	ldrb	r3, [r3, #0]
 800d56c:	3301      	adds	r3, #1
 800d56e:	2b00      	cmp	r3, #0
 800d570:	f003 0301 	and.w	r3, r3, #1
 800d574:	bfb8      	it	lt
 800d576:	425b      	neglt	r3, r3
 800d578:	b2da      	uxtb	r2, r3
 800d57a:	4b16      	ldr	r3, [pc, #88]	@ (800d5d4 <BLE_SVC_L2CAP_Conn_Update+0x84>)
 800d57c:	701a      	strb	r2, [r3, #0]
    //uint16_t interval_min = CONN_P(a_ConnInterval[index_con_int]);
    //uint16_t interval_max = CONN_P(a_ConnInterval[index_con_int]);
    //uint16_t interval_min = CONN_P(15); //2025-07-02
    //uint16_t interval_max = CONN_P(25); //2025-07-02
    uint16_t interval_min = CONN_P(24);
 800d57e:	2313      	movs	r3, #19
 800d580:	82fb      	strh	r3, [r7, #22]
    uint16_t interval_max = CONN_P(45);
 800d582:	2324      	movs	r3, #36	@ 0x24
 800d584:	82bb      	strh	r3, [r7, #20]
    uint16_t peripheral_latency = L2CAP_PERIPHERAL_LATENCY;
 800d586:	2300      	movs	r3, #0
 800d588:	827b      	strh	r3, [r7, #18]
    uint16_t timeout_multiplier = L2CAP_TIMEOUT_MULTIPLIER;
 800d58a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800d58e:	823b      	strh	r3, [r7, #16]
    tBleStatus ret;

    ret = aci_l2cap_connection_parameter_update_req(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,
 800d590:	4b11      	ldr	r3, [pc, #68]	@ (800d5d8 <BLE_SVC_L2CAP_Conn_Update+0x88>)
 800d592:	8ad8      	ldrh	r0, [r3, #22]
 800d594:	8a7c      	ldrh	r4, [r7, #18]
 800d596:	8aba      	ldrh	r2, [r7, #20]
 800d598:	8af9      	ldrh	r1, [r7, #22]
 800d59a:	8a3b      	ldrh	r3, [r7, #16]
 800d59c:	9300      	str	r3, [sp, #0]
 800d59e:	4623      	mov	r3, r4
 800d5a0:	f7fd f8ff 	bl	800a7a2 <aci_l2cap_connection_parameter_update_req>
 800d5a4:	4603      	mov	r3, r0
 800d5a6:	73fb      	strb	r3, [r7, #15]
                                                    interval_min, interval_max,
                                                    peripheral_latency, timeout_multiplier);
    if (ret != BLE_STATUS_SUCCESS)
 800d5a8:	7bfb      	ldrb	r3, [r7, #15]
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d008      	beq.n	800d5c0 <BLE_SVC_L2CAP_Conn_Update+0x70>
    {
    	HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_SET);
 800d5ae:	2201      	movs	r2, #1
 800d5b0:	2101      	movs	r1, #1
 800d5b2:	480a      	ldr	r0, [pc, #40]	@ (800d5dc <BLE_SVC_L2CAP_Conn_Update+0x8c>)
 800d5b4:	f7f6 fd0a 	bl	8003fcc <HAL_GPIO_WritePin>
      APP_DBG_MSG("BLE_SVC_L2CAP_Conn_Update(), Failed \r\n\r");
 800d5b8:	4809      	ldr	r0, [pc, #36]	@ (800d5e0 <BLE_SVC_L2CAP_Conn_Update+0x90>)
 800d5ba:	f000 ffb9 	bl	800e530 <iprintf>
  }

  /* USER CODE BEGIN BLE_SVC_L2CAP_Conn_Update_2 */
  /* USER CODE END BLE_SVC_L2CAP_Conn_Update_2 */

  return;
 800d5be:	e003      	b.n	800d5c8 <BLE_SVC_L2CAP_Conn_Update+0x78>
      APP_DBG_MSG("BLE_SVC_L2CAP_Conn_Update(), Successfully \r\n\r");
 800d5c0:	4808      	ldr	r0, [pc, #32]	@ (800d5e4 <BLE_SVC_L2CAP_Conn_Update+0x94>)
 800d5c2:	f000 ffb5 	bl	800e530 <iprintf>
  return;
 800d5c6:	bf00      	nop
 800d5c8:	bf00      	nop
}
 800d5ca:	371c      	adds	r7, #28
 800d5cc:	46bd      	mov	sp, r7
 800d5ce:	bd90      	pop	{r4, r7, pc}
 800d5d0:	20000571 	.word	0x20000571
 800d5d4:	20000570 	.word	0x20000570
 800d5d8:	200004d4 	.word	0x200004d4
 800d5dc:	48000400 	.word	0x48000400
 800d5e0:	08010ad0 	.word	0x08010ad0
 800d5e4:	08010af8 	.word	0x08010af8

0800d5e8 <Connection_Interval_Update_Req>:
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

#if (L2CAP_REQUEST_NEW_CONN_PARAM != 0)
static void Connection_Interval_Update_Req(void)
{
 800d5e8:	b580      	push	{r7, lr}
 800d5ea:	af00      	add	r7, sp, #0
  if (BleApplicationContext.Device_Connection_Status != APP_BLE_FAST_ADV && BleApplicationContext.Device_Connection_Status != APP_BLE_IDLE)
 800d5ec:	4b08      	ldr	r3, [pc, #32]	@ (800d610 <Connection_Interval_Update_Req+0x28>)
 800d5ee:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d5f2:	2b01      	cmp	r3, #1
 800d5f4:	d00a      	beq.n	800d60c <Connection_Interval_Update_Req+0x24>
 800d5f6:	4b06      	ldr	r3, [pc, #24]	@ (800d610 <Connection_Interval_Update_Req+0x28>)
 800d5f8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d005      	beq.n	800d60c <Connection_Interval_Update_Req+0x24>
  {
    BLE_SVC_L2CAP_Conn_Update(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 800d600:	4b03      	ldr	r3, [pc, #12]	@ (800d610 <Connection_Interval_Update_Req+0x28>)
 800d602:	8adb      	ldrh	r3, [r3, #22]
 800d604:	4618      	mov	r0, r3
 800d606:	f7ff ffa3 	bl	800d550 <BLE_SVC_L2CAP_Conn_Update>
  }

  return;
 800d60a:	bf00      	nop
 800d60c:	bf00      	nop
}
 800d60e:	bd80      	pop	{r7, pc}
 800d610:	200004d4 	.word	0x200004d4

0800d614 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 800d614:	b580      	push	{r7, lr}
 800d616:	b082      	sub	sp, #8
 800d618:	af00      	add	r7, sp, #0
 800d61a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800d61c:	2100      	movs	r1, #0
 800d61e:	2004      	movs	r0, #4
 800d620:	f000 fdc8 	bl	800e1b4 <UTIL_SEQ_SetTask>

  return;
 800d624:	bf00      	nop
}
 800d626:	3708      	adds	r7, #8
 800d628:	46bd      	mov	sp, r7
 800d62a:	bd80      	pop	{r7, pc}

0800d62c <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 800d62c:	b580      	push	{r7, lr}
 800d62e:	b082      	sub	sp, #8
 800d630:	af00      	add	r7, sp, #0
 800d632:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800d634:	2001      	movs	r0, #1
 800d636:	f000 fe29 	bl	800e28c <UTIL_SEQ_SetEvt>

  return;
 800d63a:	bf00      	nop
}
 800d63c:	3708      	adds	r7, #8
 800d63e:	46bd      	mov	sp, r7
 800d640:	bd80      	pop	{r7, pc}

0800d642 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 800d642:	b580      	push	{r7, lr}
 800d644:	b082      	sub	sp, #8
 800d646:	af00      	add	r7, sp, #0
 800d648:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800d64a:	2001      	movs	r0, #1
 800d64c:	f000 fe3e 	bl	800e2cc <UTIL_SEQ_WaitEvt>

  return;
 800d650:	bf00      	nop
}
 800d652:	3708      	adds	r7, #8
 800d654:	46bd      	mov	sp, r7
 800d656:	bd80      	pop	{r7, pc}

0800d658 <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 800d658:	b580      	push	{r7, lr}
 800d65a:	b084      	sub	sp, #16
 800d65c:	af00      	add	r7, sp, #0
 800d65e:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	685b      	ldr	r3, [r3, #4]
 800d668:	3308      	adds	r3, #8
 800d66a:	4618      	mov	r0, r3
 800d66c:	f7fd fa22 	bl	800aab4 <SVCCTL_UserEvtRx>
 800d670:	4603      	mov	r3, r0
 800d672:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 800d674:	7afb      	ldrb	r3, [r7, #11]
 800d676:	2b00      	cmp	r3, #0
 800d678:	d003      	beq.n	800d682 <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	2201      	movs	r2, #1
 800d67e:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 800d680:	e003      	b.n	800d68a <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	2200      	movs	r2, #0
 800d686:	701a      	strb	r2, [r3, #0]
  return;
 800d688:	bf00      	nop
}
 800d68a:	3710      	adds	r7, #16
 800d68c:	46bd      	mov	sp, r7
 800d68e:	bd80      	pop	{r7, pc}

0800d690 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 800d690:	b580      	push	{r7, lr}
 800d692:	b084      	sub	sp, #16
 800d694:	af00      	add	r7, sp, #0
 800d696:	4603      	mov	r3, r0
 800d698:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 800d69a:	79fb      	ldrb	r3, [r7, #7]
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d002      	beq.n	800d6a6 <BLE_StatusNot+0x16>
 800d6a0:	2b01      	cmp	r3, #1
 800d6a2:	d006      	beq.n	800d6b2 <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 800d6a4:	e00b      	b.n	800d6be <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800d6a6:	233f      	movs	r3, #63	@ 0x3f
 800d6a8:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 800d6aa:	68f8      	ldr	r0, [r7, #12]
 800d6ac:	f000 fdae 	bl	800e20c <UTIL_SEQ_PauseTask>
      break;
 800d6b0:	e005      	b.n	800d6be <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800d6b2:	233f      	movs	r3, #63	@ 0x3f
 800d6b4:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 800d6b6:	68f8      	ldr	r0, [r7, #12]
 800d6b8:	f000 fdc8 	bl	800e24c <UTIL_SEQ_ResumeTask>
      break;
 800d6bc:	bf00      	nop
  }

  return;
 800d6be:	bf00      	nop
}
 800d6c0:	3710      	adds	r7, #16
 800d6c2:	46bd      	mov	sp, r7
 800d6c4:	bd80      	pop	{r7, pc}
	...

0800d6c8 <Hermes_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Hermes_Event_Handler(void *Event)
{
 800d6c8:	b580      	push	{r7, lr}
 800d6ca:	b08a      	sub	sp, #40	@ 0x28
 800d6cc:	af00      	add	r7, sp, #0
 800d6ce:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_blecore_aci *blecore_evt;
  aci_gatt_attribute_modified_event_rp0    * attribute_modified;
  P2PS_STM_App_Notification_evt_t Notification;

  return_value = SVCCTL_EvtNotAck;
 800d6d0:	2300      	movs	r3, #0
 800d6d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	3301      	adds	r3, #1
 800d6da:	623b      	str	r3, [r7, #32]

  switch(event_pckt->evt)
 800d6dc:	6a3b      	ldr	r3, [r7, #32]
 800d6de:	781b      	ldrb	r3, [r3, #0]
 800d6e0:	2bff      	cmp	r3, #255	@ 0xff
 800d6e2:	d14f      	bne.n	800d784 <Hermes_Event_Handler+0xbc>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 800d6e4:	6a3b      	ldr	r3, [r7, #32]
 800d6e6:	3302      	adds	r3, #2
 800d6e8:	61fb      	str	r3, [r7, #28]
      switch(blecore_evt->ecode)
 800d6ea:	69fb      	ldr	r3, [r7, #28]
 800d6ec:	881b      	ldrh	r3, [r3, #0]
 800d6ee:	b29b      	uxth	r3, r3
 800d6f0:	461a      	mov	r2, r3
 800d6f2:	f640 4301 	movw	r3, #3073	@ 0xc01
 800d6f6:	429a      	cmp	r2, r3
 800d6f8:	d140      	bne.n	800d77c <Hermes_Event_Handler+0xb4>
      {
        case ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE:
       {
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 800d6fa:	69fb      	ldr	r3, [r7, #28]
 800d6fc:	3302      	adds	r3, #2
 800d6fe:	61bb      	str	r3, [r7, #24]
            if(attribute_modified->Attr_Handle == (BleApplicationContext.eeg_data_char_handle + 2))
 800d700:	69bb      	ldr	r3, [r7, #24]
 800d702:	885b      	ldrh	r3, [r3, #2]
 800d704:	b29b      	uxth	r3, r3
 800d706:	461a      	mov	r2, r3
 800d708:	4b22      	ldr	r3, [pc, #136]	@ (800d794 <Hermes_Event_Handler+0xcc>)
 800d70a:	f8b3 3088 	ldrh.w	r3, [r3, #136]	@ 0x88
 800d70e:	3302      	adds	r3, #2
 800d710:	429a      	cmp	r2, r3
 800d712:	d118      	bne.n	800d746 <Hermes_Event_Handler+0x7e>
            {
              /**
               * Descriptor handle
               */
              return_value = SVCCTL_EvtAckFlowEnable;
 800d714:	2301      	movs	r3, #1
 800d716:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
              /**
               * Notify to application
               */
              if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 800d71a:	69bb      	ldr	r3, [r7, #24]
 800d71c:	7a1b      	ldrb	r3, [r3, #8]
 800d71e:	f003 0301 	and.w	r3, r3, #1
 800d722:	2b00      	cmp	r3, #0
 800d724:	d007      	beq.n	800d736 <Hermes_Event_Handler+0x6e>
              {
                Notification.P2P_Evt_Opcode = P2PS_STM__NOTIFY_ENABLED_EVT;
 800d726:	2300      	movs	r3, #0
 800d728:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 800d72a:	f107 0308 	add.w	r3, r7, #8
 800d72e:	4618      	mov	r0, r3
 800d730:	f000 f834 	bl	800d79c <P2PS_STM_App_Notification>
            		HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, attribute_modified->Attr_Data[1]!=0);
                }
            }

        }
        break;
 800d734:	e024      	b.n	800d780 <Hermes_Event_Handler+0xb8>
                Notification.P2P_Evt_Opcode = P2PS_STM_NOTIFY_DISABLED_EVT;
 800d736:	2301      	movs	r3, #1
 800d738:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 800d73a:	f107 0308 	add.w	r3, r7, #8
 800d73e:	4618      	mov	r0, r3
 800d740:	f000 f82c 	bl	800d79c <P2PS_STM_App_Notification>
        break;
 800d744:	e01c      	b.n	800d780 <Hermes_Event_Handler+0xb8>
            else if(attribute_modified->Attr_Handle == (BleApplicationContext.eeg_config_char_handle + 1))
 800d746:	69bb      	ldr	r3, [r7, #24]
 800d748:	885b      	ldrh	r3, [r3, #2]
 800d74a:	b29b      	uxth	r3, r3
 800d74c:	461a      	mov	r2, r3
 800d74e:	4b11      	ldr	r3, [pc, #68]	@ (800d794 <Hermes_Event_Handler+0xcc>)
 800d750:	f8b3 3092 	ldrh.w	r3, [r3, #146]	@ 0x92
 800d754:	3301      	adds	r3, #1
 800d756:	429a      	cmp	r2, r3
 800d758:	d112      	bne.n	800d780 <Hermes_Event_Handler+0xb8>
            	if(attribute_modified->Attr_Data[0]==0x02){
 800d75a:	69bb      	ldr	r3, [r7, #24]
 800d75c:	7a1b      	ldrb	r3, [r3, #8]
 800d75e:	2b02      	cmp	r3, #2
 800d760:	d10e      	bne.n	800d780 <Hermes_Event_Handler+0xb8>
            		HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, attribute_modified->Attr_Data[1]!=0);
 800d762:	69bb      	ldr	r3, [r7, #24]
 800d764:	7a5b      	ldrb	r3, [r3, #9]
 800d766:	2b00      	cmp	r3, #0
 800d768:	bf14      	ite	ne
 800d76a:	2301      	movne	r3, #1
 800d76c:	2300      	moveq	r3, #0
 800d76e:	b2db      	uxtb	r3, r3
 800d770:	461a      	mov	r2, r3
 800d772:	2101      	movs	r1, #1
 800d774:	4808      	ldr	r0, [pc, #32]	@ (800d798 <Hermes_Event_Handler+0xd0>)
 800d776:	f7f6 fc29 	bl	8003fcc <HAL_GPIO_WritePin>
        break;
 800d77a:	e001      	b.n	800d780 <Hermes_Event_Handler+0xb8>

        default:
          break;
 800d77c:	bf00      	nop
 800d77e:	e002      	b.n	800d786 <Hermes_Event_Handler+0xbe>
        break;
 800d780:	bf00      	nop
      }
    }
    break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 800d782:	e000      	b.n	800d786 <Hermes_Event_Handler+0xbe>

    default:
      break;
 800d784:	bf00      	nop
  }

  return(return_value);
 800d786:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}/* end SVCCTL_EvtAckStatus_t */
 800d78a:	4618      	mov	r0, r3
 800d78c:	3728      	adds	r7, #40	@ 0x28
 800d78e:	46bd      	mov	sp, r7
 800d790:	bd80      	pop	{r7, pc}
 800d792:	bf00      	nop
 800d794:	200004d4 	.word	0x200004d4
 800d798:	48000400 	.word	0x48000400

0800d79c <P2PS_STM_App_Notification>:
//static void P2PS_APP_LED_BUTTON_context_Init(void);
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void P2PS_STM_App_Notification(P2PS_STM_App_Notification_evt_t *pNotification)
{
 800d79c:	b580      	push	{r7, lr}
 800d79e:	b082      	sub	sp, #8
 800d7a0:	af00      	add	r7, sp, #0
 800d7a2:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_STM_App_Notification_1 */
/* USER CODE END P2PS_STM_App_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	781b      	ldrb	r3, [r3, #0]
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d002      	beq.n	800d7b2 <P2PS_STM_App_Notification+0x16>
 800d7ac:	2b01      	cmp	r3, #1
 800d7ae:	d00a      	beq.n	800d7c6 <P2PS_STM_App_Notification+0x2a>

    default:
/* USER CODE BEGIN P2PS_STM_App_Notification_default */
      
/* USER CODE END P2PS_STM_App_Notification_default */
      break;
 800d7b0:	e013      	b.n	800d7da <P2PS_STM_App_Notification+0x3e>
      P2P_Server_App_Context.Notification_Status = 1;
 800d7b2:	4b0c      	ldr	r3, [pc, #48]	@ (800d7e4 <P2PS_STM_App_Notification+0x48>)
 800d7b4:	2201      	movs	r2, #1
 800d7b6:	701a      	strb	r2, [r3, #0]
      APP_DBG_MSG("-- P2P APPLICATION SERVER : NOTIFICATION ENABLED\n"); 
 800d7b8:	480b      	ldr	r0, [pc, #44]	@ (800d7e8 <P2PS_STM_App_Notification+0x4c>)
 800d7ba:	f000 ff29 	bl	800e610 <puts>
      APP_DBG_MSG(" \n\r");
 800d7be:	480b      	ldr	r0, [pc, #44]	@ (800d7ec <P2PS_STM_App_Notification+0x50>)
 800d7c0:	f000 feb6 	bl	800e530 <iprintf>
      break;
 800d7c4:	e009      	b.n	800d7da <P2PS_STM_App_Notification+0x3e>
      P2P_Server_App_Context.Notification_Status = 0;
 800d7c6:	4b07      	ldr	r3, [pc, #28]	@ (800d7e4 <P2PS_STM_App_Notification+0x48>)
 800d7c8:	2200      	movs	r2, #0
 800d7ca:	701a      	strb	r2, [r3, #0]
      APP_DBG_MSG("-- P2P APPLICATION SERVER : NOTIFICATION DISABLED\n");
 800d7cc:	4808      	ldr	r0, [pc, #32]	@ (800d7f0 <P2PS_STM_App_Notification+0x54>)
 800d7ce:	f000 ff1f 	bl	800e610 <puts>
      APP_DBG_MSG(" \n\r");
 800d7d2:	4806      	ldr	r0, [pc, #24]	@ (800d7ec <P2PS_STM_App_Notification+0x50>)
 800d7d4:	f000 feac 	bl	800e530 <iprintf>
      break;
 800d7d8:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_STM_App_Notification_2 */

/* USER CODE END P2PS_STM_App_Notification_2 */
  return;
 800d7da:	bf00      	nop
}
 800d7dc:	3708      	adds	r7, #8
 800d7de:	46bd      	mov	sp, r7
 800d7e0:	bd80      	pop	{r7, pc}
 800d7e2:	bf00      	nop
 800d7e4:	200021d4 	.word	0x200021d4
 800d7e8:	08010b28 	.word	0x08010b28
 800d7ec:	08010b5c 	.word	0x08010b5c
 800d7f0:	08010b60 	.word	0x08010b60

0800d7f4 <P2PS_APP_Notification>:

void P2PS_APP_Notification(P2PS_APP_ConnHandle_Not_evt_t *pNotification)
{
 800d7f4:	b480      	push	{r7}
 800d7f6:	b083      	sub	sp, #12
 800d7f8:	af00      	add	r7, sp, #0
 800d7fa:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_APP_Notification_1 */

/* USER CODE END P2PS_APP_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	781b      	ldrb	r3, [r3, #0]
 800d800:	2b00      	cmp	r3, #0
 800d802:	d006      	beq.n	800d812 <P2PS_APP_Notification+0x1e>
 800d804:	2b01      	cmp	r3, #1
 800d806:	d000      	beq.n	800d80a <P2PS_APP_Notification+0x16>

    default:
/* USER CODE BEGIN P2PS_APP_Notification_default */

/* USER CODE END P2PS_APP_Notification_default */
      break;
 800d808:	e004      	b.n	800d814 <P2PS_APP_Notification+0x20>
    	P2P_Server_App_Context.Notification_Status = 0;
 800d80a:	4b05      	ldr	r3, [pc, #20]	@ (800d820 <P2PS_APP_Notification+0x2c>)
 800d80c:	2200      	movs	r2, #0
 800d80e:	701a      	strb	r2, [r3, #0]
    break;
 800d810:	e000      	b.n	800d814 <P2PS_APP_Notification+0x20>
    break;
 800d812:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_APP_Notification_2 */

/* USER CODE END P2PS_APP_Notification_2 */
  return;
 800d814:	bf00      	nop
}
 800d816:	370c      	adds	r7, #12
 800d818:	46bd      	mov	sp, r7
 800d81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d81e:	4770      	bx	lr
 800d820:	200021d4 	.word	0x200021d4

0800d824 <P2PS_APP_Init>:

void P2PS_APP_Init(void)
{
 800d824:	b580      	push	{r7, lr}
 800d826:	af00      	add	r7, sp, #0
/* USER CODE BEGIN P2PS_APP_Init */


#ifdef BLE_BUTTON_EVENTS
	UTIL_SEQ_RegTask( 1<< CFG_TASK_SWA_BUTTON_PUSHED_ID, UTIL_SEQ_RFU, SWA_Send_Notification ); //
 800d828:	4a09      	ldr	r2, [pc, #36]	@ (800d850 <P2PS_APP_Init+0x2c>)
 800d82a:	2100      	movs	r1, #0
 800d82c:	2008      	movs	r0, #8
 800d82e:	f000 fc9f 	bl	800e170 <UTIL_SEQ_RegTask>
	UTIL_SEQ_RegTask( 1<< CFG_TASK_SWB_BUTTON_PUSHED_ID, UTIL_SEQ_RFU, SWB_Send_Notification ); //
 800d832:	4a08      	ldr	r2, [pc, #32]	@ (800d854 <P2PS_APP_Init+0x30>)
 800d834:	2100      	movs	r1, #0
 800d836:	2010      	movs	r0, #16
 800d838:	f000 fc9a 	bl	800e170 <UTIL_SEQ_RegTask>
	UTIL_SEQ_RegTask( 1<< CFG_TASK_IMU_SAMPLE_ID, UTIL_SEQ_RFU, get_and_send_motion_samples ); //
 800d83c:	4a06      	ldr	r2, [pc, #24]	@ (800d858 <P2PS_APP_Init+0x34>)
 800d83e:	2100      	movs	r1, #0
 800d840:	2020      	movs	r0, #32
 800d842:	f000 fc95 	bl	800e170 <UTIL_SEQ_RegTask>
//(FS) Need to attach whatever user function here

  /**
   * Initialize LedButton Service
   */
  P2P_Server_App_Context.Notification_Status=0; 
 800d846:	4b05      	ldr	r3, [pc, #20]	@ (800d85c <P2PS_APP_Init+0x38>)
 800d848:	2200      	movs	r2, #0
 800d84a:	701a      	strb	r2, [r3, #0]


  //P2PS_APP_LED_BUTTON_context_Init();
/* USER CODE END P2PS_APP_Init */
  return;
 800d84c:	bf00      	nop
}
 800d84e:	bd80      	pop	{r7, pc}
 800d850:	0800d881 	.word	0x0800d881
 800d854:	0800d8ad 	.word	0x0800d8ad
 800d858:	0800d8d9 	.word	0x0800d8d9
 800d85c:	200021d4 	.word	0x200021d4

0800d860 <APP_SWA_Button_Action>:

}
#endif

void APP_SWA_Button_Action(void)
{
 800d860:	b580      	push	{r7, lr}
 800d862:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetTask( 1<<CFG_TASK_SWA_BUTTON_PUSHED_ID, CFG_SCH_PRIO_0);
 800d864:	2100      	movs	r1, #0
 800d866:	2008      	movs	r0, #8
 800d868:	f000 fca4 	bl	800e1b4 <UTIL_SEQ_SetTask>
  return;
 800d86c:	bf00      	nop
}
 800d86e:	bd80      	pop	{r7, pc}

0800d870 <APP_SWB_Button_Action>:

void APP_SWB_Button_Action(void)
{
 800d870:	b580      	push	{r7, lr}
 800d872:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetTask( 1<<CFG_TASK_SWB_BUTTON_PUSHED_ID, CFG_SCH_PRIO_0);
 800d874:	2100      	movs	r1, #0
 800d876:	2010      	movs	r0, #16
 800d878:	f000 fc9c 	bl	800e1b4 <UTIL_SEQ_SetTask>
  return;
 800d87c:	bf00      	nop
}
 800d87e:	bd80      	pop	{r7, pc}

0800d880 <SWA_Send_Notification>:
	// insert local button management here
}


void SWA_Send_Notification(void)
{
 800d880:	b580      	push	{r7, lr}
 800d882:	af00      	add	r7, sp, #0
	current_event_payload.event_type = EVENT_TYPE_BUTTON_PRESSED;
 800d884:	4b07      	ldr	r3, [pc, #28]	@ (800d8a4 <SWA_Send_Notification+0x24>)
 800d886:	2201      	movs	r2, #1
 800d888:	701a      	strb	r2, [r3, #0]
	current_event_payload.source_id = BUTTON_ID_A;
 800d88a:	4b06      	ldr	r3, [pc, #24]	@ (800d8a4 <SWA_Send_Notification+0x24>)
 800d88c:	2201      	movs	r2, #1
 800d88e:	705a      	strb	r2, [r3, #1]
	current_event_payload.packet_id = packet_counter;
 800d890:	4b05      	ldr	r3, [pc, #20]	@ (800d8a8 <SWA_Send_Notification+0x28>)
 800d892:	781a      	ldrb	r2, [r3, #0]
 800d894:	4b03      	ldr	r3, [pc, #12]	@ (800d8a4 <SWA_Send_Notification+0x24>)
 800d896:	709a      	strb	r2, [r3, #2]

	APP_BLE_Send_Event_Notification(&current_event_payload);
 800d898:	4802      	ldr	r0, [pc, #8]	@ (800d8a4 <SWA_Send_Notification+0x24>)
 800d89a:	f7ff fb45 	bl	800cf28 <APP_BLE_Send_Event_Notification>
}
 800d89e:	bf00      	nop
 800d8a0:	bd80      	pop	{r7, pc}
 800d8a2:	bf00      	nop
 800d8a4:	200021bc 	.word	0x200021bc
 800d8a8:	200021b4 	.word	0x200021b4

0800d8ac <SWB_Send_Notification>:


void SWB_Send_Notification(void)
{
 800d8ac:	b580      	push	{r7, lr}
 800d8ae:	af00      	add	r7, sp, #0
	current_event_payload.event_type = EVENT_TYPE_BUTTON_PRESSED;
 800d8b0:	4b07      	ldr	r3, [pc, #28]	@ (800d8d0 <SWB_Send_Notification+0x24>)
 800d8b2:	2201      	movs	r2, #1
 800d8b4:	701a      	strb	r2, [r3, #0]
	current_event_payload.source_id = BUTTON_ID_B;
 800d8b6:	4b06      	ldr	r3, [pc, #24]	@ (800d8d0 <SWB_Send_Notification+0x24>)
 800d8b8:	2202      	movs	r2, #2
 800d8ba:	705a      	strb	r2, [r3, #1]
	current_event_payload.packet_id = packet_counter;
 800d8bc:	4b05      	ldr	r3, [pc, #20]	@ (800d8d4 <SWB_Send_Notification+0x28>)
 800d8be:	781a      	ldrb	r2, [r3, #0]
 800d8c0:	4b03      	ldr	r3, [pc, #12]	@ (800d8d0 <SWB_Send_Notification+0x24>)
 800d8c2:	709a      	strb	r2, [r3, #2]

	APP_BLE_Send_Event_Notification(&current_event_payload);
 800d8c4:	4802      	ldr	r0, [pc, #8]	@ (800d8d0 <SWB_Send_Notification+0x24>)
 800d8c6:	f7ff fb2f 	bl	800cf28 <APP_BLE_Send_Event_Notification>
}
 800d8ca:	bf00      	nop
 800d8cc:	bd80      	pop	{r7, pc}
 800d8ce:	bf00      	nop
 800d8d0:	200021bc 	.word	0x200021bc
 800d8d4:	200021b4 	.word	0x200021b4

0800d8d8 <get_and_send_motion_samples>:

static uint8_t peripheralSwitch = 0;

void get_and_send_motion_samples(void){
 800d8d8:	b580      	push	{r7, lr}
 800d8da:	af00      	add	r7, sp, #0
	get_and_send_imu_sample();
 800d8dc:	f000 f802 	bl	800d8e4 <get_and_send_imu_sample>
	}else{
		get_and_send_compass_sample();
	}
	peripheralSwitch = (peripheralSwitch == 1) ? 0 : 1;
	*/
}
 800d8e0:	bf00      	nop
 800d8e2:	bd80      	pop	{r7, pc}

0800d8e4 <get_and_send_imu_sample>:

//static IMU_Sample_t imu_buffer[5] = {0};  // Room for 5 samples

//int8_t* imu_sample[12] = {0};

void get_and_send_imu_sample(void){
 800d8e4:	b580      	push	{r7, lr}
 800d8e6:	b082      	sub	sp, #8
 800d8e8:	af00      	add	r7, sp, #0

	if(P2P_Server_App_Context.Notification_Status==1){
 800d8ea:	4b11      	ldr	r3, [pc, #68]	@ (800d930 <get_and_send_imu_sample+0x4c>)
 800d8ec:	781b      	ldrb	r3, [r3, #0]
 800d8ee:	2b01      	cmp	r3, #1
 800d8f0:	d11b      	bne.n	800d92a <get_and_send_imu_sample+0x46>

		int16_t* imu_sample = ism330_ReadIMU();
 800d8f2:	f7f4 fd81 	bl	80023f8 <ism330_ReadIMU>
 800d8f6:	6078      	str	r0, [r7, #4]
		//int16_t* compass_sample = lis3mdl_ReadMag();

		if(imu_sample == NULL){
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d105      	bne.n	800d90a <get_and_send_imu_sample+0x26>
			HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_SET);
 800d8fe:	2201      	movs	r2, #1
 800d900:	2101      	movs	r1, #1
 800d902:	480c      	ldr	r0, [pc, #48]	@ (800d934 <get_and_send_imu_sample+0x50>)
 800d904:	f7f6 fb62 	bl	8003fcc <HAL_GPIO_WritePin>
			return;
 800d908:	e00f      	b.n	800d92a <get_and_send_imu_sample+0x46>
		}

		memcpy(motion_packet,imu_sample,6*sizeof(int16_t));
 800d90a:	220c      	movs	r2, #12
 800d90c:	6879      	ldr	r1, [r7, #4]
 800d90e:	480a      	ldr	r0, [pc, #40]	@ (800d938 <get_and_send_imu_sample+0x54>)
 800d910:	f000 fff3 	bl	800e8fa <memcpy>
			imu_packet_index = 0;
		}*/



		if(APP_BLE_Send_IMU_Notification((uint8_t*)motion_packet)!=0){
 800d914:	4808      	ldr	r0, [pc, #32]	@ (800d938 <get_and_send_imu_sample+0x54>)
 800d916:	f7ff fb23 	bl	800cf60 <APP_BLE_Send_IMU_Notification>
 800d91a:	4603      	mov	r3, r0
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d004      	beq.n	800d92a <get_and_send_imu_sample+0x46>
			HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_SET);
 800d920:	2201      	movs	r2, #1
 800d922:	2101      	movs	r1, #1
 800d924:	4803      	ldr	r0, [pc, #12]	@ (800d934 <get_and_send_imu_sample+0x50>)
 800d926:	f7f6 fb51 	bl	8003fcc <HAL_GPIO_WritePin>
		}
	}
}
 800d92a:	3708      	adds	r7, #8
 800d92c:	46bd      	mov	sp, r7
 800d92e:	bd80      	pop	{r7, pc}
 800d930:	200021d4 	.word	0x200021d4
 800d934:	48000400 	.word	0x48000400
 800d938:	200021c0 	.word	0x200021c0

0800d93c <APP_BLE_Manage_ADS1299_event>:




void APP_BLE_Manage_ADS1299_event(void)
{
 800d93c:	b580      	push	{r7, lr}
 800d93e:	af00      	add	r7, sp, #0
	if(P2P_Server_App_Context.Notification_Status){
 800d940:	4b38      	ldr	r3, [pc, #224]	@ (800da24 <APP_BLE_Manage_ADS1299_event+0xe8>)
 800d942:	781b      	ldrb	r3, [r3, #0]
 800d944:	2b00      	cmp	r3, #0
 800d946:	d06a      	beq.n	800da1e <APP_BLE_Manage_ADS1299_event+0xe2>

		if(sample_index==0){
 800d948:	4b37      	ldr	r3, [pc, #220]	@ (800da28 <APP_BLE_Manage_ADS1299_event+0xec>)
 800d94a:	781b      	ldrb	r3, [r3, #0]
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d10d      	bne.n	800d96c <APP_BLE_Manage_ADS1299_event+0x30>
			buffered_packets_array[buffer_index][0] = packet_counter;
 800d950:	4b36      	ldr	r3, [pc, #216]	@ (800da2c <APP_BLE_Manage_ADS1299_event+0xf0>)
 800d952:	781b      	ldrb	r3, [r3, #0]
 800d954:	461a      	mov	r2, r3
 800d956:	4b36      	ldr	r3, [pc, #216]	@ (800da30 <APP_BLE_Manage_ADS1299_event+0xf4>)
 800d958:	7818      	ldrb	r0, [r3, #0]
 800d95a:	4936      	ldr	r1, [pc, #216]	@ (800da34 <APP_BLE_Manage_ADS1299_event+0xf8>)
 800d95c:	4613      	mov	r3, r2
 800d95e:	011b      	lsls	r3, r3, #4
 800d960:	1a9b      	subs	r3, r3, r2
 800d962:	011b      	lsls	r3, r3, #4
 800d964:	4413      	add	r3, r2
 800d966:	440b      	add	r3, r1
 800d968:	4602      	mov	r2, r0
 800d96a:	701a      	strb	r2, [r3, #0]
		}

		ADS1299_ReadSamples(statusBuffer, &buffered_packets_array[buffer_index][sample_index*SAMPLE_SIZE+1]);
 800d96c:	4b2f      	ldr	r3, [pc, #188]	@ (800da2c <APP_BLE_Manage_ADS1299_event+0xf0>)
 800d96e:	781b      	ldrb	r3, [r3, #0]
 800d970:	461a      	mov	r2, r3
 800d972:	4b2d      	ldr	r3, [pc, #180]	@ (800da28 <APP_BLE_Manage_ADS1299_event+0xec>)
 800d974:	781b      	ldrb	r3, [r3, #0]
 800d976:	4619      	mov	r1, r3
 800d978:	460b      	mov	r3, r1
 800d97a:	005b      	lsls	r3, r3, #1
 800d97c:	440b      	add	r3, r1
 800d97e:	00db      	lsls	r3, r3, #3
 800d980:	1c59      	adds	r1, r3, #1
 800d982:	4613      	mov	r3, r2
 800d984:	011b      	lsls	r3, r3, #4
 800d986:	1a9b      	subs	r3, r3, r2
 800d988:	011b      	lsls	r3, r3, #4
 800d98a:	4413      	add	r3, r2
 800d98c:	440b      	add	r3, r1
 800d98e:	4a29      	ldr	r2, [pc, #164]	@ (800da34 <APP_BLE_Manage_ADS1299_event+0xf8>)
 800d990:	4413      	add	r3, r2
 800d992:	4619      	mov	r1, r3
 800d994:	4828      	ldr	r0, [pc, #160]	@ (800da38 <APP_BLE_Manage_ADS1299_event+0xfc>)
 800d996:	f7f3 fa71 	bl	8000e7c <ADS1299_ReadSamples>
		sample_index++;
 800d99a:	4b23      	ldr	r3, [pc, #140]	@ (800da28 <APP_BLE_Manage_ADS1299_event+0xec>)
 800d99c:	781b      	ldrb	r3, [r3, #0]
 800d99e:	3301      	adds	r3, #1
 800d9a0:	b2da      	uxtb	r2, r3
 800d9a2:	4b21      	ldr	r3, [pc, #132]	@ (800da28 <APP_BLE_Manage_ADS1299_event+0xec>)
 800d9a4:	701a      	strb	r2, [r3, #0]

		if(sample_index >= NB_SAMPLES_PER_PACKET){
 800d9a6:	4b20      	ldr	r3, [pc, #128]	@ (800da28 <APP_BLE_Manage_ADS1299_event+0xec>)
 800d9a8:	781b      	ldrb	r3, [r3, #0]
 800d9aa:	2b09      	cmp	r3, #9
 800d9ac:	d937      	bls.n	800da1e <APP_BLE_Manage_ADS1299_event+0xe2>
			if(APP_BLE_Send_EEGData_Notification(buffered_packets_array[buffer_index], PACKET_SIZE)!=0){
 800d9ae:	4b1f      	ldr	r3, [pc, #124]	@ (800da2c <APP_BLE_Manage_ADS1299_event+0xf0>)
 800d9b0:	781b      	ldrb	r3, [r3, #0]
 800d9b2:	461a      	mov	r2, r3
 800d9b4:	4613      	mov	r3, r2
 800d9b6:	011b      	lsls	r3, r3, #4
 800d9b8:	1a9b      	subs	r3, r3, r2
 800d9ba:	011b      	lsls	r3, r3, #4
 800d9bc:	4413      	add	r3, r2
 800d9be:	4a1d      	ldr	r2, [pc, #116]	@ (800da34 <APP_BLE_Manage_ADS1299_event+0xf8>)
 800d9c0:	4413      	add	r3, r2
 800d9c2:	21f1      	movs	r1, #241	@ 0xf1
 800d9c4:	4618      	mov	r0, r3
 800d9c6:	f7ff fa8d 	bl	800cee4 <APP_BLE_Send_EEGData_Notification>
 800d9ca:	4603      	mov	r3, r0
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d004      	beq.n	800d9da <APP_BLE_Manage_ADS1299_event+0x9e>
				HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_SET);
 800d9d0:	2201      	movs	r2, #1
 800d9d2:	2101      	movs	r1, #1
 800d9d4:	4819      	ldr	r0, [pc, #100]	@ (800da3c <APP_BLE_Manage_ADS1299_event+0x100>)
 800d9d6:	f7f6 faf9 	bl	8003fcc <HAL_GPIO_WritePin>
			}

			buffer_index = (buffer_index + 1) % PACKETBUFFER_DEPTH;
 800d9da:	4b14      	ldr	r3, [pc, #80]	@ (800da2c <APP_BLE_Manage_ADS1299_event+0xf0>)
 800d9dc:	781b      	ldrb	r3, [r3, #0]
 800d9de:	1c5a      	adds	r2, r3, #1
 800d9e0:	4b17      	ldr	r3, [pc, #92]	@ (800da40 <APP_BLE_Manage_ADS1299_event+0x104>)
 800d9e2:	fb83 1302 	smull	r1, r3, r3, r2
 800d9e6:	4413      	add	r3, r2
 800d9e8:	1119      	asrs	r1, r3, #4
 800d9ea:	17d3      	asrs	r3, r2, #31
 800d9ec:	1ac9      	subs	r1, r1, r3
 800d9ee:	460b      	mov	r3, r1
 800d9f0:	011b      	lsls	r3, r3, #4
 800d9f2:	1a5b      	subs	r3, r3, r1
 800d9f4:	005b      	lsls	r3, r3, #1
 800d9f6:	1ad1      	subs	r1, r2, r3
 800d9f8:	b2ca      	uxtb	r2, r1
 800d9fa:	4b0c      	ldr	r3, [pc, #48]	@ (800da2c <APP_BLE_Manage_ADS1299_event+0xf0>)
 800d9fc:	701a      	strb	r2, [r3, #0]
			packet_counter = (packet_counter + 1) % 128;
 800d9fe:	4b0c      	ldr	r3, [pc, #48]	@ (800da30 <APP_BLE_Manage_ADS1299_event+0xf4>)
 800da00:	781b      	ldrb	r3, [r3, #0]
 800da02:	3301      	adds	r3, #1
 800da04:	425a      	negs	r2, r3
 800da06:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800da0a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800da0e:	bf58      	it	pl
 800da10:	4253      	negpl	r3, r2
 800da12:	b2da      	uxtb	r2, r3
 800da14:	4b06      	ldr	r3, [pc, #24]	@ (800da30 <APP_BLE_Manage_ADS1299_event+0xf4>)
 800da16:	701a      	strb	r2, [r3, #0]
			sample_index = 0;
 800da18:	4b03      	ldr	r3, [pc, #12]	@ (800da28 <APP_BLE_Manage_ADS1299_event+0xec>)
 800da1a:	2200      	movs	r2, #0
 800da1c:	701a      	strb	r2, [r3, #0]
		}
	}
}
 800da1e:	bf00      	nop
 800da20:	bd80      	pop	{r7, pc}
 800da22:	bf00      	nop
 800da24:	200021d4 	.word	0x200021d4
 800da28:	200021b3 	.word	0x200021b3
 800da2c:	200021b2 	.word	0x200021b2
 800da30:	200021b4 	.word	0x200021b4
 800da34:	20000574 	.word	0x20000574
 800da38:	200021b8 	.word	0x200021b8
 800da3c:	48000400 	.word	0x48000400
 800da40:	88888889 	.word	0x88888889

0800da44 <is_connected>:



uint8_t is_connected(void){
 800da44:	b480      	push	{r7}
 800da46:	af00      	add	r7, sp, #0
	return P2P_Server_App_Context.Notification_Status == 1;
 800da48:	4b05      	ldr	r3, [pc, #20]	@ (800da60 <is_connected+0x1c>)
 800da4a:	781b      	ldrb	r3, [r3, #0]
 800da4c:	2b01      	cmp	r3, #1
 800da4e:	bf0c      	ite	eq
 800da50:	2301      	moveq	r3, #1
 800da52:	2300      	movne	r3, #0
 800da54:	b2db      	uxtb	r3, r3
}
 800da56:	4618      	mov	r0, r3
 800da58:	46bd      	mov	sp, r7
 800da5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da5e:	4770      	bx	lr
 800da60:	200021d4 	.word	0x200021d4

0800da64 <LL_PWR_EnableBootC2>:
{
 800da64:	b480      	push	{r7}
 800da66:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800da68:	4b05      	ldr	r3, [pc, #20]	@ (800da80 <LL_PWR_EnableBootC2+0x1c>)
 800da6a:	68db      	ldr	r3, [r3, #12]
 800da6c:	4a04      	ldr	r2, [pc, #16]	@ (800da80 <LL_PWR_EnableBootC2+0x1c>)
 800da6e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800da72:	60d3      	str	r3, [r2, #12]
}
 800da74:	bf00      	nop
 800da76:	46bd      	mov	sp, r7
 800da78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da7c:	4770      	bx	lr
 800da7e:	bf00      	nop
 800da80:	58000400 	.word	0x58000400

0800da84 <LL_C2_EXTI_EnableEvent_32_63>:
{
 800da84:	b480      	push	{r7}
 800da86:	b083      	sub	sp, #12
 800da88:	af00      	add	r7, sp, #0
 800da8a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 800da8c:	4b06      	ldr	r3, [pc, #24]	@ (800daa8 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800da8e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 800da92:	4905      	ldr	r1, [pc, #20]	@ (800daa8 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	4313      	orrs	r3, r2
 800da98:	f8c1 30d4 	str.w	r3, [r1, #212]	@ 0xd4
}
 800da9c:	bf00      	nop
 800da9e:	370c      	adds	r7, #12
 800daa0:	46bd      	mov	sp, r7
 800daa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daa6:	4770      	bx	lr
 800daa8:	58000800 	.word	0x58000800

0800daac <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 800daac:	b480      	push	{r7}
 800daae:	b083      	sub	sp, #12
 800dab0:	af00      	add	r7, sp, #0
 800dab2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800dab4:	4b05      	ldr	r3, [pc, #20]	@ (800dacc <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800dab6:	6a1a      	ldr	r2, [r3, #32]
 800dab8:	4904      	ldr	r1, [pc, #16]	@ (800dacc <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	4313      	orrs	r3, r2
 800dabe:	620b      	str	r3, [r1, #32]
}
 800dac0:	bf00      	nop
 800dac2:	370c      	adds	r7, #12
 800dac4:	46bd      	mov	sp, r7
 800dac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daca:	4770      	bx	lr
 800dacc:	58000800 	.word	0x58000800

0800dad0 <LL_AHB3_GRP1_EnableClock>:
{
 800dad0:	b480      	push	{r7}
 800dad2:	b085      	sub	sp, #20
 800dad4:	af00      	add	r7, sp, #0
 800dad6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800dad8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800dadc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800dade:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	4313      	orrs	r3, r2
 800dae6:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800dae8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800daec:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	4013      	ands	r3, r2
 800daf2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800daf4:	68fb      	ldr	r3, [r7, #12]
}
 800daf6:	bf00      	nop
 800daf8:	3714      	adds	r7, #20
 800dafa:	46bd      	mov	sp, r7
 800dafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db00:	4770      	bx	lr

0800db02 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800db02:	b480      	push	{r7}
 800db04:	b085      	sub	sp, #20
 800db06:	af00      	add	r7, sp, #0
 800db08:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 800db0a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800db0e:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 800db12:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	4313      	orrs	r3, r2
 800db1a:	f8c1 3150 	str.w	r3, [r1, #336]	@ 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 800db1e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800db22:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	4013      	ands	r3, r2
 800db2a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800db2c:	68fb      	ldr	r3, [r7, #12]
}
 800db2e:	bf00      	nop
 800db30:	3714      	adds	r7, #20
 800db32:	46bd      	mov	sp, r7
 800db34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db38:	4770      	bx	lr

0800db3a <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 800db3a:	b480      	push	{r7}
 800db3c:	b083      	sub	sp, #12
 800db3e:	af00      	add	r7, sp, #0
 800db40:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	601a      	str	r2, [r3, #0]
}
 800db4e:	bf00      	nop
 800db50:	370c      	adds	r7, #12
 800db52:	46bd      	mov	sp, r7
 800db54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db58:	4770      	bx	lr

0800db5a <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 800db5a:	b480      	push	{r7}
 800db5c:	b083      	sub	sp, #12
 800db5e:	af00      	add	r7, sp, #0
 800db60:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	f043 0201 	orr.w	r2, r3, #1
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	601a      	str	r2, [r3, #0]
}
 800db6e:	bf00      	nop
 800db70:	370c      	adds	r7, #12
 800db72:	46bd      	mov	sp, r7
 800db74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db78:	4770      	bx	lr

0800db7a <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800db7a:	b480      	push	{r7}
 800db7c:	b083      	sub	sp, #12
 800db7e:	af00      	add	r7, sp, #0
 800db80:	6078      	str	r0, [r7, #4]
 800db82:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	685a      	ldr	r2, [r3, #4]
 800db88:	683b      	ldr	r3, [r7, #0]
 800db8a:	041b      	lsls	r3, r3, #16
 800db8c:	43db      	mvns	r3, r3
 800db8e:	401a      	ands	r2, r3
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	605a      	str	r2, [r3, #4]
}
 800db94:	bf00      	nop
 800db96:	370c      	adds	r7, #12
 800db98:	46bd      	mov	sp, r7
 800db9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db9e:	4770      	bx	lr

0800dba0 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800dba0:	b480      	push	{r7}
 800dba2:	b083      	sub	sp, #12
 800dba4:	af00      	add	r7, sp, #0
 800dba6:	6078      	str	r0, [r7, #4]
 800dba8:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	685a      	ldr	r2, [r3, #4]
 800dbae:	683b      	ldr	r3, [r7, #0]
 800dbb0:	041b      	lsls	r3, r3, #16
 800dbb2:	431a      	orrs	r2, r3
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	605a      	str	r2, [r3, #4]
}
 800dbb8:	bf00      	nop
 800dbba:	370c      	adds	r7, #12
 800dbbc:	46bd      	mov	sp, r7
 800dbbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbc2:	4770      	bx	lr

0800dbc4 <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800dbc4:	b480      	push	{r7}
 800dbc6:	b083      	sub	sp, #12
 800dbc8:	af00      	add	r7, sp, #0
 800dbca:	6078      	str	r0, [r7, #4]
 800dbcc:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	685a      	ldr	r2, [r3, #4]
 800dbd2:	683b      	ldr	r3, [r7, #0]
 800dbd4:	43db      	mvns	r3, r3
 800dbd6:	401a      	ands	r2, r3
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	605a      	str	r2, [r3, #4]
}
 800dbdc:	bf00      	nop
 800dbde:	370c      	adds	r7, #12
 800dbe0:	46bd      	mov	sp, r7
 800dbe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbe6:	4770      	bx	lr

0800dbe8 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800dbe8:	b480      	push	{r7}
 800dbea:	b083      	sub	sp, #12
 800dbec:	af00      	add	r7, sp, #0
 800dbee:	6078      	str	r0, [r7, #4]
 800dbf0:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	683a      	ldr	r2, [r7, #0]
 800dbf6:	609a      	str	r2, [r3, #8]
}
 800dbf8:	bf00      	nop
 800dbfa:	370c      	adds	r7, #12
 800dbfc:	46bd      	mov	sp, r7
 800dbfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc02:	4770      	bx	lr

0800dc04 <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800dc04:	b480      	push	{r7}
 800dc06:	b083      	sub	sp, #12
 800dc08:	af00      	add	r7, sp, #0
 800dc0a:	6078      	str	r0, [r7, #4]
 800dc0c:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800dc0e:	683b      	ldr	r3, [r7, #0]
 800dc10:	041a      	lsls	r2, r3, #16
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	609a      	str	r2, [r3, #8]
}
 800dc16:	bf00      	nop
 800dc18:	370c      	adds	r7, #12
 800dc1a:	46bd      	mov	sp, r7
 800dc1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc20:	4770      	bx	lr

0800dc22 <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800dc22:	b480      	push	{r7}
 800dc24:	b083      	sub	sp, #12
 800dc26:	af00      	add	r7, sp, #0
 800dc28:	6078      	str	r0, [r7, #4]
 800dc2a:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	68da      	ldr	r2, [r3, #12]
 800dc30:	683b      	ldr	r3, [r7, #0]
 800dc32:	4013      	ands	r3, r2
 800dc34:	683a      	ldr	r2, [r7, #0]
 800dc36:	429a      	cmp	r2, r3
 800dc38:	d101      	bne.n	800dc3e <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800dc3a:	2301      	movs	r3, #1
 800dc3c:	e000      	b.n	800dc40 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800dc3e:	2300      	movs	r3, #0
}
 800dc40:	4618      	mov	r0, r3
 800dc42:	370c      	adds	r7, #12
 800dc44:	46bd      	mov	sp, r7
 800dc46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc4a:	4770      	bx	lr

0800dc4c <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800dc4c:	b480      	push	{r7}
 800dc4e:	b083      	sub	sp, #12
 800dc50:	af00      	add	r7, sp, #0
 800dc52:	6078      	str	r0, [r7, #4]
 800dc54:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	69da      	ldr	r2, [r3, #28]
 800dc5a:	683b      	ldr	r3, [r7, #0]
 800dc5c:	4013      	ands	r3, r2
 800dc5e:	683a      	ldr	r2, [r7, #0]
 800dc60:	429a      	cmp	r2, r3
 800dc62:	d101      	bne.n	800dc68 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 800dc64:	2301      	movs	r3, #1
 800dc66:	e000      	b.n	800dc6a <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 800dc68:	2300      	movs	r3, #0
}
 800dc6a:	4618      	mov	r0, r3
 800dc6c:	370c      	adds	r7, #12
 800dc6e:	46bd      	mov	sp, r7
 800dc70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc74:	4770      	bx	lr
	...

0800dc78 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 800dc78:	b580      	push	{r7, lr}
 800dc7a:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 800dc7c:	2102      	movs	r1, #2
 800dc7e:	4818      	ldr	r0, [pc, #96]	@ (800dce0 <HW_IPCC_Rx_Handler+0x68>)
 800dc80:	f7ff ffe4 	bl	800dc4c <LL_C2_IPCC_IsActiveFlag_CHx>
 800dc84:	4603      	mov	r3, r0
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d008      	beq.n	800dc9c <HW_IPCC_Rx_Handler+0x24>
 800dc8a:	4b15      	ldr	r3, [pc, #84]	@ (800dce0 <HW_IPCC_Rx_Handler+0x68>)
 800dc8c:	685b      	ldr	r3, [r3, #4]
 800dc8e:	f003 0302 	and.w	r3, r3, #2
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d102      	bne.n	800dc9c <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 800dc96:	f000 f8d5 	bl	800de44 <HW_IPCC_SYS_EvtHandler>
 800dc9a:	e01e      	b.n	800dcda <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800dc9c:	2101      	movs	r1, #1
 800dc9e:	4810      	ldr	r0, [pc, #64]	@ (800dce0 <HW_IPCC_Rx_Handler+0x68>)
 800dca0:	f7ff ffd4 	bl	800dc4c <LL_C2_IPCC_IsActiveFlag_CHx>
 800dca4:	4603      	mov	r3, r0
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d008      	beq.n	800dcbc <HW_IPCC_Rx_Handler+0x44>
 800dcaa:	4b0d      	ldr	r3, [pc, #52]	@ (800dce0 <HW_IPCC_Rx_Handler+0x68>)
 800dcac:	685b      	ldr	r3, [r3, #4]
 800dcae:	f003 0301 	and.w	r3, r3, #1
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d102      	bne.n	800dcbc <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 800dcb6:	f000 f889 	bl	800ddcc <HW_IPCC_BLE_EvtHandler>
 800dcba:	e00e      	b.n	800dcda <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 800dcbc:	2108      	movs	r1, #8
 800dcbe:	4808      	ldr	r0, [pc, #32]	@ (800dce0 <HW_IPCC_Rx_Handler+0x68>)
 800dcc0:	f7ff ffc4 	bl	800dc4c <LL_C2_IPCC_IsActiveFlag_CHx>
 800dcc4:	4603      	mov	r3, r0
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d008      	beq.n	800dcdc <HW_IPCC_Rx_Handler+0x64>
 800dcca:	4b05      	ldr	r3, [pc, #20]	@ (800dce0 <HW_IPCC_Rx_Handler+0x68>)
 800dccc:	685b      	ldr	r3, [r3, #4]
 800dcce:	f003 0308 	and.w	r3, r3, #8
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d102      	bne.n	800dcdc <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 800dcd6:	f000 f901 	bl	800dedc <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 800dcda:	bf00      	nop
 800dcdc:	bf00      	nop
}
 800dcde:	bd80      	pop	{r7, pc}
 800dce0:	58000c00 	.word	0x58000c00

0800dce4 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 800dce4:	b580      	push	{r7, lr}
 800dce6:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800dce8:	2102      	movs	r1, #2
 800dcea:	4818      	ldr	r0, [pc, #96]	@ (800dd4c <HW_IPCC_Tx_Handler+0x68>)
 800dcec:	f7ff ff99 	bl	800dc22 <LL_C1_IPCC_IsActiveFlag_CHx>
 800dcf0:	4603      	mov	r3, r0
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d108      	bne.n	800dd08 <HW_IPCC_Tx_Handler+0x24>
 800dcf6:	4b15      	ldr	r3, [pc, #84]	@ (800dd4c <HW_IPCC_Tx_Handler+0x68>)
 800dcf8:	685b      	ldr	r3, [r3, #4]
 800dcfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d102      	bne.n	800dd08 <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800dd02:	f000 f893 	bl	800de2c <HW_IPCC_SYS_CmdEvtHandler>
 800dd06:	e01e      	b.n	800dd46 <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800dd08:	2108      	movs	r1, #8
 800dd0a:	4810      	ldr	r0, [pc, #64]	@ (800dd4c <HW_IPCC_Tx_Handler+0x68>)
 800dd0c:	f7ff ff89 	bl	800dc22 <LL_C1_IPCC_IsActiveFlag_CHx>
 800dd10:	4603      	mov	r3, r0
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d108      	bne.n	800dd28 <HW_IPCC_Tx_Handler+0x44>
 800dd16:	4b0d      	ldr	r3, [pc, #52]	@ (800dd4c <HW_IPCC_Tx_Handler+0x68>)
 800dd18:	685b      	ldr	r3, [r3, #4]
 800dd1a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d102      	bne.n	800dd28 <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 800dd22:	f000 f8bd 	bl	800dea0 <HW_IPCC_MM_FreeBufHandler>
 800dd26:	e00e      	b.n	800dd46 <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800dd28:	2120      	movs	r1, #32
 800dd2a:	4808      	ldr	r0, [pc, #32]	@ (800dd4c <HW_IPCC_Tx_Handler+0x68>)
 800dd2c:	f7ff ff79 	bl	800dc22 <LL_C1_IPCC_IsActiveFlag_CHx>
 800dd30:	4603      	mov	r3, r0
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d108      	bne.n	800dd48 <HW_IPCC_Tx_Handler+0x64>
 800dd36:	4b05      	ldr	r3, [pc, #20]	@ (800dd4c <HW_IPCC_Tx_Handler+0x68>)
 800dd38:	685b      	ldr	r3, [r3, #4]
 800dd3a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d102      	bne.n	800dd48 <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 800dd42:	f000 f84f 	bl	800dde4 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800dd46:	bf00      	nop
 800dd48:	bf00      	nop
}
 800dd4a:	bd80      	pop	{r7, pc}
 800dd4c:	58000c00 	.word	0x58000c00

0800dd50 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 800dd50:	b580      	push	{r7, lr}
 800dd52:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 800dd54:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800dd58:	f7ff fed3 	bl	800db02 <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 800dd5c:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800dd60:	f7ff fea4 	bl	800daac <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 800dd64:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800dd68:	f7ff fe8c 	bl	800da84 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 800dd6c:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800dd6e:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 800dd70:	f7ff fe78 	bl	800da64 <LL_PWR_EnableBootC2>

  return;
 800dd74:	bf00      	nop
}
 800dd76:	bd80      	pop	{r7, pc}

0800dd78 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 800dd78:	b580      	push	{r7, lr}
 800dd7a:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 800dd7c:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800dd80:	f7ff fea6 	bl	800dad0 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 800dd84:	4806      	ldr	r0, [pc, #24]	@ (800dda0 <HW_IPCC_Init+0x28>)
 800dd86:	f7ff fee8 	bl	800db5a <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800dd8a:	4805      	ldr	r0, [pc, #20]	@ (800dda0 <HW_IPCC_Init+0x28>)
 800dd8c:	f7ff fed5 	bl	800db3a <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800dd90:	202c      	movs	r0, #44	@ 0x2c
 800dd92:	f7f5 fc34 	bl	80035fe <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800dd96:	202d      	movs	r0, #45	@ 0x2d
 800dd98:	f7f5 fc31 	bl	80035fe <HAL_NVIC_EnableIRQ>

  return;
 800dd9c:	bf00      	nop
}
 800dd9e:	bd80      	pop	{r7, pc}
 800dda0:	58000c00 	.word	0x58000c00

0800dda4 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 800dda4:	b580      	push	{r7, lr}
 800dda6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800dda8:	2101      	movs	r1, #1
 800ddaa:	4802      	ldr	r0, [pc, #8]	@ (800ddb4 <HW_IPCC_BLE_Init+0x10>)
 800ddac:	f7ff ff0a 	bl	800dbc4 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800ddb0:	bf00      	nop
}
 800ddb2:	bd80      	pop	{r7, pc}
 800ddb4:	58000c00 	.word	0x58000c00

0800ddb8 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 800ddb8:	b580      	push	{r7, lr}
 800ddba:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 800ddbc:	2101      	movs	r1, #1
 800ddbe:	4802      	ldr	r0, [pc, #8]	@ (800ddc8 <HW_IPCC_BLE_SendCmd+0x10>)
 800ddc0:	f7ff ff20 	bl	800dc04 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800ddc4:	bf00      	nop
}
 800ddc6:	bd80      	pop	{r7, pc}
 800ddc8:	58000c00 	.word	0x58000c00

0800ddcc <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 800ddcc:	b580      	push	{r7, lr}
 800ddce:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 800ddd0:	f7fd fb1a 	bl	800b408 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800ddd4:	2101      	movs	r1, #1
 800ddd6:	4802      	ldr	r0, [pc, #8]	@ (800dde0 <HW_IPCC_BLE_EvtHandler+0x14>)
 800ddd8:	f7ff ff06 	bl	800dbe8 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800dddc:	bf00      	nop
}
 800ddde:	bd80      	pop	{r7, pc}
 800dde0:	58000c00 	.word	0x58000c00

0800dde4 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 800dde4:	b580      	push	{r7, lr}
 800dde6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 800dde8:	2120      	movs	r1, #32
 800ddea:	4803      	ldr	r0, [pc, #12]	@ (800ddf8 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 800ddec:	f7ff fed8 	bl	800dba0 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 800ddf0:	f7fd fb3a 	bl	800b468 <HW_IPCC_BLE_AclDataAckNot>

  return;
 800ddf4:	bf00      	nop
}
 800ddf6:	bd80      	pop	{r7, pc}
 800ddf8:	58000c00 	.word	0x58000c00

0800ddfc <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 800ddfc:	b580      	push	{r7, lr}
 800ddfe:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800de00:	2102      	movs	r1, #2
 800de02:	4802      	ldr	r0, [pc, #8]	@ (800de0c <HW_IPCC_SYS_Init+0x10>)
 800de04:	f7ff fede 	bl	800dbc4 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800de08:	bf00      	nop
}
 800de0a:	bd80      	pop	{r7, pc}
 800de0c:	58000c00 	.word	0x58000c00

0800de10 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 800de10:	b580      	push	{r7, lr}
 800de12:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800de14:	2102      	movs	r1, #2
 800de16:	4804      	ldr	r0, [pc, #16]	@ (800de28 <HW_IPCC_SYS_SendCmd+0x18>)
 800de18:	f7ff fef4 	bl	800dc04 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800de1c:	2102      	movs	r1, #2
 800de1e:	4802      	ldr	r0, [pc, #8]	@ (800de28 <HW_IPCC_SYS_SendCmd+0x18>)
 800de20:	f7ff feab 	bl	800db7a <LL_C1_IPCC_EnableTransmitChannel>

  return;
 800de24:	bf00      	nop
}
 800de26:	bd80      	pop	{r7, pc}
 800de28:	58000c00 	.word	0x58000c00

0800de2c <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 800de2c:	b580      	push	{r7, lr}
 800de2e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800de30:	2102      	movs	r1, #2
 800de32:	4803      	ldr	r0, [pc, #12]	@ (800de40 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 800de34:	f7ff feb4 	bl	800dba0 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 800de38:	f7fd fb66 	bl	800b508 <HW_IPCC_SYS_CmdEvtNot>

  return;
 800de3c:	bf00      	nop
}
 800de3e:	bd80      	pop	{r7, pc}
 800de40:	58000c00 	.word	0x58000c00

0800de44 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 800de44:	b580      	push	{r7, lr}
 800de46:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 800de48:	f7fd fb74 	bl	800b534 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800de4c:	2102      	movs	r1, #2
 800de4e:	4802      	ldr	r0, [pc, #8]	@ (800de58 <HW_IPCC_SYS_EvtHandler+0x14>)
 800de50:	f7ff feca 	bl	800dbe8 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800de54:	bf00      	nop
}
 800de56:	bd80      	pop	{r7, pc}
 800de58:	58000c00 	.word	0x58000c00

0800de5c <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 800de5c:	b580      	push	{r7, lr}
 800de5e:	b082      	sub	sp, #8
 800de60:	af00      	add	r7, sp, #0
 800de62:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 800de64:	2108      	movs	r1, #8
 800de66:	480c      	ldr	r0, [pc, #48]	@ (800de98 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800de68:	f7ff fedb 	bl	800dc22 <LL_C1_IPCC_IsActiveFlag_CHx>
 800de6c:	4603      	mov	r3, r0
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d007      	beq.n	800de82 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 800de72:	4a0a      	ldr	r2, [pc, #40]	@ (800de9c <HW_IPCC_MM_SendFreeBuf+0x40>)
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800de78:	2108      	movs	r1, #8
 800de7a:	4807      	ldr	r0, [pc, #28]	@ (800de98 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800de7c:	f7ff fe7d 	bl	800db7a <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 800de80:	e006      	b.n	800de90 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800de86:	2108      	movs	r1, #8
 800de88:	4803      	ldr	r0, [pc, #12]	@ (800de98 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800de8a:	f7ff febb 	bl	800dc04 <LL_C1_IPCC_SetFlag_CHx>
  return;
 800de8e:	bf00      	nop
}
 800de90:	3708      	adds	r7, #8
 800de92:	46bd      	mov	sp, r7
 800de94:	bd80      	pop	{r7, pc}
 800de96:	bf00      	nop
 800de98:	58000c00 	.word	0x58000c00
 800de9c:	200021dc 	.word	0x200021dc

0800dea0 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 800dea0:	b580      	push	{r7, lr}
 800dea2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800dea4:	2108      	movs	r1, #8
 800dea6:	4806      	ldr	r0, [pc, #24]	@ (800dec0 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800dea8:	f7ff fe7a 	bl	800dba0 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 800deac:	4b05      	ldr	r3, [pc, #20]	@ (800dec4 <HW_IPCC_MM_FreeBufHandler+0x24>)
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800deb2:	2108      	movs	r1, #8
 800deb4:	4802      	ldr	r0, [pc, #8]	@ (800dec0 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800deb6:	f7ff fea5 	bl	800dc04 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800deba:	bf00      	nop
}
 800debc:	bd80      	pop	{r7, pc}
 800debe:	bf00      	nop
 800dec0:	58000c00 	.word	0x58000c00
 800dec4:	200021dc 	.word	0x200021dc

0800dec8 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 800dec8:	b580      	push	{r7, lr}
 800deca:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 800decc:	2108      	movs	r1, #8
 800dece:	4802      	ldr	r0, [pc, #8]	@ (800ded8 <HW_IPCC_TRACES_Init+0x10>)
 800ded0:	f7ff fe78 	bl	800dbc4 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800ded4:	bf00      	nop
}
 800ded6:	bd80      	pop	{r7, pc}
 800ded8:	58000c00 	.word	0x58000c00

0800dedc <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 800dedc:	b580      	push	{r7, lr}
 800dede:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 800dee0:	f7fd fbd0 	bl	800b684 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 800dee4:	2108      	movs	r1, #8
 800dee6:	4802      	ldr	r0, [pc, #8]	@ (800def0 <HW_IPCC_TRACES_EvtHandler+0x14>)
 800dee8:	f7ff fe7e 	bl	800dbe8 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800deec:	bf00      	nop
}
 800deee:	bd80      	pop	{r7, pc}
 800def0:	58000c00 	.word	0x58000c00

0800def4 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800def4:	b480      	push	{r7}
 800def6:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800def8:	4b05      	ldr	r3, [pc, #20]	@ (800df10 <UTIL_LPM_Init+0x1c>)
 800defa:	2200      	movs	r2, #0
 800defc:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800defe:	4b05      	ldr	r3, [pc, #20]	@ (800df14 <UTIL_LPM_Init+0x20>)
 800df00:	2200      	movs	r2, #0
 800df02:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800df04:	bf00      	nop
 800df06:	46bd      	mov	sp, r7
 800df08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df0c:	4770      	bx	lr
 800df0e:	bf00      	nop
 800df10:	200021e0 	.word	0x200021e0
 800df14:	200021e4 	.word	0x200021e4

0800df18 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800df18:	b480      	push	{r7}
 800df1a:	b087      	sub	sp, #28
 800df1c:	af00      	add	r7, sp, #0
 800df1e:	6078      	str	r0, [r7, #4]
 800df20:	460b      	mov	r3, r1
 800df22:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800df24:	f3ef 8310 	mrs	r3, PRIMASK
 800df28:	613b      	str	r3, [r7, #16]
  return(result);
 800df2a:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800df2c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800df2e:	b672      	cpsid	i
}
 800df30:	bf00      	nop
  
  switch(state)
 800df32:	78fb      	ldrb	r3, [r7, #3]
 800df34:	2b00      	cmp	r3, #0
 800df36:	d008      	beq.n	800df4a <UTIL_LPM_SetOffMode+0x32>
 800df38:	2b01      	cmp	r3, #1
 800df3a:	d10e      	bne.n	800df5a <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800df3c:	4b0d      	ldr	r3, [pc, #52]	@ (800df74 <UTIL_LPM_SetOffMode+0x5c>)
 800df3e:	681a      	ldr	r2, [r3, #0]
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	4313      	orrs	r3, r2
 800df44:	4a0b      	ldr	r2, [pc, #44]	@ (800df74 <UTIL_LPM_SetOffMode+0x5c>)
 800df46:	6013      	str	r3, [r2, #0]
      break;
 800df48:	e008      	b.n	800df5c <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	43da      	mvns	r2, r3
 800df4e:	4b09      	ldr	r3, [pc, #36]	@ (800df74 <UTIL_LPM_SetOffMode+0x5c>)
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	4013      	ands	r3, r2
 800df54:	4a07      	ldr	r2, [pc, #28]	@ (800df74 <UTIL_LPM_SetOffMode+0x5c>)
 800df56:	6013      	str	r3, [r2, #0]
      break;
 800df58:	e000      	b.n	800df5c <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800df5a:	bf00      	nop
 800df5c:	697b      	ldr	r3, [r7, #20]
 800df5e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800df60:	68fb      	ldr	r3, [r7, #12]
 800df62:	f383 8810 	msr	PRIMASK, r3
}
 800df66:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800df68:	bf00      	nop
 800df6a:	371c      	adds	r7, #28
 800df6c:	46bd      	mov	sp, r7
 800df6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df72:	4770      	bx	lr
 800df74:	200021e4 	.word	0x200021e4

0800df78 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800df78:	b580      	push	{r7, lr}
 800df7a:	b090      	sub	sp, #64	@ 0x40
 800df7c:	af00      	add	r7, sp, #0
 800df7e:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800df80:	4b73      	ldr	r3, [pc, #460]	@ (800e150 <UTIL_SEQ_Run+0x1d8>)
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 800df86:	4b72      	ldr	r3, [pc, #456]	@ (800e150 <UTIL_SEQ_Run+0x1d8>)
 800df88:	681a      	ldr	r2, [r3, #0]
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	4013      	ands	r3, r2
 800df8e:	4a70      	ldr	r2, [pc, #448]	@ (800e150 <UTIL_SEQ_Run+0x1d8>)
 800df90:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800df92:	4b70      	ldr	r3, [pc, #448]	@ (800e154 <UTIL_SEQ_Run+0x1dc>)
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 800df98:	4b6f      	ldr	r3, [pc, #444]	@ (800e158 <UTIL_SEQ_Run+0x1e0>)
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 800df9e:	4b6f      	ldr	r3, [pc, #444]	@ (800e15c <UTIL_SEQ_Run+0x1e4>)
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 800dfa4:	4b6e      	ldr	r3, [pc, #440]	@ (800e160 <UTIL_SEQ_Run+0x1e8>)
 800dfa6:	681b      	ldr	r3, [r3, #0]
 800dfa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800dfaa:	e08d      	b.n	800e0c8 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 800dfac:	2300      	movs	r3, #0
 800dfae:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800dfb0:	e002      	b.n	800dfb8 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 800dfb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dfb4:	3301      	adds	r3, #1
 800dfb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800dfb8:	4a6a      	ldr	r2, [pc, #424]	@ (800e164 <UTIL_SEQ_Run+0x1ec>)
 800dfba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dfbc:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800dfc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dfc2:	401a      	ands	r2, r3
 800dfc4:	4b62      	ldr	r3, [pc, #392]	@ (800e150 <UTIL_SEQ_Run+0x1d8>)
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	4013      	ands	r3, r2
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d0f1      	beq.n	800dfb2 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800dfce:	4a65      	ldr	r2, [pc, #404]	@ (800e164 <UTIL_SEQ_Run+0x1ec>)
 800dfd0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dfd2:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800dfd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dfd8:	401a      	ands	r2, r3
 800dfda:	4b5d      	ldr	r3, [pc, #372]	@ (800e150 <UTIL_SEQ_Run+0x1d8>)
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	4013      	ands	r3, r2
 800dfe0:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800dfe2:	4a60      	ldr	r2, [pc, #384]	@ (800e164 <UTIL_SEQ_Run+0x1ec>)
 800dfe4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dfe6:	00db      	lsls	r3, r3, #3
 800dfe8:	4413      	add	r3, r2
 800dfea:	685a      	ldr	r2, [r3, #4]
 800dfec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dfee:	4013      	ands	r3, r2
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d106      	bne.n	800e002 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800dff4:	4a5b      	ldr	r2, [pc, #364]	@ (800e164 <UTIL_SEQ_Run+0x1ec>)
 800dff6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dff8:	00db      	lsls	r3, r3, #3
 800dffa:	4413      	add	r3, r2
 800dffc:	f04f 32ff 	mov.w	r2, #4294967295
 800e000:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800e002:	4a58      	ldr	r2, [pc, #352]	@ (800e164 <UTIL_SEQ_Run+0x1ec>)
 800e004:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e006:	00db      	lsls	r3, r3, #3
 800e008:	4413      	add	r3, r2
 800e00a:	685a      	ldr	r2, [r3, #4]
 800e00c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e00e:	4013      	ands	r3, r2
 800e010:	4618      	mov	r0, r3
 800e012:	f000 f9b3 	bl	800e37c <SEQ_BitPosition>
 800e016:	4603      	mov	r3, r0
 800e018:	461a      	mov	r2, r3
 800e01a:	4b53      	ldr	r3, [pc, #332]	@ (800e168 <UTIL_SEQ_Run+0x1f0>)
 800e01c:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800e01e:	4a51      	ldr	r2, [pc, #324]	@ (800e164 <UTIL_SEQ_Run+0x1ec>)
 800e020:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e022:	00db      	lsls	r3, r3, #3
 800e024:	4413      	add	r3, r2
 800e026:	685a      	ldr	r2, [r3, #4]
 800e028:	4b4f      	ldr	r3, [pc, #316]	@ (800e168 <UTIL_SEQ_Run+0x1f0>)
 800e02a:	681b      	ldr	r3, [r3, #0]
 800e02c:	2101      	movs	r1, #1
 800e02e:	fa01 f303 	lsl.w	r3, r1, r3
 800e032:	43db      	mvns	r3, r3
 800e034:	401a      	ands	r2, r3
 800e036:	494b      	ldr	r1, [pc, #300]	@ (800e164 <UTIL_SEQ_Run+0x1ec>)
 800e038:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e03a:	00db      	lsls	r3, r3, #3
 800e03c:	440b      	add	r3, r1
 800e03e:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e040:	f3ef 8310 	mrs	r3, PRIMASK
 800e044:	61bb      	str	r3, [r7, #24]
  return(result);
 800e046:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800e048:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800e04a:	b672      	cpsid	i
}
 800e04c:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800e04e:	4b46      	ldr	r3, [pc, #280]	@ (800e168 <UTIL_SEQ_Run+0x1f0>)
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	2201      	movs	r2, #1
 800e054:	fa02 f303 	lsl.w	r3, r2, r3
 800e058:	43da      	mvns	r2, r3
 800e05a:	4b3e      	ldr	r3, [pc, #248]	@ (800e154 <UTIL_SEQ_Run+0x1dc>)
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	4013      	ands	r3, r2
 800e060:	4a3c      	ldr	r2, [pc, #240]	@ (800e154 <UTIL_SEQ_Run+0x1dc>)
 800e062:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800e064:	2301      	movs	r3, #1
 800e066:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e068:	e013      	b.n	800e092 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800e06a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e06c:	3b01      	subs	r3, #1
 800e06e:	4a3d      	ldr	r2, [pc, #244]	@ (800e164 <UTIL_SEQ_Run+0x1ec>)
 800e070:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800e074:	4b3c      	ldr	r3, [pc, #240]	@ (800e168 <UTIL_SEQ_Run+0x1f0>)
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	2201      	movs	r2, #1
 800e07a:	fa02 f303 	lsl.w	r3, r2, r3
 800e07e:	43da      	mvns	r2, r3
 800e080:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e082:	3b01      	subs	r3, #1
 800e084:	400a      	ands	r2, r1
 800e086:	4937      	ldr	r1, [pc, #220]	@ (800e164 <UTIL_SEQ_Run+0x1ec>)
 800e088:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800e08c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e08e:	3b01      	subs	r3, #1
 800e090:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e092:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e094:	2b00      	cmp	r3, #0
 800e096:	d1e8      	bne.n	800e06a <UTIL_SEQ_Run+0xf2>
 800e098:	6a3b      	ldr	r3, [r7, #32]
 800e09a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e09c:	697b      	ldr	r3, [r7, #20]
 800e09e:	f383 8810 	msr	PRIMASK, r3
}
 800e0a2:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800e0a4:	4b30      	ldr	r3, [pc, #192]	@ (800e168 <UTIL_SEQ_Run+0x1f0>)
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	4a30      	ldr	r2, [pc, #192]	@ (800e16c <UTIL_SEQ_Run+0x1f4>)
 800e0aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e0ae:	4798      	blx	r3

    local_taskset = TaskSet;
 800e0b0:	4b28      	ldr	r3, [pc, #160]	@ (800e154 <UTIL_SEQ_Run+0x1dc>)
 800e0b2:	681b      	ldr	r3, [r3, #0]
 800e0b4:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 800e0b6:	4b28      	ldr	r3, [pc, #160]	@ (800e158 <UTIL_SEQ_Run+0x1e0>)
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 800e0bc:	4b27      	ldr	r3, [pc, #156]	@ (800e15c <UTIL_SEQ_Run+0x1e4>)
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 800e0c2:	4b27      	ldr	r3, [pc, #156]	@ (800e160 <UTIL_SEQ_Run+0x1e8>)
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800e0c8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e0ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0cc:	401a      	ands	r2, r3
 800e0ce:	4b20      	ldr	r3, [pc, #128]	@ (800e150 <UTIL_SEQ_Run+0x1d8>)
 800e0d0:	681b      	ldr	r3, [r3, #0]
 800e0d2:	4013      	ands	r3, r2
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d005      	beq.n	800e0e4 <UTIL_SEQ_Run+0x16c>
 800e0d8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e0da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0dc:	4013      	ands	r3, r2
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	f43f af64 	beq.w	800dfac <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800e0e4:	4b20      	ldr	r3, [pc, #128]	@ (800e168 <UTIL_SEQ_Run+0x1f0>)
 800e0e6:	f04f 32ff 	mov.w	r2, #4294967295
 800e0ea:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800e0ec:	f000 f938 	bl	800e360 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e0f0:	f3ef 8310 	mrs	r3, PRIMASK
 800e0f4:	613b      	str	r3, [r7, #16]
  return(result);
 800e0f6:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800e0f8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800e0fa:	b672      	cpsid	i
}
 800e0fc:	bf00      	nop
  local_taskset = TaskSet;
 800e0fe:	4b15      	ldr	r3, [pc, #84]	@ (800e154 <UTIL_SEQ_Run+0x1dc>)
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 800e104:	4b14      	ldr	r3, [pc, #80]	@ (800e158 <UTIL_SEQ_Run+0x1e0>)
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 800e10a:	4b14      	ldr	r3, [pc, #80]	@ (800e15c <UTIL_SEQ_Run+0x1e4>)
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800e110:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e112:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e114:	401a      	ands	r2, r3
 800e116:	4b0e      	ldr	r3, [pc, #56]	@ (800e150 <UTIL_SEQ_Run+0x1d8>)
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	4013      	ands	r3, r2
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d107      	bne.n	800e130 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 800e120:	4b0f      	ldr	r3, [pc, #60]	@ (800e160 <UTIL_SEQ_Run+0x1e8>)
 800e122:	681a      	ldr	r2, [r3, #0]
 800e124:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e126:	4013      	ands	r3, r2
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d101      	bne.n	800e130 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 800e12c:	f7f3 f9df 	bl	80014ee <UTIL_SEQ_Idle>
 800e130:	69fb      	ldr	r3, [r7, #28]
 800e132:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e134:	68fb      	ldr	r3, [r7, #12]
 800e136:	f383 8810 	msr	PRIMASK, r3
}
 800e13a:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 800e13c:	f000 f917 	bl	800e36e <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800e140:	4a03      	ldr	r2, [pc, #12]	@ (800e150 <UTIL_SEQ_Run+0x1d8>)
 800e142:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e144:	6013      	str	r3, [r2, #0]

  return;
 800e146:	bf00      	nop
}
 800e148:	3740      	adds	r7, #64	@ 0x40
 800e14a:	46bd      	mov	sp, r7
 800e14c:	bd80      	pop	{r7, pc}
 800e14e:	bf00      	nop
 800e150:	20000028 	.word	0x20000028
 800e154:	200021e8 	.word	0x200021e8
 800e158:	200021ec 	.word	0x200021ec
 800e15c:	20000024 	.word	0x20000024
 800e160:	200021f0 	.word	0x200021f0
 800e164:	20002278 	.word	0x20002278
 800e168:	200021f4 	.word	0x200021f4
 800e16c:	200021f8 	.word	0x200021f8

0800e170 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800e170:	b580      	push	{r7, lr}
 800e172:	b088      	sub	sp, #32
 800e174:	af00      	add	r7, sp, #0
 800e176:	60f8      	str	r0, [r7, #12]
 800e178:	60b9      	str	r1, [r7, #8]
 800e17a:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e17c:	f3ef 8310 	mrs	r3, PRIMASK
 800e180:	617b      	str	r3, [r7, #20]
  return(result);
 800e182:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800e184:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800e186:	b672      	cpsid	i
}
 800e188:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800e18a:	68f8      	ldr	r0, [r7, #12]
 800e18c:	f000 f8f6 	bl	800e37c <SEQ_BitPosition>
 800e190:	4603      	mov	r3, r0
 800e192:	4619      	mov	r1, r3
 800e194:	4a06      	ldr	r2, [pc, #24]	@ (800e1b0 <UTIL_SEQ_RegTask+0x40>)
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800e19c:	69fb      	ldr	r3, [r7, #28]
 800e19e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e1a0:	69bb      	ldr	r3, [r7, #24]
 800e1a2:	f383 8810 	msr	PRIMASK, r3
}
 800e1a6:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800e1a8:	bf00      	nop
}
 800e1aa:	3720      	adds	r7, #32
 800e1ac:	46bd      	mov	sp, r7
 800e1ae:	bd80      	pop	{r7, pc}
 800e1b0:	200021f8 	.word	0x200021f8

0800e1b4 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800e1b4:	b480      	push	{r7}
 800e1b6:	b087      	sub	sp, #28
 800e1b8:	af00      	add	r7, sp, #0
 800e1ba:	6078      	str	r0, [r7, #4]
 800e1bc:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e1be:	f3ef 8310 	mrs	r3, PRIMASK
 800e1c2:	60fb      	str	r3, [r7, #12]
  return(result);
 800e1c4:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800e1c6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800e1c8:	b672      	cpsid	i
}
 800e1ca:	bf00      	nop

  TaskSet |= TaskId_bm;
 800e1cc:	4b0d      	ldr	r3, [pc, #52]	@ (800e204 <UTIL_SEQ_SetTask+0x50>)
 800e1ce:	681a      	ldr	r2, [r3, #0]
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	4313      	orrs	r3, r2
 800e1d4:	4a0b      	ldr	r2, [pc, #44]	@ (800e204 <UTIL_SEQ_SetTask+0x50>)
 800e1d6:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800e1d8:	4a0b      	ldr	r2, [pc, #44]	@ (800e208 <UTIL_SEQ_SetTask+0x54>)
 800e1da:	683b      	ldr	r3, [r7, #0]
 800e1dc:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	431a      	orrs	r2, r3
 800e1e4:	4908      	ldr	r1, [pc, #32]	@ (800e208 <UTIL_SEQ_SetTask+0x54>)
 800e1e6:	683b      	ldr	r3, [r7, #0]
 800e1e8:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800e1ec:	697b      	ldr	r3, [r7, #20]
 800e1ee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e1f0:	693b      	ldr	r3, [r7, #16]
 800e1f2:	f383 8810 	msr	PRIMASK, r3
}
 800e1f6:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800e1f8:	bf00      	nop
}
 800e1fa:	371c      	adds	r7, #28
 800e1fc:	46bd      	mov	sp, r7
 800e1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e202:	4770      	bx	lr
 800e204:	200021e8 	.word	0x200021e8
 800e208:	20002278 	.word	0x20002278

0800e20c <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800e20c:	b480      	push	{r7}
 800e20e:	b087      	sub	sp, #28
 800e210:	af00      	add	r7, sp, #0
 800e212:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e214:	f3ef 8310 	mrs	r3, PRIMASK
 800e218:	60fb      	str	r3, [r7, #12]
  return(result);
 800e21a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800e21c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800e21e:	b672      	cpsid	i
}
 800e220:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	43da      	mvns	r2, r3
 800e226:	4b08      	ldr	r3, [pc, #32]	@ (800e248 <UTIL_SEQ_PauseTask+0x3c>)
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	4013      	ands	r3, r2
 800e22c:	4a06      	ldr	r2, [pc, #24]	@ (800e248 <UTIL_SEQ_PauseTask+0x3c>)
 800e22e:	6013      	str	r3, [r2, #0]
 800e230:	697b      	ldr	r3, [r7, #20]
 800e232:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e234:	693b      	ldr	r3, [r7, #16]
 800e236:	f383 8810 	msr	PRIMASK, r3
}
 800e23a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800e23c:	bf00      	nop
}
 800e23e:	371c      	adds	r7, #28
 800e240:	46bd      	mov	sp, r7
 800e242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e246:	4770      	bx	lr
 800e248:	20000024 	.word	0x20000024

0800e24c <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800e24c:	b480      	push	{r7}
 800e24e:	b087      	sub	sp, #28
 800e250:	af00      	add	r7, sp, #0
 800e252:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e254:	f3ef 8310 	mrs	r3, PRIMASK
 800e258:	60fb      	str	r3, [r7, #12]
  return(result);
 800e25a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800e25c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800e25e:	b672      	cpsid	i
}
 800e260:	bf00      	nop

  TaskMask |= TaskId_bm;
 800e262:	4b09      	ldr	r3, [pc, #36]	@ (800e288 <UTIL_SEQ_ResumeTask+0x3c>)
 800e264:	681a      	ldr	r2, [r3, #0]
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	4313      	orrs	r3, r2
 800e26a:	4a07      	ldr	r2, [pc, #28]	@ (800e288 <UTIL_SEQ_ResumeTask+0x3c>)
 800e26c:	6013      	str	r3, [r2, #0]
 800e26e:	697b      	ldr	r3, [r7, #20]
 800e270:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e272:	693b      	ldr	r3, [r7, #16]
 800e274:	f383 8810 	msr	PRIMASK, r3
}
 800e278:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800e27a:	bf00      	nop
}
 800e27c:	371c      	adds	r7, #28
 800e27e:	46bd      	mov	sp, r7
 800e280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e284:	4770      	bx	lr
 800e286:	bf00      	nop
 800e288:	20000024 	.word	0x20000024

0800e28c <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800e28c:	b480      	push	{r7}
 800e28e:	b087      	sub	sp, #28
 800e290:	af00      	add	r7, sp, #0
 800e292:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e294:	f3ef 8310 	mrs	r3, PRIMASK
 800e298:	60fb      	str	r3, [r7, #12]
  return(result);
 800e29a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800e29c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800e29e:	b672      	cpsid	i
}
 800e2a0:	bf00      	nop

  EvtSet |= EvtId_bm;
 800e2a2:	4b09      	ldr	r3, [pc, #36]	@ (800e2c8 <UTIL_SEQ_SetEvt+0x3c>)
 800e2a4:	681a      	ldr	r2, [r3, #0]
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	4313      	orrs	r3, r2
 800e2aa:	4a07      	ldr	r2, [pc, #28]	@ (800e2c8 <UTIL_SEQ_SetEvt+0x3c>)
 800e2ac:	6013      	str	r3, [r2, #0]
 800e2ae:	697b      	ldr	r3, [r7, #20]
 800e2b0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e2b2:	693b      	ldr	r3, [r7, #16]
 800e2b4:	f383 8810 	msr	PRIMASK, r3
}
 800e2b8:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800e2ba:	bf00      	nop
}
 800e2bc:	371c      	adds	r7, #28
 800e2be:	46bd      	mov	sp, r7
 800e2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2c4:	4770      	bx	lr
 800e2c6:	bf00      	nop
 800e2c8:	200021ec 	.word	0x200021ec

0800e2cc <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800e2cc:	b580      	push	{r7, lr}
 800e2ce:	b088      	sub	sp, #32
 800e2d0:	af00      	add	r7, sp, #0
 800e2d2:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800e2d4:	4b1f      	ldr	r3, [pc, #124]	@ (800e354 <UTIL_SEQ_WaitEvt+0x88>)
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800e2da:	4b1e      	ldr	r3, [pc, #120]	@ (800e354 <UTIL_SEQ_WaitEvt+0x88>)
 800e2dc:	681b      	ldr	r3, [r3, #0]
 800e2de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2e2:	d102      	bne.n	800e2ea <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 800e2e4:	2300      	movs	r3, #0
 800e2e6:	61fb      	str	r3, [r7, #28]
 800e2e8:	e005      	b.n	800e2f6 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 800e2ea:	4b1a      	ldr	r3, [pc, #104]	@ (800e354 <UTIL_SEQ_WaitEvt+0x88>)
 800e2ec:	681b      	ldr	r3, [r3, #0]
 800e2ee:	2201      	movs	r2, #1
 800e2f0:	fa02 f303 	lsl.w	r3, r2, r3
 800e2f4:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800e2f6:	4b18      	ldr	r3, [pc, #96]	@ (800e358 <UTIL_SEQ_WaitEvt+0x8c>)
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 800e2fc:	4a16      	ldr	r2, [pc, #88]	@ (800e358 <UTIL_SEQ_WaitEvt+0x8c>)
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 800e302:	e003      	b.n	800e30c <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 800e304:	6879      	ldr	r1, [r7, #4]
 800e306:	69f8      	ldr	r0, [r7, #28]
 800e308:	f7f3 f8f8 	bl	80014fc <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 800e30c:	4b13      	ldr	r3, [pc, #76]	@ (800e35c <UTIL_SEQ_WaitEvt+0x90>)
 800e30e:	681a      	ldr	r2, [r3, #0]
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	4013      	ands	r3, r2
 800e314:	2b00      	cmp	r3, #0
 800e316:	d0f5      	beq.n	800e304 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 800e318:	4a0e      	ldr	r2, [pc, #56]	@ (800e354 <UTIL_SEQ_WaitEvt+0x88>)
 800e31a:	69bb      	ldr	r3, [r7, #24]
 800e31c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e31e:	f3ef 8310 	mrs	r3, PRIMASK
 800e322:	60bb      	str	r3, [r7, #8]
  return(result);
 800e324:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800e326:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800e328:	b672      	cpsid	i
}
 800e32a:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	43da      	mvns	r2, r3
 800e330:	4b0a      	ldr	r3, [pc, #40]	@ (800e35c <UTIL_SEQ_WaitEvt+0x90>)
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	4013      	ands	r3, r2
 800e336:	4a09      	ldr	r2, [pc, #36]	@ (800e35c <UTIL_SEQ_WaitEvt+0x90>)
 800e338:	6013      	str	r3, [r2, #0]
 800e33a:	693b      	ldr	r3, [r7, #16]
 800e33c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	f383 8810 	msr	PRIMASK, r3
}
 800e344:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 800e346:	4a04      	ldr	r2, [pc, #16]	@ (800e358 <UTIL_SEQ_WaitEvt+0x8c>)
 800e348:	697b      	ldr	r3, [r7, #20]
 800e34a:	6013      	str	r3, [r2, #0]
  return;
 800e34c:	bf00      	nop
}
 800e34e:	3720      	adds	r7, #32
 800e350:	46bd      	mov	sp, r7
 800e352:	bd80      	pop	{r7, pc}
 800e354:	200021f4 	.word	0x200021f4
 800e358:	200021f0 	.word	0x200021f0
 800e35c:	200021ec 	.word	0x200021ec

0800e360 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800e360:	b480      	push	{r7}
 800e362:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800e364:	bf00      	nop
}
 800e366:	46bd      	mov	sp, r7
 800e368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e36c:	4770      	bx	lr

0800e36e <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800e36e:	b480      	push	{r7}
 800e370:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800e372:	bf00      	nop
}
 800e374:	46bd      	mov	sp, r7
 800e376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e37a:	4770      	bx	lr

0800e37c <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800e37c:	b480      	push	{r7}
 800e37e:	b085      	sub	sp, #20
 800e380:	af00      	add	r7, sp, #0
 800e382:	6078      	str	r0, [r7, #4]
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	60fb      	str	r3, [r7, #12]
  if (value == 0U)
 800e388:	68fb      	ldr	r3, [r7, #12]
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d101      	bne.n	800e392 <SEQ_BitPosition+0x16>
    return 32U;
 800e38e:	2320      	movs	r3, #32
 800e390:	e003      	b.n	800e39a <SEQ_BitPosition+0x1e>
  return __builtin_clz(value);
 800e392:	68fb      	ldr	r3, [r7, #12]
 800e394:	fab3 f383 	clz	r3, r3
 800e398:	b2db      	uxtb	r3, r3
  return (uint8_t)(31 -__CLZ( Value ));
 800e39a:	f1c3 031f 	rsb	r3, r3, #31
 800e39e:	b2db      	uxtb	r3, r3
}
 800e3a0:	4618      	mov	r0, r3
 800e3a2:	3714      	adds	r7, #20
 800e3a4:	46bd      	mov	sp, r7
 800e3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3aa:	4770      	bx	lr

0800e3ac <std>:
 800e3ac:	2300      	movs	r3, #0
 800e3ae:	b510      	push	{r4, lr}
 800e3b0:	4604      	mov	r4, r0
 800e3b2:	e9c0 3300 	strd	r3, r3, [r0]
 800e3b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e3ba:	6083      	str	r3, [r0, #8]
 800e3bc:	8181      	strh	r1, [r0, #12]
 800e3be:	6643      	str	r3, [r0, #100]	@ 0x64
 800e3c0:	81c2      	strh	r2, [r0, #14]
 800e3c2:	6183      	str	r3, [r0, #24]
 800e3c4:	4619      	mov	r1, r3
 800e3c6:	2208      	movs	r2, #8
 800e3c8:	305c      	adds	r0, #92	@ 0x5c
 800e3ca:	f000 fa21 	bl	800e810 <memset>
 800e3ce:	4b0d      	ldr	r3, [pc, #52]	@ (800e404 <std+0x58>)
 800e3d0:	6263      	str	r3, [r4, #36]	@ 0x24
 800e3d2:	4b0d      	ldr	r3, [pc, #52]	@ (800e408 <std+0x5c>)
 800e3d4:	62a3      	str	r3, [r4, #40]	@ 0x28
 800e3d6:	4b0d      	ldr	r3, [pc, #52]	@ (800e40c <std+0x60>)
 800e3d8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800e3da:	4b0d      	ldr	r3, [pc, #52]	@ (800e410 <std+0x64>)
 800e3dc:	6323      	str	r3, [r4, #48]	@ 0x30
 800e3de:	4b0d      	ldr	r3, [pc, #52]	@ (800e414 <std+0x68>)
 800e3e0:	6224      	str	r4, [r4, #32]
 800e3e2:	429c      	cmp	r4, r3
 800e3e4:	d006      	beq.n	800e3f4 <std+0x48>
 800e3e6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800e3ea:	4294      	cmp	r4, r2
 800e3ec:	d002      	beq.n	800e3f4 <std+0x48>
 800e3ee:	33d0      	adds	r3, #208	@ 0xd0
 800e3f0:	429c      	cmp	r4, r3
 800e3f2:	d105      	bne.n	800e400 <std+0x54>
 800e3f4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800e3f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e3fc:	f000 ba7a 	b.w	800e8f4 <__retarget_lock_init_recursive>
 800e400:	bd10      	pop	{r4, pc}
 800e402:	bf00      	nop
 800e404:	0800e661 	.word	0x0800e661
 800e408:	0800e683 	.word	0x0800e683
 800e40c:	0800e6bb 	.word	0x0800e6bb
 800e410:	0800e6df 	.word	0x0800e6df
 800e414:	20002280 	.word	0x20002280

0800e418 <stdio_exit_handler>:
 800e418:	4a02      	ldr	r2, [pc, #8]	@ (800e424 <stdio_exit_handler+0xc>)
 800e41a:	4903      	ldr	r1, [pc, #12]	@ (800e428 <stdio_exit_handler+0x10>)
 800e41c:	4803      	ldr	r0, [pc, #12]	@ (800e42c <stdio_exit_handler+0x14>)
 800e41e:	f000 b869 	b.w	800e4f4 <_fwalk_sglue>
 800e422:	bf00      	nop
 800e424:	2000002c 	.word	0x2000002c
 800e428:	0800f461 	.word	0x0800f461
 800e42c:	2000003c 	.word	0x2000003c

0800e430 <cleanup_stdio>:
 800e430:	6841      	ldr	r1, [r0, #4]
 800e432:	4b0c      	ldr	r3, [pc, #48]	@ (800e464 <cleanup_stdio+0x34>)
 800e434:	4299      	cmp	r1, r3
 800e436:	b510      	push	{r4, lr}
 800e438:	4604      	mov	r4, r0
 800e43a:	d001      	beq.n	800e440 <cleanup_stdio+0x10>
 800e43c:	f001 f810 	bl	800f460 <_fflush_r>
 800e440:	68a1      	ldr	r1, [r4, #8]
 800e442:	4b09      	ldr	r3, [pc, #36]	@ (800e468 <cleanup_stdio+0x38>)
 800e444:	4299      	cmp	r1, r3
 800e446:	d002      	beq.n	800e44e <cleanup_stdio+0x1e>
 800e448:	4620      	mov	r0, r4
 800e44a:	f001 f809 	bl	800f460 <_fflush_r>
 800e44e:	68e1      	ldr	r1, [r4, #12]
 800e450:	4b06      	ldr	r3, [pc, #24]	@ (800e46c <cleanup_stdio+0x3c>)
 800e452:	4299      	cmp	r1, r3
 800e454:	d004      	beq.n	800e460 <cleanup_stdio+0x30>
 800e456:	4620      	mov	r0, r4
 800e458:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e45c:	f001 b800 	b.w	800f460 <_fflush_r>
 800e460:	bd10      	pop	{r4, pc}
 800e462:	bf00      	nop
 800e464:	20002280 	.word	0x20002280
 800e468:	200022e8 	.word	0x200022e8
 800e46c:	20002350 	.word	0x20002350

0800e470 <global_stdio_init.part.0>:
 800e470:	b510      	push	{r4, lr}
 800e472:	4b0b      	ldr	r3, [pc, #44]	@ (800e4a0 <global_stdio_init.part.0+0x30>)
 800e474:	4c0b      	ldr	r4, [pc, #44]	@ (800e4a4 <global_stdio_init.part.0+0x34>)
 800e476:	4a0c      	ldr	r2, [pc, #48]	@ (800e4a8 <global_stdio_init.part.0+0x38>)
 800e478:	601a      	str	r2, [r3, #0]
 800e47a:	4620      	mov	r0, r4
 800e47c:	2200      	movs	r2, #0
 800e47e:	2104      	movs	r1, #4
 800e480:	f7ff ff94 	bl	800e3ac <std>
 800e484:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800e488:	2201      	movs	r2, #1
 800e48a:	2109      	movs	r1, #9
 800e48c:	f7ff ff8e 	bl	800e3ac <std>
 800e490:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800e494:	2202      	movs	r2, #2
 800e496:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e49a:	2112      	movs	r1, #18
 800e49c:	f7ff bf86 	b.w	800e3ac <std>
 800e4a0:	200023b8 	.word	0x200023b8
 800e4a4:	20002280 	.word	0x20002280
 800e4a8:	0800e419 	.word	0x0800e419

0800e4ac <__sfp_lock_acquire>:
 800e4ac:	4801      	ldr	r0, [pc, #4]	@ (800e4b4 <__sfp_lock_acquire+0x8>)
 800e4ae:	f000 ba22 	b.w	800e8f6 <__retarget_lock_acquire_recursive>
 800e4b2:	bf00      	nop
 800e4b4:	200023c1 	.word	0x200023c1

0800e4b8 <__sfp_lock_release>:
 800e4b8:	4801      	ldr	r0, [pc, #4]	@ (800e4c0 <__sfp_lock_release+0x8>)
 800e4ba:	f000 ba1d 	b.w	800e8f8 <__retarget_lock_release_recursive>
 800e4be:	bf00      	nop
 800e4c0:	200023c1 	.word	0x200023c1

0800e4c4 <__sinit>:
 800e4c4:	b510      	push	{r4, lr}
 800e4c6:	4604      	mov	r4, r0
 800e4c8:	f7ff fff0 	bl	800e4ac <__sfp_lock_acquire>
 800e4cc:	6a23      	ldr	r3, [r4, #32]
 800e4ce:	b11b      	cbz	r3, 800e4d8 <__sinit+0x14>
 800e4d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e4d4:	f7ff bff0 	b.w	800e4b8 <__sfp_lock_release>
 800e4d8:	4b04      	ldr	r3, [pc, #16]	@ (800e4ec <__sinit+0x28>)
 800e4da:	6223      	str	r3, [r4, #32]
 800e4dc:	4b04      	ldr	r3, [pc, #16]	@ (800e4f0 <__sinit+0x2c>)
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	d1f5      	bne.n	800e4d0 <__sinit+0xc>
 800e4e4:	f7ff ffc4 	bl	800e470 <global_stdio_init.part.0>
 800e4e8:	e7f2      	b.n	800e4d0 <__sinit+0xc>
 800e4ea:	bf00      	nop
 800e4ec:	0800e431 	.word	0x0800e431
 800e4f0:	200023b8 	.word	0x200023b8

0800e4f4 <_fwalk_sglue>:
 800e4f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e4f8:	4607      	mov	r7, r0
 800e4fa:	4688      	mov	r8, r1
 800e4fc:	4614      	mov	r4, r2
 800e4fe:	2600      	movs	r6, #0
 800e500:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e504:	f1b9 0901 	subs.w	r9, r9, #1
 800e508:	d505      	bpl.n	800e516 <_fwalk_sglue+0x22>
 800e50a:	6824      	ldr	r4, [r4, #0]
 800e50c:	2c00      	cmp	r4, #0
 800e50e:	d1f7      	bne.n	800e500 <_fwalk_sglue+0xc>
 800e510:	4630      	mov	r0, r6
 800e512:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e516:	89ab      	ldrh	r3, [r5, #12]
 800e518:	2b01      	cmp	r3, #1
 800e51a:	d907      	bls.n	800e52c <_fwalk_sglue+0x38>
 800e51c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e520:	3301      	adds	r3, #1
 800e522:	d003      	beq.n	800e52c <_fwalk_sglue+0x38>
 800e524:	4629      	mov	r1, r5
 800e526:	4638      	mov	r0, r7
 800e528:	47c0      	blx	r8
 800e52a:	4306      	orrs	r6, r0
 800e52c:	3568      	adds	r5, #104	@ 0x68
 800e52e:	e7e9      	b.n	800e504 <_fwalk_sglue+0x10>

0800e530 <iprintf>:
 800e530:	b40f      	push	{r0, r1, r2, r3}
 800e532:	b507      	push	{r0, r1, r2, lr}
 800e534:	4906      	ldr	r1, [pc, #24]	@ (800e550 <iprintf+0x20>)
 800e536:	ab04      	add	r3, sp, #16
 800e538:	6808      	ldr	r0, [r1, #0]
 800e53a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e53e:	6881      	ldr	r1, [r0, #8]
 800e540:	9301      	str	r3, [sp, #4]
 800e542:	f000 fc63 	bl	800ee0c <_vfiprintf_r>
 800e546:	b003      	add	sp, #12
 800e548:	f85d eb04 	ldr.w	lr, [sp], #4
 800e54c:	b004      	add	sp, #16
 800e54e:	4770      	bx	lr
 800e550:	20000038 	.word	0x20000038

0800e554 <putchar>:
 800e554:	4b02      	ldr	r3, [pc, #8]	@ (800e560 <putchar+0xc>)
 800e556:	4601      	mov	r1, r0
 800e558:	6818      	ldr	r0, [r3, #0]
 800e55a:	6882      	ldr	r2, [r0, #8]
 800e55c:	f001 b80a 	b.w	800f574 <_putc_r>
 800e560:	20000038 	.word	0x20000038

0800e564 <_puts_r>:
 800e564:	6a03      	ldr	r3, [r0, #32]
 800e566:	b570      	push	{r4, r5, r6, lr}
 800e568:	6884      	ldr	r4, [r0, #8]
 800e56a:	4605      	mov	r5, r0
 800e56c:	460e      	mov	r6, r1
 800e56e:	b90b      	cbnz	r3, 800e574 <_puts_r+0x10>
 800e570:	f7ff ffa8 	bl	800e4c4 <__sinit>
 800e574:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e576:	07db      	lsls	r3, r3, #31
 800e578:	d405      	bmi.n	800e586 <_puts_r+0x22>
 800e57a:	89a3      	ldrh	r3, [r4, #12]
 800e57c:	0598      	lsls	r0, r3, #22
 800e57e:	d402      	bmi.n	800e586 <_puts_r+0x22>
 800e580:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e582:	f000 f9b8 	bl	800e8f6 <__retarget_lock_acquire_recursive>
 800e586:	89a3      	ldrh	r3, [r4, #12]
 800e588:	0719      	lsls	r1, r3, #28
 800e58a:	d502      	bpl.n	800e592 <_puts_r+0x2e>
 800e58c:	6923      	ldr	r3, [r4, #16]
 800e58e:	2b00      	cmp	r3, #0
 800e590:	d135      	bne.n	800e5fe <_puts_r+0x9a>
 800e592:	4621      	mov	r1, r4
 800e594:	4628      	mov	r0, r5
 800e596:	f000 f8e5 	bl	800e764 <__swsetup_r>
 800e59a:	b380      	cbz	r0, 800e5fe <_puts_r+0x9a>
 800e59c:	f04f 35ff 	mov.w	r5, #4294967295
 800e5a0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e5a2:	07da      	lsls	r2, r3, #31
 800e5a4:	d405      	bmi.n	800e5b2 <_puts_r+0x4e>
 800e5a6:	89a3      	ldrh	r3, [r4, #12]
 800e5a8:	059b      	lsls	r3, r3, #22
 800e5aa:	d402      	bmi.n	800e5b2 <_puts_r+0x4e>
 800e5ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e5ae:	f000 f9a3 	bl	800e8f8 <__retarget_lock_release_recursive>
 800e5b2:	4628      	mov	r0, r5
 800e5b4:	bd70      	pop	{r4, r5, r6, pc}
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	da04      	bge.n	800e5c4 <_puts_r+0x60>
 800e5ba:	69a2      	ldr	r2, [r4, #24]
 800e5bc:	429a      	cmp	r2, r3
 800e5be:	dc17      	bgt.n	800e5f0 <_puts_r+0x8c>
 800e5c0:	290a      	cmp	r1, #10
 800e5c2:	d015      	beq.n	800e5f0 <_puts_r+0x8c>
 800e5c4:	6823      	ldr	r3, [r4, #0]
 800e5c6:	1c5a      	adds	r2, r3, #1
 800e5c8:	6022      	str	r2, [r4, #0]
 800e5ca:	7019      	strb	r1, [r3, #0]
 800e5cc:	68a3      	ldr	r3, [r4, #8]
 800e5ce:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800e5d2:	3b01      	subs	r3, #1
 800e5d4:	60a3      	str	r3, [r4, #8]
 800e5d6:	2900      	cmp	r1, #0
 800e5d8:	d1ed      	bne.n	800e5b6 <_puts_r+0x52>
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	da11      	bge.n	800e602 <_puts_r+0x9e>
 800e5de:	4622      	mov	r2, r4
 800e5e0:	210a      	movs	r1, #10
 800e5e2:	4628      	mov	r0, r5
 800e5e4:	f000 f87f 	bl	800e6e6 <__swbuf_r>
 800e5e8:	3001      	adds	r0, #1
 800e5ea:	d0d7      	beq.n	800e59c <_puts_r+0x38>
 800e5ec:	250a      	movs	r5, #10
 800e5ee:	e7d7      	b.n	800e5a0 <_puts_r+0x3c>
 800e5f0:	4622      	mov	r2, r4
 800e5f2:	4628      	mov	r0, r5
 800e5f4:	f000 f877 	bl	800e6e6 <__swbuf_r>
 800e5f8:	3001      	adds	r0, #1
 800e5fa:	d1e7      	bne.n	800e5cc <_puts_r+0x68>
 800e5fc:	e7ce      	b.n	800e59c <_puts_r+0x38>
 800e5fe:	3e01      	subs	r6, #1
 800e600:	e7e4      	b.n	800e5cc <_puts_r+0x68>
 800e602:	6823      	ldr	r3, [r4, #0]
 800e604:	1c5a      	adds	r2, r3, #1
 800e606:	6022      	str	r2, [r4, #0]
 800e608:	220a      	movs	r2, #10
 800e60a:	701a      	strb	r2, [r3, #0]
 800e60c:	e7ee      	b.n	800e5ec <_puts_r+0x88>
	...

0800e610 <puts>:
 800e610:	4b02      	ldr	r3, [pc, #8]	@ (800e61c <puts+0xc>)
 800e612:	4601      	mov	r1, r0
 800e614:	6818      	ldr	r0, [r3, #0]
 800e616:	f7ff bfa5 	b.w	800e564 <_puts_r>
 800e61a:	bf00      	nop
 800e61c:	20000038 	.word	0x20000038

0800e620 <siprintf>:
 800e620:	b40e      	push	{r1, r2, r3}
 800e622:	b500      	push	{lr}
 800e624:	b09c      	sub	sp, #112	@ 0x70
 800e626:	ab1d      	add	r3, sp, #116	@ 0x74
 800e628:	9002      	str	r0, [sp, #8]
 800e62a:	9006      	str	r0, [sp, #24]
 800e62c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800e630:	4809      	ldr	r0, [pc, #36]	@ (800e658 <siprintf+0x38>)
 800e632:	9107      	str	r1, [sp, #28]
 800e634:	9104      	str	r1, [sp, #16]
 800e636:	4909      	ldr	r1, [pc, #36]	@ (800e65c <siprintf+0x3c>)
 800e638:	f853 2b04 	ldr.w	r2, [r3], #4
 800e63c:	9105      	str	r1, [sp, #20]
 800e63e:	6800      	ldr	r0, [r0, #0]
 800e640:	9301      	str	r3, [sp, #4]
 800e642:	a902      	add	r1, sp, #8
 800e644:	f000 fabc 	bl	800ebc0 <_svfiprintf_r>
 800e648:	9b02      	ldr	r3, [sp, #8]
 800e64a:	2200      	movs	r2, #0
 800e64c:	701a      	strb	r2, [r3, #0]
 800e64e:	b01c      	add	sp, #112	@ 0x70
 800e650:	f85d eb04 	ldr.w	lr, [sp], #4
 800e654:	b003      	add	sp, #12
 800e656:	4770      	bx	lr
 800e658:	20000038 	.word	0x20000038
 800e65c:	ffff0208 	.word	0xffff0208

0800e660 <__sread>:
 800e660:	b510      	push	{r4, lr}
 800e662:	460c      	mov	r4, r1
 800e664:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e668:	f000 f8fc 	bl	800e864 <_read_r>
 800e66c:	2800      	cmp	r0, #0
 800e66e:	bfab      	itete	ge
 800e670:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800e672:	89a3      	ldrhlt	r3, [r4, #12]
 800e674:	181b      	addge	r3, r3, r0
 800e676:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800e67a:	bfac      	ite	ge
 800e67c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800e67e:	81a3      	strhlt	r3, [r4, #12]
 800e680:	bd10      	pop	{r4, pc}

0800e682 <__swrite>:
 800e682:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e686:	461f      	mov	r7, r3
 800e688:	898b      	ldrh	r3, [r1, #12]
 800e68a:	05db      	lsls	r3, r3, #23
 800e68c:	4605      	mov	r5, r0
 800e68e:	460c      	mov	r4, r1
 800e690:	4616      	mov	r6, r2
 800e692:	d505      	bpl.n	800e6a0 <__swrite+0x1e>
 800e694:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e698:	2302      	movs	r3, #2
 800e69a:	2200      	movs	r2, #0
 800e69c:	f000 f8d0 	bl	800e840 <_lseek_r>
 800e6a0:	89a3      	ldrh	r3, [r4, #12]
 800e6a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e6a6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e6aa:	81a3      	strh	r3, [r4, #12]
 800e6ac:	4632      	mov	r2, r6
 800e6ae:	463b      	mov	r3, r7
 800e6b0:	4628      	mov	r0, r5
 800e6b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e6b6:	f000 b8e7 	b.w	800e888 <_write_r>

0800e6ba <__sseek>:
 800e6ba:	b510      	push	{r4, lr}
 800e6bc:	460c      	mov	r4, r1
 800e6be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e6c2:	f000 f8bd 	bl	800e840 <_lseek_r>
 800e6c6:	1c43      	adds	r3, r0, #1
 800e6c8:	89a3      	ldrh	r3, [r4, #12]
 800e6ca:	bf15      	itete	ne
 800e6cc:	6560      	strne	r0, [r4, #84]	@ 0x54
 800e6ce:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800e6d2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800e6d6:	81a3      	strheq	r3, [r4, #12]
 800e6d8:	bf18      	it	ne
 800e6da:	81a3      	strhne	r3, [r4, #12]
 800e6dc:	bd10      	pop	{r4, pc}

0800e6de <__sclose>:
 800e6de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e6e2:	f000 b89d 	b.w	800e820 <_close_r>

0800e6e6 <__swbuf_r>:
 800e6e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e6e8:	460e      	mov	r6, r1
 800e6ea:	4614      	mov	r4, r2
 800e6ec:	4605      	mov	r5, r0
 800e6ee:	b118      	cbz	r0, 800e6f8 <__swbuf_r+0x12>
 800e6f0:	6a03      	ldr	r3, [r0, #32]
 800e6f2:	b90b      	cbnz	r3, 800e6f8 <__swbuf_r+0x12>
 800e6f4:	f7ff fee6 	bl	800e4c4 <__sinit>
 800e6f8:	69a3      	ldr	r3, [r4, #24]
 800e6fa:	60a3      	str	r3, [r4, #8]
 800e6fc:	89a3      	ldrh	r3, [r4, #12]
 800e6fe:	071a      	lsls	r2, r3, #28
 800e700:	d501      	bpl.n	800e706 <__swbuf_r+0x20>
 800e702:	6923      	ldr	r3, [r4, #16]
 800e704:	b943      	cbnz	r3, 800e718 <__swbuf_r+0x32>
 800e706:	4621      	mov	r1, r4
 800e708:	4628      	mov	r0, r5
 800e70a:	f000 f82b 	bl	800e764 <__swsetup_r>
 800e70e:	b118      	cbz	r0, 800e718 <__swbuf_r+0x32>
 800e710:	f04f 37ff 	mov.w	r7, #4294967295
 800e714:	4638      	mov	r0, r7
 800e716:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e718:	6823      	ldr	r3, [r4, #0]
 800e71a:	6922      	ldr	r2, [r4, #16]
 800e71c:	1a98      	subs	r0, r3, r2
 800e71e:	6963      	ldr	r3, [r4, #20]
 800e720:	b2f6      	uxtb	r6, r6
 800e722:	4283      	cmp	r3, r0
 800e724:	4637      	mov	r7, r6
 800e726:	dc05      	bgt.n	800e734 <__swbuf_r+0x4e>
 800e728:	4621      	mov	r1, r4
 800e72a:	4628      	mov	r0, r5
 800e72c:	f000 fe98 	bl	800f460 <_fflush_r>
 800e730:	2800      	cmp	r0, #0
 800e732:	d1ed      	bne.n	800e710 <__swbuf_r+0x2a>
 800e734:	68a3      	ldr	r3, [r4, #8]
 800e736:	3b01      	subs	r3, #1
 800e738:	60a3      	str	r3, [r4, #8]
 800e73a:	6823      	ldr	r3, [r4, #0]
 800e73c:	1c5a      	adds	r2, r3, #1
 800e73e:	6022      	str	r2, [r4, #0]
 800e740:	701e      	strb	r6, [r3, #0]
 800e742:	6962      	ldr	r2, [r4, #20]
 800e744:	1c43      	adds	r3, r0, #1
 800e746:	429a      	cmp	r2, r3
 800e748:	d004      	beq.n	800e754 <__swbuf_r+0x6e>
 800e74a:	89a3      	ldrh	r3, [r4, #12]
 800e74c:	07db      	lsls	r3, r3, #31
 800e74e:	d5e1      	bpl.n	800e714 <__swbuf_r+0x2e>
 800e750:	2e0a      	cmp	r6, #10
 800e752:	d1df      	bne.n	800e714 <__swbuf_r+0x2e>
 800e754:	4621      	mov	r1, r4
 800e756:	4628      	mov	r0, r5
 800e758:	f000 fe82 	bl	800f460 <_fflush_r>
 800e75c:	2800      	cmp	r0, #0
 800e75e:	d0d9      	beq.n	800e714 <__swbuf_r+0x2e>
 800e760:	e7d6      	b.n	800e710 <__swbuf_r+0x2a>
	...

0800e764 <__swsetup_r>:
 800e764:	b538      	push	{r3, r4, r5, lr}
 800e766:	4b29      	ldr	r3, [pc, #164]	@ (800e80c <__swsetup_r+0xa8>)
 800e768:	4605      	mov	r5, r0
 800e76a:	6818      	ldr	r0, [r3, #0]
 800e76c:	460c      	mov	r4, r1
 800e76e:	b118      	cbz	r0, 800e778 <__swsetup_r+0x14>
 800e770:	6a03      	ldr	r3, [r0, #32]
 800e772:	b90b      	cbnz	r3, 800e778 <__swsetup_r+0x14>
 800e774:	f7ff fea6 	bl	800e4c4 <__sinit>
 800e778:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e77c:	0719      	lsls	r1, r3, #28
 800e77e:	d422      	bmi.n	800e7c6 <__swsetup_r+0x62>
 800e780:	06da      	lsls	r2, r3, #27
 800e782:	d407      	bmi.n	800e794 <__swsetup_r+0x30>
 800e784:	2209      	movs	r2, #9
 800e786:	602a      	str	r2, [r5, #0]
 800e788:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e78c:	81a3      	strh	r3, [r4, #12]
 800e78e:	f04f 30ff 	mov.w	r0, #4294967295
 800e792:	e033      	b.n	800e7fc <__swsetup_r+0x98>
 800e794:	0758      	lsls	r0, r3, #29
 800e796:	d512      	bpl.n	800e7be <__swsetup_r+0x5a>
 800e798:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e79a:	b141      	cbz	r1, 800e7ae <__swsetup_r+0x4a>
 800e79c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e7a0:	4299      	cmp	r1, r3
 800e7a2:	d002      	beq.n	800e7aa <__swsetup_r+0x46>
 800e7a4:	4628      	mov	r0, r5
 800e7a6:	f000 f8b7 	bl	800e918 <_free_r>
 800e7aa:	2300      	movs	r3, #0
 800e7ac:	6363      	str	r3, [r4, #52]	@ 0x34
 800e7ae:	89a3      	ldrh	r3, [r4, #12]
 800e7b0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e7b4:	81a3      	strh	r3, [r4, #12]
 800e7b6:	2300      	movs	r3, #0
 800e7b8:	6063      	str	r3, [r4, #4]
 800e7ba:	6923      	ldr	r3, [r4, #16]
 800e7bc:	6023      	str	r3, [r4, #0]
 800e7be:	89a3      	ldrh	r3, [r4, #12]
 800e7c0:	f043 0308 	orr.w	r3, r3, #8
 800e7c4:	81a3      	strh	r3, [r4, #12]
 800e7c6:	6923      	ldr	r3, [r4, #16]
 800e7c8:	b94b      	cbnz	r3, 800e7de <__swsetup_r+0x7a>
 800e7ca:	89a3      	ldrh	r3, [r4, #12]
 800e7cc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e7d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e7d4:	d003      	beq.n	800e7de <__swsetup_r+0x7a>
 800e7d6:	4621      	mov	r1, r4
 800e7d8:	4628      	mov	r0, r5
 800e7da:	f000 fe8f 	bl	800f4fc <__smakebuf_r>
 800e7de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e7e2:	f013 0201 	ands.w	r2, r3, #1
 800e7e6:	d00a      	beq.n	800e7fe <__swsetup_r+0x9a>
 800e7e8:	2200      	movs	r2, #0
 800e7ea:	60a2      	str	r2, [r4, #8]
 800e7ec:	6962      	ldr	r2, [r4, #20]
 800e7ee:	4252      	negs	r2, r2
 800e7f0:	61a2      	str	r2, [r4, #24]
 800e7f2:	6922      	ldr	r2, [r4, #16]
 800e7f4:	b942      	cbnz	r2, 800e808 <__swsetup_r+0xa4>
 800e7f6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e7fa:	d1c5      	bne.n	800e788 <__swsetup_r+0x24>
 800e7fc:	bd38      	pop	{r3, r4, r5, pc}
 800e7fe:	0799      	lsls	r1, r3, #30
 800e800:	bf58      	it	pl
 800e802:	6962      	ldrpl	r2, [r4, #20]
 800e804:	60a2      	str	r2, [r4, #8]
 800e806:	e7f4      	b.n	800e7f2 <__swsetup_r+0x8e>
 800e808:	2000      	movs	r0, #0
 800e80a:	e7f7      	b.n	800e7fc <__swsetup_r+0x98>
 800e80c:	20000038 	.word	0x20000038

0800e810 <memset>:
 800e810:	4402      	add	r2, r0
 800e812:	4603      	mov	r3, r0
 800e814:	4293      	cmp	r3, r2
 800e816:	d100      	bne.n	800e81a <memset+0xa>
 800e818:	4770      	bx	lr
 800e81a:	f803 1b01 	strb.w	r1, [r3], #1
 800e81e:	e7f9      	b.n	800e814 <memset+0x4>

0800e820 <_close_r>:
 800e820:	b538      	push	{r3, r4, r5, lr}
 800e822:	4d06      	ldr	r5, [pc, #24]	@ (800e83c <_close_r+0x1c>)
 800e824:	2300      	movs	r3, #0
 800e826:	4604      	mov	r4, r0
 800e828:	4608      	mov	r0, r1
 800e82a:	602b      	str	r3, [r5, #0]
 800e82c:	f000 ff58 	bl	800f6e0 <_close>
 800e830:	1c43      	adds	r3, r0, #1
 800e832:	d102      	bne.n	800e83a <_close_r+0x1a>
 800e834:	682b      	ldr	r3, [r5, #0]
 800e836:	b103      	cbz	r3, 800e83a <_close_r+0x1a>
 800e838:	6023      	str	r3, [r4, #0]
 800e83a:	bd38      	pop	{r3, r4, r5, pc}
 800e83c:	200023bc 	.word	0x200023bc

0800e840 <_lseek_r>:
 800e840:	b538      	push	{r3, r4, r5, lr}
 800e842:	4d07      	ldr	r5, [pc, #28]	@ (800e860 <_lseek_r+0x20>)
 800e844:	4604      	mov	r4, r0
 800e846:	4608      	mov	r0, r1
 800e848:	4611      	mov	r1, r2
 800e84a:	2200      	movs	r2, #0
 800e84c:	602a      	str	r2, [r5, #0]
 800e84e:	461a      	mov	r2, r3
 800e850:	f000 ff5e 	bl	800f710 <_lseek>
 800e854:	1c43      	adds	r3, r0, #1
 800e856:	d102      	bne.n	800e85e <_lseek_r+0x1e>
 800e858:	682b      	ldr	r3, [r5, #0]
 800e85a:	b103      	cbz	r3, 800e85e <_lseek_r+0x1e>
 800e85c:	6023      	str	r3, [r4, #0]
 800e85e:	bd38      	pop	{r3, r4, r5, pc}
 800e860:	200023bc 	.word	0x200023bc

0800e864 <_read_r>:
 800e864:	b538      	push	{r3, r4, r5, lr}
 800e866:	4d07      	ldr	r5, [pc, #28]	@ (800e884 <_read_r+0x20>)
 800e868:	4604      	mov	r4, r0
 800e86a:	4608      	mov	r0, r1
 800e86c:	4611      	mov	r1, r2
 800e86e:	2200      	movs	r2, #0
 800e870:	602a      	str	r2, [r5, #0]
 800e872:	461a      	mov	r2, r3
 800e874:	f000 ff54 	bl	800f720 <_read>
 800e878:	1c43      	adds	r3, r0, #1
 800e87a:	d102      	bne.n	800e882 <_read_r+0x1e>
 800e87c:	682b      	ldr	r3, [r5, #0]
 800e87e:	b103      	cbz	r3, 800e882 <_read_r+0x1e>
 800e880:	6023      	str	r3, [r4, #0]
 800e882:	bd38      	pop	{r3, r4, r5, pc}
 800e884:	200023bc 	.word	0x200023bc

0800e888 <_write_r>:
 800e888:	b538      	push	{r3, r4, r5, lr}
 800e88a:	4d07      	ldr	r5, [pc, #28]	@ (800e8a8 <_write_r+0x20>)
 800e88c:	4604      	mov	r4, r0
 800e88e:	4608      	mov	r0, r1
 800e890:	4611      	mov	r1, r2
 800e892:	2200      	movs	r2, #0
 800e894:	602a      	str	r2, [r5, #0]
 800e896:	461a      	mov	r2, r3
 800e898:	f7fc ffa6 	bl	800b7e8 <_write>
 800e89c:	1c43      	adds	r3, r0, #1
 800e89e:	d102      	bne.n	800e8a6 <_write_r+0x1e>
 800e8a0:	682b      	ldr	r3, [r5, #0]
 800e8a2:	b103      	cbz	r3, 800e8a6 <_write_r+0x1e>
 800e8a4:	6023      	str	r3, [r4, #0]
 800e8a6:	bd38      	pop	{r3, r4, r5, pc}
 800e8a8:	200023bc 	.word	0x200023bc

0800e8ac <__libc_init_array>:
 800e8ac:	b570      	push	{r4, r5, r6, lr}
 800e8ae:	4d0d      	ldr	r5, [pc, #52]	@ (800e8e4 <__libc_init_array+0x38>)
 800e8b0:	4c0d      	ldr	r4, [pc, #52]	@ (800e8e8 <__libc_init_array+0x3c>)
 800e8b2:	1b64      	subs	r4, r4, r5
 800e8b4:	10a4      	asrs	r4, r4, #2
 800e8b6:	2600      	movs	r6, #0
 800e8b8:	42a6      	cmp	r6, r4
 800e8ba:	d109      	bne.n	800e8d0 <__libc_init_array+0x24>
 800e8bc:	4d0b      	ldr	r5, [pc, #44]	@ (800e8ec <__libc_init_array+0x40>)
 800e8be:	4c0c      	ldr	r4, [pc, #48]	@ (800e8f0 <__libc_init_array+0x44>)
 800e8c0:	f000 ff44 	bl	800f74c <_init>
 800e8c4:	1b64      	subs	r4, r4, r5
 800e8c6:	10a4      	asrs	r4, r4, #2
 800e8c8:	2600      	movs	r6, #0
 800e8ca:	42a6      	cmp	r6, r4
 800e8cc:	d105      	bne.n	800e8da <__libc_init_array+0x2e>
 800e8ce:	bd70      	pop	{r4, r5, r6, pc}
 800e8d0:	f855 3b04 	ldr.w	r3, [r5], #4
 800e8d4:	4798      	blx	r3
 800e8d6:	3601      	adds	r6, #1
 800e8d8:	e7ee      	b.n	800e8b8 <__libc_init_array+0xc>
 800e8da:	f855 3b04 	ldr.w	r3, [r5], #4
 800e8de:	4798      	blx	r3
 800e8e0:	3601      	adds	r6, #1
 800e8e2:	e7f2      	b.n	800e8ca <__libc_init_array+0x1e>
 800e8e4:	08010dfc 	.word	0x08010dfc
 800e8e8:	08010dfc 	.word	0x08010dfc
 800e8ec:	08010dfc 	.word	0x08010dfc
 800e8f0:	08010e00 	.word	0x08010e00

0800e8f4 <__retarget_lock_init_recursive>:
 800e8f4:	4770      	bx	lr

0800e8f6 <__retarget_lock_acquire_recursive>:
 800e8f6:	4770      	bx	lr

0800e8f8 <__retarget_lock_release_recursive>:
 800e8f8:	4770      	bx	lr

0800e8fa <memcpy>:
 800e8fa:	440a      	add	r2, r1
 800e8fc:	4291      	cmp	r1, r2
 800e8fe:	f100 33ff 	add.w	r3, r0, #4294967295
 800e902:	d100      	bne.n	800e906 <memcpy+0xc>
 800e904:	4770      	bx	lr
 800e906:	b510      	push	{r4, lr}
 800e908:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e90c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e910:	4291      	cmp	r1, r2
 800e912:	d1f9      	bne.n	800e908 <memcpy+0xe>
 800e914:	bd10      	pop	{r4, pc}
	...

0800e918 <_free_r>:
 800e918:	b538      	push	{r3, r4, r5, lr}
 800e91a:	4605      	mov	r5, r0
 800e91c:	2900      	cmp	r1, #0
 800e91e:	d041      	beq.n	800e9a4 <_free_r+0x8c>
 800e920:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e924:	1f0c      	subs	r4, r1, #4
 800e926:	2b00      	cmp	r3, #0
 800e928:	bfb8      	it	lt
 800e92a:	18e4      	addlt	r4, r4, r3
 800e92c:	f000 f8e0 	bl	800eaf0 <__malloc_lock>
 800e930:	4a1d      	ldr	r2, [pc, #116]	@ (800e9a8 <_free_r+0x90>)
 800e932:	6813      	ldr	r3, [r2, #0]
 800e934:	b933      	cbnz	r3, 800e944 <_free_r+0x2c>
 800e936:	6063      	str	r3, [r4, #4]
 800e938:	6014      	str	r4, [r2, #0]
 800e93a:	4628      	mov	r0, r5
 800e93c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e940:	f000 b8dc 	b.w	800eafc <__malloc_unlock>
 800e944:	42a3      	cmp	r3, r4
 800e946:	d908      	bls.n	800e95a <_free_r+0x42>
 800e948:	6820      	ldr	r0, [r4, #0]
 800e94a:	1821      	adds	r1, r4, r0
 800e94c:	428b      	cmp	r3, r1
 800e94e:	bf01      	itttt	eq
 800e950:	6819      	ldreq	r1, [r3, #0]
 800e952:	685b      	ldreq	r3, [r3, #4]
 800e954:	1809      	addeq	r1, r1, r0
 800e956:	6021      	streq	r1, [r4, #0]
 800e958:	e7ed      	b.n	800e936 <_free_r+0x1e>
 800e95a:	461a      	mov	r2, r3
 800e95c:	685b      	ldr	r3, [r3, #4]
 800e95e:	b10b      	cbz	r3, 800e964 <_free_r+0x4c>
 800e960:	42a3      	cmp	r3, r4
 800e962:	d9fa      	bls.n	800e95a <_free_r+0x42>
 800e964:	6811      	ldr	r1, [r2, #0]
 800e966:	1850      	adds	r0, r2, r1
 800e968:	42a0      	cmp	r0, r4
 800e96a:	d10b      	bne.n	800e984 <_free_r+0x6c>
 800e96c:	6820      	ldr	r0, [r4, #0]
 800e96e:	4401      	add	r1, r0
 800e970:	1850      	adds	r0, r2, r1
 800e972:	4283      	cmp	r3, r0
 800e974:	6011      	str	r1, [r2, #0]
 800e976:	d1e0      	bne.n	800e93a <_free_r+0x22>
 800e978:	6818      	ldr	r0, [r3, #0]
 800e97a:	685b      	ldr	r3, [r3, #4]
 800e97c:	6053      	str	r3, [r2, #4]
 800e97e:	4408      	add	r0, r1
 800e980:	6010      	str	r0, [r2, #0]
 800e982:	e7da      	b.n	800e93a <_free_r+0x22>
 800e984:	d902      	bls.n	800e98c <_free_r+0x74>
 800e986:	230c      	movs	r3, #12
 800e988:	602b      	str	r3, [r5, #0]
 800e98a:	e7d6      	b.n	800e93a <_free_r+0x22>
 800e98c:	6820      	ldr	r0, [r4, #0]
 800e98e:	1821      	adds	r1, r4, r0
 800e990:	428b      	cmp	r3, r1
 800e992:	bf04      	itt	eq
 800e994:	6819      	ldreq	r1, [r3, #0]
 800e996:	685b      	ldreq	r3, [r3, #4]
 800e998:	6063      	str	r3, [r4, #4]
 800e99a:	bf04      	itt	eq
 800e99c:	1809      	addeq	r1, r1, r0
 800e99e:	6021      	streq	r1, [r4, #0]
 800e9a0:	6054      	str	r4, [r2, #4]
 800e9a2:	e7ca      	b.n	800e93a <_free_r+0x22>
 800e9a4:	bd38      	pop	{r3, r4, r5, pc}
 800e9a6:	bf00      	nop
 800e9a8:	200023c8 	.word	0x200023c8

0800e9ac <sbrk_aligned>:
 800e9ac:	b570      	push	{r4, r5, r6, lr}
 800e9ae:	4e0f      	ldr	r6, [pc, #60]	@ (800e9ec <sbrk_aligned+0x40>)
 800e9b0:	460c      	mov	r4, r1
 800e9b2:	6831      	ldr	r1, [r6, #0]
 800e9b4:	4605      	mov	r5, r0
 800e9b6:	b911      	cbnz	r1, 800e9be <sbrk_aligned+0x12>
 800e9b8:	f000 fe4c 	bl	800f654 <_sbrk_r>
 800e9bc:	6030      	str	r0, [r6, #0]
 800e9be:	4621      	mov	r1, r4
 800e9c0:	4628      	mov	r0, r5
 800e9c2:	f000 fe47 	bl	800f654 <_sbrk_r>
 800e9c6:	1c43      	adds	r3, r0, #1
 800e9c8:	d103      	bne.n	800e9d2 <sbrk_aligned+0x26>
 800e9ca:	f04f 34ff 	mov.w	r4, #4294967295
 800e9ce:	4620      	mov	r0, r4
 800e9d0:	bd70      	pop	{r4, r5, r6, pc}
 800e9d2:	1cc4      	adds	r4, r0, #3
 800e9d4:	f024 0403 	bic.w	r4, r4, #3
 800e9d8:	42a0      	cmp	r0, r4
 800e9da:	d0f8      	beq.n	800e9ce <sbrk_aligned+0x22>
 800e9dc:	1a21      	subs	r1, r4, r0
 800e9de:	4628      	mov	r0, r5
 800e9e0:	f000 fe38 	bl	800f654 <_sbrk_r>
 800e9e4:	3001      	adds	r0, #1
 800e9e6:	d1f2      	bne.n	800e9ce <sbrk_aligned+0x22>
 800e9e8:	e7ef      	b.n	800e9ca <sbrk_aligned+0x1e>
 800e9ea:	bf00      	nop
 800e9ec:	200023c4 	.word	0x200023c4

0800e9f0 <_malloc_r>:
 800e9f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e9f4:	1ccd      	adds	r5, r1, #3
 800e9f6:	f025 0503 	bic.w	r5, r5, #3
 800e9fa:	3508      	adds	r5, #8
 800e9fc:	2d0c      	cmp	r5, #12
 800e9fe:	bf38      	it	cc
 800ea00:	250c      	movcc	r5, #12
 800ea02:	2d00      	cmp	r5, #0
 800ea04:	4606      	mov	r6, r0
 800ea06:	db01      	blt.n	800ea0c <_malloc_r+0x1c>
 800ea08:	42a9      	cmp	r1, r5
 800ea0a:	d904      	bls.n	800ea16 <_malloc_r+0x26>
 800ea0c:	230c      	movs	r3, #12
 800ea0e:	6033      	str	r3, [r6, #0]
 800ea10:	2000      	movs	r0, #0
 800ea12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ea16:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800eaec <_malloc_r+0xfc>
 800ea1a:	f000 f869 	bl	800eaf0 <__malloc_lock>
 800ea1e:	f8d8 3000 	ldr.w	r3, [r8]
 800ea22:	461c      	mov	r4, r3
 800ea24:	bb44      	cbnz	r4, 800ea78 <_malloc_r+0x88>
 800ea26:	4629      	mov	r1, r5
 800ea28:	4630      	mov	r0, r6
 800ea2a:	f7ff ffbf 	bl	800e9ac <sbrk_aligned>
 800ea2e:	1c43      	adds	r3, r0, #1
 800ea30:	4604      	mov	r4, r0
 800ea32:	d158      	bne.n	800eae6 <_malloc_r+0xf6>
 800ea34:	f8d8 4000 	ldr.w	r4, [r8]
 800ea38:	4627      	mov	r7, r4
 800ea3a:	2f00      	cmp	r7, #0
 800ea3c:	d143      	bne.n	800eac6 <_malloc_r+0xd6>
 800ea3e:	2c00      	cmp	r4, #0
 800ea40:	d04b      	beq.n	800eada <_malloc_r+0xea>
 800ea42:	6823      	ldr	r3, [r4, #0]
 800ea44:	4639      	mov	r1, r7
 800ea46:	4630      	mov	r0, r6
 800ea48:	eb04 0903 	add.w	r9, r4, r3
 800ea4c:	f000 fe02 	bl	800f654 <_sbrk_r>
 800ea50:	4581      	cmp	r9, r0
 800ea52:	d142      	bne.n	800eada <_malloc_r+0xea>
 800ea54:	6821      	ldr	r1, [r4, #0]
 800ea56:	1a6d      	subs	r5, r5, r1
 800ea58:	4629      	mov	r1, r5
 800ea5a:	4630      	mov	r0, r6
 800ea5c:	f7ff ffa6 	bl	800e9ac <sbrk_aligned>
 800ea60:	3001      	adds	r0, #1
 800ea62:	d03a      	beq.n	800eada <_malloc_r+0xea>
 800ea64:	6823      	ldr	r3, [r4, #0]
 800ea66:	442b      	add	r3, r5
 800ea68:	6023      	str	r3, [r4, #0]
 800ea6a:	f8d8 3000 	ldr.w	r3, [r8]
 800ea6e:	685a      	ldr	r2, [r3, #4]
 800ea70:	bb62      	cbnz	r2, 800eacc <_malloc_r+0xdc>
 800ea72:	f8c8 7000 	str.w	r7, [r8]
 800ea76:	e00f      	b.n	800ea98 <_malloc_r+0xa8>
 800ea78:	6822      	ldr	r2, [r4, #0]
 800ea7a:	1b52      	subs	r2, r2, r5
 800ea7c:	d420      	bmi.n	800eac0 <_malloc_r+0xd0>
 800ea7e:	2a0b      	cmp	r2, #11
 800ea80:	d917      	bls.n	800eab2 <_malloc_r+0xc2>
 800ea82:	1961      	adds	r1, r4, r5
 800ea84:	42a3      	cmp	r3, r4
 800ea86:	6025      	str	r5, [r4, #0]
 800ea88:	bf18      	it	ne
 800ea8a:	6059      	strne	r1, [r3, #4]
 800ea8c:	6863      	ldr	r3, [r4, #4]
 800ea8e:	bf08      	it	eq
 800ea90:	f8c8 1000 	streq.w	r1, [r8]
 800ea94:	5162      	str	r2, [r4, r5]
 800ea96:	604b      	str	r3, [r1, #4]
 800ea98:	4630      	mov	r0, r6
 800ea9a:	f000 f82f 	bl	800eafc <__malloc_unlock>
 800ea9e:	f104 000b 	add.w	r0, r4, #11
 800eaa2:	1d23      	adds	r3, r4, #4
 800eaa4:	f020 0007 	bic.w	r0, r0, #7
 800eaa8:	1ac2      	subs	r2, r0, r3
 800eaaa:	bf1c      	itt	ne
 800eaac:	1a1b      	subne	r3, r3, r0
 800eaae:	50a3      	strne	r3, [r4, r2]
 800eab0:	e7af      	b.n	800ea12 <_malloc_r+0x22>
 800eab2:	6862      	ldr	r2, [r4, #4]
 800eab4:	42a3      	cmp	r3, r4
 800eab6:	bf0c      	ite	eq
 800eab8:	f8c8 2000 	streq.w	r2, [r8]
 800eabc:	605a      	strne	r2, [r3, #4]
 800eabe:	e7eb      	b.n	800ea98 <_malloc_r+0xa8>
 800eac0:	4623      	mov	r3, r4
 800eac2:	6864      	ldr	r4, [r4, #4]
 800eac4:	e7ae      	b.n	800ea24 <_malloc_r+0x34>
 800eac6:	463c      	mov	r4, r7
 800eac8:	687f      	ldr	r7, [r7, #4]
 800eaca:	e7b6      	b.n	800ea3a <_malloc_r+0x4a>
 800eacc:	461a      	mov	r2, r3
 800eace:	685b      	ldr	r3, [r3, #4]
 800ead0:	42a3      	cmp	r3, r4
 800ead2:	d1fb      	bne.n	800eacc <_malloc_r+0xdc>
 800ead4:	2300      	movs	r3, #0
 800ead6:	6053      	str	r3, [r2, #4]
 800ead8:	e7de      	b.n	800ea98 <_malloc_r+0xa8>
 800eada:	230c      	movs	r3, #12
 800eadc:	6033      	str	r3, [r6, #0]
 800eade:	4630      	mov	r0, r6
 800eae0:	f000 f80c 	bl	800eafc <__malloc_unlock>
 800eae4:	e794      	b.n	800ea10 <_malloc_r+0x20>
 800eae6:	6005      	str	r5, [r0, #0]
 800eae8:	e7d6      	b.n	800ea98 <_malloc_r+0xa8>
 800eaea:	bf00      	nop
 800eaec:	200023c8 	.word	0x200023c8

0800eaf0 <__malloc_lock>:
 800eaf0:	4801      	ldr	r0, [pc, #4]	@ (800eaf8 <__malloc_lock+0x8>)
 800eaf2:	f7ff bf00 	b.w	800e8f6 <__retarget_lock_acquire_recursive>
 800eaf6:	bf00      	nop
 800eaf8:	200023c0 	.word	0x200023c0

0800eafc <__malloc_unlock>:
 800eafc:	4801      	ldr	r0, [pc, #4]	@ (800eb04 <__malloc_unlock+0x8>)
 800eafe:	f7ff befb 	b.w	800e8f8 <__retarget_lock_release_recursive>
 800eb02:	bf00      	nop
 800eb04:	200023c0 	.word	0x200023c0

0800eb08 <__ssputs_r>:
 800eb08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eb0c:	688e      	ldr	r6, [r1, #8]
 800eb0e:	461f      	mov	r7, r3
 800eb10:	42be      	cmp	r6, r7
 800eb12:	680b      	ldr	r3, [r1, #0]
 800eb14:	4682      	mov	sl, r0
 800eb16:	460c      	mov	r4, r1
 800eb18:	4690      	mov	r8, r2
 800eb1a:	d82d      	bhi.n	800eb78 <__ssputs_r+0x70>
 800eb1c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800eb20:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800eb24:	d026      	beq.n	800eb74 <__ssputs_r+0x6c>
 800eb26:	6965      	ldr	r5, [r4, #20]
 800eb28:	6909      	ldr	r1, [r1, #16]
 800eb2a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800eb2e:	eba3 0901 	sub.w	r9, r3, r1
 800eb32:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800eb36:	1c7b      	adds	r3, r7, #1
 800eb38:	444b      	add	r3, r9
 800eb3a:	106d      	asrs	r5, r5, #1
 800eb3c:	429d      	cmp	r5, r3
 800eb3e:	bf38      	it	cc
 800eb40:	461d      	movcc	r5, r3
 800eb42:	0553      	lsls	r3, r2, #21
 800eb44:	d527      	bpl.n	800eb96 <__ssputs_r+0x8e>
 800eb46:	4629      	mov	r1, r5
 800eb48:	f7ff ff52 	bl	800e9f0 <_malloc_r>
 800eb4c:	4606      	mov	r6, r0
 800eb4e:	b360      	cbz	r0, 800ebaa <__ssputs_r+0xa2>
 800eb50:	6921      	ldr	r1, [r4, #16]
 800eb52:	464a      	mov	r2, r9
 800eb54:	f7ff fed1 	bl	800e8fa <memcpy>
 800eb58:	89a3      	ldrh	r3, [r4, #12]
 800eb5a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800eb5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800eb62:	81a3      	strh	r3, [r4, #12]
 800eb64:	6126      	str	r6, [r4, #16]
 800eb66:	6165      	str	r5, [r4, #20]
 800eb68:	444e      	add	r6, r9
 800eb6a:	eba5 0509 	sub.w	r5, r5, r9
 800eb6e:	6026      	str	r6, [r4, #0]
 800eb70:	60a5      	str	r5, [r4, #8]
 800eb72:	463e      	mov	r6, r7
 800eb74:	42be      	cmp	r6, r7
 800eb76:	d900      	bls.n	800eb7a <__ssputs_r+0x72>
 800eb78:	463e      	mov	r6, r7
 800eb7a:	6820      	ldr	r0, [r4, #0]
 800eb7c:	4632      	mov	r2, r6
 800eb7e:	4641      	mov	r1, r8
 800eb80:	f000 fd2c 	bl	800f5dc <memmove>
 800eb84:	68a3      	ldr	r3, [r4, #8]
 800eb86:	1b9b      	subs	r3, r3, r6
 800eb88:	60a3      	str	r3, [r4, #8]
 800eb8a:	6823      	ldr	r3, [r4, #0]
 800eb8c:	4433      	add	r3, r6
 800eb8e:	6023      	str	r3, [r4, #0]
 800eb90:	2000      	movs	r0, #0
 800eb92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb96:	462a      	mov	r2, r5
 800eb98:	f000 fd6c 	bl	800f674 <_realloc_r>
 800eb9c:	4606      	mov	r6, r0
 800eb9e:	2800      	cmp	r0, #0
 800eba0:	d1e0      	bne.n	800eb64 <__ssputs_r+0x5c>
 800eba2:	6921      	ldr	r1, [r4, #16]
 800eba4:	4650      	mov	r0, sl
 800eba6:	f7ff feb7 	bl	800e918 <_free_r>
 800ebaa:	230c      	movs	r3, #12
 800ebac:	f8ca 3000 	str.w	r3, [sl]
 800ebb0:	89a3      	ldrh	r3, [r4, #12]
 800ebb2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ebb6:	81a3      	strh	r3, [r4, #12]
 800ebb8:	f04f 30ff 	mov.w	r0, #4294967295
 800ebbc:	e7e9      	b.n	800eb92 <__ssputs_r+0x8a>
	...

0800ebc0 <_svfiprintf_r>:
 800ebc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebc4:	4698      	mov	r8, r3
 800ebc6:	898b      	ldrh	r3, [r1, #12]
 800ebc8:	061b      	lsls	r3, r3, #24
 800ebca:	b09d      	sub	sp, #116	@ 0x74
 800ebcc:	4607      	mov	r7, r0
 800ebce:	460d      	mov	r5, r1
 800ebd0:	4614      	mov	r4, r2
 800ebd2:	d510      	bpl.n	800ebf6 <_svfiprintf_r+0x36>
 800ebd4:	690b      	ldr	r3, [r1, #16]
 800ebd6:	b973      	cbnz	r3, 800ebf6 <_svfiprintf_r+0x36>
 800ebd8:	2140      	movs	r1, #64	@ 0x40
 800ebda:	f7ff ff09 	bl	800e9f0 <_malloc_r>
 800ebde:	6028      	str	r0, [r5, #0]
 800ebe0:	6128      	str	r0, [r5, #16]
 800ebe2:	b930      	cbnz	r0, 800ebf2 <_svfiprintf_r+0x32>
 800ebe4:	230c      	movs	r3, #12
 800ebe6:	603b      	str	r3, [r7, #0]
 800ebe8:	f04f 30ff 	mov.w	r0, #4294967295
 800ebec:	b01d      	add	sp, #116	@ 0x74
 800ebee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ebf2:	2340      	movs	r3, #64	@ 0x40
 800ebf4:	616b      	str	r3, [r5, #20]
 800ebf6:	2300      	movs	r3, #0
 800ebf8:	9309      	str	r3, [sp, #36]	@ 0x24
 800ebfa:	2320      	movs	r3, #32
 800ebfc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ec00:	f8cd 800c 	str.w	r8, [sp, #12]
 800ec04:	2330      	movs	r3, #48	@ 0x30
 800ec06:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800eda4 <_svfiprintf_r+0x1e4>
 800ec0a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ec0e:	f04f 0901 	mov.w	r9, #1
 800ec12:	4623      	mov	r3, r4
 800ec14:	469a      	mov	sl, r3
 800ec16:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ec1a:	b10a      	cbz	r2, 800ec20 <_svfiprintf_r+0x60>
 800ec1c:	2a25      	cmp	r2, #37	@ 0x25
 800ec1e:	d1f9      	bne.n	800ec14 <_svfiprintf_r+0x54>
 800ec20:	ebba 0b04 	subs.w	fp, sl, r4
 800ec24:	d00b      	beq.n	800ec3e <_svfiprintf_r+0x7e>
 800ec26:	465b      	mov	r3, fp
 800ec28:	4622      	mov	r2, r4
 800ec2a:	4629      	mov	r1, r5
 800ec2c:	4638      	mov	r0, r7
 800ec2e:	f7ff ff6b 	bl	800eb08 <__ssputs_r>
 800ec32:	3001      	adds	r0, #1
 800ec34:	f000 80a7 	beq.w	800ed86 <_svfiprintf_r+0x1c6>
 800ec38:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ec3a:	445a      	add	r2, fp
 800ec3c:	9209      	str	r2, [sp, #36]	@ 0x24
 800ec3e:	f89a 3000 	ldrb.w	r3, [sl]
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	f000 809f 	beq.w	800ed86 <_svfiprintf_r+0x1c6>
 800ec48:	2300      	movs	r3, #0
 800ec4a:	f04f 32ff 	mov.w	r2, #4294967295
 800ec4e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ec52:	f10a 0a01 	add.w	sl, sl, #1
 800ec56:	9304      	str	r3, [sp, #16]
 800ec58:	9307      	str	r3, [sp, #28]
 800ec5a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ec5e:	931a      	str	r3, [sp, #104]	@ 0x68
 800ec60:	4654      	mov	r4, sl
 800ec62:	2205      	movs	r2, #5
 800ec64:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ec68:	484e      	ldr	r0, [pc, #312]	@ (800eda4 <_svfiprintf_r+0x1e4>)
 800ec6a:	f7f1 fa91 	bl	8000190 <memchr>
 800ec6e:	9a04      	ldr	r2, [sp, #16]
 800ec70:	b9d8      	cbnz	r0, 800ecaa <_svfiprintf_r+0xea>
 800ec72:	06d0      	lsls	r0, r2, #27
 800ec74:	bf44      	itt	mi
 800ec76:	2320      	movmi	r3, #32
 800ec78:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ec7c:	0711      	lsls	r1, r2, #28
 800ec7e:	bf44      	itt	mi
 800ec80:	232b      	movmi	r3, #43	@ 0x2b
 800ec82:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ec86:	f89a 3000 	ldrb.w	r3, [sl]
 800ec8a:	2b2a      	cmp	r3, #42	@ 0x2a
 800ec8c:	d015      	beq.n	800ecba <_svfiprintf_r+0xfa>
 800ec8e:	9a07      	ldr	r2, [sp, #28]
 800ec90:	4654      	mov	r4, sl
 800ec92:	2000      	movs	r0, #0
 800ec94:	f04f 0c0a 	mov.w	ip, #10
 800ec98:	4621      	mov	r1, r4
 800ec9a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ec9e:	3b30      	subs	r3, #48	@ 0x30
 800eca0:	2b09      	cmp	r3, #9
 800eca2:	d94b      	bls.n	800ed3c <_svfiprintf_r+0x17c>
 800eca4:	b1b0      	cbz	r0, 800ecd4 <_svfiprintf_r+0x114>
 800eca6:	9207      	str	r2, [sp, #28]
 800eca8:	e014      	b.n	800ecd4 <_svfiprintf_r+0x114>
 800ecaa:	eba0 0308 	sub.w	r3, r0, r8
 800ecae:	fa09 f303 	lsl.w	r3, r9, r3
 800ecb2:	4313      	orrs	r3, r2
 800ecb4:	9304      	str	r3, [sp, #16]
 800ecb6:	46a2      	mov	sl, r4
 800ecb8:	e7d2      	b.n	800ec60 <_svfiprintf_r+0xa0>
 800ecba:	9b03      	ldr	r3, [sp, #12]
 800ecbc:	1d19      	adds	r1, r3, #4
 800ecbe:	681b      	ldr	r3, [r3, #0]
 800ecc0:	9103      	str	r1, [sp, #12]
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	bfbb      	ittet	lt
 800ecc6:	425b      	neglt	r3, r3
 800ecc8:	f042 0202 	orrlt.w	r2, r2, #2
 800eccc:	9307      	strge	r3, [sp, #28]
 800ecce:	9307      	strlt	r3, [sp, #28]
 800ecd0:	bfb8      	it	lt
 800ecd2:	9204      	strlt	r2, [sp, #16]
 800ecd4:	7823      	ldrb	r3, [r4, #0]
 800ecd6:	2b2e      	cmp	r3, #46	@ 0x2e
 800ecd8:	d10a      	bne.n	800ecf0 <_svfiprintf_r+0x130>
 800ecda:	7863      	ldrb	r3, [r4, #1]
 800ecdc:	2b2a      	cmp	r3, #42	@ 0x2a
 800ecde:	d132      	bne.n	800ed46 <_svfiprintf_r+0x186>
 800ece0:	9b03      	ldr	r3, [sp, #12]
 800ece2:	1d1a      	adds	r2, r3, #4
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	9203      	str	r2, [sp, #12]
 800ece8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ecec:	3402      	adds	r4, #2
 800ecee:	9305      	str	r3, [sp, #20]
 800ecf0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800edb4 <_svfiprintf_r+0x1f4>
 800ecf4:	7821      	ldrb	r1, [r4, #0]
 800ecf6:	2203      	movs	r2, #3
 800ecf8:	4650      	mov	r0, sl
 800ecfa:	f7f1 fa49 	bl	8000190 <memchr>
 800ecfe:	b138      	cbz	r0, 800ed10 <_svfiprintf_r+0x150>
 800ed00:	9b04      	ldr	r3, [sp, #16]
 800ed02:	eba0 000a 	sub.w	r0, r0, sl
 800ed06:	2240      	movs	r2, #64	@ 0x40
 800ed08:	4082      	lsls	r2, r0
 800ed0a:	4313      	orrs	r3, r2
 800ed0c:	3401      	adds	r4, #1
 800ed0e:	9304      	str	r3, [sp, #16]
 800ed10:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ed14:	4824      	ldr	r0, [pc, #144]	@ (800eda8 <_svfiprintf_r+0x1e8>)
 800ed16:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ed1a:	2206      	movs	r2, #6
 800ed1c:	f7f1 fa38 	bl	8000190 <memchr>
 800ed20:	2800      	cmp	r0, #0
 800ed22:	d036      	beq.n	800ed92 <_svfiprintf_r+0x1d2>
 800ed24:	4b21      	ldr	r3, [pc, #132]	@ (800edac <_svfiprintf_r+0x1ec>)
 800ed26:	bb1b      	cbnz	r3, 800ed70 <_svfiprintf_r+0x1b0>
 800ed28:	9b03      	ldr	r3, [sp, #12]
 800ed2a:	3307      	adds	r3, #7
 800ed2c:	f023 0307 	bic.w	r3, r3, #7
 800ed30:	3308      	adds	r3, #8
 800ed32:	9303      	str	r3, [sp, #12]
 800ed34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ed36:	4433      	add	r3, r6
 800ed38:	9309      	str	r3, [sp, #36]	@ 0x24
 800ed3a:	e76a      	b.n	800ec12 <_svfiprintf_r+0x52>
 800ed3c:	fb0c 3202 	mla	r2, ip, r2, r3
 800ed40:	460c      	mov	r4, r1
 800ed42:	2001      	movs	r0, #1
 800ed44:	e7a8      	b.n	800ec98 <_svfiprintf_r+0xd8>
 800ed46:	2300      	movs	r3, #0
 800ed48:	3401      	adds	r4, #1
 800ed4a:	9305      	str	r3, [sp, #20]
 800ed4c:	4619      	mov	r1, r3
 800ed4e:	f04f 0c0a 	mov.w	ip, #10
 800ed52:	4620      	mov	r0, r4
 800ed54:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ed58:	3a30      	subs	r2, #48	@ 0x30
 800ed5a:	2a09      	cmp	r2, #9
 800ed5c:	d903      	bls.n	800ed66 <_svfiprintf_r+0x1a6>
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	d0c6      	beq.n	800ecf0 <_svfiprintf_r+0x130>
 800ed62:	9105      	str	r1, [sp, #20]
 800ed64:	e7c4      	b.n	800ecf0 <_svfiprintf_r+0x130>
 800ed66:	fb0c 2101 	mla	r1, ip, r1, r2
 800ed6a:	4604      	mov	r4, r0
 800ed6c:	2301      	movs	r3, #1
 800ed6e:	e7f0      	b.n	800ed52 <_svfiprintf_r+0x192>
 800ed70:	ab03      	add	r3, sp, #12
 800ed72:	9300      	str	r3, [sp, #0]
 800ed74:	462a      	mov	r2, r5
 800ed76:	4b0e      	ldr	r3, [pc, #56]	@ (800edb0 <_svfiprintf_r+0x1f0>)
 800ed78:	a904      	add	r1, sp, #16
 800ed7a:	4638      	mov	r0, r7
 800ed7c:	f3af 8000 	nop.w
 800ed80:	1c42      	adds	r2, r0, #1
 800ed82:	4606      	mov	r6, r0
 800ed84:	d1d6      	bne.n	800ed34 <_svfiprintf_r+0x174>
 800ed86:	89ab      	ldrh	r3, [r5, #12]
 800ed88:	065b      	lsls	r3, r3, #25
 800ed8a:	f53f af2d 	bmi.w	800ebe8 <_svfiprintf_r+0x28>
 800ed8e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ed90:	e72c      	b.n	800ebec <_svfiprintf_r+0x2c>
 800ed92:	ab03      	add	r3, sp, #12
 800ed94:	9300      	str	r3, [sp, #0]
 800ed96:	462a      	mov	r2, r5
 800ed98:	4b05      	ldr	r3, [pc, #20]	@ (800edb0 <_svfiprintf_r+0x1f0>)
 800ed9a:	a904      	add	r1, sp, #16
 800ed9c:	4638      	mov	r0, r7
 800ed9e:	f000 f9bb 	bl	800f118 <_printf_i>
 800eda2:	e7ed      	b.n	800ed80 <_svfiprintf_r+0x1c0>
 800eda4:	08010dbe 	.word	0x08010dbe
 800eda8:	08010dc8 	.word	0x08010dc8
 800edac:	00000000 	.word	0x00000000
 800edb0:	0800eb09 	.word	0x0800eb09
 800edb4:	08010dc4 	.word	0x08010dc4

0800edb8 <__sfputc_r>:
 800edb8:	6893      	ldr	r3, [r2, #8]
 800edba:	3b01      	subs	r3, #1
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	b410      	push	{r4}
 800edc0:	6093      	str	r3, [r2, #8]
 800edc2:	da08      	bge.n	800edd6 <__sfputc_r+0x1e>
 800edc4:	6994      	ldr	r4, [r2, #24]
 800edc6:	42a3      	cmp	r3, r4
 800edc8:	db01      	blt.n	800edce <__sfputc_r+0x16>
 800edca:	290a      	cmp	r1, #10
 800edcc:	d103      	bne.n	800edd6 <__sfputc_r+0x1e>
 800edce:	f85d 4b04 	ldr.w	r4, [sp], #4
 800edd2:	f7ff bc88 	b.w	800e6e6 <__swbuf_r>
 800edd6:	6813      	ldr	r3, [r2, #0]
 800edd8:	1c58      	adds	r0, r3, #1
 800edda:	6010      	str	r0, [r2, #0]
 800eddc:	7019      	strb	r1, [r3, #0]
 800edde:	4608      	mov	r0, r1
 800ede0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ede4:	4770      	bx	lr

0800ede6 <__sfputs_r>:
 800ede6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ede8:	4606      	mov	r6, r0
 800edea:	460f      	mov	r7, r1
 800edec:	4614      	mov	r4, r2
 800edee:	18d5      	adds	r5, r2, r3
 800edf0:	42ac      	cmp	r4, r5
 800edf2:	d101      	bne.n	800edf8 <__sfputs_r+0x12>
 800edf4:	2000      	movs	r0, #0
 800edf6:	e007      	b.n	800ee08 <__sfputs_r+0x22>
 800edf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800edfc:	463a      	mov	r2, r7
 800edfe:	4630      	mov	r0, r6
 800ee00:	f7ff ffda 	bl	800edb8 <__sfputc_r>
 800ee04:	1c43      	adds	r3, r0, #1
 800ee06:	d1f3      	bne.n	800edf0 <__sfputs_r+0xa>
 800ee08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ee0c <_vfiprintf_r>:
 800ee0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee10:	460d      	mov	r5, r1
 800ee12:	b09d      	sub	sp, #116	@ 0x74
 800ee14:	4614      	mov	r4, r2
 800ee16:	4698      	mov	r8, r3
 800ee18:	4606      	mov	r6, r0
 800ee1a:	b118      	cbz	r0, 800ee24 <_vfiprintf_r+0x18>
 800ee1c:	6a03      	ldr	r3, [r0, #32]
 800ee1e:	b90b      	cbnz	r3, 800ee24 <_vfiprintf_r+0x18>
 800ee20:	f7ff fb50 	bl	800e4c4 <__sinit>
 800ee24:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ee26:	07d9      	lsls	r1, r3, #31
 800ee28:	d405      	bmi.n	800ee36 <_vfiprintf_r+0x2a>
 800ee2a:	89ab      	ldrh	r3, [r5, #12]
 800ee2c:	059a      	lsls	r2, r3, #22
 800ee2e:	d402      	bmi.n	800ee36 <_vfiprintf_r+0x2a>
 800ee30:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ee32:	f7ff fd60 	bl	800e8f6 <__retarget_lock_acquire_recursive>
 800ee36:	89ab      	ldrh	r3, [r5, #12]
 800ee38:	071b      	lsls	r3, r3, #28
 800ee3a:	d501      	bpl.n	800ee40 <_vfiprintf_r+0x34>
 800ee3c:	692b      	ldr	r3, [r5, #16]
 800ee3e:	b99b      	cbnz	r3, 800ee68 <_vfiprintf_r+0x5c>
 800ee40:	4629      	mov	r1, r5
 800ee42:	4630      	mov	r0, r6
 800ee44:	f7ff fc8e 	bl	800e764 <__swsetup_r>
 800ee48:	b170      	cbz	r0, 800ee68 <_vfiprintf_r+0x5c>
 800ee4a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ee4c:	07dc      	lsls	r4, r3, #31
 800ee4e:	d504      	bpl.n	800ee5a <_vfiprintf_r+0x4e>
 800ee50:	f04f 30ff 	mov.w	r0, #4294967295
 800ee54:	b01d      	add	sp, #116	@ 0x74
 800ee56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee5a:	89ab      	ldrh	r3, [r5, #12]
 800ee5c:	0598      	lsls	r0, r3, #22
 800ee5e:	d4f7      	bmi.n	800ee50 <_vfiprintf_r+0x44>
 800ee60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ee62:	f7ff fd49 	bl	800e8f8 <__retarget_lock_release_recursive>
 800ee66:	e7f3      	b.n	800ee50 <_vfiprintf_r+0x44>
 800ee68:	2300      	movs	r3, #0
 800ee6a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ee6c:	2320      	movs	r3, #32
 800ee6e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ee72:	f8cd 800c 	str.w	r8, [sp, #12]
 800ee76:	2330      	movs	r3, #48	@ 0x30
 800ee78:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f028 <_vfiprintf_r+0x21c>
 800ee7c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ee80:	f04f 0901 	mov.w	r9, #1
 800ee84:	4623      	mov	r3, r4
 800ee86:	469a      	mov	sl, r3
 800ee88:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ee8c:	b10a      	cbz	r2, 800ee92 <_vfiprintf_r+0x86>
 800ee8e:	2a25      	cmp	r2, #37	@ 0x25
 800ee90:	d1f9      	bne.n	800ee86 <_vfiprintf_r+0x7a>
 800ee92:	ebba 0b04 	subs.w	fp, sl, r4
 800ee96:	d00b      	beq.n	800eeb0 <_vfiprintf_r+0xa4>
 800ee98:	465b      	mov	r3, fp
 800ee9a:	4622      	mov	r2, r4
 800ee9c:	4629      	mov	r1, r5
 800ee9e:	4630      	mov	r0, r6
 800eea0:	f7ff ffa1 	bl	800ede6 <__sfputs_r>
 800eea4:	3001      	adds	r0, #1
 800eea6:	f000 80a7 	beq.w	800eff8 <_vfiprintf_r+0x1ec>
 800eeaa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800eeac:	445a      	add	r2, fp
 800eeae:	9209      	str	r2, [sp, #36]	@ 0x24
 800eeb0:	f89a 3000 	ldrb.w	r3, [sl]
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	f000 809f 	beq.w	800eff8 <_vfiprintf_r+0x1ec>
 800eeba:	2300      	movs	r3, #0
 800eebc:	f04f 32ff 	mov.w	r2, #4294967295
 800eec0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800eec4:	f10a 0a01 	add.w	sl, sl, #1
 800eec8:	9304      	str	r3, [sp, #16]
 800eeca:	9307      	str	r3, [sp, #28]
 800eecc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800eed0:	931a      	str	r3, [sp, #104]	@ 0x68
 800eed2:	4654      	mov	r4, sl
 800eed4:	2205      	movs	r2, #5
 800eed6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eeda:	4853      	ldr	r0, [pc, #332]	@ (800f028 <_vfiprintf_r+0x21c>)
 800eedc:	f7f1 f958 	bl	8000190 <memchr>
 800eee0:	9a04      	ldr	r2, [sp, #16]
 800eee2:	b9d8      	cbnz	r0, 800ef1c <_vfiprintf_r+0x110>
 800eee4:	06d1      	lsls	r1, r2, #27
 800eee6:	bf44      	itt	mi
 800eee8:	2320      	movmi	r3, #32
 800eeea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800eeee:	0713      	lsls	r3, r2, #28
 800eef0:	bf44      	itt	mi
 800eef2:	232b      	movmi	r3, #43	@ 0x2b
 800eef4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800eef8:	f89a 3000 	ldrb.w	r3, [sl]
 800eefc:	2b2a      	cmp	r3, #42	@ 0x2a
 800eefe:	d015      	beq.n	800ef2c <_vfiprintf_r+0x120>
 800ef00:	9a07      	ldr	r2, [sp, #28]
 800ef02:	4654      	mov	r4, sl
 800ef04:	2000      	movs	r0, #0
 800ef06:	f04f 0c0a 	mov.w	ip, #10
 800ef0a:	4621      	mov	r1, r4
 800ef0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ef10:	3b30      	subs	r3, #48	@ 0x30
 800ef12:	2b09      	cmp	r3, #9
 800ef14:	d94b      	bls.n	800efae <_vfiprintf_r+0x1a2>
 800ef16:	b1b0      	cbz	r0, 800ef46 <_vfiprintf_r+0x13a>
 800ef18:	9207      	str	r2, [sp, #28]
 800ef1a:	e014      	b.n	800ef46 <_vfiprintf_r+0x13a>
 800ef1c:	eba0 0308 	sub.w	r3, r0, r8
 800ef20:	fa09 f303 	lsl.w	r3, r9, r3
 800ef24:	4313      	orrs	r3, r2
 800ef26:	9304      	str	r3, [sp, #16]
 800ef28:	46a2      	mov	sl, r4
 800ef2a:	e7d2      	b.n	800eed2 <_vfiprintf_r+0xc6>
 800ef2c:	9b03      	ldr	r3, [sp, #12]
 800ef2e:	1d19      	adds	r1, r3, #4
 800ef30:	681b      	ldr	r3, [r3, #0]
 800ef32:	9103      	str	r1, [sp, #12]
 800ef34:	2b00      	cmp	r3, #0
 800ef36:	bfbb      	ittet	lt
 800ef38:	425b      	neglt	r3, r3
 800ef3a:	f042 0202 	orrlt.w	r2, r2, #2
 800ef3e:	9307      	strge	r3, [sp, #28]
 800ef40:	9307      	strlt	r3, [sp, #28]
 800ef42:	bfb8      	it	lt
 800ef44:	9204      	strlt	r2, [sp, #16]
 800ef46:	7823      	ldrb	r3, [r4, #0]
 800ef48:	2b2e      	cmp	r3, #46	@ 0x2e
 800ef4a:	d10a      	bne.n	800ef62 <_vfiprintf_r+0x156>
 800ef4c:	7863      	ldrb	r3, [r4, #1]
 800ef4e:	2b2a      	cmp	r3, #42	@ 0x2a
 800ef50:	d132      	bne.n	800efb8 <_vfiprintf_r+0x1ac>
 800ef52:	9b03      	ldr	r3, [sp, #12]
 800ef54:	1d1a      	adds	r2, r3, #4
 800ef56:	681b      	ldr	r3, [r3, #0]
 800ef58:	9203      	str	r2, [sp, #12]
 800ef5a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ef5e:	3402      	adds	r4, #2
 800ef60:	9305      	str	r3, [sp, #20]
 800ef62:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f038 <_vfiprintf_r+0x22c>
 800ef66:	7821      	ldrb	r1, [r4, #0]
 800ef68:	2203      	movs	r2, #3
 800ef6a:	4650      	mov	r0, sl
 800ef6c:	f7f1 f910 	bl	8000190 <memchr>
 800ef70:	b138      	cbz	r0, 800ef82 <_vfiprintf_r+0x176>
 800ef72:	9b04      	ldr	r3, [sp, #16]
 800ef74:	eba0 000a 	sub.w	r0, r0, sl
 800ef78:	2240      	movs	r2, #64	@ 0x40
 800ef7a:	4082      	lsls	r2, r0
 800ef7c:	4313      	orrs	r3, r2
 800ef7e:	3401      	adds	r4, #1
 800ef80:	9304      	str	r3, [sp, #16]
 800ef82:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ef86:	4829      	ldr	r0, [pc, #164]	@ (800f02c <_vfiprintf_r+0x220>)
 800ef88:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ef8c:	2206      	movs	r2, #6
 800ef8e:	f7f1 f8ff 	bl	8000190 <memchr>
 800ef92:	2800      	cmp	r0, #0
 800ef94:	d03f      	beq.n	800f016 <_vfiprintf_r+0x20a>
 800ef96:	4b26      	ldr	r3, [pc, #152]	@ (800f030 <_vfiprintf_r+0x224>)
 800ef98:	bb1b      	cbnz	r3, 800efe2 <_vfiprintf_r+0x1d6>
 800ef9a:	9b03      	ldr	r3, [sp, #12]
 800ef9c:	3307      	adds	r3, #7
 800ef9e:	f023 0307 	bic.w	r3, r3, #7
 800efa2:	3308      	adds	r3, #8
 800efa4:	9303      	str	r3, [sp, #12]
 800efa6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800efa8:	443b      	add	r3, r7
 800efaa:	9309      	str	r3, [sp, #36]	@ 0x24
 800efac:	e76a      	b.n	800ee84 <_vfiprintf_r+0x78>
 800efae:	fb0c 3202 	mla	r2, ip, r2, r3
 800efb2:	460c      	mov	r4, r1
 800efb4:	2001      	movs	r0, #1
 800efb6:	e7a8      	b.n	800ef0a <_vfiprintf_r+0xfe>
 800efb8:	2300      	movs	r3, #0
 800efba:	3401      	adds	r4, #1
 800efbc:	9305      	str	r3, [sp, #20]
 800efbe:	4619      	mov	r1, r3
 800efc0:	f04f 0c0a 	mov.w	ip, #10
 800efc4:	4620      	mov	r0, r4
 800efc6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800efca:	3a30      	subs	r2, #48	@ 0x30
 800efcc:	2a09      	cmp	r2, #9
 800efce:	d903      	bls.n	800efd8 <_vfiprintf_r+0x1cc>
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	d0c6      	beq.n	800ef62 <_vfiprintf_r+0x156>
 800efd4:	9105      	str	r1, [sp, #20]
 800efd6:	e7c4      	b.n	800ef62 <_vfiprintf_r+0x156>
 800efd8:	fb0c 2101 	mla	r1, ip, r1, r2
 800efdc:	4604      	mov	r4, r0
 800efde:	2301      	movs	r3, #1
 800efe0:	e7f0      	b.n	800efc4 <_vfiprintf_r+0x1b8>
 800efe2:	ab03      	add	r3, sp, #12
 800efe4:	9300      	str	r3, [sp, #0]
 800efe6:	462a      	mov	r2, r5
 800efe8:	4b12      	ldr	r3, [pc, #72]	@ (800f034 <_vfiprintf_r+0x228>)
 800efea:	a904      	add	r1, sp, #16
 800efec:	4630      	mov	r0, r6
 800efee:	f3af 8000 	nop.w
 800eff2:	4607      	mov	r7, r0
 800eff4:	1c78      	adds	r0, r7, #1
 800eff6:	d1d6      	bne.n	800efa6 <_vfiprintf_r+0x19a>
 800eff8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800effa:	07d9      	lsls	r1, r3, #31
 800effc:	d405      	bmi.n	800f00a <_vfiprintf_r+0x1fe>
 800effe:	89ab      	ldrh	r3, [r5, #12]
 800f000:	059a      	lsls	r2, r3, #22
 800f002:	d402      	bmi.n	800f00a <_vfiprintf_r+0x1fe>
 800f004:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f006:	f7ff fc77 	bl	800e8f8 <__retarget_lock_release_recursive>
 800f00a:	89ab      	ldrh	r3, [r5, #12]
 800f00c:	065b      	lsls	r3, r3, #25
 800f00e:	f53f af1f 	bmi.w	800ee50 <_vfiprintf_r+0x44>
 800f012:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f014:	e71e      	b.n	800ee54 <_vfiprintf_r+0x48>
 800f016:	ab03      	add	r3, sp, #12
 800f018:	9300      	str	r3, [sp, #0]
 800f01a:	462a      	mov	r2, r5
 800f01c:	4b05      	ldr	r3, [pc, #20]	@ (800f034 <_vfiprintf_r+0x228>)
 800f01e:	a904      	add	r1, sp, #16
 800f020:	4630      	mov	r0, r6
 800f022:	f000 f879 	bl	800f118 <_printf_i>
 800f026:	e7e4      	b.n	800eff2 <_vfiprintf_r+0x1e6>
 800f028:	08010dbe 	.word	0x08010dbe
 800f02c:	08010dc8 	.word	0x08010dc8
 800f030:	00000000 	.word	0x00000000
 800f034:	0800ede7 	.word	0x0800ede7
 800f038:	08010dc4 	.word	0x08010dc4

0800f03c <_printf_common>:
 800f03c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f040:	4616      	mov	r6, r2
 800f042:	4698      	mov	r8, r3
 800f044:	688a      	ldr	r2, [r1, #8]
 800f046:	690b      	ldr	r3, [r1, #16]
 800f048:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f04c:	4293      	cmp	r3, r2
 800f04e:	bfb8      	it	lt
 800f050:	4613      	movlt	r3, r2
 800f052:	6033      	str	r3, [r6, #0]
 800f054:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800f058:	4607      	mov	r7, r0
 800f05a:	460c      	mov	r4, r1
 800f05c:	b10a      	cbz	r2, 800f062 <_printf_common+0x26>
 800f05e:	3301      	adds	r3, #1
 800f060:	6033      	str	r3, [r6, #0]
 800f062:	6823      	ldr	r3, [r4, #0]
 800f064:	0699      	lsls	r1, r3, #26
 800f066:	bf42      	ittt	mi
 800f068:	6833      	ldrmi	r3, [r6, #0]
 800f06a:	3302      	addmi	r3, #2
 800f06c:	6033      	strmi	r3, [r6, #0]
 800f06e:	6825      	ldr	r5, [r4, #0]
 800f070:	f015 0506 	ands.w	r5, r5, #6
 800f074:	d106      	bne.n	800f084 <_printf_common+0x48>
 800f076:	f104 0a19 	add.w	sl, r4, #25
 800f07a:	68e3      	ldr	r3, [r4, #12]
 800f07c:	6832      	ldr	r2, [r6, #0]
 800f07e:	1a9b      	subs	r3, r3, r2
 800f080:	42ab      	cmp	r3, r5
 800f082:	dc26      	bgt.n	800f0d2 <_printf_common+0x96>
 800f084:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800f088:	6822      	ldr	r2, [r4, #0]
 800f08a:	3b00      	subs	r3, #0
 800f08c:	bf18      	it	ne
 800f08e:	2301      	movne	r3, #1
 800f090:	0692      	lsls	r2, r2, #26
 800f092:	d42b      	bmi.n	800f0ec <_printf_common+0xb0>
 800f094:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800f098:	4641      	mov	r1, r8
 800f09a:	4638      	mov	r0, r7
 800f09c:	47c8      	blx	r9
 800f09e:	3001      	adds	r0, #1
 800f0a0:	d01e      	beq.n	800f0e0 <_printf_common+0xa4>
 800f0a2:	6823      	ldr	r3, [r4, #0]
 800f0a4:	6922      	ldr	r2, [r4, #16]
 800f0a6:	f003 0306 	and.w	r3, r3, #6
 800f0aa:	2b04      	cmp	r3, #4
 800f0ac:	bf02      	ittt	eq
 800f0ae:	68e5      	ldreq	r5, [r4, #12]
 800f0b0:	6833      	ldreq	r3, [r6, #0]
 800f0b2:	1aed      	subeq	r5, r5, r3
 800f0b4:	68a3      	ldr	r3, [r4, #8]
 800f0b6:	bf0c      	ite	eq
 800f0b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f0bc:	2500      	movne	r5, #0
 800f0be:	4293      	cmp	r3, r2
 800f0c0:	bfc4      	itt	gt
 800f0c2:	1a9b      	subgt	r3, r3, r2
 800f0c4:	18ed      	addgt	r5, r5, r3
 800f0c6:	2600      	movs	r6, #0
 800f0c8:	341a      	adds	r4, #26
 800f0ca:	42b5      	cmp	r5, r6
 800f0cc:	d11a      	bne.n	800f104 <_printf_common+0xc8>
 800f0ce:	2000      	movs	r0, #0
 800f0d0:	e008      	b.n	800f0e4 <_printf_common+0xa8>
 800f0d2:	2301      	movs	r3, #1
 800f0d4:	4652      	mov	r2, sl
 800f0d6:	4641      	mov	r1, r8
 800f0d8:	4638      	mov	r0, r7
 800f0da:	47c8      	blx	r9
 800f0dc:	3001      	adds	r0, #1
 800f0de:	d103      	bne.n	800f0e8 <_printf_common+0xac>
 800f0e0:	f04f 30ff 	mov.w	r0, #4294967295
 800f0e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f0e8:	3501      	adds	r5, #1
 800f0ea:	e7c6      	b.n	800f07a <_printf_common+0x3e>
 800f0ec:	18e1      	adds	r1, r4, r3
 800f0ee:	1c5a      	adds	r2, r3, #1
 800f0f0:	2030      	movs	r0, #48	@ 0x30
 800f0f2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800f0f6:	4422      	add	r2, r4
 800f0f8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800f0fc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800f100:	3302      	adds	r3, #2
 800f102:	e7c7      	b.n	800f094 <_printf_common+0x58>
 800f104:	2301      	movs	r3, #1
 800f106:	4622      	mov	r2, r4
 800f108:	4641      	mov	r1, r8
 800f10a:	4638      	mov	r0, r7
 800f10c:	47c8      	blx	r9
 800f10e:	3001      	adds	r0, #1
 800f110:	d0e6      	beq.n	800f0e0 <_printf_common+0xa4>
 800f112:	3601      	adds	r6, #1
 800f114:	e7d9      	b.n	800f0ca <_printf_common+0x8e>
	...

0800f118 <_printf_i>:
 800f118:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f11c:	7e0f      	ldrb	r7, [r1, #24]
 800f11e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f120:	2f78      	cmp	r7, #120	@ 0x78
 800f122:	4691      	mov	r9, r2
 800f124:	4680      	mov	r8, r0
 800f126:	460c      	mov	r4, r1
 800f128:	469a      	mov	sl, r3
 800f12a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800f12e:	d807      	bhi.n	800f140 <_printf_i+0x28>
 800f130:	2f62      	cmp	r7, #98	@ 0x62
 800f132:	d80a      	bhi.n	800f14a <_printf_i+0x32>
 800f134:	2f00      	cmp	r7, #0
 800f136:	f000 80d2 	beq.w	800f2de <_printf_i+0x1c6>
 800f13a:	2f58      	cmp	r7, #88	@ 0x58
 800f13c:	f000 80b9 	beq.w	800f2b2 <_printf_i+0x19a>
 800f140:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f144:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800f148:	e03a      	b.n	800f1c0 <_printf_i+0xa8>
 800f14a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800f14e:	2b15      	cmp	r3, #21
 800f150:	d8f6      	bhi.n	800f140 <_printf_i+0x28>
 800f152:	a101      	add	r1, pc, #4	@ (adr r1, 800f158 <_printf_i+0x40>)
 800f154:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f158:	0800f1b1 	.word	0x0800f1b1
 800f15c:	0800f1c5 	.word	0x0800f1c5
 800f160:	0800f141 	.word	0x0800f141
 800f164:	0800f141 	.word	0x0800f141
 800f168:	0800f141 	.word	0x0800f141
 800f16c:	0800f141 	.word	0x0800f141
 800f170:	0800f1c5 	.word	0x0800f1c5
 800f174:	0800f141 	.word	0x0800f141
 800f178:	0800f141 	.word	0x0800f141
 800f17c:	0800f141 	.word	0x0800f141
 800f180:	0800f141 	.word	0x0800f141
 800f184:	0800f2c5 	.word	0x0800f2c5
 800f188:	0800f1ef 	.word	0x0800f1ef
 800f18c:	0800f27f 	.word	0x0800f27f
 800f190:	0800f141 	.word	0x0800f141
 800f194:	0800f141 	.word	0x0800f141
 800f198:	0800f2e7 	.word	0x0800f2e7
 800f19c:	0800f141 	.word	0x0800f141
 800f1a0:	0800f1ef 	.word	0x0800f1ef
 800f1a4:	0800f141 	.word	0x0800f141
 800f1a8:	0800f141 	.word	0x0800f141
 800f1ac:	0800f287 	.word	0x0800f287
 800f1b0:	6833      	ldr	r3, [r6, #0]
 800f1b2:	1d1a      	adds	r2, r3, #4
 800f1b4:	681b      	ldr	r3, [r3, #0]
 800f1b6:	6032      	str	r2, [r6, #0]
 800f1b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f1bc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800f1c0:	2301      	movs	r3, #1
 800f1c2:	e09d      	b.n	800f300 <_printf_i+0x1e8>
 800f1c4:	6833      	ldr	r3, [r6, #0]
 800f1c6:	6820      	ldr	r0, [r4, #0]
 800f1c8:	1d19      	adds	r1, r3, #4
 800f1ca:	6031      	str	r1, [r6, #0]
 800f1cc:	0606      	lsls	r6, r0, #24
 800f1ce:	d501      	bpl.n	800f1d4 <_printf_i+0xbc>
 800f1d0:	681d      	ldr	r5, [r3, #0]
 800f1d2:	e003      	b.n	800f1dc <_printf_i+0xc4>
 800f1d4:	0645      	lsls	r5, r0, #25
 800f1d6:	d5fb      	bpl.n	800f1d0 <_printf_i+0xb8>
 800f1d8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f1dc:	2d00      	cmp	r5, #0
 800f1de:	da03      	bge.n	800f1e8 <_printf_i+0xd0>
 800f1e0:	232d      	movs	r3, #45	@ 0x2d
 800f1e2:	426d      	negs	r5, r5
 800f1e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f1e8:	4859      	ldr	r0, [pc, #356]	@ (800f350 <_printf_i+0x238>)
 800f1ea:	230a      	movs	r3, #10
 800f1ec:	e011      	b.n	800f212 <_printf_i+0xfa>
 800f1ee:	6821      	ldr	r1, [r4, #0]
 800f1f0:	6833      	ldr	r3, [r6, #0]
 800f1f2:	0608      	lsls	r0, r1, #24
 800f1f4:	f853 5b04 	ldr.w	r5, [r3], #4
 800f1f8:	d402      	bmi.n	800f200 <_printf_i+0xe8>
 800f1fa:	0649      	lsls	r1, r1, #25
 800f1fc:	bf48      	it	mi
 800f1fe:	b2ad      	uxthmi	r5, r5
 800f200:	2f6f      	cmp	r7, #111	@ 0x6f
 800f202:	4853      	ldr	r0, [pc, #332]	@ (800f350 <_printf_i+0x238>)
 800f204:	6033      	str	r3, [r6, #0]
 800f206:	bf14      	ite	ne
 800f208:	230a      	movne	r3, #10
 800f20a:	2308      	moveq	r3, #8
 800f20c:	2100      	movs	r1, #0
 800f20e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f212:	6866      	ldr	r6, [r4, #4]
 800f214:	60a6      	str	r6, [r4, #8]
 800f216:	2e00      	cmp	r6, #0
 800f218:	bfa2      	ittt	ge
 800f21a:	6821      	ldrge	r1, [r4, #0]
 800f21c:	f021 0104 	bicge.w	r1, r1, #4
 800f220:	6021      	strge	r1, [r4, #0]
 800f222:	b90d      	cbnz	r5, 800f228 <_printf_i+0x110>
 800f224:	2e00      	cmp	r6, #0
 800f226:	d04b      	beq.n	800f2c0 <_printf_i+0x1a8>
 800f228:	4616      	mov	r6, r2
 800f22a:	fbb5 f1f3 	udiv	r1, r5, r3
 800f22e:	fb03 5711 	mls	r7, r3, r1, r5
 800f232:	5dc7      	ldrb	r7, [r0, r7]
 800f234:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f238:	462f      	mov	r7, r5
 800f23a:	42bb      	cmp	r3, r7
 800f23c:	460d      	mov	r5, r1
 800f23e:	d9f4      	bls.n	800f22a <_printf_i+0x112>
 800f240:	2b08      	cmp	r3, #8
 800f242:	d10b      	bne.n	800f25c <_printf_i+0x144>
 800f244:	6823      	ldr	r3, [r4, #0]
 800f246:	07df      	lsls	r7, r3, #31
 800f248:	d508      	bpl.n	800f25c <_printf_i+0x144>
 800f24a:	6923      	ldr	r3, [r4, #16]
 800f24c:	6861      	ldr	r1, [r4, #4]
 800f24e:	4299      	cmp	r1, r3
 800f250:	bfde      	ittt	le
 800f252:	2330      	movle	r3, #48	@ 0x30
 800f254:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f258:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f25c:	1b92      	subs	r2, r2, r6
 800f25e:	6122      	str	r2, [r4, #16]
 800f260:	f8cd a000 	str.w	sl, [sp]
 800f264:	464b      	mov	r3, r9
 800f266:	aa03      	add	r2, sp, #12
 800f268:	4621      	mov	r1, r4
 800f26a:	4640      	mov	r0, r8
 800f26c:	f7ff fee6 	bl	800f03c <_printf_common>
 800f270:	3001      	adds	r0, #1
 800f272:	d14a      	bne.n	800f30a <_printf_i+0x1f2>
 800f274:	f04f 30ff 	mov.w	r0, #4294967295
 800f278:	b004      	add	sp, #16
 800f27a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f27e:	6823      	ldr	r3, [r4, #0]
 800f280:	f043 0320 	orr.w	r3, r3, #32
 800f284:	6023      	str	r3, [r4, #0]
 800f286:	4833      	ldr	r0, [pc, #204]	@ (800f354 <_printf_i+0x23c>)
 800f288:	2778      	movs	r7, #120	@ 0x78
 800f28a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f28e:	6823      	ldr	r3, [r4, #0]
 800f290:	6831      	ldr	r1, [r6, #0]
 800f292:	061f      	lsls	r7, r3, #24
 800f294:	f851 5b04 	ldr.w	r5, [r1], #4
 800f298:	d402      	bmi.n	800f2a0 <_printf_i+0x188>
 800f29a:	065f      	lsls	r7, r3, #25
 800f29c:	bf48      	it	mi
 800f29e:	b2ad      	uxthmi	r5, r5
 800f2a0:	6031      	str	r1, [r6, #0]
 800f2a2:	07d9      	lsls	r1, r3, #31
 800f2a4:	bf44      	itt	mi
 800f2a6:	f043 0320 	orrmi.w	r3, r3, #32
 800f2aa:	6023      	strmi	r3, [r4, #0]
 800f2ac:	b11d      	cbz	r5, 800f2b6 <_printf_i+0x19e>
 800f2ae:	2310      	movs	r3, #16
 800f2b0:	e7ac      	b.n	800f20c <_printf_i+0xf4>
 800f2b2:	4827      	ldr	r0, [pc, #156]	@ (800f350 <_printf_i+0x238>)
 800f2b4:	e7e9      	b.n	800f28a <_printf_i+0x172>
 800f2b6:	6823      	ldr	r3, [r4, #0]
 800f2b8:	f023 0320 	bic.w	r3, r3, #32
 800f2bc:	6023      	str	r3, [r4, #0]
 800f2be:	e7f6      	b.n	800f2ae <_printf_i+0x196>
 800f2c0:	4616      	mov	r6, r2
 800f2c2:	e7bd      	b.n	800f240 <_printf_i+0x128>
 800f2c4:	6833      	ldr	r3, [r6, #0]
 800f2c6:	6825      	ldr	r5, [r4, #0]
 800f2c8:	6961      	ldr	r1, [r4, #20]
 800f2ca:	1d18      	adds	r0, r3, #4
 800f2cc:	6030      	str	r0, [r6, #0]
 800f2ce:	062e      	lsls	r6, r5, #24
 800f2d0:	681b      	ldr	r3, [r3, #0]
 800f2d2:	d501      	bpl.n	800f2d8 <_printf_i+0x1c0>
 800f2d4:	6019      	str	r1, [r3, #0]
 800f2d6:	e002      	b.n	800f2de <_printf_i+0x1c6>
 800f2d8:	0668      	lsls	r0, r5, #25
 800f2da:	d5fb      	bpl.n	800f2d4 <_printf_i+0x1bc>
 800f2dc:	8019      	strh	r1, [r3, #0]
 800f2de:	2300      	movs	r3, #0
 800f2e0:	6123      	str	r3, [r4, #16]
 800f2e2:	4616      	mov	r6, r2
 800f2e4:	e7bc      	b.n	800f260 <_printf_i+0x148>
 800f2e6:	6833      	ldr	r3, [r6, #0]
 800f2e8:	1d1a      	adds	r2, r3, #4
 800f2ea:	6032      	str	r2, [r6, #0]
 800f2ec:	681e      	ldr	r6, [r3, #0]
 800f2ee:	6862      	ldr	r2, [r4, #4]
 800f2f0:	2100      	movs	r1, #0
 800f2f2:	4630      	mov	r0, r6
 800f2f4:	f7f0 ff4c 	bl	8000190 <memchr>
 800f2f8:	b108      	cbz	r0, 800f2fe <_printf_i+0x1e6>
 800f2fa:	1b80      	subs	r0, r0, r6
 800f2fc:	6060      	str	r0, [r4, #4]
 800f2fe:	6863      	ldr	r3, [r4, #4]
 800f300:	6123      	str	r3, [r4, #16]
 800f302:	2300      	movs	r3, #0
 800f304:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f308:	e7aa      	b.n	800f260 <_printf_i+0x148>
 800f30a:	6923      	ldr	r3, [r4, #16]
 800f30c:	4632      	mov	r2, r6
 800f30e:	4649      	mov	r1, r9
 800f310:	4640      	mov	r0, r8
 800f312:	47d0      	blx	sl
 800f314:	3001      	adds	r0, #1
 800f316:	d0ad      	beq.n	800f274 <_printf_i+0x15c>
 800f318:	6823      	ldr	r3, [r4, #0]
 800f31a:	079b      	lsls	r3, r3, #30
 800f31c:	d413      	bmi.n	800f346 <_printf_i+0x22e>
 800f31e:	68e0      	ldr	r0, [r4, #12]
 800f320:	9b03      	ldr	r3, [sp, #12]
 800f322:	4298      	cmp	r0, r3
 800f324:	bfb8      	it	lt
 800f326:	4618      	movlt	r0, r3
 800f328:	e7a6      	b.n	800f278 <_printf_i+0x160>
 800f32a:	2301      	movs	r3, #1
 800f32c:	4632      	mov	r2, r6
 800f32e:	4649      	mov	r1, r9
 800f330:	4640      	mov	r0, r8
 800f332:	47d0      	blx	sl
 800f334:	3001      	adds	r0, #1
 800f336:	d09d      	beq.n	800f274 <_printf_i+0x15c>
 800f338:	3501      	adds	r5, #1
 800f33a:	68e3      	ldr	r3, [r4, #12]
 800f33c:	9903      	ldr	r1, [sp, #12]
 800f33e:	1a5b      	subs	r3, r3, r1
 800f340:	42ab      	cmp	r3, r5
 800f342:	dcf2      	bgt.n	800f32a <_printf_i+0x212>
 800f344:	e7eb      	b.n	800f31e <_printf_i+0x206>
 800f346:	2500      	movs	r5, #0
 800f348:	f104 0619 	add.w	r6, r4, #25
 800f34c:	e7f5      	b.n	800f33a <_printf_i+0x222>
 800f34e:	bf00      	nop
 800f350:	08010dcf 	.word	0x08010dcf
 800f354:	08010de0 	.word	0x08010de0

0800f358 <__sflush_r>:
 800f358:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f35c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f360:	0716      	lsls	r6, r2, #28
 800f362:	4605      	mov	r5, r0
 800f364:	460c      	mov	r4, r1
 800f366:	d454      	bmi.n	800f412 <__sflush_r+0xba>
 800f368:	684b      	ldr	r3, [r1, #4]
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	dc02      	bgt.n	800f374 <__sflush_r+0x1c>
 800f36e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f370:	2b00      	cmp	r3, #0
 800f372:	dd48      	ble.n	800f406 <__sflush_r+0xae>
 800f374:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f376:	2e00      	cmp	r6, #0
 800f378:	d045      	beq.n	800f406 <__sflush_r+0xae>
 800f37a:	2300      	movs	r3, #0
 800f37c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f380:	682f      	ldr	r7, [r5, #0]
 800f382:	6a21      	ldr	r1, [r4, #32]
 800f384:	602b      	str	r3, [r5, #0]
 800f386:	d030      	beq.n	800f3ea <__sflush_r+0x92>
 800f388:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f38a:	89a3      	ldrh	r3, [r4, #12]
 800f38c:	0759      	lsls	r1, r3, #29
 800f38e:	d505      	bpl.n	800f39c <__sflush_r+0x44>
 800f390:	6863      	ldr	r3, [r4, #4]
 800f392:	1ad2      	subs	r2, r2, r3
 800f394:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f396:	b10b      	cbz	r3, 800f39c <__sflush_r+0x44>
 800f398:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f39a:	1ad2      	subs	r2, r2, r3
 800f39c:	2300      	movs	r3, #0
 800f39e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f3a0:	6a21      	ldr	r1, [r4, #32]
 800f3a2:	4628      	mov	r0, r5
 800f3a4:	47b0      	blx	r6
 800f3a6:	1c43      	adds	r3, r0, #1
 800f3a8:	89a3      	ldrh	r3, [r4, #12]
 800f3aa:	d106      	bne.n	800f3ba <__sflush_r+0x62>
 800f3ac:	6829      	ldr	r1, [r5, #0]
 800f3ae:	291d      	cmp	r1, #29
 800f3b0:	d82b      	bhi.n	800f40a <__sflush_r+0xb2>
 800f3b2:	4a2a      	ldr	r2, [pc, #168]	@ (800f45c <__sflush_r+0x104>)
 800f3b4:	410a      	asrs	r2, r1
 800f3b6:	07d6      	lsls	r6, r2, #31
 800f3b8:	d427      	bmi.n	800f40a <__sflush_r+0xb2>
 800f3ba:	2200      	movs	r2, #0
 800f3bc:	6062      	str	r2, [r4, #4]
 800f3be:	04d9      	lsls	r1, r3, #19
 800f3c0:	6922      	ldr	r2, [r4, #16]
 800f3c2:	6022      	str	r2, [r4, #0]
 800f3c4:	d504      	bpl.n	800f3d0 <__sflush_r+0x78>
 800f3c6:	1c42      	adds	r2, r0, #1
 800f3c8:	d101      	bne.n	800f3ce <__sflush_r+0x76>
 800f3ca:	682b      	ldr	r3, [r5, #0]
 800f3cc:	b903      	cbnz	r3, 800f3d0 <__sflush_r+0x78>
 800f3ce:	6560      	str	r0, [r4, #84]	@ 0x54
 800f3d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f3d2:	602f      	str	r7, [r5, #0]
 800f3d4:	b1b9      	cbz	r1, 800f406 <__sflush_r+0xae>
 800f3d6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f3da:	4299      	cmp	r1, r3
 800f3dc:	d002      	beq.n	800f3e4 <__sflush_r+0x8c>
 800f3de:	4628      	mov	r0, r5
 800f3e0:	f7ff fa9a 	bl	800e918 <_free_r>
 800f3e4:	2300      	movs	r3, #0
 800f3e6:	6363      	str	r3, [r4, #52]	@ 0x34
 800f3e8:	e00d      	b.n	800f406 <__sflush_r+0xae>
 800f3ea:	2301      	movs	r3, #1
 800f3ec:	4628      	mov	r0, r5
 800f3ee:	47b0      	blx	r6
 800f3f0:	4602      	mov	r2, r0
 800f3f2:	1c50      	adds	r0, r2, #1
 800f3f4:	d1c9      	bne.n	800f38a <__sflush_r+0x32>
 800f3f6:	682b      	ldr	r3, [r5, #0]
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	d0c6      	beq.n	800f38a <__sflush_r+0x32>
 800f3fc:	2b1d      	cmp	r3, #29
 800f3fe:	d001      	beq.n	800f404 <__sflush_r+0xac>
 800f400:	2b16      	cmp	r3, #22
 800f402:	d11e      	bne.n	800f442 <__sflush_r+0xea>
 800f404:	602f      	str	r7, [r5, #0]
 800f406:	2000      	movs	r0, #0
 800f408:	e022      	b.n	800f450 <__sflush_r+0xf8>
 800f40a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f40e:	b21b      	sxth	r3, r3
 800f410:	e01b      	b.n	800f44a <__sflush_r+0xf2>
 800f412:	690f      	ldr	r7, [r1, #16]
 800f414:	2f00      	cmp	r7, #0
 800f416:	d0f6      	beq.n	800f406 <__sflush_r+0xae>
 800f418:	0793      	lsls	r3, r2, #30
 800f41a:	680e      	ldr	r6, [r1, #0]
 800f41c:	bf08      	it	eq
 800f41e:	694b      	ldreq	r3, [r1, #20]
 800f420:	600f      	str	r7, [r1, #0]
 800f422:	bf18      	it	ne
 800f424:	2300      	movne	r3, #0
 800f426:	eba6 0807 	sub.w	r8, r6, r7
 800f42a:	608b      	str	r3, [r1, #8]
 800f42c:	f1b8 0f00 	cmp.w	r8, #0
 800f430:	dde9      	ble.n	800f406 <__sflush_r+0xae>
 800f432:	6a21      	ldr	r1, [r4, #32]
 800f434:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f436:	4643      	mov	r3, r8
 800f438:	463a      	mov	r2, r7
 800f43a:	4628      	mov	r0, r5
 800f43c:	47b0      	blx	r6
 800f43e:	2800      	cmp	r0, #0
 800f440:	dc08      	bgt.n	800f454 <__sflush_r+0xfc>
 800f442:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f446:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f44a:	81a3      	strh	r3, [r4, #12]
 800f44c:	f04f 30ff 	mov.w	r0, #4294967295
 800f450:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f454:	4407      	add	r7, r0
 800f456:	eba8 0800 	sub.w	r8, r8, r0
 800f45a:	e7e7      	b.n	800f42c <__sflush_r+0xd4>
 800f45c:	dfbffffe 	.word	0xdfbffffe

0800f460 <_fflush_r>:
 800f460:	b538      	push	{r3, r4, r5, lr}
 800f462:	690b      	ldr	r3, [r1, #16]
 800f464:	4605      	mov	r5, r0
 800f466:	460c      	mov	r4, r1
 800f468:	b913      	cbnz	r3, 800f470 <_fflush_r+0x10>
 800f46a:	2500      	movs	r5, #0
 800f46c:	4628      	mov	r0, r5
 800f46e:	bd38      	pop	{r3, r4, r5, pc}
 800f470:	b118      	cbz	r0, 800f47a <_fflush_r+0x1a>
 800f472:	6a03      	ldr	r3, [r0, #32]
 800f474:	b90b      	cbnz	r3, 800f47a <_fflush_r+0x1a>
 800f476:	f7ff f825 	bl	800e4c4 <__sinit>
 800f47a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f47e:	2b00      	cmp	r3, #0
 800f480:	d0f3      	beq.n	800f46a <_fflush_r+0xa>
 800f482:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f484:	07d0      	lsls	r0, r2, #31
 800f486:	d404      	bmi.n	800f492 <_fflush_r+0x32>
 800f488:	0599      	lsls	r1, r3, #22
 800f48a:	d402      	bmi.n	800f492 <_fflush_r+0x32>
 800f48c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f48e:	f7ff fa32 	bl	800e8f6 <__retarget_lock_acquire_recursive>
 800f492:	4628      	mov	r0, r5
 800f494:	4621      	mov	r1, r4
 800f496:	f7ff ff5f 	bl	800f358 <__sflush_r>
 800f49a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f49c:	07da      	lsls	r2, r3, #31
 800f49e:	4605      	mov	r5, r0
 800f4a0:	d4e4      	bmi.n	800f46c <_fflush_r+0xc>
 800f4a2:	89a3      	ldrh	r3, [r4, #12]
 800f4a4:	059b      	lsls	r3, r3, #22
 800f4a6:	d4e1      	bmi.n	800f46c <_fflush_r+0xc>
 800f4a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f4aa:	f7ff fa25 	bl	800e8f8 <__retarget_lock_release_recursive>
 800f4ae:	e7dd      	b.n	800f46c <_fflush_r+0xc>

0800f4b0 <__swhatbuf_r>:
 800f4b0:	b570      	push	{r4, r5, r6, lr}
 800f4b2:	460c      	mov	r4, r1
 800f4b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f4b8:	2900      	cmp	r1, #0
 800f4ba:	b096      	sub	sp, #88	@ 0x58
 800f4bc:	4615      	mov	r5, r2
 800f4be:	461e      	mov	r6, r3
 800f4c0:	da0d      	bge.n	800f4de <__swhatbuf_r+0x2e>
 800f4c2:	89a3      	ldrh	r3, [r4, #12]
 800f4c4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f4c8:	f04f 0100 	mov.w	r1, #0
 800f4cc:	bf14      	ite	ne
 800f4ce:	2340      	movne	r3, #64	@ 0x40
 800f4d0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f4d4:	2000      	movs	r0, #0
 800f4d6:	6031      	str	r1, [r6, #0]
 800f4d8:	602b      	str	r3, [r5, #0]
 800f4da:	b016      	add	sp, #88	@ 0x58
 800f4dc:	bd70      	pop	{r4, r5, r6, pc}
 800f4de:	466a      	mov	r2, sp
 800f4e0:	f000 f896 	bl	800f610 <_fstat_r>
 800f4e4:	2800      	cmp	r0, #0
 800f4e6:	dbec      	blt.n	800f4c2 <__swhatbuf_r+0x12>
 800f4e8:	9901      	ldr	r1, [sp, #4]
 800f4ea:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f4ee:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f4f2:	4259      	negs	r1, r3
 800f4f4:	4159      	adcs	r1, r3
 800f4f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f4fa:	e7eb      	b.n	800f4d4 <__swhatbuf_r+0x24>

0800f4fc <__smakebuf_r>:
 800f4fc:	898b      	ldrh	r3, [r1, #12]
 800f4fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f500:	079d      	lsls	r5, r3, #30
 800f502:	4606      	mov	r6, r0
 800f504:	460c      	mov	r4, r1
 800f506:	d507      	bpl.n	800f518 <__smakebuf_r+0x1c>
 800f508:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f50c:	6023      	str	r3, [r4, #0]
 800f50e:	6123      	str	r3, [r4, #16]
 800f510:	2301      	movs	r3, #1
 800f512:	6163      	str	r3, [r4, #20]
 800f514:	b003      	add	sp, #12
 800f516:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f518:	ab01      	add	r3, sp, #4
 800f51a:	466a      	mov	r2, sp
 800f51c:	f7ff ffc8 	bl	800f4b0 <__swhatbuf_r>
 800f520:	9f00      	ldr	r7, [sp, #0]
 800f522:	4605      	mov	r5, r0
 800f524:	4639      	mov	r1, r7
 800f526:	4630      	mov	r0, r6
 800f528:	f7ff fa62 	bl	800e9f0 <_malloc_r>
 800f52c:	b948      	cbnz	r0, 800f542 <__smakebuf_r+0x46>
 800f52e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f532:	059a      	lsls	r2, r3, #22
 800f534:	d4ee      	bmi.n	800f514 <__smakebuf_r+0x18>
 800f536:	f023 0303 	bic.w	r3, r3, #3
 800f53a:	f043 0302 	orr.w	r3, r3, #2
 800f53e:	81a3      	strh	r3, [r4, #12]
 800f540:	e7e2      	b.n	800f508 <__smakebuf_r+0xc>
 800f542:	89a3      	ldrh	r3, [r4, #12]
 800f544:	6020      	str	r0, [r4, #0]
 800f546:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f54a:	81a3      	strh	r3, [r4, #12]
 800f54c:	9b01      	ldr	r3, [sp, #4]
 800f54e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f552:	b15b      	cbz	r3, 800f56c <__smakebuf_r+0x70>
 800f554:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f558:	4630      	mov	r0, r6
 800f55a:	f000 f86b 	bl	800f634 <_isatty_r>
 800f55e:	b128      	cbz	r0, 800f56c <__smakebuf_r+0x70>
 800f560:	89a3      	ldrh	r3, [r4, #12]
 800f562:	f023 0303 	bic.w	r3, r3, #3
 800f566:	f043 0301 	orr.w	r3, r3, #1
 800f56a:	81a3      	strh	r3, [r4, #12]
 800f56c:	89a3      	ldrh	r3, [r4, #12]
 800f56e:	431d      	orrs	r5, r3
 800f570:	81a5      	strh	r5, [r4, #12]
 800f572:	e7cf      	b.n	800f514 <__smakebuf_r+0x18>

0800f574 <_putc_r>:
 800f574:	b570      	push	{r4, r5, r6, lr}
 800f576:	460d      	mov	r5, r1
 800f578:	4614      	mov	r4, r2
 800f57a:	4606      	mov	r6, r0
 800f57c:	b118      	cbz	r0, 800f586 <_putc_r+0x12>
 800f57e:	6a03      	ldr	r3, [r0, #32]
 800f580:	b90b      	cbnz	r3, 800f586 <_putc_r+0x12>
 800f582:	f7fe ff9f 	bl	800e4c4 <__sinit>
 800f586:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f588:	07d8      	lsls	r0, r3, #31
 800f58a:	d405      	bmi.n	800f598 <_putc_r+0x24>
 800f58c:	89a3      	ldrh	r3, [r4, #12]
 800f58e:	0599      	lsls	r1, r3, #22
 800f590:	d402      	bmi.n	800f598 <_putc_r+0x24>
 800f592:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f594:	f7ff f9af 	bl	800e8f6 <__retarget_lock_acquire_recursive>
 800f598:	68a3      	ldr	r3, [r4, #8]
 800f59a:	3b01      	subs	r3, #1
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	60a3      	str	r3, [r4, #8]
 800f5a0:	da05      	bge.n	800f5ae <_putc_r+0x3a>
 800f5a2:	69a2      	ldr	r2, [r4, #24]
 800f5a4:	4293      	cmp	r3, r2
 800f5a6:	db12      	blt.n	800f5ce <_putc_r+0x5a>
 800f5a8:	b2eb      	uxtb	r3, r5
 800f5aa:	2b0a      	cmp	r3, #10
 800f5ac:	d00f      	beq.n	800f5ce <_putc_r+0x5a>
 800f5ae:	6823      	ldr	r3, [r4, #0]
 800f5b0:	1c5a      	adds	r2, r3, #1
 800f5b2:	6022      	str	r2, [r4, #0]
 800f5b4:	701d      	strb	r5, [r3, #0]
 800f5b6:	b2ed      	uxtb	r5, r5
 800f5b8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f5ba:	07da      	lsls	r2, r3, #31
 800f5bc:	d405      	bmi.n	800f5ca <_putc_r+0x56>
 800f5be:	89a3      	ldrh	r3, [r4, #12]
 800f5c0:	059b      	lsls	r3, r3, #22
 800f5c2:	d402      	bmi.n	800f5ca <_putc_r+0x56>
 800f5c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f5c6:	f7ff f997 	bl	800e8f8 <__retarget_lock_release_recursive>
 800f5ca:	4628      	mov	r0, r5
 800f5cc:	bd70      	pop	{r4, r5, r6, pc}
 800f5ce:	4629      	mov	r1, r5
 800f5d0:	4622      	mov	r2, r4
 800f5d2:	4630      	mov	r0, r6
 800f5d4:	f7ff f887 	bl	800e6e6 <__swbuf_r>
 800f5d8:	4605      	mov	r5, r0
 800f5da:	e7ed      	b.n	800f5b8 <_putc_r+0x44>

0800f5dc <memmove>:
 800f5dc:	4288      	cmp	r0, r1
 800f5de:	b510      	push	{r4, lr}
 800f5e0:	eb01 0402 	add.w	r4, r1, r2
 800f5e4:	d902      	bls.n	800f5ec <memmove+0x10>
 800f5e6:	4284      	cmp	r4, r0
 800f5e8:	4623      	mov	r3, r4
 800f5ea:	d807      	bhi.n	800f5fc <memmove+0x20>
 800f5ec:	1e43      	subs	r3, r0, #1
 800f5ee:	42a1      	cmp	r1, r4
 800f5f0:	d008      	beq.n	800f604 <memmove+0x28>
 800f5f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f5f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f5fa:	e7f8      	b.n	800f5ee <memmove+0x12>
 800f5fc:	4402      	add	r2, r0
 800f5fe:	4601      	mov	r1, r0
 800f600:	428a      	cmp	r2, r1
 800f602:	d100      	bne.n	800f606 <memmove+0x2a>
 800f604:	bd10      	pop	{r4, pc}
 800f606:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f60a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f60e:	e7f7      	b.n	800f600 <memmove+0x24>

0800f610 <_fstat_r>:
 800f610:	b538      	push	{r3, r4, r5, lr}
 800f612:	4d07      	ldr	r5, [pc, #28]	@ (800f630 <_fstat_r+0x20>)
 800f614:	2300      	movs	r3, #0
 800f616:	4604      	mov	r4, r0
 800f618:	4608      	mov	r0, r1
 800f61a:	4611      	mov	r1, r2
 800f61c:	602b      	str	r3, [r5, #0]
 800f61e:	f000 f867 	bl	800f6f0 <_fstat>
 800f622:	1c43      	adds	r3, r0, #1
 800f624:	d102      	bne.n	800f62c <_fstat_r+0x1c>
 800f626:	682b      	ldr	r3, [r5, #0]
 800f628:	b103      	cbz	r3, 800f62c <_fstat_r+0x1c>
 800f62a:	6023      	str	r3, [r4, #0]
 800f62c:	bd38      	pop	{r3, r4, r5, pc}
 800f62e:	bf00      	nop
 800f630:	200023bc 	.word	0x200023bc

0800f634 <_isatty_r>:
 800f634:	b538      	push	{r3, r4, r5, lr}
 800f636:	4d06      	ldr	r5, [pc, #24]	@ (800f650 <_isatty_r+0x1c>)
 800f638:	2300      	movs	r3, #0
 800f63a:	4604      	mov	r4, r0
 800f63c:	4608      	mov	r0, r1
 800f63e:	602b      	str	r3, [r5, #0]
 800f640:	f000 f85e 	bl	800f700 <_isatty>
 800f644:	1c43      	adds	r3, r0, #1
 800f646:	d102      	bne.n	800f64e <_isatty_r+0x1a>
 800f648:	682b      	ldr	r3, [r5, #0]
 800f64a:	b103      	cbz	r3, 800f64e <_isatty_r+0x1a>
 800f64c:	6023      	str	r3, [r4, #0]
 800f64e:	bd38      	pop	{r3, r4, r5, pc}
 800f650:	200023bc 	.word	0x200023bc

0800f654 <_sbrk_r>:
 800f654:	b538      	push	{r3, r4, r5, lr}
 800f656:	4d06      	ldr	r5, [pc, #24]	@ (800f670 <_sbrk_r+0x1c>)
 800f658:	2300      	movs	r3, #0
 800f65a:	4604      	mov	r4, r0
 800f65c:	4608      	mov	r0, r1
 800f65e:	602b      	str	r3, [r5, #0]
 800f660:	f000 f866 	bl	800f730 <_sbrk>
 800f664:	1c43      	adds	r3, r0, #1
 800f666:	d102      	bne.n	800f66e <_sbrk_r+0x1a>
 800f668:	682b      	ldr	r3, [r5, #0]
 800f66a:	b103      	cbz	r3, 800f66e <_sbrk_r+0x1a>
 800f66c:	6023      	str	r3, [r4, #0]
 800f66e:	bd38      	pop	{r3, r4, r5, pc}
 800f670:	200023bc 	.word	0x200023bc

0800f674 <_realloc_r>:
 800f674:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f678:	4680      	mov	r8, r0
 800f67a:	4615      	mov	r5, r2
 800f67c:	460c      	mov	r4, r1
 800f67e:	b921      	cbnz	r1, 800f68a <_realloc_r+0x16>
 800f680:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f684:	4611      	mov	r1, r2
 800f686:	f7ff b9b3 	b.w	800e9f0 <_malloc_r>
 800f68a:	b92a      	cbnz	r2, 800f698 <_realloc_r+0x24>
 800f68c:	f7ff f944 	bl	800e918 <_free_r>
 800f690:	2400      	movs	r4, #0
 800f692:	4620      	mov	r0, r4
 800f694:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f698:	f000 f81a 	bl	800f6d0 <_malloc_usable_size_r>
 800f69c:	4285      	cmp	r5, r0
 800f69e:	4606      	mov	r6, r0
 800f6a0:	d802      	bhi.n	800f6a8 <_realloc_r+0x34>
 800f6a2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800f6a6:	d8f4      	bhi.n	800f692 <_realloc_r+0x1e>
 800f6a8:	4629      	mov	r1, r5
 800f6aa:	4640      	mov	r0, r8
 800f6ac:	f7ff f9a0 	bl	800e9f0 <_malloc_r>
 800f6b0:	4607      	mov	r7, r0
 800f6b2:	2800      	cmp	r0, #0
 800f6b4:	d0ec      	beq.n	800f690 <_realloc_r+0x1c>
 800f6b6:	42b5      	cmp	r5, r6
 800f6b8:	462a      	mov	r2, r5
 800f6ba:	4621      	mov	r1, r4
 800f6bc:	bf28      	it	cs
 800f6be:	4632      	movcs	r2, r6
 800f6c0:	f7ff f91b 	bl	800e8fa <memcpy>
 800f6c4:	4621      	mov	r1, r4
 800f6c6:	4640      	mov	r0, r8
 800f6c8:	f7ff f926 	bl	800e918 <_free_r>
 800f6cc:	463c      	mov	r4, r7
 800f6ce:	e7e0      	b.n	800f692 <_realloc_r+0x1e>

0800f6d0 <_malloc_usable_size_r>:
 800f6d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f6d4:	1f18      	subs	r0, r3, #4
 800f6d6:	2b00      	cmp	r3, #0
 800f6d8:	bfbc      	itt	lt
 800f6da:	580b      	ldrlt	r3, [r1, r0]
 800f6dc:	18c0      	addlt	r0, r0, r3
 800f6de:	4770      	bx	lr

0800f6e0 <_close>:
 800f6e0:	4b02      	ldr	r3, [pc, #8]	@ (800f6ec <_close+0xc>)
 800f6e2:	2258      	movs	r2, #88	@ 0x58
 800f6e4:	601a      	str	r2, [r3, #0]
 800f6e6:	f04f 30ff 	mov.w	r0, #4294967295
 800f6ea:	4770      	bx	lr
 800f6ec:	200023bc 	.word	0x200023bc

0800f6f0 <_fstat>:
 800f6f0:	4b02      	ldr	r3, [pc, #8]	@ (800f6fc <_fstat+0xc>)
 800f6f2:	2258      	movs	r2, #88	@ 0x58
 800f6f4:	601a      	str	r2, [r3, #0]
 800f6f6:	f04f 30ff 	mov.w	r0, #4294967295
 800f6fa:	4770      	bx	lr
 800f6fc:	200023bc 	.word	0x200023bc

0800f700 <_isatty>:
 800f700:	4b02      	ldr	r3, [pc, #8]	@ (800f70c <_isatty+0xc>)
 800f702:	2258      	movs	r2, #88	@ 0x58
 800f704:	601a      	str	r2, [r3, #0]
 800f706:	2000      	movs	r0, #0
 800f708:	4770      	bx	lr
 800f70a:	bf00      	nop
 800f70c:	200023bc 	.word	0x200023bc

0800f710 <_lseek>:
 800f710:	4b02      	ldr	r3, [pc, #8]	@ (800f71c <_lseek+0xc>)
 800f712:	2258      	movs	r2, #88	@ 0x58
 800f714:	601a      	str	r2, [r3, #0]
 800f716:	f04f 30ff 	mov.w	r0, #4294967295
 800f71a:	4770      	bx	lr
 800f71c:	200023bc 	.word	0x200023bc

0800f720 <_read>:
 800f720:	4b02      	ldr	r3, [pc, #8]	@ (800f72c <_read+0xc>)
 800f722:	2258      	movs	r2, #88	@ 0x58
 800f724:	601a      	str	r2, [r3, #0]
 800f726:	f04f 30ff 	mov.w	r0, #4294967295
 800f72a:	4770      	bx	lr
 800f72c:	200023bc 	.word	0x200023bc

0800f730 <_sbrk>:
 800f730:	4a04      	ldr	r2, [pc, #16]	@ (800f744 <_sbrk+0x14>)
 800f732:	6811      	ldr	r1, [r2, #0]
 800f734:	4603      	mov	r3, r0
 800f736:	b909      	cbnz	r1, 800f73c <_sbrk+0xc>
 800f738:	4903      	ldr	r1, [pc, #12]	@ (800f748 <_sbrk+0x18>)
 800f73a:	6011      	str	r1, [r2, #0]
 800f73c:	6810      	ldr	r0, [r2, #0]
 800f73e:	4403      	add	r3, r0
 800f740:	6013      	str	r3, [r2, #0]
 800f742:	4770      	bx	lr
 800f744:	200023cc 	.word	0x200023cc
 800f748:	200023d0 	.word	0x200023d0

0800f74c <_init>:
 800f74c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f74e:	bf00      	nop
 800f750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f752:	bc08      	pop	{r3}
 800f754:	469e      	mov	lr, r3
 800f756:	4770      	bx	lr

0800f758 <_fini>:
 800f758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f75a:	bf00      	nop
 800f75c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f75e:	bc08      	pop	{r3}
 800f760:	469e      	mov	lr, r3
 800f762:	4770      	bx	lr
