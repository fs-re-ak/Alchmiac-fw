
Alchemiac-fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f0b4  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001638  0800f1f4  0800f1f4  000101f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801082c  0801082c  0001182c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08010834  08010834  00011834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08010838  08010838  00011838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000080  20000008  0801083c  00012008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 0000001d  20000088  080108bc  00012088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  200000a8  080108d9  000120a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002368  200000bc  080108ea  000120bc  2**2
                  ALLOC
 10 ._user_heap_stack 00001404  20002424  080108ea  00012424  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00012d8b  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  00013000  2**2
                  ALLOC
 13 MB_MEM1       000001bb  20030028  20030028  00013000  2**2
                  ALLOC
 14 .MB_MEM2      00000ba7  200301e4  080108ea  000121e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 15 .debug_info   00037a5a  00000000  00000000  00012dbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 000071c7  00000000  00000000  0004a815  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00003348  00000000  00000000  000519e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 000027b3  00000000  00000000  00054d28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002f35a  00000000  00000000  000574db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0003c68b  00000000  00000000  00086835  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    00109302  00000000  00000000  000c2ec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  001cc1c2  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000e44c  00000000  00000000  001cc208  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 0000005a  00000000  00000000  001da654  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200000bc 	.word	0x200000bc
 800015c:	00000000 	.word	0x00000000
 8000160:	0800f1dc 	.word	0x0800f1dc

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200000c0 	.word	0x200000c0
 800017c:	0800f1dc 	.word	0x0800f1dc

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_dmul>:
 8000230:	b570      	push	{r4, r5, r6, lr}
 8000232:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000236:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800023a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800023e:	bf1d      	ittte	ne
 8000240:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000244:	ea94 0f0c 	teqne	r4, ip
 8000248:	ea95 0f0c 	teqne	r5, ip
 800024c:	f000 f8de 	bleq	800040c <__aeabi_dmul+0x1dc>
 8000250:	442c      	add	r4, r5
 8000252:	ea81 0603 	eor.w	r6, r1, r3
 8000256:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800025a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800025e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000262:	bf18      	it	ne
 8000264:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000268:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800026c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000270:	d038      	beq.n	80002e4 <__aeabi_dmul+0xb4>
 8000272:	fba0 ce02 	umull	ip, lr, r0, r2
 8000276:	f04f 0500 	mov.w	r5, #0
 800027a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800027e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000282:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000286:	f04f 0600 	mov.w	r6, #0
 800028a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800028e:	f09c 0f00 	teq	ip, #0
 8000292:	bf18      	it	ne
 8000294:	f04e 0e01 	orrne.w	lr, lr, #1
 8000298:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800029c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80002a0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80002a4:	d204      	bcs.n	80002b0 <__aeabi_dmul+0x80>
 80002a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002aa:	416d      	adcs	r5, r5
 80002ac:	eb46 0606 	adc.w	r6, r6, r6
 80002b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002c4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80002c8:	bf88      	it	hi
 80002ca:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80002ce:	d81e      	bhi.n	800030e <__aeabi_dmul+0xde>
 80002d0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80002d4:	bf08      	it	eq
 80002d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002da:	f150 0000 	adcs.w	r0, r0, #0
 80002de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002e2:	bd70      	pop	{r4, r5, r6, pc}
 80002e4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80002e8:	ea46 0101 	orr.w	r1, r6, r1
 80002ec:	ea40 0002 	orr.w	r0, r0, r2
 80002f0:	ea81 0103 	eor.w	r1, r1, r3
 80002f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002f8:	bfc2      	ittt	gt
 80002fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000302:	bd70      	popgt	{r4, r5, r6, pc}
 8000304:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000308:	f04f 0e00 	mov.w	lr, #0
 800030c:	3c01      	subs	r4, #1
 800030e:	f300 80ab 	bgt.w	8000468 <__aeabi_dmul+0x238>
 8000312:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000316:	bfde      	ittt	le
 8000318:	2000      	movle	r0, #0
 800031a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800031e:	bd70      	pople	{r4, r5, r6, pc}
 8000320:	f1c4 0400 	rsb	r4, r4, #0
 8000324:	3c20      	subs	r4, #32
 8000326:	da35      	bge.n	8000394 <__aeabi_dmul+0x164>
 8000328:	340c      	adds	r4, #12
 800032a:	dc1b      	bgt.n	8000364 <__aeabi_dmul+0x134>
 800032c:	f104 0414 	add.w	r4, r4, #20
 8000330:	f1c4 0520 	rsb	r5, r4, #32
 8000334:	fa00 f305 	lsl.w	r3, r0, r5
 8000338:	fa20 f004 	lsr.w	r0, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea40 0002 	orr.w	r0, r0, r2
 8000344:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000348:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800034c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000350:	fa21 f604 	lsr.w	r6, r1, r4
 8000354:	eb42 0106 	adc.w	r1, r2, r6
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f1c4 040c 	rsb	r4, r4, #12
 8000368:	f1c4 0520 	rsb	r5, r4, #32
 800036c:	fa00 f304 	lsl.w	r3, r0, r4
 8000370:	fa20 f005 	lsr.w	r0, r0, r5
 8000374:	fa01 f204 	lsl.w	r2, r1, r4
 8000378:	ea40 0002 	orr.w	r0, r0, r2
 800037c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000380:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000384:	f141 0100 	adc.w	r1, r1, #0
 8000388:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800038c:	bf08      	it	eq
 800038e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000392:	bd70      	pop	{r4, r5, r6, pc}
 8000394:	f1c4 0520 	rsb	r5, r4, #32
 8000398:	fa00 f205 	lsl.w	r2, r0, r5
 800039c:	ea4e 0e02 	orr.w	lr, lr, r2
 80003a0:	fa20 f304 	lsr.w	r3, r0, r4
 80003a4:	fa01 f205 	lsl.w	r2, r1, r5
 80003a8:	ea43 0302 	orr.w	r3, r3, r2
 80003ac:	fa21 f004 	lsr.w	r0, r1, r4
 80003b0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003b4:	fa21 f204 	lsr.w	r2, r1, r4
 80003b8:	ea20 0002 	bic.w	r0, r0, r2
 80003bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003c4:	bf08      	it	eq
 80003c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003ca:	bd70      	pop	{r4, r5, r6, pc}
 80003cc:	f094 0f00 	teq	r4, #0
 80003d0:	d10f      	bne.n	80003f2 <__aeabi_dmul+0x1c2>
 80003d2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80003d6:	0040      	lsls	r0, r0, #1
 80003d8:	eb41 0101 	adc.w	r1, r1, r1
 80003dc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80003e0:	bf08      	it	eq
 80003e2:	3c01      	subeq	r4, #1
 80003e4:	d0f7      	beq.n	80003d6 <__aeabi_dmul+0x1a6>
 80003e6:	ea41 0106 	orr.w	r1, r1, r6
 80003ea:	f095 0f00 	teq	r5, #0
 80003ee:	bf18      	it	ne
 80003f0:	4770      	bxne	lr
 80003f2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80003f6:	0052      	lsls	r2, r2, #1
 80003f8:	eb43 0303 	adc.w	r3, r3, r3
 80003fc:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000400:	bf08      	it	eq
 8000402:	3d01      	subeq	r5, #1
 8000404:	d0f7      	beq.n	80003f6 <__aeabi_dmul+0x1c6>
 8000406:	ea43 0306 	orr.w	r3, r3, r6
 800040a:	4770      	bx	lr
 800040c:	ea94 0f0c 	teq	r4, ip
 8000410:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000414:	bf18      	it	ne
 8000416:	ea95 0f0c 	teqne	r5, ip
 800041a:	d00c      	beq.n	8000436 <__aeabi_dmul+0x206>
 800041c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000420:	bf18      	it	ne
 8000422:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000426:	d1d1      	bne.n	80003cc <__aeabi_dmul+0x19c>
 8000428:	ea81 0103 	eor.w	r1, r1, r3
 800042c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000430:	f04f 0000 	mov.w	r0, #0
 8000434:	bd70      	pop	{r4, r5, r6, pc}
 8000436:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800043a:	bf06      	itte	eq
 800043c:	4610      	moveq	r0, r2
 800043e:	4619      	moveq	r1, r3
 8000440:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000444:	d019      	beq.n	800047a <__aeabi_dmul+0x24a>
 8000446:	ea94 0f0c 	teq	r4, ip
 800044a:	d102      	bne.n	8000452 <__aeabi_dmul+0x222>
 800044c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000450:	d113      	bne.n	800047a <__aeabi_dmul+0x24a>
 8000452:	ea95 0f0c 	teq	r5, ip
 8000456:	d105      	bne.n	8000464 <__aeabi_dmul+0x234>
 8000458:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800045c:	bf1c      	itt	ne
 800045e:	4610      	movne	r0, r2
 8000460:	4619      	movne	r1, r3
 8000462:	d10a      	bne.n	800047a <__aeabi_dmul+0x24a>
 8000464:	ea81 0103 	eor.w	r1, r1, r3
 8000468:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800046c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000470:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000474:	f04f 0000 	mov.w	r0, #0
 8000478:	bd70      	pop	{r4, r5, r6, pc}
 800047a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800047e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000482:	bd70      	pop	{r4, r5, r6, pc}

08000484 <__aeabi_drsub>:
 8000484:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000488:	e002      	b.n	8000490 <__adddf3>
 800048a:	bf00      	nop

0800048c <__aeabi_dsub>:
 800048c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000490 <__adddf3>:
 8000490:	b530      	push	{r4, r5, lr}
 8000492:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000496:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800049a:	ea94 0f05 	teq	r4, r5
 800049e:	bf08      	it	eq
 80004a0:	ea90 0f02 	teqeq	r0, r2
 80004a4:	bf1f      	itttt	ne
 80004a6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004aa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004ae:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004b2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b6:	f000 80e2 	beq.w	800067e <__adddf3+0x1ee>
 80004ba:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004be:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004c2:	bfb8      	it	lt
 80004c4:	426d      	neglt	r5, r5
 80004c6:	dd0c      	ble.n	80004e2 <__adddf3+0x52>
 80004c8:	442c      	add	r4, r5
 80004ca:	ea80 0202 	eor.w	r2, r0, r2
 80004ce:	ea81 0303 	eor.w	r3, r1, r3
 80004d2:	ea82 0000 	eor.w	r0, r2, r0
 80004d6:	ea83 0101 	eor.w	r1, r3, r1
 80004da:	ea80 0202 	eor.w	r2, r0, r2
 80004de:	ea81 0303 	eor.w	r3, r1, r3
 80004e2:	2d36      	cmp	r5, #54	@ 0x36
 80004e4:	bf88      	it	hi
 80004e6:	bd30      	pophi	{r4, r5, pc}
 80004e8:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80004ec:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004f0:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80004f4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004f8:	d002      	beq.n	8000500 <__adddf3+0x70>
 80004fa:	4240      	negs	r0, r0
 80004fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000500:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000504:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000508:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800050c:	d002      	beq.n	8000514 <__adddf3+0x84>
 800050e:	4252      	negs	r2, r2
 8000510:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000514:	ea94 0f05 	teq	r4, r5
 8000518:	f000 80a7 	beq.w	800066a <__adddf3+0x1da>
 800051c:	f1a4 0401 	sub.w	r4, r4, #1
 8000520:	f1d5 0e20 	rsbs	lr, r5, #32
 8000524:	db0d      	blt.n	8000542 <__adddf3+0xb2>
 8000526:	fa02 fc0e 	lsl.w	ip, r2, lr
 800052a:	fa22 f205 	lsr.w	r2, r2, r5
 800052e:	1880      	adds	r0, r0, r2
 8000530:	f141 0100 	adc.w	r1, r1, #0
 8000534:	fa03 f20e 	lsl.w	r2, r3, lr
 8000538:	1880      	adds	r0, r0, r2
 800053a:	fa43 f305 	asr.w	r3, r3, r5
 800053e:	4159      	adcs	r1, r3
 8000540:	e00e      	b.n	8000560 <__adddf3+0xd0>
 8000542:	f1a5 0520 	sub.w	r5, r5, #32
 8000546:	f10e 0e20 	add.w	lr, lr, #32
 800054a:	2a01      	cmp	r2, #1
 800054c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000550:	bf28      	it	cs
 8000552:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000556:	fa43 f305 	asr.w	r3, r3, r5
 800055a:	18c0      	adds	r0, r0, r3
 800055c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000560:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000564:	d507      	bpl.n	8000576 <__adddf3+0xe6>
 8000566:	f04f 0e00 	mov.w	lr, #0
 800056a:	f1dc 0c00 	rsbs	ip, ip, #0
 800056e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000572:	eb6e 0101 	sbc.w	r1, lr, r1
 8000576:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800057a:	d31b      	bcc.n	80005b4 <__adddf3+0x124>
 800057c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000580:	d30c      	bcc.n	800059c <__adddf3+0x10c>
 8000582:	0849      	lsrs	r1, r1, #1
 8000584:	ea5f 0030 	movs.w	r0, r0, rrx
 8000588:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800058c:	f104 0401 	add.w	r4, r4, #1
 8000590:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000594:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000598:	f080 809a 	bcs.w	80006d0 <__adddf3+0x240>
 800059c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80005a0:	bf08      	it	eq
 80005a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005a6:	f150 0000 	adcs.w	r0, r0, #0
 80005aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ae:	ea41 0105 	orr.w	r1, r1, r5
 80005b2:	bd30      	pop	{r4, r5, pc}
 80005b4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005b8:	4140      	adcs	r0, r0
 80005ba:	eb41 0101 	adc.w	r1, r1, r1
 80005be:	3c01      	subs	r4, #1
 80005c0:	bf28      	it	cs
 80005c2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80005c6:	d2e9      	bcs.n	800059c <__adddf3+0x10c>
 80005c8:	f091 0f00 	teq	r1, #0
 80005cc:	bf04      	itt	eq
 80005ce:	4601      	moveq	r1, r0
 80005d0:	2000      	moveq	r0, #0
 80005d2:	fab1 f381 	clz	r3, r1
 80005d6:	bf08      	it	eq
 80005d8:	3320      	addeq	r3, #32
 80005da:	f1a3 030b 	sub.w	r3, r3, #11
 80005de:	f1b3 0220 	subs.w	r2, r3, #32
 80005e2:	da0c      	bge.n	80005fe <__adddf3+0x16e>
 80005e4:	320c      	adds	r2, #12
 80005e6:	dd08      	ble.n	80005fa <__adddf3+0x16a>
 80005e8:	f102 0c14 	add.w	ip, r2, #20
 80005ec:	f1c2 020c 	rsb	r2, r2, #12
 80005f0:	fa01 f00c 	lsl.w	r0, r1, ip
 80005f4:	fa21 f102 	lsr.w	r1, r1, r2
 80005f8:	e00c      	b.n	8000614 <__adddf3+0x184>
 80005fa:	f102 0214 	add.w	r2, r2, #20
 80005fe:	bfd8      	it	le
 8000600:	f1c2 0c20 	rsble	ip, r2, #32
 8000604:	fa01 f102 	lsl.w	r1, r1, r2
 8000608:	fa20 fc0c 	lsr.w	ip, r0, ip
 800060c:	bfdc      	itt	le
 800060e:	ea41 010c 	orrle.w	r1, r1, ip
 8000612:	4090      	lslle	r0, r2
 8000614:	1ae4      	subs	r4, r4, r3
 8000616:	bfa2      	ittt	ge
 8000618:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800061c:	4329      	orrge	r1, r5
 800061e:	bd30      	popge	{r4, r5, pc}
 8000620:	ea6f 0404 	mvn.w	r4, r4
 8000624:	3c1f      	subs	r4, #31
 8000626:	da1c      	bge.n	8000662 <__adddf3+0x1d2>
 8000628:	340c      	adds	r4, #12
 800062a:	dc0e      	bgt.n	800064a <__adddf3+0x1ba>
 800062c:	f104 0414 	add.w	r4, r4, #20
 8000630:	f1c4 0220 	rsb	r2, r4, #32
 8000634:	fa20 f004 	lsr.w	r0, r0, r4
 8000638:	fa01 f302 	lsl.w	r3, r1, r2
 800063c:	ea40 0003 	orr.w	r0, r0, r3
 8000640:	fa21 f304 	lsr.w	r3, r1, r4
 8000644:	ea45 0103 	orr.w	r1, r5, r3
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	f1c4 040c 	rsb	r4, r4, #12
 800064e:	f1c4 0220 	rsb	r2, r4, #32
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 f304 	lsl.w	r3, r1, r4
 800065a:	ea40 0003 	orr.w	r0, r0, r3
 800065e:	4629      	mov	r1, r5
 8000660:	bd30      	pop	{r4, r5, pc}
 8000662:	fa21 f004 	lsr.w	r0, r1, r4
 8000666:	4629      	mov	r1, r5
 8000668:	bd30      	pop	{r4, r5, pc}
 800066a:	f094 0f00 	teq	r4, #0
 800066e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000672:	bf06      	itte	eq
 8000674:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000678:	3401      	addeq	r4, #1
 800067a:	3d01      	subne	r5, #1
 800067c:	e74e      	b.n	800051c <__adddf3+0x8c>
 800067e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000682:	bf18      	it	ne
 8000684:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000688:	d029      	beq.n	80006de <__adddf3+0x24e>
 800068a:	ea94 0f05 	teq	r4, r5
 800068e:	bf08      	it	eq
 8000690:	ea90 0f02 	teqeq	r0, r2
 8000694:	d005      	beq.n	80006a2 <__adddf3+0x212>
 8000696:	ea54 0c00 	orrs.w	ip, r4, r0
 800069a:	bf04      	itt	eq
 800069c:	4619      	moveq	r1, r3
 800069e:	4610      	moveq	r0, r2
 80006a0:	bd30      	pop	{r4, r5, pc}
 80006a2:	ea91 0f03 	teq	r1, r3
 80006a6:	bf1e      	ittt	ne
 80006a8:	2100      	movne	r1, #0
 80006aa:	2000      	movne	r0, #0
 80006ac:	bd30      	popne	{r4, r5, pc}
 80006ae:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006b2:	d105      	bne.n	80006c0 <__adddf3+0x230>
 80006b4:	0040      	lsls	r0, r0, #1
 80006b6:	4149      	adcs	r1, r1
 80006b8:	bf28      	it	cs
 80006ba:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80006be:	bd30      	pop	{r4, r5, pc}
 80006c0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80006c4:	bf3c      	itt	cc
 80006c6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80006ca:	bd30      	popcc	{r4, r5, pc}
 80006cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006d0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80006d4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd30      	pop	{r4, r5, pc}
 80006de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006e2:	bf1a      	itte	ne
 80006e4:	4619      	movne	r1, r3
 80006e6:	4610      	movne	r0, r2
 80006e8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006ec:	bf1c      	itt	ne
 80006ee:	460b      	movne	r3, r1
 80006f0:	4602      	movne	r2, r0
 80006f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006f6:	bf06      	itte	eq
 80006f8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006fc:	ea91 0f03 	teqeq	r1, r3
 8000700:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000704:	bd30      	pop	{r4, r5, pc}
 8000706:	bf00      	nop

08000708 <__aeabi_ui2d>:
 8000708:	f090 0f00 	teq	r0, #0
 800070c:	bf04      	itt	eq
 800070e:	2100      	moveq	r1, #0
 8000710:	4770      	bxeq	lr
 8000712:	b530      	push	{r4, r5, lr}
 8000714:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000718:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800071c:	f04f 0500 	mov.w	r5, #0
 8000720:	f04f 0100 	mov.w	r1, #0
 8000724:	e750      	b.n	80005c8 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_i2d>:
 8000728:	f090 0f00 	teq	r0, #0
 800072c:	bf04      	itt	eq
 800072e:	2100      	moveq	r1, #0
 8000730:	4770      	bxeq	lr
 8000732:	b530      	push	{r4, r5, lr}
 8000734:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000738:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800073c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000740:	bf48      	it	mi
 8000742:	4240      	negmi	r0, r0
 8000744:	f04f 0100 	mov.w	r1, #0
 8000748:	e73e      	b.n	80005c8 <__adddf3+0x138>
 800074a:	bf00      	nop

0800074c <__aeabi_f2d>:
 800074c:	0042      	lsls	r2, r0, #1
 800074e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000752:	ea4f 0131 	mov.w	r1, r1, rrx
 8000756:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800075a:	bf1f      	itttt	ne
 800075c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000760:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000764:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000768:	4770      	bxne	lr
 800076a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800076e:	bf08      	it	eq
 8000770:	4770      	bxeq	lr
 8000772:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000776:	bf04      	itt	eq
 8000778:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800077c:	4770      	bxeq	lr
 800077e:	b530      	push	{r4, r5, lr}
 8000780:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000784:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000788:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	e71c      	b.n	80005c8 <__adddf3+0x138>
 800078e:	bf00      	nop

08000790 <__aeabi_ul2d>:
 8000790:	ea50 0201 	orrs.w	r2, r0, r1
 8000794:	bf08      	it	eq
 8000796:	4770      	bxeq	lr
 8000798:	b530      	push	{r4, r5, lr}
 800079a:	f04f 0500 	mov.w	r5, #0
 800079e:	e00a      	b.n	80007b6 <__aeabi_l2d+0x16>

080007a0 <__aeabi_l2d>:
 80007a0:	ea50 0201 	orrs.w	r2, r0, r1
 80007a4:	bf08      	it	eq
 80007a6:	4770      	bxeq	lr
 80007a8:	b530      	push	{r4, r5, lr}
 80007aa:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80007ae:	d502      	bpl.n	80007b6 <__aeabi_l2d+0x16>
 80007b0:	4240      	negs	r0, r0
 80007b2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007b6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007ba:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007be:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007c2:	f43f aed8 	beq.w	8000576 <__adddf3+0xe6>
 80007c6:	f04f 0203 	mov.w	r2, #3
 80007ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007ce:	bf18      	it	ne
 80007d0:	3203      	addne	r2, #3
 80007d2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007d6:	bf18      	it	ne
 80007d8:	3203      	addne	r2, #3
 80007da:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007de:	f1c2 0320 	rsb	r3, r2, #32
 80007e2:	fa00 fc03 	lsl.w	ip, r0, r3
 80007e6:	fa20 f002 	lsr.w	r0, r0, r2
 80007ea:	fa01 fe03 	lsl.w	lr, r1, r3
 80007ee:	ea40 000e 	orr.w	r0, r0, lr
 80007f2:	fa21 f102 	lsr.w	r1, r1, r2
 80007f6:	4414      	add	r4, r2
 80007f8:	e6bd      	b.n	8000576 <__adddf3+0xe6>
 80007fa:	bf00      	nop

080007fc <__aeabi_uldivmod>:
 80007fc:	b953      	cbnz	r3, 8000814 <__aeabi_uldivmod+0x18>
 80007fe:	b94a      	cbnz	r2, 8000814 <__aeabi_uldivmod+0x18>
 8000800:	2900      	cmp	r1, #0
 8000802:	bf08      	it	eq
 8000804:	2800      	cmpeq	r0, #0
 8000806:	bf1c      	itt	ne
 8000808:	f04f 31ff 	movne.w	r1, #4294967295
 800080c:	f04f 30ff 	movne.w	r0, #4294967295
 8000810:	f000 b96a 	b.w	8000ae8 <__aeabi_idiv0>
 8000814:	f1ad 0c08 	sub.w	ip, sp, #8
 8000818:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800081c:	f000 f806 	bl	800082c <__udivmoddi4>
 8000820:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000824:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000828:	b004      	add	sp, #16
 800082a:	4770      	bx	lr

0800082c <__udivmoddi4>:
 800082c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000830:	9d08      	ldr	r5, [sp, #32]
 8000832:	460c      	mov	r4, r1
 8000834:	2b00      	cmp	r3, #0
 8000836:	d14e      	bne.n	80008d6 <__udivmoddi4+0xaa>
 8000838:	4694      	mov	ip, r2
 800083a:	458c      	cmp	ip, r1
 800083c:	4686      	mov	lr, r0
 800083e:	fab2 f282 	clz	r2, r2
 8000842:	d962      	bls.n	800090a <__udivmoddi4+0xde>
 8000844:	b14a      	cbz	r2, 800085a <__udivmoddi4+0x2e>
 8000846:	f1c2 0320 	rsb	r3, r2, #32
 800084a:	4091      	lsls	r1, r2
 800084c:	fa20 f303 	lsr.w	r3, r0, r3
 8000850:	fa0c fc02 	lsl.w	ip, ip, r2
 8000854:	4319      	orrs	r1, r3
 8000856:	fa00 fe02 	lsl.w	lr, r0, r2
 800085a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800085e:	fa1f f68c 	uxth.w	r6, ip
 8000862:	fbb1 f4f7 	udiv	r4, r1, r7
 8000866:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800086a:	fb07 1114 	mls	r1, r7, r4, r1
 800086e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000872:	fb04 f106 	mul.w	r1, r4, r6
 8000876:	4299      	cmp	r1, r3
 8000878:	d90a      	bls.n	8000890 <__udivmoddi4+0x64>
 800087a:	eb1c 0303 	adds.w	r3, ip, r3
 800087e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000882:	f080 8112 	bcs.w	8000aaa <__udivmoddi4+0x27e>
 8000886:	4299      	cmp	r1, r3
 8000888:	f240 810f 	bls.w	8000aaa <__udivmoddi4+0x27e>
 800088c:	3c02      	subs	r4, #2
 800088e:	4463      	add	r3, ip
 8000890:	1a59      	subs	r1, r3, r1
 8000892:	fa1f f38e 	uxth.w	r3, lr
 8000896:	fbb1 f0f7 	udiv	r0, r1, r7
 800089a:	fb07 1110 	mls	r1, r7, r0, r1
 800089e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008a2:	fb00 f606 	mul.w	r6, r0, r6
 80008a6:	429e      	cmp	r6, r3
 80008a8:	d90a      	bls.n	80008c0 <__udivmoddi4+0x94>
 80008aa:	eb1c 0303 	adds.w	r3, ip, r3
 80008ae:	f100 31ff 	add.w	r1, r0, #4294967295
 80008b2:	f080 80fc 	bcs.w	8000aae <__udivmoddi4+0x282>
 80008b6:	429e      	cmp	r6, r3
 80008b8:	f240 80f9 	bls.w	8000aae <__udivmoddi4+0x282>
 80008bc:	4463      	add	r3, ip
 80008be:	3802      	subs	r0, #2
 80008c0:	1b9b      	subs	r3, r3, r6
 80008c2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80008c6:	2100      	movs	r1, #0
 80008c8:	b11d      	cbz	r5, 80008d2 <__udivmoddi4+0xa6>
 80008ca:	40d3      	lsrs	r3, r2
 80008cc:	2200      	movs	r2, #0
 80008ce:	e9c5 3200 	strd	r3, r2, [r5]
 80008d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008d6:	428b      	cmp	r3, r1
 80008d8:	d905      	bls.n	80008e6 <__udivmoddi4+0xba>
 80008da:	b10d      	cbz	r5, 80008e0 <__udivmoddi4+0xb4>
 80008dc:	e9c5 0100 	strd	r0, r1, [r5]
 80008e0:	2100      	movs	r1, #0
 80008e2:	4608      	mov	r0, r1
 80008e4:	e7f5      	b.n	80008d2 <__udivmoddi4+0xa6>
 80008e6:	fab3 f183 	clz	r1, r3
 80008ea:	2900      	cmp	r1, #0
 80008ec:	d146      	bne.n	800097c <__udivmoddi4+0x150>
 80008ee:	42a3      	cmp	r3, r4
 80008f0:	d302      	bcc.n	80008f8 <__udivmoddi4+0xcc>
 80008f2:	4290      	cmp	r0, r2
 80008f4:	f0c0 80f0 	bcc.w	8000ad8 <__udivmoddi4+0x2ac>
 80008f8:	1a86      	subs	r6, r0, r2
 80008fa:	eb64 0303 	sbc.w	r3, r4, r3
 80008fe:	2001      	movs	r0, #1
 8000900:	2d00      	cmp	r5, #0
 8000902:	d0e6      	beq.n	80008d2 <__udivmoddi4+0xa6>
 8000904:	e9c5 6300 	strd	r6, r3, [r5]
 8000908:	e7e3      	b.n	80008d2 <__udivmoddi4+0xa6>
 800090a:	2a00      	cmp	r2, #0
 800090c:	f040 8090 	bne.w	8000a30 <__udivmoddi4+0x204>
 8000910:	eba1 040c 	sub.w	r4, r1, ip
 8000914:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000918:	fa1f f78c 	uxth.w	r7, ip
 800091c:	2101      	movs	r1, #1
 800091e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000922:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000926:	fb08 4416 	mls	r4, r8, r6, r4
 800092a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800092e:	fb07 f006 	mul.w	r0, r7, r6
 8000932:	4298      	cmp	r0, r3
 8000934:	d908      	bls.n	8000948 <__udivmoddi4+0x11c>
 8000936:	eb1c 0303 	adds.w	r3, ip, r3
 800093a:	f106 34ff 	add.w	r4, r6, #4294967295
 800093e:	d202      	bcs.n	8000946 <__udivmoddi4+0x11a>
 8000940:	4298      	cmp	r0, r3
 8000942:	f200 80cd 	bhi.w	8000ae0 <__udivmoddi4+0x2b4>
 8000946:	4626      	mov	r6, r4
 8000948:	1a1c      	subs	r4, r3, r0
 800094a:	fa1f f38e 	uxth.w	r3, lr
 800094e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000952:	fb08 4410 	mls	r4, r8, r0, r4
 8000956:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800095a:	fb00 f707 	mul.w	r7, r0, r7
 800095e:	429f      	cmp	r7, r3
 8000960:	d908      	bls.n	8000974 <__udivmoddi4+0x148>
 8000962:	eb1c 0303 	adds.w	r3, ip, r3
 8000966:	f100 34ff 	add.w	r4, r0, #4294967295
 800096a:	d202      	bcs.n	8000972 <__udivmoddi4+0x146>
 800096c:	429f      	cmp	r7, r3
 800096e:	f200 80b0 	bhi.w	8000ad2 <__udivmoddi4+0x2a6>
 8000972:	4620      	mov	r0, r4
 8000974:	1bdb      	subs	r3, r3, r7
 8000976:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800097a:	e7a5      	b.n	80008c8 <__udivmoddi4+0x9c>
 800097c:	f1c1 0620 	rsb	r6, r1, #32
 8000980:	408b      	lsls	r3, r1
 8000982:	fa22 f706 	lsr.w	r7, r2, r6
 8000986:	431f      	orrs	r7, r3
 8000988:	fa20 fc06 	lsr.w	ip, r0, r6
 800098c:	fa04 f301 	lsl.w	r3, r4, r1
 8000990:	ea43 030c 	orr.w	r3, r3, ip
 8000994:	40f4      	lsrs	r4, r6
 8000996:	fa00 f801 	lsl.w	r8, r0, r1
 800099a:	0c38      	lsrs	r0, r7, #16
 800099c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80009a0:	fbb4 fef0 	udiv	lr, r4, r0
 80009a4:	fa1f fc87 	uxth.w	ip, r7
 80009a8:	fb00 441e 	mls	r4, r0, lr, r4
 80009ac:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80009b0:	fb0e f90c 	mul.w	r9, lr, ip
 80009b4:	45a1      	cmp	r9, r4
 80009b6:	fa02 f201 	lsl.w	r2, r2, r1
 80009ba:	d90a      	bls.n	80009d2 <__udivmoddi4+0x1a6>
 80009bc:	193c      	adds	r4, r7, r4
 80009be:	f10e 3aff 	add.w	sl, lr, #4294967295
 80009c2:	f080 8084 	bcs.w	8000ace <__udivmoddi4+0x2a2>
 80009c6:	45a1      	cmp	r9, r4
 80009c8:	f240 8081 	bls.w	8000ace <__udivmoddi4+0x2a2>
 80009cc:	f1ae 0e02 	sub.w	lr, lr, #2
 80009d0:	443c      	add	r4, r7
 80009d2:	eba4 0409 	sub.w	r4, r4, r9
 80009d6:	fa1f f983 	uxth.w	r9, r3
 80009da:	fbb4 f3f0 	udiv	r3, r4, r0
 80009de:	fb00 4413 	mls	r4, r0, r3, r4
 80009e2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80009e6:	fb03 fc0c 	mul.w	ip, r3, ip
 80009ea:	45a4      	cmp	ip, r4
 80009ec:	d907      	bls.n	80009fe <__udivmoddi4+0x1d2>
 80009ee:	193c      	adds	r4, r7, r4
 80009f0:	f103 30ff 	add.w	r0, r3, #4294967295
 80009f4:	d267      	bcs.n	8000ac6 <__udivmoddi4+0x29a>
 80009f6:	45a4      	cmp	ip, r4
 80009f8:	d965      	bls.n	8000ac6 <__udivmoddi4+0x29a>
 80009fa:	3b02      	subs	r3, #2
 80009fc:	443c      	add	r4, r7
 80009fe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000a02:	fba0 9302 	umull	r9, r3, r0, r2
 8000a06:	eba4 040c 	sub.w	r4, r4, ip
 8000a0a:	429c      	cmp	r4, r3
 8000a0c:	46ce      	mov	lr, r9
 8000a0e:	469c      	mov	ip, r3
 8000a10:	d351      	bcc.n	8000ab6 <__udivmoddi4+0x28a>
 8000a12:	d04e      	beq.n	8000ab2 <__udivmoddi4+0x286>
 8000a14:	b155      	cbz	r5, 8000a2c <__udivmoddi4+0x200>
 8000a16:	ebb8 030e 	subs.w	r3, r8, lr
 8000a1a:	eb64 040c 	sbc.w	r4, r4, ip
 8000a1e:	fa04 f606 	lsl.w	r6, r4, r6
 8000a22:	40cb      	lsrs	r3, r1
 8000a24:	431e      	orrs	r6, r3
 8000a26:	40cc      	lsrs	r4, r1
 8000a28:	e9c5 6400 	strd	r6, r4, [r5]
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	e750      	b.n	80008d2 <__udivmoddi4+0xa6>
 8000a30:	f1c2 0320 	rsb	r3, r2, #32
 8000a34:	fa20 f103 	lsr.w	r1, r0, r3
 8000a38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a3c:	fa24 f303 	lsr.w	r3, r4, r3
 8000a40:	4094      	lsls	r4, r2
 8000a42:	430c      	orrs	r4, r1
 8000a44:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a48:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a4c:	fa1f f78c 	uxth.w	r7, ip
 8000a50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a54:	fb08 3110 	mls	r1, r8, r0, r3
 8000a58:	0c23      	lsrs	r3, r4, #16
 8000a5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a5e:	fb00 f107 	mul.w	r1, r0, r7
 8000a62:	4299      	cmp	r1, r3
 8000a64:	d908      	bls.n	8000a78 <__udivmoddi4+0x24c>
 8000a66:	eb1c 0303 	adds.w	r3, ip, r3
 8000a6a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000a6e:	d22c      	bcs.n	8000aca <__udivmoddi4+0x29e>
 8000a70:	4299      	cmp	r1, r3
 8000a72:	d92a      	bls.n	8000aca <__udivmoddi4+0x29e>
 8000a74:	3802      	subs	r0, #2
 8000a76:	4463      	add	r3, ip
 8000a78:	1a5b      	subs	r3, r3, r1
 8000a7a:	b2a4      	uxth	r4, r4
 8000a7c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000a80:	fb08 3311 	mls	r3, r8, r1, r3
 8000a84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a88:	fb01 f307 	mul.w	r3, r1, r7
 8000a8c:	42a3      	cmp	r3, r4
 8000a8e:	d908      	bls.n	8000aa2 <__udivmoddi4+0x276>
 8000a90:	eb1c 0404 	adds.w	r4, ip, r4
 8000a94:	f101 36ff 	add.w	r6, r1, #4294967295
 8000a98:	d213      	bcs.n	8000ac2 <__udivmoddi4+0x296>
 8000a9a:	42a3      	cmp	r3, r4
 8000a9c:	d911      	bls.n	8000ac2 <__udivmoddi4+0x296>
 8000a9e:	3902      	subs	r1, #2
 8000aa0:	4464      	add	r4, ip
 8000aa2:	1ae4      	subs	r4, r4, r3
 8000aa4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000aa8:	e739      	b.n	800091e <__udivmoddi4+0xf2>
 8000aaa:	4604      	mov	r4, r0
 8000aac:	e6f0      	b.n	8000890 <__udivmoddi4+0x64>
 8000aae:	4608      	mov	r0, r1
 8000ab0:	e706      	b.n	80008c0 <__udivmoddi4+0x94>
 8000ab2:	45c8      	cmp	r8, r9
 8000ab4:	d2ae      	bcs.n	8000a14 <__udivmoddi4+0x1e8>
 8000ab6:	ebb9 0e02 	subs.w	lr, r9, r2
 8000aba:	eb63 0c07 	sbc.w	ip, r3, r7
 8000abe:	3801      	subs	r0, #1
 8000ac0:	e7a8      	b.n	8000a14 <__udivmoddi4+0x1e8>
 8000ac2:	4631      	mov	r1, r6
 8000ac4:	e7ed      	b.n	8000aa2 <__udivmoddi4+0x276>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	e799      	b.n	80009fe <__udivmoddi4+0x1d2>
 8000aca:	4630      	mov	r0, r6
 8000acc:	e7d4      	b.n	8000a78 <__udivmoddi4+0x24c>
 8000ace:	46d6      	mov	lr, sl
 8000ad0:	e77f      	b.n	80009d2 <__udivmoddi4+0x1a6>
 8000ad2:	4463      	add	r3, ip
 8000ad4:	3802      	subs	r0, #2
 8000ad6:	e74d      	b.n	8000974 <__udivmoddi4+0x148>
 8000ad8:	4606      	mov	r6, r0
 8000ada:	4623      	mov	r3, r4
 8000adc:	4608      	mov	r0, r1
 8000ade:	e70f      	b.n	8000900 <__udivmoddi4+0xd4>
 8000ae0:	3e02      	subs	r6, #2
 8000ae2:	4463      	add	r3, ip
 8000ae4:	e730      	b.n	8000948 <__udivmoddi4+0x11c>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_idiv0>:
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <ADS1299_Init>:
static void PowerUpSequence();
void EEGRecordingSequence();



void ADS1299_Init(){
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0

    //send_ads1299_command(ADS1299_SDATAC);
	PowerUpSequence();
 8000af0:	f000 f802 	bl	8000af8 <PowerUpSequence>

}
 8000af4:	bf00      	nop
 8000af6:	bd80      	pop	{r7, pc}

08000af8 <PowerUpSequence>:



static void PowerUpSequence(){
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b084      	sub	sp, #16
 8000afc:	af00      	add	r7, sp, #0

	uint8_t i = 0;
 8000afe:	2300      	movs	r3, #0
 8000b00:	73fb      	strb	r3, [r7, #15]
	uint8_t register_value = 0x00;
 8000b02:	2300      	movs	r3, #0
 8000b04:	73bb      	strb	r3, [r7, #14]
	uint8_t channset_value[ADS1299_CHANNELS] = {0};
 8000b06:	2300      	movs	r3, #0
 8000b08:	607b      	str	r3, [r7, #4]
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	60bb      	str	r3, [r7, #8]

	setnReset(GPIO_PIN_RESET);
 8000b0e:	2000      	movs	r0, #0
 8000b10:	f000 f908 	bl	8000d24 <setnReset>
	setnPWRdown(GPIO_PIN_RESET);
 8000b14:	2000      	movs	r0, #0
 8000b16:	f000 f917 	bl	8000d48 <setnPWRdown>
	setADS1299Start(GPIO_PIN_RESET);
 8000b1a:	2000      	movs	r0, #0
 8000b1c:	f000 f926 	bl	8000d6c <setADS1299Start>
	setADS1299CS(GPIO_PIN_SET);
 8000b20:	2001      	movs	r0, #1
 8000b22:	f000 f935 	bl	8000d90 <setADS1299CS>

	// Minimum delay after power on.
	HAL_Delay(POWER_UP_DELAY_MS);
 8000b26:	20c8      	movs	r0, #200	@ 0xc8
 8000b28:	f000 fcb4 	bl	8001494 <HAL_Delay>

	setnReset(GPIO_PIN_SET);
 8000b2c:	2001      	movs	r0, #1
 8000b2e:	f000 f8f9 	bl	8000d24 <setnReset>
	setnPWRdown(GPIO_PIN_SET);
 8000b32:	2001      	movs	r0, #1
 8000b34:	f000 f908 	bl	8000d48 <setnPWRdown>
	HAL_Delay(1);
 8000b38:	2001      	movs	r0, #1
 8000b3a:	f000 fcab 	bl	8001494 <HAL_Delay>

	setnReset(GPIO_PIN_RESET);
 8000b3e:	2000      	movs	r0, #0
 8000b40:	f000 f8f0 	bl	8000d24 <setnReset>
	HAL_Delay(1);
 8000b44:	2001      	movs	r0, #1
 8000b46:	f000 fca5 	bl	8001494 <HAL_Delay>
	setnReset(GPIO_PIN_SET);
 8000b4a:	2001      	movs	r0, #1
 8000b4c:	f000 f8ea 	bl	8000d24 <setnReset>

	// Minimum delay after power on.
	HAL_Delay(POWER_UP_DELAY_MS);
 8000b50:	20c8      	movs	r0, #200	@ 0xc8
 8000b52:	f000 fc9f 	bl	8001494 <HAL_Delay>

	send_ads1299_command(ADS1299_SDATAC);
 8000b56:	2011      	movs	r0, #17
 8000b58:	f000 f92a 	bl	8000db0 <send_ads1299_command>

	register_value = 0x96;
 8000b5c:	2396      	movs	r3, #150	@ 0x96
 8000b5e:	73bb      	strb	r3, [r7, #14]
	write_ads1299_register(ADS1299_REG_CONFIG1, 1, &register_value);
 8000b60:	f107 030e 	add.w	r3, r7, #14
 8000b64:	461a      	mov	r2, r3
 8000b66:	2101      	movs	r1, #1
 8000b68:	2001      	movs	r0, #1
 8000b6a:	f000 f943 	bl	8000df4 <write_ads1299_register>
	HAL_Delay(1);
 8000b6e:	2001      	movs	r0, #1
 8000b70:	f000 fc90 	bl	8001494 <HAL_Delay>
	register_value = 0xC0;
 8000b74:	23c0      	movs	r3, #192	@ 0xc0
 8000b76:	73bb      	strb	r3, [r7, #14]
	write_ads1299_register(ADS1299_REG_CONFIG2, 1, &register_value);
 8000b78:	f107 030e 	add.w	r3, r7, #14
 8000b7c:	461a      	mov	r2, r3
 8000b7e:	2101      	movs	r1, #1
 8000b80:	2002      	movs	r0, #2
 8000b82:	f000 f937 	bl	8000df4 <write_ads1299_register>
	HAL_Delay(1);
 8000b86:	2001      	movs	r0, #1
 8000b88:	f000 fc84 	bl	8001494 <HAL_Delay>
	register_value = 0xE0;
 8000b8c:	23e0      	movs	r3, #224	@ 0xe0
 8000b8e:	73bb      	strb	r3, [r7, #14]
	write_ads1299_register(ADS1299_REG_CONFIG3, 1, &register_value);
 8000b90:	f107 030e 	add.w	r3, r7, #14
 8000b94:	461a      	mov	r2, r3
 8000b96:	2101      	movs	r1, #1
 8000b98:	2003      	movs	r0, #3
 8000b9a:	f000 f92b 	bl	8000df4 <write_ads1299_register>
	HAL_Delay(1);
 8000b9e:	2001      	movs	r0, #1
 8000ba0:	f000 fc78 	bl	8001494 <HAL_Delay>

	for(i=0;i<ADS1299_CHANNELS;i++){
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	73fb      	strb	r3, [r7, #15]
 8000ba8:	e008      	b.n	8000bbc <PowerUpSequence+0xc4>
		channset_value[i] = 0x01;
 8000baa:	7bfb      	ldrb	r3, [r7, #15]
 8000bac:	3310      	adds	r3, #16
 8000bae:	443b      	add	r3, r7
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(i=0;i<ADS1299_CHANNELS;i++){
 8000bb6:	7bfb      	ldrb	r3, [r7, #15]
 8000bb8:	3301      	adds	r3, #1
 8000bba:	73fb      	strb	r3, [r7, #15]
 8000bbc:	7bfb      	ldrb	r3, [r7, #15]
 8000bbe:	2b07      	cmp	r3, #7
 8000bc0:	d9f3      	bls.n	8000baa <PowerUpSequence+0xb2>
	}

	write_ads1299_register(ADS1299_REG_CH1SET, ADS1299_CHANNELS, channset_value);
 8000bc2:	1d3b      	adds	r3, r7, #4
 8000bc4:	461a      	mov	r2, r3
 8000bc6:	2108      	movs	r1, #8
 8000bc8:	2005      	movs	r0, #5
 8000bca:	f000 f913 	bl	8000df4 <write_ads1299_register>
	HAL_Delay(1);
 8000bce:	2001      	movs	r0, #1
 8000bd0:	f000 fc60 	bl	8001494 <HAL_Delay>

	setADS1299Start(GPIO_PIN_SET);
 8000bd4:	2001      	movs	r0, #1
 8000bd6:	f000 f8c9 	bl	8000d6c <setADS1299Start>

	// Wait 1ms.
	HAL_Delay(1);
 8000bda:	2001      	movs	r0, #1
 8000bdc:	f000 fc5a 	bl	8001494 <HAL_Delay>

	send_ads1299_command(ADS1299_RDATAC);
 8000be0:	2010      	movs	r0, #16
 8000be2:	f000 f8e5 	bl	8000db0 <send_ads1299_command>

	// Wait 1ms.
	HAL_Delay(20);
 8000be6:	2014      	movs	r0, #20
 8000be8:	f000 fc54 	bl	8001494 <HAL_Delay>

	send_ads1299_command(ADS1299_SDATAC);
 8000bec:	2011      	movs	r0, #17
 8000bee:	f000 f8df 	bl	8000db0 <send_ads1299_command>
	register_value = 0xD0;
 8000bf2:	23d0      	movs	r3, #208	@ 0xd0
 8000bf4:	73bb      	strb	r3, [r7, #14]
	write_ads1299_register(ADS1299_REG_CONFIG2, 1, &register_value);
 8000bf6:	f107 030e 	add.w	r3, r7, #14
 8000bfa:	461a      	mov	r2, r3
 8000bfc:	2101      	movs	r1, #1
 8000bfe:	2002      	movs	r0, #2
 8000c00:	f000 f8f8 	bl	8000df4 <write_ads1299_register>
	HAL_Delay(1);
 8000c04:	2001      	movs	r0, #1
 8000c06:	f000 fc45 	bl	8001494 <HAL_Delay>

	for(i=0;i<ADS1299_CHANNELS;i++){
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	73fb      	strb	r3, [r7, #15]
 8000c0e:	e008      	b.n	8000c22 <PowerUpSequence+0x12a>
		channset_value[i] = 0x55;
 8000c10:	7bfb      	ldrb	r3, [r7, #15]
 8000c12:	3310      	adds	r3, #16
 8000c14:	443b      	add	r3, r7
 8000c16:	2255      	movs	r2, #85	@ 0x55
 8000c18:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(i=0;i<ADS1299_CHANNELS;i++){
 8000c1c:	7bfb      	ldrb	r3, [r7, #15]
 8000c1e:	3301      	adds	r3, #1
 8000c20:	73fb      	strb	r3, [r7, #15]
 8000c22:	7bfb      	ldrb	r3, [r7, #15]
 8000c24:	2b07      	cmp	r3, #7
 8000c26:	d9f3      	bls.n	8000c10 <PowerUpSequence+0x118>
	}

	write_ads1299_register(ADS1299_REG_CH1SET, ADS1299_CHANNELS, channset_value);
 8000c28:	1d3b      	adds	r3, r7, #4
 8000c2a:	461a      	mov	r2, r3
 8000c2c:	2108      	movs	r1, #8
 8000c2e:	2005      	movs	r0, #5
 8000c30:	f000 f8e0 	bl	8000df4 <write_ads1299_register>

	HAL_Delay(1);
 8000c34:	2001      	movs	r0, #1
 8000c36:	f000 fc2d 	bl	8001494 <HAL_Delay>


	EEGRecordingSequence();
 8000c3a:	f000 f807 	bl	8000c4c <EEGRecordingSequence>

	send_ads1299_command(ADS1299_RDATAC);
 8000c3e:	2010      	movs	r0, #16
 8000c40:	f000 f8b6 	bl	8000db0 <send_ads1299_command>

}
 8000c44:	bf00      	nop
 8000c46:	3710      	adds	r7, #16
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}

08000c4c <EEGRecordingSequence>:





void EEGRecordingSequence(){
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b084      	sub	sp, #16
 8000c50:	af00      	add	r7, sp, #0

	uint8_t i = 0;
 8000c52:	2300      	movs	r3, #0
 8000c54:	73fb      	strb	r3, [r7, #15]
	uint8_t register_value = 0x00;
 8000c56:	2300      	movs	r3, #0
 8000c58:	73bb      	strb	r3, [r7, #14]
	uint8_t channset_value[ADS1299_CHANNELS] = {0};
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	607b      	str	r3, [r7, #4]
 8000c5e:	2300      	movs	r3, #0
 8000c60:	60bb      	str	r3, [r7, #8]

	// Wait 1ms.
	HAL_Delay(20);
 8000c62:	2014      	movs	r0, #20
 8000c64:	f000 fc16 	bl	8001494 <HAL_Delay>

	send_ads1299_command(ADS1299_SDATAC);
 8000c68:	2011      	movs	r0, #17
 8000c6a:	f000 f8a1 	bl	8000db0 <send_ads1299_command>
	register_value = 0xC0;
 8000c6e:	23c0      	movs	r3, #192	@ 0xc0
 8000c70:	73bb      	strb	r3, [r7, #14]
	write_ads1299_register(ADS1299_REG_CONFIG2, 1, &register_value);
 8000c72:	f107 030e 	add.w	r3, r7, #14
 8000c76:	461a      	mov	r2, r3
 8000c78:	2101      	movs	r1, #1
 8000c7a:	2002      	movs	r0, #2
 8000c7c:	f000 f8ba 	bl	8000df4 <write_ads1299_register>
	HAL_Delay(1);
 8000c80:	2001      	movs	r0, #1
 8000c82:	f000 fc07 	bl	8001494 <HAL_Delay>


	register_value = 0xEC; //BIAS-enabled
 8000c86:	23ec      	movs	r3, #236	@ 0xec
 8000c88:	73bb      	strb	r3, [r7, #14]
	//register_value = 0xE0; //BIAS-disabled
	write_ads1299_register(ADS1299_REG_CONFIG3, 1, &register_value);
 8000c8a:	f107 030e 	add.w	r3, r7, #14
 8000c8e:	461a      	mov	r2, r3
 8000c90:	2101      	movs	r1, #1
 8000c92:	2003      	movs	r0, #3
 8000c94:	f000 f8ae 	bl	8000df4 <write_ads1299_register>
	HAL_Delay(1);
 8000c98:	2001      	movs	r0, #1
 8000c9a:	f000 fbfb 	bl	8001494 <HAL_Delay>
	//register_value = 0x00; //BIAS-disabled
	register_value = 0xFF; //BIAS-enabled
 8000c9e:	23ff      	movs	r3, #255	@ 0xff
 8000ca0:	73bb      	strb	r3, [r7, #14]
	write_ads1299_register(ADS1299_REG_BIAS_SENSP, 1, &register_value);
 8000ca2:	f107 030e 	add.w	r3, r7, #14
 8000ca6:	461a      	mov	r2, r3
 8000ca8:	2101      	movs	r1, #1
 8000caa:	200d      	movs	r0, #13
 8000cac:	f000 f8a2 	bl	8000df4 <write_ads1299_register>
	HAL_Delay(1);
 8000cb0:	2001      	movs	r0, #1
 8000cb2:	f000 fbef 	bl	8001494 <HAL_Delay>
	register_value = 0x00;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	73bb      	strb	r3, [r7, #14]
	write_ads1299_register(ADS1299_REG_BIAS_SENSN, 1, &register_value);
 8000cba:	f107 030e 	add.w	r3, r7, #14
 8000cbe:	461a      	mov	r2, r3
 8000cc0:	2101      	movs	r1, #1
 8000cc2:	200e      	movs	r0, #14
 8000cc4:	f000 f896 	bl	8000df4 <write_ads1299_register>
	HAL_Delay(1);
 8000cc8:	2001      	movs	r0, #1
 8000cca:	f000 fbe3 	bl	8001494 <HAL_Delay>
	register_value = 0x20;
 8000cce:	2320      	movs	r3, #32
 8000cd0:	73bb      	strb	r3, [r7, #14]
	write_ads1299_register(ADS1299_REG_MISC1, 1, &register_value);
 8000cd2:	f107 030e 	add.w	r3, r7, #14
 8000cd6:	461a      	mov	r2, r3
 8000cd8:	2101      	movs	r1, #1
 8000cda:	2015      	movs	r0, #21
 8000cdc:	f000 f88a 	bl	8000df4 <write_ads1299_register>
	HAL_Delay(1);
 8000ce0:	2001      	movs	r0, #1
 8000ce2:	f000 fbd7 	bl	8001494 <HAL_Delay>

	for(i=0;i<ADS1299_CHANNELS;i++){
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	73fb      	strb	r3, [r7, #15]
 8000cea:	e008      	b.n	8000cfe <EEGRecordingSequence+0xb2>
		channset_value[i] = 0x50;
 8000cec:	7bfb      	ldrb	r3, [r7, #15]
 8000cee:	3310      	adds	r3, #16
 8000cf0:	443b      	add	r3, r7
 8000cf2:	2250      	movs	r2, #80	@ 0x50
 8000cf4:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(i=0;i<ADS1299_CHANNELS;i++){
 8000cf8:	7bfb      	ldrb	r3, [r7, #15]
 8000cfa:	3301      	adds	r3, #1
 8000cfc:	73fb      	strb	r3, [r7, #15]
 8000cfe:	7bfb      	ldrb	r3, [r7, #15]
 8000d00:	2b07      	cmp	r3, #7
 8000d02:	d9f3      	bls.n	8000cec <EEGRecordingSequence+0xa0>

	//for(i=4;i<ADS1299_CHANNELS;i++){
	//	channset_value[i] = 0x01;
	//}

	write_ads1299_register(ADS1299_REG_CH1SET, ADS1299_CHANNELS, channset_value);
 8000d04:	1d3b      	adds	r3, r7, #4
 8000d06:	461a      	mov	r2, r3
 8000d08:	2108      	movs	r1, #8
 8000d0a:	2005      	movs	r0, #5
 8000d0c:	f000 f872 	bl	8000df4 <write_ads1299_register>

	HAL_Delay(1);
 8000d10:	2001      	movs	r0, #1
 8000d12:	f000 fbbf 	bl	8001494 <HAL_Delay>

	send_ads1299_command(ADS1299_RDATAC);
 8000d16:	2010      	movs	r0, #16
 8000d18:	f000 f84a 	bl	8000db0 <send_ads1299_command>

}
 8000d1c:	bf00      	nop
 8000d1e:	3710      	adds	r7, #16
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}

08000d24 <setnReset>:
}*/




static void setnReset(uint8_t value){
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ADS1299_nRESET_GPIO_Port, ADS1299_nRESET_Pin, value);
 8000d2e:	79fb      	ldrb	r3, [r7, #7]
 8000d30:	461a      	mov	r2, r3
 8000d32:	2180      	movs	r1, #128	@ 0x80
 8000d34:	4803      	ldr	r0, [pc, #12]	@ (8000d44 <setnReset+0x20>)
 8000d36:	f003 f8f1 	bl	8003f1c <HAL_GPIO_WritePin>
}
 8000d3a:	bf00      	nop
 8000d3c:	3708      	adds	r7, #8
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	48000800 	.word	0x48000800

08000d48 <setnPWRdown>:

static void setnPWRdown(uint8_t value){
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	4603      	mov	r3, r0
 8000d50:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ADS1299_nPWDN_GPIO_Port, ADS1299_nPWDN_Pin, value);
 8000d52:	79fb      	ldrb	r3, [r7, #7]
 8000d54:	461a      	mov	r2, r3
 8000d56:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d5a:	4803      	ldr	r0, [pc, #12]	@ (8000d68 <setnPWRdown+0x20>)
 8000d5c:	f003 f8de 	bl	8003f1c <HAL_GPIO_WritePin>
}
 8000d60:	bf00      	nop
 8000d62:	3708      	adds	r7, #8
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	48000800 	.word	0x48000800

08000d6c <setADS1299Start>:

static void setADS1299Start(uint8_t value){
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	4603      	mov	r3, r0
 8000d74:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ADS1299_START_GPIO_Port, ADS1299_START_Pin, value);
 8000d76:	79fb      	ldrb	r3, [r7, #7]
 8000d78:	461a      	mov	r2, r3
 8000d7a:	2140      	movs	r1, #64	@ 0x40
 8000d7c:	4803      	ldr	r0, [pc, #12]	@ (8000d8c <setADS1299Start+0x20>)
 8000d7e:	f003 f8cd 	bl	8003f1c <HAL_GPIO_WritePin>
}
 8000d82:	bf00      	nop
 8000d84:	3708      	adds	r7, #8
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	48000800 	.word	0x48000800

08000d90 <setADS1299CS>:

static void setADS1299CS(uint8_t value){
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	4603      	mov	r3, r0
 8000d98:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ADS1299_CS_GPIO_Port, ADS1299_CS_Pin, value);
 8000d9a:	79fb      	ldrb	r3, [r7, #7]
 8000d9c:	461a      	mov	r2, r3
 8000d9e:	2110      	movs	r1, #16
 8000da0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000da4:	f003 f8ba 	bl	8003f1c <HAL_GPIO_WritePin>
}
 8000da8:	bf00      	nop
 8000daa:	3708      	adds	r7, #8
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}

08000db0 <send_ads1299_command>:

static uint8_t send_ads1299_command(uint8_t command)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	4603      	mov	r3, r0
 8000db8:	71fb      	strb	r3, [r7, #7]
    // Pull CS (Chip Select) low to begin the SPI communication
	setADS1299CS(GPIO_PIN_RESET);  // Assuming CS is on GPIOA pin 4
 8000dba:	2000      	movs	r0, #0
 8000dbc:	f7ff ffe8 	bl	8000d90 <setADS1299CS>

    // Transmit the command to ADS1299
    if (HAL_SPI_Transmit(&hspi1, &command, 1, HAL_MAX_DELAY) != HAL_OK)
 8000dc0:	1df9      	adds	r1, r7, #7
 8000dc2:	f04f 33ff 	mov.w	r3, #4294967295
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	4809      	ldr	r0, [pc, #36]	@ (8000df0 <send_ads1299_command+0x40>)
 8000dca:	f005 fd58 	bl	800687e <HAL_SPI_Transmit>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d004      	beq.n	8000dde <send_ads1299_command+0x2e>
    {
    	setADS1299CS(GPIO_PIN_SET);
 8000dd4:	2001      	movs	r0, #1
 8000dd6:	f7ff ffdb 	bl	8000d90 <setADS1299CS>
        return HAL_ERROR;  // Return error if transmission fails
 8000dda:	2301      	movs	r3, #1
 8000ddc:	e003      	b.n	8000de6 <send_ads1299_command+0x36>
    }

    // Pull CS (Chip Select) high to end the SPI communication
    setADS1299CS(GPIO_PIN_SET);
 8000dde:	2001      	movs	r0, #1
 8000de0:	f7ff ffd6 	bl	8000d90 <setADS1299CS>

    return HAL_OK;  // Return success
 8000de4:	2300      	movs	r3, #0
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3708      	adds	r7, #8
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	200002d0 	.word	0x200002d0

08000df4 <write_ads1299_register>:
}



static uint8_t write_ads1299_register(uint8_t start_addr, uint8_t num_regs, uint8_t *data)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b084      	sub	sp, #16
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	603a      	str	r2, [r7, #0]
 8000dfe:	71fb      	strb	r3, [r7, #7]
 8000e00:	460b      	mov	r3, r1
 8000e02:	71bb      	strb	r3, [r7, #6]
    // Buffer to hold the command sequence
    uint8_t tx_buffer[2];
    tx_buffer[0] = ADS1299_WREG | start_addr;  // Write command with starting register address
 8000e04:	79fb      	ldrb	r3, [r7, #7]
 8000e06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e0a:	b2db      	uxtb	r3, r3
 8000e0c:	733b      	strb	r3, [r7, #12]
    tx_buffer[1] = num_regs - 1;                        // Number of registers to write (0-indexed)
 8000e0e:	79bb      	ldrb	r3, [r7, #6]
 8000e10:	3b01      	subs	r3, #1
 8000e12:	b2db      	uxtb	r3, r3
 8000e14:	737b      	strb	r3, [r7, #13]

    // Pull CS (Chip Select) low to begin the SPI communication
    setADS1299CS(GPIO_PIN_RESET);  // Assuming CS is on GPIOA pin 4
 8000e16:	2000      	movs	r0, #0
 8000e18:	f7ff ffba 	bl	8000d90 <setADS1299CS>

    // Transmit the write command and register address
    if (HAL_SPI_Transmit(&hspi1, tx_buffer, 2, HAL_MAX_DELAY) != HAL_OK)
 8000e1c:	f107 010c 	add.w	r1, r7, #12
 8000e20:	f04f 33ff 	mov.w	r3, #4294967295
 8000e24:	2202      	movs	r2, #2
 8000e26:	4814      	ldr	r0, [pc, #80]	@ (8000e78 <write_ads1299_register+0x84>)
 8000e28:	f005 fd29 	bl	800687e <HAL_SPI_Transmit>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d007      	beq.n	8000e42 <write_ads1299_register+0x4e>
    {
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);  // End SPI communication
 8000e32:	2201      	movs	r2, #1
 8000e34:	2110      	movs	r1, #16
 8000e36:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e3a:	f003 f86f 	bl	8003f1c <HAL_GPIO_WritePin>
        return HAL_ERROR;  // Return error if transmission fails
 8000e3e:	2301      	movs	r3, #1
 8000e40:	e016      	b.n	8000e70 <write_ads1299_register+0x7c>
    }

    // Transmit the data to be written to the registers
    if (HAL_SPI_Transmit(&hspi1, data, num_regs, HAL_MAX_DELAY) != HAL_OK)
 8000e42:	79bb      	ldrb	r3, [r7, #6]
 8000e44:	b29a      	uxth	r2, r3
 8000e46:	f04f 33ff 	mov.w	r3, #4294967295
 8000e4a:	6839      	ldr	r1, [r7, #0]
 8000e4c:	480a      	ldr	r0, [pc, #40]	@ (8000e78 <write_ads1299_register+0x84>)
 8000e4e:	f005 fd16 	bl	800687e <HAL_SPI_Transmit>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d007      	beq.n	8000e68 <write_ads1299_register+0x74>
    {
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);  // End SPI communication
 8000e58:	2201      	movs	r2, #1
 8000e5a:	2110      	movs	r1, #16
 8000e5c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e60:	f003 f85c 	bl	8003f1c <HAL_GPIO_WritePin>
        return HAL_ERROR;  // Return error if data transmission fails
 8000e64:	2301      	movs	r3, #1
 8000e66:	e003      	b.n	8000e70 <write_ads1299_register+0x7c>
    }

    setADS1299CS(GPIO_PIN_SET);
 8000e68:	2001      	movs	r0, #1
 8000e6a:	f7ff ff91 	bl	8000d90 <setADS1299CS>

    return HAL_OK;  // Return success
 8000e6e:	2300      	movs	r3, #0
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	3710      	adds	r7, #16
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	200002d0 	.word	0x200002d0

08000e7c <ADS1299_ReadSamples>:
 * @brief Reads samples from the ADS1299 via SPI.
 * @param statusBuffer Pointer to a buffer to store the 3 status bytes.
 * @param dataBuffer Pointer to a buffer to store the 24 data bytes (8 channels x 3 bytes each).
 * @retval HAL_StatusTypeDef HAL status indicating success or error.
 */
HAL_StatusTypeDef ADS1299_ReadSamples(uint8_t *statusBuffer, uint8_t *dataBuffer) {
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b08c      	sub	sp, #48	@ 0x30
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
 8000e84:	6039      	str	r1, [r7, #0]

    uint8_t spiRxBuffer[27] = {0}; // Buffer to store all received bytes (3 status + 24 data)
 8000e86:	2300      	movs	r3, #0
 8000e88:	60fb      	str	r3, [r7, #12]
 8000e8a:	f107 0310 	add.w	r3, r7, #16
 8000e8e:	2200      	movs	r2, #0
 8000e90:	601a      	str	r2, [r3, #0]
 8000e92:	605a      	str	r2, [r3, #4]
 8000e94:	609a      	str	r2, [r3, #8]
 8000e96:	60da      	str	r2, [r3, #12]
 8000e98:	611a      	str	r2, [r3, #16]
 8000e9a:	f8c3 2013 	str.w	r2, [r3, #19]
    HAL_StatusTypeDef result;

    // Ensure that statusBuffer and dataBuffer are not NULL
    if (statusBuffer == NULL || dataBuffer == NULL) {
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d002      	beq.n	8000eaa <ADS1299_ReadSamples+0x2e>
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d101      	bne.n	8000eae <ADS1299_ReadSamples+0x32>
        return HAL_ERROR;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	e03d      	b.n	8000f2a <ADS1299_ReadSamples+0xae>
    }

    setADS1299CS(GPIO_PIN_RESET);
 8000eae:	2000      	movs	r0, #0
 8000eb0:	f7ff ff6e 	bl	8000d90 <setADS1299CS>

    // Perform SPI reception of 27 bytes
    result = HAL_SPI_Receive(&hspi1, spiRxBuffer, 27, HAL_MAX_DELAY);
 8000eb4:	f107 010c 	add.w	r1, r7, #12
 8000eb8:	f04f 33ff 	mov.w	r3, #4294967295
 8000ebc:	221b      	movs	r2, #27
 8000ebe:	481d      	ldr	r0, [pc, #116]	@ (8000f34 <ADS1299_ReadSamples+0xb8>)
 8000ec0:	f005 fe52 	bl	8006b68 <HAL_SPI_Receive>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    setADS1299CS(GPIO_PIN_SET);
 8000eca:	2001      	movs	r0, #1
 8000ecc:	f7ff ff60 	bl	8000d90 <setADS1299CS>

    if (result != HAL_OK) {
 8000ed0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d002      	beq.n	8000ede <ADS1299_ReadSamples+0x62>
        return result; // Return if there is an SPI error
 8000ed8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000edc:	e025      	b.n	8000f2a <ADS1299_ReadSamples+0xae>
    }

    // Copy the first 3 bytes to the status buffer
    for (int i = 0; i < 3; i++) {
 8000ede:	2300      	movs	r3, #0
 8000ee0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000ee2:	e00b      	b.n	8000efc <ADS1299_ReadSamples+0x80>
        statusBuffer[i] = spiRxBuffer[i];
 8000ee4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ee6:	687a      	ldr	r2, [r7, #4]
 8000ee8:	4413      	add	r3, r2
 8000eea:	f107 010c 	add.w	r1, r7, #12
 8000eee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000ef0:	440a      	add	r2, r1
 8000ef2:	7812      	ldrb	r2, [r2, #0]
 8000ef4:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 3; i++) {
 8000ef6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ef8:	3301      	adds	r3, #1
 8000efa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000efc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000efe:	2b02      	cmp	r3, #2
 8000f00:	ddf0      	ble.n	8000ee4 <ADS1299_ReadSamples+0x68>
    }

    // Copy the next 24 bytes to the data buffer
    for (int i = 0; i < 24; i++) {
 8000f02:	2300      	movs	r3, #0
 8000f04:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000f06:	e00c      	b.n	8000f22 <ADS1299_ReadSamples+0xa6>
        dataBuffer[i] = spiRxBuffer[i + 3];
 8000f08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f0a:	1cda      	adds	r2, r3, #3
 8000f0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f0e:	6839      	ldr	r1, [r7, #0]
 8000f10:	440b      	add	r3, r1
 8000f12:	3230      	adds	r2, #48	@ 0x30
 8000f14:	443a      	add	r2, r7
 8000f16:	f812 2c24 	ldrb.w	r2, [r2, #-36]
 8000f1a:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 24; i++) {
 8000f1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f1e:	3301      	adds	r3, #1
 8000f20:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000f22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f24:	2b17      	cmp	r3, #23
 8000f26:	ddef      	ble.n	8000f08 <ADS1299_ReadSamples+0x8c>
    }

    return HAL_OK;
 8000f28:	2300      	movs	r3, #0
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3730      	adds	r7, #48	@ 0x30
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	200002d0 	.word	0x200002d0

08000f38 <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 8000f38:	b5b0      	push	{r4, r5, r7, lr}
 8000f3a:	b088      	sub	sp, #32
 8000f3c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8000f3e:	4b0b      	ldr	r3, [pc, #44]	@ (8000f6c <APPD_EnableCPU2+0x34>)
 8000f40:	1d3c      	adds	r4, r7, #4
 8000f42:	461d      	mov	r5, r3
 8000f44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f48:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f4c:	c403      	stmia	r4!, {r0, r1}
 8000f4e:	8022      	strh	r2, [r4, #0]
 8000f50:	3402      	adds	r4, #2
 8000f52:	0c13      	lsrs	r3, r2, #16
 8000f54:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8000f56:	f00a f91d 	bl	800b194 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8000f5a:	1d3b      	adds	r3, r7, #4
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f009 fbae 	bl	800a6be <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 8000f62:	bf00      	nop
}
 8000f64:	3720      	adds	r7, #32
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bdb0      	pop	{r4, r5, r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	0800f1f4 	.word	0x0800f1f4

08000f70 <DbgOutputTraces>:
/* USER CODE END DbgOutputInit */
  return;
}

void DbgOutputTraces(  uint8_t *p_data, uint16_t size, void (*cb)(void) )
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b084      	sub	sp, #16
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	60f8      	str	r0, [r7, #12]
 8000f78:	460b      	mov	r3, r1
 8000f7a:	607a      	str	r2, [r7, #4]
 8000f7c:	817b      	strh	r3, [r7, #10]
/* USER CODE END DbgOutputTraces */
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 8000f7e:	897a      	ldrh	r2, [r7, #10]
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	68f9      	ldr	r1, [r7, #12]
 8000f84:	2000      	movs	r0, #0
 8000f86:	f001 f989 	bl	800229c <HW_UART_Transmit_DMA>

/* USER CODE END DbgOutputTraces */
  return;
 8000f8a:	bf00      	nop
}
 8000f8c:	3710      	adds	r7, #16
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
	...

08000f94 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8000f9c:	4b07      	ldr	r3, [pc, #28]	@ (8000fbc <LL_C2_PWR_SetPowerMode+0x28>)
 8000f9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000fa2:	f023 0207 	bic.w	r2, r3, #7
 8000fa6:	4905      	ldr	r1, [pc, #20]	@ (8000fbc <LL_C2_PWR_SetPowerMode+0x28>)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	4313      	orrs	r3, r2
 8000fac:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8000fb0:	bf00      	nop
 8000fb2:	370c      	adds	r7, #12
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr
 8000fbc:	58000400 	.word	0x58000400

08000fc0 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000fc8:	4b06      	ldr	r3, [pc, #24]	@ (8000fe4 <LL_EXTI_EnableIT_32_63+0x24>)
 8000fca:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8000fce:	4905      	ldr	r1, [pc, #20]	@ (8000fe4 <LL_EXTI_EnableIT_32_63+0x24>)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8000fd8:	bf00      	nop
 8000fda:	370c      	adds	r7, #12
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr
 8000fe4:	58000800 	.word	0x58000800

08000fe8 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8000ff0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ff4:	4a0a      	ldr	r2, [pc, #40]	@ (8001020 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8000ff6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8000ffa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ffe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001002:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	021b      	lsls	r3, r3, #8
 800100a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800100e:	4313      	orrs	r3, r2
 8001010:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
}
 8001014:	bf00      	nop
 8001016:	370c      	adds	r7, #12
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr
 8001020:	cafecafe 	.word	0xcafecafe

08001024 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 800102c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001030:	689b      	ldr	r3, [r3, #8]
 8001032:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8001036:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4313      	orrs	r3, r2
 800103e:	608b      	str	r3, [r1, #8]
}
 8001040:	bf00      	nop
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr

0800104c <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 8001050:	4b04      	ldr	r3, [pc, #16]	@ (8001064 <LL_DBGMCU_GetDeviceID+0x18>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8001058:	4618      	mov	r0, r3
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	e0042000 	.word	0xe0042000

08001068 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 800106c:	4b04      	ldr	r3, [pc, #16]	@ (8001080 <LL_DBGMCU_GetRevisionID+0x18>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	0c1b      	lsrs	r3, r3, #16
 8001072:	b29b      	uxth	r3, r3
}
 8001074:	4618      	mov	r0, r3
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	e0042000 	.word	0xe0042000

08001084 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001088:	4b05      	ldr	r3, [pc, #20]	@ (80010a0 <LL_LPM_EnableSleep+0x1c>)
 800108a:	691b      	ldr	r3, [r3, #16]
 800108c:	4a04      	ldr	r2, [pc, #16]	@ (80010a0 <LL_LPM_EnableSleep+0x1c>)
 800108e:	f023 0304 	bic.w	r3, r3, #4
 8001092:	6113      	str	r3, [r2, #16]
}
 8001094:	bf00      	nop
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	e000ed00 	.word	0xe000ed00

080010a4 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	22ff      	movs	r2, #255	@ 0xff
 80010b0:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80010b2:	bf00      	nop
 80010b4:	370c      	adds	r7, #12
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr

080010be <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 80010be:	b480      	push	{r7}
 80010c0:	b083      	sub	sp, #12
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	22ca      	movs	r2, #202	@ 0xca
 80010ca:	625a      	str	r2, [r3, #36]	@ 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2253      	movs	r2, #83	@ 0x53
 80010d0:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80010d2:	bf00      	nop
 80010d4:	370c      	adds	r7, #12
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr

080010de <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 80010de:	b480      	push	{r7}
 80010e0:	b083      	sub	sp, #12
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	6078      	str	r0, [r7, #4]
 80010e6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	689b      	ldr	r3, [r3, #8]
 80010ec:	f023 0207 	bic.w	r2, r3, #7
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	431a      	orrs	r2, r3
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	609a      	str	r2, [r3, #8]
}
 80010f8:	bf00      	nop
 80010fa:	370c      	adds	r7, #12
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr

08001104 <MX_APPE_Config>:
static void UartCmdExecute(void);
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001108:	4b04      	ldr	r3, [pc, #16]	@ (800111c <MX_APPE_Config+0x18>)
 800110a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800110e:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8001110:	f000 f828 	bl	8001164 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8001114:	f000 f82d 	bl	8001172 <Config_HSE>

  return;
 8001118:	bf00      	nop
}
 800111a:	bd80      	pop	{r7, pc}
 800111c:	58004000 	.word	0x58004000

08001120 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8001124:	f000 f839 	bl	800119a <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8001128:	f000 f852 	bl	80011d0 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 800112c:	4905      	ldr	r1, [pc, #20]	@ (8001144 <MX_APPE_Init+0x24>)
 800112e:	2000      	movs	r0, #0
 8001130:	f000 fe48 	bl	8001dc4 <HW_TS_Init>
  
  /**
   * The Standby mode should not be entered before the initialization is over
   * The default state of the Low Power Manager is to allow the Standby Mode so an request is needed here
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 8001134:	2101      	movs	r1, #1
 8001136:	2001      	movs	r0, #1
 8001138:	f00c fc36 	bl	800d9a8 <UTIL_LPM_SetOffMode>
  //Button_Init();

  //RxUART_Init();

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 800113c:	f000 f856 	bl	80011ec <appe_Tl_Init>
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */

   return;
 8001140:	bf00      	nop
}
 8001142:	bd80      	pop	{r7, pc}
 8001144:	200001b8 	.word	0x200001b8

08001148 <Init_Smps>:

void Init_Smps(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 800114c:	bf00      	nop
}
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr

08001156 <Init_Exti>:

void Init_Exti(void)
{
 8001156:	b580      	push	{r7, lr}
 8001158:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 800115a:	2050      	movs	r0, #80	@ 0x50
 800115c:	f7ff ff30 	bl	8000fc0 <LL_EXTI_EnableIT_32_63>

  return;
 8001160:	bf00      	nop
}
 8001162:	bd80      	pop	{r7, pc}

08001164 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  Reset_BackupDomain();

  Reset_IPCC();
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 8001168:	bf00      	nop
}
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr

08001172 <Config_HSE>:
  return;
}
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8001172:	b580      	push	{r7, lr}
 8001174:	b082      	sub	sp, #8
 8001176:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8001178:	2000      	movs	r0, #0
 800117a:	f00a f937 	bl	800b3ec <OTP_Read>
 800117e:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d005      	beq.n	8001192 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	799b      	ldrb	r3, [r3, #6]
 800118a:	4618      	mov	r0, r3
 800118c:	f7ff ff2c 	bl	8000fe8 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8001190:	bf00      	nop
 8001192:	bf00      	nop
}
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}

0800119a <System_Init>:

static void System_Init(void)
{
 800119a:	b580      	push	{r7, lr}
 800119c:	af00      	add	r7, sp, #0
  Init_Smps();
 800119e:	f7ff ffd3 	bl	8001148 <Init_Smps>

  Init_Exti();
 80011a2:	f7ff ffd8 	bl	8001156 <Init_Exti>

  Init_Rtc();
 80011a6:	f000 f803 	bl	80011b0 <Init_Rtc>

  return;
 80011aa:	bf00      	nop
}
 80011ac:	bd80      	pop	{r7, pc}
	...

080011b0 <Init_Rtc>:

static void Init_Rtc(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 80011b4:	4805      	ldr	r0, [pc, #20]	@ (80011cc <Init_Rtc+0x1c>)
 80011b6:	f7ff ff82 	bl	80010be <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 80011ba:	2100      	movs	r1, #0
 80011bc:	4803      	ldr	r0, [pc, #12]	@ (80011cc <Init_Rtc+0x1c>)
 80011be:	f7ff ff8e 	bl	80010de <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 80011c2:	4802      	ldr	r0, [pc, #8]	@ (80011cc <Init_Rtc+0x1c>)
 80011c4:	f7ff ff6e 	bl	80010a4 <LL_RTC_EnableWriteProtection>

  return;
 80011c8:	bf00      	nop
}
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	40002800 	.word	0x40002800

080011d0 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 80011d4:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80011d8:	f7ff ff24 	bl	8001024 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 80011dc:	f00c fbd2 	bl	800d984 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 80011e0:	2004      	movs	r0, #4
 80011e2:	f7ff fed7 	bl	8000f94 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 80011e6:	bf00      	nop
}
 80011e8:	bd80      	pop	{r7, pc}
	...

080011ec <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b088      	sub	sp, #32
 80011f0:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 80011f2:	f009 fe19 	bl	800ae28 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 80011f6:	4a11      	ldr	r2, [pc, #68]	@ (800123c <appe_Tl_Init+0x50>)
 80011f8:	2100      	movs	r1, #0
 80011fa:	2020      	movs	r0, #32
 80011fc:	f00c fd00 	bl	800dc00 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8001200:	4b0f      	ldr	r3, [pc, #60]	@ (8001240 <appe_Tl_Init+0x54>)
 8001202:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8001204:	4b0f      	ldr	r3, [pc, #60]	@ (8001244 <appe_Tl_Init+0x58>)
 8001206:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8001208:	463b      	mov	r3, r7
 800120a:	4619      	mov	r1, r3
 800120c:	480e      	ldr	r0, [pc, #56]	@ (8001248 <appe_Tl_Init+0x5c>)
 800120e:	f009 fccd 	bl	800abac <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8001212:	4b0e      	ldr	r3, [pc, #56]	@ (800124c <appe_Tl_Init+0x60>)
 8001214:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8001216:	4b0e      	ldr	r3, [pc, #56]	@ (8001250 <appe_Tl_Init+0x64>)
 8001218:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 800121a:	4b0e      	ldr	r3, [pc, #56]	@ (8001254 <appe_Tl_Init+0x68>)
 800121c:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 800121e:	f44f 6306 	mov.w	r3, #2144	@ 0x860
 8001222:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8001224:	f107 0308 	add.w	r3, r7, #8
 8001228:	4618      	mov	r0, r3
 800122a:	f009 ff3f 	bl	800b0ac <TL_MM_Init>

  TL_Enable();
 800122e:	f009 fdf5 	bl	800ae1c <TL_Enable>

  return;
 8001232:	bf00      	nop
}
 8001234:	3720      	adds	r7, #32
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	0800abe5 	.word	0x0800abe5
 8001240:	20030a58 	.word	0x20030a58
 8001244:	08001259 	.word	0x08001259
 8001248:	08001271 	.word	0x08001271
 800124c:	20030c70 	.word	0x20030c70
 8001250:	20030b64 	.word	0x20030b64
 8001254:	200301f8 	.word	0x200301f8

08001258 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	4603      	mov	r3, r0
 8001260:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8001262:	bf00      	nop
}
 8001264:	370c      	adds	r7, #12
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
	...

08001270 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b088      	sub	sp, #32
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	330b      	adds	r3, #11
 800127e:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 8001280:	69fb      	ldr	r3, [r7, #28]
 8001282:	881b      	ldrh	r3, [r3, #0]
 8001284:	b29b      	uxth	r3, r3
 8001286:	f5a3 4312 	sub.w	r3, r3, #37376	@ 0x9200
 800128a:	2b07      	cmp	r3, #7
 800128c:	d860      	bhi.n	8001350 <APPE_SysUserEvtRx+0xe0>
 800128e:	a201      	add	r2, pc, #4	@ (adr r2, 8001294 <APPE_SysUserEvtRx+0x24>)
 8001290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001294:	080012b5 	.word	0x080012b5
 8001298:	080012f7 	.word	0x080012f7
 800129c:	08001305 	.word	0x08001305
 80012a0:	08001351 	.word	0x08001351
 80012a4:	08001321 	.word	0x08001321
 80012a8:	08001331 	.word	0x08001331
 80012ac:	08001339 	.word	0x08001339
 80012b0:	08001349 	.word	0x08001349
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 80012b4:	f107 030c 	add.w	r3, r7, #12
 80012b8:	4618      	mov	r0, r3
 80012ba:	f009 fa2d 	bl	800a718 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
 80012be:	7b3b      	ldrb	r3, [r7, #12]
 80012c0:	4619      	mov	r1, r3
 80012c2:	7b7b      	ldrb	r3, [r7, #13]
 80012c4:	461a      	mov	r2, r3
 80012c6:	7bbb      	ldrb	r3, [r7, #14]
 80012c8:	4824      	ldr	r0, [pc, #144]	@ (800135c <APPE_SysUserEvtRx+0xec>)
 80012ca:	f00c fe79 	bl	800dfc0 <iprintf>
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
 80012ce:	7c3b      	ldrb	r3, [r7, #16]
 80012d0:	4619      	mov	r1, r3
 80012d2:	4823      	ldr	r0, [pc, #140]	@ (8001360 <APPE_SysUserEvtRx+0xf0>)
 80012d4:	f00c fe74 	bl	800dfc0 <iprintf>
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);
 80012d8:	7dbb      	ldrb	r3, [r7, #22]
 80012da:	4619      	mov	r1, r3
 80012dc:	7dfb      	ldrb	r3, [r7, #23]
 80012de:	461a      	mov	r2, r3
 80012e0:	7e3b      	ldrb	r3, [r7, #24]
 80012e2:	4820      	ldr	r0, [pc, #128]	@ (8001364 <APPE_SysUserEvtRx+0xf4>)
 80012e4:	f00c fe6c 	bl	800dfc0 <iprintf>

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
 80012e8:	481f      	ldr	r0, [pc, #124]	@ (8001368 <APPE_SysUserEvtRx+0xf8>)
 80012ea:	f00c fe69 	bl	800dfc0 <iprintf>
    APPE_SysEvtReadyProcessing(pPayload);
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f000 f870 	bl	80013d4 <APPE_SysEvtReadyProcessing>
    break;
 80012f4:	e02d      	b.n	8001352 <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
 80012f6:	481d      	ldr	r0, [pc, #116]	@ (800136c <APPE_SysUserEvtRx+0xfc>)
 80012f8:	f00c fe62 	bl	800dfc0 <iprintf>
    APPE_SysEvtError(pPayload);
 80012fc:	6878      	ldr	r0, [r7, #4]
 80012fe:	f000 f843 	bl	8001388 <APPE_SysEvtError>
    break;
 8001302:	e026      	b.n	8001352 <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE -- BLE NVM RAM HAS BEEN UPDATED BY CPU2 \n");
 8001304:	481a      	ldr	r0, [pc, #104]	@ (8001370 <APPE_SysUserEvtRx+0x100>)
 8001306:	f00c fecb 	bl	800e0a0 <puts>
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->StartAddress,
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	3302      	adds	r3, #2
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
 800130e:	6819      	ldr	r1, [r3, #0]
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->Size);
 8001310:	69fb      	ldr	r3, [r7, #28]
 8001312:	3302      	adds	r3, #2
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	461a      	mov	r2, r3
 8001318:	4816      	ldr	r0, [pc, #88]	@ (8001374 <APPE_SysUserEvtRx+0x104>)
 800131a:	f00c fe51 	bl	800dfc0 <iprintf>
    break;
 800131e:	e018      	b.n	8001352 <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_START_WRITE:
    APP_DBG_MSG("==>> SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
                ((SHCI_C2_NvmStartWrite_Evt_t*)p_sys_event->payload)->NumberOfWords);
 8001320:	69fb      	ldr	r3, [r7, #28]
 8001322:	3302      	adds	r3, #2
    APP_DBG_MSG("==>> SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4619      	mov	r1, r3
 8001328:	4813      	ldr	r0, [pc, #76]	@ (8001378 <APPE_SysUserEvtRx+0x108>)
 800132a:	f00c fe49 	bl	800dfc0 <iprintf>
    break;
 800132e:	e010      	b.n	8001352 <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_END_WRITE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_WRITE\n\r");
 8001330:	4812      	ldr	r0, [pc, #72]	@ (800137c <APPE_SysUserEvtRx+0x10c>)
 8001332:	f00c fe45 	bl	800dfc0 <iprintf>
    break;
 8001336:	e00c      	b.n	8001352 <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_START_ERASE:
    APP_DBG_MSG("==>>SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
                ((SHCI_C2_NvmStartErase_Evt_t*)p_sys_event->payload)->NumberOfSectors);
 8001338:	69fb      	ldr	r3, [r7, #28]
 800133a:	3302      	adds	r3, #2
    APP_DBG_MSG("==>>SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4619      	mov	r1, r3
 8001340:	480f      	ldr	r0, [pc, #60]	@ (8001380 <APPE_SysUserEvtRx+0x110>)
 8001342:	f00c fe3d 	bl	800dfc0 <iprintf>
    break;
 8001346:	e004      	b.n	8001352 <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
 8001348:	480e      	ldr	r0, [pc, #56]	@ (8001384 <APPE_SysUserEvtRx+0x114>)
 800134a:	f00c fe39 	bl	800dfc0 <iprintf>
    break;
 800134e:	e000      	b.n	8001352 <APPE_SysUserEvtRx+0xe2>

  default:
    break;
 8001350:	bf00      	nop
  }

  return;
 8001352:	bf00      	nop
}
 8001354:	3720      	adds	r7, #32
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	0800f210 	.word	0x0800f210
 8001360:	0800f234 	.word	0x0800f234
 8001364:	0800f250 	.word	0x0800f250
 8001368:	0800f268 	.word	0x0800f268
 800136c:	0800f288 	.word	0x0800f288
 8001370:	0800f2ac 	.word	0x0800f2ac
 8001374:	0800f2fc 	.word	0x0800f2fc
 8001378:	0800f324 	.word	0x0800f324
 800137c:	0800f360 	.word	0x0800f360
 8001380:	0800f384 	.word	0x0800f384
 8001384:	0800f3c0 	.word	0x0800f3c0

08001388 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	330b      	adds	r3, #11
 8001396:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	3302      	adds	r3, #2
 800139c:	60bb      	str	r3, [r7, #8]

  APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON %x \n\r",(*p_sys_error_code));
 800139e:	68bb      	ldr	r3, [r7, #8]
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	4619      	mov	r1, r3
 80013a4:	4808      	ldr	r0, [pc, #32]	@ (80013c8 <APPE_SysEvtError+0x40>)
 80013a6:	f00c fe0b 	bl	800dfc0 <iprintf>

  if ((*p_sys_error_code) == ERR_BLE_INIT)
 80013aa:	68bb      	ldr	r3, [r7, #8]
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d103      	bne.n	80013ba <APPE_SysEvtError+0x32>
  {
    /* Error during BLE stack initialization */
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - ERR_BLE_INIT \n");
 80013b2:	4806      	ldr	r0, [pc, #24]	@ (80013cc <APPE_SysEvtError+0x44>)
 80013b4:	f00c fe74 	bl	800e0a0 <puts>
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 80013b8:	e003      	b.n	80013c2 <APPE_SysEvtError+0x3a>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
 80013ba:	4805      	ldr	r0, [pc, #20]	@ (80013d0 <APPE_SysEvtError+0x48>)
 80013bc:	f00c fe70 	bl	800e0a0 <puts>
  return;
 80013c0:	bf00      	nop
}
 80013c2:	3710      	adds	r7, #16
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	0800f3e4 	.word	0x0800f3e4
 80013cc:	0800f414 	.word	0x0800f414
 80013d0:	0800f450 	.word	0x0800f450

080013d4 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b08a      	sub	sp, #40	@ 0x28
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 80013dc:	f107 0308 	add.w	r3, r7, #8
 80013e0:	2200      	movs	r2, #0
 80013e2:	601a      	str	r2, [r3, #0]
 80013e4:	605a      	str	r2, [r3, #4]
 80013e6:	609a      	str	r2, [r3, #8]
 80013e8:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 80013ea:	2300      	movs	r3, #0
 80013ec:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t DeviceID=0;
 80013ee:	2300      	movs	r3, #0
 80013f0:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	330b      	adds	r3, #11
 80013f8:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	3302      	adds	r3, #2
 80013fe:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 8001400:	69bb      	ldr	r3, [r7, #24]
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d128      	bne.n	800145a <APPE_SysEvtReadyProcessing+0x86>
  {
    /**
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");
 8001408:	481d      	ldr	r0, [pc, #116]	@ (8001480 <APPE_SysEvtReadyProcessing+0xac>)
 800140a:	f00c fe49 	bl	800e0a0 <puts>

    /* Traces channel initialization */
    APPD_EnableCPU2();
 800140e:	f7ff fd93 	bl	8000f38 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 8001412:	230f      	movs	r3, #15
 8001414:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 8001416:	237f      	movs	r3, #127	@ 0x7f
 8001418:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 800141a:	f7ff fe25 	bl	8001068 <LL_DBGMCU_GetRevisionID>
 800141e:	6278      	str	r0, [r7, #36]	@ 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);
 8001420:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001422:	4818      	ldr	r0, [pc, #96]	@ (8001484 <APPE_SysEvtReadyProcessing+0xb0>)
 8001424:	f00c fdcc 	bl	800dfc0 <iprintf>

    config_param.RevisionID = (uint16_t)RevisionID;
 8001428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800142a:	b29b      	uxth	r3, r3
 800142c:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 800142e:	f7ff fe0d 	bl	800104c <LL_DBGMCU_GetDeviceID>
 8001432:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
 8001434:	6a39      	ldr	r1, [r7, #32]
 8001436:	4814      	ldr	r0, [pc, #80]	@ (8001488 <APPE_SysEvtReadyProcessing+0xb4>)
 8001438:	f00c fdc2 	bl	800dfc0 <iprintf>
    config_param.DeviceID = (uint16_t)DeviceID;
 800143c:	6a3b      	ldr	r3, [r7, #32]
 800143e:	b29b      	uxth	r3, r3
 8001440:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 8001442:	f107 0308 	add.w	r3, r7, #8
 8001446:	4618      	mov	r0, r3
 8001448:	f009 f950 	bl	800a6ec <SHCI_C2_Config>

    APP_BLE_Init();
 800144c:	f00a fca2 	bl	800bd94 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8001450:	2100      	movs	r1, #0
 8001452:	2001      	movs	r0, #1
 8001454:	f00c faa8 	bl	800d9a8 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 8001458:	e00e      	b.n	8001478 <APPE_SysEvtReadyProcessing+0xa4>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 800145a:	69bb      	ldr	r3, [r7, #24]
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	2b01      	cmp	r3, #1
 8001460:	d106      	bne.n	8001470 <APPE_SysEvtReadyProcessing+0x9c>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - FUS_FW_RUNNING \n\r");
 8001462:	480a      	ldr	r0, [pc, #40]	@ (800148c <APPE_SysEvtReadyProcessing+0xb8>)
 8001464:	f00c fdac 	bl	800dfc0 <iprintf>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2200      	movs	r2, #0
 800146c:	701a      	strb	r2, [r3, #0]
  return;
 800146e:	e003      	b.n	8001478 <APPE_SysEvtReadyProcessing+0xa4>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
 8001470:	4807      	ldr	r0, [pc, #28]	@ (8001490 <APPE_SysEvtReadyProcessing+0xbc>)
 8001472:	f00c fda5 	bl	800dfc0 <iprintf>
  return;
 8001476:	bf00      	nop
}
 8001478:	3728      	adds	r7, #40	@ 0x28
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	0800f488 	.word	0x0800f488
 8001484:	0800f4a4 	.word	0x0800f4a4
 8001488:	0800f4c8 	.word	0x0800f4c8
 800148c:	0800f4e8 	.word	0x0800f4e8
 8001490:	0800f51c 	.word	0x0800f51c

08001494 <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b084      	sub	sp, #16
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800149c:	f001 fede 	bl	800325c <HAL_GetTick>
 80014a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014ac:	d00a      	beq.n	80014c4 <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 80014ae:	f001 feed 	bl	800328c <HAL_GetTickFreq>
 80014b2:	4603      	mov	r3, r0
 80014b4:	461a      	mov	r2, r3
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	4413      	add	r3, r2
 80014ba:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014bc:	e002      	b.n	80014c4 <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 80014be:	f7ff fde1 	bl	8001084 <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM) || defined (__ARMCC_VERSION)
    __force_stores();
  #endif /* __ARMCC_VERSION */

    __WFI();
 80014c2:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 80014c4:	f001 feca 	bl	800325c <HAL_GetTick>
 80014c8:	4602      	mov	r2, r0
 80014ca:	68bb      	ldr	r3, [r7, #8]
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	68fa      	ldr	r2, [r7, #12]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d8f4      	bhi.n	80014be <HAL_Delay+0x2a>
  }
}
 80014d4:	bf00      	nop
 80014d6:	bf00      	nop
 80014d8:	3710      	adds	r7, #16
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}

080014de <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 80014de:	b580      	push	{r7, lr}
 80014e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80014e2:	f04f 30ff 	mov.w	r0, #4294967295
 80014e6:	f00c fa8f 	bl	800da08 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 80014ea:	bf00      	nop
 80014ec:	bd80      	pop	{r7, pc}

080014ee <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 80014ee:	b480      	push	{r7}
 80014f0:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 80014f2:	bf00      	nop
}
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr

080014fc <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
 8001504:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001506:	f04f 30ff 	mov.w	r0, #4294967295
 800150a:	f00c fa7d 	bl	800da08 <UTIL_SEQ_Run>
  return;
 800150e:	bf00      	nop
}
 8001510:	3708      	adds	r7, #8
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}

08001516 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8001516:	b580      	push	{r7, lr}
 8001518:	b082      	sub	sp, #8
 800151a:	af00      	add	r7, sp, #0
 800151c:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800151e:	2100      	movs	r1, #0
 8001520:	2020      	movs	r0, #32
 8001522:	f00c fb8f 	bl	800dc44 <UTIL_SEQ_SetTask>
  return;
 8001526:	bf00      	nop
}
 8001528:	3708      	adds	r7, #8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}

0800152e <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 800152e:	b580      	push	{r7, lr}
 8001530:	b082      	sub	sp, #8
 8001532:	af00      	add	r7, sp, #0
 8001534:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8001536:	2002      	movs	r0, #2
 8001538:	f00c fbf0 	bl	800dd1c <UTIL_SEQ_SetEvt>
  return;
 800153c:	bf00      	nop
}
 800153e:	3708      	adds	r7, #8
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}

08001544 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 800154c:	2002      	movs	r0, #2
 800154e:	f00c fc05 	bl	800dd5c <UTIL_SEQ_WaitEvt>
  return;
 8001552:	bf00      	nop
}
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}

0800155a <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN FD_WRAP_FUNCTIONS */
void HAL_GPIO_EXTI_Callback( uint16_t GPIO_Pin )
{
 800155a:	b580      	push	{r7, lr}
 800155c:	b082      	sub	sp, #8
 800155e:	af00      	add	r7, sp, #0
 8001560:	4603      	mov	r3, r0
 8001562:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 8001564:	88fb      	ldrh	r3, [r7, #6]
 8001566:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800156a:	d00b      	beq.n	8001584 <HAL_GPIO_EXTI_Callback+0x2a>
 800156c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001570:	dc0e      	bgt.n	8001590 <HAL_GPIO_EXTI_Callback+0x36>
 8001572:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001576:	d008      	beq.n	800158a <HAL_GPIO_EXTI_Callback+0x30>
 8001578:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800157c:	d108      	bne.n	8001590 <HAL_GPIO_EXTI_Callback+0x36>
  {
  case GPIO_PIN_12:
    /* SW button 1 */
    APP_SWA_Button_Action();
 800157e:	f00b fed1 	bl	800d324 <APP_SWA_Button_Action>
    break; 
 8001582:	e006      	b.n	8001592 <HAL_GPIO_EXTI_Callback+0x38>
    
  case GPIO_PIN_13:
    /* SW button 2 */
	APP_SWB_Button_Action();
 8001584:	f00b fed6 	bl	800d334 <APP_SWB_Button_Action>
    break;
 8001588:	e003      	b.n	8001592 <HAL_GPIO_EXTI_Callback+0x38>

  case ADS1299_nDRDY_Pin:
    APP_BLE_Manage_ADS1299_event();
 800158a:	f00b ff1f 	bl	800d3cc <APP_BLE_Manage_ADS1299_event>
    break; 
 800158e:	e000      	b.n	8001592 <HAL_GPIO_EXTI_Callback+0x38>

  default:
    break;
 8001590:	bf00      	nop
  }
  return;
 8001592:	bf00      	nop
}
 8001594:	3708      	adds	r7, #8
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
	...

0800159c <LL_EXTI_EnableIT_0_31>:
{
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80015a4:	4b06      	ldr	r3, [pc, #24]	@ (80015c0 <LL_EXTI_EnableIT_0_31+0x24>)
 80015a6:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80015aa:	4905      	ldr	r1, [pc, #20]	@ (80015c0 <LL_EXTI_EnableIT_0_31+0x24>)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	4313      	orrs	r3, r2
 80015b0:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 80015b4:	bf00      	nop
 80015b6:	370c      	adds	r7, #12
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr
 80015c0:	58000800 	.word	0x58000800

080015c4 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80015cc:	4b05      	ldr	r3, [pc, #20]	@ (80015e4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	4904      	ldr	r1, [pc, #16]	@ (80015e4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4313      	orrs	r3, r2
 80015d6:	600b      	str	r3, [r1, #0]

}
 80015d8:	bf00      	nop
 80015da:	370c      	adds	r7, #12
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr
 80015e4:	58000800 	.word	0x58000800

080015e8 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80015ee:	4b0d      	ldr	r3, [pc, #52]	@ (8001624 <ReadRtcSsrValue+0x3c>)
 80015f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015f2:	b29b      	uxth	r3, r3
 80015f4:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80015f6:	4b0b      	ldr	r3, [pc, #44]	@ (8001624 <ReadRtcSsrValue+0x3c>)
 80015f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015fa:	b29b      	uxth	r3, r3
 80015fc:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 80015fe:	e005      	b.n	800160c <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001604:	4b07      	ldr	r3, [pc, #28]	@ (8001624 <ReadRtcSsrValue+0x3c>)
 8001606:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001608:	b29b      	uxth	r3, r3
 800160a:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 800160c:	687a      	ldr	r2, [r7, #4]
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	429a      	cmp	r2, r3
 8001612:	d1f5      	bne.n	8001600 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8001614:	683b      	ldr	r3, [r7, #0]
}
 8001616:	4618      	mov	r0, r3
 8001618:	370c      	adds	r7, #12
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop
 8001624:	40002800 	.word	0x40002800

08001628 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8001628:	b480      	push	{r7}
 800162a:	b085      	sub	sp, #20
 800162c:	af00      	add	r7, sp, #0
 800162e:	4603      	mov	r3, r0
 8001630:	460a      	mov	r2, r1
 8001632:	71fb      	strb	r3, [r7, #7]
 8001634:	4613      	mov	r3, r2
 8001636:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8001638:	79ba      	ldrb	r2, [r7, #6]
 800163a:	491d      	ldr	r1, [pc, #116]	@ (80016b0 <LinkTimerAfter+0x88>)
 800163c:	4613      	mov	r3, r2
 800163e:	005b      	lsls	r3, r3, #1
 8001640:	4413      	add	r3, r2
 8001642:	00db      	lsls	r3, r3, #3
 8001644:	440b      	add	r3, r1
 8001646:	3315      	adds	r3, #21
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800164c:	7bfb      	ldrb	r3, [r7, #15]
 800164e:	2b06      	cmp	r3, #6
 8001650:	d009      	beq.n	8001666 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8001652:	7bfa      	ldrb	r2, [r7, #15]
 8001654:	4916      	ldr	r1, [pc, #88]	@ (80016b0 <LinkTimerAfter+0x88>)
 8001656:	4613      	mov	r3, r2
 8001658:	005b      	lsls	r3, r3, #1
 800165a:	4413      	add	r3, r2
 800165c:	00db      	lsls	r3, r3, #3
 800165e:	440b      	add	r3, r1
 8001660:	3314      	adds	r3, #20
 8001662:	79fa      	ldrb	r2, [r7, #7]
 8001664:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8001666:	79fa      	ldrb	r2, [r7, #7]
 8001668:	4911      	ldr	r1, [pc, #68]	@ (80016b0 <LinkTimerAfter+0x88>)
 800166a:	4613      	mov	r3, r2
 800166c:	005b      	lsls	r3, r3, #1
 800166e:	4413      	add	r3, r2
 8001670:	00db      	lsls	r3, r3, #3
 8001672:	440b      	add	r3, r1
 8001674:	3315      	adds	r3, #21
 8001676:	7bfa      	ldrb	r2, [r7, #15]
 8001678:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 800167a:	79fa      	ldrb	r2, [r7, #7]
 800167c:	490c      	ldr	r1, [pc, #48]	@ (80016b0 <LinkTimerAfter+0x88>)
 800167e:	4613      	mov	r3, r2
 8001680:	005b      	lsls	r3, r3, #1
 8001682:	4413      	add	r3, r2
 8001684:	00db      	lsls	r3, r3, #3
 8001686:	440b      	add	r3, r1
 8001688:	3314      	adds	r3, #20
 800168a:	79ba      	ldrb	r2, [r7, #6]
 800168c:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 800168e:	79ba      	ldrb	r2, [r7, #6]
 8001690:	4907      	ldr	r1, [pc, #28]	@ (80016b0 <LinkTimerAfter+0x88>)
 8001692:	4613      	mov	r3, r2
 8001694:	005b      	lsls	r3, r3, #1
 8001696:	4413      	add	r3, r2
 8001698:	00db      	lsls	r3, r3, #3
 800169a:	440b      	add	r3, r1
 800169c:	3315      	adds	r3, #21
 800169e:	79fa      	ldrb	r2, [r7, #7]
 80016a0:	701a      	strb	r2, [r3, #0]

  return;
 80016a2:	bf00      	nop
}
 80016a4:	3714      	adds	r7, #20
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop
 80016b0:	200000d8 	.word	0x200000d8

080016b4 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b085      	sub	sp, #20
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	4603      	mov	r3, r0
 80016bc:	460a      	mov	r2, r1
 80016be:	71fb      	strb	r3, [r7, #7]
 80016c0:	4613      	mov	r3, r2
 80016c2:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 80016c4:	4b29      	ldr	r3, [pc, #164]	@ (800176c <LinkTimerBefore+0xb8>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	79ba      	ldrb	r2, [r7, #6]
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d032      	beq.n	8001736 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 80016d0:	79ba      	ldrb	r2, [r7, #6]
 80016d2:	4927      	ldr	r1, [pc, #156]	@ (8001770 <LinkTimerBefore+0xbc>)
 80016d4:	4613      	mov	r3, r2
 80016d6:	005b      	lsls	r3, r3, #1
 80016d8:	4413      	add	r3, r2
 80016da:	00db      	lsls	r3, r3, #3
 80016dc:	440b      	add	r3, r1
 80016de:	3314      	adds	r3, #20
 80016e0:	781b      	ldrb	r3, [r3, #0]
 80016e2:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 80016e4:	7bfa      	ldrb	r2, [r7, #15]
 80016e6:	4922      	ldr	r1, [pc, #136]	@ (8001770 <LinkTimerBefore+0xbc>)
 80016e8:	4613      	mov	r3, r2
 80016ea:	005b      	lsls	r3, r3, #1
 80016ec:	4413      	add	r3, r2
 80016ee:	00db      	lsls	r3, r3, #3
 80016f0:	440b      	add	r3, r1
 80016f2:	3315      	adds	r3, #21
 80016f4:	79fa      	ldrb	r2, [r7, #7]
 80016f6:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 80016f8:	79fa      	ldrb	r2, [r7, #7]
 80016fa:	491d      	ldr	r1, [pc, #116]	@ (8001770 <LinkTimerBefore+0xbc>)
 80016fc:	4613      	mov	r3, r2
 80016fe:	005b      	lsls	r3, r3, #1
 8001700:	4413      	add	r3, r2
 8001702:	00db      	lsls	r3, r3, #3
 8001704:	440b      	add	r3, r1
 8001706:	3315      	adds	r3, #21
 8001708:	79ba      	ldrb	r2, [r7, #6]
 800170a:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 800170c:	79fa      	ldrb	r2, [r7, #7]
 800170e:	4918      	ldr	r1, [pc, #96]	@ (8001770 <LinkTimerBefore+0xbc>)
 8001710:	4613      	mov	r3, r2
 8001712:	005b      	lsls	r3, r3, #1
 8001714:	4413      	add	r3, r2
 8001716:	00db      	lsls	r3, r3, #3
 8001718:	440b      	add	r3, r1
 800171a:	3314      	adds	r3, #20
 800171c:	7bfa      	ldrb	r2, [r7, #15]
 800171e:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001720:	79ba      	ldrb	r2, [r7, #6]
 8001722:	4913      	ldr	r1, [pc, #76]	@ (8001770 <LinkTimerBefore+0xbc>)
 8001724:	4613      	mov	r3, r2
 8001726:	005b      	lsls	r3, r3, #1
 8001728:	4413      	add	r3, r2
 800172a:	00db      	lsls	r3, r3, #3
 800172c:	440b      	add	r3, r1
 800172e:	3314      	adds	r3, #20
 8001730:	79fa      	ldrb	r2, [r7, #7]
 8001732:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8001734:	e014      	b.n	8001760 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8001736:	79fa      	ldrb	r2, [r7, #7]
 8001738:	490d      	ldr	r1, [pc, #52]	@ (8001770 <LinkTimerBefore+0xbc>)
 800173a:	4613      	mov	r3, r2
 800173c:	005b      	lsls	r3, r3, #1
 800173e:	4413      	add	r3, r2
 8001740:	00db      	lsls	r3, r3, #3
 8001742:	440b      	add	r3, r1
 8001744:	3315      	adds	r3, #21
 8001746:	79ba      	ldrb	r2, [r7, #6]
 8001748:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 800174a:	79ba      	ldrb	r2, [r7, #6]
 800174c:	4908      	ldr	r1, [pc, #32]	@ (8001770 <LinkTimerBefore+0xbc>)
 800174e:	4613      	mov	r3, r2
 8001750:	005b      	lsls	r3, r3, #1
 8001752:	4413      	add	r3, r2
 8001754:	00db      	lsls	r3, r3, #3
 8001756:	440b      	add	r3, r1
 8001758:	3314      	adds	r3, #20
 800175a:	79fa      	ldrb	r2, [r7, #7]
 800175c:	701a      	strb	r2, [r3, #0]
  return;
 800175e:	bf00      	nop
}
 8001760:	3714      	adds	r7, #20
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	20000168 	.word	0x20000168
 8001770:	200000d8 	.word	0x200000d8

08001774 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0
 800177a:	4603      	mov	r3, r0
 800177c:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800177e:	4b4e      	ldr	r3, [pc, #312]	@ (80018b8 <linkTimer+0x144>)
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	b2db      	uxtb	r3, r3
 8001784:	2b06      	cmp	r3, #6
 8001786:	d118      	bne.n	80017ba <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001788:	4b4b      	ldr	r3, [pc, #300]	@ (80018b8 <linkTimer+0x144>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	b2da      	uxtb	r2, r3
 800178e:	4b4b      	ldr	r3, [pc, #300]	@ (80018bc <linkTimer+0x148>)
 8001790:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8001792:	4a49      	ldr	r2, [pc, #292]	@ (80018b8 <linkTimer+0x144>)
 8001794:	79fb      	ldrb	r3, [r7, #7]
 8001796:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8001798:	79fa      	ldrb	r2, [r7, #7]
 800179a:	4949      	ldr	r1, [pc, #292]	@ (80018c0 <linkTimer+0x14c>)
 800179c:	4613      	mov	r3, r2
 800179e:	005b      	lsls	r3, r3, #1
 80017a0:	4413      	add	r3, r2
 80017a2:	00db      	lsls	r3, r3, #3
 80017a4:	440b      	add	r3, r1
 80017a6:	3315      	adds	r3, #21
 80017a8:	2206      	movs	r2, #6
 80017aa:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80017ac:	4b45      	ldr	r3, [pc, #276]	@ (80018c4 <linkTimer+0x150>)
 80017ae:	f04f 32ff 	mov.w	r2, #4294967295
 80017b2:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 80017b4:	2300      	movs	r3, #0
 80017b6:	81fb      	strh	r3, [r7, #14]
 80017b8:	e078      	b.n	80018ac <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 80017ba:	f000 f909 	bl	80019d0 <ReturnTimeElapsed>
 80017be:	4603      	mov	r3, r0
 80017c0:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 80017c2:	79fa      	ldrb	r2, [r7, #7]
 80017c4:	493e      	ldr	r1, [pc, #248]	@ (80018c0 <linkTimer+0x14c>)
 80017c6:	4613      	mov	r3, r2
 80017c8:	005b      	lsls	r3, r3, #1
 80017ca:	4413      	add	r3, r2
 80017cc:	00db      	lsls	r3, r3, #3
 80017ce:	440b      	add	r3, r1
 80017d0:	3308      	adds	r3, #8
 80017d2:	6819      	ldr	r1, [r3, #0]
 80017d4:	89fb      	ldrh	r3, [r7, #14]
 80017d6:	79fa      	ldrb	r2, [r7, #7]
 80017d8:	4419      	add	r1, r3
 80017da:	4839      	ldr	r0, [pc, #228]	@ (80018c0 <linkTimer+0x14c>)
 80017dc:	4613      	mov	r3, r2
 80017de:	005b      	lsls	r3, r3, #1
 80017e0:	4413      	add	r3, r2
 80017e2:	00db      	lsls	r3, r3, #3
 80017e4:	4403      	add	r3, r0
 80017e6:	3308      	adds	r3, #8
 80017e8:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 80017ea:	79fa      	ldrb	r2, [r7, #7]
 80017ec:	4934      	ldr	r1, [pc, #208]	@ (80018c0 <linkTimer+0x14c>)
 80017ee:	4613      	mov	r3, r2
 80017f0:	005b      	lsls	r3, r3, #1
 80017f2:	4413      	add	r3, r2
 80017f4:	00db      	lsls	r3, r3, #3
 80017f6:	440b      	add	r3, r1
 80017f8:	3308      	adds	r3, #8
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 80017fe:	4b2e      	ldr	r3, [pc, #184]	@ (80018b8 <linkTimer+0x144>)
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	b2db      	uxtb	r3, r3
 8001804:	4619      	mov	r1, r3
 8001806:	4a2e      	ldr	r2, [pc, #184]	@ (80018c0 <linkTimer+0x14c>)
 8001808:	460b      	mov	r3, r1
 800180a:	005b      	lsls	r3, r3, #1
 800180c:	440b      	add	r3, r1
 800180e:	00db      	lsls	r3, r3, #3
 8001810:	4413      	add	r3, r2
 8001812:	3308      	adds	r3, #8
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	68ba      	ldr	r2, [r7, #8]
 8001818:	429a      	cmp	r2, r3
 800181a:	d337      	bcc.n	800188c <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 800181c:	4b26      	ldr	r3, [pc, #152]	@ (80018b8 <linkTimer+0x144>)
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8001822:	7b7a      	ldrb	r2, [r7, #13]
 8001824:	4926      	ldr	r1, [pc, #152]	@ (80018c0 <linkTimer+0x14c>)
 8001826:	4613      	mov	r3, r2
 8001828:	005b      	lsls	r3, r3, #1
 800182a:	4413      	add	r3, r2
 800182c:	00db      	lsls	r3, r3, #3
 800182e:	440b      	add	r3, r1
 8001830:	3315      	adds	r3, #21
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001836:	e013      	b.n	8001860 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8001838:	7b7a      	ldrb	r2, [r7, #13]
 800183a:	4921      	ldr	r1, [pc, #132]	@ (80018c0 <linkTimer+0x14c>)
 800183c:	4613      	mov	r3, r2
 800183e:	005b      	lsls	r3, r3, #1
 8001840:	4413      	add	r3, r2
 8001842:	00db      	lsls	r3, r3, #3
 8001844:	440b      	add	r3, r1
 8001846:	3315      	adds	r3, #21
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 800184c:	7b7a      	ldrb	r2, [r7, #13]
 800184e:	491c      	ldr	r1, [pc, #112]	@ (80018c0 <linkTimer+0x14c>)
 8001850:	4613      	mov	r3, r2
 8001852:	005b      	lsls	r3, r3, #1
 8001854:	4413      	add	r3, r2
 8001856:	00db      	lsls	r3, r3, #3
 8001858:	440b      	add	r3, r1
 800185a:	3315      	adds	r3, #21
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001860:	7b3b      	ldrb	r3, [r7, #12]
 8001862:	2b06      	cmp	r3, #6
 8001864:	d00b      	beq.n	800187e <linkTimer+0x10a>
 8001866:	7b3a      	ldrb	r2, [r7, #12]
 8001868:	4915      	ldr	r1, [pc, #84]	@ (80018c0 <linkTimer+0x14c>)
 800186a:	4613      	mov	r3, r2
 800186c:	005b      	lsls	r3, r3, #1
 800186e:	4413      	add	r3, r2
 8001870:	00db      	lsls	r3, r3, #3
 8001872:	440b      	add	r3, r1
 8001874:	3308      	adds	r3, #8
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	68ba      	ldr	r2, [r7, #8]
 800187a:	429a      	cmp	r2, r3
 800187c:	d2dc      	bcs.n	8001838 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 800187e:	7b7a      	ldrb	r2, [r7, #13]
 8001880:	79fb      	ldrb	r3, [r7, #7]
 8001882:	4611      	mov	r1, r2
 8001884:	4618      	mov	r0, r3
 8001886:	f7ff fecf 	bl	8001628 <LinkTimerAfter>
 800188a:	e00f      	b.n	80018ac <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 800188c:	4b0a      	ldr	r3, [pc, #40]	@ (80018b8 <linkTimer+0x144>)
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	b2da      	uxtb	r2, r3
 8001892:	79fb      	ldrb	r3, [r7, #7]
 8001894:	4611      	mov	r1, r2
 8001896:	4618      	mov	r0, r3
 8001898:	f7ff ff0c 	bl	80016b4 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 800189c:	4b06      	ldr	r3, [pc, #24]	@ (80018b8 <linkTimer+0x144>)
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	b2da      	uxtb	r2, r3
 80018a2:	4b06      	ldr	r3, [pc, #24]	@ (80018bc <linkTimer+0x148>)
 80018a4:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 80018a6:	4a04      	ldr	r2, [pc, #16]	@ (80018b8 <linkTimer+0x144>)
 80018a8:	79fb      	ldrb	r3, [r7, #7]
 80018aa:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 80018ac:	89fb      	ldrh	r3, [r7, #14]
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3710      	adds	r7, #16
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	20000168 	.word	0x20000168
 80018bc:	20000169 	.word	0x20000169
 80018c0:	200000d8 	.word	0x200000d8
 80018c4:	2000016c 	.word	0x2000016c

080018c8 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b085      	sub	sp, #20
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	4603      	mov	r3, r0
 80018d0:	460a      	mov	r2, r1
 80018d2:	71fb      	strb	r3, [r7, #7]
 80018d4:	4613      	mov	r3, r2
 80018d6:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 80018d8:	4b39      	ldr	r3, [pc, #228]	@ (80019c0 <UnlinkTimer+0xf8>)
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	79fa      	ldrb	r2, [r7, #7]
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d111      	bne.n	8001908 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 80018e4:	4b36      	ldr	r3, [pc, #216]	@ (80019c0 <UnlinkTimer+0xf8>)
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	b2da      	uxtb	r2, r3
 80018ea:	4b36      	ldr	r3, [pc, #216]	@ (80019c4 <UnlinkTimer+0xfc>)
 80018ec:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 80018ee:	79fa      	ldrb	r2, [r7, #7]
 80018f0:	4935      	ldr	r1, [pc, #212]	@ (80019c8 <UnlinkTimer+0x100>)
 80018f2:	4613      	mov	r3, r2
 80018f4:	005b      	lsls	r3, r3, #1
 80018f6:	4413      	add	r3, r2
 80018f8:	00db      	lsls	r3, r3, #3
 80018fa:	440b      	add	r3, r1
 80018fc:	3315      	adds	r3, #21
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	b2da      	uxtb	r2, r3
 8001902:	4b2f      	ldr	r3, [pc, #188]	@ (80019c0 <UnlinkTimer+0xf8>)
 8001904:	701a      	strb	r2, [r3, #0]
 8001906:	e03e      	b.n	8001986 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8001908:	79fa      	ldrb	r2, [r7, #7]
 800190a:	492f      	ldr	r1, [pc, #188]	@ (80019c8 <UnlinkTimer+0x100>)
 800190c:	4613      	mov	r3, r2
 800190e:	005b      	lsls	r3, r3, #1
 8001910:	4413      	add	r3, r2
 8001912:	00db      	lsls	r3, r3, #3
 8001914:	440b      	add	r3, r1
 8001916:	3314      	adds	r3, #20
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 800191c:	79fa      	ldrb	r2, [r7, #7]
 800191e:	492a      	ldr	r1, [pc, #168]	@ (80019c8 <UnlinkTimer+0x100>)
 8001920:	4613      	mov	r3, r2
 8001922:	005b      	lsls	r3, r3, #1
 8001924:	4413      	add	r3, r2
 8001926:	00db      	lsls	r3, r3, #3
 8001928:	440b      	add	r3, r1
 800192a:	3315      	adds	r3, #21
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8001930:	79f9      	ldrb	r1, [r7, #7]
 8001932:	7bfa      	ldrb	r2, [r7, #15]
 8001934:	4824      	ldr	r0, [pc, #144]	@ (80019c8 <UnlinkTimer+0x100>)
 8001936:	460b      	mov	r3, r1
 8001938:	005b      	lsls	r3, r3, #1
 800193a:	440b      	add	r3, r1
 800193c:	00db      	lsls	r3, r3, #3
 800193e:	4403      	add	r3, r0
 8001940:	3315      	adds	r3, #21
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	b2d8      	uxtb	r0, r3
 8001946:	4920      	ldr	r1, [pc, #128]	@ (80019c8 <UnlinkTimer+0x100>)
 8001948:	4613      	mov	r3, r2
 800194a:	005b      	lsls	r3, r3, #1
 800194c:	4413      	add	r3, r2
 800194e:	00db      	lsls	r3, r3, #3
 8001950:	440b      	add	r3, r1
 8001952:	3315      	adds	r3, #21
 8001954:	4602      	mov	r2, r0
 8001956:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001958:	7bbb      	ldrb	r3, [r7, #14]
 800195a:	2b06      	cmp	r3, #6
 800195c:	d013      	beq.n	8001986 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 800195e:	79f9      	ldrb	r1, [r7, #7]
 8001960:	7bba      	ldrb	r2, [r7, #14]
 8001962:	4819      	ldr	r0, [pc, #100]	@ (80019c8 <UnlinkTimer+0x100>)
 8001964:	460b      	mov	r3, r1
 8001966:	005b      	lsls	r3, r3, #1
 8001968:	440b      	add	r3, r1
 800196a:	00db      	lsls	r3, r3, #3
 800196c:	4403      	add	r3, r0
 800196e:	3314      	adds	r3, #20
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	b2d8      	uxtb	r0, r3
 8001974:	4914      	ldr	r1, [pc, #80]	@ (80019c8 <UnlinkTimer+0x100>)
 8001976:	4613      	mov	r3, r2
 8001978:	005b      	lsls	r3, r3, #1
 800197a:	4413      	add	r3, r2
 800197c:	00db      	lsls	r3, r3, #3
 800197e:	440b      	add	r3, r1
 8001980:	3314      	adds	r3, #20
 8001982:	4602      	mov	r2, r0
 8001984:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8001986:	79fa      	ldrb	r2, [r7, #7]
 8001988:	490f      	ldr	r1, [pc, #60]	@ (80019c8 <UnlinkTimer+0x100>)
 800198a:	4613      	mov	r3, r2
 800198c:	005b      	lsls	r3, r3, #1
 800198e:	4413      	add	r3, r2
 8001990:	00db      	lsls	r3, r3, #3
 8001992:	440b      	add	r3, r1
 8001994:	330c      	adds	r3, #12
 8001996:	2201      	movs	r2, #1
 8001998:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 800199a:	4b09      	ldr	r3, [pc, #36]	@ (80019c0 <UnlinkTimer+0xf8>)
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	2b06      	cmp	r3, #6
 80019a2:	d107      	bne.n	80019b4 <UnlinkTimer+0xec>
 80019a4:	79bb      	ldrb	r3, [r7, #6]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d104      	bne.n	80019b4 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80019aa:	4b08      	ldr	r3, [pc, #32]	@ (80019cc <UnlinkTimer+0x104>)
 80019ac:	f04f 32ff 	mov.w	r2, #4294967295
 80019b0:	601a      	str	r2, [r3, #0]
  }

  return;
 80019b2:	bf00      	nop
 80019b4:	bf00      	nop
}
 80019b6:	3714      	adds	r7, #20
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr
 80019c0:	20000168 	.word	0x20000168
 80019c4:	20000169 	.word	0x20000169
 80019c8:	200000d8 	.word	0x200000d8
 80019cc:	2000016c 	.word	0x2000016c

080019d0 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 80019d6:	4b1a      	ldr	r3, [pc, #104]	@ (8001a40 <ReturnTimeElapsed+0x70>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019de:	d026      	beq.n	8001a2e <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 80019e0:	f7ff fe02 	bl	80015e8 <ReadRtcSsrValue>
 80019e4:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 80019e6:	4b16      	ldr	r3, [pc, #88]	@ (8001a40 <ReturnTimeElapsed+0x70>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d805      	bhi.n	80019fc <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 80019f0:	4b13      	ldr	r3, [pc, #76]	@ (8001a40 <ReturnTimeElapsed+0x70>)
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	1ad3      	subs	r3, r2, r3
 80019f8:	607b      	str	r3, [r7, #4]
 80019fa:	e00a      	b.n	8001a12 <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 80019fc:	4b11      	ldr	r3, [pc, #68]	@ (8001a44 <ReturnTimeElapsed+0x74>)
 80019fe:	881b      	ldrh	r3, [r3, #0]
 8001a00:	461a      	mov	r2, r3
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8001a08:	4b0d      	ldr	r3, [pc, #52]	@ (8001a40 <ReturnTimeElapsed+0x70>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	683a      	ldr	r2, [r7, #0]
 8001a0e:	4413      	add	r3, r2
 8001a10:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8001a12:	4b0d      	ldr	r3, [pc, #52]	@ (8001a48 <ReturnTimeElapsed+0x78>)
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	461a      	mov	r2, r3
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	fb02 f303 	mul.w	r3, r2, r3
 8001a1e:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8001a20:	4b0a      	ldr	r3, [pc, #40]	@ (8001a4c <ReturnTimeElapsed+0x7c>)
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	461a      	mov	r2, r3
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	40d3      	lsrs	r3, r2
 8001a2a:	607b      	str	r3, [r7, #4]
 8001a2c:	e001      	b.n	8001a32 <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	b29b      	uxth	r3, r3
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3708      	adds	r7, #8
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	2000016c 	.word	0x2000016c
 8001a44:	20000174 	.word	0x20000174
 8001a48:	20000172 	.word	0x20000172
 8001a4c:	20000171 	.word	0x20000171

08001a50 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	4603      	mov	r3, r0
 8001a58:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 8001a5a:	88fb      	ldrh	r3, [r7, #6]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d108      	bne.n	8001a72 <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001a60:	f7ff fdc2 	bl	80015e8 <ReadRtcSsrValue>
 8001a64:	4603      	mov	r3, r0
 8001a66:	4a21      	ldr	r2, [pc, #132]	@ (8001aec <RestartWakeupCounter+0x9c>)
 8001a68:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001a6a:	2003      	movs	r0, #3
 8001a6c:	f001 fd97 	bl	800359e <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8001a70:	e039      	b.n	8001ae6 <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8001a72:	88fb      	ldrh	r3, [r7, #6]
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d803      	bhi.n	8001a80 <RestartWakeupCounter+0x30>
 8001a78:	4b1d      	ldr	r3, [pc, #116]	@ (8001af0 <RestartWakeupCounter+0xa0>)
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d002      	beq.n	8001a86 <RestartWakeupCounter+0x36>
      Value -= 1;
 8001a80:	88fb      	ldrh	r3, [r7, #6]
 8001a82:	3b01      	subs	r3, #1
 8001a84:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001a86:	bf00      	nop
 8001a88:	4b1a      	ldr	r3, [pc, #104]	@ (8001af4 <RestartWakeupCounter+0xa4>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	68db      	ldr	r3, [r3, #12]
 8001a8e:	f003 0304 	and.w	r3, r3, #4
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d0f8      	beq.n	8001a88 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001a96:	4b17      	ldr	r3, [pc, #92]	@ (8001af4 <RestartWakeupCounter+0xa4>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	b2da      	uxtb	r2, r3
 8001a9e:	4b15      	ldr	r3, [pc, #84]	@ (8001af4 <RestartWakeupCounter+0xa4>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8001aa6:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001aa8:	4b13      	ldr	r3, [pc, #76]	@ (8001af8 <RestartWakeupCounter+0xa8>)
 8001aaa:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001aae:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001ab0:	2003      	movs	r0, #3
 8001ab2:	f001 fd82 	bl	80035ba <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8001ab6:	4b11      	ldr	r3, [pc, #68]	@ (8001afc <RestartWakeupCounter+0xac>)
 8001ab8:	695b      	ldr	r3, [r3, #20]
 8001aba:	0c1b      	lsrs	r3, r3, #16
 8001abc:	041b      	lsls	r3, r3, #16
 8001abe:	88fa      	ldrh	r2, [r7, #6]
 8001ac0:	490e      	ldr	r1, [pc, #56]	@ (8001afc <RestartWakeupCounter+0xac>)
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001ac6:	f7ff fd8f 	bl	80015e8 <ReadRtcSsrValue>
 8001aca:	4603      	mov	r3, r0
 8001acc:	4a07      	ldr	r2, [pc, #28]	@ (8001aec <RestartWakeupCounter+0x9c>)
 8001ace:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8001ad0:	4b08      	ldr	r3, [pc, #32]	@ (8001af4 <RestartWakeupCounter+0xa4>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	689a      	ldr	r2, [r3, #8]
 8001ad6:	4b07      	ldr	r3, [pc, #28]	@ (8001af4 <RestartWakeupCounter+0xa4>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001ade:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8001ae0:	f3af 8000 	nop.w
  return ;
 8001ae4:	bf00      	nop
}
 8001ae6:	3708      	adds	r7, #8
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	2000016c 	.word	0x2000016c
 8001af0:	20000171 	.word	0x20000171
 8001af4:	200001b8 	.word	0x200001b8
 8001af8:	58000800 	.word	0x58000800
 8001afc:	40002800 	.word	0x40002800

08001b00 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b084      	sub	sp, #16
 8001b04:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001b06:	4b45      	ldr	r3, [pc, #276]	@ (8001c1c <RescheduleTimerList+0x11c>)
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b12:	d107      	bne.n	8001b24 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8001b14:	bf00      	nop
 8001b16:	4b42      	ldr	r3, [pc, #264]	@ (8001c20 <RescheduleTimerList+0x120>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	f003 0304 	and.w	r3, r3, #4
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d1f8      	bne.n	8001b16 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8001b24:	4b3e      	ldr	r3, [pc, #248]	@ (8001c20 <RescheduleTimerList+0x120>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	689a      	ldr	r2, [r3, #8]
 8001b2a:	4b3d      	ldr	r3, [pc, #244]	@ (8001c20 <RescheduleTimerList+0x120>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001b32:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8001b34:	4b3b      	ldr	r3, [pc, #236]	@ (8001c24 <RescheduleTimerList+0x124>)
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8001b3a:	7bfa      	ldrb	r2, [r7, #15]
 8001b3c:	493a      	ldr	r1, [pc, #232]	@ (8001c28 <RescheduleTimerList+0x128>)
 8001b3e:	4613      	mov	r3, r2
 8001b40:	005b      	lsls	r3, r3, #1
 8001b42:	4413      	add	r3, r2
 8001b44:	00db      	lsls	r3, r3, #3
 8001b46:	440b      	add	r3, r1
 8001b48:	3308      	adds	r3, #8
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8001b4e:	f7ff ff3f 	bl	80019d0 <ReturnTimeElapsed>
 8001b52:	4603      	mov	r3, r0
 8001b54:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8001b56:	88fb      	ldrh	r3, [r7, #6]
 8001b58:	68ba      	ldr	r2, [r7, #8]
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	d205      	bcs.n	8001b6a <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001b62:	4b32      	ldr	r3, [pc, #200]	@ (8001c2c <RescheduleTimerList+0x12c>)
 8001b64:	2201      	movs	r2, #1
 8001b66:	701a      	strb	r2, [r3, #0]
 8001b68:	e04d      	b.n	8001c06 <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8001b6a:	88fb      	ldrh	r3, [r7, #6]
 8001b6c:	4a30      	ldr	r2, [pc, #192]	@ (8001c30 <RescheduleTimerList+0x130>)
 8001b6e:	8812      	ldrh	r2, [r2, #0]
 8001b70:	b292      	uxth	r2, r2
 8001b72:	4413      	add	r3, r2
 8001b74:	461a      	mov	r2, r3
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d906      	bls.n	8001b8a <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8001b7c:	4b2c      	ldr	r3, [pc, #176]	@ (8001c30 <RescheduleTimerList+0x130>)
 8001b7e:	881b      	ldrh	r3, [r3, #0]
 8001b80:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8001b82:	4b2a      	ldr	r3, [pc, #168]	@ (8001c2c <RescheduleTimerList+0x12c>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	701a      	strb	r2, [r3, #0]
 8001b88:	e03d      	b.n	8001c06 <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	b29a      	uxth	r2, r3
 8001b8e:	88fb      	ldrh	r3, [r7, #6]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001b94:	4b25      	ldr	r3, [pc, #148]	@ (8001c2c <RescheduleTimerList+0x12c>)
 8001b96:	2201      	movs	r2, #1
 8001b98:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001b9a:	e034      	b.n	8001c06 <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8001b9c:	7bfa      	ldrb	r2, [r7, #15]
 8001b9e:	4922      	ldr	r1, [pc, #136]	@ (8001c28 <RescheduleTimerList+0x128>)
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	005b      	lsls	r3, r3, #1
 8001ba4:	4413      	add	r3, r2
 8001ba6:	00db      	lsls	r3, r3, #3
 8001ba8:	440b      	add	r3, r1
 8001baa:	3308      	adds	r3, #8
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	88fb      	ldrh	r3, [r7, #6]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d20a      	bcs.n	8001bca <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8001bb4:	7bfa      	ldrb	r2, [r7, #15]
 8001bb6:	491c      	ldr	r1, [pc, #112]	@ (8001c28 <RescheduleTimerList+0x128>)
 8001bb8:	4613      	mov	r3, r2
 8001bba:	005b      	lsls	r3, r3, #1
 8001bbc:	4413      	add	r3, r2
 8001bbe:	00db      	lsls	r3, r3, #3
 8001bc0:	440b      	add	r3, r1
 8001bc2:	3308      	adds	r3, #8
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	601a      	str	r2, [r3, #0]
 8001bc8:	e013      	b.n	8001bf2 <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8001bca:	7bfa      	ldrb	r2, [r7, #15]
 8001bcc:	4916      	ldr	r1, [pc, #88]	@ (8001c28 <RescheduleTimerList+0x128>)
 8001bce:	4613      	mov	r3, r2
 8001bd0:	005b      	lsls	r3, r3, #1
 8001bd2:	4413      	add	r3, r2
 8001bd4:	00db      	lsls	r3, r3, #3
 8001bd6:	440b      	add	r3, r1
 8001bd8:	3308      	adds	r3, #8
 8001bda:	6819      	ldr	r1, [r3, #0]
 8001bdc:	88fb      	ldrh	r3, [r7, #6]
 8001bde:	7bfa      	ldrb	r2, [r7, #15]
 8001be0:	1ac9      	subs	r1, r1, r3
 8001be2:	4811      	ldr	r0, [pc, #68]	@ (8001c28 <RescheduleTimerList+0x128>)
 8001be4:	4613      	mov	r3, r2
 8001be6:	005b      	lsls	r3, r3, #1
 8001be8:	4413      	add	r3, r2
 8001bea:	00db      	lsls	r3, r3, #3
 8001bec:	4403      	add	r3, r0
 8001bee:	3308      	adds	r3, #8
 8001bf0:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8001bf2:	7bfa      	ldrb	r2, [r7, #15]
 8001bf4:	490c      	ldr	r1, [pc, #48]	@ (8001c28 <RescheduleTimerList+0x128>)
 8001bf6:	4613      	mov	r3, r2
 8001bf8:	005b      	lsls	r3, r3, #1
 8001bfa:	4413      	add	r3, r2
 8001bfc:	00db      	lsls	r3, r3, #3
 8001bfe:	440b      	add	r3, r1
 8001c00:	3315      	adds	r3, #21
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001c06:	7bfb      	ldrb	r3, [r7, #15]
 8001c08:	2b06      	cmp	r3, #6
 8001c0a:	d1c7      	bne.n	8001b9c <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8001c0c:	89bb      	ldrh	r3, [r7, #12]
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f7ff ff1e 	bl	8001a50 <RestartWakeupCounter>

  return ;
 8001c14:	bf00      	nop
}
 8001c16:	3710      	adds	r7, #16
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	40002800 	.word	0x40002800
 8001c20:	200001b8 	.word	0x200001b8
 8001c24:	20000168 	.word	0x20000168
 8001c28:	200000d8 	.word	0x200000d8
 8001c2c:	20000170 	.word	0x20000170
 8001c30:	20000176 	.word	0x20000176

08001c34 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b08a      	sub	sp, #40	@ 0x28
 8001c38:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001c3a:	f3ef 8310 	mrs	r3, PRIMASK
 8001c3e:	617b      	str	r3, [r7, #20]
  return(result);
 8001c40:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001c42:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8001c44:	b672      	cpsid	i
}
 8001c46:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001c48:	4b59      	ldr	r3, [pc, #356]	@ (8001db0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	22ca      	movs	r2, #202	@ 0xca
 8001c4e:	625a      	str	r2, [r3, #36]	@ 0x24
 8001c50:	4b57      	ldr	r3, [pc, #348]	@ (8001db0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	2253      	movs	r2, #83	@ 0x53
 8001c56:	625a      	str	r2, [r3, #36]	@ 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8001c58:	4b55      	ldr	r3, [pc, #340]	@ (8001db0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	689a      	ldr	r2, [r3, #8]
 8001c5e:	4b54      	ldr	r3, [pc, #336]	@ (8001db0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001c66:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8001c68:	4b52      	ldr	r3, [pc, #328]	@ (8001db4 <HW_TS_RTC_Wakeup_Handler+0x180>)
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8001c70:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001c74:	4950      	ldr	r1, [pc, #320]	@ (8001db8 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001c76:	4613      	mov	r3, r2
 8001c78:	005b      	lsls	r3, r3, #1
 8001c7a:	4413      	add	r3, r2
 8001c7c:	00db      	lsls	r3, r3, #3
 8001c7e:	440b      	add	r3, r1
 8001c80:	330c      	adds	r3, #12
 8001c82:	781b      	ldrb	r3, [r3, #0]
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	d16e      	bne.n	8001d68 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8001c8a:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001c8e:	494a      	ldr	r1, [pc, #296]	@ (8001db8 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001c90:	4613      	mov	r3, r2
 8001c92:	005b      	lsls	r3, r3, #1
 8001c94:	4413      	add	r3, r2
 8001c96:	00db      	lsls	r3, r3, #3
 8001c98:	440b      	add	r3, r1
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8001c9e:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001ca2:	4945      	ldr	r1, [pc, #276]	@ (8001db8 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001ca4:	4613      	mov	r3, r2
 8001ca6:	005b      	lsls	r3, r3, #1
 8001ca8:	4413      	add	r3, r2
 8001caa:	00db      	lsls	r3, r3, #3
 8001cac:	440b      	add	r3, r1
 8001cae:	3310      	adds	r3, #16
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8001cb4:	4b41      	ldr	r3, [pc, #260]	@ (8001dbc <HW_TS_RTC_Wakeup_Handler+0x188>)
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d04c      	beq.n	8001d58 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8001cbe:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001cc2:	493d      	ldr	r1, [pc, #244]	@ (8001db8 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	005b      	lsls	r3, r3, #1
 8001cc8:	4413      	add	r3, r2
 8001cca:	00db      	lsls	r3, r3, #3
 8001ccc:	440b      	add	r3, r1
 8001cce:	330d      	adds	r3, #13
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d124      	bne.n	8001d22 <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8001cd8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001cdc:	2101      	movs	r1, #1
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f7ff fdf2 	bl	80018c8 <UnlinkTimer>
 8001ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ce6:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	f383 8810 	msr	PRIMASK, r3
}
 8001cee:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8001cf0:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001cf4:	4930      	ldr	r1, [pc, #192]	@ (8001db8 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001cf6:	4613      	mov	r3, r2
 8001cf8:	005b      	lsls	r3, r3, #1
 8001cfa:	4413      	add	r3, r2
 8001cfc:	00db      	lsls	r3, r3, #3
 8001cfe:	440b      	add	r3, r1
 8001d00:	3304      	adds	r3, #4
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001d08:	4611      	mov	r1, r2
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f000 fa32 	bl	8002174 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001d10:	4b27      	ldr	r3, [pc, #156]	@ (8001db0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	22ca      	movs	r2, #202	@ 0xca
 8001d16:	625a      	str	r2, [r3, #36]	@ 0x24
 8001d18:	4b25      	ldr	r3, [pc, #148]	@ (8001db0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	2253      	movs	r2, #83	@ 0x53
 8001d1e:	625a      	str	r2, [r3, #36]	@ 0x24
 8001d20:	e012      	b.n	8001d48 <HW_TS_RTC_Wakeup_Handler+0x114>
 8001d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d24:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	f383 8810 	msr	PRIMASK, r3
}
 8001d2c:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8001d2e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001d32:	4618      	mov	r0, r3
 8001d34:	f000 f99a 	bl	800206c <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001d38:	4b1d      	ldr	r3, [pc, #116]	@ (8001db0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	22ca      	movs	r2, #202	@ 0xca
 8001d3e:	625a      	str	r2, [r3, #36]	@ 0x24
 8001d40:	4b1b      	ldr	r3, [pc, #108]	@ (8001db0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	2253      	movs	r2, #83	@ 0x53
 8001d46:	625a      	str	r2, [r3, #36]	@ 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8001d48:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001d4c:	69fa      	ldr	r2, [r7, #28]
 8001d4e:	4619      	mov	r1, r3
 8001d50:	69b8      	ldr	r0, [r7, #24]
 8001d52:	f000 fa95 	bl	8002280 <HW_TS_RTC_Int_AppNot>
 8001d56:	e022      	b.n	8001d9e <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 8001d58:	f7ff fed2 	bl	8001b00 <RescheduleTimerList>
 8001d5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d5e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	f383 8810 	msr	PRIMASK, r3
}
 8001d66:	e01a      	b.n	8001d9e <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001d68:	bf00      	nop
 8001d6a:	4b11      	ldr	r3, [pc, #68]	@ (8001db0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	f003 0304 	and.w	r3, r3, #4
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d0f8      	beq.n	8001d6a <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001d78:	4b0d      	ldr	r3, [pc, #52]	@ (8001db0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	68db      	ldr	r3, [r3, #12]
 8001d7e:	b2da      	uxtb	r2, r3
 8001d80:	4b0b      	ldr	r3, [pc, #44]	@ (8001db0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8001d88:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001d8a:	4b0d      	ldr	r3, [pc, #52]	@ (8001dc0 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001d8c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001d90:	60da      	str	r2, [r3, #12]
 8001d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d94:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	f383 8810 	msr	PRIMASK, r3
}
 8001d9c:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001d9e:	4b04      	ldr	r3, [pc, #16]	@ (8001db0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	22ff      	movs	r2, #255	@ 0xff
 8001da4:	625a      	str	r2, [r3, #36]	@ 0x24

  return;
 8001da6:	bf00      	nop
}
 8001da8:	3728      	adds	r7, #40	@ 0x28
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	200001b8 	.word	0x200001b8
 8001db4:	20000168 	.word	0x20000168
 8001db8:	200000d8 	.word	0x200000d8
 8001dbc:	20000170 	.word	0x20000170
 8001dc0:	58000800 	.word	0x58000800

08001dc4 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b088      	sub	sp, #32
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	4603      	mov	r3, r0
 8001dcc:	6039      	str	r1, [r7, #0]
 8001dce:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001dd0:	4b5e      	ldr	r3, [pc, #376]	@ (8001f4c <HW_TS_Init+0x188>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	22ca      	movs	r2, #202	@ 0xca
 8001dd6:	625a      	str	r2, [r3, #36]	@ 0x24
 8001dd8:	4b5c      	ldr	r3, [pc, #368]	@ (8001f4c <HW_TS_Init+0x188>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	2253      	movs	r2, #83	@ 0x53
 8001dde:	625a      	str	r2, [r3, #36]	@ 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001de0:	4b5b      	ldr	r3, [pc, #364]	@ (8001f50 <HW_TS_Init+0x18c>)
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	4a5a      	ldr	r2, [pc, #360]	@ (8001f50 <HW_TS_Init+0x18c>)
 8001de6:	f043 0320 	orr.w	r3, r3, #32
 8001dea:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8001dec:	4b58      	ldr	r3, [pc, #352]	@ (8001f50 <HW_TS_Init+0x18c>)
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	f003 0307 	and.w	r3, r3, #7
 8001df6:	b2db      	uxtb	r3, r3
 8001df8:	f1c3 0304 	rsb	r3, r3, #4
 8001dfc:	b2da      	uxtb	r2, r3
 8001dfe:	4b55      	ldr	r3, [pc, #340]	@ (8001f54 <HW_TS_Init+0x190>)
 8001e00:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8001e02:	4b53      	ldr	r3, [pc, #332]	@ (8001f50 <HW_TS_Init+0x18c>)
 8001e04:	691b      	ldr	r3, [r3, #16]
 8001e06:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001e0a:	f44f 02fe 	mov.w	r2, #8323072	@ 0x7f0000
 8001e0e:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e10:	693a      	ldr	r2, [r7, #16]
 8001e12:	fa92 f2a2 	rbit	r2, r2
 8001e16:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001e18:	68fa      	ldr	r2, [r7, #12]
 8001e1a:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001e1c:	697a      	ldr	r2, [r7, #20]
 8001e1e:	2a00      	cmp	r2, #0
 8001e20:	d101      	bne.n	8001e26 <HW_TS_Init+0x62>
  {
    return 32U;
 8001e22:	2220      	movs	r2, #32
 8001e24:	e003      	b.n	8001e2e <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 8001e26:	697a      	ldr	r2, [r7, #20]
 8001e28:	fab2 f282 	clz	r2, r2
 8001e2c:	b2d2      	uxtb	r2, r2
 8001e2e:	40d3      	lsrs	r3, r2
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	3301      	adds	r3, #1
 8001e34:	b2da      	uxtb	r2, r3
 8001e36:	4b48      	ldr	r3, [pc, #288]	@ (8001f58 <HW_TS_Init+0x194>)
 8001e38:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8001e3a:	4b45      	ldr	r3, [pc, #276]	@ (8001f50 <HW_TS_Init+0x18c>)
 8001e3c:	691b      	ldr	r3, [r3, #16]
 8001e3e:	b29b      	uxth	r3, r3
 8001e40:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001e44:	b29b      	uxth	r3, r3
 8001e46:	3301      	adds	r3, #1
 8001e48:	b29a      	uxth	r2, r3
 8001e4a:	4b44      	ldr	r3, [pc, #272]	@ (8001f5c <HW_TS_Init+0x198>)
 8001e4c:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8001e4e:	4b43      	ldr	r3, [pc, #268]	@ (8001f5c <HW_TS_Init+0x198>)
 8001e50:	881b      	ldrh	r3, [r3, #0]
 8001e52:	3b01      	subs	r3, #1
 8001e54:	4a40      	ldr	r2, [pc, #256]	@ (8001f58 <HW_TS_Init+0x194>)
 8001e56:	7812      	ldrb	r2, [r2, #0]
 8001e58:	fb02 f303 	mul.w	r3, r2, r3
 8001e5c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001e60:	4a3c      	ldr	r2, [pc, #240]	@ (8001f54 <HW_TS_Init+0x190>)
 8001e62:	7812      	ldrb	r2, [r2, #0]
 8001e64:	40d3      	lsrs	r3, r2
 8001e66:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8001e68:	69bb      	ldr	r3, [r7, #24]
 8001e6a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d904      	bls.n	8001e7c <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8001e72:	4b3b      	ldr	r3, [pc, #236]	@ (8001f60 <HW_TS_Init+0x19c>)
 8001e74:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001e78:	801a      	strh	r2, [r3, #0]
 8001e7a:	e003      	b.n	8001e84 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8001e7c:	69bb      	ldr	r3, [r7, #24]
 8001e7e:	b29a      	uxth	r2, r3
 8001e80:	4b37      	ldr	r3, [pc, #220]	@ (8001f60 <HW_TS_Init+0x19c>)
 8001e82:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001e84:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8001e88:	f7ff fb9c 	bl	80015c4 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001e8c:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8001e90:	f7ff fb84 	bl	800159c <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8001e94:	79fb      	ldrb	r3, [r7, #7]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d13d      	bne.n	8001f16 <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001e9a:	4b32      	ldr	r3, [pc, #200]	@ (8001f64 <HW_TS_Init+0x1a0>)
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001ea0:	4b31      	ldr	r3, [pc, #196]	@ (8001f68 <HW_TS_Init+0x1a4>)
 8001ea2:	f04f 32ff 	mov.w	r2, #4294967295
 8001ea6:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	77fb      	strb	r3, [r7, #31]
 8001eac:	e00c      	b.n	8001ec8 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8001eae:	7ffa      	ldrb	r2, [r7, #31]
 8001eb0:	492e      	ldr	r1, [pc, #184]	@ (8001f6c <HW_TS_Init+0x1a8>)
 8001eb2:	4613      	mov	r3, r2
 8001eb4:	005b      	lsls	r3, r3, #1
 8001eb6:	4413      	add	r3, r2
 8001eb8:	00db      	lsls	r3, r3, #3
 8001eba:	440b      	add	r3, r1
 8001ebc:	330c      	adds	r3, #12
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001ec2:	7ffb      	ldrb	r3, [r7, #31]
 8001ec4:	3301      	adds	r3, #1
 8001ec6:	77fb      	strb	r3, [r7, #31]
 8001ec8:	7ffb      	ldrb	r3, [r7, #31]
 8001eca:	2b05      	cmp	r3, #5
 8001ecc:	d9ef      	bls.n	8001eae <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8001ece:	4b28      	ldr	r3, [pc, #160]	@ (8001f70 <HW_TS_Init+0x1ac>)
 8001ed0:	2206      	movs	r2, #6
 8001ed2:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8001ed4:	4b1d      	ldr	r3, [pc, #116]	@ (8001f4c <HW_TS_Init+0x188>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	689a      	ldr	r2, [r3, #8]
 8001eda:	4b1c      	ldr	r3, [pc, #112]	@ (8001f4c <HW_TS_Init+0x188>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001ee2:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8001ee4:	4b19      	ldr	r3, [pc, #100]	@ (8001f4c <HW_TS_Init+0x188>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	68db      	ldr	r3, [r3, #12]
 8001eea:	b2da      	uxtb	r2, r3
 8001eec:	4b17      	ldr	r3, [pc, #92]	@ (8001f4c <HW_TS_Init+0x188>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8001ef4:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8001ef6:	4b1f      	ldr	r3, [pc, #124]	@ (8001f74 <HW_TS_Init+0x1b0>)
 8001ef8:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001efc:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8001efe:	2003      	movs	r0, #3
 8001f00:	f001 fb5b 	bl	80035ba <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8001f04:	4b11      	ldr	r3, [pc, #68]	@ (8001f4c <HW_TS_Init+0x188>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	689a      	ldr	r2, [r3, #8]
 8001f0a:	4b10      	ldr	r3, [pc, #64]	@ (8001f4c <HW_TS_Init+0x188>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001f12:	609a      	str	r2, [r3, #8]
 8001f14:	e009      	b.n	8001f2a <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 8001f16:	4b0d      	ldr	r3, [pc, #52]	@ (8001f4c <HW_TS_Init+0x188>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d002      	beq.n	8001f2a <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001f24:	2003      	movs	r0, #3
 8001f26:	f001 fb3a 	bl	800359e <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001f2a:	4b08      	ldr	r3, [pc, #32]	@ (8001f4c <HW_TS_Init+0x188>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	22ff      	movs	r2, #255	@ 0xff
 8001f30:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8001f32:	2200      	movs	r2, #0
 8001f34:	2103      	movs	r1, #3
 8001f36:	2003      	movs	r0, #3
 8001f38:	f001 faef 	bl	800351a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001f3c:	2003      	movs	r0, #3
 8001f3e:	f001 fb06 	bl	800354e <HAL_NVIC_EnableIRQ>

  return;
 8001f42:	bf00      	nop
}
 8001f44:	3720      	adds	r7, #32
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	200001b8 	.word	0x200001b8
 8001f50:	40002800 	.word	0x40002800
 8001f54:	20000171 	.word	0x20000171
 8001f58:	20000172 	.word	0x20000172
 8001f5c:	20000174 	.word	0x20000174
 8001f60:	20000176 	.word	0x20000176
 8001f64:	20000170 	.word	0x20000170
 8001f68:	2000016c 	.word	0x2000016c
 8001f6c:	200000d8 	.word	0x200000d8
 8001f70:	20000168 	.word	0x20000168
 8001f74:	58000800 	.word	0x58000800

08001f78 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b08b      	sub	sp, #44	@ 0x2c
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	60f8      	str	r0, [r7, #12]
 8001f80:	60b9      	str	r1, [r7, #8]
 8001f82:	603b      	str	r3, [r7, #0]
 8001f84:	4613      	mov	r3, r2
 8001f86:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001f8e:	f3ef 8310 	mrs	r3, PRIMASK
 8001f92:	61fb      	str	r3, [r7, #28]
  return(result);
 8001f94:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001f96:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8001f98:	b672      	cpsid	i
}
 8001f9a:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8001f9c:	e004      	b.n	8001fa8 <HW_TS_Create+0x30>
  {
    loop++;
 8001f9e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8001fa8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001fac:	2b05      	cmp	r3, #5
 8001fae:	d80c      	bhi.n	8001fca <HW_TS_Create+0x52>
 8001fb0:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8001fb4:	492c      	ldr	r1, [pc, #176]	@ (8002068 <HW_TS_Create+0xf0>)
 8001fb6:	4613      	mov	r3, r2
 8001fb8:	005b      	lsls	r3, r3, #1
 8001fba:	4413      	add	r3, r2
 8001fbc:	00db      	lsls	r3, r3, #3
 8001fbe:	440b      	add	r3, r1
 8001fc0:	330c      	adds	r3, #12
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d1e9      	bne.n	8001f9e <HW_TS_Create+0x26>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001fca:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001fce:	2b06      	cmp	r3, #6
 8001fd0:	d038      	beq.n	8002044 <HW_TS_Create+0xcc>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 8001fd2:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8001fd6:	4924      	ldr	r1, [pc, #144]	@ (8002068 <HW_TS_Create+0xf0>)
 8001fd8:	4613      	mov	r3, r2
 8001fda:	005b      	lsls	r3, r3, #1
 8001fdc:	4413      	add	r3, r2
 8001fde:	00db      	lsls	r3, r3, #3
 8001fe0:	440b      	add	r3, r1
 8001fe2:	330c      	adds	r3, #12
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	701a      	strb	r2, [r3, #0]
 8001fe8:	6a3b      	ldr	r3, [r7, #32]
 8001fea:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001fec:	69bb      	ldr	r3, [r7, #24]
 8001fee:	f383 8810 	msr	PRIMASK, r3
}
 8001ff2:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 8001ff4:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8001ff8:	491b      	ldr	r1, [pc, #108]	@ (8002068 <HW_TS_Create+0xf0>)
 8001ffa:	4613      	mov	r3, r2
 8001ffc:	005b      	lsls	r3, r3, #1
 8001ffe:	4413      	add	r3, r2
 8002000:	00db      	lsls	r3, r3, #3
 8002002:	440b      	add	r3, r1
 8002004:	3310      	adds	r3, #16
 8002006:	68fa      	ldr	r2, [r7, #12]
 8002008:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 800200a:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800200e:	4916      	ldr	r1, [pc, #88]	@ (8002068 <HW_TS_Create+0xf0>)
 8002010:	4613      	mov	r3, r2
 8002012:	005b      	lsls	r3, r3, #1
 8002014:	4413      	add	r3, r2
 8002016:	00db      	lsls	r3, r3, #3
 8002018:	440b      	add	r3, r1
 800201a:	330d      	adds	r3, #13
 800201c:	79fa      	ldrb	r2, [r7, #7]
 800201e:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 8002020:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8002024:	4910      	ldr	r1, [pc, #64]	@ (8002068 <HW_TS_Create+0xf0>)
 8002026:	4613      	mov	r3, r2
 8002028:	005b      	lsls	r3, r3, #1
 800202a:	4413      	add	r3, r2
 800202c:	00db      	lsls	r3, r3, #3
 800202e:	440b      	add	r3, r1
 8002030:	683a      	ldr	r2, [r7, #0]
 8002032:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800203a:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 800203c:	2300      	movs	r3, #0
 800203e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002042:	e008      	b.n	8002056 <HW_TS_Create+0xde>
 8002044:	6a3b      	ldr	r3, [r7, #32]
 8002046:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	f383 8810 	msr	PRIMASK, r3
}
 800204e:	bf00      	nop
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 8002050:	2301      	movs	r3, #1
 8002052:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  return(localreturnstatus);
 8002056:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800205a:	4618      	mov	r0, r3
 800205c:	372c      	adds	r7, #44	@ 0x2c
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
 8002066:	bf00      	nop
 8002068:	200000d8 	.word	0x200000d8

0800206c <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b086      	sub	sp, #24
 8002070:	af00      	add	r7, sp, #0
 8002072:	4603      	mov	r3, r0
 8002074:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002076:	f3ef 8310 	mrs	r3, PRIMASK
 800207a:	60fb      	str	r3, [r7, #12]
  return(result);
 800207c:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800207e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002080:	b672      	cpsid	i
}
 8002082:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8002084:	2003      	movs	r0, #3
 8002086:	f001 fa70 	bl	800356a <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800208a:	4b34      	ldr	r3, [pc, #208]	@ (800215c <HW_TS_Stop+0xf0>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	22ca      	movs	r2, #202	@ 0xca
 8002090:	625a      	str	r2, [r3, #36]	@ 0x24
 8002092:	4b32      	ldr	r3, [pc, #200]	@ (800215c <HW_TS_Stop+0xf0>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	2253      	movs	r2, #83	@ 0x53
 8002098:	625a      	str	r2, [r3, #36]	@ 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800209a:	79fa      	ldrb	r2, [r7, #7]
 800209c:	4930      	ldr	r1, [pc, #192]	@ (8002160 <HW_TS_Stop+0xf4>)
 800209e:	4613      	mov	r3, r2
 80020a0:	005b      	lsls	r3, r3, #1
 80020a2:	4413      	add	r3, r2
 80020a4:	00db      	lsls	r3, r3, #3
 80020a6:	440b      	add	r3, r1
 80020a8:	330c      	adds	r3, #12
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d142      	bne.n	8002138 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 80020b2:	79fb      	ldrb	r3, [r7, #7]
 80020b4:	2100      	movs	r1, #0
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7ff fc06 	bl	80018c8 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 80020bc:	4b29      	ldr	r3, [pc, #164]	@ (8002164 <HW_TS_Stop+0xf8>)
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80020c2:	7cfb      	ldrb	r3, [r7, #19]
 80020c4:	2b06      	cmp	r3, #6
 80020c6:	d12f      	bne.n	8002128 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80020c8:	4b27      	ldr	r3, [pc, #156]	@ (8002168 <HW_TS_Stop+0xfc>)
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020d4:	d107      	bne.n	80020e6 <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 80020d6:	bf00      	nop
 80020d8:	4b20      	ldr	r3, [pc, #128]	@ (800215c <HW_TS_Stop+0xf0>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	68db      	ldr	r3, [r3, #12]
 80020de:	f003 0304 	and.w	r3, r3, #4
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d1f8      	bne.n	80020d8 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 80020e6:	4b1d      	ldr	r3, [pc, #116]	@ (800215c <HW_TS_Stop+0xf0>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	689a      	ldr	r2, [r3, #8]
 80020ec:	4b1b      	ldr	r3, [pc, #108]	@ (800215c <HW_TS_Stop+0xf0>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80020f4:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80020f6:	bf00      	nop
 80020f8:	4b18      	ldr	r3, [pc, #96]	@ (800215c <HW_TS_Stop+0xf0>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	68db      	ldr	r3, [r3, #12]
 80020fe:	f003 0304 	and.w	r3, r3, #4
 8002102:	2b00      	cmp	r3, #0
 8002104:	d0f8      	beq.n	80020f8 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8002106:	4b15      	ldr	r3, [pc, #84]	@ (800215c <HW_TS_Stop+0xf0>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	b2da      	uxtb	r2, r3
 800210e:	4b13      	ldr	r3, [pc, #76]	@ (800215c <HW_TS_Stop+0xf0>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8002116:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8002118:	4b14      	ldr	r3, [pc, #80]	@ (800216c <HW_TS_Stop+0x100>)
 800211a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800211e:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8002120:	2003      	movs	r0, #3
 8002122:	f001 fa4a 	bl	80035ba <HAL_NVIC_ClearPendingIRQ>
 8002126:	e007      	b.n	8002138 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8002128:	4b11      	ldr	r3, [pc, #68]	@ (8002170 <HW_TS_Stop+0x104>)
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	b2db      	uxtb	r3, r3
 800212e:	7cfa      	ldrb	r2, [r7, #19]
 8002130:	429a      	cmp	r2, r3
 8002132:	d001      	beq.n	8002138 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 8002134:	f7ff fce4 	bl	8001b00 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002138:	4b08      	ldr	r3, [pc, #32]	@ (800215c <HW_TS_Stop+0xf0>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	22ff      	movs	r2, #255	@ 0xff
 800213e:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002140:	2003      	movs	r0, #3
 8002142:	f001 fa04 	bl	800354e <HAL_NVIC_EnableIRQ>
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	f383 8810 	msr	PRIMASK, r3
}
 8002150:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8002152:	bf00      	nop
}
 8002154:	3718      	adds	r7, #24
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	200001b8 	.word	0x200001b8
 8002160:	200000d8 	.word	0x200000d8
 8002164:	20000168 	.word	0x20000168
 8002168:	40002800 	.word	0x40002800
 800216c:	58000800 	.word	0x58000800
 8002170:	20000169 	.word	0x20000169

08002174 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b086      	sub	sp, #24
 8002178:	af00      	add	r7, sp, #0
 800217a:	4603      	mov	r3, r0
 800217c:	6039      	str	r1, [r7, #0]
 800217e:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8002180:	79fa      	ldrb	r2, [r7, #7]
 8002182:	493b      	ldr	r1, [pc, #236]	@ (8002270 <HW_TS_Start+0xfc>)
 8002184:	4613      	mov	r3, r2
 8002186:	005b      	lsls	r3, r3, #1
 8002188:	4413      	add	r3, r2
 800218a:	00db      	lsls	r3, r3, #3
 800218c:	440b      	add	r3, r1
 800218e:	330c      	adds	r3, #12
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	b2db      	uxtb	r3, r3
 8002194:	2b02      	cmp	r3, #2
 8002196:	d103      	bne.n	80021a0 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8002198:	79fb      	ldrb	r3, [r7, #7]
 800219a:	4618      	mov	r0, r3
 800219c:	f7ff ff66 	bl	800206c <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80021a0:	f3ef 8310 	mrs	r3, PRIMASK
 80021a4:	60fb      	str	r3, [r7, #12]
  return(result);
 80021a6:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80021a8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80021aa:	b672      	cpsid	i
}
 80021ac:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80021ae:	2003      	movs	r0, #3
 80021b0:	f001 f9db 	bl	800356a <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80021b4:	4b2f      	ldr	r3, [pc, #188]	@ (8002274 <HW_TS_Start+0x100>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	22ca      	movs	r2, #202	@ 0xca
 80021ba:	625a      	str	r2, [r3, #36]	@ 0x24
 80021bc:	4b2d      	ldr	r3, [pc, #180]	@ (8002274 <HW_TS_Start+0x100>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	2253      	movs	r2, #83	@ 0x53
 80021c2:	625a      	str	r2, [r3, #36]	@ 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 80021c4:	79fa      	ldrb	r2, [r7, #7]
 80021c6:	492a      	ldr	r1, [pc, #168]	@ (8002270 <HW_TS_Start+0xfc>)
 80021c8:	4613      	mov	r3, r2
 80021ca:	005b      	lsls	r3, r3, #1
 80021cc:	4413      	add	r3, r2
 80021ce:	00db      	lsls	r3, r3, #3
 80021d0:	440b      	add	r3, r1
 80021d2:	330c      	adds	r3, #12
 80021d4:	2202      	movs	r2, #2
 80021d6:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 80021d8:	79fa      	ldrb	r2, [r7, #7]
 80021da:	4925      	ldr	r1, [pc, #148]	@ (8002270 <HW_TS_Start+0xfc>)
 80021dc:	4613      	mov	r3, r2
 80021de:	005b      	lsls	r3, r3, #1
 80021e0:	4413      	add	r3, r2
 80021e2:	00db      	lsls	r3, r3, #3
 80021e4:	440b      	add	r3, r1
 80021e6:	3308      	adds	r3, #8
 80021e8:	683a      	ldr	r2, [r7, #0]
 80021ea:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 80021ec:	79fa      	ldrb	r2, [r7, #7]
 80021ee:	4920      	ldr	r1, [pc, #128]	@ (8002270 <HW_TS_Start+0xfc>)
 80021f0:	4613      	mov	r3, r2
 80021f2:	005b      	lsls	r3, r3, #1
 80021f4:	4413      	add	r3, r2
 80021f6:	00db      	lsls	r3, r3, #3
 80021f8:	440b      	add	r3, r1
 80021fa:	3304      	adds	r3, #4
 80021fc:	683a      	ldr	r2, [r7, #0]
 80021fe:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8002200:	79fb      	ldrb	r3, [r7, #7]
 8002202:	4618      	mov	r0, r3
 8002204:	f7ff fab6 	bl	8001774 <linkTimer>
 8002208:	4603      	mov	r3, r0
 800220a:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 800220c:	4b1a      	ldr	r3, [pc, #104]	@ (8002278 <HW_TS_Start+0x104>)
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8002212:	4b1a      	ldr	r3, [pc, #104]	@ (800227c <HW_TS_Start+0x108>)
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	b2db      	uxtb	r3, r3
 8002218:	7c7a      	ldrb	r2, [r7, #17]
 800221a:	429a      	cmp	r2, r3
 800221c:	d002      	beq.n	8002224 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 800221e:	f7ff fc6f 	bl	8001b00 <RescheduleTimerList>
 8002222:	e013      	b.n	800224c <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8002224:	79fa      	ldrb	r2, [r7, #7]
 8002226:	4912      	ldr	r1, [pc, #72]	@ (8002270 <HW_TS_Start+0xfc>)
 8002228:	4613      	mov	r3, r2
 800222a:	005b      	lsls	r3, r3, #1
 800222c:	4413      	add	r3, r2
 800222e:	00db      	lsls	r3, r3, #3
 8002230:	440b      	add	r3, r1
 8002232:	3308      	adds	r3, #8
 8002234:	6819      	ldr	r1, [r3, #0]
 8002236:	8a7b      	ldrh	r3, [r7, #18]
 8002238:	79fa      	ldrb	r2, [r7, #7]
 800223a:	1ac9      	subs	r1, r1, r3
 800223c:	480c      	ldr	r0, [pc, #48]	@ (8002270 <HW_TS_Start+0xfc>)
 800223e:	4613      	mov	r3, r2
 8002240:	005b      	lsls	r3, r3, #1
 8002242:	4413      	add	r3, r2
 8002244:	00db      	lsls	r3, r3, #3
 8002246:	4403      	add	r3, r0
 8002248:	3308      	adds	r3, #8
 800224a:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800224c:	4b09      	ldr	r3, [pc, #36]	@ (8002274 <HW_TS_Start+0x100>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	22ff      	movs	r2, #255	@ 0xff
 8002252:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002254:	2003      	movs	r0, #3
 8002256:	f001 f97a 	bl	800354e <HAL_NVIC_EnableIRQ>
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	f383 8810 	msr	PRIMASK, r3
}
 8002264:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8002266:	bf00      	nop
}
 8002268:	3718      	adds	r7, #24
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	200000d8 	.word	0x200000d8
 8002274:	200001b8 	.word	0x200001b8
 8002278:	20000168 	.word	0x20000168
 800227c:	20000169 	.word	0x20000169

08002280 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b084      	sub	sp, #16
 8002284:	af00      	add	r7, sp, #0
 8002286:	60f8      	str	r0, [r7, #12]
 8002288:	460b      	mov	r3, r1
 800228a:	607a      	str	r2, [r7, #4]
 800228c:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4798      	blx	r3

  return;
 8002292:	bf00      	nop
}
 8002294:	3710      	adds	r7, #16
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
	...

0800229c <HW_UART_Transmit_DMA>:

    return hw_status;
}

hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b086      	sub	sp, #24
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	60b9      	str	r1, [r7, #8]
 80022a4:	607b      	str	r3, [r7, #4]
 80022a6:	4603      	mov	r3, r0
 80022a8:	73fb      	strb	r3, [r7, #15]
 80022aa:	4613      	mov	r3, r2
 80022ac:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef hal_status = HAL_OK;
 80022ae:	2300      	movs	r3, #0
 80022b0:	75fb      	strb	r3, [r7, #23]
    hw_status_t hw_status = hw_uart_ok;
 80022b2:	2300      	movs	r3, #0
 80022b4:	75bb      	strb	r3, [r7, #22]

    switch (hw_uart_id)
 80022b6:	7bfb      	ldrb	r3, [r7, #15]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d10e      	bne.n	80022da <HW_UART_Transmit_DMA+0x3e>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case hw_uart1:
            HW_huart1TxCb = cb;
 80022bc:	4a17      	ldr	r2, [pc, #92]	@ (800231c <HW_UART_Transmit_DMA+0x80>)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6013      	str	r3, [r2, #0]
            huart1.Instance = USART1;
 80022c2:	4b17      	ldr	r3, [pc, #92]	@ (8002320 <HW_UART_Transmit_DMA+0x84>)
 80022c4:	4a17      	ldr	r2, [pc, #92]	@ (8002324 <HW_UART_Transmit_DMA+0x88>)
 80022c6:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&huart1, p_data, size);
 80022c8:	89bb      	ldrh	r3, [r7, #12]
 80022ca:	461a      	mov	r2, r3
 80022cc:	68b9      	ldr	r1, [r7, #8]
 80022ce:	4814      	ldr	r0, [pc, #80]	@ (8002320 <HW_UART_Transmit_DMA+0x84>)
 80022d0:	f005 fc3e 	bl	8007b50 <HAL_UART_Transmit_DMA>
 80022d4:	4603      	mov	r3, r0
 80022d6:	75fb      	strb	r3, [r7, #23]
            break;
 80022d8:	e000      	b.n	80022dc <HW_UART_Transmit_DMA+0x40>
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
            break;
#endif

        default:
            break;
 80022da:	bf00      	nop
    }

    switch (hal_status)
 80022dc:	7dfb      	ldrb	r3, [r7, #23]
 80022de:	2b03      	cmp	r3, #3
 80022e0:	d816      	bhi.n	8002310 <HW_UART_Transmit_DMA+0x74>
 80022e2:	a201      	add	r2, pc, #4	@ (adr r2, 80022e8 <HW_UART_Transmit_DMA+0x4c>)
 80022e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022e8:	080022f9 	.word	0x080022f9
 80022ec:	080022ff 	.word	0x080022ff
 80022f0:	08002305 	.word	0x08002305
 80022f4:	0800230b 	.word	0x0800230b
    {
        case HAL_OK:
            hw_status = hw_uart_ok;
 80022f8:	2300      	movs	r3, #0
 80022fa:	75bb      	strb	r3, [r7, #22]
            break;
 80022fc:	e009      	b.n	8002312 <HW_UART_Transmit_DMA+0x76>

        case HAL_ERROR:
            hw_status = hw_uart_error;
 80022fe:	2301      	movs	r3, #1
 8002300:	75bb      	strb	r3, [r7, #22]
            break;
 8002302:	e006      	b.n	8002312 <HW_UART_Transmit_DMA+0x76>

        case HAL_BUSY:
            hw_status = hw_uart_busy;
 8002304:	2302      	movs	r3, #2
 8002306:	75bb      	strb	r3, [r7, #22]
            break;
 8002308:	e003      	b.n	8002312 <HW_UART_Transmit_DMA+0x76>

        case HAL_TIMEOUT:
            hw_status = hw_uart_to;
 800230a:	2303      	movs	r3, #3
 800230c:	75bb      	strb	r3, [r7, #22]
            break;
 800230e:	e000      	b.n	8002312 <HW_UART_Transmit_DMA+0x76>

        default:
            break;
 8002310:	bf00      	nop
    }

    return hw_status;
 8002312:	7dbb      	ldrb	r3, [r7, #22]
}
 8002314:	4618      	mov	r0, r3
 8002316:	3718      	adds	r7, #24
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}
 800231c:	20000178 	.word	0x20000178
 8002320:	200001dc 	.word	0x200001dc
 8002324:	40013800 	.word	0x40013800

08002328 <HAL_UART_TxCpltCallback>:

    return;
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	461a      	mov	r2, r3
 8002336:	4b09      	ldr	r3, [pc, #36]	@ (800235c <HAL_UART_TxCpltCallback+0x34>)
 8002338:	429a      	cmp	r2, r3
 800233a:	d107      	bne.n	800234c <HAL_UART_TxCpltCallback+0x24>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1TxCb)
 800233c:	4b08      	ldr	r3, [pc, #32]	@ (8002360 <HAL_UART_TxCpltCallback+0x38>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d005      	beq.n	8002350 <HAL_UART_TxCpltCallback+0x28>
            {
                HW_huart1TxCb();
 8002344:	4b06      	ldr	r3, [pc, #24]	@ (8002360 <HAL_UART_TxCpltCallback+0x38>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4798      	blx	r3
            }
            break;
 800234a:	e001      	b.n	8002350 <HAL_UART_TxCpltCallback+0x28>
            }
            break;
#endif

        default:
            break;
 800234c:	bf00      	nop
 800234e:	e000      	b.n	8002352 <HAL_UART_TxCpltCallback+0x2a>
            break;
 8002350:	bf00      	nop
    }

    return;
 8002352:	bf00      	nop
}
 8002354:	3708      	adds	r7, #8
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	40013800 	.word	0x40013800
 8002360:	20000178 	.word	0x20000178

08002364 <ism330_Init>:

extern I2C_HandleTypeDef hi2c3;


HAL_StatusTypeDef ism330_Init(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b086      	sub	sp, #24
 8002368:	af04      	add	r7, sp, #16
    HAL_StatusTypeDef ret;

    // CTRL3_C: Enable Block Data Update (BDU) and auto-increment
    uint8_t ctrl3_c = 0x44;  // BDU = 1 (bit6), IF_INC = 1 (bit2)
 800236a:	2344      	movs	r3, #68	@ 0x44
 800236c:	71bb      	strb	r3, [r7, #6]
    ret = HAL_I2C_Mem_Write(&hi2c3, ISM330_I2C_ADD, ISM330_CTRL3_C,
 800236e:	2364      	movs	r3, #100	@ 0x64
 8002370:	9302      	str	r3, [sp, #8]
 8002372:	2301      	movs	r3, #1
 8002374:	9301      	str	r3, [sp, #4]
 8002376:	1dbb      	adds	r3, r7, #6
 8002378:	9300      	str	r3, [sp, #0]
 800237a:	2301      	movs	r3, #1
 800237c:	2212      	movs	r2, #18
 800237e:	21d7      	movs	r1, #215	@ 0xd7
 8002380:	481c      	ldr	r0, [pc, #112]	@ (80023f4 <ism330_Init+0x90>)
 8002382:	f001 fec5 	bl	8004110 <HAL_I2C_Mem_Write>
 8002386:	4603      	mov	r3, r0
 8002388:	71fb      	strb	r3, [r7, #7]
                            I2C_MEMADD_SIZE_8BIT, &ctrl3_c, 1, 100);
    if (ret != HAL_OK) return ret;
 800238a:	79fb      	ldrb	r3, [r7, #7]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d001      	beq.n	8002394 <ism330_Init+0x30>
 8002390:	79fb      	ldrb	r3, [r7, #7]
 8002392:	e02a      	b.n	80023ea <ism330_Init+0x86>

    // CTRL1_XL: Accelerometer ODR = 104 Hz, FS = ±2g
    uint8_t ctrl1_xl = 0x40; // ODR_XL = 104 Hz (0100), FS = ±2g (00)
 8002394:	2340      	movs	r3, #64	@ 0x40
 8002396:	717b      	strb	r3, [r7, #5]
    ret = HAL_I2C_Mem_Write(&hi2c3, ISM330_I2C_ADD, ISM330_CTRL1_XL,
 8002398:	2364      	movs	r3, #100	@ 0x64
 800239a:	9302      	str	r3, [sp, #8]
 800239c:	2301      	movs	r3, #1
 800239e:	9301      	str	r3, [sp, #4]
 80023a0:	1d7b      	adds	r3, r7, #5
 80023a2:	9300      	str	r3, [sp, #0]
 80023a4:	2301      	movs	r3, #1
 80023a6:	2210      	movs	r2, #16
 80023a8:	21d7      	movs	r1, #215	@ 0xd7
 80023aa:	4812      	ldr	r0, [pc, #72]	@ (80023f4 <ism330_Init+0x90>)
 80023ac:	f001 feb0 	bl	8004110 <HAL_I2C_Mem_Write>
 80023b0:	4603      	mov	r3, r0
 80023b2:	71fb      	strb	r3, [r7, #7]
                            I2C_MEMADD_SIZE_8BIT, &ctrl1_xl, 1, 100);
    if (ret != HAL_OK) return ret;
 80023b4:	79fb      	ldrb	r3, [r7, #7]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d001      	beq.n	80023be <ism330_Init+0x5a>
 80023ba:	79fb      	ldrb	r3, [r7, #7]
 80023bc:	e015      	b.n	80023ea <ism330_Init+0x86>

    // CTRL2_G: Gyroscope ODR = 104 Hz, FS = ±250 dps
    uint8_t ctrl2_g = 0x40;  // ODR_G = 104 Hz (0100), FS = ±250 dps (00)
 80023be:	2340      	movs	r3, #64	@ 0x40
 80023c0:	713b      	strb	r3, [r7, #4]
    ret = HAL_I2C_Mem_Write(&hi2c3, ISM330_I2C_ADD, ISM330_CTRL2_G,
 80023c2:	2364      	movs	r3, #100	@ 0x64
 80023c4:	9302      	str	r3, [sp, #8]
 80023c6:	2301      	movs	r3, #1
 80023c8:	9301      	str	r3, [sp, #4]
 80023ca:	1d3b      	adds	r3, r7, #4
 80023cc:	9300      	str	r3, [sp, #0]
 80023ce:	2301      	movs	r3, #1
 80023d0:	2211      	movs	r2, #17
 80023d2:	21d7      	movs	r1, #215	@ 0xd7
 80023d4:	4807      	ldr	r0, [pc, #28]	@ (80023f4 <ism330_Init+0x90>)
 80023d6:	f001 fe9b 	bl	8004110 <HAL_I2C_Mem_Write>
 80023da:	4603      	mov	r3, r0
 80023dc:	71fb      	strb	r3, [r7, #7]
                            I2C_MEMADD_SIZE_8BIT, &ctrl2_g, 1, 100);
    if (ret != HAL_OK) return ret;
 80023de:	79fb      	ldrb	r3, [r7, #7]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d001      	beq.n	80023e8 <ism330_Init+0x84>
 80023e4:	79fb      	ldrb	r3, [r7, #7]
 80023e6:	e000      	b.n	80023ea <ism330_Init+0x86>

    return HAL_OK;
 80023e8:	2300      	movs	r3, #0
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3708      	adds	r7, #8
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	20000334 	.word	0x20000334

080023f8 <lis3mdl_Init>:


extern I2C_HandleTypeDef hi2c3;

HAL_StatusTypeDef lis3mdl_Init(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b086      	sub	sp, #24
 80023fc:	af04      	add	r7, sp, #16
    HAL_StatusTypeDef ret;

    // CTRL_REG1: Temp enable = 0, Ultra-high-performance XY, ODR = 80 Hz
    uint8_t ctrl_reg1 = 0x70;  // 0b01110000
 80023fe:	2370      	movs	r3, #112	@ 0x70
 8002400:	71bb      	strb	r3, [r7, #6]
    ret = HAL_I2C_Mem_Write(&hi2c3, LIS3MDL_I2C_ADD, LIS3MDL_CTRL_REG1,
 8002402:	2364      	movs	r3, #100	@ 0x64
 8002404:	9302      	str	r3, [sp, #8]
 8002406:	2301      	movs	r3, #1
 8002408:	9301      	str	r3, [sp, #4]
 800240a:	1dbb      	adds	r3, r7, #6
 800240c:	9300      	str	r3, [sp, #0]
 800240e:	2301      	movs	r3, #1
 8002410:	2220      	movs	r2, #32
 8002412:	213c      	movs	r1, #60	@ 0x3c
 8002414:	481c      	ldr	r0, [pc, #112]	@ (8002488 <lis3mdl_Init+0x90>)
 8002416:	f001 fe7b 	bl	8004110 <HAL_I2C_Mem_Write>
 800241a:	4603      	mov	r3, r0
 800241c:	71fb      	strb	r3, [r7, #7]
                            I2C_MEMADD_SIZE_8BIT, &ctrl_reg1, 1, 100);
    if (ret != HAL_OK) return ret;
 800241e:	79fb      	ldrb	r3, [r7, #7]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d001      	beq.n	8002428 <lis3mdl_Init+0x30>
 8002424:	79fb      	ldrb	r3, [r7, #7]
 8002426:	e02a      	b.n	800247e <lis3mdl_Init+0x86>

    // CTRL_REG2: FS = ±4 gauss (00)
    uint8_t ctrl_reg2 = 0x00;
 8002428:	2300      	movs	r3, #0
 800242a:	717b      	strb	r3, [r7, #5]
    ret = HAL_I2C_Mem_Write(&hi2c3, LIS3MDL_I2C_ADD, LIS3MDL_CTRL_REG2,
 800242c:	2364      	movs	r3, #100	@ 0x64
 800242e:	9302      	str	r3, [sp, #8]
 8002430:	2301      	movs	r3, #1
 8002432:	9301      	str	r3, [sp, #4]
 8002434:	1d7b      	adds	r3, r7, #5
 8002436:	9300      	str	r3, [sp, #0]
 8002438:	2301      	movs	r3, #1
 800243a:	2221      	movs	r2, #33	@ 0x21
 800243c:	213c      	movs	r1, #60	@ 0x3c
 800243e:	4812      	ldr	r0, [pc, #72]	@ (8002488 <lis3mdl_Init+0x90>)
 8002440:	f001 fe66 	bl	8004110 <HAL_I2C_Mem_Write>
 8002444:	4603      	mov	r3, r0
 8002446:	71fb      	strb	r3, [r7, #7]
                            I2C_MEMADD_SIZE_8BIT, &ctrl_reg2, 1, 100);
    if (ret != HAL_OK) return ret;
 8002448:	79fb      	ldrb	r3, [r7, #7]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d001      	beq.n	8002452 <lis3mdl_Init+0x5a>
 800244e:	79fb      	ldrb	r3, [r7, #7]
 8002450:	e015      	b.n	800247e <lis3mdl_Init+0x86>

    // CTRL_REG3: Continuous-conversion mode
    uint8_t ctrl_reg3 = 0x00;
 8002452:	2300      	movs	r3, #0
 8002454:	713b      	strb	r3, [r7, #4]
    ret = HAL_I2C_Mem_Write(&hi2c3, LIS3MDL_I2C_ADD, LIS3MDL_CTRL_REG3,
 8002456:	2364      	movs	r3, #100	@ 0x64
 8002458:	9302      	str	r3, [sp, #8]
 800245a:	2301      	movs	r3, #1
 800245c:	9301      	str	r3, [sp, #4]
 800245e:	1d3b      	adds	r3, r7, #4
 8002460:	9300      	str	r3, [sp, #0]
 8002462:	2301      	movs	r3, #1
 8002464:	2222      	movs	r2, #34	@ 0x22
 8002466:	213c      	movs	r1, #60	@ 0x3c
 8002468:	4807      	ldr	r0, [pc, #28]	@ (8002488 <lis3mdl_Init+0x90>)
 800246a:	f001 fe51 	bl	8004110 <HAL_I2C_Mem_Write>
 800246e:	4603      	mov	r3, r0
 8002470:	71fb      	strb	r3, [r7, #7]
                            I2C_MEMADD_SIZE_8BIT, &ctrl_reg3, 1, 100);
    if (ret != HAL_OK) return ret;
 8002472:	79fb      	ldrb	r3, [r7, #7]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d001      	beq.n	800247c <lis3mdl_Init+0x84>
 8002478:	79fb      	ldrb	r3, [r7, #7]
 800247a:	e000      	b.n	800247e <lis3mdl_Init+0x86>

    return HAL_OK;
 800247c:	2300      	movs	r3, #0
}
 800247e:	4618      	mov	r0, r3
 8002480:	3708      	adds	r7, #8
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	20000334 	.word	0x20000334

0800248c <LL_RCC_LSE_SetDriveCapability>:
{
 800248c:	b480      	push	{r7}
 800248e:	b083      	sub	sp, #12
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8002494:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002498:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800249c:	f023 0218 	bic.w	r2, r3, #24
 80024a0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80024ac:	bf00      	nop
 80024ae:	370c      	adds	r7, #12
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr

080024b8 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b085      	sub	sp, #20
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80024c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80024c4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80024c6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	4313      	orrs	r3, r2
 80024ce:	648b      	str	r3, [r1, #72]	@ 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80024d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80024d4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4013      	ands	r3, r2
 80024da:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80024dc:	68fb      	ldr	r3, [r7, #12]
}
 80024de:	bf00      	nop
 80024e0:	3714      	adds	r7, #20
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr

080024ea <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80024ea:	b480      	push	{r7}
 80024ec:	b085      	sub	sp, #20
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80024f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80024f6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80024f8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	4313      	orrs	r3, r2
 8002500:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002502:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002506:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	4013      	ands	r3, r2
 800250c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800250e:	68fb      	ldr	r3, [r7, #12]
}
 8002510:	bf00      	nop
 8002512:	3714      	adds	r7, #20
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr

0800251c <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800251c:	b480      	push	{r7}
 800251e:	b085      	sub	sp, #20
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002524:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002528:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800252a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	4313      	orrs	r3, r2
 8002532:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002534:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002538:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4013      	ands	r3, r2
 800253e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002540:	68fb      	ldr	r3, [r7, #12]
}
 8002542:	bf00      	nop
 8002544:	3714      	adds	r7, #20
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr

0800254e <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800254e:	b480      	push	{r7}
 8002550:	b085      	sub	sp, #20
 8002552:	af00      	add	r7, sp, #0
 8002554:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8002556:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800255a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800255c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	4313      	orrs	r3, r2
 8002564:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002566:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800256a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	4013      	ands	r3, r2
 8002570:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002572:	68fb      	ldr	r3, [r7, #12]
}
 8002574:	bf00      	nop
 8002576:	3714      	adds	r7, #20
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr

08002580 <LL_RTC_EnableWriteProtection>:
{
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	22ff      	movs	r2, #255	@ 0xff
 800258c:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800258e:	bf00      	nop
 8002590:	370c      	adds	r7, #12
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr

0800259a <LL_RTC_DisableWriteProtection>:
{
 800259a:	b480      	push	{r7}
 800259c:	b083      	sub	sp, #12
 800259e:	af00      	add	r7, sp, #0
 80025a0:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	22ca      	movs	r2, #202	@ 0xca
 80025a6:	625a      	str	r2, [r3, #36]	@ 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2253      	movs	r2, #83	@ 0x53
 80025ac:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80025ae:	bf00      	nop
 80025b0:	370c      	adds	r7, #12
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr

080025ba <LL_RTC_WAKEUP_SetClock>:
{
 80025ba:	b480      	push	{r7}
 80025bc:	b083      	sub	sp, #12
 80025be:	af00      	add	r7, sp, #0
 80025c0:	6078      	str	r0, [r7, #4]
 80025c2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	f023 0207 	bic.w	r2, r3, #7
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	431a      	orrs	r2, r3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	609a      	str	r2, [r3, #8]
}
 80025d4:	bf00      	nop
 80025d6:	370c      	adds	r7, #12
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr

080025e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80025e4:	f000 fdcc 	bl	8003180 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 80025e8:	f7fe fd8c 	bl	8001104 <MX_APPE_Config>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80025ec:	f000 f824 	bl	8002638 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80025f0:	f000 f87e 	bl	80026f0 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 80025f4:	f000 f89c 	bl	8002730 <MX_IPCC_Init>

  /* USER CODE BEGIN SysInit */
  PeriphClock_Config();
 80025f8:	f000 faae 	bl	8002b58 <PeriphClock_Config>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80025fc:	f000 f9bc 	bl	8002978 <MX_GPIO_Init>
  my_MX_SPI1_Init();
 8002600:	f000 f966 	bl	80028d0 <my_MX_SPI1_Init>
  MX_I2C3_Init();
 8002604:	f000 f932 	bl	800286c <MX_I2C3_Init>
  MX_DMA_Init();
 8002608:	f000 f9a4 	bl	8002954 <MX_DMA_Init>
  MX_RTC_Init();
 800260c:	f000 f8ac 	bl	8002768 <MX_RTC_Init>
  MX_USART1_UART_Init();
 8002610:	f000 f8de 	bl	80027d0 <MX_USART1_UART_Init>
  MX_RF_Init();
 8002614:	f000 f8a0 	bl	8002758 <MX_RF_Init>
  /* USER CODE BEGIN 2 */
  MX_TIM2_Init();
 8002618:	f000 faa6 	bl	8002b68 <MX_TIM2_Init>
  MX_TIM17_Init();
 800261c:	f000 fae2 	bl	8002be4 <MX_TIM17_Init>

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8002620:	f7fe fd7e 	bl	8001120 <MX_APPE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  ADS1299_Init();
 8002624:	f7fe fa62 	bl	8000aec <ADS1299_Init>
  ism330_Init();
 8002628:	f7ff fe9c 	bl	8002364 <ism330_Init>
  lis3mdl_Init();
 800262c:	f7ff fee4 	bl	80023f8 <lis3mdl_Init>

  while(1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 8002630:	f7fe ff55 	bl	80014de <MX_APPE_Process>
 8002634:	e7fc      	b.n	8002630 <main+0x50>
	...

08002638 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b09a      	sub	sp, #104	@ 0x68
 800263c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800263e:	f107 0320 	add.w	r3, r7, #32
 8002642:	2248      	movs	r2, #72	@ 0x48
 8002644:	2100      	movs	r1, #0
 8002646:	4618      	mov	r0, r3
 8002648:	f00b fe2a 	bl	800e2a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800264c:	1d3b      	adds	r3, r7, #4
 800264e:	2200      	movs	r2, #0
 8002650:	601a      	str	r2, [r3, #0]
 8002652:	605a      	str	r2, [r3, #4]
 8002654:	609a      	str	r2, [r3, #8]
 8002656:	60da      	str	r2, [r3, #12]
 8002658:	611a      	str	r2, [r3, #16]
 800265a:	615a      	str	r2, [r3, #20]
 800265c:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800265e:	f002 f95f 	bl	8004920 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 8002662:	2010      	movs	r0, #16
 8002664:	f7ff ff12 	bl	800248c <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002668:	4b20      	ldr	r3, [pc, #128]	@ (80026ec <SystemClock_Config+0xb4>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002670:	4a1e      	ldr	r2, [pc, #120]	@ (80026ec <SystemClock_Config+0xb4>)
 8002672:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002676:	6013      	str	r3, [r2, #0]
 8002678:	4b1c      	ldr	r3, [pc, #112]	@ (80026ec <SystemClock_Config+0xb4>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002680:	603b      	str	r3, [r7, #0]
 8002682:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8002684:	2307      	movs	r3, #7
 8002686:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002688:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800268c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800268e:	2301      	movs	r3, #1
 8002690:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002692:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002696:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002698:	2340      	movs	r3, #64	@ 0x40
 800269a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800269c:	2300      	movs	r3, #0
 800269e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80026a0:	f107 0320 	add.w	r3, r7, #32
 80026a4:	4618      	mov	r0, r3
 80026a6:	f002 fccf 	bl	8005048 <HAL_RCC_OscConfig>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d001      	beq.n	80026b4 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80026b0:	f000 fb2c 	bl	8002d0c <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80026b4:	236f      	movs	r3, #111	@ 0x6f
 80026b6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80026b8:	2302      	movs	r3, #2
 80026ba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80026bc:	2300      	movs	r3, #0
 80026be:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80026c0:	2300      	movs	r3, #0
 80026c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80026c4:	2300      	movs	r3, #0
 80026c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80026c8:	2300      	movs	r3, #0
 80026ca:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80026cc:	2300      	movs	r3, #0
 80026ce:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80026d0:	1d3b      	adds	r3, r7, #4
 80026d2:	2101      	movs	r1, #1
 80026d4:	4618      	mov	r0, r3
 80026d6:	f003 f82b 	bl	8005730 <HAL_RCC_ClockConfig>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d001      	beq.n	80026e4 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80026e0:	f000 fb14 	bl	8002d0c <Error_Handler>
  }
}
 80026e4:	bf00      	nop
 80026e6:	3768      	adds	r7, #104	@ 0x68
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	58000400 	.word	0x58000400

080026f0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b094      	sub	sp, #80	@ 0x50
 80026f4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80026f6:	463b      	mov	r3, r7
 80026f8:	2250      	movs	r2, #80	@ 0x50
 80026fa:	2100      	movs	r1, #0
 80026fc:	4618      	mov	r0, r3
 80026fe:	f00b fdcf 	bl	800e2a0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 8002702:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002706:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8002708:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800270c:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 800270e:	2302      	movs	r3, #2
 8002710:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8002712:	2300      	movs	r3, #0
 8002714:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002716:	463b      	mov	r3, r7
 8002718:	4618      	mov	r0, r3
 800271a:	f003 fc46 	bl	8005faa <HAL_RCCEx_PeriphCLKConfig>
 800271e:	4603      	mov	r3, r0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d001      	beq.n	8002728 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8002724:	f000 faf2 	bl	8002d0c <Error_Handler>
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif

  /* USER CODE END Smps */
}
 8002728:	bf00      	nop
 800272a:	3750      	adds	r7, #80	@ 0x50
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}

08002730 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8002734:	4b06      	ldr	r3, [pc, #24]	@ (8002750 <MX_IPCC_Init+0x20>)
 8002736:	4a07      	ldr	r2, [pc, #28]	@ (8002754 <MX_IPCC_Init+0x24>)
 8002738:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 800273a:	4805      	ldr	r0, [pc, #20]	@ (8002750 <MX_IPCC_Init+0x20>)
 800273c:	f002 f86a 	bl	8004814 <HAL_IPCC_Init>
 8002740:	4603      	mov	r3, r0
 8002742:	2b00      	cmp	r3, #0
 8002744:	d001      	beq.n	800274a <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8002746:	f000 fae1 	bl	8002d0c <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 800274a:	bf00      	nop
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	2000017c 	.word	0x2000017c
 8002754:	58000c00 	.word	0x58000c00

08002758 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8002758:	b480      	push	{r7}
 800275a:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 800275c:	bf00      	nop
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr
	...

08002768 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800276c:	4b16      	ldr	r3, [pc, #88]	@ (80027c8 <MX_RTC_Init+0x60>)
 800276e:	4a17      	ldr	r2, [pc, #92]	@ (80027cc <MX_RTC_Init+0x64>)
 8002770:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002772:	4b15      	ldr	r3, [pc, #84]	@ (80027c8 <MX_RTC_Init+0x60>)
 8002774:	2200      	movs	r2, #0
 8002776:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8002778:	4b13      	ldr	r3, [pc, #76]	@ (80027c8 <MX_RTC_Init+0x60>)
 800277a:	220f      	movs	r2, #15
 800277c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 800277e:	4b12      	ldr	r3, [pc, #72]	@ (80027c8 <MX_RTC_Init+0x60>)
 8002780:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8002784:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002786:	4b10      	ldr	r3, [pc, #64]	@ (80027c8 <MX_RTC_Init+0x60>)
 8002788:	2200      	movs	r2, #0
 800278a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800278c:	4b0e      	ldr	r3, [pc, #56]	@ (80027c8 <MX_RTC_Init+0x60>)
 800278e:	2200      	movs	r2, #0
 8002790:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002792:	4b0d      	ldr	r3, [pc, #52]	@ (80027c8 <MX_RTC_Init+0x60>)
 8002794:	2200      	movs	r2, #0
 8002796:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002798:	4b0b      	ldr	r3, [pc, #44]	@ (80027c8 <MX_RTC_Init+0x60>)
 800279a:	2200      	movs	r2, #0
 800279c:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800279e:	480a      	ldr	r0, [pc, #40]	@ (80027c8 <MX_RTC_Init+0x60>)
 80027a0:	f003 fe8a 	bl	80064b8 <HAL_RTC_Init>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d001      	beq.n	80027ae <MX_RTC_Init+0x46>
  {
    Error_Handler();
 80027aa:	f000 faaf 	bl	8002d0c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 80027ae:	4807      	ldr	r0, [pc, #28]	@ (80027cc <MX_RTC_Init+0x64>)
 80027b0:	f7ff fef3 	bl	800259a <LL_RTC_DisableWriteProtection>
  
  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 80027b4:	2100      	movs	r1, #0
 80027b6:	4805      	ldr	r0, [pc, #20]	@ (80027cc <MX_RTC_Init+0x64>)
 80027b8:	f7ff feff 	bl	80025ba <LL_RTC_WAKEUP_SetClock>
  
  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 80027bc:	4803      	ldr	r0, [pc, #12]	@ (80027cc <MX_RTC_Init+0x64>)
 80027be:	f7ff fedf 	bl	8002580 <LL_RTC_EnableWriteProtection>
  /* USER CODE END RTC_Init 2 */

}
 80027c2:	bf00      	nop
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	200001b8 	.word	0x200001b8
 80027cc:	40002800 	.word	0x40002800

080027d0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80027d4:	4b23      	ldr	r3, [pc, #140]	@ (8002864 <MX_USART1_UART_Init+0x94>)
 80027d6:	4a24      	ldr	r2, [pc, #144]	@ (8002868 <MX_USART1_UART_Init+0x98>)
 80027d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80027da:	4b22      	ldr	r3, [pc, #136]	@ (8002864 <MX_USART1_UART_Init+0x94>)
 80027dc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80027e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80027e2:	4b20      	ldr	r3, [pc, #128]	@ (8002864 <MX_USART1_UART_Init+0x94>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80027e8:	4b1e      	ldr	r3, [pc, #120]	@ (8002864 <MX_USART1_UART_Init+0x94>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80027ee:	4b1d      	ldr	r3, [pc, #116]	@ (8002864 <MX_USART1_UART_Init+0x94>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80027f4:	4b1b      	ldr	r3, [pc, #108]	@ (8002864 <MX_USART1_UART_Init+0x94>)
 80027f6:	220c      	movs	r2, #12
 80027f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027fa:	4b1a      	ldr	r3, [pc, #104]	@ (8002864 <MX_USART1_UART_Init+0x94>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8002800:	4b18      	ldr	r3, [pc, #96]	@ (8002864 <MX_USART1_UART_Init+0x94>)
 8002802:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002806:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002808:	4b16      	ldr	r3, [pc, #88]	@ (8002864 <MX_USART1_UART_Init+0x94>)
 800280a:	2200      	movs	r2, #0
 800280c:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800280e:	4b15      	ldr	r3, [pc, #84]	@ (8002864 <MX_USART1_UART_Init+0x94>)
 8002810:	2200      	movs	r2, #0
 8002812:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002814:	4b13      	ldr	r3, [pc, #76]	@ (8002864 <MX_USART1_UART_Init+0x94>)
 8002816:	2200      	movs	r2, #0
 8002818:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800281a:	4812      	ldr	r0, [pc, #72]	@ (8002864 <MX_USART1_UART_Init+0x94>)
 800281c:	f005 f948 	bl	8007ab0 <HAL_UART_Init>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d001      	beq.n	800282a <MX_USART1_UART_Init+0x5a>
  {
	Error_Handler();
 8002826:	f000 fa71 	bl	8002d0c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800282a:	2100      	movs	r1, #0
 800282c:	480d      	ldr	r0, [pc, #52]	@ (8002864 <MX_USART1_UART_Init+0x94>)
 800282e:	f006 fb2c 	bl	8008e8a <HAL_UARTEx_SetTxFifoThreshold>
 8002832:	4603      	mov	r3, r0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d001      	beq.n	800283c <MX_USART1_UART_Init+0x6c>
  {
	Error_Handler();
 8002838:	f000 fa68 	bl	8002d0c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800283c:	2100      	movs	r1, #0
 800283e:	4809      	ldr	r0, [pc, #36]	@ (8002864 <MX_USART1_UART_Init+0x94>)
 8002840:	f006 fb61 	bl	8008f06 <HAL_UARTEx_SetRxFifoThreshold>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d001      	beq.n	800284e <MX_USART1_UART_Init+0x7e>
  {
	Error_Handler();
 800284a:	f000 fa5f 	bl	8002d0c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800284e:	4805      	ldr	r0, [pc, #20]	@ (8002864 <MX_USART1_UART_Init+0x94>)
 8002850:	f006 fae2 	bl	8008e18 <HAL_UARTEx_DisableFifoMode>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d001      	beq.n	800285e <MX_USART1_UART_Init+0x8e>
  {
	Error_Handler();
 800285a:	f000 fa57 	bl	8002d0c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800285e:	bf00      	nop
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	200001dc 	.word	0x200001dc
 8002868:	40013800 	.word	0x40013800

0800286c <MX_I2C3_Init>:

// I2C3 initialization function
void MX_I2C3_Init(void)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	af00      	add	r7, sp, #0

	/* SPI1 clock enable */
	__HAL_RCC_I2C3_CLK_ENABLE();
 8002870:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8002874:	f7ff fe52 	bl	800251c <LL_APB1_GRP1_EnableClock>


	hi2c3.Instance = I2C3;
 8002878:	4b12      	ldr	r3, [pc, #72]	@ (80028c4 <MX_I2C3_Init+0x58>)
 800287a:	4a13      	ldr	r2, [pc, #76]	@ (80028c8 <MX_I2C3_Init+0x5c>)
 800287c:	601a      	str	r2, [r3, #0]
//hi2c3.Init.Timing = 0x00707CBB;
	  hi2c3.Init.Timing = 0x006039F7;
 800287e:	4b11      	ldr	r3, [pc, #68]	@ (80028c4 <MX_I2C3_Init+0x58>)
 8002880:	4a12      	ldr	r2, [pc, #72]	@ (80028cc <MX_I2C3_Init+0x60>)
 8002882:	605a      	str	r2, [r3, #4]
	  hi2c3.Init.OwnAddress1 = 0;
 8002884:	4b0f      	ldr	r3, [pc, #60]	@ (80028c4 <MX_I2C3_Init+0x58>)
 8002886:	2200      	movs	r2, #0
 8002888:	609a      	str	r2, [r3, #8]
	  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800288a:	4b0e      	ldr	r3, [pc, #56]	@ (80028c4 <MX_I2C3_Init+0x58>)
 800288c:	2201      	movs	r2, #1
 800288e:	60da      	str	r2, [r3, #12]
	  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002890:	4b0c      	ldr	r3, [pc, #48]	@ (80028c4 <MX_I2C3_Init+0x58>)
 8002892:	2200      	movs	r2, #0
 8002894:	611a      	str	r2, [r3, #16]
	  hi2c3.Init.OwnAddress2 = 0;
 8002896:	4b0b      	ldr	r3, [pc, #44]	@ (80028c4 <MX_I2C3_Init+0x58>)
 8002898:	2200      	movs	r2, #0
 800289a:	615a      	str	r2, [r3, #20]
	  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800289c:	4b09      	ldr	r3, [pc, #36]	@ (80028c4 <MX_I2C3_Init+0x58>)
 800289e:	2200      	movs	r2, #0
 80028a0:	619a      	str	r2, [r3, #24]
	  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80028a2:	4b08      	ldr	r3, [pc, #32]	@ (80028c4 <MX_I2C3_Init+0x58>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	61da      	str	r2, [r3, #28]
	  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80028a8:	4b06      	ldr	r3, [pc, #24]	@ (80028c4 <MX_I2C3_Init+0x58>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	621a      	str	r2, [r3, #32]

    if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80028ae:	4805      	ldr	r0, [pc, #20]	@ (80028c4 <MX_I2C3_Init+0x58>)
 80028b0:	f001 fb88 	bl	8003fc4 <HAL_I2C_Init>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d001      	beq.n	80028be <MX_I2C3_Init+0x52>
    {
        // Initialization error
        Error_Handler();
 80028ba:	f000 fa27 	bl	8002d0c <Error_Handler>
    }
}
 80028be:	bf00      	nop
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	20000334 	.word	0x20000334
 80028c8:	40005c00 	.word	0x40005c00
 80028cc:	006039f7 	.word	0x006039f7

080028d0 <my_MX_SPI1_Init>:



// SPI1 initialization function
void my_MX_SPI1_Init(void)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	af00      	add	r7, sp, #0

	/* SPI1 clock enable */
	__HAL_RCC_SPI1_CLK_ENABLE();
 80028d4:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80028d8:	f7ff fe39 	bl	800254e <LL_APB2_GRP1_EnableClock>


	  hspi1.Instance = SPI1;
 80028dc:	4b1b      	ldr	r3, [pc, #108]	@ (800294c <my_MX_SPI1_Init+0x7c>)
 80028de:	4a1c      	ldr	r2, [pc, #112]	@ (8002950 <my_MX_SPI1_Init+0x80>)
 80028e0:	601a      	str	r2, [r3, #0]
	  hspi1.Init.Mode = SPI_MODE_MASTER;
 80028e2:	4b1a      	ldr	r3, [pc, #104]	@ (800294c <my_MX_SPI1_Init+0x7c>)
 80028e4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80028e8:	605a      	str	r2, [r3, #4]
	  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80028ea:	4b18      	ldr	r3, [pc, #96]	@ (800294c <my_MX_SPI1_Init+0x7c>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	609a      	str	r2, [r3, #8]
	  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80028f0:	4b16      	ldr	r3, [pc, #88]	@ (800294c <my_MX_SPI1_Init+0x7c>)
 80028f2:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80028f6:	60da      	str	r2, [r3, #12]
	  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80028f8:	4b14      	ldr	r3, [pc, #80]	@ (800294c <my_MX_SPI1_Init+0x7c>)
 80028fa:	2200      	movs	r2, #0
 80028fc:	611a      	str	r2, [r3, #16]
	  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80028fe:	4b13      	ldr	r3, [pc, #76]	@ (800294c <my_MX_SPI1_Init+0x7c>)
 8002900:	2201      	movs	r2, #1
 8002902:	615a      	str	r2, [r3, #20]
	  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002904:	4b11      	ldr	r3, [pc, #68]	@ (800294c <my_MX_SPI1_Init+0x7c>)
 8002906:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800290a:	619a      	str	r2, [r3, #24]
	  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800290c:	4b0f      	ldr	r3, [pc, #60]	@ (800294c <my_MX_SPI1_Init+0x7c>)
 800290e:	2218      	movs	r2, #24
 8002910:	61da      	str	r2, [r3, #28]
	  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002912:	4b0e      	ldr	r3, [pc, #56]	@ (800294c <my_MX_SPI1_Init+0x7c>)
 8002914:	2200      	movs	r2, #0
 8002916:	621a      	str	r2, [r3, #32]
	  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002918:	4b0c      	ldr	r3, [pc, #48]	@ (800294c <my_MX_SPI1_Init+0x7c>)
 800291a:	2200      	movs	r2, #0
 800291c:	625a      	str	r2, [r3, #36]	@ 0x24
	  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800291e:	4b0b      	ldr	r3, [pc, #44]	@ (800294c <my_MX_SPI1_Init+0x7c>)
 8002920:	2200      	movs	r2, #0
 8002922:	629a      	str	r2, [r3, #40]	@ 0x28
	  hspi1.Init.CRCPolynomial = 7;
 8002924:	4b09      	ldr	r3, [pc, #36]	@ (800294c <my_MX_SPI1_Init+0x7c>)
 8002926:	2207      	movs	r2, #7
 8002928:	62da      	str	r2, [r3, #44]	@ 0x2c
	  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800292a:	4b08      	ldr	r3, [pc, #32]	@ (800294c <my_MX_SPI1_Init+0x7c>)
 800292c:	2200      	movs	r2, #0
 800292e:	631a      	str	r2, [r3, #48]	@ 0x30
	  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002930:	4b06      	ldr	r3, [pc, #24]	@ (800294c <my_MX_SPI1_Init+0x7c>)
 8002932:	2200      	movs	r2, #0
 8002934:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002936:	4805      	ldr	r0, [pc, #20]	@ (800294c <my_MX_SPI1_Init+0x7c>)
 8002938:	f003 fef4 	bl	8006724 <HAL_SPI_Init>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d001      	beq.n	8002946 <my_MX_SPI1_Init+0x76>
    {
        // Initialization error
        Error_Handler();
 8002942:	f000 f9e3 	bl	8002d0c <Error_Handler>
    }
}
 8002946:	bf00      	nop
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	200002d0 	.word	0x200002d0
 8002950:	40013000 	.word	0x40013000

08002954 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002958:	2004      	movs	r0, #4
 800295a:	f7ff fdad 	bl	80024b8 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA2_CLK_ENABLE();
 800295e:	2002      	movs	r0, #2
 8002960:	f7ff fdaa 	bl	80024b8 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 15, 0);
 8002964:	2200      	movs	r2, #0
 8002966:	210f      	movs	r1, #15
 8002968:	203a      	movs	r0, #58	@ 0x3a
 800296a:	f000 fdd6 	bl	800351a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 800296e:	203a      	movs	r0, #58	@ 0x3a
 8002970:	f000 fded 	bl	800354e <HAL_NVIC_EnableIRQ>

}
 8002974:	bf00      	nop
 8002976:	bd80      	pop	{r7, pc}

08002978 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b086      	sub	sp, #24
 800297c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800297e:	1d3b      	adds	r3, r7, #4
 8002980:	2200      	movs	r2, #0
 8002982:	601a      	str	r2, [r3, #0]
 8002984:	605a      	str	r2, [r3, #4]
 8002986:	609a      	str	r2, [r3, #8]
 8002988:	60da      	str	r2, [r3, #12]
 800298a:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800298c:	2001      	movs	r0, #1
 800298e:	f7ff fdac 	bl	80024ea <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002992:	2004      	movs	r0, #4
 8002994:	f7ff fda9 	bl	80024ea <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002998:	2002      	movs	r0, #2
 800299a:	f7ff fda6 	bl	80024ea <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800299e:	2008      	movs	r0, #8
 80029a0:	f7ff fda3 	bl	80024ea <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80029a4:	2010      	movs	r0, #16
 80029a6:	f7ff fda0 	bl	80024ea <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80029aa:	2080      	movs	r0, #128	@ 0x80
 80029ac:	f7ff fd9d 	bl	80024ea <LL_AHB2_GRP1_EnableClock>


	/* Configure PC12 and PC13 as external interrupt inputs */
	/* Configure GPIO pins : PC12 and PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13;
 80029b0:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80029b4:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;  // Interrupt on falling edge
 80029b6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80029ba:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;           // No pull-up or pull-down resistors
 80029bc:	2300      	movs	r3, #0
 80029be:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029c0:	1d3b      	adds	r3, r7, #4
 80029c2:	4619      	mov	r1, r3
 80029c4:	4862      	ldr	r0, [pc, #392]	@ (8002b50 <MX_GPIO_Init+0x1d8>)
 80029c6:	f001 f939 	bl	8003c3c <HAL_GPIO_Init>

	/* Enable and set EXTI line interrupt priority */
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);   // Priority level 2
 80029ca:	2200      	movs	r2, #0
 80029cc:	2102      	movs	r1, #2
 80029ce:	2028      	movs	r0, #40	@ 0x28
 80029d0:	f000 fda3 	bl	800351a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);          // Enable the interrupt
 80029d4:	2028      	movs	r0, #40	@ 0x28
 80029d6:	f000 fdba 	bl	800354e <HAL_NVIC_EnableIRQ>

	GPIO_InitStruct.Pin = LED_A_Pin;
 80029da:	2301      	movs	r3, #1
 80029dc:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029de:	2301      	movs	r3, #1
 80029e0:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e2:	2300      	movs	r3, #0
 80029e4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029e6:	2300      	movs	r3, #0
 80029e8:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(LED_A_GPIO_Port, &GPIO_InitStruct);
 80029ea:	1d3b      	adds	r3, r7, #4
 80029ec:	4619      	mov	r1, r3
 80029ee:	4859      	ldr	r0, [pc, #356]	@ (8002b54 <MX_GPIO_Init+0x1dc>)
 80029f0:	f001 f924 	bl	8003c3c <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = LED_B_Pin;
 80029f4:	2302      	movs	r3, #2
 80029f6:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029f8:	2301      	movs	r3, #1
 80029fa:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029fc:	2300      	movs	r3, #0
 80029fe:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a00:	2300      	movs	r3, #0
 8002a02:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(LED_B_GPIO_Port, &GPIO_InitStruct);
 8002a04:	1d3b      	adds	r3, r7, #4
 8002a06:	4619      	mov	r1, r3
 8002a08:	4852      	ldr	r0, [pc, #328]	@ (8002b54 <MX_GPIO_Init+0x1dc>)
 8002a0a:	f001 f917 	bl	8003c3c <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = ADS1118_CS_Pin;
 8002a0e:	2340      	movs	r3, #64	@ 0x40
 8002a10:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a12:	2301      	movs	r3, #1
 8002a14:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a16:	2301      	movs	r3, #1
 8002a18:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a1a:	2302      	movs	r3, #2
 8002a1c:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(ADS1118_CS_GPIO_Port, &GPIO_InitStruct);
 8002a1e:	1d3b      	adds	r3, r7, #4
 8002a20:	4619      	mov	r1, r3
 8002a22:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002a26:	f001 f909 	bl	8003c3c <HAL_GPIO_Init>

	// Configure GPIO pin for DRDY (interrupt from ADS1299)
	GPIO_InitStruct.Pin = ADS1299_nDRDY_Pin;
 8002a2a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002a2e:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;  // Interrupt on falling edge
 8002a30:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002a34:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a36:	2300      	movs	r3, #0
 8002a38:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(ADS1299_nDRDY_GPIO_Port, &GPIO_InitStruct);
 8002a3a:	1d3b      	adds	r3, r7, #4
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	4844      	ldr	r0, [pc, #272]	@ (8002b50 <MX_GPIO_Init+0x1d8>)
 8002a40:	f001 f8fc 	bl	8003c3c <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = ADS1299_CS_Pin;
 8002a44:	2310      	movs	r3, #16
 8002a46:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a50:	2302      	movs	r3, #2
 8002a52:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(ADS1299_CS_GPIO_Port, &GPIO_InitStruct);
 8002a54:	1d3b      	adds	r3, r7, #4
 8002a56:	4619      	mov	r1, r3
 8002a58:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002a5c:	f001 f8ee 	bl	8003c3c <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = ADS1299_nRESET_Pin|ADS1299_nPWDN_Pin;
 8002a60:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8002a64:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a66:	2301      	movs	r3, #1
 8002a68:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(ADS1299_nRESET_GPIO_Port, &GPIO_InitStruct);
 8002a72:	1d3b      	adds	r3, r7, #4
 8002a74:	4619      	mov	r1, r3
 8002a76:	4836      	ldr	r0, [pc, #216]	@ (8002b50 <MX_GPIO_Init+0x1d8>)
 8002a78:	f001 f8e0 	bl	8003c3c <HAL_GPIO_Init>

	/*Configure GPIO pins : PCPin PCPin PCPin */
	GPIO_InitStruct.Pin = ADS1299_START_Pin;
 8002a7c:	2340      	movs	r3, #64	@ 0x40
 8002a7e:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a80:	2301      	movs	r3, #1
 8002a82:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002a84:	2302      	movs	r3, #2
 8002a86:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(ADS1299_START_GPIO_Port, &GPIO_InitStruct);
 8002a8c:	1d3b      	adds	r3, r7, #4
 8002a8e:	4619      	mov	r1, r3
 8002a90:	482f      	ldr	r0, [pc, #188]	@ (8002b50 <MX_GPIO_Init+0x1d8>)
 8002a92:	f001 f8d3 	bl	8003c3c <HAL_GPIO_Init>

	/**SPI1 GPIO Configuration */
	GPIO_InitStruct.Pin = SPI1_SCLK_Pin|SPI1_MOSI_Pin;
 8002a96:	2382      	movs	r3, #130	@ 0x82
 8002a98:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a9a:	2302      	movs	r3, #2
 8002a9c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002aa2:	2302      	movs	r3, #2
 8002aa4:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002aa6:	2305      	movs	r3, #5
 8002aa8:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(SPI1_SCLK_GPIO_Port, &GPIO_InitStruct);
 8002aaa:	1d3b      	adds	r3, r7, #4
 8002aac:	4619      	mov	r1, r3
 8002aae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002ab2:	f001 f8c3 	bl	8003c3c <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = SPI1_MISO_Pin;
 8002ab6:	2310      	movs	r3, #16
 8002ab8:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aba:	2302      	movs	r3, #2
 8002abc:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ac2:	2302      	movs	r3, #2
 8002ac4:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002ac6:	2305      	movs	r3, #5
 8002ac8:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(SPI1_MISO_GPIO_Port, &GPIO_InitStruct);
 8002aca:	1d3b      	adds	r3, r7, #4
 8002acc:	4619      	mov	r1, r3
 8002ace:	4821      	ldr	r0, [pc, #132]	@ (8002b54 <MX_GPIO_Init+0x1dc>)
 8002ad0:	f001 f8b4 	bl	8003c3c <HAL_GPIO_Init>

	/* Configure I2C3 SDA (PB11) and SCL (PB13) */
	GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_13;
 8002ad4:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8002ad8:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ada:	2312      	movs	r3, #18
 8002adc:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002ae6:	2304      	movs	r3, #4
 8002ae8:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002aea:	1d3b      	adds	r3, r7, #4
 8002aec:	4619      	mov	r1, r3
 8002aee:	4819      	ldr	r0, [pc, #100]	@ (8002b54 <MX_GPIO_Init+0x1dc>)
 8002af0:	f001 f8a4 	bl	8003c3c <HAL_GPIO_Init>

	HAL_GPIO_WritePin(ADS1299_CS_GPIO_Port, ADS1299_CS_Pin, GPIO_PIN_SET);
 8002af4:	2201      	movs	r2, #1
 8002af6:	2110      	movs	r1, #16
 8002af8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002afc:	f001 fa0e 	bl	8003f1c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ADS1118_CS_GPIO_Port, ADS1118_CS_Pin, GPIO_PIN_SET);
 8002b00:	2201      	movs	r2, #1
 8002b02:	2140      	movs	r1, #64	@ 0x40
 8002b04:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002b08:	f001 fa08 	bl	8003f1c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ADS1299_nRESET_GPIO_Port, ADS1299_nRESET_Pin|ADS1299_nPWDN_Pin, GPIO_PIN_RESET);
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 8002b12:	480f      	ldr	r0, [pc, #60]	@ (8002b50 <MX_GPIO_Init+0x1d8>)
 8002b14:	f001 fa02 	bl	8003f1c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ADS1299_START_GPIO_Port, ADS1299_START_Pin, GPIO_PIN_SET);
 8002b18:	2201      	movs	r2, #1
 8002b1a:	2140      	movs	r1, #64	@ 0x40
 8002b1c:	480c      	ldr	r0, [pc, #48]	@ (8002b50 <MX_GPIO_Init+0x1d8>)
 8002b1e:	f001 f9fd 	bl	8003f1c <HAL_GPIO_WritePin>

	/* Enable and set EXTI line interrupt priority */
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 2, 0);   // Priority level 2
 8002b22:	2200      	movs	r2, #0
 8002b24:	2102      	movs	r1, #2
 8002b26:	2017      	movs	r0, #23
 8002b28:	f000 fcf7 	bl	800351a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);          // Enable the interrupt
 8002b2c:	2017      	movs	r0, #23
 8002b2e:	f000 fd0e 	bl	800354e <HAL_NVIC_EnableIRQ>

	HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_RESET);
 8002b32:	2200      	movs	r2, #0
 8002b34:	2101      	movs	r1, #1
 8002b36:	4807      	ldr	r0, [pc, #28]	@ (8002b54 <MX_GPIO_Init+0x1dc>)
 8002b38:	f001 f9f0 	bl	8003f1c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_RESET);
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	2102      	movs	r1, #2
 8002b40:	4804      	ldr	r0, [pc, #16]	@ (8002b54 <MX_GPIO_Init+0x1dc>)
 8002b42:	f001 f9eb 	bl	8003f1c <HAL_GPIO_WritePin>
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
#endif

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002b46:	bf00      	nop
 8002b48:	3718      	adds	r7, #24
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	48000800 	.word	0x48000800
 8002b54:	48000400 	.word	0x48000400

08002b58 <PeriphClock_Config>:



/* USER CODE BEGIN 4 */
void PeriphClock_Config(void)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	af00      	add	r7, sp, #0

	/* Start automatic synchronization */
	HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
#endif

	return;
 8002b5c:	bf00      	nop
}
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr
	...

08002b68 <MX_TIM2_Init>:




static void MX_TIM2_Init(void)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	af00      	add	r7, sp, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002b6c:	2001      	movs	r0, #1
 8002b6e:	f7ff fcd5 	bl	800251c <LL_APB1_GRP1_EnableClock>

    htim2.Instance = TIM2;
 8002b72:	4b1a      	ldr	r3, [pc, #104]	@ (8002bdc <MX_TIM2_Init+0x74>)
 8002b74:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002b78:	601a      	str	r2, [r3, #0]
    htim2.Init.Prescaler = (uint32_t)(HAL_RCC_GetPCLK1Freq() / 2000) - 1;
 8002b7a:	f002 ff99 	bl	8005ab0 <HAL_RCC_GetPCLK1Freq>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	4a17      	ldr	r2, [pc, #92]	@ (8002be0 <MX_TIM2_Init+0x78>)
 8002b82:	fba2 2303 	umull	r2, r3, r2, r3
 8002b86:	09db      	lsrs	r3, r3, #7
 8002b88:	3b01      	subs	r3, #1
 8002b8a:	4a14      	ldr	r2, [pc, #80]	@ (8002bdc <MX_TIM2_Init+0x74>)
 8002b8c:	6053      	str	r3, [r2, #4]
    htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b8e:	4b13      	ldr	r3, [pc, #76]	@ (8002bdc <MX_TIM2_Init+0x74>)
 8002b90:	2200      	movs	r2, #0
 8002b92:	609a      	str	r2, [r3, #8]
    htim2.Init.Period = 500;
 8002b94:	4b11      	ldr	r3, [pc, #68]	@ (8002bdc <MX_TIM2_Init+0x74>)
 8002b96:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8002b9a:	60da      	str	r2, [r3, #12]
    htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b9c:	4b0f      	ldr	r3, [pc, #60]	@ (8002bdc <MX_TIM2_Init+0x74>)
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	611a      	str	r2, [r3, #16]
    htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ba2:	4b0e      	ldr	r3, [pc, #56]	@ (8002bdc <MX_TIM2_Init+0x74>)
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	619a      	str	r2, [r3, #24]

    if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002ba8:	480c      	ldr	r0, [pc, #48]	@ (8002bdc <MX_TIM2_Init+0x74>)
 8002baa:	f004 fcf3 	bl	8007594 <HAL_TIM_Base_Init>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d001      	beq.n	8002bb8 <MX_TIM2_Init+0x50>
    {
        Error_Handler(); // Handle initialization error
 8002bb4:	f000 f8aa 	bl	8002d0c <Error_Handler>
    }

    HAL_NVIC_SetPriority(TIM2_IRQn, 15, 0);
 8002bb8:	2200      	movs	r2, #0
 8002bba:	210f      	movs	r1, #15
 8002bbc:	201c      	movs	r0, #28
 8002bbe:	f000 fcac 	bl	800351a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002bc2:	201c      	movs	r0, #28
 8002bc4:	f000 fcc3 	bl	800354e <HAL_NVIC_EnableIRQ>

        // Start the timer interrupt
    if (HAL_TIM_Base_Start_IT(&htim2) != HAL_OK)
 8002bc8:	4804      	ldr	r0, [pc, #16]	@ (8002bdc <MX_TIM2_Init+0x74>)
 8002bca:	f004 fd45 	bl	8007658 <HAL_TIM_Base_Start_IT>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d001      	beq.n	8002bd8 <MX_TIM2_Init+0x70>
    {
        Error_Handler(); // Handle start error
 8002bd4:	f000 f89a 	bl	8002d0c <Error_Handler>
    }
}
 8002bd8:	bf00      	nop
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	20000388 	.word	0x20000388
 8002be0:	10624dd3 	.word	0x10624dd3

08002be4 <MX_TIM17_Init>:



void MX_TIM17_Init(void)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	af00      	add	r7, sp, #0
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002be8:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8002bec:	f7ff fcaf 	bl	800254e <LL_APB2_GRP1_EnableClock>

    htim17.Instance = TIM17;
 8002bf0:	4b1a      	ldr	r3, [pc, #104]	@ (8002c5c <MX_TIM17_Init+0x78>)
 8002bf2:	4a1b      	ldr	r2, [pc, #108]	@ (8002c60 <MX_TIM17_Init+0x7c>)
 8002bf4:	601a      	str	r2, [r3, #0]
    htim17.Init.Prescaler = (uint32_t)(HAL_RCC_GetPCLK2Freq() / 1000) - 1;  // TIM17 is on APB2
 8002bf6:	f002 ff71 	bl	8005adc <HAL_RCC_GetPCLK2Freq>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	4a19      	ldr	r2, [pc, #100]	@ (8002c64 <MX_TIM17_Init+0x80>)
 8002bfe:	fba2 2303 	umull	r2, r3, r2, r3
 8002c02:	099b      	lsrs	r3, r3, #6
 8002c04:	3b01      	subs	r3, #1
 8002c06:	4a15      	ldr	r2, [pc, #84]	@ (8002c5c <MX_TIM17_Init+0x78>)
 8002c08:	6053      	str	r3, [r2, #4]
    htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c0a:	4b14      	ldr	r3, [pc, #80]	@ (8002c5c <MX_TIM17_Init+0x78>)
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	609a      	str	r2, [r3, #8]
    htim17.Init.Period = 100 - 1;
 8002c10:	4b12      	ldr	r3, [pc, #72]	@ (8002c5c <MX_TIM17_Init+0x78>)
 8002c12:	2263      	movs	r2, #99	@ 0x63
 8002c14:	60da      	str	r2, [r3, #12]
    htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c16:	4b11      	ldr	r3, [pc, #68]	@ (8002c5c <MX_TIM17_Init+0x78>)
 8002c18:	2200      	movs	r2, #0
 8002c1a:	611a      	str	r2, [r3, #16]
    htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c1c:	4b0f      	ldr	r3, [pc, #60]	@ (8002c5c <MX_TIM17_Init+0x78>)
 8002c1e:	2200      	movs	r2, #0
 8002c20:	619a      	str	r2, [r3, #24]
    htim17.Init.RepetitionCounter = 0;
 8002c22:	4b0e      	ldr	r3, [pc, #56]	@ (8002c5c <MX_TIM17_Init+0x78>)
 8002c24:	2200      	movs	r2, #0
 8002c26:	615a      	str	r2, [r3, #20]

    if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8002c28:	480c      	ldr	r0, [pc, #48]	@ (8002c5c <MX_TIM17_Init+0x78>)
 8002c2a:	f004 fcb3 	bl	8007594 <HAL_TIM_Base_Init>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d001      	beq.n	8002c38 <MX_TIM17_Init+0x54>
    {
        Error_Handler();
 8002c34:	f000 f86a 	bl	8002d0c <Error_Handler>
    }

    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 14, 0);  // Different interrupt for TIM17
 8002c38:	2200      	movs	r2, #0
 8002c3a:	210e      	movs	r1, #14
 8002c3c:	201a      	movs	r0, #26
 8002c3e:	f000 fc6c 	bl	800351a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8002c42:	201a      	movs	r0, #26
 8002c44:	f000 fc83 	bl	800354e <HAL_NVIC_EnableIRQ>

    if (HAL_TIM_Base_Start_IT(&htim17) != HAL_OK)
 8002c48:	4804      	ldr	r0, [pc, #16]	@ (8002c5c <MX_TIM17_Init+0x78>)
 8002c4a:	f004 fd05 	bl	8007658 <HAL_TIM_Base_Start_IT>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d001      	beq.n	8002c58 <MX_TIM17_Init+0x74>
    {
        Error_Handler();
 8002c54:	f000 f85a 	bl	8002d0c <Error_Handler>
    }
}
 8002c58:	bf00      	nop
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	200003d4 	.word	0x200003d4
 8002c60:	40014800 	.word	0x40014800
 8002c64:	10624dd3 	.word	0x10624dd3

08002c68 <HAL_TIM_PeriodElapsedCallback>:



// Timer interrupt handler
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b082      	sub	sp, #8
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c78:	d12e      	bne.n	8002cd8 <HAL_TIM_PeriodElapsedCallback+0x70>
    {
        led_counter += 1; // Each interrupt = 1ms (from timer settings)
 8002c7a:	4b20      	ldr	r3, [pc, #128]	@ (8002cfc <HAL_TIM_PeriodElapsedCallback+0x94>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	3301      	adds	r3, #1
 8002c80:	4a1e      	ldr	r2, [pc, #120]	@ (8002cfc <HAL_TIM_PeriodElapsedCallback+0x94>)
 8002c82:	6013      	str	r3, [r2, #0]

        if (is_connected())
 8002c84:	f00a fc26 	bl	800d4d4 <is_connected>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d00b      	beq.n	8002ca6 <HAL_TIM_PeriodElapsedCallback+0x3e>
        {
            // Force LED ON and reset state/counter
            HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_SET);
 8002c8e:	2201      	movs	r2, #1
 8002c90:	2102      	movs	r1, #2
 8002c92:	481b      	ldr	r0, [pc, #108]	@ (8002d00 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8002c94:	f001 f942 	bl	8003f1c <HAL_GPIO_WritePin>
            led_state = GPIO_PIN_SET;
 8002c98:	4b1a      	ldr	r3, [pc, #104]	@ (8002d04 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	701a      	strb	r2, [r3, #0]
            led_counter = 0;
 8002c9e:	4b17      	ldr	r3, [pc, #92]	@ (8002cfc <HAL_TIM_PeriodElapsedCallback+0x94>)
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	601a      	str	r2, [r3, #0]
    	if(is_connected()){
    		UTIL_SEQ_SetTask( 1<<CFG_TASK_IMU_SAMPLE_ID, CFG_SCH_PRIO_0);
    	}

    }
}
 8002ca4:	e026      	b.n	8002cf4 <HAL_TIM_PeriodElapsedCallback+0x8c>
            if (led_counter >= 1) // 2 seconds
 8002ca6:	4b15      	ldr	r3, [pc, #84]	@ (8002cfc <HAL_TIM_PeriodElapsedCallback+0x94>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d022      	beq.n	8002cf4 <HAL_TIM_PeriodElapsedCallback+0x8c>
                led_counter = 0;
 8002cae:	4b13      	ldr	r3, [pc, #76]	@ (8002cfc <HAL_TIM_PeriodElapsedCallback+0x94>)
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	601a      	str	r2, [r3, #0]
                led_state = (led_state == GPIO_PIN_SET) ? GPIO_PIN_RESET : GPIO_PIN_SET;
 8002cb4:	4b13      	ldr	r3, [pc, #76]	@ (8002d04 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	bf14      	ite	ne
 8002cbc:	2301      	movne	r3, #1
 8002cbe:	2300      	moveq	r3, #0
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	461a      	mov	r2, r3
 8002cc4:	4b0f      	ldr	r3, [pc, #60]	@ (8002d04 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8002cc6:	701a      	strb	r2, [r3, #0]
                HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, led_state);
 8002cc8:	4b0e      	ldr	r3, [pc, #56]	@ (8002d04 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8002cca:	781b      	ldrb	r3, [r3, #0]
 8002ccc:	461a      	mov	r2, r3
 8002cce:	2102      	movs	r1, #2
 8002cd0:	480b      	ldr	r0, [pc, #44]	@ (8002d00 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8002cd2:	f001 f923 	bl	8003f1c <HAL_GPIO_WritePin>
}
 8002cd6:	e00d      	b.n	8002cf4 <HAL_TIM_PeriodElapsedCallback+0x8c>
    else if (htim->Instance == TIM17){
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a0a      	ldr	r2, [pc, #40]	@ (8002d08 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d108      	bne.n	8002cf4 <HAL_TIM_PeriodElapsedCallback+0x8c>
    	if(is_connected()){
 8002ce2:	f00a fbf7 	bl	800d4d4 <is_connected>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d003      	beq.n	8002cf4 <HAL_TIM_PeriodElapsedCallback+0x8c>
    		UTIL_SEQ_SetTask( 1<<CFG_TASK_IMU_SAMPLE_ID, CFG_SCH_PRIO_0);
 8002cec:	2100      	movs	r1, #0
 8002cee:	2010      	movs	r0, #16
 8002cf0:	f00a ffa8 	bl	800dc44 <UTIL_SEQ_SetTask>
}
 8002cf4:	bf00      	nop
 8002cf6:	3708      	adds	r7, #8
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	20000420 	.word	0x20000420
 8002d00:	48000400 	.word	0x48000400
 8002d04:	20000424 	.word	0x20000424
 8002d08:	40014800 	.word	0x40014800

08002d0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002d10:	b672      	cpsid	i
}
 8002d12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002d14:	bf00      	nop
 8002d16:	e7fd      	b.n	8002d14 <Error_Handler+0x8>

08002d18 <LL_RCC_SetRTCClockSource>:
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_LSI
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_HSE_DIV32
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetRTCClockSource(uint32_t Source)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b083      	sub	sp, #12
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002d20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d28:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002d2c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8002d38:	bf00      	nop
 8002d3a:	370c      	adds	r7, #12
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr

08002d44 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8002d44:	b480      	push	{r7}
 8002d46:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8002d48:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d50:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002d54:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002d58:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002d5c:	bf00      	nop
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr

08002d66 <LL_AHB2_GRP1_EnableClock>:
{
 8002d66:	b480      	push	{r7}
 8002d68:	b085      	sub	sp, #20
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002d6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d72:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002d74:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002d7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d82:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	4013      	ands	r3, r2
 8002d88:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
}
 8002d8c:	bf00      	nop
 8002d8e:	3714      	adds	r7, #20
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr

08002d98 <LL_AHB3_GRP1_EnableClock>:
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b085      	sub	sp, #20
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8002da0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002da4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002da6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4313      	orrs	r3, r2
 8002dae:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8002db0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002db4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4013      	ands	r3, r2
 8002dba:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
}
 8002dbe:	bf00      	nop
 8002dc0:	3714      	adds	r7, #20
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr

08002dca <LL_APB1_GRP1_EnableClock>:
{
 8002dca:	b480      	push	{r7}
 8002dcc:	b085      	sub	sp, #20
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002dd2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002dd6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002dd8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002de2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002de6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	4013      	ands	r3, r2
 8002dec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002dee:	68fb      	ldr	r3, [r7, #12]
}
 8002df0:	bf00      	nop
 8002df2:	3714      	adds	r7, #20
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr

08002dfc <LL_APB2_GRP1_EnableClock>:
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b085      	sub	sp, #20
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002e04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e08:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002e0a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	4313      	orrs	r3, r2
 8002e12:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002e14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e18:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002e20:	68fb      	ldr	r3, [r7, #12]
}
 8002e22:	bf00      	nop
 8002e24:	3714      	adds	r7, #20
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr

08002e2e <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e2e:	b580      	push	{r7, lr}
 8002e30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8002e32:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002e36:	f7ff ffaf 	bl	8002d98 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	2100      	movs	r1, #0
 8002e3e:	202e      	movs	r0, #46	@ 0x2e
 8002e40:	f000 fb6b 	bl	800351a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8002e44:	202e      	movs	r0, #46	@ 0x2e
 8002e46:	f000 fb82 	bl	800354e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e4a:	bf00      	nop
 8002e4c:	bd80      	pop	{r7, pc}
	...

08002e50 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b082      	sub	sp, #8
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a05      	ldr	r2, [pc, #20]	@ (8002e74 <HAL_IPCC_MspInit+0x24>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d103      	bne.n	8002e6a <HAL_IPCC_MspInit+0x1a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8002e62:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8002e66:	f7ff ff97 	bl	8002d98 <LL_AHB3_GRP1_EnableClock>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 8002e6a:	bf00      	nop
 8002e6c:	3708      	adds	r7, #8
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	58000c00 	.word	0x58000c00

08002e78 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b096      	sub	sp, #88	@ 0x58
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002e80:	f107 0308 	add.w	r3, r7, #8
 8002e84:	2250      	movs	r2, #80	@ 0x50
 8002e86:	2100      	movs	r1, #0
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f00b fa09 	bl	800e2a0 <memset>
  if(hrtc->Instance==RTC)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a14      	ldr	r2, [pc, #80]	@ (8002ee4 <HAL_RTC_MspInit+0x6c>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d120      	bne.n	8002eda <HAL_RTC_MspInit+0x62>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */
  HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8002e98:	f001 fd42 	bl	8004920 <HAL_PWR_EnableBkUpAccess>

  /**
  *  Write twice the value to flush the APB-AHB bridge
  *  This bit shall be written in the register before writing the next one
  */
  HAL_PWR_EnableBkUpAccess();
 8002e9c:	f001 fd40 	bl	8004920 <HAL_PWR_EnableBkUpAccess>

  __HAL_RCC_RTC_CONFIG(RCC_RTCCLKSOURCE_LSE); /**< Select LSI as RTC Input */
 8002ea0:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8002ea4:	f7ff ff38 	bl	8002d18 <LL_RCC_SetRTCClockSource>
  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002ea8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002eac:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002eae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002eb2:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002eb4:	f107 0308 	add.w	r3, r7, #8
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f003 f876 	bl	8005faa <HAL_RCCEx_PeriphCLKConfig>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d001      	beq.n	8002ec8 <HAL_RTC_MspInit+0x50>
    {
      Error_Handler();
 8002ec4:	f7ff ff22 	bl	8002d0c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002ec8:	f7ff ff3c 	bl	8002d44 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002ecc:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8002ed0:	f7ff ff7b 	bl	8002dca <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */
  HAL_RTCEx_EnableBypassShadow(hrtc);
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	f003 fbef 	bl	80066b8 <HAL_RTCEx_EnableBypassShadow>
  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002eda:	bf00      	nop
 8002edc:	3758      	adds	r7, #88	@ 0x58
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	40002800 	.word	0x40002800

08002ee8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b09c      	sub	sp, #112	@ 0x70
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ef0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	601a      	str	r2, [r3, #0]
 8002ef8:	605a      	str	r2, [r3, #4]
 8002efa:	609a      	str	r2, [r3, #8]
 8002efc:	60da      	str	r2, [r3, #12]
 8002efe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002f00:	f107 030c 	add.w	r3, r7, #12
 8002f04:	2250      	movs	r2, #80	@ 0x50
 8002f06:	2100      	movs	r1, #0
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f00b f9c9 	bl	800e2a0 <memset>
  if(huart->Instance==USART1)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a2e      	ldr	r2, [pc, #184]	@ (8002fcc <HAL_UART_MspInit+0xe4>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d155      	bne.n	8002fc4 <HAL_UART_MspInit+0xdc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f20:	f107 030c 	add.w	r3, r7, #12
 8002f24:	4618      	mov	r0, r3
 8002f26:	f003 f840 	bl	8005faa <HAL_RCCEx_PeriphCLKConfig>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d001      	beq.n	8002f34 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002f30:	f7ff feec 	bl	8002d0c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002f34:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002f38:	f7ff ff60 	bl	8002dfc <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f3c:	2002      	movs	r0, #2
 8002f3e:	f7ff ff12 	bl	8002d66 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin|VCP_TX_Pin;
 8002f42:	23c0      	movs	r3, #192	@ 0xc0
 8002f44:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f46:	2302      	movs	r3, #2
 8002f48:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f4e:	2303      	movs	r3, #3
 8002f50:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002f52:	2307      	movs	r3, #7
 8002f54:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f56:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002f5a:	4619      	mov	r1, r3
 8002f5c:	481c      	ldr	r0, [pc, #112]	@ (8002fd0 <HAL_UART_MspInit+0xe8>)
 8002f5e:	f000 fe6d 	bl	8003c3c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Channel4;
 8002f62:	4b1c      	ldr	r3, [pc, #112]	@ (8002fd4 <HAL_UART_MspInit+0xec>)
 8002f64:	4a1c      	ldr	r2, [pc, #112]	@ (8002fd8 <HAL_UART_MspInit+0xf0>)
 8002f66:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8002f68:	4b1a      	ldr	r3, [pc, #104]	@ (8002fd4 <HAL_UART_MspInit+0xec>)
 8002f6a:	220f      	movs	r2, #15
 8002f6c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002f6e:	4b19      	ldr	r3, [pc, #100]	@ (8002fd4 <HAL_UART_MspInit+0xec>)
 8002f70:	2210      	movs	r2, #16
 8002f72:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f74:	4b17      	ldr	r3, [pc, #92]	@ (8002fd4 <HAL_UART_MspInit+0xec>)
 8002f76:	2200      	movs	r2, #0
 8002f78:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002f7a:	4b16      	ldr	r3, [pc, #88]	@ (8002fd4 <HAL_UART_MspInit+0xec>)
 8002f7c:	2280      	movs	r2, #128	@ 0x80
 8002f7e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f80:	4b14      	ldr	r3, [pc, #80]	@ (8002fd4 <HAL_UART_MspInit+0xec>)
 8002f82:	2200      	movs	r2, #0
 8002f84:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f86:	4b13      	ldr	r3, [pc, #76]	@ (8002fd4 <HAL_UART_MspInit+0xec>)
 8002f88:	2200      	movs	r2, #0
 8002f8a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002f8c:	4b11      	ldr	r3, [pc, #68]	@ (8002fd4 <HAL_UART_MspInit+0xec>)
 8002f8e:	2200      	movs	r2, #0
 8002f90:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002f92:	4b10      	ldr	r3, [pc, #64]	@ (8002fd4 <HAL_UART_MspInit+0xec>)
 8002f94:	2200      	movs	r2, #0
 8002f96:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002f98:	480e      	ldr	r0, [pc, #56]	@ (8002fd4 <HAL_UART_MspInit+0xec>)
 8002f9a:	f000 fb1d 	bl	80035d8 <HAL_DMA_Init>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d001      	beq.n	8002fa8 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8002fa4:	f7ff feb2 	bl	8002d0c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	4a0a      	ldr	r2, [pc, #40]	@ (8002fd4 <HAL_UART_MspInit+0xec>)
 8002fac:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002fae:	4a09      	ldr	r2, [pc, #36]	@ (8002fd4 <HAL_UART_MspInit+0xec>)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	2100      	movs	r1, #0
 8002fb8:	2024      	movs	r0, #36	@ 0x24
 8002fba:	f000 faae 	bl	800351a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002fbe:	2024      	movs	r0, #36	@ 0x24
 8002fc0:	f000 fac5 	bl	800354e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002fc4:	bf00      	nop
 8002fc6:	3770      	adds	r7, #112	@ 0x70
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}
 8002fcc:	40013800 	.word	0x40013800
 8002fd0:	48000400 	.word	0x48000400
 8002fd4:	20000270 	.word	0x20000270
 8002fd8:	40020444 	.word	0x40020444

08002fdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002fe0:	bf00      	nop
 8002fe2:	e7fd      	b.n	8002fe0 <NMI_Handler+0x4>

08002fe4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002fe8:	bf00      	nop
 8002fea:	e7fd      	b.n	8002fe8 <HardFault_Handler+0x4>

08002fec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002fec:	b480      	push	{r7}
 8002fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ff0:	bf00      	nop
 8002ff2:	e7fd      	b.n	8002ff0 <MemManage_Handler+0x4>

08002ff4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ff8:	bf00      	nop
 8002ffa:	e7fd      	b.n	8002ff8 <BusFault_Handler+0x4>

08002ffc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003000:	bf00      	nop
 8003002:	e7fd      	b.n	8003000 <UsageFault_Handler+0x4>

08003004 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003004:	b480      	push	{r7}
 8003006:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003008:	bf00      	nop
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr

08003012 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003012:	b480      	push	{r7}
 8003014:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003016:	bf00      	nop
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr

08003020 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003020:	b480      	push	{r7}
 8003022:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003024:	bf00      	nop
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr

0800302e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800302e:	b580      	push	{r7, lr}
 8003030:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003032:	f000 f8ff 	bl	8003234 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003036:	bf00      	nop
 8003038:	bd80      	pop	{r7, pc}
	...

0800303c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003040:	4802      	ldr	r0, [pc, #8]	@ (800304c <USART1_IRQHandler+0x10>)
 8003042:	f004 fe05 	bl	8007c50 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003046:	bf00      	nop
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	200001dc 	.word	0x200001dc

08003050 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8003054:	f000 ff92 	bl	8003f7c <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8003058:	bf00      	nop
 800305a:	bd80      	pop	{r7, pc}

0800305c <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003060:	4802      	ldr	r0, [pc, #8]	@ (800306c <DMA2_Channel4_IRQHandler+0x10>)
 8003062:	f000 fc9a 	bl	800399a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 8003066:	bf00      	nop
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	20000270 	.word	0x20000270

08003070 <IPCC_C1_RX_IRQHandler>:
/* USER CODE BEGIN 1 */
/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8003074:	f00a fb48 	bl	800d708 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8003078:	bf00      	nop
 800307a:	bd80      	pop	{r7, pc}

0800307c <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8003080:	f00a fb78 	bl	800d774 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8003084:	bf00      	nop
 8003086:	bd80      	pop	{r7, pc}

08003088 <EXTI15_10_IRQHandler>:
 *         interrupt request.
 * @param  None
 * @retval None
 */
void PUSH_BUTTON_SW_EXTI_IRQHandler(void)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 800308c:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8003090:	f000 ff5c 	bl	8003f4c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003094:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8003098:	f000 ff58 	bl	8003f4c <HAL_GPIO_EXTI_IRQHandler>
}
 800309c:	bf00      	nop
 800309e:	bd80      	pop	{r7, pc}

080030a0 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(ADS1299_nDRDY_Pin);
 80030a4:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80030a8:	f000 ff50 	bl	8003f4c <HAL_GPIO_EXTI_IRQHandler>
}
 80030ac:	bf00      	nop
 80030ae:	bd80      	pop	{r7, pc}

080030b0 <RTC_WKUP_IRQHandler>:

void RTC_WKUP_IRQHandler(void)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	af00      	add	r7, sp, #0
  HAL_RTCEx_WakeUpTimerIRQHandler();
 80030b4:	f7fe fdbe 	bl	8001c34 <HW_TS_RTC_Wakeup_Handler>
}
 80030b8:	bf00      	nop
 80030ba:	bd80      	pop	{r7, pc}

080030bc <TIM1_TRG_COM_TIM17_IRQHandler>:
  * @brief  This function handles TIM17 IRQ Handler.
  * @param  None
  * @retval None
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	af00      	add	r7, sp, #0
    HAL_TIM_IRQHandler(&htim17);
 80030c0:	4802      	ldr	r0, [pc, #8]	@ (80030cc <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 80030c2:	f004 fb17 	bl	80076f4 <HAL_TIM_IRQHandler>
}
 80030c6:	bf00      	nop
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	200003d4 	.word	0x200003d4

080030d0 <TIM2_IRQHandler>:


void TIM2_IRQHandler(void)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	af00      	add	r7, sp, #0
    HAL_TIM_IRQHandler(&htim2);
 80030d4:	4802      	ldr	r0, [pc, #8]	@ (80030e0 <TIM2_IRQHandler+0x10>)
 80030d6:	f004 fb0d 	bl	80076f4 <HAL_TIM_IRQHandler>
}
 80030da:	bf00      	nop
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop
 80030e0:	20000388 	.word	0x20000388

080030e4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80030e4:	b480      	push	{r7}
 80030e6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 80030e8:	4b07      	ldr	r3, [pc, #28]	@ (8003108 <SystemInit+0x24>)
 80030ea:	2200      	movs	r2, #0
 80030ec:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 80030ee:	4b06      	ldr	r3, [pc, #24]	@ (8003108 <SystemInit+0x24>)
 80030f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030f4:	4a04      	ldr	r2, [pc, #16]	@ (8003108 <SystemInit+0x24>)
 80030f6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80030fa:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  RCC->CR &= 0xFFFBFFFFU;

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
#endif
}
 80030fe:	bf00      	nop
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr
 8003108:	e000ed00 	.word	0xe000ed00

0800310c <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 800310c:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800310e:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003110:	3304      	adds	r3, #4

08003112 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003112:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003114:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8003116:	d3f9      	bcc.n	800310c <CopyDataInit>
  bx lr
 8003118:	4770      	bx	lr

0800311a <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800311a:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 800311c:	3004      	adds	r0, #4

0800311e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800311e:	4288      	cmp	r0, r1
  bcc FillZerobss
 8003120:	d3fb      	bcc.n	800311a <FillZerobss>
  bx lr
 8003122:	4770      	bx	lr

08003124 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003124:	480c      	ldr	r0, [pc, #48]	@ (8003158 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003126:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003128:	f7ff ffdc 	bl	80030e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 800312c:	480b      	ldr	r0, [pc, #44]	@ (800315c <LoopForever+0x6>)
 800312e:	490c      	ldr	r1, [pc, #48]	@ (8003160 <LoopForever+0xa>)
 8003130:	4a0c      	ldr	r2, [pc, #48]	@ (8003164 <LoopForever+0xe>)
 8003132:	2300      	movs	r3, #0
 8003134:	f7ff ffed 	bl	8003112 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8003138:	480b      	ldr	r0, [pc, #44]	@ (8003168 <LoopForever+0x12>)
 800313a:	490c      	ldr	r1, [pc, #48]	@ (800316c <LoopForever+0x16>)
 800313c:	4a0c      	ldr	r2, [pc, #48]	@ (8003170 <LoopForever+0x1a>)
 800313e:	2300      	movs	r3, #0
 8003140:	f7ff ffe7 	bl	8003112 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8003144:	480b      	ldr	r0, [pc, #44]	@ (8003174 <LoopForever+0x1e>)
 8003146:	490c      	ldr	r1, [pc, #48]	@ (8003178 <LoopForever+0x22>)
 8003148:	2300      	movs	r3, #0
 800314a:	f7ff ffe8 	bl	800311e <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800314e:	f00b f8f5 	bl	800e33c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8003152:	f7ff fa45 	bl	80025e0 <main>

08003156 <LoopForever>:

LoopForever:
  b LoopForever
 8003156:	e7fe      	b.n	8003156 <LoopForever>
  ldr   r0, =_estack
 8003158:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 800315c:	20000008 	.word	0x20000008
 8003160:	20000088 	.word	0x20000088
 8003164:	0801083c 	.word	0x0801083c
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8003168:	200301e4 	.word	0x200301e4
 800316c:	20030d8b 	.word	0x20030d8b
 8003170:	080108ea 	.word	0x080108ea
  INIT_BSS _sbss, _ebss
 8003174:	200000bc 	.word	0x200000bc
 8003178:	20002424 	.word	0x20002424

0800317c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800317c:	e7fe      	b.n	800317c <ADC1_IRQHandler>
	...

08003180 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b082      	sub	sp, #8
 8003184:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003186:	2300      	movs	r3, #0
 8003188:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800318a:	4b0c      	ldr	r3, [pc, #48]	@ (80031bc <HAL_Init+0x3c>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a0b      	ldr	r2, [pc, #44]	@ (80031bc <HAL_Init+0x3c>)
 8003190:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003194:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003196:	2003      	movs	r0, #3
 8003198:	f000 f9b4 	bl	8003504 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800319c:	2000      	movs	r0, #0
 800319e:	f000 f80f 	bl	80031c0 <HAL_InitTick>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d002      	beq.n	80031ae <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	71fb      	strb	r3, [r7, #7]
 80031ac:	e001      	b.n	80031b2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80031ae:	f7ff fe3e 	bl	8002e2e <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80031b2:	79fb      	ldrb	r3, [r7, #7]
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3708      	adds	r7, #8
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}
 80031bc:	58004000 	.word	0x58004000

080031c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b084      	sub	sp, #16
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80031c8:	2300      	movs	r3, #0
 80031ca:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80031cc:	4b17      	ldr	r3, [pc, #92]	@ (800322c <HAL_InitTick+0x6c>)
 80031ce:	781b      	ldrb	r3, [r3, #0]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d024      	beq.n	800321e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80031d4:	f002 fc58 	bl	8005a88 <HAL_RCC_GetHCLKFreq>
 80031d8:	4602      	mov	r2, r0
 80031da:	4b14      	ldr	r3, [pc, #80]	@ (800322c <HAL_InitTick+0x6c>)
 80031dc:	781b      	ldrb	r3, [r3, #0]
 80031de:	4619      	mov	r1, r3
 80031e0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80031e4:	fbb3 f3f1 	udiv	r3, r3, r1
 80031e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80031ec:	4618      	mov	r0, r3
 80031ee:	f000 f9ca 	bl	8003586 <HAL_SYSTICK_Config>
 80031f2:	4603      	mov	r3, r0
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d10f      	bne.n	8003218 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2b0f      	cmp	r3, #15
 80031fc:	d809      	bhi.n	8003212 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80031fe:	2200      	movs	r2, #0
 8003200:	6879      	ldr	r1, [r7, #4]
 8003202:	f04f 30ff 	mov.w	r0, #4294967295
 8003206:	f000 f988 	bl	800351a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800320a:	4a09      	ldr	r2, [pc, #36]	@ (8003230 <HAL_InitTick+0x70>)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6013      	str	r3, [r2, #0]
 8003210:	e007      	b.n	8003222 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	73fb      	strb	r3, [r7, #15]
 8003216:	e004      	b.n	8003222 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	73fb      	strb	r3, [r7, #15]
 800321c:	e001      	b.n	8003222 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003222:	7bfb      	ldrb	r3, [r7, #15]
}
 8003224:	4618      	mov	r0, r3
 8003226:	3710      	adds	r7, #16
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}
 800322c:	20000010 	.word	0x20000010
 8003230:	2000000c 	.word	0x2000000c

08003234 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003234:	b480      	push	{r7}
 8003236:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003238:	4b06      	ldr	r3, [pc, #24]	@ (8003254 <HAL_IncTick+0x20>)
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	461a      	mov	r2, r3
 800323e:	4b06      	ldr	r3, [pc, #24]	@ (8003258 <HAL_IncTick+0x24>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4413      	add	r3, r2
 8003244:	4a04      	ldr	r2, [pc, #16]	@ (8003258 <HAL_IncTick+0x24>)
 8003246:	6013      	str	r3, [r2, #0]
}
 8003248:	bf00      	nop
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr
 8003252:	bf00      	nop
 8003254:	20000010 	.word	0x20000010
 8003258:	20000428 	.word	0x20000428

0800325c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800325c:	b480      	push	{r7}
 800325e:	af00      	add	r7, sp, #0
  return uwTick;
 8003260:	4b03      	ldr	r3, [pc, #12]	@ (8003270 <HAL_GetTick+0x14>)
 8003262:	681b      	ldr	r3, [r3, #0]
}
 8003264:	4618      	mov	r0, r3
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr
 800326e:	bf00      	nop
 8003270:	20000428 	.word	0x20000428

08003274 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8003274:	b480      	push	{r7}
 8003276:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8003278:	4b03      	ldr	r3, [pc, #12]	@ (8003288 <HAL_GetTickPrio+0x14>)
 800327a:	681b      	ldr	r3, [r3, #0]
}
 800327c:	4618      	mov	r0, r3
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr
 8003286:	bf00      	nop
 8003288:	2000000c 	.word	0x2000000c

0800328c <HAL_GetTickFreq>:
  * @brief Return tick frequency.
  * @retval Tick frequency.
  *         Value of @ref HAL_TickFreqTypeDef.
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 800328c:	b480      	push	{r7}
 800328e:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8003290:	4b03      	ldr	r3, [pc, #12]	@ (80032a0 <HAL_GetTickFreq+0x14>)
 8003292:	781b      	ldrb	r3, [r3, #0]
}
 8003294:	4618      	mov	r0, r3
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr
 800329e:	bf00      	nop
 80032a0:	20000010 	.word	0x20000010

080032a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b085      	sub	sp, #20
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	f003 0307 	and.w	r3, r3, #7
 80032b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032b4:	4b0c      	ldr	r3, [pc, #48]	@ (80032e8 <__NVIC_SetPriorityGrouping+0x44>)
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032ba:	68ba      	ldr	r2, [r7, #8]
 80032bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80032c0:	4013      	ands	r3, r2
 80032c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80032cc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80032d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80032d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032d6:	4a04      	ldr	r2, [pc, #16]	@ (80032e8 <__NVIC_SetPriorityGrouping+0x44>)
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	60d3      	str	r3, [r2, #12]
}
 80032dc:	bf00      	nop
 80032de:	3714      	adds	r7, #20
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr
 80032e8:	e000ed00 	.word	0xe000ed00

080032ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80032ec:	b480      	push	{r7}
 80032ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80032f0:	4b04      	ldr	r3, [pc, #16]	@ (8003304 <__NVIC_GetPriorityGrouping+0x18>)
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	0a1b      	lsrs	r3, r3, #8
 80032f6:	f003 0307 	and.w	r3, r3, #7
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	46bd      	mov	sp, r7
 80032fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003302:	4770      	bx	lr
 8003304:	e000ed00 	.word	0xe000ed00

08003308 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003308:	b480      	push	{r7}
 800330a:	b083      	sub	sp, #12
 800330c:	af00      	add	r7, sp, #0
 800330e:	4603      	mov	r3, r0
 8003310:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003316:	2b00      	cmp	r3, #0
 8003318:	db0b      	blt.n	8003332 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800331a:	79fb      	ldrb	r3, [r7, #7]
 800331c:	f003 021f 	and.w	r2, r3, #31
 8003320:	4907      	ldr	r1, [pc, #28]	@ (8003340 <__NVIC_EnableIRQ+0x38>)
 8003322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003326:	095b      	lsrs	r3, r3, #5
 8003328:	2001      	movs	r0, #1
 800332a:	fa00 f202 	lsl.w	r2, r0, r2
 800332e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003332:	bf00      	nop
 8003334:	370c      	adds	r7, #12
 8003336:	46bd      	mov	sp, r7
 8003338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333c:	4770      	bx	lr
 800333e:	bf00      	nop
 8003340:	e000e100 	.word	0xe000e100

08003344 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003344:	b480      	push	{r7}
 8003346:	b083      	sub	sp, #12
 8003348:	af00      	add	r7, sp, #0
 800334a:	4603      	mov	r3, r0
 800334c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800334e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003352:	2b00      	cmp	r3, #0
 8003354:	db12      	blt.n	800337c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003356:	79fb      	ldrb	r3, [r7, #7]
 8003358:	f003 021f 	and.w	r2, r3, #31
 800335c:	490a      	ldr	r1, [pc, #40]	@ (8003388 <__NVIC_DisableIRQ+0x44>)
 800335e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003362:	095b      	lsrs	r3, r3, #5
 8003364:	2001      	movs	r0, #1
 8003366:	fa00 f202 	lsl.w	r2, r0, r2
 800336a:	3320      	adds	r3, #32
 800336c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003370:	f3bf 8f4f 	dsb	sy
}
 8003374:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003376:	f3bf 8f6f 	isb	sy
}
 800337a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800337c:	bf00      	nop
 800337e:	370c      	adds	r7, #12
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr
 8003388:	e000e100 	.word	0xe000e100

0800338c <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 800338c:	b480      	push	{r7}
 800338e:	b083      	sub	sp, #12
 8003390:	af00      	add	r7, sp, #0
 8003392:	4603      	mov	r3, r0
 8003394:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800339a:	2b00      	cmp	r3, #0
 800339c:	db0c      	blt.n	80033b8 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800339e:	79fb      	ldrb	r3, [r7, #7]
 80033a0:	f003 021f 	and.w	r2, r3, #31
 80033a4:	4907      	ldr	r1, [pc, #28]	@ (80033c4 <__NVIC_SetPendingIRQ+0x38>)
 80033a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033aa:	095b      	lsrs	r3, r3, #5
 80033ac:	2001      	movs	r0, #1
 80033ae:	fa00 f202 	lsl.w	r2, r0, r2
 80033b2:	3340      	adds	r3, #64	@ 0x40
 80033b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80033b8:	bf00      	nop
 80033ba:	370c      	adds	r7, #12
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr
 80033c4:	e000e100 	.word	0xe000e100

080033c8 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b083      	sub	sp, #12
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	4603      	mov	r3, r0
 80033d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	db0c      	blt.n	80033f4 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033da:	79fb      	ldrb	r3, [r7, #7]
 80033dc:	f003 021f 	and.w	r2, r3, #31
 80033e0:	4907      	ldr	r1, [pc, #28]	@ (8003400 <__NVIC_ClearPendingIRQ+0x38>)
 80033e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033e6:	095b      	lsrs	r3, r3, #5
 80033e8:	2001      	movs	r0, #1
 80033ea:	fa00 f202 	lsl.w	r2, r0, r2
 80033ee:	3360      	adds	r3, #96	@ 0x60
 80033f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80033f4:	bf00      	nop
 80033f6:	370c      	adds	r7, #12
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr
 8003400:	e000e100 	.word	0xe000e100

08003404 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003404:	b480      	push	{r7}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
 800340a:	4603      	mov	r3, r0
 800340c:	6039      	str	r1, [r7, #0]
 800340e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003410:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003414:	2b00      	cmp	r3, #0
 8003416:	db0a      	blt.n	800342e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	b2da      	uxtb	r2, r3
 800341c:	490c      	ldr	r1, [pc, #48]	@ (8003450 <__NVIC_SetPriority+0x4c>)
 800341e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003422:	0112      	lsls	r2, r2, #4
 8003424:	b2d2      	uxtb	r2, r2
 8003426:	440b      	add	r3, r1
 8003428:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800342c:	e00a      	b.n	8003444 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	b2da      	uxtb	r2, r3
 8003432:	4908      	ldr	r1, [pc, #32]	@ (8003454 <__NVIC_SetPriority+0x50>)
 8003434:	79fb      	ldrb	r3, [r7, #7]
 8003436:	f003 030f 	and.w	r3, r3, #15
 800343a:	3b04      	subs	r3, #4
 800343c:	0112      	lsls	r2, r2, #4
 800343e:	b2d2      	uxtb	r2, r2
 8003440:	440b      	add	r3, r1
 8003442:	761a      	strb	r2, [r3, #24]
}
 8003444:	bf00      	nop
 8003446:	370c      	adds	r7, #12
 8003448:	46bd      	mov	sp, r7
 800344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344e:	4770      	bx	lr
 8003450:	e000e100 	.word	0xe000e100
 8003454:	e000ed00 	.word	0xe000ed00

08003458 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003458:	b480      	push	{r7}
 800345a:	b089      	sub	sp, #36	@ 0x24
 800345c:	af00      	add	r7, sp, #0
 800345e:	60f8      	str	r0, [r7, #12]
 8003460:	60b9      	str	r1, [r7, #8]
 8003462:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	f003 0307 	and.w	r3, r3, #7
 800346a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800346c:	69fb      	ldr	r3, [r7, #28]
 800346e:	f1c3 0307 	rsb	r3, r3, #7
 8003472:	2b04      	cmp	r3, #4
 8003474:	bf28      	it	cs
 8003476:	2304      	movcs	r3, #4
 8003478:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800347a:	69fb      	ldr	r3, [r7, #28]
 800347c:	3304      	adds	r3, #4
 800347e:	2b06      	cmp	r3, #6
 8003480:	d902      	bls.n	8003488 <NVIC_EncodePriority+0x30>
 8003482:	69fb      	ldr	r3, [r7, #28]
 8003484:	3b03      	subs	r3, #3
 8003486:	e000      	b.n	800348a <NVIC_EncodePriority+0x32>
 8003488:	2300      	movs	r3, #0
 800348a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800348c:	f04f 32ff 	mov.w	r2, #4294967295
 8003490:	69bb      	ldr	r3, [r7, #24]
 8003492:	fa02 f303 	lsl.w	r3, r2, r3
 8003496:	43da      	mvns	r2, r3
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	401a      	ands	r2, r3
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034a0:	f04f 31ff 	mov.w	r1, #4294967295
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	fa01 f303 	lsl.w	r3, r1, r3
 80034aa:	43d9      	mvns	r1, r3
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034b0:	4313      	orrs	r3, r2
         );
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3724      	adds	r7, #36	@ 0x24
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr
	...

080034c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b082      	sub	sp, #8
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	3b01      	subs	r3, #1
 80034cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80034d0:	d301      	bcc.n	80034d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034d2:	2301      	movs	r3, #1
 80034d4:	e00f      	b.n	80034f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034d6:	4a0a      	ldr	r2, [pc, #40]	@ (8003500 <SysTick_Config+0x40>)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	3b01      	subs	r3, #1
 80034dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034de:	210f      	movs	r1, #15
 80034e0:	f04f 30ff 	mov.w	r0, #4294967295
 80034e4:	f7ff ff8e 	bl	8003404 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034e8:	4b05      	ldr	r3, [pc, #20]	@ (8003500 <SysTick_Config+0x40>)
 80034ea:	2200      	movs	r2, #0
 80034ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034ee:	4b04      	ldr	r3, [pc, #16]	@ (8003500 <SysTick_Config+0x40>)
 80034f0:	2207      	movs	r2, #7
 80034f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034f4:	2300      	movs	r3, #0
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3708      	adds	r7, #8
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop
 8003500:	e000e010 	.word	0xe000e010

08003504 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b082      	sub	sp, #8
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	f7ff fec9 	bl	80032a4 <__NVIC_SetPriorityGrouping>
}
 8003512:	bf00      	nop
 8003514:	3708      	adds	r7, #8
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}

0800351a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800351a:	b580      	push	{r7, lr}
 800351c:	b086      	sub	sp, #24
 800351e:	af00      	add	r7, sp, #0
 8003520:	4603      	mov	r3, r0
 8003522:	60b9      	str	r1, [r7, #8]
 8003524:	607a      	str	r2, [r7, #4]
 8003526:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003528:	f7ff fee0 	bl	80032ec <__NVIC_GetPriorityGrouping>
 800352c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800352e:	687a      	ldr	r2, [r7, #4]
 8003530:	68b9      	ldr	r1, [r7, #8]
 8003532:	6978      	ldr	r0, [r7, #20]
 8003534:	f7ff ff90 	bl	8003458 <NVIC_EncodePriority>
 8003538:	4602      	mov	r2, r0
 800353a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800353e:	4611      	mov	r1, r2
 8003540:	4618      	mov	r0, r3
 8003542:	f7ff ff5f 	bl	8003404 <__NVIC_SetPriority>
}
 8003546:	bf00      	nop
 8003548:	3718      	adds	r7, #24
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}

0800354e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800354e:	b580      	push	{r7, lr}
 8003550:	b082      	sub	sp, #8
 8003552:	af00      	add	r7, sp, #0
 8003554:	4603      	mov	r3, r0
 8003556:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003558:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800355c:	4618      	mov	r0, r3
 800355e:	f7ff fed3 	bl	8003308 <__NVIC_EnableIRQ>
}
 8003562:	bf00      	nop
 8003564:	3708      	adds	r7, #8
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}

0800356a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800356a:	b580      	push	{r7, lr}
 800356c:	b082      	sub	sp, #8
 800356e:	af00      	add	r7, sp, #0
 8003570:	4603      	mov	r3, r0
 8003572:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003574:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003578:	4618      	mov	r0, r3
 800357a:	f7ff fee3 	bl	8003344 <__NVIC_DisableIRQ>
}
 800357e:	bf00      	nop
 8003580:	3708      	adds	r7, #8
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}

08003586 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003586:	b580      	push	{r7, lr}
 8003588:	b082      	sub	sp, #8
 800358a:	af00      	add	r7, sp, #0
 800358c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f7ff ff96 	bl	80034c0 <SysTick_Config>
 8003594:	4603      	mov	r3, r0
}
 8003596:	4618      	mov	r0, r3
 8003598:	3708      	adds	r7, #8
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}

0800359e <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 800359e:	b580      	push	{r7, lr}
 80035a0:	b082      	sub	sp, #8
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	4603      	mov	r3, r0
 80035a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 80035a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035ac:	4618      	mov	r0, r3
 80035ae:	f7ff feed 	bl	800338c <__NVIC_SetPendingIRQ>
}
 80035b2:	bf00      	nop
 80035b4:	3708      	adds	r7, #8
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}

080035ba <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80035ba:	b580      	push	{r7, lr}
 80035bc:	b082      	sub	sp, #8
 80035be:	af00      	add	r7, sp, #0
 80035c0:	4603      	mov	r3, r0
 80035c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80035c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035c8:	4618      	mov	r0, r3
 80035ca:	f7ff fefd 	bl	80033c8 <__NVIC_ClearPendingIRQ>
}
 80035ce:	bf00      	nop
 80035d0:	3708      	adds	r7, #8
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
	...

080035d8 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b084      	sub	sp, #16
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d101      	bne.n	80035ea <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e08e      	b.n	8003708 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	461a      	mov	r2, r3
 80035f0:	4b47      	ldr	r3, [pc, #284]	@ (8003710 <HAL_DMA_Init+0x138>)
 80035f2:	429a      	cmp	r2, r3
 80035f4:	d80f      	bhi.n	8003616 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	461a      	mov	r2, r3
 80035fc:	4b45      	ldr	r3, [pc, #276]	@ (8003714 <HAL_DMA_Init+0x13c>)
 80035fe:	4413      	add	r3, r2
 8003600:	4a45      	ldr	r2, [pc, #276]	@ (8003718 <HAL_DMA_Init+0x140>)
 8003602:	fba2 2303 	umull	r2, r3, r2, r3
 8003606:	091b      	lsrs	r3, r3, #4
 8003608:	009a      	lsls	r2, r3, #2
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	4a42      	ldr	r2, [pc, #264]	@ (800371c <HAL_DMA_Init+0x144>)
 8003612:	641a      	str	r2, [r3, #64]	@ 0x40
 8003614:	e00e      	b.n	8003634 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	461a      	mov	r2, r3
 800361c:	4b40      	ldr	r3, [pc, #256]	@ (8003720 <HAL_DMA_Init+0x148>)
 800361e:	4413      	add	r3, r2
 8003620:	4a3d      	ldr	r2, [pc, #244]	@ (8003718 <HAL_DMA_Init+0x140>)
 8003622:	fba2 2303 	umull	r2, r3, r2, r3
 8003626:	091b      	lsrs	r3, r3, #4
 8003628:	009a      	lsls	r2, r3, #2
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4a3c      	ldr	r2, [pc, #240]	@ (8003724 <HAL_DMA_Init+0x14c>)
 8003632:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2202      	movs	r2, #2
 8003638:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800364a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800364e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003658:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	691b      	ldr	r3, [r3, #16]
 800365e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003664:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	699b      	ldr	r3, [r3, #24]
 800366a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003670:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6a1b      	ldr	r3, [r3, #32]
 8003676:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003678:	68fa      	ldr	r2, [r7, #12]
 800367a:	4313      	orrs	r3, r2
 800367c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	68fa      	ldr	r2, [r7, #12]
 8003684:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f000 fa74 	bl	8003b74 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003694:	d102      	bne.n	800369c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2200      	movs	r2, #0
 800369a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	685a      	ldr	r2, [r3, #4]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036a4:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80036a8:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036ae:	687a      	ldr	r2, [r7, #4]
 80036b0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80036b2:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d010      	beq.n	80036de <HAL_DMA_Init+0x106>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	2b04      	cmp	r3, #4
 80036c2:	d80c      	bhi.n	80036de <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	f000 fa93 	bl	8003bf0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036ce:	2200      	movs	r2, #0
 80036d0:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036d6:	687a      	ldr	r2, [r7, #4]
 80036d8:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80036da:	605a      	str	r2, [r3, #4]
 80036dc:	e008      	b.n	80036f0 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2200      	movs	r2, #0
 80036e2:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2200      	movs	r2, #0
 80036e8:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2200      	movs	r2, #0
 80036ee:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2200      	movs	r2, #0
 80036f4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2201      	movs	r2, #1
 80036fa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2200      	movs	r2, #0
 8003702:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003706:	2300      	movs	r3, #0
}
 8003708:	4618      	mov	r0, r3
 800370a:	3710      	adds	r7, #16
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}
 8003710:	40020407 	.word	0x40020407
 8003714:	bffdfff8 	.word	0xbffdfff8
 8003718:	cccccccd 	.word	0xcccccccd
 800371c:	40020000 	.word	0x40020000
 8003720:	bffdfbf8 	.word	0xbffdfbf8
 8003724:	40020400 	.word	0x40020400

08003728 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b086      	sub	sp, #24
 800372c:	af00      	add	r7, sp, #0
 800372e:	60f8      	str	r0, [r7, #12]
 8003730:	60b9      	str	r1, [r7, #8]
 8003732:	607a      	str	r2, [r7, #4]
 8003734:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003736:	2300      	movs	r3, #0
 8003738:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003740:	2b01      	cmp	r3, #1
 8003742:	d101      	bne.n	8003748 <HAL_DMA_Start_IT+0x20>
 8003744:	2302      	movs	r3, #2
 8003746:	e066      	b.n	8003816 <HAL_DMA_Start_IT+0xee>
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2201      	movs	r2, #1
 800374c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003756:	b2db      	uxtb	r3, r3
 8003758:	2b01      	cmp	r3, #1
 800375a:	d155      	bne.n	8003808 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2202      	movs	r2, #2
 8003760:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2200      	movs	r2, #0
 8003768:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f022 0201 	bic.w	r2, r2, #1
 8003778:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	687a      	ldr	r2, [r7, #4]
 800377e:	68b9      	ldr	r1, [r7, #8]
 8003780:	68f8      	ldr	r0, [r7, #12]
 8003782:	f000 f9b9 	bl	8003af8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800378a:	2b00      	cmp	r3, #0
 800378c:	d008      	beq.n	80037a0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f042 020e 	orr.w	r2, r2, #14
 800379c:	601a      	str	r2, [r3, #0]
 800379e:	e00f      	b.n	80037c0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f022 0204 	bic.w	r2, r2, #4
 80037ae:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f042 020a 	orr.w	r2, r2, #10
 80037be:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d007      	beq.n	80037de <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037d8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80037dc:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d007      	beq.n	80037f6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037f0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80037f4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f042 0201 	orr.w	r2, r2, #1
 8003804:	601a      	str	r2, [r3, #0]
 8003806:	e005      	b.n	8003814 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2200      	movs	r2, #0
 800380c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003810:	2302      	movs	r3, #2
 8003812:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003814:	7dfb      	ldrb	r3, [r7, #23]
}
 8003816:	4618      	mov	r0, r3
 8003818:	3718      	adds	r7, #24
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}

0800381e <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800381e:	b480      	push	{r7}
 8003820:	b083      	sub	sp, #12
 8003822:	af00      	add	r7, sp, #0
 8003824:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d101      	bne.n	8003830 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e04f      	b.n	80038d0 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003836:	b2db      	uxtb	r3, r3
 8003838:	2b02      	cmp	r3, #2
 800383a:	d008      	beq.n	800384e <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2204      	movs	r2, #4
 8003840:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e040      	b.n	80038d0 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f022 020e 	bic.w	r2, r2, #14
 800385c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003868:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800386c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f022 0201 	bic.w	r2, r2, #1
 800387c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003882:	f003 021c 	and.w	r2, r3, #28
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800388a:	2101      	movs	r1, #1
 800388c:	fa01 f202 	lsl.w	r2, r1, r2
 8003890:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003896:	687a      	ldr	r2, [r7, #4]
 8003898:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800389a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d00c      	beq.n	80038be <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038ae:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80038b2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038b8:	687a      	ldr	r2, [r7, #4]
 80038ba:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80038bc:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2201      	movs	r2, #1
 80038c2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2200      	movs	r2, #0
 80038ca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 80038ce:	2300      	movs	r3, #0
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	370c      	adds	r7, #12
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr

080038dc <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b084      	sub	sp, #16
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038e4:	2300      	movs	r3, #0
 80038e6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	2b02      	cmp	r3, #2
 80038f2:	d005      	beq.n	8003900 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2204      	movs	r2, #4
 80038f8:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	73fb      	strb	r3, [r7, #15]
 80038fe:	e047      	b.n	8003990 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f022 020e 	bic.w	r2, r2, #14
 800390e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f022 0201 	bic.w	r2, r2, #1
 800391e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800392a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800392e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003934:	f003 021c 	and.w	r2, r3, #28
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800393c:	2101      	movs	r1, #1
 800393e:	fa01 f202 	lsl.w	r2, r1, r2
 8003942:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003948:	687a      	ldr	r2, [r7, #4]
 800394a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800394c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003952:	2b00      	cmp	r3, #0
 8003954:	d00c      	beq.n	8003970 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003960:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003964:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800396a:	687a      	ldr	r2, [r7, #4]
 800396c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800396e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2201      	movs	r2, #1
 8003974:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2200      	movs	r2, #0
 800397c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003984:	2b00      	cmp	r3, #0
 8003986:	d003      	beq.n	8003990 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	4798      	blx	r3
    }
  }
  return status;
 8003990:	7bfb      	ldrb	r3, [r7, #15]
}
 8003992:	4618      	mov	r0, r3
 8003994:	3710      	adds	r7, #16
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}

0800399a <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800399a:	b580      	push	{r7, lr}
 800399c:	b084      	sub	sp, #16
 800399e:	af00      	add	r7, sp, #0
 80039a0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039b6:	f003 031c 	and.w	r3, r3, #28
 80039ba:	2204      	movs	r2, #4
 80039bc:	409a      	lsls	r2, r3
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	4013      	ands	r3, r2
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d026      	beq.n	8003a14 <HAL_DMA_IRQHandler+0x7a>
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	f003 0304 	and.w	r3, r3, #4
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d021      	beq.n	8003a14 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 0320 	and.w	r3, r3, #32
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d107      	bne.n	80039ee <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f022 0204 	bic.w	r2, r2, #4
 80039ec:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039f2:	f003 021c 	and.w	r2, r3, #28
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039fa:	2104      	movs	r1, #4
 80039fc:	fa01 f202 	lsl.w	r2, r1, r2
 8003a00:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d071      	beq.n	8003aee <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003a12:	e06c      	b.n	8003aee <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a18:	f003 031c 	and.w	r3, r3, #28
 8003a1c:	2202      	movs	r2, #2
 8003a1e:	409a      	lsls	r2, r3
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	4013      	ands	r3, r2
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d02e      	beq.n	8003a86 <HAL_DMA_IRQHandler+0xec>
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	f003 0302 	and.w	r3, r3, #2
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d029      	beq.n	8003a86 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 0320 	and.w	r3, r3, #32
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d10b      	bne.n	8003a58 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f022 020a 	bic.w	r2, r2, #10
 8003a4e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2201      	movs	r2, #1
 8003a54:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a5c:	f003 021c 	and.w	r2, r3, #28
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a64:	2102      	movs	r1, #2
 8003a66:	fa01 f202 	lsl.w	r2, r1, r2
 8003a6a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d038      	beq.n	8003aee <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a80:	6878      	ldr	r0, [r7, #4]
 8003a82:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003a84:	e033      	b.n	8003aee <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a8a:	f003 031c 	and.w	r3, r3, #28
 8003a8e:	2208      	movs	r2, #8
 8003a90:	409a      	lsls	r2, r3
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	4013      	ands	r3, r2
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d02a      	beq.n	8003af0 <HAL_DMA_IRQHandler+0x156>
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	f003 0308 	and.w	r3, r3, #8
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d025      	beq.n	8003af0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f022 020e 	bic.w	r2, r2, #14
 8003ab2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ab8:	f003 021c 	and.w	r2, r3, #28
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ac0:	2101      	movs	r1, #1
 8003ac2:	fa01 f202 	lsl.w	r2, r1, r2
 8003ac6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2201      	movs	r2, #1
 8003acc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d004      	beq.n	8003af0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003aee:	bf00      	nop
 8003af0:	bf00      	nop
}
 8003af2:	3710      	adds	r7, #16
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}

08003af8 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b085      	sub	sp, #20
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	60f8      	str	r0, [r7, #12]
 8003b00:	60b9      	str	r1, [r7, #8]
 8003b02:	607a      	str	r2, [r7, #4]
 8003b04:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b0a:	68fa      	ldr	r2, [r7, #12]
 8003b0c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003b0e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d004      	beq.n	8003b22 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b1c:	68fa      	ldr	r2, [r7, #12]
 8003b1e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003b20:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b26:	f003 021c 	and.w	r2, r3, #28
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b2e:	2101      	movs	r1, #1
 8003b30:	fa01 f202 	lsl.w	r2, r1, r2
 8003b34:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	683a      	ldr	r2, [r7, #0]
 8003b3c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	2b10      	cmp	r3, #16
 8003b44:	d108      	bne.n	8003b58 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	687a      	ldr	r2, [r7, #4]
 8003b4c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	68ba      	ldr	r2, [r7, #8]
 8003b54:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003b56:	e007      	b.n	8003b68 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	68ba      	ldr	r2, [r7, #8]
 8003b5e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	687a      	ldr	r2, [r7, #4]
 8003b66:	60da      	str	r2, [r3, #12]
}
 8003b68:	bf00      	nop
 8003b6a:	3714      	adds	r7, #20
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b72:	4770      	bx	lr

08003b74 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b085      	sub	sp, #20
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	461a      	mov	r2, r3
 8003b82:	4b17      	ldr	r3, [pc, #92]	@ (8003be0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d80a      	bhi.n	8003b9e <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b8c:	089b      	lsrs	r3, r3, #2
 8003b8e:	009b      	lsls	r3, r3, #2
 8003b90:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003b94:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8003b98:	687a      	ldr	r2, [r7, #4]
 8003b9a:	6493      	str	r3, [r2, #72]	@ 0x48
 8003b9c:	e007      	b.n	8003bae <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ba2:	089b      	lsrs	r3, r3, #2
 8003ba4:	009a      	lsls	r2, r3, #2
 8003ba6:	4b0f      	ldr	r3, [pc, #60]	@ (8003be4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003ba8:	4413      	add	r3, r2
 8003baa:	687a      	ldr	r2, [r7, #4]
 8003bac:	6493      	str	r3, [r2, #72]	@ 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	b2db      	uxtb	r3, r3
 8003bb4:	3b08      	subs	r3, #8
 8003bb6:	4a0c      	ldr	r2, [pc, #48]	@ (8003be8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003bb8:	fba2 2303 	umull	r2, r3, r2, r3
 8003bbc:	091b      	lsrs	r3, r3, #4
 8003bbe:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	4a0a      	ldr	r2, [pc, #40]	@ (8003bec <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003bc4:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	f003 031f 	and.w	r3, r3, #31
 8003bcc:	2201      	movs	r2, #1
 8003bce:	409a      	lsls	r2, r3
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003bd4:	bf00      	nop
 8003bd6:	3714      	adds	r7, #20
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr
 8003be0:	40020407 	.word	0x40020407
 8003be4:	4002081c 	.word	0x4002081c
 8003be8:	cccccccd 	.word	0xcccccccd
 8003bec:	40020880 	.word	0x40020880

08003bf0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b085      	sub	sp, #20
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003c00:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003c02:	68fa      	ldr	r2, [r7, #12]
 8003c04:	4b0b      	ldr	r3, [pc, #44]	@ (8003c34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003c06:	4413      	add	r3, r2
 8003c08:	009b      	lsls	r3, r3, #2
 8003c0a:	461a      	mov	r2, r3
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	4a09      	ldr	r2, [pc, #36]	@ (8003c38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8003c14:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	3b01      	subs	r3, #1
 8003c1a:	f003 0303 	and.w	r3, r3, #3
 8003c1e:	2201      	movs	r2, #1
 8003c20:	409a      	lsls	r2, r3
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8003c26:	bf00      	nop
 8003c28:	3714      	adds	r7, #20
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr
 8003c32:	bf00      	nop
 8003c34:	1000823f 	.word	0x1000823f
 8003c38:	40020940 	.word	0x40020940

08003c3c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b087      	sub	sp, #28
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
 8003c44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003c46:	2300      	movs	r3, #0
 8003c48:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c4a:	e14c      	b.n	8003ee6 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	2101      	movs	r1, #1
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	fa01 f303 	lsl.w	r3, r1, r3
 8003c58:	4013      	ands	r3, r2
 8003c5a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	f000 813e 	beq.w	8003ee0 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	f003 0303 	and.w	r3, r3, #3
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d005      	beq.n	8003c7c <HAL_GPIO_Init+0x40>
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	f003 0303 	and.w	r3, r3, #3
 8003c78:	2b02      	cmp	r3, #2
 8003c7a:	d130      	bne.n	8003cde <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	005b      	lsls	r3, r3, #1
 8003c86:	2203      	movs	r2, #3
 8003c88:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8c:	43db      	mvns	r3, r3
 8003c8e:	693a      	ldr	r2, [r7, #16]
 8003c90:	4013      	ands	r3, r2
 8003c92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	68da      	ldr	r2, [r3, #12]
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	005b      	lsls	r3, r3, #1
 8003c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca0:	693a      	ldr	r2, [r7, #16]
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	693a      	ldr	r2, [r7, #16]
 8003caa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cba:	43db      	mvns	r3, r3
 8003cbc:	693a      	ldr	r2, [r7, #16]
 8003cbe:	4013      	ands	r3, r2
 8003cc0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	091b      	lsrs	r3, r3, #4
 8003cc8:	f003 0201 	and.w	r2, r3, #1
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd2:	693a      	ldr	r2, [r7, #16]
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	693a      	ldr	r2, [r7, #16]
 8003cdc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	f003 0303 	and.w	r3, r3, #3
 8003ce6:	2b03      	cmp	r3, #3
 8003ce8:	d017      	beq.n	8003d1a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	68db      	ldr	r3, [r3, #12]
 8003cee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	005b      	lsls	r3, r3, #1
 8003cf4:	2203      	movs	r2, #3
 8003cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cfa:	43db      	mvns	r3, r3
 8003cfc:	693a      	ldr	r2, [r7, #16]
 8003cfe:	4013      	ands	r3, r2
 8003d00:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	689a      	ldr	r2, [r3, #8]
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	005b      	lsls	r3, r3, #1
 8003d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d0e:	693a      	ldr	r2, [r7, #16]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	693a      	ldr	r2, [r7, #16]
 8003d18:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	f003 0303 	and.w	r3, r3, #3
 8003d22:	2b02      	cmp	r3, #2
 8003d24:	d123      	bne.n	8003d6e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	08da      	lsrs	r2, r3, #3
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	3208      	adds	r2, #8
 8003d2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d32:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	f003 0307 	and.w	r3, r3, #7
 8003d3a:	009b      	lsls	r3, r3, #2
 8003d3c:	220f      	movs	r2, #15
 8003d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d42:	43db      	mvns	r3, r3
 8003d44:	693a      	ldr	r2, [r7, #16]
 8003d46:	4013      	ands	r3, r2
 8003d48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	691a      	ldr	r2, [r3, #16]
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	f003 0307 	and.w	r3, r3, #7
 8003d54:	009b      	lsls	r3, r3, #2
 8003d56:	fa02 f303 	lsl.w	r3, r2, r3
 8003d5a:	693a      	ldr	r2, [r7, #16]
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	08da      	lsrs	r2, r3, #3
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	3208      	adds	r2, #8
 8003d68:	6939      	ldr	r1, [r7, #16]
 8003d6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	005b      	lsls	r3, r3, #1
 8003d78:	2203      	movs	r2, #3
 8003d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d7e:	43db      	mvns	r3, r3
 8003d80:	693a      	ldr	r2, [r7, #16]
 8003d82:	4013      	ands	r3, r2
 8003d84:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	f003 0203 	and.w	r2, r3, #3
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	005b      	lsls	r3, r3, #1
 8003d92:	fa02 f303 	lsl.w	r3, r2, r3
 8003d96:	693a      	ldr	r2, [r7, #16]
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	693a      	ldr	r2, [r7, #16]
 8003da0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	f000 8098 	beq.w	8003ee0 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8003db0:	4a54      	ldr	r2, [pc, #336]	@ (8003f04 <HAL_GPIO_Init+0x2c8>)
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	089b      	lsrs	r3, r3, #2
 8003db6:	3302      	adds	r3, #2
 8003db8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dbc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	f003 0303 	and.w	r3, r3, #3
 8003dc4:	009b      	lsls	r3, r3, #2
 8003dc6:	220f      	movs	r2, #15
 8003dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dcc:	43db      	mvns	r3, r3
 8003dce:	693a      	ldr	r2, [r7, #16]
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003dda:	d019      	beq.n	8003e10 <HAL_GPIO_Init+0x1d4>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	4a4a      	ldr	r2, [pc, #296]	@ (8003f08 <HAL_GPIO_Init+0x2cc>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d013      	beq.n	8003e0c <HAL_GPIO_Init+0x1d0>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	4a49      	ldr	r2, [pc, #292]	@ (8003f0c <HAL_GPIO_Init+0x2d0>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d00d      	beq.n	8003e08 <HAL_GPIO_Init+0x1cc>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	4a48      	ldr	r2, [pc, #288]	@ (8003f10 <HAL_GPIO_Init+0x2d4>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d007      	beq.n	8003e04 <HAL_GPIO_Init+0x1c8>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	4a47      	ldr	r2, [pc, #284]	@ (8003f14 <HAL_GPIO_Init+0x2d8>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d101      	bne.n	8003e00 <HAL_GPIO_Init+0x1c4>
 8003dfc:	2304      	movs	r3, #4
 8003dfe:	e008      	b.n	8003e12 <HAL_GPIO_Init+0x1d6>
 8003e00:	2307      	movs	r3, #7
 8003e02:	e006      	b.n	8003e12 <HAL_GPIO_Init+0x1d6>
 8003e04:	2303      	movs	r3, #3
 8003e06:	e004      	b.n	8003e12 <HAL_GPIO_Init+0x1d6>
 8003e08:	2302      	movs	r3, #2
 8003e0a:	e002      	b.n	8003e12 <HAL_GPIO_Init+0x1d6>
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	e000      	b.n	8003e12 <HAL_GPIO_Init+0x1d6>
 8003e10:	2300      	movs	r3, #0
 8003e12:	697a      	ldr	r2, [r7, #20]
 8003e14:	f002 0203 	and.w	r2, r2, #3
 8003e18:	0092      	lsls	r2, r2, #2
 8003e1a:	4093      	lsls	r3, r2
 8003e1c:	693a      	ldr	r2, [r7, #16]
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003e22:	4938      	ldr	r1, [pc, #224]	@ (8003f04 <HAL_GPIO_Init+0x2c8>)
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	089b      	lsrs	r3, r3, #2
 8003e28:	3302      	adds	r3, #2
 8003e2a:	693a      	ldr	r2, [r7, #16]
 8003e2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003e30:	4b39      	ldr	r3, [pc, #228]	@ (8003f18 <HAL_GPIO_Init+0x2dc>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	43db      	mvns	r3, r3
 8003e3a:	693a      	ldr	r2, [r7, #16]
 8003e3c:	4013      	ands	r3, r2
 8003e3e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d003      	beq.n	8003e54 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003e4c:	693a      	ldr	r2, [r7, #16]
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	4313      	orrs	r3, r2
 8003e52:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003e54:	4a30      	ldr	r2, [pc, #192]	@ (8003f18 <HAL_GPIO_Init+0x2dc>)
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003e5a:	4b2f      	ldr	r3, [pc, #188]	@ (8003f18 <HAL_GPIO_Init+0x2dc>)
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	43db      	mvns	r3, r3
 8003e64:	693a      	ldr	r2, [r7, #16]
 8003e66:	4013      	ands	r3, r2
 8003e68:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d003      	beq.n	8003e7e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8003e76:	693a      	ldr	r2, [r7, #16]
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003e7e:	4a26      	ldr	r2, [pc, #152]	@ (8003f18 <HAL_GPIO_Init+0x2dc>)
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003e84:	4b24      	ldr	r3, [pc, #144]	@ (8003f18 <HAL_GPIO_Init+0x2dc>)
 8003e86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	43db      	mvns	r3, r3
 8003e90:	693a      	ldr	r2, [r7, #16]
 8003e92:	4013      	ands	r3, r2
 8003e94:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d003      	beq.n	8003eaa <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8003ea2:	693a      	ldr	r2, [r7, #16]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003eaa:	4a1b      	ldr	r2, [pc, #108]	@ (8003f18 <HAL_GPIO_Init+0x2dc>)
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 8003eb2:	4b19      	ldr	r3, [pc, #100]	@ (8003f18 <HAL_GPIO_Init+0x2dc>)
 8003eb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003eb8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	43db      	mvns	r3, r3
 8003ebe:	693a      	ldr	r2, [r7, #16]
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d003      	beq.n	8003ed8 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8003ed0:	693a      	ldr	r2, [r7, #16]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003ed8:	4a0f      	ldr	r2, [pc, #60]	@ (8003f18 <HAL_GPIO_Init+0x2dc>)
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	3301      	adds	r3, #1
 8003ee4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	fa22 f303 	lsr.w	r3, r2, r3
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	f47f aeab 	bne.w	8003c4c <HAL_GPIO_Init+0x10>
  }
}
 8003ef6:	bf00      	nop
 8003ef8:	bf00      	nop
 8003efa:	371c      	adds	r7, #28
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr
 8003f04:	40010000 	.word	0x40010000
 8003f08:	48000400 	.word	0x48000400
 8003f0c:	48000800 	.word	0x48000800
 8003f10:	48000c00 	.word	0x48000c00
 8003f14:	48001000 	.word	0x48001000
 8003f18:	58000800 	.word	0x58000800

08003f1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b083      	sub	sp, #12
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
 8003f24:	460b      	mov	r3, r1
 8003f26:	807b      	strh	r3, [r7, #2]
 8003f28:	4613      	mov	r3, r2
 8003f2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003f2c:	787b      	ldrb	r3, [r7, #1]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d003      	beq.n	8003f3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003f32:	887a      	ldrh	r2, [r7, #2]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003f38:	e002      	b.n	8003f40 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003f3a:	887a      	ldrh	r2, [r7, #2]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003f40:	bf00      	nop
 8003f42:	370c      	adds	r7, #12
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr

08003f4c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b082      	sub	sp, #8
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	4603      	mov	r3, r0
 8003f54:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003f56:	4b08      	ldr	r3, [pc, #32]	@ (8003f78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f58:	68da      	ldr	r2, [r3, #12]
 8003f5a:	88fb      	ldrh	r3, [r7, #6]
 8003f5c:	4013      	ands	r3, r2
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d006      	beq.n	8003f70 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003f62:	4a05      	ldr	r2, [pc, #20]	@ (8003f78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f64:	88fb      	ldrh	r3, [r7, #6]
 8003f66:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003f68:	88fb      	ldrh	r3, [r7, #6]
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f7fd faf5 	bl	800155a <HAL_GPIO_EXTI_Callback>
  }
}
 8003f70:	bf00      	nop
 8003f72:	3708      	adds	r7, #8
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}
 8003f78:	58000800 	.word	0x58000800

08003f7c <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b082      	sub	sp, #8
 8003f80:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8003f82:	4b0a      	ldr	r3, [pc, #40]	@ (8003fac <HAL_HSEM_IRQHandler+0x30>)
 8003f84:	68db      	ldr	r3, [r3, #12]
 8003f86:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8003f88:	4b08      	ldr	r3, [pc, #32]	@ (8003fac <HAL_HSEM_IRQHandler+0x30>)
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	43db      	mvns	r3, r3
 8003f90:	4906      	ldr	r1, [pc, #24]	@ (8003fac <HAL_HSEM_IRQHandler+0x30>)
 8003f92:	4013      	ands	r3, r2
 8003f94:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8003f96:	4a05      	ldr	r2, [pc, #20]	@ (8003fac <HAL_HSEM_IRQHandler+0x30>)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	f000 f807 	bl	8003fb0 <HAL_HSEM_FreeCallback>
}
 8003fa2:	bf00      	nop
 8003fa4:	3708      	adds	r7, #8
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}
 8003faa:	bf00      	nop
 8003fac:	58001500 	.word	0x58001500

08003fb0 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b083      	sub	sp, #12
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8003fb8:	bf00      	nop
 8003fba:	370c      	adds	r7, #12
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc2:	4770      	bx	lr

08003fc4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b082      	sub	sp, #8
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d101      	bne.n	8003fd6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e08d      	b.n	80040f2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d106      	bne.n	8003ff0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f000 f885 	bl	80040fa <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2224      	movs	r2, #36	@ 0x24
 8003ff4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f022 0201 	bic.w	r2, r2, #1
 8004006:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	685a      	ldr	r2, [r3, #4]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004014:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	689a      	ldr	r2, [r3, #8]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004024:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	68db      	ldr	r3, [r3, #12]
 800402a:	2b01      	cmp	r3, #1
 800402c:	d107      	bne.n	800403e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	689a      	ldr	r2, [r3, #8]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800403a:	609a      	str	r2, [r3, #8]
 800403c:	e006      	b.n	800404c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	689a      	ldr	r2, [r3, #8]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800404a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	2b02      	cmp	r3, #2
 8004052:	d108      	bne.n	8004066 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	685a      	ldr	r2, [r3, #4]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004062:	605a      	str	r2, [r3, #4]
 8004064:	e007      	b.n	8004076 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	685a      	ldr	r2, [r3, #4]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004074:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	687a      	ldr	r2, [r7, #4]
 800407e:	6812      	ldr	r2, [r2, #0]
 8004080:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004084:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004088:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	68da      	ldr	r2, [r3, #12]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004098:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	691a      	ldr	r2, [r3, #16]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	695b      	ldr	r3, [r3, #20]
 80040a2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	699b      	ldr	r3, [r3, #24]
 80040aa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	430a      	orrs	r2, r1
 80040b2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	69d9      	ldr	r1, [r3, #28]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6a1a      	ldr	r2, [r3, #32]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	430a      	orrs	r2, r1
 80040c2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f042 0201 	orr.w	r2, r2, #1
 80040d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2200      	movs	r2, #0
 80040d8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2220      	movs	r2, #32
 80040de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2200      	movs	r2, #0
 80040ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80040f0:	2300      	movs	r3, #0
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3708      	adds	r7, #8
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}

080040fa <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 80040fa:	b480      	push	{r7}
 80040fc:	b083      	sub	sp, #12
 80040fe:	af00      	add	r7, sp, #0
 8004100:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8004102:	bf00      	nop
 8004104:	370c      	adds	r7, #12
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr
	...

08004110 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b088      	sub	sp, #32
 8004114:	af02      	add	r7, sp, #8
 8004116:	60f8      	str	r0, [r7, #12]
 8004118:	4608      	mov	r0, r1
 800411a:	4611      	mov	r1, r2
 800411c:	461a      	mov	r2, r3
 800411e:	4603      	mov	r3, r0
 8004120:	817b      	strh	r3, [r7, #10]
 8004122:	460b      	mov	r3, r1
 8004124:	813b      	strh	r3, [r7, #8]
 8004126:	4613      	mov	r3, r2
 8004128:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004130:	b2db      	uxtb	r3, r3
 8004132:	2b20      	cmp	r3, #32
 8004134:	f040 80f9 	bne.w	800432a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004138:	6a3b      	ldr	r3, [r7, #32]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d002      	beq.n	8004144 <HAL_I2C_Mem_Write+0x34>
 800413e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004140:	2b00      	cmp	r3, #0
 8004142:	d105      	bne.n	8004150 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800414a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800414c:	2301      	movs	r3, #1
 800414e:	e0ed      	b.n	800432c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004156:	2b01      	cmp	r3, #1
 8004158:	d101      	bne.n	800415e <HAL_I2C_Mem_Write+0x4e>
 800415a:	2302      	movs	r3, #2
 800415c:	e0e6      	b.n	800432c <HAL_I2C_Mem_Write+0x21c>
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2201      	movs	r2, #1
 8004162:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004166:	f7ff f879 	bl	800325c <HAL_GetTick>
 800416a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	9300      	str	r3, [sp, #0]
 8004170:	2319      	movs	r3, #25
 8004172:	2201      	movs	r2, #1
 8004174:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004178:	68f8      	ldr	r0, [r7, #12]
 800417a:	f000 f955 	bl	8004428 <I2C_WaitOnFlagUntilTimeout>
 800417e:	4603      	mov	r3, r0
 8004180:	2b00      	cmp	r3, #0
 8004182:	d001      	beq.n	8004188 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004184:	2301      	movs	r3, #1
 8004186:	e0d1      	b.n	800432c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2221      	movs	r2, #33	@ 0x21
 800418c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2240      	movs	r2, #64	@ 0x40
 8004194:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2200      	movs	r2, #0
 800419c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	6a3a      	ldr	r2, [r7, #32]
 80041a2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80041a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2200      	movs	r2, #0
 80041ae:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80041b0:	88f8      	ldrh	r0, [r7, #6]
 80041b2:	893a      	ldrh	r2, [r7, #8]
 80041b4:	8979      	ldrh	r1, [r7, #10]
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	9301      	str	r3, [sp, #4]
 80041ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041bc:	9300      	str	r3, [sp, #0]
 80041be:	4603      	mov	r3, r0
 80041c0:	68f8      	ldr	r0, [r7, #12]
 80041c2:	f000 f8b9 	bl	8004338 <I2C_RequestMemoryWrite>
 80041c6:	4603      	mov	r3, r0
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d005      	beq.n	80041d8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2200      	movs	r2, #0
 80041d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	e0a9      	b.n	800432c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041dc:	b29b      	uxth	r3, r3
 80041de:	2bff      	cmp	r3, #255	@ 0xff
 80041e0:	d90e      	bls.n	8004200 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	22ff      	movs	r2, #255	@ 0xff
 80041e6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041ec:	b2da      	uxtb	r2, r3
 80041ee:	8979      	ldrh	r1, [r7, #10]
 80041f0:	2300      	movs	r3, #0
 80041f2:	9300      	str	r3, [sp, #0]
 80041f4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80041f8:	68f8      	ldr	r0, [r7, #12]
 80041fa:	f000 fad9 	bl	80047b0 <I2C_TransferConfig>
 80041fe:	e00f      	b.n	8004220 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004204:	b29a      	uxth	r2, r3
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800420e:	b2da      	uxtb	r2, r3
 8004210:	8979      	ldrh	r1, [r7, #10]
 8004212:	2300      	movs	r3, #0
 8004214:	9300      	str	r3, [sp, #0]
 8004216:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800421a:	68f8      	ldr	r0, [r7, #12]
 800421c:	f000 fac8 	bl	80047b0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004220:	697a      	ldr	r2, [r7, #20]
 8004222:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004224:	68f8      	ldr	r0, [r7, #12]
 8004226:	f000 f958 	bl	80044da <I2C_WaitOnTXISFlagUntilTimeout>
 800422a:	4603      	mov	r3, r0
 800422c:	2b00      	cmp	r3, #0
 800422e:	d001      	beq.n	8004234 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	e07b      	b.n	800432c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004238:	781a      	ldrb	r2, [r3, #0]
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004244:	1c5a      	adds	r2, r3, #1
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800424e:	b29b      	uxth	r3, r3
 8004250:	3b01      	subs	r3, #1
 8004252:	b29a      	uxth	r2, r3
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800425c:	3b01      	subs	r3, #1
 800425e:	b29a      	uxth	r2, r3
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004268:	b29b      	uxth	r3, r3
 800426a:	2b00      	cmp	r3, #0
 800426c:	d034      	beq.n	80042d8 <HAL_I2C_Mem_Write+0x1c8>
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004272:	2b00      	cmp	r3, #0
 8004274:	d130      	bne.n	80042d8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	9300      	str	r3, [sp, #0]
 800427a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800427c:	2200      	movs	r2, #0
 800427e:	2180      	movs	r1, #128	@ 0x80
 8004280:	68f8      	ldr	r0, [r7, #12]
 8004282:	f000 f8d1 	bl	8004428 <I2C_WaitOnFlagUntilTimeout>
 8004286:	4603      	mov	r3, r0
 8004288:	2b00      	cmp	r3, #0
 800428a:	d001      	beq.n	8004290 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	e04d      	b.n	800432c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004294:	b29b      	uxth	r3, r3
 8004296:	2bff      	cmp	r3, #255	@ 0xff
 8004298:	d90e      	bls.n	80042b8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	22ff      	movs	r2, #255	@ 0xff
 800429e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042a4:	b2da      	uxtb	r2, r3
 80042a6:	8979      	ldrh	r1, [r7, #10]
 80042a8:	2300      	movs	r3, #0
 80042aa:	9300      	str	r3, [sp, #0]
 80042ac:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80042b0:	68f8      	ldr	r0, [r7, #12]
 80042b2:	f000 fa7d 	bl	80047b0 <I2C_TransferConfig>
 80042b6:	e00f      	b.n	80042d8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042bc:	b29a      	uxth	r2, r3
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042c6:	b2da      	uxtb	r2, r3
 80042c8:	8979      	ldrh	r1, [r7, #10]
 80042ca:	2300      	movs	r3, #0
 80042cc:	9300      	str	r3, [sp, #0]
 80042ce:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80042d2:	68f8      	ldr	r0, [r7, #12]
 80042d4:	f000 fa6c 	bl	80047b0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042dc:	b29b      	uxth	r3, r3
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d19e      	bne.n	8004220 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042e2:	697a      	ldr	r2, [r7, #20]
 80042e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80042e6:	68f8      	ldr	r0, [r7, #12]
 80042e8:	f000 f93e 	bl	8004568 <I2C_WaitOnSTOPFlagUntilTimeout>
 80042ec:	4603      	mov	r3, r0
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d001      	beq.n	80042f6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e01a      	b.n	800432c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	2220      	movs	r2, #32
 80042fc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	6859      	ldr	r1, [r3, #4]
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	4b0a      	ldr	r3, [pc, #40]	@ (8004334 <HAL_I2C_Mem_Write+0x224>)
 800430a:	400b      	ands	r3, r1
 800430c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2220      	movs	r2, #32
 8004312:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2200      	movs	r2, #0
 800431a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2200      	movs	r2, #0
 8004322:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004326:	2300      	movs	r3, #0
 8004328:	e000      	b.n	800432c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800432a:	2302      	movs	r3, #2
  }
}
 800432c:	4618      	mov	r0, r3
 800432e:	3718      	adds	r7, #24
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}
 8004334:	fe00e800 	.word	0xfe00e800

08004338 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b086      	sub	sp, #24
 800433c:	af02      	add	r7, sp, #8
 800433e:	60f8      	str	r0, [r7, #12]
 8004340:	4608      	mov	r0, r1
 8004342:	4611      	mov	r1, r2
 8004344:	461a      	mov	r2, r3
 8004346:	4603      	mov	r3, r0
 8004348:	817b      	strh	r3, [r7, #10]
 800434a:	460b      	mov	r3, r1
 800434c:	813b      	strh	r3, [r7, #8]
 800434e:	4613      	mov	r3, r2
 8004350:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004352:	88fb      	ldrh	r3, [r7, #6]
 8004354:	b2da      	uxtb	r2, r3
 8004356:	8979      	ldrh	r1, [r7, #10]
 8004358:	4b20      	ldr	r3, [pc, #128]	@ (80043dc <I2C_RequestMemoryWrite+0xa4>)
 800435a:	9300      	str	r3, [sp, #0]
 800435c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004360:	68f8      	ldr	r0, [r7, #12]
 8004362:	f000 fa25 	bl	80047b0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004366:	69fa      	ldr	r2, [r7, #28]
 8004368:	69b9      	ldr	r1, [r7, #24]
 800436a:	68f8      	ldr	r0, [r7, #12]
 800436c:	f000 f8b5 	bl	80044da <I2C_WaitOnTXISFlagUntilTimeout>
 8004370:	4603      	mov	r3, r0
 8004372:	2b00      	cmp	r3, #0
 8004374:	d001      	beq.n	800437a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	e02c      	b.n	80043d4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800437a:	88fb      	ldrh	r3, [r7, #6]
 800437c:	2b01      	cmp	r3, #1
 800437e:	d105      	bne.n	800438c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004380:	893b      	ldrh	r3, [r7, #8]
 8004382:	b2da      	uxtb	r2, r3
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	629a      	str	r2, [r3, #40]	@ 0x28
 800438a:	e015      	b.n	80043b8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800438c:	893b      	ldrh	r3, [r7, #8]
 800438e:	0a1b      	lsrs	r3, r3, #8
 8004390:	b29b      	uxth	r3, r3
 8004392:	b2da      	uxtb	r2, r3
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800439a:	69fa      	ldr	r2, [r7, #28]
 800439c:	69b9      	ldr	r1, [r7, #24]
 800439e:	68f8      	ldr	r0, [r7, #12]
 80043a0:	f000 f89b 	bl	80044da <I2C_WaitOnTXISFlagUntilTimeout>
 80043a4:	4603      	mov	r3, r0
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d001      	beq.n	80043ae <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	e012      	b.n	80043d4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80043ae:	893b      	ldrh	r3, [r7, #8]
 80043b0:	b2da      	uxtb	r2, r3
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80043b8:	69fb      	ldr	r3, [r7, #28]
 80043ba:	9300      	str	r3, [sp, #0]
 80043bc:	69bb      	ldr	r3, [r7, #24]
 80043be:	2200      	movs	r2, #0
 80043c0:	2180      	movs	r1, #128	@ 0x80
 80043c2:	68f8      	ldr	r0, [r7, #12]
 80043c4:	f000 f830 	bl	8004428 <I2C_WaitOnFlagUntilTimeout>
 80043c8:	4603      	mov	r3, r0
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d001      	beq.n	80043d2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	e000      	b.n	80043d4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80043d2:	2300      	movs	r3, #0
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	3710      	adds	r7, #16
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}
 80043dc:	80002000 	.word	0x80002000

080043e0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b083      	sub	sp, #12
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	699b      	ldr	r3, [r3, #24]
 80043ee:	f003 0302 	and.w	r3, r3, #2
 80043f2:	2b02      	cmp	r3, #2
 80043f4:	d103      	bne.n	80043fe <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	2200      	movs	r2, #0
 80043fc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	699b      	ldr	r3, [r3, #24]
 8004404:	f003 0301 	and.w	r3, r3, #1
 8004408:	2b01      	cmp	r3, #1
 800440a:	d007      	beq.n	800441c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	699a      	ldr	r2, [r3, #24]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f042 0201 	orr.w	r2, r2, #1
 800441a:	619a      	str	r2, [r3, #24]
  }
}
 800441c:	bf00      	nop
 800441e:	370c      	adds	r7, #12
 8004420:	46bd      	mov	sp, r7
 8004422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004426:	4770      	bx	lr

08004428 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b084      	sub	sp, #16
 800442c:	af00      	add	r7, sp, #0
 800442e:	60f8      	str	r0, [r7, #12]
 8004430:	60b9      	str	r1, [r7, #8]
 8004432:	603b      	str	r3, [r7, #0]
 8004434:	4613      	mov	r3, r2
 8004436:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004438:	e03b      	b.n	80044b2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800443a:	69ba      	ldr	r2, [r7, #24]
 800443c:	6839      	ldr	r1, [r7, #0]
 800443e:	68f8      	ldr	r0, [r7, #12]
 8004440:	f000 f8d6 	bl	80045f0 <I2C_IsErrorOccurred>
 8004444:	4603      	mov	r3, r0
 8004446:	2b00      	cmp	r3, #0
 8004448:	d001      	beq.n	800444e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	e041      	b.n	80044d2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004454:	d02d      	beq.n	80044b2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004456:	f7fe ff01 	bl	800325c <HAL_GetTick>
 800445a:	4602      	mov	r2, r0
 800445c:	69bb      	ldr	r3, [r7, #24]
 800445e:	1ad3      	subs	r3, r2, r3
 8004460:	683a      	ldr	r2, [r7, #0]
 8004462:	429a      	cmp	r2, r3
 8004464:	d302      	bcc.n	800446c <I2C_WaitOnFlagUntilTimeout+0x44>
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d122      	bne.n	80044b2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	699a      	ldr	r2, [r3, #24]
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	4013      	ands	r3, r2
 8004476:	68ba      	ldr	r2, [r7, #8]
 8004478:	429a      	cmp	r2, r3
 800447a:	bf0c      	ite	eq
 800447c:	2301      	moveq	r3, #1
 800447e:	2300      	movne	r3, #0
 8004480:	b2db      	uxtb	r3, r3
 8004482:	461a      	mov	r2, r3
 8004484:	79fb      	ldrb	r3, [r7, #7]
 8004486:	429a      	cmp	r2, r3
 8004488:	d113      	bne.n	80044b2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800448e:	f043 0220 	orr.w	r2, r3, #32
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2220      	movs	r2, #32
 800449a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2200      	movs	r2, #0
 80044a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2200      	movs	r2, #0
 80044aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e00f      	b.n	80044d2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	699a      	ldr	r2, [r3, #24]
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	4013      	ands	r3, r2
 80044bc:	68ba      	ldr	r2, [r7, #8]
 80044be:	429a      	cmp	r2, r3
 80044c0:	bf0c      	ite	eq
 80044c2:	2301      	moveq	r3, #1
 80044c4:	2300      	movne	r3, #0
 80044c6:	b2db      	uxtb	r3, r3
 80044c8:	461a      	mov	r2, r3
 80044ca:	79fb      	ldrb	r3, [r7, #7]
 80044cc:	429a      	cmp	r2, r3
 80044ce:	d0b4      	beq.n	800443a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80044d0:	2300      	movs	r3, #0
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3710      	adds	r7, #16
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}

080044da <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80044da:	b580      	push	{r7, lr}
 80044dc:	b084      	sub	sp, #16
 80044de:	af00      	add	r7, sp, #0
 80044e0:	60f8      	str	r0, [r7, #12]
 80044e2:	60b9      	str	r1, [r7, #8]
 80044e4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80044e6:	e033      	b.n	8004550 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80044e8:	687a      	ldr	r2, [r7, #4]
 80044ea:	68b9      	ldr	r1, [r7, #8]
 80044ec:	68f8      	ldr	r0, [r7, #12]
 80044ee:	f000 f87f 	bl	80045f0 <I2C_IsErrorOccurred>
 80044f2:	4603      	mov	r3, r0
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d001      	beq.n	80044fc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	e031      	b.n	8004560 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004502:	d025      	beq.n	8004550 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004504:	f7fe feaa 	bl	800325c <HAL_GetTick>
 8004508:	4602      	mov	r2, r0
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	1ad3      	subs	r3, r2, r3
 800450e:	68ba      	ldr	r2, [r7, #8]
 8004510:	429a      	cmp	r2, r3
 8004512:	d302      	bcc.n	800451a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d11a      	bne.n	8004550 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	699b      	ldr	r3, [r3, #24]
 8004520:	f003 0302 	and.w	r3, r3, #2
 8004524:	2b02      	cmp	r3, #2
 8004526:	d013      	beq.n	8004550 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800452c:	f043 0220 	orr.w	r2, r3, #32
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2220      	movs	r2, #32
 8004538:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2200      	movs	r2, #0
 8004540:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2200      	movs	r2, #0
 8004548:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800454c:	2301      	movs	r3, #1
 800454e:	e007      	b.n	8004560 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	699b      	ldr	r3, [r3, #24]
 8004556:	f003 0302 	and.w	r3, r3, #2
 800455a:	2b02      	cmp	r3, #2
 800455c:	d1c4      	bne.n	80044e8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800455e:	2300      	movs	r3, #0
}
 8004560:	4618      	mov	r0, r3
 8004562:	3710      	adds	r7, #16
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}

08004568 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b084      	sub	sp, #16
 800456c:	af00      	add	r7, sp, #0
 800456e:	60f8      	str	r0, [r7, #12]
 8004570:	60b9      	str	r1, [r7, #8]
 8004572:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004574:	e02f      	b.n	80045d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	68b9      	ldr	r1, [r7, #8]
 800457a:	68f8      	ldr	r0, [r7, #12]
 800457c:	f000 f838 	bl	80045f0 <I2C_IsErrorOccurred>
 8004580:	4603      	mov	r3, r0
 8004582:	2b00      	cmp	r3, #0
 8004584:	d001      	beq.n	800458a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	e02d      	b.n	80045e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800458a:	f7fe fe67 	bl	800325c <HAL_GetTick>
 800458e:	4602      	mov	r2, r0
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	1ad3      	subs	r3, r2, r3
 8004594:	68ba      	ldr	r2, [r7, #8]
 8004596:	429a      	cmp	r2, r3
 8004598:	d302      	bcc.n	80045a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d11a      	bne.n	80045d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	699b      	ldr	r3, [r3, #24]
 80045a6:	f003 0320 	and.w	r3, r3, #32
 80045aa:	2b20      	cmp	r3, #32
 80045ac:	d013      	beq.n	80045d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045b2:	f043 0220 	orr.w	r2, r3, #32
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2220      	movs	r2, #32
 80045be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2200      	movs	r2, #0
 80045c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2200      	movs	r2, #0
 80045ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	e007      	b.n	80045e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	699b      	ldr	r3, [r3, #24]
 80045dc:	f003 0320 	and.w	r3, r3, #32
 80045e0:	2b20      	cmp	r3, #32
 80045e2:	d1c8      	bne.n	8004576 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80045e4:	2300      	movs	r3, #0
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3710      	adds	r7, #16
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}
	...

080045f0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b08a      	sub	sp, #40	@ 0x28
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	60f8      	str	r0, [r7, #12]
 80045f8:	60b9      	str	r1, [r7, #8]
 80045fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045fc:	2300      	movs	r3, #0
 80045fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	699b      	ldr	r3, [r3, #24]
 8004608:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800460a:	2300      	movs	r3, #0
 800460c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004612:	69bb      	ldr	r3, [r7, #24]
 8004614:	f003 0310 	and.w	r3, r3, #16
 8004618:	2b00      	cmp	r3, #0
 800461a:	d068      	beq.n	80046ee <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	2210      	movs	r2, #16
 8004622:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004624:	e049      	b.n	80046ba <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	f1b3 3fff 	cmp.w	r3, #4294967295
 800462c:	d045      	beq.n	80046ba <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800462e:	f7fe fe15 	bl	800325c <HAL_GetTick>
 8004632:	4602      	mov	r2, r0
 8004634:	69fb      	ldr	r3, [r7, #28]
 8004636:	1ad3      	subs	r3, r2, r3
 8004638:	68ba      	ldr	r2, [r7, #8]
 800463a:	429a      	cmp	r2, r3
 800463c:	d302      	bcc.n	8004644 <I2C_IsErrorOccurred+0x54>
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d13a      	bne.n	80046ba <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800464e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004656:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	699b      	ldr	r3, [r3, #24]
 800465e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004662:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004666:	d121      	bne.n	80046ac <I2C_IsErrorOccurred+0xbc>
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800466e:	d01d      	beq.n	80046ac <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004670:	7cfb      	ldrb	r3, [r7, #19]
 8004672:	2b20      	cmp	r3, #32
 8004674:	d01a      	beq.n	80046ac <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	685a      	ldr	r2, [r3, #4]
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004684:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004686:	f7fe fde9 	bl	800325c <HAL_GetTick>
 800468a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800468c:	e00e      	b.n	80046ac <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800468e:	f7fe fde5 	bl	800325c <HAL_GetTick>
 8004692:	4602      	mov	r2, r0
 8004694:	69fb      	ldr	r3, [r7, #28]
 8004696:	1ad3      	subs	r3, r2, r3
 8004698:	2b19      	cmp	r3, #25
 800469a:	d907      	bls.n	80046ac <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800469c:	6a3b      	ldr	r3, [r7, #32]
 800469e:	f043 0320 	orr.w	r3, r3, #32
 80046a2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80046aa:	e006      	b.n	80046ba <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	699b      	ldr	r3, [r3, #24]
 80046b2:	f003 0320 	and.w	r3, r3, #32
 80046b6:	2b20      	cmp	r3, #32
 80046b8:	d1e9      	bne.n	800468e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	699b      	ldr	r3, [r3, #24]
 80046c0:	f003 0320 	and.w	r3, r3, #32
 80046c4:	2b20      	cmp	r3, #32
 80046c6:	d003      	beq.n	80046d0 <I2C_IsErrorOccurred+0xe0>
 80046c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d0aa      	beq.n	8004626 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80046d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d103      	bne.n	80046e0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	2220      	movs	r2, #32
 80046de:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80046e0:	6a3b      	ldr	r3, [r7, #32]
 80046e2:	f043 0304 	orr.w	r3, r3, #4
 80046e6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	699b      	ldr	r3, [r3, #24]
 80046f4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80046f6:	69bb      	ldr	r3, [r7, #24]
 80046f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d00b      	beq.n	8004718 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004700:	6a3b      	ldr	r3, [r7, #32]
 8004702:	f043 0301 	orr.w	r3, r3, #1
 8004706:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004710:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004718:	69bb      	ldr	r3, [r7, #24]
 800471a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800471e:	2b00      	cmp	r3, #0
 8004720:	d00b      	beq.n	800473a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004722:	6a3b      	ldr	r3, [r7, #32]
 8004724:	f043 0308 	orr.w	r3, r3, #8
 8004728:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004732:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800473a:	69bb      	ldr	r3, [r7, #24]
 800473c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004740:	2b00      	cmp	r3, #0
 8004742:	d00b      	beq.n	800475c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004744:	6a3b      	ldr	r3, [r7, #32]
 8004746:	f043 0302 	orr.w	r3, r3, #2
 800474a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004754:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800475c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004760:	2b00      	cmp	r3, #0
 8004762:	d01c      	beq.n	800479e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004764:	68f8      	ldr	r0, [r7, #12]
 8004766:	f7ff fe3b 	bl	80043e0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	6859      	ldr	r1, [r3, #4]
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681a      	ldr	r2, [r3, #0]
 8004774:	4b0d      	ldr	r3, [pc, #52]	@ (80047ac <I2C_IsErrorOccurred+0x1bc>)
 8004776:	400b      	ands	r3, r1
 8004778:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800477e:	6a3b      	ldr	r3, [r7, #32]
 8004780:	431a      	orrs	r2, r3
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2220      	movs	r2, #32
 800478a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2200      	movs	r2, #0
 8004792:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2200      	movs	r2, #0
 800479a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800479e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3728      	adds	r7, #40	@ 0x28
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}
 80047aa:	bf00      	nop
 80047ac:	fe00e800 	.word	0xfe00e800

080047b0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b087      	sub	sp, #28
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	60f8      	str	r0, [r7, #12]
 80047b8:	607b      	str	r3, [r7, #4]
 80047ba:	460b      	mov	r3, r1
 80047bc:	817b      	strh	r3, [r7, #10]
 80047be:	4613      	mov	r3, r2
 80047c0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80047c2:	897b      	ldrh	r3, [r7, #10]
 80047c4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80047c8:	7a7b      	ldrb	r3, [r7, #9]
 80047ca:	041b      	lsls	r3, r3, #16
 80047cc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80047d0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80047d6:	6a3b      	ldr	r3, [r7, #32]
 80047d8:	4313      	orrs	r3, r2
 80047da:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80047de:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	685a      	ldr	r2, [r3, #4]
 80047e6:	6a3b      	ldr	r3, [r7, #32]
 80047e8:	0d5b      	lsrs	r3, r3, #21
 80047ea:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80047ee:	4b08      	ldr	r3, [pc, #32]	@ (8004810 <I2C_TransferConfig+0x60>)
 80047f0:	430b      	orrs	r3, r1
 80047f2:	43db      	mvns	r3, r3
 80047f4:	ea02 0103 	and.w	r1, r2, r3
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	697a      	ldr	r2, [r7, #20]
 80047fe:	430a      	orrs	r2, r1
 8004800:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004802:	bf00      	nop
 8004804:	371c      	adds	r7, #28
 8004806:	46bd      	mov	sp, r7
 8004808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480c:	4770      	bx	lr
 800480e:	bf00      	nop
 8004810:	03ff63ff 	.word	0x03ff63ff

08004814 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b084      	sub	sp, #16
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 800481c:	2300      	movs	r3, #0
 800481e:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d01e      	beq.n	8004864 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8004826:	4b13      	ldr	r3, [pc, #76]	@ (8004874 <HAL_IPCC_Init+0x60>)
 8004828:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004830:	b2db      	uxtb	r3, r3
 8004832:	2b00      	cmp	r3, #0
 8004834:	d102      	bne.n	800483c <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f7fe fb0a 	bl	8002e50 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 800483c:	68b8      	ldr	r0, [r7, #8]
 800483e:	f000 f85b 	bl	80048f8 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f043 1201 	orr.w	r2, r3, #65537	@ 0x10001
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f000 f82c 	bl	80048ac <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2200      	movs	r2, #0
 8004858:	635a      	str	r2, [r3, #52]	@ 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2201      	movs	r2, #1
 800485e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 8004862:	e001      	b.n	8004868 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8004868:	7bfb      	ldrb	r3, [r7, #15]
}
 800486a:	4618      	mov	r0, r3
 800486c:	3710      	adds	r7, #16
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}
 8004872:	bf00      	nop
 8004874:	58000c00 	.word	0x58000c00

08004878 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8004878:	b480      	push	{r7}
 800487a:	b085      	sub	sp, #20
 800487c:	af00      	add	r7, sp, #0
 800487e:	60f8      	str	r0, [r7, #12]
 8004880:	60b9      	str	r1, [r7, #8]
 8004882:	4613      	mov	r3, r2
 8004884:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8004886:	bf00      	nop
 8004888:	3714      	adds	r7, #20
 800488a:	46bd      	mov	sp, r7
 800488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004890:	4770      	bx	lr

08004892 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8004892:	b480      	push	{r7}
 8004894:	b085      	sub	sp, #20
 8004896:	af00      	add	r7, sp, #0
 8004898:	60f8      	str	r0, [r7, #12]
 800489a:	60b9      	str	r1, [r7, #8]
 800489c:	4613      	mov	r3, r2
 800489e:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 80048a0:	bf00      	nop
 80048a2:	3714      	adds	r7, #20
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr

080048ac <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b085      	sub	sp, #20
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 80048b4:	2300      	movs	r3, #0
 80048b6:	60fb      	str	r3, [r7, #12]
 80048b8:	e00f      	b.n	80048da <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 80048ba:	687a      	ldr	r2, [r7, #4]
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	009b      	lsls	r3, r3, #2
 80048c0:	4413      	add	r3, r2
 80048c2:	4a0b      	ldr	r2, [pc, #44]	@ (80048f0 <IPCC_SetDefaultCallbacks+0x44>)
 80048c4:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 80048c6:	687a      	ldr	r2, [r7, #4]
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	3306      	adds	r3, #6
 80048cc:	009b      	lsls	r3, r3, #2
 80048ce:	4413      	add	r3, r2
 80048d0:	4a08      	ldr	r2, [pc, #32]	@ (80048f4 <IPCC_SetDefaultCallbacks+0x48>)
 80048d2:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	3301      	adds	r3, #1
 80048d8:	60fb      	str	r3, [r7, #12]
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2b05      	cmp	r3, #5
 80048de:	d9ec      	bls.n	80048ba <IPCC_SetDefaultCallbacks+0xe>
  }
}
 80048e0:	bf00      	nop
 80048e2:	bf00      	nop
 80048e4:	3714      	adds	r7, #20
 80048e6:	46bd      	mov	sp, r7
 80048e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ec:	4770      	bx	lr
 80048ee:	bf00      	nop
 80048f0:	08004879 	.word	0x08004879
 80048f4:	08004893 	.word	0x08004893

080048f8 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b083      	sub	sp, #12
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2200      	movs	r2, #0
 8004904:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	f04f 123f 	mov.w	r2, #4128831	@ 0x3f003f
 800490c:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	223f      	movs	r2, #63	@ 0x3f
 8004912:	609a      	str	r2, [r3, #8]
}
 8004914:	bf00      	nop
 8004916:	370c      	adds	r7, #12
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr

08004920 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004920:	b480      	push	{r7}
 8004922:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004924:	4b05      	ldr	r3, [pc, #20]	@ (800493c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a04      	ldr	r2, [pc, #16]	@ (800493c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800492a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800492e:	6013      	str	r3, [r2, #0]
}
 8004930:	bf00      	nop
 8004932:	46bd      	mov	sp, r7
 8004934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004938:	4770      	bx	lr
 800493a:	bf00      	nop
 800493c:	58000400 	.word	0x58000400

08004940 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004940:	b480      	push	{r7}
 8004942:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8004944:	4b04      	ldr	r3, [pc, #16]	@ (8004958 <HAL_PWREx_GetVoltageRange+0x18>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 800494c:	4618      	mov	r0, r3
 800494e:	46bd      	mov	sp, r7
 8004950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004954:	4770      	bx	lr
 8004956:	bf00      	nop
 8004958:	58000400 	.word	0x58000400

0800495c <LL_RCC_HSE_IsEnabledDiv2>:
{
 800495c:	b480      	push	{r7}
 800495e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8004960:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800496a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800496e:	d101      	bne.n	8004974 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8004970:	2301      	movs	r3, #1
 8004972:	e000      	b.n	8004976 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8004974:	2300      	movs	r3, #0
}
 8004976:	4618      	mov	r0, r3
 8004978:	46bd      	mov	sp, r7
 800497a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497e:	4770      	bx	lr

08004980 <LL_RCC_HSE_Enable>:
{
 8004980:	b480      	push	{r7}
 8004982:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8004984:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800498e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004992:	6013      	str	r3, [r2, #0]
}
 8004994:	bf00      	nop
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr

0800499e <LL_RCC_HSE_Disable>:
{
 800499e:	b480      	push	{r7}
 80049a0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80049a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80049ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80049b0:	6013      	str	r3, [r2, #0]
}
 80049b2:	bf00      	nop
 80049b4:	46bd      	mov	sp, r7
 80049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ba:	4770      	bx	lr

080049bc <LL_RCC_HSE_IsReady>:
{
 80049bc:	b480      	push	{r7}
 80049be:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80049c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049ca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80049ce:	d101      	bne.n	80049d4 <LL_RCC_HSE_IsReady+0x18>
 80049d0:	2301      	movs	r3, #1
 80049d2:	e000      	b.n	80049d6 <LL_RCC_HSE_IsReady+0x1a>
 80049d4:	2300      	movs	r3, #0
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr

080049e0 <LL_RCC_HSI_Enable>:
{
 80049e0:	b480      	push	{r7}
 80049e2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80049e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80049ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80049f2:	6013      	str	r3, [r2, #0]
}
 80049f4:	bf00      	nop
 80049f6:	46bd      	mov	sp, r7
 80049f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fc:	4770      	bx	lr

080049fe <LL_RCC_HSI_Disable>:
{
 80049fe:	b480      	push	{r7}
 8004a00:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8004a02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004a0c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004a10:	6013      	str	r3, [r2, #0]
}
 8004a12:	bf00      	nop
 8004a14:	46bd      	mov	sp, r7
 8004a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1a:	4770      	bx	lr

08004a1c <LL_RCC_HSI_IsReady>:
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004a20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a2e:	d101      	bne.n	8004a34 <LL_RCC_HSI_IsReady+0x18>
 8004a30:	2301      	movs	r3, #1
 8004a32:	e000      	b.n	8004a36 <LL_RCC_HSI_IsReady+0x1a>
 8004a34:	2300      	movs	r3, #0
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3e:	4770      	bx	lr

08004a40 <LL_RCC_HSI_SetCalibTrimming>:
{
 8004a40:	b480      	push	{r7}
 8004a42:	b083      	sub	sp, #12
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8004a48:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	061b      	lsls	r3, r3, #24
 8004a56:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	604b      	str	r3, [r1, #4]
}
 8004a5e:	bf00      	nop
 8004a60:	370c      	adds	r7, #12
 8004a62:	46bd      	mov	sp, r7
 8004a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a68:	4770      	bx	lr

08004a6a <LL_RCC_HSI48_Enable>:
{
 8004a6a:	b480      	push	{r7}
 8004a6c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8004a6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004a72:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004a76:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004a7a:	f043 0301 	orr.w	r3, r3, #1
 8004a7e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8004a82:	bf00      	nop
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr

08004a8c <LL_RCC_HSI48_Disable>:
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8004a90:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004a94:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004a98:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004a9c:	f023 0301 	bic.w	r3, r3, #1
 8004aa0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8004aa4:	bf00      	nop
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aac:	4770      	bx	lr

08004aae <LL_RCC_HSI48_IsReady>:
{
 8004aae:	b480      	push	{r7}
 8004ab0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8004ab2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ab6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004aba:	f003 0302 	and.w	r3, r3, #2
 8004abe:	2b02      	cmp	r3, #2
 8004ac0:	d101      	bne.n	8004ac6 <LL_RCC_HSI48_IsReady+0x18>
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e000      	b.n	8004ac8 <LL_RCC_HSI48_IsReady+0x1a>
 8004ac6:	2300      	movs	r3, #0
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr

08004ad2 <LL_RCC_LSE_Enable>:
{
 8004ad2:	b480      	push	{r7}
 8004ad4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004ad6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ada:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ade:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004ae2:	f043 0301 	orr.w	r3, r3, #1
 8004ae6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8004aea:	bf00      	nop
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr

08004af4 <LL_RCC_LSE_Disable>:
{
 8004af4:	b480      	push	{r7}
 8004af6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004af8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004afc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b00:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004b04:	f023 0301 	bic.w	r3, r3, #1
 8004b08:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8004b0c:	bf00      	nop
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b14:	4770      	bx	lr

08004b16 <LL_RCC_LSE_EnableBypass>:
{
 8004b16:	b480      	push	{r7}
 8004b18:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004b1a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004b1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b22:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004b26:	f043 0304 	orr.w	r3, r3, #4
 8004b2a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8004b2e:	bf00      	nop
 8004b30:	46bd      	mov	sp, r7
 8004b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b36:	4770      	bx	lr

08004b38 <LL_RCC_LSE_DisableBypass>:
{
 8004b38:	b480      	push	{r7}
 8004b3a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004b3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004b40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b44:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004b48:	f023 0304 	bic.w	r3, r3, #4
 8004b4c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8004b50:	bf00      	nop
 8004b52:	46bd      	mov	sp, r7
 8004b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b58:	4770      	bx	lr

08004b5a <LL_RCC_LSE_IsReady>:
{
 8004b5a:	b480      	push	{r7}
 8004b5c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004b5e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004b62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b66:	f003 0302 	and.w	r3, r3, #2
 8004b6a:	2b02      	cmp	r3, #2
 8004b6c:	d101      	bne.n	8004b72 <LL_RCC_LSE_IsReady+0x18>
 8004b6e:	2301      	movs	r3, #1
 8004b70:	e000      	b.n	8004b74 <LL_RCC_LSE_IsReady+0x1a>
 8004b72:	2300      	movs	r3, #0
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	46bd      	mov	sp, r7
 8004b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7c:	4770      	bx	lr

08004b7e <LL_RCC_LSI1_Enable>:
{
 8004b7e:	b480      	push	{r7}
 8004b80:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004b82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004b86:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b8a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004b8e:	f043 0301 	orr.w	r3, r3, #1
 8004b92:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8004b96:	bf00      	nop
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9e:	4770      	bx	lr

08004ba0 <LL_RCC_LSI1_Disable>:
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004ba4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ba8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004bac:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004bb0:	f023 0301 	bic.w	r3, r3, #1
 8004bb4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8004bb8:	bf00      	nop
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr

08004bc2 <LL_RCC_LSI1_IsReady>:
{
 8004bc2:	b480      	push	{r7}
 8004bc4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8004bc6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004bca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004bce:	f003 0302 	and.w	r3, r3, #2
 8004bd2:	2b02      	cmp	r3, #2
 8004bd4:	d101      	bne.n	8004bda <LL_RCC_LSI1_IsReady+0x18>
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e000      	b.n	8004bdc <LL_RCC_LSI1_IsReady+0x1a>
 8004bda:	2300      	movs	r3, #0
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	46bd      	mov	sp, r7
 8004be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be4:	4770      	bx	lr

08004be6 <LL_RCC_LSI2_Enable>:
{
 8004be6:	b480      	push	{r7}
 8004be8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004bea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004bee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004bf2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004bf6:	f043 0304 	orr.w	r3, r3, #4
 8004bfa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8004bfe:	bf00      	nop
 8004c00:	46bd      	mov	sp, r7
 8004c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c06:	4770      	bx	lr

08004c08 <LL_RCC_LSI2_Disable>:
{
 8004c08:	b480      	push	{r7}
 8004c0a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004c0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004c10:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c14:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004c18:	f023 0304 	bic.w	r3, r3, #4
 8004c1c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8004c20:	bf00      	nop
 8004c22:	46bd      	mov	sp, r7
 8004c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c28:	4770      	bx	lr

08004c2a <LL_RCC_LSI2_IsReady>:
{
 8004c2a:	b480      	push	{r7}
 8004c2c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8004c2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004c32:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c36:	f003 0308 	and.w	r3, r3, #8
 8004c3a:	2b08      	cmp	r3, #8
 8004c3c:	d101      	bne.n	8004c42 <LL_RCC_LSI2_IsReady+0x18>
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e000      	b.n	8004c44 <LL_RCC_LSI2_IsReady+0x1a>
 8004c42:	2300      	movs	r3, #0
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	46bd      	mov	sp, r7
 8004c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4c:	4770      	bx	lr

08004c4e <LL_RCC_LSI2_SetTrimming>:
{
 8004c4e:	b480      	push	{r7}
 8004c50:	b083      	sub	sp, #12
 8004c52:	af00      	add	r7, sp, #0
 8004c54:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8004c56:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004c5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c5e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	021b      	lsls	r3, r3, #8
 8004c66:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8004c70:	bf00      	nop
 8004c72:	370c      	adds	r7, #12
 8004c74:	46bd      	mov	sp, r7
 8004c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7a:	4770      	bx	lr

08004c7c <LL_RCC_MSI_Enable>:
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8004c80:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004c8a:	f043 0301 	orr.w	r3, r3, #1
 8004c8e:	6013      	str	r3, [r2, #0]
}
 8004c90:	bf00      	nop
 8004c92:	46bd      	mov	sp, r7
 8004c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c98:	4770      	bx	lr

08004c9a <LL_RCC_MSI_Disable>:
{
 8004c9a:	b480      	push	{r7}
 8004c9c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8004c9e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004ca8:	f023 0301 	bic.w	r3, r3, #1
 8004cac:	6013      	str	r3, [r2, #0]
}
 8004cae:	bf00      	nop
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb6:	4770      	bx	lr

08004cb8 <LL_RCC_MSI_IsReady>:
{
 8004cb8:	b480      	push	{r7}
 8004cba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8004cbc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f003 0302 	and.w	r3, r3, #2
 8004cc6:	2b02      	cmp	r3, #2
 8004cc8:	d101      	bne.n	8004cce <LL_RCC_MSI_IsReady+0x16>
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e000      	b.n	8004cd0 <LL_RCC_MSI_IsReady+0x18>
 8004cce:	2300      	movs	r3, #0
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd8:	4770      	bx	lr

08004cda <LL_RCC_MSI_SetRange>:
{
 8004cda:	b480      	push	{r7}
 8004cdc:	b083      	sub	sp, #12
 8004cde:	af00      	add	r7, sp, #0
 8004ce0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8004ce2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004cec:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	600b      	str	r3, [r1, #0]
}
 8004cf6:	bf00      	nop
 8004cf8:	370c      	adds	r7, #12
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d00:	4770      	bx	lr

08004d02 <LL_RCC_MSI_GetRange>:
{
 8004d02:	b480      	push	{r7}
 8004d04:	b083      	sub	sp, #12
 8004d06:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8004d08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004d12:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2bb0      	cmp	r3, #176	@ 0xb0
 8004d18:	d901      	bls.n	8004d1e <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8004d1a:	23b0      	movs	r3, #176	@ 0xb0
 8004d1c:	607b      	str	r3, [r7, #4]
  return msiRange;
 8004d1e:	687b      	ldr	r3, [r7, #4]
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	370c      	adds	r7, #12
 8004d24:	46bd      	mov	sp, r7
 8004d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2a:	4770      	bx	lr

08004d2c <LL_RCC_MSI_SetCalibTrimming>:
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b083      	sub	sp, #12
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8004d34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	021b      	lsls	r3, r3, #8
 8004d42:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004d46:	4313      	orrs	r3, r2
 8004d48:	604b      	str	r3, [r1, #4]
}
 8004d4a:	bf00      	nop
 8004d4c:	370c      	adds	r7, #12
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d54:	4770      	bx	lr

08004d56 <LL_RCC_SetSysClkSource>:
{
 8004d56:	b480      	push	{r7}
 8004d58:	b083      	sub	sp, #12
 8004d5a:	af00      	add	r7, sp, #0
 8004d5c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8004d5e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	f023 0203 	bic.w	r2, r3, #3
 8004d68:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	608b      	str	r3, [r1, #8]
}
 8004d72:	bf00      	nop
 8004d74:	370c      	adds	r7, #12
 8004d76:	46bd      	mov	sp, r7
 8004d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7c:	4770      	bx	lr

08004d7e <LL_RCC_GetSysClkSource>:
{
 8004d7e:	b480      	push	{r7}
 8004d80:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004d82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d86:	689b      	ldr	r3, [r3, #8]
 8004d88:	f003 030c 	and.w	r3, r3, #12
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d94:	4770      	bx	lr

08004d96 <LL_RCC_SetAHBPrescaler>:
{
 8004d96:	b480      	push	{r7}
 8004d98:	b083      	sub	sp, #12
 8004d9a:	af00      	add	r7, sp, #0
 8004d9c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8004d9e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004da8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	4313      	orrs	r3, r2
 8004db0:	608b      	str	r3, [r1, #8]
}
 8004db2:	bf00      	nop
 8004db4:	370c      	adds	r7, #12
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr

08004dbe <LL_C2_RCC_SetAHBPrescaler>:
{
 8004dbe:	b480      	push	{r7}
 8004dc0:	b083      	sub	sp, #12
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8004dc6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004dca:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8004dce:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004dd2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8004dde:	bf00      	nop
 8004de0:	370c      	adds	r7, #12
 8004de2:	46bd      	mov	sp, r7
 8004de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de8:	4770      	bx	lr

08004dea <LL_RCC_SetAHB4Prescaler>:
{
 8004dea:	b480      	push	{r7}
 8004dec:	b083      	sub	sp, #12
 8004dee:	af00      	add	r7, sp, #0
 8004df0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8004df2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004df6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8004dfa:	f023 020f 	bic.w	r2, r3, #15
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	091b      	lsrs	r3, r3, #4
 8004e02:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004e06:	4313      	orrs	r3, r2
 8004e08:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8004e0c:	bf00      	nop
 8004e0e:	370c      	adds	r7, #12
 8004e10:	46bd      	mov	sp, r7
 8004e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e16:	4770      	bx	lr

08004e18 <LL_RCC_SetAPB1Prescaler>:
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b083      	sub	sp, #12
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8004e20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004e2a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	4313      	orrs	r3, r2
 8004e32:	608b      	str	r3, [r1, #8]
}
 8004e34:	bf00      	nop
 8004e36:	370c      	adds	r7, #12
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3e:	4770      	bx	lr

08004e40 <LL_RCC_SetAPB2Prescaler>:
{
 8004e40:	b480      	push	{r7}
 8004e42:	b083      	sub	sp, #12
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8004e48:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004e52:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	608b      	str	r3, [r1, #8]
}
 8004e5c:	bf00      	nop
 8004e5e:	370c      	adds	r7, #12
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr

08004e68 <LL_RCC_GetAHBPrescaler>:
{
 8004e68:	b480      	push	{r7}
 8004e6a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004e6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7e:	4770      	bx	lr

08004e80 <LL_RCC_GetAHB4Prescaler>:
{
 8004e80:	b480      	push	{r7}
 8004e82:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8004e84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e88:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8004e8c:	011b      	lsls	r3, r3, #4
 8004e8e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	46bd      	mov	sp, r7
 8004e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9a:	4770      	bx	lr

08004e9c <LL_RCC_GetAPB1Prescaler>:
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004ea0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	46bd      	mov	sp, r7
 8004eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb2:	4770      	bx	lr

08004eb4 <LL_RCC_GetAPB2Prescaler>:
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004eb8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ebc:	689b      	ldr	r3, [r3, #8]
 8004ebe:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eca:	4770      	bx	lr

08004ecc <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8004ed0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004eda:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004ede:	6013      	str	r3, [r2, #0]
}
 8004ee0:	bf00      	nop
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee8:	4770      	bx	lr

08004eea <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8004eea:	b480      	push	{r7}
 8004eec:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004eee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004ef8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004efc:	6013      	str	r3, [r2, #0]
}
 8004efe:	bf00      	nop
 8004f00:	46bd      	mov	sp, r7
 8004f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f06:	4770      	bx	lr

08004f08 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004f0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f16:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004f1a:	d101      	bne.n	8004f20 <LL_RCC_PLL_IsReady+0x18>
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	e000      	b.n	8004f22 <LL_RCC_PLL_IsReady+0x1a>
 8004f20:	2300      	movs	r3, #0
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr

08004f2c <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004f30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f34:	68db      	ldr	r3, [r3, #12]
 8004f36:	0a1b      	lsrs	r3, r3, #8
 8004f38:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f44:	4770      	bx	lr

08004f46 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8004f46:	b480      	push	{r7}
 8004f48:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8004f4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f4e:	68db      	ldr	r3, [r3, #12]
 8004f50:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	46bd      	mov	sp, r7
 8004f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5c:	4770      	bx	lr

08004f5e <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8004f5e:	b480      	push	{r7}
 8004f60:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004f62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f66:	68db      	ldr	r3, [r3, #12]
 8004f68:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f74:	4770      	bx	lr

08004f76 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8004f76:	b480      	push	{r7}
 8004f78:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004f7a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f7e:	68db      	ldr	r3, [r3, #12]
 8004f80:	f003 0303 	and.w	r3, r3, #3
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	46bd      	mov	sp, r7
 8004f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8c:	4770      	bx	lr

08004f8e <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8004f8e:	b480      	push	{r7}
 8004f90:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8004f92:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004fa0:	d101      	bne.n	8004fa6 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	e000      	b.n	8004fa8 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8004fa6:	2300      	movs	r3, #0
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr

08004fb2 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8004fb2:	b480      	push	{r7}
 8004fb4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8004fb6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004fba:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8004fbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fc2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004fc6:	d101      	bne.n	8004fcc <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8004fc8:	2301      	movs	r3, #1
 8004fca:	e000      	b.n	8004fce <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8004fcc:	2300      	movs	r3, #0
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd6:	4770      	bx	lr

08004fd8 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8004fdc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004fe0:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8004fe4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004fe8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004fec:	d101      	bne.n	8004ff2 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8004fee:	2301      	movs	r3, #1
 8004ff0:	e000      	b.n	8004ff4 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8004ff2:	2300      	movs	r3, #0
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffc:	4770      	bx	lr

08004ffe <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8004ffe:	b480      	push	{r7}
 8005000:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8005002:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800500c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005010:	d101      	bne.n	8005016 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8005012:	2301      	movs	r3, #1
 8005014:	e000      	b.n	8005018 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8005016:	2300      	movs	r3, #0
}
 8005018:	4618      	mov	r0, r3
 800501a:	46bd      	mov	sp, r7
 800501c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005020:	4770      	bx	lr

08005022 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8005022:	b480      	push	{r7}
 8005024:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8005026:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005030:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005034:	d101      	bne.n	800503a <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8005036:	2301      	movs	r3, #1
 8005038:	e000      	b.n	800503c <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800503a:	2300      	movs	r3, #0
}
 800503c:	4618      	mov	r0, r3
 800503e:	46bd      	mov	sp, r7
 8005040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005044:	4770      	bx	lr
	...

08005048 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005048:	b590      	push	{r4, r7, lr}
 800504a:	b08d      	sub	sp, #52	@ 0x34
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d101      	bne.n	800505a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	e363      	b.n	8005722 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f003 0320 	and.w	r3, r3, #32
 8005062:	2b00      	cmp	r3, #0
 8005064:	f000 808d 	beq.w	8005182 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005068:	f7ff fe89 	bl	8004d7e <LL_RCC_GetSysClkSource>
 800506c:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800506e:	f7ff ff82 	bl	8004f76 <LL_RCC_PLL_GetMainSource>
 8005072:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005074:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005076:	2b00      	cmp	r3, #0
 8005078:	d005      	beq.n	8005086 <HAL_RCC_OscConfig+0x3e>
 800507a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800507c:	2b0c      	cmp	r3, #12
 800507e:	d147      	bne.n	8005110 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8005080:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005082:	2b01      	cmp	r3, #1
 8005084:	d144      	bne.n	8005110 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	69db      	ldr	r3, [r3, #28]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d101      	bne.n	8005092 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800508e:	2301      	movs	r3, #1
 8005090:	e347      	b.n	8005722 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8005096:	f7ff fe34 	bl	8004d02 <LL_RCC_MSI_GetRange>
 800509a:	4603      	mov	r3, r0
 800509c:	429c      	cmp	r4, r3
 800509e:	d914      	bls.n	80050ca <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050a4:	4618      	mov	r0, r3
 80050a6:	f000 fd2f 	bl	8005b08 <RCC_SetFlashLatencyFromMSIRange>
 80050aa:	4603      	mov	r3, r0
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d001      	beq.n	80050b4 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 80050b0:	2301      	movs	r3, #1
 80050b2:	e336      	b.n	8005722 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050b8:	4618      	mov	r0, r3
 80050ba:	f7ff fe0e 	bl	8004cda <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6a1b      	ldr	r3, [r3, #32]
 80050c2:	4618      	mov	r0, r3
 80050c4:	f7ff fe32 	bl	8004d2c <LL_RCC_MSI_SetCalibTrimming>
 80050c8:	e013      	b.n	80050f2 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050ce:	4618      	mov	r0, r3
 80050d0:	f7ff fe03 	bl	8004cda <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6a1b      	ldr	r3, [r3, #32]
 80050d8:	4618      	mov	r0, r3
 80050da:	f7ff fe27 	bl	8004d2c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050e2:	4618      	mov	r0, r3
 80050e4:	f000 fd10 	bl	8005b08 <RCC_SetFlashLatencyFromMSIRange>
 80050e8:	4603      	mov	r3, r0
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d001      	beq.n	80050f2 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 80050ee:	2301      	movs	r3, #1
 80050f0:	e317      	b.n	8005722 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80050f2:	f000 fcc9 	bl	8005a88 <HAL_RCC_GetHCLKFreq>
 80050f6:	4603      	mov	r3, r0
 80050f8:	4aa4      	ldr	r2, [pc, #656]	@ (800538c <HAL_RCC_OscConfig+0x344>)
 80050fa:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80050fc:	4ba4      	ldr	r3, [pc, #656]	@ (8005390 <HAL_RCC_OscConfig+0x348>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4618      	mov	r0, r3
 8005102:	f7fe f85d 	bl	80031c0 <HAL_InitTick>
 8005106:	4603      	mov	r3, r0
 8005108:	2b00      	cmp	r3, #0
 800510a:	d039      	beq.n	8005180 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 800510c:	2301      	movs	r3, #1
 800510e:	e308      	b.n	8005722 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	69db      	ldr	r3, [r3, #28]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d01e      	beq.n	8005156 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005118:	f7ff fdb0 	bl	8004c7c <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800511c:	f7fe f89e 	bl	800325c <HAL_GetTick>
 8005120:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8005122:	e008      	b.n	8005136 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005124:	f7fe f89a 	bl	800325c <HAL_GetTick>
 8005128:	4602      	mov	r2, r0
 800512a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800512c:	1ad3      	subs	r3, r2, r3
 800512e:	2b02      	cmp	r3, #2
 8005130:	d901      	bls.n	8005136 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005132:	2303      	movs	r3, #3
 8005134:	e2f5      	b.n	8005722 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8005136:	f7ff fdbf 	bl	8004cb8 <LL_RCC_MSI_IsReady>
 800513a:	4603      	mov	r3, r0
 800513c:	2b00      	cmp	r3, #0
 800513e:	d0f1      	beq.n	8005124 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005144:	4618      	mov	r0, r3
 8005146:	f7ff fdc8 	bl	8004cda <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6a1b      	ldr	r3, [r3, #32]
 800514e:	4618      	mov	r0, r3
 8005150:	f7ff fdec 	bl	8004d2c <LL_RCC_MSI_SetCalibTrimming>
 8005154:	e015      	b.n	8005182 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005156:	f7ff fda0 	bl	8004c9a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800515a:	f7fe f87f 	bl	800325c <HAL_GetTick>
 800515e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8005160:	e008      	b.n	8005174 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005162:	f7fe f87b 	bl	800325c <HAL_GetTick>
 8005166:	4602      	mov	r2, r0
 8005168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800516a:	1ad3      	subs	r3, r2, r3
 800516c:	2b02      	cmp	r3, #2
 800516e:	d901      	bls.n	8005174 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005170:	2303      	movs	r3, #3
 8005172:	e2d6      	b.n	8005722 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8005174:	f7ff fda0 	bl	8004cb8 <LL_RCC_MSI_IsReady>
 8005178:	4603      	mov	r3, r0
 800517a:	2b00      	cmp	r3, #0
 800517c:	d1f1      	bne.n	8005162 <HAL_RCC_OscConfig+0x11a>
 800517e:	e000      	b.n	8005182 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8005180:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f003 0301 	and.w	r3, r3, #1
 800518a:	2b00      	cmp	r3, #0
 800518c:	d047      	beq.n	800521e <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800518e:	f7ff fdf6 	bl	8004d7e <LL_RCC_GetSysClkSource>
 8005192:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005194:	f7ff feef 	bl	8004f76 <LL_RCC_PLL_GetMainSource>
 8005198:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800519a:	6a3b      	ldr	r3, [r7, #32]
 800519c:	2b08      	cmp	r3, #8
 800519e:	d005      	beq.n	80051ac <HAL_RCC_OscConfig+0x164>
 80051a0:	6a3b      	ldr	r3, [r7, #32]
 80051a2:	2b0c      	cmp	r3, #12
 80051a4:	d108      	bne.n	80051b8 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80051a6:	69fb      	ldr	r3, [r7, #28]
 80051a8:	2b03      	cmp	r3, #3
 80051aa:	d105      	bne.n	80051b8 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d134      	bne.n	800521e <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80051b4:	2301      	movs	r3, #1
 80051b6:	e2b4      	b.n	8005722 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80051c0:	d102      	bne.n	80051c8 <HAL_RCC_OscConfig+0x180>
 80051c2:	f7ff fbdd 	bl	8004980 <LL_RCC_HSE_Enable>
 80051c6:	e001      	b.n	80051cc <HAL_RCC_OscConfig+0x184>
 80051c8:	f7ff fbe9 	bl	800499e <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d012      	beq.n	80051fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051d4:	f7fe f842 	bl	800325c <HAL_GetTick>
 80051d8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80051da:	e008      	b.n	80051ee <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80051dc:	f7fe f83e 	bl	800325c <HAL_GetTick>
 80051e0:	4602      	mov	r2, r0
 80051e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051e4:	1ad3      	subs	r3, r2, r3
 80051e6:	2b64      	cmp	r3, #100	@ 0x64
 80051e8:	d901      	bls.n	80051ee <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80051ea:	2303      	movs	r3, #3
 80051ec:	e299      	b.n	8005722 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 80051ee:	f7ff fbe5 	bl	80049bc <LL_RCC_HSE_IsReady>
 80051f2:	4603      	mov	r3, r0
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d0f1      	beq.n	80051dc <HAL_RCC_OscConfig+0x194>
 80051f8:	e011      	b.n	800521e <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051fa:	f7fe f82f 	bl	800325c <HAL_GetTick>
 80051fe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8005200:	e008      	b.n	8005214 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005202:	f7fe f82b 	bl	800325c <HAL_GetTick>
 8005206:	4602      	mov	r2, r0
 8005208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800520a:	1ad3      	subs	r3, r2, r3
 800520c:	2b64      	cmp	r3, #100	@ 0x64
 800520e:	d901      	bls.n	8005214 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8005210:	2303      	movs	r3, #3
 8005212:	e286      	b.n	8005722 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8005214:	f7ff fbd2 	bl	80049bc <LL_RCC_HSE_IsReady>
 8005218:	4603      	mov	r3, r0
 800521a:	2b00      	cmp	r3, #0
 800521c:	d1f1      	bne.n	8005202 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f003 0302 	and.w	r3, r3, #2
 8005226:	2b00      	cmp	r3, #0
 8005228:	d04c      	beq.n	80052c4 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800522a:	f7ff fda8 	bl	8004d7e <LL_RCC_GetSysClkSource>
 800522e:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005230:	f7ff fea1 	bl	8004f76 <LL_RCC_PLL_GetMainSource>
 8005234:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8005236:	69bb      	ldr	r3, [r7, #24]
 8005238:	2b04      	cmp	r3, #4
 800523a:	d005      	beq.n	8005248 <HAL_RCC_OscConfig+0x200>
 800523c:	69bb      	ldr	r3, [r7, #24]
 800523e:	2b0c      	cmp	r3, #12
 8005240:	d10e      	bne.n	8005260 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	2b02      	cmp	r3, #2
 8005246:	d10b      	bne.n	8005260 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	68db      	ldr	r3, [r3, #12]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d101      	bne.n	8005254 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8005250:	2301      	movs	r3, #1
 8005252:	e266      	b.n	8005722 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	691b      	ldr	r3, [r3, #16]
 8005258:	4618      	mov	r0, r3
 800525a:	f7ff fbf1 	bl	8004a40 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800525e:	e031      	b.n	80052c4 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	68db      	ldr	r3, [r3, #12]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d019      	beq.n	800529c <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005268:	f7ff fbba 	bl	80049e0 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800526c:	f7fd fff6 	bl	800325c <HAL_GetTick>
 8005270:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8005272:	e008      	b.n	8005286 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005274:	f7fd fff2 	bl	800325c <HAL_GetTick>
 8005278:	4602      	mov	r2, r0
 800527a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800527c:	1ad3      	subs	r3, r2, r3
 800527e:	2b02      	cmp	r3, #2
 8005280:	d901      	bls.n	8005286 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8005282:	2303      	movs	r3, #3
 8005284:	e24d      	b.n	8005722 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8005286:	f7ff fbc9 	bl	8004a1c <LL_RCC_HSI_IsReady>
 800528a:	4603      	mov	r3, r0
 800528c:	2b00      	cmp	r3, #0
 800528e:	d0f1      	beq.n	8005274 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	691b      	ldr	r3, [r3, #16]
 8005294:	4618      	mov	r0, r3
 8005296:	f7ff fbd3 	bl	8004a40 <LL_RCC_HSI_SetCalibTrimming>
 800529a:	e013      	b.n	80052c4 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800529c:	f7ff fbaf 	bl	80049fe <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052a0:	f7fd ffdc 	bl	800325c <HAL_GetTick>
 80052a4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80052a6:	e008      	b.n	80052ba <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80052a8:	f7fd ffd8 	bl	800325c <HAL_GetTick>
 80052ac:	4602      	mov	r2, r0
 80052ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052b0:	1ad3      	subs	r3, r2, r3
 80052b2:	2b02      	cmp	r3, #2
 80052b4:	d901      	bls.n	80052ba <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80052b6:	2303      	movs	r3, #3
 80052b8:	e233      	b.n	8005722 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 80052ba:	f7ff fbaf 	bl	8004a1c <LL_RCC_HSI_IsReady>
 80052be:	4603      	mov	r3, r0
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d1f1      	bne.n	80052a8 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f003 0308 	and.w	r3, r3, #8
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d106      	bne.n	80052de <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80052d8:	2b00      	cmp	r3, #0
 80052da:	f000 80a3 	beq.w	8005424 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	695b      	ldr	r3, [r3, #20]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d076      	beq.n	80053d4 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f003 0310 	and.w	r3, r3, #16
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d046      	beq.n	8005380 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80052f2:	f7ff fc66 	bl	8004bc2 <LL_RCC_LSI1_IsReady>
 80052f6:	4603      	mov	r3, r0
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d113      	bne.n	8005324 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80052fc:	f7ff fc3f 	bl	8004b7e <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005300:	f7fd ffac 	bl	800325c <HAL_GetTick>
 8005304:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8005306:	e008      	b.n	800531a <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005308:	f7fd ffa8 	bl	800325c <HAL_GetTick>
 800530c:	4602      	mov	r2, r0
 800530e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005310:	1ad3      	subs	r3, r2, r3
 8005312:	2b02      	cmp	r3, #2
 8005314:	d901      	bls.n	800531a <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8005316:	2303      	movs	r3, #3
 8005318:	e203      	b.n	8005722 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800531a:	f7ff fc52 	bl	8004bc2 <LL_RCC_LSI1_IsReady>
 800531e:	4603      	mov	r3, r0
 8005320:	2b00      	cmp	r3, #0
 8005322:	d0f1      	beq.n	8005308 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8005324:	f7ff fc5f 	bl	8004be6 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005328:	f7fd ff98 	bl	800325c <HAL_GetTick>
 800532c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800532e:	e008      	b.n	8005342 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005330:	f7fd ff94 	bl	800325c <HAL_GetTick>
 8005334:	4602      	mov	r2, r0
 8005336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005338:	1ad3      	subs	r3, r2, r3
 800533a:	2b03      	cmp	r3, #3
 800533c:	d901      	bls.n	8005342 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800533e:	2303      	movs	r3, #3
 8005340:	e1ef      	b.n	8005722 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8005342:	f7ff fc72 	bl	8004c2a <LL_RCC_LSI2_IsReady>
 8005346:	4603      	mov	r3, r0
 8005348:	2b00      	cmp	r3, #0
 800534a:	d0f1      	beq.n	8005330 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	699b      	ldr	r3, [r3, #24]
 8005350:	4618      	mov	r0, r3
 8005352:	f7ff fc7c 	bl	8004c4e <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8005356:	f7ff fc23 	bl	8004ba0 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800535a:	f7fd ff7f 	bl	800325c <HAL_GetTick>
 800535e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8005360:	e008      	b.n	8005374 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005362:	f7fd ff7b 	bl	800325c <HAL_GetTick>
 8005366:	4602      	mov	r2, r0
 8005368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800536a:	1ad3      	subs	r3, r2, r3
 800536c:	2b02      	cmp	r3, #2
 800536e:	d901      	bls.n	8005374 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8005370:	2303      	movs	r3, #3
 8005372:	e1d6      	b.n	8005722 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8005374:	f7ff fc25 	bl	8004bc2 <LL_RCC_LSI1_IsReady>
 8005378:	4603      	mov	r3, r0
 800537a:	2b00      	cmp	r3, #0
 800537c:	d1f1      	bne.n	8005362 <HAL_RCC_OscConfig+0x31a>
 800537e:	e051      	b.n	8005424 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8005380:	f7ff fbfd 	bl	8004b7e <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005384:	f7fd ff6a 	bl	800325c <HAL_GetTick>
 8005388:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800538a:	e00c      	b.n	80053a6 <HAL_RCC_OscConfig+0x35e>
 800538c:	20000008 	.word	0x20000008
 8005390:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005394:	f7fd ff62 	bl	800325c <HAL_GetTick>
 8005398:	4602      	mov	r2, r0
 800539a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800539c:	1ad3      	subs	r3, r2, r3
 800539e:	2b02      	cmp	r3, #2
 80053a0:	d901      	bls.n	80053a6 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80053a2:	2303      	movs	r3, #3
 80053a4:	e1bd      	b.n	8005722 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80053a6:	f7ff fc0c 	bl	8004bc2 <LL_RCC_LSI1_IsReady>
 80053aa:	4603      	mov	r3, r0
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d0f1      	beq.n	8005394 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80053b0:	f7ff fc2a 	bl	8004c08 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80053b4:	e008      	b.n	80053c8 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80053b6:	f7fd ff51 	bl	800325c <HAL_GetTick>
 80053ba:	4602      	mov	r2, r0
 80053bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053be:	1ad3      	subs	r3, r2, r3
 80053c0:	2b03      	cmp	r3, #3
 80053c2:	d901      	bls.n	80053c8 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 80053c4:	2303      	movs	r3, #3
 80053c6:	e1ac      	b.n	8005722 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80053c8:	f7ff fc2f 	bl	8004c2a <LL_RCC_LSI2_IsReady>
 80053cc:	4603      	mov	r3, r0
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d1f1      	bne.n	80053b6 <HAL_RCC_OscConfig+0x36e>
 80053d2:	e027      	b.n	8005424 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80053d4:	f7ff fc18 	bl	8004c08 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053d8:	f7fd ff40 	bl	800325c <HAL_GetTick>
 80053dc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80053de:	e008      	b.n	80053f2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80053e0:	f7fd ff3c 	bl	800325c <HAL_GetTick>
 80053e4:	4602      	mov	r2, r0
 80053e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053e8:	1ad3      	subs	r3, r2, r3
 80053ea:	2b03      	cmp	r3, #3
 80053ec:	d901      	bls.n	80053f2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80053ee:	2303      	movs	r3, #3
 80053f0:	e197      	b.n	8005722 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80053f2:	f7ff fc1a 	bl	8004c2a <LL_RCC_LSI2_IsReady>
 80053f6:	4603      	mov	r3, r0
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d1f1      	bne.n	80053e0 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80053fc:	f7ff fbd0 	bl	8004ba0 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005400:	f7fd ff2c 	bl	800325c <HAL_GetTick>
 8005404:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8005406:	e008      	b.n	800541a <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005408:	f7fd ff28 	bl	800325c <HAL_GetTick>
 800540c:	4602      	mov	r2, r0
 800540e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005410:	1ad3      	subs	r3, r2, r3
 8005412:	2b02      	cmp	r3, #2
 8005414:	d901      	bls.n	800541a <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8005416:	2303      	movs	r3, #3
 8005418:	e183      	b.n	8005722 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800541a:	f7ff fbd2 	bl	8004bc2 <LL_RCC_LSI1_IsReady>
 800541e:	4603      	mov	r3, r0
 8005420:	2b00      	cmp	r3, #0
 8005422:	d1f1      	bne.n	8005408 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f003 0304 	and.w	r3, r3, #4
 800542c:	2b00      	cmp	r3, #0
 800542e:	d05b      	beq.n	80054e8 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005430:	4ba7      	ldr	r3, [pc, #668]	@ (80056d0 <HAL_RCC_OscConfig+0x688>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005438:	2b00      	cmp	r3, #0
 800543a:	d114      	bne.n	8005466 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800543c:	f7ff fa70 	bl	8004920 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005440:	f7fd ff0c 	bl	800325c <HAL_GetTick>
 8005444:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005446:	e008      	b.n	800545a <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005448:	f7fd ff08 	bl	800325c <HAL_GetTick>
 800544c:	4602      	mov	r2, r0
 800544e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005450:	1ad3      	subs	r3, r2, r3
 8005452:	2b02      	cmp	r3, #2
 8005454:	d901      	bls.n	800545a <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8005456:	2303      	movs	r3, #3
 8005458:	e163      	b.n	8005722 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800545a:	4b9d      	ldr	r3, [pc, #628]	@ (80056d0 <HAL_RCC_OscConfig+0x688>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005462:	2b00      	cmp	r3, #0
 8005464:	d0f0      	beq.n	8005448 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	689b      	ldr	r3, [r3, #8]
 800546a:	2b01      	cmp	r3, #1
 800546c:	d102      	bne.n	8005474 <HAL_RCC_OscConfig+0x42c>
 800546e:	f7ff fb30 	bl	8004ad2 <LL_RCC_LSE_Enable>
 8005472:	e00c      	b.n	800548e <HAL_RCC_OscConfig+0x446>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	2b05      	cmp	r3, #5
 800547a:	d104      	bne.n	8005486 <HAL_RCC_OscConfig+0x43e>
 800547c:	f7ff fb4b 	bl	8004b16 <LL_RCC_LSE_EnableBypass>
 8005480:	f7ff fb27 	bl	8004ad2 <LL_RCC_LSE_Enable>
 8005484:	e003      	b.n	800548e <HAL_RCC_OscConfig+0x446>
 8005486:	f7ff fb35 	bl	8004af4 <LL_RCC_LSE_Disable>
 800548a:	f7ff fb55 	bl	8004b38 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	689b      	ldr	r3, [r3, #8]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d014      	beq.n	80054c0 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005496:	f7fd fee1 	bl	800325c <HAL_GetTick>
 800549a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800549c:	e00a      	b.n	80054b4 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800549e:	f7fd fedd 	bl	800325c <HAL_GetTick>
 80054a2:	4602      	mov	r2, r0
 80054a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054a6:	1ad3      	subs	r3, r2, r3
 80054a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d901      	bls.n	80054b4 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80054b0:	2303      	movs	r3, #3
 80054b2:	e136      	b.n	8005722 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 80054b4:	f7ff fb51 	bl	8004b5a <LL_RCC_LSE_IsReady>
 80054b8:	4603      	mov	r3, r0
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d0ef      	beq.n	800549e <HAL_RCC_OscConfig+0x456>
 80054be:	e013      	b.n	80054e8 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054c0:	f7fd fecc 	bl	800325c <HAL_GetTick>
 80054c4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80054c6:	e00a      	b.n	80054de <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054c8:	f7fd fec8 	bl	800325c <HAL_GetTick>
 80054cc:	4602      	mov	r2, r0
 80054ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054d0:	1ad3      	subs	r3, r2, r3
 80054d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d901      	bls.n	80054de <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 80054da:	2303      	movs	r3, #3
 80054dc:	e121      	b.n	8005722 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 80054de:	f7ff fb3c 	bl	8004b5a <LL_RCC_LSE_IsReady>
 80054e2:	4603      	mov	r3, r0
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d1ef      	bne.n	80054c8 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d02c      	beq.n	800554e <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d014      	beq.n	8005526 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80054fc:	f7ff fab5 	bl	8004a6a <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005500:	f7fd feac 	bl	800325c <HAL_GetTick>
 8005504:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8005506:	e008      	b.n	800551a <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005508:	f7fd fea8 	bl	800325c <HAL_GetTick>
 800550c:	4602      	mov	r2, r0
 800550e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005510:	1ad3      	subs	r3, r2, r3
 8005512:	2b02      	cmp	r3, #2
 8005514:	d901      	bls.n	800551a <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8005516:	2303      	movs	r3, #3
 8005518:	e103      	b.n	8005722 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800551a:	f7ff fac8 	bl	8004aae <LL_RCC_HSI48_IsReady>
 800551e:	4603      	mov	r3, r0
 8005520:	2b00      	cmp	r3, #0
 8005522:	d0f1      	beq.n	8005508 <HAL_RCC_OscConfig+0x4c0>
 8005524:	e013      	b.n	800554e <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005526:	f7ff fab1 	bl	8004a8c <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800552a:	f7fd fe97 	bl	800325c <HAL_GetTick>
 800552e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8005530:	e008      	b.n	8005544 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005532:	f7fd fe93 	bl	800325c <HAL_GetTick>
 8005536:	4602      	mov	r2, r0
 8005538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800553a:	1ad3      	subs	r3, r2, r3
 800553c:	2b02      	cmp	r3, #2
 800553e:	d901      	bls.n	8005544 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8005540:	2303      	movs	r3, #3
 8005542:	e0ee      	b.n	8005722 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8005544:	f7ff fab3 	bl	8004aae <LL_RCC_HSI48_IsReady>
 8005548:	4603      	mov	r3, r0
 800554a:	2b00      	cmp	r3, #0
 800554c:	d1f1      	bne.n	8005532 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005552:	2b00      	cmp	r3, #0
 8005554:	f000 80e4 	beq.w	8005720 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005558:	f7ff fc11 	bl	8004d7e <LL_RCC_GetSysClkSource>
 800555c:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800555e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005562:	68db      	ldr	r3, [r3, #12]
 8005564:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800556a:	2b02      	cmp	r3, #2
 800556c:	f040 80b4 	bne.w	80056d8 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f003 0203 	and.w	r2, r3, #3
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800557a:	429a      	cmp	r2, r3
 800557c:	d123      	bne.n	80055c6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005588:	429a      	cmp	r2, r3
 800558a:	d11c      	bne.n	80055c6 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	0a1b      	lsrs	r3, r3, #8
 8005590:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005598:	429a      	cmp	r2, r3
 800559a:	d114      	bne.n	80055c6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80055a6:	429a      	cmp	r2, r3
 80055a8:	d10d      	bne.n	80055c6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80055b4:	429a      	cmp	r2, r3
 80055b6:	d106      	bne.n	80055c6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80055c2:	429a      	cmp	r2, r3
 80055c4:	d05d      	beq.n	8005682 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	2b0c      	cmp	r3, #12
 80055ca:	d058      	beq.n	800567e <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80055cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d001      	beq.n	80055de <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 80055da:	2301      	movs	r3, #1
 80055dc:	e0a1      	b.n	8005722 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80055de:	f7ff fc84 	bl	8004eea <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80055e2:	f7fd fe3b 	bl	800325c <HAL_GetTick>
 80055e6:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80055e8:	e008      	b.n	80055fc <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055ea:	f7fd fe37 	bl	800325c <HAL_GetTick>
 80055ee:	4602      	mov	r2, r0
 80055f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055f2:	1ad3      	subs	r3, r2, r3
 80055f4:	2b02      	cmp	r3, #2
 80055f6:	d901      	bls.n	80055fc <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 80055f8:	2303      	movs	r3, #3
 80055fa:	e092      	b.n	8005722 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80055fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005606:	2b00      	cmp	r3, #0
 8005608:	d1ef      	bne.n	80055ea <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800560a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800560e:	68da      	ldr	r2, [r3, #12]
 8005610:	4b30      	ldr	r3, [pc, #192]	@ (80056d4 <HAL_RCC_OscConfig+0x68c>)
 8005612:	4013      	ands	r3, r2
 8005614:	687a      	ldr	r2, [r7, #4]
 8005616:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8005618:	687a      	ldr	r2, [r7, #4]
 800561a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800561c:	4311      	orrs	r1, r2
 800561e:	687a      	ldr	r2, [r7, #4]
 8005620:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005622:	0212      	lsls	r2, r2, #8
 8005624:	4311      	orrs	r1, r2
 8005626:	687a      	ldr	r2, [r7, #4]
 8005628:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800562a:	4311      	orrs	r1, r2
 800562c:	687a      	ldr	r2, [r7, #4]
 800562e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005630:	4311      	orrs	r1, r2
 8005632:	687a      	ldr	r2, [r7, #4]
 8005634:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8005636:	430a      	orrs	r2, r1
 8005638:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800563c:	4313      	orrs	r3, r2
 800563e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005640:	f7ff fc44 	bl	8004ecc <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005644:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005648:	68db      	ldr	r3, [r3, #12]
 800564a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800564e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005652:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005654:	f7fd fe02 	bl	800325c <HAL_GetTick>
 8005658:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800565a:	e008      	b.n	800566e <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800565c:	f7fd fdfe 	bl	800325c <HAL_GetTick>
 8005660:	4602      	mov	r2, r0
 8005662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005664:	1ad3      	subs	r3, r2, r3
 8005666:	2b02      	cmp	r3, #2
 8005668:	d901      	bls.n	800566e <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800566a:	2303      	movs	r3, #3
 800566c:	e059      	b.n	8005722 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800566e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005678:	2b00      	cmp	r3, #0
 800567a:	d0ef      	beq.n	800565c <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800567c:	e050      	b.n	8005720 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	e04f      	b.n	8005722 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005682:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800568c:	2b00      	cmp	r3, #0
 800568e:	d147      	bne.n	8005720 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005690:	f7ff fc1c 	bl	8004ecc <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005694:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005698:	68db      	ldr	r3, [r3, #12]
 800569a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800569e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80056a2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80056a4:	f7fd fdda 	bl	800325c <HAL_GetTick>
 80056a8:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80056aa:	e008      	b.n	80056be <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056ac:	f7fd fdd6 	bl	800325c <HAL_GetTick>
 80056b0:	4602      	mov	r2, r0
 80056b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056b4:	1ad3      	subs	r3, r2, r3
 80056b6:	2b02      	cmp	r3, #2
 80056b8:	d901      	bls.n	80056be <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 80056ba:	2303      	movs	r3, #3
 80056bc:	e031      	b.n	8005722 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80056be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d0ef      	beq.n	80056ac <HAL_RCC_OscConfig+0x664>
 80056cc:	e028      	b.n	8005720 <HAL_RCC_OscConfig+0x6d8>
 80056ce:	bf00      	nop
 80056d0:	58000400 	.word	0x58000400
 80056d4:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	2b0c      	cmp	r3, #12
 80056dc:	d01e      	beq.n	800571c <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056de:	f7ff fc04 	bl	8004eea <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056e2:	f7fd fdbb 	bl	800325c <HAL_GetTick>
 80056e6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80056e8:	e008      	b.n	80056fc <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056ea:	f7fd fdb7 	bl	800325c <HAL_GetTick>
 80056ee:	4602      	mov	r2, r0
 80056f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056f2:	1ad3      	subs	r3, r2, r3
 80056f4:	2b02      	cmp	r3, #2
 80056f6:	d901      	bls.n	80056fc <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 80056f8:	2303      	movs	r3, #3
 80056fa:	e012      	b.n	8005722 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80056fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005706:	2b00      	cmp	r3, #0
 8005708:	d1ef      	bne.n	80056ea <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800570a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800570e:	68da      	ldr	r2, [r3, #12]
 8005710:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005714:	4b05      	ldr	r3, [pc, #20]	@ (800572c <HAL_RCC_OscConfig+0x6e4>)
 8005716:	4013      	ands	r3, r2
 8005718:	60cb      	str	r3, [r1, #12]
 800571a:	e001      	b.n	8005720 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800571c:	2301      	movs	r3, #1
 800571e:	e000      	b.n	8005722 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8005720:	2300      	movs	r3, #0
}
 8005722:	4618      	mov	r0, r3
 8005724:	3734      	adds	r7, #52	@ 0x34
 8005726:	46bd      	mov	sp, r7
 8005728:	bd90      	pop	{r4, r7, pc}
 800572a:	bf00      	nop
 800572c:	eefefffc 	.word	0xeefefffc

08005730 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b084      	sub	sp, #16
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
 8005738:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d101      	bne.n	8005744 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005740:	2301      	movs	r3, #1
 8005742:	e12d      	b.n	80059a0 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005744:	4b98      	ldr	r3, [pc, #608]	@ (80059a8 <HAL_RCC_ClockConfig+0x278>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f003 0307 	and.w	r3, r3, #7
 800574c:	683a      	ldr	r2, [r7, #0]
 800574e:	429a      	cmp	r2, r3
 8005750:	d91b      	bls.n	800578a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005752:	4b95      	ldr	r3, [pc, #596]	@ (80059a8 <HAL_RCC_ClockConfig+0x278>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f023 0207 	bic.w	r2, r3, #7
 800575a:	4993      	ldr	r1, [pc, #588]	@ (80059a8 <HAL_RCC_ClockConfig+0x278>)
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	4313      	orrs	r3, r2
 8005760:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005762:	f7fd fd7b 	bl	800325c <HAL_GetTick>
 8005766:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005768:	e008      	b.n	800577c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800576a:	f7fd fd77 	bl	800325c <HAL_GetTick>
 800576e:	4602      	mov	r2, r0
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	1ad3      	subs	r3, r2, r3
 8005774:	2b02      	cmp	r3, #2
 8005776:	d901      	bls.n	800577c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8005778:	2303      	movs	r3, #3
 800577a:	e111      	b.n	80059a0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800577c:	4b8a      	ldr	r3, [pc, #552]	@ (80059a8 <HAL_RCC_ClockConfig+0x278>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f003 0307 	and.w	r3, r3, #7
 8005784:	683a      	ldr	r2, [r7, #0]
 8005786:	429a      	cmp	r2, r3
 8005788:	d1ef      	bne.n	800576a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f003 0302 	and.w	r3, r3, #2
 8005792:	2b00      	cmp	r3, #0
 8005794:	d016      	beq.n	80057c4 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	689b      	ldr	r3, [r3, #8]
 800579a:	4618      	mov	r0, r3
 800579c:	f7ff fafb 	bl	8004d96 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80057a0:	f7fd fd5c 	bl	800325c <HAL_GetTick>
 80057a4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80057a6:	e008      	b.n	80057ba <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80057a8:	f7fd fd58 	bl	800325c <HAL_GetTick>
 80057ac:	4602      	mov	r2, r0
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	1ad3      	subs	r3, r2, r3
 80057b2:	2b02      	cmp	r3, #2
 80057b4:	d901      	bls.n	80057ba <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80057b6:	2303      	movs	r3, #3
 80057b8:	e0f2      	b.n	80059a0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80057ba:	f7ff fbe8 	bl	8004f8e <LL_RCC_IsActiveFlag_HPRE>
 80057be:	4603      	mov	r3, r0
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d0f1      	beq.n	80057a8 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f003 0320 	and.w	r3, r3, #32
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d016      	beq.n	80057fe <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	695b      	ldr	r3, [r3, #20]
 80057d4:	4618      	mov	r0, r3
 80057d6:	f7ff faf2 	bl	8004dbe <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80057da:	f7fd fd3f 	bl	800325c <HAL_GetTick>
 80057de:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80057e0:	e008      	b.n	80057f4 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80057e2:	f7fd fd3b 	bl	800325c <HAL_GetTick>
 80057e6:	4602      	mov	r2, r0
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	1ad3      	subs	r3, r2, r3
 80057ec:	2b02      	cmp	r3, #2
 80057ee:	d901      	bls.n	80057f4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80057f0:	2303      	movs	r3, #3
 80057f2:	e0d5      	b.n	80059a0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80057f4:	f7ff fbdd 	bl	8004fb2 <LL_RCC_IsActiveFlag_C2HPRE>
 80057f8:	4603      	mov	r3, r0
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d0f1      	beq.n	80057e2 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005806:	2b00      	cmp	r3, #0
 8005808:	d016      	beq.n	8005838 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	699b      	ldr	r3, [r3, #24]
 800580e:	4618      	mov	r0, r3
 8005810:	f7ff faeb 	bl	8004dea <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005814:	f7fd fd22 	bl	800325c <HAL_GetTick>
 8005818:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800581a:	e008      	b.n	800582e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800581c:	f7fd fd1e 	bl	800325c <HAL_GetTick>
 8005820:	4602      	mov	r2, r0
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	1ad3      	subs	r3, r2, r3
 8005826:	2b02      	cmp	r3, #2
 8005828:	d901      	bls.n	800582e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800582a:	2303      	movs	r3, #3
 800582c:	e0b8      	b.n	80059a0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800582e:	f7ff fbd3 	bl	8004fd8 <LL_RCC_IsActiveFlag_SHDHPRE>
 8005832:	4603      	mov	r3, r0
 8005834:	2b00      	cmp	r3, #0
 8005836:	d0f1      	beq.n	800581c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f003 0304 	and.w	r3, r3, #4
 8005840:	2b00      	cmp	r3, #0
 8005842:	d016      	beq.n	8005872 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	68db      	ldr	r3, [r3, #12]
 8005848:	4618      	mov	r0, r3
 800584a:	f7ff fae5 	bl	8004e18 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800584e:	f7fd fd05 	bl	800325c <HAL_GetTick>
 8005852:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005854:	e008      	b.n	8005868 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005856:	f7fd fd01 	bl	800325c <HAL_GetTick>
 800585a:	4602      	mov	r2, r0
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	1ad3      	subs	r3, r2, r3
 8005860:	2b02      	cmp	r3, #2
 8005862:	d901      	bls.n	8005868 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8005864:	2303      	movs	r3, #3
 8005866:	e09b      	b.n	80059a0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005868:	f7ff fbc9 	bl	8004ffe <LL_RCC_IsActiveFlag_PPRE1>
 800586c:	4603      	mov	r3, r0
 800586e:	2b00      	cmp	r3, #0
 8005870:	d0f1      	beq.n	8005856 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f003 0308 	and.w	r3, r3, #8
 800587a:	2b00      	cmp	r3, #0
 800587c:	d017      	beq.n	80058ae <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	691b      	ldr	r3, [r3, #16]
 8005882:	00db      	lsls	r3, r3, #3
 8005884:	4618      	mov	r0, r3
 8005886:	f7ff fadb 	bl	8004e40 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800588a:	f7fd fce7 	bl	800325c <HAL_GetTick>
 800588e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005890:	e008      	b.n	80058a4 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005892:	f7fd fce3 	bl	800325c <HAL_GetTick>
 8005896:	4602      	mov	r2, r0
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	1ad3      	subs	r3, r2, r3
 800589c:	2b02      	cmp	r3, #2
 800589e:	d901      	bls.n	80058a4 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80058a0:	2303      	movs	r3, #3
 80058a2:	e07d      	b.n	80059a0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80058a4:	f7ff fbbd 	bl	8005022 <LL_RCC_IsActiveFlag_PPRE2>
 80058a8:	4603      	mov	r3, r0
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d0f1      	beq.n	8005892 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f003 0301 	and.w	r3, r3, #1
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d043      	beq.n	8005942 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	2b02      	cmp	r3, #2
 80058c0:	d106      	bne.n	80058d0 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80058c2:	f7ff f87b 	bl	80049bc <LL_RCC_HSE_IsReady>
 80058c6:	4603      	mov	r3, r0
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d11e      	bne.n	800590a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80058cc:	2301      	movs	r3, #1
 80058ce:	e067      	b.n	80059a0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	2b03      	cmp	r3, #3
 80058d6:	d106      	bne.n	80058e6 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80058d8:	f7ff fb16 	bl	8004f08 <LL_RCC_PLL_IsReady>
 80058dc:	4603      	mov	r3, r0
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d113      	bne.n	800590a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80058e2:	2301      	movs	r3, #1
 80058e4:	e05c      	b.n	80059a0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	685b      	ldr	r3, [r3, #4]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d106      	bne.n	80058fc <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80058ee:	f7ff f9e3 	bl	8004cb8 <LL_RCC_MSI_IsReady>
 80058f2:	4603      	mov	r3, r0
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d108      	bne.n	800590a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80058f8:	2301      	movs	r3, #1
 80058fa:	e051      	b.n	80059a0 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80058fc:	f7ff f88e 	bl	8004a1c <LL_RCC_HSI_IsReady>
 8005900:	4603      	mov	r3, r0
 8005902:	2b00      	cmp	r3, #0
 8005904:	d101      	bne.n	800590a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005906:	2301      	movs	r3, #1
 8005908:	e04a      	b.n	80059a0 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	4618      	mov	r0, r3
 8005910:	f7ff fa21 	bl	8004d56 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005914:	f7fd fca2 	bl	800325c <HAL_GetTick>
 8005918:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800591a:	e00a      	b.n	8005932 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800591c:	f7fd fc9e 	bl	800325c <HAL_GetTick>
 8005920:	4602      	mov	r2, r0
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	1ad3      	subs	r3, r2, r3
 8005926:	f241 3288 	movw	r2, #5000	@ 0x1388
 800592a:	4293      	cmp	r3, r2
 800592c:	d901      	bls.n	8005932 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800592e:	2303      	movs	r3, #3
 8005930:	e036      	b.n	80059a0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005932:	f7ff fa24 	bl	8004d7e <LL_RCC_GetSysClkSource>
 8005936:	4602      	mov	r2, r0
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	009b      	lsls	r3, r3, #2
 800593e:	429a      	cmp	r2, r3
 8005940:	d1ec      	bne.n	800591c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005942:	4b19      	ldr	r3, [pc, #100]	@ (80059a8 <HAL_RCC_ClockConfig+0x278>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f003 0307 	and.w	r3, r3, #7
 800594a:	683a      	ldr	r2, [r7, #0]
 800594c:	429a      	cmp	r2, r3
 800594e:	d21b      	bcs.n	8005988 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005950:	4b15      	ldr	r3, [pc, #84]	@ (80059a8 <HAL_RCC_ClockConfig+0x278>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f023 0207 	bic.w	r2, r3, #7
 8005958:	4913      	ldr	r1, [pc, #76]	@ (80059a8 <HAL_RCC_ClockConfig+0x278>)
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	4313      	orrs	r3, r2
 800595e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005960:	f7fd fc7c 	bl	800325c <HAL_GetTick>
 8005964:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005966:	e008      	b.n	800597a <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005968:	f7fd fc78 	bl	800325c <HAL_GetTick>
 800596c:	4602      	mov	r2, r0
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	1ad3      	subs	r3, r2, r3
 8005972:	2b02      	cmp	r3, #2
 8005974:	d901      	bls.n	800597a <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8005976:	2303      	movs	r3, #3
 8005978:	e012      	b.n	80059a0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800597a:	4b0b      	ldr	r3, [pc, #44]	@ (80059a8 <HAL_RCC_ClockConfig+0x278>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f003 0307 	and.w	r3, r3, #7
 8005982:	683a      	ldr	r2, [r7, #0]
 8005984:	429a      	cmp	r2, r3
 8005986:	d1ef      	bne.n	8005968 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005988:	f000 f87e 	bl	8005a88 <HAL_RCC_GetHCLKFreq>
 800598c:	4603      	mov	r3, r0
 800598e:	4a07      	ldr	r2, [pc, #28]	@ (80059ac <HAL_RCC_ClockConfig+0x27c>)
 8005990:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8005992:	f7fd fc6f 	bl	8003274 <HAL_GetTickPrio>
 8005996:	4603      	mov	r3, r0
 8005998:	4618      	mov	r0, r3
 800599a:	f7fd fc11 	bl	80031c0 <HAL_InitTick>
 800599e:	4603      	mov	r3, r0
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	3710      	adds	r7, #16
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd80      	pop	{r7, pc}
 80059a8:	58004000 	.word	0x58004000
 80059ac:	20000008 	.word	0x20000008

080059b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80059b0:	b590      	push	{r4, r7, lr}
 80059b2:	b085      	sub	sp, #20
 80059b4:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80059b6:	f7ff f9e2 	bl	8004d7e <LL_RCC_GetSysClkSource>
 80059ba:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d10a      	bne.n	80059d8 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80059c2:	f7ff f99e 	bl	8004d02 <LL_RCC_MSI_GetRange>
 80059c6:	4603      	mov	r3, r0
 80059c8:	091b      	lsrs	r3, r3, #4
 80059ca:	f003 030f 	and.w	r3, r3, #15
 80059ce:	4a2b      	ldr	r2, [pc, #172]	@ (8005a7c <HAL_RCC_GetSysClockFreq+0xcc>)
 80059d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059d4:	60fb      	str	r3, [r7, #12]
 80059d6:	e04b      	b.n	8005a70 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2b04      	cmp	r3, #4
 80059dc:	d102      	bne.n	80059e4 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80059de:	4b28      	ldr	r3, [pc, #160]	@ (8005a80 <HAL_RCC_GetSysClockFreq+0xd0>)
 80059e0:	60fb      	str	r3, [r7, #12]
 80059e2:	e045      	b.n	8005a70 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2b08      	cmp	r3, #8
 80059e8:	d10a      	bne.n	8005a00 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80059ea:	f7fe ffb7 	bl	800495c <LL_RCC_HSE_IsEnabledDiv2>
 80059ee:	4603      	mov	r3, r0
 80059f0:	2b01      	cmp	r3, #1
 80059f2:	d102      	bne.n	80059fa <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80059f4:	4b22      	ldr	r3, [pc, #136]	@ (8005a80 <HAL_RCC_GetSysClockFreq+0xd0>)
 80059f6:	60fb      	str	r3, [r7, #12]
 80059f8:	e03a      	b.n	8005a70 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80059fa:	4b22      	ldr	r3, [pc, #136]	@ (8005a84 <HAL_RCC_GetSysClockFreq+0xd4>)
 80059fc:	60fb      	str	r3, [r7, #12]
 80059fe:	e037      	b.n	8005a70 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8005a00:	f7ff fab9 	bl	8004f76 <LL_RCC_PLL_GetMainSource>
 8005a04:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	2b02      	cmp	r3, #2
 8005a0a:	d003      	beq.n	8005a14 <HAL_RCC_GetSysClockFreq+0x64>
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	2b03      	cmp	r3, #3
 8005a10:	d003      	beq.n	8005a1a <HAL_RCC_GetSysClockFreq+0x6a>
 8005a12:	e00d      	b.n	8005a30 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8005a14:	4b1a      	ldr	r3, [pc, #104]	@ (8005a80 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005a16:	60bb      	str	r3, [r7, #8]
        break;
 8005a18:	e015      	b.n	8005a46 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005a1a:	f7fe ff9f 	bl	800495c <LL_RCC_HSE_IsEnabledDiv2>
 8005a1e:	4603      	mov	r3, r0
 8005a20:	2b01      	cmp	r3, #1
 8005a22:	d102      	bne.n	8005a2a <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8005a24:	4b16      	ldr	r3, [pc, #88]	@ (8005a80 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005a26:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8005a28:	e00d      	b.n	8005a46 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8005a2a:	4b16      	ldr	r3, [pc, #88]	@ (8005a84 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005a2c:	60bb      	str	r3, [r7, #8]
        break;
 8005a2e:	e00a      	b.n	8005a46 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005a30:	f7ff f967 	bl	8004d02 <LL_RCC_MSI_GetRange>
 8005a34:	4603      	mov	r3, r0
 8005a36:	091b      	lsrs	r3, r3, #4
 8005a38:	f003 030f 	and.w	r3, r3, #15
 8005a3c:	4a0f      	ldr	r2, [pc, #60]	@ (8005a7c <HAL_RCC_GetSysClockFreq+0xcc>)
 8005a3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a42:	60bb      	str	r3, [r7, #8]
        break;
 8005a44:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8005a46:	f7ff fa71 	bl	8004f2c <LL_RCC_PLL_GetN>
 8005a4a:	4602      	mov	r2, r0
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	fb03 f402 	mul.w	r4, r3, r2
 8005a52:	f7ff fa84 	bl	8004f5e <LL_RCC_PLL_GetDivider>
 8005a56:	4603      	mov	r3, r0
 8005a58:	091b      	lsrs	r3, r3, #4
 8005a5a:	3301      	adds	r3, #1
 8005a5c:	fbb4 f4f3 	udiv	r4, r4, r3
 8005a60:	f7ff fa71 	bl	8004f46 <LL_RCC_PLL_GetR>
 8005a64:	4603      	mov	r3, r0
 8005a66:	0f5b      	lsrs	r3, r3, #29
 8005a68:	3301      	adds	r3, #1
 8005a6a:	fbb4 f3f3 	udiv	r3, r4, r3
 8005a6e:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8005a70:	68fb      	ldr	r3, [r7, #12]
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	3714      	adds	r7, #20
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bd90      	pop	{r4, r7, pc}
 8005a7a:	bf00      	nop
 8005a7c:	0801075c 	.word	0x0801075c
 8005a80:	00f42400 	.word	0x00f42400
 8005a84:	01e84800 	.word	0x01e84800

08005a88 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a88:	b598      	push	{r3, r4, r7, lr}
 8005a8a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8005a8c:	f7ff ff90 	bl	80059b0 <HAL_RCC_GetSysClockFreq>
 8005a90:	4604      	mov	r4, r0
 8005a92:	f7ff f9e9 	bl	8004e68 <LL_RCC_GetAHBPrescaler>
 8005a96:	4603      	mov	r3, r0
 8005a98:	091b      	lsrs	r3, r3, #4
 8005a9a:	f003 030f 	and.w	r3, r3, #15
 8005a9e:	4a03      	ldr	r2, [pc, #12]	@ (8005aac <HAL_RCC_GetHCLKFreq+0x24>)
 8005aa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005aa4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	bd98      	pop	{r3, r4, r7, pc}
 8005aac:	080106fc 	.word	0x080106fc

08005ab0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ab0:	b598      	push	{r3, r4, r7, lr}
 8005ab2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005ab4:	f7ff ffe8 	bl	8005a88 <HAL_RCC_GetHCLKFreq>
 8005ab8:	4604      	mov	r4, r0
 8005aba:	f7ff f9ef 	bl	8004e9c <LL_RCC_GetAPB1Prescaler>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	0a1b      	lsrs	r3, r3, #8
 8005ac2:	f003 0307 	and.w	r3, r3, #7
 8005ac6:	4a04      	ldr	r2, [pc, #16]	@ (8005ad8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005ac8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005acc:	f003 031f 	and.w	r3, r3, #31
 8005ad0:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	bd98      	pop	{r3, r4, r7, pc}
 8005ad8:	0801073c 	.word	0x0801073c

08005adc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005adc:	b598      	push	{r3, r4, r7, lr}
 8005ade:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8005ae0:	f7ff ffd2 	bl	8005a88 <HAL_RCC_GetHCLKFreq>
 8005ae4:	4604      	mov	r4, r0
 8005ae6:	f7ff f9e5 	bl	8004eb4 <LL_RCC_GetAPB2Prescaler>
 8005aea:	4603      	mov	r3, r0
 8005aec:	0adb      	lsrs	r3, r3, #11
 8005aee:	f003 0307 	and.w	r3, r3, #7
 8005af2:	4a04      	ldr	r2, [pc, #16]	@ (8005b04 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005af4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005af8:	f003 031f 	and.w	r3, r3, #31
 8005afc:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	bd98      	pop	{r3, r4, r7, pc}
 8005b04:	0801073c 	.word	0x0801073c

08005b08 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8005b08:	b590      	push	{r4, r7, lr}
 8005b0a:	b085      	sub	sp, #20
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2bb0      	cmp	r3, #176	@ 0xb0
 8005b14:	d903      	bls.n	8005b1e <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8005b16:	4b15      	ldr	r3, [pc, #84]	@ (8005b6c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005b18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b1a:	60fb      	str	r3, [r7, #12]
 8005b1c:	e007      	b.n	8005b2e <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	091b      	lsrs	r3, r3, #4
 8005b22:	f003 030f 	and.w	r3, r3, #15
 8005b26:	4a11      	ldr	r2, [pc, #68]	@ (8005b6c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005b28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b2c:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8005b2e:	f7ff f9a7 	bl	8004e80 <LL_RCC_GetAHB4Prescaler>
 8005b32:	4603      	mov	r3, r0
 8005b34:	091b      	lsrs	r3, r3, #4
 8005b36:	f003 030f 	and.w	r3, r3, #15
 8005b3a:	4a0d      	ldr	r2, [pc, #52]	@ (8005b70 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8005b3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b40:	68fa      	ldr	r2, [r7, #12]
 8005b42:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b46:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	4a0a      	ldr	r2, [pc, #40]	@ (8005b74 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8005b4c:	fba2 2303 	umull	r2, r3, r2, r3
 8005b50:	0c9c      	lsrs	r4, r3, #18
 8005b52:	f7fe fef5 	bl	8004940 <HAL_PWREx_GetVoltageRange>
 8005b56:	4603      	mov	r3, r0
 8005b58:	4619      	mov	r1, r3
 8005b5a:	4620      	mov	r0, r4
 8005b5c:	f000 f80c 	bl	8005b78 <RCC_SetFlashLatency>
 8005b60:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	3714      	adds	r7, #20
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd90      	pop	{r4, r7, pc}
 8005b6a:	bf00      	nop
 8005b6c:	0801075c 	.word	0x0801075c
 8005b70:	080106fc 	.word	0x080106fc
 8005b74:	431bde83 	.word	0x431bde83

08005b78 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8005b78:	b590      	push	{r4, r7, lr}
 8005b7a:	b093      	sub	sp, #76	@ 0x4c
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
 8005b80:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8005b82:	4b37      	ldr	r3, [pc, #220]	@ (8005c60 <RCC_SetFlashLatency+0xe8>)
 8005b84:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8005b88:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005b8a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8005b8e:	4a35      	ldr	r2, [pc, #212]	@ (8005c64 <RCC_SetFlashLatency+0xec>)
 8005b90:	f107 031c 	add.w	r3, r7, #28
 8005b94:	ca07      	ldmia	r2, {r0, r1, r2}
 8005b96:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8005b9a:	4b33      	ldr	r3, [pc, #204]	@ (8005c68 <RCC_SetFlashLatency+0xf0>)
 8005b9c:	f107 040c 	add.w	r4, r7, #12
 8005ba0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005ba2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005bb0:	d11a      	bne.n	8005be8 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	643b      	str	r3, [r7, #64]	@ 0x40
 8005bb6:	e013      	b.n	8005be0 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8005bb8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005bba:	009b      	lsls	r3, r3, #2
 8005bbc:	3348      	adds	r3, #72	@ 0x48
 8005bbe:	443b      	add	r3, r7
 8005bc0:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8005bc4:	687a      	ldr	r2, [r7, #4]
 8005bc6:	429a      	cmp	r2, r3
 8005bc8:	d807      	bhi.n	8005bda <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005bca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005bcc:	009b      	lsls	r3, r3, #2
 8005bce:	3348      	adds	r3, #72	@ 0x48
 8005bd0:	443b      	add	r3, r7
 8005bd2:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005bd6:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8005bd8:	e020      	b.n	8005c1c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005bda:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005bdc:	3301      	adds	r3, #1
 8005bde:	643b      	str	r3, [r7, #64]	@ 0x40
 8005be0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005be2:	2b03      	cmp	r3, #3
 8005be4:	d9e8      	bls.n	8005bb8 <RCC_SetFlashLatency+0x40>
 8005be6:	e019      	b.n	8005c1c <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005be8:	2300      	movs	r3, #0
 8005bea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005bec:	e013      	b.n	8005c16 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8005bee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005bf0:	009b      	lsls	r3, r3, #2
 8005bf2:	3348      	adds	r3, #72	@ 0x48
 8005bf4:	443b      	add	r3, r7
 8005bf6:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8005bfa:	687a      	ldr	r2, [r7, #4]
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	d807      	bhi.n	8005c10 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005c00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c02:	009b      	lsls	r3, r3, #2
 8005c04:	3348      	adds	r3, #72	@ 0x48
 8005c06:	443b      	add	r3, r7
 8005c08:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005c0c:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8005c0e:	e005      	b.n	8005c1c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005c10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c12:	3301      	adds	r3, #1
 8005c14:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005c16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c18:	2b02      	cmp	r3, #2
 8005c1a:	d9e8      	bls.n	8005bee <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8005c1c:	4b13      	ldr	r3, [pc, #76]	@ (8005c6c <RCC_SetFlashLatency+0xf4>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f023 0207 	bic.w	r2, r3, #7
 8005c24:	4911      	ldr	r1, [pc, #68]	@ (8005c6c <RCC_SetFlashLatency+0xf4>)
 8005c26:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005c2c:	f7fd fb16 	bl	800325c <HAL_GetTick>
 8005c30:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005c32:	e008      	b.n	8005c46 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005c34:	f7fd fb12 	bl	800325c <HAL_GetTick>
 8005c38:	4602      	mov	r2, r0
 8005c3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c3c:	1ad3      	subs	r3, r2, r3
 8005c3e:	2b02      	cmp	r3, #2
 8005c40:	d901      	bls.n	8005c46 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8005c42:	2303      	movs	r3, #3
 8005c44:	e007      	b.n	8005c56 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005c46:	4b09      	ldr	r3, [pc, #36]	@ (8005c6c <RCC_SetFlashLatency+0xf4>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f003 0307 	and.w	r3, r3, #7
 8005c4e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005c50:	429a      	cmp	r2, r3
 8005c52:	d1ef      	bne.n	8005c34 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8005c54:	2300      	movs	r3, #0
}
 8005c56:	4618      	mov	r0, r3
 8005c58:	374c      	adds	r7, #76	@ 0x4c
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd90      	pop	{r4, r7, pc}
 8005c5e:	bf00      	nop
 8005c60:	0800f598 	.word	0x0800f598
 8005c64:	0800f5a8 	.word	0x0800f5a8
 8005c68:	0800f5b4 	.word	0x0800f5b4
 8005c6c:	58004000 	.word	0x58004000

08005c70 <LL_RCC_LSE_IsEnabled>:
{
 8005c70:	b480      	push	{r7}
 8005c72:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8005c74:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c7c:	f003 0301 	and.w	r3, r3, #1
 8005c80:	2b01      	cmp	r3, #1
 8005c82:	d101      	bne.n	8005c88 <LL_RCC_LSE_IsEnabled+0x18>
 8005c84:	2301      	movs	r3, #1
 8005c86:	e000      	b.n	8005c8a <LL_RCC_LSE_IsEnabled+0x1a>
 8005c88:	2300      	movs	r3, #0
}
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c92:	4770      	bx	lr

08005c94 <LL_RCC_LSE_IsReady>:
{
 8005c94:	b480      	push	{r7}
 8005c96:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005c98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ca0:	f003 0302 	and.w	r3, r3, #2
 8005ca4:	2b02      	cmp	r3, #2
 8005ca6:	d101      	bne.n	8005cac <LL_RCC_LSE_IsReady+0x18>
 8005ca8:	2301      	movs	r3, #1
 8005caa:	e000      	b.n	8005cae <LL_RCC_LSE_IsReady+0x1a>
 8005cac:	2300      	movs	r3, #0
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb6:	4770      	bx	lr

08005cb8 <LL_RCC_SetRFWKPClockSource>:
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b083      	sub	sp, #12
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8005cc0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005cc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005cc8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005ccc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8005cd8:	bf00      	nop
 8005cda:	370c      	adds	r7, #12
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce2:	4770      	bx	lr

08005ce4 <LL_RCC_SetSMPSClockSource>:
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b083      	sub	sp, #12
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8005cec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005cf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cf2:	f023 0203 	bic.w	r2, r3, #3
 8005cf6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8005d00:	bf00      	nop
 8005d02:	370c      	adds	r7, #12
 8005d04:	46bd      	mov	sp, r7
 8005d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0a:	4770      	bx	lr

08005d0c <LL_RCC_SetSMPSPrescaler>:
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b083      	sub	sp, #12
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8005d14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d1a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005d1e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	4313      	orrs	r3, r2
 8005d26:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8005d28:	bf00      	nop
 8005d2a:	370c      	adds	r7, #12
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d32:	4770      	bx	lr

08005d34 <LL_RCC_SetUSARTClockSource>:
{
 8005d34:	b480      	push	{r7}
 8005d36:	b083      	sub	sp, #12
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8005d3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d44:	f023 0203 	bic.w	r2, r3, #3
 8005d48:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005d54:	bf00      	nop
 8005d56:	370c      	adds	r7, #12
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5e:	4770      	bx	lr

08005d60 <LL_RCC_SetLPUARTClockSource>:
{
 8005d60:	b480      	push	{r7}
 8005d62:	b083      	sub	sp, #12
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8005d68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d70:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005d74:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005d80:	bf00      	nop
 8005d82:	370c      	adds	r7, #12
 8005d84:	46bd      	mov	sp, r7
 8005d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8a:	4770      	bx	lr

08005d8c <LL_RCC_SetI2CClockSource>:
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b083      	sub	sp, #12
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8005d94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d98:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	091b      	lsrs	r3, r3, #4
 8005da0:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8005da4:	43db      	mvns	r3, r3
 8005da6:	401a      	ands	r2, r3
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	011b      	lsls	r3, r3, #4
 8005dac:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8005db0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005db4:	4313      	orrs	r3, r2
 8005db6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005dba:	bf00      	nop
 8005dbc:	370c      	adds	r7, #12
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc4:	4770      	bx	lr

08005dc6 <LL_RCC_SetLPTIMClockSource>:
{
 8005dc6:	b480      	push	{r7}
 8005dc8:	b083      	sub	sp, #12
 8005dca:	af00      	add	r7, sp, #0
 8005dcc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8005dce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005dd2:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	0c1b      	lsrs	r3, r3, #16
 8005dda:	041b      	lsls	r3, r3, #16
 8005ddc:	43db      	mvns	r3, r3
 8005dde:	401a      	ands	r2, r3
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	041b      	lsls	r3, r3, #16
 8005de4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005de8:	4313      	orrs	r3, r2
 8005dea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005dee:	bf00      	nop
 8005df0:	370c      	adds	r7, #12
 8005df2:	46bd      	mov	sp, r7
 8005df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df8:	4770      	bx	lr

08005dfa <LL_RCC_SetSAIClockSource>:
{
 8005dfa:	b480      	push	{r7}
 8005dfc:	b083      	sub	sp, #12
 8005dfe:	af00      	add	r7, sp, #0
 8005e00:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8005e02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e0a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005e0e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	4313      	orrs	r3, r2
 8005e16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005e1a:	bf00      	nop
 8005e1c:	370c      	adds	r7, #12
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e24:	4770      	bx	lr

08005e26 <LL_RCC_SetRNGClockSource>:
{
 8005e26:	b480      	push	{r7}
 8005e28:	b083      	sub	sp, #12
 8005e2a:	af00      	add	r7, sp, #0
 8005e2c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8005e2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e36:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8005e3a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	4313      	orrs	r3, r2
 8005e42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005e46:	bf00      	nop
 8005e48:	370c      	adds	r7, #12
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e50:	4770      	bx	lr

08005e52 <LL_RCC_SetCLK48ClockSource>:
{
 8005e52:	b480      	push	{r7}
 8005e54:	b083      	sub	sp, #12
 8005e56:	af00      	add	r7, sp, #0
 8005e58:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8005e5a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e62:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005e66:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005e72:	bf00      	nop
 8005e74:	370c      	adds	r7, #12
 8005e76:	46bd      	mov	sp, r7
 8005e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7c:	4770      	bx	lr

08005e7e <LL_RCC_SetUSBClockSource>:
{
 8005e7e:	b580      	push	{r7, lr}
 8005e80:	b082      	sub	sp, #8
 8005e82:	af00      	add	r7, sp, #0
 8005e84:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f7ff ffe3 	bl	8005e52 <LL_RCC_SetCLK48ClockSource>
}
 8005e8c:	bf00      	nop
 8005e8e:	3708      	adds	r7, #8
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bd80      	pop	{r7, pc}

08005e94 <LL_RCC_SetADCClockSource>:
{
 8005e94:	b480      	push	{r7}
 8005e96:	b083      	sub	sp, #12
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8005e9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ea0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ea4:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005ea8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005eb4:	bf00      	nop
 8005eb6:	370c      	adds	r7, #12
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebe:	4770      	bx	lr

08005ec0 <LL_RCC_SetRTCClockSource>:
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b083      	sub	sp, #12
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8005ec8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ecc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ed0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005ed4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	4313      	orrs	r3, r2
 8005edc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8005ee0:	bf00      	nop
 8005ee2:	370c      	adds	r7, #12
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eea:	4770      	bx	lr

08005eec <LL_RCC_GetRTCClockSource>:
{
 8005eec:	b480      	push	{r7}
 8005eee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8005ef0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ef8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	46bd      	mov	sp, r7
 8005f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f04:	4770      	bx	lr

08005f06 <LL_RCC_ForceBackupDomainReset>:
{
 8005f06:	b480      	push	{r7}
 8005f08:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005f0a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f12:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005f16:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f1a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8005f1e:	bf00      	nop
 8005f20:	46bd      	mov	sp, r7
 8005f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f26:	4770      	bx	lr

08005f28 <LL_RCC_ReleaseBackupDomainReset>:
{
 8005f28:	b480      	push	{r7}
 8005f2a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005f2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f34:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005f38:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f3c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8005f40:	bf00      	nop
 8005f42:	46bd      	mov	sp, r7
 8005f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f48:	4770      	bx	lr

08005f4a <LL_RCC_PLLSAI1_Enable>:
{
 8005f4a:	b480      	push	{r7}
 8005f4c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005f4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005f58:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005f5c:	6013      	str	r3, [r2, #0]
}
 8005f5e:	bf00      	nop
 8005f60:	46bd      	mov	sp, r7
 8005f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f66:	4770      	bx	lr

08005f68 <LL_RCC_PLLSAI1_Disable>:
{
 8005f68:	b480      	push	{r7}
 8005f6a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005f6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005f76:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005f7a:	6013      	str	r3, [r2, #0]
}
 8005f7c:	bf00      	nop
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f84:	4770      	bx	lr

08005f86 <LL_RCC_PLLSAI1_IsReady>:
{
 8005f86:	b480      	push	{r7}
 8005f88:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8005f8a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005f94:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005f98:	d101      	bne.n	8005f9e <LL_RCC_PLLSAI1_IsReady+0x18>
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	e000      	b.n	8005fa0 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8005f9e:	2300      	movs	r3, #0
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa8:	4770      	bx	lr

08005faa <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005faa:	b580      	push	{r7, lr}
 8005fac:	b088      	sub	sp, #32
 8005fae:	af00      	add	r7, sp, #0
 8005fb0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d034      	beq.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fca:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005fce:	d021      	beq.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8005fd0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005fd4:	d81b      	bhi.n	800600e <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005fd6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005fda:	d01d      	beq.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8005fdc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005fe0:	d815      	bhi.n	800600e <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d00b      	beq.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0x54>
 8005fe6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005fea:	d110      	bne.n	800600e <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8005fec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ff0:	68db      	ldr	r3, [r3, #12]
 8005ff2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005ff6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ffa:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8005ffc:	e00d      	b.n	800601a <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	3304      	adds	r3, #4
 8006002:	4618      	mov	r0, r3
 8006004:	f000 f947 	bl	8006296 <RCCEx_PLLSAI1_ConfigNP>
 8006008:	4603      	mov	r3, r0
 800600a:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800600c:	e005      	b.n	800601a <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800600e:	2301      	movs	r3, #1
 8006010:	77fb      	strb	r3, [r7, #31]
        break;
 8006012:	e002      	b.n	800601a <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8006014:	bf00      	nop
 8006016:	e000      	b.n	800601a <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8006018:	bf00      	nop
    }

    if (ret == HAL_OK)
 800601a:	7ffb      	ldrb	r3, [r7, #31]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d105      	bne.n	800602c <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006024:	4618      	mov	r0, r3
 8006026:	f7ff fee8 	bl	8005dfa <LL_RCC_SetSAIClockSource>
 800602a:	e001      	b.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800602c:	7ffb      	ldrb	r3, [r7, #31]
 800602e:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006038:	2b00      	cmp	r3, #0
 800603a:	d046      	beq.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800603c:	f7ff ff56 	bl	8005eec <LL_RCC_GetRTCClockSource>
 8006040:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006046:	69ba      	ldr	r2, [r7, #24]
 8006048:	429a      	cmp	r2, r3
 800604a:	d03c      	beq.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800604c:	f7fe fc68 	bl	8004920 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8006050:	69bb      	ldr	r3, [r7, #24]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d105      	bne.n	8006062 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800605a:	4618      	mov	r0, r3
 800605c:	f7ff ff30 	bl	8005ec0 <LL_RCC_SetRTCClockSource>
 8006060:	e02e      	b.n	80060c0 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8006062:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006066:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800606a:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800606c:	f7ff ff4b 	bl	8005f06 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8006070:	f7ff ff5a 	bl	8005f28 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8006074:	697b      	ldr	r3, [r7, #20]
 8006076:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800607e:	4313      	orrs	r3, r2
 8006080:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8006082:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800608c:	f7ff fdf0 	bl	8005c70 <LL_RCC_LSE_IsEnabled>
 8006090:	4603      	mov	r3, r0
 8006092:	2b01      	cmp	r3, #1
 8006094:	d114      	bne.n	80060c0 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006096:	f7fd f8e1 	bl	800325c <HAL_GetTick>
 800609a:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800609c:	e00b      	b.n	80060b6 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800609e:	f7fd f8dd 	bl	800325c <HAL_GetTick>
 80060a2:	4602      	mov	r2, r0
 80060a4:	693b      	ldr	r3, [r7, #16]
 80060a6:	1ad3      	subs	r3, r2, r3
 80060a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d902      	bls.n	80060b6 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 80060b0:	2303      	movs	r3, #3
 80060b2:	77fb      	strb	r3, [r7, #31]
              break;
 80060b4:	e004      	b.n	80060c0 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80060b6:	f7ff fded 	bl	8005c94 <LL_RCC_LSE_IsReady>
 80060ba:	4603      	mov	r3, r0
 80060bc:	2b01      	cmp	r3, #1
 80060be:	d1ee      	bne.n	800609e <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80060c0:	7ffb      	ldrb	r3, [r7, #31]
 80060c2:	77bb      	strb	r3, [r7, #30]
 80060c4:	e001      	b.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060c6:	7ffb      	ldrb	r3, [r7, #31]
 80060c8:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f003 0301 	and.w	r3, r3, #1
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d004      	beq.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	699b      	ldr	r3, [r3, #24]
 80060da:	4618      	mov	r0, r3
 80060dc:	f7ff fe2a 	bl	8005d34 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f003 0302 	and.w	r3, r3, #2
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d004      	beq.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	69db      	ldr	r3, [r3, #28]
 80060f0:	4618      	mov	r0, r3
 80060f2:	f7ff fe35 	bl	8005d60 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f003 0310 	and.w	r3, r3, #16
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d004      	beq.n	800610c <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006106:	4618      	mov	r0, r3
 8006108:	f7ff fe5d 	bl	8005dc6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f003 0320 	and.w	r3, r3, #32
 8006114:	2b00      	cmp	r3, #0
 8006116:	d004      	beq.n	8006122 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800611c:	4618      	mov	r0, r3
 800611e:	f7ff fe52 	bl	8005dc6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f003 0304 	and.w	r3, r3, #4
 800612a:	2b00      	cmp	r3, #0
 800612c:	d004      	beq.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6a1b      	ldr	r3, [r3, #32]
 8006132:	4618      	mov	r0, r3
 8006134:	f7ff fe2a 	bl	8005d8c <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f003 0308 	and.w	r3, r3, #8
 8006140:	2b00      	cmp	r3, #0
 8006142:	d004      	beq.n	800614e <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006148:	4618      	mov	r0, r3
 800614a:	f7ff fe1f 	bl	8005d8c <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006156:	2b00      	cmp	r3, #0
 8006158:	d022      	beq.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800615e:	4618      	mov	r0, r3
 8006160:	f7ff fe8d 	bl	8005e7e <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006168:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800616c:	d107      	bne.n	800617e <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800616e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006172:	68db      	ldr	r3, [r3, #12]
 8006174:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006178:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800617c:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006182:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006186:	d10b      	bne.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	3304      	adds	r3, #4
 800618c:	4618      	mov	r0, r3
 800618e:	f000 f8dd 	bl	800634c <RCCEx_PLLSAI1_ConfigNQ>
 8006192:	4603      	mov	r3, r0
 8006194:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8006196:	7ffb      	ldrb	r3, [r7, #31]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d001      	beq.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 800619c:	7ffb      	ldrb	r3, [r7, #31]
 800619e:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d02b      	beq.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061b4:	d008      	beq.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061ba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80061be:	d003      	beq.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d105      	bne.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061cc:	4618      	mov	r0, r3
 80061ce:	f7ff fe2a 	bl	8005e26 <LL_RCC_SetRNGClockSource>
 80061d2:	e00a      	b.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0x240>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061d8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80061dc:	60fb      	str	r3, [r7, #12]
 80061de:	2000      	movs	r0, #0
 80061e0:	f7ff fe21 	bl	8005e26 <LL_RCC_SetRNGClockSource>
 80061e4:	68f8      	ldr	r0, [r7, #12]
 80061e6:	f7ff fe34 	bl	8005e52 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061ee:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 80061f2:	d107      	bne.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80061f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80061f8:	68db      	ldr	r3, [r3, #12]
 80061fa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80061fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006202:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800620c:	2b00      	cmp	r3, #0
 800620e:	d022      	beq.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006214:	4618      	mov	r0, r3
 8006216:	f7ff fe3d 	bl	8005e94 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800621e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006222:	d107      	bne.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006224:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006228:	68db      	ldr	r3, [r3, #12]
 800622a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800622e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006232:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006238:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800623c:	d10b      	bne.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	3304      	adds	r3, #4
 8006242:	4618      	mov	r0, r3
 8006244:	f000 f8dd 	bl	8006402 <RCCEx_PLLSAI1_ConfigNR>
 8006248:	4603      	mov	r3, r0
 800624a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800624c:	7ffb      	ldrb	r3, [r7, #31]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d001      	beq.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8006252:	7ffb      	ldrb	r3, [r7, #31]
 8006254:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800625e:	2b00      	cmp	r3, #0
 8006260:	d004      	beq.n	800626c <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006266:	4618      	mov	r0, r3
 8006268:	f7ff fd26 	bl	8005cb8 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006274:	2b00      	cmp	r3, #0
 8006276:	d009      	beq.n	800628c <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800627c:	4618      	mov	r0, r3
 800627e:	f7ff fd45 	bl	8005d0c <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006286:	4618      	mov	r0, r3
 8006288:	f7ff fd2c 	bl	8005ce4 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 800628c:	7fbb      	ldrb	r3, [r7, #30]
}
 800628e:	4618      	mov	r0, r3
 8006290:	3720      	adds	r7, #32
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}

08006296 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8006296:	b580      	push	{r7, lr}
 8006298:	b084      	sub	sp, #16
 800629a:	af00      	add	r7, sp, #0
 800629c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800629e:	2300      	movs	r3, #0
 80062a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80062a2:	f7ff fe61 	bl	8005f68 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80062a6:	f7fc ffd9 	bl	800325c <HAL_GetTick>
 80062aa:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80062ac:	e009      	b.n	80062c2 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80062ae:	f7fc ffd5 	bl	800325c <HAL_GetTick>
 80062b2:	4602      	mov	r2, r0
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	1ad3      	subs	r3, r2, r3
 80062b8:	2b02      	cmp	r3, #2
 80062ba:	d902      	bls.n	80062c2 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80062bc:	2303      	movs	r3, #3
 80062be:	73fb      	strb	r3, [r7, #15]
      break;
 80062c0:	e004      	b.n	80062cc <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80062c2:	f7ff fe60 	bl	8005f86 <LL_RCC_PLLSAI1_IsReady>
 80062c6:	4603      	mov	r3, r0
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d1f0      	bne.n	80062ae <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80062cc:	7bfb      	ldrb	r3, [r7, #15]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d137      	bne.n	8006342 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80062d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80062d6:	691b      	ldr	r3, [r3, #16]
 80062d8:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	021b      	lsls	r3, r3, #8
 80062e2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80062e6:	4313      	orrs	r3, r2
 80062e8:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80062ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80062ee:	691b      	ldr	r3, [r3, #16]
 80062f0:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80062fc:	4313      	orrs	r3, r2
 80062fe:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8006300:	f7ff fe23 	bl	8005f4a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006304:	f7fc ffaa 	bl	800325c <HAL_GetTick>
 8006308:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800630a:	e009      	b.n	8006320 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800630c:	f7fc ffa6 	bl	800325c <HAL_GetTick>
 8006310:	4602      	mov	r2, r0
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	1ad3      	subs	r3, r2, r3
 8006316:	2b02      	cmp	r3, #2
 8006318:	d902      	bls.n	8006320 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800631a:	2303      	movs	r3, #3
 800631c:	73fb      	strb	r3, [r7, #15]
        break;
 800631e:	e004      	b.n	800632a <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006320:	f7ff fe31 	bl	8005f86 <LL_RCC_PLLSAI1_IsReady>
 8006324:	4603      	mov	r3, r0
 8006326:	2b01      	cmp	r3, #1
 8006328:	d1f0      	bne.n	800630c <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800632a:	7bfb      	ldrb	r3, [r7, #15]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d108      	bne.n	8006342 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006330:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006334:	691a      	ldr	r2, [r3, #16]
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	691b      	ldr	r3, [r3, #16]
 800633a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800633e:	4313      	orrs	r3, r2
 8006340:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8006342:	7bfb      	ldrb	r3, [r7, #15]
}
 8006344:	4618      	mov	r0, r3
 8006346:	3710      	adds	r7, #16
 8006348:	46bd      	mov	sp, r7
 800634a:	bd80      	pop	{r7, pc}

0800634c <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b084      	sub	sp, #16
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006354:	2300      	movs	r3, #0
 8006356:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8006358:	f7ff fe06 	bl	8005f68 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800635c:	f7fc ff7e 	bl	800325c <HAL_GetTick>
 8006360:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006362:	e009      	b.n	8006378 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006364:	f7fc ff7a 	bl	800325c <HAL_GetTick>
 8006368:	4602      	mov	r2, r0
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	1ad3      	subs	r3, r2, r3
 800636e:	2b02      	cmp	r3, #2
 8006370:	d902      	bls.n	8006378 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8006372:	2303      	movs	r3, #3
 8006374:	73fb      	strb	r3, [r7, #15]
      break;
 8006376:	e004      	b.n	8006382 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006378:	f7ff fe05 	bl	8005f86 <LL_RCC_PLLSAI1_IsReady>
 800637c:	4603      	mov	r3, r0
 800637e:	2b00      	cmp	r3, #0
 8006380:	d1f0      	bne.n	8006364 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8006382:	7bfb      	ldrb	r3, [r7, #15]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d137      	bne.n	80063f8 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8006388:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800638c:	691b      	ldr	r3, [r3, #16]
 800638e:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	021b      	lsls	r3, r3, #8
 8006398:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800639c:	4313      	orrs	r3, r2
 800639e:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80063a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80063a4:	691b      	ldr	r3, [r3, #16]
 80063a6:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	689b      	ldr	r3, [r3, #8]
 80063ae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80063b2:	4313      	orrs	r3, r2
 80063b4:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80063b6:	f7ff fdc8 	bl	8005f4a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80063ba:	f7fc ff4f 	bl	800325c <HAL_GetTick>
 80063be:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80063c0:	e009      	b.n	80063d6 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80063c2:	f7fc ff4b 	bl	800325c <HAL_GetTick>
 80063c6:	4602      	mov	r2, r0
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	1ad3      	subs	r3, r2, r3
 80063cc:	2b02      	cmp	r3, #2
 80063ce:	d902      	bls.n	80063d6 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80063d0:	2303      	movs	r3, #3
 80063d2:	73fb      	strb	r3, [r7, #15]
        break;
 80063d4:	e004      	b.n	80063e0 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80063d6:	f7ff fdd6 	bl	8005f86 <LL_RCC_PLLSAI1_IsReady>
 80063da:	4603      	mov	r3, r0
 80063dc:	2b01      	cmp	r3, #1
 80063de:	d1f0      	bne.n	80063c2 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80063e0:	7bfb      	ldrb	r3, [r7, #15]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d108      	bne.n	80063f8 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80063e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80063ea:	691a      	ldr	r2, [r3, #16]
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	691b      	ldr	r3, [r3, #16]
 80063f0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80063f4:	4313      	orrs	r3, r2
 80063f6:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80063f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80063fa:	4618      	mov	r0, r3
 80063fc:	3710      	adds	r7, #16
 80063fe:	46bd      	mov	sp, r7
 8006400:	bd80      	pop	{r7, pc}

08006402 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8006402:	b580      	push	{r7, lr}
 8006404:	b084      	sub	sp, #16
 8006406:	af00      	add	r7, sp, #0
 8006408:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800640a:	2300      	movs	r3, #0
 800640c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800640e:	f7ff fdab 	bl	8005f68 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006412:	f7fc ff23 	bl	800325c <HAL_GetTick>
 8006416:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006418:	e009      	b.n	800642e <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800641a:	f7fc ff1f 	bl	800325c <HAL_GetTick>
 800641e:	4602      	mov	r2, r0
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	1ad3      	subs	r3, r2, r3
 8006424:	2b02      	cmp	r3, #2
 8006426:	d902      	bls.n	800642e <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8006428:	2303      	movs	r3, #3
 800642a:	73fb      	strb	r3, [r7, #15]
      break;
 800642c:	e004      	b.n	8006438 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800642e:	f7ff fdaa 	bl	8005f86 <LL_RCC_PLLSAI1_IsReady>
 8006432:	4603      	mov	r3, r0
 8006434:	2b00      	cmp	r3, #0
 8006436:	d1f0      	bne.n	800641a <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8006438:	7bfb      	ldrb	r3, [r7, #15]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d137      	bne.n	80064ae <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800643e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006442:	691b      	ldr	r3, [r3, #16]
 8006444:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	021b      	lsls	r3, r3, #8
 800644e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006452:	4313      	orrs	r3, r2
 8006454:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8006456:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800645a:	691b      	ldr	r3, [r3, #16]
 800645c:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	68db      	ldr	r3, [r3, #12]
 8006464:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006468:	4313      	orrs	r3, r2
 800646a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800646c:	f7ff fd6d 	bl	8005f4a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006470:	f7fc fef4 	bl	800325c <HAL_GetTick>
 8006474:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006476:	e009      	b.n	800648c <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006478:	f7fc fef0 	bl	800325c <HAL_GetTick>
 800647c:	4602      	mov	r2, r0
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	1ad3      	subs	r3, r2, r3
 8006482:	2b02      	cmp	r3, #2
 8006484:	d902      	bls.n	800648c <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8006486:	2303      	movs	r3, #3
 8006488:	73fb      	strb	r3, [r7, #15]
        break;
 800648a:	e004      	b.n	8006496 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800648c:	f7ff fd7b 	bl	8005f86 <LL_RCC_PLLSAI1_IsReady>
 8006490:	4603      	mov	r3, r0
 8006492:	2b01      	cmp	r3, #1
 8006494:	d1f0      	bne.n	8006478 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8006496:	7bfb      	ldrb	r3, [r7, #15]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d108      	bne.n	80064ae <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800649c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80064a0:	691a      	ldr	r2, [r3, #16]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	691b      	ldr	r3, [r3, #16]
 80064a6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80064aa:	4313      	orrs	r3, r2
 80064ac:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80064ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	3710      	adds	r7, #16
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bd80      	pop	{r7, pc}

080064b8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b084      	sub	sp, #16
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d101      	bne.n	80064ca <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80064c6:	2301      	movs	r3, #1
 80064c8:	e09f      	b.n	800660a <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80064d0:	b2db      	uxtb	r3, r3
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d106      	bne.n	80064e4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2200      	movs	r2, #0
 80064da:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f7fc fcca 	bl	8002e78 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2202      	movs	r2, #2
 80064e8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80064ec:	4b49      	ldr	r3, [pc, #292]	@ (8006614 <HAL_RTC_Init+0x15c>)
 80064ee:	68db      	ldr	r3, [r3, #12]
 80064f0:	f003 0310 	and.w	r3, r3, #16
 80064f4:	2b10      	cmp	r3, #16
 80064f6:	d07e      	beq.n	80065f6 <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	22ca      	movs	r2, #202	@ 0xca
 80064fe:	625a      	str	r2, [r3, #36]	@ 0x24
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	2253      	movs	r2, #83	@ 0x53
 8006506:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006508:	6878      	ldr	r0, [r7, #4]
 800650a:	f000 f8ab 	bl	8006664 <RTC_EnterInitMode>
 800650e:	4603      	mov	r3, r0
 8006510:	2b00      	cmp	r3, #0
 8006512:	d00a      	beq.n	800652a <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	22ff      	movs	r2, #255	@ 0xff
 800651a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2204      	movs	r2, #4
 8006520:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      status = HAL_ERROR;
 8006524:	2301      	movs	r3, #1
 8006526:	73fb      	strb	r3, [r7, #15]
 8006528:	e067      	b.n	80065fa <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	689b      	ldr	r3, [r3, #8]
 8006530:	687a      	ldr	r2, [r7, #4]
 8006532:	6812      	ldr	r2, [r2, #0]
 8006534:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8006538:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800653c:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	6899      	ldr	r1, [r3, #8]
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	685a      	ldr	r2, [r3, #4]
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	691b      	ldr	r3, [r3, #16]
 800654c:	431a      	orrs	r2, r3
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	699b      	ldr	r3, [r3, #24]
 8006552:	431a      	orrs	r2, r3
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	430a      	orrs	r2, r1
 800655a:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	687a      	ldr	r2, [r7, #4]
 8006562:	68d2      	ldr	r2, [r2, #12]
 8006564:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	6919      	ldr	r1, [r3, #16]
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	689b      	ldr	r3, [r3, #8]
 8006570:	041a      	lsls	r2, r3, #16
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	430a      	orrs	r2, r1
 8006578:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	68da      	ldr	r2, [r3, #12]
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006588:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f022 0203 	bic.w	r2, r2, #3
 8006598:	64da      	str	r2, [r3, #76]	@ 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	69da      	ldr	r2, [r3, #28]
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	695b      	ldr	r3, [r3, #20]
 80065a8:	431a      	orrs	r2, r3
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	430a      	orrs	r2, r1
 80065b0:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	689b      	ldr	r3, [r3, #8]
 80065b8:	f003 0320 	and.w	r3, r3, #32
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d113      	bne.n	80065e8 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80065c0:	6878      	ldr	r0, [r7, #4]
 80065c2:	f000 f829 	bl	8006618 <HAL_RTC_WaitForSynchro>
 80065c6:	4603      	mov	r3, r0
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d00d      	beq.n	80065e8 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	22ff      	movs	r2, #255	@ 0xff
 80065d2:	625a      	str	r2, [r3, #36]	@ 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2204      	movs	r2, #4
 80065d8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2200      	movs	r2, #0
 80065e0:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 80065e4:	2301      	movs	r3, #1
 80065e6:	e010      	b.n	800660a <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	22ff      	movs	r2, #255	@ 0xff
 80065ee:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      status = HAL_OK;
 80065f0:	2300      	movs	r3, #0
 80065f2:	73fb      	strb	r3, [r7, #15]
 80065f4:	e001      	b.n	80065fa <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 80065f6:	2300      	movs	r3, #0
 80065f8:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80065fa:	7bfb      	ldrb	r3, [r7, #15]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d103      	bne.n	8006608 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2201      	movs	r2, #1
 8006604:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  return status;
 8006608:	7bfb      	ldrb	r3, [r7, #15]
}
 800660a:	4618      	mov	r0, r3
 800660c:	3710      	adds	r7, #16
 800660e:	46bd      	mov	sp, r7
 8006610:	bd80      	pop	{r7, pc}
 8006612:	bf00      	nop
 8006614:	40002800 	.word	0x40002800

08006618 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b084      	sub	sp, #16
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	68da      	ldr	r2, [r3, #12]
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800662e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8006630:	f7fc fe14 	bl	800325c <HAL_GetTick>
 8006634:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006636:	e009      	b.n	800664c <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006638:	f7fc fe10 	bl	800325c <HAL_GetTick>
 800663c:	4602      	mov	r2, r0
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	1ad3      	subs	r3, r2, r3
 8006642:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006646:	d901      	bls.n	800664c <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8006648:	2303      	movs	r3, #3
 800664a:	e007      	b.n	800665c <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	68db      	ldr	r3, [r3, #12]
 8006652:	f003 0320 	and.w	r3, r3, #32
 8006656:	2b00      	cmp	r3, #0
 8006658:	d0ee      	beq.n	8006638 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800665a:	2300      	movs	r3, #0
}
 800665c:	4618      	mov	r0, r3
 800665e:	3710      	adds	r7, #16
 8006660:	46bd      	mov	sp, r7
 8006662:	bd80      	pop	{r7, pc}

08006664 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b084      	sub	sp, #16
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	68db      	ldr	r3, [r3, #12]
 8006672:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006676:	2b00      	cmp	r3, #0
 8006678:	d119      	bne.n	80066ae <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f04f 32ff 	mov.w	r2, #4294967295
 8006682:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006684:	f7fc fdea 	bl	800325c <HAL_GetTick>
 8006688:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800668a:	e009      	b.n	80066a0 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800668c:	f7fc fde6 	bl	800325c <HAL_GetTick>
 8006690:	4602      	mov	r2, r0
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	1ad3      	subs	r3, r2, r3
 8006696:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800669a:	d901      	bls.n	80066a0 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 800669c:	2303      	movs	r3, #3
 800669e:	e007      	b.n	80066b0 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	68db      	ldr	r3, [r3, #12]
 80066a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d0ee      	beq.n	800668c <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 80066ae:	2300      	movs	r3, #0
}
 80066b0:	4618      	mov	r0, r3
 80066b2:	3710      	adds	r7, #16
 80066b4:	46bd      	mov	sp, r7
 80066b6:	bd80      	pop	{r7, pc}

080066b8 <HAL_RTCEx_EnableBypassShadow>:
  * @note   When the Bypass Shadow is enabled the calendar value are taken
  *         directly from the Calendar counter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 80066b8:	b480      	push	{r7}
 80066ba:	b083      	sub	sp, #12
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80066c6:	2b01      	cmp	r3, #1
 80066c8:	d101      	bne.n	80066ce <HAL_RTCEx_EnableBypassShadow+0x16>
 80066ca:	2302      	movs	r3, #2
 80066cc:	e024      	b.n	8006718 <HAL_RTCEx_EnableBypassShadow+0x60>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2201      	movs	r2, #1
 80066d2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2202      	movs	r2, #2
 80066da:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	22ca      	movs	r2, #202	@ 0xca
 80066e4:	625a      	str	r2, [r3, #36]	@ 0x24
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	2253      	movs	r2, #83	@ 0x53
 80066ec:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	689a      	ldr	r2, [r3, #8]
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f042 0220 	orr.w	r2, r2, #32
 80066fc:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	22ff      	movs	r2, #255	@ 0xff
 8006704:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2201      	movs	r2, #1
 800670a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2200      	movs	r2, #0
 8006712:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8006716:	2300      	movs	r3, #0
}
 8006718:	4618      	mov	r0, r3
 800671a:	370c      	adds	r7, #12
 800671c:	46bd      	mov	sp, r7
 800671e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006722:	4770      	bx	lr

08006724 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b084      	sub	sp, #16
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d101      	bne.n	8006736 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006732:	2301      	movs	r3, #1
 8006734:	e095      	b.n	8006862 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800673a:	2b00      	cmp	r3, #0
 800673c:	d108      	bne.n	8006750 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	685b      	ldr	r3, [r3, #4]
 8006742:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006746:	d009      	beq.n	800675c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2200      	movs	r2, #0
 800674c:	61da      	str	r2, [r3, #28]
 800674e:	e005      	b.n	800675c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2200      	movs	r2, #0
 8006754:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2200      	movs	r2, #0
 800675a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2200      	movs	r2, #0
 8006760:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006768:	b2db      	uxtb	r3, r3
 800676a:	2b00      	cmp	r3, #0
 800676c:	d106      	bne.n	800677c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2200      	movs	r2, #0
 8006772:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f000 f877 	bl	800686a <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2202      	movs	r2, #2
 8006780:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	681a      	ldr	r2, [r3, #0]
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006792:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	68db      	ldr	r3, [r3, #12]
 8006798:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800679c:	d902      	bls.n	80067a4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800679e:	2300      	movs	r3, #0
 80067a0:	60fb      	str	r3, [r7, #12]
 80067a2:	e002      	b.n	80067aa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80067a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80067a8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	68db      	ldr	r3, [r3, #12]
 80067ae:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80067b2:	d007      	beq.n	80067c4 <HAL_SPI_Init+0xa0>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	68db      	ldr	r3, [r3, #12]
 80067b8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80067bc:	d002      	beq.n	80067c4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2200      	movs	r2, #0
 80067c2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	685b      	ldr	r3, [r3, #4]
 80067c8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	689b      	ldr	r3, [r3, #8]
 80067d0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80067d4:	431a      	orrs	r2, r3
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	691b      	ldr	r3, [r3, #16]
 80067da:	f003 0302 	and.w	r3, r3, #2
 80067de:	431a      	orrs	r2, r3
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	695b      	ldr	r3, [r3, #20]
 80067e4:	f003 0301 	and.w	r3, r3, #1
 80067e8:	431a      	orrs	r2, r3
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	699b      	ldr	r3, [r3, #24]
 80067ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80067f2:	431a      	orrs	r2, r3
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	69db      	ldr	r3, [r3, #28]
 80067f8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80067fc:	431a      	orrs	r2, r3
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6a1b      	ldr	r3, [r3, #32]
 8006802:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006806:	ea42 0103 	orr.w	r1, r2, r3
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800680e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	430a      	orrs	r2, r1
 8006818:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	699b      	ldr	r3, [r3, #24]
 800681e:	0c1b      	lsrs	r3, r3, #16
 8006820:	f003 0204 	and.w	r2, r3, #4
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006828:	f003 0310 	and.w	r3, r3, #16
 800682c:	431a      	orrs	r2, r3
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006832:	f003 0308 	and.w	r3, r3, #8
 8006836:	431a      	orrs	r2, r3
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	68db      	ldr	r3, [r3, #12]
 800683c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8006840:	ea42 0103 	orr.w	r1, r2, r3
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	430a      	orrs	r2, r1
 8006850:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2200      	movs	r2, #0
 8006856:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2201      	movs	r2, #1
 800685c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8006860:	2300      	movs	r3, #0
}
 8006862:	4618      	mov	r0, r3
 8006864:	3710      	adds	r7, #16
 8006866:	46bd      	mov	sp, r7
 8006868:	bd80      	pop	{r7, pc}

0800686a <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 800686a:	b480      	push	{r7}
 800686c:	b083      	sub	sp, #12
 800686e:	af00      	add	r7, sp, #0
 8006870:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8006872:	bf00      	nop
 8006874:	370c      	adds	r7, #12
 8006876:	46bd      	mov	sp, r7
 8006878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687c:	4770      	bx	lr

0800687e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800687e:	b580      	push	{r7, lr}
 8006880:	b088      	sub	sp, #32
 8006882:	af00      	add	r7, sp, #0
 8006884:	60f8      	str	r0, [r7, #12]
 8006886:	60b9      	str	r1, [r7, #8]
 8006888:	603b      	str	r3, [r7, #0]
 800688a:	4613      	mov	r3, r2
 800688c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800688e:	2300      	movs	r3, #0
 8006890:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006898:	2b01      	cmp	r3, #1
 800689a:	d101      	bne.n	80068a0 <HAL_SPI_Transmit+0x22>
 800689c:	2302      	movs	r3, #2
 800689e:	e15f      	b.n	8006b60 <HAL_SPI_Transmit+0x2e2>
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	2201      	movs	r2, #1
 80068a4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80068a8:	f7fc fcd8 	bl	800325c <HAL_GetTick>
 80068ac:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80068ae:	88fb      	ldrh	r3, [r7, #6]
 80068b0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80068b8:	b2db      	uxtb	r3, r3
 80068ba:	2b01      	cmp	r3, #1
 80068bc:	d002      	beq.n	80068c4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80068be:	2302      	movs	r3, #2
 80068c0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80068c2:	e148      	b.n	8006b56 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d002      	beq.n	80068d0 <HAL_SPI_Transmit+0x52>
 80068ca:	88fb      	ldrh	r3, [r7, #6]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d102      	bne.n	80068d6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80068d0:	2301      	movs	r3, #1
 80068d2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80068d4:	e13f      	b.n	8006b56 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	2203      	movs	r2, #3
 80068da:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	2200      	movs	r2, #0
 80068e2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	68ba      	ldr	r2, [r7, #8]
 80068e8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	88fa      	ldrh	r2, [r7, #6]
 80068ee:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	88fa      	ldrh	r2, [r7, #6]
 80068f4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	2200      	movs	r2, #0
 80068fa:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	2200      	movs	r2, #0
 8006900:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	2200      	movs	r2, #0
 8006908:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	2200      	movs	r2, #0
 8006910:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	2200      	movs	r2, #0
 8006916:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	689b      	ldr	r3, [r3, #8]
 800691c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006920:	d10f      	bne.n	8006942 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	681a      	ldr	r2, [r3, #0]
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006930:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	681a      	ldr	r2, [r3, #0]
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006940:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800694c:	2b40      	cmp	r3, #64	@ 0x40
 800694e:	d007      	beq.n	8006960 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	681a      	ldr	r2, [r3, #0]
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800695e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	68db      	ldr	r3, [r3, #12]
 8006964:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006968:	d94f      	bls.n	8006a0a <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d002      	beq.n	8006978 <HAL_SPI_Transmit+0xfa>
 8006972:	8afb      	ldrh	r3, [r7, #22]
 8006974:	2b01      	cmp	r3, #1
 8006976:	d142      	bne.n	80069fe <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800697c:	881a      	ldrh	r2, [r3, #0]
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006988:	1c9a      	adds	r2, r3, #2
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006992:	b29b      	uxth	r3, r3
 8006994:	3b01      	subs	r3, #1
 8006996:	b29a      	uxth	r2, r3
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800699c:	e02f      	b.n	80069fe <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	689b      	ldr	r3, [r3, #8]
 80069a4:	f003 0302 	and.w	r3, r3, #2
 80069a8:	2b02      	cmp	r3, #2
 80069aa:	d112      	bne.n	80069d2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069b0:	881a      	ldrh	r2, [r3, #0]
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069bc:	1c9a      	adds	r2, r3, #2
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80069c6:	b29b      	uxth	r3, r3
 80069c8:	3b01      	subs	r3, #1
 80069ca:	b29a      	uxth	r2, r3
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80069d0:	e015      	b.n	80069fe <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80069d2:	f7fc fc43 	bl	800325c <HAL_GetTick>
 80069d6:	4602      	mov	r2, r0
 80069d8:	69bb      	ldr	r3, [r7, #24]
 80069da:	1ad3      	subs	r3, r2, r3
 80069dc:	683a      	ldr	r2, [r7, #0]
 80069de:	429a      	cmp	r2, r3
 80069e0:	d803      	bhi.n	80069ea <HAL_SPI_Transmit+0x16c>
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069e8:	d102      	bne.n	80069f0 <HAL_SPI_Transmit+0x172>
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d106      	bne.n	80069fe <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 80069f0:	2303      	movs	r3, #3
 80069f2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	2201      	movs	r2, #1
 80069f8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80069fc:	e0ab      	b.n	8006b56 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006a02:	b29b      	uxth	r3, r3
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d1ca      	bne.n	800699e <HAL_SPI_Transmit+0x120>
 8006a08:	e080      	b.n	8006b0c <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	685b      	ldr	r3, [r3, #4]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d002      	beq.n	8006a18 <HAL_SPI_Transmit+0x19a>
 8006a12:	8afb      	ldrh	r3, [r7, #22]
 8006a14:	2b01      	cmp	r3, #1
 8006a16:	d174      	bne.n	8006b02 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006a1c:	b29b      	uxth	r3, r3
 8006a1e:	2b01      	cmp	r3, #1
 8006a20:	d912      	bls.n	8006a48 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a26:	881a      	ldrh	r2, [r3, #0]
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a32:	1c9a      	adds	r2, r3, #2
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006a3c:	b29b      	uxth	r3, r3
 8006a3e:	3b02      	subs	r3, #2
 8006a40:	b29a      	uxth	r2, r3
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006a46:	e05c      	b.n	8006b02 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	330c      	adds	r3, #12
 8006a52:	7812      	ldrb	r2, [r2, #0]
 8006a54:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a5a:	1c5a      	adds	r2, r3, #1
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006a64:	b29b      	uxth	r3, r3
 8006a66:	3b01      	subs	r3, #1
 8006a68:	b29a      	uxth	r2, r3
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006a6e:	e048      	b.n	8006b02 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	689b      	ldr	r3, [r3, #8]
 8006a76:	f003 0302 	and.w	r3, r3, #2
 8006a7a:	2b02      	cmp	r3, #2
 8006a7c:	d12b      	bne.n	8006ad6 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006a82:	b29b      	uxth	r3, r3
 8006a84:	2b01      	cmp	r3, #1
 8006a86:	d912      	bls.n	8006aae <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a8c:	881a      	ldrh	r2, [r3, #0]
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a98:	1c9a      	adds	r2, r3, #2
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006aa2:	b29b      	uxth	r3, r3
 8006aa4:	3b02      	subs	r3, #2
 8006aa6:	b29a      	uxth	r2, r3
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006aac:	e029      	b.n	8006b02 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	330c      	adds	r3, #12
 8006ab8:	7812      	ldrb	r2, [r2, #0]
 8006aba:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ac0:	1c5a      	adds	r2, r3, #1
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006aca:	b29b      	uxth	r3, r3
 8006acc:	3b01      	subs	r3, #1
 8006ace:	b29a      	uxth	r2, r3
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006ad4:	e015      	b.n	8006b02 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006ad6:	f7fc fbc1 	bl	800325c <HAL_GetTick>
 8006ada:	4602      	mov	r2, r0
 8006adc:	69bb      	ldr	r3, [r7, #24]
 8006ade:	1ad3      	subs	r3, r2, r3
 8006ae0:	683a      	ldr	r2, [r7, #0]
 8006ae2:	429a      	cmp	r2, r3
 8006ae4:	d803      	bhi.n	8006aee <HAL_SPI_Transmit+0x270>
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aec:	d102      	bne.n	8006af4 <HAL_SPI_Transmit+0x276>
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d106      	bne.n	8006b02 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8006af4:	2303      	movs	r3, #3
 8006af6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	2201      	movs	r2, #1
 8006afc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8006b00:	e029      	b.n	8006b56 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006b06:	b29b      	uxth	r3, r3
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d1b1      	bne.n	8006a70 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006b0c:	69ba      	ldr	r2, [r7, #24]
 8006b0e:	6839      	ldr	r1, [r7, #0]
 8006b10:	68f8      	ldr	r0, [r7, #12]
 8006b12:	f000 fcf9 	bl	8007508 <SPI_EndRxTxTransaction>
 8006b16:	4603      	mov	r3, r0
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d002      	beq.n	8006b22 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	2220      	movs	r2, #32
 8006b20:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	689b      	ldr	r3, [r3, #8]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d10a      	bne.n	8006b40 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	613b      	str	r3, [r7, #16]
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	68db      	ldr	r3, [r3, #12]
 8006b34:	613b      	str	r3, [r7, #16]
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	689b      	ldr	r3, [r3, #8]
 8006b3c:	613b      	str	r3, [r7, #16]
 8006b3e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d002      	beq.n	8006b4e <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8006b48:	2301      	movs	r3, #1
 8006b4a:	77fb      	strb	r3, [r7, #31]
 8006b4c:	e003      	b.n	8006b56 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	2201      	movs	r2, #1
 8006b52:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8006b5e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006b60:	4618      	mov	r0, r3
 8006b62:	3720      	adds	r7, #32
 8006b64:	46bd      	mov	sp, r7
 8006b66:	bd80      	pop	{r7, pc}

08006b68 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b088      	sub	sp, #32
 8006b6c:	af02      	add	r7, sp, #8
 8006b6e:	60f8      	str	r0, [r7, #12]
 8006b70:	60b9      	str	r1, [r7, #8]
 8006b72:	603b      	str	r3, [r7, #0]
 8006b74:	4613      	mov	r3, r2
 8006b76:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006b78:	2300      	movs	r3, #0
 8006b7a:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006b82:	b2db      	uxtb	r3, r3
 8006b84:	2b01      	cmp	r3, #1
 8006b86:	d002      	beq.n	8006b8e <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8006b88:	2302      	movs	r3, #2
 8006b8a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006b8c:	e11a      	b.n	8006dc4 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	685b      	ldr	r3, [r3, #4]
 8006b92:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006b96:	d112      	bne.n	8006bbe <HAL_SPI_Receive+0x56>
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	689b      	ldr	r3, [r3, #8]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d10e      	bne.n	8006bbe <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	2204      	movs	r2, #4
 8006ba4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006ba8:	88fa      	ldrh	r2, [r7, #6]
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	9300      	str	r3, [sp, #0]
 8006bae:	4613      	mov	r3, r2
 8006bb0:	68ba      	ldr	r2, [r7, #8]
 8006bb2:	68b9      	ldr	r1, [r7, #8]
 8006bb4:	68f8      	ldr	r0, [r7, #12]
 8006bb6:	f000 f90e 	bl	8006dd6 <HAL_SPI_TransmitReceive>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	e107      	b.n	8006dce <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006bc4:	2b01      	cmp	r3, #1
 8006bc6:	d101      	bne.n	8006bcc <HAL_SPI_Receive+0x64>
 8006bc8:	2302      	movs	r3, #2
 8006bca:	e100      	b.n	8006dce <HAL_SPI_Receive+0x266>
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	2201      	movs	r2, #1
 8006bd0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006bd4:	f7fc fb42 	bl	800325c <HAL_GetTick>
 8006bd8:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d002      	beq.n	8006be6 <HAL_SPI_Receive+0x7e>
 8006be0:	88fb      	ldrh	r3, [r7, #6]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d102      	bne.n	8006bec <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006be6:	2301      	movs	r3, #1
 8006be8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006bea:	e0eb      	b.n	8006dc4 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	2204      	movs	r2, #4
 8006bf0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	68ba      	ldr	r2, [r7, #8]
 8006bfe:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	88fa      	ldrh	r2, [r7, #6]
 8006c04:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	88fa      	ldrh	r2, [r7, #6]
 8006c0c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	2200      	movs	r2, #0
 8006c14:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	2200      	movs	r2, #0
 8006c26:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	68db      	ldr	r3, [r3, #12]
 8006c32:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006c36:	d908      	bls.n	8006c4a <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	685a      	ldr	r2, [r3, #4]
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006c46:	605a      	str	r2, [r3, #4]
 8006c48:	e007      	b.n	8006c5a <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	685a      	ldr	r2, [r3, #4]
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006c58:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	689b      	ldr	r3, [r3, #8]
 8006c5e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006c62:	d10f      	bne.n	8006c84 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	681a      	ldr	r2, [r3, #0]
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006c72:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	681a      	ldr	r2, [r3, #0]
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006c82:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c8e:	2b40      	cmp	r3, #64	@ 0x40
 8006c90:	d007      	beq.n	8006ca2 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	681a      	ldr	r2, [r3, #0]
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006ca0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	68db      	ldr	r3, [r3, #12]
 8006ca6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006caa:	d86f      	bhi.n	8006d8c <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006cac:	e034      	b.n	8006d18 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	689b      	ldr	r3, [r3, #8]
 8006cb4:	f003 0301 	and.w	r3, r3, #1
 8006cb8:	2b01      	cmp	r3, #1
 8006cba:	d117      	bne.n	8006cec <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f103 020c 	add.w	r2, r3, #12
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cc8:	7812      	ldrb	r2, [r2, #0]
 8006cca:	b2d2      	uxtb	r2, r2
 8006ccc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cd2:	1c5a      	adds	r2, r3, #1
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006cde:	b29b      	uxth	r3, r3
 8006ce0:	3b01      	subs	r3, #1
 8006ce2:	b29a      	uxth	r2, r3
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8006cea:	e015      	b.n	8006d18 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006cec:	f7fc fab6 	bl	800325c <HAL_GetTick>
 8006cf0:	4602      	mov	r2, r0
 8006cf2:	693b      	ldr	r3, [r7, #16]
 8006cf4:	1ad3      	subs	r3, r2, r3
 8006cf6:	683a      	ldr	r2, [r7, #0]
 8006cf8:	429a      	cmp	r2, r3
 8006cfa:	d803      	bhi.n	8006d04 <HAL_SPI_Receive+0x19c>
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d02:	d102      	bne.n	8006d0a <HAL_SPI_Receive+0x1a2>
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d106      	bne.n	8006d18 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 8006d0a:	2303      	movs	r3, #3
 8006d0c:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	2201      	movs	r2, #1
 8006d12:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8006d16:	e055      	b.n	8006dc4 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006d1e:	b29b      	uxth	r3, r3
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d1c4      	bne.n	8006cae <HAL_SPI_Receive+0x146>
 8006d24:	e038      	b.n	8006d98 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	689b      	ldr	r3, [r3, #8]
 8006d2c:	f003 0301 	and.w	r3, r3, #1
 8006d30:	2b01      	cmp	r3, #1
 8006d32:	d115      	bne.n	8006d60 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	68da      	ldr	r2, [r3, #12]
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d3e:	b292      	uxth	r2, r2
 8006d40:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d46:	1c9a      	adds	r2, r3, #2
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006d52:	b29b      	uxth	r3, r3
 8006d54:	3b01      	subs	r3, #1
 8006d56:	b29a      	uxth	r2, r3
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8006d5e:	e015      	b.n	8006d8c <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006d60:	f7fc fa7c 	bl	800325c <HAL_GetTick>
 8006d64:	4602      	mov	r2, r0
 8006d66:	693b      	ldr	r3, [r7, #16]
 8006d68:	1ad3      	subs	r3, r2, r3
 8006d6a:	683a      	ldr	r2, [r7, #0]
 8006d6c:	429a      	cmp	r2, r3
 8006d6e:	d803      	bhi.n	8006d78 <HAL_SPI_Receive+0x210>
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d76:	d102      	bne.n	8006d7e <HAL_SPI_Receive+0x216>
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d106      	bne.n	8006d8c <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 8006d7e:	2303      	movs	r3, #3
 8006d80:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	2201      	movs	r2, #1
 8006d86:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8006d8a:	e01b      	b.n	8006dc4 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006d92:	b29b      	uxth	r3, r3
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d1c6      	bne.n	8006d26 <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006d98:	693a      	ldr	r2, [r7, #16]
 8006d9a:	6839      	ldr	r1, [r7, #0]
 8006d9c:	68f8      	ldr	r0, [r7, #12]
 8006d9e:	f000 fb5b 	bl	8007458 <SPI_EndRxTransaction>
 8006da2:	4603      	mov	r3, r0
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d002      	beq.n	8006dae <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	2220      	movs	r2, #32
 8006dac:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d002      	beq.n	8006dbc <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 8006db6:	2301      	movs	r3, #1
 8006db8:	75fb      	strb	r3, [r7, #23]
 8006dba:	e003      	b.n	8006dc4 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	2201      	movs	r2, #1
 8006dc0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8006dcc:	7dfb      	ldrb	r3, [r7, #23]
}
 8006dce:	4618      	mov	r0, r3
 8006dd0:	3718      	adds	r7, #24
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bd80      	pop	{r7, pc}

08006dd6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006dd6:	b580      	push	{r7, lr}
 8006dd8:	b08a      	sub	sp, #40	@ 0x28
 8006dda:	af00      	add	r7, sp, #0
 8006ddc:	60f8      	str	r0, [r7, #12]
 8006dde:	60b9      	str	r1, [r7, #8]
 8006de0:	607a      	str	r2, [r7, #4]
 8006de2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006de4:	2301      	movs	r3, #1
 8006de6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006de8:	2300      	movs	r3, #0
 8006dea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006df4:	2b01      	cmp	r3, #1
 8006df6:	d101      	bne.n	8006dfc <HAL_SPI_TransmitReceive+0x26>
 8006df8:	2302      	movs	r3, #2
 8006dfa:	e20a      	b.n	8007212 <HAL_SPI_TransmitReceive+0x43c>
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	2201      	movs	r2, #1
 8006e00:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006e04:	f7fc fa2a 	bl	800325c <HAL_GetTick>
 8006e08:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006e10:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	685b      	ldr	r3, [r3, #4]
 8006e16:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006e18:	887b      	ldrh	r3, [r7, #2]
 8006e1a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8006e1c:	887b      	ldrh	r3, [r7, #2]
 8006e1e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006e20:	7efb      	ldrb	r3, [r7, #27]
 8006e22:	2b01      	cmp	r3, #1
 8006e24:	d00e      	beq.n	8006e44 <HAL_SPI_TransmitReceive+0x6e>
 8006e26:	697b      	ldr	r3, [r7, #20]
 8006e28:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006e2c:	d106      	bne.n	8006e3c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	689b      	ldr	r3, [r3, #8]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d102      	bne.n	8006e3c <HAL_SPI_TransmitReceive+0x66>
 8006e36:	7efb      	ldrb	r3, [r7, #27]
 8006e38:	2b04      	cmp	r3, #4
 8006e3a:	d003      	beq.n	8006e44 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8006e3c:	2302      	movs	r3, #2
 8006e3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8006e42:	e1e0      	b.n	8007206 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d005      	beq.n	8006e56 <HAL_SPI_TransmitReceive+0x80>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d002      	beq.n	8006e56 <HAL_SPI_TransmitReceive+0x80>
 8006e50:	887b      	ldrh	r3, [r7, #2]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d103      	bne.n	8006e5e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8006e56:	2301      	movs	r3, #1
 8006e58:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8006e5c:	e1d3      	b.n	8007206 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006e64:	b2db      	uxtb	r3, r3
 8006e66:	2b04      	cmp	r3, #4
 8006e68:	d003      	beq.n	8006e72 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	2205      	movs	r2, #5
 8006e6e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	2200      	movs	r2, #0
 8006e76:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	687a      	ldr	r2, [r7, #4]
 8006e7c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	887a      	ldrh	r2, [r7, #2]
 8006e82:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	887a      	ldrh	r2, [r7, #2]
 8006e8a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	68ba      	ldr	r2, [r7, #8]
 8006e92:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	887a      	ldrh	r2, [r7, #2]
 8006e98:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	887a      	ldrh	r2, [r7, #2]
 8006e9e:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	68db      	ldr	r3, [r3, #12]
 8006eb0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006eb4:	d802      	bhi.n	8006ebc <HAL_SPI_TransmitReceive+0xe6>
 8006eb6:	8a3b      	ldrh	r3, [r7, #16]
 8006eb8:	2b01      	cmp	r3, #1
 8006eba:	d908      	bls.n	8006ece <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	685a      	ldr	r2, [r3, #4]
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006eca:	605a      	str	r2, [r3, #4]
 8006ecc:	e007      	b.n	8006ede <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	685a      	ldr	r2, [r3, #4]
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006edc:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ee8:	2b40      	cmp	r3, #64	@ 0x40
 8006eea:	d007      	beq.n	8006efc <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	681a      	ldr	r2, [r3, #0]
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006efa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	68db      	ldr	r3, [r3, #12]
 8006f00:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006f04:	f240 8081 	bls.w	800700a <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	685b      	ldr	r3, [r3, #4]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d002      	beq.n	8006f16 <HAL_SPI_TransmitReceive+0x140>
 8006f10:	8a7b      	ldrh	r3, [r7, #18]
 8006f12:	2b01      	cmp	r3, #1
 8006f14:	d16d      	bne.n	8006ff2 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f1a:	881a      	ldrh	r2, [r3, #0]
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f26:	1c9a      	adds	r2, r3, #2
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f30:	b29b      	uxth	r3, r3
 8006f32:	3b01      	subs	r3, #1
 8006f34:	b29a      	uxth	r2, r3
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006f3a:	e05a      	b.n	8006ff2 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	689b      	ldr	r3, [r3, #8]
 8006f42:	f003 0302 	and.w	r3, r3, #2
 8006f46:	2b02      	cmp	r3, #2
 8006f48:	d11b      	bne.n	8006f82 <HAL_SPI_TransmitReceive+0x1ac>
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f4e:	b29b      	uxth	r3, r3
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d016      	beq.n	8006f82 <HAL_SPI_TransmitReceive+0x1ac>
 8006f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f56:	2b01      	cmp	r3, #1
 8006f58:	d113      	bne.n	8006f82 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f5e:	881a      	ldrh	r2, [r3, #0]
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f6a:	1c9a      	adds	r2, r3, #2
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f74:	b29b      	uxth	r3, r3
 8006f76:	3b01      	subs	r3, #1
 8006f78:	b29a      	uxth	r2, r3
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	689b      	ldr	r3, [r3, #8]
 8006f88:	f003 0301 	and.w	r3, r3, #1
 8006f8c:	2b01      	cmp	r3, #1
 8006f8e:	d11c      	bne.n	8006fca <HAL_SPI_TransmitReceive+0x1f4>
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006f96:	b29b      	uxth	r3, r3
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d016      	beq.n	8006fca <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	68da      	ldr	r2, [r3, #12]
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fa6:	b292      	uxth	r2, r2
 8006fa8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fae:	1c9a      	adds	r2, r3, #2
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006fba:	b29b      	uxth	r3, r3
 8006fbc:	3b01      	subs	r3, #1
 8006fbe:	b29a      	uxth	r2, r3
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006fca:	f7fc f947 	bl	800325c <HAL_GetTick>
 8006fce:	4602      	mov	r2, r0
 8006fd0:	69fb      	ldr	r3, [r7, #28]
 8006fd2:	1ad3      	subs	r3, r2, r3
 8006fd4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006fd6:	429a      	cmp	r2, r3
 8006fd8:	d80b      	bhi.n	8006ff2 <HAL_SPI_TransmitReceive+0x21c>
 8006fda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fe0:	d007      	beq.n	8006ff2 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8006fe2:	2303      	movs	r3, #3
 8006fe4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	2201      	movs	r2, #1
 8006fec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8006ff0:	e109      	b.n	8007206 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ff6:	b29b      	uxth	r3, r3
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d19f      	bne.n	8006f3c <HAL_SPI_TransmitReceive+0x166>
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007002:	b29b      	uxth	r3, r3
 8007004:	2b00      	cmp	r3, #0
 8007006:	d199      	bne.n	8006f3c <HAL_SPI_TransmitReceive+0x166>
 8007008:	e0e3      	b.n	80071d2 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	685b      	ldr	r3, [r3, #4]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d003      	beq.n	800701a <HAL_SPI_TransmitReceive+0x244>
 8007012:	8a7b      	ldrh	r3, [r7, #18]
 8007014:	2b01      	cmp	r3, #1
 8007016:	f040 80cf 	bne.w	80071b8 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800701e:	b29b      	uxth	r3, r3
 8007020:	2b01      	cmp	r3, #1
 8007022:	d912      	bls.n	800704a <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007028:	881a      	ldrh	r2, [r3, #0]
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007034:	1c9a      	adds	r2, r3, #2
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800703e:	b29b      	uxth	r3, r3
 8007040:	3b02      	subs	r3, #2
 8007042:	b29a      	uxth	r2, r3
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007048:	e0b6      	b.n	80071b8 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	330c      	adds	r3, #12
 8007054:	7812      	ldrb	r2, [r2, #0]
 8007056:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800705c:	1c5a      	adds	r2, r3, #1
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007066:	b29b      	uxth	r3, r3
 8007068:	3b01      	subs	r3, #1
 800706a:	b29a      	uxth	r2, r3
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007070:	e0a2      	b.n	80071b8 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	689b      	ldr	r3, [r3, #8]
 8007078:	f003 0302 	and.w	r3, r3, #2
 800707c:	2b02      	cmp	r3, #2
 800707e:	d134      	bne.n	80070ea <HAL_SPI_TransmitReceive+0x314>
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007084:	b29b      	uxth	r3, r3
 8007086:	2b00      	cmp	r3, #0
 8007088:	d02f      	beq.n	80070ea <HAL_SPI_TransmitReceive+0x314>
 800708a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800708c:	2b01      	cmp	r3, #1
 800708e:	d12c      	bne.n	80070ea <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007094:	b29b      	uxth	r3, r3
 8007096:	2b01      	cmp	r3, #1
 8007098:	d912      	bls.n	80070c0 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800709e:	881a      	ldrh	r2, [r3, #0]
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070aa:	1c9a      	adds	r2, r3, #2
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80070b4:	b29b      	uxth	r3, r3
 80070b6:	3b02      	subs	r3, #2
 80070b8:	b29a      	uxth	r2, r3
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80070be:	e012      	b.n	80070e6 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	330c      	adds	r3, #12
 80070ca:	7812      	ldrb	r2, [r2, #0]
 80070cc:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070d2:	1c5a      	adds	r2, r3, #1
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80070dc:	b29b      	uxth	r3, r3
 80070de:	3b01      	subs	r3, #1
 80070e0:	b29a      	uxth	r2, r3
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80070e6:	2300      	movs	r3, #0
 80070e8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	689b      	ldr	r3, [r3, #8]
 80070f0:	f003 0301 	and.w	r3, r3, #1
 80070f4:	2b01      	cmp	r3, #1
 80070f6:	d148      	bne.n	800718a <HAL_SPI_TransmitReceive+0x3b4>
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80070fe:	b29b      	uxth	r3, r3
 8007100:	2b00      	cmp	r3, #0
 8007102:	d042      	beq.n	800718a <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800710a:	b29b      	uxth	r3, r3
 800710c:	2b01      	cmp	r3, #1
 800710e:	d923      	bls.n	8007158 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	68da      	ldr	r2, [r3, #12]
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800711a:	b292      	uxth	r2, r2
 800711c:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007122:	1c9a      	adds	r2, r3, #2
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800712e:	b29b      	uxth	r3, r3
 8007130:	3b02      	subs	r3, #2
 8007132:	b29a      	uxth	r2, r3
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007140:	b29b      	uxth	r3, r3
 8007142:	2b01      	cmp	r3, #1
 8007144:	d81f      	bhi.n	8007186 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	685a      	ldr	r2, [r3, #4]
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007154:	605a      	str	r2, [r3, #4]
 8007156:	e016      	b.n	8007186 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f103 020c 	add.w	r2, r3, #12
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007164:	7812      	ldrb	r2, [r2, #0]
 8007166:	b2d2      	uxtb	r2, r2
 8007168:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800716e:	1c5a      	adds	r2, r3, #1
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800717a:	b29b      	uxth	r3, r3
 800717c:	3b01      	subs	r3, #1
 800717e:	b29a      	uxth	r2, r3
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007186:	2301      	movs	r3, #1
 8007188:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800718a:	f7fc f867 	bl	800325c <HAL_GetTick>
 800718e:	4602      	mov	r2, r0
 8007190:	69fb      	ldr	r3, [r7, #28]
 8007192:	1ad3      	subs	r3, r2, r3
 8007194:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007196:	429a      	cmp	r2, r3
 8007198:	d803      	bhi.n	80071a2 <HAL_SPI_TransmitReceive+0x3cc>
 800719a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800719c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071a0:	d102      	bne.n	80071a8 <HAL_SPI_TransmitReceive+0x3d2>
 80071a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d107      	bne.n	80071b8 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 80071a8:	2303      	movs	r3, #3
 80071aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	2201      	movs	r2, #1
 80071b2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80071b6:	e026      	b.n	8007206 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80071bc:	b29b      	uxth	r3, r3
 80071be:	2b00      	cmp	r3, #0
 80071c0:	f47f af57 	bne.w	8007072 <HAL_SPI_TransmitReceive+0x29c>
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80071ca:	b29b      	uxth	r3, r3
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	f47f af50 	bne.w	8007072 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80071d2:	69fa      	ldr	r2, [r7, #28]
 80071d4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80071d6:	68f8      	ldr	r0, [r7, #12]
 80071d8:	f000 f996 	bl	8007508 <SPI_EndRxTxTransaction>
 80071dc:	4603      	mov	r3, r0
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d005      	beq.n	80071ee <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 80071e2:	2301      	movs	r3, #1
 80071e4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	2220      	movs	r2, #32
 80071ec:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d003      	beq.n	80071fe <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 80071f6:	2301      	movs	r3, #1
 80071f8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80071fc:	e003      	b.n	8007206 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	2201      	movs	r2, #1
 8007202:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	2200      	movs	r2, #0
 800720a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800720e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8007212:	4618      	mov	r0, r3
 8007214:	3728      	adds	r7, #40	@ 0x28
 8007216:	46bd      	mov	sp, r7
 8007218:	bd80      	pop	{r7, pc}
	...

0800721c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b088      	sub	sp, #32
 8007220:	af00      	add	r7, sp, #0
 8007222:	60f8      	str	r0, [r7, #12]
 8007224:	60b9      	str	r1, [r7, #8]
 8007226:	603b      	str	r3, [r7, #0]
 8007228:	4613      	mov	r3, r2
 800722a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800722c:	f7fc f816 	bl	800325c <HAL_GetTick>
 8007230:	4602      	mov	r2, r0
 8007232:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007234:	1a9b      	subs	r3, r3, r2
 8007236:	683a      	ldr	r2, [r7, #0]
 8007238:	4413      	add	r3, r2
 800723a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800723c:	f7fc f80e 	bl	800325c <HAL_GetTick>
 8007240:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007242:	4b39      	ldr	r3, [pc, #228]	@ (8007328 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	015b      	lsls	r3, r3, #5
 8007248:	0d1b      	lsrs	r3, r3, #20
 800724a:	69fa      	ldr	r2, [r7, #28]
 800724c:	fb02 f303 	mul.w	r3, r2, r3
 8007250:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007252:	e054      	b.n	80072fe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	f1b3 3fff 	cmp.w	r3, #4294967295
 800725a:	d050      	beq.n	80072fe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800725c:	f7fb fffe 	bl	800325c <HAL_GetTick>
 8007260:	4602      	mov	r2, r0
 8007262:	69bb      	ldr	r3, [r7, #24]
 8007264:	1ad3      	subs	r3, r2, r3
 8007266:	69fa      	ldr	r2, [r7, #28]
 8007268:	429a      	cmp	r2, r3
 800726a:	d902      	bls.n	8007272 <SPI_WaitFlagStateUntilTimeout+0x56>
 800726c:	69fb      	ldr	r3, [r7, #28]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d13d      	bne.n	80072ee <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	685a      	ldr	r2, [r3, #4]
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007280:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	685b      	ldr	r3, [r3, #4]
 8007286:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800728a:	d111      	bne.n	80072b0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	689b      	ldr	r3, [r3, #8]
 8007290:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007294:	d004      	beq.n	80072a0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	689b      	ldr	r3, [r3, #8]
 800729a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800729e:	d107      	bne.n	80072b0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	681a      	ldr	r2, [r3, #0]
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80072ae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80072b8:	d10f      	bne.n	80072da <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	681a      	ldr	r2, [r3, #0]
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80072c8:	601a      	str	r2, [r3, #0]
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	681a      	ldr	r2, [r3, #0]
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80072d8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	2201      	movs	r2, #1
 80072de:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	2200      	movs	r2, #0
 80072e6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80072ea:	2303      	movs	r3, #3
 80072ec:	e017      	b.n	800731e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d101      	bne.n	80072f8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80072f4:	2300      	movs	r3, #0
 80072f6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80072f8:	697b      	ldr	r3, [r7, #20]
 80072fa:	3b01      	subs	r3, #1
 80072fc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	689a      	ldr	r2, [r3, #8]
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	4013      	ands	r3, r2
 8007308:	68ba      	ldr	r2, [r7, #8]
 800730a:	429a      	cmp	r2, r3
 800730c:	bf0c      	ite	eq
 800730e:	2301      	moveq	r3, #1
 8007310:	2300      	movne	r3, #0
 8007312:	b2db      	uxtb	r3, r3
 8007314:	461a      	mov	r2, r3
 8007316:	79fb      	ldrb	r3, [r7, #7]
 8007318:	429a      	cmp	r2, r3
 800731a:	d19b      	bne.n	8007254 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800731c:	2300      	movs	r3, #0
}
 800731e:	4618      	mov	r0, r3
 8007320:	3720      	adds	r7, #32
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}
 8007326:	bf00      	nop
 8007328:	20000008 	.word	0x20000008

0800732c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b08a      	sub	sp, #40	@ 0x28
 8007330:	af00      	add	r7, sp, #0
 8007332:	60f8      	str	r0, [r7, #12]
 8007334:	60b9      	str	r1, [r7, #8]
 8007336:	607a      	str	r2, [r7, #4]
 8007338:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800733a:	2300      	movs	r3, #0
 800733c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800733e:	f7fb ff8d 	bl	800325c <HAL_GetTick>
 8007342:	4602      	mov	r2, r0
 8007344:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007346:	1a9b      	subs	r3, r3, r2
 8007348:	683a      	ldr	r2, [r7, #0]
 800734a:	4413      	add	r3, r2
 800734c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800734e:	f7fb ff85 	bl	800325c <HAL_GetTick>
 8007352:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	330c      	adds	r3, #12
 800735a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800735c:	4b3d      	ldr	r3, [pc, #244]	@ (8007454 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800735e:	681a      	ldr	r2, [r3, #0]
 8007360:	4613      	mov	r3, r2
 8007362:	009b      	lsls	r3, r3, #2
 8007364:	4413      	add	r3, r2
 8007366:	00da      	lsls	r2, r3, #3
 8007368:	1ad3      	subs	r3, r2, r3
 800736a:	0d1b      	lsrs	r3, r3, #20
 800736c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800736e:	fb02 f303 	mul.w	r3, r2, r3
 8007372:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007374:	e060      	b.n	8007438 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800737c:	d107      	bne.n	800738e <SPI_WaitFifoStateUntilTimeout+0x62>
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d104      	bne.n	800738e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007384:	69fb      	ldr	r3, [r7, #28]
 8007386:	781b      	ldrb	r3, [r3, #0]
 8007388:	b2db      	uxtb	r3, r3
 800738a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800738c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007394:	d050      	beq.n	8007438 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007396:	f7fb ff61 	bl	800325c <HAL_GetTick>
 800739a:	4602      	mov	r2, r0
 800739c:	6a3b      	ldr	r3, [r7, #32]
 800739e:	1ad3      	subs	r3, r2, r3
 80073a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80073a2:	429a      	cmp	r2, r3
 80073a4:	d902      	bls.n	80073ac <SPI_WaitFifoStateUntilTimeout+0x80>
 80073a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d13d      	bne.n	8007428 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	685a      	ldr	r2, [r3, #4]
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80073ba:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	685b      	ldr	r3, [r3, #4]
 80073c0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80073c4:	d111      	bne.n	80073ea <SPI_WaitFifoStateUntilTimeout+0xbe>
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	689b      	ldr	r3, [r3, #8]
 80073ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80073ce:	d004      	beq.n	80073da <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	689b      	ldr	r3, [r3, #8]
 80073d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80073d8:	d107      	bne.n	80073ea <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	681a      	ldr	r2, [r3, #0]
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80073e8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80073f2:	d10f      	bne.n	8007414 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	681a      	ldr	r2, [r3, #0]
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007402:	601a      	str	r2, [r3, #0]
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	681a      	ldr	r2, [r3, #0]
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007412:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	2201      	movs	r2, #1
 8007418:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	2200      	movs	r2, #0
 8007420:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8007424:	2303      	movs	r3, #3
 8007426:	e010      	b.n	800744a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007428:	69bb      	ldr	r3, [r7, #24]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d101      	bne.n	8007432 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800742e:	2300      	movs	r3, #0
 8007430:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8007432:	69bb      	ldr	r3, [r7, #24]
 8007434:	3b01      	subs	r3, #1
 8007436:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	689a      	ldr	r2, [r3, #8]
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	4013      	ands	r3, r2
 8007442:	687a      	ldr	r2, [r7, #4]
 8007444:	429a      	cmp	r2, r3
 8007446:	d196      	bne.n	8007376 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007448:	2300      	movs	r3, #0
}
 800744a:	4618      	mov	r0, r3
 800744c:	3728      	adds	r7, #40	@ 0x28
 800744e:	46bd      	mov	sp, r7
 8007450:	bd80      	pop	{r7, pc}
 8007452:	bf00      	nop
 8007454:	20000008 	.word	0x20000008

08007458 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b086      	sub	sp, #24
 800745c:	af02      	add	r7, sp, #8
 800745e:	60f8      	str	r0, [r7, #12]
 8007460:	60b9      	str	r1, [r7, #8]
 8007462:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	685b      	ldr	r3, [r3, #4]
 8007468:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800746c:	d111      	bne.n	8007492 <SPI_EndRxTransaction+0x3a>
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	689b      	ldr	r3, [r3, #8]
 8007472:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007476:	d004      	beq.n	8007482 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	689b      	ldr	r3, [r3, #8]
 800747c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007480:	d107      	bne.n	8007492 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	681a      	ldr	r2, [r3, #0]
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007490:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	9300      	str	r3, [sp, #0]
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	2200      	movs	r2, #0
 800749a:	2180      	movs	r1, #128	@ 0x80
 800749c:	68f8      	ldr	r0, [r7, #12]
 800749e:	f7ff febd 	bl	800721c <SPI_WaitFlagStateUntilTimeout>
 80074a2:	4603      	mov	r3, r0
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d007      	beq.n	80074b8 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80074ac:	f043 0220 	orr.w	r2, r3, #32
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80074b4:	2303      	movs	r3, #3
 80074b6:	e023      	b.n	8007500 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	685b      	ldr	r3, [r3, #4]
 80074bc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80074c0:	d11d      	bne.n	80074fe <SPI_EndRxTransaction+0xa6>
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	689b      	ldr	r3, [r3, #8]
 80074c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80074ca:	d004      	beq.n	80074d6 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	689b      	ldr	r3, [r3, #8]
 80074d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80074d4:	d113      	bne.n	80074fe <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	9300      	str	r3, [sp, #0]
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	2200      	movs	r2, #0
 80074de:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80074e2:	68f8      	ldr	r0, [r7, #12]
 80074e4:	f7ff ff22 	bl	800732c <SPI_WaitFifoStateUntilTimeout>
 80074e8:	4603      	mov	r3, r0
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d007      	beq.n	80074fe <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80074f2:	f043 0220 	orr.w	r2, r3, #32
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80074fa:	2303      	movs	r3, #3
 80074fc:	e000      	b.n	8007500 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80074fe:	2300      	movs	r3, #0
}
 8007500:	4618      	mov	r0, r3
 8007502:	3710      	adds	r7, #16
 8007504:	46bd      	mov	sp, r7
 8007506:	bd80      	pop	{r7, pc}

08007508 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b086      	sub	sp, #24
 800750c:	af02      	add	r7, sp, #8
 800750e:	60f8      	str	r0, [r7, #12]
 8007510:	60b9      	str	r1, [r7, #8]
 8007512:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	9300      	str	r3, [sp, #0]
 8007518:	68bb      	ldr	r3, [r7, #8]
 800751a:	2200      	movs	r2, #0
 800751c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8007520:	68f8      	ldr	r0, [r7, #12]
 8007522:	f7ff ff03 	bl	800732c <SPI_WaitFifoStateUntilTimeout>
 8007526:	4603      	mov	r3, r0
 8007528:	2b00      	cmp	r3, #0
 800752a:	d007      	beq.n	800753c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007530:	f043 0220 	orr.w	r2, r3, #32
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007538:	2303      	movs	r3, #3
 800753a:	e027      	b.n	800758c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	9300      	str	r3, [sp, #0]
 8007540:	68bb      	ldr	r3, [r7, #8]
 8007542:	2200      	movs	r2, #0
 8007544:	2180      	movs	r1, #128	@ 0x80
 8007546:	68f8      	ldr	r0, [r7, #12]
 8007548:	f7ff fe68 	bl	800721c <SPI_WaitFlagStateUntilTimeout>
 800754c:	4603      	mov	r3, r0
 800754e:	2b00      	cmp	r3, #0
 8007550:	d007      	beq.n	8007562 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007556:	f043 0220 	orr.w	r2, r3, #32
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800755e:	2303      	movs	r3, #3
 8007560:	e014      	b.n	800758c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	9300      	str	r3, [sp, #0]
 8007566:	68bb      	ldr	r3, [r7, #8]
 8007568:	2200      	movs	r2, #0
 800756a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800756e:	68f8      	ldr	r0, [r7, #12]
 8007570:	f7ff fedc 	bl	800732c <SPI_WaitFifoStateUntilTimeout>
 8007574:	4603      	mov	r3, r0
 8007576:	2b00      	cmp	r3, #0
 8007578:	d007      	beq.n	800758a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800757e:	f043 0220 	orr.w	r2, r3, #32
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007586:	2303      	movs	r3, #3
 8007588:	e000      	b.n	800758c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800758a:	2300      	movs	r3, #0
}
 800758c:	4618      	mov	r0, r3
 800758e:	3710      	adds	r7, #16
 8007590:	46bd      	mov	sp, r7
 8007592:	bd80      	pop	{r7, pc}

08007594 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b082      	sub	sp, #8
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d101      	bne.n	80075a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80075a2:	2301      	movs	r3, #1
 80075a4:	e049      	b.n	800763a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80075ac:	b2db      	uxtb	r3, r3
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d106      	bne.n	80075c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2200      	movs	r2, #0
 80075b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f000 f841 	bl	8007642 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2202      	movs	r2, #2
 80075c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681a      	ldr	r2, [r3, #0]
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	3304      	adds	r3, #4
 80075d0:	4619      	mov	r1, r3
 80075d2:	4610      	mov	r0, r2
 80075d4:	f000 f9be 	bl	8007954 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2201      	movs	r2, #1
 80075dc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2201      	movs	r2, #1
 80075e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2201      	movs	r2, #1
 80075ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2201      	movs	r2, #1
 80075f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2201      	movs	r2, #1
 80075fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2201      	movs	r2, #1
 8007604:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2201      	movs	r2, #1
 800760c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2201      	movs	r2, #1
 8007614:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2201      	movs	r2, #1
 800761c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2201      	movs	r2, #1
 8007624:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2201      	movs	r2, #1
 800762c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2201      	movs	r2, #1
 8007634:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007638:	2300      	movs	r3, #0
}
 800763a:	4618      	mov	r0, r3
 800763c:	3708      	adds	r7, #8
 800763e:	46bd      	mov	sp, r7
 8007640:	bd80      	pop	{r7, pc}

08007642 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007642:	b480      	push	{r7}
 8007644:	b083      	sub	sp, #12
 8007646:	af00      	add	r7, sp, #0
 8007648:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800764a:	bf00      	nop
 800764c:	370c      	adds	r7, #12
 800764e:	46bd      	mov	sp, r7
 8007650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007654:	4770      	bx	lr
	...

08007658 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007658:	b480      	push	{r7}
 800765a:	b085      	sub	sp, #20
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007666:	b2db      	uxtb	r3, r3
 8007668:	2b01      	cmp	r3, #1
 800766a:	d001      	beq.n	8007670 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800766c:	2301      	movs	r3, #1
 800766e:	e036      	b.n	80076de <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2202      	movs	r2, #2
 8007674:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	68da      	ldr	r2, [r3, #12]
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f042 0201 	orr.w	r2, r2, #1
 8007686:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	4a17      	ldr	r2, [pc, #92]	@ (80076ec <HAL_TIM_Base_Start_IT+0x94>)
 800768e:	4293      	cmp	r3, r2
 8007690:	d004      	beq.n	800769c <HAL_TIM_Base_Start_IT+0x44>
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800769a:	d115      	bne.n	80076c8 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	689a      	ldr	r2, [r3, #8]
 80076a2:	4b13      	ldr	r3, [pc, #76]	@ (80076f0 <HAL_TIM_Base_Start_IT+0x98>)
 80076a4:	4013      	ands	r3, r2
 80076a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	2b06      	cmp	r3, #6
 80076ac:	d015      	beq.n	80076da <HAL_TIM_Base_Start_IT+0x82>
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80076b4:	d011      	beq.n	80076da <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	681a      	ldr	r2, [r3, #0]
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f042 0201 	orr.w	r2, r2, #1
 80076c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076c6:	e008      	b.n	80076da <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	681a      	ldr	r2, [r3, #0]
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f042 0201 	orr.w	r2, r2, #1
 80076d6:	601a      	str	r2, [r3, #0]
 80076d8:	e000      	b.n	80076dc <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076da:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80076dc:	2300      	movs	r3, #0
}
 80076de:	4618      	mov	r0, r3
 80076e0:	3714      	adds	r7, #20
 80076e2:	46bd      	mov	sp, r7
 80076e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e8:	4770      	bx	lr
 80076ea:	bf00      	nop
 80076ec:	40012c00 	.word	0x40012c00
 80076f0:	00010007 	.word	0x00010007

080076f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b084      	sub	sp, #16
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	68db      	ldr	r3, [r3, #12]
 8007702:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	691b      	ldr	r3, [r3, #16]
 800770a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800770c:	68bb      	ldr	r3, [r7, #8]
 800770e:	f003 0302 	and.w	r3, r3, #2
 8007712:	2b00      	cmp	r3, #0
 8007714:	d020      	beq.n	8007758 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	f003 0302 	and.w	r3, r3, #2
 800771c:	2b00      	cmp	r3, #0
 800771e:	d01b      	beq.n	8007758 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f06f 0202 	mvn.w	r2, #2
 8007728:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2201      	movs	r2, #1
 800772e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	699b      	ldr	r3, [r3, #24]
 8007736:	f003 0303 	and.w	r3, r3, #3
 800773a:	2b00      	cmp	r3, #0
 800773c:	d003      	beq.n	8007746 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	f000 f8e9 	bl	8007916 <HAL_TIM_IC_CaptureCallback>
 8007744:	e005      	b.n	8007752 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	f000 f8db 	bl	8007902 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800774c:	6878      	ldr	r0, [r7, #4]
 800774e:	f000 f8ec 	bl	800792a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2200      	movs	r2, #0
 8007756:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	f003 0304 	and.w	r3, r3, #4
 800775e:	2b00      	cmp	r3, #0
 8007760:	d020      	beq.n	80077a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	f003 0304 	and.w	r3, r3, #4
 8007768:	2b00      	cmp	r3, #0
 800776a:	d01b      	beq.n	80077a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f06f 0204 	mvn.w	r2, #4
 8007774:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2202      	movs	r2, #2
 800777a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	699b      	ldr	r3, [r3, #24]
 8007782:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007786:	2b00      	cmp	r3, #0
 8007788:	d003      	beq.n	8007792 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f000 f8c3 	bl	8007916 <HAL_TIM_IC_CaptureCallback>
 8007790:	e005      	b.n	800779e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	f000 f8b5 	bl	8007902 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007798:	6878      	ldr	r0, [r7, #4]
 800779a:	f000 f8c6 	bl	800792a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2200      	movs	r2, #0
 80077a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	f003 0308 	and.w	r3, r3, #8
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d020      	beq.n	80077f0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	f003 0308 	and.w	r3, r3, #8
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d01b      	beq.n	80077f0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f06f 0208 	mvn.w	r2, #8
 80077c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2204      	movs	r2, #4
 80077c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	69db      	ldr	r3, [r3, #28]
 80077ce:	f003 0303 	and.w	r3, r3, #3
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d003      	beq.n	80077de <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f000 f89d 	bl	8007916 <HAL_TIM_IC_CaptureCallback>
 80077dc:	e005      	b.n	80077ea <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	f000 f88f 	bl	8007902 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	f000 f8a0 	bl	800792a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2200      	movs	r2, #0
 80077ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	f003 0310 	and.w	r3, r3, #16
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d020      	beq.n	800783c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	f003 0310 	and.w	r3, r3, #16
 8007800:	2b00      	cmp	r3, #0
 8007802:	d01b      	beq.n	800783c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f06f 0210 	mvn.w	r2, #16
 800780c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2208      	movs	r2, #8
 8007812:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	69db      	ldr	r3, [r3, #28]
 800781a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800781e:	2b00      	cmp	r3, #0
 8007820:	d003      	beq.n	800782a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f000 f877 	bl	8007916 <HAL_TIM_IC_CaptureCallback>
 8007828:	e005      	b.n	8007836 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	f000 f869 	bl	8007902 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f000 f87a 	bl	800792a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2200      	movs	r2, #0
 800783a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	f003 0301 	and.w	r3, r3, #1
 8007842:	2b00      	cmp	r3, #0
 8007844:	d00c      	beq.n	8007860 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	f003 0301 	and.w	r3, r3, #1
 800784c:	2b00      	cmp	r3, #0
 800784e:	d007      	beq.n	8007860 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f06f 0201 	mvn.w	r2, #1
 8007858:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f7fb fa04 	bl	8002c68 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007866:	2b00      	cmp	r3, #0
 8007868:	d104      	bne.n	8007874 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800786a:	68bb      	ldr	r3, [r7, #8]
 800786c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007870:	2b00      	cmp	r3, #0
 8007872:	d00c      	beq.n	800788e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800787a:	2b00      	cmp	r3, #0
 800787c:	d007      	beq.n	800788e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007886:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f000 f8dd 	bl	8007a48 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800788e:	68bb      	ldr	r3, [r7, #8]
 8007890:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007894:	2b00      	cmp	r3, #0
 8007896:	d00c      	beq.n	80078b2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d007      	beq.n	80078b2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80078aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80078ac:	6878      	ldr	r0, [r7, #4]
 80078ae:	f000 f8d5 	bl	8007a5c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80078b2:	68bb      	ldr	r3, [r7, #8]
 80078b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d00c      	beq.n	80078d6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d007      	beq.n	80078d6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80078ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	f000 f834 	bl	800793e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80078d6:	68bb      	ldr	r3, [r7, #8]
 80078d8:	f003 0320 	and.w	r3, r3, #32
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d00c      	beq.n	80078fa <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	f003 0320 	and.w	r3, r3, #32
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d007      	beq.n	80078fa <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f06f 0220 	mvn.w	r2, #32
 80078f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	f000 f89d 	bl	8007a34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80078fa:	bf00      	nop
 80078fc:	3710      	adds	r7, #16
 80078fe:	46bd      	mov	sp, r7
 8007900:	bd80      	pop	{r7, pc}

08007902 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007902:	b480      	push	{r7}
 8007904:	b083      	sub	sp, #12
 8007906:	af00      	add	r7, sp, #0
 8007908:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800790a:	bf00      	nop
 800790c:	370c      	adds	r7, #12
 800790e:	46bd      	mov	sp, r7
 8007910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007914:	4770      	bx	lr

08007916 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007916:	b480      	push	{r7}
 8007918:	b083      	sub	sp, #12
 800791a:	af00      	add	r7, sp, #0
 800791c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800791e:	bf00      	nop
 8007920:	370c      	adds	r7, #12
 8007922:	46bd      	mov	sp, r7
 8007924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007928:	4770      	bx	lr

0800792a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800792a:	b480      	push	{r7}
 800792c:	b083      	sub	sp, #12
 800792e:	af00      	add	r7, sp, #0
 8007930:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007932:	bf00      	nop
 8007934:	370c      	adds	r7, #12
 8007936:	46bd      	mov	sp, r7
 8007938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793c:	4770      	bx	lr

0800793e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800793e:	b480      	push	{r7}
 8007940:	b083      	sub	sp, #12
 8007942:	af00      	add	r7, sp, #0
 8007944:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007946:	bf00      	nop
 8007948:	370c      	adds	r7, #12
 800794a:	46bd      	mov	sp, r7
 800794c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007950:	4770      	bx	lr
	...

08007954 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007954:	b480      	push	{r7}
 8007956:	b085      	sub	sp, #20
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
 800795c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	4a30      	ldr	r2, [pc, #192]	@ (8007a28 <TIM_Base_SetConfig+0xd4>)
 8007968:	4293      	cmp	r3, r2
 800796a:	d003      	beq.n	8007974 <TIM_Base_SetConfig+0x20>
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007972:	d108      	bne.n	8007986 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800797a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	685b      	ldr	r3, [r3, #4]
 8007980:	68fa      	ldr	r2, [r7, #12]
 8007982:	4313      	orrs	r3, r2
 8007984:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	4a27      	ldr	r2, [pc, #156]	@ (8007a28 <TIM_Base_SetConfig+0xd4>)
 800798a:	4293      	cmp	r3, r2
 800798c:	d00b      	beq.n	80079a6 <TIM_Base_SetConfig+0x52>
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007994:	d007      	beq.n	80079a6 <TIM_Base_SetConfig+0x52>
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	4a24      	ldr	r2, [pc, #144]	@ (8007a2c <TIM_Base_SetConfig+0xd8>)
 800799a:	4293      	cmp	r3, r2
 800799c:	d003      	beq.n	80079a6 <TIM_Base_SetConfig+0x52>
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	4a23      	ldr	r2, [pc, #140]	@ (8007a30 <TIM_Base_SetConfig+0xdc>)
 80079a2:	4293      	cmp	r3, r2
 80079a4:	d108      	bne.n	80079b8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80079ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	68db      	ldr	r3, [r3, #12]
 80079b2:	68fa      	ldr	r2, [r7, #12]
 80079b4:	4313      	orrs	r3, r2
 80079b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	695b      	ldr	r3, [r3, #20]
 80079c2:	4313      	orrs	r3, r2
 80079c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	68fa      	ldr	r2, [r7, #12]
 80079ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	689a      	ldr	r2, [r3, #8]
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	681a      	ldr	r2, [r3, #0]
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	4a12      	ldr	r2, [pc, #72]	@ (8007a28 <TIM_Base_SetConfig+0xd4>)
 80079e0:	4293      	cmp	r3, r2
 80079e2:	d007      	beq.n	80079f4 <TIM_Base_SetConfig+0xa0>
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	4a11      	ldr	r2, [pc, #68]	@ (8007a2c <TIM_Base_SetConfig+0xd8>)
 80079e8:	4293      	cmp	r3, r2
 80079ea:	d003      	beq.n	80079f4 <TIM_Base_SetConfig+0xa0>
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	4a10      	ldr	r2, [pc, #64]	@ (8007a30 <TIM_Base_SetConfig+0xdc>)
 80079f0:	4293      	cmp	r3, r2
 80079f2:	d103      	bne.n	80079fc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	691a      	ldr	r2, [r3, #16]
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2201      	movs	r2, #1
 8007a00:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	691b      	ldr	r3, [r3, #16]
 8007a06:	f003 0301 	and.w	r3, r3, #1
 8007a0a:	2b01      	cmp	r3, #1
 8007a0c:	d105      	bne.n	8007a1a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	691b      	ldr	r3, [r3, #16]
 8007a12:	f023 0201 	bic.w	r2, r3, #1
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	611a      	str	r2, [r3, #16]
  }
}
 8007a1a:	bf00      	nop
 8007a1c:	3714      	adds	r7, #20
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a24:	4770      	bx	lr
 8007a26:	bf00      	nop
 8007a28:	40012c00 	.word	0x40012c00
 8007a2c:	40014400 	.word	0x40014400
 8007a30:	40014800 	.word	0x40014800

08007a34 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007a34:	b480      	push	{r7}
 8007a36:	b083      	sub	sp, #12
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007a3c:	bf00      	nop
 8007a3e:	370c      	adds	r7, #12
 8007a40:	46bd      	mov	sp, r7
 8007a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a46:	4770      	bx	lr

08007a48 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007a48:	b480      	push	{r7}
 8007a4a:	b083      	sub	sp, #12
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007a50:	bf00      	nop
 8007a52:	370c      	adds	r7, #12
 8007a54:	46bd      	mov	sp, r7
 8007a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5a:	4770      	bx	lr

08007a5c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007a5c:	b480      	push	{r7}
 8007a5e:	b083      	sub	sp, #12
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007a64:	bf00      	nop
 8007a66:	370c      	adds	r7, #12
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6e:	4770      	bx	lr

08007a70 <LL_RCC_GetUSARTClockSource>:
{
 8007a70:	b480      	push	{r7}
 8007a72:	b083      	sub	sp, #12
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8007a78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007a7c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	4013      	ands	r3, r2
}
 8007a84:	4618      	mov	r0, r3
 8007a86:	370c      	adds	r7, #12
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8e:	4770      	bx	lr

08007a90 <LL_RCC_GetLPUARTClockSource>:
{
 8007a90:	b480      	push	{r7}
 8007a92:	b083      	sub	sp, #12
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8007a98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007a9c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	4013      	ands	r3, r2
}
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	370c      	adds	r7, #12
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aae:	4770      	bx	lr

08007ab0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b082      	sub	sp, #8
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d101      	bne.n	8007ac2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007abe:	2301      	movs	r3, #1
 8007ac0:	e042      	b.n	8007b48 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d106      	bne.n	8007ada <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2200      	movs	r2, #0
 8007ad0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	f7fb fa07 	bl	8002ee8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2224      	movs	r2, #36	@ 0x24
 8007ade:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	681a      	ldr	r2, [r3, #0]
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f022 0201 	bic.w	r2, r2, #1
 8007af0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d002      	beq.n	8007b00 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	f000 fe32 	bl	8008764 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007b00:	6878      	ldr	r0, [r7, #4]
 8007b02:	f000 fc07 	bl	8008314 <UART_SetConfig>
 8007b06:	4603      	mov	r3, r0
 8007b08:	2b01      	cmp	r3, #1
 8007b0a:	d101      	bne.n	8007b10 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007b0c:	2301      	movs	r3, #1
 8007b0e:	e01b      	b.n	8007b48 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	685a      	ldr	r2, [r3, #4]
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007b1e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	689a      	ldr	r2, [r3, #8]
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007b2e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	681a      	ldr	r2, [r3, #0]
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f042 0201 	orr.w	r2, r2, #1
 8007b3e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007b40:	6878      	ldr	r0, [r7, #4]
 8007b42:	f000 feb1 	bl	80088a8 <UART_CheckIdleState>
 8007b46:	4603      	mov	r3, r0
}
 8007b48:	4618      	mov	r0, r3
 8007b4a:	3708      	adds	r7, #8
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	bd80      	pop	{r7, pc}

08007b50 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b08a      	sub	sp, #40	@ 0x28
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	60f8      	str	r0, [r7, #12]
 8007b58:	60b9      	str	r1, [r7, #8]
 8007b5a:	4613      	mov	r3, r2
 8007b5c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b64:	2b20      	cmp	r3, #32
 8007b66:	d167      	bne.n	8007c38 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8007b68:	68bb      	ldr	r3, [r7, #8]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d002      	beq.n	8007b74 <HAL_UART_Transmit_DMA+0x24>
 8007b6e:	88fb      	ldrh	r3, [r7, #6]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d101      	bne.n	8007b78 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8007b74:	2301      	movs	r3, #1
 8007b76:	e060      	b.n	8007c3a <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	68ba      	ldr	r2, [r7, #8]
 8007b7c:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	88fa      	ldrh	r2, [r7, #6]
 8007b82:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	88fa      	ldrh	r2, [r7, #6]
 8007b8a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	2200      	movs	r2, #0
 8007b92:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	2221      	movs	r2, #33	@ 0x21
 8007b9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d028      	beq.n	8007bf8 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007baa:	4a26      	ldr	r2, [pc, #152]	@ (8007c44 <HAL_UART_Transmit_DMA+0xf4>)
 8007bac:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007bb2:	4a25      	ldr	r2, [pc, #148]	@ (8007c48 <HAL_UART_Transmit_DMA+0xf8>)
 8007bb4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007bba:	4a24      	ldr	r2, [pc, #144]	@ (8007c4c <HAL_UART_Transmit_DMA+0xfc>)
 8007bbc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007bce:	4619      	mov	r1, r3
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	3328      	adds	r3, #40	@ 0x28
 8007bd6:	461a      	mov	r2, r3
 8007bd8:	88fb      	ldrh	r3, [r7, #6]
 8007bda:	f7fb fda5 	bl	8003728 <HAL_DMA_Start_IT>
 8007bde:	4603      	mov	r3, r0
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d009      	beq.n	8007bf8 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	2210      	movs	r2, #16
 8007be8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	2220      	movs	r2, #32
 8007bf0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8007bf4:	2301      	movs	r3, #1
 8007bf6:	e020      	b.n	8007c3a <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	2240      	movs	r2, #64	@ 0x40
 8007bfe:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	3308      	adds	r3, #8
 8007c06:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c08:	697b      	ldr	r3, [r7, #20]
 8007c0a:	e853 3f00 	ldrex	r3, [r3]
 8007c0e:	613b      	str	r3, [r7, #16]
   return(result);
 8007c10:	693b      	ldr	r3, [r7, #16]
 8007c12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c16:	627b      	str	r3, [r7, #36]	@ 0x24
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	3308      	adds	r3, #8
 8007c1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c20:	623a      	str	r2, [r7, #32]
 8007c22:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c24:	69f9      	ldr	r1, [r7, #28]
 8007c26:	6a3a      	ldr	r2, [r7, #32]
 8007c28:	e841 2300 	strex	r3, r2, [r1]
 8007c2c:	61bb      	str	r3, [r7, #24]
   return(result);
 8007c2e:	69bb      	ldr	r3, [r7, #24]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d1e5      	bne.n	8007c00 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8007c34:	2300      	movs	r3, #0
 8007c36:	e000      	b.n	8007c3a <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8007c38:	2302      	movs	r3, #2
  }
}
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	3728      	adds	r7, #40	@ 0x28
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	bd80      	pop	{r7, pc}
 8007c42:	bf00      	nop
 8007c44:	08008c25 	.word	0x08008c25
 8007c48:	08008cbf 	.word	0x08008cbf
 8007c4c:	08008cdb 	.word	0x08008cdb

08007c50 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b0ba      	sub	sp, #232	@ 0xe8
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	69db      	ldr	r3, [r3, #28]
 8007c5e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	689b      	ldr	r3, [r3, #8]
 8007c72:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007c76:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8007c7a:	f640 030f 	movw	r3, #2063	@ 0x80f
 8007c7e:	4013      	ands	r3, r2
 8007c80:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007c84:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d11b      	bne.n	8007cc4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007c8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c90:	f003 0320 	and.w	r3, r3, #32
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d015      	beq.n	8007cc4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007c98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c9c:	f003 0320 	and.w	r3, r3, #32
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d105      	bne.n	8007cb0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007ca4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007ca8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d009      	beq.n	8007cc4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	f000 8300 	beq.w	80082ba <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	4798      	blx	r3
      }
      return;
 8007cc2:	e2fa      	b.n	80082ba <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007cc4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	f000 8123 	beq.w	8007f14 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007cce:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007cd2:	4b8d      	ldr	r3, [pc, #564]	@ (8007f08 <HAL_UART_IRQHandler+0x2b8>)
 8007cd4:	4013      	ands	r3, r2
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d106      	bne.n	8007ce8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007cda:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8007cde:	4b8b      	ldr	r3, [pc, #556]	@ (8007f0c <HAL_UART_IRQHandler+0x2bc>)
 8007ce0:	4013      	ands	r3, r2
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	f000 8116 	beq.w	8007f14 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007ce8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007cec:	f003 0301 	and.w	r3, r3, #1
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d011      	beq.n	8007d18 <HAL_UART_IRQHandler+0xc8>
 8007cf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007cf8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d00b      	beq.n	8007d18 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	2201      	movs	r2, #1
 8007d06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d0e:	f043 0201 	orr.w	r2, r3, #1
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007d18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d1c:	f003 0302 	and.w	r3, r3, #2
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d011      	beq.n	8007d48 <HAL_UART_IRQHandler+0xf8>
 8007d24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007d28:	f003 0301 	and.w	r3, r3, #1
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d00b      	beq.n	8007d48 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	2202      	movs	r2, #2
 8007d36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d3e:	f043 0204 	orr.w	r2, r3, #4
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007d48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d4c:	f003 0304 	and.w	r3, r3, #4
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d011      	beq.n	8007d78 <HAL_UART_IRQHandler+0x128>
 8007d54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007d58:	f003 0301 	and.w	r3, r3, #1
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d00b      	beq.n	8007d78 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	2204      	movs	r2, #4
 8007d66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d6e:	f043 0202 	orr.w	r2, r3, #2
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007d78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d7c:	f003 0308 	and.w	r3, r3, #8
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d017      	beq.n	8007db4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007d84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d88:	f003 0320 	and.w	r3, r3, #32
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d105      	bne.n	8007d9c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007d90:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007d94:	4b5c      	ldr	r3, [pc, #368]	@ (8007f08 <HAL_UART_IRQHandler+0x2b8>)
 8007d96:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d00b      	beq.n	8007db4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	2208      	movs	r2, #8
 8007da2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007daa:	f043 0208 	orr.w	r2, r3, #8
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007db4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007db8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d012      	beq.n	8007de6 <HAL_UART_IRQHandler+0x196>
 8007dc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007dc4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d00c      	beq.n	8007de6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007dd4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ddc:	f043 0220 	orr.w	r2, r3, #32
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	f000 8266 	beq.w	80082be <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007df2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007df6:	f003 0320 	and.w	r3, r3, #32
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d013      	beq.n	8007e26 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007dfe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e02:	f003 0320 	and.w	r3, r3, #32
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d105      	bne.n	8007e16 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007e0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007e0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d007      	beq.n	8007e26 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d003      	beq.n	8007e26 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007e22:	6878      	ldr	r0, [r7, #4]
 8007e24:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e2c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	689b      	ldr	r3, [r3, #8]
 8007e36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e3a:	2b40      	cmp	r3, #64	@ 0x40
 8007e3c:	d005      	beq.n	8007e4a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007e3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007e42:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d054      	beq.n	8007ef4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007e4a:	6878      	ldr	r0, [r7, #4]
 8007e4c:	f000 fe84 	bl	8008b58 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	689b      	ldr	r3, [r3, #8]
 8007e56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e5a:	2b40      	cmp	r3, #64	@ 0x40
 8007e5c:	d146      	bne.n	8007eec <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	3308      	adds	r3, #8
 8007e64:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e68:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007e6c:	e853 3f00 	ldrex	r3, [r3]
 8007e70:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007e74:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007e78:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007e7c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	3308      	adds	r3, #8
 8007e86:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007e8a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007e8e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e92:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007e96:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007e9a:	e841 2300 	strex	r3, r2, [r1]
 8007e9e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007ea2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d1d9      	bne.n	8007e5e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d017      	beq.n	8007ee4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007eba:	4a15      	ldr	r2, [pc, #84]	@ (8007f10 <HAL_UART_IRQHandler+0x2c0>)
 8007ebc:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	f7fb fd09 	bl	80038dc <HAL_DMA_Abort_IT>
 8007eca:	4603      	mov	r3, r0
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d019      	beq.n	8007f04 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007ed6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ed8:	687a      	ldr	r2, [r7, #4]
 8007eda:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8007ede:	4610      	mov	r0, r2
 8007ee0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ee2:	e00f      	b.n	8007f04 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	f000 f9ff 	bl	80082e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007eea:	e00b      	b.n	8007f04 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007eec:	6878      	ldr	r0, [r7, #4]
 8007eee:	f000 f9fb 	bl	80082e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ef2:	e007      	b.n	8007f04 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007ef4:	6878      	ldr	r0, [r7, #4]
 8007ef6:	f000 f9f7 	bl	80082e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2200      	movs	r2, #0
 8007efe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8007f02:	e1dc      	b.n	80082be <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f04:	bf00      	nop
    return;
 8007f06:	e1da      	b.n	80082be <HAL_UART_IRQHandler+0x66e>
 8007f08:	10000001 	.word	0x10000001
 8007f0c:	04000120 	.word	0x04000120
 8007f10:	08008d5b 	.word	0x08008d5b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007f18:	2b01      	cmp	r3, #1
 8007f1a:	f040 8170 	bne.w	80081fe <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007f1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f22:	f003 0310 	and.w	r3, r3, #16
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	f000 8169 	beq.w	80081fe <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007f2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f30:	f003 0310 	and.w	r3, r3, #16
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	f000 8162 	beq.w	80081fe <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	2210      	movs	r2, #16
 8007f40:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	689b      	ldr	r3, [r3, #8]
 8007f48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f4c:	2b40      	cmp	r3, #64	@ 0x40
 8007f4e:	f040 80d8 	bne.w	8008102 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	685b      	ldr	r3, [r3, #4]
 8007f5c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007f60:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	f000 80af 	beq.w	80080c8 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007f70:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007f74:	429a      	cmp	r2, r3
 8007f76:	f080 80a7 	bcs.w	80080c8 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007f80:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f003 0320 	and.w	r3, r3, #32
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	f040 8087 	bne.w	80080a6 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fa0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007fa4:	e853 3f00 	ldrex	r3, [r3]
 8007fa8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007fac:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007fb0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007fb4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	461a      	mov	r2, r3
 8007fbe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007fc2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007fc6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fca:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007fce:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007fd2:	e841 2300 	strex	r3, r2, [r1]
 8007fd6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007fda:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d1da      	bne.n	8007f98 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	3308      	adds	r3, #8
 8007fe8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007fec:	e853 3f00 	ldrex	r3, [r3]
 8007ff0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007ff2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007ff4:	f023 0301 	bic.w	r3, r3, #1
 8007ff8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	3308      	adds	r3, #8
 8008002:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008006:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800800a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800800c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800800e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008012:	e841 2300 	strex	r3, r2, [r1]
 8008016:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008018:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800801a:	2b00      	cmp	r3, #0
 800801c:	d1e1      	bne.n	8007fe2 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	3308      	adds	r3, #8
 8008024:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008026:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008028:	e853 3f00 	ldrex	r3, [r3]
 800802c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800802e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008030:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008034:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	3308      	adds	r3, #8
 800803e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008042:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008044:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008046:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008048:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800804a:	e841 2300 	strex	r3, r2, [r1]
 800804e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008050:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008052:	2b00      	cmp	r3, #0
 8008054:	d1e3      	bne.n	800801e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2220      	movs	r2, #32
 800805a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	2200      	movs	r2, #0
 8008062:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800806a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800806c:	e853 3f00 	ldrex	r3, [r3]
 8008070:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008072:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008074:	f023 0310 	bic.w	r3, r3, #16
 8008078:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	461a      	mov	r2, r3
 8008082:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008086:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008088:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800808a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800808c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800808e:	e841 2300 	strex	r3, r2, [r1]
 8008092:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008094:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008096:	2b00      	cmp	r3, #0
 8008098:	d1e4      	bne.n	8008064 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80080a0:	4618      	mov	r0, r3
 80080a2:	f7fb fbbc 	bl	800381e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	2202      	movs	r2, #2
 80080aa:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80080b8:	b29b      	uxth	r3, r3
 80080ba:	1ad3      	subs	r3, r2, r3
 80080bc:	b29b      	uxth	r3, r3
 80080be:	4619      	mov	r1, r3
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	f000 f91b 	bl	80082fc <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80080c6:	e0fc      	b.n	80082c2 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80080ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80080d2:	429a      	cmp	r2, r3
 80080d4:	f040 80f5 	bne.w	80082c2 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	f003 0320 	and.w	r3, r3, #32
 80080e6:	2b20      	cmp	r3, #32
 80080e8:	f040 80eb 	bne.w	80082c2 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2202      	movs	r2, #2
 80080f0:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80080f8:	4619      	mov	r1, r3
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	f000 f8fe 	bl	80082fc <HAL_UARTEx_RxEventCallback>
      return;
 8008100:	e0df      	b.n	80082c2 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800810e:	b29b      	uxth	r3, r3
 8008110:	1ad3      	subs	r3, r2, r3
 8008112:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800811c:	b29b      	uxth	r3, r3
 800811e:	2b00      	cmp	r3, #0
 8008120:	f000 80d1 	beq.w	80082c6 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8008124:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008128:	2b00      	cmp	r3, #0
 800812a:	f000 80cc 	beq.w	80082c6 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008134:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008136:	e853 3f00 	ldrex	r3, [r3]
 800813a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800813c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800813e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008142:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	461a      	mov	r2, r3
 800814c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008150:	647b      	str	r3, [r7, #68]	@ 0x44
 8008152:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008154:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008156:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008158:	e841 2300 	strex	r3, r2, [r1]
 800815c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800815e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008160:	2b00      	cmp	r3, #0
 8008162:	d1e4      	bne.n	800812e <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	3308      	adds	r3, #8
 800816a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800816c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800816e:	e853 3f00 	ldrex	r3, [r3]
 8008172:	623b      	str	r3, [r7, #32]
   return(result);
 8008174:	6a3b      	ldr	r3, [r7, #32]
 8008176:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800817a:	f023 0301 	bic.w	r3, r3, #1
 800817e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	3308      	adds	r3, #8
 8008188:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800818c:	633a      	str	r2, [r7, #48]	@ 0x30
 800818e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008190:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008192:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008194:	e841 2300 	strex	r3, r2, [r1]
 8008198:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800819a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800819c:	2b00      	cmp	r3, #0
 800819e:	d1e1      	bne.n	8008164 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2220      	movs	r2, #32
 80081a4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2200      	movs	r2, #0
 80081ac:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2200      	movs	r2, #0
 80081b2:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081ba:	693b      	ldr	r3, [r7, #16]
 80081bc:	e853 3f00 	ldrex	r3, [r3]
 80081c0:	60fb      	str	r3, [r7, #12]
   return(result);
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	f023 0310 	bic.w	r3, r3, #16
 80081c8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	461a      	mov	r2, r3
 80081d2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80081d6:	61fb      	str	r3, [r7, #28]
 80081d8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081da:	69b9      	ldr	r1, [r7, #24]
 80081dc:	69fa      	ldr	r2, [r7, #28]
 80081de:	e841 2300 	strex	r3, r2, [r1]
 80081e2:	617b      	str	r3, [r7, #20]
   return(result);
 80081e4:	697b      	ldr	r3, [r7, #20]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d1e4      	bne.n	80081b4 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2202      	movs	r2, #2
 80081ee:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80081f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80081f4:	4619      	mov	r1, r3
 80081f6:	6878      	ldr	r0, [r7, #4]
 80081f8:	f000 f880 	bl	80082fc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80081fc:	e063      	b.n	80082c6 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80081fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008202:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008206:	2b00      	cmp	r3, #0
 8008208:	d00e      	beq.n	8008228 <HAL_UART_IRQHandler+0x5d8>
 800820a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800820e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008212:	2b00      	cmp	r3, #0
 8008214:	d008      	beq.n	8008228 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800821e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008220:	6878      	ldr	r0, [r7, #4]
 8008222:	f000 fddb 	bl	8008ddc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008226:	e051      	b.n	80082cc <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008228:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800822c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008230:	2b00      	cmp	r3, #0
 8008232:	d014      	beq.n	800825e <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008234:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008238:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800823c:	2b00      	cmp	r3, #0
 800823e:	d105      	bne.n	800824c <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008240:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008244:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008248:	2b00      	cmp	r3, #0
 800824a:	d008      	beq.n	800825e <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008250:	2b00      	cmp	r3, #0
 8008252:	d03a      	beq.n	80082ca <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008258:	6878      	ldr	r0, [r7, #4]
 800825a:	4798      	blx	r3
    }
    return;
 800825c:	e035      	b.n	80082ca <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800825e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008262:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008266:	2b00      	cmp	r3, #0
 8008268:	d009      	beq.n	800827e <HAL_UART_IRQHandler+0x62e>
 800826a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800826e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008272:	2b00      	cmp	r3, #0
 8008274:	d003      	beq.n	800827e <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8008276:	6878      	ldr	r0, [r7, #4]
 8008278:	f000 fd85 	bl	8008d86 <UART_EndTransmit_IT>
    return;
 800827c:	e026      	b.n	80082cc <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800827e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008282:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008286:	2b00      	cmp	r3, #0
 8008288:	d009      	beq.n	800829e <HAL_UART_IRQHandler+0x64e>
 800828a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800828e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008292:	2b00      	cmp	r3, #0
 8008294:	d003      	beq.n	800829e <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008296:	6878      	ldr	r0, [r7, #4]
 8008298:	f000 fdb4 	bl	8008e04 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800829c:	e016      	b.n	80082cc <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800829e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80082a2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d010      	beq.n	80082cc <HAL_UART_IRQHandler+0x67c>
 80082aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	da0c      	bge.n	80082cc <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	f000 fd9c 	bl	8008df0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80082b8:	e008      	b.n	80082cc <HAL_UART_IRQHandler+0x67c>
      return;
 80082ba:	bf00      	nop
 80082bc:	e006      	b.n	80082cc <HAL_UART_IRQHandler+0x67c>
    return;
 80082be:	bf00      	nop
 80082c0:	e004      	b.n	80082cc <HAL_UART_IRQHandler+0x67c>
      return;
 80082c2:	bf00      	nop
 80082c4:	e002      	b.n	80082cc <HAL_UART_IRQHandler+0x67c>
      return;
 80082c6:	bf00      	nop
 80082c8:	e000      	b.n	80082cc <HAL_UART_IRQHandler+0x67c>
    return;
 80082ca:	bf00      	nop
  }
}
 80082cc:	37e8      	adds	r7, #232	@ 0xe8
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd80      	pop	{r7, pc}
 80082d2:	bf00      	nop

080082d4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80082d4:	b480      	push	{r7}
 80082d6:	b083      	sub	sp, #12
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80082dc:	bf00      	nop
 80082de:	370c      	adds	r7, #12
 80082e0:	46bd      	mov	sp, r7
 80082e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e6:	4770      	bx	lr

080082e8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80082e8:	b480      	push	{r7}
 80082ea:	b083      	sub	sp, #12
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80082f0:	bf00      	nop
 80082f2:	370c      	adds	r7, #12
 80082f4:	46bd      	mov	sp, r7
 80082f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fa:	4770      	bx	lr

080082fc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80082fc:	b480      	push	{r7}
 80082fe:	b083      	sub	sp, #12
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
 8008304:	460b      	mov	r3, r1
 8008306:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008308:	bf00      	nop
 800830a:	370c      	adds	r7, #12
 800830c:	46bd      	mov	sp, r7
 800830e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008312:	4770      	bx	lr

08008314 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008314:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008318:	b08c      	sub	sp, #48	@ 0x30
 800831a:	af00      	add	r7, sp, #0
 800831c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800831e:	2300      	movs	r3, #0
 8008320:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008324:	697b      	ldr	r3, [r7, #20]
 8008326:	689a      	ldr	r2, [r3, #8]
 8008328:	697b      	ldr	r3, [r7, #20]
 800832a:	691b      	ldr	r3, [r3, #16]
 800832c:	431a      	orrs	r2, r3
 800832e:	697b      	ldr	r3, [r7, #20]
 8008330:	695b      	ldr	r3, [r3, #20]
 8008332:	431a      	orrs	r2, r3
 8008334:	697b      	ldr	r3, [r7, #20]
 8008336:	69db      	ldr	r3, [r3, #28]
 8008338:	4313      	orrs	r3, r2
 800833a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800833c:	697b      	ldr	r3, [r7, #20]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	681a      	ldr	r2, [r3, #0]
 8008342:	4baf      	ldr	r3, [pc, #700]	@ (8008600 <UART_SetConfig+0x2ec>)
 8008344:	4013      	ands	r3, r2
 8008346:	697a      	ldr	r2, [r7, #20]
 8008348:	6812      	ldr	r2, [r2, #0]
 800834a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800834c:	430b      	orrs	r3, r1
 800834e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008350:	697b      	ldr	r3, [r7, #20]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	685b      	ldr	r3, [r3, #4]
 8008356:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800835a:	697b      	ldr	r3, [r7, #20]
 800835c:	68da      	ldr	r2, [r3, #12]
 800835e:	697b      	ldr	r3, [r7, #20]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	430a      	orrs	r2, r1
 8008364:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008366:	697b      	ldr	r3, [r7, #20]
 8008368:	699b      	ldr	r3, [r3, #24]
 800836a:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800836c:	697b      	ldr	r3, [r7, #20]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	4aa4      	ldr	r2, [pc, #656]	@ (8008604 <UART_SetConfig+0x2f0>)
 8008372:	4293      	cmp	r3, r2
 8008374:	d004      	beq.n	8008380 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008376:	697b      	ldr	r3, [r7, #20]
 8008378:	6a1b      	ldr	r3, [r3, #32]
 800837a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800837c:	4313      	orrs	r3, r2
 800837e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008380:	697b      	ldr	r3, [r7, #20]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	689b      	ldr	r3, [r3, #8]
 8008386:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800838a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800838e:	697a      	ldr	r2, [r7, #20]
 8008390:	6812      	ldr	r2, [r2, #0]
 8008392:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008394:	430b      	orrs	r3, r1
 8008396:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008398:	697b      	ldr	r3, [r7, #20]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800839e:	f023 010f 	bic.w	r1, r3, #15
 80083a2:	697b      	ldr	r3, [r7, #20]
 80083a4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80083a6:	697b      	ldr	r3, [r7, #20]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	430a      	orrs	r2, r1
 80083ac:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80083ae:	697b      	ldr	r3, [r7, #20]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	4a95      	ldr	r2, [pc, #596]	@ (8008608 <UART_SetConfig+0x2f4>)
 80083b4:	4293      	cmp	r3, r2
 80083b6:	d125      	bne.n	8008404 <UART_SetConfig+0xf0>
 80083b8:	2003      	movs	r0, #3
 80083ba:	f7ff fb59 	bl	8007a70 <LL_RCC_GetUSARTClockSource>
 80083be:	4603      	mov	r3, r0
 80083c0:	2b03      	cmp	r3, #3
 80083c2:	d81b      	bhi.n	80083fc <UART_SetConfig+0xe8>
 80083c4:	a201      	add	r2, pc, #4	@ (adr r2, 80083cc <UART_SetConfig+0xb8>)
 80083c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083ca:	bf00      	nop
 80083cc:	080083dd 	.word	0x080083dd
 80083d0:	080083ed 	.word	0x080083ed
 80083d4:	080083e5 	.word	0x080083e5
 80083d8:	080083f5 	.word	0x080083f5
 80083dc:	2301      	movs	r3, #1
 80083de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80083e2:	e042      	b.n	800846a <UART_SetConfig+0x156>
 80083e4:	2302      	movs	r3, #2
 80083e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80083ea:	e03e      	b.n	800846a <UART_SetConfig+0x156>
 80083ec:	2304      	movs	r3, #4
 80083ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80083f2:	e03a      	b.n	800846a <UART_SetConfig+0x156>
 80083f4:	2308      	movs	r3, #8
 80083f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80083fa:	e036      	b.n	800846a <UART_SetConfig+0x156>
 80083fc:	2310      	movs	r3, #16
 80083fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008402:	e032      	b.n	800846a <UART_SetConfig+0x156>
 8008404:	697b      	ldr	r3, [r7, #20]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	4a7e      	ldr	r2, [pc, #504]	@ (8008604 <UART_SetConfig+0x2f0>)
 800840a:	4293      	cmp	r3, r2
 800840c:	d12a      	bne.n	8008464 <UART_SetConfig+0x150>
 800840e:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8008412:	f7ff fb3d 	bl	8007a90 <LL_RCC_GetLPUARTClockSource>
 8008416:	4603      	mov	r3, r0
 8008418:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800841c:	d01a      	beq.n	8008454 <UART_SetConfig+0x140>
 800841e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008422:	d81b      	bhi.n	800845c <UART_SetConfig+0x148>
 8008424:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008428:	d00c      	beq.n	8008444 <UART_SetConfig+0x130>
 800842a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800842e:	d815      	bhi.n	800845c <UART_SetConfig+0x148>
 8008430:	2b00      	cmp	r3, #0
 8008432:	d003      	beq.n	800843c <UART_SetConfig+0x128>
 8008434:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008438:	d008      	beq.n	800844c <UART_SetConfig+0x138>
 800843a:	e00f      	b.n	800845c <UART_SetConfig+0x148>
 800843c:	2300      	movs	r3, #0
 800843e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008442:	e012      	b.n	800846a <UART_SetConfig+0x156>
 8008444:	2302      	movs	r3, #2
 8008446:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800844a:	e00e      	b.n	800846a <UART_SetConfig+0x156>
 800844c:	2304      	movs	r3, #4
 800844e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008452:	e00a      	b.n	800846a <UART_SetConfig+0x156>
 8008454:	2308      	movs	r3, #8
 8008456:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800845a:	e006      	b.n	800846a <UART_SetConfig+0x156>
 800845c:	2310      	movs	r3, #16
 800845e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008462:	e002      	b.n	800846a <UART_SetConfig+0x156>
 8008464:	2310      	movs	r3, #16
 8008466:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800846a:	697b      	ldr	r3, [r7, #20]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	4a65      	ldr	r2, [pc, #404]	@ (8008604 <UART_SetConfig+0x2f0>)
 8008470:	4293      	cmp	r3, r2
 8008472:	f040 8097 	bne.w	80085a4 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008476:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800847a:	2b08      	cmp	r3, #8
 800847c:	d823      	bhi.n	80084c6 <UART_SetConfig+0x1b2>
 800847e:	a201      	add	r2, pc, #4	@ (adr r2, 8008484 <UART_SetConfig+0x170>)
 8008480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008484:	080084a9 	.word	0x080084a9
 8008488:	080084c7 	.word	0x080084c7
 800848c:	080084b1 	.word	0x080084b1
 8008490:	080084c7 	.word	0x080084c7
 8008494:	080084b7 	.word	0x080084b7
 8008498:	080084c7 	.word	0x080084c7
 800849c:	080084c7 	.word	0x080084c7
 80084a0:	080084c7 	.word	0x080084c7
 80084a4:	080084bf 	.word	0x080084bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80084a8:	f7fd fb02 	bl	8005ab0 <HAL_RCC_GetPCLK1Freq>
 80084ac:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80084ae:	e010      	b.n	80084d2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80084b0:	4b56      	ldr	r3, [pc, #344]	@ (800860c <UART_SetConfig+0x2f8>)
 80084b2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80084b4:	e00d      	b.n	80084d2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80084b6:	f7fd fa7b 	bl	80059b0 <HAL_RCC_GetSysClockFreq>
 80084ba:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80084bc:	e009      	b.n	80084d2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80084be:	f248 0306 	movw	r3, #32774	@ 0x8006
 80084c2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80084c4:	e005      	b.n	80084d2 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 80084c6:	2300      	movs	r3, #0
 80084c8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80084ca:	2301      	movs	r3, #1
 80084cc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80084d0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80084d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	f000 812b 	beq.w	8008730 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80084da:	697b      	ldr	r3, [r7, #20]
 80084dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084de:	4a4c      	ldr	r2, [pc, #304]	@ (8008610 <UART_SetConfig+0x2fc>)
 80084e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80084e4:	461a      	mov	r2, r3
 80084e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80084ec:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80084ee:	697b      	ldr	r3, [r7, #20]
 80084f0:	685a      	ldr	r2, [r3, #4]
 80084f2:	4613      	mov	r3, r2
 80084f4:	005b      	lsls	r3, r3, #1
 80084f6:	4413      	add	r3, r2
 80084f8:	69ba      	ldr	r2, [r7, #24]
 80084fa:	429a      	cmp	r2, r3
 80084fc:	d305      	bcc.n	800850a <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80084fe:	697b      	ldr	r3, [r7, #20]
 8008500:	685b      	ldr	r3, [r3, #4]
 8008502:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008504:	69ba      	ldr	r2, [r7, #24]
 8008506:	429a      	cmp	r2, r3
 8008508:	d903      	bls.n	8008512 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 800850a:	2301      	movs	r3, #1
 800850c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008510:	e10e      	b.n	8008730 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008514:	2200      	movs	r2, #0
 8008516:	60bb      	str	r3, [r7, #8]
 8008518:	60fa      	str	r2, [r7, #12]
 800851a:	697b      	ldr	r3, [r7, #20]
 800851c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800851e:	4a3c      	ldr	r2, [pc, #240]	@ (8008610 <UART_SetConfig+0x2fc>)
 8008520:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008524:	b29b      	uxth	r3, r3
 8008526:	2200      	movs	r2, #0
 8008528:	603b      	str	r3, [r7, #0]
 800852a:	607a      	str	r2, [r7, #4]
 800852c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008530:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008534:	f7f8 f962 	bl	80007fc <__aeabi_uldivmod>
 8008538:	4602      	mov	r2, r0
 800853a:	460b      	mov	r3, r1
 800853c:	4610      	mov	r0, r2
 800853e:	4619      	mov	r1, r3
 8008540:	f04f 0200 	mov.w	r2, #0
 8008544:	f04f 0300 	mov.w	r3, #0
 8008548:	020b      	lsls	r3, r1, #8
 800854a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800854e:	0202      	lsls	r2, r0, #8
 8008550:	6979      	ldr	r1, [r7, #20]
 8008552:	6849      	ldr	r1, [r1, #4]
 8008554:	0849      	lsrs	r1, r1, #1
 8008556:	2000      	movs	r0, #0
 8008558:	460c      	mov	r4, r1
 800855a:	4605      	mov	r5, r0
 800855c:	eb12 0804 	adds.w	r8, r2, r4
 8008560:	eb43 0905 	adc.w	r9, r3, r5
 8008564:	697b      	ldr	r3, [r7, #20]
 8008566:	685b      	ldr	r3, [r3, #4]
 8008568:	2200      	movs	r2, #0
 800856a:	469a      	mov	sl, r3
 800856c:	4693      	mov	fp, r2
 800856e:	4652      	mov	r2, sl
 8008570:	465b      	mov	r3, fp
 8008572:	4640      	mov	r0, r8
 8008574:	4649      	mov	r1, r9
 8008576:	f7f8 f941 	bl	80007fc <__aeabi_uldivmod>
 800857a:	4602      	mov	r2, r0
 800857c:	460b      	mov	r3, r1
 800857e:	4613      	mov	r3, r2
 8008580:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008582:	6a3b      	ldr	r3, [r7, #32]
 8008584:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008588:	d308      	bcc.n	800859c <UART_SetConfig+0x288>
 800858a:	6a3b      	ldr	r3, [r7, #32]
 800858c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008590:	d204      	bcs.n	800859c <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8008592:	697b      	ldr	r3, [r7, #20]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	6a3a      	ldr	r2, [r7, #32]
 8008598:	60da      	str	r2, [r3, #12]
 800859a:	e0c9      	b.n	8008730 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 800859c:	2301      	movs	r3, #1
 800859e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80085a2:	e0c5      	b.n	8008730 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80085a4:	697b      	ldr	r3, [r7, #20]
 80085a6:	69db      	ldr	r3, [r3, #28]
 80085a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80085ac:	d16d      	bne.n	800868a <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 80085ae:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80085b2:	3b01      	subs	r3, #1
 80085b4:	2b07      	cmp	r3, #7
 80085b6:	d82d      	bhi.n	8008614 <UART_SetConfig+0x300>
 80085b8:	a201      	add	r2, pc, #4	@ (adr r2, 80085c0 <UART_SetConfig+0x2ac>)
 80085ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085be:	bf00      	nop
 80085c0:	080085e1 	.word	0x080085e1
 80085c4:	080085e9 	.word	0x080085e9
 80085c8:	08008615 	.word	0x08008615
 80085cc:	080085ef 	.word	0x080085ef
 80085d0:	08008615 	.word	0x08008615
 80085d4:	08008615 	.word	0x08008615
 80085d8:	08008615 	.word	0x08008615
 80085dc:	080085f7 	.word	0x080085f7
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80085e0:	f7fd fa7c 	bl	8005adc <HAL_RCC_GetPCLK2Freq>
 80085e4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80085e6:	e01b      	b.n	8008620 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80085e8:	4b08      	ldr	r3, [pc, #32]	@ (800860c <UART_SetConfig+0x2f8>)
 80085ea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80085ec:	e018      	b.n	8008620 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80085ee:	f7fd f9df 	bl	80059b0 <HAL_RCC_GetSysClockFreq>
 80085f2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80085f4:	e014      	b.n	8008620 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80085f6:	f248 0306 	movw	r3, #32774	@ 0x8006
 80085fa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80085fc:	e010      	b.n	8008620 <UART_SetConfig+0x30c>
 80085fe:	bf00      	nop
 8008600:	cfff69f3 	.word	0xcfff69f3
 8008604:	40008000 	.word	0x40008000
 8008608:	40013800 	.word	0x40013800
 800860c:	00f42400 	.word	0x00f42400
 8008610:	0801079c 	.word	0x0801079c
      default:
        pclk = 0U;
 8008614:	2300      	movs	r3, #0
 8008616:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008618:	2301      	movs	r3, #1
 800861a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800861e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008622:	2b00      	cmp	r3, #0
 8008624:	f000 8084 	beq.w	8008730 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008628:	697b      	ldr	r3, [r7, #20]
 800862a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800862c:	4a4b      	ldr	r2, [pc, #300]	@ (800875c <UART_SetConfig+0x448>)
 800862e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008632:	461a      	mov	r2, r3
 8008634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008636:	fbb3 f3f2 	udiv	r3, r3, r2
 800863a:	005a      	lsls	r2, r3, #1
 800863c:	697b      	ldr	r3, [r7, #20]
 800863e:	685b      	ldr	r3, [r3, #4]
 8008640:	085b      	lsrs	r3, r3, #1
 8008642:	441a      	add	r2, r3
 8008644:	697b      	ldr	r3, [r7, #20]
 8008646:	685b      	ldr	r3, [r3, #4]
 8008648:	fbb2 f3f3 	udiv	r3, r2, r3
 800864c:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800864e:	6a3b      	ldr	r3, [r7, #32]
 8008650:	2b0f      	cmp	r3, #15
 8008652:	d916      	bls.n	8008682 <UART_SetConfig+0x36e>
 8008654:	6a3b      	ldr	r3, [r7, #32]
 8008656:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800865a:	d212      	bcs.n	8008682 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800865c:	6a3b      	ldr	r3, [r7, #32]
 800865e:	b29b      	uxth	r3, r3
 8008660:	f023 030f 	bic.w	r3, r3, #15
 8008664:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008666:	6a3b      	ldr	r3, [r7, #32]
 8008668:	085b      	lsrs	r3, r3, #1
 800866a:	b29b      	uxth	r3, r3
 800866c:	f003 0307 	and.w	r3, r3, #7
 8008670:	b29a      	uxth	r2, r3
 8008672:	8bfb      	ldrh	r3, [r7, #30]
 8008674:	4313      	orrs	r3, r2
 8008676:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008678:	697b      	ldr	r3, [r7, #20]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	8bfa      	ldrh	r2, [r7, #30]
 800867e:	60da      	str	r2, [r3, #12]
 8008680:	e056      	b.n	8008730 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8008682:	2301      	movs	r3, #1
 8008684:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008688:	e052      	b.n	8008730 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800868a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800868e:	3b01      	subs	r3, #1
 8008690:	2b07      	cmp	r3, #7
 8008692:	d822      	bhi.n	80086da <UART_SetConfig+0x3c6>
 8008694:	a201      	add	r2, pc, #4	@ (adr r2, 800869c <UART_SetConfig+0x388>)
 8008696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800869a:	bf00      	nop
 800869c:	080086bd 	.word	0x080086bd
 80086a0:	080086c5 	.word	0x080086c5
 80086a4:	080086db 	.word	0x080086db
 80086a8:	080086cb 	.word	0x080086cb
 80086ac:	080086db 	.word	0x080086db
 80086b0:	080086db 	.word	0x080086db
 80086b4:	080086db 	.word	0x080086db
 80086b8:	080086d3 	.word	0x080086d3
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80086bc:	f7fd fa0e 	bl	8005adc <HAL_RCC_GetPCLK2Freq>
 80086c0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80086c2:	e010      	b.n	80086e6 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80086c4:	4b26      	ldr	r3, [pc, #152]	@ (8008760 <UART_SetConfig+0x44c>)
 80086c6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80086c8:	e00d      	b.n	80086e6 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80086ca:	f7fd f971 	bl	80059b0 <HAL_RCC_GetSysClockFreq>
 80086ce:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80086d0:	e009      	b.n	80086e6 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80086d2:	f248 0306 	movw	r3, #32774	@ 0x8006
 80086d6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80086d8:	e005      	b.n	80086e6 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 80086da:	2300      	movs	r3, #0
 80086dc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80086de:	2301      	movs	r3, #1
 80086e0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80086e4:	bf00      	nop
    }

    if (pclk != 0U)
 80086e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d021      	beq.n	8008730 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80086ec:	697b      	ldr	r3, [r7, #20]
 80086ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086f0:	4a1a      	ldr	r2, [pc, #104]	@ (800875c <UART_SetConfig+0x448>)
 80086f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80086f6:	461a      	mov	r2, r3
 80086f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086fa:	fbb3 f2f2 	udiv	r2, r3, r2
 80086fe:	697b      	ldr	r3, [r7, #20]
 8008700:	685b      	ldr	r3, [r3, #4]
 8008702:	085b      	lsrs	r3, r3, #1
 8008704:	441a      	add	r2, r3
 8008706:	697b      	ldr	r3, [r7, #20]
 8008708:	685b      	ldr	r3, [r3, #4]
 800870a:	fbb2 f3f3 	udiv	r3, r2, r3
 800870e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008710:	6a3b      	ldr	r3, [r7, #32]
 8008712:	2b0f      	cmp	r3, #15
 8008714:	d909      	bls.n	800872a <UART_SetConfig+0x416>
 8008716:	6a3b      	ldr	r3, [r7, #32]
 8008718:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800871c:	d205      	bcs.n	800872a <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800871e:	6a3b      	ldr	r3, [r7, #32]
 8008720:	b29a      	uxth	r2, r3
 8008722:	697b      	ldr	r3, [r7, #20]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	60da      	str	r2, [r3, #12]
 8008728:	e002      	b.n	8008730 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800872a:	2301      	movs	r3, #1
 800872c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008730:	697b      	ldr	r3, [r7, #20]
 8008732:	2201      	movs	r2, #1
 8008734:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008738:	697b      	ldr	r3, [r7, #20]
 800873a:	2201      	movs	r2, #1
 800873c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008740:	697b      	ldr	r3, [r7, #20]
 8008742:	2200      	movs	r2, #0
 8008744:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008746:	697b      	ldr	r3, [r7, #20]
 8008748:	2200      	movs	r2, #0
 800874a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800874c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8008750:	4618      	mov	r0, r3
 8008752:	3730      	adds	r7, #48	@ 0x30
 8008754:	46bd      	mov	sp, r7
 8008756:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800875a:	bf00      	nop
 800875c:	0801079c 	.word	0x0801079c
 8008760:	00f42400 	.word	0x00f42400

08008764 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008764:	b480      	push	{r7}
 8008766:	b083      	sub	sp, #12
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008770:	f003 0308 	and.w	r3, r3, #8
 8008774:	2b00      	cmp	r3, #0
 8008776:	d00a      	beq.n	800878e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	685b      	ldr	r3, [r3, #4]
 800877e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	430a      	orrs	r2, r1
 800878c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008792:	f003 0301 	and.w	r3, r3, #1
 8008796:	2b00      	cmp	r3, #0
 8008798:	d00a      	beq.n	80087b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	685b      	ldr	r3, [r3, #4]
 80087a0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	430a      	orrs	r2, r1
 80087ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087b4:	f003 0302 	and.w	r3, r3, #2
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d00a      	beq.n	80087d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	685b      	ldr	r3, [r3, #4]
 80087c2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	430a      	orrs	r2, r1
 80087d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087d6:	f003 0304 	and.w	r3, r3, #4
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d00a      	beq.n	80087f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	685b      	ldr	r3, [r3, #4]
 80087e4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	430a      	orrs	r2, r1
 80087f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087f8:	f003 0310 	and.w	r3, r3, #16
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d00a      	beq.n	8008816 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	689b      	ldr	r3, [r3, #8]
 8008806:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	430a      	orrs	r2, r1
 8008814:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800881a:	f003 0320 	and.w	r3, r3, #32
 800881e:	2b00      	cmp	r3, #0
 8008820:	d00a      	beq.n	8008838 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	689b      	ldr	r3, [r3, #8]
 8008828:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	430a      	orrs	r2, r1
 8008836:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800883c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008840:	2b00      	cmp	r3, #0
 8008842:	d01a      	beq.n	800887a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	685b      	ldr	r3, [r3, #4]
 800884a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	430a      	orrs	r2, r1
 8008858:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800885e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008862:	d10a      	bne.n	800887a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	685b      	ldr	r3, [r3, #4]
 800886a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	430a      	orrs	r2, r1
 8008878:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800887e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008882:	2b00      	cmp	r3, #0
 8008884:	d00a      	beq.n	800889c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	685b      	ldr	r3, [r3, #4]
 800888c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	430a      	orrs	r2, r1
 800889a:	605a      	str	r2, [r3, #4]
  }
}
 800889c:	bf00      	nop
 800889e:	370c      	adds	r7, #12
 80088a0:	46bd      	mov	sp, r7
 80088a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a6:	4770      	bx	lr

080088a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b098      	sub	sp, #96	@ 0x60
 80088ac:	af02      	add	r7, sp, #8
 80088ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2200      	movs	r2, #0
 80088b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80088b8:	f7fa fcd0 	bl	800325c <HAL_GetTick>
 80088bc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	f003 0308 	and.w	r3, r3, #8
 80088c8:	2b08      	cmp	r3, #8
 80088ca:	d12f      	bne.n	800892c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80088cc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80088d0:	9300      	str	r3, [sp, #0]
 80088d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80088d4:	2200      	movs	r2, #0
 80088d6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80088da:	6878      	ldr	r0, [r7, #4]
 80088dc:	f000 f88e 	bl	80089fc <UART_WaitOnFlagUntilTimeout>
 80088e0:	4603      	mov	r3, r0
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d022      	beq.n	800892c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088ee:	e853 3f00 	ldrex	r3, [r3]
 80088f2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80088f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80088fa:	653b      	str	r3, [r7, #80]	@ 0x50
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	461a      	mov	r2, r3
 8008902:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008904:	647b      	str	r3, [r7, #68]	@ 0x44
 8008906:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008908:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800890a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800890c:	e841 2300 	strex	r3, r2, [r1]
 8008910:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008912:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008914:	2b00      	cmp	r3, #0
 8008916:	d1e6      	bne.n	80088e6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2220      	movs	r2, #32
 800891c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2200      	movs	r2, #0
 8008924:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008928:	2303      	movs	r3, #3
 800892a:	e063      	b.n	80089f4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	f003 0304 	and.w	r3, r3, #4
 8008936:	2b04      	cmp	r3, #4
 8008938:	d149      	bne.n	80089ce <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800893a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800893e:	9300      	str	r3, [sp, #0]
 8008940:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008942:	2200      	movs	r2, #0
 8008944:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008948:	6878      	ldr	r0, [r7, #4]
 800894a:	f000 f857 	bl	80089fc <UART_WaitOnFlagUntilTimeout>
 800894e:	4603      	mov	r3, r0
 8008950:	2b00      	cmp	r3, #0
 8008952:	d03c      	beq.n	80089ce <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800895a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800895c:	e853 3f00 	ldrex	r3, [r3]
 8008960:	623b      	str	r3, [r7, #32]
   return(result);
 8008962:	6a3b      	ldr	r3, [r7, #32]
 8008964:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008968:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	461a      	mov	r2, r3
 8008970:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008972:	633b      	str	r3, [r7, #48]	@ 0x30
 8008974:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008976:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008978:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800897a:	e841 2300 	strex	r3, r2, [r1]
 800897e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008980:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008982:	2b00      	cmp	r3, #0
 8008984:	d1e6      	bne.n	8008954 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	3308      	adds	r3, #8
 800898c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800898e:	693b      	ldr	r3, [r7, #16]
 8008990:	e853 3f00 	ldrex	r3, [r3]
 8008994:	60fb      	str	r3, [r7, #12]
   return(result);
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	f023 0301 	bic.w	r3, r3, #1
 800899c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	3308      	adds	r3, #8
 80089a4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80089a6:	61fa      	str	r2, [r7, #28]
 80089a8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089aa:	69b9      	ldr	r1, [r7, #24]
 80089ac:	69fa      	ldr	r2, [r7, #28]
 80089ae:	e841 2300 	strex	r3, r2, [r1]
 80089b2:	617b      	str	r3, [r7, #20]
   return(result);
 80089b4:	697b      	ldr	r3, [r7, #20]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d1e5      	bne.n	8008986 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	2220      	movs	r2, #32
 80089be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	2200      	movs	r2, #0
 80089c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80089ca:	2303      	movs	r3, #3
 80089cc:	e012      	b.n	80089f4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	2220      	movs	r2, #32
 80089d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	2220      	movs	r2, #32
 80089da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	2200      	movs	r2, #0
 80089e2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2200      	movs	r2, #0
 80089e8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	2200      	movs	r2, #0
 80089ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80089f2:	2300      	movs	r3, #0
}
 80089f4:	4618      	mov	r0, r3
 80089f6:	3758      	adds	r7, #88	@ 0x58
 80089f8:	46bd      	mov	sp, r7
 80089fa:	bd80      	pop	{r7, pc}

080089fc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b084      	sub	sp, #16
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	60f8      	str	r0, [r7, #12]
 8008a04:	60b9      	str	r1, [r7, #8]
 8008a06:	603b      	str	r3, [r7, #0]
 8008a08:	4613      	mov	r3, r2
 8008a0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a0c:	e04f      	b.n	8008aae <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a0e:	69bb      	ldr	r3, [r7, #24]
 8008a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a14:	d04b      	beq.n	8008aae <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a16:	f7fa fc21 	bl	800325c <HAL_GetTick>
 8008a1a:	4602      	mov	r2, r0
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	1ad3      	subs	r3, r2, r3
 8008a20:	69ba      	ldr	r2, [r7, #24]
 8008a22:	429a      	cmp	r2, r3
 8008a24:	d302      	bcc.n	8008a2c <UART_WaitOnFlagUntilTimeout+0x30>
 8008a26:	69bb      	ldr	r3, [r7, #24]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d101      	bne.n	8008a30 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008a2c:	2303      	movs	r3, #3
 8008a2e:	e04e      	b.n	8008ace <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	f003 0304 	and.w	r3, r3, #4
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d037      	beq.n	8008aae <UART_WaitOnFlagUntilTimeout+0xb2>
 8008a3e:	68bb      	ldr	r3, [r7, #8]
 8008a40:	2b80      	cmp	r3, #128	@ 0x80
 8008a42:	d034      	beq.n	8008aae <UART_WaitOnFlagUntilTimeout+0xb2>
 8008a44:	68bb      	ldr	r3, [r7, #8]
 8008a46:	2b40      	cmp	r3, #64	@ 0x40
 8008a48:	d031      	beq.n	8008aae <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	69db      	ldr	r3, [r3, #28]
 8008a50:	f003 0308 	and.w	r3, r3, #8
 8008a54:	2b08      	cmp	r3, #8
 8008a56:	d110      	bne.n	8008a7a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	2208      	movs	r2, #8
 8008a5e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008a60:	68f8      	ldr	r0, [r7, #12]
 8008a62:	f000 f879 	bl	8008b58 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	2208      	movs	r2, #8
 8008a6a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	2200      	movs	r2, #0
 8008a72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008a76:	2301      	movs	r3, #1
 8008a78:	e029      	b.n	8008ace <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	69db      	ldr	r3, [r3, #28]
 8008a80:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008a84:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008a88:	d111      	bne.n	8008aae <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008a92:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008a94:	68f8      	ldr	r0, [r7, #12]
 8008a96:	f000 f85f 	bl	8008b58 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	2220      	movs	r2, #32
 8008a9e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008aaa:	2303      	movs	r3, #3
 8008aac:	e00f      	b.n	8008ace <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	69da      	ldr	r2, [r3, #28]
 8008ab4:	68bb      	ldr	r3, [r7, #8]
 8008ab6:	4013      	ands	r3, r2
 8008ab8:	68ba      	ldr	r2, [r7, #8]
 8008aba:	429a      	cmp	r2, r3
 8008abc:	bf0c      	ite	eq
 8008abe:	2301      	moveq	r3, #1
 8008ac0:	2300      	movne	r3, #0
 8008ac2:	b2db      	uxtb	r3, r3
 8008ac4:	461a      	mov	r2, r3
 8008ac6:	79fb      	ldrb	r3, [r7, #7]
 8008ac8:	429a      	cmp	r2, r3
 8008aca:	d0a0      	beq.n	8008a0e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008acc:	2300      	movs	r3, #0
}
 8008ace:	4618      	mov	r0, r3
 8008ad0:	3710      	adds	r7, #16
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	bd80      	pop	{r7, pc}

08008ad6 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008ad6:	b480      	push	{r7}
 8008ad8:	b08f      	sub	sp, #60	@ 0x3c
 8008ada:	af00      	add	r7, sp, #0
 8008adc:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ae4:	6a3b      	ldr	r3, [r7, #32]
 8008ae6:	e853 3f00 	ldrex	r3, [r3]
 8008aea:	61fb      	str	r3, [r7, #28]
   return(result);
 8008aec:	69fb      	ldr	r3, [r7, #28]
 8008aee:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8008af2:	637b      	str	r3, [r7, #52]	@ 0x34
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	461a      	mov	r2, r3
 8008afa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008afc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008afe:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b00:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008b02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008b04:	e841 2300 	strex	r3, r2, [r1]
 8008b08:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d1e6      	bne.n	8008ade <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	3308      	adds	r3, #8
 8008b16:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	e853 3f00 	ldrex	r3, [r3]
 8008b1e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008b20:	68bb      	ldr	r3, [r7, #8]
 8008b22:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8008b26:	633b      	str	r3, [r7, #48]	@ 0x30
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	3308      	adds	r3, #8
 8008b2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008b30:	61ba      	str	r2, [r7, #24]
 8008b32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b34:	6979      	ldr	r1, [r7, #20]
 8008b36:	69ba      	ldr	r2, [r7, #24]
 8008b38:	e841 2300 	strex	r3, r2, [r1]
 8008b3c:	613b      	str	r3, [r7, #16]
   return(result);
 8008b3e:	693b      	ldr	r3, [r7, #16]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d1e5      	bne.n	8008b10 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2220      	movs	r2, #32
 8008b48:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8008b4c:	bf00      	nop
 8008b4e:	373c      	adds	r7, #60	@ 0x3c
 8008b50:	46bd      	mov	sp, r7
 8008b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b56:	4770      	bx	lr

08008b58 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008b58:	b480      	push	{r7}
 8008b5a:	b095      	sub	sp, #84	@ 0x54
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b68:	e853 3f00 	ldrex	r3, [r3]
 8008b6c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008b6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b70:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008b74:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	461a      	mov	r2, r3
 8008b7c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b7e:	643b      	str	r3, [r7, #64]	@ 0x40
 8008b80:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b82:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008b84:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008b86:	e841 2300 	strex	r3, r2, [r1]
 8008b8a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008b8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d1e6      	bne.n	8008b60 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	3308      	adds	r3, #8
 8008b98:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b9a:	6a3b      	ldr	r3, [r7, #32]
 8008b9c:	e853 3f00 	ldrex	r3, [r3]
 8008ba0:	61fb      	str	r3, [r7, #28]
   return(result);
 8008ba2:	69fb      	ldr	r3, [r7, #28]
 8008ba4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008ba8:	f023 0301 	bic.w	r3, r3, #1
 8008bac:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	3308      	adds	r3, #8
 8008bb4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008bb6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008bb8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008bbc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008bbe:	e841 2300 	strex	r3, r2, [r1]
 8008bc2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d1e3      	bne.n	8008b92 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008bce:	2b01      	cmp	r3, #1
 8008bd0:	d118      	bne.n	8008c04 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	e853 3f00 	ldrex	r3, [r3]
 8008bde:	60bb      	str	r3, [r7, #8]
   return(result);
 8008be0:	68bb      	ldr	r3, [r7, #8]
 8008be2:	f023 0310 	bic.w	r3, r3, #16
 8008be6:	647b      	str	r3, [r7, #68]	@ 0x44
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	461a      	mov	r2, r3
 8008bee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008bf0:	61bb      	str	r3, [r7, #24]
 8008bf2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bf4:	6979      	ldr	r1, [r7, #20]
 8008bf6:	69ba      	ldr	r2, [r7, #24]
 8008bf8:	e841 2300 	strex	r3, r2, [r1]
 8008bfc:	613b      	str	r3, [r7, #16]
   return(result);
 8008bfe:	693b      	ldr	r3, [r7, #16]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d1e6      	bne.n	8008bd2 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2220      	movs	r2, #32
 8008c08:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2200      	movs	r2, #0
 8008c10:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	2200      	movs	r2, #0
 8008c16:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008c18:	bf00      	nop
 8008c1a:	3754      	adds	r7, #84	@ 0x54
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c22:	4770      	bx	lr

08008c24 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b090      	sub	sp, #64	@ 0x40
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c30:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	f003 0320 	and.w	r3, r3, #32
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d137      	bne.n	8008cb0 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8008c40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c42:	2200      	movs	r2, #0
 8008c44:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008c48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	3308      	adds	r3, #8
 8008c4e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c52:	e853 3f00 	ldrex	r3, [r3]
 8008c56:	623b      	str	r3, [r7, #32]
   return(result);
 8008c58:	6a3b      	ldr	r3, [r7, #32]
 8008c5a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008c5e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008c60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	3308      	adds	r3, #8
 8008c66:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008c68:	633a      	str	r2, [r7, #48]	@ 0x30
 8008c6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c6c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008c6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008c70:	e841 2300 	strex	r3, r2, [r1]
 8008c74:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008c76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d1e5      	bne.n	8008c48 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008c7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c82:	693b      	ldr	r3, [r7, #16]
 8008c84:	e853 3f00 	ldrex	r3, [r3]
 8008c88:	60fb      	str	r3, [r7, #12]
   return(result);
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008c90:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	461a      	mov	r2, r3
 8008c98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c9a:	61fb      	str	r3, [r7, #28]
 8008c9c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c9e:	69b9      	ldr	r1, [r7, #24]
 8008ca0:	69fa      	ldr	r2, [r7, #28]
 8008ca2:	e841 2300 	strex	r3, r2, [r1]
 8008ca6:	617b      	str	r3, [r7, #20]
   return(result);
 8008ca8:	697b      	ldr	r3, [r7, #20]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d1e6      	bne.n	8008c7c <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008cae:	e002      	b.n	8008cb6 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8008cb0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8008cb2:	f7f9 fb39 	bl	8002328 <HAL_UART_TxCpltCallback>
}
 8008cb6:	bf00      	nop
 8008cb8:	3740      	adds	r7, #64	@ 0x40
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	bd80      	pop	{r7, pc}

08008cbe <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008cbe:	b580      	push	{r7, lr}
 8008cc0:	b084      	sub	sp, #16
 8008cc2:	af00      	add	r7, sp, #0
 8008cc4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cca:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008ccc:	68f8      	ldr	r0, [r7, #12]
 8008cce:	f7ff fb01 	bl	80082d4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008cd2:	bf00      	nop
 8008cd4:	3710      	adds	r7, #16
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	bd80      	pop	{r7, pc}

08008cda <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008cda:	b580      	push	{r7, lr}
 8008cdc:	b086      	sub	sp, #24
 8008cde:	af00      	add	r7, sp, #0
 8008ce0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ce6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008ce8:	697b      	ldr	r3, [r7, #20]
 8008cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008cee:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008cf0:	697b      	ldr	r3, [r7, #20]
 8008cf2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008cf6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008cf8:	697b      	ldr	r3, [r7, #20]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	689b      	ldr	r3, [r3, #8]
 8008cfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d02:	2b80      	cmp	r3, #128	@ 0x80
 8008d04:	d109      	bne.n	8008d1a <UART_DMAError+0x40>
 8008d06:	693b      	ldr	r3, [r7, #16]
 8008d08:	2b21      	cmp	r3, #33	@ 0x21
 8008d0a:	d106      	bne.n	8008d1a <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008d0c:	697b      	ldr	r3, [r7, #20]
 8008d0e:	2200      	movs	r2, #0
 8008d10:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8008d14:	6978      	ldr	r0, [r7, #20]
 8008d16:	f7ff fede 	bl	8008ad6 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008d1a:	697b      	ldr	r3, [r7, #20]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	689b      	ldr	r3, [r3, #8]
 8008d20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d24:	2b40      	cmp	r3, #64	@ 0x40
 8008d26:	d109      	bne.n	8008d3c <UART_DMAError+0x62>
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	2b22      	cmp	r3, #34	@ 0x22
 8008d2c:	d106      	bne.n	8008d3c <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008d2e:	697b      	ldr	r3, [r7, #20]
 8008d30:	2200      	movs	r2, #0
 8008d32:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8008d36:	6978      	ldr	r0, [r7, #20]
 8008d38:	f7ff ff0e 	bl	8008b58 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008d3c:	697b      	ldr	r3, [r7, #20]
 8008d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d42:	f043 0210 	orr.w	r2, r3, #16
 8008d46:	697b      	ldr	r3, [r7, #20]
 8008d48:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008d4c:	6978      	ldr	r0, [r7, #20]
 8008d4e:	f7ff facb 	bl	80082e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008d52:	bf00      	nop
 8008d54:	3718      	adds	r7, #24
 8008d56:	46bd      	mov	sp, r7
 8008d58:	bd80      	pop	{r7, pc}

08008d5a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008d5a:	b580      	push	{r7, lr}
 8008d5c:	b084      	sub	sp, #16
 8008d5e:	af00      	add	r7, sp, #0
 8008d60:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d66:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	2200      	movs	r2, #0
 8008d74:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008d78:	68f8      	ldr	r0, [r7, #12]
 8008d7a:	f7ff fab5 	bl	80082e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008d7e:	bf00      	nop
 8008d80:	3710      	adds	r7, #16
 8008d82:	46bd      	mov	sp, r7
 8008d84:	bd80      	pop	{r7, pc}

08008d86 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008d86:	b580      	push	{r7, lr}
 8008d88:	b088      	sub	sp, #32
 8008d8a:	af00      	add	r7, sp, #0
 8008d8c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	e853 3f00 	ldrex	r3, [r3]
 8008d9a:	60bb      	str	r3, [r7, #8]
   return(result);
 8008d9c:	68bb      	ldr	r3, [r7, #8]
 8008d9e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008da2:	61fb      	str	r3, [r7, #28]
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	461a      	mov	r2, r3
 8008daa:	69fb      	ldr	r3, [r7, #28]
 8008dac:	61bb      	str	r3, [r7, #24]
 8008dae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008db0:	6979      	ldr	r1, [r7, #20]
 8008db2:	69ba      	ldr	r2, [r7, #24]
 8008db4:	e841 2300 	strex	r3, r2, [r1]
 8008db8:	613b      	str	r3, [r7, #16]
   return(result);
 8008dba:	693b      	ldr	r3, [r7, #16]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d1e6      	bne.n	8008d8e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2220      	movs	r2, #32
 8008dc4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2200      	movs	r2, #0
 8008dcc:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008dce:	6878      	ldr	r0, [r7, #4]
 8008dd0:	f7f9 faaa 	bl	8002328 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008dd4:	bf00      	nop
 8008dd6:	3720      	adds	r7, #32
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	bd80      	pop	{r7, pc}

08008ddc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008ddc:	b480      	push	{r7}
 8008dde:	b083      	sub	sp, #12
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008de4:	bf00      	nop
 8008de6:	370c      	adds	r7, #12
 8008de8:	46bd      	mov	sp, r7
 8008dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dee:	4770      	bx	lr

08008df0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008df0:	b480      	push	{r7}
 8008df2:	b083      	sub	sp, #12
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008df8:	bf00      	nop
 8008dfa:	370c      	adds	r7, #12
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e02:	4770      	bx	lr

08008e04 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008e04:	b480      	push	{r7}
 8008e06:	b083      	sub	sp, #12
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008e0c:	bf00      	nop
 8008e0e:	370c      	adds	r7, #12
 8008e10:	46bd      	mov	sp, r7
 8008e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e16:	4770      	bx	lr

08008e18 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008e18:	b480      	push	{r7}
 8008e1a:	b085      	sub	sp, #20
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008e26:	2b01      	cmp	r3, #1
 8008e28:	d101      	bne.n	8008e2e <HAL_UARTEx_DisableFifoMode+0x16>
 8008e2a:	2302      	movs	r3, #2
 8008e2c:	e027      	b.n	8008e7e <HAL_UARTEx_DisableFifoMode+0x66>
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	2201      	movs	r2, #1
 8008e32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	2224      	movs	r2, #36	@ 0x24
 8008e3a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	681a      	ldr	r2, [r3, #0]
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	f022 0201 	bic.w	r2, r2, #1
 8008e54:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008e5c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	2200      	movs	r2, #0
 8008e62:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	68fa      	ldr	r2, [r7, #12]
 8008e6a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2220      	movs	r2, #32
 8008e70:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2200      	movs	r2, #0
 8008e78:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008e7c:	2300      	movs	r3, #0
}
 8008e7e:	4618      	mov	r0, r3
 8008e80:	3714      	adds	r7, #20
 8008e82:	46bd      	mov	sp, r7
 8008e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e88:	4770      	bx	lr

08008e8a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008e8a:	b580      	push	{r7, lr}
 8008e8c:	b084      	sub	sp, #16
 8008e8e:	af00      	add	r7, sp, #0
 8008e90:	6078      	str	r0, [r7, #4]
 8008e92:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008e9a:	2b01      	cmp	r3, #1
 8008e9c:	d101      	bne.n	8008ea2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008e9e:	2302      	movs	r3, #2
 8008ea0:	e02d      	b.n	8008efe <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	2201      	movs	r2, #1
 8008ea6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	2224      	movs	r2, #36	@ 0x24
 8008eae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	681a      	ldr	r2, [r3, #0]
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	f022 0201 	bic.w	r2, r2, #1
 8008ec8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	689b      	ldr	r3, [r3, #8]
 8008ed0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	683a      	ldr	r2, [r7, #0]
 8008eda:	430a      	orrs	r2, r1
 8008edc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008ede:	6878      	ldr	r0, [r7, #4]
 8008ee0:	f000 f850 	bl	8008f84 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	68fa      	ldr	r2, [r7, #12]
 8008eea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2220      	movs	r2, #32
 8008ef0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008efc:	2300      	movs	r3, #0
}
 8008efe:	4618      	mov	r0, r3
 8008f00:	3710      	adds	r7, #16
 8008f02:	46bd      	mov	sp, r7
 8008f04:	bd80      	pop	{r7, pc}

08008f06 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008f06:	b580      	push	{r7, lr}
 8008f08:	b084      	sub	sp, #16
 8008f0a:	af00      	add	r7, sp, #0
 8008f0c:	6078      	str	r0, [r7, #4]
 8008f0e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008f16:	2b01      	cmp	r3, #1
 8008f18:	d101      	bne.n	8008f1e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008f1a:	2302      	movs	r3, #2
 8008f1c:	e02d      	b.n	8008f7a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	2201      	movs	r2, #1
 8008f22:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	2224      	movs	r2, #36	@ 0x24
 8008f2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	681a      	ldr	r2, [r3, #0]
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	f022 0201 	bic.w	r2, r2, #1
 8008f44:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	689b      	ldr	r3, [r3, #8]
 8008f4c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	683a      	ldr	r2, [r7, #0]
 8008f56:	430a      	orrs	r2, r1
 8008f58:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008f5a:	6878      	ldr	r0, [r7, #4]
 8008f5c:	f000 f812 	bl	8008f84 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	68fa      	ldr	r2, [r7, #12]
 8008f66:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2220      	movs	r2, #32
 8008f6c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	2200      	movs	r2, #0
 8008f74:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008f78:	2300      	movs	r3, #0
}
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	3710      	adds	r7, #16
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	bd80      	pop	{r7, pc}
	...

08008f84 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008f84:	b480      	push	{r7}
 8008f86:	b085      	sub	sp, #20
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d108      	bne.n	8008fa6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2201      	movs	r2, #1
 8008f98:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2201      	movs	r2, #1
 8008fa0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008fa4:	e031      	b.n	800900a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008fa6:	2308      	movs	r3, #8
 8008fa8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008faa:	2308      	movs	r3, #8
 8008fac:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	689b      	ldr	r3, [r3, #8]
 8008fb4:	0e5b      	lsrs	r3, r3, #25
 8008fb6:	b2db      	uxtb	r3, r3
 8008fb8:	f003 0307 	and.w	r3, r3, #7
 8008fbc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	689b      	ldr	r3, [r3, #8]
 8008fc4:	0f5b      	lsrs	r3, r3, #29
 8008fc6:	b2db      	uxtb	r3, r3
 8008fc8:	f003 0307 	and.w	r3, r3, #7
 8008fcc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008fce:	7bbb      	ldrb	r3, [r7, #14]
 8008fd0:	7b3a      	ldrb	r2, [r7, #12]
 8008fd2:	4911      	ldr	r1, [pc, #68]	@ (8009018 <UARTEx_SetNbDataToProcess+0x94>)
 8008fd4:	5c8a      	ldrb	r2, [r1, r2]
 8008fd6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008fda:	7b3a      	ldrb	r2, [r7, #12]
 8008fdc:	490f      	ldr	r1, [pc, #60]	@ (800901c <UARTEx_SetNbDataToProcess+0x98>)
 8008fde:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008fe0:	fb93 f3f2 	sdiv	r3, r3, r2
 8008fe4:	b29a      	uxth	r2, r3
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008fec:	7bfb      	ldrb	r3, [r7, #15]
 8008fee:	7b7a      	ldrb	r2, [r7, #13]
 8008ff0:	4909      	ldr	r1, [pc, #36]	@ (8009018 <UARTEx_SetNbDataToProcess+0x94>)
 8008ff2:	5c8a      	ldrb	r2, [r1, r2]
 8008ff4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008ff8:	7b7a      	ldrb	r2, [r7, #13]
 8008ffa:	4908      	ldr	r1, [pc, #32]	@ (800901c <UARTEx_SetNbDataToProcess+0x98>)
 8008ffc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008ffe:	fb93 f3f2 	sdiv	r3, r3, r2
 8009002:	b29a      	uxth	r2, r3
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800900a:	bf00      	nop
 800900c:	3714      	adds	r7, #20
 800900e:	46bd      	mov	sp, r7
 8009010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009014:	4770      	bx	lr
 8009016:	bf00      	nop
 8009018:	080107b4 	.word	0x080107b4
 800901c:	080107bc 	.word	0x080107bc

08009020 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 8009020:	b580      	push	{r7, lr}
 8009022:	b088      	sub	sp, #32
 8009024:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8009026:	2300      	movs	r3, #0
 8009028:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800902a:	f107 0308 	add.w	r3, r7, #8
 800902e:	2218      	movs	r2, #24
 8009030:	2100      	movs	r1, #0
 8009032:	4618      	mov	r0, r3
 8009034:	f001 f9ff 	bl	800a436 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009038:	233f      	movs	r3, #63	@ 0x3f
 800903a:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 800903c:	2381      	movs	r3, #129	@ 0x81
 800903e:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8009040:	1dfb      	adds	r3, r7, #7
 8009042:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8009044:	2301      	movs	r3, #1
 8009046:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009048:	f107 0308 	add.w	r3, r7, #8
 800904c:	2100      	movs	r1, #0
 800904e:	4618      	mov	r0, r3
 8009050:	f001 fc7a 	bl	800a948 <hci_send_req>
 8009054:	4603      	mov	r3, r0
 8009056:	2b00      	cmp	r3, #0
 8009058:	da01      	bge.n	800905e <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 800905a:	23ff      	movs	r3, #255	@ 0xff
 800905c:	e000      	b.n	8009060 <aci_gap_set_non_discoverable+0x40>
  return status;
 800905e:	79fb      	ldrb	r3, [r7, #7]
}
 8009060:	4618      	mov	r0, r3
 8009062:	3720      	adds	r7, #32
 8009064:	46bd      	mov	sp, r7
 8009066:	bd80      	pop	{r7, pc}

08009068 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 8009068:	b5b0      	push	{r4, r5, r7, lr}
 800906a:	b0ce      	sub	sp, #312	@ 0x138
 800906c:	af00      	add	r7, sp, #0
 800906e:	4605      	mov	r5, r0
 8009070:	460c      	mov	r4, r1
 8009072:	4610      	mov	r0, r2
 8009074:	4619      	mov	r1, r3
 8009076:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800907a:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800907e:	462a      	mov	r2, r5
 8009080:	701a      	strb	r2, [r3, #0]
 8009082:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009086:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800908a:	4622      	mov	r2, r4
 800908c:	801a      	strh	r2, [r3, #0]
 800908e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009092:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 8009096:	4602      	mov	r2, r0
 8009098:	801a      	strh	r2, [r3, #0]
 800909a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800909e:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 80090a2:	460a      	mov	r2, r1
 80090a4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 80090a6:	f107 0310 	add.w	r3, r7, #16
 80090aa:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 80090ae:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 80090b2:	3308      	adds	r3, #8
 80090b4:	f107 0210 	add.w	r2, r7, #16
 80090b8:	4413      	add	r3, r2
 80090ba:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 80090be:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 80090c2:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 80090c6:	4413      	add	r3, r2
 80090c8:	3309      	adds	r3, #9
 80090ca:	f107 0210 	add.w	r2, r7, #16
 80090ce:	4413      	add	r3, r2
 80090d0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80090d4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80090d8:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80090dc:	2200      	movs	r2, #0
 80090de:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80090e0:	2300      	movs	r3, #0
 80090e2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Type = Advertising_Type;
 80090e6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80090ea:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80090ee:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 80090f2:	7812      	ldrb	r2, [r2, #0]
 80090f4:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80090f6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80090fa:	3301      	adds	r3, #1
 80090fc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 8009100:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8009104:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8009108:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 800910c:	8812      	ldrh	r2, [r2, #0]
 800910e:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8009112:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009116:	3302      	adds	r3, #2
 8009118:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 800911c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8009120:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8009124:	f5a2 729b 	sub.w	r2, r2, #310	@ 0x136
 8009128:	8812      	ldrh	r2, [r2, #0]
 800912a:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 800912e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009132:	3302      	adds	r3, #2
 8009134:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 8009138:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800913c:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8009140:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8009144:	7812      	ldrb	r2, [r2, #0]
 8009146:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8009148:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800914c:	3301      	adds	r3, #1
 800914e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 8009152:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8009156:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 800915a:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800915c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009160:	3301      	adds	r3, #1
 8009162:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 8009166:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800916a:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 800916e:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8009170:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009174:	3301      	adds	r3, #1
 8009176:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 800917a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800917e:	3308      	adds	r3, #8
 8009180:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8009184:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 8009188:	4618      	mov	r0, r3
 800918a:	f001 f944 	bl	800a416 <Osal_MemCpy>
    index_input += Local_Name_Length;
 800918e:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 8009192:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8009196:	4413      	add	r3, r2
 8009198:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 800919c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80091a0:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 80091a4:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 80091a6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80091aa:	3301      	adds	r3, #1
 80091ac:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 80091b0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80091b4:	3301      	adds	r3, #1
 80091b6:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 80091ba:	f8d7 1158 	ldr.w	r1, [r7, #344]	@ 0x158
 80091be:	4618      	mov	r0, r3
 80091c0:	f001 f929 	bl	800a416 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 80091c4:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 80091c8:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 80091cc:	4413      	add	r3, r2
 80091ce:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 80091d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80091d6:	f8b7 215c 	ldrh.w	r2, [r7, #348]	@ 0x15c
 80091da:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 80091dc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80091e0:	3302      	adds	r3, #2
 80091e2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 80091e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80091ea:	f8b7 2160 	ldrh.w	r2, [r7, #352]	@ 0x160
 80091ee:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 80091f0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80091f4:	3302      	adds	r3, #2
 80091f6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80091fa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80091fe:	2218      	movs	r2, #24
 8009200:	2100      	movs	r1, #0
 8009202:	4618      	mov	r0, r3
 8009204:	f001 f917 	bl	800a436 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009208:	233f      	movs	r3, #63	@ 0x3f
 800920a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x083;
 800920e:	2383      	movs	r3, #131	@ 0x83
 8009210:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8009214:	f107 0310 	add.w	r3, r7, #16
 8009218:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800921c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009220:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8009224:	f107 030f 	add.w	r3, r7, #15
 8009228:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800922c:	2301      	movs	r3, #1
 800922e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009232:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009236:	2100      	movs	r1, #0
 8009238:	4618      	mov	r0, r3
 800923a:	f001 fb85 	bl	800a948 <hci_send_req>
 800923e:	4603      	mov	r3, r0
 8009240:	2b00      	cmp	r3, #0
 8009242:	da01      	bge.n	8009248 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 8009244:	23ff      	movs	r3, #255	@ 0xff
 8009246:	e004      	b.n	8009252 <aci_gap_set_discoverable+0x1ea>
  return status;
 8009248:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800924c:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8009250:	781b      	ldrb	r3, [r3, #0]
}
 8009252:	4618      	mov	r0, r3
 8009254:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 8009258:	46bd      	mov	sp, r7
 800925a:	bdb0      	pop	{r4, r5, r7, pc}

0800925c <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 800925c:	b580      	push	{r7, lr}
 800925e:	b0cc      	sub	sp, #304	@ 0x130
 8009260:	af00      	add	r7, sp, #0
 8009262:	4602      	mov	r2, r0
 8009264:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009268:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800926c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 800926e:	f107 0310 	add.w	r3, r7, #16
 8009272:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8009276:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800927a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800927e:	2200      	movs	r2, #0
 8009280:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009282:	2300      	movs	r3, #0
 8009284:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->IO_Capability = IO_Capability;
 8009288:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800928c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009290:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8009294:	7812      	ldrb	r2, [r2, #0]
 8009296:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009298:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800929c:	3301      	adds	r3, #1
 800929e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80092a2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80092a6:	2218      	movs	r2, #24
 80092a8:	2100      	movs	r1, #0
 80092aa:	4618      	mov	r0, r3
 80092ac:	f001 f8c3 	bl	800a436 <Osal_MemSet>
  rq.ogf = 0x3f;
 80092b0:	233f      	movs	r3, #63	@ 0x3f
 80092b2:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x085;
 80092b6:	2385      	movs	r3, #133	@ 0x85
 80092b8:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80092bc:	f107 0310 	add.w	r3, r7, #16
 80092c0:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80092c4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80092c8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80092cc:	f107 030f 	add.w	r3, r7, #15
 80092d0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80092d4:	2301      	movs	r3, #1
 80092d6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80092da:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80092de:	2100      	movs	r1, #0
 80092e0:	4618      	mov	r0, r3
 80092e2:	f001 fb31 	bl	800a948 <hci_send_req>
 80092e6:	4603      	mov	r3, r0
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	da01      	bge.n	80092f0 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 80092ec:	23ff      	movs	r3, #255	@ 0xff
 80092ee:	e004      	b.n	80092fa <aci_gap_set_io_capability+0x9e>
  return status;
 80092f0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80092f4:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80092f8:	781b      	ldrb	r3, [r3, #0]
}
 80092fa:	4618      	mov	r0, r3
 80092fc:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8009300:	46bd      	mov	sp, r7
 8009302:	bd80      	pop	{r7, pc}

08009304 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 8009304:	b5b0      	push	{r4, r5, r7, lr}
 8009306:	b0cc      	sub	sp, #304	@ 0x130
 8009308:	af00      	add	r7, sp, #0
 800930a:	4605      	mov	r5, r0
 800930c:	460c      	mov	r4, r1
 800930e:	4610      	mov	r0, r2
 8009310:	4619      	mov	r1, r3
 8009312:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009316:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800931a:	462a      	mov	r2, r5
 800931c:	701a      	strb	r2, [r3, #0]
 800931e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009322:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8009326:	4622      	mov	r2, r4
 8009328:	701a      	strb	r2, [r3, #0]
 800932a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800932e:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8009332:	4602      	mov	r2, r0
 8009334:	701a      	strb	r2, [r3, #0]
 8009336:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800933a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800933e:	460a      	mov	r2, r1
 8009340:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 8009342:	f107 0310 	add.w	r3, r7, #16
 8009346:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800934a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800934e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009352:	2200      	movs	r2, #0
 8009354:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009356:	2300      	movs	r3, #0
 8009358:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 800935c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009360:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009364:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8009368:	7812      	ldrb	r2, [r2, #0]
 800936a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800936c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009370:	3301      	adds	r3, #1
 8009372:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->MITM_Mode = MITM_Mode;
 8009376:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800937a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800937e:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8009382:	7812      	ldrb	r2, [r2, #0]
 8009384:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8009386:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800938a:	3301      	adds	r3, #1
 800938c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->SC_Support = SC_Support;
 8009390:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009394:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009398:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800939c:	7812      	ldrb	r2, [r2, #0]
 800939e:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80093a0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80093a4:	3301      	adds	r3, #1
 80093a6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 80093aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80093ae:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80093b2:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 80093b6:	7812      	ldrb	r2, [r2, #0]
 80093b8:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 80093ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80093be:	3301      	adds	r3, #1
 80093c0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 80093c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80093c8:	f897 2140 	ldrb.w	r2, [r7, #320]	@ 0x140
 80093cc:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80093ce:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80093d2:	3301      	adds	r3, #1
 80093d4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 80093d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80093dc:	f897 2144 	ldrb.w	r2, [r7, #324]	@ 0x144
 80093e0:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80093e2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80093e6:	3301      	adds	r3, #1
 80093e8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 80093ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80093f0:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 80093f4:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 80093f6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80093fa:	3301      	adds	r3, #1
 80093fc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 8009400:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009404:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8009408:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 800940c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009410:	3304      	adds	r3, #4
 8009412:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 8009416:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800941a:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 800941e:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8009420:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009424:	3301      	adds	r3, #1
 8009426:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800942a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800942e:	2218      	movs	r2, #24
 8009430:	2100      	movs	r1, #0
 8009432:	4618      	mov	r0, r3
 8009434:	f000 ffff 	bl	800a436 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009438:	233f      	movs	r3, #63	@ 0x3f
 800943a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x086;
 800943e:	2386      	movs	r3, #134	@ 0x86
 8009440:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8009444:	f107 0310 	add.w	r3, r7, #16
 8009448:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800944c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009450:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8009454:	f107 030f 	add.w	r3, r7, #15
 8009458:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800945c:	2301      	movs	r3, #1
 800945e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009462:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009466:	2100      	movs	r1, #0
 8009468:	4618      	mov	r0, r3
 800946a:	f001 fa6d 	bl	800a948 <hci_send_req>
 800946e:	4603      	mov	r3, r0
 8009470:	2b00      	cmp	r3, #0
 8009472:	da01      	bge.n	8009478 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 8009474:	23ff      	movs	r3, #255	@ 0xff
 8009476:	e004      	b.n	8009482 <aci_gap_set_authentication_requirement+0x17e>
  return status;
 8009478:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800947c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009480:	781b      	ldrb	r3, [r3, #0]
}
 8009482:	4618      	mov	r0, r3
 8009484:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8009488:	46bd      	mov	sp, r7
 800948a:	bdb0      	pop	{r4, r5, r7, pc}

0800948c <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b0cc      	sub	sp, #304	@ 0x130
 8009490:	af00      	add	r7, sp, #0
 8009492:	4602      	mov	r2, r0
 8009494:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009498:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800949c:	6019      	str	r1, [r3, #0]
 800949e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80094a2:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80094a6:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 80094a8:	f107 0310 	add.w	r3, r7, #16
 80094ac:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80094b0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80094b4:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80094b8:	2200      	movs	r2, #0
 80094ba:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80094bc:	2300      	movs	r3, #0
 80094be:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 80094c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80094c6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80094ca:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80094ce:	8812      	ldrh	r2, [r2, #0]
 80094d0:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80094d2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80094d6:	3302      	adds	r3, #2
 80094d8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Pass_Key = Pass_Key;
 80094dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80094e0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80094e4:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 80094e8:	6812      	ldr	r2, [r2, #0]
 80094ea:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 80094ee:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80094f2:	3304      	adds	r3, #4
 80094f4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80094f8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80094fc:	2218      	movs	r2, #24
 80094fe:	2100      	movs	r1, #0
 8009500:	4618      	mov	r0, r3
 8009502:	f000 ff98 	bl	800a436 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009506:	233f      	movs	r3, #63	@ 0x3f
 8009508:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x088;
 800950c:	2388      	movs	r3, #136	@ 0x88
 800950e:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8009512:	f107 0310 	add.w	r3, r7, #16
 8009516:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800951a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800951e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8009522:	f107 030f 	add.w	r3, r7, #15
 8009526:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800952a:	2301      	movs	r3, #1
 800952c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009530:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009534:	2100      	movs	r1, #0
 8009536:	4618      	mov	r0, r3
 8009538:	f001 fa06 	bl	800a948 <hci_send_req>
 800953c:	4603      	mov	r3, r0
 800953e:	2b00      	cmp	r3, #0
 8009540:	da01      	bge.n	8009546 <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 8009542:	23ff      	movs	r3, #255	@ 0xff
 8009544:	e004      	b.n	8009550 <aci_gap_pass_key_resp+0xc4>
  return status;
 8009546:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800954a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800954e:	781b      	ldrb	r3, [r3, #0]
}
 8009550:	4618      	mov	r0, r3
 8009552:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8009556:	46bd      	mov	sp, r7
 8009558:	bd80      	pop	{r7, pc}

0800955a <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 800955a:	b590      	push	{r4, r7, lr}
 800955c:	b0cd      	sub	sp, #308	@ 0x134
 800955e:	af00      	add	r7, sp, #0
 8009560:	4604      	mov	r4, r0
 8009562:	4608      	mov	r0, r1
 8009564:	4611      	mov	r1, r2
 8009566:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800956a:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 800956e:	6013      	str	r3, [r2, #0]
 8009570:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009574:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8009578:	4622      	mov	r2, r4
 800957a:	701a      	strb	r2, [r3, #0]
 800957c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009580:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8009584:	4602      	mov	r2, r0
 8009586:	701a      	strb	r2, [r3, #0]
 8009588:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800958c:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8009590:	460a      	mov	r2, r1
 8009592:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8009594:	f107 0310 	add.w	r3, r7, #16
 8009598:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800959c:	f107 0308 	add.w	r3, r7, #8
 80095a0:	2207      	movs	r2, #7
 80095a2:	2100      	movs	r1, #0
 80095a4:	4618      	mov	r0, r3
 80095a6:	f000 ff46 	bl	800a436 <Osal_MemSet>
  int index_input = 0;
 80095aa:	2300      	movs	r3, #0
 80095ac:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Role = Role;
 80095b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80095b4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80095b8:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 80095bc:	7812      	ldrb	r2, [r2, #0]
 80095be:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80095c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80095c4:	3301      	adds	r3, #1
 80095c6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->privacy_enabled = privacy_enabled;
 80095ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80095ce:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80095d2:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80095d6:	7812      	ldrb	r2, [r2, #0]
 80095d8:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80095da:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80095de:	3301      	adds	r3, #1
 80095e0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->device_name_char_len = device_name_char_len;
 80095e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80095e8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80095ec:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 80095f0:	7812      	ldrb	r2, [r2, #0]
 80095f2:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80095f4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80095f8:	3301      	adds	r3, #1
 80095fa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80095fe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009602:	2218      	movs	r2, #24
 8009604:	2100      	movs	r1, #0
 8009606:	4618      	mov	r0, r3
 8009608:	f000 ff15 	bl	800a436 <Osal_MemSet>
  rq.ogf = 0x3f;
 800960c:	233f      	movs	r3, #63	@ 0x3f
 800960e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08a;
 8009612:	238a      	movs	r3, #138	@ 0x8a
 8009614:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8009618:	f107 0310 	add.w	r3, r7, #16
 800961c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8009620:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009624:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 8009628:	f107 0308 	add.w	r3, r7, #8
 800962c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 8009630:	2307      	movs	r3, #7
 8009632:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009636:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800963a:	2100      	movs	r1, #0
 800963c:	4618      	mov	r0, r3
 800963e:	f001 f983 	bl	800a948 <hci_send_req>
 8009642:	4603      	mov	r3, r0
 8009644:	2b00      	cmp	r3, #0
 8009646:	da01      	bge.n	800964c <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 8009648:	23ff      	movs	r3, #255	@ 0xff
 800964a:	e02e      	b.n	80096aa <aci_gap_init+0x150>
  if ( resp.Status )
 800964c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009650:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8009654:	781b      	ldrb	r3, [r3, #0]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d005      	beq.n	8009666 <aci_gap_init+0x10c>
    return resp.Status;
 800965a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800965e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8009662:	781b      	ldrb	r3, [r3, #0]
 8009664:	e021      	b.n	80096aa <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 8009666:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800966a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800966e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009672:	b29a      	uxth	r2, r3
 8009674:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009678:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 8009680:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009684:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8009688:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800968c:	b29a      	uxth	r2, r3
 800968e:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8009692:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8009694:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009698:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800969c:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80096a0:	b29a      	uxth	r2, r3
 80096a2:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80096a6:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80096a8:	2300      	movs	r3, #0
}
 80096aa:	4618      	mov	r0, r3
 80096ac:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 80096b0:	46bd      	mov	sp, r7
 80096b2:	bd90      	pop	{r4, r7, pc}

080096b4 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 80096b4:	b580      	push	{r7, lr}
 80096b6:	b0cc      	sub	sp, #304	@ 0x130
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	4602      	mov	r2, r0
 80096bc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80096c0:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80096c4:	6019      	str	r1, [r3, #0]
 80096c6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80096ca:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80096ce:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 80096d0:	f107 0310 	add.w	r3, r7, #16
 80096d4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80096d8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80096dc:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80096e0:	2200      	movs	r2, #0
 80096e2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80096e4:	2300      	movs	r3, #0
 80096e6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->AdvDataLen = AdvDataLen;
 80096ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80096ee:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80096f2:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 80096f6:	7812      	ldrb	r2, [r2, #0]
 80096f8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80096fa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80096fe:	3301      	adds	r3, #1
 8009700:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 8009704:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009708:	1c58      	adds	r0, r3, #1
 800970a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800970e:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8009712:	781a      	ldrb	r2, [r3, #0]
 8009714:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009718:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800971c:	6819      	ldr	r1, [r3, #0]
 800971e:	f000 fe7a 	bl	800a416 <Osal_MemCpy>
  index_input += AdvDataLen;
 8009722:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009726:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800972a:	781b      	ldrb	r3, [r3, #0]
 800972c:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8009730:	4413      	add	r3, r2
 8009732:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009736:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800973a:	2218      	movs	r2, #24
 800973c:	2100      	movs	r1, #0
 800973e:	4618      	mov	r0, r3
 8009740:	f000 fe79 	bl	800a436 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009744:	233f      	movs	r3, #63	@ 0x3f
 8009746:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08e;
 800974a:	238e      	movs	r3, #142	@ 0x8e
 800974c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8009750:	f107 0310 	add.w	r3, r7, #16
 8009754:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8009758:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800975c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8009760:	f107 030f 	add.w	r3, r7, #15
 8009764:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8009768:	2301      	movs	r3, #1
 800976a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800976e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009772:	2100      	movs	r1, #0
 8009774:	4618      	mov	r0, r3
 8009776:	f001 f8e7 	bl	800a948 <hci_send_req>
 800977a:	4603      	mov	r3, r0
 800977c:	2b00      	cmp	r3, #0
 800977e:	da01      	bge.n	8009784 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 8009780:	23ff      	movs	r3, #255	@ 0xff
 8009782:	e004      	b.n	800978e <aci_gap_update_adv_data+0xda>
  return status;
 8009784:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009788:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800978c:	781b      	ldrb	r3, [r3, #0]
}
 800978e:	4618      	mov	r0, r3
 8009790:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8009794:	46bd      	mov	sp, r7
 8009796:	bd80      	pop	{r7, pc}

08009798 <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b088      	sub	sp, #32
 800979c:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800979e:	2300      	movs	r3, #0
 80097a0:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80097a2:	f107 0308 	add.w	r3, r7, #8
 80097a6:	2218      	movs	r2, #24
 80097a8:	2100      	movs	r1, #0
 80097aa:	4618      	mov	r0, r3
 80097ac:	f000 fe43 	bl	800a436 <Osal_MemSet>
  rq.ogf = 0x3f;
 80097b0:	233f      	movs	r3, #63	@ 0x3f
 80097b2:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 80097b4:	2392      	movs	r3, #146	@ 0x92
 80097b6:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80097b8:	1dfb      	adds	r3, r7, #7
 80097ba:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80097bc:	2301      	movs	r3, #1
 80097be:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80097c0:	f107 0308 	add.w	r3, r7, #8
 80097c4:	2100      	movs	r1, #0
 80097c6:	4618      	mov	r0, r3
 80097c8:	f001 f8be 	bl	800a948 <hci_send_req>
 80097cc:	4603      	mov	r3, r0
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	da01      	bge.n	80097d6 <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 80097d2:	23ff      	movs	r3, #255	@ 0xff
 80097d4:	e000      	b.n	80097d8 <aci_gap_configure_filter_accept_list+0x40>
  return status;
 80097d6:	79fb      	ldrb	r3, [r7, #7]
}
 80097d8:	4618      	mov	r0, r3
 80097da:	3720      	adds	r7, #32
 80097dc:	46bd      	mov	sp, r7
 80097de:	bd80      	pop	{r7, pc}

080097e0 <aci_gap_allow_rebond>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_allow_rebond( uint16_t Connection_Handle )
{
 80097e0:	b580      	push	{r7, lr}
 80097e2:	b0cc      	sub	sp, #304	@ 0x130
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	4602      	mov	r2, r0
 80097e8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80097ec:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80097f0:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_allow_rebond_cp0 *cp0 = (aci_gap_allow_rebond_cp0*)(cmd_buffer);
 80097f2:	f107 0310 	add.w	r3, r7, #16
 80097f6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80097fa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80097fe:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009802:	2200      	movs	r2, #0
 8009804:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009806:	2300      	movs	r3, #0
 8009808:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 800980c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009810:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009814:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8009818:	8812      	ldrh	r2, [r2, #0]
 800981a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800981c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009820:	3302      	adds	r3, #2
 8009822:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009826:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800982a:	2218      	movs	r2, #24
 800982c:	2100      	movs	r1, #0
 800982e:	4618      	mov	r0, r3
 8009830:	f000 fe01 	bl	800a436 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009834:	233f      	movs	r3, #63	@ 0x3f
 8009836:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x095;
 800983a:	2395      	movs	r3, #149	@ 0x95
 800983c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8009840:	f107 0310 	add.w	r3, r7, #16
 8009844:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8009848:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800984c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8009850:	f107 030f 	add.w	r3, r7, #15
 8009854:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8009858:	2301      	movs	r3, #1
 800985a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800985e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009862:	2100      	movs	r1, #0
 8009864:	4618      	mov	r0, r3
 8009866:	f001 f86f 	bl	800a948 <hci_send_req>
 800986a:	4603      	mov	r3, r0
 800986c:	2b00      	cmp	r3, #0
 800986e:	da01      	bge.n	8009874 <aci_gap_allow_rebond+0x94>
    return BLE_STATUS_TIMEOUT;
 8009870:	23ff      	movs	r3, #255	@ 0xff
 8009872:	e004      	b.n	800987e <aci_gap_allow_rebond+0x9e>
  return status;
 8009874:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009878:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800987c:	781b      	ldrb	r3, [r3, #0]
}
 800987e:	4618      	mov	r0, r3
 8009880:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8009884:	46bd      	mov	sp, r7
 8009886:	bd80      	pop	{r7, pc}

08009888 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 8009888:	b580      	push	{r7, lr}
 800988a:	b0cc      	sub	sp, #304	@ 0x130
 800988c:	af00      	add	r7, sp, #0
 800988e:	4602      	mov	r2, r0
 8009890:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009894:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8009898:	801a      	strh	r2, [r3, #0]
 800989a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800989e:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 80098a2:	460a      	mov	r2, r1
 80098a4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 80098a6:	f107 0310 	add.w	r3, r7, #16
 80098aa:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80098ae:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80098b2:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80098b6:	2200      	movs	r2, #0
 80098b8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80098ba:	2300      	movs	r3, #0
 80098bc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 80098c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80098c4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80098c8:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80098cc:	8812      	ldrh	r2, [r2, #0]
 80098ce:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80098d0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80098d4:	3302      	adds	r3, #2
 80098d6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 80098da:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80098de:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80098e2:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 80098e6:	7812      	ldrb	r2, [r2, #0]
 80098e8:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80098ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80098ee:	3301      	adds	r3, #1
 80098f0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80098f4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80098f8:	2218      	movs	r2, #24
 80098fa:	2100      	movs	r1, #0
 80098fc:	4618      	mov	r0, r3
 80098fe:	f000 fd9a 	bl	800a436 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009902:	233f      	movs	r3, #63	@ 0x3f
 8009904:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x0a5;
 8009908:	23a5      	movs	r3, #165	@ 0xa5
 800990a:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800990e:	f107 0310 	add.w	r3, r7, #16
 8009912:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8009916:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800991a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800991e:	f107 030f 	add.w	r3, r7, #15
 8009922:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8009926:	2301      	movs	r3, #1
 8009928:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800992c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009930:	2100      	movs	r1, #0
 8009932:	4618      	mov	r0, r3
 8009934:	f001 f808 	bl	800a948 <hci_send_req>
 8009938:	4603      	mov	r3, r0
 800993a:	2b00      	cmp	r3, #0
 800993c:	da01      	bge.n	8009942 <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 800993e:	23ff      	movs	r3, #255	@ 0xff
 8009940:	e004      	b.n	800994c <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 8009942:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009946:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800994a:	781b      	ldrb	r3, [r3, #0]
}
 800994c:	4618      	mov	r0, r3
 800994e:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8009952:	46bd      	mov	sp, r7
 8009954:	bd80      	pop	{r7, pc}

08009956 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 8009956:	b580      	push	{r7, lr}
 8009958:	b088      	sub	sp, #32
 800995a:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800995c:	2300      	movs	r3, #0
 800995e:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009960:	f107 0308 	add.w	r3, r7, #8
 8009964:	2218      	movs	r2, #24
 8009966:	2100      	movs	r1, #0
 8009968:	4618      	mov	r0, r3
 800996a:	f000 fd64 	bl	800a436 <Osal_MemSet>
  rq.ogf = 0x3f;
 800996e:	233f      	movs	r3, #63	@ 0x3f
 8009970:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8009972:	f240 1301 	movw	r3, #257	@ 0x101
 8009976:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8009978:	1dfb      	adds	r3, r7, #7
 800997a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800997c:	2301      	movs	r3, #1
 800997e:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009980:	f107 0308 	add.w	r3, r7, #8
 8009984:	2100      	movs	r1, #0
 8009986:	4618      	mov	r0, r3
 8009988:	f000 ffde 	bl	800a948 <hci_send_req>
 800998c:	4603      	mov	r3, r0
 800998e:	2b00      	cmp	r3, #0
 8009990:	da01      	bge.n	8009996 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8009992:	23ff      	movs	r3, #255	@ 0xff
 8009994:	e000      	b.n	8009998 <aci_gatt_init+0x42>
  return status;
 8009996:	79fb      	ldrb	r3, [r7, #7]
}
 8009998:	4618      	mov	r0, r3
 800999a:	3720      	adds	r7, #32
 800999c:	46bd      	mov	sp, r7
 800999e:	bd80      	pop	{r7, pc}

080099a0 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 80099a0:	b590      	push	{r4, r7, lr}
 80099a2:	b0cf      	sub	sp, #316	@ 0x13c
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	4604      	mov	r4, r0
 80099a8:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 80099ac:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 80099b0:	6001      	str	r1, [r0, #0]
 80099b2:	4610      	mov	r0, r2
 80099b4:	4619      	mov	r1, r3
 80099b6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80099ba:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 80099be:	4622      	mov	r2, r4
 80099c0:	701a      	strb	r2, [r3, #0]
 80099c2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80099c6:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 80099ca:	4602      	mov	r2, r0
 80099cc:	701a      	strb	r2, [r3, #0]
 80099ce:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80099d2:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 80099d6:	460a      	mov	r2, r1
 80099d8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 80099da:	f107 0310 	add.w	r3, r7, #16
 80099de:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 80099e2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80099e6:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 80099ea:	781b      	ldrb	r3, [r3, #0]
 80099ec:	2b01      	cmp	r3, #1
 80099ee:	d00a      	beq.n	8009a06 <aci_gatt_add_service+0x66>
 80099f0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80099f4:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 80099f8:	781b      	ldrb	r3, [r3, #0]
 80099fa:	2b02      	cmp	r3, #2
 80099fc:	d101      	bne.n	8009a02 <aci_gatt_add_service+0x62>
 80099fe:	2311      	movs	r3, #17
 8009a00:	e002      	b.n	8009a08 <aci_gatt_add_service+0x68>
 8009a02:	2301      	movs	r3, #1
 8009a04:	e000      	b.n	8009a08 <aci_gatt_add_service+0x68>
 8009a06:	2303      	movs	r3, #3
 8009a08:	f107 0210 	add.w	r2, r7, #16
 8009a0c:	4413      	add	r3, r2
 8009a0e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8009a12:	f107 030c 	add.w	r3, r7, #12
 8009a16:	2203      	movs	r2, #3
 8009a18:	2100      	movs	r1, #0
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	f000 fd0b 	bl	800a436 <Osal_MemSet>
  int index_input = 0;
 8009a20:	2300      	movs	r3, #0
 8009a22:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 8009a26:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8009a2a:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8009a2e:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 8009a32:	7812      	ldrb	r2, [r2, #0]
 8009a34:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009a36:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009a3a:	3301      	adds	r3, #1
 8009a3c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 8009a40:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009a44:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8009a48:	781b      	ldrb	r3, [r3, #0]
 8009a4a:	2b01      	cmp	r3, #1
 8009a4c:	d002      	beq.n	8009a54 <aci_gatt_add_service+0xb4>
 8009a4e:	2b02      	cmp	r3, #2
 8009a50:	d004      	beq.n	8009a5c <aci_gatt_add_service+0xbc>
 8009a52:	e007      	b.n	8009a64 <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 8009a54:	2302      	movs	r3, #2
 8009a56:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 8009a5a:	e005      	b.n	8009a68 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 8009a5c:	2310      	movs	r3, #16
 8009a5e:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 8009a62:	e001      	b.n	8009a68 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 8009a64:	2397      	movs	r3, #151	@ 0x97
 8009a66:	e06c      	b.n	8009b42 <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 8009a68:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8009a6c:	1c58      	adds	r0, r3, #1
 8009a6e:	f897 2137 	ldrb.w	r2, [r7, #311]	@ 0x137
 8009a72:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009a76:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8009a7a:	6819      	ldr	r1, [r3, #0]
 8009a7c:	f000 fccb 	bl	800a416 <Osal_MemCpy>
    index_input += size;
 8009a80:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 8009a84:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8009a88:	4413      	add	r3, r2
 8009a8a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Type = Service_Type;
 8009a8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009a92:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8009a96:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8009a9a:	7812      	ldrb	r2, [r2, #0]
 8009a9c:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8009a9e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009aa2:	3301      	adds	r3, #1
 8009aa4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 8009aa8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009aac:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8009ab0:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 8009ab4:	7812      	ldrb	r2, [r2, #0]
 8009ab6:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8009ab8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009abc:	3301      	adds	r3, #1
 8009abe:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009ac2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009ac6:	2218      	movs	r2, #24
 8009ac8:	2100      	movs	r1, #0
 8009aca:	4618      	mov	r0, r3
 8009acc:	f000 fcb3 	bl	800a436 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009ad0:	233f      	movs	r3, #63	@ 0x3f
 8009ad2:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x102;
 8009ad6:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8009ada:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8009ade:	f107 0310 	add.w	r3, r7, #16
 8009ae2:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8009ae6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009aea:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 8009aee:	f107 030c 	add.w	r3, r7, #12
 8009af2:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 8009af6:	2303      	movs	r3, #3
 8009af8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009afc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009b00:	2100      	movs	r1, #0
 8009b02:	4618      	mov	r0, r3
 8009b04:	f000 ff20 	bl	800a948 <hci_send_req>
 8009b08:	4603      	mov	r3, r0
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	da01      	bge.n	8009b12 <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 8009b0e:	23ff      	movs	r3, #255	@ 0xff
 8009b10:	e017      	b.n	8009b42 <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 8009b12:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009b16:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8009b1a:	781b      	ldrb	r3, [r3, #0]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d005      	beq.n	8009b2c <aci_gatt_add_service+0x18c>
    return resp.Status;
 8009b20:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009b24:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8009b28:	781b      	ldrb	r3, [r3, #0]
 8009b2a:	e00a      	b.n	8009b42 <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 8009b2c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009b30:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8009b34:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009b38:	b29a      	uxth	r2, r3
 8009b3a:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8009b3e:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8009b40:	2300      	movs	r3, #0
}
 8009b42:	4618      	mov	r0, r3
 8009b44:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	bd90      	pop	{r4, r7, pc}

08009b4c <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 8009b4c:	b590      	push	{r4, r7, lr}
 8009b4e:	b0d1      	sub	sp, #324	@ 0x144
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	4604      	mov	r4, r0
 8009b54:	4608      	mov	r0, r1
 8009b56:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 8009b5a:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 8009b5e:	600a      	str	r2, [r1, #0]
 8009b60:	4619      	mov	r1, r3
 8009b62:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8009b66:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8009b6a:	4622      	mov	r2, r4
 8009b6c:	801a      	strh	r2, [r3, #0]
 8009b6e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8009b72:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8009b76:	4602      	mov	r2, r0
 8009b78:	701a      	strb	r2, [r3, #0]
 8009b7a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8009b7e:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 8009b82:	460a      	mov	r2, r1
 8009b84:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 8009b86:	f107 0318 	add.w	r3, r7, #24
 8009b8a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8009b8e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8009b92:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8009b96:	781b      	ldrb	r3, [r3, #0]
 8009b98:	2b01      	cmp	r3, #1
 8009b9a:	d00a      	beq.n	8009bb2 <aci_gatt_add_char+0x66>
 8009b9c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8009ba0:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8009ba4:	781b      	ldrb	r3, [r3, #0]
 8009ba6:	2b02      	cmp	r3, #2
 8009ba8:	d101      	bne.n	8009bae <aci_gatt_add_char+0x62>
 8009baa:	2313      	movs	r3, #19
 8009bac:	e002      	b.n	8009bb4 <aci_gatt_add_char+0x68>
 8009bae:	2303      	movs	r3, #3
 8009bb0:	e000      	b.n	8009bb4 <aci_gatt_add_char+0x68>
 8009bb2:	2305      	movs	r3, #5
 8009bb4:	f107 0218 	add.w	r2, r7, #24
 8009bb8:	4413      	add	r3, r2
 8009bba:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8009bbe:	f107 0314 	add.w	r3, r7, #20
 8009bc2:	2203      	movs	r2, #3
 8009bc4:	2100      	movs	r1, #0
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	f000 fc35 	bl	800a436 <Osal_MemSet>
  int index_input = 0;
 8009bcc:	2300      	movs	r3, #0
 8009bce:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Service_Handle = Service_Handle;
 8009bd2:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8009bd6:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8009bda:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8009bde:	8812      	ldrh	r2, [r2, #0]
 8009be0:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009be2:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8009be6:	3302      	adds	r3, #2
 8009be8:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 8009bec:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8009bf0:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8009bf4:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 8009bf8:	7812      	ldrb	r2, [r2, #0]
 8009bfa:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8009bfc:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8009c00:	3301      	adds	r3, #1
 8009c02:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 8009c06:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8009c0a:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8009c0e:	781b      	ldrb	r3, [r3, #0]
 8009c10:	2b01      	cmp	r3, #1
 8009c12:	d002      	beq.n	8009c1a <aci_gatt_add_char+0xce>
 8009c14:	2b02      	cmp	r3, #2
 8009c16:	d004      	beq.n	8009c22 <aci_gatt_add_char+0xd6>
 8009c18:	e007      	b.n	8009c2a <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 8009c1a:	2302      	movs	r3, #2
 8009c1c:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 8009c20:	e005      	b.n	8009c2e <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 8009c22:	2310      	movs	r3, #16
 8009c24:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 8009c28:	e001      	b.n	8009c2e <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 8009c2a:	2397      	movs	r3, #151	@ 0x97
 8009c2c:	e091      	b.n	8009d52 <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 8009c2e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8009c32:	1cd8      	adds	r0, r3, #3
 8009c34:	f897 213f 	ldrb.w	r2, [r7, #319]	@ 0x13f
 8009c38:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8009c3c:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8009c40:	6819      	ldr	r1, [r3, #0]
 8009c42:	f000 fbe8 	bl	800a416 <Osal_MemCpy>
    index_input += size;
 8009c46:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 8009c4a:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8009c4e:	4413      	add	r3, r2
 8009c50:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 8009c54:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8009c58:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8009c5c:	f5a2 729d 	sub.w	r2, r2, #314	@ 0x13a
 8009c60:	8812      	ldrh	r2, [r2, #0]
 8009c62:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8009c64:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8009c68:	3302      	adds	r3, #2
 8009c6a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Properties = Char_Properties;
 8009c6e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8009c72:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 8009c76:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8009c78:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8009c7c:	3301      	adds	r3, #1
 8009c7e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 8009c82:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8009c86:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8009c8a:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8009c8c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8009c90:	3301      	adds	r3, #1
 8009c92:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 8009c96:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8009c9a:	f897 2158 	ldrb.w	r2, [r7, #344]	@ 0x158
 8009c9e:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8009ca0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8009ca4:	3301      	adds	r3, #1
 8009ca6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 8009caa:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8009cae:	f897 215c 	ldrb.w	r2, [r7, #348]	@ 0x15c
 8009cb2:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 8009cb4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8009cb8:	3301      	adds	r3, #1
 8009cba:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Is_Variable = Is_Variable;
 8009cbe:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8009cc2:	f897 2160 	ldrb.w	r2, [r7, #352]	@ 0x160
 8009cc6:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8009cc8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8009ccc:	3301      	adds	r3, #1
 8009cce:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009cd2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8009cd6:	2218      	movs	r2, #24
 8009cd8:	2100      	movs	r1, #0
 8009cda:	4618      	mov	r0, r3
 8009cdc:	f000 fbab 	bl	800a436 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009ce0:	233f      	movs	r3, #63	@ 0x3f
 8009ce2:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x104;
 8009ce6:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8009cea:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.cparam = cmd_buffer;
 8009cee:	f107 0318 	add.w	r3, r7, #24
 8009cf2:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 8009cf6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8009cfa:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &resp;
 8009cfe:	f107 0314 	add.w	r3, r7, #20
 8009d02:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = sizeof(resp);
 8009d06:	2303      	movs	r3, #3
 8009d08:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009d0c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8009d10:	2100      	movs	r1, #0
 8009d12:	4618      	mov	r0, r3
 8009d14:	f000 fe18 	bl	800a948 <hci_send_req>
 8009d18:	4603      	mov	r3, r0
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	da01      	bge.n	8009d22 <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 8009d1e:	23ff      	movs	r3, #255	@ 0xff
 8009d20:	e017      	b.n	8009d52 <aci_gatt_add_char+0x206>
  if ( resp.Status )
 8009d22:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8009d26:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8009d2a:	781b      	ldrb	r3, [r3, #0]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d005      	beq.n	8009d3c <aci_gatt_add_char+0x1f0>
    return resp.Status;
 8009d30:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8009d34:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8009d38:	781b      	ldrb	r3, [r3, #0]
 8009d3a:	e00a      	b.n	8009d52 <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 8009d3c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8009d40:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8009d44:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009d48:	b29a      	uxth	r2, r3
 8009d4a:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8009d4e:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8009d50:	2300      	movs	r3, #0
}
 8009d52:	4618      	mov	r0, r3
 8009d54:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 8009d58:	46bd      	mov	sp, r7
 8009d5a:	bd90      	pop	{r4, r7, pc}

08009d5c <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8009d5c:	b5b0      	push	{r4, r5, r7, lr}
 8009d5e:	b0cc      	sub	sp, #304	@ 0x130
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	4605      	mov	r5, r0
 8009d64:	460c      	mov	r4, r1
 8009d66:	4610      	mov	r0, r2
 8009d68:	4619      	mov	r1, r3
 8009d6a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009d6e:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8009d72:	462a      	mov	r2, r5
 8009d74:	801a      	strh	r2, [r3, #0]
 8009d76:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009d7a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8009d7e:	4622      	mov	r2, r4
 8009d80:	801a      	strh	r2, [r3, #0]
 8009d82:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009d86:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 8009d8a:	4602      	mov	r2, r0
 8009d8c:	701a      	strb	r2, [r3, #0]
 8009d8e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009d92:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8009d96:	460a      	mov	r2, r1
 8009d98:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8009d9a:	f107 0310 	add.w	r3, r7, #16
 8009d9e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8009da2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009da6:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009daa:	2200      	movs	r2, #0
 8009dac:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009dae:	2300      	movs	r3, #0
 8009db0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_Handle = Service_Handle;
 8009db4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009db8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009dbc:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8009dc0:	8812      	ldrh	r2, [r2, #0]
 8009dc2:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009dc4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009dc8:	3302      	adds	r3, #2
 8009dca:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Handle = Char_Handle;
 8009dce:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009dd2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009dd6:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 8009dda:	8812      	ldrh	r2, [r2, #0]
 8009ddc:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8009dde:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009de2:	3302      	adds	r3, #2
 8009de4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Val_Offset = Val_Offset;
 8009de8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009dec:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009df0:	f2a2 122d 	subw	r2, r2, #301	@ 0x12d
 8009df4:	7812      	ldrb	r2, [r2, #0]
 8009df6:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8009df8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009dfc:	3301      	adds	r3, #1
 8009dfe:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 8009e02:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009e06:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009e0a:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 8009e0e:	7812      	ldrb	r2, [r2, #0]
 8009e10:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8009e12:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009e16:	3301      	adds	r3, #1
 8009e18:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 8009e1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009e20:	1d98      	adds	r0, r3, #6
 8009e22:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009e26:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8009e2a:	781b      	ldrb	r3, [r3, #0]
 8009e2c:	461a      	mov	r2, r3
 8009e2e:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8009e32:	f000 faf0 	bl	800a416 <Osal_MemCpy>
  index_input += Char_Value_Length;
 8009e36:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009e3a:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8009e3e:	781b      	ldrb	r3, [r3, #0]
 8009e40:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8009e44:	4413      	add	r3, r2
 8009e46:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009e4a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009e4e:	2218      	movs	r2, #24
 8009e50:	2100      	movs	r1, #0
 8009e52:	4618      	mov	r0, r3
 8009e54:	f000 faef 	bl	800a436 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009e58:	233f      	movs	r3, #63	@ 0x3f
 8009e5a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x106;
 8009e5e:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8009e62:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8009e66:	f107 0310 	add.w	r3, r7, #16
 8009e6a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8009e6e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009e72:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8009e76:	f107 030f 	add.w	r3, r7, #15
 8009e7a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8009e7e:	2301      	movs	r3, #1
 8009e80:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009e84:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009e88:	2100      	movs	r1, #0
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	f000 fd5c 	bl	800a948 <hci_send_req>
 8009e90:	4603      	mov	r3, r0
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	da01      	bge.n	8009e9a <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 8009e96:	23ff      	movs	r3, #255	@ 0xff
 8009e98:	e004      	b.n	8009ea4 <aci_gatt_update_char_value+0x148>
  return status;
 8009e9a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009e9e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009ea2:	781b      	ldrb	r3, [r3, #0]
}
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	bdb0      	pop	{r4, r5, r7, pc}

08009eae <aci_gatt_confirm_indication>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_confirm_indication( uint16_t Connection_Handle )
{
 8009eae:	b580      	push	{r7, lr}
 8009eb0:	b0cc      	sub	sp, #304	@ 0x130
 8009eb2:	af00      	add	r7, sp, #0
 8009eb4:	4602      	mov	r2, r0
 8009eb6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009eba:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8009ebe:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_confirm_indication_cp0 *cp0 = (aci_gatt_confirm_indication_cp0*)(cmd_buffer);
 8009ec0:	f107 0310 	add.w	r3, r7, #16
 8009ec4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8009ec8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009ecc:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009ed4:	2300      	movs	r3, #0
 8009ed6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8009eda:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009ede:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009ee2:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8009ee6:	8812      	ldrh	r2, [r2, #0]
 8009ee8:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009eea:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009eee:	3302      	adds	r3, #2
 8009ef0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009ef4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009ef8:	2218      	movs	r2, #24
 8009efa:	2100      	movs	r1, #0
 8009efc:	4618      	mov	r0, r3
 8009efe:	f000 fa9a 	bl	800a436 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009f02:	233f      	movs	r3, #63	@ 0x3f
 8009f04:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x125;
 8009f08:	f240 1325 	movw	r3, #293	@ 0x125
 8009f0c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8009f10:	f107 0310 	add.w	r3, r7, #16
 8009f14:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8009f18:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009f1c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8009f20:	f107 030f 	add.w	r3, r7, #15
 8009f24:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8009f28:	2301      	movs	r3, #1
 8009f2a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009f2e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009f32:	2100      	movs	r1, #0
 8009f34:	4618      	mov	r0, r3
 8009f36:	f000 fd07 	bl	800a948 <hci_send_req>
 8009f3a:	4603      	mov	r3, r0
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	da01      	bge.n	8009f44 <aci_gatt_confirm_indication+0x96>
    return BLE_STATUS_TIMEOUT;
 8009f40:	23ff      	movs	r3, #255	@ 0xff
 8009f42:	e004      	b.n	8009f4e <aci_gatt_confirm_indication+0xa0>
  return status;
 8009f44:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009f48:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009f4c:	781b      	ldrb	r3, [r3, #0]
}
 8009f4e:	4618      	mov	r0, r3
 8009f50:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8009f54:	46bd      	mov	sp, r7
 8009f56:	bd80      	pop	{r7, pc}

08009f58 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 8009f58:	b580      	push	{r7, lr}
 8009f5a:	b0cc      	sub	sp, #304	@ 0x130
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009f62:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8009f66:	601a      	str	r2, [r3, #0]
 8009f68:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009f6c:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8009f70:	4602      	mov	r2, r0
 8009f72:	701a      	strb	r2, [r3, #0]
 8009f74:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009f78:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8009f7c:	460a      	mov	r2, r1
 8009f7e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8009f80:	f107 0310 	add.w	r3, r7, #16
 8009f84:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8009f88:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009f8c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009f90:	2200      	movs	r2, #0
 8009f92:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009f94:	2300      	movs	r3, #0
 8009f96:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Offset = Offset;
 8009f9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009f9e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009fa2:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8009fa6:	7812      	ldrb	r2, [r2, #0]
 8009fa8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009faa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009fae:	3301      	adds	r3, #1
 8009fb0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Length = Length;
 8009fb4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009fb8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009fbc:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8009fc0:	7812      	ldrb	r2, [r2, #0]
 8009fc2:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8009fc4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009fc8:	3301      	adds	r3, #1
 8009fca:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 8009fce:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009fd2:	1c98      	adds	r0, r3, #2
 8009fd4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009fd8:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8009fdc:	781a      	ldrb	r2, [r3, #0]
 8009fde:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009fe2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8009fe6:	6819      	ldr	r1, [r3, #0]
 8009fe8:	f000 fa15 	bl	800a416 <Osal_MemCpy>
  index_input += Length;
 8009fec:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009ff0:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8009ff4:	781b      	ldrb	r3, [r3, #0]
 8009ff6:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8009ffa:	4413      	add	r3, r2
 8009ffc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a000:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a004:	2218      	movs	r2, #24
 800a006:	2100      	movs	r1, #0
 800a008:	4618      	mov	r0, r3
 800a00a:	f000 fa14 	bl	800a436 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a00e:	233f      	movs	r3, #63	@ 0x3f
 800a010:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00c;
 800a014:	230c      	movs	r3, #12
 800a016:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800a01a:	f107 0310 	add.w	r3, r7, #16
 800a01e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800a022:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a026:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800a02a:	f107 030f 	add.w	r3, r7, #15
 800a02e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800a032:	2301      	movs	r3, #1
 800a034:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a038:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a03c:	2100      	movs	r1, #0
 800a03e:	4618      	mov	r0, r3
 800a040:	f000 fc82 	bl	800a948 <hci_send_req>
 800a044:	4603      	mov	r3, r0
 800a046:	2b00      	cmp	r3, #0
 800a048:	da01      	bge.n	800a04e <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 800a04a:	23ff      	movs	r3, #255	@ 0xff
 800a04c:	e004      	b.n	800a058 <aci_hal_write_config_data+0x100>
  return status;
 800a04e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a052:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a056:	781b      	ldrb	r3, [r3, #0]
}
 800a058:	4618      	mov	r0, r3
 800a05a:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800a05e:	46bd      	mov	sp, r7
 800a060:	bd80      	pop	{r7, pc}

0800a062 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 800a062:	b580      	push	{r7, lr}
 800a064:	b0cc      	sub	sp, #304	@ 0x130
 800a066:	af00      	add	r7, sp, #0
 800a068:	4602      	mov	r2, r0
 800a06a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a06e:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800a072:	701a      	strb	r2, [r3, #0]
 800a074:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a078:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800a07c:	460a      	mov	r2, r1
 800a07e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 800a080:	f107 0310 	add.w	r3, r7, #16
 800a084:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800a088:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a08c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a090:	2200      	movs	r2, #0
 800a092:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a094:	2300      	movs	r3, #0
 800a096:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->En_High_Power = En_High_Power;
 800a09a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a09e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a0a2:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800a0a6:	7812      	ldrb	r2, [r2, #0]
 800a0a8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800a0aa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a0ae:	3301      	adds	r3, #1
 800a0b0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->PA_Level = PA_Level;
 800a0b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a0b8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a0bc:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800a0c0:	7812      	ldrb	r2, [r2, #0]
 800a0c2:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800a0c4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a0c8:	3301      	adds	r3, #1
 800a0ca:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a0ce:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a0d2:	2218      	movs	r2, #24
 800a0d4:	2100      	movs	r1, #0
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	f000 f9ad 	bl	800a436 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a0dc:	233f      	movs	r3, #63	@ 0x3f
 800a0de:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00f;
 800a0e2:	230f      	movs	r3, #15
 800a0e4:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800a0e8:	f107 0310 	add.w	r3, r7, #16
 800a0ec:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800a0f0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a0f4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800a0f8:	f107 030f 	add.w	r3, r7, #15
 800a0fc:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800a100:	2301      	movs	r3, #1
 800a102:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a106:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a10a:	2100      	movs	r1, #0
 800a10c:	4618      	mov	r0, r3
 800a10e:	f000 fc1b 	bl	800a948 <hci_send_req>
 800a112:	4603      	mov	r3, r0
 800a114:	2b00      	cmp	r3, #0
 800a116:	da01      	bge.n	800a11c <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 800a118:	23ff      	movs	r3, #255	@ 0xff
 800a11a:	e004      	b.n	800a126 <aci_hal_set_tx_power_level+0xc4>
  return status;
 800a11c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a120:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a124:	781b      	ldrb	r3, [r3, #0]
}
 800a126:	4618      	mov	r0, r3
 800a128:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800a12c:	46bd      	mov	sp, r7
 800a12e:	bd80      	pop	{r7, pc}

0800a130 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 800a130:	b580      	push	{r7, lr}
 800a132:	b0cc      	sub	sp, #304	@ 0x130
 800a134:	af00      	add	r7, sp, #0
 800a136:	4602      	mov	r2, r0
 800a138:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a13c:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800a140:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 800a142:	f107 0310 	add.w	r3, r7, #16
 800a146:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800a14a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a14e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a152:	2200      	movs	r2, #0
 800a154:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a156:	2300      	movs	r3, #0
 800a158:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 800a15c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a160:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a164:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800a168:	8812      	ldrh	r2, [r2, #0]
 800a16a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800a16c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a170:	3302      	adds	r3, #2
 800a172:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a176:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a17a:	2218      	movs	r2, #24
 800a17c:	2100      	movs	r1, #0
 800a17e:	4618      	mov	r0, r3
 800a180:	f000 f959 	bl	800a436 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a184:	233f      	movs	r3, #63	@ 0x3f
 800a186:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x018;
 800a18a:	2318      	movs	r3, #24
 800a18c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800a190:	f107 0310 	add.w	r3, r7, #16
 800a194:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800a198:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a19c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800a1a0:	f107 030f 	add.w	r3, r7, #15
 800a1a4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800a1a8:	2301      	movs	r3, #1
 800a1aa:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a1ae:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a1b2:	2100      	movs	r1, #0
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	f000 fbc7 	bl	800a948 <hci_send_req>
 800a1ba:	4603      	mov	r3, r0
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	da01      	bge.n	800a1c4 <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 800a1c0:	23ff      	movs	r3, #255	@ 0xff
 800a1c2:	e004      	b.n	800a1ce <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 800a1c4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a1c8:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a1cc:	781b      	ldrb	r3, [r3, #0]
}
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	bd80      	pop	{r7, pc}

0800a1d8 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b088      	sub	sp, #32
 800a1dc:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800a1de:	2300      	movs	r3, #0
 800a1e0:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a1e2:	f107 0308 	add.w	r3, r7, #8
 800a1e6:	2218      	movs	r2, #24
 800a1e8:	2100      	movs	r1, #0
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	f000 f923 	bl	800a436 <Osal_MemSet>
  rq.ogf = 0x03;
 800a1f0:	2303      	movs	r3, #3
 800a1f2:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 800a1f4:	2303      	movs	r3, #3
 800a1f6:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800a1f8:	1dfb      	adds	r3, r7, #7
 800a1fa:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800a1fc:	2301      	movs	r3, #1
 800a1fe:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a200:	f107 0308 	add.w	r3, r7, #8
 800a204:	2100      	movs	r1, #0
 800a206:	4618      	mov	r0, r3
 800a208:	f000 fb9e 	bl	800a948 <hci_send_req>
 800a20c:	4603      	mov	r3, r0
 800a20e:	2b00      	cmp	r3, #0
 800a210:	da01      	bge.n	800a216 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 800a212:	23ff      	movs	r3, #255	@ 0xff
 800a214:	e000      	b.n	800a218 <hci_reset+0x40>
  return status;
 800a216:	79fb      	ldrb	r3, [r7, #7]
}
 800a218:	4618      	mov	r0, r3
 800a21a:	3720      	adds	r7, #32
 800a21c:	46bd      	mov	sp, r7
 800a21e:	bd80      	pop	{r7, pc}

0800a220 <hci_le_read_phy>:
}

tBleStatus hci_le_read_phy( uint16_t Connection_Handle,
                            uint8_t* TX_PHY,
                            uint8_t* RX_PHY )
{
 800a220:	b580      	push	{r7, lr}
 800a222:	b0ce      	sub	sp, #312	@ 0x138
 800a224:	af00      	add	r7, sp, #0
 800a226:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800a22a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800a22e:	6019      	str	r1, [r3, #0]
 800a230:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800a234:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800a238:	601a      	str	r2, [r3, #0]
 800a23a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800a23e:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800a242:	4602      	mov	r2, r0
 800a244:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_read_phy_cp0 *cp0 = (hci_le_read_phy_cp0*)(cmd_buffer);
 800a246:	f107 0318 	add.w	r3, r7, #24
 800a24a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  hci_le_read_phy_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800a24e:	f107 0310 	add.w	r3, r7, #16
 800a252:	2205      	movs	r2, #5
 800a254:	2100      	movs	r1, #0
 800a256:	4618      	mov	r0, r3
 800a258:	f000 f8ed 	bl	800a436 <Osal_MemSet>
  int index_input = 0;
 800a25c:	2300      	movs	r3, #0
 800a25e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Connection_Handle = Connection_Handle;
 800a262:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800a266:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800a26a:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800a26e:	8812      	ldrh	r2, [r2, #0]
 800a270:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800a272:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800a276:	3302      	adds	r3, #2
 800a278:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a27c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800a280:	2218      	movs	r2, #24
 800a282:	2100      	movs	r1, #0
 800a284:	4618      	mov	r0, r3
 800a286:	f000 f8d6 	bl	800a436 <Osal_MemSet>
  rq.ogf = 0x08;
 800a28a:	2308      	movs	r3, #8
 800a28c:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x030;
 800a290:	2330      	movs	r3, #48	@ 0x30
 800a292:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.cparam = cmd_buffer;
 800a296:	f107 0318 	add.w	r3, r7, #24
 800a29a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 800a29e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800a2a2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &resp;
 800a2a6:	f107 0310 	add.w	r3, r7, #16
 800a2aa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = sizeof(resp);
 800a2ae:	2305      	movs	r3, #5
 800a2b0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a2b4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800a2b8:	2100      	movs	r1, #0
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	f000 fb44 	bl	800a948 <hci_send_req>
 800a2c0:	4603      	mov	r3, r0
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	da01      	bge.n	800a2ca <hci_le_read_phy+0xaa>
    return BLE_STATUS_TIMEOUT;
 800a2c6:	23ff      	movs	r3, #255	@ 0xff
 800a2c8:	e023      	b.n	800a312 <hci_le_read_phy+0xf2>
  if ( resp.Status )
 800a2ca:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800a2ce:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800a2d2:	781b      	ldrb	r3, [r3, #0]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d005      	beq.n	800a2e4 <hci_le_read_phy+0xc4>
    return resp.Status;
 800a2d8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800a2dc:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800a2e0:	781b      	ldrb	r3, [r3, #0]
 800a2e2:	e016      	b.n	800a312 <hci_le_read_phy+0xf2>
  *TX_PHY = resp.TX_PHY;
 800a2e4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800a2e8:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800a2ec:	78da      	ldrb	r2, [r3, #3]
 800a2ee:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800a2f2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	701a      	strb	r2, [r3, #0]
  *RX_PHY = resp.RX_PHY;
 800a2fa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800a2fe:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800a302:	791a      	ldrb	r2, [r3, #4]
 800a304:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800a308:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	701a      	strb	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800a310:	2300      	movs	r3, #0
}
 800a312:	4618      	mov	r0, r3
 800a314:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 800a318:	46bd      	mov	sp, r7
 800a31a:	bd80      	pop	{r7, pc}

0800a31c <hci_le_set_default_phy>:

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 800a31c:	b590      	push	{r4, r7, lr}
 800a31e:	b0cd      	sub	sp, #308	@ 0x134
 800a320:	af00      	add	r7, sp, #0
 800a322:	4604      	mov	r4, r0
 800a324:	4608      	mov	r0, r1
 800a326:	4611      	mov	r1, r2
 800a328:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a32c:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800a330:	4622      	mov	r2, r4
 800a332:	701a      	strb	r2, [r3, #0]
 800a334:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a338:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800a33c:	4602      	mov	r2, r0
 800a33e:	701a      	strb	r2, [r3, #0]
 800a340:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a344:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800a348:	460a      	mov	r2, r1
 800a34a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 800a34c:	f107 0310 	add.w	r3, r7, #16
 800a350:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800a354:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a358:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a35c:	2200      	movs	r2, #0
 800a35e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a360:	2300      	movs	r3, #0
 800a362:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 800a366:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a36a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a36e:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800a372:	7812      	ldrb	r2, [r2, #0]
 800a374:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800a376:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a37a:	3301      	adds	r3, #1
 800a37c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->TX_PHYS = TX_PHYS;
 800a380:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a384:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a388:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800a38c:	7812      	ldrb	r2, [r2, #0]
 800a38e:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800a390:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a394:	3301      	adds	r3, #1
 800a396:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->RX_PHYS = RX_PHYS;
 800a39a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a39e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a3a2:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800a3a6:	7812      	ldrb	r2, [r2, #0]
 800a3a8:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800a3aa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a3ae:	3301      	adds	r3, #1
 800a3b0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a3b4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a3b8:	2218      	movs	r2, #24
 800a3ba:	2100      	movs	r1, #0
 800a3bc:	4618      	mov	r0, r3
 800a3be:	f000 f83a 	bl	800a436 <Osal_MemSet>
  rq.ogf = 0x08;
 800a3c2:	2308      	movs	r3, #8
 800a3c4:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x031;
 800a3c8:	2331      	movs	r3, #49	@ 0x31
 800a3ca:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800a3ce:	f107 0310 	add.w	r3, r7, #16
 800a3d2:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800a3d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a3da:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800a3de:	f107 030f 	add.w	r3, r7, #15
 800a3e2:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800a3e6:	2301      	movs	r3, #1
 800a3e8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a3ec:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a3f0:	2100      	movs	r1, #0
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	f000 faa8 	bl	800a948 <hci_send_req>
 800a3f8:	4603      	mov	r3, r0
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	da01      	bge.n	800a402 <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 800a3fe:	23ff      	movs	r3, #255	@ 0xff
 800a400:	e004      	b.n	800a40c <hci_le_set_default_phy+0xf0>
  return status;
 800a402:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a406:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a40a:	781b      	ldrb	r3, [r3, #0]
}
 800a40c:	4618      	mov	r0, r3
 800a40e:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 800a412:	46bd      	mov	sp, r7
 800a414:	bd90      	pop	{r4, r7, pc}

0800a416 <Osal_MemCpy>:
 * Osal_MemCpy
 *
 */

void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 800a416:	b580      	push	{r7, lr}
 800a418:	b084      	sub	sp, #16
 800a41a:	af00      	add	r7, sp, #0
 800a41c:	60f8      	str	r0, [r7, #12]
 800a41e:	60b9      	str	r1, [r7, #8]
 800a420:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size );
 800a422:	687a      	ldr	r2, [r7, #4]
 800a424:	68b9      	ldr	r1, [r7, #8]
 800a426:	68f8      	ldr	r0, [r7, #12]
 800a428:	f003 ffaf 	bl	800e38a <memcpy>
 800a42c:	4603      	mov	r3, r0
}
 800a42e:	4618      	mov	r0, r3
 800a430:	3710      	adds	r7, #16
 800a432:	46bd      	mov	sp, r7
 800a434:	bd80      	pop	{r7, pc}

0800a436 <Osal_MemSet>:
 * Osal_MemSet
 *
 */

void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 800a436:	b580      	push	{r7, lr}
 800a438:	b084      	sub	sp, #16
 800a43a:	af00      	add	r7, sp, #0
 800a43c:	60f8      	str	r0, [r7, #12]
 800a43e:	60b9      	str	r1, [r7, #8]
 800a440:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 800a442:	687a      	ldr	r2, [r7, #4]
 800a444:	68b9      	ldr	r1, [r7, #8]
 800a446:	68f8      	ldr	r0, [r7, #12]
 800a448:	f003 ff2a 	bl	800e2a0 <memset>
 800a44c:	4603      	mov	r3, r0
}
 800a44e:	4618      	mov	r0, r3
 800a450:	3710      	adds	r7, #16
 800a452:	46bd      	mov	sp, r7
 800a454:	bd80      	pop	{r7, pc}

0800a456 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 800a456:	b480      	push	{r7}
 800a458:	af00      	add	r7, sp, #0
  return;
 800a45a:	bf00      	nop
}
 800a45c:	46bd      	mov	sp, r7
 800a45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a462:	4770      	bx	lr

0800a464 <BLS_Init>:

__WEAK void BLS_Init( void )
{
 800a464:	b480      	push	{r7}
 800a466:	af00      	add	r7, sp, #0
  return;
 800a468:	bf00      	nop
}
 800a46a:	46bd      	mov	sp, r7
 800a46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a470:	4770      	bx	lr

0800a472 <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 800a472:	b480      	push	{r7}
 800a474:	af00      	add	r7, sp, #0
  return;
 800a476:	bf00      	nop
}
 800a478:	46bd      	mov	sp, r7
 800a47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47e:	4770      	bx	lr

0800a480 <DIS_Init>:
__WEAK void DIS_Init( void )
{
 800a480:	b480      	push	{r7}
 800a482:	af00      	add	r7, sp, #0
  return;
 800a484:	bf00      	nop
}
 800a486:	46bd      	mov	sp, r7
 800a488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48c:	4770      	bx	lr

0800a48e <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 800a48e:	b480      	push	{r7}
 800a490:	af00      	add	r7, sp, #0
  return;
 800a492:	bf00      	nop
}
 800a494:	46bd      	mov	sp, r7
 800a496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49a:	4770      	bx	lr

0800a49c <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 800a49c:	b480      	push	{r7}
 800a49e:	af00      	add	r7, sp, #0
  return;
 800a4a0:	bf00      	nop
}
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a8:	4770      	bx	lr

0800a4aa <HRS_Init>:
__WEAK void HRS_Init( void )
{
 800a4aa:	b480      	push	{r7}
 800a4ac:	af00      	add	r7, sp, #0
  return;
 800a4ae:	bf00      	nop
}
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b6:	4770      	bx	lr

0800a4b8 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 800a4b8:	b480      	push	{r7}
 800a4ba:	af00      	add	r7, sp, #0
  return;
 800a4bc:	bf00      	nop
}
 800a4be:	46bd      	mov	sp, r7
 800a4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c4:	4770      	bx	lr

0800a4c6 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 800a4c6:	b480      	push	{r7}
 800a4c8:	af00      	add	r7, sp, #0
  return;
 800a4ca:	bf00      	nop
}
 800a4cc:	46bd      	mov	sp, r7
 800a4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d2:	4770      	bx	lr

0800a4d4 <LLS_Init>:
__WEAK void LLS_Init( void )
{
 800a4d4:	b480      	push	{r7}
 800a4d6:	af00      	add	r7, sp, #0
  return;
 800a4d8:	bf00      	nop
}
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e0:	4770      	bx	lr

0800a4e2 <TPS_Init>:
__WEAK void TPS_Init( void )
{
 800a4e2:	b480      	push	{r7}
 800a4e4:	af00      	add	r7, sp, #0
  return;
 800a4e6:	bf00      	nop
}
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ee:	4770      	bx	lr

0800a4f0 <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 800a4f0:	b480      	push	{r7}
 800a4f2:	af00      	add	r7, sp, #0
  return;
 800a4f4:	bf00      	nop
}
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fc:	4770      	bx	lr

0800a4fe <ZDD_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
  return;
}
__WEAK void ZDD_STM_Init( void )
{
 800a4fe:	b480      	push	{r7}
 800a500:	af00      	add	r7, sp, #0
  return;
 800a502:	bf00      	nop
}
 800a504:	46bd      	mov	sp, r7
 800a506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50a:	4770      	bx	lr

0800a50c <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 800a50c:	b480      	push	{r7}
 800a50e:	af00      	add	r7, sp, #0
  return;
 800a510:	bf00      	nop
}
 800a512:	46bd      	mov	sp, r7
 800a514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a518:	4770      	bx	lr

0800a51a <MESH_Init>:
__WEAK void MESH_Init( void )
{
 800a51a:	b480      	push	{r7}
 800a51c:	af00      	add	r7, sp, #0
  return;
 800a51e:	bf00      	nop
}
 800a520:	46bd      	mov	sp, r7
 800a522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a526:	4770      	bx	lr

0800a528 <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 800a528:	b480      	push	{r7}
 800a52a:	af00      	add	r7, sp, #0
  return;
 800a52c:	bf00      	nop
}
 800a52e:	46bd      	mov	sp, r7
 800a530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a534:	4770      	bx	lr

0800a536 <SVCCTL_InitCustomSvc>:
__WEAK void SVCCTL_InitCustomSvc( void )
{
 800a536:	b480      	push	{r7}
 800a538:	af00      	add	r7, sp, #0
  return;
 800a53a:	bf00      	nop
}
 800a53c:	46bd      	mov	sp, r7
 800a53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a542:	4770      	bx	lr

0800a544 <SVCCTL_Init>:

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 800a544:	b580      	push	{r7, lr}
 800a546:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 800a548:	4b04      	ldr	r3, [pc, #16]	@ (800a55c <SVCCTL_Init+0x18>)
 800a54a:	2200      	movs	r2, #0
 800a54c:	711a      	strb	r2, [r3, #4]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800a54e:	4b04      	ldr	r3, [pc, #16]	@ (800a560 <SVCCTL_Init+0x1c>)
 800a550:	2200      	movs	r2, #0
 800a552:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 800a554:	f000 f806 	bl	800a564 <SVCCTL_SvcInit>

  return;
 800a558:	bf00      	nop
}
 800a55a:	bd80      	pop	{r7, pc}
 800a55c:	20000088 	.word	0x20000088
 800a560:	20000090 	.word	0x20000090

0800a564 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 800a564:	b580      	push	{r7, lr}
 800a566:	af00      	add	r7, sp, #0
  BAS_Init();
 800a568:	f7ff ff75 	bl	800a456 <BAS_Init>

  BLS_Init();
 800a56c:	f7ff ff7a 	bl	800a464 <BLS_Init>

  CRS_STM_Init();
 800a570:	f7ff ff7f 	bl	800a472 <CRS_STM_Init>

  DIS_Init();
 800a574:	f7ff ff84 	bl	800a480 <DIS_Init>

  EDS_STM_Init();
 800a578:	f7ff ff89 	bl	800a48e <EDS_STM_Init>

  HIDS_Init();
 800a57c:	f7ff ff8e 	bl	800a49c <HIDS_Init>

  HRS_Init();
 800a580:	f7ff ff93 	bl	800a4aa <HRS_Init>

  HTS_Init();
 800a584:	f7ff ff98 	bl	800a4b8 <HTS_Init>

  IAS_Init();
 800a588:	f7ff ff9d 	bl	800a4c6 <IAS_Init>

  LLS_Init();
 800a58c:	f7ff ffa2 	bl	800a4d4 <LLS_Init>

  TPS_Init();
 800a590:	f7ff ffa7 	bl	800a4e2 <TPS_Init>

  MOTENV_STM_Init();
 800a594:	f7ff ffac 	bl	800a4f0 <MOTENV_STM_Init>


  //P2PS_STM_Init();
  Hermes_App_Init();
 800a598:	f001 fd2c 	bl	800bff4 <Hermes_App_Init>

  ZDD_STM_Init();
 800a59c:	f7ff ffaf 	bl	800a4fe <ZDD_STM_Init>

  OTAS_STM_Init();
 800a5a0:	f7ff ffb4 	bl	800a50c <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 800a5a4:	f7ff ffc0 	bl	800a528 <BVOPUS_STM_Init>

  MESH_Init();
 800a5a8:	f7ff ffb7 	bl	800a51a <MESH_Init>

  SVCCTL_InitCustomSvc();
 800a5ac:	f7ff ffc3 	bl	800a536 <SVCCTL_InitCustomSvc>
  
  return;
 800a5b0:	bf00      	nop
}
 800a5b2:	bd80      	pop	{r7, pc}

0800a5b4 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 800a5b4:	b480      	push	{r7}
 800a5b6:	b083      	sub	sp, #12
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 800a5bc:	4b09      	ldr	r3, [pc, #36]	@ (800a5e4 <SVCCTL_RegisterSvcHandler+0x30>)
 800a5be:	791b      	ldrb	r3, [r3, #4]
 800a5c0:	4619      	mov	r1, r3
 800a5c2:	4a08      	ldr	r2, [pc, #32]	@ (800a5e4 <SVCCTL_RegisterSvcHandler+0x30>)
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 800a5ca:	4b06      	ldr	r3, [pc, #24]	@ (800a5e4 <SVCCTL_RegisterSvcHandler+0x30>)
 800a5cc:	791b      	ldrb	r3, [r3, #4]
 800a5ce:	3301      	adds	r3, #1
 800a5d0:	b2da      	uxtb	r2, r3
 800a5d2:	4b04      	ldr	r3, [pc, #16]	@ (800a5e4 <SVCCTL_RegisterSvcHandler+0x30>)
 800a5d4:	711a      	strb	r2, [r3, #4]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 800a5d6:	bf00      	nop
}
 800a5d8:	370c      	adds	r7, #12
 800a5da:	46bd      	mov	sp, r7
 800a5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e0:	4770      	bx	lr
 800a5e2:	bf00      	nop
 800a5e4:	20000088 	.word	0x20000088

0800a5e8 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 800a5e8:	b580      	push	{r7, lr}
 800a5ea:	b086      	sub	sp, #24
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	3301      	adds	r3, #1
 800a5f4:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 800a5fa:	693b      	ldr	r3, [r7, #16]
 800a5fc:	781b      	ldrb	r3, [r3, #0]
 800a5fe:	2bff      	cmp	r3, #255	@ 0xff
 800a600:	d125      	bne.n	800a64e <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 800a602:	693b      	ldr	r3, [r7, #16]
 800a604:	3302      	adds	r3, #2
 800a606:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	881b      	ldrh	r3, [r3, #0]
 800a60c:	b29b      	uxth	r3, r3
 800a60e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800a612:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a616:	d118      	bne.n	800a64a <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800a618:	2300      	movs	r3, #0
 800a61a:	757b      	strb	r3, [r7, #21]
 800a61c:	e00d      	b.n	800a63a <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800a61e:	7d7b      	ldrb	r3, [r7, #21]
 800a620:	4a1a      	ldr	r2, [pc, #104]	@ (800a68c <SVCCTL_UserEvtRx+0xa4>)
 800a622:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a626:	6878      	ldr	r0, [r7, #4]
 800a628:	4798      	blx	r3
 800a62a:	4603      	mov	r3, r0
 800a62c:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 800a62e:	7dfb      	ldrb	r3, [r7, #23]
 800a630:	2b00      	cmp	r3, #0
 800a632:	d108      	bne.n	800a646 <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800a634:	7d7b      	ldrb	r3, [r7, #21]
 800a636:	3301      	adds	r3, #1
 800a638:	757b      	strb	r3, [r7, #21]
 800a63a:	4b14      	ldr	r3, [pc, #80]	@ (800a68c <SVCCTL_UserEvtRx+0xa4>)
 800a63c:	791b      	ldrb	r3, [r3, #4]
 800a63e:	7d7a      	ldrb	r2, [r7, #21]
 800a640:	429a      	cmp	r2, r3
 800a642:	d3ec      	bcc.n	800a61e <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 800a644:	e002      	b.n	800a64c <SVCCTL_UserEvtRx+0x64>
              break;
 800a646:	bf00      	nop
          break;
 800a648:	e000      	b.n	800a64c <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 800a64a:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 800a64c:	e000      	b.n	800a650 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 800a64e:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 800a650:	7dfb      	ldrb	r3, [r7, #23]
 800a652:	2b02      	cmp	r3, #2
 800a654:	d00f      	beq.n	800a676 <SVCCTL_UserEvtRx+0x8e>
 800a656:	2b02      	cmp	r3, #2
 800a658:	dc10      	bgt.n	800a67c <SVCCTL_UserEvtRx+0x94>
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d002      	beq.n	800a664 <SVCCTL_UserEvtRx+0x7c>
 800a65e:	2b01      	cmp	r3, #1
 800a660:	d006      	beq.n	800a670 <SVCCTL_UserEvtRx+0x88>
 800a662:	e00b      	b.n	800a67c <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 800a664:	6878      	ldr	r0, [r7, #4]
 800a666:	f001 ff4f 	bl	800c508 <SVCCTL_App_Notification>
 800a66a:	4603      	mov	r3, r0
 800a66c:	75bb      	strb	r3, [r7, #22]
      break;
 800a66e:	e008      	b.n	800a682 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 800a670:	2301      	movs	r3, #1
 800a672:	75bb      	strb	r3, [r7, #22]
      break;
 800a674:	e005      	b.n	800a682 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 800a676:	2300      	movs	r3, #0
 800a678:	75bb      	strb	r3, [r7, #22]
      break;
 800a67a:	e002      	b.n	800a682 <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 800a67c:	2301      	movs	r3, #1
 800a67e:	75bb      	strb	r3, [r7, #22]
      break;
 800a680:	bf00      	nop
  }

  return (return_status);
 800a682:	7dbb      	ldrb	r3, [r7, #22]
}
 800a684:	4618      	mov	r0, r3
 800a686:	3718      	adds	r7, #24
 800a688:	46bd      	mov	sp, r7
 800a68a:	bd80      	pop	{r7, pc}
 800a68c:	20000088 	.word	0x20000088

0800a690 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 800a690:	b580      	push	{r7, lr}
 800a692:	b088      	sub	sp, #32
 800a694:	af00      	add	r7, sp, #0
 800a696:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800a698:	f107 030c 	add.w	r3, r7, #12
 800a69c:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 800a6a4:	69fb      	ldr	r3, [r7, #28]
 800a6a6:	212e      	movs	r1, #46	@ 0x2e
 800a6a8:	f64f 4066 	movw	r0, #64614	@ 0xfc66
 800a6ac:	f000 fae8 	bl	800ac80 <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800a6b0:	69fb      	ldr	r3, [r7, #28]
 800a6b2:	330b      	adds	r3, #11
 800a6b4:	78db      	ldrb	r3, [r3, #3]
}
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	3720      	adds	r7, #32
 800a6ba:	46bd      	mov	sp, r7
 800a6bc:	bd80      	pop	{r7, pc}

0800a6be <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 800a6be:	b580      	push	{r7, lr}
 800a6c0:	b088      	sub	sp, #32
 800a6c2:	af00      	add	r7, sp, #0
 800a6c4:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800a6c6:	f107 030c 	add.w	r3, r7, #12
 800a6ca:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 800a6d2:	69fb      	ldr	r3, [r7, #28]
 800a6d4:	210f      	movs	r1, #15
 800a6d6:	f64f 4068 	movw	r0, #64616	@ 0xfc68
 800a6da:	f000 fad1 	bl	800ac80 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800a6de:	69fb      	ldr	r3, [r7, #28]
 800a6e0:	330b      	adds	r3, #11
 800a6e2:	78db      	ldrb	r3, [r3, #3]
}
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	3720      	adds	r7, #32
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	bd80      	pop	{r7, pc}

0800a6ec <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	b088      	sub	sp, #32
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800a6f4:	f107 030c 	add.w	r3, r7, #12
 800a6f8:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 800a6fa:	69fb      	ldr	r3, [r7, #28]
 800a6fc:	687a      	ldr	r2, [r7, #4]
 800a6fe:	2110      	movs	r1, #16
 800a700:	f64f 4075 	movw	r0, #64629	@ 0xfc75
 800a704:	f000 fabc 	bl	800ac80 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800a708:	69fb      	ldr	r3, [r7, #28]
 800a70a:	330b      	adds	r3, #11
 800a70c:	78db      	ldrb	r3, [r3, #3]
}
 800a70e:	4618      	mov	r0, r3
 800a710:	3720      	adds	r7, #32
 800a712:	46bd      	mov	sp, r7
 800a714:	bd80      	pop	{r7, pc}
	...

0800a718 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 800a718:	b480      	push	{r7}
 800a71a:	b08b      	sub	sp, #44	@ 0x2c
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 800a720:	2300      	movs	r3, #0
 800a722:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 800a724:	2300      	movs	r3, #0
 800a726:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 800a728:	2300      	movs	r3, #0
 800a72a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t wireless_firmware_memorySize = 0;
 800a72c:	2300      	movs	r3, #0
 800a72e:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 800a730:	2300      	movs	r3, #0
 800a732:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 800a734:	2300      	movs	r3, #0
 800a736:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 800a738:	2300      	movs	r3, #0
 800a73a:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 800a73c:	2300      	movs	r3, #0
 800a73e:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 800a740:	4b4a      	ldr	r3, [pc, #296]	@ (800a86c <SHCI_GetWirelessFwInfo+0x154>)
 800a742:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a744:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800a748:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 800a74a:	693b      	ldr	r3, [r7, #16]
 800a74c:	009b      	lsls	r3, r3, #2
 800a74e:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 800a752:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 800a75a:	68bb      	ldr	r3, [r7, #8]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	4a44      	ldr	r2, [pc, #272]	@ (800a870 <SHCI_GetWirelessFwInfo+0x158>)
 800a760:	4293      	cmp	r3, r2
 800a762:	d10f      	bne.n	800a784 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 800a764:	68bb      	ldr	r3, [r7, #8]
 800a766:	695b      	ldr	r3, [r3, #20]
 800a768:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 800a76a:	68bb      	ldr	r3, [r7, #8]
 800a76c:	699b      	ldr	r3, [r3, #24]
 800a76e:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 800a770:	68bb      	ldr	r3, [r7, #8]
 800a772:	69db      	ldr	r3, [r3, #28]
 800a774:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 800a776:	68bb      	ldr	r3, [r7, #8]
 800a778:	68db      	ldr	r3, [r3, #12]
 800a77a:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 800a77c:	68bb      	ldr	r3, [r7, #8]
 800a77e:	691b      	ldr	r3, [r3, #16]
 800a780:	617b      	str	r3, [r7, #20]
 800a782:	e01a      	b.n	800a7ba <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 800a784:	693b      	ldr	r3, [r7, #16]
 800a786:	009b      	lsls	r3, r3, #2
 800a788:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 800a78c:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 800a790:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	691b      	ldr	r3, [r3, #16]
 800a798:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	695b      	ldr	r3, [r3, #20]
 800a7a0:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	699b      	ldr	r3, [r3, #24]
 800a7a8:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	685b      	ldr	r3, [r3, #4]
 800a7b0:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	689b      	ldr	r3, [r3, #8]
 800a7b8:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800a7ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7bc:	0e1b      	lsrs	r3, r3, #24
 800a7be:	b2da      	uxtb	r2, r3
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800a7c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7c6:	0c1b      	lsrs	r3, r3, #16
 800a7c8:	b2da      	uxtb	r2, r3
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800a7ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7d0:	0a1b      	lsrs	r3, r3, #8
 800a7d2:	b2da      	uxtb	r2, r3
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 800a7d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7da:	091b      	lsrs	r3, r3, #4
 800a7dc:	b2db      	uxtb	r3, r3
 800a7de:	f003 030f 	and.w	r3, r3, #15
 800a7e2:	b2da      	uxtb	r2, r3
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 800a7e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7ea:	b2db      	uxtb	r3, r3
 800a7ec:	f003 030f 	and.w	r3, r3, #15
 800a7f0:	b2da      	uxtb	r2, r3
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800a7f6:	6a3b      	ldr	r3, [r7, #32]
 800a7f8:	0e1b      	lsrs	r3, r3, #24
 800a7fa:	b2da      	uxtb	r2, r3
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800a800:	6a3b      	ldr	r3, [r7, #32]
 800a802:	0c1b      	lsrs	r3, r3, #16
 800a804:	b2da      	uxtb	r2, r3
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 800a80a:	6a3b      	ldr	r3, [r7, #32]
 800a80c:	0a1b      	lsrs	r3, r3, #8
 800a80e:	b2da      	uxtb	r2, r3
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800a814:	6a3b      	ldr	r3, [r7, #32]
 800a816:	b2da      	uxtb	r2, r3
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 800a81c:	69fb      	ldr	r3, [r7, #28]
 800a81e:	b2da      	uxtb	r2, r3
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800a824:	69bb      	ldr	r3, [r7, #24]
 800a826:	0e1b      	lsrs	r3, r3, #24
 800a828:	b2da      	uxtb	r2, r3
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800a82e:	69bb      	ldr	r3, [r7, #24]
 800a830:	0c1b      	lsrs	r3, r3, #16
 800a832:	b2da      	uxtb	r2, r3
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800a838:	69bb      	ldr	r3, [r7, #24]
 800a83a:	0a1b      	lsrs	r3, r3, #8
 800a83c:	b2da      	uxtb	r2, r3
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800a842:	697b      	ldr	r3, [r7, #20]
 800a844:	0e1b      	lsrs	r3, r3, #24
 800a846:	b2da      	uxtb	r2, r3
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800a84c:	697b      	ldr	r3, [r7, #20]
 800a84e:	0c1b      	lsrs	r3, r3, #16
 800a850:	b2da      	uxtb	r2, r3
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800a856:	697b      	ldr	r3, [r7, #20]
 800a858:	b2da      	uxtb	r2, r3
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 800a85e:	2300      	movs	r3, #0
}
 800a860:	4618      	mov	r0, r3
 800a862:	372c      	adds	r7, #44	@ 0x2c
 800a864:	46bd      	mov	sp, r7
 800a866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a86a:	4770      	bx	lr
 800a86c:	58004000 	.word	0x58004000
 800a870:	a94656b9 	.word	0xa94656b9

0800a874 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800a874:	b580      	push	{r7, lr}
 800a876:	b082      	sub	sp, #8
 800a878:	af00      	add	r7, sp, #0
 800a87a:	6078      	str	r0, [r7, #4]
 800a87c:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800a87e:	683b      	ldr	r3, [r7, #0]
 800a880:	685b      	ldr	r3, [r3, #4]
 800a882:	4a08      	ldr	r2, [pc, #32]	@ (800a8a4 <hci_init+0x30>)
 800a884:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 800a886:	4a08      	ldr	r2, [pc, #32]	@ (800a8a8 <hci_init+0x34>)
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 800a88c:	4806      	ldr	r0, [pc, #24]	@ (800a8a8 <hci_init+0x34>)
 800a88e:	f000 f979 	bl	800ab84 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800a892:	683b      	ldr	r3, [r7, #0]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	4618      	mov	r0, r3
 800a898:	f000 f8da 	bl	800aa50 <TlInit>

  return;
 800a89c:	bf00      	nop
}
 800a89e:	3708      	adds	r7, #8
 800a8a0:	46bd      	mov	sp, r7
 800a8a2:	bd80      	pop	{r7, pc}
 800a8a4:	20000454 	.word	0x20000454
 800a8a8:	2000042c 	.word	0x2000042c

0800a8ac <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800a8ac:	b580      	push	{r7, lr}
 800a8ae:	b084      	sub	sp, #16
 800a8b0:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800a8b2:	4822      	ldr	r0, [pc, #136]	@ (800a93c <hci_user_evt_proc+0x90>)
 800a8b4:	f000 fdd2 	bl	800b45c <LST_is_empty>
 800a8b8:	4603      	mov	r3, r0
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d12b      	bne.n	800a916 <hci_user_evt_proc+0x6a>
 800a8be:	4b20      	ldr	r3, [pc, #128]	@ (800a940 <hci_user_evt_proc+0x94>)
 800a8c0:	781b      	ldrb	r3, [r3, #0]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d027      	beq.n	800a916 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800a8c6:	f107 030c 	add.w	r3, r7, #12
 800a8ca:	4619      	mov	r1, r3
 800a8cc:	481b      	ldr	r0, [pc, #108]	@ (800a93c <hci_user_evt_proc+0x90>)
 800a8ce:	f000 fe54 	bl	800b57a <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800a8d2:	4b1c      	ldr	r3, [pc, #112]	@ (800a944 <hci_user_evt_proc+0x98>)
 800a8d4:	69db      	ldr	r3, [r3, #28]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d00c      	beq.n	800a8f4 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 800a8de:	2301      	movs	r3, #1
 800a8e0:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800a8e2:	4b18      	ldr	r3, [pc, #96]	@ (800a944 <hci_user_evt_proc+0x98>)
 800a8e4:	69db      	ldr	r3, [r3, #28]
 800a8e6:	1d3a      	adds	r2, r7, #4
 800a8e8:	4610      	mov	r0, r2
 800a8ea:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 800a8ec:	793a      	ldrb	r2, [r7, #4]
 800a8ee:	4b14      	ldr	r3, [pc, #80]	@ (800a940 <hci_user_evt_proc+0x94>)
 800a8f0:	701a      	strb	r2, [r3, #0]
 800a8f2:	e002      	b.n	800a8fa <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800a8f4:	4b12      	ldr	r3, [pc, #72]	@ (800a940 <hci_user_evt_proc+0x94>)
 800a8f6:	2201      	movs	r2, #1
 800a8f8:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 800a8fa:	4b11      	ldr	r3, [pc, #68]	@ (800a940 <hci_user_evt_proc+0x94>)
 800a8fc:	781b      	ldrb	r3, [r3, #0]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d004      	beq.n	800a90c <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	4618      	mov	r0, r3
 800a906:	f000 fc0d 	bl	800b124 <TL_MM_EvtDone>
 800a90a:	e004      	b.n	800a916 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	4619      	mov	r1, r3
 800a910:	480a      	ldr	r0, [pc, #40]	@ (800a93c <hci_user_evt_proc+0x90>)
 800a912:	f000 fdc5 	bl	800b4a0 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800a916:	4809      	ldr	r0, [pc, #36]	@ (800a93c <hci_user_evt_proc+0x90>)
 800a918:	f000 fda0 	bl	800b45c <LST_is_empty>
 800a91c:	4603      	mov	r3, r0
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d107      	bne.n	800a932 <hci_user_evt_proc+0x86>
 800a922:	4b07      	ldr	r3, [pc, #28]	@ (800a940 <hci_user_evt_proc+0x94>)
 800a924:	781b      	ldrb	r3, [r3, #0]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d003      	beq.n	800a932 <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 800a92a:	4804      	ldr	r0, [pc, #16]	@ (800a93c <hci_user_evt_proc+0x90>)
 800a92c:	f002 fbd5 	bl	800d0da <hci_notify_asynch_evt>
  }


  return;
 800a930:	bf00      	nop
 800a932:	bf00      	nop
}
 800a934:	3710      	adds	r7, #16
 800a936:	46bd      	mov	sp, r7
 800a938:	bd80      	pop	{r7, pc}
 800a93a:	bf00      	nop
 800a93c:	20000098 	.word	0x20000098
 800a940:	200000a4 	.word	0x200000a4
 800a944:	2000042c 	.word	0x2000042c

0800a948 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 800a948:	b580      	push	{r7, lr}
 800a94a:	b088      	sub	sp, #32
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	6078      	str	r0, [r7, #4]
 800a950:	460b      	mov	r3, r1
 800a952:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 800a954:	2000      	movs	r0, #0
 800a956:	f000 f8d1 	bl	800aafc <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 800a95a:	2300      	movs	r3, #0
 800a95c:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	885b      	ldrh	r3, [r3, #2]
 800a962:	b21b      	sxth	r3, r3
 800a964:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a968:	b21a      	sxth	r2, r3
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	881b      	ldrh	r3, [r3, #0]
 800a96e:	029b      	lsls	r3, r3, #10
 800a970:	b21b      	sxth	r3, r3
 800a972:	4313      	orrs	r3, r2
 800a974:	b21b      	sxth	r3, r3
 800a976:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 800a978:	4b33      	ldr	r3, [pc, #204]	@ (800aa48 <hci_send_req+0x100>)
 800a97a:	2201      	movs	r2, #1
 800a97c:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	68db      	ldr	r3, [r3, #12]
 800a982:	b2d9      	uxtb	r1, r3
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	689a      	ldr	r2, [r3, #8]
 800a988:	8bbb      	ldrh	r3, [r7, #28]
 800a98a:	4618      	mov	r0, r3
 800a98c:	f000 f890 	bl	800aab0 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 800a990:	e04e      	b.n	800aa30 <hci_send_req+0xe8>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 800a992:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 800a996:	f002 fbb7 	bl	800d108 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800a99a:	e043      	b.n	800aa24 <hci_send_req+0xdc>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 800a99c:	f107 030c 	add.w	r3, r7, #12
 800a9a0:	4619      	mov	r1, r3
 800a9a2:	482a      	ldr	r0, [pc, #168]	@ (800aa4c <hci_send_req+0x104>)
 800a9a4:	f000 fde9 	bl	800b57a <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	7a5b      	ldrb	r3, [r3, #9]
 800a9ac:	2b0f      	cmp	r3, #15
 800a9ae:	d114      	bne.n	800a9da <hci_send_req+0x92>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	330b      	adds	r3, #11
 800a9b4:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 800a9b6:	693b      	ldr	r3, [r7, #16]
 800a9b8:	885b      	ldrh	r3, [r3, #2]
 800a9ba:	b29b      	uxth	r3, r3
 800a9bc:	8bba      	ldrh	r2, [r7, #28]
 800a9be:	429a      	cmp	r2, r3
 800a9c0:	d104      	bne.n	800a9cc <hci_send_req+0x84>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	691b      	ldr	r3, [r3, #16]
 800a9c6:	693a      	ldr	r2, [r7, #16]
 800a9c8:	7812      	ldrb	r2, [r2, #0]
 800a9ca:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 800a9cc:	693b      	ldr	r3, [r7, #16]
 800a9ce:	785b      	ldrb	r3, [r3, #1]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d027      	beq.n	800aa24 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800a9d4:	2301      	movs	r3, #1
 800a9d6:	77fb      	strb	r3, [r7, #31]
 800a9d8:	e024      	b.n	800aa24 <hci_send_req+0xdc>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	330b      	adds	r3, #11
 800a9de:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 800a9e0:	69bb      	ldr	r3, [r7, #24]
 800a9e2:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800a9e6:	b29b      	uxth	r3, r3
 800a9e8:	8bba      	ldrh	r2, [r7, #28]
 800a9ea:	429a      	cmp	r2, r3
 800a9ec:	d114      	bne.n	800aa18 <hci_send_req+0xd0>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	7a9b      	ldrb	r3, [r3, #10]
 800a9f2:	3b03      	subs	r3, #3
 800a9f4:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	695a      	ldr	r2, [r3, #20]
 800a9fa:	7dfb      	ldrb	r3, [r7, #23]
 800a9fc:	429a      	cmp	r2, r3
 800a9fe:	bfa8      	it	ge
 800aa00:	461a      	movge	r2, r3
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	6918      	ldr	r0, [r3, #16]
 800aa0a:	69bb      	ldr	r3, [r7, #24]
 800aa0c:	1cd9      	adds	r1, r3, #3
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	695b      	ldr	r3, [r3, #20]
 800aa12:	461a      	mov	r2, r3
 800aa14:	f003 fcb9 	bl	800e38a <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 800aa18:	69bb      	ldr	r3, [r7, #24]
 800aa1a:	781b      	ldrb	r3, [r3, #0]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d001      	beq.n	800aa24 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800aa20:	2301      	movs	r3, #1
 800aa22:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800aa24:	4809      	ldr	r0, [pc, #36]	@ (800aa4c <hci_send_req+0x104>)
 800aa26:	f000 fd19 	bl	800b45c <LST_is_empty>
 800aa2a:	4603      	mov	r3, r0
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d0b5      	beq.n	800a99c <hci_send_req+0x54>
  while(local_cmd_status == HCI_TL_CmdBusy)
 800aa30:	7ffb      	ldrb	r3, [r7, #31]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d0ad      	beq.n	800a992 <hci_send_req+0x4a>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 800aa36:	2001      	movs	r0, #1
 800aa38:	f000 f860 	bl	800aafc <NotifyCmdStatus>

  return 0;
 800aa3c:	2300      	movs	r3, #0
}
 800aa3e:	4618      	mov	r0, r3
 800aa40:	3720      	adds	r7, #32
 800aa42:	46bd      	mov	sp, r7
 800aa44:	bd80      	pop	{r7, pc}
 800aa46:	bf00      	nop
 800aa48:	20000458 	.word	0x20000458
 800aa4c:	2000044c 	.word	0x2000044c

0800aa50 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800aa50:	b580      	push	{r7, lr}
 800aa52:	b086      	sub	sp, #24
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 800aa58:	480f      	ldr	r0, [pc, #60]	@ (800aa98 <TlInit+0x48>)
 800aa5a:	f000 fcef 	bl	800b43c <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 800aa5e:	4a0f      	ldr	r2, [pc, #60]	@ (800aa9c <TlInit+0x4c>)
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 800aa64:	480e      	ldr	r0, [pc, #56]	@ (800aaa0 <TlInit+0x50>)
 800aa66:	f000 fce9 	bl	800b43c <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800aa6a:	4b0e      	ldr	r3, [pc, #56]	@ (800aaa4 <TlInit+0x54>)
 800aa6c:	2201      	movs	r2, #1
 800aa6e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 800aa70:	4b0d      	ldr	r3, [pc, #52]	@ (800aaa8 <TlInit+0x58>)
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d00a      	beq.n	800aa8e <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 800aa7c:	4b0b      	ldr	r3, [pc, #44]	@ (800aaac <TlInit+0x5c>)
 800aa7e:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 800aa80:	4b09      	ldr	r3, [pc, #36]	@ (800aaa8 <TlInit+0x58>)
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	f107 0208 	add.w	r2, r7, #8
 800aa88:	4610      	mov	r0, r2
 800aa8a:	4798      	blx	r3
  }

  return;
 800aa8c:	bf00      	nop
 800aa8e:	bf00      	nop
}
 800aa90:	3718      	adds	r7, #24
 800aa92:	46bd      	mov	sp, r7
 800aa94:	bd80      	pop	{r7, pc}
 800aa96:	bf00      	nop
 800aa98:	2000044c 	.word	0x2000044c
 800aa9c:	200000a0 	.word	0x200000a0
 800aaa0:	20000098 	.word	0x20000098
 800aaa4:	200000a4 	.word	0x200000a4
 800aaa8:	2000042c 	.word	0x2000042c
 800aaac:	0800ab3d 	.word	0x0800ab3d

0800aab0 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 800aab0:	b580      	push	{r7, lr}
 800aab2:	b082      	sub	sp, #8
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	4603      	mov	r3, r0
 800aab8:	603a      	str	r2, [r7, #0]
 800aaba:	80fb      	strh	r3, [r7, #6]
 800aabc:	460b      	mov	r3, r1
 800aabe:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 800aac0:	4b0c      	ldr	r3, [pc, #48]	@ (800aaf4 <SendCmd+0x44>)
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	88fa      	ldrh	r2, [r7, #6]
 800aac6:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 800aaca:	4b0a      	ldr	r3, [pc, #40]	@ (800aaf4 <SendCmd+0x44>)
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	797a      	ldrb	r2, [r7, #5]
 800aad0:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 800aad2:	4b08      	ldr	r3, [pc, #32]	@ (800aaf4 <SendCmd+0x44>)
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	330c      	adds	r3, #12
 800aad8:	797a      	ldrb	r2, [r7, #5]
 800aada:	6839      	ldr	r1, [r7, #0]
 800aadc:	4618      	mov	r0, r3
 800aade:	f003 fc54 	bl	800e38a <memcpy>

  hciContext.io.Send(0,0);
 800aae2:	4b05      	ldr	r3, [pc, #20]	@ (800aaf8 <SendCmd+0x48>)
 800aae4:	691b      	ldr	r3, [r3, #16]
 800aae6:	2100      	movs	r1, #0
 800aae8:	2000      	movs	r0, #0
 800aaea:	4798      	blx	r3

  return;
 800aaec:	bf00      	nop
}
 800aaee:	3708      	adds	r7, #8
 800aaf0:	46bd      	mov	sp, r7
 800aaf2:	bd80      	pop	{r7, pc}
 800aaf4:	200000a0 	.word	0x200000a0
 800aaf8:	2000042c 	.word	0x2000042c

0800aafc <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 800aafc:	b580      	push	{r7, lr}
 800aafe:	b082      	sub	sp, #8
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	4603      	mov	r3, r0
 800ab04:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 800ab06:	79fb      	ldrb	r3, [r7, #7]
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d108      	bne.n	800ab1e <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 800ab0c:	4b0a      	ldr	r3, [pc, #40]	@ (800ab38 <NotifyCmdStatus+0x3c>)
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d00d      	beq.n	800ab30 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 800ab14:	4b08      	ldr	r3, [pc, #32]	@ (800ab38 <NotifyCmdStatus+0x3c>)
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	2000      	movs	r0, #0
 800ab1a:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 800ab1c:	e008      	b.n	800ab30 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 800ab1e:	4b06      	ldr	r3, [pc, #24]	@ (800ab38 <NotifyCmdStatus+0x3c>)
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d004      	beq.n	800ab30 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 800ab26:	4b04      	ldr	r3, [pc, #16]	@ (800ab38 <NotifyCmdStatus+0x3c>)
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	2001      	movs	r0, #1
 800ab2c:	4798      	blx	r3
  return;
 800ab2e:	bf00      	nop
 800ab30:	bf00      	nop
}
 800ab32:	3708      	adds	r7, #8
 800ab34:	46bd      	mov	sp, r7
 800ab36:	bd80      	pop	{r7, pc}
 800ab38:	20000454 	.word	0x20000454

0800ab3c <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 800ab3c:	b580      	push	{r7, lr}
 800ab3e:	b082      	sub	sp, #8
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	7a5b      	ldrb	r3, [r3, #9]
 800ab48:	2b0f      	cmp	r3, #15
 800ab4a:	d003      	beq.n	800ab54 <TlEvtReceived+0x18>
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	7a5b      	ldrb	r3, [r3, #9]
 800ab50:	2b0e      	cmp	r3, #14
 800ab52:	d107      	bne.n	800ab64 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 800ab54:	6879      	ldr	r1, [r7, #4]
 800ab56:	4809      	ldr	r0, [pc, #36]	@ (800ab7c <TlEvtReceived+0x40>)
 800ab58:	f000 fcc8 	bl	800b4ec <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 800ab5c:	2000      	movs	r0, #0
 800ab5e:	f002 fac8 	bl	800d0f2 <hci_cmd_resp_release>
 800ab62:	e006      	b.n	800ab72 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 800ab64:	6879      	ldr	r1, [r7, #4]
 800ab66:	4806      	ldr	r0, [pc, #24]	@ (800ab80 <TlEvtReceived+0x44>)
 800ab68:	f000 fcc0 	bl	800b4ec <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800ab6c:	4804      	ldr	r0, [pc, #16]	@ (800ab80 <TlEvtReceived+0x44>)
 800ab6e:	f002 fab4 	bl	800d0da <hci_notify_asynch_evt>
  }

  return;
 800ab72:	bf00      	nop
}
 800ab74:	3708      	adds	r7, #8
 800ab76:	46bd      	mov	sp, r7
 800ab78:	bd80      	pop	{r7, pc}
 800ab7a:	bf00      	nop
 800ab7c:	2000044c 	.word	0x2000044c
 800ab80:	20000098 	.word	0x20000098

0800ab84 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 800ab84:	b480      	push	{r7}
 800ab86:	b083      	sub	sp, #12
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	4a05      	ldr	r2, [pc, #20]	@ (800aba4 <hci_register_io_bus+0x20>)
 800ab90:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	4a04      	ldr	r2, [pc, #16]	@ (800aba8 <hci_register_io_bus+0x24>)
 800ab96:	611a      	str	r2, [r3, #16]

  return;
 800ab98:	bf00      	nop
}
 800ab9a:	370c      	adds	r7, #12
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba2:	4770      	bx	lr
 800aba4:	0800ae9d 	.word	0x0800ae9d
 800aba8:	0800af05 	.word	0x0800af05

0800abac <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800abac:	b580      	push	{r7, lr}
 800abae:	b082      	sub	sp, #8
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	6078      	str	r0, [r7, #4]
 800abb4:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800abb6:	683b      	ldr	r3, [r7, #0]
 800abb8:	685b      	ldr	r3, [r3, #4]
 800abba:	4a08      	ldr	r2, [pc, #32]	@ (800abdc <shci_init+0x30>)
 800abbc:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800abbe:	4a08      	ldr	r2, [pc, #32]	@ (800abe0 <shci_init+0x34>)
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800abc4:	4806      	ldr	r0, [pc, #24]	@ (800abe0 <shci_init+0x34>)
 800abc6:	f000 f915 	bl	800adf4 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800abca:	683b      	ldr	r3, [r7, #0]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	4618      	mov	r0, r3
 800abd0:	f000 f898 	bl	800ad04 <TlInit>

  return;
 800abd4:	bf00      	nop
}
 800abd6:	3708      	adds	r7, #8
 800abd8:	46bd      	mov	sp, r7
 800abda:	bd80      	pop	{r7, pc}
 800abdc:	2000047c 	.word	0x2000047c
 800abe0:	2000045c 	.word	0x2000045c

0800abe4 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800abe4:	b580      	push	{r7, lr}
 800abe6:	b084      	sub	sp, #16
 800abe8:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800abea:	4822      	ldr	r0, [pc, #136]	@ (800ac74 <shci_user_evt_proc+0x90>)
 800abec:	f000 fc36 	bl	800b45c <LST_is_empty>
 800abf0:	4603      	mov	r3, r0
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d12b      	bne.n	800ac4e <shci_user_evt_proc+0x6a>
 800abf6:	4b20      	ldr	r3, [pc, #128]	@ (800ac78 <shci_user_evt_proc+0x94>)
 800abf8:	781b      	ldrb	r3, [r3, #0]
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d027      	beq.n	800ac4e <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800abfe:	f107 030c 	add.w	r3, r7, #12
 800ac02:	4619      	mov	r1, r3
 800ac04:	481b      	ldr	r0, [pc, #108]	@ (800ac74 <shci_user_evt_proc+0x90>)
 800ac06:	f000 fcb8 	bl	800b57a <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 800ac0a:	4b1c      	ldr	r3, [pc, #112]	@ (800ac7c <shci_user_evt_proc+0x98>)
 800ac0c:	69db      	ldr	r3, [r3, #28]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d00c      	beq.n	800ac2c <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800ac16:	2301      	movs	r3, #1
 800ac18:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800ac1a:	4b18      	ldr	r3, [pc, #96]	@ (800ac7c <shci_user_evt_proc+0x98>)
 800ac1c:	69db      	ldr	r3, [r3, #28]
 800ac1e:	1d3a      	adds	r2, r7, #4
 800ac20:	4610      	mov	r0, r2
 800ac22:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800ac24:	793a      	ldrb	r2, [r7, #4]
 800ac26:	4b14      	ldr	r3, [pc, #80]	@ (800ac78 <shci_user_evt_proc+0x94>)
 800ac28:	701a      	strb	r2, [r3, #0]
 800ac2a:	e002      	b.n	800ac32 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800ac2c:	4b12      	ldr	r3, [pc, #72]	@ (800ac78 <shci_user_evt_proc+0x94>)
 800ac2e:	2201      	movs	r2, #1
 800ac30:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800ac32:	4b11      	ldr	r3, [pc, #68]	@ (800ac78 <shci_user_evt_proc+0x94>)
 800ac34:	781b      	ldrb	r3, [r3, #0]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d004      	beq.n	800ac44 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	f000 fa71 	bl	800b124 <TL_MM_EvtDone>
 800ac42:	e004      	b.n	800ac4e <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	4619      	mov	r1, r3
 800ac48:	480a      	ldr	r0, [pc, #40]	@ (800ac74 <shci_user_evt_proc+0x90>)
 800ac4a:	f000 fc29 	bl	800b4a0 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800ac4e:	4809      	ldr	r0, [pc, #36]	@ (800ac74 <shci_user_evt_proc+0x90>)
 800ac50:	f000 fc04 	bl	800b45c <LST_is_empty>
 800ac54:	4603      	mov	r3, r0
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d107      	bne.n	800ac6a <shci_user_evt_proc+0x86>
 800ac5a:	4b07      	ldr	r3, [pc, #28]	@ (800ac78 <shci_user_evt_proc+0x94>)
 800ac5c:	781b      	ldrb	r3, [r3, #0]
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d003      	beq.n	800ac6a <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800ac62:	4804      	ldr	r0, [pc, #16]	@ (800ac74 <shci_user_evt_proc+0x90>)
 800ac64:	f7f6 fc57 	bl	8001516 <shci_notify_asynch_evt>
  }


  return;
 800ac68:	bf00      	nop
 800ac6a:	bf00      	nop
}
 800ac6c:	3710      	adds	r7, #16
 800ac6e:	46bd      	mov	sp, r7
 800ac70:	bd80      	pop	{r7, pc}
 800ac72:	bf00      	nop
 800ac74:	200000a8 	.word	0x200000a8
 800ac78:	200000b8 	.word	0x200000b8
 800ac7c:	2000045c 	.word	0x2000045c

0800ac80 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800ac80:	b580      	push	{r7, lr}
 800ac82:	b084      	sub	sp, #16
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	60ba      	str	r2, [r7, #8]
 800ac88:	607b      	str	r3, [r7, #4]
 800ac8a:	4603      	mov	r3, r0
 800ac8c:	81fb      	strh	r3, [r7, #14]
 800ac8e:	460b      	mov	r3, r1
 800ac90:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800ac92:	2000      	movs	r0, #0
 800ac94:	f000 f868 	bl	800ad68 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800ac98:	4b17      	ldr	r3, [pc, #92]	@ (800acf8 <shci_send+0x78>)
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	89fa      	ldrh	r2, [r7, #14]
 800ac9e:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800aca2:	4b15      	ldr	r3, [pc, #84]	@ (800acf8 <shci_send+0x78>)
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	7b7a      	ldrb	r2, [r7, #13]
 800aca8:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800acaa:	4b13      	ldr	r3, [pc, #76]	@ (800acf8 <shci_send+0x78>)
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	330c      	adds	r3, #12
 800acb0:	7b7a      	ldrb	r2, [r7, #13]
 800acb2:	68b9      	ldr	r1, [r7, #8]
 800acb4:	4618      	mov	r0, r3
 800acb6:	f003 fb68 	bl	800e38a <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 800acba:	4b10      	ldr	r3, [pc, #64]	@ (800acfc <shci_send+0x7c>)
 800acbc:	2201      	movs	r2, #1
 800acbe:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 800acc0:	4b0f      	ldr	r3, [pc, #60]	@ (800ad00 <shci_send+0x80>)
 800acc2:	691b      	ldr	r3, [r3, #16]
 800acc4:	2100      	movs	r1, #0
 800acc6:	2000      	movs	r0, #0
 800acc8:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800acca:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 800acce:	f7f6 fc39 	bl	8001544 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	f103 0008 	add.w	r0, r3, #8
 800acd8:	4b07      	ldr	r3, [pc, #28]	@ (800acf8 <shci_send+0x78>)
 800acda:	6819      	ldr	r1, [r3, #0]
 800acdc:	4b06      	ldr	r3, [pc, #24]	@ (800acf8 <shci_send+0x78>)
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	789b      	ldrb	r3, [r3, #2]
 800ace2:	3303      	adds	r3, #3
 800ace4:	461a      	mov	r2, r3
 800ace6:	f003 fb50 	bl	800e38a <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800acea:	2001      	movs	r0, #1
 800acec:	f000 f83c 	bl	800ad68 <Cmd_SetStatus>

  return;
 800acf0:	bf00      	nop
}
 800acf2:	3710      	adds	r7, #16
 800acf4:	46bd      	mov	sp, r7
 800acf6:	bd80      	pop	{r7, pc}
 800acf8:	200000b4 	.word	0x200000b4
 800acfc:	20000480 	.word	0x20000480
 800ad00:	2000045c 	.word	0x2000045c

0800ad04 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800ad04:	b580      	push	{r7, lr}
 800ad06:	b086      	sub	sp, #24
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800ad0c:	4a10      	ldr	r2, [pc, #64]	@ (800ad50 <TlInit+0x4c>)
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800ad12:	4810      	ldr	r0, [pc, #64]	@ (800ad54 <TlInit+0x50>)
 800ad14:	f000 fb92 	bl	800b43c <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800ad18:	2001      	movs	r0, #1
 800ad1a:	f000 f825 	bl	800ad68 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800ad1e:	4b0e      	ldr	r3, [pc, #56]	@ (800ad58 <TlInit+0x54>)
 800ad20:	2201      	movs	r2, #1
 800ad22:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800ad24:	4b0d      	ldr	r3, [pc, #52]	@ (800ad5c <TlInit+0x58>)
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d00c      	beq.n	800ad46 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800ad30:	4b0b      	ldr	r3, [pc, #44]	@ (800ad60 <TlInit+0x5c>)
 800ad32:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800ad34:	4b0b      	ldr	r3, [pc, #44]	@ (800ad64 <TlInit+0x60>)
 800ad36:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800ad38:	4b08      	ldr	r3, [pc, #32]	@ (800ad5c <TlInit+0x58>)
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	f107 020c 	add.w	r2, r7, #12
 800ad40:	4610      	mov	r0, r2
 800ad42:	4798      	blx	r3
  }

  return;
 800ad44:	bf00      	nop
 800ad46:	bf00      	nop
}
 800ad48:	3718      	adds	r7, #24
 800ad4a:	46bd      	mov	sp, r7
 800ad4c:	bd80      	pop	{r7, pc}
 800ad4e:	bf00      	nop
 800ad50:	200000b4 	.word	0x200000b4
 800ad54:	200000a8 	.word	0x200000a8
 800ad58:	200000b8 	.word	0x200000b8
 800ad5c:	2000045c 	.word	0x2000045c
 800ad60:	0800adb9 	.word	0x0800adb9
 800ad64:	0800add1 	.word	0x0800add1

0800ad68 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800ad68:	b580      	push	{r7, lr}
 800ad6a:	b082      	sub	sp, #8
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	4603      	mov	r3, r0
 800ad70:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800ad72:	79fb      	ldrb	r3, [r7, #7]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d10b      	bne.n	800ad90 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800ad78:	4b0d      	ldr	r3, [pc, #52]	@ (800adb0 <Cmd_SetStatus+0x48>)
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d003      	beq.n	800ad88 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800ad80:	4b0b      	ldr	r3, [pc, #44]	@ (800adb0 <Cmd_SetStatus+0x48>)
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	2000      	movs	r0, #0
 800ad86:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800ad88:	4b0a      	ldr	r3, [pc, #40]	@ (800adb4 <Cmd_SetStatus+0x4c>)
 800ad8a:	2200      	movs	r2, #0
 800ad8c:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800ad8e:	e00b      	b.n	800ada8 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800ad90:	4b08      	ldr	r3, [pc, #32]	@ (800adb4 <Cmd_SetStatus+0x4c>)
 800ad92:	2201      	movs	r2, #1
 800ad94:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800ad96:	4b06      	ldr	r3, [pc, #24]	@ (800adb0 <Cmd_SetStatus+0x48>)
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d004      	beq.n	800ada8 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800ad9e:	4b04      	ldr	r3, [pc, #16]	@ (800adb0 <Cmd_SetStatus+0x48>)
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	2001      	movs	r0, #1
 800ada4:	4798      	blx	r3
  return;
 800ada6:	bf00      	nop
 800ada8:	bf00      	nop
}
 800adaa:	3708      	adds	r7, #8
 800adac:	46bd      	mov	sp, r7
 800adae:	bd80      	pop	{r7, pc}
 800adb0:	2000047c 	.word	0x2000047c
 800adb4:	200000b0 	.word	0x200000b0

0800adb8 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800adb8:	b580      	push	{r7, lr}
 800adba:	b082      	sub	sp, #8
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800adc0:	2000      	movs	r0, #0
 800adc2:	f7f6 fbb4 	bl	800152e <shci_cmd_resp_release>

  return;
 800adc6:	bf00      	nop
}
 800adc8:	3708      	adds	r7, #8
 800adca:	46bd      	mov	sp, r7
 800adcc:	bd80      	pop	{r7, pc}
	...

0800add0 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800add0:	b580      	push	{r7, lr}
 800add2:	b082      	sub	sp, #8
 800add4:	af00      	add	r7, sp, #0
 800add6:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800add8:	6879      	ldr	r1, [r7, #4]
 800adda:	4805      	ldr	r0, [pc, #20]	@ (800adf0 <TlUserEvtReceived+0x20>)
 800addc:	f000 fb86 	bl	800b4ec <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800ade0:	4803      	ldr	r0, [pc, #12]	@ (800adf0 <TlUserEvtReceived+0x20>)
 800ade2:	f7f6 fb98 	bl	8001516 <shci_notify_asynch_evt>

  return;
 800ade6:	bf00      	nop
}
 800ade8:	3708      	adds	r7, #8
 800adea:	46bd      	mov	sp, r7
 800adec:	bd80      	pop	{r7, pc}
 800adee:	bf00      	nop
 800adf0:	200000a8 	.word	0x200000a8

0800adf4 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800adf4:	b480      	push	{r7}
 800adf6:	b083      	sub	sp, #12
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	4a05      	ldr	r2, [pc, #20]	@ (800ae14 <shci_register_io_bus+0x20>)
 800ae00:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	4a04      	ldr	r2, [pc, #16]	@ (800ae18 <shci_register_io_bus+0x24>)
 800ae06:	611a      	str	r2, [r3, #16]

  return;
 800ae08:	bf00      	nop
}
 800ae0a:	370c      	adds	r7, #12
 800ae0c:	46bd      	mov	sp, r7
 800ae0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae12:	4770      	bx	lr
 800ae14:	0800afb1 	.word	0x0800afb1
 800ae18:	0800b005 	.word	0x0800b005

0800ae1c <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 800ae1c:	b580      	push	{r7, lr}
 800ae1e:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800ae20:	f002 fcde 	bl	800d7e0 <HW_IPCC_Enable>

  return;
 800ae24:	bf00      	nop
}
 800ae26:	bd80      	pop	{r7, pc}

0800ae28 <TL_Init>:


void TL_Init( void )
{
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800ae2c:	4b10      	ldr	r3, [pc, #64]	@ (800ae70 <TL_Init+0x48>)
 800ae2e:	4a11      	ldr	r2, [pc, #68]	@ (800ae74 <TL_Init+0x4c>)
 800ae30:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800ae32:	4b0f      	ldr	r3, [pc, #60]	@ (800ae70 <TL_Init+0x48>)
 800ae34:	4a10      	ldr	r2, [pc, #64]	@ (800ae78 <TL_Init+0x50>)
 800ae36:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800ae38:	4b0d      	ldr	r3, [pc, #52]	@ (800ae70 <TL_Init+0x48>)
 800ae3a:	4a10      	ldr	r2, [pc, #64]	@ (800ae7c <TL_Init+0x54>)
 800ae3c:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800ae3e:	4b0c      	ldr	r3, [pc, #48]	@ (800ae70 <TL_Init+0x48>)
 800ae40:	4a0f      	ldr	r2, [pc, #60]	@ (800ae80 <TL_Init+0x58>)
 800ae42:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 800ae44:	4b0a      	ldr	r3, [pc, #40]	@ (800ae70 <TL_Init+0x48>)
 800ae46:	4a0f      	ldr	r2, [pc, #60]	@ (800ae84 <TL_Init+0x5c>)
 800ae48:	625a      	str	r2, [r3, #36]	@ 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800ae4a:	4b09      	ldr	r3, [pc, #36]	@ (800ae70 <TL_Init+0x48>)
 800ae4c:	4a0e      	ldr	r2, [pc, #56]	@ (800ae88 <TL_Init+0x60>)
 800ae4e:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800ae50:	4b07      	ldr	r3, [pc, #28]	@ (800ae70 <TL_Init+0x48>)
 800ae52:	4a0e      	ldr	r2, [pc, #56]	@ (800ae8c <TL_Init+0x64>)
 800ae54:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800ae56:	4b06      	ldr	r3, [pc, #24]	@ (800ae70 <TL_Init+0x48>)
 800ae58:	4a0d      	ldr	r2, [pc, #52]	@ (800ae90 <TL_Init+0x68>)
 800ae5a:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800ae5c:	4b04      	ldr	r3, [pc, #16]	@ (800ae70 <TL_Init+0x48>)
 800ae5e:	4a0d      	ldr	r2, [pc, #52]	@ (800ae94 <TL_Init+0x6c>)
 800ae60:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800ae62:	4b03      	ldr	r3, [pc, #12]	@ (800ae70 <TL_Init+0x48>)
 800ae64:	4a0c      	ldr	r2, [pc, #48]	@ (800ae98 <TL_Init+0x70>)
 800ae66:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800ae68:	f002 fcce 	bl	800d808 <HW_IPCC_Init>

  return;
 800ae6c:	bf00      	nop
}
 800ae6e:	bd80      	pop	{r7, pc}
 800ae70:	20030000 	.word	0x20030000
 800ae74:	20030028 	.word	0x20030028
 800ae78:	20030048 	.word	0x20030048
 800ae7c:	20030058 	.word	0x20030058
 800ae80:	20030068 	.word	0x20030068
 800ae84:	20030070 	.word	0x20030070
 800ae88:	20030078 	.word	0x20030078
 800ae8c:	20030080 	.word	0x20030080
 800ae90:	2003009c 	.word	0x2003009c
 800ae94:	200300a0 	.word	0x200300a0
 800ae98:	200300ac 	.word	0x200300ac

0800ae9c <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 800ae9c:	b580      	push	{r7, lr}
 800ae9e:	b084      	sub	sp, #16
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 800aea8:	4811      	ldr	r0, [pc, #68]	@ (800aef0 <TL_BLE_Init+0x54>)
 800aeaa:	f000 fac7 	bl	800b43c <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800aeae:	4b11      	ldr	r3, [pc, #68]	@ (800aef4 <TL_BLE_Init+0x58>)
 800aeb0:	685b      	ldr	r3, [r3, #4]
 800aeb2:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	689a      	ldr	r2, [r3, #8]
 800aeb8:	68bb      	ldr	r3, [r7, #8]
 800aeba:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	68da      	ldr	r2, [r3, #12]
 800aec0:	68bb      	ldr	r3, [r7, #8]
 800aec2:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800aec4:	68bb      	ldr	r3, [r7, #8]
 800aec6:	4a0c      	ldr	r2, [pc, #48]	@ (800aef8 <TL_BLE_Init+0x5c>)
 800aec8:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800aeca:	68bb      	ldr	r3, [r7, #8]
 800aecc:	4a08      	ldr	r2, [pc, #32]	@ (800aef0 <TL_BLE_Init+0x54>)
 800aece:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 800aed0:	f002 fcb0 	bl	800d834 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	4a08      	ldr	r2, [pc, #32]	@ (800aefc <TL_BLE_Init+0x60>)
 800aeda:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	685b      	ldr	r3, [r3, #4]
 800aee0:	4a07      	ldr	r2, [pc, #28]	@ (800af00 <TL_BLE_Init+0x64>)
 800aee2:	6013      	str	r3, [r2, #0]

  return 0;
 800aee4:	2300      	movs	r3, #0
}
 800aee6:	4618      	mov	r0, r3
 800aee8:	3710      	adds	r7, #16
 800aeea:	46bd      	mov	sp, r7
 800aeec:	bd80      	pop	{r7, pc}
 800aeee:	bf00      	nop
 800aef0:	200300c8 	.word	0x200300c8
 800aef4:	20030000 	.word	0x20030000
 800aef8:	20030d7c 	.word	0x20030d7c
 800aefc:	2000048c 	.word	0x2000048c
 800af00:	20000490 	.word	0x20000490

0800af04 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 800af04:	b580      	push	{r7, lr}
 800af06:	b082      	sub	sp, #8
 800af08:	af00      	add	r7, sp, #0
 800af0a:	6078      	str	r0, [r7, #4]
 800af0c:	460b      	mov	r3, r1
 800af0e:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800af10:	4b09      	ldr	r3, [pc, #36]	@ (800af38 <TL_BLE_SendCmd+0x34>)
 800af12:	685b      	ldr	r3, [r3, #4]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	2201      	movs	r2, #1
 800af18:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 800af1a:	4b07      	ldr	r3, [pc, #28]	@ (800af38 <TL_BLE_SendCmd+0x34>)
 800af1c:	685b      	ldr	r3, [r3, #4]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	4619      	mov	r1, r3
 800af22:	2001      	movs	r0, #1
 800af24:	f000 f96c 	bl	800b200 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 800af28:	f002 fc8e 	bl	800d848 <HW_IPCC_BLE_SendCmd>

  return 0;
 800af2c:	2300      	movs	r3, #0
}
 800af2e:	4618      	mov	r0, r3
 800af30:	3708      	adds	r7, #8
 800af32:	46bd      	mov	sp, r7
 800af34:	bd80      	pop	{r7, pc}
 800af36:	bf00      	nop
 800af38:	20030000 	.word	0x20030000

0800af3c <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b082      	sub	sp, #8
 800af40:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800af42:	e01c      	b.n	800af7e <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800af44:	1d3b      	adds	r3, r7, #4
 800af46:	4619      	mov	r1, r3
 800af48:	4812      	ldr	r0, [pc, #72]	@ (800af94 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800af4a:	f000 fb16 	bl	800b57a <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	7a5b      	ldrb	r3, [r3, #9]
 800af52:	2b0f      	cmp	r3, #15
 800af54:	d003      	beq.n	800af5e <HW_IPCC_BLE_RxEvtNot+0x22>
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	7a5b      	ldrb	r3, [r3, #9]
 800af5a:	2b0e      	cmp	r3, #14
 800af5c:	d105      	bne.n	800af6a <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	4619      	mov	r1, r3
 800af62:	2002      	movs	r0, #2
 800af64:	f000 f94c 	bl	800b200 <OutputDbgTrace>
 800af68:	e004      	b.n	800af74 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	4619      	mov	r1, r3
 800af6e:	2003      	movs	r0, #3
 800af70:	f000 f946 	bl	800b200 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 800af74:	4b08      	ldr	r3, [pc, #32]	@ (800af98 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	687a      	ldr	r2, [r7, #4]
 800af7a:	4610      	mov	r0, r2
 800af7c:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800af7e:	4805      	ldr	r0, [pc, #20]	@ (800af94 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800af80:	f000 fa6c 	bl	800b45c <LST_is_empty>
 800af84:	4603      	mov	r3, r0
 800af86:	2b00      	cmp	r3, #0
 800af88:	d0dc      	beq.n	800af44 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800af8a:	bf00      	nop
}
 800af8c:	3708      	adds	r7, #8
 800af8e:	46bd      	mov	sp, r7
 800af90:	bd80      	pop	{r7, pc}
 800af92:	bf00      	nop
 800af94:	200300c8 	.word	0x200300c8
 800af98:	2000048c 	.word	0x2000048c

0800af9c <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800af9c:	b580      	push	{r7, lr}
 800af9e:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800afa0:	4b02      	ldr	r3, [pc, #8]	@ (800afac <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	4798      	blx	r3

  return;
 800afa6:	bf00      	nop
}
 800afa8:	bd80      	pop	{r7, pc}
 800afaa:	bf00      	nop
 800afac:	20000490 	.word	0x20000490

0800afb0 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800afb0:	b580      	push	{r7, lr}
 800afb2:	b084      	sub	sp, #16
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800afbc:	480d      	ldr	r0, [pc, #52]	@ (800aff4 <TL_SYS_Init+0x44>)
 800afbe:	f000 fa3d 	bl	800b43c <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800afc2:	4b0d      	ldr	r3, [pc, #52]	@ (800aff8 <TL_SYS_Init+0x48>)
 800afc4:	68db      	ldr	r3, [r3, #12]
 800afc6:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	689a      	ldr	r2, [r3, #8]
 800afcc:	68bb      	ldr	r3, [r7, #8]
 800afce:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800afd0:	68bb      	ldr	r3, [r7, #8]
 800afd2:	4a08      	ldr	r2, [pc, #32]	@ (800aff4 <TL_SYS_Init+0x44>)
 800afd4:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800afd6:	f002 fc59 	bl	800d88c <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	4a07      	ldr	r2, [pc, #28]	@ (800affc <TL_SYS_Init+0x4c>)
 800afe0:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	685b      	ldr	r3, [r3, #4]
 800afe6:	4a06      	ldr	r2, [pc, #24]	@ (800b000 <TL_SYS_Init+0x50>)
 800afe8:	6013      	str	r3, [r2, #0]

  return 0;
 800afea:	2300      	movs	r3, #0
}
 800afec:	4618      	mov	r0, r3
 800afee:	3710      	adds	r7, #16
 800aff0:	46bd      	mov	sp, r7
 800aff2:	bd80      	pop	{r7, pc}
 800aff4:	200300d0 	.word	0x200300d0
 800aff8:	20030000 	.word	0x20030000
 800affc:	20000494 	.word	0x20000494
 800b000:	20000498 	.word	0x20000498

0800b004 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800b004:	b580      	push	{r7, lr}
 800b006:	b082      	sub	sp, #8
 800b008:	af00      	add	r7, sp, #0
 800b00a:	6078      	str	r0, [r7, #4]
 800b00c:	460b      	mov	r3, r1
 800b00e:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800b010:	4b09      	ldr	r3, [pc, #36]	@ (800b038 <TL_SYS_SendCmd+0x34>)
 800b012:	68db      	ldr	r3, [r3, #12]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	2210      	movs	r2, #16
 800b018:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800b01a:	4b07      	ldr	r3, [pc, #28]	@ (800b038 <TL_SYS_SendCmd+0x34>)
 800b01c:	68db      	ldr	r3, [r3, #12]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	4619      	mov	r1, r3
 800b022:	2004      	movs	r0, #4
 800b024:	f000 f8ec 	bl	800b200 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 800b028:	f002 fc3a 	bl	800d8a0 <HW_IPCC_SYS_SendCmd>

  return 0;
 800b02c:	2300      	movs	r3, #0
}
 800b02e:	4618      	mov	r0, r3
 800b030:	3708      	adds	r7, #8
 800b032:	46bd      	mov	sp, r7
 800b034:	bd80      	pop	{r7, pc}
 800b036:	bf00      	nop
 800b038:	20030000 	.word	0x20030000

0800b03c <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800b03c:	b580      	push	{r7, lr}
 800b03e:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800b040:	4b07      	ldr	r3, [pc, #28]	@ (800b060 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800b042:	68db      	ldr	r3, [r3, #12]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	4619      	mov	r1, r3
 800b048:	2005      	movs	r0, #5
 800b04a:	f000 f8d9 	bl	800b200 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800b04e:	4b05      	ldr	r3, [pc, #20]	@ (800b064 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	4a03      	ldr	r2, [pc, #12]	@ (800b060 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800b054:	68d2      	ldr	r2, [r2, #12]
 800b056:	6812      	ldr	r2, [r2, #0]
 800b058:	4610      	mov	r0, r2
 800b05a:	4798      	blx	r3

  return;
 800b05c:	bf00      	nop
}
 800b05e:	bd80      	pop	{r7, pc}
 800b060:	20030000 	.word	0x20030000
 800b064:	20000494 	.word	0x20000494

0800b068 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800b068:	b580      	push	{r7, lr}
 800b06a:	b082      	sub	sp, #8
 800b06c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800b06e:	e00e      	b.n	800b08e <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800b070:	1d3b      	adds	r3, r7, #4
 800b072:	4619      	mov	r1, r3
 800b074:	480b      	ldr	r0, [pc, #44]	@ (800b0a4 <HW_IPCC_SYS_EvtNot+0x3c>)
 800b076:	f000 fa80 	bl	800b57a <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	4619      	mov	r1, r3
 800b07e:	2006      	movs	r0, #6
 800b080:	f000 f8be 	bl	800b200 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 800b084:	4b08      	ldr	r3, [pc, #32]	@ (800b0a8 <HW_IPCC_SYS_EvtNot+0x40>)
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	687a      	ldr	r2, [r7, #4]
 800b08a:	4610      	mov	r0, r2
 800b08c:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800b08e:	4805      	ldr	r0, [pc, #20]	@ (800b0a4 <HW_IPCC_SYS_EvtNot+0x3c>)
 800b090:	f000 f9e4 	bl	800b45c <LST_is_empty>
 800b094:	4603      	mov	r3, r0
 800b096:	2b00      	cmp	r3, #0
 800b098:	d0ea      	beq.n	800b070 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800b09a:	bf00      	nop
}
 800b09c:	3708      	adds	r7, #8
 800b09e:	46bd      	mov	sp, r7
 800b0a0:	bd80      	pop	{r7, pc}
 800b0a2:	bf00      	nop
 800b0a4:	200300d0 	.word	0x200300d0
 800b0a8:	20000498 	.word	0x20000498

0800b0ac <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800b0ac:	b580      	push	{r7, lr}
 800b0ae:	b082      	sub	sp, #8
 800b0b0:	af00      	add	r7, sp, #0
 800b0b2:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800b0b4:	4817      	ldr	r0, [pc, #92]	@ (800b114 <TL_MM_Init+0x68>)
 800b0b6:	f000 f9c1 	bl	800b43c <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800b0ba:	4817      	ldr	r0, [pc, #92]	@ (800b118 <TL_MM_Init+0x6c>)
 800b0bc:	f000 f9be 	bl	800b43c <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800b0c0:	4b16      	ldr	r3, [pc, #88]	@ (800b11c <TL_MM_Init+0x70>)
 800b0c2:	691b      	ldr	r3, [r3, #16]
 800b0c4:	4a16      	ldr	r2, [pc, #88]	@ (800b120 <TL_MM_Init+0x74>)
 800b0c6:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800b0c8:	4b15      	ldr	r3, [pc, #84]	@ (800b120 <TL_MM_Init+0x74>)
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	687a      	ldr	r2, [r7, #4]
 800b0ce:	6892      	ldr	r2, [r2, #8]
 800b0d0:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800b0d2:	4b13      	ldr	r3, [pc, #76]	@ (800b120 <TL_MM_Init+0x74>)
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	687a      	ldr	r2, [r7, #4]
 800b0d8:	68d2      	ldr	r2, [r2, #12]
 800b0da:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800b0dc:	4b10      	ldr	r3, [pc, #64]	@ (800b120 <TL_MM_Init+0x74>)
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	4a0c      	ldr	r2, [pc, #48]	@ (800b114 <TL_MM_Init+0x68>)
 800b0e2:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800b0e4:	4b0e      	ldr	r3, [pc, #56]	@ (800b120 <TL_MM_Init+0x74>)
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	687a      	ldr	r2, [r7, #4]
 800b0ea:	6812      	ldr	r2, [r2, #0]
 800b0ec:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800b0ee:	4b0c      	ldr	r3, [pc, #48]	@ (800b120 <TL_MM_Init+0x74>)
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	687a      	ldr	r2, [r7, #4]
 800b0f4:	6852      	ldr	r2, [r2, #4]
 800b0f6:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800b0f8:	4b09      	ldr	r3, [pc, #36]	@ (800b120 <TL_MM_Init+0x74>)
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	687a      	ldr	r2, [r7, #4]
 800b0fe:	6912      	ldr	r2, [r2, #16]
 800b100:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800b102:	4b07      	ldr	r3, [pc, #28]	@ (800b120 <TL_MM_Init+0x74>)
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	687a      	ldr	r2, [r7, #4]
 800b108:	6952      	ldr	r2, [r2, #20]
 800b10a:	619a      	str	r2, [r3, #24]

  return;
 800b10c:	bf00      	nop
}
 800b10e:	3708      	adds	r7, #8
 800b110:	46bd      	mov	sp, r7
 800b112:	bd80      	pop	{r7, pc}
 800b114:	200300b8 	.word	0x200300b8
 800b118:	20000484 	.word	0x20000484
 800b11c:	20030000 	.word	0x20030000
 800b120:	2000049c 	.word	0x2000049c

0800b124 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800b124:	b580      	push	{r7, lr}
 800b126:	b082      	sub	sp, #8
 800b128:	af00      	add	r7, sp, #0
 800b12a:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800b12c:	6879      	ldr	r1, [r7, #4]
 800b12e:	4807      	ldr	r0, [pc, #28]	@ (800b14c <TL_MM_EvtDone+0x28>)
 800b130:	f000 f9dc 	bl	800b4ec <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800b134:	6879      	ldr	r1, [r7, #4]
 800b136:	2000      	movs	r0, #0
 800b138:	f000 f862 	bl	800b200 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800b13c:	4804      	ldr	r0, [pc, #16]	@ (800b150 <TL_MM_EvtDone+0x2c>)
 800b13e:	f002 fbd5 	bl	800d8ec <HW_IPCC_MM_SendFreeBuf>

  return;
 800b142:	bf00      	nop
}
 800b144:	3708      	adds	r7, #8
 800b146:	46bd      	mov	sp, r7
 800b148:	bd80      	pop	{r7, pc}
 800b14a:	bf00      	nop
 800b14c:	20000484 	.word	0x20000484
 800b150:	0800b155 	.word	0x0800b155

0800b154 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800b154:	b580      	push	{r7, lr}
 800b156:	b082      	sub	sp, #8
 800b158:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800b15a:	e00c      	b.n	800b176 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800b15c:	1d3b      	adds	r3, r7, #4
 800b15e:	4619      	mov	r1, r3
 800b160:	480a      	ldr	r0, [pc, #40]	@ (800b18c <SendFreeBuf+0x38>)
 800b162:	f000 fa0a 	bl	800b57a <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800b166:	4b0a      	ldr	r3, [pc, #40]	@ (800b190 <SendFreeBuf+0x3c>)
 800b168:	691b      	ldr	r3, [r3, #16]
 800b16a:	691b      	ldr	r3, [r3, #16]
 800b16c:	687a      	ldr	r2, [r7, #4]
 800b16e:	4611      	mov	r1, r2
 800b170:	4618      	mov	r0, r3
 800b172:	f000 f9bb 	bl	800b4ec <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800b176:	4805      	ldr	r0, [pc, #20]	@ (800b18c <SendFreeBuf+0x38>)
 800b178:	f000 f970 	bl	800b45c <LST_is_empty>
 800b17c:	4603      	mov	r3, r0
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d0ec      	beq.n	800b15c <SendFreeBuf+0x8>
  }

  return;
 800b182:	bf00      	nop
}
 800b184:	3708      	adds	r7, #8
 800b186:	46bd      	mov	sp, r7
 800b188:	bd80      	pop	{r7, pc}
 800b18a:	bf00      	nop
 800b18c:	20000484 	.word	0x20000484
 800b190:	20030000 	.word	0x20030000

0800b194 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800b194:	b580      	push	{r7, lr}
 800b196:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800b198:	4805      	ldr	r0, [pc, #20]	@ (800b1b0 <TL_TRACES_Init+0x1c>)
 800b19a:	f000 f94f 	bl	800b43c <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800b19e:	4b05      	ldr	r3, [pc, #20]	@ (800b1b4 <TL_TRACES_Init+0x20>)
 800b1a0:	695b      	ldr	r3, [r3, #20]
 800b1a2:	4a03      	ldr	r2, [pc, #12]	@ (800b1b0 <TL_TRACES_Init+0x1c>)
 800b1a4:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800b1a6:	f002 fbd7 	bl	800d958 <HW_IPCC_TRACES_Init>

  return;
 800b1aa:	bf00      	nop
}
 800b1ac:	bd80      	pop	{r7, pc}
 800b1ae:	bf00      	nop
 800b1b0:	200300c0 	.word	0x200300c0
 800b1b4:	20030000 	.word	0x20030000

0800b1b8 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800b1b8:	b580      	push	{r7, lr}
 800b1ba:	b082      	sub	sp, #8
 800b1bc:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800b1be:	e008      	b.n	800b1d2 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800b1c0:	1d3b      	adds	r3, r7, #4
 800b1c2:	4619      	mov	r1, r3
 800b1c4:	4808      	ldr	r0, [pc, #32]	@ (800b1e8 <HW_IPCC_TRACES_EvtNot+0x30>)
 800b1c6:	f000 f9d8 	bl	800b57a <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	4618      	mov	r0, r3
 800b1ce:	f000 f80d 	bl	800b1ec <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800b1d2:	4805      	ldr	r0, [pc, #20]	@ (800b1e8 <HW_IPCC_TRACES_EvtNot+0x30>)
 800b1d4:	f000 f942 	bl	800b45c <LST_is_empty>
 800b1d8:	4603      	mov	r3, r0
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d0f0      	beq.n	800b1c0 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800b1de:	bf00      	nop
}
 800b1e0:	3708      	adds	r7, #8
 800b1e2:	46bd      	mov	sp, r7
 800b1e4:	bd80      	pop	{r7, pc}
 800b1e6:	bf00      	nop
 800b1e8:	200300c0 	.word	0x200300c0

0800b1ec <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 800b1ec:	b480      	push	{r7}
 800b1ee:	b083      	sub	sp, #12
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 800b1f4:	bf00      	nop
 800b1f6:	370c      	adds	r7, #12
 800b1f8:	46bd      	mov	sp, r7
 800b1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1fe:	4770      	bx	lr

0800b200 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800b200:	b480      	push	{r7}
 800b202:	b085      	sub	sp, #20
 800b204:	af00      	add	r7, sp, #0
 800b206:	4603      	mov	r3, r0
 800b208:	6039      	str	r1, [r7, #0]
 800b20a:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 800b20c:	79fb      	ldrb	r3, [r7, #7]
 800b20e:	2b06      	cmp	r3, #6
 800b210:	d845      	bhi.n	800b29e <OutputDbgTrace+0x9e>
 800b212:	a201      	add	r2, pc, #4	@ (adr r2, 800b218 <OutputDbgTrace+0x18>)
 800b214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b218:	0800b235 	.word	0x0800b235
 800b21c:	0800b259 	.word	0x0800b259
 800b220:	0800b25f 	.word	0x0800b25f
 800b224:	0800b273 	.word	0x0800b273
 800b228:	0800b27f 	.word	0x0800b27f
 800b22c:	0800b285 	.word	0x0800b285
 800b230:	0800b293 	.word	0x0800b293
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800b234:	683b      	ldr	r3, [r7, #0]
 800b236:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	7a5b      	ldrb	r3, [r3, #9]
 800b23c:	2bff      	cmp	r3, #255	@ 0xff
 800b23e:	d005      	beq.n	800b24c <OutputDbgTrace+0x4c>
 800b240:	2bff      	cmp	r3, #255	@ 0xff
 800b242:	dc05      	bgt.n	800b250 <OutputDbgTrace+0x50>
 800b244:	2b0e      	cmp	r3, #14
 800b246:	d005      	beq.n	800b254 <OutputDbgTrace+0x54>
 800b248:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800b24a:	e001      	b.n	800b250 <OutputDbgTrace+0x50>
          break;
 800b24c:	bf00      	nop
 800b24e:	e027      	b.n	800b2a0 <OutputDbgTrace+0xa0>
          break;
 800b250:	bf00      	nop
 800b252:	e025      	b.n	800b2a0 <OutputDbgTrace+0xa0>
          break;
 800b254:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800b256:	e023      	b.n	800b2a0 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800b258:	683b      	ldr	r3, [r7, #0]
 800b25a:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800b25c:	e020      	b.n	800b2a0 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800b25e:	683b      	ldr	r3, [r7, #0]
 800b260:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	7a5b      	ldrb	r3, [r3, #9]
 800b266:	2b0e      	cmp	r3, #14
 800b268:	d001      	beq.n	800b26e <OutputDbgTrace+0x6e>
 800b26a:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800b26c:	e000      	b.n	800b270 <OutputDbgTrace+0x70>
          break;
 800b26e:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800b270:	e016      	b.n	800b2a0 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800b272:	683b      	ldr	r3, [r7, #0]
 800b274:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	7a5b      	ldrb	r3, [r3, #9]
 800b27a:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800b27c:	e010      	b.n	800b2a0 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800b27e:	683b      	ldr	r3, [r7, #0]
 800b280:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800b282:	e00d      	b.n	800b2a0 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800b284:	683b      	ldr	r3, [r7, #0]
 800b286:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	7a5b      	ldrb	r3, [r3, #9]
 800b28c:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800b28e:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800b290:	e006      	b.n	800b2a0 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800b292:	683b      	ldr	r3, [r7, #0]
 800b294:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	7a5b      	ldrb	r3, [r3, #9]
 800b29a:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800b29c:	e000      	b.n	800b2a0 <OutputDbgTrace+0xa0>

    default:
      break;
 800b29e:	bf00      	nop
  }

  return;
 800b2a0:	bf00      	nop
}
 800b2a2:	3714      	adds	r7, #20
 800b2a4:	46bd      	mov	sp, r7
 800b2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2aa:	4770      	bx	lr

0800b2ac <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 800b2ac:	b580      	push	{r7, lr}
 800b2ae:	b086      	sub	sp, #24
 800b2b0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b2b2:	f3ef 8310 	mrs	r3, PRIMASK
 800b2b6:	60fb      	str	r3, [r7, #12]
  return(result);
 800b2b8:	68fb      	ldr	r3, [r7, #12]
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  uint8_t* buf;
  uint16_t bufSize;

  BACKUP_PRIMASK();
 800b2ba:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b2bc:	b672      	cpsid	i
}
 800b2be:	bf00      	nop

  DISABLE_IRQ();			/**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  CircularQueue_Remove(&MsgDbgTraceQueue,&bufSize);
 800b2c0:	1cbb      	adds	r3, r7, #2
 800b2c2:	4619      	mov	r1, r3
 800b2c4:	4812      	ldr	r0, [pc, #72]	@ (800b310 <DbgTrace_TxCpltCallback+0x64>)
 800b2c6:	f000 fb9d 	bl	800ba04 <CircularQueue_Remove>

  /* Sense if new data to be sent */
  buf=CircularQueue_Sense(&MsgDbgTraceQueue,&bufSize);
 800b2ca:	1cbb      	adds	r3, r7, #2
 800b2cc:	4619      	mov	r1, r3
 800b2ce:	4810      	ldr	r0, [pc, #64]	@ (800b310 <DbgTrace_TxCpltCallback+0x64>)
 800b2d0:	f000 fc87 	bl	800bbe2 <CircularQueue_Sense>
 800b2d4:	6138      	str	r0, [r7, #16]


  if ( buf != NULL) 
 800b2d6:	693b      	ldr	r3, [r7, #16]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d00c      	beq.n	800b2f6 <DbgTrace_TxCpltCallback+0x4a>
 800b2dc:	697b      	ldr	r3, [r7, #20]
 800b2de:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b2e0:	68bb      	ldr	r3, [r7, #8]
 800b2e2:	f383 8810 	msr	PRIMASK, r3
}
 800b2e6:	bf00      	nop
  {
    RESTORE_PRIMASK();
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 800b2e8:	887b      	ldrh	r3, [r7, #2]
 800b2ea:	4a0a      	ldr	r2, [pc, #40]	@ (800b314 <DbgTrace_TxCpltCallback+0x68>)
 800b2ec:	4619      	mov	r1, r3
 800b2ee:	6938      	ldr	r0, [r7, #16]
 800b2f0:	f7f5 fe3e 	bl	8000f70 <DbgOutputTraces>

  DbgTracePeripheralReady = SET;

  RESTORE_PRIMASK();
#endif
}
 800b2f4:	e008      	b.n	800b308 <DbgTrace_TxCpltCallback+0x5c>
    DbgTracePeripheralReady = SET;
 800b2f6:	4b08      	ldr	r3, [pc, #32]	@ (800b318 <DbgTrace_TxCpltCallback+0x6c>)
 800b2f8:	2201      	movs	r2, #1
 800b2fa:	701a      	strb	r2, [r3, #0]
 800b2fc:	697b      	ldr	r3, [r7, #20]
 800b2fe:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	f383 8810 	msr	PRIMASK, r3
}
 800b306:	bf00      	nop
}
 800b308:	bf00      	nop
 800b30a:	3718      	adds	r7, #24
 800b30c:	46bd      	mov	sp, r7
 800b30e:	bd80      	pop	{r7, pc}
 800b310:	200004a0 	.word	0x200004a0
 800b314:	0800b2ad 	.word	0x0800b2ad
 800b318:	20000011 	.word	0x20000011

0800b31c <_write>:
 * @param	bufsize buffer size
 * @param	...: arguments to be formatted in format string
 * @retval none
 */
size_t _write(int handle, const unsigned char * buf, size_t bufSize)
{
 800b31c:	b580      	push	{r7, lr}
 800b31e:	b084      	sub	sp, #16
 800b320:	af00      	add	r7, sp, #0
 800b322:	60f8      	str	r0, [r7, #12]
 800b324:	60b9      	str	r1, [r7, #8]
 800b326:	607a      	str	r2, [r7, #4]
  return ( DbgTraceWrite(handle, buf, bufSize) );
 800b328:	687a      	ldr	r2, [r7, #4]
 800b32a:	68b9      	ldr	r1, [r7, #8]
 800b32c:	68f8      	ldr	r0, [r7, #12]
 800b32e:	f000 f805 	bl	800b33c <DbgTraceWrite>
 800b332:	4603      	mov	r3, r0
}
 800b334:	4618      	mov	r0, r3
 800b336:	3710      	adds	r7, #16
 800b338:	46bd      	mov	sp, r7
 800b33a:	bd80      	pop	{r7, pc}

0800b33c <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 800b33c:	b580      	push	{r7, lr}
 800b33e:	b08a      	sub	sp, #40	@ 0x28
 800b340:	af00      	add	r7, sp, #0
 800b342:	60f8      	str	r0, [r7, #12]
 800b344:	60b9      	str	r1, [r7, #8]
 800b346:	607a      	str	r2, [r7, #4]
  size_t chars_written = 0;
 800b348:	2300      	movs	r3, #0
 800b34a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b34c:	f3ef 8310 	mrs	r3, PRIMASK
 800b350:	61bb      	str	r3, [r7, #24]
  return(result);
 800b352:	69bb      	ldr	r3, [r7, #24]
  uint8_t* buffer;

  BACKUP_PRIMASK();
 800b354:	623b      	str	r3, [r7, #32]

  /* Ignore flushes */
  if ( handle == -1 )
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b35c:	d102      	bne.n	800b364 <DbgTraceWrite+0x28>
  {
    chars_written = ( size_t ) 0;
 800b35e:	2300      	movs	r3, #0
 800b360:	627b      	str	r3, [r7, #36]	@ 0x24
 800b362:	e037      	b.n	800b3d4 <DbgTraceWrite+0x98>
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	2b01      	cmp	r3, #1
 800b368:	d006      	beq.n	800b378 <DbgTraceWrite+0x3c>
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	2b02      	cmp	r3, #2
 800b36e:	d003      	beq.n	800b378 <DbgTraceWrite+0x3c>
  {
    chars_written = ( size_t ) - 1;
 800b370:	f04f 33ff 	mov.w	r3, #4294967295
 800b374:	627b      	str	r3, [r7, #36]	@ 0x24
 800b376:	e02d      	b.n	800b3d4 <DbgTraceWrite+0x98>
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d02a      	beq.n	800b3d4 <DbgTraceWrite+0x98>
  {
    chars_written = bufSize;
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 800b382:	b672      	cpsid	i
}
 800b384:	bf00      	nop
    /* If queue emepty and TX free, send directly */
    /* CS Start */

#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
    DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
    buffer=CircularQueue_Add(&MsgDbgTraceQueue,(uint8_t*)buf, bufSize,1);
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	b29a      	uxth	r2, r3
 800b38a:	2301      	movs	r3, #1
 800b38c:	68b9      	ldr	r1, [r7, #8]
 800b38e:	4814      	ldr	r0, [pc, #80]	@ (800b3e0 <DbgTraceWrite+0xa4>)
 800b390:	f000 f912 	bl	800b5b8 <CircularQueue_Add>
 800b394:	61f8      	str	r0, [r7, #28]
    if (buffer && DbgTracePeripheralReady)
 800b396:	69fb      	ldr	r3, [r7, #28]
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d015      	beq.n	800b3c8 <DbgTraceWrite+0x8c>
 800b39c:	4b11      	ldr	r3, [pc, #68]	@ (800b3e4 <DbgTraceWrite+0xa8>)
 800b39e:	781b      	ldrb	r3, [r3, #0]
 800b3a0:	b2db      	uxtb	r3, r3
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d010      	beq.n	800b3c8 <DbgTraceWrite+0x8c>
    {
      DbgTracePeripheralReady = RESET;
 800b3a6:	4b0f      	ldr	r3, [pc, #60]	@ (800b3e4 <DbgTraceWrite+0xa8>)
 800b3a8:	2200      	movs	r2, #0
 800b3aa:	701a      	strb	r2, [r3, #0]
 800b3ac:	6a3b      	ldr	r3, [r7, #32]
 800b3ae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b3b0:	697b      	ldr	r3, [r7, #20]
 800b3b2:	f383 8810 	msr	PRIMASK, r3
}
 800b3b6:	bf00      	nop
      RESTORE_PRIMASK();
      DbgOutputTraces((uint8_t*)buffer, bufSize, DbgTrace_TxCpltCallback);
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	b29b      	uxth	r3, r3
 800b3bc:	4a0a      	ldr	r2, [pc, #40]	@ (800b3e8 <DbgTraceWrite+0xac>)
 800b3be:	4619      	mov	r1, r3
 800b3c0:	69f8      	ldr	r0, [r7, #28]
 800b3c2:	f7f5 fdd5 	bl	8000f70 <DbgOutputTraces>
 800b3c6:	e005      	b.n	800b3d4 <DbgTraceWrite+0x98>
 800b3c8:	6a3b      	ldr	r3, [r7, #32]
 800b3ca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b3cc:	693b      	ldr	r3, [r7, #16]
 800b3ce:	f383 8810 	msr	PRIMASK, r3
}
 800b3d2:	bf00      	nop
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
    while (!DbgTracePeripheralReady);
#endif
    /* CS END */
  }
  return ( chars_written );
 800b3d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b3d6:	4618      	mov	r0, r3
 800b3d8:	3728      	adds	r7, #40	@ 0x28
 800b3da:	46bd      	mov	sp, r7
 800b3dc:	bd80      	pop	{r7, pc}
 800b3de:	bf00      	nop
 800b3e0:	200004a0 	.word	0x200004a0
 800b3e4:	20000011 	.word	0x20000011
 800b3e8:	0800b2ad 	.word	0x0800b2ad

0800b3ec <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800b3ec:	b480      	push	{r7}
 800b3ee:	b085      	sub	sp, #20
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	4603      	mov	r3, r0
 800b3f4:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800b3f6:	4b0f      	ldr	r3, [pc, #60]	@ (800b434 <OTP_Read+0x48>)
 800b3f8:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800b3fa:	e002      	b.n	800b402 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	3b08      	subs	r3, #8
 800b400:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	3307      	adds	r3, #7
 800b406:	781b      	ldrb	r3, [r3, #0]
 800b408:	79fa      	ldrb	r2, [r7, #7]
 800b40a:	429a      	cmp	r2, r3
 800b40c:	d003      	beq.n	800b416 <OTP_Read+0x2a>
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	4a09      	ldr	r2, [pc, #36]	@ (800b438 <OTP_Read+0x4c>)
 800b412:	4293      	cmp	r3, r2
 800b414:	d1f2      	bne.n	800b3fc <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	3307      	adds	r3, #7
 800b41a:	781b      	ldrb	r3, [r3, #0]
 800b41c:	79fa      	ldrb	r2, [r7, #7]
 800b41e:	429a      	cmp	r2, r3
 800b420:	d001      	beq.n	800b426 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800b422:	2300      	movs	r3, #0
 800b424:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800b426:	68fb      	ldr	r3, [r7, #12]
}
 800b428:	4618      	mov	r0, r3
 800b42a:	3714      	adds	r7, #20
 800b42c:	46bd      	mov	sp, r7
 800b42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b432:	4770      	bx	lr
 800b434:	1fff73f8 	.word	0x1fff73f8
 800b438:	1fff7000 	.word	0x1fff7000

0800b43c <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800b43c:	b480      	push	{r7}
 800b43e:	b083      	sub	sp, #12
 800b440:	af00      	add	r7, sp, #0
 800b442:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	687a      	ldr	r2, [r7, #4]
 800b448:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	687a      	ldr	r2, [r7, #4]
 800b44e:	605a      	str	r2, [r3, #4]
}
 800b450:	bf00      	nop
 800b452:	370c      	adds	r7, #12
 800b454:	46bd      	mov	sp, r7
 800b456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b45a:	4770      	bx	lr

0800b45c <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800b45c:	b480      	push	{r7}
 800b45e:	b087      	sub	sp, #28
 800b460:	af00      	add	r7, sp, #0
 800b462:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b464:	f3ef 8310 	mrs	r3, PRIMASK
 800b468:	60fb      	str	r3, [r7, #12]
  return(result);
 800b46a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b46c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800b46e:	b672      	cpsid	i
}
 800b470:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	687a      	ldr	r2, [r7, #4]
 800b478:	429a      	cmp	r2, r3
 800b47a:	d102      	bne.n	800b482 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 800b47c:	2301      	movs	r3, #1
 800b47e:	75fb      	strb	r3, [r7, #23]
 800b480:	e001      	b.n	800b486 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 800b482:	2300      	movs	r3, #0
 800b484:	75fb      	strb	r3, [r7, #23]
 800b486:	693b      	ldr	r3, [r7, #16]
 800b488:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b48a:	68bb      	ldr	r3, [r7, #8]
 800b48c:	f383 8810 	msr	PRIMASK, r3
}
 800b490:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800b492:	7dfb      	ldrb	r3, [r7, #23]
}
 800b494:	4618      	mov	r0, r3
 800b496:	371c      	adds	r7, #28
 800b498:	46bd      	mov	sp, r7
 800b49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b49e:	4770      	bx	lr

0800b4a0 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800b4a0:	b480      	push	{r7}
 800b4a2:	b087      	sub	sp, #28
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	6078      	str	r0, [r7, #4]
 800b4a8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b4aa:	f3ef 8310 	mrs	r3, PRIMASK
 800b4ae:	60fb      	str	r3, [r7, #12]
  return(result);
 800b4b0:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b4b2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b4b4:	b672      	cpsid	i
}
 800b4b6:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	681a      	ldr	r2, [r3, #0]
 800b4bc:	683b      	ldr	r3, [r7, #0]
 800b4be:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800b4c0:	683b      	ldr	r3, [r7, #0]
 800b4c2:	687a      	ldr	r2, [r7, #4]
 800b4c4:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	683a      	ldr	r2, [r7, #0]
 800b4ca:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800b4cc:	683b      	ldr	r3, [r7, #0]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	683a      	ldr	r2, [r7, #0]
 800b4d2:	605a      	str	r2, [r3, #4]
 800b4d4:	697b      	ldr	r3, [r7, #20]
 800b4d6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b4d8:	693b      	ldr	r3, [r7, #16]
 800b4da:	f383 8810 	msr	PRIMASK, r3
}
 800b4de:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800b4e0:	bf00      	nop
 800b4e2:	371c      	adds	r7, #28
 800b4e4:	46bd      	mov	sp, r7
 800b4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ea:	4770      	bx	lr

0800b4ec <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800b4ec:	b480      	push	{r7}
 800b4ee:	b087      	sub	sp, #28
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	6078      	str	r0, [r7, #4]
 800b4f4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b4f6:	f3ef 8310 	mrs	r3, PRIMASK
 800b4fa:	60fb      	str	r3, [r7, #12]
  return(result);
 800b4fc:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b4fe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b500:	b672      	cpsid	i
}
 800b502:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800b504:	683b      	ldr	r3, [r7, #0]
 800b506:	687a      	ldr	r2, [r7, #4]
 800b508:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	685a      	ldr	r2, [r3, #4]
 800b50e:	683b      	ldr	r3, [r7, #0]
 800b510:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	683a      	ldr	r2, [r7, #0]
 800b516:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800b518:	683b      	ldr	r3, [r7, #0]
 800b51a:	685b      	ldr	r3, [r3, #4]
 800b51c:	683a      	ldr	r2, [r7, #0]
 800b51e:	601a      	str	r2, [r3, #0]
 800b520:	697b      	ldr	r3, [r7, #20]
 800b522:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b524:	693b      	ldr	r3, [r7, #16]
 800b526:	f383 8810 	msr	PRIMASK, r3
}
 800b52a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800b52c:	bf00      	nop
 800b52e:	371c      	adds	r7, #28
 800b530:	46bd      	mov	sp, r7
 800b532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b536:	4770      	bx	lr

0800b538 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800b538:	b480      	push	{r7}
 800b53a:	b087      	sub	sp, #28
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b540:	f3ef 8310 	mrs	r3, PRIMASK
 800b544:	60fb      	str	r3, [r7, #12]
  return(result);
 800b546:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b548:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b54a:	b672      	cpsid	i
}
 800b54c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	685b      	ldr	r3, [r3, #4]
 800b552:	687a      	ldr	r2, [r7, #4]
 800b554:	6812      	ldr	r2, [r2, #0]
 800b556:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	687a      	ldr	r2, [r7, #4]
 800b55e:	6852      	ldr	r2, [r2, #4]
 800b560:	605a      	str	r2, [r3, #4]
 800b562:	697b      	ldr	r3, [r7, #20]
 800b564:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b566:	693b      	ldr	r3, [r7, #16]
 800b568:	f383 8810 	msr	PRIMASK, r3
}
 800b56c:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800b56e:	bf00      	nop
 800b570:	371c      	adds	r7, #28
 800b572:	46bd      	mov	sp, r7
 800b574:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b578:	4770      	bx	lr

0800b57a <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800b57a:	b580      	push	{r7, lr}
 800b57c:	b086      	sub	sp, #24
 800b57e:	af00      	add	r7, sp, #0
 800b580:	6078      	str	r0, [r7, #4]
 800b582:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b584:	f3ef 8310 	mrs	r3, PRIMASK
 800b588:	60fb      	str	r3, [r7, #12]
  return(result);
 800b58a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b58c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b58e:	b672      	cpsid	i
}
 800b590:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	681a      	ldr	r2, [r3, #0]
 800b596:	683b      	ldr	r3, [r7, #0]
 800b598:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	4618      	mov	r0, r3
 800b5a0:	f7ff ffca 	bl	800b538 <LST_remove_node>
 800b5a4:	697b      	ldr	r3, [r7, #20]
 800b5a6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b5a8:	693b      	ldr	r3, [r7, #16]
 800b5aa:	f383 8810 	msr	PRIMASK, r3
}
 800b5ae:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800b5b0:	bf00      	nop
 800b5b2:	3718      	adds	r7, #24
 800b5b4:	46bd      	mov	sp, r7
 800b5b6:	bd80      	pop	{r7, pc}

0800b5b8 <CircularQueue_Add>:
  * @param  elementSize:  Size of element to be added to the queue. Only used if the queue manage variable size elements
  * @param  nbElements:  number of elements in the in buffer pointed by x
  * @retval  pointer on last element just added to the queue, NULL if the element to be added do not fit in the queue (too big)
  */
uint8_t* CircularQueue_Add(queue_t *q, uint8_t* x, uint16_t elementSize, uint32_t nbElements)
{
 800b5b8:	b580      	push	{r7, lr}
 800b5ba:	b08e      	sub	sp, #56	@ 0x38
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	60f8      	str	r0, [r7, #12]
 800b5c0:	60b9      	str	r1, [r7, #8]
 800b5c2:	603b      	str	r3, [r7, #0]
 800b5c4:	4613      	mov	r3, r2
 800b5c6:	80fb      	strh	r3, [r7, #6]

  uint8_t* ptr = NULL;                      /* fct return ptr to the element freshly added, if no room fct return NULL */
 800b5c8:	2300      	movs	r3, #0
 800b5ca:	623b      	str	r3, [r7, #32]
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 800b5cc:	2300      	movs	r3, #0
 800b5ce:	86fb      	strh	r3, [r7, #54]	@ 0x36
  uint8_t  elemSizeStorageRoom  = 0 ;       /* Indicate the header (which contain only size) of element in case of varaibale size element (q->elementsize == 0) */
 800b5d0:	2300      	movs	r3, #0
 800b5d2:	77fb      	strb	r3, [r7, #31]
  uint32_t curBuffPosition;                  /* the current position in the queue buffer */
  uint32_t i;                               /* loop counter */
  uint32_t NbBytesToCopy = 0, NbCopiedBytes = 0 ; /* Indicators for copying bytes in queue */
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b5d8:	2300      	movs	r3, #0
 800b5da:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t eob_free_size;                         /* Eof End of Quque Buffer Free Size */
  uint8_t  wrap_will_occur = 0;                   /* indicate if a wrap around will occurs */
 800b5dc:	2300      	movs	r3, #0
 800b5de:	77bb      	strb	r3, [r7, #30]
  uint8_t  wrapped_element_eob_size;              /* In case of Wrap around, indicate size of parta of element that fit at thened of the queuue  buffer */
  uint16_t overhead = 0;                          /* In case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG or CIRCULAR_QUEUE_NO_WRAP_FLAG options, 
 800b5e0:	2300      	movs	r3, #0
 800b5e2:	83bb      	strh	r3, [r7, #28]
                                                     indcate the size overhead that will be generated by adding the element with wrap management (split or no wrap ) */ 
  
  
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	891b      	ldrh	r3, [r3, #8]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d101      	bne.n	800b5f0 <CircularQueue_Add+0x38>
 800b5ec:	2302      	movs	r3, #2
 800b5ee:	e000      	b.n	800b5f2 <CircularQueue_Add+0x3a>
 800b5f0:	2300      	movs	r3, #0
 800b5f2:	77fb      	strb	r3, [r7, #31]
  /* retrieve the size of last element sored: the value stored at the beginning of the queue element if element size is variable otherwise take it from fixed element Size member */
  if (q->byteCount)
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	695b      	ldr	r3, [r3, #20]
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d029      	beq.n	800b650 <CircularQueue_Add+0x98>
  {
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	891b      	ldrh	r3, [r3, #8]
 800b600:	2b00      	cmp	r3, #0
 800b602:	d122      	bne.n	800b64a <CircularQueue_Add+0x92>
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	681a      	ldr	r2, [r3, #0]
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	691b      	ldr	r3, [r3, #16]
 800b60c:	4413      	add	r3, r2
 800b60e:	781b      	ldrb	r3, [r3, #0]
 800b610:	4618      	mov	r0, r3
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	681a      	ldr	r2, [r3, #0]
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	691b      	ldr	r3, [r3, #16]
 800b61a:	1c59      	adds	r1, r3, #1
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	685b      	ldr	r3, [r3, #4]
 800b620:	4299      	cmp	r1, r3
 800b622:	d306      	bcc.n	800b632 <CircularQueue_Add+0x7a>
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	6919      	ldr	r1, [r3, #16]
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	685b      	ldr	r3, [r3, #4]
 800b62c:	1acb      	subs	r3, r1, r3
 800b62e:	3301      	adds	r3, #1
 800b630:	e002      	b.n	800b638 <CircularQueue_Add+0x80>
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	691b      	ldr	r3, [r3, #16]
 800b636:	3301      	adds	r3, #1
 800b638:	4413      	add	r3, r2
 800b63a:	781b      	ldrb	r3, [r3, #0]
 800b63c:	021b      	lsls	r3, r3, #8
 800b63e:	b29b      	uxth	r3, r3
 800b640:	4403      	add	r3, r0
 800b642:	b29b      	uxth	r3, r3
 800b644:	3302      	adds	r3, #2
 800b646:	b29b      	uxth	r3, r3
 800b648:	e001      	b.n	800b64e <CircularQueue_Add+0x96>
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	891b      	ldrh	r3, [r3, #8]
 800b64e:	86fb      	strh	r3, [r7, #54]	@ 0x36
  }
  /* if queue element have fixed size , reset the elementSize arg with fixed element size value */
  if (q->elementSize > 0)               
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	891b      	ldrh	r3, [r3, #8]
 800b654:	2b00      	cmp	r3, #0
 800b656:	d002      	beq.n	800b65e <CircularQueue_Add+0xa6>
  {
    elementSize = q->elementSize;
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	891b      	ldrh	r3, [r3, #8]
 800b65c:	80fb      	strh	r3, [r7, #6]
  }

   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	691a      	ldr	r2, [r3, #16]
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	68db      	ldr	r3, [r3, #12]
 800b666:	429a      	cmp	r2, r3
 800b668:	d307      	bcc.n	800b67a <CircularQueue_Add+0xc2>
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	685a      	ldr	r2, [r3, #4]
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	6919      	ldr	r1, [r3, #16]
 800b672:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800b674:	440b      	add	r3, r1
 800b676:	1ad3      	subs	r3, r2, r3
 800b678:	e000      	b.n	800b67c <CircularQueue_Add+0xc4>
 800b67a:	2300      	movs	r3, #0
 800b67c:	61bb      	str	r3, [r7, #24]

   /* check how many bytes of wrapped element (if anay) are at end of buffer */
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 800b67e:	88fa      	ldrh	r2, [r7, #6]
 800b680:	7ffb      	ldrb	r3, [r7, #31]
 800b682:	4413      	add	r3, r2
 800b684:	461a      	mov	r2, r3
 800b686:	683b      	ldr	r3, [r7, #0]
 800b688:	fb02 f303 	mul.w	r3, r2, r3
 800b68c:	69ba      	ldr	r2, [r7, #24]
 800b68e:	429a      	cmp	r2, r3
 800b690:	d80b      	bhi.n	800b6aa <CircularQueue_Add+0xf2>
 800b692:	88fa      	ldrh	r2, [r7, #6]
 800b694:	7ffb      	ldrb	r3, [r7, #31]
 800b696:	4413      	add	r3, r2
 800b698:	461a      	mov	r2, r3
 800b69a:	69bb      	ldr	r3, [r7, #24]
 800b69c:	fbb3 f1f2 	udiv	r1, r3, r2
 800b6a0:	fb01 f202 	mul.w	r2, r1, r2
 800b6a4:	1a9b      	subs	r3, r3, r2
 800b6a6:	b2db      	uxtb	r3, r3
 800b6a8:	e000      	b.n	800b6ac <CircularQueue_Add+0xf4>
 800b6aa:	2300      	movs	r3, #0
 800b6ac:	75fb      	strb	r3, [r7, #23]
   wrap_will_occur  = wrapped_element_eob_size > elemSizeStorageRoom;
 800b6ae:	7dfa      	ldrb	r2, [r7, #23]
 800b6b0:	7ffb      	ldrb	r3, [r7, #31]
 800b6b2:	429a      	cmp	r2, r3
 800b6b4:	bf8c      	ite	hi
 800b6b6:	2301      	movhi	r3, #1
 800b6b8:	2300      	movls	r3, #0
 800b6ba:	b2db      	uxtb	r3, r3
 800b6bc:	77bb      	strb	r3, [r7, #30]

   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 800b6be:	7fbb      	ldrb	r3, [r7, #30]
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d008      	beq.n	800b6d6 <CircularQueue_Add+0x11e>
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	7f1b      	ldrb	r3, [r3, #28]
 800b6c8:	f003 0301 	and.w	r3, r3, #1
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d002      	beq.n	800b6d6 <CircularQueue_Add+0x11e>
 800b6d0:	7dfb      	ldrb	r3, [r7, #23]
 800b6d2:	b29b      	uxth	r3, r3
 800b6d4:	e000      	b.n	800b6d8 <CircularQueue_Add+0x120>
 800b6d6:	8bbb      	ldrh	r3, [r7, #28]
 800b6d8:	83bb      	strh	r3, [r7, #28]
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ? elemSizeStorageRoom  : overhead;
 800b6da:	7fbb      	ldrb	r3, [r7, #30]
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d008      	beq.n	800b6f2 <CircularQueue_Add+0x13a>
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	7f1b      	ldrb	r3, [r3, #28]
 800b6e4:	f003 0302 	and.w	r3, r3, #2
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d002      	beq.n	800b6f2 <CircularQueue_Add+0x13a>
 800b6ec:	7ffb      	ldrb	r3, [r7, #31]
 800b6ee:	b29b      	uxth	r3, r3
 800b6f0:	e000      	b.n	800b6f4 <CircularQueue_Add+0x13c>
 800b6f2:	8bbb      	ldrh	r3, [r7, #28]
 800b6f4:	83bb      	strh	r3, [r7, #28]
   
   
  /* Store now the elements if ennough room for all elements */
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 800b6f6:	88fb      	ldrh	r3, [r7, #6]
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	f000 817e 	beq.w	800b9fa <CircularQueue_Add+0x442>
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	695a      	ldr	r2, [r3, #20]
 800b702:	88f9      	ldrh	r1, [r7, #6]
 800b704:	7ffb      	ldrb	r3, [r7, #31]
 800b706:	440b      	add	r3, r1
 800b708:	4619      	mov	r1, r3
 800b70a:	683b      	ldr	r3, [r7, #0]
 800b70c:	fb01 f303 	mul.w	r3, r1, r3
 800b710:	441a      	add	r2, r3
 800b712:	8bbb      	ldrh	r3, [r7, #28]
 800b714:	441a      	add	r2, r3
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	685b      	ldr	r3, [r3, #4]
 800b71a:	429a      	cmp	r2, r3
 800b71c:	f200 816d 	bhi.w	800b9fa <CircularQueue_Add+0x442>
  { 
    /* loop to add all elements  */
    for (i=0; i < nbElements; i++) 
 800b720:	2300      	movs	r3, #0
 800b722:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b724:	e14a      	b.n	800b9bc <CircularQueue_Add+0x404>
    {
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	691a      	ldr	r2, [r3, #16]
 800b72a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800b72c:	441a      	add	r2, r3
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	685b      	ldr	r3, [r3, #4]
 800b732:	429a      	cmp	r2, r3
 800b734:	d307      	bcc.n	800b746 <CircularQueue_Add+0x18e>
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	691a      	ldr	r2, [r3, #16]
 800b73a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800b73c:	441a      	add	r2, r3
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	685b      	ldr	r3, [r3, #4]
 800b742:	1ad3      	subs	r3, r2, r3
 800b744:	e003      	b.n	800b74e <CircularQueue_Add+0x196>
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	691a      	ldr	r2, [r3, #16]
 800b74a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800b74c:	4413      	add	r3, r2
 800b74e:	68fa      	ldr	r2, [r7, #12]
 800b750:	6113      	str	r3, [r2, #16]
      curBuffPosition = q->last;
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	691b      	ldr	r3, [r3, #16]
 800b756:	633b      	str	r3, [r7, #48]	@ 0x30
      
      /* store the element  */
      /* store first the element size if element size is variable */
      if (q->elementSize == 0) 
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	891b      	ldrh	r3, [r3, #8]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d130      	bne.n	800b7c2 <CircularQueue_Add+0x20a>
      {
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	681a      	ldr	r2, [r3, #0]
 800b764:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b766:	1c59      	adds	r1, r3, #1
 800b768:	6339      	str	r1, [r7, #48]	@ 0x30
 800b76a:	4413      	add	r3, r2
 800b76c:	88fa      	ldrh	r2, [r7, #6]
 800b76e:	b2d2      	uxtb	r2, r2
 800b770:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	685b      	ldr	r3, [r3, #4]
 800b776:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b778:	429a      	cmp	r2, r3
 800b77a:	d304      	bcc.n	800b786 <CircularQueue_Add+0x1ce>
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	685b      	ldr	r3, [r3, #4]
 800b780:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b782:	1ad3      	subs	r3, r2, r3
 800b784:	e000      	b.n	800b788 <CircularQueue_Add+0x1d0>
 800b786:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b788:	633b      	str	r3, [r7, #48]	@ 0x30
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 800b78a:	88fb      	ldrh	r3, [r7, #6]
 800b78c:	0a1b      	lsrs	r3, r3, #8
 800b78e:	b298      	uxth	r0, r3
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	681a      	ldr	r2, [r3, #0]
 800b794:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b796:	1c59      	adds	r1, r3, #1
 800b798:	6339      	str	r1, [r7, #48]	@ 0x30
 800b79a:	4413      	add	r3, r2
 800b79c:	b2c2      	uxtb	r2, r0
 800b79e:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	685b      	ldr	r3, [r3, #4]
 800b7a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b7a6:	429a      	cmp	r2, r3
 800b7a8:	d304      	bcc.n	800b7b4 <CircularQueue_Add+0x1fc>
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	685b      	ldr	r3, [r3, #4]
 800b7ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b7b0:	1ad3      	subs	r3, r2, r3
 800b7b2:	e000      	b.n	800b7b6 <CircularQueue_Add+0x1fe>
 800b7b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7b6:	633b      	str	r3, [r7, #48]	@ 0x30
        q->byteCount += 2;
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	695b      	ldr	r3, [r3, #20]
 800b7bc:	1c9a      	adds	r2, r3, #2
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	615a      	str	r2, [r3, #20]
      }
      
      /* Identify number of bytes of copy takeing account possible wrap, in this case NbBytesToCopy will contains size that fit at end of the queue buffer */
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 800b7c2:	88fa      	ldrh	r2, [r7, #6]
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	6859      	ldr	r1, [r3, #4]
 800b7c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7ca:	1acb      	subs	r3, r1, r3
 800b7cc:	4293      	cmp	r3, r2
 800b7ce:	bf28      	it	cs
 800b7d0:	4613      	movcs	r3, r2
 800b7d2:	62bb      	str	r3, [r7, #40]	@ 0x28
      /* check if no wrap (NbBytesToCopy == elementSize) or if Wrap and no spsicf option; 
         In this case part of data will copied at the end of the buffer and the rest a the beginning */
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
 800b7d4:	88fb      	ldrh	r3, [r7, #6]
 800b7d6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b7d8:	429a      	cmp	r2, r3
 800b7da:	d007      	beq.n	800b7ec <CircularQueue_Add+0x234>
 800b7dc:	88fb      	ldrh	r3, [r7, #6]
 800b7de:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b7e0:	429a      	cmp	r2, r3
 800b7e2:	d225      	bcs.n	800b830 <CircularQueue_Add+0x278>
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	7f1b      	ldrb	r3, [r3, #28]
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d121      	bne.n	800b830 <CircularQueue_Add+0x278>
      {
        /* Copy First part (or emtire buffer ) from current position up to the end of the buffer queue (or before if enough room)  */
        memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	681a      	ldr	r2, [r3, #0]
 800b7f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7f2:	18d0      	adds	r0, r2, r3
 800b7f4:	88fb      	ldrh	r3, [r7, #6]
 800b7f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b7f8:	fb02 f303 	mul.w	r3, r2, r3
 800b7fc:	68ba      	ldr	r2, [r7, #8]
 800b7fe:	4413      	add	r3, r2
 800b800:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b802:	4619      	mov	r1, r3
 800b804:	f002 fdc1 	bl	800e38a <memcpy>
        /* Adjust bytes count */
        q->byteCount += NbBytesToCopy;
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	695a      	ldr	r2, [r3, #20]
 800b80c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b80e:	441a      	add	r2, r3
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	615a      	str	r2, [r3, #20]
        /* Wrap */
        curBuffPosition = 0; 
 800b814:	2300      	movs	r3, #0
 800b816:	633b      	str	r3, [r7, #48]	@ 0x30
        /* set NbCopiedBytes bytes with  ampount copied */
        NbCopiedBytes = NbBytesToCopy;
 800b818:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b81a:	627b      	str	r3, [r7, #36]	@ 0x24
        /* set the rest to copy if wrao , if no wrap will be 0 */
        NbBytesToCopy = elementSize - NbBytesToCopy;
 800b81c:	88fa      	ldrh	r2, [r7, #6]
 800b81e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b820:	1ad3      	subs	r3, r2, r3
 800b822:	62bb      	str	r3, [r7, #40]	@ 0x28
        /* set the current element Size, will be used to calaculate next last position at beginning of loop */
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 800b824:	7ffb      	ldrb	r3, [r7, #31]
 800b826:	b29a      	uxth	r2, r3
 800b828:	88fb      	ldrh	r3, [r7, #6]
 800b82a:	4413      	add	r3, r2
 800b82c:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800b82e:	e0a4      	b.n	800b97a <CircularQueue_Add+0x3c2>
      }
      else if (NbBytesToCopy)  /* We have a wrap  to manage */
 800b830:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b832:	2b00      	cmp	r3, #0
 800b834:	f000 80a1 	beq.w	800b97a <CircularQueue_Add+0x3c2>
      {
       /* case of CIRCULAR_QUEUE_NO_WRAP_FLAG option */
         if (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	7f1b      	ldrb	r3, [r3, #28]
 800b83c:	f003 0301 	and.w	r3, r3, #1
 800b840:	2b00      	cmp	r3, #0
 800b842:	d03a      	beq.n	800b8ba <CircularQueue_Add+0x302>
        {
          /* if element size are variable and NO_WRAP option, Invalidate end of buffer setting 0xFFFF size*/
          if (q->elementSize == 0)
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	891b      	ldrh	r3, [r3, #8]
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d10d      	bne.n	800b868 <CircularQueue_Add+0x2b0>
          {
             q->qBuff[curBuffPosition-2] = 0xFF;
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	681a      	ldr	r2, [r3, #0]
 800b850:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b852:	3b02      	subs	r3, #2
 800b854:	4413      	add	r3, r2
 800b856:	22ff      	movs	r2, #255	@ 0xff
 800b858:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = 0xFF;
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	681a      	ldr	r2, [r3, #0]
 800b85e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b860:	3b01      	subs	r3, #1
 800b862:	4413      	add	r3, r2
 800b864:	22ff      	movs	r2, #255	@ 0xff
 800b866:	701a      	strb	r2, [r3, #0]
          }
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	695a      	ldr	r2, [r3, #20]
 800b86c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b86e:	441a      	add	r2, r3
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	615a      	str	r2, [r3, #20]
          /* No bytes coped a the end of buffer */
          NbCopiedBytes = 0;
 800b874:	2300      	movs	r3, #0
 800b876:	627b      	str	r3, [r7, #36]	@ 0x24
          /* all element to be copied at the begnning of buffer */
          NbBytesToCopy = elementSize; 
 800b878:	88fb      	ldrh	r3, [r7, #6]
 800b87a:	62bb      	str	r3, [r7, #40]	@ 0x28
          /* Wrap */
          curBuffPosition = 0; 
 800b87c:	2300      	movs	r3, #0
 800b87e:	633b      	str	r3, [r7, #48]	@ 0x30
          /* if variable size element, invalidate end of buffer setting OxFFFF in element header (size) */
          if (q->elementSize == 0)
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	891b      	ldrh	r3, [r3, #8]
 800b884:	2b00      	cmp	r3, #0
 800b886:	d16f      	bne.n	800b968 <CircularQueue_Add+0x3b0>
          {
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	681a      	ldr	r2, [r3, #0]
 800b88c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b88e:	1c59      	adds	r1, r3, #1
 800b890:	6339      	str	r1, [r7, #48]	@ 0x30
 800b892:	4413      	add	r3, r2
 800b894:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b896:	b2d2      	uxtb	r2, r2
 800b898:	701a      	strb	r2, [r3, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800b89a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b89c:	0a18      	lsrs	r0, r3, #8
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	681a      	ldr	r2, [r3, #0]
 800b8a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8a4:	1c59      	adds	r1, r3, #1
 800b8a6:	6339      	str	r1, [r7, #48]	@ 0x30
 800b8a8:	4413      	add	r3, r2
 800b8aa:	b2c2      	uxtb	r2, r0
 800b8ac:	701a      	strb	r2, [r3, #0]
            q->byteCount += 2;   
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	695b      	ldr	r3, [r3, #20]
 800b8b2:	1c9a      	adds	r2, r3, #2
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	615a      	str	r2, [r3, #20]
 800b8b8:	e056      	b.n	800b968 <CircularQueue_Add+0x3b0>
          } 
           
        }
        /* case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG option */
        else if (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	7f1b      	ldrb	r3, [r3, #28]
 800b8be:	f003 0302 	and.w	r3, r3, #2
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d050      	beq.n	800b968 <CircularQueue_Add+0x3b0>
        {
          if (q->elementSize == 0)
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	891b      	ldrh	r3, [r3, #8]
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d14a      	bne.n	800b964 <CircularQueue_Add+0x3ac>
          {
            /* reset the size of current element to the nb bytes fitting at the end of buffer */
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	681a      	ldr	r2, [r3, #0]
 800b8d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8d4:	3b02      	subs	r3, #2
 800b8d6:	4413      	add	r3, r2
 800b8d8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b8da:	b2d2      	uxtb	r2, r2
 800b8dc:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800b8de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8e0:	0a19      	lsrs	r1, r3, #8
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	681a      	ldr	r2, [r3, #0]
 800b8e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8e8:	3b01      	subs	r3, #1
 800b8ea:	4413      	add	r3, r2
 800b8ec:	b2ca      	uxtb	r2, r1
 800b8ee:	701a      	strb	r2, [r3, #0]
             /* copy the bytes */ 
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	681a      	ldr	r2, [r3, #0]
 800b8f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8f6:	18d0      	adds	r0, r2, r3
 800b8f8:	88fb      	ldrh	r3, [r7, #6]
 800b8fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b8fc:	fb02 f303 	mul.w	r3, r2, r3
 800b900:	68ba      	ldr	r2, [r7, #8]
 800b902:	4413      	add	r3, r2
 800b904:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b906:	4619      	mov	r1, r3
 800b908:	f002 fd3f 	bl	800e38a <memcpy>
             q->byteCount += NbBytesToCopy; 
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	695a      	ldr	r2, [r3, #20]
 800b910:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b912:	441a      	add	r2, r3
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	615a      	str	r2, [r3, #20]
             /* set the number of copied bytes */
             NbCopiedBytes = NbBytesToCopy;             
 800b918:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b91a:	627b      	str	r3, [r7, #36]	@ 0x24
             /* set rest of data to be copied to begnning of buffer */
             NbBytesToCopy = elementSize - NbBytesToCopy;
 800b91c:	88fa      	ldrh	r2, [r7, #6]
 800b91e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b920:	1ad3      	subs	r3, r2, r3
 800b922:	62bb      	str	r3, [r7, #40]	@ 0x28
             /* one element more dur to split in 2 elements */
             q->elementCount++;
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	699b      	ldr	r3, [r3, #24]
 800b928:	1c5a      	adds	r2, r3, #1
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	619a      	str	r2, [r3, #24]
             /* Wrap */
             curBuffPosition = 0; 
 800b92e:	2300      	movs	r3, #0
 800b930:	633b      	str	r3, [r7, #48]	@ 0x30
             /* Set new size for rest of data */
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	681a      	ldr	r2, [r3, #0]
 800b936:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b938:	1c59      	adds	r1, r3, #1
 800b93a:	6339      	str	r1, [r7, #48]	@ 0x30
 800b93c:	4413      	add	r3, r2
 800b93e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b940:	b2d2      	uxtb	r2, r2
 800b942:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800b944:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b946:	0a18      	lsrs	r0, r3, #8
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	681a      	ldr	r2, [r3, #0]
 800b94c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b94e:	1c59      	adds	r1, r3, #1
 800b950:	6339      	str	r1, [r7, #48]	@ 0x30
 800b952:	4413      	add	r3, r2
 800b954:	b2c2      	uxtb	r2, r0
 800b956:	701a      	strb	r2, [r3, #0]
             q->byteCount += 2;              
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	695b      	ldr	r3, [r3, #20]
 800b95c:	1c9a      	adds	r2, r3, #2
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	615a      	str	r2, [r3, #20]
 800b962:	e001      	b.n	800b968 <CircularQueue_Add+0x3b0>
          else
          {
            /* Should not occur */
            /* can not manage split Flag on Fixed size element */
            /* Buffer is corrupted */
            return NULL;
 800b964:	2300      	movs	r3, #0
 800b966:	e049      	b.n	800b9fc <CircularQueue_Add+0x444>
          }
        }
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 800b968:	7ffb      	ldrb	r3, [r7, #31]
 800b96a:	b29a      	uxth	r2, r3
 800b96c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b96e:	b29b      	uxth	r3, r3
 800b970:	4413      	add	r3, r2
 800b972:	86fb      	strh	r3, [r7, #54]	@ 0x36
        q->last = 0;        
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	2200      	movs	r2, #0
 800b978:	611a      	str	r2, [r3, #16]
      }  
      
      /* some remaining byte to copy */
      if (NbBytesToCopy)      
 800b97a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d015      	beq.n	800b9ac <CircularQueue_Add+0x3f4>
      {
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	681a      	ldr	r2, [r3, #0]
 800b984:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b986:	18d0      	adds	r0, r2, r3
 800b988:	88fb      	ldrh	r3, [r7, #6]
 800b98a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b98c:	fb03 f202 	mul.w	r2, r3, r2
 800b990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b992:	4413      	add	r3, r2
 800b994:	68ba      	ldr	r2, [r7, #8]
 800b996:	4413      	add	r3, r2
 800b998:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b99a:	4619      	mov	r1, r3
 800b99c:	f002 fcf5 	bl	800e38a <memcpy>
        q->byteCount += NbBytesToCopy;
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	695a      	ldr	r2, [r3, #20]
 800b9a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9a6:	441a      	add	r2, r3
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	615a      	str	r2, [r3, #20]
      }      
      
      /* One more element */
      q->elementCount++;
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	699b      	ldr	r3, [r3, #24]
 800b9b0:	1c5a      	adds	r2, r3, #1
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	619a      	str	r2, [r3, #24]
    for (i=0; i < nbElements; i++) 
 800b9b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9b8:	3301      	adds	r3, #1
 800b9ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b9bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b9be:	683b      	ldr	r3, [r7, #0]
 800b9c0:	429a      	cmp	r2, r3
 800b9c2:	f4ff aeb0 	bcc.w	800b726 <CircularQueue_Add+0x16e>
    }
    
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	681a      	ldr	r2, [r3, #0]
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	6919      	ldr	r1, [r3, #16]
 800b9ce:	7ffb      	ldrb	r3, [r7, #31]
 800b9d0:	4419      	add	r1, r3
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	685b      	ldr	r3, [r3, #4]
 800b9d6:	4299      	cmp	r1, r3
 800b9d8:	d307      	bcc.n	800b9ea <CircularQueue_Add+0x432>
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	6919      	ldr	r1, [r3, #16]
 800b9de:	7ffb      	ldrb	r3, [r7, #31]
 800b9e0:	4419      	add	r1, r3
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	685b      	ldr	r3, [r3, #4]
 800b9e6:	1acb      	subs	r3, r1, r3
 800b9e8:	e003      	b.n	800b9f2 <CircularQueue_Add+0x43a>
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	6919      	ldr	r1, [r3, #16]
 800b9ee:	7ffb      	ldrb	r3, [r7, #31]
 800b9f0:	440b      	add	r3, r1
 800b9f2:	4413      	add	r3, r2
 800b9f4:	623b      	str	r3, [r7, #32]
  /* for Breakpoint only...to remove */
  else
  {
    return NULL;
  }
  return ptr;
 800b9f6:	6a3b      	ldr	r3, [r7, #32]
 800b9f8:	e000      	b.n	800b9fc <CircularQueue_Add+0x444>
    return NULL;
 800b9fa:	2300      	movs	r3, #0
}
 800b9fc:	4618      	mov	r0, r3
 800b9fe:	3738      	adds	r7, #56	@ 0x38
 800ba00:	46bd      	mov	sp, r7
 800ba02:	bd80      	pop	{r7, pc}

0800ba04 <CircularQueue_Remove>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize: Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on removed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Remove(queue_t *q, uint16_t* elementSize)
{
 800ba04:	b480      	push	{r7}
 800ba06:	b085      	sub	sp, #20
 800ba08:	af00      	add	r7, sp, #0
 800ba0a:	6078      	str	r0, [r7, #4]
 800ba0c:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800ba0e:	2300      	movs	r3, #0
 800ba10:	727b      	strb	r3, [r7, #9]
  uint8_t* ptr= NULL;
 800ba12:	2300      	movs	r3, #0
 800ba14:	60fb      	str	r3, [r7, #12]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	891b      	ldrh	r3, [r3, #8]
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d101      	bne.n	800ba22 <CircularQueue_Remove+0x1e>
 800ba1e:	2302      	movs	r3, #2
 800ba20:	e000      	b.n	800ba24 <CircularQueue_Remove+0x20>
 800ba22:	2300      	movs	r3, #0
 800ba24:	727b      	strb	r3, [r7, #9]
  uint16_t eltSize = 0;
 800ba26:	2300      	movs	r3, #0
 800ba28:	817b      	strh	r3, [r7, #10]
  if (q->byteCount > 0) 
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	695b      	ldr	r3, [r3, #20]
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	f000 80ca 	beq.w	800bbc8 <CircularQueue_Remove+0x1c4>
  {
    /* retrieve element Size */
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	891b      	ldrh	r3, [r3, #8]
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d120      	bne.n	800ba7e <CircularQueue_Remove+0x7a>
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	681a      	ldr	r2, [r3, #0]
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	68db      	ldr	r3, [r3, #12]
 800ba44:	4413      	add	r3, r2
 800ba46:	781b      	ldrb	r3, [r3, #0]
 800ba48:	4618      	mov	r0, r3
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	681a      	ldr	r2, [r3, #0]
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	68db      	ldr	r3, [r3, #12]
 800ba52:	1c59      	adds	r1, r3, #1
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	685b      	ldr	r3, [r3, #4]
 800ba58:	4299      	cmp	r1, r3
 800ba5a:	d306      	bcc.n	800ba6a <CircularQueue_Remove+0x66>
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	68d9      	ldr	r1, [r3, #12]
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	685b      	ldr	r3, [r3, #4]
 800ba64:	1acb      	subs	r3, r1, r3
 800ba66:	3301      	adds	r3, #1
 800ba68:	e002      	b.n	800ba70 <CircularQueue_Remove+0x6c>
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	68db      	ldr	r3, [r3, #12]
 800ba6e:	3301      	adds	r3, #1
 800ba70:	4413      	add	r3, r2
 800ba72:	781b      	ldrb	r3, [r3, #0]
 800ba74:	021b      	lsls	r3, r3, #8
 800ba76:	b29b      	uxth	r3, r3
 800ba78:	4403      	add	r3, r0
 800ba7a:	b29b      	uxth	r3, r3
 800ba7c:	e001      	b.n	800ba82 <CircularQueue_Remove+0x7e>
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	891b      	ldrh	r3, [r3, #8]
 800ba82:	817b      	strh	r3, [r7, #10]

     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	7f1b      	ldrb	r3, [r3, #28]
 800ba88:	f003 0301 	and.w	r3, r3, #1
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d056      	beq.n	800bb3e <CircularQueue_Remove+0x13a>
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	7f1b      	ldrb	r3, [r3, #28]
 800ba94:	f003 0302 	and.w	r3, r3, #2
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d150      	bne.n	800bb3e <CircularQueue_Remove+0x13a>
     {
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800ba9c:	897b      	ldrh	r3, [r7, #10]
 800ba9e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800baa2:	4293      	cmp	r3, r2
 800baa4:	d103      	bne.n	800baae <CircularQueue_Remove+0xaa>
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	891b      	ldrh	r3, [r3, #8]
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d012      	beq.n	800bad4 <CircularQueue_Remove+0xd0>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	68da      	ldr	r2, [r3, #12]
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	691b      	ldr	r3, [r3, #16]
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800bab6:	429a      	cmp	r2, r3
 800bab8:	d941      	bls.n	800bb3e <CircularQueue_Remove+0x13a>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	891b      	ldrh	r3, [r3, #8]
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d03d      	beq.n	800bb3e <CircularQueue_Remove+0x13a>
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	685a      	ldr	r2, [r3, #4]
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	68db      	ldr	r3, [r3, #12]
 800baca:	1ad3      	subs	r3, r2, r3
 800bacc:	687a      	ldr	r2, [r7, #4]
 800bace:	8912      	ldrh	r2, [r2, #8]
 800bad0:	4293      	cmp	r3, r2
 800bad2:	d234      	bcs.n	800bb3e <CircularQueue_Remove+0x13a>
       {
          /* all data from current position up to the end of buffer are invalid */
          q->byteCount -= (q->queueMaxSize - q->first);
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	695a      	ldr	r2, [r3, #20]
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	68d9      	ldr	r1, [r3, #12]
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	685b      	ldr	r3, [r3, #4]
 800bae0:	1acb      	subs	r3, r1, r3
 800bae2:	441a      	add	r2, r3
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	615a      	str	r2, [r3, #20]
          /* Adjust first element pos */
          q->first = 0;
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	2200      	movs	r2, #0
 800baec:	60da      	str	r2, [r3, #12]
          /* retrieve the right size after the wrap [if variable size element] */
          eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	891b      	ldrh	r3, [r3, #8]
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d120      	bne.n	800bb38 <CircularQueue_Remove+0x134>
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	681a      	ldr	r2, [r3, #0]
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	68db      	ldr	r3, [r3, #12]
 800bafe:	4413      	add	r3, r2
 800bb00:	781b      	ldrb	r3, [r3, #0]
 800bb02:	4618      	mov	r0, r3
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	681a      	ldr	r2, [r3, #0]
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	68db      	ldr	r3, [r3, #12]
 800bb0c:	1c59      	adds	r1, r3, #1
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	685b      	ldr	r3, [r3, #4]
 800bb12:	4299      	cmp	r1, r3
 800bb14:	d306      	bcc.n	800bb24 <CircularQueue_Remove+0x120>
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	68d9      	ldr	r1, [r3, #12]
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	685b      	ldr	r3, [r3, #4]
 800bb1e:	1acb      	subs	r3, r1, r3
 800bb20:	3301      	adds	r3, #1
 800bb22:	e002      	b.n	800bb2a <CircularQueue_Remove+0x126>
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	68db      	ldr	r3, [r3, #12]
 800bb28:	3301      	adds	r3, #1
 800bb2a:	4413      	add	r3, r2
 800bb2c:	781b      	ldrb	r3, [r3, #0]
 800bb2e:	021b      	lsls	r3, r3, #8
 800bb30:	b29b      	uxth	r3, r3
 800bb32:	4403      	add	r3, r0
 800bb34:	b29b      	uxth	r3, r3
 800bb36:	e001      	b.n	800bb3c <CircularQueue_Remove+0x138>
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	891b      	ldrh	r3, [r3, #8]
 800bb3c:	817b      	strh	r3, [r7, #10]
       }
     }

    /* retrieve element */
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	681a      	ldr	r2, [r3, #0]
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	68d9      	ldr	r1, [r3, #12]
 800bb46:	7a7b      	ldrb	r3, [r7, #9]
 800bb48:	4419      	add	r1, r3
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	685b      	ldr	r3, [r3, #4]
 800bb4e:	4299      	cmp	r1, r3
 800bb50:	d307      	bcc.n	800bb62 <CircularQueue_Remove+0x15e>
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	68d9      	ldr	r1, [r3, #12]
 800bb56:	7a7b      	ldrb	r3, [r7, #9]
 800bb58:	4419      	add	r1, r3
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	685b      	ldr	r3, [r3, #4]
 800bb5e:	1acb      	subs	r3, r1, r3
 800bb60:	e003      	b.n	800bb6a <CircularQueue_Remove+0x166>
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	68d9      	ldr	r1, [r3, #12]
 800bb66:	7a7b      	ldrb	r3, [r7, #9]
 800bb68:	440b      	add	r3, r1
 800bb6a:	4413      	add	r3, r2
 800bb6c:	60fb      	str	r3, [r7, #12]

    /* adjust byte count */
    q->byteCount -= (eltSize + elemSizeStorageRoom) ;
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	695b      	ldr	r3, [r3, #20]
 800bb72:	8979      	ldrh	r1, [r7, #10]
 800bb74:	7a7a      	ldrb	r2, [r7, #9]
 800bb76:	440a      	add	r2, r1
 800bb78:	1a9a      	subs	r2, r3, r2
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	615a      	str	r2, [r3, #20]
    
    /* Adjust q->first */
    if (q->byteCount > 0)
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	695b      	ldr	r3, [r3, #20]
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d01b      	beq.n	800bbbe <CircularQueue_Remove+0x1ba>
    {
      q->first = MOD((q->first+ eltSize + elemSizeStorageRoom ), q->queueMaxSize);
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	68da      	ldr	r2, [r3, #12]
 800bb8a:	897b      	ldrh	r3, [r7, #10]
 800bb8c:	441a      	add	r2, r3
 800bb8e:	7a7b      	ldrb	r3, [r7, #9]
 800bb90:	441a      	add	r2, r3
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	685b      	ldr	r3, [r3, #4]
 800bb96:	429a      	cmp	r2, r3
 800bb98:	d309      	bcc.n	800bbae <CircularQueue_Remove+0x1aa>
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	68da      	ldr	r2, [r3, #12]
 800bb9e:	897b      	ldrh	r3, [r7, #10]
 800bba0:	441a      	add	r2, r3
 800bba2:	7a7b      	ldrb	r3, [r7, #9]
 800bba4:	441a      	add	r2, r3
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	685b      	ldr	r3, [r3, #4]
 800bbaa:	1ad3      	subs	r3, r2, r3
 800bbac:	e005      	b.n	800bbba <CircularQueue_Remove+0x1b6>
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	68da      	ldr	r2, [r3, #12]
 800bbb2:	897b      	ldrh	r3, [r7, #10]
 800bbb4:	441a      	add	r2, r3
 800bbb6:	7a7b      	ldrb	r3, [r7, #9]
 800bbb8:	4413      	add	r3, r2
 800bbba:	687a      	ldr	r2, [r7, #4]
 800bbbc:	60d3      	str	r3, [r2, #12]
    }    
    /* adjust element count */    
    --q->elementCount;    
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	699b      	ldr	r3, [r3, #24]
 800bbc2:	1e5a      	subs	r2, r3, #1
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	619a      	str	r2, [r3, #24]
  }
  if (elementSize != NULL)
 800bbc8:	683b      	ldr	r3, [r7, #0]
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d002      	beq.n	800bbd4 <CircularQueue_Remove+0x1d0>
  {
    *elementSize = eltSize;
 800bbce:	683b      	ldr	r3, [r7, #0]
 800bbd0:	897a      	ldrh	r2, [r7, #10]
 800bbd2:	801a      	strh	r2, [r3, #0]
  }
  return ptr;
 800bbd4:	68fb      	ldr	r3, [r7, #12]
}
 800bbd6:	4618      	mov	r0, r3
 800bbd8:	3714      	adds	r7, #20
 800bbda:	46bd      	mov	sp, r7
 800bbdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe0:	4770      	bx	lr

0800bbe2 <CircularQueue_Sense>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize:  Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on sensed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Sense(queue_t *q, uint16_t* elementSize)
{
 800bbe2:	b480      	push	{r7}
 800bbe4:	b087      	sub	sp, #28
 800bbe6:	af00      	add	r7, sp, #0
 800bbe8:	6078      	str	r0, [r7, #4]
 800bbea:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800bbec:	2300      	movs	r3, #0
 800bbee:	72fb      	strb	r3, [r7, #11]
  uint8_t* x= NULL;
 800bbf0:	2300      	movs	r3, #0
 800bbf2:	617b      	str	r3, [r7, #20]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	891b      	ldrh	r3, [r3, #8]
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d101      	bne.n	800bc00 <CircularQueue_Sense+0x1e>
 800bbfc:	2302      	movs	r3, #2
 800bbfe:	e000      	b.n	800bc02 <CircularQueue_Sense+0x20>
 800bc00:	2300      	movs	r3, #0
 800bc02:	72fb      	strb	r3, [r7, #11]
  uint16_t eltSize = 0;
 800bc04:	2300      	movs	r3, #0
 800bc06:	827b      	strh	r3, [r7, #18]
  uint32_t FirstElemetPos = 0;
 800bc08:	2300      	movs	r3, #0
 800bc0a:	60fb      	str	r3, [r7, #12]
    
  if (q->byteCount > 0) 
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	695b      	ldr	r3, [r3, #20]
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	f000 808e 	beq.w	800bd32 <CircularQueue_Sense+0x150>
  {
    FirstElemetPos = q->first;
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	68db      	ldr	r3, [r3, #12]
 800bc1a:	60fb      	str	r3, [r7, #12]
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	891b      	ldrh	r3, [r3, #8]
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d120      	bne.n	800bc66 <CircularQueue_Sense+0x84>
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	681a      	ldr	r2, [r3, #0]
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	68db      	ldr	r3, [r3, #12]
 800bc2c:	4413      	add	r3, r2
 800bc2e:	781b      	ldrb	r3, [r3, #0]
 800bc30:	4618      	mov	r0, r3
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	681a      	ldr	r2, [r3, #0]
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	68db      	ldr	r3, [r3, #12]
 800bc3a:	1c59      	adds	r1, r3, #1
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	685b      	ldr	r3, [r3, #4]
 800bc40:	4299      	cmp	r1, r3
 800bc42:	d306      	bcc.n	800bc52 <CircularQueue_Sense+0x70>
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	68d9      	ldr	r1, [r3, #12]
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	685b      	ldr	r3, [r3, #4]
 800bc4c:	1acb      	subs	r3, r1, r3
 800bc4e:	3301      	adds	r3, #1
 800bc50:	e002      	b.n	800bc58 <CircularQueue_Sense+0x76>
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	68db      	ldr	r3, [r3, #12]
 800bc56:	3301      	adds	r3, #1
 800bc58:	4413      	add	r3, r2
 800bc5a:	781b      	ldrb	r3, [r3, #0]
 800bc5c:	021b      	lsls	r3, r3, #8
 800bc5e:	b29b      	uxth	r3, r3
 800bc60:	4403      	add	r3, r0
 800bc62:	b29b      	uxth	r3, r3
 800bc64:	e001      	b.n	800bc6a <CircularQueue_Sense+0x88>
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	891b      	ldrh	r3, [r3, #8]
 800bc6a:	827b      	strh	r3, [r7, #18]
    
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	7f1b      	ldrb	r3, [r3, #28]
 800bc70:	f003 0301 	and.w	r3, r3, #1
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d047      	beq.n	800bd08 <CircularQueue_Sense+0x126>
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	7f1b      	ldrb	r3, [r3, #28]
 800bc7c:	f003 0302 	and.w	r3, r3, #2
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d141      	bne.n	800bd08 <CircularQueue_Sense+0x126>
    { 
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800bc84:	8a7b      	ldrh	r3, [r7, #18]
 800bc86:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800bc8a:	4293      	cmp	r3, r2
 800bc8c:	d103      	bne.n	800bc96 <CircularQueue_Sense+0xb4>
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	891b      	ldrh	r3, [r3, #8]
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d012      	beq.n	800bcbc <CircularQueue_Sense+0xda>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	68da      	ldr	r2, [r3, #12]
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	691b      	ldr	r3, [r3, #16]
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800bc9e:	429a      	cmp	r2, r3
 800bca0:	d932      	bls.n	800bd08 <CircularQueue_Sense+0x126>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	891b      	ldrh	r3, [r3, #8]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d02e      	beq.n	800bd08 <CircularQueue_Sense+0x126>
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	685a      	ldr	r2, [r3, #4]
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	68db      	ldr	r3, [r3, #12]
 800bcb2:	1ad3      	subs	r3, r2, r3
 800bcb4:	687a      	ldr	r2, [r7, #4]
 800bcb6:	8912      	ldrh	r2, [r2, #8]
 800bcb8:	4293      	cmp	r3, r2
 800bcba:	d225      	bcs.n	800bd08 <CircularQueue_Sense+0x126>

      {
        /* all data from current position up to the end of buffer are invalid */
        FirstElemetPos = 0; /* wrap to the begiining of buffer */
 800bcbc:	2300      	movs	r3, #0
 800bcbe:	60fb      	str	r3, [r7, #12]

        /* retrieve the right size after the wrap [if variable size element] */
        eltSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	891b      	ldrh	r3, [r3, #8]
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d11c      	bne.n	800bd02 <CircularQueue_Sense+0x120>
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	681a      	ldr	r2, [r3, #0]
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	4413      	add	r3, r2
 800bcd0:	781b      	ldrb	r3, [r3, #0]
 800bcd2:	4618      	mov	r0, r3
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	681a      	ldr	r2, [r3, #0]
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	1c59      	adds	r1, r3, #1
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	685b      	ldr	r3, [r3, #4]
 800bce0:	4299      	cmp	r1, r3
 800bce2:	d305      	bcc.n	800bcf0 <CircularQueue_Sense+0x10e>
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	685b      	ldr	r3, [r3, #4]
 800bce8:	68f9      	ldr	r1, [r7, #12]
 800bcea:	1acb      	subs	r3, r1, r3
 800bcec:	3301      	adds	r3, #1
 800bcee:	e001      	b.n	800bcf4 <CircularQueue_Sense+0x112>
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	3301      	adds	r3, #1
 800bcf4:	4413      	add	r3, r2
 800bcf6:	781b      	ldrb	r3, [r3, #0]
 800bcf8:	021b      	lsls	r3, r3, #8
 800bcfa:	b29b      	uxth	r3, r3
 800bcfc:	4403      	add	r3, r0
 800bcfe:	b29b      	uxth	r3, r3
 800bd00:	e001      	b.n	800bd06 <CircularQueue_Sense+0x124>
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	891b      	ldrh	r3, [r3, #8]
 800bd06:	827b      	strh	r3, [r7, #18]
      }
   }
   /* retrieve element */
    x = q->qBuff + (MOD((FirstElemetPos + elemSizeStorageRoom), q->queueMaxSize));
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	681a      	ldr	r2, [r3, #0]
 800bd0c:	7af9      	ldrb	r1, [r7, #11]
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	4419      	add	r1, r3
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	685b      	ldr	r3, [r3, #4]
 800bd16:	4299      	cmp	r1, r3
 800bd18:	d306      	bcc.n	800bd28 <CircularQueue_Sense+0x146>
 800bd1a:	7af9      	ldrb	r1, [r7, #11]
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	4419      	add	r1, r3
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	685b      	ldr	r3, [r3, #4]
 800bd24:	1acb      	subs	r3, r1, r3
 800bd26:	e002      	b.n	800bd2e <CircularQueue_Sense+0x14c>
 800bd28:	7af9      	ldrb	r1, [r7, #11]
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	440b      	add	r3, r1
 800bd2e:	4413      	add	r3, r2
 800bd30:	617b      	str	r3, [r7, #20]
  }
  if (elementSize != NULL)
 800bd32:	683b      	ldr	r3, [r7, #0]
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d002      	beq.n	800bd3e <CircularQueue_Sense+0x15c>
  {
    *elementSize = eltSize;
 800bd38:	683b      	ldr	r3, [r7, #0]
 800bd3a:	8a7a      	ldrh	r2, [r7, #18]
 800bd3c:	801a      	strh	r2, [r3, #0]
  }
  return x;
 800bd3e:	697b      	ldr	r3, [r7, #20]
}
 800bd40:	4618      	mov	r0, r3
 800bd42:	371c      	adds	r7, #28
 800bd44:	46bd      	mov	sp, r7
 800bd46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd4a:	4770      	bx	lr

0800bd4c <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 800bd4c:	b480      	push	{r7}
 800bd4e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 800bd50:	4b03      	ldr	r3, [pc, #12]	@ (800bd60 <LL_FLASH_GetUDN+0x14>)
 800bd52:	681b      	ldr	r3, [r3, #0]
}
 800bd54:	4618      	mov	r0, r3
 800bd56:	46bd      	mov	sp, r7
 800bd58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd5c:	4770      	bx	lr
 800bd5e:	bf00      	nop
 800bd60:	1fff7580 	.word	0x1fff7580

0800bd64 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 800bd64:	b480      	push	{r7}
 800bd66:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 800bd68:	4b03      	ldr	r3, [pc, #12]	@ (800bd78 <LL_FLASH_GetDeviceID+0x14>)
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	b2db      	uxtb	r3, r3
}
 800bd6e:	4618      	mov	r0, r3
 800bd70:	46bd      	mov	sp, r7
 800bd72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd76:	4770      	bx	lr
 800bd78:	1fff7584 	.word	0x1fff7584

0800bd7c <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 800bd7c:	b480      	push	{r7}
 800bd7e:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 800bd80:	4b03      	ldr	r3, [pc, #12]	@ (800bd90 <LL_FLASH_GetSTCompanyID+0x14>)
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	0a1b      	lsrs	r3, r3, #8
}
 800bd86:	4618      	mov	r0, r3
 800bd88:	46bd      	mov	sp, r7
 800bd8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd8e:	4770      	bx	lr
 800bd90:	1fff7584 	.word	0x1fff7584

0800bd94 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 800bd94:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bd96:	b0b1      	sub	sp, #196	@ 0xc4
 800bd98:	af04      	add	r7, sp, #16
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800bd9a:	2392      	movs	r3, #146	@ 0x92
 800bd9c:	f887 30ab 	strb.w	r3, [r7, #171]	@ 0xab
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */
  WirelessFwInfo_t wireless_info_instance;
  WirelessFwInfo_t *p_wireless_info = &wireless_info_instance;  
 800bda0:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800bda4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  char BdAddress[20];
  char StackVersion[23];
  char StackBranch[20];
  char FusVersion[20];
  const uint8_t *bdaddr=0;  
 800bda8:	2300      	movs	r3, #0
 800bdaa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 800bdae:	4b81      	ldr	r3, [pc, #516]	@ (800bfb4 <APP_BLE_Init+0x220>)
 800bdb0:	463c      	mov	r4, r7
 800bdb2:	461d      	mov	r5, r3
 800bdb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bdb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bdb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bdba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bdbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bdbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bdc0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800bdc4:	c403      	stmia	r4!, {r0, r1}
 800bdc6:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 800bdc8:	f000 feac 	bl	800cb24 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 800bdcc:	2101      	movs	r1, #1
 800bdce:	2002      	movs	r0, #2
 800bdd0:	f001 fdea 	bl	800d9a8 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 800bdd4:	4a78      	ldr	r2, [pc, #480]	@ (800bfb8 <APP_BLE_Init+0x224>)
 800bdd6:	2100      	movs	r1, #0
 800bdd8:	2002      	movs	r0, #2
 800bdda:	f001 ff11 	bl	800dc00 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 800bdde:	463b      	mov	r3, r7
 800bde0:	4618      	mov	r0, r3
 800bde2:	f7fe fc55 	bl	800a690 <SHCI_C2_BLE_Init>
 800bde6:	4603      	mov	r3, r0
 800bde8:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
  if (status != SHCI_Success)
 800bdec:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d008      	beq.n	800be06 <APP_BLE_Init+0x72>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
 800bdf4:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800bdf8:	4619      	mov	r1, r3
 800bdfa:	4870      	ldr	r0, [pc, #448]	@ (800bfbc <APP_BLE_Init+0x228>)
 800bdfc:	f002 f8e0 	bl	800dfc0 <iprintf>
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 800be00:	f7f6 ff84 	bl	8002d0c <Error_Handler>
 800be04:	e002      	b.n	800be0c <APP_BLE_Init+0x78>
  }
  else
  {
    APP_DBG_MSG("  Success: SHCI_C2_BLE_Init command\n\r");
 800be06:	486e      	ldr	r0, [pc, #440]	@ (800bfc0 <APP_BLE_Init+0x22c>)
 800be08:	f002 f8da 	bl	800dfc0 <iprintf>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 800be0c:	f000 fea0 	bl	800cb50 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 800be10:	f7fe fb98 	bl	800a544 <SVCCTL_Init>


  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800be14:	4b6b      	ldr	r3, [pc, #428]	@ (800bfc4 <APP_BLE_Init+0x230>)
 800be16:	2200      	movs	r2, #0
 800be18:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 800be1c:	4b69      	ldr	r3, [pc, #420]	@ (800bfc4 <APP_BLE_Init+0x230>)
 800be1e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800be22:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 800be24:	4a68      	ldr	r2, [pc, #416]	@ (800bfc8 <APP_BLE_Init+0x234>)
 800be26:	2100      	movs	r1, #0
 800be28:	2001      	movs	r0, #1
 800be2a:	f001 fee9 	bl	800dc00 <UTIL_SEQ_RegTask>
#if (BLE_CFG_OTA_REBOOT_CHAR != 0)
  a_ManufData[sizeof(a_ManufData)-8] = CFG_FEATURE_OTA_REBOOT;
#endif /* BLE_CFG_OTA_REBOOT_CHAR != 0 */

#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 800be2e:	2006      	movs	r0, #6
 800be30:	f7fe f97e 	bl	800a130 <aci_hal_set_radio_activity_mask>
 800be34:	4603      	mov	r3, r0
 800be36:	f887 30ab 	strb.w	r3, [r7, #171]	@ 0xab
  if (ret != BLE_STATUS_SUCCESS)
 800be3a:	f897 30ab 	ldrb.w	r3, [r7, #171]	@ 0xab
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d006      	beq.n	800be50 <APP_BLE_Init+0xbc>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_radio_activity_mask command, result: 0x%x \n\r", ret);
 800be42:	f897 30ab 	ldrb.w	r3, [r7, #171]	@ 0xab
 800be46:	4619      	mov	r1, r3
 800be48:	4860      	ldr	r0, [pc, #384]	@ (800bfcc <APP_BLE_Init+0x238>)
 800be4a:	f002 f8b9 	bl	800dfc0 <iprintf>
 800be4e:	e002      	b.n	800be56 <APP_BLE_Init+0xc2>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_radio_activity_mask command\n\r");
 800be50:	485f      	ldr	r0, [pc, #380]	@ (800bfd0 <APP_BLE_Init+0x23c>)
 800be52:	f002 f8b5 	bl	800dfc0 <iprintf>
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize P2P Server Application
   */
  P2PS_APP_Init();
 800be56:	f001 fa47 	bl	800d2e8 <P2PS_APP_Init>

  /* USER CODE BEGIN APP_BLE_Init_3 */
  Add_EEG_Stream_Notify_Service();
 800be5a:	f000 f8d5 	bl	800c008 <Add_EEG_Stream_Notify_Service>
  Add_Event_Notify_Service();
 800be5e:	f000 f9c1 	bl	800c1e4 <Add_Event_Notify_Service>
  Add_Motion_Notify_Service();
 800be62:	f000 fa57 	bl	800c314 <Add_Motion_Notify_Service>
   */
  //HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.Advertising_mgr_timer_Id), hw_ts_SingleShot, Adv_Cancel_Req);
  /**
   * Create timer to handle the Led Switch OFF
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.SwitchOffGPIO_timer_Id), hw_ts_SingleShot, Switch_OFF_GPIO);
 800be66:	4b5b      	ldr	r3, [pc, #364]	@ (800bfd4 <APP_BLE_Init+0x240>)
 800be68:	2200      	movs	r2, #0
 800be6a:	495b      	ldr	r1, [pc, #364]	@ (800bfd8 <APP_BLE_Init+0x244>)
 800be6c:	2000      	movs	r0, #0
 800be6e:	f7f6 f883 	bl	8001f78 <HW_TS_Create>

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 800be72:	4b54      	ldr	r3, [pc, #336]	@ (800bfc4 <APP_BLE_Init+0x230>)
 800be74:	2200      	movs	r2, #0
 800be76:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 800be78:	4b52      	ldr	r3, [pc, #328]	@ (800bfc4 <APP_BLE_Init+0x230>)
 800be7a:	2200      	movs	r2, #0
 800be7c:	761a      	strb	r2, [r3, #24]

  /* Initialize intervals for reconnexion without intervals update */
  AdvIntervalMin = CFG_FAST_CONN_ADV_INTERVAL_MIN;
 800be7e:	4b57      	ldr	r3, [pc, #348]	@ (800bfdc <APP_BLE_Init+0x248>)
 800be80:	2280      	movs	r2, #128	@ 0x80
 800be82:	801a      	strh	r2, [r3, #0]
  AdvIntervalMax = CFG_FAST_CONN_ADV_INTERVAL_MAX;
 800be84:	4b56      	ldr	r3, [pc, #344]	@ (800bfe0 <APP_BLE_Init+0x24c>)
 800be86:	22a0      	movs	r2, #160	@ 0xa0
 800be88:	801a      	strh	r2, [r3, #0]

  /**
   * Start to Advertise to be connected by P2P Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 800be8a:	2001      	movs	r0, #1
 800be8c:	f001 f810 	bl	800ceb0 <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */
   /* Displays the board information: MAC Address, Stack version, FUS version*/ 
   if (SHCI_GetWirelessFwInfo(p_wireless_info) != SHCI_Success)
 800be90:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 800be94:	f7fe fc40 	bl	800a718 <SHCI_GetWirelessFwInfo>
 800be98:	4603      	mov	r3, r0
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d15a      	bne.n	800bf54 <APP_BLE_Init+0x1c0>
   {
     // Error
   }
   else
   {
     bdaddr= BleGetBdAddress();
 800be9e:	f001 f8a5 	bl	800cfec <BleGetBdAddress>
 800bea2:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
     sprintf(BdAddress, "BD_ad=%02x%02x%02x%02x%02x%02x", bdaddr[5],bdaddr[4],bdaddr[3],bdaddr[2],bdaddr[1],bdaddr[0]);
 800bea6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800beaa:	3305      	adds	r3, #5
 800beac:	781b      	ldrb	r3, [r3, #0]
 800beae:	461d      	mov	r5, r3
 800beb0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800beb4:	3304      	adds	r3, #4
 800beb6:	781b      	ldrb	r3, [r3, #0]
 800beb8:	461e      	mov	r6, r3
 800beba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bebe:	3303      	adds	r3, #3
 800bec0:	781b      	ldrb	r3, [r3, #0]
 800bec2:	461a      	mov	r2, r3
 800bec4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bec8:	3302      	adds	r3, #2
 800beca:	781b      	ldrb	r3, [r3, #0]
 800becc:	4619      	mov	r1, r3
 800bece:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bed2:	3301      	adds	r3, #1
 800bed4:	781b      	ldrb	r3, [r3, #0]
 800bed6:	461c      	mov	r4, r3
 800bed8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bedc:	781b      	ldrb	r3, [r3, #0]
 800bede:	f107 007c 	add.w	r0, r7, #124	@ 0x7c
 800bee2:	9303      	str	r3, [sp, #12]
 800bee4:	9402      	str	r4, [sp, #8]
 800bee6:	9101      	str	r1, [sp, #4]
 800bee8:	9200      	str	r2, [sp, #0]
 800beea:	4633      	mov	r3, r6
 800beec:	462a      	mov	r2, r5
 800beee:	493d      	ldr	r1, [pc, #244]	@ (800bfe4 <APP_BLE_Init+0x250>)
 800bef0:	f002 f8de 	bl	800e0b0 <siprintf>
     sprintf(StackVersion, "BLE Stack=v%d.%d.%d", p_wireless_info->VersionMajor, p_wireless_info->VersionMinor, p_wireless_info->VersionSub);
 800bef4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bef8:	781b      	ldrb	r3, [r3, #0]
 800befa:	461a      	mov	r2, r3
 800befc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bf00:	785b      	ldrb	r3, [r3, #1]
 800bf02:	4619      	mov	r1, r3
 800bf04:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bf08:	789b      	ldrb	r3, [r3, #2]
 800bf0a:	f107 0064 	add.w	r0, r7, #100	@ 0x64
 800bf0e:	9300      	str	r3, [sp, #0]
 800bf10:	460b      	mov	r3, r1
 800bf12:	4935      	ldr	r1, [pc, #212]	@ (800bfe8 <APP_BLE_Init+0x254>)
 800bf14:	f002 f8cc 	bl	800e0b0 <siprintf>
     sprintf(StackBranch, "Branch=%d Type=%d", p_wireless_info->VersionBranch, p_wireless_info->VersionReleaseType);
 800bf18:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bf1c:	78db      	ldrb	r3, [r3, #3]
 800bf1e:	461a      	mov	r2, r3
 800bf20:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bf24:	791b      	ldrb	r3, [r3, #4]
 800bf26:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 800bf2a:	4930      	ldr	r1, [pc, #192]	@ (800bfec <APP_BLE_Init+0x258>)
 800bf2c:	f002 f8c0 	bl	800e0b0 <siprintf>
     sprintf(FusVersion, "FUS v%d.%d.%d", p_wireless_info->FusVersionMajor, p_wireless_info->FusVersionMinor, p_wireless_info->FusVersionSub);
 800bf30:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bf34:	7a9b      	ldrb	r3, [r3, #10]
 800bf36:	461a      	mov	r2, r3
 800bf38:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bf3c:	7adb      	ldrb	r3, [r3, #11]
 800bf3e:	4619      	mov	r1, r3
 800bf40:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bf44:	7b1b      	ldrb	r3, [r3, #12]
 800bf46:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 800bf4a:	9300      	str	r3, [sp, #0]
 800bf4c:	460b      	mov	r3, r1
 800bf4e:	4928      	ldr	r1, [pc, #160]	@ (800bff0 <APP_BLE_Init+0x25c>)
 800bf50:	f002 f8ae 	bl	800e0b0 <siprintf>
     
   }
   HAL_Delay(4000);
 800bf54:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 800bf58:	f7f5 fa9c 	bl	8001494 <HAL_Delay>
   /* Displays Application */
   
   sprintf(BdAddress, "BD_ad=%02x%02x%02x%02x%02x%02x", bdaddr[5],bdaddr[4],bdaddr[3],bdaddr[2],bdaddr[1],bdaddr[0]);
 800bf5c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bf60:	3305      	adds	r3, #5
 800bf62:	781b      	ldrb	r3, [r3, #0]
 800bf64:	461d      	mov	r5, r3
 800bf66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bf6a:	3304      	adds	r3, #4
 800bf6c:	781b      	ldrb	r3, [r3, #0]
 800bf6e:	461e      	mov	r6, r3
 800bf70:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bf74:	3303      	adds	r3, #3
 800bf76:	781b      	ldrb	r3, [r3, #0]
 800bf78:	461a      	mov	r2, r3
 800bf7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bf7e:	3302      	adds	r3, #2
 800bf80:	781b      	ldrb	r3, [r3, #0]
 800bf82:	4619      	mov	r1, r3
 800bf84:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bf88:	3301      	adds	r3, #1
 800bf8a:	781b      	ldrb	r3, [r3, #0]
 800bf8c:	461c      	mov	r4, r3
 800bf8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bf92:	781b      	ldrb	r3, [r3, #0]
 800bf94:	f107 007c 	add.w	r0, r7, #124	@ 0x7c
 800bf98:	9303      	str	r3, [sp, #12]
 800bf9a:	9402      	str	r4, [sp, #8]
 800bf9c:	9101      	str	r1, [sp, #4]
 800bf9e:	9200      	str	r2, [sp, #0]
 800bfa0:	4633      	mov	r3, r6
 800bfa2:	462a      	mov	r2, r5
 800bfa4:	490f      	ldr	r1, [pc, #60]	@ (800bfe4 <APP_BLE_Init+0x250>)
 800bfa6:	f002 f883 	bl	800e0b0 <siprintf>

  /* USER CODE END APP_BLE_Init_2 */

  return;
 800bfaa:	bf00      	nop
}
 800bfac:	37b4      	adds	r7, #180	@ 0xb4
 800bfae:	46bd      	mov	sp, r7
 800bfb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bfb2:	bf00      	nop
 800bfb4:	0800f6f8 	.word	0x0800f6f8
 800bfb8:	0800a8ad 	.word	0x0800a8ad
 800bfbc:	0800f5c4 	.word	0x0800f5c4
 800bfc0:	0800f5fc 	.word	0x0800f5fc
 800bfc4:	200004c8 	.word	0x200004c8
 800bfc8:	0800d075 	.word	0x0800d075
 800bfcc:	0800f624 	.word	0x0800f624
 800bfd0:	0800f668 	.word	0x0800f668
 800bfd4:	0800d0cd 	.word	0x0800d0cd
 800bfd8:	2000054e 	.word	0x2000054e
 800bfdc:	2000055c 	.word	0x2000055c
 800bfe0:	2000055e 	.word	0x2000055e
 800bfe4:	0800f6a0 	.word	0x0800f6a0
 800bfe8:	0800f6c0 	.word	0x0800f6c0
 800bfec:	0800f6d4 	.word	0x0800f6d4
 800bff0:	0800f6e8 	.word	0x0800f6e8

0800bff4 <Hermes_App_Init>:



void Hermes_App_Init(void){
 800bff4:	b580      	push	{r7, lr}
 800bff6:	af00      	add	r7, sp, #0

	  SVCCTL_RegisterSvcHandler(Hermes_Event_Handler);
 800bff8:	4802      	ldr	r0, [pc, #8]	@ (800c004 <Hermes_App_Init+0x10>)
 800bffa:	f7fe fadb 	bl	800a5b4 <SVCCTL_RegisterSvcHandler>

}
 800bffe:	bf00      	nop
 800c000:	bd80      	pop	{r7, pc}
 800c002:	bf00      	nop
 800c004:	0800d18d 	.word	0x0800d18d

0800c008 <Add_EEG_Stream_Notify_Service>:



static tBleStatus Add_EEG_Stream_Notify_Service(void)
{
 800c008:	b580      	push	{r7, lr}
 800c00a:	b094      	sub	sp, #80	@ 0x50
 800c00c:	af06      	add	r7, sp, #24
    tBleStatus ret = BLE_STATUS_SUCCESS;
 800c00e:	2300      	movs	r3, #0
 800c010:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    uint8_t eeg_service_uuid[16];
    uint8_t eeg_stream_char_uuid[16];
    uint8_t eeg_config_char_uuid[16];

    // Add service
    COPY_EEG_SERVICE_UUID(eeg_service_uuid);
 800c014:	231b      	movs	r3, #27
 800c016:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 800c01a:	23c5      	movs	r3, #197	@ 0xc5
 800c01c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800c020:	23d5      	movs	r3, #213	@ 0xd5
 800c022:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800c026:	23a5      	movs	r3, #165	@ 0xa5
 800c028:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c02c:	2302      	movs	r3, #2
 800c02e:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 800c032:	2300      	movs	r3, #0
 800c034:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 800c038:	2351      	movs	r3, #81	@ 0x51
 800c03a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800c03e:	23a1      	movs	r3, #161	@ 0xa1
 800c040:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c044:	23e5      	movs	r3, #229	@ 0xe5
 800c046:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 800c04a:	2311      	movs	r3, #17
 800c04c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 800c050:	2367      	movs	r3, #103	@ 0x67
 800c052:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800c056:	2349      	movs	r3, #73	@ 0x49
 800c058:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800c05c:	23e0      	movs	r3, #224	@ 0xe0
 800c05e:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
 800c062:	2380      	movs	r3, #128	@ 0x80
 800c064:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
 800c068:	23a4      	movs	r3, #164	@ 0xa4
 800c06a:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
 800c06e:	239f      	movs	r3, #159	@ 0x9f
 800c070:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    ret = aci_gatt_add_service(UUID_TYPE_128,
 800c074:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 800c078:	4b54      	ldr	r3, [pc, #336]	@ (800c1cc <Add_EEG_Stream_Notify_Service+0x1c4>)
 800c07a:	9300      	str	r3, [sp, #0]
 800c07c:	2308      	movs	r3, #8
 800c07e:	2201      	movs	r2, #1
 800c080:	2002      	movs	r0, #2
 800c082:	f7fd fc8d 	bl	80099a0 <aci_gatt_add_service>
 800c086:	4603      	mov	r3, r0
 800c088:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                              (Service_UUID_t *) eeg_service_uuid,
                              PRIMARY_SERVICE,
							  2 + 3 + 3, /* 2 for service + 3 + 3 for 2 characteristic */
                              &(BleApplicationContext.BleApplicationContext_legacy.eeg_service_handle));

    if (ret != BLE_STATUS_SUCCESS)
 800c08c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c090:	2b00      	cmp	r3, #0
 800c092:	d008      	beq.n	800c0a6 <Add_EEG_Stream_Notify_Service+0x9e>
    {
        APP_DBG_MSG("Error adding New Notify Service - ret=0x%x\n", ret);
 800c094:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c098:	4619      	mov	r1, r3
 800c09a:	484d      	ldr	r0, [pc, #308]	@ (800c1d0 <Add_EEG_Stream_Notify_Service+0x1c8>)
 800c09c:	f001 ff90 	bl	800dfc0 <iprintf>
        return ret;
 800c0a0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c0a4:	e08e      	b.n	800c1c4 <Add_EEG_Stream_Notify_Service+0x1bc>
    }

    // Add characteristic
    COPY_EEG_DATA_UUID(eeg_stream_char_uuid);
 800c0a6:	231b      	movs	r3, #27
 800c0a8:	753b      	strb	r3, [r7, #20]
 800c0aa:	23c5      	movs	r3, #197	@ 0xc5
 800c0ac:	757b      	strb	r3, [r7, #21]
 800c0ae:	23d5      	movs	r3, #213	@ 0xd5
 800c0b0:	75bb      	strb	r3, [r7, #22]
 800c0b2:	23a5      	movs	r3, #165	@ 0xa5
 800c0b4:	75fb      	strb	r3, [r7, #23]
 800c0b6:	2302      	movs	r3, #2
 800c0b8:	763b      	strb	r3, [r7, #24]
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	767b      	strb	r3, [r7, #25]
 800c0be:	2351      	movs	r3, #81	@ 0x51
 800c0c0:	76bb      	strb	r3, [r7, #26]
 800c0c2:	23a1      	movs	r3, #161	@ 0xa1
 800c0c4:	76fb      	strb	r3, [r7, #27]
 800c0c6:	23e5      	movs	r3, #229	@ 0xe5
 800c0c8:	773b      	strb	r3, [r7, #28]
 800c0ca:	2311      	movs	r3, #17
 800c0cc:	777b      	strb	r3, [r7, #29]
 800c0ce:	2367      	movs	r3, #103	@ 0x67
 800c0d0:	77bb      	strb	r3, [r7, #30]
 800c0d2:	2349      	movs	r3, #73	@ 0x49
 800c0d4:	77fb      	strb	r3, [r7, #31]
 800c0d6:	23e1      	movs	r3, #225	@ 0xe1
 800c0d8:	f887 3020 	strb.w	r3, [r7, #32]
 800c0dc:	2380      	movs	r3, #128	@ 0x80
 800c0de:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
 800c0e2:	23a4      	movs	r3, #164	@ 0xa4
 800c0e4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800c0e8:	239f      	movs	r3, #159	@ 0x9f
 800c0ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    ret = aci_gatt_add_char(BleApplicationContext.BleApplicationContext_legacy.eeg_service_handle,
 800c0ee:	4b39      	ldr	r3, [pc, #228]	@ (800c1d4 <Add_EEG_Stream_Notify_Service+0x1cc>)
 800c0f0:	f8b3 007e 	ldrh.w	r0, [r3, #126]	@ 0x7e
 800c0f4:	f107 0214 	add.w	r2, r7, #20
 800c0f8:	4b37      	ldr	r3, [pc, #220]	@ (800c1d8 <Add_EEG_Stream_Notify_Service+0x1d0>)
 800c0fa:	9305      	str	r3, [sp, #20]
 800c0fc:	2301      	movs	r3, #1
 800c0fe:	9304      	str	r3, [sp, #16]
 800c100:	230a      	movs	r3, #10
 800c102:	9303      	str	r3, [sp, #12]
 800c104:	2301      	movs	r3, #1
 800c106:	9302      	str	r3, [sp, #8]
 800c108:	2300      	movs	r3, #0
 800c10a:	9301      	str	r3, [sp, #4]
 800c10c:	2310      	movs	r3, #16
 800c10e:	9300      	str	r3, [sp, #0]
 800c110:	23f1      	movs	r3, #241	@ 0xf1
 800c112:	2102      	movs	r1, #2
 800c114:	f7fd fd1a 	bl	8009b4c <aci_gatt_add_char>
 800c118:	4603      	mov	r3, r0
 800c11a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
						   GATT_NOTIFY_ATTRIBUTE_WRITE,
                           10,
                           CHAR_VALUE_LEN_VARIABLE,
                           &(BleApplicationContext.eeg_data_char_handle));

    if (ret != BLE_STATUS_SUCCESS)
 800c11e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c122:	2b00      	cmp	r3, #0
 800c124:	d008      	beq.n	800c138 <Add_EEG_Stream_Notify_Service+0x130>
    {
        APP_DBG_MSG("Error adding New Notify Characteristic - ret=0x%x\n", ret);
 800c126:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c12a:	4619      	mov	r1, r3
 800c12c:	482b      	ldr	r0, [pc, #172]	@ (800c1dc <Add_EEG_Stream_Notify_Service+0x1d4>)
 800c12e:	f001 ff47 	bl	800dfc0 <iprintf>
        return ret;
 800c132:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c136:	e045      	b.n	800c1c4 <Add_EEG_Stream_Notify_Service+0x1bc>
    }

    // Add characteristic
    COPY_EEG_CONFIG_UUID(eeg_config_char_uuid);
 800c138:	231b      	movs	r3, #27
 800c13a:	713b      	strb	r3, [r7, #4]
 800c13c:	23c5      	movs	r3, #197	@ 0xc5
 800c13e:	717b      	strb	r3, [r7, #5]
 800c140:	23d5      	movs	r3, #213	@ 0xd5
 800c142:	71bb      	strb	r3, [r7, #6]
 800c144:	23a5      	movs	r3, #165	@ 0xa5
 800c146:	71fb      	strb	r3, [r7, #7]
 800c148:	2302      	movs	r3, #2
 800c14a:	723b      	strb	r3, [r7, #8]
 800c14c:	2300      	movs	r3, #0
 800c14e:	727b      	strb	r3, [r7, #9]
 800c150:	2351      	movs	r3, #81	@ 0x51
 800c152:	72bb      	strb	r3, [r7, #10]
 800c154:	23a1      	movs	r3, #161	@ 0xa1
 800c156:	72fb      	strb	r3, [r7, #11]
 800c158:	23e5      	movs	r3, #229	@ 0xe5
 800c15a:	733b      	strb	r3, [r7, #12]
 800c15c:	2311      	movs	r3, #17
 800c15e:	737b      	strb	r3, [r7, #13]
 800c160:	2367      	movs	r3, #103	@ 0x67
 800c162:	73bb      	strb	r3, [r7, #14]
 800c164:	2349      	movs	r3, #73	@ 0x49
 800c166:	73fb      	strb	r3, [r7, #15]
 800c168:	23e2      	movs	r3, #226	@ 0xe2
 800c16a:	743b      	strb	r3, [r7, #16]
 800c16c:	2380      	movs	r3, #128	@ 0x80
 800c16e:	747b      	strb	r3, [r7, #17]
 800c170:	23a4      	movs	r3, #164	@ 0xa4
 800c172:	74bb      	strb	r3, [r7, #18]
 800c174:	239f      	movs	r3, #159	@ 0x9f
 800c176:	74fb      	strb	r3, [r7, #19]
    ret = aci_gatt_add_char(BleApplicationContext.BleApplicationContext_legacy.eeg_service_handle,
 800c178:	4b16      	ldr	r3, [pc, #88]	@ (800c1d4 <Add_EEG_Stream_Notify_Service+0x1cc>)
 800c17a:	f8b3 007e 	ldrh.w	r0, [r3, #126]	@ 0x7e
 800c17e:	1d3a      	adds	r2, r7, #4
 800c180:	4b17      	ldr	r3, [pc, #92]	@ (800c1e0 <Add_EEG_Stream_Notify_Service+0x1d8>)
 800c182:	9305      	str	r3, [sp, #20]
 800c184:	2301      	movs	r3, #1
 800c186:	9304      	str	r3, [sp, #16]
 800c188:	230a      	movs	r3, #10
 800c18a:	9303      	str	r3, [sp, #12]
 800c18c:	2301      	movs	r3, #1
 800c18e:	9302      	str	r3, [sp, #8]
 800c190:	2300      	movs	r3, #0
 800c192:	9301      	str	r3, [sp, #4]
 800c194:	2306      	movs	r3, #6
 800c196:	9300      	str	r3, [sp, #0]
 800c198:	2303      	movs	r3, #3
 800c19a:	2102      	movs	r1, #2
 800c19c:	f7fd fcd6 	bl	8009b4c <aci_gatt_add_char>
 800c1a0:	4603      	mov	r3, r0
 800c1a2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
						   GATT_NOTIFY_ATTRIBUTE_WRITE,
                           10,
                           CHAR_VALUE_LEN_VARIABLE,
                           &(BleApplicationContext.eeg_config_char_handle));

    if (ret != BLE_STATUS_SUCCESS)
 800c1a6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d008      	beq.n	800c1c0 <Add_EEG_Stream_Notify_Service+0x1b8>
    {
        APP_DBG_MSG("Error adding New Notify Characteristic - ret=0x%x\n", ret);
 800c1ae:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c1b2:	4619      	mov	r1, r3
 800c1b4:	4809      	ldr	r0, [pc, #36]	@ (800c1dc <Add_EEG_Stream_Notify_Service+0x1d4>)
 800c1b6:	f001 ff03 	bl	800dfc0 <iprintf>
        return ret;
 800c1ba:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c1be:	e001      	b.n	800c1c4 <Add_EEG_Stream_Notify_Service+0x1bc>
    }

    return ret;
 800c1c0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 800c1c4:	4618      	mov	r0, r3
 800c1c6:	3738      	adds	r7, #56	@ 0x38
 800c1c8:	46bd      	mov	sp, r7
 800c1ca:	bd80      	pop	{r7, pc}
 800c1cc:	20000546 	.word	0x20000546
 800c1d0:	0800f734 	.word	0x0800f734
 800c1d4:	200004c8 	.word	0x200004c8
 800c1d8:	20000550 	.word	0x20000550
 800c1dc:	0800f760 	.word	0x0800f760
 800c1e0:	2000055a 	.word	0x2000055a

0800c1e4 <Add_Event_Notify_Service>:



static tBleStatus Add_Event_Notify_Service(void)
{
 800c1e4:	b580      	push	{r7, lr}
 800c1e6:	b090      	sub	sp, #64	@ 0x40
 800c1e8:	af06      	add	r7, sp, #24
    tBleStatus ret = BLE_STATUS_SUCCESS;
 800c1ea:	2300      	movs	r3, #0
 800c1ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    uint8_t event_service_uuid[16];
    uint8_t event_char_uuid[16];

    // Add service
    COPY_EVENT_SERVICE_UUID(event_service_uuid);
 800c1f0:	231b      	movs	r3, #27
 800c1f2:	753b      	strb	r3, [r7, #20]
 800c1f4:	23c5      	movs	r3, #197	@ 0xc5
 800c1f6:	757b      	strb	r3, [r7, #21]
 800c1f8:	23d5      	movs	r3, #213	@ 0xd5
 800c1fa:	75bb      	strb	r3, [r7, #22]
 800c1fc:	23a5      	movs	r3, #165	@ 0xa5
 800c1fe:	75fb      	strb	r3, [r7, #23]
 800c200:	2302      	movs	r3, #2
 800c202:	763b      	strb	r3, [r7, #24]
 800c204:	2300      	movs	r3, #0
 800c206:	767b      	strb	r3, [r7, #25]
 800c208:	2351      	movs	r3, #81	@ 0x51
 800c20a:	76bb      	strb	r3, [r7, #26]
 800c20c:	23a1      	movs	r3, #161	@ 0xa1
 800c20e:	76fb      	strb	r3, [r7, #27]
 800c210:	23e5      	movs	r3, #229	@ 0xe5
 800c212:	773b      	strb	r3, [r7, #28]
 800c214:	2311      	movs	r3, #17
 800c216:	777b      	strb	r3, [r7, #29]
 800c218:	2367      	movs	r3, #103	@ 0x67
 800c21a:	77bb      	strb	r3, [r7, #30]
 800c21c:	2349      	movs	r3, #73	@ 0x49
 800c21e:	77fb      	strb	r3, [r7, #31]
 800c220:	2300      	movs	r3, #0
 800c222:	f887 3020 	strb.w	r3, [r7, #32]
 800c226:	2383      	movs	r3, #131	@ 0x83
 800c228:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
 800c22c:	23a4      	movs	r3, #164	@ 0xa4
 800c22e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800c232:	239f      	movs	r3, #159	@ 0x9f
 800c234:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    ret = aci_gatt_add_service(UUID_TYPE_128,
 800c238:	f107 0114 	add.w	r1, r7, #20
 800c23c:	4b30      	ldr	r3, [pc, #192]	@ (800c300 <Add_Event_Notify_Service+0x11c>)
 800c23e:	9300      	str	r3, [sp, #0]
 800c240:	2305      	movs	r3, #5
 800c242:	2201      	movs	r2, #1
 800c244:	2002      	movs	r0, #2
 800c246:	f7fd fbab 	bl	80099a0 <aci_gatt_add_service>
 800c24a:	4603      	mov	r3, r0
 800c24c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                              (Service_UUID_t *) event_service_uuid,
                              PRIMARY_SERVICE,
                              2 + 3, /* 2 for service + 3 for 1 characteristic */
                              &(BleApplicationContext.BleApplicationContext_legacy.event_service_handle));

    if (ret != BLE_STATUS_SUCCESS)
 800c250:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c254:	2b00      	cmp	r3, #0
 800c256:	d008      	beq.n	800c26a <Add_Event_Notify_Service+0x86>
    {
        APP_DBG_MSG("Error adding New Notify Service - ret=0x%x\n", ret);
 800c258:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c25c:	4619      	mov	r1, r3
 800c25e:	4829      	ldr	r0, [pc, #164]	@ (800c304 <Add_Event_Notify_Service+0x120>)
 800c260:	f001 feae 	bl	800dfc0 <iprintf>
        return ret;
 800c264:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c268:	e045      	b.n	800c2f6 <Add_Event_Notify_Service+0x112>
    }

    // Add characteristic
    COPY_EVENT_UUID(event_char_uuid);
 800c26a:	231b      	movs	r3, #27
 800c26c:	713b      	strb	r3, [r7, #4]
 800c26e:	23c5      	movs	r3, #197	@ 0xc5
 800c270:	717b      	strb	r3, [r7, #5]
 800c272:	23d5      	movs	r3, #213	@ 0xd5
 800c274:	71bb      	strb	r3, [r7, #6]
 800c276:	23a5      	movs	r3, #165	@ 0xa5
 800c278:	71fb      	strb	r3, [r7, #7]
 800c27a:	2302      	movs	r3, #2
 800c27c:	723b      	strb	r3, [r7, #8]
 800c27e:	2300      	movs	r3, #0
 800c280:	727b      	strb	r3, [r7, #9]
 800c282:	2351      	movs	r3, #81	@ 0x51
 800c284:	72bb      	strb	r3, [r7, #10]
 800c286:	23a1      	movs	r3, #161	@ 0xa1
 800c288:	72fb      	strb	r3, [r7, #11]
 800c28a:	23e5      	movs	r3, #229	@ 0xe5
 800c28c:	733b      	strb	r3, [r7, #12]
 800c28e:	2311      	movs	r3, #17
 800c290:	737b      	strb	r3, [r7, #13]
 800c292:	2367      	movs	r3, #103	@ 0x67
 800c294:	73bb      	strb	r3, [r7, #14]
 800c296:	2349      	movs	r3, #73	@ 0x49
 800c298:	73fb      	strb	r3, [r7, #15]
 800c29a:	2301      	movs	r3, #1
 800c29c:	743b      	strb	r3, [r7, #16]
 800c29e:	2383      	movs	r3, #131	@ 0x83
 800c2a0:	747b      	strb	r3, [r7, #17]
 800c2a2:	23a4      	movs	r3, #164	@ 0xa4
 800c2a4:	74bb      	strb	r3, [r7, #18]
 800c2a6:	239f      	movs	r3, #159	@ 0x9f
 800c2a8:	74fb      	strb	r3, [r7, #19]
    ret = aci_gatt_add_char(BleApplicationContext.BleApplicationContext_legacy.event_service_handle,
 800c2aa:	4b17      	ldr	r3, [pc, #92]	@ (800c308 <Add_Event_Notify_Service+0x124>)
 800c2ac:	f8b3 0080 	ldrh.w	r0, [r3, #128]	@ 0x80
 800c2b0:	1d3a      	adds	r2, r7, #4
 800c2b2:	4b16      	ldr	r3, [pc, #88]	@ (800c30c <Add_Event_Notify_Service+0x128>)
 800c2b4:	9305      	str	r3, [sp, #20]
 800c2b6:	2301      	movs	r3, #1
 800c2b8:	9304      	str	r3, [sp, #16]
 800c2ba:	230a      	movs	r3, #10
 800c2bc:	9303      	str	r3, [sp, #12]
 800c2be:	2301      	movs	r3, #1
 800c2c0:	9302      	str	r3, [sp, #8]
 800c2c2:	2300      	movs	r3, #0
 800c2c4:	9301      	str	r3, [sp, #4]
 800c2c6:	2310      	movs	r3, #16
 800c2c8:	9300      	str	r3, [sp, #0]
 800c2ca:	2304      	movs	r3, #4
 800c2cc:	2102      	movs	r1, #2
 800c2ce:	f7fd fc3d 	bl	8009b4c <aci_gatt_add_char>
 800c2d2:	4603      	mov	r3, r0
 800c2d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
						   GATT_NOTIFY_ATTRIBUTE_WRITE,
                           10,
                           CHAR_VALUE_LEN_VARIABLE,
                           &(BleApplicationContext.event_char_handle));

    if (ret != BLE_STATUS_SUCCESS)
 800c2d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d008      	beq.n	800c2f2 <Add_Event_Notify_Service+0x10e>
    {
        APP_DBG_MSG("Error adding New Notify Characteristic - ret=0x%x\n", ret);
 800c2e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c2e4:	4619      	mov	r1, r3
 800c2e6:	480a      	ldr	r0, [pc, #40]	@ (800c310 <Add_Event_Notify_Service+0x12c>)
 800c2e8:	f001 fe6a 	bl	800dfc0 <iprintf>
        return ret;
 800c2ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c2f0:	e001      	b.n	800c2f6 <Add_Event_Notify_Service+0x112>
    }


    return ret;
 800c2f2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800c2f6:	4618      	mov	r0, r3
 800c2f8:	3728      	adds	r7, #40	@ 0x28
 800c2fa:	46bd      	mov	sp, r7
 800c2fc:	bd80      	pop	{r7, pc}
 800c2fe:	bf00      	nop
 800c300:	20000548 	.word	0x20000548
 800c304:	0800f734 	.word	0x0800f734
 800c308:	200004c8 	.word	0x200004c8
 800c30c:	20000552 	.word	0x20000552
 800c310:	0800f760 	.word	0x0800f760

0800c314 <Add_Motion_Notify_Service>:



static tBleStatus Add_Motion_Notify_Service(void)
{
 800c314:	b580      	push	{r7, lr}
 800c316:	b098      	sub	sp, #96	@ 0x60
 800c318:	af06      	add	r7, sp, #24
    tBleStatus ret = BLE_STATUS_SUCCESS;
 800c31a:	2300      	movs	r3, #0
 800c31c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    uint8_t accel_char_uuid[16];
    uint8_t gyro_char_uuid[16];
    uint8_t compass_char_uuid[16];

    // Add service
    COPY_MOTION_SERVICE_UUID(motion_service_uuid);
 800c320:	231b      	movs	r3, #27
 800c322:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
 800c326:	23c5      	movs	r3, #197	@ 0xc5
 800c328:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 800c32c:	23d5      	movs	r3, #213	@ 0xd5
 800c32e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 800c332:	23a5      	movs	r3, #165	@ 0xa5
 800c334:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c338:	2302      	movs	r3, #2
 800c33a:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
 800c33e:	2300      	movs	r3, #0
 800c340:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
 800c344:	2351      	movs	r3, #81	@ 0x51
 800c346:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
 800c34a:	23a1      	movs	r3, #161	@ 0xa1
 800c34c:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 800c350:	23e5      	movs	r3, #229	@ 0xe5
 800c352:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
 800c356:	2311      	movs	r3, #17
 800c358:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
 800c35c:	2367      	movs	r3, #103	@ 0x67
 800c35e:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 800c362:	2349      	movs	r3, #73	@ 0x49
 800c364:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800c368:	2300      	movs	r3, #0
 800c36a:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
 800c36e:	2382      	movs	r3, #130	@ 0x82
 800c370:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
 800c374:	23a4      	movs	r3, #164	@ 0xa4
 800c376:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c37a:	239f      	movs	r3, #159	@ 0x9f
 800c37c:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
    ret = aci_gatt_add_service(UUID_TYPE_128,
 800c380:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 800c384:	4b5a      	ldr	r3, [pc, #360]	@ (800c4f0 <Add_Motion_Notify_Service+0x1dc>)
 800c386:	9300      	str	r3, [sp, #0]
 800c388:	230b      	movs	r3, #11
 800c38a:	2201      	movs	r2, #1
 800c38c:	2002      	movs	r0, #2
 800c38e:	f7fd fb07 	bl	80099a0 <aci_gatt_add_service>
 800c392:	4603      	mov	r3, r0
 800c394:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
                              (Service_UUID_t *) motion_service_uuid,
                              PRIMARY_SERVICE,
                              2 + 3 + 3 + 3, /* 2 for service + 6 for 2 characteristic */
                              &(BleApplicationContext.BleApplicationContext_legacy.motion_service_handle));

    if (ret != BLE_STATUS_SUCCESS)
 800c398:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d008      	beq.n	800c3b2 <Add_Motion_Notify_Service+0x9e>
    {
        APP_DBG_MSG("Error adding New Notify Service - ret=0x%x\n", ret);
 800c3a0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800c3a4:	4619      	mov	r1, r3
 800c3a6:	4853      	ldr	r0, [pc, #332]	@ (800c4f4 <Add_Motion_Notify_Service+0x1e0>)
 800c3a8:	f001 fe0a 	bl	800dfc0 <iprintf>
        return ret;
 800c3ac:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800c3b0:	e09a      	b.n	800c4e8 <Add_Motion_Notify_Service+0x1d4>
    }

    // Add characteristic
    COPY_ACCEL_UUID(accel_char_uuid);
 800c3b2:	231b      	movs	r3, #27
 800c3b4:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 800c3b8:	23c5      	movs	r3, #197	@ 0xc5
 800c3ba:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800c3be:	23d5      	movs	r3, #213	@ 0xd5
 800c3c0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800c3c4:	23a5      	movs	r3, #165	@ 0xa5
 800c3c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c3ca:	2302      	movs	r3, #2
 800c3cc:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 800c3d0:	2300      	movs	r3, #0
 800c3d2:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 800c3d6:	2351      	movs	r3, #81	@ 0x51
 800c3d8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800c3dc:	23a1      	movs	r3, #161	@ 0xa1
 800c3de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c3e2:	23e5      	movs	r3, #229	@ 0xe5
 800c3e4:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 800c3e8:	2311      	movs	r3, #17
 800c3ea:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 800c3ee:	2367      	movs	r3, #103	@ 0x67
 800c3f0:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800c3f4:	2349      	movs	r3, #73	@ 0x49
 800c3f6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800c3fa:	2301      	movs	r3, #1
 800c3fc:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
 800c400:	2382      	movs	r3, #130	@ 0x82
 800c402:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
 800c406:	23a4      	movs	r3, #164	@ 0xa4
 800c408:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
 800c40c:	239f      	movs	r3, #159	@ 0x9f
 800c40e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    ret = aci_gatt_add_char(BleApplicationContext.BleApplicationContext_legacy.motion_service_handle,
 800c412:	4b39      	ldr	r3, [pc, #228]	@ (800c4f8 <Add_Motion_Notify_Service+0x1e4>)
 800c414:	f8b3 0082 	ldrh.w	r0, [r3, #130]	@ 0x82
 800c418:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800c41c:	4b37      	ldr	r3, [pc, #220]	@ (800c4fc <Add_Motion_Notify_Service+0x1e8>)
 800c41e:	9305      	str	r3, [sp, #20]
 800c420:	2301      	movs	r3, #1
 800c422:	9304      	str	r3, [sp, #16]
 800c424:	230a      	movs	r3, #10
 800c426:	9303      	str	r3, [sp, #12]
 800c428:	2301      	movs	r3, #1
 800c42a:	9302      	str	r3, [sp, #8]
 800c42c:	2300      	movs	r3, #0
 800c42e:	9301      	str	r3, [sp, #4]
 800c430:	2310      	movs	r3, #16
 800c432:	9300      	str	r3, [sp, #0]
 800c434:	23b4      	movs	r3, #180	@ 0xb4
 800c436:	2102      	movs	r1, #2
 800c438:	f7fd fb88 	bl	8009b4c <aci_gatt_add_char>
 800c43c:	4603      	mov	r3, r0
 800c43e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
						   GATT_NOTIFY_ATTRIBUTE_WRITE,
                           10,
                           CHAR_VALUE_LEN_VARIABLE,
                           &(BleApplicationContext.accel_char_handle));

    if (ret != BLE_STATUS_SUCCESS)
 800c442:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800c446:	2b00      	cmp	r3, #0
 800c448:	d008      	beq.n	800c45c <Add_Motion_Notify_Service+0x148>
    {
        APP_DBG_MSG("Error adding New Notify Characteristic - ret=0x%x\n", ret);
 800c44a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800c44e:	4619      	mov	r1, r3
 800c450:	482b      	ldr	r0, [pc, #172]	@ (800c500 <Add_Motion_Notify_Service+0x1ec>)
 800c452:	f001 fdb5 	bl	800dfc0 <iprintf>
        return ret;
 800c456:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800c45a:	e045      	b.n	800c4e8 <Add_Motion_Notify_Service+0x1d4>
        return ret;
    }*/


    // Add characteristic
    COPY_COMPASS_UUID(compass_char_uuid);
 800c45c:	231b      	movs	r3, #27
 800c45e:	713b      	strb	r3, [r7, #4]
 800c460:	23c5      	movs	r3, #197	@ 0xc5
 800c462:	717b      	strb	r3, [r7, #5]
 800c464:	23d5      	movs	r3, #213	@ 0xd5
 800c466:	71bb      	strb	r3, [r7, #6]
 800c468:	23a5      	movs	r3, #165	@ 0xa5
 800c46a:	71fb      	strb	r3, [r7, #7]
 800c46c:	2302      	movs	r3, #2
 800c46e:	723b      	strb	r3, [r7, #8]
 800c470:	2300      	movs	r3, #0
 800c472:	727b      	strb	r3, [r7, #9]
 800c474:	2351      	movs	r3, #81	@ 0x51
 800c476:	72bb      	strb	r3, [r7, #10]
 800c478:	23a1      	movs	r3, #161	@ 0xa1
 800c47a:	72fb      	strb	r3, [r7, #11]
 800c47c:	23e5      	movs	r3, #229	@ 0xe5
 800c47e:	733b      	strb	r3, [r7, #12]
 800c480:	2311      	movs	r3, #17
 800c482:	737b      	strb	r3, [r7, #13]
 800c484:	2367      	movs	r3, #103	@ 0x67
 800c486:	73bb      	strb	r3, [r7, #14]
 800c488:	2349      	movs	r3, #73	@ 0x49
 800c48a:	73fb      	strb	r3, [r7, #15]
 800c48c:	2303      	movs	r3, #3
 800c48e:	743b      	strb	r3, [r7, #16]
 800c490:	2382      	movs	r3, #130	@ 0x82
 800c492:	747b      	strb	r3, [r7, #17]
 800c494:	23a4      	movs	r3, #164	@ 0xa4
 800c496:	74bb      	strb	r3, [r7, #18]
 800c498:	239f      	movs	r3, #159	@ 0x9f
 800c49a:	74fb      	strb	r3, [r7, #19]
    ret = aci_gatt_add_char(BleApplicationContext.BleApplicationContext_legacy.motion_service_handle,
 800c49c:	4b16      	ldr	r3, [pc, #88]	@ (800c4f8 <Add_Motion_Notify_Service+0x1e4>)
 800c49e:	f8b3 0082 	ldrh.w	r0, [r3, #130]	@ 0x82
 800c4a2:	1d3a      	adds	r2, r7, #4
 800c4a4:	4b17      	ldr	r3, [pc, #92]	@ (800c504 <Add_Motion_Notify_Service+0x1f0>)
 800c4a6:	9305      	str	r3, [sp, #20]
 800c4a8:	2301      	movs	r3, #1
 800c4aa:	9304      	str	r3, [sp, #16]
 800c4ac:	230a      	movs	r3, #10
 800c4ae:	9303      	str	r3, [sp, #12]
 800c4b0:	2301      	movs	r3, #1
 800c4b2:	9302      	str	r3, [sp, #8]
 800c4b4:	2300      	movs	r3, #0
 800c4b6:	9301      	str	r3, [sp, #4]
 800c4b8:	2310      	movs	r3, #16
 800c4ba:	9300      	str	r3, [sp, #0]
 800c4bc:	2306      	movs	r3, #6
 800c4be:	2102      	movs	r1, #2
 800c4c0:	f7fd fb44 	bl	8009b4c <aci_gatt_add_char>
 800c4c4:	4603      	mov	r3, r0
 800c4c6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
						   GATT_NOTIFY_ATTRIBUTE_WRITE,
                           10,
                           CHAR_VALUE_LEN_VARIABLE,
                           &(BleApplicationContext.compass_char_handle));

    if (ret != BLE_STATUS_SUCCESS)
 800c4ca:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d008      	beq.n	800c4e4 <Add_Motion_Notify_Service+0x1d0>
    {
        APP_DBG_MSG("Error adding New Notify Characteristic - ret=0x%x\n", ret);
 800c4d2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800c4d6:	4619      	mov	r1, r3
 800c4d8:	4809      	ldr	r0, [pc, #36]	@ (800c500 <Add_Motion_Notify_Service+0x1ec>)
 800c4da:	f001 fd71 	bl	800dfc0 <iprintf>
        return ret;
 800c4de:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800c4e2:	e001      	b.n	800c4e8 <Add_Motion_Notify_Service+0x1d4>
    }




    return ret;
 800c4e4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800c4e8:	4618      	mov	r0, r3
 800c4ea:	3748      	adds	r7, #72	@ 0x48
 800c4ec:	46bd      	mov	sp, r7
 800c4ee:	bd80      	pop	{r7, pc}
 800c4f0:	2000054a 	.word	0x2000054a
 800c4f4:	0800f734 	.word	0x0800f734
 800c4f8:	200004c8 	.word	0x200004c8
 800c4fc:	20000554 	.word	0x20000554
 800c500:	0800f760 	.word	0x0800f760
 800c504:	20000558 	.word	0x20000558

0800c508 <SVCCTL_App_Notification>:




SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 800c508:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c50a:	b097      	sub	sp, #92	@ 0x5c
 800c50c:	af04      	add	r7, sp, #16
 800c50e:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  uint8_t           Tx_phy, Rx_phy;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 800c510:	2392      	movs	r3, #146	@ 0x92
 800c512:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  /* USER CODE BEGIN SVCCTL_App_Notification */
    char BdAddress[20];
    const uint8_t *bdaddr; 
  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	3301      	adds	r3, #1
 800c51a:	643b      	str	r3, [r7, #64]	@ 0x40

  switch (p_event_pckt->evt)
 800c51c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c51e:	781b      	ldrb	r3, [r3, #0]
 800c520:	2bff      	cmp	r3, #255	@ 0xff
 800c522:	f000 8183 	beq.w	800c82c <SVCCTL_App_Notification+0x324>
 800c526:	2bff      	cmp	r3, #255	@ 0xff
 800c528:	f300 826c 	bgt.w	800ca04 <SVCCTL_App_Notification+0x4fc>
 800c52c:	2b05      	cmp	r3, #5
 800c52e:	d002      	beq.n	800c536 <SVCCTL_App_Notification+0x2e>
 800c530:	2b3e      	cmp	r3, #62	@ 0x3e
 800c532:	d052      	beq.n	800c5da <SVCCTL_App_Notification+0xd2>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 800c534:	e266      	b.n	800ca04 <SVCCTL_App_Notification+0x4fc>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 800c536:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c538:	3302      	adds	r3, #2
 800c53a:	623b      	str	r3, [r7, #32]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 800c53c:	6a3b      	ldr	r3, [r7, #32]
 800c53e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800c542:	b29a      	uxth	r2, r3
 800c544:	4ba9      	ldr	r3, [pc, #676]	@ (800c7ec <SVCCTL_App_Notification+0x2e4>)
 800c546:	8adb      	ldrh	r3, [r3, #22]
 800c548:	429a      	cmp	r2, r3
 800c54a:	d114      	bne.n	800c576 <SVCCTL_App_Notification+0x6e>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 800c54c:	4ba7      	ldr	r3, [pc, #668]	@ (800c7ec <SVCCTL_App_Notification+0x2e4>)
 800c54e:	2200      	movs	r2, #0
 800c550:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800c552:	4ba6      	ldr	r3, [pc, #664]	@ (800c7ec <SVCCTL_App_Notification+0x2e4>)
 800c554:	2200      	movs	r2, #0
 800c556:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
        APP_DBG_MSG(">>== HCI_DISCONNECTION_COMPLETE_EVT_CODE\n");
 800c55a:	48a5      	ldr	r0, [pc, #660]	@ (800c7f0 <SVCCTL_App_Notification+0x2e8>)
 800c55c:	f001 fda0 	bl	800e0a0 <puts>
                    p_disconnection_complete_event->Connection_Handle,
 800c560:	6a3b      	ldr	r3, [r7, #32]
 800c562:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800c566:	b29b      	uxth	r3, r3
        APP_DBG_MSG("     - Connection Handle:   0x%x\n     - Reason:    0x%x\n\r",
 800c568:	4619      	mov	r1, r3
                    p_disconnection_complete_event->Reason);
 800c56a:	6a3b      	ldr	r3, [r7, #32]
 800c56c:	78db      	ldrb	r3, [r3, #3]
        APP_DBG_MSG("     - Connection Handle:   0x%x\n     - Reason:    0x%x\n\r",
 800c56e:	461a      	mov	r2, r3
 800c570:	48a0      	ldr	r0, [pc, #640]	@ (800c7f4 <SVCCTL_App_Notification+0x2ec>)
 800c572:	f001 fd25 	bl	800dfc0 <iprintf>
      Adv_Request(APP_BLE_FAST_ADV);
 800c576:	2001      	movs	r0, #1
 800c578:	f000 fc9a 	bl	800ceb0 <Adv_Request>
      HandleNotification.P2P_Evt_Opcode = PEER_DISCON_HANDLE_EVT;
 800c57c:	4b9e      	ldr	r3, [pc, #632]	@ (800c7f8 <SVCCTL_App_Notification+0x2f0>)
 800c57e:	2201      	movs	r2, #1
 800c580:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800c582:	4b9a      	ldr	r3, [pc, #616]	@ (800c7ec <SVCCTL_App_Notification+0x2e4>)
 800c584:	8ada      	ldrh	r2, [r3, #22]
 800c586:	4b9c      	ldr	r3, [pc, #624]	@ (800c7f8 <SVCCTL_App_Notification+0x2f0>)
 800c588:	805a      	strh	r2, [r3, #2]
      P2PS_APP_Notification(&HandleNotification);
 800c58a:	489b      	ldr	r0, [pc, #620]	@ (800c7f8 <SVCCTL_App_Notification+0x2f0>)
 800c58c:	f000 fe94 	bl	800d2b8 <P2PS_APP_Notification>
      bdaddr= BleGetBdAddress();
 800c590:	f000 fd2c 	bl	800cfec <BleGetBdAddress>
 800c594:	6278      	str	r0, [r7, #36]	@ 0x24
      sprintf(BdAddress, "BD_ad=%02x%02x%02x%02x%02x%02x", bdaddr[5], bdaddr[4], bdaddr[3], bdaddr[2], bdaddr[1], bdaddr[0]);
 800c596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c598:	3305      	adds	r3, #5
 800c59a:	781b      	ldrb	r3, [r3, #0]
 800c59c:	461d      	mov	r5, r3
 800c59e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5a0:	3304      	adds	r3, #4
 800c5a2:	781b      	ldrb	r3, [r3, #0]
 800c5a4:	461e      	mov	r6, r3
 800c5a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5a8:	3303      	adds	r3, #3
 800c5aa:	781b      	ldrb	r3, [r3, #0]
 800c5ac:	461a      	mov	r2, r3
 800c5ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5b0:	3302      	adds	r3, #2
 800c5b2:	781b      	ldrb	r3, [r3, #0]
 800c5b4:	4619      	mov	r1, r3
 800c5b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5b8:	3301      	adds	r3, #1
 800c5ba:	781b      	ldrb	r3, [r3, #0]
 800c5bc:	461c      	mov	r4, r3
 800c5be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5c0:	781b      	ldrb	r3, [r3, #0]
 800c5c2:	f107 0008 	add.w	r0, r7, #8
 800c5c6:	9303      	str	r3, [sp, #12]
 800c5c8:	9402      	str	r4, [sp, #8]
 800c5ca:	9101      	str	r1, [sp, #4]
 800c5cc:	9200      	str	r2, [sp, #0]
 800c5ce:	4633      	mov	r3, r6
 800c5d0:	462a      	mov	r2, r5
 800c5d2:	498a      	ldr	r1, [pc, #552]	@ (800c7fc <SVCCTL_App_Notification+0x2f4>)
 800c5d4:	f001 fd6c 	bl	800e0b0 <siprintf>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 800c5d8:	e217      	b.n	800ca0a <SVCCTL_App_Notification+0x502>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 800c5da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c5dc:	3302      	adds	r3, #2
 800c5de:	637b      	str	r3, [r7, #52]	@ 0x34
      switch (p_meta_evt->subevent)
 800c5e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c5e2:	781b      	ldrb	r3, [r3, #0]
 800c5e4:	2b0c      	cmp	r3, #12
 800c5e6:	d033      	beq.n	800c650 <SVCCTL_App_Notification+0x148>
 800c5e8:	2b0c      	cmp	r3, #12
 800c5ea:	f300 80fc 	bgt.w	800c7e6 <SVCCTL_App_Notification+0x2de>
 800c5ee:	2b01      	cmp	r3, #1
 800c5f0:	d06c      	beq.n	800c6cc <SVCCTL_App_Notification+0x1c4>
 800c5f2:	2b03      	cmp	r3, #3
 800c5f4:	f040 80f7 	bne.w	800c7e6 <SVCCTL_App_Notification+0x2de>
          p_connection_update_complete_event = (hci_le_connection_update_complete_event_rp0 *) p_meta_evt->data;
 800c5f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c5fa:	3301      	adds	r3, #1
 800c5fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_UPDATE_COMPLETE_SUBEVT_CODE\n");
 800c5fe:	4880      	ldr	r0, [pc, #512]	@ (800c800 <SVCCTL_App_Notification+0x2f8>)
 800c600:	f001 fd4e 	bl	800e0a0 <puts>
                       p_connection_update_complete_event->Conn_Interval*1.25,
 800c604:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c606:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800c60a:	b29b      	uxth	r3, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800c60c:	4618      	mov	r0, r3
 800c60e:	f7f4 f88b 	bl	8000728 <__aeabi_i2d>
 800c612:	f04f 0200 	mov.w	r2, #0
 800c616:	4b7b      	ldr	r3, [pc, #492]	@ (800c804 <SVCCTL_App_Notification+0x2fc>)
 800c618:	f7f3 fe0a 	bl	8000230 <__aeabi_dmul>
 800c61c:	4602      	mov	r2, r0
 800c61e:	460b      	mov	r3, r1
 800c620:	4610      	mov	r0, r2
 800c622:	4619      	mov	r1, r3
                       p_connection_update_complete_event->Conn_Latency,
 800c624:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c626:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800c62a:	b29b      	uxth	r3, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800c62c:	461c      	mov	r4, r3
                       p_connection_update_complete_event->Supervision_Timeout*10);
 800c62e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c630:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800c634:	b29b      	uxth	r3, r3
 800c636:	461a      	mov	r2, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800c638:	4613      	mov	r3, r2
 800c63a:	009b      	lsls	r3, r3, #2
 800c63c:	4413      	add	r3, r2
 800c63e:	005b      	lsls	r3, r3, #1
 800c640:	9301      	str	r3, [sp, #4]
 800c642:	9400      	str	r4, [sp, #0]
 800c644:	4602      	mov	r2, r0
 800c646:	460b      	mov	r3, r1
 800c648:	486f      	ldr	r0, [pc, #444]	@ (800c808 <SVCCTL_App_Notification+0x300>)
 800c64a:	f001 fcb9 	bl	800dfc0 <iprintf>
          break;
 800c64e:	e0cb      	b.n	800c7e8 <SVCCTL_App_Notification+0x2e0>
          p_evt_le_phy_update_complete = (hci_le_phy_update_complete_event_rp0*)p_meta_evt->data;
 800c650:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c652:	3301      	adds	r3, #1
 800c654:	633b      	str	r3, [r7, #48]	@ 0x30
          APP_DBG_MSG("==>> HCI_LE_PHY_UPDATE_COMPLETE_SUBEVT_CODE - ");
 800c656:	486d      	ldr	r0, [pc, #436]	@ (800c80c <SVCCTL_App_Notification+0x304>)
 800c658:	f001 fcb2 	bl	800dfc0 <iprintf>
          if (p_evt_le_phy_update_complete->Status == 0)
 800c65c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c65e:	781b      	ldrb	r3, [r3, #0]
 800c660:	2b00      	cmp	r3, #0
 800c662:	d103      	bne.n	800c66c <SVCCTL_App_Notification+0x164>
            APP_DBG_MSG("status ok \n");
 800c664:	486a      	ldr	r0, [pc, #424]	@ (800c810 <SVCCTL_App_Notification+0x308>)
 800c666:	f001 fd1b 	bl	800e0a0 <puts>
 800c66a:	e002      	b.n	800c672 <SVCCTL_App_Notification+0x16a>
            APP_DBG_MSG("status nok \n");
 800c66c:	4869      	ldr	r0, [pc, #420]	@ (800c814 <SVCCTL_App_Notification+0x30c>)
 800c66e:	f001 fd17 	bl	800e0a0 <puts>
          ret = hci_le_read_phy(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, &Tx_phy, &Rx_phy);
 800c672:	4b5e      	ldr	r3, [pc, #376]	@ (800c7ec <SVCCTL_App_Notification+0x2e4>)
 800c674:	8adb      	ldrh	r3, [r3, #22]
 800c676:	f107 021e 	add.w	r2, r7, #30
 800c67a:	f107 011f 	add.w	r1, r7, #31
 800c67e:	4618      	mov	r0, r3
 800c680:	f7fd fdce 	bl	800a220 <hci_le_read_phy>
 800c684:	4603      	mov	r3, r0
 800c686:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
          if (ret != BLE_STATUS_SUCCESS)
 800c68a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d003      	beq.n	800c69a <SVCCTL_App_Notification+0x192>
            APP_DBG_MSG("==>> hci_le_read_phy : fail\n\r");
 800c692:	4861      	ldr	r0, [pc, #388]	@ (800c818 <SVCCTL_App_Notification+0x310>)
 800c694:	f001 fc94 	bl	800dfc0 <iprintf>
          break;
 800c698:	e0a6      	b.n	800c7e8 <SVCCTL_App_Notification+0x2e0>
            APP_DBG_MSG("==>> hci_le_read_phy - Success \n");
 800c69a:	4860      	ldr	r0, [pc, #384]	@ (800c81c <SVCCTL_App_Notification+0x314>)
 800c69c:	f001 fd00 	bl	800e0a0 <puts>
            if ((Tx_phy == TX_2M) && (Rx_phy == RX_2M))
 800c6a0:	7ffb      	ldrb	r3, [r7, #31]
 800c6a2:	2b02      	cmp	r3, #2
 800c6a4:	d10a      	bne.n	800c6bc <SVCCTL_App_Notification+0x1b4>
 800c6a6:	7fbb      	ldrb	r3, [r7, #30]
 800c6a8:	2b02      	cmp	r3, #2
 800c6aa:	d107      	bne.n	800c6bc <SVCCTL_App_Notification+0x1b4>
              APP_DBG_MSG("==>> PHY Param  TX= %d, RX= %d \n\r", Tx_phy, Rx_phy);
 800c6ac:	7ffb      	ldrb	r3, [r7, #31]
 800c6ae:	4619      	mov	r1, r3
 800c6b0:	7fbb      	ldrb	r3, [r7, #30]
 800c6b2:	461a      	mov	r2, r3
 800c6b4:	485a      	ldr	r0, [pc, #360]	@ (800c820 <SVCCTL_App_Notification+0x318>)
 800c6b6:	f001 fc83 	bl	800dfc0 <iprintf>
          break;
 800c6ba:	e095      	b.n	800c7e8 <SVCCTL_App_Notification+0x2e0>
              APP_DBG_MSG("==>> PHY Param  TX= %d, RX= %d \n\r", Tx_phy, Rx_phy);
 800c6bc:	7ffb      	ldrb	r3, [r7, #31]
 800c6be:	4619      	mov	r1, r3
 800c6c0:	7fbb      	ldrb	r3, [r7, #30]
 800c6c2:	461a      	mov	r2, r3
 800c6c4:	4856      	ldr	r0, [pc, #344]	@ (800c820 <SVCCTL_App_Notification+0x318>)
 800c6c6:	f001 fc7b 	bl	800dfc0 <iprintf>
          break;
 800c6ca:	e08d      	b.n	800c7e8 <SVCCTL_App_Notification+0x2e0>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 800c6cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c6ce:	3301      	adds	r3, #1
 800c6d0:	62bb      	str	r3, [r7, #40]	@ 0x28
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE - Connection handle: 0x%x\n", p_connection_complete_event->Connection_Handle);
 800c6d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6d4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800c6d8:	b29b      	uxth	r3, r3
 800c6da:	4619      	mov	r1, r3
 800c6dc:	4851      	ldr	r0, [pc, #324]	@ (800c824 <SVCCTL_App_Notification+0x31c>)
 800c6de:	f001 fc6f 	bl	800dfc0 <iprintf>
                      p_connection_complete_event->Peer_Address[5],
 800c6e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6e4:	7a9b      	ldrb	r3, [r3, #10]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 800c6e6:	4618      	mov	r0, r3
                      p_connection_complete_event->Peer_Address[4],
 800c6e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6ea:	7a5b      	ldrb	r3, [r3, #9]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 800c6ec:	461c      	mov	r4, r3
                      p_connection_complete_event->Peer_Address[3],
 800c6ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6f0:	7a1b      	ldrb	r3, [r3, #8]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 800c6f2:	461d      	mov	r5, r3
                      p_connection_complete_event->Peer_Address[2],
 800c6f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6f6:	79db      	ldrb	r3, [r3, #7]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 800c6f8:	461a      	mov	r2, r3
                      p_connection_complete_event->Peer_Address[1],
 800c6fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6fc:	799b      	ldrb	r3, [r3, #6]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 800c6fe:	4619      	mov	r1, r3
                      p_connection_complete_event->Peer_Address[0]);
 800c700:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c702:	795b      	ldrb	r3, [r3, #5]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 800c704:	9302      	str	r3, [sp, #8]
 800c706:	9101      	str	r1, [sp, #4]
 800c708:	9200      	str	r2, [sp, #0]
 800c70a:	462b      	mov	r3, r5
 800c70c:	4622      	mov	r2, r4
 800c70e:	4601      	mov	r1, r0
 800c710:	4845      	ldr	r0, [pc, #276]	@ (800c828 <SVCCTL_App_Notification+0x320>)
 800c712:	f001 fc55 	bl	800dfc0 <iprintf>
                      p_connection_complete_event->Conn_Interval*1.25,
 800c716:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c718:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 800c71c:	b29b      	uxth	r3, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800c71e:	4618      	mov	r0, r3
 800c720:	f7f4 f802 	bl	8000728 <__aeabi_i2d>
 800c724:	f04f 0200 	mov.w	r2, #0
 800c728:	4b36      	ldr	r3, [pc, #216]	@ (800c804 <SVCCTL_App_Notification+0x2fc>)
 800c72a:	f7f3 fd81 	bl	8000230 <__aeabi_dmul>
 800c72e:	4602      	mov	r2, r0
 800c730:	460b      	mov	r3, r1
 800c732:	4610      	mov	r0, r2
 800c734:	4619      	mov	r1, r3
                      p_connection_complete_event->Conn_Latency,
 800c736:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c738:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 800c73c:	b29b      	uxth	r3, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800c73e:	461c      	mov	r4, r3
                      p_connection_complete_event->Supervision_Timeout*10
 800c740:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c742:	f8b3 300f 	ldrh.w	r3, [r3, #15]
 800c746:	b29b      	uxth	r3, r3
 800c748:	461a      	mov	r2, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800c74a:	4613      	mov	r3, r2
 800c74c:	009b      	lsls	r3, r3, #2
 800c74e:	4413      	add	r3, r2
 800c750:	005b      	lsls	r3, r3, #1
 800c752:	9301      	str	r3, [sp, #4]
 800c754:	9400      	str	r4, [sp, #0]
 800c756:	4602      	mov	r2, r0
 800c758:	460b      	mov	r3, r1
 800c75a:	482b      	ldr	r0, [pc, #172]	@ (800c808 <SVCCTL_App_Notification+0x300>)
 800c75c:	f001 fc30 	bl	800dfc0 <iprintf>
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 800c760:	4b22      	ldr	r3, [pc, #136]	@ (800c7ec <SVCCTL_App_Notification+0x2e4>)
 800c762:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c766:	2b04      	cmp	r3, #4
 800c768:	d104      	bne.n	800c774 <SVCCTL_App_Notification+0x26c>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 800c76a:	4b20      	ldr	r3, [pc, #128]	@ (800c7ec <SVCCTL_App_Notification+0x2e4>)
 800c76c:	2206      	movs	r2, #6
 800c76e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 800c772:	e003      	b.n	800c77c <SVCCTL_App_Notification+0x274>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 800c774:	4b1d      	ldr	r3, [pc, #116]	@ (800c7ec <SVCCTL_App_Notification+0x2e4>)
 800c776:	2205      	movs	r2, #5
 800c778:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 800c77c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c77e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800c782:	b29a      	uxth	r2, r3
 800c784:	4b19      	ldr	r3, [pc, #100]	@ (800c7ec <SVCCTL_App_Notification+0x2e4>)
 800c786:	82da      	strh	r2, [r3, #22]
          HandleNotification.P2P_Evt_Opcode = PEER_CONN_HANDLE_EVT;
 800c788:	4b1b      	ldr	r3, [pc, #108]	@ (800c7f8 <SVCCTL_App_Notification+0x2f0>)
 800c78a:	2200      	movs	r2, #0
 800c78c:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800c78e:	4b17      	ldr	r3, [pc, #92]	@ (800c7ec <SVCCTL_App_Notification+0x2e4>)
 800c790:	8ada      	ldrh	r2, [r3, #22]
 800c792:	4b19      	ldr	r3, [pc, #100]	@ (800c7f8 <SVCCTL_App_Notification+0x2f0>)
 800c794:	805a      	strh	r2, [r3, #2]
          P2PS_APP_Notification(&HandleNotification);
 800c796:	4818      	ldr	r0, [pc, #96]	@ (800c7f8 <SVCCTL_App_Notification+0x2f0>)
 800c798:	f000 fd8e 	bl	800d2b8 <P2PS_APP_Notification>
          bdaddr= BleGetBdAddress();
 800c79c:	f000 fc26 	bl	800cfec <BleGetBdAddress>
 800c7a0:	6278      	str	r0, [r7, #36]	@ 0x24
          sprintf(BdAddress, "BD_ad=%02x%02x%02x%02x%02x%02x", bdaddr[5],bdaddr[4],bdaddr[3],bdaddr[2],bdaddr[1],bdaddr[0]);
 800c7a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7a4:	3305      	adds	r3, #5
 800c7a6:	781b      	ldrb	r3, [r3, #0]
 800c7a8:	461d      	mov	r5, r3
 800c7aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7ac:	3304      	adds	r3, #4
 800c7ae:	781b      	ldrb	r3, [r3, #0]
 800c7b0:	461e      	mov	r6, r3
 800c7b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7b4:	3303      	adds	r3, #3
 800c7b6:	781b      	ldrb	r3, [r3, #0]
 800c7b8:	461a      	mov	r2, r3
 800c7ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7bc:	3302      	adds	r3, #2
 800c7be:	781b      	ldrb	r3, [r3, #0]
 800c7c0:	4619      	mov	r1, r3
 800c7c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7c4:	3301      	adds	r3, #1
 800c7c6:	781b      	ldrb	r3, [r3, #0]
 800c7c8:	461c      	mov	r4, r3
 800c7ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7cc:	781b      	ldrb	r3, [r3, #0]
 800c7ce:	f107 0008 	add.w	r0, r7, #8
 800c7d2:	9303      	str	r3, [sp, #12]
 800c7d4:	9402      	str	r4, [sp, #8]
 800c7d6:	9101      	str	r1, [sp, #4]
 800c7d8:	9200      	str	r2, [sp, #0]
 800c7da:	4633      	mov	r3, r6
 800c7dc:	462a      	mov	r2, r5
 800c7de:	4907      	ldr	r1, [pc, #28]	@ (800c7fc <SVCCTL_App_Notification+0x2f4>)
 800c7e0:	f001 fc66 	bl	800e0b0 <siprintf>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 800c7e4:	e000      	b.n	800c7e8 <SVCCTL_App_Notification+0x2e0>
          break;
 800c7e6:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 800c7e8:	e10f      	b.n	800ca0a <SVCCTL_App_Notification+0x502>
 800c7ea:	bf00      	nop
 800c7ec:	200004c8 	.word	0x200004c8
 800c7f0:	0800f794 	.word	0x0800f794
 800c7f4:	0800f7c0 	.word	0x0800f7c0
 800c7f8:	20000560 	.word	0x20000560
 800c7fc:	0800f6a0 	.word	0x0800f6a0
 800c800:	0800f7fc 	.word	0x0800f7fc
 800c804:	3ff40000 	.word	0x3ff40000
 800c808:	0800f830 	.word	0x0800f830
 800c80c:	0800f89c 	.word	0x0800f89c
 800c810:	0800f8cc 	.word	0x0800f8cc
 800c814:	0800f8d8 	.word	0x0800f8d8
 800c818:	0800f8e4 	.word	0x0800f8e4
 800c81c:	0800f904 	.word	0x0800f904
 800c820:	0800f924 	.word	0x0800f924
 800c824:	0800f948 	.word	0x0800f948
 800c828:	0800f990 	.word	0x0800f990
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 800c82c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c82e:	3302      	adds	r3, #2
 800c830:	63fb      	str	r3, [r7, #60]	@ 0x3c
      switch (p_blecore_evt->ecode)
 800c832:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c834:	881b      	ldrh	r3, [r3, #0]
 800c836:	b29b      	uxth	r3, r3
 800c838:	f640 420e 	movw	r2, #3086	@ 0xc0e
 800c83c:	4293      	cmp	r3, r2
 800c83e:	f000 80d6 	beq.w	800c9ee <SVCCTL_App_Notification+0x4e6>
 800c842:	f640 420e 	movw	r2, #3086	@ 0xc0e
 800c846:	4293      	cmp	r3, r2
 800c848:	f300 80de 	bgt.w	800ca08 <SVCCTL_App_Notification+0x500>
 800c84c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c850:	f000 80d6 	beq.w	800ca00 <SVCCTL_App_Notification+0x4f8>
 800c854:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c858:	f300 80d6 	bgt.w	800ca08 <SVCCTL_App_Notification+0x500>
 800c85c:	2b04      	cmp	r3, #4
 800c85e:	f000 80be 	beq.w	800c9de <SVCCTL_App_Notification+0x4d6>
 800c862:	2b04      	cmp	r3, #4
 800c864:	f2c0 80d0 	blt.w	800ca08 <SVCCTL_App_Notification+0x500>
 800c868:	f240 420a 	movw	r2, #1034	@ 0x40a
 800c86c:	4293      	cmp	r3, r2
 800c86e:	f300 80cb 	bgt.w	800ca08 <SVCCTL_App_Notification+0x500>
 800c872:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c876:	f2c0 80c7 	blt.w	800ca08 <SVCCTL_App_Notification+0x500>
 800c87a:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 800c87e:	2b0a      	cmp	r3, #10
 800c880:	f200 80c2 	bhi.w	800ca08 <SVCCTL_App_Notification+0x500>
 800c884:	a201      	add	r2, pc, #4	@ (adr r2, 800c88c <SVCCTL_App_Notification+0x384>)
 800c886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c88a:	bf00      	nop
 800c88c:	0800c8b9 	.word	0x0800c8b9
 800c890:	0800c9a1 	.word	0x0800c9a1
 800c894:	0800c8c1 	.word	0x0800c8c1
 800c898:	0800c8f7 	.word	0x0800c8f7
 800c89c:	0800c8ff 	.word	0x0800c8ff
 800c8a0:	0800c907 	.word	0x0800c907
 800c8a4:	0800ca09 	.word	0x0800ca09
 800c8a8:	0800c9d7 	.word	0x0800c9d7
 800c8ac:	0800c93b 	.word	0x0800c93b
 800c8b0:	0800c94b 	.word	0x0800c94b
 800c8b4:	0800c943 	.word	0x0800c943
          APP_DBG_MSG(">>== ACI_GAP_LIMITED_DISCOVERABLE_VSEVT_CODE \n");
 800c8b8:	4856      	ldr	r0, [pc, #344]	@ (800ca14 <SVCCTL_App_Notification+0x50c>)
 800c8ba:	f001 fbf1 	bl	800e0a0 <puts>
          break; /* ACI_GAP_LIMITED_DISCOVERABLE_VSEVT_CODE */
 800c8be:	e0a0      	b.n	800ca02 <SVCCTL_App_Notification+0x4fa>
          APP_DBG_MSG(">>== ACI_GAP_PASS_KEY_REQ_VSEVT_CODE \n");
 800c8c0:	4855      	ldr	r0, [pc, #340]	@ (800ca18 <SVCCTL_App_Notification+0x510>)
 800c8c2:	f001 fbed 	bl	800e0a0 <puts>
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,123456);
 800c8c6:	4b55      	ldr	r3, [pc, #340]	@ (800ca1c <SVCCTL_App_Notification+0x514>)
 800c8c8:	8adb      	ldrh	r3, [r3, #22]
 800c8ca:	4955      	ldr	r1, [pc, #340]	@ (800ca20 <SVCCTL_App_Notification+0x518>)
 800c8cc:	4618      	mov	r0, r3
 800c8ce:	f7fc fddd 	bl	800948c <aci_gap_pass_key_resp>
 800c8d2:	4603      	mov	r3, r0
 800c8d4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
          if (ret != BLE_STATUS_SUCCESS)
 800c8d8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d006      	beq.n	800c8ee <SVCCTL_App_Notification+0x3e6>
            APP_DBG_MSG("==>> aci_gap_pass_key_resp : Fail, reason: 0x%x\n", ret);
 800c8e0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800c8e4:	4619      	mov	r1, r3
 800c8e6:	484f      	ldr	r0, [pc, #316]	@ (800ca24 <SVCCTL_App_Notification+0x51c>)
 800c8e8:	f001 fb6a 	bl	800dfc0 <iprintf>
          break; /* ACI_GAP_PASS_KEY_REQ_VSEVT_CODE */
 800c8ec:	e089      	b.n	800ca02 <SVCCTL_App_Notification+0x4fa>
            APP_DBG_MSG("==>> aci_gap_pass_key_resp : Success \n");
 800c8ee:	484e      	ldr	r0, [pc, #312]	@ (800ca28 <SVCCTL_App_Notification+0x520>)
 800c8f0:	f001 fbd6 	bl	800e0a0 <puts>
          break; /* ACI_GAP_PASS_KEY_REQ_VSEVT_CODE */
 800c8f4:	e085      	b.n	800ca02 <SVCCTL_App_Notification+0x4fa>
          APP_DBG_MSG(">>== ACI_GAP_AUTHORIZATION_REQ_VSEVT_CODE\n");
 800c8f6:	484d      	ldr	r0, [pc, #308]	@ (800ca2c <SVCCTL_App_Notification+0x524>)
 800c8f8:	f001 fbd2 	bl	800e0a0 <puts>
          break; /* ACI_GAP_AUTHORIZATION_REQ_VSEVT_CODE */
 800c8fc:	e081      	b.n	800ca02 <SVCCTL_App_Notification+0x4fa>
          APP_DBG_MSG("==>> ACI_GAP_PERIPHERAL_SECURITY_INITIATED_VSEVT_CODE \n");
 800c8fe:	484c      	ldr	r0, [pc, #304]	@ (800ca30 <SVCCTL_App_Notification+0x528>)
 800c900:	f001 fbce 	bl	800e0a0 <puts>
          break; /* ACI_GAP_PERIPHERAL_SECURITY_INITIATED_VSEVT_CODE */
 800c904:	e07d      	b.n	800ca02 <SVCCTL_App_Notification+0x4fa>
          APP_DBG_MSG("==>> ACI_GAP_BOND_LOST_VSEVT_CODE \n");
 800c906:	484b      	ldr	r0, [pc, #300]	@ (800ca34 <SVCCTL_App_Notification+0x52c>)
 800c908:	f001 fbca 	bl	800e0a0 <puts>
          ret = aci_gap_allow_rebond(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 800c90c:	4b43      	ldr	r3, [pc, #268]	@ (800ca1c <SVCCTL_App_Notification+0x514>)
 800c90e:	8adb      	ldrh	r3, [r3, #22]
 800c910:	4618      	mov	r0, r3
 800c912:	f7fc ff65 	bl	80097e0 <aci_gap_allow_rebond>
 800c916:	4603      	mov	r3, r0
 800c918:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
          if (ret != BLE_STATUS_SUCCESS)
 800c91c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800c920:	2b00      	cmp	r3, #0
 800c922:	d006      	beq.n	800c932 <SVCCTL_App_Notification+0x42a>
            APP_DBG_MSG("==>> aci_gap_allow_rebond : Fail, reason: 0x%x\n", ret);
 800c924:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800c928:	4619      	mov	r1, r3
 800c92a:	4843      	ldr	r0, [pc, #268]	@ (800ca38 <SVCCTL_App_Notification+0x530>)
 800c92c:	f001 fb48 	bl	800dfc0 <iprintf>
          break; /* ACI_GAP_BOND_LOST_VSEVT_CODE */
 800c930:	e067      	b.n	800ca02 <SVCCTL_App_Notification+0x4fa>
            APP_DBG_MSG("==>> aci_gap_allow_rebond : Success \n");
 800c932:	4842      	ldr	r0, [pc, #264]	@ (800ca3c <SVCCTL_App_Notification+0x534>)
 800c934:	f001 fbb4 	bl	800e0a0 <puts>
          break; /* ACI_GAP_BOND_LOST_VSEVT_CODE */
 800c938:	e063      	b.n	800ca02 <SVCCTL_App_Notification+0x4fa>
          APP_DBG_MSG(">>== ACI_GAP_ADDR_NOT_RESOLVED_VSEVT_CODE \n");
 800c93a:	4841      	ldr	r0, [pc, #260]	@ (800ca40 <SVCCTL_App_Notification+0x538>)
 800c93c:	f001 fbb0 	bl	800e0a0 <puts>
          break; /* ACI_GAP_ADDR_NOT_RESOLVED_VSEVT_CODE */
 800c940:	e05f      	b.n	800ca02 <SVCCTL_App_Notification+0x4fa>
          APP_DBG_MSG(">>== ACI_GAP_KEYPRESS_NOTIFICATION_VSEVT_CODE\n");
 800c942:	4840      	ldr	r0, [pc, #256]	@ (800ca44 <SVCCTL_App_Notification+0x53c>)
 800c944:	f001 fbac 	bl	800e0a0 <puts>
          break; /* ACI_GAP_KEYPRESS_NOTIFICATION_VSEVT_CODE */    
 800c948:	e05b      	b.n	800ca02 <SVCCTL_App_Notification+0x4fa>
          APP_DBG_MSG(">>== ACI_GAP_NUMERIC_COMPARISON_VALUE_VSEVT_CODE\n");
 800c94a:	483f      	ldr	r0, [pc, #252]	@ (800ca48 <SVCCTL_App_Notification+0x540>)
 800c94c:	f001 fba8 	bl	800e0a0 <puts>
                      ((aci_gap_numeric_comparison_value_event_rp0 *)(p_blecore_evt->data))->Numeric_Value);
 800c950:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c952:	3302      	adds	r3, #2
          APP_DBG_MSG("     - numeric_value = %ld\n",
 800c954:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800c958:	4619      	mov	r1, r3
 800c95a:	483c      	ldr	r0, [pc, #240]	@ (800ca4c <SVCCTL_App_Notification+0x544>)
 800c95c:	f001 fb30 	bl	800dfc0 <iprintf>
                      ((aci_gap_numeric_comparison_value_event_rp0 *)(p_blecore_evt->data))->Numeric_Value);
 800c960:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c962:	3302      	adds	r3, #2
          APP_DBG_MSG("     - Hex_value = %lx\n",
 800c964:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800c968:	4619      	mov	r1, r3
 800c96a:	4839      	ldr	r0, [pc, #228]	@ (800ca50 <SVCCTL_App_Notification+0x548>)
 800c96c:	f001 fb28 	bl	800dfc0 <iprintf>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES); /* CONFIRM_YES = 1 */
 800c970:	4b2a      	ldr	r3, [pc, #168]	@ (800ca1c <SVCCTL_App_Notification+0x514>)
 800c972:	8adb      	ldrh	r3, [r3, #22]
 800c974:	2101      	movs	r1, #1
 800c976:	4618      	mov	r0, r3
 800c978:	f7fc ff86 	bl	8009888 <aci_gap_numeric_comparison_value_confirm_yesno>
 800c97c:	4603      	mov	r3, r0
 800c97e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
          if (ret != BLE_STATUS_SUCCESS)
 800c982:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800c986:	2b00      	cmp	r3, #0
 800c988:	d006      	beq.n	800c998 <SVCCTL_App_Notification+0x490>
            APP_DBG_MSG("==>> aci_gap_numeric_comparison_value_confirm_yesno-->YES : Fail, reason: 0x%x\n", ret);
 800c98a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800c98e:	4619      	mov	r1, r3
 800c990:	4830      	ldr	r0, [pc, #192]	@ (800ca54 <SVCCTL_App_Notification+0x54c>)
 800c992:	f001 fb15 	bl	800dfc0 <iprintf>
          break;
 800c996:	e034      	b.n	800ca02 <SVCCTL_App_Notification+0x4fa>
            APP_DBG_MSG("==>> aci_gap_numeric_comparison_value_confirm_yesno-->YES : Success \n");
 800c998:	482f      	ldr	r0, [pc, #188]	@ (800ca58 <SVCCTL_App_Notification+0x550>)
 800c99a:	f001 fb81 	bl	800e0a0 <puts>
          break;
 800c99e:	e030      	b.n	800ca02 <SVCCTL_App_Notification+0x4fa>
          pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 800c9a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c9a2:	3302      	adds	r3, #2
 800c9a4:	63bb      	str	r3, [r7, #56]	@ 0x38
          APP_DBG_MSG(">>== ACI_GAP_PAIRING_COMPLETE_VSEVT_CODE\n");
 800c9a6:	482d      	ldr	r0, [pc, #180]	@ (800ca5c <SVCCTL_App_Notification+0x554>)
 800c9a8:	f001 fb7a 	bl	800e0a0 <puts>
          if (pairing_complete->Status == 0)
 800c9ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9ae:	789b      	ldrb	r3, [r3, #2]
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d103      	bne.n	800c9bc <SVCCTL_App_Notification+0x4b4>
            APP_DBG_MSG("     - Pairing Success\n");
 800c9b4:	482a      	ldr	r0, [pc, #168]	@ (800ca60 <SVCCTL_App_Notification+0x558>)
 800c9b6:	f001 fb73 	bl	800e0a0 <puts>
 800c9ba:	e008      	b.n	800c9ce <SVCCTL_App_Notification+0x4c6>
            APP_DBG_MSG("     - Pairing KO \n     - Status: 0x%x\n     - Reason: 0x%x\n",pairing_complete->Status, pairing_complete->Reason);
 800c9bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9be:	789b      	ldrb	r3, [r3, #2]
 800c9c0:	4619      	mov	r1, r3
 800c9c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9c4:	78db      	ldrb	r3, [r3, #3]
 800c9c6:	461a      	mov	r2, r3
 800c9c8:	4826      	ldr	r0, [pc, #152]	@ (800ca64 <SVCCTL_App_Notification+0x55c>)
 800c9ca:	f001 faf9 	bl	800dfc0 <iprintf>
          APP_DBG_MSG("\n");
 800c9ce:	200a      	movs	r0, #10
 800c9d0:	f001 fb08 	bl	800dfe4 <putchar>
          break;    
 800c9d4:	e015      	b.n	800ca02 <SVCCTL_App_Notification+0x4fa>
          APP_DBG_MSG(">>== ACI_GAP_PROC_COMPLETE_VSEVT_CODE \r");
 800c9d6:	4824      	ldr	r0, [pc, #144]	@ (800ca68 <SVCCTL_App_Notification+0x560>)
 800c9d8:	f001 faf2 	bl	800dfc0 <iprintf>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 800c9dc:	e011      	b.n	800ca02 <SVCCTL_App_Notification+0x4fa>
          HW_TS_Start(BleApplicationContext.SwitchOffGPIO_timer_Id, (uint32_t)LED_ON_TIMEOUT);
 800c9de:	4b0f      	ldr	r3, [pc, #60]	@ (800ca1c <SVCCTL_App_Notification+0x514>)
 800c9e0:	f893 3086 	ldrb.w	r3, [r3, #134]	@ 0x86
 800c9e4:	210a      	movs	r1, #10
 800c9e6:	4618      	mov	r0, r3
 800c9e8:	f7f5 fbc4 	bl	8002174 <HW_TS_Start>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 800c9ec:	e009      	b.n	800ca02 <SVCCTL_App_Notification+0x4fa>
          APP_DBG_MSG(">>== ACI_GATT_INDICATION_VSEVT_CODE \r");
 800c9ee:	481f      	ldr	r0, [pc, #124]	@ (800ca6c <SVCCTL_App_Notification+0x564>)
 800c9f0:	f001 fae6 	bl	800dfc0 <iprintf>
          aci_gatt_confirm_indication(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 800c9f4:	4b09      	ldr	r3, [pc, #36]	@ (800ca1c <SVCCTL_App_Notification+0x514>)
 800c9f6:	8adb      	ldrh	r3, [r3, #22]
 800c9f8:	4618      	mov	r0, r3
 800c9fa:	f7fd fa58 	bl	8009eae <aci_gatt_confirm_indication>
        break;
 800c9fe:	e000      	b.n	800ca02 <SVCCTL_App_Notification+0x4fa>
          break;
 800ca00:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800ca02:	e001      	b.n	800ca08 <SVCCTL_App_Notification+0x500>
      break;
 800ca04:	bf00      	nop
 800ca06:	e000      	b.n	800ca0a <SVCCTL_App_Notification+0x502>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800ca08:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 800ca0a:	2301      	movs	r3, #1
}
 800ca0c:	4618      	mov	r0, r3
 800ca0e:	374c      	adds	r7, #76	@ 0x4c
 800ca10:	46bd      	mov	sp, r7
 800ca12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ca14:	0800f9e0 	.word	0x0800f9e0
 800ca18:	0800fa10 	.word	0x0800fa10
 800ca1c:	200004c8 	.word	0x200004c8
 800ca20:	0001e240 	.word	0x0001e240
 800ca24:	0800fa38 	.word	0x0800fa38
 800ca28:	0800fa6c 	.word	0x0800fa6c
 800ca2c:	0800fa94 	.word	0x0800fa94
 800ca30:	0800fac0 	.word	0x0800fac0
 800ca34:	0800faf8 	.word	0x0800faf8
 800ca38:	0800fb1c 	.word	0x0800fb1c
 800ca3c:	0800fb4c 	.word	0x0800fb4c
 800ca40:	0800fb74 	.word	0x0800fb74
 800ca44:	0800fba0 	.word	0x0800fba0
 800ca48:	0800fbd0 	.word	0x0800fbd0
 800ca4c:	0800fc04 	.word	0x0800fc04
 800ca50:	0800fc20 	.word	0x0800fc20
 800ca54:	0800fc38 	.word	0x0800fc38
 800ca58:	0800fc88 	.word	0x0800fc88
 800ca5c:	0800fcd0 	.word	0x0800fcd0
 800ca60:	0800fcfc 	.word	0x0800fcfc
 800ca64:	0800fd14 	.word	0x0800fd14
 800ca68:	0800fd50 	.word	0x0800fd50
 800ca6c:	0800fd78 	.word	0x0800fd78

0800ca70 <APP_BLE_Send_EEGData_Notification>:
 *
 * Hermes Characteristics notifications
 *
 **/
uint8_t  APP_BLE_Send_EEGData_Notification(uint8_t* payload, uint8_t length)
{
 800ca70:	b580      	push	{r7, lr}
 800ca72:	b086      	sub	sp, #24
 800ca74:	af02      	add	r7, sp, #8
 800ca76:	6078      	str	r0, [r7, #4]
 800ca78:	460b      	mov	r3, r1
 800ca7a:	70fb      	strb	r3, [r7, #3]
    uint8_t  ret = BLE_STATUS_INVALID_PARAMS;
 800ca7c:	2392      	movs	r3, #146	@ 0x92
 800ca7e:	73fb      	strb	r3, [r7, #15]

    if(length <= NEW_NOTIFY_CHAR_VALUE_LENGTH)
 800ca80:	78fb      	ldrb	r3, [r7, #3]
 800ca82:	2bf1      	cmp	r3, #241	@ 0xf1
 800ca84:	d80e      	bhi.n	800caa4 <APP_BLE_Send_EEGData_Notification+0x34>
    {
        ret = aci_gatt_update_char_value(BleApplicationContext.BleApplicationContext_legacy.eeg_service_handle,
 800ca86:	4b0a      	ldr	r3, [pc, #40]	@ (800cab0 <APP_BLE_Send_EEGData_Notification+0x40>)
 800ca88:	f8b3 007e 	ldrh.w	r0, [r3, #126]	@ 0x7e
 800ca8c:	4b08      	ldr	r3, [pc, #32]	@ (800cab0 <APP_BLE_Send_EEGData_Notification+0x40>)
 800ca8e:	f8b3 1088 	ldrh.w	r1, [r3, #136]	@ 0x88
 800ca92:	78fa      	ldrb	r2, [r7, #3]
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	9300      	str	r3, [sp, #0]
 800ca98:	4613      	mov	r3, r2
 800ca9a:	2200      	movs	r2, #0
 800ca9c:	f7fd f95e 	bl	8009d5c <aci_gatt_update_char_value>
 800caa0:	4603      	mov	r3, r0
 800caa2:	73fb      	strb	r3, [r7, #15]
                                        0, /* offset */
                                        length, /* data length */
                                        payload);
    }

    return ret;
 800caa4:	7bfb      	ldrb	r3, [r7, #15]
}
 800caa6:	4618      	mov	r0, r3
 800caa8:	3710      	adds	r7, #16
 800caaa:	46bd      	mov	sp, r7
 800caac:	bd80      	pop	{r7, pc}
 800caae:	bf00      	nop
 800cab0:	200004c8 	.word	0x200004c8

0800cab4 <APP_BLE_Send_Event_Notification>:


uint8_t  APP_BLE_Send_Event_Notification(event_packet_t* payload)
{
 800cab4:	b580      	push	{r7, lr}
 800cab6:	b086      	sub	sp, #24
 800cab8:	af02      	add	r7, sp, #8
 800caba:	6078      	str	r0, [r7, #4]
    uint8_t  ret = BLE_STATUS_INVALID_PARAMS;
 800cabc:	2392      	movs	r3, #146	@ 0x92
 800cabe:	73fb      	strb	r3, [r7, #15]

	ret = aci_gatt_update_char_value(BleApplicationContext.BleApplicationContext_legacy.event_service_handle,
 800cac0:	4b09      	ldr	r3, [pc, #36]	@ (800cae8 <APP_BLE_Send_Event_Notification+0x34>)
 800cac2:	f8b3 0080 	ldrh.w	r0, [r3, #128]	@ 0x80
 800cac6:	4b08      	ldr	r3, [pc, #32]	@ (800cae8 <APP_BLE_Send_Event_Notification+0x34>)
 800cac8:	f8b3 108a 	ldrh.w	r1, [r3, #138]	@ 0x8a
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	9300      	str	r3, [sp, #0]
 800cad0:	2303      	movs	r3, #3
 800cad2:	2200      	movs	r2, #0
 800cad4:	f7fd f942 	bl	8009d5c <aci_gatt_update_char_value>
 800cad8:	4603      	mov	r3, r0
 800cada:	73fb      	strb	r3, [r7, #15]
									BleApplicationContext.event_char_handle,
									0, /* offset */
									sizeof(event_packet_t), /* data length */
									(uint8_t*)payload);

    return ret;
 800cadc:	7bfb      	ldrb	r3, [r7, #15]
}
 800cade:	4618      	mov	r0, r3
 800cae0:	3710      	adds	r7, #16
 800cae2:	46bd      	mov	sp, r7
 800cae4:	bd80      	pop	{r7, pc}
 800cae6:	bf00      	nop
 800cae8:	200004c8 	.word	0x200004c8

0800caec <APP_BLE_Send_IMU_Notification>:



uint8_t  APP_BLE_Send_IMU_Notification(uint8_t* accel, uint8_t* gyro)
{
 800caec:	b580      	push	{r7, lr}
 800caee:	b086      	sub	sp, #24
 800caf0:	af02      	add	r7, sp, #8
 800caf2:	6078      	str	r0, [r7, #4]
 800caf4:	6039      	str	r1, [r7, #0]
    uint8_t  ret = BLE_STATUS_INVALID_PARAMS;
 800caf6:	2392      	movs	r3, #146	@ 0x92
 800caf8:	73fb      	strb	r3, [r7, #15]

	ret = aci_gatt_update_char_value(BleApplicationContext.BleApplicationContext_legacy.motion_service_handle,
 800cafa:	4b09      	ldr	r3, [pc, #36]	@ (800cb20 <APP_BLE_Send_IMU_Notification+0x34>)
 800cafc:	f8b3 0082 	ldrh.w	r0, [r3, #130]	@ 0x82
 800cb00:	4b07      	ldr	r3, [pc, #28]	@ (800cb20 <APP_BLE_Send_IMU_Notification+0x34>)
 800cb02:	f8b3 108c 	ldrh.w	r1, [r3, #140]	@ 0x8c
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	9300      	str	r3, [sp, #0]
 800cb0a:	23b4      	movs	r3, #180	@ 0xb4
 800cb0c:	2200      	movs	r2, #0
 800cb0e:	f7fd f925 	bl	8009d5c <aci_gatt_update_char_value>
 800cb12:	4603      	mov	r3, r0
 800cb14:	73fb      	strb	r3, [r7, #15]
									BleApplicationContext.gyro_char_handle,
									0,
									60,
									gyro);
    */
    return ret;
 800cb16:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb18:	4618      	mov	r0, r3
 800cb1a:	3710      	adds	r7, #16
 800cb1c:	46bd      	mov	sp, r7
 800cb1e:	bd80      	pop	{r7, pc}
 800cb20:	200004c8 	.word	0x200004c8

0800cb24 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 800cb24:	b580      	push	{r7, lr}
 800cb26:	b082      	sub	sp, #8
 800cb28:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800cb2a:	4b06      	ldr	r3, [pc, #24]	@ (800cb44 <Ble_Tl_Init+0x20>)
 800cb2c:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800cb2e:	4b06      	ldr	r3, [pc, #24]	@ (800cb48 <Ble_Tl_Init+0x24>)
 800cb30:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800cb32:	463b      	mov	r3, r7
 800cb34:	4619      	mov	r1, r3
 800cb36:	4805      	ldr	r0, [pc, #20]	@ (800cb4c <Ble_Tl_Init+0x28>)
 800cb38:	f7fd fe9c 	bl	800a874 <hci_init>

  return;
 800cb3c:	bf00      	nop
}
 800cb3e:	3708      	adds	r7, #8
 800cb40:	46bd      	mov	sp, r7
 800cb42:	bd80      	pop	{r7, pc}
 800cb44:	200300d8 	.word	0x200300d8
 800cb48:	0800d157 	.word	0x0800d157
 800cb4c:	0800d11f 	.word	0x0800d11f

0800cb50 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 800cb50:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cb52:	b08d      	sub	sp, #52	@ 0x34
 800cb54:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 800cb56:	2300      	movs	r3, #0
 800cb58:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800cb5a:	2392      	movs	r3, #146	@ 0x92
 800cb5c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init*/

  APP_DBG_MSG("==>> Start Ble_Hci_Gap_Gatt_Init function\n");
 800cb5e:	48a5      	ldr	r0, [pc, #660]	@ (800cdf4 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800cb60:	f001 fa9e 	bl	800e0a0 <puts>

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 800cb64:	f7fd fb38 	bl	800a1d8 <hci_reset>
 800cb68:	4603      	mov	r3, r0
 800cb6a:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800cb6c:	7dfb      	ldrb	r3, [r7, #23]
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d005      	beq.n	800cb7e <Ble_Hci_Gap_Gatt_Init+0x2e>
  {
    APP_DBG_MSG("  Fail   : hci_reset command, result: 0x%x \n", ret);
 800cb72:	7dfb      	ldrb	r3, [r7, #23]
 800cb74:	4619      	mov	r1, r3
 800cb76:	48a0      	ldr	r0, [pc, #640]	@ (800cdf8 <Ble_Hci_Gap_Gatt_Init+0x2a8>)
 800cb78:	f001 fa22 	bl	800dfc0 <iprintf>
 800cb7c:	e002      	b.n	800cb84 <Ble_Hci_Gap_Gatt_Init+0x34>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_reset command\n");
 800cb7e:	489f      	ldr	r0, [pc, #636]	@ (800cdfc <Ble_Hci_Gap_Gatt_Init+0x2ac>)
 800cb80:	f001 fa8e 	bl	800e0a0 <puts>
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 800cb84:	f000 fa32 	bl	800cfec <BleGetBdAddress>
 800cb88:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 800cb8a:	693a      	ldr	r2, [r7, #16]
 800cb8c:	2106      	movs	r1, #6
 800cb8e:	2000      	movs	r0, #0
 800cb90:	f7fd f9e2 	bl	8009f58 <aci_hal_write_config_data>
 800cb94:	4603      	mov	r3, r0
 800cb96:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800cb98:	7dfb      	ldrb	r3, [r7, #23]
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d005      	beq.n	800cbaa <Ble_Hci_Gap_Gatt_Init+0x5a>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET, result: 0x%x \n", ret);
 800cb9e:	7dfb      	ldrb	r3, [r7, #23]
 800cba0:	4619      	mov	r1, r3
 800cba2:	4897      	ldr	r0, [pc, #604]	@ (800ce00 <Ble_Hci_Gap_Gatt_Init+0x2b0>)
 800cba4:	f001 fa0c 	bl	800dfc0 <iprintf>
 800cba8:	e021      	b.n	800cbee <Ble_Hci_Gap_Gatt_Init+0x9e>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET\n");
 800cbaa:	4896      	ldr	r0, [pc, #600]	@ (800ce04 <Ble_Hci_Gap_Gatt_Init+0x2b4>)
 800cbac:	f001 fa78 	bl	800e0a0 <puts>
    APP_DBG_MSG("  Public Bluetooth Address: %02x:%02x:%02x:%02x:%02x:%02x\n",p_bd_addr[5],p_bd_addr[4],p_bd_addr[3],p_bd_addr[2],p_bd_addr[1],p_bd_addr[0]);
 800cbb0:	693b      	ldr	r3, [r7, #16]
 800cbb2:	3305      	adds	r3, #5
 800cbb4:	781b      	ldrb	r3, [r3, #0]
 800cbb6:	4618      	mov	r0, r3
 800cbb8:	693b      	ldr	r3, [r7, #16]
 800cbba:	3304      	adds	r3, #4
 800cbbc:	781b      	ldrb	r3, [r3, #0]
 800cbbe:	461c      	mov	r4, r3
 800cbc0:	693b      	ldr	r3, [r7, #16]
 800cbc2:	3303      	adds	r3, #3
 800cbc4:	781b      	ldrb	r3, [r3, #0]
 800cbc6:	461d      	mov	r5, r3
 800cbc8:	693b      	ldr	r3, [r7, #16]
 800cbca:	3302      	adds	r3, #2
 800cbcc:	781b      	ldrb	r3, [r3, #0]
 800cbce:	461a      	mov	r2, r3
 800cbd0:	693b      	ldr	r3, [r7, #16]
 800cbd2:	3301      	adds	r3, #1
 800cbd4:	781b      	ldrb	r3, [r3, #0]
 800cbd6:	4619      	mov	r1, r3
 800cbd8:	693b      	ldr	r3, [r7, #16]
 800cbda:	781b      	ldrb	r3, [r3, #0]
 800cbdc:	9302      	str	r3, [sp, #8]
 800cbde:	9101      	str	r1, [sp, #4]
 800cbe0:	9200      	str	r2, [sp, #0]
 800cbe2:	462b      	mov	r3, r5
 800cbe4:	4622      	mov	r2, r4
 800cbe6:	4601      	mov	r1, r0
 800cbe8:	4887      	ldr	r0, [pc, #540]	@ (800ce08 <Ble_Hci_Gap_Gatt_Init+0x2b8>)
 800cbea:	f001 f9e9 	bl	800dfc0 <iprintf>
  }

#if (CFG_BLE_ADDRESS_TYPE == GAP_PUBLIC_ADDR)
  /* BLE MAC in ADV Packet */
  a_ManufData[ sizeof(a_ManufData)-6] = p_bd_addr[5];
 800cbee:	693b      	ldr	r3, [r7, #16]
 800cbf0:	3305      	adds	r3, #5
 800cbf2:	781a      	ldrb	r2, [r3, #0]
 800cbf4:	4b85      	ldr	r3, [pc, #532]	@ (800ce0c <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 800cbf6:	721a      	strb	r2, [r3, #8]
  a_ManufData[ sizeof(a_ManufData)-5] = p_bd_addr[4];
 800cbf8:	693b      	ldr	r3, [r7, #16]
 800cbfa:	3304      	adds	r3, #4
 800cbfc:	781a      	ldrb	r2, [r3, #0]
 800cbfe:	4b83      	ldr	r3, [pc, #524]	@ (800ce0c <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 800cc00:	725a      	strb	r2, [r3, #9]
  a_ManufData[ sizeof(a_ManufData)-4] = p_bd_addr[3];
 800cc02:	693b      	ldr	r3, [r7, #16]
 800cc04:	3303      	adds	r3, #3
 800cc06:	781a      	ldrb	r2, [r3, #0]
 800cc08:	4b80      	ldr	r3, [pc, #512]	@ (800ce0c <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 800cc0a:	729a      	strb	r2, [r3, #10]
  a_ManufData[ sizeof(a_ManufData)-3] = p_bd_addr[2];
 800cc0c:	693b      	ldr	r3, [r7, #16]
 800cc0e:	3302      	adds	r3, #2
 800cc10:	781a      	ldrb	r2, [r3, #0]
 800cc12:	4b7e      	ldr	r3, [pc, #504]	@ (800ce0c <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 800cc14:	72da      	strb	r2, [r3, #11]
  a_ManufData[ sizeof(a_ManufData)-2] = p_bd_addr[1];
 800cc16:	693b      	ldr	r3, [r7, #16]
 800cc18:	3301      	adds	r3, #1
 800cc1a:	781a      	ldrb	r2, [r3, #0]
 800cc1c:	4b7b      	ldr	r3, [pc, #492]	@ (800ce0c <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 800cc1e:	731a      	strb	r2, [r3, #12]
  a_ManufData[ sizeof(a_ManufData)-1] = p_bd_addr[0];
 800cc20:	693b      	ldr	r3, [r7, #16]
 800cc22:	781a      	ldrb	r2, [r3, #0]
 800cc24:	4b79      	ldr	r3, [pc, #484]	@ (800ce0c <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 800cc26:	735a      	strb	r2, [r3, #13]
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive IRK and DHK(Legacy)
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 800cc28:	4a79      	ldr	r2, [pc, #484]	@ (800ce10 <Ble_Hci_Gap_Gatt_Init+0x2c0>)
 800cc2a:	2110      	movs	r1, #16
 800cc2c:	2018      	movs	r0, #24
 800cc2e:	f7fd f993 	bl	8009f58 <aci_hal_write_config_data>
 800cc32:	4603      	mov	r3, r0
 800cc34:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800cc36:	7dfb      	ldrb	r3, [r7, #23]
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d005      	beq.n	800cc48 <Ble_Hci_Gap_Gatt_Init+0xf8>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET, result: 0x%x \n", ret);
 800cc3c:	7dfb      	ldrb	r3, [r7, #23]
 800cc3e:	4619      	mov	r1, r3
 800cc40:	4874      	ldr	r0, [pc, #464]	@ (800ce14 <Ble_Hci_Gap_Gatt_Init+0x2c4>)
 800cc42:	f001 f9bd 	bl	800dfc0 <iprintf>
 800cc46:	e002      	b.n	800cc4e <Ble_Hci_Gap_Gatt_Init+0xfe>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET\n");
 800cc48:	4873      	ldr	r0, [pc, #460]	@ (800ce18 <Ble_Hci_Gap_Gatt_Init+0x2c8>)
 800cc4a:	f001 fa29 	bl	800e0a0 <puts>
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 800cc4e:	4a73      	ldr	r2, [pc, #460]	@ (800ce1c <Ble_Hci_Gap_Gatt_Init+0x2cc>)
 800cc50:	2110      	movs	r1, #16
 800cc52:	2008      	movs	r0, #8
 800cc54:	f7fd f980 	bl	8009f58 <aci_hal_write_config_data>
 800cc58:	4603      	mov	r3, r0
 800cc5a:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800cc5c:	7dfb      	ldrb	r3, [r7, #23]
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d005      	beq.n	800cc6e <Ble_Hci_Gap_Gatt_Init+0x11e>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET, result: 0x%x \n", ret);
 800cc62:	7dfb      	ldrb	r3, [r7, #23]
 800cc64:	4619      	mov	r1, r3
 800cc66:	486e      	ldr	r0, [pc, #440]	@ (800ce20 <Ble_Hci_Gap_Gatt_Init+0x2d0>)
 800cc68:	f001 f9aa 	bl	800dfc0 <iprintf>
 800cc6c:	e002      	b.n	800cc74 <Ble_Hci_Gap_Gatt_Init+0x124>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET\n");
 800cc6e:	486d      	ldr	r0, [pc, #436]	@ (800ce24 <Ble_Hci_Gap_Gatt_Init+0x2d4>)
 800cc70:	f001 fa16 	bl	800e0a0 <puts>
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 800cc74:	211f      	movs	r1, #31
 800cc76:	2001      	movs	r0, #1
 800cc78:	f7fd f9f3 	bl	800a062 <aci_hal_set_tx_power_level>
 800cc7c:	4603      	mov	r3, r0
 800cc7e:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800cc80:	7dfb      	ldrb	r3, [r7, #23]
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d005      	beq.n	800cc92 <Ble_Hci_Gap_Gatt_Init+0x142>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_tx_power_level command, result: 0x%x \n", ret);
 800cc86:	7dfb      	ldrb	r3, [r7, #23]
 800cc88:	4619      	mov	r1, r3
 800cc8a:	4867      	ldr	r0, [pc, #412]	@ (800ce28 <Ble_Hci_Gap_Gatt_Init+0x2d8>)
 800cc8c:	f001 f998 	bl	800dfc0 <iprintf>
 800cc90:	e002      	b.n	800cc98 <Ble_Hci_Gap_Gatt_Init+0x148>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_tx_power_level command\n");
 800cc92:	4866      	ldr	r0, [pc, #408]	@ (800ce2c <Ble_Hci_Gap_Gatt_Init+0x2dc>)
 800cc94:	f001 fa04 	bl	800e0a0 <puts>
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 800cc98:	f7fc fe5d 	bl	8009956 <aci_gatt_init>
 800cc9c:	4603      	mov	r3, r0
 800cc9e:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800cca0:	7dfb      	ldrb	r3, [r7, #23]
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d005      	beq.n	800ccb2 <Ble_Hci_Gap_Gatt_Init+0x162>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_init command, result: 0x%x \n", ret);
 800cca6:	7dfb      	ldrb	r3, [r7, #23]
 800cca8:	4619      	mov	r1, r3
 800ccaa:	4861      	ldr	r0, [pc, #388]	@ (800ce30 <Ble_Hci_Gap_Gatt_Init+0x2e0>)
 800ccac:	f001 f988 	bl	800dfc0 <iprintf>
 800ccb0:	e002      	b.n	800ccb8 <Ble_Hci_Gap_Gatt_Init+0x168>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_init command\n");
 800ccb2:	4860      	ldr	r0, [pc, #384]	@ (800ce34 <Ble_Hci_Gap_Gatt_Init+0x2e4>)
 800ccb4:	f001 f9f4 	bl	800e0a0 <puts>
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 800ccb8:	2300      	movs	r3, #0
 800ccba:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 800ccbc:	7bfb      	ldrb	r3, [r7, #15]
 800ccbe:	f043 0301 	orr.w	r3, r3, #1
 800ccc2:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 800ccc4:	7bfb      	ldrb	r3, [r7, #15]
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d02b      	beq.n	800cd22 <Ble_Hci_Gap_Gatt_Init+0x1d2>
  {
    const char *name = "Hermes V1";
 800ccca:	4b5b      	ldr	r3, [pc, #364]	@ (800ce38 <Ble_Hci_Gap_Gatt_Init+0x2e8>)
 800cccc:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 800ccce:	1dba      	adds	r2, r7, #6
 800ccd0:	7bf8      	ldrb	r0, [r7, #15]
 800ccd2:	1cbb      	adds	r3, r7, #2
 800ccd4:	9301      	str	r3, [sp, #4]
 800ccd6:	1d3b      	adds	r3, r7, #4
 800ccd8:	9300      	str	r3, [sp, #0]
 800ccda:	4613      	mov	r3, r2
 800ccdc:	2207      	movs	r2, #7
 800ccde:	2100      	movs	r1, #0
 800cce0:	f7fc fc3b 	bl	800955a <aci_gap_init>
 800cce4:	4603      	mov	r3, r0
 800cce6:	75fb      	strb	r3, [r7, #23]
                       APPBLE_GAP_DEVICE_NAME_LENGTH,
                       &gap_service_handle,
                       &gap_dev_name_char_handle,
                       &gap_appearance_char_handle);

    if (ret != BLE_STATUS_SUCCESS)
 800cce8:	7dfb      	ldrb	r3, [r7, #23]
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d005      	beq.n	800ccfa <Ble_Hci_Gap_Gatt_Init+0x1aa>
    {
      APP_DBG_MSG("  Fail   : aci_gap_init command, result: 0x%x \n", ret);
 800ccee:	7dfb      	ldrb	r3, [r7, #23]
 800ccf0:	4619      	mov	r1, r3
 800ccf2:	4852      	ldr	r0, [pc, #328]	@ (800ce3c <Ble_Hci_Gap_Gatt_Init+0x2ec>)
 800ccf4:	f001 f964 	bl	800dfc0 <iprintf>
 800ccf8:	e002      	b.n	800cd00 <Ble_Hci_Gap_Gatt_Init+0x1b0>
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
 800ccfa:	4851      	ldr	r0, [pc, #324]	@ (800ce40 <Ble_Hci_Gap_Gatt_Init+0x2f0>)
 800ccfc:	f001 f9d0 	bl	800e0a0 <puts>
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 800cd00:	88fc      	ldrh	r4, [r7, #6]
 800cd02:	88bd      	ldrh	r5, [r7, #4]
 800cd04:	68b8      	ldr	r0, [r7, #8]
 800cd06:	f7f3 fa3b 	bl	8000180 <strlen>
 800cd0a:	4603      	mov	r3, r0
 800cd0c:	b2da      	uxtb	r2, r3
 800cd0e:	68bb      	ldr	r3, [r7, #8]
 800cd10:	9300      	str	r3, [sp, #0]
 800cd12:	4613      	mov	r3, r2
 800cd14:	2200      	movs	r2, #0
 800cd16:	4629      	mov	r1, r5
 800cd18:	4620      	mov	r0, r4
 800cd1a:	f7fd f81f 	bl	8009d5c <aci_gatt_update_char_value>
 800cd1e:	4603      	mov	r3, r0
 800cd20:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 800cd22:	88f8      	ldrh	r0, [r7, #6]
 800cd24:	8879      	ldrh	r1, [r7, #2]
 800cd26:	463b      	mov	r3, r7
 800cd28:	9300      	str	r3, [sp, #0]
 800cd2a:	2302      	movs	r3, #2
 800cd2c:	2200      	movs	r2, #0
 800cd2e:	f7fd f815 	bl	8009d5c <aci_gatt_update_char_value>
 800cd32:	4603      	mov	r3, r0
 800cd34:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 800cd36:	2202      	movs	r2, #2
 800cd38:	2102      	movs	r1, #2
 800cd3a:	2000      	movs	r0, #0
 800cd3c:	f7fd faee 	bl	800a31c <hci_le_set_default_phy>
 800cd40:	4603      	mov	r3, r0
 800cd42:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800cd44:	7dfb      	ldrb	r3, [r7, #23]
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d005      	beq.n	800cd56 <Ble_Hci_Gap_Gatt_Init+0x206>
  {
    APP_DBG_MSG("  Fail   : hci_le_set_default_phy command, result: 0x%x \n", ret);
 800cd4a:	7dfb      	ldrb	r3, [r7, #23]
 800cd4c:	4619      	mov	r1, r3
 800cd4e:	483d      	ldr	r0, [pc, #244]	@ (800ce44 <Ble_Hci_Gap_Gatt_Init+0x2f4>)
 800cd50:	f001 f936 	bl	800dfc0 <iprintf>
 800cd54:	e002      	b.n	800cd5c <Ble_Hci_Gap_Gatt_Init+0x20c>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_le_set_default_phy command\n");
 800cd56:	483c      	ldr	r0, [pc, #240]	@ (800ce48 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 800cd58:	f001 f9a2 	bl	800e0a0 <puts>
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 800cd5c:	4b3b      	ldr	r3, [pc, #236]	@ (800ce4c <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800cd5e:	2201      	movs	r2, #1
 800cd60:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 800cd62:	4b3a      	ldr	r3, [pc, #232]	@ (800ce4c <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800cd64:	781b      	ldrb	r3, [r3, #0]
 800cd66:	4618      	mov	r0, r3
 800cd68:	f7fc fa78 	bl	800925c <aci_gap_set_io_capability>
 800cd6c:	4603      	mov	r3, r0
 800cd6e:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800cd70:	7dfb      	ldrb	r3, [r7, #23]
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d005      	beq.n	800cd82 <Ble_Hci_Gap_Gatt_Init+0x232>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_io_capability command, result: 0x%x \n", ret);
 800cd76:	7dfb      	ldrb	r3, [r7, #23]
 800cd78:	4619      	mov	r1, r3
 800cd7a:	4835      	ldr	r0, [pc, #212]	@ (800ce50 <Ble_Hci_Gap_Gatt_Init+0x300>)
 800cd7c:	f001 f920 	bl	800dfc0 <iprintf>
 800cd80:	e002      	b.n	800cd88 <Ble_Hci_Gap_Gatt_Init+0x238>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_io_capability command\n");
 800cd82:	4834      	ldr	r0, [pc, #208]	@ (800ce54 <Ble_Hci_Gap_Gatt_Init+0x304>)
 800cd84:	f001 f98c 	bl	800e0a0 <puts>
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 800cd88:	4b30      	ldr	r3, [pc, #192]	@ (800ce4c <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800cd8a:	2201      	movs	r2, #1
 800cd8c:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 800cd8e:	4b2f      	ldr	r3, [pc, #188]	@ (800ce4c <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800cd90:	2208      	movs	r2, #8
 800cd92:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 800cd94:	4b2d      	ldr	r3, [pc, #180]	@ (800ce4c <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800cd96:	2210      	movs	r2, #16
 800cd98:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 800cd9a:	4b2c      	ldr	r3, [pc, #176]	@ (800ce4c <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800cd9c:	2200      	movs	r2, #0
 800cd9e:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 800cda0:	4b2a      	ldr	r3, [pc, #168]	@ (800ce4c <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800cda2:	4a2d      	ldr	r2, [pc, #180]	@ (800ce58 <Ble_Hci_Gap_Gatt_Init+0x308>)
 800cda4:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 800cda6:	4b29      	ldr	r3, [pc, #164]	@ (800ce4c <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800cda8:	2201      	movs	r2, #1
 800cdaa:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 800cdac:	4b27      	ldr	r3, [pc, #156]	@ (800ce4c <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800cdae:	789c      	ldrb	r4, [r3, #2]
 800cdb0:	4b26      	ldr	r3, [pc, #152]	@ (800ce4c <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800cdb2:	785d      	ldrb	r5, [r3, #1]
 800cdb4:	4b25      	ldr	r3, [pc, #148]	@ (800ce4c <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800cdb6:	791b      	ldrb	r3, [r3, #4]
 800cdb8:	4a24      	ldr	r2, [pc, #144]	@ (800ce4c <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800cdba:	7952      	ldrb	r2, [r2, #5]
 800cdbc:	4923      	ldr	r1, [pc, #140]	@ (800ce4c <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800cdbe:	78c9      	ldrb	r1, [r1, #3]
 800cdc0:	4822      	ldr	r0, [pc, #136]	@ (800ce4c <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800cdc2:	6880      	ldr	r0, [r0, #8]
 800cdc4:	2600      	movs	r6, #0
 800cdc6:	9604      	str	r6, [sp, #16]
 800cdc8:	9003      	str	r0, [sp, #12]
 800cdca:	9102      	str	r1, [sp, #8]
 800cdcc:	9201      	str	r2, [sp, #4]
 800cdce:	9300      	str	r3, [sp, #0]
 800cdd0:	2300      	movs	r3, #0
 800cdd2:	2201      	movs	r2, #1
 800cdd4:	4629      	mov	r1, r5
 800cdd6:	4620      	mov	r0, r4
 800cdd8:	f7fc fa94 	bl	8009304 <aci_gap_set_authentication_requirement>
 800cddc:	4603      	mov	r3, r0
 800cdde:	75fb      	strb	r3, [r7, #23]
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin,
                                               CFG_IDENTITY_ADDRESS);
  if (ret != BLE_STATUS_SUCCESS)
 800cde0:	7dfb      	ldrb	r3, [r7, #23]
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d03c      	beq.n	800ce60 <Ble_Hci_Gap_Gatt_Init+0x310>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_authentication_requirement command, result: 0x%x \n", ret);
 800cde6:	7dfb      	ldrb	r3, [r7, #23]
 800cde8:	4619      	mov	r1, r3
 800cdea:	481c      	ldr	r0, [pc, #112]	@ (800ce5c <Ble_Hci_Gap_Gatt_Init+0x30c>)
 800cdec:	f001 f8e8 	bl	800dfc0 <iprintf>
 800cdf0:	e039      	b.n	800ce66 <Ble_Hci_Gap_Gatt_Init+0x316>
 800cdf2:	bf00      	nop
 800cdf4:	0800fda0 	.word	0x0800fda0
 800cdf8:	0800fdcc 	.word	0x0800fdcc
 800cdfc:	0800fdfc 	.word	0x0800fdfc
 800ce00:	0800fe1c 	.word	0x0800fe1c
 800ce04:	0800fe78 	.word	0x0800fe78
 800ce08:	0800fec4 	.word	0x0800fec4
 800ce0c:	20000014 	.word	0x20000014
 800ce10:	080107cc 	.word	0x080107cc
 800ce14:	0800ff00 	.word	0x0800ff00
 800ce18:	0800ff58 	.word	0x0800ff58
 800ce1c:	080107dc 	.word	0x080107dc
 800ce20:	0800ffa0 	.word	0x0800ffa0
 800ce24:	0800fff8 	.word	0x0800fff8
 800ce28:	08010040 	.word	0x08010040
 800ce2c:	08010080 	.word	0x08010080
 800ce30:	080100b0 	.word	0x080100b0
 800ce34:	080100e4 	.word	0x080100e4
 800ce38:	08010108 	.word	0x08010108
 800ce3c:	08010114 	.word	0x08010114
 800ce40:	08010144 	.word	0x08010144
 800ce44:	08010164 	.word	0x08010164
 800ce48:	080101a0 	.word	0x080101a0
 800ce4c:	200004c8 	.word	0x200004c8
 800ce50:	080101cc 	.word	0x080101cc
 800ce54:	0801020c 	.word	0x0801020c
 800ce58:	0001b207 	.word	0x0001b207
 800ce5c:	0801023c 	.word	0x0801023c
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_authentication_requirement command\n");
 800ce60:	480e      	ldr	r0, [pc, #56]	@ (800ce9c <Ble_Hci_Gap_Gatt_Init+0x34c>)
 800ce62:	f001 f91d 	bl	800e0a0 <puts>
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 800ce66:	4b0e      	ldr	r3, [pc, #56]	@ (800cea0 <Ble_Hci_Gap_Gatt_Init+0x350>)
 800ce68:	789b      	ldrb	r3, [r3, #2]
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d00f      	beq.n	800ce8e <Ble_Hci_Gap_Gatt_Init+0x33e>
  {
    ret = aci_gap_configure_whitelist();
 800ce6e:	f7fc fc93 	bl	8009798 <aci_gap_configure_filter_accept_list>
 800ce72:	4603      	mov	r3, r0
 800ce74:	75fb      	strb	r3, [r7, #23]
    if (ret != BLE_STATUS_SUCCESS)
 800ce76:	7dfb      	ldrb	r3, [r7, #23]
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d005      	beq.n	800ce88 <Ble_Hci_Gap_Gatt_Init+0x338>
    {
      APP_DBG_MSG("  Fail   : aci_gap_configure_whitelist command, result: 0x%x \n", ret);
 800ce7c:	7dfb      	ldrb	r3, [r7, #23]
 800ce7e:	4619      	mov	r1, r3
 800ce80:	4808      	ldr	r0, [pc, #32]	@ (800cea4 <Ble_Hci_Gap_Gatt_Init+0x354>)
 800ce82:	f001 f89d 	bl	800dfc0 <iprintf>
 800ce86:	e002      	b.n	800ce8e <Ble_Hci_Gap_Gatt_Init+0x33e>
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
 800ce88:	4807      	ldr	r0, [pc, #28]	@ (800cea8 <Ble_Hci_Gap_Gatt_Init+0x358>)
 800ce8a:	f001 f909 	bl	800e0a0 <puts>
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
 800ce8e:	4807      	ldr	r0, [pc, #28]	@ (800ceac <Ble_Hci_Gap_Gatt_Init+0x35c>)
 800ce90:	f001 f896 	bl	800dfc0 <iprintf>
}
 800ce94:	bf00      	nop
 800ce96:	371c      	adds	r7, #28
 800ce98:	46bd      	mov	sp, r7
 800ce9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce9c:	08010288 	.word	0x08010288
 800cea0:	200004c8 	.word	0x200004c8
 800cea4:	080102c4 	.word	0x080102c4
 800cea8:	08010304 	.word	0x08010304
 800ceac:	08010334 	.word	0x08010334

0800ceb0 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 800ceb0:	b580      	push	{r7, lr}
 800ceb2:	b08c      	sub	sp, #48	@ 0x30
 800ceb4:	af08      	add	r7, sp, #32
 800ceb6:	4603      	mov	r3, r0
 800ceb8:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800ceba:	2392      	movs	r3, #146	@ 0x92
 800cebc:	72fb      	strb	r3, [r7, #11]
  uint16_t Min_Inter, Max_Inter;

  if (NewStatus == APP_BLE_FAST_ADV)
 800cebe:	79fb      	ldrb	r3, [r7, #7]
 800cec0:	2b01      	cmp	r3, #1
 800cec2:	d106      	bne.n	800ced2 <Adv_Request+0x22>
  {
    Min_Inter = AdvIntervalMin;
 800cec4:	4b3b      	ldr	r3, [pc, #236]	@ (800cfb4 <Adv_Request+0x104>)
 800cec6:	881b      	ldrh	r3, [r3, #0]
 800cec8:	81fb      	strh	r3, [r7, #14]
    Max_Inter = AdvIntervalMax;
 800ceca:	4b3b      	ldr	r3, [pc, #236]	@ (800cfb8 <Adv_Request+0x108>)
 800cecc:	881b      	ldrh	r3, [r3, #0]
 800cece:	81bb      	strh	r3, [r7, #12]
 800ced0:	e005      	b.n	800cede <Adv_Request+0x2e>
  }
  else
  {
    Min_Inter = CFG_LP_CONN_ADV_INTERVAL_MIN;
 800ced2:	f44f 63c8 	mov.w	r3, #1600	@ 0x640
 800ced6:	81fb      	strh	r3, [r7, #14]
    Max_Inter = CFG_LP_CONN_ADV_INTERVAL_MAX;
 800ced8:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 800cedc:	81bb      	strh	r3, [r7, #12]
   * Stop the timer, it will be restarted for a new shot
   * It does not hurt if the timer was not running
   */
  //HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);

  if ((NewStatus == APP_BLE_LP_ADV)
 800cede:	79fb      	ldrb	r3, [r7, #7]
 800cee0:	2b02      	cmp	r3, #2
 800cee2:	d119      	bne.n	800cf18 <Adv_Request+0x68>
      && ((BleApplicationContext.Device_Connection_Status == APP_BLE_FAST_ADV)
 800cee4:	4b35      	ldr	r3, [pc, #212]	@ (800cfbc <Adv_Request+0x10c>)
 800cee6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ceea:	2b01      	cmp	r3, #1
 800ceec:	d004      	beq.n	800cef8 <Adv_Request+0x48>
          || (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_ADV)))
 800ceee:	4b33      	ldr	r3, [pc, #204]	@ (800cfbc <Adv_Request+0x10c>)
 800cef0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800cef4:	2b02      	cmp	r3, #2
 800cef6:	d10f      	bne.n	800cf18 <Adv_Request+0x68>
  {
    /* Connection in ADVERTISE mode have to stop the current advertising */
    ret = aci_gap_set_non_discoverable();
 800cef8:	f7fc f892 	bl	8009020 <aci_gap_set_non_discoverable>
 800cefc:	4603      	mov	r3, r0
 800cefe:	72fb      	strb	r3, [r7, #11]
    if (ret != BLE_STATUS_SUCCESS)
 800cf00:	7afb      	ldrb	r3, [r7, #11]
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d005      	beq.n	800cf12 <Adv_Request+0x62>
    {
      APP_DBG_MSG("==>> aci_gap_set_non_discoverable - Stop Advertising Failed , result: %d \n", ret);
 800cf06:	7afb      	ldrb	r3, [r7, #11]
 800cf08:	4619      	mov	r1, r3
 800cf0a:	482d      	ldr	r0, [pc, #180]	@ (800cfc0 <Adv_Request+0x110>)
 800cf0c:	f001 f858 	bl	800dfc0 <iprintf>
 800cf10:	e002      	b.n	800cf18 <Adv_Request+0x68>
    }
    else
    {
      APP_DBG_MSG("==>> aci_gap_set_non_discoverable - Successfully Stopped Advertising \n");
 800cf12:	482c      	ldr	r0, [pc, #176]	@ (800cfc4 <Adv_Request+0x114>)
 800cf14:	f001 f8c4 	bl	800e0a0 <puts>
    }
  }

  BleApplicationContext.Device_Connection_Status = NewStatus;
 800cf18:	4a28      	ldr	r2, [pc, #160]	@ (800cfbc <Adv_Request+0x10c>)
 800cf1a:	79fb      	ldrb	r3, [r7, #7]
 800cf1c:	f882 3084 	strb.w	r3, [r2, #132]	@ 0x84
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_IND,
 800cf20:	4b26      	ldr	r3, [pc, #152]	@ (800cfbc <Adv_Request+0x10c>)
 800cf22:	7e1b      	ldrb	r3, [r3, #24]
 800cf24:	89ba      	ldrh	r2, [r7, #12]
 800cf26:	89f9      	ldrh	r1, [r7, #14]
 800cf28:	2000      	movs	r0, #0
 800cf2a:	9006      	str	r0, [sp, #24]
 800cf2c:	2000      	movs	r0, #0
 800cf2e:	9005      	str	r0, [sp, #20]
 800cf30:	4825      	ldr	r0, [pc, #148]	@ (800cfc8 <Adv_Request+0x118>)
 800cf32:	9004      	str	r0, [sp, #16]
 800cf34:	9303      	str	r3, [sp, #12]
 800cf36:	4b25      	ldr	r3, [pc, #148]	@ (800cfcc <Adv_Request+0x11c>)
 800cf38:	9302      	str	r3, [sp, #8]
 800cf3a:	230a      	movs	r3, #10
 800cf3c:	9301      	str	r3, [sp, #4]
 800cf3e:	2300      	movs	r3, #0
 800cf40:	9300      	str	r3, [sp, #0]
 800cf42:	2300      	movs	r3, #0
 800cf44:	2000      	movs	r0, #0
 800cf46:	f7fc f88f 	bl	8009068 <aci_gap_set_discoverable>
 800cf4a:	4603      	mov	r3, r0
 800cf4c:	72fb      	strb	r3, [r7, #11]
                                 (uint8_t*) &a_LocalName,
                                 BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen,
                                 BleApplicationContext.BleApplicationContext_legacy.advtServUUID,
                                 0,
                                 0);
  if (ret != BLE_STATUS_SUCCESS)
 800cf4e:	7afb      	ldrb	r3, [r7, #11]
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d005      	beq.n	800cf60 <Adv_Request+0xb0>
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - fail, result: 0x%x \n", ret);
 800cf54:	7afb      	ldrb	r3, [r7, #11]
 800cf56:	4619      	mov	r1, r3
 800cf58:	481d      	ldr	r0, [pc, #116]	@ (800cfd0 <Adv_Request+0x120>)
 800cf5a:	f001 f831 	bl	800dfc0 <iprintf>
 800cf5e:	e002      	b.n	800cf66 <Adv_Request+0xb6>
  }
  else
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - Success\n");
 800cf60:	481c      	ldr	r0, [pc, #112]	@ (800cfd4 <Adv_Request+0x124>)
 800cf62:	f001 f89d 	bl	800e0a0 <puts>
  }

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_ManufData), (uint8_t*) a_ManufData);
 800cf66:	491c      	ldr	r1, [pc, #112]	@ (800cfd8 <Adv_Request+0x128>)
 800cf68:	200e      	movs	r0, #14
 800cf6a:	f7fc fba3 	bl	80096b4 <aci_gap_update_adv_data>
 800cf6e:	4603      	mov	r3, r0
 800cf70:	72fb      	strb	r3, [r7, #11]
  if (ret != BLE_STATUS_SUCCESS)
 800cf72:	7afb      	ldrb	r3, [r7, #11]
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d00e      	beq.n	800cf96 <Adv_Request+0xe6>
  {
    if (NewStatus == APP_BLE_FAST_ADV)
 800cf78:	79fb      	ldrb	r3, [r7, #7]
 800cf7a:	2b01      	cmp	r3, #1
 800cf7c:	d105      	bne.n	800cf8a <Adv_Request+0xda>
    {
      APP_DBG_MSG("==>> Start Fast Advertising Failed , result: %d \n\r", ret);
 800cf7e:	7afb      	ldrb	r3, [r7, #11]
 800cf80:	4619      	mov	r1, r3
 800cf82:	4816      	ldr	r0, [pc, #88]	@ (800cfdc <Adv_Request+0x12c>)
 800cf84:	f001 f81c 	bl	800dfc0 <iprintf>
    {
      APP_DBG_MSG("==>> Success: Start Low Power Advertising \n\r");
    }
  }

  return;
 800cf88:	e010      	b.n	800cfac <Adv_Request+0xfc>
      APP_DBG_MSG("==>> Start Low Power Advertising Failed , result: %d \n\r", ret);
 800cf8a:	7afb      	ldrb	r3, [r7, #11]
 800cf8c:	4619      	mov	r1, r3
 800cf8e:	4814      	ldr	r0, [pc, #80]	@ (800cfe0 <Adv_Request+0x130>)
 800cf90:	f001 f816 	bl	800dfc0 <iprintf>
  return;
 800cf94:	e00a      	b.n	800cfac <Adv_Request+0xfc>
    if (NewStatus == APP_BLE_FAST_ADV)
 800cf96:	79fb      	ldrb	r3, [r7, #7]
 800cf98:	2b01      	cmp	r3, #1
 800cf9a:	d103      	bne.n	800cfa4 <Adv_Request+0xf4>
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
 800cf9c:	4811      	ldr	r0, [pc, #68]	@ (800cfe4 <Adv_Request+0x134>)
 800cf9e:	f001 f80f 	bl	800dfc0 <iprintf>
  return;
 800cfa2:	e003      	b.n	800cfac <Adv_Request+0xfc>
      APP_DBG_MSG("==>> Success: Start Low Power Advertising \n\r");
 800cfa4:	4810      	ldr	r0, [pc, #64]	@ (800cfe8 <Adv_Request+0x138>)
 800cfa6:	f001 f80b 	bl	800dfc0 <iprintf>
  return;
 800cfaa:	bf00      	nop
}
 800cfac:	3710      	adds	r7, #16
 800cfae:	46bd      	mov	sp, r7
 800cfb0:	bd80      	pop	{r7, pc}
 800cfb2:	bf00      	nop
 800cfb4:	2000055c 	.word	0x2000055c
 800cfb8:	2000055e 	.word	0x2000055e
 800cfbc:	200004c8 	.word	0x200004c8
 800cfc0:	08010360 	.word	0x08010360
 800cfc4:	080103ac 	.word	0x080103ac
 800cfc8:	200004e1 	.word	0x200004e1
 800cfcc:	080107ec 	.word	0x080107ec
 800cfd0:	080103f4 	.word	0x080103f4
 800cfd4:	0801042c 	.word	0x0801042c
 800cfd8:	20000014 	.word	0x20000014
 800cfdc:	08010454 	.word	0x08010454
 800cfe0:	08010488 	.word	0x08010488
 800cfe4:	080104c0 	.word	0x080104c0
 800cfe8:	080104e8 	.word	0x080104e8

0800cfec <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 800cfec:	b580      	push	{r7, lr}
 800cfee:	b086      	sub	sp, #24
 800cff0:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 800cff2:	f7fe feab 	bl	800bd4c <LL_FLASH_GetUDN>
 800cff6:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 800cff8:	693b      	ldr	r3, [r7, #16]
 800cffa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cffe:	d023      	beq.n	800d048 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 800d000:	f7fe febc 	bl	800bd7c <LL_FLASH_GetSTCompanyID>
 800d004:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 800d006:	f7fe fead 	bl	800bd64 <LL_FLASH_GetDeviceID>
 800d00a:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 800d00c:	693b      	ldr	r3, [r7, #16]
 800d00e:	b2da      	uxtb	r2, r3
 800d010:	4b16      	ldr	r3, [pc, #88]	@ (800d06c <BleGetBdAddress+0x80>)
 800d012:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 800d014:	693b      	ldr	r3, [r7, #16]
 800d016:	0a1b      	lsrs	r3, r3, #8
 800d018:	b2da      	uxtb	r2, r3
 800d01a:	4b14      	ldr	r3, [pc, #80]	@ (800d06c <BleGetBdAddress+0x80>)
 800d01c:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	b2da      	uxtb	r2, r3
 800d022:	4b12      	ldr	r3, [pc, #72]	@ (800d06c <BleGetBdAddress+0x80>)
 800d024:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 800d026:	68bb      	ldr	r3, [r7, #8]
 800d028:	b2da      	uxtb	r2, r3
 800d02a:	4b10      	ldr	r3, [pc, #64]	@ (800d06c <BleGetBdAddress+0x80>)
 800d02c:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 800d02e:	68bb      	ldr	r3, [r7, #8]
 800d030:	0a1b      	lsrs	r3, r3, #8
 800d032:	b2da      	uxtb	r2, r3
 800d034:	4b0d      	ldr	r3, [pc, #52]	@ (800d06c <BleGetBdAddress+0x80>)
 800d036:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 800d038:	68bb      	ldr	r3, [r7, #8]
 800d03a:	0c1b      	lsrs	r3, r3, #16
 800d03c:	b2da      	uxtb	r2, r3
 800d03e:	4b0b      	ldr	r3, [pc, #44]	@ (800d06c <BleGetBdAddress+0x80>)
 800d040:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 800d042:	4b0a      	ldr	r3, [pc, #40]	@ (800d06c <BleGetBdAddress+0x80>)
 800d044:	617b      	str	r3, [r7, #20]
 800d046:	e00b      	b.n	800d060 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 800d048:	2000      	movs	r0, #0
 800d04a:	f7fe f9cf 	bl	800b3ec <OTP_Read>
 800d04e:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	2b00      	cmp	r3, #0
 800d054:	d002      	beq.n	800d05c <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	617b      	str	r3, [r7, #20]
 800d05a:	e001      	b.n	800d060 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 800d05c:	4b04      	ldr	r3, [pc, #16]	@ (800d070 <BleGetBdAddress+0x84>)
 800d05e:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 800d060:	697b      	ldr	r3, [r7, #20]
}
 800d062:	4618      	mov	r0, r3
 800d064:	3718      	adds	r7, #24
 800d066:	46bd      	mov	sp, r7
 800d068:	bd80      	pop	{r7, pc}
 800d06a:	bf00      	nop
 800d06c:	200004c0 	.word	0x200004c0
 800d070:	080107c4 	.word	0x080107c4

0800d074 <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR P2P SERVER
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 800d074:	b580      	push	{r7, lr}
 800d076:	b082      	sub	sp, #8
 800d078:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 800d07a:	4b10      	ldr	r3, [pc, #64]	@ (800d0bc <Adv_Cancel+0x48>)
 800d07c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d080:	2b05      	cmp	r3, #5
 800d082:	d017      	beq.n	800d0b4 <Adv_Cancel+0x40>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800d084:	2392      	movs	r3, #146	@ 0x92
 800d086:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 800d088:	f7fb ffca 	bl	8009020 <aci_gap_set_non_discoverable>
 800d08c:	4603      	mov	r3, r0
 800d08e:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800d090:	4b0a      	ldr	r3, [pc, #40]	@ (800d0bc <Adv_Cancel+0x48>)
 800d092:	2200      	movs	r2, #0
 800d094:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
    if (ret != BLE_STATUS_SUCCESS)
 800d098:	79fb      	ldrb	r3, [r7, #7]
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d003      	beq.n	800d0a6 <Adv_Cancel+0x32>
    {
      APP_DBG_MSG("** STOP ADVERTISING **  Failed \r\n\r");
 800d09e:	4808      	ldr	r0, [pc, #32]	@ (800d0c0 <Adv_Cancel+0x4c>)
 800d0a0:	f000 ff8e 	bl	800dfc0 <iprintf>

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 800d0a4:	e006      	b.n	800d0b4 <Adv_Cancel+0x40>
      APP_DBG_MSG("  \r\n\r");
 800d0a6:	4807      	ldr	r0, [pc, #28]	@ (800d0c4 <Adv_Cancel+0x50>)
 800d0a8:	f000 ff8a 	bl	800dfc0 <iprintf>
      APP_DBG_MSG("** STOP ADVERTISING **  \r\n\r");
 800d0ac:	4806      	ldr	r0, [pc, #24]	@ (800d0c8 <Adv_Cancel+0x54>)
 800d0ae:	f000 ff87 	bl	800dfc0 <iprintf>
  return;
 800d0b2:	bf00      	nop
 800d0b4:	bf00      	nop
}
 800d0b6:	3708      	adds	r7, #8
 800d0b8:	46bd      	mov	sp, r7
 800d0ba:	bd80      	pop	{r7, pc}
 800d0bc:	200004c8 	.word	0x200004c8
 800d0c0:	08010518 	.word	0x08010518
 800d0c4:	0801053c 	.word	0x0801053c
 800d0c8:	08010544 	.word	0x08010544

0800d0cc <Switch_OFF_GPIO>:

  return;
}

static void Switch_OFF_GPIO()
{
 800d0cc:	b480      	push	{r7}
 800d0ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Switch_OFF_GPIO */

  /* USER CODE END Switch_OFF_GPIO */
}
 800d0d0:	bf00      	nop
 800d0d2:	46bd      	mov	sp, r7
 800d0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d8:	4770      	bx	lr

0800d0da <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 800d0da:	b580      	push	{r7, lr}
 800d0dc:	b082      	sub	sp, #8
 800d0de:	af00      	add	r7, sp, #0
 800d0e0:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800d0e2:	2100      	movs	r1, #0
 800d0e4:	2002      	movs	r0, #2
 800d0e6:	f000 fdad 	bl	800dc44 <UTIL_SEQ_SetTask>

  return;
 800d0ea:	bf00      	nop
}
 800d0ec:	3708      	adds	r7, #8
 800d0ee:	46bd      	mov	sp, r7
 800d0f0:	bd80      	pop	{r7, pc}

0800d0f2 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 800d0f2:	b580      	push	{r7, lr}
 800d0f4:	b082      	sub	sp, #8
 800d0f6:	af00      	add	r7, sp, #0
 800d0f8:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800d0fa:	2001      	movs	r0, #1
 800d0fc:	f000 fe0e 	bl	800dd1c <UTIL_SEQ_SetEvt>

  return;
 800d100:	bf00      	nop
}
 800d102:	3708      	adds	r7, #8
 800d104:	46bd      	mov	sp, r7
 800d106:	bd80      	pop	{r7, pc}

0800d108 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 800d108:	b580      	push	{r7, lr}
 800d10a:	b082      	sub	sp, #8
 800d10c:	af00      	add	r7, sp, #0
 800d10e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800d110:	2001      	movs	r0, #1
 800d112:	f000 fe23 	bl	800dd5c <UTIL_SEQ_WaitEvt>

  return;
 800d116:	bf00      	nop
}
 800d118:	3708      	adds	r7, #8
 800d11a:	46bd      	mov	sp, r7
 800d11c:	bd80      	pop	{r7, pc}

0800d11e <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 800d11e:	b580      	push	{r7, lr}
 800d120:	b084      	sub	sp, #16
 800d122:	af00      	add	r7, sp, #0
 800d124:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	685b      	ldr	r3, [r3, #4]
 800d12e:	3308      	adds	r3, #8
 800d130:	4618      	mov	r0, r3
 800d132:	f7fd fa59 	bl	800a5e8 <SVCCTL_UserEvtRx>
 800d136:	4603      	mov	r3, r0
 800d138:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 800d13a:	7afb      	ldrb	r3, [r7, #11]
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d003      	beq.n	800d148 <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	2201      	movs	r2, #1
 800d144:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 800d146:	e003      	b.n	800d150 <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	2200      	movs	r2, #0
 800d14c:	701a      	strb	r2, [r3, #0]
  return;
 800d14e:	bf00      	nop
}
 800d150:	3710      	adds	r7, #16
 800d152:	46bd      	mov	sp, r7
 800d154:	bd80      	pop	{r7, pc}

0800d156 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 800d156:	b580      	push	{r7, lr}
 800d158:	b084      	sub	sp, #16
 800d15a:	af00      	add	r7, sp, #0
 800d15c:	4603      	mov	r3, r0
 800d15e:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 800d160:	79fb      	ldrb	r3, [r7, #7]
 800d162:	2b00      	cmp	r3, #0
 800d164:	d002      	beq.n	800d16c <BLE_StatusNot+0x16>
 800d166:	2b01      	cmp	r3, #1
 800d168:	d006      	beq.n	800d178 <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 800d16a:	e00b      	b.n	800d184 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800d16c:	231f      	movs	r3, #31
 800d16e:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 800d170:	68f8      	ldr	r0, [r7, #12]
 800d172:	f000 fd93 	bl	800dc9c <UTIL_SEQ_PauseTask>
      break;
 800d176:	e005      	b.n	800d184 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800d178:	231f      	movs	r3, #31
 800d17a:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 800d17c:	68f8      	ldr	r0, [r7, #12]
 800d17e:	f000 fdad 	bl	800dcdc <UTIL_SEQ_ResumeTask>
      break;
 800d182:	bf00      	nop
  }

  return;
 800d184:	bf00      	nop
}
 800d186:	3710      	adds	r7, #16
 800d188:	46bd      	mov	sp, r7
 800d18a:	bd80      	pop	{r7, pc}

0800d18c <Hermes_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Hermes_Event_Handler(void *Event)
{
 800d18c:	b580      	push	{r7, lr}
 800d18e:	b08a      	sub	sp, #40	@ 0x28
 800d190:	af00      	add	r7, sp, #0
 800d192:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_blecore_aci *blecore_evt;
  aci_gatt_attribute_modified_event_rp0    * attribute_modified;
  P2PS_STM_App_Notification_evt_t Notification;

  return_value = SVCCTL_EvtNotAck;
 800d194:	2300      	movs	r3, #0
 800d196:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	3301      	adds	r3, #1
 800d19e:	623b      	str	r3, [r7, #32]

  switch(event_pckt->evt)
 800d1a0:	6a3b      	ldr	r3, [r7, #32]
 800d1a2:	781b      	ldrb	r3, [r3, #0]
 800d1a4:	2bff      	cmp	r3, #255	@ 0xff
 800d1a6:	d14f      	bne.n	800d248 <Hermes_Event_Handler+0xbc>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 800d1a8:	6a3b      	ldr	r3, [r7, #32]
 800d1aa:	3302      	adds	r3, #2
 800d1ac:	61fb      	str	r3, [r7, #28]
      switch(blecore_evt->ecode)
 800d1ae:	69fb      	ldr	r3, [r7, #28]
 800d1b0:	881b      	ldrh	r3, [r3, #0]
 800d1b2:	b29b      	uxth	r3, r3
 800d1b4:	461a      	mov	r2, r3
 800d1b6:	f640 4301 	movw	r3, #3073	@ 0xc01
 800d1ba:	429a      	cmp	r2, r3
 800d1bc:	d140      	bne.n	800d240 <Hermes_Event_Handler+0xb4>
      {
        case ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE:
       {
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 800d1be:	69fb      	ldr	r3, [r7, #28]
 800d1c0:	3302      	adds	r3, #2
 800d1c2:	61bb      	str	r3, [r7, #24]
            if(attribute_modified->Attr_Handle == (BleApplicationContext.eeg_data_char_handle + 2))
 800d1c4:	69bb      	ldr	r3, [r7, #24]
 800d1c6:	885b      	ldrh	r3, [r3, #2]
 800d1c8:	b29b      	uxth	r3, r3
 800d1ca:	461a      	mov	r2, r3
 800d1cc:	4b22      	ldr	r3, [pc, #136]	@ (800d258 <Hermes_Event_Handler+0xcc>)
 800d1ce:	f8b3 3088 	ldrh.w	r3, [r3, #136]	@ 0x88
 800d1d2:	3302      	adds	r3, #2
 800d1d4:	429a      	cmp	r2, r3
 800d1d6:	d118      	bne.n	800d20a <Hermes_Event_Handler+0x7e>
            {
              /**
               * Descriptor handle
               */
              return_value = SVCCTL_EvtAckFlowEnable;
 800d1d8:	2301      	movs	r3, #1
 800d1da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
              /**
               * Notify to application
               */
              if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 800d1de:	69bb      	ldr	r3, [r7, #24]
 800d1e0:	7a1b      	ldrb	r3, [r3, #8]
 800d1e2:	f003 0301 	and.w	r3, r3, #1
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d007      	beq.n	800d1fa <Hermes_Event_Handler+0x6e>
              {
                Notification.P2P_Evt_Opcode = P2PS_STM__NOTIFY_ENABLED_EVT;
 800d1ea:	2300      	movs	r3, #0
 800d1ec:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 800d1ee:	f107 0308 	add.w	r3, r7, #8
 800d1f2:	4618      	mov	r0, r3
 800d1f4:	f000 f834 	bl	800d260 <P2PS_STM_App_Notification>
            		HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, attribute_modified->Attr_Data[1]!=0);
                }
            }

        }
        break;
 800d1f8:	e024      	b.n	800d244 <Hermes_Event_Handler+0xb8>
                Notification.P2P_Evt_Opcode = P2PS_STM_NOTIFY_DISABLED_EVT;
 800d1fa:	2301      	movs	r3, #1
 800d1fc:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 800d1fe:	f107 0308 	add.w	r3, r7, #8
 800d202:	4618      	mov	r0, r3
 800d204:	f000 f82c 	bl	800d260 <P2PS_STM_App_Notification>
        break;
 800d208:	e01c      	b.n	800d244 <Hermes_Event_Handler+0xb8>
            else if(attribute_modified->Attr_Handle == (BleApplicationContext.eeg_config_char_handle + 1))
 800d20a:	69bb      	ldr	r3, [r7, #24]
 800d20c:	885b      	ldrh	r3, [r3, #2]
 800d20e:	b29b      	uxth	r3, r3
 800d210:	461a      	mov	r2, r3
 800d212:	4b11      	ldr	r3, [pc, #68]	@ (800d258 <Hermes_Event_Handler+0xcc>)
 800d214:	f8b3 3092 	ldrh.w	r3, [r3, #146]	@ 0x92
 800d218:	3301      	adds	r3, #1
 800d21a:	429a      	cmp	r2, r3
 800d21c:	d112      	bne.n	800d244 <Hermes_Event_Handler+0xb8>
            	if(attribute_modified->Attr_Data[0]==0x02){
 800d21e:	69bb      	ldr	r3, [r7, #24]
 800d220:	7a1b      	ldrb	r3, [r3, #8]
 800d222:	2b02      	cmp	r3, #2
 800d224:	d10e      	bne.n	800d244 <Hermes_Event_Handler+0xb8>
            		HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, attribute_modified->Attr_Data[1]!=0);
 800d226:	69bb      	ldr	r3, [r7, #24]
 800d228:	7a5b      	ldrb	r3, [r3, #9]
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	bf14      	ite	ne
 800d22e:	2301      	movne	r3, #1
 800d230:	2300      	moveq	r3, #0
 800d232:	b2db      	uxtb	r3, r3
 800d234:	461a      	mov	r2, r3
 800d236:	2101      	movs	r1, #1
 800d238:	4808      	ldr	r0, [pc, #32]	@ (800d25c <Hermes_Event_Handler+0xd0>)
 800d23a:	f7f6 fe6f 	bl	8003f1c <HAL_GPIO_WritePin>
        break;
 800d23e:	e001      	b.n	800d244 <Hermes_Event_Handler+0xb8>

        default:
          break;
 800d240:	bf00      	nop
 800d242:	e002      	b.n	800d24a <Hermes_Event_Handler+0xbe>
        break;
 800d244:	bf00      	nop
      }
    }
    break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 800d246:	e000      	b.n	800d24a <Hermes_Event_Handler+0xbe>

    default:
      break;
 800d248:	bf00      	nop
  }

  return(return_value);
 800d24a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}/* end SVCCTL_EvtAckStatus_t */
 800d24e:	4618      	mov	r0, r3
 800d250:	3728      	adds	r7, #40	@ 0x28
 800d252:	46bd      	mov	sp, r7
 800d254:	bd80      	pop	{r7, pc}
 800d256:	bf00      	nop
 800d258:	200004c8 	.word	0x200004c8
 800d25c:	48000400 	.word	0x48000400

0800d260 <P2PS_STM_App_Notification>:
//static void P2PS_APP_LED_BUTTON_context_Init(void);
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void P2PS_STM_App_Notification(P2PS_STM_App_Notification_evt_t *pNotification)
{
 800d260:	b580      	push	{r7, lr}
 800d262:	b082      	sub	sp, #8
 800d264:	af00      	add	r7, sp, #0
 800d266:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_STM_App_Notification_1 */
/* USER CODE END P2PS_STM_App_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	781b      	ldrb	r3, [r3, #0]
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d002      	beq.n	800d276 <P2PS_STM_App_Notification+0x16>
 800d270:	2b01      	cmp	r3, #1
 800d272:	d00a      	beq.n	800d28a <P2PS_STM_App_Notification+0x2a>

    default:
/* USER CODE BEGIN P2PS_STM_App_Notification_default */
      
/* USER CODE END P2PS_STM_App_Notification_default */
      break;
 800d274:	e013      	b.n	800d29e <P2PS_STM_App_Notification+0x3e>
      P2P_Server_App_Context.Notification_Status = 1;
 800d276:	4b0c      	ldr	r3, [pc, #48]	@ (800d2a8 <P2PS_STM_App_Notification+0x48>)
 800d278:	2201      	movs	r2, #1
 800d27a:	701a      	strb	r2, [r3, #0]
      APP_DBG_MSG("-- P2P APPLICATION SERVER : NOTIFICATION ENABLED\n"); 
 800d27c:	480b      	ldr	r0, [pc, #44]	@ (800d2ac <P2PS_STM_App_Notification+0x4c>)
 800d27e:	f000 ff0f 	bl	800e0a0 <puts>
      APP_DBG_MSG(" \n\r");
 800d282:	480b      	ldr	r0, [pc, #44]	@ (800d2b0 <P2PS_STM_App_Notification+0x50>)
 800d284:	f000 fe9c 	bl	800dfc0 <iprintf>
      break;
 800d288:	e009      	b.n	800d29e <P2PS_STM_App_Notification+0x3e>
      P2P_Server_App_Context.Notification_Status = 0;
 800d28a:	4b07      	ldr	r3, [pc, #28]	@ (800d2a8 <P2PS_STM_App_Notification+0x48>)
 800d28c:	2200      	movs	r2, #0
 800d28e:	701a      	strb	r2, [r3, #0]
      APP_DBG_MSG("-- P2P APPLICATION SERVER : NOTIFICATION DISABLED\n");
 800d290:	4808      	ldr	r0, [pc, #32]	@ (800d2b4 <P2PS_STM_App_Notification+0x54>)
 800d292:	f000 ff05 	bl	800e0a0 <puts>
      APP_DBG_MSG(" \n\r");
 800d296:	4806      	ldr	r0, [pc, #24]	@ (800d2b0 <P2PS_STM_App_Notification+0x50>)
 800d298:	f000 fe92 	bl	800dfc0 <iprintf>
      break;
 800d29c:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_STM_App_Notification_2 */

/* USER CODE END P2PS_STM_App_Notification_2 */
  return;
 800d29e:	bf00      	nop
}
 800d2a0:	3708      	adds	r7, #8
 800d2a2:	46bd      	mov	sp, r7
 800d2a4:	bd80      	pop	{r7, pc}
 800d2a6:	bf00      	nop
 800d2a8:	20002228 	.word	0x20002228
 800d2ac:	08010560 	.word	0x08010560
 800d2b0:	08010594 	.word	0x08010594
 800d2b4:	08010598 	.word	0x08010598

0800d2b8 <P2PS_APP_Notification>:

void P2PS_APP_Notification(P2PS_APP_ConnHandle_Not_evt_t *pNotification)
{
 800d2b8:	b480      	push	{r7}
 800d2ba:	b083      	sub	sp, #12
 800d2bc:	af00      	add	r7, sp, #0
 800d2be:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_APP_Notification_1 */

/* USER CODE END P2PS_APP_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	781b      	ldrb	r3, [r3, #0]
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d006      	beq.n	800d2d6 <P2PS_APP_Notification+0x1e>
 800d2c8:	2b01      	cmp	r3, #1
 800d2ca:	d000      	beq.n	800d2ce <P2PS_APP_Notification+0x16>

    default:
/* USER CODE BEGIN P2PS_APP_Notification_default */

/* USER CODE END P2PS_APP_Notification_default */
      break;
 800d2cc:	e004      	b.n	800d2d8 <P2PS_APP_Notification+0x20>
    	P2P_Server_App_Context.Notification_Status = 0;
 800d2ce:	4b05      	ldr	r3, [pc, #20]	@ (800d2e4 <P2PS_APP_Notification+0x2c>)
 800d2d0:	2200      	movs	r2, #0
 800d2d2:	701a      	strb	r2, [r3, #0]
    break;
 800d2d4:	e000      	b.n	800d2d8 <P2PS_APP_Notification+0x20>
    break;
 800d2d6:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_APP_Notification_2 */

/* USER CODE END P2PS_APP_Notification_2 */
  return;
 800d2d8:	bf00      	nop
}
 800d2da:	370c      	adds	r7, #12
 800d2dc:	46bd      	mov	sp, r7
 800d2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2e2:	4770      	bx	lr
 800d2e4:	20002228 	.word	0x20002228

0800d2e8 <P2PS_APP_Init>:

void P2PS_APP_Init(void)
{
 800d2e8:	b580      	push	{r7, lr}
 800d2ea:	af00      	add	r7, sp, #0
/* USER CODE BEGIN P2PS_APP_Init */


#ifdef BLE_BUTTON_EVENTS
	UTIL_SEQ_RegTask( 1<< CFG_TASK_SWA_BUTTON_PUSHED_ID, UTIL_SEQ_RFU, SWA_Send_Notification ); //
 800d2ec:	4a09      	ldr	r2, [pc, #36]	@ (800d314 <P2PS_APP_Init+0x2c>)
 800d2ee:	2100      	movs	r1, #0
 800d2f0:	2004      	movs	r0, #4
 800d2f2:	f000 fc85 	bl	800dc00 <UTIL_SEQ_RegTask>
	UTIL_SEQ_RegTask( 1<< CFG_TASK_SWB_BUTTON_PUSHED_ID, UTIL_SEQ_RFU, SWB_Send_Notification ); //
 800d2f6:	4a08      	ldr	r2, [pc, #32]	@ (800d318 <P2PS_APP_Init+0x30>)
 800d2f8:	2100      	movs	r1, #0
 800d2fa:	2008      	movs	r0, #8
 800d2fc:	f000 fc80 	bl	800dc00 <UTIL_SEQ_RegTask>
	UTIL_SEQ_RegTask( 1<< CFG_TASK_IMU_SAMPLE_ID, UTIL_SEQ_RFU, get_and_send_motion_samples ); //
 800d300:	4a06      	ldr	r2, [pc, #24]	@ (800d31c <P2PS_APP_Init+0x34>)
 800d302:	2100      	movs	r1, #0
 800d304:	2010      	movs	r0, #16
 800d306:	f000 fc7b 	bl	800dc00 <UTIL_SEQ_RegTask>
//(FS) Need to attach whatever user function here

  /**
   * Initialize LedButton Service
   */
  P2P_Server_App_Context.Notification_Status=0; 
 800d30a:	4b05      	ldr	r3, [pc, #20]	@ (800d320 <P2PS_APP_Init+0x38>)
 800d30c:	2200      	movs	r2, #0
 800d30e:	701a      	strb	r2, [r3, #0]


  //P2PS_APP_LED_BUTTON_context_Init();
/* USER CODE END P2PS_APP_Init */
  return;
 800d310:	bf00      	nop
}
 800d312:	bd80      	pop	{r7, pc}
 800d314:	0800d345 	.word	0x0800d345
 800d318:	0800d371 	.word	0x0800d371
 800d31c:	0800d39d 	.word	0x0800d39d
 800d320:	20002228 	.word	0x20002228

0800d324 <APP_SWA_Button_Action>:

}
#endif

void APP_SWA_Button_Action(void)
{
 800d324:	b580      	push	{r7, lr}
 800d326:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetTask( 1<<CFG_TASK_SWA_BUTTON_PUSHED_ID, CFG_SCH_PRIO_0);
 800d328:	2100      	movs	r1, #0
 800d32a:	2004      	movs	r0, #4
 800d32c:	f000 fc8a 	bl	800dc44 <UTIL_SEQ_SetTask>
  return;
 800d330:	bf00      	nop
}
 800d332:	bd80      	pop	{r7, pc}

0800d334 <APP_SWB_Button_Action>:

void APP_SWB_Button_Action(void)
{
 800d334:	b580      	push	{r7, lr}
 800d336:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetTask( 1<<CFG_TASK_SWB_BUTTON_PUSHED_ID, CFG_SCH_PRIO_0);
 800d338:	2100      	movs	r1, #0
 800d33a:	2008      	movs	r0, #8
 800d33c:	f000 fc82 	bl	800dc44 <UTIL_SEQ_SetTask>
  return;
 800d340:	bf00      	nop
}
 800d342:	bd80      	pop	{r7, pc}

0800d344 <SWA_Send_Notification>:
	// insert local button management here
}


void SWA_Send_Notification(void)
{
 800d344:	b580      	push	{r7, lr}
 800d346:	af00      	add	r7, sp, #0
	current_event_payload.event_type = EVENT_TYPE_BUTTON_PRESSED;
 800d348:	4b07      	ldr	r3, [pc, #28]	@ (800d368 <SWA_Send_Notification+0x24>)
 800d34a:	2201      	movs	r2, #1
 800d34c:	701a      	strb	r2, [r3, #0]
	current_event_payload.source_id = BUTTON_ID_A;
 800d34e:	4b06      	ldr	r3, [pc, #24]	@ (800d368 <SWA_Send_Notification+0x24>)
 800d350:	2201      	movs	r2, #1
 800d352:	705a      	strb	r2, [r3, #1]
	current_event_payload.packet_id = packet_counter;
 800d354:	4b05      	ldr	r3, [pc, #20]	@ (800d36c <SWA_Send_Notification+0x28>)
 800d356:	781a      	ldrb	r2, [r3, #0]
 800d358:	4b03      	ldr	r3, [pc, #12]	@ (800d368 <SWA_Send_Notification+0x24>)
 800d35a:	709a      	strb	r2, [r3, #2]

	APP_BLE_Send_Event_Notification(&current_event_payload);
 800d35c:	4802      	ldr	r0, [pc, #8]	@ (800d368 <SWA_Send_Notification+0x24>)
 800d35e:	f7ff fba9 	bl	800cab4 <APP_BLE_Send_Event_Notification>
}
 800d362:	bf00      	nop
 800d364:	bd80      	pop	{r7, pc}
 800d366:	bf00      	nop
 800d368:	200021ac 	.word	0x200021ac
 800d36c:	200021a4 	.word	0x200021a4

0800d370 <SWB_Send_Notification>:


void SWB_Send_Notification(void)
{
 800d370:	b580      	push	{r7, lr}
 800d372:	af00      	add	r7, sp, #0
	current_event_payload.event_type = EVENT_TYPE_BUTTON_PRESSED;
 800d374:	4b07      	ldr	r3, [pc, #28]	@ (800d394 <SWB_Send_Notification+0x24>)
 800d376:	2201      	movs	r2, #1
 800d378:	701a      	strb	r2, [r3, #0]
	current_event_payload.source_id = BUTTON_ID_B;
 800d37a:	4b06      	ldr	r3, [pc, #24]	@ (800d394 <SWB_Send_Notification+0x24>)
 800d37c:	2202      	movs	r2, #2
 800d37e:	705a      	strb	r2, [r3, #1]
	current_event_payload.packet_id = packet_counter;
 800d380:	4b05      	ldr	r3, [pc, #20]	@ (800d398 <SWB_Send_Notification+0x28>)
 800d382:	781a      	ldrb	r2, [r3, #0]
 800d384:	4b03      	ldr	r3, [pc, #12]	@ (800d394 <SWB_Send_Notification+0x24>)
 800d386:	709a      	strb	r2, [r3, #2]

	APP_BLE_Send_Event_Notification(&current_event_payload);
 800d388:	4802      	ldr	r0, [pc, #8]	@ (800d394 <SWB_Send_Notification+0x24>)
 800d38a:	f7ff fb93 	bl	800cab4 <APP_BLE_Send_Event_Notification>
}
 800d38e:	bf00      	nop
 800d390:	bd80      	pop	{r7, pc}
 800d392:	bf00      	nop
 800d394:	200021ac 	.word	0x200021ac
 800d398:	200021a4 	.word	0x200021a4

0800d39c <get_and_send_motion_samples>:

static uint8_t peripheralSwitch = 0;

void get_and_send_motion_samples(void){
 800d39c:	b580      	push	{r7, lr}
 800d39e:	af00      	add	r7, sp, #0

	get_and_send_imu_sample();
 800d3a0:	f000 f802 	bl	800d3a8 <get_and_send_imu_sample>
	}else{
		get_and_send_compass_sample();
	}
	peripheralSwitch = (peripheralSwitch == 1) ? 0 : 1;
	*/
}
 800d3a4:	bf00      	nop
 800d3a6:	bd80      	pop	{r7, pc}

0800d3a8 <get_and_send_imu_sample>:



void get_and_send_imu_sample(void){
 800d3a8:	b580      	push	{r7, lr}
 800d3aa:	af00      	add	r7, sp, #0

	if(P2P_Server_App_Context.Notification_Status==1){
 800d3ac:	4b04      	ldr	r3, [pc, #16]	@ (800d3c0 <get_and_send_imu_sample+0x18>)
 800d3ae:	781b      	ldrb	r3, [r3, #0]
 800d3b0:	2b01      	cmp	r3, #1
 800d3b2:	d103      	bne.n	800d3bc <get_and_send_imu_sample+0x14>
		imu_packet_index++;

		if(imu_packet_index>=MOTION_NB_SAMPLES_PER_PACKET){
			imu_packet_index = 0;
		}*/
		APP_BLE_Send_IMU_Notification(accel_packet, gyro_packet);
 800d3b4:	4903      	ldr	r1, [pc, #12]	@ (800d3c4 <get_and_send_imu_sample+0x1c>)
 800d3b6:	4804      	ldr	r0, [pc, #16]	@ (800d3c8 <get_and_send_imu_sample+0x20>)
 800d3b8:	f7ff fb98 	bl	800caec <APP_BLE_Send_IMU_Notification>
	}
}
 800d3bc:	bf00      	nop
 800d3be:	bd80      	pop	{r7, pc}
 800d3c0:	20002228 	.word	0x20002228
 800d3c4:	200021ec 	.word	0x200021ec
 800d3c8:	200021b0 	.word	0x200021b0

0800d3cc <APP_BLE_Manage_ADS1299_event>:




void APP_BLE_Manage_ADS1299_event(void)
{
 800d3cc:	b580      	push	{r7, lr}
 800d3ce:	af00      	add	r7, sp, #0
	if(P2P_Server_App_Context.Notification_Status){
 800d3d0:	4b38      	ldr	r3, [pc, #224]	@ (800d4b4 <APP_BLE_Manage_ADS1299_event+0xe8>)
 800d3d2:	781b      	ldrb	r3, [r3, #0]
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d06a      	beq.n	800d4ae <APP_BLE_Manage_ADS1299_event+0xe2>

		if(sample_index==0){
 800d3d8:	4b37      	ldr	r3, [pc, #220]	@ (800d4b8 <APP_BLE_Manage_ADS1299_event+0xec>)
 800d3da:	781b      	ldrb	r3, [r3, #0]
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d10d      	bne.n	800d3fc <APP_BLE_Manage_ADS1299_event+0x30>
			buffered_packets_array[buffer_index][0] = packet_counter;
 800d3e0:	4b36      	ldr	r3, [pc, #216]	@ (800d4bc <APP_BLE_Manage_ADS1299_event+0xf0>)
 800d3e2:	781b      	ldrb	r3, [r3, #0]
 800d3e4:	461a      	mov	r2, r3
 800d3e6:	4b36      	ldr	r3, [pc, #216]	@ (800d4c0 <APP_BLE_Manage_ADS1299_event+0xf4>)
 800d3e8:	7818      	ldrb	r0, [r3, #0]
 800d3ea:	4936      	ldr	r1, [pc, #216]	@ (800d4c4 <APP_BLE_Manage_ADS1299_event+0xf8>)
 800d3ec:	4613      	mov	r3, r2
 800d3ee:	011b      	lsls	r3, r3, #4
 800d3f0:	1a9b      	subs	r3, r3, r2
 800d3f2:	011b      	lsls	r3, r3, #4
 800d3f4:	4413      	add	r3, r2
 800d3f6:	440b      	add	r3, r1
 800d3f8:	4602      	mov	r2, r0
 800d3fa:	701a      	strb	r2, [r3, #0]
		}

		ADS1299_ReadSamples(statusBuffer, &buffered_packets_array[buffer_index][sample_index*SAMPLE_SIZE+1]);
 800d3fc:	4b2f      	ldr	r3, [pc, #188]	@ (800d4bc <APP_BLE_Manage_ADS1299_event+0xf0>)
 800d3fe:	781b      	ldrb	r3, [r3, #0]
 800d400:	461a      	mov	r2, r3
 800d402:	4b2d      	ldr	r3, [pc, #180]	@ (800d4b8 <APP_BLE_Manage_ADS1299_event+0xec>)
 800d404:	781b      	ldrb	r3, [r3, #0]
 800d406:	4619      	mov	r1, r3
 800d408:	460b      	mov	r3, r1
 800d40a:	005b      	lsls	r3, r3, #1
 800d40c:	440b      	add	r3, r1
 800d40e:	00db      	lsls	r3, r3, #3
 800d410:	1c59      	adds	r1, r3, #1
 800d412:	4613      	mov	r3, r2
 800d414:	011b      	lsls	r3, r3, #4
 800d416:	1a9b      	subs	r3, r3, r2
 800d418:	011b      	lsls	r3, r3, #4
 800d41a:	4413      	add	r3, r2
 800d41c:	440b      	add	r3, r1
 800d41e:	4a29      	ldr	r2, [pc, #164]	@ (800d4c4 <APP_BLE_Manage_ADS1299_event+0xf8>)
 800d420:	4413      	add	r3, r2
 800d422:	4619      	mov	r1, r3
 800d424:	4828      	ldr	r0, [pc, #160]	@ (800d4c8 <APP_BLE_Manage_ADS1299_event+0xfc>)
 800d426:	f7f3 fd29 	bl	8000e7c <ADS1299_ReadSamples>
		sample_index++;
 800d42a:	4b23      	ldr	r3, [pc, #140]	@ (800d4b8 <APP_BLE_Manage_ADS1299_event+0xec>)
 800d42c:	781b      	ldrb	r3, [r3, #0]
 800d42e:	3301      	adds	r3, #1
 800d430:	b2da      	uxtb	r2, r3
 800d432:	4b21      	ldr	r3, [pc, #132]	@ (800d4b8 <APP_BLE_Manage_ADS1299_event+0xec>)
 800d434:	701a      	strb	r2, [r3, #0]

		if(sample_index >= NB_SAMPLES_PER_PACKET){
 800d436:	4b20      	ldr	r3, [pc, #128]	@ (800d4b8 <APP_BLE_Manage_ADS1299_event+0xec>)
 800d438:	781b      	ldrb	r3, [r3, #0]
 800d43a:	2b09      	cmp	r3, #9
 800d43c:	d937      	bls.n	800d4ae <APP_BLE_Manage_ADS1299_event+0xe2>
			if(APP_BLE_Send_EEGData_Notification(buffered_packets_array[buffer_index], PACKET_SIZE)!=0){
 800d43e:	4b1f      	ldr	r3, [pc, #124]	@ (800d4bc <APP_BLE_Manage_ADS1299_event+0xf0>)
 800d440:	781b      	ldrb	r3, [r3, #0]
 800d442:	461a      	mov	r2, r3
 800d444:	4613      	mov	r3, r2
 800d446:	011b      	lsls	r3, r3, #4
 800d448:	1a9b      	subs	r3, r3, r2
 800d44a:	011b      	lsls	r3, r3, #4
 800d44c:	4413      	add	r3, r2
 800d44e:	4a1d      	ldr	r2, [pc, #116]	@ (800d4c4 <APP_BLE_Manage_ADS1299_event+0xf8>)
 800d450:	4413      	add	r3, r2
 800d452:	21f1      	movs	r1, #241	@ 0xf1
 800d454:	4618      	mov	r0, r3
 800d456:	f7ff fb0b 	bl	800ca70 <APP_BLE_Send_EEGData_Notification>
 800d45a:	4603      	mov	r3, r0
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d004      	beq.n	800d46a <APP_BLE_Manage_ADS1299_event+0x9e>
				HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_SET);
 800d460:	2201      	movs	r2, #1
 800d462:	2101      	movs	r1, #1
 800d464:	4819      	ldr	r0, [pc, #100]	@ (800d4cc <APP_BLE_Manage_ADS1299_event+0x100>)
 800d466:	f7f6 fd59 	bl	8003f1c <HAL_GPIO_WritePin>
			}

			buffer_index = (buffer_index + 1) % PACKETBUFFER_DEPTH;
 800d46a:	4b14      	ldr	r3, [pc, #80]	@ (800d4bc <APP_BLE_Manage_ADS1299_event+0xf0>)
 800d46c:	781b      	ldrb	r3, [r3, #0]
 800d46e:	1c5a      	adds	r2, r3, #1
 800d470:	4b17      	ldr	r3, [pc, #92]	@ (800d4d0 <APP_BLE_Manage_ADS1299_event+0x104>)
 800d472:	fb83 1302 	smull	r1, r3, r3, r2
 800d476:	4413      	add	r3, r2
 800d478:	1119      	asrs	r1, r3, #4
 800d47a:	17d3      	asrs	r3, r2, #31
 800d47c:	1ac9      	subs	r1, r1, r3
 800d47e:	460b      	mov	r3, r1
 800d480:	011b      	lsls	r3, r3, #4
 800d482:	1a5b      	subs	r3, r3, r1
 800d484:	005b      	lsls	r3, r3, #1
 800d486:	1ad1      	subs	r1, r2, r3
 800d488:	b2ca      	uxtb	r2, r1
 800d48a:	4b0c      	ldr	r3, [pc, #48]	@ (800d4bc <APP_BLE_Manage_ADS1299_event+0xf0>)
 800d48c:	701a      	strb	r2, [r3, #0]
			packet_counter = (packet_counter + 1) % 128;
 800d48e:	4b0c      	ldr	r3, [pc, #48]	@ (800d4c0 <APP_BLE_Manage_ADS1299_event+0xf4>)
 800d490:	781b      	ldrb	r3, [r3, #0]
 800d492:	3301      	adds	r3, #1
 800d494:	425a      	negs	r2, r3
 800d496:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d49a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800d49e:	bf58      	it	pl
 800d4a0:	4253      	negpl	r3, r2
 800d4a2:	b2da      	uxtb	r2, r3
 800d4a4:	4b06      	ldr	r3, [pc, #24]	@ (800d4c0 <APP_BLE_Manage_ADS1299_event+0xf4>)
 800d4a6:	701a      	strb	r2, [r3, #0]
			sample_index = 0;
 800d4a8:	4b03      	ldr	r3, [pc, #12]	@ (800d4b8 <APP_BLE_Manage_ADS1299_event+0xec>)
 800d4aa:	2200      	movs	r2, #0
 800d4ac:	701a      	strb	r2, [r3, #0]
		}
	}
}
 800d4ae:	bf00      	nop
 800d4b0:	bd80      	pop	{r7, pc}
 800d4b2:	bf00      	nop
 800d4b4:	20002228 	.word	0x20002228
 800d4b8:	200021a3 	.word	0x200021a3
 800d4bc:	200021a2 	.word	0x200021a2
 800d4c0:	200021a4 	.word	0x200021a4
 800d4c4:	20000564 	.word	0x20000564
 800d4c8:	200021a8 	.word	0x200021a8
 800d4cc:	48000400 	.word	0x48000400
 800d4d0:	88888889 	.word	0x88888889

0800d4d4 <is_connected>:



uint8_t is_connected(void){
 800d4d4:	b480      	push	{r7}
 800d4d6:	af00      	add	r7, sp, #0
	return P2P_Server_App_Context.Notification_Status == 1;
 800d4d8:	4b05      	ldr	r3, [pc, #20]	@ (800d4f0 <is_connected+0x1c>)
 800d4da:	781b      	ldrb	r3, [r3, #0]
 800d4dc:	2b01      	cmp	r3, #1
 800d4de:	bf0c      	ite	eq
 800d4e0:	2301      	moveq	r3, #1
 800d4e2:	2300      	movne	r3, #0
 800d4e4:	b2db      	uxtb	r3, r3
}
 800d4e6:	4618      	mov	r0, r3
 800d4e8:	46bd      	mov	sp, r7
 800d4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ee:	4770      	bx	lr
 800d4f0:	20002228 	.word	0x20002228

0800d4f4 <LL_PWR_EnableBootC2>:
{
 800d4f4:	b480      	push	{r7}
 800d4f6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800d4f8:	4b05      	ldr	r3, [pc, #20]	@ (800d510 <LL_PWR_EnableBootC2+0x1c>)
 800d4fa:	68db      	ldr	r3, [r3, #12]
 800d4fc:	4a04      	ldr	r2, [pc, #16]	@ (800d510 <LL_PWR_EnableBootC2+0x1c>)
 800d4fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d502:	60d3      	str	r3, [r2, #12]
}
 800d504:	bf00      	nop
 800d506:	46bd      	mov	sp, r7
 800d508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d50c:	4770      	bx	lr
 800d50e:	bf00      	nop
 800d510:	58000400 	.word	0x58000400

0800d514 <LL_C2_EXTI_EnableEvent_32_63>:
{
 800d514:	b480      	push	{r7}
 800d516:	b083      	sub	sp, #12
 800d518:	af00      	add	r7, sp, #0
 800d51a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 800d51c:	4b06      	ldr	r3, [pc, #24]	@ (800d538 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800d51e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 800d522:	4905      	ldr	r1, [pc, #20]	@ (800d538 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	4313      	orrs	r3, r2
 800d528:	f8c1 30d4 	str.w	r3, [r1, #212]	@ 0xd4
}
 800d52c:	bf00      	nop
 800d52e:	370c      	adds	r7, #12
 800d530:	46bd      	mov	sp, r7
 800d532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d536:	4770      	bx	lr
 800d538:	58000800 	.word	0x58000800

0800d53c <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 800d53c:	b480      	push	{r7}
 800d53e:	b083      	sub	sp, #12
 800d540:	af00      	add	r7, sp, #0
 800d542:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800d544:	4b05      	ldr	r3, [pc, #20]	@ (800d55c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800d546:	6a1a      	ldr	r2, [r3, #32]
 800d548:	4904      	ldr	r1, [pc, #16]	@ (800d55c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	4313      	orrs	r3, r2
 800d54e:	620b      	str	r3, [r1, #32]
}
 800d550:	bf00      	nop
 800d552:	370c      	adds	r7, #12
 800d554:	46bd      	mov	sp, r7
 800d556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d55a:	4770      	bx	lr
 800d55c:	58000800 	.word	0x58000800

0800d560 <LL_AHB3_GRP1_EnableClock>:
{
 800d560:	b480      	push	{r7}
 800d562:	b085      	sub	sp, #20
 800d564:	af00      	add	r7, sp, #0
 800d566:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800d568:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d56c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d56e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	4313      	orrs	r3, r2
 800d576:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800d578:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d57c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	4013      	ands	r3, r2
 800d582:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800d584:	68fb      	ldr	r3, [r7, #12]
}
 800d586:	bf00      	nop
 800d588:	3714      	adds	r7, #20
 800d58a:	46bd      	mov	sp, r7
 800d58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d590:	4770      	bx	lr

0800d592 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800d592:	b480      	push	{r7}
 800d594:	b085      	sub	sp, #20
 800d596:	af00      	add	r7, sp, #0
 800d598:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 800d59a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d59e:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 800d5a2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	4313      	orrs	r3, r2
 800d5aa:	f8c1 3150 	str.w	r3, [r1, #336]	@ 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 800d5ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d5b2:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	4013      	ands	r3, r2
 800d5ba:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800d5bc:	68fb      	ldr	r3, [r7, #12]
}
 800d5be:	bf00      	nop
 800d5c0:	3714      	adds	r7, #20
 800d5c2:	46bd      	mov	sp, r7
 800d5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5c8:	4770      	bx	lr

0800d5ca <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 800d5ca:	b480      	push	{r7}
 800d5cc:	b083      	sub	sp, #12
 800d5ce:	af00      	add	r7, sp, #0
 800d5d0:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	601a      	str	r2, [r3, #0]
}
 800d5de:	bf00      	nop
 800d5e0:	370c      	adds	r7, #12
 800d5e2:	46bd      	mov	sp, r7
 800d5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5e8:	4770      	bx	lr

0800d5ea <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 800d5ea:	b480      	push	{r7}
 800d5ec:	b083      	sub	sp, #12
 800d5ee:	af00      	add	r7, sp, #0
 800d5f0:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	f043 0201 	orr.w	r2, r3, #1
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	601a      	str	r2, [r3, #0]
}
 800d5fe:	bf00      	nop
 800d600:	370c      	adds	r7, #12
 800d602:	46bd      	mov	sp, r7
 800d604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d608:	4770      	bx	lr

0800d60a <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800d60a:	b480      	push	{r7}
 800d60c:	b083      	sub	sp, #12
 800d60e:	af00      	add	r7, sp, #0
 800d610:	6078      	str	r0, [r7, #4]
 800d612:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	685a      	ldr	r2, [r3, #4]
 800d618:	683b      	ldr	r3, [r7, #0]
 800d61a:	041b      	lsls	r3, r3, #16
 800d61c:	43db      	mvns	r3, r3
 800d61e:	401a      	ands	r2, r3
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	605a      	str	r2, [r3, #4]
}
 800d624:	bf00      	nop
 800d626:	370c      	adds	r7, #12
 800d628:	46bd      	mov	sp, r7
 800d62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d62e:	4770      	bx	lr

0800d630 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800d630:	b480      	push	{r7}
 800d632:	b083      	sub	sp, #12
 800d634:	af00      	add	r7, sp, #0
 800d636:	6078      	str	r0, [r7, #4]
 800d638:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	685a      	ldr	r2, [r3, #4]
 800d63e:	683b      	ldr	r3, [r7, #0]
 800d640:	041b      	lsls	r3, r3, #16
 800d642:	431a      	orrs	r2, r3
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	605a      	str	r2, [r3, #4]
}
 800d648:	bf00      	nop
 800d64a:	370c      	adds	r7, #12
 800d64c:	46bd      	mov	sp, r7
 800d64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d652:	4770      	bx	lr

0800d654 <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800d654:	b480      	push	{r7}
 800d656:	b083      	sub	sp, #12
 800d658:	af00      	add	r7, sp, #0
 800d65a:	6078      	str	r0, [r7, #4]
 800d65c:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	685a      	ldr	r2, [r3, #4]
 800d662:	683b      	ldr	r3, [r7, #0]
 800d664:	43db      	mvns	r3, r3
 800d666:	401a      	ands	r2, r3
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	605a      	str	r2, [r3, #4]
}
 800d66c:	bf00      	nop
 800d66e:	370c      	adds	r7, #12
 800d670:	46bd      	mov	sp, r7
 800d672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d676:	4770      	bx	lr

0800d678 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800d678:	b480      	push	{r7}
 800d67a:	b083      	sub	sp, #12
 800d67c:	af00      	add	r7, sp, #0
 800d67e:	6078      	str	r0, [r7, #4]
 800d680:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	683a      	ldr	r2, [r7, #0]
 800d686:	609a      	str	r2, [r3, #8]
}
 800d688:	bf00      	nop
 800d68a:	370c      	adds	r7, #12
 800d68c:	46bd      	mov	sp, r7
 800d68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d692:	4770      	bx	lr

0800d694 <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800d694:	b480      	push	{r7}
 800d696:	b083      	sub	sp, #12
 800d698:	af00      	add	r7, sp, #0
 800d69a:	6078      	str	r0, [r7, #4]
 800d69c:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800d69e:	683b      	ldr	r3, [r7, #0]
 800d6a0:	041a      	lsls	r2, r3, #16
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	609a      	str	r2, [r3, #8]
}
 800d6a6:	bf00      	nop
 800d6a8:	370c      	adds	r7, #12
 800d6aa:	46bd      	mov	sp, r7
 800d6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6b0:	4770      	bx	lr

0800d6b2 <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800d6b2:	b480      	push	{r7}
 800d6b4:	b083      	sub	sp, #12
 800d6b6:	af00      	add	r7, sp, #0
 800d6b8:	6078      	str	r0, [r7, #4]
 800d6ba:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	68da      	ldr	r2, [r3, #12]
 800d6c0:	683b      	ldr	r3, [r7, #0]
 800d6c2:	4013      	ands	r3, r2
 800d6c4:	683a      	ldr	r2, [r7, #0]
 800d6c6:	429a      	cmp	r2, r3
 800d6c8:	d101      	bne.n	800d6ce <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800d6ca:	2301      	movs	r3, #1
 800d6cc:	e000      	b.n	800d6d0 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800d6ce:	2300      	movs	r3, #0
}
 800d6d0:	4618      	mov	r0, r3
 800d6d2:	370c      	adds	r7, #12
 800d6d4:	46bd      	mov	sp, r7
 800d6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6da:	4770      	bx	lr

0800d6dc <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800d6dc:	b480      	push	{r7}
 800d6de:	b083      	sub	sp, #12
 800d6e0:	af00      	add	r7, sp, #0
 800d6e2:	6078      	str	r0, [r7, #4]
 800d6e4:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	69da      	ldr	r2, [r3, #28]
 800d6ea:	683b      	ldr	r3, [r7, #0]
 800d6ec:	4013      	ands	r3, r2
 800d6ee:	683a      	ldr	r2, [r7, #0]
 800d6f0:	429a      	cmp	r2, r3
 800d6f2:	d101      	bne.n	800d6f8 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 800d6f4:	2301      	movs	r3, #1
 800d6f6:	e000      	b.n	800d6fa <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 800d6f8:	2300      	movs	r3, #0
}
 800d6fa:	4618      	mov	r0, r3
 800d6fc:	370c      	adds	r7, #12
 800d6fe:	46bd      	mov	sp, r7
 800d700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d704:	4770      	bx	lr
	...

0800d708 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 800d708:	b580      	push	{r7, lr}
 800d70a:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 800d70c:	2102      	movs	r1, #2
 800d70e:	4818      	ldr	r0, [pc, #96]	@ (800d770 <HW_IPCC_Rx_Handler+0x68>)
 800d710:	f7ff ffe4 	bl	800d6dc <LL_C2_IPCC_IsActiveFlag_CHx>
 800d714:	4603      	mov	r3, r0
 800d716:	2b00      	cmp	r3, #0
 800d718:	d008      	beq.n	800d72c <HW_IPCC_Rx_Handler+0x24>
 800d71a:	4b15      	ldr	r3, [pc, #84]	@ (800d770 <HW_IPCC_Rx_Handler+0x68>)
 800d71c:	685b      	ldr	r3, [r3, #4]
 800d71e:	f003 0302 	and.w	r3, r3, #2
 800d722:	2b00      	cmp	r3, #0
 800d724:	d102      	bne.n	800d72c <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 800d726:	f000 f8d5 	bl	800d8d4 <HW_IPCC_SYS_EvtHandler>
 800d72a:	e01e      	b.n	800d76a <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800d72c:	2101      	movs	r1, #1
 800d72e:	4810      	ldr	r0, [pc, #64]	@ (800d770 <HW_IPCC_Rx_Handler+0x68>)
 800d730:	f7ff ffd4 	bl	800d6dc <LL_C2_IPCC_IsActiveFlag_CHx>
 800d734:	4603      	mov	r3, r0
 800d736:	2b00      	cmp	r3, #0
 800d738:	d008      	beq.n	800d74c <HW_IPCC_Rx_Handler+0x44>
 800d73a:	4b0d      	ldr	r3, [pc, #52]	@ (800d770 <HW_IPCC_Rx_Handler+0x68>)
 800d73c:	685b      	ldr	r3, [r3, #4]
 800d73e:	f003 0301 	and.w	r3, r3, #1
 800d742:	2b00      	cmp	r3, #0
 800d744:	d102      	bne.n	800d74c <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 800d746:	f000 f889 	bl	800d85c <HW_IPCC_BLE_EvtHandler>
 800d74a:	e00e      	b.n	800d76a <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 800d74c:	2108      	movs	r1, #8
 800d74e:	4808      	ldr	r0, [pc, #32]	@ (800d770 <HW_IPCC_Rx_Handler+0x68>)
 800d750:	f7ff ffc4 	bl	800d6dc <LL_C2_IPCC_IsActiveFlag_CHx>
 800d754:	4603      	mov	r3, r0
 800d756:	2b00      	cmp	r3, #0
 800d758:	d008      	beq.n	800d76c <HW_IPCC_Rx_Handler+0x64>
 800d75a:	4b05      	ldr	r3, [pc, #20]	@ (800d770 <HW_IPCC_Rx_Handler+0x68>)
 800d75c:	685b      	ldr	r3, [r3, #4]
 800d75e:	f003 0308 	and.w	r3, r3, #8
 800d762:	2b00      	cmp	r3, #0
 800d764:	d102      	bne.n	800d76c <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 800d766:	f000 f901 	bl	800d96c <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 800d76a:	bf00      	nop
 800d76c:	bf00      	nop
}
 800d76e:	bd80      	pop	{r7, pc}
 800d770:	58000c00 	.word	0x58000c00

0800d774 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 800d774:	b580      	push	{r7, lr}
 800d776:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800d778:	2102      	movs	r1, #2
 800d77a:	4818      	ldr	r0, [pc, #96]	@ (800d7dc <HW_IPCC_Tx_Handler+0x68>)
 800d77c:	f7ff ff99 	bl	800d6b2 <LL_C1_IPCC_IsActiveFlag_CHx>
 800d780:	4603      	mov	r3, r0
 800d782:	2b00      	cmp	r3, #0
 800d784:	d108      	bne.n	800d798 <HW_IPCC_Tx_Handler+0x24>
 800d786:	4b15      	ldr	r3, [pc, #84]	@ (800d7dc <HW_IPCC_Tx_Handler+0x68>)
 800d788:	685b      	ldr	r3, [r3, #4]
 800d78a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d102      	bne.n	800d798 <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800d792:	f000 f893 	bl	800d8bc <HW_IPCC_SYS_CmdEvtHandler>
 800d796:	e01e      	b.n	800d7d6 <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800d798:	2108      	movs	r1, #8
 800d79a:	4810      	ldr	r0, [pc, #64]	@ (800d7dc <HW_IPCC_Tx_Handler+0x68>)
 800d79c:	f7ff ff89 	bl	800d6b2 <LL_C1_IPCC_IsActiveFlag_CHx>
 800d7a0:	4603      	mov	r3, r0
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d108      	bne.n	800d7b8 <HW_IPCC_Tx_Handler+0x44>
 800d7a6:	4b0d      	ldr	r3, [pc, #52]	@ (800d7dc <HW_IPCC_Tx_Handler+0x68>)
 800d7a8:	685b      	ldr	r3, [r3, #4]
 800d7aa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d102      	bne.n	800d7b8 <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 800d7b2:	f000 f8bd 	bl	800d930 <HW_IPCC_MM_FreeBufHandler>
 800d7b6:	e00e      	b.n	800d7d6 <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800d7b8:	2120      	movs	r1, #32
 800d7ba:	4808      	ldr	r0, [pc, #32]	@ (800d7dc <HW_IPCC_Tx_Handler+0x68>)
 800d7bc:	f7ff ff79 	bl	800d6b2 <LL_C1_IPCC_IsActiveFlag_CHx>
 800d7c0:	4603      	mov	r3, r0
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d108      	bne.n	800d7d8 <HW_IPCC_Tx_Handler+0x64>
 800d7c6:	4b05      	ldr	r3, [pc, #20]	@ (800d7dc <HW_IPCC_Tx_Handler+0x68>)
 800d7c8:	685b      	ldr	r3, [r3, #4]
 800d7ca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d102      	bne.n	800d7d8 <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 800d7d2:	f000 f84f 	bl	800d874 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800d7d6:	bf00      	nop
 800d7d8:	bf00      	nop
}
 800d7da:	bd80      	pop	{r7, pc}
 800d7dc:	58000c00 	.word	0x58000c00

0800d7e0 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 800d7e0:	b580      	push	{r7, lr}
 800d7e2:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 800d7e4:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800d7e8:	f7ff fed3 	bl	800d592 <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 800d7ec:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800d7f0:	f7ff fea4 	bl	800d53c <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 800d7f4:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800d7f8:	f7ff fe8c 	bl	800d514 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 800d7fc:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800d7fe:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 800d800:	f7ff fe78 	bl	800d4f4 <LL_PWR_EnableBootC2>

  return;
 800d804:	bf00      	nop
}
 800d806:	bd80      	pop	{r7, pc}

0800d808 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 800d808:	b580      	push	{r7, lr}
 800d80a:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 800d80c:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800d810:	f7ff fea6 	bl	800d560 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 800d814:	4806      	ldr	r0, [pc, #24]	@ (800d830 <HW_IPCC_Init+0x28>)
 800d816:	f7ff fee8 	bl	800d5ea <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800d81a:	4805      	ldr	r0, [pc, #20]	@ (800d830 <HW_IPCC_Init+0x28>)
 800d81c:	f7ff fed5 	bl	800d5ca <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800d820:	202c      	movs	r0, #44	@ 0x2c
 800d822:	f7f5 fe94 	bl	800354e <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800d826:	202d      	movs	r0, #45	@ 0x2d
 800d828:	f7f5 fe91 	bl	800354e <HAL_NVIC_EnableIRQ>

  return;
 800d82c:	bf00      	nop
}
 800d82e:	bd80      	pop	{r7, pc}
 800d830:	58000c00 	.word	0x58000c00

0800d834 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 800d834:	b580      	push	{r7, lr}
 800d836:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800d838:	2101      	movs	r1, #1
 800d83a:	4802      	ldr	r0, [pc, #8]	@ (800d844 <HW_IPCC_BLE_Init+0x10>)
 800d83c:	f7ff ff0a 	bl	800d654 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800d840:	bf00      	nop
}
 800d842:	bd80      	pop	{r7, pc}
 800d844:	58000c00 	.word	0x58000c00

0800d848 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 800d848:	b580      	push	{r7, lr}
 800d84a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 800d84c:	2101      	movs	r1, #1
 800d84e:	4802      	ldr	r0, [pc, #8]	@ (800d858 <HW_IPCC_BLE_SendCmd+0x10>)
 800d850:	f7ff ff20 	bl	800d694 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800d854:	bf00      	nop
}
 800d856:	bd80      	pop	{r7, pc}
 800d858:	58000c00 	.word	0x58000c00

0800d85c <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 800d85c:	b580      	push	{r7, lr}
 800d85e:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 800d860:	f7fd fb6c 	bl	800af3c <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800d864:	2101      	movs	r1, #1
 800d866:	4802      	ldr	r0, [pc, #8]	@ (800d870 <HW_IPCC_BLE_EvtHandler+0x14>)
 800d868:	f7ff ff06 	bl	800d678 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800d86c:	bf00      	nop
}
 800d86e:	bd80      	pop	{r7, pc}
 800d870:	58000c00 	.word	0x58000c00

0800d874 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 800d874:	b580      	push	{r7, lr}
 800d876:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 800d878:	2120      	movs	r1, #32
 800d87a:	4803      	ldr	r0, [pc, #12]	@ (800d888 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 800d87c:	f7ff fed8 	bl	800d630 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 800d880:	f7fd fb8c 	bl	800af9c <HW_IPCC_BLE_AclDataAckNot>

  return;
 800d884:	bf00      	nop
}
 800d886:	bd80      	pop	{r7, pc}
 800d888:	58000c00 	.word	0x58000c00

0800d88c <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 800d88c:	b580      	push	{r7, lr}
 800d88e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800d890:	2102      	movs	r1, #2
 800d892:	4802      	ldr	r0, [pc, #8]	@ (800d89c <HW_IPCC_SYS_Init+0x10>)
 800d894:	f7ff fede 	bl	800d654 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800d898:	bf00      	nop
}
 800d89a:	bd80      	pop	{r7, pc}
 800d89c:	58000c00 	.word	0x58000c00

0800d8a0 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 800d8a0:	b580      	push	{r7, lr}
 800d8a2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800d8a4:	2102      	movs	r1, #2
 800d8a6:	4804      	ldr	r0, [pc, #16]	@ (800d8b8 <HW_IPCC_SYS_SendCmd+0x18>)
 800d8a8:	f7ff fef4 	bl	800d694 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800d8ac:	2102      	movs	r1, #2
 800d8ae:	4802      	ldr	r0, [pc, #8]	@ (800d8b8 <HW_IPCC_SYS_SendCmd+0x18>)
 800d8b0:	f7ff feab 	bl	800d60a <LL_C1_IPCC_EnableTransmitChannel>

  return;
 800d8b4:	bf00      	nop
}
 800d8b6:	bd80      	pop	{r7, pc}
 800d8b8:	58000c00 	.word	0x58000c00

0800d8bc <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 800d8bc:	b580      	push	{r7, lr}
 800d8be:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800d8c0:	2102      	movs	r1, #2
 800d8c2:	4803      	ldr	r0, [pc, #12]	@ (800d8d0 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 800d8c4:	f7ff feb4 	bl	800d630 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 800d8c8:	f7fd fbb8 	bl	800b03c <HW_IPCC_SYS_CmdEvtNot>

  return;
 800d8cc:	bf00      	nop
}
 800d8ce:	bd80      	pop	{r7, pc}
 800d8d0:	58000c00 	.word	0x58000c00

0800d8d4 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 800d8d4:	b580      	push	{r7, lr}
 800d8d6:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 800d8d8:	f7fd fbc6 	bl	800b068 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800d8dc:	2102      	movs	r1, #2
 800d8de:	4802      	ldr	r0, [pc, #8]	@ (800d8e8 <HW_IPCC_SYS_EvtHandler+0x14>)
 800d8e0:	f7ff feca 	bl	800d678 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800d8e4:	bf00      	nop
}
 800d8e6:	bd80      	pop	{r7, pc}
 800d8e8:	58000c00 	.word	0x58000c00

0800d8ec <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 800d8ec:	b580      	push	{r7, lr}
 800d8ee:	b082      	sub	sp, #8
 800d8f0:	af00      	add	r7, sp, #0
 800d8f2:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 800d8f4:	2108      	movs	r1, #8
 800d8f6:	480c      	ldr	r0, [pc, #48]	@ (800d928 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800d8f8:	f7ff fedb 	bl	800d6b2 <LL_C1_IPCC_IsActiveFlag_CHx>
 800d8fc:	4603      	mov	r3, r0
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d007      	beq.n	800d912 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 800d902:	4a0a      	ldr	r2, [pc, #40]	@ (800d92c <HW_IPCC_MM_SendFreeBuf+0x40>)
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800d908:	2108      	movs	r1, #8
 800d90a:	4807      	ldr	r0, [pc, #28]	@ (800d928 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800d90c:	f7ff fe7d 	bl	800d60a <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 800d910:	e006      	b.n	800d920 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800d916:	2108      	movs	r1, #8
 800d918:	4803      	ldr	r0, [pc, #12]	@ (800d928 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800d91a:	f7ff febb 	bl	800d694 <LL_C1_IPCC_SetFlag_CHx>
  return;
 800d91e:	bf00      	nop
}
 800d920:	3708      	adds	r7, #8
 800d922:	46bd      	mov	sp, r7
 800d924:	bd80      	pop	{r7, pc}
 800d926:	bf00      	nop
 800d928:	58000c00 	.word	0x58000c00
 800d92c:	20002230 	.word	0x20002230

0800d930 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 800d930:	b580      	push	{r7, lr}
 800d932:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800d934:	2108      	movs	r1, #8
 800d936:	4806      	ldr	r0, [pc, #24]	@ (800d950 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800d938:	f7ff fe7a 	bl	800d630 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 800d93c:	4b05      	ldr	r3, [pc, #20]	@ (800d954 <HW_IPCC_MM_FreeBufHandler+0x24>)
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800d942:	2108      	movs	r1, #8
 800d944:	4802      	ldr	r0, [pc, #8]	@ (800d950 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800d946:	f7ff fea5 	bl	800d694 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800d94a:	bf00      	nop
}
 800d94c:	bd80      	pop	{r7, pc}
 800d94e:	bf00      	nop
 800d950:	58000c00 	.word	0x58000c00
 800d954:	20002230 	.word	0x20002230

0800d958 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 800d958:	b580      	push	{r7, lr}
 800d95a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 800d95c:	2108      	movs	r1, #8
 800d95e:	4802      	ldr	r0, [pc, #8]	@ (800d968 <HW_IPCC_TRACES_Init+0x10>)
 800d960:	f7ff fe78 	bl	800d654 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800d964:	bf00      	nop
}
 800d966:	bd80      	pop	{r7, pc}
 800d968:	58000c00 	.word	0x58000c00

0800d96c <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 800d96c:	b580      	push	{r7, lr}
 800d96e:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 800d970:	f7fd fc22 	bl	800b1b8 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 800d974:	2108      	movs	r1, #8
 800d976:	4802      	ldr	r0, [pc, #8]	@ (800d980 <HW_IPCC_TRACES_EvtHandler+0x14>)
 800d978:	f7ff fe7e 	bl	800d678 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800d97c:	bf00      	nop
}
 800d97e:	bd80      	pop	{r7, pc}
 800d980:	58000c00 	.word	0x58000c00

0800d984 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800d984:	b480      	push	{r7}
 800d986:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800d988:	4b05      	ldr	r3, [pc, #20]	@ (800d9a0 <UTIL_LPM_Init+0x1c>)
 800d98a:	2200      	movs	r2, #0
 800d98c:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800d98e:	4b05      	ldr	r3, [pc, #20]	@ (800d9a4 <UTIL_LPM_Init+0x20>)
 800d990:	2200      	movs	r2, #0
 800d992:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800d994:	bf00      	nop
 800d996:	46bd      	mov	sp, r7
 800d998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d99c:	4770      	bx	lr
 800d99e:	bf00      	nop
 800d9a0:	20002234 	.word	0x20002234
 800d9a4:	20002238 	.word	0x20002238

0800d9a8 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800d9a8:	b480      	push	{r7}
 800d9aa:	b087      	sub	sp, #28
 800d9ac:	af00      	add	r7, sp, #0
 800d9ae:	6078      	str	r0, [r7, #4]
 800d9b0:	460b      	mov	r3, r1
 800d9b2:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d9b4:	f3ef 8310 	mrs	r3, PRIMASK
 800d9b8:	613b      	str	r3, [r7, #16]
  return(result);
 800d9ba:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800d9bc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800d9be:	b672      	cpsid	i
}
 800d9c0:	bf00      	nop
  
  switch(state)
 800d9c2:	78fb      	ldrb	r3, [r7, #3]
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d008      	beq.n	800d9da <UTIL_LPM_SetOffMode+0x32>
 800d9c8:	2b01      	cmp	r3, #1
 800d9ca:	d10e      	bne.n	800d9ea <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800d9cc:	4b0d      	ldr	r3, [pc, #52]	@ (800da04 <UTIL_LPM_SetOffMode+0x5c>)
 800d9ce:	681a      	ldr	r2, [r3, #0]
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	4313      	orrs	r3, r2
 800d9d4:	4a0b      	ldr	r2, [pc, #44]	@ (800da04 <UTIL_LPM_SetOffMode+0x5c>)
 800d9d6:	6013      	str	r3, [r2, #0]
      break;
 800d9d8:	e008      	b.n	800d9ec <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	43da      	mvns	r2, r3
 800d9de:	4b09      	ldr	r3, [pc, #36]	@ (800da04 <UTIL_LPM_SetOffMode+0x5c>)
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	4013      	ands	r3, r2
 800d9e4:	4a07      	ldr	r2, [pc, #28]	@ (800da04 <UTIL_LPM_SetOffMode+0x5c>)
 800d9e6:	6013      	str	r3, [r2, #0]
      break;
 800d9e8:	e000      	b.n	800d9ec <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800d9ea:	bf00      	nop
 800d9ec:	697b      	ldr	r3, [r7, #20]
 800d9ee:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d9f0:	68fb      	ldr	r3, [r7, #12]
 800d9f2:	f383 8810 	msr	PRIMASK, r3
}
 800d9f6:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800d9f8:	bf00      	nop
 800d9fa:	371c      	adds	r7, #28
 800d9fc:	46bd      	mov	sp, r7
 800d9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da02:	4770      	bx	lr
 800da04:	20002238 	.word	0x20002238

0800da08 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800da08:	b580      	push	{r7, lr}
 800da0a:	b090      	sub	sp, #64	@ 0x40
 800da0c:	af00      	add	r7, sp, #0
 800da0e:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800da10:	4b73      	ldr	r3, [pc, #460]	@ (800dbe0 <UTIL_SEQ_Run+0x1d8>)
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 800da16:	4b72      	ldr	r3, [pc, #456]	@ (800dbe0 <UTIL_SEQ_Run+0x1d8>)
 800da18:	681a      	ldr	r2, [r3, #0]
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	4013      	ands	r3, r2
 800da1e:	4a70      	ldr	r2, [pc, #448]	@ (800dbe0 <UTIL_SEQ_Run+0x1d8>)
 800da20:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800da22:	4b70      	ldr	r3, [pc, #448]	@ (800dbe4 <UTIL_SEQ_Run+0x1dc>)
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 800da28:	4b6f      	ldr	r3, [pc, #444]	@ (800dbe8 <UTIL_SEQ_Run+0x1e0>)
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 800da2e:	4b6f      	ldr	r3, [pc, #444]	@ (800dbec <UTIL_SEQ_Run+0x1e4>)
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 800da34:	4b6e      	ldr	r3, [pc, #440]	@ (800dbf0 <UTIL_SEQ_Run+0x1e8>)
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800da3a:	e08d      	b.n	800db58 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 800da3c:	2300      	movs	r3, #0
 800da3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800da40:	e002      	b.n	800da48 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 800da42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800da44:	3301      	adds	r3, #1
 800da46:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800da48:	4a6a      	ldr	r2, [pc, #424]	@ (800dbf4 <UTIL_SEQ_Run+0x1ec>)
 800da4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800da4c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800da50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da52:	401a      	ands	r2, r3
 800da54:	4b62      	ldr	r3, [pc, #392]	@ (800dbe0 <UTIL_SEQ_Run+0x1d8>)
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	4013      	ands	r3, r2
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d0f1      	beq.n	800da42 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800da5e:	4a65      	ldr	r2, [pc, #404]	@ (800dbf4 <UTIL_SEQ_Run+0x1ec>)
 800da60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800da62:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800da66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da68:	401a      	ands	r2, r3
 800da6a:	4b5d      	ldr	r3, [pc, #372]	@ (800dbe0 <UTIL_SEQ_Run+0x1d8>)
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	4013      	ands	r3, r2
 800da70:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800da72:	4a60      	ldr	r2, [pc, #384]	@ (800dbf4 <UTIL_SEQ_Run+0x1ec>)
 800da74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800da76:	00db      	lsls	r3, r3, #3
 800da78:	4413      	add	r3, r2
 800da7a:	685a      	ldr	r2, [r3, #4]
 800da7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da7e:	4013      	ands	r3, r2
 800da80:	2b00      	cmp	r3, #0
 800da82:	d106      	bne.n	800da92 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800da84:	4a5b      	ldr	r2, [pc, #364]	@ (800dbf4 <UTIL_SEQ_Run+0x1ec>)
 800da86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800da88:	00db      	lsls	r3, r3, #3
 800da8a:	4413      	add	r3, r2
 800da8c:	f04f 32ff 	mov.w	r2, #4294967295
 800da90:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800da92:	4a58      	ldr	r2, [pc, #352]	@ (800dbf4 <UTIL_SEQ_Run+0x1ec>)
 800da94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800da96:	00db      	lsls	r3, r3, #3
 800da98:	4413      	add	r3, r2
 800da9a:	685a      	ldr	r2, [r3, #4]
 800da9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da9e:	4013      	ands	r3, r2
 800daa0:	4618      	mov	r0, r3
 800daa2:	f000 f9b3 	bl	800de0c <SEQ_BitPosition>
 800daa6:	4603      	mov	r3, r0
 800daa8:	461a      	mov	r2, r3
 800daaa:	4b53      	ldr	r3, [pc, #332]	@ (800dbf8 <UTIL_SEQ_Run+0x1f0>)
 800daac:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800daae:	4a51      	ldr	r2, [pc, #324]	@ (800dbf4 <UTIL_SEQ_Run+0x1ec>)
 800dab0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dab2:	00db      	lsls	r3, r3, #3
 800dab4:	4413      	add	r3, r2
 800dab6:	685a      	ldr	r2, [r3, #4]
 800dab8:	4b4f      	ldr	r3, [pc, #316]	@ (800dbf8 <UTIL_SEQ_Run+0x1f0>)
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	2101      	movs	r1, #1
 800dabe:	fa01 f303 	lsl.w	r3, r1, r3
 800dac2:	43db      	mvns	r3, r3
 800dac4:	401a      	ands	r2, r3
 800dac6:	494b      	ldr	r1, [pc, #300]	@ (800dbf4 <UTIL_SEQ_Run+0x1ec>)
 800dac8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800daca:	00db      	lsls	r3, r3, #3
 800dacc:	440b      	add	r3, r1
 800dace:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dad0:	f3ef 8310 	mrs	r3, PRIMASK
 800dad4:	61bb      	str	r3, [r7, #24]
  return(result);
 800dad6:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800dad8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800dada:	b672      	cpsid	i
}
 800dadc:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800dade:	4b46      	ldr	r3, [pc, #280]	@ (800dbf8 <UTIL_SEQ_Run+0x1f0>)
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	2201      	movs	r2, #1
 800dae4:	fa02 f303 	lsl.w	r3, r2, r3
 800dae8:	43da      	mvns	r2, r3
 800daea:	4b3e      	ldr	r3, [pc, #248]	@ (800dbe4 <UTIL_SEQ_Run+0x1dc>)
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	4013      	ands	r3, r2
 800daf0:	4a3c      	ldr	r2, [pc, #240]	@ (800dbe4 <UTIL_SEQ_Run+0x1dc>)
 800daf2:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800daf4:	2301      	movs	r3, #1
 800daf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800daf8:	e013      	b.n	800db22 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800dafa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dafc:	3b01      	subs	r3, #1
 800dafe:	4a3d      	ldr	r2, [pc, #244]	@ (800dbf4 <UTIL_SEQ_Run+0x1ec>)
 800db00:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800db04:	4b3c      	ldr	r3, [pc, #240]	@ (800dbf8 <UTIL_SEQ_Run+0x1f0>)
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	2201      	movs	r2, #1
 800db0a:	fa02 f303 	lsl.w	r3, r2, r3
 800db0e:	43da      	mvns	r2, r3
 800db10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800db12:	3b01      	subs	r3, #1
 800db14:	400a      	ands	r2, r1
 800db16:	4937      	ldr	r1, [pc, #220]	@ (800dbf4 <UTIL_SEQ_Run+0x1ec>)
 800db18:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800db1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800db1e:	3b01      	subs	r3, #1
 800db20:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800db22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800db24:	2b00      	cmp	r3, #0
 800db26:	d1e8      	bne.n	800dafa <UTIL_SEQ_Run+0xf2>
 800db28:	6a3b      	ldr	r3, [r7, #32]
 800db2a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800db2c:	697b      	ldr	r3, [r7, #20]
 800db2e:	f383 8810 	msr	PRIMASK, r3
}
 800db32:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800db34:	4b30      	ldr	r3, [pc, #192]	@ (800dbf8 <UTIL_SEQ_Run+0x1f0>)
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	4a30      	ldr	r2, [pc, #192]	@ (800dbfc <UTIL_SEQ_Run+0x1f4>)
 800db3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800db3e:	4798      	blx	r3

    local_taskset = TaskSet;
 800db40:	4b28      	ldr	r3, [pc, #160]	@ (800dbe4 <UTIL_SEQ_Run+0x1dc>)
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 800db46:	4b28      	ldr	r3, [pc, #160]	@ (800dbe8 <UTIL_SEQ_Run+0x1e0>)
 800db48:	681b      	ldr	r3, [r3, #0]
 800db4a:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 800db4c:	4b27      	ldr	r3, [pc, #156]	@ (800dbec <UTIL_SEQ_Run+0x1e4>)
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 800db52:	4b27      	ldr	r3, [pc, #156]	@ (800dbf0 <UTIL_SEQ_Run+0x1e8>)
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800db58:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800db5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db5c:	401a      	ands	r2, r3
 800db5e:	4b20      	ldr	r3, [pc, #128]	@ (800dbe0 <UTIL_SEQ_Run+0x1d8>)
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	4013      	ands	r3, r2
 800db64:	2b00      	cmp	r3, #0
 800db66:	d005      	beq.n	800db74 <UTIL_SEQ_Run+0x16c>
 800db68:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800db6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db6c:	4013      	ands	r3, r2
 800db6e:	2b00      	cmp	r3, #0
 800db70:	f43f af64 	beq.w	800da3c <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800db74:	4b20      	ldr	r3, [pc, #128]	@ (800dbf8 <UTIL_SEQ_Run+0x1f0>)
 800db76:	f04f 32ff 	mov.w	r2, #4294967295
 800db7a:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800db7c:	f000 f938 	bl	800ddf0 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800db80:	f3ef 8310 	mrs	r3, PRIMASK
 800db84:	613b      	str	r3, [r7, #16]
  return(result);
 800db86:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800db88:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800db8a:	b672      	cpsid	i
}
 800db8c:	bf00      	nop
  local_taskset = TaskSet;
 800db8e:	4b15      	ldr	r3, [pc, #84]	@ (800dbe4 <UTIL_SEQ_Run+0x1dc>)
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 800db94:	4b14      	ldr	r3, [pc, #80]	@ (800dbe8 <UTIL_SEQ_Run+0x1e0>)
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 800db9a:	4b14      	ldr	r3, [pc, #80]	@ (800dbec <UTIL_SEQ_Run+0x1e4>)
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800dba0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800dba2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dba4:	401a      	ands	r2, r3
 800dba6:	4b0e      	ldr	r3, [pc, #56]	@ (800dbe0 <UTIL_SEQ_Run+0x1d8>)
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	4013      	ands	r3, r2
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d107      	bne.n	800dbc0 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 800dbb0:	4b0f      	ldr	r3, [pc, #60]	@ (800dbf0 <UTIL_SEQ_Run+0x1e8>)
 800dbb2:	681a      	ldr	r2, [r3, #0]
 800dbb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dbb6:	4013      	ands	r3, r2
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d101      	bne.n	800dbc0 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 800dbbc:	f7f3 fc97 	bl	80014ee <UTIL_SEQ_Idle>
 800dbc0:	69fb      	ldr	r3, [r7, #28]
 800dbc2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dbc4:	68fb      	ldr	r3, [r7, #12]
 800dbc6:	f383 8810 	msr	PRIMASK, r3
}
 800dbca:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 800dbcc:	f000 f917 	bl	800ddfe <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800dbd0:	4a03      	ldr	r2, [pc, #12]	@ (800dbe0 <UTIL_SEQ_Run+0x1d8>)
 800dbd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dbd4:	6013      	str	r3, [r2, #0]

  return;
 800dbd6:	bf00      	nop
}
 800dbd8:	3740      	adds	r7, #64	@ 0x40
 800dbda:	46bd      	mov	sp, r7
 800dbdc:	bd80      	pop	{r7, pc}
 800dbde:	bf00      	nop
 800dbe0:	20000028 	.word	0x20000028
 800dbe4:	2000223c 	.word	0x2000223c
 800dbe8:	20002240 	.word	0x20002240
 800dbec:	20000024 	.word	0x20000024
 800dbf0:	20002244 	.word	0x20002244
 800dbf4:	200022cc 	.word	0x200022cc
 800dbf8:	20002248 	.word	0x20002248
 800dbfc:	2000224c 	.word	0x2000224c

0800dc00 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800dc00:	b580      	push	{r7, lr}
 800dc02:	b088      	sub	sp, #32
 800dc04:	af00      	add	r7, sp, #0
 800dc06:	60f8      	str	r0, [r7, #12]
 800dc08:	60b9      	str	r1, [r7, #8]
 800dc0a:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dc0c:	f3ef 8310 	mrs	r3, PRIMASK
 800dc10:	617b      	str	r3, [r7, #20]
  return(result);
 800dc12:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800dc14:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800dc16:	b672      	cpsid	i
}
 800dc18:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800dc1a:	68f8      	ldr	r0, [r7, #12]
 800dc1c:	f000 f8f6 	bl	800de0c <SEQ_BitPosition>
 800dc20:	4603      	mov	r3, r0
 800dc22:	4619      	mov	r1, r3
 800dc24:	4a06      	ldr	r2, [pc, #24]	@ (800dc40 <UTIL_SEQ_RegTask+0x40>)
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800dc2c:	69fb      	ldr	r3, [r7, #28]
 800dc2e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dc30:	69bb      	ldr	r3, [r7, #24]
 800dc32:	f383 8810 	msr	PRIMASK, r3
}
 800dc36:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800dc38:	bf00      	nop
}
 800dc3a:	3720      	adds	r7, #32
 800dc3c:	46bd      	mov	sp, r7
 800dc3e:	bd80      	pop	{r7, pc}
 800dc40:	2000224c 	.word	0x2000224c

0800dc44 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800dc44:	b480      	push	{r7}
 800dc46:	b087      	sub	sp, #28
 800dc48:	af00      	add	r7, sp, #0
 800dc4a:	6078      	str	r0, [r7, #4]
 800dc4c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dc4e:	f3ef 8310 	mrs	r3, PRIMASK
 800dc52:	60fb      	str	r3, [r7, #12]
  return(result);
 800dc54:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800dc56:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800dc58:	b672      	cpsid	i
}
 800dc5a:	bf00      	nop

  TaskSet |= TaskId_bm;
 800dc5c:	4b0d      	ldr	r3, [pc, #52]	@ (800dc94 <UTIL_SEQ_SetTask+0x50>)
 800dc5e:	681a      	ldr	r2, [r3, #0]
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	4313      	orrs	r3, r2
 800dc64:	4a0b      	ldr	r2, [pc, #44]	@ (800dc94 <UTIL_SEQ_SetTask+0x50>)
 800dc66:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800dc68:	4a0b      	ldr	r2, [pc, #44]	@ (800dc98 <UTIL_SEQ_SetTask+0x54>)
 800dc6a:	683b      	ldr	r3, [r7, #0]
 800dc6c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	431a      	orrs	r2, r3
 800dc74:	4908      	ldr	r1, [pc, #32]	@ (800dc98 <UTIL_SEQ_SetTask+0x54>)
 800dc76:	683b      	ldr	r3, [r7, #0]
 800dc78:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800dc7c:	697b      	ldr	r3, [r7, #20]
 800dc7e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dc80:	693b      	ldr	r3, [r7, #16]
 800dc82:	f383 8810 	msr	PRIMASK, r3
}
 800dc86:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800dc88:	bf00      	nop
}
 800dc8a:	371c      	adds	r7, #28
 800dc8c:	46bd      	mov	sp, r7
 800dc8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc92:	4770      	bx	lr
 800dc94:	2000223c 	.word	0x2000223c
 800dc98:	200022cc 	.word	0x200022cc

0800dc9c <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800dc9c:	b480      	push	{r7}
 800dc9e:	b087      	sub	sp, #28
 800dca0:	af00      	add	r7, sp, #0
 800dca2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dca4:	f3ef 8310 	mrs	r3, PRIMASK
 800dca8:	60fb      	str	r3, [r7, #12]
  return(result);
 800dcaa:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800dcac:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800dcae:	b672      	cpsid	i
}
 800dcb0:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	43da      	mvns	r2, r3
 800dcb6:	4b08      	ldr	r3, [pc, #32]	@ (800dcd8 <UTIL_SEQ_PauseTask+0x3c>)
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	4013      	ands	r3, r2
 800dcbc:	4a06      	ldr	r2, [pc, #24]	@ (800dcd8 <UTIL_SEQ_PauseTask+0x3c>)
 800dcbe:	6013      	str	r3, [r2, #0]
 800dcc0:	697b      	ldr	r3, [r7, #20]
 800dcc2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dcc4:	693b      	ldr	r3, [r7, #16]
 800dcc6:	f383 8810 	msr	PRIMASK, r3
}
 800dcca:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800dccc:	bf00      	nop
}
 800dcce:	371c      	adds	r7, #28
 800dcd0:	46bd      	mov	sp, r7
 800dcd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcd6:	4770      	bx	lr
 800dcd8:	20000024 	.word	0x20000024

0800dcdc <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800dcdc:	b480      	push	{r7}
 800dcde:	b087      	sub	sp, #28
 800dce0:	af00      	add	r7, sp, #0
 800dce2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dce4:	f3ef 8310 	mrs	r3, PRIMASK
 800dce8:	60fb      	str	r3, [r7, #12]
  return(result);
 800dcea:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800dcec:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800dcee:	b672      	cpsid	i
}
 800dcf0:	bf00      	nop

  TaskMask |= TaskId_bm;
 800dcf2:	4b09      	ldr	r3, [pc, #36]	@ (800dd18 <UTIL_SEQ_ResumeTask+0x3c>)
 800dcf4:	681a      	ldr	r2, [r3, #0]
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	4313      	orrs	r3, r2
 800dcfa:	4a07      	ldr	r2, [pc, #28]	@ (800dd18 <UTIL_SEQ_ResumeTask+0x3c>)
 800dcfc:	6013      	str	r3, [r2, #0]
 800dcfe:	697b      	ldr	r3, [r7, #20]
 800dd00:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dd02:	693b      	ldr	r3, [r7, #16]
 800dd04:	f383 8810 	msr	PRIMASK, r3
}
 800dd08:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800dd0a:	bf00      	nop
}
 800dd0c:	371c      	adds	r7, #28
 800dd0e:	46bd      	mov	sp, r7
 800dd10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd14:	4770      	bx	lr
 800dd16:	bf00      	nop
 800dd18:	20000024 	.word	0x20000024

0800dd1c <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800dd1c:	b480      	push	{r7}
 800dd1e:	b087      	sub	sp, #28
 800dd20:	af00      	add	r7, sp, #0
 800dd22:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dd24:	f3ef 8310 	mrs	r3, PRIMASK
 800dd28:	60fb      	str	r3, [r7, #12]
  return(result);
 800dd2a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800dd2c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800dd2e:	b672      	cpsid	i
}
 800dd30:	bf00      	nop

  EvtSet |= EvtId_bm;
 800dd32:	4b09      	ldr	r3, [pc, #36]	@ (800dd58 <UTIL_SEQ_SetEvt+0x3c>)
 800dd34:	681a      	ldr	r2, [r3, #0]
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	4313      	orrs	r3, r2
 800dd3a:	4a07      	ldr	r2, [pc, #28]	@ (800dd58 <UTIL_SEQ_SetEvt+0x3c>)
 800dd3c:	6013      	str	r3, [r2, #0]
 800dd3e:	697b      	ldr	r3, [r7, #20]
 800dd40:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dd42:	693b      	ldr	r3, [r7, #16]
 800dd44:	f383 8810 	msr	PRIMASK, r3
}
 800dd48:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800dd4a:	bf00      	nop
}
 800dd4c:	371c      	adds	r7, #28
 800dd4e:	46bd      	mov	sp, r7
 800dd50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd54:	4770      	bx	lr
 800dd56:	bf00      	nop
 800dd58:	20002240 	.word	0x20002240

0800dd5c <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800dd5c:	b580      	push	{r7, lr}
 800dd5e:	b088      	sub	sp, #32
 800dd60:	af00      	add	r7, sp, #0
 800dd62:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800dd64:	4b1f      	ldr	r3, [pc, #124]	@ (800dde4 <UTIL_SEQ_WaitEvt+0x88>)
 800dd66:	681b      	ldr	r3, [r3, #0]
 800dd68:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800dd6a:	4b1e      	ldr	r3, [pc, #120]	@ (800dde4 <UTIL_SEQ_WaitEvt+0x88>)
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd72:	d102      	bne.n	800dd7a <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 800dd74:	2300      	movs	r3, #0
 800dd76:	61fb      	str	r3, [r7, #28]
 800dd78:	e005      	b.n	800dd86 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 800dd7a:	4b1a      	ldr	r3, [pc, #104]	@ (800dde4 <UTIL_SEQ_WaitEvt+0x88>)
 800dd7c:	681b      	ldr	r3, [r3, #0]
 800dd7e:	2201      	movs	r2, #1
 800dd80:	fa02 f303 	lsl.w	r3, r2, r3
 800dd84:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800dd86:	4b18      	ldr	r3, [pc, #96]	@ (800dde8 <UTIL_SEQ_WaitEvt+0x8c>)
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 800dd8c:	4a16      	ldr	r2, [pc, #88]	@ (800dde8 <UTIL_SEQ_WaitEvt+0x8c>)
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 800dd92:	e003      	b.n	800dd9c <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 800dd94:	6879      	ldr	r1, [r7, #4]
 800dd96:	69f8      	ldr	r0, [r7, #28]
 800dd98:	f7f3 fbb0 	bl	80014fc <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 800dd9c:	4b13      	ldr	r3, [pc, #76]	@ (800ddec <UTIL_SEQ_WaitEvt+0x90>)
 800dd9e:	681a      	ldr	r2, [r3, #0]
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	4013      	ands	r3, r2
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d0f5      	beq.n	800dd94 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 800dda8:	4a0e      	ldr	r2, [pc, #56]	@ (800dde4 <UTIL_SEQ_WaitEvt+0x88>)
 800ddaa:	69bb      	ldr	r3, [r7, #24]
 800ddac:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ddae:	f3ef 8310 	mrs	r3, PRIMASK
 800ddb2:	60bb      	str	r3, [r7, #8]
  return(result);
 800ddb4:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800ddb6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800ddb8:	b672      	cpsid	i
}
 800ddba:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	43da      	mvns	r2, r3
 800ddc0:	4b0a      	ldr	r3, [pc, #40]	@ (800ddec <UTIL_SEQ_WaitEvt+0x90>)
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	4013      	ands	r3, r2
 800ddc6:	4a09      	ldr	r2, [pc, #36]	@ (800ddec <UTIL_SEQ_WaitEvt+0x90>)
 800ddc8:	6013      	str	r3, [r2, #0]
 800ddca:	693b      	ldr	r3, [r7, #16]
 800ddcc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ddce:	68fb      	ldr	r3, [r7, #12]
 800ddd0:	f383 8810 	msr	PRIMASK, r3
}
 800ddd4:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 800ddd6:	4a04      	ldr	r2, [pc, #16]	@ (800dde8 <UTIL_SEQ_WaitEvt+0x8c>)
 800ddd8:	697b      	ldr	r3, [r7, #20]
 800ddda:	6013      	str	r3, [r2, #0]
  return;
 800dddc:	bf00      	nop
}
 800ddde:	3720      	adds	r7, #32
 800dde0:	46bd      	mov	sp, r7
 800dde2:	bd80      	pop	{r7, pc}
 800dde4:	20002248 	.word	0x20002248
 800dde8:	20002244 	.word	0x20002244
 800ddec:	20002240 	.word	0x20002240

0800ddf0 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800ddf0:	b480      	push	{r7}
 800ddf2:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800ddf4:	bf00      	nop
}
 800ddf6:	46bd      	mov	sp, r7
 800ddf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddfc:	4770      	bx	lr

0800ddfe <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800ddfe:	b480      	push	{r7}
 800de00:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800de02:	bf00      	nop
}
 800de04:	46bd      	mov	sp, r7
 800de06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de0a:	4770      	bx	lr

0800de0c <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800de0c:	b480      	push	{r7}
 800de0e:	b085      	sub	sp, #20
 800de10:	af00      	add	r7, sp, #0
 800de12:	6078      	str	r0, [r7, #4]
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	60fb      	str	r3, [r7, #12]
  if (value == 0U)
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d101      	bne.n	800de22 <SEQ_BitPosition+0x16>
    return 32U;
 800de1e:	2320      	movs	r3, #32
 800de20:	e003      	b.n	800de2a <SEQ_BitPosition+0x1e>
  return __builtin_clz(value);
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	fab3 f383 	clz	r3, r3
 800de28:	b2db      	uxtb	r3, r3
  return (uint8_t)(31 -__CLZ( Value ));
 800de2a:	f1c3 031f 	rsb	r3, r3, #31
 800de2e:	b2db      	uxtb	r3, r3
}
 800de30:	4618      	mov	r0, r3
 800de32:	3714      	adds	r7, #20
 800de34:	46bd      	mov	sp, r7
 800de36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de3a:	4770      	bx	lr

0800de3c <std>:
 800de3c:	2300      	movs	r3, #0
 800de3e:	b510      	push	{r4, lr}
 800de40:	4604      	mov	r4, r0
 800de42:	e9c0 3300 	strd	r3, r3, [r0]
 800de46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800de4a:	6083      	str	r3, [r0, #8]
 800de4c:	8181      	strh	r1, [r0, #12]
 800de4e:	6643      	str	r3, [r0, #100]	@ 0x64
 800de50:	81c2      	strh	r2, [r0, #14]
 800de52:	6183      	str	r3, [r0, #24]
 800de54:	4619      	mov	r1, r3
 800de56:	2208      	movs	r2, #8
 800de58:	305c      	adds	r0, #92	@ 0x5c
 800de5a:	f000 fa21 	bl	800e2a0 <memset>
 800de5e:	4b0d      	ldr	r3, [pc, #52]	@ (800de94 <std+0x58>)
 800de60:	6263      	str	r3, [r4, #36]	@ 0x24
 800de62:	4b0d      	ldr	r3, [pc, #52]	@ (800de98 <std+0x5c>)
 800de64:	62a3      	str	r3, [r4, #40]	@ 0x28
 800de66:	4b0d      	ldr	r3, [pc, #52]	@ (800de9c <std+0x60>)
 800de68:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800de6a:	4b0d      	ldr	r3, [pc, #52]	@ (800dea0 <std+0x64>)
 800de6c:	6323      	str	r3, [r4, #48]	@ 0x30
 800de6e:	4b0d      	ldr	r3, [pc, #52]	@ (800dea4 <std+0x68>)
 800de70:	6224      	str	r4, [r4, #32]
 800de72:	429c      	cmp	r4, r3
 800de74:	d006      	beq.n	800de84 <std+0x48>
 800de76:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800de7a:	4294      	cmp	r4, r2
 800de7c:	d002      	beq.n	800de84 <std+0x48>
 800de7e:	33d0      	adds	r3, #208	@ 0xd0
 800de80:	429c      	cmp	r4, r3
 800de82:	d105      	bne.n	800de90 <std+0x54>
 800de84:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800de88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800de8c:	f000 ba7a 	b.w	800e384 <__retarget_lock_init_recursive>
 800de90:	bd10      	pop	{r4, pc}
 800de92:	bf00      	nop
 800de94:	0800e0f1 	.word	0x0800e0f1
 800de98:	0800e113 	.word	0x0800e113
 800de9c:	0800e14b 	.word	0x0800e14b
 800dea0:	0800e16f 	.word	0x0800e16f
 800dea4:	200022d4 	.word	0x200022d4

0800dea8 <stdio_exit_handler>:
 800dea8:	4a02      	ldr	r2, [pc, #8]	@ (800deb4 <stdio_exit_handler+0xc>)
 800deaa:	4903      	ldr	r1, [pc, #12]	@ (800deb8 <stdio_exit_handler+0x10>)
 800deac:	4803      	ldr	r0, [pc, #12]	@ (800debc <stdio_exit_handler+0x14>)
 800deae:	f000 b869 	b.w	800df84 <_fwalk_sglue>
 800deb2:	bf00      	nop
 800deb4:	2000002c 	.word	0x2000002c
 800deb8:	0800eef1 	.word	0x0800eef1
 800debc:	2000003c 	.word	0x2000003c

0800dec0 <cleanup_stdio>:
 800dec0:	6841      	ldr	r1, [r0, #4]
 800dec2:	4b0c      	ldr	r3, [pc, #48]	@ (800def4 <cleanup_stdio+0x34>)
 800dec4:	4299      	cmp	r1, r3
 800dec6:	b510      	push	{r4, lr}
 800dec8:	4604      	mov	r4, r0
 800deca:	d001      	beq.n	800ded0 <cleanup_stdio+0x10>
 800decc:	f001 f810 	bl	800eef0 <_fflush_r>
 800ded0:	68a1      	ldr	r1, [r4, #8]
 800ded2:	4b09      	ldr	r3, [pc, #36]	@ (800def8 <cleanup_stdio+0x38>)
 800ded4:	4299      	cmp	r1, r3
 800ded6:	d002      	beq.n	800dede <cleanup_stdio+0x1e>
 800ded8:	4620      	mov	r0, r4
 800deda:	f001 f809 	bl	800eef0 <_fflush_r>
 800dede:	68e1      	ldr	r1, [r4, #12]
 800dee0:	4b06      	ldr	r3, [pc, #24]	@ (800defc <cleanup_stdio+0x3c>)
 800dee2:	4299      	cmp	r1, r3
 800dee4:	d004      	beq.n	800def0 <cleanup_stdio+0x30>
 800dee6:	4620      	mov	r0, r4
 800dee8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800deec:	f001 b800 	b.w	800eef0 <_fflush_r>
 800def0:	bd10      	pop	{r4, pc}
 800def2:	bf00      	nop
 800def4:	200022d4 	.word	0x200022d4
 800def8:	2000233c 	.word	0x2000233c
 800defc:	200023a4 	.word	0x200023a4

0800df00 <global_stdio_init.part.0>:
 800df00:	b510      	push	{r4, lr}
 800df02:	4b0b      	ldr	r3, [pc, #44]	@ (800df30 <global_stdio_init.part.0+0x30>)
 800df04:	4c0b      	ldr	r4, [pc, #44]	@ (800df34 <global_stdio_init.part.0+0x34>)
 800df06:	4a0c      	ldr	r2, [pc, #48]	@ (800df38 <global_stdio_init.part.0+0x38>)
 800df08:	601a      	str	r2, [r3, #0]
 800df0a:	4620      	mov	r0, r4
 800df0c:	2200      	movs	r2, #0
 800df0e:	2104      	movs	r1, #4
 800df10:	f7ff ff94 	bl	800de3c <std>
 800df14:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800df18:	2201      	movs	r2, #1
 800df1a:	2109      	movs	r1, #9
 800df1c:	f7ff ff8e 	bl	800de3c <std>
 800df20:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800df24:	2202      	movs	r2, #2
 800df26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800df2a:	2112      	movs	r1, #18
 800df2c:	f7ff bf86 	b.w	800de3c <std>
 800df30:	2000240c 	.word	0x2000240c
 800df34:	200022d4 	.word	0x200022d4
 800df38:	0800dea9 	.word	0x0800dea9

0800df3c <__sfp_lock_acquire>:
 800df3c:	4801      	ldr	r0, [pc, #4]	@ (800df44 <__sfp_lock_acquire+0x8>)
 800df3e:	f000 ba22 	b.w	800e386 <__retarget_lock_acquire_recursive>
 800df42:	bf00      	nop
 800df44:	20002415 	.word	0x20002415

0800df48 <__sfp_lock_release>:
 800df48:	4801      	ldr	r0, [pc, #4]	@ (800df50 <__sfp_lock_release+0x8>)
 800df4a:	f000 ba1d 	b.w	800e388 <__retarget_lock_release_recursive>
 800df4e:	bf00      	nop
 800df50:	20002415 	.word	0x20002415

0800df54 <__sinit>:
 800df54:	b510      	push	{r4, lr}
 800df56:	4604      	mov	r4, r0
 800df58:	f7ff fff0 	bl	800df3c <__sfp_lock_acquire>
 800df5c:	6a23      	ldr	r3, [r4, #32]
 800df5e:	b11b      	cbz	r3, 800df68 <__sinit+0x14>
 800df60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800df64:	f7ff bff0 	b.w	800df48 <__sfp_lock_release>
 800df68:	4b04      	ldr	r3, [pc, #16]	@ (800df7c <__sinit+0x28>)
 800df6a:	6223      	str	r3, [r4, #32]
 800df6c:	4b04      	ldr	r3, [pc, #16]	@ (800df80 <__sinit+0x2c>)
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	2b00      	cmp	r3, #0
 800df72:	d1f5      	bne.n	800df60 <__sinit+0xc>
 800df74:	f7ff ffc4 	bl	800df00 <global_stdio_init.part.0>
 800df78:	e7f2      	b.n	800df60 <__sinit+0xc>
 800df7a:	bf00      	nop
 800df7c:	0800dec1 	.word	0x0800dec1
 800df80:	2000240c 	.word	0x2000240c

0800df84 <_fwalk_sglue>:
 800df84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800df88:	4607      	mov	r7, r0
 800df8a:	4688      	mov	r8, r1
 800df8c:	4614      	mov	r4, r2
 800df8e:	2600      	movs	r6, #0
 800df90:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800df94:	f1b9 0901 	subs.w	r9, r9, #1
 800df98:	d505      	bpl.n	800dfa6 <_fwalk_sglue+0x22>
 800df9a:	6824      	ldr	r4, [r4, #0]
 800df9c:	2c00      	cmp	r4, #0
 800df9e:	d1f7      	bne.n	800df90 <_fwalk_sglue+0xc>
 800dfa0:	4630      	mov	r0, r6
 800dfa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dfa6:	89ab      	ldrh	r3, [r5, #12]
 800dfa8:	2b01      	cmp	r3, #1
 800dfaa:	d907      	bls.n	800dfbc <_fwalk_sglue+0x38>
 800dfac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800dfb0:	3301      	adds	r3, #1
 800dfb2:	d003      	beq.n	800dfbc <_fwalk_sglue+0x38>
 800dfb4:	4629      	mov	r1, r5
 800dfb6:	4638      	mov	r0, r7
 800dfb8:	47c0      	blx	r8
 800dfba:	4306      	orrs	r6, r0
 800dfbc:	3568      	adds	r5, #104	@ 0x68
 800dfbe:	e7e9      	b.n	800df94 <_fwalk_sglue+0x10>

0800dfc0 <iprintf>:
 800dfc0:	b40f      	push	{r0, r1, r2, r3}
 800dfc2:	b507      	push	{r0, r1, r2, lr}
 800dfc4:	4906      	ldr	r1, [pc, #24]	@ (800dfe0 <iprintf+0x20>)
 800dfc6:	ab04      	add	r3, sp, #16
 800dfc8:	6808      	ldr	r0, [r1, #0]
 800dfca:	f853 2b04 	ldr.w	r2, [r3], #4
 800dfce:	6881      	ldr	r1, [r0, #8]
 800dfd0:	9301      	str	r3, [sp, #4]
 800dfd2:	f000 fc63 	bl	800e89c <_vfiprintf_r>
 800dfd6:	b003      	add	sp, #12
 800dfd8:	f85d eb04 	ldr.w	lr, [sp], #4
 800dfdc:	b004      	add	sp, #16
 800dfde:	4770      	bx	lr
 800dfe0:	20000038 	.word	0x20000038

0800dfe4 <putchar>:
 800dfe4:	4b02      	ldr	r3, [pc, #8]	@ (800dff0 <putchar+0xc>)
 800dfe6:	4601      	mov	r1, r0
 800dfe8:	6818      	ldr	r0, [r3, #0]
 800dfea:	6882      	ldr	r2, [r0, #8]
 800dfec:	f001 b80a 	b.w	800f004 <_putc_r>
 800dff0:	20000038 	.word	0x20000038

0800dff4 <_puts_r>:
 800dff4:	6a03      	ldr	r3, [r0, #32]
 800dff6:	b570      	push	{r4, r5, r6, lr}
 800dff8:	6884      	ldr	r4, [r0, #8]
 800dffa:	4605      	mov	r5, r0
 800dffc:	460e      	mov	r6, r1
 800dffe:	b90b      	cbnz	r3, 800e004 <_puts_r+0x10>
 800e000:	f7ff ffa8 	bl	800df54 <__sinit>
 800e004:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e006:	07db      	lsls	r3, r3, #31
 800e008:	d405      	bmi.n	800e016 <_puts_r+0x22>
 800e00a:	89a3      	ldrh	r3, [r4, #12]
 800e00c:	0598      	lsls	r0, r3, #22
 800e00e:	d402      	bmi.n	800e016 <_puts_r+0x22>
 800e010:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e012:	f000 f9b8 	bl	800e386 <__retarget_lock_acquire_recursive>
 800e016:	89a3      	ldrh	r3, [r4, #12]
 800e018:	0719      	lsls	r1, r3, #28
 800e01a:	d502      	bpl.n	800e022 <_puts_r+0x2e>
 800e01c:	6923      	ldr	r3, [r4, #16]
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d135      	bne.n	800e08e <_puts_r+0x9a>
 800e022:	4621      	mov	r1, r4
 800e024:	4628      	mov	r0, r5
 800e026:	f000 f8e5 	bl	800e1f4 <__swsetup_r>
 800e02a:	b380      	cbz	r0, 800e08e <_puts_r+0x9a>
 800e02c:	f04f 35ff 	mov.w	r5, #4294967295
 800e030:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e032:	07da      	lsls	r2, r3, #31
 800e034:	d405      	bmi.n	800e042 <_puts_r+0x4e>
 800e036:	89a3      	ldrh	r3, [r4, #12]
 800e038:	059b      	lsls	r3, r3, #22
 800e03a:	d402      	bmi.n	800e042 <_puts_r+0x4e>
 800e03c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e03e:	f000 f9a3 	bl	800e388 <__retarget_lock_release_recursive>
 800e042:	4628      	mov	r0, r5
 800e044:	bd70      	pop	{r4, r5, r6, pc}
 800e046:	2b00      	cmp	r3, #0
 800e048:	da04      	bge.n	800e054 <_puts_r+0x60>
 800e04a:	69a2      	ldr	r2, [r4, #24]
 800e04c:	429a      	cmp	r2, r3
 800e04e:	dc17      	bgt.n	800e080 <_puts_r+0x8c>
 800e050:	290a      	cmp	r1, #10
 800e052:	d015      	beq.n	800e080 <_puts_r+0x8c>
 800e054:	6823      	ldr	r3, [r4, #0]
 800e056:	1c5a      	adds	r2, r3, #1
 800e058:	6022      	str	r2, [r4, #0]
 800e05a:	7019      	strb	r1, [r3, #0]
 800e05c:	68a3      	ldr	r3, [r4, #8]
 800e05e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800e062:	3b01      	subs	r3, #1
 800e064:	60a3      	str	r3, [r4, #8]
 800e066:	2900      	cmp	r1, #0
 800e068:	d1ed      	bne.n	800e046 <_puts_r+0x52>
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	da11      	bge.n	800e092 <_puts_r+0x9e>
 800e06e:	4622      	mov	r2, r4
 800e070:	210a      	movs	r1, #10
 800e072:	4628      	mov	r0, r5
 800e074:	f000 f87f 	bl	800e176 <__swbuf_r>
 800e078:	3001      	adds	r0, #1
 800e07a:	d0d7      	beq.n	800e02c <_puts_r+0x38>
 800e07c:	250a      	movs	r5, #10
 800e07e:	e7d7      	b.n	800e030 <_puts_r+0x3c>
 800e080:	4622      	mov	r2, r4
 800e082:	4628      	mov	r0, r5
 800e084:	f000 f877 	bl	800e176 <__swbuf_r>
 800e088:	3001      	adds	r0, #1
 800e08a:	d1e7      	bne.n	800e05c <_puts_r+0x68>
 800e08c:	e7ce      	b.n	800e02c <_puts_r+0x38>
 800e08e:	3e01      	subs	r6, #1
 800e090:	e7e4      	b.n	800e05c <_puts_r+0x68>
 800e092:	6823      	ldr	r3, [r4, #0]
 800e094:	1c5a      	adds	r2, r3, #1
 800e096:	6022      	str	r2, [r4, #0]
 800e098:	220a      	movs	r2, #10
 800e09a:	701a      	strb	r2, [r3, #0]
 800e09c:	e7ee      	b.n	800e07c <_puts_r+0x88>
	...

0800e0a0 <puts>:
 800e0a0:	4b02      	ldr	r3, [pc, #8]	@ (800e0ac <puts+0xc>)
 800e0a2:	4601      	mov	r1, r0
 800e0a4:	6818      	ldr	r0, [r3, #0]
 800e0a6:	f7ff bfa5 	b.w	800dff4 <_puts_r>
 800e0aa:	bf00      	nop
 800e0ac:	20000038 	.word	0x20000038

0800e0b0 <siprintf>:
 800e0b0:	b40e      	push	{r1, r2, r3}
 800e0b2:	b500      	push	{lr}
 800e0b4:	b09c      	sub	sp, #112	@ 0x70
 800e0b6:	ab1d      	add	r3, sp, #116	@ 0x74
 800e0b8:	9002      	str	r0, [sp, #8]
 800e0ba:	9006      	str	r0, [sp, #24]
 800e0bc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800e0c0:	4809      	ldr	r0, [pc, #36]	@ (800e0e8 <siprintf+0x38>)
 800e0c2:	9107      	str	r1, [sp, #28]
 800e0c4:	9104      	str	r1, [sp, #16]
 800e0c6:	4909      	ldr	r1, [pc, #36]	@ (800e0ec <siprintf+0x3c>)
 800e0c8:	f853 2b04 	ldr.w	r2, [r3], #4
 800e0cc:	9105      	str	r1, [sp, #20]
 800e0ce:	6800      	ldr	r0, [r0, #0]
 800e0d0:	9301      	str	r3, [sp, #4]
 800e0d2:	a902      	add	r1, sp, #8
 800e0d4:	f000 fabc 	bl	800e650 <_svfiprintf_r>
 800e0d8:	9b02      	ldr	r3, [sp, #8]
 800e0da:	2200      	movs	r2, #0
 800e0dc:	701a      	strb	r2, [r3, #0]
 800e0de:	b01c      	add	sp, #112	@ 0x70
 800e0e0:	f85d eb04 	ldr.w	lr, [sp], #4
 800e0e4:	b003      	add	sp, #12
 800e0e6:	4770      	bx	lr
 800e0e8:	20000038 	.word	0x20000038
 800e0ec:	ffff0208 	.word	0xffff0208

0800e0f0 <__sread>:
 800e0f0:	b510      	push	{r4, lr}
 800e0f2:	460c      	mov	r4, r1
 800e0f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e0f8:	f000 f8fc 	bl	800e2f4 <_read_r>
 800e0fc:	2800      	cmp	r0, #0
 800e0fe:	bfab      	itete	ge
 800e100:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800e102:	89a3      	ldrhlt	r3, [r4, #12]
 800e104:	181b      	addge	r3, r3, r0
 800e106:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800e10a:	bfac      	ite	ge
 800e10c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800e10e:	81a3      	strhlt	r3, [r4, #12]
 800e110:	bd10      	pop	{r4, pc}

0800e112 <__swrite>:
 800e112:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e116:	461f      	mov	r7, r3
 800e118:	898b      	ldrh	r3, [r1, #12]
 800e11a:	05db      	lsls	r3, r3, #23
 800e11c:	4605      	mov	r5, r0
 800e11e:	460c      	mov	r4, r1
 800e120:	4616      	mov	r6, r2
 800e122:	d505      	bpl.n	800e130 <__swrite+0x1e>
 800e124:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e128:	2302      	movs	r3, #2
 800e12a:	2200      	movs	r2, #0
 800e12c:	f000 f8d0 	bl	800e2d0 <_lseek_r>
 800e130:	89a3      	ldrh	r3, [r4, #12]
 800e132:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e136:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e13a:	81a3      	strh	r3, [r4, #12]
 800e13c:	4632      	mov	r2, r6
 800e13e:	463b      	mov	r3, r7
 800e140:	4628      	mov	r0, r5
 800e142:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e146:	f000 b8e7 	b.w	800e318 <_write_r>

0800e14a <__sseek>:
 800e14a:	b510      	push	{r4, lr}
 800e14c:	460c      	mov	r4, r1
 800e14e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e152:	f000 f8bd 	bl	800e2d0 <_lseek_r>
 800e156:	1c43      	adds	r3, r0, #1
 800e158:	89a3      	ldrh	r3, [r4, #12]
 800e15a:	bf15      	itete	ne
 800e15c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800e15e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800e162:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800e166:	81a3      	strheq	r3, [r4, #12]
 800e168:	bf18      	it	ne
 800e16a:	81a3      	strhne	r3, [r4, #12]
 800e16c:	bd10      	pop	{r4, pc}

0800e16e <__sclose>:
 800e16e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e172:	f000 b89d 	b.w	800e2b0 <_close_r>

0800e176 <__swbuf_r>:
 800e176:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e178:	460e      	mov	r6, r1
 800e17a:	4614      	mov	r4, r2
 800e17c:	4605      	mov	r5, r0
 800e17e:	b118      	cbz	r0, 800e188 <__swbuf_r+0x12>
 800e180:	6a03      	ldr	r3, [r0, #32]
 800e182:	b90b      	cbnz	r3, 800e188 <__swbuf_r+0x12>
 800e184:	f7ff fee6 	bl	800df54 <__sinit>
 800e188:	69a3      	ldr	r3, [r4, #24]
 800e18a:	60a3      	str	r3, [r4, #8]
 800e18c:	89a3      	ldrh	r3, [r4, #12]
 800e18e:	071a      	lsls	r2, r3, #28
 800e190:	d501      	bpl.n	800e196 <__swbuf_r+0x20>
 800e192:	6923      	ldr	r3, [r4, #16]
 800e194:	b943      	cbnz	r3, 800e1a8 <__swbuf_r+0x32>
 800e196:	4621      	mov	r1, r4
 800e198:	4628      	mov	r0, r5
 800e19a:	f000 f82b 	bl	800e1f4 <__swsetup_r>
 800e19e:	b118      	cbz	r0, 800e1a8 <__swbuf_r+0x32>
 800e1a0:	f04f 37ff 	mov.w	r7, #4294967295
 800e1a4:	4638      	mov	r0, r7
 800e1a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e1a8:	6823      	ldr	r3, [r4, #0]
 800e1aa:	6922      	ldr	r2, [r4, #16]
 800e1ac:	1a98      	subs	r0, r3, r2
 800e1ae:	6963      	ldr	r3, [r4, #20]
 800e1b0:	b2f6      	uxtb	r6, r6
 800e1b2:	4283      	cmp	r3, r0
 800e1b4:	4637      	mov	r7, r6
 800e1b6:	dc05      	bgt.n	800e1c4 <__swbuf_r+0x4e>
 800e1b8:	4621      	mov	r1, r4
 800e1ba:	4628      	mov	r0, r5
 800e1bc:	f000 fe98 	bl	800eef0 <_fflush_r>
 800e1c0:	2800      	cmp	r0, #0
 800e1c2:	d1ed      	bne.n	800e1a0 <__swbuf_r+0x2a>
 800e1c4:	68a3      	ldr	r3, [r4, #8]
 800e1c6:	3b01      	subs	r3, #1
 800e1c8:	60a3      	str	r3, [r4, #8]
 800e1ca:	6823      	ldr	r3, [r4, #0]
 800e1cc:	1c5a      	adds	r2, r3, #1
 800e1ce:	6022      	str	r2, [r4, #0]
 800e1d0:	701e      	strb	r6, [r3, #0]
 800e1d2:	6962      	ldr	r2, [r4, #20]
 800e1d4:	1c43      	adds	r3, r0, #1
 800e1d6:	429a      	cmp	r2, r3
 800e1d8:	d004      	beq.n	800e1e4 <__swbuf_r+0x6e>
 800e1da:	89a3      	ldrh	r3, [r4, #12]
 800e1dc:	07db      	lsls	r3, r3, #31
 800e1de:	d5e1      	bpl.n	800e1a4 <__swbuf_r+0x2e>
 800e1e0:	2e0a      	cmp	r6, #10
 800e1e2:	d1df      	bne.n	800e1a4 <__swbuf_r+0x2e>
 800e1e4:	4621      	mov	r1, r4
 800e1e6:	4628      	mov	r0, r5
 800e1e8:	f000 fe82 	bl	800eef0 <_fflush_r>
 800e1ec:	2800      	cmp	r0, #0
 800e1ee:	d0d9      	beq.n	800e1a4 <__swbuf_r+0x2e>
 800e1f0:	e7d6      	b.n	800e1a0 <__swbuf_r+0x2a>
	...

0800e1f4 <__swsetup_r>:
 800e1f4:	b538      	push	{r3, r4, r5, lr}
 800e1f6:	4b29      	ldr	r3, [pc, #164]	@ (800e29c <__swsetup_r+0xa8>)
 800e1f8:	4605      	mov	r5, r0
 800e1fa:	6818      	ldr	r0, [r3, #0]
 800e1fc:	460c      	mov	r4, r1
 800e1fe:	b118      	cbz	r0, 800e208 <__swsetup_r+0x14>
 800e200:	6a03      	ldr	r3, [r0, #32]
 800e202:	b90b      	cbnz	r3, 800e208 <__swsetup_r+0x14>
 800e204:	f7ff fea6 	bl	800df54 <__sinit>
 800e208:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e20c:	0719      	lsls	r1, r3, #28
 800e20e:	d422      	bmi.n	800e256 <__swsetup_r+0x62>
 800e210:	06da      	lsls	r2, r3, #27
 800e212:	d407      	bmi.n	800e224 <__swsetup_r+0x30>
 800e214:	2209      	movs	r2, #9
 800e216:	602a      	str	r2, [r5, #0]
 800e218:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e21c:	81a3      	strh	r3, [r4, #12]
 800e21e:	f04f 30ff 	mov.w	r0, #4294967295
 800e222:	e033      	b.n	800e28c <__swsetup_r+0x98>
 800e224:	0758      	lsls	r0, r3, #29
 800e226:	d512      	bpl.n	800e24e <__swsetup_r+0x5a>
 800e228:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e22a:	b141      	cbz	r1, 800e23e <__swsetup_r+0x4a>
 800e22c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e230:	4299      	cmp	r1, r3
 800e232:	d002      	beq.n	800e23a <__swsetup_r+0x46>
 800e234:	4628      	mov	r0, r5
 800e236:	f000 f8b7 	bl	800e3a8 <_free_r>
 800e23a:	2300      	movs	r3, #0
 800e23c:	6363      	str	r3, [r4, #52]	@ 0x34
 800e23e:	89a3      	ldrh	r3, [r4, #12]
 800e240:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e244:	81a3      	strh	r3, [r4, #12]
 800e246:	2300      	movs	r3, #0
 800e248:	6063      	str	r3, [r4, #4]
 800e24a:	6923      	ldr	r3, [r4, #16]
 800e24c:	6023      	str	r3, [r4, #0]
 800e24e:	89a3      	ldrh	r3, [r4, #12]
 800e250:	f043 0308 	orr.w	r3, r3, #8
 800e254:	81a3      	strh	r3, [r4, #12]
 800e256:	6923      	ldr	r3, [r4, #16]
 800e258:	b94b      	cbnz	r3, 800e26e <__swsetup_r+0x7a>
 800e25a:	89a3      	ldrh	r3, [r4, #12]
 800e25c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e260:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e264:	d003      	beq.n	800e26e <__swsetup_r+0x7a>
 800e266:	4621      	mov	r1, r4
 800e268:	4628      	mov	r0, r5
 800e26a:	f000 fe8f 	bl	800ef8c <__smakebuf_r>
 800e26e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e272:	f013 0201 	ands.w	r2, r3, #1
 800e276:	d00a      	beq.n	800e28e <__swsetup_r+0x9a>
 800e278:	2200      	movs	r2, #0
 800e27a:	60a2      	str	r2, [r4, #8]
 800e27c:	6962      	ldr	r2, [r4, #20]
 800e27e:	4252      	negs	r2, r2
 800e280:	61a2      	str	r2, [r4, #24]
 800e282:	6922      	ldr	r2, [r4, #16]
 800e284:	b942      	cbnz	r2, 800e298 <__swsetup_r+0xa4>
 800e286:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e28a:	d1c5      	bne.n	800e218 <__swsetup_r+0x24>
 800e28c:	bd38      	pop	{r3, r4, r5, pc}
 800e28e:	0799      	lsls	r1, r3, #30
 800e290:	bf58      	it	pl
 800e292:	6962      	ldrpl	r2, [r4, #20]
 800e294:	60a2      	str	r2, [r4, #8]
 800e296:	e7f4      	b.n	800e282 <__swsetup_r+0x8e>
 800e298:	2000      	movs	r0, #0
 800e29a:	e7f7      	b.n	800e28c <__swsetup_r+0x98>
 800e29c:	20000038 	.word	0x20000038

0800e2a0 <memset>:
 800e2a0:	4402      	add	r2, r0
 800e2a2:	4603      	mov	r3, r0
 800e2a4:	4293      	cmp	r3, r2
 800e2a6:	d100      	bne.n	800e2aa <memset+0xa>
 800e2a8:	4770      	bx	lr
 800e2aa:	f803 1b01 	strb.w	r1, [r3], #1
 800e2ae:	e7f9      	b.n	800e2a4 <memset+0x4>

0800e2b0 <_close_r>:
 800e2b0:	b538      	push	{r3, r4, r5, lr}
 800e2b2:	4d06      	ldr	r5, [pc, #24]	@ (800e2cc <_close_r+0x1c>)
 800e2b4:	2300      	movs	r3, #0
 800e2b6:	4604      	mov	r4, r0
 800e2b8:	4608      	mov	r0, r1
 800e2ba:	602b      	str	r3, [r5, #0]
 800e2bc:	f000 ff58 	bl	800f170 <_close>
 800e2c0:	1c43      	adds	r3, r0, #1
 800e2c2:	d102      	bne.n	800e2ca <_close_r+0x1a>
 800e2c4:	682b      	ldr	r3, [r5, #0]
 800e2c6:	b103      	cbz	r3, 800e2ca <_close_r+0x1a>
 800e2c8:	6023      	str	r3, [r4, #0]
 800e2ca:	bd38      	pop	{r3, r4, r5, pc}
 800e2cc:	20002410 	.word	0x20002410

0800e2d0 <_lseek_r>:
 800e2d0:	b538      	push	{r3, r4, r5, lr}
 800e2d2:	4d07      	ldr	r5, [pc, #28]	@ (800e2f0 <_lseek_r+0x20>)
 800e2d4:	4604      	mov	r4, r0
 800e2d6:	4608      	mov	r0, r1
 800e2d8:	4611      	mov	r1, r2
 800e2da:	2200      	movs	r2, #0
 800e2dc:	602a      	str	r2, [r5, #0]
 800e2de:	461a      	mov	r2, r3
 800e2e0:	f000 ff5e 	bl	800f1a0 <_lseek>
 800e2e4:	1c43      	adds	r3, r0, #1
 800e2e6:	d102      	bne.n	800e2ee <_lseek_r+0x1e>
 800e2e8:	682b      	ldr	r3, [r5, #0]
 800e2ea:	b103      	cbz	r3, 800e2ee <_lseek_r+0x1e>
 800e2ec:	6023      	str	r3, [r4, #0]
 800e2ee:	bd38      	pop	{r3, r4, r5, pc}
 800e2f0:	20002410 	.word	0x20002410

0800e2f4 <_read_r>:
 800e2f4:	b538      	push	{r3, r4, r5, lr}
 800e2f6:	4d07      	ldr	r5, [pc, #28]	@ (800e314 <_read_r+0x20>)
 800e2f8:	4604      	mov	r4, r0
 800e2fa:	4608      	mov	r0, r1
 800e2fc:	4611      	mov	r1, r2
 800e2fe:	2200      	movs	r2, #0
 800e300:	602a      	str	r2, [r5, #0]
 800e302:	461a      	mov	r2, r3
 800e304:	f000 ff54 	bl	800f1b0 <_read>
 800e308:	1c43      	adds	r3, r0, #1
 800e30a:	d102      	bne.n	800e312 <_read_r+0x1e>
 800e30c:	682b      	ldr	r3, [r5, #0]
 800e30e:	b103      	cbz	r3, 800e312 <_read_r+0x1e>
 800e310:	6023      	str	r3, [r4, #0]
 800e312:	bd38      	pop	{r3, r4, r5, pc}
 800e314:	20002410 	.word	0x20002410

0800e318 <_write_r>:
 800e318:	b538      	push	{r3, r4, r5, lr}
 800e31a:	4d07      	ldr	r5, [pc, #28]	@ (800e338 <_write_r+0x20>)
 800e31c:	4604      	mov	r4, r0
 800e31e:	4608      	mov	r0, r1
 800e320:	4611      	mov	r1, r2
 800e322:	2200      	movs	r2, #0
 800e324:	602a      	str	r2, [r5, #0]
 800e326:	461a      	mov	r2, r3
 800e328:	f7fc fff8 	bl	800b31c <_write>
 800e32c:	1c43      	adds	r3, r0, #1
 800e32e:	d102      	bne.n	800e336 <_write_r+0x1e>
 800e330:	682b      	ldr	r3, [r5, #0]
 800e332:	b103      	cbz	r3, 800e336 <_write_r+0x1e>
 800e334:	6023      	str	r3, [r4, #0]
 800e336:	bd38      	pop	{r3, r4, r5, pc}
 800e338:	20002410 	.word	0x20002410

0800e33c <__libc_init_array>:
 800e33c:	b570      	push	{r4, r5, r6, lr}
 800e33e:	4d0d      	ldr	r5, [pc, #52]	@ (800e374 <__libc_init_array+0x38>)
 800e340:	4c0d      	ldr	r4, [pc, #52]	@ (800e378 <__libc_init_array+0x3c>)
 800e342:	1b64      	subs	r4, r4, r5
 800e344:	10a4      	asrs	r4, r4, #2
 800e346:	2600      	movs	r6, #0
 800e348:	42a6      	cmp	r6, r4
 800e34a:	d109      	bne.n	800e360 <__libc_init_array+0x24>
 800e34c:	4d0b      	ldr	r5, [pc, #44]	@ (800e37c <__libc_init_array+0x40>)
 800e34e:	4c0c      	ldr	r4, [pc, #48]	@ (800e380 <__libc_init_array+0x44>)
 800e350:	f000 ff44 	bl	800f1dc <_init>
 800e354:	1b64      	subs	r4, r4, r5
 800e356:	10a4      	asrs	r4, r4, #2
 800e358:	2600      	movs	r6, #0
 800e35a:	42a6      	cmp	r6, r4
 800e35c:	d105      	bne.n	800e36a <__libc_init_array+0x2e>
 800e35e:	bd70      	pop	{r4, r5, r6, pc}
 800e360:	f855 3b04 	ldr.w	r3, [r5], #4
 800e364:	4798      	blx	r3
 800e366:	3601      	adds	r6, #1
 800e368:	e7ee      	b.n	800e348 <__libc_init_array+0xc>
 800e36a:	f855 3b04 	ldr.w	r3, [r5], #4
 800e36e:	4798      	blx	r3
 800e370:	3601      	adds	r6, #1
 800e372:	e7f2      	b.n	800e35a <__libc_init_array+0x1e>
 800e374:	08010834 	.word	0x08010834
 800e378:	08010834 	.word	0x08010834
 800e37c:	08010834 	.word	0x08010834
 800e380:	08010838 	.word	0x08010838

0800e384 <__retarget_lock_init_recursive>:
 800e384:	4770      	bx	lr

0800e386 <__retarget_lock_acquire_recursive>:
 800e386:	4770      	bx	lr

0800e388 <__retarget_lock_release_recursive>:
 800e388:	4770      	bx	lr

0800e38a <memcpy>:
 800e38a:	440a      	add	r2, r1
 800e38c:	4291      	cmp	r1, r2
 800e38e:	f100 33ff 	add.w	r3, r0, #4294967295
 800e392:	d100      	bne.n	800e396 <memcpy+0xc>
 800e394:	4770      	bx	lr
 800e396:	b510      	push	{r4, lr}
 800e398:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e39c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e3a0:	4291      	cmp	r1, r2
 800e3a2:	d1f9      	bne.n	800e398 <memcpy+0xe>
 800e3a4:	bd10      	pop	{r4, pc}
	...

0800e3a8 <_free_r>:
 800e3a8:	b538      	push	{r3, r4, r5, lr}
 800e3aa:	4605      	mov	r5, r0
 800e3ac:	2900      	cmp	r1, #0
 800e3ae:	d041      	beq.n	800e434 <_free_r+0x8c>
 800e3b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e3b4:	1f0c      	subs	r4, r1, #4
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	bfb8      	it	lt
 800e3ba:	18e4      	addlt	r4, r4, r3
 800e3bc:	f000 f8e0 	bl	800e580 <__malloc_lock>
 800e3c0:	4a1d      	ldr	r2, [pc, #116]	@ (800e438 <_free_r+0x90>)
 800e3c2:	6813      	ldr	r3, [r2, #0]
 800e3c4:	b933      	cbnz	r3, 800e3d4 <_free_r+0x2c>
 800e3c6:	6063      	str	r3, [r4, #4]
 800e3c8:	6014      	str	r4, [r2, #0]
 800e3ca:	4628      	mov	r0, r5
 800e3cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e3d0:	f000 b8dc 	b.w	800e58c <__malloc_unlock>
 800e3d4:	42a3      	cmp	r3, r4
 800e3d6:	d908      	bls.n	800e3ea <_free_r+0x42>
 800e3d8:	6820      	ldr	r0, [r4, #0]
 800e3da:	1821      	adds	r1, r4, r0
 800e3dc:	428b      	cmp	r3, r1
 800e3de:	bf01      	itttt	eq
 800e3e0:	6819      	ldreq	r1, [r3, #0]
 800e3e2:	685b      	ldreq	r3, [r3, #4]
 800e3e4:	1809      	addeq	r1, r1, r0
 800e3e6:	6021      	streq	r1, [r4, #0]
 800e3e8:	e7ed      	b.n	800e3c6 <_free_r+0x1e>
 800e3ea:	461a      	mov	r2, r3
 800e3ec:	685b      	ldr	r3, [r3, #4]
 800e3ee:	b10b      	cbz	r3, 800e3f4 <_free_r+0x4c>
 800e3f0:	42a3      	cmp	r3, r4
 800e3f2:	d9fa      	bls.n	800e3ea <_free_r+0x42>
 800e3f4:	6811      	ldr	r1, [r2, #0]
 800e3f6:	1850      	adds	r0, r2, r1
 800e3f8:	42a0      	cmp	r0, r4
 800e3fa:	d10b      	bne.n	800e414 <_free_r+0x6c>
 800e3fc:	6820      	ldr	r0, [r4, #0]
 800e3fe:	4401      	add	r1, r0
 800e400:	1850      	adds	r0, r2, r1
 800e402:	4283      	cmp	r3, r0
 800e404:	6011      	str	r1, [r2, #0]
 800e406:	d1e0      	bne.n	800e3ca <_free_r+0x22>
 800e408:	6818      	ldr	r0, [r3, #0]
 800e40a:	685b      	ldr	r3, [r3, #4]
 800e40c:	6053      	str	r3, [r2, #4]
 800e40e:	4408      	add	r0, r1
 800e410:	6010      	str	r0, [r2, #0]
 800e412:	e7da      	b.n	800e3ca <_free_r+0x22>
 800e414:	d902      	bls.n	800e41c <_free_r+0x74>
 800e416:	230c      	movs	r3, #12
 800e418:	602b      	str	r3, [r5, #0]
 800e41a:	e7d6      	b.n	800e3ca <_free_r+0x22>
 800e41c:	6820      	ldr	r0, [r4, #0]
 800e41e:	1821      	adds	r1, r4, r0
 800e420:	428b      	cmp	r3, r1
 800e422:	bf04      	itt	eq
 800e424:	6819      	ldreq	r1, [r3, #0]
 800e426:	685b      	ldreq	r3, [r3, #4]
 800e428:	6063      	str	r3, [r4, #4]
 800e42a:	bf04      	itt	eq
 800e42c:	1809      	addeq	r1, r1, r0
 800e42e:	6021      	streq	r1, [r4, #0]
 800e430:	6054      	str	r4, [r2, #4]
 800e432:	e7ca      	b.n	800e3ca <_free_r+0x22>
 800e434:	bd38      	pop	{r3, r4, r5, pc}
 800e436:	bf00      	nop
 800e438:	2000241c 	.word	0x2000241c

0800e43c <sbrk_aligned>:
 800e43c:	b570      	push	{r4, r5, r6, lr}
 800e43e:	4e0f      	ldr	r6, [pc, #60]	@ (800e47c <sbrk_aligned+0x40>)
 800e440:	460c      	mov	r4, r1
 800e442:	6831      	ldr	r1, [r6, #0]
 800e444:	4605      	mov	r5, r0
 800e446:	b911      	cbnz	r1, 800e44e <sbrk_aligned+0x12>
 800e448:	f000 fe4c 	bl	800f0e4 <_sbrk_r>
 800e44c:	6030      	str	r0, [r6, #0]
 800e44e:	4621      	mov	r1, r4
 800e450:	4628      	mov	r0, r5
 800e452:	f000 fe47 	bl	800f0e4 <_sbrk_r>
 800e456:	1c43      	adds	r3, r0, #1
 800e458:	d103      	bne.n	800e462 <sbrk_aligned+0x26>
 800e45a:	f04f 34ff 	mov.w	r4, #4294967295
 800e45e:	4620      	mov	r0, r4
 800e460:	bd70      	pop	{r4, r5, r6, pc}
 800e462:	1cc4      	adds	r4, r0, #3
 800e464:	f024 0403 	bic.w	r4, r4, #3
 800e468:	42a0      	cmp	r0, r4
 800e46a:	d0f8      	beq.n	800e45e <sbrk_aligned+0x22>
 800e46c:	1a21      	subs	r1, r4, r0
 800e46e:	4628      	mov	r0, r5
 800e470:	f000 fe38 	bl	800f0e4 <_sbrk_r>
 800e474:	3001      	adds	r0, #1
 800e476:	d1f2      	bne.n	800e45e <sbrk_aligned+0x22>
 800e478:	e7ef      	b.n	800e45a <sbrk_aligned+0x1e>
 800e47a:	bf00      	nop
 800e47c:	20002418 	.word	0x20002418

0800e480 <_malloc_r>:
 800e480:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e484:	1ccd      	adds	r5, r1, #3
 800e486:	f025 0503 	bic.w	r5, r5, #3
 800e48a:	3508      	adds	r5, #8
 800e48c:	2d0c      	cmp	r5, #12
 800e48e:	bf38      	it	cc
 800e490:	250c      	movcc	r5, #12
 800e492:	2d00      	cmp	r5, #0
 800e494:	4606      	mov	r6, r0
 800e496:	db01      	blt.n	800e49c <_malloc_r+0x1c>
 800e498:	42a9      	cmp	r1, r5
 800e49a:	d904      	bls.n	800e4a6 <_malloc_r+0x26>
 800e49c:	230c      	movs	r3, #12
 800e49e:	6033      	str	r3, [r6, #0]
 800e4a0:	2000      	movs	r0, #0
 800e4a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e4a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e57c <_malloc_r+0xfc>
 800e4aa:	f000 f869 	bl	800e580 <__malloc_lock>
 800e4ae:	f8d8 3000 	ldr.w	r3, [r8]
 800e4b2:	461c      	mov	r4, r3
 800e4b4:	bb44      	cbnz	r4, 800e508 <_malloc_r+0x88>
 800e4b6:	4629      	mov	r1, r5
 800e4b8:	4630      	mov	r0, r6
 800e4ba:	f7ff ffbf 	bl	800e43c <sbrk_aligned>
 800e4be:	1c43      	adds	r3, r0, #1
 800e4c0:	4604      	mov	r4, r0
 800e4c2:	d158      	bne.n	800e576 <_malloc_r+0xf6>
 800e4c4:	f8d8 4000 	ldr.w	r4, [r8]
 800e4c8:	4627      	mov	r7, r4
 800e4ca:	2f00      	cmp	r7, #0
 800e4cc:	d143      	bne.n	800e556 <_malloc_r+0xd6>
 800e4ce:	2c00      	cmp	r4, #0
 800e4d0:	d04b      	beq.n	800e56a <_malloc_r+0xea>
 800e4d2:	6823      	ldr	r3, [r4, #0]
 800e4d4:	4639      	mov	r1, r7
 800e4d6:	4630      	mov	r0, r6
 800e4d8:	eb04 0903 	add.w	r9, r4, r3
 800e4dc:	f000 fe02 	bl	800f0e4 <_sbrk_r>
 800e4e0:	4581      	cmp	r9, r0
 800e4e2:	d142      	bne.n	800e56a <_malloc_r+0xea>
 800e4e4:	6821      	ldr	r1, [r4, #0]
 800e4e6:	1a6d      	subs	r5, r5, r1
 800e4e8:	4629      	mov	r1, r5
 800e4ea:	4630      	mov	r0, r6
 800e4ec:	f7ff ffa6 	bl	800e43c <sbrk_aligned>
 800e4f0:	3001      	adds	r0, #1
 800e4f2:	d03a      	beq.n	800e56a <_malloc_r+0xea>
 800e4f4:	6823      	ldr	r3, [r4, #0]
 800e4f6:	442b      	add	r3, r5
 800e4f8:	6023      	str	r3, [r4, #0]
 800e4fa:	f8d8 3000 	ldr.w	r3, [r8]
 800e4fe:	685a      	ldr	r2, [r3, #4]
 800e500:	bb62      	cbnz	r2, 800e55c <_malloc_r+0xdc>
 800e502:	f8c8 7000 	str.w	r7, [r8]
 800e506:	e00f      	b.n	800e528 <_malloc_r+0xa8>
 800e508:	6822      	ldr	r2, [r4, #0]
 800e50a:	1b52      	subs	r2, r2, r5
 800e50c:	d420      	bmi.n	800e550 <_malloc_r+0xd0>
 800e50e:	2a0b      	cmp	r2, #11
 800e510:	d917      	bls.n	800e542 <_malloc_r+0xc2>
 800e512:	1961      	adds	r1, r4, r5
 800e514:	42a3      	cmp	r3, r4
 800e516:	6025      	str	r5, [r4, #0]
 800e518:	bf18      	it	ne
 800e51a:	6059      	strne	r1, [r3, #4]
 800e51c:	6863      	ldr	r3, [r4, #4]
 800e51e:	bf08      	it	eq
 800e520:	f8c8 1000 	streq.w	r1, [r8]
 800e524:	5162      	str	r2, [r4, r5]
 800e526:	604b      	str	r3, [r1, #4]
 800e528:	4630      	mov	r0, r6
 800e52a:	f000 f82f 	bl	800e58c <__malloc_unlock>
 800e52e:	f104 000b 	add.w	r0, r4, #11
 800e532:	1d23      	adds	r3, r4, #4
 800e534:	f020 0007 	bic.w	r0, r0, #7
 800e538:	1ac2      	subs	r2, r0, r3
 800e53a:	bf1c      	itt	ne
 800e53c:	1a1b      	subne	r3, r3, r0
 800e53e:	50a3      	strne	r3, [r4, r2]
 800e540:	e7af      	b.n	800e4a2 <_malloc_r+0x22>
 800e542:	6862      	ldr	r2, [r4, #4]
 800e544:	42a3      	cmp	r3, r4
 800e546:	bf0c      	ite	eq
 800e548:	f8c8 2000 	streq.w	r2, [r8]
 800e54c:	605a      	strne	r2, [r3, #4]
 800e54e:	e7eb      	b.n	800e528 <_malloc_r+0xa8>
 800e550:	4623      	mov	r3, r4
 800e552:	6864      	ldr	r4, [r4, #4]
 800e554:	e7ae      	b.n	800e4b4 <_malloc_r+0x34>
 800e556:	463c      	mov	r4, r7
 800e558:	687f      	ldr	r7, [r7, #4]
 800e55a:	e7b6      	b.n	800e4ca <_malloc_r+0x4a>
 800e55c:	461a      	mov	r2, r3
 800e55e:	685b      	ldr	r3, [r3, #4]
 800e560:	42a3      	cmp	r3, r4
 800e562:	d1fb      	bne.n	800e55c <_malloc_r+0xdc>
 800e564:	2300      	movs	r3, #0
 800e566:	6053      	str	r3, [r2, #4]
 800e568:	e7de      	b.n	800e528 <_malloc_r+0xa8>
 800e56a:	230c      	movs	r3, #12
 800e56c:	6033      	str	r3, [r6, #0]
 800e56e:	4630      	mov	r0, r6
 800e570:	f000 f80c 	bl	800e58c <__malloc_unlock>
 800e574:	e794      	b.n	800e4a0 <_malloc_r+0x20>
 800e576:	6005      	str	r5, [r0, #0]
 800e578:	e7d6      	b.n	800e528 <_malloc_r+0xa8>
 800e57a:	bf00      	nop
 800e57c:	2000241c 	.word	0x2000241c

0800e580 <__malloc_lock>:
 800e580:	4801      	ldr	r0, [pc, #4]	@ (800e588 <__malloc_lock+0x8>)
 800e582:	f7ff bf00 	b.w	800e386 <__retarget_lock_acquire_recursive>
 800e586:	bf00      	nop
 800e588:	20002414 	.word	0x20002414

0800e58c <__malloc_unlock>:
 800e58c:	4801      	ldr	r0, [pc, #4]	@ (800e594 <__malloc_unlock+0x8>)
 800e58e:	f7ff befb 	b.w	800e388 <__retarget_lock_release_recursive>
 800e592:	bf00      	nop
 800e594:	20002414 	.word	0x20002414

0800e598 <__ssputs_r>:
 800e598:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e59c:	688e      	ldr	r6, [r1, #8]
 800e59e:	461f      	mov	r7, r3
 800e5a0:	42be      	cmp	r6, r7
 800e5a2:	680b      	ldr	r3, [r1, #0]
 800e5a4:	4682      	mov	sl, r0
 800e5a6:	460c      	mov	r4, r1
 800e5a8:	4690      	mov	r8, r2
 800e5aa:	d82d      	bhi.n	800e608 <__ssputs_r+0x70>
 800e5ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e5b0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e5b4:	d026      	beq.n	800e604 <__ssputs_r+0x6c>
 800e5b6:	6965      	ldr	r5, [r4, #20]
 800e5b8:	6909      	ldr	r1, [r1, #16]
 800e5ba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e5be:	eba3 0901 	sub.w	r9, r3, r1
 800e5c2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e5c6:	1c7b      	adds	r3, r7, #1
 800e5c8:	444b      	add	r3, r9
 800e5ca:	106d      	asrs	r5, r5, #1
 800e5cc:	429d      	cmp	r5, r3
 800e5ce:	bf38      	it	cc
 800e5d0:	461d      	movcc	r5, r3
 800e5d2:	0553      	lsls	r3, r2, #21
 800e5d4:	d527      	bpl.n	800e626 <__ssputs_r+0x8e>
 800e5d6:	4629      	mov	r1, r5
 800e5d8:	f7ff ff52 	bl	800e480 <_malloc_r>
 800e5dc:	4606      	mov	r6, r0
 800e5de:	b360      	cbz	r0, 800e63a <__ssputs_r+0xa2>
 800e5e0:	6921      	ldr	r1, [r4, #16]
 800e5e2:	464a      	mov	r2, r9
 800e5e4:	f7ff fed1 	bl	800e38a <memcpy>
 800e5e8:	89a3      	ldrh	r3, [r4, #12]
 800e5ea:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e5ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e5f2:	81a3      	strh	r3, [r4, #12]
 800e5f4:	6126      	str	r6, [r4, #16]
 800e5f6:	6165      	str	r5, [r4, #20]
 800e5f8:	444e      	add	r6, r9
 800e5fa:	eba5 0509 	sub.w	r5, r5, r9
 800e5fe:	6026      	str	r6, [r4, #0]
 800e600:	60a5      	str	r5, [r4, #8]
 800e602:	463e      	mov	r6, r7
 800e604:	42be      	cmp	r6, r7
 800e606:	d900      	bls.n	800e60a <__ssputs_r+0x72>
 800e608:	463e      	mov	r6, r7
 800e60a:	6820      	ldr	r0, [r4, #0]
 800e60c:	4632      	mov	r2, r6
 800e60e:	4641      	mov	r1, r8
 800e610:	f000 fd2c 	bl	800f06c <memmove>
 800e614:	68a3      	ldr	r3, [r4, #8]
 800e616:	1b9b      	subs	r3, r3, r6
 800e618:	60a3      	str	r3, [r4, #8]
 800e61a:	6823      	ldr	r3, [r4, #0]
 800e61c:	4433      	add	r3, r6
 800e61e:	6023      	str	r3, [r4, #0]
 800e620:	2000      	movs	r0, #0
 800e622:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e626:	462a      	mov	r2, r5
 800e628:	f000 fd6c 	bl	800f104 <_realloc_r>
 800e62c:	4606      	mov	r6, r0
 800e62e:	2800      	cmp	r0, #0
 800e630:	d1e0      	bne.n	800e5f4 <__ssputs_r+0x5c>
 800e632:	6921      	ldr	r1, [r4, #16]
 800e634:	4650      	mov	r0, sl
 800e636:	f7ff feb7 	bl	800e3a8 <_free_r>
 800e63a:	230c      	movs	r3, #12
 800e63c:	f8ca 3000 	str.w	r3, [sl]
 800e640:	89a3      	ldrh	r3, [r4, #12]
 800e642:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e646:	81a3      	strh	r3, [r4, #12]
 800e648:	f04f 30ff 	mov.w	r0, #4294967295
 800e64c:	e7e9      	b.n	800e622 <__ssputs_r+0x8a>
	...

0800e650 <_svfiprintf_r>:
 800e650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e654:	4698      	mov	r8, r3
 800e656:	898b      	ldrh	r3, [r1, #12]
 800e658:	061b      	lsls	r3, r3, #24
 800e65a:	b09d      	sub	sp, #116	@ 0x74
 800e65c:	4607      	mov	r7, r0
 800e65e:	460d      	mov	r5, r1
 800e660:	4614      	mov	r4, r2
 800e662:	d510      	bpl.n	800e686 <_svfiprintf_r+0x36>
 800e664:	690b      	ldr	r3, [r1, #16]
 800e666:	b973      	cbnz	r3, 800e686 <_svfiprintf_r+0x36>
 800e668:	2140      	movs	r1, #64	@ 0x40
 800e66a:	f7ff ff09 	bl	800e480 <_malloc_r>
 800e66e:	6028      	str	r0, [r5, #0]
 800e670:	6128      	str	r0, [r5, #16]
 800e672:	b930      	cbnz	r0, 800e682 <_svfiprintf_r+0x32>
 800e674:	230c      	movs	r3, #12
 800e676:	603b      	str	r3, [r7, #0]
 800e678:	f04f 30ff 	mov.w	r0, #4294967295
 800e67c:	b01d      	add	sp, #116	@ 0x74
 800e67e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e682:	2340      	movs	r3, #64	@ 0x40
 800e684:	616b      	str	r3, [r5, #20]
 800e686:	2300      	movs	r3, #0
 800e688:	9309      	str	r3, [sp, #36]	@ 0x24
 800e68a:	2320      	movs	r3, #32
 800e68c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e690:	f8cd 800c 	str.w	r8, [sp, #12]
 800e694:	2330      	movs	r3, #48	@ 0x30
 800e696:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e834 <_svfiprintf_r+0x1e4>
 800e69a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e69e:	f04f 0901 	mov.w	r9, #1
 800e6a2:	4623      	mov	r3, r4
 800e6a4:	469a      	mov	sl, r3
 800e6a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e6aa:	b10a      	cbz	r2, 800e6b0 <_svfiprintf_r+0x60>
 800e6ac:	2a25      	cmp	r2, #37	@ 0x25
 800e6ae:	d1f9      	bne.n	800e6a4 <_svfiprintf_r+0x54>
 800e6b0:	ebba 0b04 	subs.w	fp, sl, r4
 800e6b4:	d00b      	beq.n	800e6ce <_svfiprintf_r+0x7e>
 800e6b6:	465b      	mov	r3, fp
 800e6b8:	4622      	mov	r2, r4
 800e6ba:	4629      	mov	r1, r5
 800e6bc:	4638      	mov	r0, r7
 800e6be:	f7ff ff6b 	bl	800e598 <__ssputs_r>
 800e6c2:	3001      	adds	r0, #1
 800e6c4:	f000 80a7 	beq.w	800e816 <_svfiprintf_r+0x1c6>
 800e6c8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e6ca:	445a      	add	r2, fp
 800e6cc:	9209      	str	r2, [sp, #36]	@ 0x24
 800e6ce:	f89a 3000 	ldrb.w	r3, [sl]
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	f000 809f 	beq.w	800e816 <_svfiprintf_r+0x1c6>
 800e6d8:	2300      	movs	r3, #0
 800e6da:	f04f 32ff 	mov.w	r2, #4294967295
 800e6de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e6e2:	f10a 0a01 	add.w	sl, sl, #1
 800e6e6:	9304      	str	r3, [sp, #16]
 800e6e8:	9307      	str	r3, [sp, #28]
 800e6ea:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e6ee:	931a      	str	r3, [sp, #104]	@ 0x68
 800e6f0:	4654      	mov	r4, sl
 800e6f2:	2205      	movs	r2, #5
 800e6f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e6f8:	484e      	ldr	r0, [pc, #312]	@ (800e834 <_svfiprintf_r+0x1e4>)
 800e6fa:	f7f1 fd49 	bl	8000190 <memchr>
 800e6fe:	9a04      	ldr	r2, [sp, #16]
 800e700:	b9d8      	cbnz	r0, 800e73a <_svfiprintf_r+0xea>
 800e702:	06d0      	lsls	r0, r2, #27
 800e704:	bf44      	itt	mi
 800e706:	2320      	movmi	r3, #32
 800e708:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e70c:	0711      	lsls	r1, r2, #28
 800e70e:	bf44      	itt	mi
 800e710:	232b      	movmi	r3, #43	@ 0x2b
 800e712:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e716:	f89a 3000 	ldrb.w	r3, [sl]
 800e71a:	2b2a      	cmp	r3, #42	@ 0x2a
 800e71c:	d015      	beq.n	800e74a <_svfiprintf_r+0xfa>
 800e71e:	9a07      	ldr	r2, [sp, #28]
 800e720:	4654      	mov	r4, sl
 800e722:	2000      	movs	r0, #0
 800e724:	f04f 0c0a 	mov.w	ip, #10
 800e728:	4621      	mov	r1, r4
 800e72a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e72e:	3b30      	subs	r3, #48	@ 0x30
 800e730:	2b09      	cmp	r3, #9
 800e732:	d94b      	bls.n	800e7cc <_svfiprintf_r+0x17c>
 800e734:	b1b0      	cbz	r0, 800e764 <_svfiprintf_r+0x114>
 800e736:	9207      	str	r2, [sp, #28]
 800e738:	e014      	b.n	800e764 <_svfiprintf_r+0x114>
 800e73a:	eba0 0308 	sub.w	r3, r0, r8
 800e73e:	fa09 f303 	lsl.w	r3, r9, r3
 800e742:	4313      	orrs	r3, r2
 800e744:	9304      	str	r3, [sp, #16]
 800e746:	46a2      	mov	sl, r4
 800e748:	e7d2      	b.n	800e6f0 <_svfiprintf_r+0xa0>
 800e74a:	9b03      	ldr	r3, [sp, #12]
 800e74c:	1d19      	adds	r1, r3, #4
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	9103      	str	r1, [sp, #12]
 800e752:	2b00      	cmp	r3, #0
 800e754:	bfbb      	ittet	lt
 800e756:	425b      	neglt	r3, r3
 800e758:	f042 0202 	orrlt.w	r2, r2, #2
 800e75c:	9307      	strge	r3, [sp, #28]
 800e75e:	9307      	strlt	r3, [sp, #28]
 800e760:	bfb8      	it	lt
 800e762:	9204      	strlt	r2, [sp, #16]
 800e764:	7823      	ldrb	r3, [r4, #0]
 800e766:	2b2e      	cmp	r3, #46	@ 0x2e
 800e768:	d10a      	bne.n	800e780 <_svfiprintf_r+0x130>
 800e76a:	7863      	ldrb	r3, [r4, #1]
 800e76c:	2b2a      	cmp	r3, #42	@ 0x2a
 800e76e:	d132      	bne.n	800e7d6 <_svfiprintf_r+0x186>
 800e770:	9b03      	ldr	r3, [sp, #12]
 800e772:	1d1a      	adds	r2, r3, #4
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	9203      	str	r2, [sp, #12]
 800e778:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e77c:	3402      	adds	r4, #2
 800e77e:	9305      	str	r3, [sp, #20]
 800e780:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e844 <_svfiprintf_r+0x1f4>
 800e784:	7821      	ldrb	r1, [r4, #0]
 800e786:	2203      	movs	r2, #3
 800e788:	4650      	mov	r0, sl
 800e78a:	f7f1 fd01 	bl	8000190 <memchr>
 800e78e:	b138      	cbz	r0, 800e7a0 <_svfiprintf_r+0x150>
 800e790:	9b04      	ldr	r3, [sp, #16]
 800e792:	eba0 000a 	sub.w	r0, r0, sl
 800e796:	2240      	movs	r2, #64	@ 0x40
 800e798:	4082      	lsls	r2, r0
 800e79a:	4313      	orrs	r3, r2
 800e79c:	3401      	adds	r4, #1
 800e79e:	9304      	str	r3, [sp, #16]
 800e7a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e7a4:	4824      	ldr	r0, [pc, #144]	@ (800e838 <_svfiprintf_r+0x1e8>)
 800e7a6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e7aa:	2206      	movs	r2, #6
 800e7ac:	f7f1 fcf0 	bl	8000190 <memchr>
 800e7b0:	2800      	cmp	r0, #0
 800e7b2:	d036      	beq.n	800e822 <_svfiprintf_r+0x1d2>
 800e7b4:	4b21      	ldr	r3, [pc, #132]	@ (800e83c <_svfiprintf_r+0x1ec>)
 800e7b6:	bb1b      	cbnz	r3, 800e800 <_svfiprintf_r+0x1b0>
 800e7b8:	9b03      	ldr	r3, [sp, #12]
 800e7ba:	3307      	adds	r3, #7
 800e7bc:	f023 0307 	bic.w	r3, r3, #7
 800e7c0:	3308      	adds	r3, #8
 800e7c2:	9303      	str	r3, [sp, #12]
 800e7c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e7c6:	4433      	add	r3, r6
 800e7c8:	9309      	str	r3, [sp, #36]	@ 0x24
 800e7ca:	e76a      	b.n	800e6a2 <_svfiprintf_r+0x52>
 800e7cc:	fb0c 3202 	mla	r2, ip, r2, r3
 800e7d0:	460c      	mov	r4, r1
 800e7d2:	2001      	movs	r0, #1
 800e7d4:	e7a8      	b.n	800e728 <_svfiprintf_r+0xd8>
 800e7d6:	2300      	movs	r3, #0
 800e7d8:	3401      	adds	r4, #1
 800e7da:	9305      	str	r3, [sp, #20]
 800e7dc:	4619      	mov	r1, r3
 800e7de:	f04f 0c0a 	mov.w	ip, #10
 800e7e2:	4620      	mov	r0, r4
 800e7e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e7e8:	3a30      	subs	r2, #48	@ 0x30
 800e7ea:	2a09      	cmp	r2, #9
 800e7ec:	d903      	bls.n	800e7f6 <_svfiprintf_r+0x1a6>
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	d0c6      	beq.n	800e780 <_svfiprintf_r+0x130>
 800e7f2:	9105      	str	r1, [sp, #20]
 800e7f4:	e7c4      	b.n	800e780 <_svfiprintf_r+0x130>
 800e7f6:	fb0c 2101 	mla	r1, ip, r1, r2
 800e7fa:	4604      	mov	r4, r0
 800e7fc:	2301      	movs	r3, #1
 800e7fe:	e7f0      	b.n	800e7e2 <_svfiprintf_r+0x192>
 800e800:	ab03      	add	r3, sp, #12
 800e802:	9300      	str	r3, [sp, #0]
 800e804:	462a      	mov	r2, r5
 800e806:	4b0e      	ldr	r3, [pc, #56]	@ (800e840 <_svfiprintf_r+0x1f0>)
 800e808:	a904      	add	r1, sp, #16
 800e80a:	4638      	mov	r0, r7
 800e80c:	f3af 8000 	nop.w
 800e810:	1c42      	adds	r2, r0, #1
 800e812:	4606      	mov	r6, r0
 800e814:	d1d6      	bne.n	800e7c4 <_svfiprintf_r+0x174>
 800e816:	89ab      	ldrh	r3, [r5, #12]
 800e818:	065b      	lsls	r3, r3, #25
 800e81a:	f53f af2d 	bmi.w	800e678 <_svfiprintf_r+0x28>
 800e81e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e820:	e72c      	b.n	800e67c <_svfiprintf_r+0x2c>
 800e822:	ab03      	add	r3, sp, #12
 800e824:	9300      	str	r3, [sp, #0]
 800e826:	462a      	mov	r2, r5
 800e828:	4b05      	ldr	r3, [pc, #20]	@ (800e840 <_svfiprintf_r+0x1f0>)
 800e82a:	a904      	add	r1, sp, #16
 800e82c:	4638      	mov	r0, r7
 800e82e:	f000 f9bb 	bl	800eba8 <_printf_i>
 800e832:	e7ed      	b.n	800e810 <_svfiprintf_r+0x1c0>
 800e834:	080107f6 	.word	0x080107f6
 800e838:	08010800 	.word	0x08010800
 800e83c:	00000000 	.word	0x00000000
 800e840:	0800e599 	.word	0x0800e599
 800e844:	080107fc 	.word	0x080107fc

0800e848 <__sfputc_r>:
 800e848:	6893      	ldr	r3, [r2, #8]
 800e84a:	3b01      	subs	r3, #1
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	b410      	push	{r4}
 800e850:	6093      	str	r3, [r2, #8]
 800e852:	da08      	bge.n	800e866 <__sfputc_r+0x1e>
 800e854:	6994      	ldr	r4, [r2, #24]
 800e856:	42a3      	cmp	r3, r4
 800e858:	db01      	blt.n	800e85e <__sfputc_r+0x16>
 800e85a:	290a      	cmp	r1, #10
 800e85c:	d103      	bne.n	800e866 <__sfputc_r+0x1e>
 800e85e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e862:	f7ff bc88 	b.w	800e176 <__swbuf_r>
 800e866:	6813      	ldr	r3, [r2, #0]
 800e868:	1c58      	adds	r0, r3, #1
 800e86a:	6010      	str	r0, [r2, #0]
 800e86c:	7019      	strb	r1, [r3, #0]
 800e86e:	4608      	mov	r0, r1
 800e870:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e874:	4770      	bx	lr

0800e876 <__sfputs_r>:
 800e876:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e878:	4606      	mov	r6, r0
 800e87a:	460f      	mov	r7, r1
 800e87c:	4614      	mov	r4, r2
 800e87e:	18d5      	adds	r5, r2, r3
 800e880:	42ac      	cmp	r4, r5
 800e882:	d101      	bne.n	800e888 <__sfputs_r+0x12>
 800e884:	2000      	movs	r0, #0
 800e886:	e007      	b.n	800e898 <__sfputs_r+0x22>
 800e888:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e88c:	463a      	mov	r2, r7
 800e88e:	4630      	mov	r0, r6
 800e890:	f7ff ffda 	bl	800e848 <__sfputc_r>
 800e894:	1c43      	adds	r3, r0, #1
 800e896:	d1f3      	bne.n	800e880 <__sfputs_r+0xa>
 800e898:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e89c <_vfiprintf_r>:
 800e89c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8a0:	460d      	mov	r5, r1
 800e8a2:	b09d      	sub	sp, #116	@ 0x74
 800e8a4:	4614      	mov	r4, r2
 800e8a6:	4698      	mov	r8, r3
 800e8a8:	4606      	mov	r6, r0
 800e8aa:	b118      	cbz	r0, 800e8b4 <_vfiprintf_r+0x18>
 800e8ac:	6a03      	ldr	r3, [r0, #32]
 800e8ae:	b90b      	cbnz	r3, 800e8b4 <_vfiprintf_r+0x18>
 800e8b0:	f7ff fb50 	bl	800df54 <__sinit>
 800e8b4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e8b6:	07d9      	lsls	r1, r3, #31
 800e8b8:	d405      	bmi.n	800e8c6 <_vfiprintf_r+0x2a>
 800e8ba:	89ab      	ldrh	r3, [r5, #12]
 800e8bc:	059a      	lsls	r2, r3, #22
 800e8be:	d402      	bmi.n	800e8c6 <_vfiprintf_r+0x2a>
 800e8c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e8c2:	f7ff fd60 	bl	800e386 <__retarget_lock_acquire_recursive>
 800e8c6:	89ab      	ldrh	r3, [r5, #12]
 800e8c8:	071b      	lsls	r3, r3, #28
 800e8ca:	d501      	bpl.n	800e8d0 <_vfiprintf_r+0x34>
 800e8cc:	692b      	ldr	r3, [r5, #16]
 800e8ce:	b99b      	cbnz	r3, 800e8f8 <_vfiprintf_r+0x5c>
 800e8d0:	4629      	mov	r1, r5
 800e8d2:	4630      	mov	r0, r6
 800e8d4:	f7ff fc8e 	bl	800e1f4 <__swsetup_r>
 800e8d8:	b170      	cbz	r0, 800e8f8 <_vfiprintf_r+0x5c>
 800e8da:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e8dc:	07dc      	lsls	r4, r3, #31
 800e8de:	d504      	bpl.n	800e8ea <_vfiprintf_r+0x4e>
 800e8e0:	f04f 30ff 	mov.w	r0, #4294967295
 800e8e4:	b01d      	add	sp, #116	@ 0x74
 800e8e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8ea:	89ab      	ldrh	r3, [r5, #12]
 800e8ec:	0598      	lsls	r0, r3, #22
 800e8ee:	d4f7      	bmi.n	800e8e0 <_vfiprintf_r+0x44>
 800e8f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e8f2:	f7ff fd49 	bl	800e388 <__retarget_lock_release_recursive>
 800e8f6:	e7f3      	b.n	800e8e0 <_vfiprintf_r+0x44>
 800e8f8:	2300      	movs	r3, #0
 800e8fa:	9309      	str	r3, [sp, #36]	@ 0x24
 800e8fc:	2320      	movs	r3, #32
 800e8fe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e902:	f8cd 800c 	str.w	r8, [sp, #12]
 800e906:	2330      	movs	r3, #48	@ 0x30
 800e908:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800eab8 <_vfiprintf_r+0x21c>
 800e90c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e910:	f04f 0901 	mov.w	r9, #1
 800e914:	4623      	mov	r3, r4
 800e916:	469a      	mov	sl, r3
 800e918:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e91c:	b10a      	cbz	r2, 800e922 <_vfiprintf_r+0x86>
 800e91e:	2a25      	cmp	r2, #37	@ 0x25
 800e920:	d1f9      	bne.n	800e916 <_vfiprintf_r+0x7a>
 800e922:	ebba 0b04 	subs.w	fp, sl, r4
 800e926:	d00b      	beq.n	800e940 <_vfiprintf_r+0xa4>
 800e928:	465b      	mov	r3, fp
 800e92a:	4622      	mov	r2, r4
 800e92c:	4629      	mov	r1, r5
 800e92e:	4630      	mov	r0, r6
 800e930:	f7ff ffa1 	bl	800e876 <__sfputs_r>
 800e934:	3001      	adds	r0, #1
 800e936:	f000 80a7 	beq.w	800ea88 <_vfiprintf_r+0x1ec>
 800e93a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e93c:	445a      	add	r2, fp
 800e93e:	9209      	str	r2, [sp, #36]	@ 0x24
 800e940:	f89a 3000 	ldrb.w	r3, [sl]
 800e944:	2b00      	cmp	r3, #0
 800e946:	f000 809f 	beq.w	800ea88 <_vfiprintf_r+0x1ec>
 800e94a:	2300      	movs	r3, #0
 800e94c:	f04f 32ff 	mov.w	r2, #4294967295
 800e950:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e954:	f10a 0a01 	add.w	sl, sl, #1
 800e958:	9304      	str	r3, [sp, #16]
 800e95a:	9307      	str	r3, [sp, #28]
 800e95c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e960:	931a      	str	r3, [sp, #104]	@ 0x68
 800e962:	4654      	mov	r4, sl
 800e964:	2205      	movs	r2, #5
 800e966:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e96a:	4853      	ldr	r0, [pc, #332]	@ (800eab8 <_vfiprintf_r+0x21c>)
 800e96c:	f7f1 fc10 	bl	8000190 <memchr>
 800e970:	9a04      	ldr	r2, [sp, #16]
 800e972:	b9d8      	cbnz	r0, 800e9ac <_vfiprintf_r+0x110>
 800e974:	06d1      	lsls	r1, r2, #27
 800e976:	bf44      	itt	mi
 800e978:	2320      	movmi	r3, #32
 800e97a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e97e:	0713      	lsls	r3, r2, #28
 800e980:	bf44      	itt	mi
 800e982:	232b      	movmi	r3, #43	@ 0x2b
 800e984:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e988:	f89a 3000 	ldrb.w	r3, [sl]
 800e98c:	2b2a      	cmp	r3, #42	@ 0x2a
 800e98e:	d015      	beq.n	800e9bc <_vfiprintf_r+0x120>
 800e990:	9a07      	ldr	r2, [sp, #28]
 800e992:	4654      	mov	r4, sl
 800e994:	2000      	movs	r0, #0
 800e996:	f04f 0c0a 	mov.w	ip, #10
 800e99a:	4621      	mov	r1, r4
 800e99c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e9a0:	3b30      	subs	r3, #48	@ 0x30
 800e9a2:	2b09      	cmp	r3, #9
 800e9a4:	d94b      	bls.n	800ea3e <_vfiprintf_r+0x1a2>
 800e9a6:	b1b0      	cbz	r0, 800e9d6 <_vfiprintf_r+0x13a>
 800e9a8:	9207      	str	r2, [sp, #28]
 800e9aa:	e014      	b.n	800e9d6 <_vfiprintf_r+0x13a>
 800e9ac:	eba0 0308 	sub.w	r3, r0, r8
 800e9b0:	fa09 f303 	lsl.w	r3, r9, r3
 800e9b4:	4313      	orrs	r3, r2
 800e9b6:	9304      	str	r3, [sp, #16]
 800e9b8:	46a2      	mov	sl, r4
 800e9ba:	e7d2      	b.n	800e962 <_vfiprintf_r+0xc6>
 800e9bc:	9b03      	ldr	r3, [sp, #12]
 800e9be:	1d19      	adds	r1, r3, #4
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	9103      	str	r1, [sp, #12]
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	bfbb      	ittet	lt
 800e9c8:	425b      	neglt	r3, r3
 800e9ca:	f042 0202 	orrlt.w	r2, r2, #2
 800e9ce:	9307      	strge	r3, [sp, #28]
 800e9d0:	9307      	strlt	r3, [sp, #28]
 800e9d2:	bfb8      	it	lt
 800e9d4:	9204      	strlt	r2, [sp, #16]
 800e9d6:	7823      	ldrb	r3, [r4, #0]
 800e9d8:	2b2e      	cmp	r3, #46	@ 0x2e
 800e9da:	d10a      	bne.n	800e9f2 <_vfiprintf_r+0x156>
 800e9dc:	7863      	ldrb	r3, [r4, #1]
 800e9de:	2b2a      	cmp	r3, #42	@ 0x2a
 800e9e0:	d132      	bne.n	800ea48 <_vfiprintf_r+0x1ac>
 800e9e2:	9b03      	ldr	r3, [sp, #12]
 800e9e4:	1d1a      	adds	r2, r3, #4
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	9203      	str	r2, [sp, #12]
 800e9ea:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e9ee:	3402      	adds	r4, #2
 800e9f0:	9305      	str	r3, [sp, #20]
 800e9f2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800eac8 <_vfiprintf_r+0x22c>
 800e9f6:	7821      	ldrb	r1, [r4, #0]
 800e9f8:	2203      	movs	r2, #3
 800e9fa:	4650      	mov	r0, sl
 800e9fc:	f7f1 fbc8 	bl	8000190 <memchr>
 800ea00:	b138      	cbz	r0, 800ea12 <_vfiprintf_r+0x176>
 800ea02:	9b04      	ldr	r3, [sp, #16]
 800ea04:	eba0 000a 	sub.w	r0, r0, sl
 800ea08:	2240      	movs	r2, #64	@ 0x40
 800ea0a:	4082      	lsls	r2, r0
 800ea0c:	4313      	orrs	r3, r2
 800ea0e:	3401      	adds	r4, #1
 800ea10:	9304      	str	r3, [sp, #16]
 800ea12:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ea16:	4829      	ldr	r0, [pc, #164]	@ (800eabc <_vfiprintf_r+0x220>)
 800ea18:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ea1c:	2206      	movs	r2, #6
 800ea1e:	f7f1 fbb7 	bl	8000190 <memchr>
 800ea22:	2800      	cmp	r0, #0
 800ea24:	d03f      	beq.n	800eaa6 <_vfiprintf_r+0x20a>
 800ea26:	4b26      	ldr	r3, [pc, #152]	@ (800eac0 <_vfiprintf_r+0x224>)
 800ea28:	bb1b      	cbnz	r3, 800ea72 <_vfiprintf_r+0x1d6>
 800ea2a:	9b03      	ldr	r3, [sp, #12]
 800ea2c:	3307      	adds	r3, #7
 800ea2e:	f023 0307 	bic.w	r3, r3, #7
 800ea32:	3308      	adds	r3, #8
 800ea34:	9303      	str	r3, [sp, #12]
 800ea36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ea38:	443b      	add	r3, r7
 800ea3a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ea3c:	e76a      	b.n	800e914 <_vfiprintf_r+0x78>
 800ea3e:	fb0c 3202 	mla	r2, ip, r2, r3
 800ea42:	460c      	mov	r4, r1
 800ea44:	2001      	movs	r0, #1
 800ea46:	e7a8      	b.n	800e99a <_vfiprintf_r+0xfe>
 800ea48:	2300      	movs	r3, #0
 800ea4a:	3401      	adds	r4, #1
 800ea4c:	9305      	str	r3, [sp, #20]
 800ea4e:	4619      	mov	r1, r3
 800ea50:	f04f 0c0a 	mov.w	ip, #10
 800ea54:	4620      	mov	r0, r4
 800ea56:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ea5a:	3a30      	subs	r2, #48	@ 0x30
 800ea5c:	2a09      	cmp	r2, #9
 800ea5e:	d903      	bls.n	800ea68 <_vfiprintf_r+0x1cc>
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	d0c6      	beq.n	800e9f2 <_vfiprintf_r+0x156>
 800ea64:	9105      	str	r1, [sp, #20]
 800ea66:	e7c4      	b.n	800e9f2 <_vfiprintf_r+0x156>
 800ea68:	fb0c 2101 	mla	r1, ip, r1, r2
 800ea6c:	4604      	mov	r4, r0
 800ea6e:	2301      	movs	r3, #1
 800ea70:	e7f0      	b.n	800ea54 <_vfiprintf_r+0x1b8>
 800ea72:	ab03      	add	r3, sp, #12
 800ea74:	9300      	str	r3, [sp, #0]
 800ea76:	462a      	mov	r2, r5
 800ea78:	4b12      	ldr	r3, [pc, #72]	@ (800eac4 <_vfiprintf_r+0x228>)
 800ea7a:	a904      	add	r1, sp, #16
 800ea7c:	4630      	mov	r0, r6
 800ea7e:	f3af 8000 	nop.w
 800ea82:	4607      	mov	r7, r0
 800ea84:	1c78      	adds	r0, r7, #1
 800ea86:	d1d6      	bne.n	800ea36 <_vfiprintf_r+0x19a>
 800ea88:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ea8a:	07d9      	lsls	r1, r3, #31
 800ea8c:	d405      	bmi.n	800ea9a <_vfiprintf_r+0x1fe>
 800ea8e:	89ab      	ldrh	r3, [r5, #12]
 800ea90:	059a      	lsls	r2, r3, #22
 800ea92:	d402      	bmi.n	800ea9a <_vfiprintf_r+0x1fe>
 800ea94:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ea96:	f7ff fc77 	bl	800e388 <__retarget_lock_release_recursive>
 800ea9a:	89ab      	ldrh	r3, [r5, #12]
 800ea9c:	065b      	lsls	r3, r3, #25
 800ea9e:	f53f af1f 	bmi.w	800e8e0 <_vfiprintf_r+0x44>
 800eaa2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800eaa4:	e71e      	b.n	800e8e4 <_vfiprintf_r+0x48>
 800eaa6:	ab03      	add	r3, sp, #12
 800eaa8:	9300      	str	r3, [sp, #0]
 800eaaa:	462a      	mov	r2, r5
 800eaac:	4b05      	ldr	r3, [pc, #20]	@ (800eac4 <_vfiprintf_r+0x228>)
 800eaae:	a904      	add	r1, sp, #16
 800eab0:	4630      	mov	r0, r6
 800eab2:	f000 f879 	bl	800eba8 <_printf_i>
 800eab6:	e7e4      	b.n	800ea82 <_vfiprintf_r+0x1e6>
 800eab8:	080107f6 	.word	0x080107f6
 800eabc:	08010800 	.word	0x08010800
 800eac0:	00000000 	.word	0x00000000
 800eac4:	0800e877 	.word	0x0800e877
 800eac8:	080107fc 	.word	0x080107fc

0800eacc <_printf_common>:
 800eacc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ead0:	4616      	mov	r6, r2
 800ead2:	4698      	mov	r8, r3
 800ead4:	688a      	ldr	r2, [r1, #8]
 800ead6:	690b      	ldr	r3, [r1, #16]
 800ead8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800eadc:	4293      	cmp	r3, r2
 800eade:	bfb8      	it	lt
 800eae0:	4613      	movlt	r3, r2
 800eae2:	6033      	str	r3, [r6, #0]
 800eae4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800eae8:	4607      	mov	r7, r0
 800eaea:	460c      	mov	r4, r1
 800eaec:	b10a      	cbz	r2, 800eaf2 <_printf_common+0x26>
 800eaee:	3301      	adds	r3, #1
 800eaf0:	6033      	str	r3, [r6, #0]
 800eaf2:	6823      	ldr	r3, [r4, #0]
 800eaf4:	0699      	lsls	r1, r3, #26
 800eaf6:	bf42      	ittt	mi
 800eaf8:	6833      	ldrmi	r3, [r6, #0]
 800eafa:	3302      	addmi	r3, #2
 800eafc:	6033      	strmi	r3, [r6, #0]
 800eafe:	6825      	ldr	r5, [r4, #0]
 800eb00:	f015 0506 	ands.w	r5, r5, #6
 800eb04:	d106      	bne.n	800eb14 <_printf_common+0x48>
 800eb06:	f104 0a19 	add.w	sl, r4, #25
 800eb0a:	68e3      	ldr	r3, [r4, #12]
 800eb0c:	6832      	ldr	r2, [r6, #0]
 800eb0e:	1a9b      	subs	r3, r3, r2
 800eb10:	42ab      	cmp	r3, r5
 800eb12:	dc26      	bgt.n	800eb62 <_printf_common+0x96>
 800eb14:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800eb18:	6822      	ldr	r2, [r4, #0]
 800eb1a:	3b00      	subs	r3, #0
 800eb1c:	bf18      	it	ne
 800eb1e:	2301      	movne	r3, #1
 800eb20:	0692      	lsls	r2, r2, #26
 800eb22:	d42b      	bmi.n	800eb7c <_printf_common+0xb0>
 800eb24:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800eb28:	4641      	mov	r1, r8
 800eb2a:	4638      	mov	r0, r7
 800eb2c:	47c8      	blx	r9
 800eb2e:	3001      	adds	r0, #1
 800eb30:	d01e      	beq.n	800eb70 <_printf_common+0xa4>
 800eb32:	6823      	ldr	r3, [r4, #0]
 800eb34:	6922      	ldr	r2, [r4, #16]
 800eb36:	f003 0306 	and.w	r3, r3, #6
 800eb3a:	2b04      	cmp	r3, #4
 800eb3c:	bf02      	ittt	eq
 800eb3e:	68e5      	ldreq	r5, [r4, #12]
 800eb40:	6833      	ldreq	r3, [r6, #0]
 800eb42:	1aed      	subeq	r5, r5, r3
 800eb44:	68a3      	ldr	r3, [r4, #8]
 800eb46:	bf0c      	ite	eq
 800eb48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800eb4c:	2500      	movne	r5, #0
 800eb4e:	4293      	cmp	r3, r2
 800eb50:	bfc4      	itt	gt
 800eb52:	1a9b      	subgt	r3, r3, r2
 800eb54:	18ed      	addgt	r5, r5, r3
 800eb56:	2600      	movs	r6, #0
 800eb58:	341a      	adds	r4, #26
 800eb5a:	42b5      	cmp	r5, r6
 800eb5c:	d11a      	bne.n	800eb94 <_printf_common+0xc8>
 800eb5e:	2000      	movs	r0, #0
 800eb60:	e008      	b.n	800eb74 <_printf_common+0xa8>
 800eb62:	2301      	movs	r3, #1
 800eb64:	4652      	mov	r2, sl
 800eb66:	4641      	mov	r1, r8
 800eb68:	4638      	mov	r0, r7
 800eb6a:	47c8      	blx	r9
 800eb6c:	3001      	adds	r0, #1
 800eb6e:	d103      	bne.n	800eb78 <_printf_common+0xac>
 800eb70:	f04f 30ff 	mov.w	r0, #4294967295
 800eb74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb78:	3501      	adds	r5, #1
 800eb7a:	e7c6      	b.n	800eb0a <_printf_common+0x3e>
 800eb7c:	18e1      	adds	r1, r4, r3
 800eb7e:	1c5a      	adds	r2, r3, #1
 800eb80:	2030      	movs	r0, #48	@ 0x30
 800eb82:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800eb86:	4422      	add	r2, r4
 800eb88:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800eb8c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800eb90:	3302      	adds	r3, #2
 800eb92:	e7c7      	b.n	800eb24 <_printf_common+0x58>
 800eb94:	2301      	movs	r3, #1
 800eb96:	4622      	mov	r2, r4
 800eb98:	4641      	mov	r1, r8
 800eb9a:	4638      	mov	r0, r7
 800eb9c:	47c8      	blx	r9
 800eb9e:	3001      	adds	r0, #1
 800eba0:	d0e6      	beq.n	800eb70 <_printf_common+0xa4>
 800eba2:	3601      	adds	r6, #1
 800eba4:	e7d9      	b.n	800eb5a <_printf_common+0x8e>
	...

0800eba8 <_printf_i>:
 800eba8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ebac:	7e0f      	ldrb	r7, [r1, #24]
 800ebae:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ebb0:	2f78      	cmp	r7, #120	@ 0x78
 800ebb2:	4691      	mov	r9, r2
 800ebb4:	4680      	mov	r8, r0
 800ebb6:	460c      	mov	r4, r1
 800ebb8:	469a      	mov	sl, r3
 800ebba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ebbe:	d807      	bhi.n	800ebd0 <_printf_i+0x28>
 800ebc0:	2f62      	cmp	r7, #98	@ 0x62
 800ebc2:	d80a      	bhi.n	800ebda <_printf_i+0x32>
 800ebc4:	2f00      	cmp	r7, #0
 800ebc6:	f000 80d2 	beq.w	800ed6e <_printf_i+0x1c6>
 800ebca:	2f58      	cmp	r7, #88	@ 0x58
 800ebcc:	f000 80b9 	beq.w	800ed42 <_printf_i+0x19a>
 800ebd0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ebd4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ebd8:	e03a      	b.n	800ec50 <_printf_i+0xa8>
 800ebda:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ebde:	2b15      	cmp	r3, #21
 800ebe0:	d8f6      	bhi.n	800ebd0 <_printf_i+0x28>
 800ebe2:	a101      	add	r1, pc, #4	@ (adr r1, 800ebe8 <_printf_i+0x40>)
 800ebe4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ebe8:	0800ec41 	.word	0x0800ec41
 800ebec:	0800ec55 	.word	0x0800ec55
 800ebf0:	0800ebd1 	.word	0x0800ebd1
 800ebf4:	0800ebd1 	.word	0x0800ebd1
 800ebf8:	0800ebd1 	.word	0x0800ebd1
 800ebfc:	0800ebd1 	.word	0x0800ebd1
 800ec00:	0800ec55 	.word	0x0800ec55
 800ec04:	0800ebd1 	.word	0x0800ebd1
 800ec08:	0800ebd1 	.word	0x0800ebd1
 800ec0c:	0800ebd1 	.word	0x0800ebd1
 800ec10:	0800ebd1 	.word	0x0800ebd1
 800ec14:	0800ed55 	.word	0x0800ed55
 800ec18:	0800ec7f 	.word	0x0800ec7f
 800ec1c:	0800ed0f 	.word	0x0800ed0f
 800ec20:	0800ebd1 	.word	0x0800ebd1
 800ec24:	0800ebd1 	.word	0x0800ebd1
 800ec28:	0800ed77 	.word	0x0800ed77
 800ec2c:	0800ebd1 	.word	0x0800ebd1
 800ec30:	0800ec7f 	.word	0x0800ec7f
 800ec34:	0800ebd1 	.word	0x0800ebd1
 800ec38:	0800ebd1 	.word	0x0800ebd1
 800ec3c:	0800ed17 	.word	0x0800ed17
 800ec40:	6833      	ldr	r3, [r6, #0]
 800ec42:	1d1a      	adds	r2, r3, #4
 800ec44:	681b      	ldr	r3, [r3, #0]
 800ec46:	6032      	str	r2, [r6, #0]
 800ec48:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ec4c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ec50:	2301      	movs	r3, #1
 800ec52:	e09d      	b.n	800ed90 <_printf_i+0x1e8>
 800ec54:	6833      	ldr	r3, [r6, #0]
 800ec56:	6820      	ldr	r0, [r4, #0]
 800ec58:	1d19      	adds	r1, r3, #4
 800ec5a:	6031      	str	r1, [r6, #0]
 800ec5c:	0606      	lsls	r6, r0, #24
 800ec5e:	d501      	bpl.n	800ec64 <_printf_i+0xbc>
 800ec60:	681d      	ldr	r5, [r3, #0]
 800ec62:	e003      	b.n	800ec6c <_printf_i+0xc4>
 800ec64:	0645      	lsls	r5, r0, #25
 800ec66:	d5fb      	bpl.n	800ec60 <_printf_i+0xb8>
 800ec68:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ec6c:	2d00      	cmp	r5, #0
 800ec6e:	da03      	bge.n	800ec78 <_printf_i+0xd0>
 800ec70:	232d      	movs	r3, #45	@ 0x2d
 800ec72:	426d      	negs	r5, r5
 800ec74:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ec78:	4859      	ldr	r0, [pc, #356]	@ (800ede0 <_printf_i+0x238>)
 800ec7a:	230a      	movs	r3, #10
 800ec7c:	e011      	b.n	800eca2 <_printf_i+0xfa>
 800ec7e:	6821      	ldr	r1, [r4, #0]
 800ec80:	6833      	ldr	r3, [r6, #0]
 800ec82:	0608      	lsls	r0, r1, #24
 800ec84:	f853 5b04 	ldr.w	r5, [r3], #4
 800ec88:	d402      	bmi.n	800ec90 <_printf_i+0xe8>
 800ec8a:	0649      	lsls	r1, r1, #25
 800ec8c:	bf48      	it	mi
 800ec8e:	b2ad      	uxthmi	r5, r5
 800ec90:	2f6f      	cmp	r7, #111	@ 0x6f
 800ec92:	4853      	ldr	r0, [pc, #332]	@ (800ede0 <_printf_i+0x238>)
 800ec94:	6033      	str	r3, [r6, #0]
 800ec96:	bf14      	ite	ne
 800ec98:	230a      	movne	r3, #10
 800ec9a:	2308      	moveq	r3, #8
 800ec9c:	2100      	movs	r1, #0
 800ec9e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800eca2:	6866      	ldr	r6, [r4, #4]
 800eca4:	60a6      	str	r6, [r4, #8]
 800eca6:	2e00      	cmp	r6, #0
 800eca8:	bfa2      	ittt	ge
 800ecaa:	6821      	ldrge	r1, [r4, #0]
 800ecac:	f021 0104 	bicge.w	r1, r1, #4
 800ecb0:	6021      	strge	r1, [r4, #0]
 800ecb2:	b90d      	cbnz	r5, 800ecb8 <_printf_i+0x110>
 800ecb4:	2e00      	cmp	r6, #0
 800ecb6:	d04b      	beq.n	800ed50 <_printf_i+0x1a8>
 800ecb8:	4616      	mov	r6, r2
 800ecba:	fbb5 f1f3 	udiv	r1, r5, r3
 800ecbe:	fb03 5711 	mls	r7, r3, r1, r5
 800ecc2:	5dc7      	ldrb	r7, [r0, r7]
 800ecc4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ecc8:	462f      	mov	r7, r5
 800ecca:	42bb      	cmp	r3, r7
 800eccc:	460d      	mov	r5, r1
 800ecce:	d9f4      	bls.n	800ecba <_printf_i+0x112>
 800ecd0:	2b08      	cmp	r3, #8
 800ecd2:	d10b      	bne.n	800ecec <_printf_i+0x144>
 800ecd4:	6823      	ldr	r3, [r4, #0]
 800ecd6:	07df      	lsls	r7, r3, #31
 800ecd8:	d508      	bpl.n	800ecec <_printf_i+0x144>
 800ecda:	6923      	ldr	r3, [r4, #16]
 800ecdc:	6861      	ldr	r1, [r4, #4]
 800ecde:	4299      	cmp	r1, r3
 800ece0:	bfde      	ittt	le
 800ece2:	2330      	movle	r3, #48	@ 0x30
 800ece4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ece8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ecec:	1b92      	subs	r2, r2, r6
 800ecee:	6122      	str	r2, [r4, #16]
 800ecf0:	f8cd a000 	str.w	sl, [sp]
 800ecf4:	464b      	mov	r3, r9
 800ecf6:	aa03      	add	r2, sp, #12
 800ecf8:	4621      	mov	r1, r4
 800ecfa:	4640      	mov	r0, r8
 800ecfc:	f7ff fee6 	bl	800eacc <_printf_common>
 800ed00:	3001      	adds	r0, #1
 800ed02:	d14a      	bne.n	800ed9a <_printf_i+0x1f2>
 800ed04:	f04f 30ff 	mov.w	r0, #4294967295
 800ed08:	b004      	add	sp, #16
 800ed0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed0e:	6823      	ldr	r3, [r4, #0]
 800ed10:	f043 0320 	orr.w	r3, r3, #32
 800ed14:	6023      	str	r3, [r4, #0]
 800ed16:	4833      	ldr	r0, [pc, #204]	@ (800ede4 <_printf_i+0x23c>)
 800ed18:	2778      	movs	r7, #120	@ 0x78
 800ed1a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ed1e:	6823      	ldr	r3, [r4, #0]
 800ed20:	6831      	ldr	r1, [r6, #0]
 800ed22:	061f      	lsls	r7, r3, #24
 800ed24:	f851 5b04 	ldr.w	r5, [r1], #4
 800ed28:	d402      	bmi.n	800ed30 <_printf_i+0x188>
 800ed2a:	065f      	lsls	r7, r3, #25
 800ed2c:	bf48      	it	mi
 800ed2e:	b2ad      	uxthmi	r5, r5
 800ed30:	6031      	str	r1, [r6, #0]
 800ed32:	07d9      	lsls	r1, r3, #31
 800ed34:	bf44      	itt	mi
 800ed36:	f043 0320 	orrmi.w	r3, r3, #32
 800ed3a:	6023      	strmi	r3, [r4, #0]
 800ed3c:	b11d      	cbz	r5, 800ed46 <_printf_i+0x19e>
 800ed3e:	2310      	movs	r3, #16
 800ed40:	e7ac      	b.n	800ec9c <_printf_i+0xf4>
 800ed42:	4827      	ldr	r0, [pc, #156]	@ (800ede0 <_printf_i+0x238>)
 800ed44:	e7e9      	b.n	800ed1a <_printf_i+0x172>
 800ed46:	6823      	ldr	r3, [r4, #0]
 800ed48:	f023 0320 	bic.w	r3, r3, #32
 800ed4c:	6023      	str	r3, [r4, #0]
 800ed4e:	e7f6      	b.n	800ed3e <_printf_i+0x196>
 800ed50:	4616      	mov	r6, r2
 800ed52:	e7bd      	b.n	800ecd0 <_printf_i+0x128>
 800ed54:	6833      	ldr	r3, [r6, #0]
 800ed56:	6825      	ldr	r5, [r4, #0]
 800ed58:	6961      	ldr	r1, [r4, #20]
 800ed5a:	1d18      	adds	r0, r3, #4
 800ed5c:	6030      	str	r0, [r6, #0]
 800ed5e:	062e      	lsls	r6, r5, #24
 800ed60:	681b      	ldr	r3, [r3, #0]
 800ed62:	d501      	bpl.n	800ed68 <_printf_i+0x1c0>
 800ed64:	6019      	str	r1, [r3, #0]
 800ed66:	e002      	b.n	800ed6e <_printf_i+0x1c6>
 800ed68:	0668      	lsls	r0, r5, #25
 800ed6a:	d5fb      	bpl.n	800ed64 <_printf_i+0x1bc>
 800ed6c:	8019      	strh	r1, [r3, #0]
 800ed6e:	2300      	movs	r3, #0
 800ed70:	6123      	str	r3, [r4, #16]
 800ed72:	4616      	mov	r6, r2
 800ed74:	e7bc      	b.n	800ecf0 <_printf_i+0x148>
 800ed76:	6833      	ldr	r3, [r6, #0]
 800ed78:	1d1a      	adds	r2, r3, #4
 800ed7a:	6032      	str	r2, [r6, #0]
 800ed7c:	681e      	ldr	r6, [r3, #0]
 800ed7e:	6862      	ldr	r2, [r4, #4]
 800ed80:	2100      	movs	r1, #0
 800ed82:	4630      	mov	r0, r6
 800ed84:	f7f1 fa04 	bl	8000190 <memchr>
 800ed88:	b108      	cbz	r0, 800ed8e <_printf_i+0x1e6>
 800ed8a:	1b80      	subs	r0, r0, r6
 800ed8c:	6060      	str	r0, [r4, #4]
 800ed8e:	6863      	ldr	r3, [r4, #4]
 800ed90:	6123      	str	r3, [r4, #16]
 800ed92:	2300      	movs	r3, #0
 800ed94:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ed98:	e7aa      	b.n	800ecf0 <_printf_i+0x148>
 800ed9a:	6923      	ldr	r3, [r4, #16]
 800ed9c:	4632      	mov	r2, r6
 800ed9e:	4649      	mov	r1, r9
 800eda0:	4640      	mov	r0, r8
 800eda2:	47d0      	blx	sl
 800eda4:	3001      	adds	r0, #1
 800eda6:	d0ad      	beq.n	800ed04 <_printf_i+0x15c>
 800eda8:	6823      	ldr	r3, [r4, #0]
 800edaa:	079b      	lsls	r3, r3, #30
 800edac:	d413      	bmi.n	800edd6 <_printf_i+0x22e>
 800edae:	68e0      	ldr	r0, [r4, #12]
 800edb0:	9b03      	ldr	r3, [sp, #12]
 800edb2:	4298      	cmp	r0, r3
 800edb4:	bfb8      	it	lt
 800edb6:	4618      	movlt	r0, r3
 800edb8:	e7a6      	b.n	800ed08 <_printf_i+0x160>
 800edba:	2301      	movs	r3, #1
 800edbc:	4632      	mov	r2, r6
 800edbe:	4649      	mov	r1, r9
 800edc0:	4640      	mov	r0, r8
 800edc2:	47d0      	blx	sl
 800edc4:	3001      	adds	r0, #1
 800edc6:	d09d      	beq.n	800ed04 <_printf_i+0x15c>
 800edc8:	3501      	adds	r5, #1
 800edca:	68e3      	ldr	r3, [r4, #12]
 800edcc:	9903      	ldr	r1, [sp, #12]
 800edce:	1a5b      	subs	r3, r3, r1
 800edd0:	42ab      	cmp	r3, r5
 800edd2:	dcf2      	bgt.n	800edba <_printf_i+0x212>
 800edd4:	e7eb      	b.n	800edae <_printf_i+0x206>
 800edd6:	2500      	movs	r5, #0
 800edd8:	f104 0619 	add.w	r6, r4, #25
 800eddc:	e7f5      	b.n	800edca <_printf_i+0x222>
 800edde:	bf00      	nop
 800ede0:	08010807 	.word	0x08010807
 800ede4:	08010818 	.word	0x08010818

0800ede8 <__sflush_r>:
 800ede8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800edec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800edf0:	0716      	lsls	r6, r2, #28
 800edf2:	4605      	mov	r5, r0
 800edf4:	460c      	mov	r4, r1
 800edf6:	d454      	bmi.n	800eea2 <__sflush_r+0xba>
 800edf8:	684b      	ldr	r3, [r1, #4]
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	dc02      	bgt.n	800ee04 <__sflush_r+0x1c>
 800edfe:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	dd48      	ble.n	800ee96 <__sflush_r+0xae>
 800ee04:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ee06:	2e00      	cmp	r6, #0
 800ee08:	d045      	beq.n	800ee96 <__sflush_r+0xae>
 800ee0a:	2300      	movs	r3, #0
 800ee0c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ee10:	682f      	ldr	r7, [r5, #0]
 800ee12:	6a21      	ldr	r1, [r4, #32]
 800ee14:	602b      	str	r3, [r5, #0]
 800ee16:	d030      	beq.n	800ee7a <__sflush_r+0x92>
 800ee18:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ee1a:	89a3      	ldrh	r3, [r4, #12]
 800ee1c:	0759      	lsls	r1, r3, #29
 800ee1e:	d505      	bpl.n	800ee2c <__sflush_r+0x44>
 800ee20:	6863      	ldr	r3, [r4, #4]
 800ee22:	1ad2      	subs	r2, r2, r3
 800ee24:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ee26:	b10b      	cbz	r3, 800ee2c <__sflush_r+0x44>
 800ee28:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ee2a:	1ad2      	subs	r2, r2, r3
 800ee2c:	2300      	movs	r3, #0
 800ee2e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ee30:	6a21      	ldr	r1, [r4, #32]
 800ee32:	4628      	mov	r0, r5
 800ee34:	47b0      	blx	r6
 800ee36:	1c43      	adds	r3, r0, #1
 800ee38:	89a3      	ldrh	r3, [r4, #12]
 800ee3a:	d106      	bne.n	800ee4a <__sflush_r+0x62>
 800ee3c:	6829      	ldr	r1, [r5, #0]
 800ee3e:	291d      	cmp	r1, #29
 800ee40:	d82b      	bhi.n	800ee9a <__sflush_r+0xb2>
 800ee42:	4a2a      	ldr	r2, [pc, #168]	@ (800eeec <__sflush_r+0x104>)
 800ee44:	410a      	asrs	r2, r1
 800ee46:	07d6      	lsls	r6, r2, #31
 800ee48:	d427      	bmi.n	800ee9a <__sflush_r+0xb2>
 800ee4a:	2200      	movs	r2, #0
 800ee4c:	6062      	str	r2, [r4, #4]
 800ee4e:	04d9      	lsls	r1, r3, #19
 800ee50:	6922      	ldr	r2, [r4, #16]
 800ee52:	6022      	str	r2, [r4, #0]
 800ee54:	d504      	bpl.n	800ee60 <__sflush_r+0x78>
 800ee56:	1c42      	adds	r2, r0, #1
 800ee58:	d101      	bne.n	800ee5e <__sflush_r+0x76>
 800ee5a:	682b      	ldr	r3, [r5, #0]
 800ee5c:	b903      	cbnz	r3, 800ee60 <__sflush_r+0x78>
 800ee5e:	6560      	str	r0, [r4, #84]	@ 0x54
 800ee60:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ee62:	602f      	str	r7, [r5, #0]
 800ee64:	b1b9      	cbz	r1, 800ee96 <__sflush_r+0xae>
 800ee66:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ee6a:	4299      	cmp	r1, r3
 800ee6c:	d002      	beq.n	800ee74 <__sflush_r+0x8c>
 800ee6e:	4628      	mov	r0, r5
 800ee70:	f7ff fa9a 	bl	800e3a8 <_free_r>
 800ee74:	2300      	movs	r3, #0
 800ee76:	6363      	str	r3, [r4, #52]	@ 0x34
 800ee78:	e00d      	b.n	800ee96 <__sflush_r+0xae>
 800ee7a:	2301      	movs	r3, #1
 800ee7c:	4628      	mov	r0, r5
 800ee7e:	47b0      	blx	r6
 800ee80:	4602      	mov	r2, r0
 800ee82:	1c50      	adds	r0, r2, #1
 800ee84:	d1c9      	bne.n	800ee1a <__sflush_r+0x32>
 800ee86:	682b      	ldr	r3, [r5, #0]
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d0c6      	beq.n	800ee1a <__sflush_r+0x32>
 800ee8c:	2b1d      	cmp	r3, #29
 800ee8e:	d001      	beq.n	800ee94 <__sflush_r+0xac>
 800ee90:	2b16      	cmp	r3, #22
 800ee92:	d11e      	bne.n	800eed2 <__sflush_r+0xea>
 800ee94:	602f      	str	r7, [r5, #0]
 800ee96:	2000      	movs	r0, #0
 800ee98:	e022      	b.n	800eee0 <__sflush_r+0xf8>
 800ee9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ee9e:	b21b      	sxth	r3, r3
 800eea0:	e01b      	b.n	800eeda <__sflush_r+0xf2>
 800eea2:	690f      	ldr	r7, [r1, #16]
 800eea4:	2f00      	cmp	r7, #0
 800eea6:	d0f6      	beq.n	800ee96 <__sflush_r+0xae>
 800eea8:	0793      	lsls	r3, r2, #30
 800eeaa:	680e      	ldr	r6, [r1, #0]
 800eeac:	bf08      	it	eq
 800eeae:	694b      	ldreq	r3, [r1, #20]
 800eeb0:	600f      	str	r7, [r1, #0]
 800eeb2:	bf18      	it	ne
 800eeb4:	2300      	movne	r3, #0
 800eeb6:	eba6 0807 	sub.w	r8, r6, r7
 800eeba:	608b      	str	r3, [r1, #8]
 800eebc:	f1b8 0f00 	cmp.w	r8, #0
 800eec0:	dde9      	ble.n	800ee96 <__sflush_r+0xae>
 800eec2:	6a21      	ldr	r1, [r4, #32]
 800eec4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800eec6:	4643      	mov	r3, r8
 800eec8:	463a      	mov	r2, r7
 800eeca:	4628      	mov	r0, r5
 800eecc:	47b0      	blx	r6
 800eece:	2800      	cmp	r0, #0
 800eed0:	dc08      	bgt.n	800eee4 <__sflush_r+0xfc>
 800eed2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eed6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800eeda:	81a3      	strh	r3, [r4, #12]
 800eedc:	f04f 30ff 	mov.w	r0, #4294967295
 800eee0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eee4:	4407      	add	r7, r0
 800eee6:	eba8 0800 	sub.w	r8, r8, r0
 800eeea:	e7e7      	b.n	800eebc <__sflush_r+0xd4>
 800eeec:	dfbffffe 	.word	0xdfbffffe

0800eef0 <_fflush_r>:
 800eef0:	b538      	push	{r3, r4, r5, lr}
 800eef2:	690b      	ldr	r3, [r1, #16]
 800eef4:	4605      	mov	r5, r0
 800eef6:	460c      	mov	r4, r1
 800eef8:	b913      	cbnz	r3, 800ef00 <_fflush_r+0x10>
 800eefa:	2500      	movs	r5, #0
 800eefc:	4628      	mov	r0, r5
 800eefe:	bd38      	pop	{r3, r4, r5, pc}
 800ef00:	b118      	cbz	r0, 800ef0a <_fflush_r+0x1a>
 800ef02:	6a03      	ldr	r3, [r0, #32]
 800ef04:	b90b      	cbnz	r3, 800ef0a <_fflush_r+0x1a>
 800ef06:	f7ff f825 	bl	800df54 <__sinit>
 800ef0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	d0f3      	beq.n	800eefa <_fflush_r+0xa>
 800ef12:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ef14:	07d0      	lsls	r0, r2, #31
 800ef16:	d404      	bmi.n	800ef22 <_fflush_r+0x32>
 800ef18:	0599      	lsls	r1, r3, #22
 800ef1a:	d402      	bmi.n	800ef22 <_fflush_r+0x32>
 800ef1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ef1e:	f7ff fa32 	bl	800e386 <__retarget_lock_acquire_recursive>
 800ef22:	4628      	mov	r0, r5
 800ef24:	4621      	mov	r1, r4
 800ef26:	f7ff ff5f 	bl	800ede8 <__sflush_r>
 800ef2a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ef2c:	07da      	lsls	r2, r3, #31
 800ef2e:	4605      	mov	r5, r0
 800ef30:	d4e4      	bmi.n	800eefc <_fflush_r+0xc>
 800ef32:	89a3      	ldrh	r3, [r4, #12]
 800ef34:	059b      	lsls	r3, r3, #22
 800ef36:	d4e1      	bmi.n	800eefc <_fflush_r+0xc>
 800ef38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ef3a:	f7ff fa25 	bl	800e388 <__retarget_lock_release_recursive>
 800ef3e:	e7dd      	b.n	800eefc <_fflush_r+0xc>

0800ef40 <__swhatbuf_r>:
 800ef40:	b570      	push	{r4, r5, r6, lr}
 800ef42:	460c      	mov	r4, r1
 800ef44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ef48:	2900      	cmp	r1, #0
 800ef4a:	b096      	sub	sp, #88	@ 0x58
 800ef4c:	4615      	mov	r5, r2
 800ef4e:	461e      	mov	r6, r3
 800ef50:	da0d      	bge.n	800ef6e <__swhatbuf_r+0x2e>
 800ef52:	89a3      	ldrh	r3, [r4, #12]
 800ef54:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ef58:	f04f 0100 	mov.w	r1, #0
 800ef5c:	bf14      	ite	ne
 800ef5e:	2340      	movne	r3, #64	@ 0x40
 800ef60:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ef64:	2000      	movs	r0, #0
 800ef66:	6031      	str	r1, [r6, #0]
 800ef68:	602b      	str	r3, [r5, #0]
 800ef6a:	b016      	add	sp, #88	@ 0x58
 800ef6c:	bd70      	pop	{r4, r5, r6, pc}
 800ef6e:	466a      	mov	r2, sp
 800ef70:	f000 f896 	bl	800f0a0 <_fstat_r>
 800ef74:	2800      	cmp	r0, #0
 800ef76:	dbec      	blt.n	800ef52 <__swhatbuf_r+0x12>
 800ef78:	9901      	ldr	r1, [sp, #4]
 800ef7a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ef7e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ef82:	4259      	negs	r1, r3
 800ef84:	4159      	adcs	r1, r3
 800ef86:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ef8a:	e7eb      	b.n	800ef64 <__swhatbuf_r+0x24>

0800ef8c <__smakebuf_r>:
 800ef8c:	898b      	ldrh	r3, [r1, #12]
 800ef8e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ef90:	079d      	lsls	r5, r3, #30
 800ef92:	4606      	mov	r6, r0
 800ef94:	460c      	mov	r4, r1
 800ef96:	d507      	bpl.n	800efa8 <__smakebuf_r+0x1c>
 800ef98:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ef9c:	6023      	str	r3, [r4, #0]
 800ef9e:	6123      	str	r3, [r4, #16]
 800efa0:	2301      	movs	r3, #1
 800efa2:	6163      	str	r3, [r4, #20]
 800efa4:	b003      	add	sp, #12
 800efa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800efa8:	ab01      	add	r3, sp, #4
 800efaa:	466a      	mov	r2, sp
 800efac:	f7ff ffc8 	bl	800ef40 <__swhatbuf_r>
 800efb0:	9f00      	ldr	r7, [sp, #0]
 800efb2:	4605      	mov	r5, r0
 800efb4:	4639      	mov	r1, r7
 800efb6:	4630      	mov	r0, r6
 800efb8:	f7ff fa62 	bl	800e480 <_malloc_r>
 800efbc:	b948      	cbnz	r0, 800efd2 <__smakebuf_r+0x46>
 800efbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800efc2:	059a      	lsls	r2, r3, #22
 800efc4:	d4ee      	bmi.n	800efa4 <__smakebuf_r+0x18>
 800efc6:	f023 0303 	bic.w	r3, r3, #3
 800efca:	f043 0302 	orr.w	r3, r3, #2
 800efce:	81a3      	strh	r3, [r4, #12]
 800efd0:	e7e2      	b.n	800ef98 <__smakebuf_r+0xc>
 800efd2:	89a3      	ldrh	r3, [r4, #12]
 800efd4:	6020      	str	r0, [r4, #0]
 800efd6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800efda:	81a3      	strh	r3, [r4, #12]
 800efdc:	9b01      	ldr	r3, [sp, #4]
 800efde:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800efe2:	b15b      	cbz	r3, 800effc <__smakebuf_r+0x70>
 800efe4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800efe8:	4630      	mov	r0, r6
 800efea:	f000 f86b 	bl	800f0c4 <_isatty_r>
 800efee:	b128      	cbz	r0, 800effc <__smakebuf_r+0x70>
 800eff0:	89a3      	ldrh	r3, [r4, #12]
 800eff2:	f023 0303 	bic.w	r3, r3, #3
 800eff6:	f043 0301 	orr.w	r3, r3, #1
 800effa:	81a3      	strh	r3, [r4, #12]
 800effc:	89a3      	ldrh	r3, [r4, #12]
 800effe:	431d      	orrs	r5, r3
 800f000:	81a5      	strh	r5, [r4, #12]
 800f002:	e7cf      	b.n	800efa4 <__smakebuf_r+0x18>

0800f004 <_putc_r>:
 800f004:	b570      	push	{r4, r5, r6, lr}
 800f006:	460d      	mov	r5, r1
 800f008:	4614      	mov	r4, r2
 800f00a:	4606      	mov	r6, r0
 800f00c:	b118      	cbz	r0, 800f016 <_putc_r+0x12>
 800f00e:	6a03      	ldr	r3, [r0, #32]
 800f010:	b90b      	cbnz	r3, 800f016 <_putc_r+0x12>
 800f012:	f7fe ff9f 	bl	800df54 <__sinit>
 800f016:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f018:	07d8      	lsls	r0, r3, #31
 800f01a:	d405      	bmi.n	800f028 <_putc_r+0x24>
 800f01c:	89a3      	ldrh	r3, [r4, #12]
 800f01e:	0599      	lsls	r1, r3, #22
 800f020:	d402      	bmi.n	800f028 <_putc_r+0x24>
 800f022:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f024:	f7ff f9af 	bl	800e386 <__retarget_lock_acquire_recursive>
 800f028:	68a3      	ldr	r3, [r4, #8]
 800f02a:	3b01      	subs	r3, #1
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	60a3      	str	r3, [r4, #8]
 800f030:	da05      	bge.n	800f03e <_putc_r+0x3a>
 800f032:	69a2      	ldr	r2, [r4, #24]
 800f034:	4293      	cmp	r3, r2
 800f036:	db12      	blt.n	800f05e <_putc_r+0x5a>
 800f038:	b2eb      	uxtb	r3, r5
 800f03a:	2b0a      	cmp	r3, #10
 800f03c:	d00f      	beq.n	800f05e <_putc_r+0x5a>
 800f03e:	6823      	ldr	r3, [r4, #0]
 800f040:	1c5a      	adds	r2, r3, #1
 800f042:	6022      	str	r2, [r4, #0]
 800f044:	701d      	strb	r5, [r3, #0]
 800f046:	b2ed      	uxtb	r5, r5
 800f048:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f04a:	07da      	lsls	r2, r3, #31
 800f04c:	d405      	bmi.n	800f05a <_putc_r+0x56>
 800f04e:	89a3      	ldrh	r3, [r4, #12]
 800f050:	059b      	lsls	r3, r3, #22
 800f052:	d402      	bmi.n	800f05a <_putc_r+0x56>
 800f054:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f056:	f7ff f997 	bl	800e388 <__retarget_lock_release_recursive>
 800f05a:	4628      	mov	r0, r5
 800f05c:	bd70      	pop	{r4, r5, r6, pc}
 800f05e:	4629      	mov	r1, r5
 800f060:	4622      	mov	r2, r4
 800f062:	4630      	mov	r0, r6
 800f064:	f7ff f887 	bl	800e176 <__swbuf_r>
 800f068:	4605      	mov	r5, r0
 800f06a:	e7ed      	b.n	800f048 <_putc_r+0x44>

0800f06c <memmove>:
 800f06c:	4288      	cmp	r0, r1
 800f06e:	b510      	push	{r4, lr}
 800f070:	eb01 0402 	add.w	r4, r1, r2
 800f074:	d902      	bls.n	800f07c <memmove+0x10>
 800f076:	4284      	cmp	r4, r0
 800f078:	4623      	mov	r3, r4
 800f07a:	d807      	bhi.n	800f08c <memmove+0x20>
 800f07c:	1e43      	subs	r3, r0, #1
 800f07e:	42a1      	cmp	r1, r4
 800f080:	d008      	beq.n	800f094 <memmove+0x28>
 800f082:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f086:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f08a:	e7f8      	b.n	800f07e <memmove+0x12>
 800f08c:	4402      	add	r2, r0
 800f08e:	4601      	mov	r1, r0
 800f090:	428a      	cmp	r2, r1
 800f092:	d100      	bne.n	800f096 <memmove+0x2a>
 800f094:	bd10      	pop	{r4, pc}
 800f096:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f09a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f09e:	e7f7      	b.n	800f090 <memmove+0x24>

0800f0a0 <_fstat_r>:
 800f0a0:	b538      	push	{r3, r4, r5, lr}
 800f0a2:	4d07      	ldr	r5, [pc, #28]	@ (800f0c0 <_fstat_r+0x20>)
 800f0a4:	2300      	movs	r3, #0
 800f0a6:	4604      	mov	r4, r0
 800f0a8:	4608      	mov	r0, r1
 800f0aa:	4611      	mov	r1, r2
 800f0ac:	602b      	str	r3, [r5, #0]
 800f0ae:	f000 f867 	bl	800f180 <_fstat>
 800f0b2:	1c43      	adds	r3, r0, #1
 800f0b4:	d102      	bne.n	800f0bc <_fstat_r+0x1c>
 800f0b6:	682b      	ldr	r3, [r5, #0]
 800f0b8:	b103      	cbz	r3, 800f0bc <_fstat_r+0x1c>
 800f0ba:	6023      	str	r3, [r4, #0]
 800f0bc:	bd38      	pop	{r3, r4, r5, pc}
 800f0be:	bf00      	nop
 800f0c0:	20002410 	.word	0x20002410

0800f0c4 <_isatty_r>:
 800f0c4:	b538      	push	{r3, r4, r5, lr}
 800f0c6:	4d06      	ldr	r5, [pc, #24]	@ (800f0e0 <_isatty_r+0x1c>)
 800f0c8:	2300      	movs	r3, #0
 800f0ca:	4604      	mov	r4, r0
 800f0cc:	4608      	mov	r0, r1
 800f0ce:	602b      	str	r3, [r5, #0]
 800f0d0:	f000 f85e 	bl	800f190 <_isatty>
 800f0d4:	1c43      	adds	r3, r0, #1
 800f0d6:	d102      	bne.n	800f0de <_isatty_r+0x1a>
 800f0d8:	682b      	ldr	r3, [r5, #0]
 800f0da:	b103      	cbz	r3, 800f0de <_isatty_r+0x1a>
 800f0dc:	6023      	str	r3, [r4, #0]
 800f0de:	bd38      	pop	{r3, r4, r5, pc}
 800f0e0:	20002410 	.word	0x20002410

0800f0e4 <_sbrk_r>:
 800f0e4:	b538      	push	{r3, r4, r5, lr}
 800f0e6:	4d06      	ldr	r5, [pc, #24]	@ (800f100 <_sbrk_r+0x1c>)
 800f0e8:	2300      	movs	r3, #0
 800f0ea:	4604      	mov	r4, r0
 800f0ec:	4608      	mov	r0, r1
 800f0ee:	602b      	str	r3, [r5, #0]
 800f0f0:	f000 f866 	bl	800f1c0 <_sbrk>
 800f0f4:	1c43      	adds	r3, r0, #1
 800f0f6:	d102      	bne.n	800f0fe <_sbrk_r+0x1a>
 800f0f8:	682b      	ldr	r3, [r5, #0]
 800f0fa:	b103      	cbz	r3, 800f0fe <_sbrk_r+0x1a>
 800f0fc:	6023      	str	r3, [r4, #0]
 800f0fe:	bd38      	pop	{r3, r4, r5, pc}
 800f100:	20002410 	.word	0x20002410

0800f104 <_realloc_r>:
 800f104:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f108:	4680      	mov	r8, r0
 800f10a:	4615      	mov	r5, r2
 800f10c:	460c      	mov	r4, r1
 800f10e:	b921      	cbnz	r1, 800f11a <_realloc_r+0x16>
 800f110:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f114:	4611      	mov	r1, r2
 800f116:	f7ff b9b3 	b.w	800e480 <_malloc_r>
 800f11a:	b92a      	cbnz	r2, 800f128 <_realloc_r+0x24>
 800f11c:	f7ff f944 	bl	800e3a8 <_free_r>
 800f120:	2400      	movs	r4, #0
 800f122:	4620      	mov	r0, r4
 800f124:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f128:	f000 f81a 	bl	800f160 <_malloc_usable_size_r>
 800f12c:	4285      	cmp	r5, r0
 800f12e:	4606      	mov	r6, r0
 800f130:	d802      	bhi.n	800f138 <_realloc_r+0x34>
 800f132:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800f136:	d8f4      	bhi.n	800f122 <_realloc_r+0x1e>
 800f138:	4629      	mov	r1, r5
 800f13a:	4640      	mov	r0, r8
 800f13c:	f7ff f9a0 	bl	800e480 <_malloc_r>
 800f140:	4607      	mov	r7, r0
 800f142:	2800      	cmp	r0, #0
 800f144:	d0ec      	beq.n	800f120 <_realloc_r+0x1c>
 800f146:	42b5      	cmp	r5, r6
 800f148:	462a      	mov	r2, r5
 800f14a:	4621      	mov	r1, r4
 800f14c:	bf28      	it	cs
 800f14e:	4632      	movcs	r2, r6
 800f150:	f7ff f91b 	bl	800e38a <memcpy>
 800f154:	4621      	mov	r1, r4
 800f156:	4640      	mov	r0, r8
 800f158:	f7ff f926 	bl	800e3a8 <_free_r>
 800f15c:	463c      	mov	r4, r7
 800f15e:	e7e0      	b.n	800f122 <_realloc_r+0x1e>

0800f160 <_malloc_usable_size_r>:
 800f160:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f164:	1f18      	subs	r0, r3, #4
 800f166:	2b00      	cmp	r3, #0
 800f168:	bfbc      	itt	lt
 800f16a:	580b      	ldrlt	r3, [r1, r0]
 800f16c:	18c0      	addlt	r0, r0, r3
 800f16e:	4770      	bx	lr

0800f170 <_close>:
 800f170:	4b02      	ldr	r3, [pc, #8]	@ (800f17c <_close+0xc>)
 800f172:	2258      	movs	r2, #88	@ 0x58
 800f174:	601a      	str	r2, [r3, #0]
 800f176:	f04f 30ff 	mov.w	r0, #4294967295
 800f17a:	4770      	bx	lr
 800f17c:	20002410 	.word	0x20002410

0800f180 <_fstat>:
 800f180:	4b02      	ldr	r3, [pc, #8]	@ (800f18c <_fstat+0xc>)
 800f182:	2258      	movs	r2, #88	@ 0x58
 800f184:	601a      	str	r2, [r3, #0]
 800f186:	f04f 30ff 	mov.w	r0, #4294967295
 800f18a:	4770      	bx	lr
 800f18c:	20002410 	.word	0x20002410

0800f190 <_isatty>:
 800f190:	4b02      	ldr	r3, [pc, #8]	@ (800f19c <_isatty+0xc>)
 800f192:	2258      	movs	r2, #88	@ 0x58
 800f194:	601a      	str	r2, [r3, #0]
 800f196:	2000      	movs	r0, #0
 800f198:	4770      	bx	lr
 800f19a:	bf00      	nop
 800f19c:	20002410 	.word	0x20002410

0800f1a0 <_lseek>:
 800f1a0:	4b02      	ldr	r3, [pc, #8]	@ (800f1ac <_lseek+0xc>)
 800f1a2:	2258      	movs	r2, #88	@ 0x58
 800f1a4:	601a      	str	r2, [r3, #0]
 800f1a6:	f04f 30ff 	mov.w	r0, #4294967295
 800f1aa:	4770      	bx	lr
 800f1ac:	20002410 	.word	0x20002410

0800f1b0 <_read>:
 800f1b0:	4b02      	ldr	r3, [pc, #8]	@ (800f1bc <_read+0xc>)
 800f1b2:	2258      	movs	r2, #88	@ 0x58
 800f1b4:	601a      	str	r2, [r3, #0]
 800f1b6:	f04f 30ff 	mov.w	r0, #4294967295
 800f1ba:	4770      	bx	lr
 800f1bc:	20002410 	.word	0x20002410

0800f1c0 <_sbrk>:
 800f1c0:	4a04      	ldr	r2, [pc, #16]	@ (800f1d4 <_sbrk+0x14>)
 800f1c2:	6811      	ldr	r1, [r2, #0]
 800f1c4:	4603      	mov	r3, r0
 800f1c6:	b909      	cbnz	r1, 800f1cc <_sbrk+0xc>
 800f1c8:	4903      	ldr	r1, [pc, #12]	@ (800f1d8 <_sbrk+0x18>)
 800f1ca:	6011      	str	r1, [r2, #0]
 800f1cc:	6810      	ldr	r0, [r2, #0]
 800f1ce:	4403      	add	r3, r0
 800f1d0:	6013      	str	r3, [r2, #0]
 800f1d2:	4770      	bx	lr
 800f1d4:	20002420 	.word	0x20002420
 800f1d8:	20002428 	.word	0x20002428

0800f1dc <_init>:
 800f1dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1de:	bf00      	nop
 800f1e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f1e2:	bc08      	pop	{r3}
 800f1e4:	469e      	mov	lr, r3
 800f1e6:	4770      	bx	lr

0800f1e8 <_fini>:
 800f1e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1ea:	bf00      	nop
 800f1ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f1ee:	bc08      	pop	{r3}
 800f1f0:	469e      	mov	lr, r3
 800f1f2:	4770      	bx	lr
